<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1208_httpd-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">req_newindex<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">lua_State<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">L<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">key<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
    <comment type="block" pos:line="4" pos:column="5">/* request_rec* r = lua_touserdata(L, lua_upvalueindex(1)); */</comment>
    <comment type="block" pos:line="5" pos:column="5">/* const char* key = luaL_checkstring(L, -2); */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">request_rec<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">r<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><call><name pos:line="6" pos:column="22">ap_lua_check_request_rec<pos:position pos:line="6" pos:column="46"/></name><argument_list pos:line="6" pos:column="46">(<argument><expr><name pos:line="6" pos:column="47">L<pos:position pos:line="6" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="50">1<pos:position pos:line="6" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">key<pos:position pos:line="7" pos:column="8"/></name> <operator pos:line="7" pos:column="9">=<pos:position pos:line="7" pos:column="10"/></operator> <call><name pos:line="7" pos:column="11">luaL_checkstring<pos:position pos:line="7" pos:column="27"/></name><argument_list pos:line="7" pos:column="27">(<argument><expr><name pos:line="7" pos:column="28">L<pos:position pos:line="7" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="31">2<pos:position pos:line="7" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="34"/></expr_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><literal type="number" pos:line="9" pos:column="9">0<pos:position pos:line="9" pos:column="10"/></literal> <operator pos:line="9" pos:column="11">==<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">strcmp<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><literal type="string" pos:line="9" pos:column="21">"args"<pos:position pos:line="9" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="29">key<pos:position pos:line="9" pos:column="32"/></name></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="34"/></condition><then pos:line="9" pos:column="34"> <block pos:line="9" pos:column="35">{
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">value<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><call><name pos:line="10" pos:column="29">luaL_checkstring<pos:position pos:line="10" pos:column="45"/></name><argument_list pos:line="10" pos:column="45">(<argument><expr><name pos:line="10" pos:column="46">L<pos:position pos:line="10" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="49">3<pos:position pos:line="10" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="52"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">r<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">args<pos:position pos:line="11" pos:column="16"/></name></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <call><name pos:line="11" pos:column="19">apr_pstrdup<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name><name pos:line="11" pos:column="31">r<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">-&gt;<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="34">pool<pos:position pos:line="11" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">value<pos:position pos:line="11" pos:column="45"/></name></expr></argument>)<pos:position pos:line="11" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="47"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><literal type="number" pos:line="15" pos:column="9">0<pos:position pos:line="15" pos:column="10"/></literal> <operator pos:line="15" pos:column="11">==<pos:position pos:line="15" pos:column="13"/></operator> <call><name pos:line="15" pos:column="14">strcmp<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><literal type="string" pos:line="15" pos:column="21">"content_type"<pos:position pos:line="15" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="37">key<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42"> <block pos:line="15" pos:column="43">{
        <decl_stmt><decl><type><specifier pos:line="16" pos:column="9">const<pos:position pos:line="16" pos:column="14"/></specifier> <name pos:line="16" pos:column="15">char<pos:position pos:line="16" pos:column="19"/></name> <modifier pos:line="16" pos:column="20">*<pos:position pos:line="16" pos:column="21"/></modifier></type><name pos:line="16" pos:column="21">value<pos:position pos:line="16" pos:column="26"/></name> <init pos:line="16" pos:column="27">= <expr><call><name pos:line="16" pos:column="29">luaL_checkstring<pos:position pos:line="16" pos:column="45"/></name><argument_list pos:line="16" pos:column="45">(<argument><expr><name pos:line="16" pos:column="46">L<pos:position pos:line="16" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="49">3<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="52"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">ap_set_content_type<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">r<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="32">apr_pstrdup<pos:position pos:line="17" pos:column="43"/></name><argument_list pos:line="17" pos:column="43">(<argument><expr><name><name pos:line="17" pos:column="44">r<pos:position pos:line="17" pos:column="45"/></name><operator pos:line="17" pos:column="45">-&gt;<pos:position pos:line="17" pos:column="50"/></operator><name pos:line="17" pos:column="47">pool<pos:position pos:line="17" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">value<pos:position pos:line="17" pos:column="58"/></name></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><literal type="number" pos:line="18" pos:column="16">0<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><literal type="number" pos:line="21" pos:column="9">0<pos:position pos:line="21" pos:column="10"/></literal> <operator pos:line="21" pos:column="11">==<pos:position pos:line="21" pos:column="13"/></operator> <call><name pos:line="21" pos:column="14">strcmp<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><literal type="string" pos:line="21" pos:column="21">"filename"<pos:position pos:line="21" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">key<pos:position pos:line="21" pos:column="36"/></name></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="38"/></condition><then pos:line="21" pos:column="38"> <block pos:line="21" pos:column="39">{
        <decl_stmt><decl><type><specifier pos:line="22" pos:column="9">const<pos:position pos:line="22" pos:column="14"/></specifier> <name pos:line="22" pos:column="15">char<pos:position pos:line="22" pos:column="19"/></name> <modifier pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></modifier></type><name pos:line="22" pos:column="21">value<pos:position pos:line="22" pos:column="26"/></name> <init pos:line="22" pos:column="27">= <expr><call><name pos:line="22" pos:column="29">luaL_checkstring<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><name pos:line="22" pos:column="46">L<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="49">3<pos:position pos:line="22" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="52"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">r<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">-&gt;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="12">filename<pos:position pos:line="23" pos:column="20"/></name></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <call><name pos:line="23" pos:column="23">apr_pstrdup<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name><name pos:line="23" pos:column="35">r<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">pool<pos:position pos:line="23" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="44">value<pos:position pos:line="23" pos:column="49"/></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
        <return pos:line="24" pos:column="9">return <expr><literal type="number" pos:line="24" pos:column="16">0<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><literal type="number" pos:line="27" pos:column="9">0<pos:position pos:line="27" pos:column="10"/></literal> <operator pos:line="27" pos:column="11">==<pos:position pos:line="27" pos:column="13"/></operator> <call><name pos:line="27" pos:column="14">strcmp<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><literal type="string" pos:line="27" pos:column="21">"handler"<pos:position pos:line="27" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="32">key<pos:position pos:line="27" pos:column="35"/></name></expr></argument>)<pos:position pos:line="27" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="37"/></condition><then pos:line="27" pos:column="37"> <block pos:line="27" pos:column="38">{
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">const<pos:position pos:line="28" pos:column="14"/></specifier> <name pos:line="28" pos:column="15">char<pos:position pos:line="28" pos:column="19"/></name> <modifier pos:line="28" pos:column="20">*<pos:position pos:line="28" pos:column="21"/></modifier></type><name pos:line="28" pos:column="21">value<pos:position pos:line="28" pos:column="26"/></name> <init pos:line="28" pos:column="27">= <expr><call><name pos:line="28" pos:column="29">luaL_checkstring<pos:position pos:line="28" pos:column="45"/></name><argument_list pos:line="28" pos:column="45">(<argument><expr><name pos:line="28" pos:column="46">L<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="49">3<pos:position pos:line="28" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="28" pos:column="52"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">r<pos:position pos:line="29" pos:column="10"/></name><operator pos:line="29" pos:column="10">-&gt;<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="12">handler<pos:position pos:line="29" pos:column="19"/></name></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <call><name pos:line="29" pos:column="22">apr_pstrdup<pos:position pos:line="29" pos:column="33"/></name><argument_list pos:line="29" pos:column="33">(<argument><expr><name><name pos:line="29" pos:column="34">r<pos:position pos:line="29" pos:column="35"/></name><operator pos:line="29" pos:column="35">-&gt;<pos:position pos:line="29" pos:column="40"/></operator><name pos:line="29" pos:column="37">pool<pos:position pos:line="29" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">value<pos:position pos:line="29" pos:column="48"/></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
        <return pos:line="30" pos:column="9">return <expr><literal type="number" pos:line="30" pos:column="16">0<pos:position pos:line="30" pos:column="17"/></literal></expr>;<pos:position pos:line="30" pos:column="18"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><literal type="number" pos:line="33" pos:column="9">0<pos:position pos:line="33" pos:column="10"/></literal> <operator pos:line="33" pos:column="11">==<pos:position pos:line="33" pos:column="13"/></operator> <call><name pos:line="33" pos:column="14">strcmp<pos:position pos:line="33" pos:column="20"/></name><argument_list pos:line="33" pos:column="20">(<argument><expr><literal type="string" pos:line="33" pos:column="21">"proxyreq"<pos:position pos:line="33" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="33">key<pos:position pos:line="33" pos:column="36"/></name></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="38"/></condition><then pos:line="33" pos:column="38"> <block pos:line="33" pos:column="39">{
        <decl_stmt><decl><type><name pos:line="34" pos:column="9">int<pos:position pos:line="34" pos:column="12"/></name></type> <name pos:line="34" pos:column="13">value<pos:position pos:line="34" pos:column="18"/></name> <init pos:line="34" pos:column="19">= <expr><call><name pos:line="34" pos:column="21">luaL_checkinteger<pos:position pos:line="34" pos:column="38"/></name><argument_list pos:line="34" pos:column="38">(<argument><expr><name pos:line="34" pos:column="39">L<pos:position pos:line="34" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="42">3<pos:position pos:line="34" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="45"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">r<pos:position pos:line="35" pos:column="10"/></name><operator pos:line="35" pos:column="10">-&gt;<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="12">proxyreq<pos:position pos:line="35" pos:column="20"/></name></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">value<pos:position pos:line="35" pos:column="28"/></name></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
        <return pos:line="36" pos:column="9">return <expr><literal type="number" pos:line="36" pos:column="16">0<pos:position pos:line="36" pos:column="17"/></literal></expr>;<pos:position pos:line="36" pos:column="18"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><literal type="number" pos:line="39" pos:column="9">0<pos:position pos:line="39" pos:column="10"/></literal> <operator pos:line="39" pos:column="11">==<pos:position pos:line="39" pos:column="13"/></operator> <call><name pos:line="39" pos:column="14">strcmp<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><literal type="string" pos:line="39" pos:column="21">"status"<pos:position pos:line="39" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="39" pos:column="31">key<pos:position pos:line="39" pos:column="34"/></name></expr></argument>)<pos:position pos:line="39" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="36"/></condition><then pos:line="39" pos:column="36"> <block pos:line="39" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">int<pos:position pos:line="40" pos:column="12"/></name></type> <name pos:line="40" pos:column="13">code<pos:position pos:line="40" pos:column="17"/></name> <init pos:line="40" pos:column="18">= <expr><call><name pos:line="40" pos:column="20">luaL_checkinteger<pos:position pos:line="40" pos:column="37"/></name><argument_list pos:line="40" pos:column="37">(<argument><expr><name pos:line="40" pos:column="38">L<pos:position pos:line="40" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="41">3<pos:position pos:line="40" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="40" pos:column="44"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="41" pos:column="9">r<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">-&gt;<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="12">status<pos:position pos:line="41" pos:column="18"/></name></name> <operator pos:line="41" pos:column="19">=<pos:position pos:line="41" pos:column="20"/></operator> <name pos:line="41" pos:column="21">code<pos:position pos:line="41" pos:column="25"/></name></expr>;<pos:position pos:line="41" pos:column="26"/></expr_stmt>
        <return pos:line="42" pos:column="9">return <expr><literal type="number" pos:line="42" pos:column="16">0<pos:position pos:line="42" pos:column="17"/></literal></expr>;<pos:position pos:line="42" pos:column="18"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><literal type="number" pos:line="45" pos:column="9">0<pos:position pos:line="45" pos:column="10"/></literal> <operator pos:line="45" pos:column="11">==<pos:position pos:line="45" pos:column="13"/></operator> <call><name pos:line="45" pos:column="14">strcmp<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><literal type="string" pos:line="45" pos:column="21">"uri"<pos:position pos:line="45" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="28">key<pos:position pos:line="45" pos:column="31"/></name></expr></argument>)<pos:position pos:line="45" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="33"/></condition><then pos:line="45" pos:column="33"> <block pos:line="45" pos:column="34">{
        <decl_stmt><decl><type><specifier pos:line="46" pos:column="9">const<pos:position pos:line="46" pos:column="14"/></specifier> <name pos:line="46" pos:column="15">char<pos:position pos:line="46" pos:column="19"/></name> <modifier pos:line="46" pos:column="20">*<pos:position pos:line="46" pos:column="21"/></modifier></type><name pos:line="46" pos:column="21">value<pos:position pos:line="46" pos:column="26"/></name> <init pos:line="46" pos:column="27">= <expr><call><name pos:line="46" pos:column="29">luaL_checkstring<pos:position pos:line="46" pos:column="45"/></name><argument_list pos:line="46" pos:column="45">(<argument><expr><name pos:line="46" pos:column="46">L<pos:position pos:line="46" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="49">3<pos:position pos:line="46" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="46" pos:column="52"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">r<pos:position pos:line="47" pos:column="10"/></name><operator pos:line="47" pos:column="10">-&gt;<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="12">uri<pos:position pos:line="47" pos:column="15"/></name></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <call><name pos:line="47" pos:column="18">apr_pstrdup<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">(<argument><expr><name><name pos:line="47" pos:column="30">r<pos:position pos:line="47" pos:column="31"/></name><operator pos:line="47" pos:column="31">-&gt;<pos:position pos:line="47" pos:column="36"/></operator><name pos:line="47" pos:column="33">pool<pos:position pos:line="47" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="39">value<pos:position pos:line="47" pos:column="44"/></name></expr></argument>)<pos:position pos:line="47" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="46"/></expr_stmt>
        <return pos:line="48" pos:column="9">return <expr><literal type="number" pos:line="48" pos:column="16">0<pos:position pos:line="48" pos:column="17"/></literal></expr>;<pos:position pos:line="48" pos:column="18"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><literal type="number" pos:line="51" pos:column="9">0<pos:position pos:line="51" pos:column="10"/></literal> <operator pos:line="51" pos:column="11">==<pos:position pos:line="51" pos:column="13"/></operator> <call><name pos:line="51" pos:column="14">strcmp<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><literal type="string" pos:line="51" pos:column="21">"user"<pos:position pos:line="51" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="29">key<pos:position pos:line="51" pos:column="32"/></name></expr></argument>)<pos:position pos:line="51" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="34"/></condition><then pos:line="51" pos:column="34"> <block pos:line="51" pos:column="35">{
        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">const<pos:position pos:line="52" pos:column="14"/></specifier> <name pos:line="52" pos:column="15">char<pos:position pos:line="52" pos:column="19"/></name> <modifier pos:line="52" pos:column="20">*<pos:position pos:line="52" pos:column="21"/></modifier></type><name pos:line="52" pos:column="21">value<pos:position pos:line="52" pos:column="26"/></name> <init pos:line="52" pos:column="27">= <expr><call><name pos:line="52" pos:column="29">luaL_checkstring<pos:position pos:line="52" pos:column="45"/></name><argument_list pos:line="52" pos:column="45">(<argument><expr><name pos:line="52" pos:column="46">L<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="49">3<pos:position pos:line="52" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="52"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="53" pos:column="9">r<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">-&gt;<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="12">user<pos:position pos:line="53" pos:column="16"/></name></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <call><name pos:line="53" pos:column="19">apr_pstrdup<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name><name pos:line="53" pos:column="31">r<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">-&gt;<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="34">pool<pos:position pos:line="53" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="40">value<pos:position pos:line="53" pos:column="45"/></name></expr></argument>)<pos:position pos:line="53" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="47"/></expr_stmt>
        <return pos:line="54" pos:column="9">return <expr><literal type="number" pos:line="54" pos:column="16">0<pos:position pos:line="54" pos:column="17"/></literal></expr>;<pos:position pos:line="54" pos:column="18"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="57" pos:column="5">lua_pushstring<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><name pos:line="57" pos:column="20">L<pos:position pos:line="57" pos:column="21"/></name></expr></argument>,
                   <argument><expr><call><name pos:line="58" pos:column="20">apr_psprintf<pos:position pos:line="58" pos:column="32"/></name><argument_list pos:line="58" pos:column="32">(<argument><expr><name><name pos:line="58" pos:column="33">r<pos:position pos:line="58" pos:column="34"/></name><operator pos:line="58" pos:column="34">-&gt;<pos:position pos:line="58" pos:column="39"/></operator><name pos:line="58" pos:column="36">pool<pos:position pos:line="58" pos:column="40"/></name></name></expr></argument>,
                                <argument><expr><literal type="string" pos:line="59" pos:column="33">"Property [%s] may not be set on a request_rec"<pos:position pos:line="59" pos:column="80"/></literal></expr></argument>,
                                <argument><expr><name pos:line="60" pos:column="33">key<pos:position pos:line="60" pos:column="36"/></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">lua_error<pos:position pos:line="61" pos:column="14"/></name><argument_list pos:line="61" pos:column="14">(<argument><expr><name pos:line="61" pos:column="15">L<pos:position pos:line="61" pos:column="16"/></name></expr></argument>)<pos:position pos:line="61" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="18"/></expr_stmt>
    <return pos:line="62" pos:column="5">return <expr><literal type="number" pos:line="62" pos:column="12">0<pos:position pos:line="62" pos:column="13"/></literal></expr>;<pos:position pos:line="62" pos:column="14"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
