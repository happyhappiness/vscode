<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2896_httpd-2.3.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">setaside_remaining_output<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">ap_filter_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">f<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">core_output_filter_ctx_t<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">ctx<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="3" pos:column="39">apr_bucket_brigade<pos:position pos:line="3" pos:column="57"/></name> <modifier pos:line="3" pos:column="58">*<pos:position pos:line="3" pos:column="59"/></modifier></type><name pos:line="3" pos:column="59">bb<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="4" pos:column="39">conn_rec<pos:position pos:line="4" pos:column="47"/></name> <modifier pos:line="4" pos:column="48">*<pos:position pos:line="4" pos:column="49"/></modifier></type><name pos:line="4" pos:column="49">c<pos:position pos:line="4" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="51"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">bb<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">==<pos:position pos:line="6" pos:column="14"/></operator> <name pos:line="6" pos:column="15">NULL<pos:position pos:line="6" pos:column="19"/></name></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20"> <block pos:line="6" pos:column="21">{
        <return pos:line="7" pos:column="9">return;<pos:position pos:line="7" pos:column="16"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">remove_empty_buckets<pos:position pos:line="9" pos:column="25"/></name><argument_list pos:line="9" pos:column="25">(<argument><expr><name pos:line="9" pos:column="26">bb<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="30"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><call><name pos:line="10" pos:column="10">APR_BRIGADE_EMPTY<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><name pos:line="10" pos:column="28">bb<pos:position pos:line="10" pos:column="30"/></name></expr></argument>)<pos:position pos:line="10" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="32"/></condition><then pos:line="10" pos:column="32"> <block pos:line="10" pos:column="33">{
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">c<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">data_in_output_filters<pos:position pos:line="11" pos:column="34"/></name></name> <operator pos:line="11" pos:column="35">=<pos:position pos:line="11" pos:column="36"/></operator> <literal type="number" pos:line="11" pos:column="37">1<pos:position pos:line="11" pos:column="38"/></literal></expr>;<pos:position pos:line="11" pos:column="39"/></expr_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">bb<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">!=<pos:position pos:line="12" pos:column="18"/></operator> <name><name pos:line="12" pos:column="19">ctx<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">buffered_bb<pos:position pos:line="12" pos:column="35"/></name></name></expr>)<pos:position pos:line="12" pos:column="36"/></condition><then pos:line="12" pos:column="36"> <block pos:line="12" pos:column="37">{
            <comment type="block" pos:line="13" pos:column="13">/* XXX should this use a separate deferred write pool, like
             * the original ap_core_output_filter?
             */</comment>
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">ap_save_brigade<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name pos:line="16" pos:column="29">f<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="32">&amp;<pos:position pos:line="16" pos:column="37"/></operator><operator pos:line="16" pos:column="33">(<pos:position pos:line="16" pos:column="34"/></operator><name><name pos:line="16" pos:column="34">ctx<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">-&gt;<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="39">buffered_bb<pos:position pos:line="16" pos:column="50"/></name></name><operator pos:line="16" pos:column="50">)<pos:position pos:line="16" pos:column="51"/></operator></expr></argument>, <argument><expr><operator pos:line="16" pos:column="53">&amp;<pos:position pos:line="16" pos:column="58"/></operator><name pos:line="16" pos:column="54">bb<pos:position pos:line="16" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="58">c<pos:position pos:line="16" pos:column="59"/></name><operator pos:line="16" pos:column="59">-&gt;<pos:position pos:line="16" pos:column="64"/></operator><name pos:line="16" pos:column="61">pool<pos:position pos:line="16" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="67"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">apr_brigade_cleanup<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name pos:line="17" pos:column="33">bb<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
