<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2036_httpd-2.0.58.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">mpm_nt_eventlog_stderr_open<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">argv0<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">apr_pool_t<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">p<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">SECURITY_ATTRIBUTES<pos:position pos:line="3" pos:column="24"/></name></type> <name pos:line="3" pos:column="25">sa<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">HANDLE<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">hProc<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">GetCurrentProcess<pos:position pos:line="4" pos:column="37"/></name><argument_list pos:line="4" pos:column="37">()<pos:position pos:line="4" pos:column="39"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">HANDLE<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">hPipeRead<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name pos:line="5" pos:column="24">NULL<pos:position pos:line="5" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">HANDLE<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">hPipeWrite<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><name pos:line="6" pos:column="25">NULL<pos:position pos:line="6" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">HANDLE<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">hDup<pos:position pos:line="7" pos:column="16"/></name> <init pos:line="7" pos:column="17">= <expr><name pos:line="7" pos:column="19">NULL<pos:position pos:line="7" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">DWORD<pos:position pos:line="8" pos:column="10"/></name></type>  <name pos:line="8" pos:column="12">threadid<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type>    <name pos:line="9" pos:column="12">fd<pos:position pos:line="9" pos:column="14"/></name></decl>;<pos:position pos:line="9" pos:column="15"/></decl_stmt>

    <expr_stmt><expr><name pos:line="11" pos:column="5">display_name<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">argv0<pos:position pos:line="11" pos:column="25"/></name></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* Create a pipe to send stderr messages to the system error log.
     *
     * _dup2() duplicates the write handle inheritable for us.
     */</comment>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">sa<pos:position pos:line="17" pos:column="7"/></name><operator pos:line="17" pos:column="7">.<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">nLength<pos:position pos:line="17" pos:column="15"/></name></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <sizeof pos:line="17" pos:column="18">sizeof<argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">sa<pos:position pos:line="17" pos:column="27"/></name></expr></argument>)<pos:position pos:line="17" pos:column="28"/></argument_list></sizeof></expr>;<pos:position pos:line="17" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">sa<pos:position pos:line="18" pos:column="7"/></name><operator pos:line="18" pos:column="7">.<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">lpSecurityDescriptor<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">=<pos:position pos:line="18" pos:column="30"/></operator> <name pos:line="18" pos:column="31">NULL<pos:position pos:line="18" pos:column="35"/></name></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">sa<pos:position pos:line="19" pos:column="7"/></name><operator pos:line="19" pos:column="7">.<pos:position pos:line="19" pos:column="8"/></operator><name pos:line="19" pos:column="8">bInheritHandle<pos:position pos:line="19" pos:column="22"/></name></name> <operator pos:line="19" pos:column="23">=<pos:position pos:line="19" pos:column="24"/></operator> <name pos:line="19" pos:column="25">FALSE<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">CreatePipe<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><operator pos:line="20" pos:column="16">&amp;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="17">hPipeRead<pos:position pos:line="20" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="28">&amp;<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="29">hPipeWrite<pos:position pos:line="20" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="41">NULL<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="47">0<pos:position pos:line="20" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt> 
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ap_assert<pos:position pos:line="21" pos:column="14"/></name><argument_list pos:line="21" pos:column="14">(<argument><expr><name pos:line="21" pos:column="15">hPipeRead<pos:position pos:line="21" pos:column="24"/></name> <operator pos:line="21" pos:column="25">&amp;&amp;<pos:position pos:line="21" pos:column="35"/></operator> <name pos:line="21" pos:column="28">hPipeWrite<pos:position pos:line="21" pos:column="38"/></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name pos:line="23" pos:column="5">stderr_ready<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <call><name pos:line="23" pos:column="20">CreateEvent<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">NULL<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="38">FALSE<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">FALSE<pos:position pos:line="23" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="52">NULL<pos:position pos:line="23" pos:column="56"/></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name pos:line="24" pos:column="5">stderr_thread<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <call><name pos:line="24" pos:column="21">CreateThread<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><name pos:line="24" pos:column="34">NULL<pos:position pos:line="24" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="40">0<pos:position pos:line="24" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="43">service_stderr_thread<pos:position pos:line="24" pos:column="64"/></name></expr></argument>,
                                 <argument><expr><operator pos:line="25" pos:column="34">(<pos:position pos:line="25" pos:column="35"/></operator><name pos:line="25" pos:column="35">LPVOID<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">)<pos:position pos:line="25" pos:column="42"/></operator> <name pos:line="25" pos:column="43">hPipeRead<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="54">0<pos:position pos:line="25" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="25" pos:column="57">&amp;<pos:position pos:line="25" pos:column="62"/></operator><name pos:line="25" pos:column="58">threadid<pos:position pos:line="25" pos:column="66"/></name></expr></argument>)<pos:position pos:line="25" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ap_assert<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><name pos:line="26" pos:column="15">stderr_ready<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">&amp;&amp;<pos:position pos:line="26" pos:column="38"/></operator> <name pos:line="26" pos:column="31">stderr_thread<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">WaitForSingleObject<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">stderr_ready<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="39">INFINITE<pos:position pos:line="28" pos:column="47"/></name></expr></argument>)<pos:position pos:line="28" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/* Flush stderr and unset its buffer, then commit and replace stderr.
     * This is typically a noop for Win2K/XP since services with NULL std 
     * handles [but valid FILE *'s, oddly enough], but is required 
     * for NT 4.0 and to use this code outside of services.
     */</comment>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">fflush<pos:position pos:line="35" pos:column="11"/></name><argument_list pos:line="35" pos:column="11">(<argument><expr><name pos:line="35" pos:column="12">stderr<pos:position pos:line="35" pos:column="18"/></name></expr></argument>)<pos:position pos:line="35" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">setvbuf<pos:position pos:line="36" pos:column="12"/></name><argument_list pos:line="36" pos:column="12">(<argument><expr><name pos:line="36" pos:column="13">stderr<pos:position pos:line="36" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="21">NULL<pos:position pos:line="36" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="27">_IONBF<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="35">0<pos:position pos:line="36" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">_commit<pos:position pos:line="37" pos:column="12"/></name><argument_list pos:line="37" pos:column="12">(<argument><expr><literal type="number" pos:line="37" pos:column="13">2<pos:position pos:line="37" pos:column="14"/></literal></expr></argument> <comment type="block" pos:line="37" pos:column="15">/* stderr */</comment>)<pos:position pos:line="37" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="38" pos:column="5">fd<pos:position pos:line="38" pos:column="7"/></name> <operator pos:line="38" pos:column="8">=<pos:position pos:line="38" pos:column="9"/></operator> <call><name pos:line="38" pos:column="10">_open_osfhandle<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><operator pos:line="38" pos:column="26">(<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">long<pos:position pos:line="38" pos:column="31"/></name><operator pos:line="38" pos:column="31">)<pos:position pos:line="38" pos:column="32"/></operator> <name pos:line="38" pos:column="33">hPipeWrite<pos:position pos:line="38" pos:column="43"/></name></expr></argument>, 
                         <argument><expr><name pos:line="39" pos:column="26">_O_WRONLY<pos:position pos:line="39" pos:column="35"/></name> <operator pos:line="39" pos:column="36">|<pos:position pos:line="39" pos:column="37"/></operator> <name pos:line="39" pos:column="38">_O_BINARY<pos:position pos:line="39" pos:column="47"/></name></expr></argument>)<pos:position pos:line="39" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">_dup2<pos:position pos:line="40" pos:column="10"/></name><argument_list pos:line="40" pos:column="10">(<argument><expr><name pos:line="40" pos:column="11">fd<pos:position pos:line="40" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="15">2<pos:position pos:line="40" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">_close<pos:position pos:line="41" pos:column="11"/></name><argument_list pos:line="41" pos:column="11">(<argument><expr><name pos:line="41" pos:column="12">fd<pos:position pos:line="41" pos:column="14"/></name></expr></argument>)<pos:position pos:line="41" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">_setmode<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><literal type="number" pos:line="42" pos:column="14">2<pos:position pos:line="42" pos:column="15"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="17">_O_BINARY<pos:position pos:line="42" pos:column="26"/></name></expr></argument>)<pos:position pos:line="42" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="44" pos:column="5">/* hPipeWrite was _close()'ed above, and _dup2()'ed
     * to fd 2 creating a new, inherited Win32 handle.
     * Recover that real handle from fd 2.
     */</comment>
    <expr_stmt><expr><name pos:line="48" pos:column="5">hPipeWrite<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <operator pos:line="48" pos:column="18">(<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="19">HANDLE<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">)<pos:position pos:line="48" pos:column="26"/></operator><call><name pos:line="48" pos:column="26">_get_osfhandle<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">(<argument><expr><literal type="number" pos:line="48" pos:column="41">2<pos:position pos:line="48" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="50" pos:column="5">SetStdHandle<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><name pos:line="50" pos:column="18">STD_ERROR_HANDLE<pos:position pos:line="50" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="36">hPipeWrite<pos:position pos:line="50" pos:column="46"/></name></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="48"/></expr_stmt>

    <comment type="block" pos:line="52" pos:column="5">/* The code above _will_ corrupt the StdHandle... 
     * and we must do so anyways.  We set this up only
     * after we initialized the posix stderr API.
     */</comment>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">ap_open_stderr_log<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">p<pos:position pos:line="56" pos:column="25"/></name></expr></argument>)<pos:position pos:line="56" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="27"/></expr_stmt>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
