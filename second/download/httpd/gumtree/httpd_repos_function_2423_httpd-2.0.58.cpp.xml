<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2423_httpd-2.0.58.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">long<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">sdbm_hash<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><specifier pos:line="1" pos:column="16">const<pos:position pos:line="1" pos:column="21"/></specifier> <name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">str<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="33">int<pos:position pos:line="1" pos:column="36"/></name></type> <name pos:line="1" pos:column="37">len<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="3" pos:column="9">register<pos:position pos:line="3" pos:column="17"/></specifier> <name pos:line="3" pos:column="18">unsigned<pos:position pos:line="3" pos:column="26"/></name> <name pos:line="3" pos:column="27">long<pos:position pos:line="3" pos:column="31"/></name></type> <name pos:line="3" pos:column="32">n<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><literal type="number" pos:line="3" pos:column="36">0<pos:position pos:line="3" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="38"/></decl_stmt>

<cpp:define pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">define<pos:position pos:line="5" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="5" pos:column="9">DUFF<pos:position pos:line="5" pos:column="13"/></name></cpp:macro></cpp:define>	<comment type="block" pos:line="5" pos:column="17">/* go ahead and use the loop-unrolled version */</comment>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">DUFF<pos:position pos:line="6" pos:column="12"/></name></cpp:ifdef>

<cpp:define pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">define<pos:position pos:line="8" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="8" pos:column="9">HASHC<pos:position pos:line="8" pos:column="14"/></name></cpp:macro>	<cpp:value pos:line="8" pos:column="17">n = *str++ + 65599 * n<pos:position pos:line="8" pos:column="39"/></cpp:value></cpp:define>

	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">len<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">&gt;<pos:position pos:line="10" pos:column="21"/></operator> <literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr>)<pos:position pos:line="10" pos:column="21"/></condition><then pos:line="10" pos:column="21"> <block pos:line="10" pos:column="22">{
		<decl_stmt><decl><type><specifier pos:line="11" pos:column="17">register<pos:position pos:line="11" pos:column="25"/></specifier> <name pos:line="11" pos:column="26">int<pos:position pos:line="11" pos:column="29"/></name></type> <name pos:line="11" pos:column="30">loop<pos:position pos:line="11" pos:column="34"/></name> <init pos:line="11" pos:column="35">= <expr><operator pos:line="11" pos:column="37">(<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="38">len<pos:position pos:line="11" pos:column="41"/></name> <operator pos:line="11" pos:column="42">+<pos:position pos:line="11" pos:column="43"/></operator> <literal type="number" pos:line="11" pos:column="44">8<pos:position pos:line="11" pos:column="45"/></literal> <operator pos:line="11" pos:column="46">-<pos:position pos:line="11" pos:column="47"/></operator> <literal type="number" pos:line="11" pos:column="48">1<pos:position pos:line="11" pos:column="49"/></literal><operator pos:line="11" pos:column="49">)<pos:position pos:line="11" pos:column="50"/></operator> <operator pos:line="11" pos:column="51">&gt;&gt;<pos:position pos:line="11" pos:column="56"/></operator> <literal type="number" pos:line="11" pos:column="54">3<pos:position pos:line="11" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="56"/></decl_stmt>

		<switch pos:line="13" pos:column="17">switch<condition pos:line="13" pos:column="23">(<expr><name pos:line="13" pos:column="24">len<pos:position pos:line="13" pos:column="27"/></name> <operator pos:line="13" pos:column="28">&amp;<pos:position pos:line="13" pos:column="33"/></operator> <operator pos:line="13" pos:column="30">(<pos:position pos:line="13" pos:column="31"/></operator><literal type="number" pos:line="13" pos:column="31">8<pos:position pos:line="13" pos:column="32"/></literal> <operator pos:line="13" pos:column="33">-<pos:position pos:line="13" pos:column="34"/></operator> <literal type="number" pos:line="13" pos:column="35">1<pos:position pos:line="13" pos:column="36"/></literal><operator pos:line="13" pos:column="36">)<pos:position pos:line="13" pos:column="37"/></operator></expr>)<pos:position pos:line="13" pos:column="38"/></condition> <block pos:line="13" pos:column="39">{
		<case pos:line="14" pos:column="17">case <expr><literal type="number" pos:line="14" pos:column="22">0<pos:position pos:line="14" pos:column="23"/></literal></expr>:<pos:position pos:line="14" pos:column="24"/></case>	<do pos:line="14" pos:column="25">do <block pos:line="14" pos:column="28">{
			<expr_stmt><expr><name pos:line="15" pos:column="25">HASHC<pos:position pos:line="15" pos:column="30"/></name></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>	<case pos:line="15" pos:column="33">case <expr><literal type="number" pos:line="15" pos:column="38">7<pos:position pos:line="15" pos:column="39"/></literal></expr>:<pos:position pos:line="15" pos:column="40"/></case>	<expr_stmt><expr><name pos:line="15" pos:column="41">HASHC<pos:position pos:line="15" pos:column="46"/></name></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>
		<case pos:line="16" pos:column="17">case <expr><literal type="number" pos:line="16" pos:column="22">6<pos:position pos:line="16" pos:column="23"/></literal></expr>:<pos:position pos:line="16" pos:column="24"/></case>	<expr_stmt><expr><name pos:line="16" pos:column="25">HASHC<pos:position pos:line="16" pos:column="30"/></name></expr>;<pos:position pos:line="16" pos:column="31"/></expr_stmt>	<case pos:line="16" pos:column="33">case <expr><literal type="number" pos:line="16" pos:column="38">5<pos:position pos:line="16" pos:column="39"/></literal></expr>:<pos:position pos:line="16" pos:column="40"/></case>	<expr_stmt><expr><name pos:line="16" pos:column="41">HASHC<pos:position pos:line="16" pos:column="46"/></name></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
		<case pos:line="17" pos:column="17">case <expr><literal type="number" pos:line="17" pos:column="22">4<pos:position pos:line="17" pos:column="23"/></literal></expr>:<pos:position pos:line="17" pos:column="24"/></case>	<expr_stmt><expr><name pos:line="17" pos:column="25">HASHC<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>	<case pos:line="17" pos:column="33">case <expr><literal type="number" pos:line="17" pos:column="38">3<pos:position pos:line="17" pos:column="39"/></literal></expr>:<pos:position pos:line="17" pos:column="40"/></case>	<expr_stmt><expr><name pos:line="17" pos:column="41">HASHC<pos:position pos:line="17" pos:column="46"/></name></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt>
		<case pos:line="18" pos:column="17">case <expr><literal type="number" pos:line="18" pos:column="22">2<pos:position pos:line="18" pos:column="23"/></literal></expr>:<pos:position pos:line="18" pos:column="24"/></case>	<expr_stmt><expr><name pos:line="18" pos:column="25">HASHC<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>	<case pos:line="18" pos:column="33">case <expr><literal type="number" pos:line="18" pos:column="38">1<pos:position pos:line="18" pos:column="39"/></literal></expr>:<pos:position pos:line="18" pos:column="40"/></case>	<expr_stmt><expr><name pos:line="18" pos:column="41">HASHC<pos:position pos:line="18" pos:column="46"/></name></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>
			}<pos:position pos:line="19" pos:column="26"/></block> while <condition pos:line="19" pos:column="33">(<expr><operator pos:line="19" pos:column="34">--<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="36">loop<pos:position pos:line="19" pos:column="40"/></name></expr>)<pos:position pos:line="19" pos:column="41"/></condition>;<pos:position pos:line="19" pos:column="42"/></do>
		}<pos:position pos:line="20" pos:column="18"/></block></switch>

	}<pos:position pos:line="22" pos:column="10"/></block></then></if>
<cpp:else pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">else<pos:position pos:line="23" pos:column="6"/></cpp:directive></cpp:else>
	<while pos:line="24" pos:column="9">while <condition pos:line="24" pos:column="15">(<expr><name pos:line="24" pos:column="16">len<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">--<pos:position pos:line="24" pos:column="21"/></operator></expr>)<pos:position pos:line="24" pos:column="22"/></condition>
		<block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">n<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <operator pos:line="25" pos:column="21">*<pos:position pos:line="25" pos:column="22"/></operator><name pos:line="25" pos:column="22">str<pos:position pos:line="25" pos:column="25"/></name><operator pos:line="25" pos:column="25">++<pos:position pos:line="25" pos:column="27"/></operator> <operator pos:line="25" pos:column="28">+<pos:position pos:line="25" pos:column="29"/></operator> <literal type="number" pos:line="25" pos:column="30">65599<pos:position pos:line="25" pos:column="35"/></literal> <operator pos:line="25" pos:column="36">*<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">n<pos:position pos:line="25" pos:column="39"/></name></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt></block></while>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
	<return pos:line="27" pos:column="9">return <expr><name pos:line="27" pos:column="16">n<pos:position pos:line="27" pos:column="17"/></name></expr>;<pos:position pos:line="27" pos:column="18"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
