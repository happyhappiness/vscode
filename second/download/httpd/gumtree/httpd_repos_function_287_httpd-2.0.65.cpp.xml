<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_287_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">dav_xml_escape_uri<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">apr_pool_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">p<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">uri<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">e_uri<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><call><name pos:line="3" pos:column="25">ap_escape_uri<pos:position pos:line="3" pos:column="38"/></name><argument_list pos:line="3" pos:column="38">(<argument><expr><name pos:line="3" pos:column="39">p<pos:position pos:line="3" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="3" pos:column="42">uri<pos:position pos:line="3" pos:column="45"/></name></expr></argument>)<pos:position pos:line="3" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="47"/></decl_stmt>

    <comment type="block" pos:line="5" pos:column="5">/* check the easy case... */</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">ap_strchr_c<pos:position pos:line="6" pos:column="20"/></name><argument_list pos:line="6" pos:column="20">(<argument><expr><name pos:line="6" pos:column="21">e_uri<pos:position pos:line="6" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="6" pos:column="28">'&amp;'<pos:position pos:line="6" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="32"/></argument_list></call> <operator pos:line="6" pos:column="33">==<pos:position pos:line="6" pos:column="35"/></operator> <name pos:line="6" pos:column="36">NULL<pos:position pos:line="6" pos:column="40"/></name></expr>)<pos:position pos:line="6" pos:column="41"/></condition><then pos:line="6" pos:column="41">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">e_uri<pos:position pos:line="7" pos:column="21"/></name></expr>;<pos:position pos:line="7" pos:column="22"/></return></block></then></if>

    <comment type="block" pos:line="9" pos:column="5">/* there was a '&amp;', so more work is needed... sigh. */</comment>

    <comment type="block" pos:line="11" pos:column="5">/*
     * Note: this is a teeny bit of overkill since we know there are no
     * '&lt;' or '&gt;' characters, but who cares.
     */</comment>
    <return pos:line="15" pos:column="5">return <expr><call><name pos:line="15" pos:column="12">apr_xml_quote_string<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">p<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">e_uri<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="43">0<pos:position pos:line="15" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="46"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
