<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5235.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">child_main<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">apr_pool_t<pos:position pos:line="1" pos:column="27"/></name> <modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">pconf<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="35"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">status<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_hash_t<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">ht<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ap_listen_rec<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">lr<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">HANDLE<pos:position pos:line="6" pos:column="11"/></name></type> <name><name pos:line="6" pos:column="12">child_events<pos:position pos:line="6" pos:column="24"/></name><index pos:line="6" pos:column="24">[<expr><literal type="number" pos:line="6" pos:column="25">2<pos:position pos:line="6" pos:column="26"/></literal></expr>]<pos:position pos:line="6" pos:column="27"/></index></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">HANDLE<pos:position pos:line="7" pos:column="11"/></name> <modifier pos:line="7" pos:column="12">*<pos:position pos:line="7" pos:column="13"/></modifier></type><name pos:line="7" pos:column="13">child_handles<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">listener_started<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><literal type="number" pos:line="8" pos:column="28">0<pos:position pos:line="8" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">threads_created<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><literal type="number" pos:line="9" pos:column="27">0<pos:position pos:line="9" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">watch_thread<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">time_remains<pos:position pos:line="11" pos:column="21"/></name></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">cld<pos:position pos:line="12" pos:column="12"/></name></decl>;<pos:position pos:line="12" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">tid<pos:position pos:line="13" pos:column="12"/></name></decl>;<pos:position pos:line="13" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">rv<pos:position pos:line="14" pos:column="11"/></name></decl>;<pos:position pos:line="14" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">i<pos:position pos:line="15" pos:column="10"/></name></decl>;<pos:position pos:line="15" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">apr_pool_create<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><operator pos:line="17" pos:column="21">&amp;<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="22">pchild<pos:position pos:line="17" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="30">pconf<pos:position pos:line="17" pos:column="35"/></name></expr></argument>)<pos:position pos:line="17" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">apr_pool_tag<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">pchild<pos:position pos:line="18" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="26">"pchild"<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="20" pos:column="5">ap_run_child_init<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">pchild<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="31">ap_server_conf<pos:position pos:line="20" pos:column="45"/></name></expr></argument>)<pos:position pos:line="20" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">ht<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <call><name pos:line="21" pos:column="10">apr_hash_make<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><name pos:line="21" pos:column="24">pchild<pos:position pos:line="21" pos:column="30"/></name></expr></argument>)<pos:position pos:line="21" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* Initialize the child_events */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">max_requests_per_child_event<pos:position pos:line="24" pos:column="33"/></name> <operator pos:line="24" pos:column="34">=<pos:position pos:line="24" pos:column="35"/></operator> <call><name pos:line="24" pos:column="36">CreateEvent<pos:position pos:line="24" pos:column="47"/></name><argument_list pos:line="24" pos:column="47">(<argument><expr><name pos:line="24" pos:column="48">NULL<pos:position pos:line="24" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="54">TRUE<pos:position pos:line="24" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="60">FALSE<pos:position pos:line="24" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="67">NULL<pos:position pos:line="24" pos:column="71"/></name></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="73"/></expr_stmt>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">max_requests_per_child_event<pos:position pos:line="25" pos:column="38"/></name></expr>)<pos:position pos:line="25" pos:column="39"/></condition><then pos:line="25" pos:column="39"> <block pos:line="25" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">ap_log_error<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">APLOG_MARK<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">APLOG_CRIT<pos:position pos:line="26" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="46">apr_get_os_error<pos:position pos:line="26" pos:column="62"/></name><argument_list pos:line="26" pos:column="62">()<pos:position pos:line="26" pos:column="64"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="26" pos:column="66">ap_server_conf<pos:position pos:line="26" pos:column="80"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="27" pos:column="22">"Child %d: Failed to create a max_requests event."<pos:position pos:line="27" pos:column="72"/></literal></expr></argument>, 
                     <argument><expr><name pos:line="28" pos:column="22">my_pid<pos:position pos:line="28" pos:column="28"/></name></expr></argument>)<pos:position pos:line="28" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">exit<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">APEXIT_CHILDINIT<pos:position pos:line="29" pos:column="30"/></name></expr></argument>)<pos:position pos:line="29" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">child_events<pos:position pos:line="31" pos:column="17"/></name><index pos:line="31" pos:column="17">[<expr><literal type="number" pos:line="31" pos:column="18">0<pos:position pos:line="31" pos:column="19"/></literal></expr>]<pos:position pos:line="31" pos:column="20"/></index></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <name pos:line="31" pos:column="23">exit_event<pos:position pos:line="31" pos:column="33"/></name></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">child_events<pos:position pos:line="32" pos:column="17"/></name><index pos:line="32" pos:column="17">[<expr><literal type="number" pos:line="32" pos:column="18">1<pos:position pos:line="32" pos:column="19"/></literal></expr>]<pos:position pos:line="32" pos:column="20"/></index></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <name pos:line="32" pos:column="23">max_requests_per_child_event<pos:position pos:line="32" pos:column="51"/></name></expr>;<pos:position pos:line="32" pos:column="52"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/*
     * Wait until we have permission to start accepting connections.
     * start_mutex is used to ensure that only one child ever
     * goes into the listen/accept loop at once.
     */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">status<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <call><name pos:line="39" pos:column="14">apr_proc_mutex_lock<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">start_mutex<pos:position pos:line="39" pos:column="45"/></name></expr></argument>)<pos:position pos:line="39" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="47"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">status<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">!=<pos:position pos:line="40" pos:column="18"/></operator> <name pos:line="40" pos:column="19">APR_SUCCESS<pos:position pos:line="40" pos:column="30"/></name></expr>)<pos:position pos:line="40" pos:column="31"/></condition><then pos:line="40" pos:column="31"> <block pos:line="40" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">ap_log_error<pos:position pos:line="41" pos:column="21"/></name><argument_list pos:line="41" pos:column="21">(<argument><expr><name pos:line="41" pos:column="22">APLOG_MARK<pos:position pos:line="41" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="34">APLOG_ERR<pos:position pos:line="41" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="45">status<pos:position pos:line="41" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="53">ap_server_conf<pos:position pos:line="41" pos:column="67"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="42" pos:column="22">"Child %d: Failed to acquire the start_mutex. "<pos:position pos:line="42" pos:column="69"/></literal>
                     <literal type="string" pos:line="43" pos:column="22">"Process will exit."<pos:position pos:line="43" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="44">my_pid<pos:position pos:line="43" pos:column="50"/></name></expr></argument>)<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">exit<pos:position pos:line="44" pos:column="13"/></name><argument_list pos:line="44" pos:column="13">(<argument><expr><name pos:line="44" pos:column="14">APEXIT_CHILDINIT<pos:position pos:line="44" pos:column="30"/></name></expr></argument>)<pos:position pos:line="44" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">ap_log_error<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">(<argument><expr><name pos:line="46" pos:column="18">APLOG_MARK<pos:position pos:line="46" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="30">APLOG_NOTICE<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="44">APR_SUCCESS<pos:position pos:line="46" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="57">ap_server_conf<pos:position pos:line="46" pos:column="71"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="47" pos:column="18">"Child %d: Acquired the start mutex."<pos:position pos:line="47" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="57">my_pid<pos:position pos:line="47" pos:column="63"/></name></expr></argument>)<pos:position pos:line="47" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="65"/></expr_stmt>

    <comment type="block" pos:line="49" pos:column="5">/*
     * Create the worker thread dispatch IOCompletionPort
     */</comment>
    <comment type="block" pos:line="52" pos:column="5">/* Create the worker thread dispatch IOCP */</comment>
    <expr_stmt><expr><name pos:line="53" pos:column="5">ThreadDispatchIOCP<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">=<pos:position pos:line="53" pos:column="25"/></operator> <call><name pos:line="53" pos:column="26">CreateIoCompletionPort<pos:position pos:line="53" pos:column="48"/></name><argument_list pos:line="53" pos:column="48">(<argument><expr><name pos:line="53" pos:column="49">INVALID_HANDLE_VALUE<pos:position pos:line="53" pos:column="69"/></name></expr></argument>,
                                                <argument><expr><name pos:line="54" pos:column="49">NULL<pos:position pos:line="54" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="55">0<pos:position pos:line="54" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="58">0<pos:position pos:line="54" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="61"/></expr_stmt> 
    <expr_stmt><expr><call><name pos:line="55" pos:column="5">apr_thread_mutex_create<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><operator pos:line="55" pos:column="29">&amp;<pos:position pos:line="55" pos:column="34"/></operator><name pos:line="55" pos:column="30">qlock<pos:position pos:line="55" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="37">APR_THREAD_MUTEX_DEFAULT<pos:position pos:line="55" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="63">pchild<pos:position pos:line="55" pos:column="69"/></name></expr></argument>)<pos:position pos:line="55" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><name pos:line="56" pos:column="5">qwait_event<pos:position pos:line="56" pos:column="16"/></name> <operator pos:line="56" pos:column="17">=<pos:position pos:line="56" pos:column="18"/></operator> <call><name pos:line="56" pos:column="19">CreateEvent<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">NULL<pos:position pos:line="56" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="37">TRUE<pos:position pos:line="56" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="43">FALSE<pos:position pos:line="56" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="50">NULL<pos:position pos:line="56" pos:column="54"/></name></expr></argument>)<pos:position pos:line="56" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><operator pos:line="57" pos:column="9">!<pos:position pos:line="57" pos:column="10"/></operator><name pos:line="57" pos:column="10">qwait_event<pos:position pos:line="57" pos:column="21"/></name></expr>)<pos:position pos:line="57" pos:column="22"/></condition><then pos:line="57" pos:column="22"> <block pos:line="57" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">ap_log_error<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument><expr><name pos:line="58" pos:column="22">APLOG_MARK<pos:position pos:line="58" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">APLOG_CRIT<pos:position pos:line="58" pos:column="44"/></name></expr></argument>, <argument><expr><call><name pos:line="58" pos:column="46">apr_get_os_error<pos:position pos:line="58" pos:column="62"/></name><argument_list pos:line="58" pos:column="62">()<pos:position pos:line="58" pos:column="64"/></argument_list></call></expr></argument>, 
                     <argument><expr><name pos:line="59" pos:column="22">ap_server_conf<pos:position pos:line="59" pos:column="36"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="60" pos:column="22">"Child %d: Failed to create a qwait event."<pos:position pos:line="60" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="67">my_pid<pos:position pos:line="60" pos:column="73"/></name></expr></argument>)<pos:position pos:line="60" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">exit<pos:position pos:line="61" pos:column="13"/></name><argument_list pos:line="61" pos:column="13">(<argument><expr><name pos:line="61" pos:column="14">APEXIT_CHILDINIT<pos:position pos:line="61" pos:column="30"/></name></expr></argument>)<pos:position pos:line="61" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="64" pos:column="5">/*
     * Create the pool of worker threads
     */</comment>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">ap_log_error<pos:position pos:line="67" pos:column="17"/></name><argument_list pos:line="67" pos:column="17">(<argument><expr><name pos:line="67" pos:column="18">APLOG_MARK<pos:position pos:line="67" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="30">APLOG_NOTICE<pos:position pos:line="67" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="44">APR_SUCCESS<pos:position pos:line="67" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="57">ap_server_conf<pos:position pos:line="67" pos:column="71"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="68" pos:column="18">"Child %d: Starting %d worker threads."<pos:position pos:line="68" pos:column="57"/></literal></expr></argument>,
                 <argument><expr><name pos:line="69" pos:column="18">my_pid<pos:position pos:line="69" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="26">ap_threads_per_child<pos:position pos:line="69" pos:column="46"/></name></expr></argument>)<pos:position pos:line="69" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="70" pos:column="5">child_handles<pos:position pos:line="70" pos:column="18"/></name> <operator pos:line="70" pos:column="19">=<pos:position pos:line="70" pos:column="20"/></operator> <operator pos:line="70" pos:column="21">(<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="22">HANDLE<pos:position pos:line="70" pos:column="28"/></name><operator pos:line="70" pos:column="28">)<pos:position pos:line="70" pos:column="29"/></operator> <call><name pos:line="70" pos:column="30">apr_pcalloc<pos:position pos:line="70" pos:column="41"/></name><argument_list pos:line="70" pos:column="41">(<argument><expr><name pos:line="70" pos:column="42">pchild<pos:position pos:line="70" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="50">ap_threads_per_child<pos:position pos:line="70" pos:column="70"/></name>
                                                  <operator pos:line="71" pos:column="51">*<pos:position pos:line="71" pos:column="52"/></operator> <sizeof pos:line="71" pos:column="53">sizeof<argument_list pos:line="71" pos:column="59">(<argument><expr><name pos:line="71" pos:column="60">HANDLE<pos:position pos:line="71" pos:column="66"/></name></expr></argument>)<pos:position pos:line="71" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="71" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="69"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="72" pos:column="5">apr_thread_mutex_create<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><operator pos:line="72" pos:column="29">&amp;<pos:position pos:line="72" pos:column="34"/></operator><name pos:line="72" pos:column="30">child_lock<pos:position pos:line="72" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="42">APR_THREAD_MUTEX_DEFAULT<pos:position pos:line="72" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="68">pchild<pos:position pos:line="72" pos:column="74"/></name></expr></argument>)<pos:position pos:line="72" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="76"/></expr_stmt>

    <while pos:line="74" pos:column="5">while <condition pos:line="74" pos:column="11">(<expr><literal type="number" pos:line="74" pos:column="12">1<pos:position pos:line="74" pos:column="13"/></literal></expr>)<pos:position pos:line="74" pos:column="14"/></condition> <block pos:line="74" pos:column="15">{
        <for pos:line="75" pos:column="9">for <control pos:line="75" pos:column="13">(<init><expr><name pos:line="75" pos:column="14">i<pos:position pos:line="75" pos:column="15"/></name> <operator pos:line="75" pos:column="16">=<pos:position pos:line="75" pos:column="17"/></operator> <literal type="number" pos:line="75" pos:column="18">0<pos:position pos:line="75" pos:column="19"/></literal></expr>;<pos:position pos:line="75" pos:column="20"/></init> <condition><expr><name pos:line="75" pos:column="21">i<pos:position pos:line="75" pos:column="22"/></name> <operator pos:line="75" pos:column="23">&lt;<pos:position pos:line="75" pos:column="27"/></operator> <name pos:line="75" pos:column="25">ap_threads_per_child<pos:position pos:line="75" pos:column="45"/></name></expr>;<pos:position pos:line="75" pos:column="46"/></condition> <incr><expr><name pos:line="75" pos:column="47">i<pos:position pos:line="75" pos:column="48"/></name><operator pos:line="75" pos:column="48">++<pos:position pos:line="75" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="75" pos:column="51"/></control> <block pos:line="75" pos:column="52">{
            <decl_stmt><decl><type><name pos:line="76" pos:column="13">int<pos:position pos:line="76" pos:column="16"/></name> <modifier pos:line="76" pos:column="17">*<pos:position pos:line="76" pos:column="18"/></modifier></type><name pos:line="76" pos:column="18">score_idx<pos:position pos:line="76" pos:column="27"/></name></decl>;<pos:position pos:line="76" pos:column="28"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="77" pos:column="13">int<pos:position pos:line="77" pos:column="16"/></name></type> <name pos:line="77" pos:column="17">status<pos:position pos:line="77" pos:column="23"/></name> <init pos:line="77" pos:column="24">= <expr><name><name pos:line="77" pos:column="26">ap_scoreboard_image<pos:position pos:line="77" pos:column="45"/></name><operator pos:line="77" pos:column="45">-&gt;<pos:position pos:line="77" pos:column="50"/></operator><name pos:line="77" pos:column="47">servers<pos:position pos:line="77" pos:column="54"/></name><index pos:line="77" pos:column="54">[<expr><literal type="number" pos:line="77" pos:column="55">0<pos:position pos:line="77" pos:column="56"/></literal></expr>]<pos:position pos:line="77" pos:column="57"/></index><index pos:line="77" pos:column="57">[<expr><name pos:line="77" pos:column="58">i<pos:position pos:line="77" pos:column="59"/></name></expr>]<pos:position pos:line="77" pos:column="60"/></index></name><operator pos:line="77" pos:column="60">.<pos:position pos:line="77" pos:column="61"/></operator><name pos:line="77" pos:column="61">status<pos:position pos:line="77" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="77" pos:column="68"/></decl_stmt>
            <if pos:line="78" pos:column="13">if <condition pos:line="78" pos:column="16">(<expr><name pos:line="78" pos:column="17">status<pos:position pos:line="78" pos:column="23"/></name> <operator pos:line="78" pos:column="24">!=<pos:position pos:line="78" pos:column="26"/></operator> <name pos:line="78" pos:column="27">SERVER_GRACEFUL<pos:position pos:line="78" pos:column="42"/></name> <operator pos:line="78" pos:column="43">&amp;&amp;<pos:position pos:line="78" pos:column="53"/></operator> <name pos:line="78" pos:column="46">status<pos:position pos:line="78" pos:column="52"/></name> <operator pos:line="78" pos:column="53">!=<pos:position pos:line="78" pos:column="55"/></operator> <name pos:line="78" pos:column="56">SERVER_DEAD<pos:position pos:line="78" pos:column="67"/></name></expr>)<pos:position pos:line="78" pos:column="68"/></condition><then pos:line="78" pos:column="68"> <block pos:line="78" pos:column="69">{
                <continue pos:line="79" pos:column="17">continue;<pos:position pos:line="79" pos:column="26"/></continue>
            }<pos:position pos:line="80" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="81" pos:column="13">ap_update_child_status_from_indexes<pos:position pos:line="81" pos:column="48"/></name><argument_list pos:line="81" pos:column="48">(<argument><expr><literal type="number" pos:line="81" pos:column="49">0<pos:position pos:line="81" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="52">i<pos:position pos:line="81" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="55">SERVER_STARTING<pos:position pos:line="81" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="72">NULL<pos:position pos:line="81" pos:column="76"/></name></expr></argument>)<pos:position pos:line="81" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="78"/></expr_stmt>
        
            <expr_stmt><expr><name><name pos:line="83" pos:column="13">child_handles<pos:position pos:line="83" pos:column="26"/></name><index pos:line="83" pos:column="26">[<expr><name pos:line="83" pos:column="27">i<pos:position pos:line="83" pos:column="28"/></name></expr>]<pos:position pos:line="83" pos:column="29"/></index></name> <operator pos:line="83" pos:column="30">=<pos:position pos:line="83" pos:column="31"/></operator> <call><name pos:line="83" pos:column="32">CreateThread<pos:position pos:line="83" pos:column="44"/></name><argument_list pos:line="83" pos:column="44">(<argument><expr><name pos:line="83" pos:column="45">NULL<pos:position pos:line="83" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="51">ap_thread_stacksize<pos:position pos:line="83" pos:column="70"/></name></expr></argument>,
                                            <argument><expr><name pos:line="84" pos:column="45">worker_main<pos:position pos:line="84" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="58">(<pos:position pos:line="84" pos:column="59"/></operator><name pos:line="84" pos:column="59">void<pos:position pos:line="84" pos:column="63"/></name> <operator pos:line="84" pos:column="64">*<pos:position pos:line="84" pos:column="65"/></operator><operator pos:line="84" pos:column="65">)<pos:position pos:line="84" pos:column="66"/></operator> <name pos:line="84" pos:column="67">i<pos:position pos:line="84" pos:column="68"/></name></expr></argument>,
                                            <argument><expr><name pos:line="85" pos:column="45">stack_res_flag<pos:position pos:line="85" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="61">&amp;<pos:position pos:line="85" pos:column="66"/></operator><name pos:line="85" pos:column="62">tid<pos:position pos:line="85" pos:column="65"/></name></expr></argument>)<pos:position pos:line="85" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="67"/></expr_stmt>
            <if pos:line="86" pos:column="13">if <condition pos:line="86" pos:column="16">(<expr><name><name pos:line="86" pos:column="17">child_handles<pos:position pos:line="86" pos:column="30"/></name><index pos:line="86" pos:column="30">[<expr><name pos:line="86" pos:column="31">i<pos:position pos:line="86" pos:column="32"/></name></expr>]<pos:position pos:line="86" pos:column="33"/></index></name> <operator pos:line="86" pos:column="34">==<pos:position pos:line="86" pos:column="36"/></operator> <literal type="number" pos:line="86" pos:column="37">0<pos:position pos:line="86" pos:column="38"/></literal></expr>)<pos:position pos:line="86" pos:column="39"/></condition><then pos:line="86" pos:column="39"> <block pos:line="86" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="87" pos:column="17">ap_log_error<pos:position pos:line="87" pos:column="29"/></name><argument_list pos:line="87" pos:column="29">(<argument><expr><name pos:line="87" pos:column="30">APLOG_MARK<pos:position pos:line="87" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="42">APLOG_CRIT<pos:position pos:line="87" pos:column="52"/></name></expr></argument>, <argument><expr><call><name pos:line="87" pos:column="54">apr_get_os_error<pos:position pos:line="87" pos:column="70"/></name><argument_list pos:line="87" pos:column="70">()<pos:position pos:line="87" pos:column="72"/></argument_list></call></expr></argument>,
                             <argument><expr><name pos:line="88" pos:column="30">ap_server_conf<pos:position pos:line="88" pos:column="44"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="89" pos:column="30">"Child %d: CreateThread failed. Unable to "<pos:position pos:line="89" pos:column="73"/></literal>
                             <literal type="string" pos:line="90" pos:column="30">"create all worker threads. Created %d of the %d "<pos:position pos:line="90" pos:column="80"/></literal>
                             <literal type="string" pos:line="91" pos:column="30">"threads requested with the ThreadsPerChild "<pos:position pos:line="91" pos:column="75"/></literal>
                             <literal type="string" pos:line="92" pos:column="30">"configuration directive."<pos:position pos:line="92" pos:column="56"/></literal></expr></argument>,
                             <argument><expr><name pos:line="93" pos:column="30">my_pid<pos:position pos:line="93" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="38">threads_created<pos:position pos:line="93" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="55">ap_threads_per_child<pos:position pos:line="93" pos:column="75"/></name></expr></argument>)<pos:position pos:line="93" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="94" pos:column="17">ap_signal_parent<pos:position pos:line="94" pos:column="33"/></name><argument_list pos:line="94" pos:column="33">(<argument><expr><name pos:line="94" pos:column="34">SIGNAL_PARENT_SHUTDOWN<pos:position pos:line="94" pos:column="56"/></name></expr></argument>)<pos:position pos:line="94" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="58"/></expr_stmt>
                <goto pos:line="95" pos:column="17">goto <name pos:line="95" pos:column="22">shutdown<pos:position pos:line="95" pos:column="30"/></name>;<pos:position pos:line="95" pos:column="31"/></goto>
            }<pos:position pos:line="96" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="97" pos:column="13">threads_created<pos:position pos:line="97" pos:column="28"/></name><operator pos:line="97" pos:column="28">++<pos:position pos:line="97" pos:column="30"/></operator></expr>;<pos:position pos:line="97" pos:column="31"/></expr_stmt>
            <comment type="block" pos:line="98" pos:column="13">/* Save the score board index in ht keyed to the thread handle. 
             * We need this when cleaning up threads down below...
             */</comment>
            <expr_stmt><expr><call><name pos:line="101" pos:column="13">apr_thread_mutex_lock<pos:position pos:line="101" pos:column="34"/></name><argument_list pos:line="101" pos:column="34">(<argument><expr><name pos:line="101" pos:column="35">child_lock<pos:position pos:line="101" pos:column="45"/></name></expr></argument>)<pos:position pos:line="101" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name pos:line="102" pos:column="13">score_idx<pos:position pos:line="102" pos:column="22"/></name> <operator pos:line="102" pos:column="23">=<pos:position pos:line="102" pos:column="24"/></operator> <call><name pos:line="102" pos:column="25">apr_pcalloc<pos:position pos:line="102" pos:column="36"/></name><argument_list pos:line="102" pos:column="36">(<argument><expr><name pos:line="102" pos:column="37">pchild<pos:position pos:line="102" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="102" pos:column="45">sizeof<argument_list pos:line="102" pos:column="51">(<argument><expr><name pos:line="102" pos:column="52">int<pos:position pos:line="102" pos:column="55"/></name></expr></argument>)<pos:position pos:line="102" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="102" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="103" pos:column="13">*<pos:position pos:line="103" pos:column="14"/></operator><name pos:line="103" pos:column="14">score_idx<pos:position pos:line="103" pos:column="23"/></name> <operator pos:line="103" pos:column="24">=<pos:position pos:line="103" pos:column="25"/></operator> <name pos:line="103" pos:column="26">i<pos:position pos:line="103" pos:column="27"/></name></expr>;<pos:position pos:line="103" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="104" pos:column="13">apr_hash_set<pos:position pos:line="104" pos:column="25"/></name><argument_list pos:line="104" pos:column="25">(<argument><expr><name pos:line="104" pos:column="26">ht<pos:position pos:line="104" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="30">&amp;<pos:position pos:line="104" pos:column="35"/></operator><name><name pos:line="104" pos:column="31">child_handles<pos:position pos:line="104" pos:column="44"/></name><index pos:line="104" pos:column="44">[<expr><name pos:line="104" pos:column="45">i<pos:position pos:line="104" pos:column="46"/></name></expr>]<pos:position pos:line="104" pos:column="47"/></index></name></expr></argument>, <argument><expr><sizeof pos:line="104" pos:column="49">sizeof<argument_list pos:line="104" pos:column="55">(<argument><expr><name pos:line="104" pos:column="56">HANDLE<pos:position pos:line="104" pos:column="62"/></name></expr></argument>)<pos:position pos:line="104" pos:column="63"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="104" pos:column="65">score_idx<pos:position pos:line="104" pos:column="74"/></name></expr></argument>)<pos:position pos:line="104" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="105" pos:column="36"/></name><argument_list pos:line="105" pos:column="36">(<argument><expr><name pos:line="105" pos:column="37">child_lock<pos:position pos:line="105" pos:column="47"/></name></expr></argument>)<pos:position pos:line="105" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="106" pos:column="10"/></block></for>
        <comment type="block" pos:line="107" pos:column="9">/* Start the listener only when workers are available */</comment>
        <if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><operator pos:line="108" pos:column="13">!<pos:position pos:line="108" pos:column="14"/></operator><name pos:line="108" pos:column="14">listener_started<pos:position pos:line="108" pos:column="30"/></name> <operator pos:line="108" pos:column="31">&amp;&amp;<pos:position pos:line="108" pos:column="41"/></operator> <name pos:line="108" pos:column="34">threads_created<pos:position pos:line="108" pos:column="49"/></name></expr>)<pos:position pos:line="108" pos:column="50"/></condition><then pos:line="108" pos:column="50"> <block pos:line="108" pos:column="51">{
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">create_listener_thread<pos:position pos:line="109" pos:column="35"/></name><argument_list pos:line="109" pos:column="35">()<pos:position pos:line="109" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name pos:line="110" pos:column="13">listener_started<pos:position pos:line="110" pos:column="29"/></name> <operator pos:line="110" pos:column="30">=<pos:position pos:line="110" pos:column="31"/></operator> <literal type="number" pos:line="110" pos:column="32">1<pos:position pos:line="110" pos:column="33"/></literal></expr>;<pos:position pos:line="110" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name pos:line="111" pos:column="13">winnt_mpm_state<pos:position pos:line="111" pos:column="28"/></name> <operator pos:line="111" pos:column="29">=<pos:position pos:line="111" pos:column="30"/></operator> <name pos:line="111" pos:column="31">AP_MPMQ_RUNNING<pos:position pos:line="111" pos:column="46"/></name></expr>;<pos:position pos:line="111" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if>
        <if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><name pos:line="113" pos:column="13">threads_created<pos:position pos:line="113" pos:column="28"/></name> <operator pos:line="113" pos:column="29">==<pos:position pos:line="113" pos:column="31"/></operator> <name pos:line="113" pos:column="32">ap_threads_per_child<pos:position pos:line="113" pos:column="52"/></name></expr>)<pos:position pos:line="113" pos:column="53"/></condition><then pos:line="113" pos:column="53"> <block pos:line="113" pos:column="54">{
            <break pos:line="114" pos:column="13">break;<pos:position pos:line="114" pos:column="19"/></break>
        }<pos:position pos:line="115" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="116" pos:column="9">/* Check to see if the child has been told to exit */</comment>
        <if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><call><name pos:line="117" pos:column="13">WaitForSingleObject<pos:position pos:line="117" pos:column="32"/></name><argument_list pos:line="117" pos:column="32">(<argument><expr><name pos:line="117" pos:column="33">exit_event<pos:position pos:line="117" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="45">0<pos:position pos:line="117" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="47"/></argument_list></call> <operator pos:line="117" pos:column="48">!=<pos:position pos:line="117" pos:column="50"/></operator> <name pos:line="117" pos:column="51">WAIT_TIMEOUT<pos:position pos:line="117" pos:column="63"/></name></expr>)<pos:position pos:line="117" pos:column="64"/></condition><then pos:line="117" pos:column="64"> <block pos:line="117" pos:column="65">{
            <break pos:line="118" pos:column="13">break;<pos:position pos:line="118" pos:column="19"/></break>
        }<pos:position pos:line="119" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="120" pos:column="9">/* wait for previous generation to clean up an entry in the scoreboard
         */</comment>
        <expr_stmt><expr><call><name pos:line="122" pos:column="9">apr_sleep<pos:position pos:line="122" pos:column="18"/></name><argument_list pos:line="122" pos:column="18">(<argument><expr><literal type="number" pos:line="122" pos:column="19">1<pos:position pos:line="122" pos:column="20"/></literal> <operator pos:line="122" pos:column="21">*<pos:position pos:line="122" pos:column="22"/></operator> <name pos:line="122" pos:column="23">APR_USEC_PER_SEC<pos:position pos:line="122" pos:column="39"/></name></expr></argument>)<pos:position pos:line="122" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="123" pos:column="6"/></block></while>

    <comment type="block" pos:line="125" pos:column="5">/* Wait for one of three events:
     * exit_event:
     *    The exit_event is signaled by the parent process to notify
     *    the child that it is time to exit.
     *
     * max_requests_per_child_event:
     *    This event is signaled by the worker threads to indicate that
     *    the process has handled MaxRequestsPerChild connections.
     *
     * TIMEOUT:
     *    To do periodic maintenance on the server (check for thread exits,
     *    number of completion contexts, etc.)
     *
     * XXX: thread exits *aren't* being checked.
     *
     * XXX: other_child - we need the process handles to the other children
     *      in order to map them to apr_proc_other_child_read (which is not
     *      named well, it's more like a_p_o_c_died.)
     *
     * XXX: however - if we get a_p_o_c handle inheritance working, and
     *      the parent process creates other children and passes the pipes
     *      to our worker processes, then we have no business doing such
     *      things in the child_main loop, but should happen in master_main.
     */</comment>
    <while pos:line="149" pos:column="5">while <condition pos:line="149" pos:column="11">(<expr><literal type="number" pos:line="149" pos:column="12">1<pos:position pos:line="149" pos:column="13"/></literal></expr>)<pos:position pos:line="149" pos:column="14"/></condition> <block pos:line="149" pos:column="15">{
<cpp:if pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">if<pos:position pos:line="150" pos:column="4"/></cpp:directive> <expr><operator pos:line="150" pos:column="5">!<pos:position pos:line="150" pos:column="6"/></operator><name pos:line="150" pos:column="6">APR_HAS_OTHER_CHILD<pos:position pos:line="150" pos:column="25"/></name></expr></cpp:if>
        <expr_stmt><expr><name pos:line="151" pos:column="9">rv<pos:position pos:line="151" pos:column="11"/></name> <operator pos:line="151" pos:column="12">=<pos:position pos:line="151" pos:column="13"/></operator> <call><name pos:line="151" pos:column="14">WaitForMultipleObjects<pos:position pos:line="151" pos:column="36"/></name><argument_list pos:line="151" pos:column="36">(<argument><expr><literal type="number" pos:line="151" pos:column="37">2<pos:position pos:line="151" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="151" pos:column="40">(<pos:position pos:line="151" pos:column="41"/></operator><name pos:line="151" pos:column="41">HANDLE<pos:position pos:line="151" pos:column="47"/></name> <operator pos:line="151" pos:column="48">*<pos:position pos:line="151" pos:column="49"/></operator><operator pos:line="151" pos:column="49">)<pos:position pos:line="151" pos:column="50"/></operator><name pos:line="151" pos:column="50">child_events<pos:position pos:line="151" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="64">FALSE<pos:position pos:line="151" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="71">INFINITE<pos:position pos:line="151" pos:column="79"/></name></expr></argument>)<pos:position pos:line="151" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><name pos:line="152" pos:column="9">cld<pos:position pos:line="152" pos:column="12"/></name> <operator pos:line="152" pos:column="13">=<pos:position pos:line="152" pos:column="14"/></operator> <name pos:line="152" pos:column="15">rv<pos:position pos:line="152" pos:column="17"/></name> <operator pos:line="152" pos:column="18">-<pos:position pos:line="152" pos:column="19"/></operator> <name pos:line="152" pos:column="20">WAIT_OBJECT_0<pos:position pos:line="152" pos:column="33"/></name></expr>;<pos:position pos:line="152" pos:column="34"/></expr_stmt>
<cpp:else pos:line="153" pos:column="1">#<cpp:directive pos:line="153" pos:column="2">else<pos:position pos:line="153" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name pos:line="154" pos:column="9">rv<pos:position pos:line="154" pos:column="11"/></name> <operator pos:line="154" pos:column="12">=<pos:position pos:line="154" pos:column="13"/></operator> <call><name pos:line="154" pos:column="14">WaitForMultipleObjects<pos:position pos:line="154" pos:column="36"/></name><argument_list pos:line="154" pos:column="36">(<argument><expr><literal type="number" pos:line="154" pos:column="37">2<pos:position pos:line="154" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="154" pos:column="40">(<pos:position pos:line="154" pos:column="41"/></operator><name pos:line="154" pos:column="41">HANDLE<pos:position pos:line="154" pos:column="47"/></name> <operator pos:line="154" pos:column="48">*<pos:position pos:line="154" pos:column="49"/></operator><operator pos:line="154" pos:column="49">)<pos:position pos:line="154" pos:column="50"/></operator><name pos:line="154" pos:column="50">child_events<pos:position pos:line="154" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="64">FALSE<pos:position pos:line="154" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="154" pos:column="71">1000<pos:position pos:line="154" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="154" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><name pos:line="155" pos:column="9">cld<pos:position pos:line="155" pos:column="12"/></name> <operator pos:line="155" pos:column="13">=<pos:position pos:line="155" pos:column="14"/></operator> <name pos:line="155" pos:column="15">rv<pos:position pos:line="155" pos:column="17"/></name> <operator pos:line="155" pos:column="18">-<pos:position pos:line="155" pos:column="19"/></operator> <name pos:line="155" pos:column="20">WAIT_OBJECT_0<pos:position pos:line="155" pos:column="33"/></name></expr>;<pos:position pos:line="155" pos:column="34"/></expr_stmt>
        <if pos:line="156" pos:column="9">if <condition pos:line="156" pos:column="12">(<expr><name pos:line="156" pos:column="13">rv<pos:position pos:line="156" pos:column="15"/></name> <operator pos:line="156" pos:column="16">==<pos:position pos:line="156" pos:column="18"/></operator> <name pos:line="156" pos:column="19">WAIT_TIMEOUT<pos:position pos:line="156" pos:column="31"/></name></expr>)<pos:position pos:line="156" pos:column="32"/></condition><then pos:line="156" pos:column="32"> <block pos:line="156" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="157" pos:column="13">apr_proc_other_child_refresh_all<pos:position pos:line="157" pos:column="45"/></name><argument_list pos:line="157" pos:column="45">(<argument><expr><name pos:line="157" pos:column="46">APR_OC_REASON_RUNNING<pos:position pos:line="157" pos:column="67"/></name></expr></argument>)<pos:position pos:line="157" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="69"/></expr_stmt>
        }<pos:position pos:line="158" pos:column="10"/></block></then>
        <elseif pos:line="159" pos:column="9">else
<cpp:endif pos:line="160" pos:column="1">#<cpp:directive pos:line="160" pos:column="2">endif<pos:position pos:line="160" pos:column="7"/></cpp:directive></cpp:endif>
            <if pos:line="161" pos:column="13">if <condition pos:line="161" pos:column="16">(<expr><name pos:line="161" pos:column="17">rv<pos:position pos:line="161" pos:column="19"/></name> <operator pos:line="161" pos:column="20">==<pos:position pos:line="161" pos:column="22"/></operator> <name pos:line="161" pos:column="23">WAIT_FAILED<pos:position pos:line="161" pos:column="34"/></name></expr>)<pos:position pos:line="161" pos:column="35"/></condition><then pos:line="161" pos:column="35"> <block pos:line="161" pos:column="36">{
            <comment type="block" pos:line="162" pos:column="13">/* Something serious is wrong */</comment>
            <expr_stmt><expr><call><name pos:line="163" pos:column="13">ap_log_error<pos:position pos:line="163" pos:column="25"/></name><argument_list pos:line="163" pos:column="25">(<argument><expr><name pos:line="163" pos:column="26">APLOG_MARK<pos:position pos:line="163" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="38">APLOG_CRIT<pos:position pos:line="163" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="163" pos:column="50">apr_get_os_error<pos:position pos:line="163" pos:column="66"/></name><argument_list pos:line="163" pos:column="66">()<pos:position pos:line="163" pos:column="68"/></argument_list></call></expr></argument>,
                         <argument><expr><name pos:line="164" pos:column="26">ap_server_conf<pos:position pos:line="164" pos:column="40"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="165" pos:column="26">"Child %d: WAIT_FAILED -- shutting down server"<pos:position pos:line="165" pos:column="73"/></literal></expr></argument>, 
                         <argument><expr><name pos:line="166" pos:column="26">my_pid<pos:position pos:line="166" pos:column="32"/></name></expr></argument>)<pos:position pos:line="166" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="34"/></expr_stmt>
            <break pos:line="167" pos:column="13">break;<pos:position pos:line="167" pos:column="19"/></break>
        }<pos:position pos:line="168" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="169" pos:column="9">else <if pos:line="169" pos:column="14">if <condition pos:line="169" pos:column="17">(<expr><name pos:line="169" pos:column="18">cld<pos:position pos:line="169" pos:column="21"/></name> <operator pos:line="169" pos:column="22">==<pos:position pos:line="169" pos:column="24"/></operator> <literal type="number" pos:line="169" pos:column="25">0<pos:position pos:line="169" pos:column="26"/></literal></expr>)<pos:position pos:line="169" pos:column="27"/></condition><then pos:line="169" pos:column="27"> <block pos:line="169" pos:column="28">{
            <comment type="block" pos:line="170" pos:column="13">/* Exit event was signaled */</comment>
            <expr_stmt><expr><call><name pos:line="171" pos:column="13">ap_log_error<pos:position pos:line="171" pos:column="25"/></name><argument_list pos:line="171" pos:column="25">(<argument><expr><name pos:line="171" pos:column="26">APLOG_MARK<pos:position pos:line="171" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="38">APLOG_NOTICE<pos:position pos:line="171" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="52">APR_SUCCESS<pos:position pos:line="171" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="65">ap_server_conf<pos:position pos:line="171" pos:column="79"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="172" pos:column="26">"Child %d: Exit event signaled. Child process is "<pos:position pos:line="172" pos:column="76"/></literal>
                         <literal type="string" pos:line="173" pos:column="26">"ending."<pos:position pos:line="173" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="173" pos:column="37">my_pid<pos:position pos:line="173" pos:column="43"/></name></expr></argument>)<pos:position pos:line="173" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="45"/></expr_stmt>
            <break pos:line="174" pos:column="13">break;<pos:position pos:line="174" pos:column="19"/></break>
        }<pos:position pos:line="175" pos:column="10"/></block></then></if></elseif>
        <else pos:line="176" pos:column="9">else <block pos:line="176" pos:column="14">{
            <comment type="block" pos:line="177" pos:column="13">/* MaxRequestsPerChild event set by the worker threads.
             * Signal the parent to restart
             */</comment>
            <expr_stmt><expr><call><name pos:line="180" pos:column="13">ap_log_error<pos:position pos:line="180" pos:column="25"/></name><argument_list pos:line="180" pos:column="25">(<argument><expr><name pos:line="180" pos:column="26">APLOG_MARK<pos:position pos:line="180" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="38">APLOG_NOTICE<pos:position pos:line="180" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="52">APR_SUCCESS<pos:position pos:line="180" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="65">ap_server_conf<pos:position pos:line="180" pos:column="79"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="181" pos:column="26">"Child %d: Process exiting because it reached "<pos:position pos:line="181" pos:column="73"/></literal>
                         <literal type="string" pos:line="182" pos:column="26">"MaxRequestsPerChild. Signaling the parent to "<pos:position pos:line="182" pos:column="73"/></literal>
                         <literal type="string" pos:line="183" pos:column="26">"restart a new child process."<pos:position pos:line="183" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="183" pos:column="58">my_pid<pos:position pos:line="183" pos:column="64"/></name></expr></argument>)<pos:position pos:line="183" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="184" pos:column="13">ap_signal_parent<pos:position pos:line="184" pos:column="29"/></name><argument_list pos:line="184" pos:column="29">(<argument><expr><name pos:line="184" pos:column="30">SIGNAL_PARENT_RESTART<pos:position pos:line="184" pos:column="51"/></name></expr></argument>)<pos:position pos:line="184" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="184" pos:column="53"/></expr_stmt>
            <break pos:line="185" pos:column="13">break;<pos:position pos:line="185" pos:column="19"/></break>
        }<pos:position pos:line="186" pos:column="10"/></block></else></if>
    }<pos:position pos:line="187" pos:column="6"/></block></while>

    <comment type="block" pos:line="189" pos:column="5">/*
     * Time to shutdown the child process
     */</comment>

 <label><name pos:line="193" pos:column="2">shutdown<pos:position pos:line="193" pos:column="10"/></name>:<pos:position pos:line="193" pos:column="11"/></label>

    <expr_stmt><expr><name pos:line="195" pos:column="5">winnt_mpm_state<pos:position pos:line="195" pos:column="20"/></name> <operator pos:line="195" pos:column="21">=<pos:position pos:line="195" pos:column="22"/></operator> <name pos:line="195" pos:column="23">AP_MPMQ_STOPPING<pos:position pos:line="195" pos:column="39"/></name></expr>;<pos:position pos:line="195" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="197" pos:column="5">/* Close the listening sockets. Note, we must close the listeners
     * before closing any accept sockets pending in AcceptEx to prevent
     * memory leaks in the kernel.
     */</comment>
    <for pos:line="201" pos:column="5">for <control pos:line="201" pos:column="9">(<init><expr><name pos:line="201" pos:column="10">lr<pos:position pos:line="201" pos:column="12"/></name> <operator pos:line="201" pos:column="13">=<pos:position pos:line="201" pos:column="14"/></operator> <name pos:line="201" pos:column="15">ap_listeners<pos:position pos:line="201" pos:column="27"/></name></expr>;<pos:position pos:line="201" pos:column="28"/></init> <condition><expr><name pos:line="201" pos:column="29">lr<pos:position pos:line="201" pos:column="31"/></name></expr> ;<pos:position pos:line="201" pos:column="33"/></condition> <incr><expr><name pos:line="201" pos:column="34">lr<pos:position pos:line="201" pos:column="36"/></name> <operator pos:line="201" pos:column="37">=<pos:position pos:line="201" pos:column="38"/></operator> <name><name pos:line="201" pos:column="39">lr<pos:position pos:line="201" pos:column="41"/></name><operator pos:line="201" pos:column="41">-&gt;<pos:position pos:line="201" pos:column="46"/></operator><name pos:line="201" pos:column="43">next<pos:position pos:line="201" pos:column="47"/></name></name></expr></incr>)<pos:position pos:line="201" pos:column="48"/></control> <block pos:line="201" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="202" pos:column="9">apr_socket_close<pos:position pos:line="202" pos:column="25"/></name><argument_list pos:line="202" pos:column="25">(<argument><expr><name><name pos:line="202" pos:column="26">lr<pos:position pos:line="202" pos:column="28"/></name><operator pos:line="202" pos:column="28">-&gt;<pos:position pos:line="202" pos:column="33"/></operator><name pos:line="202" pos:column="30">sd<pos:position pos:line="202" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="202" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="203" pos:column="6"/></block></for>

    <comment type="block" pos:line="205" pos:column="5">/* Shutdown listener threads and pending AcceptEx socksts
     * but allow the worker threads to continue consuming from
     * the queue of accepted connections.
     */</comment>
    <expr_stmt><expr><name pos:line="209" pos:column="5">shutdown_in_progress<pos:position pos:line="209" pos:column="25"/></name> <operator pos:line="209" pos:column="26">=<pos:position pos:line="209" pos:column="27"/></operator> <literal type="number" pos:line="209" pos:column="28">1<pos:position pos:line="209" pos:column="29"/></literal></expr>;<pos:position pos:line="209" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="211" pos:column="5">Sleep<pos:position pos:line="211" pos:column="10"/></name><argument_list pos:line="211" pos:column="10">(<argument><expr><literal type="number" pos:line="211" pos:column="11">1000<pos:position pos:line="211" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="211" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="17"/></expr_stmt>

    <comment type="block" pos:line="213" pos:column="5">/* Tell the worker threads to exit */</comment>
    <expr_stmt><expr><name pos:line="214" pos:column="5">workers_may_exit<pos:position pos:line="214" pos:column="21"/></name> <operator pos:line="214" pos:column="22">=<pos:position pos:line="214" pos:column="23"/></operator> <literal type="number" pos:line="214" pos:column="24">1<pos:position pos:line="214" pos:column="25"/></literal></expr>;<pos:position pos:line="214" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="216" pos:column="5">/* Release the start_mutex to let the new process (in the restart
     * scenario) a chance to begin accepting and servicing requests
     */</comment>
    <expr_stmt><expr><name pos:line="219" pos:column="5">rv<pos:position pos:line="219" pos:column="7"/></name> <operator pos:line="219" pos:column="8">=<pos:position pos:line="219" pos:column="9"/></operator> <call><name pos:line="219" pos:column="10">apr_proc_mutex_unlock<pos:position pos:line="219" pos:column="31"/></name><argument_list pos:line="219" pos:column="31">(<argument><expr><name pos:line="219" pos:column="32">start_mutex<pos:position pos:line="219" pos:column="43"/></name></expr></argument>)<pos:position pos:line="219" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="45"/></expr_stmt>
    <if pos:line="220" pos:column="5">if <condition pos:line="220" pos:column="8">(<expr><name pos:line="220" pos:column="9">rv<pos:position pos:line="220" pos:column="11"/></name> <operator pos:line="220" pos:column="12">==<pos:position pos:line="220" pos:column="14"/></operator> <name pos:line="220" pos:column="15">APR_SUCCESS<pos:position pos:line="220" pos:column="26"/></name></expr>)<pos:position pos:line="220" pos:column="27"/></condition><then pos:line="220" pos:column="27"> <block pos:line="220" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="221" pos:column="9">ap_log_error<pos:position pos:line="221" pos:column="21"/></name><argument_list pos:line="221" pos:column="21">(<argument><expr><name pos:line="221" pos:column="22">APLOG_MARK<pos:position pos:line="221" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="34">APLOG_NOTICE<pos:position pos:line="221" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="48">rv<pos:position pos:line="221" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="52">ap_server_conf<pos:position pos:line="221" pos:column="66"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="222" pos:column="22">"Child %d: Released the start mutex"<pos:position pos:line="222" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="222" pos:column="60">my_pid<pos:position pos:line="222" pos:column="66"/></name></expr></argument>)<pos:position pos:line="222" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="223" pos:column="6"/></block></then>
    <else pos:line="224" pos:column="5">else <block pos:line="224" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="225" pos:column="9">ap_log_error<pos:position pos:line="225" pos:column="21"/></name><argument_list pos:line="225" pos:column="21">(<argument><expr><name pos:line="225" pos:column="22">APLOG_MARK<pos:position pos:line="225" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="34">APLOG_ERR<pos:position pos:line="225" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="45">rv<pos:position pos:line="225" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="49">ap_server_conf<pos:position pos:line="225" pos:column="63"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="226" pos:column="22">"Child %d: Failure releasing the start mutex"<pos:position pos:line="226" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="226" pos:column="69">my_pid<pos:position pos:line="226" pos:column="75"/></name></expr></argument>)<pos:position pos:line="226" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="227" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="229" pos:column="5">/* Shutdown the worker threads
     * Post worker threads blocked on the ThreadDispatch IOCompletion port
     */</comment>
    <while pos:line="232" pos:column="5">while <condition pos:line="232" pos:column="11">(<expr><name pos:line="232" pos:column="12">g_blocked_threads<pos:position pos:line="232" pos:column="29"/></name> <operator pos:line="232" pos:column="30">&gt;<pos:position pos:line="232" pos:column="34"/></operator> <literal type="number" pos:line="232" pos:column="32">0<pos:position pos:line="232" pos:column="33"/></literal></expr>)<pos:position pos:line="232" pos:column="34"/></condition> <block pos:line="232" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="233" pos:column="9">ap_log_error<pos:position pos:line="233" pos:column="21"/></name><argument_list pos:line="233" pos:column="21">(<argument><expr><name pos:line="233" pos:column="22">APLOG_MARK<pos:position pos:line="233" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="233" pos:column="34">APLOG_INFO<pos:position pos:line="233" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="233" pos:column="46">APR_SUCCESS<pos:position pos:line="233" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="233" pos:column="59">ap_server_conf<pos:position pos:line="233" pos:column="73"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="234" pos:column="22">"Child %d: %d threads blocked on the completion port"<pos:position pos:line="234" pos:column="75"/></literal></expr></argument>,
                     <argument><expr><name pos:line="235" pos:column="22">my_pid<pos:position pos:line="235" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="235" pos:column="30">g_blocked_threads<pos:position pos:line="235" pos:column="47"/></name></expr></argument>)<pos:position pos:line="235" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="49"/></expr_stmt>
        <for pos:line="236" pos:column="9">for <control pos:line="236" pos:column="13">(<init><expr><name pos:line="236" pos:column="14">i<pos:position pos:line="236" pos:column="15"/></name><operator pos:line="236" pos:column="15">=<pos:position pos:line="236" pos:column="16"/></operator><name pos:line="236" pos:column="16">g_blocked_threads<pos:position pos:line="236" pos:column="33"/></name></expr>;<pos:position pos:line="236" pos:column="34"/></init> <condition><expr><name pos:line="236" pos:column="35">i<pos:position pos:line="236" pos:column="36"/></name> <operator pos:line="236" pos:column="37">&gt;<pos:position pos:line="236" pos:column="41"/></operator> <literal type="number" pos:line="236" pos:column="39">0<pos:position pos:line="236" pos:column="40"/></literal></expr>;<pos:position pos:line="236" pos:column="41"/></condition> <incr><expr><name pos:line="236" pos:column="42">i<pos:position pos:line="236" pos:column="43"/></name><operator pos:line="236" pos:column="43">--<pos:position pos:line="236" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="236" pos:column="46"/></control> <block pos:line="236" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="237" pos:column="13">PostQueuedCompletionStatus<pos:position pos:line="237" pos:column="39"/></name><argument_list pos:line="237" pos:column="39">(<argument><expr><name pos:line="237" pos:column="40">ThreadDispatchIOCP<pos:position pos:line="237" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="237" pos:column="60">0<pos:position pos:line="237" pos:column="61"/></literal></expr></argument>, 
                                       <argument><expr><name pos:line="238" pos:column="40">IOCP_SHUTDOWN<pos:position pos:line="238" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="238" pos:column="55">NULL<pos:position pos:line="238" pos:column="59"/></name></expr></argument>)<pos:position pos:line="238" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="61"/></expr_stmt>
        }<pos:position pos:line="239" pos:column="10"/></block></for>
        <expr_stmt><expr><call><name pos:line="240" pos:column="9">Sleep<pos:position pos:line="240" pos:column="14"/></name><argument_list pos:line="240" pos:column="14">(<argument><expr><literal type="number" pos:line="240" pos:column="15">1000<pos:position pos:line="240" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="240" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="241" pos:column="6"/></block></while>
    <comment type="block" pos:line="242" pos:column="5">/* Empty the accept queue of completion contexts */</comment>
    <expr_stmt><expr><call><name pos:line="243" pos:column="5">apr_thread_mutex_lock<pos:position pos:line="243" pos:column="26"/></name><argument_list pos:line="243" pos:column="26">(<argument><expr><name pos:line="243" pos:column="27">qlock<pos:position pos:line="243" pos:column="32"/></name></expr></argument>)<pos:position pos:line="243" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="34"/></expr_stmt>
    <while pos:line="244" pos:column="5">while <condition pos:line="244" pos:column="11">(<expr><name pos:line="244" pos:column="12">qhead<pos:position pos:line="244" pos:column="17"/></name></expr>)<pos:position pos:line="244" pos:column="18"/></condition> <block pos:line="244" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="245" pos:column="9">CloseHandle<pos:position pos:line="245" pos:column="20"/></name><argument_list pos:line="245" pos:column="20">(<argument><expr><name><name pos:line="245" pos:column="21">qhead<pos:position pos:line="245" pos:column="26"/></name><operator pos:line="245" pos:column="26">-&gt;<pos:position pos:line="245" pos:column="31"/></operator><name pos:line="245" pos:column="28">overlapped<pos:position pos:line="245" pos:column="38"/></name><operator pos:line="245" pos:column="38">.<pos:position pos:line="245" pos:column="39"/></operator><name pos:line="245" pos:column="39">hEvent<pos:position pos:line="245" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="245" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="246" pos:column="9">closesocket<pos:position pos:line="246" pos:column="20"/></name><argument_list pos:line="246" pos:column="20">(<argument><expr><name><name pos:line="246" pos:column="21">qhead<pos:position pos:line="246" pos:column="26"/></name><operator pos:line="246" pos:column="26">-&gt;<pos:position pos:line="246" pos:column="31"/></operator><name pos:line="246" pos:column="28">accept_socket<pos:position pos:line="246" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="246" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="247" pos:column="9">qhead<pos:position pos:line="247" pos:column="14"/></name> <operator pos:line="247" pos:column="15">=<pos:position pos:line="247" pos:column="16"/></operator> <name><name pos:line="247" pos:column="17">qhead<pos:position pos:line="247" pos:column="22"/></name><operator pos:line="247" pos:column="22">-&gt;<pos:position pos:line="247" pos:column="27"/></operator><name pos:line="247" pos:column="24">next<pos:position pos:line="247" pos:column="28"/></name></name></expr>;<pos:position pos:line="247" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="248" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="249" pos:column="5">apr_thread_mutex_unlock<pos:position pos:line="249" pos:column="28"/></name><argument_list pos:line="249" pos:column="28">(<argument><expr><name pos:line="249" pos:column="29">qlock<pos:position pos:line="249" pos:column="34"/></name></expr></argument>)<pos:position pos:line="249" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="249" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="251" pos:column="5">/* Give busy threads a chance to service their connections,
     * (no more than the global server timeout period which 
     * we track in msec remaining).
     */</comment>
    <expr_stmt><expr><name pos:line="255" pos:column="5">watch_thread<pos:position pos:line="255" pos:column="17"/></name> <operator pos:line="255" pos:column="18">=<pos:position pos:line="255" pos:column="19"/></operator> <literal type="number" pos:line="255" pos:column="20">0<pos:position pos:line="255" pos:column="21"/></literal></expr>;<pos:position pos:line="255" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="256" pos:column="5">time_remains<pos:position pos:line="256" pos:column="17"/></name> <operator pos:line="256" pos:column="18">=<pos:position pos:line="256" pos:column="19"/></operator> <call pos:line="256" pos:column="20">(<name pos:line="256" pos:column="21">int<pos:position pos:line="256" pos:column="24"/></name>)<argument_list pos:line="256" pos:column="25">(<argument><expr><name><name pos:line="256" pos:column="26">ap_server_conf<pos:position pos:line="256" pos:column="40"/></name><operator pos:line="256" pos:column="40">-&gt;<pos:position pos:line="256" pos:column="45"/></operator><name pos:line="256" pos:column="42">timeout<pos:position pos:line="256" pos:column="49"/></name></name> <operator pos:line="256" pos:column="50">/<pos:position pos:line="256" pos:column="51"/></operator> <call><name pos:line="256" pos:column="52">APR_TIME_C<pos:position pos:line="256" pos:column="62"/></name><argument_list pos:line="256" pos:column="62">(<argument><expr><literal type="number" pos:line="256" pos:column="63">1000<pos:position pos:line="256" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="256" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="256" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="70"/></expr_stmt>

    <while pos:line="258" pos:column="5">while <condition pos:line="258" pos:column="11">(<expr><name pos:line="258" pos:column="12">threads_created<pos:position pos:line="258" pos:column="27"/></name></expr>)<pos:position pos:line="258" pos:column="28"/></condition>
    <block pos:line="259" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="260" pos:column="9">int<pos:position pos:line="260" pos:column="12"/></name></type> <name pos:line="260" pos:column="13">nFailsafe<pos:position pos:line="260" pos:column="22"/></name> <init pos:line="260" pos:column="23">= <expr><name pos:line="260" pos:column="25">MAXIMUM_WAIT_OBJECTS<pos:position pos:line="260" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="260" pos:column="46"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="261" pos:column="9">DWORD<pos:position pos:line="261" pos:column="14"/></name></type> <name pos:line="261" pos:column="15">dwRet<pos:position pos:line="261" pos:column="20"/></name></decl>;<pos:position pos:line="261" pos:column="21"/></decl_stmt>

        <comment type="block" pos:line="263" pos:column="9">/* Every time we roll over to wait on the first group
         * of MAXIMUM_WAIT_OBJECTS threads, take a breather,
         * and infrequently update the error log.
         */</comment>
        <if pos:line="267" pos:column="9">if <condition pos:line="267" pos:column="12">(<expr><name pos:line="267" pos:column="13">watch_thread<pos:position pos:line="267" pos:column="25"/></name> <operator pos:line="267" pos:column="26">&gt;=<pos:position pos:line="267" pos:column="31"/></operator> <name pos:line="267" pos:column="29">threads_created<pos:position pos:line="267" pos:column="44"/></name></expr>)<pos:position pos:line="267" pos:column="45"/></condition><then pos:line="267" pos:column="45"> <block pos:line="267" pos:column="46">{
            <if pos:line="268" pos:column="13">if <condition pos:line="268" pos:column="16">(<expr><operator pos:line="268" pos:column="17">(<pos:position pos:line="268" pos:column="18"/></operator><name pos:line="268" pos:column="18">time_remains<pos:position pos:line="268" pos:column="30"/></name> <operator pos:line="268" pos:column="31">-=<pos:position pos:line="268" pos:column="33"/></operator> <literal type="number" pos:line="268" pos:column="34">100<pos:position pos:line="268" pos:column="37"/></literal><operator pos:line="268" pos:column="37">)<pos:position pos:line="268" pos:column="38"/></operator> <operator pos:line="268" pos:column="39">&lt;<pos:position pos:line="268" pos:column="43"/></operator> <literal type="number" pos:line="268" pos:column="41">0<pos:position pos:line="268" pos:column="42"/></literal></expr>)<pos:position pos:line="268" pos:column="43"/></condition><then pos:line="268" pos:column="43">
                <block type="pseudo"><break pos:line="269" pos:column="17">break;<pos:position pos:line="269" pos:column="23"/></break></block></then></if>

            <comment type="block" pos:line="271" pos:column="13">/* Every 30 seconds give an update */</comment>
            <if pos:line="272" pos:column="13">if <condition pos:line="272" pos:column="16">(<expr><operator pos:line="272" pos:column="17">(<pos:position pos:line="272" pos:column="18"/></operator><name pos:line="272" pos:column="18">time_remains<pos:position pos:line="272" pos:column="30"/></name> <operator pos:line="272" pos:column="31">%<pos:position pos:line="272" pos:column="32"/></operator> <literal type="number" pos:line="272" pos:column="33">30000<pos:position pos:line="272" pos:column="38"/></literal><operator pos:line="272" pos:column="38">)<pos:position pos:line="272" pos:column="39"/></operator> <operator pos:line="272" pos:column="40">==<pos:position pos:line="272" pos:column="42"/></operator> <literal type="number" pos:line="272" pos:column="43">0<pos:position pos:line="272" pos:column="44"/></literal></expr>)<pos:position pos:line="272" pos:column="45"/></condition><then pos:line="272" pos:column="45"> <block pos:line="272" pos:column="46">{
                <expr_stmt><expr><call><name pos:line="273" pos:column="17">ap_log_error<pos:position pos:line="273" pos:column="29"/></name><argument_list pos:line="273" pos:column="29">(<argument><expr><name pos:line="273" pos:column="30">APLOG_MARK<pos:position pos:line="273" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="273" pos:column="42">APLOG_NOTICE<pos:position pos:line="273" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="273" pos:column="56">APR_SUCCESS<pos:position pos:line="273" pos:column="67"/></name></expr></argument>, 
                             <argument><expr><name pos:line="274" pos:column="30">ap_server_conf<pos:position pos:line="274" pos:column="44"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="275" pos:column="30">"Child %d: Waiting %d more seconds "<pos:position pos:line="275" pos:column="66"/></literal>
                             <literal type="string" pos:line="276" pos:column="30">"for %d worker threads to finish."<pos:position pos:line="276" pos:column="64"/></literal></expr></argument>, 
                             <argument><expr><name pos:line="277" pos:column="30">my_pid<pos:position pos:line="277" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="277" pos:column="38">time_remains<pos:position pos:line="277" pos:column="50"/></name> <operator pos:line="277" pos:column="51">/<pos:position pos:line="277" pos:column="52"/></operator> <literal type="number" pos:line="277" pos:column="53">1000<pos:position pos:line="277" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="277" pos:column="59">threads_created<pos:position pos:line="277" pos:column="74"/></name></expr></argument>)<pos:position pos:line="277" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="277" pos:column="76"/></expr_stmt>
            }<pos:position pos:line="278" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="279" pos:column="13">/* We'll poll from the top, 10 times per second */</comment>
            <expr_stmt><expr><call><name pos:line="280" pos:column="13">Sleep<pos:position pos:line="280" pos:column="18"/></name><argument_list pos:line="280" pos:column="18">(<argument><expr><literal type="number" pos:line="280" pos:column="19">100<pos:position pos:line="280" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="280" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><name pos:line="281" pos:column="13">watch_thread<pos:position pos:line="281" pos:column="25"/></name> <operator pos:line="281" pos:column="26">=<pos:position pos:line="281" pos:column="27"/></operator> <literal type="number" pos:line="281" pos:column="28">0<pos:position pos:line="281" pos:column="29"/></literal></expr>;<pos:position pos:line="281" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="282" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="284" pos:column="9">/* Fairness, on each iteration we will pick up with the thread
         * after the one we just removed, even if it's a single thread.
         * We don't block here.
         */</comment>
        <expr_stmt><expr><name pos:line="288" pos:column="9">dwRet<pos:position pos:line="288" pos:column="14"/></name> <operator pos:line="288" pos:column="15">=<pos:position pos:line="288" pos:column="16"/></operator> <call><name pos:line="288" pos:column="17">WaitForMultipleObjects<pos:position pos:line="288" pos:column="39"/></name><argument_list pos:line="288" pos:column="39">(<argument><expr><call><name pos:line="288" pos:column="40">min<pos:position pos:line="288" pos:column="43"/></name><argument_list pos:line="288" pos:column="43">(<argument><expr><name pos:line="288" pos:column="44">threads_created<pos:position pos:line="288" pos:column="59"/></name> <operator pos:line="288" pos:column="60">-<pos:position pos:line="288" pos:column="61"/></operator> <name pos:line="288" pos:column="62">watch_thread<pos:position pos:line="288" pos:column="74"/></name></expr></argument>,
                                           <argument><expr><name pos:line="289" pos:column="44">MAXIMUM_WAIT_OBJECTS<pos:position pos:line="289" pos:column="64"/></name></expr></argument>)<pos:position pos:line="289" pos:column="65"/></argument_list></call></expr></argument>,
                                       <argument><expr><name pos:line="290" pos:column="40">child_handles<pos:position pos:line="290" pos:column="53"/></name> <operator pos:line="290" pos:column="54">+<pos:position pos:line="290" pos:column="55"/></operator> <name pos:line="290" pos:column="56">watch_thread<pos:position pos:line="290" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="290" pos:column="70">0<pos:position pos:line="290" pos:column="71"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="290" pos:column="73">0<pos:position pos:line="290" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="290" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="76"/></expr_stmt>

        <if pos:line="292" pos:column="9">if <condition pos:line="292" pos:column="12">(<expr><name pos:line="292" pos:column="13">dwRet<pos:position pos:line="292" pos:column="18"/></name> <operator pos:line="292" pos:column="19">==<pos:position pos:line="292" pos:column="21"/></operator> <name pos:line="292" pos:column="22">WAIT_FAILED<pos:position pos:line="292" pos:column="33"/></name></expr>)<pos:position pos:line="292" pos:column="34"/></condition><then pos:line="292" pos:column="34"> <block pos:line="292" pos:column="35">{
            <break pos:line="293" pos:column="13">break;<pos:position pos:line="293" pos:column="19"/></break>
        }<pos:position pos:line="294" pos:column="10"/></block></then></if>
        <if pos:line="295" pos:column="9">if <condition pos:line="295" pos:column="12">(<expr><name pos:line="295" pos:column="13">dwRet<pos:position pos:line="295" pos:column="18"/></name> <operator pos:line="295" pos:column="19">==<pos:position pos:line="295" pos:column="21"/></operator> <name pos:line="295" pos:column="22">WAIT_TIMEOUT<pos:position pos:line="295" pos:column="34"/></name></expr>)<pos:position pos:line="295" pos:column="35"/></condition><then pos:line="295" pos:column="35"> <block pos:line="295" pos:column="36">{
            <comment type="block" pos:line="296" pos:column="13">/* none ready */</comment>
            <expr_stmt><expr><name pos:line="297" pos:column="13">watch_thread<pos:position pos:line="297" pos:column="25"/></name> <operator pos:line="297" pos:column="26">+=<pos:position pos:line="297" pos:column="28"/></operator> <name pos:line="297" pos:column="29">MAXIMUM_WAIT_OBJECTS<pos:position pos:line="297" pos:column="49"/></name></expr>;<pos:position pos:line="297" pos:column="50"/></expr_stmt>
            <continue pos:line="298" pos:column="13">continue;<pos:position pos:line="298" pos:column="22"/></continue>
        }<pos:position pos:line="299" pos:column="10"/></block></then>
        <elseif pos:line="300" pos:column="9">else <if pos:line="300" pos:column="14">if <condition pos:line="300" pos:column="17">(<expr><name pos:line="300" pos:column="18">dwRet<pos:position pos:line="300" pos:column="23"/></name> <operator pos:line="300" pos:column="24">&gt;=<pos:position pos:line="300" pos:column="29"/></operator> <name pos:line="300" pos:column="27">WAIT_ABANDONED_0<pos:position pos:line="300" pos:column="43"/></name></expr>)<pos:position pos:line="300" pos:column="44"/></condition><then pos:line="300" pos:column="44"> <block pos:line="300" pos:column="45">{
            <comment type="block" pos:line="301" pos:column="13">/* We just got the ownership of the object, which
             * should happen at most MAXIMUM_WAIT_OBJECTS times.
             * It does NOT mean that the object is signaled.
             */</comment>
            <if pos:line="305" pos:column="13">if <condition pos:line="305" pos:column="16">(<expr><operator pos:line="305" pos:column="17">(<pos:position pos:line="305" pos:column="18"/></operator><name pos:line="305" pos:column="18">nFailsafe<pos:position pos:line="305" pos:column="27"/></name><operator pos:line="305" pos:column="27">--<pos:position pos:line="305" pos:column="29"/></operator><operator pos:line="305" pos:column="29">)<pos:position pos:line="305" pos:column="30"/></operator> <operator pos:line="305" pos:column="31">&lt;<pos:position pos:line="305" pos:column="35"/></operator> <literal type="number" pos:line="305" pos:column="33">1<pos:position pos:line="305" pos:column="34"/></literal></expr>)<pos:position pos:line="305" pos:column="35"/></condition><then pos:line="305" pos:column="35">
                <block type="pseudo"><break pos:line="306" pos:column="17">break;<pos:position pos:line="306" pos:column="23"/></break></block></then></if>
        }<pos:position pos:line="307" pos:column="10"/></block></then></if></elseif>
        <else pos:line="308" pos:column="9">else <block pos:line="308" pos:column="14">{
            <expr_stmt><expr><name pos:line="309" pos:column="13">watch_thread<pos:position pos:line="309" pos:column="25"/></name> <operator pos:line="309" pos:column="26">+=<pos:position pos:line="309" pos:column="28"/></operator> <operator pos:line="309" pos:column="29">(<pos:position pos:line="309" pos:column="30"/></operator><name pos:line="309" pos:column="30">dwRet<pos:position pos:line="309" pos:column="35"/></name> <operator pos:line="309" pos:column="36">-<pos:position pos:line="309" pos:column="37"/></operator> <name pos:line="309" pos:column="38">WAIT_OBJECT_0<pos:position pos:line="309" pos:column="51"/></name><operator pos:line="309" pos:column="51">)<pos:position pos:line="309" pos:column="52"/></operator></expr>;<pos:position pos:line="309" pos:column="53"/></expr_stmt>
            <if pos:line="310" pos:column="13">if <condition pos:line="310" pos:column="16">(<expr><name pos:line="310" pos:column="17">watch_thread<pos:position pos:line="310" pos:column="29"/></name> <operator pos:line="310" pos:column="30">&gt;=<pos:position pos:line="310" pos:column="35"/></operator> <name pos:line="310" pos:column="33">threads_created<pos:position pos:line="310" pos:column="48"/></name></expr>)<pos:position pos:line="310" pos:column="49"/></condition><then pos:line="310" pos:column="49">
                <block type="pseudo"><break pos:line="311" pos:column="17">break;<pos:position pos:line="311" pos:column="23"/></break></block></then></if>
            <expr_stmt><expr><call><name pos:line="312" pos:column="13">cleanup_thread<pos:position pos:line="312" pos:column="27"/></name><argument_list pos:line="312" pos:column="27">(<argument><expr><name pos:line="312" pos:column="28">child_handles<pos:position pos:line="312" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="312" pos:column="43">&amp;<pos:position pos:line="312" pos:column="48"/></operator><name pos:line="312" pos:column="44">threads_created<pos:position pos:line="312" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="312" pos:column="61">watch_thread<pos:position pos:line="312" pos:column="73"/></name></expr></argument>)<pos:position pos:line="312" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="312" pos:column="75"/></expr_stmt>
        }<pos:position pos:line="313" pos:column="10"/></block></else></if>
    }<pos:position pos:line="314" pos:column="6"/></block></while>

    <comment type="block" pos:line="316" pos:column="5">/* Kill remaining threads off the hard way */</comment>
    <if pos:line="317" pos:column="5">if <condition pos:line="317" pos:column="8">(<expr><name pos:line="317" pos:column="9">threads_created<pos:position pos:line="317" pos:column="24"/></name></expr>)<pos:position pos:line="317" pos:column="25"/></condition><then pos:line="317" pos:column="25"> <block pos:line="317" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="318" pos:column="9">ap_log_error<pos:position pos:line="318" pos:column="21"/></name><argument_list pos:line="318" pos:column="21">(<argument><expr><name pos:line="318" pos:column="22">APLOG_MARK<pos:position pos:line="318" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="318" pos:column="34">APLOG_NOTICE<pos:position pos:line="318" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="318" pos:column="48">APR_SUCCESS<pos:position pos:line="318" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="318" pos:column="61">ap_server_conf<pos:position pos:line="318" pos:column="75"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="319" pos:column="22">"Child %d: Terminating %d threads that failed to exit."<pos:position pos:line="319" pos:column="77"/></literal></expr></argument>,
                     <argument><expr><name pos:line="320" pos:column="22">my_pid<pos:position pos:line="320" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="320" pos:column="30">threads_created<pos:position pos:line="320" pos:column="45"/></name></expr></argument>)<pos:position pos:line="320" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="321" pos:column="6"/></block></then></if>
    <for pos:line="322" pos:column="5">for <control pos:line="322" pos:column="9">(<init><expr><name pos:line="322" pos:column="10">i<pos:position pos:line="322" pos:column="11"/></name> <operator pos:line="322" pos:column="12">=<pos:position pos:line="322" pos:column="13"/></operator> <literal type="number" pos:line="322" pos:column="14">0<pos:position pos:line="322" pos:column="15"/></literal></expr>;<pos:position pos:line="322" pos:column="16"/></init> <condition><expr><name pos:line="322" pos:column="17">i<pos:position pos:line="322" pos:column="18"/></name> <operator pos:line="322" pos:column="19">&lt;<pos:position pos:line="322" pos:column="23"/></operator> <name pos:line="322" pos:column="21">threads_created<pos:position pos:line="322" pos:column="36"/></name></expr>;<pos:position pos:line="322" pos:column="37"/></condition> <incr><expr><name pos:line="322" pos:column="38">i<pos:position pos:line="322" pos:column="39"/></name><operator pos:line="322" pos:column="39">++<pos:position pos:line="322" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="322" pos:column="42"/></control> <block pos:line="322" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="323" pos:column="9">int<pos:position pos:line="323" pos:column="12"/></name> <modifier pos:line="323" pos:column="13">*<pos:position pos:line="323" pos:column="14"/></modifier></type><name pos:line="323" pos:column="14">score_idx<pos:position pos:line="323" pos:column="23"/></name></decl>;<pos:position pos:line="323" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="324" pos:column="9">TerminateThread<pos:position pos:line="324" pos:column="24"/></name><argument_list pos:line="324" pos:column="24">(<argument><expr><name><name pos:line="324" pos:column="25">child_handles<pos:position pos:line="324" pos:column="38"/></name><index pos:line="324" pos:column="38">[<expr><name pos:line="324" pos:column="39">i<pos:position pos:line="324" pos:column="40"/></name></expr>]<pos:position pos:line="324" pos:column="41"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="324" pos:column="43">1<pos:position pos:line="324" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="324" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="325" pos:column="9">CloseHandle<pos:position pos:line="325" pos:column="20"/></name><argument_list pos:line="325" pos:column="20">(<argument><expr><name><name pos:line="325" pos:column="21">child_handles<pos:position pos:line="325" pos:column="34"/></name><index pos:line="325" pos:column="34">[<expr><name pos:line="325" pos:column="35">i<pos:position pos:line="325" pos:column="36"/></name></expr>]<pos:position pos:line="325" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="325" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="39"/></expr_stmt>
        <comment type="block" pos:line="326" pos:column="9">/* Reset the scoreboard entry for the thread we just whacked */</comment>
        <expr_stmt><expr><name pos:line="327" pos:column="9">score_idx<pos:position pos:line="327" pos:column="18"/></name> <operator pos:line="327" pos:column="19">=<pos:position pos:line="327" pos:column="20"/></operator> <call><name pos:line="327" pos:column="21">apr_hash_get<pos:position pos:line="327" pos:column="33"/></name><argument_list pos:line="327" pos:column="33">(<argument><expr><name pos:line="327" pos:column="34">ht<pos:position pos:line="327" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="327" pos:column="38">&amp;<pos:position pos:line="327" pos:column="43"/></operator><name><name pos:line="327" pos:column="39">child_handles<pos:position pos:line="327" pos:column="52"/></name><index pos:line="327" pos:column="52">[<expr><name pos:line="327" pos:column="53">i<pos:position pos:line="327" pos:column="54"/></name></expr>]<pos:position pos:line="327" pos:column="55"/></index></name></expr></argument>, <argument><expr><sizeof pos:line="327" pos:column="57">sizeof<argument_list pos:line="327" pos:column="63">(<argument><expr><name pos:line="327" pos:column="64">HANDLE<pos:position pos:line="327" pos:column="70"/></name></expr></argument>)<pos:position pos:line="327" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="327" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="327" pos:column="73"/></expr_stmt>
        <if pos:line="328" pos:column="9">if <condition pos:line="328" pos:column="12">(<expr><name pos:line="328" pos:column="13">score_idx<pos:position pos:line="328" pos:column="22"/></name></expr>)<pos:position pos:line="328" pos:column="23"/></condition><then pos:line="328" pos:column="23"> <block pos:line="328" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="329" pos:column="13">ap_update_child_status_from_indexes<pos:position pos:line="329" pos:column="48"/></name><argument_list pos:line="329" pos:column="48">(<argument><expr><literal type="number" pos:line="329" pos:column="49">0<pos:position pos:line="329" pos:column="50"/></literal></expr></argument>, <argument><expr><operator pos:line="329" pos:column="52">*<pos:position pos:line="329" pos:column="53"/></operator><name pos:line="329" pos:column="53">score_idx<pos:position pos:line="329" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="329" pos:column="64">SERVER_DEAD<pos:position pos:line="329" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="329" pos:column="77">NULL<pos:position pos:line="329" pos:column="81"/></name></expr></argument>)<pos:position pos:line="329" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="329" pos:column="83"/></expr_stmt>
        }<pos:position pos:line="330" pos:column="10"/></block></then></if>
    }<pos:position pos:line="331" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="332" pos:column="5">ap_log_error<pos:position pos:line="332" pos:column="17"/></name><argument_list pos:line="332" pos:column="17">(<argument><expr><name pos:line="332" pos:column="18">APLOG_MARK<pos:position pos:line="332" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="332" pos:column="30">APLOG_NOTICE<pos:position pos:line="332" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="332" pos:column="44">APR_SUCCESS<pos:position pos:line="332" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="332" pos:column="57">ap_server_conf<pos:position pos:line="332" pos:column="71"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="333" pos:column="18">"Child %d: All worker threads have exited."<pos:position pos:line="333" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="333" pos:column="63">my_pid<pos:position pos:line="333" pos:column="69"/></name></expr></argument>)<pos:position pos:line="333" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="333" pos:column="71"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="335" pos:column="5">apr_thread_mutex_destroy<pos:position pos:line="335" pos:column="29"/></name><argument_list pos:line="335" pos:column="29">(<argument><expr><name pos:line="335" pos:column="30">child_lock<pos:position pos:line="335" pos:column="40"/></name></expr></argument>)<pos:position pos:line="335" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="336" pos:column="5">apr_thread_mutex_destroy<pos:position pos:line="336" pos:column="29"/></name><argument_list pos:line="336" pos:column="29">(<argument><expr><name pos:line="336" pos:column="30">qlock<pos:position pos:line="336" pos:column="35"/></name></expr></argument>)<pos:position pos:line="336" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="336" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="337" pos:column="5">CloseHandle<pos:position pos:line="337" pos:column="16"/></name><argument_list pos:line="337" pos:column="16">(<argument><expr><name pos:line="337" pos:column="17">qwait_event<pos:position pos:line="337" pos:column="28"/></name></expr></argument>)<pos:position pos:line="337" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="337" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="339" pos:column="5">apr_pool_destroy<pos:position pos:line="339" pos:column="21"/></name><argument_list pos:line="339" pos:column="21">(<argument><expr><name pos:line="339" pos:column="22">pchild<pos:position pos:line="339" pos:column="28"/></name></expr></argument>)<pos:position pos:line="339" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="339" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="340" pos:column="5">CloseHandle<pos:position pos:line="340" pos:column="16"/></name><argument_list pos:line="340" pos:column="16">(<argument><expr><name pos:line="340" pos:column="17">exit_event<pos:position pos:line="340" pos:column="27"/></name></expr></argument>)<pos:position pos:line="340" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="340" pos:column="29"/></expr_stmt>
}<pos:position pos:line="341" pos:column="2"/></block></function></unit>
