<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1463_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">cleanup_cache_mem<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">void<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">sconfv<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">cache_object_t<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">obj<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">mem_cache_conf<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">co<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><operator pos:line="4" pos:column="26">(<pos:position pos:line="4" pos:column="27"/></operator><name pos:line="4" pos:column="27">mem_cache_conf<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></operator><operator pos:line="4" pos:column="42">)<pos:position pos:line="4" pos:column="43"/></operator> <name pos:line="4" pos:column="44">sconfv<pos:position pos:line="4" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="51"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">!<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">co<pos:position pos:line="6" pos:column="12"/></name></expr>)<pos:position pos:line="6" pos:column="13"/></condition><then pos:line="6" pos:column="13"> <block pos:line="6" pos:column="14">{
        <return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">APR_SUCCESS<pos:position pos:line="7" pos:column="27"/></name></expr>;<pos:position pos:line="7" pos:column="28"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name><name pos:line="9" pos:column="10">co<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">cache_cache<pos:position pos:line="9" pos:column="25"/></name></name></expr>)<pos:position pos:line="9" pos:column="26"/></condition><then pos:line="9" pos:column="26"> <block pos:line="9" pos:column="27">{
        <return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">APR_SUCCESS<pos:position pos:line="10" pos:column="27"/></name></expr>;<pos:position pos:line="10" pos:column="28"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">sconf<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">lock<pos:position pos:line="13" pos:column="20"/></name></name></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21"> <block pos:line="13" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name><name pos:line="14" pos:column="31">sconf<pos:position pos:line="14" pos:column="36"/></name><operator pos:line="14" pos:column="36">-&gt;<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="38">lock<pos:position pos:line="14" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="16" pos:column="5">obj<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <call><name pos:line="16" pos:column="11">cache_pop<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name><name pos:line="16" pos:column="21">co<pos:position pos:line="16" pos:column="23"/></name><operator pos:line="16" pos:column="23">-&gt;<pos:position pos:line="16" pos:column="28"/></operator><name pos:line="16" pos:column="25">cache_cache<pos:position pos:line="16" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
    <while pos:line="17" pos:column="5">while <condition pos:line="17" pos:column="11">(<expr><name pos:line="17" pos:column="12">obj<pos:position pos:line="17" pos:column="15"/></name></expr>)<pos:position pos:line="17" pos:column="16"/></condition> <block pos:line="17" pos:column="17">{         
    <comment type="block" pos:line="18" pos:column="5">/* Iterate over the cache and clean up each entry */</comment>  
    <comment type="block" pos:line="19" pos:column="5">/* Free the object if the recount == 0 */</comment>
<cpp:ifdef pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">ifdef<pos:position pos:line="20" pos:column="7"/></cpp:directive> <name pos:line="20" pos:column="8">USE_ATOMICS<pos:position pos:line="20" pos:column="19"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">apr_atomic_inc<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><operator pos:line="21" pos:column="24">&amp;<pos:position pos:line="21" pos:column="29"/></operator><name><name pos:line="21" pos:column="25">obj<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">-&gt;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="30">refcount<pos:position pos:line="21" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">obj<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">cleanup<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <literal type="number" pos:line="22" pos:column="24">1<pos:position pos:line="22" pos:column="25"/></literal></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><call><name pos:line="23" pos:column="14">apr_atomic_dec<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><operator pos:line="23" pos:column="29">&amp;<pos:position pos:line="23" pos:column="34"/></operator><name><name pos:line="23" pos:column="30">obj<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">-&gt;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="35">refcount<pos:position pos:line="23" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="45"/></condition><then pos:line="23" pos:column="45"> <block pos:line="23" pos:column="46">{
<cpp:else pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">else<pos:position pos:line="24" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name><name pos:line="25" pos:column="9">obj<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">cleanup<pos:position pos:line="25" pos:column="21"/></name></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <literal type="number" pos:line="25" pos:column="24">1<pos:position pos:line="25" pos:column="25"/></literal></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><name><name pos:line="26" pos:column="14">obj<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">refcount<pos:position pos:line="26" pos:column="27"/></name></name></expr>)<pos:position pos:line="26" pos:column="28"/></condition><then pos:line="26" pos:column="28"> <block pos:line="26" pos:column="29">{
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name pos:line="28" pos:column="13">cleanup_cache_object<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">obj<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="30" pos:column="9">obj<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <call><name pos:line="30" pos:column="15">cache_pop<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name><name pos:line="30" pos:column="25">co<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">-&gt;<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="29">cache_cache<pos:position pos:line="30" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="33" pos:column="5">/* Cache is empty, free the cache table */</comment>        
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">cache_free<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><name><name pos:line="34" pos:column="16">co<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">-&gt;<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="20">cache_cache<pos:position pos:line="34" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="33"/></expr_stmt>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name><name pos:line="36" pos:column="9">sconf<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">-&gt;<pos:position pos:line="36" pos:column="19"/></operator><name pos:line="36" pos:column="16">lock<pos:position pos:line="36" pos:column="20"/></name></name></expr>)<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21"> <block pos:line="36" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name><name pos:line="37" pos:column="33">sconf<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">-&gt;<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="40">lock<pos:position pos:line="37" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">APR_SUCCESS<pos:position pos:line="39" pos:column="23"/></name></expr>;<pos:position pos:line="39" pos:column="24"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></while>
<comment type="block" pos:line="41" pos:column="1">/*
 * TODO: enable directives to be overridden in various containers
 */</comment>
<function><specifier pos:line="44" pos:column="1">static<pos:position pos:line="44" pos:column="7"/></specifier> <type><name pos:line="44" pos:column="8">void<pos:position pos:line="44" pos:column="12"/></name> <modifier pos:line="44" pos:column="13">*<pos:position pos:line="44" pos:column="14"/></modifier></type><name pos:line="44" pos:column="14">create_cache_config<pos:position pos:line="44" pos:column="33"/></name><parameter_list pos:line="44" pos:column="33">(<parameter><decl><type><name pos:line="44" pos:column="34">apr_pool_t<pos:position pos:line="44" pos:column="44"/></name> <modifier pos:line="44" pos:column="45">*<pos:position pos:line="44" pos:column="46"/></modifier></type><name pos:line="44" pos:column="46">p<pos:position pos:line="44" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="44" pos:column="49">server_rec<pos:position pos:line="44" pos:column="59"/></name> <modifier pos:line="44" pos:column="60">*<pos:position pos:line="44" pos:column="61"/></modifier></type><name pos:line="44" pos:column="61">s<pos:position pos:line="44" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="44" pos:column="63"/></parameter_list>
<block pos:line="45" pos:column="1">{
    <expr_stmt><expr><name pos:line="46" pos:column="5">sconf<pos:position pos:line="46" pos:column="10"/></name> <operator pos:line="46" pos:column="11">=<pos:position pos:line="46" pos:column="12"/></operator> <call><name pos:line="46" pos:column="13">apr_pcalloc<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">p<pos:position pos:line="46" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="28">sizeof<argument_list pos:line="46" pos:column="34">(<argument><expr><name pos:line="46" pos:column="35">mem_cache_conf<pos:position pos:line="46" pos:column="49"/></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="48" pos:column="5">sconf<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">-&gt;<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="12">min_cache_object_size<pos:position pos:line="48" pos:column="33"/></name></name> <operator pos:line="48" pos:column="34">=<pos:position pos:line="48" pos:column="35"/></operator> <name pos:line="48" pos:column="36">DEFAULT_MIN_CACHE_OBJECT_SIZE<pos:position pos:line="48" pos:column="65"/></name></expr>;<pos:position pos:line="48" pos:column="66"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="49" pos:column="5">sconf<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">-&gt;<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="12">max_cache_object_size<pos:position pos:line="49" pos:column="33"/></name></name> <operator pos:line="49" pos:column="34">=<pos:position pos:line="49" pos:column="35"/></operator> <name pos:line="49" pos:column="36">DEFAULT_MAX_CACHE_OBJECT_SIZE<pos:position pos:line="49" pos:column="65"/></name></expr>;<pos:position pos:line="49" pos:column="66"/></expr_stmt>
    <comment type="block" pos:line="50" pos:column="5">/* Number of objects in the cache */</comment>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">sconf<pos:position pos:line="51" pos:column="10"/></name><operator pos:line="51" pos:column="10">-&gt;<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="12">max_object_cnt<pos:position pos:line="51" pos:column="26"/></name></name> <operator pos:line="51" pos:column="27">=<pos:position pos:line="51" pos:column="28"/></operator> <name pos:line="51" pos:column="29">DEFAULT_MAX_OBJECT_CNT<pos:position pos:line="51" pos:column="51"/></name></expr>;<pos:position pos:line="51" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="52" pos:column="5">sconf<pos:position pos:line="52" pos:column="10"/></name><operator pos:line="52" pos:column="10">-&gt;<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="12">object_cnt<pos:position pos:line="52" pos:column="22"/></name></name> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <literal type="number" pos:line="52" pos:column="25">0<pos:position pos:line="52" pos:column="26"/></literal></expr>;<pos:position pos:line="52" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="53" pos:column="5">/* Size of the cache in bytes */</comment>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">sconf<pos:position pos:line="54" pos:column="10"/></name><operator pos:line="54" pos:column="10">-&gt;<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="12">max_cache_size<pos:position pos:line="54" pos:column="26"/></name></name> <operator pos:line="54" pos:column="27">=<pos:position pos:line="54" pos:column="28"/></operator> <name pos:line="54" pos:column="29">DEFAULT_MAX_CACHE_SIZE<pos:position pos:line="54" pos:column="51"/></name></expr>;<pos:position pos:line="54" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="55" pos:column="5">sconf<pos:position pos:line="55" pos:column="10"/></name><operator pos:line="55" pos:column="10">-&gt;<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="12">cache_size<pos:position pos:line="55" pos:column="22"/></name></name> <operator pos:line="55" pos:column="23">=<pos:position pos:line="55" pos:column="24"/></operator> <literal type="number" pos:line="55" pos:column="25">0<pos:position pos:line="55" pos:column="26"/></literal></expr>;<pos:position pos:line="55" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="56" pos:column="5">sconf<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">cache_cache<pos:position pos:line="56" pos:column="23"/></name></name> <operator pos:line="56" pos:column="24">=<pos:position pos:line="56" pos:column="25"/></operator> <name pos:line="56" pos:column="26">NULL<pos:position pos:line="56" pos:column="30"/></name></expr>;<pos:position pos:line="56" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">sconf<pos:position pos:line="57" pos:column="10"/></name><operator pos:line="57" pos:column="10">-&gt;<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="12">cache_remove_algorithm<pos:position pos:line="57" pos:column="34"/></name></name> <operator pos:line="57" pos:column="35">=<pos:position pos:line="57" pos:column="36"/></operator> <name pos:line="57" pos:column="37">memcache_gdsf_algorithm<pos:position pos:line="57" pos:column="60"/></name></expr>;<pos:position pos:line="57" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">sconf<pos:position pos:line="58" pos:column="10"/></name><operator pos:line="58" pos:column="10">-&gt;<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="12">max_streaming_buffer_size<pos:position pos:line="58" pos:column="37"/></name></name> <operator pos:line="58" pos:column="38">=<pos:position pos:line="58" pos:column="39"/></operator> <name pos:line="58" pos:column="40">DEFAULT_MAX_STREAMING_BUFFER_SIZE<pos:position pos:line="58" pos:column="73"/></name></expr>;<pos:position pos:line="58" pos:column="74"/></expr_stmt>

    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">sconf<pos:position pos:line="60" pos:column="17"/></name></expr>;<pos:position pos:line="60" pos:column="18"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function>

<function><specifier pos:line="63" pos:column="1">static<pos:position pos:line="63" pos:column="7"/></specifier> <type><name pos:line="63" pos:column="8">int<pos:position pos:line="63" pos:column="11"/></name></type> <name pos:line="63" pos:column="12">create_entity<pos:position pos:line="63" pos:column="25"/></name><parameter_list pos:line="63" pos:column="25">(<parameter><decl><type><name pos:line="63" pos:column="26">cache_handle_t<pos:position pos:line="63" pos:column="40"/></name> <modifier pos:line="63" pos:column="41">*<pos:position pos:line="63" pos:column="42"/></modifier></type><name pos:line="63" pos:column="42">h<pos:position pos:line="63" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="63" pos:column="45">request_rec<pos:position pos:line="63" pos:column="56"/></name> <modifier pos:line="63" pos:column="57">*<pos:position pos:line="63" pos:column="58"/></modifier></type><name pos:line="63" pos:column="58">r<pos:position pos:line="63" pos:column="59"/></name></decl></parameter>,
                         <parameter><decl><type><specifier pos:line="64" pos:column="26">const<pos:position pos:line="64" pos:column="31"/></specifier> <name pos:line="64" pos:column="32">char<pos:position pos:line="64" pos:column="36"/></name> <modifier pos:line="64" pos:column="37">*<pos:position pos:line="64" pos:column="38"/></modifier></type><name pos:line="64" pos:column="38">type<pos:position pos:line="64" pos:column="42"/></name></decl></parameter>, 
                         <parameter><decl><type><specifier pos:line="65" pos:column="26">const<pos:position pos:line="65" pos:column="31"/></specifier> <name pos:line="65" pos:column="32">char<pos:position pos:line="65" pos:column="36"/></name> <modifier pos:line="65" pos:column="37">*<pos:position pos:line="65" pos:column="38"/></modifier></type><name pos:line="65" pos:column="38">key<pos:position pos:line="65" pos:column="41"/></name></decl></parameter>, 
                         <parameter><decl><type><name pos:line="66" pos:column="26">apr_off_t<pos:position pos:line="66" pos:column="35"/></name></type> <name pos:line="66" pos:column="36">len<pos:position pos:line="66" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="66" pos:column="40"/></parameter_list> 
<block pos:line="67" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="68" pos:column="5">cache_object_t<pos:position pos:line="68" pos:column="19"/></name> <modifier pos:line="68" pos:column="20">*<pos:position pos:line="68" pos:column="21"/></modifier></type><name pos:line="68" pos:column="21">obj<pos:position pos:line="68" pos:column="24"/></name></decl>, <modifier pos:line="68" pos:column="26">*<pos:position pos:line="68" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="68" pos:column="27">tmp_obj<pos:position pos:line="68" pos:column="34"/></name></decl>;<pos:position pos:line="68" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="69" pos:column="5">mem_cache_object_t<pos:position pos:line="69" pos:column="23"/></name> <modifier pos:line="69" pos:column="24">*<pos:position pos:line="69" pos:column="25"/></modifier></type><name pos:line="69" pos:column="25">mobj<pos:position pos:line="69" pos:column="29"/></name></decl>;<pos:position pos:line="69" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="70" pos:column="5">cache_type_e<pos:position pos:line="70" pos:column="17"/></name></type> <name pos:line="70" pos:column="18">type_e<pos:position pos:line="70" pos:column="24"/></name></decl>;<pos:position pos:line="70" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="71" pos:column="5">apr_size_t<pos:position pos:line="71" pos:column="15"/></name></type> <name pos:line="71" pos:column="16">key_len<pos:position pos:line="71" pos:column="23"/></name></decl>;<pos:position pos:line="71" pos:column="24"/></decl_stmt>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><operator pos:line="73" pos:column="9">!<pos:position pos:line="73" pos:column="10"/></operator><call><name pos:line="73" pos:column="10">strcasecmp<pos:position pos:line="73" pos:column="20"/></name><argument_list pos:line="73" pos:column="20">(<argument><expr><name pos:line="73" pos:column="21">type<pos:position pos:line="73" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="27">"mem"<pos:position pos:line="73" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="34"/></condition><then pos:line="73" pos:column="34"> <block pos:line="73" pos:column="35">{
        <expr_stmt><expr><name pos:line="74" pos:column="9">type_e<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">=<pos:position pos:line="74" pos:column="17"/></operator> <name pos:line="74" pos:column="18">CACHE_TYPE_HEAP<pos:position pos:line="74" pos:column="33"/></name></expr>;<pos:position pos:line="74" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="75" pos:column="6"/></block></then> 
    <elseif pos:line="76" pos:column="5">else <if pos:line="76" pos:column="10">if <condition pos:line="76" pos:column="13">(<expr><operator pos:line="76" pos:column="14">!<pos:position pos:line="76" pos:column="15"/></operator><call><name pos:line="76" pos:column="15">strcasecmp<pos:position pos:line="76" pos:column="25"/></name><argument_list pos:line="76" pos:column="25">(<argument><expr><name pos:line="76" pos:column="26">type<pos:position pos:line="76" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="32">"fd"<pos:position pos:line="76" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="38"/></condition><then pos:line="76" pos:column="38"> <block pos:line="76" pos:column="39">{
        <expr_stmt><expr><name pos:line="77" pos:column="9">type_e<pos:position pos:line="77" pos:column="15"/></name> <operator pos:line="77" pos:column="16">=<pos:position pos:line="77" pos:column="17"/></operator> <name pos:line="77" pos:column="18">CACHE_TYPE_FILE<pos:position pos:line="77" pos:column="33"/></name></expr>;<pos:position pos:line="77" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if></elseif>
    <else pos:line="79" pos:column="5">else <block pos:line="79" pos:column="10">{
        <return pos:line="80" pos:column="9">return <expr><name pos:line="80" pos:column="16">DECLINED<pos:position pos:line="80" pos:column="24"/></name></expr>;<pos:position pos:line="80" pos:column="25"/></return>
    }<pos:position pos:line="81" pos:column="6"/></block></else></if>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name pos:line="83" pos:column="9">len<pos:position pos:line="83" pos:column="12"/></name> <operator pos:line="83" pos:column="13">==<pos:position pos:line="83" pos:column="15"/></operator> <operator pos:line="83" pos:column="16">-<pos:position pos:line="83" pos:column="17"/></operator><literal type="number" pos:line="83" pos:column="17">1<pos:position pos:line="83" pos:column="18"/></literal></expr>)<pos:position pos:line="83" pos:column="19"/></condition><then pos:line="83" pos:column="19"> <block pos:line="83" pos:column="20">{
        <comment type="block" pos:line="84" pos:column="9">/* Caching a streaming response. Assume the response is
         * less than or equal to max_streaming_buffer_size. We will
         * correct all the cache size counters in write_body once
         * we know exactly know how much we are caching.
         */</comment>
        <expr_stmt><expr><name pos:line="89" pos:column="9">len<pos:position pos:line="89" pos:column="12"/></name> <operator pos:line="89" pos:column="13">=<pos:position pos:line="89" pos:column="14"/></operator> <name><name pos:line="89" pos:column="15">sconf<pos:position pos:line="89" pos:column="20"/></name><operator pos:line="89" pos:column="20">-&gt;<pos:position pos:line="89" pos:column="25"/></operator><name pos:line="89" pos:column="22">max_streaming_buffer_size<pos:position pos:line="89" pos:column="47"/></name></name></expr>;<pos:position pos:line="89" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="92" pos:column="5">/* Note: cache_insert() will automatically garbage collect 
     * objects from the cache if the max_cache_size threshold is
     * exceeded. This means mod_mem_cache does not need to implement
     * max_cache_size checks.
     */</comment>
    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><name><name pos:line="97" pos:column="9">len<pos:position pos:line="97" pos:column="12"/></name> <argument_list type="generic" pos:line="97" pos:column="13">&lt; <argument><expr><name><name pos:line="97" pos:column="15">sconf<pos:position pos:line="97" pos:column="20"/></name><operator pos:line="97" pos:column="20">-&gt;<pos:position pos:line="97" pos:column="25"/></operator><name pos:line="97" pos:column="22">min_cache_object_size<pos:position pos:line="97" pos:column="43"/></name></name> <operator pos:line="97" pos:column="44">||<pos:position pos:line="97" pos:column="46"/></operator> 
        <name pos:line="98" pos:column="9">len<pos:position pos:line="98" pos:column="12"/></name></expr></argument> &gt;<pos:position pos:line="98" pos:column="17"/></argument_list></name> <name><name pos:line="98" pos:column="15">sconf<pos:position pos:line="98" pos:column="20"/></name><operator pos:line="98" pos:column="20">-&gt;<pos:position pos:line="98" pos:column="25"/></operator><name pos:line="98" pos:column="22">max_cache_object_size<pos:position pos:line="98" pos:column="43"/></name></name></expr>)<pos:position pos:line="98" pos:column="44"/></condition><then pos:line="98" pos:column="44"> <block pos:line="98" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="99" pos:column="9">ap_log_error<pos:position pos:line="99" pos:column="21"/></name><argument_list pos:line="99" pos:column="21">(<argument><expr><name pos:line="99" pos:column="22">APLOG_MARK<pos:position pos:line="99" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="34">APLOG_DEBUG<pos:position pos:line="99" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="47">0<pos:position pos:line="99" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="50">r<pos:position pos:line="99" pos:column="51"/></name><operator pos:line="99" pos:column="51">-&gt;<pos:position pos:line="99" pos:column="56"/></operator><name pos:line="99" pos:column="53">server<pos:position pos:line="99" pos:column="59"/></name></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="100" pos:column="22">"mem_cache: URL %s failed the size check and will not be cached."<pos:position pos:line="100" pos:column="87"/></literal></expr></argument>,
                     <argument><expr><name pos:line="101" pos:column="22">key<pos:position pos:line="101" pos:column="25"/></name></expr></argument>)<pos:position pos:line="101" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="27"/></expr_stmt>
        <return pos:line="102" pos:column="9">return <expr><name pos:line="102" pos:column="16">DECLINED<pos:position pos:line="102" pos:column="24"/></name></expr>;<pos:position pos:line="102" pos:column="25"/></return>
    }<pos:position pos:line="103" pos:column="6"/></block></then></if>

    <if pos:line="105" pos:column="5">if <condition pos:line="105" pos:column="8">(<expr><name pos:line="105" pos:column="9">type_e<pos:position pos:line="105" pos:column="15"/></name> <operator pos:line="105" pos:column="16">==<pos:position pos:line="105" pos:column="18"/></operator> <name pos:line="105" pos:column="19">CACHE_TYPE_FILE<pos:position pos:line="105" pos:column="34"/></name></expr>)<pos:position pos:line="105" pos:column="35"/></condition><then pos:line="105" pos:column="35"> <block pos:line="105" pos:column="36">{
        <comment type="block" pos:line="106" pos:column="9">/* CACHE_TYPE_FILE is only valid for local content handled by the 
         * default handler. Need a better way to check if the file is
         * local or not.
         */</comment>
        <if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><operator pos:line="110" pos:column="13">!<pos:position pos:line="110" pos:column="14"/></operator><name><name pos:line="110" pos:column="14">r<pos:position pos:line="110" pos:column="15"/></name><operator pos:line="110" pos:column="15">-&gt;<pos:position pos:line="110" pos:column="20"/></operator><name pos:line="110" pos:column="17">filename<pos:position pos:line="110" pos:column="25"/></name></name></expr>)<pos:position pos:line="110" pos:column="26"/></condition><then pos:line="110" pos:column="26"> <block pos:line="110" pos:column="27">{
            <return pos:line="111" pos:column="13">return <expr><name pos:line="111" pos:column="20">DECLINED<pos:position pos:line="111" pos:column="28"/></name></expr>;<pos:position pos:line="111" pos:column="29"/></return>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if>
    }<pos:position pos:line="113" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="115" pos:column="5">/* Allocate and initialize cache_object_t */</comment>
    <expr_stmt><expr><name pos:line="116" pos:column="5">obj<pos:position pos:line="116" pos:column="8"/></name> <operator pos:line="116" pos:column="9">=<pos:position pos:line="116" pos:column="10"/></operator> <call><name pos:line="116" pos:column="11">calloc<pos:position pos:line="116" pos:column="17"/></name><argument_list pos:line="116" pos:column="17">(<argument><expr><literal type="number" pos:line="116" pos:column="18">1<pos:position pos:line="116" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="116" pos:column="21">sizeof<argument_list pos:line="116" pos:column="27">(<argument><expr><operator pos:line="116" pos:column="28">*<pos:position pos:line="116" pos:column="29"/></operator><name pos:line="116" pos:column="29">obj<pos:position pos:line="116" pos:column="32"/></name></expr></argument>)<pos:position pos:line="116" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="116" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="35"/></expr_stmt>
    <if pos:line="117" pos:column="5">if <condition pos:line="117" pos:column="8">(<expr><operator pos:line="117" pos:column="9">!<pos:position pos:line="117" pos:column="10"/></operator><name pos:line="117" pos:column="10">obj<pos:position pos:line="117" pos:column="13"/></name></expr>)<pos:position pos:line="117" pos:column="14"/></condition><then pos:line="117" pos:column="14"> <block pos:line="117" pos:column="15">{
        <return pos:line="118" pos:column="9">return <expr><name pos:line="118" pos:column="16">DECLINED<pos:position pos:line="118" pos:column="24"/></name></expr>;<pos:position pos:line="118" pos:column="25"/></return>
    }<pos:position pos:line="119" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="120" pos:column="5">key_len<pos:position pos:line="120" pos:column="12"/></name> <operator pos:line="120" pos:column="13">=<pos:position pos:line="120" pos:column="14"/></operator> <call><name pos:line="120" pos:column="15">strlen<pos:position pos:line="120" pos:column="21"/></name><argument_list pos:line="120" pos:column="21">(<argument><expr><name pos:line="120" pos:column="22">key<pos:position pos:line="120" pos:column="25"/></name></expr></argument>)<pos:position pos:line="120" pos:column="26"/></argument_list></call> <operator pos:line="120" pos:column="27">+<pos:position pos:line="120" pos:column="28"/></operator> <literal type="number" pos:line="120" pos:column="29">1<pos:position pos:line="120" pos:column="30"/></literal></expr>;<pos:position pos:line="120" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="121" pos:column="5">obj<pos:position pos:line="121" pos:column="8"/></name><operator pos:line="121" pos:column="8">-&gt;<pos:position pos:line="121" pos:column="13"/></operator><name pos:line="121" pos:column="10">key<pos:position pos:line="121" pos:column="13"/></name></name> <operator pos:line="121" pos:column="14">=<pos:position pos:line="121" pos:column="15"/></operator> <call><name pos:line="121" pos:column="16">malloc<pos:position pos:line="121" pos:column="22"/></name><argument_list pos:line="121" pos:column="22">(<argument><expr><name pos:line="121" pos:column="23">key_len<pos:position pos:line="121" pos:column="30"/></name></expr></argument>)<pos:position pos:line="121" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="32"/></expr_stmt>
    <if pos:line="122" pos:column="5">if <condition pos:line="122" pos:column="8">(<expr><operator pos:line="122" pos:column="9">!<pos:position pos:line="122" pos:column="10"/></operator><name><name pos:line="122" pos:column="10">obj<pos:position pos:line="122" pos:column="13"/></name><operator pos:line="122" pos:column="13">-&gt;<pos:position pos:line="122" pos:column="18"/></operator><name pos:line="122" pos:column="15">key<pos:position pos:line="122" pos:column="18"/></name></name></expr>)<pos:position pos:line="122" pos:column="19"/></condition><then pos:line="122" pos:column="19"> <block pos:line="122" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">cleanup_cache_object<pos:position pos:line="123" pos:column="29"/></name><argument_list pos:line="123" pos:column="29">(<argument><expr><name pos:line="123" pos:column="30">obj<pos:position pos:line="123" pos:column="33"/></name></expr></argument>)<pos:position pos:line="123" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="35"/></expr_stmt>
        <return pos:line="124" pos:column="9">return <expr><name pos:line="124" pos:column="16">DECLINED<pos:position pos:line="124" pos:column="24"/></name></expr>;<pos:position pos:line="124" pos:column="25"/></return>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">memcpy<pos:position pos:line="126" pos:column="11"/></name><argument_list pos:line="126" pos:column="11">(<argument><expr><name><name pos:line="126" pos:column="12">obj<pos:position pos:line="126" pos:column="15"/></name><operator pos:line="126" pos:column="15">-&gt;<pos:position pos:line="126" pos:column="20"/></operator><name pos:line="126" pos:column="17">key<pos:position pos:line="126" pos:column="20"/></name></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="22">key<pos:position pos:line="126" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="27">key_len<pos:position pos:line="126" pos:column="34"/></name></expr></argument>)<pos:position pos:line="126" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="36"/></expr_stmt>
    <comment type="block" pos:line="127" pos:column="5">/* Safe cast: We tested &lt; sconf-&gt;max_cache_object_size above */</comment>
    <expr_stmt><expr><name><name pos:line="128" pos:column="5">obj<pos:position pos:line="128" pos:column="8"/></name><operator pos:line="128" pos:column="8">-&gt;<pos:position pos:line="128" pos:column="13"/></operator><name pos:line="128" pos:column="10">info<pos:position pos:line="128" pos:column="14"/></name><operator pos:line="128" pos:column="14">.<pos:position pos:line="128" pos:column="15"/></operator><name pos:line="128" pos:column="15">len<pos:position pos:line="128" pos:column="18"/></name></name> <operator pos:line="128" pos:column="19">=<pos:position pos:line="128" pos:column="20"/></operator> <operator pos:line="128" pos:column="21">(<pos:position pos:line="128" pos:column="22"/></operator><name pos:line="128" pos:column="22">apr_size_t<pos:position pos:line="128" pos:column="32"/></name><operator pos:line="128" pos:column="32">)<pos:position pos:line="128" pos:column="33"/></operator><name pos:line="128" pos:column="33">len<pos:position pos:line="128" pos:column="36"/></name></expr>;<pos:position pos:line="128" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="130" pos:column="5">/* Allocate and init mem_cache_object_t */</comment>
    <expr_stmt><expr><name pos:line="131" pos:column="5">mobj<pos:position pos:line="131" pos:column="9"/></name> <operator pos:line="131" pos:column="10">=<pos:position pos:line="131" pos:column="11"/></operator> <call><name pos:line="131" pos:column="12">calloc<pos:position pos:line="131" pos:column="18"/></name><argument_list pos:line="131" pos:column="18">(<argument><expr><literal type="number" pos:line="131" pos:column="19">1<pos:position pos:line="131" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="131" pos:column="22">sizeof<argument_list pos:line="131" pos:column="28">(<argument><expr><operator pos:line="131" pos:column="29">*<pos:position pos:line="131" pos:column="30"/></operator><name pos:line="131" pos:column="30">mobj<pos:position pos:line="131" pos:column="34"/></name></expr></argument>)<pos:position pos:line="131" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="131" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="37"/></expr_stmt>
    <if pos:line="132" pos:column="5">if <condition pos:line="132" pos:column="8">(<expr><operator pos:line="132" pos:column="9">!<pos:position pos:line="132" pos:column="10"/></operator><name pos:line="132" pos:column="10">mobj<pos:position pos:line="132" pos:column="14"/></name></expr>)<pos:position pos:line="132" pos:column="15"/></condition><then pos:line="132" pos:column="15"> <block pos:line="132" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="133" pos:column="9">cleanup_cache_object<pos:position pos:line="133" pos:column="29"/></name><argument_list pos:line="133" pos:column="29">(<argument><expr><name pos:line="133" pos:column="30">obj<pos:position pos:line="133" pos:column="33"/></name></expr></argument>)<pos:position pos:line="133" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="35"/></expr_stmt>
        <return pos:line="134" pos:column="9">return <expr><name pos:line="134" pos:column="16">DECLINED<pos:position pos:line="134" pos:column="24"/></name></expr>;<pos:position pos:line="134" pos:column="25"/></return>
    }<pos:position pos:line="135" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="137" pos:column="5">/* Finish initing the cache object */</comment>
<cpp:ifdef pos:line="138" pos:column="1">#<cpp:directive pos:line="138" pos:column="2">ifdef<pos:position pos:line="138" pos:column="7"/></cpp:directive> <name pos:line="138" pos:column="8">USE_ATOMICS<pos:position pos:line="138" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="139" pos:column="5">apr_atomic_set<pos:position pos:line="139" pos:column="19"/></name><argument_list pos:line="139" pos:column="19">(<argument><expr><operator pos:line="139" pos:column="20">&amp;<pos:position pos:line="139" pos:column="25"/></operator><name><name pos:line="139" pos:column="21">obj<pos:position pos:line="139" pos:column="24"/></name><operator pos:line="139" pos:column="24">-&gt;<pos:position pos:line="139" pos:column="29"/></operator><name pos:line="139" pos:column="26">refcount<pos:position pos:line="139" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="139" pos:column="36">1<pos:position pos:line="139" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="39"/></expr_stmt>
<cpp:else pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">else<pos:position pos:line="140" pos:column="6"/></cpp:directive></cpp:else> 
    <expr_stmt><expr><name><name pos:line="141" pos:column="5">obj<pos:position pos:line="141" pos:column="8"/></name><operator pos:line="141" pos:column="8">-&gt;<pos:position pos:line="141" pos:column="13"/></operator><name pos:line="141" pos:column="10">refcount<pos:position pos:line="141" pos:column="18"/></name></name> <operator pos:line="141" pos:column="19">=<pos:position pos:line="141" pos:column="20"/></operator> <literal type="number" pos:line="141" pos:column="21">1<pos:position pos:line="141" pos:column="22"/></literal></expr>;<pos:position pos:line="141" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">endif<pos:position pos:line="142" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name pos:line="143" pos:column="5">mobj<pos:position pos:line="143" pos:column="9"/></name><operator pos:line="143" pos:column="9">-&gt;<pos:position pos:line="143" pos:column="14"/></operator><name pos:line="143" pos:column="11">total_refs<pos:position pos:line="143" pos:column="21"/></name></name> <operator pos:line="143" pos:column="22">=<pos:position pos:line="143" pos:column="23"/></operator> <literal type="number" pos:line="143" pos:column="24">1<pos:position pos:line="143" pos:column="25"/></literal></expr>;<pos:position pos:line="143" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="144" pos:column="5">obj<pos:position pos:line="144" pos:column="8"/></name><operator pos:line="144" pos:column="8">-&gt;<pos:position pos:line="144" pos:column="13"/></operator><name pos:line="144" pos:column="10">complete<pos:position pos:line="144" pos:column="18"/></name></name> <operator pos:line="144" pos:column="19">=<pos:position pos:line="144" pos:column="20"/></operator> <literal type="number" pos:line="144" pos:column="21">0<pos:position pos:line="144" pos:column="22"/></literal></expr>;<pos:position pos:line="144" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="145" pos:column="5">obj<pos:position pos:line="145" pos:column="8"/></name><operator pos:line="145" pos:column="8">-&gt;<pos:position pos:line="145" pos:column="13"/></operator><name pos:line="145" pos:column="10">cleanup<pos:position pos:line="145" pos:column="17"/></name></name> <operator pos:line="145" pos:column="18">=<pos:position pos:line="145" pos:column="19"/></operator> <literal type="number" pos:line="145" pos:column="20">0<pos:position pos:line="145" pos:column="21"/></literal></expr>;<pos:position pos:line="145" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="146" pos:column="5">obj<pos:position pos:line="146" pos:column="8"/></name><operator pos:line="146" pos:column="8">-&gt;<pos:position pos:line="146" pos:column="13"/></operator><name pos:line="146" pos:column="10">vobj<pos:position pos:line="146" pos:column="14"/></name></name> <operator pos:line="146" pos:column="15">=<pos:position pos:line="146" pos:column="16"/></operator> <name pos:line="146" pos:column="17">mobj<pos:position pos:line="146" pos:column="21"/></name></expr>;<pos:position pos:line="146" pos:column="22"/></expr_stmt>
    <comment type="block" pos:line="147" pos:column="5">/* Safe cast: We tested &lt; sconf-&gt;max_cache_object_size above */</comment>
    <expr_stmt><expr><name><name pos:line="148" pos:column="5">mobj<pos:position pos:line="148" pos:column="9"/></name><operator pos:line="148" pos:column="9">-&gt;<pos:position pos:line="148" pos:column="14"/></operator><name pos:line="148" pos:column="11">m_len<pos:position pos:line="148" pos:column="16"/></name></name> <operator pos:line="148" pos:column="17">=<pos:position pos:line="148" pos:column="18"/></operator> <operator pos:line="148" pos:column="19">(<pos:position pos:line="148" pos:column="20"/></operator><name pos:line="148" pos:column="20">apr_size_t<pos:position pos:line="148" pos:column="30"/></name><operator pos:line="148" pos:column="30">)<pos:position pos:line="148" pos:column="31"/></operator><name pos:line="148" pos:column="31">len<pos:position pos:line="148" pos:column="34"/></name></expr>;<pos:position pos:line="148" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="149" pos:column="5">mobj<pos:position pos:line="149" pos:column="9"/></name><operator pos:line="149" pos:column="9">-&gt;<pos:position pos:line="149" pos:column="14"/></operator><name pos:line="149" pos:column="11">type<pos:position pos:line="149" pos:column="15"/></name></name> <operator pos:line="149" pos:column="16">=<pos:position pos:line="149" pos:column="17"/></operator> <name pos:line="149" pos:column="18">type_e<pos:position pos:line="149" pos:column="24"/></name></expr>;<pos:position pos:line="149" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="151" pos:column="5">/* Place the cache_object_t into the hash table.
     * Note: Perhaps we should wait to put the object in the
     * hash table when the object is complete?  I add the object here to
     * avoid multiple threads attempting to cache the same content only
     * to discover at the very end that only one of them will suceed.
     * Furthermore, adding the cache object to the table at the end could
     * open up a subtle but easy to exploit DoS hole: someone could request 
     * a very large file with multiple requests. Better to detect this here
     * rather than after the cache object has been completely built and
     * initialized...
     * XXX Need a way to insert into the cache w/o such coarse grained locking 
     */</comment>
    <if pos:line="163" pos:column="5">if <condition pos:line="163" pos:column="8">(<expr><name><name pos:line="163" pos:column="9">sconf<pos:position pos:line="163" pos:column="14"/></name><operator pos:line="163" pos:column="14">-&gt;<pos:position pos:line="163" pos:column="19"/></operator><name pos:line="163" pos:column="16">lock<pos:position pos:line="163" pos:column="20"/></name></name></expr>)<pos:position pos:line="163" pos:column="21"/></condition><then pos:line="163" pos:column="21"> <block pos:line="163" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="164" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="164" pos:column="30"/></name><argument_list pos:line="164" pos:column="30">(<argument><expr><name><name pos:line="164" pos:column="31">sconf<pos:position pos:line="164" pos:column="36"/></name><operator pos:line="164" pos:column="36">-&gt;<pos:position pos:line="164" pos:column="41"/></operator><name pos:line="164" pos:column="38">lock<pos:position pos:line="164" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="164" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="165" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="166" pos:column="5">tmp_obj<pos:position pos:line="166" pos:column="12"/></name> <operator pos:line="166" pos:column="13">=<pos:position pos:line="166" pos:column="14"/></operator> <operator pos:line="166" pos:column="15">(<pos:position pos:line="166" pos:column="16"/></operator><name pos:line="166" pos:column="16">cache_object_t<pos:position pos:line="166" pos:column="30"/></name> <operator pos:line="166" pos:column="31">*<pos:position pos:line="166" pos:column="32"/></operator><operator pos:line="166" pos:column="32">)<pos:position pos:line="166" pos:column="33"/></operator> <call><name pos:line="166" pos:column="34">cache_find<pos:position pos:line="166" pos:column="44"/></name><argument_list pos:line="166" pos:column="44">(<argument><expr><name><name pos:line="166" pos:column="45">sconf<pos:position pos:line="166" pos:column="50"/></name><operator pos:line="166" pos:column="50">-&gt;<pos:position pos:line="166" pos:column="55"/></operator><name pos:line="166" pos:column="52">cache_cache<pos:position pos:line="166" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="166" pos:column="65">key<pos:position pos:line="166" pos:column="68"/></name></expr></argument>)<pos:position pos:line="166" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="70"/></expr_stmt>

    <if pos:line="168" pos:column="5">if <condition pos:line="168" pos:column="8">(<expr><operator pos:line="168" pos:column="9">!<pos:position pos:line="168" pos:column="10"/></operator><name pos:line="168" pos:column="10">tmp_obj<pos:position pos:line="168" pos:column="17"/></name></expr>)<pos:position pos:line="168" pos:column="18"/></condition><then pos:line="168" pos:column="18"> <block pos:line="168" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="169" pos:column="9">cache_insert<pos:position pos:line="169" pos:column="21"/></name><argument_list pos:line="169" pos:column="21">(<argument><expr><name><name pos:line="169" pos:column="22">sconf<pos:position pos:line="169" pos:column="27"/></name><operator pos:line="169" pos:column="27">-&gt;<pos:position pos:line="169" pos:column="32"/></operator><name pos:line="169" pos:column="29">cache_cache<pos:position pos:line="169" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="42">obj<pos:position pos:line="169" pos:column="45"/></name></expr></argument>)<pos:position pos:line="169" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="47"/></expr_stmt>     
        <expr_stmt><expr><name><name pos:line="170" pos:column="9">sconf<pos:position pos:line="170" pos:column="14"/></name><operator pos:line="170" pos:column="14">-&gt;<pos:position pos:line="170" pos:column="19"/></operator><name pos:line="170" pos:column="16">object_cnt<pos:position pos:line="170" pos:column="26"/></name></name><operator pos:line="170" pos:column="26">++<pos:position pos:line="170" pos:column="28"/></operator></expr>;<pos:position pos:line="170" pos:column="29"/></expr_stmt>
        <comment type="block" pos:line="171" pos:column="9">/* Safe cast: Must fit in cache_size or alloc would have failed */</comment>
        <expr_stmt><expr><name><name pos:line="172" pos:column="9">sconf<pos:position pos:line="172" pos:column="14"/></name><operator pos:line="172" pos:column="14">-&gt;<pos:position pos:line="172" pos:column="19"/></operator><name pos:line="172" pos:column="16">cache_size<pos:position pos:line="172" pos:column="26"/></name></name> <operator pos:line="172" pos:column="27">+=<pos:position pos:line="172" pos:column="29"/></operator> <operator pos:line="172" pos:column="30">(<pos:position pos:line="172" pos:column="31"/></operator><name pos:line="172" pos:column="31">apr_size_t<pos:position pos:line="172" pos:column="41"/></name><operator pos:line="172" pos:column="41">)<pos:position pos:line="172" pos:column="42"/></operator><name pos:line="172" pos:column="42">len<pos:position pos:line="172" pos:column="45"/></name></expr>;<pos:position pos:line="172" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="173" pos:column="6"/></block></then></if>
    <if pos:line="174" pos:column="5">if <condition pos:line="174" pos:column="8">(<expr><name><name pos:line="174" pos:column="9">sconf<pos:position pos:line="174" pos:column="14"/></name><operator pos:line="174" pos:column="14">-&gt;<pos:position pos:line="174" pos:column="19"/></operator><name pos:line="174" pos:column="16">lock<pos:position pos:line="174" pos:column="20"/></name></name></expr>)<pos:position pos:line="174" pos:column="21"/></condition><then pos:line="174" pos:column="21"> <block pos:line="174" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="175" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="175" pos:column="32"/></name><argument_list pos:line="175" pos:column="32">(<argument><expr><name><name pos:line="175" pos:column="33">sconf<pos:position pos:line="175" pos:column="38"/></name><operator pos:line="175" pos:column="38">-&gt;<pos:position pos:line="175" pos:column="43"/></operator><name pos:line="175" pos:column="40">lock<pos:position pos:line="175" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="175" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="176" pos:column="6"/></block></then></if>

    <if pos:line="178" pos:column="5">if <condition pos:line="178" pos:column="8">(<expr><name pos:line="178" pos:column="9">tmp_obj<pos:position pos:line="178" pos:column="16"/></name></expr>)<pos:position pos:line="178" pos:column="17"/></condition><then pos:line="178" pos:column="17"> <block pos:line="178" pos:column="18">{
        <comment type="block" pos:line="179" pos:column="9">/* This thread collided with another thread loading the same object
         * into the cache at the same time. Defer to the other thread which 
         * is further along.
         */</comment>
        <expr_stmt><expr><call><name pos:line="183" pos:column="9">cleanup_cache_object<pos:position pos:line="183" pos:column="29"/></name><argument_list pos:line="183" pos:column="29">(<argument><expr><name pos:line="183" pos:column="30">obj<pos:position pos:line="183" pos:column="33"/></name></expr></argument>)<pos:position pos:line="183" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="183" pos:column="35"/></expr_stmt>
        <return pos:line="184" pos:column="9">return <expr><name pos:line="184" pos:column="16">DECLINED<pos:position pos:line="184" pos:column="24"/></name></expr>;<pos:position pos:line="184" pos:column="25"/></return>
    }<pos:position pos:line="185" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="187" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="187" pos:column="30"/></name><argument_list pos:line="187" pos:column="30">(<argument><expr><name><name pos:line="187" pos:column="31">r<pos:position pos:line="187" pos:column="32"/></name><operator pos:line="187" pos:column="32">-&gt;<pos:position pos:line="187" pos:column="37"/></operator><name pos:line="187" pos:column="34">pool<pos:position pos:line="187" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="40">obj<pos:position pos:line="187" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="45">decrement_refcount<pos:position pos:line="187" pos:column="63"/></name></expr></argument>, 
                              <argument><expr><name pos:line="188" pos:column="31">apr_pool_cleanup_null<pos:position pos:line="188" pos:column="52"/></name></expr></argument>)<pos:position pos:line="188" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="54"/></expr_stmt>

    <comment type="block" pos:line="190" pos:column="5">/* Populate the cache handle */</comment>
    <expr_stmt><expr><name><name pos:line="191" pos:column="5">h<pos:position pos:line="191" pos:column="6"/></name><operator pos:line="191" pos:column="6">-&gt;<pos:position pos:line="191" pos:column="11"/></operator><name pos:line="191" pos:column="8">cache_obj<pos:position pos:line="191" pos:column="17"/></name></name> <operator pos:line="191" pos:column="18">=<pos:position pos:line="191" pos:column="19"/></operator> <name pos:line="191" pos:column="20">obj<pos:position pos:line="191" pos:column="23"/></name></expr>;<pos:position pos:line="191" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="192" pos:column="5">h<pos:position pos:line="192" pos:column="6"/></name><operator pos:line="192" pos:column="6">-&gt;<pos:position pos:line="192" pos:column="11"/></operator><name pos:line="192" pos:column="8">read_body<pos:position pos:line="192" pos:column="17"/></name></name> <operator pos:line="192" pos:column="18">=<pos:position pos:line="192" pos:column="19"/></operator> <operator pos:line="192" pos:column="20">&amp;<pos:position pos:line="192" pos:column="25"/></operator><name pos:line="192" pos:column="21">read_body<pos:position pos:line="192" pos:column="30"/></name></expr>;<pos:position pos:line="192" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="193" pos:column="5">h<pos:position pos:line="193" pos:column="6"/></name><operator pos:line="193" pos:column="6">-&gt;<pos:position pos:line="193" pos:column="11"/></operator><name pos:line="193" pos:column="8">read_headers<pos:position pos:line="193" pos:column="20"/></name></name> <operator pos:line="193" pos:column="21">=<pos:position pos:line="193" pos:column="22"/></operator> <operator pos:line="193" pos:column="23">&amp;<pos:position pos:line="193" pos:column="28"/></operator><name pos:line="193" pos:column="24">read_headers<pos:position pos:line="193" pos:column="36"/></name></expr>;<pos:position pos:line="193" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="194" pos:column="5">h<pos:position pos:line="194" pos:column="6"/></name><operator pos:line="194" pos:column="6">-&gt;<pos:position pos:line="194" pos:column="11"/></operator><name pos:line="194" pos:column="8">write_body<pos:position pos:line="194" pos:column="18"/></name></name> <operator pos:line="194" pos:column="19">=<pos:position pos:line="194" pos:column="20"/></operator> <operator pos:line="194" pos:column="21">&amp;<pos:position pos:line="194" pos:column="26"/></operator><name pos:line="194" pos:column="22">write_body<pos:position pos:line="194" pos:column="32"/></name></expr>;<pos:position pos:line="194" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="195" pos:column="5">h<pos:position pos:line="195" pos:column="6"/></name><operator pos:line="195" pos:column="6">-&gt;<pos:position pos:line="195" pos:column="11"/></operator><name pos:line="195" pos:column="8">write_headers<pos:position pos:line="195" pos:column="21"/></name></name> <operator pos:line="195" pos:column="22">=<pos:position pos:line="195" pos:column="23"/></operator> <operator pos:line="195" pos:column="24">&amp;<pos:position pos:line="195" pos:column="29"/></operator><name pos:line="195" pos:column="25">write_headers<pos:position pos:line="195" pos:column="38"/></name></expr>;<pos:position pos:line="195" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="196" pos:column="5">h<pos:position pos:line="196" pos:column="6"/></name><operator pos:line="196" pos:column="6">-&gt;<pos:position pos:line="196" pos:column="11"/></operator><name pos:line="196" pos:column="8">remove_entity<pos:position pos:line="196" pos:column="21"/></name></name> <operator pos:line="196" pos:column="22">=<pos:position pos:line="196" pos:column="23"/></operator> <operator pos:line="196" pos:column="24">&amp;<pos:position pos:line="196" pos:column="29"/></operator><name pos:line="196" pos:column="25">remove_entity<pos:position pos:line="196" pos:column="38"/></name></expr>;<pos:position pos:line="196" pos:column="39"/></expr_stmt>

    <return pos:line="198" pos:column="5">return <expr><name pos:line="198" pos:column="12">OK<pos:position pos:line="198" pos:column="14"/></name></expr>;<pos:position pos:line="198" pos:column="15"/></return>
}<pos:position pos:line="199" pos:column="2"/></block></function>

<function><specifier pos:line="201" pos:column="1">static<pos:position pos:line="201" pos:column="7"/></specifier> <type><name pos:line="201" pos:column="8">int<pos:position pos:line="201" pos:column="11"/></name></type> <name pos:line="201" pos:column="12">open_entity<pos:position pos:line="201" pos:column="23"/></name><parameter_list pos:line="201" pos:column="23">(<parameter><decl><type><name pos:line="201" pos:column="24">cache_handle_t<pos:position pos:line="201" pos:column="38"/></name> <modifier pos:line="201" pos:column="39">*<pos:position pos:line="201" pos:column="40"/></modifier></type><name pos:line="201" pos:column="40">h<pos:position pos:line="201" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="201" pos:column="43">request_rec<pos:position pos:line="201" pos:column="54"/></name> <modifier pos:line="201" pos:column="55">*<pos:position pos:line="201" pos:column="56"/></modifier></type><name pos:line="201" pos:column="56">r<pos:position pos:line="201" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="201" pos:column="59">const<pos:position pos:line="201" pos:column="64"/></specifier> <name pos:line="201" pos:column="65">char<pos:position pos:line="201" pos:column="69"/></name> <modifier pos:line="201" pos:column="70">*<pos:position pos:line="201" pos:column="71"/></modifier></type><name pos:line="201" pos:column="71">type<pos:position pos:line="201" pos:column="75"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="201" pos:column="77">const<pos:position pos:line="201" pos:column="82"/></specifier> <name pos:line="201" pos:column="83">char<pos:position pos:line="201" pos:column="87"/></name> <modifier pos:line="201" pos:column="88">*<pos:position pos:line="201" pos:column="89"/></modifier></type><name pos:line="201" pos:column="89">key<pos:position pos:line="201" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="201" pos:column="93"/></parameter_list> 
<block pos:line="202" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="203" pos:column="5">cache_object_t<pos:position pos:line="203" pos:column="19"/></name> <modifier pos:line="203" pos:column="20">*<pos:position pos:line="203" pos:column="21"/></modifier></type><name pos:line="203" pos:column="21">obj<pos:position pos:line="203" pos:column="24"/></name></decl>;<pos:position pos:line="203" pos:column="25"/></decl_stmt>

    <comment type="block" pos:line="205" pos:column="5">/* Look up entity keyed to 'url' */</comment>
    <if pos:line="206" pos:column="5">if <condition pos:line="206" pos:column="8">(<expr><call><name pos:line="206" pos:column="9">strcasecmp<pos:position pos:line="206" pos:column="19"/></name><argument_list pos:line="206" pos:column="19">(<argument><expr><name pos:line="206" pos:column="20">type<pos:position pos:line="206" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="206" pos:column="26">"mem"<pos:position pos:line="206" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="206" pos:column="32"/></argument_list></call> <operator pos:line="206" pos:column="33">&amp;&amp;<pos:position pos:line="206" pos:column="43"/></operator> <call><name pos:line="206" pos:column="36">strcasecmp<pos:position pos:line="206" pos:column="46"/></name><argument_list pos:line="206" pos:column="46">(<argument><expr><name pos:line="206" pos:column="47">type<pos:position pos:line="206" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="206" pos:column="53">"fd"<pos:position pos:line="206" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="206" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="206" pos:column="59"/></condition><then pos:line="206" pos:column="59"> <block pos:line="206" pos:column="60">{
        <return pos:line="207" pos:column="9">return <expr><name pos:line="207" pos:column="16">DECLINED<pos:position pos:line="207" pos:column="24"/></name></expr>;<pos:position pos:line="207" pos:column="25"/></return>
    }<pos:position pos:line="208" pos:column="6"/></block></then></if>
    <if pos:line="209" pos:column="5">if <condition pos:line="209" pos:column="8">(<expr><name><name pos:line="209" pos:column="9">sconf<pos:position pos:line="209" pos:column="14"/></name><operator pos:line="209" pos:column="14">-&gt;<pos:position pos:line="209" pos:column="19"/></operator><name pos:line="209" pos:column="16">lock<pos:position pos:line="209" pos:column="20"/></name></name></expr>)<pos:position pos:line="209" pos:column="21"/></condition><then pos:line="209" pos:column="21"> <block pos:line="209" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="210" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="210" pos:column="30"/></name><argument_list pos:line="210" pos:column="30">(<argument><expr><name><name pos:line="210" pos:column="31">sconf<pos:position pos:line="210" pos:column="36"/></name><operator pos:line="210" pos:column="36">-&gt;<pos:position pos:line="210" pos:column="41"/></operator><name pos:line="210" pos:column="38">lock<pos:position pos:line="210" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="210" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="211" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="212" pos:column="5">obj<pos:position pos:line="212" pos:column="8"/></name> <operator pos:line="212" pos:column="9">=<pos:position pos:line="212" pos:column="10"/></operator> <operator pos:line="212" pos:column="11">(<pos:position pos:line="212" pos:column="12"/></operator><name pos:line="212" pos:column="12">cache_object_t<pos:position pos:line="212" pos:column="26"/></name> <operator pos:line="212" pos:column="27">*<pos:position pos:line="212" pos:column="28"/></operator><operator pos:line="212" pos:column="28">)<pos:position pos:line="212" pos:column="29"/></operator> <call><name pos:line="212" pos:column="30">cache_find<pos:position pos:line="212" pos:column="40"/></name><argument_list pos:line="212" pos:column="40">(<argument><expr><name><name pos:line="212" pos:column="41">sconf<pos:position pos:line="212" pos:column="46"/></name><operator pos:line="212" pos:column="46">-&gt;<pos:position pos:line="212" pos:column="51"/></operator><name pos:line="212" pos:column="48">cache_cache<pos:position pos:line="212" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="61">key<pos:position pos:line="212" pos:column="64"/></name></expr></argument>)<pos:position pos:line="212" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="66"/></expr_stmt>
    <if pos:line="213" pos:column="5">if <condition pos:line="213" pos:column="8">(<expr><name pos:line="213" pos:column="9">obj<pos:position pos:line="213" pos:column="12"/></name></expr>)<pos:position pos:line="213" pos:column="13"/></condition><then pos:line="213" pos:column="13"> <block pos:line="213" pos:column="14">{
        <if pos:line="214" pos:column="9">if <condition pos:line="214" pos:column="12">(<expr><name><name pos:line="214" pos:column="13">obj<pos:position pos:line="214" pos:column="16"/></name><operator pos:line="214" pos:column="16">-&gt;<pos:position pos:line="214" pos:column="21"/></operator><name pos:line="214" pos:column="18">complete<pos:position pos:line="214" pos:column="26"/></name></name></expr>)<pos:position pos:line="214" pos:column="27"/></condition><then pos:line="214" pos:column="27"> <block pos:line="214" pos:column="28">{
            <decl_stmt><decl><type><name pos:line="215" pos:column="13">request_rec<pos:position pos:line="215" pos:column="24"/></name> <modifier pos:line="215" pos:column="25">*<pos:position pos:line="215" pos:column="26"/></modifier></type><name pos:line="215" pos:column="26">rmain<pos:position pos:line="215" pos:column="31"/></name><init pos:line="215" pos:column="31">=<expr><name pos:line="215" pos:column="32">r<pos:position pos:line="215" pos:column="33"/></name></expr></init></decl>, <modifier pos:line="215" pos:column="35">*<pos:position pos:line="215" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="215" pos:column="36">rtmp<pos:position pos:line="215" pos:column="40"/></name></decl>;<pos:position pos:line="215" pos:column="41"/></decl_stmt>
<cpp:ifdef pos:line="216" pos:column="1">#<cpp:directive pos:line="216" pos:column="2">ifdef<pos:position pos:line="216" pos:column="7"/></cpp:directive> <name pos:line="216" pos:column="8">USE_ATOMICS<pos:position pos:line="216" pos:column="19"/></name></cpp:ifdef>
            <expr_stmt><expr><call><name pos:line="217" pos:column="13">apr_atomic_inc<pos:position pos:line="217" pos:column="27"/></name><argument_list pos:line="217" pos:column="27">(<argument><expr><operator pos:line="217" pos:column="28">&amp;<pos:position pos:line="217" pos:column="33"/></operator><name><name pos:line="217" pos:column="29">obj<pos:position pos:line="217" pos:column="32"/></name><operator pos:line="217" pos:column="32">-&gt;<pos:position pos:line="217" pos:column="37"/></operator><name pos:line="217" pos:column="34">refcount<pos:position pos:line="217" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="217" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="44"/></expr_stmt>
<cpp:else pos:line="218" pos:column="1">#<cpp:directive pos:line="218" pos:column="2">else<pos:position pos:line="218" pos:column="6"/></cpp:directive></cpp:else>
            <expr_stmt><expr><name><name pos:line="219" pos:column="13">obj<pos:position pos:line="219" pos:column="16"/></name><operator pos:line="219" pos:column="16">-&gt;<pos:position pos:line="219" pos:column="21"/></operator><name pos:line="219" pos:column="18">refcount<pos:position pos:line="219" pos:column="26"/></name></name><operator pos:line="219" pos:column="26">++<pos:position pos:line="219" pos:column="28"/></operator></expr>;<pos:position pos:line="219" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="220" pos:column="1">#<cpp:directive pos:line="220" pos:column="2">endif<pos:position pos:line="220" pos:column="7"/></cpp:directive></cpp:endif>
            <comment type="block" pos:line="221" pos:column="13">/* cache is worried about overall counts, not 'open' ones */</comment>
            <expr_stmt><expr><call><name pos:line="222" pos:column="13">cache_update<pos:position pos:line="222" pos:column="25"/></name><argument_list pos:line="222" pos:column="25">(<argument><expr><name><name pos:line="222" pos:column="26">sconf<pos:position pos:line="222" pos:column="31"/></name><operator pos:line="222" pos:column="31">-&gt;<pos:position pos:line="222" pos:column="36"/></operator><name pos:line="222" pos:column="33">cache_cache<pos:position pos:line="222" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="46">obj<pos:position pos:line="222" pos:column="49"/></name></expr></argument>)<pos:position pos:line="222" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="51"/></expr_stmt>

            <comment type="block" pos:line="224" pos:column="13">/* If this is a subrequest, register the cleanup against
             * the main request. This will prevent the cache object 
             * from being cleaned up from under the request after the
             * subrequest is destroyed.
             */</comment>
            <expr_stmt><expr><name pos:line="229" pos:column="13">rtmp<pos:position pos:line="229" pos:column="17"/></name> <operator pos:line="229" pos:column="18">=<pos:position pos:line="229" pos:column="19"/></operator> <name pos:line="229" pos:column="20">r<pos:position pos:line="229" pos:column="21"/></name></expr>;<pos:position pos:line="229" pos:column="22"/></expr_stmt>
            <while pos:line="230" pos:column="13">while <condition pos:line="230" pos:column="19">(<expr><name pos:line="230" pos:column="20">rtmp<pos:position pos:line="230" pos:column="24"/></name></expr>)<pos:position pos:line="230" pos:column="25"/></condition> <block pos:line="230" pos:column="26">{
                <expr_stmt><expr><name pos:line="231" pos:column="17">rmain<pos:position pos:line="231" pos:column="22"/></name> <operator pos:line="231" pos:column="23">=<pos:position pos:line="231" pos:column="24"/></operator> <name pos:line="231" pos:column="25">rtmp<pos:position pos:line="231" pos:column="29"/></name></expr>;<pos:position pos:line="231" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><name pos:line="232" pos:column="17">rtmp<pos:position pos:line="232" pos:column="21"/></name> <operator pos:line="232" pos:column="22">=<pos:position pos:line="232" pos:column="23"/></operator> <name><name pos:line="232" pos:column="24">rmain<pos:position pos:line="232" pos:column="29"/></name><operator pos:line="232" pos:column="29">-&gt;<pos:position pos:line="232" pos:column="34"/></operator><name pos:line="232" pos:column="31">main<pos:position pos:line="232" pos:column="35"/></name></name></expr>;<pos:position pos:line="232" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="233" pos:column="14"/></block></while>
            <expr_stmt><expr><call><name pos:line="234" pos:column="13">apr_pool_cleanup_register<pos:position pos:line="234" pos:column="38"/></name><argument_list pos:line="234" pos:column="38">(<argument><expr><name><name pos:line="234" pos:column="39">rmain<pos:position pos:line="234" pos:column="44"/></name><operator pos:line="234" pos:column="44">-&gt;<pos:position pos:line="234" pos:column="49"/></operator><name pos:line="234" pos:column="46">pool<pos:position pos:line="234" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="234" pos:column="52">obj<pos:position pos:line="234" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="234" pos:column="57">decrement_refcount<pos:position pos:line="234" pos:column="75"/></name></expr></argument>,
                                      <argument><expr><name pos:line="235" pos:column="39">apr_pool_cleanup_null<pos:position pos:line="235" pos:column="60"/></name></expr></argument>)<pos:position pos:line="235" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="236" pos:column="10"/></block></then>
        <else pos:line="237" pos:column="9">else <block pos:line="237" pos:column="14">{
            <expr_stmt><expr><name pos:line="238" pos:column="13">obj<pos:position pos:line="238" pos:column="16"/></name> <operator pos:line="238" pos:column="17">=<pos:position pos:line="238" pos:column="18"/></operator> <name pos:line="238" pos:column="19">NULL<pos:position pos:line="238" pos:column="23"/></name></expr>;<pos:position pos:line="238" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="239" pos:column="10"/></block></else></if>
    }<pos:position pos:line="240" pos:column="6"/></block></then></if>

    <if pos:line="242" pos:column="5">if <condition pos:line="242" pos:column="8">(<expr><name><name pos:line="242" pos:column="9">sconf<pos:position pos:line="242" pos:column="14"/></name><operator pos:line="242" pos:column="14">-&gt;<pos:position pos:line="242" pos:column="19"/></operator><name pos:line="242" pos:column="16">lock<pos:position pos:line="242" pos:column="20"/></name></name></expr>)<pos:position pos:line="242" pos:column="21"/></condition><then pos:line="242" pos:column="21"> <block pos:line="242" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="243" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="243" pos:column="32"/></name><argument_list pos:line="243" pos:column="32">(<argument><expr><name><name pos:line="243" pos:column="33">sconf<pos:position pos:line="243" pos:column="38"/></name><operator pos:line="243" pos:column="38">-&gt;<pos:position pos:line="243" pos:column="43"/></operator><name pos:line="243" pos:column="40">lock<pos:position pos:line="243" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="243" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="244" pos:column="6"/></block></then></if>

    <if pos:line="246" pos:column="5">if <condition pos:line="246" pos:column="8">(<expr><operator pos:line="246" pos:column="9">!<pos:position pos:line="246" pos:column="10"/></operator><name pos:line="246" pos:column="10">obj<pos:position pos:line="246" pos:column="13"/></name></expr>)<pos:position pos:line="246" pos:column="14"/></condition><then pos:line="246" pos:column="14"> <block pos:line="246" pos:column="15">{
        <return pos:line="247" pos:column="9">return <expr><name pos:line="247" pos:column="16">DECLINED<pos:position pos:line="247" pos:column="24"/></name></expr>;<pos:position pos:line="247" pos:column="25"/></return>
    }<pos:position pos:line="248" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="250" pos:column="5">/* Initialize the cache_handle */</comment>
    <expr_stmt><expr><name><name pos:line="251" pos:column="5">h<pos:position pos:line="251" pos:column="6"/></name><operator pos:line="251" pos:column="6">-&gt;<pos:position pos:line="251" pos:column="11"/></operator><name pos:line="251" pos:column="8">read_body<pos:position pos:line="251" pos:column="17"/></name></name> <operator pos:line="251" pos:column="18">=<pos:position pos:line="251" pos:column="19"/></operator> <operator pos:line="251" pos:column="20">&amp;<pos:position pos:line="251" pos:column="25"/></operator><name pos:line="251" pos:column="21">read_body<pos:position pos:line="251" pos:column="30"/></name></expr>;<pos:position pos:line="251" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="252" pos:column="5">h<pos:position pos:line="252" pos:column="6"/></name><operator pos:line="252" pos:column="6">-&gt;<pos:position pos:line="252" pos:column="11"/></operator><name pos:line="252" pos:column="8">read_headers<pos:position pos:line="252" pos:column="20"/></name></name> <operator pos:line="252" pos:column="21">=<pos:position pos:line="252" pos:column="22"/></operator> <operator pos:line="252" pos:column="23">&amp;<pos:position pos:line="252" pos:column="28"/></operator><name pos:line="252" pos:column="24">read_headers<pos:position pos:line="252" pos:column="36"/></name></expr>;<pos:position pos:line="252" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="253" pos:column="5">h<pos:position pos:line="253" pos:column="6"/></name><operator pos:line="253" pos:column="6">-&gt;<pos:position pos:line="253" pos:column="11"/></operator><name pos:line="253" pos:column="8">write_body<pos:position pos:line="253" pos:column="18"/></name></name> <operator pos:line="253" pos:column="19">=<pos:position pos:line="253" pos:column="20"/></operator> <operator pos:line="253" pos:column="21">&amp;<pos:position pos:line="253" pos:column="26"/></operator><name pos:line="253" pos:column="22">write_body<pos:position pos:line="253" pos:column="32"/></name></expr>;<pos:position pos:line="253" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="254" pos:column="5">h<pos:position pos:line="254" pos:column="6"/></name><operator pos:line="254" pos:column="6">-&gt;<pos:position pos:line="254" pos:column="11"/></operator><name pos:line="254" pos:column="8">write_headers<pos:position pos:line="254" pos:column="21"/></name></name> <operator pos:line="254" pos:column="22">=<pos:position pos:line="254" pos:column="23"/></operator> <operator pos:line="254" pos:column="24">&amp;<pos:position pos:line="254" pos:column="29"/></operator><name pos:line="254" pos:column="25">write_headers<pos:position pos:line="254" pos:column="38"/></name></expr>;<pos:position pos:line="254" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="255" pos:column="5">h<pos:position pos:line="255" pos:column="6"/></name><operator pos:line="255" pos:column="6">-&gt;<pos:position pos:line="255" pos:column="11"/></operator><name pos:line="255" pos:column="8">remove_entity<pos:position pos:line="255" pos:column="21"/></name></name> <operator pos:line="255" pos:column="22">=<pos:position pos:line="255" pos:column="23"/></operator> <operator pos:line="255" pos:column="24">&amp;<pos:position pos:line="255" pos:column="29"/></operator><name pos:line="255" pos:column="25">remove_entity<pos:position pos:line="255" pos:column="38"/></name></expr>;<pos:position pos:line="255" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="256" pos:column="5">h<pos:position pos:line="256" pos:column="6"/></name><operator pos:line="256" pos:column="6">-&gt;<pos:position pos:line="256" pos:column="11"/></operator><name pos:line="256" pos:column="8">cache_obj<pos:position pos:line="256" pos:column="17"/></name></name> <operator pos:line="256" pos:column="18">=<pos:position pos:line="256" pos:column="19"/></operator> <name pos:line="256" pos:column="20">obj<pos:position pos:line="256" pos:column="23"/></name></expr>;<pos:position pos:line="256" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="257" pos:column="5">h<pos:position pos:line="257" pos:column="6"/></name><operator pos:line="257" pos:column="6">-&gt;<pos:position pos:line="257" pos:column="11"/></operator><name pos:line="257" pos:column="8">req_hdrs<pos:position pos:line="257" pos:column="16"/></name></name> <operator pos:line="257" pos:column="17">=<pos:position pos:line="257" pos:column="18"/></operator> <name pos:line="257" pos:column="19">NULL<pos:position pos:line="257" pos:column="23"/></name></expr>;<pos:position pos:line="257" pos:column="24"/></expr_stmt>  <comment type="block" pos:line="257" pos:column="26">/* Pick these up in read_headers() */</comment>
    <return pos:line="258" pos:column="5">return <expr><name pos:line="258" pos:column="12">OK<pos:position pos:line="258" pos:column="14"/></name></expr>;<pos:position pos:line="258" pos:column="15"/></return>
}<pos:position pos:line="259" pos:column="2"/></block></function>

<function><specifier pos:line="261" pos:column="1">static<pos:position pos:line="261" pos:column="7"/></specifier> <type><name pos:line="261" pos:column="8">int<pos:position pos:line="261" pos:column="11"/></name></type> <name pos:line="261" pos:column="12">remove_entity<pos:position pos:line="261" pos:column="25"/></name><parameter_list pos:line="261" pos:column="25">(<parameter><decl><type><name pos:line="261" pos:column="26">cache_handle_t<pos:position pos:line="261" pos:column="40"/></name> <modifier pos:line="261" pos:column="41">*<pos:position pos:line="261" pos:column="42"/></modifier></type><name pos:line="261" pos:column="42">h<pos:position pos:line="261" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="261" pos:column="44"/></parameter_list> 
<block pos:line="262" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="263" pos:column="5">cache_object_t<pos:position pos:line="263" pos:column="19"/></name> <modifier pos:line="263" pos:column="20">*<pos:position pos:line="263" pos:column="21"/></modifier></type><name pos:line="263" pos:column="21">obj<pos:position pos:line="263" pos:column="24"/></name> <init pos:line="263" pos:column="25">= <expr><name><name pos:line="263" pos:column="27">h<pos:position pos:line="263" pos:column="28"/></name><operator pos:line="263" pos:column="28">-&gt;<pos:position pos:line="263" pos:column="33"/></operator><name pos:line="263" pos:column="30">cache_obj<pos:position pos:line="263" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="263" pos:column="40"/></decl_stmt>

    <comment type="block" pos:line="265" pos:column="5">/* Remove the cache object from the cache under protection */</comment>
    <if pos:line="266" pos:column="5">if <condition pos:line="266" pos:column="8">(<expr><name><name pos:line="266" pos:column="9">sconf<pos:position pos:line="266" pos:column="14"/></name><operator pos:line="266" pos:column="14">-&gt;<pos:position pos:line="266" pos:column="19"/></operator><name pos:line="266" pos:column="16">lock<pos:position pos:line="266" pos:column="20"/></name></name></expr>)<pos:position pos:line="266" pos:column="21"/></condition><then pos:line="266" pos:column="21"> <block pos:line="266" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="267" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="267" pos:column="30"/></name><argument_list pos:line="267" pos:column="30">(<argument><expr><name><name pos:line="267" pos:column="31">sconf<pos:position pos:line="267" pos:column="36"/></name><operator pos:line="267" pos:column="36">-&gt;<pos:position pos:line="267" pos:column="41"/></operator><name pos:line="267" pos:column="38">lock<pos:position pos:line="267" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="267" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="268" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="269" pos:column="5">/* If the object is not already marked for cleanup, remove
     * it from the cache and mark it for cleanup. Remember,
     * an object marked for cleanup is by design not in the
     * hash table.
     */</comment>
    <if pos:line="274" pos:column="5">if <condition pos:line="274" pos:column="8">(<expr><operator pos:line="274" pos:column="9">!<pos:position pos:line="274" pos:column="10"/></operator><name><name pos:line="274" pos:column="10">obj<pos:position pos:line="274" pos:column="13"/></name><operator pos:line="274" pos:column="13">-&gt;<pos:position pos:line="274" pos:column="18"/></operator><name pos:line="274" pos:column="15">cleanup<pos:position pos:line="274" pos:column="22"/></name></name></expr>)<pos:position pos:line="274" pos:column="23"/></condition><then pos:line="274" pos:column="23"> <block pos:line="274" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="275" pos:column="9">mem_cache_object_t<pos:position pos:line="275" pos:column="27"/></name> <modifier pos:line="275" pos:column="28">*<pos:position pos:line="275" pos:column="29"/></modifier></type><name pos:line="275" pos:column="29">mobj<pos:position pos:line="275" pos:column="33"/></name> <init pos:line="275" pos:column="34">= <expr><operator pos:line="275" pos:column="36">(<pos:position pos:line="275" pos:column="37"/></operator><name pos:line="275" pos:column="37">mem_cache_object_t<pos:position pos:line="275" pos:column="55"/></name> <operator pos:line="275" pos:column="56">*<pos:position pos:line="275" pos:column="57"/></operator><operator pos:line="275" pos:column="57">)<pos:position pos:line="275" pos:column="58"/></operator> <name><name pos:line="275" pos:column="59">obj<pos:position pos:line="275" pos:column="62"/></name><operator pos:line="275" pos:column="62">-&gt;<pos:position pos:line="275" pos:column="67"/></operator><name pos:line="275" pos:column="64">vobj<pos:position pos:line="275" pos:column="68"/></name></name></expr></init></decl>;<pos:position pos:line="275" pos:column="69"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="276" pos:column="9">cache_remove<pos:position pos:line="276" pos:column="21"/></name><argument_list pos:line="276" pos:column="21">(<argument><expr><name><name pos:line="276" pos:column="22">sconf<pos:position pos:line="276" pos:column="27"/></name><operator pos:line="276" pos:column="27">-&gt;<pos:position pos:line="276" pos:column="32"/></operator><name pos:line="276" pos:column="29">cache_cache<pos:position pos:line="276" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="276" pos:column="42">obj<pos:position pos:line="276" pos:column="45"/></name></expr></argument>)<pos:position pos:line="276" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="276" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="277" pos:column="9">sconf<pos:position pos:line="277" pos:column="14"/></name><operator pos:line="277" pos:column="14">-&gt;<pos:position pos:line="277" pos:column="19"/></operator><name pos:line="277" pos:column="16">object_cnt<pos:position pos:line="277" pos:column="26"/></name></name><operator pos:line="277" pos:column="26">--<pos:position pos:line="277" pos:column="28"/></operator></expr>;<pos:position pos:line="277" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="278" pos:column="9">sconf<pos:position pos:line="278" pos:column="14"/></name><operator pos:line="278" pos:column="14">-&gt;<pos:position pos:line="278" pos:column="19"/></operator><name pos:line="278" pos:column="16">cache_size<pos:position pos:line="278" pos:column="26"/></name></name> <operator pos:line="278" pos:column="27">-=<pos:position pos:line="278" pos:column="29"/></operator> <name><name pos:line="278" pos:column="30">mobj<pos:position pos:line="278" pos:column="34"/></name><operator pos:line="278" pos:column="34">-&gt;<pos:position pos:line="278" pos:column="39"/></operator><name pos:line="278" pos:column="36">m_len<pos:position pos:line="278" pos:column="41"/></name></name></expr>;<pos:position pos:line="278" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="279" pos:column="9">obj<pos:position pos:line="279" pos:column="12"/></name><operator pos:line="279" pos:column="12">-&gt;<pos:position pos:line="279" pos:column="17"/></operator><name pos:line="279" pos:column="14">cleanup<pos:position pos:line="279" pos:column="21"/></name></name> <operator pos:line="279" pos:column="22">=<pos:position pos:line="279" pos:column="23"/></operator> <literal type="number" pos:line="279" pos:column="24">1<pos:position pos:line="279" pos:column="25"/></literal></expr>;<pos:position pos:line="279" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="280" pos:column="9">ap_log_error<pos:position pos:line="280" pos:column="21"/></name><argument_list pos:line="280" pos:column="21">(<argument><expr><name pos:line="280" pos:column="22">APLOG_MARK<pos:position pos:line="280" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="280" pos:column="34">APLOG_INFO<pos:position pos:line="280" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="280" pos:column="46">0<pos:position pos:line="280" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="280" pos:column="49">NULL<pos:position pos:line="280" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="280" pos:column="55">"gcing a cache entry"<pos:position pos:line="280" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="280" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="281" pos:column="6"/></block></then></if>

    <if pos:line="283" pos:column="5">if <condition pos:line="283" pos:column="8">(<expr><name><name pos:line="283" pos:column="9">sconf<pos:position pos:line="283" pos:column="14"/></name><operator pos:line="283" pos:column="14">-&gt;<pos:position pos:line="283" pos:column="19"/></operator><name pos:line="283" pos:column="16">lock<pos:position pos:line="283" pos:column="20"/></name></name></expr>)<pos:position pos:line="283" pos:column="21"/></condition><then pos:line="283" pos:column="21"> <block pos:line="283" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="284" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="284" pos:column="32"/></name><argument_list pos:line="284" pos:column="32">(<argument><expr><name><name pos:line="284" pos:column="33">sconf<pos:position pos:line="284" pos:column="38"/></name><operator pos:line="284" pos:column="38">-&gt;<pos:position pos:line="284" pos:column="43"/></operator><name pos:line="284" pos:column="40">lock<pos:position pos:line="284" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="284" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="284" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="285" pos:column="6"/></block></then></if>

    <return pos:line="287" pos:column="5">return <expr><name pos:line="287" pos:column="12">OK<pos:position pos:line="287" pos:column="14"/></name></expr>;<pos:position pos:line="287" pos:column="15"/></return>
}<pos:position pos:line="288" pos:column="2"/></block></function>
<function><specifier pos:line="289" pos:column="1">static<pos:position pos:line="289" pos:column="7"/></specifier> <type><name pos:line="289" pos:column="8">apr_status_t<pos:position pos:line="289" pos:column="20"/></name></type> <name pos:line="289" pos:column="21">serialize_table<pos:position pos:line="289" pos:column="36"/></name><parameter_list pos:line="289" pos:column="36">(<parameter><decl><type><name pos:line="289" pos:column="37">cache_header_tbl_t<pos:position pos:line="289" pos:column="55"/></name> <modifier pos:line="289" pos:column="56">*<pos:position pos:line="289" pos:column="57"/></modifier><modifier pos:line="289" pos:column="57">*<pos:position pos:line="289" pos:column="58"/></modifier></type><name pos:line="289" pos:column="58">obj<pos:position pos:line="289" pos:column="61"/></name></decl></parameter>, 
                                    <parameter><decl><type><name pos:line="290" pos:column="37">apr_ssize_t<pos:position pos:line="290" pos:column="48"/></name> <modifier pos:line="290" pos:column="49">*<pos:position pos:line="290" pos:column="50"/></modifier></type><name pos:line="290" pos:column="50">nelts<pos:position pos:line="290" pos:column="55"/></name></decl></parameter>, 
                                    <parameter><decl><type><name pos:line="291" pos:column="37">apr_table_t<pos:position pos:line="291" pos:column="48"/></name> <modifier pos:line="291" pos:column="49">*<pos:position pos:line="291" pos:column="50"/></modifier></type><name pos:line="291" pos:column="50">table<pos:position pos:line="291" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="291" pos:column="56"/></parameter_list>
<block pos:line="292" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="293" pos:column="5">const<pos:position pos:line="293" pos:column="10"/></specifier> <name pos:line="293" pos:column="11">apr_array_header_t<pos:position pos:line="293" pos:column="29"/></name> <modifier pos:line="293" pos:column="30">*<pos:position pos:line="293" pos:column="31"/></modifier></type><name pos:line="293" pos:column="31">elts_arr<pos:position pos:line="293" pos:column="39"/></name> <init pos:line="293" pos:column="40">= <expr><call><name pos:line="293" pos:column="42">apr_table_elts<pos:position pos:line="293" pos:column="56"/></name><argument_list pos:line="293" pos:column="56">(<argument><expr><name pos:line="293" pos:column="57">table<pos:position pos:line="293" pos:column="62"/></name></expr></argument>)<pos:position pos:line="293" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="293" pos:column="64"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="294" pos:column="5">apr_table_entry_t<pos:position pos:line="294" pos:column="22"/></name> <modifier pos:line="294" pos:column="23">*<pos:position pos:line="294" pos:column="24"/></modifier></type><name pos:line="294" pos:column="24">elts<pos:position pos:line="294" pos:column="28"/></name> <init pos:line="294" pos:column="29">= <expr><operator pos:line="294" pos:column="31">(<pos:position pos:line="294" pos:column="32"/></operator><name pos:line="294" pos:column="32">apr_table_entry_t<pos:position pos:line="294" pos:column="49"/></name> <operator pos:line="294" pos:column="50">*<pos:position pos:line="294" pos:column="51"/></operator><operator pos:line="294" pos:column="51">)<pos:position pos:line="294" pos:column="52"/></operator> <name><name pos:line="294" pos:column="53">elts_arr<pos:position pos:line="294" pos:column="61"/></name><operator pos:line="294" pos:column="61">-&gt;<pos:position pos:line="294" pos:column="66"/></operator><name pos:line="294" pos:column="63">elts<pos:position pos:line="294" pos:column="67"/></name></name></expr></init></decl>;<pos:position pos:line="294" pos:column="68"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="295" pos:column="5">apr_ssize_t<pos:position pos:line="295" pos:column="16"/></name></type> <name pos:line="295" pos:column="17">i<pos:position pos:line="295" pos:column="18"/></name></decl>;<pos:position pos:line="295" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="296" pos:column="5">apr_size_t<pos:position pos:line="296" pos:column="15"/></name></type> <name pos:line="296" pos:column="16">len<pos:position pos:line="296" pos:column="19"/></name> <init pos:line="296" pos:column="20">= <expr><literal type="number" pos:line="296" pos:column="22">0<pos:position pos:line="296" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="296" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="297" pos:column="5">apr_size_t<pos:position pos:line="297" pos:column="15"/></name></type> <name pos:line="297" pos:column="16">idx<pos:position pos:line="297" pos:column="19"/></name> <init pos:line="297" pos:column="20">= <expr><literal type="number" pos:line="297" pos:column="22">0<pos:position pos:line="297" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="297" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="298" pos:column="5">char<pos:position pos:line="298" pos:column="9"/></name> <modifier pos:line="298" pos:column="10">*<pos:position pos:line="298" pos:column="11"/></modifier></type><name pos:line="298" pos:column="11">buf<pos:position pos:line="298" pos:column="14"/></name></decl>;<pos:position pos:line="298" pos:column="15"/></decl_stmt>
   
    <expr_stmt><expr><operator pos:line="300" pos:column="5">*<pos:position pos:line="300" pos:column="6"/></operator><name pos:line="300" pos:column="6">nelts<pos:position pos:line="300" pos:column="11"/></name> <operator pos:line="300" pos:column="12">=<pos:position pos:line="300" pos:column="13"/></operator> <name><name pos:line="300" pos:column="14">elts_arr<pos:position pos:line="300" pos:column="22"/></name><operator pos:line="300" pos:column="22">-&gt;<pos:position pos:line="300" pos:column="27"/></operator><name pos:line="300" pos:column="24">nelts<pos:position pos:line="300" pos:column="29"/></name></name></expr>;<pos:position pos:line="300" pos:column="30"/></expr_stmt>
    <if pos:line="301" pos:column="5">if <condition pos:line="301" pos:column="8">(<expr><operator pos:line="301" pos:column="9">*<pos:position pos:line="301" pos:column="10"/></operator><name pos:line="301" pos:column="10">nelts<pos:position pos:line="301" pos:column="15"/></name> <operator pos:line="301" pos:column="16">==<pos:position pos:line="301" pos:column="18"/></operator> <literal type="number" pos:line="301" pos:column="19">0<pos:position pos:line="301" pos:column="20"/></literal></expr> )<pos:position pos:line="301" pos:column="22"/></condition><then pos:line="301" pos:column="22"> <block pos:line="301" pos:column="23">{
        <expr_stmt><expr><operator pos:line="302" pos:column="9">*<pos:position pos:line="302" pos:column="10"/></operator><name pos:line="302" pos:column="10">obj<pos:position pos:line="302" pos:column="13"/></name><operator pos:line="302" pos:column="13">=<pos:position pos:line="302" pos:column="14"/></operator><name pos:line="302" pos:column="14">NULL<pos:position pos:line="302" pos:column="18"/></name></expr>;<pos:position pos:line="302" pos:column="19"/></expr_stmt>
        <return pos:line="303" pos:column="9">return <expr><name pos:line="303" pos:column="16">APR_SUCCESS<pos:position pos:line="303" pos:column="27"/></name></expr>;<pos:position pos:line="303" pos:column="28"/></return>
    }<pos:position pos:line="304" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="305" pos:column="5">*<pos:position pos:line="305" pos:column="6"/></operator><name pos:line="305" pos:column="6">obj<pos:position pos:line="305" pos:column="9"/></name> <operator pos:line="305" pos:column="10">=<pos:position pos:line="305" pos:column="11"/></operator> <call><name pos:line="305" pos:column="12">malloc<pos:position pos:line="305" pos:column="18"/></name><argument_list pos:line="305" pos:column="18">(<argument><expr><sizeof pos:line="305" pos:column="19">sizeof<argument_list pos:line="305" pos:column="25">(<argument><expr><name pos:line="305" pos:column="26">cache_header_tbl_t<pos:position pos:line="305" pos:column="44"/></name></expr></argument>)<pos:position pos:line="305" pos:column="45"/></argument_list></sizeof> <operator pos:line="305" pos:column="46">*<pos:position pos:line="305" pos:column="47"/></operator> <name><name pos:line="305" pos:column="48">elts_arr<pos:position pos:line="305" pos:column="56"/></name><operator pos:line="305" pos:column="56">-&gt;<pos:position pos:line="305" pos:column="61"/></operator><name pos:line="305" pos:column="58">nelts<pos:position pos:line="305" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="305" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="305" pos:column="65"/></expr_stmt>
    <if pos:line="306" pos:column="5">if <condition pos:line="306" pos:column="8">(<expr><name pos:line="306" pos:column="9">NULL<pos:position pos:line="306" pos:column="13"/></name> <operator pos:line="306" pos:column="14">==<pos:position pos:line="306" pos:column="16"/></operator> <operator pos:line="306" pos:column="17">*<pos:position pos:line="306" pos:column="18"/></operator><name pos:line="306" pos:column="18">obj<pos:position pos:line="306" pos:column="21"/></name></expr>)<pos:position pos:line="306" pos:column="22"/></condition><then pos:line="306" pos:column="22"> <block pos:line="306" pos:column="23">{
        <return pos:line="307" pos:column="9">return <expr><name pos:line="307" pos:column="16">APR_ENOMEM<pos:position pos:line="307" pos:column="26"/></name></expr>;<pos:position pos:line="307" pos:column="27"/></return>
    }<pos:position pos:line="308" pos:column="6"/></block></then></if>
    <for pos:line="309" pos:column="5">for <control pos:line="309" pos:column="9">(<init><expr><name pos:line="309" pos:column="10">i<pos:position pos:line="309" pos:column="11"/></name> <operator pos:line="309" pos:column="12">=<pos:position pos:line="309" pos:column="13"/></operator> <literal type="number" pos:line="309" pos:column="14">0<pos:position pos:line="309" pos:column="15"/></literal></expr>;<pos:position pos:line="309" pos:column="16"/></init> <condition><expr><name pos:line="309" pos:column="17">i<pos:position pos:line="309" pos:column="18"/></name> <operator pos:line="309" pos:column="19">&lt;<pos:position pos:line="309" pos:column="23"/></operator> <name><name pos:line="309" pos:column="21">elts_arr<pos:position pos:line="309" pos:column="29"/></name><operator pos:line="309" pos:column="29">-&gt;<pos:position pos:line="309" pos:column="34"/></operator><name pos:line="309" pos:column="31">nelts<pos:position pos:line="309" pos:column="36"/></name></name></expr>;<pos:position pos:line="309" pos:column="37"/></condition> <incr><expr><operator pos:line="309" pos:column="38">++<pos:position pos:line="309" pos:column="40"/></operator><name pos:line="309" pos:column="40">i<pos:position pos:line="309" pos:column="41"/></name></expr></incr>)<pos:position pos:line="309" pos:column="42"/></control> <block pos:line="309" pos:column="43">{
        <expr_stmt><expr><name pos:line="310" pos:column="9">len<pos:position pos:line="310" pos:column="12"/></name> <operator pos:line="310" pos:column="13">+=<pos:position pos:line="310" pos:column="15"/></operator> <call><name pos:line="310" pos:column="16">strlen<pos:position pos:line="310" pos:column="22"/></name><argument_list pos:line="310" pos:column="22">(<argument><expr><name><name pos:line="310" pos:column="23">elts<pos:position pos:line="310" pos:column="27"/></name><index pos:line="310" pos:column="27">[<expr><name pos:line="310" pos:column="28">i<pos:position pos:line="310" pos:column="29"/></name></expr>]<pos:position pos:line="310" pos:column="30"/></index></name><operator pos:line="310" pos:column="30">.<pos:position pos:line="310" pos:column="31"/></operator><name pos:line="310" pos:column="31">key<pos:position pos:line="310" pos:column="34"/></name></expr></argument>)<pos:position pos:line="310" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="310" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="311" pos:column="9">len<pos:position pos:line="311" pos:column="12"/></name> <operator pos:line="311" pos:column="13">+=<pos:position pos:line="311" pos:column="15"/></operator> <call><name pos:line="311" pos:column="16">strlen<pos:position pos:line="311" pos:column="22"/></name><argument_list pos:line="311" pos:column="22">(<argument><expr><name><name pos:line="311" pos:column="23">elts<pos:position pos:line="311" pos:column="27"/></name><index pos:line="311" pos:column="27">[<expr><name pos:line="311" pos:column="28">i<pos:position pos:line="311" pos:column="29"/></name></expr>]<pos:position pos:line="311" pos:column="30"/></index></name><operator pos:line="311" pos:column="30">.<pos:position pos:line="311" pos:column="31"/></operator><name pos:line="311" pos:column="31">val<pos:position pos:line="311" pos:column="34"/></name></expr></argument>)<pos:position pos:line="311" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="312" pos:column="9">len<pos:position pos:line="312" pos:column="12"/></name> <operator pos:line="312" pos:column="13">+=<pos:position pos:line="312" pos:column="15"/></operator> <literal type="number" pos:line="312" pos:column="16">2<pos:position pos:line="312" pos:column="17"/></literal></expr>;<pos:position pos:line="312" pos:column="18"/></expr_stmt>  <comment type="block" pos:line="312" pos:column="20">/* Extra space for NULL string terminator for key and val */</comment>
    }<pos:position pos:line="313" pos:column="6"/></block></for>

    <comment type="block" pos:line="315" pos:column="5">/* Transfer the headers into a contiguous memory block */</comment>
    <expr_stmt><expr><name pos:line="316" pos:column="5">buf<pos:position pos:line="316" pos:column="8"/></name> <operator pos:line="316" pos:column="9">=<pos:position pos:line="316" pos:column="10"/></operator> <call><name pos:line="316" pos:column="11">malloc<pos:position pos:line="316" pos:column="17"/></name><argument_list pos:line="316" pos:column="17">(<argument><expr><name pos:line="316" pos:column="18">len<pos:position pos:line="316" pos:column="21"/></name></expr></argument>)<pos:position pos:line="316" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="316" pos:column="23"/></expr_stmt>
    <if pos:line="317" pos:column="5">if <condition pos:line="317" pos:column="8">(<expr><operator pos:line="317" pos:column="9">!<pos:position pos:line="317" pos:column="10"/></operator><name pos:line="317" pos:column="10">buf<pos:position pos:line="317" pos:column="13"/></name></expr>)<pos:position pos:line="317" pos:column="14"/></condition><then pos:line="317" pos:column="14"> <block pos:line="317" pos:column="15">{
        <expr_stmt><expr><operator pos:line="318" pos:column="9">*<pos:position pos:line="318" pos:column="10"/></operator><name pos:line="318" pos:column="10">obj<pos:position pos:line="318" pos:column="13"/></name> <operator pos:line="318" pos:column="14">=<pos:position pos:line="318" pos:column="15"/></operator> <name pos:line="318" pos:column="16">NULL<pos:position pos:line="318" pos:column="20"/></name></expr>;<pos:position pos:line="318" pos:column="21"/></expr_stmt>
        <return pos:line="319" pos:column="9">return <expr><name pos:line="319" pos:column="16">APR_ENOMEM<pos:position pos:line="319" pos:column="26"/></name></expr>;<pos:position pos:line="319" pos:column="27"/></return>
    }<pos:position pos:line="320" pos:column="6"/></block></then></if>

    <for pos:line="322" pos:column="5">for <control pos:line="322" pos:column="9">(<init><expr><name pos:line="322" pos:column="10">i<pos:position pos:line="322" pos:column="11"/></name> <operator pos:line="322" pos:column="12">=<pos:position pos:line="322" pos:column="13"/></operator> <literal type="number" pos:line="322" pos:column="14">0<pos:position pos:line="322" pos:column="15"/></literal></expr>;<pos:position pos:line="322" pos:column="16"/></init> <condition><expr><name pos:line="322" pos:column="17">i<pos:position pos:line="322" pos:column="18"/></name> <operator pos:line="322" pos:column="19">&lt;<pos:position pos:line="322" pos:column="23"/></operator> <operator pos:line="322" pos:column="21">*<pos:position pos:line="322" pos:column="22"/></operator><name pos:line="322" pos:column="22">nelts<pos:position pos:line="322" pos:column="27"/></name></expr>;<pos:position pos:line="322" pos:column="28"/></condition> <incr><expr><operator pos:line="322" pos:column="29">++<pos:position pos:line="322" pos:column="31"/></operator><name pos:line="322" pos:column="31">i<pos:position pos:line="322" pos:column="32"/></name></expr></incr>)<pos:position pos:line="322" pos:column="33"/></control> <block pos:line="322" pos:column="34">{
        <expr_stmt><expr><operator pos:line="323" pos:column="9">(<pos:position pos:line="323" pos:column="10"/></operator><operator pos:line="323" pos:column="10">*<pos:position pos:line="323" pos:column="11"/></operator><name pos:line="323" pos:column="11">obj<pos:position pos:line="323" pos:column="14"/></name><operator pos:line="323" pos:column="14">)<pos:position pos:line="323" pos:column="15"/></operator><index pos:line="323" pos:column="15">[<expr><name pos:line="323" pos:column="16">i<pos:position pos:line="323" pos:column="17"/></name></expr>]<pos:position pos:line="323" pos:column="18"/></index><operator pos:line="323" pos:column="18">.<pos:position pos:line="323" pos:column="19"/></operator><name pos:line="323" pos:column="19">hdr<pos:position pos:line="323" pos:column="22"/></name> <operator pos:line="323" pos:column="23">=<pos:position pos:line="323" pos:column="24"/></operator> <operator pos:line="323" pos:column="25">&amp;<pos:position pos:line="323" pos:column="30"/></operator><name><name pos:line="323" pos:column="26">buf<pos:position pos:line="323" pos:column="29"/></name><index pos:line="323" pos:column="29">[<expr><name pos:line="323" pos:column="30">idx<pos:position pos:line="323" pos:column="33"/></name></expr>]<pos:position pos:line="323" pos:column="34"/></index></name></expr>;<pos:position pos:line="323" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="324" pos:column="9">len<pos:position pos:line="324" pos:column="12"/></name> <operator pos:line="324" pos:column="13">=<pos:position pos:line="324" pos:column="14"/></operator> <call><name pos:line="324" pos:column="15">strlen<pos:position pos:line="324" pos:column="21"/></name><argument_list pos:line="324" pos:column="21">(<argument><expr><name><name pos:line="324" pos:column="22">elts<pos:position pos:line="324" pos:column="26"/></name><index pos:line="324" pos:column="26">[<expr><name pos:line="324" pos:column="27">i<pos:position pos:line="324" pos:column="28"/></name></expr>]<pos:position pos:line="324" pos:column="29"/></index></name><operator pos:line="324" pos:column="29">.<pos:position pos:line="324" pos:column="30"/></operator><name pos:line="324" pos:column="30">key<pos:position pos:line="324" pos:column="33"/></name></expr></argument>)<pos:position pos:line="324" pos:column="34"/></argument_list></call> <operator pos:line="324" pos:column="35">+<pos:position pos:line="324" pos:column="36"/></operator> <literal type="number" pos:line="324" pos:column="37">1<pos:position pos:line="324" pos:column="38"/></literal></expr>;<pos:position pos:line="324" pos:column="39"/></expr_stmt>              <comment type="block" pos:line="324" pos:column="53">/* Include NULL terminator */</comment>
        <expr_stmt><expr><call><name pos:line="325" pos:column="9">memcpy<pos:position pos:line="325" pos:column="15"/></name><argument_list pos:line="325" pos:column="15">(<argument><expr><operator pos:line="325" pos:column="16">&amp;<pos:position pos:line="325" pos:column="21"/></operator><name><name pos:line="325" pos:column="17">buf<pos:position pos:line="325" pos:column="20"/></name><index pos:line="325" pos:column="20">[<expr><name pos:line="325" pos:column="21">idx<pos:position pos:line="325" pos:column="24"/></name></expr>]<pos:position pos:line="325" pos:column="25"/></index></name></expr></argument>, <argument><expr><name><name pos:line="325" pos:column="27">elts<pos:position pos:line="325" pos:column="31"/></name><index pos:line="325" pos:column="31">[<expr><name pos:line="325" pos:column="32">i<pos:position pos:line="325" pos:column="33"/></name></expr>]<pos:position pos:line="325" pos:column="34"/></index></name><operator pos:line="325" pos:column="34">.<pos:position pos:line="325" pos:column="35"/></operator><name pos:line="325" pos:column="35">key<pos:position pos:line="325" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="325" pos:column="40">len<pos:position pos:line="325" pos:column="43"/></name></expr></argument>)<pos:position pos:line="325" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="326" pos:column="9">idx<pos:position pos:line="326" pos:column="12"/></name><operator pos:line="326" pos:column="12">+=<pos:position pos:line="326" pos:column="14"/></operator><name pos:line="326" pos:column="14">len<pos:position pos:line="326" pos:column="17"/></name></expr>;<pos:position pos:line="326" pos:column="18"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="328" pos:column="9">(<pos:position pos:line="328" pos:column="10"/></operator><operator pos:line="328" pos:column="10">*<pos:position pos:line="328" pos:column="11"/></operator><name pos:line="328" pos:column="11">obj<pos:position pos:line="328" pos:column="14"/></name><operator pos:line="328" pos:column="14">)<pos:position pos:line="328" pos:column="15"/></operator><index pos:line="328" pos:column="15">[<expr><name pos:line="328" pos:column="16">i<pos:position pos:line="328" pos:column="17"/></name></expr>]<pos:position pos:line="328" pos:column="18"/></index><operator pos:line="328" pos:column="18">.<pos:position pos:line="328" pos:column="19"/></operator><name pos:line="328" pos:column="19">val<pos:position pos:line="328" pos:column="22"/></name> <operator pos:line="328" pos:column="23">=<pos:position pos:line="328" pos:column="24"/></operator> <operator pos:line="328" pos:column="25">&amp;<pos:position pos:line="328" pos:column="30"/></operator><name><name pos:line="328" pos:column="26">buf<pos:position pos:line="328" pos:column="29"/></name><index pos:line="328" pos:column="29">[<expr><name pos:line="328" pos:column="30">idx<pos:position pos:line="328" pos:column="33"/></name></expr>]<pos:position pos:line="328" pos:column="34"/></index></name></expr>;<pos:position pos:line="328" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="329" pos:column="9">len<pos:position pos:line="329" pos:column="12"/></name> <operator pos:line="329" pos:column="13">=<pos:position pos:line="329" pos:column="14"/></operator> <call><name pos:line="329" pos:column="15">strlen<pos:position pos:line="329" pos:column="21"/></name><argument_list pos:line="329" pos:column="21">(<argument><expr><name><name pos:line="329" pos:column="22">elts<pos:position pos:line="329" pos:column="26"/></name><index pos:line="329" pos:column="26">[<expr><name pos:line="329" pos:column="27">i<pos:position pos:line="329" pos:column="28"/></name></expr>]<pos:position pos:line="329" pos:column="29"/></index></name><operator pos:line="329" pos:column="29">.<pos:position pos:line="329" pos:column="30"/></operator><name pos:line="329" pos:column="30">val<pos:position pos:line="329" pos:column="33"/></name></expr></argument>)<pos:position pos:line="329" pos:column="34"/></argument_list></call> <operator pos:line="329" pos:column="35">+<pos:position pos:line="329" pos:column="36"/></operator> <literal type="number" pos:line="329" pos:column="37">1<pos:position pos:line="329" pos:column="38"/></literal></expr>;<pos:position pos:line="329" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="330" pos:column="9">memcpy<pos:position pos:line="330" pos:column="15"/></name><argument_list pos:line="330" pos:column="15">(<argument><expr><operator pos:line="330" pos:column="16">&amp;<pos:position pos:line="330" pos:column="21"/></operator><name><name pos:line="330" pos:column="17">buf<pos:position pos:line="330" pos:column="20"/></name><index pos:line="330" pos:column="20">[<expr><name pos:line="330" pos:column="21">idx<pos:position pos:line="330" pos:column="24"/></name></expr>]<pos:position pos:line="330" pos:column="25"/></index></name></expr></argument>, <argument><expr><name><name pos:line="330" pos:column="27">elts<pos:position pos:line="330" pos:column="31"/></name><index pos:line="330" pos:column="31">[<expr><name pos:line="330" pos:column="32">i<pos:position pos:line="330" pos:column="33"/></name></expr>]<pos:position pos:line="330" pos:column="34"/></index></name><operator pos:line="330" pos:column="34">.<pos:position pos:line="330" pos:column="35"/></operator><name pos:line="330" pos:column="35">val<pos:position pos:line="330" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="330" pos:column="40">len<pos:position pos:line="330" pos:column="43"/></name></expr></argument>)<pos:position pos:line="330" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="330" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="331" pos:column="9">idx<pos:position pos:line="331" pos:column="12"/></name><operator pos:line="331" pos:column="12">+=<pos:position pos:line="331" pos:column="14"/></operator><name pos:line="331" pos:column="14">len<pos:position pos:line="331" pos:column="17"/></name></expr>;<pos:position pos:line="331" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="332" pos:column="6"/></block></for>
    <return pos:line="333" pos:column="5">return <expr><name pos:line="333" pos:column="12">APR_SUCCESS<pos:position pos:line="333" pos:column="23"/></name></expr>;<pos:position pos:line="333" pos:column="24"/></return>
}<pos:position pos:line="334" pos:column="2"/></block></function>
<function><specifier pos:line="335" pos:column="1">static<pos:position pos:line="335" pos:column="7"/></specifier> <type><name pos:line="335" pos:column="8">int<pos:position pos:line="335" pos:column="11"/></name></type> <name pos:line="335" pos:column="12">unserialize_table<pos:position pos:line="335" pos:column="29"/></name><parameter_list pos:line="335" pos:column="29">( <parameter><decl><type><name pos:line="335" pos:column="31">cache_header_tbl_t<pos:position pos:line="335" pos:column="49"/></name> <modifier pos:line="335" pos:column="50">*<pos:position pos:line="335" pos:column="51"/></modifier></type><name pos:line="335" pos:column="51">ctbl<pos:position pos:line="335" pos:column="55"/></name></decl></parameter>, 
                              <parameter><decl><type><name pos:line="336" pos:column="31">int<pos:position pos:line="336" pos:column="34"/></name></type> <name pos:line="336" pos:column="35">num_headers<pos:position pos:line="336" pos:column="46"/></name></decl></parameter>, 
                              <parameter><decl><type><name pos:line="337" pos:column="31">apr_table_t<pos:position pos:line="337" pos:column="42"/></name> <modifier pos:line="337" pos:column="43">*<pos:position pos:line="337" pos:column="44"/></modifier></type><name pos:line="337" pos:column="44">t<pos:position pos:line="337" pos:column="45"/></name></decl></parameter> )<pos:position pos:line="337" pos:column="47"/></parameter_list>
<block pos:line="338" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="339" pos:column="5">int<pos:position pos:line="339" pos:column="8"/></name></type> <name pos:line="339" pos:column="9">i<pos:position pos:line="339" pos:column="10"/></name></decl>;<pos:position pos:line="339" pos:column="11"/></decl_stmt>

    <for pos:line="341" pos:column="5">for <control pos:line="341" pos:column="9">(<init><expr><name pos:line="341" pos:column="10">i<pos:position pos:line="341" pos:column="11"/></name> <operator pos:line="341" pos:column="12">=<pos:position pos:line="341" pos:column="13"/></operator> <literal type="number" pos:line="341" pos:column="14">0<pos:position pos:line="341" pos:column="15"/></literal></expr>;<pos:position pos:line="341" pos:column="16"/></init> <condition><expr><name pos:line="341" pos:column="17">i<pos:position pos:line="341" pos:column="18"/></name> <operator pos:line="341" pos:column="19">&lt;<pos:position pos:line="341" pos:column="23"/></operator> <name pos:line="341" pos:column="21">num_headers<pos:position pos:line="341" pos:column="32"/></name></expr>;<pos:position pos:line="341" pos:column="33"/></condition> <incr><expr><operator pos:line="341" pos:column="34">++<pos:position pos:line="341" pos:column="36"/></operator><name pos:line="341" pos:column="36">i<pos:position pos:line="341" pos:column="37"/></name></expr></incr>)<pos:position pos:line="341" pos:column="38"/></control> <block pos:line="341" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="342" pos:column="9">apr_table_addn<pos:position pos:line="342" pos:column="23"/></name><argument_list pos:line="342" pos:column="23">(<argument><expr><name pos:line="342" pos:column="24">t<pos:position pos:line="342" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="342" pos:column="27">ctbl<pos:position pos:line="342" pos:column="31"/></name><index pos:line="342" pos:column="31">[<expr><name pos:line="342" pos:column="32">i<pos:position pos:line="342" pos:column="33"/></name></expr>]<pos:position pos:line="342" pos:column="34"/></index></name><operator pos:line="342" pos:column="34">.<pos:position pos:line="342" pos:column="35"/></operator><name pos:line="342" pos:column="35">hdr<pos:position pos:line="342" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="342" pos:column="40">ctbl<pos:position pos:line="342" pos:column="44"/></name><index pos:line="342" pos:column="44">[<expr><name pos:line="342" pos:column="45">i<pos:position pos:line="342" pos:column="46"/></name></expr>]<pos:position pos:line="342" pos:column="47"/></index></name><operator pos:line="342" pos:column="47">.<pos:position pos:line="342" pos:column="48"/></operator><name pos:line="342" pos:column="48">val<pos:position pos:line="342" pos:column="51"/></name></expr></argument>)<pos:position pos:line="342" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="342" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="343" pos:column="6"/></block></for> 

    <return pos:line="345" pos:column="5">return <expr><name pos:line="345" pos:column="12">APR_SUCCESS<pos:position pos:line="345" pos:column="23"/></name></expr>;<pos:position pos:line="345" pos:column="24"/></return>
}<pos:position pos:line="346" pos:column="2"/></block></function>
<comment type="block" pos:line="347" pos:column="1">/* Define request processing hook handlers */</comment>
<function><specifier pos:line="348" pos:column="1">static<pos:position pos:line="348" pos:column="7"/></specifier> <type><name pos:line="348" pos:column="8">int<pos:position pos:line="348" pos:column="11"/></name></type> <name pos:line="348" pos:column="12">remove_url<pos:position pos:line="348" pos:column="22"/></name><parameter_list pos:line="348" pos:column="22">(<parameter><decl><type><specifier pos:line="348" pos:column="23">const<pos:position pos:line="348" pos:column="28"/></specifier> <name pos:line="348" pos:column="29">char<pos:position pos:line="348" pos:column="33"/></name> <modifier pos:line="348" pos:column="34">*<pos:position pos:line="348" pos:column="35"/></modifier></type><name pos:line="348" pos:column="35">type<pos:position pos:line="348" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="348" pos:column="41">const<pos:position pos:line="348" pos:column="46"/></specifier> <name pos:line="348" pos:column="47">char<pos:position pos:line="348" pos:column="51"/></name> <modifier pos:line="348" pos:column="52">*<pos:position pos:line="348" pos:column="53"/></modifier></type><name pos:line="348" pos:column="53">key<pos:position pos:line="348" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="348" pos:column="57"/></parameter_list> 
<block pos:line="349" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="350" pos:column="5">cache_object_t<pos:position pos:line="350" pos:column="19"/></name> <modifier pos:line="350" pos:column="20">*<pos:position pos:line="350" pos:column="21"/></modifier></type><name pos:line="350" pos:column="21">obj<pos:position pos:line="350" pos:column="24"/></name></decl>;<pos:position pos:line="350" pos:column="25"/></decl_stmt>

    <if pos:line="352" pos:column="5">if <condition pos:line="352" pos:column="8">(<expr><call><name pos:line="352" pos:column="9">strcasecmp<pos:position pos:line="352" pos:column="19"/></name><argument_list pos:line="352" pos:column="19">(<argument><expr><name pos:line="352" pos:column="20">type<pos:position pos:line="352" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="352" pos:column="26">"mem"<pos:position pos:line="352" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="352" pos:column="32"/></argument_list></call> <operator pos:line="352" pos:column="33">&amp;&amp;<pos:position pos:line="352" pos:column="43"/></operator> <call><name pos:line="352" pos:column="36">strcasecmp<pos:position pos:line="352" pos:column="46"/></name><argument_list pos:line="352" pos:column="46">(<argument><expr><name pos:line="352" pos:column="47">type<pos:position pos:line="352" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="352" pos:column="53">"fd"<pos:position pos:line="352" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="352" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="352" pos:column="59"/></condition><then pos:line="352" pos:column="59"> <block pos:line="352" pos:column="60">{
        <return pos:line="353" pos:column="9">return <expr><name pos:line="353" pos:column="16">DECLINED<pos:position pos:line="353" pos:column="24"/></name></expr>;<pos:position pos:line="353" pos:column="25"/></return>
    }<pos:position pos:line="354" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="355" pos:column="5">/* Order of the operations is important to avoid race conditions. 
     * First, remove the object from the cache. Remember, all additions
     * deletions from the cache are protected by sconf-&gt;lock.
     * Increment the ref count on the object to indicate our thread
     * is accessing the object. Then set the cleanup flag on the
     * object. Remember, the cleanup flag is NEVER set on an
     * object in the hash table.  If an object has the cleanup
     * flag set, it is guaranteed to NOT be in the hash table.
     */</comment>
    <if pos:line="364" pos:column="5">if <condition pos:line="364" pos:column="8">(<expr><name><name pos:line="364" pos:column="9">sconf<pos:position pos:line="364" pos:column="14"/></name><operator pos:line="364" pos:column="14">-&gt;<pos:position pos:line="364" pos:column="19"/></operator><name pos:line="364" pos:column="16">lock<pos:position pos:line="364" pos:column="20"/></name></name></expr>)<pos:position pos:line="364" pos:column="21"/></condition><then pos:line="364" pos:column="21"> <block pos:line="364" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="365" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="365" pos:column="30"/></name><argument_list pos:line="365" pos:column="30">(<argument><expr><name><name pos:line="365" pos:column="31">sconf<pos:position pos:line="365" pos:column="36"/></name><operator pos:line="365" pos:column="36">-&gt;<pos:position pos:line="365" pos:column="41"/></operator><name pos:line="365" pos:column="38">lock<pos:position pos:line="365" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="365" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="365" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="366" pos:column="6"/></block></then></if>
  
    <expr_stmt><expr><name pos:line="368" pos:column="5">obj<pos:position pos:line="368" pos:column="8"/></name> <operator pos:line="368" pos:column="9">=<pos:position pos:line="368" pos:column="10"/></operator> <call><name pos:line="368" pos:column="11">cache_find<pos:position pos:line="368" pos:column="21"/></name><argument_list pos:line="368" pos:column="21">(<argument><expr><name><name pos:line="368" pos:column="22">sconf<pos:position pos:line="368" pos:column="27"/></name><operator pos:line="368" pos:column="27">-&gt;<pos:position pos:line="368" pos:column="32"/></operator><name pos:line="368" pos:column="29">cache_cache<pos:position pos:line="368" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="368" pos:column="42">key<pos:position pos:line="368" pos:column="45"/></name></expr></argument>)<pos:position pos:line="368" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="368" pos:column="47"/></expr_stmt>       
    <if pos:line="369" pos:column="5">if <condition pos:line="369" pos:column="8">(<expr><name pos:line="369" pos:column="9">obj<pos:position pos:line="369" pos:column="12"/></name></expr>)<pos:position pos:line="369" pos:column="13"/></condition><then pos:line="369" pos:column="13"> <block pos:line="369" pos:column="14">{
        <decl_stmt><decl><type><name pos:line="370" pos:column="9">mem_cache_object_t<pos:position pos:line="370" pos:column="27"/></name> <modifier pos:line="370" pos:column="28">*<pos:position pos:line="370" pos:column="29"/></modifier></type><name pos:line="370" pos:column="29">mobj<pos:position pos:line="370" pos:column="33"/></name></decl>;<pos:position pos:line="370" pos:column="34"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="371" pos:column="9">cache_remove<pos:position pos:line="371" pos:column="21"/></name><argument_list pos:line="371" pos:column="21">(<argument><expr><name><name pos:line="371" pos:column="22">sconf<pos:position pos:line="371" pos:column="27"/></name><operator pos:line="371" pos:column="27">-&gt;<pos:position pos:line="371" pos:column="32"/></operator><name pos:line="371" pos:column="29">cache_cache<pos:position pos:line="371" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="42">obj<pos:position pos:line="371" pos:column="45"/></name></expr></argument>)<pos:position pos:line="371" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="371" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="372" pos:column="9">mobj<pos:position pos:line="372" pos:column="13"/></name> <operator pos:line="372" pos:column="14">=<pos:position pos:line="372" pos:column="15"/></operator> <operator pos:line="372" pos:column="16">(<pos:position pos:line="372" pos:column="17"/></operator><name pos:line="372" pos:column="17">mem_cache_object_t<pos:position pos:line="372" pos:column="35"/></name> <operator pos:line="372" pos:column="36">*<pos:position pos:line="372" pos:column="37"/></operator><operator pos:line="372" pos:column="37">)<pos:position pos:line="372" pos:column="38"/></operator> <name><name pos:line="372" pos:column="39">obj<pos:position pos:line="372" pos:column="42"/></name><operator pos:line="372" pos:column="42">-&gt;<pos:position pos:line="372" pos:column="47"/></operator><name pos:line="372" pos:column="44">vobj<pos:position pos:line="372" pos:column="48"/></name></name></expr>;<pos:position pos:line="372" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="373" pos:column="9">sconf<pos:position pos:line="373" pos:column="14"/></name><operator pos:line="373" pos:column="14">-&gt;<pos:position pos:line="373" pos:column="19"/></operator><name pos:line="373" pos:column="16">object_cnt<pos:position pos:line="373" pos:column="26"/></name></name><operator pos:line="373" pos:column="26">--<pos:position pos:line="373" pos:column="28"/></operator></expr>;<pos:position pos:line="373" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="374" pos:column="9">sconf<pos:position pos:line="374" pos:column="14"/></name><operator pos:line="374" pos:column="14">-&gt;<pos:position pos:line="374" pos:column="19"/></operator><name pos:line="374" pos:column="16">cache_size<pos:position pos:line="374" pos:column="26"/></name></name> <operator pos:line="374" pos:column="27">-=<pos:position pos:line="374" pos:column="29"/></operator> <name><name pos:line="374" pos:column="30">mobj<pos:position pos:line="374" pos:column="34"/></name><operator pos:line="374" pos:column="34">-&gt;<pos:position pos:line="374" pos:column="39"/></operator><name pos:line="374" pos:column="36">m_len<pos:position pos:line="374" pos:column="41"/></name></name></expr>;<pos:position pos:line="374" pos:column="42"/></expr_stmt>

<cpp:ifdef pos:line="376" pos:column="1">#<cpp:directive pos:line="376" pos:column="2">ifdef<pos:position pos:line="376" pos:column="7"/></cpp:directive> <name pos:line="376" pos:column="8">USE_ATOMICS<pos:position pos:line="376" pos:column="19"/></name></cpp:ifdef>
        <comment type="block" pos:line="377" pos:column="9">/* Refcount increment in this case MUST be made under 
         * protection of the lock 
         */</comment>
        <expr_stmt><expr><call><name pos:line="380" pos:column="9">apr_atomic_inc<pos:position pos:line="380" pos:column="23"/></name><argument_list pos:line="380" pos:column="23">(<argument><expr><operator pos:line="380" pos:column="24">&amp;<pos:position pos:line="380" pos:column="29"/></operator><name><name pos:line="380" pos:column="25">obj<pos:position pos:line="380" pos:column="28"/></name><operator pos:line="380" pos:column="28">-&gt;<pos:position pos:line="380" pos:column="33"/></operator><name pos:line="380" pos:column="30">refcount<pos:position pos:line="380" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="380" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="380" pos:column="40"/></expr_stmt>
<cpp:else pos:line="381" pos:column="1">#<cpp:directive pos:line="381" pos:column="2">else<pos:position pos:line="381" pos:column="6"/></cpp:directive></cpp:else>
        <if pos:line="382" pos:column="9">if <condition pos:line="382" pos:column="12">(<expr><operator pos:line="382" pos:column="13">!<pos:position pos:line="382" pos:column="14"/></operator><name><name pos:line="382" pos:column="14">obj<pos:position pos:line="382" pos:column="17"/></name><operator pos:line="382" pos:column="17">-&gt;<pos:position pos:line="382" pos:column="22"/></operator><name pos:line="382" pos:column="19">refcount<pos:position pos:line="382" pos:column="27"/></name></name></expr>)<pos:position pos:line="382" pos:column="28"/></condition><then pos:line="382" pos:column="28"> <block pos:line="382" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="383" pos:column="13">cleanup_cache_object<pos:position pos:line="383" pos:column="33"/></name><argument_list pos:line="383" pos:column="33">(<argument><expr><name pos:line="383" pos:column="34">obj<pos:position pos:line="383" pos:column="37"/></name></expr></argument>)<pos:position pos:line="383" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="383" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="384" pos:column="13">obj<pos:position pos:line="384" pos:column="16"/></name> <operator pos:line="384" pos:column="17">=<pos:position pos:line="384" pos:column="18"/></operator> <name pos:line="384" pos:column="19">NULL<pos:position pos:line="384" pos:column="23"/></name></expr>;<pos:position pos:line="384" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="385" pos:column="10"/></block></then></if>
<cpp:endif pos:line="386" pos:column="1">#<cpp:directive pos:line="386" pos:column="2">endif<pos:position pos:line="386" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="387" pos:column="9">if <condition pos:line="387" pos:column="12">(<expr><name pos:line="387" pos:column="13">obj<pos:position pos:line="387" pos:column="16"/></name></expr>)<pos:position pos:line="387" pos:column="17"/></condition><then pos:line="387" pos:column="17"> <block pos:line="387" pos:column="18">{
            <expr_stmt><expr><name><name pos:line="388" pos:column="13">obj<pos:position pos:line="388" pos:column="16"/></name><operator pos:line="388" pos:column="16">-&gt;<pos:position pos:line="388" pos:column="21"/></operator><name pos:line="388" pos:column="18">cleanup<pos:position pos:line="388" pos:column="25"/></name></name> <operator pos:line="388" pos:column="26">=<pos:position pos:line="388" pos:column="27"/></operator> <literal type="number" pos:line="388" pos:column="28">1<pos:position pos:line="388" pos:column="29"/></literal></expr>;<pos:position pos:line="388" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="389" pos:column="10"/></block></then></if>
    }<pos:position pos:line="390" pos:column="6"/></block></then></if>
    <if pos:line="391" pos:column="5">if <condition pos:line="391" pos:column="8">(<expr><name><name pos:line="391" pos:column="9">sconf<pos:position pos:line="391" pos:column="14"/></name><operator pos:line="391" pos:column="14">-&gt;<pos:position pos:line="391" pos:column="19"/></operator><name pos:line="391" pos:column="16">lock<pos:position pos:line="391" pos:column="20"/></name></name></expr>)<pos:position pos:line="391" pos:column="21"/></condition><then pos:line="391" pos:column="21"> <block pos:line="391" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="392" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="392" pos:column="32"/></name><argument_list pos:line="392" pos:column="32">(<argument><expr><name><name pos:line="392" pos:column="33">sconf<pos:position pos:line="392" pos:column="38"/></name><operator pos:line="392" pos:column="38">-&gt;<pos:position pos:line="392" pos:column="43"/></operator><name pos:line="392" pos:column="40">lock<pos:position pos:line="392" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="392" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="392" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="393" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="394" pos:column="1">#<cpp:directive pos:line="394" pos:column="2">ifdef<pos:position pos:line="394" pos:column="7"/></cpp:directive> <name pos:line="394" pos:column="8">USE_ATOMICS<pos:position pos:line="394" pos:column="19"/></name></cpp:ifdef>
    <if pos:line="395" pos:column="5">if <condition pos:line="395" pos:column="8">(<expr><name pos:line="395" pos:column="9">obj<pos:position pos:line="395" pos:column="12"/></name></expr>)<pos:position pos:line="395" pos:column="13"/></condition><then pos:line="395" pos:column="13"> <block pos:line="395" pos:column="14">{
        <if pos:line="396" pos:column="9">if <condition pos:line="396" pos:column="12">(<expr><operator pos:line="396" pos:column="13">!<pos:position pos:line="396" pos:column="14"/></operator><call><name pos:line="396" pos:column="14">apr_atomic_dec<pos:position pos:line="396" pos:column="28"/></name><argument_list pos:line="396" pos:column="28">(<argument><expr><operator pos:line="396" pos:column="29">&amp;<pos:position pos:line="396" pos:column="34"/></operator><name><name pos:line="396" pos:column="30">obj<pos:position pos:line="396" pos:column="33"/></name><operator pos:line="396" pos:column="33">-&gt;<pos:position pos:line="396" pos:column="38"/></operator><name pos:line="396" pos:column="35">refcount<pos:position pos:line="396" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="396" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="396" pos:column="45"/></condition><then pos:line="396" pos:column="45"> <block pos:line="396" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="397" pos:column="13">cleanup_cache_object<pos:position pos:line="397" pos:column="33"/></name><argument_list pos:line="397" pos:column="33">(<argument><expr><name pos:line="397" pos:column="34">obj<pos:position pos:line="397" pos:column="37"/></name></expr></argument>)<pos:position pos:line="397" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="397" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="398" pos:column="10"/></block></then></if>
    }<pos:position pos:line="399" pos:column="6"/></block></then></if>
<cpp:endif pos:line="400" pos:column="1">#<cpp:directive pos:line="400" pos:column="2">endif<pos:position pos:line="400" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="401" pos:column="5">return <expr><name pos:line="401" pos:column="12">OK<pos:position pos:line="401" pos:column="14"/></name></expr>;<pos:position pos:line="401" pos:column="15"/></return>
}<pos:position pos:line="402" pos:column="2"/></block></function>

<function><specifier pos:line="404" pos:column="1">static<pos:position pos:line="404" pos:column="7"/></specifier> <type><name pos:line="404" pos:column="8">apr_status_t<pos:position pos:line="404" pos:column="20"/></name></type> <name pos:line="404" pos:column="21">read_headers<pos:position pos:line="404" pos:column="33"/></name><parameter_list pos:line="404" pos:column="33">(<parameter><decl><type><name pos:line="404" pos:column="34">cache_handle_t<pos:position pos:line="404" pos:column="48"/></name> <modifier pos:line="404" pos:column="49">*<pos:position pos:line="404" pos:column="50"/></modifier></type><name pos:line="404" pos:column="50">h<pos:position pos:line="404" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="404" pos:column="53">request_rec<pos:position pos:line="404" pos:column="64"/></name> <modifier pos:line="404" pos:column="65">*<pos:position pos:line="404" pos:column="66"/></modifier></type><name pos:line="404" pos:column="66">r<pos:position pos:line="404" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="404" pos:column="68"/></parameter_list> 
<block pos:line="405" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="406" pos:column="5">int<pos:position pos:line="406" pos:column="8"/></name></type> <name pos:line="406" pos:column="9">rc<pos:position pos:line="406" pos:column="11"/></name></decl>;<pos:position pos:line="406" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="407" pos:column="5">mem_cache_object_t<pos:position pos:line="407" pos:column="23"/></name> <modifier pos:line="407" pos:column="24">*<pos:position pos:line="407" pos:column="25"/></modifier></type><name pos:line="407" pos:column="25">mobj<pos:position pos:line="407" pos:column="29"/></name> <init pos:line="407" pos:column="30">= <expr><operator pos:line="407" pos:column="32">(<pos:position pos:line="407" pos:column="33"/></operator><name pos:line="407" pos:column="33">mem_cache_object_t<pos:position pos:line="407" pos:column="51"/></name><operator pos:line="407" pos:column="51">*<pos:position pos:line="407" pos:column="52"/></operator><operator pos:line="407" pos:column="52">)<pos:position pos:line="407" pos:column="53"/></operator> <name><name pos:line="407" pos:column="54">h<pos:position pos:line="407" pos:column="55"/></name><operator pos:line="407" pos:column="55">-&gt;<pos:position pos:line="407" pos:column="60"/></operator><name pos:line="407" pos:column="57">cache_obj<pos:position pos:line="407" pos:column="66"/></name><operator pos:line="407" pos:column="66">-&gt;<pos:position pos:line="407" pos:column="71"/></operator><name pos:line="407" pos:column="68">vobj<pos:position pos:line="407" pos:column="72"/></name></name></expr></init></decl>;<pos:position pos:line="407" pos:column="73"/></decl_stmt>
 
    <expr_stmt><expr><name><name pos:line="409" pos:column="5">h<pos:position pos:line="409" pos:column="6"/></name><operator pos:line="409" pos:column="6">-&gt;<pos:position pos:line="409" pos:column="11"/></operator><name pos:line="409" pos:column="8">req_hdrs<pos:position pos:line="409" pos:column="16"/></name></name> <operator pos:line="409" pos:column="17">=<pos:position pos:line="409" pos:column="18"/></operator> <call><name pos:line="409" pos:column="19">apr_table_make<pos:position pos:line="409" pos:column="33"/></name><argument_list pos:line="409" pos:column="33">(<argument><expr><name><name pos:line="409" pos:column="34">r<pos:position pos:line="409" pos:column="35"/></name><operator pos:line="409" pos:column="35">-&gt;<pos:position pos:line="409" pos:column="40"/></operator><name pos:line="409" pos:column="37">pool<pos:position pos:line="409" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="409" pos:column="43">mobj<pos:position pos:line="409" pos:column="47"/></name><operator pos:line="409" pos:column="47">-&gt;<pos:position pos:line="409" pos:column="52"/></operator><name pos:line="409" pos:column="49">num_req_hdrs<pos:position pos:line="409" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="409" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="409" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="410" pos:column="5">r<pos:position pos:line="410" pos:column="6"/></name><operator pos:line="410" pos:column="6">-&gt;<pos:position pos:line="410" pos:column="11"/></operator><name pos:line="410" pos:column="8">headers_out<pos:position pos:line="410" pos:column="19"/></name></name> <operator pos:line="410" pos:column="20">=<pos:position pos:line="410" pos:column="21"/></operator> <call><name pos:line="410" pos:column="22">apr_table_make<pos:position pos:line="410" pos:column="36"/></name><argument_list pos:line="410" pos:column="36">(<argument><expr><name><name pos:line="410" pos:column="37">r<pos:position pos:line="410" pos:column="38"/></name><operator pos:line="410" pos:column="38">-&gt;<pos:position pos:line="410" pos:column="43"/></operator><name pos:line="410" pos:column="40">pool<pos:position pos:line="410" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="410" pos:column="46">mobj<pos:position pos:line="410" pos:column="50"/></name><operator pos:line="410" pos:column="50">-&gt;<pos:position pos:line="410" pos:column="55"/></operator><name pos:line="410" pos:column="52">num_header_out<pos:position pos:line="410" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="410" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="410" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="411" pos:column="5">r<pos:position pos:line="411" pos:column="6"/></name><operator pos:line="411" pos:column="6">-&gt;<pos:position pos:line="411" pos:column="11"/></operator><name pos:line="411" pos:column="8">subprocess_env<pos:position pos:line="411" pos:column="22"/></name></name> <operator pos:line="411" pos:column="23">=<pos:position pos:line="411" pos:column="24"/></operator> <call><name pos:line="411" pos:column="25">apr_table_make<pos:position pos:line="411" pos:column="39"/></name><argument_list pos:line="411" pos:column="39">(<argument><expr><name><name pos:line="411" pos:column="40">r<pos:position pos:line="411" pos:column="41"/></name><operator pos:line="411" pos:column="41">-&gt;<pos:position pos:line="411" pos:column="46"/></operator><name pos:line="411" pos:column="43">pool<pos:position pos:line="411" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="411" pos:column="49">mobj<pos:position pos:line="411" pos:column="53"/></name><operator pos:line="411" pos:column="53">-&gt;<pos:position pos:line="411" pos:column="58"/></operator><name pos:line="411" pos:column="55">num_subprocess_env<pos:position pos:line="411" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="411" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="411" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="412" pos:column="5">r<pos:position pos:line="412" pos:column="6"/></name><operator pos:line="412" pos:column="6">-&gt;<pos:position pos:line="412" pos:column="11"/></operator><name pos:line="412" pos:column="8">notes<pos:position pos:line="412" pos:column="13"/></name></name> <operator pos:line="412" pos:column="14">=<pos:position pos:line="412" pos:column="15"/></operator> <call><name pos:line="412" pos:column="16">apr_table_make<pos:position pos:line="412" pos:column="30"/></name><argument_list pos:line="412" pos:column="30">(<argument><expr><name><name pos:line="412" pos:column="31">r<pos:position pos:line="412" pos:column="32"/></name><operator pos:line="412" pos:column="32">-&gt;<pos:position pos:line="412" pos:column="37"/></operator><name pos:line="412" pos:column="34">pool<pos:position pos:line="412" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="412" pos:column="40">mobj<pos:position pos:line="412" pos:column="44"/></name><operator pos:line="412" pos:column="44">-&gt;<pos:position pos:line="412" pos:column="49"/></operator><name pos:line="412" pos:column="46">num_notes<pos:position pos:line="412" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="412" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="412" pos:column="57"/></expr_stmt>

    <expr_stmt><expr><name pos:line="414" pos:column="5">rc<pos:position pos:line="414" pos:column="7"/></name> <operator pos:line="414" pos:column="8">=<pos:position pos:line="414" pos:column="9"/></operator> <call><name pos:line="414" pos:column="10">unserialize_table<pos:position pos:line="414" pos:column="27"/></name><argument_list pos:line="414" pos:column="27">(<argument><expr><name><name pos:line="414" pos:column="28">mobj<pos:position pos:line="414" pos:column="32"/></name><operator pos:line="414" pos:column="32">-&gt;<pos:position pos:line="414" pos:column="37"/></operator><name pos:line="414" pos:column="34">req_hdrs<pos:position pos:line="414" pos:column="42"/></name></name></expr></argument>,
                           <argument><expr><name><name pos:line="415" pos:column="28">mobj<pos:position pos:line="415" pos:column="32"/></name><operator pos:line="415" pos:column="32">-&gt;<pos:position pos:line="415" pos:column="37"/></operator><name pos:line="415" pos:column="34">num_req_hdrs<pos:position pos:line="415" pos:column="46"/></name></name></expr></argument>,
                           <argument><expr><name><name pos:line="416" pos:column="28">h<pos:position pos:line="416" pos:column="29"/></name><operator pos:line="416" pos:column="29">-&gt;<pos:position pos:line="416" pos:column="34"/></operator><name pos:line="416" pos:column="31">req_hdrs<pos:position pos:line="416" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="416" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="416" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="417" pos:column="5">rc<pos:position pos:line="417" pos:column="7"/></name> <operator pos:line="417" pos:column="8">=<pos:position pos:line="417" pos:column="9"/></operator> <call><name pos:line="417" pos:column="10">unserialize_table<pos:position pos:line="417" pos:column="27"/></name><argument_list pos:line="417" pos:column="27">( <argument><expr><name><name pos:line="417" pos:column="29">mobj<pos:position pos:line="417" pos:column="33"/></name><operator pos:line="417" pos:column="33">-&gt;<pos:position pos:line="417" pos:column="38"/></operator><name pos:line="417" pos:column="35">header_out<pos:position pos:line="417" pos:column="45"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="418" pos:column="29">mobj<pos:position pos:line="418" pos:column="33"/></name><operator pos:line="418" pos:column="33">-&gt;<pos:position pos:line="418" pos:column="38"/></operator><name pos:line="418" pos:column="35">num_header_out<pos:position pos:line="418" pos:column="49"/></name></name></expr></argument>, 
                            <argument><expr><name><name pos:line="419" pos:column="29">r<pos:position pos:line="419" pos:column="30"/></name><operator pos:line="419" pos:column="30">-&gt;<pos:position pos:line="419" pos:column="35"/></operator><name pos:line="419" pos:column="32">headers_out<pos:position pos:line="419" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="419" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="419" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="420" pos:column="5">rc<pos:position pos:line="420" pos:column="7"/></name> <operator pos:line="420" pos:column="8">=<pos:position pos:line="420" pos:column="9"/></operator> <call><name pos:line="420" pos:column="10">unserialize_table<pos:position pos:line="420" pos:column="27"/></name><argument_list pos:line="420" pos:column="27">( <argument><expr><name><name pos:line="420" pos:column="29">mobj<pos:position pos:line="420" pos:column="33"/></name><operator pos:line="420" pos:column="33">-&gt;<pos:position pos:line="420" pos:column="38"/></operator><name pos:line="420" pos:column="35">subprocess_env<pos:position pos:line="420" pos:column="49"/></name></name></expr></argument>, 
                            <argument><expr><name><name pos:line="421" pos:column="29">mobj<pos:position pos:line="421" pos:column="33"/></name><operator pos:line="421" pos:column="33">-&gt;<pos:position pos:line="421" pos:column="38"/></operator><name pos:line="421" pos:column="35">num_subprocess_env<pos:position pos:line="421" pos:column="53"/></name></name></expr></argument>, 
                            <argument><expr><name><name pos:line="422" pos:column="29">r<pos:position pos:line="422" pos:column="30"/></name><operator pos:line="422" pos:column="30">-&gt;<pos:position pos:line="422" pos:column="35"/></operator><name pos:line="422" pos:column="32">subprocess_env<pos:position pos:line="422" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="422" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="422" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><name pos:line="423" pos:column="5">rc<pos:position pos:line="423" pos:column="7"/></name> <operator pos:line="423" pos:column="8">=<pos:position pos:line="423" pos:column="9"/></operator> <call><name pos:line="423" pos:column="10">unserialize_table<pos:position pos:line="423" pos:column="27"/></name><argument_list pos:line="423" pos:column="27">( <argument><expr><name><name pos:line="423" pos:column="29">mobj<pos:position pos:line="423" pos:column="33"/></name><operator pos:line="423" pos:column="33">-&gt;<pos:position pos:line="423" pos:column="38"/></operator><name pos:line="423" pos:column="35">notes<pos:position pos:line="423" pos:column="40"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="424" pos:column="29">mobj<pos:position pos:line="424" pos:column="33"/></name><operator pos:line="424" pos:column="33">-&gt;<pos:position pos:line="424" pos:column="38"/></operator><name pos:line="424" pos:column="35">num_notes<pos:position pos:line="424" pos:column="44"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="425" pos:column="29">r<pos:position pos:line="425" pos:column="30"/></name><operator pos:line="425" pos:column="30">-&gt;<pos:position pos:line="425" pos:column="35"/></operator><name pos:line="425" pos:column="32">notes<pos:position pos:line="425" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="425" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="425" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="427" pos:column="5">/* Content-Type: header may not be set if content is local since
     * CACHE_IN runs before header filters....
     */</comment>
    <expr_stmt><expr><call><name pos:line="430" pos:column="5">ap_set_content_type<pos:position pos:line="430" pos:column="24"/></name><argument_list pos:line="430" pos:column="24">(<argument><expr><name pos:line="430" pos:column="25">r<pos:position pos:line="430" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="430" pos:column="28">apr_pstrdup<pos:position pos:line="430" pos:column="39"/></name><argument_list pos:line="430" pos:column="39">(<argument><expr><name><name pos:line="430" pos:column="40">r<pos:position pos:line="430" pos:column="41"/></name><operator pos:line="430" pos:column="41">-&gt;<pos:position pos:line="430" pos:column="46"/></operator><name pos:line="430" pos:column="43">pool<pos:position pos:line="430" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="430" pos:column="49">h<pos:position pos:line="430" pos:column="50"/></name><operator pos:line="430" pos:column="50">-&gt;<pos:position pos:line="430" pos:column="55"/></operator><name pos:line="430" pos:column="52">cache_obj<pos:position pos:line="430" pos:column="61"/></name><operator pos:line="430" pos:column="61">-&gt;<pos:position pos:line="430" pos:column="66"/></operator><name pos:line="430" pos:column="63">info<pos:position pos:line="430" pos:column="67"/></name><operator pos:line="430" pos:column="67">.<pos:position pos:line="430" pos:column="68"/></operator><name pos:line="430" pos:column="68">content_type<pos:position pos:line="430" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="430" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="430" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="430" pos:column="83"/></expr_stmt>

    <return pos:line="432" pos:column="5">return <expr><name pos:line="432" pos:column="12">rc<pos:position pos:line="432" pos:column="14"/></name></expr>;<pos:position pos:line="432" pos:column="15"/></return>
}<pos:position pos:line="433" pos:column="2"/></block></function>

<function><specifier pos:line="435" pos:column="1">static<pos:position pos:line="435" pos:column="7"/></specifier> <type><name pos:line="435" pos:column="8">apr_status_t<pos:position pos:line="435" pos:column="20"/></name></type> <name pos:line="435" pos:column="21">read_body<pos:position pos:line="435" pos:column="30"/></name><parameter_list pos:line="435" pos:column="30">(<parameter><decl><type><name pos:line="435" pos:column="31">cache_handle_t<pos:position pos:line="435" pos:column="45"/></name> <modifier pos:line="435" pos:column="46">*<pos:position pos:line="435" pos:column="47"/></modifier></type><name pos:line="435" pos:column="47">h<pos:position pos:line="435" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="435" pos:column="50">apr_pool_t<pos:position pos:line="435" pos:column="60"/></name> <modifier pos:line="435" pos:column="61">*<pos:position pos:line="435" pos:column="62"/></modifier></type><name pos:line="435" pos:column="62">p<pos:position pos:line="435" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="435" pos:column="65">apr_bucket_brigade<pos:position pos:line="435" pos:column="83"/></name> <modifier pos:line="435" pos:column="84">*<pos:position pos:line="435" pos:column="85"/></modifier></type><name pos:line="435" pos:column="85">bb<pos:position pos:line="435" pos:column="87"/></name></decl></parameter>)<pos:position pos:line="435" pos:column="88"/></parameter_list> 
<block pos:line="436" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="437" pos:column="5">apr_bucket<pos:position pos:line="437" pos:column="15"/></name> <modifier pos:line="437" pos:column="16">*<pos:position pos:line="437" pos:column="17"/></modifier></type><name pos:line="437" pos:column="17">b<pos:position pos:line="437" pos:column="18"/></name></decl>;<pos:position pos:line="437" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="438" pos:column="5">mem_cache_object_t<pos:position pos:line="438" pos:column="23"/></name> <modifier pos:line="438" pos:column="24">*<pos:position pos:line="438" pos:column="25"/></modifier></type><name pos:line="438" pos:column="25">mobj<pos:position pos:line="438" pos:column="29"/></name> <init pos:line="438" pos:column="30">= <expr><operator pos:line="438" pos:column="32">(<pos:position pos:line="438" pos:column="33"/></operator><name pos:line="438" pos:column="33">mem_cache_object_t<pos:position pos:line="438" pos:column="51"/></name><operator pos:line="438" pos:column="51">*<pos:position pos:line="438" pos:column="52"/></operator><operator pos:line="438" pos:column="52">)<pos:position pos:line="438" pos:column="53"/></operator> <name><name pos:line="438" pos:column="54">h<pos:position pos:line="438" pos:column="55"/></name><operator pos:line="438" pos:column="55">-&gt;<pos:position pos:line="438" pos:column="60"/></operator><name pos:line="438" pos:column="57">cache_obj<pos:position pos:line="438" pos:column="66"/></name><operator pos:line="438" pos:column="66">-&gt;<pos:position pos:line="438" pos:column="71"/></operator><name pos:line="438" pos:column="68">vobj<pos:position pos:line="438" pos:column="72"/></name></name></expr></init></decl>;<pos:position pos:line="438" pos:column="73"/></decl_stmt>

    <if pos:line="440" pos:column="5">if <condition pos:line="440" pos:column="8">(<expr><name><name pos:line="440" pos:column="9">mobj<pos:position pos:line="440" pos:column="13"/></name><operator pos:line="440" pos:column="13">-&gt;<pos:position pos:line="440" pos:column="18"/></operator><name pos:line="440" pos:column="15">type<pos:position pos:line="440" pos:column="19"/></name></name> <operator pos:line="440" pos:column="20">==<pos:position pos:line="440" pos:column="22"/></operator> <name pos:line="440" pos:column="23">CACHE_TYPE_FILE<pos:position pos:line="440" pos:column="38"/></name></expr>)<pos:position pos:line="440" pos:column="39"/></condition><then pos:line="440" pos:column="39"> <block pos:line="440" pos:column="40">{
        <comment type="block" pos:line="441" pos:column="9">/* CACHE_TYPE_FILE */</comment>
        <decl_stmt><decl><type><name pos:line="442" pos:column="9">apr_file_t<pos:position pos:line="442" pos:column="19"/></name> <modifier pos:line="442" pos:column="20">*<pos:position pos:line="442" pos:column="21"/></modifier></type><name pos:line="442" pos:column="21">file<pos:position pos:line="442" pos:column="25"/></name></decl>;<pos:position pos:line="442" pos:column="26"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="443" pos:column="9">apr_os_file_put<pos:position pos:line="443" pos:column="24"/></name><argument_list pos:line="443" pos:column="24">(<argument><expr><operator pos:line="443" pos:column="25">&amp;<pos:position pos:line="443" pos:column="30"/></operator><name pos:line="443" pos:column="26">file<pos:position pos:line="443" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="443" pos:column="32">&amp;<pos:position pos:line="443" pos:column="37"/></operator><name><name pos:line="443" pos:column="33">mobj<pos:position pos:line="443" pos:column="37"/></name><operator pos:line="443" pos:column="37">-&gt;<pos:position pos:line="443" pos:column="42"/></operator><name pos:line="443" pos:column="39">fd<pos:position pos:line="443" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="443" pos:column="43">mobj<pos:position pos:line="443" pos:column="47"/></name><operator pos:line="443" pos:column="47">-&gt;<pos:position pos:line="443" pos:column="52"/></operator><name pos:line="443" pos:column="49">flags<pos:position pos:line="443" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="443" pos:column="56">p<pos:position pos:line="443" pos:column="57"/></name></expr></argument>)<pos:position pos:line="443" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="443" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name pos:line="444" pos:column="9">b<pos:position pos:line="444" pos:column="10"/></name> <operator pos:line="444" pos:column="11">=<pos:position pos:line="444" pos:column="12"/></operator> <call><name pos:line="444" pos:column="13">apr_bucket_file_create<pos:position pos:line="444" pos:column="35"/></name><argument_list pos:line="444" pos:column="35">(<argument><expr><name pos:line="444" pos:column="36">file<pos:position pos:line="444" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="444" pos:column="42">0<pos:position pos:line="444" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="444" pos:column="45">mobj<pos:position pos:line="444" pos:column="49"/></name><operator pos:line="444" pos:column="49">-&gt;<pos:position pos:line="444" pos:column="54"/></operator><name pos:line="444" pos:column="51">m_len<pos:position pos:line="444" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="444" pos:column="58">p<pos:position pos:line="444" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="444" pos:column="61">bb<pos:position pos:line="444" pos:column="63"/></name><operator pos:line="444" pos:column="63">-&gt;<pos:position pos:line="444" pos:column="68"/></operator><name pos:line="444" pos:column="65">bucket_alloc<pos:position pos:line="444" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="444" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="444" pos:column="79"/></expr_stmt>
    }<pos:position pos:line="445" pos:column="6"/></block></then>
    <else pos:line="446" pos:column="5">else <block pos:line="446" pos:column="10">{
        <comment type="block" pos:line="447" pos:column="9">/* CACHE_TYPE_HEAP */</comment>
        <expr_stmt><expr><name pos:line="448" pos:column="9">b<pos:position pos:line="448" pos:column="10"/></name> <operator pos:line="448" pos:column="11">=<pos:position pos:line="448" pos:column="12"/></operator> <call><name pos:line="448" pos:column="13">apr_bucket_immortal_create<pos:position pos:line="448" pos:column="39"/></name><argument_list pos:line="448" pos:column="39">(<argument><expr><name><name pos:line="448" pos:column="40">mobj<pos:position pos:line="448" pos:column="44"/></name><operator pos:line="448" pos:column="44">-&gt;<pos:position pos:line="448" pos:column="49"/></operator><name pos:line="448" pos:column="46">m<pos:position pos:line="448" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="448" pos:column="49">mobj<pos:position pos:line="448" pos:column="53"/></name><operator pos:line="448" pos:column="53">-&gt;<pos:position pos:line="448" pos:column="58"/></operator><name pos:line="448" pos:column="55">m_len<pos:position pos:line="448" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="448" pos:column="62">bb<pos:position pos:line="448" pos:column="64"/></name><operator pos:line="448" pos:column="64">-&gt;<pos:position pos:line="448" pos:column="69"/></operator><name pos:line="448" pos:column="66">bucket_alloc<pos:position pos:line="448" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="448" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="448" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="449" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="450" pos:column="5">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="450" pos:column="28"/></name><argument_list pos:line="450" pos:column="28">(<argument><expr><name pos:line="450" pos:column="29">bb<pos:position pos:line="450" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="450" pos:column="33">b<pos:position pos:line="450" pos:column="34"/></name></expr></argument>)<pos:position pos:line="450" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="450" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="451" pos:column="5">b<pos:position pos:line="451" pos:column="6"/></name> <operator pos:line="451" pos:column="7">=<pos:position pos:line="451" pos:column="8"/></operator> <call><name pos:line="451" pos:column="9">apr_bucket_eos_create<pos:position pos:line="451" pos:column="30"/></name><argument_list pos:line="451" pos:column="30">(<argument><expr><name><name pos:line="451" pos:column="31">bb<pos:position pos:line="451" pos:column="33"/></name><operator pos:line="451" pos:column="33">-&gt;<pos:position pos:line="451" pos:column="38"/></operator><name pos:line="451" pos:column="35">bucket_alloc<pos:position pos:line="451" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="451" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="451" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="452" pos:column="5">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="452" pos:column="28"/></name><argument_list pos:line="452" pos:column="28">(<argument><expr><name pos:line="452" pos:column="29">bb<pos:position pos:line="452" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="452" pos:column="33">b<pos:position pos:line="452" pos:column="34"/></name></expr></argument>)<pos:position pos:line="452" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="452" pos:column="36"/></expr_stmt>

    <return pos:line="454" pos:column="5">return <expr><name pos:line="454" pos:column="12">APR_SUCCESS<pos:position pos:line="454" pos:column="23"/></name></expr>;<pos:position pos:line="454" pos:column="24"/></return>
}<pos:position pos:line="455" pos:column="2"/></block></function>


<function><specifier pos:line="458" pos:column="1">static<pos:position pos:line="458" pos:column="7"/></specifier> <type><name pos:line="458" pos:column="8">apr_status_t<pos:position pos:line="458" pos:column="20"/></name></type> <name pos:line="458" pos:column="21">write_headers<pos:position pos:line="458" pos:column="34"/></name><parameter_list pos:line="458" pos:column="34">(<parameter><decl><type><name pos:line="458" pos:column="35">cache_handle_t<pos:position pos:line="458" pos:column="49"/></name> <modifier pos:line="458" pos:column="50">*<pos:position pos:line="458" pos:column="51"/></modifier></type><name pos:line="458" pos:column="51">h<pos:position pos:line="458" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="458" pos:column="54">request_rec<pos:position pos:line="458" pos:column="65"/></name> <modifier pos:line="458" pos:column="66">*<pos:position pos:line="458" pos:column="67"/></modifier></type><name pos:line="458" pos:column="67">r<pos:position pos:line="458" pos:column="68"/></name></decl></parameter>, <parameter><decl><type><name pos:line="458" pos:column="70">cache_info<pos:position pos:line="458" pos:column="80"/></name> <modifier pos:line="458" pos:column="81">*<pos:position pos:line="458" pos:column="82"/></modifier></type><name pos:line="458" pos:column="82">info<pos:position pos:line="458" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="458" pos:column="87"/></parameter_list>
<block pos:line="459" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="460" pos:column="5">cache_object_t<pos:position pos:line="460" pos:column="19"/></name> <modifier pos:line="460" pos:column="20">*<pos:position pos:line="460" pos:column="21"/></modifier></type><name pos:line="460" pos:column="21">obj<pos:position pos:line="460" pos:column="24"/></name> <init pos:line="460" pos:column="25">= <expr><name><name pos:line="460" pos:column="27">h<pos:position pos:line="460" pos:column="28"/></name><operator pos:line="460" pos:column="28">-&gt;<pos:position pos:line="460" pos:column="33"/></operator><name pos:line="460" pos:column="30">cache_obj<pos:position pos:line="460" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="460" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="461" pos:column="5">mem_cache_object_t<pos:position pos:line="461" pos:column="23"/></name> <modifier pos:line="461" pos:column="24">*<pos:position pos:line="461" pos:column="25"/></modifier></type><name pos:line="461" pos:column="25">mobj<pos:position pos:line="461" pos:column="29"/></name> <init pos:line="461" pos:column="30">= <expr><operator pos:line="461" pos:column="32">(<pos:position pos:line="461" pos:column="33"/></operator><name pos:line="461" pos:column="33">mem_cache_object_t<pos:position pos:line="461" pos:column="51"/></name><operator pos:line="461" pos:column="51">*<pos:position pos:line="461" pos:column="52"/></operator><operator pos:line="461" pos:column="52">)<pos:position pos:line="461" pos:column="53"/></operator> <name><name pos:line="461" pos:column="54">obj<pos:position pos:line="461" pos:column="57"/></name><operator pos:line="461" pos:column="57">-&gt;<pos:position pos:line="461" pos:column="62"/></operator><name pos:line="461" pos:column="59">vobj<pos:position pos:line="461" pos:column="63"/></name></name></expr></init></decl>;<pos:position pos:line="461" pos:column="64"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="462" pos:column="5">int<pos:position pos:line="462" pos:column="8"/></name></type> <name pos:line="462" pos:column="9">rc<pos:position pos:line="462" pos:column="11"/></name></decl>;<pos:position pos:line="462" pos:column="12"/></decl_stmt>
 
    <comment type="block" pos:line="464" pos:column="5">/*
     * The cache needs to keep track of the following information: 
     * - Date, LastMod, Version, ReqTime, RespTime, ContentLength 
     * - The original request headers (for Vary) 
     * - The original response headers (for returning with a cached response) 
     * - The body of the message
     */</comment>
    <expr_stmt><expr><name pos:line="471" pos:column="5">rc<pos:position pos:line="471" pos:column="7"/></name> <operator pos:line="471" pos:column="8">=<pos:position pos:line="471" pos:column="9"/></operator> <call><name pos:line="471" pos:column="10">serialize_table<pos:position pos:line="471" pos:column="25"/></name><argument_list pos:line="471" pos:column="25">(<argument><expr><operator pos:line="471" pos:column="26">&amp;<pos:position pos:line="471" pos:column="31"/></operator><name><name pos:line="471" pos:column="27">mobj<pos:position pos:line="471" pos:column="31"/></name><operator pos:line="471" pos:column="31">-&gt;<pos:position pos:line="471" pos:column="36"/></operator><name pos:line="471" pos:column="33">req_hdrs<pos:position pos:line="471" pos:column="41"/></name></name></expr></argument>,
                         <argument><expr><operator pos:line="472" pos:column="26">&amp;<pos:position pos:line="472" pos:column="31"/></operator><name><name pos:line="472" pos:column="27">mobj<pos:position pos:line="472" pos:column="31"/></name><operator pos:line="472" pos:column="31">-&gt;<pos:position pos:line="472" pos:column="36"/></operator><name pos:line="472" pos:column="33">num_req_hdrs<pos:position pos:line="472" pos:column="45"/></name></name></expr></argument>,
                         <argument><expr><name><name pos:line="473" pos:column="26">r<pos:position pos:line="473" pos:column="27"/></name><operator pos:line="473" pos:column="27">-&gt;<pos:position pos:line="473" pos:column="32"/></operator><name pos:line="473" pos:column="29">headers_in<pos:position pos:line="473" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="473" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="473" pos:column="41"/></expr_stmt>
    <if pos:line="474" pos:column="5">if <condition pos:line="474" pos:column="8">(<expr><name pos:line="474" pos:column="9">rc<pos:position pos:line="474" pos:column="11"/></name> <operator pos:line="474" pos:column="12">!=<pos:position pos:line="474" pos:column="14"/></operator> <name pos:line="474" pos:column="15">APR_SUCCESS<pos:position pos:line="474" pos:column="26"/></name></expr>)<pos:position pos:line="474" pos:column="27"/></condition><then pos:line="474" pos:column="27"> <block pos:line="474" pos:column="28">{
        <return pos:line="475" pos:column="9">return <expr><name pos:line="475" pos:column="16">rc<pos:position pos:line="475" pos:column="18"/></name></expr>;<pos:position pos:line="475" pos:column="19"/></return>
    }<pos:position pos:line="476" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="478" pos:column="5">/* Precompute how much storage we need to hold the headers */</comment>
    <expr_stmt><expr><name pos:line="479" pos:column="5">rc<pos:position pos:line="479" pos:column="7"/></name> <operator pos:line="479" pos:column="8">=<pos:position pos:line="479" pos:column="9"/></operator> <call><name pos:line="479" pos:column="10">serialize_table<pos:position pos:line="479" pos:column="25"/></name><argument_list pos:line="479" pos:column="25">(<argument><expr><operator pos:line="479" pos:column="26">&amp;<pos:position pos:line="479" pos:column="31"/></operator><name><name pos:line="479" pos:column="27">mobj<pos:position pos:line="479" pos:column="31"/></name><operator pos:line="479" pos:column="31">-&gt;<pos:position pos:line="479" pos:column="36"/></operator><name pos:line="479" pos:column="33">header_out<pos:position pos:line="479" pos:column="43"/></name></name></expr></argument>, 
                         <argument><expr><operator pos:line="480" pos:column="26">&amp;<pos:position pos:line="480" pos:column="31"/></operator><name><name pos:line="480" pos:column="27">mobj<pos:position pos:line="480" pos:column="31"/></name><operator pos:line="480" pos:column="31">-&gt;<pos:position pos:line="480" pos:column="36"/></operator><name pos:line="480" pos:column="33">num_header_out<pos:position pos:line="480" pos:column="47"/></name></name></expr></argument>, 
                         <argument><expr><call><name pos:line="481" pos:column="26">ap_cache_cacheable_hdrs_out<pos:position pos:line="481" pos:column="53"/></name><argument_list pos:line="481" pos:column="53">(<argument><expr><name pos:line="481" pos:column="54">r<pos:position pos:line="481" pos:column="55"/></name></expr></argument>)<pos:position pos:line="481" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="481" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="481" pos:column="58"/></expr_stmt>   
    <if pos:line="482" pos:column="5">if <condition pos:line="482" pos:column="8">(<expr><name pos:line="482" pos:column="9">rc<pos:position pos:line="482" pos:column="11"/></name> <operator pos:line="482" pos:column="12">!=<pos:position pos:line="482" pos:column="14"/></operator> <name pos:line="482" pos:column="15">APR_SUCCESS<pos:position pos:line="482" pos:column="26"/></name></expr>)<pos:position pos:line="482" pos:column="27"/></condition><then pos:line="482" pos:column="27"> <block pos:line="482" pos:column="28">{
        <return pos:line="483" pos:column="9">return <expr><name pos:line="483" pos:column="16">rc<pos:position pos:line="483" pos:column="18"/></name></expr>;<pos:position pos:line="483" pos:column="19"/></return>
    }<pos:position pos:line="484" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="485" pos:column="5">rc<pos:position pos:line="485" pos:column="7"/></name> <operator pos:line="485" pos:column="8">=<pos:position pos:line="485" pos:column="9"/></operator> <call><name pos:line="485" pos:column="10">serialize_table<pos:position pos:line="485" pos:column="25"/></name><argument_list pos:line="485" pos:column="25">(<argument><expr><operator pos:line="485" pos:column="26">&amp;<pos:position pos:line="485" pos:column="31"/></operator><name><name pos:line="485" pos:column="27">mobj<pos:position pos:line="485" pos:column="31"/></name><operator pos:line="485" pos:column="31">-&gt;<pos:position pos:line="485" pos:column="36"/></operator><name pos:line="485" pos:column="33">subprocess_env<pos:position pos:line="485" pos:column="47"/></name></name></expr></argument>,
                         <argument><expr><operator pos:line="486" pos:column="26">&amp;<pos:position pos:line="486" pos:column="31"/></operator><name><name pos:line="486" pos:column="27">mobj<pos:position pos:line="486" pos:column="31"/></name><operator pos:line="486" pos:column="31">-&gt;<pos:position pos:line="486" pos:column="36"/></operator><name pos:line="486" pos:column="33">num_subprocess_env<pos:position pos:line="486" pos:column="51"/></name></name></expr></argument>, 
                         <argument><expr><name><name pos:line="487" pos:column="26">r<pos:position pos:line="487" pos:column="27"/></name><operator pos:line="487" pos:column="27">-&gt;<pos:position pos:line="487" pos:column="32"/></operator><name pos:line="487" pos:column="29">subprocess_env<pos:position pos:line="487" pos:column="43"/></name></name></expr></argument> )<pos:position pos:line="487" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="487" pos:column="46"/></expr_stmt>
    <if pos:line="488" pos:column="5">if <condition pos:line="488" pos:column="8">(<expr><name pos:line="488" pos:column="9">rc<pos:position pos:line="488" pos:column="11"/></name> <operator pos:line="488" pos:column="12">!=<pos:position pos:line="488" pos:column="14"/></operator> <name pos:line="488" pos:column="15">APR_SUCCESS<pos:position pos:line="488" pos:column="26"/></name></expr>)<pos:position pos:line="488" pos:column="27"/></condition><then pos:line="488" pos:column="27"> <block pos:line="488" pos:column="28">{
        <return pos:line="489" pos:column="9">return <expr><name pos:line="489" pos:column="16">rc<pos:position pos:line="489" pos:column="18"/></name></expr>;<pos:position pos:line="489" pos:column="19"/></return>
    }<pos:position pos:line="490" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="492" pos:column="5">rc<pos:position pos:line="492" pos:column="7"/></name> <operator pos:line="492" pos:column="8">=<pos:position pos:line="492" pos:column="9"/></operator> <call><name pos:line="492" pos:column="10">serialize_table<pos:position pos:line="492" pos:column="25"/></name><argument_list pos:line="492" pos:column="25">(<argument><expr><operator pos:line="492" pos:column="26">&amp;<pos:position pos:line="492" pos:column="31"/></operator><name><name pos:line="492" pos:column="27">mobj<pos:position pos:line="492" pos:column="31"/></name><operator pos:line="492" pos:column="31">-&gt;<pos:position pos:line="492" pos:column="36"/></operator><name pos:line="492" pos:column="33">notes<pos:position pos:line="492" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="492" pos:column="40">&amp;<pos:position pos:line="492" pos:column="45"/></operator><name><name pos:line="492" pos:column="41">mobj<pos:position pos:line="492" pos:column="45"/></name><operator pos:line="492" pos:column="45">-&gt;<pos:position pos:line="492" pos:column="50"/></operator><name pos:line="492" pos:column="47">num_notes<pos:position pos:line="492" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="492" pos:column="58">r<pos:position pos:line="492" pos:column="59"/></name><operator pos:line="492" pos:column="59">-&gt;<pos:position pos:line="492" pos:column="64"/></operator><name pos:line="492" pos:column="61">notes<pos:position pos:line="492" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="492" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="492" pos:column="68"/></expr_stmt>
    <if pos:line="493" pos:column="5">if <condition pos:line="493" pos:column="8">(<expr><name pos:line="493" pos:column="9">rc<pos:position pos:line="493" pos:column="11"/></name> <operator pos:line="493" pos:column="12">!=<pos:position pos:line="493" pos:column="14"/></operator> <name pos:line="493" pos:column="15">APR_SUCCESS<pos:position pos:line="493" pos:column="26"/></name></expr>)<pos:position pos:line="493" pos:column="27"/></condition><then pos:line="493" pos:column="27"> <block pos:line="493" pos:column="28">{
        <return pos:line="494" pos:column="9">return <expr><name pos:line="494" pos:column="16">rc<pos:position pos:line="494" pos:column="18"/></name></expr>;<pos:position pos:line="494" pos:column="19"/></return>
    }<pos:position pos:line="495" pos:column="6"/></block></then></if>
 
    <comment type="block" pos:line="497" pos:column="5">/* Init the info struct */</comment>
    <if pos:line="498" pos:column="5">if <condition pos:line="498" pos:column="8">(<expr><name><name pos:line="498" pos:column="9">info<pos:position pos:line="498" pos:column="13"/></name><operator pos:line="498" pos:column="13">-&gt;<pos:position pos:line="498" pos:column="18"/></operator><name pos:line="498" pos:column="15">date<pos:position pos:line="498" pos:column="19"/></name></name></expr>)<pos:position pos:line="498" pos:column="20"/></condition><then pos:line="498" pos:column="20"> <block pos:line="498" pos:column="21">{
        <expr_stmt><expr><name><name pos:line="499" pos:column="9">obj<pos:position pos:line="499" pos:column="12"/></name><operator pos:line="499" pos:column="12">-&gt;<pos:position pos:line="499" pos:column="17"/></operator><name pos:line="499" pos:column="14">info<pos:position pos:line="499" pos:column="18"/></name><operator pos:line="499" pos:column="18">.<pos:position pos:line="499" pos:column="19"/></operator><name pos:line="499" pos:column="19">date<pos:position pos:line="499" pos:column="23"/></name></name> <operator pos:line="499" pos:column="24">=<pos:position pos:line="499" pos:column="25"/></operator> <name><name pos:line="499" pos:column="26">info<pos:position pos:line="499" pos:column="30"/></name><operator pos:line="499" pos:column="30">-&gt;<pos:position pos:line="499" pos:column="35"/></operator><name pos:line="499" pos:column="32">date<pos:position pos:line="499" pos:column="36"/></name></name></expr>;<pos:position pos:line="499" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="500" pos:column="6"/></block></then></if>
    <if pos:line="501" pos:column="5">if <condition pos:line="501" pos:column="8">(<expr><name><name pos:line="501" pos:column="9">info<pos:position pos:line="501" pos:column="13"/></name><operator pos:line="501" pos:column="13">-&gt;<pos:position pos:line="501" pos:column="18"/></operator><name pos:line="501" pos:column="15">lastmod<pos:position pos:line="501" pos:column="22"/></name></name></expr>)<pos:position pos:line="501" pos:column="23"/></condition><then pos:line="501" pos:column="23"> <block pos:line="501" pos:column="24">{
        <expr_stmt><expr><name><name pos:line="502" pos:column="9">obj<pos:position pos:line="502" pos:column="12"/></name><operator pos:line="502" pos:column="12">-&gt;<pos:position pos:line="502" pos:column="17"/></operator><name pos:line="502" pos:column="14">info<pos:position pos:line="502" pos:column="18"/></name><operator pos:line="502" pos:column="18">.<pos:position pos:line="502" pos:column="19"/></operator><name pos:line="502" pos:column="19">lastmod<pos:position pos:line="502" pos:column="26"/></name></name> <operator pos:line="502" pos:column="27">=<pos:position pos:line="502" pos:column="28"/></operator> <name><name pos:line="502" pos:column="29">info<pos:position pos:line="502" pos:column="33"/></name><operator pos:line="502" pos:column="33">-&gt;<pos:position pos:line="502" pos:column="38"/></operator><name pos:line="502" pos:column="35">lastmod<pos:position pos:line="502" pos:column="42"/></name></name></expr>;<pos:position pos:line="502" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="503" pos:column="6"/></block></then></if>
    <if pos:line="504" pos:column="5">if <condition pos:line="504" pos:column="8">(<expr><name><name pos:line="504" pos:column="9">info<pos:position pos:line="504" pos:column="13"/></name><operator pos:line="504" pos:column="13">-&gt;<pos:position pos:line="504" pos:column="18"/></operator><name pos:line="504" pos:column="15">response_time<pos:position pos:line="504" pos:column="28"/></name></name></expr>)<pos:position pos:line="504" pos:column="29"/></condition><then pos:line="504" pos:column="29"> <block pos:line="504" pos:column="30">{
        <expr_stmt><expr><name><name pos:line="505" pos:column="9">obj<pos:position pos:line="505" pos:column="12"/></name><operator pos:line="505" pos:column="12">-&gt;<pos:position pos:line="505" pos:column="17"/></operator><name pos:line="505" pos:column="14">info<pos:position pos:line="505" pos:column="18"/></name><operator pos:line="505" pos:column="18">.<pos:position pos:line="505" pos:column="19"/></operator><name pos:line="505" pos:column="19">response_time<pos:position pos:line="505" pos:column="32"/></name></name> <operator pos:line="505" pos:column="33">=<pos:position pos:line="505" pos:column="34"/></operator> <name><name pos:line="505" pos:column="35">info<pos:position pos:line="505" pos:column="39"/></name><operator pos:line="505" pos:column="39">-&gt;<pos:position pos:line="505" pos:column="44"/></operator><name pos:line="505" pos:column="41">response_time<pos:position pos:line="505" pos:column="54"/></name></name></expr>;<pos:position pos:line="505" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="506" pos:column="6"/></block></then></if>
    <if pos:line="507" pos:column="5">if <condition pos:line="507" pos:column="8">(<expr><name><name pos:line="507" pos:column="9">info<pos:position pos:line="507" pos:column="13"/></name><operator pos:line="507" pos:column="13">-&gt;<pos:position pos:line="507" pos:column="18"/></operator><name pos:line="507" pos:column="15">request_time<pos:position pos:line="507" pos:column="27"/></name></name></expr>)<pos:position pos:line="507" pos:column="28"/></condition><then pos:line="507" pos:column="28"> <block pos:line="507" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="508" pos:column="9">obj<pos:position pos:line="508" pos:column="12"/></name><operator pos:line="508" pos:column="12">-&gt;<pos:position pos:line="508" pos:column="17"/></operator><name pos:line="508" pos:column="14">info<pos:position pos:line="508" pos:column="18"/></name><operator pos:line="508" pos:column="18">.<pos:position pos:line="508" pos:column="19"/></operator><name pos:line="508" pos:column="19">request_time<pos:position pos:line="508" pos:column="31"/></name></name> <operator pos:line="508" pos:column="32">=<pos:position pos:line="508" pos:column="33"/></operator> <name><name pos:line="508" pos:column="34">info<pos:position pos:line="508" pos:column="38"/></name><operator pos:line="508" pos:column="38">-&gt;<pos:position pos:line="508" pos:column="43"/></operator><name pos:line="508" pos:column="40">request_time<pos:position pos:line="508" pos:column="52"/></name></name></expr>;<pos:position pos:line="508" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="509" pos:column="6"/></block></then></if>
    <if pos:line="510" pos:column="5">if <condition pos:line="510" pos:column="8">(<expr><name><name pos:line="510" pos:column="9">info<pos:position pos:line="510" pos:column="13"/></name><operator pos:line="510" pos:column="13">-&gt;<pos:position pos:line="510" pos:column="18"/></operator><name pos:line="510" pos:column="15">expire<pos:position pos:line="510" pos:column="21"/></name></name></expr>)<pos:position pos:line="510" pos:column="22"/></condition><then pos:line="510" pos:column="22"> <block pos:line="510" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="511" pos:column="9">obj<pos:position pos:line="511" pos:column="12"/></name><operator pos:line="511" pos:column="12">-&gt;<pos:position pos:line="511" pos:column="17"/></operator><name pos:line="511" pos:column="14">info<pos:position pos:line="511" pos:column="18"/></name><operator pos:line="511" pos:column="18">.<pos:position pos:line="511" pos:column="19"/></operator><name pos:line="511" pos:column="19">expire<pos:position pos:line="511" pos:column="25"/></name></name> <operator pos:line="511" pos:column="26">=<pos:position pos:line="511" pos:column="27"/></operator> <name><name pos:line="511" pos:column="28">info<pos:position pos:line="511" pos:column="32"/></name><operator pos:line="511" pos:column="32">-&gt;<pos:position pos:line="511" pos:column="37"/></operator><name pos:line="511" pos:column="34">expire<pos:position pos:line="511" pos:column="40"/></name></name></expr>;<pos:position pos:line="511" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="512" pos:column="6"/></block></then></if>
    <if pos:line="513" pos:column="5">if <condition pos:line="513" pos:column="8">(<expr><name><name pos:line="513" pos:column="9">info<pos:position pos:line="513" pos:column="13"/></name><operator pos:line="513" pos:column="13">-&gt;<pos:position pos:line="513" pos:column="18"/></operator><name pos:line="513" pos:column="15">content_type<pos:position pos:line="513" pos:column="27"/></name></name></expr>)<pos:position pos:line="513" pos:column="28"/></condition><then pos:line="513" pos:column="28"> <block pos:line="513" pos:column="29">{
        <decl_stmt><decl><type><name pos:line="514" pos:column="9">apr_size_t<pos:position pos:line="514" pos:column="19"/></name></type> <name pos:line="514" pos:column="20">len<pos:position pos:line="514" pos:column="23"/></name> <init pos:line="514" pos:column="24">= <expr><call><name pos:line="514" pos:column="26">strlen<pos:position pos:line="514" pos:column="32"/></name><argument_list pos:line="514" pos:column="32">(<argument><expr><name><name pos:line="514" pos:column="33">info<pos:position pos:line="514" pos:column="37"/></name><operator pos:line="514" pos:column="37">-&gt;<pos:position pos:line="514" pos:column="42"/></operator><name pos:line="514" pos:column="39">content_type<pos:position pos:line="514" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="514" pos:column="52"/></argument_list></call> <operator pos:line="514" pos:column="53">+<pos:position pos:line="514" pos:column="54"/></operator> <literal type="number" pos:line="514" pos:column="55">1<pos:position pos:line="514" pos:column="56"/></literal></expr></init></decl>;<pos:position pos:line="514" pos:column="57"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="515" pos:column="9">obj<pos:position pos:line="515" pos:column="12"/></name><operator pos:line="515" pos:column="12">-&gt;<pos:position pos:line="515" pos:column="17"/></operator><name pos:line="515" pos:column="14">info<pos:position pos:line="515" pos:column="18"/></name><operator pos:line="515" pos:column="18">.<pos:position pos:line="515" pos:column="19"/></operator><name pos:line="515" pos:column="19">content_type<pos:position pos:line="515" pos:column="31"/></name></name> <operator pos:line="515" pos:column="32">=<pos:position pos:line="515" pos:column="33"/></operator> <operator pos:line="515" pos:column="34">(<pos:position pos:line="515" pos:column="35"/></operator><name pos:line="515" pos:column="35">char<pos:position pos:line="515" pos:column="39"/></name><operator pos:line="515" pos:column="39">*<pos:position pos:line="515" pos:column="40"/></operator><operator pos:line="515" pos:column="40">)<pos:position pos:line="515" pos:column="41"/></operator> <call><name pos:line="515" pos:column="42">malloc<pos:position pos:line="515" pos:column="48"/></name><argument_list pos:line="515" pos:column="48">(<argument><expr><name pos:line="515" pos:column="49">len<pos:position pos:line="515" pos:column="52"/></name></expr></argument>)<pos:position pos:line="515" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="515" pos:column="54"/></expr_stmt>
        <if pos:line="516" pos:column="9">if <condition pos:line="516" pos:column="12">(<expr><operator pos:line="516" pos:column="13">!<pos:position pos:line="516" pos:column="14"/></operator><name><name pos:line="516" pos:column="14">obj<pos:position pos:line="516" pos:column="17"/></name><operator pos:line="516" pos:column="17">-&gt;<pos:position pos:line="516" pos:column="22"/></operator><name pos:line="516" pos:column="19">info<pos:position pos:line="516" pos:column="23"/></name><operator pos:line="516" pos:column="23">.<pos:position pos:line="516" pos:column="24"/></operator><name pos:line="516" pos:column="24">content_type<pos:position pos:line="516" pos:column="36"/></name></name></expr>)<pos:position pos:line="516" pos:column="37"/></condition><then pos:line="516" pos:column="37"> <block pos:line="516" pos:column="38">{
            <return pos:line="517" pos:column="13">return <expr><name pos:line="517" pos:column="20">APR_ENOMEM<pos:position pos:line="517" pos:column="30"/></name></expr>;<pos:position pos:line="517" pos:column="31"/></return>
        }<pos:position pos:line="518" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="519" pos:column="9">memcpy<pos:position pos:line="519" pos:column="15"/></name><argument_list pos:line="519" pos:column="15">(<argument><expr><name><name pos:line="519" pos:column="16">obj<pos:position pos:line="519" pos:column="19"/></name><operator pos:line="519" pos:column="19">-&gt;<pos:position pos:line="519" pos:column="24"/></operator><name pos:line="519" pos:column="21">info<pos:position pos:line="519" pos:column="25"/></name><operator pos:line="519" pos:column="25">.<pos:position pos:line="519" pos:column="26"/></operator><name pos:line="519" pos:column="26">content_type<pos:position pos:line="519" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="519" pos:column="40">info<pos:position pos:line="519" pos:column="44"/></name><operator pos:line="519" pos:column="44">-&gt;<pos:position pos:line="519" pos:column="49"/></operator><name pos:line="519" pos:column="46">content_type<pos:position pos:line="519" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="519" pos:column="60">len<pos:position pos:line="519" pos:column="63"/></name></expr></argument>)<pos:position pos:line="519" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="519" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="520" pos:column="6"/></block></then></if>
    <if pos:line="521" pos:column="5">if <condition pos:line="521" pos:column="8">( <expr><name><name pos:line="521" pos:column="10">info<pos:position pos:line="521" pos:column="14"/></name><operator pos:line="521" pos:column="14">-&gt;<pos:position pos:line="521" pos:column="19"/></operator><name pos:line="521" pos:column="16">filename<pos:position pos:line="521" pos:column="24"/></name></name></expr>)<pos:position pos:line="521" pos:column="25"/></condition><then pos:line="521" pos:column="25"> <block pos:line="521" pos:column="26">{
        <decl_stmt><decl><type><name pos:line="522" pos:column="9">apr_size_t<pos:position pos:line="522" pos:column="19"/></name></type> <name pos:line="522" pos:column="20">len<pos:position pos:line="522" pos:column="23"/></name> <init pos:line="522" pos:column="24">= <expr><call><name pos:line="522" pos:column="26">strlen<pos:position pos:line="522" pos:column="32"/></name><argument_list pos:line="522" pos:column="32">(<argument><expr><name><name pos:line="522" pos:column="33">info<pos:position pos:line="522" pos:column="37"/></name><operator pos:line="522" pos:column="37">-&gt;<pos:position pos:line="522" pos:column="42"/></operator><name pos:line="522" pos:column="39">filename<pos:position pos:line="522" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="522" pos:column="48"/></argument_list></call> <operator pos:line="522" pos:column="49">+<pos:position pos:line="522" pos:column="50"/></operator> <literal type="number" pos:line="522" pos:column="51">1<pos:position pos:line="522" pos:column="52"/></literal></expr></init></decl>;<pos:position pos:line="522" pos:column="53"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="523" pos:column="9">obj<pos:position pos:line="523" pos:column="12"/></name><operator pos:line="523" pos:column="12">-&gt;<pos:position pos:line="523" pos:column="17"/></operator><name pos:line="523" pos:column="14">info<pos:position pos:line="523" pos:column="18"/></name><operator pos:line="523" pos:column="18">.<pos:position pos:line="523" pos:column="19"/></operator><name pos:line="523" pos:column="19">filename<pos:position pos:line="523" pos:column="27"/></name></name> <operator pos:line="523" pos:column="28">=<pos:position pos:line="523" pos:column="29"/></operator> <operator pos:line="523" pos:column="30">(<pos:position pos:line="523" pos:column="31"/></operator><name pos:line="523" pos:column="31">char<pos:position pos:line="523" pos:column="35"/></name><operator pos:line="523" pos:column="35">*<pos:position pos:line="523" pos:column="36"/></operator><operator pos:line="523" pos:column="36">)<pos:position pos:line="523" pos:column="37"/></operator> <call><name pos:line="523" pos:column="38">malloc<pos:position pos:line="523" pos:column="44"/></name><argument_list pos:line="523" pos:column="44">(<argument><expr><name pos:line="523" pos:column="45">len<pos:position pos:line="523" pos:column="48"/></name></expr></argument>)<pos:position pos:line="523" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="523" pos:column="50"/></expr_stmt>
        <if pos:line="524" pos:column="9">if <condition pos:line="524" pos:column="12">(<expr><operator pos:line="524" pos:column="13">!<pos:position pos:line="524" pos:column="14"/></operator><name><name pos:line="524" pos:column="14">obj<pos:position pos:line="524" pos:column="17"/></name><operator pos:line="524" pos:column="17">-&gt;<pos:position pos:line="524" pos:column="22"/></operator><name pos:line="524" pos:column="19">info<pos:position pos:line="524" pos:column="23"/></name><operator pos:line="524" pos:column="23">.<pos:position pos:line="524" pos:column="24"/></operator><name pos:line="524" pos:column="24">filename<pos:position pos:line="524" pos:column="32"/></name></name></expr> )<pos:position pos:line="524" pos:column="34"/></condition><then pos:line="524" pos:column="34"> <block pos:line="524" pos:column="35">{
            <return pos:line="525" pos:column="13">return <expr><name pos:line="525" pos:column="20">APR_ENOMEM<pos:position pos:line="525" pos:column="30"/></name></expr>;<pos:position pos:line="525" pos:column="31"/></return>
        }<pos:position pos:line="526" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="527" pos:column="9">memcpy<pos:position pos:line="527" pos:column="15"/></name><argument_list pos:line="527" pos:column="15">(<argument><expr><name><name pos:line="527" pos:column="16">obj<pos:position pos:line="527" pos:column="19"/></name><operator pos:line="527" pos:column="19">-&gt;<pos:position pos:line="527" pos:column="24"/></operator><name pos:line="527" pos:column="21">info<pos:position pos:line="527" pos:column="25"/></name><operator pos:line="527" pos:column="25">.<pos:position pos:line="527" pos:column="26"/></operator><name pos:line="527" pos:column="26">filename<pos:position pos:line="527" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="527" pos:column="36">info<pos:position pos:line="527" pos:column="40"/></name><operator pos:line="527" pos:column="40">-&gt;<pos:position pos:line="527" pos:column="45"/></operator><name pos:line="527" pos:column="42">filename<pos:position pos:line="527" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="527" pos:column="52">len<pos:position pos:line="527" pos:column="55"/></name></expr></argument>)<pos:position pos:line="527" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="527" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="528" pos:column="6"/></block></then></if>

    <return pos:line="530" pos:column="5">return <expr><name pos:line="530" pos:column="12">APR_SUCCESS<pos:position pos:line="530" pos:column="23"/></name></expr>;<pos:position pos:line="530" pos:column="24"/></return>
}<pos:position pos:line="531" pos:column="2"/></block></function>

<function><specifier pos:line="533" pos:column="1">static<pos:position pos:line="533" pos:column="7"/></specifier> <type><name pos:line="533" pos:column="8">apr_status_t<pos:position pos:line="533" pos:column="20"/></name></type> <name pos:line="533" pos:column="21">write_body<pos:position pos:line="533" pos:column="31"/></name><parameter_list pos:line="533" pos:column="31">(<parameter><decl><type><name pos:line="533" pos:column="32">cache_handle_t<pos:position pos:line="533" pos:column="46"/></name> <modifier pos:line="533" pos:column="47">*<pos:position pos:line="533" pos:column="48"/></modifier></type><name pos:line="533" pos:column="48">h<pos:position pos:line="533" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="533" pos:column="51">request_rec<pos:position pos:line="533" pos:column="62"/></name> <modifier pos:line="533" pos:column="63">*<pos:position pos:line="533" pos:column="64"/></modifier></type><name pos:line="533" pos:column="64">r<pos:position pos:line="533" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="533" pos:column="67">apr_bucket_brigade<pos:position pos:line="533" pos:column="85"/></name> <modifier pos:line="533" pos:column="86">*<pos:position pos:line="533" pos:column="87"/></modifier></type><name pos:line="533" pos:column="87">b<pos:position pos:line="533" pos:column="88"/></name></decl></parameter>)<pos:position pos:line="533" pos:column="89"/></parameter_list> 
<block pos:line="534" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="535" pos:column="5">apr_status_t<pos:position pos:line="535" pos:column="17"/></name></type> <name pos:line="535" pos:column="18">rv<pos:position pos:line="535" pos:column="20"/></name></decl>;<pos:position pos:line="535" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="536" pos:column="5">cache_object_t<pos:position pos:line="536" pos:column="19"/></name> <modifier pos:line="536" pos:column="20">*<pos:position pos:line="536" pos:column="21"/></modifier></type><name pos:line="536" pos:column="21">obj<pos:position pos:line="536" pos:column="24"/></name> <init pos:line="536" pos:column="25">= <expr><name><name pos:line="536" pos:column="27">h<pos:position pos:line="536" pos:column="28"/></name><operator pos:line="536" pos:column="28">-&gt;<pos:position pos:line="536" pos:column="33"/></operator><name pos:line="536" pos:column="30">cache_obj<pos:position pos:line="536" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="536" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="537" pos:column="5">mem_cache_object_t<pos:position pos:line="537" pos:column="23"/></name> <modifier pos:line="537" pos:column="24">*<pos:position pos:line="537" pos:column="25"/></modifier></type><name pos:line="537" pos:column="25">mobj<pos:position pos:line="537" pos:column="29"/></name> <init pos:line="537" pos:column="30">= <expr><operator pos:line="537" pos:column="32">(<pos:position pos:line="537" pos:column="33"/></operator><name pos:line="537" pos:column="33">mem_cache_object_t<pos:position pos:line="537" pos:column="51"/></name><operator pos:line="537" pos:column="51">*<pos:position pos:line="537" pos:column="52"/></operator><operator pos:line="537" pos:column="52">)<pos:position pos:line="537" pos:column="53"/></operator> <name><name pos:line="537" pos:column="54">obj<pos:position pos:line="537" pos:column="57"/></name><operator pos:line="537" pos:column="57">-&gt;<pos:position pos:line="537" pos:column="62"/></operator><name pos:line="537" pos:column="59">vobj<pos:position pos:line="537" pos:column="63"/></name></name></expr></init></decl>;<pos:position pos:line="537" pos:column="64"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="538" pos:column="5">apr_read_type_e<pos:position pos:line="538" pos:column="20"/></name></type> <name pos:line="538" pos:column="21">eblock<pos:position pos:line="538" pos:column="27"/></name> <init pos:line="538" pos:column="28">= <expr><name pos:line="538" pos:column="30">APR_BLOCK_READ<pos:position pos:line="538" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="538" pos:column="45"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="539" pos:column="5">apr_bucket<pos:position pos:line="539" pos:column="15"/></name> <modifier pos:line="539" pos:column="16">*<pos:position pos:line="539" pos:column="17"/></modifier></type><name pos:line="539" pos:column="17">e<pos:position pos:line="539" pos:column="18"/></name></decl>;<pos:position pos:line="539" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="540" pos:column="5">char<pos:position pos:line="540" pos:column="9"/></name> <modifier pos:line="540" pos:column="10">*<pos:position pos:line="540" pos:column="11"/></modifier></type><name pos:line="540" pos:column="11">cur<pos:position pos:line="540" pos:column="14"/></name></decl>;<pos:position pos:line="540" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="541" pos:column="5">int<pos:position pos:line="541" pos:column="8"/></name></type> <name pos:line="541" pos:column="9">eos<pos:position pos:line="541" pos:column="12"/></name> <init pos:line="541" pos:column="13">= <expr><literal type="number" pos:line="541" pos:column="15">0<pos:position pos:line="541" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="541" pos:column="17"/></decl_stmt>

    <if pos:line="543" pos:column="5">if <condition pos:line="543" pos:column="8">(<expr><name><name pos:line="543" pos:column="9">mobj<pos:position pos:line="543" pos:column="13"/></name><operator pos:line="543" pos:column="13">-&gt;<pos:position pos:line="543" pos:column="18"/></operator><name pos:line="543" pos:column="15">type<pos:position pos:line="543" pos:column="19"/></name></name> <operator pos:line="543" pos:column="20">==<pos:position pos:line="543" pos:column="22"/></operator> <name pos:line="543" pos:column="23">CACHE_TYPE_FILE<pos:position pos:line="543" pos:column="38"/></name></expr>)<pos:position pos:line="543" pos:column="39"/></condition><then pos:line="543" pos:column="39"> <block pos:line="543" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="544" pos:column="9">apr_file_t<pos:position pos:line="544" pos:column="19"/></name> <modifier pos:line="544" pos:column="20">*<pos:position pos:line="544" pos:column="21"/></modifier></type><name pos:line="544" pos:column="21">file<pos:position pos:line="544" pos:column="25"/></name> <init pos:line="544" pos:column="26">= <expr><name pos:line="544" pos:column="28">NULL<pos:position pos:line="544" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="544" pos:column="33"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="545" pos:column="9">int<pos:position pos:line="545" pos:column="12"/></name></type> <name pos:line="545" pos:column="13">fd<pos:position pos:line="545" pos:column="15"/></name> <init pos:line="545" pos:column="16">= <expr><literal type="number" pos:line="545" pos:column="18">0<pos:position pos:line="545" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="545" pos:column="20"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="546" pos:column="9">int<pos:position pos:line="546" pos:column="12"/></name></type> <name pos:line="546" pos:column="13">other<pos:position pos:line="546" pos:column="18"/></name> <init pos:line="546" pos:column="19">= <expr><literal type="number" pos:line="546" pos:column="21">0<pos:position pos:line="546" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="546" pos:column="23"/></decl_stmt>

        <comment type="block" pos:line="548" pos:column="9">/* We can cache an open file descriptor if:
         * - the brigade contains one and only one file_bucket &amp;&amp;
         * - the brigade is complete &amp;&amp;
         * - the file_bucket is the last data bucket in the brigade
         */</comment>
        <macro><name pos:line="553" pos:column="9">APR_BRIGADE_FOREACH<pos:position pos:line="553" pos:column="28"/></name><argument_list pos:line="553" pos:column="28">(<argument pos:line="553" pos:column="29">e<pos:position pos:line="553" pos:column="30"/></argument>, <argument pos:line="553" pos:column="32">b<pos:position pos:line="553" pos:column="33"/></argument>)<pos:position pos:line="553" pos:column="34"/></argument_list></macro> <block pos:line="553" pos:column="35">{
            <if pos:line="554" pos:column="13">if <condition pos:line="554" pos:column="16">(<expr><call><name pos:line="554" pos:column="17">APR_BUCKET_IS_EOS<pos:position pos:line="554" pos:column="34"/></name><argument_list pos:line="554" pos:column="34">(<argument><expr><name pos:line="554" pos:column="35">e<pos:position pos:line="554" pos:column="36"/></name></expr></argument>)<pos:position pos:line="554" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="554" pos:column="38"/></condition><then pos:line="554" pos:column="38"> <block pos:line="554" pos:column="39">{
                <expr_stmt><expr><name pos:line="555" pos:column="17">eos<pos:position pos:line="555" pos:column="20"/></name> <operator pos:line="555" pos:column="21">=<pos:position pos:line="555" pos:column="22"/></operator> <literal type="number" pos:line="555" pos:column="23">1<pos:position pos:line="555" pos:column="24"/></literal></expr>;<pos:position pos:line="555" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="556" pos:column="14"/></block></then>
            <elseif pos:line="557" pos:column="13">else <if pos:line="557" pos:column="18">if <condition pos:line="557" pos:column="21">(<expr><call><name pos:line="557" pos:column="22">APR_BUCKET_IS_FILE<pos:position pos:line="557" pos:column="40"/></name><argument_list pos:line="557" pos:column="40">(<argument><expr><name pos:line="557" pos:column="41">e<pos:position pos:line="557" pos:column="42"/></name></expr></argument>)<pos:position pos:line="557" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="557" pos:column="44"/></condition><then pos:line="557" pos:column="44"> <block pos:line="557" pos:column="45">{
                <decl_stmt><decl><type><name pos:line="558" pos:column="17">apr_bucket_file<pos:position pos:line="558" pos:column="32"/></name> <modifier pos:line="558" pos:column="33">*<pos:position pos:line="558" pos:column="34"/></modifier></type><name pos:line="558" pos:column="34">a<pos:position pos:line="558" pos:column="35"/></name> <init pos:line="558" pos:column="36">= <expr><name><name pos:line="558" pos:column="38">e<pos:position pos:line="558" pos:column="39"/></name><operator pos:line="558" pos:column="39">-&gt;<pos:position pos:line="558" pos:column="44"/></operator><name pos:line="558" pos:column="41">data<pos:position pos:line="558" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="558" pos:column="46"/></decl_stmt>
                <expr_stmt><expr><name pos:line="559" pos:column="17">fd<pos:position pos:line="559" pos:column="19"/></name><operator pos:line="559" pos:column="19">++<pos:position pos:line="559" pos:column="21"/></operator></expr>;<pos:position pos:line="559" pos:column="22"/></expr_stmt>
                <expr_stmt><expr><name pos:line="560" pos:column="17">file<pos:position pos:line="560" pos:column="21"/></name> <operator pos:line="560" pos:column="22">=<pos:position pos:line="560" pos:column="23"/></operator> <name><name pos:line="560" pos:column="24">a<pos:position pos:line="560" pos:column="25"/></name><operator pos:line="560" pos:column="25">-&gt;<pos:position pos:line="560" pos:column="30"/></operator><name pos:line="560" pos:column="27">fd<pos:position pos:line="560" pos:column="29"/></name></name></expr>;<pos:position pos:line="560" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="561" pos:column="14"/></block></then></if></elseif>
            <else pos:line="562" pos:column="13">else <block pos:line="562" pos:column="18">{
                <expr_stmt><expr><name pos:line="563" pos:column="17">other<pos:position pos:line="563" pos:column="22"/></name><operator pos:line="563" pos:column="22">++<pos:position pos:line="563" pos:column="24"/></operator></expr>;<pos:position pos:line="563" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="564" pos:column="14"/></block></else></if>
        }<pos:position pos:line="565" pos:column="10"/></block>
        <if pos:line="566" pos:column="9">if <condition pos:line="566" pos:column="12">(<expr><name pos:line="566" pos:column="13">fd<pos:position pos:line="566" pos:column="15"/></name> <operator pos:line="566" pos:column="16">==<pos:position pos:line="566" pos:column="18"/></operator> <literal type="number" pos:line="566" pos:column="19">1<pos:position pos:line="566" pos:column="20"/></literal> <operator pos:line="566" pos:column="21">&amp;&amp;<pos:position pos:line="566" pos:column="31"/></operator> <operator pos:line="566" pos:column="24">!<pos:position pos:line="566" pos:column="25"/></operator><name pos:line="566" pos:column="25">other<pos:position pos:line="566" pos:column="30"/></name> <operator pos:line="566" pos:column="31">&amp;&amp;<pos:position pos:line="566" pos:column="41"/></operator> <name pos:line="566" pos:column="34">eos<pos:position pos:line="566" pos:column="37"/></name></expr>)<pos:position pos:line="566" pos:column="38"/></condition><then pos:line="566" pos:column="38"> <block pos:line="566" pos:column="39">{
            <decl_stmt><decl><type><name pos:line="567" pos:column="13">apr_file_t<pos:position pos:line="567" pos:column="23"/></name> <modifier pos:line="567" pos:column="24">*<pos:position pos:line="567" pos:column="25"/></modifier></type><name pos:line="567" pos:column="25">tmpfile<pos:position pos:line="567" pos:column="32"/></name></decl>;<pos:position pos:line="567" pos:column="33"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="568" pos:column="13">const<pos:position pos:line="568" pos:column="18"/></specifier> <name pos:line="568" pos:column="19">char<pos:position pos:line="568" pos:column="23"/></name> <modifier pos:line="568" pos:column="24">*<pos:position pos:line="568" pos:column="25"/></modifier></type><name pos:line="568" pos:column="25">name<pos:position pos:line="568" pos:column="29"/></name></decl>;<pos:position pos:line="568" pos:column="30"/></decl_stmt>
            <comment type="block" pos:line="569" pos:column="13">/* Open a new XTHREAD handle to the file */</comment>
            <expr_stmt><expr><call><name pos:line="570" pos:column="13">apr_file_name_get<pos:position pos:line="570" pos:column="30"/></name><argument_list pos:line="570" pos:column="30">(<argument><expr><operator pos:line="570" pos:column="31">&amp;<pos:position pos:line="570" pos:column="36"/></operator><name pos:line="570" pos:column="32">name<pos:position pos:line="570" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="570" pos:column="38">file<pos:position pos:line="570" pos:column="42"/></name></expr></argument>)<pos:position pos:line="570" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="570" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="571" pos:column="13">mobj<pos:position pos:line="571" pos:column="17"/></name><operator pos:line="571" pos:column="17">-&gt;<pos:position pos:line="571" pos:column="22"/></operator><name pos:line="571" pos:column="19">flags<pos:position pos:line="571" pos:column="24"/></name></name> <operator pos:line="571" pos:column="25">=<pos:position pos:line="571" pos:column="26"/></operator> <operator pos:line="571" pos:column="27">(<pos:position pos:line="571" pos:column="28"/></operator><operator pos:line="571" pos:column="28">(<pos:position pos:line="571" pos:column="29"/></operator><name pos:line="571" pos:column="29">APR_SENDFILE_ENABLED<pos:position pos:line="571" pos:column="49"/></name> <operator pos:line="571" pos:column="50">&amp;<pos:position pos:line="571" pos:column="55"/></operator> <call><name pos:line="571" pos:column="52">apr_file_flags_get<pos:position pos:line="571" pos:column="70"/></name><argument_list pos:line="571" pos:column="70">(<argument><expr><name pos:line="571" pos:column="71">file<pos:position pos:line="571" pos:column="75"/></name></expr></argument>)<pos:position pos:line="571" pos:column="76"/></argument_list></call><operator pos:line="571" pos:column="76">)<pos:position pos:line="571" pos:column="77"/></operator>
                           <operator pos:line="572" pos:column="28">|<pos:position pos:line="572" pos:column="29"/></operator> <name pos:line="572" pos:column="30">APR_READ<pos:position pos:line="572" pos:column="38"/></name> <operator pos:line="572" pos:column="39">|<pos:position pos:line="572" pos:column="40"/></operator> <name pos:line="572" pos:column="41">APR_BINARY<pos:position pos:line="572" pos:column="51"/></name> <operator pos:line="572" pos:column="52">|<pos:position pos:line="572" pos:column="53"/></operator> <name pos:line="572" pos:column="54">APR_XTHREAD<pos:position pos:line="572" pos:column="65"/></name> <operator pos:line="572" pos:column="66">|<pos:position pos:line="572" pos:column="67"/></operator> <name pos:line="572" pos:column="68">APR_FILE_NOCLEANUP<pos:position pos:line="572" pos:column="86"/></name><operator pos:line="572" pos:column="86">)<pos:position pos:line="572" pos:column="87"/></operator></expr>;<pos:position pos:line="572" pos:column="88"/></expr_stmt>
            <expr_stmt><expr><name pos:line="573" pos:column="13">rv<pos:position pos:line="573" pos:column="15"/></name> <operator pos:line="573" pos:column="16">=<pos:position pos:line="573" pos:column="17"/></operator> <call><name pos:line="573" pos:column="18">apr_file_open<pos:position pos:line="573" pos:column="31"/></name><argument_list pos:line="573" pos:column="31">(<argument><expr><operator pos:line="573" pos:column="32">&amp;<pos:position pos:line="573" pos:column="37"/></operator><name pos:line="573" pos:column="33">tmpfile<pos:position pos:line="573" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="573" pos:column="42">name<pos:position pos:line="573" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="573" pos:column="48">mobj<pos:position pos:line="573" pos:column="52"/></name><operator pos:line="573" pos:column="52">-&gt;<pos:position pos:line="573" pos:column="57"/></operator><name pos:line="573" pos:column="54">flags<pos:position pos:line="573" pos:column="59"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="574" pos:column="32">APR_OS_DEFAULT<pos:position pos:line="574" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="574" pos:column="48">r<pos:position pos:line="574" pos:column="49"/></name><operator pos:line="574" pos:column="49">-&gt;<pos:position pos:line="574" pos:column="54"/></operator><name pos:line="574" pos:column="51">pool<pos:position pos:line="574" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="574" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="574" pos:column="57"/></expr_stmt>
            <if pos:line="575" pos:column="13">if <condition pos:line="575" pos:column="16">(<expr><name pos:line="575" pos:column="17">rv<pos:position pos:line="575" pos:column="19"/></name> <operator pos:line="575" pos:column="20">!=<pos:position pos:line="575" pos:column="22"/></operator> <name pos:line="575" pos:column="23">APR_SUCCESS<pos:position pos:line="575" pos:column="34"/></name></expr>)<pos:position pos:line="575" pos:column="35"/></condition><then pos:line="575" pos:column="35"> <block pos:line="575" pos:column="36">{
                <return pos:line="576" pos:column="17">return <expr><name pos:line="576" pos:column="24">rv<pos:position pos:line="576" pos:column="26"/></name></expr>;<pos:position pos:line="576" pos:column="27"/></return>
            }<pos:position pos:line="577" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="578" pos:column="13">apr_file_unset_inherit<pos:position pos:line="578" pos:column="35"/></name><argument_list pos:line="578" pos:column="35">(<argument><expr><name pos:line="578" pos:column="36">tmpfile<pos:position pos:line="578" pos:column="43"/></name></expr></argument>)<pos:position pos:line="578" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="578" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="579" pos:column="13">apr_os_file_get<pos:position pos:line="579" pos:column="28"/></name><argument_list pos:line="579" pos:column="28">(<argument><expr><operator pos:line="579" pos:column="29">&amp;<pos:position pos:line="579" pos:column="34"/></operator><operator pos:line="579" pos:column="30">(<pos:position pos:line="579" pos:column="31"/></operator><name><name pos:line="579" pos:column="31">mobj<pos:position pos:line="579" pos:column="35"/></name><operator pos:line="579" pos:column="35">-&gt;<pos:position pos:line="579" pos:column="40"/></operator><name pos:line="579" pos:column="37">fd<pos:position pos:line="579" pos:column="39"/></name></name><operator pos:line="579" pos:column="39">)<pos:position pos:line="579" pos:column="40"/></operator></expr></argument>, <argument><expr><name pos:line="579" pos:column="42">tmpfile<pos:position pos:line="579" pos:column="49"/></name></expr></argument>)<pos:position pos:line="579" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="579" pos:column="51"/></expr_stmt>

            <comment type="block" pos:line="581" pos:column="13">/* Open for business */</comment>
            <expr_stmt><expr><call><name pos:line="582" pos:column="13">ap_log_error<pos:position pos:line="582" pos:column="25"/></name><argument_list pos:line="582" pos:column="25">(<argument><expr><name pos:line="582" pos:column="26">APLOG_MARK<pos:position pos:line="582" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="582" pos:column="38">APLOG_INFO<pos:position pos:line="582" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="582" pos:column="50">0<pos:position pos:line="582" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="582" pos:column="53">r<pos:position pos:line="582" pos:column="54"/></name><operator pos:line="582" pos:column="54">-&gt;<pos:position pos:line="582" pos:column="59"/></operator><name pos:line="582" pos:column="56">server<pos:position pos:line="582" pos:column="62"/></name></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="583" pos:column="26">"mem_cache: Cached file: %s with key: %s"<pos:position pos:line="583" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="583" pos:column="69">name<pos:position pos:line="583" pos:column="73"/></name></expr></argument>, <argument><expr><name><name pos:line="583" pos:column="75">obj<pos:position pos:line="583" pos:column="78"/></name><operator pos:line="583" pos:column="78">-&gt;<pos:position pos:line="583" pos:column="83"/></operator><name pos:line="583" pos:column="80">key<pos:position pos:line="583" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="583" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="583" pos:column="85"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="584" pos:column="13">obj<pos:position pos:line="584" pos:column="16"/></name><operator pos:line="584" pos:column="16">-&gt;<pos:position pos:line="584" pos:column="21"/></operator><name pos:line="584" pos:column="18">complete<pos:position pos:line="584" pos:column="26"/></name></name> <operator pos:line="584" pos:column="27">=<pos:position pos:line="584" pos:column="28"/></operator> <literal type="number" pos:line="584" pos:column="29">1<pos:position pos:line="584" pos:column="30"/></literal></expr>;<pos:position pos:line="584" pos:column="31"/></expr_stmt>
            <return pos:line="585" pos:column="13">return <expr><name pos:line="585" pos:column="20">APR_SUCCESS<pos:position pos:line="585" pos:column="31"/></name></expr>;<pos:position pos:line="585" pos:column="32"/></return>
        }<pos:position pos:line="586" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="588" pos:column="9">/* Content not suitable for fd caching. Cache in-memory instead. */</comment>
        <expr_stmt><expr><name><name pos:line="589" pos:column="9">mobj<pos:position pos:line="589" pos:column="13"/></name><operator pos:line="589" pos:column="13">-&gt;<pos:position pos:line="589" pos:column="18"/></operator><name pos:line="589" pos:column="15">type<pos:position pos:line="589" pos:column="19"/></name></name> <operator pos:line="589" pos:column="20">=<pos:position pos:line="589" pos:column="21"/></operator> <name pos:line="589" pos:column="22">CACHE_TYPE_HEAP<pos:position pos:line="589" pos:column="37"/></name></expr>;<pos:position pos:line="589" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="590" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="592" pos:column="5">/* 
     * FD cacheing is not enabled or the content was not
     * suitable for fd caching.
     */</comment>  
    <if pos:line="596" pos:column="5">if <condition pos:line="596" pos:column="8">(<expr><name><name pos:line="596" pos:column="9">mobj<pos:position pos:line="596" pos:column="13"/></name><operator pos:line="596" pos:column="13">-&gt;<pos:position pos:line="596" pos:column="18"/></operator><name pos:line="596" pos:column="15">m<pos:position pos:line="596" pos:column="16"/></name></name> <operator pos:line="596" pos:column="17">==<pos:position pos:line="596" pos:column="19"/></operator> <name pos:line="596" pos:column="20">NULL<pos:position pos:line="596" pos:column="24"/></name></expr>)<pos:position pos:line="596" pos:column="25"/></condition><then pos:line="596" pos:column="25"> <block pos:line="596" pos:column="26">{
        <expr_stmt><expr><name><name pos:line="597" pos:column="9">mobj<pos:position pos:line="597" pos:column="13"/></name><operator pos:line="597" pos:column="13">-&gt;<pos:position pos:line="597" pos:column="18"/></operator><name pos:line="597" pos:column="15">m<pos:position pos:line="597" pos:column="16"/></name></name> <operator pos:line="597" pos:column="17">=<pos:position pos:line="597" pos:column="18"/></operator> <call><name pos:line="597" pos:column="19">malloc<pos:position pos:line="597" pos:column="25"/></name><argument_list pos:line="597" pos:column="25">(<argument><expr><name><name pos:line="597" pos:column="26">mobj<pos:position pos:line="597" pos:column="30"/></name><operator pos:line="597" pos:column="30">-&gt;<pos:position pos:line="597" pos:column="35"/></operator><name pos:line="597" pos:column="32">m_len<pos:position pos:line="597" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="597" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="597" pos:column="39"/></expr_stmt>
        <if pos:line="598" pos:column="9">if <condition pos:line="598" pos:column="12">(<expr><name><name pos:line="598" pos:column="13">mobj<pos:position pos:line="598" pos:column="17"/></name><operator pos:line="598" pos:column="17">-&gt;<pos:position pos:line="598" pos:column="22"/></operator><name pos:line="598" pos:column="19">m<pos:position pos:line="598" pos:column="20"/></name></name> <operator pos:line="598" pos:column="21">==<pos:position pos:line="598" pos:column="23"/></operator> <name pos:line="598" pos:column="24">NULL<pos:position pos:line="598" pos:column="28"/></name></expr>)<pos:position pos:line="598" pos:column="29"/></condition><then pos:line="598" pos:column="29"> <block pos:line="598" pos:column="30">{
            <return pos:line="599" pos:column="13">return <expr><name pos:line="599" pos:column="20">APR_ENOMEM<pos:position pos:line="599" pos:column="30"/></name></expr>;<pos:position pos:line="599" pos:column="31"/></return>
        }<pos:position pos:line="600" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="601" pos:column="9">obj<pos:position pos:line="601" pos:column="12"/></name><operator pos:line="601" pos:column="12">-&gt;<pos:position pos:line="601" pos:column="17"/></operator><name pos:line="601" pos:column="14">count<pos:position pos:line="601" pos:column="19"/></name></name> <operator pos:line="601" pos:column="20">=<pos:position pos:line="601" pos:column="21"/></operator> <literal type="number" pos:line="601" pos:column="22">0<pos:position pos:line="601" pos:column="23"/></literal></expr>;<pos:position pos:line="601" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="602" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="603" pos:column="5">cur<pos:position pos:line="603" pos:column="8"/></name> <operator pos:line="603" pos:column="9">=<pos:position pos:line="603" pos:column="10"/></operator> <operator pos:line="603" pos:column="11">(<pos:position pos:line="603" pos:column="12"/></operator><name pos:line="603" pos:column="12">char<pos:position pos:line="603" pos:column="16"/></name><operator pos:line="603" pos:column="16">*<pos:position pos:line="603" pos:column="17"/></operator><operator pos:line="603" pos:column="17">)<pos:position pos:line="603" pos:column="18"/></operator> <name><name pos:line="603" pos:column="19">mobj<pos:position pos:line="603" pos:column="23"/></name><operator pos:line="603" pos:column="23">-&gt;<pos:position pos:line="603" pos:column="28"/></operator><name pos:line="603" pos:column="25">m<pos:position pos:line="603" pos:column="26"/></name></name> <operator pos:line="603" pos:column="27">+<pos:position pos:line="603" pos:column="28"/></operator> <name><name pos:line="603" pos:column="29">obj<pos:position pos:line="603" pos:column="32"/></name><operator pos:line="603" pos:column="32">-&gt;<pos:position pos:line="603" pos:column="37"/></operator><name pos:line="603" pos:column="34">count<pos:position pos:line="603" pos:column="39"/></name></name></expr>;<pos:position pos:line="603" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="605" pos:column="5">/* Iterate accross the brigade and populate the cache storage */</comment>
    <macro><name pos:line="606" pos:column="5">APR_BRIGADE_FOREACH<pos:position pos:line="606" pos:column="24"/></name><argument_list pos:line="606" pos:column="24">(<argument pos:line="606" pos:column="25">e<pos:position pos:line="606" pos:column="26"/></argument>, <argument pos:line="606" pos:column="28">b<pos:position pos:line="606" pos:column="29"/></argument>)<pos:position pos:line="606" pos:column="30"/></argument_list></macro> <block pos:line="606" pos:column="31">{
        <decl_stmt><decl><type><specifier pos:line="607" pos:column="9">const<pos:position pos:line="607" pos:column="14"/></specifier> <name pos:line="607" pos:column="15">char<pos:position pos:line="607" pos:column="19"/></name> <modifier pos:line="607" pos:column="20">*<pos:position pos:line="607" pos:column="21"/></modifier></type><name pos:line="607" pos:column="21">s<pos:position pos:line="607" pos:column="22"/></name></decl>;<pos:position pos:line="607" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="608" pos:column="9">apr_size_t<pos:position pos:line="608" pos:column="19"/></name></type> <name pos:line="608" pos:column="20">len<pos:position pos:line="608" pos:column="23"/></name></decl>;<pos:position pos:line="608" pos:column="24"/></decl_stmt>

        <if pos:line="610" pos:column="9">if <condition pos:line="610" pos:column="12">(<expr><call><name pos:line="610" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="610" pos:column="30"/></name><argument_list pos:line="610" pos:column="30">(<argument><expr><name pos:line="610" pos:column="31">e<pos:position pos:line="610" pos:column="32"/></name></expr></argument>)<pos:position pos:line="610" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="610" pos:column="34"/></condition><then pos:line="610" pos:column="34"> <block pos:line="610" pos:column="35">{
            <if pos:line="611" pos:column="13">if <condition pos:line="611" pos:column="16">(<expr><name><name pos:line="611" pos:column="17">mobj<pos:position pos:line="611" pos:column="21"/></name><operator pos:line="611" pos:column="21">-&gt;<pos:position pos:line="611" pos:column="26"/></operator><name pos:line="611" pos:column="23">m_len<pos:position pos:line="611" pos:column="28"/></name></name> <operator pos:line="611" pos:column="29">&gt;<pos:position pos:line="611" pos:column="33"/></operator> <name><name pos:line="611" pos:column="31">obj<pos:position pos:line="611" pos:column="34"/></name><operator pos:line="611" pos:column="34">-&gt;<pos:position pos:line="611" pos:column="39"/></operator><name pos:line="611" pos:column="36">count<pos:position pos:line="611" pos:column="41"/></name></name></expr>)<pos:position pos:line="611" pos:column="42"/></condition><then pos:line="611" pos:column="42"> <block pos:line="611" pos:column="43">{
                <comment type="block" pos:line="612" pos:column="17">/* Caching a streamed response. Reallocate a buffer of the 
                 * correct size and copy the streamed response into that 
                 * buffer */</comment>
                <decl_stmt><decl><type><name pos:line="615" pos:column="17">char<pos:position pos:line="615" pos:column="21"/></name> <modifier pos:line="615" pos:column="22">*<pos:position pos:line="615" pos:column="23"/></modifier></type><name pos:line="615" pos:column="23">buf<pos:position pos:line="615" pos:column="26"/></name> <init pos:line="615" pos:column="27">= <expr><call><name pos:line="615" pos:column="29">malloc<pos:position pos:line="615" pos:column="35"/></name><argument_list pos:line="615" pos:column="35">(<argument><expr><name><name pos:line="615" pos:column="36">obj<pos:position pos:line="615" pos:column="39"/></name><operator pos:line="615" pos:column="39">-&gt;<pos:position pos:line="615" pos:column="44"/></operator><name pos:line="615" pos:column="41">count<pos:position pos:line="615" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="615" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="615" pos:column="48"/></decl_stmt>
                <if pos:line="616" pos:column="17">if <condition pos:line="616" pos:column="20">(<expr><operator pos:line="616" pos:column="21">!<pos:position pos:line="616" pos:column="22"/></operator><name pos:line="616" pos:column="22">buf<pos:position pos:line="616" pos:column="25"/></name></expr>)<pos:position pos:line="616" pos:column="26"/></condition><then pos:line="616" pos:column="26"> <block pos:line="616" pos:column="27">{
                    <return pos:line="617" pos:column="21">return <expr><name pos:line="617" pos:column="28">APR_ENOMEM<pos:position pos:line="617" pos:column="38"/></name></expr>;<pos:position pos:line="617" pos:column="39"/></return>
                }<pos:position pos:line="618" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="619" pos:column="17">memcpy<pos:position pos:line="619" pos:column="23"/></name><argument_list pos:line="619" pos:column="23">(<argument><expr><name pos:line="619" pos:column="24">buf<pos:position pos:line="619" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="619" pos:column="29">mobj<pos:position pos:line="619" pos:column="33"/></name><operator pos:line="619" pos:column="33">-&gt;<pos:position pos:line="619" pos:column="38"/></operator><name pos:line="619" pos:column="35">m<pos:position pos:line="619" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="619" pos:column="38">obj<pos:position pos:line="619" pos:column="41"/></name><operator pos:line="619" pos:column="41">-&gt;<pos:position pos:line="619" pos:column="46"/></operator><name pos:line="619" pos:column="43">count<pos:position pos:line="619" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="619" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="619" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="620" pos:column="17">free<pos:position pos:line="620" pos:column="21"/></name><argument_list pos:line="620" pos:column="21">(<argument><expr><name><name pos:line="620" pos:column="22">mobj<pos:position pos:line="620" pos:column="26"/></name><operator pos:line="620" pos:column="26">-&gt;<pos:position pos:line="620" pos:column="31"/></operator><name pos:line="620" pos:column="28">m<pos:position pos:line="620" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="620" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="620" pos:column="31"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="621" pos:column="17">mobj<pos:position pos:line="621" pos:column="21"/></name><operator pos:line="621" pos:column="21">-&gt;<pos:position pos:line="621" pos:column="26"/></operator><name pos:line="621" pos:column="23">m<pos:position pos:line="621" pos:column="24"/></name></name> <operator pos:line="621" pos:column="25">=<pos:position pos:line="621" pos:column="26"/></operator> <name pos:line="621" pos:column="27">buf<pos:position pos:line="621" pos:column="30"/></name></expr>;<pos:position pos:line="621" pos:column="31"/></expr_stmt>

                <comment type="block" pos:line="623" pos:column="17">/* Now comes the crufty part... there is no way to tell the
                 * cache that the size of the object has changed. We need
                 * to remove the object, update the size and re-add the 
                 * object, all under protection of the lock.
                 */</comment>
                <if pos:line="628" pos:column="17">if <condition pos:line="628" pos:column="20">(<expr><name><name pos:line="628" pos:column="21">sconf<pos:position pos:line="628" pos:column="26"/></name><operator pos:line="628" pos:column="26">-&gt;<pos:position pos:line="628" pos:column="31"/></operator><name pos:line="628" pos:column="28">lock<pos:position pos:line="628" pos:column="32"/></name></name></expr>)<pos:position pos:line="628" pos:column="33"/></condition><then pos:line="628" pos:column="33"> <block pos:line="628" pos:column="34">{
                    <expr_stmt><expr><call><name pos:line="629" pos:column="21">apr_thread_mutex_lock<pos:position pos:line="629" pos:column="42"/></name><argument_list pos:line="629" pos:column="42">(<argument><expr><name><name pos:line="629" pos:column="43">sconf<pos:position pos:line="629" pos:column="48"/></name><operator pos:line="629" pos:column="48">-&gt;<pos:position pos:line="629" pos:column="53"/></operator><name pos:line="629" pos:column="50">lock<pos:position pos:line="629" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="629" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="629" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="630" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="631" pos:column="17">cache_remove<pos:position pos:line="631" pos:column="29"/></name><argument_list pos:line="631" pos:column="29">(<argument><expr><name><name pos:line="631" pos:column="30">sconf<pos:position pos:line="631" pos:column="35"/></name><operator pos:line="631" pos:column="35">-&gt;<pos:position pos:line="631" pos:column="40"/></operator><name pos:line="631" pos:column="37">cache_cache<pos:position pos:line="631" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="631" pos:column="50">obj<pos:position pos:line="631" pos:column="53"/></name></expr></argument>)<pos:position pos:line="631" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="631" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="632" pos:column="17">mobj<pos:position pos:line="632" pos:column="21"/></name><operator pos:line="632" pos:column="21">-&gt;<pos:position pos:line="632" pos:column="26"/></operator><name pos:line="632" pos:column="23">m_len<pos:position pos:line="632" pos:column="28"/></name></name> <operator pos:line="632" pos:column="29">=<pos:position pos:line="632" pos:column="30"/></operator> <name><name pos:line="632" pos:column="31">obj<pos:position pos:line="632" pos:column="34"/></name><operator pos:line="632" pos:column="34">-&gt;<pos:position pos:line="632" pos:column="39"/></operator><name pos:line="632" pos:column="36">count<pos:position pos:line="632" pos:column="41"/></name></name></expr>;<pos:position pos:line="632" pos:column="42"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="633" pos:column="17">cache_insert<pos:position pos:line="633" pos:column="29"/></name><argument_list pos:line="633" pos:column="29">(<argument><expr><name><name pos:line="633" pos:column="30">sconf<pos:position pos:line="633" pos:column="35"/></name><operator pos:line="633" pos:column="35">-&gt;<pos:position pos:line="633" pos:column="40"/></operator><name pos:line="633" pos:column="37">cache_cache<pos:position pos:line="633" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="633" pos:column="50">obj<pos:position pos:line="633" pos:column="53"/></name></expr></argument>)<pos:position pos:line="633" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="633" pos:column="55"/></expr_stmt>                
                <expr_stmt><expr><name><name pos:line="634" pos:column="17">sconf<pos:position pos:line="634" pos:column="22"/></name><operator pos:line="634" pos:column="22">-&gt;<pos:position pos:line="634" pos:column="27"/></operator><name pos:line="634" pos:column="24">cache_size<pos:position pos:line="634" pos:column="34"/></name></name> <operator pos:line="634" pos:column="35">-=<pos:position pos:line="634" pos:column="37"/></operator> <operator pos:line="634" pos:column="38">(<pos:position pos:line="634" pos:column="39"/></operator><name><name pos:line="634" pos:column="39">mobj<pos:position pos:line="634" pos:column="43"/></name><operator pos:line="634" pos:column="43">-&gt;<pos:position pos:line="634" pos:column="48"/></operator><name pos:line="634" pos:column="45">m_len<pos:position pos:line="634" pos:column="50"/></name></name> <operator pos:line="634" pos:column="51">-<pos:position pos:line="634" pos:column="52"/></operator> <name><name pos:line="634" pos:column="53">obj<pos:position pos:line="634" pos:column="56"/></name><operator pos:line="634" pos:column="56">-&gt;<pos:position pos:line="634" pos:column="61"/></operator><name pos:line="634" pos:column="58">count<pos:position pos:line="634" pos:column="63"/></name></name><operator pos:line="634" pos:column="63">)<pos:position pos:line="634" pos:column="64"/></operator></expr>;<pos:position pos:line="634" pos:column="65"/></expr_stmt>
                <if pos:line="635" pos:column="17">if <condition pos:line="635" pos:column="20">(<expr><name><name pos:line="635" pos:column="21">sconf<pos:position pos:line="635" pos:column="26"/></name><operator pos:line="635" pos:column="26">-&gt;<pos:position pos:line="635" pos:column="31"/></operator><name pos:line="635" pos:column="28">lock<pos:position pos:line="635" pos:column="32"/></name></name></expr>)<pos:position pos:line="635" pos:column="33"/></condition><then pos:line="635" pos:column="33"> <block pos:line="635" pos:column="34">{
                    <expr_stmt><expr><call><name pos:line="636" pos:column="21">apr_thread_mutex_unlock<pos:position pos:line="636" pos:column="44"/></name><argument_list pos:line="636" pos:column="44">(<argument><expr><name><name pos:line="636" pos:column="45">sconf<pos:position pos:line="636" pos:column="50"/></name><operator pos:line="636" pos:column="50">-&gt;<pos:position pos:line="636" pos:column="55"/></operator><name pos:line="636" pos:column="52">lock<pos:position pos:line="636" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="636" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="636" pos:column="58"/></expr_stmt>
                }<pos:position pos:line="637" pos:column="18"/></block></then></if>
            }<pos:position pos:line="638" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="639" pos:column="13">/* Open for business */</comment>
            <expr_stmt><expr><call><name pos:line="640" pos:column="13">ap_log_error<pos:position pos:line="640" pos:column="25"/></name><argument_list pos:line="640" pos:column="25">(<argument><expr><name pos:line="640" pos:column="26">APLOG_MARK<pos:position pos:line="640" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="640" pos:column="38">APLOG_INFO<pos:position pos:line="640" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="640" pos:column="50">0<pos:position pos:line="640" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="640" pos:column="53">r<pos:position pos:line="640" pos:column="54"/></name><operator pos:line="640" pos:column="54">-&gt;<pos:position pos:line="640" pos:column="59"/></operator><name pos:line="640" pos:column="56">server<pos:position pos:line="640" pos:column="62"/></name></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="641" pos:column="26">"mem_cache: Cached url: %s"<pos:position pos:line="641" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="641" pos:column="55">obj<pos:position pos:line="641" pos:column="58"/></name><operator pos:line="641" pos:column="58">-&gt;<pos:position pos:line="641" pos:column="63"/></operator><name pos:line="641" pos:column="60">key<pos:position pos:line="641" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="641" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="641" pos:column="65"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="642" pos:column="13">obj<pos:position pos:line="642" pos:column="16"/></name><operator pos:line="642" pos:column="16">-&gt;<pos:position pos:line="642" pos:column="21"/></operator><name pos:line="642" pos:column="18">complete<pos:position pos:line="642" pos:column="26"/></name></name> <operator pos:line="642" pos:column="27">=<pos:position pos:line="642" pos:column="28"/></operator> <literal type="number" pos:line="642" pos:column="29">1<pos:position pos:line="642" pos:column="30"/></literal></expr>;<pos:position pos:line="642" pos:column="31"/></expr_stmt>
            <break pos:line="643" pos:column="13">break;<pos:position pos:line="643" pos:column="19"/></break>
        }<pos:position pos:line="644" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="645" pos:column="9">rv<pos:position pos:line="645" pos:column="11"/></name> <operator pos:line="645" pos:column="12">=<pos:position pos:line="645" pos:column="13"/></operator> <call><name pos:line="645" pos:column="14">apr_bucket_read<pos:position pos:line="645" pos:column="29"/></name><argument_list pos:line="645" pos:column="29">(<argument><expr><name pos:line="645" pos:column="30">e<pos:position pos:line="645" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="645" pos:column="33">&amp;<pos:position pos:line="645" pos:column="38"/></operator><name pos:line="645" pos:column="34">s<pos:position pos:line="645" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="645" pos:column="37">&amp;<pos:position pos:line="645" pos:column="42"/></operator><name pos:line="645" pos:column="38">len<pos:position pos:line="645" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="645" pos:column="43">eblock<pos:position pos:line="645" pos:column="49"/></name></expr></argument>)<pos:position pos:line="645" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="645" pos:column="51"/></expr_stmt>
        <if pos:line="646" pos:column="9">if <condition pos:line="646" pos:column="12">(<expr><name pos:line="646" pos:column="13">rv<pos:position pos:line="646" pos:column="15"/></name> <operator pos:line="646" pos:column="16">!=<pos:position pos:line="646" pos:column="18"/></operator> <name pos:line="646" pos:column="19">APR_SUCCESS<pos:position pos:line="646" pos:column="30"/></name></expr>)<pos:position pos:line="646" pos:column="31"/></condition><then pos:line="646" pos:column="31"> <block pos:line="646" pos:column="32">{
            <return pos:line="647" pos:column="13">return <expr><name pos:line="647" pos:column="20">rv<pos:position pos:line="647" pos:column="22"/></name></expr>;<pos:position pos:line="647" pos:column="23"/></return>
        }<pos:position pos:line="648" pos:column="10"/></block></then></if>
        <if pos:line="649" pos:column="9">if <condition pos:line="649" pos:column="12">(<expr><name pos:line="649" pos:column="13">len<pos:position pos:line="649" pos:column="16"/></name></expr>)<pos:position pos:line="649" pos:column="17"/></condition><then pos:line="649" pos:column="17"> <block pos:line="649" pos:column="18">{
            <comment type="block" pos:line="650" pos:column="13">/* Check for buffer overflow */</comment>
           <if pos:line="651" pos:column="12">if <condition pos:line="651" pos:column="15">(<expr><operator pos:line="651" pos:column="16">(<pos:position pos:line="651" pos:column="17"/></operator><name><name pos:line="651" pos:column="17">obj<pos:position pos:line="651" pos:column="20"/></name><operator pos:line="651" pos:column="20">-&gt;<pos:position pos:line="651" pos:column="25"/></operator><name pos:line="651" pos:column="22">count<pos:position pos:line="651" pos:column="27"/></name></name> <operator pos:line="651" pos:column="28">+<pos:position pos:line="651" pos:column="29"/></operator> <name pos:line="651" pos:column="30">len<pos:position pos:line="651" pos:column="33"/></name><operator pos:line="651" pos:column="33">)<pos:position pos:line="651" pos:column="34"/></operator> <operator pos:line="651" pos:column="35">&gt;<pos:position pos:line="651" pos:column="39"/></operator> <name><name pos:line="651" pos:column="37">mobj<pos:position pos:line="651" pos:column="41"/></name><operator pos:line="651" pos:column="41">-&gt;<pos:position pos:line="651" pos:column="46"/></operator><name pos:line="651" pos:column="43">m_len<pos:position pos:line="651" pos:column="48"/></name></name></expr>)<pos:position pos:line="651" pos:column="49"/></condition><then pos:line="651" pos:column="49"> <block pos:line="651" pos:column="50">{
               <return pos:line="652" pos:column="16">return <expr><name pos:line="652" pos:column="23">APR_ENOMEM<pos:position pos:line="652" pos:column="33"/></name></expr>;<pos:position pos:line="652" pos:column="34"/></return>
           }<pos:position pos:line="653" pos:column="13"/></block></then>
           <else pos:line="654" pos:column="12">else <block pos:line="654" pos:column="17">{
               <expr_stmt><expr><call><name pos:line="655" pos:column="16">memcpy<pos:position pos:line="655" pos:column="22"/></name><argument_list pos:line="655" pos:column="22">(<argument><expr><name pos:line="655" pos:column="23">cur<pos:position pos:line="655" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="655" pos:column="28">s<pos:position pos:line="655" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="655" pos:column="31">len<pos:position pos:line="655" pos:column="34"/></name></expr></argument>)<pos:position pos:line="655" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="655" pos:column="36"/></expr_stmt>
               <expr_stmt><expr><name pos:line="656" pos:column="16">cur<pos:position pos:line="656" pos:column="19"/></name><operator pos:line="656" pos:column="19">+=<pos:position pos:line="656" pos:column="21"/></operator><name pos:line="656" pos:column="21">len<pos:position pos:line="656" pos:column="24"/></name></expr>;<pos:position pos:line="656" pos:column="25"/></expr_stmt>
               <expr_stmt><expr><name><name pos:line="657" pos:column="16">obj<pos:position pos:line="657" pos:column="19"/></name><operator pos:line="657" pos:column="19">-&gt;<pos:position pos:line="657" pos:column="24"/></operator><name pos:line="657" pos:column="21">count<pos:position pos:line="657" pos:column="26"/></name></name><operator pos:line="657" pos:column="26">+=<pos:position pos:line="657" pos:column="28"/></operator><name pos:line="657" pos:column="28">len<pos:position pos:line="657" pos:column="31"/></name></expr>;<pos:position pos:line="657" pos:column="32"/></expr_stmt>
           }<pos:position pos:line="658" pos:column="13"/></block></else></if>
        }<pos:position pos:line="659" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="660" pos:column="9">/* This should not fail, but if it does, we are in BIG trouble
         * cause we just stomped all over the heap.
         */</comment>
        <expr_stmt><expr><call><name pos:line="663" pos:column="9">AP_DEBUG_ASSERT<pos:position pos:line="663" pos:column="24"/></name><argument_list pos:line="663" pos:column="24">(<argument><expr><name><name pos:line="663" pos:column="25">obj<pos:position pos:line="663" pos:column="28"/></name><operator pos:line="663" pos:column="28">-&gt;<pos:position pos:line="663" pos:column="33"/></operator><name pos:line="663" pos:column="30">count<pos:position pos:line="663" pos:column="35"/></name></name> <operator pos:line="663" pos:column="36">&lt;=<pos:position pos:line="663" pos:column="41"/></operator> <name><name pos:line="663" pos:column="39">mobj<pos:position pos:line="663" pos:column="43"/></name><operator pos:line="663" pos:column="43">-&gt;<pos:position pos:line="663" pos:column="48"/></operator><name pos:line="663" pos:column="45">m_len<pos:position pos:line="663" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="663" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="663" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="664" pos:column="6"/></block>
    <return pos:line="665" pos:column="5">return <expr><name pos:line="665" pos:column="12">APR_SUCCESS<pos:position pos:line="665" pos:column="23"/></name></expr>;<pos:position pos:line="665" pos:column="24"/></return>
}<pos:position pos:line="666" pos:column="2"/></block></function>
<comment type="block" format="doxygen" pos:line="667" pos:column="1">/**
 * Configuration and start-up
 */</comment>
<function><specifier pos:line="670" pos:column="1">static<pos:position pos:line="670" pos:column="7"/></specifier> <type><name pos:line="670" pos:column="8">int<pos:position pos:line="670" pos:column="11"/></name></type> <name pos:line="670" pos:column="12">mem_cache_post_config<pos:position pos:line="670" pos:column="33"/></name><parameter_list pos:line="670" pos:column="33">(<parameter><decl><type><name pos:line="670" pos:column="34">apr_pool_t<pos:position pos:line="670" pos:column="44"/></name> <modifier pos:line="670" pos:column="45">*<pos:position pos:line="670" pos:column="46"/></modifier></type><name pos:line="670" pos:column="46">p<pos:position pos:line="670" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="670" pos:column="49">apr_pool_t<pos:position pos:line="670" pos:column="59"/></name> <modifier pos:line="670" pos:column="60">*<pos:position pos:line="670" pos:column="61"/></modifier></type><name pos:line="670" pos:column="61">plog<pos:position pos:line="670" pos:column="65"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="671" pos:column="34">apr_pool_t<pos:position pos:line="671" pos:column="44"/></name> <modifier pos:line="671" pos:column="45">*<pos:position pos:line="671" pos:column="46"/></modifier></type><name pos:line="671" pos:column="46">ptemp<pos:position pos:line="671" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="671" pos:column="53">server_rec<pos:position pos:line="671" pos:column="63"/></name> <modifier pos:line="671" pos:column="64">*<pos:position pos:line="671" pos:column="65"/></modifier></type><name pos:line="671" pos:column="65">s<pos:position pos:line="671" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="671" pos:column="67"/></parameter_list>
<block pos:line="672" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="673" pos:column="5">int<pos:position pos:line="673" pos:column="8"/></name></type> <name pos:line="673" pos:column="9">threaded_mpm<pos:position pos:line="673" pos:column="21"/></name></decl>;<pos:position pos:line="673" pos:column="22"/></decl_stmt>

    <comment type="block" pos:line="675" pos:column="5">/* Sanity check the cache configuration */</comment>
    <if pos:line="676" pos:column="5">if <condition pos:line="676" pos:column="8">(<expr><name><name pos:line="676" pos:column="9">sconf<pos:position pos:line="676" pos:column="14"/></name><operator pos:line="676" pos:column="14">-&gt;<pos:position pos:line="676" pos:column="19"/></operator><name pos:line="676" pos:column="16">min_cache_object_size<pos:position pos:line="676" pos:column="37"/></name></name> <operator pos:line="676" pos:column="38">&gt;=<pos:position pos:line="676" pos:column="43"/></operator> <name><name pos:line="676" pos:column="41">sconf<pos:position pos:line="676" pos:column="46"/></name><operator pos:line="676" pos:column="46">-&gt;<pos:position pos:line="676" pos:column="51"/></operator><name pos:line="676" pos:column="48">max_cache_object_size<pos:position pos:line="676" pos:column="69"/></name></name></expr>)<pos:position pos:line="676" pos:column="70"/></condition><then pos:line="676" pos:column="70"> <block pos:line="676" pos:column="71">{
        <expr_stmt><expr><call><name pos:line="677" pos:column="9">ap_log_error<pos:position pos:line="677" pos:column="21"/></name><argument_list pos:line="677" pos:column="21">(<argument><expr><name pos:line="677" pos:column="22">APLOG_MARK<pos:position pos:line="677" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="677" pos:column="34">APLOG_CRIT<pos:position pos:line="677" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="677" pos:column="46">0<pos:position pos:line="677" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="677" pos:column="49">s<pos:position pos:line="677" pos:column="50"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="678" pos:column="22">"MCacheMaxObjectSize must be greater than MCacheMinObjectSize"<pos:position pos:line="678" pos:column="84"/></literal></expr></argument>)<pos:position pos:line="678" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="678" pos:column="86"/></expr_stmt>
        <return pos:line="679" pos:column="9">return <expr><name pos:line="679" pos:column="16">DONE<pos:position pos:line="679" pos:column="20"/></name></expr>;<pos:position pos:line="679" pos:column="21"/></return>
    }<pos:position pos:line="680" pos:column="6"/></block></then></if>
    <if pos:line="681" pos:column="5">if <condition pos:line="681" pos:column="8">(<expr><name><name pos:line="681" pos:column="9">sconf<pos:position pos:line="681" pos:column="14"/></name><operator pos:line="681" pos:column="14">-&gt;<pos:position pos:line="681" pos:column="19"/></operator><name pos:line="681" pos:column="16">max_cache_object_size<pos:position pos:line="681" pos:column="37"/></name></name> <operator pos:line="681" pos:column="38">&gt;=<pos:position pos:line="681" pos:column="43"/></operator> <name><name pos:line="681" pos:column="41">sconf<pos:position pos:line="681" pos:column="46"/></name><operator pos:line="681" pos:column="46">-&gt;<pos:position pos:line="681" pos:column="51"/></operator><name pos:line="681" pos:column="48">max_cache_size<pos:position pos:line="681" pos:column="62"/></name></name></expr>)<pos:position pos:line="681" pos:column="63"/></condition><then pos:line="681" pos:column="63"> <block pos:line="681" pos:column="64">{
        <expr_stmt><expr><call><name pos:line="682" pos:column="9">ap_log_error<pos:position pos:line="682" pos:column="21"/></name><argument_list pos:line="682" pos:column="21">(<argument><expr><name pos:line="682" pos:column="22">APLOG_MARK<pos:position pos:line="682" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="682" pos:column="34">APLOG_CRIT<pos:position pos:line="682" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="682" pos:column="46">0<pos:position pos:line="682" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="682" pos:column="49">s<pos:position pos:line="682" pos:column="50"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="683" pos:column="22">"MCacheSize must be greater than MCacheMaxObjectSize"<pos:position pos:line="683" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="683" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="683" pos:column="77"/></expr_stmt>
        <return pos:line="684" pos:column="9">return <expr><name pos:line="684" pos:column="16">DONE<pos:position pos:line="684" pos:column="20"/></name></expr>;<pos:position pos:line="684" pos:column="21"/></return>
    }<pos:position pos:line="685" pos:column="6"/></block></then></if>
    <if pos:line="686" pos:column="5">if <condition pos:line="686" pos:column="8">(<expr><name><name pos:line="686" pos:column="9">sconf<pos:position pos:line="686" pos:column="14"/></name><operator pos:line="686" pos:column="14">-&gt;<pos:position pos:line="686" pos:column="19"/></operator><name pos:line="686" pos:column="16">max_streaming_buffer_size<pos:position pos:line="686" pos:column="41"/></name></name> <operator pos:line="686" pos:column="42">&gt;<pos:position pos:line="686" pos:column="46"/></operator> <name><name pos:line="686" pos:column="44">sconf<pos:position pos:line="686" pos:column="49"/></name><operator pos:line="686" pos:column="49">-&gt;<pos:position pos:line="686" pos:column="54"/></operator><name pos:line="686" pos:column="51">max_cache_object_size<pos:position pos:line="686" pos:column="72"/></name></name></expr>)<pos:position pos:line="686" pos:column="73"/></condition><then pos:line="686" pos:column="73"> <block pos:line="686" pos:column="74">{
        <comment type="block" pos:line="687" pos:column="9">/* Issue a notice only if something other than the default config 
         * is being used */</comment>
        <if pos:line="689" pos:column="9">if <condition pos:line="689" pos:column="12">(<expr><name><name pos:line="689" pos:column="13">sconf<pos:position pos:line="689" pos:column="18"/></name><operator pos:line="689" pos:column="18">-&gt;<pos:position pos:line="689" pos:column="23"/></operator><name pos:line="689" pos:column="20">max_streaming_buffer_size<pos:position pos:line="689" pos:column="45"/></name></name> <operator pos:line="689" pos:column="46">!=<pos:position pos:line="689" pos:column="48"/></operator> <name pos:line="689" pos:column="49">DEFAULT_MAX_STREAMING_BUFFER_SIZE<pos:position pos:line="689" pos:column="82"/></name> <operator pos:line="689" pos:column="83">&amp;&amp;<pos:position pos:line="689" pos:column="93"/></operator>
            <name><name pos:line="690" pos:column="13">sconf<pos:position pos:line="690" pos:column="18"/></name><operator pos:line="690" pos:column="18">-&gt;<pos:position pos:line="690" pos:column="23"/></operator><name pos:line="690" pos:column="20">max_cache_object_size<pos:position pos:line="690" pos:column="41"/></name></name> <operator pos:line="690" pos:column="42">!=<pos:position pos:line="690" pos:column="44"/></operator> <name pos:line="690" pos:column="45">DEFAULT_MAX_CACHE_OBJECT_SIZE<pos:position pos:line="690" pos:column="74"/></name></expr>)<pos:position pos:line="690" pos:column="75"/></condition><then pos:line="690" pos:column="75"> <block pos:line="690" pos:column="76">{
            <expr_stmt><expr><call><name pos:line="691" pos:column="13">ap_log_error<pos:position pos:line="691" pos:column="25"/></name><argument_list pos:line="691" pos:column="25">(<argument><expr><name pos:line="691" pos:column="26">APLOG_MARK<pos:position pos:line="691" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="691" pos:column="38">APLOG_NOTICE<pos:position pos:line="691" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="691" pos:column="52">0<pos:position pos:line="691" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="691" pos:column="55">s<pos:position pos:line="691" pos:column="56"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="692" pos:column="26">"MCacheMaxStreamingBuffer must be less than or equal to MCacheMaxObjectSize. "<pos:position pos:line="692" pos:column="104"/></literal>
                         <literal type="string" pos:line="693" pos:column="26">"Resetting MCacheMaxStreamingBuffer to MCacheMaxObjectSize."<pos:position pos:line="693" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="693" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="693" pos:column="88"/></expr_stmt>
        }<pos:position pos:line="694" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="695" pos:column="9">sconf<pos:position pos:line="695" pos:column="14"/></name><operator pos:line="695" pos:column="14">-&gt;<pos:position pos:line="695" pos:column="19"/></operator><name pos:line="695" pos:column="16">max_streaming_buffer_size<pos:position pos:line="695" pos:column="41"/></name></name> <operator pos:line="695" pos:column="42">=<pos:position pos:line="695" pos:column="43"/></operator> <name><name pos:line="695" pos:column="44">sconf<pos:position pos:line="695" pos:column="49"/></name><operator pos:line="695" pos:column="49">-&gt;<pos:position pos:line="695" pos:column="54"/></operator><name pos:line="695" pos:column="51">max_cache_object_size<pos:position pos:line="695" pos:column="72"/></name></name></expr>;<pos:position pos:line="695" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="696" pos:column="6"/></block></then></if>
    <if pos:line="697" pos:column="5">if <condition pos:line="697" pos:column="8">(<expr><name><name pos:line="697" pos:column="9">sconf<pos:position pos:line="697" pos:column="14"/></name><operator pos:line="697" pos:column="14">-&gt;<pos:position pos:line="697" pos:column="19"/></operator><name pos:line="697" pos:column="16">max_streaming_buffer_size<pos:position pos:line="697" pos:column="41"/></name></name> <operator pos:line="697" pos:column="42">&lt;<pos:position pos:line="697" pos:column="46"/></operator> <name><name pos:line="697" pos:column="44">sconf<pos:position pos:line="697" pos:column="49"/></name><operator pos:line="697" pos:column="49">-&gt;<pos:position pos:line="697" pos:column="54"/></operator><name pos:line="697" pos:column="51">min_cache_object_size<pos:position pos:line="697" pos:column="72"/></name></name></expr>)<pos:position pos:line="697" pos:column="73"/></condition><then pos:line="697" pos:column="73"> <block pos:line="697" pos:column="74">{
        <expr_stmt><expr><call><name pos:line="698" pos:column="9">ap_log_error<pos:position pos:line="698" pos:column="21"/></name><argument_list pos:line="698" pos:column="21">(<argument><expr><name pos:line="698" pos:column="22">APLOG_MARK<pos:position pos:line="698" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="698" pos:column="34">APLOG_WARNING<pos:position pos:line="698" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="698" pos:column="49">0<pos:position pos:line="698" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="698" pos:column="52">s<pos:position pos:line="698" pos:column="53"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="699" pos:column="22">"MCacheMaxStreamingBuffer must be greater than or equal to MCacheMinObjectSize. "<pos:position pos:line="699" pos:column="103"/></literal>
                     <literal type="string" pos:line="700" pos:column="22">"Resetting MCacheMaxStreamingBuffer to MCacheMinObjectSize."<pos:position pos:line="700" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="700" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="700" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="701" pos:column="9">sconf<pos:position pos:line="701" pos:column="14"/></name><operator pos:line="701" pos:column="14">-&gt;<pos:position pos:line="701" pos:column="19"/></operator><name pos:line="701" pos:column="16">max_streaming_buffer_size<pos:position pos:line="701" pos:column="41"/></name></name> <operator pos:line="701" pos:column="42">=<pos:position pos:line="701" pos:column="43"/></operator> <name><name pos:line="701" pos:column="44">sconf<pos:position pos:line="701" pos:column="49"/></name><operator pos:line="701" pos:column="49">-&gt;<pos:position pos:line="701" pos:column="54"/></operator><name pos:line="701" pos:column="51">min_cache_object_size<pos:position pos:line="701" pos:column="72"/></name></name></expr>;<pos:position pos:line="701" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="702" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="703" pos:column="5">ap_mpm_query<pos:position pos:line="703" pos:column="17"/></name><argument_list pos:line="703" pos:column="17">(<argument><expr><name pos:line="703" pos:column="18">AP_MPMQ_IS_THREADED<pos:position pos:line="703" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="703" pos:column="39">&amp;<pos:position pos:line="703" pos:column="44"/></operator><name pos:line="703" pos:column="40">threaded_mpm<pos:position pos:line="703" pos:column="52"/></name></expr></argument>)<pos:position pos:line="703" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="703" pos:column="54"/></expr_stmt>
    <if pos:line="704" pos:column="5">if <condition pos:line="704" pos:column="8">(<expr><name pos:line="704" pos:column="9">threaded_mpm<pos:position pos:line="704" pos:column="21"/></name></expr>)<pos:position pos:line="704" pos:column="22"/></condition><then pos:line="704" pos:column="22"> <block pos:line="704" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="705" pos:column="9">apr_thread_mutex_create<pos:position pos:line="705" pos:column="32"/></name><argument_list pos:line="705" pos:column="32">(<argument><expr><operator pos:line="705" pos:column="33">&amp;<pos:position pos:line="705" pos:column="38"/></operator><name><name pos:line="705" pos:column="34">sconf<pos:position pos:line="705" pos:column="39"/></name><operator pos:line="705" pos:column="39">-&gt;<pos:position pos:line="705" pos:column="44"/></operator><name pos:line="705" pos:column="41">lock<pos:position pos:line="705" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="705" pos:column="47">APR_THREAD_MUTEX_DEFAULT<pos:position pos:line="705" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="705" pos:column="73">p<pos:position pos:line="705" pos:column="74"/></name></expr></argument>)<pos:position pos:line="705" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="705" pos:column="76"/></expr_stmt>
    }<pos:position pos:line="706" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="708" pos:column="5">sconf<pos:position pos:line="708" pos:column="10"/></name><operator pos:line="708" pos:column="10">-&gt;<pos:position pos:line="708" pos:column="15"/></operator><name pos:line="708" pos:column="12">cache_cache<pos:position pos:line="708" pos:column="23"/></name></name> <operator pos:line="708" pos:column="24">=<pos:position pos:line="708" pos:column="25"/></operator> <call><name pos:line="708" pos:column="26">cache_init<pos:position pos:line="708" pos:column="36"/></name><argument_list pos:line="708" pos:column="36">(<argument><expr><name><name pos:line="708" pos:column="37">sconf<pos:position pos:line="708" pos:column="42"/></name><operator pos:line="708" pos:column="42">-&gt;<pos:position pos:line="708" pos:column="47"/></operator><name pos:line="708" pos:column="44">max_object_cnt<pos:position pos:line="708" pos:column="58"/></name></name></expr></argument>,
                                    <argument><expr><name><name pos:line="709" pos:column="37">sconf<pos:position pos:line="709" pos:column="42"/></name><operator pos:line="709" pos:column="42">-&gt;<pos:position pos:line="709" pos:column="47"/></operator><name pos:line="709" pos:column="44">max_cache_size<pos:position pos:line="709" pos:column="58"/></name></name></expr></argument>,                                   
                                    <argument><expr><name pos:line="710" pos:column="37">memcache_get_priority<pos:position pos:line="710" pos:column="58"/></name></expr></argument>,
                                    <argument><expr><name><name pos:line="711" pos:column="37">sconf<pos:position pos:line="711" pos:column="42"/></name><operator pos:line="711" pos:column="42">-&gt;<pos:position pos:line="711" pos:column="47"/></operator><name pos:line="711" pos:column="44">cache_remove_algorithm<pos:position pos:line="711" pos:column="66"/></name></name></expr></argument>,
                                    <argument><expr><name pos:line="712" pos:column="37">memcache_get_pos<pos:position pos:line="712" pos:column="53"/></name></expr></argument>,
                                    <argument><expr><name pos:line="713" pos:column="37">memcache_set_pos<pos:position pos:line="713" pos:column="53"/></name></expr></argument>,
                                    <argument><expr><name pos:line="714" pos:column="37">memcache_inc_frequency<pos:position pos:line="714" pos:column="59"/></name></expr></argument>,
                                    <argument><expr><name pos:line="715" pos:column="37">memcache_cache_get_size<pos:position pos:line="715" pos:column="60"/></name></expr></argument>,
                                    <argument><expr><name pos:line="716" pos:column="37">memcache_cache_get_key<pos:position pos:line="716" pos:column="59"/></name></expr></argument>,
                                    <argument><expr><name pos:line="717" pos:column="37">memcache_cache_free<pos:position pos:line="717" pos:column="56"/></name></expr></argument>)<pos:position pos:line="717" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="717" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="718" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="718" pos:column="30"/></name><argument_list pos:line="718" pos:column="30">(<argument><expr><name pos:line="718" pos:column="31">p<pos:position pos:line="718" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="718" pos:column="34">sconf<pos:position pos:line="718" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="718" pos:column="41">cleanup_cache_mem<pos:position pos:line="718" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="718" pos:column="60">apr_pool_cleanup_null<pos:position pos:line="718" pos:column="81"/></name></expr></argument>)<pos:position pos:line="718" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="718" pos:column="83"/></expr_stmt>

    <if pos:line="720" pos:column="5">if <condition pos:line="720" pos:column="8">(<expr><name><name pos:line="720" pos:column="9">sconf<pos:position pos:line="720" pos:column="14"/></name><operator pos:line="720" pos:column="14">-&gt;<pos:position pos:line="720" pos:column="19"/></operator><name pos:line="720" pos:column="16">cache_cache<pos:position pos:line="720" pos:column="27"/></name></name></expr>)<pos:position pos:line="720" pos:column="28"/></condition><then pos:line="720" pos:column="28">
        <block type="pseudo"><return pos:line="721" pos:column="9">return <expr><name pos:line="721" pos:column="16">OK<pos:position pos:line="721" pos:column="18"/></name></expr>;<pos:position pos:line="721" pos:column="19"/></return></block></then></if>

    <return pos:line="723" pos:column="5">return <expr><operator pos:line="723" pos:column="12">-<pos:position pos:line="723" pos:column="13"/></operator><literal type="number" pos:line="723" pos:column="13">1<pos:position pos:line="723" pos:column="14"/></literal></expr>;<pos:position pos:line="723" pos:column="15"/></return>

}<pos:position pos:line="725" pos:column="2"/></block></function>
 
<function><specifier pos:line="727" pos:column="1">static<pos:position pos:line="727" pos:column="7"/></specifier> <type><specifier pos:line="727" pos:column="8">const<pos:position pos:line="727" pos:column="13"/></specifier> <name pos:line="727" pos:column="14">char<pos:position pos:line="727" pos:column="18"/></name> 
<modifier pos:line="728" pos:column="1">*<pos:position pos:line="728" pos:column="2"/></modifier></type><name pos:line="728" pos:column="2">set_max_cache_size<pos:position pos:line="728" pos:column="20"/></name><parameter_list pos:line="728" pos:column="20">(<parameter><decl><type><name pos:line="728" pos:column="21">cmd_parms<pos:position pos:line="728" pos:column="30"/></name> <modifier pos:line="728" pos:column="31">*<pos:position pos:line="728" pos:column="32"/></modifier></type><name pos:line="728" pos:column="32">parms<pos:position pos:line="728" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="728" pos:column="39">void<pos:position pos:line="728" pos:column="43"/></name> <modifier pos:line="728" pos:column="44">*<pos:position pos:line="728" pos:column="45"/></modifier></type><name pos:line="728" pos:column="45">in_struct_ptr<pos:position pos:line="728" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="728" pos:column="60">const<pos:position pos:line="728" pos:column="65"/></specifier> <name pos:line="728" pos:column="66">char<pos:position pos:line="728" pos:column="70"/></name> <modifier pos:line="728" pos:column="71">*<pos:position pos:line="728" pos:column="72"/></modifier></type><name pos:line="728" pos:column="72">arg<pos:position pos:line="728" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="728" pos:column="76"/></parameter_list>
<block pos:line="729" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="730" pos:column="5">apr_size_t<pos:position pos:line="730" pos:column="15"/></name></type> <name pos:line="730" pos:column="16">val<pos:position pos:line="730" pos:column="19"/></name></decl>;<pos:position pos:line="730" pos:column="20"/></decl_stmt>

    <if pos:line="732" pos:column="5">if <condition pos:line="732" pos:column="8">(<expr><call><name pos:line="732" pos:column="9">sscanf<pos:position pos:line="732" pos:column="15"/></name><argument_list pos:line="732" pos:column="15">(<argument><expr><name pos:line="732" pos:column="16">arg<pos:position pos:line="732" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="732" pos:column="21">"%"<pos:position pos:line="732" pos:column="24"/></literal> <name pos:line="732" pos:column="25">APR_SIZE_T_FMT<pos:position pos:line="732" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="732" pos:column="41">&amp;<pos:position pos:line="732" pos:column="46"/></operator><name pos:line="732" pos:column="42">val<pos:position pos:line="732" pos:column="45"/></name></expr></argument>)<pos:position pos:line="732" pos:column="46"/></argument_list></call> <operator pos:line="732" pos:column="47">!=<pos:position pos:line="732" pos:column="49"/></operator> <literal type="number" pos:line="732" pos:column="50">1<pos:position pos:line="732" pos:column="51"/></literal></expr>)<pos:position pos:line="732" pos:column="52"/></condition><then pos:line="732" pos:column="52"> <block pos:line="732" pos:column="53">{
        <return pos:line="733" pos:column="9">return <expr><literal type="string" pos:line="733" pos:column="16">"MCacheSize argument must be an integer representing the max cache size in KBytes."<pos:position pos:line="733" pos:column="99"/></literal></expr>;<pos:position pos:line="733" pos:column="100"/></return>
    }<pos:position pos:line="734" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="735" pos:column="5">sconf<pos:position pos:line="735" pos:column="10"/></name><operator pos:line="735" pos:column="10">-&gt;<pos:position pos:line="735" pos:column="15"/></operator><name pos:line="735" pos:column="12">max_cache_size<pos:position pos:line="735" pos:column="26"/></name></name> <operator pos:line="735" pos:column="27">=<pos:position pos:line="735" pos:column="28"/></operator> <name pos:line="735" pos:column="29">val<pos:position pos:line="735" pos:column="32"/></name><operator pos:line="735" pos:column="32">*<pos:position pos:line="735" pos:column="33"/></operator><literal type="number" pos:line="735" pos:column="33">1024<pos:position pos:line="735" pos:column="37"/></literal></expr>;<pos:position pos:line="735" pos:column="38"/></expr_stmt>
    <return pos:line="736" pos:column="5">return <expr><name pos:line="736" pos:column="12">NULL<pos:position pos:line="736" pos:column="16"/></name></expr>;<pos:position pos:line="736" pos:column="17"/></return>
}<pos:position pos:line="737" pos:column="2"/></block></function>
<function><specifier pos:line="738" pos:column="1">static<pos:position pos:line="738" pos:column="7"/></specifier> <type><specifier pos:line="738" pos:column="8">const<pos:position pos:line="738" pos:column="13"/></specifier> <name pos:line="738" pos:column="14">char<pos:position pos:line="738" pos:column="18"/></name> 
<modifier pos:line="739" pos:column="1">*<pos:position pos:line="739" pos:column="2"/></modifier></type><name pos:line="739" pos:column="2">set_min_cache_object_size<pos:position pos:line="739" pos:column="27"/></name><parameter_list pos:line="739" pos:column="27">(<parameter><decl><type><name pos:line="739" pos:column="28">cmd_parms<pos:position pos:line="739" pos:column="37"/></name> <modifier pos:line="739" pos:column="38">*<pos:position pos:line="739" pos:column="39"/></modifier></type><name pos:line="739" pos:column="39">parms<pos:position pos:line="739" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="739" pos:column="46">void<pos:position pos:line="739" pos:column="50"/></name> <modifier pos:line="739" pos:column="51">*<pos:position pos:line="739" pos:column="52"/></modifier></type><name pos:line="739" pos:column="52">in_struct_ptr<pos:position pos:line="739" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="739" pos:column="67">const<pos:position pos:line="739" pos:column="72"/></specifier> <name pos:line="739" pos:column="73">char<pos:position pos:line="739" pos:column="77"/></name> <modifier pos:line="739" pos:column="78">*<pos:position pos:line="739" pos:column="79"/></modifier></type><name pos:line="739" pos:column="79">arg<pos:position pos:line="739" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="739" pos:column="83"/></parameter_list>
<block pos:line="740" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="741" pos:column="5">apr_size_t<pos:position pos:line="741" pos:column="15"/></name></type> <name pos:line="741" pos:column="16">val<pos:position pos:line="741" pos:column="19"/></name></decl>;<pos:position pos:line="741" pos:column="20"/></decl_stmt>

    <if pos:line="743" pos:column="5">if <condition pos:line="743" pos:column="8">(<expr><call><name pos:line="743" pos:column="9">sscanf<pos:position pos:line="743" pos:column="15"/></name><argument_list pos:line="743" pos:column="15">(<argument><expr><name pos:line="743" pos:column="16">arg<pos:position pos:line="743" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="743" pos:column="21">"%"<pos:position pos:line="743" pos:column="24"/></literal> <name pos:line="743" pos:column="25">APR_SIZE_T_FMT<pos:position pos:line="743" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="743" pos:column="41">&amp;<pos:position pos:line="743" pos:column="46"/></operator><name pos:line="743" pos:column="42">val<pos:position pos:line="743" pos:column="45"/></name></expr></argument>)<pos:position pos:line="743" pos:column="46"/></argument_list></call> <operator pos:line="743" pos:column="47">!=<pos:position pos:line="743" pos:column="49"/></operator> <literal type="number" pos:line="743" pos:column="50">1<pos:position pos:line="743" pos:column="51"/></literal></expr>)<pos:position pos:line="743" pos:column="52"/></condition><then pos:line="743" pos:column="52"> <block pos:line="743" pos:column="53">{
        <return pos:line="744" pos:column="9">return <expr><literal type="string" pos:line="744" pos:column="16">"MCacheMinObjectSize value must be an integer (bytes)"<pos:position pos:line="744" pos:column="70"/></literal></expr>;<pos:position pos:line="744" pos:column="71"/></return>
    }<pos:position pos:line="745" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="746" pos:column="5">sconf<pos:position pos:line="746" pos:column="10"/></name><operator pos:line="746" pos:column="10">-&gt;<pos:position pos:line="746" pos:column="15"/></operator><name pos:line="746" pos:column="12">min_cache_object_size<pos:position pos:line="746" pos:column="33"/></name></name> <operator pos:line="746" pos:column="34">=<pos:position pos:line="746" pos:column="35"/></operator> <name pos:line="746" pos:column="36">val<pos:position pos:line="746" pos:column="39"/></name></expr>;<pos:position pos:line="746" pos:column="40"/></expr_stmt>
    <return pos:line="747" pos:column="5">return <expr><name pos:line="747" pos:column="12">NULL<pos:position pos:line="747" pos:column="16"/></name></expr>;<pos:position pos:line="747" pos:column="17"/></return>
}<pos:position pos:line="748" pos:column="2"/></block></function>
<function><specifier pos:line="749" pos:column="1">static<pos:position pos:line="749" pos:column="7"/></specifier> <type><specifier pos:line="749" pos:column="8">const<pos:position pos:line="749" pos:column="13"/></specifier> <name pos:line="749" pos:column="14">char<pos:position pos:line="749" pos:column="18"/></name> 
<modifier pos:line="750" pos:column="1">*<pos:position pos:line="750" pos:column="2"/></modifier></type><name pos:line="750" pos:column="2">set_max_cache_object_size<pos:position pos:line="750" pos:column="27"/></name><parameter_list pos:line="750" pos:column="27">(<parameter><decl><type><name pos:line="750" pos:column="28">cmd_parms<pos:position pos:line="750" pos:column="37"/></name> <modifier pos:line="750" pos:column="38">*<pos:position pos:line="750" pos:column="39"/></modifier></type><name pos:line="750" pos:column="39">parms<pos:position pos:line="750" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="750" pos:column="46">void<pos:position pos:line="750" pos:column="50"/></name> <modifier pos:line="750" pos:column="51">*<pos:position pos:line="750" pos:column="52"/></modifier></type><name pos:line="750" pos:column="52">in_struct_ptr<pos:position pos:line="750" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="750" pos:column="67">const<pos:position pos:line="750" pos:column="72"/></specifier> <name pos:line="750" pos:column="73">char<pos:position pos:line="750" pos:column="77"/></name> <modifier pos:line="750" pos:column="78">*<pos:position pos:line="750" pos:column="79"/></modifier></type><name pos:line="750" pos:column="79">arg<pos:position pos:line="750" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="750" pos:column="83"/></parameter_list>
<block pos:line="751" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="752" pos:column="5">apr_size_t<pos:position pos:line="752" pos:column="15"/></name></type> <name pos:line="752" pos:column="16">val<pos:position pos:line="752" pos:column="19"/></name></decl>;<pos:position pos:line="752" pos:column="20"/></decl_stmt>

    <if pos:line="754" pos:column="5">if <condition pos:line="754" pos:column="8">(<expr><call><name pos:line="754" pos:column="9">sscanf<pos:position pos:line="754" pos:column="15"/></name><argument_list pos:line="754" pos:column="15">(<argument><expr><name pos:line="754" pos:column="16">arg<pos:position pos:line="754" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="754" pos:column="21">"%"<pos:position pos:line="754" pos:column="24"/></literal> <name pos:line="754" pos:column="25">APR_SIZE_T_FMT<pos:position pos:line="754" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="754" pos:column="41">&amp;<pos:position pos:line="754" pos:column="46"/></operator><name pos:line="754" pos:column="42">val<pos:position pos:line="754" pos:column="45"/></name></expr></argument>)<pos:position pos:line="754" pos:column="46"/></argument_list></call> <operator pos:line="754" pos:column="47">!=<pos:position pos:line="754" pos:column="49"/></operator> <literal type="number" pos:line="754" pos:column="50">1<pos:position pos:line="754" pos:column="51"/></literal></expr>)<pos:position pos:line="754" pos:column="52"/></condition><then pos:line="754" pos:column="52"> <block pos:line="754" pos:column="53">{
        <return pos:line="755" pos:column="9">return <expr><literal type="string" pos:line="755" pos:column="16">"MCacheMaxObjectSize value must be an integer (bytes)"<pos:position pos:line="755" pos:column="70"/></literal></expr>;<pos:position pos:line="755" pos:column="71"/></return>
    }<pos:position pos:line="756" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="757" pos:column="5">sconf<pos:position pos:line="757" pos:column="10"/></name><operator pos:line="757" pos:column="10">-&gt;<pos:position pos:line="757" pos:column="15"/></operator><name pos:line="757" pos:column="12">max_cache_object_size<pos:position pos:line="757" pos:column="33"/></name></name> <operator pos:line="757" pos:column="34">=<pos:position pos:line="757" pos:column="35"/></operator> <name pos:line="757" pos:column="36">val<pos:position pos:line="757" pos:column="39"/></name></expr>;<pos:position pos:line="757" pos:column="40"/></expr_stmt>
    <return pos:line="758" pos:column="5">return <expr><name pos:line="758" pos:column="12">NULL<pos:position pos:line="758" pos:column="16"/></name></expr>;<pos:position pos:line="758" pos:column="17"/></return>
}<pos:position pos:line="759" pos:column="2"/></block></function>
<function><specifier pos:line="760" pos:column="1">static<pos:position pos:line="760" pos:column="7"/></specifier> <type><specifier pos:line="760" pos:column="8">const<pos:position pos:line="760" pos:column="13"/></specifier> <name pos:line="760" pos:column="14">char<pos:position pos:line="760" pos:column="18"/></name> 
<modifier pos:line="761" pos:column="1">*<pos:position pos:line="761" pos:column="2"/></modifier></type><name pos:line="761" pos:column="2">set_max_object_count<pos:position pos:line="761" pos:column="22"/></name><parameter_list pos:line="761" pos:column="22">(<parameter><decl><type><name pos:line="761" pos:column="23">cmd_parms<pos:position pos:line="761" pos:column="32"/></name> <modifier pos:line="761" pos:column="33">*<pos:position pos:line="761" pos:column="34"/></modifier></type><name pos:line="761" pos:column="34">parms<pos:position pos:line="761" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="761" pos:column="41">void<pos:position pos:line="761" pos:column="45"/></name> <modifier pos:line="761" pos:column="46">*<pos:position pos:line="761" pos:column="47"/></modifier></type><name pos:line="761" pos:column="47">in_struct_ptr<pos:position pos:line="761" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="761" pos:column="62">const<pos:position pos:line="761" pos:column="67"/></specifier> <name pos:line="761" pos:column="68">char<pos:position pos:line="761" pos:column="72"/></name> <modifier pos:line="761" pos:column="73">*<pos:position pos:line="761" pos:column="74"/></modifier></type><name pos:line="761" pos:column="74">arg<pos:position pos:line="761" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="761" pos:column="78"/></parameter_list>
<block pos:line="762" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="763" pos:column="5">apr_size_t<pos:position pos:line="763" pos:column="15"/></name></type> <name pos:line="763" pos:column="16">val<pos:position pos:line="763" pos:column="19"/></name></decl>;<pos:position pos:line="763" pos:column="20"/></decl_stmt>

    <if pos:line="765" pos:column="5">if <condition pos:line="765" pos:column="8">(<expr><call><name pos:line="765" pos:column="9">sscanf<pos:position pos:line="765" pos:column="15"/></name><argument_list pos:line="765" pos:column="15">(<argument><expr><name pos:line="765" pos:column="16">arg<pos:position pos:line="765" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="765" pos:column="21">"%"<pos:position pos:line="765" pos:column="24"/></literal> <name pos:line="765" pos:column="25">APR_SIZE_T_FMT<pos:position pos:line="765" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="765" pos:column="41">&amp;<pos:position pos:line="765" pos:column="46"/></operator><name pos:line="765" pos:column="42">val<pos:position pos:line="765" pos:column="45"/></name></expr></argument>)<pos:position pos:line="765" pos:column="46"/></argument_list></call> <operator pos:line="765" pos:column="47">!=<pos:position pos:line="765" pos:column="49"/></operator> <literal type="number" pos:line="765" pos:column="50">1<pos:position pos:line="765" pos:column="51"/></literal></expr>)<pos:position pos:line="765" pos:column="52"/></condition><then pos:line="765" pos:column="52"> <block pos:line="765" pos:column="53">{
        <return pos:line="766" pos:column="9">return <expr><literal type="string" pos:line="766" pos:column="16">"MCacheMaxObjectCount value must be an integer"<pos:position pos:line="766" pos:column="63"/></literal></expr>;<pos:position pos:line="766" pos:column="64"/></return>
    }<pos:position pos:line="767" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="768" pos:column="5">sconf<pos:position pos:line="768" pos:column="10"/></name><operator pos:line="768" pos:column="10">-&gt;<pos:position pos:line="768" pos:column="15"/></operator><name pos:line="768" pos:column="12">max_object_cnt<pos:position pos:line="768" pos:column="26"/></name></name> <operator pos:line="768" pos:column="27">=<pos:position pos:line="768" pos:column="28"/></operator> <name pos:line="768" pos:column="29">val<pos:position pos:line="768" pos:column="32"/></name></expr>;<pos:position pos:line="768" pos:column="33"/></expr_stmt>
    <return pos:line="769" pos:column="5">return <expr><name pos:line="769" pos:column="12">NULL<pos:position pos:line="769" pos:column="16"/></name></expr>;<pos:position pos:line="769" pos:column="17"/></return>
}<pos:position pos:line="770" pos:column="2"/></block></function>

<function><specifier pos:line="772" pos:column="1">static<pos:position pos:line="772" pos:column="7"/></specifier> <type><specifier pos:line="772" pos:column="8">const<pos:position pos:line="772" pos:column="13"/></specifier> <name pos:line="772" pos:column="14">char<pos:position pos:line="772" pos:column="18"/></name> 
<modifier pos:line="773" pos:column="1">*<pos:position pos:line="773" pos:column="2"/></modifier></type><name pos:line="773" pos:column="2">set_cache_removal_algorithm<pos:position pos:line="773" pos:column="29"/></name><parameter_list pos:line="773" pos:column="29">(<parameter><decl><type><name pos:line="773" pos:column="30">cmd_parms<pos:position pos:line="773" pos:column="39"/></name> <modifier pos:line="773" pos:column="40">*<pos:position pos:line="773" pos:column="41"/></modifier></type><name pos:line="773" pos:column="41">parms<pos:position pos:line="773" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="773" pos:column="48">void<pos:position pos:line="773" pos:column="52"/></name> <modifier pos:line="773" pos:column="53">*<pos:position pos:line="773" pos:column="54"/></modifier></type><name pos:line="773" pos:column="54">name<pos:position pos:line="773" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="773" pos:column="60">const<pos:position pos:line="773" pos:column="65"/></specifier> <name pos:line="773" pos:column="66">char<pos:position pos:line="773" pos:column="70"/></name> <modifier pos:line="773" pos:column="71">*<pos:position pos:line="773" pos:column="72"/></modifier></type><name pos:line="773" pos:column="72">arg<pos:position pos:line="773" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="773" pos:column="76"/></parameter_list>
<block pos:line="774" pos:column="1">{
    <if pos:line="775" pos:column="5">if <condition pos:line="775" pos:column="8">(<expr><call><name pos:line="775" pos:column="9">strcasecmp<pos:position pos:line="775" pos:column="19"/></name><argument_list pos:line="775" pos:column="19">(<argument><expr><literal type="string" pos:line="775" pos:column="20">"LRU"<pos:position pos:line="775" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="775" pos:column="27">arg<pos:position pos:line="775" pos:column="30"/></name></expr></argument>)<pos:position pos:line="775" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="775" pos:column="32"/></condition><then pos:line="775" pos:column="32"> <block pos:line="775" pos:column="33">{
        <expr_stmt><expr><name><name pos:line="776" pos:column="9">sconf<pos:position pos:line="776" pos:column="14"/></name><operator pos:line="776" pos:column="14">-&gt;<pos:position pos:line="776" pos:column="19"/></operator><name pos:line="776" pos:column="16">cache_remove_algorithm<pos:position pos:line="776" pos:column="38"/></name></name> <operator pos:line="776" pos:column="39">=<pos:position pos:line="776" pos:column="40"/></operator> <name pos:line="776" pos:column="41">memcache_lru_algorithm<pos:position pos:line="776" pos:column="63"/></name></expr>;<pos:position pos:line="776" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="777" pos:column="6"/></block></then>
    <else pos:line="778" pos:column="5">else <block pos:line="778" pos:column="10">{
        <if pos:line="779" pos:column="9">if <condition pos:line="779" pos:column="12">(<expr><call><name pos:line="779" pos:column="13">strcasecmp<pos:position pos:line="779" pos:column="23"/></name><argument_list pos:line="779" pos:column="23">(<argument><expr><literal type="string" pos:line="779" pos:column="24">"GDSF"<pos:position pos:line="779" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="779" pos:column="32">arg<pos:position pos:line="779" pos:column="35"/></name></expr></argument>)<pos:position pos:line="779" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="779" pos:column="37"/></condition><then pos:line="779" pos:column="37"> <block pos:line="779" pos:column="38">{
            <expr_stmt><expr><name><name pos:line="780" pos:column="13">sconf<pos:position pos:line="780" pos:column="18"/></name><operator pos:line="780" pos:column="18">-&gt;<pos:position pos:line="780" pos:column="23"/></operator><name pos:line="780" pos:column="20">cache_remove_algorithm<pos:position pos:line="780" pos:column="42"/></name></name> <operator pos:line="780" pos:column="43">=<pos:position pos:line="780" pos:column="44"/></operator> <name pos:line="780" pos:column="45">memcache_gdsf_algorithm<pos:position pos:line="780" pos:column="68"/></name></expr>;<pos:position pos:line="780" pos:column="69"/></expr_stmt>
        }<pos:position pos:line="781" pos:column="10"/></block></then>
        <else pos:line="782" pos:column="9">else <block pos:line="782" pos:column="14">{
            <return pos:line="783" pos:column="13">return <expr><literal type="string" pos:line="783" pos:column="20">"currently implemented algorithms are LRU and GDSF"<pos:position pos:line="783" pos:column="71"/></literal></expr>;<pos:position pos:line="783" pos:column="72"/></return>
        }<pos:position pos:line="784" pos:column="10"/></block></else></if>
    }<pos:position pos:line="785" pos:column="6"/></block></else></if>
    <return pos:line="786" pos:column="5">return <expr><name pos:line="786" pos:column="12">NULL<pos:position pos:line="786" pos:column="16"/></name></expr>;<pos:position pos:line="786" pos:column="17"/></return>
}<pos:position pos:line="787" pos:column="2"/></block></function>

<function><specifier pos:line="789" pos:column="1">static<pos:position pos:line="789" pos:column="7"/></specifier> <type><specifier pos:line="789" pos:column="8">const<pos:position pos:line="789" pos:column="13"/></specifier> <name pos:line="789" pos:column="14">char<pos:position pos:line="789" pos:column="18"/></name> <modifier pos:line="789" pos:column="19">*<pos:position pos:line="789" pos:column="20"/></modifier></type><name pos:line="789" pos:column="20">set_max_streaming_buffer<pos:position pos:line="789" pos:column="44"/></name><parameter_list pos:line="789" pos:column="44">(<parameter><decl><type><name pos:line="789" pos:column="45">cmd_parms<pos:position pos:line="789" pos:column="54"/></name> <modifier pos:line="789" pos:column="55">*<pos:position pos:line="789" pos:column="56"/></modifier></type><name pos:line="789" pos:column="56">parms<pos:position pos:line="789" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="789" pos:column="63">void<pos:position pos:line="789" pos:column="67"/></name> <modifier pos:line="789" pos:column="68">*<pos:position pos:line="789" pos:column="69"/></modifier></type><name pos:line="789" pos:column="69">dummy<pos:position pos:line="789" pos:column="74"/></name></decl></parameter>,
                                            <parameter><decl><type><specifier pos:line="790" pos:column="45">const<pos:position pos:line="790" pos:column="50"/></specifier> <name pos:line="790" pos:column="51">char<pos:position pos:line="790" pos:column="55"/></name> <modifier pos:line="790" pos:column="56">*<pos:position pos:line="790" pos:column="57"/></modifier></type><name pos:line="790" pos:column="57">arg<pos:position pos:line="790" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="790" pos:column="61"/></parameter_list>
<block pos:line="791" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="792" pos:column="5">apr_off_t<pos:position pos:line="792" pos:column="14"/></name></type> <name pos:line="792" pos:column="15">val<pos:position pos:line="792" pos:column="18"/></name></decl>;<pos:position pos:line="792" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="793" pos:column="5">char<pos:position pos:line="793" pos:column="9"/></name> <modifier pos:line="793" pos:column="10">*<pos:position pos:line="793" pos:column="11"/></modifier></type><name pos:line="793" pos:column="11">err<pos:position pos:line="793" pos:column="14"/></name></decl>;<pos:position pos:line="793" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><name pos:line="794" pos:column="5">val<pos:position pos:line="794" pos:column="8"/></name> <operator pos:line="794" pos:column="9">=<pos:position pos:line="794" pos:column="10"/></operator> <operator pos:line="794" pos:column="11">(<pos:position pos:line="794" pos:column="12"/></operator><name pos:line="794" pos:column="12">apr_off_t<pos:position pos:line="794" pos:column="21"/></name><operator pos:line="794" pos:column="21">)<pos:position pos:line="794" pos:column="22"/></operator><call><name pos:line="794" pos:column="22">strtol<pos:position pos:line="794" pos:column="28"/></name><argument_list pos:line="794" pos:column="28">(<argument><expr><name pos:line="794" pos:column="29">arg<pos:position pos:line="794" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="794" pos:column="34">&amp;<pos:position pos:line="794" pos:column="39"/></operator><name pos:line="794" pos:column="35">err<pos:position pos:line="794" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="794" pos:column="40">10<pos:position pos:line="794" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="794" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="794" pos:column="44"/></expr_stmt>
    <if pos:line="795" pos:column="5">if <condition pos:line="795" pos:column="8">(<expr><operator pos:line="795" pos:column="9">*<pos:position pos:line="795" pos:column="10"/></operator><name pos:line="795" pos:column="10">err<pos:position pos:line="795" pos:column="13"/></name> <operator pos:line="795" pos:column="14">!=<pos:position pos:line="795" pos:column="16"/></operator> <literal type="number" pos:line="795" pos:column="17">0<pos:position pos:line="795" pos:column="18"/></literal></expr>)<pos:position pos:line="795" pos:column="19"/></condition><then pos:line="795" pos:column="19"> <block pos:line="795" pos:column="20">{
        <return pos:line="796" pos:column="9">return <expr><literal type="string" pos:line="796" pos:column="16">"MCacheMaxStreamingBuffer value must be a number"<pos:position pos:line="796" pos:column="65"/></literal></expr>;<pos:position pos:line="796" pos:column="66"/></return>
    }<pos:position pos:line="797" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="798" pos:column="5">sconf<pos:position pos:line="798" pos:column="10"/></name><operator pos:line="798" pos:column="10">-&gt;<pos:position pos:line="798" pos:column="15"/></operator><name pos:line="798" pos:column="12">max_streaming_buffer_size<pos:position pos:line="798" pos:column="37"/></name></name> <operator pos:line="798" pos:column="38">=<pos:position pos:line="798" pos:column="39"/></operator> <name pos:line="798" pos:column="40">val<pos:position pos:line="798" pos:column="43"/></name></expr>;<pos:position pos:line="798" pos:column="44"/></expr_stmt>
    <return pos:line="799" pos:column="5">return <expr><name pos:line="799" pos:column="12">NULL<pos:position pos:line="799" pos:column="16"/></name></expr>;<pos:position pos:line="799" pos:column="17"/></return>
}<pos:position pos:line="800" pos:column="2"/></block></function>

<decl_stmt><decl><specifier pos:line="802" pos:column="1">static<pos:position pos:line="802" pos:column="7"/></specifier> <type><specifier pos:line="802" pos:column="8">const<pos:position pos:line="802" pos:column="13"/></specifier> <name pos:line="802" pos:column="14">command_rec<pos:position pos:line="802" pos:column="25"/></name></type> <name><name pos:line="802" pos:column="26">cache_cmds<pos:position pos:line="802" pos:column="36"/></name><index pos:line="802" pos:column="36">[]<pos:position pos:line="802" pos:column="38"/></index></name> <init pos:line="802" pos:column="39">=
<expr><block pos:line="803" pos:column="1">{
    <expr><call><name pos:line="804" pos:column="5">AP_INIT_TAKE1<pos:position pos:line="804" pos:column="18"/></name><argument_list pos:line="804" pos:column="18">(<argument><expr><literal type="string" pos:line="804" pos:column="19">"MCacheSize"<pos:position pos:line="804" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="804" pos:column="33">set_max_cache_size<pos:position pos:line="804" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="804" pos:column="53">NULL<pos:position pos:line="804" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="804" pos:column="59">RSRC_CONF<pos:position pos:line="804" pos:column="68"/></name></expr></argument>,
     <argument><expr><literal type="string" pos:line="805" pos:column="6">"The maximum amount of memory used by the cache in KBytes"<pos:position pos:line="805" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="805" pos:column="65"/></argument_list></call></expr>,
    <expr><call><name pos:line="806" pos:column="5">AP_INIT_TAKE1<pos:position pos:line="806" pos:column="18"/></name><argument_list pos:line="806" pos:column="18">(<argument><expr><literal type="string" pos:line="806" pos:column="19">"MCacheMaxObjectCount"<pos:position pos:line="806" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="806" pos:column="43">set_max_object_count<pos:position pos:line="806" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="806" pos:column="65">NULL<pos:position pos:line="806" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="806" pos:column="71">RSRC_CONF<pos:position pos:line="806" pos:column="80"/></name></expr></argument>,
     <argument><expr><literal type="string" pos:line="807" pos:column="6">"The maximum number of objects allowed to be placed in the cache"<pos:position pos:line="807" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="807" pos:column="72"/></argument_list></call></expr>,
    <expr><call><name pos:line="808" pos:column="5">AP_INIT_TAKE1<pos:position pos:line="808" pos:column="18"/></name><argument_list pos:line="808" pos:column="18">(<argument><expr><literal type="string" pos:line="808" pos:column="19">"MCacheMinObjectSize"<pos:position pos:line="808" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="808" pos:column="42">set_min_cache_object_size<pos:position pos:line="808" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="808" pos:column="69">NULL<pos:position pos:line="808" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="808" pos:column="75">RSRC_CONF<pos:position pos:line="808" pos:column="84"/></name></expr></argument>,
     <argument><expr><literal type="string" pos:line="809" pos:column="6">"The minimum size (in bytes) of an object to be placed in the cache"<pos:position pos:line="809" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="809" pos:column="75"/></argument_list></call></expr>,
    <expr><call><name pos:line="810" pos:column="5">AP_INIT_TAKE1<pos:position pos:line="810" pos:column="18"/></name><argument_list pos:line="810" pos:column="18">(<argument><expr><literal type="string" pos:line="810" pos:column="19">"MCacheMaxObjectSize"<pos:position pos:line="810" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="810" pos:column="42">set_max_cache_object_size<pos:position pos:line="810" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="810" pos:column="69">NULL<pos:position pos:line="810" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="810" pos:column="75">RSRC_CONF<pos:position pos:line="810" pos:column="84"/></name></expr></argument>,
     <argument><expr><literal type="string" pos:line="811" pos:column="6">"The maximum size (in bytes) of an object to be placed in the cache"<pos:position pos:line="811" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="811" pos:column="75"/></argument_list></call></expr>,
    <expr><call><name pos:line="812" pos:column="5">AP_INIT_TAKE1<pos:position pos:line="812" pos:column="18"/></name><argument_list pos:line="812" pos:column="18">(<argument><expr><literal type="string" pos:line="812" pos:column="19">"MCacheRemovalAlgorithm"<pos:position pos:line="812" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="812" pos:column="45">set_cache_removal_algorithm<pos:position pos:line="812" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="812" pos:column="74">NULL<pos:position pos:line="812" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="812" pos:column="80">RSRC_CONF<pos:position pos:line="812" pos:column="89"/></name></expr></argument>,
     <argument><expr><literal type="string" pos:line="813" pos:column="6">"The algorithm used to remove entries from the cache (default: GDSF)"<pos:position pos:line="813" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="813" pos:column="76"/></argument_list></call></expr>,
    <expr><call><name pos:line="814" pos:column="5">AP_INIT_TAKE1<pos:position pos:line="814" pos:column="18"/></name><argument_list pos:line="814" pos:column="18">(<argument><expr><literal type="string" pos:line="814" pos:column="19">"MCacheMaxStreamingBuffer"<pos:position pos:line="814" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="814" pos:column="47">set_max_streaming_buffer<pos:position pos:line="814" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="814" pos:column="73">NULL<pos:position pos:line="814" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="814" pos:column="79">RSRC_CONF<pos:position pos:line="814" pos:column="88"/></name></expr></argument>,
     <argument><expr><literal type="string" pos:line="815" pos:column="6">"Maximum number of bytes of content to buffer for a streamed response"<pos:position pos:line="815" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="815" pos:column="77"/></argument_list></call></expr>,
    <expr><block pos:line="816" pos:column="5">{<expr><name pos:line="816" pos:column="6">NULL<pos:position pos:line="816" pos:column="10"/></name></expr>}<pos:position pos:line="816" pos:column="11"/></block></expr>
}<pos:position pos:line="817" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="817" pos:column="3"/></decl_stmt>

<function><specifier pos:line="819" pos:column="1">static<pos:position pos:line="819" pos:column="7"/></specifier> <type><name pos:line="819" pos:column="8">void<pos:position pos:line="819" pos:column="12"/></name></type> <name pos:line="819" pos:column="13">register_hooks<pos:position pos:line="819" pos:column="27"/></name><parameter_list pos:line="819" pos:column="27">(<parameter><decl><type><name pos:line="819" pos:column="28">apr_pool_t<pos:position pos:line="819" pos:column="38"/></name> <modifier pos:line="819" pos:column="39">*<pos:position pos:line="819" pos:column="40"/></modifier></type><name pos:line="819" pos:column="40">p<pos:position pos:line="819" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="819" pos:column="42"/></parameter_list>
<block pos:line="820" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="821" pos:column="5">ap_hook_post_config<pos:position pos:line="821" pos:column="24"/></name><argument_list pos:line="821" pos:column="24">(<argument><expr><name pos:line="821" pos:column="25">mem_cache_post_config<pos:position pos:line="821" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="821" pos:column="48">NULL<pos:position pos:line="821" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="821" pos:column="54">NULL<pos:position pos:line="821" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="821" pos:column="60">APR_HOOK_MIDDLE<pos:position pos:line="821" pos:column="75"/></name></expr></argument>)<pos:position pos:line="821" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="821" pos:column="77"/></expr_stmt>
    <comment type="block" pos:line="822" pos:column="5">/* cache initializer */</comment>
    <comment type="block" pos:line="823" pos:column="5">/* cache_hook_init(cache_mem_init, NULL, NULL, APR_HOOK_MIDDLE);  */</comment>
    <expr_stmt><expr><call><name pos:line="824" pos:column="5">cache_hook_create_entity<pos:position pos:line="824" pos:column="29"/></name><argument_list pos:line="824" pos:column="29">(<argument><expr><name pos:line="824" pos:column="30">create_entity<pos:position pos:line="824" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="824" pos:column="45">NULL<pos:position pos:line="824" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="824" pos:column="51">NULL<pos:position pos:line="824" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="824" pos:column="57">APR_HOOK_MIDDLE<pos:position pos:line="824" pos:column="72"/></name></expr></argument>)<pos:position pos:line="824" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="824" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="825" pos:column="5">cache_hook_open_entity<pos:position pos:line="825" pos:column="27"/></name><argument_list pos:line="825" pos:column="27">(<argument><expr><name pos:line="825" pos:column="28">open_entity<pos:position pos:line="825" pos:column="39"/></name></expr></argument>,  <argument><expr><name pos:line="825" pos:column="42">NULL<pos:position pos:line="825" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="825" pos:column="48">NULL<pos:position pos:line="825" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="825" pos:column="54">APR_HOOK_MIDDLE<pos:position pos:line="825" pos:column="69"/></name></expr></argument>)<pos:position pos:line="825" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="825" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="826" pos:column="5">cache_hook_remove_url<pos:position pos:line="826" pos:column="26"/></name><argument_list pos:line="826" pos:column="26">(<argument><expr><name pos:line="826" pos:column="27">remove_url<pos:position pos:line="826" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="826" pos:column="39">NULL<pos:position pos:line="826" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="826" pos:column="45">NULL<pos:position pos:line="826" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="826" pos:column="51">APR_HOOK_MIDDLE<pos:position pos:line="826" pos:column="66"/></name></expr></argument>)<pos:position pos:line="826" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="826" pos:column="68"/></expr_stmt>
}<pos:position pos:line="827" pos:column="2"/></block></function>

<decl_stmt><decl><type><name pos:line="829" pos:column="1">module<pos:position pos:line="829" pos:column="7"/></name> <name pos:line="829" pos:column="8">AP_MODULE_DECLARE_DATA<pos:position pos:line="829" pos:column="30"/></name></type> <name pos:line="829" pos:column="31">mem_cache_module<pos:position pos:line="829" pos:column="47"/></name> <init pos:line="829" pos:column="48">=
<expr><block pos:line="830" pos:column="1">{
    <expr><name pos:line="831" pos:column="5">STANDARD20_MODULE_STUFF<pos:position pos:line="831" pos:column="28"/></name></expr>,
    <expr><name pos:line="832" pos:column="5">NULL<pos:position pos:line="832" pos:column="9"/></name></expr>,                    <comment type="block" pos:line="832" pos:column="30">/* create per-directory config structure */</comment>
    <expr><name pos:line="833" pos:column="5">NULL<pos:position pos:line="833" pos:column="9"/></name></expr>,                    <comment type="block" pos:line="833" pos:column="30">/* merge per-directory config structures */</comment>
    <expr><name pos:line="834" pos:column="5">create_cache_config<pos:position pos:line="834" pos:column="24"/></name></expr>,     <comment type="block" pos:line="834" pos:column="30">/* create per-server config structure */</comment>
    <expr><name pos:line="835" pos:column="5">NULL<pos:position pos:line="835" pos:column="9"/></name></expr>,                    <comment type="block" pos:line="835" pos:column="30">/* merge per-server config structures */</comment>
    <expr><name pos:line="836" pos:column="5">cache_cmds<pos:position pos:line="836" pos:column="15"/></name></expr>,              <comment type="block" pos:line="836" pos:column="30">/* command apr_table_t */</comment>
    <expr><name pos:line="837" pos:column="5">register_hooks<pos:position pos:line="837" pos:column="19"/></name></expr>
}<pos:position pos:line="838" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="838" pos:column="3"/></decl_stmt></block></function></unit>
