<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3850_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">find_if_index<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">apr_sockaddr_t<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">iface<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name> <name pos:line="3" pos:column="14">int<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">index<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><literal type="number" pos:line="3" pos:column="26">0<pos:position pos:line="3" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><call><name pos:line="4" pos:column="5">defined<pos:position pos:line="4" pos:column="12"/></name><argument_list pos:line="4" pos:column="12">(<argument><expr><name pos:line="4" pos:column="13">HAVE_GETIFADDRS<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call> <operator pos:line="4" pos:column="30">&amp;&amp;<pos:position pos:line="4" pos:column="40"/></operator> <name pos:line="4" pos:column="33">APR_HAVE_IPV6<pos:position pos:line="4" pos:column="46"/></name></expr></cpp:if> 
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">ifaddrs<pos:position pos:line="5" pos:column="19"/></name></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">ifp<pos:position pos:line="5" pos:column="24"/></name></decl>, <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="27">ifs<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>

    <comment type="block" format="doxygen" pos:line="7" pos:column="5">/**
     * TODO: getifaddrs is only portable to *BSD and OS X. Using ioctl 
     *       and SIOCGIFCONF is needed for Linux/Solaris support.
     *       
     *       There is a wrapper that takes the messy ioctl interface into 
     *       getifaddrs. The license is acceptable, but, It is a fairly large 
     *       chunk of code.
     */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">getifaddrs<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><operator pos:line="15" pos:column="20">&amp;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="21">ifs<pos:position pos:line="15" pos:column="24"/></name></expr></argument>)<pos:position pos:line="15" pos:column="25"/></argument_list></call> <operator pos:line="15" pos:column="26">!=<pos:position pos:line="15" pos:column="28"/></operator> <literal type="number" pos:line="15" pos:column="29">0<pos:position pos:line="15" pos:column="30"/></literal></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31"> <block pos:line="15" pos:column="32">{
        <return pos:line="16" pos:column="9">return <expr><literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal></expr>;<pos:position pos:line="16" pos:column="18"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init><expr><name pos:line="19" pos:column="10">ifp<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="16">ifs<pos:position pos:line="19" pos:column="19"/></name></expr>;<pos:position pos:line="19" pos:column="20"/></init> <condition><expr><name pos:line="19" pos:column="21">ifp<pos:position pos:line="19" pos:column="24"/></name></expr>;<pos:position pos:line="19" pos:column="25"/></condition> <incr><expr><name pos:line="19" pos:column="26">ifp<pos:position pos:line="19" pos:column="29"/></name> <operator pos:line="19" pos:column="30">=<pos:position pos:line="19" pos:column="31"/></operator> <name><name pos:line="19" pos:column="32">ifp<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">-&gt;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="37">ifa_next<pos:position pos:line="19" pos:column="45"/></name></name></expr></incr>)<pos:position pos:line="19" pos:column="46"/></control> <block pos:line="19" pos:column="47">{
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name><name pos:line="20" pos:column="13">ifp<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">ifa_addr<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">!=<pos:position pos:line="20" pos:column="29"/></operator> <name pos:line="20" pos:column="30">NULL<pos:position pos:line="20" pos:column="34"/></name> <operator pos:line="20" pos:column="35">&amp;&amp;<pos:position pos:line="20" pos:column="45"/></operator> <name><name pos:line="20" pos:column="38">ifp<pos:position pos:line="20" pos:column="41"/></name><operator pos:line="20" pos:column="41">-&gt;<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="43">ifa_addr<pos:position pos:line="20" pos:column="51"/></name><operator pos:line="20" pos:column="51">-&gt;<pos:position pos:line="20" pos:column="56"/></operator><name pos:line="20" pos:column="53">sa_family<pos:position pos:line="20" pos:column="62"/></name></name> <operator pos:line="20" pos:column="63">==<pos:position pos:line="20" pos:column="65"/></operator> <name pos:line="20" pos:column="66">AF_INET6<pos:position pos:line="20" pos:column="74"/></name></expr>)<pos:position pos:line="20" pos:column="75"/></condition><then pos:line="20" pos:column="75"> <block pos:line="20" pos:column="76">{
            <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><call><name pos:line="21" pos:column="17">memcmp<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><operator pos:line="21" pos:column="24">&amp;<pos:position pos:line="21" pos:column="29"/></operator><name><name pos:line="21" pos:column="25">iface<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">-&gt;<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="32">sa<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">.<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="35">sin6<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">.<pos:position pos:line="21" pos:column="40"/></operator><name pos:line="21" pos:column="40">sin6_addr<pos:position pos:line="21" pos:column="49"/></name></name></expr></argument>,
                       <argument><expr><operator pos:line="22" pos:column="24">&amp;<pos:position pos:line="22" pos:column="29"/></operator><name><name pos:line="22" pos:column="25">ifp<pos:position pos:line="22" pos:column="28"/></name><operator pos:line="22" pos:column="28">-&gt;<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="30">ifa_addr<pos:position pos:line="22" pos:column="38"/></name><operator pos:line="22" pos:column="38">-&gt;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="40">sa_data<pos:position pos:line="22" pos:column="47"/></name><index pos:line="22" pos:column="47">[<expr><literal type="number" pos:line="22" pos:column="48">0<pos:position pos:line="22" pos:column="49"/></literal></expr>]<pos:position pos:line="22" pos:column="50"/></index></name></expr></argument>,
                       <argument><expr><sizeof pos:line="23" pos:column="24">sizeof<argument_list pos:line="23" pos:column="30">(<argument><expr><name><name pos:line="23" pos:column="31">iface<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">sa<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">.<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="41">sin6<pos:position pos:line="23" pos:column="45"/></name><operator pos:line="23" pos:column="45">.<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="46">sin6_addr<pos:position pos:line="23" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call> <operator pos:line="23" pos:column="58">==<pos:position pos:line="23" pos:column="60"/></operator> <literal type="number" pos:line="23" pos:column="61">0<pos:position pos:line="23" pos:column="62"/></literal></expr>)<pos:position pos:line="23" pos:column="63"/></condition><then pos:line="23" pos:column="63"> <block pos:line="23" pos:column="64">{
                <expr_stmt><expr><name pos:line="24" pos:column="17">index<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <call><name pos:line="24" pos:column="25">if_nametoindex<pos:position pos:line="24" pos:column="39"/></name><argument_list pos:line="24" pos:column="39">(<argument><expr><name><name pos:line="24" pos:column="40">ifp<pos:position pos:line="24" pos:column="43"/></name><operator pos:line="24" pos:column="43">-&gt;<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="45">ifa_name<pos:position pos:line="24" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
                <break pos:line="25" pos:column="17">break;<pos:position pos:line="25" pos:column="23"/></break>
            }<pos:position pos:line="26" pos:column="14"/></block></then></if>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>
    }<pos:position pos:line="28" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="30" pos:column="5">freeifaddrs<pos:position pos:line="30" pos:column="16"/></name><argument_list pos:line="30" pos:column="16">(<argument><expr><name pos:line="30" pos:column="17">ifs<pos:position pos:line="30" pos:column="20"/></name></expr></argument>)<pos:position pos:line="30" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">index<pos:position pos:line="32" pos:column="17"/></name></expr>;<pos:position pos:line="32" pos:column="18"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
