<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3132_httpd-2.2.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">XML_Error<pos:position pos:line="1" pos:column="22"/></name></name> <name pos:line="1" pos:column="23">PTRCALL<pos:position pos:line="1" pos:column="30"/></name></type>
<name pos:line="2" pos:column="1">entityValueProcessor<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">XML_Parser<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">parser<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="3" pos:column="22">const<pos:position pos:line="3" pos:column="27"/></specifier> <name pos:line="3" pos:column="28">char<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">s<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="4" pos:column="22">const<pos:position pos:line="4" pos:column="27"/></specifier> <name pos:line="4" pos:column="28">char<pos:position pos:line="4" pos:column="32"/></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">end<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="5" pos:column="22">const<pos:position pos:line="5" pos:column="27"/></specifier> <name pos:line="5" pos:column="28">char<pos:position pos:line="5" pos:column="32"/></name> <modifier pos:line="5" pos:column="33">*<pos:position pos:line="5" pos:column="34"/></modifier><modifier pos:line="5" pos:column="34">*<pos:position pos:line="5" pos:column="35"/></modifier></type><name pos:line="5" pos:column="35">nextPtr<pos:position pos:line="5" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="43"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">start<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">s<pos:position pos:line="7" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">next<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">s<pos:position pos:line="8" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">ENCODING<pos:position pos:line="9" pos:column="17"/></name> <modifier pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></modifier></type><name pos:line="9" pos:column="19">enc<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><name pos:line="9" pos:column="25">encoding<pos:position pos:line="9" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="10" pos:column="3">int<pos:position pos:line="10" pos:column="6"/></name></type> <name pos:line="10" pos:column="7">tok<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>

  <for pos:line="12" pos:column="3">for <control pos:line="12" pos:column="7">(<init pos:line="12" pos:column="8">;<pos:position pos:line="12" pos:column="9"/></init><condition pos:line="12" pos:column="9">;<pos:position pos:line="12" pos:column="10"/></condition><incr/>)<pos:position pos:line="12" pos:column="11"/></control> <block pos:line="12" pos:column="12">{
    <expr_stmt><expr><name pos:line="13" pos:column="5">tok<pos:position pos:line="13" pos:column="8"/></name> <operator pos:line="13" pos:column="9">=<pos:position pos:line="13" pos:column="10"/></operator> <call><name pos:line="13" pos:column="11">XmlPrologTok<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">enc<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="29">start<pos:position pos:line="13" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="36">end<pos:position pos:line="13" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="41">&amp;<pos:position pos:line="13" pos:column="46"/></operator><name pos:line="13" pos:column="42">next<pos:position pos:line="13" pos:column="46"/></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">tok<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">&lt;=<pos:position pos:line="14" pos:column="18"/></operator> <literal type="number" pos:line="14" pos:column="16">0<pos:position pos:line="14" pos:column="17"/></literal></expr>)<pos:position pos:line="14" pos:column="18"/></condition><then pos:line="14" pos:column="18"> <block pos:line="14" pos:column="19">{
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><name pos:line="15" pos:column="11">nextPtr<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">!=<pos:position pos:line="15" pos:column="21"/></operator> <literal type="number" pos:line="15" pos:column="22">0<pos:position pos:line="15" pos:column="23"/></literal> <operator pos:line="15" pos:column="24">&amp;&amp;<pos:position pos:line="15" pos:column="34"/></operator> <name pos:line="15" pos:column="27">tok<pos:position pos:line="15" pos:column="30"/></name> <operator pos:line="15" pos:column="31">!=<pos:position pos:line="15" pos:column="33"/></operator> <name pos:line="15" pos:column="34">XML_TOK_INVALID<pos:position pos:line="15" pos:column="49"/></name></expr>)<pos:position pos:line="15" pos:column="50"/></condition><then pos:line="15" pos:column="50"> <block pos:line="15" pos:column="51">{
        <expr_stmt><expr><operator pos:line="16" pos:column="9">*<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">nextPtr<pos:position pos:line="16" pos:column="17"/></name> <operator pos:line="16" pos:column="18">=<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">s<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">XML_ERROR_NONE<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></return>
      }<pos:position pos:line="18" pos:column="8"/></block></then></if>
      <switch pos:line="19" pos:column="7">switch <condition pos:line="19" pos:column="14">(<expr><name pos:line="19" pos:column="15">tok<pos:position pos:line="19" pos:column="18"/></name></expr>)<pos:position pos:line="19" pos:column="19"/></condition> <block pos:line="19" pos:column="20">{
      <case pos:line="20" pos:column="7">case <expr><name pos:line="20" pos:column="12">XML_TOK_INVALID<pos:position pos:line="20" pos:column="27"/></name></expr>:<pos:position pos:line="20" pos:column="28"/></case>
              <return pos:line="21" pos:column="15">return <expr><name pos:line="21" pos:column="22">XML_ERROR_INVALID_TOKEN<pos:position pos:line="21" pos:column="45"/></name></expr>;<pos:position pos:line="21" pos:column="46"/></return>
      <case pos:line="22" pos:column="7">case <expr><name pos:line="22" pos:column="12">XML_TOK_PARTIAL<pos:position pos:line="22" pos:column="27"/></name></expr>:<pos:position pos:line="22" pos:column="28"/></case>
              <return pos:line="23" pos:column="15">return <expr><name pos:line="23" pos:column="22">XML_ERROR_UNCLOSED_TOKEN<pos:position pos:line="23" pos:column="46"/></name></expr>;<pos:position pos:line="23" pos:column="47"/></return>
      <case pos:line="24" pos:column="7">case <expr><name pos:line="24" pos:column="12">XML_TOK_PARTIAL_CHAR<pos:position pos:line="24" pos:column="32"/></name></expr>:<pos:position pos:line="24" pos:column="33"/></case>
              <return pos:line="25" pos:column="15">return <expr><name pos:line="25" pos:column="22">XML_ERROR_PARTIAL_CHAR<pos:position pos:line="25" pos:column="44"/></name></expr>;<pos:position pos:line="25" pos:column="45"/></return>
      <case pos:line="26" pos:column="7">case <expr><name pos:line="26" pos:column="12">XML_TOK_NONE<pos:position pos:line="26" pos:column="24"/></name></expr>:<pos:position pos:line="26" pos:column="25"/></case>   <comment type="block" pos:line="26" pos:column="28">/* start == end */</comment>
      <default pos:line="27" pos:column="7">default:<pos:position pos:line="27" pos:column="15"/></default>
        <break pos:line="28" pos:column="9">break;<pos:position pos:line="28" pos:column="15"/></break>
      }<pos:position pos:line="29" pos:column="8"/></block></switch>
      <return pos:line="30" pos:column="7">return <expr><call><name pos:line="30" pos:column="14">storeEntityValue<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">parser<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="39">enc<pos:position pos:line="30" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="44">s<pos:position pos:line="30" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="47">end<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="32" pos:column="5">start<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <name pos:line="32" pos:column="13">next<pos:position pos:line="32" pos:column="17"/></name></expr>;<pos:position pos:line="32" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></for>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
