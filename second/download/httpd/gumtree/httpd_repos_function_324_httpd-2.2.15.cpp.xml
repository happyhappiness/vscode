<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_324_httpd-2.2.15.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">dav_error_response_tag<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">request_rec<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">r<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="2" pos:column="35">dav_error<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">err<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="50"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><name><name pos:line="4" pos:column="5">r<pos:position pos:line="4" pos:column="6"/></name><operator pos:line="4" pos:column="6">-&gt;<pos:position pos:line="4" pos:column="11"/></operator><name pos:line="4" pos:column="8">status<pos:position pos:line="4" pos:column="14"/></name></name> <operator pos:line="4" pos:column="15">=<pos:position pos:line="4" pos:column="16"/></operator> <name><name pos:line="4" pos:column="17">err<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">-&gt;<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="22">status<pos:position pos:line="4" pos:column="28"/></name></name></expr>;<pos:position pos:line="4" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* ### I really don't think this is needed; gotta test */</comment>
    <expr_stmt><expr><name><name pos:line="7" pos:column="5">r<pos:position pos:line="7" pos:column="6"/></name><operator pos:line="7" pos:column="6">-&gt;<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="8">status_line<pos:position pos:line="7" pos:column="19"/></name></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <call><name pos:line="7" pos:column="22">ap_get_status_line<pos:position pos:line="7" pos:column="40"/></name><argument_list pos:line="7" pos:column="40">(<argument><expr><name><name pos:line="7" pos:column="41">err<pos:position pos:line="7" pos:column="44"/></name><operator pos:line="7" pos:column="44">-&gt;<pos:position pos:line="7" pos:column="49"/></operator><name pos:line="7" pos:column="46">status<pos:position pos:line="7" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="54"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">ap_set_content_type<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">r<pos:position pos:line="9" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="28">DAV_XML_CONTENT_TYPE<pos:position pos:line="9" pos:column="48"/></name></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>

    <macro><name pos:line="11" pos:column="5">ap_rputs<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">(<argument pos:line="11" pos:column="14">DAV_XML_HEADER DEBUG_CR
             <literal type="string" pos:line="12" pos:column="14">"&lt;D:error xmlns:D=\"DAV:\""<pos:position pos:line="12" pos:column="44"/></literal></argument>, <argument pos:line="12" pos:column="43">r<pos:position pos:line="12" pos:column="44"/></argument>)<pos:position pos:line="12" pos:column="45"/></argument_list></macro><empty_stmt pos:line="12" pos:column="45">;<pos:position pos:line="12" pos:column="46"/></empty_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">err<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">desc<pos:position pos:line="14" pos:column="18"/></name></name> <operator pos:line="14" pos:column="19">!=<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="22">NULL<pos:position pos:line="14" pos:column="26"/></name></expr>)<pos:position pos:line="14" pos:column="27"/></condition><then pos:line="14" pos:column="27"> <block pos:line="14" pos:column="28">{
        <comment type="block" pos:line="15" pos:column="9">/* ### should move this namespace somewhere (with the others!) */</comment>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">ap_rputs<pos:position pos:line="16" pos:column="17"/></name><argument_list pos:line="16" pos:column="17">(<argument><expr><literal type="string" pos:line="16" pos:column="18">" xmlns:m=\"http://apache.org/dav/xmlns\""<pos:position pos:line="16" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="62">r<pos:position pos:line="16" pos:column="63"/></name></expr></argument>)<pos:position pos:line="16" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">err<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator></name></expr></condition></if><namespace pos:line="19" pos:column="14">namespace != <name pos:line="19" pos:column="27">NULL<pos:position pos:line="19" pos:column="31"/></name></namespace>)<pos:position pos:line="19" pos:column="32"/></block> <block pos:line="19" pos:column="33">{
        <macro><name pos:line="20" pos:column="9">ap_rprintf<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument pos:line="20" pos:column="20">r<pos:position pos:line="20" pos:column="21"/></argument>,
                   <argument><literal type="string" pos:line="21" pos:column="20">" xmlns:C=\"%s\"&gt;"<pos:position pos:line="21" pos:column="41"/></literal> DEBUG_CR
                   <literal type="string" pos:line="22" pos:column="20">"&lt;C:%s/&gt;"<pos:position pos:line="22" pos:column="35"/></literal> DEBUG_CR<pos:position pos:line="22" pos:column="38"/></argument>,
                   <argument pos:line="23" pos:column="20">err-&gt;namespace<pos:position pos:line="23" pos:column="34"/></argument>, <argument pos:line="23" pos:column="36">err-&gt;tagname<pos:position pos:line="23" pos:column="48"/></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></macro><empty_stmt pos:line="23" pos:column="49">;<pos:position pos:line="23" pos:column="50"/></empty_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></function>
    <else pos:line="25" pos:column="5">else <block pos:line="25" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">ap_rprintf<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">r<pos:position pos:line="26" pos:column="21"/></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="27" pos:column="20">"&gt;"<pos:position pos:line="27" pos:column="26"/></literal> <name pos:line="27" pos:column="24">DEBUG_CR<pos:position pos:line="27" pos:column="32"/></name>
                   <literal type="string" pos:line="28" pos:column="20">"&lt;D:%s/&gt;"<pos:position pos:line="28" pos:column="35"/></literal> <name pos:line="28" pos:column="30">DEBUG_CR<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="40">err<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">-&gt;<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="45">tagname<pos:position pos:line="28" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></else>

    <comment type="block" pos:line="31" pos:column="5">/* here's our mod_dav specific tag: */</comment>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name><name pos:line="32" pos:column="9">err<pos:position pos:line="32" pos:column="12"/></name><operator pos:line="32" pos:column="12">-&gt;<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="14">desc<pos:position pos:line="32" pos:column="18"/></name></name> <operator pos:line="32" pos:column="19">!=<pos:position pos:line="32" pos:column="21"/></operator> <name pos:line="32" pos:column="22">NULL<pos:position pos:line="32" pos:column="26"/></name></expr>)<pos:position pos:line="32" pos:column="27"/></condition><then pos:line="32" pos:column="27"> <block pos:line="32" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">ap_rprintf<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">r<pos:position pos:line="33" pos:column="21"/></name></expr></argument>,
                   <argument><expr><literal type="string" pos:line="34" pos:column="20">"&lt;m:human-readable errcode=\"%d\"&gt;"<pos:position pos:line="34" pos:column="61"/></literal> <name pos:line="34" pos:column="56">DEBUG_CR<pos:position pos:line="34" pos:column="64"/></name>
                   <literal type="string" pos:line="35" pos:column="20">"%s"<pos:position pos:line="35" pos:column="24"/></literal> <name pos:line="35" pos:column="25">DEBUG_CR<pos:position pos:line="35" pos:column="33"/></name>
                   <literal type="string" pos:line="36" pos:column="20">"&lt;/m:human-readable&gt;"<pos:position pos:line="36" pos:column="47"/></literal> <name pos:line="36" pos:column="42">DEBUG_CR<pos:position pos:line="36" pos:column="50"/></name></expr></argument>,
                   <argument><expr><name><name pos:line="37" pos:column="20">err<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">-&gt;<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="25">error_id<pos:position pos:line="37" pos:column="33"/></name></name></expr></argument>,
                   <argument><expr><call><name pos:line="38" pos:column="20">apr_xml_quote_string<pos:position pos:line="38" pos:column="40"/></name><argument_list pos:line="38" pos:column="40">(<argument><expr><name><name pos:line="38" pos:column="41">r<pos:position pos:line="38" pos:column="42"/></name><operator pos:line="38" pos:column="42">-&gt;<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="44">pool<pos:position pos:line="38" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="50">err<pos:position pos:line="38" pos:column="53"/></name><operator pos:line="38" pos:column="53">-&gt;<pos:position pos:line="38" pos:column="58"/></operator><name pos:line="38" pos:column="55">desc<pos:position pos:line="38" pos:column="59"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="61">0<pos:position pos:line="38" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="38" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="41" pos:column="5">ap_rputs<pos:position pos:line="41" pos:column="13"/></name><argument_list pos:line="41" pos:column="13">(<argument><expr><literal type="string" pos:line="41" pos:column="14">"&lt;/D:error&gt;"<pos:position pos:line="41" pos:column="32"/></literal> <name pos:line="41" pos:column="27">DEBUG_CR<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="37">r<pos:position pos:line="41" pos:column="38"/></name></expr></argument>)<pos:position pos:line="41" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="43" pos:column="5">/* the response has been sent. */</comment>
    <comment type="block" pos:line="44" pos:column="5">/*
     * ### Use of DONE obviates logging..!
     */</comment>
    <return pos:line="47" pos:column="5">return <expr><name pos:line="47" pos:column="12">DONE<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></return>
}</unit>
