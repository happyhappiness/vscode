<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2951_httpd-2.4.25.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">define_filter<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">cmd_parms<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">cmd<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="50">void<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">dummy<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="63">const<pos:position pos:line="1" pos:column="68"/></specifier> <name pos:line="1" pos:column="69">char<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">args<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">ef_server_t<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">conf<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><call><name pos:line="3" pos:column="25">ap_get_module_config<pos:position pos:line="3" pos:column="45"/></name><argument_list pos:line="3" pos:column="45">(<argument><expr><name><name pos:line="3" pos:column="46">cmd<pos:position pos:line="3" pos:column="49"/></name><operator pos:line="3" pos:column="49">-&gt;<pos:position pos:line="3" pos:column="54"/></operator><name pos:line="3" pos:column="51">server<pos:position pos:line="3" pos:column="57"/></name><operator pos:line="3" pos:column="57">-&gt;<pos:position pos:line="3" pos:column="62"/></operator><name pos:line="3" pos:column="59">module_config<pos:position pos:line="3" pos:column="72"/></name></name></expr></argument>,
                                             <argument><expr><operator pos:line="4" pos:column="46">&amp;<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="47">ext_filter_module<pos:position pos:line="4" pos:column="64"/></name></expr></argument>)<pos:position pos:line="4" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="66"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">token<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">name<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">normalized_name<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">ef_filter_t<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">filter<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">name<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">ap_getword_white<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name><name pos:line="10" pos:column="29">cmd<pos:position pos:line="10" pos:column="32"/></name><operator pos:line="10" pos:column="32">-&gt;<pos:position pos:line="10" pos:column="37"/></operator><name pos:line="10" pos:column="34">pool<pos:position pos:line="10" pos:column="38"/></name></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="40">&amp;<pos:position pos:line="10" pos:column="45"/></operator><name pos:line="10" pos:column="41">args<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">name<pos:position pos:line="11" pos:column="14"/></name></expr>)<pos:position pos:line="11" pos:column="15"/></condition><then pos:line="11" pos:column="15"> <block pos:line="11" pos:column="16">{
        <return pos:line="12" pos:column="9">return <expr><literal type="string" pos:line="12" pos:column="16">"Filter name not found"<pos:position pos:line="12" pos:column="39"/></literal></expr>;<pos:position pos:line="12" pos:column="40"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="15" pos:column="5">/* During request processing, we find information about the filter
     * by looking up the filter name provided by core server in our
     * hash table.  But the core server has normalized the filter
     * name by converting it to lower case.  Thus, when adding the
     * filter to our hash table we have to use lower case as well.
     */</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">normalized_name<pos:position pos:line="21" pos:column="20"/></name> <operator pos:line="21" pos:column="21">=<pos:position pos:line="21" pos:column="22"/></operator> <call><name pos:line="21" pos:column="23">apr_pstrdup<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><name><name pos:line="21" pos:column="35">cmd<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">-&gt;<pos:position pos:line="21" pos:column="43"/></operator><name pos:line="21" pos:column="40">pool<pos:position pos:line="21" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="46">name<pos:position pos:line="21" pos:column="50"/></name></expr></argument>)<pos:position pos:line="21" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">ap_str_tolower<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">normalized_name<pos:position pos:line="22" pos:column="35"/></name></expr></argument>)<pos:position pos:line="22" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>

    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><call><name pos:line="24" pos:column="9">apr_hash_get<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name><name pos:line="24" pos:column="22">conf<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">-&gt;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="28">h<pos:position pos:line="24" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="31">normalized_name<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">APR_HASH_KEY_STRING<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="69"/></condition><then pos:line="24" pos:column="69"> <block pos:line="24" pos:column="70">{
        <return pos:line="25" pos:column="9">return <expr><call><name pos:line="25" pos:column="16">apr_psprintf<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><name><name pos:line="25" pos:column="29">cmd<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">-&gt;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="34">pool<pos:position pos:line="25" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="40">"ExtFilter %s is already defined"<pos:position pos:line="25" pos:column="73"/></literal></expr></argument>,
                            <argument><expr><name pos:line="26" pos:column="29">name<pos:position pos:line="26" pos:column="33"/></name></expr></argument>)<pos:position pos:line="26" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="35"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="29" pos:column="5">filter<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <operator pos:line="29" pos:column="14">(<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">ef_filter_t<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">*<pos:position pos:line="29" pos:column="28"/></operator><operator pos:line="29" pos:column="28">)<pos:position pos:line="29" pos:column="29"/></operator><call><name pos:line="29" pos:column="29">apr_pcalloc<pos:position pos:line="29" pos:column="40"/></name><argument_list pos:line="29" pos:column="40">(<argument><expr><name><name pos:line="29" pos:column="41">conf<pos:position pos:line="29" pos:column="45"/></name><operator pos:line="29" pos:column="45">-&gt;<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="47">p<pos:position pos:line="29" pos:column="48"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="50">sizeof<argument_list pos:line="29" pos:column="56">(<argument><expr><name pos:line="29" pos:column="57">ef_filter_t<pos:position pos:line="29" pos:column="68"/></name></expr></argument>)<pos:position pos:line="29" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="71"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">filter<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">name<pos:position pos:line="30" pos:column="17"/></name></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <name pos:line="30" pos:column="20">name<pos:position pos:line="30" pos:column="24"/></name></expr>;<pos:position pos:line="30" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">filter<pos:position pos:line="31" pos:column="11"/></name><operator pos:line="31" pos:column="11">-&gt;<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="13">mode<pos:position pos:line="31" pos:column="17"/></name></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">OUTPUT_FILTER<pos:position pos:line="31" pos:column="33"/></name></expr>;<pos:position pos:line="31" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">filter<pos:position pos:line="32" pos:column="11"/></name><operator pos:line="32" pos:column="11">-&gt;<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="13">ftype<pos:position pos:line="32" pos:column="18"/></name></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <name pos:line="32" pos:column="21">AP_FTYPE_RESOURCE<pos:position pos:line="32" pos:column="38"/></name></expr>;<pos:position pos:line="32" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">apr_hash_set<pos:position pos:line="33" pos:column="17"/></name><argument_list pos:line="33" pos:column="17">(<argument><expr><name><name pos:line="33" pos:column="18">conf<pos:position pos:line="33" pos:column="22"/></name><operator pos:line="33" pos:column="22">-&gt;<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="24">h<pos:position pos:line="33" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="27">normalized_name<pos:position pos:line="33" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="44">APR_HASH_KEY_STRING<pos:position pos:line="33" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="65">filter<pos:position pos:line="33" pos:column="71"/></name></expr></argument>)<pos:position pos:line="33" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="73"/></expr_stmt>

    <while pos:line="35" pos:column="5">while <condition pos:line="35" pos:column="11">(<expr><operator pos:line="35" pos:column="12">*<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="13">args<pos:position pos:line="35" pos:column="17"/></name></expr>)<pos:position pos:line="35" pos:column="18"/></condition> <block pos:line="35" pos:column="19">{
        <while pos:line="36" pos:column="9">while <condition pos:line="36" pos:column="15">(<expr><call><name pos:line="36" pos:column="16">apr_isspace<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><operator pos:line="36" pos:column="28">*<pos:position pos:line="36" pos:column="29"/></operator><name pos:line="36" pos:column="29">args<pos:position pos:line="36" pos:column="33"/></name></expr></argument>)<pos:position pos:line="36" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="35"/></condition> <block pos:line="36" pos:column="36">{
            <expr_stmt><expr><operator pos:line="37" pos:column="13">++<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">args<pos:position pos:line="37" pos:column="19"/></name></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></while>

        <comment type="block" pos:line="40" pos:column="9">/* Nasty parsing...  I wish I could simply use ap_getword_white()
         * here and then look at the token, but ap_getword_white() doesn't
         * do the right thing when we have cmd="word word word"
         */</comment>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><call><name pos:line="44" pos:column="14">strncasecmp<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">(<argument><expr><name pos:line="44" pos:column="26">args<pos:position pos:line="44" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="32">"preservescontentlength"<pos:position pos:line="44" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="58">22<pos:position pos:line="44" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="62"/></condition><then pos:line="44" pos:column="62"> <block pos:line="44" pos:column="63">{
            <expr_stmt><expr><name pos:line="45" pos:column="13">token<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <call><name pos:line="45" pos:column="21">ap_getword_white<pos:position pos:line="45" pos:column="37"/></name><argument_list pos:line="45" pos:column="37">(<argument><expr><name><name pos:line="45" pos:column="38">cmd<pos:position pos:line="45" pos:column="41"/></name><operator pos:line="45" pos:column="41">-&gt;<pos:position pos:line="45" pos:column="46"/></operator><name pos:line="45" pos:column="43">pool<pos:position pos:line="45" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="49">&amp;<pos:position pos:line="45" pos:column="54"/></operator><name pos:line="45" pos:column="50">args<pos:position pos:line="45" pos:column="54"/></name></expr></argument>)<pos:position pos:line="45" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="56"/></expr_stmt>
            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><operator pos:line="46" pos:column="17">!<pos:position pos:line="46" pos:column="18"/></operator><call><name pos:line="46" pos:column="18">strcasecmp<pos:position pos:line="46" pos:column="28"/></name><argument_list pos:line="46" pos:column="28">(<argument><expr><name pos:line="46" pos:column="29">token<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="36">"preservescontentlength"<pos:position pos:line="46" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="62"/></condition><then pos:line="46" pos:column="62"> <block pos:line="46" pos:column="63">{
                <expr_stmt><expr><name><name pos:line="47" pos:column="17">filter<pos:position pos:line="47" pos:column="23"/></name><operator pos:line="47" pos:column="23">-&gt;<pos:position pos:line="47" pos:column="28"/></operator><name pos:line="47" pos:column="25">preserves_content_length<pos:position pos:line="47" pos:column="49"/></name></name> <operator pos:line="47" pos:column="50">=<pos:position pos:line="47" pos:column="51"/></operator> <literal type="number" pos:line="47" pos:column="52">1<pos:position pos:line="47" pos:column="53"/></literal></expr>;<pos:position pos:line="47" pos:column="54"/></expr_stmt>
            }<pos:position pos:line="48" pos:column="14"/></block></then>
            <else pos:line="49" pos:column="13">else <block pos:line="49" pos:column="18">{
                <return pos:line="50" pos:column="17">return <expr><call><name pos:line="50" pos:column="24">apr_psprintf<pos:position pos:line="50" pos:column="36"/></name><argument_list pos:line="50" pos:column="36">(<argument><expr><name><name pos:line="50" pos:column="37">cmd<pos:position pos:line="50" pos:column="40"/></name><operator pos:line="50" pos:column="40">-&gt;<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="42">pool<pos:position pos:line="50" pos:column="46"/></name></name></expr></argument>,
                                    <argument><expr><literal type="string" pos:line="51" pos:column="37">"mangled argument `%s'"<pos:position pos:line="51" pos:column="60"/></literal></expr></argument>,
                                    <argument><expr><name pos:line="52" pos:column="37">token<pos:position pos:line="52" pos:column="42"/></name></expr></argument>)<pos:position pos:line="52" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="44"/></return>
            }<pos:position pos:line="53" pos:column="14"/></block></else></if>
            <continue pos:line="54" pos:column="13">continue;<pos:position pos:line="54" pos:column="22"/></continue>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>

        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">!<pos:position pos:line="57" pos:column="14"/></operator><call><name pos:line="57" pos:column="14">strncasecmp<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">(<argument><expr><name pos:line="57" pos:column="26">args<pos:position pos:line="57" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="32">"mode="<pos:position pos:line="57" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="41">5<pos:position pos:line="57" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="44"/></condition><then pos:line="57" pos:column="44"> <block pos:line="57" pos:column="45">{
            <expr_stmt><expr><name pos:line="58" pos:column="13">args<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">+=<pos:position pos:line="58" pos:column="20"/></operator> <literal type="number" pos:line="58" pos:column="21">5<pos:position pos:line="58" pos:column="22"/></literal></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name pos:line="59" pos:column="13">token<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <call><name pos:line="59" pos:column="21">ap_getword_white<pos:position pos:line="59" pos:column="37"/></name><argument_list pos:line="59" pos:column="37">(<argument><expr><name><name pos:line="59" pos:column="38">cmd<pos:position pos:line="59" pos:column="41"/></name><operator pos:line="59" pos:column="41">-&gt;<pos:position pos:line="59" pos:column="46"/></operator><name pos:line="59" pos:column="43">pool<pos:position pos:line="59" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="49">&amp;<pos:position pos:line="59" pos:column="54"/></operator><name pos:line="59" pos:column="50">args<pos:position pos:line="59" pos:column="54"/></name></expr></argument>)<pos:position pos:line="59" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="56"/></expr_stmt>
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><operator pos:line="60" pos:column="17">!<pos:position pos:line="60" pos:column="18"/></operator><call><name pos:line="60" pos:column="18">strcasecmp<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">token<pos:position pos:line="60" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="36">"output"<pos:position pos:line="60" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="46"/></condition><then pos:line="60" pos:column="46"> <block pos:line="60" pos:column="47">{
                <expr_stmt><expr><name><name pos:line="61" pos:column="17">filter<pos:position pos:line="61" pos:column="23"/></name><operator pos:line="61" pos:column="23">-&gt;<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="25">mode<pos:position pos:line="61" pos:column="29"/></name></name> <operator pos:line="61" pos:column="30">=<pos:position pos:line="61" pos:column="31"/></operator> <name pos:line="61" pos:column="32">OUTPUT_FILTER<pos:position pos:line="61" pos:column="45"/></name></expr>;<pos:position pos:line="61" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="62" pos:column="14"/></block></then>
            <elseif pos:line="63" pos:column="13">else <if pos:line="63" pos:column="18">if <condition pos:line="63" pos:column="21">(<expr><operator pos:line="63" pos:column="22">!<pos:position pos:line="63" pos:column="23"/></operator><call><name pos:line="63" pos:column="23">strcasecmp<pos:position pos:line="63" pos:column="33"/></name><argument_list pos:line="63" pos:column="33">(<argument><expr><name pos:line="63" pos:column="34">token<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="41">"input"<pos:position pos:line="63" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="50"/></condition><then pos:line="63" pos:column="50"> <block pos:line="63" pos:column="51">{
                <expr_stmt><expr><name><name pos:line="64" pos:column="17">filter<pos:position pos:line="64" pos:column="23"/></name><operator pos:line="64" pos:column="23">-&gt;<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="25">mode<pos:position pos:line="64" pos:column="29"/></name></name> <operator pos:line="64" pos:column="30">=<pos:position pos:line="64" pos:column="31"/></operator> <name pos:line="64" pos:column="32">INPUT_FILTER<pos:position pos:line="64" pos:column="44"/></name></expr>;<pos:position pos:line="64" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="65" pos:column="14"/></block></then></if></elseif>
            <else pos:line="66" pos:column="13">else <block pos:line="66" pos:column="18">{
                <return pos:line="67" pos:column="17">return <expr><call><name pos:line="67" pos:column="24">apr_psprintf<pos:position pos:line="67" pos:column="36"/></name><argument_list pos:line="67" pos:column="36">(<argument><expr><name><name pos:line="67" pos:column="37">cmd<pos:position pos:line="67" pos:column="40"/></name><operator pos:line="67" pos:column="40">-&gt;<pos:position pos:line="67" pos:column="45"/></operator><name pos:line="67" pos:column="42">pool<pos:position pos:line="67" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="48">"Invalid mode: `%s'"<pos:position pos:line="67" pos:column="68"/></literal></expr></argument>,
                                    <argument><expr><name pos:line="68" pos:column="37">token<pos:position pos:line="68" pos:column="42"/></name></expr></argument>)<pos:position pos:line="68" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="44"/></return>
            }<pos:position pos:line="69" pos:column="14"/></block></else></if>
            <continue pos:line="70" pos:column="13">continue;<pos:position pos:line="70" pos:column="22"/></continue>
        }<pos:position pos:line="71" pos:column="10"/></block></then></if>

        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><operator pos:line="73" pos:column="13">!<pos:position pos:line="73" pos:column="14"/></operator><call><name pos:line="73" pos:column="14">strncasecmp<pos:position pos:line="73" pos:column="25"/></name><argument_list pos:line="73" pos:column="25">(<argument><expr><name pos:line="73" pos:column="26">args<pos:position pos:line="73" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="32">"ftype="<pos:position pos:line="73" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="42">6<pos:position pos:line="73" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="45"/></condition><then pos:line="73" pos:column="45"> <block pos:line="73" pos:column="46">{
            <expr_stmt><expr><name pos:line="74" pos:column="13">args<pos:position pos:line="74" pos:column="17"/></name> <operator pos:line="74" pos:column="18">+=<pos:position pos:line="74" pos:column="20"/></operator> <literal type="number" pos:line="74" pos:column="21">6<pos:position pos:line="74" pos:column="22"/></literal></expr>;<pos:position pos:line="74" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name pos:line="75" pos:column="13">token<pos:position pos:line="75" pos:column="18"/></name> <operator pos:line="75" pos:column="19">=<pos:position pos:line="75" pos:column="20"/></operator> <call><name pos:line="75" pos:column="21">ap_getword_white<pos:position pos:line="75" pos:column="37"/></name><argument_list pos:line="75" pos:column="37">(<argument><expr><name><name pos:line="75" pos:column="38">cmd<pos:position pos:line="75" pos:column="41"/></name><operator pos:line="75" pos:column="41">-&gt;<pos:position pos:line="75" pos:column="46"/></operator><name pos:line="75" pos:column="43">pool<pos:position pos:line="75" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="49">&amp;<pos:position pos:line="75" pos:column="54"/></operator><name pos:line="75" pos:column="50">args<pos:position pos:line="75" pos:column="54"/></name></expr></argument>)<pos:position pos:line="75" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="76" pos:column="13">filter<pos:position pos:line="76" pos:column="19"/></name><operator pos:line="76" pos:column="19">-&gt;<pos:position pos:line="76" pos:column="24"/></operator><name pos:line="76" pos:column="21">ftype<pos:position pos:line="76" pos:column="26"/></name></name> <operator pos:line="76" pos:column="27">=<pos:position pos:line="76" pos:column="28"/></operator> <call><name pos:line="76" pos:column="29">atoi<pos:position pos:line="76" pos:column="33"/></name><argument_list pos:line="76" pos:column="33">(<argument><expr><name pos:line="76" pos:column="34">token<pos:position pos:line="76" pos:column="39"/></name></expr></argument>)<pos:position pos:line="76" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="41"/></expr_stmt>
            <continue pos:line="77" pos:column="13">continue;<pos:position pos:line="77" pos:column="22"/></continue>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if>

        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><operator pos:line="80" pos:column="13">!<pos:position pos:line="80" pos:column="14"/></operator><call><name pos:line="80" pos:column="14">strncasecmp<pos:position pos:line="80" pos:column="25"/></name><argument_list pos:line="80" pos:column="25">(<argument><expr><name pos:line="80" pos:column="26">args<pos:position pos:line="80" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="32">"enableenv="<pos:position pos:line="80" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="80" pos:column="46">10<pos:position pos:line="80" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="50"/></condition><then pos:line="80" pos:column="50"> <block pos:line="80" pos:column="51">{
            <expr_stmt><expr><name pos:line="81" pos:column="13">args<pos:position pos:line="81" pos:column="17"/></name> <operator pos:line="81" pos:column="18">+=<pos:position pos:line="81" pos:column="20"/></operator> <literal type="number" pos:line="81" pos:column="21">10<pos:position pos:line="81" pos:column="23"/></literal></expr>;<pos:position pos:line="81" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><name pos:line="82" pos:column="13">token<pos:position pos:line="82" pos:column="18"/></name> <operator pos:line="82" pos:column="19">=<pos:position pos:line="82" pos:column="20"/></operator> <call><name pos:line="82" pos:column="21">ap_getword_white<pos:position pos:line="82" pos:column="37"/></name><argument_list pos:line="82" pos:column="37">(<argument><expr><name><name pos:line="82" pos:column="38">cmd<pos:position pos:line="82" pos:column="41"/></name><operator pos:line="82" pos:column="41">-&gt;<pos:position pos:line="82" pos:column="46"/></operator><name pos:line="82" pos:column="43">pool<pos:position pos:line="82" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="49">&amp;<pos:position pos:line="82" pos:column="54"/></operator><name pos:line="82" pos:column="50">args<pos:position pos:line="82" pos:column="54"/></name></expr></argument>)<pos:position pos:line="82" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="83" pos:column="13">filter<pos:position pos:line="83" pos:column="19"/></name><operator pos:line="83" pos:column="19">-&gt;<pos:position pos:line="83" pos:column="24"/></operator><name pos:line="83" pos:column="21">enable_env<pos:position pos:line="83" pos:column="31"/></name></name> <operator pos:line="83" pos:column="32">=<pos:position pos:line="83" pos:column="33"/></operator> <name pos:line="83" pos:column="34">token<pos:position pos:line="83" pos:column="39"/></name></expr>;<pos:position pos:line="83" pos:column="40"/></expr_stmt>
            <continue pos:line="84" pos:column="13">continue;<pos:position pos:line="84" pos:column="22"/></continue>
        }<pos:position pos:line="85" pos:column="10"/></block></then></if>

        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><operator pos:line="87" pos:column="13">!<pos:position pos:line="87" pos:column="14"/></operator><call><name pos:line="87" pos:column="14">strncasecmp<pos:position pos:line="87" pos:column="25"/></name><argument_list pos:line="87" pos:column="25">(<argument><expr><name pos:line="87" pos:column="26">args<pos:position pos:line="87" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="32">"disableenv="<pos:position pos:line="87" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="47">11<pos:position pos:line="87" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="51"/></condition><then pos:line="87" pos:column="51"> <block pos:line="87" pos:column="52">{
            <expr_stmt><expr><name pos:line="88" pos:column="13">args<pos:position pos:line="88" pos:column="17"/></name> <operator pos:line="88" pos:column="18">+=<pos:position pos:line="88" pos:column="20"/></operator> <literal type="number" pos:line="88" pos:column="21">11<pos:position pos:line="88" pos:column="23"/></literal></expr>;<pos:position pos:line="88" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><name pos:line="89" pos:column="13">token<pos:position pos:line="89" pos:column="18"/></name> <operator pos:line="89" pos:column="19">=<pos:position pos:line="89" pos:column="20"/></operator> <call><name pos:line="89" pos:column="21">ap_getword_white<pos:position pos:line="89" pos:column="37"/></name><argument_list pos:line="89" pos:column="37">(<argument><expr><name><name pos:line="89" pos:column="38">cmd<pos:position pos:line="89" pos:column="41"/></name><operator pos:line="89" pos:column="41">-&gt;<pos:position pos:line="89" pos:column="46"/></operator><name pos:line="89" pos:column="43">pool<pos:position pos:line="89" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="49">&amp;<pos:position pos:line="89" pos:column="54"/></operator><name pos:line="89" pos:column="50">args<pos:position pos:line="89" pos:column="54"/></name></expr></argument>)<pos:position pos:line="89" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="90" pos:column="13">filter<pos:position pos:line="90" pos:column="19"/></name><operator pos:line="90" pos:column="19">-&gt;<pos:position pos:line="90" pos:column="24"/></operator><name pos:line="90" pos:column="21">disable_env<pos:position pos:line="90" pos:column="32"/></name></name> <operator pos:line="90" pos:column="33">=<pos:position pos:line="90" pos:column="34"/></operator> <name pos:line="90" pos:column="35">token<pos:position pos:line="90" pos:column="40"/></name></expr>;<pos:position pos:line="90" pos:column="41"/></expr_stmt>
            <continue pos:line="91" pos:column="13">continue;<pos:position pos:line="91" pos:column="22"/></continue>
        }<pos:position pos:line="92" pos:column="10"/></block></then></if>

        <if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><operator pos:line="94" pos:column="13">!<pos:position pos:line="94" pos:column="14"/></operator><call><name pos:line="94" pos:column="14">strncasecmp<pos:position pos:line="94" pos:column="25"/></name><argument_list pos:line="94" pos:column="25">(<argument><expr><name pos:line="94" pos:column="26">args<pos:position pos:line="94" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="32">"intype="<pos:position pos:line="94" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="43">7<pos:position pos:line="94" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="94" pos:column="46"/></condition><then pos:line="94" pos:column="46"> <block pos:line="94" pos:column="47">{
            <expr_stmt><expr><name pos:line="95" pos:column="13">args<pos:position pos:line="95" pos:column="17"/></name> <operator pos:line="95" pos:column="18">+=<pos:position pos:line="95" pos:column="20"/></operator> <literal type="number" pos:line="95" pos:column="21">7<pos:position pos:line="95" pos:column="22"/></literal></expr>;<pos:position pos:line="95" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="96" pos:column="13">filter<pos:position pos:line="96" pos:column="19"/></name><operator pos:line="96" pos:column="19">-&gt;<pos:position pos:line="96" pos:column="24"/></operator><name pos:line="96" pos:column="21">intype<pos:position pos:line="96" pos:column="27"/></name></name> <operator pos:line="96" pos:column="28">=<pos:position pos:line="96" pos:column="29"/></operator> <call><name pos:line="96" pos:column="30">ap_getword_white<pos:position pos:line="96" pos:column="46"/></name><argument_list pos:line="96" pos:column="46">(<argument><expr><name><name pos:line="96" pos:column="47">cmd<pos:position pos:line="96" pos:column="50"/></name><operator pos:line="96" pos:column="50">-&gt;<pos:position pos:line="96" pos:column="55"/></operator><name pos:line="96" pos:column="52">pool<pos:position pos:line="96" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="58">&amp;<pos:position pos:line="96" pos:column="63"/></operator><name pos:line="96" pos:column="59">args<pos:position pos:line="96" pos:column="63"/></name></expr></argument>)<pos:position pos:line="96" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="65"/></expr_stmt>
            <continue pos:line="97" pos:column="13">continue;<pos:position pos:line="97" pos:column="22"/></continue>
        }<pos:position pos:line="98" pos:column="10"/></block></then></if>

        <if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><operator pos:line="100" pos:column="13">!<pos:position pos:line="100" pos:column="14"/></operator><call><name pos:line="100" pos:column="14">strncasecmp<pos:position pos:line="100" pos:column="25"/></name><argument_list pos:line="100" pos:column="25">(<argument><expr><name pos:line="100" pos:column="26">args<pos:position pos:line="100" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="32">"outtype="<pos:position pos:line="100" pos:column="42"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="100" pos:column="44">8<pos:position pos:line="100" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="47"/></condition><then pos:line="100" pos:column="47"> <block pos:line="100" pos:column="48">{
            <expr_stmt><expr><name pos:line="101" pos:column="13">args<pos:position pos:line="101" pos:column="17"/></name> <operator pos:line="101" pos:column="18">+=<pos:position pos:line="101" pos:column="20"/></operator> <literal type="number" pos:line="101" pos:column="21">8<pos:position pos:line="101" pos:column="22"/></literal></expr>;<pos:position pos:line="101" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="102" pos:column="13">filter<pos:position pos:line="102" pos:column="19"/></name><operator pos:line="102" pos:column="19">-&gt;<pos:position pos:line="102" pos:column="24"/></operator><name pos:line="102" pos:column="21">outtype<pos:position pos:line="102" pos:column="28"/></name></name> <operator pos:line="102" pos:column="29">=<pos:position pos:line="102" pos:column="30"/></operator> <call><name pos:line="102" pos:column="31">ap_getword_white<pos:position pos:line="102" pos:column="47"/></name><argument_list pos:line="102" pos:column="47">(<argument><expr><name><name pos:line="102" pos:column="48">cmd<pos:position pos:line="102" pos:column="51"/></name><operator pos:line="102" pos:column="51">-&gt;<pos:position pos:line="102" pos:column="56"/></operator><name pos:line="102" pos:column="53">pool<pos:position pos:line="102" pos:column="57"/></name></name></expr></argument>, <argument><expr><operator pos:line="102" pos:column="59">&amp;<pos:position pos:line="102" pos:column="64"/></operator><name pos:line="102" pos:column="60">args<pos:position pos:line="102" pos:column="64"/></name></expr></argument>)<pos:position pos:line="102" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="66"/></expr_stmt>
            <continue pos:line="103" pos:column="13">continue;<pos:position pos:line="103" pos:column="22"/></continue>
        }<pos:position pos:line="104" pos:column="10"/></block></then></if>

        <if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><operator pos:line="106" pos:column="13">!<pos:position pos:line="106" pos:column="14"/></operator><call><name pos:line="106" pos:column="14">strncasecmp<pos:position pos:line="106" pos:column="25"/></name><argument_list pos:line="106" pos:column="25">(<argument><expr><name pos:line="106" pos:column="26">args<pos:position pos:line="106" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="32">"cmd="<pos:position pos:line="106" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="40">4<pos:position pos:line="106" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="43"/></condition><then pos:line="106" pos:column="43"> <block pos:line="106" pos:column="44">{
            <expr_stmt><expr><name pos:line="107" pos:column="13">args<pos:position pos:line="107" pos:column="17"/></name> <operator pos:line="107" pos:column="18">+=<pos:position pos:line="107" pos:column="20"/></operator> <literal type="number" pos:line="107" pos:column="21">4<pos:position pos:line="107" pos:column="22"/></literal></expr>;<pos:position pos:line="107" pos:column="23"/></expr_stmt>
            <if pos:line="108" pos:column="13">if <condition pos:line="108" pos:column="16">(<expr><operator pos:line="108" pos:column="17">(<pos:position pos:line="108" pos:column="18"/></operator><name pos:line="108" pos:column="18">token<pos:position pos:line="108" pos:column="23"/></name> <operator pos:line="108" pos:column="24">=<pos:position pos:line="108" pos:column="25"/></operator> <call><name pos:line="108" pos:column="26">parse_cmd<pos:position pos:line="108" pos:column="35"/></name><argument_list pos:line="108" pos:column="35">(<argument><expr><name><name pos:line="108" pos:column="36">cmd<pos:position pos:line="108" pos:column="39"/></name><operator pos:line="108" pos:column="39">-&gt;<pos:position pos:line="108" pos:column="44"/></operator><name pos:line="108" pos:column="41">pool<pos:position pos:line="108" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="108" pos:column="47">&amp;<pos:position pos:line="108" pos:column="52"/></operator><name pos:line="108" pos:column="48">args<pos:position pos:line="108" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="54">filter<pos:position pos:line="108" pos:column="60"/></name></expr></argument>)<pos:position pos:line="108" pos:column="61"/></argument_list></call><operator pos:line="108" pos:column="61">)<pos:position pos:line="108" pos:column="62"/></operator></expr>)<pos:position pos:line="108" pos:column="63"/></condition><then pos:line="108" pos:column="63"> <block pos:line="108" pos:column="64">{
                <return pos:line="109" pos:column="17">return <expr><name pos:line="109" pos:column="24">token<pos:position pos:line="109" pos:column="29"/></name></expr>;<pos:position pos:line="109" pos:column="30"/></return>
            }<pos:position pos:line="110" pos:column="14"/></block></then></if>
            <continue pos:line="111" pos:column="13">continue;<pos:position pos:line="111" pos:column="22"/></continue>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if>

        <return pos:line="114" pos:column="9">return <expr><call><name pos:line="114" pos:column="16">apr_psprintf<pos:position pos:line="114" pos:column="28"/></name><argument_list pos:line="114" pos:column="28">(<argument><expr><name><name pos:line="114" pos:column="29">cmd<pos:position pos:line="114" pos:column="32"/></name><operator pos:line="114" pos:column="32">-&gt;<pos:position pos:line="114" pos:column="37"/></operator><name pos:line="114" pos:column="34">pool<pos:position pos:line="114" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="40">"Unexpected parameter: `%s'"<pos:position pos:line="114" pos:column="68"/></literal></expr></argument>,
                            <argument><expr><name pos:line="115" pos:column="29">args<pos:position pos:line="115" pos:column="33"/></name></expr></argument>)<pos:position pos:line="115" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="35"/></return>
    }<pos:position pos:line="116" pos:column="6"/></block></while>

    <comment type="block" pos:line="118" pos:column="5">/* parsing is done...  register the filter
     */</comment>
    <if pos:line="120" pos:column="5">if <condition pos:line="120" pos:column="8">(<expr><name><name pos:line="120" pos:column="9">filter<pos:position pos:line="120" pos:column="15"/></name><operator pos:line="120" pos:column="15">-&gt;<pos:position pos:line="120" pos:column="20"/></operator><name pos:line="120" pos:column="17">mode<pos:position pos:line="120" pos:column="21"/></name></name> <operator pos:line="120" pos:column="22">==<pos:position pos:line="120" pos:column="24"/></operator> <name pos:line="120" pos:column="25">OUTPUT_FILTER<pos:position pos:line="120" pos:column="38"/></name></expr>)<pos:position pos:line="120" pos:column="39"/></condition><then pos:line="120" pos:column="39"> <block pos:line="120" pos:column="40">{
        <comment type="block" pos:line="121" pos:column="9">/* XXX need a way to ensure uniqueness among all filters */</comment>
        <expr_stmt><expr><call><name pos:line="122" pos:column="9">ap_register_output_filter<pos:position pos:line="122" pos:column="34"/></name><argument_list pos:line="122" pos:column="34">(<argument><expr><name><name pos:line="122" pos:column="35">filter<pos:position pos:line="122" pos:column="41"/></name><operator pos:line="122" pos:column="41">-&gt;<pos:position pos:line="122" pos:column="46"/></operator><name pos:line="122" pos:column="43">name<pos:position pos:line="122" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="49">ef_output_filter<pos:position pos:line="122" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="67">NULL<pos:position pos:line="122" pos:column="71"/></name></expr></argument>, <argument><expr><name><name pos:line="122" pos:column="73">filter<pos:position pos:line="122" pos:column="79"/></name><operator pos:line="122" pos:column="79">-&gt;<pos:position pos:line="122" pos:column="84"/></operator><name pos:line="122" pos:column="81">ftype<pos:position pos:line="122" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="122" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="88"/></expr_stmt>
    }<pos:position pos:line="123" pos:column="6"/></block></then>
    <elseif pos:line="124" pos:column="5">else <if pos:line="124" pos:column="10">if <condition pos:line="124" pos:column="13">(<expr><name><name pos:line="124" pos:column="14">filter<pos:position pos:line="124" pos:column="20"/></name><operator pos:line="124" pos:column="20">-&gt;<pos:position pos:line="124" pos:column="25"/></operator><name pos:line="124" pos:column="22">mode<pos:position pos:line="124" pos:column="26"/></name></name> <operator pos:line="124" pos:column="27">==<pos:position pos:line="124" pos:column="29"/></operator> <name pos:line="124" pos:column="30">INPUT_FILTER<pos:position pos:line="124" pos:column="42"/></name></expr>)<pos:position pos:line="124" pos:column="43"/></condition><then pos:line="124" pos:column="43"> <block pos:line="124" pos:column="44">{
        <comment type="block" pos:line="125" pos:column="9">/* XXX need a way to ensure uniqueness among all filters */</comment>
        <expr_stmt><expr><call><name pos:line="126" pos:column="9">ap_register_input_filter<pos:position pos:line="126" pos:column="33"/></name><argument_list pos:line="126" pos:column="33">(<argument><expr><name><name pos:line="126" pos:column="34">filter<pos:position pos:line="126" pos:column="40"/></name><operator pos:line="126" pos:column="40">-&gt;<pos:position pos:line="126" pos:column="45"/></operator><name pos:line="126" pos:column="42">name<pos:position pos:line="126" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="48">ef_input_filter<pos:position pos:line="126" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="65">NULL<pos:position pos:line="126" pos:column="69"/></name></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="71">filter<pos:position pos:line="126" pos:column="77"/></name><operator pos:line="126" pos:column="77">-&gt;<pos:position pos:line="126" pos:column="82"/></operator><name pos:line="126" pos:column="79">ftype<pos:position pos:line="126" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="126" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="86"/></expr_stmt>
    }<pos:position pos:line="127" pos:column="6"/></block></then></if></elseif>
    <else pos:line="128" pos:column="5">else <block pos:line="128" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="129" pos:column="9">ap_assert<pos:position pos:line="129" pos:column="18"/></name><argument_list pos:line="129" pos:column="18">(<argument><expr><literal type="number" pos:line="129" pos:column="19">1<pos:position pos:line="129" pos:column="20"/></literal> <operator pos:line="129" pos:column="21">!=<pos:position pos:line="129" pos:column="23"/></operator> <literal type="number" pos:line="129" pos:column="24">1<pos:position pos:line="129" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="27"/></expr_stmt> <comment type="block" pos:line="129" pos:column="28">/* we set the field wrong somehow */</comment>
    }<pos:position pos:line="130" pos:column="6"/></block></else></if>

    <return pos:line="132" pos:column="5">return <expr><name pos:line="132" pos:column="12">NULL<pos:position pos:line="132" pos:column="16"/></name></expr>;<pos:position pos:line="132" pos:column="17"/></return>
}<pos:position pos:line="133" pos:column="2"/></block></function></unit>
