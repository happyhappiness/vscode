<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1125_httpd-2.2.8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">do_expand<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">char<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">input<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">rewrite_ctx<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">ctx<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">rewriterule_entry<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">entry<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">result_list<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">result<pos:position pos:line="3" pos:column="24"/></name></decl>, <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="27">current<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">result_list<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">sresult<pos:position pos:line="4" pos:column="24"/></name><index pos:line="4" pos:column="24">[<expr><name pos:line="4" pos:column="25">SMALL_EXPANSION<pos:position pos:line="4" pos:column="40"/></name></expr>]<pos:position pos:line="4" pos:column="41"/></index></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name></type> <name pos:line="5" pos:column="14">spc<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">span<pos:position pos:line="6" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="22">inputlen<pos:position pos:line="6" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="32">outlen<pos:position pos:line="6" pos:column="38"/></name></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">p<pos:position pos:line="7" pos:column="12"/></name></decl>, <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="15">c<pos:position pos:line="7" pos:column="16"/></name></decl>;<pos:position pos:line="7" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_pool_t<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">pool<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><name><name pos:line="8" pos:column="24">ctx<pos:position pos:line="8" pos:column="27"/></name><operator pos:line="8" pos:column="27">-&gt;<pos:position pos:line="8" pos:column="32"/></operator><name pos:line="8" pos:column="29">r<pos:position pos:line="8" pos:column="30"/></name><operator pos:line="8" pos:column="30">-&gt;<pos:position pos:line="8" pos:column="35"/></operator><name pos:line="8" pos:column="32">pool<pos:position pos:line="8" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">span<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <call><name pos:line="10" pos:column="12">strcspn<pos:position pos:line="10" pos:column="19"/></name><argument_list pos:line="10" pos:column="19">(<argument><expr><name pos:line="10" pos:column="20">input<pos:position pos:line="10" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="27">"\\$%"<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">inputlen<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <call><name pos:line="11" pos:column="16">strlen<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">input<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* fast exit */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">inputlen<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">==<pos:position pos:line="14" pos:column="20"/></operator> <name pos:line="14" pos:column="21">span<pos:position pos:line="14" pos:column="25"/></name></expr>)<pos:position pos:line="14" pos:column="26"/></condition><then pos:line="14" pos:column="26"> <block pos:line="14" pos:column="27">{
        <return pos:line="15" pos:column="9">return <expr><call><name pos:line="15" pos:column="16">apr_pstrdup<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name pos:line="15" pos:column="28">pool<pos:position pos:line="15" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="34">input<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="18" pos:column="5">/* well, actually something to do */</comment>
    <expr_stmt><expr><name pos:line="19" pos:column="5">result<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <name pos:line="19" pos:column="14">current<pos:position pos:line="19" pos:column="21"/></name> <operator pos:line="19" pos:column="22">=<pos:position pos:line="19" pos:column="23"/></operator> <operator pos:line="19" pos:column="24">&amp;<pos:position pos:line="19" pos:column="29"/></operator><operator pos:line="19" pos:column="25">(<pos:position pos:line="19" pos:column="26"/></operator><name><name pos:line="19" pos:column="26">sresult<pos:position pos:line="19" pos:column="33"/></name><index pos:line="19" pos:column="33">[<expr><name pos:line="19" pos:column="34">spc<pos:position pos:line="19" pos:column="37"/></name><operator pos:line="19" pos:column="37">++<pos:position pos:line="19" pos:column="39"/></operator></expr>]<pos:position pos:line="19" pos:column="40"/></index></name><operator pos:line="19" pos:column="40">)<pos:position pos:line="19" pos:column="41"/></operator></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name pos:line="21" pos:column="5">p<pos:position pos:line="21" pos:column="6"/></name> <operator pos:line="21" pos:column="7">=<pos:position pos:line="21" pos:column="8"/></operator> <name pos:line="21" pos:column="9">input<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">+<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="17">span<pos:position pos:line="21" pos:column="21"/></name></expr>;<pos:position pos:line="21" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">current<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">next<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <name pos:line="22" pos:column="21">NULL<pos:position pos:line="22" pos:column="25"/></name></expr>;<pos:position pos:line="22" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">current<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">string<pos:position pos:line="23" pos:column="20"/></name></name> <operator pos:line="23" pos:column="21">=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">input<pos:position pos:line="23" pos:column="28"/></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">current<pos:position pos:line="24" pos:column="12"/></name><operator pos:line="24" pos:column="12">-&gt;<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="14">len<pos:position pos:line="24" pos:column="17"/></name></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <name pos:line="24" pos:column="20">span<pos:position pos:line="24" pos:column="24"/></name></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">outlen<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name pos:line="25" pos:column="14">span<pos:position pos:line="25" pos:column="18"/></name></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="27" pos:column="5">/* loop for specials */</comment>
    <do pos:line="28" pos:column="5">do <block pos:line="28" pos:column="8">{
        <comment type="block" pos:line="29" pos:column="9">/* prepare next entry */</comment>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">current<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">-&gt;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="22">len<pos:position pos:line="30" pos:column="25"/></name></name></expr>)<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26"> <block pos:line="30" pos:column="27">{
            <expr_stmt><expr><name><name pos:line="31" pos:column="13">current<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">-&gt;<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="22">next<pos:position pos:line="31" pos:column="26"/></name></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <ternary><condition><expr><operator pos:line="31" pos:column="29">(<pos:position pos:line="31" pos:column="30"/></operator><name pos:line="31" pos:column="30">spc<pos:position pos:line="31" pos:column="33"/></name> <operator pos:line="31" pos:column="34">&lt;<pos:position pos:line="31" pos:column="38"/></operator> <name pos:line="31" pos:column="36">SMALL_EXPANSION<pos:position pos:line="31" pos:column="51"/></name><operator pos:line="31" pos:column="51">)<pos:position pos:line="31" pos:column="52"/></operator></expr>
                            ?<pos:position pos:line="32" pos:column="30"/></condition><then pos:line="32" pos:column="30"> <expr><operator pos:line="32" pos:column="31">&amp;<pos:position pos:line="32" pos:column="36"/></operator><operator pos:line="32" pos:column="32">(<pos:position pos:line="32" pos:column="33"/></operator><name><name pos:line="32" pos:column="33">sresult<pos:position pos:line="32" pos:column="40"/></name><index pos:line="32" pos:column="40">[<expr><name pos:line="32" pos:column="41">spc<pos:position pos:line="32" pos:column="44"/></name><operator pos:line="32" pos:column="44">++<pos:position pos:line="32" pos:column="46"/></operator></expr>]<pos:position pos:line="32" pos:column="47"/></index></name><operator pos:line="32" pos:column="47">)<pos:position pos:line="32" pos:column="48"/></operator></expr>
                            <pos:position pos:line="33" pos:column="29"/></then><else pos:line="33" pos:column="29">: <expr><operator pos:line="33" pos:column="31">(<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="32">result_list<pos:position pos:line="33" pos:column="43"/></name> <operator pos:line="33" pos:column="44">*<pos:position pos:line="33" pos:column="45"/></operator><operator pos:line="33" pos:column="45">)<pos:position pos:line="33" pos:column="46"/></operator><call><name pos:line="33" pos:column="46">apr_palloc<pos:position pos:line="33" pos:column="56"/></name><argument_list pos:line="33" pos:column="56">(<argument><expr><name pos:line="33" pos:column="57">pool<pos:position pos:line="33" pos:column="61"/></name></expr></argument>,
                                                        <argument><expr><sizeof pos:line="34" pos:column="57">sizeof<argument_list pos:line="34" pos:column="63">(<argument><expr><name pos:line="34" pos:column="64">result_list<pos:position pos:line="34" pos:column="75"/></name></expr></argument>)<pos:position pos:line="34" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="34" pos:column="78"/></expr_stmt>
            <expr_stmt><expr><name pos:line="35" pos:column="13">current<pos:position pos:line="35" pos:column="20"/></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <name><name pos:line="35" pos:column="23">current<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">-&gt;<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="32">next<pos:position pos:line="35" pos:column="36"/></name></name></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="36" pos:column="13">current<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">-&gt;<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="22">next<pos:position pos:line="36" pos:column="26"/></name></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <name pos:line="36" pos:column="29">NULL<pos:position pos:line="36" pos:column="33"/></name></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">current<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">len<pos:position pos:line="37" pos:column="25"/></name></name> <operator pos:line="37" pos:column="26">=<pos:position pos:line="37" pos:column="27"/></operator> <literal type="number" pos:line="37" pos:column="28">0<pos:position pos:line="37" pos:column="29"/></literal></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="40" pos:column="9">/* escaped character */</comment>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><operator pos:line="41" pos:column="13">*<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">p<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">==<pos:position pos:line="41" pos:column="18"/></operator> <literal type="char" pos:line="41" pos:column="19">'\\'<pos:position pos:line="41" pos:column="23"/></literal></expr>)<pos:position pos:line="41" pos:column="24"/></condition><then pos:line="41" pos:column="24"> <block pos:line="41" pos:column="25">{
            <expr_stmt><expr><name><name pos:line="42" pos:column="13">current<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">-&gt;<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="22">len<pos:position pos:line="42" pos:column="25"/></name></name> <operator pos:line="42" pos:column="26">=<pos:position pos:line="42" pos:column="27"/></operator> <literal type="number" pos:line="42" pos:column="28">1<pos:position pos:line="42" pos:column="29"/></literal></expr>;<pos:position pos:line="42" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="43" pos:column="13">++<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">outlen<pos:position pos:line="43" pos:column="21"/></name></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>
            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><operator pos:line="44" pos:column="17">!<pos:position pos:line="44" pos:column="18"/></operator><name><name pos:line="44" pos:column="18">p<pos:position pos:line="44" pos:column="19"/></name><index pos:line="44" pos:column="19">[<expr><literal type="number" pos:line="44" pos:column="20">1<pos:position pos:line="44" pos:column="21"/></literal></expr>]<pos:position pos:line="44" pos:column="22"/></index></name></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23"> <block pos:line="44" pos:column="24">{
                <expr_stmt><expr><name><name pos:line="45" pos:column="17">current<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">string<pos:position pos:line="45" pos:column="32"/></name></name> <operator pos:line="45" pos:column="33">=<pos:position pos:line="45" pos:column="34"/></operator> <name pos:line="45" pos:column="35">p<pos:position pos:line="45" pos:column="36"/></name></expr>;<pos:position pos:line="45" pos:column="37"/></expr_stmt>
                <break pos:line="46" pos:column="17">break;<pos:position pos:line="46" pos:column="23"/></break>
            }<pos:position pos:line="47" pos:column="14"/></block></then>
            <else pos:line="48" pos:column="13">else <block pos:line="48" pos:column="18">{
                <expr_stmt><expr><name><name pos:line="49" pos:column="17">current<pos:position pos:line="49" pos:column="24"/></name><operator pos:line="49" pos:column="24">-&gt;<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="26">string<pos:position pos:line="49" pos:column="32"/></name></name> <operator pos:line="49" pos:column="33">=<pos:position pos:line="49" pos:column="34"/></operator> <operator pos:line="49" pos:column="35">++<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="37">p<pos:position pos:line="49" pos:column="38"/></name></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="50" pos:column="17">++<pos:position pos:line="50" pos:column="19"/></operator><name pos:line="50" pos:column="19">p<pos:position pos:line="50" pos:column="20"/></name></expr>;<pos:position pos:line="50" pos:column="21"/></expr_stmt>
            }<pos:position pos:line="51" pos:column="14"/></block></else></if>
        }<pos:position pos:line="52" pos:column="10"/></block></then>

        <comment type="block" pos:line="54" pos:column="9">/* variable or map lookup */</comment>
        <elseif pos:line="55" pos:column="9">else <if pos:line="55" pos:column="14">if <condition pos:line="55" pos:column="17">(<expr><name><name pos:line="55" pos:column="18">p<pos:position pos:line="55" pos:column="19"/></name><index pos:line="55" pos:column="19">[<expr><literal type="number" pos:line="55" pos:column="20">1<pos:position pos:line="55" pos:column="21"/></literal></expr>]<pos:position pos:line="55" pos:column="22"/></index></name> <operator pos:line="55" pos:column="23">==<pos:position pos:line="55" pos:column="25"/></operator> <literal type="char" pos:line="55" pos:column="26">'{'<pos:position pos:line="55" pos:column="29"/></literal></expr>)<pos:position pos:line="55" pos:column="30"/></condition><then pos:line="55" pos:column="30"> <block pos:line="55" pos:column="31">{
            <decl_stmt><decl><type><name pos:line="56" pos:column="13">char<pos:position pos:line="56" pos:column="17"/></name> <modifier pos:line="56" pos:column="18">*<pos:position pos:line="56" pos:column="19"/></modifier></type><name pos:line="56" pos:column="19">endp<pos:position pos:line="56" pos:column="23"/></name></decl>;<pos:position pos:line="56" pos:column="24"/></decl_stmt>

            <expr_stmt><expr><name pos:line="58" pos:column="13">endp<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">=<pos:position pos:line="58" pos:column="19"/></operator> <call><name pos:line="58" pos:column="20">find_closing_curly<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">(<argument><expr><name pos:line="58" pos:column="39">p<pos:position pos:line="58" pos:column="40"/></name><operator pos:line="58" pos:column="40">+<pos:position pos:line="58" pos:column="41"/></operator><literal type="number" pos:line="58" pos:column="41">2<pos:position pos:line="58" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="44"/></expr_stmt>
            <if pos:line="59" pos:column="13">if <condition pos:line="59" pos:column="16">(<expr><operator pos:line="59" pos:column="17">!<pos:position pos:line="59" pos:column="18"/></operator><name pos:line="59" pos:column="18">endp<pos:position pos:line="59" pos:column="22"/></name></expr>)<pos:position pos:line="59" pos:column="23"/></condition><then pos:line="59" pos:column="23"> <block pos:line="59" pos:column="24">{
                <expr_stmt><expr><name><name pos:line="60" pos:column="17">current<pos:position pos:line="60" pos:column="24"/></name><operator pos:line="60" pos:column="24">-&gt;<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="26">len<pos:position pos:line="60" pos:column="29"/></name></name> <operator pos:line="60" pos:column="30">=<pos:position pos:line="60" pos:column="31"/></operator> <literal type="number" pos:line="60" pos:column="32">2<pos:position pos:line="60" pos:column="33"/></literal></expr>;<pos:position pos:line="60" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="61" pos:column="17">current<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">-&gt;<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="26">string<pos:position pos:line="61" pos:column="32"/></name></name> <operator pos:line="61" pos:column="33">=<pos:position pos:line="61" pos:column="34"/></operator> <name pos:line="61" pos:column="35">p<pos:position pos:line="61" pos:column="36"/></name></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name pos:line="62" pos:column="17">outlen<pos:position pos:line="62" pos:column="23"/></name> <operator pos:line="62" pos:column="24">+=<pos:position pos:line="62" pos:column="26"/></operator> <literal type="number" pos:line="62" pos:column="27">2<pos:position pos:line="62" pos:column="28"/></literal></expr>;<pos:position pos:line="62" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><name pos:line="63" pos:column="17">p<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">+=<pos:position pos:line="63" pos:column="21"/></operator> <literal type="number" pos:line="63" pos:column="22">2<pos:position pos:line="63" pos:column="23"/></literal></expr>;<pos:position pos:line="63" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="64" pos:column="14"/></block></then>

            <comment type="block" pos:line="66" pos:column="13">/* variable lookup */</comment>
            <elseif pos:line="67" pos:column="13">else <if pos:line="67" pos:column="18">if <condition pos:line="67" pos:column="21">(<expr><operator pos:line="67" pos:column="22">*<pos:position pos:line="67" pos:column="23"/></operator><name pos:line="67" pos:column="23">p<pos:position pos:line="67" pos:column="24"/></name> <operator pos:line="67" pos:column="25">==<pos:position pos:line="67" pos:column="27"/></operator> <literal type="char" pos:line="67" pos:column="28">'%'<pos:position pos:line="67" pos:column="31"/></literal></expr>)<pos:position pos:line="67" pos:column="32"/></condition><then pos:line="67" pos:column="32"> <block pos:line="67" pos:column="33">{
                <expr_stmt><expr><name pos:line="68" pos:column="17">p<pos:position pos:line="68" pos:column="18"/></name> <operator pos:line="68" pos:column="19">=<pos:position pos:line="68" pos:column="20"/></operator> <call><name pos:line="68" pos:column="21">lookup_variable<pos:position pos:line="68" pos:column="36"/></name><argument_list pos:line="68" pos:column="36">(<argument><expr><call><name pos:line="68" pos:column="37">apr_pstrmemdup<pos:position pos:line="68" pos:column="51"/></name><argument_list pos:line="68" pos:column="51">(<argument><expr><name pos:line="68" pos:column="52">pool<pos:position pos:line="68" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="58">p<pos:position pos:line="68" pos:column="59"/></name><operator pos:line="68" pos:column="59">+<pos:position pos:line="68" pos:column="60"/></operator><literal type="number" pos:line="68" pos:column="60">2<pos:position pos:line="68" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="63">endp<pos:position pos:line="68" pos:column="67"/></name><operator pos:line="68" pos:column="67">-<pos:position pos:line="68" pos:column="68"/></operator><name pos:line="68" pos:column="68">p<pos:position pos:line="68" pos:column="69"/></name><operator pos:line="68" pos:column="69">-<pos:position pos:line="68" pos:column="70"/></operator><literal type="number" pos:line="68" pos:column="70">2<pos:position pos:line="68" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="68" pos:column="74">ctx<pos:position pos:line="68" pos:column="77"/></name></expr></argument>)<pos:position pos:line="68" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="79"/></expr_stmt>

                <expr_stmt><expr><name pos:line="70" pos:column="17">span<pos:position pos:line="70" pos:column="21"/></name> <operator pos:line="70" pos:column="22">=<pos:position pos:line="70" pos:column="23"/></operator> <call><name pos:line="70" pos:column="24">strlen<pos:position pos:line="70" pos:column="30"/></name><argument_list pos:line="70" pos:column="30">(<argument><expr><name pos:line="70" pos:column="31">p<pos:position pos:line="70" pos:column="32"/></name></expr></argument>)<pos:position pos:line="70" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="71" pos:column="17">current<pos:position pos:line="71" pos:column="24"/></name><operator pos:line="71" pos:column="24">-&gt;<pos:position pos:line="71" pos:column="29"/></operator><name pos:line="71" pos:column="26">len<pos:position pos:line="71" pos:column="29"/></name></name> <operator pos:line="71" pos:column="30">=<pos:position pos:line="71" pos:column="31"/></operator> <name pos:line="71" pos:column="32">span<pos:position pos:line="71" pos:column="36"/></name></expr>;<pos:position pos:line="71" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="72" pos:column="17">current<pos:position pos:line="72" pos:column="24"/></name><operator pos:line="72" pos:column="24">-&gt;<pos:position pos:line="72" pos:column="29"/></operator><name pos:line="72" pos:column="26">string<pos:position pos:line="72" pos:column="32"/></name></name> <operator pos:line="72" pos:column="33">=<pos:position pos:line="72" pos:column="34"/></operator> <name pos:line="72" pos:column="35">p<pos:position pos:line="72" pos:column="36"/></name></expr>;<pos:position pos:line="72" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name pos:line="73" pos:column="17">outlen<pos:position pos:line="73" pos:column="23"/></name> <operator pos:line="73" pos:column="24">+=<pos:position pos:line="73" pos:column="26"/></operator> <name pos:line="73" pos:column="27">span<pos:position pos:line="73" pos:column="31"/></name></expr>;<pos:position pos:line="73" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><name pos:line="74" pos:column="17">p<pos:position pos:line="74" pos:column="18"/></name> <operator pos:line="74" pos:column="19">=<pos:position pos:line="74" pos:column="20"/></operator> <name pos:line="74" pos:column="21">endp<pos:position pos:line="74" pos:column="25"/></name> <operator pos:line="74" pos:column="26">+<pos:position pos:line="74" pos:column="27"/></operator> <literal type="number" pos:line="74" pos:column="28">1<pos:position pos:line="74" pos:column="29"/></literal></expr>;<pos:position pos:line="74" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="75" pos:column="14"/></block></then></if></elseif>

            <comment type="block" pos:line="77" pos:column="13">/* map lookup */</comment>
            <else pos:line="78" pos:column="13">else <block pos:line="78" pos:column="18">{     <comment type="block" pos:line="78" pos:column="24">/* *p == '$' */</comment>
                <decl_stmt><decl><type><name pos:line="79" pos:column="17">char<pos:position pos:line="79" pos:column="21"/></name> <modifier pos:line="79" pos:column="22">*<pos:position pos:line="79" pos:column="23"/></modifier></type><name pos:line="79" pos:column="23">key<pos:position pos:line="79" pos:column="26"/></name></decl>;<pos:position pos:line="79" pos:column="27"/></decl_stmt>

                <comment type="block" pos:line="81" pos:column="17">/*
                 * To make rewrite maps useful, the lookup key and
                 * default values must be expanded, so we make
                 * recursive calls to do the work. For security
                 * reasons we must never expand a string that includes
                 * verbatim data from the network. The recursion here
                 * isn't a problem because the result of expansion is
                 * only passed to lookup_map() so it cannot be
                 * re-expanded, only re-looked-up. Another way of
                 * looking at it is that the recursion is entirely
                 * driven by the syntax of the nested curly brackets.
                 */</comment>

                <expr_stmt><expr><name pos:line="94" pos:column="17">key<pos:position pos:line="94" pos:column="20"/></name> <operator pos:line="94" pos:column="21">=<pos:position pos:line="94" pos:column="22"/></operator> <call><name pos:line="94" pos:column="23">find_char_in_curlies<pos:position pos:line="94" pos:column="43"/></name><argument_list pos:line="94" pos:column="43">(<argument><expr><name pos:line="94" pos:column="44">p<pos:position pos:line="94" pos:column="45"/></name><operator pos:line="94" pos:column="45">+<pos:position pos:line="94" pos:column="46"/></operator><literal type="number" pos:line="94" pos:column="46">2<pos:position pos:line="94" pos:column="47"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="94" pos:column="49">':'<pos:position pos:line="94" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="54"/></expr_stmt>
                <if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><operator pos:line="95" pos:column="21">!<pos:position pos:line="95" pos:column="22"/></operator><name pos:line="95" pos:column="22">key<pos:position pos:line="95" pos:column="25"/></name></expr>)<pos:position pos:line="95" pos:column="26"/></condition><then pos:line="95" pos:column="26"> <block pos:line="95" pos:column="27">{
                    <expr_stmt><expr><name><name pos:line="96" pos:column="21">current<pos:position pos:line="96" pos:column="28"/></name><operator pos:line="96" pos:column="28">-&gt;<pos:position pos:line="96" pos:column="33"/></operator><name pos:line="96" pos:column="30">len<pos:position pos:line="96" pos:column="33"/></name></name> <operator pos:line="96" pos:column="34">=<pos:position pos:line="96" pos:column="35"/></operator> <literal type="number" pos:line="96" pos:column="36">2<pos:position pos:line="96" pos:column="37"/></literal></expr>;<pos:position pos:line="96" pos:column="38"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="97" pos:column="21">current<pos:position pos:line="97" pos:column="28"/></name><operator pos:line="97" pos:column="28">-&gt;<pos:position pos:line="97" pos:column="33"/></operator><name pos:line="97" pos:column="30">string<pos:position pos:line="97" pos:column="36"/></name></name> <operator pos:line="97" pos:column="37">=<pos:position pos:line="97" pos:column="38"/></operator> <name pos:line="97" pos:column="39">p<pos:position pos:line="97" pos:column="40"/></name></expr>;<pos:position pos:line="97" pos:column="41"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="98" pos:column="21">outlen<pos:position pos:line="98" pos:column="27"/></name> <operator pos:line="98" pos:column="28">+=<pos:position pos:line="98" pos:column="30"/></operator> <literal type="number" pos:line="98" pos:column="31">2<pos:position pos:line="98" pos:column="32"/></literal></expr>;<pos:position pos:line="98" pos:column="33"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="99" pos:column="21">p<pos:position pos:line="99" pos:column="22"/></name> <operator pos:line="99" pos:column="23">+=<pos:position pos:line="99" pos:column="25"/></operator> <literal type="number" pos:line="99" pos:column="26">2<pos:position pos:line="99" pos:column="27"/></literal></expr>;<pos:position pos:line="99" pos:column="28"/></expr_stmt>
                }<pos:position pos:line="100" pos:column="18"/></block></then>
                <else pos:line="101" pos:column="17">else <block pos:line="101" pos:column="22">{
                    <decl_stmt><decl><type><name pos:line="102" pos:column="21">char<pos:position pos:line="102" pos:column="25"/></name> <modifier pos:line="102" pos:column="26">*<pos:position pos:line="102" pos:column="27"/></modifier></type><name pos:line="102" pos:column="27">map<pos:position pos:line="102" pos:column="30"/></name></decl>, <modifier pos:line="102" pos:column="32">*<pos:position pos:line="102" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="102" pos:column="33">dflt<pos:position pos:line="102" pos:column="37"/></name></decl>;<pos:position pos:line="102" pos:column="38"/></decl_stmt>

                    <expr_stmt><expr><name pos:line="104" pos:column="21">map<pos:position pos:line="104" pos:column="24"/></name> <operator pos:line="104" pos:column="25">=<pos:position pos:line="104" pos:column="26"/></operator> <call><name pos:line="104" pos:column="27">apr_pstrmemdup<pos:position pos:line="104" pos:column="41"/></name><argument_list pos:line="104" pos:column="41">(<argument><expr><name pos:line="104" pos:column="42">pool<pos:position pos:line="104" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="48">p<pos:position pos:line="104" pos:column="49"/></name><operator pos:line="104" pos:column="49">+<pos:position pos:line="104" pos:column="50"/></operator><literal type="number" pos:line="104" pos:column="50">2<pos:position pos:line="104" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="53">endp<pos:position pos:line="104" pos:column="57"/></name><operator pos:line="104" pos:column="57">-<pos:position pos:line="104" pos:column="58"/></operator><name pos:line="104" pos:column="58">p<pos:position pos:line="104" pos:column="59"/></name><operator pos:line="104" pos:column="59">-<pos:position pos:line="104" pos:column="60"/></operator><literal type="number" pos:line="104" pos:column="60">2<pos:position pos:line="104" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="63"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="105" pos:column="21">key<pos:position pos:line="105" pos:column="24"/></name> <operator pos:line="105" pos:column="25">=<pos:position pos:line="105" pos:column="26"/></operator> <name pos:line="105" pos:column="27">map<pos:position pos:line="105" pos:column="30"/></name> <operator pos:line="105" pos:column="31">+<pos:position pos:line="105" pos:column="32"/></operator> <operator pos:line="105" pos:column="33">(<pos:position pos:line="105" pos:column="34"/></operator><name pos:line="105" pos:column="34">key<pos:position pos:line="105" pos:column="37"/></name><operator pos:line="105" pos:column="37">-<pos:position pos:line="105" pos:column="38"/></operator><name pos:line="105" pos:column="38">p<pos:position pos:line="105" pos:column="39"/></name><operator pos:line="105" pos:column="39">-<pos:position pos:line="105" pos:column="40"/></operator><literal type="number" pos:line="105" pos:column="40">2<pos:position pos:line="105" pos:column="41"/></literal><operator pos:line="105" pos:column="41">)<pos:position pos:line="105" pos:column="42"/></operator></expr>;<pos:position pos:line="105" pos:column="43"/></expr_stmt>
                    <expr_stmt><expr><operator pos:line="106" pos:column="21">*<pos:position pos:line="106" pos:column="22"/></operator><name pos:line="106" pos:column="22">key<pos:position pos:line="106" pos:column="25"/></name><operator pos:line="106" pos:column="25">++<pos:position pos:line="106" pos:column="27"/></operator> <operator pos:line="106" pos:column="28">=<pos:position pos:line="106" pos:column="29"/></operator> <literal type="char" pos:line="106" pos:column="30">'\0'<pos:position pos:line="106" pos:column="34"/></literal></expr>;<pos:position pos:line="106" pos:column="35"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="107" pos:column="21">dflt<pos:position pos:line="107" pos:column="25"/></name> <operator pos:line="107" pos:column="26">=<pos:position pos:line="107" pos:column="27"/></operator> <call><name pos:line="107" pos:column="28">find_char_in_curlies<pos:position pos:line="107" pos:column="48"/></name><argument_list pos:line="107" pos:column="48">(<argument><expr><name pos:line="107" pos:column="49">key<pos:position pos:line="107" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="107" pos:column="54">'|'<pos:position pos:line="107" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="59"/></expr_stmt>
                    <if pos:line="108" pos:column="21">if <condition pos:line="108" pos:column="24">(<expr><name pos:line="108" pos:column="25">dflt<pos:position pos:line="108" pos:column="29"/></name></expr>)<pos:position pos:line="108" pos:column="30"/></condition><then pos:line="108" pos:column="30"> <block pos:line="108" pos:column="31">{
                        <expr_stmt><expr><operator pos:line="109" pos:column="25">*<pos:position pos:line="109" pos:column="26"/></operator><name pos:line="109" pos:column="26">dflt<pos:position pos:line="109" pos:column="30"/></name><operator pos:line="109" pos:column="30">++<pos:position pos:line="109" pos:column="32"/></operator> <operator pos:line="109" pos:column="33">=<pos:position pos:line="109" pos:column="34"/></operator> <literal type="char" pos:line="109" pos:column="35">'\0'<pos:position pos:line="109" pos:column="39"/></literal></expr>;<pos:position pos:line="109" pos:column="40"/></expr_stmt>
                    }<pos:position pos:line="110" pos:column="22"/></block></then></if>

                    <comment type="block" pos:line="112" pos:column="21">/* reuse of key variable as result */</comment>
                    <expr_stmt><expr><name pos:line="113" pos:column="21">key<pos:position pos:line="113" pos:column="24"/></name> <operator pos:line="113" pos:column="25">=<pos:position pos:line="113" pos:column="26"/></operator> <call><name pos:line="113" pos:column="27">lookup_map<pos:position pos:line="113" pos:column="37"/></name><argument_list pos:line="113" pos:column="37">(<argument><expr><name><name pos:line="113" pos:column="38">ctx<pos:position pos:line="113" pos:column="41"/></name><operator pos:line="113" pos:column="41">-&gt;<pos:position pos:line="113" pos:column="46"/></operator><name pos:line="113" pos:column="43">r<pos:position pos:line="113" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="46">map<pos:position pos:line="113" pos:column="49"/></name></expr></argument>, <argument><expr><call><name pos:line="113" pos:column="51">do_expand<pos:position pos:line="113" pos:column="60"/></name><argument_list pos:line="113" pos:column="60">(<argument><expr><name pos:line="113" pos:column="61">key<pos:position pos:line="113" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="66">ctx<pos:position pos:line="113" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="71">entry<pos:position pos:line="113" pos:column="76"/></name></expr></argument>)<pos:position pos:line="113" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="113" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="79"/></expr_stmt>

                    <if pos:line="115" pos:column="21">if <condition pos:line="115" pos:column="24">(<expr><operator pos:line="115" pos:column="25">!<pos:position pos:line="115" pos:column="26"/></operator><name pos:line="115" pos:column="26">key<pos:position pos:line="115" pos:column="29"/></name> <operator pos:line="115" pos:column="30">&amp;&amp;<pos:position pos:line="115" pos:column="40"/></operator> <name pos:line="115" pos:column="33">dflt<pos:position pos:line="115" pos:column="37"/></name> <operator pos:line="115" pos:column="38">&amp;&amp;<pos:position pos:line="115" pos:column="48"/></operator> <operator pos:line="115" pos:column="41">*<pos:position pos:line="115" pos:column="42"/></operator><name pos:line="115" pos:column="42">dflt<pos:position pos:line="115" pos:column="46"/></name></expr>)<pos:position pos:line="115" pos:column="47"/></condition><then pos:line="115" pos:column="47"> <block pos:line="115" pos:column="48">{
                        <expr_stmt><expr><name pos:line="116" pos:column="25">key<pos:position pos:line="116" pos:column="28"/></name> <operator pos:line="116" pos:column="29">=<pos:position pos:line="116" pos:column="30"/></operator> <call><name pos:line="116" pos:column="31">do_expand<pos:position pos:line="116" pos:column="40"/></name><argument_list pos:line="116" pos:column="40">(<argument><expr><name pos:line="116" pos:column="41">dflt<pos:position pos:line="116" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="47">ctx<pos:position pos:line="116" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="52">entry<pos:position pos:line="116" pos:column="57"/></name></expr></argument>)<pos:position pos:line="116" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="59"/></expr_stmt>
                    }<pos:position pos:line="117" pos:column="22"/></block></then></if>

                    <if pos:line="119" pos:column="21">if <condition pos:line="119" pos:column="24">(<expr><name pos:line="119" pos:column="25">key<pos:position pos:line="119" pos:column="28"/></name></expr>)<pos:position pos:line="119" pos:column="29"/></condition><then pos:line="119" pos:column="29"> <block pos:line="119" pos:column="30">{
                        <expr_stmt><expr><name pos:line="120" pos:column="25">span<pos:position pos:line="120" pos:column="29"/></name> <operator pos:line="120" pos:column="30">=<pos:position pos:line="120" pos:column="31"/></operator> <call><name pos:line="120" pos:column="32">strlen<pos:position pos:line="120" pos:column="38"/></name><argument_list pos:line="120" pos:column="38">(<argument><expr><name pos:line="120" pos:column="39">key<pos:position pos:line="120" pos:column="42"/></name></expr></argument>)<pos:position pos:line="120" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="44"/></expr_stmt>
                        <expr_stmt><expr><name><name pos:line="121" pos:column="25">current<pos:position pos:line="121" pos:column="32"/></name><operator pos:line="121" pos:column="32">-&gt;<pos:position pos:line="121" pos:column="37"/></operator><name pos:line="121" pos:column="34">len<pos:position pos:line="121" pos:column="37"/></name></name> <operator pos:line="121" pos:column="38">=<pos:position pos:line="121" pos:column="39"/></operator> <name pos:line="121" pos:column="40">span<pos:position pos:line="121" pos:column="44"/></name></expr>;<pos:position pos:line="121" pos:column="45"/></expr_stmt>
                        <expr_stmt><expr><name><name pos:line="122" pos:column="25">current<pos:position pos:line="122" pos:column="32"/></name><operator pos:line="122" pos:column="32">-&gt;<pos:position pos:line="122" pos:column="37"/></operator><name pos:line="122" pos:column="34">string<pos:position pos:line="122" pos:column="40"/></name></name> <operator pos:line="122" pos:column="41">=<pos:position pos:line="122" pos:column="42"/></operator> <name pos:line="122" pos:column="43">key<pos:position pos:line="122" pos:column="46"/></name></expr>;<pos:position pos:line="122" pos:column="47"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="123" pos:column="25">outlen<pos:position pos:line="123" pos:column="31"/></name> <operator pos:line="123" pos:column="32">+=<pos:position pos:line="123" pos:column="34"/></operator> <name pos:line="123" pos:column="35">span<pos:position pos:line="123" pos:column="39"/></name></expr>;<pos:position pos:line="123" pos:column="40"/></expr_stmt>
                    }<pos:position pos:line="124" pos:column="22"/></block></then></if>

                    <expr_stmt><expr><name pos:line="126" pos:column="21">p<pos:position pos:line="126" pos:column="22"/></name> <operator pos:line="126" pos:column="23">=<pos:position pos:line="126" pos:column="24"/></operator> <name pos:line="126" pos:column="25">endp<pos:position pos:line="126" pos:column="29"/></name> <operator pos:line="126" pos:column="30">+<pos:position pos:line="126" pos:column="31"/></operator> <literal type="number" pos:line="126" pos:column="32">1<pos:position pos:line="126" pos:column="33"/></literal></expr>;<pos:position pos:line="126" pos:column="34"/></expr_stmt>
                }<pos:position pos:line="127" pos:column="18"/></block></else></if>
            }<pos:position pos:line="128" pos:column="14"/></block></else></if>
        }<pos:position pos:line="129" pos:column="10"/></block></then></if></elseif>

        <comment type="block" pos:line="131" pos:column="9">/* backreference */</comment>
        <elseif pos:line="132" pos:column="9">else <if pos:line="132" pos:column="14">if <condition pos:line="132" pos:column="17">(<expr><call><name pos:line="132" pos:column="18">apr_isdigit<pos:position pos:line="132" pos:column="29"/></name><argument_list pos:line="132" pos:column="29">(<argument><expr><name><name pos:line="132" pos:column="30">p<pos:position pos:line="132" pos:column="31"/></name><index pos:line="132" pos:column="31">[<expr><literal type="number" pos:line="132" pos:column="32">1<pos:position pos:line="132" pos:column="33"/></literal></expr>]<pos:position pos:line="132" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="132" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="132" pos:column="36"/></condition><then pos:line="132" pos:column="36"> <block pos:line="132" pos:column="37">{<pos:position pos:line="132" pos:column="38"/></block></then></if></elseif></if></block></do></block></function>
         </unit>
