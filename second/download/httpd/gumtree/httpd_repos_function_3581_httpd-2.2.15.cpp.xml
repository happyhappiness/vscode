<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3581_httpd-2.2.15.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_filetype_e<pos:position pos:line="1" pos:column="22"/></name></type> <name pos:line="1" pos:column="23">filetype_from_mode<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">mode_t<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">mode<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="54"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_filetype_e<pos:position pos:line="3" pos:column="19"/></name></type> <name pos:line="3" pos:column="20">type<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

    <switch pos:line="5" pos:column="5">switch <condition pos:line="5" pos:column="12">(<expr><name pos:line="5" pos:column="13">mode<pos:position pos:line="5" pos:column="17"/></name> <operator pos:line="5" pos:column="18">&amp;<pos:position pos:line="5" pos:column="23"/></operator> <name pos:line="5" pos:column="20">S_IFMT<pos:position pos:line="5" pos:column="26"/></name></expr>)<pos:position pos:line="5" pos:column="27"/></condition> <block pos:line="5" pos:column="28">{
    <case pos:line="6" pos:column="5">case <expr><name pos:line="6" pos:column="10">S_IFREG<pos:position pos:line="6" pos:column="17"/></name></expr>:<pos:position pos:line="6" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="7" pos:column="9">type<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <name pos:line="7" pos:column="16">APR_REG<pos:position pos:line="7" pos:column="23"/></name></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>  <break pos:line="7" pos:column="26">break;<pos:position pos:line="7" pos:column="32"/></break>
    <case pos:line="8" pos:column="5">case <expr><name pos:line="8" pos:column="10">S_IFDIR<pos:position pos:line="8" pos:column="17"/></name></expr>:<pos:position pos:line="8" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="9" pos:column="9">type<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <name pos:line="9" pos:column="16">APR_DIR<pos:position pos:line="9" pos:column="23"/></name></expr>;<pos:position pos:line="9" pos:column="24"/></expr_stmt>  <break pos:line="9" pos:column="26">break;<pos:position pos:line="9" pos:column="32"/></break>
    <case pos:line="10" pos:column="5">case <expr><name pos:line="10" pos:column="10">S_IFLNK<pos:position pos:line="10" pos:column="17"/></name></expr>:<pos:position pos:line="10" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="11" pos:column="9">type<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">APR_LNK<pos:position pos:line="11" pos:column="23"/></name></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>  <break pos:line="11" pos:column="26">break;<pos:position pos:line="11" pos:column="32"/></break>
    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">S_IFCHR<pos:position pos:line="12" pos:column="17"/></name></expr>:<pos:position pos:line="12" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="13" pos:column="9">type<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">APR_CHR<pos:position pos:line="13" pos:column="23"/></name></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>  <break pos:line="13" pos:column="26">break;<pos:position pos:line="13" pos:column="32"/></break>
    <case pos:line="14" pos:column="5">case <expr><name pos:line="14" pos:column="10">S_IFBLK<pos:position pos:line="14" pos:column="17"/></name></expr>:<pos:position pos:line="14" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="15" pos:column="9">type<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">APR_BLK<pos:position pos:line="15" pos:column="23"/></name></expr>;<pos:position pos:line="15" pos:column="24"/></expr_stmt>  <break pos:line="15" pos:column="26">break;<pos:position pos:line="15" pos:column="32"/></break>
<cpp:if pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">if<pos:position pos:line="16" pos:column="4"/></cpp:directive> <expr><call><name pos:line="16" pos:column="5">defined<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">S_IFFIFO<pos:position pos:line="16" pos:column="21"/></name></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr></cpp:if>
    <case pos:line="17" pos:column="5">case <expr><name pos:line="17" pos:column="10">S_IFFIFO<pos:position pos:line="17" pos:column="18"/></name></expr>:<pos:position pos:line="17" pos:column="19"/></case>
        <expr_stmt><expr><name pos:line="18" pos:column="9">type<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <name pos:line="18" pos:column="16">APR_PIPE<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt> <break pos:line="18" pos:column="26">break;<pos:position pos:line="18" pos:column="32"/></break>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><operator pos:line="20" pos:column="5">!<pos:position pos:line="20" pos:column="6"/></operator><call><name pos:line="20" pos:column="6">defined<pos:position pos:line="20" pos:column="13"/></name><argument_list pos:line="20" pos:column="13">(<argument><expr><name pos:line="20" pos:column="14">BEOS<pos:position pos:line="20" pos:column="18"/></name></expr></argument>)<pos:position pos:line="20" pos:column="19"/></argument_list></call> <operator pos:line="20" pos:column="20">&amp;&amp;<pos:position pos:line="20" pos:column="30"/></operator> <call><name pos:line="20" pos:column="23">defined<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name pos:line="20" pos:column="31">S_IFSOCK<pos:position pos:line="20" pos:column="39"/></name></expr></argument>)<pos:position pos:line="20" pos:column="40"/></argument_list></call></expr></cpp:if>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">S_IFSOCK<pos:position pos:line="21" pos:column="18"/></name></expr>:<pos:position pos:line="21" pos:column="19"/></case>
        <expr_stmt><expr><name pos:line="22" pos:column="9">type<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">APR_SOCK<pos:position pos:line="22" pos:column="24"/></name></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt> <break pos:line="22" pos:column="26">break;<pos:position pos:line="22" pos:column="32"/></break>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

    <default pos:line="25" pos:column="5">default:<pos:position pos:line="25" pos:column="13"/></default>
	<comment type="block" pos:line="26" pos:column="9">/* Work around missing S_IFxxx values above
         * for Linux et al.
         */</comment>
<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><operator pos:line="29" pos:column="5">!<pos:position pos:line="29" pos:column="6"/></operator><call><name pos:line="29" pos:column="6">defined<pos:position pos:line="29" pos:column="13"/></name><argument_list pos:line="29" pos:column="13">(<argument><expr><name pos:line="29" pos:column="14">S_IFFIFO<pos:position pos:line="29" pos:column="22"/></name></expr></argument>)<pos:position pos:line="29" pos:column="23"/></argument_list></call> <operator pos:line="29" pos:column="24">&amp;&amp;<pos:position pos:line="29" pos:column="34"/></operator> <call><name pos:line="29" pos:column="27">defined<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name pos:line="29" pos:column="35">S_ISFIFO<pos:position pos:line="29" pos:column="43"/></name></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr></cpp:if>
    	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">S_ISFIFO<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">mode<pos:position pos:line="30" pos:column="26"/></name></expr></argument>)<pos:position pos:line="30" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="28"/></condition><then pos:line="30" pos:column="28"> <block pos:line="30" pos:column="29">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">type<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <name pos:line="31" pos:column="20">APR_PIPE<pos:position pos:line="31" pos:column="28"/></name></expr>;<pos:position pos:line="31" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="32" pos:column="10"/></block></then> <elseif pos:line="32" pos:column="11">else
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">if<pos:position pos:line="34" pos:column="4"/></cpp:directive> <expr><operator pos:line="34" pos:column="5">!<pos:position pos:line="34" pos:column="6"/></operator><call><name pos:line="34" pos:column="6">defined<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">BEOS<pos:position pos:line="34" pos:column="18"/></name></expr></argument>)<pos:position pos:line="34" pos:column="19"/></argument_list></call> <operator pos:line="34" pos:column="20">&amp;&amp;<pos:position pos:line="34" pos:column="30"/></operator> <operator pos:line="34" pos:column="23">!<pos:position pos:line="34" pos:column="24"/></operator><call><name pos:line="34" pos:column="24">defined<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name pos:line="34" pos:column="32">S_IFSOCK<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call> <operator pos:line="34" pos:column="42">&amp;&amp;<pos:position pos:line="34" pos:column="52"/></operator> <call><name pos:line="34" pos:column="45">defined<pos:position pos:line="34" pos:column="52"/></name><argument_list pos:line="34" pos:column="52">(<argument><expr><name pos:line="34" pos:column="53">S_ISSOCK<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr></cpp:if>
    	<if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><call><name pos:line="35" pos:column="13">S_ISSOCK<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">mode<pos:position pos:line="35" pos:column="26"/></name></expr></argument>)<pos:position pos:line="35" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="28"/></condition><then pos:line="35" pos:column="28"> <block pos:line="35" pos:column="29">{
            <expr_stmt><expr><name pos:line="36" pos:column="13">type<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <name pos:line="36" pos:column="20">APR_SOCK<pos:position pos:line="36" pos:column="28"/></name></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
	}<pos:position pos:line="37" pos:column="10"/></block></then></if></elseif> <else pos:line="37" pos:column="11">else
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><expr_stmt><expr><name pos:line="39" pos:column="9">type<pos:position pos:line="39" pos:column="13"/></name> <operator pos:line="39" pos:column="14">=<pos:position pos:line="39" pos:column="15"/></operator> <name pos:line="39" pos:column="16">APR_UNKFILE<pos:position pos:line="39" pos:column="27"/></name></expr>;<pos:position pos:line="39" pos:column="28"/></expr_stmt></block></else></if>
    }<pos:position pos:line="40" pos:column="6"/></block></switch>
    <return pos:line="41" pos:column="5">return <expr><name pos:line="41" pos:column="12">type<pos:position pos:line="41" pos:column="16"/></name></expr>;<pos:position pos:line="41" pos:column="17"/></return>
}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
