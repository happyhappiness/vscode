<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5978.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">h2_conn_io_read<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">h2_conn_io<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">io<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">apr_read_type_e<pos:position pos:line="2" pos:column="45"/></name></type> <name pos:line="2" pos:column="46">block<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">h2_conn_io_on_read_cb<pos:position pos:line="3" pos:column="51"/></name></type> <name pos:line="3" pos:column="52">on_read_cb<pos:position pos:line="3" pos:column="62"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="4" pos:column="30">void<pos:position pos:line="4" pos:column="34"/></name> <modifier pos:line="4" pos:column="35">*<pos:position pos:line="4" pos:column="36"/></modifier></type><name pos:line="4" pos:column="36">puser<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="42"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">status<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">done<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><literal type="number" pos:line="7" pos:column="16">0<pos:position pos:line="7" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ap_log_cerror<pos:position pos:line="8" pos:column="18"/></name><argument_list pos:line="8" pos:column="18">(<argument><expr><name pos:line="8" pos:column="19">APLOG_MARK<pos:position pos:line="8" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="31">APLOG_TRACE2<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="45">0<pos:position pos:line="8" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="48">io<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">-&gt;<pos:position pos:line="8" pos:column="55"/></operator><name pos:line="8" pos:column="52">connection<pos:position pos:line="8" pos:column="62"/></name></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="9" pos:column="19">"h2_conn_io: try read, block=%d"<pos:position pos:line="9" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="53">block<pos:position pos:line="9" pos:column="58"/></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>
    
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">APR_BRIGADE_EMPTY<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name><name pos:line="11" pos:column="28">io<pos:position pos:line="11" pos:column="30"/></name><operator pos:line="11" pos:column="30">-&gt;<pos:position pos:line="11" pos:column="35"/></operator><name pos:line="11" pos:column="32">input<pos:position pos:line="11" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39"> <block pos:line="11" pos:column="40">{
        <comment type="block" pos:line="12" pos:column="9">/* Seems something is left from a previous read, lets
         * satisfy our caller with the data we already have. */</comment>
        <expr_stmt><expr><name pos:line="14" pos:column="9">status<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">h2_conn_io_bucket_read<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">io<pos:position pos:line="14" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="45">block<pos:position pos:line="14" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="52">on_read_cb<pos:position pos:line="14" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="64">puser<pos:position pos:line="14" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="71">&amp;<pos:position pos:line="14" pos:column="76"/></operator><name pos:line="14" pos:column="72">done<pos:position pos:line="14" pos:column="76"/></name></expr></argument>)<pos:position pos:line="14" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">apr_brigade_cleanup<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name><name pos:line="15" pos:column="29">io<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">input<pos:position pos:line="15" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="40"/></expr_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">status<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">!=<pos:position pos:line="16" pos:column="22"/></operator> <name pos:line="16" pos:column="23">APR_SUCCESS<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">||<pos:position pos:line="16" pos:column="37"/></operator> <name pos:line="16" pos:column="38">done<pos:position pos:line="16" pos:column="42"/></name></expr>)<pos:position pos:line="16" pos:column="43"/></condition><then pos:line="16" pos:column="43"> <block pos:line="16" pos:column="44">{
            <return pos:line="17" pos:column="13">return <expr><name pos:line="17" pos:column="20">status<pos:position pos:line="17" pos:column="26"/></name></expr>;<pos:position pos:line="17" pos:column="27"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="21" pos:column="5">/* We only do a blocking read when we have no streams to process. So,
     * in httpd scoreboard lingo, we are in a KEEPALIVE connection state.
     * When reading non-blocking, we do have streams to process and update
     * child with NULL request. That way, any current request information
     * in the scoreboard is preserved.
     */</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">block<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">==<pos:position pos:line="27" pos:column="17"/></operator> <name pos:line="27" pos:column="18">APR_BLOCK_READ<pos:position pos:line="27" pos:column="32"/></name></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33"> <block pos:line="27" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">ap_update_child_status_from_conn<pos:position pos:line="28" pos:column="41"/></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name><name pos:line="28" pos:column="42">io<pos:position pos:line="28" pos:column="44"/></name><operator pos:line="28" pos:column="44">-&gt;<pos:position pos:line="28" pos:column="49"/></operator><name pos:line="28" pos:column="46">connection<pos:position pos:line="28" pos:column="56"/></name><operator pos:line="28" pos:column="56">-&gt;<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="58">sbh<pos:position pos:line="28" pos:column="61"/></name></name></expr></argument>, 
                                         <argument><expr><name pos:line="29" pos:column="42">SERVER_BUSY_KEEPALIVE<pos:position pos:line="29" pos:column="63"/></name></expr></argument>, 
                                         <argument><expr><name><name pos:line="30" pos:column="42">io<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">-&gt;<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="46">connection<pos:position pos:line="30" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then>
    <else pos:line="32" pos:column="5">else <block pos:line="32" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">ap_update_child_status<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name><name pos:line="33" pos:column="32">io<pos:position pos:line="33" pos:column="34"/></name><operator pos:line="33" pos:column="34">-&gt;<pos:position pos:line="33" pos:column="39"/></operator><name pos:line="33" pos:column="36">connection<pos:position pos:line="33" pos:column="46"/></name><operator pos:line="33" pos:column="46">-&gt;<pos:position pos:line="33" pos:column="51"/></operator><name pos:line="33" pos:column="48">sbh<pos:position pos:line="33" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="53">SERVER_BUSY_READ<pos:position pos:line="33" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="71">NULL<pos:position pos:line="33" pos:column="75"/></name></expr></argument>)<pos:position pos:line="33" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="36" pos:column="5">/* TODO: replace this with a connection filter itself, so that we
     * no longer need to transfer incoming buckets to our own brigade. 
     */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">status<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <call><name pos:line="39" pos:column="14">ap_get_brigade<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name><name pos:line="39" pos:column="29">io<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">-&gt;<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="33">connection<pos:position pos:line="39" pos:column="43"/></name><operator pos:line="39" pos:column="43">-&gt;<pos:position pos:line="39" pos:column="48"/></operator><name pos:line="39" pos:column="45">input_filters<pos:position pos:line="39" pos:column="58"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="40" pos:column="29">io<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">-&gt;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="33">input<pos:position pos:line="40" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="40">AP_MODE_READBYTES<pos:position pos:line="40" pos:column="57"/></name></expr></argument>,
                            <argument><expr><name pos:line="41" pos:column="29">block<pos:position pos:line="41" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="36">64<pos:position pos:line="41" pos:column="38"/></literal> <operator pos:line="41" pos:column="39">*<pos:position pos:line="41" pos:column="40"/></operator> <literal type="number" pos:line="41" pos:column="41">4096<pos:position pos:line="41" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="47"/></expr_stmt>
    <switch pos:line="42" pos:column="5">switch <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">status<pos:position pos:line="42" pos:column="19"/></name></expr>)<pos:position pos:line="42" pos:column="20"/></condition> <block pos:line="42" pos:column="21">{
        <case pos:line="43" pos:column="9">case <expr><name pos:line="43" pos:column="14">APR_SUCCESS<pos:position pos:line="43" pos:column="25"/></name></expr>:<pos:position pos:line="43" pos:column="26"/></case>
            <return pos:line="44" pos:column="13">return <expr><call><name pos:line="44" pos:column="20">h2_conn_io_bucket_read<pos:position pos:line="44" pos:column="42"/></name><argument_list pos:line="44" pos:column="42">(<argument><expr><name pos:line="44" pos:column="43">io<pos:position pos:line="44" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="47">block<pos:position pos:line="44" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="54">on_read_cb<pos:position pos:line="44" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="66">puser<pos:position pos:line="44" pos:column="71"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="73">&amp;<pos:position pos:line="44" pos:column="78"/></operator><name pos:line="44" pos:column="74">done<pos:position pos:line="44" pos:column="78"/></name></expr></argument>)<pos:position pos:line="44" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="80"/></return>
        <case pos:line="45" pos:column="9">case <expr><name pos:line="45" pos:column="14">APR_EOF<pos:position pos:line="45" pos:column="21"/></name></expr>:<pos:position pos:line="45" pos:column="22"/></case>
        <case pos:line="46" pos:column="9">case <expr><name pos:line="46" pos:column="14">APR_EAGAIN<pos:position pos:line="46" pos:column="24"/></name></expr>:<pos:position pos:line="46" pos:column="25"/></case>
            <break pos:line="47" pos:column="13">break;<pos:position pos:line="47" pos:column="19"/></break>
        <default pos:line="48" pos:column="9">default:<pos:position pos:line="48" pos:column="17"/></default>
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">ap_log_cerror<pos:position pos:line="49" pos:column="26"/></name><argument_list pos:line="49" pos:column="26">(<argument><expr><name pos:line="49" pos:column="27">APLOG_MARK<pos:position pos:line="49" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="39">APLOG_DEBUG<pos:position pos:line="49" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="52">status<pos:position pos:line="49" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="60">io<pos:position pos:line="49" pos:column="62"/></name><operator pos:line="49" pos:column="62">-&gt;<pos:position pos:line="49" pos:column="67"/></operator><name pos:line="49" pos:column="64">connection<pos:position pos:line="49" pos:column="74"/></name></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="50" pos:column="27">"h2_conn_io: error reading"<pos:position pos:line="50" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="56"/></expr_stmt>
            <break pos:line="51" pos:column="13">break;<pos:position pos:line="51" pos:column="19"/></break>
    }<pos:position pos:line="52" pos:column="6"/></block></switch>
    <return pos:line="53" pos:column="5">return <expr><name pos:line="53" pos:column="12">status<pos:position pos:line="53" pos:column="18"/></name></expr>;<pos:position pos:line="53" pos:column="19"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
