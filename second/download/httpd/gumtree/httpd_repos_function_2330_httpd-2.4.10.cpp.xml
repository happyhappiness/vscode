<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2330_httpd-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">buffer_out_filter<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">ap_filter_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">f<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">apr_bucket_brigade<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">bb<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list> <block pos:line="1" pos:column="79">{
    <decl_stmt><decl><type><name pos:line="2" pos:column="5">apr_bucket<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">e<pos:position pos:line="2" pos:column="18"/></name></decl>;<pos:position pos:line="2" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">request_rec<pos:position pos:line="3" pos:column="16"/></name> <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">r<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><name><name pos:line="3" pos:column="22">f<pos:position pos:line="3" pos:column="23"/></name><operator pos:line="3" pos:column="23">-&gt;<pos:position pos:line="3" pos:column="28"/></operator><name pos:line="3" pos:column="25">r<pos:position pos:line="3" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">buffer_ctx<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">ctx<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name><name pos:line="4" pos:column="23">f<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">-&gt;<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="26">ctx<pos:position pos:line="4" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">APR_SUCCESS<pos:position pos:line="5" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">move<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* first time in? create a context */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">ctx<pos:position pos:line="9" pos:column="13"/></name></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14"> <block pos:line="9" pos:column="15">{

        <comment type="block" pos:line="11" pos:column="9">/* buffering won't work on subrequests, it would be nice if
         * it did. Within subrequests, we have no EOS to check for,
         * so we don't know when to flush the buffer to the network
         */</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name><name pos:line="15" pos:column="13">f<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">r<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">-&gt;<pos:position pos:line="15" pos:column="22"/></operator><name pos:line="15" pos:column="19">main<pos:position pos:line="15" pos:column="23"/></name></name></expr>)<pos:position pos:line="15" pos:column="24"/></condition><then pos:line="15" pos:column="24"> <block pos:line="15" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">ap_remove_output_filter<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name pos:line="16" pos:column="37">f<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="40"/></expr_stmt>
            <return pos:line="17" pos:column="13">return <expr><call><name pos:line="17" pos:column="20">ap_pass_brigade<pos:position pos:line="17" pos:column="35"/></name><argument_list pos:line="17" pos:column="35">(<argument><expr><name><name pos:line="17" pos:column="36">f<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">-&gt;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="39">next<pos:position pos:line="17" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="45">bb<pos:position pos:line="17" pos:column="47"/></name></expr></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="49"/></return>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="20" pos:column="9">ctx<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name><name pos:line="20" pos:column="15">f<pos:position pos:line="20" pos:column="16"/></name><operator pos:line="20" pos:column="16">-&gt;<pos:position pos:line="20" pos:column="21"/></operator><name pos:line="20" pos:column="18">ctx<pos:position pos:line="20" pos:column="21"/></name></name> <operator pos:line="20" pos:column="22">=<pos:position pos:line="20" pos:column="23"/></operator> <call><name pos:line="20" pos:column="24">apr_pcalloc<pos:position pos:line="20" pos:column="35"/></name><argument_list pos:line="20" pos:column="35">(<argument><expr><name><name pos:line="20" pos:column="36">r<pos:position pos:line="20" pos:column="37"/></name><operator pos:line="20" pos:column="37">-&gt;<pos:position pos:line="20" pos:column="42"/></operator><name pos:line="20" pos:column="39">pool<pos:position pos:line="20" pos:column="43"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="20" pos:column="45">sizeof<argument_list pos:line="20" pos:column="51">(<argument><expr><operator pos:line="20" pos:column="52">*<pos:position pos:line="20" pos:column="53"/></operator><name pos:line="20" pos:column="53">ctx<pos:position pos:line="20" pos:column="56"/></name></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">ctx<pos:position pos:line="21" pos:column="12"/></name><operator pos:line="21" pos:column="12">-&gt;<pos:position pos:line="21" pos:column="17"/></operator><name pos:line="21" pos:column="14">bb<pos:position pos:line="21" pos:column="16"/></name></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">apr_brigade_create<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name><name pos:line="21" pos:column="38">r<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">-&gt;<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="41">pool<pos:position pos:line="21" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="47">f<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">-&gt;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="50">c<pos:position pos:line="21" pos:column="51"/></name><operator pos:line="21" pos:column="51">-&gt;<pos:position pos:line="21" pos:column="56"/></operator><name pos:line="21" pos:column="53">bucket_alloc<pos:position pos:line="21" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">ctx<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">conf<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">ap_get_module_config<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><name><name pos:line="22" pos:column="42">f<pos:position pos:line="22" pos:column="43"/></name><operator pos:line="22" pos:column="43">-&gt;<pos:position pos:line="22" pos:column="48"/></operator><name pos:line="22" pos:column="45">r<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">-&gt;<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="48">per_dir_config<pos:position pos:line="22" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="64">&amp;<pos:position pos:line="22" pos:column="69"/></operator><name pos:line="22" pos:column="65">buffer_module<pos:position pos:line="22" pos:column="78"/></name></expr></argument>)<pos:position pos:line="22" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="80"/></expr_stmt>

    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="26" pos:column="5">/* Do nothing if asked to filter nothing. */</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><call><name pos:line="27" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">bb<pos:position pos:line="27" pos:column="29"/></name></expr></argument>)<pos:position pos:line="27" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="31"/></condition><then pos:line="27" pos:column="31"> <block pos:line="27" pos:column="32">{
        <return pos:line="28" pos:column="9">return <expr><call><name pos:line="28" pos:column="16">ap_pass_brigade<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name><name pos:line="28" pos:column="32">f<pos:position pos:line="28" pos:column="33"/></name><operator pos:line="28" pos:column="33">-&gt;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="35">next<pos:position pos:line="28" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">bb<pos:position pos:line="28" pos:column="43"/></name></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="45"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="31" pos:column="5">/* Empty buffer means we can potentially optimise below */</comment>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><call><name pos:line="32" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="32" pos:column="26"/></name><argument_list pos:line="32" pos:column="26">(<argument><expr><name><name pos:line="32" pos:column="27">ctx<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">-&gt;<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="32">bb<pos:position pos:line="32" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="36"/></condition><then pos:line="32" pos:column="36"> <block pos:line="32" pos:column="37">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">move<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <literal type="number" pos:line="33" pos:column="16">1<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <while pos:line="36" pos:column="5">while <condition pos:line="36" pos:column="11">(<expr><name pos:line="36" pos:column="12">APR_SUCCESS<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">==<pos:position pos:line="36" pos:column="26"/></operator> <name pos:line="36" pos:column="27">rv<pos:position pos:line="36" pos:column="29"/></name> <operator pos:line="36" pos:column="30">&amp;&amp;<pos:position pos:line="36" pos:column="40"/></operator> <operator pos:line="36" pos:column="33">!<pos:position pos:line="36" pos:column="34"/></operator><call><name pos:line="36" pos:column="34">APR_BRIGADE_EMPTY<pos:position pos:line="36" pos:column="51"/></name><argument_list pos:line="36" pos:column="51">(<argument><expr><name pos:line="36" pos:column="52">bb<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="56"/></condition> <block pos:line="36" pos:column="57">{
        <decl_stmt><decl><type><specifier pos:line="37" pos:column="9">const<pos:position pos:line="37" pos:column="14"/></specifier> <name pos:line="37" pos:column="15">char<pos:position pos:line="37" pos:column="19"/></name> <modifier pos:line="37" pos:column="20">*<pos:position pos:line="37" pos:column="21"/></modifier></type><name pos:line="37" pos:column="21">data<pos:position pos:line="37" pos:column="25"/></name></decl>;<pos:position pos:line="37" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="38" pos:column="9">apr_off_t<pos:position pos:line="38" pos:column="18"/></name></type> <name pos:line="38" pos:column="19">len<pos:position pos:line="38" pos:column="22"/></name></decl>;<pos:position pos:line="38" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="39" pos:column="9">apr_size_t<pos:position pos:line="39" pos:column="19"/></name></type> <name pos:line="39" pos:column="20">size<pos:position pos:line="39" pos:column="24"/></name></decl>;<pos:position pos:line="39" pos:column="25"/></decl_stmt>

        <expr_stmt><expr><name pos:line="41" pos:column="9">e<pos:position pos:line="41" pos:column="10"/></name> <operator pos:line="41" pos:column="11">=<pos:position pos:line="41" pos:column="12"/></operator> <call><name pos:line="41" pos:column="13">APR_BRIGADE_FIRST<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">(<argument><expr><name pos:line="41" pos:column="31">bb<pos:position pos:line="41" pos:column="33"/></name></expr></argument>)<pos:position pos:line="41" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="35"/></expr_stmt>

        <comment type="block" pos:line="43" pos:column="9">/* EOS means we are done. */</comment>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">e<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="34"/></condition><then pos:line="44" pos:column="34"> <block pos:line="44" pos:column="35">{

            <comment type="block" pos:line="46" pos:column="13">/* should we add an etag? */</comment>

            <comment type="block" pos:line="48" pos:column="13">/* pass the EOS across */</comment>
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">(<argument><expr><name pos:line="49" pos:column="31">e<pos:position pos:line="49" pos:column="32"/></name></expr></argument>)<pos:position pos:line="49" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="50" pos:column="36"/></name><argument_list pos:line="50" pos:column="36">(<argument><expr><name><name pos:line="50" pos:column="37">ctx<pos:position pos:line="50" pos:column="40"/></name><operator pos:line="50" pos:column="40">-&gt;<pos:position pos:line="50" pos:column="45"/></operator><name pos:line="50" pos:column="42">bb<pos:position pos:line="50" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="46">e<pos:position pos:line="50" pos:column="47"/></name></expr></argument>)<pos:position pos:line="50" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="49"/></expr_stmt>

            <comment type="block" pos:line="52" pos:column="13">/* pass what we have down the chain */</comment>
            <expr_stmt><expr><name pos:line="53" pos:column="13">rv<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <call><name pos:line="53" pos:column="18">ap_pass_brigade<pos:position pos:line="53" pos:column="33"/></name><argument_list pos:line="53" pos:column="33">(<argument><expr><name><name pos:line="53" pos:column="34">f<pos:position pos:line="53" pos:column="35"/></name><operator pos:line="53" pos:column="35">-&gt;<pos:position pos:line="53" pos:column="40"/></operator><name pos:line="53" pos:column="37">next<pos:position pos:line="53" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="43">ctx<pos:position pos:line="53" pos:column="46"/></name><operator pos:line="53" pos:column="46">-&gt;<pos:position pos:line="53" pos:column="51"/></operator><name pos:line="53" pos:column="48">bb<pos:position pos:line="53" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="52"/></expr_stmt>
            <continue pos:line="54" pos:column="13">continue;<pos:position pos:line="54" pos:column="22"/></continue>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="57" pos:column="9">/* A flush takes precedence over buffering */</comment>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">APR_BUCKET_IS_FLUSH<pos:position pos:line="58" pos:column="32"/></name><argument_list pos:line="58" pos:column="32">(<argument><expr><name pos:line="58" pos:column="33">e<pos:position pos:line="58" pos:column="34"/></name></expr></argument>)<pos:position pos:line="58" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="36"/></condition><then pos:line="58" pos:column="36"> <block pos:line="58" pos:column="37">{

            <comment type="block" pos:line="60" pos:column="13">/* pass the flush bucket across */</comment>
            <expr_stmt><expr><call><name pos:line="61" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="61" pos:column="30"/></name><argument_list pos:line="61" pos:column="30">(<argument><expr><name pos:line="61" pos:column="31">e<pos:position pos:line="61" pos:column="32"/></name></expr></argument>)<pos:position pos:line="61" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="62" pos:column="36"/></name><argument_list pos:line="62" pos:column="36">(<argument><expr><name><name pos:line="62" pos:column="37">ctx<pos:position pos:line="62" pos:column="40"/></name><operator pos:line="62" pos:column="40">-&gt;<pos:position pos:line="62" pos:column="45"/></operator><name pos:line="62" pos:column="42">bb<pos:position pos:line="62" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="46">e<pos:position pos:line="62" pos:column="47"/></name></expr></argument>)<pos:position pos:line="62" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="49"/></expr_stmt>

            <comment type="block" pos:line="64" pos:column="13">/* pass what we have down the chain */</comment>
            <expr_stmt><expr><name pos:line="65" pos:column="13">rv<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">=<pos:position pos:line="65" pos:column="17"/></operator> <call><name pos:line="65" pos:column="18">ap_pass_brigade<pos:position pos:line="65" pos:column="33"/></name><argument_list pos:line="65" pos:column="33">(<argument><expr><name><name pos:line="65" pos:column="34">f<pos:position pos:line="65" pos:column="35"/></name><operator pos:line="65" pos:column="35">-&gt;<pos:position pos:line="65" pos:column="40"/></operator><name pos:line="65" pos:column="37">next<pos:position pos:line="65" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="43">ctx<pos:position pos:line="65" pos:column="46"/></name><operator pos:line="65" pos:column="46">-&gt;<pos:position pos:line="65" pos:column="51"/></operator><name pos:line="65" pos:column="48">bb<pos:position pos:line="65" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="52"/></expr_stmt>
            <continue pos:line="66" pos:column="13">continue;<pos:position pos:line="66" pos:column="22"/></continue>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="69" pos:column="9">/* metadata buckets are preserved as is */</comment>
        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><call><name pos:line="70" pos:column="13">APR_BUCKET_IS_METADATA<pos:position pos:line="70" pos:column="35"/></name><argument_list pos:line="70" pos:column="35">(<argument><expr><name pos:line="70" pos:column="36">e<pos:position pos:line="70" pos:column="37"/></name></expr></argument>)<pos:position pos:line="70" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="39"/></condition><then pos:line="70" pos:column="39"> <block pos:line="70" pos:column="40">{
            <comment type="block" pos:line="71" pos:column="13">/*
             * Remove meta data bucket from old brigade and insert into the
             * new.
             */</comment>
            <expr_stmt><expr><call><name pos:line="75" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="75" pos:column="30"/></name><argument_list pos:line="75" pos:column="30">(<argument><expr><name pos:line="75" pos:column="31">e<pos:position pos:line="75" pos:column="32"/></name></expr></argument>)<pos:position pos:line="75" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="76" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="76" pos:column="36"/></name><argument_list pos:line="76" pos:column="36">(<argument><expr><name><name pos:line="76" pos:column="37">ctx<pos:position pos:line="76" pos:column="40"/></name><operator pos:line="76" pos:column="40">-&gt;<pos:position pos:line="76" pos:column="45"/></operator><name pos:line="76" pos:column="42">bb<pos:position pos:line="76" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="46">e<pos:position pos:line="76" pos:column="47"/></name></expr></argument>)<pos:position pos:line="76" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="49"/></expr_stmt>
            <continue pos:line="77" pos:column="13">continue;<pos:position pos:line="77" pos:column="22"/></continue>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="80" pos:column="9">/* is our buffer full?
         * If so, send what we have down the filter chain. If the buffer
         * gets full, we can no longer compute a content length.
         */</comment>
        <expr_stmt><expr><call><name pos:line="84" pos:column="9">apr_brigade_length<pos:position pos:line="84" pos:column="27"/></name><argument_list pos:line="84" pos:column="27">(<argument><expr><name><name pos:line="84" pos:column="28">ctx<pos:position pos:line="84" pos:column="31"/></name><operator pos:line="84" pos:column="31">-&gt;<pos:position pos:line="84" pos:column="36"/></operator><name pos:line="84" pos:column="33">bb<pos:position pos:line="84" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="84" pos:column="37">1<pos:position pos:line="84" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="84" pos:column="40">&amp;<pos:position pos:line="84" pos:column="45"/></operator><name pos:line="84" pos:column="41">len<pos:position pos:line="84" pos:column="44"/></name></expr></argument>)<pos:position pos:line="84" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="46"/></expr_stmt>
        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">len<pos:position pos:line="85" pos:column="16"/></name> <operator pos:line="85" pos:column="17">&gt;<pos:position pos:line="85" pos:column="21"/></operator> <name><name pos:line="85" pos:column="19">ctx<pos:position pos:line="85" pos:column="22"/></name><operator pos:line="85" pos:column="22">-&gt;<pos:position pos:line="85" pos:column="27"/></operator><name pos:line="85" pos:column="24">conf<pos:position pos:line="85" pos:column="28"/></name><operator pos:line="85" pos:column="28">-&gt;<pos:position pos:line="85" pos:column="33"/></operator><name pos:line="85" pos:column="30">size<pos:position pos:line="85" pos:column="34"/></name></name></expr>)<pos:position pos:line="85" pos:column="35"/></condition><then pos:line="85" pos:column="35"> <block pos:line="85" pos:column="36">{

            <comment type="block" pos:line="87" pos:column="13">/* pass what we have down the chain */</comment>
            <expr_stmt><expr><name pos:line="88" pos:column="13">rv<pos:position pos:line="88" pos:column="15"/></name> <operator pos:line="88" pos:column="16">=<pos:position pos:line="88" pos:column="17"/></operator> <call><name pos:line="88" pos:column="18">ap_pass_brigade<pos:position pos:line="88" pos:column="33"/></name><argument_list pos:line="88" pos:column="33">(<argument><expr><name><name pos:line="88" pos:column="34">f<pos:position pos:line="88" pos:column="35"/></name><operator pos:line="88" pos:column="35">-&gt;<pos:position pos:line="88" pos:column="40"/></operator><name pos:line="88" pos:column="37">next<pos:position pos:line="88" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="43">ctx<pos:position pos:line="88" pos:column="46"/></name><operator pos:line="88" pos:column="46">-&gt;<pos:position pos:line="88" pos:column="51"/></operator><name pos:line="88" pos:column="48">bb<pos:position pos:line="88" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="52"/></expr_stmt>
            <if pos:line="89" pos:column="13">if <condition pos:line="89" pos:column="16">(<expr><name pos:line="89" pos:column="17">rv<pos:position pos:line="89" pos:column="19"/></name></expr>)<pos:position pos:line="89" pos:column="20"/></condition><then pos:line="89" pos:column="20"> <block pos:line="89" pos:column="21">{
                <comment type="block" pos:line="90" pos:column="17">/* should break out of the loop, since our write to the client
                 * failed in some way. */</comment>
                <continue pos:line="92" pos:column="17">continue;<pos:position pos:line="92" pos:column="26"/></continue>
            }<pos:position pos:line="93" pos:column="14"/></block></then></if>
        }<pos:position pos:line="94" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="96" pos:column="9">/* at this point we are ready to buffer.
         * Buffering takes advantage of an optimisation in the handling of
         * bucket brigades. Heap buckets are always created at a fixed
         * size, regardless of the size of the data placed into them.
         * The apr_brigade_write() call will first try and pack the data
         * into any free space in the most recent heap bucket, before
         * allocating a new bucket if necessary.
         */</comment>
        <if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">APR_SUCCESS<pos:position pos:line="104" pos:column="24"/></name> <operator pos:line="104" pos:column="25">==<pos:position pos:line="104" pos:column="27"/></operator> <operator pos:line="104" pos:column="28">(<pos:position pos:line="104" pos:column="29"/></operator><name pos:line="104" pos:column="29">rv<pos:position pos:line="104" pos:column="31"/></name> <operator pos:line="104" pos:column="32">=<pos:position pos:line="104" pos:column="33"/></operator> <call><name pos:line="104" pos:column="34">apr_bucket_read<pos:position pos:line="104" pos:column="49"/></name><argument_list pos:line="104" pos:column="49">(<argument><expr><name pos:line="104" pos:column="50">e<pos:position pos:line="104" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="53">&amp;<pos:position pos:line="104" pos:column="58"/></operator><name pos:line="104" pos:column="54">data<pos:position pos:line="104" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="60">&amp;<pos:position pos:line="104" pos:column="65"/></operator><name pos:line="104" pos:column="61">size<pos:position pos:line="104" pos:column="65"/></name></expr></argument>,
                <argument><expr><name pos:line="105" pos:column="17">APR_BLOCK_READ<pos:position pos:line="105" pos:column="31"/></name></expr></argument>)<pos:position pos:line="105" pos:column="32"/></argument_list></call><operator pos:line="105" pos:column="32">)<pos:position pos:line="105" pos:column="33"/></operator></expr>)<pos:position pos:line="105" pos:column="34"/></condition><then pos:line="105" pos:column="34"> <block pos:line="105" pos:column="35">{

            <comment type="block" pos:line="107" pos:column="13">/* further optimisation: if the buckets are already heap
             * buckets, and the buckets stay exactly APR_BUCKET_BUFF_SIZE
             * long (as they would be if we were reading bits of a
             * large bucket), then move the buckets instead of copying
             * them.
             */</comment>
            <if pos:line="113" pos:column="13">if <condition pos:line="113" pos:column="16">(<expr><name pos:line="113" pos:column="17">move<pos:position pos:line="113" pos:column="21"/></name> <operator pos:line="113" pos:column="22">&amp;&amp;<pos:position pos:line="113" pos:column="32"/></operator> <call><name pos:line="113" pos:column="25">APR_BUCKET_IS_HEAP<pos:position pos:line="113" pos:column="43"/></name><argument_list pos:line="113" pos:column="43">(<argument><expr><name pos:line="113" pos:column="44">e<pos:position pos:line="113" pos:column="45"/></name></expr></argument>)<pos:position pos:line="113" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="47"/></condition><then pos:line="113" pos:column="47"> <block pos:line="113" pos:column="48">{
                <expr_stmt><expr><call><name pos:line="114" pos:column="17">APR_BUCKET_REMOVE<pos:position pos:line="114" pos:column="34"/></name><argument_list pos:line="114" pos:column="34">(<argument><expr><name pos:line="114" pos:column="35">e<pos:position pos:line="114" pos:column="36"/></name></expr></argument>)<pos:position pos:line="114" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="115" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="115" pos:column="40"/></name><argument_list pos:line="115" pos:column="40">(<argument><expr><name><name pos:line="115" pos:column="41">ctx<pos:position pos:line="115" pos:column="44"/></name><operator pos:line="115" pos:column="44">-&gt;<pos:position pos:line="115" pos:column="49"/></operator><name pos:line="115" pos:column="46">bb<pos:position pos:line="115" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="50">e<pos:position pos:line="115" pos:column="51"/></name></expr></argument>)<pos:position pos:line="115" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="53"/></expr_stmt>
                <if pos:line="116" pos:column="17">if <condition pos:line="116" pos:column="20">(<expr><name pos:line="116" pos:column="21">APR_BUCKET_BUFF_SIZE<pos:position pos:line="116" pos:column="41"/></name> <operator pos:line="116" pos:column="42">!=<pos:position pos:line="116" pos:column="44"/></operator> <name pos:line="116" pos:column="45">size<pos:position pos:line="116" pos:column="49"/></name></expr>)<pos:position pos:line="116" pos:column="50"/></condition><then pos:line="116" pos:column="50"> <block pos:line="116" pos:column="51">{
                    <expr_stmt><expr><name pos:line="117" pos:column="21">move<pos:position pos:line="117" pos:column="25"/></name> <operator pos:line="117" pos:column="26">=<pos:position pos:line="117" pos:column="27"/></operator> <literal type="number" pos:line="117" pos:column="28">0<pos:position pos:line="117" pos:column="29"/></literal></expr>;<pos:position pos:line="117" pos:column="30"/></expr_stmt>
                }<pos:position pos:line="118" pos:column="18"/></block></then></if>
            }<pos:position pos:line="119" pos:column="14"/></block></then> <else pos:line="119" pos:column="15">else <block pos:line="119" pos:column="20">{
                <macro><name pos:line="120" pos:column="17">apr_brigade_write<pos:position pos:line="120" pos:column="34"/></name><argument_list pos:line="120" pos:column="34">(<argument pos:line="120" pos:column="35">ctx-&gt;bb<pos:position pos:line="120" pos:column="42"/></argument>, <argument pos:line="120" pos:column="44">NULL<pos:position pos:line="120" pos:column="48"/></argument>, <argument pos:line="120" pos:column="50">NULL<pos:position pos:line="120" pos:column="54"/></argument>, <argument pos:line="120" pos:column="56">data<pos:position pos:line="120" pos:column="60"/></argument>,<pos:position pos:line="120" pos:column="61"/></argument_list></macro></block></else></if></block></then></if></block></while></block></function></unit>
