<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2769_httpd-2.0.55.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_pool_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">context<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_socket_t<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">sock<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">length<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">stat<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">datasend<pos:position pos:line="7" pos:column="18"/></name><index pos:line="7" pos:column="18">[<expr><name pos:line="7" pos:column="19">STRLEN<pos:position pos:line="7" pos:column="25"/></name></expr>]<pos:position pos:line="7" pos:column="26"/></index></name> <init pos:line="7" pos:column="27">= <expr><literal type="string" pos:line="7" pos:column="29">"Send data test"<pos:position pos:line="7" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">datarecv<pos:position pos:line="8" pos:column="18"/></name><index pos:line="8" pos:column="18">[<expr><name pos:line="8" pos:column="19">STRLEN<pos:position pos:line="8" pos:column="25"/></name></expr>]<pos:position pos:line="8" pos:column="26"/></index></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name></type> <name><name pos:line="9" pos:column="10">msgbuf<pos:position pos:line="9" pos:column="16"/></name><index pos:line="9" pos:column="16">[<expr><literal type="number" pos:line="9" pos:column="17">80<pos:position pos:line="9" pos:column="19"/></literal></expr>]<pos:position pos:line="9" pos:column="20"/></index></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">local_ipaddr<pos:position pos:line="10" pos:column="23"/></name></decl>, <modifier pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="10" pos:column="26">remote_ipaddr<pos:position pos:line="10" pos:column="39"/></name></decl>;<pos:position pos:line="10" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">dest<pos:position pos:line="11" pos:column="15"/></name> <init pos:line="11" pos:column="16">= <expr><literal type="string" pos:line="11" pos:column="18">"127.0.0.1"<pos:position pos:line="11" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">apr_port_t<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">local_port<pos:position pos:line="12" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="28">remote_port<pos:position pos:line="12" pos:column="39"/></name></decl>;<pos:position pos:line="12" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">apr_interval_time_t<pos:position pos:line="13" pos:column="24"/></name></type> <name pos:line="13" pos:column="25">timeout<pos:position pos:line="13" pos:column="32"/></name> <init pos:line="13" pos:column="33">= <expr><call><name pos:line="13" pos:column="35">apr_time_from_sec<pos:position pos:line="13" pos:column="52"/></name><argument_list pos:line="13" pos:column="52">(<argument><expr><literal type="number" pos:line="13" pos:column="53">2<pos:position pos:line="13" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">apr_sockaddr_t<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">local_sa<pos:position pos:line="14" pos:column="29"/></name></decl>, <modifier pos:line="14" pos:column="31">*<pos:position pos:line="14" pos:column="32"/></modifier><decl><type ref="prev"/><name pos:line="14" pos:column="32">remote_sa<pos:position pos:line="14" pos:column="41"/></name></decl>;<pos:position pos:line="14" pos:column="42"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="16" pos:column="5">setbuf<pos:position pos:line="16" pos:column="11"/></name><argument_list pos:line="16" pos:column="11">(<argument><expr><name pos:line="16" pos:column="12">stdout<pos:position pos:line="16" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="20">NULL<pos:position pos:line="16" pos:column="24"/></name></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">argc<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">&gt;<pos:position pos:line="17" pos:column="18"/></operator> <literal type="number" pos:line="17" pos:column="16">1<pos:position pos:line="17" pos:column="17"/></literal></expr>)<pos:position pos:line="17" pos:column="18"/></condition><then pos:line="17" pos:column="18"> <block pos:line="17" pos:column="19">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">dest<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <name><name pos:line="18" pos:column="16">argv<pos:position pos:line="18" pos:column="20"/></name><index pos:line="18" pos:column="20">[<expr><literal type="number" pos:line="18" pos:column="21">1<pos:position pos:line="18" pos:column="22"/></literal></expr>]<pos:position pos:line="18" pos:column="23"/></index></name></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">argc<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">&gt;<pos:position pos:line="21" pos:column="18"/></operator> <literal type="number" pos:line="21" pos:column="16">2<pos:position pos:line="21" pos:column="17"/></literal></expr>)<pos:position pos:line="21" pos:column="18"/></condition><then pos:line="21" pos:column="18"> <block pos:line="21" pos:column="19">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">timeout<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <call><name pos:line="22" pos:column="19">atoi<pos:position pos:line="22" pos:column="23"/></name><argument_list pos:line="22" pos:column="23">(<argument><expr><name><name pos:line="22" pos:column="24">argv<pos:position pos:line="22" pos:column="28"/></name><index pos:line="22" pos:column="28">[<expr><literal type="number" pos:line="22" pos:column="29">2<pos:position pos:line="22" pos:column="30"/></literal></expr>]<pos:position pos:line="22" pos:column="31"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="25" pos:column="5">fprintf<pos:position pos:line="25" pos:column="12"/></name><argument_list pos:line="25" pos:column="12">(<argument><expr><name pos:line="25" pos:column="13">stdout<pos:position pos:line="25" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="21">"Initializing........."<pos:position pos:line="25" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">apr_initialize<pos:position pos:line="26" pos:column="23"/></name><argument_list pos:line="26" pos:column="23">()<pos:position pos:line="26" pos:column="25"/></argument_list></call> <operator pos:line="26" pos:column="26">!=<pos:position pos:line="26" pos:column="28"/></operator> <name pos:line="26" pos:column="29">APR_SUCCESS<pos:position pos:line="26" pos:column="40"/></name></expr>)<pos:position pos:line="26" pos:column="41"/></condition><then pos:line="26" pos:column="41"> <block pos:line="26" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">fprintf<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">stderr<pos:position pos:line="27" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="25">"Something went wrong\n"<pos:position pos:line="27" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">exit<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><operator pos:line="28" pos:column="14">-<pos:position pos:line="28" pos:column="15"/></operator><literal type="number" pos:line="28" pos:column="15">1<pos:position pos:line="28" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">fprintf<pos:position pos:line="30" pos:column="12"/></name><argument_list pos:line="30" pos:column="12">(<argument><expr><name pos:line="30" pos:column="13">stdout<pos:position pos:line="30" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="21">"OK\n"<pos:position pos:line="30" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">atexit<pos:position pos:line="31" pos:column="11"/></name><argument_list pos:line="31" pos:column="11">(<argument><expr><name pos:line="31" pos:column="12">apr_terminate<pos:position pos:line="31" pos:column="25"/></name></expr></argument>)<pos:position pos:line="31" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">fprintf<pos:position pos:line="33" pos:column="12"/></name><argument_list pos:line="33" pos:column="12">(<argument><expr><name pos:line="33" pos:column="13">stdout<pos:position pos:line="33" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="21">"Creating context......."<pos:position pos:line="33" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="48"/></expr_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><call><name pos:line="34" pos:column="9">apr_pool_create<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><operator pos:line="34" pos:column="25">&amp;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="26">context<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="35">NULL<pos:position pos:line="34" pos:column="39"/></name></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call> <operator pos:line="34" pos:column="41">!=<pos:position pos:line="34" pos:column="43"/></operator> <name pos:line="34" pos:column="44">APR_SUCCESS<pos:position pos:line="34" pos:column="55"/></name></expr>)<pos:position pos:line="34" pos:column="56"/></condition><then pos:line="34" pos:column="56"> <block pos:line="34" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">fprintf<pos:position pos:line="35" pos:column="16"/></name><argument_list pos:line="35" pos:column="16">(<argument><expr><name pos:line="35" pos:column="17">stderr<pos:position pos:line="35" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="25">"Something went wrong\n"<pos:position pos:line="35" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">exit<pos:position pos:line="36" pos:column="13"/></name><argument_list pos:line="36" pos:column="13">(<argument><expr><operator pos:line="36" pos:column="14">-<pos:position pos:line="36" pos:column="15"/></operator><literal type="number" pos:line="36" pos:column="15">1<pos:position pos:line="36" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">fprintf<pos:position pos:line="38" pos:column="12"/></name><argument_list pos:line="38" pos:column="12">(<argument><expr><name pos:line="38" pos:column="13">stdout<pos:position pos:line="38" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="21">"OK\n"<pos:position pos:line="38" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="40" pos:column="5">fprintf<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">stdout<pos:position pos:line="40" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="40" pos:column="20">"\tClient:  Making socket address..............."<pos:position pos:line="40" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="71"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">stat<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">=<pos:position pos:line="41" pos:column="16"/></operator> <call><name pos:line="41" pos:column="17">apr_sockaddr_info_get<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><operator pos:line="41" pos:column="39">&amp;<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="40">remote_sa<pos:position pos:line="41" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="51">dest<pos:position pos:line="41" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="57">APR_UNSPEC<pos:position pos:line="41" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="69">8021<pos:position pos:line="41" pos:column="73"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="75">0<pos:position pos:line="41" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="78">context<pos:position pos:line="41" pos:column="85"/></name></expr></argument>)<pos:position pos:line="41" pos:column="86"/></argument_list></call><operator pos:line="41" pos:column="86">)<pos:position pos:line="41" pos:column="87"/></operator> 
        <operator pos:line="42" pos:column="9">!=<pos:position pos:line="42" pos:column="11"/></operator> <name pos:line="42" pos:column="12">APR_SUCCESS<pos:position pos:line="42" pos:column="23"/></name></expr>)<pos:position pos:line="42" pos:column="24"/></condition><then pos:line="42" pos:column="24"> <block pos:line="42" pos:column="25">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">fprintf<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument><expr><name pos:line="43" pos:column="17">stdout<pos:position pos:line="43" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="25">"Failed!\n"<pos:position pos:line="43" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">fprintf<pos:position pos:line="44" pos:column="16"/></name><argument_list pos:line="44" pos:column="16">(<argument><expr><name pos:line="44" pos:column="17">stdout<pos:position pos:line="44" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="25">"Address resolution failed for %s: %s\n"<pos:position pos:line="44" pos:column="65"/></literal></expr></argument>, 
                <argument><expr><name pos:line="45" pos:column="17">dest<pos:position pos:line="45" pos:column="21"/></name></expr></argument>, <argument><expr><call><name pos:line="45" pos:column="23">apr_strerror<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">stat<pos:position pos:line="45" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="42">msgbuf<pos:position pos:line="45" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="45" pos:column="50">sizeof<argument_list pos:line="45" pos:column="56">(<argument><expr><name pos:line="45" pos:column="57">msgbuf<pos:position pos:line="45" pos:column="63"/></name></expr></argument>)<pos:position pos:line="45" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="45" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">exit<pos:position pos:line="46" pos:column="13"/></name><argument_list pos:line="46" pos:column="13">(<argument><expr><operator pos:line="46" pos:column="14">-<pos:position pos:line="46" pos:column="15"/></operator><literal type="number" pos:line="46" pos:column="15">1<pos:position pos:line="46" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">fprintf<pos:position pos:line="48" pos:column="12"/></name><argument_list pos:line="48" pos:column="12">(<argument><expr><name pos:line="48" pos:column="13">stdout<pos:position pos:line="48" pos:column="19"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="48" pos:column="20">"OK\n"<pos:position pos:line="48" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="50" pos:column="5">fprintf<pos:position pos:line="50" pos:column="12"/></name><argument_list pos:line="50" pos:column="12">(<argument><expr><name pos:line="50" pos:column="13">stdout<pos:position pos:line="50" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="21">"\tClient:  Creating new socket......."<pos:position pos:line="50" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="62"/></expr_stmt>
    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><call><name pos:line="51" pos:column="9">apr_socket_create<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><operator pos:line="51" pos:column="27">&amp;<pos:position pos:line="51" pos:column="32"/></operator><name pos:line="51" pos:column="28">sock<pos:position pos:line="51" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="34">remote_sa<pos:position pos:line="51" pos:column="43"/></name><operator pos:line="51" pos:column="43">-&gt;<pos:position pos:line="51" pos:column="48"/></operator><name pos:line="51" pos:column="45">family<pos:position pos:line="51" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="53">SOCK_STREAM<pos:position pos:line="51" pos:column="64"/></name></expr></argument>,
                          <argument><expr><name pos:line="52" pos:column="27">context<pos:position pos:line="52" pos:column="34"/></name></expr></argument>)<pos:position pos:line="52" pos:column="35"/></argument_list></call> <operator pos:line="52" pos:column="36">!=<pos:position pos:line="52" pos:column="38"/></operator> <name pos:line="52" pos:column="39">APR_SUCCESS<pos:position pos:line="52" pos:column="50"/></name></expr>)<pos:position pos:line="52" pos:column="51"/></condition><then pos:line="52" pos:column="51"> <block pos:line="52" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">fprintf<pos:position pos:line="53" pos:column="16"/></name><argument_list pos:line="53" pos:column="16">(<argument><expr><name pos:line="53" pos:column="17">stderr<pos:position pos:line="53" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="25">"Couldn't create socket\n"<pos:position pos:line="53" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">exit<pos:position pos:line="54" pos:column="13"/></name><argument_list pos:line="54" pos:column="13">(<argument><expr><operator pos:line="54" pos:column="14">-<pos:position pos:line="54" pos:column="15"/></operator><literal type="number" pos:line="54" pos:column="15">1<pos:position pos:line="54" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">fprintf<pos:position pos:line="56" pos:column="12"/></name><argument_list pos:line="56" pos:column="12">(<argument><expr><name pos:line="56" pos:column="13">stdout<pos:position pos:line="56" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="21">"OK\n"<pos:position pos:line="56" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">fprintf<pos:position pos:line="58" pos:column="12"/></name><argument_list pos:line="58" pos:column="12">(<argument><expr><name pos:line="58" pos:column="13">stdout<pos:position pos:line="58" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="21">"\tClient:  Setting socket timeout......."<pos:position pos:line="58" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><name pos:line="59" pos:column="5">stat<pos:position pos:line="59" pos:column="9"/></name> <operator pos:line="59" pos:column="10">=<pos:position pos:line="59" pos:column="11"/></operator> <call><name pos:line="59" pos:column="12">apr_socket_timeout_set<pos:position pos:line="59" pos:column="34"/></name><argument_list pos:line="59" pos:column="34">(<argument><expr><name pos:line="59" pos:column="35">sock<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">timeout<pos:position pos:line="59" pos:column="48"/></name></expr></argument>)<pos:position pos:line="59" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="50"/></expr_stmt>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">stat<pos:position pos:line="60" pos:column="13"/></name></expr>)<pos:position pos:line="60" pos:column="14"/></condition><then pos:line="60" pos:column="14"> <block pos:line="60" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">fprintf<pos:position pos:line="61" pos:column="16"/></name><argument_list pos:line="61" pos:column="16">(<argument><expr><name pos:line="61" pos:column="17">stderr<pos:position pos:line="61" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="25">"Problem setting timeout: %d\n"<pos:position pos:line="61" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="58">stat<pos:position pos:line="61" pos:column="62"/></name></expr></argument>)<pos:position pos:line="61" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">exit<pos:position pos:line="62" pos:column="13"/></name><argument_list pos:line="62" pos:column="13">(<argument><expr><operator pos:line="62" pos:column="14">-<pos:position pos:line="62" pos:column="15"/></operator><literal type="number" pos:line="62" pos:column="15">1<pos:position pos:line="62" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">fprintf<pos:position pos:line="64" pos:column="12"/></name><argument_list pos:line="64" pos:column="12">(<argument><expr><name pos:line="64" pos:column="13">stdout<pos:position pos:line="64" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="21">"OK\n"<pos:position pos:line="64" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="66" pos:column="5">fprintf<pos:position pos:line="66" pos:column="12"/></name><argument_list pos:line="66" pos:column="12">(<argument><expr><name pos:line="66" pos:column="13">stdout<pos:position pos:line="66" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="21">"\tClient:  Connecting to socket......."<pos:position pos:line="66" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="63"/></expr_stmt>

    <expr_stmt><expr><name pos:line="68" pos:column="5">stat<pos:position pos:line="68" pos:column="9"/></name> <operator pos:line="68" pos:column="10">=<pos:position pos:line="68" pos:column="11"/></operator> <call><name pos:line="68" pos:column="12">apr_socket_connect<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><name pos:line="68" pos:column="31">sock<pos:position pos:line="68" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="37">remote_sa<pos:position pos:line="68" pos:column="46"/></name></expr></argument>)<pos:position pos:line="68" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="48"/></expr_stmt>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">stat<pos:position pos:line="70" pos:column="13"/></name> <operator pos:line="70" pos:column="14">!=<pos:position pos:line="70" pos:column="16"/></operator> <name pos:line="70" pos:column="17">APR_SUCCESS<pos:position pos:line="70" pos:column="28"/></name></expr>)<pos:position pos:line="70" pos:column="29"/></condition><then pos:line="70" pos:column="29"> <block pos:line="70" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="71" pos:column="9">apr_socket_close<pos:position pos:line="71" pos:column="25"/></name><argument_list pos:line="71" pos:column="25">(<argument><expr><name pos:line="71" pos:column="26">sock<pos:position pos:line="71" pos:column="30"/></name></expr></argument>)<pos:position pos:line="71" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="72" pos:column="9">fprintf<pos:position pos:line="72" pos:column="16"/></name><argument_list pos:line="72" pos:column="16">(<argument><expr><name pos:line="72" pos:column="17">stderr<pos:position pos:line="72" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="25">"Could not connect: %s (%d)\n"<pos:position pos:line="72" pos:column="55"/></literal></expr></argument>, 
		<argument><expr><call><name pos:line="73" pos:column="17">apr_strerror<pos:position pos:line="73" pos:column="29"/></name><argument_list pos:line="73" pos:column="29">(<argument><expr><name pos:line="73" pos:column="30">stat<pos:position pos:line="73" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="36">msgbuf<pos:position pos:line="73" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="73" pos:column="44">sizeof<argument_list pos:line="73" pos:column="50">(<argument><expr><name pos:line="73" pos:column="51">msgbuf<pos:position pos:line="73" pos:column="57"/></name></expr></argument>)<pos:position pos:line="73" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="73" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="73" pos:column="61">stat<pos:position pos:line="73" pos:column="65"/></name></expr></argument>)<pos:position pos:line="73" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">fflush<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><name pos:line="74" pos:column="16">stderr<pos:position pos:line="74" pos:column="22"/></name></expr></argument>)<pos:position pos:line="74" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">exit<pos:position pos:line="75" pos:column="13"/></name><argument_list pos:line="75" pos:column="13">(<argument><expr><operator pos:line="75" pos:column="14">-<pos:position pos:line="75" pos:column="15"/></operator><literal type="number" pos:line="75" pos:column="15">1<pos:position pos:line="75" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">fprintf<pos:position pos:line="77" pos:column="12"/></name><argument_list pos:line="77" pos:column="12">(<argument><expr><name pos:line="77" pos:column="13">stdout<pos:position pos:line="77" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="21">"OK\n"<pos:position pos:line="77" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="79" pos:column="5">apr_socket_addr_get<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument><expr><operator pos:line="79" pos:column="25">&amp;<pos:position pos:line="79" pos:column="30"/></operator><name pos:line="79" pos:column="26">remote_sa<pos:position pos:line="79" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="37">APR_REMOTE<pos:position pos:line="79" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="49">sock<pos:position pos:line="79" pos:column="53"/></name></expr></argument>)<pos:position pos:line="79" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">apr_sockaddr_ip_get<pos:position pos:line="80" pos:column="24"/></name><argument_list pos:line="80" pos:column="24">(<argument><expr><operator pos:line="80" pos:column="25">&amp;<pos:position pos:line="80" pos:column="30"/></operator><name pos:line="80" pos:column="26">remote_ipaddr<pos:position pos:line="80" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="41">remote_sa<pos:position pos:line="80" pos:column="50"/></name></expr></argument>)<pos:position pos:line="80" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">apr_sockaddr_port_get<pos:position pos:line="81" pos:column="26"/></name><argument_list pos:line="81" pos:column="26">(<argument><expr><operator pos:line="81" pos:column="27">&amp;<pos:position pos:line="81" pos:column="32"/></operator><name pos:line="81" pos:column="28">remote_port<pos:position pos:line="81" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="41">remote_sa<pos:position pos:line="81" pos:column="50"/></name></expr></argument>)<pos:position pos:line="81" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">apr_socket_addr_get<pos:position pos:line="82" pos:column="24"/></name><argument_list pos:line="82" pos:column="24">(<argument><expr><operator pos:line="82" pos:column="25">&amp;<pos:position pos:line="82" pos:column="30"/></operator><name pos:line="82" pos:column="26">local_sa<pos:position pos:line="82" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="36">APR_LOCAL<pos:position pos:line="82" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="47">sock<pos:position pos:line="82" pos:column="51"/></name></expr></argument>)<pos:position pos:line="82" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">apr_sockaddr_ip_get<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><operator pos:line="83" pos:column="25">&amp;<pos:position pos:line="83" pos:column="30"/></operator><name pos:line="83" pos:column="26">local_ipaddr<pos:position pos:line="83" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="40">local_sa<pos:position pos:line="83" pos:column="48"/></name></expr></argument>)<pos:position pos:line="83" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">apr_sockaddr_port_get<pos:position pos:line="84" pos:column="26"/></name><argument_list pos:line="84" pos:column="26">(<argument><expr><operator pos:line="84" pos:column="27">&amp;<pos:position pos:line="84" pos:column="32"/></operator><name pos:line="84" pos:column="28">local_port<pos:position pos:line="84" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="40">local_sa<pos:position pos:line="84" pos:column="48"/></name></expr></argument>)<pos:position pos:line="84" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">fprintf<pos:position pos:line="85" pos:column="12"/></name><argument_list pos:line="85" pos:column="12">(<argument><expr><name pos:line="85" pos:column="13">stdout<pos:position pos:line="85" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="21">"\tClient socket: %s:%u -&gt; %s:%u\n"<pos:position pos:line="85" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="58">local_ipaddr<pos:position pos:line="85" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="72">local_port<pos:position pos:line="85" pos:column="82"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="84">remote_ipaddr<pos:position pos:line="85" pos:column="97"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="99">remote_port<pos:position pos:line="85" pos:column="110"/></name></expr></argument>)<pos:position pos:line="85" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="112"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="87" pos:column="5">fprintf<pos:position pos:line="87" pos:column="12"/></name><argument_list pos:line="87" pos:column="12">(<argument><expr><name pos:line="87" pos:column="13">stdout<pos:position pos:line="87" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="21">"\tClient:  Trying to send data over socket......."<pos:position pos:line="87" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="74"/></expr_stmt>
    <expr_stmt><expr><name pos:line="88" pos:column="5">length<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">=<pos:position pos:line="88" pos:column="13"/></operator> <name pos:line="88" pos:column="14">STRLEN<pos:position pos:line="88" pos:column="20"/></name></expr>;<pos:position pos:line="88" pos:column="21"/></expr_stmt>
    <if pos:line="89" pos:column="5">if <condition pos:line="89" pos:column="8">(<expr><operator pos:line="89" pos:column="9">(<pos:position pos:line="89" pos:column="10"/></operator><name pos:line="89" pos:column="10">stat<pos:position pos:line="89" pos:column="14"/></name> <operator pos:line="89" pos:column="15">=<pos:position pos:line="89" pos:column="16"/></operator> <call><name pos:line="89" pos:column="17">apr_socket_send<pos:position pos:line="89" pos:column="32"/></name><argument_list pos:line="89" pos:column="32">(<argument><expr><name pos:line="89" pos:column="33">sock<pos:position pos:line="89" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="39">datasend<pos:position pos:line="89" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="49">&amp;<pos:position pos:line="89" pos:column="54"/></operator><name pos:line="89" pos:column="50">length<pos:position pos:line="89" pos:column="56"/></name></expr></argument>)<pos:position pos:line="89" pos:column="57"/></argument_list></call> <operator pos:line="89" pos:column="58">!=<pos:position pos:line="89" pos:column="60"/></operator> <name pos:line="89" pos:column="61">APR_SUCCESS<pos:position pos:line="89" pos:column="72"/></name><operator pos:line="89" pos:column="72">)<pos:position pos:line="89" pos:column="73"/></operator></expr>)<pos:position pos:line="89" pos:column="74"/></condition><then pos:line="89" pos:column="74"> <block pos:line="89" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="90" pos:column="9">apr_socket_close<pos:position pos:line="90" pos:column="25"/></name><argument_list pos:line="90" pos:column="25">(<argument><expr><name pos:line="90" pos:column="26">sock<pos:position pos:line="90" pos:column="30"/></name></expr></argument>)<pos:position pos:line="90" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">fprintf<pos:position pos:line="91" pos:column="16"/></name><argument_list pos:line="91" pos:column="16">(<argument><expr><name pos:line="91" pos:column="17">stderr<pos:position pos:line="91" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="91" pos:column="25">"Problem sending data: %s (%d)\n"<pos:position pos:line="91" pos:column="58"/></literal></expr></argument>,
		<argument><expr><call><name pos:line="92" pos:column="17">apr_strerror<pos:position pos:line="92" pos:column="29"/></name><argument_list pos:line="92" pos:column="29">(<argument><expr><name pos:line="92" pos:column="30">stat<pos:position pos:line="92" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="36">msgbuf<pos:position pos:line="92" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="44">sizeof<argument_list pos:line="92" pos:column="50">(<argument><expr><name pos:line="92" pos:column="51">msgbuf<pos:position pos:line="92" pos:column="57"/></name></expr></argument>)<pos:position pos:line="92" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="92" pos:column="61">stat<pos:position pos:line="92" pos:column="65"/></name></expr></argument>)<pos:position pos:line="92" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">exit<pos:position pos:line="93" pos:column="13"/></name><argument_list pos:line="93" pos:column="13">(<argument><expr><operator pos:line="93" pos:column="14">-<pos:position pos:line="93" pos:column="15"/></operator><literal type="number" pos:line="93" pos:column="15">1<pos:position pos:line="93" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="94" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">fprintf<pos:position pos:line="95" pos:column="12"/></name><argument_list pos:line="95" pos:column="12">(<argument><expr><name pos:line="95" pos:column="13">stdout<pos:position pos:line="95" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="21">"OK\n"<pos:position pos:line="95" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="29"/></expr_stmt>
   
    <expr_stmt><expr><name pos:line="97" pos:column="5">length<pos:position pos:line="97" pos:column="11"/></name> <operator pos:line="97" pos:column="12">=<pos:position pos:line="97" pos:column="13"/></operator> <name pos:line="97" pos:column="14">STRLEN<pos:position pos:line="97" pos:column="20"/></name></expr>;<pos:position pos:line="97" pos:column="21"/></expr_stmt> 
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">fprintf<pos:position pos:line="98" pos:column="12"/></name><argument_list pos:line="98" pos:column="12">(<argument><expr><name pos:line="98" pos:column="13">stdout<pos:position pos:line="98" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="21">"\tClient:  Trying to receive data over socket......."<pos:position pos:line="98" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="77"/></expr_stmt>

    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><operator pos:line="100" pos:column="9">(<pos:position pos:line="100" pos:column="10"/></operator><name pos:line="100" pos:column="10">stat<pos:position pos:line="100" pos:column="14"/></name> <operator pos:line="100" pos:column="15">=<pos:position pos:line="100" pos:column="16"/></operator> <call><name pos:line="100" pos:column="17">apr_socket_recv<pos:position pos:line="100" pos:column="32"/></name><argument_list pos:line="100" pos:column="32">(<argument><expr><name pos:line="100" pos:column="33">sock<pos:position pos:line="100" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="39">datarecv<pos:position pos:line="100" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="100" pos:column="49">&amp;<pos:position pos:line="100" pos:column="54"/></operator><name pos:line="100" pos:column="50">length<pos:position pos:line="100" pos:column="56"/></name></expr></argument>)<pos:position pos:line="100" pos:column="57"/></argument_list></call><operator pos:line="100" pos:column="57">)<pos:position pos:line="100" pos:column="58"/></operator> <operator pos:line="100" pos:column="59">!=<pos:position pos:line="100" pos:column="61"/></operator> <name pos:line="100" pos:column="62">APR_SUCCESS<pos:position pos:line="100" pos:column="73"/></name></expr>)<pos:position pos:line="100" pos:column="74"/></condition><then pos:line="100" pos:column="74"> <block pos:line="100" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">apr_socket_close<pos:position pos:line="101" pos:column="25"/></name><argument_list pos:line="101" pos:column="25">(<argument><expr><name pos:line="101" pos:column="26">sock<pos:position pos:line="101" pos:column="30"/></name></expr></argument>)<pos:position pos:line="101" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">fprintf<pos:position pos:line="102" pos:column="16"/></name><argument_list pos:line="102" pos:column="16">(<argument><expr><name pos:line="102" pos:column="17">stderr<pos:position pos:line="102" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="25">"Problem receiving data: %s (%d)\n"<pos:position pos:line="102" pos:column="60"/></literal></expr></argument>, 
		<argument><expr><call><name pos:line="103" pos:column="17">apr_strerror<pos:position pos:line="103" pos:column="29"/></name><argument_list pos:line="103" pos:column="29">(<argument><expr><name pos:line="103" pos:column="30">stat<pos:position pos:line="103" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="36">msgbuf<pos:position pos:line="103" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="103" pos:column="44">sizeof<argument_list pos:line="103" pos:column="50">(<argument><expr><name pos:line="103" pos:column="51">msgbuf<pos:position pos:line="103" pos:column="57"/></name></expr></argument>)<pos:position pos:line="103" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="103" pos:column="59"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="103" pos:column="61">stat<pos:position pos:line="103" pos:column="65"/></name></expr></argument>)<pos:position pos:line="103" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="104" pos:column="9">exit<pos:position pos:line="104" pos:column="13"/></name><argument_list pos:line="104" pos:column="13">(<argument><expr><operator pos:line="104" pos:column="14">-<pos:position pos:line="104" pos:column="15"/></operator><literal type="number" pos:line="104" pos:column="15">1<pos:position pos:line="104" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>
    <if pos:line="106" pos:column="5">if <condition pos:line="106" pos:column="8">(<expr><call><name pos:line="106" pos:column="9">strcmp<pos:position pos:line="106" pos:column="15"/></name><argument_list pos:line="106" pos:column="15">(<argument><expr><name pos:line="106" pos:column="16">datarecv<pos:position pos:line="106" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="26">"Recv data test"<pos:position pos:line="106" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="44"/></condition><then pos:line="106" pos:column="44"> <block pos:line="106" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="107" pos:column="9">apr_socket_close<pos:position pos:line="107" pos:column="25"/></name><argument_list pos:line="107" pos:column="25">(<argument><expr><name pos:line="107" pos:column="26">sock<pos:position pos:line="107" pos:column="30"/></name></expr></argument>)<pos:position pos:line="107" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="108" pos:column="9">fprintf<pos:position pos:line="108" pos:column="16"/></name><argument_list pos:line="108" pos:column="16">(<argument><expr><name pos:line="108" pos:column="17">stderr<pos:position pos:line="108" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="25">"I did not receive the correct data %s\n"<pos:position pos:line="108" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="68">datarecv<pos:position pos:line="108" pos:column="76"/></name></expr></argument>)<pos:position pos:line="108" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">exit<pos:position pos:line="109" pos:column="13"/></name><argument_list pos:line="109" pos:column="13">(<argument><expr><operator pos:line="109" pos:column="14">-<pos:position pos:line="109" pos:column="15"/></operator><literal type="number" pos:line="109" pos:column="15">1<pos:position pos:line="109" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="111" pos:column="5">fprintf<pos:position pos:line="111" pos:column="12"/></name><argument_list pos:line="111" pos:column="12">(<argument><expr><name pos:line="111" pos:column="13">stdout<pos:position pos:line="111" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="111" pos:column="21">"OK\n"<pos:position pos:line="111" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="113" pos:column="5">fprintf<pos:position pos:line="113" pos:column="12"/></name><argument_list pos:line="113" pos:column="12">(<argument><expr><name pos:line="113" pos:column="13">stdout<pos:position pos:line="113" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="21">"\tClient:  Shutting down socket......."<pos:position pos:line="113" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="63"/></expr_stmt>
    <if pos:line="114" pos:column="5">if <condition pos:line="114" pos:column="8">(<expr><call><name pos:line="114" pos:column="9">apr_socket_shutdown<pos:position pos:line="114" pos:column="28"/></name><argument_list pos:line="114" pos:column="28">(<argument><expr><name pos:line="114" pos:column="29">sock<pos:position pos:line="114" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="35">APR_SHUTDOWN_WRITE<pos:position pos:line="114" pos:column="53"/></name></expr></argument>)<pos:position pos:line="114" pos:column="54"/></argument_list></call> <operator pos:line="114" pos:column="55">!=<pos:position pos:line="114" pos:column="57"/></operator> <name pos:line="114" pos:column="58">APR_SUCCESS<pos:position pos:line="114" pos:column="69"/></name></expr>)<pos:position pos:line="114" pos:column="70"/></condition><then pos:line="114" pos:column="70"> <block pos:line="114" pos:column="71">{
        <expr_stmt><expr><call><name pos:line="115" pos:column="9">apr_socket_close<pos:position pos:line="115" pos:column="25"/></name><argument_list pos:line="115" pos:column="25">(<argument><expr><name pos:line="115" pos:column="26">sock<pos:position pos:line="115" pos:column="30"/></name></expr></argument>)<pos:position pos:line="115" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="116" pos:column="9">fprintf<pos:position pos:line="116" pos:column="16"/></name><argument_list pos:line="116" pos:column="16">(<argument><expr><name pos:line="116" pos:column="17">stderr<pos:position pos:line="116" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="25">"Could not shutdown socket\n"<pos:position pos:line="116" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="117" pos:column="9">exit<pos:position pos:line="117" pos:column="13"/></name><argument_list pos:line="117" pos:column="13">(<argument><expr><operator pos:line="117" pos:column="14">-<pos:position pos:line="117" pos:column="15"/></operator><literal type="number" pos:line="117" pos:column="15">1<pos:position pos:line="117" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="118" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">fprintf<pos:position pos:line="119" pos:column="12"/></name><argument_list pos:line="119" pos:column="12">(<argument><expr><name pos:line="119" pos:column="13">stdout<pos:position pos:line="119" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="21">"OK\n"<pos:position pos:line="119" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="121" pos:column="5">fprintf<pos:position pos:line="121" pos:column="12"/></name><argument_list pos:line="121" pos:column="12">(<argument><expr><name pos:line="121" pos:column="13">stdout<pos:position pos:line="121" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="21">"\tClient:  Closing down socket......."<pos:position pos:line="121" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="62"/></expr_stmt>
    <if pos:line="122" pos:column="5">if <condition pos:line="122" pos:column="8">(<expr><call><name pos:line="122" pos:column="9">apr_socket_close<pos:position pos:line="122" pos:column="25"/></name><argument_list pos:line="122" pos:column="25">(<argument><expr><name pos:line="122" pos:column="26">sock<pos:position pos:line="122" pos:column="30"/></name></expr></argument>)<pos:position pos:line="122" pos:column="31"/></argument_list></call> <operator pos:line="122" pos:column="32">!=<pos:position pos:line="122" pos:column="34"/></operator> <name pos:line="122" pos:column="35">APR_SUCCESS<pos:position pos:line="122" pos:column="46"/></name></expr>)<pos:position pos:line="122" pos:column="47"/></condition><then pos:line="122" pos:column="47"> <block pos:line="122" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">fprintf<pos:position pos:line="123" pos:column="16"/></name><argument_list pos:line="123" pos:column="16">(<argument><expr><name pos:line="123" pos:column="17">stderr<pos:position pos:line="123" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="25">"Could not shutdown socket\n"<pos:position pos:line="123" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="124" pos:column="9">exit<pos:position pos:line="124" pos:column="13"/></name><argument_list pos:line="124" pos:column="13">(<argument><expr><operator pos:line="124" pos:column="14">-<pos:position pos:line="124" pos:column="15"/></operator><literal type="number" pos:line="124" pos:column="15">1<pos:position pos:line="124" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">fprintf<pos:position pos:line="126" pos:column="12"/></name><argument_list pos:line="126" pos:column="12">(<argument><expr><name pos:line="126" pos:column="13">stdout<pos:position pos:line="126" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="126" pos:column="21">"OK\n"<pos:position pos:line="126" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="29"/></expr_stmt>

    <return pos:line="128" pos:column="5">return <expr><literal type="number" pos:line="128" pos:column="12">1<pos:position pos:line="128" pos:column="13"/></literal></expr>;<pos:position pos:line="128" pos:column="14"/></return>
}<pos:position pos:line="129" pos:column="2"/></block></function></unit>
