<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3180_httpd-2.2.22.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">XML_Error<pos:position pos:line="1" pos:column="22"/></name></name></type>
<name pos:line="2" pos:column="1">appendAttributeValue<pos:position pos:line="2" pos:column="21"/></name><parameter_list pos:line="2" pos:column="21">(<parameter><decl><type><name pos:line="2" pos:column="22">XML_Parser<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">parser<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">ENCODING<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">enc<pos:position pos:line="2" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="62">XML_Bool<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">isCdata<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>,
                     <parameter><decl><type><specifier pos:line="3" pos:column="22">const<pos:position pos:line="3" pos:column="27"/></specifier> <name pos:line="3" pos:column="28">char<pos:position pos:line="3" pos:column="32"/></name> <modifier pos:line="3" pos:column="33">*<pos:position pos:line="3" pos:column="34"/></modifier></type><name pos:line="3" pos:column="34">ptr<pos:position pos:line="3" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="39">const<pos:position pos:line="3" pos:column="44"/></specifier> <name pos:line="3" pos:column="45">char<pos:position pos:line="3" pos:column="49"/></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">end<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="4" pos:column="22">STRING_POOL<pos:position pos:line="4" pos:column="33"/></name> <modifier pos:line="4" pos:column="34">*<pos:position pos:line="4" pos:column="35"/></modifier></type><name pos:line="4" pos:column="35">pool<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="40"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">DTD<pos:position pos:line="6" pos:column="6"/></name> <modifier pos:line="6" pos:column="7">*<pos:position pos:line="6" pos:column="8"/></modifier> <specifier pos:line="6" pos:column="9">const<pos:position pos:line="6" pos:column="14"/></specifier></type> <name pos:line="6" pos:column="15">dtd<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">_dtd<pos:position pos:line="6" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>  <comment type="block" pos:line="6" pos:column="28">/* save one level of indirection */</comment>
  <for pos:line="7" pos:column="3">for <control pos:line="7" pos:column="7">(<init pos:line="7" pos:column="8">;<pos:position pos:line="7" pos:column="9"/></init><condition pos:line="7" pos:column="9">;<pos:position pos:line="7" pos:column="10"/></condition><incr/>)<pos:position pos:line="7" pos:column="11"/></control> <block pos:line="7" pos:column="12">{
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">next<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">tok<pos:position pos:line="9" pos:column="12"/></name> <init pos:line="9" pos:column="13">= <expr><call><name pos:line="9" pos:column="15">XmlAttributeValueTok<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><name pos:line="9" pos:column="36">enc<pos:position pos:line="9" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="41">ptr<pos:position pos:line="9" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="46">end<pos:position pos:line="9" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="51">&amp;<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="52">next<pos:position pos:line="9" pos:column="56"/></name></expr></argument>)<pos:position pos:line="9" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="58"/></decl_stmt>
    <switch pos:line="10" pos:column="5">switch <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">tok<pos:position pos:line="10" pos:column="16"/></name></expr>)<pos:position pos:line="10" pos:column="17"/></condition> <block pos:line="10" pos:column="18">{
    <case pos:line="11" pos:column="5">case <expr><name pos:line="11" pos:column="10">XML_TOK_NONE<pos:position pos:line="11" pos:column="22"/></name></expr>:<pos:position pos:line="11" pos:column="23"/></case>
      <return pos:line="12" pos:column="7">return <expr><name pos:line="12" pos:column="14">XML_ERROR_NONE<pos:position pos:line="12" pos:column="28"/></name></expr>;<pos:position pos:line="12" pos:column="29"/></return>
    <case pos:line="13" pos:column="5">case <expr><name pos:line="13" pos:column="10">XML_TOK_INVALID<pos:position pos:line="13" pos:column="25"/></name></expr>:<pos:position pos:line="13" pos:column="26"/></case>
      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><name pos:line="14" pos:column="11">enc<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">==<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">encoding<pos:position pos:line="14" pos:column="26"/></name></expr>)<pos:position pos:line="14" pos:column="27"/></condition><then pos:line="14" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">eventPtr<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="20">next<pos:position pos:line="15" pos:column="24"/></name></expr>;<pos:position pos:line="15" pos:column="25"/></expr_stmt></block></then></if>
      <return pos:line="16" pos:column="7">return <expr><name pos:line="16" pos:column="14">XML_ERROR_INVALID_TOKEN<pos:position pos:line="16" pos:column="37"/></name></expr>;<pos:position pos:line="16" pos:column="38"/></return>
    <case pos:line="17" pos:column="5">case <expr><name pos:line="17" pos:column="10">XML_TOK_PARTIAL<pos:position pos:line="17" pos:column="25"/></name></expr>:<pos:position pos:line="17" pos:column="26"/></case>
      <if pos:line="18" pos:column="7">if <condition pos:line="18" pos:column="10">(<expr><name pos:line="18" pos:column="11">enc<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">==<pos:position pos:line="18" pos:column="17"/></operator> <name pos:line="18" pos:column="18">encoding<pos:position pos:line="18" pos:column="26"/></name></expr>)<pos:position pos:line="18" pos:column="27"/></condition><then pos:line="18" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="19" pos:column="9">eventPtr<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">ptr<pos:position pos:line="19" pos:column="23"/></name></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt></block></then></if>
      <return pos:line="20" pos:column="7">return <expr><name pos:line="20" pos:column="14">XML_ERROR_INVALID_TOKEN<pos:position pos:line="20" pos:column="37"/></name></expr>;<pos:position pos:line="20" pos:column="38"/></return>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">XML_TOK_CHAR_REF<pos:position pos:line="21" pos:column="26"/></name></expr>:<pos:position pos:line="21" pos:column="27"/></case>
      <block pos:line="22" pos:column="7">{
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">XML_Char<pos:position pos:line="23" pos:column="17"/></name></type> <name><name pos:line="23" pos:column="18">buf<pos:position pos:line="23" pos:column="21"/></name><index pos:line="23" pos:column="21">[<expr><name pos:line="23" pos:column="22">XML_ENCODE_MAX<pos:position pos:line="23" pos:column="36"/></name></expr>]<pos:position pos:line="23" pos:column="37"/></index></name></decl>;<pos:position pos:line="23" pos:column="38"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">int<pos:position pos:line="24" pos:column="12"/></name></type> <name pos:line="24" pos:column="13">i<pos:position pos:line="24" pos:column="14"/></name></decl>;<pos:position pos:line="24" pos:column="15"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">int<pos:position pos:line="25" pos:column="12"/></name></type> <name pos:line="25" pos:column="13">n<pos:position pos:line="25" pos:column="14"/></name> <init pos:line="25" pos:column="15">= <expr><call><name pos:line="25" pos:column="17">XmlCharRefNumber<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">enc<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="39">ptr<pos:position pos:line="25" pos:column="42"/></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="44"/></decl_stmt>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">n<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">&lt;<pos:position pos:line="26" pos:column="19"/></operator> <literal type="number" pos:line="26" pos:column="17">0<pos:position pos:line="26" pos:column="18"/></literal></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19"> <block pos:line="26" pos:column="20">{
          <if pos:line="27" pos:column="11">if <condition pos:line="27" pos:column="14">(<expr><name pos:line="27" pos:column="15">enc<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">==<pos:position pos:line="27" pos:column="21"/></operator> <name pos:line="27" pos:column="22">encoding<pos:position pos:line="27" pos:column="30"/></name></expr>)<pos:position pos:line="27" pos:column="31"/></condition><then pos:line="27" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="28" pos:column="13">eventPtr<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">=<pos:position pos:line="28" pos:column="23"/></operator> <name pos:line="28" pos:column="24">ptr<pos:position pos:line="28" pos:column="27"/></name></expr>;<pos:position pos:line="28" pos:column="28"/></expr_stmt></block></then></if>
          <return pos:line="29" pos:column="11">return <expr><name pos:line="29" pos:column="18">XML_ERROR_BAD_CHAR_REF<pos:position pos:line="29" pos:column="40"/></name></expr>;<pos:position pos:line="29" pos:column="41"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">isCdata<pos:position pos:line="31" pos:column="21"/></name>
            <operator pos:line="32" pos:column="13">&amp;&amp;<pos:position pos:line="32" pos:column="23"/></operator> <name pos:line="32" pos:column="16">n<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">==<pos:position pos:line="32" pos:column="20"/></operator> <literal type="number" pos:line="32" pos:column="21">0x20<pos:position pos:line="32" pos:column="25"/></literal> <comment type="block" pos:line="32" pos:column="26">/* space */</comment>
            <operator pos:line="33" pos:column="13">&amp;&amp;<pos:position pos:line="33" pos:column="23"/></operator> <operator pos:line="33" pos:column="16">(<pos:position pos:line="33" pos:column="17"/></operator><call><name pos:line="33" pos:column="17">poolLength<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name pos:line="33" pos:column="28">pool<pos:position pos:line="33" pos:column="32"/></name></expr></argument>)<pos:position pos:line="33" pos:column="33"/></argument_list></call> <operator pos:line="33" pos:column="34">==<pos:position pos:line="33" pos:column="36"/></operator> <literal type="number" pos:line="33" pos:column="37">0<pos:position pos:line="33" pos:column="38"/></literal> <operator pos:line="33" pos:column="39">||<pos:position pos:line="33" pos:column="41"/></operator> <call><name pos:line="33" pos:column="42">poolLastChar<pos:position pos:line="33" pos:column="54"/></name><argument_list pos:line="33" pos:column="54">(<argument><expr><name pos:line="33" pos:column="55">pool<pos:position pos:line="33" pos:column="59"/></name></expr></argument>)<pos:position pos:line="33" pos:column="60"/></argument_list></call> <operator pos:line="33" pos:column="61">==<pos:position pos:line="33" pos:column="63"/></operator> <literal type="number" pos:line="33" pos:column="64">0x20<pos:position pos:line="33" pos:column="68"/></literal><operator pos:line="33" pos:column="68">)<pos:position pos:line="33" pos:column="69"/></operator></expr>)<pos:position pos:line="33" pos:column="70"/></condition><then pos:line="33" pos:column="70">
          <block type="pseudo"><break pos:line="34" pos:column="11">break;<pos:position pos:line="34" pos:column="17"/></break></block></then></if>
        <expr_stmt><expr><name pos:line="35" pos:column="9">n<pos:position pos:line="35" pos:column="10"/></name> <operator pos:line="35" pos:column="11">=<pos:position pos:line="35" pos:column="12"/></operator> <call><name pos:line="35" pos:column="13">XmlEncode<pos:position pos:line="35" pos:column="22"/></name><argument_list pos:line="35" pos:column="22">(<argument><expr><name pos:line="35" pos:column="23">n<pos:position pos:line="35" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="26">(<pos:position pos:line="35" pos:column="27"/></operator><name pos:line="35" pos:column="27">ICHAR<pos:position pos:line="35" pos:column="32"/></name> <operator pos:line="35" pos:column="33">*<pos:position pos:line="35" pos:column="34"/></operator><operator pos:line="35" pos:column="34">)<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="35">buf<pos:position pos:line="35" pos:column="38"/></name></expr></argument>)<pos:position pos:line="35" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="40"/></expr_stmt>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><operator pos:line="36" pos:column="13">!<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="14">n<pos:position pos:line="36" pos:column="15"/></name></expr>)<pos:position pos:line="36" pos:column="16"/></condition><then pos:line="36" pos:column="16"> <block pos:line="36" pos:column="17">{
          <if pos:line="37" pos:column="11">if <condition pos:line="37" pos:column="14">(<expr><name pos:line="37" pos:column="15">enc<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">==<pos:position pos:line="37" pos:column="21"/></operator> <name pos:line="37" pos:column="22">encoding<pos:position pos:line="37" pos:column="30"/></name></expr>)<pos:position pos:line="37" pos:column="31"/></condition><then pos:line="37" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="38" pos:column="13">eventPtr<pos:position pos:line="38" pos:column="21"/></name> <operator pos:line="38" pos:column="22">=<pos:position pos:line="38" pos:column="23"/></operator> <name pos:line="38" pos:column="24">ptr<pos:position pos:line="38" pos:column="27"/></name></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt></block></then></if>
          <return pos:line="39" pos:column="11">return <expr><name pos:line="39" pos:column="18">XML_ERROR_BAD_CHAR_REF<pos:position pos:line="39" pos:column="40"/></name></expr>;<pos:position pos:line="39" pos:column="41"/></return>
        }<pos:position pos:line="40" pos:column="10"/></block></then></if>
        <for pos:line="41" pos:column="9">for <control pos:line="41" pos:column="13">(<init><expr><name pos:line="41" pos:column="14">i<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <literal type="number" pos:line="41" pos:column="18">0<pos:position pos:line="41" pos:column="19"/></literal></expr>;<pos:position pos:line="41" pos:column="20"/></init> <condition><expr><name pos:line="41" pos:column="21">i<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">&lt;<pos:position pos:line="41" pos:column="27"/></operator> <name pos:line="41" pos:column="25">n<pos:position pos:line="41" pos:column="26"/></name></expr>;<pos:position pos:line="41" pos:column="27"/></condition> <incr><expr><name pos:line="41" pos:column="28">i<pos:position pos:line="41" pos:column="29"/></name><operator pos:line="41" pos:column="29">++<pos:position pos:line="41" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="32"/></control> <block pos:line="41" pos:column="33">{
          <if pos:line="42" pos:column="11">if <condition pos:line="42" pos:column="14">(<expr><operator pos:line="42" pos:column="15">!<pos:position pos:line="42" pos:column="16"/></operator><call><name pos:line="42" pos:column="16">poolAppendChar<pos:position pos:line="42" pos:column="30"/></name><argument_list pos:line="42" pos:column="30">(<argument><expr><name pos:line="42" pos:column="31">pool<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="37">buf<pos:position pos:line="42" pos:column="40"/></name><index pos:line="42" pos:column="40">[<expr><name pos:line="42" pos:column="41">i<pos:position pos:line="42" pos:column="42"/></name></expr>]<pos:position pos:line="42" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="42" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="45"/></condition><then pos:line="42" pos:column="45">
            <block type="pseudo"><return pos:line="43" pos:column="13">return <expr><name pos:line="43" pos:column="20">XML_ERROR_NO_MEMORY<pos:position pos:line="43" pos:column="39"/></name></expr>;<pos:position pos:line="43" pos:column="40"/></return></block></then></if>
        }<pos:position pos:line="44" pos:column="10"/></block></for>
      }<pos:position pos:line="45" pos:column="8"/></block>
      <break pos:line="46" pos:column="7">break;<pos:position pos:line="46" pos:column="13"/></break>
    <case pos:line="47" pos:column="5">case <expr><name pos:line="47" pos:column="10">XML_TOK_DATA_CHARS<pos:position pos:line="47" pos:column="28"/></name></expr>:<pos:position pos:line="47" pos:column="29"/></case>
      <if pos:line="48" pos:column="7">if <condition pos:line="48" pos:column="10">(<expr><operator pos:line="48" pos:column="11">!<pos:position pos:line="48" pos:column="12"/></operator><call><name pos:line="48" pos:column="12">poolAppend<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><name pos:line="48" pos:column="23">pool<pos:position pos:line="48" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="29">enc<pos:position pos:line="48" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="34">ptr<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="39">next<pos:position pos:line="48" pos:column="43"/></name></expr></argument>)<pos:position pos:line="48" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="45"/></condition><then pos:line="48" pos:column="45">
        <block type="pseudo"><return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">XML_ERROR_NO_MEMORY<pos:position pos:line="49" pos:column="35"/></name></expr>;<pos:position pos:line="49" pos:column="36"/></return></block></then></if>
      <break pos:line="50" pos:column="7">break;<pos:position pos:line="50" pos:column="13"/></break>
    <case pos:line="51" pos:column="5">case <expr><name pos:line="51" pos:column="10">XML_TOK_TRAILING_CR<pos:position pos:line="51" pos:column="29"/></name></expr>:<pos:position pos:line="51" pos:column="30"/></case>
      <expr_stmt><expr><name pos:line="52" pos:column="7">next<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <name pos:line="52" pos:column="14">ptr<pos:position pos:line="52" pos:column="17"/></name> <operator pos:line="52" pos:column="18">+<pos:position pos:line="52" pos:column="19"/></operator> <name><name pos:line="52" pos:column="20">enc<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">-&gt;<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="25">minBytesPerChar<pos:position pos:line="52" pos:column="40"/></name></name></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>
      <comment type="block" pos:line="53" pos:column="7">/* fall through */</comment>
    <case pos:line="54" pos:column="5">case <expr><name pos:line="54" pos:column="10">XML_TOK_ATTRIBUTE_VALUE_S<pos:position pos:line="54" pos:column="35"/></name></expr>:<pos:position pos:line="54" pos:column="36"/></case>
    <case pos:line="55" pos:column="5">case <expr><name pos:line="55" pos:column="10">XML_TOK_DATA_NEWLINE<pos:position pos:line="55" pos:column="30"/></name></expr>:<pos:position pos:line="55" pos:column="31"/></case>
      <if pos:line="56" pos:column="7">if <condition pos:line="56" pos:column="10">(<expr><operator pos:line="56" pos:column="11">!<pos:position pos:line="56" pos:column="12"/></operator><name pos:line="56" pos:column="12">isCdata<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">&amp;&amp;<pos:position pos:line="56" pos:column="30"/></operator> <operator pos:line="56" pos:column="23">(<pos:position pos:line="56" pos:column="24"/></operator><call><name pos:line="56" pos:column="24">poolLength<pos:position pos:line="56" pos:column="34"/></name><argument_list pos:line="56" pos:column="34">(<argument><expr><name pos:line="56" pos:column="35">pool<pos:position pos:line="56" pos:column="39"/></name></expr></argument>)<pos:position pos:line="56" pos:column="40"/></argument_list></call> <operator pos:line="56" pos:column="41">==<pos:position pos:line="56" pos:column="43"/></operator> <literal type="number" pos:line="56" pos:column="44">0<pos:position pos:line="56" pos:column="45"/></literal> <operator pos:line="56" pos:column="46">||<pos:position pos:line="56" pos:column="48"/></operator> <call><name pos:line="56" pos:column="49">poolLastChar<pos:position pos:line="56" pos:column="61"/></name><argument_list pos:line="56" pos:column="61">(<argument><expr><name pos:line="56" pos:column="62">pool<pos:position pos:line="56" pos:column="66"/></name></expr></argument>)<pos:position pos:line="56" pos:column="67"/></argument_list></call> <operator pos:line="56" pos:column="68">==<pos:position pos:line="56" pos:column="70"/></operator> <literal type="number" pos:line="56" pos:column="71">0x20<pos:position pos:line="56" pos:column="75"/></literal><operator pos:line="56" pos:column="75">)<pos:position pos:line="56" pos:column="76"/></operator></expr>)<pos:position pos:line="56" pos:column="77"/></condition><then pos:line="56" pos:column="77">
        <block type="pseudo"><break pos:line="57" pos:column="9">break;<pos:position pos:line="57" pos:column="15"/></break></block></then></if>
      <if pos:line="58" pos:column="7">if <condition pos:line="58" pos:column="10">(<expr><operator pos:line="58" pos:column="11">!<pos:position pos:line="58" pos:column="12"/></operator><call><name pos:line="58" pos:column="12">poolAppendChar<pos:position pos:line="58" pos:column="26"/></name><argument_list pos:line="58" pos:column="26">(<argument><expr><name pos:line="58" pos:column="27">pool<pos:position pos:line="58" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="33">0x20<pos:position pos:line="58" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="39"/></condition><then pos:line="58" pos:column="39">
        <block type="pseudo"><return pos:line="59" pos:column="9">return <expr><name pos:line="59" pos:column="16">XML_ERROR_NO_MEMORY<pos:position pos:line="59" pos:column="35"/></name></expr>;<pos:position pos:line="59" pos:column="36"/></return></block></then></if>
      <break pos:line="60" pos:column="7">break;<pos:position pos:line="60" pos:column="13"/></break>
    <case pos:line="61" pos:column="5">case <expr><name pos:line="61" pos:column="10">XML_TOK_ENTITY_REF<pos:position pos:line="61" pos:column="28"/></name></expr>:<pos:position pos:line="61" pos:column="29"/></case>
      <block pos:line="62" pos:column="7">{
        <decl_stmt><decl><type><specifier pos:line="63" pos:column="9">const<pos:position pos:line="63" pos:column="14"/></specifier> <name pos:line="63" pos:column="15">XML_Char<pos:position pos:line="63" pos:column="23"/></name> <modifier pos:line="63" pos:column="24">*<pos:position pos:line="63" pos:column="25"/></modifier></type><name pos:line="63" pos:column="25">name<pos:position pos:line="63" pos:column="29"/></name></decl>;<pos:position pos:line="63" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="64" pos:column="9">ENTITY<pos:position pos:line="64" pos:column="15"/></name> <modifier pos:line="64" pos:column="16">*<pos:position pos:line="64" pos:column="17"/></modifier></type><name pos:line="64" pos:column="17">entity<pos:position pos:line="64" pos:column="23"/></name></decl>;<pos:position pos:line="64" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="65" pos:column="9">char<pos:position pos:line="65" pos:column="13"/></name></type> <name pos:line="65" pos:column="14">checkEntityDecl<pos:position pos:line="65" pos:column="29"/></name></decl>;<pos:position pos:line="65" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="66" pos:column="9">XML_Char<pos:position pos:line="66" pos:column="17"/></name></type> <name pos:line="66" pos:column="18">ch<pos:position pos:line="66" pos:column="20"/></name> <init pos:line="66" pos:column="21">= <expr><operator pos:line="66" pos:column="23">(<pos:position pos:line="66" pos:column="24"/></operator><name pos:line="66" pos:column="24">XML_Char<pos:position pos:line="66" pos:column="32"/></name><operator pos:line="66" pos:column="32">)<pos:position pos:line="66" pos:column="33"/></operator> <call><name pos:line="66" pos:column="34">XmlPredefinedEntityName<pos:position pos:line="66" pos:column="57"/></name><argument_list pos:line="66" pos:column="57">(<argument><expr><name pos:line="66" pos:column="58">enc<pos:position pos:line="66" pos:column="61"/></name></expr></argument>,
                                              <argument><expr><name pos:line="67" pos:column="47">ptr<pos:position pos:line="67" pos:column="50"/></name> <operator pos:line="67" pos:column="51">+<pos:position pos:line="67" pos:column="52"/></operator> <name><name pos:line="67" pos:column="53">enc<pos:position pos:line="67" pos:column="56"/></name><operator pos:line="67" pos:column="56">-&gt;<pos:position pos:line="67" pos:column="61"/></operator><name pos:line="67" pos:column="58">minBytesPerChar<pos:position pos:line="67" pos:column="73"/></name></name></expr></argument>,
                                              <argument><expr><name pos:line="68" pos:column="47">next<pos:position pos:line="68" pos:column="51"/></name> <operator pos:line="68" pos:column="52">-<pos:position pos:line="68" pos:column="53"/></operator> <name><name pos:line="68" pos:column="54">enc<pos:position pos:line="68" pos:column="57"/></name><operator pos:line="68" pos:column="57">-&gt;<pos:position pos:line="68" pos:column="62"/></operator><name pos:line="68" pos:column="59">minBytesPerChar<pos:position pos:line="68" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="68" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="68" pos:column="76"/></decl_stmt>
        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">ch<pos:position pos:line="69" pos:column="15"/></name></expr>)<pos:position pos:line="69" pos:column="16"/></condition><then pos:line="69" pos:column="16"> <block pos:line="69" pos:column="17">{
          <if pos:line="70" pos:column="11">if <condition pos:line="70" pos:column="14">(<expr><operator pos:line="70" pos:column="15">!<pos:position pos:line="70" pos:column="16"/></operator><call><name pos:line="70" pos:column="16">poolAppendChar<pos:position pos:line="70" pos:column="30"/></name><argument_list pos:line="70" pos:column="30">(<argument><expr><name pos:line="70" pos:column="31">pool<pos:position pos:line="70" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="37">ch<pos:position pos:line="70" pos:column="39"/></name></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="41"/></condition><then pos:line="70" pos:column="41">
                <block type="pseudo"><return pos:line="71" pos:column="17">return <expr><name pos:line="71" pos:column="24">XML_ERROR_NO_MEMORY<pos:position pos:line="71" pos:column="43"/></name></expr>;<pos:position pos:line="71" pos:column="44"/></return></block></then></if>
          <break pos:line="72" pos:column="11">break;<pos:position pos:line="72" pos:column="17"/></break>
        }<pos:position pos:line="73" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="74" pos:column="9">name<pos:position pos:line="74" pos:column="13"/></name> <operator pos:line="74" pos:column="14">=<pos:position pos:line="74" pos:column="15"/></operator> <call><name pos:line="74" pos:column="16">poolStoreString<pos:position pos:line="74" pos:column="31"/></name><argument_list pos:line="74" pos:column="31">(<argument><expr><operator pos:line="74" pos:column="32">&amp;<pos:position pos:line="74" pos:column="37"/></operator><name pos:line="74" pos:column="33">temp2Pool<pos:position pos:line="74" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="44">enc<pos:position pos:line="74" pos:column="47"/></name></expr></argument>,
                               <argument><expr><name pos:line="75" pos:column="32">ptr<pos:position pos:line="75" pos:column="35"/></name> <operator pos:line="75" pos:column="36">+<pos:position pos:line="75" pos:column="37"/></operator> <name><name pos:line="75" pos:column="38">enc<pos:position pos:line="75" pos:column="41"/></name><operator pos:line="75" pos:column="41">-&gt;<pos:position pos:line="75" pos:column="46"/></operator><name pos:line="75" pos:column="43">minBytesPerChar<pos:position pos:line="75" pos:column="58"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="76" pos:column="32">next<pos:position pos:line="76" pos:column="36"/></name> <operator pos:line="76" pos:column="37">-<pos:position pos:line="76" pos:column="38"/></operator> <name><name pos:line="76" pos:column="39">enc<pos:position pos:line="76" pos:column="42"/></name><operator pos:line="76" pos:column="42">-&gt;<pos:position pos:line="76" pos:column="47"/></operator><name pos:line="76" pos:column="44">minBytesPerChar<pos:position pos:line="76" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="61"/></expr_stmt>
        <if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><operator pos:line="77" pos:column="13">!<pos:position pos:line="77" pos:column="14"/></operator><name pos:line="77" pos:column="14">name<pos:position pos:line="77" pos:column="18"/></name></expr>)<pos:position pos:line="77" pos:column="19"/></condition><then pos:line="77" pos:column="19">
          <block type="pseudo"><return pos:line="78" pos:column="11">return <expr><name pos:line="78" pos:column="18">XML_ERROR_NO_MEMORY<pos:position pos:line="78" pos:column="37"/></name></expr>;<pos:position pos:line="78" pos:column="38"/></return></block></then></if>
        <expr_stmt><expr><name pos:line="79" pos:column="9">entity<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">=<pos:position pos:line="79" pos:column="17"/></operator> <operator pos:line="79" pos:column="18">(<pos:position pos:line="79" pos:column="19"/></operator><name pos:line="79" pos:column="19">ENTITY<pos:position pos:line="79" pos:column="25"/></name> <operator pos:line="79" pos:column="26">*<pos:position pos:line="79" pos:column="27"/></operator><operator pos:line="79" pos:column="27">)<pos:position pos:line="79" pos:column="28"/></operator><call><name pos:line="79" pos:column="28">lookup<pos:position pos:line="79" pos:column="34"/></name><argument_list pos:line="79" pos:column="34">(<argument><expr><operator pos:line="79" pos:column="35">&amp;<pos:position pos:line="79" pos:column="40"/></operator><name><name pos:line="79" pos:column="36">dtd<pos:position pos:line="79" pos:column="39"/></name><operator pos:line="79" pos:column="39">-&gt;<pos:position pos:line="79" pos:column="44"/></operator><name pos:line="79" pos:column="41">generalEntities<pos:position pos:line="79" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="58">name<pos:position pos:line="79" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="64">0<pos:position pos:line="79" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">poolDiscard<pos:position pos:line="80" pos:column="20"/></name><argument_list pos:line="80" pos:column="20">(<argument><expr><operator pos:line="80" pos:column="21">&amp;<pos:position pos:line="80" pos:column="26"/></operator><name pos:line="80" pos:column="22">temp2Pool<pos:position pos:line="80" pos:column="31"/></name></expr></argument>)<pos:position pos:line="80" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt>
        <comment type="block" pos:line="81" pos:column="9">/* first, determine if a check for an existing declaration is needed;
           if yes, check that the entity exists, and that it is internal,
           otherwise call the default handler (if called from content)
        */</comment>
        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><name pos:line="85" pos:column="13">pool<pos:position pos:line="85" pos:column="17"/></name> <operator pos:line="85" pos:column="18">==<pos:position pos:line="85" pos:column="20"/></operator> <operator pos:line="85" pos:column="21">&amp;<pos:position pos:line="85" pos:column="26"/></operator><name><name pos:line="85" pos:column="22">dtd<pos:position pos:line="85" pos:column="25"/></name><operator pos:line="85" pos:column="25">-&gt;<pos:position pos:line="85" pos:column="30"/></operator><name pos:line="85" pos:column="27">pool<pos:position pos:line="85" pos:column="31"/></name></name></expr>)<pos:position pos:line="85" pos:column="32"/></condition><then pos:line="85" pos:column="32">  <comment type="block" pos:line="85" pos:column="34">/* are we called from prolog? */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="86" pos:column="11">checkEntityDecl<pos:position pos:line="86" pos:column="26"/></name> <operator pos:line="86" pos:column="27">=<pos:position pos:line="86" pos:column="28"/></operator>
<cpp:ifdef pos:line="87" pos:column="1">#<cpp:directive pos:line="87" pos:column="2">ifdef<pos:position pos:line="87" pos:column="7"/></cpp:directive> <name pos:line="87" pos:column="8">XML_DTD<pos:position pos:line="87" pos:column="15"/></name></cpp:ifdef>
              <name><name pos:line="88" pos:column="15">prologState<pos:position pos:line="88" pos:column="26"/></name><operator pos:line="88" pos:column="26">.<pos:position pos:line="88" pos:column="27"/></operator><name pos:line="88" pos:column="27">documentEntity<pos:position pos:line="88" pos:column="41"/></name></name> <operator pos:line="88" pos:column="42">&amp;&amp;<pos:position pos:line="88" pos:column="52"/></operator>
<cpp:endif pos:line="89" pos:column="1">#<cpp:directive pos:line="89" pos:column="2">endif<pos:position pos:line="89" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="89" pos:column="8">/* XML_DTD */</comment>
              <operator pos:line="90" pos:column="15">(<pos:position pos:line="90" pos:column="16"/></operator><ternary><condition><expr><name><name pos:line="90" pos:column="16">dtd<pos:position pos:line="90" pos:column="19"/></name><operator pos:line="90" pos:column="19">-&gt;<pos:position pos:line="90" pos:column="24"/></operator><name pos:line="90" pos:column="21">standalone<pos:position pos:line="90" pos:column="31"/></name></name></expr>
               ?<pos:position pos:line="91" pos:column="17"/></condition><then pos:line="91" pos:column="17"> <expr><operator pos:line="91" pos:column="18">!<pos:position pos:line="91" pos:column="19"/></operator><name pos:line="91" pos:column="19">openInternalEntities<pos:position pos:line="91" pos:column="39"/></name></expr>
               <pos:position pos:line="92" pos:column="16"/></then><else pos:line="92" pos:column="16">: <expr><operator pos:line="92" pos:column="18">!<pos:position pos:line="92" pos:column="19"/></operator><name><name pos:line="92" pos:column="19">dtd<pos:position pos:line="92" pos:column="22"/></name><operator pos:line="92" pos:column="22">-&gt;<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="24">hasParamEntityRefs<pos:position pos:line="92" pos:column="42"/></name></name></expr></else></ternary><operator pos:line="92" pos:column="42">)<pos:position pos:line="92" pos:column="43"/></operator></expr>;<pos:position pos:line="92" pos:column="44"/></expr_stmt></block></then>
        <else pos:line="93" pos:column="9">else <comment type="block" pos:line="93" pos:column="14">/* if (pool == &amp;tempPool): we are called from content */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="94" pos:column="11">checkEntityDecl<pos:position pos:line="94" pos:column="26"/></name> <operator pos:line="94" pos:column="27">=<pos:position pos:line="94" pos:column="28"/></operator> <operator pos:line="94" pos:column="29">!<pos:position pos:line="94" pos:column="30"/></operator><name><name pos:line="94" pos:column="30">dtd<pos:position pos:line="94" pos:column="33"/></name><operator pos:line="94" pos:column="33">-&gt;<pos:position pos:line="94" pos:column="38"/></operator><name pos:line="94" pos:column="35">hasParamEntityRefs<pos:position pos:line="94" pos:column="53"/></name></name> <operator pos:line="94" pos:column="54">||<pos:position pos:line="94" pos:column="56"/></operator> <name><name pos:line="94" pos:column="57">dtd<pos:position pos:line="94" pos:column="60"/></name><operator pos:line="94" pos:column="60">-&gt;<pos:position pos:line="94" pos:column="65"/></operator><name pos:line="94" pos:column="62">standalone<pos:position pos:line="94" pos:column="72"/></name></name></expr>;<pos:position pos:line="94" pos:column="73"/></expr_stmt></block></else></if>
        <if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><name pos:line="95" pos:column="13">checkEntityDecl<pos:position pos:line="95" pos:column="28"/></name></expr>)<pos:position pos:line="95" pos:column="29"/></condition><then pos:line="95" pos:column="29"> <block pos:line="95" pos:column="30">{
          <if pos:line="96" pos:column="11">if <condition pos:line="96" pos:column="14">(<expr><operator pos:line="96" pos:column="15">!<pos:position pos:line="96" pos:column="16"/></operator><name pos:line="96" pos:column="16">entity<pos:position pos:line="96" pos:column="22"/></name></expr>)<pos:position pos:line="96" pos:column="23"/></condition><then pos:line="96" pos:column="23">
            <block type="pseudo"><return pos:line="97" pos:column="13">return <expr><name pos:line="97" pos:column="20">XML_ERROR_UNDEFINED_ENTITY<pos:position pos:line="97" pos:column="46"/></name></expr>;<pos:position pos:line="97" pos:column="47"/></return></block></then>
          <elseif pos:line="98" pos:column="11">else <if pos:line="98" pos:column="16">if <condition pos:line="98" pos:column="19">(<expr><operator pos:line="98" pos:column="20">!<pos:position pos:line="98" pos:column="21"/></operator><name><name pos:line="98" pos:column="21">entity<pos:position pos:line="98" pos:column="27"/></name><operator pos:line="98" pos:column="27">-&gt;<pos:position pos:line="98" pos:column="32"/></operator><name pos:line="98" pos:column="29">is_internal<pos:position pos:line="98" pos:column="40"/></name></name></expr>)<pos:position pos:line="98" pos:column="41"/></condition><then pos:line="98" pos:column="41">
            <block type="pseudo"><return pos:line="99" pos:column="13">return <expr><name pos:line="99" pos:column="20">XML_ERROR_ENTITY_DECLARED_IN_PE<pos:position pos:line="99" pos:column="51"/></name></expr>;<pos:position pos:line="99" pos:column="52"/></return></block></then></if></elseif></if>
        }<pos:position pos:line="100" pos:column="10"/></block></then>
        <elseif pos:line="101" pos:column="9">else <if pos:line="101" pos:column="14">if <condition pos:line="101" pos:column="17">(<expr><operator pos:line="101" pos:column="18">!<pos:position pos:line="101" pos:column="19"/></operator><name pos:line="101" pos:column="19">entity<pos:position pos:line="101" pos:column="25"/></name></expr>)<pos:position pos:line="101" pos:column="26"/></condition><then pos:line="101" pos:column="26"> <block pos:line="101" pos:column="27">{
          <comment type="block" pos:line="102" pos:column="11">/* cannot report skipped entity here - see comments on
             skippedEntityHandler
          if (skippedEntityHandler)
            skippedEntityHandler(handlerArg, name, 0);
          */</comment>
          <if pos:line="107" pos:column="11">if <condition pos:line="107" pos:column="14">(<expr><operator pos:line="107" pos:column="15">(<pos:position pos:line="107" pos:column="16"/></operator><name pos:line="107" pos:column="16">pool<pos:position pos:line="107" pos:column="20"/></name> <operator pos:line="107" pos:column="21">==<pos:position pos:line="107" pos:column="23"/></operator> <operator pos:line="107" pos:column="24">&amp;<pos:position pos:line="107" pos:column="29"/></operator><name pos:line="107" pos:column="25">tempPool<pos:position pos:line="107" pos:column="33"/></name><operator pos:line="107" pos:column="33">)<pos:position pos:line="107" pos:column="34"/></operator> <operator pos:line="107" pos:column="35">&amp;&amp;<pos:position pos:line="107" pos:column="45"/></operator> <name pos:line="107" pos:column="38">defaultHandler<pos:position pos:line="107" pos:column="52"/></name></expr>)<pos:position pos:line="107" pos:column="53"/></condition><then pos:line="107" pos:column="53">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="108" pos:column="13">reportDefault<pos:position pos:line="108" pos:column="26"/></name><argument_list pos:line="108" pos:column="26">(<argument><expr><name pos:line="108" pos:column="27">parser<pos:position pos:line="108" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="35">enc<pos:position pos:line="108" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="40">ptr<pos:position pos:line="108" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="45">next<pos:position pos:line="108" pos:column="49"/></name></expr></argument>)<pos:position pos:line="108" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="51"/></expr_stmt></block></then></if>
          <break pos:line="109" pos:column="11">break;<pos:position pos:line="109" pos:column="17"/></break>
        }<pos:position pos:line="110" pos:column="10"/></block></then></if></elseif></if>
        <if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><name><name pos:line="111" pos:column="13">entity<pos:position pos:line="111" pos:column="19"/></name><operator pos:line="111" pos:column="19">-&gt;<pos:position pos:line="111" pos:column="24"/></operator><name pos:line="111" pos:column="21">open<pos:position pos:line="111" pos:column="25"/></name></name></expr>)<pos:position pos:line="111" pos:column="26"/></condition><then pos:line="111" pos:column="26"> <block pos:line="111" pos:column="27">{
          <if pos:line="112" pos:column="11">if <condition pos:line="112" pos:column="14">(<expr><name pos:line="112" pos:column="15">enc<pos:position pos:line="112" pos:column="18"/></name> <operator pos:line="112" pos:column="19">==<pos:position pos:line="112" pos:column="21"/></operator> <name pos:line="112" pos:column="22">encoding<pos:position pos:line="112" pos:column="30"/></name></expr>)<pos:position pos:line="112" pos:column="31"/></condition><then pos:line="112" pos:column="31">
            <block type="pseudo"><expr_stmt><expr><name pos:line="113" pos:column="13">eventPtr<pos:position pos:line="113" pos:column="21"/></name> <operator pos:line="113" pos:column="22">=<pos:position pos:line="113" pos:column="23"/></operator> <name pos:line="113" pos:column="24">ptr<pos:position pos:line="113" pos:column="27"/></name></expr>;<pos:position pos:line="113" pos:column="28"/></expr_stmt></block></then></if>
          <return pos:line="114" pos:column="11">return <expr><name pos:line="114" pos:column="18">XML_ERROR_RECURSIVE_ENTITY_REF<pos:position pos:line="114" pos:column="48"/></name></expr>;<pos:position pos:line="114" pos:column="49"/></return>
        }<pos:position pos:line="115" pos:column="10"/></block></then></if>
        <if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><name><name pos:line="116" pos:column="13">entity<pos:position pos:line="116" pos:column="19"/></name><operator pos:line="116" pos:column="19">-&gt;<pos:position pos:line="116" pos:column="24"/></operator><name pos:line="116" pos:column="21">notation<pos:position pos:line="116" pos:column="29"/></name></name></expr>)<pos:position pos:line="116" pos:column="30"/></condition><then pos:line="116" pos:column="30"> <block pos:line="116" pos:column="31">{
          <if pos:line="117" pos:column="11">if <condition pos:line="117" pos:column="14">(<expr><name pos:line="117" pos:column="15">enc<pos:position pos:line="117" pos:column="18"/></name> <operator pos:line="117" pos:column="19">==<pos:position pos:line="117" pos:column="21"/></operator> <name pos:line="117" pos:column="22">encoding<pos:position pos:line="117" pos:column="30"/></name></expr>)<pos:position pos:line="117" pos:column="31"/></condition><then pos:line="117" pos:column="31">
            <block type="pseudo"><macro><name pos:line="118" pos:column="13">eventPtr<pos:position pos:line="118" pos:column="21"/></name></macro></block></then></if></block></then></if></block></block></switch></block></for></block></function></unit>
