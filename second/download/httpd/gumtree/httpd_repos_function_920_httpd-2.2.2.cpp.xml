<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_920_httpd-2.2.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">open_entity<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">cache_handle_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">h<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">request_rec<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">r<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">key<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">cache_object_t<pos:position pos:line="3" pos:column="19"/></name> <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">obj<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

    <comment type="block" pos:line="5" pos:column="5">/* Look up entity keyed to 'url' */</comment>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">sconf<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">-&gt;<pos:position pos:line="6" pos:column="19"/></operator><name pos:line="6" pos:column="16">lock<pos:position pos:line="6" pos:column="20"/></name></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="7" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name><name pos:line="7" pos:column="31">sconf<pos:position pos:line="7" pos:column="36"/></name><operator pos:line="7" pos:column="36">-&gt;<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="38">lock<pos:position pos:line="7" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="9" pos:column="5">obj<pos:position pos:line="9" pos:column="8"/></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <operator pos:line="9" pos:column="11">(<pos:position pos:line="9" pos:column="12"/></operator><name pos:line="9" pos:column="12">cache_object_t<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">*<pos:position pos:line="9" pos:column="28"/></operator><operator pos:line="9" pos:column="28">)<pos:position pos:line="9" pos:column="29"/></operator> <call><name pos:line="9" pos:column="30">cache_find<pos:position pos:line="9" pos:column="40"/></name><argument_list pos:line="9" pos:column="40">(<argument><expr><name><name pos:line="9" pos:column="41">sconf<pos:position pos:line="9" pos:column="46"/></name><operator pos:line="9" pos:column="46">-&gt;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="48">cache_cache<pos:position pos:line="9" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="61">key<pos:position pos:line="9" pos:column="64"/></name></expr></argument>)<pos:position pos:line="9" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="66"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">obj<pos:position pos:line="10" pos:column="12"/></name></expr>)<pos:position pos:line="10" pos:column="13"/></condition><then pos:line="10" pos:column="13"> <block pos:line="10" pos:column="14">{
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name><name pos:line="11" pos:column="13">obj<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">complete<pos:position pos:line="11" pos:column="26"/></name></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <block pos:line="11" pos:column="28">{
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">request_rec<pos:position pos:line="12" pos:column="24"/></name> <modifier pos:line="12" pos:column="25">*<pos:position pos:line="12" pos:column="26"/></modifier></type><name pos:line="12" pos:column="26">rmain<pos:position pos:line="12" pos:column="31"/></name><init pos:line="12" pos:column="31">=<expr><name pos:line="12" pos:column="32">r<pos:position pos:line="12" pos:column="33"/></name></expr></init></decl>, <modifier pos:line="12" pos:column="35">*<pos:position pos:line="12" pos:column="36"/></modifier><decl><type ref="prev"/><name pos:line="12" pos:column="36">rtmp<pos:position pos:line="12" pos:column="40"/></name></decl>;<pos:position pos:line="12" pos:column="41"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">apr_atomic_inc32<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><operator pos:line="13" pos:column="30">&amp;<pos:position pos:line="13" pos:column="35"/></operator><name><name pos:line="13" pos:column="31">obj<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">refcount<pos:position pos:line="13" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
            <comment type="block" pos:line="14" pos:column="13">/* cache is worried about overall counts, not 'open' ones */</comment>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">cache_update<pos:position pos:line="15" pos:column="25"/></name><argument_list pos:line="15" pos:column="25">(<argument><expr><name><name pos:line="15" pos:column="26">sconf<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">cache_cache<pos:position pos:line="15" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="46">obj<pos:position pos:line="15" pos:column="49"/></name></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="51"/></expr_stmt>

            <comment type="block" pos:line="17" pos:column="13">/* If this is a subrequest, register the cleanup against
             * the main request. This will prevent the cache object
             * from being cleaned up from under the request after the
             * subrequest is destroyed.
             */</comment>
            <expr_stmt><expr><name pos:line="22" pos:column="13">rtmp<pos:position pos:line="22" pos:column="17"/></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">r<pos:position pos:line="22" pos:column="21"/></name></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
            <while pos:line="23" pos:column="13">while <condition pos:line="23" pos:column="19">(<expr><name pos:line="23" pos:column="20">rtmp<pos:position pos:line="23" pos:column="24"/></name></expr>)<pos:position pos:line="23" pos:column="25"/></condition> <block pos:line="23" pos:column="26">{
                <expr_stmt><expr><name pos:line="24" pos:column="17">rmain<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">rtmp<pos:position pos:line="24" pos:column="29"/></name></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><name pos:line="25" pos:column="17">rtmp<pos:position pos:line="25" pos:column="21"/></name> <operator pos:line="25" pos:column="22">=<pos:position pos:line="25" pos:column="23"/></operator> <name><name pos:line="25" pos:column="24">rmain<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">-&gt;<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="31">main<pos:position pos:line="25" pos:column="35"/></name></name></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="26" pos:column="14"/></block></while>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">apr_pool_cleanup_register<pos:position pos:line="27" pos:column="38"/></name><argument_list pos:line="27" pos:column="38">(<argument><expr><name><name pos:line="27" pos:column="39">rmain<pos:position pos:line="27" pos:column="44"/></name><operator pos:line="27" pos:column="44">-&gt;<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="46">pool<pos:position pos:line="27" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="52">obj<pos:position pos:line="27" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="57">decrement_refcount<pos:position pos:line="27" pos:column="75"/></name></expr></argument>,
                                      <argument><expr><name pos:line="28" pos:column="39">apr_pool_cleanup_null<pos:position pos:line="28" pos:column="60"/></name></expr></argument>)<pos:position pos:line="28" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then>
        <else pos:line="30" pos:column="9">else <block pos:line="30" pos:column="14">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">obj<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <name pos:line="31" pos:column="19">NULL<pos:position pos:line="31" pos:column="23"/></name></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></else></if>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name><name pos:line="35" pos:column="9">sconf<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">-&gt;<pos:position pos:line="35" pos:column="19"/></operator><name pos:line="35" pos:column="16">lock<pos:position pos:line="35" pos:column="20"/></name></name></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21"> <block pos:line="35" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name><name pos:line="36" pos:column="33">sconf<pos:position pos:line="36" pos:column="38"/></name><operator pos:line="36" pos:column="38">-&gt;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="40">lock<pos:position pos:line="36" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">!<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">obj<pos:position pos:line="39" pos:column="13"/></name></expr>)<pos:position pos:line="39" pos:column="14"/></condition><then pos:line="39" pos:column="14"> <block pos:line="39" pos:column="15">{
        <return pos:line="40" pos:column="9">return <expr><name pos:line="40" pos:column="16">DECLINED<pos:position pos:line="40" pos:column="24"/></name></expr>;<pos:position pos:line="40" pos:column="25"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="43" pos:column="5">/* Initialize the cache_handle */</comment>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">h<pos:position pos:line="44" pos:column="6"/></name><operator pos:line="44" pos:column="6">-&gt;<pos:position pos:line="44" pos:column="11"/></operator><name pos:line="44" pos:column="8">cache_obj<pos:position pos:line="44" pos:column="17"/></name></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <name pos:line="44" pos:column="20">obj<pos:position pos:line="44" pos:column="23"/></name></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">h<pos:position pos:line="45" pos:column="6"/></name><operator pos:line="45" pos:column="6">-&gt;<pos:position pos:line="45" pos:column="11"/></operator><name pos:line="45" pos:column="8">req_hdrs<pos:position pos:line="45" pos:column="16"/></name></name> <operator pos:line="45" pos:column="17">=<pos:position pos:line="45" pos:column="18"/></operator> <name pos:line="45" pos:column="19">NULL<pos:position pos:line="45" pos:column="23"/></name></expr>;<pos:position pos:line="45" pos:column="24"/></expr_stmt>  <comment type="block" pos:line="45" pos:column="26">/* Pick these up in recall_headers() */</comment>
    <return pos:line="46" pos:column="5">return <expr><name pos:line="46" pos:column="12">OK<pos:position pos:line="46" pos:column="14"/></name></expr>;<pos:position pos:line="46" pos:column="15"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
