<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_822_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">shmcb_init_memory<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(
    <parameter><decl><type><name pos:line="2" pos:column="5">server_rec<pos:position pos:line="2" pos:column="15"/></name> <modifier pos:line="2" pos:column="16">*<pos:position pos:line="2" pos:column="17"/></modifier></type><name pos:line="2" pos:column="17">s<pos:position pos:line="2" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="20">void<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">shm_mem<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name> <name pos:line="3" pos:column="14">int<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">shm_mem_size<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="31"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">SHMCBHeader<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">header<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">SHMCBQueue<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">queue<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">SHMCBCache<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">cache<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">int<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">temp<pos:position pos:line="8" pos:column="22"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="24">loop<pos:position pos:line="8" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="30">granularity<pos:position pos:line="8" pos:column="41"/></name></decl>;<pos:position pos:line="8" pos:column="42"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">ap_log_error<pos:position pos:line="10" pos:column="17"/></name><argument_list pos:line="10" pos:column="17">(<argument><expr><name pos:line="10" pos:column="18">APLOG_MARK<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">APLOG_DEBUG<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="43">0<pos:position pos:line="10" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="46">s<pos:position pos:line="10" pos:column="47"/></name></expr></argument>, 
                 <argument><expr><literal type="string" pos:line="11" pos:column="18">"entered shmcb_init_memory()"<pos:position pos:line="11" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* Calculate some sizes... */</comment>
    <expr_stmt><expr><name pos:line="14" pos:column="5">temp<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <sizeof pos:line="14" pos:column="12">sizeof<argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">SHMCBHeader<pos:position pos:line="14" pos:column="30"/></name></expr></argument>)<pos:position pos:line="14" pos:column="31"/></argument_list></sizeof></expr>;<pos:position pos:line="14" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/* If the segment is ridiculously too small, bail out */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">shm_mem_size<pos:position pos:line="17" pos:column="21"/></name> <operator pos:line="17" pos:column="22">&lt;<pos:position pos:line="17" pos:column="26"/></operator> <operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><literal type="number" pos:line="17" pos:column="25">2<pos:position pos:line="17" pos:column="26"/></literal><operator pos:line="17" pos:column="26">*<pos:position pos:line="17" pos:column="27"/></operator><name pos:line="17" pos:column="27">temp<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">)<pos:position pos:line="17" pos:column="32"/></operator></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33"> <block pos:line="17" pos:column="34">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">ap_log_error<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">APLOG_MARK<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="34">APLOG_ERR<pos:position pos:line="18" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="45">0<pos:position pos:line="18" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="48">s<pos:position pos:line="18" pos:column="49"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="19" pos:column="22">"shared memory segment too small"<pos:position pos:line="19" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="57"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">FALSE<pos:position pos:line="20" pos:column="21"/></name></expr>;<pos:position pos:line="20" pos:column="22"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="23" pos:column="5">/* Make temp the amount of memory without the header */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">temp<pos:position pos:line="24" pos:column="9"/></name> <operator pos:line="24" pos:column="10">=<pos:position pos:line="24" pos:column="11"/></operator> <name pos:line="24" pos:column="12">shm_mem_size<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">-<pos:position pos:line="24" pos:column="26"/></operator> <name pos:line="24" pos:column="27">temp<pos:position pos:line="24" pos:column="31"/></name></expr>;<pos:position pos:line="24" pos:column="32"/></expr_stmt>

    <comment type="block" pos:line="26" pos:column="5">/* Work on the basis that you need 10 bytes index for each session
     * (approx 150 bytes), which is to divide temp by 160 - and then
     * make sure we err on having too index space to burn even when
     * the cache is full, which is a lot less stupid than having
     * having not enough index space to utilise the whole cache!. */</comment>
    <expr_stmt><expr><name pos:line="31" pos:column="5">temp<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">/=<pos:position pos:line="31" pos:column="12"/></operator> <literal type="number" pos:line="31" pos:column="13">120<pos:position pos:line="31" pos:column="16"/></literal></expr>;<pos:position pos:line="31" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">ap_log_error<pos:position pos:line="32" pos:column="17"/></name><argument_list pos:line="32" pos:column="17">(<argument><expr><name pos:line="32" pos:column="18">APLOG_MARK<pos:position pos:line="32" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="30">APLOG_DEBUG<pos:position pos:line="32" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="43">0<pos:position pos:line="32" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="46">s<pos:position pos:line="32" pos:column="47"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="33" pos:column="18">"for %u bytes, recommending %u indexes"<pos:position pos:line="33" pos:column="57"/></literal></expr></argument>,
                 <argument><expr><name pos:line="34" pos:column="18">shm_mem_size<pos:position pos:line="34" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="32">temp<pos:position pos:line="34" pos:column="36"/></name></expr></argument>)<pos:position pos:line="34" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="38"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* We should divide these indexes evenly amongst the queues. Try
     * to get it so that there are roughly half the number of divisions
     * as there are indexes in each division. */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">granularity<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <literal type="number" pos:line="39" pos:column="19">256<pos:position pos:line="39" pos:column="22"/></literal></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
    <while pos:line="40" pos:column="5">while <condition pos:line="40" pos:column="11">(<expr><operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="13">temp<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">/<pos:position pos:line="40" pos:column="19"/></operator> <name pos:line="40" pos:column="20">granularity<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">)<pos:position pos:line="40" pos:column="32"/></operator> <operator pos:line="40" pos:column="33">&lt;<pos:position pos:line="40" pos:column="37"/></operator> <operator pos:line="40" pos:column="35">(<pos:position pos:line="40" pos:column="36"/></operator><literal type="number" pos:line="40" pos:column="36">2<pos:position pos:line="40" pos:column="37"/></literal> <operator pos:line="40" pos:column="38">*<pos:position pos:line="40" pos:column="39"/></operator> <name pos:line="40" pos:column="40">granularity<pos:position pos:line="40" pos:column="51"/></name><operator pos:line="40" pos:column="51">)<pos:position pos:line="40" pos:column="52"/></operator></expr>)<pos:position pos:line="40" pos:column="53"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="9">granularity<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">/=<pos:position pos:line="41" pos:column="23"/></operator> <literal type="number" pos:line="41" pos:column="24">2<pos:position pos:line="41" pos:column="25"/></literal></expr>;<pos:position pos:line="41" pos:column="26"/></expr_stmt></block></while>

    <comment type="block" pos:line="43" pos:column="5">/* So we have 'granularity' divisions, set 'temp' equal to the
     * number of indexes in each division. */</comment>
    <expr_stmt><expr><name pos:line="45" pos:column="5">temp<pos:position pos:line="45" pos:column="9"/></name> <operator pos:line="45" pos:column="10">/=<pos:position pos:line="45" pos:column="12"/></operator> <name pos:line="45" pos:column="13">granularity<pos:position pos:line="45" pos:column="24"/></name></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="47" pos:column="5">/* Too small? Bail ... */</comment>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">temp<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">&lt;<pos:position pos:line="48" pos:column="18"/></operator> <literal type="number" pos:line="48" pos:column="16">5<pos:position pos:line="48" pos:column="17"/></literal></expr>)<pos:position pos:line="48" pos:column="18"/></condition><then pos:line="48" pos:column="18"> <block pos:line="48" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">ap_log_error<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name pos:line="49" pos:column="22">APLOG_MARK<pos:position pos:line="49" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="34">APLOG_ERR<pos:position pos:line="49" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="45">0<pos:position pos:line="49" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="48">s<pos:position pos:line="49" pos:column="49"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="50" pos:column="22">"shared memory segment too small"<pos:position pos:line="50" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="57"/></expr_stmt>
        <return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">FALSE<pos:position pos:line="51" pos:column="21"/></name></expr>;<pos:position pos:line="51" pos:column="22"/></return>
    }<pos:position pos:line="52" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="54" pos:column="5">/* OK, we're sorted - from here on in, the return should be TRUE */</comment>
    <expr_stmt><expr><name pos:line="55" pos:column="5">header<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <operator pos:line="55" pos:column="14">(<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="15">SHMCBHeader<pos:position pos:line="55" pos:column="26"/></name> <operator pos:line="55" pos:column="27">*<pos:position pos:line="55" pos:column="28"/></operator><operator pos:line="55" pos:column="28">)<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="29">shm_mem<pos:position pos:line="55" pos:column="36"/></name></expr>;<pos:position pos:line="55" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="56" pos:column="5">header<pos:position pos:line="56" pos:column="11"/></name><operator pos:line="56" pos:column="11">-&gt;<pos:position pos:line="56" pos:column="16"/></operator><name pos:line="56" pos:column="13">division_mask<pos:position pos:line="56" pos:column="26"/></name></name> <operator pos:line="56" pos:column="27">=<pos:position pos:line="56" pos:column="28"/></operator> <call pos:line="56" pos:column="29">(<name pos:line="56" pos:column="30">unsigned<pos:position pos:line="56" pos:column="38"/></name> <name pos:line="56" pos:column="39">char<pos:position pos:line="56" pos:column="43"/></name>)<argument_list pos:line="56" pos:column="44">(<argument><expr><name pos:line="56" pos:column="45">granularity<pos:position pos:line="56" pos:column="56"/></name> <operator pos:line="56" pos:column="57">-<pos:position pos:line="56" pos:column="58"/></operator> <literal type="number" pos:line="56" pos:column="59">1<pos:position pos:line="56" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">header<pos:position pos:line="57" pos:column="11"/></name><operator pos:line="57" pos:column="11">-&gt;<pos:position pos:line="57" pos:column="16"/></operator><name pos:line="57" pos:column="13">division_offset<pos:position pos:line="57" pos:column="28"/></name></name> <operator pos:line="57" pos:column="29">=<pos:position pos:line="57" pos:column="30"/></operator> <sizeof pos:line="57" pos:column="31">sizeof<argument_list pos:line="57" pos:column="37">(<argument><expr><name pos:line="57" pos:column="38">SHMCBHeader<pos:position pos:line="57" pos:column="49"/></name></expr></argument>)<pos:position pos:line="57" pos:column="50"/></argument_list></sizeof></expr>;<pos:position pos:line="57" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="58" pos:column="5">header<pos:position pos:line="58" pos:column="11"/></name><operator pos:line="58" pos:column="11">-&gt;<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="13">index_num<pos:position pos:line="58" pos:column="22"/></name></name> <operator pos:line="58" pos:column="23">=<pos:position pos:line="58" pos:column="24"/></operator> <name pos:line="58" pos:column="25">temp<pos:position pos:line="58" pos:column="29"/></name></expr>;<pos:position pos:line="58" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="59" pos:column="5">header<pos:position pos:line="59" pos:column="11"/></name><operator pos:line="59" pos:column="11">-&gt;<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="13">index_offset<pos:position pos:line="59" pos:column="25"/></name></name> <operator pos:line="59" pos:column="26">=<pos:position pos:line="59" pos:column="27"/></operator> <operator pos:line="59" pos:column="28">(<pos:position pos:line="59" pos:column="29"/></operator><literal type="number" pos:line="59" pos:column="29">2<pos:position pos:line="59" pos:column="30"/></literal> <operator pos:line="59" pos:column="31">*<pos:position pos:line="59" pos:column="32"/></operator> sizeof<operator pos:line="59" pos:column="39">(<pos:position pos:line="59" pos:column="40"/></operator><name pos:line="59" pos:column="40">unsigned<pos:position pos:line="59" pos:column="48"/></name> <name pos:line="59" pos:column="49">int<pos:position pos:line="59" pos:column="52"/></name><operator pos:line="59" pos:column="52">)<pos:position pos:line="59" pos:column="53"/></operator><operator pos:line="59" pos:column="53">)<pos:position pos:line="59" pos:column="54"/></operator></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="60" pos:column="5">header<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">-&gt;<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="13">index_size<pos:position pos:line="60" pos:column="23"/></name></name> <operator pos:line="60" pos:column="24">=<pos:position pos:line="60" pos:column="25"/></operator> <sizeof pos:line="60" pos:column="26">sizeof<argument_list pos:line="60" pos:column="32">(<argument><expr><name pos:line="60" pos:column="33">SHMCBIndex<pos:position pos:line="60" pos:column="43"/></name></expr></argument>)<pos:position pos:line="60" pos:column="44"/></argument_list></sizeof></expr>;<pos:position pos:line="60" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="61" pos:column="5">header<pos:position pos:line="61" pos:column="11"/></name><operator pos:line="61" pos:column="11">-&gt;<pos:position pos:line="61" pos:column="16"/></operator><name pos:line="61" pos:column="13">queue_size<pos:position pos:line="61" pos:column="23"/></name></name> <operator pos:line="61" pos:column="24">=<pos:position pos:line="61" pos:column="25"/></operator> <name><name pos:line="61" pos:column="26">header<pos:position pos:line="61" pos:column="32"/></name><operator pos:line="61" pos:column="32">-&gt;<pos:position pos:line="61" pos:column="37"/></operator><name pos:line="61" pos:column="34">index_offset<pos:position pos:line="61" pos:column="46"/></name></name> <operator pos:line="61" pos:column="47">+<pos:position pos:line="61" pos:column="48"/></operator>
                         <operator pos:line="62" pos:column="26">(<pos:position pos:line="62" pos:column="27"/></operator><name><name pos:line="62" pos:column="27">header<pos:position pos:line="62" pos:column="33"/></name><operator pos:line="62" pos:column="33">-&gt;<pos:position pos:line="62" pos:column="38"/></operator><name pos:line="62" pos:column="35">index_num<pos:position pos:line="62" pos:column="44"/></name></name> <operator pos:line="62" pos:column="45">*<pos:position pos:line="62" pos:column="46"/></operator> <name><name pos:line="62" pos:column="47">header<pos:position pos:line="62" pos:column="53"/></name><operator pos:line="62" pos:column="53">-&gt;<pos:position pos:line="62" pos:column="58"/></operator><name pos:line="62" pos:column="55">index_size<pos:position pos:line="62" pos:column="65"/></name></name><operator pos:line="62" pos:column="65">)<pos:position pos:line="62" pos:column="66"/></operator></expr>;<pos:position pos:line="62" pos:column="67"/></expr_stmt>

    <comment type="block" pos:line="64" pos:column="5">/* Now calculate the space for each division */</comment>
    <expr_stmt><expr><name pos:line="65" pos:column="5">temp<pos:position pos:line="65" pos:column="9"/></name> <operator pos:line="65" pos:column="10">=<pos:position pos:line="65" pos:column="11"/></operator> <name pos:line="65" pos:column="12">shm_mem_size<pos:position pos:line="65" pos:column="24"/></name> <operator pos:line="65" pos:column="25">-<pos:position pos:line="65" pos:column="26"/></operator> <name><name pos:line="65" pos:column="27">header<pos:position pos:line="65" pos:column="33"/></name><operator pos:line="65" pos:column="33">-&gt;<pos:position pos:line="65" pos:column="38"/></operator><name pos:line="65" pos:column="35">division_offset<pos:position pos:line="65" pos:column="50"/></name></name></expr>;<pos:position pos:line="65" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="66" pos:column="5">header<pos:position pos:line="66" pos:column="11"/></name><operator pos:line="66" pos:column="11">-&gt;<pos:position pos:line="66" pos:column="16"/></operator><name pos:line="66" pos:column="13">division_size<pos:position pos:line="66" pos:column="26"/></name></name> <operator pos:line="66" pos:column="27">=<pos:position pos:line="66" pos:column="28"/></operator> <name pos:line="66" pos:column="29">temp<pos:position pos:line="66" pos:column="33"/></name> <operator pos:line="66" pos:column="34">/<pos:position pos:line="66" pos:column="35"/></operator> <name pos:line="66" pos:column="36">granularity<pos:position pos:line="66" pos:column="47"/></name></expr>;<pos:position pos:line="66" pos:column="48"/></expr_stmt>

    <comment type="block" pos:line="68" pos:column="5">/* Calculate the space left in each division for the cache */</comment>
    <expr_stmt><expr><name pos:line="69" pos:column="5">temp<pos:position pos:line="69" pos:column="9"/></name> <operator pos:line="69" pos:column="10">-=<pos:position pos:line="69" pos:column="12"/></operator> <name><name pos:line="69" pos:column="13">header<pos:position pos:line="69" pos:column="19"/></name><operator pos:line="69" pos:column="19">-&gt;<pos:position pos:line="69" pos:column="24"/></operator><name pos:line="69" pos:column="21">queue_size<pos:position pos:line="69" pos:column="31"/></name></name></expr>;<pos:position pos:line="69" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">header<pos:position pos:line="70" pos:column="11"/></name><operator pos:line="70" pos:column="11">-&gt;<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="13">cache_data_offset<pos:position pos:line="70" pos:column="30"/></name></name> <operator pos:line="70" pos:column="31">=<pos:position pos:line="70" pos:column="32"/></operator> <operator pos:line="70" pos:column="33">(<pos:position pos:line="70" pos:column="34"/></operator><literal type="number" pos:line="70" pos:column="34">2<pos:position pos:line="70" pos:column="35"/></literal> <operator pos:line="70" pos:column="36">*<pos:position pos:line="70" pos:column="37"/></operator> sizeof<operator pos:line="70" pos:column="44">(<pos:position pos:line="70" pos:column="45"/></operator><name pos:line="70" pos:column="45">unsigned<pos:position pos:line="70" pos:column="53"/></name> <name pos:line="70" pos:column="54">int<pos:position pos:line="70" pos:column="57"/></name><operator pos:line="70" pos:column="57">)<pos:position pos:line="70" pos:column="58"/></operator><operator pos:line="70" pos:column="58">)<pos:position pos:line="70" pos:column="59"/></operator></expr>;<pos:position pos:line="70" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">header<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">cache_data_size<pos:position pos:line="71" pos:column="28"/></name></name> <operator pos:line="71" pos:column="29">=<pos:position pos:line="71" pos:column="30"/></operator> <name><name pos:line="71" pos:column="31">header<pos:position pos:line="71" pos:column="37"/></name><operator pos:line="71" pos:column="37">-&gt;<pos:position pos:line="71" pos:column="42"/></operator><name pos:line="71" pos:column="39">division_size<pos:position pos:line="71" pos:column="52"/></name></name> <operator pos:line="71" pos:column="53">-<pos:position pos:line="71" pos:column="54"/></operator>
                              <name><name pos:line="72" pos:column="31">header<pos:position pos:line="72" pos:column="37"/></name><operator pos:line="72" pos:column="37">-&gt;<pos:position pos:line="72" pos:column="42"/></operator><name pos:line="72" pos:column="39">queue_size<pos:position pos:line="72" pos:column="49"/></name></name> <operator pos:line="72" pos:column="50">-<pos:position pos:line="72" pos:column="51"/></operator> <name><name pos:line="72" pos:column="52">header<pos:position pos:line="72" pos:column="58"/></name><operator pos:line="72" pos:column="58">-&gt;<pos:position pos:line="72" pos:column="63"/></operator><name pos:line="72" pos:column="60">cache_data_offset<pos:position pos:line="72" pos:column="77"/></name></name></expr>;<pos:position pos:line="72" pos:column="78"/></expr_stmt>

    <comment type="block" pos:line="74" pos:column="5">/* Output trace info */</comment>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">ap_log_error<pos:position pos:line="75" pos:column="17"/></name><argument_list pos:line="75" pos:column="17">(<argument><expr><name pos:line="75" pos:column="18">APLOG_MARK<pos:position pos:line="75" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="30">APLOG_DEBUG<pos:position pos:line="75" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="43">0<pos:position pos:line="75" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="46">s<pos:position pos:line="75" pos:column="47"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="76" pos:column="18">"shmcb_init_memory choices follow"<pos:position pos:line="76" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">ap_log_error<pos:position pos:line="77" pos:column="17"/></name><argument_list pos:line="77" pos:column="17">(<argument><expr><name pos:line="77" pos:column="18">APLOG_MARK<pos:position pos:line="77" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="30">APLOG_DEBUG<pos:position pos:line="77" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="43">0<pos:position pos:line="77" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="46">s<pos:position pos:line="77" pos:column="47"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="78" pos:column="18">"division_mask = 0x%02X"<pos:position pos:line="78" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="44">header<pos:position pos:line="78" pos:column="50"/></name><operator pos:line="78" pos:column="50">-&gt;<pos:position pos:line="78" pos:column="55"/></operator><name pos:line="78" pos:column="52">division_mask<pos:position pos:line="78" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">ap_log_error<pos:position pos:line="79" pos:column="17"/></name><argument_list pos:line="79" pos:column="17">(<argument><expr><name pos:line="79" pos:column="18">APLOG_MARK<pos:position pos:line="79" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="30">APLOG_DEBUG<pos:position pos:line="79" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="43">0<pos:position pos:line="79" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="46">s<pos:position pos:line="79" pos:column="47"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="80" pos:column="18">"division_offset = %u"<pos:position pos:line="80" pos:column="40"/></literal></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="42">header<pos:position pos:line="80" pos:column="48"/></name><operator pos:line="80" pos:column="48">-&gt;<pos:position pos:line="80" pos:column="53"/></operator><name pos:line="80" pos:column="50">division_offset<pos:position pos:line="80" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="67"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="81" pos:column="5">ap_log_error<pos:position pos:line="81" pos:column="17"/></name><argument_list pos:line="81" pos:column="17">(<argument><expr><name pos:line="81" pos:column="18">APLOG_MARK<pos:position pos:line="81" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="30">APLOG_DEBUG<pos:position pos:line="81" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="43">0<pos:position pos:line="81" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="46">s<pos:position pos:line="81" pos:column="47"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="82" pos:column="19">"division_size = %u"<pos:position pos:line="82" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="41">header<pos:position pos:line="82" pos:column="47"/></name><operator pos:line="82" pos:column="47">-&gt;<pos:position pos:line="82" pos:column="52"/></operator><name pos:line="82" pos:column="49">division_size<pos:position pos:line="82" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="64"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">ap_log_error<pos:position pos:line="83" pos:column="17"/></name><argument_list pos:line="83" pos:column="17">(<argument><expr><name pos:line="83" pos:column="18">APLOG_MARK<pos:position pos:line="83" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="30">APLOG_DEBUG<pos:position pos:line="83" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="83" pos:column="43">0<pos:position pos:line="83" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="46">s<pos:position pos:line="83" pos:column="47"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="84" pos:column="19">"queue_size = %u"<pos:position pos:line="84" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="38">header<pos:position pos:line="84" pos:column="44"/></name><operator pos:line="84" pos:column="44">-&gt;<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="46">queue_size<pos:position pos:line="84" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">ap_log_error<pos:position pos:line="85" pos:column="17"/></name><argument_list pos:line="85" pos:column="17">(<argument><expr><name pos:line="85" pos:column="18">APLOG_MARK<pos:position pos:line="85" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="30">APLOG_DEBUG<pos:position pos:line="85" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="43">0<pos:position pos:line="85" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="46">s<pos:position pos:line="85" pos:column="47"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="86" pos:column="19">"index_num = %u"<pos:position pos:line="86" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="37">header<pos:position pos:line="86" pos:column="43"/></name><operator pos:line="86" pos:column="43">-&gt;<pos:position pos:line="86" pos:column="48"/></operator><name pos:line="86" pos:column="45">index_num<pos:position pos:line="86" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">ap_log_error<pos:position pos:line="87" pos:column="17"/></name><argument_list pos:line="87" pos:column="17">(<argument><expr><name pos:line="87" pos:column="18">APLOG_MARK<pos:position pos:line="87" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="30">APLOG_DEBUG<pos:position pos:line="87" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="43">0<pos:position pos:line="87" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="46">s<pos:position pos:line="87" pos:column="47"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="88" pos:column="19">"index_offset = %u"<pos:position pos:line="88" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="40">header<pos:position pos:line="88" pos:column="46"/></name><operator pos:line="88" pos:column="46">-&gt;<pos:position pos:line="88" pos:column="51"/></operator><name pos:line="88" pos:column="48">index_offset<pos:position pos:line="88" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">ap_log_error<pos:position pos:line="89" pos:column="17"/></name><argument_list pos:line="89" pos:column="17">(<argument><expr><name pos:line="89" pos:column="18">APLOG_MARK<pos:position pos:line="89" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="30">APLOG_DEBUG<pos:position pos:line="89" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="43">0<pos:position pos:line="89" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="46">s<pos:position pos:line="89" pos:column="47"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="90" pos:column="19">"index_size = %u"<pos:position pos:line="90" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="38">header<pos:position pos:line="90" pos:column="44"/></name><operator pos:line="90" pos:column="44">-&gt;<pos:position pos:line="90" pos:column="49"/></operator><name pos:line="90" pos:column="46">index_size<pos:position pos:line="90" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="91" pos:column="5">ap_log_error<pos:position pos:line="91" pos:column="17"/></name><argument_list pos:line="91" pos:column="17">(<argument><expr><name pos:line="91" pos:column="18">APLOG_MARK<pos:position pos:line="91" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="30">APLOG_DEBUG<pos:position pos:line="91" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="43">0<pos:position pos:line="91" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="46">s<pos:position pos:line="91" pos:column="47"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="92" pos:column="19">"cache_data_offset = %u"<pos:position pos:line="92" pos:column="43"/></literal></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="45">header<pos:position pos:line="92" pos:column="51"/></name><operator pos:line="92" pos:column="51">-&gt;<pos:position pos:line="92" pos:column="56"/></operator><name pos:line="92" pos:column="53">cache_data_offset<pos:position pos:line="92" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="93" pos:column="5">ap_log_error<pos:position pos:line="93" pos:column="17"/></name><argument_list pos:line="93" pos:column="17">(<argument><expr><name pos:line="93" pos:column="18">APLOG_MARK<pos:position pos:line="93" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="30">APLOG_DEBUG<pos:position pos:line="93" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="43">0<pos:position pos:line="93" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="46">s<pos:position pos:line="93" pos:column="47"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="94" pos:column="19">"cache_data_size = %u"<pos:position pos:line="94" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="43">header<pos:position pos:line="94" pos:column="49"/></name><operator pos:line="94" pos:column="49">-&gt;<pos:position pos:line="94" pos:column="54"/></operator><name pos:line="94" pos:column="51">cache_data_size<pos:position pos:line="94" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="68"/></expr_stmt>

    <comment type="block" pos:line="96" pos:column="5">/* The header is done, make the caches empty */</comment>
    <for pos:line="97" pos:column="5">for <control pos:line="97" pos:column="9">(<init><expr><name pos:line="97" pos:column="10">loop<pos:position pos:line="97" pos:column="14"/></name> <operator pos:line="97" pos:column="15">=<pos:position pos:line="97" pos:column="16"/></operator> <literal type="number" pos:line="97" pos:column="17">0<pos:position pos:line="97" pos:column="18"/></literal></expr>;<pos:position pos:line="97" pos:column="19"/></init> <condition><expr><name pos:line="97" pos:column="20">loop<pos:position pos:line="97" pos:column="24"/></name> <operator pos:line="97" pos:column="25">&lt;<pos:position pos:line="97" pos:column="29"/></operator> <name pos:line="97" pos:column="27">granularity<pos:position pos:line="97" pos:column="38"/></name></expr>;<pos:position pos:line="97" pos:column="39"/></condition> <incr><expr><name pos:line="97" pos:column="40">loop<pos:position pos:line="97" pos:column="44"/></name><operator pos:line="97" pos:column="44">++<pos:position pos:line="97" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="97" pos:column="47"/></control> <block pos:line="97" pos:column="48">{
        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><operator pos:line="98" pos:column="13">!<pos:position pos:line="98" pos:column="14"/></operator><call><name pos:line="98" pos:column="14">shmcb_get_division<pos:position pos:line="98" pos:column="32"/></name><argument_list pos:line="98" pos:column="32">(<argument><expr><name pos:line="98" pos:column="33">header<pos:position pos:line="98" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="98" pos:column="41">&amp;<pos:position pos:line="98" pos:column="46"/></operator><name pos:line="98" pos:column="42">queue<pos:position pos:line="98" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="98" pos:column="49">&amp;<pos:position pos:line="98" pos:column="54"/></operator><name pos:line="98" pos:column="50">cache<pos:position pos:line="98" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="57">loop<pos:position pos:line="98" pos:column="61"/></name></expr></argument>)<pos:position pos:line="98" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="63"/></condition><then pos:line="98" pos:column="63">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="99" pos:column="13">ap_log_error<pos:position pos:line="99" pos:column="25"/></name><argument_list pos:line="99" pos:column="25">(<argument><expr><name pos:line="99" pos:column="26">APLOG_MARK<pos:position pos:line="99" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="38">APLOG_ERR<pos:position pos:line="99" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="99" pos:column="49">0<pos:position pos:line="99" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="52">s<pos:position pos:line="99" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="55">"shmcb_init_memory, "<pos:position pos:line="99" pos:column="76"/></literal> <literal type="string" pos:line="99" pos:column="77">"internal error"<pos:position pos:line="99" pos:column="93"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="95"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="100" pos:column="9">shmcb_set_safe_uint<pos:position pos:line="100" pos:column="28"/></name><argument_list pos:line="100" pos:column="28">(<argument><expr><name><name pos:line="100" pos:column="29">cache<pos:position pos:line="100" pos:column="34"/></name><operator pos:line="100" pos:column="34">.<pos:position pos:line="100" pos:column="35"/></operator><name pos:line="100" pos:column="35">first_pos<pos:position pos:line="100" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="100" pos:column="46">0<pos:position pos:line="100" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">shmcb_set_safe_uint<pos:position pos:line="101" pos:column="28"/></name><argument_list pos:line="101" pos:column="28">(<argument><expr><name><name pos:line="101" pos:column="29">cache<pos:position pos:line="101" pos:column="34"/></name><operator pos:line="101" pos:column="34">.<pos:position pos:line="101" pos:column="35"/></operator><name pos:line="101" pos:column="35">pos_count<pos:position pos:line="101" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="46">0<pos:position pos:line="101" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">shmcb_set_safe_uint<pos:position pos:line="102" pos:column="28"/></name><argument_list pos:line="102" pos:column="28">(<argument><expr><name><name pos:line="102" pos:column="29">queue<pos:position pos:line="102" pos:column="34"/></name><operator pos:line="102" pos:column="34">.<pos:position pos:line="102" pos:column="35"/></operator><name pos:line="102" pos:column="35">first_pos<pos:position pos:line="102" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="102" pos:column="46">0<pos:position pos:line="102" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="103" pos:column="9">shmcb_set_safe_uint<pos:position pos:line="103" pos:column="28"/></name><argument_list pos:line="103" pos:column="28">(<argument><expr><name><name pos:line="103" pos:column="29">queue<pos:position pos:line="103" pos:column="34"/></name><operator pos:line="103" pos:column="34">.<pos:position pos:line="103" pos:column="35"/></operator><name pos:line="103" pos:column="35">pos_count<pos:position pos:line="103" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="46">0<pos:position pos:line="103" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="104" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="106" pos:column="5">ap_log_error<pos:position pos:line="106" pos:column="17"/></name><argument_list pos:line="106" pos:column="17">(<argument><expr><name pos:line="106" pos:column="18">APLOG_MARK<pos:position pos:line="106" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="30">APLOG_DEBUG<pos:position pos:line="106" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="43">0<pos:position pos:line="106" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="46">s<pos:position pos:line="106" pos:column="47"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="107" pos:column="18">"leaving shmcb_init_memory()"<pos:position pos:line="107" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="49"/></expr_stmt>
    <return pos:line="108" pos:column="5">return <expr><name pos:line="108" pos:column="12">TRUE<pos:position pos:line="108" pos:column="16"/></name></expr>;<pos:position pos:line="108" pos:column="17"/></return>
}<pos:position pos:line="109" pos:column="2"/></block></function></unit>
