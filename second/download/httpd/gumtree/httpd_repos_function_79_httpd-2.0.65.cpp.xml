<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_79_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">test<pos:position pos:line="1" pos:column="17"/></name><parameter_list pos:line="1" pos:column="17">(<parameter><decl><type><name pos:line="1" pos:column="18">void<pos:position pos:line="1" pos:column="22"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="23"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_time_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">now<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_int16_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">rv<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">long<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">i<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">status<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
<cpp:ifdef pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">ifdef<pos:position pos:line="7" pos:column="7"/></cpp:directive> <name pos:line="7" pos:column="8">NOT_ASCII<pos:position pos:line="7" pos:column="17"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">inbytes_left<pos:position pos:line="8" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="30">outbytes_left<pos:position pos:line="8" pos:column="43"/></name></decl>;<pos:position pos:line="8" pos:column="44"/></decl_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">isproxy<pos:position pos:line="11" pos:column="16"/></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <block pos:line="11" pos:column="18">{
	<expr_stmt><expr><name pos:line="12" pos:column="9">connecthost<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <call><name pos:line="12" pos:column="23">apr_pstrdup<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">cntxt<pos:position pos:line="12" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="42">proxyhost<pos:position pos:line="12" pos:column="51"/></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name pos:line="13" pos:column="9">connectport<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">proxyport<pos:position pos:line="13" pos:column="32"/></name></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then>
    <else pos:line="15" pos:column="5">else <block pos:line="15" pos:column="10">{
	<expr_stmt><expr><name pos:line="16" pos:column="9">connecthost<pos:position pos:line="16" pos:column="20"/></name> <operator pos:line="16" pos:column="21">=<pos:position pos:line="16" pos:column="22"/></operator> <call><name pos:line="16" pos:column="23">apr_pstrdup<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">cntxt<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">hostname<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name pos:line="17" pos:column="9">connectport<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">port<pos:position pos:line="17" pos:column="27"/></name></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></else></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">use_html<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19"> <block pos:line="20" pos:column="20">{
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">printf<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="string" pos:line="21" pos:column="16">"Benchmarking %s "<pos:position pos:line="21" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="36">hostname<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
	<if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name pos:line="22" pos:column="13">isproxy<pos:position pos:line="22" pos:column="20"/></name></expr>)<pos:position pos:line="22" pos:column="21"/></condition><then pos:line="22" pos:column="21">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="13">printf<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><literal type="string" pos:line="23" pos:column="20">"[through %s:%d] "<pos:position pos:line="23" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="40">proxyhost<pos:position pos:line="23" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="51">proxyport<pos:position pos:line="23" pos:column="60"/></name></expr></argument>)<pos:position pos:line="23" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="62"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">printf<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><literal type="string" pos:line="24" pos:column="16">"(be patient)%s"<pos:position pos:line="24" pos:column="32"/></literal></expr></argument>,
	       <argument><expr><operator pos:line="25" pos:column="16">(<pos:position pos:line="25" pos:column="17"/></operator><ternary><condition><expr><name pos:line="25" pos:column="17">heartbeatres<pos:position pos:line="25" pos:column="29"/></name></expr> ?<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31"> <expr><literal type="string" pos:line="25" pos:column="32">"\n"<pos:position pos:line="25" pos:column="36"/></literal></expr> <pos:position pos:line="25" pos:column="37"/></then><else pos:line="25" pos:column="37">: <expr><literal type="string" pos:line="25" pos:column="39">"..."<pos:position pos:line="25" pos:column="44"/></literal></expr></else></ternary><operator pos:line="25" pos:column="44">)<pos:position pos:line="25" pos:column="45"/></operator></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="47"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">fflush<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">stdout<pos:position pos:line="26" pos:column="22"/></name></expr></argument>)<pos:position pos:line="26" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="29" pos:column="5">now<pos:position pos:line="29" pos:column="8"/></name> <operator pos:line="29" pos:column="9">=<pos:position pos:line="29" pos:column="10"/></operator> <call><name pos:line="29" pos:column="11">apr_time_now<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">()<pos:position pos:line="29" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>

    <expr_stmt><expr><name pos:line="31" pos:column="5">con<pos:position pos:line="31" pos:column="8"/></name> <operator pos:line="31" pos:column="9">=<pos:position pos:line="31" pos:column="10"/></operator> <call><name pos:line="31" pos:column="11">calloc<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">concurrency<pos:position pos:line="31" pos:column="29"/></name> <operator pos:line="31" pos:column="30">*<pos:position pos:line="31" pos:column="31"/></operator> <sizeof pos:line="31" pos:column="32">sizeof<argument_list pos:line="31" pos:column="38">(<argument><expr pos:line="31" pos:column="39">struct <name pos:line="31" pos:column="46">connection<pos:position pos:line="31" pos:column="56"/></name></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="59">1<pos:position pos:line="31" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="62"/></expr_stmt>
    
    <expr_stmt><expr><name pos:line="33" pos:column="5">stats<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <call><name pos:line="33" pos:column="13">calloc<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">requests<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">*<pos:position pos:line="33" pos:column="30"/></operator> <sizeof pos:line="33" pos:column="31">sizeof<argument_list pos:line="33" pos:column="37">(<argument><expr pos:line="33" pos:column="38">struct <name pos:line="33" pos:column="45">data<pos:position pos:line="33" pos:column="49"/></name></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="52">1<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>

    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">(<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">status<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <call><name pos:line="35" pos:column="19">apr_pollset_create<pos:position pos:line="35" pos:column="37"/></name><argument_list pos:line="35" pos:column="37">(<argument><expr><operator pos:line="35" pos:column="38">&amp;<pos:position pos:line="35" pos:column="43"/></operator><name pos:line="35" pos:column="39">readbits<pos:position pos:line="35" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="49">concurrency<pos:position pos:line="35" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="62">cntxt<pos:position pos:line="35" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="69">0<pos:position pos:line="35" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="71"/></argument_list></call><operator pos:line="35" pos:column="71">)<pos:position pos:line="35" pos:column="72"/></operator> <operator pos:line="35" pos:column="73">!=<pos:position pos:line="35" pos:column="75"/></operator> <name pos:line="35" pos:column="76">APR_SUCCESS<pos:position pos:line="35" pos:column="87"/></name></expr>)<pos:position pos:line="35" pos:column="88"/></condition><then pos:line="35" pos:column="88"> <block pos:line="35" pos:column="89">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">apr_err<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><literal type="string" pos:line="36" pos:column="17">"apr_pollset_create failed"<pos:position pos:line="36" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="46">status<pos:position pos:line="36" pos:column="52"/></name></expr></argument>)<pos:position pos:line="36" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="39" pos:column="5">/* setup request */</comment>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">posting<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">&lt;=<pos:position pos:line="40" pos:column="22"/></operator> <literal type="number" pos:line="40" pos:column="20">0<pos:position pos:line="40" pos:column="21"/></literal></expr>)<pos:position pos:line="40" pos:column="22"/></condition><then pos:line="40" pos:column="22"> <block pos:line="40" pos:column="23">{
	<expr_stmt><expr><call><name pos:line="41" pos:column="9">sprintf<pos:position pos:line="41" pos:column="16"/></name><argument_list pos:line="41" pos:column="16">(<argument><expr><name pos:line="41" pos:column="17">request<pos:position pos:line="41" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="26">"%s %s HTTP/1.0\r\n"<pos:position pos:line="41" pos:column="46"/></literal>
		<literal type="string" pos:line="42" pos:column="17">"User-Agent: ApacheBench/%s\r\n"<pos:position pos:line="42" pos:column="49"/></literal>
		<literal type="string" pos:line="43" pos:column="17">"%s"<pos:position pos:line="43" pos:column="21"/></literal> <literal type="string" pos:line="43" pos:column="22">"%s"<pos:position pos:line="43" pos:column="26"/></literal> <literal type="string" pos:line="43" pos:column="27">"%s"<pos:position pos:line="43" pos:column="31"/></literal>
		<literal type="string" pos:line="44" pos:column="17">"Host: %s%s\r\n"<pos:position pos:line="44" pos:column="33"/></literal>
		<literal type="string" pos:line="45" pos:column="17">"Accept: */*\r\n"<pos:position pos:line="45" pos:column="34"/></literal>
		<literal type="string" pos:line="46" pos:column="17">"%s"<pos:position pos:line="46" pos:column="21"/></literal> <literal type="string" pos:line="46" pos:column="22">"\r\n"<pos:position pos:line="46" pos:column="28"/></literal></expr></argument>,
		<argument><expr><ternary><condition><expr><operator pos:line="47" pos:column="17">(<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="18">posting<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">==<pos:position pos:line="47" pos:column="28"/></operator> <literal type="number" pos:line="47" pos:column="29">0<pos:position pos:line="47" pos:column="30"/></literal><operator pos:line="47" pos:column="30">)<pos:position pos:line="47" pos:column="31"/></operator></expr> ?<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33"> <expr><literal type="string" pos:line="47" pos:column="34">"GET"<pos:position pos:line="47" pos:column="39"/></literal></expr> <pos:position pos:line="47" pos:column="40"/></then><else pos:line="47" pos:column="40">: <expr><literal type="string" pos:line="47" pos:column="42">"HEAD"<pos:position pos:line="47" pos:column="48"/></literal></expr></else></ternary></expr></argument>,
		<argument><expr><ternary><condition><expr><operator pos:line="48" pos:column="17">(<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="18">isproxy<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">)<pos:position pos:line="48" pos:column="26"/></operator></expr> ?<pos:position pos:line="48" pos:column="28"/></condition><then pos:line="48" pos:column="28"> <expr><name pos:line="48" pos:column="29">fullurl<pos:position pos:line="48" pos:column="36"/></name></expr> <pos:position pos:line="48" pos:column="37"/></then><else pos:line="48" pos:column="37">: <expr><name pos:line="48" pos:column="39">path<pos:position pos:line="48" pos:column="43"/></name></expr></else></ternary></expr></argument>,
		<argument><expr><name pos:line="49" pos:column="17">AP_AB_BASEREVISION<pos:position pos:line="49" pos:column="35"/></name></expr></argument>,
		<argument><expr><ternary><condition><expr><name pos:line="50" pos:column="17">keepalive<pos:position pos:line="50" pos:column="26"/></name></expr> ?<pos:position pos:line="50" pos:column="28"/></condition><then pos:line="50" pos:column="28"> <expr><literal type="string" pos:line="50" pos:column="29">"Connection: Keep-Alive\r\n"<pos:position pos:line="50" pos:column="57"/></literal></expr> <pos:position pos:line="50" pos:column="58"/></then><else pos:line="50" pos:column="58">: <expr><literal type="string" pos:line="50" pos:column="60">""<pos:position pos:line="50" pos:column="62"/></literal></expr></else></ternary></expr></argument>,
		<argument><expr><name pos:line="51" pos:column="17">cookie<pos:position pos:line="51" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="25">auth<pos:position pos:line="51" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="31">host_field<pos:position pos:line="51" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="43">colonhost<pos:position pos:line="51" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="54">hdrs<pos:position pos:line="51" pos:column="58"/></name></expr></argument>)<pos:position pos:line="51" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then>
    <else pos:line="53" pos:column="5">else <block pos:line="53" pos:column="10">{
	<expr_stmt><expr><call><name pos:line="54" pos:column="9">sprintf<pos:position pos:line="54" pos:column="16"/></name><argument_list pos:line="54" pos:column="16">(<argument><expr><name pos:line="54" pos:column="17">request<pos:position pos:line="54" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="26">"POST %s HTTP/1.0\r\n"<pos:position pos:line="54" pos:column="48"/></literal>
		<literal type="string" pos:line="55" pos:column="17">"User-Agent: ApacheBench/%s\r\n"<pos:position pos:line="55" pos:column="49"/></literal>
		<literal type="string" pos:line="56" pos:column="17">"%s"<pos:position pos:line="56" pos:column="21"/></literal> <literal type="string" pos:line="56" pos:column="22">"%s"<pos:position pos:line="56" pos:column="26"/></literal> <literal type="string" pos:line="56" pos:column="27">"%s"<pos:position pos:line="56" pos:column="31"/></literal>
		<literal type="string" pos:line="57" pos:column="17">"Host: %s%s\r\n"<pos:position pos:line="57" pos:column="33"/></literal>
		<literal type="string" pos:line="58" pos:column="17">"Accept: */*\r\n"<pos:position pos:line="58" pos:column="34"/></literal>
		<literal type="string" pos:line="59" pos:column="17">"Content-length: %"<pos:position pos:line="59" pos:column="36"/></literal> <name pos:line="59" pos:column="37">APR_SIZE_T_FMT<pos:position pos:line="59" pos:column="51"/></name> <literal type="string" pos:line="59" pos:column="52">"\r\n"<pos:position pos:line="59" pos:column="58"/></literal>
		<literal type="string" pos:line="60" pos:column="17">"Content-type: %s\r\n"<pos:position pos:line="60" pos:column="39"/></literal>
		<literal type="string" pos:line="61" pos:column="17">"%s"<pos:position pos:line="61" pos:column="21"/></literal>
		<literal type="string" pos:line="62" pos:column="17">"\r\n"<pos:position pos:line="62" pos:column="23"/></literal></expr></argument>,
		<argument><expr><ternary><condition><expr><operator pos:line="63" pos:column="17">(<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="18">isproxy<pos:position pos:line="63" pos:column="25"/></name><operator pos:line="63" pos:column="25">)<pos:position pos:line="63" pos:column="26"/></operator></expr> ?<pos:position pos:line="63" pos:column="28"/></condition><then pos:line="63" pos:column="28"> <expr><name pos:line="63" pos:column="29">fullurl<pos:position pos:line="63" pos:column="36"/></name></expr> <pos:position pos:line="63" pos:column="37"/></then><else pos:line="63" pos:column="37">: <expr><name pos:line="63" pos:column="39">path<pos:position pos:line="63" pos:column="43"/></name></expr></else></ternary></expr></argument>,
		<argument><expr><name pos:line="64" pos:column="17">AP_AB_BASEREVISION<pos:position pos:line="64" pos:column="35"/></name></expr></argument>,
		<argument><expr><ternary><condition><expr><name pos:line="65" pos:column="17">keepalive<pos:position pos:line="65" pos:column="26"/></name></expr> ?<pos:position pos:line="65" pos:column="28"/></condition><then pos:line="65" pos:column="28"> <expr><literal type="string" pos:line="65" pos:column="29">"Connection: Keep-Alive\r\n"<pos:position pos:line="65" pos:column="57"/></literal></expr> <pos:position pos:line="65" pos:column="58"/></then><else pos:line="65" pos:column="58">: <expr><literal type="string" pos:line="65" pos:column="60">""<pos:position pos:line="65" pos:column="62"/></literal></expr></else></ternary></expr></argument>,
		<argument><expr><name pos:line="66" pos:column="17">cookie<pos:position pos:line="66" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="25">auth<pos:position pos:line="66" pos:column="29"/></name></expr></argument>,
		<argument><expr><name pos:line="67" pos:column="17">host_field<pos:position pos:line="67" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="29">colonhost<pos:position pos:line="67" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="40">postlen<pos:position pos:line="67" pos:column="47"/></name></expr></argument>,
		<argument><expr><ternary><condition><expr><operator pos:line="68" pos:column="17">(<pos:position pos:line="68" pos:column="18"/></operator><name><name pos:line="68" pos:column="18">content_type<pos:position pos:line="68" pos:column="30"/></name><index pos:line="68" pos:column="30">[<expr><literal type="number" pos:line="68" pos:column="31">0<pos:position pos:line="68" pos:column="32"/></literal></expr>]<pos:position pos:line="68" pos:column="33"/></index></name><operator pos:line="68" pos:column="33">)<pos:position pos:line="68" pos:column="34"/></operator></expr> ?<pos:position pos:line="68" pos:column="36"/></condition><then pos:line="68" pos:column="36"> <expr><name pos:line="68" pos:column="37">content_type<pos:position pos:line="68" pos:column="49"/></name></expr> <pos:position pos:line="68" pos:column="50"/></then><else pos:line="68" pos:column="50">: <expr><literal type="string" pos:line="68" pos:column="52">"text/plain"<pos:position pos:line="68" pos:column="64"/></literal></expr></else></ternary></expr></argument>, <argument><expr><name pos:line="68" pos:column="66">hdrs<pos:position pos:line="68" pos:column="70"/></name></expr></argument>)<pos:position pos:line="68" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="69" pos:column="6"/></block></else></if>

    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name pos:line="71" pos:column="9">verbosity<pos:position pos:line="71" pos:column="18"/></name> <operator pos:line="71" pos:column="19">&gt;=<pos:position pos:line="71" pos:column="24"/></operator> <literal type="number" pos:line="71" pos:column="22">2<pos:position pos:line="71" pos:column="23"/></literal></expr>)<pos:position pos:line="71" pos:column="24"/></condition><then pos:line="71" pos:column="24">
	<block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="9">printf<pos:position pos:line="72" pos:column="15"/></name><argument_list pos:line="72" pos:column="15">(<argument><expr><literal type="string" pos:line="72" pos:column="16">"INFO: POST header == \n---\n%s\n---\n"<pos:position pos:line="72" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="72" pos:column="57">request<pos:position pos:line="72" pos:column="64"/></name></expr></argument>)<pos:position pos:line="72" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="66"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name pos:line="74" pos:column="5">reqlen<pos:position pos:line="74" pos:column="11"/></name> <operator pos:line="74" pos:column="12">=<pos:position pos:line="74" pos:column="13"/></operator> <call><name pos:line="74" pos:column="14">strlen<pos:position pos:line="74" pos:column="20"/></name><argument_list pos:line="74" pos:column="20">(<argument><expr><name pos:line="74" pos:column="21">request<pos:position pos:line="74" pos:column="28"/></name></expr></argument>)<pos:position pos:line="74" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="30"/></expr_stmt>

    <comment type="block" pos:line="76" pos:column="5">/*
     * Combine headers and (optional) post file into one contineous buffer
     */</comment>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">posting<pos:position pos:line="79" pos:column="16"/></name> <operator pos:line="79" pos:column="17">==<pos:position pos:line="79" pos:column="19"/></operator> <literal type="number" pos:line="79" pos:column="20">1<pos:position pos:line="79" pos:column="21"/></literal></expr>)<pos:position pos:line="79" pos:column="22"/></condition><then pos:line="79" pos:column="22"> <block pos:line="79" pos:column="23">{
	<decl_stmt><decl><type><name pos:line="80" pos:column="9">char<pos:position pos:line="80" pos:column="13"/></name> <modifier pos:line="80" pos:column="14">*<pos:position pos:line="80" pos:column="15"/></modifier></type><name pos:line="80" pos:column="15">buff<pos:position pos:line="80" pos:column="19"/></name> <init pos:line="80" pos:column="20">= <expr><call><name pos:line="80" pos:column="22">malloc<pos:position pos:line="80" pos:column="28"/></name><argument_list pos:line="80" pos:column="28">(<argument><expr><name pos:line="80" pos:column="29">postlen<pos:position pos:line="80" pos:column="36"/></name> <operator pos:line="80" pos:column="37">+<pos:position pos:line="80" pos:column="38"/></operator> <name pos:line="80" pos:column="39">reqlen<pos:position pos:line="80" pos:column="45"/></name> <operator pos:line="80" pos:column="46">+<pos:position pos:line="80" pos:column="47"/></operator> <literal type="number" pos:line="80" pos:column="48">1<pos:position pos:line="80" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="80" pos:column="51"/></decl_stmt>
        <if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><operator pos:line="81" pos:column="13">!<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="14">buff<pos:position pos:line="81" pos:column="18"/></name></expr>)<pos:position pos:line="81" pos:column="19"/></condition><then pos:line="81" pos:column="19"> <block pos:line="81" pos:column="20">{
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">fprintf<pos:position pos:line="82" pos:column="20"/></name><argument_list pos:line="82" pos:column="20">(<argument><expr><name pos:line="82" pos:column="21">stderr<pos:position pos:line="82" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="29">"error creating request buffer: out of memory\n"<pos:position pos:line="82" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="79"/></expr_stmt>
            <return pos:line="83" pos:column="13">return;<pos:position pos:line="83" pos:column="20"/></return>
        }<pos:position pos:line="84" pos:column="10"/></block></then></if>
	<expr_stmt><expr><call><name pos:line="85" pos:column="9">strcpy<pos:position pos:line="85" pos:column="15"/></name><argument_list pos:line="85" pos:column="15">(<argument><expr><name pos:line="85" pos:column="16">buff<pos:position pos:line="85" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="22">request<pos:position pos:line="85" pos:column="29"/></name></expr></argument>)<pos:position pos:line="85" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="86" pos:column="9">strcpy<pos:position pos:line="86" pos:column="15"/></name><argument_list pos:line="86" pos:column="15">(<argument><expr><name pos:line="86" pos:column="16">buff<pos:position pos:line="86" pos:column="20"/></name> <operator pos:line="86" pos:column="21">+<pos:position pos:line="86" pos:column="22"/></operator> <name pos:line="86" pos:column="23">reqlen<pos:position pos:line="86" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="31">postdata<pos:position pos:line="86" pos:column="39"/></name></expr></argument>)<pos:position pos:line="86" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><name pos:line="87" pos:column="9">request<pos:position pos:line="87" pos:column="16"/></name> <operator pos:line="87" pos:column="17">=<pos:position pos:line="87" pos:column="18"/></operator> <name pos:line="87" pos:column="19">buff<pos:position pos:line="87" pos:column="23"/></name></expr>;<pos:position pos:line="87" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">ifdef<pos:position pos:line="90" pos:column="7"/></cpp:directive> <name pos:line="90" pos:column="8">NOT_ASCII<pos:position pos:line="90" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="91" pos:column="5">inbytes_left<pos:position pos:line="91" pos:column="17"/></name> <operator pos:line="91" pos:column="18">=<pos:position pos:line="91" pos:column="19"/></operator> <name pos:line="91" pos:column="20">outbytes_left<pos:position pos:line="91" pos:column="33"/></name> <operator pos:line="91" pos:column="34">=<pos:position pos:line="91" pos:column="35"/></operator> <name pos:line="91" pos:column="36">reqlen<pos:position pos:line="91" pos:column="42"/></name></expr>;<pos:position pos:line="91" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="92" pos:column="5">status<pos:position pos:line="92" pos:column="11"/></name> <operator pos:line="92" pos:column="12">=<pos:position pos:line="92" pos:column="13"/></operator> <call><name pos:line="92" pos:column="14">apr_xlate_conv_buffer<pos:position pos:line="92" pos:column="35"/></name><argument_list pos:line="92" pos:column="35">(<argument><expr><name pos:line="92" pos:column="36">to_ascii<pos:position pos:line="92" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="46">request<pos:position pos:line="92" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="92" pos:column="55">&amp;<pos:position pos:line="92" pos:column="60"/></operator><name pos:line="92" pos:column="56">inbytes_left<pos:position pos:line="92" pos:column="68"/></name></expr></argument>,
				   <argument><expr><name pos:line="93" pos:column="36">request<pos:position pos:line="93" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="45">&amp;<pos:position pos:line="93" pos:column="50"/></operator><name pos:line="93" pos:column="46">outbytes_left<pos:position pos:line="93" pos:column="59"/></name></expr></argument>)<pos:position pos:line="93" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="61"/></expr_stmt>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><name pos:line="94" pos:column="9">status<pos:position pos:line="94" pos:column="15"/></name> <operator pos:line="94" pos:column="16">||<pos:position pos:line="94" pos:column="18"/></operator> <name pos:line="94" pos:column="19">inbytes_left<pos:position pos:line="94" pos:column="31"/></name> <operator pos:line="94" pos:column="32">||<pos:position pos:line="94" pos:column="34"/></operator> <name pos:line="94" pos:column="35">outbytes_left<pos:position pos:line="94" pos:column="48"/></name></expr>)<pos:position pos:line="94" pos:column="49"/></condition><then pos:line="94" pos:column="49"> <block pos:line="94" pos:column="50">{
	<expr_stmt><expr><call><name pos:line="95" pos:column="9">fprintf<pos:position pos:line="95" pos:column="16"/></name><argument_list pos:line="95" pos:column="16">(<argument><expr><name pos:line="95" pos:column="17">stderr<pos:position pos:line="95" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="25">"only simple translation is supported (%d/%u/%u)\n"<pos:position pos:line="95" pos:column="76"/></literal></expr></argument>,
		<argument><expr><name pos:line="96" pos:column="17">status<pos:position pos:line="96" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="25">inbytes_left<pos:position pos:line="96" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="39">outbytes_left<pos:position pos:line="96" pos:column="52"/></name></expr></argument>)<pos:position pos:line="96" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="54"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="97" pos:column="9">exit<pos:position pos:line="97" pos:column="13"/></name><argument_list pos:line="97" pos:column="13">(<argument><expr><literal type="number" pos:line="97" pos:column="14">1<pos:position pos:line="97" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>
<cpp:endif pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">endif<pos:position pos:line="99" pos:column="7"/></cpp:directive></cpp:endif>				<comment type="block" pos:line="99" pos:column="33">/* NOT_ASCII */</comment>

    <comment type="block" pos:line="101" pos:column="5">/* This only needs to be done once */</comment>
<cpp:ifdef pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">ifdef<pos:position pos:line="102" pos:column="7"/></cpp:directive> <name pos:line="102" pos:column="8">USE_SSL<pos:position pos:line="102" pos:column="15"/></name></cpp:ifdef>
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><name pos:line="103" pos:column="9">ssl<pos:position pos:line="103" pos:column="12"/></name> <operator pos:line="103" pos:column="13">!=<pos:position pos:line="103" pos:column="15"/></operator> <literal type="number" pos:line="103" pos:column="16">1<pos:position pos:line="103" pos:column="17"/></literal></expr>)<pos:position pos:line="103" pos:column="18"/></condition><then pos:line="103" pos:column="18">
<cpp:endif pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">endif<pos:position pos:line="104" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><if pos:line="105" pos:column="5">if <condition pos:line="105" pos:column="8">(<expr><operator pos:line="105" pos:column="9">(<pos:position pos:line="105" pos:column="10"/></operator><name pos:line="105" pos:column="10">rv<pos:position pos:line="105" pos:column="12"/></name> <operator pos:line="105" pos:column="13">=<pos:position pos:line="105" pos:column="14"/></operator> <call><name pos:line="105" pos:column="15">apr_sockaddr_info_get<pos:position pos:line="105" pos:column="36"/></name><argument_list pos:line="105" pos:column="36">(<argument><expr><operator pos:line="105" pos:column="37">&amp;<pos:position pos:line="105" pos:column="42"/></operator><name pos:line="105" pos:column="38">destsa<pos:position pos:line="105" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="46">connecthost<pos:position pos:line="105" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="59">APR_UNSPEC<pos:position pos:line="105" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="71">connectport<pos:position pos:line="105" pos:column="82"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="105" pos:column="84">0<pos:position pos:line="105" pos:column="85"/></literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="87">cntxt<pos:position pos:line="105" pos:column="92"/></name></expr></argument>)<pos:position pos:line="105" pos:column="93"/></argument_list></call><operator pos:line="105" pos:column="93">)<pos:position pos:line="105" pos:column="94"/></operator>
	<operator pos:line="106" pos:column="9">!=<pos:position pos:line="106" pos:column="11"/></operator> <name pos:line="106" pos:column="12">APR_SUCCESS<pos:position pos:line="106" pos:column="23"/></name></expr>)<pos:position pos:line="106" pos:column="24"/></condition><then pos:line="106" pos:column="24"> <block pos:line="106" pos:column="25">{
	<decl_stmt><decl><type><name pos:line="107" pos:column="9">char<pos:position pos:line="107" pos:column="13"/></name></type> <name><name pos:line="107" pos:column="14">buf<pos:position pos:line="107" pos:column="17"/></name><index pos:line="107" pos:column="17">[<expr><literal type="number" pos:line="107" pos:column="18">120<pos:position pos:line="107" pos:column="21"/></literal></expr>]<pos:position pos:line="107" pos:column="22"/></index></name></decl>;<pos:position pos:line="107" pos:column="23"/></decl_stmt>
	<expr_stmt><expr><call><name pos:line="108" pos:column="9">apr_snprintf<pos:position pos:line="108" pos:column="21"/></name><argument_list pos:line="108" pos:column="21">(<argument><expr><name pos:line="108" pos:column="22">buf<pos:position pos:line="108" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="108" pos:column="27">sizeof<argument_list pos:line="108" pos:column="33">(<argument><expr><name pos:line="108" pos:column="34">buf<pos:position pos:line="108" pos:column="37"/></name></expr></argument>)<pos:position pos:line="108" pos:column="38"/></argument_list></sizeof></expr></argument>,
		     <argument><expr><literal type="string" pos:line="109" pos:column="22">"apr_sockaddr_info_get() for %s"<pos:position pos:line="109" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="56">connecthost<pos:position pos:line="109" pos:column="67"/></name></expr></argument>)<pos:position pos:line="109" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="69"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="110" pos:column="9">apr_err<pos:position pos:line="110" pos:column="16"/></name><argument_list pos:line="110" pos:column="16">(<argument><expr><name pos:line="110" pos:column="17">buf<pos:position pos:line="110" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="22">rv<pos:position pos:line="110" pos:column="24"/></name></expr></argument>)<pos:position pos:line="110" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if></block></then></if>

    <comment type="block" pos:line="113" pos:column="5">/* ok - lets start */</comment>
    <expr_stmt><expr><name pos:line="114" pos:column="5">start<pos:position pos:line="114" pos:column="10"/></name> <operator pos:line="114" pos:column="11">=<pos:position pos:line="114" pos:column="12"/></operator> <call><name pos:line="114" pos:column="13">apr_time_now<pos:position pos:line="114" pos:column="25"/></name><argument_list pos:line="114" pos:column="25">()<pos:position pos:line="114" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="116" pos:column="5">/* initialise lots of requests */</comment>
    <for pos:line="117" pos:column="5">for <control pos:line="117" pos:column="9">(<init><expr><name pos:line="117" pos:column="10">i<pos:position pos:line="117" pos:column="11"/></name> <operator pos:line="117" pos:column="12">=<pos:position pos:line="117" pos:column="13"/></operator> <literal type="number" pos:line="117" pos:column="14">0<pos:position pos:line="117" pos:column="15"/></literal></expr>;<pos:position pos:line="117" pos:column="16"/></init> <condition><expr><name pos:line="117" pos:column="17">i<pos:position pos:line="117" pos:column="18"/></name> <operator pos:line="117" pos:column="19">&lt;<pos:position pos:line="117" pos:column="23"/></operator> <name pos:line="117" pos:column="21">concurrency<pos:position pos:line="117" pos:column="32"/></name></expr>;<pos:position pos:line="117" pos:column="33"/></condition> <incr><expr><name pos:line="117" pos:column="34">i<pos:position pos:line="117" pos:column="35"/></name><operator pos:line="117" pos:column="35">++<pos:position pos:line="117" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="117" pos:column="38"/></control> <block pos:line="117" pos:column="39">{
	<expr_stmt><expr><name><name pos:line="118" pos:column="9">con<pos:position pos:line="118" pos:column="12"/></name><index pos:line="118" pos:column="12">[<expr><name pos:line="118" pos:column="13">i<pos:position pos:line="118" pos:column="14"/></name></expr>]<pos:position pos:line="118" pos:column="15"/></index></name><operator pos:line="118" pos:column="15">.<pos:position pos:line="118" pos:column="16"/></operator><name pos:line="118" pos:column="16">socknum<pos:position pos:line="118" pos:column="23"/></name> <operator pos:line="118" pos:column="24">=<pos:position pos:line="118" pos:column="25"/></operator> <name pos:line="118" pos:column="26">i<pos:position pos:line="118" pos:column="27"/></name></expr>;<pos:position pos:line="118" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="119" pos:column="9">start_connect<pos:position pos:line="119" pos:column="22"/></name><argument_list pos:line="119" pos:column="22">(<argument><expr><operator pos:line="119" pos:column="23">&amp;<pos:position pos:line="119" pos:column="28"/></operator><name><name pos:line="119" pos:column="24">con<pos:position pos:line="119" pos:column="27"/></name><index pos:line="119" pos:column="27">[<expr><name pos:line="119" pos:column="28">i<pos:position pos:line="119" pos:column="29"/></name></expr>]<pos:position pos:line="119" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="119" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="120" pos:column="6"/></block></for>

    <while pos:line="122" pos:column="5">while <condition pos:line="122" pos:column="11">(<expr><name pos:line="122" pos:column="12">done<pos:position pos:line="122" pos:column="16"/></name> <operator pos:line="122" pos:column="17">&lt;<pos:position pos:line="122" pos:column="21"/></operator> <name pos:line="122" pos:column="19">requests<pos:position pos:line="122" pos:column="27"/></name></expr>)<pos:position pos:line="122" pos:column="28"/></condition> <block pos:line="122" pos:column="29">{
	<decl_stmt><decl><type><name pos:line="123" pos:column="9">apr_int32_t<pos:position pos:line="123" pos:column="20"/></name></type> <name pos:line="123" pos:column="21">n<pos:position pos:line="123" pos:column="22"/></name></decl>;<pos:position pos:line="123" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="124" pos:column="9">apr_int32_t<pos:position pos:line="124" pos:column="20"/></name></type> <name pos:line="124" pos:column="21">timed<pos:position pos:line="124" pos:column="26"/></name></decl>;<pos:position pos:line="124" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="125" pos:column="9">const<pos:position pos:line="125" pos:column="14"/></specifier> <name pos:line="125" pos:column="15">apr_pollfd_t<pos:position pos:line="125" pos:column="27"/></name> <modifier pos:line="125" pos:column="28">*<pos:position pos:line="125" pos:column="29"/></modifier></type><name pos:line="125" pos:column="29">pollresults<pos:position pos:line="125" pos:column="40"/></name></decl>;<pos:position pos:line="125" pos:column="41"/></decl_stmt>

	<comment type="block" pos:line="127" pos:column="9">/* check for time limit expiry */</comment>
	<expr_stmt><expr><name pos:line="128" pos:column="9">now<pos:position pos:line="128" pos:column="12"/></name> <operator pos:line="128" pos:column="13">=<pos:position pos:line="128" pos:column="14"/></operator> <call><name pos:line="128" pos:column="15">apr_time_now<pos:position pos:line="128" pos:column="27"/></name><argument_list pos:line="128" pos:column="27">()<pos:position pos:line="128" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><name pos:line="129" pos:column="9">timed<pos:position pos:line="129" pos:column="14"/></name> <operator pos:line="129" pos:column="15">=<pos:position pos:line="129" pos:column="16"/></operator> <operator pos:line="129" pos:column="17">(<pos:position pos:line="129" pos:column="18"/></operator><name pos:line="129" pos:column="18">apr_int32_t<pos:position pos:line="129" pos:column="29"/></name><operator pos:line="129" pos:column="29">)<pos:position pos:line="129" pos:column="30"/></operator><call><name pos:line="129" pos:column="30">apr_time_sec<pos:position pos:line="129" pos:column="42"/></name><argument_list pos:line="129" pos:column="42">(<argument><expr><name pos:line="129" pos:column="43">now<pos:position pos:line="129" pos:column="46"/></name> <operator pos:line="129" pos:column="47">-<pos:position pos:line="129" pos:column="48"/></operator> <name pos:line="129" pos:column="49">start<pos:position pos:line="129" pos:column="54"/></name></expr></argument>)<pos:position pos:line="129" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="56"/></expr_stmt>
	<if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><name pos:line="130" pos:column="13">tlimit<pos:position pos:line="130" pos:column="19"/></name> <operator pos:line="130" pos:column="20">&amp;&amp;<pos:position pos:line="130" pos:column="30"/></operator> <name pos:line="130" pos:column="23">timed<pos:position pos:line="130" pos:column="28"/></name> <operator pos:line="130" pos:column="29">&gt;=<pos:position pos:line="130" pos:column="34"/></operator> <name pos:line="130" pos:column="32">tlimit<pos:position pos:line="130" pos:column="38"/></name></expr>)<pos:position pos:line="130" pos:column="39"/></condition><then pos:line="130" pos:column="39"> <block pos:line="130" pos:column="40">{
	    <expr_stmt><expr><name pos:line="131" pos:column="13">requests<pos:position pos:line="131" pos:column="21"/></name> <operator pos:line="131" pos:column="22">=<pos:position pos:line="131" pos:column="23"/></operator> <name pos:line="131" pos:column="24">done<pos:position pos:line="131" pos:column="28"/></name></expr>;<pos:position pos:line="131" pos:column="29"/></expr_stmt>	<comment type="block" pos:line="131" pos:column="33">/* so stats are correct */</comment>
	    <break pos:line="132" pos:column="13">break;<pos:position pos:line="132" pos:column="19"/></break>		<comment type="block" pos:line="132" pos:column="33">/* no need to do another round */</comment>
	}<pos:position pos:line="133" pos:column="10"/></block></then></if>

	<expr_stmt><expr><name pos:line="135" pos:column="9">n<pos:position pos:line="135" pos:column="10"/></name> <operator pos:line="135" pos:column="11">=<pos:position pos:line="135" pos:column="12"/></operator> <name pos:line="135" pos:column="13">concurrency<pos:position pos:line="135" pos:column="24"/></name></expr>;<pos:position pos:line="135" pos:column="25"/></expr_stmt>
<cpp:ifdef pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">ifdef<pos:position pos:line="136" pos:column="7"/></cpp:directive> <name pos:line="136" pos:column="8">USE_SSL<pos:position pos:line="136" pos:column="15"/></name></cpp:ifdef>
        <if pos:line="137" pos:column="9">if <condition pos:line="137" pos:column="12">(<expr><name pos:line="137" pos:column="13">ssl<pos:position pos:line="137" pos:column="16"/></name> <operator pos:line="137" pos:column="17">==<pos:position pos:line="137" pos:column="19"/></operator> <literal type="number" pos:line="137" pos:column="20">1<pos:position pos:line="137" pos:column="21"/></literal></expr>)<pos:position pos:line="137" pos:column="22"/></condition><then pos:line="137" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><name pos:line="138" pos:column="13">status<pos:position pos:line="138" pos:column="19"/></name> <operator pos:line="138" pos:column="20">=<pos:position pos:line="138" pos:column="21"/></operator> <name pos:line="138" pos:column="22">APR_SUCCESS<pos:position pos:line="138" pos:column="33"/></name></expr>;<pos:position pos:line="138" pos:column="34"/></expr_stmt></block></then>
        <else pos:line="139" pos:column="9">else
<cpp:endif pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">endif<pos:position pos:line="140" pos:column="7"/></cpp:directive></cpp:endif>
	<block type="pseudo"><expr_stmt><expr><name pos:line="141" pos:column="9">status<pos:position pos:line="141" pos:column="15"/></name> <operator pos:line="141" pos:column="16">=<pos:position pos:line="141" pos:column="17"/></operator> <call><name pos:line="141" pos:column="18">apr_pollset_poll<pos:position pos:line="141" pos:column="34"/></name><argument_list pos:line="141" pos:column="34">(<argument><expr><name pos:line="141" pos:column="35">readbits<pos:position pos:line="141" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="45">aprtimeout<pos:position pos:line="141" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="141" pos:column="57">&amp;<pos:position pos:line="141" pos:column="62"/></operator><name pos:line="141" pos:column="58">n<pos:position pos:line="141" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="141" pos:column="61">&amp;<pos:position pos:line="141" pos:column="66"/></operator><name pos:line="141" pos:column="62">pollresults<pos:position pos:line="141" pos:column="73"/></name></expr></argument>)<pos:position pos:line="141" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="75"/></expr_stmt></block></else></if>
	<if pos:line="142" pos:column="9">if <condition pos:line="142" pos:column="12">(<expr><name pos:line="142" pos:column="13">status<pos:position pos:line="142" pos:column="19"/></name> <operator pos:line="142" pos:column="20">!=<pos:position pos:line="142" pos:column="22"/></operator> <name pos:line="142" pos:column="23">APR_SUCCESS<pos:position pos:line="142" pos:column="34"/></name></expr>)<pos:position pos:line="142" pos:column="35"/></condition><then pos:line="142" pos:column="35">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="143" pos:column="13">apr_err<pos:position pos:line="143" pos:column="20"/></name><argument_list pos:line="143" pos:column="20">(<argument><expr><literal type="string" pos:line="143" pos:column="21">"apr_poll"<pos:position pos:line="143" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="143" pos:column="33">status<pos:position pos:line="143" pos:column="39"/></name></expr></argument>)<pos:position pos:line="143" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="41"/></expr_stmt></block></then></if>

	<if pos:line="145" pos:column="9">if <condition pos:line="145" pos:column="12">(<expr><operator pos:line="145" pos:column="13">!<pos:position pos:line="145" pos:column="14"/></operator><name pos:line="145" pos:column="14">n<pos:position pos:line="145" pos:column="15"/></name></expr>)<pos:position pos:line="145" pos:column="16"/></condition><then pos:line="145" pos:column="16"> <block pos:line="145" pos:column="17">{
	    <expr_stmt><expr><call><name pos:line="146" pos:column="13">err<pos:position pos:line="146" pos:column="16"/></name><argument_list pos:line="146" pos:column="16">(<argument><expr><literal type="string" pos:line="146" pos:column="17">"\nServer timed out\n\n"<pos:position pos:line="146" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="43"/></expr_stmt>
	}<pos:position pos:line="147" pos:column="10"/></block></then></if>

	<for pos:line="149" pos:column="9">for <control pos:line="149" pos:column="13">(<init><expr><name pos:line="149" pos:column="14">i<pos:position pos:line="149" pos:column="15"/></name> <operator pos:line="149" pos:column="16">=<pos:position pos:line="149" pos:column="17"/></operator> <literal type="number" pos:line="149" pos:column="18">0<pos:position pos:line="149" pos:column="19"/></literal></expr>;<pos:position pos:line="149" pos:column="20"/></init> <condition><expr><name pos:line="149" pos:column="21">i<pos:position pos:line="149" pos:column="22"/></name> <operator pos:line="149" pos:column="23">&lt;<pos:position pos:line="149" pos:column="27"/></operator> <name pos:line="149" pos:column="25">n<pos:position pos:line="149" pos:column="26"/></name></expr>;<pos:position pos:line="149" pos:column="27"/></condition> <incr><expr><name pos:line="149" pos:column="28">i<pos:position pos:line="149" pos:column="29"/></name><operator pos:line="149" pos:column="29">++<pos:position pos:line="149" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="149" pos:column="32"/></control> <block pos:line="149" pos:column="33">{
            <decl_stmt><decl><type><specifier pos:line="150" pos:column="13">const<pos:position pos:line="150" pos:column="18"/></specifier> <name pos:line="150" pos:column="19">apr_pollfd_t<pos:position pos:line="150" pos:column="31"/></name> <modifier pos:line="150" pos:column="32">*<pos:position pos:line="150" pos:column="33"/></modifier></type><name pos:line="150" pos:column="33">next_fd<pos:position pos:line="150" pos:column="40"/></name> <init pos:line="150" pos:column="41">= <expr><operator pos:line="150" pos:column="43">&amp;<pos:position pos:line="150" pos:column="48"/></operator><operator pos:line="150" pos:column="44">(<pos:position pos:line="150" pos:column="45"/></operator><name><name pos:line="150" pos:column="45">pollresults<pos:position pos:line="150" pos:column="56"/></name><index pos:line="150" pos:column="56">[<expr><name pos:line="150" pos:column="57">i<pos:position pos:line="150" pos:column="58"/></name></expr>]<pos:position pos:line="150" pos:column="59"/></index></name><operator pos:line="150" pos:column="59">)<pos:position pos:line="150" pos:column="60"/></operator></expr></init></decl>;<pos:position pos:line="150" pos:column="61"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="151" pos:column="13">struct<pos:position pos:line="151" pos:column="19"/></name> <name pos:line="151" pos:column="20">connection<pos:position pos:line="151" pos:column="30"/></name></name> <modifier pos:line="151" pos:column="31">*<pos:position pos:line="151" pos:column="32"/></modifier></type><name pos:line="151" pos:column="32">c<pos:position pos:line="151" pos:column="33"/></name> <init pos:line="151" pos:column="34">= <expr><name><name pos:line="151" pos:column="36">next_fd<pos:position pos:line="151" pos:column="43"/></name><operator pos:line="151" pos:column="43">-&gt;<pos:position pos:line="151" pos:column="48"/></operator><name pos:line="151" pos:column="45">client_data<pos:position pos:line="151" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="151" pos:column="57"/></decl_stmt>

	    <comment type="block" pos:line="153" pos:column="13">/*
	     * If the connection isn't connected how can we check it?
	     */</comment>
	    <if pos:line="156" pos:column="13">if <condition pos:line="156" pos:column="16">(<expr><name><name pos:line="156" pos:column="17">c<pos:position pos:line="156" pos:column="18"/></name><operator pos:line="156" pos:column="18">-&gt;<pos:position pos:line="156" pos:column="23"/></operator><name pos:line="156" pos:column="20">state<pos:position pos:line="156" pos:column="25"/></name></name> <operator pos:line="156" pos:column="26">==<pos:position pos:line="156" pos:column="28"/></operator> <name pos:line="156" pos:column="29">STATE_UNCONNECTED<pos:position pos:line="156" pos:column="46"/></name></expr>)<pos:position pos:line="156" pos:column="47"/></condition><then pos:line="156" pos:column="47">
		<block type="pseudo"><continue pos:line="157" pos:column="17">continue;<pos:position pos:line="157" pos:column="26"/></continue></block></then></if>

<cpp:ifdef pos:line="159" pos:column="1">#<cpp:directive pos:line="159" pos:column="2">ifdef<pos:position pos:line="159" pos:column="7"/></cpp:directive> <name pos:line="159" pos:column="8">USE_SSL<pos:position pos:line="159" pos:column="15"/></name></cpp:ifdef>
            <if pos:line="160" pos:column="13">if <condition pos:line="160" pos:column="16">(<expr><name pos:line="160" pos:column="17">ssl<pos:position pos:line="160" pos:column="20"/></name> <operator pos:line="160" pos:column="21">==<pos:position pos:line="160" pos:column="23"/></operator> <literal type="number" pos:line="160" pos:column="24">1<pos:position pos:line="160" pos:column="25"/></literal></expr>)<pos:position pos:line="160" pos:column="26"/></condition><then pos:line="160" pos:column="26">
                <block type="pseudo"><expr_stmt><expr><name pos:line="161" pos:column="17">rv<pos:position pos:line="161" pos:column="19"/></name> <operator pos:line="161" pos:column="20">=<pos:position pos:line="161" pos:column="21"/></operator> <name pos:line="161" pos:column="22">APR_POLLIN<pos:position pos:line="161" pos:column="32"/></name></expr>;<pos:position pos:line="161" pos:column="33"/></expr_stmt></block></then>
            <else pos:line="162" pos:column="13">else
<cpp:endif pos:line="163" pos:column="1">#<cpp:directive pos:line="163" pos:column="2">endif<pos:position pos:line="163" pos:column="7"/></cpp:directive></cpp:endif>
            <block type="pseudo"><expr_stmt><expr><name pos:line="164" pos:column="13">rv<pos:position pos:line="164" pos:column="15"/></name> <operator pos:line="164" pos:column="16">=<pos:position pos:line="164" pos:column="17"/></operator> <macro><name pos:line="164" pos:column="18">nex<pos:position pos:line="164" pos:column="21"/></name></macro></expr></expr_stmt></block></else></if></block></for></block></while></block></function></unit>
