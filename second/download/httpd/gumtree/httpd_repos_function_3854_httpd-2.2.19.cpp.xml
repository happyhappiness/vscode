<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3854_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">do_mcast<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">type<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">apr_socket_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">sock<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">apr_sockaddr_t<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">mcast<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">apr_sockaddr_t<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">iface<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="3" pos:column="30">apr_sockaddr_t<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">source<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="53"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">ip_mreq<pos:position pos:line="5" pos:column="19"/></name></name></type> <name pos:line="5" pos:column="20">mip4<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">APR_SUCCESS<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="7" pos:column="18"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">ipv6_mreq<pos:position pos:line="8" pos:column="21"/></name></name></type> <name pos:line="8" pos:column="22">mip6<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">ifdef<pos:position pos:line="10" pos:column="7"/></cpp:directive> <name pos:line="10" pos:column="8">GROUP_FILTER_SIZE<pos:position pos:line="10" pos:column="25"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name><name pos:line="11" pos:column="5">struct<pos:position pos:line="11" pos:column="11"/></name> <name pos:line="11" pos:column="12">group_source_req<pos:position pos:line="11" pos:column="28"/></name></name></type> <name pos:line="11" pos:column="29">mip<pos:position pos:line="11" pos:column="32"/></name></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">ip_proto<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">source<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">!=<pos:position pos:line="15" pos:column="18"/></operator> <name pos:line="15" pos:column="19">NULL<pos:position pos:line="15" pos:column="23"/></name></expr>)<pos:position pos:line="15" pos:column="24"/></condition><then pos:line="15" pos:column="24"> <block pos:line="15" pos:column="25">{
<cpp:ifdef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifdef<pos:position pos:line="16" pos:column="7"/></cpp:directive> <name pos:line="16" pos:column="8">GROUP_FILTER_SIZE<pos:position pos:line="16" pos:column="25"/></name></cpp:ifdef>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><call><name pos:line="17" pos:column="13">sock_is_ipv4<pos:position pos:line="17" pos:column="25"/></name><argument_list pos:line="17" pos:column="25">(<argument><expr><name pos:line="17" pos:column="26">sock<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32"> <block pos:line="17" pos:column="33">{
            <expr_stmt><expr><name pos:line="18" pos:column="13">ip_proto<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">=<pos:position pos:line="18" pos:column="23"/></operator> <name pos:line="18" pos:column="24">IPPROTO_IP<pos:position pos:line="18" pos:column="34"/></name></expr>;<pos:position pos:line="18" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></then> 
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="20" pos:column="18"/></name></expr></cpp:if>
        <elseif pos:line="21" pos:column="9">else <if pos:line="21" pos:column="14">if <condition pos:line="21" pos:column="17">(<expr><call><name pos:line="21" pos:column="18">sock_is_ipv6<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">sock<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="37"/></condition><then pos:line="21" pos:column="37"> <block pos:line="21" pos:column="38">{
            <expr_stmt><expr><name pos:line="22" pos:column="13">ip_proto<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <name pos:line="22" pos:column="24">IPPROTO_IPV6<pos:position pos:line="22" pos:column="36"/></name></expr>;<pos:position pos:line="22" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if></elseif>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
        <else pos:line="25" pos:column="9">else <block pos:line="25" pos:column="14">{
            <return pos:line="26" pos:column="13">return <expr><name pos:line="26" pos:column="20">APR_ENOTIMPL<pos:position pos:line="26" pos:column="32"/></name></expr>;<pos:position pos:line="26" pos:column="33"/></return>
        }<pos:position pos:line="27" pos:column="10"/></block></else></if>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">type<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">==<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">IP_ADD_MEMBERSHIP<pos:position pos:line="29" pos:column="38"/></name></expr>)<pos:position pos:line="29" pos:column="39"/></condition><then pos:line="29" pos:column="39">
            <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="13">type<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <name pos:line="30" pos:column="20">MCAST_JOIN_SOURCE_GROUP<pos:position pos:line="30" pos:column="43"/></name></expr>;<pos:position pos:line="30" pos:column="44"/></expr_stmt></block></then>
        <elseif pos:line="31" pos:column="9">else <if pos:line="31" pos:column="14">if <condition pos:line="31" pos:column="17">(<expr><name pos:line="31" pos:column="18">type<pos:position pos:line="31" pos:column="22"/></name> <operator pos:line="31" pos:column="23">==<pos:position pos:line="31" pos:column="25"/></operator> <name pos:line="31" pos:column="26">IP_DROP_MEMBERSHIP<pos:position pos:line="31" pos:column="44"/></name></expr>)<pos:position pos:line="31" pos:column="45"/></condition><then pos:line="31" pos:column="45">
            <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="13">type<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <name pos:line="32" pos:column="20">MCAST_LEAVE_SOURCE_GROUP<pos:position pos:line="32" pos:column="44"/></name></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt></block></then></if></elseif>
        <else pos:line="33" pos:column="9">else
            <block type="pseudo"><return pos:line="34" pos:column="13">return <expr><name pos:line="34" pos:column="20">APR_ENOTIMPL<pos:position pos:line="34" pos:column="32"/></name></expr>;<pos:position pos:line="34" pos:column="33"/></return></block></else></if>

        <expr_stmt><expr><name><name pos:line="36" pos:column="9">mip<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">.<pos:position pos:line="36" pos:column="13"/></operator><name pos:line="36" pos:column="13">gsr_interface<pos:position pos:line="36" pos:column="26"/></name></name> <operator pos:line="36" pos:column="27">=<pos:position pos:line="36" pos:column="28"/></operator> <call><name pos:line="36" pos:column="29">find_if_index<pos:position pos:line="36" pos:column="42"/></name><argument_list pos:line="36" pos:column="42">(<argument><expr><name pos:line="36" pos:column="43">iface<pos:position pos:line="36" pos:column="48"/></name></expr></argument>)<pos:position pos:line="36" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">memcpy<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><operator pos:line="37" pos:column="16">&amp;<pos:position pos:line="37" pos:column="21"/></operator><name><name pos:line="37" pos:column="17">mip<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">.<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="21">gsr_group<pos:position pos:line="37" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="32">mcast<pos:position pos:line="37" pos:column="37"/></name><operator pos:line="37" pos:column="37">-&gt;<pos:position pos:line="37" pos:column="42"/></operator><name pos:line="37" pos:column="39">ipaddr_ptr<pos:position pos:line="37" pos:column="49"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="51">sizeof<argument_list pos:line="37" pos:column="57">(<argument><expr><name><name pos:line="37" pos:column="58">mip<pos:position pos:line="37" pos:column="61"/></name><operator pos:line="37" pos:column="61">.<pos:position pos:line="37" pos:column="62"/></operator><name pos:line="37" pos:column="62">gsr_group<pos:position pos:line="37" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">memcpy<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><operator pos:line="38" pos:column="16">&amp;<pos:position pos:line="38" pos:column="21"/></operator><name><name pos:line="38" pos:column="17">mip<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">.<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="21">gsr_source<pos:position pos:line="38" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="33">source<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">-&gt;<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="41">ipaddr_ptr<pos:position pos:line="38" pos:column="51"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="53">sizeof<argument_list pos:line="38" pos:column="59">(<argument><expr><name><name pos:line="38" pos:column="60">mip<pos:position pos:line="38" pos:column="63"/></name><operator pos:line="38" pos:column="63">.<pos:position pos:line="38" pos:column="64"/></operator><name pos:line="38" pos:column="64">gsr_source<pos:position pos:line="38" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="75"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="77"/></expr_stmt>

        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">setsockopt<pos:position pos:line="40" pos:column="23"/></name><argument_list pos:line="40" pos:column="23">(<argument><expr><name><name pos:line="40" pos:column="24">sock<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">-&gt;<pos:position pos:line="40" pos:column="33"/></operator><name pos:line="40" pos:column="30">socketdes<pos:position pos:line="40" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="41">ip_proto<pos:position pos:line="40" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="51">type<pos:position pos:line="40" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="57">(<pos:position pos:line="40" pos:column="58"/></operator><specifier pos:line="40" pos:column="58">const<pos:position pos:line="40" pos:column="63"/></specifier> <name pos:line="40" pos:column="64">void<pos:position pos:line="40" pos:column="68"/></name> <operator pos:line="40" pos:column="69">*<pos:position pos:line="40" pos:column="70"/></operator><operator pos:line="40" pos:column="70">)<pos:position pos:line="40" pos:column="71"/></operator> <operator pos:line="40" pos:column="72">&amp;<pos:position pos:line="40" pos:column="77"/></operator><name pos:line="40" pos:column="73">mip<pos:position pos:line="40" pos:column="76"/></name></expr></argument>,
                       <argument><expr><sizeof pos:line="41" pos:column="24">sizeof<argument_list pos:line="41" pos:column="30">(<argument><expr><name pos:line="41" pos:column="31">mip<pos:position pos:line="41" pos:column="34"/></name></expr></argument>)<pos:position pos:line="41" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="41" pos:column="36"/></argument_list></call> <operator pos:line="41" pos:column="37">==<pos:position pos:line="41" pos:column="39"/></operator> <operator pos:line="41" pos:column="40">-<pos:position pos:line="41" pos:column="41"/></operator><literal type="number" pos:line="41" pos:column="41">1<pos:position pos:line="41" pos:column="42"/></literal></expr>)<pos:position pos:line="41" pos:column="43"/></condition><then pos:line="41" pos:column="43"> <block pos:line="41" pos:column="44">{
            <expr_stmt><expr><name pos:line="42" pos:column="13">rv<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <name pos:line="42" pos:column="18">errno<pos:position pos:line="42" pos:column="23"/></name></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>
<cpp:else pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">else<pos:position pos:line="44" pos:column="6"/></cpp:directive></cpp:else>
        <comment type="block" pos:line="45" pos:column="9">/* We do not support Source-Specific Multicast. */</comment>
        <return pos:line="46" pos:column="9">return <expr><name pos:line="46" pos:column="16">APR_ENOTIMPL<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></return>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="48" pos:column="6"/></block></then>
    <else pos:line="49" pos:column="5">else <block pos:line="49" pos:column="10">{
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><call><name pos:line="50" pos:column="13">sock_is_ipv4<pos:position pos:line="50" pos:column="25"/></name><argument_list pos:line="50" pos:column="25">(<argument><expr><name pos:line="50" pos:column="26">sock<pos:position pos:line="50" pos:column="30"/></name></expr></argument>)<pos:position pos:line="50" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="32"/></condition><then pos:line="50" pos:column="32"> <block pos:line="50" pos:column="33">{

            <expr_stmt><expr><call><name pos:line="52" pos:column="13">fill_mip_v4<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><operator pos:line="52" pos:column="25">&amp;<pos:position pos:line="52" pos:column="30"/></operator><name pos:line="52" pos:column="26">mip4<pos:position pos:line="52" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="32">mcast<pos:position pos:line="52" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="39">iface<pos:position pos:line="52" pos:column="44"/></name></expr></argument>)<pos:position pos:line="52" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="46"/></expr_stmt>

            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><call><name pos:line="54" pos:column="17">setsockopt<pos:position pos:line="54" pos:column="27"/></name><argument_list pos:line="54" pos:column="27">(<argument><expr><name><name pos:line="54" pos:column="28">sock<pos:position pos:line="54" pos:column="32"/></name><operator pos:line="54" pos:column="32">-&gt;<pos:position pos:line="54" pos:column="37"/></operator><name pos:line="54" pos:column="34">socketdes<pos:position pos:line="54" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="45">IPPROTO_IP<pos:position pos:line="54" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="57">type<pos:position pos:line="54" pos:column="61"/></name></expr></argument>,
                           <argument><expr><operator pos:line="55" pos:column="28">(<pos:position pos:line="55" pos:column="29"/></operator><specifier pos:line="55" pos:column="29">const<pos:position pos:line="55" pos:column="34"/></specifier> <name pos:line="55" pos:column="35">void<pos:position pos:line="55" pos:column="39"/></name> <operator pos:line="55" pos:column="40">*<pos:position pos:line="55" pos:column="41"/></operator><operator pos:line="55" pos:column="41">)<pos:position pos:line="55" pos:column="42"/></operator> <operator pos:line="55" pos:column="43">&amp;<pos:position pos:line="55" pos:column="48"/></operator><name pos:line="55" pos:column="44">mip4<pos:position pos:line="55" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="50">sizeof<argument_list pos:line="55" pos:column="56">(<argument><expr><name pos:line="55" pos:column="57">mip4<pos:position pos:line="55" pos:column="61"/></name></expr></argument>)<pos:position pos:line="55" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="63"/></argument_list></call> <operator pos:line="55" pos:column="64">==<pos:position pos:line="55" pos:column="66"/></operator> <operator pos:line="55" pos:column="67">-<pos:position pos:line="55" pos:column="68"/></operator><literal type="number" pos:line="55" pos:column="68">1<pos:position pos:line="55" pos:column="69"/></literal></expr>)<pos:position pos:line="55" pos:column="70"/></condition><then pos:line="55" pos:column="70"> <block pos:line="55" pos:column="71">{
                <expr_stmt><expr><name pos:line="56" pos:column="17">rv<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <name pos:line="56" pos:column="22">errno<pos:position pos:line="56" pos:column="27"/></name></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt>
            }<pos:position pos:line="57" pos:column="14"/></block></then></if>
        }<pos:position pos:line="58" pos:column="10"/></block></then>
<cpp:if pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">if<pos:position pos:line="59" pos:column="4"/></cpp:directive> <expr><name pos:line="59" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">&amp;&amp;<pos:position pos:line="59" pos:column="29"/></operator> <call><name pos:line="59" pos:column="22">defined<pos:position pos:line="59" pos:column="29"/></name><argument_list pos:line="59" pos:column="29">(<argument><expr><name pos:line="59" pos:column="30">IPV6_JOIN_GROUP<pos:position pos:line="59" pos:column="45"/></name></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call> <operator pos:line="59" pos:column="47">&amp;&amp;<pos:position pos:line="59" pos:column="57"/></operator> <call><name pos:line="59" pos:column="50">defined<pos:position pos:line="59" pos:column="57"/></name><argument_list pos:line="59" pos:column="57">(<argument><expr><name pos:line="59" pos:column="58">IPV6_LEAVE_GROUP<pos:position pos:line="59" pos:column="74"/></name></expr></argument>)<pos:position pos:line="59" pos:column="75"/></argument_list></call></expr></cpp:if>
        <elseif pos:line="60" pos:column="9">else <if pos:line="60" pos:column="14">if <condition pos:line="60" pos:column="17">(<expr><call><name pos:line="60" pos:column="18">sock_is_ipv6<pos:position pos:line="60" pos:column="30"/></name><argument_list pos:line="60" pos:column="30">(<argument><expr><name pos:line="60" pos:column="31">sock<pos:position pos:line="60" pos:column="35"/></name></expr></argument>)<pos:position pos:line="60" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="37"/></condition><then pos:line="60" pos:column="37"> <block pos:line="60" pos:column="38">{
            <if pos:line="61" pos:column="13">if <condition pos:line="61" pos:column="16">(<expr><name pos:line="61" pos:column="17">type<pos:position pos:line="61" pos:column="21"/></name> <operator pos:line="61" pos:column="22">==<pos:position pos:line="61" pos:column="24"/></operator> <name pos:line="61" pos:column="25">IP_ADD_MEMBERSHIP<pos:position pos:line="61" pos:column="42"/></name></expr>)<pos:position pos:line="61" pos:column="43"/></condition><then pos:line="61" pos:column="43"> <block pos:line="61" pos:column="44">{
                <expr_stmt><expr><name pos:line="62" pos:column="17">type<pos:position pos:line="62" pos:column="21"/></name> <operator pos:line="62" pos:column="22">=<pos:position pos:line="62" pos:column="23"/></operator> <name pos:line="62" pos:column="24">IPV6_JOIN_GROUP<pos:position pos:line="62" pos:column="39"/></name></expr>;<pos:position pos:line="62" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="63" pos:column="14"/></block></then>
            <elseif pos:line="64" pos:column="13">else <if pos:line="64" pos:column="18">if <condition pos:line="64" pos:column="21">(<expr><name pos:line="64" pos:column="22">type<pos:position pos:line="64" pos:column="26"/></name> <operator pos:line="64" pos:column="27">==<pos:position pos:line="64" pos:column="29"/></operator> <name pos:line="64" pos:column="30">IP_DROP_MEMBERSHIP<pos:position pos:line="64" pos:column="48"/></name></expr>)<pos:position pos:line="64" pos:column="49"/></condition><then pos:line="64" pos:column="49"> <block pos:line="64" pos:column="50">{
                <expr_stmt><expr><name pos:line="65" pos:column="17">type<pos:position pos:line="65" pos:column="21"/></name> <operator pos:line="65" pos:column="22">=<pos:position pos:line="65" pos:column="23"/></operator> <name pos:line="65" pos:column="24">IPV6_LEAVE_GROUP<pos:position pos:line="65" pos:column="40"/></name></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="66" pos:column="14"/></block></then></if></elseif>
            <else pos:line="67" pos:column="13">else <block pos:line="67" pos:column="18">{
                <return pos:line="68" pos:column="17">return <expr><name pos:line="68" pos:column="24">APR_ENOTIMPL<pos:position pos:line="68" pos:column="36"/></name></expr>;<pos:position pos:line="68" pos:column="37"/></return>
            }<pos:position pos:line="69" pos:column="14"/></block></else></if>

            <expr_stmt><expr><call><name pos:line="71" pos:column="13">fill_mip_v6<pos:position pos:line="71" pos:column="24"/></name><argument_list pos:line="71" pos:column="24">(<argument><expr><operator pos:line="71" pos:column="25">&amp;<pos:position pos:line="71" pos:column="30"/></operator><name pos:line="71" pos:column="26">mip6<pos:position pos:line="71" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="32">mcast<pos:position pos:line="71" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="39">iface<pos:position pos:line="71" pos:column="44"/></name></expr></argument>)<pos:position pos:line="71" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="46"/></expr_stmt>

            <if pos:line="73" pos:column="13">if <condition pos:line="73" pos:column="16">(<expr><call><name pos:line="73" pos:column="17">setsockopt<pos:position pos:line="73" pos:column="27"/></name><argument_list pos:line="73" pos:column="27">(<argument><expr><name><name pos:line="73" pos:column="28">sock<pos:position pos:line="73" pos:column="32"/></name><operator pos:line="73" pos:column="32">-&gt;<pos:position pos:line="73" pos:column="37"/></operator><name pos:line="73" pos:column="34">socketdes<pos:position pos:line="73" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="45">IPPROTO_IPV6<pos:position pos:line="73" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="59">type<pos:position pos:line="73" pos:column="63"/></name></expr></argument>,
                           <argument><expr><operator pos:line="74" pos:column="28">(<pos:position pos:line="74" pos:column="29"/></operator><specifier pos:line="74" pos:column="29">const<pos:position pos:line="74" pos:column="34"/></specifier> <name pos:line="74" pos:column="35">void<pos:position pos:line="74" pos:column="39"/></name> <operator pos:line="74" pos:column="40">*<pos:position pos:line="74" pos:column="41"/></operator><operator pos:line="74" pos:column="41">)<pos:position pos:line="74" pos:column="42"/></operator> <operator pos:line="74" pos:column="43">&amp;<pos:position pos:line="74" pos:column="48"/></operator><name pos:line="74" pos:column="44">mip6<pos:position pos:line="74" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="74" pos:column="50">sizeof<argument_list pos:line="74" pos:column="56">(<argument><expr><name pos:line="74" pos:column="57">mip6<pos:position pos:line="74" pos:column="61"/></name></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="74" pos:column="63"/></argument_list></call> <operator pos:line="74" pos:column="64">==<pos:position pos:line="74" pos:column="66"/></operator> <operator pos:line="74" pos:column="67">-<pos:position pos:line="74" pos:column="68"/></operator><literal type="number" pos:line="74" pos:column="68">1<pos:position pos:line="74" pos:column="69"/></literal></expr>)<pos:position pos:line="74" pos:column="70"/></condition><then pos:line="74" pos:column="70"> <block pos:line="74" pos:column="71">{
                <expr_stmt><expr><name pos:line="75" pos:column="17">rv<pos:position pos:line="75" pos:column="19"/></name> <operator pos:line="75" pos:column="20">=<pos:position pos:line="75" pos:column="21"/></operator> <name pos:line="75" pos:column="22">errno<pos:position pos:line="75" pos:column="27"/></name></expr>;<pos:position pos:line="75" pos:column="28"/></expr_stmt>
            }<pos:position pos:line="76" pos:column="14"/></block></then></if>
        }<pos:position pos:line="77" pos:column="10"/></block></then></if></elseif>
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif>
        <else pos:line="79" pos:column="9">else <block pos:line="79" pos:column="14">{
            <expr_stmt><expr><name pos:line="80" pos:column="13">rv<pos:position pos:line="80" pos:column="15"/></name> <operator pos:line="80" pos:column="16">=<pos:position pos:line="80" pos:column="17"/></operator> <name pos:line="80" pos:column="18">APR_ENOTIMPL<pos:position pos:line="80" pos:column="30"/></name></expr>;<pos:position pos:line="80" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="81" pos:column="10"/></block></else></if>
    }<pos:position pos:line="82" pos:column="6"/></block></else></if>
    <return pos:line="83" pos:column="5">return <expr><name pos:line="83" pos:column="12">rv<pos:position pos:line="83" pos:column="14"/></name></expr>;<pos:position pos:line="83" pos:column="15"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
