<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2224_httpd-2.0.59.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">start_thread<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">void<pos:position pos:line="1" pos:column="29"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="30"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_thread_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">thread<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">rc<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">apr_thread_mutex_lock<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">worker_thread_count_mutex<pos:position pos:line="6" pos:column="52"/></name></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="54"/></expr_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">worker_thread_count<pos:position pos:line="7" pos:column="28"/></name> <operator pos:line="7" pos:column="29">&lt;<pos:position pos:line="7" pos:column="33"/></operator> <name pos:line="7" pos:column="31">max_threads<pos:position pos:line="7" pos:column="42"/></name> <operator pos:line="7" pos:column="43">-<pos:position pos:line="7" pos:column="44"/></operator> <literal type="number" pos:line="7" pos:column="45">1<pos:position pos:line="7" pos:column="46"/></literal></expr>)<pos:position pos:line="7" pos:column="47"/></condition><then pos:line="7" pos:column="47"> <block pos:line="7" pos:column="48">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">rc<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">apr_thread_create<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><operator pos:line="8" pos:column="32">&amp;<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="33">thread<pos:position pos:line="8" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="41">worker_thread_attr<pos:position pos:line="8" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="61">worker_thread<pos:position pos:line="8" pos:column="74"/></name></expr></argument>,
                 <argument><expr><operator pos:line="9" pos:column="18">&amp;<pos:position pos:line="9" pos:column="23"/></operator><name><name pos:line="9" pos:column="19">worker_thread_free_ids<pos:position pos:line="9" pos:column="41"/></name><index pos:line="9" pos:column="41">[<expr><name pos:line="9" pos:column="42">worker_thread_count<pos:position pos:line="9" pos:column="61"/></name></expr>]<pos:position pos:line="9" pos:column="62"/></index></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="64">pchild<pos:position pos:line="9" pos:column="70"/></name></expr></argument>)<pos:position pos:line="9" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="72"/></expr_stmt>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">rc<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">!=<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">APR_SUCCESS<pos:position pos:line="10" pos:column="30"/></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31"> <block pos:line="10" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="11" pos:column="13">ap_log_error<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">APLOG_MARK<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">APLOG_ALERT<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="51">rc<pos:position pos:line="11" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="55">ap_server_conf<pos:position pos:line="11" pos:column="69"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="12" pos:column="26">"apr_thread_create: unable to create worker thread"<pos:position pos:line="12" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="79"/></expr_stmt>
            <comment type="block" pos:line="13" pos:column="13">/* In case system resources are maxxed out, we don't want
               Apache running away with the CPU trying to fork over and
               over and over again if we exit. */</comment>
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">sleep<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><literal type="number" pos:line="16" pos:column="19">10<pos:position pos:line="16" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name pos:line="17" pos:column="13">workers_may_exit<pos:position pos:line="17" pos:column="29"/></name> <operator pos:line="17" pos:column="30">=<pos:position pos:line="17" pos:column="31"/></operator> <literal type="number" pos:line="17" pos:column="32">1<pos:position pos:line="17" pos:column="33"/></literal></expr>;<pos:position pos:line="17" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><name pos:line="18" pos:column="37">worker_thread_count_mutex<pos:position pos:line="18" pos:column="62"/></name></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="64"/></expr_stmt>
            <return pos:line="19" pos:column="13">return <expr><literal type="number" pos:line="19" pos:column="20">0<pos:position pos:line="19" pos:column="21"/></literal></expr>;<pos:position pos:line="19" pos:column="22"/></return>
        }<pos:position pos:line="20" pos:column="10"/></block></then>
        <else pos:line="21" pos:column="9">else <block pos:line="21" pos:column="14">{
            <expr_stmt><expr><name pos:line="22" pos:column="13">worker_thread_count<pos:position pos:line="22" pos:column="32"/></name><operator pos:line="22" pos:column="32">++<pos:position pos:line="22" pos:column="34"/></operator></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></else></if>
    }<pos:position pos:line="24" pos:column="6"/></block></then>
    <else pos:line="25" pos:column="5">else <block pos:line="25" pos:column="10">{
        <decl_stmt><decl><specifier pos:line="26" pos:column="9">static<pos:position pos:line="26" pos:column="15"/></specifier> <type><name pos:line="26" pos:column="16">int<pos:position pos:line="26" pos:column="19"/></name></type> <name pos:line="26" pos:column="20">reported<pos:position pos:line="26" pos:column="28"/></name> <init pos:line="26" pos:column="29">= <expr><literal type="number" pos:line="26" pos:column="31">0<pos:position pos:line="26" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="26" pos:column="33"/></decl_stmt>
        
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">reported<pos:position pos:line="28" pos:column="22"/></name></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23"> <block pos:line="28" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">ap_log_error<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><name pos:line="29" pos:column="26">APLOG_MARK<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="38">APLOG_ERR<pos:position pos:line="29" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="49">0<pos:position pos:line="29" pos:column="50"/></literal></expr></argument>,
                         <argument><expr><name pos:line="30" pos:column="26">ap_server_conf<pos:position pos:line="30" pos:column="40"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="31" pos:column="26">"server reached MaxThreadsPerChild setting, "<pos:position pos:line="31" pos:column="71"/></literal>
                         <literal type="string" pos:line="32" pos:column="26">"consider raising the MaxThreadsPerChild or "<pos:position pos:line="32" pos:column="71"/></literal>
                         <literal type="string" pos:line="33" pos:column="26">"NumServers settings"<pos:position pos:line="33" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="34" pos:column="13">reported<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <literal type="number" pos:line="34" pos:column="24">1<pos:position pos:line="34" pos:column="25"/></literal></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">worker_thread_count_mutex<pos:position pos:line="36" pos:column="58"/></name></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></expr_stmt>
        <return pos:line="37" pos:column="9">return <expr><literal type="number" pos:line="37" pos:column="16">0<pos:position pos:line="37" pos:column="17"/></literal></expr>;<pos:position pos:line="37" pos:column="18"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></else></if>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">apr_thread_mutex_unlock<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">worker_thread_count_mutex<pos:position pos:line="39" pos:column="54"/></name></expr></argument>)<pos:position pos:line="39" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="56"/></expr_stmt>
    <return pos:line="40" pos:column="5">return <expr><literal type="number" pos:line="40" pos:column="12">1<pos:position pos:line="40" pos:column="13"/></literal></expr>;<pos:position pos:line="40" pos:column="14"/></return>

}<pos:position pos:line="42" pos:column="2"/></block></function></unit>
