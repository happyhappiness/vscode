<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_764_httpd-2.4.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">ssl_io_filter_output<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">ap_filter_t<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">f<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="2" pos:column="42">apr_bucket_brigade<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">bb<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">status<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name pos:line="4" pos:column="27">APR_SUCCESS<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ssl_filter_ctx_t<pos:position pos:line="5" pos:column="21"/></name> <modifier pos:line="5" pos:column="22">*<pos:position pos:line="5" pos:column="23"/></modifier></type><name pos:line="5" pos:column="23">filter_ctx<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><name><name pos:line="5" pos:column="36">f<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">ctx<pos:position pos:line="5" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">bio_filter_in_ctx_t<pos:position pos:line="6" pos:column="24"/></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">inctx<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">bio_filter_out_ctx_t<pos:position pos:line="7" pos:column="25"/></name> <modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type><name pos:line="7" pos:column="27">outctx<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_read_type_e<pos:position pos:line="8" pos:column="20"/></name></type> <name pos:line="8" pos:column="21">rblock<pos:position pos:line="8" pos:column="27"/></name> <init pos:line="8" pos:column="28">= <expr><name pos:line="8" pos:column="30">APR_NONBLOCK_READ<pos:position pos:line="8" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="48"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">f<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">c<pos:position pos:line="10" pos:column="13"/></name><operator pos:line="10" pos:column="13">-&gt;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="15">aborted<pos:position pos:line="10" pos:column="22"/></name></name></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23"> <block pos:line="10" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">apr_brigade_cleanup<pos:position pos:line="11" pos:column="28"/></name><argument_list pos:line="11" pos:column="28">(<argument><expr><name pos:line="11" pos:column="29">bb<pos:position pos:line="11" pos:column="31"/></name></expr></argument>)<pos:position pos:line="11" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">APR_ECONNABORTED<pos:position pos:line="12" pos:column="32"/></name></expr>;<pos:position pos:line="12" pos:column="33"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><name><name pos:line="15" pos:column="10">filter_ctx<pos:position pos:line="15" pos:column="20"/></name><operator pos:line="15" pos:column="20">-&gt;<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="22">pssl<pos:position pos:line="15" pos:column="26"/></name></name></expr>)<pos:position pos:line="15" pos:column="27"/></condition><then pos:line="15" pos:column="27"> <block pos:line="15" pos:column="28">{
        <comment type="block" pos:line="16" pos:column="9">/* ssl_filter_io_shutdown was called */</comment>
        <return pos:line="17" pos:column="9">return <expr><call><name pos:line="17" pos:column="16">ap_pass_brigade<pos:position pos:line="17" pos:column="31"/></name><argument_list pos:line="17" pos:column="31">(<argument><expr><name><name pos:line="17" pos:column="32">f<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">-&gt;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="35">next<pos:position pos:line="17" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="41">bb<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="45"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="20" pos:column="5">inctx<pos:position pos:line="20" pos:column="10"/></name> <operator pos:line="20" pos:column="11">=<pos:position pos:line="20" pos:column="12"/></operator> <operator pos:line="20" pos:column="13">(<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">bio_filter_in_ctx_t<pos:position pos:line="20" pos:column="33"/></name> <operator pos:line="20" pos:column="34">*<pos:position pos:line="20" pos:column="35"/></operator><operator pos:line="20" pos:column="35">)<pos:position pos:line="20" pos:column="36"/></operator><name><name pos:line="20" pos:column="36">filter_ctx<pos:position pos:line="20" pos:column="46"/></name><operator pos:line="20" pos:column="46">-&gt;<pos:position pos:line="20" pos:column="51"/></operator><name pos:line="20" pos:column="48">pbioRead<pos:position pos:line="20" pos:column="56"/></name><operator pos:line="20" pos:column="56">-&gt;<pos:position pos:line="20" pos:column="61"/></operator><name pos:line="20" pos:column="58">ptr<pos:position pos:line="20" pos:column="61"/></name></name></expr>;<pos:position pos:line="20" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name pos:line="21" pos:column="5">outctx<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <operator pos:line="21" pos:column="14">(<pos:position pos:line="21" pos:column="15"/></operator><name pos:line="21" pos:column="15">bio_filter_out_ctx_t<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">*<pos:position pos:line="21" pos:column="37"/></operator><operator pos:line="21" pos:column="37">)<pos:position pos:line="21" pos:column="38"/></operator><name><name pos:line="21" pos:column="38">filter_ctx<pos:position pos:line="21" pos:column="48"/></name><operator pos:line="21" pos:column="48">-&gt;<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="50">pbioWrite<pos:position pos:line="21" pos:column="59"/></name><operator pos:line="21" pos:column="59">-&gt;<pos:position pos:line="21" pos:column="64"/></operator><name pos:line="21" pos:column="61">ptr<pos:position pos:line="21" pos:column="64"/></name></name></expr>;<pos:position pos:line="21" pos:column="65"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* When we are the writer, we must initialize the inctx
     * mode so that we block for any required ssl input, because
     * output filtering is always nonblocking.
     */</comment>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">inctx<pos:position pos:line="27" pos:column="10"/></name><operator pos:line="27" pos:column="10">-&gt;<pos:position pos:line="27" pos:column="15"/></operator><name pos:line="27" pos:column="12">mode<pos:position pos:line="27" pos:column="16"/></name></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name pos:line="27" pos:column="19">AP_MODE_READBYTES<pos:position pos:line="27" pos:column="36"/></name></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">inctx<pos:position pos:line="28" pos:column="10"/></name><operator pos:line="28" pos:column="10">-&gt;<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="12">block<pos:position pos:line="28" pos:column="17"/></name></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <name pos:line="28" pos:column="20">APR_BLOCK_READ<pos:position pos:line="28" pos:column="34"/></name></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">(<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">status<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <call><name pos:line="30" pos:column="19">ssl_io_filter_handshake<pos:position pos:line="30" pos:column="42"/></name><argument_list pos:line="30" pos:column="42">(<argument><expr><name pos:line="30" pos:column="43">filter_ctx<pos:position pos:line="30" pos:column="53"/></name></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call><operator pos:line="30" pos:column="54">)<pos:position pos:line="30" pos:column="55"/></operator> <operator pos:line="30" pos:column="56">!=<pos:position pos:line="30" pos:column="58"/></operator> <name pos:line="30" pos:column="59">APR_SUCCESS<pos:position pos:line="30" pos:column="70"/></name></expr>)<pos:position pos:line="30" pos:column="71"/></condition><then pos:line="30" pos:column="71"> <block pos:line="30" pos:column="72">{
        <return pos:line="31" pos:column="9">return <expr><call><name pos:line="31" pos:column="16">ssl_io_filter_error<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name pos:line="31" pos:column="36">f<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="39">bb<pos:position pos:line="31" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">status<pos:position pos:line="31" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="51">0<pos:position pos:line="31" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="54"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <while pos:line="34" pos:column="5">while <condition pos:line="34" pos:column="11">(<expr><operator pos:line="34" pos:column="12">!<pos:position pos:line="34" pos:column="13"/></operator><call><name pos:line="34" pos:column="13">APR_BRIGADE_EMPTY<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name pos:line="34" pos:column="31">bb<pos:position pos:line="34" pos:column="33"/></name></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call> <operator pos:line="34" pos:column="35">&amp;&amp;<pos:position pos:line="34" pos:column="45"/></operator> <name pos:line="34" pos:column="38">status<pos:position pos:line="34" pos:column="44"/></name> <operator pos:line="34" pos:column="45">==<pos:position pos:line="34" pos:column="47"/></operator> <name pos:line="34" pos:column="48">APR_SUCCESS<pos:position pos:line="34" pos:column="59"/></name></expr>)<pos:position pos:line="34" pos:column="60"/></condition> <block pos:line="34" pos:column="61">{
        <decl_stmt><decl><type><name pos:line="35" pos:column="9">apr_bucket<pos:position pos:line="35" pos:column="19"/></name> <modifier pos:line="35" pos:column="20">*<pos:position pos:line="35" pos:column="21"/></modifier></type><name pos:line="35" pos:column="21">bucket<pos:position pos:line="35" pos:column="27"/></name> <init pos:line="35" pos:column="28">= <expr><call><name pos:line="35" pos:column="30">APR_BRIGADE_FIRST<pos:position pos:line="35" pos:column="47"/></name><argument_list pos:line="35" pos:column="47">(<argument><expr><name pos:line="35" pos:column="48">bb<pos:position pos:line="35" pos:column="50"/></name></expr></argument>)<pos:position pos:line="35" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="35" pos:column="52"/></decl_stmt>

        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">APR_BUCKET_IS_METADATA<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name pos:line="37" pos:column="36">bucket<pos:position pos:line="37" pos:column="42"/></name></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="44"/></condition><then pos:line="37" pos:column="44"> <block pos:line="37" pos:column="45">{
            <comment type="block" pos:line="38" pos:column="13">/* Pass through metadata buckets untouched.  EOC is
             * special; terminate the SSL layer first. */</comment>
            <if pos:line="40" pos:column="13">if <condition pos:line="40" pos:column="16">(<expr><call><name pos:line="40" pos:column="17">AP_BUCKET_IS_EOC<pos:position pos:line="40" pos:column="33"/></name><argument_list pos:line="40" pos:column="33">(<argument><expr><name pos:line="40" pos:column="34">bucket<pos:position pos:line="40" pos:column="40"/></name></expr></argument>)<pos:position pos:line="40" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="42"/></condition><then pos:line="40" pos:column="42"> <block pos:line="40" pos:column="43">{
                <expr_stmt><expr><call><name pos:line="41" pos:column="17">ssl_filter_io_shutdown<pos:position pos:line="41" pos:column="39"/></name><argument_list pos:line="41" pos:column="39">(<argument><expr><name pos:line="41" pos:column="40">filter_ctx<pos:position pos:line="41" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="52">f<pos:position pos:line="41" pos:column="53"/></name><operator pos:line="41" pos:column="53">-&gt;<pos:position pos:line="41" pos:column="58"/></operator><name pos:line="41" pos:column="55">c<pos:position pos:line="41" pos:column="56"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="58">0<pos:position pos:line="41" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="61"/></expr_stmt>
            }<pos:position pos:line="42" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">AP_DEBUG_ASSERT<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><call><name pos:line="43" pos:column="29">APR_BRIGADE_EMPTY<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">(<argument><expr><name><name pos:line="43" pos:column="47">outctx<pos:position pos:line="43" pos:column="53"/></name><operator pos:line="43" pos:column="53">-&gt;<pos:position pos:line="43" pos:column="58"/></operator><name pos:line="43" pos:column="55">bb<pos:position pos:line="43" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="43" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="60"/></expr_stmt>

            <comment type="block" pos:line="45" pos:column="13">/* Metadata buckets are passed one per brigade; it might
             * be more efficient (but also more complex) to use
             * outctx-&gt;bb as a true buffer and interleave these with
             * data buckets. */</comment>
            <expr_stmt><expr><call><name pos:line="49" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="49" pos:column="30"/></name><argument_list pos:line="49" pos:column="30">(<argument><expr><name pos:line="49" pos:column="31">bucket<pos:position pos:line="49" pos:column="37"/></name></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">APR_BRIGADE_INSERT_HEAD<pos:position pos:line="50" pos:column="36"/></name><argument_list pos:line="50" pos:column="36">(<argument><expr><name><name pos:line="50" pos:column="37">outctx<pos:position pos:line="50" pos:column="43"/></name><operator pos:line="50" pos:column="43">-&gt;<pos:position pos:line="50" pos:column="48"/></operator><name pos:line="50" pos:column="45">bb<pos:position pos:line="50" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="49">bucket<pos:position pos:line="50" pos:column="55"/></name></expr></argument>)<pos:position pos:line="50" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name pos:line="51" pos:column="13">status<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">=<pos:position pos:line="51" pos:column="21"/></operator> <call><name pos:line="51" pos:column="22">ap_pass_brigade<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><name><name pos:line="51" pos:column="38">f<pos:position pos:line="51" pos:column="39"/></name><operator pos:line="51" pos:column="39">-&gt;<pos:position pos:line="51" pos:column="44"/></operator><name pos:line="51" pos:column="41">next<pos:position pos:line="51" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="47">outctx<pos:position pos:line="51" pos:column="53"/></name><operator pos:line="51" pos:column="53">-&gt;<pos:position pos:line="51" pos:column="58"/></operator><name pos:line="51" pos:column="55">bb<pos:position pos:line="51" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="59"/></expr_stmt>
            <if pos:line="52" pos:column="13">if <condition pos:line="52" pos:column="16">(<expr><name pos:line="52" pos:column="17">status<pos:position pos:line="52" pos:column="23"/></name> <operator pos:line="52" pos:column="24">==<pos:position pos:line="52" pos:column="26"/></operator> <name pos:line="52" pos:column="27">APR_SUCCESS<pos:position pos:line="52" pos:column="38"/></name> <operator pos:line="52" pos:column="39">&amp;&amp;<pos:position pos:line="52" pos:column="49"/></operator> <name><name pos:line="52" pos:column="42">f<pos:position pos:line="52" pos:column="43"/></name><operator pos:line="52" pos:column="43">-&gt;<pos:position pos:line="52" pos:column="48"/></operator><name pos:line="52" pos:column="45">c<pos:position pos:line="52" pos:column="46"/></name><operator pos:line="52" pos:column="46">-&gt;<pos:position pos:line="52" pos:column="51"/></operator><name pos:line="52" pos:column="48">aborted<pos:position pos:line="52" pos:column="55"/></name></name></expr>)<pos:position pos:line="52" pos:column="56"/></condition><then pos:line="52" pos:column="56">
                <block type="pseudo"><expr_stmt><expr><name pos:line="53" pos:column="17">status<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">=<pos:position pos:line="53" pos:column="25"/></operator> <name pos:line="53" pos:column="26">APR_ECONNRESET<pos:position pos:line="53" pos:column="40"/></name></expr>;<pos:position pos:line="53" pos:column="41"/></expr_stmt></block></then></if>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">apr_brigade_cleanup<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name><name pos:line="54" pos:column="33">outctx<pos:position pos:line="54" pos:column="39"/></name><operator pos:line="54" pos:column="39">-&gt;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="41">bb<pos:position pos:line="54" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="55" pos:column="10"/></block></then>
        <else pos:line="56" pos:column="9">else <block pos:line="56" pos:column="14">{
            <comment type="block" pos:line="57" pos:column="13">/* Filter a data bucket. */</comment>
            <decl_stmt><decl><type><specifier pos:line="58" pos:column="13">const<pos:position pos:line="58" pos:column="18"/></specifier> <name pos:line="58" pos:column="19">char<pos:position pos:line="58" pos:column="23"/></name> <modifier pos:line="58" pos:column="24">*<pos:position pos:line="58" pos:column="25"/></modifier></type><name pos:line="58" pos:column="25">data<pos:position pos:line="58" pos:column="29"/></name></decl>;<pos:position pos:line="58" pos:column="30"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="59" pos:column="13">apr_size_t<pos:position pos:line="59" pos:column="23"/></name></type> <name pos:line="59" pos:column="24">len<pos:position pos:line="59" pos:column="27"/></name></decl>;<pos:position pos:line="59" pos:column="28"/></decl_stmt>

            <expr_stmt><expr><name pos:line="61" pos:column="13">status<pos:position pos:line="61" pos:column="19"/></name> <operator pos:line="61" pos:column="20">=<pos:position pos:line="61" pos:column="21"/></operator> <call><name pos:line="61" pos:column="22">apr_bucket_read<pos:position pos:line="61" pos:column="37"/></name><argument_list pos:line="61" pos:column="37">(<argument><expr><name pos:line="61" pos:column="38">bucket<pos:position pos:line="61" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="46">&amp;<pos:position pos:line="61" pos:column="51"/></operator><name pos:line="61" pos:column="47">data<pos:position pos:line="61" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="53">&amp;<pos:position pos:line="61" pos:column="58"/></operator><name pos:line="61" pos:column="54">len<pos:position pos:line="61" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="59">rblock<pos:position pos:line="61" pos:column="65"/></name></expr></argument>)<pos:position pos:line="61" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="67"/></expr_stmt>

            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><call><name pos:line="63" pos:column="17">APR_STATUS_IS_EAGAIN<pos:position pos:line="63" pos:column="37"/></name><argument_list pos:line="63" pos:column="37">(<argument><expr><name pos:line="63" pos:column="38">status<pos:position pos:line="63" pos:column="44"/></name></expr></argument>)<pos:position pos:line="63" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="46"/></condition><then pos:line="63" pos:column="46"> <block pos:line="63" pos:column="47">{
                <comment type="block" pos:line="64" pos:column="17">/* No data available: flush... */</comment>
                <if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><call><name pos:line="65" pos:column="21">bio_filter_out_flush<pos:position pos:line="65" pos:column="41"/></name><argument_list pos:line="65" pos:column="41">(<argument><expr><name><name pos:line="65" pos:column="42">filter_ctx<pos:position pos:line="65" pos:column="52"/></name><operator pos:line="65" pos:column="52">-&gt;<pos:position pos:line="65" pos:column="57"/></operator><name pos:line="65" pos:column="54">pbioWrite<pos:position pos:line="65" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="64"/></argument_list></call> <operator pos:line="65" pos:column="65">&lt;<pos:position pos:line="65" pos:column="69"/></operator> <literal type="number" pos:line="65" pos:column="67">0<pos:position pos:line="65" pos:column="68"/></literal></expr>)<pos:position pos:line="65" pos:column="69"/></condition><then pos:line="65" pos:column="69"> <block pos:line="65" pos:column="70">{
                    <expr_stmt><expr><name pos:line="66" pos:column="21">status<pos:position pos:line="66" pos:column="27"/></name> <operator pos:line="66" pos:column="28">=<pos:position pos:line="66" pos:column="29"/></operator> <name><name pos:line="66" pos:column="30">outctx<pos:position pos:line="66" pos:column="36"/></name><operator pos:line="66" pos:column="36">-&gt;<pos:position pos:line="66" pos:column="41"/></operator><name pos:line="66" pos:column="38">rc<pos:position pos:line="66" pos:column="40"/></name></name></expr>;<pos:position pos:line="66" pos:column="41"/></expr_stmt>
                    <break pos:line="67" pos:column="21">break;<pos:position pos:line="67" pos:column="27"/></break>
                }<pos:position pos:line="68" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="69" pos:column="17">rblock<pos:position pos:line="69" pos:column="23"/></name> <operator pos:line="69" pos:column="24">=<pos:position pos:line="69" pos:column="25"/></operator> <name pos:line="69" pos:column="26">APR_BLOCK_READ<pos:position pos:line="69" pos:column="40"/></name></expr>;<pos:position pos:line="69" pos:column="41"/></expr_stmt>
                <comment type="block" pos:line="70" pos:column="17">/* and try again with a blocking read. */</comment>
                <expr_stmt><expr><name pos:line="71" pos:column="17">status<pos:position pos:line="71" pos:column="23"/></name> <operator pos:line="71" pos:column="24">=<pos:position pos:line="71" pos:column="25"/></operator> <name pos:line="71" pos:column="26">APR_SUCCESS<pos:position pos:line="71" pos:column="37"/></name></expr>;<pos:position pos:line="71" pos:column="38"/></expr_stmt>
                <continue pos:line="72" pos:column="17">continue;<pos:position pos:line="72" pos:column="26"/></continue>
            }<pos:position pos:line="73" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="75" pos:column="13">rblock<pos:position pos:line="75" pos:column="19"/></name> <operator pos:line="75" pos:column="20">=<pos:position pos:line="75" pos:column="21"/></operator> <name pos:line="75" pos:column="22">APR_NONBLOCK_READ<pos:position pos:line="75" pos:column="39"/></name></expr>;<pos:position pos:line="75" pos:column="40"/></expr_stmt>

            <if pos:line="77" pos:column="13">if <condition pos:line="77" pos:column="16">(<expr><operator pos:line="77" pos:column="17">!<pos:position pos:line="77" pos:column="18"/></operator><call><name pos:line="77" pos:column="18">APR_STATUS_IS_EOF<pos:position pos:line="77" pos:column="35"/></name><argument_list pos:line="77" pos:column="35">(<argument><expr><name pos:line="77" pos:column="36">status<pos:position pos:line="77" pos:column="42"/></name></expr></argument>)<pos:position pos:line="77" pos:column="43"/></argument_list></call> <operator pos:line="77" pos:column="44">&amp;&amp;<pos:position pos:line="77" pos:column="54"/></operator> <operator pos:line="77" pos:column="47">(<pos:position pos:line="77" pos:column="48"/></operator><name pos:line="77" pos:column="48">status<pos:position pos:line="77" pos:column="54"/></name> <operator pos:line="77" pos:column="55">!=<pos:position pos:line="77" pos:column="57"/></operator> <name pos:line="77" pos:column="58">APR_SUCCESS<pos:position pos:line="77" pos:column="69"/></name><operator pos:line="77" pos:column="69">)<pos:position pos:line="77" pos:column="70"/></operator></expr>)<pos:position pos:line="77" pos:column="71"/></condition><then pos:line="77" pos:column="71"> <block pos:line="77" pos:column="72">{
                <break pos:line="78" pos:column="17">break;<pos:position pos:line="78" pos:column="23"/></break>
            }<pos:position pos:line="79" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="81" pos:column="13">status<pos:position pos:line="81" pos:column="19"/></name> <operator pos:line="81" pos:column="20">=<pos:position pos:line="81" pos:column="21"/></operator> <call><name pos:line="81" pos:column="22">ssl_filter_write<pos:position pos:line="81" pos:column="38"/></name><argument_list pos:line="81" pos:column="38">(<argument><expr><name pos:line="81" pos:column="39">f<pos:position pos:line="81" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="42">data<pos:position pos:line="81" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="48">len<pos:position pos:line="81" pos:column="51"/></name></expr></argument>)<pos:position pos:line="81" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">apr_bucket_delete<pos:position pos:line="82" pos:column="30"/></name><argument_list pos:line="82" pos:column="30">(<argument><expr><name pos:line="82" pos:column="31">bucket<pos:position pos:line="82" pos:column="37"/></name></expr></argument>)<pos:position pos:line="82" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="83" pos:column="10"/></block></else></if>

    }<pos:position pos:line="85" pos:column="6"/></block></while>

    <return pos:line="87" pos:column="5">return <expr><name pos:line="87" pos:column="12">status<pos:position pos:line="87" pos:column="18"/></name></expr>;<pos:position pos:line="87" pos:column="19"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
