<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2776_httpd-2.0.63.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier> <specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier></type> <name><name pos:line="1" pos:column="39">argv<pos:position pos:line="1" pos:column="43"/></name><index pos:line="1" pos:column="43">[]<pos:position pos:line="1" pos:column="45"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_pool_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">context<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_socket_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">sock<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_socket_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">sock2<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">length<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_int32_t<pos:position pos:line="8" pos:column="16"/></name></type> <name pos:line="8" pos:column="17">pollres<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_pollfd_t<pos:position pos:line="9" pos:column="17"/></name> <modifier pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></modifier></type><name pos:line="9" pos:column="19">sdset<pos:position pos:line="9" pos:column="24"/></name></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name></type> <name><name pos:line="10" pos:column="10">datasend<pos:position pos:line="10" pos:column="18"/></name><index pos:line="10" pos:column="18">[<expr><name pos:line="10" pos:column="19">STRLEN<pos:position pos:line="10" pos:column="25"/></name></expr>]<pos:position pos:line="10" pos:column="26"/></index></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name></type> <name><name pos:line="11" pos:column="10">datarecv<pos:position pos:line="11" pos:column="18"/></name><index pos:line="11" pos:column="18">[<expr><name pos:line="11" pos:column="19">STRLEN<pos:position pos:line="11" pos:column="25"/></name></expr>]<pos:position pos:line="11" pos:column="26"/></index></name> <init pos:line="11" pos:column="27">= <expr><literal type="string" pos:line="11" pos:column="29">"Recv data test"<pos:position pos:line="11" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">bind_to_ipaddr<pos:position pos:line="12" pos:column="31"/></name> <init pos:line="12" pos:column="32">= <expr><name pos:line="12" pos:column="34">NULL<pos:position pos:line="12" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">local_ipaddr<pos:position pos:line="13" pos:column="23"/></name></decl>, <modifier pos:line="13" pos:column="25">*<pos:position pos:line="13" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="13" pos:column="26">remote_ipaddr<pos:position pos:line="13" pos:column="39"/></name></decl>;<pos:position pos:line="13" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">apr_port_t<pos:position pos:line="14" pos:column="15"/></name></type> <name pos:line="14" pos:column="16">local_port<pos:position pos:line="14" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="14" pos:column="28">remote_port<pos:position pos:line="14" pos:column="39"/></name></decl>;<pos:position pos:line="14" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">apr_sockaddr_t<pos:position pos:line="15" pos:column="19"/></name> <modifier pos:line="15" pos:column="20">*<pos:position pos:line="15" pos:column="21"/></modifier></type><name pos:line="15" pos:column="21">localsa<pos:position pos:line="15" pos:column="28"/></name> <init pos:line="15" pos:column="29">= <expr><name pos:line="15" pos:column="31">NULL<pos:position pos:line="15" pos:column="35"/></name></expr></init></decl>, <modifier pos:line="15" pos:column="37">*<pos:position pos:line="15" pos:column="38"/></modifier><decl><type ref="prev"/><name pos:line="15" pos:column="38">remotesa<pos:position pos:line="15" pos:column="46"/></name></decl>;<pos:position pos:line="15" pos:column="47"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">apr_status_t<pos:position pos:line="16" pos:column="17"/></name></type> <name pos:line="16" pos:column="18">stat<pos:position pos:line="16" pos:column="22"/></name></decl>;<pos:position pos:line="16" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">family<pos:position pos:line="17" pos:column="15"/></name> <init pos:line="17" pos:column="16">= <expr><name pos:line="17" pos:column="18">APR_UNSPEC<pos:position pos:line="17" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">protocol<pos:position pos:line="18" pos:column="17"/></name></decl>;<pos:position pos:line="18" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">apr_getopt_t<pos:position pos:line="19" pos:column="17"/></name> <modifier pos:line="19" pos:column="18">*<pos:position pos:line="19" pos:column="19"/></modifier></type><name pos:line="19" pos:column="19">opt<pos:position pos:line="19" pos:column="22"/></name></decl>;<pos:position pos:line="19" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="20" pos:column="5">const<pos:position pos:line="20" pos:column="10"/></specifier> <name pos:line="20" pos:column="11">char<pos:position pos:line="20" pos:column="15"/></name> <modifier pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></modifier></type><name pos:line="20" pos:column="17">optarg<pos:position pos:line="20" pos:column="23"/></name></decl>;<pos:position pos:line="20" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name></type> <name pos:line="21" pos:column="10">optchar<pos:position pos:line="21" pos:column="17"/></name></decl>;<pos:position pos:line="21" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">APR_TEST_INITIALIZE<pos:position pos:line="23" pos:column="24"/></name><argument_list pos:line="23" pos:column="24">(<argument><expr><name pos:line="23" pos:column="25">rv<pos:position pos:line="23" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="29">context<pos:position pos:line="23" pos:column="36"/></name></expr></argument>)<pos:position pos:line="23" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt>

    <macro><name pos:line="25" pos:column="5">APR_TEST_SUCCESS<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument pos:line="25" pos:column="22">rv<pos:position pos:line="25" pos:column="24"/></argument>, <argument><literal type="string" pos:line="25" pos:column="26">"Preparing getopt"<pos:position pos:line="25" pos:column="44"/></literal></argument>, 
                     <argument pos:line="26" pos:column="22">apr_getopt_init(&amp;opt, context, argc, argv)<pos:position pos:line="26" pos:column="64"/></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></macro>
    
    <while pos:line="28" pos:column="5">while <condition pos:line="28" pos:column="11">(<expr><operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">stat<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">=<pos:position pos:line="28" pos:column="19"/></operator> <call><name pos:line="28" pos:column="20">apr_getopt<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">opt<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="36">"i:"<pos:position pos:line="28" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="28" pos:column="42">&amp;<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="43">optchar<pos:position pos:line="28" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="52">&amp;<pos:position pos:line="28" pos:column="57"/></operator><name pos:line="28" pos:column="53">optarg<pos:position pos:line="28" pos:column="59"/></name></expr></argument>)<pos:position pos:line="28" pos:column="60"/></argument_list></call><operator pos:line="28" pos:column="60">)<pos:position pos:line="28" pos:column="61"/></operator> <operator pos:line="28" pos:column="62">==<pos:position pos:line="28" pos:column="64"/></operator> <name pos:line="28" pos:column="65">APR_SUCCESS<pos:position pos:line="28" pos:column="76"/></name></expr>)<pos:position pos:line="28" pos:column="77"/></condition> <block pos:line="28" pos:column="78">{
        <switch pos:line="29" pos:column="9">switch<condition pos:line="29" pos:column="15">(<expr><name pos:line="29" pos:column="16">optchar<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition> <block pos:line="29" pos:column="25">{
        <case pos:line="30" pos:column="9">case <expr><literal type="char" pos:line="30" pos:column="14">'i'<pos:position pos:line="30" pos:column="17"/></literal></expr>:<pos:position pos:line="30" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="31" pos:column="13">bind_to_ipaddr<pos:position pos:line="31" pos:column="27"/></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">optarg<pos:position pos:line="31" pos:column="36"/></name></expr>;<pos:position pos:line="31" pos:column="37"/></expr_stmt>
            <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>
        }<pos:position pos:line="33" pos:column="10"/></block></switch>
    }<pos:position pos:line="34" pos:column="6"/></block></while>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">stat<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">!=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">APR_EOF<pos:position pos:line="35" pos:column="24"/></name></expr>)<pos:position pos:line="35" pos:column="25"/></condition><then pos:line="35" pos:column="25"> <block pos:line="35" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">fprintf<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">(<argument><expr><name pos:line="36" pos:column="17">stderr<pos:position pos:line="36" pos:column="23"/></name></expr></argument>,
                <argument><expr><literal type="string" pos:line="37" pos:column="17">"usage: %s [-i local-interface-address]\n"<pos:position pos:line="37" pos:column="59"/></literal></expr></argument>,
                <argument><expr><name><name pos:line="38" pos:column="17">argv<pos:position pos:line="38" pos:column="21"/></name><index pos:line="38" pos:column="21">[<expr><literal type="number" pos:line="38" pos:column="22">0<pos:position pos:line="38" pos:column="23"/></literal></expr>]<pos:position pos:line="38" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="38" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">exit<pos:position pos:line="39" pos:column="13"/></name><argument_list pos:line="39" pos:column="13">(<argument><expr><operator pos:line="39" pos:column="14">-<pos:position pos:line="39" pos:column="15"/></operator><literal type="number" pos:line="39" pos:column="15">1<pos:position pos:line="39" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">bind_to_ipaddr<pos:position pos:line="42" pos:column="23"/></name></expr>)<pos:position pos:line="42" pos:column="24"/></condition><then pos:line="42" pos:column="24"> <block pos:line="42" pos:column="25">{
        <comment type="block" pos:line="43" pos:column="9">/* First, parse/resolve ipaddr so we know what address family of
         * socket we need.  We'll use the returned sockaddr later when
         * we bind.
         */</comment>
        <macro><name pos:line="47" pos:column="9">APR_TEST_SUCCESS<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument pos:line="47" pos:column="26">rv<pos:position pos:line="47" pos:column="28"/></argument>, <argument><literal type="string" pos:line="47" pos:column="30">"Preparing sockaddr"<pos:position pos:line="47" pos:column="50"/></literal></argument>, 
            <argument pos:line="48" pos:column="13">apr_sockaddr_info_get(&amp;localsa, bind_to_ipaddr, APR_UNSPEC, <literal type="number" pos:line="48" pos:column="73">8021<pos:position pos:line="48" pos:column="77"/></literal>, <literal type="number" pos:line="48" pos:column="79">0<pos:position pos:line="48" pos:column="80"/></literal>, context)<pos:position pos:line="48" pos:column="90"/></argument>)<pos:position pos:line="48" pos:column="91"/></argument_list></macro>
        <expr_stmt><expr><name pos:line="49" pos:column="9">family<pos:position pos:line="49" pos:column="15"/></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <name><name pos:line="49" pos:column="18">localsa<pos:position pos:line="49" pos:column="25"/></name><operator pos:line="49" pos:column="25">-&gt;<pos:position pos:line="49" pos:column="30"/></operator><name pos:line="49" pos:column="27">family<pos:position pos:line="49" pos:column="33"/></name></name></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <macro><name pos:line="52" pos:column="5">APR_TEST_SUCCESS<pos:position pos:line="52" pos:column="21"/></name><argument_list pos:line="52" pos:column="21">(<argument pos:line="52" pos:column="22">rv<pos:position pos:line="52" pos:column="24"/></argument>, <argument><literal type="string" pos:line="52" pos:column="26">"Creating new socket"<pos:position pos:line="52" pos:column="47"/></literal></argument>, 
        <argument pos:line="53" pos:column="9">apr_socket_create_ex(&amp;sock, family, SOCK_STREAM, APR_PROTO_TCP, context)<pos:position pos:line="53" pos:column="81"/></argument>)<pos:position pos:line="53" pos:column="82"/></argument_list></macro>

    <macro><name pos:line="55" pos:column="5">APR_TEST_SUCCESS<pos:position pos:line="55" pos:column="21"/></name><argument_list pos:line="55" pos:column="21">(<argument pos:line="55" pos:column="22">rv<pos:position pos:line="55" pos:column="24"/></argument>, <argument><literal type="string" pos:line="55" pos:column="26">"Setting option APR_SO_NONBLOCK"<pos:position pos:line="55" pos:column="58"/></literal></argument>,
        <argument pos:line="56" pos:column="9">apr_socket_opt_set(sock, APR_SO_NONBLOCK, <literal type="number" pos:line="56" pos:column="51">1<pos:position pos:line="56" pos:column="52"/></literal>)<pos:position pos:line="56" pos:column="53"/></argument>)<pos:position pos:line="56" pos:column="54"/></argument_list></macro>

    <macro><name pos:line="58" pos:column="5">APR_TEST_SUCCESS<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument pos:line="58" pos:column="22">rv<pos:position pos:line="58" pos:column="24"/></argument>, <argument><literal type="string" pos:line="58" pos:column="26">"Setting option APR_SO_REUSEADDR"<pos:position pos:line="58" pos:column="59"/></literal></argument>,
        <argument pos:line="59" pos:column="9">apr_socket_opt_set(sock, APR_SO_REUSEADDR, <literal type="number" pos:line="59" pos:column="52">1<pos:position pos:line="59" pos:column="53"/></literal>)<pos:position pos:line="59" pos:column="54"/></argument>)<pos:position pos:line="59" pos:column="55"/></argument_list></macro>

    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><operator pos:line="61" pos:column="9">!<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">localsa<pos:position pos:line="61" pos:column="17"/></name></expr>)<pos:position pos:line="61" pos:column="18"/></condition><then pos:line="61" pos:column="18"> <block pos:line="61" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">apr_socket_addr_get<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><operator pos:line="62" pos:column="29">&amp;<pos:position pos:line="62" pos:column="34"/></operator><name pos:line="62" pos:column="30">localsa<pos:position pos:line="62" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="39">APR_LOCAL<pos:position pos:line="62" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="50">sock<pos:position pos:line="62" pos:column="54"/></name></expr></argument>)<pos:position pos:line="62" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">apr_sockaddr_port_set<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><name pos:line="63" pos:column="31">localsa<pos:position pos:line="63" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="63" pos:column="40">8021<pos:position pos:line="63" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>

    <macro><name pos:line="66" pos:column="5">APR_TEST_SUCCESS<pos:position pos:line="66" pos:column="21"/></name><argument_list pos:line="66" pos:column="21">(<argument pos:line="66" pos:column="22">rv<pos:position pos:line="66" pos:column="24"/></argument>, <argument><literal type="string" pos:line="66" pos:column="26">"Binding socket to port"<pos:position pos:line="66" pos:column="50"/></literal></argument>,
        <argument pos:line="67" pos:column="9">apr_socket_bind(sock, localsa)<pos:position pos:line="67" pos:column="39"/></argument>)<pos:position pos:line="67" pos:column="40"/></argument_list></macro>
    
    <macro><name pos:line="69" pos:column="5">APR_TEST_SUCCESS<pos:position pos:line="69" pos:column="21"/></name><argument_list pos:line="69" pos:column="21">(<argument pos:line="69" pos:column="22">rv<pos:position pos:line="69" pos:column="24"/></argument>, <argument><literal type="string" pos:line="69" pos:column="26">"Listening to socket"<pos:position pos:line="69" pos:column="47"/></literal></argument>,
        <argument pos:line="70" pos:column="9">apr_socket_listen(sock, <literal type="number" pos:line="70" pos:column="33">5<pos:position pos:line="70" pos:column="34"/></literal>)<pos:position pos:line="70" pos:column="35"/></argument>)<pos:position pos:line="70" pos:column="36"/></argument_list></macro>
    
    <macro><name pos:line="72" pos:column="5">APR_TEST_BEGIN<pos:position pos:line="72" pos:column="19"/></name><argument_list pos:line="72" pos:column="19">(<argument pos:line="72" pos:column="20">rv<pos:position pos:line="72" pos:column="22"/></argument>, <argument><literal type="string" pos:line="72" pos:column="24">"Setting up for polling"<pos:position pos:line="72" pos:column="48"/></literal></argument>,
        <argument pos:line="73" pos:column="9">apr_poll_setup(&amp;sdset, <literal type="number" pos:line="73" pos:column="32">1<pos:position pos:line="73" pos:column="33"/></literal>, context)<pos:position pos:line="73" pos:column="43"/></argument>)<pos:position pos:line="73" pos:column="44"/></argument_list></macro>
    <macro><name pos:line="74" pos:column="5">APR_TEST_END<pos:position pos:line="74" pos:column="17"/></name><argument_list pos:line="74" pos:column="17">(<argument pos:line="74" pos:column="18">rv<pos:position pos:line="74" pos:column="20"/></argument>, 
        <argument pos:line="75" pos:column="9">apr_poll_socket_add(sdset, sock, APR_POLLIN)<pos:position pos:line="75" pos:column="53"/></argument>)<pos:position pos:line="75" pos:column="54"/></argument_list></macro>
    
    <expr_stmt><expr><name pos:line="77" pos:column="5">pollres<pos:position pos:line="77" pos:column="12"/></name> <operator pos:line="77" pos:column="13">=<pos:position pos:line="77" pos:column="14"/></operator> <literal type="number" pos:line="77" pos:column="15">1<pos:position pos:line="77" pos:column="16"/></literal></expr>;<pos:position pos:line="77" pos:column="17"/></expr_stmt> 
    <macro><name pos:line="78" pos:column="5">APR_TEST_BEGIN<pos:position pos:line="78" pos:column="19"/></name><argument_list pos:line="78" pos:column="19">(<argument pos:line="78" pos:column="20">rv<pos:position pos:line="78" pos:column="22"/></argument>, <argument><literal type="string" pos:line="78" pos:column="24">"Polling for socket"<pos:position pos:line="78" pos:column="44"/></literal></argument>,
        <argument pos:line="79" pos:column="9">apr_poll(sdset, <literal type="number" pos:line="79" pos:column="25">1<pos:position pos:line="79" pos:column="26"/></literal>, &amp;pollres, -<literal type="number" pos:line="79" pos:column="39">1<pos:position pos:line="79" pos:column="40"/></literal>)<pos:position pos:line="79" pos:column="41"/></argument>)<pos:position pos:line="79" pos:column="42"/></argument_list></macro>

    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name pos:line="81" pos:column="9">pollres<pos:position pos:line="81" pos:column="16"/></name> <operator pos:line="81" pos:column="17">==<pos:position pos:line="81" pos:column="19"/></operator> <literal type="number" pos:line="81" pos:column="20">0<pos:position pos:line="81" pos:column="21"/></literal></expr>)<pos:position pos:line="81" pos:column="22"/></condition><then pos:line="81" pos:column="22"> <block pos:line="81" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">fprintf<pos:position pos:line="82" pos:column="16"/></name><argument_list pos:line="82" pos:column="16">(<argument><expr><name pos:line="82" pos:column="17">stdout<pos:position pos:line="82" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="25">"Failed\n"<pos:position pos:line="82" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">apr_socket_close<pos:position pos:line="83" pos:column="25"/></name><argument_list pos:line="83" pos:column="25">(<argument><expr><name pos:line="83" pos:column="26">sock<pos:position pos:line="83" pos:column="30"/></name></expr></argument>)<pos:position pos:line="83" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="84" pos:column="9">fprintf<pos:position pos:line="84" pos:column="16"/></name><argument_list pos:line="84" pos:column="16">(<argument><expr><name pos:line="84" pos:column="17">stderr<pos:position pos:line="84" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="25">"Error: Unrecognized poll result, "<pos:position pos:line="84" pos:column="60"/></literal>
                <literal type="string" pos:line="85" pos:column="17">"expected 1, received %d\n"<pos:position pos:line="85" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="85" pos:column="46">pollres<pos:position pos:line="85" pos:column="53"/></name></expr></argument>)<pos:position pos:line="85" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="86" pos:column="9">exit<pos:position pos:line="86" pos:column="13"/></name><argument_list pos:line="86" pos:column="13">(<argument><expr><operator pos:line="86" pos:column="14">-<pos:position pos:line="86" pos:column="15"/></operator><literal type="number" pos:line="86" pos:column="15">1<pos:position pos:line="86" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="87" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">fprintf<pos:position pos:line="88" pos:column="12"/></name><argument_list pos:line="88" pos:column="12">(<argument><expr><name pos:line="88" pos:column="13">stdout<pos:position pos:line="88" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="21">"OK\n"<pos:position pos:line="88" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="29"/></expr_stmt>

    <macro><name pos:line="90" pos:column="5">APR_TEST_SUCCESS<pos:position pos:line="90" pos:column="21"/></name><argument_list pos:line="90" pos:column="21">(<argument pos:line="90" pos:column="22">rv<pos:position pos:line="90" pos:column="24"/></argument>, <argument><literal type="string" pos:line="90" pos:column="26">"Accepting a connection"<pos:position pos:line="90" pos:column="50"/></literal></argument>,
        <argument pos:line="91" pos:column="9">apr_socket_accept(&amp;sock2, sock, context)<pos:position pos:line="91" pos:column="49"/></argument>)<pos:position pos:line="91" pos:column="50"/></argument_list></macro>

    <expr_stmt><expr><call><name pos:line="93" pos:column="5">apr_socket_protocol_get<pos:position pos:line="93" pos:column="28"/></name><argument_list pos:line="93" pos:column="28">(<argument><expr><name pos:line="93" pos:column="29">sock2<pos:position pos:line="93" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="93" pos:column="36">&amp;<pos:position pos:line="93" pos:column="41"/></operator><name pos:line="93" pos:column="37">protocol<pos:position pos:line="93" pos:column="45"/></name></expr></argument>)<pos:position pos:line="93" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="47"/></expr_stmt>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><name pos:line="94" pos:column="9">protocol<pos:position pos:line="94" pos:column="17"/></name> <operator pos:line="94" pos:column="18">!=<pos:position pos:line="94" pos:column="20"/></operator> <name pos:line="94" pos:column="21">APR_PROTO_TCP<pos:position pos:line="94" pos:column="34"/></name></expr>)<pos:position pos:line="94" pos:column="35"/></condition><then pos:line="94" pos:column="35"> <block pos:line="94" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">fprintf<pos:position pos:line="95" pos:column="16"/></name><argument_list pos:line="95" pos:column="16">(<argument><expr><name pos:line="95" pos:column="17">stderr<pos:position pos:line="95" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="25">"Error: protocol not conveyed from listening socket "<pos:position pos:line="95" pos:column="78"/></literal>
                <literal type="string" pos:line="96" pos:column="17">"to connected socket!\n"<pos:position pos:line="96" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">exit<pos:position pos:line="97" pos:column="13"/></name><argument_list pos:line="97" pos:column="13">(<argument><expr><literal type="number" pos:line="97" pos:column="14">1<pos:position pos:line="97" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">apr_socket_addr_get<pos:position pos:line="99" pos:column="24"/></name><argument_list pos:line="99" pos:column="24">(<argument><expr><operator pos:line="99" pos:column="25">&amp;<pos:position pos:line="99" pos:column="30"/></operator><name pos:line="99" pos:column="26">remotesa<pos:position pos:line="99" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="36">APR_REMOTE<pos:position pos:line="99" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="48">sock2<pos:position pos:line="99" pos:column="53"/></name></expr></argument>)<pos:position pos:line="99" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="100" pos:column="5">apr_sockaddr_ip_get<pos:position pos:line="100" pos:column="24"/></name><argument_list pos:line="100" pos:column="24">(<argument><expr><operator pos:line="100" pos:column="25">&amp;<pos:position pos:line="100" pos:column="30"/></operator><name pos:line="100" pos:column="26">remote_ipaddr<pos:position pos:line="100" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="41">remotesa<pos:position pos:line="100" pos:column="49"/></name></expr></argument>)<pos:position pos:line="100" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">apr_sockaddr_port_get<pos:position pos:line="101" pos:column="26"/></name><argument_list pos:line="101" pos:column="26">(<argument><expr><operator pos:line="101" pos:column="27">&amp;<pos:position pos:line="101" pos:column="32"/></operator><name pos:line="101" pos:column="28">remote_port<pos:position pos:line="101" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="41">remotesa<pos:position pos:line="101" pos:column="49"/></name></expr></argument>)<pos:position pos:line="101" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="102" pos:column="5">apr_socket_addr_get<pos:position pos:line="102" pos:column="24"/></name><argument_list pos:line="102" pos:column="24">(<argument><expr><operator pos:line="102" pos:column="25">&amp;<pos:position pos:line="102" pos:column="30"/></operator><name pos:line="102" pos:column="26">localsa<pos:position pos:line="102" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="35">APR_LOCAL<pos:position pos:line="102" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="46">sock2<pos:position pos:line="102" pos:column="51"/></name></expr></argument>)<pos:position pos:line="102" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">apr_sockaddr_ip_get<pos:position pos:line="103" pos:column="24"/></name><argument_list pos:line="103" pos:column="24">(<argument><expr><operator pos:line="103" pos:column="25">&amp;<pos:position pos:line="103" pos:column="30"/></operator><name pos:line="103" pos:column="26">local_ipaddr<pos:position pos:line="103" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="40">localsa<pos:position pos:line="103" pos:column="47"/></name></expr></argument>)<pos:position pos:line="103" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="104" pos:column="5">apr_sockaddr_port_get<pos:position pos:line="104" pos:column="26"/></name><argument_list pos:line="104" pos:column="26">(<argument><expr><operator pos:line="104" pos:column="27">&amp;<pos:position pos:line="104" pos:column="32"/></operator><name pos:line="104" pos:column="28">local_port<pos:position pos:line="104" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="40">localsa<pos:position pos:line="104" pos:column="47"/></name></expr></argument>)<pos:position pos:line="104" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="105" pos:column="5">fprintf<pos:position pos:line="105" pos:column="12"/></name><argument_list pos:line="105" pos:column="12">(<argument><expr><name pos:line="105" pos:column="13">stdout<pos:position pos:line="105" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="21">"Server socket: %s:%u -&gt; %s:%u\n"<pos:position pos:line="105" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="56">local_ipaddr<pos:position pos:line="105" pos:column="68"/></name></expr></argument>, 
            <argument><expr><name pos:line="106" pos:column="13">local_port<pos:position pos:line="106" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="25">remote_ipaddr<pos:position pos:line="106" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="40">remote_port<pos:position pos:line="106" pos:column="51"/></name></expr></argument>)<pos:position pos:line="106" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="53"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="108" pos:column="5">APR_TEST_SUCCESS<pos:position pos:line="108" pos:column="21"/></name><argument_list pos:line="108" pos:column="21">(<argument><expr><name pos:line="108" pos:column="22">rv<pos:position pos:line="108" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="108" pos:column="26">"Setting timeout on client socket"<pos:position pos:line="108" pos:column="60"/></literal></expr></argument>,
        <argument><expr><call><name pos:line="109" pos:column="9">apr_socket_timeout_set<pos:position pos:line="109" pos:column="31"/></name><argument_list pos:line="109" pos:column="31">(<argument><expr><name pos:line="109" pos:column="32">sock2<pos:position pos:line="109" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="109" pos:column="39">apr_time_from_sec<pos:position pos:line="109" pos:column="56"/></name><argument_list pos:line="109" pos:column="56">(<argument><expr><literal type="number" pos:line="109" pos:column="57">3<pos:position pos:line="109" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="109" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="62"/></expr_stmt>

    <expr_stmt><expr><name pos:line="111" pos:column="5">length<pos:position pos:line="111" pos:column="11"/></name> <operator pos:line="111" pos:column="12">=<pos:position pos:line="111" pos:column="13"/></operator> <name pos:line="111" pos:column="14">STRLEN<pos:position pos:line="111" pos:column="20"/></name></expr>;<pos:position pos:line="111" pos:column="21"/></expr_stmt>
    <macro><name pos:line="112" pos:column="5">APR_TEST_BEGIN<pos:position pos:line="112" pos:column="19"/></name><argument_list pos:line="112" pos:column="19">(<argument pos:line="112" pos:column="20">rv<pos:position pos:line="112" pos:column="22"/></argument>, <argument><literal type="string" pos:line="112" pos:column="24">"Receiving data from socket"<pos:position pos:line="112" pos:column="52"/></literal></argument>,
        <argument pos:line="113" pos:column="9">apr_socket_recv(sock2, datasend, &amp;length)<pos:position pos:line="113" pos:column="50"/></argument>)<pos:position pos:line="113" pos:column="51"/></argument_list></macro>

    <if pos:line="115" pos:column="5">if <condition pos:line="115" pos:column="8">(<expr><call><name pos:line="115" pos:column="9">strcmp<pos:position pos:line="115" pos:column="15"/></name><argument_list pos:line="115" pos:column="15">(<argument><expr><name pos:line="115" pos:column="16">datasend<pos:position pos:line="115" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="26">"Send data test"<pos:position pos:line="115" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="115" pos:column="44"/></condition><then pos:line="115" pos:column="44"> <block pos:line="115" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="116" pos:column="9">fprintf<pos:position pos:line="116" pos:column="16"/></name><argument_list pos:line="116" pos:column="16">(<argument><expr><name pos:line="116" pos:column="17">stdout<pos:position pos:line="116" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="25">"Failed\n"<pos:position pos:line="116" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="117" pos:column="9">apr_socket_close<pos:position pos:line="117" pos:column="25"/></name><argument_list pos:line="117" pos:column="25">(<argument><expr><name pos:line="117" pos:column="26">sock<pos:position pos:line="117" pos:column="30"/></name></expr></argument>)<pos:position pos:line="117" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="118" pos:column="9">apr_socket_close<pos:position pos:line="118" pos:column="25"/></name><argument_list pos:line="118" pos:column="25">(<argument><expr><name pos:line="118" pos:column="26">sock2<pos:position pos:line="118" pos:column="31"/></name></expr></argument>)<pos:position pos:line="118" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="119" pos:column="9">fprintf<pos:position pos:line="119" pos:column="16"/></name><argument_list pos:line="119" pos:column="16">(<argument><expr><name pos:line="119" pos:column="17">stderr<pos:position pos:line="119" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="119" pos:column="25">"Error: Unrecognized response;\n"<pos:position pos:line="119" pos:column="58"/></literal>
                <literal type="string" pos:line="120" pos:column="17">"Expected: \"Send data test\"\n"<pos:position pos:line="120" pos:column="49"/></literal>
                <literal type="string" pos:line="121" pos:column="17">"Received: \"%s\"\n"<pos:position pos:line="121" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="121" pos:column="39">datarecv<pos:position pos:line="121" pos:column="47"/></name></expr></argument>)<pos:position pos:line="121" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="122" pos:column="9">exit<pos:position pos:line="122" pos:column="13"/></name><argument_list pos:line="122" pos:column="13">(<argument><expr><operator pos:line="122" pos:column="14">-<pos:position pos:line="122" pos:column="15"/></operator><literal type="number" pos:line="122" pos:column="15">1<pos:position pos:line="122" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="123" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="124" pos:column="5">fprintf<pos:position pos:line="124" pos:column="12"/></name><argument_list pos:line="124" pos:column="12">(<argument><expr><name pos:line="124" pos:column="13">stdout<pos:position pos:line="124" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="124" pos:column="21">"OK\n"<pos:position pos:line="124" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="29"/></expr_stmt>

    <expr_stmt><expr><name pos:line="126" pos:column="5">length<pos:position pos:line="126" pos:column="11"/></name> <operator pos:line="126" pos:column="12">=<pos:position pos:line="126" pos:column="13"/></operator> <macro><name pos:line="126" pos:column="14">STRLEN<pos:position pos:line="126" pos:column="20"/></name></macro></expr></expr_stmt></block></function></unit>
