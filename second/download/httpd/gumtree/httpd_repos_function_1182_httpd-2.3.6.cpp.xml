<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1182_httpd-2.3.6.cpp" pos:tabs="8"><decl_stmt><decl><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">socache_dc_init<pos:position pos:line="1" pos:column="36"/></name><argument_list pos:line="1" pos:column="36">(<argument><expr><name pos:line="1" pos:column="37">ap_socache_instance_t<pos:position pos:line="1" pos:column="58"/></name> <operator pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></operator><name pos:line="1" pos:column="60">ctx<pos:position pos:line="1" pos:column="63"/></name></expr></argument>, 
                                    <argument><expr><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <operator pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></operator></expr></argument><namespace pos:line="2" pos:column="49">namespace<operator pos:line="2" pos:column="58">,<pos:position pos:line="2" pos:column="59"/></operator> 
                                    const struct <name pos:line="3" pos:column="50">ap_socache_hints<pos:position pos:line="3" pos:column="66"/></name> <modifier pos:line="3" pos:column="67">*<pos:position pos:line="3" pos:column="68"/></modifier><name pos:line="3" pos:column="68">hints<pos:position pos:line="3" pos:column="73"/></name><operator pos:line="3" pos:column="73">,<pos:position pos:line="3" pos:column="74"/></operator> 
                                    <name pos:line="4" pos:column="37">server_rec<pos:position pos:line="4" pos:column="47"/></name> <modifier pos:line="4" pos:column="48">*<pos:position pos:line="4" pos:column="49"/></modifier><name pos:line="4" pos:column="49">s<pos:position pos:line="4" pos:column="50"/></name><operator pos:line="4" pos:column="50">,<pos:position pos:line="4" pos:column="51"/></operator> <name pos:line="4" pos:column="52">apr_pool_t<pos:position pos:line="4" pos:column="62"/></name> <modifier pos:line="4" pos:column="63">*<pos:position pos:line="4" pos:column="64"/></modifier><name pos:line="4" pos:column="64">p<pos:position pos:line="4" pos:column="65"/></name></namespace>)<pos:position pos:line="4" pos:column="66"/></argument_list>
<argument_list pos:line="5" pos:column="1">{
<cpp:if pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">if<pos:position pos:line="6" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="6" pos:column="5">0<pos:position pos:line="6" pos:column="6"/></literal></expr></cpp:if>
    <comment type="block" pos:line="7" pos:column="5">/* If a "persistent connection" mode of operation is preferred, you *must*
     * also use the PIDCHECK flag to ensure fork()'d processes don't interlace
     * comms on the same connection as each other. */</comment>
<cpp:define pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">define<pos:position pos:line="10" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="10" pos:column="9">SESSION_CTX_FLAGS<pos:position pos:line="10" pos:column="26"/></name></cpp:macro>        <cpp:value pos:line="10" pos:column="34">SESSION_CTX_FLAG_PERSISTENT | \
                                 SESSION_CTX_FLAG_PERSISTENT_PIDCHECK | \
                                 SESSION_CTX_FLAG_PERSISTENT_RETRY | \
                                 SESSION_CTX_FLAG_PERSISTENT_LATE<pos:position pos:line="13" pos:column="66"/></cpp:value></cpp:define>
<cpp:else pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">else<pos:position pos:line="14" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="15" pos:column="5">/* This mode of operation will open a temporary connection to the 'target'
     * for each cache operation - this makes it safe against fork()
     * automatically. This mode is preferred when running a local proxy (over
     * unix domain sockets) because overhead is negligable and it reduces the
     * performance/stability danger of file-descriptor bloatage. */</comment>
<cpp:define pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">define<pos:position pos:line="20" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="20" pos:column="9">SESSION_CTX_FLAGS<pos:position pos:line="20" pos:column="26"/></name></cpp:macro>        <cpp:value pos:line="20" pos:column="34">0<pos:position pos:line="20" pos:column="35"/></cpp:value></cpp:define>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
    <argument><expr><name><name pos:line="22" pos:column="5">ctx<pos:position pos:line="22" pos:column="8"/></name><operator pos:line="22" pos:column="8">-&gt;<pos:position pos:line="22" pos:column="13"/></operator><name pos:line="22" pos:column="10">dc<pos:position pos:line="22" pos:column="12"/></name></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">DC_CTX_new<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name><name pos:line="22" pos:column="26">ctx<pos:position pos:line="22" pos:column="29"/></name><operator pos:line="22" pos:column="29">-&gt;<pos:position pos:line="22" pos:column="34"/></operator><name pos:line="22" pos:column="31">target<pos:position pos:line="22" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">SESSION_CTX_FLAGS<pos:position pos:line="22" pos:column="56"/></name></expr></argument>)<pos:position pos:line="22" pos:column="57"/></argument_list></call></expr></argument>;
    if <argument><expr><operator pos:line="23" pos:column="8">(<pos:position pos:line="23" pos:column="9"/></operator><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name><name pos:line="23" pos:column="10">ctx<pos:position pos:line="23" pos:column="13"/></name><operator pos:line="23" pos:column="13">-&gt;<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="15">dc<pos:position pos:line="23" pos:column="17"/></name></name><operator pos:line="23" pos:column="17">)<pos:position pos:line="23" pos:column="18"/></operator> <block pos:line="23" pos:column="19">{
        <expr><call><name pos:line="24" pos:column="9">ap_log_error<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">APLOG_MARK<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">APLOG_ERR<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="45">0<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">s<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="51">"distributed scache failed to obtain context"<pos:position pos:line="24" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="97"/></argument_list></call></expr>;
        <return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">APR_EGENERAL<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block>
    <call><name pos:line="27" pos:column="5">ap_log_error<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">APLOG_MARK<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">APLOG_INFO<pos:position pos:line="27" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="42">0<pos:position pos:line="27" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="45">s<pos:position pos:line="27" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="48">"distributed scache context initialised"<pos:position pos:line="27" pos:column="88"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="89"/></argument_list></call></expr></argument>;

    return <argument><expr><name pos:line="29" pos:column="12">APR_SUCCESS<pos:position pos:line="29" pos:column="23"/></name></expr></argument>;
}<pos:position pos:line="30" pos:column="2"/></argument_list></decl></decl_stmt></unit>
