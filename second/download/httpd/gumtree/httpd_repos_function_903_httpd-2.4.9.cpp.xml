<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_903_httpd-2.4.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ssl_hook_pre_config<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">apr_pool_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">pconf<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="2" pos:column="32">apr_pool_t<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">plog<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="3" pos:column="32">apr_pool_t<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">ptemp<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="50"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <comment type="block" pos:line="5" pos:column="5">/* We must register the library in full, to ensure our configuration
     * code can successfully test the SSL environment.
     */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">CRYPTO_malloc_init<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">()<pos:position pos:line="8" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">ERR_load_crypto_strings<pos:position pos:line="9" pos:column="28"/></name><argument_list pos:line="9" pos:column="28">()<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">SSL_load_error_strings<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">()<pos:position pos:line="10" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">SSL_library_init<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">()<pos:position pos:line="11" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><name pos:line="12" pos:column="5">HAVE_ENGINE_LOAD_BUILTIN_ENGINES<pos:position pos:line="12" pos:column="37"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ENGINE_load_builtin_engines<pos:position pos:line="13" pos:column="32"/></name><argument_list pos:line="13" pos:column="32">()<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">OpenSSL_add_all_algorithms<pos:position pos:line="15" pos:column="31"/></name><argument_list pos:line="15" pos:column="31">()<pos:position pos:line="15" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">OPENSSL_load_builtin_modules<pos:position pos:line="16" pos:column="33"/></name><argument_list pos:line="16" pos:column="33">()<pos:position pos:line="16" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/*
     * Let us cleanup the ssl library when the module is unloaded
     */</comment>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">pconf<pos:position pos:line="21" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="38">NULL<pos:position pos:line="21" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="44">ssl_cleanup_pre_config<pos:position pos:line="21" pos:column="66"/></name></expr></argument>,
                                           <argument><expr><name pos:line="22" pos:column="44">apr_pool_cleanup_null<pos:position pos:line="22" pos:column="65"/></name></expr></argument>)<pos:position pos:line="22" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="67"/></expr_stmt>

    <comment type="block" pos:line="24" pos:column="5">/* Register us to handle mod_log_config %c/%x variables */</comment>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">ssl_var_log_config_register<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name pos:line="25" pos:column="33">pconf<pos:position pos:line="25" pos:column="38"/></name></expr></argument>)<pos:position pos:line="25" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="27" pos:column="5">/* Register to handle mod_status status page generation */</comment>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">ssl_scache_status_register<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">pconf<pos:position pos:line="28" pos:column="37"/></name></expr></argument>)<pos:position pos:line="28" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/* Register mutex type names so they can be configured with Mutex */</comment>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">ap_mutex_register<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">pconf<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">SSL_CACHE_MUTEX_TYPE<pos:position pos:line="31" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="52">NULL<pos:position pos:line="31" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="58">APR_LOCK_DEFAULT<pos:position pos:line="31" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="76">0<pos:position pos:line="31" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="79"/></expr_stmt>
<cpp:ifdef pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">ifdef<pos:position pos:line="32" pos:column="7"/></cpp:directive> <name pos:line="32" pos:column="8">HAVE_OCSP_STAPLING<pos:position pos:line="32" pos:column="26"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">ap_mutex_register<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><name pos:line="33" pos:column="23">pconf<pos:position pos:line="33" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="30">SSL_STAPLING_MUTEX_TYPE<pos:position pos:line="33" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">NULL<pos:position pos:line="33" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="61">APR_LOCK_DEFAULT<pos:position pos:line="33" pos:column="77"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="79">0<pos:position pos:line="33" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="82"/></expr_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">OK<pos:position pos:line="36" pos:column="14"/></name></expr>;<pos:position pos:line="36" pos:column="15"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
