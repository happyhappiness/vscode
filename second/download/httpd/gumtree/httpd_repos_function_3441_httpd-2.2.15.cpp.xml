<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3441_httpd-2.2.15.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type> <name pos:line="1" pos:column="8">load_noinstall_path<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">char<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">arg<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">int<pos:position pos:line="1" pos:column="48"/></name></type> <name pos:line="1" pos:column="49">pathlen<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">newarg<pos:position pos:line="3" pos:column="17"/></name></decl>, <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="20">expanded_path<pos:position pos:line="3" pos:column="33"/></name></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">newpathlen<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

    <expr_stmt><expr><name pos:line="6" pos:column="5">newarg<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <operator pos:line="6" pos:column="14">(<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">char<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></operator><operator pos:line="6" pos:column="21">)<pos:position pos:line="6" pos:column="22"/></operator><call><name pos:line="6" pos:column="22">malloc<pos:position pos:line="6" pos:column="28"/></name><argument_list pos:line="6" pos:column="28">(<argument><expr><call><name pos:line="6" pos:column="29">strlen<pos:position pos:line="6" pos:column="35"/></name><argument_list pos:line="6" pos:column="35">(<argument><expr><name pos:line="6" pos:column="36">arg<pos:position pos:line="6" pos:column="39"/></name></expr></argument>)<pos:position pos:line="6" pos:column="40"/></argument_list></call> <operator pos:line="6" pos:column="41">+<pos:position pos:line="6" pos:column="42"/></operator> <literal type="number" pos:line="6" pos:column="43">10<pos:position pos:line="6" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="7" pos:column="5">strcpy<pos:position pos:line="7" pos:column="11"/></name><argument_list pos:line="7" pos:column="11">(<argument><expr><name pos:line="7" pos:column="12">newarg<pos:position pos:line="7" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="20">arg<pos:position pos:line="7" pos:column="23"/></name></expr></argument>)<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">newarg<pos:position pos:line="8" pos:column="11"/></name><index pos:line="8" pos:column="11">[<expr><name pos:line="8" pos:column="12">pathlen<pos:position pos:line="8" pos:column="19"/></name></expr>]<pos:position pos:line="8" pos:column="20"/></index></name> <operator pos:line="8" pos:column="21">=<pos:position pos:line="8" pos:column="22"/></operator> <literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr>;<pos:position pos:line="8" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">newpathlen<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">pathlen<pos:position pos:line="10" pos:column="25"/></name></expr>;<pos:position pos:line="10" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">strcat<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name pos:line="11" pos:column="12">newarg<pos:position pos:line="11" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="20">".libs"<pos:position pos:line="11" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">newpathlen<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">+=<pos:position pos:line="12" pos:column="18"/></operator> <sizeof pos:line="12" pos:column="19">sizeof<argument_list pos:line="12" pos:column="25">(<argument><expr><literal type="string" pos:line="12" pos:column="26">".libs"<pos:position pos:line="12" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="34"/></argument_list></sizeof> <operator pos:line="12" pos:column="35">-<pos:position pos:line="12" pos:column="36"/></operator> <literal type="number" pos:line="12" pos:column="37">1<pos:position pos:line="12" pos:column="38"/></literal></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">newarg<pos:position pos:line="13" pos:column="11"/></name><index pos:line="13" pos:column="11">[<expr><name pos:line="13" pos:column="12">newpathlen<pos:position pos:line="13" pos:column="22"/></name></expr>]<pos:position pos:line="13" pos:column="23"/></index></name> <operator pos:line="13" pos:column="24">=<pos:position pos:line="13" pos:column="25"/></operator> <literal type="number" pos:line="13" pos:column="26">0<pos:position pos:line="13" pos:column="27"/></literal></expr>;<pos:position pos:line="13" pos:column="28"/></expr_stmt>

<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">HAS_REALPATH<pos:position pos:line="15" pos:column="20"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="16" pos:column="5">expanded_path<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">=<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">malloc<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">PATH_MAX<pos:position pos:line="16" pos:column="36"/></name></expr></argument>)<pos:position pos:line="16" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">expanded_path<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <call><name pos:line="17" pos:column="21">realpath<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name pos:line="17" pos:column="30">newarg<pos:position pos:line="17" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="38">expanded_path<pos:position pos:line="17" pos:column="51"/></name></expr></argument>)<pos:position pos:line="17" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="53"/></expr_stmt>
    <comment type="block" pos:line="18" pos:column="5">/* Uh, oh.  There was an error.  Fall back on our first guess. */</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">expanded_path<pos:position pos:line="19" pos:column="23"/></name></expr>)<pos:position pos:line="19" pos:column="24"/></condition><then pos:line="19" pos:column="24"> <block pos:line="19" pos:column="25">{
        <expr_stmt><expr><name pos:line="20" pos:column="9">expanded_path<pos:position pos:line="20" pos:column="22"/></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <name pos:line="20" pos:column="25">newarg<pos:position pos:line="20" pos:column="31"/></name></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
<cpp:else pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">else<pos:position pos:line="22" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="23" pos:column="5">/* We might get ../ or something goofy.  Oh, well. */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">expanded_path<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">=<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">newarg<pos:position pos:line="24" pos:column="27"/></name></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="27" pos:column="5">return <expr><name pos:line="27" pos:column="12">expanded_path<pos:position pos:line="27" pos:column="25"/></name></expr>;<pos:position pos:line="27" pos:column="26"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
