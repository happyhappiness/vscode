<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1139_httpd-2.2.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">cmd_parseflagfield<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">apr_pool_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">p<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">void<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">cfg<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">key<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>,
                                      <parameter><function_decl><type><specifier pos:line="2" pos:column="39">const<pos:position pos:line="2" pos:column="44"/></specifier> <name pos:line="2" pos:column="45">char<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type>(<modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier><name pos:line="2" pos:column="53">parse<pos:position pos:line="2" pos:column="58"/></name>)<parameter_list pos:line="2" pos:column="59">(<parameter><decl><type><name pos:line="2" pos:column="60">apr_pool_t<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type></decl></parameter>,
                                                           <parameter><decl><type><name pos:line="3" pos:column="60">void<pos:position pos:line="3" pos:column="64"/></name> <modifier pos:line="3" pos:column="65">*<pos:position pos:line="3" pos:column="66"/></modifier></type></decl></parameter>,
                                                           <parameter><decl><type><name pos:line="4" pos:column="60">char<pos:position pos:line="4" pos:column="64"/></name> <modifier pos:line="4" pos:column="65">*<pos:position pos:line="4" pos:column="66"/></modifier></type></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="68">char<pos:position pos:line="4" pos:column="72"/></name> <modifier pos:line="4" pos:column="73">*<pos:position pos:line="4" pos:column="74"/></modifier></type></decl></parameter>)<pos:position pos:line="4" pos:column="75"/></parameter_list></function_decl></parameter>)<pos:position pos:line="4" pos:column="76"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">val<pos:position pos:line="6" pos:column="14"/></name></decl>, <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="17">nextp<pos:position pos:line="6" pos:column="22"/></name></decl>, <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="25">endp<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">err<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="9" pos:column="5">endp<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <name pos:line="9" pos:column="12">key<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">+<pos:position pos:line="9" pos:column="17"/></operator> <call><name pos:line="9" pos:column="18">strlen<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">key<pos:position pos:line="9" pos:column="28"/></name></expr></argument>)<pos:position pos:line="9" pos:column="29"/></argument_list></call> <operator pos:line="9" pos:column="30">-<pos:position pos:line="9" pos:column="31"/></operator> <literal type="number" pos:line="9" pos:column="32">1<pos:position pos:line="9" pos:column="33"/></literal></expr>;<pos:position pos:line="9" pos:column="34"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">key<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">!=<pos:position pos:line="10" pos:column="16"/></operator> <literal type="char" pos:line="10" pos:column="17">'['<pos:position pos:line="10" pos:column="20"/></literal> <operator pos:line="10" pos:column="21">||<pos:position pos:line="10" pos:column="23"/></operator> <operator pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></operator><name pos:line="10" pos:column="25">endp<pos:position pos:line="10" pos:column="29"/></name> <operator pos:line="10" pos:column="30">!=<pos:position pos:line="10" pos:column="32"/></operator> <literal type="char" pos:line="10" pos:column="33">']'<pos:position pos:line="10" pos:column="36"/></literal></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37"> <block pos:line="10" pos:column="38">{
        <return pos:line="11" pos:column="9">return <expr><literal type="string" pos:line="11" pos:column="16">"RewriteCond: bad flag delimiters"<pos:position pos:line="11" pos:column="50"/></literal></expr>;<pos:position pos:line="11" pos:column="51"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="14" pos:column="5">*<pos:position pos:line="14" pos:column="6"/></operator><name pos:line="14" pos:column="6">endp<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <literal type="char" pos:line="14" pos:column="13">','<pos:position pos:line="14" pos:column="16"/></literal></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt> <comment type="block" pos:line="14" pos:column="18">/* for simpler parsing */</comment>
    <expr_stmt><expr><operator pos:line="15" pos:column="5">++<pos:position pos:line="15" pos:column="7"/></operator><name pos:line="15" pos:column="7">key<pos:position pos:line="15" pos:column="10"/></name></expr>;<pos:position pos:line="15" pos:column="11"/></expr_stmt>

    <while pos:line="17" pos:column="5">while <condition pos:line="17" pos:column="11">(<expr><operator pos:line="17" pos:column="12">*<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="13">key<pos:position pos:line="17" pos:column="16"/></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition> <block pos:line="17" pos:column="18">{
        <comment type="block" pos:line="18" pos:column="9">/* skip leading spaces */</comment>
        <while pos:line="19" pos:column="9">while <condition pos:line="19" pos:column="15">(<expr><call><name pos:line="19" pos:column="16">apr_isspace<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><operator pos:line="19" pos:column="28">*<pos:position pos:line="19" pos:column="29"/></operator><name pos:line="19" pos:column="29">key<pos:position pos:line="19" pos:column="32"/></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="34"/></condition> <block pos:line="19" pos:column="35">{
            <expr_stmt><expr><operator pos:line="20" pos:column="13">++<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">key<pos:position pos:line="20" pos:column="18"/></name></expr>;<pos:position pos:line="20" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></while>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><operator pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="15">key<pos:position pos:line="23" pos:column="18"/></name> <operator pos:line="23" pos:column="19">||<pos:position pos:line="23" pos:column="21"/></operator> <operator pos:line="23" pos:column="22">(<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="23">nextp<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <call><name pos:line="23" pos:column="31">ap_strchr<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">(<argument><expr><name pos:line="23" pos:column="41">key<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="23" pos:column="46">','<pos:position pos:line="23" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call><operator pos:line="23" pos:column="50">)<pos:position pos:line="23" pos:column="51"/></operator> <operator pos:line="23" pos:column="52">==<pos:position pos:line="23" pos:column="54"/></operator> <name pos:line="23" pos:column="55">NULL<pos:position pos:line="23" pos:column="59"/></name></expr>)<pos:position pos:line="23" pos:column="60"/></condition><then pos:line="23" pos:column="60"> <block pos:line="23" pos:column="61">{ <comment type="block" pos:line="23" pos:column="63">/* NULL should not
                                                               * happen, but ...
                                                               */</comment>
            <break pos:line="26" pos:column="13">break;<pos:position pos:line="26" pos:column="19"/></break>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="29" pos:column="9">/* strip trailing spaces */</comment>
        <expr_stmt><expr><name pos:line="30" pos:column="9">endp<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">=<pos:position pos:line="30" pos:column="15"/></operator> <name pos:line="30" pos:column="16">nextp<pos:position pos:line="30" pos:column="21"/></name> <operator pos:line="30" pos:column="22">-<pos:position pos:line="30" pos:column="23"/></operator> <literal type="number" pos:line="30" pos:column="24">1<pos:position pos:line="30" pos:column="25"/></literal></expr>;<pos:position pos:line="30" pos:column="26"/></expr_stmt>
        <while pos:line="31" pos:column="9">while <condition pos:line="31" pos:column="15">(<expr><call><name pos:line="31" pos:column="16">apr_isspace<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><operator pos:line="31" pos:column="28">*<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="29">endp<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition> <block pos:line="31" pos:column="36">{
            <expr_stmt><expr><operator pos:line="32" pos:column="13">--<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">endp<pos:position pos:line="32" pos:column="19"/></name></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></while>
        <expr_stmt><expr><operator pos:line="34" pos:column="9">*<pos:position pos:line="34" pos:column="10"/></operator><operator pos:line="34" pos:column="10">++<pos:position pos:line="34" pos:column="12"/></operator><name pos:line="34" pos:column="12">endp<pos:position pos:line="34" pos:column="16"/></name> <operator pos:line="34" pos:column="17">=<pos:position pos:line="34" pos:column="18"/></operator> <literal type="char" pos:line="34" pos:column="19">'\0'<pos:position pos:line="34" pos:column="23"/></literal></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>

        <comment type="block" pos:line="36" pos:column="9">/* split key and val */</comment>
        <expr_stmt><expr><name pos:line="37" pos:column="9">val<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <call><name pos:line="37" pos:column="15">ap_strchr<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">key<pos:position pos:line="37" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="37" pos:column="30">'='<pos:position pos:line="37" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="35"/></expr_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">val<pos:position pos:line="38" pos:column="16"/></name></expr>)<pos:position pos:line="38" pos:column="17"/></condition><then pos:line="38" pos:column="17"> <block pos:line="38" pos:column="18">{
            <expr_stmt><expr><operator pos:line="39" pos:column="13">*<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="14">val<pos:position pos:line="39" pos:column="17"/></name><operator pos:line="39" pos:column="17">++<pos:position pos:line="39" pos:column="19"/></operator> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <literal type="char" pos:line="39" pos:column="22">'\0'<pos:position pos:line="39" pos:column="26"/></literal></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></then>
        <else pos:line="41" pos:column="9">else <block pos:line="41" pos:column="14">{
            <expr_stmt><expr><name pos:line="42" pos:column="13">val<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">=<pos:position pos:line="42" pos:column="18"/></operator> <name pos:line="42" pos:column="19">endp<pos:position pos:line="42" pos:column="23"/></name></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="43" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name pos:line="45" pos:column="9">err<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">parse<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">p<pos:position pos:line="45" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="24">cfg<pos:position pos:line="45" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="29">key<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">val<pos:position pos:line="45" pos:column="37"/></name></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">err<pos:position pos:line="46" pos:column="16"/></name></expr>)<pos:position pos:line="46" pos:column="17"/></condition><then pos:line="46" pos:column="17"> <block pos:line="46" pos:column="18">{
            <return pos:line="47" pos:column="13">return <expr><name pos:line="47" pos:column="20">err<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></return>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="50" pos:column="9">key<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <name pos:line="50" pos:column="15">nextp<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">+<pos:position pos:line="50" pos:column="22"/></operator> <literal type="number" pos:line="50" pos:column="23">1<pos:position pos:line="50" pos:column="24"/></literal></expr>;<pos:position pos:line="50" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></while>

    <return pos:line="53" pos:column="5">return <expr><name pos:line="53" pos:column="12">NULL<pos:position pos:line="53" pos:column="16"/></name></expr>;<pos:position pos:line="53" pos:column="17"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
