<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_837_httpd-2.2.23.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">ssl_scache_shmcb_init<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">server_rec<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">s<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">apr_pool_t<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">p<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">SSLModConfigRec<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">mc<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><call><name pos:line="3" pos:column="27">myModConfig<pos:position pos:line="3" pos:column="38"/></name><argument_list pos:line="3" pos:column="38">(<argument><expr><name pos:line="3" pos:column="39">s<pos:position pos:line="3" pos:column="40"/></name></expr></argument>)<pos:position pos:line="3" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">void<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">shm_segment<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">shm_segsize<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">SHMCBHeader<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">header<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">int<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">num_subcache<pos:position pos:line="8" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="32">num_idx<pos:position pos:line="8" pos:column="39"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="41">loop<pos:position pos:line="8" pos:column="45"/></name></decl>;<pos:position pos:line="8" pos:column="46"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* Create shared memory segment */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">mc<pos:position pos:line="11" pos:column="11"/></name><operator pos:line="11" pos:column="11">-&gt;<pos:position pos:line="11" pos:column="16"/></operator><name pos:line="11" pos:column="13">szSessionCacheDataFile<pos:position pos:line="11" pos:column="35"/></name></name> <operator pos:line="11" pos:column="36">==<pos:position pos:line="11" pos:column="38"/></operator> <name pos:line="11" pos:column="39">NULL<pos:position pos:line="11" pos:column="43"/></name></expr>)<pos:position pos:line="11" pos:column="44"/></condition><then pos:line="11" pos:column="44"> <block pos:line="11" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">ap_log_error<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">APLOG_MARK<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="34">APLOG_ERR<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="45">0<pos:position pos:line="12" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="48">s<pos:position pos:line="12" pos:column="49"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="13" pos:column="22">"SSLSessionCache required"<pos:position pos:line="13" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">ssl_die<pos:position pos:line="14" pos:column="16"/></name><argument_list pos:line="14" pos:column="16">()<pos:position pos:line="14" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="17" pos:column="5">/* Use anonymous shm by default, fall back on name-based. */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">rv<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <call><name pos:line="18" pos:column="10">apr_shm_create<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><operator pos:line="18" pos:column="25">&amp;<pos:position pos:line="18" pos:column="30"/></operator><operator pos:line="18" pos:column="26">(<pos:position pos:line="18" pos:column="27"/></operator><name><name pos:line="18" pos:column="27">mc<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">pSessionCacheDataMM<pos:position pos:line="18" pos:column="50"/></name></name><operator pos:line="18" pos:column="50">)<pos:position pos:line="18" pos:column="51"/></operator></expr></argument>, 
                        <argument><expr><name><name pos:line="19" pos:column="25">mc<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">nSessionCacheDataSize<pos:position pos:line="19" pos:column="50"/></name></name></expr></argument>, 
                        <argument><expr><name pos:line="20" pos:column="25">NULL<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="31">mc<pos:position pos:line="20" pos:column="33"/></name><operator pos:line="20" pos:column="33">-&gt;<pos:position pos:line="20" pos:column="38"/></operator><name pos:line="20" pos:column="35">pPool<pos:position pos:line="20" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="42"/></expr_stmt>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">APR_STATUS_IS_ENOTIMPL<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">rv<pos:position pos:line="21" pos:column="34"/></name></expr></argument>)<pos:position pos:line="21" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="36"/></condition><then pos:line="21" pos:column="36"> <block pos:line="21" pos:column="37">{
        <comment type="block" pos:line="22" pos:column="9">/* For a name-based segment, remove it first in case of a
         * previous unclean shutdown. */</comment>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">apr_shm_remove<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name><name pos:line="24" pos:column="24">mc<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">-&gt;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="28">szSessionCacheDataFile<pos:position pos:line="24" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="52">mc<pos:position pos:line="24" pos:column="54"/></name><operator pos:line="24" pos:column="54">-&gt;<pos:position pos:line="24" pos:column="59"/></operator><name pos:line="24" pos:column="56">pPool<pos:position pos:line="24" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>

        <expr_stmt><expr><name pos:line="26" pos:column="9">rv<pos:position pos:line="26" pos:column="11"/></name> <operator pos:line="26" pos:column="12">=<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">apr_shm_create<pos:position pos:line="26" pos:column="28"/></name><argument_list pos:line="26" pos:column="28">(<argument><expr><operator pos:line="26" pos:column="29">&amp;<pos:position pos:line="26" pos:column="34"/></operator><operator pos:line="26" pos:column="30">(<pos:position pos:line="26" pos:column="31"/></operator><name><name pos:line="26" pos:column="31">mc<pos:position pos:line="26" pos:column="33"/></name><operator pos:line="26" pos:column="33">-&gt;<pos:position pos:line="26" pos:column="38"/></operator><name pos:line="26" pos:column="35">pSessionCacheDataMM<pos:position pos:line="26" pos:column="54"/></name></name><operator pos:line="26" pos:column="54">)<pos:position pos:line="26" pos:column="55"/></operator></expr></argument>,
                            <argument><expr><name><name pos:line="27" pos:column="29">mc<pos:position pos:line="27" pos:column="31"/></name><operator pos:line="27" pos:column="31">-&gt;<pos:position pos:line="27" pos:column="36"/></operator><name pos:line="27" pos:column="33">nSessionCacheDataSize<pos:position pos:line="27" pos:column="54"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="28" pos:column="29">mc<pos:position pos:line="28" pos:column="31"/></name><operator pos:line="28" pos:column="31">-&gt;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="33">szSessionCacheDataFile<pos:position pos:line="28" pos:column="55"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="29" pos:column="29">mc<pos:position pos:line="29" pos:column="31"/></name><operator pos:line="29" pos:column="31">-&gt;<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="33">pPool<pos:position pos:line="29" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">rv<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">!=<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">APR_SUCCESS<pos:position pos:line="32" pos:column="26"/></name></expr>)<pos:position pos:line="32" pos:column="27"/></condition><then pos:line="32" pos:column="27"> <block pos:line="32" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">ap_log_error<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">APLOG_MARK<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="34">APLOG_ERR<pos:position pos:line="33" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="45">rv<pos:position pos:line="33" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="49">s<pos:position pos:line="33" pos:column="50"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="34" pos:column="22">"could not allocate shared memory for shmcb "<pos:position pos:line="34" pos:column="67"/></literal>
                     <literal type="string" pos:line="35" pos:column="22">"session cache"<pos:position pos:line="35" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">ssl_die<pos:position pos:line="36" pos:column="16"/></name><argument_list pos:line="36" pos:column="16">()<pos:position pos:line="36" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="39" pos:column="5">shm_segment<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">=<pos:position pos:line="39" pos:column="18"/></operator> <call><name pos:line="39" pos:column="19">apr_shm_baseaddr_get<pos:position pos:line="39" pos:column="39"/></name><argument_list pos:line="39" pos:column="39">(<argument><expr><name><name pos:line="39" pos:column="40">mc<pos:position pos:line="39" pos:column="42"/></name><operator pos:line="39" pos:column="42">-&gt;<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="44">pSessionCacheDataMM<pos:position pos:line="39" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><name pos:line="40" pos:column="5">shm_segsize<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <call><name pos:line="40" pos:column="19">apr_shm_size_get<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name><name pos:line="40" pos:column="36">mc<pos:position pos:line="40" pos:column="38"/></name><operator pos:line="40" pos:column="38">-&gt;<pos:position pos:line="40" pos:column="43"/></operator><name pos:line="40" pos:column="40">pSessionCacheDataMM<pos:position pos:line="40" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">shm_segsize<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">&lt;<pos:position pos:line="41" pos:column="25"/></operator> <operator pos:line="41" pos:column="23">(<pos:position pos:line="41" pos:column="24"/></operator><literal type="number" pos:line="41" pos:column="24">5<pos:position pos:line="41" pos:column="25"/></literal> <operator pos:line="41" pos:column="26">*<pos:position pos:line="41" pos:column="27"/></operator> <sizeof pos:line="41" pos:column="28">sizeof<argument_list pos:line="41" pos:column="34">(<argument><expr><name pos:line="41" pos:column="35">SHMCBHeader<pos:position pos:line="41" pos:column="46"/></name></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></sizeof><operator pos:line="41" pos:column="47">)<pos:position pos:line="41" pos:column="48"/></operator></expr>)<pos:position pos:line="41" pos:column="49"/></condition><then pos:line="41" pos:column="49"> <block pos:line="41" pos:column="50">{
        <comment type="block" pos:line="42" pos:column="9">/* the segment is ridiculously small, bail out */</comment>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">ap_log_error<pos:position pos:line="43" pos:column="21"/></name><argument_list pos:line="43" pos:column="21">(<argument><expr><name pos:line="43" pos:column="22">APLOG_MARK<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="34">APLOG_ERR<pos:position pos:line="43" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="45">0<pos:position pos:line="43" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="48">s<pos:position pos:line="43" pos:column="49"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="44" pos:column="22">"shared memory segment too small"<pos:position pos:line="44" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">ssl_die<pos:position pos:line="45" pos:column="16"/></name><argument_list pos:line="45" pos:column="16">()<pos:position pos:line="45" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">ap_log_error<pos:position pos:line="47" pos:column="17"/></name><argument_list pos:line="47" pos:column="17">(<argument><expr><name pos:line="47" pos:column="18">APLOG_MARK<pos:position pos:line="47" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="30">APLOG_DEBUG<pos:position pos:line="47" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="43">0<pos:position pos:line="47" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="46">s<pos:position pos:line="47" pos:column="47"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="48" pos:column="18">"shmcb_init allocated %"<pos:position pos:line="48" pos:column="42"/></literal> <name pos:line="48" pos:column="43">APR_SIZE_T_FMT<pos:position pos:line="48" pos:column="57"/></name>
                 <literal type="string" pos:line="49" pos:column="18">" bytes of shared memory"<pos:position pos:line="49" pos:column="43"/></literal></expr></argument>,
                 <argument><expr><name pos:line="50" pos:column="18">shm_segsize<pos:position pos:line="50" pos:column="29"/></name></expr></argument>)<pos:position pos:line="50" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>
    <comment type="block" pos:line="51" pos:column="5">/* Discount the header */</comment>
    <expr_stmt><expr><name pos:line="52" pos:column="5">shm_segsize<pos:position pos:line="52" pos:column="16"/></name> <operator pos:line="52" pos:column="17">-=<pos:position pos:line="52" pos:column="19"/></operator> <sizeof pos:line="52" pos:column="20">sizeof<argument_list pos:line="52" pos:column="26">(<argument><expr><name pos:line="52" pos:column="27">SHMCBHeader<pos:position pos:line="52" pos:column="38"/></name></expr></argument>)<pos:position pos:line="52" pos:column="39"/></argument_list></sizeof></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt>
    <comment type="block" pos:line="53" pos:column="5">/* Select the number of subcaches to create and how many indexes each
     * should contain based on the size of the memory (the header has already
     * been subtracted). Typical non-client-auth sslv3/tlsv1 sessions are
     * around 150 bytes, so erring to division by 120 helps ensure we would
     * exhaust data storage before index storage (except sslv2, where it's
     * *slightly* the other way). From there, we select the number of subcaches
     * to be a power of two, such that the number of indexes per subcache at
     * least twice the number of subcaches. */</comment>
    <expr_stmt><expr><name pos:line="61" pos:column="5">num_idx<pos:position pos:line="61" pos:column="12"/></name> <operator pos:line="61" pos:column="13">=<pos:position pos:line="61" pos:column="14"/></operator> <operator pos:line="61" pos:column="15">(<pos:position pos:line="61" pos:column="16"/></operator><name pos:line="61" pos:column="16">shm_segsize<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">)<pos:position pos:line="61" pos:column="28"/></operator> <operator pos:line="61" pos:column="29">/<pos:position pos:line="61" pos:column="30"/></operator> <literal type="number" pos:line="61" pos:column="31">120<pos:position pos:line="61" pos:column="34"/></literal></expr>;<pos:position pos:line="61" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="62" pos:column="5">num_subcache<pos:position pos:line="62" pos:column="17"/></name> <operator pos:line="62" pos:column="18">=<pos:position pos:line="62" pos:column="19"/></operator> <literal type="number" pos:line="62" pos:column="20">256<pos:position pos:line="62" pos:column="23"/></literal></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt>
    <while pos:line="63" pos:column="5">while <condition pos:line="63" pos:column="11">(<expr><operator pos:line="63" pos:column="12">(<pos:position pos:line="63" pos:column="13"/></operator><name pos:line="63" pos:column="13">num_idx<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">/<pos:position pos:line="63" pos:column="22"/></operator> <name pos:line="63" pos:column="23">num_subcache<pos:position pos:line="63" pos:column="35"/></name><operator pos:line="63" pos:column="35">)<pos:position pos:line="63" pos:column="36"/></operator> <operator pos:line="63" pos:column="37">&lt;<pos:position pos:line="63" pos:column="41"/></operator> <operator pos:line="63" pos:column="39">(<pos:position pos:line="63" pos:column="40"/></operator><literal type="number" pos:line="63" pos:column="40">2<pos:position pos:line="63" pos:column="41"/></literal> <operator pos:line="63" pos:column="42">*<pos:position pos:line="63" pos:column="43"/></operator> <name pos:line="63" pos:column="44">num_subcache<pos:position pos:line="63" pos:column="56"/></name><operator pos:line="63" pos:column="56">)<pos:position pos:line="63" pos:column="57"/></operator></expr>)<pos:position pos:line="63" pos:column="58"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="9">num_subcache<pos:position pos:line="64" pos:column="21"/></name> <operator pos:line="64" pos:column="22">/=<pos:position pos:line="64" pos:column="24"/></operator> <literal type="number" pos:line="64" pos:column="25">2<pos:position pos:line="64" pos:column="26"/></literal></expr>;<pos:position pos:line="64" pos:column="27"/></expr_stmt></block></while>
    <expr_stmt><expr><name pos:line="65" pos:column="5">num_idx<pos:position pos:line="65" pos:column="12"/></name> <operator pos:line="65" pos:column="13">/=<pos:position pos:line="65" pos:column="15"/></operator> <name pos:line="65" pos:column="16">num_subcache<pos:position pos:line="65" pos:column="28"/></name></expr>;<pos:position pos:line="65" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">ap_log_error<pos:position pos:line="66" pos:column="17"/></name><argument_list pos:line="66" pos:column="17">(<argument><expr><name pos:line="66" pos:column="18">APLOG_MARK<pos:position pos:line="66" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="30">APLOG_DEBUG<pos:position pos:line="66" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="66" pos:column="43">0<pos:position pos:line="66" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="66" pos:column="46">s<pos:position pos:line="66" pos:column="47"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="67" pos:column="18">"for %"<pos:position pos:line="67" pos:column="25"/></literal> <name pos:line="67" pos:column="26">APR_SIZE_T_FMT<pos:position pos:line="67" pos:column="40"/></name> <literal type="string" pos:line="67" pos:column="41">" bytes (%"<pos:position pos:line="67" pos:column="52"/></literal> <name pos:line="67" pos:column="53">APR_SIZE_T_FMT<pos:position pos:line="67" pos:column="67"/></name> 
                 <literal type="string" pos:line="68" pos:column="18">" including header), recommending %u subcaches, "<pos:position pos:line="68" pos:column="67"/></literal>
                 <literal type="string" pos:line="69" pos:column="18">"%u indexes each"<pos:position pos:line="69" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="37">shm_segsize<pos:position pos:line="69" pos:column="48"/></name></expr></argument>,
                 <argument><expr><name pos:line="70" pos:column="18">shm_segsize<pos:position pos:line="70" pos:column="29"/></name> <operator pos:line="70" pos:column="30">+<pos:position pos:line="70" pos:column="31"/></operator> <sizeof pos:line="70" pos:column="32">sizeof<argument_list pos:line="70" pos:column="38">(<argument><expr><name pos:line="70" pos:column="39">SHMCBHeader<pos:position pos:line="70" pos:column="50"/></name></expr></argument>)<pos:position pos:line="70" pos:column="51"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="70" pos:column="53">num_subcache<pos:position pos:line="70" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="67">num_idx<pos:position pos:line="70" pos:column="74"/></name></expr></argument>)<pos:position pos:line="70" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="76"/></expr_stmt>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name pos:line="71" pos:column="9">num_idx<pos:position pos:line="71" pos:column="16"/></name> <operator pos:line="71" pos:column="17">&lt;<pos:position pos:line="71" pos:column="21"/></operator> <literal type="number" pos:line="71" pos:column="19">5<pos:position pos:line="71" pos:column="20"/></literal></expr>)<pos:position pos:line="71" pos:column="21"/></condition><then pos:line="71" pos:column="21"> <block pos:line="71" pos:column="22">{
        <comment type="block" pos:line="72" pos:column="9">/* we're still too small, bail out */</comment>
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">ap_log_error<pos:position pos:line="73" pos:column="21"/></name><argument_list pos:line="73" pos:column="21">(<argument><expr><name pos:line="73" pos:column="22">APLOG_MARK<pos:position pos:line="73" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="34">APLOG_ERR<pos:position pos:line="73" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="45">0<pos:position pos:line="73" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="73" pos:column="48">s<pos:position pos:line="73" pos:column="49"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="74" pos:column="22">"shared memory segment too small"<pos:position pos:line="74" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">ssl_die<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">()<pos:position pos:line="75" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="77" pos:column="5">/* OK, we're sorted */</comment>
    <expr_stmt><expr><name pos:line="78" pos:column="5">header<pos:position pos:line="78" pos:column="11"/></name> <operator pos:line="78" pos:column="12">=<pos:position pos:line="78" pos:column="13"/></operator> <name pos:line="78" pos:column="14">shm_segment<pos:position pos:line="78" pos:column="25"/></name></expr>;<pos:position pos:line="78" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="79" pos:column="5">header<pos:position pos:line="79" pos:column="11"/></name><operator pos:line="79" pos:column="11">-&gt;<pos:position pos:line="79" pos:column="16"/></operator><name pos:line="79" pos:column="13">stat_stores<pos:position pos:line="79" pos:column="24"/></name></name> <operator pos:line="79" pos:column="25">=<pos:position pos:line="79" pos:column="26"/></operator> <literal type="number" pos:line="79" pos:column="27">0<pos:position pos:line="79" pos:column="28"/></literal></expr>;<pos:position pos:line="79" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="80" pos:column="5">header<pos:position pos:line="80" pos:column="11"/></name><operator pos:line="80" pos:column="11">-&gt;<pos:position pos:line="80" pos:column="16"/></operator><name pos:line="80" pos:column="13">stat_expiries<pos:position pos:line="80" pos:column="26"/></name></name> <operator pos:line="80" pos:column="27">=<pos:position pos:line="80" pos:column="28"/></operator> <literal type="number" pos:line="80" pos:column="29">0<pos:position pos:line="80" pos:column="30"/></literal></expr>;<pos:position pos:line="80" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="81" pos:column="5">header<pos:position pos:line="81" pos:column="11"/></name><operator pos:line="81" pos:column="11">-&gt;<pos:position pos:line="81" pos:column="16"/></operator><name pos:line="81" pos:column="13">stat_scrolled<pos:position pos:line="81" pos:column="26"/></name></name> <operator pos:line="81" pos:column="27">=<pos:position pos:line="81" pos:column="28"/></operator> <literal type="number" pos:line="81" pos:column="29">0<pos:position pos:line="81" pos:column="30"/></literal></expr>;<pos:position pos:line="81" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="82" pos:column="5">header<pos:position pos:line="82" pos:column="11"/></name><operator pos:line="82" pos:column="11">-&gt;<pos:position pos:line="82" pos:column="16"/></operator><name pos:line="82" pos:column="13">stat_retrieves_hit<pos:position pos:line="82" pos:column="31"/></name></name> <operator pos:line="82" pos:column="32">=<pos:position pos:line="82" pos:column="33"/></operator> <literal type="number" pos:line="82" pos:column="34">0<pos:position pos:line="82" pos:column="35"/></literal></expr>;<pos:position pos:line="82" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="83" pos:column="5">header<pos:position pos:line="83" pos:column="11"/></name><operator pos:line="83" pos:column="11">-&gt;<pos:position pos:line="83" pos:column="16"/></operator><name pos:line="83" pos:column="13">stat_retrieves_miss<pos:position pos:line="83" pos:column="32"/></name></name> <operator pos:line="83" pos:column="33">=<pos:position pos:line="83" pos:column="34"/></operator> <literal type="number" pos:line="83" pos:column="35">0<pos:position pos:line="83" pos:column="36"/></literal></expr>;<pos:position pos:line="83" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="84" pos:column="5">header<pos:position pos:line="84" pos:column="11"/></name><operator pos:line="84" pos:column="11">-&gt;<pos:position pos:line="84" pos:column="16"/></operator><name pos:line="84" pos:column="13">stat_removes_hit<pos:position pos:line="84" pos:column="29"/></name></name> <operator pos:line="84" pos:column="30">=<pos:position pos:line="84" pos:column="31"/></operator> <literal type="number" pos:line="84" pos:column="32">0<pos:position pos:line="84" pos:column="33"/></literal></expr>;<pos:position pos:line="84" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="85" pos:column="5">header<pos:position pos:line="85" pos:column="11"/></name><operator pos:line="85" pos:column="11">-&gt;<pos:position pos:line="85" pos:column="16"/></operator><name pos:line="85" pos:column="13">stat_removes_miss<pos:position pos:line="85" pos:column="30"/></name></name> <operator pos:line="85" pos:column="31">=<pos:position pos:line="85" pos:column="32"/></operator> <literal type="number" pos:line="85" pos:column="33">0<pos:position pos:line="85" pos:column="34"/></literal></expr>;<pos:position pos:line="85" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="86" pos:column="5">header<pos:position pos:line="86" pos:column="11"/></name><operator pos:line="86" pos:column="11">-&gt;<pos:position pos:line="86" pos:column="16"/></operator><name pos:line="86" pos:column="13">subcache_num<pos:position pos:line="86" pos:column="25"/></name></name> <operator pos:line="86" pos:column="26">=<pos:position pos:line="86" pos:column="27"/></operator> <name pos:line="86" pos:column="28">num_subcache<pos:position pos:line="86" pos:column="40"/></name></expr>;<pos:position pos:line="86" pos:column="41"/></expr_stmt>
    <comment type="block" pos:line="87" pos:column="5">/* Convert the subcache size (in bytes) to a value that is suitable for
     * structure alignment on the host platform, by rounding down if necessary.
     * This assumes that sizeof(unsigned long) provides an appropriate
     * alignment unit.  */</comment>
    <expr_stmt><expr><name><name pos:line="91" pos:column="5">header<pos:position pos:line="91" pos:column="11"/></name><operator pos:line="91" pos:column="11">-&gt;<pos:position pos:line="91" pos:column="16"/></operator><name pos:line="91" pos:column="13">subcache_size<pos:position pos:line="91" pos:column="26"/></name></name> <operator pos:line="91" pos:column="27">=<pos:position pos:line="91" pos:column="28"/></operator> <operator pos:line="91" pos:column="29">(<pos:position pos:line="91" pos:column="30"/></operator><call pos:line="91" pos:column="30">(<name pos:line="91" pos:column="31">size_t<pos:position pos:line="91" pos:column="37"/></name>)<argument_list pos:line="91" pos:column="38">(<argument><expr><name pos:line="91" pos:column="39">shm_segsize<pos:position pos:line="91" pos:column="50"/></name> <operator pos:line="91" pos:column="51">/<pos:position pos:line="91" pos:column="52"/></operator> <name pos:line="91" pos:column="53">num_subcache<pos:position pos:line="91" pos:column="65"/></name></expr></argument>)<pos:position pos:line="91" pos:column="66"/></argument_list></call> <operator pos:line="91" pos:column="67">&amp;<pos:position pos:line="91" pos:column="72"/></operator>
                             <operator pos:line="92" pos:column="30">~<pos:position pos:line="92" pos:column="31"/></operator><call pos:line="92" pos:column="31">(<name pos:line="92" pos:column="32">size_t<pos:position pos:line="92" pos:column="38"/></name>)<argument_list pos:line="92" pos:column="39">(<argument><expr pos:line="92" pos:column="40">sizeof<operator pos:line="92" pos:column="46">(<pos:position pos:line="92" pos:column="47"/></operator><name pos:line="92" pos:column="47">unsigned<pos:position pos:line="92" pos:column="55"/></name> <name pos:line="92" pos:column="56">long<pos:position pos:line="92" pos:column="60"/></name><operator pos:line="92" pos:column="60">)<pos:position pos:line="92" pos:column="61"/></operator> <operator pos:line="92" pos:column="62">-<pos:position pos:line="92" pos:column="63"/></operator> <literal type="number" pos:line="92" pos:column="64">1<pos:position pos:line="92" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="66"/></argument_list></call><operator pos:line="92" pos:column="66">)<pos:position pos:line="92" pos:column="67"/></operator></expr>;<pos:position pos:line="92" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="93" pos:column="5">header<pos:position pos:line="93" pos:column="11"/></name><operator pos:line="93" pos:column="11">-&gt;<pos:position pos:line="93" pos:column="16"/></operator><name pos:line="93" pos:column="13">subcache_data_offset<pos:position pos:line="93" pos:column="33"/></name></name> <operator pos:line="93" pos:column="34">=<pos:position pos:line="93" pos:column="35"/></operator> <sizeof pos:line="93" pos:column="36">sizeof<argument_list pos:line="93" pos:column="42">(<argument><expr><name pos:line="93" pos:column="43">SHMCBSubcache<pos:position pos:line="93" pos:column="56"/></name></expr></argument>)<pos:position pos:line="93" pos:column="57"/></argument_list></sizeof> <operator pos:line="93" pos:column="58">+<pos:position pos:line="93" pos:column="59"/></operator>
                                   <name pos:line="94" pos:column="36">num_idx<pos:position pos:line="94" pos:column="43"/></name> <operator pos:line="94" pos:column="44">*<pos:position pos:line="94" pos:column="45"/></operator> <sizeof pos:line="94" pos:column="46">sizeof<argument_list pos:line="94" pos:column="52">(<argument><expr><name pos:line="94" pos:column="53">SHMCBIndex<pos:position pos:line="94" pos:column="63"/></name></expr></argument>)<pos:position pos:line="94" pos:column="64"/></argument_list></sizeof></expr>;<pos:position pos:line="94" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="95" pos:column="5">header<pos:position pos:line="95" pos:column="11"/></name><operator pos:line="95" pos:column="11">-&gt;<pos:position pos:line="95" pos:column="16"/></operator><name pos:line="95" pos:column="13">subcache_data_size<pos:position pos:line="95" pos:column="31"/></name></name> <operator pos:line="95" pos:column="32">=<pos:position pos:line="95" pos:column="33"/></operator> <name><name pos:line="95" pos:column="34">header<pos:position pos:line="95" pos:column="40"/></name><operator pos:line="95" pos:column="40">-&gt;<pos:position pos:line="95" pos:column="45"/></operator><name pos:line="95" pos:column="42">subcache_size<pos:position pos:line="95" pos:column="55"/></name></name> <operator pos:line="95" pos:column="56">-<pos:position pos:line="95" pos:column="57"/></operator></expr></expr_stmt></block></function>
               </unit>
