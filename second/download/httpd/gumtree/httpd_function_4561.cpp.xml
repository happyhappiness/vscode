<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_4561.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">send_http_connect<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">proxy_conn_rec<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">backend<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">server_rec<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">s<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">status<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">nbytes<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">left<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">complete<pos:position pos:line="7" pos:column="17"/></name> <init pos:line="7" pos:column="18">= <expr><literal type="number" pos:line="7" pos:column="20">0<pos:position pos:line="7" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">buffer<pos:position pos:line="8" pos:column="16"/></name><index pos:line="8" pos:column="16">[<expr><name pos:line="8" pos:column="17">HUGE_STRING_LEN<pos:position pos:line="8" pos:column="32"/></name></expr>]<pos:position pos:line="8" pos:column="33"/></index></name></decl>;<pos:position pos:line="8" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name></type> <name><name pos:line="9" pos:column="10">drain_buffer<pos:position pos:line="9" pos:column="22"/></name><index pos:line="9" pos:column="22">[<expr><name pos:line="9" pos:column="23">HUGE_STRING_LEN<pos:position pos:line="9" pos:column="38"/></name></expr>]<pos:position pos:line="9" pos:column="39"/></index></name></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">forward_info<pos:position pos:line="10" pos:column="17"/></name> <modifier pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></modifier></type><name pos:line="10" pos:column="19">forward<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><operator pos:line="10" pos:column="29">(<pos:position pos:line="10" pos:column="30"/></operator><name pos:line="10" pos:column="30">forward_info<pos:position pos:line="10" pos:column="42"/></name> <operator pos:line="10" pos:column="43">*<pos:position pos:line="10" pos:column="44"/></operator><operator pos:line="10" pos:column="44">)<pos:position pos:line="10" pos:column="45"/></operator><name><name pos:line="10" pos:column="45">backend<pos:position pos:line="10" pos:column="52"/></name><operator pos:line="10" pos:column="52">-&gt;<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="54">forward<pos:position pos:line="10" pos:column="61"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="62"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">len<pos:position pos:line="11" pos:column="12"/></name> <init pos:line="11" pos:column="13">= <expr><literal type="number" pos:line="11" pos:column="15">0<pos:position pos:line="11" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ap_log_error<pos:position pos:line="13" pos:column="17"/></name><argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">APLOG_MARK<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="30">APLOG_DEBUG<pos:position pos:line="13" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="43">0<pos:position pos:line="13" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="46">s<pos:position pos:line="13" pos:column="47"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="14" pos:column="18">"proxy: CONNECT: sending the CONNECT request for %s:%d "<pos:position pos:line="14" pos:column="74"/></literal>
                 <literal type="string" pos:line="15" pos:column="18">"to the remote proxy %pI (%s)"<pos:position pos:line="15" pos:column="48"/></literal></expr></argument>,
                 <argument><expr><name><name pos:line="16" pos:column="18">forward<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">-&gt;<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="27">target_host<pos:position pos:line="16" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="40">forward<pos:position pos:line="16" pos:column="47"/></name><operator pos:line="16" pos:column="47">-&gt;<pos:position pos:line="16" pos:column="52"/></operator><name pos:line="16" pos:column="49">target_port<pos:position pos:line="16" pos:column="60"/></name></name></expr></argument>,
                 <argument><expr><name><name pos:line="17" pos:column="18">backend<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">addr<pos:position pos:line="17" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="33">backend<pos:position pos:line="17" pos:column="40"/></name><operator pos:line="17" pos:column="40">-&gt;<pos:position pos:line="17" pos:column="45"/></operator><name pos:line="17" pos:column="42">hostname<pos:position pos:line="17" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>
    <comment type="block" pos:line="18" pos:column="5">/* Create the CONNECT request */</comment>
    <expr_stmt><expr><name pos:line="19" pos:column="5">nbytes<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <call><name pos:line="19" pos:column="14">apr_snprintf<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">buffer<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="19" pos:column="35">sizeof<argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">buffer<pos:position pos:line="19" pos:column="48"/></name></expr></argument>)<pos:position pos:line="19" pos:column="49"/></argument_list></sizeof></expr></argument>,
                          <argument><expr><literal type="string" pos:line="20" pos:column="27">"CONNECT %s:%d HTTP/1.0"<pos:position pos:line="20" pos:column="51"/></literal> <name pos:line="20" pos:column="52">CRLF<pos:position pos:line="20" pos:column="56"/></name></expr></argument>,
                          <argument><expr><name><name pos:line="21" pos:column="27">forward<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">target_host<pos:position pos:line="21" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="49">forward<pos:position pos:line="21" pos:column="56"/></name><operator pos:line="21" pos:column="56">-&gt;<pos:position pos:line="21" pos:column="61"/></operator><name pos:line="21" pos:column="58">target_port<pos:position pos:line="21" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="71"/></expr_stmt>
    <comment type="block" pos:line="22" pos:column="5">/* Add proxy authorization from the initial request if necessary */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name><name pos:line="23" pos:column="9">forward<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">proxy_auth<pos:position pos:line="23" pos:column="28"/></name></name> <operator pos:line="23" pos:column="29">!=<pos:position pos:line="23" pos:column="31"/></operator> <name pos:line="23" pos:column="32">NULL<pos:position pos:line="23" pos:column="36"/></name></expr>)<pos:position pos:line="23" pos:column="37"/></condition><then pos:line="23" pos:column="37"> <block pos:line="23" pos:column="38">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">nbytes<pos:position pos:line="24" pos:column="15"/></name> <operator pos:line="24" pos:column="16">+=<pos:position pos:line="24" pos:column="18"/></operator> <call><name pos:line="24" pos:column="19">apr_snprintf<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">buffer<pos:position pos:line="24" pos:column="38"/></name> <operator pos:line="24" pos:column="39">+<pos:position pos:line="24" pos:column="40"/></operator> <name pos:line="24" pos:column="41">nbytes<pos:position pos:line="24" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="49">sizeof<argument_list pos:line="24" pos:column="55">(<argument><expr><name pos:line="24" pos:column="56">buffer<pos:position pos:line="24" pos:column="62"/></name></expr></argument>)<pos:position pos:line="24" pos:column="63"/></argument_list></sizeof> <operator pos:line="24" pos:column="64">-<pos:position pos:line="24" pos:column="65"/></operator> <name pos:line="24" pos:column="66">nbytes<pos:position pos:line="24" pos:column="72"/></name></expr></argument>,
                               <argument><expr><literal type="string" pos:line="25" pos:column="32">"Proxy-Authorization: %s"<pos:position pos:line="25" pos:column="57"/></literal> <name pos:line="25" pos:column="58">CRLF<pos:position pos:line="25" pos:column="62"/></name></expr></argument>,
                               <argument><expr><name><name pos:line="26" pos:column="32">forward<pos:position pos:line="26" pos:column="39"/></name><operator pos:line="26" pos:column="39">-&gt;<pos:position pos:line="26" pos:column="44"/></operator><name pos:line="26" pos:column="41">proxy_auth<pos:position pos:line="26" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="28" pos:column="5">/* Set a reasonable agent and send everything */</comment>
    <expr_stmt><expr><name pos:line="29" pos:column="5">nbytes<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">+=<pos:position pos:line="29" pos:column="14"/></operator> <macro><name pos:line="29" pos:column="15">apr_snprintf<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument pos:line="29" pos:column="28">buffer + nbytes<pos:position pos:line="29" pos:column="43"/></argument>, <argument pos:line="29" pos:column="45">sizeof(buffer) - nbytes<pos:position pos:line="29" pos:column="68"/></argument>,
                           <argument><literal type="string" pos:line="30" pos:column="28">"Proxy-agent: %s"<pos:position pos:line="30" pos:column="45"/></literal> CRLF CRLF<pos:position pos:line="30" pos:column="55"/></argument>,
                           <argument pos:line="31" pos:column="28">ap_get_server_banner()<pos:position pos:line="31" pos:column="50"/></argument>)<pos:position pos:line="31" pos:column="51"/></argument_list></macro></expr>;<pos:position pos:line="31" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">apr_socket_send<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name><name pos:line="32" pos:column="21">backend<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">-&gt;<pos:position pos:line="32" pos:column="33"/></operator><name pos:line="32" pos:column="30">sock<pos:position pos:line="32" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="36">buffer<pos:position pos:line="32" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="44">&amp;<pos:position pos:line="32" pos:column="49"/></operator><name pos:line="32" pos:column="45">nbytes<pos:position pos:line="32" pos:column="51"/></name></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="53"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* Receive the whole CONNECT response */</comment>
    <expr_stmt><expr><name pos:line="35" pos:column="5">left<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <sizeof pos:line="35" pos:column="12">sizeof<argument_list pos:line="35" pos:column="18">(<argument><expr><name pos:line="35" pos:column="19">buffer<pos:position pos:line="35" pos:column="25"/></name></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></sizeof> <operator pos:line="35" pos:column="27">-<pos:position pos:line="35" pos:column="28"/></operator> <literal type="number" pos:line="35" pos:column="29">1<pos:position pos:line="35" pos:column="30"/></literal></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
    <comment type="block" pos:line="36" pos:column="5">/* Read until we find the end of the headers or run out of buffer */</comment>
    <do pos:line="37" pos:column="5">do <block pos:line="37" pos:column="8">{
        <expr_stmt><expr><name pos:line="38" pos:column="9">nbytes<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <name pos:line="38" pos:column="18">left<pos:position pos:line="38" pos:column="22"/></name></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="39" pos:column="9">status<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <call><name pos:line="39" pos:column="18">apr_socket_recv<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name><name pos:line="39" pos:column="34">backend<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">-&gt;<pos:position pos:line="39" pos:column="46"/></operator><name pos:line="39" pos:column="43">sock<pos:position pos:line="39" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="49">buffer<pos:position pos:line="39" pos:column="55"/></name> <operator pos:line="39" pos:column="56">+<pos:position pos:line="39" pos:column="57"/></operator> <name pos:line="39" pos:column="58">len<pos:position pos:line="39" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="63">&amp;<pos:position pos:line="39" pos:column="68"/></operator><name pos:line="39" pos:column="64">nbytes<pos:position pos:line="39" pos:column="70"/></name></expr></argument>)<pos:position pos:line="39" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name pos:line="40" pos:column="9">len<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">+=<pos:position pos:line="40" pos:column="15"/></operator> <name pos:line="40" pos:column="16">nbytes<pos:position pos:line="40" pos:column="22"/></name></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="41" pos:column="9">left<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">-=<pos:position pos:line="41" pos:column="16"/></operator> <name pos:line="41" pos:column="17">nbytes<pos:position pos:line="41" pos:column="23"/></name></expr>;<pos:position pos:line="41" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">buffer<pos:position pos:line="42" pos:column="15"/></name><index pos:line="42" pos:column="15">[<expr><name pos:line="42" pos:column="16">len<pos:position pos:line="42" pos:column="19"/></name></expr>]<pos:position pos:line="42" pos:column="20"/></index></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <literal type="char" pos:line="42" pos:column="23">'\0'<pos:position pos:line="42" pos:column="27"/></literal></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><call><name pos:line="43" pos:column="13">strstr<pos:position pos:line="43" pos:column="19"/></name><argument_list pos:line="43" pos:column="19">(<argument><expr><name pos:line="43" pos:column="20">buffer<pos:position pos:line="43" pos:column="26"/></name> <operator pos:line="43" pos:column="27">+<pos:position pos:line="43" pos:column="28"/></operator> <name pos:line="43" pos:column="29">len<pos:position pos:line="43" pos:column="32"/></name> <operator pos:line="43" pos:column="33">-<pos:position pos:line="43" pos:column="34"/></operator> <name pos:line="43" pos:column="35">nbytes<pos:position pos:line="43" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="43">"\r\n\r\n"<pos:position pos:line="43" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call> <operator pos:line="43" pos:column="55">!=<pos:position pos:line="43" pos:column="57"/></operator> <name pos:line="43" pos:column="58">NULL<pos:position pos:line="43" pos:column="62"/></name></expr>)<pos:position pos:line="43" pos:column="63"/></condition><then pos:line="43" pos:column="63"> <block pos:line="43" pos:column="64">{
            <expr_stmt><expr><name pos:line="44" pos:column="13">complete<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">=<pos:position pos:line="44" pos:column="23"/></operator> <literal type="number" pos:line="44" pos:column="24">1<pos:position pos:line="44" pos:column="25"/></literal></expr>;<pos:position pos:line="44" pos:column="26"/></expr_stmt>
            <break pos:line="45" pos:column="13">break;<pos:position pos:line="45" pos:column="19"/></break>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block> while <condition pos:line="47" pos:column="13">(<expr><name pos:line="47" pos:column="14">status<pos:position pos:line="47" pos:column="20"/></name> <operator pos:line="47" pos:column="21">==<pos:position pos:line="47" pos:column="23"/></operator> <name pos:line="47" pos:column="24">APR_SUCCESS<pos:position pos:line="47" pos:column="35"/></name> <operator pos:line="47" pos:column="36">&amp;&amp;<pos:position pos:line="47" pos:column="46"/></operator> <name pos:line="47" pos:column="39">left<pos:position pos:line="47" pos:column="43"/></name> <operator pos:line="47" pos:column="44">&gt;<pos:position pos:line="47" pos:column="48"/></operator> <literal type="number" pos:line="47" pos:column="46">0<pos:position pos:line="47" pos:column="47"/></literal></expr>)<pos:position pos:line="47" pos:column="48"/></condition>;<pos:position pos:line="47" pos:column="49"/></do>
    <comment type="block" pos:line="48" pos:column="5">/* Drain what's left */</comment>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><operator pos:line="49" pos:column="9">!<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">complete<pos:position pos:line="49" pos:column="18"/></name></expr>)<pos:position pos:line="49" pos:column="19"/></condition><then pos:line="49" pos:column="19"> <block pos:line="49" pos:column="20">{
        <expr_stmt><expr><name pos:line="50" pos:column="9">nbytes<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">=<pos:position pos:line="50" pos:column="17"/></operator> <sizeof pos:line="50" pos:column="18">sizeof<argument_list pos:line="50" pos:column="24">(<argument><expr><name pos:line="50" pos:column="25">drain_buffer<pos:position pos:line="50" pos:column="37"/></name></expr></argument>)<pos:position pos:line="50" pos:column="38"/></argument_list></sizeof> <operator pos:line="50" pos:column="39">-<pos:position pos:line="50" pos:column="40"/></operator> <literal type="number" pos:line="50" pos:column="41">1<pos:position pos:line="50" pos:column="42"/></literal></expr>;<pos:position pos:line="50" pos:column="43"/></expr_stmt>
        <while pos:line="51" pos:column="9">while <condition pos:line="51" pos:column="15">(<expr><name pos:line="51" pos:column="16">status<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">==<pos:position pos:line="51" pos:column="25"/></operator> <name pos:line="51" pos:column="26">APR_SUCCESS<pos:position pos:line="51" pos:column="37"/></name> <operator pos:line="51" pos:column="38">&amp;&amp;<pos:position pos:line="51" pos:column="48"/></operator> <name pos:line="51" pos:column="41">nbytes<pos:position pos:line="51" pos:column="47"/></name></expr>)<pos:position pos:line="51" pos:column="48"/></condition> <block pos:line="51" pos:column="49">{
            <expr_stmt><expr><name pos:line="52" pos:column="13">status<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">=<pos:position pos:line="52" pos:column="21"/></operator> <call><name pos:line="52" pos:column="22">apr_socket_recv<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name><name pos:line="52" pos:column="38">backend<pos:position pos:line="52" pos:column="45"/></name><operator pos:line="52" pos:column="45">-&gt;<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="47">sock<pos:position pos:line="52" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="53">drain_buffer<pos:position pos:line="52" pos:column="65"/></name></expr></argument>, <argument><expr><operator pos:line="52" pos:column="67">&amp;<pos:position pos:line="52" pos:column="72"/></operator><name pos:line="52" pos:column="68">nbytes<pos:position pos:line="52" pos:column="74"/></name></expr></argument>)<pos:position pos:line="52" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="76"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="53" pos:column="13">buffer<pos:position pos:line="53" pos:column="19"/></name><index pos:line="53" pos:column="19">[<expr><name pos:line="53" pos:column="20">nbytes<pos:position pos:line="53" pos:column="26"/></name></expr>]<pos:position pos:line="53" pos:column="27"/></index></name> <operator pos:line="53" pos:column="28">=<pos:position pos:line="53" pos:column="29"/></operator> <literal type="char" pos:line="53" pos:column="30">'\0'<pos:position pos:line="53" pos:column="34"/></literal></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name pos:line="54" pos:column="13">nbytes<pos:position pos:line="54" pos:column="19"/></name> <operator pos:line="54" pos:column="20">=<pos:position pos:line="54" pos:column="21"/></operator> <sizeof pos:line="54" pos:column="22">sizeof<argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">drain_buffer<pos:position pos:line="54" pos:column="41"/></name></expr></argument>)<pos:position pos:line="54" pos:column="42"/></argument_list></sizeof> <operator pos:line="54" pos:column="43">-<pos:position pos:line="54" pos:column="44"/></operator> <literal type="number" pos:line="54" pos:column="45">1<pos:position pos:line="54" pos:column="46"/></literal></expr>;<pos:position pos:line="54" pos:column="47"/></expr_stmt>
            <if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><call><name pos:line="55" pos:column="17">strstr<pos:position pos:line="55" pos:column="23"/></name><argument_list pos:line="55" pos:column="23">(<argument><expr><name pos:line="55" pos:column="24">drain_buffer<pos:position pos:line="55" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="38">"\r\n\r\n"<pos:position pos:line="55" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="49"/></argument_list></call> <operator pos:line="55" pos:column="50">!=<pos:position pos:line="55" pos:column="52"/></operator> <name pos:line="55" pos:column="53">NULL<pos:position pos:line="55" pos:column="57"/></name></expr>)<pos:position pos:line="55" pos:column="58"/></condition><then pos:line="55" pos:column="58"> <block pos:line="55" pos:column="59">{
                <expr_stmt><expr><name pos:line="56" pos:column="17">complete<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">=<pos:position pos:line="56" pos:column="27"/></operator> <literal type="number" pos:line="56" pos:column="28">1<pos:position pos:line="56" pos:column="29"/></literal></expr>;<pos:position pos:line="56" pos:column="30"/></expr_stmt>
                <break pos:line="57" pos:column="17">break;<pos:position pos:line="57" pos:column="23"/></break>
            }<pos:position pos:line="58" pos:column="14"/></block></then></if>
        }<pos:position pos:line="59" pos:column="10"/></block></while>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="62" pos:column="5">/* Check for HTTP_OK response status */</comment>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">status<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">==<pos:position pos:line="63" pos:column="18"/></operator> <name pos:line="63" pos:column="19">APR_SUCCESS<pos:position pos:line="63" pos:column="30"/></name></expr>)<pos:position pos:line="63" pos:column="31"/></condition><then pos:line="63" pos:column="31"> <block pos:line="63" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="64" pos:column="9">int<pos:position pos:line="64" pos:column="12"/></name></type> <name pos:line="64" pos:column="13">major<pos:position pos:line="64" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="64" pos:column="20">minor<pos:position pos:line="64" pos:column="25"/></name></decl>;<pos:position pos:line="64" pos:column="26"/></decl_stmt>
        <comment type="block" pos:line="65" pos:column="9">/* Only scan for three character status code */</comment>
        <decl_stmt><decl><type><name pos:line="66" pos:column="9">char<pos:position pos:line="66" pos:column="13"/></name></type> <name><name pos:line="66" pos:column="14">code_str<pos:position pos:line="66" pos:column="22"/></name><index pos:line="66" pos:column="22">[<expr><literal type="number" pos:line="66" pos:column="23">4<pos:position pos:line="66" pos:column="24"/></literal></expr>]<pos:position pos:line="66" pos:column="25"/></index></name></decl>;<pos:position pos:line="66" pos:column="26"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="68" pos:column="9">ap_log_error<pos:position pos:line="68" pos:column="21"/></name><argument_list pos:line="68" pos:column="21">(<argument><expr><name pos:line="68" pos:column="22">APLOG_MARK<pos:position pos:line="68" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="34">APLOG_DEBUG<pos:position pos:line="68" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="47">0<pos:position pos:line="68" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="50">s<pos:position pos:line="68" pos:column="51"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="69" pos:column="22">"send_http_connect: response from the forward proxy: %s"<pos:position pos:line="69" pos:column="78"/></literal></expr></argument>,
                     <argument><expr><name pos:line="70" pos:column="22">buffer<pos:position pos:line="70" pos:column="28"/></name></expr></argument>)<pos:position pos:line="70" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="30"/></expr_stmt>

        <comment type="block" pos:line="72" pos:column="9">/* Extract the returned code */</comment>
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><call><name pos:line="73" pos:column="13">sscanf<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><name pos:line="73" pos:column="20">buffer<pos:position pos:line="73" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="28">"HTTP/%u.%u %3s"<pos:position pos:line="73" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="73" pos:column="46">&amp;<pos:position pos:line="73" pos:column="51"/></operator><name pos:line="73" pos:column="47">major<pos:position pos:line="73" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="54">&amp;<pos:position pos:line="73" pos:column="59"/></operator><name pos:line="73" pos:column="55">minor<pos:position pos:line="73" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="62">code_str<pos:position pos:line="73" pos:column="70"/></name></expr></argument>)<pos:position pos:line="73" pos:column="71"/></argument_list></call> <operator pos:line="73" pos:column="72">==<pos:position pos:line="73" pos:column="74"/></operator> <literal type="number" pos:line="73" pos:column="75">3<pos:position pos:line="73" pos:column="76"/></literal></expr>)<pos:position pos:line="73" pos:column="77"/></condition><then pos:line="73" pos:column="77"> <block pos:line="73" pos:column="78">{
            <expr_stmt><expr><name pos:line="74" pos:column="13">status<pos:position pos:line="74" pos:column="19"/></name> <operator pos:line="74" pos:column="20">=<pos:position pos:line="74" pos:column="21"/></operator> <call><name pos:line="74" pos:column="22">atoi<pos:position pos:line="74" pos:column="26"/></name><argument_list pos:line="74" pos:column="26">(<argument><expr><name pos:line="74" pos:column="27">code_str<pos:position pos:line="74" pos:column="35"/></name></expr></argument>)<pos:position pos:line="74" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="37"/></expr_stmt>
            <if pos:line="75" pos:column="13">if <condition pos:line="75" pos:column="16">(<expr><name pos:line="75" pos:column="17">status<pos:position pos:line="75" pos:column="23"/></name> <operator pos:line="75" pos:column="24">==<pos:position pos:line="75" pos:column="26"/></operator> <name pos:line="75" pos:column="27">HTTP_OK<pos:position pos:line="75" pos:column="34"/></name></expr>)<pos:position pos:line="75" pos:column="35"/></condition><then pos:line="75" pos:column="35"> <block pos:line="75" pos:column="36">{
                <expr_stmt><expr><name pos:line="76" pos:column="17">status<pos:position pos:line="76" pos:column="23"/></name> <operator pos:line="76" pos:column="24">=<pos:position pos:line="76" pos:column="25"/></operator> <name pos:line="76" pos:column="26">APR_SUCCESS<pos:position pos:line="76" pos:column="37"/></name></expr>;<pos:position pos:line="76" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="77" pos:column="14"/></block></then>
            <else pos:line="78" pos:column="13">else <block pos:line="78" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="79" pos:column="17">ap_log_error<pos:position pos:line="79" pos:column="29"/></name><argument_list pos:line="79" pos:column="29">(<argument><expr><name pos:line="79" pos:column="30">APLOG_MARK<pos:position pos:line="79" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="42">APLOG_ERR<pos:position pos:line="79" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="79" pos:column="53">0<pos:position pos:line="79" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="56">s<pos:position pos:line="79" pos:column="57"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="80" pos:column="30">"send_http_connect: the forward proxy returned code is '%s'"<pos:position pos:line="80" pos:column="90"/></literal></expr></argument>,
                             <argument><expr><name pos:line="81" pos:column="30">code_str<pos:position pos:line="81" pos:column="38"/></name></expr></argument>)<pos:position pos:line="81" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="82" pos:column="13">status<pos:position pos:line="82" pos:column="19"/></name> <operator pos:line="82" pos:column="20">=<pos:position pos:line="82" pos:column="21"/></operator> <name pos:line="82" pos:column="22">APR_INCOMPLETE<pos:position pos:line="82" pos:column="36"/></name></expr>;<pos:position pos:line="82" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="83" pos:column="14"/></block></else></if>
        }<pos:position pos:line="84" pos:column="10"/></block></then></if>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>

    <return pos:line="87" pos:column="5">return<expr><operator pos:line="87" pos:column="11">(<pos:position pos:line="87" pos:column="12"/></operator><name pos:line="87" pos:column="12">status<pos:position pos:line="87" pos:column="18"/></name><operator pos:line="87" pos:column="18">)<pos:position pos:line="87" pos:column="19"/></operator></expr>;<pos:position pos:line="87" pos:column="20"/></return>
}<pos:position pos:line="88" pos:column="2"/></block></function></unit>
