<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_983_httpd-2.0.58.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">apply_rewrite_cond<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">request_rec<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">r<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">rewritecond_entry<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">p<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="2" pos:column="31">char<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">perdir<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">backrefinfo<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">briRR<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
                              <parameter><decl><type><name pos:line="3" pos:column="31">backrefinfo<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">briRC<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="50"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">input<pos:position pos:line="5" pos:column="15"/></name><index pos:line="5" pos:column="15">[<expr><name pos:line="5" pos:column="16">MAX_STRING_LEN<pos:position pos:line="5" pos:column="30"/></name></expr>]<pos:position pos:line="5" pos:column="31"/></index></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_finfo_t<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">sb<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">request_rec<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">rsub<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">regmatch_t<pos:position pos:line="8" pos:column="15"/></name></type> <name><name pos:line="8" pos:column="16">regmatch<pos:position pos:line="8" pos:column="24"/></name><index pos:line="8" pos:column="24">[<expr><name pos:line="8" pos:column="25">AP_MAX_REG_MATCH<pos:position pos:line="8" pos:column="41"/></name></expr>]<pos:position pos:line="8" pos:column="42"/></index></name></decl>;<pos:position pos:line="8" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">rc<pos:position pos:line="9" pos:column="11"/></name></decl>;<pos:position pos:line="9" pos:column="12"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/*
     *   Construct the string we match against
     */</comment>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">do_expand<pos:position pos:line="15" pos:column="14"/></name><argument_list pos:line="15" pos:column="14">(<argument><expr><name pos:line="15" pos:column="15">r<pos:position pos:line="15" pos:column="16"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="18">p<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">input<pos:position pos:line="15" pos:column="26"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">input<pos:position pos:line="15" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="35">sizeof<argument_list pos:line="15" pos:column="41">(<argument><expr><name pos:line="15" pos:column="42">input<pos:position pos:line="15" pos:column="47"/></name></expr></argument>)<pos:position pos:line="15" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">briRR<pos:position pos:line="15" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="57">briRC<pos:position pos:line="15" pos:column="62"/></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="64"/></expr_stmt>

    <comment type="block" pos:line="17" pos:column="5">/*
     *   Apply the patterns
     */</comment>

    <expr_stmt><expr><name pos:line="21" pos:column="5">rc<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <literal type="number" pos:line="21" pos:column="10">0<pos:position pos:line="21" pos:column="11"/></literal></expr>;<pos:position pos:line="21" pos:column="12"/></expr_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name pos:line="22" pos:column="9">strcmp<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name><name pos:line="22" pos:column="16">p<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">-&gt;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="19">pattern<pos:position pos:line="22" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="28">"-f"<pos:position pos:line="22" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call> <operator pos:line="22" pos:column="34">==<pos:position pos:line="22" pos:column="36"/></operator> <literal type="number" pos:line="22" pos:column="37">0<pos:position pos:line="22" pos:column="38"/></literal></expr>)<pos:position pos:line="22" pos:column="39"/></condition><then pos:line="22" pos:column="39"> <block pos:line="22" pos:column="40">{
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">apr_stat<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><operator pos:line="23" pos:column="22">&amp;<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="23">sb<pos:position pos:line="23" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="27">input<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">APR_FINFO_MIN<pos:position pos:line="23" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="49">r<pos:position pos:line="23" pos:column="50"/></name><operator pos:line="23" pos:column="50">-&gt;<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="52">pool<pos:position pos:line="23" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="57"/></argument_list></call> <operator pos:line="23" pos:column="58">==<pos:position pos:line="23" pos:column="60"/></operator> <name pos:line="23" pos:column="61">APR_SUCCESS<pos:position pos:line="23" pos:column="72"/></name></expr>)<pos:position pos:line="23" pos:column="73"/></condition><then pos:line="23" pos:column="73"> <block pos:line="23" pos:column="74">{
            <if pos:line="24" pos:column="13">if <condition pos:line="24" pos:column="16">(<expr><name><name pos:line="24" pos:column="17">sb<pos:position pos:line="24" pos:column="19"/></name><operator pos:line="24" pos:column="19">.<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="20">filetype<pos:position pos:line="24" pos:column="28"/></name></name> <operator pos:line="24" pos:column="29">==<pos:position pos:line="24" pos:column="31"/></operator> <name pos:line="24" pos:column="32">APR_REG<pos:position pos:line="24" pos:column="39"/></name></expr>)<pos:position pos:line="24" pos:column="40"/></condition><then pos:line="24" pos:column="40"> <block pos:line="24" pos:column="41">{
                <expr_stmt><expr><name pos:line="25" pos:column="17">rc<pos:position pos:line="25" pos:column="19"/></name> <operator pos:line="25" pos:column="20">=<pos:position pos:line="25" pos:column="21"/></operator> <literal type="number" pos:line="25" pos:column="22">1<pos:position pos:line="25" pos:column="23"/></literal></expr>;<pos:position pos:line="25" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="26" pos:column="14"/></block></then></if>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>
    }<pos:position pos:line="28" pos:column="6"/></block></then>
    <elseif pos:line="29" pos:column="5">else <if pos:line="29" pos:column="10">if <condition pos:line="29" pos:column="13">(<expr><call><name pos:line="29" pos:column="14">strcmp<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><name><name pos:line="29" pos:column="21">p<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">-&gt;<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="24">pattern<pos:position pos:line="29" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="33">"-s"<pos:position pos:line="29" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call> <operator pos:line="29" pos:column="39">==<pos:position pos:line="29" pos:column="41"/></operator> <literal type="number" pos:line="29" pos:column="42">0<pos:position pos:line="29" pos:column="43"/></literal></expr>)<pos:position pos:line="29" pos:column="44"/></condition><then pos:line="29" pos:column="44"> <block pos:line="29" pos:column="45">{
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">apr_stat<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><operator pos:line="30" pos:column="22">&amp;<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="23">sb<pos:position pos:line="30" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="27">input<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="34">APR_FINFO_MIN<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="49">r<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">-&gt;<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="52">pool<pos:position pos:line="30" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call> <operator pos:line="30" pos:column="58">==<pos:position pos:line="30" pos:column="60"/></operator> <name pos:line="30" pos:column="61">APR_SUCCESS<pos:position pos:line="30" pos:column="72"/></name></expr>)<pos:position pos:line="30" pos:column="73"/></condition><then pos:line="30" pos:column="73"> <block pos:line="30" pos:column="74">{
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><operator pos:line="31" pos:column="17">(<pos:position pos:line="31" pos:column="18"/></operator><name><name pos:line="31" pos:column="18">sb<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">.<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">filetype<pos:position pos:line="31" pos:column="29"/></name></name> <operator pos:line="31" pos:column="30">==<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="33">APR_REG<pos:position pos:line="31" pos:column="40"/></name><operator pos:line="31" pos:column="40">)<pos:position pos:line="31" pos:column="41"/></operator> <operator pos:line="31" pos:column="42">&amp;&amp;<pos:position pos:line="31" pos:column="52"/></operator> <name><name pos:line="31" pos:column="45">sb<pos:position pos:line="31" pos:column="47"/></name><operator pos:line="31" pos:column="47">.<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="48">size<pos:position pos:line="31" pos:column="52"/></name></name> <operator pos:line="31" pos:column="53">&gt;<pos:position pos:line="31" pos:column="57"/></operator> <literal type="number" pos:line="31" pos:column="55">0<pos:position pos:line="31" pos:column="56"/></literal></expr>)<pos:position pos:line="31" pos:column="57"/></condition><then pos:line="31" pos:column="57"> <block pos:line="31" pos:column="58">{
                <expr_stmt><expr><name pos:line="32" pos:column="17">rc<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">=<pos:position pos:line="32" pos:column="21"/></operator> <literal type="number" pos:line="32" pos:column="22">1<pos:position pos:line="32" pos:column="23"/></literal></expr>;<pos:position pos:line="32" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="33" pos:column="14"/></block></then></if>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="36" pos:column="5">else <if pos:line="36" pos:column="10">if <condition pos:line="36" pos:column="13">(<expr><call><name pos:line="36" pos:column="14">strcmp<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><name><name pos:line="36" pos:column="21">p<pos:position pos:line="36" pos:column="22"/></name><operator pos:line="36" pos:column="22">-&gt;<pos:position pos:line="36" pos:column="27"/></operator><name pos:line="36" pos:column="24">pattern<pos:position pos:line="36" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="33">"-l"<pos:position pos:line="36" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="38"/></argument_list></call> <operator pos:line="36" pos:column="39">==<pos:position pos:line="36" pos:column="41"/></operator> <literal type="number" pos:line="36" pos:column="42">0<pos:position pos:line="36" pos:column="43"/></literal></expr>)<pos:position pos:line="36" pos:column="44"/></condition><then pos:line="36" pos:column="44"> <block pos:line="36" pos:column="45">{
<cpp:if pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">if<pos:position pos:line="37" pos:column="4"/></cpp:directive> <expr><operator pos:line="37" pos:column="5">!<pos:position pos:line="37" pos:column="6"/></operator><call><name pos:line="37" pos:column="6">defined<pos:position pos:line="37" pos:column="13"/></name><argument_list pos:line="37" pos:column="13">(<argument><expr><name pos:line="37" pos:column="14">OS2<pos:position pos:line="37" pos:column="17"/></name></expr></argument>)<pos:position pos:line="37" pos:column="18"/></argument_list></call></expr></cpp:if>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">apr_lstat<pos:position pos:line="38" pos:column="22"/></name><argument_list pos:line="38" pos:column="22">(<argument><expr><operator pos:line="38" pos:column="23">&amp;<pos:position pos:line="38" pos:column="28"/></operator><name pos:line="38" pos:column="24">sb<pos:position pos:line="38" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="28">input<pos:position pos:line="38" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="35">APR_FINFO_MIN<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="50">r<pos:position pos:line="38" pos:column="51"/></name><operator pos:line="38" pos:column="51">-&gt;<pos:position pos:line="38" pos:column="56"/></operator><name pos:line="38" pos:column="53">pool<pos:position pos:line="38" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></call> <operator pos:line="38" pos:column="59">==<pos:position pos:line="38" pos:column="61"/></operator> <name pos:line="38" pos:column="62">APR_SUCCESS<pos:position pos:line="38" pos:column="73"/></name></expr>)<pos:position pos:line="38" pos:column="74"/></condition><then pos:line="38" pos:column="74"> <block pos:line="38" pos:column="75">{
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name><name pos:line="39" pos:column="17">sb<pos:position pos:line="39" pos:column="19"/></name><operator pos:line="39" pos:column="19">.<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="20">filetype<pos:position pos:line="39" pos:column="28"/></name></name> <operator pos:line="39" pos:column="29">==<pos:position pos:line="39" pos:column="31"/></operator> <name pos:line="39" pos:column="32">APR_LNK<pos:position pos:line="39" pos:column="39"/></name></expr>)<pos:position pos:line="39" pos:column="40"/></condition><then pos:line="39" pos:column="40"> <block pos:line="39" pos:column="41">{
                <expr_stmt><expr><name pos:line="40" pos:column="17">rc<pos:position pos:line="40" pos:column="19"/></name> <operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator> <literal type="number" pos:line="40" pos:column="22">1<pos:position pos:line="40" pos:column="23"/></literal></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="41" pos:column="14"/></block></then></if>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="45" pos:column="5">else <if pos:line="45" pos:column="10">if <condition pos:line="45" pos:column="13">(<expr><call><name pos:line="45" pos:column="14">strcmp<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name><name pos:line="45" pos:column="21">p<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">-&gt;<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="24">pattern<pos:position pos:line="45" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="33">"-d"<pos:position pos:line="45" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call> <operator pos:line="45" pos:column="39">==<pos:position pos:line="45" pos:column="41"/></operator> <literal type="number" pos:line="45" pos:column="42">0<pos:position pos:line="45" pos:column="43"/></literal></expr>)<pos:position pos:line="45" pos:column="44"/></condition><then pos:line="45" pos:column="44"> <block pos:line="45" pos:column="45">{
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">apr_stat<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><operator pos:line="46" pos:column="22">&amp;<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="23">sb<pos:position pos:line="46" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="27">input<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">APR_FINFO_MIN<pos:position pos:line="46" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="49">r<pos:position pos:line="46" pos:column="50"/></name><operator pos:line="46" pos:column="50">-&gt;<pos:position pos:line="46" pos:column="55"/></operator><name pos:line="46" pos:column="52">pool<pos:position pos:line="46" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call> <operator pos:line="46" pos:column="58">==<pos:position pos:line="46" pos:column="60"/></operator> <name pos:line="46" pos:column="61">APR_SUCCESS<pos:position pos:line="46" pos:column="72"/></name></expr>)<pos:position pos:line="46" pos:column="73"/></condition><then pos:line="46" pos:column="73"> <block pos:line="46" pos:column="74">{
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name><name pos:line="47" pos:column="17">sb<pos:position pos:line="47" pos:column="19"/></name><operator pos:line="47" pos:column="19">.<pos:position pos:line="47" pos:column="20"/></operator><name pos:line="47" pos:column="20">filetype<pos:position pos:line="47" pos:column="28"/></name></name> <operator pos:line="47" pos:column="29">==<pos:position pos:line="47" pos:column="31"/></operator> <name pos:line="47" pos:column="32">APR_DIR<pos:position pos:line="47" pos:column="39"/></name></expr>)<pos:position pos:line="47" pos:column="40"/></condition><then pos:line="47" pos:column="40"> <block pos:line="47" pos:column="41">{
                <expr_stmt><expr><name pos:line="48" pos:column="17">rc<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <literal type="number" pos:line="48" pos:column="22">1<pos:position pos:line="48" pos:column="23"/></literal></expr>;<pos:position pos:line="48" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="49" pos:column="14"/></block></then></if>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="52" pos:column="5">else <if pos:line="52" pos:column="10">if <condition pos:line="52" pos:column="13">(<expr><call><name pos:line="52" pos:column="14">strcmp<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">(<argument><expr><name><name pos:line="52" pos:column="21">p<pos:position pos:line="52" pos:column="22"/></name><operator pos:line="52" pos:column="22">-&gt;<pos:position pos:line="52" pos:column="27"/></operator><name pos:line="52" pos:column="24">pattern<pos:position pos:line="52" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="33">"-U"<pos:position pos:line="52" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="38"/></argument_list></call> <operator pos:line="52" pos:column="39">==<pos:position pos:line="52" pos:column="41"/></operator> <literal type="number" pos:line="52" pos:column="42">0<pos:position pos:line="52" pos:column="43"/></literal></expr>)<pos:position pos:line="52" pos:column="44"/></condition><then pos:line="52" pos:column="44"> <block pos:line="52" pos:column="45">{
        <comment type="block" pos:line="53" pos:column="9">/* avoid infinite subrequest recursion */</comment>
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><call><name pos:line="54" pos:column="13">strlen<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">input<pos:position pos:line="54" pos:column="25"/></name></expr></argument>)<pos:position pos:line="54" pos:column="26"/></argument_list></call> <operator pos:line="54" pos:column="27">&gt;<pos:position pos:line="54" pos:column="31"/></operator> <literal type="number" pos:line="54" pos:column="29">0<pos:position pos:line="54" pos:column="30"/></literal> <operator pos:line="54" pos:column="31">&amp;&amp;<pos:position pos:line="54" pos:column="41"/></operator> <call><name pos:line="54" pos:column="34">subreq_ok<pos:position pos:line="54" pos:column="43"/></name><argument_list pos:line="54" pos:column="43">(<argument><expr><name pos:line="54" pos:column="44">r<pos:position pos:line="54" pos:column="45"/></name></expr></argument>)<pos:position pos:line="54" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="47"/></condition><then pos:line="54" pos:column="47"> <block pos:line="54" pos:column="48">{

            <comment type="block" pos:line="56" pos:column="13">/* run a URI-based subrequest */</comment>
            <expr_stmt><expr><name pos:line="57" pos:column="13">rsub<pos:position pos:line="57" pos:column="17"/></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <call><name pos:line="57" pos:column="20">ap_sub_req_lookup_uri<pos:position pos:line="57" pos:column="41"/></name><argument_list pos:line="57" pos:column="41">(<argument><expr><name pos:line="57" pos:column="42">input<pos:position pos:line="57" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="49">r<pos:position pos:line="57" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="52">NULL<pos:position pos:line="57" pos:column="56"/></name></expr></argument>)<pos:position pos:line="57" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="58"/></expr_stmt>

            <comment type="block" pos:line="59" pos:column="13">/* URI exists for any result up to 3xx, redirects allowed */</comment>
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><name><name pos:line="60" pos:column="17">rsub<pos:position pos:line="60" pos:column="21"/></name><operator pos:line="60" pos:column="21">-&gt;<pos:position pos:line="60" pos:column="26"/></operator><name pos:line="60" pos:column="23">status<pos:position pos:line="60" pos:column="29"/></name></name> <operator pos:line="60" pos:column="30">&lt;<pos:position pos:line="60" pos:column="34"/></operator> <literal type="number" pos:line="60" pos:column="32">400<pos:position pos:line="60" pos:column="35"/></literal></expr>)<pos:position pos:line="60" pos:column="36"/></condition><then pos:line="60" pos:column="36">
                <block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="17">rc<pos:position pos:line="61" pos:column="19"/></name> <operator pos:line="61" pos:column="20">=<pos:position pos:line="61" pos:column="21"/></operator> <literal type="number" pos:line="61" pos:column="22">1<pos:position pos:line="61" pos:column="23"/></literal></expr>;<pos:position pos:line="61" pos:column="24"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="63" pos:column="13">/* log it */</comment>
            <expr_stmt><expr><call><name pos:line="64" pos:column="13">rewritelog<pos:position pos:line="64" pos:column="23"/></name><argument_list pos:line="64" pos:column="23">(<argument><expr><name pos:line="64" pos:column="24">r<pos:position pos:line="64" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="27">5<pos:position pos:line="64" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="64" pos:column="30">"RewriteCond URI (-U) check: "<pos:position pos:line="64" pos:column="60"/></literal>
                       <literal type="string" pos:line="65" pos:column="24">"path=%s -&gt; status=%d"<pos:position pos:line="65" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="48">input<pos:position pos:line="65" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="55">rsub<pos:position pos:line="65" pos:column="59"/></name><operator pos:line="65" pos:column="59">-&gt;<pos:position pos:line="65" pos:column="64"/></operator><name pos:line="65" pos:column="61">status<pos:position pos:line="65" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="69"/></expr_stmt>

            <comment type="block" pos:line="67" pos:column="13">/* cleanup by destroying the subrequest */</comment>
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">ap_destroy_sub_req<pos:position pos:line="68" pos:column="31"/></name><argument_list pos:line="68" pos:column="31">(<argument><expr><name pos:line="68" pos:column="32">rsub<pos:position pos:line="68" pos:column="36"/></name></expr></argument>)<pos:position pos:line="68" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="69" pos:column="10"/></block></then></if>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="71" pos:column="5">else <if pos:line="71" pos:column="10">if <condition pos:line="71" pos:column="13">(<expr><call><name pos:line="71" pos:column="14">strcmp<pos:position pos:line="71" pos:column="20"/></name><argument_list pos:line="71" pos:column="20">(<argument><expr><name><name pos:line="71" pos:column="21">p<pos:position pos:line="71" pos:column="22"/></name><operator pos:line="71" pos:column="22">-&gt;<pos:position pos:line="71" pos:column="27"/></operator><name pos:line="71" pos:column="24">pattern<pos:position pos:line="71" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="33">"-F"<pos:position pos:line="71" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="38"/></argument_list></call> <operator pos:line="71" pos:column="39">==<pos:position pos:line="71" pos:column="41"/></operator> <literal type="number" pos:line="71" pos:column="42">0<pos:position pos:line="71" pos:column="43"/></literal></expr>)<pos:position pos:line="71" pos:column="44"/></condition><then pos:line="71" pos:column="44"> <block pos:line="71" pos:column="45">{
        <comment type="block" pos:line="72" pos:column="9">/* avoid infinite subrequest recursion */</comment>
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><call><name pos:line="73" pos:column="13">strlen<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><name pos:line="73" pos:column="20">input<pos:position pos:line="73" pos:column="25"/></name></expr></argument>)<pos:position pos:line="73" pos:column="26"/></argument_list></call> <operator pos:line="73" pos:column="27">&gt;<pos:position pos:line="73" pos:column="31"/></operator> <literal type="number" pos:line="73" pos:column="29">0<pos:position pos:line="73" pos:column="30"/></literal> <operator pos:line="73" pos:column="31">&amp;&amp;<pos:position pos:line="73" pos:column="41"/></operator> <call><name pos:line="73" pos:column="34">subreq_ok<pos:position pos:line="73" pos:column="43"/></name><argument_list pos:line="73" pos:column="43">(<argument><expr><name pos:line="73" pos:column="44">r<pos:position pos:line="73" pos:column="45"/></name></expr></argument>)<pos:position pos:line="73" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="47"/></condition><then pos:line="73" pos:column="47"> <block pos:line="73" pos:column="48">{

            <comment type="block" pos:line="75" pos:column="13">/* process a file-based subrequest:
             * this differs from -U in that no path translation is done.
             */</comment>
            <expr_stmt><expr><name pos:line="78" pos:column="13">rsub<pos:position pos:line="78" pos:column="17"/></name> <operator pos:line="78" pos:column="18">=<pos:position pos:line="78" pos:column="19"/></operator> <call><name pos:line="78" pos:column="20">ap_sub_req_lookup_file<pos:position pos:line="78" pos:column="42"/></name><argument_list pos:line="78" pos:column="42">(<argument><expr><name pos:line="78" pos:column="43">input<pos:position pos:line="78" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="50">r<pos:position pos:line="78" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="53">NULL<pos:position pos:line="78" pos:column="57"/></name></expr></argument>)<pos:position pos:line="78" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="59"/></expr_stmt>

            <comment type="block" pos:line="80" pos:column="13">/* file exists for any result up to 2xx, no redirects */</comment>
            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><name><name pos:line="81" pos:column="17">rsub<pos:position pos:line="81" pos:column="21"/></name><operator pos:line="81" pos:column="21">-&gt;<pos:position pos:line="81" pos:column="26"/></operator><name pos:line="81" pos:column="23">status<pos:position pos:line="81" pos:column="29"/></name></name> <operator pos:line="81" pos:column="30">&lt;<pos:position pos:line="81" pos:column="34"/></operator> <literal type="number" pos:line="81" pos:column="32">300<pos:position pos:line="81" pos:column="35"/></literal> <operator pos:line="81" pos:column="36">&amp;&amp;<pos:position pos:line="81" pos:column="46"/></operator>
                <comment type="block" pos:line="82" pos:column="17">/* double-check that file exists since default result is 200 */</comment>
                <call><name pos:line="83" pos:column="17">apr_stat<pos:position pos:line="83" pos:column="25"/></name><argument_list pos:line="83" pos:column="25">(<argument><expr><operator pos:line="83" pos:column="26">&amp;<pos:position pos:line="83" pos:column="31"/></operator><name pos:line="83" pos:column="27">sb<pos:position pos:line="83" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="31">rsub<pos:position pos:line="83" pos:column="35"/></name><operator pos:line="83" pos:column="35">-&gt;<pos:position pos:line="83" pos:column="40"/></operator><name pos:line="83" pos:column="37">filename<pos:position pos:line="83" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="47">APR_FINFO_MIN<pos:position pos:line="83" pos:column="60"/></name></expr></argument>,
                         <argument><expr><name><name pos:line="84" pos:column="26">r<pos:position pos:line="84" pos:column="27"/></name><operator pos:line="84" pos:column="27">-&gt;<pos:position pos:line="84" pos:column="32"/></operator><name pos:line="84" pos:column="29">pool<pos:position pos:line="84" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="34"/></argument_list></call> <operator pos:line="84" pos:column="35">==<pos:position pos:line="84" pos:column="37"/></operator> <name pos:line="84" pos:column="38">APR_SUCCESS<pos:position pos:line="84" pos:column="49"/></name></expr>)<pos:position pos:line="84" pos:column="50"/></condition><then pos:line="84" pos:column="50"> <block pos:line="84" pos:column="51">{
                <expr_stmt><expr><name pos:line="85" pos:column="17">rc<pos:position pos:line="85" pos:column="19"/></name> <operator pos:line="85" pos:column="20">=<pos:position pos:line="85" pos:column="21"/></operator> <literal type="number" pos:line="85" pos:column="22">1<pos:position pos:line="85" pos:column="23"/></literal></expr>;<pos:position pos:line="85" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="86" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="88" pos:column="13">/* log it */</comment>
            <expr_stmt><expr><call><name pos:line="89" pos:column="13">rewritelog<pos:position pos:line="89" pos:column="23"/></name><argument_list pos:line="89" pos:column="23">(<argument><expr><name pos:line="89" pos:column="24">r<pos:position pos:line="89" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="27">5<pos:position pos:line="89" pos:column="28"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="30">"RewriteCond file (-F) check: path=%s "<pos:position pos:line="89" pos:column="69"/></literal>
                       <literal type="string" pos:line="90" pos:column="24">"-&gt; file=%s status=%d"<pos:position pos:line="90" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="48">input<pos:position pos:line="90" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="55">rsub<pos:position pos:line="90" pos:column="59"/></name><operator pos:line="90" pos:column="59">-&gt;<pos:position pos:line="90" pos:column="64"/></operator><name pos:line="90" pos:column="61">filename<pos:position pos:line="90" pos:column="69"/></name></name></expr></argument>,
                       <argument><expr><name><name pos:line="91" pos:column="24">rsub<pos:position pos:line="91" pos:column="28"/></name><operator pos:line="91" pos:column="28">-&gt;<pos:position pos:line="91" pos:column="33"/></operator><name pos:line="91" pos:column="30">status<pos:position pos:line="91" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="38"/></expr_stmt>

            <comment type="block" pos:line="93" pos:column="13">/* cleanup by destroying the subrequest */</comment>
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">ap_destroy_sub_req<pos:position pos:line="94" pos:column="31"/></name><argument_list pos:line="94" pos:column="31">(<argument><expr><name pos:line="94" pos:column="32">rsub<pos:position pos:line="94" pos:column="36"/></name></expr></argument>)<pos:position pos:line="94" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="95" pos:column="10"/></block></then></if>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="97" pos:column="5">else <if pos:line="97" pos:column="10">if <condition pos:line="97" pos:column="13">(<expr><call><name pos:line="97" pos:column="14">strlen<pos:position pos:line="97" pos:column="20"/></name><argument_list pos:line="97" pos:column="20">(<argument><expr><name><name pos:line="97" pos:column="21">p<pos:position pos:line="97" pos:column="22"/></name><operator pos:line="97" pos:column="22">-&gt;<pos:position pos:line="97" pos:column="27"/></operator><name pos:line="97" pos:column="24">pattern<pos:position pos:line="97" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="32"/></argument_list></call> <operator pos:line="97" pos:column="33">&gt;<pos:position pos:line="97" pos:column="37"/></operator> <literal type="number" pos:line="97" pos:column="35">1<pos:position pos:line="97" pos:column="36"/></literal> <operator pos:line="97" pos:column="37">&amp;&amp;<pos:position pos:line="97" pos:column="47"/></operator> <operator pos:line="97" pos:column="40">*<pos:position pos:line="97" pos:column="41"/></operator><operator pos:line="97" pos:column="41">(<pos:position pos:line="97" pos:column="42"/></operator><name><name pos:line="97" pos:column="42">p<pos:position pos:line="97" pos:column="43"/></name><operator pos:line="97" pos:column="43">-&gt;<pos:position pos:line="97" pos:column="48"/></operator><name pos:line="97" pos:column="45">pattern<pos:position pos:line="97" pos:column="52"/></name></name><operator pos:line="97" pos:column="52">)<pos:position pos:line="97" pos:column="53"/></operator> <operator pos:line="97" pos:column="54">==<pos:position pos:line="97" pos:column="56"/></operator> <literal type="char" pos:line="97" pos:column="57">'&gt;'<pos:position pos:line="97" pos:column="63"/></literal></expr>)<pos:position pos:line="97" pos:column="61"/></condition><then pos:line="97" pos:column="61"> <block pos:line="97" pos:column="62">{
        <expr_stmt><expr><name pos:line="98" pos:column="9">rc<pos:position pos:line="98" pos:column="11"/></name> <operator pos:line="98" pos:column="12">=<pos:position pos:line="98" pos:column="13"/></operator> <operator pos:line="98" pos:column="14">(<pos:position pos:line="98" pos:column="15"/></operator><ternary><condition><expr><call><name pos:line="98" pos:column="15">compare_lexicography<pos:position pos:line="98" pos:column="35"/></name><argument_list pos:line="98" pos:column="35">(<argument><expr><name pos:line="98" pos:column="36">input<pos:position pos:line="98" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="98" pos:column="43">p<pos:position pos:line="98" pos:column="44"/></name><operator pos:line="98" pos:column="44">-&gt;<pos:position pos:line="98" pos:column="49"/></operator><name pos:line="98" pos:column="46">pattern<pos:position pos:line="98" pos:column="53"/></name></name><operator pos:line="98" pos:column="53">+<pos:position pos:line="98" pos:column="54"/></operator><literal type="number" pos:line="98" pos:column="54">1<pos:position pos:line="98" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="56"/></argument_list></call> <operator pos:line="98" pos:column="57">==<pos:position pos:line="98" pos:column="59"/></operator> <literal type="number" pos:line="98" pos:column="60">1<pos:position pos:line="98" pos:column="61"/></literal></expr> ?<pos:position pos:line="98" pos:column="63"/></condition><then pos:line="98" pos:column="63"> <expr><literal type="number" pos:line="98" pos:column="64">1<pos:position pos:line="98" pos:column="65"/></literal></expr> <pos:position pos:line="98" pos:column="66"/></then><else pos:line="98" pos:column="66">: <expr><literal type="number" pos:line="98" pos:column="68">0<pos:position pos:line="98" pos:column="69"/></literal></expr></else></ternary><operator pos:line="98" pos:column="69">)<pos:position pos:line="98" pos:column="70"/></operator></expr>;<pos:position pos:line="98" pos:column="71"/></expr_stmt>
    }<pos:position pos:line="99" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="100" pos:column="5">else <if pos:line="100" pos:column="10">if <condition pos:line="100" pos:column="13">(<expr><call><name pos:line="100" pos:column="14">strlen<pos:position pos:line="100" pos:column="20"/></name><argument_list pos:line="100" pos:column="20">(<argument><expr><name><name pos:line="100" pos:column="21">p<pos:position pos:line="100" pos:column="22"/></name><operator pos:line="100" pos:column="22">-&gt;<pos:position pos:line="100" pos:column="27"/></operator><name pos:line="100" pos:column="24">pattern<pos:position pos:line="100" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="100" pos:column="32"/></argument_list></call> <operator pos:line="100" pos:column="33">&gt;<pos:position pos:line="100" pos:column="37"/></operator> <literal type="number" pos:line="100" pos:column="35">1<pos:position pos:line="100" pos:column="36"/></literal> <operator pos:line="100" pos:column="37">&amp;&amp;<pos:position pos:line="100" pos:column="47"/></operator> <operator pos:line="100" pos:column="40">*<pos:position pos:line="100" pos:column="41"/></operator><operator pos:line="100" pos:column="41">(<pos:position pos:line="100" pos:column="42"/></operator><name><name pos:line="100" pos:column="42">p<pos:position pos:line="100" pos:column="43"/></name><operator pos:line="100" pos:column="43">-&gt;<pos:position pos:line="100" pos:column="48"/></operator><name pos:line="100" pos:column="45">pattern<pos:position pos:line="100" pos:column="52"/></name></name><operator pos:line="100" pos:column="52">)<pos:position pos:line="100" pos:column="53"/></operator> <operator pos:line="100" pos:column="54">==<pos:position pos:line="100" pos:column="56"/></operator> <literal type="char" pos:line="100" pos:column="57">'&lt;'<pos:position pos:line="100" pos:column="63"/></literal></expr>)<pos:position pos:line="100" pos:column="61"/></condition><then pos:line="100" pos:column="61"> <block pos:line="100" pos:column="62">{
        <expr_stmt><expr><name pos:line="101" pos:column="9">rc<pos:position pos:line="101" pos:column="11"/></name> <operator pos:line="101" pos:column="12">=<pos:position pos:line="101" pos:column="13"/></operator> <operator pos:line="101" pos:column="14">(<pos:position pos:line="101" pos:column="15"/></operator><ternary><condition><expr><call><name pos:line="101" pos:column="15">compare_lexicography<pos:position pos:line="101" pos:column="35"/></name><argument_list pos:line="101" pos:column="35">(<argument><expr><name pos:line="101" pos:column="36">input<pos:position pos:line="101" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="43">p<pos:position pos:line="101" pos:column="44"/></name><operator pos:line="101" pos:column="44">-&gt;<pos:position pos:line="101" pos:column="49"/></operator><name pos:line="101" pos:column="46">pattern<pos:position pos:line="101" pos:column="53"/></name></name><operator pos:line="101" pos:column="53">+<pos:position pos:line="101" pos:column="54"/></operator><literal type="number" pos:line="101" pos:column="54">1<pos:position pos:line="101" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="56"/></argument_list></call> <operator pos:line="101" pos:column="57">==<pos:position pos:line="101" pos:column="59"/></operator> <operator pos:line="101" pos:column="60">-<pos:position pos:line="101" pos:column="61"/></operator><literal type="number" pos:line="101" pos:column="61">1<pos:position pos:line="101" pos:column="62"/></literal></expr> ?<pos:position pos:line="101" pos:column="64"/></condition><then pos:line="101" pos:column="64"> <expr><literal type="number" pos:line="101" pos:column="65">1<pos:position pos:line="101" pos:column="66"/></literal></expr> <pos:position pos:line="101" pos:column="67"/></then><else pos:line="101" pos:column="67">: <expr><literal type="number" pos:line="101" pos:column="69">0<pos:position pos:line="101" pos:column="70"/></literal></expr></else></ternary><operator pos:line="101" pos:column="70">)<pos:position pos:line="101" pos:column="71"/></operator></expr>;<pos:position pos:line="101" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="103" pos:column="5">else <if pos:line="103" pos:column="10">if <condition pos:line="103" pos:column="13">(<expr><call><name pos:line="103" pos:column="14">strlen<pos:position pos:line="103" pos:column="20"/></name><argument_list pos:line="103" pos:column="20">(<argument><expr><name><name pos:line="103" pos:column="21">p<pos:position pos:line="103" pos:column="22"/></name><operator pos:line="103" pos:column="22">-&gt;<pos:position pos:line="103" pos:column="27"/></operator><name pos:line="103" pos:column="24">pattern<pos:position pos:line="103" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="32"/></argument_list></call> <operator pos:line="103" pos:column="33">&gt;<pos:position pos:line="103" pos:column="37"/></operator> <literal type="number" pos:line="103" pos:column="35">1<pos:position pos:line="103" pos:column="36"/></literal> <operator pos:line="103" pos:column="37">&amp;&amp;<pos:position pos:line="103" pos:column="47"/></operator> <operator pos:line="103" pos:column="40">*<pos:position pos:line="103" pos:column="41"/></operator><operator pos:line="103" pos:column="41">(<pos:position pos:line="103" pos:column="42"/></operator><name><name pos:line="103" pos:column="42">p<pos:position pos:line="103" pos:column="43"/></name><operator pos:line="103" pos:column="43">-&gt;<pos:position pos:line="103" pos:column="48"/></operator><name pos:line="103" pos:column="45">pattern<pos:position pos:line="103" pos:column="52"/></name></name><operator pos:line="103" pos:column="52">)<pos:position pos:line="103" pos:column="53"/></operator> <operator pos:line="103" pos:column="54">==<pos:position pos:line="103" pos:column="56"/></operator> <literal type="char" pos:line="103" pos:column="57">'='<pos:position pos:line="103" pos:column="60"/></literal></expr>)<pos:position pos:line="103" pos:column="61"/></condition><then pos:line="103" pos:column="61"> <block pos:line="103" pos:column="62">{
        <if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><call><name pos:line="104" pos:column="13">strcmp<pos:position pos:line="104" pos:column="19"/></name><argument_list pos:line="104" pos:column="19">(<argument><expr><name><name pos:line="104" pos:column="20">p<pos:position pos:line="104" pos:column="21"/></name><operator pos:line="104" pos:column="21">-&gt;<pos:position pos:line="104" pos:column="26"/></operator><name pos:line="104" pos:column="23">pattern<pos:position pos:line="104" pos:column="30"/></name></name><operator pos:line="104" pos:column="30">+<pos:position pos:line="104" pos:column="31"/></operator><literal type="number" pos:line="104" pos:column="31">1<pos:position pos:line="104" pos:column="32"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="34">"\"\""<pos:position pos:line="104" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="41"/></argument_list></call> <operator pos:line="104" pos:column="42">==<pos:position pos:line="104" pos:column="44"/></operator> <literal type="number" pos:line="104" pos:column="45">0<pos:position pos:line="104" pos:column="46"/></literal></expr>)<pos:position pos:line="104" pos:column="47"/></condition><then pos:line="104" pos:column="47"> <block pos:line="104" pos:column="48">{
            <expr_stmt><expr><name pos:line="105" pos:column="13">rc<pos:position pos:line="105" pos:column="15"/></name> <operator pos:line="105" pos:column="16">=<pos:position pos:line="105" pos:column="17"/></operator> <operator pos:line="105" pos:column="18">(<pos:position pos:line="105" pos:column="19"/></operator><operator pos:line="105" pos:column="19">*<pos:position pos:line="105" pos:column="20"/></operator><name pos:line="105" pos:column="20">input<pos:position pos:line="105" pos:column="25"/></name> <operator pos:line="105" pos:column="26">==<pos:position pos:line="105" pos:column="28"/></operator> <literal type="char" pos:line="105" pos:column="29">'\0'<pos:position pos:line="105" pos:column="33"/></literal><operator pos:line="105" pos:column="33">)<pos:position pos:line="105" pos:column="34"/></operator></expr>;<pos:position pos:line="105" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="106" pos:column="10"/></block></then>
        <else pos:line="107" pos:column="9">else <block pos:line="107" pos:column="14">{
            <expr_stmt><expr><name pos:line="108" pos:column="13">rc<pos:position pos:line="108" pos:column="15"/></name> <operator pos:line="108" pos:column="16">=<pos:position pos:line="108" pos:column="17"/></operator> <operator pos:line="108" pos:column="18">(<pos:position pos:line="108" pos:column="19"/></operator><ternary><condition><expr><call><name pos:line="108" pos:column="19">strcmp<pos:position pos:line="108" pos:column="25"/></name><argument_list pos:line="108" pos:column="25">(<argument><expr><name pos:line="108" pos:column="26">input<pos:position pos:line="108" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="108" pos:column="33">p<pos:position pos:line="108" pos:column="34"/></name><operator pos:line="108" pos:column="34">-&gt;<pos:position pos:line="108" pos:column="39"/></operator><name pos:line="108" pos:column="36">pattern<pos:position pos:line="108" pos:column="43"/></name></name><operator pos:line="108" pos:column="43">+<pos:position pos:line="108" pos:column="44"/></operator><literal type="number" pos:line="108" pos:column="44">1<pos:position pos:line="108" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="46"/></argument_list></call> <operator pos:line="108" pos:column="47">==<pos:position pos:line="108" pos:column="49"/></operator> <literal type="number" pos:line="108" pos:column="50">0<pos:position pos:line="108" pos:column="51"/></literal></expr> ?<pos:position pos:line="108" pos:column="53"/></condition><then pos:line="108" pos:column="53"> <expr><literal type="number" pos:line="108" pos:column="54">1<pos:position pos:line="108" pos:column="55"/></literal></expr> <pos:position pos:line="108" pos:column="56"/></then><else pos:line="108" pos:column="56">: <expr><literal type="number" pos:line="108" pos:column="58">0<pos:position pos:line="108" pos:column="59"/></literal></expr></else></ternary><operator pos:line="108" pos:column="59">)<pos:position pos:line="108" pos:column="60"/></operator></expr>;<pos:position pos:line="108" pos:column="61"/></expr_stmt>
        }<pos:position pos:line="109" pos:column="10"/></block></else></if>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if></elseif>
    <else pos:line="111" pos:column="5">else <block pos:line="111" pos:column="10">{
        <comment type="block" pos:line="112" pos:column="9">/* it is really a regexp pattern, so apply it */</comment>
        <expr_stmt><expr><name pos:line="113" pos:column="9">rc<pos:position pos:line="113" pos:column="11"/></name> <operator pos:line="113" pos:column="12">=<pos:position pos:line="113" pos:column="13"/></operator> <operator pos:line="113" pos:column="14">(<pos:position pos:line="113" pos:column="15"/></operator><call><name pos:line="113" pos:column="15">ap_regexec<pos:position pos:line="113" pos:column="25"/></name><argument_list pos:line="113" pos:column="25">(<argument><expr><name><name pos:line="113" pos:column="26">p<pos:position pos:line="113" pos:column="27"/></name><operator pos:line="113" pos:column="27">-&gt;<pos:position pos:line="113" pos:column="32"/></operator><name pos:line="113" pos:column="29">regexp<pos:position pos:line="113" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="37">input<pos:position pos:line="113" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="44">AP_MAX_REG_MATCH<pos:position pos:line="113" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="62">regmatch<pos:position pos:line="113" pos:column="70"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="113" pos:column="71">0<pos:position pos:line="113" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="73"/></argument_list></call> <operator pos:line="113" pos:column="74">==<pos:position pos:line="113" pos:column="76"/></operator> <literal type="number" pos:line="113" pos:column="77">0<pos:position pos:line="113" pos:column="78"/></literal><operator pos:line="113" pos:column="78">)<pos:position pos:line="113" pos:column="79"/></operator></expr>;<pos:position pos:line="113" pos:column="80"/></expr_stmt>

        <comment type="block" pos:line="115" pos:column="9">/* if it isn't a negated pattern and really matched
           we update the passed-through regex subst info structure */</comment>
        <if pos:line="117" pos:column="9">if <condition pos:line="117" pos:column="12">(<expr><name pos:line="117" pos:column="13">rc<pos:position pos:line="117" pos:column="15"/></name> <operator pos:line="117" pos:column="16">&amp;&amp;<pos:position pos:line="117" pos:column="26"/></operator> <operator pos:line="117" pos:column="19">!<pos:position pos:line="117" pos:column="20"/></operator><operator pos:line="117" pos:column="20">(<pos:position pos:line="117" pos:column="21"/></operator><name><name pos:line="117" pos:column="21">p<pos:position pos:line="117" pos:column="22"/></name><operator pos:line="117" pos:column="22">-&gt;<pos:position pos:line="117" pos:column="27"/></operator><name pos:line="117" pos:column="24">flags<pos:position pos:line="117" pos:column="29"/></name></name> <operator pos:line="117" pos:column="30">&amp;<pos:position pos:line="117" pos:column="35"/></operator> <name pos:line="117" pos:column="32">CONDFLAG_NOTMATCH<pos:position pos:line="117" pos:column="49"/></name><operator pos:line="117" pos:column="49">)<pos:position pos:line="117" pos:column="50"/></operator></expr>)<pos:position pos:line="117" pos:column="51"/></condition><then pos:line="117" pos:column="51"> <block pos:line="117" pos:column="52">{
            <expr_stmt><expr><name><name pos:line="118" pos:column="13">briRC<pos:position pos:line="118" pos:column="18"/></name><operator pos:line="118" pos:column="18">-&gt;<pos:position pos:line="118" pos:column="23"/></operator><name pos:line="118" pos:column="20">source<pos:position pos:line="118" pos:column="26"/></name></name> <operator pos:line="118" pos:column="27">=<pos:position pos:line="118" pos:column="28"/></operator> <call><name pos:line="118" pos:column="29">apr_pstrdup<pos:position pos:line="118" pos:column="40"/></name><argument_list pos:line="118" pos:column="40">(<argument><expr><name><name pos:line="118" pos:column="41">r<pos:position pos:line="118" pos:column="42"/></name><operator pos:line="118" pos:column="42">-&gt;<pos:position pos:line="118" pos:column="47"/></operator><name pos:line="118" pos:column="44">pool<pos:position pos:line="118" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="50">input<pos:position pos:line="118" pos:column="55"/></name></expr></argument>)<pos:position pos:line="118" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="119" pos:column="13">briRC<pos:position pos:line="119" pos:column="18"/></name><operator pos:line="119" pos:column="18">-&gt;<pos:position pos:line="119" pos:column="23"/></operator><name pos:line="119" pos:column="20">nsub<pos:position pos:line="119" pos:column="24"/></name></name>   <operator pos:line="119" pos:column="27">=<pos:position pos:line="119" pos:column="28"/></operator> <name><name pos:line="119" pos:column="29">p<pos:position pos:line="119" pos:column="30"/></name><operator pos:line="119" pos:column="30">-&gt;<pos:position pos:line="119" pos:column="35"/></operator><name pos:line="119" pos:column="32">regexp<pos:position pos:line="119" pos:column="38"/></name><operator pos:line="119" pos:column="38">-&gt;<pos:position pos:line="119" pos:column="43"/></operator><name pos:line="119" pos:column="40">re_nsub<pos:position pos:line="119" pos:column="47"/></name></name></expr>;<pos:position pos:line="119" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">memcpy<pos:position pos:line="120" pos:column="19"/></name><argument_list pos:line="120" pos:column="19">(<argument><expr><operator pos:line="120" pos:column="20">(<pos:position pos:line="120" pos:column="21"/></operator><name pos:line="120" pos:column="21">void<pos:position pos:line="120" pos:column="25"/></name> <operator pos:line="120" pos:column="26">*<pos:position pos:line="120" pos:column="27"/></operator><operator pos:line="120" pos:column="27">)<pos:position pos:line="120" pos:column="28"/></operator><operator pos:line="120" pos:column="28">(<pos:position pos:line="120" pos:column="29"/></operator><name><name pos:line="120" pos:column="29">briRC<pos:position pos:line="120" pos:column="34"/></name><operator pos:line="120" pos:column="34">-&gt;<pos:position pos:line="120" pos:column="39"/></operator><name pos:line="120" pos:column="36">regmatch<pos:position pos:line="120" pos:column="44"/></name></name><operator pos:line="120" pos:column="44">)<pos:position pos:line="120" pos:column="45"/></operator></expr></argument>, <argument><expr><operator pos:line="120" pos:column="47">(<pos:position pos:line="120" pos:column="48"/></operator><name pos:line="120" pos:column="48">void<pos:position pos:line="120" pos:column="52"/></name> <operator pos:line="120" pos:column="53">*<pos:position pos:line="120" pos:column="54"/></operator><operator pos:line="120" pos:column="54">)<pos:position pos:line="120" pos:column="55"/></operator><operator pos:line="120" pos:column="55">(<pos:position pos:line="120" pos:column="56"/></operator><name pos:line="120" pos:column="56">regmatch<pos:position pos:line="120" pos:column="64"/></name><operator pos:line="120" pos:column="64">)<pos:position pos:line="120" pos:column="65"/></operator></expr></argument>,
                   <argument><expr><sizeof pos:line="121" pos:column="20">sizeof<argument_list pos:line="121" pos:column="26">(<argument><expr><name pos:line="121" pos:column="27">regmatch<pos:position pos:line="121" pos:column="35"/></name></expr></argument>)<pos:position pos:line="121" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="121" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="122" pos:column="10"/></block></then></if>
    }<pos:position pos:line="123" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="125" pos:column="5">/* if this is a non-matching regexp, just negate the result */</comment>
    <if pos:line="126" pos:column="5">if <condition pos:line="126" pos:column="8">(<expr><name><name pos:line="126" pos:column="9">p<pos:position pos:line="126" pos:column="10"/></name><operator pos:line="126" pos:column="10">-&gt;<pos:position pos:line="126" pos:column="15"/></operator><name pos:line="126" pos:column="12">flags<pos:position pos:line="126" pos:column="17"/></name></name> <operator pos:line="126" pos:column="18">&amp;<pos:position pos:line="126" pos:column="23"/></operator> <name pos:line="126" pos:column="20">CONDFLAG_NOTMATCH<pos:position pos:line="126" pos:column="37"/></name></expr>)<pos:position pos:line="126" pos:column="38"/></condition><then pos:line="126" pos:column="38"> <block pos:line="126" pos:column="39">{
        <expr_stmt><expr><name pos:line="127" pos:column="9">rc<pos:position pos:line="127" pos:column="11"/></name> <operator pos:line="127" pos:column="12">=<pos:position pos:line="127" pos:column="13"/></operator> <operator pos:line="127" pos:column="14">!<pos:position pos:line="127" pos:column="15"/></operator><name pos:line="127" pos:column="15">rc<pos:position pos:line="127" pos:column="17"/></name></expr>;<pos:position pos:line="127" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="128" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="130" pos:column="5">rewritelog<pos:position pos:line="130" pos:column="15"/></name><argument_list pos:line="130" pos:column="15">(<argument><expr><name pos:line="130" pos:column="16">r<pos:position pos:line="130" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="130" pos:column="19">4<pos:position pos:line="130" pos:column="20"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="130" pos:column="22">"RewriteCond: input='%s' pattern='%s%s' =&gt; %s"<pos:position pos:line="130" pos:column="71"/></literal></expr></argument>,
               <argument><expr><name pos:line="131" pos:column="16">input<pos:position pos:line="131" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="131" pos:column="23">(<pos:position pos:line="131" pos:column="24"/></operator><ternary><condition><expr><name><name pos:line="131" pos:column="24">p<pos:position pos:line="131" pos:column="25"/></name><operator pos:line="131" pos:column="25">-&gt;<pos:position pos:line="131" pos:column="30"/></operator><name pos:line="131" pos:column="27">flags<pos:position pos:line="131" pos:column="32"/></name></name> <operator pos:line="131" pos:column="33">&amp;<pos:position pos:line="131" pos:column="38"/></operator> <name pos:line="131" pos:column="35">CONDFLAG_NOTMATCH<pos:position pos:line="131" pos:column="52"/></name></expr> ?<pos:position pos:line="131" pos:column="54"/></condition><then pos:line="131" pos:column="54"> <expr><literal type="string" pos:line="131" pos:column="55">"!"<pos:position pos:line="131" pos:column="58"/></literal></expr> <pos:position pos:line="131" pos:column="59"/></then><else pos:line="131" pos:column="59">: <expr><literal type="string" pos:line="131" pos:column="61">""<pos:position pos:line="131" pos:column="63"/></literal></expr></else></ternary><operator pos:line="131" pos:column="63">)<pos:position pos:line="131" pos:column="64"/></operator></expr></argument>,
               <argument><expr><name><name pos:line="132" pos:column="16">p<pos:position pos:line="132" pos:column="17"/></name><operator pos:line="132" pos:column="17">-&gt;<pos:position pos:line="132" pos:column="22"/></operator><name pos:line="132" pos:column="19">pattern<pos:position pos:line="132" pos:column="26"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="132" pos:column="28">rc<pos:position pos:line="132" pos:column="30"/></name></expr> ?<pos:position pos:line="132" pos:column="32"/></condition><then pos:line="132" pos:column="32"> <expr><literal type="string" pos:line="132" pos:column="33">"matched"<pos:position pos:line="132" pos:column="42"/></literal></expr> <pos:position pos:line="132" pos:column="43"/></then><else pos:line="132" pos:column="43">: <expr><literal type="string" pos:line="132" pos:column="45">"not-matched"<pos:position pos:line="132" pos:column="58"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="132" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="60"/></expr_stmt>

    <comment type="block" pos:line="134" pos:column="5">/* end just return the result */</comment>
    <return pos:line="135" pos:column="5">return <expr><name pos:line="135" pos:column="12">rc<pos:position pos:line="135" pos:column="14"/></name></expr>;<pos:position pos:line="135" pos:column="15"/></return>
}<pos:position pos:line="136" pos:column="2"/></block></function></unit>
