<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2183_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">worker_stack_terminate<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">worker_stack<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">stack<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">rv<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">worker_wakeup_info<pos:position pos:line="4" pos:column="23"/></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">worker<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">(<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">rv<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <call><name pos:line="6" pos:column="15">apr_thread_mutex_lock<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name><name pos:line="6" pos:column="37">stack<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">-&gt;<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="44">mutex<pos:position pos:line="6" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call><operator pos:line="6" pos:column="50">)<pos:position pos:line="6" pos:column="51"/></operator> <operator pos:line="6" pos:column="52">!=<pos:position pos:line="6" pos:column="54"/></operator> <name pos:line="6" pos:column="55">APR_SUCCESS<pos:position pos:line="6" pos:column="66"/></name></expr>)<pos:position pos:line="6" pos:column="67"/></condition><then pos:line="6" pos:column="67"> <block pos:line="6" pos:column="68">{
        <return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">rv<pos:position pos:line="7" pos:column="18"/></name></expr>;<pos:position pos:line="7" pos:column="19"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="9" pos:column="5">stack<pos:position pos:line="9" pos:column="10"/></name><operator pos:line="9" pos:column="10">-&gt;<pos:position pos:line="9" pos:column="15"/></operator><name pos:line="9" pos:column="12">terminated<pos:position pos:line="9" pos:column="22"/></name></name> <operator pos:line="9" pos:column="23">=<pos:position pos:line="9" pos:column="24"/></operator> <literal type="number" pos:line="9" pos:column="25">1<pos:position pos:line="9" pos:column="26"/></literal></expr>;<pos:position pos:line="9" pos:column="27"/></expr_stmt>
    <comment type="block" pos:line="10" pos:column="5">/* Wake up the listener thread. Although there will never be
     * more than one thread blocking on this condition, broadcast
     * just in case. */</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">apr_thread_cond_broadcast<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><name><name pos:line="13" pos:column="31">stack<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">-&gt;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="38">cond<pos:position pos:line="13" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
    <while pos:line="14" pos:column="5">while <condition pos:line="14" pos:column="11">(<expr><name><name pos:line="14" pos:column="12">stack<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">-&gt;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="19">nelts<pos:position pos:line="14" pos:column="24"/></name></name></expr>)<pos:position pos:line="14" pos:column="25"/></condition> <block pos:line="14" pos:column="26">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">worker<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <name><name pos:line="15" pos:column="18">stack<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">-&gt;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="25">stack<pos:position pos:line="15" pos:column="30"/></name><index pos:line="15" pos:column="30">[<expr><operator pos:line="15" pos:column="31">--<pos:position pos:line="15" pos:column="33"/></operator><name><name pos:line="15" pos:column="33">stack<pos:position pos:line="15" pos:column="38"/></name><operator pos:line="15" pos:column="38">-&gt;<pos:position pos:line="15" pos:column="43"/></operator><name pos:line="15" pos:column="40">nelts<pos:position pos:line="15" pos:column="45"/></name></name></expr>]<pos:position pos:line="15" pos:column="46"/></index></name></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name><name pos:line="16" pos:column="31">worker<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">-&gt;<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="39">mutex<pos:position pos:line="16" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">worker<pos:position pos:line="17" pos:column="15"/></name><operator pos:line="17" pos:column="15">-&gt;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="17">csd<pos:position pos:line="17" pos:column="20"/></name></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <literal type="number" pos:line="17" pos:column="23">0<pos:position pos:line="17" pos:column="24"/></literal></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">worker<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">state<pos:position pos:line="18" pos:column="22"/></name></name> <operator pos:line="18" pos:column="23">=<pos:position pos:line="18" pos:column="24"/></operator> <name pos:line="18" pos:column="25">WORKER_TERMINATED<pos:position pos:line="18" pos:column="42"/></name></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">apr_thread_cond_signal<pos:position pos:line="19" pos:column="31"/></name><argument_list pos:line="19" pos:column="31">(<argument><expr><name><name pos:line="19" pos:column="32">worker<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">-&gt;<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="40">cond<pos:position pos:line="19" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name><name pos:line="20" pos:column="33">worker<pos:position pos:line="20" pos:column="39"/></name><operator pos:line="20" pos:column="39">-&gt;<pos:position pos:line="20" pos:column="44"/></operator><name pos:line="20" pos:column="41">mutex<pos:position pos:line="20" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></while>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><operator pos:line="22" pos:column="9">(<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">rv<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator> <call><name pos:line="22" pos:column="15">apr_thread_mutex_unlock<pos:position pos:line="22" pos:column="38"/></name><argument_list pos:line="22" pos:column="38">(<argument><expr><name><name pos:line="22" pos:column="39">stack<pos:position pos:line="22" pos:column="44"/></name><operator pos:line="22" pos:column="44">-&gt;<pos:position pos:line="22" pos:column="49"/></operator><name pos:line="22" pos:column="46">mutex<pos:position pos:line="22" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call><operator pos:line="22" pos:column="52">)<pos:position pos:line="22" pos:column="53"/></operator> <operator pos:line="22" pos:column="54">!=<pos:position pos:line="22" pos:column="56"/></operator> <name pos:line="22" pos:column="57">APR_SUCCESS<pos:position pos:line="22" pos:column="68"/></name></expr>)<pos:position pos:line="22" pos:column="69"/></condition><then pos:line="22" pos:column="69"> <block pos:line="22" pos:column="70">{
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">rv<pos:position pos:line="23" pos:column="18"/></name></expr>;<pos:position pos:line="23" pos:column="19"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">APR_SUCCESS<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
