<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3535_httpd-2.2.22.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">bool<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">parse_output_file_name<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">char<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">arg<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">cmd_data_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">cmd_data<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">name<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><call><name pos:line="3" pos:column="18">strrchr<pos:position pos:line="3" pos:column="25"/></name><argument_list pos:line="3" pos:column="25">(<argument><expr><name pos:line="3" pos:column="26">arg<pos:position pos:line="3" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="3" pos:column="31">'/'<pos:position pos:line="3" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">ext<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><call><name pos:line="4" pos:column="17">strrchr<pos:position pos:line="4" pos:column="24"/></name><argument_list pos:line="4" pos:column="24">(<argument><expr><name pos:line="4" pos:column="25">arg<pos:position pos:line="4" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="4" pos:column="30">'.'<pos:position pos:line="4" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">newarg<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name pos:line="5" pos:column="20">NULL<pos:position pos:line="5" pos:column="24"/></name></expr></init></decl>, <modifier pos:line="5" pos:column="26">*<pos:position pos:line="5" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="27">newext<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">pathlen<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">name<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">==<pos:position pos:line="8" pos:column="16"/></operator> <name pos:line="8" pos:column="17">NULL<pos:position pos:line="8" pos:column="21"/></name></expr>)<pos:position pos:line="8" pos:column="22"/></condition><then pos:line="8" pos:column="22"> <block pos:line="8" pos:column="23">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">name<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">=<pos:position pos:line="9" pos:column="15"/></operator> <call><name pos:line="9" pos:column="16">strrchr<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name pos:line="9" pos:column="24">arg<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="29">'\\'<pos:position pos:line="9" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="35"/></expr_stmt>

        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">name<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">==<pos:position pos:line="11" pos:column="20"/></operator> <name pos:line="11" pos:column="21">NULL<pos:position pos:line="11" pos:column="25"/></name></expr>)<pos:position pos:line="11" pos:column="26"/></condition><then pos:line="11" pos:column="26"> <block pos:line="11" pos:column="27">{
            <expr_stmt><expr><name pos:line="12" pos:column="13">name<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <name pos:line="12" pos:column="20">arg<pos:position pos:line="12" pos:column="23"/></name></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="13" pos:column="10"/></block></then> <else pos:line="13" pos:column="11">else <block pos:line="13" pos:column="16">{
            <expr_stmt><expr><name pos:line="14" pos:column="13">name<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">++<pos:position pos:line="14" pos:column="19"/></operator></expr>;<pos:position pos:line="14" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></else></if>
    }<pos:position pos:line="16" pos:column="6"/></block></then> <else pos:line="16" pos:column="7">else <block pos:line="16" pos:column="12">{
        <expr_stmt><expr><name pos:line="17" pos:column="9">name<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">++<pos:position pos:line="17" pos:column="15"/></operator></expr>;<pos:position pos:line="17" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></else></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">ext<pos:position pos:line="20" pos:column="13"/></name></expr>)<pos:position pos:line="20" pos:column="14"/></condition><then pos:line="20" pos:column="14"> <block pos:line="20" pos:column="15">{
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">cmd_data<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">stub_name<pos:position pos:line="21" pos:column="28"/></name></name> <operator pos:line="21" pos:column="29">=<pos:position pos:line="21" pos:column="30"/></operator> <name pos:line="21" pos:column="31">arg<pos:position pos:line="21" pos:column="34"/></name></expr>;<pos:position pos:line="21" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">cmd_data<pos:position pos:line="22" pos:column="17"/></name><operator pos:line="22" pos:column="17">-&gt;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="19">output_type<pos:position pos:line="22" pos:column="30"/></name></name> <operator pos:line="22" pos:column="31">=<pos:position pos:line="22" pos:column="32"/></operator> <name pos:line="22" pos:column="33">otProgram<pos:position pos:line="22" pos:column="42"/></name></expr>;<pos:position pos:line="22" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">newarg<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">=<pos:position pos:line="23" pos:column="17"/></operator> <operator pos:line="23" pos:column="18">(<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="19">char<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">*<pos:position pos:line="23" pos:column="25"/></operator><operator pos:line="23" pos:column="25">)<pos:position pos:line="23" pos:column="26"/></operator><call><name pos:line="23" pos:column="26">malloc<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><call><name pos:line="23" pos:column="33">strlen<pos:position pos:line="23" pos:column="39"/></name><argument_list pos:line="23" pos:column="39">(<argument><expr><name pos:line="23" pos:column="40">arg<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call> <operator pos:line="23" pos:column="45">+<pos:position pos:line="23" pos:column="46"/></operator> <literal type="number" pos:line="23" pos:column="47">5<pos:position pos:line="23" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">strcpy<pos:position pos:line="24" pos:column="15"/></name><argument_list pos:line="24" pos:column="15">(<argument><expr><name pos:line="24" pos:column="16">newarg<pos:position pos:line="24" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="24">arg<pos:position pos:line="24" pos:column="27"/></name></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">strcat<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">newarg<pos:position pos:line="25" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="24">EXE_EXT<pos:position pos:line="25" pos:column="31"/></name></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="26" pos:column="9">cmd_data<pos:position pos:line="26" pos:column="17"/></name><operator pos:line="26" pos:column="17">-&gt;<pos:position pos:line="26" pos:column="22"/></operator><name pos:line="26" pos:column="19">arglist<pos:position pos:line="26" pos:column="26"/></name><index pos:line="26" pos:column="26">[<expr><name><name pos:line="26" pos:column="27">cmd_data<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">-&gt;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="37">num_args<pos:position pos:line="26" pos:column="45"/></name></name><operator pos:line="26" pos:column="45">++<pos:position pos:line="26" pos:column="47"/></operator></expr>]<pos:position pos:line="26" pos:column="48"/></index></name> <operator pos:line="26" pos:column="49">=<pos:position pos:line="26" pos:column="50"/></operator> <name pos:line="26" pos:column="51">newarg<pos:position pos:line="26" pos:column="57"/></name></expr>;<pos:position pos:line="26" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="27" pos:column="9">cmd_data<pos:position pos:line="27" pos:column="17"/></name><operator pos:line="27" pos:column="17">-&gt;<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="19">output_name<pos:position pos:line="27" pos:column="30"/></name></name> <operator pos:line="27" pos:column="31">=<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="33">newarg<pos:position pos:line="27" pos:column="39"/></name></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
        <return pos:line="28" pos:column="9">return <expr><literal type="boolean" pos:line="28" pos:column="16">true<pos:position pos:line="28" pos:column="20"/></literal></expr>;<pos:position pos:line="28" pos:column="21"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">ext<pos:position pos:line="31" pos:column="8"/></name><operator pos:line="31" pos:column="8">++<pos:position pos:line="31" pos:column="10"/></operator></expr>;<pos:position pos:line="31" pos:column="11"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">pathlen<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">name<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">-<pos:position pos:line="32" pos:column="21"/></operator> <name pos:line="32" pos:column="22">arg<pos:position pos:line="32" pos:column="25"/></name></expr>;<pos:position pos:line="32" pos:column="26"/></expr_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><call><name pos:line="34" pos:column="9">strcmp<pos:position pos:line="34" pos:column="15"/></name><argument_list pos:line="34" pos:column="15">(<argument><expr><name pos:line="34" pos:column="16">ext<pos:position pos:line="34" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="21">"la"<pos:position pos:line="34" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="26"/></argument_list></call> <operator pos:line="34" pos:column="27">==<pos:position pos:line="34" pos:column="29"/></operator> <literal type="number" pos:line="34" pos:column="30">0<pos:position pos:line="34" pos:column="31"/></literal></expr>)<pos:position pos:line="34" pos:column="32"/></condition><then pos:line="34" pos:column="32"> <block pos:line="34" pos:column="33">{
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">cmd_data<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">stub_name<pos:position pos:line="35" pos:column="28"/></name></name> <operator pos:line="35" pos:column="29">=<pos:position pos:line="35" pos:column="30"/></operator> <name pos:line="35" pos:column="31">arg<pos:position pos:line="35" pos:column="34"/></name></expr>;<pos:position pos:line="35" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">cmd_data<pos:position pos:line="36" pos:column="17"/></name><operator pos:line="36" pos:column="17">-&gt;<pos:position pos:line="36" pos:column="22"/></operator><name pos:line="36" pos:column="19">output_type<pos:position pos:line="36" pos:column="30"/></name></name> <operator pos:line="36" pos:column="31">=<pos:position pos:line="36" pos:column="32"/></operator> <ternary><condition><expr><name pos:line="36" pos:column="33">shared<pos:position pos:line="36" pos:column="39"/></name></expr> ?<pos:position pos:line="36" pos:column="41"/></condition><then pos:line="36" pos:column="41"> <expr><name pos:line="36" pos:column="42">otDynamicLibrary<pos:position pos:line="36" pos:column="58"/></name></expr> <pos:position pos:line="36" pos:column="59"/></then><else pos:line="36" pos:column="59">: <expr><name pos:line="36" pos:column="61">otStaticLibrary<pos:position pos:line="36" pos:column="76"/></name></expr></else></ternary></expr>;<pos:position pos:line="36" pos:column="77"/></expr_stmt>
        <expr_stmt><expr><name pos:line="37" pos:column="9">newarg<pos:position pos:line="37" pos:column="15"/></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <operator pos:line="37" pos:column="18">(<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="19">char<pos:position pos:line="37" pos:column="23"/></name> <operator pos:line="37" pos:column="24">*<pos:position pos:line="37" pos:column="25"/></operator><operator pos:line="37" pos:column="25">)<pos:position pos:line="37" pos:column="26"/></operator><call><name pos:line="37" pos:column="26">malloc<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><call><name pos:line="37" pos:column="33">strlen<pos:position pos:line="37" pos:column="39"/></name><argument_list pos:line="37" pos:column="39">(<argument><expr><name pos:line="37" pos:column="40">arg<pos:position pos:line="37" pos:column="43"/></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call> <operator pos:line="37" pos:column="45">+<pos:position pos:line="37" pos:column="46"/></operator> <literal type="number" pos:line="37" pos:column="47">10<pos:position pos:line="37" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">mkdir<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><literal type="string" pos:line="38" pos:column="15">".libs"<pos:position pos:line="38" pos:column="22"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="38" pos:column="24">0<pos:position pos:line="38" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">strcpy<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">newarg<pos:position pos:line="39" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="24">".libs/"<pos:position pos:line="39" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>

        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><call><name pos:line="41" pos:column="13">strncmp<pos:position pos:line="41" pos:column="20"/></name><argument_list pos:line="41" pos:column="20">(<argument><expr><name pos:line="41" pos:column="21">arg<pos:position pos:line="41" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="26">"lib"<pos:position pos:line="41" pos:column="31"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="33">3<pos:position pos:line="41" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="35"/></argument_list></call> <operator pos:line="41" pos:column="36">==<pos:position pos:line="41" pos:column="38"/></operator> <literal type="number" pos:line="41" pos:column="39">0<pos:position pos:line="41" pos:column="40"/></literal></expr>)<pos:position pos:line="41" pos:column="41"/></condition><then pos:line="41" pos:column="41"> <block pos:line="41" pos:column="42">{
            <expr_stmt><expr><name pos:line="42" pos:column="13">arg<pos:position pos:line="42" pos:column="16"/></name> <operator pos:line="42" pos:column="17">+=<pos:position pos:line="42" pos:column="19"/></operator> <literal type="number" pos:line="42" pos:column="20">3<pos:position pos:line="42" pos:column="21"/></literal></expr>;<pos:position pos:line="42" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="45" pos:column="9">strcat<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">newarg<pos:position pos:line="45" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="24">arg<pos:position pos:line="45" pos:column="27"/></name></expr></argument>)<pos:position pos:line="45" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="46" pos:column="9">newext<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">=<pos:position pos:line="46" pos:column="17"/></operator> <call><name pos:line="46" pos:column="18">strrchr<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">newarg<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="46" pos:column="34">'.'<pos:position pos:line="46" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="38"/></argument_list></call> <operator pos:line="46" pos:column="39">+<pos:position pos:line="46" pos:column="40"/></operator> <literal type="number" pos:line="46" pos:column="41">1<pos:position pos:line="46" pos:column="42"/></literal></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">strcpy<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><name pos:line="47" pos:column="16">newext<pos:position pos:line="47" pos:column="22"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="47" pos:column="24">shared<pos:position pos:line="47" pos:column="30"/></name></expr> ?<pos:position pos:line="47" pos:column="32"/></condition><then pos:line="47" pos:column="32"> <expr><name pos:line="47" pos:column="33">DYNAMIC_LIB_EXT<pos:position pos:line="47" pos:column="48"/></name></expr> <pos:position pos:line="47" pos:column="49"/></then><else pos:line="47" pos:column="49">: <expr><name pos:line="47" pos:column="51">STATIC_LIB_EXT<pos:position pos:line="47" pos:column="65"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="47" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="67"/></expr_stmt>

<cpp:ifdef pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">ifdef<pos:position pos:line="49" pos:column="7"/></cpp:directive> <name pos:line="49" pos:column="8">TRUNCATE_DLL_NAME<pos:position pos:line="49" pos:column="25"/></name></cpp:ifdef>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">shared<pos:position pos:line="50" pos:column="19"/></name></expr>)<pos:position pos:line="50" pos:column="20"/></condition><then pos:line="50" pos:column="20"> <block pos:line="50" pos:column="21">{
          <expr_stmt><expr><name pos:line="51" pos:column="11">newarg<pos:position pos:line="51" pos:column="17"/></name> <operator pos:line="51" pos:column="18">=<pos:position pos:line="51" pos:column="19"/></operator> <call><name pos:line="51" pos:column="20">truncate_dll_name<pos:position pos:line="51" pos:column="37"/></name><argument_list pos:line="51" pos:column="37">(<argument><expr><name pos:line="51" pos:column="38">newarg<pos:position pos:line="51" pos:column="44"/></name></expr></argument>)<pos:position pos:line="51" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if>
<cpp:endif pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">endif<pos:position pos:line="53" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><name><name pos:line="55" pos:column="9">cmd_data<pos:position pos:line="55" pos:column="17"/></name><operator pos:line="55" pos:column="17">-&gt;<pos:position pos:line="55" pos:column="22"/></operator><name pos:line="55" pos:column="19">arglist<pos:position pos:line="55" pos:column="26"/></name><index pos:line="55" pos:column="26">[<expr><name><name pos:line="55" pos:column="27">cmd_data<pos:position pos:line="55" pos:column="35"/></name><operator pos:line="55" pos:column="35">-&gt;<pos:position pos:line="55" pos:column="40"/></operator><name pos:line="55" pos:column="37">num_args<pos:position pos:line="55" pos:column="45"/></name></name><operator pos:line="55" pos:column="45">++<pos:position pos:line="55" pos:column="47"/></operator></expr>]<pos:position pos:line="55" pos:column="48"/></index></name> <operator pos:line="55" pos:column="49">=<pos:position pos:line="55" pos:column="50"/></operator> <name pos:line="55" pos:column="51">newarg<pos:position pos:line="55" pos:column="57"/></name></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">cmd_data<pos:position pos:line="56" pos:column="17"/></name><operator pos:line="56" pos:column="17">-&gt;<pos:position pos:line="56" pos:column="22"/></operator><name pos:line="56" pos:column="19">output_name<pos:position pos:line="56" pos:column="30"/></name></name> <operator pos:line="56" pos:column="31">=<pos:position pos:line="56" pos:column="32"/></operator> <name pos:line="56" pos:column="33">newarg<pos:position pos:line="56" pos:column="39"/></name></expr>;<pos:position pos:line="56" pos:column="40"/></expr_stmt>
        <return pos:line="57" pos:column="9">return <expr><literal type="boolean" pos:line="57" pos:column="16">true<pos:position pos:line="57" pos:column="20"/></literal></expr>;<pos:position pos:line="57" pos:column="21"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><call><name pos:line="60" pos:column="9">strcmp<pos:position pos:line="60" pos:column="15"/></name><argument_list pos:line="60" pos:column="15">(<argument><expr><name pos:line="60" pos:column="16">ext<pos:position pos:line="60" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="21">"lo"<pos:position pos:line="60" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="60" pos:column="26"/></argument_list></call> <operator pos:line="60" pos:column="27">==<pos:position pos:line="60" pos:column="29"/></operator> <literal type="number" pos:line="60" pos:column="30">0<pos:position pos:line="60" pos:column="31"/></literal></expr>)<pos:position pos:line="60" pos:column="32"/></condition><then pos:line="60" pos:column="32"> <block pos:line="60" pos:column="33">{
        <expr_stmt><expr><name><name pos:line="61" pos:column="9">cmd_data<pos:position pos:line="61" pos:column="17"/></name><operator pos:line="61" pos:column="17">-&gt;<pos:position pos:line="61" pos:column="22"/></operator><name pos:line="61" pos:column="19">stub_name<pos:position pos:line="61" pos:column="28"/></name></name> <operator pos:line="61" pos:column="29">=<pos:position pos:line="61" pos:column="30"/></operator> <name pos:line="61" pos:column="31">arg<pos:position pos:line="61" pos:column="34"/></name></expr>;<pos:position pos:line="61" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">cmd_data<pos:position pos:line="62" pos:column="17"/></name><operator pos:line="62" pos:column="17">-&gt;<pos:position pos:line="62" pos:column="22"/></operator><name pos:line="62" pos:column="19">output_type<pos:position pos:line="62" pos:column="30"/></name></name> <operator pos:line="62" pos:column="31">=<pos:position pos:line="62" pos:column="32"/></operator> <name pos:line="62" pos:column="33">otObject<pos:position pos:line="62" pos:column="41"/></name></expr>;<pos:position pos:line="62" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="63" pos:column="9">newarg<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">=<pos:position pos:line="63" pos:column="17"/></operator> <operator pos:line="63" pos:column="18">(<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="19">char<pos:position pos:line="63" pos:column="23"/></name> <operator pos:line="63" pos:column="24">*<pos:position pos:line="63" pos:column="25"/></operator><operator pos:line="63" pos:column="25">)<pos:position pos:line="63" pos:column="26"/></operator><call><name pos:line="63" pos:column="26">malloc<pos:position pos:line="63" pos:column="32"/></name><argument_list pos:line="63" pos:column="32">(<argument><expr><call><name pos:line="63" pos:column="33">strlen<pos:position pos:line="63" pos:column="39"/></name><argument_list pos:line="63" pos:column="39">(<argument><expr><name pos:line="63" pos:column="40">arg<pos:position pos:line="63" pos:column="43"/></name></expr></argument>)<pos:position pos:line="63" pos:column="44"/></argument_list></call> <operator pos:line="63" pos:column="45">+<pos:position pos:line="63" pos:column="46"/></operator> <literal type="number" pos:line="63" pos:column="47">2<pos:position pos:line="63" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">strcpy<pos:position pos:line="64" pos:column="15"/></name><argument_list pos:line="64" pos:column="15">(<argument><expr><name pos:line="64" pos:column="16">newarg<pos:position pos:line="64" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="24">arg<pos:position pos:line="64" pos:column="27"/></name></expr></argument>)<pos:position pos:line="64" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="65" pos:column="9">ext<pos:position pos:line="65" pos:column="12"/></name> <operator pos:line="65" pos:column="13">=<pos:position pos:line="65" pos:column="14"/></operator> <call><name pos:line="65" pos:column="15">strrchr<pos:position pos:line="65" pos:column="22"/></name><argument_list pos:line="65" pos:column="22">(<argument><expr><name pos:line="65" pos:column="23">newarg<pos:position pos:line="65" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="65" pos:column="31">'.'<pos:position pos:line="65" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="35"/></argument_list></call> <operator pos:line="65" pos:column="36">+<pos:position pos:line="65" pos:column="37"/></operator> <literal type="number" pos:line="65" pos:column="38">1<pos:position pos:line="65" pos:column="39"/></literal></expr>;<pos:position pos:line="65" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">strcpy<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><name pos:line="66" pos:column="16">ext<pos:position pos:line="66" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="21">OBJECT_EXT<pos:position pos:line="66" pos:column="31"/></name></expr></argument>)<pos:position pos:line="66" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="67" pos:column="9">cmd_data<pos:position pos:line="67" pos:column="17"/></name><operator pos:line="67" pos:column="17">-&gt;<pos:position pos:line="67" pos:column="22"/></operator><name pos:line="67" pos:column="19">arglist<pos:position pos:line="67" pos:column="26"/></name><index pos:line="67" pos:column="26">[<expr><name><name pos:line="67" pos:column="27">cmd_data<pos:position pos:line="67" pos:column="35"/></name><operator pos:line="67" pos:column="35">-&gt;<pos:position pos:line="67" pos:column="40"/></operator><name pos:line="67" pos:column="37">num_args<pos:position pos:line="67" pos:column="45"/></name></name><operator pos:line="67" pos:column="45">++<pos:position pos:line="67" pos:column="47"/></operator></expr>]<pos:position pos:line="67" pos:column="48"/></index></name> <operator pos:line="67" pos:column="49">=<pos:position pos:line="67" pos:column="50"/></operator> <name pos:line="67" pos:column="51">newarg<pos:position pos:line="67" pos:column="57"/></name></expr>;<pos:position pos:line="67" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="68" pos:column="9">cmd_data<pos:position pos:line="68" pos:column="17"/></name><operator pos:line="68" pos:column="17">-&gt;<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="19">output_name<pos:position pos:line="68" pos:column="30"/></name></name> <operator pos:line="68" pos:column="31">=<pos:position pos:line="68" pos:column="32"/></operator> <name pos:line="68" pos:column="33">newarg<pos:position pos:line="68" pos:column="39"/></name></expr>;<pos:position pos:line="68" pos:column="40"/></expr_stmt>
        <return pos:line="69" pos:column="9">return <expr><literal type="boolean" pos:line="69" pos:column="16">true<pos:position pos:line="69" pos:column="20"/></literal></expr>;<pos:position pos:line="69" pos:column="21"/></return>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>

    <return pos:line="72" pos:column="5">return <expr><literal type="boolean" pos:line="72" pos:column="12">false<pos:position pos:line="72" pos:column="17"/></literal></expr>;<pos:position pos:line="72" pos:column="18"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function></unit>
