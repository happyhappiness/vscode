<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2793_httpd-2.4.20.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">sed_write_output<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">void<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">dummy<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">buf<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">int<pos:position pos:line="1" pos:column="65"/></name></type> <name pos:line="1" pos:column="66">sz<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="block" pos:line="3" pos:column="5">/* dummy is basically filter context. Context is passed during invocation
     * of sed_eval_buffer
     */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">remainbytes<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><literal type="number" pos:line="6" pos:column="23">0<pos:position pos:line="6" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_status_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">status<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><name pos:line="7" pos:column="27">APR_SUCCESS<pos:position pos:line="7" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">sed_filter_ctxt<pos:position pos:line="8" pos:column="20"/></name> <modifier pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></modifier></type><name pos:line="8" pos:column="22">ctx<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><operator pos:line="8" pos:column="28">(<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">sed_filter_ctxt<pos:position pos:line="8" pos:column="44"/></name> <operator pos:line="8" pos:column="45">*<pos:position pos:line="8" pos:column="46"/></operator><operator pos:line="8" pos:column="46">)<pos:position pos:line="8" pos:column="47"/></operator> <name pos:line="8" pos:column="48">dummy<pos:position pos:line="8" pos:column="53"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="54"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">ctx<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">outbuf<pos:position pos:line="9" pos:column="20"/></name></name> <operator pos:line="9" pos:column="21">==<pos:position pos:line="9" pos:column="23"/></operator> <name pos:line="9" pos:column="24">NULL<pos:position pos:line="9" pos:column="28"/></name></expr>)<pos:position pos:line="9" pos:column="29"/></condition><then pos:line="9" pos:column="29"> <block pos:line="9" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">alloc_outbuf<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><name pos:line="10" pos:column="22">ctx<pos:position pos:line="10" pos:column="25"/></name></expr></argument>)<pos:position pos:line="10" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="12" pos:column="5">remainbytes<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <name><name pos:line="12" pos:column="19">ctx<pos:position pos:line="12" pos:column="22"/></name><operator pos:line="12" pos:column="22">-&gt;<pos:position pos:line="12" pos:column="27"/></operator><name pos:line="12" pos:column="24">bufsize<pos:position pos:line="12" pos:column="31"/></name></name> <operator pos:line="12" pos:column="32">-<pos:position pos:line="12" pos:column="33"/></operator> <operator pos:line="12" pos:column="34">(<pos:position pos:line="12" pos:column="35"/></operator><name><name pos:line="12" pos:column="35">ctx<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">-&gt;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="40">curoutbuf<pos:position pos:line="12" pos:column="49"/></name></name> <operator pos:line="12" pos:column="50">-<pos:position pos:line="12" pos:column="51"/></operator> <name><name pos:line="12" pos:column="52">ctx<pos:position pos:line="12" pos:column="55"/></name><operator pos:line="12" pos:column="55">-&gt;<pos:position pos:line="12" pos:column="60"/></operator><name pos:line="12" pos:column="57">outbuf<pos:position pos:line="12" pos:column="63"/></name></name><operator pos:line="12" pos:column="63">)<pos:position pos:line="12" pos:column="64"/></operator></expr>;<pos:position pos:line="12" pos:column="65"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">sz<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">&gt;=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="15">remainbytes<pos:position pos:line="13" pos:column="26"/></name></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27"> <block pos:line="13" pos:column="28">{
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">remainbytes<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">&gt;<pos:position pos:line="14" pos:column="29"/></operator> <literal type="number" pos:line="14" pos:column="27">0<pos:position pos:line="14" pos:column="28"/></literal></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29"> <block pos:line="14" pos:column="30">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">memcpy<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name><name pos:line="15" pos:column="20">ctx<pos:position pos:line="15" pos:column="23"/></name><operator pos:line="15" pos:column="23">-&gt;<pos:position pos:line="15" pos:column="28"/></operator><name pos:line="15" pos:column="25">curoutbuf<pos:position pos:line="15" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">buf<pos:position pos:line="15" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="41">remainbytes<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><name pos:line="16" pos:column="13">buf<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">+=<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">remainbytes<pos:position pos:line="16" pos:column="31"/></name></expr>;<pos:position pos:line="16" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name pos:line="17" pos:column="13">sz<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">-=<pos:position pos:line="17" pos:column="18"/></operator> <name pos:line="17" pos:column="19">remainbytes<pos:position pos:line="17" pos:column="30"/></name></expr>;<pos:position pos:line="17" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="18" pos:column="13">ctx<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">curoutbuf<pos:position pos:line="18" pos:column="27"/></name></name> <operator pos:line="18" pos:column="28">+=<pos:position pos:line="18" pos:column="30"/></operator> <name pos:line="18" pos:column="31">remainbytes<pos:position pos:line="18" pos:column="42"/></name></expr>;<pos:position pos:line="18" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="20" pos:column="9">/* buffer is now full */</comment>
        <expr_stmt><expr><name pos:line="21" pos:column="9">status<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">=<pos:position pos:line="21" pos:column="17"/></operator> <call><name pos:line="21" pos:column="18">append_bucket<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><name pos:line="21" pos:column="32">ctx<pos:position pos:line="21" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="37">ctx<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">-&gt;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="42">outbuf<pos:position pos:line="21" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="50">ctx<pos:position pos:line="21" pos:column="53"/></name><operator pos:line="21" pos:column="53">-&gt;<pos:position pos:line="21" pos:column="58"/></operator><name pos:line="21" pos:column="55">bufsize<pos:position pos:line="21" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="64"/></expr_stmt>
        <comment type="block" pos:line="22" pos:column="9">/* old buffer is now used so allocate new buffer */</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">alloc_outbuf<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">ctx<pos:position pos:line="23" pos:column="25"/></name></expr></argument>)<pos:position pos:line="23" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="27"/></expr_stmt>
        <comment type="block" pos:line="24" pos:column="9">/* if size is bigger than the allocated buffer directly add to output
         * brigade */</comment>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">(<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">status<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">==<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">APR_SUCCESS<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">)<pos:position pos:line="26" pos:column="36"/></operator> <operator pos:line="26" pos:column="37">&amp;&amp;<pos:position pos:line="26" pos:column="47"/></operator> <operator pos:line="26" pos:column="40">(<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="41">sz<pos:position pos:line="26" pos:column="43"/></name> <operator pos:line="26" pos:column="44">&gt;=<pos:position pos:line="26" pos:column="49"/></operator> <name><name pos:line="26" pos:column="47">ctx<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">-&gt;<pos:position pos:line="26" pos:column="55"/></operator><name pos:line="26" pos:column="52">bufsize<pos:position pos:line="26" pos:column="59"/></name></name><operator pos:line="26" pos:column="59">)<pos:position pos:line="26" pos:column="60"/></operator></expr>)<pos:position pos:line="26" pos:column="61"/></condition><then pos:line="26" pos:column="61"> <block pos:line="26" pos:column="62">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">char<pos:position pos:line="27" pos:column="17"/></name><modifier pos:line="27" pos:column="17">*<pos:position pos:line="27" pos:column="18"/></modifier></type> <name pos:line="27" pos:column="19">newbuf<pos:position pos:line="27" pos:column="25"/></name> <init pos:line="27" pos:column="26">= <expr><call><name pos:line="27" pos:column="28">apr_pmemdup<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><name><name pos:line="27" pos:column="40">ctx<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">-&gt;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="45">tpool<pos:position pos:line="27" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="52">buf<pos:position pos:line="27" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="57">sz<pos:position pos:line="27" pos:column="59"/></name></expr></argument>)<pos:position pos:line="27" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="27" pos:column="61"/></decl_stmt>
            <expr_stmt><expr><name pos:line="28" pos:column="13">status<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">=<pos:position pos:line="28" pos:column="21"/></operator> <call><name pos:line="28" pos:column="22">append_bucket<pos:position pos:line="28" pos:column="35"/></name><argument_list pos:line="28" pos:column="35">(<argument><expr><name pos:line="28" pos:column="36">ctx<pos:position pos:line="28" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="41">newbuf<pos:position pos:line="28" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">sz<pos:position pos:line="28" pos:column="51"/></name></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>
            <comment type="block" pos:line="29" pos:column="13">/* pool might get clear after append_bucket */</comment>
            <if pos:line="30" pos:column="13">if <condition pos:line="30" pos:column="16">(<expr><name><name pos:line="30" pos:column="17">ctx<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">-&gt;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="22">outbuf<pos:position pos:line="30" pos:column="28"/></name></name> <operator pos:line="30" pos:column="29">==<pos:position pos:line="30" pos:column="31"/></operator> <name pos:line="30" pos:column="32">NULL<pos:position pos:line="30" pos:column="36"/></name></expr>)<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37"> <block pos:line="30" pos:column="38">{
                <expr_stmt><expr><call><name pos:line="31" pos:column="17">alloc_outbuf<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">ctx<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="35"/></expr_stmt>
            }<pos:position pos:line="32" pos:column="14"/></block></then></if>
        }<pos:position pos:line="33" pos:column="10"/></block></then>
        <else pos:line="34" pos:column="9">else <block pos:line="34" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">memcpy<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><name><name pos:line="35" pos:column="20">ctx<pos:position pos:line="35" pos:column="23"/></name><operator pos:line="35" pos:column="23">-&gt;<pos:position pos:line="35" pos:column="28"/></operator><name pos:line="35" pos:column="25">curoutbuf<pos:position pos:line="35" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="36">buf<pos:position pos:line="35" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="41">sz<pos:position pos:line="35" pos:column="43"/></name></expr></argument>)<pos:position pos:line="35" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="36" pos:column="13">ctx<pos:position pos:line="36" pos:column="16"/></name><operator pos:line="36" pos:column="16">-&gt;<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="18">curoutbuf<pos:position pos:line="36" pos:column="27"/></name></name> <operator pos:line="36" pos:column="28">+=<pos:position pos:line="36" pos:column="30"/></operator> <name pos:line="36" pos:column="31">sz<pos:position pos:line="36" pos:column="33"/></name></expr>;<pos:position pos:line="36" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></else></if>
    }<pos:position pos:line="38" pos:column="6"/></block></then>
    <else pos:line="39" pos:column="5">else <block pos:line="39" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">memcpy<pos:position pos:line="40" pos:column="15"/></name><argument_list pos:line="40" pos:column="15">(<argument><expr><name><name pos:line="40" pos:column="16">ctx<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">-&gt;<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="21">curoutbuf<pos:position pos:line="40" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="32">buf<pos:position pos:line="40" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="37">sz<pos:position pos:line="40" pos:column="39"/></name></expr></argument>)<pos:position pos:line="40" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="41" pos:column="9">ctx<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">-&gt;<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="14">curoutbuf<pos:position pos:line="41" pos:column="23"/></name></name> <operator pos:line="41" pos:column="24">+=<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="27">sz<pos:position pos:line="41" pos:column="29"/></name></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="42" pos:column="6"/></block></else></if>
    <return pos:line="43" pos:column="5">return <expr><name pos:line="43" pos:column="12">status<pos:position pos:line="43" pos:column="18"/></name></expr>;<pos:position pos:line="43" pos:column="19"/></return>
}<pos:position pos:line="44" pos:column="2"/></block></function></unit>
