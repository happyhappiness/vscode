<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1645_httpd-2.2.15.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">filter_lookup<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">ap_filter_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">f<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">ap_filter_rec_t<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">filter<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">ap_filter_provider_t<pos:position pos:line="3" pos:column="25"/></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">provider<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">str<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name pos:line="4" pos:column="23">NULL<pos:position pos:line="4" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">str1<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">match<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name> <name pos:line="7" pos:column="14">int<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">proto_flags<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">request_rec<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">r<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name><name pos:line="8" pos:column="22">f<pos:position pos:line="8" pos:column="23"/></name><operator pos:line="8" pos:column="23">-&gt;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="25">r<pos:position pos:line="8" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">harness_ctx<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">ctx<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name><name pos:line="9" pos:column="24">f<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">ctx<pos:position pos:line="9" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">provider_ctx<pos:position pos:line="10" pos:column="17"/></name> <modifier pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></modifier></type><name pos:line="10" pos:column="19">pctx<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">mod_filter_ctx<pos:position pos:line="11" pos:column="19"/></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">rctx<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><call><name pos:line="11" pos:column="28">ap_get_module_config<pos:position pos:line="11" pos:column="48"/></name><argument_list pos:line="11" pos:column="48">(<argument><expr><name><name pos:line="11" pos:column="49">r<pos:position pos:line="11" pos:column="50"/></name><operator pos:line="11" pos:column="50">-&gt;<pos:position pos:line="11" pos:column="55"/></operator><name pos:line="11" pos:column="52">request_config<pos:position pos:line="11" pos:column="66"/></name></name></expr></argument>,
                                                <argument><expr><operator pos:line="12" pos:column="49">&amp;<pos:position pos:line="12" pos:column="54"/></operator><name pos:line="12" pos:column="50">filter_module<pos:position pos:line="12" pos:column="63"/></name></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="65"/></decl_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* Check registered providers in order */</comment>
    <for pos:line="15" pos:column="5">for <control pos:line="15" pos:column="9">(<init><expr><name pos:line="15" pos:column="10">provider<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <name><name pos:line="15" pos:column="21">filter<pos:position pos:line="15" pos:column="27"/></name><operator pos:line="15" pos:column="27">-&gt;<pos:position pos:line="15" pos:column="32"/></operator><name pos:line="15" pos:column="29">providers<pos:position pos:line="15" pos:column="38"/></name></name></expr>;<pos:position pos:line="15" pos:column="39"/></init> <condition><expr><name pos:line="15" pos:column="40">provider<pos:position pos:line="15" pos:column="48"/></name></expr>;<pos:position pos:line="15" pos:column="49"/></condition> <incr><expr><name pos:line="15" pos:column="50">provider<pos:position pos:line="15" pos:column="58"/></name> <operator pos:line="15" pos:column="59">=<pos:position pos:line="15" pos:column="60"/></operator> <name><name pos:line="15" pos:column="61">provider<pos:position pos:line="15" pos:column="69"/></name><operator pos:line="15" pos:column="69">-&gt;<pos:position pos:line="15" pos:column="74"/></operator><name pos:line="15" pos:column="71">next<pos:position pos:line="15" pos:column="75"/></name></name></expr></incr>)<pos:position pos:line="15" pos:column="76"/></control> <block pos:line="15" pos:column="77">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">match<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">=<pos:position pos:line="16" pos:column="16"/></operator> <literal type="number" pos:line="16" pos:column="17">1<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>
        <switch pos:line="17" pos:column="9">switch <condition pos:line="17" pos:column="16">(<expr><name><name pos:line="17" pos:column="17">provider<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">dispatch<pos:position pos:line="17" pos:column="35"/></name></name></expr>)<pos:position pos:line="17" pos:column="36"/></condition> <block pos:line="17" pos:column="37">{
        <case pos:line="18" pos:column="9">case <expr><name pos:line="18" pos:column="14">REQUEST_HEADERS<pos:position pos:line="18" pos:column="29"/></name></expr>:<pos:position pos:line="18" pos:column="30"/></case>
            <expr_stmt><expr><name pos:line="19" pos:column="13">str<pos:position pos:line="19" pos:column="16"/></name> <operator pos:line="19" pos:column="17">=<pos:position pos:line="19" pos:column="18"/></operator> <call><name pos:line="19" pos:column="19">apr_table_get<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name><name pos:line="19" pos:column="33">r<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">-&gt;<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="36">headers_in<pos:position pos:line="19" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="48">provider<pos:position pos:line="19" pos:column="56"/></name><operator pos:line="19" pos:column="56">-&gt;<pos:position pos:line="19" pos:column="61"/></operator><name pos:line="19" pos:column="58">value<pos:position pos:line="19" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="65"/></expr_stmt>
            <break pos:line="20" pos:column="13">break;<pos:position pos:line="20" pos:column="19"/></break>
        <case pos:line="21" pos:column="9">case <expr><name pos:line="21" pos:column="14">RESPONSE_HEADERS<pos:position pos:line="21" pos:column="30"/></name></expr>:<pos:position pos:line="21" pos:column="31"/></case>
            <expr_stmt><expr><name pos:line="22" pos:column="13">str<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <call><name pos:line="22" pos:column="19">apr_table_get<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name><name pos:line="22" pos:column="33">r<pos:position pos:line="22" pos:column="34"/></name><operator pos:line="22" pos:column="34">-&gt;<pos:position pos:line="22" pos:column="39"/></operator><name pos:line="22" pos:column="36">headers_out<pos:position pos:line="22" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="49">provider<pos:position pos:line="22" pos:column="57"/></name><operator pos:line="22" pos:column="57">-&gt;<pos:position pos:line="22" pos:column="62"/></operator><name pos:line="22" pos:column="59">value<pos:position pos:line="22" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
            <break pos:line="23" pos:column="13">break;<pos:position pos:line="23" pos:column="19"/></break>
        <case pos:line="24" pos:column="9">case <expr><name pos:line="24" pos:column="14">SUBPROCESS_ENV<pos:position pos:line="24" pos:column="28"/></name></expr>:<pos:position pos:line="24" pos:column="29"/></case>
            <expr_stmt><expr><name pos:line="25" pos:column="13">str<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">apr_table_get<pos:position pos:line="25" pos:column="32"/></name><argument_list pos:line="25" pos:column="32">(<argument><expr><name><name pos:line="25" pos:column="33">r<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">-&gt;<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="36">subprocess_env<pos:position pos:line="25" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="52">provider<pos:position pos:line="25" pos:column="60"/></name><operator pos:line="25" pos:column="60">-&gt;<pos:position pos:line="25" pos:column="65"/></operator><name pos:line="25" pos:column="62">value<pos:position pos:line="25" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="69"/></expr_stmt>
            <break pos:line="26" pos:column="13">break;<pos:position pos:line="26" pos:column="19"/></break>
        <case pos:line="27" pos:column="9">case <expr><name pos:line="27" pos:column="14">CONTENT_TYPE<pos:position pos:line="27" pos:column="26"/></name></expr>:<pos:position pos:line="27" pos:column="27"/></case>
            <expr_stmt><expr><name pos:line="28" pos:column="13">str<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <name><name pos:line="28" pos:column="19">r<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">content_type<pos:position pos:line="28" pos:column="34"/></name></name></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
            <break pos:line="29" pos:column="13">break;<pos:position pos:line="29" pos:column="19"/></break>
        <case pos:line="30" pos:column="9">case <expr><name pos:line="30" pos:column="14">HANDLER<pos:position pos:line="30" pos:column="21"/></name></expr>:<pos:position pos:line="30" pos:column="22"/></case>
            <expr_stmt><expr><name pos:line="31" pos:column="13">str<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <name><name pos:line="31" pos:column="19">r<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">-&gt;<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="22">handler<pos:position pos:line="31" pos:column="29"/></name></name></expr>;<pos:position pos:line="31" pos:column="30"/></expr_stmt>
            <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>
        }<pos:position pos:line="33" pos:column="10"/></block></switch>

        <comment type="block" pos:line="35" pos:column="9">/* treat nulls so we don't have to check every strcmp individually
         * Not sure if there's anything better to do with them
         */</comment>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><name pos:line="38" pos:column="14">str<pos:position pos:line="38" pos:column="17"/></name></expr>)<pos:position pos:line="38" pos:column="18"/></condition><then pos:line="38" pos:column="18"> <block pos:line="38" pos:column="19">{
            <expr_stmt><expr><name pos:line="39" pos:column="13">match<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">=<pos:position pos:line="39" pos:column="20"/></operator> <literal type="number" pos:line="39" pos:column="21">0<pos:position pos:line="39" pos:column="22"/></literal></expr>;<pos:position pos:line="39" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></then>
        <comment type="block" pos:line="41" pos:column="9">/* we can't check for NULL in provider as that kills integer 0
         * so we have to test each string/regexp case in the switch
         */</comment>
        <else pos:line="44" pos:column="9">else <block pos:line="44" pos:column="14">{
            <switch pos:line="45" pos:column="13">switch <condition pos:line="45" pos:column="20">(<expr><name><name pos:line="45" pos:column="21">provider<pos:position pos:line="45" pos:column="29"/></name><operator pos:line="45" pos:column="29">-&gt;<pos:position pos:line="45" pos:column="34"/></operator><name pos:line="45" pos:column="31">match_type<pos:position pos:line="45" pos:column="41"/></name></name></expr>)<pos:position pos:line="45" pos:column="42"/></condition> <block pos:line="45" pos:column="43">{
            <case pos:line="46" pos:column="13">case <expr><name pos:line="46" pos:column="18">STRING_MATCH<pos:position pos:line="46" pos:column="30"/></name></expr>:<pos:position pos:line="46" pos:column="31"/></case>
                <if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><call><name pos:line="47" pos:column="21">strcasecmp<pos:position pos:line="47" pos:column="31"/></name><argument_list pos:line="47" pos:column="31">(<argument><expr><name pos:line="47" pos:column="32">str<pos:position pos:line="47" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="37">provider<pos:position pos:line="47" pos:column="45"/></name><operator pos:line="47" pos:column="45">-&gt;<pos:position pos:line="47" pos:column="50"/></operator><name pos:line="47" pos:column="47">match<pos:position pos:line="47" pos:column="52"/></name><operator pos:line="47" pos:column="52">.<pos:position pos:line="47" pos:column="53"/></operator><name pos:line="47" pos:column="53">string<pos:position pos:line="47" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="61"/></condition><then pos:line="47" pos:column="61"> <block pos:line="47" pos:column="62">{
                    <expr_stmt><expr><name pos:line="48" pos:column="21">match<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <literal type="number" pos:line="48" pos:column="29">0<pos:position pos:line="48" pos:column="30"/></literal></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="49" pos:column="18"/></block></then></if>
                <break pos:line="50" pos:column="17">break;<pos:position pos:line="50" pos:column="23"/></break>
            <case pos:line="51" pos:column="13">case <expr><name pos:line="51" pos:column="18">STRING_CONTAINS<pos:position pos:line="51" pos:column="33"/></name></expr>:<pos:position pos:line="51" pos:column="34"/></case>
                <expr_stmt><expr><name pos:line="52" pos:column="17">str1<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <call><name pos:line="52" pos:column="24">apr_pstrdup<pos:position pos:line="52" pos:column="35"/></name><argument_list pos:line="52" pos:column="35">(<argument><expr><name><name pos:line="52" pos:column="36">r<pos:position pos:line="52" pos:column="37"/></name><operator pos:line="52" pos:column="37">-&gt;<pos:position pos:line="52" pos:column="42"/></operator><name pos:line="52" pos:column="39">pool<pos:position pos:line="52" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="45">str<pos:position pos:line="52" pos:column="48"/></name></expr></argument>)<pos:position pos:line="52" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="53" pos:column="17">ap_str_tolower<pos:position pos:line="53" pos:column="31"/></name><argument_list pos:line="53" pos:column="31">(<argument><expr><name pos:line="53" pos:column="32">str1<pos:position pos:line="53" pos:column="36"/></name></expr></argument>)<pos:position pos:line="53" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="38"/></expr_stmt>
                <if pos:line="54" pos:column="17">if <condition pos:line="54" pos:column="20">(<expr><operator pos:line="54" pos:column="21">!<pos:position pos:line="54" pos:column="22"/></operator><call><name pos:line="54" pos:column="22">strstr<pos:position pos:line="54" pos:column="28"/></name><argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">str1<pos:position pos:line="54" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="35">provider<pos:position pos:line="54" pos:column="43"/></name><operator pos:line="54" pos:column="43">-&gt;<pos:position pos:line="54" pos:column="48"/></operator><name pos:line="54" pos:column="45">match<pos:position pos:line="54" pos:column="50"/></name><operator pos:line="54" pos:column="50">.<pos:position pos:line="54" pos:column="51"/></operator><name pos:line="54" pos:column="51">string<pos:position pos:line="54" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="59"/></condition><then pos:line="54" pos:column="59"> <block pos:line="54" pos:column="60">{
                    <expr_stmt><expr><name pos:line="55" pos:column="21">match<pos:position pos:line="55" pos:column="26"/></name> <operator pos:line="55" pos:column="27">=<pos:position pos:line="55" pos:column="28"/></operator> <literal type="number" pos:line="55" pos:column="29">0<pos:position pos:line="55" pos:column="30"/></literal></expr>;<pos:position pos:line="55" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="56" pos:column="18"/></block></then></if>
                <break pos:line="57" pos:column="17">break;<pos:position pos:line="57" pos:column="23"/></break>
            <case pos:line="58" pos:column="13">case <expr><name pos:line="58" pos:column="18">REGEX_MATCH<pos:position pos:line="58" pos:column="29"/></name></expr>:<pos:position pos:line="58" pos:column="30"/></case>
                <if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><call><name pos:line="59" pos:column="21">ap_regexec<pos:position pos:line="59" pos:column="31"/></name><argument_list pos:line="59" pos:column="31">(<argument><expr><name><name pos:line="59" pos:column="32">provider<pos:position pos:line="59" pos:column="40"/></name><operator pos:line="59" pos:column="40">-&gt;<pos:position pos:line="59" pos:column="45"/></operator><name pos:line="59" pos:column="42">match<pos:position pos:line="59" pos:column="47"/></name><operator pos:line="59" pos:column="47">.<pos:position pos:line="59" pos:column="48"/></operator><name pos:line="59" pos:column="48">regex<pos:position pos:line="59" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="55">str<pos:position pos:line="59" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="60">0<pos:position pos:line="59" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="59" pos:column="63">NULL<pos:position pos:line="59" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="59" pos:column="69">0<pos:position pos:line="59" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="71"/></argument_list></call>
                    <operator pos:line="60" pos:column="21">==<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">AP_REG_NOMATCH<pos:position pos:line="60" pos:column="38"/></name></expr>)<pos:position pos:line="60" pos:column="39"/></condition><then pos:line="60" pos:column="39"> <block pos:line="60" pos:column="40">{
                    <expr_stmt><expr><name pos:line="61" pos:column="21">match<pos:position pos:line="61" pos:column="26"/></name> <operator pos:line="61" pos:column="27">=<pos:position pos:line="61" pos:column="28"/></operator> <literal type="number" pos:line="61" pos:column="29">0<pos:position pos:line="61" pos:column="30"/></literal></expr>;<pos:position pos:line="61" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="62" pos:column="18"/></block></then></if>
                <break pos:line="63" pos:column="17">break;<pos:position pos:line="63" pos:column="23"/></break>
            <case pos:line="64" pos:column="13">case <expr><name pos:line="64" pos:column="18">INT_EQ<pos:position pos:line="64" pos:column="24"/></name></expr>:<pos:position pos:line="64" pos:column="25"/></case>
                <if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><call><name pos:line="65" pos:column="21">atoi<pos:position pos:line="65" pos:column="25"/></name><argument_list pos:line="65" pos:column="25">(<argument><expr><name pos:line="65" pos:column="26">str<pos:position pos:line="65" pos:column="29"/></name></expr></argument>)<pos:position pos:line="65" pos:column="30"/></argument_list></call> <operator pos:line="65" pos:column="31">!=<pos:position pos:line="65" pos:column="33"/></operator> <name><name pos:line="65" pos:column="34">provider<pos:position pos:line="65" pos:column="42"/></name><operator pos:line="65" pos:column="42">-&gt;<pos:position pos:line="65" pos:column="47"/></operator><name pos:line="65" pos:column="44">match<pos:position pos:line="65" pos:column="49"/></name><operator pos:line="65" pos:column="49">.<pos:position pos:line="65" pos:column="50"/></operator><name pos:line="65" pos:column="50">number<pos:position pos:line="65" pos:column="56"/></name></name></expr>)<pos:position pos:line="65" pos:column="57"/></condition><then pos:line="65" pos:column="57"> <block pos:line="65" pos:column="58">{
                    <expr_stmt><expr><name pos:line="66" pos:column="21">match<pos:position pos:line="66" pos:column="26"/></name> <operator pos:line="66" pos:column="27">=<pos:position pos:line="66" pos:column="28"/></operator> <literal type="number" pos:line="66" pos:column="29">0<pos:position pos:line="66" pos:column="30"/></literal></expr>;<pos:position pos:line="66" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="67" pos:column="18"/></block></then></if>
                <break pos:line="68" pos:column="17">break;<pos:position pos:line="68" pos:column="23"/></break>
            <comment type="block" pos:line="69" pos:column="13">/* Integer comparisons should be [var] OP [match]
             * We need to set match = 0 if the condition fails
             */</comment>
            <case pos:line="72" pos:column="13">case <expr><name pos:line="72" pos:column="18">INT_LT<pos:position pos:line="72" pos:column="24"/></name></expr>:<pos:position pos:line="72" pos:column="25"/></case>
                <if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><call><name pos:line="73" pos:column="21">atoi<pos:position pos:line="73" pos:column="25"/></name><argument_list pos:line="73" pos:column="25">(<argument><expr><name pos:line="73" pos:column="26">str<pos:position pos:line="73" pos:column="29"/></name></expr></argument>)<pos:position pos:line="73" pos:column="30"/></argument_list></call> <operator pos:line="73" pos:column="31">&gt;=<pos:position pos:line="73" pos:column="36"/></operator> <name><name pos:line="73" pos:column="34">provider<pos:position pos:line="73" pos:column="42"/></name><operator pos:line="73" pos:column="42">-&gt;<pos:position pos:line="73" pos:column="47"/></operator><name pos:line="73" pos:column="44">match<pos:position pos:line="73" pos:column="49"/></name><operator pos:line="73" pos:column="49">.<pos:position pos:line="73" pos:column="50"/></operator><name pos:line="73" pos:column="50">number<pos:position pos:line="73" pos:column="56"/></name></name></expr>)<pos:position pos:line="73" pos:column="57"/></condition><then pos:line="73" pos:column="57"> <block pos:line="73" pos:column="58">{
                    <expr_stmt><expr><name pos:line="74" pos:column="21">match<pos:position pos:line="74" pos:column="26"/></name> <operator pos:line="74" pos:column="27">=<pos:position pos:line="74" pos:column="28"/></operator> <literal type="number" pos:line="74" pos:column="29">0<pos:position pos:line="74" pos:column="30"/></literal></expr>;<pos:position pos:line="74" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="75" pos:column="18"/></block></then></if>
                <break pos:line="76" pos:column="17">break;<pos:position pos:line="76" pos:column="23"/></break>
            <case pos:line="77" pos:column="13">case <expr><name pos:line="77" pos:column="18">INT_LE<pos:position pos:line="77" pos:column="24"/></name></expr>:<pos:position pos:line="77" pos:column="25"/></case>
                <if pos:line="78" pos:column="17">if <condition pos:line="78" pos:column="20">(<expr><call><name pos:line="78" pos:column="21">atoi<pos:position pos:line="78" pos:column="25"/></name><argument_list pos:line="78" pos:column="25">(<argument><expr><name pos:line="78" pos:column="26">str<pos:position pos:line="78" pos:column="29"/></name></expr></argument>)<pos:position pos:line="78" pos:column="30"/></argument_list></call> <operator pos:line="78" pos:column="31">&gt;<pos:position pos:line="78" pos:column="35"/></operator> <name><name pos:line="78" pos:column="33">provider<pos:position pos:line="78" pos:column="41"/></name><operator pos:line="78" pos:column="41">-&gt;<pos:position pos:line="78" pos:column="46"/></operator><name pos:line="78" pos:column="43">match<pos:position pos:line="78" pos:column="48"/></name><operator pos:line="78" pos:column="48">.<pos:position pos:line="78" pos:column="49"/></operator><name pos:line="78" pos:column="49">number<pos:position pos:line="78" pos:column="55"/></name></name></expr>)<pos:position pos:line="78" pos:column="56"/></condition><then pos:line="78" pos:column="56"> <block pos:line="78" pos:column="57">{
                    <expr_stmt><expr><name pos:line="79" pos:column="21">match<pos:position pos:line="79" pos:column="26"/></name> <operator pos:line="79" pos:column="27">=<pos:position pos:line="79" pos:column="28"/></operator> <literal type="number" pos:line="79" pos:column="29">0<pos:position pos:line="79" pos:column="30"/></literal></expr>;<pos:position pos:line="79" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="80" pos:column="18"/></block></then></if>
                <break pos:line="81" pos:column="17">break;<pos:position pos:line="81" pos:column="23"/></break>
            <case pos:line="82" pos:column="13">case <expr><name pos:line="82" pos:column="18">INT_GT<pos:position pos:line="82" pos:column="24"/></name></expr>:<pos:position pos:line="82" pos:column="25"/></case>
                <if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><call><name pos:line="83" pos:column="21">atoi<pos:position pos:line="83" pos:column="25"/></name><argument_list pos:line="83" pos:column="25">(<argument><expr><name pos:line="83" pos:column="26">str<pos:position pos:line="83" pos:column="29"/></name></expr></argument>)<pos:position pos:line="83" pos:column="30"/></argument_list></call> <operator pos:line="83" pos:column="31">&lt;=<pos:position pos:line="83" pos:column="36"/></operator> <name><name pos:line="83" pos:column="34">provider<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">-&gt;<pos:position pos:line="83" pos:column="47"/></operator><name pos:line="83" pos:column="44">match<pos:position pos:line="83" pos:column="49"/></name><operator pos:line="83" pos:column="49">.<pos:position pos:line="83" pos:column="50"/></operator><name pos:line="83" pos:column="50">number<pos:position pos:line="83" pos:column="56"/></name></name></expr>)<pos:position pos:line="83" pos:column="57"/></condition><then pos:line="83" pos:column="57"> <block pos:line="83" pos:column="58">{
                    <expr_stmt><expr><name pos:line="84" pos:column="21">match<pos:position pos:line="84" pos:column="26"/></name> <operator pos:line="84" pos:column="27">=<pos:position pos:line="84" pos:column="28"/></operator> <literal type="number" pos:line="84" pos:column="29">0<pos:position pos:line="84" pos:column="30"/></literal></expr>;<pos:position pos:line="84" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="85" pos:column="18"/></block></then></if>
                <break pos:line="86" pos:column="17">break;<pos:position pos:line="86" pos:column="23"/></break>
            <case pos:line="87" pos:column="13">case <expr><name pos:line="87" pos:column="18">INT_GE<pos:position pos:line="87" pos:column="24"/></name></expr>:<pos:position pos:line="87" pos:column="25"/></case>
                <if pos:line="88" pos:column="17">if <condition pos:line="88" pos:column="20">(<expr><call><name pos:line="88" pos:column="21">atoi<pos:position pos:line="88" pos:column="25"/></name><argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">str<pos:position pos:line="88" pos:column="29"/></name></expr></argument>)<pos:position pos:line="88" pos:column="30"/></argument_list></call> <operator pos:line="88" pos:column="31">&lt;<pos:position pos:line="88" pos:column="35"/></operator> <name><name pos:line="88" pos:column="33">provider<pos:position pos:line="88" pos:column="41"/></name><operator pos:line="88" pos:column="41">-&gt;<pos:position pos:line="88" pos:column="46"/></operator><name pos:line="88" pos:column="43">match<pos:position pos:line="88" pos:column="48"/></name><operator pos:line="88" pos:column="48">.<pos:position pos:line="88" pos:column="49"/></operator><name pos:line="88" pos:column="49">number<pos:position pos:line="88" pos:column="55"/></name></name></expr>)<pos:position pos:line="88" pos:column="56"/></condition><then pos:line="88" pos:column="56"> <block pos:line="88" pos:column="57">{
                    <expr_stmt><expr><name pos:line="89" pos:column="21">match<pos:position pos:line="89" pos:column="26"/></name> <operator pos:line="89" pos:column="27">=<pos:position pos:line="89" pos:column="28"/></operator> <literal type="number" pos:line="89" pos:column="29">0<pos:position pos:line="89" pos:column="30"/></literal></expr>;<pos:position pos:line="89" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="90" pos:column="18"/></block></then></if>
                <break pos:line="91" pos:column="17">break;<pos:position pos:line="91" pos:column="23"/></break>
            <case pos:line="92" pos:column="13">case <expr><name pos:line="92" pos:column="18">DEFINED<pos:position pos:line="92" pos:column="25"/></name></expr>:<pos:position pos:line="92" pos:column="26"/></case>        <comment type="block" pos:line="92" pos:column="34">/* we already handled this:-) */</comment>
                <break pos:line="93" pos:column="17">break;<pos:position pos:line="93" pos:column="23"/></break>
            }<pos:position pos:line="94" pos:column="14"/></block></switch>
        }<pos:position pos:line="95" pos:column="10"/></block></else></if>

        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">match<pos:position pos:line="97" pos:column="18"/></name> <operator pos:line="97" pos:column="19">!=<pos:position pos:line="97" pos:column="21"/></operator> <name><name pos:line="97" pos:column="22">provider<pos:position pos:line="97" pos:column="30"/></name><operator pos:line="97" pos:column="30">-&gt;<pos:position pos:line="97" pos:column="35"/></operator></name><operator pos:line="97" pos:column="32">not<pos:position pos:line="97" pos:column="35"/></operator></expr>)<pos:position pos:line="97" pos:column="36"/></condition><then pos:line="97" pos:column="36"> <block pos:line="97" pos:column="37">{
            <comment type="block" pos:line="98" pos:column="13">/* condition matches this provider */</comment>
<cpp:ifndef pos:line="99" pos:column="1">#<cpp:directive pos:line="99" pos:column="2">ifndef<pos:position pos:line="99" pos:column="8"/></cpp:directive> <name pos:line="99" pos:column="9">NO_PROTOCOL<pos:position pos:line="99" pos:column="20"/></name></cpp:ifndef>
            <comment type="block" pos:line="100" pos:column="13">/* check protocol
             *
             * FIXME:
             * This is a quick hack and almost certainly buggy.
             * The idea is that by putting this in mod_filter, we relieve
             * filter implementations of the burden of fixing up HTTP headers
             * for cases that are routinely affected by filters.
             *
             * Default is ALWAYS to do nothing, so as not to tread on the
             * toes of filters which want to do it themselves.
             *
             */</comment>
            <expr_stmt><expr><name pos:line="112" pos:column="13">proto_flags<pos:position pos:line="112" pos:column="24"/></name> <operator pos:line="112" pos:column="25">=<pos:position pos:line="112" pos:column="26"/></operator> <name><name pos:line="112" pos:column="27">provider<pos:position pos:line="112" pos:column="35"/></name><operator pos:line="112" pos:column="35">-&gt;<pos:position pos:line="112" pos:column="40"/></operator><name pos:line="112" pos:column="37">frec<pos:position pos:line="112" pos:column="41"/></name><operator pos:line="112" pos:column="41">-&gt;<pos:position pos:line="112" pos:column="46"/></operator><name pos:line="112" pos:column="43">proto_flags<pos:position pos:line="112" pos:column="54"/></name></name></expr>;<pos:position pos:line="112" pos:column="55"/></expr_stmt>

            <comment type="block" pos:line="114" pos:column="13">/* some specific things can't happen in a proxy */</comment>
            <if pos:line="115" pos:column="13">if <condition pos:line="115" pos:column="16">(<expr><name><name pos:line="115" pos:column="17">r<pos:position pos:line="115" pos:column="18"/></name><operator pos:line="115" pos:column="18">-&gt;<pos:position pos:line="115" pos:column="23"/></operator><name pos:line="115" pos:column="20">proxyreq<pos:position pos:line="115" pos:column="28"/></name></name></expr>)<pos:position pos:line="115" pos:column="29"/></condition><then pos:line="115" pos:column="29"> <block pos:line="115" pos:column="30">{
                <if pos:line="116" pos:column="17">if <condition pos:line="116" pos:column="20">(<expr><name pos:line="116" pos:column="21">proto_flags<pos:position pos:line="116" pos:column="32"/></name> <operator pos:line="116" pos:column="33">&amp;<pos:position pos:line="116" pos:column="38"/></operator> <name pos:line="116" pos:column="35">AP_FILTER_PROTO_NO_PROXY<pos:position pos:line="116" pos:column="59"/></name></expr>)<pos:position pos:line="116" pos:column="60"/></condition><then pos:line="116" pos:column="60"> <block pos:line="116" pos:column="61">{<pos:position pos:line="116" pos:column="62"/></block></then></if></block></then></if></block></then></if></block></for></block></function>
                    <comment type="block" pos:line="117" pos:column="21">/* can't use this provider; try next */</comment>
     </unit>
