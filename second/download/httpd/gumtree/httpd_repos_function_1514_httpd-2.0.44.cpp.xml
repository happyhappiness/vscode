<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1514_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">CaseFilterInFilter<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">ap_filter_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">f<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="2" pos:column="40">apr_bucket_brigade<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">pbbOut<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="3" pos:column="40">ap_input_mode_t<pos:position pos:line="3" pos:column="55"/></name></type> <name pos:line="3" pos:column="56">eMode<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="4" pos:column="40">apr_read_type_e<pos:position pos:line="4" pos:column="55"/></name></type> <name pos:line="4" pos:column="56">eBlock<pos:position pos:line="4" pos:column="62"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="5" pos:column="40">apr_off_t<pos:position pos:line="5" pos:column="49"/></name></type> <name pos:line="5" pos:column="50">nBytes<pos:position pos:line="5" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="57"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">request_rec<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">r<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name><name pos:line="7" pos:column="22">f<pos:position pos:line="7" pos:column="23"/></name><operator pos:line="7" pos:column="23">-&gt;<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="25">r<pos:position pos:line="7" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">conn_rec<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">c<pos:position pos:line="8" pos:column="16"/></name> <init pos:line="8" pos:column="17">= <expr><name><name pos:line="8" pos:column="19">r<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">connection<pos:position pos:line="8" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">CaseFilterInContext<pos:position pos:line="9" pos:column="24"/></name> <modifier pos:line="9" pos:column="25">*<pos:position pos:line="9" pos:column="26"/></modifier></type><name pos:line="9" pos:column="26">pCtx<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_status_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">ret<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">pCtx<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <name><name pos:line="12" pos:column="18">f<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">-&gt;<pos:position pos:line="12" pos:column="24"/></operator><name pos:line="12" pos:column="21">ctx<pos:position pos:line="12" pos:column="24"/></name></name><operator pos:line="12" pos:column="24">)<pos:position pos:line="12" pos:column="25"/></operator></expr>)<pos:position pos:line="12" pos:column="26"/></condition><then pos:line="12" pos:column="26"> <block pos:line="12" pos:column="27">{
        <expr_stmt><expr><name><name pos:line="13" pos:column="9">f<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">ctx<pos:position pos:line="13" pos:column="15"/></name></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <name pos:line="13" pos:column="18">pCtx<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <call><name pos:line="13" pos:column="25">apr_palloc<pos:position pos:line="13" pos:column="35"/></name><argument_list pos:line="13" pos:column="35">(<argument><expr><name><name pos:line="13" pos:column="36">r<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">-&gt;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="39">pool<pos:position pos:line="13" pos:column="43"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="45">sizeof <name><pos:position pos:line="13" pos:column="52"/></name></sizeof>*<name pos:line="13" pos:column="53">pCtx<pos:position pos:line="13" pos:column="57"/></name></expr></argument>)<pos:position pos:line="13" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">pCtx<pos:position pos:line="14" pos:column="13"/></name><operator pos:line="14" pos:column="13">-&gt;<pos:position pos:line="14" pos:column="18"/></operator><name pos:line="14" pos:column="15">pbbTmp<pos:position pos:line="14" pos:column="21"/></name></name> <operator pos:line="14" pos:column="22">=<pos:position pos:line="14" pos:column="23"/></operator> <call><name pos:line="14" pos:column="24">apr_brigade_create<pos:position pos:line="14" pos:column="42"/></name><argument_list pos:line="14" pos:column="42">(<argument><expr><name><name pos:line="14" pos:column="43">r<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">-&gt;<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="46">pool<pos:position pos:line="14" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="52">c<pos:position pos:line="14" pos:column="53"/></name><operator pos:line="14" pos:column="53">-&gt;<pos:position pos:line="14" pos:column="58"/></operator><name pos:line="14" pos:column="55">bucket_alloc<pos:position pos:line="14" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="69"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name><name pos:line="17" pos:column="27">pCtx<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">pbbTmp<pos:position pos:line="17" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="41"/></condition><then pos:line="17" pos:column="41"> <block pos:line="17" pos:column="42">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">ret<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">ap_get_brigade<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name><name pos:line="18" pos:column="30">f<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">-&gt;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="33">next<pos:position pos:line="18" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="39">pCtx<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">-&gt;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="45">pbbTmp<pos:position pos:line="18" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="53">eMode<pos:position pos:line="18" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="60">eBlock<pos:position pos:line="18" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="68">nBytes<pos:position pos:line="18" pos:column="74"/></name></expr></argument>)<pos:position pos:line="18" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="76"/></expr_stmt>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">eMode<pos:position pos:line="20" pos:column="18"/></name> <operator pos:line="20" pos:column="19">==<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">AP_MODE_EATCRLF<pos:position pos:line="20" pos:column="37"/></name> <operator pos:line="20" pos:column="38">||<pos:position pos:line="20" pos:column="40"/></operator> <name pos:line="20" pos:column="41">ret<pos:position pos:line="20" pos:column="44"/></name> <operator pos:line="20" pos:column="45">!=<pos:position pos:line="20" pos:column="47"/></operator> <name pos:line="20" pos:column="48">APR_SUCCESS<pos:position pos:line="20" pos:column="59"/></name></expr>)<pos:position pos:line="20" pos:column="60"/></condition><then pos:line="20" pos:column="60">
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><name pos:line="21" pos:column="20">ret<pos:position pos:line="21" pos:column="23"/></name></expr>;<pos:position pos:line="21" pos:column="24"/></return></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <while pos:line="24" pos:column="5">while<condition pos:line="24" pos:column="10">(<expr><operator pos:line="24" pos:column="11">!<pos:position pos:line="24" pos:column="12"/></operator><call><name pos:line="24" pos:column="12">APR_BRIGADE_EMPTY<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name><name pos:line="24" pos:column="30">pCtx<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">-&gt;<pos:position pos:line="24" pos:column="39"/></operator><name pos:line="24" pos:column="36">pbbTmp<pos:position pos:line="24" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="44"/></condition> <block pos:line="24" pos:column="45">{
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">apr_bucket<pos:position pos:line="25" pos:column="19"/></name> <modifier pos:line="25" pos:column="20">*<pos:position pos:line="25" pos:column="21"/></modifier></type><name pos:line="25" pos:column="21">pbktIn<pos:position pos:line="25" pos:column="27"/></name> <init pos:line="25" pos:column="28">= <expr><call><name pos:line="25" pos:column="30">APR_BRIGADE_FIRST<pos:position pos:line="25" pos:column="47"/></name><argument_list pos:line="25" pos:column="47">(<argument><expr><name><name pos:line="25" pos:column="48">pCtx<pos:position pos:line="25" pos:column="52"/></name><operator pos:line="25" pos:column="52">-&gt;<pos:position pos:line="25" pos:column="57"/></operator><name pos:line="25" pos:column="54">pbbTmp<pos:position pos:line="25" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="25" pos:column="62"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">apr_bucket<pos:position pos:line="26" pos:column="19"/></name> <modifier pos:line="26" pos:column="20">*<pos:position pos:line="26" pos:column="21"/></modifier></type><name pos:line="26" pos:column="21">pbktOut<pos:position pos:line="26" pos:column="28"/></name></decl>;<pos:position pos:line="26" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="27" pos:column="9">const<pos:position pos:line="27" pos:column="14"/></specifier> <name pos:line="27" pos:column="15">char<pos:position pos:line="27" pos:column="19"/></name> <modifier pos:line="27" pos:column="20">*<pos:position pos:line="27" pos:column="21"/></modifier></type><name pos:line="27" pos:column="21">data<pos:position pos:line="27" pos:column="25"/></name></decl>;<pos:position pos:line="27" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">apr_size_t<pos:position pos:line="28" pos:column="19"/></name></type> <name pos:line="28" pos:column="20">len<pos:position pos:line="28" pos:column="23"/></name></decl>;<pos:position pos:line="28" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">char<pos:position pos:line="29" pos:column="13"/></name> <modifier pos:line="29" pos:column="14">*<pos:position pos:line="29" pos:column="15"/></modifier></type><name pos:line="29" pos:column="15">buf<pos:position pos:line="29" pos:column="18"/></name></decl>;<pos:position pos:line="29" pos:column="19"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">int<pos:position pos:line="30" pos:column="12"/></name></type> <name pos:line="30" pos:column="13">n<pos:position pos:line="30" pos:column="14"/></name></decl>;<pos:position pos:line="30" pos:column="15"/></decl_stmt>

        <comment type="block" pos:line="32" pos:column="9">/* It is tempting to do this...
         * APR_BUCKET_REMOVE(pB);
         * APR_BRIGADE_INSERT_TAIL(pbbOut,pB);
         * and change the case of the bucket data, but that would be wrong
         * for a file or socket buffer, for example...
         */</comment>

        <if pos:line="39" pos:column="9">if<condition pos:line="39" pos:column="11">(<expr><call><name pos:line="39" pos:column="12">APR_BUCKET_IS_EOS<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">pbktIn<pos:position pos:line="39" pos:column="36"/></name></expr></argument>)<pos:position pos:line="39" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="38"/></condition><then pos:line="39" pos:column="38"> <block pos:line="39" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="40" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">pbktIn<pos:position pos:line="40" pos:column="37"/></name></expr></argument>)<pos:position pos:line="40" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><name pos:line="41" pos:column="37">pbbOut<pos:position pos:line="41" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="45">pbktIn<pos:position pos:line="41" pos:column="51"/></name></expr></argument>)<pos:position pos:line="41" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="53"/></expr_stmt>
            <break pos:line="42" pos:column="13">break;<pos:position pos:line="42" pos:column="19"/></break>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="45" pos:column="9">ret<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">=<pos:position pos:line="45" pos:column="13"/></operator><call><name pos:line="45" pos:column="13">apr_bucket_read<pos:position pos:line="45" pos:column="28"/></name><argument_list pos:line="45" pos:column="28">(<argument><expr><name pos:line="45" pos:column="29">pbktIn<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="37">&amp;<pos:position pos:line="45" pos:column="42"/></operator><name pos:line="45" pos:column="38">data<pos:position pos:line="45" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="44">&amp;<pos:position pos:line="45" pos:column="49"/></operator><name pos:line="45" pos:column="45">len<pos:position pos:line="45" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="50">eBlock<pos:position pos:line="45" pos:column="56"/></name></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="58"/></expr_stmt>
        <if pos:line="46" pos:column="9">if<condition pos:line="46" pos:column="11">(<expr><name pos:line="46" pos:column="12">ret<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">!=<pos:position pos:line="46" pos:column="18"/></operator> <name pos:line="46" pos:column="19">APR_SUCCESS<pos:position pos:line="46" pos:column="30"/></name></expr>)<pos:position pos:line="46" pos:column="31"/></condition><then pos:line="46" pos:column="31">
            <block type="pseudo"><return pos:line="47" pos:column="13">return <expr><name pos:line="47" pos:column="20">ret<pos:position pos:line="47" pos:column="23"/></name></expr>;<pos:position pos:line="47" pos:column="24"/></return></block></then></if>

        <expr_stmt><expr><name pos:line="49" pos:column="9">buf<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <call><name pos:line="49" pos:column="15">malloc<pos:position pos:line="49" pos:column="21"/></name><argument_list pos:line="49" pos:column="21">(<argument><expr><name pos:line="49" pos:column="22">len<pos:position pos:line="49" pos:column="25"/></name></expr></argument>)<pos:position pos:line="49" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="27"/></expr_stmt>
        <for pos:line="50" pos:column="9">for<control pos:line="50" pos:column="12">(<init><expr><name pos:line="50" pos:column="13">n<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator><literal type="number" pos:line="50" pos:column="15">0<pos:position pos:line="50" pos:column="16"/></literal></expr> ;<pos:position pos:line="50" pos:column="18"/></init> <condition><expr><name pos:line="50" pos:column="19">n<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">&lt;<pos:position pos:line="50" pos:column="25"/></operator> <name pos:line="50" pos:column="23">len<pos:position pos:line="50" pos:column="26"/></name></expr> ;<pos:position pos:line="50" pos:column="28"/></condition> <incr><expr><operator pos:line="50" pos:column="29">++<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="31">n<pos:position pos:line="50" pos:column="32"/></name></expr></incr>)<pos:position pos:line="50" pos:column="33"/></control>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="51" pos:column="13">buf<pos:position pos:line="51" pos:column="16"/></name><index pos:line="51" pos:column="16">[<expr><name pos:line="51" pos:column="17">n<pos:position pos:line="51" pos:column="18"/></name></expr>]<pos:position pos:line="51" pos:column="19"/></index></name> <operator pos:line="51" pos:column="20">=<pos:position pos:line="51" pos:column="21"/></operator> <call><name pos:line="51" pos:column="22">apr_toupper<pos:position pos:line="51" pos:column="33"/></name><argument_list pos:line="51" pos:column="33">(<argument><expr><name><name pos:line="51" pos:column="34">data<pos:position pos:line="51" pos:column="38"/></name><index pos:line="51" pos:column="38">[<expr><name pos:line="51" pos:column="39">n<pos:position pos:line="51" pos:column="40"/></name></expr>]<pos:position pos:line="51" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="51" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="43"/></expr_stmt></block></for>

        <expr_stmt><expr><name pos:line="53" pos:column="9">pbktOut<pos:position pos:line="53" pos:column="16"/></name> <operator pos:line="53" pos:column="17">=<pos:position pos:line="53" pos:column="18"/></operator> <call><name pos:line="53" pos:column="19">apr_bucket_heap_create<pos:position pos:line="53" pos:column="41"/></name><argument_list pos:line="53" pos:column="41">(<argument><expr><name pos:line="53" pos:column="42">buf<pos:position pos:line="53" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="47">len<pos:position pos:line="53" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="52">0<pos:position pos:line="53" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="55">c<pos:position pos:line="53" pos:column="56"/></name><operator pos:line="53" pos:column="56">-&gt;<pos:position pos:line="53" pos:column="61"/></operator><name pos:line="53" pos:column="58">bucket_alloc<pos:position pos:line="53" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="54" pos:column="32"/></name><argument_list pos:line="54" pos:column="32">(<argument><expr><name pos:line="54" pos:column="33">pbbOut<pos:position pos:line="54" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="41">pbktOut<pos:position pos:line="54" pos:column="48"/></name></expr></argument>)<pos:position pos:line="54" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">apr_bucket_delete<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">pbktIn<pos:position pos:line="55" pos:column="33"/></name></expr></argument>)<pos:position pos:line="55" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></while>

    <return pos:line="58" pos:column="5">return <expr><name pos:line="58" pos:column="12">APR_SUCCESS<pos:position pos:line="58" pos:column="23"/></name></expr>;<pos:position pos:line="58" pos:column="24"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
