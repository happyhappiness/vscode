<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_755_httpd-2.4.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">ssl_io_input_getline<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">bio_filter_in_ctx_t<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">inctx<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">buf<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>,
                                         <parameter><decl><type><name pos:line="3" pos:column="42">apr_size_t<pos:position pos:line="3" pos:column="52"/></name> <modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type><name pos:line="3" pos:column="54">len<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="58"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">pos<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">NULL<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">status<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">tmplen<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><operator pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></operator><name pos:line="7" pos:column="26">len<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="31">buflen<pos:position pos:line="7" pos:column="37"/></name> <init pos:line="7" pos:column="38">= <expr><operator pos:line="7" pos:column="40">*<pos:position pos:line="7" pos:column="41"/></operator><name pos:line="7" pos:column="41">len<pos:position pos:line="7" pos:column="44"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="46">offset<pos:position pos:line="7" pos:column="52"/></name> <init pos:line="7" pos:column="53">= <expr><literal type="number" pos:line="7" pos:column="55">0<pos:position pos:line="7" pos:column="56"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="57"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="9" pos:column="5">*<pos:position pos:line="9" pos:column="6"/></operator><name pos:line="9" pos:column="6">len<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <literal type="number" pos:line="9" pos:column="12">0<pos:position pos:line="9" pos:column="13"/></literal></expr>;<pos:position pos:line="9" pos:column="14"/></expr_stmt>

    <comment type="block" pos:line="11" pos:column="5">/*
     * in most cases we get all the headers on the first SSL_read.
     * however, in certain cases SSL_read will only get a partial
     * chunk of the headers, so we try to read until LF is seen.
     */</comment>

    <while pos:line="17" pos:column="5">while <condition pos:line="17" pos:column="11">(<expr><name pos:line="17" pos:column="12">tmplen<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">&gt;<pos:position pos:line="17" pos:column="23"/></operator> <literal type="number" pos:line="17" pos:column="21">0<pos:position pos:line="17" pos:column="22"/></literal></expr>)<pos:position pos:line="17" pos:column="23"/></condition> <block pos:line="17" pos:column="24">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">status<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">=<pos:position pos:line="18" pos:column="17"/></operator> <call><name pos:line="18" pos:column="18">ssl_io_input_read<pos:position pos:line="18" pos:column="35"/></name><argument_list pos:line="18" pos:column="35">(<argument><expr><name pos:line="18" pos:column="36">inctx<pos:position pos:line="18" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="43">buf<pos:position pos:line="18" pos:column="46"/></name> <operator pos:line="18" pos:column="47">+<pos:position pos:line="18" pos:column="48"/></operator> <name pos:line="18" pos:column="49">offset<pos:position pos:line="18" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="57">&amp;<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="58">tmplen<pos:position pos:line="18" pos:column="64"/></name></expr></argument>)<pos:position pos:line="18" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="66"/></expr_stmt>

        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">status<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">!=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">APR_SUCCESS<pos:position pos:line="20" pos:column="34"/></name></expr>)<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35"> <block pos:line="20" pos:column="36">{
            <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><call><name pos:line="21" pos:column="17">APR_STATUS_IS_EAGAIN<pos:position pos:line="21" pos:column="37"/></name><argument_list pos:line="21" pos:column="37">(<argument><expr><name pos:line="21" pos:column="38">status<pos:position pos:line="21" pos:column="44"/></name></expr></argument>)<pos:position pos:line="21" pos:column="45"/></argument_list></call> <operator pos:line="21" pos:column="46">&amp;&amp;<pos:position pos:line="21" pos:column="56"/></operator> <operator pos:line="21" pos:column="49">(<pos:position pos:line="21" pos:column="50"/></operator><operator pos:line="21" pos:column="50">*<pos:position pos:line="21" pos:column="51"/></operator><name pos:line="21" pos:column="51">len<pos:position pos:line="21" pos:column="54"/></name> <operator pos:line="21" pos:column="55">&gt;<pos:position pos:line="21" pos:column="59"/></operator> <literal type="number" pos:line="21" pos:column="57">0<pos:position pos:line="21" pos:column="58"/></literal><operator pos:line="21" pos:column="58">)<pos:position pos:line="21" pos:column="59"/></operator></expr>)<pos:position pos:line="21" pos:column="60"/></condition><then pos:line="21" pos:column="60"> <block pos:line="21" pos:column="61">{
                <comment type="block" pos:line="22" pos:column="17">/* Save the part of the line we already got */</comment>
                <expr_stmt><expr><call><name pos:line="23" pos:column="17">char_buffer_write<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><operator pos:line="23" pos:column="35">&amp;<pos:position pos:line="23" pos:column="40"/></operator><name><name pos:line="23" pos:column="36">inctx<pos:position pos:line="23" pos:column="41"/></name><operator pos:line="23" pos:column="41">-&gt;<pos:position pos:line="23" pos:column="46"/></operator><name pos:line="23" pos:column="43">cbuf<pos:position pos:line="23" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="49">buf<pos:position pos:line="23" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="54">*<pos:position pos:line="23" pos:column="55"/></operator><name pos:line="23" pos:column="55">len<pos:position pos:line="23" pos:column="58"/></name></expr></argument>)<pos:position pos:line="23" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="60"/></expr_stmt>
            }<pos:position pos:line="24" pos:column="14"/></block></then></if>
            <return pos:line="25" pos:column="13">return <expr><name pos:line="25" pos:column="20">status<pos:position pos:line="25" pos:column="26"/></name></expr>;<pos:position pos:line="25" pos:column="27"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <expr_stmt><expr><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">len<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">+=<pos:position pos:line="28" pos:column="16"/></operator> <name pos:line="28" pos:column="17">tmplen<pos:position pos:line="28" pos:column="23"/></name></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>

        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><operator pos:line="30" pos:column="13">(<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">pos<pos:position pos:line="30" pos:column="17"/></name> <operator pos:line="30" pos:column="18">=<pos:position pos:line="30" pos:column="19"/></operator> <call><name pos:line="30" pos:column="20">memchr<pos:position pos:line="30" pos:column="26"/></name><argument_list pos:line="30" pos:column="26">(<argument><expr><name pos:line="30" pos:column="27">buf<pos:position pos:line="30" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="32">APR_ASCII_LF<pos:position pos:line="30" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="46">*<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="47">len<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call><operator pos:line="30" pos:column="51">)<pos:position pos:line="30" pos:column="52"/></operator></expr>)<pos:position pos:line="30" pos:column="53"/></condition><then pos:line="30" pos:column="53"> <block pos:line="30" pos:column="54">{
            <break pos:line="31" pos:column="13">break;<pos:position pos:line="31" pos:column="19"/></break>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="34" pos:column="9">offset<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">+=<pos:position pos:line="34" pos:column="18"/></operator> <name pos:line="34" pos:column="19">tmplen<pos:position pos:line="34" pos:column="25"/></name></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="35" pos:column="9">tmplen<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <name pos:line="35" pos:column="18">buflen<pos:position pos:line="35" pos:column="24"/></name> <operator pos:line="35" pos:column="25">-<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">offset<pos:position pos:line="35" pos:column="33"/></name></expr>;<pos:position pos:line="35" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></while>

    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">pos<pos:position pos:line="38" pos:column="12"/></name></expr>)<pos:position pos:line="38" pos:column="13"/></condition><then pos:line="38" pos:column="13"> <block pos:line="38" pos:column="14">{
        <decl_stmt><decl><type><name pos:line="39" pos:column="9">char<pos:position pos:line="39" pos:column="13"/></name> <modifier pos:line="39" pos:column="14">*<pos:position pos:line="39" pos:column="15"/></modifier></type><name pos:line="39" pos:column="15">value<pos:position pos:line="39" pos:column="20"/></name></decl>;<pos:position pos:line="39" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">int<pos:position pos:line="40" pos:column="12"/></name></type> <name pos:line="40" pos:column="13">length<pos:position pos:line="40" pos:column="19"/></name></decl>;<pos:position pos:line="40" pos:column="20"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="41" pos:column="9">apr_size_t<pos:position pos:line="41" pos:column="19"/></name></type> <name pos:line="41" pos:column="20">bytes<pos:position pos:line="41" pos:column="25"/></name> <init pos:line="41" pos:column="26">= <expr><name pos:line="41" pos:column="28">pos<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">-<pos:position pos:line="41" pos:column="33"/></operator> <name pos:line="41" pos:column="34">buf<pos:position pos:line="41" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="41" pos:column="38"/></decl_stmt>

        <expr_stmt><expr><name pos:line="43" pos:column="9">bytes<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">+=<pos:position pos:line="43" pos:column="17"/></operator> <literal type="number" pos:line="43" pos:column="18">1<pos:position pos:line="43" pos:column="19"/></literal></expr>;<pos:position pos:line="43" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="44" pos:column="9">value<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <name pos:line="44" pos:column="17">buf<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">+<pos:position pos:line="44" pos:column="22"/></operator> <name pos:line="44" pos:column="23">bytes<pos:position pos:line="44" pos:column="28"/></name></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="45" pos:column="9">length<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <operator pos:line="45" pos:column="18">*<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">len<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">-<pos:position pos:line="45" pos:column="24"/></operator> <name pos:line="45" pos:column="25">bytes<pos:position pos:line="45" pos:column="30"/></name></expr>;<pos:position pos:line="45" pos:column="31"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="47" pos:column="9">char_buffer_write<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><operator pos:line="47" pos:column="27">&amp;<pos:position pos:line="47" pos:column="32"/></operator><name><name pos:line="47" pos:column="28">inctx<pos:position pos:line="47" pos:column="33"/></name><operator pos:line="47" pos:column="33">-&gt;<pos:position pos:line="47" pos:column="38"/></operator><name pos:line="47" pos:column="35">cbuf<pos:position pos:line="47" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="41">value<pos:position pos:line="47" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="48">length<pos:position pos:line="47" pos:column="54"/></name></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="56"/></expr_stmt>

        <expr_stmt><expr><operator pos:line="49" pos:column="9">*<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">len<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <name pos:line="49" pos:column="16">bytes<pos:position pos:line="49" pos:column="21"/></name></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <return pos:line="52" pos:column="5">return <expr><name pos:line="52" pos:column="12">APR_SUCCESS<pos:position pos:line="52" pos:column="23"/></name></expr>;<pos:position pos:line="52" pos:column="24"/></return>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
