<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2295_httpd-2.0.64.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">server_main_loop<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">remaining_children_to_start<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">child_slot<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_exit_why_e<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">exitwhy<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">status<pos:position pos:line="5" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="17">processed_status<pos:position pos:line="5" pos:column="33"/></name></decl>;<pos:position pos:line="5" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_proc_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">pid<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">i<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>

    <while pos:line="9" pos:column="5">while <condition pos:line="9" pos:column="11">(<expr><operator pos:line="9" pos:column="12">!<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">restart_pending<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">&amp;&amp;<pos:position pos:line="9" pos:column="39"/></operator> <operator pos:line="9" pos:column="32">!<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">shutdown_pending<pos:position pos:line="9" pos:column="49"/></name></expr>)<pos:position pos:line="9" pos:column="50"/></condition> <block pos:line="9" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">ap_wait_or_timeout<pos:position pos:line="10" pos:column="27"/></name><argument_list pos:line="10" pos:column="27">(<argument><expr><operator pos:line="10" pos:column="28">&amp;<pos:position pos:line="10" pos:column="33"/></operator><name pos:line="10" pos:column="29">exitwhy<pos:position pos:line="10" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="38">&amp;<pos:position pos:line="10" pos:column="43"/></operator><name pos:line="10" pos:column="39">status<pos:position pos:line="10" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="10" pos:column="47">&amp;<pos:position pos:line="10" pos:column="52"/></operator><name pos:line="10" pos:column="48">pid<pos:position pos:line="10" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="53">pconf<pos:position pos:line="10" pos:column="58"/></name></expr></argument>)<pos:position pos:line="10" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="60"/></expr_stmt>
        
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">pid<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">.<pos:position pos:line="12" pos:column="17"/></operator><name pos:line="12" pos:column="17">pid<pos:position pos:line="12" pos:column="20"/></name></name> <operator pos:line="12" pos:column="21">!=<pos:position pos:line="12" pos:column="23"/></operator> <operator pos:line="12" pos:column="24">-<pos:position pos:line="12" pos:column="25"/></operator><literal type="number" pos:line="12" pos:column="25">1<pos:position pos:line="12" pos:column="26"/></literal></expr>)<pos:position pos:line="12" pos:column="27"/></condition><then pos:line="12" pos:column="27"> <block pos:line="12" pos:column="28">{
            <expr_stmt><expr><name pos:line="13" pos:column="13">processed_status<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">=<pos:position pos:line="13" pos:column="31"/></operator> <call><name pos:line="13" pos:column="32">ap_process_child_status<pos:position pos:line="13" pos:column="55"/></name><argument_list pos:line="13" pos:column="55">(<argument><expr><operator pos:line="13" pos:column="56">&amp;<pos:position pos:line="13" pos:column="61"/></operator><name pos:line="13" pos:column="57">pid<pos:position pos:line="13" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="62">exitwhy<pos:position pos:line="13" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="71">status<pos:position pos:line="13" pos:column="77"/></name></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="79"/></expr_stmt>
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><name pos:line="14" pos:column="17">processed_status<pos:position pos:line="14" pos:column="33"/></name> <operator pos:line="14" pos:column="34">==<pos:position pos:line="14" pos:column="36"/></operator> <name pos:line="14" pos:column="37">APEXIT_CHILDFATAL<pos:position pos:line="14" pos:column="54"/></name></expr>)<pos:position pos:line="14" pos:column="55"/></condition><then pos:line="14" pos:column="55"> <block pos:line="14" pos:column="56">{
                <expr_stmt><expr><name pos:line="15" pos:column="17">shutdown_pending<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">=<pos:position pos:line="15" pos:column="35"/></operator> <literal type="number" pos:line="15" pos:column="36">1<pos:position pos:line="15" pos:column="37"/></literal></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name pos:line="16" pos:column="17">child_fatal<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <literal type="number" pos:line="16" pos:column="31">1<pos:position pos:line="16" pos:column="32"/></literal></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
                <return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return>
            }<pos:position pos:line="18" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="19" pos:column="13">/* non-fatal death... note that it's gone in the scoreboard. */</comment>
            <expr_stmt><expr><name pos:line="20" pos:column="13">child_slot<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <call><name pos:line="20" pos:column="26">find_child_by_pid<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(<argument><expr><operator pos:line="20" pos:column="44">&amp;<pos:position pos:line="20" pos:column="49"/></operator><name pos:line="20" pos:column="45">pid<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
            <if pos:line="21" pos:column="13">if <condition pos:line="21" pos:column="16">(<expr><name pos:line="21" pos:column="17">child_slot<pos:position pos:line="21" pos:column="27"/></name> <operator pos:line="21" pos:column="28">&gt;=<pos:position pos:line="21" pos:column="33"/></operator> <literal type="number" pos:line="21" pos:column="31">0<pos:position pos:line="21" pos:column="32"/></literal></expr>)<pos:position pos:line="21" pos:column="33"/></condition><then pos:line="21" pos:column="33"> <block pos:line="21" pos:column="34">{
                <for pos:line="22" pos:column="17">for <control pos:line="22" pos:column="21">(<init><expr><name pos:line="22" pos:column="22">i<pos:position pos:line="22" pos:column="23"/></name> <operator pos:line="22" pos:column="24">=<pos:position pos:line="22" pos:column="25"/></operator> <literal type="number" pos:line="22" pos:column="26">0<pos:position pos:line="22" pos:column="27"/></literal></expr>;<pos:position pos:line="22" pos:column="28"/></init> <condition><expr><name pos:line="22" pos:column="29">i<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">&lt;<pos:position pos:line="22" pos:column="35"/></operator> <name pos:line="22" pos:column="33">ap_threads_per_child<pos:position pos:line="22" pos:column="53"/></name></expr>;<pos:position pos:line="22" pos:column="54"/></condition> <incr><expr><name pos:line="22" pos:column="55">i<pos:position pos:line="22" pos:column="56"/></name><operator pos:line="22" pos:column="56">++<pos:position pos:line="22" pos:column="58"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="59"/></control>
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="23" pos:column="21">ap_update_child_status_from_indexes<pos:position pos:line="23" pos:column="56"/></name><argument_list pos:line="23" pos:column="56">(<argument><expr><name pos:line="23" pos:column="57">child_slot<pos:position pos:line="23" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="69">i<pos:position pos:line="23" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="72">SERVER_DEAD<pos:position pos:line="23" pos:column="83"/></name></expr></argument>, 
                                                        <argument><expr><operator pos:line="24" pos:column="57">(<pos:position pos:line="24" pos:column="58"/></operator><name pos:line="24" pos:column="58">request_rec<pos:position pos:line="24" pos:column="69"/></name> <operator pos:line="24" pos:column="70">*<pos:position pos:line="24" pos:column="71"/></operator><operator pos:line="24" pos:column="71">)<pos:position pos:line="24" pos:column="72"/></operator> <name pos:line="24" pos:column="73">NULL<pos:position pos:line="24" pos:column="77"/></name></expr></argument>)<pos:position pos:line="24" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="79"/></expr_stmt></block></for>
                
                <expr_stmt><expr><name><name pos:line="26" pos:column="17">ap_scoreboard_image<pos:position pos:line="26" pos:column="36"/></name><operator pos:line="26" pos:column="36">-&gt;<pos:position pos:line="26" pos:column="41"/></operator><name pos:line="26" pos:column="38">parent<pos:position pos:line="26" pos:column="44"/></name><index pos:line="26" pos:column="44">[<expr><name pos:line="26" pos:column="45">child_slot<pos:position pos:line="26" pos:column="55"/></name></expr>]<pos:position pos:line="26" pos:column="56"/></index></name><operator pos:line="26" pos:column="56">.<pos:position pos:line="26" pos:column="57"/></operator><name pos:line="26" pos:column="57">pid<pos:position pos:line="26" pos:column="60"/></name> <operator pos:line="26" pos:column="61">=<pos:position pos:line="26" pos:column="62"/></operator> <literal type="number" pos:line="26" pos:column="63">0<pos:position pos:line="26" pos:column="64"/></literal></expr>;<pos:position pos:line="26" pos:column="65"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="27" pos:column="17">ap_scoreboard_image<pos:position pos:line="27" pos:column="36"/></name><operator pos:line="27" pos:column="36">-&gt;<pos:position pos:line="27" pos:column="41"/></operator><name pos:line="27" pos:column="38">parent<pos:position pos:line="27" pos:column="44"/></name><index pos:line="27" pos:column="44">[<expr><name pos:line="27" pos:column="45">child_slot<pos:position pos:line="27" pos:column="55"/></name></expr>]<pos:position pos:line="27" pos:column="56"/></index></name><operator pos:line="27" pos:column="56">.<pos:position pos:line="27" pos:column="57"/></operator><name pos:line="27" pos:column="57">quiescing<pos:position pos:line="27" pos:column="66"/></name> <operator pos:line="27" pos:column="67">=<pos:position pos:line="27" pos:column="68"/></operator> <literal type="number" pos:line="27" pos:column="69">0<pos:position pos:line="27" pos:column="70"/></literal></expr>;<pos:position pos:line="27" pos:column="71"/></expr_stmt>
                <if pos:line="28" pos:column="17">if <condition pos:line="28" pos:column="20">(<expr><name pos:line="28" pos:column="21">processed_status<pos:position pos:line="28" pos:column="37"/></name> <operator pos:line="28" pos:column="38">==<pos:position pos:line="28" pos:column="40"/></operator> <name pos:line="28" pos:column="41">APEXIT_CHILDSICK<pos:position pos:line="28" pos:column="57"/></name></expr>)<pos:position pos:line="28" pos:column="58"/></condition><then pos:line="28" pos:column="58"> <block pos:line="28" pos:column="59">{
                    <comment type="block" pos:line="29" pos:column="21">/* resource shortage, minimize the fork rate */</comment>
                    <expr_stmt><expr><name pos:line="30" pos:column="21">idle_spawn_rate<pos:position pos:line="30" pos:column="36"/></name> <operator pos:line="30" pos:column="37">=<pos:position pos:line="30" pos:column="38"/></operator> <literal type="number" pos:line="30" pos:column="39">1<pos:position pos:line="30" pos:column="40"/></literal></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt>
                }<pos:position pos:line="31" pos:column="18"/></block></then>
                <elseif pos:line="32" pos:column="17">else <if pos:line="32" pos:column="22">if <condition pos:line="32" pos:column="25">(<expr><name pos:line="32" pos:column="26">remaining_children_to_start<pos:position pos:line="32" pos:column="53"/></name>
                    <operator pos:line="33" pos:column="21">&amp;&amp;<pos:position pos:line="33" pos:column="31"/></operator> <name pos:line="33" pos:column="24">child_slot<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">&lt;<pos:position pos:line="33" pos:column="39"/></operator> <name pos:line="33" pos:column="37">ap_daemons_limit<pos:position pos:line="33" pos:column="53"/></name></expr>)<pos:position pos:line="33" pos:column="54"/></condition><then pos:line="33" pos:column="54"> <block pos:line="33" pos:column="55">{
                    <comment type="block" pos:line="34" pos:column="21">/* we're still doing a 1-for-1 replacement of dead
                     * children with new children
                     */</comment>
                    <expr_stmt><expr><call><name pos:line="37" pos:column="21">make_child<pos:position pos:line="37" pos:column="31"/></name><argument_list pos:line="37" pos:column="31">(<argument><expr><name pos:line="37" pos:column="32">ap_server_conf<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">child_slot<pos:position pos:line="37" pos:column="58"/></name></expr></argument>)<pos:position pos:line="37" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="60"/></expr_stmt>
                    <expr_stmt><expr><operator pos:line="38" pos:column="21">--<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="23">remaining_children_to_start<pos:position pos:line="38" pos:column="50"/></name></expr>;<pos:position pos:line="38" pos:column="51"/></expr_stmt>
                }<pos:position pos:line="39" pos:column="18"/></block></then></if></elseif></if>
<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><name pos:line="40" pos:column="5">APR_HAS_OTHER_CHILD<pos:position pos:line="40" pos:column="24"/></name></expr></cpp:if>
            }<pos:position pos:line="41" pos:column="14"/></block></then>
            <elseif pos:line="42" pos:column="13">else <if pos:line="42" pos:column="18">if <condition pos:line="42" pos:column="21">(<expr><call><name pos:line="42" pos:column="22">apr_proc_other_child_read<pos:position pos:line="42" pos:column="47"/></name><argument_list pos:line="42" pos:column="47">(<argument><expr><operator pos:line="42" pos:column="48">&amp;<pos:position pos:line="42" pos:column="53"/></operator><name pos:line="42" pos:column="49">pid<pos:position pos:line="42" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="54">status<pos:position pos:line="42" pos:column="60"/></name></expr></argument>)<pos:position pos:line="42" pos:column="61"/></argument_list></call> <operator pos:line="42" pos:column="62">==<pos:position pos:line="42" pos:column="64"/></operator> <literal type="number" pos:line="42" pos:column="65">0<pos:position pos:line="42" pos:column="66"/></literal></expr>)<pos:position pos:line="42" pos:column="67"/></condition><then pos:line="42" pos:column="67"> <block pos:line="42" pos:column="68">{
                <comment type="block" pos:line="43" pos:column="17">/* handled */</comment>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
            }<pos:position pos:line="45" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="46" pos:column="13">else <if pos:line="46" pos:column="18">if <condition pos:line="46" pos:column="21">(<expr><name pos:line="46" pos:column="22">is_graceful<pos:position pos:line="46" pos:column="33"/></name></expr>)<pos:position pos:line="46" pos:column="34"/></condition><then pos:line="46" pos:column="34"> <block pos:line="46" pos:column="35">{
                <comment type="block" pos:line="47" pos:column="17">/* Great, we've probably just lost a slot in the
                 * scoreboard.  Somehow we don't know about this child.
                 */</comment>
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">ap_log_error<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">APLOG_MARK<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">APLOG_WARNING<pos:position pos:line="50" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="57">0<pos:position pos:line="50" pos:column="58"/></literal></expr></argument>,
                             <argument><expr><name pos:line="51" pos:column="30">ap_server_conf<pos:position pos:line="51" pos:column="44"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="52" pos:column="30">"long lost child came home! (pid %ld)"<pos:position pos:line="52" pos:column="68"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="53" pos:column="30">(<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="31">long<pos:position pos:line="53" pos:column="35"/></name><operator pos:line="53" pos:column="35">)<pos:position pos:line="53" pos:column="36"/></operator><name><name pos:line="53" pos:column="36">pid<pos:position pos:line="53" pos:column="39"/></name><operator pos:line="53" pos:column="39">.<pos:position pos:line="53" pos:column="40"/></operator><name pos:line="53" pos:column="40">pid<pos:position pos:line="53" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="54" pos:column="14"/></block></then></if></elseif></if>
            <comment type="block" pos:line="55" pos:column="13">/* Don't perform idle maintenance when a child dies,
             * only do it when there's a timeout.  Remember only a
             * finite number of children can die, and it's pretty
             * pathological for a lot to die suddenly.
             */</comment>
            <continue pos:line="60" pos:column="13">continue;<pos:position pos:line="60" pos:column="22"/></continue>
        }<pos:position pos:line="61" pos:column="10"/></block></then>
        <elseif pos:line="62" pos:column="9">else <if pos:line="62" pos:column="14">if <condition pos:line="62" pos:column="17">(<expr><name pos:line="62" pos:column="18">remaining_children_to_start<pos:position pos:line="62" pos:column="45"/></name></expr>)<pos:position pos:line="62" pos:column="46"/></condition><then pos:line="62" pos:column="46"> <block pos:line="62" pos:column="47">{
            <comment type="block" pos:line="63" pos:column="13">/* we hit a 1 second timeout in which none of the previous
             * generation of children needed to be reaped... so assume
             * they're all done, and pick up the slack if any is left.
             */</comment>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">startup_children<pos:position pos:line="67" pos:column="29"/></name><argument_list pos:line="67" pos:column="29">(<argument><expr><name pos:line="67" pos:column="30">remaining_children_to_start<pos:position pos:line="67" pos:column="57"/></name></expr></argument>)<pos:position pos:line="67" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><name pos:line="68" pos:column="13">remaining_children_to_start<pos:position pos:line="68" pos:column="40"/></name> <operator pos:line="68" pos:column="41">=<pos:position pos:line="68" pos:column="42"/></operator> <literal type="number" pos:line="68" pos:column="43">0<pos:position pos:line="68" pos:column="44"/></literal></expr>;<pos:position pos:line="68" pos:column="45"/></expr_stmt>
            <comment type="block" pos:line="69" pos:column="13">/* In any event we really shouldn't do the code below because
             * few of the servers we just started are in the IDLE state
             * yet, so we'd mistakenly create an extra server.
             */</comment>
            <continue pos:line="73" pos:column="13">continue;<pos:position pos:line="73" pos:column="22"/></continue>
        }<pos:position pos:line="74" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><call><name pos:line="76" pos:column="9">perform_idle_server_maintenance<pos:position pos:line="76" pos:column="40"/></name><argument_list pos:line="76" pos:column="40">()<pos:position pos:line="76" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></while>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
