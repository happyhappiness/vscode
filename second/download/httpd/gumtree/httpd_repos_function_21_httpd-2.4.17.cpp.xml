<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_21_httpd-2.4.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">get_shared_mem<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">apr_size_t<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">size<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">key_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">shmkey<pos:position pos:line="3" pos:column="17"/></name> <init pos:line="3" pos:column="18">= <expr><name pos:line="3" pos:column="20">IPC_PRIVATE<pos:position pos:line="3" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">shmid<pos:position pos:line="4" pos:column="14"/></name> <init pos:line="4" pos:column="15">= <expr><operator pos:line="4" pos:column="17">-<pos:position pos:line="4" pos:column="18"/></operator><literal type="number" pos:line="4" pos:column="18">1<pos:position pos:line="4" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">void<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">result<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">MOVEBREAK<pos:position pos:line="6" pos:column="17"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">obrk<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">shmid<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <call><name pos:line="10" pos:column="18">shmget<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">shmkey<pos:position pos:line="10" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="33">size<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="39">IPC_CREAT<pos:position pos:line="10" pos:column="48"/></name> <operator pos:line="10" pos:column="49">|<pos:position pos:line="10" pos:column="50"/></operator> <name pos:line="10" pos:column="51">SHM_R<pos:position pos:line="10" pos:column="56"/></name> <operator pos:line="10" pos:column="57">|<pos:position pos:line="10" pos:column="58"/></operator> <name pos:line="10" pos:column="59">SHM_W<pos:position pos:line="10" pos:column="64"/></name></expr></argument>)<pos:position pos:line="10" pos:column="65"/></argument_list></call><operator pos:line="10" pos:column="65">)<pos:position pos:line="10" pos:column="66"/></operator> <operator pos:line="10" pos:column="67">==<pos:position pos:line="10" pos:column="69"/></operator> <operator pos:line="10" pos:column="70">-<pos:position pos:line="10" pos:column="71"/></operator><literal type="number" pos:line="10" pos:column="71">1<pos:position pos:line="10" pos:column="72"/></literal></expr>)<pos:position pos:line="10" pos:column="73"/></condition><then pos:line="10" pos:column="73"> <block pos:line="10" pos:column="74">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">perror<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="string" pos:line="11" pos:column="16">"shmget"<pos:position pos:line="11" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">exit<pos:position pos:line="12" pos:column="13"/></name><argument_list pos:line="12" pos:column="13">(<argument><expr><literal type="number" pos:line="12" pos:column="14">1<pos:position pos:line="12" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">MOVEBREAK<pos:position pos:line="15" pos:column="17"/></name></cpp:ifdef>
    <comment type="block" pos:line="16" pos:column="5">/*
     * Some SysV systems place the shared segment WAY too close
     * to the dynamic memory break point (sbrk(0)). This severely
     * limits the use of malloc/sbrk in the program since sbrk will
     * refuse to move past that point.
     *
     * To get around this, we move the break point "way up there",
     * attach the segment and then move break back down. Ugly
     */</comment>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">(<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">obrk<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <call><name pos:line="25" pos:column="17">sbrk<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">MOVEBREAK<pos:position pos:line="25" pos:column="31"/></name></expr></argument>)<pos:position pos:line="25" pos:column="32"/></argument_list></call><operator pos:line="25" pos:column="32">)<pos:position pos:line="25" pos:column="33"/></operator> <operator pos:line="25" pos:column="34">==<pos:position pos:line="25" pos:column="36"/></operator> <operator pos:line="25" pos:column="37">(<pos:position pos:line="25" pos:column="38"/></operator><name pos:line="25" pos:column="38">char<pos:position pos:line="25" pos:column="42"/></name> <operator pos:line="25" pos:column="43">*<pos:position pos:line="25" pos:column="44"/></operator><operator pos:line="25" pos:column="44">)<pos:position pos:line="25" pos:column="45"/></operator> <operator pos:line="25" pos:column="46">-<pos:position pos:line="25" pos:column="47"/></operator><literal type="number" pos:line="25" pos:column="47">1<pos:position pos:line="25" pos:column="48"/></literal></expr>)<pos:position pos:line="25" pos:column="49"/></condition><then pos:line="25" pos:column="49"> <block pos:line="25" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">perror<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><literal type="string" pos:line="26" pos:column="16">"sbrk"<pos:position pos:line="26" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:define pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">define<pos:position pos:line="30" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="30" pos:column="9">BADSHMAT<pos:position pos:line="30" pos:column="17"/></name></cpp:macro>  <cpp:value pos:line="30" pos:column="19">((void *)(-1))<pos:position pos:line="30" pos:column="33"/></cpp:value></cpp:define>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><operator pos:line="31" pos:column="9">(<pos:position pos:line="31" pos:column="10"/></operator><name pos:line="31" pos:column="10">result<pos:position pos:line="31" pos:column="16"/></name> <operator pos:line="31" pos:column="17">=<pos:position pos:line="31" pos:column="18"/></operator> <call><name pos:line="31" pos:column="19">shmat<pos:position pos:line="31" pos:column="24"/></name><argument_list pos:line="31" pos:column="24">(<argument><expr><name pos:line="31" pos:column="25">shmid<pos:position pos:line="31" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="32">0<pos:position pos:line="31" pos:column="33"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="35">0<pos:position pos:line="31" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call><operator pos:line="31" pos:column="37">)<pos:position pos:line="31" pos:column="38"/></operator> <operator pos:line="31" pos:column="39">==<pos:position pos:line="31" pos:column="41"/></operator> <name pos:line="31" pos:column="42">BADSHMAT<pos:position pos:line="31" pos:column="50"/></name></expr>)<pos:position pos:line="31" pos:column="51"/></condition><then pos:line="31" pos:column="51"> <block pos:line="31" pos:column="52">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">perror<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><literal type="string" pos:line="32" pos:column="16">"shmat"<pos:position pos:line="32" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="34" pos:column="5">/*
     * We must avoid leaving segments in the kernel's
     * (small) tables.
     */</comment>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><call><name pos:line="38" pos:column="9">shmctl<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">shmid<pos:position pos:line="38" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="23">IPC_RMID<pos:position pos:line="38" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="33">NULL<pos:position pos:line="38" pos:column="37"/></name></expr></argument>)<pos:position pos:line="38" pos:column="38"/></argument_list></call> <operator pos:line="38" pos:column="39">!=<pos:position pos:line="38" pos:column="41"/></operator> <literal type="number" pos:line="38" pos:column="42">0<pos:position pos:line="38" pos:column="43"/></literal></expr>)<pos:position pos:line="38" pos:column="44"/></condition><then pos:line="38" pos:column="44"> <block pos:line="38" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">perror<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><literal type="string" pos:line="39" pos:column="16">"shmctl(IPC_RMID)"<pos:position pos:line="39" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">result<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">==<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">BADSHMAT<pos:position pos:line="41" pos:column="27"/></name></expr>)<pos:position pos:line="41" pos:column="28"/></condition><then pos:line="41" pos:column="28">  <comment type="block" pos:line="41" pos:column="30">/* now bailout */</comment>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="42" pos:column="9">exit<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><literal type="number" pos:line="42" pos:column="14">1<pos:position pos:line="42" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="17"/></expr_stmt></block></then></if>

<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">MOVEBREAK<pos:position pos:line="44" pos:column="17"/></name></cpp:ifdef>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">obrk<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">==<pos:position pos:line="45" pos:column="16"/></operator> <operator pos:line="45" pos:column="17">(<pos:position pos:line="45" pos:column="18"/></operator><name pos:line="45" pos:column="18">char<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">*<pos:position pos:line="45" pos:column="24"/></operator><operator pos:line="45" pos:column="24">)<pos:position pos:line="45" pos:column="25"/></operator> <operator pos:line="45" pos:column="26">-<pos:position pos:line="45" pos:column="27"/></operator><literal type="number" pos:line="45" pos:column="27">1<pos:position pos:line="45" pos:column="28"/></literal></expr>)<pos:position pos:line="45" pos:column="29"/></condition><then pos:line="45" pos:column="29">
        <block type="pseudo"><return pos:line="46" pos:column="9">return;<pos:position pos:line="46" pos:column="16"/></return></block></then></if>  <comment type="block" pos:line="46" pos:column="18">/* nothing else to do */</comment>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><call><name pos:line="47" pos:column="9">sbrk<pos:position pos:line="47" pos:column="13"/></name><argument_list pos:line="47" pos:column="13">(<argument><expr><operator pos:line="47" pos:column="14">-<pos:position pos:line="47" pos:column="15"/></operator><operator pos:line="47" pos:column="15">(<pos:position pos:line="47" pos:column="16"/></operator><name pos:line="47" pos:column="16">MOVEBREAK<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">)<pos:position pos:line="47" pos:column="26"/></operator></expr></argument>)<pos:position pos:line="47" pos:column="27"/></argument_list></call> <operator pos:line="47" pos:column="28">==<pos:position pos:line="47" pos:column="30"/></operator> <operator pos:line="47" pos:column="31">(<pos:position pos:line="47" pos:column="32"/></operator><name pos:line="47" pos:column="32">char<pos:position pos:line="47" pos:column="36"/></name> <operator pos:line="47" pos:column="37">*<pos:position pos:line="47" pos:column="38"/></operator><operator pos:line="47" pos:column="38">)<pos:position pos:line="47" pos:column="39"/></operator> <operator pos:line="47" pos:column="40">-<pos:position pos:line="47" pos:column="41"/></operator><literal type="number" pos:line="47" pos:column="41">1<pos:position pos:line="47" pos:column="42"/></literal></expr>)<pos:position pos:line="47" pos:column="43"/></condition><then pos:line="47" pos:column="43"> <block pos:line="47" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">perror<pos:position pos:line="48" pos:column="15"/></name><argument_list pos:line="48" pos:column="15">(<argument><expr><literal type="string" pos:line="48" pos:column="16">"sbrk 2"<pos:position pos:line="48" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>
<cpp:endif pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">endif<pos:position pos:line="50" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="51" pos:column="5">return <expr><name pos:line="51" pos:column="12">result<pos:position pos:line="51" pos:column="18"/></name></expr>;<pos:position pos:line="51" pos:column="19"/></return>
}<pos:position pos:line="52" pos:column="2"/></block></function></unit>
