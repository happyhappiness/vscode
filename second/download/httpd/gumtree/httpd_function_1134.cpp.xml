<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_1134.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">pcre<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type>
<name pos:line="2" pos:column="1">pcre_compile<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">char<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">pattern<pos:position pos:line="2" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="35">int<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">options<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name pos:line="2" pos:column="54">char<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier><modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">errorptr<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
  <parameter><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name> <modifier pos:line="3" pos:column="7">*<pos:position pos:line="3" pos:column="8"/></modifier></type><name pos:line="3" pos:column="8">erroroffset<pos:position pos:line="3" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="21">const<pos:position pos:line="3" pos:column="26"/></specifier> <name pos:line="3" pos:column="27">unsigned<pos:position pos:line="3" pos:column="35"/></name> <name pos:line="3" pos:column="36">char<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">tables<pos:position pos:line="3" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="49"/></parameter_list>
<block pos:line="4" pos:column="1">{
<decl_stmt><decl><type><name pos:line="5" pos:column="1">real_pcre<pos:position pos:line="5" pos:column="10"/></name> <modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">re<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">int<pos:position pos:line="6" pos:column="4"/></name></type> <name pos:line="6" pos:column="5">length<pos:position pos:line="6" pos:column="11"/></name> <init pos:line="6" pos:column="12">= <expr><literal type="number" pos:line="6" pos:column="14">3<pos:position pos:line="6" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>      <comment type="block" pos:line="6" pos:column="22">/* For initial BRA plus length */</comment>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">int<pos:position pos:line="7" pos:column="4"/></name></type> <name pos:line="7" pos:column="5">runlength<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">int<pos:position pos:line="8" pos:column="4"/></name></type> <name pos:line="8" pos:column="5">c<pos:position pos:line="8" pos:column="6"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="8">reqchar<pos:position pos:line="8" pos:column="15"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="17">countlits<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="9" pos:column="1">int<pos:position pos:line="9" pos:column="4"/></name></type> <name pos:line="9" pos:column="5">bracount<pos:position pos:line="9" pos:column="13"/></name> <init pos:line="9" pos:column="14">= <expr><literal type="number" pos:line="9" pos:column="16">0<pos:position pos:line="9" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="10" pos:column="1">int<pos:position pos:line="10" pos:column="4"/></name></type> <name pos:line="10" pos:column="5">top_backref<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="11" pos:column="1">int<pos:position pos:line="11" pos:column="4"/></name></type> <name pos:line="11" pos:column="5">branch_extra<pos:position pos:line="11" pos:column="17"/></name> <init pos:line="11" pos:column="18">= <expr><literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="12" pos:column="1">int<pos:position pos:line="12" pos:column="4"/></name></type> <name pos:line="12" pos:column="5">branch_newextra<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="13" pos:column="1">unsigned<pos:position pos:line="13" pos:column="9"/></name> <name pos:line="13" pos:column="10">int<pos:position pos:line="13" pos:column="13"/></name></type> <name pos:line="13" pos:column="14">brastackptr<pos:position pos:line="13" pos:column="25"/></name> <init pos:line="13" pos:column="26">= <expr><literal type="number" pos:line="13" pos:column="28">0<pos:position pos:line="13" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="30"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="14" pos:column="1">size_t<pos:position pos:line="14" pos:column="7"/></name></type> <name pos:line="14" pos:column="8">size<pos:position pos:line="14" pos:column="12"/></name></decl>;<pos:position pos:line="14" pos:column="13"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="15" pos:column="1">uschar<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">code<pos:position pos:line="15" pos:column="13"/></name></decl>;<pos:position pos:line="15" pos:column="14"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="16" pos:column="1">const<pos:position pos:line="16" pos:column="6"/></specifier> <name pos:line="16" pos:column="7">uschar<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">ptr<pos:position pos:line="16" pos:column="18"/></name></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="17" pos:column="1">compile_data<pos:position pos:line="17" pos:column="13"/></name></type> <name pos:line="17" pos:column="14">compile_block<pos:position pos:line="17" pos:column="27"/></name></decl>;<pos:position pos:line="17" pos:column="28"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="18" pos:column="1">int<pos:position pos:line="18" pos:column="4"/></name></type> <name><name pos:line="18" pos:column="5">brastack<pos:position pos:line="18" pos:column="13"/></name><index pos:line="18" pos:column="13">[<expr><name pos:line="18" pos:column="14">BRASTACK_SIZE<pos:position pos:line="18" pos:column="27"/></name></expr>]<pos:position pos:line="18" pos:column="28"/></index></name></decl>;<pos:position pos:line="18" pos:column="29"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="19" pos:column="1">uschar<pos:position pos:line="19" pos:column="7"/></name></type> <name><name pos:line="19" pos:column="8">bralenstack<pos:position pos:line="19" pos:column="19"/></name><index pos:line="19" pos:column="19">[<expr><name pos:line="19" pos:column="20">BRASTACK_SIZE<pos:position pos:line="19" pos:column="33"/></name></expr>]<pos:position pos:line="19" pos:column="34"/></index></name></decl>;<pos:position pos:line="19" pos:column="35"/></decl_stmt>

<cpp:ifdef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifdef<pos:position pos:line="21" pos:column="7"/></cpp:directive> <name pos:line="21" pos:column="8">DEBUG<pos:position pos:line="21" pos:column="13"/></name></cpp:ifdef>
<decl_stmt><decl><type><name pos:line="22" pos:column="1">uschar<pos:position pos:line="22" pos:column="7"/></name> <modifier pos:line="22" pos:column="8">*<pos:position pos:line="22" pos:column="9"/></modifier></type><name pos:line="22" pos:column="9">code_base<pos:position pos:line="22" pos:column="18"/></name></decl>, <modifier pos:line="22" pos:column="20">*<pos:position pos:line="22" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="22" pos:column="21">code_end<pos:position pos:line="22" pos:column="29"/></name></decl>;<pos:position pos:line="22" pos:column="30"/></decl_stmt>
<cpp:endif pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">endif<pos:position pos:line="23" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="25" pos:column="1">/* Can't support UTF8 unless PCRE has been compiled to include the code. */</comment>

<cpp:ifndef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifndef<pos:position pos:line="27" pos:column="8"/></cpp:directive> <name pos:line="27" pos:column="9">SUPPORT_UTF8<pos:position pos:line="27" pos:column="21"/></name></cpp:ifndef>
<if pos:line="28" pos:column="1">if <condition pos:line="28" pos:column="4">(<expr><operator pos:line="28" pos:column="5">(<pos:position pos:line="28" pos:column="6"/></operator><name pos:line="28" pos:column="6">options<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">&amp;<pos:position pos:line="28" pos:column="19"/></operator> <name pos:line="28" pos:column="16">PCRE_UTF8<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">)<pos:position pos:line="28" pos:column="26"/></operator> <operator pos:line="28" pos:column="27">!=<pos:position pos:line="28" pos:column="29"/></operator> <literal type="number" pos:line="28" pos:column="30">0<pos:position pos:line="28" pos:column="31"/></literal></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32">
  <block pos:line="29" pos:column="3">{
  <expr_stmt><expr><operator pos:line="30" pos:column="3">*<pos:position pos:line="30" pos:column="4"/></operator><name pos:line="30" pos:column="4">errorptr<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <name pos:line="30" pos:column="15">ERR32<pos:position pos:line="30" pos:column="20"/></name></expr>;<pos:position pos:line="30" pos:column="21"/></expr_stmt>
  <return pos:line="31" pos:column="3">return <expr><name pos:line="31" pos:column="10">NULL<pos:position pos:line="31" pos:column="14"/></name></expr>;<pos:position pos:line="31" pos:column="15"/></return>
  }<pos:position pos:line="32" pos:column="4"/></block></then></if>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="35" pos:column="1">/* We can't pass back an error message if errorptr is NULL; I guess the best we
can do is just return NULL. */</comment>

<if pos:line="38" pos:column="1">if <condition pos:line="38" pos:column="4">(<expr><name pos:line="38" pos:column="5">errorptr<pos:position pos:line="38" pos:column="13"/></name> <operator pos:line="38" pos:column="14">==<pos:position pos:line="38" pos:column="16"/></operator> <name pos:line="38" pos:column="17">NULL<pos:position pos:line="38" pos:column="21"/></name></expr>)<pos:position pos:line="38" pos:column="22"/></condition><then pos:line="38" pos:column="22"> <block type="pseudo"><return pos:line="38" pos:column="23">return <expr><name pos:line="38" pos:column="30">NULL<pos:position pos:line="38" pos:column="34"/></name></expr>;<pos:position pos:line="38" pos:column="35"/></return></block></then></if>
<expr_stmt><expr><operator pos:line="39" pos:column="1">*<pos:position pos:line="39" pos:column="2"/></operator><name pos:line="39" pos:column="2">errorptr<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <name pos:line="39" pos:column="13">NULL<pos:position pos:line="39" pos:column="17"/></name></expr>;<pos:position pos:line="39" pos:column="18"/></expr_stmt>

<comment type="block" pos:line="41" pos:column="1">/* However, we can give a message for this error */</comment>

<if pos:line="43" pos:column="1">if <condition pos:line="43" pos:column="4">(<expr><name pos:line="43" pos:column="5">erroroffset<pos:position pos:line="43" pos:column="16"/></name> <operator pos:line="43" pos:column="17">==<pos:position pos:line="43" pos:column="19"/></operator> <name pos:line="43" pos:column="20">NULL<pos:position pos:line="43" pos:column="24"/></name></expr>)<pos:position pos:line="43" pos:column="25"/></condition><then pos:line="43" pos:column="25">
  <block pos:line="44" pos:column="3">{
  <expr_stmt><expr><operator pos:line="45" pos:column="3">*<pos:position pos:line="45" pos:column="4"/></operator><name pos:line="45" pos:column="4">errorptr<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <name pos:line="45" pos:column="15">ERR16<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></expr_stmt>
  <return pos:line="46" pos:column="3">return <expr><name pos:line="46" pos:column="10">NULL<pos:position pos:line="46" pos:column="14"/></name></expr>;<pos:position pos:line="46" pos:column="15"/></return>
  }<pos:position pos:line="47" pos:column="4"/></block></then></if>
<expr_stmt><expr><operator pos:line="48" pos:column="1">*<pos:position pos:line="48" pos:column="2"/></operator><name pos:line="48" pos:column="2">erroroffset<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <literal type="number" pos:line="48" pos:column="16">0<pos:position pos:line="48" pos:column="17"/></literal></expr>;<pos:position pos:line="48" pos:column="18"/></expr_stmt>

<if pos:line="50" pos:column="1">if <condition pos:line="50" pos:column="4">(<expr><operator pos:line="50" pos:column="5">(<pos:position pos:line="50" pos:column="6"/></operator><name pos:line="50" pos:column="6">options<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">&amp;<pos:position pos:line="50" pos:column="19"/></operator> <operator pos:line="50" pos:column="16">~<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">PUBLIC_OPTIONS<pos:position pos:line="50" pos:column="31"/></name><operator pos:line="50" pos:column="31">)<pos:position pos:line="50" pos:column="32"/></operator> <operator pos:line="50" pos:column="33">!=<pos:position pos:line="50" pos:column="35"/></operator> <literal type="number" pos:line="50" pos:column="36">0<pos:position pos:line="50" pos:column="37"/></literal></expr>)<pos:position pos:line="50" pos:column="38"/></condition><then pos:line="50" pos:column="38">
  <block pos:line="51" pos:column="3">{
  <expr_stmt><expr><operator pos:line="52" pos:column="3">*<pos:position pos:line="52" pos:column="4"/></operator><name pos:line="52" pos:column="4">errorptr<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <name pos:line="52" pos:column="15">ERR17<pos:position pos:line="52" pos:column="20"/></name></expr>;<pos:position pos:line="52" pos:column="21"/></expr_stmt>
  <return pos:line="53" pos:column="3">return <expr><name pos:line="53" pos:column="10">NULL<pos:position pos:line="53" pos:column="14"/></name></expr>;<pos:position pos:line="53" pos:column="15"/></return>
  }<pos:position pos:line="54" pos:column="4"/></block></then></if>

<comment type="block" pos:line="56" pos:column="1">/* Set up pointers to the individual character tables */</comment>

<if pos:line="58" pos:column="1">if <condition pos:line="58" pos:column="4">(<expr><name pos:line="58" pos:column="5">tables<pos:position pos:line="58" pos:column="11"/></name> <operator pos:line="58" pos:column="12">==<pos:position pos:line="58" pos:column="14"/></operator> <name pos:line="58" pos:column="15">NULL<pos:position pos:line="58" pos:column="19"/></name></expr>)<pos:position pos:line="58" pos:column="20"/></condition><then pos:line="58" pos:column="20"> <block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="21">tables<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">=<pos:position pos:line="58" pos:column="29"/></operator> <name pos:line="58" pos:column="30">pcre_default_tables<pos:position pos:line="58" pos:column="49"/></name></expr>;<pos:position pos:line="58" pos:column="50"/></expr_stmt></block></then></if>
<expr_stmt><expr><name><name pos:line="59" pos:column="1">compile_block<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">.<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="15">lcc<pos:position pos:line="59" pos:column="18"/></name></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <name pos:line="59" pos:column="21">tables<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">+<pos:position pos:line="59" pos:column="29"/></operator> <name pos:line="59" pos:column="30">lcc_offset<pos:position pos:line="59" pos:column="40"/></name></expr>;<pos:position pos:line="59" pos:column="41"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="60" pos:column="1">compile_block<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">.<pos:position pos:line="60" pos:column="15"/></operator><name pos:line="60" pos:column="15">fcc<pos:position pos:line="60" pos:column="18"/></name></name> <operator pos:line="60" pos:column="19">=<pos:position pos:line="60" pos:column="20"/></operator> <name pos:line="60" pos:column="21">tables<pos:position pos:line="60" pos:column="27"/></name> <operator pos:line="60" pos:column="28">+<pos:position pos:line="60" pos:column="29"/></operator> <name pos:line="60" pos:column="30">fcc_offset<pos:position pos:line="60" pos:column="40"/></name></expr>;<pos:position pos:line="60" pos:column="41"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="61" pos:column="1">compile_block<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">.<pos:position pos:line="61" pos:column="15"/></operator><name pos:line="61" pos:column="15">cbits<pos:position pos:line="61" pos:column="20"/></name></name> <operator pos:line="61" pos:column="21">=<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="23">tables<pos:position pos:line="61" pos:column="29"/></name> <operator pos:line="61" pos:column="30">+<pos:position pos:line="61" pos:column="31"/></operator> <name pos:line="61" pos:column="32">cbits_offset<pos:position pos:line="61" pos:column="44"/></name></expr>;<pos:position pos:line="61" pos:column="45"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="62" pos:column="1">compile_block<pos:position pos:line="62" pos:column="14"/></name><operator pos:line="62" pos:column="14">.<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="15">ctypes<pos:position pos:line="62" pos:column="21"/></name></name> <operator pos:line="62" pos:column="22">=<pos:position pos:line="62" pos:column="23"/></operator> <name pos:line="62" pos:column="24">tables<pos:position pos:line="62" pos:column="30"/></name> <operator pos:line="62" pos:column="31">+<pos:position pos:line="62" pos:column="32"/></operator> <name pos:line="62" pos:column="33">ctypes_offset<pos:position pos:line="62" pos:column="46"/></name></expr>;<pos:position pos:line="62" pos:column="47"/></expr_stmt>

<comment type="block" pos:line="64" pos:column="1">/* Reflect pattern for debugging output */</comment>

<expr_stmt><expr><call><name pos:line="66" pos:column="1">DPRINTF<pos:position pos:line="66" pos:column="8"/></name><argument_list pos:line="66" pos:column="8">(<argument><expr><operator pos:line="66" pos:column="9">(<pos:position pos:line="66" pos:column="10"/></operator><literal type="string" pos:line="66" pos:column="10">"------------------------------------------------------------------\n"<pos:position pos:line="66" pos:column="80"/></literal><operator pos:line="66" pos:column="80">)<pos:position pos:line="66" pos:column="81"/></operator></expr></argument>)<pos:position pos:line="66" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="83"/></expr_stmt>
<expr_stmt><expr><call><name pos:line="67" pos:column="1">DPRINTF<pos:position pos:line="67" pos:column="8"/></name><argument_list pos:line="67" pos:column="8">(<argument><expr><operator pos:line="67" pos:column="9">(<pos:position pos:line="67" pos:column="10"/></operator><literal type="string" pos:line="67" pos:column="10">"%s\n"<pos:position pos:line="67" pos:column="16"/></literal><operator pos:line="67" pos:column="16">,<pos:position pos:line="67" pos:column="17"/></operator> <name pos:line="67" pos:column="18">pattern<pos:position pos:line="67" pos:column="25"/></name><operator pos:line="67" pos:column="25">)<pos:position pos:line="67" pos:column="26"/></operator></expr></argument>)<pos:position pos:line="67" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="28"/></expr_stmt>

<comment type="block" pos:line="69" pos:column="1">/* The first thing to do is to make a pass over the pattern to compute the
amount of store required to hold the compiled code. This does not have to be
perfect as long as errors are overestimates. At the same time we can detect any
internal flag settings. Make an attempt to correct for any counted white space
if an "extended" flag setting appears late in the pattern. We can't be so
clever for #-comments. */</comment>

<expr_stmt><expr><name pos:line="76" pos:column="1">ptr<pos:position pos:line="76" pos:column="4"/></name> <operator pos:line="76" pos:column="5">=<pos:position pos:line="76" pos:column="6"/></operator> <operator pos:line="76" pos:column="7">(<pos:position pos:line="76" pos:column="8"/></operator><specifier pos:line="76" pos:column="8">const<pos:position pos:line="76" pos:column="13"/></specifier> <name pos:line="76" pos:column="14">uschar<pos:position pos:line="76" pos:column="20"/></name> <operator pos:line="76" pos:column="21">*<pos:position pos:line="76" pos:column="22"/></operator><operator pos:line="76" pos:column="22">)<pos:position pos:line="76" pos:column="23"/></operator><operator pos:line="76" pos:column="23">(<pos:position pos:line="76" pos:column="24"/></operator><name pos:line="76" pos:column="24">pattern<pos:position pos:line="76" pos:column="31"/></name> <operator pos:line="76" pos:column="32">-<pos:position pos:line="76" pos:column="33"/></operator> <literal type="number" pos:line="76" pos:column="34">1<pos:position pos:line="76" pos:column="35"/></literal><operator pos:line="76" pos:column="35">)<pos:position pos:line="76" pos:column="36"/></operator></expr>;<pos:position pos:line="76" pos:column="37"/></expr_stmt>
<while pos:line="77" pos:column="1">while <condition pos:line="77" pos:column="7">(<expr><operator pos:line="77" pos:column="8">(<pos:position pos:line="77" pos:column="9"/></operator><name pos:line="77" pos:column="9">c<pos:position pos:line="77" pos:column="10"/></name> <operator pos:line="77" pos:column="11">=<pos:position pos:line="77" pos:column="12"/></operator> <operator pos:line="77" pos:column="13">*<pos:position pos:line="77" pos:column="14"/></operator><operator pos:line="77" pos:column="14">(<pos:position pos:line="77" pos:column="15"/></operator><operator pos:line="77" pos:column="15">++<pos:position pos:line="77" pos:column="17"/></operator><name pos:line="77" pos:column="17">ptr<pos:position pos:line="77" pos:column="20"/></name><operator pos:line="77" pos:column="20">)<pos:position pos:line="77" pos:column="21"/></operator><operator pos:line="77" pos:column="21">)<pos:position pos:line="77" pos:column="22"/></operator> <operator pos:line="77" pos:column="23">!=<pos:position pos:line="77" pos:column="25"/></operator> <literal type="number" pos:line="77" pos:column="26">0<pos:position pos:line="77" pos:column="27"/></literal></expr>)<pos:position pos:line="77" pos:column="28"/></condition>
  <block pos:line="78" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="79" pos:column="3">int<pos:position pos:line="79" pos:column="6"/></name></type> <name pos:line="79" pos:column="7">min<pos:position pos:line="79" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="79" pos:column="12">max<pos:position pos:line="79" pos:column="15"/></name></decl>;<pos:position pos:line="79" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="80" pos:column="3">int<pos:position pos:line="80" pos:column="6"/></name></type> <name pos:line="80" pos:column="7">class_charcount<pos:position pos:line="80" pos:column="22"/></name></decl>;<pos:position pos:line="80" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="81" pos:column="3">int<pos:position pos:line="81" pos:column="6"/></name></type> <name pos:line="81" pos:column="7">bracket_length<pos:position pos:line="81" pos:column="21"/></name></decl>;<pos:position pos:line="81" pos:column="22"/></decl_stmt>

  <if pos:line="83" pos:column="3">if <condition pos:line="83" pos:column="6">(<expr><operator pos:line="83" pos:column="7">(<pos:position pos:line="83" pos:column="8"/></operator><name pos:line="83" pos:column="8">options<pos:position pos:line="83" pos:column="15"/></name> <operator pos:line="83" pos:column="16">&amp;<pos:position pos:line="83" pos:column="21"/></operator> <name pos:line="83" pos:column="18">PCRE_EXTENDED<pos:position pos:line="83" pos:column="31"/></name><operator pos:line="83" pos:column="31">)<pos:position pos:line="83" pos:column="32"/></operator> <operator pos:line="83" pos:column="33">!=<pos:position pos:line="83" pos:column="35"/></operator> <literal type="number" pos:line="83" pos:column="36">0<pos:position pos:line="83" pos:column="37"/></literal></expr>)<pos:position pos:line="83" pos:column="38"/></condition><then pos:line="83" pos:column="38">
    <block pos:line="84" pos:column="5">{
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><operator pos:line="85" pos:column="9">(<pos:position pos:line="85" pos:column="10"/></operator><name><name pos:line="85" pos:column="10">compile_block<pos:position pos:line="85" pos:column="23"/></name><operator pos:line="85" pos:column="23">.<pos:position pos:line="85" pos:column="24"/></operator><name pos:line="85" pos:column="24">ctypes<pos:position pos:line="85" pos:column="30"/></name><index pos:line="85" pos:column="30">[<expr><name pos:line="85" pos:column="31">c<pos:position pos:line="85" pos:column="32"/></name></expr>]<pos:position pos:line="85" pos:column="33"/></index></name> <operator pos:line="85" pos:column="34">&amp;<pos:position pos:line="85" pos:column="39"/></operator> <name pos:line="85" pos:column="36">ctype_space<pos:position pos:line="85" pos:column="47"/></name><operator pos:line="85" pos:column="47">)<pos:position pos:line="85" pos:column="48"/></operator> <operator pos:line="85" pos:column="49">!=<pos:position pos:line="85" pos:column="51"/></operator> <literal type="number" pos:line="85" pos:column="52">0<pos:position pos:line="85" pos:column="53"/></literal></expr>)<pos:position pos:line="85" pos:column="54"/></condition><then pos:line="85" pos:column="54"> <block type="pseudo"><continue pos:line="85" pos:column="55">continue;<pos:position pos:line="85" pos:column="64"/></continue></block></then></if>
    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><name pos:line="86" pos:column="9">c<pos:position pos:line="86" pos:column="10"/></name> <operator pos:line="86" pos:column="11">==<pos:position pos:line="86" pos:column="13"/></operator> <literal type="char" pos:line="86" pos:column="14">'#'<pos:position pos:line="86" pos:column="17"/></literal></expr>)<pos:position pos:line="86" pos:column="18"/></condition><then pos:line="86" pos:column="18">
      <block pos:line="87" pos:column="7">{
      <comment type="block" pos:line="88" pos:column="7">/* The space before the ; is to avoid a warning on a silly compiler
      on the Macintosh. */</comment>
      <while pos:line="90" pos:column="7">while <condition pos:line="90" pos:column="13">(<expr><operator pos:line="90" pos:column="14">(<pos:position pos:line="90" pos:column="15"/></operator><name pos:line="90" pos:column="15">c<pos:position pos:line="90" pos:column="16"/></name> <operator pos:line="90" pos:column="17">=<pos:position pos:line="90" pos:column="18"/></operator> <operator pos:line="90" pos:column="19">*<pos:position pos:line="90" pos:column="20"/></operator><operator pos:line="90" pos:column="20">(<pos:position pos:line="90" pos:column="21"/></operator><operator pos:line="90" pos:column="21">++<pos:position pos:line="90" pos:column="23"/></operator><name pos:line="90" pos:column="23">ptr<pos:position pos:line="90" pos:column="26"/></name><operator pos:line="90" pos:column="26">)<pos:position pos:line="90" pos:column="27"/></operator><operator pos:line="90" pos:column="27">)<pos:position pos:line="90" pos:column="28"/></operator> <operator pos:line="90" pos:column="29">!=<pos:position pos:line="90" pos:column="31"/></operator> <literal type="number" pos:line="90" pos:column="32">0<pos:position pos:line="90" pos:column="33"/></literal> <operator pos:line="90" pos:column="34">&amp;&amp;<pos:position pos:line="90" pos:column="44"/></operator> <name pos:line="90" pos:column="37">c<pos:position pos:line="90" pos:column="38"/></name> <operator pos:line="90" pos:column="39">!=<pos:position pos:line="90" pos:column="41"/></operator> <name pos:line="90" pos:column="42">NEWLINE<pos:position pos:line="90" pos:column="49"/></name></expr>)<pos:position pos:line="90" pos:column="50"/></condition> <block type="pseudo"><empty_stmt pos:line="90" pos:column="51">;<pos:position pos:line="90" pos:column="52"/></empty_stmt></block></while>
      <continue pos:line="91" pos:column="7">continue;<pos:position pos:line="91" pos:column="16"/></continue>
      }<pos:position pos:line="92" pos:column="8"/></block></then></if>
    }<pos:position pos:line="93" pos:column="6"/></block></then></if>

  <switch pos:line="95" pos:column="3">switch<condition pos:line="95" pos:column="9">(<expr><name pos:line="95" pos:column="10">c<pos:position pos:line="95" pos:column="11"/></name></expr>)<pos:position pos:line="95" pos:column="12"/></condition>
    <block pos:line="96" pos:column="5">{
    <comment type="block" pos:line="97" pos:column="5">/* A backslashed item may be an escaped "normal" character or a
    character type. For a "normal" character, put the pointers and
    character back so that tests for whitespace etc. in the input
    are done correctly. */</comment>

    <case pos:line="102" pos:column="5">case <expr><literal type="char" pos:line="102" pos:column="10">'\\'<pos:position pos:line="102" pos:column="14"/></literal></expr>:<pos:position pos:line="102" pos:column="15"/></case>
      <block pos:line="103" pos:column="7">{
      <decl_stmt><decl><type><specifier pos:line="104" pos:column="7">const<pos:position pos:line="104" pos:column="12"/></specifier> <name pos:line="104" pos:column="13">uschar<pos:position pos:line="104" pos:column="19"/></name> <modifier pos:line="104" pos:column="20">*<pos:position pos:line="104" pos:column="21"/></modifier></type><name pos:line="104" pos:column="21">save_ptr<pos:position pos:line="104" pos:column="29"/></name> <init pos:line="104" pos:column="30">= <expr><name pos:line="104" pos:column="32">ptr<pos:position pos:line="104" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="104" pos:column="36"/></decl_stmt>
      <expr_stmt><expr><name pos:line="105" pos:column="7">c<pos:position pos:line="105" pos:column="8"/></name> <operator pos:line="105" pos:column="9">=<pos:position pos:line="105" pos:column="10"/></operator> <call><name pos:line="105" pos:column="11">check_escape<pos:position pos:line="105" pos:column="23"/></name><argument_list pos:line="105" pos:column="23">(<argument><expr><operator pos:line="105" pos:column="24">&amp;<pos:position pos:line="105" pos:column="29"/></operator><name pos:line="105" pos:column="25">ptr<pos:position pos:line="105" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="30">errorptr<pos:position pos:line="105" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="40">bracount<pos:position pos:line="105" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="50">options<pos:position pos:line="105" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="59">FALSE<pos:position pos:line="105" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="105" pos:column="66">&amp;<pos:position pos:line="105" pos:column="71"/></operator><name pos:line="105" pos:column="67">compile_block<pos:position pos:line="105" pos:column="80"/></name></expr></argument>)<pos:position pos:line="105" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="82"/></expr_stmt>
      <if pos:line="106" pos:column="7">if <condition pos:line="106" pos:column="10">(<expr><operator pos:line="106" pos:column="11">*<pos:position pos:line="106" pos:column="12"/></operator><name pos:line="106" pos:column="12">errorptr<pos:position pos:line="106" pos:column="20"/></name> <operator pos:line="106" pos:column="21">!=<pos:position pos:line="106" pos:column="23"/></operator> <name pos:line="106" pos:column="24">NULL<pos:position pos:line="106" pos:column="28"/></name></expr>)<pos:position pos:line="106" pos:column="29"/></condition><then pos:line="106" pos:column="29"> <block type="pseudo"><goto pos:line="106" pos:column="30">goto <name pos:line="106" pos:column="35">PCRE_ERROR_RETURN<pos:position pos:line="106" pos:column="52"/></name>;<pos:position pos:line="106" pos:column="53"/></goto></block></then></if>
      <if pos:line="107" pos:column="7">if <condition pos:line="107" pos:column="10">(<expr><name pos:line="107" pos:column="11">c<pos:position pos:line="107" pos:column="12"/></name> <operator pos:line="107" pos:column="13">&gt;=<pos:position pos:line="107" pos:column="18"/></operator> <literal type="number" pos:line="107" pos:column="16">0<pos:position pos:line="107" pos:column="17"/></literal></expr>)<pos:position pos:line="107" pos:column="18"/></condition><then pos:line="107" pos:column="18">
        <block pos:line="108" pos:column="9">{
        <expr_stmt><expr><name pos:line="109" pos:column="9">ptr<pos:position pos:line="109" pos:column="12"/></name> <operator pos:line="109" pos:column="13">=<pos:position pos:line="109" pos:column="14"/></operator> <name pos:line="109" pos:column="15">save_ptr<pos:position pos:line="109" pos:column="23"/></name></expr>;<pos:position pos:line="109" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="110" pos:column="9">c<pos:position pos:line="110" pos:column="10"/></name> <operator pos:line="110" pos:column="11">=<pos:position pos:line="110" pos:column="12"/></operator> <literal type="char" pos:line="110" pos:column="13">'\\'<pos:position pos:line="110" pos:column="17"/></literal></expr>;<pos:position pos:line="110" pos:column="18"/></expr_stmt>
        <goto pos:line="111" pos:column="9">goto <name pos:line="111" pos:column="14">NORMAL_CHAR<pos:position pos:line="111" pos:column="25"/></name>;<pos:position pos:line="111" pos:column="26"/></goto>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if>
      }<pos:position pos:line="113" pos:column="8"/></block>
    <expr_stmt><expr><name pos:line="114" pos:column="5">length<pos:position pos:line="114" pos:column="11"/></name><operator pos:line="114" pos:column="11">++<pos:position pos:line="114" pos:column="13"/></operator></expr>;<pos:position pos:line="114" pos:column="14"/></expr_stmt>

    <comment type="block" pos:line="116" pos:column="5">/* A back reference needs an additional 2 bytes, plus either one or 5
    bytes for a repeat. We also need to keep the value of the highest
    back reference. */</comment>

    <if pos:line="120" pos:column="5">if <condition pos:line="120" pos:column="8">(<expr><name pos:line="120" pos:column="9">c<pos:position pos:line="120" pos:column="10"/></name> <operator pos:line="120" pos:column="11">&lt;=<pos:position pos:line="120" pos:column="16"/></operator> <operator pos:line="120" pos:column="14">-<pos:position pos:line="120" pos:column="15"/></operator><name pos:line="120" pos:column="15">ESC_REF<pos:position pos:line="120" pos:column="22"/></name></expr>)<pos:position pos:line="120" pos:column="23"/></condition><then pos:line="120" pos:column="23">
      <block pos:line="121" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="122" pos:column="7">int<pos:position pos:line="122" pos:column="10"/></name></type> <name pos:line="122" pos:column="11">refnum<pos:position pos:line="122" pos:column="17"/></name> <init pos:line="122" pos:column="18">= <expr><operator pos:line="122" pos:column="20">-<pos:position pos:line="122" pos:column="21"/></operator><name pos:line="122" pos:column="21">c<pos:position pos:line="122" pos:column="22"/></name> <operator pos:line="122" pos:column="23">-<pos:position pos:line="122" pos:column="24"/></operator> <name pos:line="122" pos:column="25">ESC_REF<pos:position pos:line="122" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="122" pos:column="33"/></decl_stmt>
      <if pos:line="123" pos:column="7">if <condition pos:line="123" pos:column="10">(<expr><name pos:line="123" pos:column="11">refnum<pos:position pos:line="123" pos:column="17"/></name> <operator pos:line="123" pos:column="18">&gt;<pos:position pos:line="123" pos:column="22"/></operator> <name pos:line="123" pos:column="20">top_backref<pos:position pos:line="123" pos:column="31"/></name></expr>)<pos:position pos:line="123" pos:column="32"/></condition><then pos:line="123" pos:column="32"> <block type="pseudo"><expr_stmt><expr><name pos:line="123" pos:column="33">top_backref<pos:position pos:line="123" pos:column="44"/></name> <operator pos:line="123" pos:column="45">=<pos:position pos:line="123" pos:column="46"/></operator> <name pos:line="123" pos:column="47">refnum<pos:position pos:line="123" pos:column="53"/></name></expr>;<pos:position pos:line="123" pos:column="54"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="124" pos:column="7">length<pos:position pos:line="124" pos:column="13"/></name> <operator pos:line="124" pos:column="14">+=<pos:position pos:line="124" pos:column="16"/></operator> <literal type="number" pos:line="124" pos:column="17">2<pos:position pos:line="124" pos:column="18"/></literal></expr>;<pos:position pos:line="124" pos:column="19"/></expr_stmt>   <comment type="block" pos:line="124" pos:column="22">/* For single back reference */</comment>
      <if pos:line="125" pos:column="7">if <condition pos:line="125" pos:column="10">(<expr><name><name pos:line="125" pos:column="11">ptr<pos:position pos:line="125" pos:column="14"/></name><index pos:line="125" pos:column="14">[<expr><literal type="number" pos:line="125" pos:column="15">1<pos:position pos:line="125" pos:column="16"/></literal></expr>]<pos:position pos:line="125" pos:column="17"/></index></name> <operator pos:line="125" pos:column="18">==<pos:position pos:line="125" pos:column="20"/></operator> <literal type="char" pos:line="125" pos:column="21">'{'<pos:position pos:line="125" pos:column="24"/></literal> <operator pos:line="125" pos:column="25">&amp;&amp;<pos:position pos:line="125" pos:column="35"/></operator> <call><name pos:line="125" pos:column="28">is_counted_repeat<pos:position pos:line="125" pos:column="45"/></name><argument_list pos:line="125" pos:column="45">(<argument><expr><name pos:line="125" pos:column="46">ptr<pos:position pos:line="125" pos:column="49"/></name><operator pos:line="125" pos:column="49">+<pos:position pos:line="125" pos:column="50"/></operator><literal type="number" pos:line="125" pos:column="50">2<pos:position pos:line="125" pos:column="51"/></literal></expr></argument>, <argument><expr><operator pos:line="125" pos:column="53">&amp;<pos:position pos:line="125" pos:column="58"/></operator><name pos:line="125" pos:column="54">compile_block<pos:position pos:line="125" pos:column="67"/></name></expr></argument>)<pos:position pos:line="125" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="69"/></condition><then pos:line="125" pos:column="69">
        <block pos:line="126" pos:column="9">{
        <expr_stmt><expr><name pos:line="127" pos:column="9">ptr<pos:position pos:line="127" pos:column="12"/></name> <operator pos:line="127" pos:column="13">=<pos:position pos:line="127" pos:column="14"/></operator> <call><name pos:line="127" pos:column="15">read_repeat_counts<pos:position pos:line="127" pos:column="33"/></name><argument_list pos:line="127" pos:column="33">(<argument><expr><name pos:line="127" pos:column="34">ptr<pos:position pos:line="127" pos:column="37"/></name><operator pos:line="127" pos:column="37">+<pos:position pos:line="127" pos:column="38"/></operator><literal type="number" pos:line="127" pos:column="38">2<pos:position pos:line="127" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="127" pos:column="41">&amp;<pos:position pos:line="127" pos:column="46"/></operator><name pos:line="127" pos:column="42">min<pos:position pos:line="127" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="47">&amp;<pos:position pos:line="127" pos:column="52"/></operator><name pos:line="127" pos:column="48">max<pos:position pos:line="127" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="53">errorptr<pos:position pos:line="127" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="63">&amp;<pos:position pos:line="127" pos:column="68"/></operator><name pos:line="127" pos:column="64">compile_block<pos:position pos:line="127" pos:column="77"/></name></expr></argument>)<pos:position pos:line="127" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="79"/></expr_stmt>
        <if pos:line="128" pos:column="9">if <condition pos:line="128" pos:column="12">(<expr><operator pos:line="128" pos:column="13">*<pos:position pos:line="128" pos:column="14"/></operator><name pos:line="128" pos:column="14">errorptr<pos:position pos:line="128" pos:column="22"/></name> <operator pos:line="128" pos:column="23">!=<pos:position pos:line="128" pos:column="25"/></operator> <name pos:line="128" pos:column="26">NULL<pos:position pos:line="128" pos:column="30"/></name></expr>)<pos:position pos:line="128" pos:column="31"/></condition><then pos:line="128" pos:column="31"> <block type="pseudo"><goto pos:line="128" pos:column="32">goto <name pos:line="128" pos:column="37">PCRE_ERROR_RETURN<pos:position pos:line="128" pos:column="54"/></name>;<pos:position pos:line="128" pos:column="55"/></goto></block></then></if>
        <if pos:line="129" pos:column="9">if <condition pos:line="129" pos:column="12">(<expr><operator pos:line="129" pos:column="13">(<pos:position pos:line="129" pos:column="14"/></operator><name pos:line="129" pos:column="14">min<pos:position pos:line="129" pos:column="17"/></name> <operator pos:line="129" pos:column="18">==<pos:position pos:line="129" pos:column="20"/></operator> <literal type="number" pos:line="129" pos:column="21">0<pos:position pos:line="129" pos:column="22"/></literal> <operator pos:line="129" pos:column="23">&amp;&amp;<pos:position pos:line="129" pos:column="33"/></operator> <operator pos:line="129" pos:column="26">(<pos:position pos:line="129" pos:column="27"/></operator><name pos:line="129" pos:column="27">max<pos:position pos:line="129" pos:column="30"/></name> <operator pos:line="129" pos:column="31">==<pos:position pos:line="129" pos:column="33"/></operator> <literal type="number" pos:line="129" pos:column="34">1<pos:position pos:line="129" pos:column="35"/></literal> <operator pos:line="129" pos:column="36">||<pos:position pos:line="129" pos:column="38"/></operator> <name pos:line="129" pos:column="39">max<pos:position pos:line="129" pos:column="42"/></name> <operator pos:line="129" pos:column="43">==<pos:position pos:line="129" pos:column="45"/></operator> <operator pos:line="129" pos:column="46">-<pos:position pos:line="129" pos:column="47"/></operator><literal type="number" pos:line="129" pos:column="47">1<pos:position pos:line="129" pos:column="48"/></literal><operator pos:line="129" pos:column="48">)<pos:position pos:line="129" pos:column="49"/></operator><operator pos:line="129" pos:column="49">)<pos:position pos:line="129" pos:column="50"/></operator> <operator pos:line="129" pos:column="51">||<pos:position pos:line="129" pos:column="53"/></operator>
          <operator pos:line="130" pos:column="11">(<pos:position pos:line="130" pos:column="12"/></operator><name pos:line="130" pos:column="12">min<pos:position pos:line="130" pos:column="15"/></name> <operator pos:line="130" pos:column="16">==<pos:position pos:line="130" pos:column="18"/></operator> <literal type="number" pos:line="130" pos:column="19">1<pos:position pos:line="130" pos:column="20"/></literal> <operator pos:line="130" pos:column="21">&amp;&amp;<pos:position pos:line="130" pos:column="31"/></operator> <name pos:line="130" pos:column="24">max<pos:position pos:line="130" pos:column="27"/></name> <operator pos:line="130" pos:column="28">==<pos:position pos:line="130" pos:column="30"/></operator> <operator pos:line="130" pos:column="31">-<pos:position pos:line="130" pos:column="32"/></operator><literal type="number" pos:line="130" pos:column="32">1<pos:position pos:line="130" pos:column="33"/></literal><operator pos:line="130" pos:column="33">)<pos:position pos:line="130" pos:column="34"/></operator></expr>)<pos:position pos:line="130" pos:column="35"/></condition><then pos:line="130" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><name pos:line="131" pos:column="13">length<pos:position pos:line="131" pos:column="19"/></name><operator pos:line="131" pos:column="19">++<pos:position pos:line="131" pos:column="21"/></operator></expr>;<pos:position pos:line="131" pos:column="22"/></expr_stmt></block></then>
        <else pos:line="132" pos:column="9">else <block type="pseudo"><expr_stmt><expr><name pos:line="132" pos:column="14">length<pos:position pos:line="132" pos:column="20"/></name> <operator pos:line="132" pos:column="21">+=<pos:position pos:line="132" pos:column="23"/></operator> <literal type="number" pos:line="132" pos:column="24">5<pos:position pos:line="132" pos:column="25"/></literal></expr>;<pos:position pos:line="132" pos:column="26"/></expr_stmt></block></else></if>
        <if pos:line="133" pos:column="9">if <condition pos:line="133" pos:column="12">(<expr><name><name pos:line="133" pos:column="13">ptr<pos:position pos:line="133" pos:column="16"/></name><index pos:line="133" pos:column="16">[<expr><literal type="number" pos:line="133" pos:column="17">1<pos:position pos:line="133" pos:column="18"/></literal></expr>]<pos:position pos:line="133" pos:column="19"/></index></name> <operator pos:line="133" pos:column="20">==<pos:position pos:line="133" pos:column="22"/></operator> <literal type="char" pos:line="133" pos:column="23">'?'<pos:position pos:line="133" pos:column="26"/></literal></expr>)<pos:position pos:line="133" pos:column="27"/></condition><then pos:line="133" pos:column="27"> <block type="pseudo"><expr_stmt><expr><name pos:line="133" pos:column="28">ptr<pos:position pos:line="133" pos:column="31"/></name><operator pos:line="133" pos:column="31">++<pos:position pos:line="133" pos:column="33"/></operator></expr>;<pos:position pos:line="133" pos:column="34"/></expr_stmt></block></then></if>
        }<pos:position pos:line="134" pos:column="10"/></block></then></if>
      }<pos:position pos:line="135" pos:column="8"/></block></then></if>
    <continue pos:line="136" pos:column="5">continue;<pos:position pos:line="136" pos:column="14"/></continue>

    <case pos:line="138" pos:column="5">case <expr><literal type="char" pos:line="138" pos:column="10">'^'<pos:position pos:line="138" pos:column="13"/></literal></expr>:<pos:position pos:line="138" pos:column="14"/></case>
    <case pos:line="139" pos:column="5">case <expr><literal type="char" pos:line="139" pos:column="10">'.'<pos:position pos:line="139" pos:column="13"/></literal></expr>:<pos:position pos:line="139" pos:column="14"/></case>
    <case pos:line="140" pos:column="5">case <expr><literal type="char" pos:line="140" pos:column="10">'$'<pos:position pos:line="140" pos:column="13"/></literal></expr>:<pos:position pos:line="140" pos:column="14"/></case>
    <case pos:line="141" pos:column="5">case <expr><literal type="char" pos:line="141" pos:column="10">'*'<pos:position pos:line="141" pos:column="13"/></literal></expr>:<pos:position pos:line="141" pos:column="14"/></case>     <comment type="block" pos:line="141" pos:column="19">/* These repeats won't be after brackets; */</comment>
    <case pos:line="142" pos:column="5">case <expr><literal type="char" pos:line="142" pos:column="10">'+'<pos:position pos:line="142" pos:column="13"/></literal></expr>:<pos:position pos:line="142" pos:column="14"/></case>     <comment type="block" pos:line="142" pos:column="19">/* those are handled separately */</comment>
    <case pos:line="143" pos:column="5">case <expr><literal type="char" pos:line="143" pos:column="10">'?'<pos:position pos:line="143" pos:column="13"/></literal></expr>:<pos:position pos:line="143" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="144" pos:column="5">length<pos:position pos:line="144" pos:column="11"/></name><operator pos:line="144" pos:column="11">++<pos:position pos:line="144" pos:column="13"/></operator></expr>;<pos:position pos:line="144" pos:column="14"/></expr_stmt>
    <continue pos:line="145" pos:column="5">continue;<pos:position pos:line="145" pos:column="14"/></continue>

    <comment type="block" pos:line="147" pos:column="5">/* This covers the cases of repeats after a single char, metachar, class,
    or back reference. */</comment>

    <case pos:line="150" pos:column="5">case <expr><literal type="char" pos:line="150" pos:column="10">'{'<pos:position pos:line="150" pos:column="13"/></literal></expr>:<pos:position pos:line="150" pos:column="14"/></case>
    <if pos:line="151" pos:column="5">if <condition pos:line="151" pos:column="8">(<expr><operator pos:line="151" pos:column="9">!<pos:position pos:line="151" pos:column="10"/></operator><call><name pos:line="151" pos:column="10">is_counted_repeat<pos:position pos:line="151" pos:column="27"/></name><argument_list pos:line="151" pos:column="27">(<argument><expr><name pos:line="151" pos:column="28">ptr<pos:position pos:line="151" pos:column="31"/></name><operator pos:line="151" pos:column="31">+<pos:position pos:line="151" pos:column="32"/></operator><literal type="number" pos:line="151" pos:column="32">1<pos:position pos:line="151" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="151" pos:column="35">&amp;<pos:position pos:line="151" pos:column="40"/></operator><name pos:line="151" pos:column="36">compile_block<pos:position pos:line="151" pos:column="49"/></name></expr></argument>)<pos:position pos:line="151" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="151" pos:column="51"/></condition><then pos:line="151" pos:column="51"> <block type="pseudo"><goto pos:line="151" pos:column="52">goto <name pos:line="151" pos:column="57">NORMAL_CHAR<pos:position pos:line="151" pos:column="68"/></name>;<pos:position pos:line="151" pos:column="69"/></goto></block></then></if>
    <expr_stmt><expr><name pos:line="152" pos:column="5">ptr<pos:position pos:line="152" pos:column="8"/></name> <operator pos:line="152" pos:column="9">=<pos:position pos:line="152" pos:column="10"/></operator> <call><name pos:line="152" pos:column="11">read_repeat_counts<pos:position pos:line="152" pos:column="29"/></name><argument_list pos:line="152" pos:column="29">(<argument><expr><name pos:line="152" pos:column="30">ptr<pos:position pos:line="152" pos:column="33"/></name><operator pos:line="152" pos:column="33">+<pos:position pos:line="152" pos:column="34"/></operator><literal type="number" pos:line="152" pos:column="34">1<pos:position pos:line="152" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="152" pos:column="37">&amp;<pos:position pos:line="152" pos:column="42"/></operator><name pos:line="152" pos:column="38">min<pos:position pos:line="152" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="152" pos:column="43">&amp;<pos:position pos:line="152" pos:column="48"/></operator><name pos:line="152" pos:column="44">max<pos:position pos:line="152" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="49">errorptr<pos:position pos:line="152" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="152" pos:column="59">&amp;<pos:position pos:line="152" pos:column="64"/></operator><name pos:line="152" pos:column="60">compile_block<pos:position pos:line="152" pos:column="73"/></name></expr></argument>)<pos:position pos:line="152" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="75"/></expr_stmt>
    <if pos:line="153" pos:column="5">if <condition pos:line="153" pos:column="8">(<expr><operator pos:line="153" pos:column="9">*<pos:position pos:line="153" pos:column="10"/></operator><name pos:line="153" pos:column="10">errorptr<pos:position pos:line="153" pos:column="18"/></name> <operator pos:line="153" pos:column="19">!=<pos:position pos:line="153" pos:column="21"/></operator> <name pos:line="153" pos:column="22">NULL<pos:position pos:line="153" pos:column="26"/></name></expr>)<pos:position pos:line="153" pos:column="27"/></condition><then pos:line="153" pos:column="27"> <block type="pseudo"><goto pos:line="153" pos:column="28">goto <name pos:line="153" pos:column="33">PCRE_ERROR_RETURN<pos:position pos:line="153" pos:column="50"/></name>;<pos:position pos:line="153" pos:column="51"/></goto></block></then></if>
    <if pos:line="154" pos:column="5">if <condition pos:line="154" pos:column="8">(<expr><operator pos:line="154" pos:column="9">(<pos:position pos:line="154" pos:column="10"/></operator><name pos:line="154" pos:column="10">min<pos:position pos:line="154" pos:column="13"/></name> <operator pos:line="154" pos:column="14">==<pos:position pos:line="154" pos:column="16"/></operator> <literal type="number" pos:line="154" pos:column="17">0<pos:position pos:line="154" pos:column="18"/></literal> <operator pos:line="154" pos:column="19">&amp;&amp;<pos:position pos:line="154" pos:column="29"/></operator> <operator pos:line="154" pos:column="22">(<pos:position pos:line="154" pos:column="23"/></operator><name pos:line="154" pos:column="23">max<pos:position pos:line="154" pos:column="26"/></name> <operator pos:line="154" pos:column="27">==<pos:position pos:line="154" pos:column="29"/></operator> <literal type="number" pos:line="154" pos:column="30">1<pos:position pos:line="154" pos:column="31"/></literal> <operator pos:line="154" pos:column="32">||<pos:position pos:line="154" pos:column="34"/></operator> <name pos:line="154" pos:column="35">max<pos:position pos:line="154" pos:column="38"/></name> <operator pos:line="154" pos:column="39">==<pos:position pos:line="154" pos:column="41"/></operator> <operator pos:line="154" pos:column="42">-<pos:position pos:line="154" pos:column="43"/></operator><literal type="number" pos:line="154" pos:column="43">1<pos:position pos:line="154" pos:column="44"/></literal><operator pos:line="154" pos:column="44">)<pos:position pos:line="154" pos:column="45"/></operator><operator pos:line="154" pos:column="45">)<pos:position pos:line="154" pos:column="46"/></operator> <operator pos:line="154" pos:column="47">||<pos:position pos:line="154" pos:column="49"/></operator>
      <operator pos:line="155" pos:column="7">(<pos:position pos:line="155" pos:column="8"/></operator><name pos:line="155" pos:column="8">min<pos:position pos:line="155" pos:column="11"/></name> <operator pos:line="155" pos:column="12">==<pos:position pos:line="155" pos:column="14"/></operator> <literal type="number" pos:line="155" pos:column="15">1<pos:position pos:line="155" pos:column="16"/></literal> <operator pos:line="155" pos:column="17">&amp;&amp;<pos:position pos:line="155" pos:column="27"/></operator> <name pos:line="155" pos:column="20">max<pos:position pos:line="155" pos:column="23"/></name> <operator pos:line="155" pos:column="24">==<pos:position pos:line="155" pos:column="26"/></operator> <operator pos:line="155" pos:column="27">-<pos:position pos:line="155" pos:column="28"/></operator><literal type="number" pos:line="155" pos:column="28">1<pos:position pos:line="155" pos:column="29"/></literal><operator pos:line="155" pos:column="29">)<pos:position pos:line="155" pos:column="30"/></operator></expr>)<pos:position pos:line="155" pos:column="31"/></condition><then pos:line="155" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><name pos:line="156" pos:column="9">length<pos:position pos:line="156" pos:column="15"/></name><operator pos:line="156" pos:column="15">++<pos:position pos:line="156" pos:column="17"/></operator></expr>;<pos:position pos:line="156" pos:column="18"/></expr_stmt></block></then>
    <else pos:line="157" pos:column="5">else
      <block pos:line="158" pos:column="7">{
      <expr_stmt><expr><name pos:line="159" pos:column="7">length<pos:position pos:line="159" pos:column="13"/></name><operator pos:line="159" pos:column="13">--<pos:position pos:line="159" pos:column="15"/></operator></expr>;<pos:position pos:line="159" pos:column="16"/></expr_stmt>   <comment type="block" pos:line="159" pos:column="19">/* Uncount the original char or metachar */</comment>
      <if pos:line="160" pos:column="7">if <condition pos:line="160" pos:column="10">(<expr><name pos:line="160" pos:column="11">min<pos:position pos:line="160" pos:column="14"/></name> <operator pos:line="160" pos:column="15">==<pos:position pos:line="160" pos:column="17"/></operator> <literal type="number" pos:line="160" pos:column="18">1<pos:position pos:line="160" pos:column="19"/></literal></expr>)<pos:position pos:line="160" pos:column="20"/></condition><then pos:line="160" pos:column="20"> <block type="pseudo"><expr_stmt><expr><name pos:line="160" pos:column="21">length<pos:position pos:line="160" pos:column="27"/></name><operator pos:line="160" pos:column="27">++<pos:position pos:line="160" pos:column="29"/></operator></expr>;<pos:position pos:line="160" pos:column="30"/></expr_stmt></block></then> <elseif pos:line="160" pos:column="31">else <if pos:line="160" pos:column="36">if <condition pos:line="160" pos:column="39">(<expr><name pos:line="160" pos:column="40">min<pos:position pos:line="160" pos:column="43"/></name> <operator pos:line="160" pos:column="44">&gt;<pos:position pos:line="160" pos:column="48"/></operator> <literal type="number" pos:line="160" pos:column="46">0<pos:position pos:line="160" pos:column="47"/></literal></expr>)<pos:position pos:line="160" pos:column="48"/></condition><then pos:line="160" pos:column="48"> <block type="pseudo"><expr_stmt><expr><name pos:line="160" pos:column="49">length<pos:position pos:line="160" pos:column="55"/></name> <operator pos:line="160" pos:column="56">+=<pos:position pos:line="160" pos:column="58"/></operator> <literal type="number" pos:line="160" pos:column="59">4<pos:position pos:line="160" pos:column="60"/></literal></expr>;<pos:position pos:line="160" pos:column="61"/></expr_stmt></block></then></if></elseif></if>
      <if pos:line="161" pos:column="7">if <condition pos:line="161" pos:column="10">(<expr><name pos:line="161" pos:column="11">max<pos:position pos:line="161" pos:column="14"/></name> <operator pos:line="161" pos:column="15">&gt;<pos:position pos:line="161" pos:column="19"/></operator> <literal type="number" pos:line="161" pos:column="17">0<pos:position pos:line="161" pos:column="18"/></literal></expr>)<pos:position pos:line="161" pos:column="19"/></condition><then pos:line="161" pos:column="19"> <block type="pseudo"><expr_stmt><expr><name pos:line="161" pos:column="20">length<pos:position pos:line="161" pos:column="26"/></name> <operator pos:line="161" pos:column="27">+=<pos:position pos:line="161" pos:column="29"/></operator> <literal type="number" pos:line="161" pos:column="30">4<pos:position pos:line="161" pos:column="31"/></literal></expr>;<pos:position pos:line="161" pos:column="32"/></expr_stmt></block></then> <else pos:line="161" pos:column="33">else <block type="pseudo"><expr_stmt><expr><name pos:line="161" pos:column="38">length<pos:position pos:line="161" pos:column="44"/></name> <operator pos:line="161" pos:column="45">+=<pos:position pos:line="161" pos:column="47"/></operator> <literal type="number" pos:line="161" pos:column="48">2<pos:position pos:line="161" pos:column="49"/></literal></expr>;<pos:position pos:line="161" pos:column="50"/></expr_stmt></block></else></if>
      }<pos:position pos:line="162" pos:column="8"/></block></else></if>
    <if pos:line="163" pos:column="5">if <condition pos:line="163" pos:column="8">(<expr><name><name pos:line="163" pos:column="9">ptr<pos:position pos:line="163" pos:column="12"/></name><index pos:line="163" pos:column="12">[<expr><literal type="number" pos:line="163" pos:column="13">1<pos:position pos:line="163" pos:column="14"/></literal></expr>]<pos:position pos:line="163" pos:column="15"/></index></name> <operator pos:line="163" pos:column="16">==<pos:position pos:line="163" pos:column="18"/></operator> <literal type="char" pos:line="163" pos:column="19">'?'<pos:position pos:line="163" pos:column="22"/></literal></expr>)<pos:position pos:line="163" pos:column="23"/></condition><then pos:line="163" pos:column="23"> <block type="pseudo"><expr_stmt><expr><name pos:line="163" pos:column="24">ptr<pos:position pos:line="163" pos:column="27"/></name><operator pos:line="163" pos:column="27">++<pos:position pos:line="163" pos:column="29"/></operator></expr>;<pos:position pos:line="163" pos:column="30"/></expr_stmt></block></then></if>
    <continue pos:line="164" pos:column="5">continue;<pos:position pos:line="164" pos:column="14"/></continue>

    <comment type="block" pos:line="166" pos:column="5">/* An alternation contains an offset to the next branch or ket. If any ims
    options changed in the previous branch(es), and/or if we are in a
    lookbehind assertion, extra space will be needed at the start of the
    branch. This is handled by branch_extra. */</comment>

    <case pos:line="171" pos:column="5">case <expr><literal type="char" pos:line="171" pos:column="10">'|'<pos:position pos:line="171" pos:column="13"/></literal></expr>:<pos:position pos:line="171" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="172" pos:column="5">length<pos:position pos:line="172" pos:column="11"/></name> <operator pos:line="172" pos:column="12">+=<pos:position pos:line="172" pos:column="14"/></operator> <literal type="number" pos:line="172" pos:column="15">3<pos:position pos:line="172" pos:column="16"/></literal> <operator pos:line="172" pos:column="17">+<pos:position pos:line="172" pos:column="18"/></operator> <name pos:line="172" pos:column="19">branch_extra<pos:position pos:line="172" pos:column="31"/></name></expr>;<pos:position pos:line="172" pos:column="32"/></expr_stmt>
    <continue pos:line="173" pos:column="5">continue;<pos:position pos:line="173" pos:column="14"/></continue>

    <comment type="block" pos:line="175" pos:column="5">/* A character class uses 33 characters. Don't worry about character types
    that aren't allowed in classes - they'll get picked up during the compile.
    A character class that contains only one character uses 2 or 3 bytes,
    depending on whether it is negated or not. Notice this where we can. */</comment>

    <case pos:line="180" pos:column="5">case <expr><literal type="char" pos:line="180" pos:column="10">'['<pos:position pos:line="180" pos:column="13"/></literal></expr>:<pos:position pos:line="180" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="181" pos:column="5">class_charcount<pos:position pos:line="181" pos:column="20"/></name> <operator pos:line="181" pos:column="21">=<pos:position pos:line="181" pos:column="22"/></operator> <literal type="number" pos:line="181" pos:column="23">0<pos:position pos:line="181" pos:column="24"/></literal></expr>;<pos:position pos:line="181" pos:column="25"/></expr_stmt>
    <if pos:line="182" pos:column="5">if <condition pos:line="182" pos:column="8">(<expr><operator pos:line="182" pos:column="9">*<pos:position pos:line="182" pos:column="10"/></operator><operator pos:line="182" pos:column="10">(<pos:position pos:line="182" pos:column="11"/></operator><operator pos:line="182" pos:column="11">++<pos:position pos:line="182" pos:column="13"/></operator><name pos:line="182" pos:column="13">ptr<pos:position pos:line="182" pos:column="16"/></name><operator pos:line="182" pos:column="16">)<pos:position pos:line="182" pos:column="17"/></operator> <operator pos:line="182" pos:column="18">==<pos:position pos:line="182" pos:column="20"/></operator> <literal type="char" pos:line="182" pos:column="21">'^'<pos:position pos:line="182" pos:column="24"/></literal></expr>)<pos:position pos:line="182" pos:column="25"/></condition><then pos:line="182" pos:column="25"> <block type="pseudo"><expr_stmt><expr><name pos:line="182" pos:column="26">ptr<pos:position pos:line="182" pos:column="29"/></name><operator pos:line="182" pos:column="29">++<pos:position pos:line="182" pos:column="31"/></operator></expr>;<pos:position pos:line="182" pos:column="32"/></expr_stmt></block></then></if>
    <do pos:line="183" pos:column="5">do
      <block pos:line="184" pos:column="7">{
      <if pos:line="185" pos:column="7">if <condition pos:line="185" pos:column="10">(<expr><operator pos:line="185" pos:column="11">*<pos:position pos:line="185" pos:column="12"/></operator><name pos:line="185" pos:column="12">ptr<pos:position pos:line="185" pos:column="15"/></name> <operator pos:line="185" pos:column="16">==<pos:position pos:line="185" pos:column="18"/></operator> <literal type="char" pos:line="185" pos:column="19">'\\'<pos:position pos:line="185" pos:column="23"/></literal></expr>)<pos:position pos:line="185" pos:column="24"/></condition><then pos:line="185" pos:column="24">
        <block pos:line="186" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="187" pos:column="9">int<pos:position pos:line="187" pos:column="12"/></name></type> <name pos:line="187" pos:column="13">ch<pos:position pos:line="187" pos:column="15"/></name> <init pos:line="187" pos:column="16">= <expr><call><name pos:line="187" pos:column="18">check_escape<pos:position pos:line="187" pos:column="30"/></name><argument_list pos:line="187" pos:column="30">(<argument><expr><operator pos:line="187" pos:column="31">&amp;<pos:position pos:line="187" pos:column="36"/></operator><name pos:line="187" pos:column="32">ptr<pos:position pos:line="187" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="37">errorptr<pos:position pos:line="187" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="47">bracount<pos:position pos:line="187" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="57">options<pos:position pos:line="187" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="187" pos:column="66">TRUE<pos:position pos:line="187" pos:column="70"/></name></expr></argument>,
          <argument><expr><operator pos:line="188" pos:column="11">&amp;<pos:position pos:line="188" pos:column="16"/></operator><name pos:line="188" pos:column="12">compile_block<pos:position pos:line="188" pos:column="25"/></name></expr></argument>)<pos:position pos:line="188" pos:column="26"/></argument_list></call></expr></init></decl>;<pos:position pos:line="188" pos:column="27"/></decl_stmt>
        <if pos:line="189" pos:column="9">if <condition pos:line="189" pos:column="12">(<expr><operator pos:line="189" pos:column="13">*<pos:position pos:line="189" pos:column="14"/></operator><name pos:line="189" pos:column="14">errorptr<pos:position pos:line="189" pos:column="22"/></name> <operator pos:line="189" pos:column="23">!=<pos:position pos:line="189" pos:column="25"/></operator> <name pos:line="189" pos:column="26">NULL<pos:position pos:line="189" pos:column="30"/></name></expr>)<pos:position pos:line="189" pos:column="31"/></condition><then pos:line="189" pos:column="31"> <block type="pseudo"><goto pos:line="189" pos:column="32">goto <name pos:line="189" pos:column="37">PCRE_ERROR_RETURN<pos:position pos:line="189" pos:column="54"/></name>;<pos:position pos:line="189" pos:column="55"/></goto></block></then></if>
        <if pos:line="190" pos:column="9">if <condition pos:line="190" pos:column="12">(<expr><operator pos:line="190" pos:column="13">-<pos:position pos:line="190" pos:column="14"/></operator><name pos:line="190" pos:column="14">ch<pos:position pos:line="190" pos:column="16"/></name> <operator pos:line="190" pos:column="17">==<pos:position pos:line="190" pos:column="19"/></operator> <name pos:line="190" pos:column="20">ESC_b<pos:position pos:line="190" pos:column="25"/></name></expr>)<pos:position pos:line="190" pos:column="26"/></condition><then pos:line="190" pos:column="26"> <block type="pseudo"><expr_stmt><expr><name pos:line="190" pos:column="27">class_charcount<pos:position pos:line="190" pos:column="42"/></name><operator pos:line="190" pos:column="42">++<pos:position pos:line="190" pos:column="44"/></operator></expr>;<pos:position pos:line="190" pos:column="45"/></expr_stmt></block></then> <else pos:line="190" pos:column="46">else <block type="pseudo"><expr_stmt><expr><name pos:line="190" pos:column="51">class_charcount<pos:position pos:line="190" pos:column="66"/></name> <operator pos:line="190" pos:column="67">=<pos:position pos:line="190" pos:column="68"/></operator> <literal type="number" pos:line="190" pos:column="69">10<pos:position pos:line="190" pos:column="71"/></literal></expr>;<pos:position pos:line="190" pos:column="72"/></expr_stmt></block></else></if>
        }<pos:position pos:line="191" pos:column="10"/></block></then>
      <else pos:line="192" pos:column="7">else <block type="pseudo"><expr_stmt><expr><name pos:line="192" pos:column="12">class_charcount<pos:position pos:line="192" pos:column="27"/></name><operator pos:line="192" pos:column="27">++<pos:position pos:line="192" pos:column="29"/></operator></expr>;<pos:position pos:line="192" pos:column="30"/></expr_stmt></block></else></if>
      <expr_stmt><expr><name pos:line="193" pos:column="7">ptr<pos:position pos:line="193" pos:column="10"/></name><operator pos:line="193" pos:column="10">++<pos:position pos:line="193" pos:column="12"/></operator></expr>;<pos:position pos:line="193" pos:column="13"/></expr_stmt>
      }<pos:position pos:line="194" pos:column="8"/></block>
    while <condition pos:line="195" pos:column="11">(<expr><operator pos:line="195" pos:column="12">*<pos:position pos:line="195" pos:column="13"/></operator><name pos:line="195" pos:column="13">ptr<pos:position pos:line="195" pos:column="16"/></name> <operator pos:line="195" pos:column="17">!=<pos:position pos:line="195" pos:column="19"/></operator> <literal type="number" pos:line="195" pos:column="20">0<pos:position pos:line="195" pos:column="21"/></literal> <operator pos:line="195" pos:column="22">&amp;&amp;<pos:position pos:line="195" pos:column="32"/></operator> <operator pos:line="195" pos:column="25">*<pos:position pos:line="195" pos:column="26"/></operator><name pos:line="195" pos:column="26">ptr<pos:position pos:line="195" pos:column="29"/></name> <operator pos:line="195" pos:column="30">!=<pos:position pos:line="195" pos:column="32"/></operator> <literal type="char" pos:line="195" pos:column="33">']'<pos:position pos:line="195" pos:column="36"/></literal></expr>)<pos:position pos:line="195" pos:column="37"/></condition>;<pos:position pos:line="195" pos:column="38"/></do>

    <comment type="block" pos:line="197" pos:column="5">/* Repeats for negated single chars are handled by the general code */</comment>

    <if pos:line="199" pos:column="5">if <condition pos:line="199" pos:column="8">(<expr><name pos:line="199" pos:column="9">class_charcount<pos:position pos:line="199" pos:column="24"/></name> <operator pos:line="199" pos:column="25">==<pos:position pos:line="199" pos:column="27"/></operator> <literal type="number" pos:line="199" pos:column="28">1<pos:position pos:line="199" pos:column="29"/></literal></expr>)<pos:position pos:line="199" pos:column="30"/></condition><then pos:line="199" pos:column="30"> <block type="pseudo"><expr_stmt><expr><name pos:line="199" pos:column="31">length<pos:position pos:line="199" pos:column="37"/></name> <operator pos:line="199" pos:column="38">+=<pos:position pos:line="199" pos:column="40"/></operator> <literal type="number" pos:line="199" pos:column="41">3<pos:position pos:line="199" pos:column="42"/></literal></expr>;<pos:position pos:line="199" pos:column="43"/></expr_stmt></block></then> <else pos:line="199" pos:column="44">else
      <block pos:line="200" pos:column="7">{
      <expr_stmt><expr><name pos:line="201" pos:column="7">length<pos:position pos:line="201" pos:column="13"/></name> <operator pos:line="201" pos:column="14">+=<pos:position pos:line="201" pos:column="16"/></operator> <literal type="number" pos:line="201" pos:column="17">33<pos:position pos:line="201" pos:column="19"/></literal></expr>;<pos:position pos:line="201" pos:column="20"/></expr_stmt>

      <comment type="block" pos:line="203" pos:column="7">/* A repeat needs either 1 or 5 bytes. */</comment>

      <if pos:line="205" pos:column="7">if <condition pos:line="205" pos:column="10">(<expr><operator pos:line="205" pos:column="11">*<pos:position pos:line="205" pos:column="12"/></operator><name pos:line="205" pos:column="12">ptr<pos:position pos:line="205" pos:column="15"/></name> <operator pos:line="205" pos:column="16">!=<pos:position pos:line="205" pos:column="18"/></operator> <literal type="number" pos:line="205" pos:column="19">0<pos:position pos:line="205" pos:column="20"/></literal> <operator pos:line="205" pos:column="21">&amp;&amp;<pos:position pos:line="205" pos:column="31"/></operator> <name><name pos:line="205" pos:column="24">ptr<pos:position pos:line="205" pos:column="27"/></name><index pos:line="205" pos:column="27">[<expr><literal type="number" pos:line="205" pos:column="28">1<pos:position pos:line="205" pos:column="29"/></literal></expr>]<pos:position pos:line="205" pos:column="30"/></index></name> <operator pos:line="205" pos:column="31">==<pos:position pos:line="205" pos:column="33"/></operator> <literal type="char" pos:line="205" pos:column="34">'{'<pos:position pos:line="205" pos:column="37"/></literal> <operator pos:line="205" pos:column="38">&amp;&amp;<pos:position pos:line="205" pos:column="48"/></operator> <call><name pos:line="205" pos:column="41">is_counted_repeat<pos:position pos:line="205" pos:column="58"/></name><argument_list pos:line="205" pos:column="58">(<argument><expr><name pos:line="205" pos:column="59">ptr<pos:position pos:line="205" pos:column="62"/></name><operator pos:line="205" pos:column="62">+<pos:position pos:line="205" pos:column="63"/></operator><literal type="number" pos:line="205" pos:column="63">2<pos:position pos:line="205" pos:column="64"/></literal></expr></argument>, <argument><expr><operator pos:line="205" pos:column="66">&amp;<pos:position pos:line="205" pos:column="71"/></operator><name pos:line="205" pos:column="67">compile_block<pos:position pos:line="205" pos:column="80"/></name></expr></argument>)<pos:position pos:line="205" pos:column="81"/></argument_list></call></expr>)<pos:position pos:line="205" pos:column="82"/></condition><then pos:line="205" pos:column="82">
        <block pos:line="206" pos:column="9">{
        <expr_stmt><expr><name pos:line="207" pos:column="9">ptr<pos:position pos:line="207" pos:column="12"/></name> <operator pos:line="207" pos:column="13">=<pos:position pos:line="207" pos:column="14"/></operator> <call><name pos:line="207" pos:column="15">read_repeat_counts<pos:position pos:line="207" pos:column="33"/></name><argument_list pos:line="207" pos:column="33">(<argument><expr><name pos:line="207" pos:column="34">ptr<pos:position pos:line="207" pos:column="37"/></name><operator pos:line="207" pos:column="37">+<pos:position pos:line="207" pos:column="38"/></operator><literal type="number" pos:line="207" pos:column="38">2<pos:position pos:line="207" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="207" pos:column="41">&amp;<pos:position pos:line="207" pos:column="46"/></operator><name pos:line="207" pos:column="42">min<pos:position pos:line="207" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="207" pos:column="47">&amp;<pos:position pos:line="207" pos:column="52"/></operator><name pos:line="207" pos:column="48">max<pos:position pos:line="207" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="207" pos:column="53">errorptr<pos:position pos:line="207" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="207" pos:column="63">&amp;<pos:position pos:line="207" pos:column="68"/></operator><name pos:line="207" pos:column="64">compile_block<pos:position pos:line="207" pos:column="77"/></name></expr></argument>)<pos:position pos:line="207" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="79"/></expr_stmt>
        <if pos:line="208" pos:column="9">if <condition pos:line="208" pos:column="12">(<expr><operator pos:line="208" pos:column="13">*<pos:position pos:line="208" pos:column="14"/></operator><name pos:line="208" pos:column="14">errorptr<pos:position pos:line="208" pos:column="22"/></name> <operator pos:line="208" pos:column="23">!=<pos:position pos:line="208" pos:column="25"/></operator> <name pos:line="208" pos:column="26">NULL<pos:position pos:line="208" pos:column="30"/></name></expr>)<pos:position pos:line="208" pos:column="31"/></condition><then pos:line="208" pos:column="31"> <block type="pseudo"><goto pos:line="208" pos:column="32">goto <name pos:line="208" pos:column="37">PCRE_ERROR_RETURN<pos:position pos:line="208" pos:column="54"/></name>;<pos:position pos:line="208" pos:column="55"/></goto></block></then></if>
        <if pos:line="209" pos:column="9">if <condition pos:line="209" pos:column="12">(<expr><operator pos:line="209" pos:column="13">(<pos:position pos:line="209" pos:column="14"/></operator><name pos:line="209" pos:column="14">min<pos:position pos:line="209" pos:column="17"/></name> <operator pos:line="209" pos:column="18">==<pos:position pos:line="209" pos:column="20"/></operator> <literal type="number" pos:line="209" pos:column="21">0<pos:position pos:line="209" pos:column="22"/></literal> <operator pos:line="209" pos:column="23">&amp;&amp;<pos:position pos:line="209" pos:column="33"/></operator> <operator pos:line="209" pos:column="26">(<pos:position pos:line="209" pos:column="27"/></operator><name pos:line="209" pos:column="27">max<pos:position pos:line="209" pos:column="30"/></name> <operator pos:line="209" pos:column="31">==<pos:position pos:line="209" pos:column="33"/></operator> <literal type="number" pos:line="209" pos:column="34">1<pos:position pos:line="209" pos:column="35"/></literal> <operator pos:line="209" pos:column="36">||<pos:position pos:line="209" pos:column="38"/></operator> <name pos:line="209" pos:column="39">max<pos:position pos:line="209" pos:column="42"/></name> <operator pos:line="209" pos:column="43">==<pos:position pos:line="209" pos:column="45"/></operator> <operator pos:line="209" pos:column="46">-<pos:position pos:line="209" pos:column="47"/></operator><literal type="number" pos:line="209" pos:column="47">1<pos:position pos:line="209" pos:column="48"/></literal><operator pos:line="209" pos:column="48">)<pos:position pos:line="209" pos:column="49"/></operator><operator pos:line="209" pos:column="49">)<pos:position pos:line="209" pos:column="50"/></operator> <operator pos:line="209" pos:column="51">||<pos:position pos:line="209" pos:column="53"/></operator>
          <operator pos:line="210" pos:column="11">(<pos:position pos:line="210" pos:column="12"/></operator><name pos:line="210" pos:column="12">min<pos:position pos:line="210" pos:column="15"/></name> <operator pos:line="210" pos:column="16">==<pos:position pos:line="210" pos:column="18"/></operator> <literal type="number" pos:line="210" pos:column="19">1<pos:position pos:line="210" pos:column="20"/></literal> <operator pos:line="210" pos:column="21">&amp;&amp;<pos:position pos:line="210" pos:column="31"/></operator> <name pos:line="210" pos:column="24">max<pos:position pos:line="210" pos:column="27"/></name> <operator pos:line="210" pos:column="28">==<pos:position pos:line="210" pos:column="30"/></operator> <operator pos:line="210" pos:column="31">-<pos:position pos:line="210" pos:column="32"/></operator><literal type="number" pos:line="210" pos:column="32">1<pos:position pos:line="210" pos:column="33"/></literal><operator pos:line="210" pos:column="33">)<pos:position pos:line="210" pos:column="34"/></operator></expr>)<pos:position pos:line="210" pos:column="35"/></condition><then pos:line="210" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><name pos:line="211" pos:column="13">length<pos:position pos:line="211" pos:column="19"/></name><operator pos:line="211" pos:column="19">++<pos:position pos:line="211" pos:column="21"/></operator></expr>;<pos:position pos:line="211" pos:column="22"/></expr_stmt></block></then>
        <else pos:line="212" pos:column="9">else <block type="pseudo"><expr_stmt><expr><name pos:line="212" pos:column="14">length<pos:position pos:line="212" pos:column="20"/></name> <operator pos:line="212" pos:column="21">+=<pos:position pos:line="212" pos:column="23"/></operator> <literal type="number" pos:line="212" pos:column="24">5<pos:position pos:line="212" pos:column="25"/></literal></expr>;<pos:position pos:line="212" pos:column="26"/></expr_stmt></block></else></if>
        <if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><name><name pos:line="213" pos:column="13">ptr<pos:position pos:line="213" pos:column="16"/></name><index pos:line="213" pos:column="16">[<expr><literal type="number" pos:line="213" pos:column="17">1<pos:position pos:line="213" pos:column="18"/></literal></expr>]<pos:position pos:line="213" pos:column="19"/></index></name> <operator pos:line="213" pos:column="20">==<pos:position pos:line="213" pos:column="22"/></operator> <literal type="char" pos:line="213" pos:column="23">'?'<pos:position pos:line="213" pos:column="26"/></literal></expr>)<pos:position pos:line="213" pos:column="27"/></condition><then pos:line="213" pos:column="27"> <block type="pseudo"><expr_stmt><expr><name pos:line="213" pos:column="28">ptr<pos:position pos:line="213" pos:column="31"/></name><operator pos:line="213" pos:column="31">++<pos:position pos:line="213" pos:column="33"/></operator></expr>;<pos:position pos:line="213" pos:column="34"/></expr_stmt></block></then></if>
        }<pos:position pos:line="214" pos:column="10"/></block></then></if>
      }<pos:position pos:line="215" pos:column="8"/></block></else></if>
    <continue pos:line="216" pos:column="5">continue;<pos:position pos:line="216" pos:column="14"/></continue>

    <comment type="block" pos:line="218" pos:column="5">/* Brackets may be genuine groups or special things */</comment>

    <case pos:line="220" pos:column="5">case <expr><literal type="char" pos:line="220" pos:column="10">'('<pos:position pos:line="220" pos:column="13"/></literal></expr>:<pos:position pos:line="220" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="221" pos:column="5">branch_newextra<pos:position pos:line="221" pos:column="20"/></name> <operator pos:line="221" pos:column="21">=<pos:position pos:line="221" pos:column="22"/></operator> <literal type="number" pos:line="221" pos:column="23">0<pos:position pos:line="221" pos:column="24"/></literal></expr>;<pos:position pos:line="221" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="222" pos:column="5">bracket_length<pos:position pos:line="222" pos:column="19"/></name> <operator pos:line="222" pos:column="20">=<pos:position pos:line="222" pos:column="21"/></operator> <literal type="number" pos:line="222" pos:column="22">3<pos:position pos:line="222" pos:column="23"/></literal></expr>;<pos:position pos:line="222" pos:column="24"/></expr_stmt>

    <comment type="block" pos:line="224" pos:column="5">/* Handle special forms of bracket, which all start (? */</comment>

    <if pos:line="226" pos:column="5">if <condition pos:line="226" pos:column="8">(<expr><name><name pos:line="226" pos:column="9">ptr<pos:position pos:line="226" pos:column="12"/></name><index pos:line="226" pos:column="12">[<expr><literal type="number" pos:line="226" pos:column="13">1<pos:position pos:line="226" pos:column="14"/></literal></expr>]<pos:position pos:line="226" pos:column="15"/></index></name> <operator pos:line="226" pos:column="16">==<pos:position pos:line="226" pos:column="18"/></operator> <literal type="char" pos:line="226" pos:column="19">'?'<pos:position pos:line="226" pos:column="22"/></literal></expr>)<pos:position pos:line="226" pos:column="23"/></condition><then pos:line="226" pos:column="23">
      <block pos:line="227" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="228" pos:column="7">int<pos:position pos:line="228" pos:column="10"/></name></type> <name pos:line="228" pos:column="11">set<pos:position pos:line="228" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="228" pos:column="16">unset<pos:position pos:line="228" pos:column="21"/></name></decl>;<pos:position pos:line="228" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="229" pos:column="7">int<pos:position pos:line="229" pos:column="10"/></name> <modifier pos:line="229" pos:column="11">*<pos:position pos:line="229" pos:column="12"/></modifier></type><name pos:line="229" pos:column="12">optset<pos:position pos:line="229" pos:column="18"/></name></decl>;<pos:position pos:line="229" pos:column="19"/></decl_stmt>

      <switch pos:line="231" pos:column="7">switch <condition pos:line="231" pos:column="14">(<expr><name pos:line="231" pos:column="15">c<pos:position pos:line="231" pos:column="16"/></name> <operator pos:line="231" pos:column="17">=<pos:position pos:line="231" pos:column="18"/></operator> <name><name pos:line="231" pos:column="19">ptr<pos:position pos:line="231" pos:column="22"/></name><index pos:line="231" pos:column="22">[<expr><literal type="number" pos:line="231" pos:column="23">2<pos:position pos:line="231" pos:column="24"/></literal></expr>]<pos:position pos:line="231" pos:column="25"/></index></name></expr>)<pos:position pos:line="231" pos:column="26"/></condition>
        <block pos:line="232" pos:column="9">{
        <comment type="block" pos:line="233" pos:column="9">/* Skip over comments entirely */</comment>
        <case pos:line="234" pos:column="9">case <expr><literal type="char" pos:line="234" pos:column="14">'#'<pos:position pos:line="234" pos:column="17"/></literal></expr>:<pos:position pos:line="234" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="235" pos:column="9">ptr<pos:position pos:line="235" pos:column="12"/></name> <operator pos:line="235" pos:column="13">+=<pos:position pos:line="235" pos:column="15"/></operator> <literal type="number" pos:line="235" pos:column="16">3<pos:position pos:line="235" pos:column="17"/></literal></expr>;<pos:position pos:line="235" pos:column="18"/></expr_stmt>
        <while pos:line="236" pos:column="9">while <condition pos:line="236" pos:column="15">(<expr><operator pos:line="236" pos:column="16">*<pos:position pos:line="236" pos:column="17"/></operator><name pos:line="236" pos:column="17">ptr<pos:position pos:line="236" pos:column="20"/></name> <operator pos:line="236" pos:column="21">!=<pos:position pos:line="236" pos:column="23"/></operator> <literal type="number" pos:line="236" pos:column="24">0<pos:position pos:line="236" pos:column="25"/></literal> <operator pos:line="236" pos:column="26">&amp;&amp;<pos:position pos:line="236" pos:column="36"/></operator> <operator pos:line="236" pos:column="29">*<pos:position pos:line="236" pos:column="30"/></operator><name pos:line="236" pos:column="30">ptr<pos:position pos:line="236" pos:column="33"/></name> <operator pos:line="236" pos:column="34">!=<pos:position pos:line="236" pos:column="36"/></operator> <literal type="char" pos:line="236" pos:column="37">')'<pos:position pos:line="236" pos:column="40"/></literal></expr>)<pos:position pos:line="236" pos:column="41"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="236" pos:column="42">ptr<pos:position pos:line="236" pos:column="45"/></name><operator pos:line="236" pos:column="45">++<pos:position pos:line="236" pos:column="47"/></operator></expr>;<pos:position pos:line="236" pos:column="48"/></expr_stmt></block></while>
        <if pos:line="237" pos:column="9">if <condition pos:line="237" pos:column="12">(<expr><operator pos:line="237" pos:column="13">*<pos:position pos:line="237" pos:column="14"/></operator><name pos:line="237" pos:column="14">ptr<pos:position pos:line="237" pos:column="17"/></name> <operator pos:line="237" pos:column="18">==<pos:position pos:line="237" pos:column="20"/></operator> <literal type="number" pos:line="237" pos:column="21">0<pos:position pos:line="237" pos:column="22"/></literal></expr>)<pos:position pos:line="237" pos:column="23"/></condition><then pos:line="237" pos:column="23">
          <block pos:line="238" pos:column="11">{
          <expr_stmt><expr><operator pos:line="239" pos:column="11">*<pos:position pos:line="239" pos:column="12"/></operator><name pos:line="239" pos:column="12">errorptr<pos:position pos:line="239" pos:column="20"/></name> <operator pos:line="239" pos:column="21">=<pos:position pos:line="239" pos:column="22"/></operator> <name pos:line="239" pos:column="23">ERR18<pos:position pos:line="239" pos:column="28"/></name></expr>;<pos:position pos:line="239" pos:column="29"/></expr_stmt>
          <goto pos:line="240" pos:column="11">goto <name pos:line="240" pos:column="16">PCRE_ERROR_RETURN<pos:position pos:line="240" pos:column="33"/></name>;<pos:position pos:line="240" pos:column="34"/></goto>
          }<pos:position pos:line="241" pos:column="12"/></block></then></if>
        <continue pos:line="242" pos:column="9">continue;<pos:position pos:line="242" pos:column="18"/></continue>

        <comment type="block" pos:line="244" pos:column="9">/* Non-referencing groups and lookaheads just move the pointer on, and
        then behave like a non-special bracket, except that they don't increment
        the count of extracting brackets. Ditto for the "once only" bracket,
        which is in Perl from version 5.005. */</comment>

        <case pos:line="249" pos:column="9">case <expr><literal type="char" pos:line="249" pos:column="14">':'<pos:position pos:line="249" pos:column="17"/></literal></expr>:<pos:position pos:line="249" pos:column="18"/></case>
        <case pos:line="250" pos:column="9">case <expr><literal type="char" pos:line="250" pos:column="14">'='<pos:position pos:line="250" pos:column="17"/></literal></expr>:<pos:position pos:line="250" pos:column="18"/></case>
        <case pos:line="251" pos:column="9">case <expr><literal type="char" pos:line="251" pos:column="14">'!'<pos:position pos:line="251" pos:column="17"/></literal></expr>:<pos:position pos:line="251" pos:column="18"/></case>
        <case pos:line="252" pos:column="9">case <expr><literal type="char" pos:line="252" pos:column="14">'&gt;'<pos:position pos:line="252" pos:column="20"/></literal></expr>:<pos:position pos:line="252" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="253" pos:column="9">ptr<pos:position pos:line="253" pos:column="12"/></name> <operator pos:line="253" pos:column="13">+=<pos:position pos:line="253" pos:column="15"/></operator> <literal type="number" pos:line="253" pos:column="16">2<pos:position pos:line="253" pos:column="17"/></literal></expr>;<pos:position pos:line="253" pos:column="18"/></expr_stmt>
        <break pos:line="254" pos:column="9">break;<pos:position pos:line="254" pos:column="15"/></break>

        <comment type="block" pos:line="256" pos:column="9">/* A recursive call to the regex is an extension, to provide the
        facility which can be obtained by $(?p{perl-code}) in Perl 5.6. */</comment>

        <case pos:line="259" pos:column="9">case <expr><literal type="char" pos:line="259" pos:column="14">'R'<pos:position pos:line="259" pos:column="17"/></literal></expr>:<pos:position pos:line="259" pos:column="18"/></case>
        <if pos:line="260" pos:column="9">if <condition pos:line="260" pos:column="12">(<expr><name><name pos:line="260" pos:column="13">ptr<pos:position pos:line="260" pos:column="16"/></name><index pos:line="260" pos:column="16">[<expr><literal type="number" pos:line="260" pos:column="17">3<pos:position pos:line="260" pos:column="18"/></literal></expr>]<pos:position pos:line="260" pos:column="19"/></index></name> <operator pos:line="260" pos:column="20">!=<pos:position pos:line="260" pos:column="22"/></operator> <literal type="char" pos:line="260" pos:column="23">')'<pos:position pos:line="260" pos:column="26"/></literal></expr>)<pos:position pos:line="260" pos:column="27"/></condition><then pos:line="260" pos:column="27">
          <block pos:line="261" pos:column="11">{
          <expr_stmt><expr><operator pos:line="262" pos:column="11">*<pos:position pos:line="262" pos:column="12"/></operator><name pos:line="262" pos:column="12">errorptr<pos:position pos:line="262" pos:column="20"/></name> <operator pos:line="262" pos:column="21">=<pos:position pos:line="262" pos:column="22"/></operator> <name pos:line="262" pos:column="23">ERR29<pos:position pos:line="262" pos:column="28"/></name></expr>;<pos:position pos:line="262" pos:column="29"/></expr_stmt>
          <goto pos:line="263" pos:column="11">goto <name pos:line="263" pos:column="16">PCRE_ERROR_RETURN<pos:position pos:line="263" pos:column="33"/></name>;<pos:position pos:line="263" pos:column="34"/></goto>
          }<pos:position pos:line="264" pos:column="12"/></block></then></if>
        <expr_stmt><expr><name pos:line="265" pos:column="9">ptr<pos:position pos:line="265" pos:column="12"/></name> <operator pos:line="265" pos:column="13">+=<pos:position pos:line="265" pos:column="15"/></operator> <literal type="number" pos:line="265" pos:column="16">3<pos:position pos:line="265" pos:column="17"/></literal></expr>;<pos:position pos:line="265" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="266" pos:column="9">length<pos:position pos:line="266" pos:column="15"/></name> <operator pos:line="266" pos:column="16">+=<pos:position pos:line="266" pos:column="18"/></operator> <literal type="number" pos:line="266" pos:column="19">1<pos:position pos:line="266" pos:column="20"/></literal></expr>;<pos:position pos:line="266" pos:column="21"/></expr_stmt>
        <break pos:line="267" pos:column="9">break;<pos:position pos:line="267" pos:column="15"/></break>

        <comment type="block" pos:line="269" pos:column="9">/* Lookbehinds are in Perl from version 5.005 */</comment>

        <case pos:line="271" pos:column="9">case <expr><literal type="char" pos:line="271" pos:column="14">'&lt;'<pos:position pos:line="271" pos:column="20"/></literal></expr>:<pos:position pos:line="271" pos:column="18"/></case>
        <if pos:line="272" pos:column="9">if <condition pos:line="272" pos:column="12">(<expr><name><name pos:line="272" pos:column="13">ptr<pos:position pos:line="272" pos:column="16"/></name><index pos:line="272" pos:column="16">[<expr><literal type="number" pos:line="272" pos:column="17">3<pos:position pos:line="272" pos:column="18"/></literal></expr>]<pos:position pos:line="272" pos:column="19"/></index></name> <operator pos:line="272" pos:column="20">==<pos:position pos:line="272" pos:column="22"/></operator> <literal type="char" pos:line="272" pos:column="23">'='<pos:position pos:line="272" pos:column="26"/></literal> <operator pos:line="272" pos:column="27">||<pos:position pos:line="272" pos:column="29"/></operator> <name><name pos:line="272" pos:column="30">ptr<pos:position pos:line="272" pos:column="33"/></name><index pos:line="272" pos:column="33">[<expr><literal type="number" pos:line="272" pos:column="34">3<pos:position pos:line="272" pos:column="35"/></literal></expr>]<pos:position pos:line="272" pos:column="36"/></index></name> <operator pos:line="272" pos:column="37">==<pos:position pos:line="272" pos:column="39"/></operator> <literal type="char" pos:line="272" pos:column="40">'!'<pos:position pos:line="272" pos:column="43"/></literal></expr>)<pos:position pos:line="272" pos:column="44"/></condition><then pos:line="272" pos:column="44">
          <block pos:line="273" pos:column="11">{
          <expr_stmt><expr><name pos:line="274" pos:column="11">ptr<pos:position pos:line="274" pos:column="14"/></name> <operator pos:line="274" pos:column="15">+=<pos:position pos:line="274" pos:column="17"/></operator> <literal type="number" pos:line="274" pos:column="18">3<pos:position pos:line="274" pos:column="19"/></literal></expr>;<pos:position pos:line="274" pos:column="20"/></expr_stmt>
          <expr_stmt><expr><name pos:line="275" pos:column="11">branch_newextra<pos:position pos:line="275" pos:column="26"/></name> <operator pos:line="275" pos:column="27">=<pos:position pos:line="275" pos:column="28"/></operator> <literal type="number" pos:line="275" pos:column="29">3<pos:position pos:line="275" pos:column="30"/></literal></expr>;<pos:position pos:line="275" pos:column="31"/></expr_stmt>
          <expr_stmt><expr><name pos:line="276" pos:column="11">length<pos:position pos:line="276" pos:column="17"/></name> <operator pos:line="276" pos:column="18">+=<pos:position pos:line="276" pos:column="20"/></operator> <literal type="number" pos:line="276" pos:column="21">3<pos:position pos:line="276" pos:column="22"/></literal></expr>;<pos:position pos:line="276" pos:column="23"/></expr_stmt>         <comment type="block" pos:line="276" pos:column="32">/* For the first branch */</comment>
          <break pos:line="277" pos:column="11">break;<pos:position pos:line="277" pos:column="17"/></break>
          }<pos:position pos:line="278" pos:column="12"/></block></then></if>
        <expr_stmt><expr><operator pos:line="279" pos:column="9">*<pos:position pos:line="279" pos:column="10"/></operator><name pos:line="279" pos:column="10">errorptr<pos:position pos:line="279" pos:column="18"/></name> <operator pos:line="279" pos:column="19">=<pos:position pos:line="279" pos:column="20"/></operator> <name pos:line="279" pos:column="21">ERR24<pos:position pos:line="279" pos:column="26"/></name></expr>;<pos:position pos:line="279" pos:column="27"/></expr_stmt>
        <goto pos:line="280" pos:column="9">goto <name pos:line="280" pos:column="14">PCRE_ERROR_RETURN<pos:position pos:line="280" pos:column="31"/></name>;<pos:position pos:line="280" pos:column="32"/></goto>

        <comment type="block" pos:line="282" pos:column="9">/* Conditionals are in Perl from version 5.005. The bracket must either
        be followed by a number (for bracket reference) or by an assertion
        group. */</comment>

        <case pos:line="286" pos:column="9">case <expr><literal type="char" pos:line="286" pos:column="14">'('<pos:position pos:line="286" pos:column="17"/></literal></expr>:<pos:position pos:line="286" pos:column="18"/></case>
        <if pos:line="287" pos:column="9">if <condition pos:line="287" pos:column="12">(<expr><operator pos:line="287" pos:column="13">(<pos:position pos:line="287" pos:column="14"/></operator><name><name pos:line="287" pos:column="14">compile_block<pos:position pos:line="287" pos:column="27"/></name><operator pos:line="287" pos:column="27">.<pos:position pos:line="287" pos:column="28"/></operator><name pos:line="287" pos:column="28">ctypes<pos:position pos:line="287" pos:column="34"/></name><index pos:line="287" pos:column="34">[<expr><name><name pos:line="287" pos:column="35">ptr<pos:position pos:line="287" pos:column="38"/></name><index pos:line="287" pos:column="38">[<expr><literal type="number" pos:line="287" pos:column="39">3<pos:position pos:line="287" pos:column="40"/></literal></expr>]<pos:position pos:line="287" pos:column="41"/></index></name></expr>]<pos:position pos:line="287" pos:column="42"/></index></name> <operator pos:line="287" pos:column="43">&amp;<pos:position pos:line="287" pos:column="48"/></operator> <name pos:line="287" pos:column="45">ctype_digit<pos:position pos:line="287" pos:column="56"/></name><operator pos:line="287" pos:column="56">)<pos:position pos:line="287" pos:column="57"/></operator> <operator pos:line="287" pos:column="58">!=<pos:position pos:line="287" pos:column="60"/></operator> <literal type="number" pos:line="287" pos:column="61">0<pos:position pos:line="287" pos:column="62"/></literal></expr>)<pos:position pos:line="287" pos:column="63"/></condition><then pos:line="287" pos:column="63">
          <block pos:line="288" pos:column="11">{
          <expr_stmt><expr><name pos:line="289" pos:column="11">ptr<pos:position pos:line="289" pos:column="14"/></name> <operator pos:line="289" pos:column="15">+=<pos:position pos:line="289" pos:column="17"/></operator> <literal type="number" pos:line="289" pos:column="18">4<pos:position pos:line="289" pos:column="19"/></literal></expr>;<pos:position pos:line="289" pos:column="20"/></expr_stmt>
          <expr_stmt><expr><name pos:line="290" pos:column="11">length<pos:position pos:line="290" pos:column="17"/></name> <operator pos:line="290" pos:column="18">+=<pos:position pos:line="290" pos:column="20"/></operator> <literal type="number" pos:line="290" pos:column="21">3<pos:position pos:line="290" pos:column="22"/></literal></expr>;<pos:position pos:line="290" pos:column="23"/></expr_stmt>
          <while pos:line="291" pos:column="11">while <condition pos:line="291" pos:column="17">(<expr><operator pos:line="291" pos:column="18">(<pos:position pos:line="291" pos:column="19"/></operator><name><name pos:line="291" pos:column="19">compile_block<pos:position pos:line="291" pos:column="32"/></name><operator pos:line="291" pos:column="32">.<pos:position pos:line="291" pos:column="33"/></operator><name pos:line="291" pos:column="33">ctypes<pos:position pos:line="291" pos:column="39"/></name><index pos:line="291" pos:column="39">[<expr><operator pos:line="291" pos:column="40">*<pos:position pos:line="291" pos:column="41"/></operator><name pos:line="291" pos:column="41">ptr<pos:position pos:line="291" pos:column="44"/></name></expr>]<pos:position pos:line="291" pos:column="45"/></index></name> <operator pos:line="291" pos:column="46">&amp;<pos:position pos:line="291" pos:column="51"/></operator> <name pos:line="291" pos:column="48">ctype_digit<pos:position pos:line="291" pos:column="59"/></name><operator pos:line="291" pos:column="59">)<pos:position pos:line="291" pos:column="60"/></operator> <operator pos:line="291" pos:column="61">!=<pos:position pos:line="291" pos:column="63"/></operator> <literal type="number" pos:line="291" pos:column="64">0<pos:position pos:line="291" pos:column="65"/></literal></expr>)<pos:position pos:line="291" pos:column="66"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="291" pos:column="67">ptr<pos:position pos:line="291" pos:column="70"/></name><operator pos:line="291" pos:column="70">++<pos:position pos:line="291" pos:column="72"/></operator></expr>;<pos:position pos:line="291" pos:column="73"/></expr_stmt></block></while>
          <if pos:line="292" pos:column="11">if <condition pos:line="292" pos:column="14">(<expr><operator pos:line="292" pos:column="15">*<pos:position pos:line="292" pos:column="16"/></operator><name pos:line="292" pos:column="16">ptr<pos:position pos:line="292" pos:column="19"/></name> <operator pos:line="292" pos:column="20">!=<pos:position pos:line="292" pos:column="22"/></operator> <literal type="char" pos:line="292" pos:column="23">')'<pos:position pos:line="292" pos:column="26"/></literal></expr>)<pos:position pos:line="292" pos:column="27"/></condition><then pos:line="292" pos:column="27">
            <block pos:line="293" pos:column="13">{
            <expr_stmt><expr><operator pos:line="294" pos:column="13">*<pos:position pos:line="294" pos:column="14"/></operator><name pos:line="294" pos:column="14">errorptr<pos:position pos:line="294" pos:column="22"/></name> <operator pos:line="294" pos:column="23">=<pos:position pos:line="294" pos:column="24"/></operator> <name pos:line="294" pos:column="25">ERR26<pos:position pos:line="294" pos:column="30"/></name></expr>;<pos:position pos:line="294" pos:column="31"/></expr_stmt>
            <goto pos:line="295" pos:column="13">goto <name pos:line="295" pos:column="18">PCRE_ERROR_RETURN<pos:position pos:line="295" pos:column="35"/></name>;<pos:position pos:line="295" pos:column="36"/></goto>
            }<pos:position pos:line="296" pos:column="14"/></block></then></if>
          }<pos:position pos:line="297" pos:column="12"/></block></then>
        <else pos:line="298" pos:column="9">else   <comment type="block" pos:line="298" pos:column="16">/* An assertion must follow */</comment>
          <block pos:line="299" pos:column="11">{
          <expr_stmt><expr><name pos:line="300" pos:column="11">ptr<pos:position pos:line="300" pos:column="14"/></name><operator pos:line="300" pos:column="14">++<pos:position pos:line="300" pos:column="16"/></operator></expr>;<pos:position pos:line="300" pos:column="17"/></expr_stmt>   <comment type="block" pos:line="300" pos:column="20">/* Can treat like ':' as far as spacing is concerned */</comment>
          <if pos:line="301" pos:column="11">if <condition pos:line="301" pos:column="14">(<expr><name><name pos:line="301" pos:column="15">ptr<pos:position pos:line="301" pos:column="18"/></name><index pos:line="301" pos:column="18">[<expr><literal type="number" pos:line="301" pos:column="19">2<pos:position pos:line="301" pos:column="20"/></literal></expr>]<pos:position pos:line="301" pos:column="21"/></index></name> <operator pos:line="301" pos:column="22">!=<pos:position pos:line="301" pos:column="24"/></operator> <literal type="char" pos:line="301" pos:column="25">'?'<pos:position pos:line="301" pos:column="28"/></literal> <operator pos:line="301" pos:column="29">||<pos:position pos:line="301" pos:column="31"/></operator>
             <operator pos:line="302" pos:column="14">(<pos:position pos:line="302" pos:column="15"/></operator><name><name pos:line="302" pos:column="15">ptr<pos:position pos:line="302" pos:column="18"/></name><index pos:line="302" pos:column="18">[<expr><literal type="number" pos:line="302" pos:column="19">3<pos:position pos:line="302" pos:column="20"/></literal></expr>]<pos:position pos:line="302" pos:column="21"/></index></name> <operator pos:line="302" pos:column="22">!=<pos:position pos:line="302" pos:column="24"/></operator> <literal type="char" pos:line="302" pos:column="25">'='<pos:position pos:line="302" pos:column="28"/></literal> <operator pos:line="302" pos:column="29">&amp;&amp;<pos:position pos:line="302" pos:column="39"/></operator> <name><name pos:line="302" pos:column="32">ptr<pos:position pos:line="302" pos:column="35"/></name><index pos:line="302" pos:column="35">[<expr><literal type="number" pos:line="302" pos:column="36">3<pos:position pos:line="302" pos:column="37"/></literal></expr>]<pos:position pos:line="302" pos:column="38"/></index></name> <operator pos:line="302" pos:column="39">!=<pos:position pos:line="302" pos:column="41"/></operator> <literal type="char" pos:line="302" pos:column="42">'!'<pos:position pos:line="302" pos:column="45"/></literal> <operator pos:line="302" pos:column="46">&amp;&amp;<pos:position pos:line="302" pos:column="56"/></operator> <name><name pos:line="302" pos:column="49">ptr<pos:position pos:line="302" pos:column="52"/></name><index pos:line="302" pos:column="52">[<expr><literal type="number" pos:line="302" pos:column="53">3<pos:position pos:line="302" pos:column="54"/></literal></expr>]<pos:position pos:line="302" pos:column="55"/></index></name> <operator pos:line="302" pos:column="56">!=<pos:position pos:line="302" pos:column="58"/></operator> <literal type="char" pos:line="302" pos:column="59">'&lt;'<pos:position pos:line="302" pos:column="65"/></literal><operator pos:line="302" pos:column="62">)<pos:position pos:line="302" pos:column="63"/></operator></expr> )<pos:position pos:line="302" pos:column="65"/></condition><then pos:line="302" pos:column="65">
            <block pos:line="303" pos:column="13">{
            <expr_stmt><expr><name pos:line="304" pos:column="13">ptr<pos:position pos:line="304" pos:column="16"/></name> <operator pos:line="304" pos:column="17">+=<pos:position pos:line="304" pos:column="19"/></operator> <literal type="number" pos:line="304" pos:column="20">2<pos:position pos:line="304" pos:column="21"/></literal></expr>;<pos:position pos:line="304" pos:column="22"/></expr_stmt>    <comment type="block" pos:line="304" pos:column="26">/* To get right offset in message */</comment>
            <expr_stmt><expr><operator pos:line="305" pos:column="13">*<pos:position pos:line="305" pos:column="14"/></operator><name pos:line="305" pos:column="14">errorptr<pos:position pos:line="305" pos:column="22"/></name> <operator pos:line="305" pos:column="23">=<pos:position pos:line="305" pos:column="24"/></operator> <name pos:line="305" pos:column="25">ERR28<pos:position pos:line="305" pos:column="30"/></name></expr>;<pos:position pos:line="305" pos:column="31"/></expr_stmt>
            <goto pos:line="306" pos:column="13">goto <name pos:line="306" pos:column="18">PCRE_ERROR_RETURN<pos:position pos:line="306" pos:column="35"/></name>;<pos:position pos:line="306" pos:column="36"/></goto>
            }<pos:position pos:line="307" pos:column="14"/></block></then></if>
          }<pos:position pos:line="308" pos:column="12"/></block></else></if>
        <break pos:line="309" pos:column="9">break;<pos:position pos:line="309" pos:column="15"/></break>

        <comment type="block" pos:line="311" pos:column="9">/* Else loop checking valid options until ) is met. Anything else is an
        error. If we are without any brackets, i.e. at top level, the settings
        act as if specified in the options, so massage the options immediately.
        This is for backward compatibility with Perl 5.004. */</comment>

        <default pos:line="316" pos:column="9">default:<pos:position pos:line="316" pos:column="17"/></default>
        <expr_stmt><expr><name pos:line="317" pos:column="9">set<pos:position pos:line="317" pos:column="12"/></name> <operator pos:line="317" pos:column="13">=<pos:position pos:line="317" pos:column="14"/></operator> <name pos:line="317" pos:column="15">unset<pos:position pos:line="317" pos:column="20"/></name> <operator pos:line="317" pos:column="21">=<pos:position pos:line="317" pos:column="22"/></operator> <literal type="number" pos:line="317" pos:column="23">0<pos:position pos:line="317" pos:column="24"/></literal></expr>;<pos:position pos:line="317" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="318" pos:column="9">optset<pos:position pos:line="318" pos:column="15"/></name> <operator pos:line="318" pos:column="16">=<pos:position pos:line="318" pos:column="17"/></operator> <operator pos:line="318" pos:column="18">&amp;<pos:position pos:line="318" pos:column="23"/></operator><name pos:line="318" pos:column="19">set<pos:position pos:line="318" pos:column="22"/></name></expr>;<pos:position pos:line="318" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="319" pos:column="9">ptr<pos:position pos:line="319" pos:column="12"/></name> <operator pos:line="319" pos:column="13">+=<pos:position pos:line="319" pos:column="15"/></operator> <literal type="number" pos:line="319" pos:column="16">2<pos:position pos:line="319" pos:column="17"/></literal></expr>;<pos:position pos:line="319" pos:column="18"/></expr_stmt>

        <for pos:line="321" pos:column="9">for <control pos:line="321" pos:column="13">(<init pos:line="321" pos:column="14">;<pos:position pos:line="321" pos:column="15"/></init><condition pos:line="321" pos:column="15">;<pos:position pos:line="321" pos:column="16"/></condition> <incr><expr><name pos:line="321" pos:column="17">ptr<pos:position pos:line="321" pos:column="20"/></name><operator pos:line="321" pos:column="20">++<pos:position pos:line="321" pos:column="22"/></operator></expr></incr>)<pos:position pos:line="321" pos:column="23"/></control>
          <block pos:line="322" pos:column="11">{
          <expr_stmt><expr><name pos:line="323" pos:column="11">c<pos:position pos:line="323" pos:column="12"/></name> <operator pos:line="323" pos:column="13">=<pos:position pos:line="323" pos:column="14"/></operator> <operator pos:line="323" pos:column="15">*<pos:position pos:line="323" pos:column="16"/></operator><name pos:line="323" pos:column="16">ptr<pos:position pos:line="323" pos:column="19"/></name></expr>;<pos:position pos:line="323" pos:column="20"/></expr_stmt>
          <switch pos:line="324" pos:column="11">switch <condition pos:line="324" pos:column="18">(<expr><name pos:line="324" pos:column="19">c<pos:position pos:line="324" pos:column="20"/></name></expr>)<pos:position pos:line="324" pos:column="21"/></condition>
            <block pos:line="325" pos:column="13">{
            <case pos:line="326" pos:column="13">case <expr><literal type="char" pos:line="326" pos:column="18">'i'<pos:position pos:line="326" pos:column="21"/></literal></expr>:<pos:position pos:line="326" pos:column="22"/></case>
            <expr_stmt><expr><operator pos:line="327" pos:column="13">*<pos:position pos:line="327" pos:column="14"/></operator><name pos:line="327" pos:column="14">optset<pos:position pos:line="327" pos:column="20"/></name> <operator pos:line="327" pos:column="21">|=<pos:position pos:line="327" pos:column="23"/></operator> <name pos:line="327" pos:column="24">PCRE_CASELESS<pos:position pos:line="327" pos:column="37"/></name></expr>;<pos:position pos:line="327" pos:column="38"/></expr_stmt>
            <continue pos:line="328" pos:column="13">continue;<pos:position pos:line="328" pos:column="22"/></continue>

            <case pos:line="330" pos:column="13">case <expr><literal type="char" pos:line="330" pos:column="18">'m'<pos:position pos:line="330" pos:column="21"/></literal></expr>:<pos:position pos:line="330" pos:column="22"/></case>
            <expr_stmt><expr><operator pos:line="331" pos:column="13">*<pos:position pos:line="331" pos:column="14"/></operator><name pos:line="331" pos:column="14">optset<pos:position pos:line="331" pos:column="20"/></name> <operator pos:line="331" pos:column="21">|=<pos:position pos:line="331" pos:column="23"/></operator> <name pos:line="331" pos:column="24">PCRE_MULTILINE<pos:position pos:line="331" pos:column="38"/></name></expr>;<pos:position pos:line="331" pos:column="39"/></expr_stmt>
            <continue pos:line="332" pos:column="13">continue;<pos:position pos:line="332" pos:column="22"/></continue>

            <case pos:line="334" pos:column="13">case <expr><literal type="char" pos:line="334" pos:column="18">'s'<pos:position pos:line="334" pos:column="21"/></literal></expr>:<pos:position pos:line="334" pos:column="22"/></case>
            <expr_stmt><expr><operator pos:line="335" pos:column="13">*<pos:position pos:line="335" pos:column="14"/></operator><name pos:line="335" pos:column="14">optset<pos:position pos:line="335" pos:column="20"/></name> <operator pos:line="335" pos:column="21">|=<pos:position pos:line="335" pos:column="23"/></operator> <name pos:line="335" pos:column="24">PCRE_DOTALL<pos:position pos:line="335" pos:column="35"/></name></expr>;<pos:position pos:line="335" pos:column="36"/></expr_stmt>
            <continue pos:line="336" pos:column="13">continue;<pos:position pos:line="336" pos:column="22"/></continue>

            <case pos:line="338" pos:column="13">case <expr><literal type="char" pos:line="338" pos:column="18">'x'<pos:position pos:line="338" pos:column="21"/></literal></expr>:<pos:position pos:line="338" pos:column="22"/></case>
            <expr_stmt><expr><operator pos:line="339" pos:column="13">*<pos:position pos:line="339" pos:column="14"/></operator><name pos:line="339" pos:column="14">optset<pos:position pos:line="339" pos:column="20"/></name> <operator pos:line="339" pos:column="21">|=<pos:position pos:line="339" pos:column="23"/></operator> <name pos:line="339" pos:column="24">PCRE_EXTENDED<pos:position pos:line="339" pos:column="37"/></name></expr>;<pos:position pos:line="339" pos:column="38"/></expr_stmt>
            <continue pos:line="340" pos:column="13">continue;<pos:position pos:line="340" pos:column="22"/></continue>

            <case pos:line="342" pos:column="13">case <expr><literal type="char" pos:line="342" pos:column="18">'X'<pos:position pos:line="342" pos:column="21"/></literal></expr>:<pos:position pos:line="342" pos:column="22"/></case>
            <expr_stmt><expr><operator pos:line="343" pos:column="13">*<pos:position pos:line="343" pos:column="14"/></operator><name pos:line="343" pos:column="14">optset<pos:position pos:line="343" pos:column="20"/></name> <operator pos:line="343" pos:column="21">|=<pos:position pos:line="343" pos:column="23"/></operator> <name pos:line="343" pos:column="24">PCRE_EXTRA<pos:position pos:line="343" pos:column="34"/></name></expr>;<pos:position pos:line="343" pos:column="35"/></expr_stmt>
            <continue pos:line="344" pos:column="13">continue;<pos:position pos:line="344" pos:column="22"/></continue>

            <case pos:line="346" pos:column="13">case <expr><literal type="char" pos:line="346" pos:column="18">'U'<pos:position pos:line="346" pos:column="21"/></literal></expr>:<pos:position pos:line="346" pos:column="22"/></case>
            <expr_stmt><expr><operator pos:line="347" pos:column="13">*<pos:position pos:line="347" pos:column="14"/></operator><name pos:line="347" pos:column="14">optset<pos:position pos:line="347" pos:column="20"/></name> <operator pos:line="347" pos:column="21">|=<pos:position pos:line="347" pos:column="23"/></operator> <name pos:line="347" pos:column="24">PCRE_UNGREEDY<pos:position pos:line="347" pos:column="37"/></name></expr>;<pos:position pos:line="347" pos:column="38"/></expr_stmt>
            <continue pos:line="348" pos:column="13">continue;<pos:position pos:line="348" pos:column="22"/></continue>

            <case pos:line="350" pos:column="13">case <expr><literal type="char" pos:line="350" pos:column="18">'-'<pos:position pos:line="350" pos:column="21"/></literal></expr>:<pos:position pos:line="350" pos:column="22"/></case>
            <expr_stmt><expr><name pos:line="351" pos:column="13">optset<pos:position pos:line="351" pos:column="19"/></name> <operator pos:line="351" pos:column="20">=<pos:position pos:line="351" pos:column="21"/></operator> <operator pos:line="351" pos:column="22">&amp;<pos:position pos:line="351" pos:column="27"/></operator><name pos:line="351" pos:column="23">unset<pos:position pos:line="351" pos:column="28"/></name></expr>;<pos:position pos:line="351" pos:column="29"/></expr_stmt>
            <continue pos:line="352" pos:column="13">continue;<pos:position pos:line="352" pos:column="22"/></continue>

            <comment type="block" pos:line="354" pos:column="13">/* A termination by ')' indicates an options-setting-only item;
            this is global at top level; otherwise nothing is done here and
            it is handled during the compiling process on a per-bracket-group
            basis. */</comment>

            <case pos:line="359" pos:column="13">case <expr><literal type="char" pos:line="359" pos:column="18">')'<pos:position pos:line="359" pos:column="21"/></literal></expr>:<pos:position pos:line="359" pos:column="22"/></case>
            <if pos:line="360" pos:column="13">if <condition pos:line="360" pos:column="16">(<expr><name pos:line="360" pos:column="17">brastackptr<pos:position pos:line="360" pos:column="28"/></name> <operator pos:line="360" pos:column="29">==<pos:position pos:line="360" pos:column="31"/></operator> <literal type="number" pos:line="360" pos:column="32">0<pos:position pos:line="360" pos:column="33"/></literal></expr>)<pos:position pos:line="360" pos:column="34"/></condition><then pos:line="360" pos:column="34">
              <block pos:line="361" pos:column="15">{
              <expr_stmt><expr><name pos:line="362" pos:column="15">options<pos:position pos:line="362" pos:column="22"/></name> <operator pos:line="362" pos:column="23">=<pos:position pos:line="362" pos:column="24"/></operator> <operator pos:line="362" pos:column="25">(<pos:position pos:line="362" pos:column="26"/></operator><name pos:line="362" pos:column="26">options<pos:position pos:line="362" pos:column="33"/></name> <operator pos:line="362" pos:column="34">|<pos:position pos:line="362" pos:column="35"/></operator> <name pos:line="362" pos:column="36">set<pos:position pos:line="362" pos:column="39"/></name><operator pos:line="362" pos:column="39">)<pos:position pos:line="362" pos:column="40"/></operator> <operator pos:line="362" pos:column="41">&amp;<pos:position pos:line="362" pos:column="46"/></operator> <operator pos:line="362" pos:column="43">(<pos:position pos:line="362" pos:column="44"/></operator><operator pos:line="362" pos:column="44">~<pos:position pos:line="362" pos:column="45"/></operator><name pos:line="362" pos:column="45">unset<pos:position pos:line="362" pos:column="50"/></name><operator pos:line="362" pos:column="50">)<pos:position pos:line="362" pos:column="51"/></operator></expr>;<pos:position pos:line="362" pos:column="52"/></expr_stmt>
              <expr_stmt><expr><name pos:line="363" pos:column="15">set<pos:position pos:line="363" pos:column="18"/></name> <operator pos:line="363" pos:column="19">=<pos:position pos:line="363" pos:column="20"/></operator> <name pos:line="363" pos:column="21">unset<pos:position pos:line="363" pos:column="26"/></name> <operator pos:line="363" pos:column="27">=<pos:position pos:line="363" pos:column="28"/></operator> <literal type="number" pos:line="363" pos:column="29">0<pos:position pos:line="363" pos:column="30"/></literal></expr>;<pos:position pos:line="363" pos:column="31"/></expr_stmt>     <comment type="block" pos:line="363" pos:column="36">/* To save length */</comment>
              }<pos:position pos:line="364" pos:column="16"/></block></then></if>
            <comment type="block" pos:line="365" pos:column="13">/* Fall through */</comment>

            <comment type="block" pos:line="367" pos:column="13">/* A termination by ':' indicates the start of a nested group with
            the given options set. This is again handled at compile time, but
            we must allow for compiled space if any of the ims options are
            set. We also have to allow for resetting space at the end of
            the group, which is why 4 is added to the length and not just 2.
            If there are several changes of options within the same group, this
            will lead to an over-estimate on the length, but this shouldn't
            matter very much. We also have to allow for resetting options at
            the start of any alternations, which we do by setting
            branch_newextra to 2. Finally, we record whether the case-dependent
            flag ever changes within the regex. This is used by the "required
            character" code. */</comment>

            <case pos:line="380" pos:column="13">case <expr><literal type="char" pos:line="380" pos:column="18">':'<pos:position pos:line="380" pos:column="21"/></literal></expr>:<pos:position pos:line="380" pos:column="22"/></case>
            <if pos:line="381" pos:column="13">if <condition pos:line="381" pos:column="16">(<expr><operator pos:line="381" pos:column="17">(<pos:position pos:line="381" pos:column="18"/></operator><operator pos:line="381" pos:column="18">(<pos:position pos:line="381" pos:column="19"/></operator><name pos:line="381" pos:column="19">set<pos:position pos:line="381" pos:column="22"/></name><operator pos:line="381" pos:column="22">|<pos:position pos:line="381" pos:column="23"/></operator><name pos:line="381" pos:column="23">unset<pos:position pos:line="381" pos:column="28"/></name><operator pos:line="381" pos:column="28">)<pos:position pos:line="381" pos:column="29"/></operator> <operator pos:line="381" pos:column="30">&amp;<pos:position pos:line="381" pos:column="35"/></operator> <name pos:line="381" pos:column="32">PCRE_IMS<pos:position pos:line="381" pos:column="40"/></name><operator pos:line="381" pos:column="40">)<pos:position pos:line="381" pos:column="41"/></operator> <operator pos:line="381" pos:column="42">!=<pos:position pos:line="381" pos:column="44"/></operator> <literal type="number" pos:line="381" pos:column="45">0<pos:position pos:line="381" pos:column="46"/></literal></expr>)<pos:position pos:line="381" pos:column="47"/></condition><then pos:line="381" pos:column="47">
              <block pos:line="382" pos:column="15">{
              <expr_stmt><expr><name pos:line="383" pos:column="15">length<pos:position pos:line="383" pos:column="21"/></name> <operator pos:line="383" pos:column="22">+=<pos:position pos:line="383" pos:column="24"/></operator> <literal type="number" pos:line="383" pos:column="25">4<pos:position pos:line="383" pos:column="26"/></literal></expr>;<pos:position pos:line="383" pos:column="27"/></expr_stmt>
              <expr_stmt><expr><name pos:line="384" pos:column="15">branch_newextra<pos:position pos:line="384" pos:column="30"/></name> <operator pos:line="384" pos:column="31">=<pos:position pos:line="384" pos:column="32"/></operator> <literal type="number" pos:line="384" pos:column="33">2<pos:position pos:line="384" pos:column="34"/></literal></expr>;<pos:position pos:line="384" pos:column="35"/></expr_stmt>
              <if pos:line="385" pos:column="15">if <condition pos:line="385" pos:column="18">(<expr><operator pos:line="385" pos:column="19">(<pos:position pos:line="385" pos:column="20"/></operator><operator pos:line="385" pos:column="20">(<pos:position pos:line="385" pos:column="21"/></operator><name pos:line="385" pos:column="21">set<pos:position pos:line="385" pos:column="24"/></name><operator pos:line="385" pos:column="24">|<pos:position pos:line="385" pos:column="25"/></operator><name pos:line="385" pos:column="25">unset<pos:position pos:line="385" pos:column="30"/></name><operator pos:line="385" pos:column="30">)<pos:position pos:line="385" pos:column="31"/></operator> <operator pos:line="385" pos:column="32">&amp;<pos:position pos:line="385" pos:column="37"/></operator> <name pos:line="385" pos:column="34">PCRE_CASELESS<pos:position pos:line="385" pos:column="47"/></name><operator pos:line="385" pos:column="47">)<pos:position pos:line="385" pos:column="48"/></operator> <operator pos:line="385" pos:column="49">!=<pos:position pos:line="385" pos:column="51"/></operator> <literal type="number" pos:line="385" pos:column="52">0<pos:position pos:line="385" pos:column="53"/></literal></expr>)<pos:position pos:line="385" pos:column="54"/></condition><then pos:line="385" pos:column="54"> <block type="pseudo"><expr_stmt><expr><name pos:line="385" pos:column="55">options<pos:position pos:line="385" pos:column="62"/></name> <operator pos:line="385" pos:column="63">|=<pos:position pos:line="385" pos:column="65"/></operator> <name pos:line="385" pos:column="66">PCRE_ICHANGED<pos:position pos:line="385" pos:column="79"/></name></expr>;<pos:position pos:line="385" pos:column="80"/></expr_stmt></block></then></if>
              }<pos:position pos:line="386" pos:column="16"/></block></then></if>
            <goto pos:line="387" pos:column="13">goto <name pos:line="387" pos:column="18">END_OPTIONS<pos:position pos:line="387" pos:column="29"/></name>;<pos:position pos:line="387" pos:column="30"/></goto>

            <comment type="block" pos:line="389" pos:column="13">/* Unrecognized option character */</comment>

            <default pos:line="391" pos:column="13">default:<pos:position pos:line="391" pos:column="21"/></default>
            <expr_stmt><expr><operator pos:line="392" pos:column="13">*<pos:position pos:line="392" pos:column="14"/></operator><name pos:line="392" pos:column="14">errorptr<pos:position pos:line="392" pos:column="22"/></name> <operator pos:line="392" pos:column="23">=<pos:position pos:line="392" pos:column="24"/></operator> <name pos:line="392" pos:column="25">ERR12<pos:position pos:line="392" pos:column="30"/></name></expr>;<pos:position pos:line="392" pos:column="31"/></expr_stmt>
            <goto pos:line="393" pos:column="13">goto <name pos:line="393" pos:column="18">PCRE_ERROR_RETURN<pos:position pos:line="393" pos:column="35"/></name>;<pos:position pos:line="393" pos:column="36"/></goto>
            }<pos:position pos:line="394" pos:column="14"/></block></switch>
          }<pos:position pos:line="395" pos:column="12"/></block></for>

        <comment type="block" pos:line="397" pos:column="9">/* If we hit a closing bracket, that's it - this is a freestanding
        option-setting. We need to ensure that branch_extra is updated if
        necessary. The only values branch_newextra can have here are 0 or 2.
        If the value is 2, then branch_extra must either be 2 or 5, depending
        on whether this is a lookbehind group or not. */</comment>

        <label><name pos:line="403" pos:column="9">END_OPTIONS<pos:position pos:line="403" pos:column="20"/></name>:<pos:position pos:line="403" pos:column="21"/></label>
        <if pos:line="404" pos:column="9">if <condition pos:line="404" pos:column="12">(<expr><name pos:line="404" pos:column="13">c<pos:position pos:line="404" pos:column="14"/></name> <operator pos:line="404" pos:column="15">==<pos:position pos:line="404" pos:column="17"/></operator> <literal type="char" pos:line="404" pos:column="18">')'<pos:position pos:line="404" pos:column="21"/></literal></expr>)<pos:position pos:line="404" pos:column="22"/></condition><then pos:line="404" pos:column="22">
          <block pos:line="405" pos:column="11">{
          <if pos:line="406" pos:column="11">if <condition pos:line="406" pos:column="14">(<expr><name pos:line="406" pos:column="15">branch_newextra<pos:position pos:line="406" pos:column="30"/></name> <operator pos:line="406" pos:column="31">==<pos:position pos:line="406" pos:column="33"/></operator> <literal type="number" pos:line="406" pos:column="34">2<pos:position pos:line="406" pos:column="35"/></literal> <operator pos:line="406" pos:column="36">&amp;&amp;<pos:position pos:line="406" pos:column="46"/></operator> <operator pos:line="406" pos:column="39">(<pos:position pos:line="406" pos:column="40"/></operator><name pos:line="406" pos:column="40">branch_extra<pos:position pos:line="406" pos:column="52"/></name> <operator pos:line="406" pos:column="53">==<pos:position pos:line="406" pos:column="55"/></operator> <literal type="number" pos:line="406" pos:column="56">0<pos:position pos:line="406" pos:column="57"/></literal> <operator pos:line="406" pos:column="58">||<pos:position pos:line="406" pos:column="60"/></operator> <name pos:line="406" pos:column="61">branch_extra<pos:position pos:line="406" pos:column="73"/></name> <operator pos:line="406" pos:column="74">==<pos:position pos:line="406" pos:column="76"/></operator> <literal type="number" pos:line="406" pos:column="77">3<pos:position pos:line="406" pos:column="78"/></literal><operator pos:line="406" pos:column="78">)<pos:position pos:line="406" pos:column="79"/></operator></expr>)<pos:position pos:line="406" pos:column="80"/></condition><then pos:line="406" pos:column="80">
            <block type="pseudo"><expr_stmt><expr><name pos:line="407" pos:column="13">branch_extra<pos:position pos:line="407" pos:column="25"/></name> <operator pos:line="407" pos:column="26">+=<pos:position pos:line="407" pos:column="28"/></operator> <name pos:line="407" pos:column="29">branch_newextra<pos:position pos:line="407" pos:column="44"/></name></expr>;<pos:position pos:line="407" pos:column="45"/></expr_stmt></block></then></if>
          <continue pos:line="408" pos:column="11">continue;<pos:position pos:line="408" pos:column="20"/></continue>
          }<pos:position pos:line="409" pos:column="12"/></block></then></if>

        <comment type="block" pos:line="411" pos:column="9">/* If options were terminated by ':' control comes here. Fall through
        to handle the group below. */</comment>
        }<pos:position pos:line="413" pos:column="10"/></block></switch>
      }<pos:position pos:line="414" pos:column="8"/></block></then>

    <comment type="block" pos:line="416" pos:column="5">/* Extracting brackets must be counted so we can process escapes in a
    Perlish way. If the number exceeds EXTRACT_BASIC_MAX we are going to
    need an additional 3 bytes of store per extracting bracket. */</comment>

    <else pos:line="420" pos:column="5">else
      <block pos:line="421" pos:column="7">{
      <expr_stmt><expr><name pos:line="422" pos:column="7">bracount<pos:position pos:line="422" pos:column="15"/></name><operator pos:line="422" pos:column="15">++<pos:position pos:line="422" pos:column="17"/></operator></expr>;<pos:position pos:line="422" pos:column="18"/></expr_stmt>
      <if pos:line="423" pos:column="7">if <condition pos:line="423" pos:column="10">(<expr><name pos:line="423" pos:column="11">bracount<pos:position pos:line="423" pos:column="19"/></name> <operator pos:line="423" pos:column="20">&gt;<pos:position pos:line="423" pos:column="24"/></operator> <name pos:line="423" pos:column="22">EXTRACT_BASIC_MAX<pos:position pos:line="423" pos:column="39"/></name></expr>)<pos:position pos:line="423" pos:column="40"/></condition><then pos:line="423" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name pos:line="423" pos:column="41">bracket_length<pos:position pos:line="423" pos:column="55"/></name> <operator pos:line="423" pos:column="56">+=<pos:position pos:line="423" pos:column="58"/></operator> <literal type="number" pos:line="423" pos:column="59">3<pos:position pos:line="423" pos:column="60"/></literal></expr>;<pos:position pos:line="423" pos:column="61"/></expr_stmt></block></then></if>
      }<pos:position pos:line="424" pos:column="8"/></block></else></if>

    <comment type="block" pos:line="426" pos:column="5">/* Save length for computing whole length at end if there's a repeat that
    requires duplication of the group. Also save the current value of
    branch_extra, and start the new group with the new value. If non-zero, this
    will either be 2 for a (?imsx: group, or 3 for a lookbehind assertion. */</comment>

    <if pos:line="431" pos:column="5">if <condition pos:line="431" pos:column="8">(<expr><name pos:line="431" pos:column="9">brastackptr<pos:position pos:line="431" pos:column="20"/></name> <operator pos:line="431" pos:column="21">&gt;=<pos:position pos:line="431" pos:column="26"/></operator> <sizeof pos:line="431" pos:column="24">sizeof<argument_list pos:line="431" pos:column="30">(<argument><expr><name pos:line="431" pos:column="31">brastack<pos:position pos:line="431" pos:column="39"/></name></expr></argument>)<pos:position pos:line="431" pos:column="40"/></argument_list></sizeof><operator pos:line="431" pos:column="40">/<pos:position pos:line="431" pos:column="41"/></operator><sizeof pos:line="431" pos:column="41">sizeof<argument_list pos:line="431" pos:column="47">(<argument><expr><name pos:line="431" pos:column="48">int<pos:position pos:line="431" pos:column="51"/></name></expr></argument>)<pos:position pos:line="431" pos:column="52"/></argument_list></sizeof></expr>)<pos:position pos:line="431" pos:column="53"/></condition><then pos:line="431" pos:column="53">
      <block pos:line="432" pos:column="7">{
      <expr_stmt><expr><operator pos:line="433" pos:column="7">*<pos:position pos:line="433" pos:column="8"/></operator><name pos:line="433" pos:column="8">errorptr<pos:position pos:line="433" pos:column="16"/></name> <operator pos:line="433" pos:column="17">=<pos:position pos:line="433" pos:column="18"/></operator> <name pos:line="433" pos:column="19">ERR19<pos:position pos:line="433" pos:column="24"/></name></expr>;<pos:position pos:line="433" pos:column="25"/></expr_stmt>
      <goto pos:line="434" pos:column="7">goto <name pos:line="434" pos:column="12">PCRE_ERROR_RETURN<pos:position pos:line="434" pos:column="29"/></name>;<pos:position pos:line="434" pos:column="30"/></goto>
      }<pos:position pos:line="435" pos:column="8"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="437" pos:column="5">bralenstack<pos:position pos:line="437" pos:column="16"/></name><index pos:line="437" pos:column="16">[<expr><name pos:line="437" pos:column="17">brastackptr<pos:position pos:line="437" pos:column="28"/></name></expr>]<pos:position pos:line="437" pos:column="29"/></index></name> <operator pos:line="437" pos:column="30">=<pos:position pos:line="437" pos:column="31"/></operator> <name pos:line="437" pos:column="32">branch_extra<pos:position pos:line="437" pos:column="44"/></name></expr>;<pos:position pos:line="437" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="438" pos:column="5">branch_extra<pos:position pos:line="438" pos:column="17"/></name> <operator pos:line="438" pos:column="18">=<pos:position pos:line="438" pos:column="19"/></operator> <name pos:line="438" pos:column="20">branch_newextra<pos:position pos:line="438" pos:column="35"/></name></expr>;<pos:position pos:line="438" pos:column="36"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="440" pos:column="5">brastack<pos:position pos:line="440" pos:column="13"/></name><index pos:line="440" pos:column="13">[<expr><name pos:line="440" pos:column="14">brastackptr<pos:position pos:line="440" pos:column="25"/></name><operator pos:line="440" pos:column="25">++<pos:position pos:line="440" pos:column="27"/></operator></expr>]<pos:position pos:line="440" pos:column="28"/></index></name> <operator pos:line="440" pos:column="29">=<pos:position pos:line="440" pos:column="30"/></operator> <name pos:line="440" pos:column="31">length<pos:position pos:line="440" pos:column="37"/></name></expr>;<pos:position pos:line="440" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="441" pos:column="5">length<pos:position pos:line="441" pos:column="11"/></name> <operator pos:line="441" pos:column="12">+=<pos:position pos:line="441" pos:column="14"/></operator> <name pos:line="441" pos:column="15">bracket_length<pos:position pos:line="441" pos:column="29"/></name></expr>;<pos:position pos:line="441" pos:column="30"/></expr_stmt>
    <continue pos:line="442" pos:column="5">continue;<pos:position pos:line="442" pos:column="14"/></continue>

    <comment type="block" pos:line="444" pos:column="5">/* Handle ket. Look for subsequent max/min; for certain sets of values we
    have to replicate this bracket up to that many times. If brastackptr is
    0 this is an unmatched bracket which will generate an error, but take care
    not to try to access brastack[-1] when computing the length and restoring
    the branch_extra value. */</comment>

    <case pos:line="450" pos:column="5">case <expr><literal type="char" pos:line="450" pos:column="10">')'<pos:position pos:line="450" pos:column="13"/></literal></expr>:<pos:position pos:line="450" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="451" pos:column="5">length<pos:position pos:line="451" pos:column="11"/></name> <operator pos:line="451" pos:column="12">+=<pos:position pos:line="451" pos:column="14"/></operator> <literal type="number" pos:line="451" pos:column="15">3<pos:position pos:line="451" pos:column="16"/></literal></expr>;<pos:position pos:line="451" pos:column="17"/></expr_stmt>
      <block pos:line="452" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="453" pos:column="7">int<pos:position pos:line="453" pos:column="10"/></name></type> <name pos:line="453" pos:column="11">minval<pos:position pos:line="453" pos:column="17"/></name> <init pos:line="453" pos:column="18">= <expr><literal type="number" pos:line="453" pos:column="20">1<pos:position pos:line="453" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="453" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="454" pos:column="7">int<pos:position pos:line="454" pos:column="10"/></name></type> <name pos:line="454" pos:column="11">maxval<pos:position pos:line="454" pos:column="17"/></name> <init pos:line="454" pos:column="18">= <expr><literal type="number" pos:line="454" pos:column="20">1<pos:position pos:line="454" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="454" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="455" pos:column="7">int<pos:position pos:line="455" pos:column="10"/></name></type> <name pos:line="455" pos:column="11">duplength<pos:position pos:line="455" pos:column="20"/></name></decl>;<pos:position pos:line="455" pos:column="21"/></decl_stmt>

      <if pos:line="457" pos:column="7">if <condition pos:line="457" pos:column="10">(<expr><name pos:line="457" pos:column="11">brastackptr<pos:position pos:line="457" pos:column="22"/></name> <operator pos:line="457" pos:column="23">&gt;<pos:position pos:line="457" pos:column="27"/></operator> <literal type="number" pos:line="457" pos:column="25">0<pos:position pos:line="457" pos:column="26"/></literal></expr>)<pos:position pos:line="457" pos:column="27"/></condition><then pos:line="457" pos:column="27">
        <block pos:line="458" pos:column="9">{
        <expr_stmt><expr><name pos:line="459" pos:column="9">duplength<pos:position pos:line="459" pos:column="18"/></name> <operator pos:line="459" pos:column="19">=<pos:position pos:line="459" pos:column="20"/></operator> <name pos:line="459" pos:column="21">length<pos:position pos:line="459" pos:column="27"/></name> <operator pos:line="459" pos:column="28">-<pos:position pos:line="459" pos:column="29"/></operator> <name><name pos:line="459" pos:column="30">brastack<pos:position pos:line="459" pos:column="38"/></name><index pos:line="459" pos:column="38">[<expr><operator pos:line="459" pos:column="39">--<pos:position pos:line="459" pos:column="41"/></operator><name pos:line="459" pos:column="41">brastackptr<pos:position pos:line="459" pos:column="52"/></name></expr>]<pos:position pos:line="459" pos:column="53"/></index></name></expr>;<pos:position pos:line="459" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name pos:line="460" pos:column="9">branch_extra<pos:position pos:line="460" pos:column="21"/></name> <operator pos:line="460" pos:column="22">=<pos:position pos:line="460" pos:column="23"/></operator> <name><name pos:line="460" pos:column="24">bralenstack<pos:position pos:line="460" pos:column="35"/></name><index pos:line="460" pos:column="35">[<expr><name pos:line="460" pos:column="36">brastackptr<pos:position pos:line="460" pos:column="47"/></name></expr>]<pos:position pos:line="460" pos:column="48"/></index></name></expr>;<pos:position pos:line="460" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="461" pos:column="10"/></block></then>
      <else pos:line="462" pos:column="7">else <block type="pseudo"><expr_stmt><expr><name pos:line="462" pos:column="12">duplength<pos:position pos:line="462" pos:column="21"/></name> <operator pos:line="462" pos:column="22">=<pos:position pos:line="462" pos:column="23"/></operator> <literal type="number" pos:line="462" pos:column="24">0<pos:position pos:line="462" pos:column="25"/></literal></expr>;<pos:position pos:line="462" pos:column="26"/></expr_stmt></block></else></if>

      <comment type="block" pos:line="464" pos:column="7">/* Leave ptr at the final char; for read_repeat_counts this happens
      automatically; for the others we need an increment. */</comment>

      <if pos:line="467" pos:column="7">if <condition pos:line="467" pos:column="10">(<expr><operator pos:line="467" pos:column="11">(<pos:position pos:line="467" pos:column="12"/></operator><name pos:line="467" pos:column="12">c<pos:position pos:line="467" pos:column="13"/></name> <operator pos:line="467" pos:column="14">=<pos:position pos:line="467" pos:column="15"/></operator> <name><name pos:line="467" pos:column="16">ptr<pos:position pos:line="467" pos:column="19"/></name><index pos:line="467" pos:column="19">[<expr><literal type="number" pos:line="467" pos:column="20">1<pos:position pos:line="467" pos:column="21"/></literal></expr>]<pos:position pos:line="467" pos:column="22"/></index></name><operator pos:line="467" pos:column="22">)<pos:position pos:line="467" pos:column="23"/></operator> <operator pos:line="467" pos:column="24">==<pos:position pos:line="467" pos:column="26"/></operator> <literal type="char" pos:line="467" pos:column="27">'{'<pos:position pos:line="467" pos:column="30"/></literal> <operator pos:line="467" pos:column="31">&amp;&amp;<pos:position pos:line="467" pos:column="41"/></operator> <call><name pos:line="467" pos:column="34">is_counted_repeat<pos:position pos:line="467" pos:column="51"/></name><argument_list pos:line="467" pos:column="51">(<argument><expr><name pos:line="467" pos:column="52">ptr<pos:position pos:line="467" pos:column="55"/></name><operator pos:line="467" pos:column="55">+<pos:position pos:line="467" pos:column="56"/></operator><literal type="number" pos:line="467" pos:column="56">2<pos:position pos:line="467" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="467" pos:column="59">&amp;<pos:position pos:line="467" pos:column="64"/></operator><name pos:line="467" pos:column="60">compile_block<pos:position pos:line="467" pos:column="73"/></name></expr></argument>)<pos:position pos:line="467" pos:column="74"/></argument_list></call></expr>)<pos:position pos:line="467" pos:column="75"/></condition><then pos:line="467" pos:column="75">
        <block pos:line="468" pos:column="9">{
        <expr_stmt><expr><name pos:line="469" pos:column="9">ptr<pos:position pos:line="469" pos:column="12"/></name> <operator pos:line="469" pos:column="13">=<pos:position pos:line="469" pos:column="14"/></operator> <call><name pos:line="469" pos:column="15">read_repeat_counts<pos:position pos:line="469" pos:column="33"/></name><argument_list pos:line="469" pos:column="33">(<argument><expr><name pos:line="469" pos:column="34">ptr<pos:position pos:line="469" pos:column="37"/></name><operator pos:line="469" pos:column="37">+<pos:position pos:line="469" pos:column="38"/></operator><literal type="number" pos:line="469" pos:column="38">2<pos:position pos:line="469" pos:column="39"/></literal></expr></argument>, <argument><expr><operator pos:line="469" pos:column="41">&amp;<pos:position pos:line="469" pos:column="46"/></operator><name pos:line="469" pos:column="42">minval<pos:position pos:line="469" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="469" pos:column="50">&amp;<pos:position pos:line="469" pos:column="55"/></operator><name pos:line="469" pos:column="51">maxval<pos:position pos:line="469" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="469" pos:column="59">errorptr<pos:position pos:line="469" pos:column="67"/></name></expr></argument>,
          <argument><expr><operator pos:line="470" pos:column="11">&amp;<pos:position pos:line="470" pos:column="16"/></operator><name pos:line="470" pos:column="12">compile_block<pos:position pos:line="470" pos:column="25"/></name></expr></argument>)<pos:position pos:line="470" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="470" pos:column="27"/></expr_stmt>
        <if pos:line="471" pos:column="9">if <condition pos:line="471" pos:column="12">(<expr><operator pos:line="471" pos:column="13">*<pos:position pos:line="471" pos:column="14"/></operator><name pos:line="471" pos:column="14">errorptr<pos:position pos:line="471" pos:column="22"/></name> <operator pos:line="471" pos:column="23">!=<pos:position pos:line="471" pos:column="25"/></operator> <name pos:line="471" pos:column="26">NULL<pos:position pos:line="471" pos:column="30"/></name></expr>)<pos:position pos:line="471" pos:column="31"/></condition><then pos:line="471" pos:column="31"> <block type="pseudo"><goto pos:line="471" pos:column="32">goto <name pos:line="471" pos:column="37">PCRE_ERROR_RETURN<pos:position pos:line="471" pos:column="54"/></name>;<pos:position pos:line="471" pos:column="55"/></goto></block></then></if>
        }<pos:position pos:line="472" pos:column="10"/></block></then>
      <elseif pos:line="473" pos:column="7">else <if pos:line="473" pos:column="12">if <condition pos:line="473" pos:column="15">(<expr><name pos:line="473" pos:column="16">c<pos:position pos:line="473" pos:column="17"/></name> <operator pos:line="473" pos:column="18">==<pos:position pos:line="473" pos:column="20"/></operator> <literal type="char" pos:line="473" pos:column="21">'*'<pos:position pos:line="473" pos:column="24"/></literal></expr>)<pos:position pos:line="473" pos:column="25"/></condition><then pos:line="473" pos:column="25"> <block pos:line="473" pos:column="26">{ <expr_stmt><expr><name pos:line="473" pos:column="28">minval<pos:position pos:line="473" pos:column="34"/></name> <operator pos:line="473" pos:column="35">=<pos:position pos:line="473" pos:column="36"/></operator> <literal type="number" pos:line="473" pos:column="37">0<pos:position pos:line="473" pos:column="38"/></literal></expr>;<pos:position pos:line="473" pos:column="39"/></expr_stmt> <expr_stmt><expr><name pos:line="473" pos:column="40">maxval<pos:position pos:line="473" pos:column="46"/></name> <operator pos:line="473" pos:column="47">=<pos:position pos:line="473" pos:column="48"/></operator> <operator pos:line="473" pos:column="49">-<pos:position pos:line="473" pos:column="50"/></operator><literal type="number" pos:line="473" pos:column="50">1<pos:position pos:line="473" pos:column="51"/></literal></expr>;<pos:position pos:line="473" pos:column="52"/></expr_stmt> <expr_stmt><expr><name pos:line="473" pos:column="53">ptr<pos:position pos:line="473" pos:column="56"/></name><operator pos:line="473" pos:column="56">++<pos:position pos:line="473" pos:column="58"/></operator></expr>;<pos:position pos:line="473" pos:column="59"/></expr_stmt> }<pos:position pos:line="473" pos:column="61"/></block></then></if></elseif>
      <elseif pos:line="474" pos:column="7">else <if pos:line="474" pos:column="12">if <condition pos:line="474" pos:column="15">(<expr><name pos:line="474" pos:column="16">c<pos:position pos:line="474" pos:column="17"/></name> <operator pos:line="474" pos:column="18">==<pos:position pos:line="474" pos:column="20"/></operator> <literal type="char" pos:line="474" pos:column="21">'+'<pos:position pos:line="474" pos:column="24"/></literal></expr>)<pos:position pos:line="474" pos:column="25"/></condition><then pos:line="474" pos:column="25"> <block pos:line="474" pos:column="26">{ <expr_stmt><expr><name pos:line="474" pos:column="28">maxval<pos:position pos:line="474" pos:column="34"/></name> <operator pos:line="474" pos:column="35">=<pos:position pos:line="474" pos:column="36"/></operator> <operator pos:line="474" pos:column="37">-<pos:position pos:line="474" pos:column="38"/></operator><literal type="number" pos:line="474" pos:column="38">1<pos:position pos:line="474" pos:column="39"/></literal></expr>;<pos:position pos:line="474" pos:column="40"/></expr_stmt> <expr_stmt><expr><name pos:line="474" pos:column="41">ptr<pos:position pos:line="474" pos:column="44"/></name><operator pos:line="474" pos:column="44">++<pos:position pos:line="474" pos:column="46"/></operator></expr>;<pos:position pos:line="474" pos:column="47"/></expr_stmt> }<pos:position pos:line="474" pos:column="49"/></block></then></if></elseif>
      <elseif pos:line="475" pos:column="7">else <if pos:line="475" pos:column="12">if <condition pos:line="475" pos:column="15">(<expr><name pos:line="475" pos:column="16">c<pos:position pos:line="475" pos:column="17"/></name> <operator pos:line="475" pos:column="18">==<pos:position pos:line="475" pos:column="20"/></operator> <literal type="char" pos:line="475" pos:column="21">'?'<pos:position pos:line="475" pos:column="24"/></literal></expr>)<pos:position pos:line="475" pos:column="25"/></condition><then pos:line="475" pos:column="25"> <block pos:line="475" pos:column="26">{ <expr_stmt><expr><name pos:line="475" pos:column="28">minval<pos:position pos:line="475" pos:column="34"/></name> <operator pos:line="475" pos:column="35">=<pos:position pos:line="475" pos:column="36"/></operator> <literal type="number" pos:line="475" pos:column="37">0<pos:position pos:line="475" pos:column="38"/></literal></expr>;<pos:position pos:line="475" pos:column="39"/></expr_stmt> <expr_stmt><expr><name pos:line="475" pos:column="40">ptr<pos:position pos:line="475" pos:column="43"/></name><operator pos:line="475" pos:column="43">++<pos:position pos:line="475" pos:column="45"/></operator></expr>;<pos:position pos:line="475" pos:column="46"/></expr_stmt> }<pos:position pos:line="475" pos:column="48"/></block></then></if></elseif></if>

      <comment type="block" pos:line="477" pos:column="7">/* If the minimum is zero, we have to allow for an OP_BRAZERO before the
      group, and if the maximum is greater than zero, we have to replicate
      maxval-1 times; each replication acquires an OP_BRAZERO plus a nesting
      bracket set - hence the 7. */</comment>

      <if pos:line="482" pos:column="7">if <condition pos:line="482" pos:column="10">(<expr><name pos:line="482" pos:column="11">minval<pos:position pos:line="482" pos:column="17"/></name> <operator pos:line="482" pos:column="18">==<pos:position pos:line="482" pos:column="20"/></operator> <literal type="number" pos:line="482" pos:column="21">0<pos:position pos:line="482" pos:column="22"/></literal></expr>)<pos:position pos:line="482" pos:column="23"/></condition><then pos:line="482" pos:column="23">
        <block pos:line="483" pos:column="9">{
        <expr_stmt><expr><name pos:line="484" pos:column="9">length<pos:position pos:line="484" pos:column="15"/></name><operator pos:line="484" pos:column="15">++<pos:position pos:line="484" pos:column="17"/></operator></expr>;<pos:position pos:line="484" pos:column="18"/></expr_stmt>
        <if pos:line="485" pos:column="9">if <condition pos:line="485" pos:column="12">(<expr><name pos:line="485" pos:column="13">maxval<pos:position pos:line="485" pos:column="19"/></name> <operator pos:line="485" pos:column="20">&gt;<pos:position pos:line="485" pos:column="24"/></operator> <literal type="number" pos:line="485" pos:column="22">0<pos:position pos:line="485" pos:column="23"/></literal></expr>)<pos:position pos:line="485" pos:column="24"/></condition><then pos:line="485" pos:column="24"> <block type="pseudo"><expr_stmt><expr><name pos:line="485" pos:column="25">length<pos:position pos:line="485" pos:column="31"/></name> <operator pos:line="485" pos:column="32">+=<pos:position pos:line="485" pos:column="34"/></operator> <operator pos:line="485" pos:column="35">(<pos:position pos:line="485" pos:column="36"/></operator><name pos:line="485" pos:column="36">maxval<pos:position pos:line="485" pos:column="42"/></name> <operator pos:line="485" pos:column="43">-<pos:position pos:line="485" pos:column="44"/></operator> <literal type="number" pos:line="485" pos:column="45">1<pos:position pos:line="485" pos:column="46"/></literal><operator pos:line="485" pos:column="46">)<pos:position pos:line="485" pos:column="47"/></operator> <operator pos:line="485" pos:column="48">*<pos:position pos:line="485" pos:column="49"/></operator> <operator pos:line="485" pos:column="50">(<pos:position pos:line="485" pos:column="51"/></operator><name pos:line="485" pos:column="51">duplength<pos:position pos:line="485" pos:column="60"/></name> <operator pos:line="485" pos:column="61">+<pos:position pos:line="485" pos:column="62"/></operator> <literal type="number" pos:line="485" pos:column="63">7<pos:position pos:line="485" pos:column="64"/></literal><operator pos:line="485" pos:column="64">)<pos:position pos:line="485" pos:column="65"/></operator></expr>;<pos:position pos:line="485" pos:column="66"/></expr_stmt></block></then></if>
        }<pos:position pos:line="486" pos:column="10"/></block></then>

      <comment type="block" pos:line="488" pos:column="7">/* When the minimum is greater than zero, 1 we have to replicate up to
      minval-1 times, with no additions required in the copies. Then, if
      there is a limited maximum we have to replicate up to maxval-1 times
      allowing for a BRAZERO item before each optional copy and nesting
      brackets for all but one of the optional copies. */</comment>

      <else pos:line="494" pos:column="7">else
        <block pos:line="495" pos:column="9">{
        <expr_stmt><expr><name pos:line="496" pos:column="9">length<pos:position pos:line="496" pos:column="15"/></name> <operator pos:line="496" pos:column="16">+=<pos:position pos:line="496" pos:column="18"/></operator> <operator pos:line="496" pos:column="19">(<pos:position pos:line="496" pos:column="20"/></operator><name pos:line="496" pos:column="20">minval<pos:position pos:line="496" pos:column="26"/></name> <operator pos:line="496" pos:column="27">-<pos:position pos:line="496" pos:column="28"/></operator> <literal type="number" pos:line="496" pos:column="29">1<pos:position pos:line="496" pos:column="30"/></literal><operator pos:line="496" pos:column="30">)<pos:position pos:line="496" pos:column="31"/></operator> <operator pos:line="496" pos:column="32">*<pos:position pos:line="496" pos:column="33"/></operator> <name pos:line="496" pos:column="34">duplength<pos:position pos:line="496" pos:column="43"/></name></expr>;<pos:position pos:line="496" pos:column="44"/></expr_stmt>
        <if pos:line="497" pos:column="9">if <condition pos:line="497" pos:column="12">(<expr><name pos:line="497" pos:column="13">maxval<pos:position pos:line="497" pos:column="19"/></name> <operator pos:line="497" pos:column="20">&gt;<pos:position pos:line="497" pos:column="24"/></operator> <name pos:line="497" pos:column="22">minval<pos:position pos:line="497" pos:column="28"/></name></expr>)<pos:position pos:line="497" pos:column="29"/></condition><then pos:line="497" pos:column="29">   <comment type="block" pos:line="497" pos:column="32">/* Need this test as maxval=-1 means no limit */</comment>
          <block type="pseudo"><expr_stmt><expr><name pos:line="498" pos:column="11">length<pos:position pos:line="498" pos:column="17"/></name> <operator pos:line="498" pos:column="18">+=<pos:position pos:line="498" pos:column="20"/></operator> <operator pos:line="498" pos:column="21">(<pos:position pos:line="498" pos:column="22"/></operator><name pos:line="498" pos:column="22">maxval<pos:position pos:line="498" pos:column="28"/></name> <operator pos:line="498" pos:column="29">-<pos:position pos:line="498" pos:column="30"/></operator> <name pos:line="498" pos:column="31">minval<pos:position pos:line="498" pos:column="37"/></name><operator pos:line="498" pos:column="37">)<pos:position pos:line="498" pos:column="38"/></operator> <operator pos:line="498" pos:column="39">*<pos:position pos:line="498" pos:column="40"/></operator> <operator pos:line="498" pos:column="41">(<pos:position pos:line="498" pos:column="42"/></operator><name pos:line="498" pos:column="42">duplength<pos:position pos:line="498" pos:column="51"/></name> <operator pos:line="498" pos:column="52">+<pos:position pos:line="498" pos:column="53"/></operator> <literal type="number" pos:line="498" pos:column="54">7<pos:position pos:line="498" pos:column="55"/></literal><operator pos:line="498" pos:column="55">)<pos:position pos:line="498" pos:column="56"/></operator> <operator pos:line="498" pos:column="57">-<pos:position pos:line="498" pos:column="58"/></operator> <literal type="number" pos:line="498" pos:column="59">6<pos:position pos:line="498" pos:column="60"/></literal></expr>;<pos:position pos:line="498" pos:column="61"/></expr_stmt></block></then></if>
        }<pos:position pos:line="499" pos:column="10"/></block></else></if>
      }<pos:position pos:line="500" pos:column="8"/></block>
    <continue pos:line="501" pos:column="5">continue;<pos:position pos:line="501" pos:column="14"/></continue>

    <comment type="block" pos:line="503" pos:column="5">/* Non-special character. For a run of such characters the length required
    is the number of characters + 2, except that the maximum run length is 255.
    We won't get a skipped space or a non-data escape or the start of a #
    comment as the first character, so the length can't be zero. */</comment>

    <label><name pos:line="508" pos:column="5">NORMAL_CHAR<pos:position pos:line="508" pos:column="16"/></name>:<pos:position pos:line="508" pos:column="17"/></label>
    <default pos:line="509" pos:column="5">default:<pos:position pos:line="509" pos:column="13"/></default>
    <expr_stmt><expr><name pos:line="510" pos:column="5">length<pos:position pos:line="510" pos:column="11"/></name> <operator pos:line="510" pos:column="12">+=<pos:position pos:line="510" pos:column="14"/></operator> <literal type="number" pos:line="510" pos:column="15">2<pos:position pos:line="510" pos:column="16"/></literal></expr>;<pos:position pos:line="510" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="511" pos:column="5">runlength<pos:position pos:line="511" pos:column="14"/></name> <operator pos:line="511" pos:column="15">=<pos:position pos:line="511" pos:column="16"/></operator> <literal type="number" pos:line="511" pos:column="17">0<pos:position pos:line="511" pos:column="18"/></literal></expr>;<pos:position pos:line="511" pos:column="19"/></expr_stmt>
    <do pos:line="512" pos:column="5">do
      <block pos:line="513" pos:column="7">{
      <if pos:line="514" pos:column="7">if <condition pos:line="514" pos:column="10">(<expr><operator pos:line="514" pos:column="11">(<pos:position pos:line="514" pos:column="12"/></operator><name pos:line="514" pos:column="12">options<pos:position pos:line="514" pos:column="19"/></name> <operator pos:line="514" pos:column="20">&amp;<pos:position pos:line="514" pos:column="25"/></operator> <name pos:line="514" pos:column="22">PCRE_EXTENDED<pos:position pos:line="514" pos:column="35"/></name><operator pos:line="514" pos:column="35">)<pos:position pos:line="514" pos:column="36"/></operator> <operator pos:line="514" pos:column="37">!=<pos:position pos:line="514" pos:column="39"/></operator> <literal type="number" pos:line="514" pos:column="40">0<pos:position pos:line="514" pos:column="41"/></literal></expr>)<pos:position pos:line="514" pos:column="42"/></condition><then pos:line="514" pos:column="42">
        <block pos:line="515" pos:column="9">{
        <if pos:line="516" pos:column="9">if <condition pos:line="516" pos:column="12">(<expr><operator pos:line="516" pos:column="13">(<pos:position pos:line="516" pos:column="14"/></operator><name><name pos:line="516" pos:column="14">compile_block<pos:position pos:line="516" pos:column="27"/></name><operator pos:line="516" pos:column="27">.<pos:position pos:line="516" pos:column="28"/></operator><name pos:line="516" pos:column="28">ctypes<pos:position pos:line="516" pos:column="34"/></name><index pos:line="516" pos:column="34">[<expr><name pos:line="516" pos:column="35">c<pos:position pos:line="516" pos:column="36"/></name></expr>]<pos:position pos:line="516" pos:column="37"/></index></name> <operator pos:line="516" pos:column="38">&amp;<pos:position pos:line="516" pos:column="43"/></operator> <name pos:line="516" pos:column="40">ctype_space<pos:position pos:line="516" pos:column="51"/></name><operator pos:line="516" pos:column="51">)<pos:position pos:line="516" pos:column="52"/></operator> <operator pos:line="516" pos:column="53">!=<pos:position pos:line="516" pos:column="55"/></operator> <literal type="number" pos:line="516" pos:column="56">0<pos:position pos:line="516" pos:column="57"/></literal></expr>)<pos:position pos:line="516" pos:column="58"/></condition><then pos:line="516" pos:column="58"> <block type="pseudo"><continue pos:line="516" pos:column="59">continue;<pos:position pos:line="516" pos:column="68"/></continue></block></then></if>
        <if pos:line="517" pos:column="9">if <condition pos:line="517" pos:column="12">(<expr><name pos:line="517" pos:column="13">c<pos:position pos:line="517" pos:column="14"/></name> <operator pos:line="517" pos:column="15">==<pos:position pos:line="517" pos:column="17"/></operator> <literal type="char" pos:line="517" pos:column="18">'#'<pos:position pos:line="517" pos:column="21"/></literal></expr>)<pos:position pos:line="517" pos:column="22"/></condition><then pos:line="517" pos:column="22">
          <block pos:line="518" pos:column="11">{
          <comment type="block" pos:line="519" pos:column="11">/* The space before the ; is to avoid a warning on a silly compiler
          on the Macintosh. */</comment>
          <while pos:line="521" pos:column="11">while <condition pos:line="521" pos:column="17">(<expr><operator pos:line="521" pos:column="18">(<pos:position pos:line="521" pos:column="19"/></operator><name pos:line="521" pos:column="19">c<pos:position pos:line="521" pos:column="20"/></name> <operator pos:line="521" pos:column="21">=<pos:position pos:line="521" pos:column="22"/></operator> <operator pos:line="521" pos:column="23">*<pos:position pos:line="521" pos:column="24"/></operator><operator pos:line="521" pos:column="24">(<pos:position pos:line="521" pos:column="25"/></operator><operator pos:line="521" pos:column="25">++<pos:position pos:line="521" pos:column="27"/></operator><name pos:line="521" pos:column="27">ptr<pos:position pos:line="521" pos:column="30"/></name><operator pos:line="521" pos:column="30">)<pos:position pos:line="521" pos:column="31"/></operator><operator pos:line="521" pos:column="31">)<pos:position pos:line="521" pos:column="32"/></operator> <operator pos:line="521" pos:column="33">!=<pos:position pos:line="521" pos:column="35"/></operator> <literal type="number" pos:line="521" pos:column="36">0<pos:position pos:line="521" pos:column="37"/></literal> <operator pos:line="521" pos:column="38">&amp;&amp;<pos:position pos:line="521" pos:column="48"/></operator> <name pos:line="521" pos:column="41">c<pos:position pos:line="521" pos:column="42"/></name> <operator pos:line="521" pos:column="43">!=<pos:position pos:line="521" pos:column="45"/></operator> <name pos:line="521" pos:column="46">NEWLINE<pos:position pos:line="521" pos:column="53"/></name></expr>)<pos:position pos:line="521" pos:column="54"/></condition> <block type="pseudo"><empty_stmt pos:line="521" pos:column="55">;<pos:position pos:line="521" pos:column="56"/></empty_stmt></block></while>
          <continue pos:line="522" pos:column="11">continue;<pos:position pos:line="522" pos:column="20"/></continue>
          }<pos:position pos:line="523" pos:column="12"/></block></then></if>
        }<pos:position pos:line="524" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="526" pos:column="7">/* Backslash may introduce a data char or a metacharacter; stop the
      string before the latter. */</comment>

      <if pos:line="529" pos:column="7">if <condition pos:line="529" pos:column="10">(<expr><name pos:line="529" pos:column="11">c<pos:position pos:line="529" pos:column="12"/></name> <operator pos:line="529" pos:column="13">==<pos:position pos:line="529" pos:column="15"/></operator> <literal type="char" pos:line="529" pos:column="16">'\\'<pos:position pos:line="529" pos:column="20"/></literal></expr>)<pos:position pos:line="529" pos:column="21"/></condition><then pos:line="529" pos:column="21">
        <block pos:line="530" pos:column="9">{
        <decl_stmt><decl><type><specifier pos:line="531" pos:column="9">const<pos:position pos:line="531" pos:column="14"/></specifier> <name pos:line="531" pos:column="15">uschar<pos:position pos:line="531" pos:column="21"/></name> <modifier pos:line="531" pos:column="22">*<pos:position pos:line="531" pos:column="23"/></modifier></type><name pos:line="531" pos:column="23">saveptr<pos:position pos:line="531" pos:column="30"/></name> <init pos:line="531" pos:column="31">= <expr><name pos:line="531" pos:column="33">ptr<pos:position pos:line="531" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="531" pos:column="37"/></decl_stmt>
        <expr_stmt><expr><name pos:line="532" pos:column="9">c<pos:position pos:line="532" pos:column="10"/></name> <operator pos:line="532" pos:column="11">=<pos:position pos:line="532" pos:column="12"/></operator> <call><name pos:line="532" pos:column="13">check_escape<pos:position pos:line="532" pos:column="25"/></name><argument_list pos:line="532" pos:column="25">(<argument><expr><operator pos:line="532" pos:column="26">&amp;<pos:position pos:line="532" pos:column="31"/></operator><name pos:line="532" pos:column="27">ptr<pos:position pos:line="532" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="532" pos:column="32">errorptr<pos:position pos:line="532" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="532" pos:column="42">bracount<pos:position pos:line="532" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="532" pos:column="52">options<pos:position pos:line="532" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="532" pos:column="61">FALSE<pos:position pos:line="532" pos:column="66"/></name></expr></argument>,
          <argument><expr><operator pos:line="533" pos:column="11">&amp;<pos:position pos:line="533" pos:column="16"/></operator><name pos:line="533" pos:column="12">compile_block<pos:position pos:line="533" pos:column="25"/></name></expr></argument>)<pos:position pos:line="533" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="533" pos:column="27"/></expr_stmt>
        <if pos:line="534" pos:column="9">if <condition pos:line="534" pos:column="12">(<expr><operator pos:line="534" pos:column="13">*<pos:position pos:line="534" pos:column="14"/></operator><name pos:line="534" pos:column="14">errorptr<pos:position pos:line="534" pos:column="22"/></name> <operator pos:line="534" pos:column="23">!=<pos:position pos:line="534" pos:column="25"/></operator> <name pos:line="534" pos:column="26">NULL<pos:position pos:line="534" pos:column="30"/></name></expr>)<pos:position pos:line="534" pos:column="31"/></condition><then pos:line="534" pos:column="31"> <block type="pseudo"><goto pos:line="534" pos:column="32">goto <name pos:line="534" pos:column="37">PCRE_ERROR_RETURN<pos:position pos:line="534" pos:column="54"/></name>;<pos:position pos:line="534" pos:column="55"/></goto></block></then></if>
        <if pos:line="535" pos:column="9">if <condition pos:line="535" pos:column="12">(<expr><name pos:line="535" pos:column="13">c<pos:position pos:line="535" pos:column="14"/></name> <operator pos:line="535" pos:column="15">&lt;<pos:position pos:line="535" pos:column="19"/></operator> <literal type="number" pos:line="535" pos:column="17">0<pos:position pos:line="535" pos:column="18"/></literal></expr>)<pos:position pos:line="535" pos:column="19"/></condition><then pos:line="535" pos:column="19"> <block pos:line="535" pos:column="20">{ <expr_stmt><expr><name pos:line="535" pos:column="22">ptr<pos:position pos:line="535" pos:column="25"/></name> <operator pos:line="535" pos:column="26">=<pos:position pos:line="535" pos:column="27"/></operator> <name pos:line="535" pos:column="28">saveptr<pos:position pos:line="535" pos:column="35"/></name></expr>;<pos:position pos:line="535" pos:column="36"/></expr_stmt> <break pos:line="535" pos:column="37">break;<pos:position pos:line="535" pos:column="43"/></break> }<pos:position pos:line="535" pos:column="45"/></block></then></if>

<cpp:ifdef pos:line="537" pos:column="1">#<cpp:directive pos:line="537" pos:column="2">ifdef<pos:position pos:line="537" pos:column="7"/></cpp:directive> <name pos:line="537" pos:column="8">SUPPORT_UTF8<pos:position pos:line="537" pos:column="20"/></name></cpp:ifdef>
        <if pos:line="538" pos:column="9">if <condition pos:line="538" pos:column="12">(<expr><name pos:line="538" pos:column="13">c<pos:position pos:line="538" pos:column="14"/></name> <operator pos:line="538" pos:column="15">&gt;<pos:position pos:line="538" pos:column="19"/></operator> <literal type="number" pos:line="538" pos:column="17">127<pos:position pos:line="538" pos:column="20"/></literal> <operator pos:line="538" pos:column="21">&amp;&amp;<pos:position pos:line="538" pos:column="31"/></operator> <operator pos:line="538" pos:column="24">(<pos:position pos:line="538" pos:column="25"/></operator><name pos:line="538" pos:column="25">options<pos:position pos:line="538" pos:column="32"/></name> <operator pos:line="538" pos:column="33">&amp;<pos:position pos:line="538" pos:column="38"/></operator> <name pos:line="538" pos:column="35">PCRE_UTF8<pos:position pos:line="538" pos:column="44"/></name><operator pos:line="538" pos:column="44">)<pos:position pos:line="538" pos:column="45"/></operator> <operator pos:line="538" pos:column="46">!=<pos:position pos:line="538" pos:column="48"/></operator> <literal type="number" pos:line="538" pos:column="49">0<pos:position pos:line="538" pos:column="50"/></literal></expr>)<pos:position pos:line="538" pos:column="51"/></condition><then pos:line="538" pos:column="51">
          <block pos:line="539" pos:column="11">{
          <decl_stmt><decl><type><name pos:line="540" pos:column="11">int<pos:position pos:line="540" pos:column="14"/></name></type> <name pos:line="540" pos:column="15">i<pos:position pos:line="540" pos:column="16"/></name></decl>;<pos:position pos:line="540" pos:column="17"/></decl_stmt>
          <for pos:line="541" pos:column="11">for <control pos:line="541" pos:column="15">(<init><expr><name pos:line="541" pos:column="16">i<pos:position pos:line="541" pos:column="17"/></name> <operator pos:line="541" pos:column="18">=<pos:position pos:line="541" pos:column="19"/></operator> <literal type="number" pos:line="541" pos:column="20">0<pos:position pos:line="541" pos:column="21"/></literal></expr>;<pos:position pos:line="541" pos:column="22"/></init> <condition><expr><name pos:line="541" pos:column="23">i<pos:position pos:line="541" pos:column="24"/></name> <operator pos:line="541" pos:column="25">&lt;<pos:position pos:line="541" pos:column="29"/></operator> <sizeof pos:line="541" pos:column="27">sizeof<argument_list pos:line="541" pos:column="33">(<argument><expr><name pos:line="541" pos:column="34">utf8_table1<pos:position pos:line="541" pos:column="45"/></name></expr></argument>)<pos:position pos:line="541" pos:column="46"/></argument_list></sizeof><operator pos:line="541" pos:column="46">/<pos:position pos:line="541" pos:column="47"/></operator><sizeof pos:line="541" pos:column="47">sizeof<argument_list pos:line="541" pos:column="53">(<argument><expr><name pos:line="541" pos:column="54">int<pos:position pos:line="541" pos:column="57"/></name></expr></argument>)<pos:position pos:line="541" pos:column="58"/></argument_list></sizeof></expr>;<pos:position pos:line="541" pos:column="59"/></condition> <incr><expr><name pos:line="541" pos:column="60">i<pos:position pos:line="541" pos:column="61"/></name><operator pos:line="541" pos:column="61">++<pos:position pos:line="541" pos:column="63"/></operator></expr></incr>)<pos:position pos:line="541" pos:column="64"/></control>
            <block type="pseudo"><if pos:line="542" pos:column="13">if <condition pos:line="542" pos:column="16">(<expr><name pos:line="542" pos:column="17">c<pos:position pos:line="542" pos:column="18"/></name> <operator pos:line="542" pos:column="19">&lt;=<pos:position pos:line="542" pos:column="24"/></operator> <name><name pos:line="542" pos:column="22">utf8_table1<pos:position pos:line="542" pos:column="33"/></name><index pos:line="542" pos:column="33">[<expr><name pos:line="542" pos:column="34">i<pos:position pos:line="542" pos:column="35"/></name></expr>]<pos:position pos:line="542" pos:column="36"/></index></name></expr>)<pos:position pos:line="542" pos:column="37"/></condition><then pos:line="542" pos:column="37"> <block type="pseudo"><break pos:line="542" pos:column="38">break;<pos:position pos:line="542" pos:column="44"/></break></block></then></if></block></for>
          <expr_stmt><expr><name pos:line="543" pos:column="11">runlength<pos:position pos:line="543" pos:column="20"/></name> <operator pos:line="543" pos:column="21">+=<pos:position pos:line="543" pos:column="23"/></operator> <name pos:line="543" pos:column="24">i<pos:position pos:line="543" pos:column="25"/></name></expr>;<pos:position pos:line="543" pos:column="26"/></expr_stmt>
          }<pos:position pos:line="544" pos:column="12"/></block></then></if>
<cpp:endif pos:line="545" pos:column="1">#<cpp:directive pos:line="545" pos:column="2">endif<pos:position pos:line="545" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="546" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="548" pos:column="7">/* Ordinary character or single-char escape */</comment>

      <expr_stmt><expr><name pos:line="550" pos:column="7">runlength<pos:position pos:line="550" pos:column="16"/></name><operator pos:line="550" pos:column="16">++<pos:position pos:line="550" pos:column="18"/></operator></expr>;<pos:position pos:line="550" pos:column="19"/></expr_stmt>
      }<pos:position pos:line="551" pos:column="8"/></block>

    <comment type="block" pos:line="553" pos:column="5">/* This "while" is the end of the "do" above. */</comment>

    while <condition pos:line="555" pos:column="11">(<expr><name pos:line="555" pos:column="12">runlength<pos:position pos:line="555" pos:column="21"/></name> <operator pos:line="555" pos:column="22">&lt;<pos:position pos:line="555" pos:column="26"/></operator> <name pos:line="555" pos:column="24">MAXLIT<pos:position pos:line="555" pos:column="30"/></name> <operator pos:line="555" pos:column="31">&amp;&amp;<pos:position pos:line="555" pos:column="41"/></operator>
      <operator pos:line="556" pos:column="7">(<pos:position pos:line="556" pos:column="8"/></operator><name><name pos:line="556" pos:column="8">compile_block<pos:position pos:line="556" pos:column="21"/></name><operator pos:line="556" pos:column="21">.<pos:position pos:line="556" pos:column="22"/></operator><name pos:line="556" pos:column="22">ctypes<pos:position pos:line="556" pos:column="28"/></name><index pos:line="556" pos:column="28">[<expr><name pos:line="556" pos:column="29">c<pos:position pos:line="556" pos:column="30"/></name> <operator pos:line="556" pos:column="31">=<pos:position pos:line="556" pos:column="32"/></operator> <operator pos:line="556" pos:column="33">*<pos:position pos:line="556" pos:column="34"/></operator><operator pos:line="556" pos:column="34">(<pos:position pos:line="556" pos:column="35"/></operator><operator pos:line="556" pos:column="35">++<pos:position pos:line="556" pos:column="37"/></operator><name pos:line="556" pos:column="37">ptr<pos:position pos:line="556" pos:column="40"/></name><operator pos:line="556" pos:column="40">)<pos:position pos:line="556" pos:column="41"/></operator></expr>]<pos:position pos:line="556" pos:column="42"/></index></name> <operator pos:line="556" pos:column="43">&amp;<pos:position pos:line="556" pos:column="48"/></operator> <name pos:line="556" pos:column="45">ctype_meta<pos:position pos:line="556" pos:column="55"/></name><operator pos:line="556" pos:column="55">)<pos:position pos:line="556" pos:column="56"/></operator> <operator pos:line="556" pos:column="57">==<pos:position pos:line="556" pos:column="59"/></operator> <literal type="number" pos:line="556" pos:column="60">0<pos:position pos:line="556" pos:column="61"/></literal></expr>)<pos:position pos:line="556" pos:column="62"/></condition>;<pos:position pos:line="556" pos:column="63"/></do>

    <expr_stmt><expr><name pos:line="558" pos:column="5">ptr<pos:position pos:line="558" pos:column="8"/></name><operator pos:line="558" pos:column="8">--<pos:position pos:line="558" pos:column="10"/></operator></expr>;<pos:position pos:line="558" pos:column="11"/></expr_stmt>
    <expr_stmt><expr><name pos:line="559" pos:column="5">length<pos:position pos:line="559" pos:column="11"/></name> <operator pos:line="559" pos:column="12">+=<pos:position pos:line="559" pos:column="14"/></operator> <name pos:line="559" pos:column="15">runlength<pos:position pos:line="559" pos:column="24"/></name></expr>;<pos:position pos:line="559" pos:column="25"/></expr_stmt>
    <continue pos:line="560" pos:column="5">continue;<pos:position pos:line="560" pos:column="14"/></continue>
    }<pos:position pos:line="561" pos:column="6"/></block></switch>
  }<pos:position pos:line="562" pos:column="4"/></block></while>

<expr_stmt><expr><name pos:line="564" pos:column="1">length<pos:position pos:line="564" pos:column="7"/></name> <operator pos:line="564" pos:column="8">+=<pos:position pos:line="564" pos:column="10"/></operator> <literal type="number" pos:line="564" pos:column="11">4<pos:position pos:line="564" pos:column="12"/></literal></expr>;<pos:position pos:line="564" pos:column="13"/></expr_stmt>    <comment type="block" pos:line="564" pos:column="17">/* For final KET and END */</comment>

<if pos:line="566" pos:column="1">if <condition pos:line="566" pos:column="4">(<expr><name pos:line="566" pos:column="5">length<pos:position pos:line="566" pos:column="11"/></name> <operator pos:line="566" pos:column="12">&gt;<pos:position pos:line="566" pos:column="16"/></operator> <literal type="number" pos:line="566" pos:column="14">65539<pos:position pos:line="566" pos:column="19"/></literal></expr>)<pos:position pos:line="566" pos:column="20"/></condition><then pos:line="566" pos:column="20">
  <block pos:line="567" pos:column="3">{
  <expr_stmt><expr><operator pos:line="568" pos:column="3">*<pos:position pos:line="568" pos:column="4"/></operator><name pos:line="568" pos:column="4">errorptr<pos:position pos:line="568" pos:column="12"/></name> <operator pos:line="568" pos:column="13">=<pos:position pos:line="568" pos:column="14"/></operator> <name pos:line="568" pos:column="15">ERR20<pos:position pos:line="568" pos:column="20"/></name></expr>;<pos:position pos:line="568" pos:column="21"/></expr_stmt>
  <return pos:line="569" pos:column="3">return <expr><name pos:line="569" pos:column="10">NULL<pos:position pos:line="569" pos:column="14"/></name></expr>;<pos:position pos:line="569" pos:column="15"/></return>
  }<pos:position pos:line="570" pos:column="4"/></block></then></if>

<comment type="block" pos:line="572" pos:column="1">/* Compute the size of data block needed and get it, either from malloc or
externally provided function. We specify "code[0]" in the offsetof() expression
rather than just "code", because it has been reported that one broken compiler
fails on "code" because it is also an independent variable. It should make no
difference to the value of the offsetof(). */</comment>

<expr_stmt><expr><name pos:line="578" pos:column="1">size<pos:position pos:line="578" pos:column="5"/></name> <operator pos:line="578" pos:column="6">=<pos:position pos:line="578" pos:column="7"/></operator> <name pos:line="578" pos:column="8">length<pos:position pos:line="578" pos:column="14"/></name> <operator pos:line="578" pos:column="15">+<pos:position pos:line="578" pos:column="16"/></operator> <call><name pos:line="578" pos:column="17">offsetof<pos:position pos:line="578" pos:column="25"/></name><argument_list pos:line="578" pos:column="25">(<argument><expr><name pos:line="578" pos:column="26">real_pcre<pos:position pos:line="578" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="578" pos:column="37">code<pos:position pos:line="578" pos:column="41"/></name><index pos:line="578" pos:column="41">[<expr><literal type="number" pos:line="578" pos:column="42">0<pos:position pos:line="578" pos:column="43"/></literal></expr>]<pos:position pos:line="578" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="578" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="578" pos:column="46"/></expr_stmt>
<expr_stmt><expr><name pos:line="579" pos:column="1">re<pos:position pos:line="579" pos:column="3"/></name> <operator pos:line="579" pos:column="4">=<pos:position pos:line="579" pos:column="5"/></operator> <operator pos:line="579" pos:column="6">(<pos:position pos:line="579" pos:column="7"/></operator><name pos:line="579" pos:column="7">real_pcre<pos:position pos:line="579" pos:column="16"/></name> <operator pos:line="579" pos:column="17">*<pos:position pos:line="579" pos:column="18"/></operator><operator pos:line="579" pos:column="18">)<pos:position pos:line="579" pos:column="19"/></operator><call pos:line="579" pos:column="19">(<name pos:line="579" pos:column="20">pcre_malloc<pos:position pos:line="579" pos:column="31"/></name>)<argument_list pos:line="579" pos:column="32">(<argument><expr><name pos:line="579" pos:column="33">size<pos:position pos:line="579" pos:column="37"/></name></expr></argument>)<pos:position pos:line="579" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="579" pos:column="39"/></expr_stmt>

<if pos:line="581" pos:column="1">if <condition pos:line="581" pos:column="4">(<expr><name pos:line="581" pos:column="5">re<pos:position pos:line="581" pos:column="7"/></name> <operator pos:line="581" pos:column="8">==<pos:position pos:line="581" pos:column="10"/></operator> <name pos:line="581" pos:column="11">NULL<pos:position pos:line="581" pos:column="15"/></name></expr>)<pos:position pos:line="581" pos:column="16"/></condition><then pos:line="581" pos:column="16">
  <block pos:line="582" pos:column="3">{
  <expr_stmt><expr><operator pos:line="583" pos:column="3">*<pos:position pos:line="583" pos:column="4"/></operator><name pos:line="583" pos:column="4">errorptr<pos:position pos:line="583" pos:column="12"/></name> <operator pos:line="583" pos:column="13">=<pos:position pos:line="583" pos:column="14"/></operator> <name pos:line="583" pos:column="15">ERR21<pos:position pos:line="583" pos:column="20"/></name></expr>;<pos:position pos:line="583" pos:column="21"/></expr_stmt>
  <return pos:line="584" pos:column="3">return <expr><name pos:line="584" pos:column="10">NULL<pos:position pos:line="584" pos:column="14"/></name></expr>;<pos:position pos:line="584" pos:column="15"/></return>
  }<pos:position pos:line="585" pos:column="4"/></block></then></if>

<comment type="block" pos:line="587" pos:column="1">/* Put in the magic number, and save the size, options, and table pointer */</comment>

<expr_stmt><expr><name><name pos:line="589" pos:column="1">re<pos:position pos:line="589" pos:column="3"/></name><operator pos:line="589" pos:column="3">-&gt;<pos:position pos:line="589" pos:column="8"/></operator><name pos:line="589" pos:column="5">magic_number<pos:position pos:line="589" pos:column="17"/></name></name> <operator pos:line="589" pos:column="18">=<pos:position pos:line="589" pos:column="19"/></operator> <name pos:line="589" pos:column="20">MAGIC_NUMBER<pos:position pos:line="589" pos:column="32"/></name></expr>;<pos:position pos:line="589" pos:column="33"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="590" pos:column="1">re<pos:position pos:line="590" pos:column="3"/></name><operator pos:line="590" pos:column="3">-&gt;<pos:position pos:line="590" pos:column="8"/></operator><name pos:line="590" pos:column="5">size<pos:position pos:line="590" pos:column="9"/></name></name> <operator pos:line="590" pos:column="10">=<pos:position pos:line="590" pos:column="11"/></operator> <name pos:line="590" pos:column="12">size<pos:position pos:line="590" pos:column="16"/></name></expr>;<pos:position pos:line="590" pos:column="17"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="591" pos:column="1">re<pos:position pos:line="591" pos:column="3"/></name><operator pos:line="591" pos:column="3">-&gt;<pos:position pos:line="591" pos:column="8"/></operator><name pos:line="591" pos:column="5">options<pos:position pos:line="591" pos:column="12"/></name></name> <operator pos:line="591" pos:column="13">=<pos:position pos:line="591" pos:column="14"/></operator> <name pos:line="591" pos:column="15">options<pos:position pos:line="591" pos:column="22"/></name></expr>;<pos:position pos:line="591" pos:column="23"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="592" pos:column="1">re<pos:position pos:line="592" pos:column="3"/></name><operator pos:line="592" pos:column="3">-&gt;<pos:position pos:line="592" pos:column="8"/></operator><name pos:line="592" pos:column="5">tables<pos:position pos:line="592" pos:column="11"/></name></name> <operator pos:line="592" pos:column="12">=<pos:position pos:line="592" pos:column="13"/></operator> <name pos:line="592" pos:column="14">tables<pos:position pos:line="592" pos:column="20"/></name></expr>;<pos:position pos:line="592" pos:column="21"/></expr_stmt>

<comment type="block" pos:line="594" pos:column="1">/* Set up a starting, non-extracting bracket, then compile the expression. On
error, *errorptr will be set non-NULL, so we don't need to look at the result
of the function here. */</comment>

<expr_stmt><expr><name pos:line="598" pos:column="1">ptr<pos:position pos:line="598" pos:column="4"/></name> <operator pos:line="598" pos:column="5">=<pos:position pos:line="598" pos:column="6"/></operator> <operator pos:line="598" pos:column="7">(<pos:position pos:line="598" pos:column="8"/></operator><specifier pos:line="598" pos:column="8">const<pos:position pos:line="598" pos:column="13"/></specifier> <name pos:line="598" pos:column="14">uschar<pos:position pos:line="598" pos:column="20"/></name> <operator pos:line="598" pos:column="21">*<pos:position pos:line="598" pos:column="22"/></operator><operator pos:line="598" pos:column="22">)<pos:position pos:line="598" pos:column="23"/></operator><name pos:line="598" pos:column="23">pattern<pos:position pos:line="598" pos:column="30"/></name></expr>;<pos:position pos:line="598" pos:column="31"/></expr_stmt>
<expr_stmt><expr><name pos:line="599" pos:column="1">code<pos:position pos:line="599" pos:column="5"/></name> <operator pos:line="599" pos:column="6">=<pos:position pos:line="599" pos:column="7"/></operator> <name><name pos:line="599" pos:column="8">re<pos:position pos:line="599" pos:column="10"/></name><operator pos:line="599" pos:column="10">-&gt;<pos:position pos:line="599" pos:column="15"/></operator><name pos:line="599" pos:column="12">code<pos:position pos:line="599" pos:column="16"/></name></name></expr>;<pos:position pos:line="599" pos:column="17"/></expr_stmt>
<expr_stmt><expr><operator pos:line="600" pos:column="1">*<pos:position pos:line="600" pos:column="2"/></operator><name pos:line="600" pos:column="2">code<pos:position pos:line="600" pos:column="6"/></name> <operator pos:line="600" pos:column="7">=<pos:position pos:line="600" pos:column="8"/></operator> <name pos:line="600" pos:column="9">OP_BRA<pos:position pos:line="600" pos:column="15"/></name></expr>;<pos:position pos:line="600" pos:column="16"/></expr_stmt>
<expr_stmt><expr><name pos:line="601" pos:column="1">bracount<pos:position pos:line="601" pos:column="9"/></name> <operator pos:line="601" pos:column="10">=<pos:position pos:line="601" pos:column="11"/></operator> <literal type="number" pos:line="601" pos:column="12">0<pos:position pos:line="601" pos:column="13"/></literal></expr>;<pos:position pos:line="601" pos:column="14"/></expr_stmt>
<expr_stmt><expr><operator pos:line="602" pos:column="1">(<pos:position pos:line="602" pos:column="2"/></operator><name pos:line="602" pos:column="2">void<pos:position pos:line="602" pos:column="6"/></name><operator pos:line="602" pos:column="6">)<pos:position pos:line="602" pos:column="7"/></operator><call><name pos:line="602" pos:column="7">compile_regex<pos:position pos:line="602" pos:column="20"/></name><argument_list pos:line="602" pos:column="20">(<argument><expr><name pos:line="602" pos:column="21">options<pos:position pos:line="602" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="602" pos:column="30">-<pos:position pos:line="602" pos:column="31"/></operator><literal type="number" pos:line="602" pos:column="31">1<pos:position pos:line="602" pos:column="32"/></literal></expr></argument>, <argument><expr><operator pos:line="602" pos:column="34">&amp;<pos:position pos:line="602" pos:column="39"/></operator><name pos:line="602" pos:column="35">bracount<pos:position pos:line="602" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="602" pos:column="45">&amp;<pos:position pos:line="602" pos:column="50"/></operator><name pos:line="602" pos:column="46">code<pos:position pos:line="602" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="602" pos:column="52">&amp;<pos:position pos:line="602" pos:column="57"/></operator><name pos:line="602" pos:column="53">ptr<pos:position pos:line="602" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="602" pos:column="58">errorptr<pos:position pos:line="602" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="602" pos:column="68">FALSE<pos:position pos:line="602" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="602" pos:column="75">0<pos:position pos:line="602" pos:column="76"/></literal></expr></argument>,
  <argument><expr><operator pos:line="603" pos:column="3">&amp;<pos:position pos:line="603" pos:column="8"/></operator><name pos:line="603" pos:column="4">reqchar<pos:position pos:line="603" pos:column="11"/></name></expr></argument>, <argument><expr><operator pos:line="603" pos:column="13">&amp;<pos:position pos:line="603" pos:column="18"/></operator><name pos:line="603" pos:column="14">countlits<pos:position pos:line="603" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="603" pos:column="25">&amp;<pos:position pos:line="603" pos:column="30"/></operator><name pos:line="603" pos:column="26">compile_block<pos:position pos:line="603" pos:column="39"/></name></expr></argument>)<pos:position pos:line="603" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="603" pos:column="41"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="604" pos:column="1">re<pos:position pos:line="604" pos:column="3"/></name><operator pos:line="604" pos:column="3">-&gt;<pos:position pos:line="604" pos:column="8"/></operator><name pos:line="604" pos:column="5">top_bracket<pos:position pos:line="604" pos:column="16"/></name></name> <operator pos:line="604" pos:column="17">=<pos:position pos:line="604" pos:column="18"/></operator> <name pos:line="604" pos:column="19">bracount<pos:position pos:line="604" pos:column="27"/></name></expr>;<pos:position pos:line="604" pos:column="28"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="605" pos:column="1">re<pos:position pos:line="605" pos:column="3"/></name><operator pos:line="605" pos:column="3">-&gt;<pos:position pos:line="605" pos:column="8"/></operator><name pos:line="605" pos:column="5">top_backref<pos:position pos:line="605" pos:column="16"/></name></name> <operator pos:line="605" pos:column="17">=<pos:position pos:line="605" pos:column="18"/></operator> <name pos:line="605" pos:column="19">top_backref<pos:position pos:line="605" pos:column="30"/></name></expr>;<pos:position pos:line="605" pos:column="31"/></expr_stmt>

<comment type="block" pos:line="607" pos:column="1">/* If not reached end of pattern on success, there's an excess bracket. */</comment>

<if pos:line="609" pos:column="1">if <condition pos:line="609" pos:column="4">(<expr><operator pos:line="609" pos:column="5">*<pos:position pos:line="609" pos:column="6"/></operator><name pos:line="609" pos:column="6">errorptr<pos:position pos:line="609" pos:column="14"/></name> <operator pos:line="609" pos:column="15">==<pos:position pos:line="609" pos:column="17"/></operator> <name pos:line="609" pos:column="18">NULL<pos:position pos:line="609" pos:column="22"/></name> <operator pos:line="609" pos:column="23">&amp;&amp;<pos:position pos:line="609" pos:column="33"/></operator> <operator pos:line="609" pos:column="26">*<pos:position pos:line="609" pos:column="27"/></operator><name pos:line="609" pos:column="27">ptr<pos:position pos:line="609" pos:column="30"/></name> <operator pos:line="609" pos:column="31">!=<pos:position pos:line="609" pos:column="33"/></operator> <literal type="number" pos:line="609" pos:column="34">0<pos:position pos:line="609" pos:column="35"/></literal></expr>)<pos:position pos:line="609" pos:column="36"/></condition><then pos:line="609" pos:column="36"> <block type="pseudo"><expr_stmt><expr><operator pos:line="609" pos:column="37">*<pos:position pos:line="609" pos:column="38"/></operator><name pos:line="609" pos:column="38">errorptr<pos:position pos:line="609" pos:column="46"/></name> <operator pos:line="609" pos:column="47">=<pos:position pos:line="609" pos:column="48"/></operator> <name pos:line="609" pos:column="49">ERR22<pos:position pos:line="609" pos:column="54"/></name></expr>;<pos:position pos:line="609" pos:column="55"/></expr_stmt></block></then></if>

<comment type="block" pos:line="611" pos:column="1">/* Fill in the terminating state and check for disastrous overflow, but
if debugging, leave the test till after things are printed out. */</comment>

<expr_stmt><expr><operator pos:line="614" pos:column="1">*<pos:position pos:line="614" pos:column="2"/></operator><name pos:line="614" pos:column="2">code<pos:position pos:line="614" pos:column="6"/></name><operator pos:line="614" pos:column="6">++<pos:position pos:line="614" pos:column="8"/></operator> <operator pos:line="614" pos:column="9">=<pos:position pos:line="614" pos:column="10"/></operator> <name pos:line="614" pos:column="11">OP_END<pos:position pos:line="614" pos:column="17"/></name></expr>;<pos:position pos:line="614" pos:column="18"/></expr_stmt>

<cpp:ifndef pos:line="616" pos:column="1">#<cpp:directive pos:line="616" pos:column="2">ifndef<pos:position pos:line="616" pos:column="8"/></cpp:directive> <name pos:line="616" pos:column="9">DEBUG<pos:position pos:line="616" pos:column="14"/></name></cpp:ifndef>
<if pos:line="617" pos:column="1">if <condition pos:line="617" pos:column="4">(<expr><name pos:line="617" pos:column="5">code<pos:position pos:line="617" pos:column="9"/></name> <operator pos:line="617" pos:column="10">-<pos:position pos:line="617" pos:column="11"/></operator> <name><name pos:line="617" pos:column="12">re<pos:position pos:line="617" pos:column="14"/></name><operator pos:line="617" pos:column="14">-&gt;<pos:position pos:line="617" pos:column="19"/></operator><name pos:line="617" pos:column="16">code<pos:position pos:line="617" pos:column="20"/></name></name> <operator pos:line="617" pos:column="21">&gt;<pos:position pos:line="617" pos:column="25"/></operator> <name pos:line="617" pos:column="23">length<pos:position pos:line="617" pos:column="29"/></name></expr>)<pos:position pos:line="617" pos:column="30"/></condition><then pos:line="617" pos:column="30"> <block type="pseudo"><expr_stmt><expr><operator pos:line="617" pos:column="31">*<pos:position pos:line="617" pos:column="32"/></operator><name pos:line="617" pos:column="32">errorptr<pos:position pos:line="617" pos:column="40"/></name> <operator pos:line="617" pos:column="41">=<pos:position pos:line="617" pos:column="42"/></operator> <name pos:line="617" pos:column="43">ERR23<pos:position pos:line="617" pos:column="48"/></name></expr>;<pos:position pos:line="617" pos:column="49"/></expr_stmt></block></then></if>
<cpp:endif pos:line="618" pos:column="1">#<cpp:directive pos:line="618" pos:column="2">endif<pos:position pos:line="618" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="620" pos:column="1">/* Give an error if there's back reference to a non-existent capturing
subpattern. */</comment>

<if pos:line="623" pos:column="1">if <condition pos:line="623" pos:column="4">(<expr><name pos:line="623" pos:column="5">top_backref<pos:position pos:line="623" pos:column="16"/></name> <operator pos:line="623" pos:column="17">&gt;<pos:position pos:line="623" pos:column="21"/></operator> <name><name pos:line="623" pos:column="19">re<pos:position pos:line="623" pos:column="21"/></name><operator pos:line="623" pos:column="21">-&gt;<pos:position pos:line="623" pos:column="26"/></operator><name pos:line="623" pos:column="23">top_bracket<pos:position pos:line="623" pos:column="34"/></name></name></expr>)<pos:position pos:line="623" pos:column="35"/></condition><then pos:line="623" pos:column="35"> <block type="pseudo"><expr_stmt><expr><operator pos:line="623" pos:column="36">*<pos:position pos:line="623" pos:column="37"/></operator><name pos:line="623" pos:column="37">errorptr<pos:position pos:line="623" pos:column="45"/></name> <operator pos:line="623" pos:column="46">=<pos:position pos:line="623" pos:column="47"/></operator> <name pos:line="623" pos:column="48">ERR15<pos:position pos:line="623" pos:column="53"/></name></expr>;<pos:position pos:line="623" pos:column="54"/></expr_stmt></block></then></if>

<comment type="block" pos:line="625" pos:column="1">/* Failed to compile */</comment>

<if pos:line="627" pos:column="1">if <condition pos:line="627" pos:column="4">(<expr><operator pos:line="627" pos:column="5">*<pos:position pos:line="627" pos:column="6"/></operator><name pos:line="627" pos:column="6">errorptr<pos:position pos:line="627" pos:column="14"/></name> <operator pos:line="627" pos:column="15">!=<pos:position pos:line="627" pos:column="17"/></operator> <name pos:line="627" pos:column="18">NULL<pos:position pos:line="627" pos:column="22"/></name></expr>)<pos:position pos:line="627" pos:column="23"/></condition><then pos:line="627" pos:column="23">
  <block pos:line="628" pos:column="3">{
  <expr_stmt><expr><call pos:line="629" pos:column="3">(<name pos:line="629" pos:column="4">pcre_free<pos:position pos:line="629" pos:column="13"/></name>)<argument_list pos:line="629" pos:column="14">(<argument><expr><name pos:line="629" pos:column="15">re<pos:position pos:line="629" pos:column="17"/></name></expr></argument>)<pos:position pos:line="629" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="629" pos:column="19"/></expr_stmt>
  <label><name pos:line="630" pos:column="3">PCRE_ERROR_RETURN<pos:position pos:line="630" pos:column="20"/></name>:<pos:position pos:line="630" pos:column="21"/></label>
  <expr_stmt><expr><operator pos:line="631" pos:column="3">*<pos:position pos:line="631" pos:column="4"/></operator><name pos:line="631" pos:column="4">erroroffset<pos:position pos:line="631" pos:column="15"/></name> <operator pos:line="631" pos:column="16">=<pos:position pos:line="631" pos:column="17"/></operator> <name pos:line="631" pos:column="18">ptr<pos:position pos:line="631" pos:column="21"/></name> <operator pos:line="631" pos:column="22">-<pos:position pos:line="631" pos:column="23"/></operator> <operator pos:line="631" pos:column="24">(<pos:position pos:line="631" pos:column="25"/></operator><specifier pos:line="631" pos:column="25">const<pos:position pos:line="631" pos:column="30"/></specifier> <name pos:line="631" pos:column="31">uschar<pos:position pos:line="631" pos:column="37"/></name> <operator pos:line="631" pos:column="38">*<pos:position pos:line="631" pos:column="39"/></operator><operator pos:line="631" pos:column="39">)<pos:position pos:line="631" pos:column="40"/></operator><name pos:line="631" pos:column="40">pattern<pos:position pos:line="631" pos:column="47"/></name></expr>;<pos:position pos:line="631" pos:column="48"/></expr_stmt>
  <return pos:line="632" pos:column="3">return <expr><name pos:line="632" pos:column="10">NULL<pos:position pos:line="632" pos:column="14"/></name></expr>;<pos:position pos:line="632" pos:column="15"/></return>
  }<pos:position pos:line="633" pos:column="4"/></block></then></if>

<comment type="block" pos:line="635" pos:column="1">/* If the anchored option was not passed, set flag if we can determine that the
pattern is anchored by virtue of ^ characters or \A or anything else (such as
starting with .* when DOTALL is set).

Otherwise, see if we can determine what the first character has to be, because
that speeds up unanchored matches no end. If not, see if we can set the
PCRE_STARTLINE flag. This is helpful for multiline matches when all branches
start with ^. and also when all branches start with .* for non-DOTALL matches.
*/</comment>

<if pos:line="645" pos:column="1">if <condition pos:line="645" pos:column="4">(<expr><operator pos:line="645" pos:column="5">(<pos:position pos:line="645" pos:column="6"/></operator><name pos:line="645" pos:column="6">options<pos:position pos:line="645" pos:column="13"/></name> <operator pos:line="645" pos:column="14">&amp;<pos:position pos:line="645" pos:column="19"/></operator> <name pos:line="645" pos:column="16">PCRE_ANCHORED<pos:position pos:line="645" pos:column="29"/></name><operator pos:line="645" pos:column="29">)<pos:position pos:line="645" pos:column="30"/></operator> <operator pos:line="645" pos:column="31">==<pos:position pos:line="645" pos:column="33"/></operator> <literal type="number" pos:line="645" pos:column="34">0<pos:position pos:line="645" pos:column="35"/></literal></expr>)<pos:position pos:line="645" pos:column="36"/></condition><then pos:line="645" pos:column="36">
  <block pos:line="646" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="647" pos:column="3">int<pos:position pos:line="647" pos:column="6"/></name></type> <name pos:line="647" pos:column="7">temp_options<pos:position pos:line="647" pos:column="19"/></name> <init pos:line="647" pos:column="20">= <expr><name pos:line="647" pos:column="22">options<pos:position pos:line="647" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="647" pos:column="30"/></decl_stmt>
  <if pos:line="648" pos:column="3">if <condition pos:line="648" pos:column="6">(<expr><call><name pos:line="648" pos:column="7">is_anchored<pos:position pos:line="648" pos:column="18"/></name><argument_list pos:line="648" pos:column="18">(<argument><expr><name><name pos:line="648" pos:column="19">re<pos:position pos:line="648" pos:column="21"/></name><operator pos:line="648" pos:column="21">-&gt;<pos:position pos:line="648" pos:column="26"/></operator><name pos:line="648" pos:column="23">code<pos:position pos:line="648" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="648" pos:column="29">&amp;<pos:position pos:line="648" pos:column="34"/></operator><name pos:line="648" pos:column="30">temp_options<pos:position pos:line="648" pos:column="42"/></name></expr></argument>)<pos:position pos:line="648" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="648" pos:column="44"/></condition><then pos:line="648" pos:column="44">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="649" pos:column="5">re<pos:position pos:line="649" pos:column="7"/></name><operator pos:line="649" pos:column="7">-&gt;<pos:position pos:line="649" pos:column="12"/></operator><name pos:line="649" pos:column="9">options<pos:position pos:line="649" pos:column="16"/></name></name> <operator pos:line="649" pos:column="17">|=<pos:position pos:line="649" pos:column="19"/></operator> <name pos:line="649" pos:column="20">PCRE_ANCHORED<pos:position pos:line="649" pos:column="33"/></name></expr>;<pos:position pos:line="649" pos:column="34"/></expr_stmt></block></then>
  <else pos:line="650" pos:column="3">else
    <block pos:line="651" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="652" pos:column="5">int<pos:position pos:line="652" pos:column="8"/></name></type> <name pos:line="652" pos:column="9">ch<pos:position pos:line="652" pos:column="11"/></name> <init pos:line="652" pos:column="12">= <expr><call><name pos:line="652" pos:column="14">find_firstchar<pos:position pos:line="652" pos:column="28"/></name><argument_list pos:line="652" pos:column="28">(<argument><expr><name><name pos:line="652" pos:column="29">re<pos:position pos:line="652" pos:column="31"/></name><operator pos:line="652" pos:column="31">-&gt;<pos:position pos:line="652" pos:column="36"/></operator><name pos:line="652" pos:column="33">code<pos:position pos:line="652" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="652" pos:column="39">&amp;<pos:position pos:line="652" pos:column="44"/></operator><name pos:line="652" pos:column="40">temp_options<pos:position pos:line="652" pos:column="52"/></name></expr></argument>)<pos:position pos:line="652" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="652" pos:column="54"/></decl_stmt>
    <if pos:line="653" pos:column="5">if <condition pos:line="653" pos:column="8">(<expr><name pos:line="653" pos:column="9">ch<pos:position pos:line="653" pos:column="11"/></name> <operator pos:line="653" pos:column="12">&gt;=<pos:position pos:line="653" pos:column="17"/></operator> <literal type="number" pos:line="653" pos:column="15">0<pos:position pos:line="653" pos:column="16"/></literal></expr>)<pos:position pos:line="653" pos:column="17"/></condition><then pos:line="653" pos:column="17">
      <block pos:line="654" pos:column="7">{
      <expr_stmt><expr><name><name pos:line="655" pos:column="7">re<pos:position pos:line="655" pos:column="9"/></name><operator pos:line="655" pos:column="9">-&gt;<pos:position pos:line="655" pos:column="14"/></operator><name pos:line="655" pos:column="11">first_char<pos:position pos:line="655" pos:column="21"/></name></name> <operator pos:line="655" pos:column="22">=<pos:position pos:line="655" pos:column="23"/></operator> <name pos:line="655" pos:column="24">ch<pos:position pos:line="655" pos:column="26"/></name></expr>;<pos:position pos:line="655" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="656" pos:column="7">re<pos:position pos:line="656" pos:column="9"/></name><operator pos:line="656" pos:column="9">-&gt;<pos:position pos:line="656" pos:column="14"/></operator><name pos:line="656" pos:column="11">options<pos:position pos:line="656" pos:column="18"/></name></name> <operator pos:line="656" pos:column="19">|=<pos:position pos:line="656" pos:column="21"/></operator> <name pos:line="656" pos:column="22">PCRE_FIRSTSET<pos:position pos:line="656" pos:column="35"/></name></expr>;<pos:position pos:line="656" pos:column="36"/></expr_stmt>
      }<pos:position pos:line="657" pos:column="8"/></block></then>
    <elseif pos:line="658" pos:column="5">else <if pos:line="658" pos:column="10">if <condition pos:line="658" pos:column="13">(<expr><call><name pos:line="658" pos:column="14">is_startline<pos:position pos:line="658" pos:column="26"/></name><argument_list pos:line="658" pos:column="26">(<argument><expr><name><name pos:line="658" pos:column="27">re<pos:position pos:line="658" pos:column="29"/></name><operator pos:line="658" pos:column="29">-&gt;<pos:position pos:line="658" pos:column="34"/></operator><name pos:line="658" pos:column="31">code<pos:position pos:line="658" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="658" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="658" pos:column="37"/></condition><then pos:line="658" pos:column="37">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="659" pos:column="7">re<pos:position pos:line="659" pos:column="9"/></name><operator pos:line="659" pos:column="9">-&gt;<pos:position pos:line="659" pos:column="14"/></operator><name pos:line="659" pos:column="11">options<pos:position pos:line="659" pos:column="18"/></name></name> <operator pos:line="659" pos:column="19">|=<pos:position pos:line="659" pos:column="21"/></operator> <name pos:line="659" pos:column="22">PCRE_STARTLINE<pos:position pos:line="659" pos:column="36"/></name></expr>;<pos:position pos:line="659" pos:column="37"/></expr_stmt></block></then></if></elseif></if>
    }<pos:position pos:line="660" pos:column="6"/></block></else></if>
  }<pos:position pos:line="661" pos:column="4"/></block></then></if>

<comment type="block" pos:line="663" pos:column="1">/* Save the last required character if there are at least two literal
characters on all paths, or if there is no first character setting. */</comment>

<if pos:line="666" pos:column="1">if <condition pos:line="666" pos:column="4">(<expr><name pos:line="666" pos:column="5">reqchar<pos:position pos:line="666" pos:column="12"/></name> <operator pos:line="666" pos:column="13">&gt;=<pos:position pos:line="666" pos:column="18"/></operator> <literal type="number" pos:line="666" pos:column="16">0<pos:position pos:line="666" pos:column="17"/></literal> <operator pos:line="666" pos:column="18">&amp;&amp;<pos:position pos:line="666" pos:column="28"/></operator> <operator pos:line="666" pos:column="21">(<pos:position pos:line="666" pos:column="22"/></operator><name pos:line="666" pos:column="22">countlits<pos:position pos:line="666" pos:column="31"/></name> <operator pos:line="666" pos:column="32">&gt;<pos:position pos:line="666" pos:column="36"/></operator> <literal type="number" pos:line="666" pos:column="34">1<pos:position pos:line="666" pos:column="35"/></literal> <operator pos:line="666" pos:column="36">||<pos:position pos:line="666" pos:column="38"/></operator> <operator pos:line="666" pos:column="39">(<pos:position pos:line="666" pos:column="40"/></operator><name><name pos:line="666" pos:column="40">re<pos:position pos:line="666" pos:column="42"/></name><operator pos:line="666" pos:column="42">-&gt;<pos:position pos:line="666" pos:column="47"/></operator><name pos:line="666" pos:column="44">options<pos:position pos:line="666" pos:column="51"/></name></name> <operator pos:line="666" pos:column="52">&amp;<pos:position pos:line="666" pos:column="57"/></operator> <name pos:line="666" pos:column="54">PCRE_FIRSTSET<pos:position pos:line="666" pos:column="67"/></name><operator pos:line="666" pos:column="67">)<pos:position pos:line="666" pos:column="68"/></operator> <operator pos:line="666" pos:column="69">==<pos:position pos:line="666" pos:column="71"/></operator> <literal type="number" pos:line="666" pos:column="72">0<pos:position pos:line="666" pos:column="73"/></literal><operator pos:line="666" pos:column="73">)<pos:position pos:line="666" pos:column="74"/></operator></expr>)<pos:position pos:line="666" pos:column="75"/></condition><then pos:line="666" pos:column="75">
  <block pos:line="667" pos:column="3">{
  <expr_stmt><expr><name><name pos:line="668" pos:column="3">re<pos:position pos:line="668" pos:column="5"/></name><operator pos:line="668" pos:column="5">-&gt;<pos:position pos:line="668" pos:column="10"/></operator><name pos:line="668" pos:column="7">req_char<pos:position pos:line="668" pos:column="15"/></name></name> <operator pos:line="668" pos:column="16">=<pos:position pos:line="668" pos:column="17"/></operator> <name pos:line="668" pos:column="18">reqchar<pos:position pos:line="668" pos:column="25"/></name></expr>;<pos:position pos:line="668" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="669" pos:column="3">re<pos:position pos:line="669" pos:column="5"/></name><operator pos:line="669" pos:column="5">-&gt;<pos:position pos:line="669" pos:column="10"/></operator><name pos:line="669" pos:column="7">options<pos:position pos:line="669" pos:column="14"/></name></name> <operator pos:line="669" pos:column="15">|=<pos:position pos:line="669" pos:column="17"/></operator> <name pos:line="669" pos:column="18">PCRE_REQCHSET<pos:position pos:line="669" pos:column="31"/></name></expr>;<pos:position pos:line="669" pos:column="32"/></expr_stmt>
  }<pos:position pos:line="670" pos:column="4"/></block></then></if>

<comment type="block" pos:line="672" pos:column="1">/* Print out the compiled data for debugging */</comment>

<cpp:ifdef pos:line="674" pos:column="1">#<cpp:directive pos:line="674" pos:column="2">ifdef<pos:position pos:line="674" pos:column="7"/></cpp:directive> <name pos:line="674" pos:column="8">DEBUG<pos:position pos:line="674" pos:column="13"/></name></cpp:ifdef>

<expr_stmt><expr><call><name pos:line="676" pos:column="1">printf<pos:position pos:line="676" pos:column="7"/></name><argument_list pos:line="676" pos:column="7">(<argument><expr><literal type="string" pos:line="676" pos:column="8">"Length = %d top_bracket = %d top_backref = %d\n"<pos:position pos:line="676" pos:column="57"/></literal></expr></argument>,
  <argument><expr><name pos:line="677" pos:column="3">length<pos:position pos:line="677" pos:column="9"/></name></expr></argument>, <argument><expr><name><name pos:line="677" pos:column="11">re<pos:position pos:line="677" pos:column="13"/></name><operator pos:line="677" pos:column="13">-&gt;<pos:position pos:line="677" pos:column="18"/></operator><name pos:line="677" pos:column="15">top_bracket<pos:position pos:line="677" pos:column="26"/></name></name></expr></argument>, <argument><expr><name><name pos:line="677" pos:column="28">re<pos:position pos:line="677" pos:column="30"/></name><operator pos:line="677" pos:column="30">-&gt;<pos:position pos:line="677" pos:column="35"/></operator><name pos:line="677" pos:column="32">top_backref<pos:position pos:line="677" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="677" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="677" pos:column="45"/></expr_stmt>

<if pos:line="679" pos:column="1">if <condition pos:line="679" pos:column="4">(<expr><name><name pos:line="679" pos:column="5">re<pos:position pos:line="679" pos:column="7"/></name><operator pos:line="679" pos:column="7">-&gt;<pos:position pos:line="679" pos:column="12"/></operator><name pos:line="679" pos:column="9">options<pos:position pos:line="679" pos:column="16"/></name></name> <operator pos:line="679" pos:column="17">!=<pos:position pos:line="679" pos:column="19"/></operator> <literal type="number" pos:line="679" pos:column="20">0<pos:position pos:line="679" pos:column="21"/></literal></expr>)<pos:position pos:line="679" pos:column="22"/></condition><then pos:line="679" pos:column="22">
  <block pos:line="680" pos:column="3">{
  <expr_stmt><expr><call><name pos:line="681" pos:column="3">printf<pos:position pos:line="681" pos:column="9"/></name><argument_list pos:line="681" pos:column="9">(<argument><expr><literal type="string" pos:line="681" pos:column="10">"%s%s%s%s%s%s%s%s%s\n"<pos:position pos:line="681" pos:column="32"/></literal></expr></argument>,
    <argument><expr><ternary><condition><expr><operator pos:line="682" pos:column="5">(<pos:position pos:line="682" pos:column="6"/></operator><operator pos:line="682" pos:column="6">(<pos:position pos:line="682" pos:column="7"/></operator><name><name pos:line="682" pos:column="7">re<pos:position pos:line="682" pos:column="9"/></name><operator pos:line="682" pos:column="9">-&gt;<pos:position pos:line="682" pos:column="14"/></operator><name pos:line="682" pos:column="11">options<pos:position pos:line="682" pos:column="18"/></name></name> <operator pos:line="682" pos:column="19">&amp;<pos:position pos:line="682" pos:column="24"/></operator> <name pos:line="682" pos:column="21">PCRE_ANCHORED<pos:position pos:line="682" pos:column="34"/></name><operator pos:line="682" pos:column="34">)<pos:position pos:line="682" pos:column="35"/></operator> <operator pos:line="682" pos:column="36">!=<pos:position pos:line="682" pos:column="38"/></operator> <literal type="number" pos:line="682" pos:column="39">0<pos:position pos:line="682" pos:column="40"/></literal><operator pos:line="682" pos:column="40">)<pos:position pos:line="682" pos:column="41"/></operator></expr>?<pos:position pos:line="682" pos:column="42"/></condition><then pos:line="682" pos:column="42"> <expr><literal type="string" pos:line="682" pos:column="43">"anchored "<pos:position pos:line="682" pos:column="54"/></literal></expr> <pos:position pos:line="682" pos:column="55"/></then><else pos:line="682" pos:column="55">: <expr><literal type="string" pos:line="682" pos:column="57">""<pos:position pos:line="682" pos:column="59"/></literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator pos:line="683" pos:column="5">(<pos:position pos:line="683" pos:column="6"/></operator><operator pos:line="683" pos:column="6">(<pos:position pos:line="683" pos:column="7"/></operator><name><name pos:line="683" pos:column="7">re<pos:position pos:line="683" pos:column="9"/></name><operator pos:line="683" pos:column="9">-&gt;<pos:position pos:line="683" pos:column="14"/></operator><name pos:line="683" pos:column="11">options<pos:position pos:line="683" pos:column="18"/></name></name> <operator pos:line="683" pos:column="19">&amp;<pos:position pos:line="683" pos:column="24"/></operator> <name pos:line="683" pos:column="21">PCRE_CASELESS<pos:position pos:line="683" pos:column="34"/></name><operator pos:line="683" pos:column="34">)<pos:position pos:line="683" pos:column="35"/></operator> <operator pos:line="683" pos:column="36">!=<pos:position pos:line="683" pos:column="38"/></operator> <literal type="number" pos:line="683" pos:column="39">0<pos:position pos:line="683" pos:column="40"/></literal><operator pos:line="683" pos:column="40">)<pos:position pos:line="683" pos:column="41"/></operator></expr>?<pos:position pos:line="683" pos:column="42"/></condition><then pos:line="683" pos:column="42"> <expr><literal type="string" pos:line="683" pos:column="43">"caseless "<pos:position pos:line="683" pos:column="54"/></literal></expr> <pos:position pos:line="683" pos:column="55"/></then><else pos:line="683" pos:column="55">: <expr><literal type="string" pos:line="683" pos:column="57">""<pos:position pos:line="683" pos:column="59"/></literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator pos:line="684" pos:column="5">(<pos:position pos:line="684" pos:column="6"/></operator><operator pos:line="684" pos:column="6">(<pos:position pos:line="684" pos:column="7"/></operator><name><name pos:line="684" pos:column="7">re<pos:position pos:line="684" pos:column="9"/></name><operator pos:line="684" pos:column="9">-&gt;<pos:position pos:line="684" pos:column="14"/></operator><name pos:line="684" pos:column="11">options<pos:position pos:line="684" pos:column="18"/></name></name> <operator pos:line="684" pos:column="19">&amp;<pos:position pos:line="684" pos:column="24"/></operator> <name pos:line="684" pos:column="21">PCRE_ICHANGED<pos:position pos:line="684" pos:column="34"/></name><operator pos:line="684" pos:column="34">)<pos:position pos:line="684" pos:column="35"/></operator> <operator pos:line="684" pos:column="36">!=<pos:position pos:line="684" pos:column="38"/></operator> <literal type="number" pos:line="684" pos:column="39">0<pos:position pos:line="684" pos:column="40"/></literal><operator pos:line="684" pos:column="40">)<pos:position pos:line="684" pos:column="41"/></operator></expr>?<pos:position pos:line="684" pos:column="42"/></condition><then pos:line="684" pos:column="42"> <expr><literal type="string" pos:line="684" pos:column="43">"case state changed "<pos:position pos:line="684" pos:column="64"/></literal></expr> <pos:position pos:line="684" pos:column="65"/></then><else pos:line="684" pos:column="65">: <expr><literal type="string" pos:line="684" pos:column="67">""<pos:position pos:line="684" pos:column="69"/></literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator pos:line="685" pos:column="5">(<pos:position pos:line="685" pos:column="6"/></operator><operator pos:line="685" pos:column="6">(<pos:position pos:line="685" pos:column="7"/></operator><name><name pos:line="685" pos:column="7">re<pos:position pos:line="685" pos:column="9"/></name><operator pos:line="685" pos:column="9">-&gt;<pos:position pos:line="685" pos:column="14"/></operator><name pos:line="685" pos:column="11">options<pos:position pos:line="685" pos:column="18"/></name></name> <operator pos:line="685" pos:column="19">&amp;<pos:position pos:line="685" pos:column="24"/></operator> <name pos:line="685" pos:column="21">PCRE_EXTENDED<pos:position pos:line="685" pos:column="34"/></name><operator pos:line="685" pos:column="34">)<pos:position pos:line="685" pos:column="35"/></operator> <operator pos:line="685" pos:column="36">!=<pos:position pos:line="685" pos:column="38"/></operator> <literal type="number" pos:line="685" pos:column="39">0<pos:position pos:line="685" pos:column="40"/></literal><operator pos:line="685" pos:column="40">)<pos:position pos:line="685" pos:column="41"/></operator></expr>?<pos:position pos:line="685" pos:column="42"/></condition><then pos:line="685" pos:column="42"> <expr><literal type="string" pos:line="685" pos:column="43">"extended "<pos:position pos:line="685" pos:column="54"/></literal></expr> <pos:position pos:line="685" pos:column="55"/></then><else pos:line="685" pos:column="55">: <expr><literal type="string" pos:line="685" pos:column="57">""<pos:position pos:line="685" pos:column="59"/></literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator pos:line="686" pos:column="5">(<pos:position pos:line="686" pos:column="6"/></operator><operator pos:line="686" pos:column="6">(<pos:position pos:line="686" pos:column="7"/></operator><name><name pos:line="686" pos:column="7">re<pos:position pos:line="686" pos:column="9"/></name><operator pos:line="686" pos:column="9">-&gt;<pos:position pos:line="686" pos:column="14"/></operator><name pos:line="686" pos:column="11">options<pos:position pos:line="686" pos:column="18"/></name></name> <operator pos:line="686" pos:column="19">&amp;<pos:position pos:line="686" pos:column="24"/></operator> <name pos:line="686" pos:column="21">PCRE_MULTILINE<pos:position pos:line="686" pos:column="35"/></name><operator pos:line="686" pos:column="35">)<pos:position pos:line="686" pos:column="36"/></operator> <operator pos:line="686" pos:column="37">!=<pos:position pos:line="686" pos:column="39"/></operator> <literal type="number" pos:line="686" pos:column="40">0<pos:position pos:line="686" pos:column="41"/></literal><operator pos:line="686" pos:column="41">)<pos:position pos:line="686" pos:column="42"/></operator></expr>?<pos:position pos:line="686" pos:column="43"/></condition><then pos:line="686" pos:column="43"> <expr><literal type="string" pos:line="686" pos:column="44">"multiline "<pos:position pos:line="686" pos:column="56"/></literal></expr> <pos:position pos:line="686" pos:column="57"/></then><else pos:line="686" pos:column="57">: <expr><literal type="string" pos:line="686" pos:column="59">""<pos:position pos:line="686" pos:column="61"/></literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator pos:line="687" pos:column="5">(<pos:position pos:line="687" pos:column="6"/></operator><operator pos:line="687" pos:column="6">(<pos:position pos:line="687" pos:column="7"/></operator><name><name pos:line="687" pos:column="7">re<pos:position pos:line="687" pos:column="9"/></name><operator pos:line="687" pos:column="9">-&gt;<pos:position pos:line="687" pos:column="14"/></operator><name pos:line="687" pos:column="11">options<pos:position pos:line="687" pos:column="18"/></name></name> <operator pos:line="687" pos:column="19">&amp;<pos:position pos:line="687" pos:column="24"/></operator> <name pos:line="687" pos:column="21">PCRE_DOTALL<pos:position pos:line="687" pos:column="32"/></name><operator pos:line="687" pos:column="32">)<pos:position pos:line="687" pos:column="33"/></operator> <operator pos:line="687" pos:column="34">!=<pos:position pos:line="687" pos:column="36"/></operator> <literal type="number" pos:line="687" pos:column="37">0<pos:position pos:line="687" pos:column="38"/></literal><operator pos:line="687" pos:column="38">)<pos:position pos:line="687" pos:column="39"/></operator></expr>?<pos:position pos:line="687" pos:column="40"/></condition><then pos:line="687" pos:column="40"> <expr><literal type="string" pos:line="687" pos:column="41">"dotall "<pos:position pos:line="687" pos:column="50"/></literal></expr> <pos:position pos:line="687" pos:column="51"/></then><else pos:line="687" pos:column="51">: <expr><literal type="string" pos:line="687" pos:column="53">""<pos:position pos:line="687" pos:column="55"/></literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator pos:line="688" pos:column="5">(<pos:position pos:line="688" pos:column="6"/></operator><operator pos:line="688" pos:column="6">(<pos:position pos:line="688" pos:column="7"/></operator><name><name pos:line="688" pos:column="7">re<pos:position pos:line="688" pos:column="9"/></name><operator pos:line="688" pos:column="9">-&gt;<pos:position pos:line="688" pos:column="14"/></operator><name pos:line="688" pos:column="11">options<pos:position pos:line="688" pos:column="18"/></name></name> <operator pos:line="688" pos:column="19">&amp;<pos:position pos:line="688" pos:column="24"/></operator> <name pos:line="688" pos:column="21">PCRE_DOLLAR_ENDONLY<pos:position pos:line="688" pos:column="40"/></name><operator pos:line="688" pos:column="40">)<pos:position pos:line="688" pos:column="41"/></operator> <operator pos:line="688" pos:column="42">!=<pos:position pos:line="688" pos:column="44"/></operator> <literal type="number" pos:line="688" pos:column="45">0<pos:position pos:line="688" pos:column="46"/></literal><operator pos:line="688" pos:column="46">)<pos:position pos:line="688" pos:column="47"/></operator></expr>?<pos:position pos:line="688" pos:column="48"/></condition><then pos:line="688" pos:column="48"> <expr><literal type="string" pos:line="688" pos:column="49">"endonly "<pos:position pos:line="688" pos:column="59"/></literal></expr> <pos:position pos:line="688" pos:column="60"/></then><else pos:line="688" pos:column="60">: <expr><literal type="string" pos:line="688" pos:column="62">""<pos:position pos:line="688" pos:column="64"/></literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator pos:line="689" pos:column="5">(<pos:position pos:line="689" pos:column="6"/></operator><operator pos:line="689" pos:column="6">(<pos:position pos:line="689" pos:column="7"/></operator><name><name pos:line="689" pos:column="7">re<pos:position pos:line="689" pos:column="9"/></name><operator pos:line="689" pos:column="9">-&gt;<pos:position pos:line="689" pos:column="14"/></operator><name pos:line="689" pos:column="11">options<pos:position pos:line="689" pos:column="18"/></name></name> <operator pos:line="689" pos:column="19">&amp;<pos:position pos:line="689" pos:column="24"/></operator> <name pos:line="689" pos:column="21">PCRE_EXTRA<pos:position pos:line="689" pos:column="31"/></name><operator pos:line="689" pos:column="31">)<pos:position pos:line="689" pos:column="32"/></operator> <operator pos:line="689" pos:column="33">!=<pos:position pos:line="689" pos:column="35"/></operator> <literal type="number" pos:line="689" pos:column="36">0<pos:position pos:line="689" pos:column="37"/></literal><operator pos:line="689" pos:column="37">)<pos:position pos:line="689" pos:column="38"/></operator></expr>?<pos:position pos:line="689" pos:column="39"/></condition><then pos:line="689" pos:column="39"> <expr><literal type="string" pos:line="689" pos:column="40">"extra "<pos:position pos:line="689" pos:column="48"/></literal></expr> <pos:position pos:line="689" pos:column="49"/></then><else pos:line="689" pos:column="49">: <expr><literal type="string" pos:line="689" pos:column="51">""<pos:position pos:line="689" pos:column="53"/></literal></expr></else></ternary></expr></argument>,
    <argument><expr><ternary><condition><expr><operator pos:line="690" pos:column="5">(<pos:position pos:line="690" pos:column="6"/></operator><operator pos:line="690" pos:column="6">(<pos:position pos:line="690" pos:column="7"/></operator><name><name pos:line="690" pos:column="7">re<pos:position pos:line="690" pos:column="9"/></name><operator pos:line="690" pos:column="9">-&gt;<pos:position pos:line="690" pos:column="14"/></operator><name pos:line="690" pos:column="11">options<pos:position pos:line="690" pos:column="18"/></name></name> <operator pos:line="690" pos:column="19">&amp;<pos:position pos:line="690" pos:column="24"/></operator> <name pos:line="690" pos:column="21">PCRE_UNGREEDY<pos:position pos:line="690" pos:column="34"/></name><operator pos:line="690" pos:column="34">)<pos:position pos:line="690" pos:column="35"/></operator> <operator pos:line="690" pos:column="36">!=<pos:position pos:line="690" pos:column="38"/></operator> <literal type="number" pos:line="690" pos:column="39">0<pos:position pos:line="690" pos:column="40"/></literal><operator pos:line="690" pos:column="40">)<pos:position pos:line="690" pos:column="41"/></operator></expr>?<pos:position pos:line="690" pos:column="42"/></condition><then pos:line="690" pos:column="42"> <expr><literal type="string" pos:line="690" pos:column="43">"ungreedy "<pos:position pos:line="690" pos:column="54"/></literal></expr> <pos:position pos:line="690" pos:column="55"/></then><else pos:line="690" pos:column="55">: <expr><literal type="string" pos:line="690" pos:column="57">""<pos:position pos:line="690" pos:column="59"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="690" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="690" pos:column="61"/></expr_stmt>
  }<pos:position pos:line="691" pos:column="4"/></block></then></if>

<if pos:line="693" pos:column="1">if <condition pos:line="693" pos:column="4">(<expr><operator pos:line="693" pos:column="5">(<pos:position pos:line="693" pos:column="6"/></operator><name><name pos:line="693" pos:column="6">re<pos:position pos:line="693" pos:column="8"/></name><operator pos:line="693" pos:column="8">-&gt;<pos:position pos:line="693" pos:column="13"/></operator><name pos:line="693" pos:column="10">options<pos:position pos:line="693" pos:column="17"/></name></name> <operator pos:line="693" pos:column="18">&amp;<pos:position pos:line="693" pos:column="23"/></operator> <name pos:line="693" pos:column="20">PCRE_FIRSTSET<pos:position pos:line="693" pos:column="33"/></name><operator pos:line="693" pos:column="33">)<pos:position pos:line="693" pos:column="34"/></operator> <operator pos:line="693" pos:column="35">!=<pos:position pos:line="693" pos:column="37"/></operator> <literal type="number" pos:line="693" pos:column="38">0<pos:position pos:line="693" pos:column="39"/></literal></expr>)<pos:position pos:line="693" pos:column="40"/></condition><then pos:line="693" pos:column="40">
  <block pos:line="694" pos:column="3">{
  <if pos:line="695" pos:column="3">if <condition pos:line="695" pos:column="6">(<expr><call><name pos:line="695" pos:column="7">isprint<pos:position pos:line="695" pos:column="14"/></name><argument_list pos:line="695" pos:column="14">(<argument><expr><name><name pos:line="695" pos:column="15">re<pos:position pos:line="695" pos:column="17"/></name><operator pos:line="695" pos:column="17">-&gt;<pos:position pos:line="695" pos:column="22"/></operator><name pos:line="695" pos:column="19">first_char<pos:position pos:line="695" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="695" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="695" pos:column="31"/></condition><then pos:line="695" pos:column="31"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="695" pos:column="32">printf<pos:position pos:line="695" pos:column="38"/></name><argument_list pos:line="695" pos:column="38">(<argument><expr><literal type="string" pos:line="695" pos:column="39">"First char = %c\n"<pos:position pos:line="695" pos:column="58"/></literal></expr></argument>, <argument><expr><name><name pos:line="695" pos:column="60">re<pos:position pos:line="695" pos:column="62"/></name><operator pos:line="695" pos:column="62">-&gt;<pos:position pos:line="695" pos:column="67"/></operator><name pos:line="695" pos:column="64">first_char<pos:position pos:line="695" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="695" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="695" pos:column="76"/></expr_stmt></block></then>
    <else pos:line="696" pos:column="5">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="696" pos:column="10">printf<pos:position pos:line="696" pos:column="16"/></name><argument_list pos:line="696" pos:column="16">(<argument><expr><literal type="string" pos:line="696" pos:column="17">"First char = \\x%02x\n"<pos:position pos:line="696" pos:column="41"/></literal></expr></argument>, <argument><expr><name><name pos:line="696" pos:column="43">re<pos:position pos:line="696" pos:column="45"/></name><operator pos:line="696" pos:column="45">-&gt;<pos:position pos:line="696" pos:column="50"/></operator><name pos:line="696" pos:column="47">first_char<pos:position pos:line="696" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="696" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="696" pos:column="59"/></expr_stmt></block></else></if>
  }<pos:position pos:line="697" pos:column="4"/></block></then></if>

<if pos:line="699" pos:column="1">if <condition pos:line="699" pos:column="4">(<expr><operator pos:line="699" pos:column="5">(<pos:position pos:line="699" pos:column="6"/></operator><name><name pos:line="699" pos:column="6">re<pos:position pos:line="699" pos:column="8"/></name><operator pos:line="699" pos:column="8">-&gt;<pos:position pos:line="699" pos:column="13"/></operator><name pos:line="699" pos:column="10">options<pos:position pos:line="699" pos:column="17"/></name></name> <operator pos:line="699" pos:column="18">&amp;<pos:position pos:line="699" pos:column="23"/></operator> <name pos:line="699" pos:column="20">PCRE_REQCHSET<pos:position pos:line="699" pos:column="33"/></name><operator pos:line="699" pos:column="33">)<pos:position pos:line="699" pos:column="34"/></operator> <operator pos:line="699" pos:column="35">!=<pos:position pos:line="699" pos:column="37"/></operator> <literal type="number" pos:line="699" pos:column="38">0<pos:position pos:line="699" pos:column="39"/></literal></expr>)<pos:position pos:line="699" pos:column="40"/></condition><then pos:line="699" pos:column="40">
  <block pos:line="700" pos:column="3">{
  <if pos:line="701" pos:column="3">if <condition pos:line="701" pos:column="6">(<expr><call><name pos:line="701" pos:column="7">isprint<pos:position pos:line="701" pos:column="14"/></name><argument_list pos:line="701" pos:column="14">(<argument><expr><name><name pos:line="701" pos:column="15">re<pos:position pos:line="701" pos:column="17"/></name><operator pos:line="701" pos:column="17">-&gt;<pos:position pos:line="701" pos:column="22"/></operator><name pos:line="701" pos:column="19">req_char<pos:position pos:line="701" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="701" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="701" pos:column="29"/></condition><then pos:line="701" pos:column="29"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="701" pos:column="30">printf<pos:position pos:line="701" pos:column="36"/></name><argument_list pos:line="701" pos:column="36">(<argument><expr><literal type="string" pos:line="701" pos:column="37">"Req char = %c\n"<pos:position pos:line="701" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="701" pos:column="56">re<pos:position pos:line="701" pos:column="58"/></name><operator pos:line="701" pos:column="58">-&gt;<pos:position pos:line="701" pos:column="63"/></operator><name pos:line="701" pos:column="60">req_char<pos:position pos:line="701" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="701" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="701" pos:column="70"/></expr_stmt></block></then>
    <else pos:line="702" pos:column="5">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="702" pos:column="10">printf<pos:position pos:line="702" pos:column="16"/></name><argument_list pos:line="702" pos:column="16">(<argument><expr><literal type="string" pos:line="702" pos:column="17">"Req char = \\x%02x\n"<pos:position pos:line="702" pos:column="39"/></literal></expr></argument>, <argument><expr><name><name pos:line="702" pos:column="41">re<pos:position pos:line="702" pos:column="43"/></name><operator pos:line="702" pos:column="43">-&gt;<pos:position pos:line="702" pos:column="48"/></operator><name pos:line="702" pos:column="45">req_char<pos:position pos:line="702" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="702" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="702" pos:column="55"/></expr_stmt></block></else></if>
  }<pos:position pos:line="703" pos:column="4"/></block></then></if>

<expr_stmt><expr><name pos:line="705" pos:column="1">code_end<pos:position pos:line="705" pos:column="9"/></name> <operator pos:line="705" pos:column="10">=<pos:position pos:line="705" pos:column="11"/></operator> <name pos:line="705" pos:column="12">code<pos:position pos:line="705" pos:column="16"/></name></expr>;<pos:position pos:line="705" pos:column="17"/></expr_stmt>
<expr_stmt><expr><name pos:line="706" pos:column="1">code_base<pos:position pos:line="706" pos:column="10"/></name> <operator pos:line="706" pos:column="11">=<pos:position pos:line="706" pos:column="12"/></operator> <name pos:line="706" pos:column="13">code<pos:position pos:line="706" pos:column="17"/></name> <operator pos:line="706" pos:column="18">=<pos:position pos:line="706" pos:column="19"/></operator> <name><name pos:line="706" pos:column="20">re<pos:position pos:line="706" pos:column="22"/></name><operator pos:line="706" pos:column="22">-&gt;<pos:position pos:line="706" pos:column="27"/></operator><name pos:line="706" pos:column="24">code<pos:position pos:line="706" pos:column="28"/></name></name></expr>;<pos:position pos:line="706" pos:column="29"/></expr_stmt>

<while pos:line="708" pos:column="1">while <condition pos:line="708" pos:column="7">(<expr><name pos:line="708" pos:column="8">code<pos:position pos:line="708" pos:column="12"/></name> <operator pos:line="708" pos:column="13">&lt;<pos:position pos:line="708" pos:column="17"/></operator> <name pos:line="708" pos:column="15">code_end<pos:position pos:line="708" pos:column="23"/></name></expr>)<pos:position pos:line="708" pos:column="24"/></condition>
  <block pos:line="709" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="710" pos:column="3">int<pos:position pos:line="710" pos:column="6"/></name></type> <name pos:line="710" pos:column="7">charlength<pos:position pos:line="710" pos:column="17"/></name></decl>;<pos:position pos:line="710" pos:column="18"/></decl_stmt>

  <expr_stmt><expr><call><name pos:line="712" pos:column="3">printf<pos:position pos:line="712" pos:column="9"/></name><argument_list pos:line="712" pos:column="9">(<argument><expr><literal type="string" pos:line="712" pos:column="10">"%3d "<pos:position pos:line="712" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="712" pos:column="18">code<pos:position pos:line="712" pos:column="22"/></name> <operator pos:line="712" pos:column="23">-<pos:position pos:line="712" pos:column="24"/></operator> <name pos:line="712" pos:column="25">code_base<pos:position pos:line="712" pos:column="34"/></name></expr></argument>)<pos:position pos:line="712" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="712" pos:column="36"/></expr_stmt>

  <if pos:line="714" pos:column="3">if <condition pos:line="714" pos:column="6">(<expr><operator pos:line="714" pos:column="7">*<pos:position pos:line="714" pos:column="8"/></operator><name pos:line="714" pos:column="8">code<pos:position pos:line="714" pos:column="12"/></name> <operator pos:line="714" pos:column="13">&gt;=<pos:position pos:line="714" pos:column="18"/></operator> <name pos:line="714" pos:column="16">OP_BRA<pos:position pos:line="714" pos:column="22"/></name></expr>)<pos:position pos:line="714" pos:column="23"/></condition><then pos:line="714" pos:column="23">
    <block pos:line="715" pos:column="5">{
    <if pos:line="716" pos:column="5">if <condition pos:line="716" pos:column="8">(<expr><operator pos:line="716" pos:column="9">*<pos:position pos:line="716" pos:column="10"/></operator><name pos:line="716" pos:column="10">code<pos:position pos:line="716" pos:column="14"/></name> <operator pos:line="716" pos:column="15">-<pos:position pos:line="716" pos:column="16"/></operator> <name pos:line="716" pos:column="17">OP_BRA<pos:position pos:line="716" pos:column="23"/></name> <operator pos:line="716" pos:column="24">&gt;<pos:position pos:line="716" pos:column="28"/></operator> <name pos:line="716" pos:column="26">EXTRACT_BASIC_MAX<pos:position pos:line="716" pos:column="43"/></name></expr>)<pos:position pos:line="716" pos:column="44"/></condition><then pos:line="716" pos:column="44">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="717" pos:column="7">printf<pos:position pos:line="717" pos:column="13"/></name><argument_list pos:line="717" pos:column="13">(<argument><expr><literal type="string" pos:line="717" pos:column="14">"%3d Bra extra"<pos:position pos:line="717" pos:column="29"/></literal></expr></argument>, <argument><expr><operator pos:line="717" pos:column="31">(<pos:position pos:line="717" pos:column="32"/></operator><name><name pos:line="717" pos:column="32">code<pos:position pos:line="717" pos:column="36"/></name><index pos:line="717" pos:column="36">[<expr><literal type="number" pos:line="717" pos:column="37">1<pos:position pos:line="717" pos:column="38"/></literal></expr>]<pos:position pos:line="717" pos:column="39"/></index></name> <operator pos:line="717" pos:column="40">&lt;&lt;<pos:position pos:line="717" pos:column="48"/></operator> <literal type="number" pos:line="717" pos:column="43">8<pos:position pos:line="717" pos:column="44"/></literal><operator pos:line="717" pos:column="44">)<pos:position pos:line="717" pos:column="45"/></operator> <operator pos:line="717" pos:column="46">+<pos:position pos:line="717" pos:column="47"/></operator> <name><name pos:line="717" pos:column="48">code<pos:position pos:line="717" pos:column="52"/></name><index pos:line="717" pos:column="52">[<expr><literal type="number" pos:line="717" pos:column="53">2<pos:position pos:line="717" pos:column="54"/></literal></expr>]<pos:position pos:line="717" pos:column="55"/></index></name></expr></argument>)<pos:position pos:line="717" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="717" pos:column="57"/></expr_stmt></block></then>
    <else pos:line="718" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="719" pos:column="7">printf<pos:position pos:line="719" pos:column="13"/></name><argument_list pos:line="719" pos:column="13">(<argument><expr><literal type="string" pos:line="719" pos:column="14">"%3d Bra %d"<pos:position pos:line="719" pos:column="26"/></literal></expr></argument>, <argument><expr><operator pos:line="719" pos:column="28">(<pos:position pos:line="719" pos:column="29"/></operator><name><name pos:line="719" pos:column="29">code<pos:position pos:line="719" pos:column="33"/></name><index pos:line="719" pos:column="33">[<expr><literal type="number" pos:line="719" pos:column="34">1<pos:position pos:line="719" pos:column="35"/></literal></expr>]<pos:position pos:line="719" pos:column="36"/></index></name> <operator pos:line="719" pos:column="37">&lt;&lt;<pos:position pos:line="719" pos:column="45"/></operator> <literal type="number" pos:line="719" pos:column="40">8<pos:position pos:line="719" pos:column="41"/></literal><operator pos:line="719" pos:column="41">)<pos:position pos:line="719" pos:column="42"/></operator> <operator pos:line="719" pos:column="43">+<pos:position pos:line="719" pos:column="44"/></operator> <name><name pos:line="719" pos:column="45">code<pos:position pos:line="719" pos:column="49"/></name><index pos:line="719" pos:column="49">[<expr><literal type="number" pos:line="719" pos:column="50">2<pos:position pos:line="719" pos:column="51"/></literal></expr>]<pos:position pos:line="719" pos:column="52"/></index></name></expr></argument>, <argument><expr><operator pos:line="719" pos:column="54">*<pos:position pos:line="719" pos:column="55"/></operator><name pos:line="719" pos:column="55">code<pos:position pos:line="719" pos:column="59"/></name> <operator pos:line="719" pos:column="60">-<pos:position pos:line="719" pos:column="61"/></operator> <name pos:line="719" pos:column="62">OP_BRA<pos:position pos:line="719" pos:column="68"/></name></expr></argument>)<pos:position pos:line="719" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="719" pos:column="70"/></expr_stmt></block></else></if>
    <expr_stmt><expr><name pos:line="720" pos:column="5">code<pos:position pos:line="720" pos:column="9"/></name> <operator pos:line="720" pos:column="10">+=<pos:position pos:line="720" pos:column="12"/></operator> <literal type="number" pos:line="720" pos:column="13">2<pos:position pos:line="720" pos:column="14"/></literal></expr>;<pos:position pos:line="720" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="721" pos:column="6"/></block></then>

  <else pos:line="723" pos:column="3">else <block type="pseudo"><switch pos:line="723" pos:column="8">switch<condition pos:line="723" pos:column="14">(<expr><operator pos:line="723" pos:column="15">*<pos:position pos:line="723" pos:column="16"/></operator><name pos:line="723" pos:column="16">code<pos:position pos:line="723" pos:column="20"/></name></expr>)<pos:position pos:line="723" pos:column="21"/></condition>
    <block pos:line="724" pos:column="5">{
    <case pos:line="725" pos:column="5">case <expr><name pos:line="725" pos:column="10">OP_OPT<pos:position pos:line="725" pos:column="16"/></name></expr>:<pos:position pos:line="725" pos:column="17"/></case>
    <expr_stmt><expr><call><name pos:line="726" pos:column="5">printf<pos:position pos:line="726" pos:column="11"/></name><argument_list pos:line="726" pos:column="11">(<argument><expr><literal type="string" pos:line="726" pos:column="12">" %.2x %s"<pos:position pos:line="726" pos:column="22"/></literal></expr></argument>, <argument><expr><name><name pos:line="726" pos:column="24">code<pos:position pos:line="726" pos:column="28"/></name><index pos:line="726" pos:column="28">[<expr><literal type="number" pos:line="726" pos:column="29">1<pos:position pos:line="726" pos:column="30"/></literal></expr>]<pos:position pos:line="726" pos:column="31"/></index></name></expr></argument>, <argument><expr><name><name pos:line="726" pos:column="33">OP_names<pos:position pos:line="726" pos:column="41"/></name><index pos:line="726" pos:column="41">[<expr><operator pos:line="726" pos:column="42">*<pos:position pos:line="726" pos:column="43"/></operator><name pos:line="726" pos:column="43">code<pos:position pos:line="726" pos:column="47"/></name></expr>]<pos:position pos:line="726" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="726" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="726" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="727" pos:column="5">code<pos:position pos:line="727" pos:column="9"/></name><operator pos:line="727" pos:column="9">++<pos:position pos:line="727" pos:column="11"/></operator></expr>;<pos:position pos:line="727" pos:column="12"/></expr_stmt>
    <break pos:line="728" pos:column="5">break;<pos:position pos:line="728" pos:column="11"/></break>

    <case pos:line="730" pos:column="5">case <expr><name pos:line="730" pos:column="10">OP_CHARS<pos:position pos:line="730" pos:column="18"/></name></expr>:<pos:position pos:line="730" pos:column="19"/></case>
    <expr_stmt><expr><name pos:line="731" pos:column="5">charlength<pos:position pos:line="731" pos:column="15"/></name> <operator pos:line="731" pos:column="16">=<pos:position pos:line="731" pos:column="17"/></operator> <operator pos:line="731" pos:column="18">*<pos:position pos:line="731" pos:column="19"/></operator><operator pos:line="731" pos:column="19">(<pos:position pos:line="731" pos:column="20"/></operator><operator pos:line="731" pos:column="20">++<pos:position pos:line="731" pos:column="22"/></operator><name pos:line="731" pos:column="22">code<pos:position pos:line="731" pos:column="26"/></name><operator pos:line="731" pos:column="26">)<pos:position pos:line="731" pos:column="27"/></operator></expr>;<pos:position pos:line="731" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="732" pos:column="5">printf<pos:position pos:line="732" pos:column="11"/></name><argument_list pos:line="732" pos:column="11">(<argument><expr><literal type="string" pos:line="732" pos:column="12">"%3d "<pos:position pos:line="732" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="732" pos:column="20">charlength<pos:position pos:line="732" pos:column="30"/></name></expr></argument>)<pos:position pos:line="732" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="732" pos:column="32"/></expr_stmt>
    <while pos:line="733" pos:column="5">while <condition pos:line="733" pos:column="11">(<expr><name pos:line="733" pos:column="12">charlength<pos:position pos:line="733" pos:column="22"/></name><operator pos:line="733" pos:column="22">--<pos:position pos:line="733" pos:column="24"/></operator> <operator pos:line="733" pos:column="25">&gt;<pos:position pos:line="733" pos:column="29"/></operator> <literal type="number" pos:line="733" pos:column="27">0<pos:position pos:line="733" pos:column="28"/></literal></expr>)<pos:position pos:line="733" pos:column="29"/></condition>
      <block type="pseudo"><if pos:line="734" pos:column="7">if <condition pos:line="734" pos:column="10">(<expr><call><name pos:line="734" pos:column="11">isprint<pos:position pos:line="734" pos:column="18"/></name><argument_list pos:line="734" pos:column="18">(<argument><expr><name pos:line="734" pos:column="19">c<pos:position pos:line="734" pos:column="20"/></name> <operator pos:line="734" pos:column="21">=<pos:position pos:line="734" pos:column="22"/></operator> <operator pos:line="734" pos:column="23">*<pos:position pos:line="734" pos:column="24"/></operator><operator pos:line="734" pos:column="24">(<pos:position pos:line="734" pos:column="25"/></operator><operator pos:line="734" pos:column="25">++<pos:position pos:line="734" pos:column="27"/></operator><name pos:line="734" pos:column="27">code<pos:position pos:line="734" pos:column="31"/></name><operator pos:line="734" pos:column="31">)<pos:position pos:line="734" pos:column="32"/></operator></expr></argument>)<pos:position pos:line="734" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="734" pos:column="34"/></condition><then pos:line="734" pos:column="34"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="734" pos:column="35">printf<pos:position pos:line="734" pos:column="41"/></name><argument_list pos:line="734" pos:column="41">(<argument><expr><literal type="string" pos:line="734" pos:column="42">"%c"<pos:position pos:line="734" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="734" pos:column="48">c<pos:position pos:line="734" pos:column="49"/></name></expr></argument>)<pos:position pos:line="734" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="734" pos:column="51"/></expr_stmt></block></then> <else pos:line="734" pos:column="52">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="734" pos:column="57">printf<pos:position pos:line="734" pos:column="63"/></name><argument_list pos:line="734" pos:column="63">(<argument><expr><literal type="string" pos:line="734" pos:column="64">"\\x%02x"<pos:position pos:line="734" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="734" pos:column="75">c<pos:position pos:line="734" pos:column="76"/></name></expr></argument>)<pos:position pos:line="734" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="734" pos:column="78"/></expr_stmt></block></else></if></block></while>
    <break pos:line="735" pos:column="5">break;<pos:position pos:line="735" pos:column="11"/></break>

    <case pos:line="737" pos:column="5">case <expr><name pos:line="737" pos:column="10">OP_KETRMAX<pos:position pos:line="737" pos:column="20"/></name></expr>:<pos:position pos:line="737" pos:column="21"/></case>
    <case pos:line="738" pos:column="5">case <expr><name pos:line="738" pos:column="10">OP_KETRMIN<pos:position pos:line="738" pos:column="20"/></name></expr>:<pos:position pos:line="738" pos:column="21"/></case>
    <case pos:line="739" pos:column="5">case <expr><name pos:line="739" pos:column="10">OP_ALT<pos:position pos:line="739" pos:column="16"/></name></expr>:<pos:position pos:line="739" pos:column="17"/></case>
    <case pos:line="740" pos:column="5">case <expr><name pos:line="740" pos:column="10">OP_KET<pos:position pos:line="740" pos:column="16"/></name></expr>:<pos:position pos:line="740" pos:column="17"/></case>
    <case pos:line="741" pos:column="5">case <expr><name pos:line="741" pos:column="10">OP_ASSERT<pos:position pos:line="741" pos:column="19"/></name></expr>:<pos:position pos:line="741" pos:column="20"/></case>
    <case pos:line="742" pos:column="5">case <expr><name pos:line="742" pos:column="10">OP_ASSERT_NOT<pos:position pos:line="742" pos:column="23"/></name></expr>:<pos:position pos:line="742" pos:column="24"/></case>
    <case pos:line="743" pos:column="5">case <expr><name pos:line="743" pos:column="10">OP_ASSERTBACK<pos:position pos:line="743" pos:column="23"/></name></expr>:<pos:position pos:line="743" pos:column="24"/></case>
    <case pos:line="744" pos:column="5">case <expr><name pos:line="744" pos:column="10">OP_ASSERTBACK_NOT<pos:position pos:line="744" pos:column="27"/></name></expr>:<pos:position pos:line="744" pos:column="28"/></case>
    <case pos:line="745" pos:column="5">case <expr><name pos:line="745" pos:column="10">OP_ONCE<pos:position pos:line="745" pos:column="17"/></name></expr>:<pos:position pos:line="745" pos:column="18"/></case>
    <case pos:line="746" pos:column="5">case <expr><name pos:line="746" pos:column="10">OP_REVERSE<pos:position pos:line="746" pos:column="20"/></name></expr>:<pos:position pos:line="746" pos:column="21"/></case>
    <case pos:line="747" pos:column="5">case <expr><name pos:line="747" pos:column="10">OP_BRANUMBER<pos:position pos:line="747" pos:column="22"/></name></expr>:<pos:position pos:line="747" pos:column="23"/></case>
    <case pos:line="748" pos:column="5">case <expr><name pos:line="748" pos:column="10">OP_COND<pos:position pos:line="748" pos:column="17"/></name></expr>:<pos:position pos:line="748" pos:column="18"/></case>
    <case pos:line="749" pos:column="5">case <expr><name pos:line="749" pos:column="10">OP_CREF<pos:position pos:line="749" pos:column="17"/></name></expr>:<pos:position pos:line="749" pos:column="18"/></case>
    <expr_stmt><expr><call><name pos:line="750" pos:column="5">printf<pos:position pos:line="750" pos:column="11"/></name><argument_list pos:line="750" pos:column="11">(<argument><expr><literal type="string" pos:line="750" pos:column="12">"%3d %s"<pos:position pos:line="750" pos:column="20"/></literal></expr></argument>, <argument><expr><operator pos:line="750" pos:column="22">(<pos:position pos:line="750" pos:column="23"/></operator><name><name pos:line="750" pos:column="23">code<pos:position pos:line="750" pos:column="27"/></name><index pos:line="750" pos:column="27">[<expr><literal type="number" pos:line="750" pos:column="28">1<pos:position pos:line="750" pos:column="29"/></literal></expr>]<pos:position pos:line="750" pos:column="30"/></index></name> <operator pos:line="750" pos:column="31">&lt;&lt;<pos:position pos:line="750" pos:column="39"/></operator> <literal type="number" pos:line="750" pos:column="34">8<pos:position pos:line="750" pos:column="35"/></literal><operator pos:line="750" pos:column="35">)<pos:position pos:line="750" pos:column="36"/></operator> <operator pos:line="750" pos:column="37">+<pos:position pos:line="750" pos:column="38"/></operator> <name><name pos:line="750" pos:column="39">code<pos:position pos:line="750" pos:column="43"/></name><index pos:line="750" pos:column="43">[<expr><literal type="number" pos:line="750" pos:column="44">2<pos:position pos:line="750" pos:column="45"/></literal></expr>]<pos:position pos:line="750" pos:column="46"/></index></name></expr></argument>, <argument><expr><name><name pos:line="750" pos:column="48">OP_names<pos:position pos:line="750" pos:column="56"/></name><index pos:line="750" pos:column="56">[<expr><operator pos:line="750" pos:column="57">*<pos:position pos:line="750" pos:column="58"/></operator><name pos:line="750" pos:column="58">code<pos:position pos:line="750" pos:column="62"/></name></expr>]<pos:position pos:line="750" pos:column="63"/></index></name></expr></argument>)<pos:position pos:line="750" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="750" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><name pos:line="751" pos:column="5">code<pos:position pos:line="751" pos:column="9"/></name> <operator pos:line="751" pos:column="10">+=<pos:position pos:line="751" pos:column="12"/></operator> <literal type="number" pos:line="751" pos:column="13">2<pos:position pos:line="751" pos:column="14"/></literal></expr>;<pos:position pos:line="751" pos:column="15"/></expr_stmt>
    <break pos:line="752" pos:column="5">break;<pos:position pos:line="752" pos:column="11"/></break>

    <case pos:line="754" pos:column="5">case <expr><name pos:line="754" pos:column="10">OP_STAR<pos:position pos:line="754" pos:column="17"/></name></expr>:<pos:position pos:line="754" pos:column="18"/></case>
    <case pos:line="755" pos:column="5">case <expr><name pos:line="755" pos:column="10">OP_MINSTAR<pos:position pos:line="755" pos:column="20"/></name></expr>:<pos:position pos:line="755" pos:column="21"/></case>
    <case pos:line="756" pos:column="5">case <expr><name pos:line="756" pos:column="10">OP_PLUS<pos:position pos:line="756" pos:column="17"/></name></expr>:<pos:position pos:line="756" pos:column="18"/></case>
    <case pos:line="757" pos:column="5">case <expr><name pos:line="757" pos:column="10">OP_MINPLUS<pos:position pos:line="757" pos:column="20"/></name></expr>:<pos:position pos:line="757" pos:column="21"/></case>
    <case pos:line="758" pos:column="5">case <expr><name pos:line="758" pos:column="10">OP_QUERY<pos:position pos:line="758" pos:column="18"/></name></expr>:<pos:position pos:line="758" pos:column="19"/></case>
    <case pos:line="759" pos:column="5">case <expr><name pos:line="759" pos:column="10">OP_MINQUERY<pos:position pos:line="759" pos:column="21"/></name></expr>:<pos:position pos:line="759" pos:column="22"/></case>
    <case pos:line="760" pos:column="5">case <expr><name pos:line="760" pos:column="10">OP_TYPESTAR<pos:position pos:line="760" pos:column="21"/></name></expr>:<pos:position pos:line="760" pos:column="22"/></case>
    <case pos:line="761" pos:column="5">case <expr><name pos:line="761" pos:column="10">OP_TYPEMINSTAR<pos:position pos:line="761" pos:column="24"/></name></expr>:<pos:position pos:line="761" pos:column="25"/></case>
    <case pos:line="762" pos:column="5">case <expr><name pos:line="762" pos:column="10">OP_TYPEPLUS<pos:position pos:line="762" pos:column="21"/></name></expr>:<pos:position pos:line="762" pos:column="22"/></case>
    <case pos:line="763" pos:column="5">case <expr><name pos:line="763" pos:column="10">OP_TYPEMINPLUS<pos:position pos:line="763" pos:column="24"/></name></expr>:<pos:position pos:line="763" pos:column="25"/></case>
    <case pos:line="764" pos:column="5">case <expr><name pos:line="764" pos:column="10">OP_TYPEQUERY<pos:position pos:line="764" pos:column="22"/></name></expr>:<pos:position pos:line="764" pos:column="23"/></case>
    <case pos:line="765" pos:column="5">case <expr><name pos:line="765" pos:column="10">OP_TYPEMINQUERY<pos:position pos:line="765" pos:column="25"/></name></expr>:<pos:position pos:line="765" pos:column="26"/></case>
    <if pos:line="766" pos:column="5">if <condition pos:line="766" pos:column="8">(<expr><operator pos:line="766" pos:column="9">*<pos:position pos:line="766" pos:column="10"/></operator><name pos:line="766" pos:column="10">code<pos:position pos:line="766" pos:column="14"/></name> <operator pos:line="766" pos:column="15">&gt;=<pos:position pos:line="766" pos:column="20"/></operator> <name pos:line="766" pos:column="18">OP_TYPESTAR<pos:position pos:line="766" pos:column="29"/></name></expr>)<pos:position pos:line="766" pos:column="30"/></condition><then pos:line="766" pos:column="30">
      <block type="pseudo"><expr_stmt><expr><call><name pos:line="767" pos:column="7">printf<pos:position pos:line="767" pos:column="13"/></name><argument_list pos:line="767" pos:column="13">(<argument><expr><literal type="string" pos:line="767" pos:column="14">"    %s"<pos:position pos:line="767" pos:column="22"/></literal></expr></argument>, <argument><expr><name><name pos:line="767" pos:column="24">OP_names<pos:position pos:line="767" pos:column="32"/></name><index pos:line="767" pos:column="32">[<expr><name><name pos:line="767" pos:column="33">code<pos:position pos:line="767" pos:column="37"/></name><index pos:line="767" pos:column="37">[<expr><literal type="number" pos:line="767" pos:column="38">1<pos:position pos:line="767" pos:column="39"/></literal></expr>]<pos:position pos:line="767" pos:column="40"/></index></name></expr>]<pos:position pos:line="767" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="767" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="767" pos:column="43"/></expr_stmt></block></then>
    <elseif pos:line="768" pos:column="5">else <if pos:line="768" pos:column="10">if <condition pos:line="768" pos:column="13">(<expr><call><name pos:line="768" pos:column="14">isprint<pos:position pos:line="768" pos:column="21"/></name><argument_list pos:line="768" pos:column="21">(<argument><expr><name pos:line="768" pos:column="22">c<pos:position pos:line="768" pos:column="23"/></name> <operator pos:line="768" pos:column="24">=<pos:position pos:line="768" pos:column="25"/></operator> <name><name pos:line="768" pos:column="26">code<pos:position pos:line="768" pos:column="30"/></name><index pos:line="768" pos:column="30">[<expr><literal type="number" pos:line="768" pos:column="31">1<pos:position pos:line="768" pos:column="32"/></literal></expr>]<pos:position pos:line="768" pos:column="33"/></index></name></expr></argument>)<pos:position pos:line="768" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="768" pos:column="35"/></condition><then pos:line="768" pos:column="35"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="768" pos:column="36">printf<pos:position pos:line="768" pos:column="42"/></name><argument_list pos:line="768" pos:column="42">(<argument><expr><literal type="string" pos:line="768" pos:column="43">"    %c"<pos:position pos:line="768" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="768" pos:column="53">c<pos:position pos:line="768" pos:column="54"/></name></expr></argument>)<pos:position pos:line="768" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="768" pos:column="56"/></expr_stmt></block></then></if></elseif>
      <else pos:line="769" pos:column="7">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="769" pos:column="12">printf<pos:position pos:line="769" pos:column="18"/></name><argument_list pos:line="769" pos:column="18">(<argument><expr><literal type="string" pos:line="769" pos:column="19">"    \\x%02x"<pos:position pos:line="769" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="769" pos:column="34">c<pos:position pos:line="769" pos:column="35"/></name></expr></argument>)<pos:position pos:line="769" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="769" pos:column="37"/></expr_stmt></block></else></if>
    <expr_stmt><expr><call><name pos:line="770" pos:column="5">printf<pos:position pos:line="770" pos:column="11"/></name><argument_list pos:line="770" pos:column="11">(<argument><expr><literal type="string" pos:line="770" pos:column="12">"%s"<pos:position pos:line="770" pos:column="16"/></literal></expr></argument>, <argument><expr><name><name pos:line="770" pos:column="18">OP_names<pos:position pos:line="770" pos:column="26"/></name><index pos:line="770" pos:column="26">[<expr><operator pos:line="770" pos:column="27">*<pos:position pos:line="770" pos:column="28"/></operator><name pos:line="770" pos:column="28">code<pos:position pos:line="770" pos:column="32"/></name><operator pos:line="770" pos:column="32">++<pos:position pos:line="770" pos:column="34"/></operator></expr>]<pos:position pos:line="770" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="770" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="770" pos:column="37"/></expr_stmt>
    <break pos:line="771" pos:column="5">break;<pos:position pos:line="771" pos:column="11"/></break>

    <case pos:line="773" pos:column="5">case <expr><name pos:line="773" pos:column="10">OP_EXACT<pos:position pos:line="773" pos:column="18"/></name></expr>:<pos:position pos:line="773" pos:column="19"/></case>
    <case pos:line="774" pos:column="5">case <expr><name pos:line="774" pos:column="10">OP_UPTO<pos:position pos:line="774" pos:column="17"/></name></expr>:<pos:position pos:line="774" pos:column="18"/></case>
    <case pos:line="775" pos:column="5">case <expr><name pos:line="775" pos:column="10">OP_MINUPTO<pos:position pos:line="775" pos:column="20"/></name></expr>:<pos:position pos:line="775" pos:column="21"/></case>
    <if pos:line="776" pos:column="5">if <condition pos:line="776" pos:column="8">(<expr><call><name pos:line="776" pos:column="9">isprint<pos:position pos:line="776" pos:column="16"/></name><argument_list pos:line="776" pos:column="16">(<argument><expr><name pos:line="776" pos:column="17">c<pos:position pos:line="776" pos:column="18"/></name> <operator pos:line="776" pos:column="19">=<pos:position pos:line="776" pos:column="20"/></operator> <name><name pos:line="776" pos:column="21">code<pos:position pos:line="776" pos:column="25"/></name><index pos:line="776" pos:column="25">[<expr><literal type="number" pos:line="776" pos:column="26">3<pos:position pos:line="776" pos:column="27"/></literal></expr>]<pos:position pos:line="776" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="776" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="776" pos:column="30"/></condition><then pos:line="776" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="776" pos:column="31">printf<pos:position pos:line="776" pos:column="37"/></name><argument_list pos:line="776" pos:column="37">(<argument><expr><literal type="string" pos:line="776" pos:column="38">"    %c{"<pos:position pos:line="776" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="776" pos:column="49">c<pos:position pos:line="776" pos:column="50"/></name></expr></argument>)<pos:position pos:line="776" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="776" pos:column="52"/></expr_stmt></block></then>
      <else pos:line="777" pos:column="7">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="777" pos:column="12">printf<pos:position pos:line="777" pos:column="18"/></name><argument_list pos:line="777" pos:column="18">(<argument><expr><literal type="string" pos:line="777" pos:column="19">"    \\x%02x{"<pos:position pos:line="777" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="777" pos:column="35">c<pos:position pos:line="777" pos:column="36"/></name></expr></argument>)<pos:position pos:line="777" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="777" pos:column="38"/></expr_stmt></block></else></if>
    <if pos:line="778" pos:column="5">if <condition pos:line="778" pos:column="8">(<expr><operator pos:line="778" pos:column="9">*<pos:position pos:line="778" pos:column="10"/></operator><name pos:line="778" pos:column="10">code<pos:position pos:line="778" pos:column="14"/></name> <operator pos:line="778" pos:column="15">!=<pos:position pos:line="778" pos:column="17"/></operator> <name pos:line="778" pos:column="18">OP_EXACT<pos:position pos:line="778" pos:column="26"/></name></expr>)<pos:position pos:line="778" pos:column="27"/></condition><then pos:line="778" pos:column="27"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="778" pos:column="28">printf<pos:position pos:line="778" pos:column="34"/></name><argument_list pos:line="778" pos:column="34">(<argument><expr><literal type="string" pos:line="778" pos:column="35">"0,"<pos:position pos:line="778" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="778" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="778" pos:column="41"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="779" pos:column="5">printf<pos:position pos:line="779" pos:column="11"/></name><argument_list pos:line="779" pos:column="11">(<argument><expr><literal type="string" pos:line="779" pos:column="12">"%d}"<pos:position pos:line="779" pos:column="17"/></literal></expr></argument>, <argument><expr><operator pos:line="779" pos:column="19">(<pos:position pos:line="779" pos:column="20"/></operator><name><name pos:line="779" pos:column="20">code<pos:position pos:line="779" pos:column="24"/></name><index pos:line="779" pos:column="24">[<expr><literal type="number" pos:line="779" pos:column="25">1<pos:position pos:line="779" pos:column="26"/></literal></expr>]<pos:position pos:line="779" pos:column="27"/></index></name> <operator pos:line="779" pos:column="28">&lt;&lt;<pos:position pos:line="779" pos:column="36"/></operator> <literal type="number" pos:line="779" pos:column="31">8<pos:position pos:line="779" pos:column="32"/></literal><operator pos:line="779" pos:column="32">)<pos:position pos:line="779" pos:column="33"/></operator> <operator pos:line="779" pos:column="34">+<pos:position pos:line="779" pos:column="35"/></operator> <name><name pos:line="779" pos:column="36">code<pos:position pos:line="779" pos:column="40"/></name><index pos:line="779" pos:column="40">[<expr><literal type="number" pos:line="779" pos:column="41">2<pos:position pos:line="779" pos:column="42"/></literal></expr>]<pos:position pos:line="779" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="779" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="779" pos:column="45"/></expr_stmt>
    <if pos:line="780" pos:column="5">if <condition pos:line="780" pos:column="8">(<expr><operator pos:line="780" pos:column="9">*<pos:position pos:line="780" pos:column="10"/></operator><name pos:line="780" pos:column="10">code<pos:position pos:line="780" pos:column="14"/></name> <operator pos:line="780" pos:column="15">==<pos:position pos:line="780" pos:column="17"/></operator> <name pos:line="780" pos:column="18">OP_MINUPTO<pos:position pos:line="780" pos:column="28"/></name></expr>)<pos:position pos:line="780" pos:column="29"/></condition><then pos:line="780" pos:column="29"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="780" pos:column="30">printf<pos:position pos:line="780" pos:column="36"/></name><argument_list pos:line="780" pos:column="36">(<argument><expr><literal type="string" pos:line="780" pos:column="37">"?"<pos:position pos:line="780" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="780" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="780" pos:column="42"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="781" pos:column="5">code<pos:position pos:line="781" pos:column="9"/></name> <operator pos:line="781" pos:column="10">+=<pos:position pos:line="781" pos:column="12"/></operator> <literal type="number" pos:line="781" pos:column="13">3<pos:position pos:line="781" pos:column="14"/></literal></expr>;<pos:position pos:line="781" pos:column="15"/></expr_stmt>
    <break pos:line="782" pos:column="5">break;<pos:position pos:line="782" pos:column="11"/></break>

    <case pos:line="784" pos:column="5">case <expr><name pos:line="784" pos:column="10">OP_TYPEEXACT<pos:position pos:line="784" pos:column="22"/></name></expr>:<pos:position pos:line="784" pos:column="23"/></case>
    <case pos:line="785" pos:column="5">case <expr><name pos:line="785" pos:column="10">OP_TYPEUPTO<pos:position pos:line="785" pos:column="21"/></name></expr>:<pos:position pos:line="785" pos:column="22"/></case>
    <case pos:line="786" pos:column="5">case <expr><name pos:line="786" pos:column="10">OP_TYPEMINUPTO<pos:position pos:line="786" pos:column="24"/></name></expr>:<pos:position pos:line="786" pos:column="25"/></case>
    <expr_stmt><expr><call><name pos:line="787" pos:column="5">printf<pos:position pos:line="787" pos:column="11"/></name><argument_list pos:line="787" pos:column="11">(<argument><expr><literal type="string" pos:line="787" pos:column="12">"    %s{"<pos:position pos:line="787" pos:column="21"/></literal></expr></argument>, <argument><expr><name><name pos:line="787" pos:column="23">OP_names<pos:position pos:line="787" pos:column="31"/></name><index pos:line="787" pos:column="31">[<expr><name><name pos:line="787" pos:column="32">code<pos:position pos:line="787" pos:column="36"/></name><index pos:line="787" pos:column="36">[<expr><literal type="number" pos:line="787" pos:column="37">3<pos:position pos:line="787" pos:column="38"/></literal></expr>]<pos:position pos:line="787" pos:column="39"/></index></name></expr>]<pos:position pos:line="787" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="787" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="787" pos:column="42"/></expr_stmt>
    <if pos:line="788" pos:column="5">if <condition pos:line="788" pos:column="8">(<expr><operator pos:line="788" pos:column="9">*<pos:position pos:line="788" pos:column="10"/></operator><name pos:line="788" pos:column="10">code<pos:position pos:line="788" pos:column="14"/></name> <operator pos:line="788" pos:column="15">!=<pos:position pos:line="788" pos:column="17"/></operator> <name pos:line="788" pos:column="18">OP_TYPEEXACT<pos:position pos:line="788" pos:column="30"/></name></expr>)<pos:position pos:line="788" pos:column="31"/></condition><then pos:line="788" pos:column="31"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="788" pos:column="32">printf<pos:position pos:line="788" pos:column="38"/></name><argument_list pos:line="788" pos:column="38">(<argument><expr><literal type="string" pos:line="788" pos:column="39">","<pos:position pos:line="788" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="788" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="788" pos:column="44"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="789" pos:column="5">printf<pos:position pos:line="789" pos:column="11"/></name><argument_list pos:line="789" pos:column="11">(<argument><expr><literal type="string" pos:line="789" pos:column="12">"%d}"<pos:position pos:line="789" pos:column="17"/></literal></expr></argument>, <argument><expr><operator pos:line="789" pos:column="19">(<pos:position pos:line="789" pos:column="20"/></operator><name><name pos:line="789" pos:column="20">code<pos:position pos:line="789" pos:column="24"/></name><index pos:line="789" pos:column="24">[<expr><literal type="number" pos:line="789" pos:column="25">1<pos:position pos:line="789" pos:column="26"/></literal></expr>]<pos:position pos:line="789" pos:column="27"/></index></name> <operator pos:line="789" pos:column="28">&lt;&lt;<pos:position pos:line="789" pos:column="36"/></operator> <literal type="number" pos:line="789" pos:column="31">8<pos:position pos:line="789" pos:column="32"/></literal><operator pos:line="789" pos:column="32">)<pos:position pos:line="789" pos:column="33"/></operator> <operator pos:line="789" pos:column="34">+<pos:position pos:line="789" pos:column="35"/></operator> <name><name pos:line="789" pos:column="36">code<pos:position pos:line="789" pos:column="40"/></name><index pos:line="789" pos:column="40">[<expr><literal type="number" pos:line="789" pos:column="41">2<pos:position pos:line="789" pos:column="42"/></literal></expr>]<pos:position pos:line="789" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="789" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="789" pos:column="45"/></expr_stmt>
    <if pos:line="790" pos:column="5">if <condition pos:line="790" pos:column="8">(<expr><operator pos:line="790" pos:column="9">*<pos:position pos:line="790" pos:column="10"/></operator><name pos:line="790" pos:column="10">code<pos:position pos:line="790" pos:column="14"/></name> <operator pos:line="790" pos:column="15">==<pos:position pos:line="790" pos:column="17"/></operator> <name pos:line="790" pos:column="18">OP_TYPEMINUPTO<pos:position pos:line="790" pos:column="32"/></name></expr>)<pos:position pos:line="790" pos:column="33"/></condition><then pos:line="790" pos:column="33"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="790" pos:column="34">printf<pos:position pos:line="790" pos:column="40"/></name><argument_list pos:line="790" pos:column="40">(<argument><expr><literal type="string" pos:line="790" pos:column="41">"?"<pos:position pos:line="790" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="790" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="790" pos:column="46"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="791" pos:column="5">code<pos:position pos:line="791" pos:column="9"/></name> <operator pos:line="791" pos:column="10">+=<pos:position pos:line="791" pos:column="12"/></operator> <literal type="number" pos:line="791" pos:column="13">3<pos:position pos:line="791" pos:column="14"/></literal></expr>;<pos:position pos:line="791" pos:column="15"/></expr_stmt>
    <break pos:line="792" pos:column="5">break;<pos:position pos:line="792" pos:column="11"/></break>

    <case pos:line="794" pos:column="5">case <expr><name pos:line="794" pos:column="10">OP_NOT<pos:position pos:line="794" pos:column="16"/></name></expr>:<pos:position pos:line="794" pos:column="17"/></case>
    <if pos:line="795" pos:column="5">if <condition pos:line="795" pos:column="8">(<expr><call><name pos:line="795" pos:column="9">isprint<pos:position pos:line="795" pos:column="16"/></name><argument_list pos:line="795" pos:column="16">(<argument><expr><name pos:line="795" pos:column="17">c<pos:position pos:line="795" pos:column="18"/></name> <operator pos:line="795" pos:column="19">=<pos:position pos:line="795" pos:column="20"/></operator> <operator pos:line="795" pos:column="21">*<pos:position pos:line="795" pos:column="22"/></operator><operator pos:line="795" pos:column="22">(<pos:position pos:line="795" pos:column="23"/></operator><operator pos:line="795" pos:column="23">++<pos:position pos:line="795" pos:column="25"/></operator><name pos:line="795" pos:column="25">code<pos:position pos:line="795" pos:column="29"/></name><operator pos:line="795" pos:column="29">)<pos:position pos:line="795" pos:column="30"/></operator></expr></argument>)<pos:position pos:line="795" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="795" pos:column="32"/></condition><then pos:line="795" pos:column="32"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="795" pos:column="33">printf<pos:position pos:line="795" pos:column="39"/></name><argument_list pos:line="795" pos:column="39">(<argument><expr><literal type="string" pos:line="795" pos:column="40">"    [^%c]"<pos:position pos:line="795" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="795" pos:column="53">c<pos:position pos:line="795" pos:column="54"/></name></expr></argument>)<pos:position pos:line="795" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="795" pos:column="56"/></expr_stmt></block></then>
      <else pos:line="796" pos:column="7">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="796" pos:column="12">printf<pos:position pos:line="796" pos:column="18"/></name><argument_list pos:line="796" pos:column="18">(<argument><expr><literal type="string" pos:line="796" pos:column="19">"    [^\\x%02x]"<pos:position pos:line="796" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="796" pos:column="37">c<pos:position pos:line="796" pos:column="38"/></name></expr></argument>)<pos:position pos:line="796" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="796" pos:column="40"/></expr_stmt></block></else></if>
    <break pos:line="797" pos:column="5">break;<pos:position pos:line="797" pos:column="11"/></break>

    <case pos:line="799" pos:column="5">case <expr><name pos:line="799" pos:column="10">OP_NOTSTAR<pos:position pos:line="799" pos:column="20"/></name></expr>:<pos:position pos:line="799" pos:column="21"/></case>
    <case pos:line="800" pos:column="5">case <expr><name pos:line="800" pos:column="10">OP_NOTMINSTAR<pos:position pos:line="800" pos:column="23"/></name></expr>:<pos:position pos:line="800" pos:column="24"/></case>
    <case pos:line="801" pos:column="5">case <expr><name pos:line="801" pos:column="10">OP_NOTPLUS<pos:position pos:line="801" pos:column="20"/></name></expr>:<pos:position pos:line="801" pos:column="21"/></case>
    <case pos:line="802" pos:column="5">case <expr><name pos:line="802" pos:column="10">OP_NOTMINPLUS<pos:position pos:line="802" pos:column="23"/></name></expr>:<pos:position pos:line="802" pos:column="24"/></case>
    <case pos:line="803" pos:column="5">case <expr><name pos:line="803" pos:column="10">OP_NOTQUERY<pos:position pos:line="803" pos:column="21"/></name></expr>:<pos:position pos:line="803" pos:column="22"/></case>
    <case pos:line="804" pos:column="5">case <expr><name pos:line="804" pos:column="10">OP_NOTMINQUERY<pos:position pos:line="804" pos:column="24"/></name></expr>:<pos:position pos:line="804" pos:column="25"/></case>
    <if pos:line="805" pos:column="5">if <condition pos:line="805" pos:column="8">(<expr><call><name pos:line="805" pos:column="9">isprint<pos:position pos:line="805" pos:column="16"/></name><argument_list pos:line="805" pos:column="16">(<argument><expr><name pos:line="805" pos:column="17">c<pos:position pos:line="805" pos:column="18"/></name> <operator pos:line="805" pos:column="19">=<pos:position pos:line="805" pos:column="20"/></operator> <name><name pos:line="805" pos:column="21">code<pos:position pos:line="805" pos:column="25"/></name><index pos:line="805" pos:column="25">[<expr><literal type="number" pos:line="805" pos:column="26">1<pos:position pos:line="805" pos:column="27"/></literal></expr>]<pos:position pos:line="805" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="805" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="805" pos:column="30"/></condition><then pos:line="805" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="805" pos:column="31">printf<pos:position pos:line="805" pos:column="37"/></name><argument_list pos:line="805" pos:column="37">(<argument><expr><literal type="string" pos:line="805" pos:column="38">"    [^%c]"<pos:position pos:line="805" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="805" pos:column="51">c<pos:position pos:line="805" pos:column="52"/></name></expr></argument>)<pos:position pos:line="805" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="805" pos:column="54"/></expr_stmt></block></then>
      <else pos:line="806" pos:column="7">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="806" pos:column="12">printf<pos:position pos:line="806" pos:column="18"/></name><argument_list pos:line="806" pos:column="18">(<argument><expr><literal type="string" pos:line="806" pos:column="19">"    [^\\x%02x]"<pos:position pos:line="806" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="806" pos:column="37">c<pos:position pos:line="806" pos:column="38"/></name></expr></argument>)<pos:position pos:line="806" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="806" pos:column="40"/></expr_stmt></block></else></if>
    <expr_stmt><expr><call><name pos:line="807" pos:column="5">printf<pos:position pos:line="807" pos:column="11"/></name><argument_list pos:line="807" pos:column="11">(<argument><expr><literal type="string" pos:line="807" pos:column="12">"%s"<pos:position pos:line="807" pos:column="16"/></literal></expr></argument>, <argument><expr><name><name pos:line="807" pos:column="18">OP_names<pos:position pos:line="807" pos:column="26"/></name><index pos:line="807" pos:column="26">[<expr><operator pos:line="807" pos:column="27">*<pos:position pos:line="807" pos:column="28"/></operator><name pos:line="807" pos:column="28">code<pos:position pos:line="807" pos:column="32"/></name><operator pos:line="807" pos:column="32">++<pos:position pos:line="807" pos:column="34"/></operator></expr>]<pos:position pos:line="807" pos:column="35"/></index></name></expr></argument>)<pos:position pos:line="807" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="807" pos:column="37"/></expr_stmt>
    <break pos:line="808" pos:column="5">break;<pos:position pos:line="808" pos:column="11"/></break>

    <case pos:line="810" pos:column="5">case <expr><name pos:line="810" pos:column="10">OP_NOTEXACT<pos:position pos:line="810" pos:column="21"/></name></expr>:<pos:position pos:line="810" pos:column="22"/></case>
    <case pos:line="811" pos:column="5">case <expr><name pos:line="811" pos:column="10">OP_NOTUPTO<pos:position pos:line="811" pos:column="20"/></name></expr>:<pos:position pos:line="811" pos:column="21"/></case>
    <case pos:line="812" pos:column="5">case <expr><name pos:line="812" pos:column="10">OP_NOTMINUPTO<pos:position pos:line="812" pos:column="23"/></name></expr>:<pos:position pos:line="812" pos:column="24"/></case>
    <if pos:line="813" pos:column="5">if <condition pos:line="813" pos:column="8">(<expr><call><name pos:line="813" pos:column="9">isprint<pos:position pos:line="813" pos:column="16"/></name><argument_list pos:line="813" pos:column="16">(<argument><expr><name pos:line="813" pos:column="17">c<pos:position pos:line="813" pos:column="18"/></name> <operator pos:line="813" pos:column="19">=<pos:position pos:line="813" pos:column="20"/></operator> <name><name pos:line="813" pos:column="21">code<pos:position pos:line="813" pos:column="25"/></name><index pos:line="813" pos:column="25">[<expr><literal type="number" pos:line="813" pos:column="26">3<pos:position pos:line="813" pos:column="27"/></literal></expr>]<pos:position pos:line="813" pos:column="28"/></index></name></expr></argument>)<pos:position pos:line="813" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="813" pos:column="30"/></condition><then pos:line="813" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="813" pos:column="31">printf<pos:position pos:line="813" pos:column="37"/></name><argument_list pos:line="813" pos:column="37">(<argument><expr><literal type="string" pos:line="813" pos:column="38">"    [^%c]{"<pos:position pos:line="813" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="813" pos:column="52">c<pos:position pos:line="813" pos:column="53"/></name></expr></argument>)<pos:position pos:line="813" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="813" pos:column="55"/></expr_stmt></block></then>
      <else pos:line="814" pos:column="7">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="814" pos:column="12">printf<pos:position pos:line="814" pos:column="18"/></name><argument_list pos:line="814" pos:column="18">(<argument><expr><literal type="string" pos:line="814" pos:column="19">"    [^\\x%02x]{"<pos:position pos:line="814" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="814" pos:column="38">c<pos:position pos:line="814" pos:column="39"/></name></expr></argument>)<pos:position pos:line="814" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="814" pos:column="41"/></expr_stmt></block></else></if>
    <if pos:line="815" pos:column="5">if <condition pos:line="815" pos:column="8">(<expr><operator pos:line="815" pos:column="9">*<pos:position pos:line="815" pos:column="10"/></operator><name pos:line="815" pos:column="10">code<pos:position pos:line="815" pos:column="14"/></name> <operator pos:line="815" pos:column="15">!=<pos:position pos:line="815" pos:column="17"/></operator> <name pos:line="815" pos:column="18">OP_NOTEXACT<pos:position pos:line="815" pos:column="29"/></name></expr>)<pos:position pos:line="815" pos:column="30"/></condition><then pos:line="815" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="815" pos:column="31">printf<pos:position pos:line="815" pos:column="37"/></name><argument_list pos:line="815" pos:column="37">(<argument><expr><literal type="string" pos:line="815" pos:column="38">","<pos:position pos:line="815" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="815" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="815" pos:column="43"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="816" pos:column="5">printf<pos:position pos:line="816" pos:column="11"/></name><argument_list pos:line="816" pos:column="11">(<argument><expr><literal type="string" pos:line="816" pos:column="12">"%d}"<pos:position pos:line="816" pos:column="17"/></literal></expr></argument>, <argument><expr><operator pos:line="816" pos:column="19">(<pos:position pos:line="816" pos:column="20"/></operator><name><name pos:line="816" pos:column="20">code<pos:position pos:line="816" pos:column="24"/></name><index pos:line="816" pos:column="24">[<expr><literal type="number" pos:line="816" pos:column="25">1<pos:position pos:line="816" pos:column="26"/></literal></expr>]<pos:position pos:line="816" pos:column="27"/></index></name> <operator pos:line="816" pos:column="28">&lt;&lt;<pos:position pos:line="816" pos:column="36"/></operator> <literal type="number" pos:line="816" pos:column="31">8<pos:position pos:line="816" pos:column="32"/></literal><operator pos:line="816" pos:column="32">)<pos:position pos:line="816" pos:column="33"/></operator> <operator pos:line="816" pos:column="34">+<pos:position pos:line="816" pos:column="35"/></operator> <name><name pos:line="816" pos:column="36">code<pos:position pos:line="816" pos:column="40"/></name><index pos:line="816" pos:column="40">[<expr><literal type="number" pos:line="816" pos:column="41">2<pos:position pos:line="816" pos:column="42"/></literal></expr>]<pos:position pos:line="816" pos:column="43"/></index></name></expr></argument>)<pos:position pos:line="816" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="816" pos:column="45"/></expr_stmt>
    <if pos:line="817" pos:column="5">if <condition pos:line="817" pos:column="8">(<expr><operator pos:line="817" pos:column="9">*<pos:position pos:line="817" pos:column="10"/></operator><name pos:line="817" pos:column="10">code<pos:position pos:line="817" pos:column="14"/></name> <operator pos:line="817" pos:column="15">==<pos:position pos:line="817" pos:column="17"/></operator> <name pos:line="817" pos:column="18">OP_NOTMINUPTO<pos:position pos:line="817" pos:column="31"/></name></expr>)<pos:position pos:line="817" pos:column="32"/></condition><then pos:line="817" pos:column="32"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="817" pos:column="33">printf<pos:position pos:line="817" pos:column="39"/></name><argument_list pos:line="817" pos:column="39">(<argument><expr><literal type="string" pos:line="817" pos:column="40">"?"<pos:position pos:line="817" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="817" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="817" pos:column="45"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="818" pos:column="5">code<pos:position pos:line="818" pos:column="9"/></name> <operator pos:line="818" pos:column="10">+=<pos:position pos:line="818" pos:column="12"/></operator> <literal type="number" pos:line="818" pos:column="13">3<pos:position pos:line="818" pos:column="14"/></literal></expr>;<pos:position pos:line="818" pos:column="15"/></expr_stmt>
    <break pos:line="819" pos:column="5">break;<pos:position pos:line="819" pos:column="11"/></break>

    <case pos:line="821" pos:column="5">case <expr><name pos:line="821" pos:column="10">OP_REF<pos:position pos:line="821" pos:column="16"/></name></expr>:<pos:position pos:line="821" pos:column="17"/></case>
    <expr_stmt><expr><call><name pos:line="822" pos:column="5">printf<pos:position pos:line="822" pos:column="11"/></name><argument_list pos:line="822" pos:column="11">(<argument><expr><literal type="string" pos:line="822" pos:column="12">"    \\%d"<pos:position pos:line="822" pos:column="22"/></literal></expr></argument>, <argument><expr><operator pos:line="822" pos:column="24">(<pos:position pos:line="822" pos:column="25"/></operator><name><name pos:line="822" pos:column="25">code<pos:position pos:line="822" pos:column="29"/></name><index pos:line="822" pos:column="29">[<expr><literal type="number" pos:line="822" pos:column="30">1<pos:position pos:line="822" pos:column="31"/></literal></expr>]<pos:position pos:line="822" pos:column="32"/></index></name> <operator pos:line="822" pos:column="33">&lt;&lt;<pos:position pos:line="822" pos:column="41"/></operator> <literal type="number" pos:line="822" pos:column="36">8<pos:position pos:line="822" pos:column="37"/></literal><operator pos:line="822" pos:column="37">)<pos:position pos:line="822" pos:column="38"/></operator> <operator pos:line="822" pos:column="39">|<pos:position pos:line="822" pos:column="40"/></operator> <name><name pos:line="822" pos:column="41">code<pos:position pos:line="822" pos:column="45"/></name><index pos:line="822" pos:column="45">[<expr><literal type="number" pos:line="822" pos:column="46">2<pos:position pos:line="822" pos:column="47"/></literal></expr>]<pos:position pos:line="822" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="822" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="822" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="823" pos:column="5">code<pos:position pos:line="823" pos:column="9"/></name> <operator pos:line="823" pos:column="10">+=<pos:position pos:line="823" pos:column="12"/></operator> <literal type="number" pos:line="823" pos:column="13">3<pos:position pos:line="823" pos:column="14"/></literal></expr>;<pos:position pos:line="823" pos:column="15"/></expr_stmt>
    <goto pos:line="824" pos:column="5">goto <name pos:line="824" pos:column="10">CLASS_REF_REPEAT<pos:position pos:line="824" pos:column="26"/></name>;<pos:position pos:line="824" pos:column="27"/></goto>

    <case pos:line="826" pos:column="5">case <expr><name pos:line="826" pos:column="10">OP_CLASS<pos:position pos:line="826" pos:column="18"/></name></expr>:<pos:position pos:line="826" pos:column="19"/></case>
      <block pos:line="827" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="828" pos:column="7">int<pos:position pos:line="828" pos:column="10"/></name></type> <name pos:line="828" pos:column="11">i<pos:position pos:line="828" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="828" pos:column="14">min<pos:position pos:line="828" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="828" pos:column="19">max<pos:position pos:line="828" pos:column="22"/></name></decl>;<pos:position pos:line="828" pos:column="23"/></decl_stmt>
      <expr_stmt><expr><name pos:line="829" pos:column="7">code<pos:position pos:line="829" pos:column="11"/></name><operator pos:line="829" pos:column="11">++<pos:position pos:line="829" pos:column="13"/></operator></expr>;<pos:position pos:line="829" pos:column="14"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="830" pos:column="7">printf<pos:position pos:line="830" pos:column="13"/></name><argument_list pos:line="830" pos:column="13">(<argument><expr><literal type="string" pos:line="830" pos:column="14">"    ["<pos:position pos:line="830" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="830" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="830" pos:column="23"/></expr_stmt>

      <for pos:line="832" pos:column="7">for <control pos:line="832" pos:column="11">(<init><expr><name pos:line="832" pos:column="12">i<pos:position pos:line="832" pos:column="13"/></name> <operator pos:line="832" pos:column="14">=<pos:position pos:line="832" pos:column="15"/></operator> <literal type="number" pos:line="832" pos:column="16">0<pos:position pos:line="832" pos:column="17"/></literal></expr>;<pos:position pos:line="832" pos:column="18"/></init> <condition><expr><name pos:line="832" pos:column="19">i<pos:position pos:line="832" pos:column="20"/></name> <operator pos:line="832" pos:column="21">&lt;<pos:position pos:line="832" pos:column="25"/></operator> <literal type="number" pos:line="832" pos:column="23">256<pos:position pos:line="832" pos:column="26"/></literal></expr>;<pos:position pos:line="832" pos:column="27"/></condition> <incr><expr><name pos:line="832" pos:column="28">i<pos:position pos:line="832" pos:column="29"/></name><operator pos:line="832" pos:column="29">++<pos:position pos:line="832" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="832" pos:column="32"/></control>
        <block pos:line="833" pos:column="9">{
        <if pos:line="834" pos:column="9">if <condition pos:line="834" pos:column="12">(<expr><operator pos:line="834" pos:column="13">(<pos:position pos:line="834" pos:column="14"/></operator><name><name pos:line="834" pos:column="14">code<pos:position pos:line="834" pos:column="18"/></name><index pos:line="834" pos:column="18">[<expr><name pos:line="834" pos:column="19">i<pos:position pos:line="834" pos:column="20"/></name><operator pos:line="834" pos:column="20">/<pos:position pos:line="834" pos:column="21"/></operator><literal type="number" pos:line="834" pos:column="21">8<pos:position pos:line="834" pos:column="22"/></literal></expr>]<pos:position pos:line="834" pos:column="23"/></index></name> <operator pos:line="834" pos:column="24">&amp;<pos:position pos:line="834" pos:column="29"/></operator> <operator pos:line="834" pos:column="26">(<pos:position pos:line="834" pos:column="27"/></operator><literal type="number" pos:line="834" pos:column="27">1<pos:position pos:line="834" pos:column="28"/></literal> <operator pos:line="834" pos:column="29">&lt;&lt;<pos:position pos:line="834" pos:column="37"/></operator> <operator pos:line="834" pos:column="32">(<pos:position pos:line="834" pos:column="33"/></operator><name pos:line="834" pos:column="33">i<pos:position pos:line="834" pos:column="34"/></name><operator pos:line="834" pos:column="34">&amp;<pos:position pos:line="834" pos:column="39"/></operator><literal type="number" pos:line="834" pos:column="35">7<pos:position pos:line="834" pos:column="36"/></literal><operator pos:line="834" pos:column="36">)<pos:position pos:line="834" pos:column="37"/></operator><operator pos:line="834" pos:column="37">)<pos:position pos:line="834" pos:column="38"/></operator><operator pos:line="834" pos:column="38">)<pos:position pos:line="834" pos:column="39"/></operator> <operator pos:line="834" pos:column="40">!=<pos:position pos:line="834" pos:column="42"/></operator> <literal type="number" pos:line="834" pos:column="43">0<pos:position pos:line="834" pos:column="44"/></literal></expr>)<pos:position pos:line="834" pos:column="45"/></condition><then pos:line="834" pos:column="45">
          <block pos:line="835" pos:column="11">{
          <decl_stmt><decl><type><name pos:line="836" pos:column="11">int<pos:position pos:line="836" pos:column="14"/></name></type> <name pos:line="836" pos:column="15">j<pos:position pos:line="836" pos:column="16"/></name></decl>;<pos:position pos:line="836" pos:column="17"/></decl_stmt>
          <for pos:line="837" pos:column="11">for <control pos:line="837" pos:column="15">(<init><expr><name pos:line="837" pos:column="16">j<pos:position pos:line="837" pos:column="17"/></name> <operator pos:line="837" pos:column="18">=<pos:position pos:line="837" pos:column="19"/></operator> <name pos:line="837" pos:column="20">i<pos:position pos:line="837" pos:column="21"/></name><operator pos:line="837" pos:column="21">+<pos:position pos:line="837" pos:column="22"/></operator><literal type="number" pos:line="837" pos:column="22">1<pos:position pos:line="837" pos:column="23"/></literal></expr>;<pos:position pos:line="837" pos:column="24"/></init> <condition><expr><name pos:line="837" pos:column="25">j<pos:position pos:line="837" pos:column="26"/></name> <operator pos:line="837" pos:column="27">&lt;<pos:position pos:line="837" pos:column="31"/></operator> <literal type="number" pos:line="837" pos:column="29">256<pos:position pos:line="837" pos:column="32"/></literal></expr>;<pos:position pos:line="837" pos:column="33"/></condition> <incr><expr><name pos:line="837" pos:column="34">j<pos:position pos:line="837" pos:column="35"/></name><operator pos:line="837" pos:column="35">++<pos:position pos:line="837" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="837" pos:column="38"/></control>
            <block type="pseudo"><if pos:line="838" pos:column="13">if <condition pos:line="838" pos:column="16">(<expr><operator pos:line="838" pos:column="17">(<pos:position pos:line="838" pos:column="18"/></operator><name><name pos:line="838" pos:column="18">code<pos:position pos:line="838" pos:column="22"/></name><index pos:line="838" pos:column="22">[<expr><name pos:line="838" pos:column="23">j<pos:position pos:line="838" pos:column="24"/></name><operator pos:line="838" pos:column="24">/<pos:position pos:line="838" pos:column="25"/></operator><literal type="number" pos:line="838" pos:column="25">8<pos:position pos:line="838" pos:column="26"/></literal></expr>]<pos:position pos:line="838" pos:column="27"/></index></name> <operator pos:line="838" pos:column="28">&amp;<pos:position pos:line="838" pos:column="33"/></operator> <operator pos:line="838" pos:column="30">(<pos:position pos:line="838" pos:column="31"/></operator><literal type="number" pos:line="838" pos:column="31">1<pos:position pos:line="838" pos:column="32"/></literal> <operator pos:line="838" pos:column="33">&lt;&lt;<pos:position pos:line="838" pos:column="41"/></operator> <operator pos:line="838" pos:column="36">(<pos:position pos:line="838" pos:column="37"/></operator><name pos:line="838" pos:column="37">j<pos:position pos:line="838" pos:column="38"/></name><operator pos:line="838" pos:column="38">&amp;<pos:position pos:line="838" pos:column="43"/></operator><literal type="number" pos:line="838" pos:column="39">7<pos:position pos:line="838" pos:column="40"/></literal><operator pos:line="838" pos:column="40">)<pos:position pos:line="838" pos:column="41"/></operator><operator pos:line="838" pos:column="41">)<pos:position pos:line="838" pos:column="42"/></operator><operator pos:line="838" pos:column="42">)<pos:position pos:line="838" pos:column="43"/></operator> <operator pos:line="838" pos:column="44">==<pos:position pos:line="838" pos:column="46"/></operator> <literal type="number" pos:line="838" pos:column="47">0<pos:position pos:line="838" pos:column="48"/></literal></expr>)<pos:position pos:line="838" pos:column="49"/></condition><then pos:line="838" pos:column="49"> <block type="pseudo"><break pos:line="838" pos:column="50">break;<pos:position pos:line="838" pos:column="56"/></break></block></then></if></block></for>
          <if pos:line="839" pos:column="11">if <condition pos:line="839" pos:column="14">(<expr><name pos:line="839" pos:column="15">i<pos:position pos:line="839" pos:column="16"/></name> <operator pos:line="839" pos:column="17">==<pos:position pos:line="839" pos:column="19"/></operator> <literal type="char" pos:line="839" pos:column="20">'-'<pos:position pos:line="839" pos:column="23"/></literal> <operator pos:line="839" pos:column="24">||<pos:position pos:line="839" pos:column="26"/></operator> <name pos:line="839" pos:column="27">i<pos:position pos:line="839" pos:column="28"/></name> <operator pos:line="839" pos:column="29">==<pos:position pos:line="839" pos:column="31"/></operator> <literal type="char" pos:line="839" pos:column="32">']'<pos:position pos:line="839" pos:column="35"/></literal></expr>)<pos:position pos:line="839" pos:column="36"/></condition><then pos:line="839" pos:column="36"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="839" pos:column="37">printf<pos:position pos:line="839" pos:column="43"/></name><argument_list pos:line="839" pos:column="43">(<argument><expr><literal type="string" pos:line="839" pos:column="44">"\\"<pos:position pos:line="839" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="839" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="839" pos:column="50"/></expr_stmt></block></then></if>
          <if pos:line="840" pos:column="11">if <condition pos:line="840" pos:column="14">(<expr><call><name pos:line="840" pos:column="15">isprint<pos:position pos:line="840" pos:column="22"/></name><argument_list pos:line="840" pos:column="22">(<argument><expr><name pos:line="840" pos:column="23">i<pos:position pos:line="840" pos:column="24"/></name></expr></argument>)<pos:position pos:line="840" pos:column="25"/></argument_list></call></expr>)<pos:position pos:line="840" pos:column="26"/></condition><then pos:line="840" pos:column="26"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="840" pos:column="27">printf<pos:position pos:line="840" pos:column="33"/></name><argument_list pos:line="840" pos:column="33">(<argument><expr><literal type="string" pos:line="840" pos:column="34">"%c"<pos:position pos:line="840" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="840" pos:column="40">i<pos:position pos:line="840" pos:column="41"/></name></expr></argument>)<pos:position pos:line="840" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="840" pos:column="43"/></expr_stmt></block></then> <else pos:line="840" pos:column="44">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="840" pos:column="49">printf<pos:position pos:line="840" pos:column="55"/></name><argument_list pos:line="840" pos:column="55">(<argument><expr><literal type="string" pos:line="840" pos:column="56">"\\x%02x"<pos:position pos:line="840" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="840" pos:column="67">i<pos:position pos:line="840" pos:column="68"/></name></expr></argument>)<pos:position pos:line="840" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="840" pos:column="70"/></expr_stmt></block></else></if>
          <if pos:line="841" pos:column="11">if <condition pos:line="841" pos:column="14">(<expr><operator pos:line="841" pos:column="15">--<pos:position pos:line="841" pos:column="17"/></operator><name pos:line="841" pos:column="17">j<pos:position pos:line="841" pos:column="18"/></name> <operator pos:line="841" pos:column="19">&gt;<pos:position pos:line="841" pos:column="23"/></operator> <name pos:line="841" pos:column="21">i<pos:position pos:line="841" pos:column="22"/></name></expr>)<pos:position pos:line="841" pos:column="23"/></condition><then pos:line="841" pos:column="23">
            <block pos:line="842" pos:column="13">{
            <expr_stmt><expr><call><name pos:line="843" pos:column="13">printf<pos:position pos:line="843" pos:column="19"/></name><argument_list pos:line="843" pos:column="19">(<argument><expr><literal type="string" pos:line="843" pos:column="20">"-"<pos:position pos:line="843" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="843" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="843" pos:column="25"/></expr_stmt>
            <if pos:line="844" pos:column="13">if <condition pos:line="844" pos:column="16">(<expr><name pos:line="844" pos:column="17">j<pos:position pos:line="844" pos:column="18"/></name> <operator pos:line="844" pos:column="19">==<pos:position pos:line="844" pos:column="21"/></operator> <literal type="char" pos:line="844" pos:column="22">'-'<pos:position pos:line="844" pos:column="25"/></literal> <operator pos:line="844" pos:column="26">||<pos:position pos:line="844" pos:column="28"/></operator> <name pos:line="844" pos:column="29">j<pos:position pos:line="844" pos:column="30"/></name> <operator pos:line="844" pos:column="31">==<pos:position pos:line="844" pos:column="33"/></operator> <literal type="char" pos:line="844" pos:column="34">']'<pos:position pos:line="844" pos:column="37"/></literal></expr>)<pos:position pos:line="844" pos:column="38"/></condition><then pos:line="844" pos:column="38"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="844" pos:column="39">printf<pos:position pos:line="844" pos:column="45"/></name><argument_list pos:line="844" pos:column="45">(<argument><expr><literal type="string" pos:line="844" pos:column="46">"\\"<pos:position pos:line="844" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="844" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="844" pos:column="52"/></expr_stmt></block></then></if>
            <if pos:line="845" pos:column="13">if <condition pos:line="845" pos:column="16">(<expr><call><name pos:line="845" pos:column="17">isprint<pos:position pos:line="845" pos:column="24"/></name><argument_list pos:line="845" pos:column="24">(<argument><expr><name pos:line="845" pos:column="25">j<pos:position pos:line="845" pos:column="26"/></name></expr></argument>)<pos:position pos:line="845" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="845" pos:column="28"/></condition><then pos:line="845" pos:column="28"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="845" pos:column="29">printf<pos:position pos:line="845" pos:column="35"/></name><argument_list pos:line="845" pos:column="35">(<argument><expr><literal type="string" pos:line="845" pos:column="36">"%c"<pos:position pos:line="845" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="845" pos:column="42">j<pos:position pos:line="845" pos:column="43"/></name></expr></argument>)<pos:position pos:line="845" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="845" pos:column="45"/></expr_stmt></block></then> <else pos:line="845" pos:column="46">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="845" pos:column="51">printf<pos:position pos:line="845" pos:column="57"/></name><argument_list pos:line="845" pos:column="57">(<argument><expr><literal type="string" pos:line="845" pos:column="58">"\\x%02x"<pos:position pos:line="845" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="845" pos:column="69">j<pos:position pos:line="845" pos:column="70"/></name></expr></argument>)<pos:position pos:line="845" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="845" pos:column="72"/></expr_stmt></block></else></if>
            }<pos:position pos:line="846" pos:column="14"/></block></then></if>
          <expr_stmt><expr><name pos:line="847" pos:column="11">i<pos:position pos:line="847" pos:column="12"/></name> <operator pos:line="847" pos:column="13">=<pos:position pos:line="847" pos:column="14"/></operator> <name pos:line="847" pos:column="15">j<pos:position pos:line="847" pos:column="16"/></name></expr>;<pos:position pos:line="847" pos:column="17"/></expr_stmt>
          }<pos:position pos:line="848" pos:column="12"/></block></then></if>
        }<pos:position pos:line="849" pos:column="10"/></block></for>
      <expr_stmt><expr><call><name pos:line="850" pos:column="7">printf<pos:position pos:line="850" pos:column="13"/></name><argument_list pos:line="850" pos:column="13">(<argument><expr><literal type="string" pos:line="850" pos:column="14">"]"<pos:position pos:line="850" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="850" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="850" pos:column="19"/></expr_stmt>
      <expr_stmt><expr><name pos:line="851" pos:column="7">code<pos:position pos:line="851" pos:column="11"/></name> <operator pos:line="851" pos:column="12">+=<pos:position pos:line="851" pos:column="14"/></operator> <literal type="number" pos:line="851" pos:column="15">32<pos:position pos:line="851" pos:column="17"/></literal></expr>;<pos:position pos:line="851" pos:column="18"/></expr_stmt>

      <label><name pos:line="853" pos:column="7">CLASS_REF_REPEAT<pos:position pos:line="853" pos:column="23"/></name>:<pos:position pos:line="853" pos:column="24"/></label>

      <switch pos:line="855" pos:column="7">switch<condition pos:line="855" pos:column="13">(<expr><operator pos:line="855" pos:column="14">*<pos:position pos:line="855" pos:column="15"/></operator><name pos:line="855" pos:column="15">code<pos:position pos:line="855" pos:column="19"/></name></expr>)<pos:position pos:line="855" pos:column="20"/></condition>
        <block pos:line="856" pos:column="9">{
        <case pos:line="857" pos:column="9">case <expr><name pos:line="857" pos:column="14">OP_CRSTAR<pos:position pos:line="857" pos:column="23"/></name></expr>:<pos:position pos:line="857" pos:column="24"/></case>
        <case pos:line="858" pos:column="9">case <expr><name pos:line="858" pos:column="14">OP_CRMINSTAR<pos:position pos:line="858" pos:column="26"/></name></expr>:<pos:position pos:line="858" pos:column="27"/></case>
        <case pos:line="859" pos:column="9">case <expr><name pos:line="859" pos:column="14">OP_CRPLUS<pos:position pos:line="859" pos:column="23"/></name></expr>:<pos:position pos:line="859" pos:column="24"/></case>
        <case pos:line="860" pos:column="9">case <expr><name pos:line="860" pos:column="14">OP_CRMINPLUS<pos:position pos:line="860" pos:column="26"/></name></expr>:<pos:position pos:line="860" pos:column="27"/></case>
        <case pos:line="861" pos:column="9">case <expr><name pos:line="861" pos:column="14">OP_CRQUERY<pos:position pos:line="861" pos:column="24"/></name></expr>:<pos:position pos:line="861" pos:column="25"/></case>
        <case pos:line="862" pos:column="9">case <expr><name pos:line="862" pos:column="14">OP_CRMINQUERY<pos:position pos:line="862" pos:column="27"/></name></expr>:<pos:position pos:line="862" pos:column="28"/></case>
        <expr_stmt><expr><call><name pos:line="863" pos:column="9">printf<pos:position pos:line="863" pos:column="15"/></name><argument_list pos:line="863" pos:column="15">(<argument><expr><literal type="string" pos:line="863" pos:column="16">"%s"<pos:position pos:line="863" pos:column="20"/></literal></expr></argument>, <argument><expr><name><name pos:line="863" pos:column="22">OP_names<pos:position pos:line="863" pos:column="30"/></name><index pos:line="863" pos:column="30">[<expr><operator pos:line="863" pos:column="31">*<pos:position pos:line="863" pos:column="32"/></operator><name pos:line="863" pos:column="32">code<pos:position pos:line="863" pos:column="36"/></name></expr>]<pos:position pos:line="863" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="863" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="863" pos:column="39"/></expr_stmt>
        <break pos:line="864" pos:column="9">break;<pos:position pos:line="864" pos:column="15"/></break>

        <case pos:line="866" pos:column="9">case <expr><name pos:line="866" pos:column="14">OP_CRRANGE<pos:position pos:line="866" pos:column="24"/></name></expr>:<pos:position pos:line="866" pos:column="25"/></case>
        <case pos:line="867" pos:column="9">case <expr><name pos:line="867" pos:column="14">OP_CRMINRANGE<pos:position pos:line="867" pos:column="27"/></name></expr>:<pos:position pos:line="867" pos:column="28"/></case>
        <expr_stmt><expr><name pos:line="868" pos:column="9">min<pos:position pos:line="868" pos:column="12"/></name> <operator pos:line="868" pos:column="13">=<pos:position pos:line="868" pos:column="14"/></operator> <operator pos:line="868" pos:column="15">(<pos:position pos:line="868" pos:column="16"/></operator><name><name pos:line="868" pos:column="16">code<pos:position pos:line="868" pos:column="20"/></name><index pos:line="868" pos:column="20">[<expr><literal type="number" pos:line="868" pos:column="21">1<pos:position pos:line="868" pos:column="22"/></literal></expr>]<pos:position pos:line="868" pos:column="23"/></index></name> <operator pos:line="868" pos:column="24">&lt;&lt;<pos:position pos:line="868" pos:column="32"/></operator> <literal type="number" pos:line="868" pos:column="27">8<pos:position pos:line="868" pos:column="28"/></literal><operator pos:line="868" pos:column="28">)<pos:position pos:line="868" pos:column="29"/></operator> <operator pos:line="868" pos:column="30">+<pos:position pos:line="868" pos:column="31"/></operator> <name><name pos:line="868" pos:column="32">code<pos:position pos:line="868" pos:column="36"/></name><index pos:line="868" pos:column="36">[<expr><literal type="number" pos:line="868" pos:column="37">2<pos:position pos:line="868" pos:column="38"/></literal></expr>]<pos:position pos:line="868" pos:column="39"/></index></name></expr>;<pos:position pos:line="868" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="869" pos:column="9">max<pos:position pos:line="869" pos:column="12"/></name> <operator pos:line="869" pos:column="13">=<pos:position pos:line="869" pos:column="14"/></operator> <operator pos:line="869" pos:column="15">(<pos:position pos:line="869" pos:column="16"/></operator><name><name pos:line="869" pos:column="16">code<pos:position pos:line="869" pos:column="20"/></name><index pos:line="869" pos:column="20">[<expr><literal type="number" pos:line="869" pos:column="21">3<pos:position pos:line="869" pos:column="22"/></literal></expr>]<pos:position pos:line="869" pos:column="23"/></index></name> <operator pos:line="869" pos:column="24">&lt;&lt;<pos:position pos:line="869" pos:column="32"/></operator> <literal type="number" pos:line="869" pos:column="27">8<pos:position pos:line="869" pos:column="28"/></literal><operator pos:line="869" pos:column="28">)<pos:position pos:line="869" pos:column="29"/></operator> <operator pos:line="869" pos:column="30">+<pos:position pos:line="869" pos:column="31"/></operator> <name><name pos:line="869" pos:column="32">code<pos:position pos:line="869" pos:column="36"/></name><index pos:line="869" pos:column="36">[<expr><literal type="number" pos:line="869" pos:column="37">4<pos:position pos:line="869" pos:column="38"/></literal></expr>]<pos:position pos:line="869" pos:column="39"/></index></name></expr>;<pos:position pos:line="869" pos:column="40"/></expr_stmt>
        <if pos:line="870" pos:column="9">if <condition pos:line="870" pos:column="12">(<expr><name pos:line="870" pos:column="13">max<pos:position pos:line="870" pos:column="16"/></name> <operator pos:line="870" pos:column="17">==<pos:position pos:line="870" pos:column="19"/></operator> <literal type="number" pos:line="870" pos:column="20">0<pos:position pos:line="870" pos:column="21"/></literal></expr>)<pos:position pos:line="870" pos:column="22"/></condition><then pos:line="870" pos:column="22"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="870" pos:column="23">printf<pos:position pos:line="870" pos:column="29"/></name><argument_list pos:line="870" pos:column="29">(<argument><expr><literal type="string" pos:line="870" pos:column="30">"{%d,}"<pos:position pos:line="870" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="870" pos:column="39">min<pos:position pos:line="870" pos:column="42"/></name></expr></argument>)<pos:position pos:line="870" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="870" pos:column="44"/></expr_stmt></block></then>
        <else pos:line="871" pos:column="9">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="871" pos:column="14">printf<pos:position pos:line="871" pos:column="20"/></name><argument_list pos:line="871" pos:column="20">(<argument><expr><literal type="string" pos:line="871" pos:column="21">"{%d,%d}"<pos:position pos:line="871" pos:column="30"/></literal></expr></argument>, <argument><expr><name pos:line="871" pos:column="32">min<pos:position pos:line="871" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="871" pos:column="37">max<pos:position pos:line="871" pos:column="40"/></name></expr></argument>)<pos:position pos:line="871" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="871" pos:column="42"/></expr_stmt></block></else></if>
        <if pos:line="872" pos:column="9">if <condition pos:line="872" pos:column="12">(<expr><operator pos:line="872" pos:column="13">*<pos:position pos:line="872" pos:column="14"/></operator><name pos:line="872" pos:column="14">code<pos:position pos:line="872" pos:column="18"/></name> <operator pos:line="872" pos:column="19">==<pos:position pos:line="872" pos:column="21"/></operator> <name pos:line="872" pos:column="22">OP_CRMINRANGE<pos:position pos:line="872" pos:column="35"/></name></expr>)<pos:position pos:line="872" pos:column="36"/></condition><then pos:line="872" pos:column="36"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="872" pos:column="37">printf<pos:position pos:line="872" pos:column="43"/></name><argument_list pos:line="872" pos:column="43">(<argument><expr><literal type="string" pos:line="872" pos:column="44">"?"<pos:position pos:line="872" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="872" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="872" pos:column="49"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="873" pos:column="9">code<pos:position pos:line="873" pos:column="13"/></name> <operator pos:line="873" pos:column="14">+=<pos:position pos:line="873" pos:column="16"/></operator> <literal type="number" pos:line="873" pos:column="17">4<pos:position pos:line="873" pos:column="18"/></literal></expr>;<pos:position pos:line="873" pos:column="19"/></expr_stmt>
        <break pos:line="874" pos:column="9">break;<pos:position pos:line="874" pos:column="15"/></break>

        <default pos:line="876" pos:column="9">default:<pos:position pos:line="876" pos:column="17"/></default>
        <expr_stmt><expr><name pos:line="877" pos:column="9">code<pos:position pos:line="877" pos:column="13"/></name><operator pos:line="877" pos:column="13">--<pos:position pos:line="877" pos:column="15"/></operator></expr>;<pos:position pos:line="877" pos:column="16"/></expr_stmt>
        }<pos:position pos:line="878" pos:column="10"/></block></switch>
      }<pos:position pos:line="879" pos:column="8"/></block>
    <break pos:line="880" pos:column="5">break;<pos:position pos:line="880" pos:column="11"/></break>

    <comment type="block" pos:line="882" pos:column="5">/* Anything else is just a one-node item */</comment>

    <default pos:line="884" pos:column="5">default:<pos:position pos:line="884" pos:column="13"/></default>
    <expr_stmt><expr><call><name pos:line="885" pos:column="5">printf<pos:position pos:line="885" pos:column="11"/></name><argument_list pos:line="885" pos:column="11">(<argument><expr><literal type="string" pos:line="885" pos:column="12">"    %s"<pos:position pos:line="885" pos:column="20"/></literal></expr></argument>, <argument><expr><name><name pos:line="885" pos:column="22">OP_names<pos:position pos:line="885" pos:column="30"/></name><index pos:line="885" pos:column="30">[<expr><operator pos:line="885" pos:column="31">*<pos:position pos:line="885" pos:column="32"/></operator><name pos:line="885" pos:column="32">code<pos:position pos:line="885" pos:column="36"/></name></expr>]<pos:position pos:line="885" pos:column="37"/></index></name></expr></argument>)<pos:position pos:line="885" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="885" pos:column="39"/></expr_stmt>
    <break pos:line="886" pos:column="5">break;<pos:position pos:line="886" pos:column="11"/></break>
    }<pos:position pos:line="887" pos:column="6"/></block></switch></block></else></if>

  <expr_stmt><expr><name pos:line="889" pos:column="3">code<pos:position pos:line="889" pos:column="7"/></name><operator pos:line="889" pos:column="7">++<pos:position pos:line="889" pos:column="9"/></operator></expr>;<pos:position pos:line="889" pos:column="10"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="890" pos:column="3">printf<pos:position pos:line="890" pos:column="9"/></name><argument_list pos:line="890" pos:column="9">(<argument><expr><literal type="string" pos:line="890" pos:column="10">"\n"<pos:position pos:line="890" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="890" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="890" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="891" pos:column="4"/></block></while>
<expr_stmt><expr><call><name pos:line="892" pos:column="1">printf<pos:position pos:line="892" pos:column="7"/></name><argument_list pos:line="892" pos:column="7">(<argument><expr><literal type="string" pos:line="892" pos:column="8">"------------------------------------------------------------------\n"<pos:position pos:line="892" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="892" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="892" pos:column="80"/></expr_stmt>

<comment type="block" pos:line="894" pos:column="1">/* This check is done here in the debugging case so that the code that
was compiled can be seen. */</comment>

<if pos:line="897" pos:column="1">if <condition pos:line="897" pos:column="4">(<expr><name pos:line="897" pos:column="5">code<pos:position pos:line="897" pos:column="9"/></name> <operator pos:line="897" pos:column="10">-<pos:position pos:line="897" pos:column="11"/></operator> <name><name pos:line="897" pos:column="12">re<pos:position pos:line="897" pos:column="14"/></name><operator pos:line="897" pos:column="14">-&gt;<pos:position pos:line="897" pos:column="19"/></operator><name pos:line="897" pos:column="16">code<pos:position pos:line="897" pos:column="20"/></name></name> <operator pos:line="897" pos:column="21">&gt;<pos:position pos:line="897" pos:column="25"/></operator> <name pos:line="897" pos:column="23">length<pos:position pos:line="897" pos:column="29"/></name></expr>)<pos:position pos:line="897" pos:column="30"/></condition><then pos:line="897" pos:column="30">
  <block pos:line="898" pos:column="3">{
  <expr_stmt><expr><operator pos:line="899" pos:column="3">*<pos:position pos:line="899" pos:column="4"/></operator><name pos:line="899" pos:column="4">errorptr<pos:position pos:line="899" pos:column="12"/></name> <operator pos:line="899" pos:column="13">=<pos:position pos:line="899" pos:column="14"/></operator> <name pos:line="899" pos:column="15">ERR23<pos:position pos:line="899" pos:column="20"/></name></expr>;<pos:position pos:line="899" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><call pos:line="900" pos:column="3">(<name pos:line="900" pos:column="4">pcre_free<pos:position pos:line="900" pos:column="13"/></name>)<argument_list pos:line="900" pos:column="14">(<argument><expr><name pos:line="900" pos:column="15">re<pos:position pos:line="900" pos:column="17"/></name></expr></argument>)<pos:position pos:line="900" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="900" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><operator pos:line="901" pos:column="3">*<pos:position pos:line="901" pos:column="4"/></operator><name pos:line="901" pos:column="4">erroroffset<pos:position pos:line="901" pos:column="15"/></name> <operator pos:line="901" pos:column="16">=<pos:position pos:line="901" pos:column="17"/></operator> <name pos:line="901" pos:column="18">ptr<pos:position pos:line="901" pos:column="21"/></name> <operator pos:line="901" pos:column="22">-<pos:position pos:line="901" pos:column="23"/></operator> <operator pos:line="901" pos:column="24">(<pos:position pos:line="901" pos:column="25"/></operator><name pos:line="901" pos:column="25">uschar<pos:position pos:line="901" pos:column="31"/></name> <operator pos:line="901" pos:column="32">*<pos:position pos:line="901" pos:column="33"/></operator><operator pos:line="901" pos:column="33">)<pos:position pos:line="901" pos:column="34"/></operator><name pos:line="901" pos:column="34">pattern<pos:position pos:line="901" pos:column="41"/></name></expr>;<pos:position pos:line="901" pos:column="42"/></expr_stmt>
  <return pos:line="902" pos:column="3">return <expr><name pos:line="902" pos:column="10">NULL<pos:position pos:line="902" pos:column="14"/></name></expr>;<pos:position pos:line="902" pos:column="15"/></return>
  }<pos:position pos:line="903" pos:column="4"/></block></then></if>
<cpp:endif pos:line="904" pos:column="1">#<cpp:directive pos:line="904" pos:column="2">endif<pos:position pos:line="904" pos:column="7"/></cpp:directive></cpp:endif>

<return pos:line="906" pos:column="1">return <expr><operator pos:line="906" pos:column="8">(<pos:position pos:line="906" pos:column="9"/></operator><name pos:line="906" pos:column="9">pcre<pos:position pos:line="906" pos:column="13"/></name> <operator pos:line="906" pos:column="14">*<pos:position pos:line="906" pos:column="15"/></operator><operator pos:line="906" pos:column="15">)<pos:position pos:line="906" pos:column="16"/></operator><name pos:line="906" pos:column="16">re<pos:position pos:line="906" pos:column="18"/></name></expr>;<pos:position pos:line="906" pos:column="19"/></return>
}<pos:position pos:line="907" pos:column="2"/></block></function></unit>
