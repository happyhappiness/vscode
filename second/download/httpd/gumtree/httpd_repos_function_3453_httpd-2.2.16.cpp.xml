<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3453_httpd-2.2.16.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">parse_input_file_name<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">arg<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">command_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">cmd_data<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="58"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">ext<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><call><name pos:line="3" pos:column="17">strrchr<pos:position pos:line="3" pos:column="24"/></name><argument_list pos:line="3" pos:column="24">(<argument><expr><name pos:line="3" pos:column="25">arg<pos:position pos:line="3" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="3" pos:column="30">'.'<pos:position pos:line="3" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">name<pos:position pos:line="4" pos:column="15"/></name> <init pos:line="4" pos:column="16">= <expr><call><name pos:line="4" pos:column="18">strrchr<pos:position pos:line="4" pos:column="25"/></name><argument_list pos:line="4" pos:column="25">(<argument><expr><name pos:line="4" pos:column="26">arg<pos:position pos:line="4" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="4" pos:column="31">'/'<pos:position pos:line="4" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">pathlen<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">enum<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">lib_type<pos:position pos:line="6" pos:column="18"/></name></name></type> <name pos:line="6" pos:column="19">libtype<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">newarg<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">ext<pos:position pos:line="9" pos:column="13"/></name></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14"> <block pos:line="9" pos:column="15">{
        <return pos:line="10" pos:column="9">return <expr><literal type="number" pos:line="10" pos:column="16">0<pos:position pos:line="10" pos:column="17"/></literal></expr>;<pos:position pos:line="10" pos:column="18"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="13" pos:column="5">ext<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">++<pos:position pos:line="13" pos:column="10"/></operator></expr>;<pos:position pos:line="13" pos:column="11"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">name<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">==<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">NULL<pos:position pos:line="15" pos:column="21"/></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22"> <block pos:line="15" pos:column="23">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">name<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <call><name pos:line="16" pos:column="16">strrchr<pos:position pos:line="16" pos:column="23"/></name><argument_list pos:line="16" pos:column="23">(<argument><expr><name pos:line="16" pos:column="24">arg<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="29">'\\'<pos:position pos:line="16" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></expr_stmt>

        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">name<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">==<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">NULL<pos:position pos:line="18" pos:column="25"/></name></expr>)<pos:position pos:line="18" pos:column="26"/></condition><then pos:line="18" pos:column="26"> <block pos:line="18" pos:column="27">{
            <expr_stmt><expr><name pos:line="19" pos:column="13">name<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">=<pos:position pos:line="19" pos:column="19"/></operator> <name pos:line="19" pos:column="20">arg<pos:position pos:line="19" pos:column="23"/></name></expr>;<pos:position pos:line="19" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block></then> <else pos:line="20" pos:column="11">else <block pos:line="20" pos:column="16">{
            <expr_stmt><expr><name pos:line="21" pos:column="13">name<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">++<pos:position pos:line="21" pos:column="19"/></operator></expr>;<pos:position pos:line="21" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></else></if>
    }<pos:position pos:line="23" pos:column="6"/></block></then> <else pos:line="23" pos:column="7">else <block pos:line="23" pos:column="12">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">name<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">++<pos:position pos:line="24" pos:column="15"/></operator></expr>;<pos:position pos:line="24" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="27" pos:column="5">pathlen<pos:position pos:line="27" pos:column="12"/></name> <operator pos:line="27" pos:column="13">=<pos:position pos:line="27" pos:column="14"/></operator> <name pos:line="27" pos:column="15">name<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">-<pos:position pos:line="27" pos:column="21"/></operator> <name pos:line="27" pos:column="22">arg<pos:position pos:line="27" pos:column="25"/></name></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name pos:line="29" pos:column="9">strcmp<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name pos:line="29" pos:column="16">ext<pos:position pos:line="29" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="21">"lo"<pos:position pos:line="29" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="26"/></argument_list></call> <operator pos:line="29" pos:column="27">==<pos:position pos:line="29" pos:column="29"/></operator> <literal type="number" pos:line="29" pos:column="30">0<pos:position pos:line="29" pos:column="31"/></literal></expr>)<pos:position pos:line="29" pos:column="32"/></condition><then pos:line="29" pos:column="32"> <block pos:line="29" pos:column="33">{
        <expr_stmt><expr><name pos:line="30" pos:column="9">newarg<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator> <call><name pos:line="30" pos:column="18">check_object_exists<pos:position pos:line="30" pos:column="37"/></name><argument_list pos:line="30" pos:column="37">(<argument><expr><name pos:line="30" pos:column="38">cmd_data<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">arg<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">ext<pos:position pos:line="30" pos:column="56"/></name> <operator pos:line="30" pos:column="57">-<pos:position pos:line="30" pos:column="58"/></operator> <name pos:line="30" pos:column="59">arg<pos:position pos:line="30" pos:column="62"/></name></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="64"/></expr_stmt>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">newarg<pos:position pos:line="31" pos:column="20"/></name></expr>)<pos:position pos:line="31" pos:column="21"/></condition><then pos:line="31" pos:column="21"> <block pos:line="31" pos:column="22">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">printf<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><literal type="string" pos:line="32" pos:column="20">"Can not find suitable object file for %s\n"<pos:position pos:line="32" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="66">arg<pos:position pos:line="32" pos:column="69"/></name></expr></argument>)<pos:position pos:line="32" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">exit<pos:position pos:line="33" pos:column="17"/></name><argument_list pos:line="33" pos:column="17">(<argument><expr><literal type="number" pos:line="33" pos:column="18">1<pos:position pos:line="33" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name><name pos:line="35" pos:column="13">cmd_data<pos:position pos:line="35" pos:column="21"/></name><operator pos:line="35" pos:column="21">-&gt;<pos:position pos:line="35" pos:column="26"/></operator><name pos:line="35" pos:column="23">mode<pos:position pos:line="35" pos:column="27"/></name></name> <operator pos:line="35" pos:column="28">!=<pos:position pos:line="35" pos:column="30"/></operator> <name pos:line="35" pos:column="31">mLink<pos:position pos:line="35" pos:column="36"/></name></expr>)<pos:position pos:line="35" pos:column="37"/></condition><then pos:line="35" pos:column="37"> <block pos:line="35" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">push_count_chars<pos:position pos:line="36" pos:column="29"/></name><argument_list pos:line="36" pos:column="29">(<argument><expr><name><name pos:line="36" pos:column="30">cmd_data<pos:position pos:line="36" pos:column="38"/></name><operator pos:line="36" pos:column="38">-&gt;<pos:position pos:line="36" pos:column="43"/></operator><name pos:line="36" pos:column="40">arglist<pos:position pos:line="36" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="49">newarg<pos:position pos:line="36" pos:column="55"/></name></expr></argument>)<pos:position pos:line="36" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then>
        <else pos:line="38" pos:column="9">else <block pos:line="38" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">push_count_chars<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name><name pos:line="39" pos:column="30">cmd_data<pos:position pos:line="39" pos:column="38"/></name><operator pos:line="39" pos:column="38">-&gt;<pos:position pos:line="39" pos:column="43"/></operator><name pos:line="39" pos:column="40">obj_files<pos:position pos:line="39" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="51">newarg<pos:position pos:line="39" pos:column="57"/></name></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="59"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></else></if>
        <return pos:line="41" pos:column="9">return <expr><literal type="number" pos:line="41" pos:column="16">1<pos:position pos:line="41" pos:column="17"/></literal></expr>;<pos:position pos:line="41" pos:column="18"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name pos:line="44" pos:column="9">strcmp<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><name pos:line="44" pos:column="16">ext<pos:position pos:line="44" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="21">"la"<pos:position pos:line="44" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="26"/></argument_list></call> <operator pos:line="44" pos:column="27">==<pos:position pos:line="44" pos:column="29"/></operator> <literal type="number" pos:line="44" pos:column="30">0<pos:position pos:line="44" pos:column="31"/></literal></expr>)<pos:position pos:line="44" pos:column="32"/></condition><then pos:line="44" pos:column="32"> <block pos:line="44" pos:column="33">{
        <switch pos:line="45" pos:column="9">switch <condition pos:line="45" pos:column="16">(<expr><name><name pos:line="45" pos:column="17">cmd_data<pos:position pos:line="45" pos:column="25"/></name><operator pos:line="45" pos:column="25">-&gt;<pos:position pos:line="45" pos:column="30"/></operator><name pos:line="45" pos:column="27">mode<pos:position pos:line="45" pos:column="31"/></name></name></expr>)<pos:position pos:line="45" pos:column="32"/></condition> <block pos:line="45" pos:column="33">{
        <case pos:line="46" pos:column="9">case <expr><name pos:line="46" pos:column="14">mLink<pos:position pos:line="46" pos:column="19"/></name></expr>:<pos:position pos:line="46" pos:column="20"/></case>
            <comment type="block" pos:line="47" pos:column="13">/* Try the .libs dir first! */</comment>
            <expr_stmt><expr><name pos:line="48" pos:column="13">newarg<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <call><name pos:line="48" pos:column="22">check_library_exists<pos:position pos:line="48" pos:column="42"/></name><argument_list pos:line="48" pos:column="42">(<argument><expr><name pos:line="48" pos:column="43">cmd_data<pos:position pos:line="48" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="53">arg<pos:position pos:line="48" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="58">pathlen<pos:position pos:line="48" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="67">1<pos:position pos:line="48" pos:column="68"/></literal></expr></argument>, <argument><expr><operator pos:line="48" pos:column="70">&amp;<pos:position pos:line="48" pos:column="75"/></operator><name pos:line="48" pos:column="71">libtype<pos:position pos:line="48" pos:column="78"/></name></expr></argument>)<pos:position pos:line="48" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="80"/></expr_stmt>
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><operator pos:line="49" pos:column="17">!<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">newarg<pos:position pos:line="49" pos:column="24"/></name></expr>)<pos:position pos:line="49" pos:column="25"/></condition><then pos:line="49" pos:column="25"> <block pos:line="49" pos:column="26">{
                <comment type="block" pos:line="50" pos:column="17">/* Try the normal dir next. */</comment>
                <expr_stmt><expr><name pos:line="51" pos:column="17">newarg<pos:position pos:line="51" pos:column="23"/></name> <operator pos:line="51" pos:column="24">=<pos:position pos:line="51" pos:column="25"/></operator> <call><name pos:line="51" pos:column="26">check_library_exists<pos:position pos:line="51" pos:column="46"/></name><argument_list pos:line="51" pos:column="46">(<argument><expr><name pos:line="51" pos:column="47">cmd_data<pos:position pos:line="51" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="57">arg<pos:position pos:line="51" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="62">pathlen<pos:position pos:line="51" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="71">0<pos:position pos:line="51" pos:column="72"/></literal></expr></argument>, <argument><expr><operator pos:line="51" pos:column="74">&amp;<pos:position pos:line="51" pos:column="79"/></operator><name pos:line="51" pos:column="75">libtype<pos:position pos:line="51" pos:column="82"/></name></expr></argument>)<pos:position pos:line="51" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="84"/></expr_stmt>
                <if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><operator pos:line="52" pos:column="21">!<pos:position pos:line="52" pos:column="22"/></operator><name pos:line="52" pos:column="22">newarg<pos:position pos:line="52" pos:column="28"/></name></expr>)<pos:position pos:line="52" pos:column="29"/></condition><then pos:line="52" pos:column="29"> <block pos:line="52" pos:column="30">{
                    <expr_stmt><expr><call><name pos:line="53" pos:column="21">printf<pos:position pos:line="53" pos:column="27"/></name><argument_list pos:line="53" pos:column="27">(<argument><expr><literal type="string" pos:line="53" pos:column="28">"Can not find suitable library for %s\n"<pos:position pos:line="53" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="70">arg<pos:position pos:line="53" pos:column="73"/></name></expr></argument>)<pos:position pos:line="53" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="75"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="54" pos:column="21">exit<pos:position pos:line="54" pos:column="25"/></name><argument_list pos:line="54" pos:column="25">(<argument><expr><literal type="number" pos:line="54" pos:column="26">1<pos:position pos:line="54" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="55" pos:column="18"/></block></then></if>
            }<pos:position pos:line="56" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="58" pos:column="13">/* It is not ok to just add the file: a library may added with:
               1 - -L path library_name. (For *.so in Linux).
               2 - library_name.
             */</comment>
<cpp:ifdef pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">ifdef<pos:position pos:line="62" pos:column="7"/></cpp:directive> <name pos:line="62" pos:column="8">ADD_MINUS_L<pos:position pos:line="62" pos:column="19"/></name></cpp:ifdef>
            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><name pos:line="63" pos:column="17">libtype<pos:position pos:line="63" pos:column="24"/></name> <operator pos:line="63" pos:column="25">==<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="28">type_DYNAMIC_LIB<pos:position pos:line="63" pos:column="44"/></name></expr>)<pos:position pos:line="63" pos:column="45"/></condition><then pos:line="63" pos:column="45"> <block pos:line="63" pos:column="46">{
                 <expr_stmt><expr><call><name pos:line="64" pos:column="18">add_minus_l<pos:position pos:line="64" pos:column="29"/></name><argument_list pos:line="64" pos:column="29">(<argument><expr><name><name pos:line="64" pos:column="30">cmd_data<pos:position pos:line="64" pos:column="38"/></name><operator pos:line="64" pos:column="38">-&gt;<pos:position pos:line="64" pos:column="43"/></operator><name pos:line="64" pos:column="40">shared_opts<pos:position pos:line="64" pos:column="51"/></name><operator pos:line="64" pos:column="51">.<pos:position pos:line="64" pos:column="52"/></operator><name pos:line="64" pos:column="52">dependencies<pos:position pos:line="64" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="66">newarg<pos:position pos:line="64" pos:column="72"/></name></expr></argument>)<pos:position pos:line="64" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="74"/></expr_stmt>
            }<pos:position pos:line="65" pos:column="14"/></block></then> <elseif pos:line="65" pos:column="15">else <if pos:line="65" pos:column="20">if <condition pos:line="65" pos:column="23">(<expr><name><name pos:line="65" pos:column="24">cmd_data<pos:position pos:line="65" pos:column="32"/></name><operator pos:line="65" pos:column="32">-&gt;<pos:position pos:line="65" pos:column="37"/></operator><name pos:line="65" pos:column="34">output<pos:position pos:line="65" pos:column="40"/></name></name> <operator pos:line="65" pos:column="41">==<pos:position pos:line="65" pos:column="43"/></operator> <name pos:line="65" pos:column="44">otLibrary<pos:position pos:line="65" pos:column="53"/></name> <operator pos:line="65" pos:column="54">&amp;&amp;<pos:position pos:line="65" pos:column="64"/></operator>
                       <name pos:line="66" pos:column="24">libtype<pos:position pos:line="66" pos:column="31"/></name> <operator pos:line="66" pos:column="32">==<pos:position pos:line="66" pos:column="34"/></operator> <name pos:line="66" pos:column="35">type_STATIC_LIB<pos:position pos:line="66" pos:column="50"/></name></expr>)<pos:position pos:line="66" pos:column="51"/></condition><then pos:line="66" pos:column="51"> <block pos:line="66" pos:column="52">{
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">explode_static_lib<pos:position pos:line="67" pos:column="35"/></name><argument_list pos:line="67" pos:column="35">(<argument><expr><name pos:line="67" pos:column="36">cmd_data<pos:position pos:line="67" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="46">newarg<pos:position pos:line="67" pos:column="52"/></name></expr></argument>)<pos:position pos:line="67" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="54"/></expr_stmt>
            }<pos:position pos:line="68" pos:column="14"/></block></then></if></elseif> <else pos:line="68" pos:column="15">else <block pos:line="68" pos:column="20">{
                 <expr_stmt><expr><call><name pos:line="69" pos:column="18">push_count_chars<pos:position pos:line="69" pos:column="34"/></name><argument_list pos:line="69" pos:column="34">(<argument><expr><name><name pos:line="69" pos:column="35">cmd_data<pos:position pos:line="69" pos:column="43"/></name><operator pos:line="69" pos:column="43">-&gt;<pos:position pos:line="69" pos:column="48"/></operator><name pos:line="69" pos:column="45">shared_opts<pos:position pos:line="69" pos:column="56"/></name><operator pos:line="69" pos:column="56">.<pos:position pos:line="69" pos:column="57"/></operator><name pos:line="69" pos:column="57">dependencies<pos:position pos:line="69" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="71">newarg<pos:position pos:line="69" pos:column="77"/></name></expr></argument>)<pos:position pos:line="69" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="79"/></expr_stmt>
            }<pos:position pos:line="70" pos:column="14"/></block></else></if>
<cpp:else pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">else<pos:position pos:line="71" pos:column="6"/></cpp:directive></cpp:else>
            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><name><name pos:line="72" pos:column="17">cmd_data<pos:position pos:line="72" pos:column="25"/></name><operator pos:line="72" pos:column="25">-&gt;<pos:position pos:line="72" pos:column="30"/></operator><name pos:line="72" pos:column="27">output<pos:position pos:line="72" pos:column="33"/></name></name> <operator pos:line="72" pos:column="34">==<pos:position pos:line="72" pos:column="36"/></operator> <name pos:line="72" pos:column="37">otLibrary<pos:position pos:line="72" pos:column="46"/></name> <operator pos:line="72" pos:column="47">&amp;&amp;<pos:position pos:line="72" pos:column="57"/></operator> <name pos:line="72" pos:column="50">libtype<pos:position pos:line="72" pos:column="57"/></name> <operator pos:line="72" pos:column="58">==<pos:position pos:line="72" pos:column="60"/></operator> <name pos:line="72" pos:column="61">type_STATIC_LIB<pos:position pos:line="72" pos:column="76"/></name></expr>)<pos:position pos:line="72" pos:column="77"/></condition><then pos:line="72" pos:column="77"> <block pos:line="72" pos:column="78">{
                <expr_stmt><expr><call><name pos:line="73" pos:column="17">explode_static_lib<pos:position pos:line="73" pos:column="35"/></name><argument_list pos:line="73" pos:column="35">(<argument><expr><name pos:line="73" pos:column="36">cmd_data<pos:position pos:line="73" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="46">newarg<pos:position pos:line="73" pos:column="52"/></name></expr></argument>)<pos:position pos:line="73" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="54"/></expr_stmt>
            }<pos:position pos:line="74" pos:column="14"/></block></then>
            <else pos:line="75" pos:column="13">else <block pos:line="75" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="76" pos:column="17">push_count_chars<pos:position pos:line="76" pos:column="33"/></name><argument_list pos:line="76" pos:column="33">(<argument><expr><name><name pos:line="76" pos:column="34">cmd_data<pos:position pos:line="76" pos:column="42"/></name><operator pos:line="76" pos:column="42">-&gt;<pos:position pos:line="76" pos:column="47"/></operator><name pos:line="76" pos:column="44">shared_opts<pos:position pos:line="76" pos:column="55"/></name><operator pos:line="76" pos:column="55">.<pos:position pos:line="76" pos:column="56"/></operator><name pos:line="76" pos:column="56">dependencies<pos:position pos:line="76" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="70">newarg<pos:position pos:line="76" pos:column="76"/></name></expr></argument>)<pos:position pos:line="76" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="78"/></expr_stmt>
            }<pos:position pos:line="77" pos:column="14"/></block></else></if>
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif>
            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<expr><name pos:line="79" pos:column="17">libtype<pos:position pos:line="79" pos:column="24"/></name> <operator pos:line="79" pos:column="25">==<pos:position pos:line="79" pos:column="27"/></operator> <name pos:line="79" pos:column="28">type_DYNAMIC_LIB<pos:position pos:line="79" pos:column="44"/></name></expr>)<pos:position pos:line="79" pos:column="45"/></condition><then pos:line="79" pos:column="45"> <block pos:line="79" pos:column="46">{
                <if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><name><name pos:line="80" pos:column="21">cmd_data<pos:position pos:line="80" pos:column="29"/></name><operator pos:line="80" pos:column="29">-&gt;<pos:position pos:line="80" pos:column="34"/></operator><name pos:line="80" pos:column="31">options<pos:position pos:line="80" pos:column="38"/></name><operator pos:line="80" pos:column="38">.<pos:position pos:line="80" pos:column="39"/></operator><name pos:line="80" pos:column="39">no_install<pos:position pos:line="80" pos:column="49"/></name></name></expr>)<pos:position pos:line="80" pos:column="50"/></condition><then pos:line="80" pos:column="50"> <block pos:line="80" pos:column="51">{
<cpp:ifdef pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">ifdef<pos:position pos:line="81" pos:column="7"/></cpp:directive> <name pos:line="81" pos:column="8">RPATH<pos:position pos:line="81" pos:column="13"/></name></cpp:ifdef>
                    <expr_stmt><expr><call><name pos:line="82" pos:column="21">add_rpath_noinstall<pos:position pos:line="82" pos:column="40"/></name><argument_list pos:line="82" pos:column="40">(<argument><expr><name><name pos:line="82" pos:column="41">cmd_data<pos:position pos:line="82" pos:column="49"/></name><operator pos:line="82" pos:column="49">-&gt;<pos:position pos:line="82" pos:column="54"/></operator><name pos:line="82" pos:column="51">shared_opts<pos:position pos:line="82" pos:column="62"/></name><operator pos:line="82" pos:column="62">.<pos:position pos:line="82" pos:column="63"/></operator><name pos:line="82" pos:column="63">dependencies<pos:position pos:line="82" pos:column="75"/></name></name></expr></argument>,
                                        <argument><expr><name pos:line="83" pos:column="41">arg<pos:position pos:line="83" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="46">pathlen<pos:position pos:line="83" pos:column="53"/></name></expr></argument>)<pos:position pos:line="83" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="85" pos:column="1">#<cpp:directive pos:line="85" pos:column="2">ifdef<pos:position pos:line="85" pos:column="7"/></cpp:directive> <name pos:line="85" pos:column="8">DYNAMIC_LINK_NO_INSTALL<pos:position pos:line="85" pos:column="31"/></name></cpp:ifdef>
                    <comment type="block" pos:line="86" pos:column="21">/*
                     * This doesn't work as Darwin's linker has no way to
                     * override at link-time the search paths for a
                     * non-installed library.
                     */</comment>
                    <comment type="block" pos:line="91" pos:column="21">/*
                    add_dylink_noinstall(cmd_data-&gt;shared_opts.dependencies,
                                         arg, pathlen, ext - arg);
                    */</comment>
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif>
                }<pos:position pos:line="96" pos:column="18"/></block></then>
                <else pos:line="97" pos:column="17">else <block pos:line="97" pos:column="22">{
<cpp:ifdef pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">ifdef<pos:position pos:line="98" pos:column="7"/></cpp:directive> <name pos:line="98" pos:column="8">RPATH<pos:position pos:line="98" pos:column="13"/></name></cpp:ifdef>
                    <expr_stmt><expr><call><name pos:line="99" pos:column="21">add_rpath_file<pos:position pos:line="99" pos:column="35"/></name><argument_list pos:line="99" pos:column="35">(<argument><expr><name><name pos:line="99" pos:column="36">cmd_data<pos:position pos:line="99" pos:column="44"/></name><operator pos:line="99" pos:column="44">-&gt;<pos:position pos:line="99" pos:column="49"/></operator><name pos:line="99" pos:column="46">shared_opts<pos:position pos:line="99" pos:column="57"/></name><operator pos:line="99" pos:column="57">.<pos:position pos:line="99" pos:column="58"/></operator><name pos:line="99" pos:column="58">dependencies<pos:position pos:line="99" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="72">arg<pos:position pos:line="99" pos:column="75"/></name></expr></argument>)<pos:position pos:line="99" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="77"/></expr_stmt>
<cpp:endif pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">endif<pos:position pos:line="100" pos:column="7"/></cpp:directive></cpp:endif>
                }<pos:position pos:line="101" pos:column="18"/></block></else></if>
            }<pos:position pos:line="102" pos:column="14"/></block></then></if>
            <break pos:line="103" pos:column="13">break;<pos:position pos:line="103" pos:column="19"/></break>
        <case pos:line="104" pos:column="9">case <expr><name pos:line="104" pos:column="14">mInstall<pos:position pos:line="104" pos:column="22"/></name></expr>:<pos:position pos:line="104" pos:column="23"/></case>
            <comment type="block" pos:line="105" pos:column="13">/* If we've already recorded a library to install, we're most
             * likely getting the .la file that we want to install as.
             * The problem is that we need to add it as the directory,
             * not the .la file itself.  Otherwise, we'll do odd things.
             */</comment>
            <if pos:line="110" pos:column="13">if <condition pos:line="110" pos:column="16">(<expr><name><name pos:line="110" pos:column="17">cmd_data<pos:position pos:line="110" pos:column="25"/></name><operator pos:line="110" pos:column="25">-&gt;<pos:position pos:line="110" pos:column="30"/></operator><name pos:line="110" pos:column="27">output<pos:position pos:line="110" pos:column="33"/></name></name> <operator pos:line="110" pos:column="34">==<pos:position pos:line="110" pos:column="36"/></operator> <name pos:line="110" pos:column="37">otLibrary<pos:position pos:line="110" pos:column="46"/></name></expr>)<pos:position pos:line="110" pos:column="47"/></condition><then pos:line="110" pos:column="47"> <block pos:line="110" pos:column="48">{
                <expr_stmt><expr><name><name pos:line="111" pos:column="17">arg<pos:position pos:line="111" pos:column="20"/></name><index pos:line="111" pos:column="20">[<expr><name pos:line="111" pos:column="21">pathlen<pos:position pos:line="111" pos:column="28"/></name></expr>]<pos:position pos:line="111" pos:column="29"/></index></name> <operator pos:line="111" pos:column="30">=<pos:position pos:line="111" pos:column="31"/></operator> <literal type="char" pos:line="111" pos:column="32">'\0'<pos:position pos:line="111" pos:column="36"/></literal></expr>;<pos:position pos:line="111" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="112" pos:column="17">push_count_chars<pos:position pos:line="112" pos:column="33"/></name><argument_list pos:line="112" pos:column="33">(<argument><expr><name><name pos:line="112" pos:column="34">cmd_data<pos:position pos:line="112" pos:column="42"/></name><operator pos:line="112" pos:column="42">-&gt;<pos:position pos:line="112" pos:column="47"/></operator><name pos:line="112" pos:column="44">arglist<pos:position pos:line="112" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="112" pos:column="53">arg<pos:position pos:line="112" pos:column="56"/></name></expr></argument>)<pos:position pos:line="112" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="58"/></expr_stmt>
            }<pos:position pos:line="113" pos:column="14"/></block></then>
            <else pos:line="114" pos:column="13">else <block pos:line="114" pos:column="18">{
                <expr_stmt><expr><name><name pos:line="115" pos:column="17">cmd_data<pos:position pos:line="115" pos:column="25"/></name><operator pos:line="115" pos:column="25">-&gt;<pos:position pos:line="115" pos:column="30"/></operator><name pos:line="115" pos:column="27">output<pos:position pos:line="115" pos:column="33"/></name></name> <operator pos:line="115" pos:column="34">=<pos:position pos:line="115" pos:column="35"/></operator> <name pos:line="115" pos:column="36">otLibrary<pos:position pos:line="115" pos:column="45"/></name></expr>;<pos:position pos:line="115" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="116" pos:column="17">cmd_data<pos:position pos:line="116" pos:column="25"/></name><operator pos:line="116" pos:column="25">-&gt;<pos:position pos:line="116" pos:column="30"/></operator><name pos:line="116" pos:column="27">output_name<pos:position pos:line="116" pos:column="38"/></name></name> <operator pos:line="116" pos:column="39">=<pos:position pos:line="116" pos:column="40"/></operator> <name pos:line="116" pos:column="41">arg<pos:position pos:line="116" pos:column="44"/></name></expr>;<pos:position pos:line="116" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="117" pos:column="17">cmd_data<pos:position pos:line="117" pos:column="25"/></name><operator pos:line="117" pos:column="25">-&gt;<pos:position pos:line="117" pos:column="30"/></operator><name pos:line="117" pos:column="27">static_name<pos:position pos:line="117" pos:column="38"/></name><operator pos:line="117" pos:column="38">.<pos:position pos:line="117" pos:column="39"/></operator><name pos:line="117" pos:column="39">install<pos:position pos:line="117" pos:column="46"/></name></name> <operator pos:line="117" pos:column="47">=<pos:position pos:line="117" pos:column="48"/></operator> <call><name pos:line="117" pos:column="49">gen_install_name<pos:position pos:line="117" pos:column="65"/></name><argument_list pos:line="117" pos:column="65">(<argument><expr><name pos:line="117" pos:column="66">arg<pos:position pos:line="117" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="71">0<pos:position pos:line="117" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="74"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="118" pos:column="17">cmd_data<pos:position pos:line="118" pos:column="25"/></name><operator pos:line="118" pos:column="25">-&gt;<pos:position pos:line="118" pos:column="30"/></operator><name pos:line="118" pos:column="27">shared_name<pos:position pos:line="118" pos:column="38"/></name><operator pos:line="118" pos:column="38">.<pos:position pos:line="118" pos:column="39"/></operator><name pos:line="118" pos:column="39">install<pos:position pos:line="118" pos:column="46"/></name></name> <operator pos:line="118" pos:column="47">=<pos:position pos:line="118" pos:column="48"/></operator> <call><name pos:line="118" pos:column="49">gen_install_name<pos:position pos:line="118" pos:column="65"/></name><argument_list pos:line="118" pos:column="65">(<argument><expr><name pos:line="118" pos:column="66">arg<pos:position pos:line="118" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="118" pos:column="71">1<pos:position pos:line="118" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="118" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="74"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="119" pos:column="17">cmd_data<pos:position pos:line="119" pos:column="25"/></name><operator pos:line="119" pos:column="25">-&gt;<pos:position pos:line="119" pos:column="30"/></operator><name pos:line="119" pos:column="27">module_name<pos:position pos:line="119" pos:column="38"/></name><operator pos:line="119" pos:column="38">.<pos:position pos:line="119" pos:column="39"/></operator><name pos:line="119" pos:column="39">install<pos:position pos:line="119" pos:column="46"/></name></name> <operator pos:line="119" pos:column="47">=<pos:position pos:line="119" pos:column="48"/></operator> <call><name pos:line="119" pos:column="49">gen_install_name<pos:position pos:line="119" pos:column="65"/></name><argument_list pos:line="119" pos:column="65">(<argument><expr><name pos:line="119" pos:column="66">arg<pos:position pos:line="119" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="119" pos:column="71">2<pos:position pos:line="119" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="119" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="74"/></expr_stmt>
            }<pos:position pos:line="120" pos:column="14"/></block></else></if>
            <break pos:line="121" pos:column="13">break;<pos:position pos:line="121" pos:column="19"/></break>
        <default pos:line="122" pos:column="9">default:<pos:position pos:line="122" pos:column="17"/></default>
            <break pos:line="123" pos:column="13">break;<pos:position pos:line="123" pos:column="19"/></break>
        }<pos:position pos:line="124" pos:column="10"/></block></switch>
        <return pos:line="125" pos:column="9">return <expr><literal type="number" pos:line="125" pos:column="16">1<pos:position pos:line="125" pos:column="17"/></literal></expr>;<pos:position pos:line="125" pos:column="18"/></return>
    }<pos:position pos:line="126" pos:column="6"/></block></then></if>

    <if pos:line="128" pos:column="5">if <condition pos:line="128" pos:column="8">(<expr><call><name pos:line="128" pos:column="9">strcmp<pos:position pos:line="128" pos:column="15"/></name><argument_list pos:line="128" pos:column="15">(<argument><expr><name pos:line="128" pos:column="16">ext<pos:position pos:line="128" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="128" pos:column="21">"c"<pos:position pos:line="128" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="128" pos:column="25"/></argument_list></call> <operator pos:line="128" pos:column="26">==<pos:position pos:line="128" pos:column="28"/></operator> <literal type="number" pos:line="128" pos:column="29">0<pos:position pos:line="128" pos:column="30"/></literal></expr>)<pos:position pos:line="128" pos:column="31"/></condition><then pos:line="128" pos:column="31"> <block pos:line="128" pos:column="32">{
        <comment type="block" pos:line="129" pos:column="9">/* If we don't already have an idea what our output name will be. */</comment>
        <if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><name><name pos:line="130" pos:column="13">cmd_data<pos:position pos:line="130" pos:column="21"/></name><operator pos:line="130" pos:column="21">-&gt;<pos:position pos:line="130" pos:column="26"/></operator><name pos:line="130" pos:column="23">basename<pos:position pos:line="130" pos:column="31"/></name></name> <operator pos:line="130" pos:column="32">==<pos:position pos:line="130" pos:column="34"/></operator> <name pos:line="130" pos:column="35">NULL<pos:position pos:line="130" pos:column="39"/></name></expr>)<pos:position pos:line="130" pos:column="40"/></condition><then pos:line="130" pos:column="40"> <block pos:line="130" pos:column="41">{
            <expr_stmt><expr><name><name pos:line="131" pos:column="13">cmd_data<pos:position pos:line="131" pos:column="21"/></name><operator pos:line="131" pos:column="21">-&gt;<pos:position pos:line="131" pos:column="26"/></operator><name pos:line="131" pos:column="23">basename<pos:position pos:line="131" pos:column="31"/></name></name> <operator pos:line="131" pos:column="32">=<pos:position pos:line="131" pos:column="33"/></operator> <operator pos:line="131" pos:column="34">(<pos:position pos:line="131" pos:column="35"/></operator><name pos:line="131" pos:column="35">char<pos:position pos:line="131" pos:column="39"/></name> <operator pos:line="131" pos:column="40">*<pos:position pos:line="131" pos:column="41"/></operator><operator pos:line="131" pos:column="41">)<pos:position pos:line="131" pos:column="42"/></operator><call><name pos:line="131" pos:column="42">malloc<pos:position pos:line="131" pos:column="48"/></name><argument_list pos:line="131" pos:column="48">(<argument><expr><call><name pos:line="131" pos:column="49">strlen<pos:position pos:line="131" pos:column="55"/></name><argument_list pos:line="131" pos:column="55">(<argument><expr><name pos:line="131" pos:column="56">arg<pos:position pos:line="131" pos:column="59"/></name></expr></argument>)<pos:position pos:line="131" pos:column="60"/></argument_list></call> <operator pos:line="131" pos:column="61">+<pos:position pos:line="131" pos:column="62"/></operator> <literal type="number" pos:line="131" pos:column="63">4<pos:position pos:line="131" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="132" pos:column="13">strcpy<pos:position pos:line="132" pos:column="19"/></name><argument_list pos:line="132" pos:column="19">(<argument><expr><name><name pos:line="132" pos:column="20">cmd_data<pos:position pos:line="132" pos:column="28"/></name><operator pos:line="132" pos:column="28">-&gt;<pos:position pos:line="132" pos:column="33"/></operator><name pos:line="132" pos:column="30">basename<pos:position pos:line="132" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="40">arg<pos:position pos:line="132" pos:column="43"/></name></expr></argument>)<pos:position pos:line="132" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="133" pos:column="13">strcpy<pos:position pos:line="133" pos:column="19"/></name><argument_list pos:line="133" pos:column="19">(<argument><expr><call><name pos:line="133" pos:column="20">strrchr<pos:position pos:line="133" pos:column="27"/></name><argument_list pos:line="133" pos:column="27">(<argument><expr><name><name pos:line="133" pos:column="28">cmd_data<pos:position pos:line="133" pos:column="36"/></name><operator pos:line="133" pos:column="36">-&gt;<pos:position pos:line="133" pos:column="41"/></operator><name pos:line="133" pos:column="38">basename<pos:position pos:line="133" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="133" pos:column="48">'.'<pos:position pos:line="133" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="52"/></argument_list></call> <operator pos:line="133" pos:column="53">+<pos:position pos:line="133" pos:column="54"/></operator> <literal type="number" pos:line="133" pos:column="55">1<pos:position pos:line="133" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="58">"lo"<pos:position pos:line="133" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="64"/></expr_stmt>

            <expr_stmt><expr><name><name pos:line="135" pos:column="13">cmd_data<pos:position pos:line="135" pos:column="21"/></name><operator pos:line="135" pos:column="21">-&gt;<pos:position pos:line="135" pos:column="26"/></operator><name pos:line="135" pos:column="23">fake_output_name<pos:position pos:line="135" pos:column="39"/></name></name> <operator pos:line="135" pos:column="40">=<pos:position pos:line="135" pos:column="41"/></operator> <call><name pos:line="135" pos:column="42">strrchr<pos:position pos:line="135" pos:column="49"/></name><argument_list pos:line="135" pos:column="49">(<argument><expr><name><name pos:line="135" pos:column="50">cmd_data<pos:position pos:line="135" pos:column="58"/></name><operator pos:line="135" pos:column="58">-&gt;<pos:position pos:line="135" pos:column="63"/></operator><name pos:line="135" pos:column="60">basename<pos:position pos:line="135" pos:column="68"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="135" pos:column="70">'/'<pos:position pos:line="135" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="135" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="75"/></expr_stmt>
            <if pos:line="136" pos:column="13">if <condition pos:line="136" pos:column="16">(<expr><name><name pos:line="136" pos:column="17">cmd_data<pos:position pos:line="136" pos:column="25"/></name><operator pos:line="136" pos:column="25">-&gt;<pos:position pos:line="136" pos:column="30"/></operator><name pos:line="136" pos:column="27">fake_output_name<pos:position pos:line="136" pos:column="43"/></name></name></expr>)<pos:position pos:line="136" pos:column="44"/></condition><then pos:line="136" pos:column="44"> <block pos:line="136" pos:column="45">{
                <expr_stmt><expr><name><name pos:line="137" pos:column="17">cmd_data<pos:position pos:line="137" pos:column="25"/></name><operator pos:line="137" pos:column="25">-&gt;<pos:position pos:line="137" pos:column="30"/></operator><name pos:line="137" pos:column="27">fake_output_name<pos:position pos:line="137" pos:column="43"/></name></name><operator pos:line="137" pos:column="43">++<pos:position pos:line="137" pos:column="45"/></operator></expr>;<pos:position pos:line="137" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="138" pos:column="14"/></block></then>
            <else pos:line="139" pos:column="13">else <block pos:line="139" pos:column="18">{
                <expr_stmt><expr><name><name pos:line="140" pos:column="17">cmd_data<pos:position pos:line="140" pos:column="25"/></name><operator pos:line="140" pos:column="25">-&gt;<pos:position pos:line="140" pos:column="30"/></operator><name pos:line="140" pos:column="27">fake_output_name<pos:position pos:line="140" pos:column="43"/></name></name> <operator pos:line="140" pos:column="44">=<pos:position pos:line="140" pos:column="45"/></operator> <name><name pos:line="140" pos:column="46">cmd_data<pos:position pos:line="140" pos:column="54"/></name><operator pos:line="140" pos:column="54">-&gt;<pos:position pos:line="140" pos:column="59"/></operator><name pos:line="140" pos:column="56">basename<pos:position pos:line="140" pos:column="64"/></name></name></expr>;<pos:position pos:line="140" pos:column="65"/></expr_stmt>
            }<pos:position pos:line="141" pos:column="14"/></block></else></if>
        }<pos:position pos:line="142" pos:column="10"/></block></then></if>
    }<pos:position pos:line="143" pos:column="6"/></block></then></if>

    <return pos:line="145" pos:column="5">return <expr><literal type="number" pos:line="145" pos:column="12">0<pos:position pos:line="145" pos:column="13"/></literal></expr>;<pos:position pos:line="145" pos:column="14"/></return>
}<pos:position pos:line="146" pos:column="2"/></block></function></unit>
