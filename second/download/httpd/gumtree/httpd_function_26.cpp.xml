<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_26.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">core_output_filter<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">ap_filter_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">f<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">apr_bucket_brigade<pos:position pos:line="1" pos:column="74"/></name> <modifier pos:line="1" pos:column="75">*<pos:position pos:line="1" pos:column="76"/></modifier></type><name pos:line="1" pos:column="76">b<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">rv<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">conn_rec<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">c<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name><name pos:line="4" pos:column="19">f<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">-&gt;<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="22">c<pos:position pos:line="4" pos:column="23"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">core_net_rec<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">net<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name><name pos:line="5" pos:column="25">f<pos:position pos:line="5" pos:column="26"/></name><operator pos:line="5" pos:column="26">-&gt;<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="28">ctx<pos:position pos:line="5" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">core_output_filter_ctx_t<pos:position pos:line="6" pos:column="29"/></name> <modifier pos:line="6" pos:column="30">*<pos:position pos:line="6" pos:column="31"/></modifier></type><name pos:line="6" pos:column="31">ctx<pos:position pos:line="6" pos:column="34"/></name> <init pos:line="6" pos:column="35">= <expr><name><name pos:line="6" pos:column="37">net<pos:position pos:line="6" pos:column="40"/></name><operator pos:line="6" pos:column="40">-&gt;<pos:position pos:line="6" pos:column="45"/></operator><name pos:line="6" pos:column="42">out_ctx<pos:position pos:line="6" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">ctx<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">==<pos:position pos:line="8" pos:column="15"/></operator> <name pos:line="8" pos:column="16">NULL<pos:position pos:line="8" pos:column="20"/></name></expr>)<pos:position pos:line="8" pos:column="21"/></condition><then pos:line="8" pos:column="21"> <block pos:line="8" pos:column="22">{
        <expr_stmt><expr><name pos:line="9" pos:column="9">ctx<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">=<pos:position pos:line="9" pos:column="14"/></operator> <call><name pos:line="9" pos:column="15">apr_pcalloc<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name><name pos:line="9" pos:column="27">c<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">pool<pos:position pos:line="9" pos:column="34"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="36">sizeof<argument_list pos:line="9" pos:column="42">(<argument><expr><operator pos:line="9" pos:column="43">*<pos:position pos:line="9" pos:column="44"/></operator><name pos:line="9" pos:column="44">ctx<pos:position pos:line="9" pos:column="47"/></name></expr></argument>)<pos:position pos:line="9" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="10" pos:column="9">net<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">-&gt;<pos:position pos:line="10" pos:column="17"/></operator><name pos:line="10" pos:column="14">out_ctx<pos:position pos:line="10" pos:column="21"/></name></name> <operator pos:line="10" pos:column="22">=<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="24">ctx<pos:position pos:line="10" pos:column="27"/></name></expr>;<pos:position pos:line="10" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="13" pos:column="5">/* If we have a saved brigade, concatenate the new brigade to it */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">ctx<pos:position pos:line="14" pos:column="12"/></name><operator pos:line="14" pos:column="12">-&gt;<pos:position pos:line="14" pos:column="17"/></operator><name pos:line="14" pos:column="14">b<pos:position pos:line="14" pos:column="15"/></name></name></expr>)<pos:position pos:line="14" pos:column="16"/></condition><then pos:line="14" pos:column="16"> <block pos:line="14" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">APR_BRIGADE_CONCAT<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><name><name pos:line="15" pos:column="28">ctx<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">b<pos:position pos:line="15" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">b<pos:position pos:line="15" pos:column="37"/></name></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="16" pos:column="9">b<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <name><name pos:line="16" pos:column="13">ctx<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">b<pos:position pos:line="16" pos:column="19"/></name></name></expr>;<pos:position pos:line="16" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">ctx<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">b<pos:position pos:line="17" pos:column="15"/></name></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">NULL<pos:position pos:line="17" pos:column="22"/></name></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="20" pos:column="5">/* Perform multiple passes over the brigade, sending batches of output
       to the connection. */</comment>
    <while pos:line="22" pos:column="5">while <condition pos:line="22" pos:column="11">(<expr><name pos:line="22" pos:column="12">b<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">&amp;&amp;<pos:position pos:line="22" pos:column="24"/></operator> <operator pos:line="22" pos:column="17">!<pos:position pos:line="22" pos:column="18"/></operator><call><name pos:line="22" pos:column="18">APR_BRIGADE_EMPTY<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">b<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="39"/></condition> <block pos:line="22" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">apr_size_t<pos:position pos:line="23" pos:column="19"/></name></type> <name pos:line="23" pos:column="20">nbytes<pos:position pos:line="23" pos:column="26"/></name> <init pos:line="23" pos:column="27">= <expr><literal type="number" pos:line="23" pos:column="29">0<pos:position pos:line="23" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="31"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">apr_bucket<pos:position pos:line="24" pos:column="19"/></name> <modifier pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></modifier></type><name pos:line="24" pos:column="21">last_e<pos:position pos:line="24" pos:column="27"/></name> <init pos:line="24" pos:column="28">= <expr><name pos:line="24" pos:column="30">NULL<pos:position pos:line="24" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="35"/></decl_stmt> <comment type="block" pos:line="24" pos:column="36">/* initialized for debugging */</comment>
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">apr_bucket<pos:position pos:line="25" pos:column="19"/></name> <modifier pos:line="25" pos:column="20">*<pos:position pos:line="25" pos:column="21"/></modifier></type><name pos:line="25" pos:column="21">e<pos:position pos:line="25" pos:column="22"/></name></decl>;<pos:position pos:line="25" pos:column="23"/></decl_stmt>

        <comment type="block" pos:line="27" pos:column="9">/* tail of brigade if we need another pass */</comment>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">apr_bucket_brigade<pos:position pos:line="28" pos:column="27"/></name> <modifier pos:line="28" pos:column="28">*<pos:position pos:line="28" pos:column="29"/></modifier></type><name pos:line="28" pos:column="29">more<pos:position pos:line="28" pos:column="33"/></name> <init pos:line="28" pos:column="34">= <expr><name pos:line="28" pos:column="36">NULL<pos:position pos:line="28" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="41"/></decl_stmt>

        <comment type="block" pos:line="30" pos:column="9">/* one group of iovecs per pass over the brigade */</comment>
        <decl_stmt><decl><type><name pos:line="31" pos:column="9">apr_size_t<pos:position pos:line="31" pos:column="19"/></name></type> <name pos:line="31" pos:column="20">nvec<pos:position pos:line="31" pos:column="24"/></name> <init pos:line="31" pos:column="25">= <expr><literal type="number" pos:line="31" pos:column="27">0<pos:position pos:line="31" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="31" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="32" pos:column="9">apr_size_t<pos:position pos:line="32" pos:column="19"/></name></type> <name pos:line="32" pos:column="20">nvec_trailers<pos:position pos:line="32" pos:column="33"/></name> <init pos:line="32" pos:column="34">= <expr><literal type="number" pos:line="32" pos:column="36">0<pos:position pos:line="32" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="32" pos:column="38"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="33" pos:column="9">struct<pos:position pos:line="33" pos:column="15"/></name> <name pos:line="33" pos:column="16">iovec<pos:position pos:line="33" pos:column="21"/></name></name></type> <name><name pos:line="33" pos:column="22">vec<pos:position pos:line="33" pos:column="25"/></name><index pos:line="33" pos:column="25">[<expr><name pos:line="33" pos:column="26">MAX_IOVEC_TO_WRITE<pos:position pos:line="33" pos:column="44"/></name></expr>]<pos:position pos:line="33" pos:column="45"/></index></name></decl>;<pos:position pos:line="33" pos:column="46"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="34" pos:column="9">struct<pos:position pos:line="34" pos:column="15"/></name> <name pos:line="34" pos:column="16">iovec<pos:position pos:line="34" pos:column="21"/></name></name></type> <name><name pos:line="34" pos:column="22">vec_trailers<pos:position pos:line="34" pos:column="34"/></name><index pos:line="34" pos:column="34">[<expr><name pos:line="34" pos:column="35">MAX_IOVEC_TO_WRITE<pos:position pos:line="34" pos:column="53"/></name></expr>]<pos:position pos:line="34" pos:column="54"/></index></name></decl>;<pos:position pos:line="34" pos:column="55"/></decl_stmt>

        <comment type="block" pos:line="36" pos:column="9">/* one file per pass over the brigade */</comment>
        <decl_stmt><decl><type><name pos:line="37" pos:column="9">apr_file_t<pos:position pos:line="37" pos:column="19"/></name> <modifier pos:line="37" pos:column="20">*<pos:position pos:line="37" pos:column="21"/></modifier></type><name pos:line="37" pos:column="21">fd<pos:position pos:line="37" pos:column="23"/></name> <init pos:line="37" pos:column="24">= <expr><name pos:line="37" pos:column="26">NULL<pos:position pos:line="37" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="37" pos:column="31"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="38" pos:column="9">apr_size_t<pos:position pos:line="38" pos:column="19"/></name></type> <name pos:line="38" pos:column="20">flen<pos:position pos:line="38" pos:column="24"/></name> <init pos:line="38" pos:column="25">= <expr><literal type="number" pos:line="38" pos:column="27">0<pos:position pos:line="38" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="38" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="39" pos:column="9">apr_off_t<pos:position pos:line="39" pos:column="18"/></name></type> <name pos:line="39" pos:column="19">foffset<pos:position pos:line="39" pos:column="26"/></name> <init pos:line="39" pos:column="27">= <expr><literal type="number" pos:line="39" pos:column="29">0<pos:position pos:line="39" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="39" pos:column="31"/></decl_stmt>

        <comment type="block" pos:line="41" pos:column="9">/* keep track of buckets that we've concatenated
         * to avoid small writes
         */</comment>
        <decl_stmt><decl><type><name pos:line="44" pos:column="9">apr_bucket<pos:position pos:line="44" pos:column="19"/></name> <modifier pos:line="44" pos:column="20">*<pos:position pos:line="44" pos:column="21"/></modifier></type><name pos:line="44" pos:column="21">last_merged_bucket<pos:position pos:line="44" pos:column="39"/></name> <init pos:line="44" pos:column="40">= <expr><name pos:line="44" pos:column="42">NULL<pos:position pos:line="44" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="44" pos:column="47"/></decl_stmt>

        <comment type="block" pos:line="46" pos:column="9">/* Iterate over the brigade: collect iovecs and/or a file */</comment>
        <macro><name pos:line="47" pos:column="9">APR_BRIGADE_FOREACH<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument pos:line="47" pos:column="29">e<pos:position pos:line="47" pos:column="30"/></argument>, <argument pos:line="47" pos:column="32">b<pos:position pos:line="47" pos:column="33"/></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></macro> <block pos:line="47" pos:column="35">{
            <comment type="block" pos:line="48" pos:column="13">/* keep track of the last bucket processed */</comment>
            <expr_stmt><expr><name pos:line="49" pos:column="13">last_e<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">=<pos:position pos:line="49" pos:column="21"/></operator> <name pos:line="49" pos:column="22">e<pos:position pos:line="49" pos:column="23"/></name></expr>;<pos:position pos:line="49" pos:column="24"/></expr_stmt>
            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><call><name pos:line="50" pos:column="17">APR_BUCKET_IS_EOS<pos:position pos:line="50" pos:column="34"/></name><argument_list pos:line="50" pos:column="34">(<argument><expr><name pos:line="50" pos:column="35">e<pos:position pos:line="50" pos:column="36"/></name></expr></argument>)<pos:position pos:line="50" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="38"/></condition><then pos:line="50" pos:column="38"> <block pos:line="50" pos:column="39">{
                <break pos:line="51" pos:column="17">break;<pos:position pos:line="51" pos:column="23"/></break>
            }<pos:position pos:line="52" pos:column="14"/></block></then></if>
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><call><name pos:line="53" pos:column="17">APR_BUCKET_IS_FLUSH<pos:position pos:line="53" pos:column="36"/></name><argument_list pos:line="53" pos:column="36">(<argument><expr><name pos:line="53" pos:column="37">e<pos:position pos:line="53" pos:column="38"/></name></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="40"/></condition><then pos:line="53" pos:column="40"> <block pos:line="53" pos:column="41">{
                <expr_stmt><expr><name pos:line="54" pos:column="17">more<pos:position pos:line="54" pos:column="21"/></name> <operator pos:line="54" pos:column="22">=<pos:position pos:line="54" pos:column="23"/></operator> <call><name pos:line="54" pos:column="24">apr_brigade_split<pos:position pos:line="54" pos:column="41"/></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name pos:line="54" pos:column="42">b<pos:position pos:line="54" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="45">APR_BUCKET_NEXT<pos:position pos:line="54" pos:column="60"/></name><argument_list pos:line="54" pos:column="60">(<argument><expr><name pos:line="54" pos:column="61">e<pos:position pos:line="54" pos:column="62"/></name></expr></argument>)<pos:position pos:line="54" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="65"/></expr_stmt>
                <break pos:line="55" pos:column="17">break;<pos:position pos:line="55" pos:column="23"/></break>
            }<pos:position pos:line="56" pos:column="14"/></block></then>

            <comment type="block" pos:line="58" pos:column="13">/* It doesn't make any sense to use sendfile for a file bucket
             * that represents 10 bytes.
             */</comment>
            <elseif pos:line="61" pos:column="13">else <if pos:line="61" pos:column="18">if <condition pos:line="61" pos:column="21">(<expr><call><name pos:line="61" pos:column="22">APR_BUCKET_IS_FILE<pos:position pos:line="61" pos:column="40"/></name><argument_list pos:line="61" pos:column="40">(<argument><expr><name pos:line="61" pos:column="41">e<pos:position pos:line="61" pos:column="42"/></name></expr></argument>)<pos:position pos:line="61" pos:column="43"/></argument_list></call>
                     <operator pos:line="62" pos:column="22">&amp;&amp;<pos:position pos:line="62" pos:column="32"/></operator> <operator pos:line="62" pos:column="25">(<pos:position pos:line="62" pos:column="26"/></operator><name><name pos:line="62" pos:column="26">e<pos:position pos:line="62" pos:column="27"/></name><operator pos:line="62" pos:column="27">-&gt;<pos:position pos:line="62" pos:column="32"/></operator><name pos:line="62" pos:column="29">length<pos:position pos:line="62" pos:column="35"/></name></name> <operator pos:line="62" pos:column="36">&gt;=<pos:position pos:line="62" pos:column="41"/></operator> <name pos:line="62" pos:column="39">AP_MIN_SENDFILE_BYTES<pos:position pos:line="62" pos:column="60"/></name><operator pos:line="62" pos:column="60">)<pos:position pos:line="62" pos:column="61"/></operator></expr>)<pos:position pos:line="62" pos:column="62"/></condition><then pos:line="62" pos:column="62"> <block pos:line="62" pos:column="63">{
                <decl_stmt><decl><type><name pos:line="63" pos:column="17">apr_bucket_file<pos:position pos:line="63" pos:column="32"/></name> <modifier pos:line="63" pos:column="33">*<pos:position pos:line="63" pos:column="34"/></modifier></type><name pos:line="63" pos:column="34">a<pos:position pos:line="63" pos:column="35"/></name> <init pos:line="63" pos:column="36">= <expr><name><name pos:line="63" pos:column="38">e<pos:position pos:line="63" pos:column="39"/></name><operator pos:line="63" pos:column="39">-&gt;<pos:position pos:line="63" pos:column="44"/></operator><name pos:line="63" pos:column="41">data<pos:position pos:line="63" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="63" pos:column="46"/></decl_stmt>

                <comment type="block" pos:line="65" pos:column="17">/* We can't handle more than one file bucket at a time
                 * so we split here and send the file we have already
                 * found.
                 */</comment>
                <if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">fd<pos:position pos:line="69" pos:column="23"/></name></expr>)<pos:position pos:line="69" pos:column="24"/></condition><then pos:line="69" pos:column="24"> <block pos:line="69" pos:column="25">{
                    <expr_stmt><expr><name pos:line="70" pos:column="21">more<pos:position pos:line="70" pos:column="25"/></name> <operator pos:line="70" pos:column="26">=<pos:position pos:line="70" pos:column="27"/></operator> <call><name pos:line="70" pos:column="28">apr_brigade_split<pos:position pos:line="70" pos:column="45"/></name><argument_list pos:line="70" pos:column="45">(<argument><expr><name pos:line="70" pos:column="46">b<pos:position pos:line="70" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="49">e<pos:position pos:line="70" pos:column="50"/></name></expr></argument>)<pos:position pos:line="70" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="52"/></expr_stmt>
                    <break pos:line="71" pos:column="21">break;<pos:position pos:line="71" pos:column="27"/></break>
                }<pos:position pos:line="72" pos:column="18"/></block></then></if>

                <expr_stmt><expr><name pos:line="74" pos:column="17">fd<pos:position pos:line="74" pos:column="19"/></name> <operator pos:line="74" pos:column="20">=<pos:position pos:line="74" pos:column="21"/></operator> <name><name pos:line="74" pos:column="22">a<pos:position pos:line="74" pos:column="23"/></name><operator pos:line="74" pos:column="23">-&gt;<pos:position pos:line="74" pos:column="28"/></operator><name pos:line="74" pos:column="25">fd<pos:position pos:line="74" pos:column="27"/></name></name></expr>;<pos:position pos:line="74" pos:column="28"/></expr_stmt>
                <expr_stmt><expr><name pos:line="75" pos:column="17">flen<pos:position pos:line="75" pos:column="21"/></name> <operator pos:line="75" pos:column="22">=<pos:position pos:line="75" pos:column="23"/></operator> <name><name pos:line="75" pos:column="24">e<pos:position pos:line="75" pos:column="25"/></name><operator pos:line="75" pos:column="25">-&gt;<pos:position pos:line="75" pos:column="30"/></operator><name pos:line="75" pos:column="27">length<pos:position pos:line="75" pos:column="33"/></name></name></expr>;<pos:position pos:line="75" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><name pos:line="76" pos:column="17">foffset<pos:position pos:line="76" pos:column="24"/></name> <operator pos:line="76" pos:column="25">=<pos:position pos:line="76" pos:column="26"/></operator> <name><name pos:line="76" pos:column="27">e<pos:position pos:line="76" pos:column="28"/></name><operator pos:line="76" pos:column="28">-&gt;<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="30">start<pos:position pos:line="76" pos:column="35"/></name></name></expr>;<pos:position pos:line="76" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="77" pos:column="14"/></block></then></if></elseif>
            <else pos:line="78" pos:column="13">else <block pos:line="78" pos:column="18">{
                <decl_stmt><decl><type><specifier pos:line="79" pos:column="17">const<pos:position pos:line="79" pos:column="22"/></specifier> <name pos:line="79" pos:column="23">char<pos:position pos:line="79" pos:column="27"/></name> <modifier pos:line="79" pos:column="28">*<pos:position pos:line="79" pos:column="29"/></modifier></type><name pos:line="79" pos:column="29">str<pos:position pos:line="79" pos:column="32"/></name></decl>;<pos:position pos:line="79" pos:column="33"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="80" pos:column="17">apr_size_t<pos:position pos:line="80" pos:column="27"/></name></type> <name pos:line="80" pos:column="28">n<pos:position pos:line="80" pos:column="29"/></name></decl>;<pos:position pos:line="80" pos:column="30"/></decl_stmt>

                <expr_stmt><expr><name pos:line="82" pos:column="17">rv<pos:position pos:line="82" pos:column="19"/></name> <operator pos:line="82" pos:column="20">=<pos:position pos:line="82" pos:column="21"/></operator> <call><name pos:line="82" pos:column="22">apr_bucket_read<pos:position pos:line="82" pos:column="37"/></name><argument_list pos:line="82" pos:column="37">(<argument><expr><name pos:line="82" pos:column="38">e<pos:position pos:line="82" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="41">&amp;<pos:position pos:line="82" pos:column="46"/></operator><name pos:line="82" pos:column="42">str<pos:position pos:line="82" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="82" pos:column="47">&amp;<pos:position pos:line="82" pos:column="52"/></operator><name pos:line="82" pos:column="48">n<pos:position pos:line="82" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="51">APR_BLOCK_READ<pos:position pos:line="82" pos:column="65"/></name></expr></argument>)<pos:position pos:line="82" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="67"/></expr_stmt>
                <if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">n<pos:position pos:line="83" pos:column="22"/></name></expr>)<pos:position pos:line="83" pos:column="23"/></condition><then pos:line="83" pos:column="23"> <block pos:line="83" pos:column="24">{
                    <if pos:line="84" pos:column="21">if <condition pos:line="84" pos:column="24">(<expr><operator pos:line="84" pos:column="25">!<pos:position pos:line="84" pos:column="26"/></operator><name pos:line="84" pos:column="26">fd<pos:position pos:line="84" pos:column="28"/></name></expr>)<pos:position pos:line="84" pos:column="29"/></condition><then pos:line="84" pos:column="29"> <block pos:line="84" pos:column="30">{
                        <if pos:line="85" pos:column="25">if <condition pos:line="85" pos:column="28">(<expr><name pos:line="85" pos:column="29">nvec<pos:position pos:line="85" pos:column="33"/></name> <operator pos:line="85" pos:column="34">==<pos:position pos:line="85" pos:column="36"/></operator> <name pos:line="85" pos:column="37">MAX_IOVEC_TO_WRITE<pos:position pos:line="85" pos:column="55"/></name></expr>)<pos:position pos:line="85" pos:column="56"/></condition><then pos:line="85" pos:column="56"> <block pos:line="85" pos:column="57">{
                            <comment type="block" pos:line="86" pos:column="29">/* woah! too many. buffer them up, for use later. */</comment>
                            <decl_stmt><decl><type><name pos:line="87" pos:column="29">apr_bucket<pos:position pos:line="87" pos:column="39"/></name> <modifier pos:line="87" pos:column="40">*<pos:position pos:line="87" pos:column="41"/></modifier></type><name pos:line="87" pos:column="41">temp<pos:position pos:line="87" pos:column="45"/></name></decl>, <modifier pos:line="87" pos:column="47">*<pos:position pos:line="87" pos:column="48"/></modifier><decl><type ref="prev"/><name pos:line="87" pos:column="48">next<pos:position pos:line="87" pos:column="52"/></name></decl>;<pos:position pos:line="87" pos:column="53"/></decl_stmt>
                            <decl_stmt><decl><type><name pos:line="88" pos:column="29">apr_bucket_brigade<pos:position pos:line="88" pos:column="47"/></name> <modifier pos:line="88" pos:column="48">*<pos:position pos:line="88" pos:column="49"/></modifier></type><name pos:line="88" pos:column="49">temp_brig<pos:position pos:line="88" pos:column="58"/></name></decl>;<pos:position pos:line="88" pos:column="59"/></decl_stmt>

                            <if pos:line="90" pos:column="29">if <condition pos:line="90" pos:column="32">(<expr><name pos:line="90" pos:column="33">nbytes<pos:position pos:line="90" pos:column="39"/></name> <operator pos:line="90" pos:column="40">&gt;=<pos:position pos:line="90" pos:column="45"/></operator> <name pos:line="90" pos:column="43">AP_MIN_BYTES_TO_WRITE<pos:position pos:line="90" pos:column="64"/></name></expr>)<pos:position pos:line="90" pos:column="65"/></condition><then pos:line="90" pos:column="65"> <block pos:line="90" pos:column="66">{
                                <comment type="block" pos:line="91" pos:column="33">/* We have enough data in the iovec
                                 * to justify doing a writev
                                 */</comment>
                                <expr_stmt><expr><name pos:line="94" pos:column="33">more<pos:position pos:line="94" pos:column="37"/></name> <operator pos:line="94" pos:column="38">=<pos:position pos:line="94" pos:column="39"/></operator> <call><name pos:line="94" pos:column="40">apr_brigade_split<pos:position pos:line="94" pos:column="57"/></name><argument_list pos:line="94" pos:column="57">(<argument><expr><name pos:line="94" pos:column="58">b<pos:position pos:line="94" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="61">e<pos:position pos:line="94" pos:column="62"/></name></expr></argument>)<pos:position pos:line="94" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="64"/></expr_stmt>
                                <break pos:line="95" pos:column="33">break;<pos:position pos:line="95" pos:column="39"/></break>
                            }<pos:position pos:line="96" pos:column="30"/></block></then></if>

                            <comment type="block" pos:line="98" pos:column="29">/* Create a temporary brigade as a means
                             * of concatenating a bunch of buckets together
                             */</comment>
                            <if pos:line="101" pos:column="29">if <condition pos:line="101" pos:column="32">(<expr><name pos:line="101" pos:column="33">last_merged_bucket<pos:position pos:line="101" pos:column="51"/></name></expr>)<pos:position pos:line="101" pos:column="52"/></condition><then pos:line="101" pos:column="52"> <block pos:line="101" pos:column="53">{
                                <comment type="block" pos:line="102" pos:column="33">/* If we've concatenated together small
                                 * buckets already in a previous pass,
                                 * the initial buckets in this brigade
                                 * are heap buckets that may have extra
                                 * space left in them (because they
                                 * were created by apr_brigade_write()).
                                 * We can take advantage of this by
                                 * building the new temp brigade out of
                                 * these buckets, so that the content
                                 * in them doesn't have to be copied again.
                                 */</comment>
                                <decl_stmt><decl><type><name pos:line="113" pos:column="33">apr_bucket_brigade<pos:position pos:line="113" pos:column="51"/></name> <modifier pos:line="113" pos:column="52">*<pos:position pos:line="113" pos:column="53"/></modifier></type><name pos:line="113" pos:column="53">bb<pos:position pos:line="113" pos:column="55"/></name></decl>;<pos:position pos:line="113" pos:column="56"/></decl_stmt>
                                <expr_stmt><expr><name pos:line="114" pos:column="33">bb<pos:position pos:line="114" pos:column="35"/></name> <operator pos:line="114" pos:column="36">=<pos:position pos:line="114" pos:column="37"/></operator> <call><name pos:line="114" pos:column="38">apr_brigade_split<pos:position pos:line="114" pos:column="55"/></name><argument_list pos:line="114" pos:column="55">(<argument><expr><name pos:line="114" pos:column="56">b<pos:position pos:line="114" pos:column="57"/></name></expr></argument>,
                                         <argument><expr><call><name pos:line="115" pos:column="42">APR_BUCKET_NEXT<pos:position pos:line="115" pos:column="57"/></name><argument_list pos:line="115" pos:column="57">(<argument><expr><name pos:line="115" pos:column="58">last_merged_bucket<pos:position pos:line="115" pos:column="76"/></name></expr></argument>)<pos:position pos:line="115" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="115" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="79"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="116" pos:column="33">temp_brig<pos:position pos:line="116" pos:column="42"/></name> <operator pos:line="116" pos:column="43">=<pos:position pos:line="116" pos:column="44"/></operator> <name pos:line="116" pos:column="45">b<pos:position pos:line="116" pos:column="46"/></name></expr>;<pos:position pos:line="116" pos:column="47"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="117" pos:column="33">b<pos:position pos:line="117" pos:column="34"/></name> <operator pos:line="117" pos:column="35">=<pos:position pos:line="117" pos:column="36"/></operator> <name pos:line="117" pos:column="37">bb<pos:position pos:line="117" pos:column="39"/></name></expr>;<pos:position pos:line="117" pos:column="40"/></expr_stmt>
                            }<pos:position pos:line="118" pos:column="30"/></block></then>
                            <else pos:line="119" pos:column="29">else <block pos:line="119" pos:column="34">{
                                <expr_stmt><expr><name pos:line="120" pos:column="33">temp_brig<pos:position pos:line="120" pos:column="42"/></name> <operator pos:line="120" pos:column="43">=<pos:position pos:line="120" pos:column="44"/></operator> <call><name pos:line="120" pos:column="45">apr_brigade_create<pos:position pos:line="120" pos:column="63"/></name><argument_list pos:line="120" pos:column="63">(<argument><expr><name><name pos:line="120" pos:column="64">f<pos:position pos:line="120" pos:column="65"/></name><operator pos:line="120" pos:column="65">-&gt;<pos:position pos:line="120" pos:column="70"/></operator><name pos:line="120" pos:column="67">c<pos:position pos:line="120" pos:column="68"/></name><operator pos:line="120" pos:column="68">-&gt;<pos:position pos:line="120" pos:column="73"/></operator><name pos:line="120" pos:column="70">pool<pos:position pos:line="120" pos:column="74"/></name></name></expr></argument>,
                                                           <argument><expr><name><name pos:line="121" pos:column="60">f<pos:position pos:line="121" pos:column="61"/></name><operator pos:line="121" pos:column="61">-&gt;<pos:position pos:line="121" pos:column="66"/></operator><name pos:line="121" pos:column="63">c<pos:position pos:line="121" pos:column="64"/></name><operator pos:line="121" pos:column="64">-&gt;<pos:position pos:line="121" pos:column="69"/></operator><name pos:line="121" pos:column="66">bucket_alloc<pos:position pos:line="121" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="121" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="80"/></expr_stmt>
                            }<pos:position pos:line="122" pos:column="30"/></block></else></if>

                            <expr_stmt><expr><name pos:line="124" pos:column="29">temp<pos:position pos:line="124" pos:column="33"/></name> <operator pos:line="124" pos:column="34">=<pos:position pos:line="124" pos:column="35"/></operator> <call><name pos:line="124" pos:column="36">APR_BRIGADE_FIRST<pos:position pos:line="124" pos:column="53"/></name><argument_list pos:line="124" pos:column="53">(<argument><expr><name pos:line="124" pos:column="54">b<pos:position pos:line="124" pos:column="55"/></name></expr></argument>)<pos:position pos:line="124" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="57"/></expr_stmt>
                            <while pos:line="125" pos:column="29">while <condition pos:line="125" pos:column="35">(<expr><name pos:line="125" pos:column="36">temp<pos:position pos:line="125" pos:column="40"/></name> <operator pos:line="125" pos:column="41">!=<pos:position pos:line="125" pos:column="43"/></operator> <name pos:line="125" pos:column="44">e<pos:position pos:line="125" pos:column="45"/></name></expr>)<pos:position pos:line="125" pos:column="46"/></condition> <block pos:line="125" pos:column="47">{
                                <decl_stmt><decl><type><name pos:line="126" pos:column="33">apr_bucket<pos:position pos:line="126" pos:column="43"/></name> <modifier pos:line="126" pos:column="44">*<pos:position pos:line="126" pos:column="45"/></modifier></type><name pos:line="126" pos:column="45">d<pos:position pos:line="126" pos:column="46"/></name></decl>;<pos:position pos:line="126" pos:column="47"/></decl_stmt>
                                <expr_stmt><expr><name pos:line="127" pos:column="33">rv<pos:position pos:line="127" pos:column="35"/></name> <operator pos:line="127" pos:column="36">=<pos:position pos:line="127" pos:column="37"/></operator> <call><name pos:line="127" pos:column="38">apr_bucket_read<pos:position pos:line="127" pos:column="53"/></name><argument_list pos:line="127" pos:column="53">(<argument><expr><name pos:line="127" pos:column="54">temp<pos:position pos:line="127" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="60">&amp;<pos:position pos:line="127" pos:column="65"/></operator><name pos:line="127" pos:column="61">str<pos:position pos:line="127" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="66">&amp;<pos:position pos:line="127" pos:column="71"/></operator><name pos:line="127" pos:column="67">n<pos:position pos:line="127" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="70">APR_BLOCK_READ<pos:position pos:line="127" pos:column="84"/></name></expr></argument>)<pos:position pos:line="127" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="86"/></expr_stmt>
                                <expr_stmt><expr><call><name pos:line="128" pos:column="33">apr_brigade_write<pos:position pos:line="128" pos:column="50"/></name><argument_list pos:line="128" pos:column="50">(<argument><expr><name pos:line="128" pos:column="51">temp_brig<pos:position pos:line="128" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="62">NULL<pos:position pos:line="128" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="68">NULL<pos:position pos:line="128" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="74">str<pos:position pos:line="128" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="128" pos:column="79">n<pos:position pos:line="128" pos:column="80"/></name></expr></argument>)<pos:position pos:line="128" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="82"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="129" pos:column="33">d<pos:position pos:line="129" pos:column="34"/></name> <operator pos:line="129" pos:column="35">=<pos:position pos:line="129" pos:column="36"/></operator> <name pos:line="129" pos:column="37">temp<pos:position pos:line="129" pos:column="41"/></name></expr>;<pos:position pos:line="129" pos:column="42"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="130" pos:column="33">temp<pos:position pos:line="130" pos:column="37"/></name> <operator pos:line="130" pos:column="38">=<pos:position pos:line="130" pos:column="39"/></operator> <call><name pos:line="130" pos:column="40">APR_BUCKET_NEXT<pos:position pos:line="130" pos:column="55"/></name><argument_list pos:line="130" pos:column="55">(<argument><expr><name pos:line="130" pos:column="56">temp<pos:position pos:line="130" pos:column="60"/></name></expr></argument>)<pos:position pos:line="130" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="62"/></expr_stmt>
                                <expr_stmt><expr><call><name pos:line="131" pos:column="33">apr_bucket_delete<pos:position pos:line="131" pos:column="50"/></name><argument_list pos:line="131" pos:column="50">(<argument><expr><name pos:line="131" pos:column="51">d<pos:position pos:line="131" pos:column="52"/></name></expr></argument>)<pos:position pos:line="131" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="54"/></expr_stmt>
                            }<pos:position pos:line="132" pos:column="30"/></block></while>

                            <expr_stmt><expr><name pos:line="134" pos:column="29">nvec<pos:position pos:line="134" pos:column="33"/></name> <operator pos:line="134" pos:column="34">=<pos:position pos:line="134" pos:column="35"/></operator> <literal type="number" pos:line="134" pos:column="36">0<pos:position pos:line="134" pos:column="37"/></literal></expr>;<pos:position pos:line="134" pos:column="38"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="135" pos:column="29">nbytes<pos:position pos:line="135" pos:column="35"/></name> <operator pos:line="135" pos:column="36">=<pos:position pos:line="135" pos:column="37"/></operator> <literal type="number" pos:line="135" pos:column="38">0<pos:position pos:line="135" pos:column="39"/></literal></expr>;<pos:position pos:line="135" pos:column="40"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="136" pos:column="29">temp<pos:position pos:line="136" pos:column="33"/></name> <operator pos:line="136" pos:column="34">=<pos:position pos:line="136" pos:column="35"/></operator> <call><name pos:line="136" pos:column="36">APR_BRIGADE_FIRST<pos:position pos:line="136" pos:column="53"/></name><argument_list pos:line="136" pos:column="53">(<argument><expr><name pos:line="136" pos:column="54">temp_brig<pos:position pos:line="136" pos:column="63"/></name></expr></argument>)<pos:position pos:line="136" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="65"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="137" pos:column="29">APR_BUCKET_REMOVE<pos:position pos:line="137" pos:column="46"/></name><argument_list pos:line="137" pos:column="46">(<argument><expr><name pos:line="137" pos:column="47">temp<pos:position pos:line="137" pos:column="51"/></name></expr></argument>)<pos:position pos:line="137" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="53"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="138" pos:column="29">APR_BRIGADE_INSERT_HEAD<pos:position pos:line="138" pos:column="52"/></name><argument_list pos:line="138" pos:column="52">(<argument><expr><name pos:line="138" pos:column="53">b<pos:position pos:line="138" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="56">temp<pos:position pos:line="138" pos:column="60"/></name></expr></argument>)<pos:position pos:line="138" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="62"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="139" pos:column="29">apr_bucket_read<pos:position pos:line="139" pos:column="44"/></name><argument_list pos:line="139" pos:column="44">(<argument><expr><name pos:line="139" pos:column="45">temp<pos:position pos:line="139" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="139" pos:column="51">&amp;<pos:position pos:line="139" pos:column="56"/></operator><name pos:line="139" pos:column="52">str<pos:position pos:line="139" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="139" pos:column="57">&amp;<pos:position pos:line="139" pos:column="62"/></operator><name pos:line="139" pos:column="58">n<pos:position pos:line="139" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="61">APR_BLOCK_READ<pos:position pos:line="139" pos:column="75"/></name></expr></argument>)<pos:position pos:line="139" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="77"/></expr_stmt>
                            <expr_stmt><expr><name><name pos:line="140" pos:column="29">vec<pos:position pos:line="140" pos:column="32"/></name><index pos:line="140" pos:column="32">[<expr><name pos:line="140" pos:column="33">nvec<pos:position pos:line="140" pos:column="37"/></name></expr>]<pos:position pos:line="140" pos:column="38"/></index></name><operator pos:line="140" pos:column="38">.<pos:position pos:line="140" pos:column="39"/></operator><name pos:line="140" pos:column="39">iov_base<pos:position pos:line="140" pos:column="47"/></name> <operator pos:line="140" pos:column="48">=<pos:position pos:line="140" pos:column="49"/></operator> <operator pos:line="140" pos:column="50">(<pos:position pos:line="140" pos:column="51"/></operator><name pos:line="140" pos:column="51">char<pos:position pos:line="140" pos:column="55"/></name><operator pos:line="140" pos:column="55">*<pos:position pos:line="140" pos:column="56"/></operator><operator pos:line="140" pos:column="56">)<pos:position pos:line="140" pos:column="57"/></operator> <name pos:line="140" pos:column="58">str<pos:position pos:line="140" pos:column="61"/></name></expr>;<pos:position pos:line="140" pos:column="62"/></expr_stmt>
                            <expr_stmt><expr><name><name pos:line="141" pos:column="29">vec<pos:position pos:line="141" pos:column="32"/></name><index pos:line="141" pos:column="32">[<expr><name pos:line="141" pos:column="33">nvec<pos:position pos:line="141" pos:column="37"/></name></expr>]<pos:position pos:line="141" pos:column="38"/></index></name><operator pos:line="141" pos:column="38">.<pos:position pos:line="141" pos:column="39"/></operator><name pos:line="141" pos:column="39">iov_len<pos:position pos:line="141" pos:column="46"/></name> <operator pos:line="141" pos:column="47">=<pos:position pos:line="141" pos:column="48"/></operator> <name pos:line="141" pos:column="49">n<pos:position pos:line="141" pos:column="50"/></name></expr>;<pos:position pos:line="141" pos:column="51"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="142" pos:column="29">nvec<pos:position pos:line="142" pos:column="33"/></name><operator pos:line="142" pos:column="33">++<pos:position pos:line="142" pos:column="35"/></operator></expr>;<pos:position pos:line="142" pos:column="36"/></expr_stmt>

                            <comment type="block" pos:line="144" pos:column="29">/* Just in case the temporary brigade has
                             * multiple buckets, recover the rest of
                             * them and put them in the brigade that
                             * we're sending.
                             */</comment>
                            <for pos:line="149" pos:column="29">for <control pos:line="149" pos:column="33">(<init><expr><name pos:line="149" pos:column="34">next<pos:position pos:line="149" pos:column="38"/></name> <operator pos:line="149" pos:column="39">=<pos:position pos:line="149" pos:column="40"/></operator> <call><name pos:line="149" pos:column="41">APR_BRIGADE_FIRST<pos:position pos:line="149" pos:column="58"/></name><argument_list pos:line="149" pos:column="58">(<argument><expr><name pos:line="149" pos:column="59">temp_brig<pos:position pos:line="149" pos:column="68"/></name></expr></argument>)<pos:position pos:line="149" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="70"/></init>
                                 <condition><expr><name pos:line="150" pos:column="34">next<pos:position pos:line="150" pos:column="38"/></name> <operator pos:line="150" pos:column="39">!=<pos:position pos:line="150" pos:column="41"/></operator> <call><name pos:line="150" pos:column="42">APR_BRIGADE_SENTINEL<pos:position pos:line="150" pos:column="62"/></name><argument_list pos:line="150" pos:column="62">(<argument><expr><name pos:line="150" pos:column="63">temp_brig<pos:position pos:line="150" pos:column="72"/></name></expr></argument>)<pos:position pos:line="150" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="74"/></condition>
                                 <incr><expr><name pos:line="151" pos:column="34">next<pos:position pos:line="151" pos:column="38"/></name> <operator pos:line="151" pos:column="39">=<pos:position pos:line="151" pos:column="40"/></operator> <call><name pos:line="151" pos:column="41">APR_BRIGADE_FIRST<pos:position pos:line="151" pos:column="58"/></name><argument_list pos:line="151" pos:column="58">(<argument><expr><name pos:line="151" pos:column="59">temp_brig<pos:position pos:line="151" pos:column="68"/></name></expr></argument>)<pos:position pos:line="151" pos:column="69"/></argument_list></call></expr></incr>)<pos:position pos:line="151" pos:column="70"/></control> <block pos:line="151" pos:column="71">{
                                <expr_stmt><expr><call><name pos:line="152" pos:column="33">APR_BUCKET_REMOVE<pos:position pos:line="152" pos:column="50"/></name><argument_list pos:line="152" pos:column="50">(<argument><expr><name pos:line="152" pos:column="51">next<pos:position pos:line="152" pos:column="55"/></name></expr></argument>)<pos:position pos:line="152" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="57"/></expr_stmt>
                                <expr_stmt><expr><call><name pos:line="153" pos:column="33">APR_BUCKET_INSERT_AFTER<pos:position pos:line="153" pos:column="56"/></name><argument_list pos:line="153" pos:column="56">(<argument><expr><name pos:line="153" pos:column="57">temp<pos:position pos:line="153" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="63">next<pos:position pos:line="153" pos:column="67"/></name></expr></argument>)<pos:position pos:line="153" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="69"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="154" pos:column="33">temp<pos:position pos:line="154" pos:column="37"/></name> <operator pos:line="154" pos:column="38">=<pos:position pos:line="154" pos:column="39"/></operator> <name pos:line="154" pos:column="40">next<pos:position pos:line="154" pos:column="44"/></name></expr>;<pos:position pos:line="154" pos:column="45"/></expr_stmt>
                                <expr_stmt><expr><call><name pos:line="155" pos:column="33">apr_bucket_read<pos:position pos:line="155" pos:column="48"/></name><argument_list pos:line="155" pos:column="48">(<argument><expr><name pos:line="155" pos:column="49">next<pos:position pos:line="155" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="55">&amp;<pos:position pos:line="155" pos:column="60"/></operator><name pos:line="155" pos:column="56">str<pos:position pos:line="155" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="155" pos:column="61">&amp;<pos:position pos:line="155" pos:column="66"/></operator><name pos:line="155" pos:column="62">n<pos:position pos:line="155" pos:column="63"/></name></expr></argument>,
                                                <argument><expr><name pos:line="156" pos:column="49">APR_BLOCK_READ<pos:position pos:line="156" pos:column="63"/></name></expr></argument>)<pos:position pos:line="156" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="65"/></expr_stmt>
                                <expr_stmt><expr><name><name pos:line="157" pos:column="33">vec<pos:position pos:line="157" pos:column="36"/></name><index pos:line="157" pos:column="36">[<expr><name pos:line="157" pos:column="37">nvec<pos:position pos:line="157" pos:column="41"/></name></expr>]<pos:position pos:line="157" pos:column="42"/></index></name><operator pos:line="157" pos:column="42">.<pos:position pos:line="157" pos:column="43"/></operator><name pos:line="157" pos:column="43">iov_base<pos:position pos:line="157" pos:column="51"/></name> <operator pos:line="157" pos:column="52">=<pos:position pos:line="157" pos:column="53"/></operator> <operator pos:line="157" pos:column="54">(<pos:position pos:line="157" pos:column="55"/></operator><name pos:line="157" pos:column="55">char<pos:position pos:line="157" pos:column="59"/></name><operator pos:line="157" pos:column="59">*<pos:position pos:line="157" pos:column="60"/></operator><operator pos:line="157" pos:column="60">)<pos:position pos:line="157" pos:column="61"/></operator> <name pos:line="157" pos:column="62">str<pos:position pos:line="157" pos:column="65"/></name></expr>;<pos:position pos:line="157" pos:column="66"/></expr_stmt>
                                <expr_stmt><expr><name><name pos:line="158" pos:column="33">vec<pos:position pos:line="158" pos:column="36"/></name><index pos:line="158" pos:column="36">[<expr><name pos:line="158" pos:column="37">nvec<pos:position pos:line="158" pos:column="41"/></name></expr>]<pos:position pos:line="158" pos:column="42"/></index></name><operator pos:line="158" pos:column="42">.<pos:position pos:line="158" pos:column="43"/></operator><name pos:line="158" pos:column="43">iov_len<pos:position pos:line="158" pos:column="50"/></name> <operator pos:line="158" pos:column="51">=<pos:position pos:line="158" pos:column="52"/></operator> <name pos:line="158" pos:column="53">n<pos:position pos:line="158" pos:column="54"/></name></expr>;<pos:position pos:line="158" pos:column="55"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="159" pos:column="33">nvec<pos:position pos:line="159" pos:column="37"/></name><operator pos:line="159" pos:column="37">++<pos:position pos:line="159" pos:column="39"/></operator></expr>;<pos:position pos:line="159" pos:column="40"/></expr_stmt>
                            }<pos:position pos:line="160" pos:column="30"/></block></for>

                            <expr_stmt><expr><call><name pos:line="162" pos:column="29">apr_brigade_destroy<pos:position pos:line="162" pos:column="48"/></name><argument_list pos:line="162" pos:column="48">(<argument><expr><name pos:line="162" pos:column="49">temp_brig<pos:position pos:line="162" pos:column="58"/></name></expr></argument>)<pos:position pos:line="162" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="60"/></expr_stmt>

                            <expr_stmt><expr><name pos:line="164" pos:column="29">last_merged_bucket<pos:position pos:line="164" pos:column="47"/></name> <operator pos:line="164" pos:column="48">=<pos:position pos:line="164" pos:column="49"/></operator> <name pos:line="164" pos:column="50">temp<pos:position pos:line="164" pos:column="54"/></name></expr>;<pos:position pos:line="164" pos:column="55"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="165" pos:column="29">e<pos:position pos:line="165" pos:column="30"/></name> <operator pos:line="165" pos:column="31">=<pos:position pos:line="165" pos:column="32"/></operator> <name pos:line="165" pos:column="33">temp<pos:position pos:line="165" pos:column="37"/></name></expr>;<pos:position pos:line="165" pos:column="38"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="166" pos:column="29">last_e<pos:position pos:line="166" pos:column="35"/></name> <operator pos:line="166" pos:column="36">=<pos:position pos:line="166" pos:column="37"/></operator> <name pos:line="166" pos:column="38">e<pos:position pos:line="166" pos:column="39"/></name></expr>;<pos:position pos:line="166" pos:column="40"/></expr_stmt>
                        }<pos:position pos:line="167" pos:column="26"/></block></then>
                        <else pos:line="168" pos:column="25">else <block pos:line="168" pos:column="30">{
                            <expr_stmt><expr><name><name pos:line="169" pos:column="29">vec<pos:position pos:line="169" pos:column="32"/></name><index pos:line="169" pos:column="32">[<expr><name pos:line="169" pos:column="33">nvec<pos:position pos:line="169" pos:column="37"/></name></expr>]<pos:position pos:line="169" pos:column="38"/></index></name><operator pos:line="169" pos:column="38">.<pos:position pos:line="169" pos:column="39"/></operator><name pos:line="169" pos:column="39">iov_base<pos:position pos:line="169" pos:column="47"/></name> <operator pos:line="169" pos:column="48">=<pos:position pos:line="169" pos:column="49"/></operator> <operator pos:line="169" pos:column="50">(<pos:position pos:line="169" pos:column="51"/></operator><name pos:line="169" pos:column="51">char<pos:position pos:line="169" pos:column="55"/></name><operator pos:line="169" pos:column="55">*<pos:position pos:line="169" pos:column="56"/></operator><operator pos:line="169" pos:column="56">)<pos:position pos:line="169" pos:column="57"/></operator> <name pos:line="169" pos:column="58">str<pos:position pos:line="169" pos:column="61"/></name></expr>;<pos:position pos:line="169" pos:column="62"/></expr_stmt>
                            <expr_stmt><expr><name><name pos:line="170" pos:column="29">vec<pos:position pos:line="170" pos:column="32"/></name><index pos:line="170" pos:column="32">[<expr><name pos:line="170" pos:column="33">nvec<pos:position pos:line="170" pos:column="37"/></name></expr>]<pos:position pos:line="170" pos:column="38"/></index></name><operator pos:line="170" pos:column="38">.<pos:position pos:line="170" pos:column="39"/></operator><name pos:line="170" pos:column="39">iov_len<pos:position pos:line="170" pos:column="46"/></name> <operator pos:line="170" pos:column="47">=<pos:position pos:line="170" pos:column="48"/></operator> <name pos:line="170" pos:column="49">n<pos:position pos:line="170" pos:column="50"/></name></expr>;<pos:position pos:line="170" pos:column="51"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="171" pos:column="29">nvec<pos:position pos:line="171" pos:column="33"/></name><operator pos:line="171" pos:column="33">++<pos:position pos:line="171" pos:column="35"/></operator></expr>;<pos:position pos:line="171" pos:column="36"/></expr_stmt>
                        }<pos:position pos:line="172" pos:column="26"/></block></else></if>
                    }<pos:position pos:line="173" pos:column="22"/></block></then>
                    <else pos:line="174" pos:column="21">else <block pos:line="174" pos:column="26">{
                        <comment type="block" pos:line="175" pos:column="25">/* The bucket is a trailer to a file bucket */</comment>

                        <if pos:line="177" pos:column="25">if <condition pos:line="177" pos:column="28">(<expr><name pos:line="177" pos:column="29">nvec_trailers<pos:position pos:line="177" pos:column="42"/></name> <operator pos:line="177" pos:column="43">==<pos:position pos:line="177" pos:column="45"/></operator> <name pos:line="177" pos:column="46">MAX_IOVEC_TO_WRITE<pos:position pos:line="177" pos:column="64"/></name></expr>)<pos:position pos:line="177" pos:column="65"/></condition><then pos:line="177" pos:column="65"> <block pos:line="177" pos:column="66">{
                            <comment type="block" pos:line="178" pos:column="29">/* woah! too many. stop now. */</comment>
                            <expr_stmt><expr><name pos:line="179" pos:column="29">more<pos:position pos:line="179" pos:column="33"/></name> <operator pos:line="179" pos:column="34">=<pos:position pos:line="179" pos:column="35"/></operator> <call><name pos:line="179" pos:column="36">apr_brigade_split<pos:position pos:line="179" pos:column="53"/></name><argument_list pos:line="179" pos:column="53">(<argument><expr><name pos:line="179" pos:column="54">b<pos:position pos:line="179" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="57">e<pos:position pos:line="179" pos:column="58"/></name></expr></argument>)<pos:position pos:line="179" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="60"/></expr_stmt>
                            <break pos:line="180" pos:column="29">break;<pos:position pos:line="180" pos:column="35"/></break>
                        }<pos:position pos:line="181" pos:column="26"/></block></then></if>

                        <expr_stmt><expr><name><name pos:line="183" pos:column="25">vec_trailers<pos:position pos:line="183" pos:column="37"/></name><index pos:line="183" pos:column="37">[<expr><name pos:line="183" pos:column="38">nvec_trailers<pos:position pos:line="183" pos:column="51"/></name></expr>]<pos:position pos:line="183" pos:column="52"/></index></name><operator pos:line="183" pos:column="52">.<pos:position pos:line="183" pos:column="53"/></operator><name pos:line="183" pos:column="53">iov_base<pos:position pos:line="183" pos:column="61"/></name> <operator pos:line="183" pos:column="62">=<pos:position pos:line="183" pos:column="63"/></operator> <operator pos:line="183" pos:column="64">(<pos:position pos:line="183" pos:column="65"/></operator><name pos:line="183" pos:column="65">char<pos:position pos:line="183" pos:column="69"/></name><operator pos:line="183" pos:column="69">*<pos:position pos:line="183" pos:column="70"/></operator><operator pos:line="183" pos:column="70">)<pos:position pos:line="183" pos:column="71"/></operator> <name pos:line="183" pos:column="72">str<pos:position pos:line="183" pos:column="75"/></name></expr>;<pos:position pos:line="183" pos:column="76"/></expr_stmt>
                        <expr_stmt><expr><name><name pos:line="184" pos:column="25">vec_trailers<pos:position pos:line="184" pos:column="37"/></name><index pos:line="184" pos:column="37">[<expr><name pos:line="184" pos:column="38">nvec_trailers<pos:position pos:line="184" pos:column="51"/></name></expr>]<pos:position pos:line="184" pos:column="52"/></index></name><operator pos:line="184" pos:column="52">.<pos:position pos:line="184" pos:column="53"/></operator><name pos:line="184" pos:column="53">iov_len<pos:position pos:line="184" pos:column="60"/></name> <operator pos:line="184" pos:column="61">=<pos:position pos:line="184" pos:column="62"/></operator> <name pos:line="184" pos:column="63">n<pos:position pos:line="184" pos:column="64"/></name></expr>;<pos:position pos:line="184" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="185" pos:column="25">nvec_trailers<pos:position pos:line="185" pos:column="38"/></name><operator pos:line="185" pos:column="38">++<pos:position pos:line="185" pos:column="40"/></operator></expr>;<pos:position pos:line="185" pos:column="41"/></expr_stmt>
                    }<pos:position pos:line="186" pos:column="22"/></block></else></if>

                    <expr_stmt><expr><name pos:line="188" pos:column="21">nbytes<pos:position pos:line="188" pos:column="27"/></name> <operator pos:line="188" pos:column="28">+=<pos:position pos:line="188" pos:column="30"/></operator> <name pos:line="188" pos:column="31">n<pos:position pos:line="188" pos:column="32"/></name></expr>;<pos:position pos:line="188" pos:column="33"/></expr_stmt>
                }<pos:position pos:line="189" pos:column="18"/></block></then></if>
            }<pos:position pos:line="190" pos:column="14"/></block></else></if>
        }<pos:position pos:line="191" pos:column="10"/></block>


        <comment type="block" pos:line="194" pos:column="9">/* Completed iterating over the brigades, now determine if we want
         * to buffer the brigade or send the brigade out on the network.
         *
         * Save if:
         *
         *   1) we didn't see a file, we don't have more passes over the
         *      brigade to perform, we haven't accumulated enough bytes to
         *      send, AND we didn't stop at a FLUSH bucket.
         *      (IOW, we will save away plain old bytes)
         * or
         *   2) we hit the EOS and have a keep-alive connection
         *      (IOW, this response is a bit more complex, but we save it
         *       with the hope of concatenating with another response)
         */</comment>
        <if pos:line="208" pos:column="9">if <condition pos:line="208" pos:column="12">(<expr><operator pos:line="208" pos:column="13">(<pos:position pos:line="208" pos:column="14"/></operator><operator pos:line="208" pos:column="14">!<pos:position pos:line="208" pos:column="15"/></operator><name pos:line="208" pos:column="15">fd<pos:position pos:line="208" pos:column="17"/></name> <operator pos:line="208" pos:column="18">&amp;&amp;<pos:position pos:line="208" pos:column="28"/></operator> <operator pos:line="208" pos:column="21">!<pos:position pos:line="208" pos:column="22"/></operator><name pos:line="208" pos:column="22">more<pos:position pos:line="208" pos:column="26"/></name>
             <operator pos:line="209" pos:column="14">&amp;&amp;<pos:position pos:line="209" pos:column="24"/></operator> <operator pos:line="209" pos:column="17">(<pos:position pos:line="209" pos:column="18"/></operator><name pos:line="209" pos:column="18">nbytes<pos:position pos:line="209" pos:column="24"/></name> <operator pos:line="209" pos:column="25">+<pos:position pos:line="209" pos:column="26"/></operator> <name pos:line="209" pos:column="27">flen<pos:position pos:line="209" pos:column="31"/></name> <operator pos:line="209" pos:column="32">&lt;<pos:position pos:line="209" pos:column="36"/></operator> <name pos:line="209" pos:column="34">AP_MIN_BYTES_TO_WRITE<pos:position pos:line="209" pos:column="55"/></name><operator pos:line="209" pos:column="55">)<pos:position pos:line="209" pos:column="56"/></operator>
             <operator pos:line="210" pos:column="14">&amp;&amp;<pos:position pos:line="210" pos:column="24"/></operator> <operator pos:line="210" pos:column="17">!<pos:position pos:line="210" pos:column="18"/></operator><call><name pos:line="210" pos:column="18">APR_BUCKET_IS_FLUSH<pos:position pos:line="210" pos:column="37"/></name><argument_list pos:line="210" pos:column="37">(<argument><expr><name pos:line="210" pos:column="38">last_e<pos:position pos:line="210" pos:column="44"/></name></expr></argument>)<pos:position pos:line="210" pos:column="45"/></argument_list></call><operator pos:line="210" pos:column="45">)<pos:position pos:line="210" pos:column="46"/></operator>
            <operator pos:line="211" pos:column="13">||<pos:position pos:line="211" pos:column="15"/></operator> <operator pos:line="211" pos:column="16">(<pos:position pos:line="211" pos:column="17"/></operator><name pos:line="211" pos:column="17">nbytes<pos:position pos:line="211" pos:column="23"/></name> <operator pos:line="211" pos:column="24">+<pos:position pos:line="211" pos:column="25"/></operator> <name pos:line="211" pos:column="26">flen<pos:position pos:line="211" pos:column="30"/></name> <operator pos:line="211" pos:column="31">&lt;<pos:position pos:line="211" pos:column="35"/></operator> <name pos:line="211" pos:column="33">AP_MIN_BYTES_TO_WRITE<pos:position pos:line="211" pos:column="54"/></name> 
                <operator pos:line="212" pos:column="17">&amp;&amp;<pos:position pos:line="212" pos:column="27"/></operator> <call><name pos:line="212" pos:column="20">APR_BUCKET_IS_EOS<pos:position pos:line="212" pos:column="37"/></name><argument_list pos:line="212" pos:column="37">(<argument><expr><name pos:line="212" pos:column="38">last_e<pos:position pos:line="212" pos:column="44"/></name></expr></argument>)<pos:position pos:line="212" pos:column="45"/></argument_list></call>
                <operator pos:line="213" pos:column="17">&amp;&amp;<pos:position pos:line="213" pos:column="27"/></operator> <name><name pos:line="213" pos:column="20">c<pos:position pos:line="213" pos:column="21"/></name><operator pos:line="213" pos:column="21">-&gt;<pos:position pos:line="213" pos:column="26"/></operator><name pos:line="213" pos:column="23">keepalive<pos:position pos:line="213" pos:column="32"/></name></name> <operator pos:line="213" pos:column="33">==<pos:position pos:line="213" pos:column="35"/></operator> <name pos:line="213" pos:column="36">AP_CONN_KEEPALIVE<pos:position pos:line="213" pos:column="53"/></name><operator pos:line="213" pos:column="53">)<pos:position pos:line="213" pos:column="54"/></operator></expr>)<pos:position pos:line="213" pos:column="55"/></condition><then pos:line="213" pos:column="55"> <block pos:line="213" pos:column="56">{

            <comment type="block" pos:line="215" pos:column="13">/* NEVER save an EOS in here.  If we are saving a brigade with
             * an EOS bucket, then we are doing keepalive connections, and
             * we want to process to second request fully.
             */</comment>
            <if pos:line="219" pos:column="13">if <condition pos:line="219" pos:column="16">(<expr><call><name pos:line="219" pos:column="17">APR_BUCKET_IS_EOS<pos:position pos:line="219" pos:column="34"/></name><argument_list pos:line="219" pos:column="34">(<argument><expr><name pos:line="219" pos:column="35">last_e<pos:position pos:line="219" pos:column="41"/></name></expr></argument>)<pos:position pos:line="219" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="219" pos:column="43"/></condition><then pos:line="219" pos:column="43"> <block pos:line="219" pos:column="44">{
                <decl_stmt><decl><type><name pos:line="220" pos:column="17">apr_bucket<pos:position pos:line="220" pos:column="27"/></name> <modifier pos:line="220" pos:column="28">*<pos:position pos:line="220" pos:column="29"/></modifier></type><name pos:line="220" pos:column="29">bucket<pos:position pos:line="220" pos:column="35"/></name> <init pos:line="220" pos:column="36">= <expr><name pos:line="220" pos:column="38">NULL<pos:position pos:line="220" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="220" pos:column="43"/></decl_stmt>
                <comment type="block" pos:line="221" pos:column="17">/* If we are in here, then this request is a keepalive.  We
                 * need to be certain that any data in a bucket is valid
                 * after the request_pool is cleared.
                 */</comment>
                <if pos:line="225" pos:column="17">if <condition pos:line="225" pos:column="20">(<expr><name><name pos:line="225" pos:column="21">ctx<pos:position pos:line="225" pos:column="24"/></name><operator pos:line="225" pos:column="24">-&gt;<pos:position pos:line="225" pos:column="29"/></operator><name pos:line="225" pos:column="26">b<pos:position pos:line="225" pos:column="27"/></name></name> <operator pos:line="225" pos:column="28">==<pos:position pos:line="225" pos:column="30"/></operator> <name pos:line="225" pos:column="31">NULL<pos:position pos:line="225" pos:column="35"/></name></expr>)<pos:position pos:line="225" pos:column="36"/></condition><then pos:line="225" pos:column="36"> <block pos:line="225" pos:column="37">{
                    <expr_stmt><expr><name><name pos:line="226" pos:column="21">ctx<pos:position pos:line="226" pos:column="24"/></name><operator pos:line="226" pos:column="24">-&gt;<pos:position pos:line="226" pos:column="29"/></operator><name pos:line="226" pos:column="26">b<pos:position pos:line="226" pos:column="27"/></name></name> <operator pos:line="226" pos:column="28">=<pos:position pos:line="226" pos:column="29"/></operator> <call><name pos:line="226" pos:column="30">apr_brigade_create<pos:position pos:line="226" pos:column="48"/></name><argument_list pos:line="226" pos:column="48">(<argument><expr><name><name pos:line="226" pos:column="49">net<pos:position pos:line="226" pos:column="52"/></name><operator pos:line="226" pos:column="52">-&gt;<pos:position pos:line="226" pos:column="57"/></operator><name pos:line="226" pos:column="54">c<pos:position pos:line="226" pos:column="55"/></name><operator pos:line="226" pos:column="55">-&gt;<pos:position pos:line="226" pos:column="60"/></operator><name pos:line="226" pos:column="57">pool<pos:position pos:line="226" pos:column="61"/></name></name></expr></argument>,
                                                <argument><expr><name><name pos:line="227" pos:column="49">net<pos:position pos:line="227" pos:column="52"/></name><operator pos:line="227" pos:column="52">-&gt;<pos:position pos:line="227" pos:column="57"/></operator><name pos:line="227" pos:column="54">c<pos:position pos:line="227" pos:column="55"/></name><operator pos:line="227" pos:column="55">-&gt;<pos:position pos:line="227" pos:column="60"/></operator><name pos:line="227" pos:column="57">bucket_alloc<pos:position pos:line="227" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="227" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="71"/></expr_stmt>
                }<pos:position pos:line="228" pos:column="18"/></block></then></if>

                <macro><name pos:line="230" pos:column="17">APR_BRIGADE_FOREACH<pos:position pos:line="230" pos:column="36"/></name><argument_list pos:line="230" pos:column="36">(<argument pos:line="230" pos:column="37">bucket<pos:position pos:line="230" pos:column="43"/></argument>, <argument pos:line="230" pos:column="45">b<pos:position pos:line="230" pos:column="46"/></argument>)<pos:position pos:line="230" pos:column="47"/></argument_list></macro> <block pos:line="230" pos:column="48">{
                    <decl_stmt><decl><type><specifier pos:line="231" pos:column="21">const<pos:position pos:line="231" pos:column="26"/></specifier> <name pos:line="231" pos:column="27">char<pos:position pos:line="231" pos:column="31"/></name> <modifier pos:line="231" pos:column="32">*<pos:position pos:line="231" pos:column="33"/></modifier></type><name pos:line="231" pos:column="33">str<pos:position pos:line="231" pos:column="36"/></name></decl>;<pos:position pos:line="231" pos:column="37"/></decl_stmt>
                    <decl_stmt><decl><type><name pos:line="232" pos:column="21">apr_size_t<pos:position pos:line="232" pos:column="31"/></name></type> <name pos:line="232" pos:column="32">n<pos:position pos:line="232" pos:column="33"/></name></decl>;<pos:position pos:line="232" pos:column="34"/></decl_stmt>

                    <expr_stmt><expr><name pos:line="234" pos:column="21">rv<pos:position pos:line="234" pos:column="23"/></name> <operator pos:line="234" pos:column="24">=<pos:position pos:line="234" pos:column="25"/></operator> <call><name pos:line="234" pos:column="26">apr_bucket_read<pos:position pos:line="234" pos:column="41"/></name><argument_list pos:line="234" pos:column="41">(<argument><expr><name pos:line="234" pos:column="42">bucket<pos:position pos:line="234" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="234" pos:column="50">&amp;<pos:position pos:line="234" pos:column="55"/></operator><name pos:line="234" pos:column="51">str<pos:position pos:line="234" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="234" pos:column="56">&amp;<pos:position pos:line="234" pos:column="61"/></operator><name pos:line="234" pos:column="57">n<pos:position pos:line="234" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="234" pos:column="60">APR_BLOCK_READ<pos:position pos:line="234" pos:column="74"/></name></expr></argument>)<pos:position pos:line="234" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="76"/></expr_stmt>

                    <comment type="block" pos:line="236" pos:column="21">/* This apr_brigade_write does not use a flush function
                       because we assume that we will not write enough data
                       into it to cause a flush. However, if we *do* write
                       "too much", then we could end up with transient
                       buckets which would suck. This works for now, but is
                       a bit shaky if changes are made to some of the
                       buffering sizes. Let's do an assert to prevent
                       potential future problems... */</comment>
                    <expr_stmt><expr><call><name pos:line="244" pos:column="21">AP_DEBUG_ASSERT<pos:position pos:line="244" pos:column="36"/></name><argument_list pos:line="244" pos:column="36">(<argument><expr><name pos:line="244" pos:column="37">AP_MIN_BYTES_TO_WRITE<pos:position pos:line="244" pos:column="58"/></name> <operator pos:line="244" pos:column="59">&lt;=<pos:position pos:line="244" pos:column="64"/></operator>
                                    <name pos:line="245" pos:column="37">APR_BUCKET_BUFF_SIZE<pos:position pos:line="245" pos:column="57"/></name></expr></argument>)<pos:position pos:line="245" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="59"/></expr_stmt>
                    <if pos:line="246" pos:column="21">if <condition pos:line="246" pos:column="24">(<expr><name pos:line="246" pos:column="25">rv<pos:position pos:line="246" pos:column="27"/></name> <operator pos:line="246" pos:column="28">!=<pos:position pos:line="246" pos:column="30"/></operator> <name pos:line="246" pos:column="31">APR_SUCCESS<pos:position pos:line="246" pos:column="42"/></name></expr>)<pos:position pos:line="246" pos:column="43"/></condition><then pos:line="246" pos:column="43"> <block pos:line="246" pos:column="44">{
                        <expr_stmt><expr><call><name pos:line="247" pos:column="25">ap_log_error<pos:position pos:line="247" pos:column="37"/></name><argument_list pos:line="247" pos:column="37">(<argument><expr><name pos:line="247" pos:column="38">APLOG_MARK<pos:position pos:line="247" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="247" pos:column="50">APLOG_ERR<pos:position pos:line="247" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="247" pos:column="61">rv<pos:position pos:line="247" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="247" pos:column="65">c<pos:position pos:line="247" pos:column="66"/></name><operator pos:line="247" pos:column="66">-&gt;<pos:position pos:line="247" pos:column="71"/></operator><name pos:line="247" pos:column="68">base_server<pos:position pos:line="247" pos:column="79"/></name></name></expr></argument>,
                                     <argument><expr><literal type="string" pos:line="248" pos:column="38">"core_output_filter: Error reading from bucket."<pos:position pos:line="248" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="248" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="88"/></expr_stmt>
                        <return pos:line="249" pos:column="25">return <expr><name pos:line="249" pos:column="32">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="249" pos:column="58"/></name></expr>;<pos:position pos:line="249" pos:column="59"/></return>
                    }<pos:position pos:line="250" pos:column="22"/></block></then></if>

                    <expr_stmt><expr><call><name pos:line="252" pos:column="21">apr_brigade_write<pos:position pos:line="252" pos:column="38"/></name><argument_list pos:line="252" pos:column="38">(<argument><expr><name><name pos:line="252" pos:column="39">ctx<pos:position pos:line="252" pos:column="42"/></name><operator pos:line="252" pos:column="42">-&gt;<pos:position pos:line="252" pos:column="47"/></operator><name pos:line="252" pos:column="44">b<pos:position pos:line="252" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="252" pos:column="47">NULL<pos:position pos:line="252" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="252" pos:column="53">NULL<pos:position pos:line="252" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="252" pos:column="59">str<pos:position pos:line="252" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="252" pos:column="64">n<pos:position pos:line="252" pos:column="65"/></name></expr></argument>)<pos:position pos:line="252" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="252" pos:column="67"/></expr_stmt>
                }<pos:position pos:line="253" pos:column="18"/></block>

                <expr_stmt><expr><call><name pos:line="255" pos:column="17">apr_brigade_destroy<pos:position pos:line="255" pos:column="36"/></name><argument_list pos:line="255" pos:column="36">(<argument><expr><name pos:line="255" pos:column="37">b<pos:position pos:line="255" pos:column="38"/></name></expr></argument>)<pos:position pos:line="255" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="256" pos:column="14"/></block></then>
            <else pos:line="257" pos:column="13">else <block pos:line="257" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="258" pos:column="17">ap_save_brigade<pos:position pos:line="258" pos:column="32"/></name><argument_list pos:line="258" pos:column="32">(<argument><expr><name pos:line="258" pos:column="33">f<pos:position pos:line="258" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="258" pos:column="36">&amp;<pos:position pos:line="258" pos:column="41"/></operator><name><name pos:line="258" pos:column="37">ctx<pos:position pos:line="258" pos:column="40"/></name><operator pos:line="258" pos:column="40">-&gt;<pos:position pos:line="258" pos:column="45"/></operator><name pos:line="258" pos:column="42">b<pos:position pos:line="258" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="258" pos:column="45">&amp;<pos:position pos:line="258" pos:column="50"/></operator><name pos:line="258" pos:column="46">b<pos:position pos:line="258" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="258" pos:column="49">c<pos:position pos:line="258" pos:column="50"/></name><operator pos:line="258" pos:column="50">-&gt;<pos:position pos:line="258" pos:column="55"/></operator><name pos:line="258" pos:column="52">pool<pos:position pos:line="258" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="258" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="258" pos:column="58"/></expr_stmt>
            }<pos:position pos:line="259" pos:column="14"/></block></else></if>

            <return pos:line="261" pos:column="13">return <expr><name pos:line="261" pos:column="20">APR_SUCCESS<pos:position pos:line="261" pos:column="31"/></name></expr>;<pos:position pos:line="261" pos:column="32"/></return>
        }<pos:position pos:line="262" pos:column="10"/></block></then></if>

        <if pos:line="264" pos:column="9">if <condition pos:line="264" pos:column="12">(<expr><name pos:line="264" pos:column="13">fd<pos:position pos:line="264" pos:column="15"/></name></expr>)<pos:position pos:line="264" pos:column="16"/></condition><then pos:line="264" pos:column="16"> <block pos:line="264" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="265" pos:column="13">apr_hdtr_t<pos:position pos:line="265" pos:column="23"/></name></type> <name pos:line="265" pos:column="24">hdtr<pos:position pos:line="265" pos:column="28"/></name></decl>;<pos:position pos:line="265" pos:column="29"/></decl_stmt>
<cpp:if pos:line="266" pos:column="1">#<cpp:directive pos:line="266" pos:column="2">if<pos:position pos:line="266" pos:column="4"/></cpp:directive> <expr><name pos:line="266" pos:column="5">APR_HAS_SENDFILE<pos:position pos:line="266" pos:column="21"/></name></expr></cpp:if>
            <decl_stmt><decl><type><name pos:line="267" pos:column="13">apr_int32_t<pos:position pos:line="267" pos:column="24"/></name></type> <name pos:line="267" pos:column="25">flags<pos:position pos:line="267" pos:column="30"/></name> <init pos:line="267" pos:column="31">= <expr><literal type="number" pos:line="267" pos:column="33">0<pos:position pos:line="267" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="267" pos:column="35"/></decl_stmt>
<cpp:endif pos:line="268" pos:column="1">#<cpp:directive pos:line="268" pos:column="2">endif<pos:position pos:line="268" pos:column="7"/></cpp:directive></cpp:endif>

            <expr_stmt><expr><call><name pos:line="270" pos:column="13">memset<pos:position pos:line="270" pos:column="19"/></name><argument_list pos:line="270" pos:column="19">(<argument><expr><operator pos:line="270" pos:column="20">&amp;<pos:position pos:line="270" pos:column="25"/></operator><name pos:line="270" pos:column="21">hdtr<pos:position pos:line="270" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="270" pos:column="27">'\0'<pos:position pos:line="270" pos:column="31"/></literal></expr></argument>, <argument><expr><sizeof pos:line="270" pos:column="33">sizeof<argument_list pos:line="270" pos:column="39">(<argument><expr><name pos:line="270" pos:column="40">hdtr<pos:position pos:line="270" pos:column="44"/></name></expr></argument>)<pos:position pos:line="270" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="270" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="270" pos:column="47"/></expr_stmt>
            <if pos:line="271" pos:column="13">if <condition pos:line="271" pos:column="16">(<expr><name pos:line="271" pos:column="17">nvec<pos:position pos:line="271" pos:column="21"/></name></expr>)<pos:position pos:line="271" pos:column="22"/></condition><then pos:line="271" pos:column="22"> <block pos:line="271" pos:column="23">{
                <expr_stmt><expr><name><name pos:line="272" pos:column="17">hdtr<pos:position pos:line="272" pos:column="21"/></name><operator pos:line="272" pos:column="21">.<pos:position pos:line="272" pos:column="22"/></operator><name pos:line="272" pos:column="22">numheaders<pos:position pos:line="272" pos:column="32"/></name></name> <operator pos:line="272" pos:column="33">=<pos:position pos:line="272" pos:column="34"/></operator> <name pos:line="272" pos:column="35">nvec<pos:position pos:line="272" pos:column="39"/></name></expr>;<pos:position pos:line="272" pos:column="40"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="273" pos:column="17">hdtr<pos:position pos:line="273" pos:column="21"/></name><operator pos:line="273" pos:column="21">.<pos:position pos:line="273" pos:column="22"/></operator><name pos:line="273" pos:column="22">headers<pos:position pos:line="273" pos:column="29"/></name></name> <operator pos:line="273" pos:column="30">=<pos:position pos:line="273" pos:column="31"/></operator> <name pos:line="273" pos:column="32">vec<pos:position pos:line="273" pos:column="35"/></name></expr>;<pos:position pos:line="273" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="274" pos:column="14"/></block></then></if>

            <if pos:line="276" pos:column="13">if <condition pos:line="276" pos:column="16">(<expr><name pos:line="276" pos:column="17">nvec_trailers<pos:position pos:line="276" pos:column="30"/></name></expr>)<pos:position pos:line="276" pos:column="31"/></condition><then pos:line="276" pos:column="31"> <block pos:line="276" pos:column="32">{
                <expr_stmt><expr><name><name pos:line="277" pos:column="17">hdtr<pos:position pos:line="277" pos:column="21"/></name><operator pos:line="277" pos:column="21">.<pos:position pos:line="277" pos:column="22"/></operator><name pos:line="277" pos:column="22">numtrailers<pos:position pos:line="277" pos:column="33"/></name></name> <operator pos:line="277" pos:column="34">=<pos:position pos:line="277" pos:column="35"/></operator> <name pos:line="277" pos:column="36">nvec_trailers<pos:position pos:line="277" pos:column="49"/></name></expr>;<pos:position pos:line="277" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="278" pos:column="17">hdtr<pos:position pos:line="278" pos:column="21"/></name><operator pos:line="278" pos:column="21">.<pos:position pos:line="278" pos:column="22"/></operator><name pos:line="278" pos:column="22">trailers<pos:position pos:line="278" pos:column="30"/></name></name> <operator pos:line="278" pos:column="31">=<pos:position pos:line="278" pos:column="32"/></operator> <name pos:line="278" pos:column="33">vec_trailers<pos:position pos:line="278" pos:column="45"/></name></expr>;<pos:position pos:line="278" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="279" pos:column="14"/></block></then></if>

<cpp:if pos:line="281" pos:column="1">#<cpp:directive pos:line="281" pos:column="2">if<pos:position pos:line="281" pos:column="4"/></cpp:directive> <expr><name pos:line="281" pos:column="5">APR_HAS_SENDFILE<pos:position pos:line="281" pos:column="21"/></name></expr></cpp:if>
            <if pos:line="282" pos:column="13">if <condition pos:line="282" pos:column="16">(<expr><name><name pos:line="282" pos:column="17">c<pos:position pos:line="282" pos:column="18"/></name><operator pos:line="282" pos:column="18">-&gt;<pos:position pos:line="282" pos:column="23"/></operator><name pos:line="282" pos:column="20">keepalive<pos:position pos:line="282" pos:column="29"/></name></name> <operator pos:line="282" pos:column="30">==<pos:position pos:line="282" pos:column="32"/></operator> <name pos:line="282" pos:column="33">AP_CONN_CLOSE<pos:position pos:line="282" pos:column="46"/></name> <operator pos:line="282" pos:column="47">&amp;&amp;<pos:position pos:line="282" pos:column="57"/></operator> <call><name pos:line="282" pos:column="50">APR_BUCKET_IS_EOS<pos:position pos:line="282" pos:column="67"/></name><argument_list pos:line="282" pos:column="67">(<argument><expr><name pos:line="282" pos:column="68">last_e<pos:position pos:line="282" pos:column="74"/></name></expr></argument>)<pos:position pos:line="282" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="282" pos:column="76"/></condition><then pos:line="282" pos:column="76"> <block pos:line="282" pos:column="77">{
                <comment type="block" pos:line="283" pos:column="17">/* Prepare the socket to be reused */</comment>
                <expr_stmt><expr><name pos:line="284" pos:column="17">flags<pos:position pos:line="284" pos:column="22"/></name> <operator pos:line="284" pos:column="23">|=<pos:position pos:line="284" pos:column="25"/></operator> <name pos:line="284" pos:column="26">APR_SENDFILE_DISCONNECT_SOCKET<pos:position pos:line="284" pos:column="56"/></name></expr>;<pos:position pos:line="284" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="285" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="287" pos:column="13">rv<pos:position pos:line="287" pos:column="15"/></name> <operator pos:line="287" pos:column="16">=<pos:position pos:line="287" pos:column="17"/></operator> <call><name pos:line="287" pos:column="18">sendfile_it_all<pos:position pos:line="287" pos:column="33"/></name><argument_list pos:line="287" pos:column="33">(<argument><expr><name pos:line="287" pos:column="34">net<pos:position pos:line="287" pos:column="37"/></name></expr></argument>,      <comment type="block" pos:line="287" pos:column="44">/* the network information   */</comment>
                                 <argument><expr><name pos:line="288" pos:column="34">fd<pos:position pos:line="288" pos:column="36"/></name></expr></argument>,       <comment type="block" pos:line="288" pos:column="44">/* the file to send          */</comment>
                                 <argument><expr><operator pos:line="289" pos:column="34">&amp;<pos:position pos:line="289" pos:column="39"/></operator><name pos:line="289" pos:column="35">hdtr<pos:position pos:line="289" pos:column="39"/></name></expr></argument>,    <comment type="block" pos:line="289" pos:column="44">/* header and trailer iovecs */</comment>
                                 <argument><expr><name pos:line="290" pos:column="34">foffset<pos:position pos:line="290" pos:column="41"/></name></expr></argument>,  <comment type="block" pos:line="290" pos:column="44">/* offset in the file to begin
                                              sending from              */</comment>
                                 <argument><expr><name pos:line="292" pos:column="34">flen<pos:position pos:line="292" pos:column="38"/></name></expr></argument>,     <comment type="block" pos:line="292" pos:column="44">/* length of file            */</comment>
                                 <argument><expr><name pos:line="293" pos:column="34">nbytes<pos:position pos:line="293" pos:column="40"/></name> <operator pos:line="293" pos:column="41">+<pos:position pos:line="293" pos:column="42"/></operator> <name pos:line="293" pos:column="43">flen<pos:position pos:line="293" pos:column="47"/></name></expr></argument>, <comment type="block" pos:line="293" pos:column="49">/* total length including
                                                   headers                */</comment>
                                 <argument><expr><name pos:line="295" pos:column="34">flags<pos:position pos:line="295" pos:column="39"/></name></expr></argument>)<pos:position pos:line="295" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="295" pos:column="41"/></expr_stmt>   <comment type="block" pos:line="295" pos:column="44">/* apr_sendfile flags        */</comment>

            <comment type="block" pos:line="297" pos:column="13">/* If apr_sendfile() returns APR_ENOTIMPL, call emulate_sendfile().
             * emulate_sendfile() is useful to enable the same Apache binary
             * distribution to support Windows NT/2000 (supports TransmitFile)
             * and Win95/98 (do not support TransmitFile)
             */</comment>
            <if pos:line="302" pos:column="13">if <condition pos:line="302" pos:column="16">(<expr><name pos:line="302" pos:column="17">rv<pos:position pos:line="302" pos:column="19"/></name> <operator pos:line="302" pos:column="20">==<pos:position pos:line="302" pos:column="22"/></operator> <name pos:line="302" pos:column="23">APR_ENOTIMPL<pos:position pos:line="302" pos:column="35"/></name></expr>)<pos:position pos:line="302" pos:column="36"/></condition><then pos:line="302" pos:column="36">
<cpp:endif pos:line="303" pos:column="1">#<cpp:directive pos:line="303" pos:column="2">endif<pos:position pos:line="303" pos:column="7"/></cpp:directive></cpp:endif>
            <block pos:line="304" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="305" pos:column="17">apr_size_t<pos:position pos:line="305" pos:column="27"/></name></type> <name pos:line="305" pos:column="28">unused_bytes_sent<pos:position pos:line="305" pos:column="45"/></name></decl>;<pos:position pos:line="305" pos:column="46"/></decl_stmt>
                <expr_stmt><expr><name pos:line="306" pos:column="17">rv<pos:position pos:line="306" pos:column="19"/></name> <operator pos:line="306" pos:column="20">=<pos:position pos:line="306" pos:column="21"/></operator> <call><name pos:line="306" pos:column="22">emulate_sendfile<pos:position pos:line="306" pos:column="38"/></name><argument_list pos:line="306" pos:column="38">(<argument><expr><name pos:line="306" pos:column="39">net<pos:position pos:line="306" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="306" pos:column="44">fd<pos:position pos:line="306" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="306" pos:column="48">&amp;<pos:position pos:line="306" pos:column="53"/></operator><name pos:line="306" pos:column="49">hdtr<pos:position pos:line="306" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="306" pos:column="55">foffset<pos:position pos:line="306" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="306" pos:column="64">flen<pos:position pos:line="306" pos:column="68"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="307" pos:column="39">&amp;<pos:position pos:line="307" pos:column="44"/></operator><name pos:line="307" pos:column="40">unused_bytes_sent<pos:position pos:line="307" pos:column="57"/></name></expr></argument>)<pos:position pos:line="307" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="307" pos:column="59"/></expr_stmt>
            }<pos:position pos:line="308" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="310" pos:column="13">fd<pos:position pos:line="310" pos:column="15"/></name> <operator pos:line="310" pos:column="16">=<pos:position pos:line="310" pos:column="17"/></operator> <name pos:line="310" pos:column="18">NULL<pos:position pos:line="310" pos:column="22"/></name></expr>;<pos:position pos:line="310" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="311" pos:column="10"/></block></then>
        <else pos:line="312" pos:column="9">else <block pos:line="312" pos:column="14">{
            <decl_stmt><decl><type><name pos:line="313" pos:column="13">apr_size_t<pos:position pos:line="313" pos:column="23"/></name></type> <name pos:line="313" pos:column="24">unused_bytes_sent<pos:position pos:line="313" pos:column="41"/></name></decl>;<pos:position pos:line="313" pos:column="42"/></decl_stmt>

            <expr_stmt><expr><name pos:line="315" pos:column="13">rv<pos:position pos:line="315" pos:column="15"/></name> <operator pos:line="315" pos:column="16">=<pos:position pos:line="315" pos:column="17"/></operator> <call><name pos:line="315" pos:column="18">writev_it_all<pos:position pos:line="315" pos:column="31"/></name><argument_list pos:line="315" pos:column="31">(<argument><expr><name><name pos:line="315" pos:column="32">net<pos:position pos:line="315" pos:column="35"/></name><operator pos:line="315" pos:column="35">-&gt;<pos:position pos:line="315" pos:column="40"/></operator><name pos:line="315" pos:column="37">client_socket<pos:position pos:line="315" pos:column="50"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="316" pos:column="32">vec<pos:position pos:line="316" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="316" pos:column="37">nvec<pos:position pos:line="316" pos:column="41"/></name></expr></argument>,
                               <argument><expr><name pos:line="317" pos:column="32">nbytes<pos:position pos:line="317" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="317" pos:column="40">&amp;<pos:position pos:line="317" pos:column="45"/></operator><name pos:line="317" pos:column="41">unused_bytes_sent<pos:position pos:line="317" pos:column="58"/></name></expr></argument>)<pos:position pos:line="317" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="317" pos:column="60"/></expr_stmt>
        }<pos:position pos:line="318" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name pos:line="320" pos:column="9">apr_brigade_destroy<pos:position pos:line="320" pos:column="28"/></name><argument_list pos:line="320" pos:column="28">(<argument><expr><name pos:line="320" pos:column="29">b<pos:position pos:line="320" pos:column="30"/></name></expr></argument>)<pos:position pos:line="320" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="32"/></expr_stmt>
        <if pos:line="321" pos:column="9">if <condition pos:line="321" pos:column="12">(<expr><name pos:line="321" pos:column="13">rv<pos:position pos:line="321" pos:column="15"/></name> <operator pos:line="321" pos:column="16">!=<pos:position pos:line="321" pos:column="18"/></operator> <name pos:line="321" pos:column="19">APR_SUCCESS<pos:position pos:line="321" pos:column="30"/></name></expr>)<pos:position pos:line="321" pos:column="31"/></condition><then pos:line="321" pos:column="31"> <block pos:line="321" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="322" pos:column="13">ap_log_error<pos:position pos:line="322" pos:column="25"/></name><argument_list pos:line="322" pos:column="25">(<argument><expr><name pos:line="322" pos:column="26">APLOG_MARK<pos:position pos:line="322" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="322" pos:column="38">APLOG_INFO<pos:position pos:line="322" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="322" pos:column="50">rv<pos:position pos:line="322" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="322" pos:column="54">c<pos:position pos:line="322" pos:column="55"/></name><operator pos:line="322" pos:column="55">-&gt;<pos:position pos:line="322" pos:column="60"/></operator><name pos:line="322" pos:column="57">base_server<pos:position pos:line="322" pos:column="68"/></name></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="323" pos:column="26">"core_output_filter: writing data to the network"<pos:position pos:line="323" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="323" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="323" pos:column="77"/></expr_stmt>

            <if pos:line="325" pos:column="13">if <condition pos:line="325" pos:column="16">(<expr><name pos:line="325" pos:column="17">more<pos:position pos:line="325" pos:column="21"/></name></expr>)<pos:position pos:line="325" pos:column="22"/></condition><then pos:line="325" pos:column="22">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="326" pos:column="17">apr_brigade_destroy<pos:position pos:line="326" pos:column="36"/></name><argument_list pos:line="326" pos:column="36">(<argument><expr><name pos:line="326" pos:column="37">more<pos:position pos:line="326" pos:column="41"/></name></expr></argument>)<pos:position pos:line="326" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="326" pos:column="43"/></expr_stmt></block></then></if>

            <if pos:line="328" pos:column="13">if <condition pos:line="328" pos:column="16">(<expr><call><name pos:line="328" pos:column="17">APR_STATUS_IS_ECONNABORTED<pos:position pos:line="328" pos:column="43"/></name><argument_list pos:line="328" pos:column="43">(<argument><expr><name pos:line="328" pos:column="44">rv<pos:position pos:line="328" pos:column="46"/></name></expr></argument>)<pos:position pos:line="328" pos:column="47"/></argument_list></call>
                <operator pos:line="329" pos:column="17">||<pos:position pos:line="329" pos:column="19"/></operator> <call><name pos:line="329" pos:column="20">APR_STATUS_IS_ECONNRESET<pos:position pos:line="329" pos:column="44"/></name><argument_list pos:line="329" pos:column="44">(<argument><expr><name pos:line="329" pos:column="45">rv<pos:position pos:line="329" pos:column="47"/></name></expr></argument>)<pos:position pos:line="329" pos:column="48"/></argument_list></call>
                <operator pos:line="330" pos:column="17">||<pos:position pos:line="330" pos:column="19"/></operator> <call><name pos:line="330" pos:column="20">APR_STATUS_IS_EPIPE<pos:position pos:line="330" pos:column="39"/></name><argument_list pos:line="330" pos:column="39">(<argument><expr><name pos:line="330" pos:column="40">rv<pos:position pos:line="330" pos:column="42"/></name></expr></argument>)<pos:position pos:line="330" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="330" pos:column="44"/></condition><then pos:line="330" pos:column="44"> <block pos:line="330" pos:column="45">{
                <expr_stmt><expr><name><name pos:line="331" pos:column="17">c<pos:position pos:line="331" pos:column="18"/></name><operator pos:line="331" pos:column="18">-&gt;<pos:position pos:line="331" pos:column="23"/></operator><name pos:line="331" pos:column="20">aborted<pos:position pos:line="331" pos:column="27"/></name></name> <operator pos:line="331" pos:column="28">=<pos:position pos:line="331" pos:column="29"/></operator> <literal type="number" pos:line="331" pos:column="30">1<pos:position pos:line="331" pos:column="31"/></literal></expr>;<pos:position pos:line="331" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="332" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="334" pos:column="13">/* The client has aborted, but the request was successful. We
             * will report success, and leave it to the access and error
             * logs to note that the connection was aborted.
             */</comment>
            <return pos:line="338" pos:column="13">return <expr><name pos:line="338" pos:column="20">APR_SUCCESS<pos:position pos:line="338" pos:column="31"/></name></expr>;<pos:position pos:line="338" pos:column="32"/></return>
        }<pos:position pos:line="339" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="341" pos:column="9">b<pos:position pos:line="341" pos:column="10"/></name> <operator pos:line="341" pos:column="11">=<pos:position pos:line="341" pos:column="12"/></operator> <name pos:line="341" pos:column="13">more<pos:position pos:line="341" pos:column="17"/></name></expr>;<pos:position pos:line="341" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><name pos:line="342" pos:column="9">more<pos:position pos:line="342" pos:column="13"/></name> <operator pos:line="342" pos:column="14">=<pos:position pos:line="342" pos:column="15"/></operator> <name pos:line="342" pos:column="16">NULL<pos:position pos:line="342" pos:column="20"/></name></expr>;<pos:position pos:line="342" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="343" pos:column="6"/></block></while>  <comment type="block" pos:line="343" pos:column="8">/* end while () */</comment>

    <return pos:line="345" pos:column="5">return <expr><name pos:line="345" pos:column="12">APR_SUCCESS<pos:position pos:line="345" pos:column="23"/></name></expr>;<pos:position pos:line="345" pos:column="24"/></return>
}<pos:position pos:line="346" pos:column="2"/></block></function></unit>
