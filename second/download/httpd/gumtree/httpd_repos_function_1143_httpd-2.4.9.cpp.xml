<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1143_httpd-2.4.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lua_apr_b64decode<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">lua_State<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">L<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="43"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name>     <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">encoded<pos:position pos:line="3" pos:column="28"/></name></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name>           <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">plain<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">size_t<pos:position pos:line="5" pos:column="11"/></name></type>          <name pos:line="5" pos:column="21">encoded_len<pos:position pos:line="5" pos:column="32"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="34">decoded_len<pos:position pos:line="5" pos:column="45"/></name></decl>;<pos:position pos:line="5" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">request_rec<pos:position pos:line="6" pos:column="16"/></name>    <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">r<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">r<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <call><name pos:line="8" pos:column="9">ap_lua_check_request_rec<pos:position pos:line="8" pos:column="33"/></name><argument_list pos:line="8" pos:column="33">(<argument><expr><name pos:line="8" pos:column="34">L<pos:position pos:line="8" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="37">1<pos:position pos:line="8" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">luaL_checktype<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">L<pos:position pos:line="9" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="23">2<pos:position pos:line="9" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="26">LUA_TSTRING<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">encoded<pos:position pos:line="10" pos:column="12"/></name> <operator pos:line="10" pos:column="13">=<pos:position pos:line="10" pos:column="14"/></operator> <call><name pos:line="10" pos:column="15">lua_tolstring<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name pos:line="10" pos:column="29">L<pos:position pos:line="10" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="32">2<pos:position pos:line="10" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></operator><name pos:line="10" pos:column="36">encoded_len<pos:position pos:line="10" pos:column="47"/></name></expr></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">decoded_len<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">=<pos:position pos:line="11" pos:column="18"/></operator> <call><name pos:line="11" pos:column="19">apr_base64_decode_len<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">encoded<pos:position pos:line="11" pos:column="48"/></name></expr></argument>)<pos:position pos:line="11" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="50"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">decoded_len<pos:position pos:line="12" pos:column="20"/></name></expr>)<pos:position pos:line="12" pos:column="21"/></condition><then pos:line="12" pos:column="21"> <block pos:line="12" pos:column="22">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">plain<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">apr_palloc<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name><name pos:line="13" pos:column="28">r<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">pool<pos:position pos:line="13" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">decoded_len<pos:position pos:line="13" pos:column="48"/></name></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">decoded_len<pos:position pos:line="14" pos:column="20"/></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <call><name pos:line="14" pos:column="23">apr_base64_decode<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><name pos:line="14" pos:column="41">plain<pos:position pos:line="14" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="48">encoded<pos:position pos:line="14" pos:column="55"/></name></expr></argument>)<pos:position pos:line="14" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="57"/></expr_stmt>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">decoded_len<pos:position pos:line="15" pos:column="24"/></name> <operator pos:line="15" pos:column="25">&gt;<pos:position pos:line="15" pos:column="29"/></operator> <literal type="number" pos:line="15" pos:column="27">0<pos:position pos:line="15" pos:column="28"/></literal> <operator pos:line="15" pos:column="29">&amp;&amp;<pos:position pos:line="15" pos:column="39"/></operator> <name><name pos:line="15" pos:column="32">plain<pos:position pos:line="15" pos:column="37"/></name><index pos:line="15" pos:column="37">[<expr><name pos:line="15" pos:column="38">decoded_len<pos:position pos:line="15" pos:column="49"/></name> <operator pos:line="15" pos:column="50">-<pos:position pos:line="15" pos:column="51"/></operator> <literal type="number" pos:line="15" pos:column="52">1<pos:position pos:line="15" pos:column="53"/></literal></expr>]<pos:position pos:line="15" pos:column="54"/></index></name> <operator pos:line="15" pos:column="55">==<pos:position pos:line="15" pos:column="57"/></operator> <literal type="char" pos:line="15" pos:column="58">'\0'<pos:position pos:line="15" pos:column="62"/></literal></expr>)<pos:position pos:line="15" pos:column="63"/></condition><then pos:line="15" pos:column="63">
            <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="13">decoded_len<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">--<pos:position pos:line="16" pos:column="26"/></operator></expr>;<pos:position pos:line="16" pos:column="27"/></expr_stmt></block></then></if> 
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">lua_pushlstring<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">L<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="28">plain<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="35">decoded_len<pos:position pos:line="17" pos:column="46"/></name></expr></argument>)<pos:position pos:line="17" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="48"/></expr_stmt>
        <return pos:line="18" pos:column="9">return <expr><literal type="number" pos:line="18" pos:column="16">1<pos:position pos:line="18" pos:column="17"/></literal></expr>;<pos:position pos:line="18" pos:column="18"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    <return pos:line="20" pos:column="5">return <expr><literal type="number" pos:line="20" pos:column="12">0<pos:position pos:line="20" pos:column="13"/></literal></expr>;<pos:position pos:line="20" pos:column="14"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
