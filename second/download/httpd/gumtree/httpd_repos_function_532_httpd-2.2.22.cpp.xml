<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_532_httpd-2.2.22.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">rfc1413_query<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">apr_socket_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">sock<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">conn_rec<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">conn<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="2" pos:column="35">server_rec<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">srv<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_port_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">rmt_port<pos:position pos:line="4" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="26">our_port<pos:position pos:line="4" pos:column="34"/></name></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_port_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">sav_rmt_port<pos:position pos:line="5" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="30">sav_our_port<pos:position pos:line="5" pos:column="42"/></name></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">i<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">cp<pos:position pos:line="7" pos:column="13"/></name></decl>;<pos:position pos:line="7" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">buffer<pos:position pos:line="8" pos:column="16"/></name><index pos:line="8" pos:column="16">[<expr><name pos:line="8" pos:column="17">RFC1413_MAXDATA<pos:position pos:line="8" pos:column="32"/></name> <operator pos:line="8" pos:column="33">+<pos:position pos:line="8" pos:column="34"/></operator> <literal type="number" pos:line="8" pos:column="35">1<pos:position pos:line="8" pos:column="36"/></literal></expr>]<pos:position pos:line="8" pos:column="37"/></index></name></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name></type> <name><name pos:line="9" pos:column="10">user<pos:position pos:line="9" pos:column="14"/></name><index pos:line="9" pos:column="14">[<expr><name pos:line="9" pos:column="15">RFC1413_USERLEN<pos:position pos:line="9" pos:column="30"/></name> <operator pos:line="9" pos:column="31">+<pos:position pos:line="9" pos:column="32"/></operator> <literal type="number" pos:line="9" pos:column="33">1<pos:position pos:line="9" pos:column="34"/></literal></expr>]<pos:position pos:line="9" pos:column="35"/></index></name></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>     <comment type="block" pos:line="9" pos:column="41">/* XXX */</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_size_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">buflen<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="12" pos:column="5">sav_our_port<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <name><name pos:line="12" pos:column="20">conn<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">-&gt;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="26">local_addr<pos:position pos:line="12" pos:column="36"/></name><operator pos:line="12" pos:column="36">-&gt;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="38">port<pos:position pos:line="12" pos:column="42"/></name></name></expr>;<pos:position pos:line="12" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">sav_rmt_port<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name><name pos:line="13" pos:column="20">conn<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">remote_addr<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">-&gt;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="39">port<pos:position pos:line="13" pos:column="43"/></name></name></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* send the data */</comment>
    <expr_stmt><expr><name pos:line="16" pos:column="5">buflen<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <call><name pos:line="16" pos:column="14">apr_snprintf<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><name pos:line="16" pos:column="27">buffer<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="35">sizeof<argument_list pos:line="16" pos:column="41">(<argument><expr><name pos:line="16" pos:column="42">buffer<pos:position pos:line="16" pos:column="48"/></name></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="51">"%hu,%hu\r\n"<pos:position pos:line="16" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="66">sav_rmt_port<pos:position pos:line="16" pos:column="78"/></name></expr></argument>,
                          <argument><expr><name pos:line="17" pos:column="27">sav_our_port<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ap_xlate_proto_to_ascii<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">buffer<pos:position pos:line="18" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="37">buflen<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* send query to server. Handle short write. */</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">i<pos:position pos:line="21" pos:column="6"/></name> <operator pos:line="21" pos:column="7">=<pos:position pos:line="21" pos:column="8"/></operator> <literal type="number" pos:line="21" pos:column="9">0<pos:position pos:line="21" pos:column="10"/></literal></expr>;<pos:position pos:line="21" pos:column="11"/></expr_stmt>
    <while pos:line="22" pos:column="5">while <condition pos:line="22" pos:column="11">(<expr><name pos:line="22" pos:column="12">i<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">&lt;<pos:position pos:line="22" pos:column="18"/></operator> <name pos:line="22" pos:column="16">buflen<pos:position pos:line="22" pos:column="22"/></name></expr>)<pos:position pos:line="22" pos:column="23"/></condition> <block pos:line="22" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">apr_size_t<pos:position pos:line="23" pos:column="19"/></name></type> <name pos:line="23" pos:column="20">j<pos:position pos:line="23" pos:column="21"/></name> <init pos:line="23" pos:column="22">= <expr><call><name pos:line="23" pos:column="24">strlen<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><name pos:line="23" pos:column="31">buffer<pos:position pos:line="23" pos:column="37"/></name> <operator pos:line="23" pos:column="38">+<pos:position pos:line="23" pos:column="39"/></operator> <name pos:line="23" pos:column="40">i<pos:position pos:line="23" pos:column="41"/></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="43"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">apr_status_t<pos:position pos:line="24" pos:column="21"/></name></type> <name pos:line="24" pos:column="22">status<pos:position pos:line="24" pos:column="28"/></name></decl>;<pos:position pos:line="24" pos:column="29"/></decl_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">status<pos:position pos:line="25" pos:column="15"/></name>  <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">apr_socket_send<pos:position pos:line="25" pos:column="34"/></name><argument_list pos:line="25" pos:column="34">(<argument><expr><name pos:line="25" pos:column="35">sock<pos:position pos:line="25" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="41">buffer<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">+<pos:position pos:line="25" pos:column="48"/></operator><name pos:line="25" pos:column="48">i<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="51">&amp;<pos:position pos:line="25" pos:column="56"/></operator><name pos:line="25" pos:column="52">j<pos:position pos:line="25" pos:column="53"/></name></expr></argument>)<pos:position pos:line="25" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="55"/></expr_stmt>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">status<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">!=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">APR_SUCCESS<pos:position pos:line="26" pos:column="34"/></name></expr>)<pos:position pos:line="26" pos:column="35"/></condition><then pos:line="26" pos:column="35"> <block pos:line="26" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">ap_log_error<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">APLOG_MARK<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="38">APLOG_CRIT<pos:position pos:line="27" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="50">status<pos:position pos:line="27" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="58">srv<pos:position pos:line="27" pos:column="61"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="28" pos:column="26">"write: rfc1413: error sending request"<pos:position pos:line="28" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="67"/></expr_stmt>
            <return pos:line="29" pos:column="13">return <expr><name pos:line="29" pos:column="20">status<pos:position pos:line="29" pos:column="26"/></name></expr>;<pos:position pos:line="29" pos:column="27"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then>
        <elseif pos:line="31" pos:column="9">else <if pos:line="31" pos:column="14">if <condition pos:line="31" pos:column="17">(<expr><name pos:line="31" pos:column="18">j<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">&gt;<pos:position pos:line="31" pos:column="24"/></operator> <literal type="number" pos:line="31" pos:column="22">0<pos:position pos:line="31" pos:column="23"/></literal></expr>)<pos:position pos:line="31" pos:column="24"/></condition><then pos:line="31" pos:column="24"> <block pos:line="31" pos:column="25">{
            <expr_stmt><expr><name pos:line="32" pos:column="13">i<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">+=<pos:position pos:line="32" pos:column="16"/></operator><name pos:line="32" pos:column="16">j<pos:position pos:line="32" pos:column="17"/></name></expr>;<pos:position pos:line="32" pos:column="18"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="34" pos:column="6"/></block></while>

    <comment type="block" pos:line="36" pos:column="5">/*
     * Read response from server. - the response should be newline
     * terminated according to rfc - make sure it doesn't stomp its
     * way out of the buffer.
     */</comment>

    <expr_stmt><expr><name pos:line="42" pos:column="5">i<pos:position pos:line="42" pos:column="6"/></name> <operator pos:line="42" pos:column="7">=<pos:position pos:line="42" pos:column="8"/></operator> <literal type="number" pos:line="42" pos:column="9">0<pos:position pos:line="42" pos:column="10"/></literal></expr>;<pos:position pos:line="42" pos:column="11"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">memset<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><name pos:line="43" pos:column="12">buffer<pos:position pos:line="43" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="20">'\0'<pos:position pos:line="43" pos:column="24"/></literal></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="26">sizeof<argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">buffer<pos:position pos:line="43" pos:column="39"/></name></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
    <comment type="block" pos:line="44" pos:column="5">/*
     * Note that the strchr function below checks for \012 instead of '\n'
     * this allows it to work on both ASCII and EBCDIC machines.
     */</comment>
    <while pos:line="48" pos:column="5">while<condition pos:line="48" pos:column="10">(<expr><operator pos:line="48" pos:column="11">(<pos:position pos:line="48" pos:column="12"/></operator><name pos:line="48" pos:column="12">cp<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">=<pos:position pos:line="48" pos:column="16"/></operator> <call><name pos:line="48" pos:column="17">strchr<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name pos:line="48" pos:column="24">buffer<pos:position pos:line="48" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="48" pos:column="32">'\012'<pos:position pos:line="48" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="39"/></argument_list></call><operator pos:line="48" pos:column="39">)<pos:position pos:line="48" pos:column="40"/></operator> <operator pos:line="48" pos:column="41">==<pos:position pos:line="48" pos:column="43"/></operator> <name pos:line="48" pos:column="44">NULL<pos:position pos:line="48" pos:column="48"/></name> <operator pos:line="48" pos:column="49">&amp;&amp;<pos:position pos:line="48" pos:column="59"/></operator> <name pos:line="48" pos:column="52">i<pos:position pos:line="48" pos:column="53"/></name> <operator pos:line="48" pos:column="54">&lt;<pos:position pos:line="48" pos:column="58"/></operator> <sizeof pos:line="48" pos:column="56">sizeof<argument_list pos:line="48" pos:column="62">(<argument><expr><name pos:line="48" pos:column="63">buffer<pos:position pos:line="48" pos:column="69"/></name></expr></argument>)<pos:position pos:line="48" pos:column="70"/></argument_list></sizeof> <operator pos:line="48" pos:column="71">-<pos:position pos:line="48" pos:column="72"/></operator> <literal type="number" pos:line="48" pos:column="73">1<pos:position pos:line="48" pos:column="74"/></literal></expr>)<pos:position pos:line="48" pos:column="75"/></condition> <block pos:line="48" pos:column="76">{
        <decl_stmt><decl><type><name pos:line="49" pos:column="9">apr_size_t<pos:position pos:line="49" pos:column="19"/></name></type> <name pos:line="49" pos:column="20">j<pos:position pos:line="49" pos:column="21"/></name> <init pos:line="49" pos:column="22">= <expr><sizeof pos:line="49" pos:column="24">sizeof<argument_list pos:line="49" pos:column="30">(<argument><expr><name pos:line="49" pos:column="31">buffer<pos:position pos:line="49" pos:column="37"/></name></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></sizeof> <operator pos:line="49" pos:column="39">-<pos:position pos:line="49" pos:column="40"/></operator> <literal type="number" pos:line="49" pos:column="41">1<pos:position pos:line="49" pos:column="42"/></literal> <operator pos:line="49" pos:column="43">-<pos:position pos:line="49" pos:column="44"/></operator> <name pos:line="49" pos:column="45">i<pos:position pos:line="49" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="49" pos:column="47"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="50" pos:column="9">apr_status_t<pos:position pos:line="50" pos:column="21"/></name></type> <name pos:line="50" pos:column="22">status<pos:position pos:line="50" pos:column="28"/></name></decl>;<pos:position pos:line="50" pos:column="29"/></decl_stmt>
        <expr_stmt><expr><name pos:line="51" pos:column="9">status<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">=<pos:position pos:line="51" pos:column="17"/></operator> <call><name pos:line="51" pos:column="18">apr_socket_recv<pos:position pos:line="51" pos:column="33"/></name><argument_list pos:line="51" pos:column="33">(<argument><expr><name pos:line="51" pos:column="34">sock<pos:position pos:line="51" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="40">buffer<pos:position pos:line="51" pos:column="46"/></name><operator pos:line="51" pos:column="46">+<pos:position pos:line="51" pos:column="47"/></operator><name pos:line="51" pos:column="47">i<pos:position pos:line="51" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="50">&amp;<pos:position pos:line="51" pos:column="55"/></operator><name pos:line="51" pos:column="51">j<pos:position pos:line="51" pos:column="52"/></name></expr></argument>)<pos:position pos:line="51" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="54"/></expr_stmt>
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">status<pos:position pos:line="52" pos:column="19"/></name> <operator pos:line="52" pos:column="20">!=<pos:position pos:line="52" pos:column="22"/></operator> <name pos:line="52" pos:column="23">APR_SUCCESS<pos:position pos:line="52" pos:column="34"/></name></expr>)<pos:position pos:line="52" pos:column="35"/></condition><then pos:line="52" pos:column="35"> <block pos:line="52" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">ap_log_error<pos:position pos:line="53" pos:column="25"/></name><argument_list pos:line="53" pos:column="25">(<argument><expr><name pos:line="53" pos:column="26">APLOG_MARK<pos:position pos:line="53" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="38">APLOG_CRIT<pos:position pos:line="53" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="50">status<pos:position pos:line="53" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="58">srv<pos:position pos:line="53" pos:column="61"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="54" pos:column="26">"read: rfc1413: error reading response"<pos:position pos:line="54" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="67"/></expr_stmt>
            <return pos:line="55" pos:column="13">return <expr><name pos:line="55" pos:column="20">status<pos:position pos:line="55" pos:column="26"/></name></expr>;<pos:position pos:line="55" pos:column="27"/></return>
        }<pos:position pos:line="56" pos:column="10"/></block></then>
        <elseif pos:line="57" pos:column="9">else <if pos:line="57" pos:column="14">if <condition pos:line="57" pos:column="17">(<expr><name pos:line="57" pos:column="18">j<pos:position pos:line="57" pos:column="19"/></name> <operator pos:line="57" pos:column="20">&gt;<pos:position pos:line="57" pos:column="24"/></operator> <literal type="number" pos:line="57" pos:column="22">0<pos:position pos:line="57" pos:column="23"/></literal></expr>)<pos:position pos:line="57" pos:column="24"/></condition><then pos:line="57" pos:column="24"> <block pos:line="57" pos:column="25">{
            <expr_stmt><expr><name pos:line="58" pos:column="13">i<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">+=<pos:position pos:line="58" pos:column="16"/></operator><name pos:line="58" pos:column="16">j<pos:position pos:line="58" pos:column="17"/></name></expr>;<pos:position pos:line="58" pos:column="18"/></expr_stmt>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="60" pos:column="9">else <if pos:line="60" pos:column="14">if <condition pos:line="60" pos:column="17">(<expr><name pos:line="60" pos:column="18">status<pos:position pos:line="60" pos:column="24"/></name> <operator pos:line="60" pos:column="25">==<pos:position pos:line="60" pos:column="27"/></operator> <name pos:line="60" pos:column="28">APR_SUCCESS<pos:position pos:line="60" pos:column="39"/></name> <operator pos:line="60" pos:column="40">&amp;&amp;<pos:position pos:line="60" pos:column="50"/></operator> <name pos:line="60" pos:column="43">j<pos:position pos:line="60" pos:column="44"/></name> <operator pos:line="60" pos:column="45">==<pos:position pos:line="60" pos:column="47"/></operator> <literal type="number" pos:line="60" pos:column="48">0<pos:position pos:line="60" pos:column="49"/></literal></expr>)<pos:position pos:line="60" pos:column="50"/></condition><then pos:line="60" pos:column="50"> <block pos:line="60" pos:column="51">{
            <comment type="block" pos:line="61" pos:column="13">/* Oops... we ran out of data before finding newline */</comment>
            <return pos:line="62" pos:column="13">return <expr><name pos:line="62" pos:column="20">APR_EINVAL<pos:position pos:line="62" pos:column="30"/></name></expr>;<pos:position pos:line="62" pos:column="31"/></return>
        }<pos:position pos:line="63" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="64" pos:column="6"/></block></while>

<comment type="block" pos:line="66" pos:column="1">/* RFC1413_USERLEN = 512 */</comment>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">ap_xlate_proto_from_ascii<pos:position pos:line="67" pos:column="30"/></name><argument_list pos:line="67" pos:column="30">(<argument><expr><name pos:line="67" pos:column="31">buffer<pos:position pos:line="67" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="39">i<pos:position pos:line="67" pos:column="40"/></name></expr></argument>)<pos:position pos:line="67" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="42"/></expr_stmt>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><call><name pos:line="68" pos:column="9">sscanf<pos:position pos:line="68" pos:column="15"/></name><argument_list pos:line="68" pos:column="15">(<argument><expr><name pos:line="68" pos:column="16">buffer<pos:position pos:line="68" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="24">"%hu , %hu : USERID :%*[^:]:%512s"<pos:position pos:line="68" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="68" pos:column="60">&amp;<pos:position pos:line="68" pos:column="65"/></operator><name pos:line="68" pos:column="61">rmt_port<pos:position pos:line="68" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="71">&amp;<pos:position pos:line="68" pos:column="76"/></operator><name pos:line="68" pos:column="72">our_port<pos:position pos:line="68" pos:column="80"/></name></expr></argument>,
               <argument><expr><name pos:line="69" pos:column="16">user<pos:position pos:line="69" pos:column="20"/></name></expr></argument>)<pos:position pos:line="69" pos:column="21"/></argument_list></call> <operator pos:line="69" pos:column="22">!=<pos:position pos:line="69" pos:column="24"/></operator> <literal type="number" pos:line="69" pos:column="25">3<pos:position pos:line="69" pos:column="26"/></literal> <operator pos:line="69" pos:column="27">||<pos:position pos:line="69" pos:column="29"/></operator> <name pos:line="69" pos:column="30">sav_rmt_port<pos:position pos:line="69" pos:column="42"/></name> <operator pos:line="69" pos:column="43">!=<pos:position pos:line="69" pos:column="45"/></operator> <name pos:line="69" pos:column="46">rmt_port<pos:position pos:line="69" pos:column="54"/></name>
        <operator pos:line="70" pos:column="9">||<pos:position pos:line="70" pos:column="11"/></operator> <name pos:line="70" pos:column="12">sav_our_port<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">!=<pos:position pos:line="70" pos:column="27"/></operator> <name pos:line="70" pos:column="28">our_port<pos:position pos:line="70" pos:column="36"/></name></expr>)<pos:position pos:line="70" pos:column="37"/></condition><then pos:line="70" pos:column="37">
        <block type="pseudo"><return pos:line="71" pos:column="9">return <expr><name pos:line="71" pos:column="16">APR_EINVAL<pos:position pos:line="71" pos:column="26"/></name></expr>;<pos:position pos:line="71" pos:column="27"/></return></block></then></if>

    <comment type="block" pos:line="73" pos:column="5">/*
     * Strip trailing carriage return. It is part of the
     * protocol, not part of the data.
     */</comment>

    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><operator pos:line="78" pos:column="9">(<pos:position pos:line="78" pos:column="10"/></operator><name pos:line="78" pos:column="10">cp<pos:position pos:line="78" pos:column="12"/></name> <operator pos:line="78" pos:column="13">=<pos:position pos:line="78" pos:column="14"/></operator> <call><name pos:line="78" pos:column="15">strchr<pos:position pos:line="78" pos:column="21"/></name><argument_list pos:line="78" pos:column="21">(<argument><expr><name pos:line="78" pos:column="22">user<pos:position pos:line="78" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="78" pos:column="28">'\r'<pos:position pos:line="78" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="33"/></argument_list></call><operator pos:line="78" pos:column="33">)<pos:position pos:line="78" pos:column="34"/></operator></expr>)<pos:position pos:line="78" pos:column="35"/></condition><then pos:line="78" pos:column="35">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="79" pos:column="9">*<pos:position pos:line="79" pos:column="10"/></operator><name pos:line="79" pos:column="10">cp<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">=<pos:position pos:line="79" pos:column="14"/></operator> <literal type="char" pos:line="79" pos:column="15">'\0'<pos:position pos:line="79" pos:column="19"/></literal></expr>;<pos:position pos:line="79" pos:column="20"/></expr_stmt></block></then></if>

    <expr_stmt><expr><name><name pos:line="81" pos:column="5">conn<pos:position pos:line="81" pos:column="9"/></name><operator pos:line="81" pos:column="9">-&gt;<pos:position pos:line="81" pos:column="14"/></operator><name pos:line="81" pos:column="11">remote_logname<pos:position pos:line="81" pos:column="25"/></name></name> <operator pos:line="81" pos:column="26">=<pos:position pos:line="81" pos:column="27"/></operator> <call><name pos:line="81" pos:column="28">apr_pstrdup<pos:position pos:line="81" pos:column="39"/></name><argument_list pos:line="81" pos:column="39">(<argument><expr><name><name pos:line="81" pos:column="40">conn<pos:position pos:line="81" pos:column="44"/></name><operator pos:line="81" pos:column="44">-&gt;<pos:position pos:line="81" pos:column="49"/></operator><name pos:line="81" pos:column="46">pool<pos:position pos:line="81" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="52">user<pos:position pos:line="81" pos:column="56"/></name></expr></argument>)<pos:position pos:line="81" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="58"/></expr_stmt>

    <return pos:line="83" pos:column="5">return <expr><name pos:line="83" pos:column="12">APR_SUCCESS<pos:position pos:line="83" pos:column="23"/></name></expr>;<pos:position pos:line="83" pos:column="24"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
