<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1994_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">comp_urlmap<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">cmd_parms<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">cmd<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">urlmap<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">newmap<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
                               <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">from<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <name pos:line="2" pos:column="56">char<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">to<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
                               <parameter><decl><type><specifier pos:line="3" pos:column="32">const<pos:position pos:line="3" pos:column="37"/></specifier> <name pos:line="3" pos:column="38">char<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">flags<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="51">const<pos:position pos:line="3" pos:column="56"/></specifier> <name pos:line="3" pos:column="57">char<pos:position pos:line="3" pos:column="61"/></name> <modifier pos:line="3" pos:column="62">*<pos:position pos:line="3" pos:column="63"/></modifier></type><name pos:line="3" pos:column="63">cond<pos:position pos:line="3" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="68"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">err<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name pos:line="5" pos:column="23">NULL<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <expr_stmt><expr><name><name pos:line="6" pos:column="5">newmap<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">flags<pos:position pos:line="6" pos:column="18"/></name></name>
        <operator pos:line="7" pos:column="9">=<pos:position pos:line="7" pos:column="10"/></operator> <call><name pos:line="7" pos:column="11">XREGFLAG<pos:position pos:line="7" pos:column="19"/></name><argument_list pos:line="7" pos:column="19">(<argument><expr><name pos:line="7" pos:column="20">M_HTML<pos:position pos:line="7" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="7" pos:column="27">flags<pos:position pos:line="7" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="7" pos:column="33">'h'<pos:position pos:line="7" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call>
        <operator pos:line="8" pos:column="9">|<pos:position pos:line="8" pos:column="10"/></operator> <call><name pos:line="8" pos:column="11">XREGFLAG<pos:position pos:line="8" pos:column="19"/></name><argument_list pos:line="8" pos:column="19">(<argument><expr><name pos:line="8" pos:column="20">M_EVENTS<pos:position pos:line="8" pos:column="28"/></name></expr></argument>,<argument><expr><name pos:line="8" pos:column="29">flags<pos:position pos:line="8" pos:column="34"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="8" pos:column="35">'e'<pos:position pos:line="8" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="39"/></argument_list></call>
        <operator pos:line="9" pos:column="9">|<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">XREGFLAG<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">M_CDATA<pos:position pos:line="9" pos:column="27"/></name></expr></argument>,<argument><expr><name pos:line="9" pos:column="28">flags<pos:position pos:line="9" pos:column="33"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="9" pos:column="34">'c'<pos:position pos:line="9" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call>
        <operator pos:line="10" pos:column="9">|<pos:position pos:line="10" pos:column="10"/></operator> <call><name pos:line="10" pos:column="11">REGFLAG<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><name pos:line="10" pos:column="19">M_ATSTART<pos:position pos:line="10" pos:column="28"/></name></expr></argument>,<argument><expr><name pos:line="10" pos:column="29">flags<pos:position pos:line="10" pos:column="34"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="10" pos:column="35">'^'<pos:position pos:line="10" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="39"/></argument_list></call>
        <operator pos:line="11" pos:column="9">|<pos:position pos:line="11" pos:column="10"/></operator> <call><name pos:line="11" pos:column="11">REGFLAG<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">M_ATEND<pos:position pos:line="11" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="11" pos:column="27">flags<pos:position pos:line="11" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="11" pos:column="33">'$'<pos:position pos:line="11" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call>
        <operator pos:line="12" pos:column="9">|<pos:position pos:line="12" pos:column="10"/></operator> <call><name pos:line="12" pos:column="11">REGFLAG<pos:position pos:line="12" pos:column="18"/></name><argument_list pos:line="12" pos:column="18">(<argument><expr><name pos:line="12" pos:column="19">M_REGEX<pos:position pos:line="12" pos:column="26"/></name></expr></argument>,<argument><expr><name pos:line="12" pos:column="27">flags<pos:position pos:line="12" pos:column="32"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="12" pos:column="33">'R'<pos:position pos:line="12" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call>
        <operator pos:line="13" pos:column="9">|<pos:position pos:line="13" pos:column="10"/></operator> <call><name pos:line="13" pos:column="11">REGFLAG<pos:position pos:line="13" pos:column="18"/></name><argument_list pos:line="13" pos:column="18">(<argument><expr><name pos:line="13" pos:column="19">M_LAST<pos:position pos:line="13" pos:column="25"/></name></expr></argument>,<argument><expr><name pos:line="13" pos:column="26">flags<pos:position pos:line="13" pos:column="31"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="13" pos:column="32">'L'<pos:position pos:line="13" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call>
        <operator pos:line="14" pos:column="9">|<pos:position pos:line="14" pos:column="10"/></operator> <call><name pos:line="14" pos:column="11">REGFLAG<pos:position pos:line="14" pos:column="18"/></name><argument_list pos:line="14" pos:column="18">(<argument><expr><name pos:line="14" pos:column="19">M_NOTLAST<pos:position pos:line="14" pos:column="28"/></name></expr></argument>,<argument><expr><name pos:line="14" pos:column="29">flags<pos:position pos:line="14" pos:column="34"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="14" pos:column="35">'l'<pos:position pos:line="14" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="39"/></argument_list></call>
        <operator pos:line="15" pos:column="9">|<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">REGFLAG<pos:position pos:line="15" pos:column="18"/></name><argument_list pos:line="15" pos:column="18">(<argument><expr><name pos:line="15" pos:column="19">M_INTERPOLATE_TO<pos:position pos:line="15" pos:column="35"/></name></expr></argument>,<argument><expr><name pos:line="15" pos:column="36">flags<pos:position pos:line="15" pos:column="41"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="15" pos:column="42">'V'<pos:position pos:line="15" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call>
        <operator pos:line="16" pos:column="9">|<pos:position pos:line="16" pos:column="10"/></operator> <call><name pos:line="16" pos:column="11">REGFLAG<pos:position pos:line="16" pos:column="18"/></name><argument_list pos:line="16" pos:column="18">(<argument><expr><name pos:line="16" pos:column="19">M_INTERPOLATE_FROM<pos:position pos:line="16" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="16" pos:column="38">flags<pos:position pos:line="16" pos:column="43"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="16" pos:column="44">'v'<pos:position pos:line="16" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="49"/></expr_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">(<pos:position pos:line="18" pos:column="10"/></operator><name><name pos:line="18" pos:column="10">newmap<pos:position pos:line="18" pos:column="16"/></name><operator pos:line="18" pos:column="16">-&gt;<pos:position pos:line="18" pos:column="21"/></operator><name pos:line="18" pos:column="18">flags<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">&amp;<pos:position pos:line="18" pos:column="29"/></operator> <name pos:line="18" pos:column="26">M_INTERPOLATE_FROM<pos:position pos:line="18" pos:column="44"/></name><operator pos:line="18" pos:column="44">)<pos:position pos:line="18" pos:column="45"/></operator> <operator pos:line="18" pos:column="46">||<pos:position pos:line="18" pos:column="48"/></operator> <operator pos:line="18" pos:column="49">!<pos:position pos:line="18" pos:column="50"/></operator><operator pos:line="18" pos:column="50">(<pos:position pos:line="18" pos:column="51"/></operator><name><name pos:line="18" pos:column="51">newmap<pos:position pos:line="18" pos:column="57"/></name><operator pos:line="18" pos:column="57">-&gt;<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="59">flags<pos:position pos:line="18" pos:column="64"/></name></name> <operator pos:line="18" pos:column="65">&amp;<pos:position pos:line="18" pos:column="70"/></operator> <name pos:line="18" pos:column="67">M_REGEX<pos:position pos:line="18" pos:column="74"/></name><operator pos:line="18" pos:column="74">)<pos:position pos:line="18" pos:column="75"/></operator></expr>)<pos:position pos:line="18" pos:column="76"/></condition><then pos:line="18" pos:column="76"> <block pos:line="18" pos:column="77">{
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">newmap<pos:position pos:line="19" pos:column="15"/></name><operator pos:line="19" pos:column="15">-&gt;<pos:position pos:line="19" pos:column="20"/></operator><name pos:line="19" pos:column="17">from<pos:position pos:line="19" pos:column="21"/></name><operator pos:line="19" pos:column="21">.<pos:position pos:line="19" pos:column="22"/></operator><name pos:line="19" pos:column="22">c<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">from<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="20" pos:column="9">newmap<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">-&gt;<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="17">to<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">to<pos:position pos:line="20" pos:column="24"/></name></expr>;<pos:position pos:line="20" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then>
    <else pos:line="22" pos:column="5">else <block pos:line="22" pos:column="10">{
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">newmap<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">-&gt;<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="17">regflags<pos:position pos:line="23" pos:column="25"/></name></name>
            <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <call><name pos:line="24" pos:column="15">REGFLAG<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name pos:line="24" pos:column="23">AP_REG_EXTENDED<pos:position pos:line="24" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="24" pos:column="39">flags<pos:position pos:line="24" pos:column="44"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="24" pos:column="45">'x'<pos:position pos:line="24" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call>
            <operator pos:line="25" pos:column="13">|<pos:position pos:line="25" pos:column="14"/></operator> <call><name pos:line="25" pos:column="15">REGFLAG<pos:position pos:line="25" pos:column="22"/></name><argument_list pos:line="25" pos:column="22">(<argument><expr><name pos:line="25" pos:column="23">AP_REG_ICASE<pos:position pos:line="25" pos:column="35"/></name></expr></argument>,<argument><expr><name pos:line="25" pos:column="36">flags<pos:position pos:line="25" pos:column="41"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="25" pos:column="42">'i'<pos:position pos:line="25" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="46"/></argument_list></call>
            <operator pos:line="26" pos:column="13">|<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">REGFLAG<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">AP_REG_NOSUB<pos:position pos:line="26" pos:column="35"/></name></expr></argument>,<argument><expr><name pos:line="26" pos:column="36">flags<pos:position pos:line="26" pos:column="41"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="26" pos:column="42">'n'<pos:position pos:line="26" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="46"/></argument_list></call>
            <operator pos:line="27" pos:column="13">|<pos:position pos:line="27" pos:column="14"/></operator> <call><name pos:line="27" pos:column="15">REGFLAG<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">AP_REG_NEWLINE<pos:position pos:line="27" pos:column="37"/></name></expr></argument>,<argument><expr><name pos:line="27" pos:column="38">flags<pos:position pos:line="27" pos:column="43"/></name></expr></argument>,<argument><expr><literal type="char" pos:line="27" pos:column="44">'s'<pos:position pos:line="27" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">newmap<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">from<pos:position pos:line="28" pos:column="21"/></name><operator pos:line="28" pos:column="21">.<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="22">r<pos:position pos:line="28" pos:column="23"/></name></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <call><name pos:line="28" pos:column="26">ap_pregcomp<pos:position pos:line="28" pos:column="37"/></name><argument_list pos:line="28" pos:column="37">(<argument><expr><name><name pos:line="28" pos:column="38">cmd<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">-&gt;<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="43">pool<pos:position pos:line="28" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="49">from<pos:position pos:line="28" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="55">newmap<pos:position pos:line="28" pos:column="61"/></name><operator pos:line="28" pos:column="61">-&gt;<pos:position pos:line="28" pos:column="66"/></operator><name pos:line="28" pos:column="63">regflags<pos:position pos:line="28" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">newmap<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">to<pos:position pos:line="29" pos:column="19"/></name></name> <operator pos:line="29" pos:column="20">=<pos:position pos:line="29" pos:column="21"/></operator> <name pos:line="29" pos:column="22">to<pos:position pos:line="29" pos:column="24"/></name></expr>;<pos:position pos:line="29" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></else></if>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">cond<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">!=<pos:position pos:line="31" pos:column="16"/></operator> <name pos:line="31" pos:column="17">NULL<pos:position pos:line="31" pos:column="21"/></name></expr>)<pos:position pos:line="31" pos:column="22"/></condition><then pos:line="31" pos:column="22"> <block pos:line="31" pos:column="23">{
        <comment type="block" pos:line="32" pos:column="9">/* back-compatibility: support old-style ENV expressions
         * by converting to ap_expr syntax.
         *
         * 1. var --&gt; env(var)
         * 2. var=val --&gt; env(var)=val
         * 3. !var --&gt; !env(var)
         * 4. !var=val --&gt; env(var)!=val
         */</comment>
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">char<pos:position pos:line="40" pos:column="13"/></name> <modifier pos:line="40" pos:column="14">*<pos:position pos:line="40" pos:column="15"/></modifier></type><name pos:line="40" pos:column="15">newcond<pos:position pos:line="40" pos:column="22"/></name> <init pos:line="40" pos:column="23">= <expr><name pos:line="40" pos:column="25">NULL<pos:position pos:line="40" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="30"/></decl_stmt>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><call><name pos:line="41" pos:column="13">ap_rxplus_exec<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name><name pos:line="41" pos:column="28">cmd<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">-&gt;<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="33">temp_pool<pos:position pos:line="41" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="44">old_expr<pos:position pos:line="41" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="54">cond<pos:position pos:line="41" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="60">&amp;<pos:position pos:line="41" pos:column="65"/></operator><name pos:line="41" pos:column="61">newcond<pos:position pos:line="41" pos:column="68"/></name></expr></argument>)<pos:position pos:line="41" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="70"/></condition><then pos:line="41" pos:column="70"> <block pos:line="41" pos:column="71">{
           <comment type="block" pos:line="42" pos:column="12">/* we got a substitution.  Check for the case (3) above
            * that the regexp gets wrong: a negation without a comparison.
            */</comment>
            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><operator pos:line="45" pos:column="17">(<pos:position pos:line="45" pos:column="18"/></operator><name><name pos:line="45" pos:column="18">cond<pos:position pos:line="45" pos:column="22"/></name><index pos:line="45" pos:column="22">[<expr><literal type="number" pos:line="45" pos:column="23">0<pos:position pos:line="45" pos:column="24"/></literal></expr>]<pos:position pos:line="45" pos:column="25"/></index></name> <operator pos:line="45" pos:column="26">==<pos:position pos:line="45" pos:column="28"/></operator> <literal type="char" pos:line="45" pos:column="29">'!'<pos:position pos:line="45" pos:column="32"/></literal><operator pos:line="45" pos:column="32">)<pos:position pos:line="45" pos:column="33"/></operator> <operator pos:line="45" pos:column="34">&amp;&amp;<pos:position pos:line="45" pos:column="44"/></operator> <operator pos:line="45" pos:column="37">!<pos:position pos:line="45" pos:column="38"/></operator><call><name pos:line="45" pos:column="38">ap_strchr_c<pos:position pos:line="45" pos:column="49"/></name><argument_list pos:line="45" pos:column="49">(<argument><expr><name pos:line="45" pos:column="50">cond<pos:position pos:line="45" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="45" pos:column="56">'='<pos:position pos:line="45" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="61"/></condition><then pos:line="45" pos:column="61"> <block pos:line="45" pos:column="62">{
                <expr_stmt><expr><call><name pos:line="46" pos:column="17">memmove<pos:position pos:line="46" pos:column="24"/></name><argument_list pos:line="46" pos:column="24">(<argument><expr><name pos:line="46" pos:column="25">newcond<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">+<pos:position pos:line="46" pos:column="33"/></operator><literal type="number" pos:line="46" pos:column="33">1<pos:position pos:line="46" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="36">newcond<pos:position pos:line="46" pos:column="43"/></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="45">strlen<pos:position pos:line="46" pos:column="51"/></name><argument_list pos:line="46" pos:column="51">(<argument><expr><name pos:line="46" pos:column="52">newcond<pos:position pos:line="46" pos:column="59"/></name></expr></argument>)<pos:position pos:line="46" pos:column="60"/></argument_list></call><operator pos:line="46" pos:column="60">-<pos:position pos:line="46" pos:column="61"/></operator><literal type="number" pos:line="46" pos:column="61">1<pos:position pos:line="46" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="64"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="47" pos:column="17">newcond<pos:position pos:line="47" pos:column="24"/></name><index pos:line="47" pos:column="24">[<expr><literal type="number" pos:line="47" pos:column="25">0<pos:position pos:line="47" pos:column="26"/></literal></expr>]<pos:position pos:line="47" pos:column="27"/></index></name> <operator pos:line="47" pos:column="28">=<pos:position pos:line="47" pos:column="29"/></operator> <literal type="char" pos:line="47" pos:column="30">'!'<pos:position pos:line="47" pos:column="33"/></literal></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="48" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="49" pos:column="13">cond<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">newcond<pos:position pos:line="49" pos:column="27"/></name></expr>;<pos:position pos:line="49" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="51" pos:column="9">newmap<pos:position pos:line="51" pos:column="15"/></name><operator pos:line="51" pos:column="15">-&gt;<pos:position pos:line="51" pos:column="20"/></operator><name pos:line="51" pos:column="17">cond<pos:position pos:line="51" pos:column="21"/></name></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <call><name pos:line="51" pos:column="24">ap_expr_parse_cmd<pos:position pos:line="51" pos:column="41"/></name><argument_list pos:line="51" pos:column="41">(<argument><expr><name pos:line="51" pos:column="42">cmd<pos:position pos:line="51" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="47">cond<pos:position pos:line="51" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="53">0<pos:position pos:line="51" pos:column="54"/></literal></expr></argument>, <argument><expr><operator pos:line="51" pos:column="56">&amp;<pos:position pos:line="51" pos:column="61"/></operator><name pos:line="51" pos:column="57">err<pos:position pos:line="51" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="62">NULL<pos:position pos:line="51" pos:column="66"/></name></expr></argument>)<pos:position pos:line="51" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="68"/></expr_stmt>
    }<pos:position pos:line="52" pos:column="6"/></block></then>
    <else pos:line="53" pos:column="5">else <block pos:line="53" pos:column="10">{
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">newmap<pos:position pos:line="54" pos:column="15"/></name><operator pos:line="54" pos:column="15">-&gt;<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="17">cond<pos:position pos:line="54" pos:column="21"/></name></name> <operator pos:line="54" pos:column="22">=<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="24">NULL<pos:position pos:line="54" pos:column="28"/></name></expr>;<pos:position pos:line="54" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>
    <return pos:line="56" pos:column="5">return <expr><name pos:line="56" pos:column="12">err<pos:position pos:line="56" pos:column="15"/></name></expr>;<pos:position pos:line="56" pos:column="16"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
