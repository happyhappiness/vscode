<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1500_httpd-2.2.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">proxy_interpolate<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">request_rec<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">r<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">str<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="block" pos:line="3" pos:column="5">/* Interpolate an env str in a configuration string
     * Syntax ${var} --&gt; value_of(var)
     * Method: replace one var, and recurse on remainder of string
     * Nothing clever here, and crap like nested vars may do silly things
     * but we'll at least avoid sending the unwary into a loop
     */</comment>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">start<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">end<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">char<pos:position pos:line="11" pos:column="15"/></name> <modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier></type><name pos:line="11" pos:column="17">var<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">val<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="13" pos:column="5">const<pos:position pos:line="13" pos:column="10"/></specifier> <name pos:line="13" pos:column="11">char<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">firstpart<pos:position pos:line="13" pos:column="26"/></name></decl>;<pos:position pos:line="13" pos:column="27"/></decl_stmt>

    <expr_stmt><expr><name pos:line="15" pos:column="5">start<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">=<pos:position pos:line="15" pos:column="12"/></operator> <call><name pos:line="15" pos:column="13">ap_strstr_c<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">str<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="30">"${"<pos:position pos:line="15" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">start<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">==<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="18">NULL<pos:position pos:line="16" pos:column="22"/></name></expr>)<pos:position pos:line="16" pos:column="23"/></condition><then pos:line="16" pos:column="23"> <block pos:line="16" pos:column="24">{
        <return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">str<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="19" pos:column="5">end<pos:position pos:line="19" pos:column="8"/></name> <operator pos:line="19" pos:column="9">=<pos:position pos:line="19" pos:column="10"/></operator> <call><name pos:line="19" pos:column="11">ap_strchr_c<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">start<pos:position pos:line="19" pos:column="28"/></name><operator pos:line="19" pos:column="28">+<pos:position pos:line="19" pos:column="29"/></operator><literal type="number" pos:line="19" pos:column="29">2<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="19" pos:column="32">'}'<pos:position pos:line="19" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">end<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">==<pos:position pos:line="20" pos:column="15"/></operator> <name pos:line="20" pos:column="16">NULL<pos:position pos:line="20" pos:column="20"/></name></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21"> <block pos:line="20" pos:column="22">{
        <return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">str<pos:position pos:line="21" pos:column="19"/></name></expr>;<pos:position pos:line="21" pos:column="20"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="23" pos:column="5">/* OK, this is syntax we want to interpolate.  Is there such a var ? */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">var<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">=<pos:position pos:line="24" pos:column="10"/></operator> <call><name pos:line="24" pos:column="11">apr_pstrndup<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><name><name pos:line="24" pos:column="24">r<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">-&gt;<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="27">pool<pos:position pos:line="24" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="33">start<pos:position pos:line="24" pos:column="38"/></name><operator pos:line="24" pos:column="38">+<pos:position pos:line="24" pos:column="39"/></operator><literal type="number" pos:line="24" pos:column="39">2<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="42">end<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">-<pos:position pos:line="24" pos:column="46"/></operator><operator pos:line="24" pos:column="46">(<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="47">start<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">+<pos:position pos:line="24" pos:column="53"/></operator><literal type="number" pos:line="24" pos:column="53">2<pos:position pos:line="24" pos:column="54"/></literal><operator pos:line="24" pos:column="54">)<pos:position pos:line="24" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">val<pos:position pos:line="25" pos:column="8"/></name> <operator pos:line="25" pos:column="9">=<pos:position pos:line="25" pos:column="10"/></operator> <call><name pos:line="25" pos:column="11">apr_table_get<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><name><name pos:line="25" pos:column="25">r<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-&gt;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="28">subprocess_env<pos:position pos:line="25" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="44">var<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">firstpart<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <call><name pos:line="26" pos:column="17">apr_pstrndup<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name><name pos:line="26" pos:column="30">r<pos:position pos:line="26" pos:column="31"/></name><operator pos:line="26" pos:column="31">-&gt;<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="33">pool<pos:position pos:line="26" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="39">str<pos:position pos:line="26" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="44">(<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="45">start<pos:position pos:line="26" pos:column="50"/></name><operator pos:line="26" pos:column="50">-<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="51">str<pos:position pos:line="26" pos:column="54"/></name><operator pos:line="26" pos:column="54">)<pos:position pos:line="26" pos:column="55"/></operator></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="57"/></expr_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">val<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">==<pos:position pos:line="28" pos:column="15"/></operator> <name pos:line="28" pos:column="16">NULL<pos:position pos:line="28" pos:column="20"/></name></expr>)<pos:position pos:line="28" pos:column="21"/></condition><then pos:line="28" pos:column="21"> <block pos:line="28" pos:column="22">{
        <return pos:line="29" pos:column="9">return <expr><call><name pos:line="29" pos:column="16">apr_pstrcat<pos:position pos:line="29" pos:column="27"/></name><argument_list pos:line="29" pos:column="27">(<argument><expr><name><name pos:line="29" pos:column="28">r<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">-&gt;<pos:position pos:line="29" pos:column="34"/></operator><name pos:line="29" pos:column="31">pool<pos:position pos:line="29" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="37">firstpart<pos:position pos:line="29" pos:column="46"/></name></expr></argument>,
                           <argument><expr><call><name pos:line="30" pos:column="28">proxy_interpolate<pos:position pos:line="30" pos:column="45"/></name><argument_list pos:line="30" pos:column="45">(<argument><expr><name pos:line="30" pos:column="46">r<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">end<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">+<pos:position pos:line="30" pos:column="53"/></operator><literal type="number" pos:line="30" pos:column="53">1<pos:position pos:line="30" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="30" pos:column="57">NULL<pos:position pos:line="30" pos:column="61"/></name></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="63"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then>
    <else pos:line="32" pos:column="5">else <block pos:line="32" pos:column="10">{
        <return pos:line="33" pos:column="9">return <expr><call><name pos:line="33" pos:column="16">apr_pstrcat<pos:position pos:line="33" pos:column="27"/></name><argument_list pos:line="33" pos:column="27">(<argument><expr><name><name pos:line="33" pos:column="28">r<pos:position pos:line="33" pos:column="29"/></name><operator pos:line="33" pos:column="29">-&gt;<pos:position pos:line="33" pos:column="34"/></operator><name pos:line="33" pos:column="31">pool<pos:position pos:line="33" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">firstpart<pos:position pos:line="33" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="48">val<pos:position pos:line="33" pos:column="51"/></name></expr></argument>,
                           <argument><expr><call><name pos:line="34" pos:column="28">proxy_interpolate<pos:position pos:line="34" pos:column="45"/></name><argument_list pos:line="34" pos:column="45">(<argument><expr><name pos:line="34" pos:column="46">r<pos:position pos:line="34" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="49">end<pos:position pos:line="34" pos:column="52"/></name><operator pos:line="34" pos:column="52">+<pos:position pos:line="34" pos:column="53"/></operator><literal type="number" pos:line="34" pos:column="53">1<pos:position pos:line="34" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="55"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="34" pos:column="57">NULL<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="63"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></else></if>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
