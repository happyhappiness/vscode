<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1492_httpd-2.2.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">proxy_trans<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">request_rec<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">r<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">void<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">sconf<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name><name pos:line="3" pos:column="19">r<pos:position pos:line="3" pos:column="20"/></name><operator pos:line="3" pos:column="20">-&gt;<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="22">server<pos:position pos:line="3" pos:column="28"/></name><operator pos:line="3" pos:column="28">-&gt;<pos:position pos:line="3" pos:column="33"/></operator><name pos:line="3" pos:column="30">module_config<pos:position pos:line="3" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">proxy_server_conf<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">conf<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">=
    <expr><operator pos:line="5" pos:column="5">(<pos:position pos:line="5" pos:column="6"/></operator><name pos:line="5" pos:column="6">proxy_server_conf<pos:position pos:line="5" pos:column="23"/></name> <operator pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></operator><operator pos:line="5" pos:column="25">)<pos:position pos:line="5" pos:column="26"/></operator> <call><name pos:line="5" pos:column="27">ap_get_module_config<pos:position pos:line="5" pos:column="47"/></name><argument_list pos:line="5" pos:column="47">(<argument><expr><name pos:line="5" pos:column="48">sconf<pos:position pos:line="5" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="5" pos:column="55">&amp;<pos:position pos:line="5" pos:column="60"/></operator><name pos:line="5" pos:column="56">proxy_module<pos:position pos:line="5" pos:column="68"/></name></expr></argument>)<pos:position pos:line="5" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="70"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">i<pos:position pos:line="6" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="12">len<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">proxy_alias<pos:position pos:line="7" pos:column="23"/></name></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">ent<pos:position pos:line="7" pos:column="28"/></name> <init pos:line="7" pos:column="29">= <expr><operator pos:line="7" pos:column="31">(<pos:position pos:line="7" pos:column="32"/></operator>struct <name pos:line="7" pos:column="39">proxy_alias<pos:position pos:line="7" pos:column="50"/></name> <operator pos:line="7" pos:column="51">*<pos:position pos:line="7" pos:column="52"/></operator><operator pos:line="7" pos:column="52">)<pos:position pos:line="7" pos:column="53"/></operator> <name><name pos:line="7" pos:column="54">conf<pos:position pos:line="7" pos:column="58"/></name><operator pos:line="7" pos:column="58">-&gt;<pos:position pos:line="7" pos:column="63"/></operator><name pos:line="7" pos:column="60">aliases<pos:position pos:line="7" pos:column="67"/></name><operator pos:line="7" pos:column="67">-&gt;<pos:position pos:line="7" pos:column="72"/></operator><name pos:line="7" pos:column="69">elts<pos:position pos:line="7" pos:column="73"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="74"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">proxy_dir_conf<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">dconf<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><call><name pos:line="8" pos:column="29">ap_get_module_config<pos:position pos:line="8" pos:column="49"/></name><argument_list pos:line="8" pos:column="49">(<argument><expr><name><name pos:line="8" pos:column="50">r<pos:position pos:line="8" pos:column="51"/></name><operator pos:line="8" pos:column="51">-&gt;<pos:position pos:line="8" pos:column="56"/></operator><name pos:line="8" pos:column="53">per_dir_config<pos:position pos:line="8" pos:column="67"/></name></name></expr></argument>,
                                                 <argument><expr><operator pos:line="9" pos:column="50">&amp;<pos:position pos:line="9" pos:column="55"/></operator><name pos:line="9" pos:column="51">proxy_module<pos:position pos:line="9" pos:column="63"/></name></expr></argument>)<pos:position pos:line="9" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="65"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">fake<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="11" pos:column="5">const<pos:position pos:line="11" pos:column="10"/></specifier> <name pos:line="11" pos:column="11">char<pos:position pos:line="11" pos:column="15"/></name> <modifier pos:line="11" pos:column="16">*<pos:position pos:line="11" pos:column="17"/></modifier></type><name pos:line="11" pos:column="17">real<pos:position pos:line="11" pos:column="21"/></name></decl>;<pos:position pos:line="11" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">ap_regmatch_t<pos:position pos:line="12" pos:column="18"/></name></type> <name><name pos:line="12" pos:column="19">regm<pos:position pos:line="12" pos:column="23"/></name><index pos:line="12" pos:column="23">[<expr><name pos:line="12" pos:column="24">AP_MAX_REG_MATCH<pos:position pos:line="12" pos:column="40"/></name></expr>]<pos:position pos:line="12" pos:column="41"/></index></name></decl>;<pos:position pos:line="12" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">ap_regmatch_t<pos:position pos:line="13" pos:column="18"/></name></type> <name><name pos:line="13" pos:column="19">reg1<pos:position pos:line="13" pos:column="23"/></name><index pos:line="13" pos:column="23">[<expr><name pos:line="13" pos:column="24">AP_MAX_REG_MATCH<pos:position pos:line="13" pos:column="40"/></name></expr>]<pos:position pos:line="13" pos:column="41"/></index></name></decl>;<pos:position pos:line="13" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">char<pos:position pos:line="14" pos:column="9"/></name> <modifier pos:line="14" pos:column="10">*<pos:position pos:line="14" pos:column="11"/></modifier></type><name pos:line="14" pos:column="11">found<pos:position pos:line="14" pos:column="16"/></name> <init pos:line="14" pos:column="17">= <expr><name pos:line="14" pos:column="19">NULL<pos:position pos:line="14" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">mismatch<pos:position pos:line="15" pos:column="17"/></name> <init pos:line="15" pos:column="18">= <expr><literal type="number" pos:line="15" pos:column="20">0<pos:position pos:line="15" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="22"/></decl_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">r<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">proxyreq<pos:position pos:line="17" pos:column="20"/></name></name></expr>)<pos:position pos:line="17" pos:column="21"/></condition><then pos:line="17" pos:column="21"> <block pos:line="17" pos:column="22">{
        <comment type="block" pos:line="18" pos:column="9">/* someone has already set up the proxy, it was possibly ourselves
         * in proxy_detect
         */</comment>
        <return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">OK<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/* XXX: since r-&gt;uri has been manipulated already we're not really
     * compliant with RFC1945 at this point.  But this probably isn't
     * an issue because this is a hybrid proxy/origin server.
     */</comment>

    <for pos:line="29" pos:column="5">for <control pos:line="29" pos:column="9">(<init><expr><name pos:line="29" pos:column="10">i<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <literal type="number" pos:line="29" pos:column="14">0<pos:position pos:line="29" pos:column="15"/></literal></expr>;<pos:position pos:line="29" pos:column="16"/></init> <condition><expr><name pos:line="29" pos:column="17">i<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">&lt;<pos:position pos:line="29" pos:column="23"/></operator> <name><name pos:line="29" pos:column="21">conf<pos:position pos:line="29" pos:column="25"/></name><operator pos:line="29" pos:column="25">-&gt;<pos:position pos:line="29" pos:column="30"/></operator><name pos:line="29" pos:column="27">aliases<pos:position pos:line="29" pos:column="34"/></name><operator pos:line="29" pos:column="34">-&gt;<pos:position pos:line="29" pos:column="39"/></operator><name pos:line="29" pos:column="36">nelts<pos:position pos:line="29" pos:column="41"/></name></name></expr>;<pos:position pos:line="29" pos:column="42"/></condition> <incr><expr><name pos:line="29" pos:column="43">i<pos:position pos:line="29" pos:column="44"/></name><operator pos:line="29" pos:column="44">++<pos:position pos:line="29" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="47"/></control> <block pos:line="29" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">unsigned<pos:position pos:line="30" pos:column="17"/></name> <name pos:line="30" pos:column="18">int<pos:position pos:line="30" pos:column="21"/></name></type> <name pos:line="30" pos:column="22">nocanon<pos:position pos:line="30" pos:column="29"/></name> <init pos:line="30" pos:column="30">= <expr><name><name pos:line="30" pos:column="32">ent<pos:position pos:line="30" pos:column="35"/></name><index pos:line="30" pos:column="35">[<expr><name pos:line="30" pos:column="36">i<pos:position pos:line="30" pos:column="37"/></name></expr>]<pos:position pos:line="30" pos:column="38"/></index></name><operator pos:line="30" pos:column="38">.<pos:position pos:line="30" pos:column="39"/></operator><name pos:line="30" pos:column="39">flags<pos:position pos:line="30" pos:column="44"/></name> <operator pos:line="30" pos:column="45">&amp;<pos:position pos:line="30" pos:column="50"/></operator> <name pos:line="30" pos:column="47">PROXYPASS_NOCANON<pos:position pos:line="30" pos:column="64"/></name></expr></init></decl>;<pos:position pos:line="30" pos:column="65"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="31" pos:column="9">const<pos:position pos:line="31" pos:column="14"/></specifier> <name pos:line="31" pos:column="15">char<pos:position pos:line="31" pos:column="19"/></name> <modifier pos:line="31" pos:column="20">*<pos:position pos:line="31" pos:column="21"/></modifier></type><name pos:line="31" pos:column="21">use_uri<pos:position pos:line="31" pos:column="28"/></name> <init pos:line="31" pos:column="29">= <expr><ternary><condition><expr><name pos:line="31" pos:column="31">nocanon<pos:position pos:line="31" pos:column="38"/></name></expr> ?<pos:position pos:line="31" pos:column="40"/></condition><then pos:line="31" pos:column="40"> <expr><name><name pos:line="31" pos:column="41">r<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">-&gt;<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="44">unparsed_uri<pos:position pos:line="31" pos:column="56"/></name></name></expr> <pos:position pos:line="31" pos:column="57"/></then><else pos:line="31" pos:column="57">: <expr><name><name pos:line="31" pos:column="59">r<pos:position pos:line="31" pos:column="60"/></name><operator pos:line="31" pos:column="60">-&gt;<pos:position pos:line="31" pos:column="65"/></operator><name pos:line="31" pos:column="62">uri<pos:position pos:line="31" pos:column="65"/></name></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="31" pos:column="66"/></decl_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><operator pos:line="32" pos:column="13">(<pos:position pos:line="32" pos:column="14"/></operator><name><name pos:line="32" pos:column="14">dconf<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">interpolate_env<pos:position pos:line="32" pos:column="36"/></name></name> <operator pos:line="32" pos:column="37">==<pos:position pos:line="32" pos:column="39"/></operator> <literal type="number" pos:line="32" pos:column="40">1<pos:position pos:line="32" pos:column="41"/></literal><operator pos:line="32" pos:column="41">)<pos:position pos:line="32" pos:column="42"/></operator>
            <operator pos:line="33" pos:column="13">&amp;&amp;<pos:position pos:line="33" pos:column="23"/></operator> <operator pos:line="33" pos:column="16">(<pos:position pos:line="33" pos:column="17"/></operator><name><name pos:line="33" pos:column="17">ent<pos:position pos:line="33" pos:column="20"/></name><index pos:line="33" pos:column="20">[<expr><name pos:line="33" pos:column="21">i<pos:position pos:line="33" pos:column="22"/></name></expr>]<pos:position pos:line="33" pos:column="23"/></index></name><operator pos:line="33" pos:column="23">.<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="24">flags<pos:position pos:line="33" pos:column="29"/></name> <operator pos:line="33" pos:column="30">&amp;<pos:position pos:line="33" pos:column="35"/></operator> <name pos:line="33" pos:column="32">PROXYPASS_INTERPOLATE<pos:position pos:line="33" pos:column="53"/></name><operator pos:line="33" pos:column="53">)<pos:position pos:line="33" pos:column="54"/></operator></expr>)<pos:position pos:line="33" pos:column="55"/></condition><then pos:line="33" pos:column="55"> <block pos:line="33" pos:column="56">{
            <expr_stmt><expr><name pos:line="34" pos:column="13">fake<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <call><name pos:line="34" pos:column="20">proxy_interpolate<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">r<pos:position pos:line="34" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="41">ent<pos:position pos:line="34" pos:column="44"/></name><index pos:line="34" pos:column="44">[<expr><name pos:line="34" pos:column="45">i<pos:position pos:line="34" pos:column="46"/></name></expr>]<pos:position pos:line="34" pos:column="47"/></index></name><operator pos:line="34" pos:column="47">.<pos:position pos:line="34" pos:column="48"/></operator><name pos:line="34" pos:column="48">fake<pos:position pos:line="34" pos:column="52"/></name></expr></argument>)<pos:position pos:line="34" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><name pos:line="35" pos:column="13">real<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">=<pos:position pos:line="35" pos:column="19"/></operator> <call><name pos:line="35" pos:column="20">proxy_interpolate<pos:position pos:line="35" pos:column="37"/></name><argument_list pos:line="35" pos:column="37">(<argument><expr><name pos:line="35" pos:column="38">r<pos:position pos:line="35" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="41">ent<pos:position pos:line="35" pos:column="44"/></name><index pos:line="35" pos:column="44">[<expr><name pos:line="35" pos:column="45">i<pos:position pos:line="35" pos:column="46"/></name></expr>]<pos:position pos:line="35" pos:column="47"/></index></name><operator pos:line="35" pos:column="47">.<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="48">real<pos:position pos:line="35" pos:column="52"/></name></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then>
        <else pos:line="37" pos:column="9">else <block pos:line="37" pos:column="14">{
            <expr_stmt><expr><name pos:line="38" pos:column="13">fake<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">=<pos:position pos:line="38" pos:column="19"/></operator> <name><name pos:line="38" pos:column="20">ent<pos:position pos:line="38" pos:column="23"/></name><index pos:line="38" pos:column="23">[<expr><name pos:line="38" pos:column="24">i<pos:position pos:line="38" pos:column="25"/></name></expr>]<pos:position pos:line="38" pos:column="26"/></index></name><operator pos:line="38" pos:column="26">.<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="27">fake<pos:position pos:line="38" pos:column="31"/></name></expr>;<pos:position pos:line="38" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><name pos:line="39" pos:column="13">real<pos:position pos:line="39" pos:column="17"/></name> <operator pos:line="39" pos:column="18">=<pos:position pos:line="39" pos:column="19"/></operator> <name><name pos:line="39" pos:column="20">ent<pos:position pos:line="39" pos:column="23"/></name><index pos:line="39" pos:column="23">[<expr><name pos:line="39" pos:column="24">i<pos:position pos:line="39" pos:column="25"/></name></expr>]<pos:position pos:line="39" pos:column="26"/></index></name><operator pos:line="39" pos:column="26">.<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="27">real<pos:position pos:line="39" pos:column="31"/></name></expr>;<pos:position pos:line="39" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></else></if>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name><name pos:line="41" pos:column="13">ent<pos:position pos:line="41" pos:column="16"/></name><index pos:line="41" pos:column="16">[<expr><name pos:line="41" pos:column="17">i<pos:position pos:line="41" pos:column="18"/></name></expr>]<pos:position pos:line="41" pos:column="19"/></index></name><operator pos:line="41" pos:column="19">.<pos:position pos:line="41" pos:column="20"/></operator><name pos:line="41" pos:column="20">regex<pos:position pos:line="41" pos:column="25"/></name></expr>)<pos:position pos:line="41" pos:column="26"/></condition><then pos:line="41" pos:column="26"> <block pos:line="41" pos:column="27">{
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><operator pos:line="42" pos:column="17">!<pos:position pos:line="42" pos:column="18"/></operator><call><name pos:line="42" pos:column="18">ap_regexec<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name><name pos:line="42" pos:column="29">ent<pos:position pos:line="42" pos:column="32"/></name><index pos:line="42" pos:column="32">[<expr><name pos:line="42" pos:column="33">i<pos:position pos:line="42" pos:column="34"/></name></expr>]<pos:position pos:line="42" pos:column="35"/></index></name><operator pos:line="42" pos:column="35">.<pos:position pos:line="42" pos:column="36"/></operator><name pos:line="42" pos:column="36">regex<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="43">r<pos:position pos:line="42" pos:column="44"/></name><operator pos:line="42" pos:column="44">-&gt;<pos:position pos:line="42" pos:column="49"/></operator><name pos:line="42" pos:column="46">uri<pos:position pos:line="42" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="51">AP_MAX_REG_MATCH<pos:position pos:line="42" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="69">regm<pos:position pos:line="42" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="75">0<pos:position pos:line="42" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="77"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="78"/></condition><then pos:line="42" pos:column="78"> <block pos:line="42" pos:column="79">{
                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><operator pos:line="43" pos:column="21">(<pos:position pos:line="43" pos:column="22"/></operator><name><name pos:line="43" pos:column="22">real<pos:position pos:line="43" pos:column="26"/></name><index pos:line="43" pos:column="26">[<expr><literal type="number" pos:line="43" pos:column="27">0<pos:position pos:line="43" pos:column="28"/></literal></expr>]<pos:position pos:line="43" pos:column="29"/></index></name> <operator pos:line="43" pos:column="30">==<pos:position pos:line="43" pos:column="32"/></operator> <literal type="char" pos:line="43" pos:column="33">'!'<pos:position pos:line="43" pos:column="36"/></literal><operator pos:line="43" pos:column="36">)<pos:position pos:line="43" pos:column="37"/></operator> <operator pos:line="43" pos:column="38">&amp;&amp;<pos:position pos:line="43" pos:column="48"/></operator> <operator pos:line="43" pos:column="41">(<pos:position pos:line="43" pos:column="42"/></operator><name><name pos:line="43" pos:column="42">real<pos:position pos:line="43" pos:column="46"/></name><index pos:line="43" pos:column="46">[<expr><literal type="number" pos:line="43" pos:column="47">1<pos:position pos:line="43" pos:column="48"/></literal></expr>]<pos:position pos:line="43" pos:column="49"/></index></name> <operator pos:line="43" pos:column="50">==<pos:position pos:line="43" pos:column="52"/></operator> <literal type="char" pos:line="43" pos:column="53">'\0'<pos:position pos:line="43" pos:column="57"/></literal><operator pos:line="43" pos:column="57">)<pos:position pos:line="43" pos:column="58"/></operator></expr>)<pos:position pos:line="43" pos:column="59"/></condition><then pos:line="43" pos:column="59"> <block pos:line="43" pos:column="60">{
                    <return pos:line="44" pos:column="21">return <expr><name pos:line="44" pos:column="28">DECLINED<pos:position pos:line="44" pos:column="36"/></name></expr>;<pos:position pos:line="44" pos:column="37"/></return>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="46" pos:column="17">/* test that we haven't reduced the URI */</comment>
                <if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">nocanon<pos:position pos:line="47" pos:column="28"/></name> <operator pos:line="47" pos:column="29">&amp;&amp;<pos:position pos:line="47" pos:column="39"/></operator> <call><name pos:line="47" pos:column="32">ap_regexec<pos:position pos:line="47" pos:column="42"/></name><argument_list pos:line="47" pos:column="42">(<argument><expr><name><name pos:line="47" pos:column="43">ent<pos:position pos:line="47" pos:column="46"/></name><index pos:line="47" pos:column="46">[<expr><name pos:line="47" pos:column="47">i<pos:position pos:line="47" pos:column="48"/></name></expr>]<pos:position pos:line="47" pos:column="49"/></index></name><operator pos:line="47" pos:column="49">.<pos:position pos:line="47" pos:column="50"/></operator><name pos:line="47" pos:column="50">regex<pos:position pos:line="47" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="57">r<pos:position pos:line="47" pos:column="58"/></name><operator pos:line="47" pos:column="58">-&gt;<pos:position pos:line="47" pos:column="63"/></operator><name pos:line="47" pos:column="60">unparsed_uri<pos:position pos:line="47" pos:column="72"/></name></name></expr></argument>,
                                          <argument><expr><name pos:line="48" pos:column="43">AP_MAX_REG_MATCH<pos:position pos:line="48" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="61">reg1<pos:position pos:line="48" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="67">0<pos:position pos:line="48" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="70"/></condition><then pos:line="48" pos:column="70"> <block pos:line="48" pos:column="71">{
                    <expr_stmt><expr><name pos:line="49" pos:column="21">mismatch<pos:position pos:line="49" pos:column="29"/></name> <operator pos:line="49" pos:column="30">=<pos:position pos:line="49" pos:column="31"/></operator> <literal type="number" pos:line="49" pos:column="32">1<pos:position pos:line="49" pos:column="33"/></literal></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="50" pos:column="21">use_uri<pos:position pos:line="50" pos:column="28"/></name> <operator pos:line="50" pos:column="29">=<pos:position pos:line="50" pos:column="30"/></operator> <name><name pos:line="50" pos:column="31">r<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">-&gt;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="34">uri<pos:position pos:line="50" pos:column="37"/></name></name></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
                }<pos:position pos:line="51" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="52" pos:column="17">found<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <call><name pos:line="52" pos:column="25">ap_pregsub<pos:position pos:line="52" pos:column="35"/></name><argument_list pos:line="52" pos:column="35">(<argument><expr><name><name pos:line="52" pos:column="36">r<pos:position pos:line="52" pos:column="37"/></name><operator pos:line="52" pos:column="37">-&gt;<pos:position pos:line="52" pos:column="42"/></operator><name pos:line="52" pos:column="39">pool<pos:position pos:line="52" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="45">real<pos:position pos:line="52" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="51">use_uri<pos:position pos:line="52" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="60">AP_MAX_REG_MATCH<pos:position pos:line="52" pos:column="76"/></name></expr></argument>,
                                   <argument><expr><ternary><condition><expr><operator pos:line="53" pos:column="36">(<pos:position pos:line="53" pos:column="37"/></operator><name pos:line="53" pos:column="37">use_uri<pos:position pos:line="53" pos:column="44"/></name> <operator pos:line="53" pos:column="45">==<pos:position pos:line="53" pos:column="47"/></operator> <name><name pos:line="53" pos:column="48">r<pos:position pos:line="53" pos:column="49"/></name><operator pos:line="53" pos:column="49">-&gt;<pos:position pos:line="53" pos:column="54"/></operator><name pos:line="53" pos:column="51">uri<pos:position pos:line="53" pos:column="54"/></name></name><operator pos:line="53" pos:column="54">)<pos:position pos:line="53" pos:column="55"/></operator></expr> ?<pos:position pos:line="53" pos:column="57"/></condition><then pos:line="53" pos:column="57"> <expr><name pos:line="53" pos:column="58">regm<pos:position pos:line="53" pos:column="62"/></name></expr> <pos:position pos:line="53" pos:column="63"/></then><else pos:line="53" pos:column="63">: <expr><name pos:line="53" pos:column="65">reg1<pos:position pos:line="53" pos:column="69"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="53" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="71"/></expr_stmt>
                <comment type="block" pos:line="54" pos:column="17">/* Note: The strcmp() below catches cases where there
                 * was no regex substitution. This is so cases like:
                 *
                 *    ProxyPassMatch \.gif balancer://foo
                 *
                 * will work "as expected". The upshot is that the 2
                 * directives below act the exact same way (ie: $1 is implied):
                 *
                 *    ProxyPassMatch ^(/.*\.gif)$ balancer://foo
                 *    ProxyPassMatch ^(/.*\.gif)$ balancer://foo$1
                 *
                 * which may be confusing.
                 */</comment>
                <if pos:line="67" pos:column="17">if <condition pos:line="67" pos:column="20">(<expr><name pos:line="67" pos:column="21">found<pos:position pos:line="67" pos:column="26"/></name> <operator pos:line="67" pos:column="27">&amp;&amp;<pos:position pos:line="67" pos:column="37"/></operator> <call><name pos:line="67" pos:column="30">strcmp<pos:position pos:line="67" pos:column="36"/></name><argument_list pos:line="67" pos:column="36">(<argument><expr><name pos:line="67" pos:column="37">found<pos:position pos:line="67" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="44">real<pos:position pos:line="67" pos:column="48"/></name></expr></argument>)<pos:position pos:line="67" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="50"/></condition><then pos:line="67" pos:column="50"> <block pos:line="67" pos:column="51">{
                    <expr_stmt><expr><name pos:line="68" pos:column="21">found<pos:position pos:line="68" pos:column="26"/></name> <operator pos:line="68" pos:column="27">=<pos:position pos:line="68" pos:column="28"/></operator> <call><name pos:line="68" pos:column="29">apr_pstrcat<pos:position pos:line="68" pos:column="40"/></name><argument_list pos:line="68" pos:column="40">(<argument><expr><name><name pos:line="68" pos:column="41">r<pos:position pos:line="68" pos:column="42"/></name><operator pos:line="68" pos:column="42">-&gt;<pos:position pos:line="68" pos:column="47"/></operator><name pos:line="68" pos:column="44">pool<pos:position pos:line="68" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="50">"proxy:"<pos:position pos:line="68" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="68" pos:column="60">found<pos:position pos:line="68" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="67">NULL<pos:position pos:line="68" pos:column="71"/></name></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="73"/></expr_stmt>
                }<pos:position pos:line="69" pos:column="18"/></block></then>
                <else pos:line="70" pos:column="17">else <block pos:line="70" pos:column="22">{
                    <expr_stmt><expr><name pos:line="71" pos:column="21">found<pos:position pos:line="71" pos:column="26"/></name> <operator pos:line="71" pos:column="27">=<pos:position pos:line="71" pos:column="28"/></operator> <call><name pos:line="71" pos:column="29">apr_pstrcat<pos:position pos:line="71" pos:column="40"/></name><argument_list pos:line="71" pos:column="40">(<argument><expr><name><name pos:line="71" pos:column="41">r<pos:position pos:line="71" pos:column="42"/></name><operator pos:line="71" pos:column="42">-&gt;<pos:position pos:line="71" pos:column="47"/></operator><name pos:line="71" pos:column="44">pool<pos:position pos:line="71" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="50">"proxy:"<pos:position pos:line="71" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="60">real<pos:position pos:line="71" pos:column="64"/></name></expr></argument>,
                                        <argument><expr><name pos:line="72" pos:column="41">use_uri<pos:position pos:line="72" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="50">NULL<pos:position pos:line="72" pos:column="54"/></name></expr></argument>)<pos:position pos:line="72" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="73" pos:column="18"/></block></else></if>
            }<pos:position pos:line="74" pos:column="14"/></block></then></if>
        }<pos:position pos:line="75" pos:column="10"/></block></then>
        <else pos:line="76" pos:column="9">else <block pos:line="76" pos:column="14">{
            <expr_stmt><expr><name pos:line="77" pos:column="13">len<pos:position pos:line="77" pos:column="16"/></name> <operator pos:line="77" pos:column="17">=<pos:position pos:line="77" pos:column="18"/></operator> <call><name pos:line="77" pos:column="19">alias_match<pos:position pos:line="77" pos:column="30"/></name><argument_list pos:line="77" pos:column="30">(<argument><expr><name><name pos:line="77" pos:column="31">r<pos:position pos:line="77" pos:column="32"/></name><operator pos:line="77" pos:column="32">-&gt;<pos:position pos:line="77" pos:column="37"/></operator><name pos:line="77" pos:column="34">uri<pos:position pos:line="77" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="39">fake<pos:position pos:line="77" pos:column="43"/></name></expr></argument>)<pos:position pos:line="77" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="45"/></expr_stmt>

            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<expr><name pos:line="79" pos:column="17">len<pos:position pos:line="79" pos:column="20"/></name> <operator pos:line="79" pos:column="21">!=<pos:position pos:line="79" pos:column="23"/></operator> <literal type="number" pos:line="79" pos:column="24">0<pos:position pos:line="79" pos:column="25"/></literal></expr>)<pos:position pos:line="79" pos:column="26"/></condition><then pos:line="79" pos:column="26"> <block pos:line="79" pos:column="27">{
                <if pos:line="80" pos:column="17">if <condition pos:line="80" pos:column="20">(<expr><operator pos:line="80" pos:column="21">(<pos:position pos:line="80" pos:column="22"/></operator><name><name pos:line="80" pos:column="22">real<pos:position pos:line="80" pos:column="26"/></name><index pos:line="80" pos:column="26">[<expr><literal type="number" pos:line="80" pos:column="27">0<pos:position pos:line="80" pos:column="28"/></literal></expr>]<pos:position pos:line="80" pos:column="29"/></index></name> <operator pos:line="80" pos:column="30">==<pos:position pos:line="80" pos:column="32"/></operator> <literal type="char" pos:line="80" pos:column="33">'!'<pos:position pos:line="80" pos:column="36"/></literal><operator pos:line="80" pos:column="36">)<pos:position pos:line="80" pos:column="37"/></operator> <operator pos:line="80" pos:column="38">&amp;&amp;<pos:position pos:line="80" pos:column="48"/></operator> <operator pos:line="80" pos:column="41">(<pos:position pos:line="80" pos:column="42"/></operator><name><name pos:line="80" pos:column="42">real<pos:position pos:line="80" pos:column="46"/></name><index pos:line="80" pos:column="46">[<expr><literal type="number" pos:line="80" pos:column="47">1<pos:position pos:line="80" pos:column="48"/></literal></expr>]<pos:position pos:line="80" pos:column="49"/></index></name> <operator pos:line="80" pos:column="50">==<pos:position pos:line="80" pos:column="52"/></operator> <literal type="char" pos:line="80" pos:column="53">'\0'<pos:position pos:line="80" pos:column="57"/></literal><operator pos:line="80" pos:column="57">)<pos:position pos:line="80" pos:column="58"/></operator></expr>)<pos:position pos:line="80" pos:column="59"/></condition><then pos:line="80" pos:column="59"> <block pos:line="80" pos:column="60">{
                    <return pos:line="81" pos:column="21">return <expr><name pos:line="81" pos:column="28">DECLINED<pos:position pos:line="81" pos:column="36"/></name></expr>;<pos:position pos:line="81" pos:column="37"/></return>
                }<pos:position pos:line="82" pos:column="18"/></block></then></if>
                <if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">nocanon<pos:position pos:line="83" pos:column="28"/></name>
                    <operator pos:line="84" pos:column="21">&amp;&amp;<pos:position pos:line="84" pos:column="31"/></operator> <name pos:line="84" pos:column="24">len<pos:position pos:line="84" pos:column="27"/></name> <operator pos:line="84" pos:column="28">!=<pos:position pos:line="84" pos:column="30"/></operator> <call><name pos:line="84" pos:column="31">alias_match<pos:position pos:line="84" pos:column="42"/></name><argument_list pos:line="84" pos:column="42">(<argument><expr><name><name pos:line="84" pos:column="43">r<pos:position pos:line="84" pos:column="44"/></name><operator pos:line="84" pos:column="44">-&gt;<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="46">unparsed_uri<pos:position pos:line="84" pos:column="58"/></name></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="60">ent<pos:position pos:line="84" pos:column="63"/></name><index pos:line="84" pos:column="63">[<expr><name pos:line="84" pos:column="64">i<pos:position pos:line="84" pos:column="65"/></name></expr>]<pos:position pos:line="84" pos:column="66"/></index></name><operator pos:line="84" pos:column="66">.<pos:position pos:line="84" pos:column="67"/></operator><name pos:line="84" pos:column="67">fake<pos:position pos:line="84" pos:column="71"/></name></expr></argument>)<pos:position pos:line="84" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="84" pos:column="73"/></condition><then pos:line="84" pos:column="73"> <block pos:line="84" pos:column="74">{
                    <expr_stmt><expr><name pos:line="85" pos:column="21">mismatch<pos:position pos:line="85" pos:column="29"/></name> <operator pos:line="85" pos:column="30">=<pos:position pos:line="85" pos:column="31"/></operator> <literal type="number" pos:line="85" pos:column="32">1<pos:position pos:line="85" pos:column="33"/></literal></expr>;<pos:position pos:line="85" pos:column="34"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="86" pos:column="21">use_uri<pos:position pos:line="86" pos:column="28"/></name> <operator pos:line="86" pos:column="29">=<pos:position pos:line="86" pos:column="30"/></operator> <name><name pos:line="86" pos:column="31">r<pos:position pos:line="86" pos:column="32"/></name><operator pos:line="86" pos:column="32">-&gt;<pos:position pos:line="86" pos:column="37"/></operator><name pos:line="86" pos:column="34">uri<pos:position pos:line="86" pos:column="37"/></name></name></expr>;<pos:position pos:line="86" pos:column="38"/></expr_stmt>
                }<pos:position pos:line="87" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="88" pos:column="17">found<pos:position pos:line="88" pos:column="22"/></name> <operator pos:line="88" pos:column="23">=<pos:position pos:line="88" pos:column="24"/></operator> <call><name pos:line="88" pos:column="25">apr_pstrcat<pos:position pos:line="88" pos:column="36"/></name><argument_list pos:line="88" pos:column="36">(<argument><expr><name><name pos:line="88" pos:column="37">r<pos:position pos:line="88" pos:column="38"/></name><operator pos:line="88" pos:column="38">-&gt;<pos:position pos:line="88" pos:column="43"/></operator><name pos:line="88" pos:column="40">pool<pos:position pos:line="88" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="46">"proxy:"<pos:position pos:line="88" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="56">real<pos:position pos:line="88" pos:column="60"/></name></expr></argument>,
                                    <argument><expr><name pos:line="89" pos:column="37">use_uri<pos:position pos:line="89" pos:column="44"/></name> <operator pos:line="89" pos:column="45">+<pos:position pos:line="89" pos:column="46"/></operator> <name pos:line="89" pos:column="47">len<pos:position pos:line="89" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="52">NULL<pos:position pos:line="89" pos:column="56"/></name></expr></argument>)<pos:position pos:line="89" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="58"/></expr_stmt>
            }<pos:position pos:line="90" pos:column="14"/></block></then></if>
        }<pos:position pos:line="91" pos:column="10"/></block></else></if>
        <if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">mismatch<pos:position pos:line="92" pos:column="21"/></name></expr>)<pos:position pos:line="92" pos:column="22"/></condition><then pos:line="92" pos:column="22"> <block pos:line="92" pos:column="23">{
            <comment type="block" pos:line="93" pos:column="13">/* We made a reducing transformation, so we can't safely use
             * unparsed_uri.  Safe fallback is to ignore nocanon.
             */</comment>
            <expr_stmt><expr><call><name pos:line="96" pos:column="13">ap_log_rerror<pos:position pos:line="96" pos:column="26"/></name><argument_list pos:line="96" pos:column="26">(<argument><expr><name pos:line="96" pos:column="27">APLOG_MARK<pos:position pos:line="96" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="39">APLOG_WARNING<pos:position pos:line="96" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="54">0<pos:position pos:line="96" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="57">r<pos:position pos:line="96" pos:column="58"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="97" pos:column="27">"Unescaped URL path matched ProxyPass; ignoring unsafe nocanon"<pos:position pos:line="97" pos:column="90"/></literal></expr></argument>)<pos:position pos:line="97" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="92"/></expr_stmt>
        }<pos:position pos:line="98" pos:column="10"/></block></then></if>

        <if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name pos:line="100" pos:column="13">found<pos:position pos:line="100" pos:column="18"/></name></expr>)<pos:position pos:line="100" pos:column="19"/></condition><then pos:line="100" pos:column="19"> <block pos:line="100" pos:column="20">{
            <expr_stmt><expr><name><name pos:line="101" pos:column="13">r<pos:position pos:line="101" pos:column="14"/></name><operator pos:line="101" pos:column="14">-&gt;<pos:position pos:line="101" pos:column="19"/></operator><name pos:line="101" pos:column="16">filename<pos:position pos:line="101" pos:column="24"/></name></name> <operator pos:line="101" pos:column="25">=<pos:position pos:line="101" pos:column="26"/></operator> <name pos:line="101" pos:column="27">found<pos:position pos:line="101" pos:column="32"/></name></expr>;<pos:position pos:line="101" pos:column="33"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="102" pos:column="13">r<pos:position pos:line="102" pos:column="14"/></name><operator pos:line="102" pos:column="14">-&gt;<pos:position pos:line="102" pos:column="19"/></operator><name pos:line="102" pos:column="16">handler<pos:position pos:line="102" pos:column="23"/></name></name> <operator pos:line="102" pos:column="24">=<pos:position pos:line="102" pos:column="25"/></operator> <literal type="string" pos:line="102" pos:column="26">"proxy-server"<pos:position pos:line="102" pos:column="40"/></literal></expr>;<pos:position pos:line="102" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="103" pos:column="13">r<pos:position pos:line="103" pos:column="14"/></name><operator pos:line="103" pos:column="14">-&gt;<pos:position pos:line="103" pos:column="19"/></operator><name pos:line="103" pos:column="16">proxyreq<pos:position pos:line="103" pos:column="24"/></name></name> <operator pos:line="103" pos:column="25">=<pos:position pos:line="103" pos:column="26"/></operator> <name pos:line="103" pos:column="27">PROXYREQ_REVERSE<pos:position pos:line="103" pos:column="43"/></name></expr>;<pos:position pos:line="103" pos:column="44"/></expr_stmt>
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name pos:line="104" pos:column="17">nocanon<pos:position pos:line="104" pos:column="24"/></name> <operator pos:line="104" pos:column="25">&amp;&amp;<pos:position pos:line="104" pos:column="35"/></operator> <operator pos:line="104" pos:column="28">!<pos:position pos:line="104" pos:column="29"/></operator><name pos:line="104" pos:column="29">mismatch<pos:position pos:line="104" pos:column="37"/></name></expr>)<pos:position pos:line="104" pos:column="38"/></condition><then pos:line="104" pos:column="38"> <block pos:line="104" pos:column="39">{
                <comment type="block" pos:line="105" pos:column="17">/* mod_proxy_http needs to be told.  Different module. */</comment>
                <expr_stmt><expr><call><name pos:line="106" pos:column="17">apr_table_setn<pos:position pos:line="106" pos:column="31"/></name><argument_list pos:line="106" pos:column="31">(<argument><expr><name><name pos:line="106" pos:column="32">r<pos:position pos:line="106" pos:column="33"/></name><operator pos:line="106" pos:column="33">-&gt;<pos:position pos:line="106" pos:column="38"/></operator><name pos:line="106" pos:column="35">notes<pos:position pos:line="106" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="42">"proxy-nocanon"<pos:position pos:line="106" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="59">"1"<pos:position pos:line="106" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="64"/></expr_stmt>
            }<pos:position pos:line="107" pos:column="14"/></block></then></if>
            <return pos:line="108" pos:column="13">return <expr><name pos:line="108" pos:column="20">OK<pos:position pos:line="108" pos:column="22"/></name></expr>;<pos:position pos:line="108" pos:column="23"/></return>
        }<pos:position pos:line="109" pos:column="10"/></block></then></if>
    }<pos:position pos:line="110" pos:column="6"/></block></for>
    <return pos:line="111" pos:column="5">return <expr><name pos:line="111" pos:column="12">DECLINED<pos:position pos:line="111" pos:column="20"/></name></expr>;<pos:position pos:line="111" pos:column="21"/></return>
}<pos:position pos:line="112" pos:column="2"/></block></function></unit>
