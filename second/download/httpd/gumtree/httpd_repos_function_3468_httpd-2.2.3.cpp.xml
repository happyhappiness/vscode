<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3468_httpd-2.2.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_uint32_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_atomic_xchg32<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><specifier pos:line="1" pos:column="32">volatile<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">apr_uint32_t<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">mem<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">apr_uint32_t<pos:position pos:line="1" pos:column="72"/></name></type> <name pos:line="1" pos:column="73">val<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_uint32_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">prev<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
    <do pos:line="4" pos:column="5">do <block pos:line="4" pos:column="8">{
        <expr_stmt><expr><name pos:line="5" pos:column="9">prev<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">=<pos:position pos:line="5" pos:column="15"/></operator> <operator pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">mem<pos:position pos:line="5" pos:column="20"/></name></expr>;<pos:position pos:line="5" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="6" pos:column="6"/></block> while <condition pos:line="6" pos:column="13">(<expr><call><name pos:line="6" pos:column="14">apr_atomic_cas32<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">mem<pos:position pos:line="6" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="36">val<pos:position pos:line="6" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="41">prev<pos:position pos:line="6" pos:column="45"/></name></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call> <operator pos:line="6" pos:column="47">!=<pos:position pos:line="6" pos:column="49"/></operator> <name pos:line="6" pos:column="50">prev<pos:position pos:line="6" pos:column="54"/></name></expr>)<pos:position pos:line="6" pos:column="55"/></condition>;<pos:position pos:line="6" pos:column="56"/></do>
    <return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">prev<pos:position pos:line="7" pos:column="16"/></name></expr>;<pos:position pos:line="7" pos:column="17"/></return>
}<pos:position pos:line="8" pos:column="2"/></block></function></unit>
