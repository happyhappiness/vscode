<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_2485.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">fix_hostname<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">request_rec<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">r<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="41">const<pos:position pos:line="1" pos:column="46"/></specifier> <name pos:line="1" pos:column="47">char<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">host_header<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
                        <parameter><decl><type><name pos:line="2" pos:column="25">unsigned<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">http_conformance<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">src<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">host<pos:position pos:line="5" pos:column="15"/></name></decl>, <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="18">scope_id<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_port_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">port<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_status_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">rv<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">c<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">is_v6literal<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><literal type="number" pos:line="9" pos:column="24">0<pos:position pos:line="9" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">strict<pos:position pos:line="10" pos:column="15"/></name> <init pos:line="10" pos:column="16">= <expr><operator pos:line="10" pos:column="18">(<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="19">http_conformance<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">!=<pos:position pos:line="10" pos:column="38"/></operator> <name pos:line="10" pos:column="39">AP_HTTP_CONFORMANCE_UNSAFE<pos:position pos:line="10" pos:column="65"/></name><operator pos:line="10" pos:column="65">)<pos:position pos:line="10" pos:column="66"/></operator></expr></init></decl>;<pos:position pos:line="10" pos:column="67"/></decl_stmt>

    <expr_stmt><expr><name pos:line="12" pos:column="5">src<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <ternary><condition><expr><name pos:line="12" pos:column="11">host_header<pos:position pos:line="12" pos:column="22"/></name></expr> ?<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24"> <expr><name pos:line="12" pos:column="25">host_header<pos:position pos:line="12" pos:column="36"/></name></expr> <pos:position pos:line="12" pos:column="37"/></then><else pos:line="12" pos:column="37">: <expr><name><name pos:line="12" pos:column="39">r<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">-&gt;<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="42">hostname<pos:position pos:line="12" pos:column="50"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="12" pos:column="51"/></expr_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* According to RFC 2616, Host header field CAN be blank */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><operator pos:line="15" pos:column="10">*<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">src<pos:position pos:line="15" pos:column="14"/></name></expr>)<pos:position pos:line="15" pos:column="15"/></condition><then pos:line="15" pos:column="15"> <block pos:line="15" pos:column="16">{
        <return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">is_v6literal<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/* apr_parse_addr_port will interpret a bare integer as a port
     * which is incorrect in this context.  So treat it separately.
     */</comment>
    <for pos:line="22" pos:column="5">for <control pos:line="22" pos:column="9">(<init><expr><name pos:line="22" pos:column="10">c<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <name pos:line="22" pos:column="14">src<pos:position pos:line="22" pos:column="17"/></name></expr>;<pos:position pos:line="22" pos:column="18"/></init> <condition><expr><call><name pos:line="22" pos:column="19">apr_isdigit<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><operator pos:line="22" pos:column="31">*<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="32">c<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="35"/></condition> <incr><expr><operator pos:line="22" pos:column="36">++<pos:position pos:line="22" pos:column="38"/></operator><name pos:line="22" pos:column="38">c<pos:position pos:line="22" pos:column="39"/></name></expr></incr>)<pos:position pos:line="22" pos:column="40"/></control><block type="pseudo"><empty_stmt pos:line="22" pos:column="40">;<pos:position pos:line="22" pos:column="41"/></empty_stmt></block></for>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><operator pos:line="23" pos:column="10">*<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="11">c<pos:position pos:line="23" pos:column="12"/></name></expr>)<pos:position pos:line="23" pos:column="13"/></condition><then pos:line="23" pos:column="13"> <block pos:line="23" pos:column="14">{
        <comment type="block" pos:line="24" pos:column="9">/* pure integer */</comment>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">strict<pos:position pos:line="25" pos:column="19"/></name></expr>)<pos:position pos:line="25" pos:column="20"/></condition><then pos:line="25" pos:column="20"> <block pos:line="25" pos:column="21">{
            <comment type="block" pos:line="26" pos:column="13">/* RFC 3986 7.4 */</comment>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">ap_log_rerror<pos:position pos:line="27" pos:column="26"/></name><argument_list pos:line="27" pos:column="26">(<argument><expr><name pos:line="27" pos:column="27">APLOG_MARK<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">APLOG_DEBUG<pos:position pos:line="27" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="52">0<pos:position pos:line="27" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="55">r<pos:position pos:line="27" pos:column="56"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="28" pos:column="26">"[strict] purely numeric host names not allowed: %s"<pos:position pos:line="28" pos:column="78"/></literal></expr></argument>,
                         <argument><expr><name pos:line="29" pos:column="26">src<pos:position pos:line="29" pos:column="29"/></name></expr></argument>)<pos:position pos:line="29" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="31"/></expr_stmt>
            <goto pos:line="30" pos:column="13">goto <name pos:line="30" pos:column="18">bad_nolog<pos:position pos:line="30" pos:column="27"/></name>;<pos:position pos:line="30" pos:column="28"/></goto>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="32" pos:column="9">r<pos:position pos:line="32" pos:column="10"/></name><operator pos:line="32" pos:column="10">-&gt;<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="12">hostname<pos:position pos:line="32" pos:column="20"/></name></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <name pos:line="32" pos:column="23">src<pos:position pos:line="32" pos:column="26"/></name></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">is_v6literal<pos:position pos:line="33" pos:column="28"/></name></expr>;<pos:position pos:line="33" pos:column="29"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">host_header<pos:position pos:line="36" pos:column="20"/></name></expr>)<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21"> <block pos:line="36" pos:column="22">{
        <expr_stmt><expr><name pos:line="37" pos:column="9">rv<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">apr_parse_addr_port<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">(<argument><expr><operator pos:line="37" pos:column="34">&amp;<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="35">host<pos:position pos:line="37" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="41">&amp;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="42">scope_id<pos:position pos:line="37" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="52">&amp;<pos:position pos:line="37" pos:column="57"/></operator><name pos:line="37" pos:column="53">port<pos:position pos:line="37" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="59">src<pos:position pos:line="37" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="64">r<pos:position pos:line="37" pos:column="65"/></name><operator pos:line="37" pos:column="65">-&gt;<pos:position pos:line="37" pos:column="70"/></operator><name pos:line="37" pos:column="67">pool<pos:position pos:line="37" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="73"/></expr_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">rv<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">!=<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">APR_SUCCESS<pos:position pos:line="38" pos:column="30"/></name> <operator pos:line="38" pos:column="31">||<pos:position pos:line="38" pos:column="33"/></operator> <name pos:line="38" pos:column="34">scope_id<pos:position pos:line="38" pos:column="42"/></name></expr>)<pos:position pos:line="38" pos:column="43"/></condition><then pos:line="38" pos:column="43">
            <block type="pseudo"><goto pos:line="39" pos:column="13">goto <name pos:line="39" pos:column="18">bad<pos:position pos:line="39" pos:column="21"/></name>;<pos:position pos:line="39" pos:column="22"/></goto></block></then></if>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">port<pos:position pos:line="40" pos:column="17"/></name></expr>)<pos:position pos:line="40" pos:column="18"/></condition><then pos:line="40" pos:column="18"> <block pos:line="40" pos:column="19">{
            <comment type="block" pos:line="41" pos:column="13">/* Don't throw the Host: header's port number away:
               save it in parsed_uri -- ap_get_server_port() needs it! */</comment>
            <comment type="block" pos:line="43" pos:column="13">/* @@@ XXX there should be a better way to pass the port.
             *         Like r-&gt;hostname, there should be a r-&gt;portno
             */</comment>
            <expr_stmt><expr><name><name pos:line="46" pos:column="13">r<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">-&gt;<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="16">parsed_uri<pos:position pos:line="46" pos:column="26"/></name><operator pos:line="46" pos:column="26">.<pos:position pos:line="46" pos:column="27"/></operator><name pos:line="46" pos:column="27">port<pos:position pos:line="46" pos:column="31"/></name></name> <operator pos:line="46" pos:column="32">=<pos:position pos:line="46" pos:column="33"/></operator> <name pos:line="46" pos:column="34">port<pos:position pos:line="46" pos:column="38"/></name></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="47" pos:column="13">r<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">parsed_uri<pos:position pos:line="47" pos:column="26"/></name><operator pos:line="47" pos:column="26">.<pos:position pos:line="47" pos:column="27"/></operator><name pos:line="47" pos:column="27">port_str<pos:position pos:line="47" pos:column="35"/></name></name> <operator pos:line="47" pos:column="36">=<pos:position pos:line="47" pos:column="37"/></operator> <call><name pos:line="47" pos:column="38">apr_itoa<pos:position pos:line="47" pos:column="46"/></name><argument_list pos:line="47" pos:column="46">(<argument><expr><name><name pos:line="47" pos:column="47">r<pos:position pos:line="47" pos:column="48"/></name><operator pos:line="47" pos:column="48">-&gt;<pos:position pos:line="47" pos:column="53"/></operator><name pos:line="47" pos:column="50">pool<pos:position pos:line="47" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="56">(<pos:position pos:line="47" pos:column="57"/></operator><name pos:line="47" pos:column="57">int<pos:position pos:line="47" pos:column="60"/></name><operator pos:line="47" pos:column="60">)<pos:position pos:line="47" pos:column="61"/></operator><name pos:line="47" pos:column="61">port<pos:position pos:line="47" pos:column="65"/></name></expr></argument>)<pos:position pos:line="47" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="67"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
        <if pos:line="49" pos:column="9">if <condition pos:line="49" pos:column="12">(<expr><name><name pos:line="49" pos:column="13">host_header<pos:position pos:line="49" pos:column="24"/></name><index pos:line="49" pos:column="24">[<expr><literal type="number" pos:line="49" pos:column="25">0<pos:position pos:line="49" pos:column="26"/></literal></expr>]<pos:position pos:line="49" pos:column="27"/></index></name> <operator pos:line="49" pos:column="28">==<pos:position pos:line="49" pos:column="30"/></operator> <literal type="char" pos:line="49" pos:column="31">'['<pos:position pos:line="49" pos:column="34"/></literal></expr>)<pos:position pos:line="49" pos:column="35"/></condition><then pos:line="49" pos:column="35">
            <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="13">is_v6literal<pos:position pos:line="50" pos:column="25"/></name> <operator pos:line="50" pos:column="26">=<pos:position pos:line="50" pos:column="27"/></operator> <literal type="number" pos:line="50" pos:column="28">1<pos:position pos:line="50" pos:column="29"/></literal></expr>;<pos:position pos:line="50" pos:column="30"/></expr_stmt></block></then></if>
    }<pos:position pos:line="51" pos:column="6"/></block></then>
    <else pos:line="52" pos:column="5">else <block pos:line="52" pos:column="10">{
        <comment type="block" pos:line="53" pos:column="9">/*
         * Already parsed, surrounding [ ] (if IPv6 literal) and :port have
         * already been removed.
         */</comment>
        <expr_stmt><expr><name pos:line="57" pos:column="9">host<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <call><name pos:line="57" pos:column="16">apr_pstrdup<pos:position pos:line="57" pos:column="27"/></name><argument_list pos:line="57" pos:column="27">(<argument><expr><name><name pos:line="57" pos:column="28">r<pos:position pos:line="57" pos:column="29"/></name><operator pos:line="57" pos:column="29">-&gt;<pos:position pos:line="57" pos:column="34"/></operator><name pos:line="57" pos:column="31">pool<pos:position pos:line="57" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="37">r<pos:position pos:line="57" pos:column="38"/></name><operator pos:line="57" pos:column="38">-&gt;<pos:position pos:line="57" pos:column="43"/></operator><name pos:line="57" pos:column="40">hostname<pos:position pos:line="57" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="50"/></expr_stmt>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">ap_strchr<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><name pos:line="58" pos:column="23">host<pos:position pos:line="58" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="58" pos:column="29">':'<pos:position pos:line="58" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="33"/></argument_list></call> <operator pos:line="58" pos:column="34">!=<pos:position pos:line="58" pos:column="36"/></operator> <name pos:line="58" pos:column="37">NULL<pos:position pos:line="58" pos:column="41"/></name></expr>)<pos:position pos:line="58" pos:column="42"/></condition><then pos:line="58" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name pos:line="59" pos:column="13">is_v6literal<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">=<pos:position pos:line="59" pos:column="27"/></operator> <literal type="number" pos:line="59" pos:column="28">1<pos:position pos:line="59" pos:column="29"/></literal></expr>;<pos:position pos:line="59" pos:column="30"/></expr_stmt></block></then></if>
    }<pos:position pos:line="60" pos:column="6"/></block></else></if>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">is_v6literal<pos:position pos:line="62" pos:column="21"/></name></expr>)<pos:position pos:line="62" pos:column="22"/></condition><then pos:line="62" pos:column="22"> <block pos:line="62" pos:column="23">{
        <expr_stmt><expr><name pos:line="63" pos:column="9">rv<pos:position pos:line="63" pos:column="11"/></name> <operator pos:line="63" pos:column="12">=<pos:position pos:line="63" pos:column="13"/></operator> <call><name pos:line="63" pos:column="14">fix_hostname_v6_literal<pos:position pos:line="63" pos:column="37"/></name><argument_list pos:line="63" pos:column="37">(<argument><expr><name pos:line="63" pos:column="38">r<pos:position pos:line="63" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="41">host<pos:position pos:line="63" pos:column="45"/></name></expr></argument>)<pos:position pos:line="63" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then>
    <else pos:line="65" pos:column="5">else <block pos:line="65" pos:column="10">{
        <expr_stmt><expr><name pos:line="66" pos:column="9">rv<pos:position pos:line="66" pos:column="11"/></name> <operator pos:line="66" pos:column="12">=<pos:position pos:line="66" pos:column="13"/></operator> <call><name pos:line="66" pos:column="14">fix_hostname_non_v6<pos:position pos:line="66" pos:column="33"/></name><argument_list pos:line="66" pos:column="33">(<argument><expr><name pos:line="66" pos:column="34">r<pos:position pos:line="66" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="37">host<pos:position pos:line="66" pos:column="41"/></name></expr></argument>)<pos:position pos:line="66" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="43"/></expr_stmt>
        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">strict<pos:position pos:line="67" pos:column="19"/></name> <operator pos:line="67" pos:column="20">&amp;&amp;<pos:position pos:line="67" pos:column="30"/></operator> <name pos:line="67" pos:column="23">rv<pos:position pos:line="67" pos:column="25"/></name> <operator pos:line="67" pos:column="26">==<pos:position pos:line="67" pos:column="28"/></operator> <name pos:line="67" pos:column="29">APR_SUCCESS<pos:position pos:line="67" pos:column="40"/></name></expr>)<pos:position pos:line="67" pos:column="41"/></condition><then pos:line="67" pos:column="41">
            <block type="pseudo"><expr_stmt><expr><name pos:line="68" pos:column="13">rv<pos:position pos:line="68" pos:column="15"/></name> <operator pos:line="68" pos:column="16">=<pos:position pos:line="68" pos:column="17"/></operator> <call><name pos:line="68" pos:column="18">strict_hostname_check<pos:position pos:line="68" pos:column="39"/></name><argument_list pos:line="68" pos:column="39">(<argument><expr><name pos:line="68" pos:column="40">r<pos:position pos:line="68" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="43">host<pos:position pos:line="68" pos:column="47"/></name></expr></argument>)<pos:position pos:line="68" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="49"/></expr_stmt></block></then></if>
    }<pos:position pos:line="69" pos:column="6"/></block></else></if>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><name pos:line="70" pos:column="9">rv<pos:position pos:line="70" pos:column="11"/></name> <operator pos:line="70" pos:column="12">!=<pos:position pos:line="70" pos:column="14"/></operator> <name pos:line="70" pos:column="15">APR_SUCCESS<pos:position pos:line="70" pos:column="26"/></name></expr>)<pos:position pos:line="70" pos:column="27"/></condition><then pos:line="70" pos:column="27">
        <block type="pseudo"><goto pos:line="71" pos:column="9">goto <name pos:line="71" pos:column="14">bad<pos:position pos:line="71" pos:column="17"/></name>;<pos:position pos:line="71" pos:column="18"/></goto></block></then></if>

    <expr_stmt><expr><name><name pos:line="73" pos:column="5">r<pos:position pos:line="73" pos:column="6"/></name><operator pos:line="73" pos:column="6">-&gt;<pos:position pos:line="73" pos:column="11"/></operator><name pos:line="73" pos:column="8">hostname<pos:position pos:line="73" pos:column="16"/></name></name> <operator pos:line="73" pos:column="17">=<pos:position pos:line="73" pos:column="18"/></operator> <name pos:line="73" pos:column="19">host<pos:position pos:line="73" pos:column="23"/></name></expr>;<pos:position pos:line="73" pos:column="24"/></expr_stmt>
    <return pos:line="74" pos:column="5">return <expr><name pos:line="74" pos:column="12">is_v6literal<pos:position pos:line="74" pos:column="24"/></name></expr>;<pos:position pos:line="74" pos:column="25"/></return>

<label><name pos:line="76" pos:column="1">bad<pos:position pos:line="76" pos:column="4"/></name>:<pos:position pos:line="76" pos:column="5"/></label>
    <expr_stmt><expr><call><name pos:line="77" pos:column="5">ap_log_rerror<pos:position pos:line="77" pos:column="18"/></name><argument_list pos:line="77" pos:column="18">(<argument><expr><name pos:line="77" pos:column="19">APLOG_MARK<pos:position pos:line="77" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="31">APLOG_DEBUG<pos:position pos:line="77" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="44">0<pos:position pos:line="77" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="47">r<pos:position pos:line="77" pos:column="48"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="78" pos:column="19">"Client sent malformed Host header: %s"<pos:position pos:line="78" pos:column="58"/></literal></expr></argument>,
                  <argument><expr><name pos:line="79" pos:column="19">src<pos:position pos:line="79" pos:column="22"/></name></expr></argument>)<pos:position pos:line="79" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="24"/></expr_stmt>
<label><name pos:line="80" pos:column="1">bad_nolog<pos:position pos:line="80" pos:column="10"/></name>:<pos:position pos:line="80" pos:column="11"/></label>
    <expr_stmt><expr><name><name pos:line="81" pos:column="5">r<pos:position pos:line="81" pos:column="6"/></name><operator pos:line="81" pos:column="6">-&gt;<pos:position pos:line="81" pos:column="11"/></operator><name pos:line="81" pos:column="8">status<pos:position pos:line="81" pos:column="14"/></name></name> <operator pos:line="81" pos:column="15">=<pos:position pos:line="81" pos:column="16"/></operator> <name pos:line="81" pos:column="17">HTTP_BAD_REQUEST<pos:position pos:line="81" pos:column="33"/></name></expr>;<pos:position pos:line="81" pos:column="34"/></expr_stmt>
    <return pos:line="82" pos:column="5">return <expr><name pos:line="82" pos:column="12">is_v6literal<pos:position pos:line="82" pos:column="24"/></name></expr>;<pos:position pos:line="82" pos:column="25"/></return>
}<pos:position pos:line="83" pos:column="2"/></block></function></unit>
