<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2200_httpd-2.4.17.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">h2_task_input_read<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">h2_task_input<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">input<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">ap_filter_t<pos:position pos:line="2" pos:column="44"/></name><modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type> <name pos:line="2" pos:column="46">f<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="3" pos:column="33">apr_bucket_brigade<pos:position pos:line="3" pos:column="51"/></name><modifier pos:line="3" pos:column="51">*<pos:position pos:line="3" pos:column="52"/></modifier></type> <name pos:line="3" pos:column="53">bb<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="4" pos:column="33">ap_input_mode_t<pos:position pos:line="4" pos:column="48"/></name></type> <name pos:line="4" pos:column="49">mode<pos:position pos:line="4" pos:column="53"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="5" pos:column="33">apr_read_type_e<pos:position pos:line="5" pos:column="48"/></name></type> <name pos:line="5" pos:column="49">block<pos:position pos:line="5" pos:column="54"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="6" pos:column="33">apr_off_t<pos:position pos:line="6" pos:column="42"/></name></type> <name pos:line="6" pos:column="43">readbytes<pos:position pos:line="6" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="53"/></parameter_list>
<block pos:line="7" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">status<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><name pos:line="8" pos:column="27">APR_SUCCESS<pos:position pos:line="8" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_off_t<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">bblen<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
    
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">ap_log_cerror<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">APLOG_MARK<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">APLOG_DEBUG<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="44">0<pos:position pos:line="11" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="47">f<pos:position pos:line="11" pos:column="48"/></name><operator pos:line="11" pos:column="48">-&gt;<pos:position pos:line="11" pos:column="53"/></operator><name pos:line="11" pos:column="50">c<pos:position pos:line="11" pos:column="51"/></name></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="12" pos:column="19">"h2_task_input(%s): read, block=%d, mode=%d, readbytes=%ld"<pos:position pos:line="12" pos:column="78"/></literal></expr></argument>, 
                  <argument><expr><name><name pos:line="13" pos:column="19">input<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">env<pos:position pos:line="13" pos:column="29"/></name><operator pos:line="13" pos:column="29">-&gt;<pos:position pos:line="13" pos:column="34"/></operator><name pos:line="13" pos:column="31">id<pos:position pos:line="13" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="35">block<pos:position pos:line="13" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="42">mode<pos:position pos:line="13" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="48">(<pos:position pos:line="13" pos:column="49"/></operator><name pos:line="13" pos:column="49">long<pos:position pos:line="13" pos:column="53"/></name><operator pos:line="13" pos:column="53">)<pos:position pos:line="13" pos:column="54"/></operator><name pos:line="13" pos:column="54">readbytes<pos:position pos:line="13" pos:column="63"/></name></expr></argument>)<pos:position pos:line="13" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="65"/></expr_stmt>
    
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><call><name pos:line="15" pos:column="9">is_aborted<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">f<pos:position pos:line="15" pos:column="21"/></name></expr></argument>)<pos:position pos:line="15" pos:column="22"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="23"/></condition><then pos:line="15" pos:column="23"> <block pos:line="15" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">ap_log_cerror<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">APLOG_MARK<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="35">APLOG_TRACE1<pos:position pos:line="16" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="49">0<pos:position pos:line="16" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="52">f<pos:position pos:line="16" pos:column="53"/></name><operator pos:line="16" pos:column="53">-&gt;<pos:position pos:line="16" pos:column="58"/></operator><name pos:line="16" pos:column="55">c<pos:position pos:line="16" pos:column="56"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="17" pos:column="23">"h2_task_input(%s): is aborted"<pos:position pos:line="17" pos:column="54"/></literal></expr></argument>, 
                      <argument><expr><name><name pos:line="18" pos:column="23">input<pos:position pos:line="18" pos:column="28"/></name><operator pos:line="18" pos:column="28">-&gt;<pos:position pos:line="18" pos:column="33"/></operator><name pos:line="18" pos:column="30">env<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">-&gt;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="35">id<pos:position pos:line="18" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">APR_ECONNABORTED<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><name pos:line="22" pos:column="9">mode<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">==<pos:position pos:line="22" pos:column="16"/></operator> <name pos:line="22" pos:column="17">AP_MODE_INIT<pos:position pos:line="22" pos:column="29"/></name></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30"> <block pos:line="22" pos:column="31">{
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">APR_SUCCESS<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">input<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">bb<pos:position pos:line="26" pos:column="18"/></name></name></expr>)<pos:position pos:line="26" pos:column="19"/></condition><then pos:line="26" pos:column="19"> <block pos:line="26" pos:column="20">{
        <expr_stmt><expr><name pos:line="27" pos:column="9">status<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <call><name pos:line="27" pos:column="18">apr_brigade_length<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name><name pos:line="27" pos:column="37">input<pos:position pos:line="27" pos:column="42"/></name><operator pos:line="27" pos:column="42">-&gt;<pos:position pos:line="27" pos:column="47"/></operator><name pos:line="27" pos:column="44">bb<pos:position pos:line="27" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="48">1<pos:position pos:line="27" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="51">&amp;<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="52">bblen<pos:position pos:line="27" pos:column="57"/></name></expr></argument>)<pos:position pos:line="27" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="59"/></expr_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">status<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">!=<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">APR_SUCCESS<pos:position pos:line="28" pos:column="34"/></name></expr>)<pos:position pos:line="28" pos:column="35"/></condition><then pos:line="28" pos:column="35"> <block pos:line="28" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">ap_log_cerror<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">APLOG_MARK<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">APLOG_WARNING<pos:position pos:line="29" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="54">status<pos:position pos:line="29" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="62">f<pos:position pos:line="29" pos:column="63"/></name><operator pos:line="29" pos:column="63">-&gt;<pos:position pos:line="29" pos:column="68"/></operator><name pos:line="29" pos:column="65">c<pos:position pos:line="29" pos:column="66"/></name></name></expr></argument>,
                          <argument><expr><call><name pos:line="30" pos:column="27">APLOGNO<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><literal type="number" pos:line="30" pos:column="35">02958<pos:position pos:line="30" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="41"/></argument_list></call> <literal type="string" pos:line="30" pos:column="42">"h2_task_input(%s): brigade length fail"<pos:position pos:line="30" pos:column="82"/></literal></expr></argument>, 
                          <argument><expr><name><name pos:line="31" pos:column="27">input<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">-&gt;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="34">env<pos:position pos:line="31" pos:column="37"/></name><operator pos:line="31" pos:column="37">-&gt;<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="39">id<pos:position pos:line="31" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
            <return pos:line="32" pos:column="13">return <expr><name pos:line="32" pos:column="20">status<pos:position pos:line="32" pos:column="26"/></name></expr>;<pos:position pos:line="32" pos:column="27"/></return>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">(<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">bblen<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">==<pos:position pos:line="36" pos:column="18"/></operator> <literal type="number" pos:line="36" pos:column="19">0<pos:position pos:line="36" pos:column="20"/></literal><operator pos:line="36" pos:column="20">)<pos:position pos:line="36" pos:column="21"/></operator> <operator pos:line="36" pos:column="22">&amp;&amp;<pos:position pos:line="36" pos:column="32"/></operator> <name><name pos:line="36" pos:column="25">input<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">-&gt;<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="32">env<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">-&gt;<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="37">input_eos<pos:position pos:line="36" pos:column="46"/></name></name></expr>)<pos:position pos:line="36" pos:column="47"/></condition><then pos:line="36" pos:column="47"> <block pos:line="36" pos:column="48">{
        <return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">APR_EOF<pos:position pos:line="37" pos:column="23"/></name></expr>;<pos:position pos:line="37" pos:column="24"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    
    <while pos:line="40" pos:column="5">while <condition pos:line="40" pos:column="11">(<expr><operator pos:line="40" pos:column="12">(<pos:position pos:line="40" pos:column="13"/></operator><name pos:line="40" pos:column="13">bblen<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">==<pos:position pos:line="40" pos:column="21"/></operator> <literal type="number" pos:line="40" pos:column="22">0<pos:position pos:line="40" pos:column="23"/></literal><operator pos:line="40" pos:column="23">)<pos:position pos:line="40" pos:column="24"/></operator> <operator pos:line="40" pos:column="25">||<pos:position pos:line="40" pos:column="27"/></operator> <operator pos:line="40" pos:column="28">(<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="29">mode<pos:position pos:line="40" pos:column="33"/></name> <operator pos:line="40" pos:column="34">==<pos:position pos:line="40" pos:column="36"/></operator> <name pos:line="40" pos:column="37">AP_MODE_READBYTES<pos:position pos:line="40" pos:column="54"/></name> <operator pos:line="40" pos:column="55">&amp;&amp;<pos:position pos:line="40" pos:column="65"/></operator> <name pos:line="40" pos:column="58">bblen<pos:position pos:line="40" pos:column="63"/></name> <operator pos:line="40" pos:column="64">&lt;<pos:position pos:line="40" pos:column="68"/></operator> <name pos:line="40" pos:column="66">readbytes<pos:position pos:line="40" pos:column="75"/></name><operator pos:line="40" pos:column="75">)<pos:position pos:line="40" pos:column="76"/></operator></expr>)<pos:position pos:line="40" pos:column="77"/></condition> <block pos:line="40" pos:column="78">{
        <comment type="block" pos:line="41" pos:column="9">/* Get more data for our stream from mplx.
         */</comment>
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">ap_log_cerror<pos:position pos:line="43" pos:column="22"/></name><argument_list pos:line="43" pos:column="22">(<argument><expr><name pos:line="43" pos:column="23">APLOG_MARK<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">APLOG_TRACE1<pos:position pos:line="43" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="49">status<pos:position pos:line="43" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="57">f<pos:position pos:line="43" pos:column="58"/></name><operator pos:line="43" pos:column="58">-&gt;<pos:position pos:line="43" pos:column="63"/></operator><name pos:line="43" pos:column="60">c<pos:position pos:line="43" pos:column="61"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="44" pos:column="23">"h2_task_input(%s): get more data from mplx, block=%d, "<pos:position pos:line="44" pos:column="79"/></literal>
                      <literal type="string" pos:line="45" pos:column="23">"readbytes=%ld, queued=%ld"<pos:position pos:line="45" pos:column="50"/></literal></expr></argument>,
                      <argument><expr><name><name pos:line="46" pos:column="23">input<pos:position pos:line="46" pos:column="28"/></name><operator pos:line="46" pos:column="28">-&gt;<pos:position pos:line="46" pos:column="33"/></operator><name pos:line="46" pos:column="30">env<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">id<pos:position pos:line="46" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="39">block<pos:position pos:line="46" pos:column="44"/></name></expr></argument>, 
                      <argument><expr><operator pos:line="47" pos:column="23">(<pos:position pos:line="47" pos:column="24"/></operator><name pos:line="47" pos:column="24">long<pos:position pos:line="47" pos:column="28"/></name><operator pos:line="47" pos:column="28">)<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="29">readbytes<pos:position pos:line="47" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="40">(<pos:position pos:line="47" pos:column="41"/></operator><name pos:line="47" pos:column="41">long<pos:position pos:line="47" pos:column="45"/></name><operator pos:line="47" pos:column="45">)<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="46">bblen<pos:position pos:line="47" pos:column="51"/></name></expr></argument>)<pos:position pos:line="47" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="53"/></expr_stmt>
        
        <comment type="block" pos:line="49" pos:column="9">/* Although we sometimes get called with APR_NONBLOCK_READs, 
         we seem to  fill our buffer blocking. Otherwise we get EAGAIN,
         return that to our caller and everyone throws up their hands,
         never calling us again. */</comment>
        <expr_stmt><expr><name pos:line="53" pos:column="9">status<pos:position pos:line="53" pos:column="15"/></name> <operator pos:line="53" pos:column="16">=<pos:position pos:line="53" pos:column="17"/></operator> <call><name pos:line="53" pos:column="18">h2_mplx_in_read<pos:position pos:line="53" pos:column="33"/></name><argument_list pos:line="53" pos:column="33">(<argument><expr><name><name pos:line="53" pos:column="34">input<pos:position pos:line="53" pos:column="39"/></name><operator pos:line="53" pos:column="39">-&gt;<pos:position pos:line="53" pos:column="44"/></operator><name pos:line="53" pos:column="41">env<pos:position pos:line="53" pos:column="44"/></name><operator pos:line="53" pos:column="44">-&gt;<pos:position pos:line="53" pos:column="49"/></operator><name pos:line="53" pos:column="46">mplx<pos:position pos:line="53" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="52">APR_BLOCK_READ<pos:position pos:line="53" pos:column="66"/></name></expr></argument>,
                                 <argument><expr><name><name pos:line="54" pos:column="34">input<pos:position pos:line="54" pos:column="39"/></name><operator pos:line="54" pos:column="39">-&gt;<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="41">env<pos:position pos:line="54" pos:column="44"/></name><operator pos:line="54" pos:column="44">-&gt;<pos:position pos:line="54" pos:column="49"/></operator><name pos:line="54" pos:column="46">stream_id<pos:position pos:line="54" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="57">input<pos:position pos:line="54" pos:column="62"/></name><operator pos:line="54" pos:column="62">-&gt;<pos:position pos:line="54" pos:column="67"/></operator><name pos:line="54" pos:column="64">bb<pos:position pos:line="54" pos:column="66"/></name></name></expr></argument>, 
                                 <argument><expr><name><name pos:line="55" pos:column="34">input<pos:position pos:line="55" pos:column="39"/></name><operator pos:line="55" pos:column="39">-&gt;<pos:position pos:line="55" pos:column="44"/></operator><name pos:line="55" pos:column="41">env<pos:position pos:line="55" pos:column="44"/></name><operator pos:line="55" pos:column="44">-&gt;<pos:position pos:line="55" pos:column="49"/></operator><name pos:line="55" pos:column="46">io<pos:position pos:line="55" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">ap_log_cerror<pos:position pos:line="56" pos:column="22"/></name><argument_list pos:line="56" pos:column="22">(<argument><expr><name pos:line="56" pos:column="23">APLOG_MARK<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="35">APLOG_TRACE1<pos:position pos:line="56" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="49">status<pos:position pos:line="56" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="57">f<pos:position pos:line="56" pos:column="58"/></name><operator pos:line="56" pos:column="58">-&gt;<pos:position pos:line="56" pos:column="63"/></operator><name pos:line="56" pos:column="60">c<pos:position pos:line="56" pos:column="61"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="57" pos:column="23">"h2_task_input(%s): mplx in read returned"<pos:position pos:line="57" pos:column="65"/></literal></expr></argument>,
                      <argument><expr><name><name pos:line="58" pos:column="23">input<pos:position pos:line="58" pos:column="28"/></name><operator pos:line="58" pos:column="28">-&gt;<pos:position pos:line="58" pos:column="33"/></operator><name pos:line="58" pos:column="30">env<pos:position pos:line="58" pos:column="33"/></name><operator pos:line="58" pos:column="33">-&gt;<pos:position pos:line="58" pos:column="38"/></operator><name pos:line="58" pos:column="35">id<pos:position pos:line="58" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="39"/></expr_stmt>
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">status<pos:position pos:line="59" pos:column="19"/></name> <operator pos:line="59" pos:column="20">!=<pos:position pos:line="59" pos:column="22"/></operator> <name pos:line="59" pos:column="23">APR_SUCCESS<pos:position pos:line="59" pos:column="34"/></name></expr>)<pos:position pos:line="59" pos:column="35"/></condition><then pos:line="59" pos:column="35"> <block pos:line="59" pos:column="36">{
            <return pos:line="60" pos:column="13">return <expr><name pos:line="60" pos:column="20">status<pos:position pos:line="60" pos:column="26"/></name></expr>;<pos:position pos:line="60" pos:column="27"/></return>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="62" pos:column="9">status<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <call><name pos:line="62" pos:column="18">apr_brigade_length<pos:position pos:line="62" pos:column="36"/></name><argument_list pos:line="62" pos:column="36">(<argument><expr><name><name pos:line="62" pos:column="37">input<pos:position pos:line="62" pos:column="42"/></name><operator pos:line="62" pos:column="42">-&gt;<pos:position pos:line="62" pos:column="47"/></operator><name pos:line="62" pos:column="44">bb<pos:position pos:line="62" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="48">1<pos:position pos:line="62" pos:column="49"/></literal></expr></argument>, <argument><expr><operator pos:line="62" pos:column="51">&amp;<pos:position pos:line="62" pos:column="56"/></operator><name pos:line="62" pos:column="52">bblen<pos:position pos:line="62" pos:column="57"/></name></expr></argument>)<pos:position pos:line="62" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="59"/></expr_stmt>
        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">status<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">!=<pos:position pos:line="63" pos:column="22"/></operator> <name pos:line="63" pos:column="23">APR_SUCCESS<pos:position pos:line="63" pos:column="34"/></name></expr>)<pos:position pos:line="63" pos:column="35"/></condition><then pos:line="63" pos:column="35"> <block pos:line="63" pos:column="36">{
            <return pos:line="64" pos:column="13">return <expr><name pos:line="64" pos:column="20">status<pos:position pos:line="64" pos:column="26"/></name></expr>;<pos:position pos:line="64" pos:column="27"/></return>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if>
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><operator pos:line="66" pos:column="13">(<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">bblen<pos:position pos:line="66" pos:column="19"/></name> <operator pos:line="66" pos:column="20">==<pos:position pos:line="66" pos:column="22"/></operator> <literal type="number" pos:line="66" pos:column="23">0<pos:position pos:line="66" pos:column="24"/></literal><operator pos:line="66" pos:column="24">)<pos:position pos:line="66" pos:column="25"/></operator> <operator pos:line="66" pos:column="26">&amp;&amp;<pos:position pos:line="66" pos:column="36"/></operator> <operator pos:line="66" pos:column="29">(<pos:position pos:line="66" pos:column="30"/></operator><name pos:line="66" pos:column="30">block<pos:position pos:line="66" pos:column="35"/></name> <operator pos:line="66" pos:column="36">==<pos:position pos:line="66" pos:column="38"/></operator> <name pos:line="66" pos:column="39">APR_NONBLOCK_READ<pos:position pos:line="66" pos:column="56"/></name><operator pos:line="66" pos:column="56">)<pos:position pos:line="66" pos:column="57"/></operator></expr>)<pos:position pos:line="66" pos:column="58"/></condition><then pos:line="66" pos:column="58"> <block pos:line="66" pos:column="59">{
            <return pos:line="67" pos:column="13">return <expr><ternary><condition><expr><call><name pos:line="67" pos:column="20">h2_util_has_eos<pos:position pos:line="67" pos:column="35"/></name><argument_list pos:line="67" pos:column="35">(<argument><expr><name><name pos:line="67" pos:column="36">input<pos:position pos:line="67" pos:column="41"/></name><operator pos:line="67" pos:column="41">-&gt;<pos:position pos:line="67" pos:column="46"/></operator><name pos:line="67" pos:column="43">bb<pos:position pos:line="67" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="47">0<pos:position pos:line="67" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="49"/></argument_list></call></expr>?<pos:position pos:line="67" pos:column="50"/></condition><then pos:line="67" pos:column="50"> <expr><name pos:line="67" pos:column="51">APR_EOF<pos:position pos:line="67" pos:column="58"/></name></expr> <pos:position pos:line="67" pos:column="59"/></then><else pos:line="67" pos:column="59">: <expr><name pos:line="67" pos:column="61">APR_EAGAIN<pos:position pos:line="67" pos:column="71"/></name></expr></else></ternary></expr>;<pos:position pos:line="67" pos:column="72"/></return>
        }<pos:position pos:line="68" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">ap_log_cerror<pos:position pos:line="69" pos:column="22"/></name><argument_list pos:line="69" pos:column="22">(<argument><expr><name pos:line="69" pos:column="23">APLOG_MARK<pos:position pos:line="69" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="35">APLOG_TRACE1<pos:position pos:line="69" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="49">status<pos:position pos:line="69" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="69" pos:column="57">f<pos:position pos:line="69" pos:column="58"/></name><operator pos:line="69" pos:column="58">-&gt;<pos:position pos:line="69" pos:column="63"/></operator><name pos:line="69" pos:column="60">c<pos:position pos:line="69" pos:column="61"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="70" pos:column="23">"h2_task_input(%s): mplx in read, %ld bytes in brigade"<pos:position pos:line="70" pos:column="78"/></literal></expr></argument>,
                      <argument><expr><name><name pos:line="71" pos:column="23">input<pos:position pos:line="71" pos:column="28"/></name><operator pos:line="71" pos:column="28">-&gt;<pos:position pos:line="71" pos:column="33"/></operator><name pos:line="71" pos:column="30">env<pos:position pos:line="71" pos:column="33"/></name><operator pos:line="71" pos:column="33">-&gt;<pos:position pos:line="71" pos:column="38"/></operator><name pos:line="71" pos:column="35">id<pos:position pos:line="71" pos:column="37"/></name></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="39">(<pos:position pos:line="71" pos:column="40"/></operator><name pos:line="71" pos:column="40">long<pos:position pos:line="71" pos:column="44"/></name><operator pos:line="71" pos:column="44">)<pos:position pos:line="71" pos:column="45"/></operator><name pos:line="71" pos:column="45">bblen<pos:position pos:line="71" pos:column="50"/></name></expr></argument>)<pos:position pos:line="71" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></while>
    
    <expr_stmt><expr><call><name pos:line="74" pos:column="5">ap_log_cerror<pos:position pos:line="74" pos:column="18"/></name><argument_list pos:line="74" pos:column="18">(<argument><expr><name pos:line="74" pos:column="19">APLOG_MARK<pos:position pos:line="74" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="31">APLOG_TRACE1<pos:position pos:line="74" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="45">status<pos:position pos:line="74" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="53">f<pos:position pos:line="74" pos:column="54"/></name><operator pos:line="74" pos:column="54">-&gt;<pos:position pos:line="74" pos:column="59"/></operator><name pos:line="74" pos:column="56">c<pos:position pos:line="74" pos:column="57"/></name></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="75" pos:column="19">"h2_task_input(%s): read, mode=%d, block=%d, "<pos:position pos:line="75" pos:column="65"/></literal>
                  <literal type="string" pos:line="76" pos:column="19">"readbytes=%ld, queued=%ld"<pos:position pos:line="76" pos:column="46"/></literal></expr></argument>,
                  <argument><expr><name><name pos:line="77" pos:column="19">input<pos:position pos:line="77" pos:column="24"/></name><operator pos:line="77" pos:column="24">-&gt;<pos:position pos:line="77" pos:column="29"/></operator><name pos:line="77" pos:column="26">env<pos:position pos:line="77" pos:column="29"/></name><operator pos:line="77" pos:column="29">-&gt;<pos:position pos:line="77" pos:column="34"/></operator><name pos:line="77" pos:column="31">id<pos:position pos:line="77" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="35">mode<pos:position pos:line="77" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="41">block<pos:position pos:line="77" pos:column="46"/></name></expr></argument>, 
                  <argument><expr><operator pos:line="78" pos:column="19">(<pos:position pos:line="78" pos:column="20"/></operator><name pos:line="78" pos:column="20">long<pos:position pos:line="78" pos:column="24"/></name><operator pos:line="78" pos:column="24">)<pos:position pos:line="78" pos:column="25"/></operator><name pos:line="78" pos:column="25">readbytes<pos:position pos:line="78" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="36">(<pos:position pos:line="78" pos:column="37"/></operator><name pos:line="78" pos:column="37">long<pos:position pos:line="78" pos:column="41"/></name><operator pos:line="78" pos:column="41">)<pos:position pos:line="78" pos:column="42"/></operator><name pos:line="78" pos:column="42">bblen<pos:position pos:line="78" pos:column="47"/></name></expr></argument>)<pos:position pos:line="78" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="49"/></expr_stmt>
           
    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><operator pos:line="80" pos:column="9">!<pos:position pos:line="80" pos:column="10"/></operator><call><name pos:line="80" pos:column="10">APR_BRIGADE_EMPTY<pos:position pos:line="80" pos:column="27"/></name><argument_list pos:line="80" pos:column="27">(<argument><expr><name><name pos:line="80" pos:column="28">input<pos:position pos:line="80" pos:column="33"/></name><operator pos:line="80" pos:column="33">-&gt;<pos:position pos:line="80" pos:column="38"/></operator><name pos:line="80" pos:column="35">bb<pos:position pos:line="80" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="39"/></condition><then pos:line="80" pos:column="39"> <block pos:line="80" pos:column="40">{
        <if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name pos:line="81" pos:column="13">mode<pos:position pos:line="81" pos:column="17"/></name> <operator pos:line="81" pos:column="18">==<pos:position pos:line="81" pos:column="20"/></operator> <name pos:line="81" pos:column="21">AP_MODE_EXHAUSTIVE<pos:position pos:line="81" pos:column="39"/></name></expr>)<pos:position pos:line="81" pos:column="40"/></condition><then pos:line="81" pos:column="40"> <block pos:line="81" pos:column="41">{
            <comment type="block" pos:line="82" pos:column="13">/* return all we have */</comment>
            <return pos:line="83" pos:column="13">return <expr><call><name pos:line="83" pos:column="20">h2_util_move<pos:position pos:line="83" pos:column="32"/></name><argument_list pos:line="83" pos:column="32">(<argument><expr><name pos:line="83" pos:column="33">bb<pos:position pos:line="83" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="37">input<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">-&gt;<pos:position pos:line="83" pos:column="47"/></operator><name pos:line="83" pos:column="44">bb<pos:position pos:line="83" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="48">readbytes<pos:position pos:line="83" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="83" pos:column="59">0<pos:position pos:line="83" pos:column="60"/></literal></expr></argument>, 
                                <argument><expr><literal type="string" pos:line="84" pos:column="33">"task_input_read(exhaustive)"<pos:position pos:line="84" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="84" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="64"/></return>
        }<pos:position pos:line="85" pos:column="10"/></block></then>
        <elseif pos:line="86" pos:column="9">else <if pos:line="86" pos:column="14">if <condition pos:line="86" pos:column="17">(<expr><name pos:line="86" pos:column="18">mode<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">==<pos:position pos:line="86" pos:column="25"/></operator> <name pos:line="86" pos:column="26">AP_MODE_READBYTES<pos:position pos:line="86" pos:column="43"/></name></expr>)<pos:position pos:line="86" pos:column="44"/></condition><then pos:line="86" pos:column="44"> <block pos:line="86" pos:column="45">{
            <return pos:line="87" pos:column="13">return <expr><call><name pos:line="87" pos:column="20">h2_util_move<pos:position pos:line="87" pos:column="32"/></name><argument_list pos:line="87" pos:column="32">(<argument><expr><name pos:line="87" pos:column="33">bb<pos:position pos:line="87" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="37">input<pos:position pos:line="87" pos:column="42"/></name><operator pos:line="87" pos:column="42">-&gt;<pos:position pos:line="87" pos:column="47"/></operator><name pos:line="87" pos:column="44">bb<pos:position pos:line="87" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="48">readbytes<pos:position pos:line="87" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="87" pos:column="59">0<pos:position pos:line="87" pos:column="60"/></literal></expr></argument>, 
                                <argument><expr><literal type="string" pos:line="88" pos:column="33">"task_input_read(readbytes)"<pos:position pos:line="88" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="63"/></return>
        }<pos:position pos:line="89" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="90" pos:column="9">else <if pos:line="90" pos:column="14">if <condition pos:line="90" pos:column="17">(<expr><name pos:line="90" pos:column="18">mode<pos:position pos:line="90" pos:column="22"/></name> <operator pos:line="90" pos:column="23">==<pos:position pos:line="90" pos:column="25"/></operator> <name pos:line="90" pos:column="26">AP_MODE_SPECULATIVE<pos:position pos:line="90" pos:column="45"/></name></expr>)<pos:position pos:line="90" pos:column="46"/></condition><then pos:line="90" pos:column="46"> <block pos:line="90" pos:column="47">{
            <comment type="block" pos:line="91" pos:column="13">/* return not more than was asked for */</comment>
            <return pos:line="92" pos:column="13">return <expr><call><name pos:line="92" pos:column="20">h2_util_copy<pos:position pos:line="92" pos:column="32"/></name><argument_list pos:line="92" pos:column="32">(<argument><expr><name pos:line="92" pos:column="33">bb<pos:position pos:line="92" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="37">input<pos:position pos:line="92" pos:column="42"/></name><operator pos:line="92" pos:column="42">-&gt;<pos:position pos:line="92" pos:column="47"/></operator><name pos:line="92" pos:column="44">bb<pos:position pos:line="92" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="48">readbytes<pos:position pos:line="92" pos:column="57"/></name></expr></argument>,  
                                <argument><expr><literal type="string" pos:line="93" pos:column="33">"task_input_read(speculative)"<pos:position pos:line="93" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="65"/></return>
        }<pos:position pos:line="94" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="95" pos:column="9">else <if pos:line="95" pos:column="14">if <condition pos:line="95" pos:column="17">(<expr><name pos:line="95" pos:column="18">mode<pos:position pos:line="95" pos:column="22"/></name> <operator pos:line="95" pos:column="23">==<pos:position pos:line="95" pos:column="25"/></operator> <name pos:line="95" pos:column="26">AP_MODE_GETLINE<pos:position pos:line="95" pos:column="41"/></name></expr>)<pos:position pos:line="95" pos:column="42"/></condition><then pos:line="95" pos:column="42"> <block pos:line="95" pos:column="43">{
            <comment type="block" pos:line="96" pos:column="13">/* we are reading a single LF line, e.g. the HTTP headers */</comment>
            <expr_stmt><expr><name pos:line="97" pos:column="13">status<pos:position pos:line="97" pos:column="19"/></name> <operator pos:line="97" pos:column="20">=<pos:position pos:line="97" pos:column="21"/></operator> <macro><name pos:line="97" pos:column="22">apr_brigade_split_line<pos:position pos:line="97" pos:column="44"/></name><argument_list pos:line="97" pos:column="44">(<argument pos:line="97" pos:column="45">bb<pos:position pos:line="97" pos:column="47"/></argument>, <argument pos:line="97" pos:column="49">input-&gt;bb<pos:position pos:line="97" pos:column="58"/></argument>, <argument pos:line="97" pos:column="60">block<pos:position pos:line="97" pos:column="65"/></argument>,<pos:position pos:line="97" pos:column="66"/></argument_list></macro></expr></expr_stmt></block></then></if></elseif></if></block></then></if></block></function> 
                                    </unit>
