<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2684_httpd-2.4.12.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">isapi_lookup<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">apr_pool_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">p<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">server_rec<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">s<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">request_rec<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">r<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
                          <parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">fpath<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">isapi_loaded<pos:position pos:line="2" pos:column="58"/></name><modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier><modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type> <name pos:line="2" pos:column="61">isa<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">key<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">rv<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <call><name pos:line="7" pos:column="15">apr_thread_mutex_lock<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><name><name pos:line="7" pos:column="37">loaded<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">.<pos:position pos:line="7" pos:column="44"/></operator><name pos:line="7" pos:column="44">lock<pos:position pos:line="7" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="49"/></argument_list></call><operator pos:line="7" pos:column="49">)<pos:position pos:line="7" pos:column="50"/></operator> <operator pos:line="7" pos:column="51">!=<pos:position pos:line="7" pos:column="53"/></operator> <name pos:line="7" pos:column="54">APR_SUCCESS<pos:position pos:line="7" pos:column="65"/></name></expr>)<pos:position pos:line="7" pos:column="66"/></condition><then pos:line="7" pos:column="66"> <block pos:line="7" pos:column="67">{
        <return pos:line="8" pos:column="9">return <expr><name pos:line="8" pos:column="16">rv<pos:position pos:line="8" pos:column="18"/></name></expr>;<pos:position pos:line="8" pos:column="19"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="11" pos:column="5">*<pos:position pos:line="11" pos:column="6"/></operator><name pos:line="11" pos:column="6">isa<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <call><name pos:line="11" pos:column="12">apr_hash_get<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name><name pos:line="11" pos:column="25">loaded<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">.<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="32">hash<pos:position pos:line="11" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">fpath<pos:position pos:line="11" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="45">APR_HASH_KEY_STRING<pos:position pos:line="11" pos:column="64"/></name></expr></argument>)<pos:position pos:line="11" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="66"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">isa<pos:position pos:line="13" pos:column="13"/></name></expr>)<pos:position pos:line="13" pos:column="14"/></condition><then pos:line="13" pos:column="14"> <block pos:line="13" pos:column="15">{

        <comment type="block" pos:line="15" pos:column="9">/* If we find this lock exists, use a set-aside copy of gainlock
         * to avoid race conditions on NULLing the in_progress variable
         * when the load has completed.  Release the global isapi hash
         * lock so other requests can proceed, then rdlock for completion
         * of loading our desired dll or wrlock if we would like to retry
         * loading the dll (because last_load_rv failed and retry is up.)
         */</comment>
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">apr_thread_rwlock_t<pos:position pos:line="22" pos:column="28"/></name> <modifier pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></modifier></type><name pos:line="22" pos:column="30">gainlock<pos:position pos:line="22" pos:column="38"/></name> <init pos:line="22" pos:column="39">= <expr><name><operator pos:line="22" pos:column="41">(<pos:position pos:line="22" pos:column="42"/></operator><operator pos:line="22" pos:column="42">*<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="43">isa<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">)<pos:position pos:line="22" pos:column="47"/></operator><operator pos:line="22" pos:column="47">-&gt;<pos:position pos:line="22" pos:column="52"/></operator><name pos:line="22" pos:column="49">in_progress<pos:position pos:line="22" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="22" pos:column="61"/></decl_stmt>

        <comment type="block" pos:line="24" pos:column="9">/* gainlock is NULLed after the module loads successfully.
         * This free-threaded module can be used without any locking.
         */</comment>
        <if pos:line="27" pos:column="9">if <condition pos:line="27" pos:column="12">(<expr><operator pos:line="27" pos:column="13">!<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">gainlock<pos:position pos:line="27" pos:column="22"/></name></expr>)<pos:position pos:line="27" pos:column="23"/></condition><then pos:line="27" pos:column="23"> <block pos:line="27" pos:column="24">{
            <expr_stmt><expr><name pos:line="28" pos:column="13">rv<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <name><operator pos:line="28" pos:column="18">(<pos:position pos:line="28" pos:column="19"/></operator><operator pos:line="28" pos:column="19">*<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">isa<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">)<pos:position pos:line="28" pos:column="24"/></operator><operator pos:line="28" pos:column="24">-&gt;<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="26">last_load_rv<pos:position pos:line="28" pos:column="38"/></name></name></expr>;<pos:position pos:line="28" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name><name pos:line="29" pos:column="37">loaded<pos:position pos:line="29" pos:column="43"/></name><operator pos:line="29" pos:column="43">.<pos:position pos:line="29" pos:column="44"/></operator><name pos:line="29" pos:column="44">lock<pos:position pos:line="29" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>
            <return pos:line="30" pos:column="13">return <expr><name pos:line="30" pos:column="20">rv<pos:position pos:line="30" pos:column="22"/></name></expr>;<pos:position pos:line="30" pos:column="23"/></return>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>


        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name><operator pos:line="34" pos:column="13">(<pos:position pos:line="34" pos:column="14"/></operator><operator pos:line="34" pos:column="14">*<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">isa<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">)<pos:position pos:line="34" pos:column="19"/></operator><operator pos:line="34" pos:column="19">-&gt;<pos:position pos:line="34" pos:column="24"/></operator><name pos:line="34" pos:column="21">last_load_rv<pos:position pos:line="34" pos:column="33"/></name></name> <operator pos:line="34" pos:column="34">==<pos:position pos:line="34" pos:column="36"/></operator> <name pos:line="34" pos:column="37">APR_SUCCESS<pos:position pos:line="34" pos:column="48"/></name></expr>)<pos:position pos:line="34" pos:column="49"/></condition><then pos:line="34" pos:column="49"> <block pos:line="34" pos:column="50">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><name><name pos:line="35" pos:column="37">loaded<pos:position pos:line="35" pos:column="43"/></name><operator pos:line="35" pos:column="43">.<pos:position pos:line="35" pos:column="44"/></operator><name pos:line="35" pos:column="44">lock<pos:position pos:line="35" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="50"/></expr_stmt>
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><operator pos:line="36" pos:column="17">(<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="18">rv<pos:position pos:line="36" pos:column="20"/></name> <operator pos:line="36" pos:column="21">=<pos:position pos:line="36" pos:column="22"/></operator> <call><name pos:line="36" pos:column="23">apr_thread_rwlock_rdlock<pos:position pos:line="36" pos:column="47"/></name><argument_list pos:line="36" pos:column="47">(<argument><expr><name pos:line="36" pos:column="48">gainlock<pos:position pos:line="36" pos:column="56"/></name></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></call><operator pos:line="36" pos:column="57">)<pos:position pos:line="36" pos:column="58"/></operator>
                    <operator pos:line="37" pos:column="21">!=<pos:position pos:line="37" pos:column="23"/></operator> <name pos:line="37" pos:column="24">APR_SUCCESS<pos:position pos:line="37" pos:column="35"/></name></expr>)<pos:position pos:line="37" pos:column="36"/></condition><then pos:line="37" pos:column="36"> <block pos:line="37" pos:column="37">{
                <return pos:line="38" pos:column="17">return <expr><name pos:line="38" pos:column="24">rv<pos:position pos:line="38" pos:column="26"/></name></expr>;<pos:position pos:line="38" pos:column="27"/></return>
            }<pos:position pos:line="39" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="40" pos:column="13">rv<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <name><operator pos:line="40" pos:column="18">(<pos:position pos:line="40" pos:column="19"/></operator><operator pos:line="40" pos:column="19">*<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="20">isa<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">)<pos:position pos:line="40" pos:column="24"/></operator><operator pos:line="40" pos:column="24">-&gt;<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="26">last_load_rv<pos:position pos:line="40" pos:column="38"/></name></name></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">apr_thread_rwlock_unlock<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><name pos:line="41" pos:column="38">gainlock<pos:position pos:line="41" pos:column="46"/></name></expr></argument>)<pos:position pos:line="41" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="48"/></expr_stmt>
            <return pos:line="42" pos:column="13">return <expr><name pos:line="42" pos:column="20">rv<pos:position pos:line="42" pos:column="22"/></name></expr>;<pos:position pos:line="42" pos:column="23"/></return>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>

        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">apr_time_now<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">()<pos:position pos:line="45" pos:column="27"/></argument_list></call> <operator pos:line="45" pos:column="28">&gt;<pos:position pos:line="45" pos:column="32"/></operator> <name><operator pos:line="45" pos:column="30">(<pos:position pos:line="45" pos:column="31"/></operator><operator pos:line="45" pos:column="31">*<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="32">isa<pos:position pos:line="45" pos:column="35"/></name><operator pos:line="45" pos:column="35">)<pos:position pos:line="45" pos:column="36"/></operator><operator pos:line="45" pos:column="36">-&gt;<pos:position pos:line="45" pos:column="41"/></operator><name pos:line="45" pos:column="38">last_load_time<pos:position pos:line="45" pos:column="52"/></name></name> <operator pos:line="45" pos:column="53">+<pos:position pos:line="45" pos:column="54"/></operator> <name pos:line="45" pos:column="55">ISAPI_RETRY<pos:position pos:line="45" pos:column="66"/></name></expr>)<pos:position pos:line="45" pos:column="67"/></condition><then pos:line="45" pos:column="67"> <block pos:line="45" pos:column="68">{

            <comment type="block" pos:line="47" pos:column="13">/* Remember last_load_time before releasing the global
             * hash lock to avoid colliding with another thread
             * that hit this exception at the same time as our
             * retry attempt, since we unlock the global mutex
             * before attempting a write lock for this module.
             */</comment>
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">apr_time_t<pos:position pos:line="53" pos:column="23"/></name></type> <name pos:line="53" pos:column="24">check_time<pos:position pos:line="53" pos:column="34"/></name> <init pos:line="53" pos:column="35">= <expr><name><operator pos:line="53" pos:column="37">(<pos:position pos:line="53" pos:column="38"/></operator><operator pos:line="53" pos:column="38">*<pos:position pos:line="53" pos:column="39"/></operator><name pos:line="53" pos:column="39">isa<pos:position pos:line="53" pos:column="42"/></name><operator pos:line="53" pos:column="42">)<pos:position pos:line="53" pos:column="43"/></operator><operator pos:line="53" pos:column="43">-&gt;<pos:position pos:line="53" pos:column="48"/></operator><name pos:line="53" pos:column="45">last_load_time<pos:position pos:line="53" pos:column="59"/></name></name></expr></init></decl>;<pos:position pos:line="53" pos:column="60"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="54" pos:column="36"/></name><argument_list pos:line="54" pos:column="36">(<argument><expr><name><name pos:line="54" pos:column="37">loaded<pos:position pos:line="54" pos:column="43"/></name><operator pos:line="54" pos:column="43">.<pos:position pos:line="54" pos:column="44"/></operator><name pos:line="54" pos:column="44">lock<pos:position pos:line="54" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="50"/></expr_stmt>

            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><operator pos:line="56" pos:column="17">(<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="18">rv<pos:position pos:line="56" pos:column="20"/></name> <operator pos:line="56" pos:column="21">=<pos:position pos:line="56" pos:column="22"/></operator> <call><name pos:line="56" pos:column="23">apr_thread_rwlock_wrlock<pos:position pos:line="56" pos:column="47"/></name><argument_list pos:line="56" pos:column="47">(<argument><expr><name pos:line="56" pos:column="48">gainlock<pos:position pos:line="56" pos:column="56"/></name></expr></argument>)<pos:position pos:line="56" pos:column="57"/></argument_list></call><operator pos:line="56" pos:column="57">)<pos:position pos:line="56" pos:column="58"/></operator>
                    <operator pos:line="57" pos:column="21">!=<pos:position pos:line="57" pos:column="23"/></operator> <name pos:line="57" pos:column="24">APR_SUCCESS<pos:position pos:line="57" pos:column="35"/></name></expr>)<pos:position pos:line="57" pos:column="36"/></condition><then pos:line="57" pos:column="36"> <block pos:line="57" pos:column="37">{
                <return pos:line="58" pos:column="17">return <expr><name pos:line="58" pos:column="24">rv<pos:position pos:line="58" pos:column="26"/></name></expr>;<pos:position pos:line="58" pos:column="27"/></return>
            }<pos:position pos:line="59" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="61" pos:column="13">/* If last_load_time is unchanged, we still own this
             * retry, otherwise presume another thread provided
             * our retry (for good or ill).  Relock the global
             * hash for updating last_load_ vars, so their update
             * is always atomic to the global lock.
             */</comment>
            <if pos:line="67" pos:column="13">if <condition pos:line="67" pos:column="16">(<expr><name pos:line="67" pos:column="17">check_time<pos:position pos:line="67" pos:column="27"/></name> <operator pos:line="67" pos:column="28">==<pos:position pos:line="67" pos:column="30"/></operator> <name><operator pos:line="67" pos:column="31">(<pos:position pos:line="67" pos:column="32"/></operator><operator pos:line="67" pos:column="32">*<pos:position pos:line="67" pos:column="33"/></operator><name pos:line="67" pos:column="33">isa<pos:position pos:line="67" pos:column="36"/></name><operator pos:line="67" pos:column="36">)<pos:position pos:line="67" pos:column="37"/></operator><operator pos:line="67" pos:column="37">-&gt;<pos:position pos:line="67" pos:column="42"/></operator><name pos:line="67" pos:column="39">last_load_time<pos:position pos:line="67" pos:column="53"/></name></name></expr>)<pos:position pos:line="67" pos:column="54"/></condition><then pos:line="67" pos:column="54"> <block pos:line="67" pos:column="55">{

                <expr_stmt><expr><name pos:line="69" pos:column="17">rv<pos:position pos:line="69" pos:column="19"/></name> <operator pos:line="69" pos:column="20">=<pos:position pos:line="69" pos:column="21"/></operator> <call><name pos:line="69" pos:column="22">isapi_load<pos:position pos:line="69" pos:column="32"/></name><argument_list pos:line="69" pos:column="32">(<argument><expr><name><name pos:line="69" pos:column="33">loaded<pos:position pos:line="69" pos:column="39"/></name><operator pos:line="69" pos:column="39">.<pos:position pos:line="69" pos:column="40"/></operator><name pos:line="69" pos:column="40">pool<pos:position pos:line="69" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="46">s<pos:position pos:line="69" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="49">*<pos:position pos:line="69" pos:column="50"/></operator><name pos:line="69" pos:column="50">isa<pos:position pos:line="69" pos:column="53"/></name></expr></argument>)<pos:position pos:line="69" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="55"/></expr_stmt>

                <expr_stmt><expr><call><name pos:line="71" pos:column="17">apr_thread_mutex_lock<pos:position pos:line="71" pos:column="38"/></name><argument_list pos:line="71" pos:column="38">(<argument><expr><name><name pos:line="71" pos:column="39">loaded<pos:position pos:line="71" pos:column="45"/></name><operator pos:line="71" pos:column="45">.<pos:position pos:line="71" pos:column="46"/></operator><name pos:line="71" pos:column="46">lock<pos:position pos:line="71" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><name><operator pos:line="72" pos:column="17">(<pos:position pos:line="72" pos:column="18"/></operator><operator pos:line="72" pos:column="18">*<pos:position pos:line="72" pos:column="19"/></operator><name pos:line="72" pos:column="19">isa<pos:position pos:line="72" pos:column="22"/></name><operator pos:line="72" pos:column="22">)<pos:position pos:line="72" pos:column="23"/></operator><operator pos:line="72" pos:column="23">-&gt;<pos:position pos:line="72" pos:column="28"/></operator><name pos:line="72" pos:column="25">last_load_rv<pos:position pos:line="72" pos:column="37"/></name></name> <operator pos:line="72" pos:column="38">=<pos:position pos:line="72" pos:column="39"/></operator> <name pos:line="72" pos:column="40">rv<pos:position pos:line="72" pos:column="42"/></name></expr>;<pos:position pos:line="72" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><name><operator pos:line="73" pos:column="17">(<pos:position pos:line="73" pos:column="18"/></operator><operator pos:line="73" pos:column="18">*<pos:position pos:line="73" pos:column="19"/></operator><name pos:line="73" pos:column="19">isa<pos:position pos:line="73" pos:column="22"/></name><operator pos:line="73" pos:column="22">)<pos:position pos:line="73" pos:column="23"/></operator><operator pos:line="73" pos:column="23">-&gt;<pos:position pos:line="73" pos:column="28"/></operator><name pos:line="73" pos:column="25">last_load_time<pos:position pos:line="73" pos:column="39"/></name></name> <operator pos:line="73" pos:column="40">=<pos:position pos:line="73" pos:column="41"/></operator> <call><name pos:line="73" pos:column="42">apr_time_now<pos:position pos:line="73" pos:column="54"/></name><argument_list pos:line="73" pos:column="54">()<pos:position pos:line="73" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="57"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="74" pos:column="17">apr_thread_mutex_unlock<pos:position pos:line="74" pos:column="40"/></name><argument_list pos:line="74" pos:column="40">(<argument><expr><name><name pos:line="74" pos:column="41">loaded<pos:position pos:line="74" pos:column="47"/></name><operator pos:line="74" pos:column="47">.<pos:position pos:line="74" pos:column="48"/></operator><name pos:line="74" pos:column="48">lock<pos:position pos:line="74" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="54"/></expr_stmt>
            }<pos:position pos:line="75" pos:column="14"/></block></then>
            <else pos:line="76" pos:column="13">else <block pos:line="76" pos:column="18">{
                <expr_stmt><expr><name pos:line="77" pos:column="17">rv<pos:position pos:line="77" pos:column="19"/></name> <operator pos:line="77" pos:column="20">=<pos:position pos:line="77" pos:column="21"/></operator> <name><operator pos:line="77" pos:column="22">(<pos:position pos:line="77" pos:column="23"/></operator><operator pos:line="77" pos:column="23">*<pos:position pos:line="77" pos:column="24"/></operator><name pos:line="77" pos:column="24">isa<pos:position pos:line="77" pos:column="27"/></name><operator pos:line="77" pos:column="27">)<pos:position pos:line="77" pos:column="28"/></operator><operator pos:line="77" pos:column="28">-&gt;<pos:position pos:line="77" pos:column="33"/></operator><name pos:line="77" pos:column="30">last_load_rv<pos:position pos:line="77" pos:column="42"/></name></name></expr>;<pos:position pos:line="77" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="78" pos:column="14"/></block></else></if>
            <expr_stmt><expr><call><name pos:line="79" pos:column="13">apr_thread_rwlock_unlock<pos:position pos:line="79" pos:column="37"/></name><argument_list pos:line="79" pos:column="37">(<argument><expr><name pos:line="79" pos:column="38">gainlock<pos:position pos:line="79" pos:column="46"/></name></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="48"/></expr_stmt>

            <return pos:line="81" pos:column="13">return <expr><name pos:line="81" pos:column="20">rv<pos:position pos:line="81" pos:column="22"/></name></expr>;<pos:position pos:line="81" pos:column="23"/></return>
        }<pos:position pos:line="82" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="84" pos:column="9">/* We haven't hit timeup on retry, let's grab the last_rv
         * within the hash mutex before unlocking.
         */</comment>
        <expr_stmt><expr><name pos:line="87" pos:column="9">rv<pos:position pos:line="87" pos:column="11"/></name> <operator pos:line="87" pos:column="12">=<pos:position pos:line="87" pos:column="13"/></operator> <name><operator pos:line="87" pos:column="14">(<pos:position pos:line="87" pos:column="15"/></operator><operator pos:line="87" pos:column="15">*<pos:position pos:line="87" pos:column="16"/></operator><name pos:line="87" pos:column="16">isa<pos:position pos:line="87" pos:column="19"/></name><operator pos:line="87" pos:column="19">)<pos:position pos:line="87" pos:column="20"/></operator><operator pos:line="87" pos:column="20">-&gt;<pos:position pos:line="87" pos:column="25"/></operator><name pos:line="87" pos:column="22">last_load_rv<pos:position pos:line="87" pos:column="34"/></name></name></expr>;<pos:position pos:line="87" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="88" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="88" pos:column="32"/></name><argument_list pos:line="88" pos:column="32">(<argument><expr><name><name pos:line="88" pos:column="33">loaded<pos:position pos:line="88" pos:column="39"/></name><operator pos:line="88" pos:column="39">.<pos:position pos:line="88" pos:column="40"/></operator><name pos:line="88" pos:column="40">lock<pos:position pos:line="88" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="88" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="46"/></expr_stmt>

        <return pos:line="90" pos:column="9">return <expr><name pos:line="90" pos:column="16">rv<pos:position pos:line="90" pos:column="18"/></name></expr>;<pos:position pos:line="90" pos:column="19"/></return>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="93" pos:column="5">/* If the module was not found, it's time to create a hash key entry
     * before releasing the hash lock to avoid multiple threads from
     * loading the same module.
     */</comment>
    <expr_stmt><expr><name pos:line="97" pos:column="5">key<pos:position pos:line="97" pos:column="8"/></name> <operator pos:line="97" pos:column="9">=<pos:position pos:line="97" pos:column="10"/></operator> <call><name pos:line="97" pos:column="11">apr_pstrdup<pos:position pos:line="97" pos:column="22"/></name><argument_list pos:line="97" pos:column="22">(<argument><expr><name><name pos:line="97" pos:column="23">loaded<pos:position pos:line="97" pos:column="29"/></name><operator pos:line="97" pos:column="29">.<pos:position pos:line="97" pos:column="30"/></operator><name pos:line="97" pos:column="30">pool<pos:position pos:line="97" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="36">fpath<pos:position pos:line="97" pos:column="41"/></name></expr></argument>)<pos:position pos:line="97" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="98" pos:column="5">*<pos:position pos:line="98" pos:column="6"/></operator><name pos:line="98" pos:column="6">isa<pos:position pos:line="98" pos:column="9"/></name> <operator pos:line="98" pos:column="10">=<pos:position pos:line="98" pos:column="11"/></operator> <call><name pos:line="98" pos:column="12">apr_pcalloc<pos:position pos:line="98" pos:column="23"/></name><argument_list pos:line="98" pos:column="23">(<argument><expr><name><name pos:line="98" pos:column="24">loaded<pos:position pos:line="98" pos:column="30"/></name><operator pos:line="98" pos:column="30">.<pos:position pos:line="98" pos:column="31"/></operator><name pos:line="98" pos:column="31">pool<pos:position pos:line="98" pos:column="35"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="98" pos:column="37">sizeof<argument_list pos:line="98" pos:column="43">(<argument><expr><name pos:line="98" pos:column="44">isapi_loaded<pos:position pos:line="98" pos:column="56"/></name></expr></argument>)<pos:position pos:line="98" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="98" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name><operator pos:line="99" pos:column="5">(<pos:position pos:line="99" pos:column="6"/></operator><operator pos:line="99" pos:column="6">*<pos:position pos:line="99" pos:column="7"/></operator><name pos:line="99" pos:column="7">isa<pos:position pos:line="99" pos:column="10"/></name><operator pos:line="99" pos:column="10">)<pos:position pos:line="99" pos:column="11"/></operator><operator pos:line="99" pos:column="11">-&gt;<pos:position pos:line="99" pos:column="16"/></operator><name pos:line="99" pos:column="13">filename<pos:position pos:line="99" pos:column="21"/></name></name> <operator pos:line="99" pos:column="22">=<pos:position pos:line="99" pos:column="23"/></operator> <name pos:line="99" pos:column="24">key<pos:position pos:line="99" pos:column="27"/></name></expr>;<pos:position pos:line="99" pos:column="28"/></expr_stmt>
    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><name pos:line="100" pos:column="9">r<pos:position pos:line="100" pos:column="10"/></name></expr>)<pos:position pos:line="100" pos:column="11"/></condition><then pos:line="100" pos:column="11"> <block pos:line="100" pos:column="12">{
        <comment type="block" pos:line="101" pos:column="9">/* A mutex that exists only long enough to attempt to
         * load this isapi dll, the release this module to all
         * other takers that came along during the one-time
         * load process.  Short lifetime for this lock would
         * be great, however, using r-&gt;pool is nasty if those
         * blocked on the lock haven't all unlocked before we
         * attempt to destroy.  A nastier race condition than
         * I want to deal with at this moment...
         */</comment>
        <expr_stmt><expr><call><name pos:line="110" pos:column="9">apr_thread_rwlock_create<pos:position pos:line="110" pos:column="33"/></name><argument_list pos:line="110" pos:column="33">(<argument><expr><operator pos:line="110" pos:column="34">&amp;<pos:position pos:line="110" pos:column="39"/></operator><name><operator pos:line="110" pos:column="35">(<pos:position pos:line="110" pos:column="36"/></operator><operator pos:line="110" pos:column="36">*<pos:position pos:line="110" pos:column="37"/></operator><name pos:line="110" pos:column="37">isa<pos:position pos:line="110" pos:column="40"/></name><operator pos:line="110" pos:column="40">)<pos:position pos:line="110" pos:column="41"/></operator><operator pos:line="110" pos:column="41">-&gt;<pos:position pos:line="110" pos:column="46"/></operator><name pos:line="110" pos:column="43">in_progress<pos:position pos:line="110" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="56">loaded<pos:position pos:line="110" pos:column="62"/></name><operator pos:line="110" pos:column="62">.<pos:position pos:line="110" pos:column="63"/></operator><name pos:line="110" pos:column="63">pool<pos:position pos:line="110" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="111" pos:column="9">apr_thread_rwlock_wrlock<pos:position pos:line="111" pos:column="33"/></name><argument_list pos:line="111" pos:column="33">(<argument><expr><name><operator pos:line="111" pos:column="34">(<pos:position pos:line="111" pos:column="35"/></operator><operator pos:line="111" pos:column="35">*<pos:position pos:line="111" pos:column="36"/></operator><name pos:line="111" pos:column="36">isa<pos:position pos:line="111" pos:column="39"/></name><operator pos:line="111" pos:column="39">)<pos:position pos:line="111" pos:column="40"/></operator><operator pos:line="111" pos:column="40">-&gt;<pos:position pos:line="111" pos:column="45"/></operator><name pos:line="111" pos:column="42">in_progress<pos:position pos:line="111" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="111" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="114" pos:column="5">apr_hash_set<pos:position pos:line="114" pos:column="17"/></name><argument_list pos:line="114" pos:column="17">(<argument><expr><name><name pos:line="114" pos:column="18">loaded<pos:position pos:line="114" pos:column="24"/></name><operator pos:line="114" pos:column="24">.<pos:position pos:line="114" pos:column="25"/></operator><name pos:line="114" pos:column="25">hash<pos:position pos:line="114" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="31">key<pos:position pos:line="114" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="36">APR_HASH_KEY_STRING<pos:position pos:line="114" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="114" pos:column="57">*<pos:position pos:line="114" pos:column="58"/></operator><name pos:line="114" pos:column="58">isa<pos:position pos:line="114" pos:column="61"/></name></expr></argument>)<pos:position pos:line="114" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="63"/></expr_stmt>

    <comment type="block" pos:line="116" pos:column="5">/* Now attempt to load the isapi on our own time,
     * allow other isapi processing to resume.
     */</comment>
    <expr_stmt><expr><call><name pos:line="119" pos:column="5">apr_thread_mutex_unlock<pos:position pos:line="119" pos:column="28"/></name><argument_list pos:line="119" pos:column="28">(<argument><expr><name><name pos:line="119" pos:column="29">loaded<pos:position pos:line="119" pos:column="35"/></name><operator pos:line="119" pos:column="35">.<pos:position pos:line="119" pos:column="36"/></operator><name pos:line="119" pos:column="36">lock<pos:position pos:line="119" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="119" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name pos:line="121" pos:column="5">rv<pos:position pos:line="121" pos:column="7"/></name> <operator pos:line="121" pos:column="8">=<pos:position pos:line="121" pos:column="9"/></operator> <call><name pos:line="121" pos:column="10">isapi_load<pos:position pos:line="121" pos:column="20"/></name><argument_list pos:line="121" pos:column="20">(<argument><expr><name><name pos:line="121" pos:column="21">loaded<pos:position pos:line="121" pos:column="27"/></name><operator pos:line="121" pos:column="27">.<pos:position pos:line="121" pos:column="28"/></operator><name pos:line="121" pos:column="28">pool<pos:position pos:line="121" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="34">s<pos:position pos:line="121" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="121" pos:column="37">*<pos:position pos:line="121" pos:column="38"/></operator><name pos:line="121" pos:column="38">isa<pos:position pos:line="121" pos:column="41"/></name></expr></argument>)<pos:position pos:line="121" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name><operator pos:line="122" pos:column="5">(<pos:position pos:line="122" pos:column="6"/></operator><operator pos:line="122" pos:column="6">*<pos:position pos:line="122" pos:column="7"/></operator><name pos:line="122" pos:column="7">isa<pos:position pos:line="122" pos:column="10"/></name><operator pos:line="122" pos:column="10">)<pos:position pos:line="122" pos:column="11"/></operator><operator pos:line="122" pos:column="11">-&gt;<pos:position pos:line="122" pos:column="16"/></operator><name pos:line="122" pos:column="13">last_load_time<pos:position pos:line="122" pos:column="27"/></name></name> <operator pos:line="122" pos:column="28">=<pos:position pos:line="122" pos:column="29"/></operator> <call><name pos:line="122" pos:column="30">apr_time_now<pos:position pos:line="122" pos:column="42"/></name><argument_list pos:line="122" pos:column="42">()<pos:position pos:line="122" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><operator pos:line="123" pos:column="5">(<pos:position pos:line="123" pos:column="6"/></operator><operator pos:line="123" pos:column="6">*<pos:position pos:line="123" pos:column="7"/></operator><name pos:line="123" pos:column="7">isa<pos:position pos:line="123" pos:column="10"/></name><operator pos:line="123" pos:column="10">)<pos:position pos:line="123" pos:column="11"/></operator><operator pos:line="123" pos:column="11">-&gt;<pos:position pos:line="123" pos:column="16"/></operator><name pos:line="123" pos:column="13">last_load_rv<pos:position pos:line="123" pos:column="25"/></name></name> <operator pos:line="123" pos:column="26">=<pos:position pos:line="123" pos:column="27"/></operator> <name pos:line="123" pos:column="28">rv<pos:position pos:line="123" pos:column="30"/></name></expr>;<pos:position pos:line="123" pos:column="31"/></expr_stmt>

    <if pos:line="125" pos:column="5">if <condition pos:line="125" pos:column="8">(<expr><name pos:line="125" pos:column="9">r<pos:position pos:line="125" pos:column="10"/></name> <operator pos:line="125" pos:column="11">&amp;&amp;<pos:position pos:line="125" pos:column="21"/></operator> <operator pos:line="125" pos:column="14">(<pos:position pos:line="125" pos:column="15"/></operator><name pos:line="125" pos:column="15">rv<pos:position pos:line="125" pos:column="17"/></name> <operator pos:line="125" pos:column="18">==<pos:position pos:line="125" pos:column="20"/></operator> <name pos:line="125" pos:column="21">APR_SUCCESS<pos:position pos:line="125" pos:column="32"/></name><operator pos:line="125" pos:column="32">)<pos:position pos:line="125" pos:column="33"/></operator></expr>)<pos:position pos:line="125" pos:column="34"/></condition><then pos:line="125" pos:column="34"> <block pos:line="125" pos:column="35">{
        <comment type="block" pos:line="126" pos:column="9">/* Let others who are blocked on this particular
         * module resume their requests, for better or worse.
         */</comment>
        <decl_stmt><decl><type><name pos:line="129" pos:column="9">apr_thread_rwlock_t<pos:position pos:line="129" pos:column="28"/></name> <modifier pos:line="129" pos:column="29">*<pos:position pos:line="129" pos:column="30"/></modifier></type><name pos:line="129" pos:column="30">unlock<pos:position pos:line="129" pos:column="36"/></name> <init pos:line="129" pos:column="37">= <expr><name><operator pos:line="129" pos:column="39">(<pos:position pos:line="129" pos:column="40"/></operator><operator pos:line="129" pos:column="40">*<pos:position pos:line="129" pos:column="41"/></operator><name pos:line="129" pos:column="41">isa<pos:position pos:line="129" pos:column="44"/></name><operator pos:line="129" pos:column="44">)<pos:position pos:line="129" pos:column="45"/></operator><operator pos:line="129" pos:column="45">-&gt;<pos:position pos:line="129" pos:column="50"/></operator><name pos:line="129" pos:column="47">in_progress<pos:position pos:line="129" pos:column="58"/></name></name></expr></init></decl>;<pos:position pos:line="129" pos:column="59"/></decl_stmt>
        <expr_stmt><expr><name><operator pos:line="130" pos:column="9">(<pos:position pos:line="130" pos:column="10"/></operator><operator pos:line="130" pos:column="10">*<pos:position pos:line="130" pos:column="11"/></operator><name pos:line="130" pos:column="11">isa<pos:position pos:line="130" pos:column="14"/></name><operator pos:line="130" pos:column="14">)<pos:position pos:line="130" pos:column="15"/></operator><operator pos:line="130" pos:column="15">-&gt;<pos:position pos:line="130" pos:column="20"/></operator><name pos:line="130" pos:column="17">in_progress<pos:position pos:line="130" pos:column="28"/></name></name> <operator pos:line="130" pos:column="29">=<pos:position pos:line="130" pos:column="30"/></operator> <name pos:line="130" pos:column="31">NULL<pos:position pos:line="130" pos:column="35"/></name></expr>;<pos:position pos:line="130" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="131" pos:column="9">apr_thread_rwlock_unlock<pos:position pos:line="131" pos:column="33"/></name><argument_list pos:line="131" pos:column="33">(<argument><expr><name pos:line="131" pos:column="34">unlock<pos:position pos:line="131" pos:column="40"/></name></expr></argument>)<pos:position pos:line="131" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="132" pos:column="6"/></block></then>
    <elseif pos:line="133" pos:column="5">else <if pos:line="133" pos:column="10">if <condition pos:line="133" pos:column="13">(<expr><operator pos:line="133" pos:column="14">!<pos:position pos:line="133" pos:column="15"/></operator><name pos:line="133" pos:column="15">r<pos:position pos:line="133" pos:column="16"/></name> <operator pos:line="133" pos:column="17">&amp;&amp;<pos:position pos:line="133" pos:column="27"/></operator> <operator pos:line="133" pos:column="20">(<pos:position pos:line="133" pos:column="21"/></operator><name pos:line="133" pos:column="21">rv<pos:position pos:line="133" pos:column="23"/></name> <operator pos:line="133" pos:column="24">!=<pos:position pos:line="133" pos:column="26"/></operator> <name pos:line="133" pos:column="27">APR_SUCCESS<pos:position pos:line="133" pos:column="38"/></name><operator pos:line="133" pos:column="38">)<pos:position pos:line="133" pos:column="39"/></operator></expr>)<pos:position pos:line="133" pos:column="40"/></condition><then pos:line="133" pos:column="40"> <block pos:line="133" pos:column="41">{
        <comment type="block" pos:line="134" pos:column="9">/* We must leave a rwlock around for requests to retry
         * loading this dll after timeup... since we were in
         * the setup code we had avoided creating this lock.
         */</comment>
        <expr_stmt><expr><call><name pos:line="138" pos:column="9">apr_thread_rwlock_create<pos:position pos:line="138" pos:column="33"/></name><argument_list pos:line="138" pos:column="33">(<argument><expr><operator pos:line="138" pos:column="34">&amp;<pos:position pos:line="138" pos:column="39"/></operator><name><operator pos:line="138" pos:column="35">(<pos:position pos:line="138" pos:column="36"/></operator><operator pos:line="138" pos:column="36">*<pos:position pos:line="138" pos:column="37"/></operator><name pos:line="138" pos:column="37">isa<pos:position pos:line="138" pos:column="40"/></name><operator pos:line="138" pos:column="40">)<pos:position pos:line="138" pos:column="41"/></operator><operator pos:line="138" pos:column="41">-&gt;<pos:position pos:line="138" pos:column="46"/></operator><name pos:line="138" pos:column="43">in_progress<pos:position pos:line="138" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="138" pos:column="56">loaded<pos:position pos:line="138" pos:column="62"/></name><operator pos:line="138" pos:column="62">.<pos:position pos:line="138" pos:column="63"/></operator><name pos:line="138" pos:column="63">pool<pos:position pos:line="138" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="138" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="69"/></expr_stmt>
    }<pos:position pos:line="139" pos:column="6"/></block></then></if></elseif></if>

    <return pos:line="141" pos:column="5">return <expr><name><operator pos:line="141" pos:column="12">(<pos:position pos:line="141" pos:column="13"/></operator><operator pos:line="141" pos:column="13">*<pos:position pos:line="141" pos:column="14"/></operator><name pos:line="141" pos:column="14">isa<pos:position pos:line="141" pos:column="17"/></name><operator pos:line="141" pos:column="17">)<pos:position pos:line="141" pos:column="18"/></operator><operator pos:line="141" pos:column="18">-&gt;<pos:position pos:line="141" pos:column="23"/></operator><name pos:line="141" pos:column="20">last_load_rv<pos:position pos:line="141" pos:column="32"/></name></name></expr>;<pos:position pos:line="141" pos:column="33"/></return>
}<pos:position pos:line="142" pos:column="2"/></block></function></unit>
