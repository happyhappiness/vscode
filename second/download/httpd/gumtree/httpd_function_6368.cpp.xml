<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6368.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">stream_done<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">h2_mplx<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">m<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">h2_stream<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">stream<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">rst_error<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="70"/></parameter_list> 
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">h2_task<pos:position pos:line="3" pos:column="12"/></name> <modifier pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></modifier></type><name pos:line="3" pos:column="14">task<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
    
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">ap_log_cerror<pos:position pos:line="5" pos:column="18"/></name><argument_list pos:line="5" pos:column="18">(<argument><expr><name pos:line="5" pos:column="19">APLOG_MARK<pos:position pos:line="5" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="31">APLOG_TRACE3<pos:position pos:line="5" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="45">0<pos:position pos:line="5" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="5" pos:column="48">m<pos:position pos:line="5" pos:column="49"/></name><operator pos:line="5" pos:column="49">-&gt;<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="51">c<pos:position pos:line="5" pos:column="52"/></name></name></expr></argument>, 
                  <argument><expr><literal type="string" pos:line="6" pos:column="19">"h2_stream(%ld-%d): done"<pos:position pos:line="6" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="46">m<pos:position pos:line="6" pos:column="47"/></name><operator pos:line="6" pos:column="47">-&gt;<pos:position pos:line="6" pos:column="52"/></operator><name pos:line="6" pos:column="49">c<pos:position pos:line="6" pos:column="50"/></name><operator pos:line="6" pos:column="50">-&gt;<pos:position pos:line="6" pos:column="55"/></operator><name pos:line="6" pos:column="52">id<pos:position pos:line="6" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="6" pos:column="56">stream<pos:position pos:line="6" pos:column="62"/></name><operator pos:line="6" pos:column="62">-&gt;<pos:position pos:line="6" pos:column="67"/></operator><name pos:line="6" pos:column="64">id<pos:position pos:line="6" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="68"/></expr_stmt>
    <comment type="block" pos:line="7" pos:column="5">/* Situation: we are, on the master connection, done with processing
     * the stream. Either we have handled it successfully, or the stream
     * was reset by the client or the connection is gone and we are 
     * shutting down the whole session.
     *
     * We possibly have created a task for this stream to be processed
     * on a slave connection. The processing might actually be ongoing
     * right now or has already finished. A finished task waits for its
     * stream to be done. This is the common case.
     * 
     * If the stream had input (e.g. the request had a body), a task
     * may have read, or is still reading buckets from the input beam.
     * This means that the task is referencing memory from the stream's
     * pool (or the master connection bucket alloc). Before we can free
     * the stream pool, we need to make sure that those references are
     * gone. This is what h2_beam_shutdown() on the input waits for.
     *
     * With the input handled, we can tear down that beam and care
     * about the output beam. The stream might still have buffered some
     * buckets read from the output, so we need to get rid of those. That
     * is done by h2_stream_cleanup().
     *
     * Now it is save to destroy the task (if it exists and is finished).
     * 
     * FIXME: we currently destroy the stream, even if the task is still
     * ongoing. This is not ok, since task-&gt;request is coming from stream
     * memory. We should either copy it on task creation or wait with the
     * stream destruction until the task is done. 
     */</comment>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">h2_iq_remove<pos:position pos:line="36" pos:column="17"/></name><argument_list pos:line="36" pos:column="17">(<argument><expr><name><name pos:line="36" pos:column="18">m<pos:position pos:line="36" pos:column="19"/></name><operator pos:line="36" pos:column="19">-&gt;<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="21">q<pos:position pos:line="36" pos:column="22"/></name></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="24">stream<pos:position pos:line="36" pos:column="30"/></name><operator pos:line="36" pos:column="30">-&gt;<pos:position pos:line="36" pos:column="35"/></operator><name pos:line="36" pos:column="32">id<pos:position pos:line="36" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">h2_ihash_remove<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name><name pos:line="37" pos:column="21">m<pos:position pos:line="37" pos:column="22"/></name><operator pos:line="37" pos:column="22">-&gt;<pos:position pos:line="37" pos:column="27"/></operator><name pos:line="37" pos:column="24">sready<pos:position pos:line="37" pos:column="30"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="32">stream<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">-&gt;<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="40">id<pos:position pos:line="37" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">h2_ihash_remove<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name><name pos:line="38" pos:column="21">m<pos:position pos:line="38" pos:column="22"/></name><operator pos:line="38" pos:column="22">-&gt;<pos:position pos:line="38" pos:column="27"/></operator><name pos:line="38" pos:column="24">sresume<pos:position pos:line="38" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="33">stream<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">-&gt;<pos:position pos:line="38" pos:column="44"/></operator><name pos:line="38" pos:column="41">id<pos:position pos:line="38" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">h2_ihash_remove<pos:position pos:line="39" pos:column="20"/></name><argument_list pos:line="39" pos:column="20">(<argument><expr><name><name pos:line="39" pos:column="21">m<pos:position pos:line="39" pos:column="22"/></name><operator pos:line="39" pos:column="22">-&gt;<pos:position pos:line="39" pos:column="27"/></operator><name pos:line="39" pos:column="24">streams<pos:position pos:line="39" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="33">stream<pos:position pos:line="39" pos:column="39"/></name><operator pos:line="39" pos:column="39">-&gt;<pos:position pos:line="39" pos:column="44"/></operator><name pos:line="39" pos:column="41">id<pos:position pos:line="39" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name><name pos:line="40" pos:column="9">stream<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">input<pos:position pos:line="40" pos:column="22"/></name></name></expr>)<pos:position pos:line="40" pos:column="23"/></condition><then pos:line="40" pos:column="23"> <block pos:line="40" pos:column="24">{
        <expr_stmt><expr><name><name pos:line="41" pos:column="9">m<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">-&gt;<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="12">tx_handles_reserved<pos:position pos:line="41" pos:column="31"/></name></name> <operator pos:line="41" pos:column="32">+=<pos:position pos:line="41" pos:column="34"/></operator> <call><name pos:line="41" pos:column="35">h2_beam_get_files_beamed<pos:position pos:line="41" pos:column="59"/></name><argument_list pos:line="41" pos:column="59">(<argument><expr><name><name pos:line="41" pos:column="60">stream<pos:position pos:line="41" pos:column="66"/></name><operator pos:line="41" pos:column="66">-&gt;<pos:position pos:line="41" pos:column="71"/></operator><name pos:line="41" pos:column="68">input<pos:position pos:line="41" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">h2_beam_on_consumed<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name><name pos:line="42" pos:column="29">stream<pos:position pos:line="42" pos:column="35"/></name><operator pos:line="42" pos:column="35">-&gt;<pos:position pos:line="42" pos:column="40"/></operator><name pos:line="42" pos:column="37">input<pos:position pos:line="42" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="44">NULL<pos:position pos:line="42" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="50">NULL<pos:position pos:line="42" pos:column="54"/></name></expr></argument>)<pos:position pos:line="42" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="56"/></expr_stmt>
        <comment type="block" pos:line="43" pos:column="9">/* Let anyone blocked reading know that there is no more to come */</comment>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">h2_beam_abort<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><name><name pos:line="44" pos:column="23">stream<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">-&gt;<pos:position pos:line="44" pos:column="34"/></operator><name pos:line="44" pos:column="31">input<pos:position pos:line="44" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
        <comment type="block" pos:line="45" pos:column="9">/* Remove mutex after, so that abort still finds cond to signal */</comment>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">h2_beam_mutex_set<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name><name pos:line="46" pos:column="27">stream<pos:position pos:line="46" pos:column="33"/></name><operator pos:line="46" pos:column="33">-&gt;<pos:position pos:line="46" pos:column="38"/></operator><name pos:line="46" pos:column="35">input<pos:position pos:line="46" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="42">NULL<pos:position pos:line="46" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="48">NULL<pos:position pos:line="46" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="54">NULL<pos:position pos:line="46" pos:column="58"/></name></expr></argument>)<pos:position pos:line="46" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">h2_stream_cleanup<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><name pos:line="48" pos:column="23">stream<pos:position pos:line="48" pos:column="29"/></name></expr></argument>)<pos:position pos:line="48" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><name pos:line="50" pos:column="5">task<pos:position pos:line="50" pos:column="9"/></name> <operator pos:line="50" pos:column="10">=<pos:position pos:line="50" pos:column="11"/></operator> <call><name pos:line="50" pos:column="12">h2_ihash_get<pos:position pos:line="50" pos:column="24"/></name><argument_list pos:line="50" pos:column="24">(<argument><expr><name><name pos:line="50" pos:column="25">m<pos:position pos:line="50" pos:column="26"/></name><operator pos:line="50" pos:column="26">-&gt;<pos:position pos:line="50" pos:column="31"/></operator><name pos:line="50" pos:column="28">tasks<pos:position pos:line="50" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="35">stream<pos:position pos:line="50" pos:column="41"/></name><operator pos:line="50" pos:column="41">-&gt;<pos:position pos:line="50" pos:column="46"/></operator><name pos:line="50" pos:column="43">id<pos:position pos:line="50" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="47"/></expr_stmt>
    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name pos:line="51" pos:column="9">task<pos:position pos:line="51" pos:column="13"/></name></expr>)<pos:position pos:line="51" pos:column="14"/></condition><then pos:line="51" pos:column="14"> <block pos:line="51" pos:column="15">{
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><operator pos:line="52" pos:column="13">!<pos:position pos:line="52" pos:column="14"/></operator><name><name pos:line="52" pos:column="14">task<pos:position pos:line="52" pos:column="18"/></name><operator pos:line="52" pos:column="18">-&gt;<pos:position pos:line="52" pos:column="23"/></operator><name pos:line="52" pos:column="20">worker_done<pos:position pos:line="52" pos:column="31"/></name></name></expr>)<pos:position pos:line="52" pos:column="32"/></condition><then pos:line="52" pos:column="32"> <block pos:line="52" pos:column="33">{
            <comment type="block" pos:line="53" pos:column="13">/* task still running, cleanup once it is done */</comment>
            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><name pos:line="54" pos:column="17">rst_error<pos:position pos:line="54" pos:column="26"/></name></expr>)<pos:position pos:line="54" pos:column="27"/></condition><then pos:line="54" pos:column="27"> <block pos:line="54" pos:column="28">{
                <expr_stmt><expr><call><name pos:line="55" pos:column="17">h2_task_rst<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">task<pos:position pos:line="55" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">rst_error<pos:position pos:line="55" pos:column="44"/></name></expr></argument>)<pos:position pos:line="55" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="56" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">h2_ihash_add<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">(<argument><expr><name><name pos:line="57" pos:column="26">m<pos:position pos:line="57" pos:column="27"/></name><operator pos:line="57" pos:column="27">-&gt;<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="29">shold<pos:position pos:line="57" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="36">stream<pos:position pos:line="57" pos:column="42"/></name></expr></argument>)<pos:position pos:line="57" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt>
            <return pos:line="58" pos:column="13">return;<pos:position pos:line="58" pos:column="20"/></return>
        }<pos:position pos:line="59" pos:column="10"/></block></then>
        <else pos:line="60" pos:column="9">else <block pos:line="60" pos:column="14">{
            <comment type="block" pos:line="61" pos:column="13">/* already finished */</comment>
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">task_destroy<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">m<pos:position pos:line="62" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="29">task<pos:position pos:line="62" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="35">0<pos:position pos:line="62" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="63" pos:column="10"/></block></else></if>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">h2_stream_destroy<pos:position pos:line="65" pos:column="22"/></name><argument_list pos:line="65" pos:column="22">(<argument><expr><name pos:line="65" pos:column="23">stream<pos:position pos:line="65" pos:column="29"/></name></expr></argument>)<pos:position pos:line="65" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="31"/></expr_stmt>
}<pos:position pos:line="66" pos:column="2"/></block></function></unit>
