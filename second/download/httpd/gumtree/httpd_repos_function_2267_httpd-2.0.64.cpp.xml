<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2267_httpd-2.0.64.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">worker_stack_wait<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">worker_stack<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">stack<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">worker_wakeup_info<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">wakeup<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="6" pos:column="5">wakeup<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">state<pos:position pos:line="6" pos:column="18"/></name></name> <operator pos:line="6" pos:column="19">=<pos:position pos:line="6" pos:column="20"/></operator> <name pos:line="6" pos:column="21">WORKER_IDLE<pos:position pos:line="6" pos:column="32"/></name></expr>;<pos:position pos:line="6" pos:column="33"/></expr_stmt>
    
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">(<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">rv<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">=<pos:position pos:line="8" pos:column="14"/></operator> <call><name pos:line="8" pos:column="15">apr_thread_mutex_lock<pos:position pos:line="8" pos:column="36"/></name><argument_list pos:line="8" pos:column="36">(<argument><expr><name><name pos:line="8" pos:column="37">stack<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">-&gt;<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="44">mutex<pos:position pos:line="8" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call><operator pos:line="8" pos:column="50">)<pos:position pos:line="8" pos:column="51"/></operator> <operator pos:line="8" pos:column="52">!=<pos:position pos:line="8" pos:column="54"/></operator> <name pos:line="8" pos:column="55">APR_SUCCESS<pos:position pos:line="8" pos:column="66"/></name></expr>)<pos:position pos:line="8" pos:column="67"/></condition><then pos:line="8" pos:column="67"> <block pos:line="8" pos:column="68">{
        <return pos:line="9" pos:column="9">return <expr><name pos:line="9" pos:column="16">rv<pos:position pos:line="9" pos:column="18"/></name></expr>;<pos:position pos:line="9" pos:column="19"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">stack<pos:position pos:line="11" pos:column="14"/></name><operator pos:line="11" pos:column="14">-&gt;<pos:position pos:line="11" pos:column="19"/></operator><name pos:line="11" pos:column="16">terminated<pos:position pos:line="11" pos:column="26"/></name></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27"> <block pos:line="11" pos:column="28">{
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">rv<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <call><name pos:line="12" pos:column="19">apr_thread_mutex_unlock<pos:position pos:line="12" pos:column="42"/></name><argument_list pos:line="12" pos:column="42">(<argument><expr><name><name pos:line="12" pos:column="43">stack<pos:position pos:line="12" pos:column="48"/></name><operator pos:line="12" pos:column="48">-&gt;<pos:position pos:line="12" pos:column="53"/></operator><name pos:line="12" pos:column="50">mutex<pos:position pos:line="12" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="56"/></argument_list></call><operator pos:line="12" pos:column="56">)<pos:position pos:line="12" pos:column="57"/></operator> <operator pos:line="12" pos:column="58">!=<pos:position pos:line="12" pos:column="60"/></operator> <name pos:line="12" pos:column="61">APR_SUCCESS<pos:position pos:line="12" pos:column="72"/></name></expr>)<pos:position pos:line="12" pos:column="73"/></condition><then pos:line="12" pos:column="73"> <block pos:line="12" pos:column="74">{
            <return pos:line="13" pos:column="13">return <expr><name pos:line="13" pos:column="20">rv<pos:position pos:line="13" pos:column="22"/></name></expr>;<pos:position pos:line="13" pos:column="23"/></return>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
        <return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">APR_EOF<pos:position pos:line="15" pos:column="23"/></name></expr>;<pos:position pos:line="15" pos:column="24"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">stack<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">nelts<pos:position pos:line="17" pos:column="21"/></name></name> <operator pos:line="17" pos:column="22">==<pos:position pos:line="17" pos:column="24"/></operator> <name><name pos:line="17" pos:column="25">stack<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">nalloc<pos:position pos:line="17" pos:column="38"/></name></name></expr>)<pos:position pos:line="17" pos:column="39"/></condition><then pos:line="17" pos:column="39"> <block pos:line="17" pos:column="40">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">(<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">rv<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <call><name pos:line="18" pos:column="19">apr_thread_mutex_unlock<pos:position pos:line="18" pos:column="42"/></name><argument_list pos:line="18" pos:column="42">(<argument><expr><name><name pos:line="18" pos:column="43">stack<pos:position pos:line="18" pos:column="48"/></name><operator pos:line="18" pos:column="48">-&gt;<pos:position pos:line="18" pos:column="53"/></operator><name pos:line="18" pos:column="50">mutex<pos:position pos:line="18" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call><operator pos:line="18" pos:column="56">)<pos:position pos:line="18" pos:column="57"/></operator> <operator pos:line="18" pos:column="58">!=<pos:position pos:line="18" pos:column="60"/></operator> <name pos:line="18" pos:column="61">APR_SUCCESS<pos:position pos:line="18" pos:column="72"/></name></expr>)<pos:position pos:line="18" pos:column="73"/></condition><then pos:line="18" pos:column="73"> <block pos:line="18" pos:column="74">{
            <return pos:line="19" pos:column="13">return <expr><name pos:line="19" pos:column="20">rv<pos:position pos:line="19" pos:column="22"/></name></expr>;<pos:position pos:line="19" pos:column="23"/></return>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
        <return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">APR_ENOSPC<pos:position pos:line="21" pos:column="26"/></name></expr>;<pos:position pos:line="21" pos:column="27"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">stack<pos:position pos:line="23" pos:column="10"/></name><operator pos:line="23" pos:column="10">-&gt;<pos:position pos:line="23" pos:column="15"/></operator><name pos:line="23" pos:column="12">stack<pos:position pos:line="23" pos:column="17"/></name><index pos:line="23" pos:column="17">[<expr><name><name pos:line="23" pos:column="18">stack<pos:position pos:line="23" pos:column="23"/></name><operator pos:line="23" pos:column="23">-&gt;<pos:position pos:line="23" pos:column="28"/></operator><name pos:line="23" pos:column="25">nelts<pos:position pos:line="23" pos:column="30"/></name></name></expr>]<pos:position pos:line="23" pos:column="31"/></index></name> <operator pos:line="23" pos:column="32">=<pos:position pos:line="23" pos:column="33"/></operator> <name pos:line="23" pos:column="34">wakeup<pos:position pos:line="23" pos:column="40"/></name></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
    <comment type="block" pos:line="24" pos:column="5">/* Signal a blocking listener thread only if we just made the
     * stack non-empty. */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">stack<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">-&gt;<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="16">nelts<pos:position pos:line="26" pos:column="21"/></name></name><operator pos:line="26" pos:column="21">++<pos:position pos:line="26" pos:column="23"/></operator> <operator pos:line="26" pos:column="24">==<pos:position pos:line="26" pos:column="26"/></operator> <literal type="number" pos:line="26" pos:column="27">0<pos:position pos:line="26" pos:column="28"/></literal></expr>)<pos:position pos:line="26" pos:column="29"/></condition><then pos:line="26" pos:column="29"> <block pos:line="26" pos:column="30">{
        <expr_stmt><expr><operator pos:line="27" pos:column="9">(<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">void<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">)<pos:position pos:line="27" pos:column="15"/></operator><call><name pos:line="27" pos:column="15">apr_thread_cond_signal<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name><name pos:line="27" pos:column="38">stack<pos:position pos:line="27" pos:column="43"/></name><operator pos:line="27" pos:column="43">-&gt;<pos:position pos:line="27" pos:column="48"/></operator><name pos:line="27" pos:column="45">cond<pos:position pos:line="27" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">rv<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">apr_thread_mutex_unlock<pos:position pos:line="29" pos:column="38"/></name><argument_list pos:line="29" pos:column="38">(<argument><expr><name><name pos:line="29" pos:column="39">stack<pos:position pos:line="29" pos:column="44"/></name><operator pos:line="29" pos:column="44">-&gt;<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="46">mutex<pos:position pos:line="29" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call><operator pos:line="29" pos:column="52">)<pos:position pos:line="29" pos:column="53"/></operator> <operator pos:line="29" pos:column="54">!=<pos:position pos:line="29" pos:column="56"/></operator> <name pos:line="29" pos:column="57">APR_SUCCESS<pos:position pos:line="29" pos:column="68"/></name></expr>)<pos:position pos:line="29" pos:column="69"/></condition><then pos:line="29" pos:column="69"> <block pos:line="29" pos:column="70">{
        <return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">rv<pos:position pos:line="30" pos:column="18"/></name></expr>;<pos:position pos:line="30" pos:column="19"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="33" pos:column="5">/* At this point we've already added this worker to the stack, now
     * we just wait until the listener has accept()ed a connection
     * for us. */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">(<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">rv<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <call><name pos:line="36" pos:column="15">apr_thread_mutex_lock<pos:position pos:line="36" pos:column="36"/></name><argument_list pos:line="36" pos:column="36">(<argument><expr><name><name pos:line="36" pos:column="37">wakeup<pos:position pos:line="36" pos:column="43"/></name><operator pos:line="36" pos:column="43">-&gt;<pos:position pos:line="36" pos:column="48"/></operator><name pos:line="36" pos:column="45">mutex<pos:position pos:line="36" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="51"/></argument_list></call><operator pos:line="36" pos:column="51">)<pos:position pos:line="36" pos:column="52"/></operator> <operator pos:line="36" pos:column="53">!=<pos:position pos:line="36" pos:column="55"/></operator> <name pos:line="36" pos:column="56">APR_SUCCESS<pos:position pos:line="36" pos:column="67"/></name></expr>)<pos:position pos:line="36" pos:column="68"/></condition><then pos:line="36" pos:column="68"> <block pos:line="36" pos:column="69">{
        <return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">rv<pos:position pos:line="37" pos:column="18"/></name></expr>;<pos:position pos:line="37" pos:column="19"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    <while pos:line="39" pos:column="5">while <condition pos:line="39" pos:column="11">(<expr><name><name pos:line="39" pos:column="12">wakeup<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">-&gt;<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="20">state<pos:position pos:line="39" pos:column="25"/></name></name> <operator pos:line="39" pos:column="26">==<pos:position pos:line="39" pos:column="28"/></operator> <name pos:line="39" pos:column="29">WORKER_IDLE<pos:position pos:line="39" pos:column="40"/></name></expr>)<pos:position pos:line="39" pos:column="41"/></condition> <block pos:line="39" pos:column="42">{
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">(<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="14">rv<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <call><name pos:line="40" pos:column="19">apr_thread_cond_wait<pos:position pos:line="40" pos:column="39"/></name><argument_list pos:line="40" pos:column="39">(<argument><expr><name><name pos:line="40" pos:column="40">wakeup<pos:position pos:line="40" pos:column="46"/></name><operator pos:line="40" pos:column="46">-&gt;<pos:position pos:line="40" pos:column="51"/></operator><name pos:line="40" pos:column="48">cond<pos:position pos:line="40" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="54">wakeup<pos:position pos:line="40" pos:column="60"/></name><operator pos:line="40" pos:column="60">-&gt;<pos:position pos:line="40" pos:column="65"/></operator><name pos:line="40" pos:column="62">mutex<pos:position pos:line="40" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="68"/></argument_list></call><operator pos:line="40" pos:column="68">)<pos:position pos:line="40" pos:column="69"/></operator> <operator pos:line="40" pos:column="70">!=<pos:position pos:line="40" pos:column="72"/></operator>
            <name pos:line="41" pos:column="13">APR_SUCCESS<pos:position pos:line="41" pos:column="24"/></name></expr>)<pos:position pos:line="41" pos:column="25"/></condition><then pos:line="41" pos:column="25"> <block pos:line="41" pos:column="26">{
            <return pos:line="42" pos:column="13">return <expr><name pos:line="42" pos:column="20">rv<pos:position pos:line="42" pos:column="22"/></name></expr>;<pos:position pos:line="42" pos:column="23"/></return>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></while>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><operator pos:line="45" pos:column="9">(<pos:position pos:line="45" pos:column="10"/></operator><name pos:line="45" pos:column="10">rv<pos:position pos:line="45" pos:column="12"/></name> <operator pos:line="45" pos:column="13">=<pos:position pos:line="45" pos:column="14"/></operator> <call><name pos:line="45" pos:column="15">apr_thread_mutex_unlock<pos:position pos:line="45" pos:column="38"/></name><argument_list pos:line="45" pos:column="38">(<argument><expr><name><name pos:line="45" pos:column="39">wakeup<pos:position pos:line="45" pos:column="45"/></name><operator pos:line="45" pos:column="45">-&gt;<pos:position pos:line="45" pos:column="50"/></operator><name pos:line="45" pos:column="47">mutex<pos:position pos:line="45" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="53"/></argument_list></call><operator pos:line="45" pos:column="53">)<pos:position pos:line="45" pos:column="54"/></operator> <operator pos:line="45" pos:column="55">!=<pos:position pos:line="45" pos:column="57"/></operator> <name pos:line="45" pos:column="58">APR_SUCCESS<pos:position pos:line="45" pos:column="69"/></name></expr>)<pos:position pos:line="45" pos:column="70"/></condition><then pos:line="45" pos:column="70"> <block pos:line="45" pos:column="71">{
        <return pos:line="46" pos:column="9">return <expr><name pos:line="46" pos:column="16">rv<pos:position pos:line="46" pos:column="18"/></name></expr>;<pos:position pos:line="46" pos:column="19"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
    <return pos:line="48" pos:column="5">return <expr><name pos:line="48" pos:column="12">APR_SUCCESS<pos:position pos:line="48" pos:column="23"/></name></expr>;<pos:position pos:line="48" pos:column="24"/></return>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
