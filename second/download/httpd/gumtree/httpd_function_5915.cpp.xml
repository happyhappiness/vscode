<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5915.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">get_mplx_next<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">h2_worker<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">worker<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">h2_mplx<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier><modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">pm<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, 
                                  <parameter><decl><type><name pos:line="2" pos:column="35">h2_task<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier><modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">ptask<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">void<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">ctx<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">status<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">h2_mplx<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">m<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><name pos:line="5" pos:column="18">NULL<pos:position pos:line="5" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">h2_task<pos:position pos:line="6" pos:column="12"/></name> <modifier pos:line="6" pos:column="13">*<pos:position pos:line="6" pos:column="14"/></modifier></type><name pos:line="6" pos:column="14">task<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">NULL<pos:position pos:line="6" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_time_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">max_wait<pos:position pos:line="7" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="26">start_wait<pos:position pos:line="7" pos:column="36"/></name></decl>;<pos:position pos:line="7" pos:column="37"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">has_more<pos:position pos:line="8" pos:column="17"/></name> <init pos:line="8" pos:column="18">= <expr><literal type="number" pos:line="8" pos:column="20">0<pos:position pos:line="8" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">h2_workers<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">workers<pos:position pos:line="9" pos:column="24"/></name> <init pos:line="9" pos:column="25">= <expr><operator pos:line="9" pos:column="27">(<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">h2_workers<pos:position pos:line="9" pos:column="38"/></name> <operator pos:line="9" pos:column="39">*<pos:position pos:line="9" pos:column="40"/></operator><operator pos:line="9" pos:column="40">)<pos:position pos:line="9" pos:column="41"/></operator><name pos:line="9" pos:column="41">ctx<pos:position pos:line="9" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="45"/></decl_stmt>
    
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">pm<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">&amp;&amp;<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="16">ptask<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">!=<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">NULL<pos:position pos:line="11" pos:column="29"/></name></expr>)<pos:position pos:line="11" pos:column="30"/></condition><then pos:line="11" pos:column="30"> <block pos:line="11" pos:column="31">{
        <comment type="block" pos:line="12" pos:column="9">/* We have a h2_mplx instance and the worker wants the next task. 
         * Try to get one from the given mplx. */</comment>
        <expr_stmt><expr><operator pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">ptask<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">h2_mplx_pop_task<pos:position pos:line="14" pos:column="34"/></name><argument_list pos:line="14" pos:column="34">(<argument><expr><operator pos:line="14" pos:column="35">*<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="36">pm<pos:position pos:line="14" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="40">&amp;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="41">has_more<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="51"/></expr_stmt>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">*<pos:position pos:line="15" pos:column="14"/></operator><name pos:line="15" pos:column="14">ptask<pos:position pos:line="15" pos:column="19"/></name></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20"> <block pos:line="15" pos:column="21">{
            <return pos:line="16" pos:column="13">return <expr><name pos:line="16" pos:column="20">APR_SUCCESS<pos:position pos:line="16" pos:column="31"/></name></expr>;<pos:position pos:line="16" pos:column="32"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">pm<pos:position pos:line="20" pos:column="12"/></name></expr>)<pos:position pos:line="20" pos:column="13"/></condition><then pos:line="20" pos:column="13"> <block pos:line="20" pos:column="14">{
        <comment type="block" pos:line="21" pos:column="9">/* Got a mplx handed in, but did not get or want a task from it. 
         * Release it, as the workers reference will be wiped.
         */</comment>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">h2_mplx_release<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><operator pos:line="24" pos:column="25">*<pos:position pos:line="24" pos:column="26"/></operator><name pos:line="24" pos:column="26">pm<pos:position pos:line="24" pos:column="28"/></name></expr></argument>)<pos:position pos:line="24" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="25" pos:column="9">*<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">pm<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">=<pos:position pos:line="25" pos:column="14"/></operator> <name pos:line="25" pos:column="15">NULL<pos:position pos:line="25" pos:column="19"/></name></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><operator pos:line="28" pos:column="9">!<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">ptask<pos:position pos:line="28" pos:column="15"/></name></expr>)<pos:position pos:line="28" pos:column="16"/></condition><then pos:line="28" pos:column="16"> <block pos:line="28" pos:column="17">{
        <comment type="block" pos:line="29" pos:column="9">/* the worker does not want a next task, we're done.
         */</comment>
        <return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">APR_SUCCESS<pos:position pos:line="31" pos:column="27"/></name></expr>;<pos:position pos:line="31" pos:column="28"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    
    <expr_stmt><expr><name pos:line="34" pos:column="5">max_wait<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <call><name pos:line="34" pos:column="16">apr_time_from_sec<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><call><name pos:line="34" pos:column="34">apr_atomic_read32<pos:position pos:line="34" pos:column="51"/></name><argument_list pos:line="34" pos:column="51">(<argument><expr><operator pos:line="34" pos:column="52">&amp;<pos:position pos:line="34" pos:column="57"/></operator><name><name pos:line="34" pos:column="53">workers<pos:position pos:line="34" pos:column="60"/></name><operator pos:line="34" pos:column="60">-&gt;<pos:position pos:line="34" pos:column="65"/></operator><name pos:line="34" pos:column="62">max_idle_secs<pos:position pos:line="34" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><name pos:line="35" pos:column="5">start_wait<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">=<pos:position pos:line="35" pos:column="17"/></operator> <call><name pos:line="35" pos:column="18">apr_time_now<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">()<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>
    
    <expr_stmt><expr><name pos:line="37" pos:column="5">status<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">apr_thread_mutex_lock<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name><name pos:line="37" pos:column="36">workers<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">-&gt;<pos:position pos:line="37" pos:column="48"/></operator><name pos:line="37" pos:column="45">lock<pos:position pos:line="37" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="51"/></expr_stmt>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><name pos:line="38" pos:column="9">status<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">==<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">APR_SUCCESS<pos:position pos:line="38" pos:column="30"/></name></expr>)<pos:position pos:line="38" pos:column="31"/></condition><then pos:line="38" pos:column="31"> <block pos:line="38" pos:column="32">{
        <expr_stmt><expr><operator pos:line="39" pos:column="9">++<pos:position pos:line="39" pos:column="11"/></operator><name><name pos:line="39" pos:column="11">workers<pos:position pos:line="39" pos:column="18"/></name><operator pos:line="39" pos:column="18">-&gt;<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="20">idle_worker_count<pos:position pos:line="39" pos:column="37"/></name></name></expr>;<pos:position pos:line="39" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">ap_log_error<pos:position pos:line="40" pos:column="21"/></name><argument_list pos:line="40" pos:column="21">(<argument><expr><name pos:line="40" pos:column="22">APLOG_MARK<pos:position pos:line="40" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="34">APLOG_TRACE1<pos:position pos:line="40" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="48">0<pos:position pos:line="40" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="51">workers<pos:position pos:line="40" pos:column="58"/></name><operator pos:line="40" pos:column="58">-&gt;<pos:position pos:line="40" pos:column="63"/></operator><name pos:line="40" pos:column="60">s<pos:position pos:line="40" pos:column="61"/></name></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="41" pos:column="22">"h2_worker(%d): looking for work"<pos:position pos:line="41" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="57">h2_worker_get_id<pos:position pos:line="41" pos:column="73"/></name><argument_list pos:line="41" pos:column="73">(<argument><expr><name pos:line="41" pos:column="74">worker<pos:position pos:line="41" pos:column="80"/></name></expr></argument>)<pos:position pos:line="41" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="41" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="83"/></expr_stmt>
        
        <while pos:line="43" pos:column="9">while <condition pos:line="43" pos:column="15">(<expr><operator pos:line="43" pos:column="16">!<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">task<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">&amp;&amp;<pos:position pos:line="43" pos:column="32"/></operator> <operator pos:line="43" pos:column="25">!<pos:position pos:line="43" pos:column="26"/></operator><call><name pos:line="43" pos:column="26">h2_worker_is_aborted<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">(<argument><expr><name pos:line="43" pos:column="47">worker<pos:position pos:line="43" pos:column="53"/></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call> <operator pos:line="43" pos:column="55">&amp;&amp;<pos:position pos:line="43" pos:column="65"/></operator> <operator pos:line="43" pos:column="58">!<pos:position pos:line="43" pos:column="59"/></operator><name><name pos:line="43" pos:column="59">workers<pos:position pos:line="43" pos:column="66"/></name><operator pos:line="43" pos:column="66">-&gt;<pos:position pos:line="43" pos:column="71"/></operator><name pos:line="43" pos:column="68">aborted<pos:position pos:line="43" pos:column="75"/></name></name></expr>)<pos:position pos:line="43" pos:column="76"/></condition> <block pos:line="43" pos:column="77">{
            
            <comment type="block" pos:line="45" pos:column="13">/* Get the next h2_mplx to process that has a task to hand out.
             * If it does, place it at the end of the queu and return the
             * task to the worker.
             * If it (currently) has no tasks, remove it so that it needs
             * to register again for scheduling.
             * If we run out of h2_mplx in the queue, we need to wait for
             * new mplx to arrive. Depending on how many workers do exist,
             * we do a timed wait or block indefinitely.
             */</comment>
            <expr_stmt><expr><name pos:line="54" pos:column="13">m<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <name pos:line="54" pos:column="17">NULL<pos:position pos:line="54" pos:column="21"/></name></expr>;<pos:position pos:line="54" pos:column="22"/></expr_stmt>
            <while pos:line="55" pos:column="13">while <condition pos:line="55" pos:column="19">(<expr><operator pos:line="55" pos:column="20">!<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="21">task<pos:position pos:line="55" pos:column="25"/></name> <operator pos:line="55" pos:column="26">&amp;&amp;<pos:position pos:line="55" pos:column="36"/></operator> <operator pos:line="55" pos:column="29">!<pos:position pos:line="55" pos:column="30"/></operator><call><name pos:line="55" pos:column="30">H2_MPLX_LIST_EMPTY<pos:position pos:line="55" pos:column="48"/></name><argument_list pos:line="55" pos:column="48">(<argument><expr><operator pos:line="55" pos:column="49">&amp;<pos:position pos:line="55" pos:column="54"/></operator><name><name pos:line="55" pos:column="50">workers<pos:position pos:line="55" pos:column="57"/></name><operator pos:line="55" pos:column="57">-&gt;<pos:position pos:line="55" pos:column="62"/></operator><name pos:line="55" pos:column="59">mplxs<pos:position pos:line="55" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="66"/></condition> <block pos:line="55" pos:column="67">{
                <expr_stmt><expr><name pos:line="56" pos:column="17">m<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <call><name pos:line="56" pos:column="21">H2_MPLX_LIST_FIRST<pos:position pos:line="56" pos:column="39"/></name><argument_list pos:line="56" pos:column="39">(<argument><expr><operator pos:line="56" pos:column="40">&amp;<pos:position pos:line="56" pos:column="45"/></operator><name><name pos:line="56" pos:column="41">workers<pos:position pos:line="56" pos:column="48"/></name><operator pos:line="56" pos:column="48">-&gt;<pos:position pos:line="56" pos:column="53"/></operator><name pos:line="56" pos:column="50">mplxs<pos:position pos:line="56" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="57"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="57" pos:column="17">H2_MPLX_REMOVE<pos:position pos:line="57" pos:column="31"/></name><argument_list pos:line="57" pos:column="31">(<argument><expr><name pos:line="57" pos:column="32">m<pos:position pos:line="57" pos:column="33"/></name></expr></argument>)<pos:position pos:line="57" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="35"/></expr_stmt>
                
                <expr_stmt><expr><name pos:line="59" pos:column="17">task<pos:position pos:line="59" pos:column="21"/></name> <operator pos:line="59" pos:column="22">=<pos:position pos:line="59" pos:column="23"/></operator> <call><name pos:line="59" pos:column="24">h2_mplx_pop_task<pos:position pos:line="59" pos:column="40"/></name><argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">m<pos:position pos:line="59" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="44">&amp;<pos:position pos:line="59" pos:column="49"/></operator><name pos:line="59" pos:column="45">has_more<pos:position pos:line="59" pos:column="53"/></name></expr></argument>)<pos:position pos:line="59" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="55"/></expr_stmt>
                <if pos:line="60" pos:column="17">if <condition pos:line="60" pos:column="20">(<expr><name pos:line="60" pos:column="21">task<pos:position pos:line="60" pos:column="25"/></name></expr>)<pos:position pos:line="60" pos:column="26"/></condition><then pos:line="60" pos:column="26"> <block pos:line="60" pos:column="27">{
                    <if pos:line="61" pos:column="21">if <condition pos:line="61" pos:column="24">(<expr><name pos:line="61" pos:column="25">has_more<pos:position pos:line="61" pos:column="33"/></name></expr>)<pos:position pos:line="61" pos:column="34"/></condition><then pos:line="61" pos:column="34"> <block pos:line="61" pos:column="35">{
                        <expr_stmt><expr><call><name pos:line="62" pos:column="25">H2_MPLX_LIST_INSERT_TAIL<pos:position pos:line="62" pos:column="49"/></name><argument_list pos:line="62" pos:column="49">(<argument><expr><operator pos:line="62" pos:column="50">&amp;<pos:position pos:line="62" pos:column="55"/></operator><name><name pos:line="62" pos:column="51">workers<pos:position pos:line="62" pos:column="58"/></name><operator pos:line="62" pos:column="58">-&gt;<pos:position pos:line="62" pos:column="63"/></operator><name pos:line="62" pos:column="60">mplxs<pos:position pos:line="62" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="67">m<pos:position pos:line="62" pos:column="68"/></name></expr></argument>)<pos:position pos:line="62" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="70"/></expr_stmt>
                    }<pos:position pos:line="63" pos:column="22"/></block></then>
                    <else pos:line="64" pos:column="21">else <block pos:line="64" pos:column="26">{
                        <expr_stmt><expr><name pos:line="65" pos:column="25">has_more<pos:position pos:line="65" pos:column="33"/></name> <operator pos:line="65" pos:column="34">=<pos:position pos:line="65" pos:column="35"/></operator> <operator pos:line="65" pos:column="36">!<pos:position pos:line="65" pos:column="37"/></operator><call><name pos:line="65" pos:column="37">H2_MPLX_LIST_EMPTY<pos:position pos:line="65" pos:column="55"/></name><argument_list pos:line="65" pos:column="55">(<argument><expr><operator pos:line="65" pos:column="56">&amp;<pos:position pos:line="65" pos:column="61"/></operator><name><name pos:line="65" pos:column="57">workers<pos:position pos:line="65" pos:column="64"/></name><operator pos:line="65" pos:column="64">-&gt;<pos:position pos:line="65" pos:column="69"/></operator><name pos:line="65" pos:column="66">mplxs<pos:position pos:line="65" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="65" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="73"/></expr_stmt>
                    }<pos:position pos:line="66" pos:column="22"/></block></else></if>
                    <break pos:line="67" pos:column="21">break;<pos:position pos:line="67" pos:column="27"/></break>
                }<pos:position pos:line="68" pos:column="18"/></block></then></if>
            }<pos:position pos:line="69" pos:column="14"/></block></while>
            
            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><operator pos:line="71" pos:column="17">!<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">task<pos:position pos:line="71" pos:column="22"/></name></expr>)<pos:position pos:line="71" pos:column="23"/></condition><then pos:line="71" pos:column="23"> <block pos:line="71" pos:column="24">{
                <comment type="block" pos:line="72" pos:column="17">/* Need to wait for either a new mplx to arrive.
                 */</comment>
                <if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><name><name pos:line="74" pos:column="21">workers<pos:position pos:line="74" pos:column="28"/></name><operator pos:line="74" pos:column="28">-&gt;<pos:position pos:line="74" pos:column="33"/></operator><name pos:line="74" pos:column="30">worker_count<pos:position pos:line="74" pos:column="42"/></name></name> <operator pos:line="74" pos:column="43">&gt;<pos:position pos:line="74" pos:column="47"/></operator> <name><name pos:line="74" pos:column="45">workers<pos:position pos:line="74" pos:column="52"/></name><operator pos:line="74" pos:column="52">-&gt;<pos:position pos:line="74" pos:column="57"/></operator><name pos:line="74" pos:column="54">min_size<pos:position pos:line="74" pos:column="62"/></name></name></expr>)<pos:position pos:line="74" pos:column="63"/></condition><then pos:line="74" pos:column="63"> <block pos:line="74" pos:column="64">{
                    <decl_stmt><decl><type><name pos:line="75" pos:column="21">apr_time_t<pos:position pos:line="75" pos:column="31"/></name></type> <name pos:line="75" pos:column="32">now<pos:position pos:line="75" pos:column="35"/></name> <init pos:line="75" pos:column="36">= <expr><call><name pos:line="75" pos:column="38">apr_time_now<pos:position pos:line="75" pos:column="50"/></name><argument_list pos:line="75" pos:column="50">()<pos:position pos:line="75" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="75" pos:column="53"/></decl_stmt>
                    <if pos:line="76" pos:column="21">if <condition pos:line="76" pos:column="24">(<expr><name pos:line="76" pos:column="25">now<pos:position pos:line="76" pos:column="28"/></name> <operator pos:line="76" pos:column="29">&gt;=<pos:position pos:line="76" pos:column="34"/></operator> <operator pos:line="76" pos:column="32">(<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="33">start_wait<pos:position pos:line="76" pos:column="43"/></name> <operator pos:line="76" pos:column="44">+<pos:position pos:line="76" pos:column="45"/></operator> <name pos:line="76" pos:column="46">max_wait<pos:position pos:line="76" pos:column="54"/></name><operator pos:line="76" pos:column="54">)<pos:position pos:line="76" pos:column="55"/></operator></expr>)<pos:position pos:line="76" pos:column="56"/></condition><then pos:line="76" pos:column="56"> <block pos:line="76" pos:column="57">{
                        <comment type="block" pos:line="77" pos:column="25">/* waited long enough without getting a task. */</comment>
                        <expr_stmt><expr><name pos:line="78" pos:column="25">status<pos:position pos:line="78" pos:column="31"/></name> <operator pos:line="78" pos:column="32">=<pos:position pos:line="78" pos:column="33"/></operator> <name pos:line="78" pos:column="34">APR_TIMEUP<pos:position pos:line="78" pos:column="44"/></name></expr>;<pos:position pos:line="78" pos:column="45"/></expr_stmt>
                    }<pos:position pos:line="79" pos:column="22"/></block></then>
                    <else pos:line="80" pos:column="21">else <block pos:line="80" pos:column="26">{
                        <expr_stmt><expr><call><name pos:line="81" pos:column="25">ap_log_error<pos:position pos:line="81" pos:column="37"/></name><argument_list pos:line="81" pos:column="37">(<argument><expr><name pos:line="81" pos:column="38">APLOG_MARK<pos:position pos:line="81" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="50">APLOG_TRACE1<pos:position pos:line="81" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="81" pos:column="64">0<pos:position pos:line="81" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="67">workers<pos:position pos:line="81" pos:column="74"/></name><operator pos:line="81" pos:column="74">-&gt;<pos:position pos:line="81" pos:column="79"/></operator><name pos:line="81" pos:column="76">s<pos:position pos:line="81" pos:column="77"/></name></name></expr></argument>,
                                     <argument><expr><literal type="string" pos:line="82" pos:column="38">"h2_worker(%d): waiting signal, "<pos:position pos:line="82" pos:column="71"/></literal>
                                     <literal type="string" pos:line="83" pos:column="38">"worker_count=%d"<pos:position pos:line="83" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="57">worker<pos:position pos:line="83" pos:column="63"/></name><operator pos:line="83" pos:column="63">-&gt;<pos:position pos:line="83" pos:column="68"/></operator><name pos:line="83" pos:column="65">id<pos:position pos:line="83" pos:column="67"/></name></name></expr></argument>, 
                                     <argument><expr><operator pos:line="84" pos:column="38">(<pos:position pos:line="84" pos:column="39"/></operator><name pos:line="84" pos:column="39">int<pos:position pos:line="84" pos:column="42"/></name><operator pos:line="84" pos:column="42">)<pos:position pos:line="84" pos:column="43"/></operator><name><name pos:line="84" pos:column="43">workers<pos:position pos:line="84" pos:column="50"/></name><operator pos:line="84" pos:column="50">-&gt;<pos:position pos:line="84" pos:column="55"/></operator><name pos:line="84" pos:column="52">worker_count<pos:position pos:line="84" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="66"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="85" pos:column="25">status<pos:position pos:line="85" pos:column="31"/></name> <operator pos:line="85" pos:column="32">=<pos:position pos:line="85" pos:column="33"/></operator> <call><name pos:line="85" pos:column="34">apr_thread_cond_timedwait<pos:position pos:line="85" pos:column="59"/></name><argument_list pos:line="85" pos:column="59">(<argument><expr><name><name pos:line="85" pos:column="60">workers<pos:position pos:line="85" pos:column="67"/></name><operator pos:line="85" pos:column="67">-&gt;<pos:position pos:line="85" pos:column="72"/></operator><name pos:line="85" pos:column="69">mplx_added<pos:position pos:line="85" pos:column="79"/></name></name></expr></argument>,
                                                           <argument><expr><name><name pos:line="86" pos:column="60">workers<pos:position pos:line="86" pos:column="67"/></name><operator pos:line="86" pos:column="67">-&gt;<pos:position pos:line="86" pos:column="72"/></operator><name pos:line="86" pos:column="69">lock<pos:position pos:line="86" pos:column="73"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="75">max_wait<pos:position pos:line="86" pos:column="83"/></name></expr></argument>)<pos:position pos:line="86" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="85"/></expr_stmt>
                    }<pos:position pos:line="87" pos:column="22"/></block></else></if>
                    
                    <if pos:line="89" pos:column="21">if <condition pos:line="89" pos:column="24">(<expr><name pos:line="89" pos:column="25">status<pos:position pos:line="89" pos:column="31"/></name> <operator pos:line="89" pos:column="32">==<pos:position pos:line="89" pos:column="34"/></operator> <name pos:line="89" pos:column="35">APR_TIMEUP<pos:position pos:line="89" pos:column="45"/></name></expr>)<pos:position pos:line="89" pos:column="46"/></condition><then pos:line="89" pos:column="46"> <block pos:line="89" pos:column="47">{
                        <comment type="block" pos:line="90" pos:column="25">/* waited long enough */</comment>
                        <if pos:line="91" pos:column="25">if <condition pos:line="91" pos:column="28">(<expr><name><name pos:line="91" pos:column="29">workers<pos:position pos:line="91" pos:column="36"/></name><operator pos:line="91" pos:column="36">-&gt;<pos:position pos:line="91" pos:column="41"/></operator><name pos:line="91" pos:column="38">worker_count<pos:position pos:line="91" pos:column="50"/></name></name> <operator pos:line="91" pos:column="51">&gt;<pos:position pos:line="91" pos:column="55"/></operator> <name><name pos:line="91" pos:column="53">workers<pos:position pos:line="91" pos:column="60"/></name><operator pos:line="91" pos:column="60">-&gt;<pos:position pos:line="91" pos:column="65"/></operator><name pos:line="91" pos:column="62">min_size<pos:position pos:line="91" pos:column="70"/></name></name></expr>)<pos:position pos:line="91" pos:column="71"/></condition><then pos:line="91" pos:column="71"> <block pos:line="91" pos:column="72">{
                            <expr_stmt><expr><call><name pos:line="92" pos:column="29">ap_log_error<pos:position pos:line="92" pos:column="41"/></name><argument_list pos:line="92" pos:column="41">(<argument><expr><name pos:line="92" pos:column="42">APLOG_MARK<pos:position pos:line="92" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="54">APLOG_TRACE1<pos:position pos:line="92" pos:column="66"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="68">0<pos:position pos:line="92" pos:column="69"/></literal></expr></argument>, 
                                         <argument><expr><name><name pos:line="93" pos:column="42">workers<pos:position pos:line="93" pos:column="49"/></name><operator pos:line="93" pos:column="49">-&gt;<pos:position pos:line="93" pos:column="54"/></operator><name pos:line="93" pos:column="51">s<pos:position pos:line="93" pos:column="52"/></name></name></expr></argument>,
                                         <argument><expr><literal type="string" pos:line="94" pos:column="42">"h2_workers: aborting idle worker"<pos:position pos:line="94" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="78"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="95" pos:column="29">h2_worker_abort<pos:position pos:line="95" pos:column="44"/></name><argument_list pos:line="95" pos:column="44">(<argument><expr><name pos:line="95" pos:column="45">worker<pos:position pos:line="95" pos:column="51"/></name></expr></argument>)<pos:position pos:line="95" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="53"/></expr_stmt>
                            <break pos:line="96" pos:column="29">break;<pos:position pos:line="96" pos:column="35"/></break>
                        }<pos:position pos:line="97" pos:column="26"/></block></then></if>
                    }<pos:position pos:line="98" pos:column="22"/></block></then></if>
                }<pos:position pos:line="99" pos:column="18"/></block></then>
                <else pos:line="100" pos:column="17">else <block pos:line="100" pos:column="22">{
                    <expr_stmt><expr><call><name pos:line="101" pos:column="21">ap_log_error<pos:position pos:line="101" pos:column="33"/></name><argument_list pos:line="101" pos:column="33">(<argument><expr><name pos:line="101" pos:column="34">APLOG_MARK<pos:position pos:line="101" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="46">APLOG_TRACE1<pos:position pos:line="101" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="101" pos:column="60">0<pos:position pos:line="101" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="63">workers<pos:position pos:line="101" pos:column="70"/></name><operator pos:line="101" pos:column="70">-&gt;<pos:position pos:line="101" pos:column="75"/></operator><name pos:line="101" pos:column="72">s<pos:position pos:line="101" pos:column="73"/></name></name></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="102" pos:column="34">"h2_worker(%d): waiting signal (eternal), "<pos:position pos:line="102" pos:column="77"/></literal>
                                 <literal type="string" pos:line="103" pos:column="34">"worker_count=%d"<pos:position pos:line="103" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="53">worker<pos:position pos:line="103" pos:column="59"/></name><operator pos:line="103" pos:column="59">-&gt;<pos:position pos:line="103" pos:column="64"/></operator><name pos:line="103" pos:column="61">id<pos:position pos:line="103" pos:column="63"/></name></name></expr></argument>, 
                                 <argument><expr><operator pos:line="104" pos:column="34">(<pos:position pos:line="104" pos:column="35"/></operator><name pos:line="104" pos:column="35">int<pos:position pos:line="104" pos:column="38"/></name><operator pos:line="104" pos:column="38">)<pos:position pos:line="104" pos:column="39"/></operator><name><name pos:line="104" pos:column="39">workers<pos:position pos:line="104" pos:column="46"/></name><operator pos:line="104" pos:column="46">-&gt;<pos:position pos:line="104" pos:column="51"/></operator><name pos:line="104" pos:column="48">worker_count<pos:position pos:line="104" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="62"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="105" pos:column="21">apr_thread_cond_wait<pos:position pos:line="105" pos:column="41"/></name><argument_list pos:line="105" pos:column="41">(<argument><expr><name><name pos:line="105" pos:column="42">workers<pos:position pos:line="105" pos:column="49"/></name><operator pos:line="105" pos:column="49">-&gt;<pos:position pos:line="105" pos:column="54"/></operator><name pos:line="105" pos:column="51">mplx_added<pos:position pos:line="105" pos:column="61"/></name></name></expr></argument>, <argument><expr><name><name pos:line="105" pos:column="63">workers<pos:position pos:line="105" pos:column="70"/></name><operator pos:line="105" pos:column="70">-&gt;<pos:position pos:line="105" pos:column="75"/></operator><name pos:line="105" pos:column="72">lock<pos:position pos:line="105" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="78"/></expr_stmt>
                }<pos:position pos:line="106" pos:column="18"/></block></else></if>
            }<pos:position pos:line="107" pos:column="14"/></block></then></if>
        }<pos:position pos:line="108" pos:column="10"/></block></while>
        
        <comment type="block" pos:line="110" pos:column="9">/* Here, we either have gotten task and mplx for the worker or
         * needed to give up with more than enough workers.
         */</comment>
        <if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><name pos:line="113" pos:column="13">task<pos:position pos:line="113" pos:column="17"/></name></expr>)<pos:position pos:line="113" pos:column="18"/></condition><then pos:line="113" pos:column="18"> <block pos:line="113" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="114" pos:column="13">ap_log_error<pos:position pos:line="114" pos:column="25"/></name><argument_list pos:line="114" pos:column="25">(<argument><expr><name pos:line="114" pos:column="26">APLOG_MARK<pos:position pos:line="114" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="38">APLOG_DEBUG<pos:position pos:line="114" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="114" pos:column="51">0<pos:position pos:line="114" pos:column="52"/></literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="54">workers<pos:position pos:line="114" pos:column="61"/></name><operator pos:line="114" pos:column="61">-&gt;<pos:position pos:line="114" pos:column="66"/></operator><name pos:line="114" pos:column="63">s<pos:position pos:line="114" pos:column="64"/></name></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="115" pos:column="26">"h2_worker(%d): start task(%s)"<pos:position pos:line="115" pos:column="57"/></literal></expr></argument>,
                         <argument><expr><call><name pos:line="116" pos:column="26">h2_worker_get_id<pos:position pos:line="116" pos:column="42"/></name><argument_list pos:line="116" pos:column="42">(<argument><expr><name pos:line="116" pos:column="43">worker<pos:position pos:line="116" pos:column="49"/></name></expr></argument>)<pos:position pos:line="116" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="52">task<pos:position pos:line="116" pos:column="56"/></name><operator pos:line="116" pos:column="56">-&gt;<pos:position pos:line="116" pos:column="61"/></operator><name pos:line="116" pos:column="58">id<pos:position pos:line="116" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="116" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="62"/></expr_stmt>
            <comment type="block" pos:line="117" pos:column="13">/* Since we hand out a reference to the worker, we increase
             * its ref count.
             */</comment>
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">h2_mplx_reference<pos:position pos:line="120" pos:column="30"/></name><argument_list pos:line="120" pos:column="30">(<argument><expr><name pos:line="120" pos:column="31">m<pos:position pos:line="120" pos:column="32"/></name></expr></argument>)<pos:position pos:line="120" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="121" pos:column="13">*<pos:position pos:line="121" pos:column="14"/></operator><name pos:line="121" pos:column="14">pm<pos:position pos:line="121" pos:column="16"/></name> <operator pos:line="121" pos:column="17">=<pos:position pos:line="121" pos:column="18"/></operator> <name pos:line="121" pos:column="19">m<pos:position pos:line="121" pos:column="20"/></name></expr>;<pos:position pos:line="121" pos:column="21"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="122" pos:column="13">*<pos:position pos:line="122" pos:column="14"/></operator><name pos:line="122" pos:column="14">ptask<pos:position pos:line="122" pos:column="19"/></name> <operator pos:line="122" pos:column="20">=<pos:position pos:line="122" pos:column="21"/></operator> <name pos:line="122" pos:column="22">task<pos:position pos:line="122" pos:column="26"/></name></expr>;<pos:position pos:line="122" pos:column="27"/></expr_stmt>
            
            <if pos:line="124" pos:column="13">if <condition pos:line="124" pos:column="16">(<expr><name pos:line="124" pos:column="17">has_more<pos:position pos:line="124" pos:column="25"/></name> <operator pos:line="124" pos:column="26">&amp;&amp;<pos:position pos:line="124" pos:column="36"/></operator> <name><name pos:line="124" pos:column="29">workers<pos:position pos:line="124" pos:column="36"/></name><operator pos:line="124" pos:column="36">-&gt;<pos:position pos:line="124" pos:column="41"/></operator><name pos:line="124" pos:column="38">idle_worker_count<pos:position pos:line="124" pos:column="55"/></name></name> <operator pos:line="124" pos:column="56">&gt;<pos:position pos:line="124" pos:column="60"/></operator> <literal type="number" pos:line="124" pos:column="58">1<pos:position pos:line="124" pos:column="59"/></literal></expr>)<pos:position pos:line="124" pos:column="60"/></condition><then pos:line="124" pos:column="60"> <block pos:line="124" pos:column="61">{
                <expr_stmt><expr><call><name pos:line="125" pos:column="17">apr_thread_cond_signal<pos:position pos:line="125" pos:column="39"/></name><argument_list pos:line="125" pos:column="39">(<argument><expr><name><name pos:line="125" pos:column="40">workers<pos:position pos:line="125" pos:column="47"/></name><operator pos:line="125" pos:column="47">-&gt;<pos:position pos:line="125" pos:column="52"/></operator><name pos:line="125" pos:column="49">mplx_added<pos:position pos:line="125" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="125" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="61"/></expr_stmt>
            }<pos:position pos:line="126" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="127" pos:column="13">status<pos:position pos:line="127" pos:column="19"/></name> <operator pos:line="127" pos:column="20">=<pos:position pos:line="127" pos:column="21"/></operator> <name pos:line="127" pos:column="22">APR_SUCCESS<pos:position pos:line="127" pos:column="33"/></name></expr>;<pos:position pos:line="127" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="128" pos:column="10"/></block></then>
        <else pos:line="129" pos:column="9">else <block pos:line="129" pos:column="14">{
            <expr_stmt><expr><name pos:line="130" pos:column="13">status<pos:position pos:line="130" pos:column="19"/></name> <operator pos:line="130" pos:column="20">=<pos:position pos:line="130" pos:column="21"/></operator> <name pos:line="130" pos:column="22">APR_EOF<pos:position pos:line="130" pos:column="29"/></name></expr>;<pos:position pos:line="130" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="131" pos:column="10"/></block></else></if>
        
        <expr_stmt><expr><operator pos:line="133" pos:column="9">--<pos:position pos:line="133" pos:column="11"/></operator><name><name pos:line="133" pos:column="11">workers<pos:position pos:line="133" pos:column="18"/></name><operator pos:line="133" pos:column="18">-&gt;<pos:position pos:line="133" pos:column="23"/></operator><name pos:line="133" pos:column="20">idle_worker_count<pos:position pos:line="133" pos:column="37"/></name></name></expr>;<pos:position pos:line="133" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="134" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="134" pos:column="32"/></name><argument_list pos:line="134" pos:column="32">(<argument><expr><name><name pos:line="134" pos:column="33">workers<pos:position pos:line="134" pos:column="40"/></name><operator pos:line="134" pos:column="40">-&gt;<pos:position pos:line="134" pos:column="45"/></operator><name pos:line="134" pos:column="42">lock<pos:position pos:line="134" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="134" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="135" pos:column="6"/></block></then></if>
    
    <return pos:line="137" pos:column="5">return <expr><name pos:line="137" pos:column="12">status<pos:position pos:line="137" pos:column="18"/></name></expr>;<pos:position pos:line="137" pos:column="19"/></return>
}<pos:position pos:line="138" pos:column="2"/></block></function></unit>
