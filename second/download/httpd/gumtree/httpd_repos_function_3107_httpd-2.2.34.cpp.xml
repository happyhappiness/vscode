<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3107_httpd-2.2.34.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">char<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">_crypt_blowfish_rn<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><specifier pos:line="1" pos:column="26">const<pos:position pos:line="1" pos:column="31"/></specifier> <name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">key<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">setting<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
	<parameter><decl><type><name pos:line="2" pos:column="9">char<pos:position pos:line="2" pos:column="13"/></name> <modifier pos:line="2" pos:column="14">*<pos:position pos:line="2" pos:column="15"/></modifier></type><name pos:line="2" pos:column="15">output<pos:position pos:line="2" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">size<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="32"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">test_key<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><literal type="string" pos:line="4" pos:column="32">"8b \xd0\xc1\xd2\xcf\xcc\xd8"<pos:position pos:line="4" pos:column="61"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="5" pos:column="9">const<pos:position pos:line="5" pos:column="14"/></specifier> <name pos:line="5" pos:column="15">char<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">test_setting<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><literal type="string" pos:line="5" pos:column="36">"$2a$00$abcdefghijklmnopqrstuu"<pos:position pos:line="5" pos:column="67"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="68"/></decl_stmt>
	<decl_stmt><decl><specifier pos:line="6" pos:column="9">static<pos:position pos:line="6" pos:column="15"/></specifier> <type><specifier pos:line="6" pos:column="16">const<pos:position pos:line="6" pos:column="21"/></specifier> <name pos:line="6" pos:column="22">char<pos:position pos:line="6" pos:column="26"/></name> <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier> <specifier pos:line="6" pos:column="29">const<pos:position pos:line="6" pos:column="34"/></specifier></type> <name><name pos:line="6" pos:column="35">test_hash<pos:position pos:line="6" pos:column="44"/></name><index pos:line="6" pos:column="44">[<expr><literal type="number" pos:line="6" pos:column="45">2<pos:position pos:line="6" pos:column="46"/></literal></expr>]<pos:position pos:line="6" pos:column="47"/></index></name> <init pos:line="6" pos:column="48">=
		<expr><block pos:line="7" pos:column="17">{<expr><literal type="string" pos:line="7" pos:column="18">"VUrPmXD6q/nVSSp7pNDhCR9071IfIRe\0\x55"<pos:position pos:line="7" pos:column="57"/></literal></expr>, <comment type="block" pos:line="7" pos:column="59">/* $2x$ */</comment>
		<expr><literal type="string" pos:line="8" pos:column="17">"i1D709vfamulimlGcq0qq3UvuUasvEa\0\x55"<pos:position pos:line="8" pos:column="56"/></literal></expr>}<pos:position pos:line="8" pos:column="57"/></block></expr></init></decl>;<pos:position pos:line="8" pos:column="58"/></decl_stmt> <comment type="block" pos:line="8" pos:column="59">/* $2a$, $2y$ */</comment>
	<decl_stmt><decl><type><name pos:line="9" pos:column="9">char<pos:position pos:line="9" pos:column="13"/></name> <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier></type><name pos:line="9" pos:column="15">retval<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
	<decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">p<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="11" pos:column="9">int<pos:position pos:line="11" pos:column="12"/></name></type> <name pos:line="11" pos:column="13">save_errno<pos:position pos:line="11" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="25">ok<pos:position pos:line="11" pos:column="27"/></name></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
	<struct pos:line="12" pos:column="9">struct <block pos:line="12" pos:column="16">{<public type="default" pos:line="12" pos:column="17">
		<decl_stmt><decl><type><name pos:line="13" pos:column="17">char<pos:position pos:line="13" pos:column="21"/></name></type> <name><name pos:line="13" pos:column="22">s<pos:position pos:line="13" pos:column="23"/></name><index pos:line="13" pos:column="23">[<expr><literal type="number" pos:line="13" pos:column="24">7<pos:position pos:line="13" pos:column="25"/></literal> <operator pos:line="13" pos:column="26">+<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="28">22<pos:position pos:line="13" pos:column="30"/></literal> <operator pos:line="13" pos:column="31">+<pos:position pos:line="13" pos:column="32"/></operator> <literal type="number" pos:line="13" pos:column="33">1<pos:position pos:line="13" pos:column="34"/></literal></expr>]<pos:position pos:line="13" pos:column="35"/></index></name></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="14" pos:column="17">char<pos:position pos:line="14" pos:column="21"/></name></type> <name><name pos:line="14" pos:column="22">o<pos:position pos:line="14" pos:column="23"/></name><index pos:line="14" pos:column="23">[<expr><literal type="number" pos:line="14" pos:column="24">7<pos:position pos:line="14" pos:column="25"/></literal> <operator pos:line="14" pos:column="26">+<pos:position pos:line="14" pos:column="27"/></operator> <literal type="number" pos:line="14" pos:column="28">22<pos:position pos:line="14" pos:column="30"/></literal> <operator pos:line="14" pos:column="31">+<pos:position pos:line="14" pos:column="32"/></operator> <literal type="number" pos:line="14" pos:column="33">31<pos:position pos:line="14" pos:column="35"/></literal> <operator pos:line="14" pos:column="36">+<pos:position pos:line="14" pos:column="37"/></operator> <literal type="number" pos:line="14" pos:column="38">1<pos:position pos:line="14" pos:column="39"/></literal> <operator pos:line="14" pos:column="40">+<pos:position pos:line="14" pos:column="41"/></operator> <literal type="number" pos:line="14" pos:column="42">1<pos:position pos:line="14" pos:column="43"/></literal> <operator pos:line="14" pos:column="44">+<pos:position pos:line="14" pos:column="45"/></operator> <literal type="number" pos:line="14" pos:column="46">1<pos:position pos:line="14" pos:column="47"/></literal></expr>]<pos:position pos:line="14" pos:column="48"/></index></name></decl>;<pos:position pos:line="14" pos:column="49"/></decl_stmt>
	<pos:position pos:line="15" pos:column="2"/></public>}<pos:position pos:line="15" pos:column="10"/></block> <decl><name pos:line="15" pos:column="11">buf<pos:position pos:line="15" pos:column="14"/></name></decl>;<pos:position pos:line="15" pos:column="15"/></struct>

<comment type="block" pos:line="17" pos:column="1">/* Hash the supplied password */</comment>
	<expr_stmt><expr><call><name pos:line="18" pos:column="9">_crypt_output_magic<pos:position pos:line="18" pos:column="28"/></name><argument_list pos:line="18" pos:column="28">(<argument><expr><name pos:line="18" pos:column="29">setting<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="38">output<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">size<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><name pos:line="19" pos:column="9">retval<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">BF_crypt<pos:position pos:line="19" pos:column="26"/></name><argument_list pos:line="19" pos:column="26">(<argument><expr><name pos:line="19" pos:column="27">key<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="32">setting<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="41">output<pos:position pos:line="19" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="49">size<pos:position pos:line="19" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="55">16<pos:position pos:line="19" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="59"/></expr_stmt>
	<expr_stmt><expr><name pos:line="20" pos:column="9">save_errno<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">errno<pos:position pos:line="20" pos:column="27"/></name></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>

<comment type="block" pos:line="22" pos:column="1">/*
 * Do a quick self-test.  It is important that we make both calls to BF_crypt()
 * from the same scope such that they likely use the same stack locations,
 * which makes the second call overwrite the first call's sensitive data on the
 * stack and makes it more likely that any alignment related issues would be
 * detected by the self-test.
 */</comment>
	<expr_stmt><expr><call><name pos:line="29" pos:column="9">memcpy<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name><name pos:line="29" pos:column="16">buf<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">.<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="20">s<pos:position pos:line="29" pos:column="21"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="23">test_setting<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="29" pos:column="37">sizeof<argument_list pos:line="29" pos:column="43">(<argument><expr><name><name pos:line="29" pos:column="44">buf<pos:position pos:line="29" pos:column="47"/></name><operator pos:line="29" pos:column="47">.<pos:position pos:line="29" pos:column="48"/></operator><name pos:line="29" pos:column="48">s<pos:position pos:line="29" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="29" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="52"/></expr_stmt>
	<if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">retval<pos:position pos:line="30" pos:column="19"/></name></expr>)<pos:position pos:line="30" pos:column="20"/></condition><then pos:line="30" pos:column="20">
		<block type="pseudo"><expr_stmt><expr><name><name pos:line="31" pos:column="17">buf<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">.<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="21">s<pos:position pos:line="31" pos:column="22"/></name><index pos:line="31" pos:column="22">[<expr><literal type="number" pos:line="31" pos:column="23">2<pos:position pos:line="31" pos:column="24"/></literal></expr>]<pos:position pos:line="31" pos:column="25"/></index></name> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <name><name pos:line="31" pos:column="28">setting<pos:position pos:line="31" pos:column="35"/></name><index pos:line="31" pos:column="35">[<expr><literal type="number" pos:line="31" pos:column="36">2<pos:position pos:line="31" pos:column="37"/></literal></expr>]<pos:position pos:line="31" pos:column="38"/></index></name></expr>;<pos:position pos:line="31" pos:column="39"/></expr_stmt></block></then></if>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">memset<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name><name pos:line="32" pos:column="16">buf<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">.<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="20">o<pos:position pos:line="32" pos:column="21"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="23">0x55<pos:position pos:line="32" pos:column="27"/></literal></expr></argument>, <argument><expr><sizeof pos:line="32" pos:column="29">sizeof<argument_list pos:line="32" pos:column="35">(<argument><expr><name><name pos:line="32" pos:column="36">buf<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">.<pos:position pos:line="32" pos:column="40"/></operator><name pos:line="32" pos:column="40">o<pos:position pos:line="32" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="42"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="33" pos:column="9">buf<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">.<pos:position pos:line="33" pos:column="13"/></operator><name pos:line="33" pos:column="13">o<pos:position pos:line="33" pos:column="14"/></name><index pos:line="33" pos:column="14">[<expr><sizeof pos:line="33" pos:column="15">sizeof<argument_list pos:line="33" pos:column="21">(<argument><expr><name><name pos:line="33" pos:column="22">buf<pos:position pos:line="33" pos:column="25"/></name><operator pos:line="33" pos:column="25">.<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="26">o<pos:position pos:line="33" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="28"/></argument_list></sizeof> <operator pos:line="33" pos:column="29">-<pos:position pos:line="33" pos:column="30"/></operator> <literal type="number" pos:line="33" pos:column="31">1<pos:position pos:line="33" pos:column="32"/></literal></expr>]<pos:position pos:line="33" pos:column="33"/></index></name> <operator pos:line="33" pos:column="34">=<pos:position pos:line="33" pos:column="35"/></operator> <literal type="number" pos:line="33" pos:column="36">0<pos:position pos:line="33" pos:column="37"/></literal></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><name pos:line="34" pos:column="9">p<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">=<pos:position pos:line="34" pos:column="12"/></operator> <call><name pos:line="34" pos:column="13">BF_crypt<pos:position pos:line="34" pos:column="21"/></name><argument_list pos:line="34" pos:column="21">(<argument><expr><name pos:line="34" pos:column="22">test_key<pos:position pos:line="34" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="32">buf<pos:position pos:line="34" pos:column="35"/></name><operator pos:line="34" pos:column="35">.<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="36">s<pos:position pos:line="34" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="39">buf<pos:position pos:line="34" pos:column="42"/></name><operator pos:line="34" pos:column="42">.<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="43">o<pos:position pos:line="34" pos:column="44"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="46">sizeof<argument_list pos:line="34" pos:column="52">(<argument><expr><name><name pos:line="34" pos:column="53">buf<pos:position pos:line="34" pos:column="56"/></name><operator pos:line="34" pos:column="56">.<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="57">o<pos:position pos:line="34" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></sizeof> <operator pos:line="34" pos:column="60">-<pos:position pos:line="34" pos:column="61"/></operator> <operator pos:line="34" pos:column="62">(<pos:position pos:line="34" pos:column="63"/></operator><literal type="number" pos:line="34" pos:column="63">1<pos:position pos:line="34" pos:column="64"/></literal> <operator pos:line="34" pos:column="65">+<pos:position pos:line="34" pos:column="66"/></operator> <literal type="number" pos:line="34" pos:column="67">1<pos:position pos:line="34" pos:column="68"/></literal><operator pos:line="34" pos:column="68">)<pos:position pos:line="34" pos:column="69"/></operator></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="71">1<pos:position pos:line="34" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="74"/></expr_stmt>

	<expr_stmt><expr><name pos:line="36" pos:column="9">ok<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <operator pos:line="36" pos:column="14">(<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">p<pos:position pos:line="36" pos:column="16"/></name> <operator pos:line="36" pos:column="17">==<pos:position pos:line="36" pos:column="19"/></operator> <name><name pos:line="36" pos:column="20">buf<pos:position pos:line="36" pos:column="23"/></name><operator pos:line="36" pos:column="23">.<pos:position pos:line="36" pos:column="24"/></operator><name pos:line="36" pos:column="24">o<pos:position pos:line="36" pos:column="25"/></name></name> <operator pos:line="36" pos:column="26">&amp;&amp;<pos:position pos:line="36" pos:column="36"/></operator>
	    <operator pos:line="37" pos:column="13">!<pos:position pos:line="37" pos:column="14"/></operator><call><name pos:line="37" pos:column="14">memcmp<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">p<pos:position pos:line="37" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="24">buf<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">.<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="28">s<pos:position pos:line="37" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="37" pos:column="31">7<pos:position pos:line="37" pos:column="32"/></literal> <operator pos:line="37" pos:column="33">+<pos:position pos:line="37" pos:column="34"/></operator> <literal type="number" pos:line="37" pos:column="35">22<pos:position pos:line="37" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="38"/></argument_list></call> <operator pos:line="37" pos:column="39">&amp;&amp;<pos:position pos:line="37" pos:column="49"/></operator>
	    <operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><call><name pos:line="38" pos:column="14">memcmp<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">p<pos:position pos:line="38" pos:column="22"/></name> <operator pos:line="38" pos:column="23">+<pos:position pos:line="38" pos:column="24"/></operator> <operator pos:line="38" pos:column="25">(<pos:position pos:line="38" pos:column="26"/></operator><literal type="number" pos:line="38" pos:column="26">7<pos:position pos:line="38" pos:column="27"/></literal> <operator pos:line="38" pos:column="28">+<pos:position pos:line="38" pos:column="29"/></operator> <literal type="number" pos:line="38" pos:column="30">22<pos:position pos:line="38" pos:column="32"/></literal><operator pos:line="38" pos:column="32">)<pos:position pos:line="38" pos:column="33"/></operator></expr></argument>,
	    <argument><expr><name><name pos:line="39" pos:column="13">test_hash<pos:position pos:line="39" pos:column="22"/></name><index pos:line="39" pos:column="22">[<expr><operator pos:line="39" pos:column="23">(<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="24">unsigned<pos:position pos:line="39" pos:column="32"/></name> <name pos:line="39" pos:column="33">int<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">)<pos:position pos:line="39" pos:column="37"/></operator><operator pos:line="39" pos:column="37">(<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="38">unsigned<pos:position pos:line="39" pos:column="46"/></name> <name pos:line="39" pos:column="47">char<pos:position pos:line="39" pos:column="51"/></name><operator pos:line="39" pos:column="51">)<pos:position pos:line="39" pos:column="52"/></operator><name><name pos:line="39" pos:column="52">buf<pos:position pos:line="39" pos:column="55"/></name><operator pos:line="39" pos:column="55">.<pos:position pos:line="39" pos:column="56"/></operator><name pos:line="39" pos:column="56">s<pos:position pos:line="39" pos:column="57"/></name><index pos:line="39" pos:column="57">[<expr><literal type="number" pos:line="39" pos:column="58">2<pos:position pos:line="39" pos:column="59"/></literal></expr>]<pos:position pos:line="39" pos:column="60"/></index></name> <operator pos:line="39" pos:column="61">&amp;<pos:position pos:line="39" pos:column="66"/></operator> <literal type="number" pos:line="39" pos:column="63">1<pos:position pos:line="39" pos:column="64"/></literal></expr>]<pos:position pos:line="39" pos:column="65"/></index></name></expr></argument>,
	    <argument><expr><literal type="number" pos:line="40" pos:column="13">31<pos:position pos:line="40" pos:column="15"/></literal> <operator pos:line="40" pos:column="16">+<pos:position pos:line="40" pos:column="17"/></operator> <literal type="number" pos:line="40" pos:column="18">1<pos:position pos:line="40" pos:column="19"/></literal> <operator pos:line="40" pos:column="20">+<pos:position pos:line="40" pos:column="21"/></operator> <literal type="number" pos:line="40" pos:column="22">1<pos:position pos:line="40" pos:column="23"/></literal> <operator pos:line="40" pos:column="24">+<pos:position pos:line="40" pos:column="25"/></operator> <literal type="number" pos:line="40" pos:column="26">1<pos:position pos:line="40" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="28"/></argument_list></call><operator pos:line="40" pos:column="28">)<pos:position pos:line="40" pos:column="29"/></operator></expr>;<pos:position pos:line="40" pos:column="30"/></expr_stmt>

	<block pos:line="42" pos:column="9">{
		<decl_stmt><decl><type><specifier pos:line="43" pos:column="17">const<pos:position pos:line="43" pos:column="22"/></specifier> <name pos:line="43" pos:column="23">char<pos:position pos:line="43" pos:column="27"/></name> <modifier pos:line="43" pos:column="28">*<pos:position pos:line="43" pos:column="29"/></modifier></type><name pos:line="43" pos:column="29">k<pos:position pos:line="43" pos:column="30"/></name> <init pos:line="43" pos:column="31">= <expr><literal type="string" pos:line="43" pos:column="33">"\xff\xa3"<pos:position pos:line="43" pos:column="43"/></literal> <literal type="string" pos:line="43" pos:column="44">"34"<pos:position pos:line="43" pos:column="48"/></literal> <literal type="string" pos:line="43" pos:column="49">"\xff\xff\xff\xa3"<pos:position pos:line="43" pos:column="67"/></literal> <literal type="string" pos:line="43" pos:column="68">"345"<pos:position pos:line="43" pos:column="73"/></literal></expr></init></decl>;<pos:position pos:line="43" pos:column="74"/></decl_stmt>
		<decl_stmt><decl><type><name pos:line="44" pos:column="17">BF_key<pos:position pos:line="44" pos:column="23"/></name></type> <name pos:line="44" pos:column="24">ae<pos:position pos:line="44" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="44" pos:column="28">ai<pos:position pos:line="44" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="44" pos:column="32">ye<pos:position pos:line="44" pos:column="34"/></name></decl>, <decl><type ref="prev"/><name pos:line="44" pos:column="36">yi<pos:position pos:line="44" pos:column="38"/></name></decl>;<pos:position pos:line="44" pos:column="39"/></decl_stmt>
		<expr_stmt><expr><call><name pos:line="45" pos:column="17">BF_set_key<pos:position pos:line="45" pos:column="27"/></name><argument_list pos:line="45" pos:column="27">(<argument><expr><name pos:line="45" pos:column="28">k<pos:position pos:line="45" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">ae<pos:position pos:line="45" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="35">ai<pos:position pos:line="45" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="39">2<pos:position pos:line="45" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="42"/></expr_stmt> <comment type="block" pos:line="45" pos:column="43">/* $2a$ */</comment>
		<expr_stmt><expr><call><name pos:line="46" pos:column="17">BF_set_key<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">k<pos:position pos:line="46" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="31">ye<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">yi<pos:position pos:line="46" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="39">4<pos:position pos:line="46" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt> <comment type="block" pos:line="46" pos:column="43">/* $2y$ */</comment>
		<expr_stmt><expr><name><name pos:line="47" pos:column="17">ai<pos:position pos:line="47" pos:column="19"/></name><index pos:line="47" pos:column="19">[<expr><literal type="number" pos:line="47" pos:column="20">0<pos:position pos:line="47" pos:column="21"/></literal></expr>]<pos:position pos:line="47" pos:column="22"/></index></name> <operator pos:line="47" pos:column="23">^=<pos:position pos:line="47" pos:column="25"/></operator> <literal type="number" pos:line="47" pos:column="26">0x10000<pos:position pos:line="47" pos:column="33"/></literal></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt> <comment type="block" pos:line="47" pos:column="35">/* undo the safety (for comparison) */</comment>
		<expr_stmt><expr><name pos:line="48" pos:column="17">ok<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <name pos:line="48" pos:column="22">ok<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">&amp;&amp;<pos:position pos:line="48" pos:column="35"/></operator> <name><name pos:line="48" pos:column="28">ai<pos:position pos:line="48" pos:column="30"/></name><index pos:line="48" pos:column="30">[<expr><literal type="number" pos:line="48" pos:column="31">0<pos:position pos:line="48" pos:column="32"/></literal></expr>]<pos:position pos:line="48" pos:column="33"/></index></name> <operator pos:line="48" pos:column="34">==<pos:position pos:line="48" pos:column="36"/></operator> <literal type="number" pos:line="48" pos:column="37">0xdb9c59bc<pos:position pos:line="48" pos:column="47"/></literal> <operator pos:line="48" pos:column="48">&amp;&amp;<pos:position pos:line="48" pos:column="58"/></operator> <name><name pos:line="48" pos:column="51">ye<pos:position pos:line="48" pos:column="53"/></name><index pos:line="48" pos:column="53">[<expr><literal type="number" pos:line="48" pos:column="54">17<pos:position pos:line="48" pos:column="56"/></literal></expr>]<pos:position pos:line="48" pos:column="57"/></index></name> <operator pos:line="48" pos:column="58">==<pos:position pos:line="48" pos:column="60"/></operator> <literal type="number" pos:line="48" pos:column="61">0x33343500<pos:position pos:line="48" pos:column="71"/></literal> <operator pos:line="48" pos:column="72">&amp;&amp;<pos:position pos:line="48" pos:column="82"/></operator>
		    <operator pos:line="49" pos:column="21">!<pos:position pos:line="49" pos:column="22"/></operator><call><name pos:line="49" pos:column="22">memcmp<pos:position pos:line="49" pos:column="28"/></name><argument_list pos:line="49" pos:column="28">(<argument><expr><name pos:line="49" pos:column="29">ae<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="33">ye<pos:position pos:line="49" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="37">sizeof<argument_list pos:line="49" pos:column="43">(<argument><expr><name pos:line="49" pos:column="44">ae<pos:position pos:line="49" pos:column="46"/></name></expr></argument>)<pos:position pos:line="49" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="48"/></argument_list></call> <operator pos:line="49" pos:column="49">&amp;&amp;<pos:position pos:line="49" pos:column="59"/></operator>
		    <operator pos:line="50" pos:column="21">!<pos:position pos:line="50" pos:column="22"/></operator><call><name pos:line="50" pos:column="22">memcmp<pos:position pos:line="50" pos:column="28"/></name><argument_list pos:line="50" pos:column="28">(<argument><expr><name pos:line="50" pos:column="29">ai<pos:position pos:line="50" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="33">yi<pos:position pos:line="50" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="37">sizeof<argument_list pos:line="50" pos:column="43">(<argument><expr><name pos:line="50" pos:column="44">ai<pos:position pos:line="50" pos:column="46"/></name></expr></argument>)<pos:position pos:line="50" pos:column="47"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="49"/></expr_stmt>
	}<pos:position pos:line="51" pos:column="10"/></block>

	<expr_stmt><expr><call><name pos:line="53" pos:column="9">__set_errno<pos:position pos:line="53" pos:column="20"/></name><argument_list pos:line="53" pos:column="20">(<argument><expr><name pos:line="53" pos:column="21">save_errno<pos:position pos:line="53" pos:column="31"/></name></expr></argument>)<pos:position pos:line="53" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="33"/></expr_stmt>
	<if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">ok<pos:position pos:line="54" pos:column="15"/></name></expr>)<pos:position pos:line="54" pos:column="16"/></condition><then pos:line="54" pos:column="16">
		<block type="pseudo"><return pos:line="55" pos:column="17">return <expr><name pos:line="55" pos:column="24">retval<pos:position pos:line="55" pos:column="30"/></name></expr>;<pos:position pos:line="55" pos:column="31"/></return></block></then></if>

<comment type="block" pos:line="57" pos:column="1">/* Should not happen */</comment>
	<expr_stmt><expr><call><name pos:line="58" pos:column="9">_crypt_output_magic<pos:position pos:line="58" pos:column="28"/></name><argument_list pos:line="58" pos:column="28">(<argument><expr><name pos:line="58" pos:column="29">setting<pos:position pos:line="58" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="38">output<pos:position pos:line="58" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="46">size<pos:position pos:line="58" pos:column="50"/></name></expr></argument>)<pos:position pos:line="58" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="59" pos:column="9">__set_errno<pos:position pos:line="59" pos:column="20"/></name><argument_list pos:line="59" pos:column="20">(<argument><expr><name pos:line="59" pos:column="21">EINVAL<pos:position pos:line="59" pos:column="27"/></name></expr></argument>)<pos:position pos:line="59" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="29"/></expr_stmt> <comment type="block" pos:line="59" pos:column="30">/* pretend we don't support this hash type */</comment>
	<return pos:line="60" pos:column="9">return <expr><name pos:line="60" pos:column="16">NULL<pos:position pos:line="60" pos:column="20"/></name></expr>;<pos:position pos:line="60" pos:column="21"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
