<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6213.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
    <name pos:line="2" pos:column="5">set_proxy_dirconn<pos:position pos:line="2" pos:column="22"/></name><parameter_list pos:line="2" pos:column="22">(<parameter><decl><type><name pos:line="2" pos:column="23">cmd_parms<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier></type><name pos:line="2" pos:column="34">parms<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">void<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">dummy<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="54">const<pos:position pos:line="2" pos:column="59"/></specifier> <name pos:line="2" pos:column="60">char<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">arg<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">server_rec<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">s<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name><name pos:line="4" pos:column="21">parms<pos:position pos:line="4" pos:column="26"/></name><operator pos:line="4" pos:column="26">-&gt;<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="28">server<pos:position pos:line="4" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">proxy_server_conf<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">conf<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">=
    <expr><call><name pos:line="6" pos:column="5">ap_get_module_config<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name><name pos:line="6" pos:column="26">s<pos:position pos:line="6" pos:column="27"/></name><operator pos:line="6" pos:column="27">-&gt;<pos:position pos:line="6" pos:column="32"/></operator><name pos:line="6" pos:column="29">module_config<pos:position pos:line="6" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="44">&amp;<pos:position pos:line="6" pos:column="49"/></operator><name pos:line="6" pos:column="45">proxy_module<pos:position pos:line="6" pos:column="57"/></name></expr></argument>)<pos:position pos:line="6" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">dirconn_entry<pos:position pos:line="7" pos:column="25"/></name></name> <modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type><name pos:line="7" pos:column="27">New<pos:position pos:line="7" pos:column="30"/></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">dirconn_entry<pos:position pos:line="8" pos:column="25"/></name></name> <modifier pos:line="8" pos:column="26">*<pos:position pos:line="8" pos:column="27"/></modifier></type><name pos:line="8" pos:column="27">list<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><operator pos:line="8" pos:column="34">(<pos:position pos:line="8" pos:column="35"/></operator>struct <name pos:line="8" pos:column="42">dirconn_entry<pos:position pos:line="8" pos:column="55"/></name> <operator pos:line="8" pos:column="56">*<pos:position pos:line="8" pos:column="57"/></operator><operator pos:line="8" pos:column="57">)<pos:position pos:line="8" pos:column="58"/></operator> <name><name pos:line="8" pos:column="59">conf<pos:position pos:line="8" pos:column="63"/></name><operator pos:line="8" pos:column="63">-&gt;<pos:position pos:line="8" pos:column="68"/></operator><name pos:line="8" pos:column="65">dirconn<pos:position pos:line="8" pos:column="72"/></name><operator pos:line="8" pos:column="72">-&gt;<pos:position pos:line="8" pos:column="77"/></operator><name pos:line="8" pos:column="74">elts<pos:position pos:line="8" pos:column="78"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="79"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">found<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><literal type="number" pos:line="9" pos:column="17">0<pos:position pos:line="9" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">i<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Don't duplicate entries */</comment>
    <for pos:line="13" pos:column="5">for <control pos:line="13" pos:column="9">(<init><expr><name pos:line="13" pos:column="10">i<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>;<pos:position pos:line="13" pos:column="16"/></init> <condition><expr><name pos:line="13" pos:column="17">i<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&lt;<pos:position pos:line="13" pos:column="23"/></operator> <name><name pos:line="13" pos:column="21">conf<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">-&gt;<pos:position pos:line="13" pos:column="30"/></operator><name pos:line="13" pos:column="27">dirconn<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">-&gt;<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="36">nelts<pos:position pos:line="13" pos:column="41"/></name></name></expr>;<pos:position pos:line="13" pos:column="42"/></condition> <incr><expr><name pos:line="13" pos:column="43">i<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">++<pos:position pos:line="13" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="47"/></control> <block pos:line="13" pos:column="48">{
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><call><name pos:line="14" pos:column="13">strcasecmp<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">arg<pos:position pos:line="14" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="14" pos:column="29">list<pos:position pos:line="14" pos:column="33"/></name><index pos:line="14" pos:column="33">[<expr><name pos:line="14" pos:column="34">i<pos:position pos:line="14" pos:column="35"/></name></expr>]<pos:position pos:line="14" pos:column="36"/></index></name><operator pos:line="14" pos:column="36">.<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="37">name<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call> <operator pos:line="14" pos:column="43">==<pos:position pos:line="14" pos:column="45"/></operator> <literal type="number" pos:line="14" pos:column="46">0<pos:position pos:line="14" pos:column="47"/></literal></expr>)<pos:position pos:line="14" pos:column="48"/></condition><then pos:line="14" pos:column="48"> <block pos:line="14" pos:column="49">{
            <expr_stmt><expr><name pos:line="15" pos:column="13">found<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="21">1<pos:position pos:line="15" pos:column="22"/></literal></expr>;<pos:position pos:line="15" pos:column="23"/></expr_stmt>
            <break pos:line="16" pos:column="13">break;<pos:position pos:line="16" pos:column="19"/></break>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></for>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">found<pos:position pos:line="20" pos:column="15"/></name></expr>)<pos:position pos:line="20" pos:column="16"/></condition><then pos:line="20" pos:column="16"> <block pos:line="20" pos:column="17">{
        <expr_stmt><expr><name pos:line="21" pos:column="9">New<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <call><name pos:line="21" pos:column="15">apr_array_push<pos:position pos:line="21" pos:column="29"/></name><argument_list pos:line="21" pos:column="29">(<argument><expr><name><name pos:line="21" pos:column="30">conf<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">dirconn<pos:position pos:line="21" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">New<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">name<pos:position pos:line="22" pos:column="18"/></name></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">apr_pstrdup<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name><name pos:line="22" pos:column="33">parms<pos:position pos:line="22" pos:column="38"/></name><operator pos:line="22" pos:column="38">-&gt;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="40">pool<pos:position pos:line="22" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="46">arg<pos:position pos:line="22" pos:column="49"/></name></expr></argument>)<pos:position pos:line="22" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="23" pos:column="9">New<pos:position pos:line="23" pos:column="12"/></name><operator pos:line="23" pos:column="12">-&gt;<pos:position pos:line="23" pos:column="17"/></operator><name pos:line="23" pos:column="14">hostaddr<pos:position pos:line="23" pos:column="22"/></name></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">NULL<pos:position pos:line="23" pos:column="29"/></name></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>

        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><call><name pos:line="25" pos:column="13">ap_proxy_is_ipaddr<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><name pos:line="25" pos:column="32">New<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="37">parms<pos:position pos:line="25" pos:column="42"/></name><operator pos:line="25" pos:column="42">-&gt;<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="44">pool<pos:position pos:line="25" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="50"/></condition><then pos:line="25" pos:column="50"> <block pos:line="25" pos:column="51">{
<cpp:if pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">if<pos:position pos:line="26" pos:column="4"/></cpp:directive> <expr><name pos:line="26" pos:column="5">DEBUGGING<pos:position pos:line="26" pos:column="14"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">ap_log_error<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">APLOG_MARK<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="38">APLOG_STARTUP<pos:position pos:line="27" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="53">0<pos:position pos:line="27" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="56">NULL<pos:position pos:line="27" pos:column="60"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="28" pos:column="26">"Parsed addr %s"<pos:position pos:line="28" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="44">inet_ntoa<pos:position pos:line="28" pos:column="53"/></name><argument_list pos:line="28" pos:column="53">(<argument><expr><name><name pos:line="28" pos:column="54">New<pos:position pos:line="28" pos:column="57"/></name><operator pos:line="28" pos:column="57">-&gt;<pos:position pos:line="28" pos:column="62"/></operator><name pos:line="28" pos:column="59">addr<pos:position pos:line="28" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="28" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">ap_log_error<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><name pos:line="29" pos:column="26">APLOG_MARK<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="38">APLOG_STARTUP<pos:position pos:line="29" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="53">0<pos:position pos:line="29" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="56">NULL<pos:position pos:line="29" pos:column="60"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="30" pos:column="26">"Parsed mask %s"<pos:position pos:line="30" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="44">inet_ntoa<pos:position pos:line="30" pos:column="53"/></name><argument_list pos:line="30" pos:column="53">(<argument><expr><name><name pos:line="30" pos:column="54">New<pos:position pos:line="30" pos:column="57"/></name><operator pos:line="30" pos:column="57">-&gt;<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="59">mask<pos:position pos:line="30" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="32" pos:column="10"/></block></then>
        <elseif pos:line="33" pos:column="9">else <if pos:line="33" pos:column="14">if <condition pos:line="33" pos:column="17">(<expr><call><name pos:line="33" pos:column="18">ap_proxy_is_domainname<pos:position pos:line="33" pos:column="40"/></name><argument_list pos:line="33" pos:column="40">(<argument><expr><name pos:line="33" pos:column="41">New<pos:position pos:line="33" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="46">parms<pos:position pos:line="33" pos:column="51"/></name><operator pos:line="33" pos:column="51">-&gt;<pos:position pos:line="33" pos:column="56"/></operator><name pos:line="33" pos:column="53">pool<pos:position pos:line="33" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="59"/></condition><then pos:line="33" pos:column="59"> <block pos:line="33" pos:column="60">{
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">ap_str_tolower<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name><name pos:line="34" pos:column="28">New<pos:position pos:line="34" pos:column="31"/></name><operator pos:line="34" pos:column="31">-&gt;<pos:position pos:line="34" pos:column="36"/></operator><name pos:line="34" pos:column="33">name<pos:position pos:line="34" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="39"/></expr_stmt>
<cpp:if pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">if<pos:position pos:line="35" pos:column="4"/></cpp:directive> <expr><name pos:line="35" pos:column="5">DEBUGGING<pos:position pos:line="35" pos:column="14"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">ap_log_error<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">APLOG_MARK<pos:position pos:line="36" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="38">APLOG_STARTUP<pos:position pos:line="36" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="53">0<pos:position pos:line="36" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="56">NULL<pos:position pos:line="36" pos:column="60"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="37" pos:column="26">"Parsed domain %s"<pos:position pos:line="37" pos:column="44"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="46">New<pos:position pos:line="37" pos:column="49"/></name><operator pos:line="37" pos:column="49">-&gt;<pos:position pos:line="37" pos:column="54"/></operator><name pos:line="37" pos:column="51">name<pos:position pos:line="37" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="57"/></expr_stmt>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="40" pos:column="9">else <if pos:line="40" pos:column="14">if <condition pos:line="40" pos:column="17">(<expr><call><name pos:line="40" pos:column="18">ap_proxy_is_hostname<pos:position pos:line="40" pos:column="38"/></name><argument_list pos:line="40" pos:column="38">(<argument><expr><name pos:line="40" pos:column="39">New<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="44">parms<pos:position pos:line="40" pos:column="49"/></name><operator pos:line="40" pos:column="49">-&gt;<pos:position pos:line="40" pos:column="54"/></operator><name pos:line="40" pos:column="51">pool<pos:position pos:line="40" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="57"/></condition><then pos:line="40" pos:column="57"> <block pos:line="40" pos:column="58">{
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">ap_str_tolower<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name><name pos:line="41" pos:column="28">New<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">-&gt;<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="33">name<pos:position pos:line="41" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>
<cpp:if pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">if<pos:position pos:line="42" pos:column="4"/></cpp:directive> <expr><name pos:line="42" pos:column="5">DEBUGGING<pos:position pos:line="42" pos:column="14"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">ap_log_error<pos:position pos:line="43" pos:column="25"/></name><argument_list pos:line="43" pos:column="25">(<argument><expr><name pos:line="43" pos:column="26">APLOG_MARK<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="38">APLOG_STARTUP<pos:position pos:line="43" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="53">0<pos:position pos:line="43" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="56">NULL<pos:position pos:line="43" pos:column="60"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="44" pos:column="26">"Parsed host %s"<pos:position pos:line="44" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="44">New<pos:position pos:line="44" pos:column="47"/></name><operator pos:line="44" pos:column="47">-&gt;<pos:position pos:line="44" pos:column="52"/></operator><name pos:line="44" pos:column="49">name<pos:position pos:line="44" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if></elseif>
        <else pos:line="47" pos:column="9">else <block pos:line="47" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">ap_proxy_is_word<pos:position pos:line="48" pos:column="29"/></name><argument_list pos:line="48" pos:column="29">(<argument><expr><name pos:line="48" pos:column="30">New<pos:position pos:line="48" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="48" pos:column="35">parms<pos:position pos:line="48" pos:column="40"/></name><operator pos:line="48" pos:column="40">-&gt;<pos:position pos:line="48" pos:column="45"/></operator><name pos:line="48" pos:column="42">pool<pos:position pos:line="48" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="48"/></expr_stmt>
<cpp:if pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">if<pos:position pos:line="49" pos:column="4"/></cpp:directive> <expr><name pos:line="49" pos:column="5">DEBUGGING<pos:position pos:line="49" pos:column="14"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">fprintf<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name pos:line="50" pos:column="21">stderr<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="29">"Parsed word %s\n"<pos:position pos:line="50" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="49">New<pos:position pos:line="50" pos:column="52"/></name><operator pos:line="50" pos:column="52">-&gt;<pos:position pos:line="50" pos:column="57"/></operator><name pos:line="50" pos:column="54">name<pos:position pos:line="50" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="52" pos:column="10"/></block></else></if>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>
    <return pos:line="54" pos:column="5">return <expr><name pos:line="54" pos:column="12">NULL<pos:position pos:line="54" pos:column="16"/></name></expr>;<pos:position pos:line="54" pos:column="17"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
