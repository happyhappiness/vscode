<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1811_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">log_child<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">apr_pool_t<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">p<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="37">const<pos:position pos:line="1" pos:column="42"/></specifier> <name pos:line="1" pos:column="43">char<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">progname<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>,
                     <parameter><decl><type><name pos:line="2" pos:column="22">apr_file_t<pos:position pos:line="2" pos:column="32"/></name> <modifier pos:line="2" pos:column="33">*<pos:position pos:line="2" pos:column="34"/></modifier><modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">fpin<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* Child process code for 'ErrorLog "|..."';
     * may want a common framework for this, since I expect it will
     * be common for other foo-loggers to want this sort of thing...
     */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">rc<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_procattr_t<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">procattr<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_proc_t<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">procnew<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><operator pos:line="12" pos:column="10">(<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">rc<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <call><name pos:line="12" pos:column="16">apr_procattr_create<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><operator pos:line="12" pos:column="36">&amp;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="37">procattr<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="47">p<pos:position pos:line="12" pos:column="48"/></name></expr></argument>)<pos:position pos:line="12" pos:column="49"/></argument_list></call><operator pos:line="12" pos:column="49">)<pos:position pos:line="12" pos:column="50"/></operator> <operator pos:line="12" pos:column="51">==<pos:position pos:line="12" pos:column="53"/></operator> <name pos:line="12" pos:column="54">APR_SUCCESS<pos:position pos:line="12" pos:column="65"/></name><operator pos:line="12" pos:column="65">)<pos:position pos:line="12" pos:column="66"/></operator>
        <operator pos:line="13" pos:column="9">&amp;&amp;<pos:position pos:line="13" pos:column="19"/></operator> <operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><operator pos:line="13" pos:column="13">(<pos:position pos:line="13" pos:column="14"/></operator><name pos:line="13" pos:column="14">rc<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">=<pos:position pos:line="13" pos:column="18"/></operator> <call><name pos:line="13" pos:column="19">apr_procattr_io_set<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name pos:line="13" pos:column="39">procattr<pos:position pos:line="13" pos:column="47"/></name></expr></argument>,
                                      <argument><expr><name pos:line="14" pos:column="39">APR_FULL_BLOCK<pos:position pos:line="14" pos:column="53"/></name></expr></argument>,
                                      <argument><expr><name pos:line="15" pos:column="39">APR_NO_PIPE<pos:position pos:line="15" pos:column="50"/></name></expr></argument>,
                                      <argument><expr><name pos:line="16" pos:column="39">APR_NO_PIPE<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call><operator pos:line="16" pos:column="51">)<pos:position pos:line="16" pos:column="52"/></operator> <operator pos:line="16" pos:column="53">==<pos:position pos:line="16" pos:column="55"/></operator> <name pos:line="16" pos:column="56">APR_SUCCESS<pos:position pos:line="16" pos:column="67"/></name><operator pos:line="16" pos:column="67">)<pos:position pos:line="16" pos:column="68"/></operator></expr>)<pos:position pos:line="16" pos:column="69"/></condition><then pos:line="16" pos:column="69"> <block pos:line="16" pos:column="70">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">char<pos:position pos:line="17" pos:column="13"/></name> <modifier pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></modifier><modifier pos:line="17" pos:column="15">*<pos:position pos:line="17" pos:column="16"/></modifier></type><name pos:line="17" pos:column="16">args<pos:position pos:line="17" pos:column="20"/></name></decl>;<pos:position pos:line="17" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="18" pos:column="9">const<pos:position pos:line="18" pos:column="14"/></specifier> <name pos:line="18" pos:column="15">char<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">pname<pos:position pos:line="18" pos:column="26"/></name></decl>;<pos:position pos:line="18" pos:column="27"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="20" pos:column="9">apr_tokenize_to_argv<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">progname<pos:position pos:line="20" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="40">&amp;<pos:position pos:line="20" pos:column="45"/></operator><name pos:line="20" pos:column="41">args<pos:position pos:line="20" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">p<pos:position pos:line="20" pos:column="48"/></name></expr></argument>)<pos:position pos:line="20" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name pos:line="21" pos:column="9">pname<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <call><name pos:line="21" pos:column="17">apr_pstrdup<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name pos:line="21" pos:column="29">p<pos:position pos:line="21" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="32">args<pos:position pos:line="21" pos:column="36"/></name><index pos:line="21" pos:column="36">[<expr><literal type="number" pos:line="21" pos:column="37">0<pos:position pos:line="21" pos:column="38"/></literal></expr>]<pos:position pos:line="21" pos:column="39"/></index></name></expr></argument>)<pos:position pos:line="21" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">procnew<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">=<pos:position pos:line="22" pos:column="18"/></operator> <operator pos:line="22" pos:column="19">(<pos:position pos:line="22" pos:column="20"/></operator><name pos:line="22" pos:column="20">apr_proc_t<pos:position pos:line="22" pos:column="30"/></name> <operator pos:line="22" pos:column="31">*<pos:position pos:line="22" pos:column="32"/></operator><operator pos:line="22" pos:column="32">)<pos:position pos:line="22" pos:column="33"/></operator><call><name pos:line="22" pos:column="33">apr_pcalloc<pos:position pos:line="22" pos:column="44"/></name><argument_list pos:line="22" pos:column="44">(<argument><expr><name pos:line="22" pos:column="45">p<pos:position pos:line="22" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="48">sizeof<argument_list pos:line="22" pos:column="54">(<argument><expr><operator pos:line="22" pos:column="55">*<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="56">procnew<pos:position pos:line="22" pos:column="63"/></name></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">rc<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">apr_proc_create<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">procnew<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="39">pname<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="46">(<pos:position pos:line="23" pos:column="47"/></operator><specifier pos:line="23" pos:column="47">const<pos:position pos:line="23" pos:column="52"/></specifier> <name pos:line="23" pos:column="53">char<pos:position pos:line="23" pos:column="57"/></name> <operator pos:line="23" pos:column="58">*<pos:position pos:line="23" pos:column="59"/></operator> <specifier pos:line="23" pos:column="60">const<pos:position pos:line="23" pos:column="65"/></specifier> <operator pos:line="23" pos:column="66">*<pos:position pos:line="23" pos:column="67"/></operator><operator pos:line="23" pos:column="67">)<pos:position pos:line="23" pos:column="68"/></operator><name pos:line="23" pos:column="68">args<pos:position pos:line="23" pos:column="72"/></name></expr></argument>,
                             <argument><expr><name pos:line="24" pos:column="30">NULL<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="36">procattr<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="46">p<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt>

        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">rc<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">==<pos:position pos:line="26" pos:column="18"/></operator> <name pos:line="26" pos:column="19">APR_SUCCESS<pos:position pos:line="26" pos:column="30"/></name></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31"> <block pos:line="26" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">apr_pool_note_subprocess<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name pos:line="27" pos:column="38">p<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="41">procnew<pos:position pos:line="27" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="50">APR_KILL_AFTER_TIMEOUT<pos:position pos:line="27" pos:column="72"/></name></expr></argument>)<pos:position pos:line="27" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="74"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="28" pos:column="13">(<pos:position pos:line="28" pos:column="14"/></operator><operator pos:line="28" pos:column="14">*<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">fpin<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">)<pos:position pos:line="28" pos:column="20"/></operator> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <name><name pos:line="28" pos:column="23">procnew<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">in<pos:position pos:line="28" pos:column="34"/></name></name></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">rc<pos:position pos:line="32" pos:column="14"/></name></expr>;<pos:position pos:line="32" pos:column="15"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
