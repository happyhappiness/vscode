<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_1012.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int32<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">worker_thread<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type> <name pos:line="1" pos:column="35">dummy<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">proc_info<pos:position pos:line="3" pos:column="14"/></name> <modifier pos:line="3" pos:column="15">*<pos:position pos:line="3" pos:column="16"/></modifier></type> <name pos:line="3" pos:column="17">ti<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><name pos:line="3" pos:column="22">dummy<pos:position pos:line="3" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">child_slot<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">ti<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">-&gt;<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="26">slot<pos:position pos:line="4" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_pool_t<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">tpool<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><name><name pos:line="5" pos:column="25">ti<pos:position pos:line="5" pos:column="27"/></name><operator pos:line="5" pos:column="27">-&gt;<pos:position pos:line="5" pos:column="32"/></operator><name pos:line="5" pos:column="29">tpool<pos:position pos:line="5" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_allocator_t<pos:position pos:line="6" pos:column="20"/></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">allocator<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_socket_t<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">csd<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name pos:line="7" pos:column="25">NULL<pos:position pos:line="7" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_pool_t<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">ptrans<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>		<comment type="block" pos:line="8" pos:column="33">/* Pool for per-transaction stuff */</comment>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_bucket_alloc_t<pos:position pos:line="9" pos:column="23"/></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">bucket_alloc<pos:position pos:line="9" pos:column="37"/></name></decl>;<pos:position pos:line="9" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_socket_t<pos:position pos:line="10" pos:column="17"/></name> <modifier pos:line="10" pos:column="18">*<pos:position pos:line="10" pos:column="19"/></modifier></type><name pos:line="10" pos:column="19">sd<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><name pos:line="10" pos:column="24">NULL<pos:position pos:line="10" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">apr_status_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">rv<pos:position pos:line="11" pos:column="20"/></name> <init pos:line="11" pos:column="21">= <expr><name pos:line="11" pos:column="23">APR_EINIT<pos:position pos:line="11" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">srv<pos:position pos:line="12" pos:column="12"/></name></decl> , <decl><type ref="prev"/><name pos:line="12" pos:column="15">n<pos:position pos:line="12" pos:column="16"/></name></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">curr_pollfd<pos:position pos:line="13" pos:column="20"/></name> <init pos:line="13" pos:column="21">= <expr><literal type="number" pos:line="13" pos:column="23">0<pos:position pos:line="13" pos:column="24"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="26">last_pollfd<pos:position pos:line="13" pos:column="37"/></name> <init pos:line="13" pos:column="38">= <expr><literal type="number" pos:line="13" pos:column="40">0<pos:position pos:line="13" pos:column="41"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">sigset_t<pos:position pos:line="14" pos:column="13"/></name></type> <name pos:line="14" pos:column="14">sig_mask<pos:position pos:line="14" pos:column="22"/></name></decl>;<pos:position pos:line="14" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">requests_this_child<pos:position pos:line="15" pos:column="28"/></name> <init pos:line="15" pos:column="29">= <expr><name pos:line="15" pos:column="31">ap_max_requests_per_thread<pos:position pos:line="15" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="58"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">apr_pollfd_t<pos:position pos:line="16" pos:column="17"/></name> <modifier pos:line="16" pos:column="18">*<pos:position pos:line="16" pos:column="19"/></modifier></type><name pos:line="16" pos:column="19">pollset<pos:position pos:line="16" pos:column="26"/></name></decl>;<pos:position pos:line="16" pos:column="27"/></decl_stmt>
    <comment type="block" pos:line="17" pos:column="5">/* each worker thread is in control of its own destiny...*/</comment>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">this_worker_should_exit<pos:position pos:line="18" pos:column="32"/></name> <init pos:line="18" pos:column="33">= <expr><literal type="number" pos:line="18" pos:column="35">0<pos:position pos:line="18" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="37"/></decl_stmt> 
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">free<pos:position pos:line="19" pos:column="9"/></name><argument_list pos:line="19" pos:column="9">(<argument><expr><name pos:line="19" pos:column="10">ti<pos:position pos:line="19" pos:column="12"/></name></expr></argument>)<pos:position pos:line="19" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="14"/></expr_stmt>

    <expr_stmt><expr><name pos:line="21" pos:column="5">mpm_state<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="17">AP_MPMQ_STARTING<pos:position pos:line="21" pos:column="33"/></name></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">on_exit_thread<pos:position pos:line="23" pos:column="19"/></name><argument_list pos:line="23" pos:column="19">(<argument><expr><name pos:line="23" pos:column="20">check_restart<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="35">(<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="36">void<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">*<pos:position pos:line="23" pos:column="41"/></operator><operator pos:line="23" pos:column="41">)<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="42">child_slot<pos:position pos:line="23" pos:column="52"/></name></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="54"/></expr_stmt>
          
    <comment type="block" pos:line="25" pos:column="5">/* block the signals for this thread */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">sigfillset<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><operator pos:line="26" pos:column="16">&amp;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="17">sig_mask<pos:position pos:line="26" pos:column="25"/></name></expr></argument>)<pos:position pos:line="26" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">sigprocmask<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">SIG_BLOCK<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="28">&amp;<pos:position pos:line="27" pos:column="33"/></operator><name pos:line="27" pos:column="29">sig_mask<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">NULL<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">apr_allocator_create<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><operator pos:line="29" pos:column="26">&amp;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="27">allocator<pos:position pos:line="29" pos:column="36"/></name></expr></argument>)<pos:position pos:line="29" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">apr_allocator_max_free_set<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">allocator<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">ap_max_mem_free<pos:position pos:line="30" pos:column="58"/></name></expr></argument>)<pos:position pos:line="30" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">apr_pool_create_ex<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><operator pos:line="31" pos:column="24">&amp;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="25">ptrans<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="33">tpool<pos:position pos:line="31" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="40">NULL<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="46">allocator<pos:position pos:line="31" pos:column="55"/></name></expr></argument>)<pos:position pos:line="31" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="57"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">apr_allocator_owner_set<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name pos:line="32" pos:column="29">allocator<pos:position pos:line="32" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="40">ptrans<pos:position pos:line="32" pos:column="46"/></name></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">apr_pool_tag<pos:position pos:line="34" pos:column="17"/></name><argument_list pos:line="34" pos:column="17">(<argument><expr><name pos:line="34" pos:column="18">ptrans<pos:position pos:line="34" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="26">"transaction"<pos:position pos:line="34" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><name pos:line="36" pos:column="5">bucket_alloc<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <call><name pos:line="36" pos:column="20">apr_bucket_alloc_create_ex<pos:position pos:line="36" pos:column="46"/></name><argument_list pos:line="36" pos:column="46">(<argument><expr><name pos:line="36" pos:column="47">allocator<pos:position pos:line="36" pos:column="56"/></name></expr></argument>)<pos:position pos:line="36" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="58"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="38" pos:column="5">apr_thread_mutex_lock<pos:position pos:line="38" pos:column="26"/></name><argument_list pos:line="38" pos:column="26">(<argument><expr><name pos:line="38" pos:column="27">worker_thread_count_mutex<pos:position pos:line="38" pos:column="52"/></name></expr></argument>)<pos:position pos:line="38" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="39" pos:column="5">worker_thread_count<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">++<pos:position pos:line="39" pos:column="26"/></operator></expr>;<pos:position pos:line="39" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">apr_thread_mutex_unlock<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name pos:line="40" pos:column="29">worker_thread_count_mutex<pos:position pos:line="40" pos:column="54"/></name></expr></argument>)<pos:position pos:line="40" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="56"/></expr_stmt>

    <expr_stmt><expr><operator pos:line="42" pos:column="5">(<pos:position pos:line="42" pos:column="6"/></operator><name pos:line="42" pos:column="6">void<pos:position pos:line="42" pos:column="10"/></name><operator pos:line="42" pos:column="10">)<pos:position pos:line="42" pos:column="11"/></operator> <call><name pos:line="42" pos:column="12">ap_update_child_status_from_indexes<pos:position pos:line="42" pos:column="47"/></name><argument_list pos:line="42" pos:column="47">(<argument><expr><literal type="number" pos:line="42" pos:column="48">0<pos:position pos:line="42" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="51">child_slot<pos:position pos:line="42" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="63">SERVER_STARTING<pos:position pos:line="42" pos:column="78"/></name></expr></argument>,
                                               <argument><expr><operator pos:line="43" pos:column="48">(<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="49">request_rec<pos:position pos:line="43" pos:column="60"/></name><operator pos:line="43" pos:column="60">*<pos:position pos:line="43" pos:column="61"/></operator><operator pos:line="43" pos:column="61">)<pos:position pos:line="43" pos:column="62"/></operator><name pos:line="43" pos:column="62">NULL<pos:position pos:line="43" pos:column="66"/></name></expr></argument>)<pos:position pos:line="43" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="68"/></expr_stmt>
                                  
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">apr_poll_setup<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><operator pos:line="45" pos:column="20">&amp;<pos:position pos:line="45" pos:column="25"/></operator><name pos:line="45" pos:column="21">pollset<pos:position pos:line="45" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="30">num_listening_sockets<pos:position pos:line="45" pos:column="51"/></name> <operator pos:line="45" pos:column="52">+<pos:position pos:line="45" pos:column="53"/></operator> <literal type="number" pos:line="45" pos:column="54">1<pos:position pos:line="45" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="57">tpool<pos:position pos:line="45" pos:column="62"/></name></expr></argument>)<pos:position pos:line="45" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="64"/></expr_stmt>
    <for pos:line="46" pos:column="5">for<control pos:line="46" pos:column="8">(<init><expr><name pos:line="46" pos:column="9">n<pos:position pos:line="46" pos:column="10"/></name><operator pos:line="46" pos:column="10">=<pos:position pos:line="46" pos:column="11"/></operator><literal type="number" pos:line="46" pos:column="11">0<pos:position pos:line="46" pos:column="12"/></literal></expr> ;<pos:position pos:line="46" pos:column="14"/></init> <condition><expr><name pos:line="46" pos:column="15">n<pos:position pos:line="46" pos:column="16"/></name> <operator pos:line="46" pos:column="17">&lt;=<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="20">num_listening_sockets<pos:position pos:line="46" pos:column="41"/></name></expr> ;<pos:position pos:line="46" pos:column="43"/></condition> <incr><expr><name pos:line="46" pos:column="44">n<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">++<pos:position pos:line="46" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="46" pos:column="48"/></control>
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="47" pos:column="9">apr_poll_socket_add<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">pollset<pos:position pos:line="47" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="47" pos:column="38">listening_sockets<pos:position pos:line="47" pos:column="55"/></name><index pos:line="47" pos:column="55">[<expr><name pos:line="47" pos:column="56">n<pos:position pos:line="47" pos:column="57"/></name></expr>]<pos:position pos:line="47" pos:column="58"/></index></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="60">APR_POLLIN<pos:position pos:line="47" pos:column="70"/></name></expr></argument>)<pos:position pos:line="47" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="72"/></expr_stmt></block></for>

    <expr_stmt><expr><name pos:line="49" pos:column="5">mpm_state<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <name pos:line="49" pos:column="17">AP_MPMQ_RUNNING<pos:position pos:line="49" pos:column="32"/></name></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>

    <while pos:line="51" pos:column="5">while <condition pos:line="51" pos:column="11">(<expr><literal type="number" pos:line="51" pos:column="12">1<pos:position pos:line="51" pos:column="13"/></literal></expr>)<pos:position pos:line="51" pos:column="14"/></condition> <block pos:line="51" pos:column="15">{
        <comment type="block" pos:line="52" pos:column="9">/* If we're here, then chances are (unless we're the first thread created) 
         * we're going to be held up in the accept mutex, so doing this here
         * shouldn't hurt performance.
         */</comment>

        <expr_stmt><expr><name pos:line="57" pos:column="9">this_worker_should_exit<pos:position pos:line="57" pos:column="32"/></name> <operator pos:line="57" pos:column="33">|=<pos:position pos:line="57" pos:column="35"/></operator> <operator pos:line="57" pos:column="36">(<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="37">ap_max_requests_per_thread<pos:position pos:line="57" pos:column="63"/></name> <operator pos:line="57" pos:column="64">!=<pos:position pos:line="57" pos:column="66"/></operator> <literal type="number" pos:line="57" pos:column="67">0<pos:position pos:line="57" pos:column="68"/></literal><operator pos:line="57" pos:column="68">)<pos:position pos:line="57" pos:column="69"/></operator> <operator pos:line="57" pos:column="70">&amp;&amp;<pos:position pos:line="57" pos:column="80"/></operator> <operator pos:line="57" pos:column="73">(<pos:position pos:line="57" pos:column="74"/></operator><name pos:line="57" pos:column="74">requests_this_child<pos:position pos:line="57" pos:column="93"/></name> <operator pos:line="57" pos:column="94">&lt;=<pos:position pos:line="57" pos:column="99"/></operator> <literal type="number" pos:line="57" pos:column="97">0<pos:position pos:line="57" pos:column="98"/></literal><operator pos:line="57" pos:column="98">)<pos:position pos:line="57" pos:column="99"/></operator></expr>;<pos:position pos:line="57" pos:column="100"/></expr_stmt>
        
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><name pos:line="59" pos:column="13">this_worker_should_exit<pos:position pos:line="59" pos:column="36"/></name></expr>)<pos:position pos:line="59" pos:column="37"/></condition><then pos:line="59" pos:column="37"> <block type="pseudo"><break pos:line="59" pos:column="38">break;<pos:position pos:line="59" pos:column="44"/></break></block></then></if>

        <expr_stmt><expr><operator pos:line="61" pos:column="9">(<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">void<pos:position pos:line="61" pos:column="14"/></name><operator pos:line="61" pos:column="14">)<pos:position pos:line="61" pos:column="15"/></operator> <call><name pos:line="61" pos:column="16">ap_update_child_status_from_indexes<pos:position pos:line="61" pos:column="51"/></name><argument_list pos:line="61" pos:column="51">(<argument><expr><literal type="number" pos:line="61" pos:column="52">0<pos:position pos:line="61" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="55">child_slot<pos:position pos:line="61" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="67">SERVER_READY<pos:position pos:line="61" pos:column="79"/></name></expr></argument>,
                                                   <argument><expr><operator pos:line="62" pos:column="52">(<pos:position pos:line="62" pos:column="53"/></operator><name pos:line="62" pos:column="53">request_rec<pos:position pos:line="62" pos:column="64"/></name><operator pos:line="62" pos:column="64">*<pos:position pos:line="62" pos:column="65"/></operator><operator pos:line="62" pos:column="65">)<pos:position pos:line="62" pos:column="66"/></operator><name pos:line="62" pos:column="66">NULL<pos:position pos:line="62" pos:column="70"/></name></expr></argument>)<pos:position pos:line="62" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="72"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="64" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name pos:line="64" pos:column="31">accept_mutex<pos:position pos:line="64" pos:column="43"/></name></expr></argument>)<pos:position pos:line="64" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="45"/></expr_stmt>

        <while pos:line="66" pos:column="9">while <condition pos:line="66" pos:column="15">(<expr><operator pos:line="66" pos:column="16">!<pos:position pos:line="66" pos:column="17"/></operator><name pos:line="66" pos:column="17">this_worker_should_exit<pos:position pos:line="66" pos:column="40"/></name></expr>)<pos:position pos:line="66" pos:column="41"/></condition> <block pos:line="66" pos:column="42">{
            <decl_stmt><decl><type><name pos:line="67" pos:column="13">apr_int16_t<pos:position pos:line="67" pos:column="24"/></name></type> <name pos:line="67" pos:column="25">event<pos:position pos:line="67" pos:column="30"/></name></decl>;<pos:position pos:line="67" pos:column="31"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="68" pos:column="13">apr_status_t<pos:position pos:line="68" pos:column="25"/></name></type> <name pos:line="68" pos:column="26">ret<pos:position pos:line="68" pos:column="29"/></name></decl>;<pos:position pos:line="68" pos:column="30"/></decl_stmt>

            <expr_stmt><expr><name pos:line="70" pos:column="13">ret<pos:position pos:line="70" pos:column="16"/></name> <operator pos:line="70" pos:column="17">=<pos:position pos:line="70" pos:column="18"/></operator> <call><name pos:line="70" pos:column="19">apr_poll<pos:position pos:line="70" pos:column="27"/></name><argument_list pos:line="70" pos:column="27">(<argument><expr><name pos:line="70" pos:column="28">pollset<pos:position pos:line="70" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="37">num_listening_sockets<pos:position pos:line="70" pos:column="58"/></name> <operator pos:line="70" pos:column="59">+<pos:position pos:line="70" pos:column="60"/></operator> <literal type="number" pos:line="70" pos:column="61">1<pos:position pos:line="70" pos:column="62"/></literal></expr></argument>, <argument><expr><operator pos:line="70" pos:column="64">&amp;<pos:position pos:line="70" pos:column="69"/></operator><name pos:line="70" pos:column="65">srv<pos:position pos:line="70" pos:column="68"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="70">-<pos:position pos:line="70" pos:column="71"/></operator><literal type="number" pos:line="70" pos:column="71">1<pos:position pos:line="70" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="74"/></expr_stmt>

            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><name pos:line="72" pos:column="17">ret<pos:position pos:line="72" pos:column="20"/></name> <operator pos:line="72" pos:column="21">!=<pos:position pos:line="72" pos:column="23"/></operator> <name pos:line="72" pos:column="24">APR_SUCCESS<pos:position pos:line="72" pos:column="35"/></name></expr>)<pos:position pos:line="72" pos:column="36"/></condition><then pos:line="72" pos:column="36"> <block pos:line="72" pos:column="37">{
                <if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><call><name pos:line="73" pos:column="21">APR_STATUS_IS_EINTR<pos:position pos:line="73" pos:column="40"/></name><argument_list pos:line="73" pos:column="40">(<argument><expr><name pos:line="73" pos:column="41">ret<pos:position pos:line="73" pos:column="44"/></name></expr></argument>)<pos:position pos:line="73" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="46"/></condition><then pos:line="73" pos:column="46"> <block pos:line="73" pos:column="47">{
                    <continue pos:line="74" pos:column="21">continue;<pos:position pos:line="74" pos:column="30"/></continue>
                }<pos:position pos:line="75" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="76" pos:column="17">/* poll() will only return errors in catastrophic
                 * circumstances. Let's try exiting gracefully, for now. */</comment>
                <expr_stmt><expr><call><name pos:line="78" pos:column="17">ap_log_error<pos:position pos:line="78" pos:column="29"/></name><argument_list pos:line="78" pos:column="29">(<argument><expr><name pos:line="78" pos:column="30">APLOG_MARK<pos:position pos:line="78" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="42">APLOG_ERR<pos:position pos:line="78" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="53">ret<pos:position pos:line="78" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="58">(<pos:position pos:line="78" pos:column="59"/></operator><specifier pos:line="78" pos:column="59">const<pos:position pos:line="78" pos:column="64"/></specifier> <name pos:line="78" pos:column="65">server_rec<pos:position pos:line="78" pos:column="75"/></name> <operator pos:line="78" pos:column="76">*<pos:position pos:line="78" pos:column="77"/></operator><operator pos:line="78" pos:column="77">)<pos:position pos:line="78" pos:column="78"/></operator>
                             <name pos:line="79" pos:column="30">ap_server_conf<pos:position pos:line="79" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="46">"apr_poll: (listen)"<pos:position pos:line="79" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="68"/></expr_stmt>
                <expr_stmt><expr><name pos:line="80" pos:column="17">this_worker_should_exit<pos:position pos:line="80" pos:column="40"/></name> <operator pos:line="80" pos:column="41">=<pos:position pos:line="80" pos:column="42"/></operator> <literal type="number" pos:line="80" pos:column="43">1<pos:position pos:line="80" pos:column="44"/></literal></expr>;<pos:position pos:line="80" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="81" pos:column="14"/></block></then> <else pos:line="81" pos:column="15">else <block pos:line="81" pos:column="20">{
                <comment type="block" pos:line="82" pos:column="17">/* if we've bailed in apr_poll what's the point of trying to use the data? */</comment>
                <expr_stmt><expr><call><name pos:line="83" pos:column="17">apr_poll_revents_get<pos:position pos:line="83" pos:column="37"/></name><argument_list pos:line="83" pos:column="37">(<argument><expr><operator pos:line="83" pos:column="38">&amp;<pos:position pos:line="83" pos:column="43"/></operator><name pos:line="83" pos:column="39">event<pos:position pos:line="83" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="46">listening_sockets<pos:position pos:line="83" pos:column="63"/></name><index pos:line="83" pos:column="63">[<expr><literal type="number" pos:line="83" pos:column="64">0<pos:position pos:line="83" pos:column="65"/></literal></expr>]<pos:position pos:line="83" pos:column="66"/></index></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="68">pollset<pos:position pos:line="83" pos:column="75"/></name></expr></argument>)<pos:position pos:line="83" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="77"/></expr_stmt>

                <if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><name pos:line="85" pos:column="21">event<pos:position pos:line="85" pos:column="26"/></name> <operator pos:line="85" pos:column="27">&amp;<pos:position pos:line="85" pos:column="32"/></operator> <name pos:line="85" pos:column="29">APR_POLLIN<pos:position pos:line="85" pos:column="39"/></name></expr>)<pos:position pos:line="85" pos:column="40"/></condition><then><block pos:line="85" pos:column="40">{
                    <decl_stmt><decl><type><name pos:line="86" pos:column="21">apr_sockaddr_t<pos:position pos:line="86" pos:column="35"/></name> <modifier pos:line="86" pos:column="36">*<pos:position pos:line="86" pos:column="37"/></modifier></type><name pos:line="86" pos:column="37">rec_sa<pos:position pos:line="86" pos:column="43"/></name></decl>;<pos:position pos:line="86" pos:column="44"/></decl_stmt>
                    <decl_stmt><decl><type><name pos:line="87" pos:column="21">apr_size_t<pos:position pos:line="87" pos:column="31"/></name></type> <name pos:line="87" pos:column="32">len<pos:position pos:line="87" pos:column="35"/></name> <init pos:line="87" pos:column="36">= <expr><literal type="number" pos:line="87" pos:column="38">5<pos:position pos:line="87" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="87" pos:column="40"/></decl_stmt>
                    <decl_stmt><decl><type><name pos:line="88" pos:column="21">char<pos:position pos:line="88" pos:column="25"/></name> <modifier pos:line="88" pos:column="26">*<pos:position pos:line="88" pos:column="27"/></modifier></type><name pos:line="88" pos:column="27">tmpbuf<pos:position pos:line="88" pos:column="33"/></name> <init pos:line="88" pos:column="34">= <expr><call><name pos:line="88" pos:column="36">apr_palloc<pos:position pos:line="88" pos:column="46"/></name><argument_list pos:line="88" pos:column="46">(<argument><expr><name pos:line="88" pos:column="47">ptrans<pos:position pos:line="88" pos:column="53"/></name></expr></argument>, <argument><expr><sizeof pos:line="88" pos:column="55">sizeof<argument_list pos:line="88" pos:column="61">(<argument><expr><name pos:line="88" pos:column="62">char<pos:position pos:line="88" pos:column="66"/></name></expr></argument>)<pos:position pos:line="88" pos:column="67"/></argument_list></sizeof> <operator pos:line="88" pos:column="68">*<pos:position pos:line="88" pos:column="69"/></operator> <literal type="number" pos:line="88" pos:column="70">5<pos:position pos:line="88" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="88" pos:column="73"/></decl_stmt>
                    <expr_stmt><expr><call><name pos:line="89" pos:column="21">apr_sockaddr_info_get<pos:position pos:line="89" pos:column="42"/></name><argument_list pos:line="89" pos:column="42">(<argument><expr><operator pos:line="89" pos:column="43">&amp;<pos:position pos:line="89" pos:column="48"/></operator><name pos:line="89" pos:column="44">rec_sa<pos:position pos:line="89" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="89" pos:column="52">"127.0.0.1"<pos:position pos:line="89" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="65">APR_UNSPEC<pos:position pos:line="89" pos:column="75"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="77">7772<pos:position pos:line="89" pos:column="81"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="89" pos:column="83">0<pos:position pos:line="89" pos:column="84"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="86">ptrans<pos:position pos:line="89" pos:column="92"/></name></expr></argument>)<pos:position pos:line="89" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="94"/></expr_stmt>
                    
                    <if pos:line="91" pos:column="21">if <condition pos:line="91" pos:column="24">(<expr><operator pos:line="91" pos:column="25">(<pos:position pos:line="91" pos:column="26"/></operator><name pos:line="91" pos:column="26">ret<pos:position pos:line="91" pos:column="29"/></name> <operator pos:line="91" pos:column="30">=<pos:position pos:line="91" pos:column="31"/></operator> <call><name pos:line="91" pos:column="32">apr_recvfrom<pos:position pos:line="91" pos:column="44"/></name><argument_list pos:line="91" pos:column="44">(<argument><expr><name pos:line="91" pos:column="45">rec_sa<pos:position pos:line="91" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="53">listening_sockets<pos:position pos:line="91" pos:column="70"/></name><index pos:line="91" pos:column="70">[<expr><literal type="number" pos:line="91" pos:column="71">0<pos:position pos:line="91" pos:column="72"/></literal></expr>]<pos:position pos:line="91" pos:column="73"/></index></name></expr></argument>, <argument><expr><literal type="number" pos:line="91" pos:column="75">0<pos:position pos:line="91" pos:column="76"/></literal></expr></argument>, <argument><expr><name pos:line="91" pos:column="78">tmpbuf<pos:position pos:line="91" pos:column="84"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="86">&amp;<pos:position pos:line="91" pos:column="91"/></operator><name pos:line="91" pos:column="87">len<pos:position pos:line="91" pos:column="90"/></name></expr></argument>)<pos:position pos:line="91" pos:column="91"/></argument_list></call><operator pos:line="91" pos:column="91">)<pos:position pos:line="91" pos:column="92"/></operator>
                        <operator pos:line="92" pos:column="25">!=<pos:position pos:line="92" pos:column="27"/></operator> <name pos:line="92" pos:column="28">APR_SUCCESS<pos:position pos:line="92" pos:column="39"/></name></expr>)<pos:position pos:line="92" pos:column="40"/></condition><then><block pos:line="92" pos:column="40">{
                        <expr_stmt><expr><call><name pos:line="93" pos:column="25">ap_log_error<pos:position pos:line="93" pos:column="37"/></name><argument_list pos:line="93" pos:column="37">(<argument><expr><name pos:line="93" pos:column="38">APLOG_MARK<pos:position pos:line="93" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="50">APLOG_ERR<pos:position pos:line="93" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="61">ret<pos:position pos:line="93" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="66">NULL<pos:position pos:line="93" pos:column="70"/></name></expr></argument>, 
                            <argument><expr><literal type="string" pos:line="94" pos:column="29">"error getting data from UDP!!"<pos:position pos:line="94" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="94" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="62"/></expr_stmt>
                    }<pos:position pos:line="95" pos:column="22"/></block></then><else pos:line="95" pos:column="22">else <block pos:line="95" pos:column="27">{
                        <comment type="block" pos:line="96" pos:column="25">/* add checking??? */</comment>              
                    }<pos:position pos:line="97" pos:column="22"/></block></else></if>
                    <expr_stmt><expr><name pos:line="98" pos:column="21">this_worker_should_exit<pos:position pos:line="98" pos:column="44"/></name> <operator pos:line="98" pos:column="45">=<pos:position pos:line="98" pos:column="46"/></operator> <literal type="number" pos:line="98" pos:column="47">1<pos:position pos:line="98" pos:column="48"/></literal></expr>;<pos:position pos:line="98" pos:column="49"/></expr_stmt>
                }<pos:position pos:line="99" pos:column="18"/></block></then></if>
            }<pos:position pos:line="100" pos:column="14"/></block></else></if>
          
            <if pos:line="102" pos:column="13">if <condition pos:line="102" pos:column="16">(<expr><name pos:line="102" pos:column="17">this_worker_should_exit<pos:position pos:line="102" pos:column="40"/></name></expr>)<pos:position pos:line="102" pos:column="41"/></condition><then pos:line="102" pos:column="41"> <block type="pseudo"><break pos:line="102" pos:column="42">break;<pos:position pos:line="102" pos:column="48"/></break></block></then></if>

            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name pos:line="104" pos:column="17">num_listening_sockets<pos:position pos:line="104" pos:column="38"/></name> <operator pos:line="104" pos:column="39">==<pos:position pos:line="104" pos:column="41"/></operator> <literal type="number" pos:line="104" pos:column="42">1<pos:position pos:line="104" pos:column="43"/></literal></expr>)<pos:position pos:line="104" pos:column="44"/></condition><then pos:line="104" pos:column="44"> <block pos:line="104" pos:column="45">{
                <expr_stmt><expr><name pos:line="105" pos:column="17">sd<pos:position pos:line="105" pos:column="19"/></name> <operator pos:line="105" pos:column="20">=<pos:position pos:line="105" pos:column="21"/></operator> <name><name pos:line="105" pos:column="22">ap_listeners<pos:position pos:line="105" pos:column="34"/></name><operator pos:line="105" pos:column="34">-&gt;<pos:position pos:line="105" pos:column="39"/></operator><name pos:line="105" pos:column="36">sd<pos:position pos:line="105" pos:column="38"/></name></name></expr>;<pos:position pos:line="105" pos:column="39"/></expr_stmt>
                <goto pos:line="106" pos:column="17">goto <name pos:line="106" pos:column="22">got_fd<pos:position pos:line="106" pos:column="28"/></name>;<pos:position pos:line="106" pos:column="29"/></goto>
            }<pos:position pos:line="107" pos:column="14"/></block></then>
            <else pos:line="108" pos:column="13">else <block pos:line="108" pos:column="18">{
                <comment type="block" pos:line="109" pos:column="17">/* find a listener */</comment>
                <expr_stmt><expr><name pos:line="110" pos:column="17">curr_pollfd<pos:position pos:line="110" pos:column="28"/></name> <operator pos:line="110" pos:column="29">=<pos:position pos:line="110" pos:column="30"/></operator> <name pos:line="110" pos:column="31">last_pollfd<pos:position pos:line="110" pos:column="42"/></name></expr>;<pos:position pos:line="110" pos:column="43"/></expr_stmt>
                <do pos:line="111" pos:column="17">do <block pos:line="111" pos:column="20">{
                    <expr_stmt><expr><name pos:line="112" pos:column="21">curr_pollfd<pos:position pos:line="112" pos:column="32"/></name><operator pos:line="112" pos:column="32">++<pos:position pos:line="112" pos:column="34"/></operator></expr>;<pos:position pos:line="112" pos:column="35"/></expr_stmt>

                    <if pos:line="114" pos:column="21">if <condition pos:line="114" pos:column="24">(<expr><name pos:line="114" pos:column="25">curr_pollfd<pos:position pos:line="114" pos:column="36"/></name> <operator pos:line="114" pos:column="37">&gt;<pos:position pos:line="114" pos:column="41"/></operator> <name pos:line="114" pos:column="39">num_listening_sockets<pos:position pos:line="114" pos:column="60"/></name></expr>)<pos:position pos:line="114" pos:column="61"/></condition><then pos:line="114" pos:column="61">
                        <block type="pseudo"><expr_stmt><expr><name pos:line="115" pos:column="25">curr_pollfd<pos:position pos:line="115" pos:column="36"/></name> <operator pos:line="115" pos:column="37">=<pos:position pos:line="115" pos:column="38"/></operator> <literal type="number" pos:line="115" pos:column="39">1<pos:position pos:line="115" pos:column="40"/></literal></expr>;<pos:position pos:line="115" pos:column="41"/></expr_stmt></block></then></if>
                    
                    <comment type="block" pos:line="117" pos:column="21">/* Get the revent... */</comment>
                    <expr_stmt><expr><call><name pos:line="118" pos:column="21">apr_poll_revents_get<pos:position pos:line="118" pos:column="41"/></name><argument_list pos:line="118" pos:column="41">(<argument><expr><operator pos:line="118" pos:column="42">&amp;<pos:position pos:line="118" pos:column="47"/></operator><name pos:line="118" pos:column="43">event<pos:position pos:line="118" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="118" pos:column="50">listening_sockets<pos:position pos:line="118" pos:column="67"/></name><index pos:line="118" pos:column="67">[<expr><name pos:line="118" pos:column="68">curr_pollfd<pos:position pos:line="118" pos:column="79"/></name></expr>]<pos:position pos:line="118" pos:column="80"/></index></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="82">pollset<pos:position pos:line="118" pos:column="89"/></name></expr></argument>)<pos:position pos:line="118" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="91"/></expr_stmt>
                    
                    <if pos:line="120" pos:column="21">if <condition pos:line="120" pos:column="24">(<expr><name pos:line="120" pos:column="25">event<pos:position pos:line="120" pos:column="30"/></name> <operator pos:line="120" pos:column="31">&amp;<pos:position pos:line="120" pos:column="36"/></operator> <name pos:line="120" pos:column="33">APR_POLLIN<pos:position pos:line="120" pos:column="43"/></name></expr>)<pos:position pos:line="120" pos:column="44"/></condition><then pos:line="120" pos:column="44"> <block pos:line="120" pos:column="45">{
                        <expr_stmt><expr><name pos:line="121" pos:column="25">last_pollfd<pos:position pos:line="121" pos:column="36"/></name> <operator pos:line="121" pos:column="37">=<pos:position pos:line="121" pos:column="38"/></operator> <name pos:line="121" pos:column="39">curr_pollfd<pos:position pos:line="121" pos:column="50"/></name></expr>;<pos:position pos:line="121" pos:column="51"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="122" pos:column="25">sd<pos:position pos:line="122" pos:column="27"/></name> <operator pos:line="122" pos:column="28">=<pos:position pos:line="122" pos:column="29"/></operator> <name><name pos:line="122" pos:column="30">listening_sockets<pos:position pos:line="122" pos:column="47"/></name><index pos:line="122" pos:column="47">[<expr><name pos:line="122" pos:column="48">curr_pollfd<pos:position pos:line="122" pos:column="59"/></name></expr>]<pos:position pos:line="122" pos:column="60"/></index></name></expr>;<pos:position pos:line="122" pos:column="61"/></expr_stmt>
                        <goto pos:line="123" pos:column="25">goto <name pos:line="123" pos:column="30">got_fd<pos:position pos:line="123" pos:column="36"/></name>;<pos:position pos:line="123" pos:column="37"/></goto>
                    }<pos:position pos:line="124" pos:column="22"/></block></then></if>
                }<pos:position pos:line="125" pos:column="18"/></block> while <condition pos:line="125" pos:column="25">(<expr><name pos:line="125" pos:column="26">curr_pollfd<pos:position pos:line="125" pos:column="37"/></name> <operator pos:line="125" pos:column="38">!=<pos:position pos:line="125" pos:column="40"/></operator> <name pos:line="125" pos:column="41">last_pollfd<pos:position pos:line="125" pos:column="52"/></name></expr>)<pos:position pos:line="125" pos:column="53"/></condition>;<pos:position pos:line="125" pos:column="54"/></do>
            }<pos:position pos:line="126" pos:column="14"/></block></else></if>
        }<pos:position pos:line="127" pos:column="10"/></block></while>
    <label><name pos:line="128" pos:column="5">got_fd<pos:position pos:line="128" pos:column="11"/></name>:<pos:position pos:line="128" pos:column="12"/></label>

        <if pos:line="130" pos:column="9">if <condition pos:line="130" pos:column="12">(<expr><operator pos:line="130" pos:column="13">!<pos:position pos:line="130" pos:column="14"/></operator><name pos:line="130" pos:column="14">this_worker_should_exit<pos:position pos:line="130" pos:column="37"/></name></expr>)<pos:position pos:line="130" pos:column="38"/></condition><then pos:line="130" pos:column="38"> <block pos:line="130" pos:column="39">{
            <expr_stmt><expr><name pos:line="131" pos:column="13">rv<pos:position pos:line="131" pos:column="15"/></name> <operator pos:line="131" pos:column="16">=<pos:position pos:line="131" pos:column="17"/></operator> <call><name pos:line="131" pos:column="18">apr_accept<pos:position pos:line="131" pos:column="28"/></name><argument_list pos:line="131" pos:column="28">(<argument><expr><operator pos:line="131" pos:column="29">&amp;<pos:position pos:line="131" pos:column="34"/></operator><name pos:line="131" pos:column="30">csd<pos:position pos:line="131" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="35">sd<pos:position pos:line="131" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="39">ptrans<pos:position pos:line="131" pos:column="45"/></name></expr></argument>)<pos:position pos:line="131" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="47"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="133" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="133" pos:column="36"/></name><argument_list pos:line="133" pos:column="36">(<argument><expr><name pos:line="133" pos:column="37">accept_mutex<pos:position pos:line="133" pos:column="49"/></name></expr></argument>)<pos:position pos:line="133" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="51"/></expr_stmt>
            <if pos:line="134" pos:column="13">if <condition pos:line="134" pos:column="16">(<expr><name pos:line="134" pos:column="17">rv<pos:position pos:line="134" pos:column="19"/></name> <operator pos:line="134" pos:column="20">!=<pos:position pos:line="134" pos:column="22"/></operator> <name pos:line="134" pos:column="23">APR_SUCCESS<pos:position pos:line="134" pos:column="34"/></name></expr>)<pos:position pos:line="134" pos:column="35"/></condition><then pos:line="134" pos:column="35"> <block pos:line="134" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="135" pos:column="17">ap_log_error<pos:position pos:line="135" pos:column="29"/></name><argument_list pos:line="135" pos:column="29">(<argument><expr><name pos:line="135" pos:column="30">APLOG_MARK<pos:position pos:line="135" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="42">APLOG_ERR<pos:position pos:line="135" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="53">rv<pos:position pos:line="135" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="57">ap_server_conf<pos:position pos:line="135" pos:column="71"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="136" pos:column="19">"apr_accept"<pos:position pos:line="136" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="137" pos:column="14"/></block></then> <else pos:line="137" pos:column="15">else <block pos:line="137" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="138" pos:column="17">process_socket<pos:position pos:line="138" pos:column="31"/></name><argument_list pos:line="138" pos:column="31">(<argument><expr><name pos:line="138" pos:column="32">ptrans<pos:position pos:line="138" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="40">csd<pos:position pos:line="138" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="45">child_slot<pos:position pos:line="138" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="57">bucket_alloc<pos:position pos:line="138" pos:column="69"/></name></expr></argument>)<pos:position pos:line="138" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="71"/></expr_stmt>
                <expr_stmt><expr><name pos:line="139" pos:column="17">requests_this_child<pos:position pos:line="139" pos:column="36"/></name><operator pos:line="139" pos:column="36">--<pos:position pos:line="139" pos:column="38"/></operator></expr>;<pos:position pos:line="139" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="140" pos:column="14"/></block></else></if>
        }<pos:position pos:line="141" pos:column="10"/></block></then>
        <else pos:line="142" pos:column="9">else <block pos:line="142" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="143" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="143" pos:column="36"/></name><argument_list pos:line="143" pos:column="36">(<argument><expr><name pos:line="143" pos:column="37">accept_mutex<pos:position pos:line="143" pos:column="49"/></name></expr></argument>)<pos:position pos:line="143" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="51"/></expr_stmt>
            <break pos:line="144" pos:column="13">break;<pos:position pos:line="144" pos:column="19"/></break>
        }<pos:position pos:line="145" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="146" pos:column="9">apr_pool_clear<pos:position pos:line="146" pos:column="23"/></name><argument_list pos:line="146" pos:column="23">(<argument><expr><name pos:line="146" pos:column="24">ptrans<pos:position pos:line="146" pos:column="30"/></name></expr></argument>)<pos:position pos:line="146" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="147" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="149" pos:column="5">ap_update_child_status_from_indexes<pos:position pos:line="149" pos:column="40"/></name><argument_list pos:line="149" pos:column="40">(<argument><expr><literal type="number" pos:line="149" pos:column="41">0<pos:position pos:line="149" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="149" pos:column="44">child_slot<pos:position pos:line="149" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="56">SERVER_DEAD<pos:position pos:line="149" pos:column="67"/></name></expr></argument>, <argument><expr><operator pos:line="149" pos:column="69">(<pos:position pos:line="149" pos:column="70"/></operator><name pos:line="149" pos:column="70">request_rec<pos:position pos:line="149" pos:column="81"/></name><operator pos:line="149" pos:column="81">*<pos:position pos:line="149" pos:column="82"/></operator><operator pos:line="149" pos:column="82">)<pos:position pos:line="149" pos:column="83"/></operator><name pos:line="149" pos:column="83">NULL<pos:position pos:line="149" pos:column="87"/></name></expr></argument>)<pos:position pos:line="149" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="89"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="151" pos:column="5">apr_bucket_alloc_destroy<pos:position pos:line="151" pos:column="29"/></name><argument_list pos:line="151" pos:column="29">(<argument><expr><name pos:line="151" pos:column="30">bucket_alloc<pos:position pos:line="151" pos:column="42"/></name></expr></argument>)<pos:position pos:line="151" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="153" pos:column="5">ap_log_error<pos:position pos:line="153" pos:column="17"/></name><argument_list pos:line="153" pos:column="17">(<argument><expr><name pos:line="153" pos:column="18">APLOG_MARK<pos:position pos:line="153" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="30">APLOG_NOTICE<pos:position pos:line="153" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="153" pos:column="44">0<pos:position pos:line="153" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="153" pos:column="47">NULL<pos:position pos:line="153" pos:column="51"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="154" pos:column="18">"worker_thread %ld exiting"<pos:position pos:line="154" pos:column="45"/></literal></expr></argument>, <argument><expr><call><name pos:line="154" pos:column="47">find_thread<pos:position pos:line="154" pos:column="58"/></name><argument_list pos:line="154" pos:column="58">(<argument><expr><name pos:line="154" pos:column="59">NULL<pos:position pos:line="154" pos:column="63"/></name></expr></argument>)<pos:position pos:line="154" pos:column="64"/></argument_list></call></expr></argument>)<pos:position pos:line="154" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="66"/></expr_stmt>
    
    <expr_stmt><expr><call><name pos:line="156" pos:column="5">apr_thread_mutex_lock<pos:position pos:line="156" pos:column="26"/></name><argument_list pos:line="156" pos:column="26">(<argument><expr><name pos:line="156" pos:column="27">worker_thread_count_mutex<pos:position pos:line="156" pos:column="52"/></name></expr></argument>)<pos:position pos:line="156" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="157" pos:column="5">worker_thread_count<pos:position pos:line="157" pos:column="24"/></name><operator pos:line="157" pos:column="24">--<pos:position pos:line="157" pos:column="26"/></operator></expr>;<pos:position pos:line="157" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="158" pos:column="5">apr_thread_mutex_unlock<pos:position pos:line="158" pos:column="28"/></name><argument_list pos:line="158" pos:column="28">(<argument><expr><name pos:line="158" pos:column="29">worker_thread_count_mutex<pos:position pos:line="158" pos:column="54"/></name></expr></argument>)<pos:position pos:line="158" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="56"/></expr_stmt>

    <return pos:line="160" pos:column="5">return <expr><operator pos:line="160" pos:column="12">(<pos:position pos:line="160" pos:column="13"/></operator><literal type="number" pos:line="160" pos:column="13">0<pos:position pos:line="160" pos:column="14"/></literal><operator pos:line="160" pos:column="14">)<pos:position pos:line="160" pos:column="15"/></operator></expr>;<pos:position pos:line="160" pos:column="16"/></return>
}<pos:position pos:line="161" pos:column="2"/></block></function></unit>
