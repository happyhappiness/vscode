<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2905_httpd-2.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name> <name pos:line="2" pos:column="5">PREFIX<pos:position pos:line="2" pos:column="11"/></name></type>(<name pos:line="2" pos:column="12">checkPiTarget<pos:position pos:line="2" pos:column="25"/></name>)<parameter_list pos:line="2" pos:column="26">(<parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">ENCODING<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">enc<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="48">const<pos:position pos:line="2" pos:column="53"/></specifier> <name pos:line="2" pos:column="54">char<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">ptr<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="65">const<pos:position pos:line="2" pos:column="70"/></specifier> <name pos:line="2" pos:column="71">char<pos:position pos:line="2" pos:column="75"/></name> <modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="77">end<pos:position pos:line="2" pos:column="80"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="82">int<pos:position pos:line="2" pos:column="85"/></name> <modifier pos:line="2" pos:column="86">*<pos:position pos:line="2" pos:column="87"/></modifier></type><name pos:line="2" pos:column="87">tokPtr<pos:position pos:line="2" pos:column="93"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="94"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">upper<pos:position pos:line="4" pos:column="12"/></name> <init pos:line="4" pos:column="13">= <expr><literal type="number" pos:line="4" pos:column="15">0<pos:position pos:line="4" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
  <expr_stmt><expr><operator pos:line="5" pos:column="3">*<pos:position pos:line="5" pos:column="4"/></operator><name pos:line="5" pos:column="4">tokPtr<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">=<pos:position pos:line="5" pos:column="12"/></operator> <name pos:line="5" pos:column="13">XML_TOK_PI<pos:position pos:line="5" pos:column="23"/></name></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">end<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">-<pos:position pos:line="6" pos:column="12"/></operator> <name pos:line="6" pos:column="13">ptr<pos:position pos:line="6" pos:column="16"/></name> <operator pos:line="6" pos:column="17">!=<pos:position pos:line="6" pos:column="19"/></operator> <call><name pos:line="6" pos:column="20">MINBPC<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><name pos:line="6" pos:column="27">enc<pos:position pos:line="6" pos:column="30"/></name></expr></argument>)<pos:position pos:line="6" pos:column="31"/></argument_list></call><operator pos:line="6" pos:column="31">*<pos:position pos:line="6" pos:column="32"/></operator><literal type="number" pos:line="6" pos:column="32">3<pos:position pos:line="6" pos:column="33"/></literal></expr>)<pos:position pos:line="6" pos:column="34"/></condition><then pos:line="6" pos:column="34">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><literal type="number" pos:line="7" pos:column="12">1<pos:position pos:line="7" pos:column="13"/></literal></expr>;<pos:position pos:line="7" pos:column="14"/></return></block></then></if>
  <switch pos:line="8" pos:column="3">switch <condition pos:line="8" pos:column="10">(<expr><call><name pos:line="8" pos:column="11">BYTE_TO_ASCII<pos:position pos:line="8" pos:column="24"/></name><argument_list pos:line="8" pos:column="24">(<argument><expr><name pos:line="8" pos:column="25">enc<pos:position pos:line="8" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="30">ptr<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="35"/></condition> <block pos:line="8" pos:column="36">{
  <case pos:line="9" pos:column="3">case <expr><name pos:line="9" pos:column="8">ASCII_x<pos:position pos:line="9" pos:column="15"/></name></expr>:<pos:position pos:line="9" pos:column="16"/></case>
    <break pos:line="10" pos:column="5">break;<pos:position pos:line="10" pos:column="11"/></break>
  <case pos:line="11" pos:column="3">case <expr><name pos:line="11" pos:column="8">ASCII_X<pos:position pos:line="11" pos:column="15"/></name></expr>:<pos:position pos:line="11" pos:column="16"/></case>
    <expr_stmt><expr><name pos:line="12" pos:column="5">upper<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <literal type="number" pos:line="12" pos:column="13">1<pos:position pos:line="12" pos:column="14"/></literal></expr>;<pos:position pos:line="12" pos:column="15"/></expr_stmt>
    <break pos:line="13" pos:column="5">break;<pos:position pos:line="13" pos:column="11"/></break>
  <default pos:line="14" pos:column="3">default:<pos:position pos:line="14" pos:column="11"/></default>
    <return pos:line="15" pos:column="5">return <expr><literal type="number" pos:line="15" pos:column="12">1<pos:position pos:line="15" pos:column="13"/></literal></expr>;<pos:position pos:line="15" pos:column="14"/></return>
  }<pos:position pos:line="16" pos:column="4"/></block></switch>
  <expr_stmt><expr><name pos:line="17" pos:column="3">ptr<pos:position pos:line="17" pos:column="6"/></name> <operator pos:line="17" pos:column="7">+=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">MINBPC<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><name pos:line="17" pos:column="17">enc<pos:position pos:line="17" pos:column="20"/></name></expr></argument>)<pos:position pos:line="17" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
  <switch pos:line="18" pos:column="3">switch <condition pos:line="18" pos:column="10">(<expr><call><name pos:line="18" pos:column="11">BYTE_TO_ASCII<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">enc<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">ptr<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="35"/></condition> <block pos:line="18" pos:column="36">{
  <case pos:line="19" pos:column="3">case <expr><name pos:line="19" pos:column="8">ASCII_m<pos:position pos:line="19" pos:column="15"/></name></expr>:<pos:position pos:line="19" pos:column="16"/></case>
    <break pos:line="20" pos:column="5">break;<pos:position pos:line="20" pos:column="11"/></break>
  <case pos:line="21" pos:column="3">case <expr><name pos:line="21" pos:column="8">ASCII_M<pos:position pos:line="21" pos:column="15"/></name></expr>:<pos:position pos:line="21" pos:column="16"/></case>
    <expr_stmt><expr><name pos:line="22" pos:column="5">upper<pos:position pos:line="22" pos:column="10"/></name> <operator pos:line="22" pos:column="11">=<pos:position pos:line="22" pos:column="12"/></operator> <literal type="number" pos:line="22" pos:column="13">1<pos:position pos:line="22" pos:column="14"/></literal></expr>;<pos:position pos:line="22" pos:column="15"/></expr_stmt>
    <break pos:line="23" pos:column="5">break;<pos:position pos:line="23" pos:column="11"/></break>
  <default pos:line="24" pos:column="3">default:<pos:position pos:line="24" pos:column="11"/></default>
    <return pos:line="25" pos:column="5">return <expr><literal type="number" pos:line="25" pos:column="12">1<pos:position pos:line="25" pos:column="13"/></literal></expr>;<pos:position pos:line="25" pos:column="14"/></return>
  }<pos:position pos:line="26" pos:column="4"/></block></switch>
  <expr_stmt><expr><name pos:line="27" pos:column="3">ptr<pos:position pos:line="27" pos:column="6"/></name> <operator pos:line="27" pos:column="7">+=<pos:position pos:line="27" pos:column="9"/></operator> <call><name pos:line="27" pos:column="10">MINBPC<pos:position pos:line="27" pos:column="16"/></name><argument_list pos:line="27" pos:column="16">(<argument><expr><name pos:line="27" pos:column="17">enc<pos:position pos:line="27" pos:column="20"/></name></expr></argument>)<pos:position pos:line="27" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="22"/></expr_stmt>
  <switch pos:line="28" pos:column="3">switch <condition pos:line="28" pos:column="10">(<expr><call><name pos:line="28" pos:column="11">BYTE_TO_ASCII<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">enc<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="30">ptr<pos:position pos:line="28" pos:column="33"/></name></expr></argument>)<pos:position pos:line="28" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="35"/></condition> <block pos:line="28" pos:column="36">{
  <case pos:line="29" pos:column="3">case <expr><name pos:line="29" pos:column="8">ASCII_l<pos:position pos:line="29" pos:column="15"/></name></expr>:<pos:position pos:line="29" pos:column="16"/></case>
    <break pos:line="30" pos:column="5">break;<pos:position pos:line="30" pos:column="11"/></break>
  <case pos:line="31" pos:column="3">case <expr><name pos:line="31" pos:column="8">ASCII_L<pos:position pos:line="31" pos:column="15"/></name></expr>:<pos:position pos:line="31" pos:column="16"/></case>
    <expr_stmt><expr><name pos:line="32" pos:column="5">upper<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <literal type="number" pos:line="32" pos:column="13">1<pos:position pos:line="32" pos:column="14"/></literal></expr>;<pos:position pos:line="32" pos:column="15"/></expr_stmt>
    <break pos:line="33" pos:column="5">break;<pos:position pos:line="33" pos:column="11"/></break>
  <default pos:line="34" pos:column="3">default:<pos:position pos:line="34" pos:column="11"/></default>
    <return pos:line="35" pos:column="5">return <expr><literal type="number" pos:line="35" pos:column="12">1<pos:position pos:line="35" pos:column="13"/></literal></expr>;<pos:position pos:line="35" pos:column="14"/></return>
  }<pos:position pos:line="36" pos:column="4"/></block></switch>
  <if pos:line="37" pos:column="3">if <condition pos:line="37" pos:column="6">(<expr><name pos:line="37" pos:column="7">upper<pos:position pos:line="37" pos:column="12"/></name></expr>)<pos:position pos:line="37" pos:column="13"/></condition><then pos:line="37" pos:column="13">
    <block type="pseudo"><return pos:line="38" pos:column="5">return <expr><literal type="number" pos:line="38" pos:column="12">0<pos:position pos:line="38" pos:column="13"/></literal></expr>;<pos:position pos:line="38" pos:column="14"/></return></block></then></if>
  <expr_stmt><expr><operator pos:line="39" pos:column="3">*<pos:position pos:line="39" pos:column="4"/></operator><name pos:line="39" pos:column="4">tokPtr<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <name pos:line="39" pos:column="13">XML_TOK_XML_DECL<pos:position pos:line="39" pos:column="29"/></name></expr>;<pos:position pos:line="39" pos:column="30"/></expr_stmt>
  <return pos:line="40" pos:column="3">return <expr><literal type="number" pos:line="40" pos:column="10">1<pos:position pos:line="40" pos:column="11"/></literal></expr>;<pos:position pos:line="40" pos:column="12"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
