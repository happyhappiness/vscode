<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_964_httpd-2.4.25.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">extract_dn<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">apr_table_t<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">t<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="40">apr_hash_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">nids<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="58">const<pos:position pos:line="1" pos:column="63"/></specifier> <name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">pfx<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
                       <parameter><decl><type><name pos:line="2" pos:column="24">X509_NAME<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">xn<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="39">apr_pool_t<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">p<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="53"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">STACK_OF<pos:position pos:line="4" pos:column="13"/></name><argument_list pos:line="4" pos:column="13">(<argument><expr><name pos:line="4" pos:column="14">X509_NAME_ENTRY<pos:position pos:line="4" pos:column="29"/></name></expr></argument>)<pos:position pos:line="4" pos:column="30"/></argument_list></call> <operator pos:line="4" pos:column="31">*<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="32">ents<pos:position pos:line="4" pos:column="36"/></name> <operator pos:line="4" pos:column="37">=<pos:position pos:line="4" pos:column="38"/></operator> <name><name pos:line="4" pos:column="39">xn<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">entries<pos:position pos:line="4" pos:column="50"/></name></name></expr>;<pos:position pos:line="4" pos:column="51"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">X509_NAME_ENTRY<pos:position pos:line="5" pos:column="20"/></name> <modifier pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></modifier></type><name pos:line="5" pos:column="22">xsne<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_hash_t<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">count<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">i<pos:position pos:line="7" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="12">nid<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* Hash of (int) NID -&gt; (int *) counter to count each time an RDN
     * with the given NID has been seen. */</comment>
    <expr_stmt><expr><name pos:line="11" pos:column="5">count<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <call><name pos:line="11" pos:column="13">apr_hash_make<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name pos:line="11" pos:column="27">p<pos:position pos:line="11" pos:column="28"/></name></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt>

    <comment type="block" pos:line="13" pos:column="5">/* For each RDN... */</comment>
    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><expr><name pos:line="14" pos:column="10">i<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <literal type="number" pos:line="14" pos:column="14">0<pos:position pos:line="14" pos:column="15"/></literal></expr>;<pos:position pos:line="14" pos:column="16"/></init> <condition><expr><name pos:line="14" pos:column="17">i<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">&lt;<pos:position pos:line="14" pos:column="23"/></operator> <call><name pos:line="14" pos:column="21">sk_X509_NAME_ENTRY_num<pos:position pos:line="14" pos:column="43"/></name><argument_list pos:line="14" pos:column="43">(<argument><expr><name pos:line="14" pos:column="44">ents<pos:position pos:line="14" pos:column="48"/></name></expr></argument>)<pos:position pos:line="14" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="50"/></condition> <incr><expr><name pos:line="14" pos:column="51">i<pos:position pos:line="14" pos:column="52"/></name><operator pos:line="14" pos:column="52">++<pos:position pos:line="14" pos:column="54"/></operator></expr></incr>)<pos:position pos:line="14" pos:column="55"/></control> <block pos:line="14" pos:column="56">{
         <decl_stmt><decl><type><specifier pos:line="15" pos:column="10">const<pos:position pos:line="15" pos:column="15"/></specifier> <name pos:line="15" pos:column="16">char<pos:position pos:line="15" pos:column="20"/></name> <modifier pos:line="15" pos:column="21">*<pos:position pos:line="15" pos:column="22"/></modifier></type><name pos:line="15" pos:column="22">tag<pos:position pos:line="15" pos:column="25"/></name></decl>;<pos:position pos:line="15" pos:column="26"/></decl_stmt>

         <expr_stmt><expr><name pos:line="17" pos:column="10">xsne<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <call><name pos:line="17" pos:column="17">sk_X509_NAME_ENTRY_value<pos:position pos:line="17" pos:column="41"/></name><argument_list pos:line="17" pos:column="41">(<argument><expr><name pos:line="17" pos:column="42">ents<pos:position pos:line="17" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="48">i<pos:position pos:line="17" pos:column="49"/></name></expr></argument>)<pos:position pos:line="17" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="51"/></expr_stmt>

         <comment type="block" pos:line="19" pos:column="10">/* Retrieve the nid, and check whether this is one of the nids
          * which are to be extracted. */</comment>
         <expr_stmt><expr><name pos:line="21" pos:column="10">nid<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <call><name pos:line="21" pos:column="16">OBJ_obj2nid<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><operator pos:line="21" pos:column="28">(<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">ASN1_OBJECT<pos:position pos:line="21" pos:column="40"/></name> <operator pos:line="21" pos:column="41">*<pos:position pos:line="21" pos:column="42"/></operator><operator pos:line="21" pos:column="42">)<pos:position pos:line="21" pos:column="43"/></operator><call><name pos:line="21" pos:column="43">X509_NAME_ENTRY_get_object<pos:position pos:line="21" pos:column="69"/></name><argument_list pos:line="21" pos:column="69">(<argument><expr><name pos:line="21" pos:column="70">xsne<pos:position pos:line="21" pos:column="74"/></name></expr></argument>)<pos:position pos:line="21" pos:column="75"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="77"/></expr_stmt>

         <expr_stmt><expr><name pos:line="23" pos:column="10">tag<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">=<pos:position pos:line="23" pos:column="15"/></operator> <call><name pos:line="23" pos:column="16">apr_hash_get<pos:position pos:line="23" pos:column="28"/></name><argument_list pos:line="23" pos:column="28">(<argument><expr><name pos:line="23" pos:column="29">nids<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="35">&amp;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="36">nid<pos:position pos:line="23" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="41">sizeof <name pos:line="23" pos:column="48">nid<pos:position pos:line="23" pos:column="51"/></name></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>
         <if pos:line="24" pos:column="10">if <condition pos:line="24" pos:column="13">(<expr><name pos:line="24" pos:column="14">tag<pos:position pos:line="24" pos:column="17"/></name></expr>)<pos:position pos:line="24" pos:column="18"/></condition><then pos:line="24" pos:column="18"> <block pos:line="24" pos:column="19">{
             <decl_stmt><decl><type><specifier pos:line="25" pos:column="14">const<pos:position pos:line="25" pos:column="19"/></specifier> <name pos:line="25" pos:column="20">char<pos:position pos:line="25" pos:column="24"/></name> <modifier pos:line="25" pos:column="25">*<pos:position pos:line="25" pos:column="26"/></modifier></type><name pos:line="25" pos:column="26">key<pos:position pos:line="25" pos:column="29"/></name></decl>;<pos:position pos:line="25" pos:column="30"/></decl_stmt>
             <decl_stmt><decl><type><name pos:line="26" pos:column="14">int<pos:position pos:line="26" pos:column="17"/></name> <modifier pos:line="26" pos:column="18">*<pos:position pos:line="26" pos:column="19"/></modifier></type><name pos:line="26" pos:column="19">dup<pos:position pos:line="26" pos:column="22"/></name></decl>;<pos:position pos:line="26" pos:column="23"/></decl_stmt>
             <decl_stmt><decl><type><name pos:line="27" pos:column="14">char<pos:position pos:line="27" pos:column="18"/></name> <modifier pos:line="27" pos:column="19">*<pos:position pos:line="27" pos:column="20"/></modifier></type><name pos:line="27" pos:column="20">value<pos:position pos:line="27" pos:column="25"/></name></decl>;<pos:position pos:line="27" pos:column="26"/></decl_stmt>

             <comment type="block" pos:line="29" pos:column="14">/* Check whether a variable with this nid was already
              * been used; if so, use the foo_N=bar syntax. */</comment>
             <expr_stmt><expr><name pos:line="31" pos:column="14">dup<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">=<pos:position pos:line="31" pos:column="19"/></operator> <call><name pos:line="31" pos:column="20">apr_hash_get<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name pos:line="31" pos:column="33">count<pos:position pos:line="31" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="31" pos:column="40">&amp;<pos:position pos:line="31" pos:column="45"/></operator><name pos:line="31" pos:column="41">nid<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="46">sizeof <name pos:line="31" pos:column="53">nid<pos:position pos:line="31" pos:column="56"/></name></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="58"/></expr_stmt>
             <if pos:line="32" pos:column="14">if <condition pos:line="32" pos:column="17">(<expr><name pos:line="32" pos:column="18">dup<pos:position pos:line="32" pos:column="21"/></name></expr>)<pos:position pos:line="32" pos:column="22"/></condition><then pos:line="32" pos:column="22"> <block pos:line="32" pos:column="23">{
                 <expr_stmt><expr><name pos:line="33" pos:column="18">key<pos:position pos:line="33" pos:column="21"/></name> <operator pos:line="33" pos:column="22">=<pos:position pos:line="33" pos:column="23"/></operator> <call><name pos:line="33" pos:column="24">apr_psprintf<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">p<pos:position pos:line="33" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="40">"%s%s_%d"<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="51">pfx<pos:position pos:line="33" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="56">tag<pos:position pos:line="33" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="61">++<pos:position pos:line="33" pos:column="63"/></operator><operator pos:line="33" pos:column="63">(<pos:position pos:line="33" pos:column="64"/></operator><operator pos:line="33" pos:column="64">*<pos:position pos:line="33" pos:column="65"/></operator><name pos:line="33" pos:column="65">dup<pos:position pos:line="33" pos:column="68"/></name><operator pos:line="33" pos:column="68">)<pos:position pos:line="33" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="71"/></expr_stmt>
             }<pos:position pos:line="34" pos:column="15"/></block></then>
             <else pos:line="35" pos:column="14">else <block pos:line="35" pos:column="19">{
                 <comment type="block" pos:line="36" pos:column="18">/* Otherwise, use the plain foo=bar syntax. */</comment>
                 <expr_stmt><expr><name pos:line="37" pos:column="18">dup<pos:position pos:line="37" pos:column="21"/></name> <operator pos:line="37" pos:column="22">=<pos:position pos:line="37" pos:column="23"/></operator> <call><name pos:line="37" pos:column="24">apr_pcalloc<pos:position pos:line="37" pos:column="35"/></name><argument_list pos:line="37" pos:column="35">(<argument><expr><name pos:line="37" pos:column="36">p<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="39">sizeof <name><pos:position pos:line="37" pos:column="46"/></name></sizeof>*<name pos:line="37" pos:column="47">dup<pos:position pos:line="37" pos:column="50"/></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
                 <expr_stmt><expr><call><name pos:line="38" pos:column="18">apr_hash_set<pos:position pos:line="38" pos:column="30"/></name><argument_list pos:line="38" pos:column="30">(<argument><expr><name pos:line="38" pos:column="31">count<pos:position pos:line="38" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="38">&amp;<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="39">nid<pos:position pos:line="38" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="44">sizeof <name pos:line="38" pos:column="51">nid<pos:position pos:line="38" pos:column="54"/></name></sizeof></expr></argument>, <argument><expr><name pos:line="38" pos:column="56">dup<pos:position pos:line="38" pos:column="59"/></name></expr></argument>)<pos:position pos:line="38" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="61"/></expr_stmt>
                 <expr_stmt><expr><name pos:line="39" pos:column="18">key<pos:position pos:line="39" pos:column="21"/></name> <operator pos:line="39" pos:column="22">=<pos:position pos:line="39" pos:column="23"/></operator> <call><name pos:line="39" pos:column="24">apr_pstrcat<pos:position pos:line="39" pos:column="35"/></name><argument_list pos:line="39" pos:column="35">(<argument><expr><name pos:line="39" pos:column="36">p<pos:position pos:line="39" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="39">pfx<pos:position pos:line="39" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="44">tag<pos:position pos:line="39" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="49">NULL<pos:position pos:line="39" pos:column="53"/></name></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="55"/></expr_stmt>
             }<pos:position pos:line="40" pos:column="15"/></block></else></if>
             <expr_stmt><expr><name pos:line="41" pos:column="14">value<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator> <call><name pos:line="41" pos:column="22">modssl_X509_NAME_ENTRY_to_string<pos:position pos:line="41" pos:column="54"/></name><argument_list pos:line="41" pos:column="54">(<argument><expr><name pos:line="41" pos:column="55">p<pos:position pos:line="41" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">xsne<pos:position pos:line="41" pos:column="62"/></name></expr></argument>)<pos:position pos:line="41" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="64"/></expr_stmt>
             <expr_stmt><expr><call><name pos:line="42" pos:column="14">apr_table_setn<pos:position pos:line="42" pos:column="28"/></name><argument_list pos:line="42" pos:column="28">(<argument><expr><name pos:line="42" pos:column="29">t<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="32">key<pos:position pos:line="42" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="37">value<pos:position pos:line="42" pos:column="42"/></name></expr></argument>)<pos:position pos:line="42" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="44"/></expr_stmt>
         }<pos:position pos:line="43" pos:column="11"/></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></for>
}<pos:position pos:line="45" pos:column="2"/></block></function></unit>
