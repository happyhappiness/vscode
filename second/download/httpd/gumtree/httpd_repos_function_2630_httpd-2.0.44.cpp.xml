<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2630_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name> <name pos:line="2" pos:column="5">PREFIX<pos:position pos:line="2" pos:column="11"/></name></type>(<name pos:line="2" pos:column="12">scanLit<pos:position pos:line="2" pos:column="19"/></name>)<parameter_list pos:line="2" pos:column="20">(<parameter><decl><type><name pos:line="2" pos:column="21">int<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">open<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="31">const<pos:position pos:line="2" pos:column="36"/></specifier> <name pos:line="2" pos:column="37">ENCODING<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">enc<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>,
		    <parameter><decl><type><specifier pos:line="3" pos:column="21">const<pos:position pos:line="3" pos:column="26"/></specifier> <name pos:line="3" pos:column="27">char<pos:position pos:line="3" pos:column="31"/></name> <modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">ptr<pos:position pos:line="3" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="38">const<pos:position pos:line="3" pos:column="43"/></specifier> <name pos:line="3" pos:column="44">char<pos:position pos:line="3" pos:column="48"/></name> <modifier pos:line="3" pos:column="49">*<pos:position pos:line="3" pos:column="50"/></modifier></type><name pos:line="3" pos:column="50">end<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>,
		    <parameter><decl><type><specifier pos:line="4" pos:column="21">const<pos:position pos:line="4" pos:column="26"/></specifier> <name pos:line="4" pos:column="27">char<pos:position pos:line="4" pos:column="31"/></name> <modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier><modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">nextTokPtr<pos:position pos:line="4" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="45"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <while pos:line="6" pos:column="3">while <condition pos:line="6" pos:column="9">(<expr><name pos:line="6" pos:column="10">ptr<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">!=<pos:position pos:line="6" pos:column="16"/></operator> <name pos:line="6" pos:column="17">end<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition> <block pos:line="6" pos:column="22">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">t<pos:position pos:line="7" pos:column="10"/></name> <init pos:line="7" pos:column="11">= <expr><call><name pos:line="7" pos:column="13">BYTE_TYPE<pos:position pos:line="7" pos:column="22"/></name><argument_list pos:line="7" pos:column="22">(<argument><expr><name pos:line="7" pos:column="23">enc<pos:position pos:line="7" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="28">ptr<pos:position pos:line="7" pos:column="31"/></name></expr></argument>)<pos:position pos:line="7" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
    <switch pos:line="8" pos:column="5">switch <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">t<pos:position pos:line="8" pos:column="14"/></name></expr>)<pos:position pos:line="8" pos:column="15"/></condition> <block pos:line="8" pos:column="16">{
    <macro><name pos:line="9" pos:column="5">INVALID_CASES<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument pos:line="9" pos:column="19">ptr<pos:position pos:line="9" pos:column="22"/></argument>, <argument pos:line="9" pos:column="24">nextTokPtr<pos:position pos:line="9" pos:column="34"/></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></macro>
    <case pos:line="10" pos:column="5">case <expr><name pos:line="10" pos:column="10">BT_QUOT<pos:position pos:line="10" pos:column="17"/></name></expr>:<pos:position pos:line="10" pos:column="18"/></case>
    <case pos:line="11" pos:column="5">case <expr><name pos:line="11" pos:column="10">BT_APOS<pos:position pos:line="11" pos:column="17"/></name></expr>:<pos:position pos:line="11" pos:column="18"/></case>
      <expr_stmt><expr><name pos:line="12" pos:column="7">ptr<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">+=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">MINBPC<pos:position pos:line="12" pos:column="20"/></name><argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">enc<pos:position pos:line="12" pos:column="24"/></name></expr></argument>)<pos:position pos:line="12" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="26"/></expr_stmt>
      <if pos:line="13" pos:column="7">if <condition pos:line="13" pos:column="10">(<expr><name pos:line="13" pos:column="11">t<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">!=<pos:position pos:line="13" pos:column="15"/></operator> <name pos:line="13" pos:column="16">open<pos:position pos:line="13" pos:column="20"/></name></expr>)<pos:position pos:line="13" pos:column="21"/></condition><then pos:line="13" pos:column="21">
	<block type="pseudo"><break pos:line="14" pos:column="9">break;<pos:position pos:line="14" pos:column="15"/></break></block></then></if>
      <if pos:line="15" pos:column="7">if <condition pos:line="15" pos:column="10">(<expr><name pos:line="15" pos:column="11">ptr<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">==<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">end<pos:position pos:line="15" pos:column="21"/></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22">
	<block type="pseudo"><return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">-<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="17">XML_TOK_LITERAL<pos:position pos:line="16" pos:column="32"/></name></expr>;<pos:position pos:line="16" pos:column="33"/></return></block></then></if>
      <expr_stmt><expr><operator pos:line="17" pos:column="7">*<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">nextTokPtr<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">=<pos:position pos:line="17" pos:column="20"/></operator> <name pos:line="17" pos:column="21">ptr<pos:position pos:line="17" pos:column="24"/></name></expr>;<pos:position pos:line="17" pos:column="25"/></expr_stmt>
      <switch pos:line="18" pos:column="7">switch <condition pos:line="18" pos:column="14">(<expr><call><name pos:line="18" pos:column="15">BYTE_TYPE<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name pos:line="18" pos:column="25">enc<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">ptr<pos:position pos:line="18" pos:column="33"/></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="35"/></condition> <block pos:line="18" pos:column="36">{
      <case pos:line="19" pos:column="7">case <expr><name pos:line="19" pos:column="12">BT_S<pos:position pos:line="19" pos:column="16"/></name></expr>:<pos:position pos:line="19" pos:column="17"/></case> <case pos:line="19" pos:column="18">case <expr><name pos:line="19" pos:column="23">BT_CR<pos:position pos:line="19" pos:column="28"/></name></expr>:<pos:position pos:line="19" pos:column="29"/></case> <case pos:line="19" pos:column="30">case <expr><name pos:line="19" pos:column="35">BT_LF<pos:position pos:line="19" pos:column="40"/></name></expr>:<pos:position pos:line="19" pos:column="41"/></case>
      <case pos:line="20" pos:column="7">case <expr><name pos:line="20" pos:column="12">BT_GT<pos:position pos:line="20" pos:column="17"/></name></expr>:<pos:position pos:line="20" pos:column="18"/></case> <case pos:line="20" pos:column="19">case <expr><name pos:line="20" pos:column="24">BT_PERCNT<pos:position pos:line="20" pos:column="33"/></name></expr>:<pos:position pos:line="20" pos:column="34"/></case> <case pos:line="20" pos:column="35">case <expr><name pos:line="20" pos:column="40">BT_LSQB<pos:position pos:line="20" pos:column="47"/></name></expr>:<pos:position pos:line="20" pos:column="48"/></case>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">XML_TOK_LITERAL<pos:position pos:line="21" pos:column="31"/></name></expr>;<pos:position pos:line="21" pos:column="32"/></return>
      <default pos:line="22" pos:column="7">default:<pos:position pos:line="22" pos:column="15"/></default>
	<return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">XML_TOK_INVALID<pos:position pos:line="23" pos:column="31"/></name></expr>;<pos:position pos:line="23" pos:column="32"/></return>
      }<pos:position pos:line="24" pos:column="8"/></block></switch>
    <default pos:line="25" pos:column="5">default:<pos:position pos:line="25" pos:column="13"/></default>
      <expr_stmt><expr><name pos:line="26" pos:column="7">ptr<pos:position pos:line="26" pos:column="10"/></name> <operator pos:line="26" pos:column="11">+=<pos:position pos:line="26" pos:column="13"/></operator> <call><name pos:line="26" pos:column="14">MINBPC<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><name pos:line="26" pos:column="21">enc<pos:position pos:line="26" pos:column="24"/></name></expr></argument>)<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
      <break pos:line="27" pos:column="7">break;<pos:position pos:line="27" pos:column="13"/></break>
    }<pos:position pos:line="28" pos:column="6"/></block></switch>
  }<pos:position pos:line="29" pos:column="4"/></block></while>
  <return pos:line="30" pos:column="3">return <expr><name pos:line="30" pos:column="10">XML_TOK_PARTIAL<pos:position pos:line="30" pos:column="25"/></name></expr>;<pos:position pos:line="30" pos:column="26"/></return>
}<pos:position pos:line="31" pos:column="2"/></block></function></unit>
