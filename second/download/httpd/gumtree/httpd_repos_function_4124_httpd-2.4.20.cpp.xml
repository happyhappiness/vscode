<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4124_httpd-2.4.20.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">mpm_service_start<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">apr_pool_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">ptemp<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">argc<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
                               <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier> <specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type> <name pos:line="2" pos:column="53">argv<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="58"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">SC_HANDLE<pos:position pos:line="5" pos:column="14"/></name></type>   <name pos:line="5" pos:column="17">schService<pos:position pos:line="5" pos:column="27"/></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">SC_HANDLE<pos:position pos:line="6" pos:column="14"/></name></type>   <name pos:line="6" pos:column="17">schSCManager<pos:position pos:line="6" pos:column="29"/></name></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="8" pos:column="5">fprintf<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">stderr<pos:position pos:line="8" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="21">"Starting the '%s' service\n"<pos:position pos:line="8" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="52">mpm_display_name<pos:position pos:line="8" pos:column="68"/></name></expr></argument>)<pos:position pos:line="8" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="70"/></expr_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">schSCManager<pos:position pos:line="10" pos:column="17"/></name> <operator pos:line="10" pos:column="18">=<pos:position pos:line="10" pos:column="19"/></operator> <call><name pos:line="10" pos:column="20">OpenSCManager<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">NULL<pos:position pos:line="10" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="40">NULL<pos:position pos:line="10" pos:column="44"/></name></expr></argument>, <comment type="block" pos:line="10" pos:column="46">/* local, default database */</comment>
                                 <argument><expr><name pos:line="11" pos:column="34">SC_MANAGER_CONNECT<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="54"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">schSCManager<pos:position pos:line="12" pos:column="22"/></name></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23"> <block pos:line="12" pos:column="24">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">rv<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <call><name pos:line="13" pos:column="14">apr_get_os_error<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">()<pos:position pos:line="13" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">ap_log_error<pos:position pos:line="14" pos:column="21"/></name><argument_list pos:line="14" pos:column="21">(<argument><expr><name pos:line="14" pos:column="22">APLOG_MARK<pos:position pos:line="14" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="34">APLOG_ERR<pos:position pos:line="14" pos:column="43"/></name> <operator pos:line="14" pos:column="44">|<pos:position pos:line="14" pos:column="45"/></operator> <name pos:line="14" pos:column="46">APLOG_STARTUP<pos:position pos:line="14" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="61">rv<pos:position pos:line="14" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="65">NULL<pos:position pos:line="14" pos:column="69"/></name></expr></argument>,
                     <argument><expr><call><name pos:line="15" pos:column="22">APLOGNO<pos:position pos:line="15" pos:column="29"/></name><argument_list pos:line="15" pos:column="29">(<argument><expr><literal type="number" pos:line="15" pos:column="30">00369<pos:position pos:line="15" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call>  <literal type="string" pos:line="15" pos:column="38">"Failed to open the Windows service "<pos:position pos:line="15" pos:column="75"/></literal>
                     <literal type="string" pos:line="16" pos:column="22">"manager, perhaps you forgot to log in as Adminstrator?"<pos:position pos:line="16" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="80"/></expr_stmt>
        <return pos:line="17" pos:column="9">return <expr><operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="17">rv<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">)<pos:position pos:line="17" pos:column="20"/></operator></expr>;<pos:position pos:line="17" pos:column="21"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">APR_HAS_UNICODE_FS<pos:position pos:line="20" pos:column="23"/></name></expr></cpp:if>
    <macro><name pos:line="21" pos:column="5">IF_WIN_OS_IS_UNICODE<pos:position pos:line="21" pos:column="25"/></name></macro>
    <block pos:line="22" pos:column="5">{
        <expr_stmt><expr><name pos:line="23" pos:column="9">schService<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">=<pos:position pos:line="23" pos:column="21"/></operator> <call><name pos:line="23" pos:column="22">OpenServiceW<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">schSCManager<pos:position pos:line="23" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="49">mpm_service_name_w<pos:position pos:line="23" pos:column="67"/></name></expr></argument>,
                                  <argument><expr><name pos:line="24" pos:column="35">SERVICE_START<pos:position pos:line="24" pos:column="48"/></name> <operator pos:line="24" pos:column="49">|<pos:position pos:line="24" pos:column="50"/></operator> <name pos:line="24" pos:column="51">SERVICE_QUERY_STATUS<pos:position pos:line="24" pos:column="71"/></name></expr></argument>)<pos:position pos:line="24" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="26" pos:column="8">/* APR_HAS_UNICODE_FS */</comment>
<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><name pos:line="27" pos:column="5">APR_HAS_ANSI_FS<pos:position pos:line="27" pos:column="20"/></name></expr></cpp:if>
    <macro><name pos:line="28" pos:column="5">ELSE_WIN_OS_IS_ANSI<pos:position pos:line="28" pos:column="24"/></name></macro>
    <block pos:line="29" pos:column="5">{
        <expr_stmt><expr><name pos:line="30" pos:column="9">schService<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <call><name pos:line="30" pos:column="22">OpenService<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">schSCManager<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">mpm_service_name<pos:position pos:line="30" pos:column="64"/></name></expr></argument>,
                                 <argument><expr><name pos:line="31" pos:column="34">SERVICE_START<pos:position pos:line="31" pos:column="47"/></name> <operator pos:line="31" pos:column="48">|<pos:position pos:line="31" pos:column="49"/></operator> <name pos:line="31" pos:column="50">SERVICE_QUERY_STATUS<pos:position pos:line="31" pos:column="70"/></name></expr></argument>)<pos:position pos:line="31" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">!<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">schService<pos:position pos:line="34" pos:column="20"/></name></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21"> <block pos:line="34" pos:column="22">{
        <expr_stmt><expr><name pos:line="35" pos:column="9">rv<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <call><name pos:line="35" pos:column="14">apr_get_os_error<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">()<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">ap_log_error<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">APLOG_MARK<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="34">APLOG_ERR<pos:position pos:line="36" pos:column="43"/></name> <operator pos:line="36" pos:column="44">|<pos:position pos:line="36" pos:column="45"/></operator> <name pos:line="36" pos:column="46">APLOG_STARTUP<pos:position pos:line="36" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="61">rv<pos:position pos:line="36" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="65">NULL<pos:position pos:line="36" pos:column="69"/></name></expr></argument>, 
                     <argument><expr><call><name pos:line="37" pos:column="22">APLOGNO<pos:position pos:line="37" pos:column="29"/></name><argument_list pos:line="37" pos:column="29">(<argument><expr><literal type="number" pos:line="37" pos:column="30">00373<pos:position pos:line="37" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="36"/></argument_list></call> <literal type="string" pos:line="37" pos:column="37">"Failed to open the '%s' service"<pos:position pos:line="37" pos:column="70"/></literal></expr></argument>,
                     <argument><expr><name pos:line="38" pos:column="22">mpm_display_name<pos:position pos:line="38" pos:column="38"/></name></expr></argument>)<pos:position pos:line="38" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">CloseServiceHandle<pos:position pos:line="39" pos:column="27"/></name><argument_list pos:line="39" pos:column="27">(<argument><expr><name pos:line="39" pos:column="28">schSCManager<pos:position pos:line="39" pos:column="40"/></name></expr></argument>)<pos:position pos:line="39" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="42"/></expr_stmt>
        <return pos:line="40" pos:column="9">return <expr><operator pos:line="40" pos:column="16">(<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="17">rv<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">)<pos:position pos:line="40" pos:column="20"/></operator></expr>;<pos:position pos:line="40" pos:column="21"/></return>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><call><name pos:line="43" pos:column="9">QueryServiceStatus<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">(<argument><expr><name pos:line="43" pos:column="28">schService<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="40">&amp;<pos:position pos:line="43" pos:column="45"/></operator><name><name pos:line="43" pos:column="41">globdat<pos:position pos:line="43" pos:column="48"/></name><operator pos:line="43" pos:column="48">.<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="49">ssStatus<pos:position pos:line="43" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call>
        <operator pos:line="44" pos:column="9">&amp;&amp;<pos:position pos:line="44" pos:column="19"/></operator> <operator pos:line="44" pos:column="12">(<pos:position pos:line="44" pos:column="13"/></operator><name><name pos:line="44" pos:column="13">globdat<pos:position pos:line="44" pos:column="20"/></name><operator pos:line="44" pos:column="20">.<pos:position pos:line="44" pos:column="21"/></operator><name pos:line="44" pos:column="21">ssStatus<pos:position pos:line="44" pos:column="29"/></name><operator pos:line="44" pos:column="29">.<pos:position pos:line="44" pos:column="30"/></operator><name pos:line="44" pos:column="30">dwCurrentState<pos:position pos:line="44" pos:column="44"/></name></name> <operator pos:line="44" pos:column="45">==<pos:position pos:line="44" pos:column="47"/></operator> <name pos:line="44" pos:column="48">SERVICE_RUNNING<pos:position pos:line="44" pos:column="63"/></name><operator pos:line="44" pos:column="63">)<pos:position pos:line="44" pos:column="64"/></operator></expr>)<pos:position pos:line="44" pos:column="65"/></condition><then pos:line="44" pos:column="65"> <block pos:line="44" pos:column="66">{
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">ap_log_error<pos:position pos:line="45" pos:column="21"/></name><argument_list pos:line="45" pos:column="21">(<argument><expr><name pos:line="45" pos:column="22">APLOG_MARK<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">APLOG_ERR<pos:position pos:line="45" pos:column="43"/></name> <operator pos:line="45" pos:column="44">|<pos:position pos:line="45" pos:column="45"/></operator> <name pos:line="45" pos:column="46">APLOG_STARTUP<pos:position pos:line="45" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="45" pos:column="61">0<pos:position pos:line="45" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="45" pos:column="64">NULL<pos:position pos:line="45" pos:column="68"/></name></expr></argument>,
                     <argument><expr><call><name pos:line="46" pos:column="22">APLOGNO<pos:position pos:line="46" pos:column="29"/></name><argument_list pos:line="46" pos:column="29">(<argument><expr><literal type="number" pos:line="46" pos:column="30">00377<pos:position pos:line="46" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="36"/></argument_list></call> <literal type="string" pos:line="46" pos:column="37">"The '%s' service is already started!"<pos:position pos:line="46" pos:column="75"/></literal></expr></argument>,
                     <argument><expr><name pos:line="47" pos:column="22">mpm_display_name<pos:position pos:line="47" pos:column="38"/></name></expr></argument>)<pos:position pos:line="47" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">CloseServiceHandle<pos:position pos:line="48" pos:column="27"/></name><argument_list pos:line="48" pos:column="27">(<argument><expr><name pos:line="48" pos:column="28">schService<pos:position pos:line="48" pos:column="38"/></name></expr></argument>)<pos:position pos:line="48" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">CloseServiceHandle<pos:position pos:line="49" pos:column="27"/></name><argument_list pos:line="49" pos:column="27">(<argument><expr><name pos:line="49" pos:column="28">schSCManager<pos:position pos:line="49" pos:column="40"/></name></expr></argument>)<pos:position pos:line="49" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="42"/></expr_stmt>
        <return pos:line="50" pos:column="9">return <expr><literal type="number" pos:line="50" pos:column="16">0<pos:position pos:line="50" pos:column="17"/></literal></expr>;<pos:position pos:line="50" pos:column="18"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="53" pos:column="5">rv<pos:position pos:line="53" pos:column="7"/></name> <operator pos:line="53" pos:column="8">=<pos:position pos:line="53" pos:column="9"/></operator> <name pos:line="53" pos:column="10">APR_EINIT<pos:position pos:line="53" pos:column="19"/></name></expr>;<pos:position pos:line="53" pos:column="20"/></expr_stmt>
<cpp:if pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">if<pos:position pos:line="54" pos:column="4"/></cpp:directive> <expr><name pos:line="54" pos:column="5">APR_HAS_UNICODE_FS<pos:position pos:line="54" pos:column="23"/></name></expr></cpp:if>
    <macro><name pos:line="55" pos:column="5">IF_WIN_OS_IS_UNICODE<pos:position pos:line="55" pos:column="25"/></name></macro>
    <block pos:line="56" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="57" pos:column="9">LPWSTR<pos:position pos:line="57" pos:column="15"/></name> <modifier pos:line="57" pos:column="16">*<pos:position pos:line="57" pos:column="17"/></modifier></type><name pos:line="57" pos:column="17">start_argv_w<pos:position pos:line="57" pos:column="29"/></name> <init pos:line="57" pos:column="30">= <expr><call><name pos:line="57" pos:column="32">malloc<pos:position pos:line="57" pos:column="38"/></name><argument_list pos:line="57" pos:column="38">(<argument><expr><operator pos:line="57" pos:column="39">(<pos:position pos:line="57" pos:column="40"/></operator><name pos:line="57" pos:column="40">argc<pos:position pos:line="57" pos:column="44"/></name> <operator pos:line="57" pos:column="45">+<pos:position pos:line="57" pos:column="46"/></operator> <literal type="number" pos:line="57" pos:column="47">1<pos:position pos:line="57" pos:column="48"/></literal><operator pos:line="57" pos:column="48">)<pos:position pos:line="57" pos:column="49"/></operator> <operator pos:line="57" pos:column="50">*<pos:position pos:line="57" pos:column="51"/></operator> <sizeof pos:line="57" pos:column="52">sizeof<argument_list pos:line="57" pos:column="58">(<argument><expr><name pos:line="57" pos:column="59">LPCWSTR<pos:position pos:line="57" pos:column="66"/></name></expr></argument>)<pos:position pos:line="57" pos:column="67"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="57" pos:column="69"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="58" pos:column="9">int<pos:position pos:line="58" pos:column="12"/></name></type> <name pos:line="58" pos:column="13">i<pos:position pos:line="58" pos:column="14"/></name></decl>;<pos:position pos:line="58" pos:column="15"/></decl_stmt>

        <for pos:line="60" pos:column="9">for <control pos:line="60" pos:column="13">(<init><expr><name pos:line="60" pos:column="14">i<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <literal type="number" pos:line="60" pos:column="18">0<pos:position pos:line="60" pos:column="19"/></literal></expr>;<pos:position pos:line="60" pos:column="20"/></init> <condition><expr><name pos:line="60" pos:column="21">i<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">&lt;<pos:position pos:line="60" pos:column="27"/></operator> <name pos:line="60" pos:column="25">argc<pos:position pos:line="60" pos:column="29"/></name></expr>;<pos:position pos:line="60" pos:column="30"/></condition> <incr><expr><operator pos:line="60" pos:column="31">++<pos:position pos:line="60" pos:column="33"/></operator><name pos:line="60" pos:column="33">i<pos:position pos:line="60" pos:column="34"/></name></expr></incr>)<pos:position pos:line="60" pos:column="35"/></control>
        <block pos:line="61" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="62" pos:column="13">apr_size_t<pos:position pos:line="62" pos:column="23"/></name></type> <name pos:line="62" pos:column="24">slen<pos:position pos:line="62" pos:column="28"/></name> <init pos:line="62" pos:column="29">= <expr><call><name pos:line="62" pos:column="31">strlen<pos:position pos:line="62" pos:column="37"/></name><argument_list pos:line="62" pos:column="37">(<argument><expr><name><name pos:line="62" pos:column="38">argv<pos:position pos:line="62" pos:column="42"/></name><index pos:line="62" pos:column="42">[<expr><name pos:line="62" pos:column="43">i<pos:position pos:line="62" pos:column="44"/></name></expr>]<pos:position pos:line="62" pos:column="45"/></index></name></expr></argument>)<pos:position pos:line="62" pos:column="46"/></argument_list></call> <operator pos:line="62" pos:column="47">+<pos:position pos:line="62" pos:column="48"/></operator> <literal type="number" pos:line="62" pos:column="49">1<pos:position pos:line="62" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="62" pos:column="51"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">apr_size_t<pos:position pos:line="63" pos:column="23"/></name></type> <name pos:line="63" pos:column="24">wslen<pos:position pos:line="63" pos:column="29"/></name> <init pos:line="63" pos:column="30">= <expr><name pos:line="63" pos:column="32">slen<pos:position pos:line="63" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="63" pos:column="37"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="64" pos:column="13">start_argv_w<pos:position pos:line="64" pos:column="25"/></name><index pos:line="64" pos:column="25">[<expr><name pos:line="64" pos:column="26">i<pos:position pos:line="64" pos:column="27"/></name></expr>]<pos:position pos:line="64" pos:column="28"/></index></name> <operator pos:line="64" pos:column="29">=<pos:position pos:line="64" pos:column="30"/></operator> <call><name pos:line="64" pos:column="31">malloc<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><name pos:line="64" pos:column="38">wslen<pos:position pos:line="64" pos:column="43"/></name> <operator pos:line="64" pos:column="44">*<pos:position pos:line="64" pos:column="45"/></operator> <sizeof pos:line="64" pos:column="46">sizeof<argument_list pos:line="64" pos:column="52">(<argument><expr><name pos:line="64" pos:column="53">WCHAR<pos:position pos:line="64" pos:column="58"/></name></expr></argument>)<pos:position pos:line="64" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="64" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><name pos:line="65" pos:column="13">rv<pos:position pos:line="65" pos:column="15"/></name> <operator pos:line="65" pos:column="16">=<pos:position pos:line="65" pos:column="17"/></operator> <call><name pos:line="65" pos:column="18">apr_conv_utf8_to_ucs2<pos:position pos:line="65" pos:column="39"/></name><argument_list pos:line="65" pos:column="39">(<argument><expr><name><name pos:line="65" pos:column="40">argv<pos:position pos:line="65" pos:column="44"/></name><index pos:line="65" pos:column="44">[<expr><name pos:line="65" pos:column="45">i<pos:position pos:line="65" pos:column="46"/></name></expr>]<pos:position pos:line="65" pos:column="47"/></index></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="49">&amp;<pos:position pos:line="65" pos:column="54"/></operator><name pos:line="65" pos:column="50">slen<pos:position pos:line="65" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="65" pos:column="56">start_argv_w<pos:position pos:line="65" pos:column="68"/></name><index pos:line="65" pos:column="68">[<expr><name pos:line="65" pos:column="69">i<pos:position pos:line="65" pos:column="70"/></name></expr>]<pos:position pos:line="65" pos:column="71"/></index></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="73">&amp;<pos:position pos:line="65" pos:column="78"/></operator><name pos:line="65" pos:column="74">wslen<pos:position pos:line="65" pos:column="79"/></name></expr></argument>)<pos:position pos:line="65" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="81"/></expr_stmt>
            <if pos:line="66" pos:column="13">if <condition pos:line="66" pos:column="16">(<expr><name pos:line="66" pos:column="17">rv<pos:position pos:line="66" pos:column="19"/></name> <operator pos:line="66" pos:column="20">!=<pos:position pos:line="66" pos:column="22"/></operator> <name pos:line="66" pos:column="23">APR_SUCCESS<pos:position pos:line="66" pos:column="34"/></name></expr>)<pos:position pos:line="66" pos:column="35"/></condition><then pos:line="66" pos:column="35">
                <block type="pseudo"><return pos:line="67" pos:column="17">return <expr><name pos:line="67" pos:column="24">rv<pos:position pos:line="67" pos:column="26"/></name></expr>;<pos:position pos:line="67" pos:column="27"/></return></block></then>
            <elseif pos:line="68" pos:column="13">else <if pos:line="68" pos:column="18">if <condition pos:line="68" pos:column="21">(<expr><name pos:line="68" pos:column="22">slen<pos:position pos:line="68" pos:column="26"/></name></expr>)<pos:position pos:line="68" pos:column="27"/></condition><then pos:line="68" pos:column="27">
                <block type="pseudo"><return pos:line="69" pos:column="17">return <expr><name pos:line="69" pos:column="24">APR_ENAMETOOLONG<pos:position pos:line="69" pos:column="40"/></name></expr>;<pos:position pos:line="69" pos:column="41"/></return></block></then></if></elseif></if>
        }<pos:position pos:line="70" pos:column="10"/></block></for>
        <expr_stmt><expr><name><name pos:line="71" pos:column="9">start_argv_w<pos:position pos:line="71" pos:column="21"/></name><index pos:line="71" pos:column="21">[<expr><name pos:line="71" pos:column="22">argc<pos:position pos:line="71" pos:column="26"/></name></expr>]<pos:position pos:line="71" pos:column="27"/></index></name> <operator pos:line="71" pos:column="28">=<pos:position pos:line="71" pos:column="29"/></operator> <name pos:line="71" pos:column="30">NULL<pos:position pos:line="71" pos:column="34"/></name></expr>;<pos:position pos:line="71" pos:column="35"/></expr_stmt>

        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><call><name pos:line="73" pos:column="13">StartServiceW<pos:position pos:line="73" pos:column="26"/></name><argument_list pos:line="73" pos:column="26">(<argument><expr><name pos:line="73" pos:column="27">schService<pos:position pos:line="73" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="39">argc<pos:position pos:line="73" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="45">start_argv_w<pos:position pos:line="73" pos:column="57"/></name></expr></argument>)<pos:position pos:line="73" pos:column="58"/></argument_list></call>
            <operator pos:line="74" pos:column="13">&amp;&amp;<pos:position pos:line="74" pos:column="23"/></operator> <call><name pos:line="74" pos:column="16">signal_service_transition<pos:position pos:line="74" pos:column="41"/></name><argument_list pos:line="74" pos:column="41">(<argument><expr><name pos:line="74" pos:column="42">schService<pos:position pos:line="74" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="54">0<pos:position pos:line="74" pos:column="55"/></literal></expr></argument>, <comment type="block" pos:line="74" pos:column="57">/* test only */</comment>
                                         <argument><expr><name pos:line="75" pos:column="42">SERVICE_START_PENDING<pos:position pos:line="75" pos:column="63"/></name></expr></argument>,
                                         <argument><expr><name pos:line="76" pos:column="42">SERVICE_RUNNING<pos:position pos:line="76" pos:column="57"/></name></expr></argument>)<pos:position pos:line="76" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="59"/></condition><then pos:line="76" pos:column="59">
                <block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="17">rv<pos:position pos:line="77" pos:column="19"/></name> <operator pos:line="77" pos:column="20">=<pos:position pos:line="77" pos:column="21"/></operator> <name pos:line="77" pos:column="22">APR_SUCCESS<pos:position pos:line="77" pos:column="33"/></name></expr>;<pos:position pos:line="77" pos:column="34"/></expr_stmt></block></then></if>
    }<pos:position pos:line="78" pos:column="6"/></block>
<cpp:endif pos:line="79" pos:column="1">#<cpp:directive pos:line="79" pos:column="2">endif<pos:position pos:line="79" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="79" pos:column="8">/* APR_HAS_UNICODE_FS */</comment>
<cpp:if pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">if<pos:position pos:line="80" pos:column="4"/></cpp:directive> <expr><name pos:line="80" pos:column="5">APR_HAS_ANSI_FS<pos:position pos:line="80" pos:column="20"/></name></expr></cpp:if>
    <macro><name pos:line="81" pos:column="5">ELSE_WIN_OS_IS_ANSI<pos:position pos:line="81" pos:column="24"/></name></macro>
    <block pos:line="82" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="83" pos:column="9">char<pos:position pos:line="83" pos:column="13"/></name> <modifier pos:line="83" pos:column="14">*<pos:position pos:line="83" pos:column="15"/></modifier><modifier pos:line="83" pos:column="15">*<pos:position pos:line="83" pos:column="16"/></modifier></type><name pos:line="83" pos:column="16">start_argv<pos:position pos:line="83" pos:column="26"/></name> <init pos:line="83" pos:column="27">= <expr><call><name pos:line="83" pos:column="29">malloc<pos:position pos:line="83" pos:column="35"/></name><argument_list pos:line="83" pos:column="35">(<argument><expr><operator pos:line="83" pos:column="36">(<pos:position pos:line="83" pos:column="37"/></operator><name pos:line="83" pos:column="37">argc<pos:position pos:line="83" pos:column="41"/></name> <operator pos:line="83" pos:column="42">+<pos:position pos:line="83" pos:column="43"/></operator> <literal type="number" pos:line="83" pos:column="44">1<pos:position pos:line="83" pos:column="45"/></literal><operator pos:line="83" pos:column="45">)<pos:position pos:line="83" pos:column="46"/></operator> <operator pos:line="83" pos:column="47">*<pos:position pos:line="83" pos:column="48"/></operator> <sizeof pos:line="83" pos:column="49">sizeof<argument_list pos:line="83" pos:column="55">(<argument><expr><specifier pos:line="83" pos:column="56">const<pos:position pos:line="83" pos:column="61"/></specifier> <name pos:line="83" pos:column="62">char<pos:position pos:line="83" pos:column="66"/></name> <operator pos:line="83" pos:column="67">*<pos:position pos:line="83" pos:column="68"/></operator></expr></argument>)<pos:position pos:line="83" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="83" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="83" pos:column="71"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="84" pos:column="9">memcpy<pos:position pos:line="84" pos:column="15"/></name><argument_list pos:line="84" pos:column="15">(<argument><expr><name pos:line="84" pos:column="16">start_argv<pos:position pos:line="84" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="28">argv<pos:position pos:line="84" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="34">argc<pos:position pos:line="84" pos:column="38"/></name> <operator pos:line="84" pos:column="39">*<pos:position pos:line="84" pos:column="40"/></operator> <sizeof pos:line="84" pos:column="41">sizeof<argument_list pos:line="84" pos:column="47">(<argument><expr><specifier pos:line="84" pos:column="48">const<pos:position pos:line="84" pos:column="53"/></specifier> <name pos:line="84" pos:column="54">char<pos:position pos:line="84" pos:column="58"/></name> <operator pos:line="84" pos:column="59">*<pos:position pos:line="84" pos:column="60"/></operator></expr></argument>)<pos:position pos:line="84" pos:column="61"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="84" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="85" pos:column="9">start_argv<pos:position pos:line="85" pos:column="19"/></name><index pos:line="85" pos:column="19">[<expr><name pos:line="85" pos:column="20">argc<pos:position pos:line="85" pos:column="24"/></name></expr>]<pos:position pos:line="85" pos:column="25"/></index></name> <operator pos:line="85" pos:column="26">=<pos:position pos:line="85" pos:column="27"/></operator> <name pos:line="85" pos:column="28">NULL<pos:position pos:line="85" pos:column="32"/></name></expr>;<pos:position pos:line="85" pos:column="33"/></expr_stmt>

        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><call><name pos:line="87" pos:column="13">StartService<pos:position pos:line="87" pos:column="25"/></name><argument_list pos:line="87" pos:column="25">(<argument><expr><name pos:line="87" pos:column="26">schService<pos:position pos:line="87" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="38">argc<pos:position pos:line="87" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="44">start_argv<pos:position pos:line="87" pos:column="54"/></name></expr></argument>)<pos:position pos:line="87" pos:column="55"/></argument_list></call>
            <operator pos:line="88" pos:column="13">&amp;&amp;<pos:position pos:line="88" pos:column="23"/></operator> <call><name pos:line="88" pos:column="16">signal_service_transition<pos:position pos:line="88" pos:column="41"/></name><argument_list pos:line="88" pos:column="41">(<argument><expr><name pos:line="88" pos:column="42">schService<pos:position pos:line="88" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="54">0<pos:position pos:line="88" pos:column="55"/></literal></expr></argument>, <comment type="block" pos:line="88" pos:column="57">/* test only */</comment>
                                         <argument><expr><name pos:line="89" pos:column="42">SERVICE_START_PENDING<pos:position pos:line="89" pos:column="63"/></name></expr></argument>,
                                         <argument><expr><name pos:line="90" pos:column="42">SERVICE_RUNNING<pos:position pos:line="90" pos:column="57"/></name></expr></argument>)<pos:position pos:line="90" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="90" pos:column="59"/></condition><then pos:line="90" pos:column="59">
                <block type="pseudo"><expr_stmt><expr><name pos:line="91" pos:column="17">rv<pos:position pos:line="91" pos:column="19"/></name> <operator pos:line="91" pos:column="20">=<pos:position pos:line="91" pos:column="21"/></operator> <name pos:line="91" pos:column="22">APR_SUCCESS<pos:position pos:line="91" pos:column="33"/></name></expr>;<pos:position pos:line="91" pos:column="34"/></expr_stmt></block></then></if>
    }<pos:position pos:line="92" pos:column="6"/></block>
<cpp:endif pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">endif<pos:position pos:line="93" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><name pos:line="94" pos:column="9">rv<pos:position pos:line="94" pos:column="11"/></name> <operator pos:line="94" pos:column="12">!=<pos:position pos:line="94" pos:column="14"/></operator> <name pos:line="94" pos:column="15">APR_SUCCESS<pos:position pos:line="94" pos:column="26"/></name></expr>)<pos:position pos:line="94" pos:column="27"/></condition><then pos:line="94" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><name pos:line="95" pos:column="9">rv<pos:position pos:line="95" pos:column="11"/></name> <operator pos:line="95" pos:column="12">=<pos:position pos:line="95" pos:column="13"/></operator> <call><name pos:line="95" pos:column="14">apr_get_os_error<pos:position pos:line="95" pos:column="30"/></name><argument_list pos:line="95" pos:column="30">()<pos:position pos:line="95" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="33"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="97" pos:column="5">CloseServiceHandle<pos:position pos:line="97" pos:column="23"/></name><argument_list pos:line="97" pos:column="23">(<argument><expr><name pos:line="97" pos:column="24">schService<pos:position pos:line="97" pos:column="34"/></name></expr></argument>)<pos:position pos:line="97" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="98" pos:column="5">CloseServiceHandle<pos:position pos:line="98" pos:column="23"/></name><argument_list pos:line="98" pos:column="23">(<argument><expr><name pos:line="98" pos:column="24">schSCManager<pos:position pos:line="98" pos:column="36"/></name></expr></argument>)<pos:position pos:line="98" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="38"/></expr_stmt>

    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><name pos:line="100" pos:column="9">rv<pos:position pos:line="100" pos:column="11"/></name> <operator pos:line="100" pos:column="12">==<pos:position pos:line="100" pos:column="14"/></operator> <name pos:line="100" pos:column="15">APR_SUCCESS<pos:position pos:line="100" pos:column="26"/></name></expr>)<pos:position pos:line="100" pos:column="27"/></condition><then pos:line="100" pos:column="27">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="101" pos:column="9">fprintf<pos:position pos:line="101" pos:column="16"/></name><argument_list pos:line="101" pos:column="16">(<argument><expr><name pos:line="101" pos:column="17">stderr<pos:position pos:line="101" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="25">"The '%s' service is running.\n"<pos:position pos:line="101" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="101" pos:column="59">mpm_display_name<pos:position pos:line="101" pos:column="75"/></name></expr></argument>)<pos:position pos:line="101" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="77"/></expr_stmt></block></then>
    <else pos:line="102" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="9">ap_log_error<pos:position pos:line="103" pos:column="21"/></name><argument_list pos:line="103" pos:column="21">(<argument><expr><name pos:line="103" pos:column="22">APLOG_MARK<pos:position pos:line="103" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="34">APLOG_CRIT<pos:position pos:line="103" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="46">rv<pos:position pos:line="103" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="50">NULL<pos:position pos:line="103" pos:column="54"/></name></expr></argument>, <argument><expr><call><name pos:line="103" pos:column="56">APLOGNO<pos:position pos:line="103" pos:column="63"/></name><argument_list pos:line="103" pos:column="63">(<argument><expr><literal type="number" pos:line="103" pos:column="64">00378<pos:position pos:line="103" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="70"/></argument_list></call>
                     <literal type="string" pos:line="104" pos:column="22">"Failed to start the '%s' service"<pos:position pos:line="104" pos:column="56"/></literal></expr></argument>,
                     <argument><expr><name pos:line="105" pos:column="22">mpm_display_name<pos:position pos:line="105" pos:column="38"/></name></expr></argument>)<pos:position pos:line="105" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="40"/></expr_stmt></block></else></if>

    <return pos:line="107" pos:column="5">return <expr><name pos:line="107" pos:column="12">rv<pos:position pos:line="107" pos:column="14"/></name></expr>;<pos:position pos:line="107" pos:column="15"/></return>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
