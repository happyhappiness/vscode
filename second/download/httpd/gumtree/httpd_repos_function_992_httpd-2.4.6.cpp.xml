<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_992_httpd-2.4.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">direct_chunkreader<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">lua_State<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">lvm<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">void<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">udata<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">size_t<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">plen<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">p<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">cr_ctx<pos:position pos:line="5" pos:column="18"/></name></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">ctx<pos:position pos:line="5" pos:column="23"/></name> <init pos:line="5" pos:column="24">= <expr><name pos:line="5" pos:column="26">udata<pos:position pos:line="5" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name><name pos:line="7" pos:column="9">ctx<pos:position pos:line="7" pos:column="12"/></name><operator pos:line="7" pos:column="12">-&gt;<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="14">startline<pos:position pos:line="7" pos:column="23"/></name></name></expr>)<pos:position pos:line="7" pos:column="24"/></condition><then pos:line="7" pos:column="24"> <block pos:line="7" pos:column="25">{
        <expr_stmt><expr><operator pos:line="8" pos:column="9">*<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">plen<pos:position pos:line="8" pos:column="14"/></name> <operator pos:line="8" pos:column="15">=<pos:position pos:line="8" pos:column="16"/></operator> <ternary><condition><expr><name><name pos:line="8" pos:column="17">ctx<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">startline<pos:position pos:line="8" pos:column="31"/></name></name> <operator pos:line="8" pos:column="32">&gt;<pos:position pos:line="8" pos:column="36"/></operator> <name pos:line="8" pos:column="34">N_LF<pos:position pos:line="8" pos:column="38"/></name></expr> ?<pos:position pos:line="8" pos:column="40"/></condition><then pos:line="8" pos:column="40"> <expr><name pos:line="8" pos:column="41">N_LF<pos:position pos:line="8" pos:column="45"/></name></expr> <pos:position pos:line="8" pos:column="46"/></then><else pos:line="8" pos:column="46">: <expr><name><name pos:line="8" pos:column="48">ctx<pos:position pos:line="8" pos:column="51"/></name><operator pos:line="8" pos:column="51">-&gt;<pos:position pos:line="8" pos:column="56"/></operator><name pos:line="8" pos:column="53">startline<pos:position pos:line="8" pos:column="62"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="8" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="9" pos:column="9">ctx<pos:position pos:line="9" pos:column="12"/></name><operator pos:line="9" pos:column="12">-&gt;<pos:position pos:line="9" pos:column="17"/></operator><name pos:line="9" pos:column="14">startline<pos:position pos:line="9" pos:column="23"/></name></name> <operator pos:line="9" pos:column="24">-=<pos:position pos:line="9" pos:column="26"/></operator> <operator pos:line="9" pos:column="27">*<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">plen<pos:position pos:line="9" pos:column="32"/></name></expr>;<pos:position pos:line="9" pos:column="33"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">lf<pos:position pos:line="10" pos:column="18"/></name></expr>;<pos:position pos:line="10" pos:column="19"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="12" pos:column="5">*<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">plen<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">=<pos:position pos:line="12" pos:column="12"/></operator> <call><name pos:line="12" pos:column="13">config_getstr<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name><name pos:line="12" pos:column="27">ctx<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">-&gt;<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="32">cfp<pos:position pos:line="12" pos:column="35"/></name></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="37">ctx<pos:position pos:line="12" pos:column="40"/></name><operator pos:line="12" pos:column="40">-&gt;<pos:position pos:line="12" pos:column="45"/></operator><name pos:line="12" pos:column="42">buf<pos:position pos:line="12" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="47">HUGE_STRING_LEN<pos:position pos:line="12" pos:column="62"/></name></expr></argument>)<pos:position pos:line="12" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="64"/></expr_stmt>

    <for pos:line="14" pos:column="5">for <control pos:line="14" pos:column="9">(<init><expr><name pos:line="14" pos:column="10">p<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <name><name pos:line="14" pos:column="14">ctx<pos:position pos:line="14" pos:column="17"/></name><operator pos:line="14" pos:column="17">-&gt;<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="19">buf<pos:position pos:line="14" pos:column="22"/></name></name></expr>;<pos:position pos:line="14" pos:column="23"/></init> <condition><expr><call><name pos:line="14" pos:column="24">isspace<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><operator pos:line="14" pos:column="32">*<pos:position pos:line="14" pos:column="33"/></operator><name pos:line="14" pos:column="33">p<pos:position pos:line="14" pos:column="34"/></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></condition> <incr><expr><operator pos:line="14" pos:column="37">++<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="39">p<pos:position pos:line="14" pos:column="40"/></name></expr></incr>)<pos:position pos:line="14" pos:column="41"/></control><block type="pseudo"><empty_stmt pos:line="14" pos:column="41">;<pos:position pos:line="14" pos:column="42"/></empty_stmt></block></for>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">p<pos:position pos:line="15" pos:column="10"/></name><index pos:line="15" pos:column="10">[<expr><literal type="number" pos:line="15" pos:column="11">0<pos:position pos:line="15" pos:column="12"/></literal></expr>]<pos:position pos:line="15" pos:column="13"/></index></name> <operator pos:line="15" pos:column="14">==<pos:position pos:line="15" pos:column="16"/></operator> <literal type="char" pos:line="15" pos:column="17">'&lt;'<pos:position pos:line="15" pos:column="23"/></literal> <operator pos:line="15" pos:column="21">&amp;&amp;<pos:position pos:line="15" pos:column="31"/></operator> <name><name pos:line="15" pos:column="24">p<pos:position pos:line="15" pos:column="25"/></name><index pos:line="15" pos:column="25">[<expr><literal type="number" pos:line="15" pos:column="26">1<pos:position pos:line="15" pos:column="27"/></literal></expr>]<pos:position pos:line="15" pos:column="28"/></index></name> <operator pos:line="15" pos:column="29">==<pos:position pos:line="15" pos:column="31"/></operator> <literal type="char" pos:line="15" pos:column="32">'/'<pos:position pos:line="15" pos:column="35"/></literal></expr>)<pos:position pos:line="15" pos:column="36"/></condition><then pos:line="15" pos:column="36"> <block pos:line="15" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">apr_size_t<pos:position pos:line="16" pos:column="19"/></name></type> <name pos:line="16" pos:column="20">i<pos:position pos:line="16" pos:column="21"/></name> <init pos:line="16" pos:column="22">= <expr><literal type="number" pos:line="16" pos:column="24">0<pos:position pos:line="16" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="26"/></decl_stmt>
        <while pos:line="17" pos:column="9">while <condition pos:line="17" pos:column="15">(<expr><name pos:line="17" pos:column="16">i<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">&lt;<pos:position pos:line="17" pos:column="22"/></operator> <call><name pos:line="17" pos:column="20">strlen<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name><name pos:line="17" pos:column="27">ctx<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">endstr<pos:position pos:line="17" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="40"/></condition> <block pos:line="17" pos:column="41">{
            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><call><name pos:line="18" pos:column="17">tolower<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">(<argument><expr><name><name pos:line="18" pos:column="25">p<pos:position pos:line="18" pos:column="26"/></name><index pos:line="18" pos:column="26">[<expr><name pos:line="18" pos:column="27">i<pos:position pos:line="18" pos:column="28"/></name> <operator pos:line="18" pos:column="29">+<pos:position pos:line="18" pos:column="30"/></operator> <literal type="number" pos:line="18" pos:column="31">2<pos:position pos:line="18" pos:column="32"/></literal></expr>]<pos:position pos:line="18" pos:column="33"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="34"/></argument_list></call> <operator pos:line="18" pos:column="35">!=<pos:position pos:line="18" pos:column="37"/></operator> <name><name pos:line="18" pos:column="38">ctx<pos:position pos:line="18" pos:column="41"/></name><operator pos:line="18" pos:column="41">-&gt;<pos:position pos:line="18" pos:column="46"/></operator><name pos:line="18" pos:column="43">endstr<pos:position pos:line="18" pos:column="49"/></name><index pos:line="18" pos:column="49">[<expr><name pos:line="18" pos:column="50">i<pos:position pos:line="18" pos:column="51"/></name></expr>]<pos:position pos:line="18" pos:column="52"/></index></name></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53">
                <block type="pseudo"><return pos:line="19" pos:column="17">return <expr><name><name pos:line="19" pos:column="24">ctx<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">buf<pos:position pos:line="19" pos:column="32"/></name></name></expr>;<pos:position pos:line="19" pos:column="33"/></return></block></then></if>
            <expr_stmt><expr><operator pos:line="20" pos:column="13">++<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">i<pos:position pos:line="20" pos:column="16"/></name></expr>;<pos:position pos:line="20" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></while>
        <expr_stmt><expr><operator pos:line="22" pos:column="9">*<pos:position pos:line="22" pos:column="10"/></operator><name pos:line="22" pos:column="10">plen<pos:position pos:line="22" pos:column="14"/></name> <operator pos:line="22" pos:column="15">=<pos:position pos:line="22" pos:column="16"/></operator> <literal type="number" pos:line="22" pos:column="17">0<pos:position pos:line="22" pos:column="18"/></literal></expr>;<pos:position pos:line="22" pos:column="19"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">NULL<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="25" pos:column="5">/*fprintf(stderr, "buf read: %s\n", ctx-&gt;buf); */</comment>
    <return pos:line="26" pos:column="5">return <expr><name><name pos:line="26" pos:column="12">ctx<pos:position pos:line="26" pos:column="15"/></name><operator pos:line="26" pos:column="15">-&gt;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="17">buf<pos:position pos:line="26" pos:column="20"/></name></name></expr>;<pos:position pos:line="26" pos:column="21"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
