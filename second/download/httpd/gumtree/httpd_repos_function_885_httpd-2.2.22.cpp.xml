<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_885_httpd-2.2.22.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">ssl_ext_lookup<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">apr_pool_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">p<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">conn_rec<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">c<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">int<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">peer<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
                           <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">char<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type><name pos:line="2" pos:column="40">oidnum<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="47"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SSLConnRec<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">sslconn<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><call><name pos:line="4" pos:column="27">myConnConfig<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">(<argument><expr><name pos:line="4" pos:column="40">c<pos:position pos:line="4" pos:column="41"/></name></expr></argument>)<pos:position pos:line="4" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">SSL<pos:position pos:line="5" pos:column="8"/></name> <modifier pos:line="5" pos:column="9">*<pos:position pos:line="5" pos:column="10"/></modifier></type><name pos:line="5" pos:column="10">ssl<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">X509<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">xs<pos:position pos:line="6" pos:column="13"/></name> <init pos:line="6" pos:column="14">= <expr><name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">ASN1_OBJECT<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">oid<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">count<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><literal type="number" pos:line="8" pos:column="17">0<pos:position pos:line="8" pos:column="18"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="20">j<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">result<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><name pos:line="9" pos:column="20">NULL<pos:position pos:line="9" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">sslconn<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">||<pos:position pos:line="11" pos:column="20"/></operator> <operator pos:line="11" pos:column="21">!<pos:position pos:line="11" pos:column="22"/></operator><name><name pos:line="11" pos:column="22">sslconn<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">ssl<pos:position pos:line="11" pos:column="34"/></name></name></expr>)<pos:position pos:line="11" pos:column="35"/></condition><then pos:line="11" pos:column="35"> <block pos:line="11" pos:column="36">{
        <return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">NULL<pos:position pos:line="12" pos:column="20"/></name></expr>;<pos:position pos:line="12" pos:column="21"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="14" pos:column="5">ssl<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <name><name pos:line="14" pos:column="11">sslconn<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">ssl<pos:position pos:line="14" pos:column="23"/></name></name></expr>;<pos:position pos:line="14" pos:column="24"/></expr_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">oid<pos:position pos:line="16" pos:column="8"/></name> <operator pos:line="16" pos:column="9">=<pos:position pos:line="16" pos:column="10"/></operator> <call><name pos:line="16" pos:column="11">OBJ_txt2obj<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">oidnum<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="31">1<pos:position pos:line="16" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="34"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">oid<pos:position pos:line="17" pos:column="13"/></name></expr>)<pos:position pos:line="17" pos:column="14"/></condition><then pos:line="17" pos:column="14"> <block pos:line="17" pos:column="15">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">ERR_clear_error<pos:position pos:line="18" pos:column="24"/></name><argument_list pos:line="18" pos:column="24">()<pos:position pos:line="18" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="27"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">NULL<pos:position pos:line="19" pos:column="20"/></name></expr>;<pos:position pos:line="19" pos:column="21"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="22" pos:column="5">xs<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator> <ternary><condition><expr><name pos:line="22" pos:column="10">peer<pos:position pos:line="22" pos:column="14"/></name></expr> ?<pos:position pos:line="22" pos:column="16"/></condition><then pos:line="22" pos:column="16"> <expr><call><name pos:line="22" pos:column="17">SSL_get_peer_certificate<pos:position pos:line="22" pos:column="41"/></name><argument_list pos:line="22" pos:column="41">(<argument><expr><name pos:line="22" pos:column="42">ssl<pos:position pos:line="22" pos:column="45"/></name></expr></argument>)<pos:position pos:line="22" pos:column="46"/></argument_list></call></expr> <pos:position pos:line="22" pos:column="47"/></then><else pos:line="22" pos:column="47">: <expr><call><name pos:line="22" pos:column="49">SSL_get_certificate<pos:position pos:line="22" pos:column="68"/></name><argument_list pos:line="22" pos:column="68">(<argument><expr><name pos:line="22" pos:column="69">ssl<pos:position pos:line="22" pos:column="72"/></name></expr></argument>)<pos:position pos:line="22" pos:column="73"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="22" pos:column="74"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">xs<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">==<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">NULL<pos:position pos:line="23" pos:column="19"/></name></expr>)<pos:position pos:line="23" pos:column="20"/></condition><then pos:line="23" pos:column="20"> <block pos:line="23" pos:column="21">{
        <return pos:line="24" pos:column="9">return <expr><name pos:line="24" pos:column="16">NULL<pos:position pos:line="24" pos:column="20"/></name></expr>;<pos:position pos:line="24" pos:column="21"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="27" pos:column="5">count<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">=<pos:position pos:line="27" pos:column="12"/></operator> <call><name pos:line="27" pos:column="13">X509_get_ext_count<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">xs<pos:position pos:line="27" pos:column="34"/></name></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>

    <for pos:line="29" pos:column="5">for <control pos:line="29" pos:column="9">(<init><expr><name pos:line="29" pos:column="10">j<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <literal type="number" pos:line="29" pos:column="14">0<pos:position pos:line="29" pos:column="15"/></literal></expr>;<pos:position pos:line="29" pos:column="16"/></init> <condition><expr><name pos:line="29" pos:column="17">j<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">&lt;<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="21">count<pos:position pos:line="29" pos:column="26"/></name></expr>;<pos:position pos:line="29" pos:column="27"/></condition> <incr><expr><name pos:line="29" pos:column="28">j<pos:position pos:line="29" pos:column="29"/></name><operator pos:line="29" pos:column="29">++<pos:position pos:line="29" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="29" pos:column="32"/></control> <block pos:line="29" pos:column="33">{
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">X509_EXTENSION<pos:position pos:line="30" pos:column="23"/></name> <modifier pos:line="30" pos:column="24">*<pos:position pos:line="30" pos:column="25"/></modifier></type><name pos:line="30" pos:column="25">ext<pos:position pos:line="30" pos:column="28"/></name> <init pos:line="30" pos:column="29">= <expr><call><name pos:line="30" pos:column="31">X509_get_ext<pos:position pos:line="30" pos:column="43"/></name><argument_list pos:line="30" pos:column="43">(<argument><expr><name pos:line="30" pos:column="44">xs<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">j<pos:position pos:line="30" pos:column="49"/></name></expr></argument>)<pos:position pos:line="30" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="30" pos:column="51"/></decl_stmt>

        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">OBJ_cmp<pos:position pos:line="32" pos:column="20"/></name><argument_list pos:line="32" pos:column="20">(<argument><expr><name><name pos:line="32" pos:column="21">ext<pos:position pos:line="32" pos:column="24"/></name><operator pos:line="32" pos:column="24">-&gt;<pos:position pos:line="32" pos:column="29"/></operator><name pos:line="32" pos:column="26">object<pos:position pos:line="32" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="34">oid<pos:position pos:line="32" pos:column="37"/></name></expr></argument>)<pos:position pos:line="32" pos:column="38"/></argument_list></call> <operator pos:line="32" pos:column="39">==<pos:position pos:line="32" pos:column="41"/></operator> <literal type="number" pos:line="32" pos:column="42">0<pos:position pos:line="32" pos:column="43"/></literal></expr>)<pos:position pos:line="32" pos:column="44"/></condition><then pos:line="32" pos:column="44"> <block pos:line="32" pos:column="45">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">BIO<pos:position pos:line="33" pos:column="16"/></name> <modifier pos:line="33" pos:column="17">*<pos:position pos:line="33" pos:column="18"/></modifier></type><name pos:line="33" pos:column="18">bio<pos:position pos:line="33" pos:column="21"/></name> <init pos:line="33" pos:column="22">= <expr><call><name pos:line="33" pos:column="24">BIO_new<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><call><name pos:line="33" pos:column="32">BIO_s_mem<pos:position pos:line="33" pos:column="41"/></name><argument_list pos:line="33" pos:column="41">()<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="45"/></decl_stmt>

            <if pos:line="35" pos:column="13">if <condition pos:line="35" pos:column="16">(<expr><call><name pos:line="35" pos:column="17">X509V3_EXT_print<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><name pos:line="35" pos:column="34">bio<pos:position pos:line="35" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="39">ext<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="44">0<pos:position pos:line="35" pos:column="45"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="47">0<pos:position pos:line="35" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="49"/></argument_list></call> <operator pos:line="35" pos:column="50">==<pos:position pos:line="35" pos:column="52"/></operator> <literal type="number" pos:line="35" pos:column="53">1<pos:position pos:line="35" pos:column="54"/></literal></expr>)<pos:position pos:line="35" pos:column="55"/></condition><then pos:line="35" pos:column="55"> <block pos:line="35" pos:column="56">{
                <decl_stmt><decl><type><name pos:line="36" pos:column="17">BUF_MEM<pos:position pos:line="36" pos:column="24"/></name> <modifier pos:line="36" pos:column="25">*<pos:position pos:line="36" pos:column="26"/></modifier></type><name pos:line="36" pos:column="26">buf<pos:position pos:line="36" pos:column="29"/></name></decl>;<pos:position pos:line="36" pos:column="30"/></decl_stmt>

                <expr_stmt><expr><call><name pos:line="38" pos:column="17">BIO_get_mem_ptr<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">bio<pos:position pos:line="38" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="38">&amp;<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="39">buf<pos:position pos:line="38" pos:column="42"/></name></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><name pos:line="39" pos:column="17">result<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">=<pos:position pos:line="39" pos:column="25"/></operator> <call><name pos:line="39" pos:column="26">apr_pstrmemdup<pos:position pos:line="39" pos:column="40"/></name><argument_list pos:line="39" pos:column="40">(<argument><expr><name pos:line="39" pos:column="41">p<pos:position pos:line="39" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="44">buf<pos:position pos:line="39" pos:column="47"/></name><operator pos:line="39" pos:column="47">-&gt;<pos:position pos:line="39" pos:column="52"/></operator><name pos:line="39" pos:column="49">data<pos:position pos:line="39" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="55">buf<pos:position pos:line="39" pos:column="58"/></name><operator pos:line="39" pos:column="58">-&gt;<pos:position pos:line="39" pos:column="63"/></operator><name pos:line="39" pos:column="60">length<pos:position pos:line="39" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="68"/></expr_stmt>
            }<pos:position pos:line="40" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="42" pos:column="13">BIO_vfree<pos:position pos:line="42" pos:column="22"/></name><argument_list pos:line="42" pos:column="22">(<argument><expr><name pos:line="42" pos:column="23">bio<pos:position pos:line="42" pos:column="26"/></name></expr></argument>)<pos:position pos:line="42" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="28"/></expr_stmt>
            <break pos:line="43" pos:column="13">break;<pos:position pos:line="43" pos:column="19"/></break>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>
    }<pos:position pos:line="45" pos:column="6"/></block></for>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name pos:line="47" pos:column="9">peer<pos:position pos:line="47" pos:column="13"/></name></expr>)<pos:position pos:line="47" pos:column="14"/></condition><then pos:line="47" pos:column="14"> <block pos:line="47" pos:column="15">{
        <comment type="block" pos:line="48" pos:column="9">/* only SSL_get_peer_certificate raises the refcount */</comment>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">X509_free<pos:position pos:line="49" pos:column="18"/></name><argument_list pos:line="49" pos:column="18">(<argument><expr><name pos:line="49" pos:column="19">xs<pos:position pos:line="49" pos:column="21"/></name></expr></argument>)<pos:position pos:line="49" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="52" pos:column="5">ERR_clear_error<pos:position pos:line="52" pos:column="20"/></name><argument_list pos:line="52" pos:column="20">()<pos:position pos:line="52" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="23"/></expr_stmt>
    <return pos:line="53" pos:column="5">return <expr><name pos:line="53" pos:column="12">result<pos:position pos:line="53" pos:column="18"/></name></expr>;<pos:position pos:line="53" pos:column="19"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
