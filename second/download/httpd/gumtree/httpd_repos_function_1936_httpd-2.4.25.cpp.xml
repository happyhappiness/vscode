<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1936_httpd-2.4.25.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">stream_reqbody_cl<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">apr_pool_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">p<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">request_rec<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">r<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="3" pos:column="39">proxy_conn_rec<pos:position pos:line="3" pos:column="53"/></name> <modifier pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></modifier></type><name pos:line="3" pos:column="55">p_conn<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="4" pos:column="39">conn_rec<pos:position pos:line="4" pos:column="47"/></name> <modifier pos:line="4" pos:column="48">*<pos:position pos:line="4" pos:column="49"/></modifier></type><name pos:line="4" pos:column="49">origin<pos:position pos:line="4" pos:column="55"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="5" pos:column="39">apr_bucket_brigade<pos:position pos:line="5" pos:column="57"/></name> <modifier pos:line="5" pos:column="58">*<pos:position pos:line="5" pos:column="59"/></modifier></type><name pos:line="5" pos:column="59">header_brigade<pos:position pos:line="5" pos:column="73"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="6" pos:column="39">apr_bucket_brigade<pos:position pos:line="6" pos:column="57"/></name> <modifier pos:line="6" pos:column="58">*<pos:position pos:line="6" pos:column="59"/></modifier></type><name pos:line="6" pos:column="59">input_brigade<pos:position pos:line="6" pos:column="72"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="7" pos:column="39">char<pos:position pos:line="7" pos:column="43"/></name> <modifier pos:line="7" pos:column="44">*<pos:position pos:line="7" pos:column="45"/></modifier></type><name pos:line="7" pos:column="45">old_cl_val<pos:position pos:line="7" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="56"/></parameter_list>
<block pos:line="8" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">seen_eos<pos:position pos:line="9" pos:column="17"/></name> <init pos:line="9" pos:column="18">= <expr><literal type="number" pos:line="9" pos:column="20">0<pos:position pos:line="9" pos:column="21"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="23">rv<pos:position pos:line="9" pos:column="25"/></name> <init pos:line="9" pos:column="26">= <expr><literal type="number" pos:line="9" pos:column="28">0<pos:position pos:line="9" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_status_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">status<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><name pos:line="10" pos:column="27">APR_SUCCESS<pos:position pos:line="10" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">apr_bucket_alloc_t<pos:position pos:line="11" pos:column="23"/></name> <modifier pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></modifier></type><name pos:line="11" pos:column="25">bucket_alloc<pos:position pos:line="11" pos:column="37"/></name> <init pos:line="11" pos:column="38">= <expr><name><name pos:line="11" pos:column="40">r<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">-&gt;<pos:position pos:line="11" pos:column="46"/></operator><name pos:line="11" pos:column="43">connection<pos:position pos:line="11" pos:column="53"/></name><operator pos:line="11" pos:column="53">-&gt;<pos:position pos:line="11" pos:column="58"/></operator><name pos:line="11" pos:column="55">bucket_alloc<pos:position pos:line="11" pos:column="67"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="68"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">apr_bucket_brigade<pos:position pos:line="12" pos:column="23"/></name> <modifier pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></modifier></type><name pos:line="12" pos:column="25">bb<pos:position pos:line="12" pos:column="27"/></name></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">apr_bucket<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">e<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">apr_off_t<pos:position pos:line="14" pos:column="14"/></name></type> <name pos:line="14" pos:column="15">cl_val<pos:position pos:line="14" pos:column="21"/></name> <init pos:line="14" pos:column="22">= <expr><literal type="number" pos:line="14" pos:column="24">0<pos:position pos:line="14" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">apr_off_t<pos:position pos:line="15" pos:column="14"/></name></type> <name pos:line="15" pos:column="15">bytes<pos:position pos:line="15" pos:column="20"/></name></decl>;<pos:position pos:line="15" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">apr_off_t<pos:position pos:line="16" pos:column="14"/></name></type> <name pos:line="16" pos:column="15">bytes_streamed<pos:position pos:line="16" pos:column="29"/></name> <init pos:line="16" pos:column="30">= <expr><literal type="number" pos:line="16" pos:column="32">0<pos:position pos:line="16" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="34"/></decl_stmt>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">old_cl_val<pos:position pos:line="18" pos:column="19"/></name></expr>)<pos:position pos:line="18" pos:column="20"/></condition><then pos:line="18" pos:column="20"> <block pos:line="18" pos:column="21">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">char<pos:position pos:line="19" pos:column="13"/></name> <modifier pos:line="19" pos:column="14">*<pos:position pos:line="19" pos:column="15"/></modifier></type><name pos:line="19" pos:column="15">endstr<pos:position pos:line="19" pos:column="21"/></name></decl>;<pos:position pos:line="19" pos:column="22"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="21" pos:column="9">add_cl<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name pos:line="21" pos:column="16">p<pos:position pos:line="21" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="19">bucket_alloc<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">header_brigade<pos:position pos:line="21" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="49">old_cl_val<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="61"/></expr_stmt>
        <expr_stmt><expr><name pos:line="22" pos:column="9">status<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">apr_strtoff<pos:position pos:line="22" pos:column="29"/></name><argument_list pos:line="22" pos:column="29">(<argument><expr><operator pos:line="22" pos:column="30">&amp;<pos:position pos:line="22" pos:column="35"/></operator><name pos:line="22" pos:column="31">cl_val<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">old_cl_val<pos:position pos:line="22" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="51">&amp;<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="52">endstr<pos:position pos:line="22" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="60">10<pos:position pos:line="22" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="64"/></expr_stmt>

        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">status<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">||<pos:position pos:line="24" pos:column="22"/></operator> <operator pos:line="24" pos:column="23">*<pos:position pos:line="24" pos:column="24"/></operator><name pos:line="24" pos:column="24">endstr<pos:position pos:line="24" pos:column="30"/></name> <operator pos:line="24" pos:column="31">||<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="34">endstr<pos:position pos:line="24" pos:column="40"/></name> <operator pos:line="24" pos:column="41">==<pos:position pos:line="24" pos:column="43"/></operator> <name pos:line="24" pos:column="44">old_cl_val<pos:position pos:line="24" pos:column="54"/></name> <operator pos:line="24" pos:column="55">||<pos:position pos:line="24" pos:column="57"/></operator> <name pos:line="24" pos:column="58">cl_val<pos:position pos:line="24" pos:column="64"/></name> <operator pos:line="24" pos:column="65">&lt;<pos:position pos:line="24" pos:column="69"/></operator> <literal type="number" pos:line="24" pos:column="67">0<pos:position pos:line="24" pos:column="68"/></literal></expr>)<pos:position pos:line="24" pos:column="69"/></condition><then pos:line="24" pos:column="69"> <block pos:line="24" pos:column="70">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">ap_log_rerror<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">APLOG_MARK<pos:position pos:line="25" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="39">APLOG_ERR<pos:position pos:line="25" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="50">status<pos:position pos:line="25" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="58">r<pos:position pos:line="25" pos:column="59"/></name></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="61">APLOGNO<pos:position pos:line="25" pos:column="68"/></name><argument_list pos:line="25" pos:column="68">(<argument><expr><literal type="number" pos:line="25" pos:column="69">01085<pos:position pos:line="25" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="75"/></argument_list></call>
                          <literal type="string" pos:line="26" pos:column="27">"could not parse request Content-Length (%s)"<pos:position pos:line="26" pos:column="72"/></literal></expr></argument>,
                          <argument><expr><name pos:line="27" pos:column="27">old_cl_val<pos:position pos:line="27" pos:column="37"/></name></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
            <return pos:line="28" pos:column="13">return <expr><name pos:line="28" pos:column="20">HTTP_BAD_REQUEST<pos:position pos:line="28" pos:column="36"/></name></expr>;<pos:position pos:line="28" pos:column="37"/></return>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">terminate_headers<pos:position pos:line="31" pos:column="22"/></name><argument_list pos:line="31" pos:column="22">(<argument><expr><name pos:line="31" pos:column="23">bucket_alloc<pos:position pos:line="31" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="37">header_brigade<pos:position pos:line="31" pos:column="51"/></name></expr></argument>)<pos:position pos:line="31" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="53"/></expr_stmt>

    <while pos:line="33" pos:column="5">while <condition pos:line="33" pos:column="11">(<expr><operator pos:line="33" pos:column="12">!<pos:position pos:line="33" pos:column="13"/></operator><call><name pos:line="33" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><call><name pos:line="33" pos:column="31">APR_BRIGADE_FIRST<pos:position pos:line="33" pos:column="48"/></name><argument_list pos:line="33" pos:column="48">(<argument><expr><name pos:line="33" pos:column="49">input_brigade<pos:position pos:line="33" pos:column="62"/></name></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="65"/></condition>
    <block pos:line="34" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">apr_brigade_length<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">input_brigade<pos:position pos:line="35" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="43">1<pos:position pos:line="35" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="35" pos:column="46">&amp;<pos:position pos:line="35" pos:column="51"/></operator><name pos:line="35" pos:column="47">bytes<pos:position pos:line="35" pos:column="52"/></name></expr></argument>)<pos:position pos:line="35" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name pos:line="36" pos:column="9">bytes_streamed<pos:position pos:line="36" pos:column="23"/></name> <operator pos:line="36" pos:column="24">+=<pos:position pos:line="36" pos:column="26"/></operator> <name pos:line="36" pos:column="27">bytes<pos:position pos:line="36" pos:column="32"/></name></expr>;<pos:position pos:line="36" pos:column="33"/></expr_stmt>

        <comment type="block" pos:line="38" pos:column="9">/* If this brigade contains EOS, either stop or remove it. */</comment>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><call><name pos:line="39" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><call><name pos:line="39" pos:column="31">APR_BRIGADE_LAST<pos:position pos:line="39" pos:column="47"/></name><argument_list pos:line="39" pos:column="47">(<argument><expr><name pos:line="39" pos:column="48">input_brigade<pos:position pos:line="39" pos:column="61"/></name></expr></argument>)<pos:position pos:line="39" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="64"/></condition><then pos:line="39" pos:column="64"> <block pos:line="39" pos:column="65">{
            <expr_stmt><expr><name pos:line="40" pos:column="13">seen_eos<pos:position pos:line="40" pos:column="21"/></name> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <literal type="number" pos:line="40" pos:column="24">1<pos:position pos:line="40" pos:column="25"/></literal></expr>;<pos:position pos:line="40" pos:column="26"/></expr_stmt>

            <comment type="block" pos:line="42" pos:column="13">/* We can't pass this EOS to the output_filters. */</comment>
            <expr_stmt><expr><name pos:line="43" pos:column="13">e<pos:position pos:line="43" pos:column="14"/></name> <operator pos:line="43" pos:column="15">=<pos:position pos:line="43" pos:column="16"/></operator> <call><name pos:line="43" pos:column="17">APR_BRIGADE_LAST<pos:position pos:line="43" pos:column="33"/></name><argument_list pos:line="43" pos:column="33">(<argument><expr><name pos:line="43" pos:column="34">input_brigade<pos:position pos:line="43" pos:column="47"/></name></expr></argument>)<pos:position pos:line="43" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">apr_bucket_delete<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><name pos:line="44" pos:column="31">e<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>

            <if pos:line="46" pos:column="13">if <condition pos:line="46" pos:column="16">(<expr><call><name pos:line="46" pos:column="17">apr_table_get<pos:position pos:line="46" pos:column="30"/></name><argument_list pos:line="46" pos:column="30">(<argument><expr><name><name pos:line="46" pos:column="31">r<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">-&gt;<pos:position pos:line="46" pos:column="37"/></operator><name pos:line="46" pos:column="34">subprocess_env<pos:position pos:line="46" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="50">"proxy-sendextracrlf"<pos:position pos:line="46" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="72"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="73"/></condition><then pos:line="46" pos:column="73"> <block pos:line="46" pos:column="74">{
                <expr_stmt><expr><name pos:line="47" pos:column="17">e<pos:position pos:line="47" pos:column="18"/></name> <operator pos:line="47" pos:column="19">=<pos:position pos:line="47" pos:column="20"/></operator> <call><name pos:line="47" pos:column="21">apr_bucket_immortal_create<pos:position pos:line="47" pos:column="47"/></name><argument_list pos:line="47" pos:column="47">(<argument><expr><name pos:line="47" pos:column="48">ASCII_CRLF<pos:position pos:line="47" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="60">2<pos:position pos:line="47" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="63">bucket_alloc<pos:position pos:line="47" pos:column="75"/></name></expr></argument>)<pos:position pos:line="47" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="48" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">(<argument><expr><name pos:line="48" pos:column="41">input_brigade<pos:position pos:line="48" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="56">e<pos:position pos:line="48" pos:column="57"/></name></expr></argument>)<pos:position pos:line="48" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="59"/></expr_stmt>
            }<pos:position pos:line="49" pos:column="14"/></block></then></if>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="52" pos:column="9">/* C-L &lt; bytes streamed?!?
         * We will error out after the body is completely
         * consumed, but we can't stream more bytes at the
         * back end since they would in part be interpreted
         * as another request!  If nothing is sent, then
         * just send nothing.
         *
         * Prevents HTTP Response Splitting.
         */</comment>
        <if pos:line="61" pos:column="9">if <condition pos:line="61" pos:column="12">(<expr><name pos:line="61" pos:column="13">bytes_streamed<pos:position pos:line="61" pos:column="27"/></name> <operator pos:line="61" pos:column="28">&gt;<pos:position pos:line="61" pos:column="32"/></operator> <name pos:line="61" pos:column="30">cl_val<pos:position pos:line="61" pos:column="36"/></name></expr>)<pos:position pos:line="61" pos:column="37"/></condition><then pos:line="61" pos:column="37"> <block pos:line="61" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="62" pos:column="13">ap_log_rerror<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name pos:line="62" pos:column="27">APLOG_MARK<pos:position pos:line="62" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="39">APLOG_ERR<pos:position pos:line="62" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="50">0<pos:position pos:line="62" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="53">r<pos:position pos:line="62" pos:column="54"/></name></expr></argument>, <argument><expr><call><name pos:line="62" pos:column="56">APLOGNO<pos:position pos:line="62" pos:column="63"/></name><argument_list pos:line="62" pos:column="63">(<argument><expr><literal type="number" pos:line="62" pos:column="64">01086<pos:position pos:line="62" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call>
                          <literal type="string" pos:line="63" pos:column="27">"read more bytes of request body than expected "<pos:position pos:line="63" pos:column="75"/></literal>
                          <literal type="string" pos:line="64" pos:column="27">"(got %"<pos:position pos:line="64" pos:column="35"/></literal> <name pos:line="64" pos:column="36">APR_OFF_T_FMT<pos:position pos:line="64" pos:column="49"/></name> <literal type="string" pos:line="64" pos:column="50">", expected %"<pos:position pos:line="64" pos:column="64"/></literal> <name pos:line="64" pos:column="65">APR_OFF_T_FMT<pos:position pos:line="64" pos:column="78"/></name> <literal type="string" pos:line="64" pos:column="79">")"<pos:position pos:line="64" pos:column="82"/></literal></expr></argument>,
                          <argument><expr><name pos:line="65" pos:column="27">bytes_streamed<pos:position pos:line="65" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="43">cl_val<pos:position pos:line="65" pos:column="49"/></name></expr></argument>)<pos:position pos:line="65" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="51"/></expr_stmt>
            <return pos:line="66" pos:column="13">return <expr><name pos:line="66" pos:column="20">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="66" pos:column="46"/></name></expr>;<pos:position pos:line="66" pos:column="47"/></return>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>

        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">header_brigade<pos:position pos:line="69" pos:column="27"/></name></expr>)<pos:position pos:line="69" pos:column="28"/></condition><then pos:line="69" pos:column="28"> <block pos:line="69" pos:column="29">{
            <comment type="block" pos:line="70" pos:column="13">/* we never sent the header brigade, so go ahead and
             * take care of that now
             */</comment>
            <expr_stmt><expr><name pos:line="73" pos:column="13">bb<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">=<pos:position pos:line="73" pos:column="17"/></operator> <name pos:line="73" pos:column="18">header_brigade<pos:position pos:line="73" pos:column="32"/></name></expr>;<pos:position pos:line="73" pos:column="33"/></expr_stmt>

            <comment type="block" pos:line="75" pos:column="13">/*
             * Save input_brigade in bb brigade. (At least) in the SSL case
             * input_brigade contains transient buckets whose data would get
             * overwritten during the next call of ap_get_brigade in the loop.
             * ap_save_brigade ensures these buckets to be set aside.
             * Calling ap_save_brigade with NULL as filter is OK, because
             * bb brigade already has been created and does not need to get
             * created by ap_save_brigade.
             */</comment>
            <expr_stmt><expr><name pos:line="84" pos:column="13">status<pos:position pos:line="84" pos:column="19"/></name> <operator pos:line="84" pos:column="20">=<pos:position pos:line="84" pos:column="21"/></operator> <call><name pos:line="84" pos:column="22">ap_save_brigade<pos:position pos:line="84" pos:column="37"/></name><argument_list pos:line="84" pos:column="37">(<argument><expr><name pos:line="84" pos:column="38">NULL<pos:position pos:line="84" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="44">&amp;<pos:position pos:line="84" pos:column="49"/></operator><name pos:line="84" pos:column="45">bb<pos:position pos:line="84" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="84" pos:column="49">&amp;<pos:position pos:line="84" pos:column="54"/></operator><name pos:line="84" pos:column="50">input_brigade<pos:position pos:line="84" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="65">p<pos:position pos:line="84" pos:column="66"/></name></expr></argument>)<pos:position pos:line="84" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="68"/></expr_stmt>
            <if pos:line="85" pos:column="13">if <condition pos:line="85" pos:column="16">(<expr><name pos:line="85" pos:column="17">status<pos:position pos:line="85" pos:column="23"/></name> <operator pos:line="85" pos:column="24">!=<pos:position pos:line="85" pos:column="26"/></operator> <name pos:line="85" pos:column="27">APR_SUCCESS<pos:position pos:line="85" pos:column="38"/></name></expr>)<pos:position pos:line="85" pos:column="39"/></condition><then pos:line="85" pos:column="39"> <block pos:line="85" pos:column="40">{
                <return pos:line="86" pos:column="17">return <expr><name pos:line="86" pos:column="24">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="86" pos:column="50"/></name></expr>;<pos:position pos:line="86" pos:column="51"/></return>
            }<pos:position pos:line="87" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="89" pos:column="13">header_brigade<pos:position pos:line="89" pos:column="27"/></name> <operator pos:line="89" pos:column="28">=<pos:position pos:line="89" pos:column="29"/></operator> <name pos:line="89" pos:column="30">NULL<pos:position pos:line="89" pos:column="34"/></name></expr>;<pos:position pos:line="89" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="90" pos:column="10"/></block></then>
        <else pos:line="91" pos:column="9">else <block pos:line="91" pos:column="14">{
            <expr_stmt><expr><name pos:line="92" pos:column="13">bb<pos:position pos:line="92" pos:column="15"/></name> <operator pos:line="92" pos:column="16">=<pos:position pos:line="92" pos:column="17"/></operator> <name pos:line="92" pos:column="18">input_brigade<pos:position pos:line="92" pos:column="31"/></name></expr>;<pos:position pos:line="92" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="93" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="95" pos:column="9">/* Once we hit EOS, we are ready to flush. */</comment>
        <expr_stmt><expr><name pos:line="96" pos:column="9">rv<pos:position pos:line="96" pos:column="11"/></name> <operator pos:line="96" pos:column="12">=<pos:position pos:line="96" pos:column="13"/></operator> <call><name pos:line="96" pos:column="14">ap_proxy_pass_brigade<pos:position pos:line="96" pos:column="35"/></name><argument_list pos:line="96" pos:column="35">(<argument><expr><name pos:line="96" pos:column="36">bucket_alloc<pos:position pos:line="96" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="50">r<pos:position pos:line="96" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="53">p_conn<pos:position pos:line="96" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="61">origin<pos:position pos:line="96" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="69">bb<pos:position pos:line="96" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="73">seen_eos<pos:position pos:line="96" pos:column="81"/></name></expr></argument>)<pos:position pos:line="96" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="83"/></expr_stmt>
        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><name pos:line="97" pos:column="13">rv<pos:position pos:line="97" pos:column="15"/></name> <operator pos:line="97" pos:column="16">!=<pos:position pos:line="97" pos:column="18"/></operator> <name pos:line="97" pos:column="19">OK<pos:position pos:line="97" pos:column="21"/></name></expr>)<pos:position pos:line="97" pos:column="22"/></condition><then pos:line="97" pos:column="22"> <block pos:line="97" pos:column="23">{
            <return pos:line="98" pos:column="13">return <expr><name pos:line="98" pos:column="20">rv<pos:position pos:line="98" pos:column="22"/></name></expr> ;<pos:position pos:line="98" pos:column="24"/></return>
        }<pos:position pos:line="99" pos:column="10"/></block></then></if>

        <if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name pos:line="101" pos:column="13">seen_eos<pos:position pos:line="101" pos:column="21"/></name></expr>)<pos:position pos:line="101" pos:column="22"/></condition><then pos:line="101" pos:column="22"> <block pos:line="101" pos:column="23">{
            <break pos:line="102" pos:column="13">break;<pos:position pos:line="102" pos:column="19"/></break>
        }<pos:position pos:line="103" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="105" pos:column="9">status<pos:position pos:line="105" pos:column="15"/></name> <operator pos:line="105" pos:column="16">=<pos:position pos:line="105" pos:column="17"/></operator> <call><name pos:line="105" pos:column="18">ap_get_brigade<pos:position pos:line="105" pos:column="32"/></name><argument_list pos:line="105" pos:column="32">(<argument><expr><name><name pos:line="105" pos:column="33">r<pos:position pos:line="105" pos:column="34"/></name><operator pos:line="105" pos:column="34">-&gt;<pos:position pos:line="105" pos:column="39"/></operator><name pos:line="105" pos:column="36">input_filters<pos:position pos:line="105" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="51">input_brigade<pos:position pos:line="105" pos:column="64"/></name></expr></argument>,
                                <argument><expr><name pos:line="106" pos:column="33">AP_MODE_READBYTES<pos:position pos:line="106" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="52">APR_BLOCK_READ<pos:position pos:line="106" pos:column="66"/></name></expr></argument>,
                                <argument><expr><name pos:line="107" pos:column="33">HUGE_STRING_LEN<pos:position pos:line="107" pos:column="48"/></name></expr></argument>)<pos:position pos:line="107" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="50"/></expr_stmt>

        <if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><name pos:line="109" pos:column="13">status<pos:position pos:line="109" pos:column="19"/></name> <operator pos:line="109" pos:column="20">!=<pos:position pos:line="109" pos:column="22"/></operator> <name pos:line="109" pos:column="23">APR_SUCCESS<pos:position pos:line="109" pos:column="34"/></name></expr>)<pos:position pos:line="109" pos:column="35"/></condition><then pos:line="109" pos:column="35"> <block pos:line="109" pos:column="36">{
            <decl_stmt><decl><type><name pos:line="110" pos:column="13">conn_rec<pos:position pos:line="110" pos:column="21"/></name> <modifier pos:line="110" pos:column="22">*<pos:position pos:line="110" pos:column="23"/></modifier></type><name pos:line="110" pos:column="23">c<pos:position pos:line="110" pos:column="24"/></name> <init pos:line="110" pos:column="25">= <expr><name><name pos:line="110" pos:column="27">r<pos:position pos:line="110" pos:column="28"/></name><operator pos:line="110" pos:column="28">-&gt;<pos:position pos:line="110" pos:column="33"/></operator><name pos:line="110" pos:column="30">connection<pos:position pos:line="110" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="110" pos:column="41"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="111" pos:column="13">ap_log_rerror<pos:position pos:line="111" pos:column="26"/></name><argument_list pos:line="111" pos:column="26">(<argument><expr><name pos:line="111" pos:column="27">APLOG_MARK<pos:position pos:line="111" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="39">APLOG_ERR<pos:position pos:line="111" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="50">status<pos:position pos:line="111" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="58">r<pos:position pos:line="111" pos:column="59"/></name></expr></argument>, <argument><expr><call><name pos:line="111" pos:column="61">APLOGNO<pos:position pos:line="111" pos:column="68"/></name><argument_list pos:line="111" pos:column="68">(<argument><expr><literal type="number" pos:line="111" pos:column="69">02609<pos:position pos:line="111" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="75"/></argument_list></call>
                          <literal type="string" pos:line="112" pos:column="27">"read request body failed to %pI (%s)"<pos:position pos:line="112" pos:column="65"/></literal>
                          <literal type="string" pos:line="113" pos:column="27">" from %s (%s)"<pos:position pos:line="113" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="113" pos:column="44">p_conn<pos:position pos:line="113" pos:column="50"/></name><operator pos:line="113" pos:column="50">-&gt;<pos:position pos:line="113" pos:column="55"/></operator><name pos:line="113" pos:column="52">addr<pos:position pos:line="113" pos:column="56"/></name></name></expr></argument>,
                          <argument><expr><ternary><condition><expr><name><name pos:line="114" pos:column="27">p_conn<pos:position pos:line="114" pos:column="33"/></name><operator pos:line="114" pos:column="33">-&gt;<pos:position pos:line="114" pos:column="38"/></operator><name pos:line="114" pos:column="35">hostname<pos:position pos:line="114" pos:column="43"/></name></name></expr> ?<pos:position pos:line="114" pos:column="45"/></condition><then pos:line="114" pos:column="45"> <expr><name><name pos:line="114" pos:column="46">p_conn<pos:position pos:line="114" pos:column="52"/></name><operator pos:line="114" pos:column="52">-&gt;<pos:position pos:line="114" pos:column="57"/></operator><name pos:line="114" pos:column="54">hostname<pos:position pos:line="114" pos:column="62"/></name></name></expr></then><else pos:line="114" pos:column="62">: <expr><literal type="string" pos:line="114" pos:column="64">""<pos:position pos:line="114" pos:column="66"/></literal></expr></else></ternary></expr></argument>,
                          <argument><expr><name><name pos:line="115" pos:column="27">c<pos:position pos:line="115" pos:column="28"/></name><operator pos:line="115" pos:column="28">-&gt;<pos:position pos:line="115" pos:column="33"/></operator><name pos:line="115" pos:column="30">client_ip<pos:position pos:line="115" pos:column="39"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="115" pos:column="41">c<pos:position pos:line="115" pos:column="42"/></name><operator pos:line="115" pos:column="42">-&gt;<pos:position pos:line="115" pos:column="47"/></operator><name pos:line="115" pos:column="44">remote_host<pos:position pos:line="115" pos:column="55"/></name></name></expr> ?<pos:position pos:line="115" pos:column="57"/></condition><then pos:line="115" pos:column="57"> <expr><name><name pos:line="115" pos:column="58">c<pos:position pos:line="115" pos:column="59"/></name><operator pos:line="115" pos:column="59">-&gt;<pos:position pos:line="115" pos:column="64"/></operator><name pos:line="115" pos:column="61">remote_host<pos:position pos:line="115" pos:column="72"/></name></name></expr></then><else pos:line="115" pos:column="72">: <expr><literal type="string" pos:line="115" pos:column="74">""<pos:position pos:line="115" pos:column="76"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="115" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="78"/></expr_stmt>
            <return pos:line="116" pos:column="13">return <expr><call><name pos:line="116" pos:column="20">ap_map_http_request_error<pos:position pos:line="116" pos:column="45"/></name><argument_list pos:line="116" pos:column="45">(<argument><expr><name pos:line="116" pos:column="46">status<pos:position pos:line="116" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="54">HTTP_BAD_REQUEST<pos:position pos:line="116" pos:column="70"/></name></expr></argument>)<pos:position pos:line="116" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="72"/></return>
        }<pos:position pos:line="117" pos:column="10"/></block></then></if>
    }<pos:position pos:line="118" pos:column="6"/></block></while>

    <if pos:line="120" pos:column="5">if <condition pos:line="120" pos:column="8">(<expr><name pos:line="120" pos:column="9">bytes_streamed<pos:position pos:line="120" pos:column="23"/></name> <operator pos:line="120" pos:column="24">!=<pos:position pos:line="120" pos:column="26"/></operator> <name pos:line="120" pos:column="27">cl_val<pos:position pos:line="120" pos:column="33"/></name></expr>)<pos:position pos:line="120" pos:column="34"/></condition><then pos:line="120" pos:column="34"> <block pos:line="120" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="121" pos:column="9">ap_log_rerror<pos:position pos:line="121" pos:column="22"/></name><argument_list pos:line="121" pos:column="22">(<argument><expr><name pos:line="121" pos:column="23">APLOG_MARK<pos:position pos:line="121" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="35">APLOG_ERR<pos:position pos:line="121" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="121" pos:column="46">0<pos:position pos:line="121" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="121" pos:column="49">r<pos:position pos:line="121" pos:column="50"/></name></expr></argument>, <argument><expr><call><name pos:line="121" pos:column="52">APLOGNO<pos:position pos:line="121" pos:column="59"/></name><argument_list pos:line="121" pos:column="59">(<argument><expr><literal type="number" pos:line="121" pos:column="60">01087<pos:position pos:line="121" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="66"/></argument_list></call>
                      <literal type="string" pos:line="122" pos:column="23">"client %s given Content-Length did not match"<pos:position pos:line="122" pos:column="69"/></literal>
                      <literal type="string" pos:line="123" pos:column="23">" number of body bytes read"<pos:position pos:line="123" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="53">r<pos:position pos:line="123" pos:column="54"/></name><operator pos:line="123" pos:column="54">-&gt;<pos:position pos:line="123" pos:column="59"/></operator><name pos:line="123" pos:column="56">connection<pos:position pos:line="123" pos:column="66"/></name><operator pos:line="123" pos:column="66">-&gt;<pos:position pos:line="123" pos:column="71"/></operator><name pos:line="123" pos:column="68">client_ip<pos:position pos:line="123" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="79"/></expr_stmt>
        <return pos:line="124" pos:column="9">return <expr><name pos:line="124" pos:column="16">HTTP_BAD_REQUEST<pos:position pos:line="124" pos:column="32"/></name></expr>;<pos:position pos:line="124" pos:column="33"/></return>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if>

    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">(<expr><name pos:line="127" pos:column="9">header_brigade<pos:position pos:line="127" pos:column="23"/></name></expr>)<pos:position pos:line="127" pos:column="24"/></condition><then pos:line="127" pos:column="24"> <block pos:line="127" pos:column="25">{
        <comment type="block" pos:line="128" pos:column="9">/* we never sent the header brigade since there was no request
         * body; send it now with the flush flag
         */</comment>
        <expr_stmt><expr><name pos:line="131" pos:column="9">bb<pos:position pos:line="131" pos:column="11"/></name> <operator pos:line="131" pos:column="12">=<pos:position pos:line="131" pos:column="13"/></operator> <name pos:line="131" pos:column="14">header_brigade<pos:position pos:line="131" pos:column="28"/></name></expr>;<pos:position pos:line="131" pos:column="29"/></expr_stmt>
        <return pos:line="132" pos:column="9">return<expr><operator pos:line="132" pos:column="15">(<pos:position pos:line="132" pos:column="16"/></operator><call><name pos:line="132" pos:column="16">ap_proxy_pass_brigade<pos:position pos:line="132" pos:column="37"/></name><argument_list pos:line="132" pos:column="37">(<argument><expr><name pos:line="132" pos:column="38">bucket_alloc<pos:position pos:line="132" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="52">r<pos:position pos:line="132" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="55">p_conn<pos:position pos:line="132" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="63">origin<pos:position pos:line="132" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="132" pos:column="71">bb<pos:position pos:line="132" pos:column="73"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="132" pos:column="75">1<pos:position pos:line="132" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="132" pos:column="77"/></argument_list></call><operator pos:line="132" pos:column="77">)<pos:position pos:line="132" pos:column="78"/></operator></expr>;<pos:position pos:line="132" pos:column="79"/></return>
    }<pos:position pos:line="133" pos:column="6"/></block></then></if>

    <return pos:line="135" pos:column="5">return <expr><name pos:line="135" pos:column="12">OK<pos:position pos:line="135" pos:column="14"/></name></expr>;<pos:position pos:line="135" pos:column="15"/></return>
}<pos:position pos:line="136" pos:column="2"/></block></function></unit>
