<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1114_httpd-2.4.16.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lua_read_body<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">request_rec<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">r<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier><modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">rbuf<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">apr_off_t<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">size<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="2" pos:column="9">apr_off_t<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">maxsize<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="27"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">rc<pos:position pos:line="4" pos:column="11"/></name> <init pos:line="4" pos:column="12">= <expr><name pos:line="4" pos:column="14">OK<pos:position pos:line="4" pos:column="16"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><operator pos:line="6" pos:column="9">(<pos:position pos:line="6" pos:column="10"/></operator><name pos:line="6" pos:column="10">rc<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">=<pos:position pos:line="6" pos:column="14"/></operator> <call><name pos:line="6" pos:column="15">ap_setup_client_block<pos:position pos:line="6" pos:column="36"/></name><argument_list pos:line="6" pos:column="36">(<argument><expr><name pos:line="6" pos:column="37">r<pos:position pos:line="6" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="40">REQUEST_CHUNKED_ERROR<pos:position pos:line="6" pos:column="61"/></name></expr></argument>)<pos:position pos:line="6" pos:column="62"/></argument_list></call><operator pos:line="6" pos:column="62">)<pos:position pos:line="6" pos:column="63"/></operator></expr>)<pos:position pos:line="6" pos:column="64"/></condition><then pos:line="6" pos:column="64"> <block pos:line="6" pos:column="65">{
        <return pos:line="7" pos:column="9">return <expr><operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">rc<pos:position pos:line="7" pos:column="19"/></name><operator pos:line="7" pos:column="19">)<pos:position pos:line="7" pos:column="20"/></operator></expr>;<pos:position pos:line="7" pos:column="21"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><call><name pos:line="9" pos:column="9">ap_should_client_block<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name pos:line="9" pos:column="32">r<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35"> <block pos:line="9" pos:column="36">{

        <comment type="block" pos:line="11" pos:column="9">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/</comment>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name></type>         <name><name pos:line="12" pos:column="22">argsbuffer<pos:position pos:line="12" pos:column="32"/></name><index pos:line="12" pos:column="32">[<expr><name pos:line="12" pos:column="33">HUGE_STRING_LEN<pos:position pos:line="12" pos:column="48"/></name></expr>]<pos:position pos:line="12" pos:column="49"/></index></name></decl>;<pos:position pos:line="12" pos:column="50"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">apr_off_t<pos:position pos:line="13" pos:column="18"/></name></type>    <name pos:line="13" pos:column="22">rsize<pos:position pos:line="13" pos:column="27"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="29">len_read<pos:position pos:line="13" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="39">rpos<pos:position pos:line="13" pos:column="43"/></name> <init pos:line="13" pos:column="44">= <expr><literal type="number" pos:line="13" pos:column="46">0<pos:position pos:line="13" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="48"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">apr_off_t<pos:position pos:line="14" pos:column="18"/></name></type> <name pos:line="14" pos:column="19">length<pos:position pos:line="14" pos:column="25"/></name> <init pos:line="14" pos:column="26">= <expr><name><name pos:line="14" pos:column="28">r<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">-&gt;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="31">remaining<pos:position pos:line="14" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="41"/></decl_stmt>
        <comment type="block" pos:line="15" pos:column="9">/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/</comment>

        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">maxsize<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">!=<pos:position pos:line="17" pos:column="23"/></operator> <literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal> <operator pos:line="17" pos:column="26">&amp;&amp;<pos:position pos:line="17" pos:column="36"/></operator> <name pos:line="17" pos:column="29">length<pos:position pos:line="17" pos:column="35"/></name> <operator pos:line="17" pos:column="36">&gt;<pos:position pos:line="17" pos:column="40"/></operator> <name pos:line="17" pos:column="38">maxsize<pos:position pos:line="17" pos:column="45"/></name></expr>)<pos:position pos:line="17" pos:column="46"/></condition><then pos:line="17" pos:column="46"> <block pos:line="17" pos:column="47">{
            <return pos:line="18" pos:column="13">return <expr><name pos:line="18" pos:column="20">APR_EINCOMPLETE<pos:position pos:line="18" pos:column="35"/></name></expr>;<pos:position pos:line="18" pos:column="36"/></return> <comment type="block" pos:line="18" pos:column="37">/* Only room for incomplete data chunk :( */</comment>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">rbuf<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <operator pos:line="20" pos:column="17">(<pos:position pos:line="20" pos:column="18"/></operator><specifier pos:line="20" pos:column="18">const<pos:position pos:line="20" pos:column="23"/></specifier> <name pos:line="20" pos:column="24">char<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">*<pos:position pos:line="20" pos:column="30"/></operator><operator pos:line="20" pos:column="30">)<pos:position pos:line="20" pos:column="31"/></operator> <call><name pos:line="20" pos:column="32">apr_pcalloc<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(<argument><expr><name><name pos:line="20" pos:column="44">r<pos:position pos:line="20" pos:column="45"/></name><operator pos:line="20" pos:column="45">-&gt;<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="47">pool<pos:position pos:line="20" pos:column="51"/></name></name></expr></argument>, <argument><expr><call pos:line="20" pos:column="53">(<name pos:line="20" pos:column="54">apr_size_t<pos:position pos:line="20" pos:column="64"/></name>) <argument_list pos:line="20" pos:column="66">(<argument><expr><name pos:line="20" pos:column="67">length<pos:position pos:line="20" pos:column="73"/></name> <operator pos:line="20" pos:column="74">+<pos:position pos:line="20" pos:column="75"/></operator> <literal type="number" pos:line="20" pos:column="76">1<pos:position pos:line="20" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="20" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">size<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <name pos:line="21" pos:column="17">length<pos:position pos:line="21" pos:column="23"/></name></expr>;<pos:position pos:line="21" pos:column="24"/></expr_stmt>
        <while pos:line="22" pos:column="9">while <condition pos:line="22" pos:column="15">(<expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">len_read<pos:position pos:line="22" pos:column="25"/></name> <operator pos:line="22" pos:column="26">=<pos:position pos:line="22" pos:column="27"/></operator> <call><name pos:line="22" pos:column="28">ap_get_client_block<pos:position pos:line="22" pos:column="47"/></name><argument_list pos:line="22" pos:column="47">(<argument><expr><name pos:line="22" pos:column="48">r<pos:position pos:line="22" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="51">argsbuffer<pos:position pos:line="22" pos:column="61"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="63">sizeof<argument_list pos:line="22" pos:column="69">(<argument><expr><name pos:line="22" pos:column="70">argsbuffer<pos:position pos:line="22" pos:column="80"/></name></expr></argument>)<pos:position pos:line="22" pos:column="81"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="82"/></argument_list></call><operator pos:line="22" pos:column="82">)<pos:position pos:line="22" pos:column="83"/></operator> <operator pos:line="22" pos:column="84">&gt;<pos:position pos:line="22" pos:column="88"/></operator> <literal type="number" pos:line="22" pos:column="86">0<pos:position pos:line="22" pos:column="87"/></literal></expr>)<pos:position pos:line="22" pos:column="88"/></condition> <block pos:line="22" pos:column="89">{
            <if pos:line="23" pos:column="13">if <condition pos:line="23" pos:column="16">(<expr><operator pos:line="23" pos:column="17">(<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">rpos<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">+<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">len_read<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">)<pos:position pos:line="23" pos:column="34"/></operator> <operator pos:line="23" pos:column="35">&gt;<pos:position pos:line="23" pos:column="39"/></operator> <name pos:line="23" pos:column="37">length<pos:position pos:line="23" pos:column="43"/></name></expr>)<pos:position pos:line="23" pos:column="44"/></condition><then pos:line="23" pos:column="44"> <block pos:line="23" pos:column="45">{
                <expr_stmt><expr><name pos:line="24" pos:column="17">rsize<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">=<pos:position pos:line="24" pos:column="24"/></operator> <name pos:line="24" pos:column="25">length<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">-<pos:position pos:line="24" pos:column="33"/></operator> <name pos:line="24" pos:column="34">rpos<pos:position pos:line="24" pos:column="38"/></name></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="25" pos:column="14"/></block></then>
            <else pos:line="26" pos:column="13">else <block pos:line="26" pos:column="18">{
                <expr_stmt><expr><name pos:line="27" pos:column="17">rsize<pos:position pos:line="27" pos:column="22"/></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">len_read<pos:position pos:line="27" pos:column="33"/></name></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="28" pos:column="14"/></block></else></if>

            <expr_stmt><expr><call><name pos:line="30" pos:column="13">memcpy<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><operator pos:line="30" pos:column="20">(<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="21">char<pos:position pos:line="30" pos:column="25"/></name> <operator pos:line="30" pos:column="26">*<pos:position pos:line="30" pos:column="27"/></operator><operator pos:line="30" pos:column="27">)<pos:position pos:line="30" pos:column="28"/></operator> <operator pos:line="30" pos:column="29">*<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="30">rbuf<pos:position pos:line="30" pos:column="34"/></name> <operator pos:line="30" pos:column="35">+<pos:position pos:line="30" pos:column="36"/></operator> <name pos:line="30" pos:column="37">rpos<pos:position pos:line="30" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="43">argsbuffer<pos:position pos:line="30" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="55">(<pos:position pos:line="30" pos:column="56"/></operator><name pos:line="30" pos:column="56">size_t<pos:position pos:line="30" pos:column="62"/></name><operator pos:line="30" pos:column="62">)<pos:position pos:line="30" pos:column="63"/></operator> <name pos:line="30" pos:column="64">rsize<pos:position pos:line="30" pos:column="69"/></name></expr></argument>)<pos:position pos:line="30" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><name pos:line="31" pos:column="13">rpos<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">+=<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">rsize<pos:position pos:line="31" pos:column="26"/></name></expr>;<pos:position pos:line="31" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></while>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">(<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="13">rc<pos:position pos:line="35" pos:column="15"/></name><operator pos:line="35" pos:column="15">)<pos:position pos:line="35" pos:column="16"/></operator></expr>;<pos:position pos:line="35" pos:column="17"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
