<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3176_httpd-2.2.22.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">XML_Error<pos:position pos:line="1" pos:column="22"/></name></name> <name pos:line="1" pos:column="23">PTRCALL<pos:position pos:line="1" pos:column="30"/></name></type>
<name pos:line="2" pos:column="1">epilogProcessor<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><name pos:line="2" pos:column="17">XML_Parser<pos:position pos:line="2" pos:column="27"/></name></type> <name pos:line="2" pos:column="28">parser<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">char<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">s<pos:position pos:line="3" pos:column="30"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="4" pos:column="17">const<pos:position pos:line="4" pos:column="22"/></specifier> <name pos:line="4" pos:column="23">char<pos:position pos:line="4" pos:column="27"/></name> <modifier pos:line="4" pos:column="28">*<pos:position pos:line="4" pos:column="29"/></modifier></type><name pos:line="4" pos:column="29">end<pos:position pos:line="4" pos:column="32"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="5" pos:column="17">const<pos:position pos:line="5" pos:column="22"/></specifier> <name pos:line="5" pos:column="23">char<pos:position pos:line="5" pos:column="27"/></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier><modifier pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></modifier></type><name pos:line="5" pos:column="30">nextPtr<pos:position pos:line="5" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="38"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <expr_stmt><expr><name pos:line="7" pos:column="3">processor<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <name pos:line="7" pos:column="15">epilogProcessor<pos:position pos:line="7" pos:column="30"/></name></expr>;<pos:position pos:line="7" pos:column="31"/></expr_stmt>
  <expr_stmt><expr><name pos:line="8" pos:column="3">eventPtr<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <name pos:line="8" pos:column="14">s<pos:position pos:line="8" pos:column="15"/></name></expr>;<pos:position pos:line="8" pos:column="16"/></expr_stmt>
  <for pos:line="9" pos:column="3">for <control pos:line="9" pos:column="7">(<init pos:line="9" pos:column="8">;<pos:position pos:line="9" pos:column="9"/></init><condition pos:line="9" pos:column="9">;<pos:position pos:line="9" pos:column="10"/></condition><incr/>)<pos:position pos:line="9" pos:column="11"/></control> <block pos:line="9" pos:column="12">{
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">next<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><name pos:line="10" pos:column="24">NULL<pos:position pos:line="10" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">tok<pos:position pos:line="11" pos:column="12"/></name> <init pos:line="11" pos:column="13">= <expr><call><name pos:line="11" pos:column="15">XmlPrologTok<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name pos:line="11" pos:column="28">encoding<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">s<pos:position pos:line="11" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="41">end<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="46">&amp;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="47">next<pos:position pos:line="11" pos:column="51"/></name></expr></argument>)<pos:position pos:line="11" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">eventEndPtr<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">next<pos:position pos:line="12" pos:column="23"/></name></expr>;<pos:position pos:line="12" pos:column="24"/></expr_stmt>
    <switch pos:line="13" pos:column="5">switch <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">tok<pos:position pos:line="13" pos:column="16"/></name></expr>)<pos:position pos:line="13" pos:column="17"/></condition> <block pos:line="13" pos:column="18">{
    <comment type="block" pos:line="14" pos:column="5">/* report partial linebreak - it might be the last token */</comment>
    <case pos:line="15" pos:column="5">case <expr><operator pos:line="15" pos:column="10">-<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">XML_TOK_PROLOG_S<pos:position pos:line="15" pos:column="27"/></name></expr>:<pos:position pos:line="15" pos:column="28"/></case>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><name pos:line="16" pos:column="11">defaultHandler<pos:position pos:line="16" pos:column="25"/></name></expr>)<pos:position pos:line="16" pos:column="26"/></condition><then pos:line="16" pos:column="26"> <block pos:line="16" pos:column="27">{
        <expr_stmt><expr><name pos:line="17" pos:column="9">eventEndPtr<pos:position pos:line="17" pos:column="20"/></name> <operator pos:line="17" pos:column="21">=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">next<pos:position pos:line="17" pos:column="27"/></name></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">reportDefault<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">parser<pos:position pos:line="18" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="31">encoding<pos:position pos:line="18" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="41">s<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="44">next<pos:position pos:line="18" pos:column="48"/></name></expr></argument>)<pos:position pos:line="18" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="50"/></expr_stmt>
      }<pos:position pos:line="19" pos:column="8"/></block></then></if>
      <if pos:line="20" pos:column="7">if <condition pos:line="20" pos:column="10">(<expr><name pos:line="20" pos:column="11">nextPtr<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">nextPtr<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <name pos:line="21" pos:column="20">next<pos:position pos:line="21" pos:column="24"/></name></expr>;<pos:position pos:line="21" pos:column="25"/></expr_stmt></block></then></if>
      <return pos:line="22" pos:column="7">return <expr><name pos:line="22" pos:column="14">XML_ERROR_NONE<pos:position pos:line="22" pos:column="28"/></name></expr>;<pos:position pos:line="22" pos:column="29"/></return>
    <case pos:line="23" pos:column="5">case <expr><name pos:line="23" pos:column="10">XML_TOK_NONE<pos:position pos:line="23" pos:column="22"/></name></expr>:<pos:position pos:line="23" pos:column="23"/></case>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><name pos:line="24" pos:column="11">nextPtr<pos:position pos:line="24" pos:column="18"/></name></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="25" pos:column="9">*<pos:position pos:line="25" pos:column="10"/></operator><name pos:line="25" pos:column="10">nextPtr<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <name pos:line="25" pos:column="20">s<pos:position pos:line="25" pos:column="21"/></name></expr>;<pos:position pos:line="25" pos:column="22"/></expr_stmt></block></then></if>
      <return pos:line="26" pos:column="7">return <expr><name pos:line="26" pos:column="14">XML_ERROR_NONE<pos:position pos:line="26" pos:column="28"/></name></expr>;<pos:position pos:line="26" pos:column="29"/></return>
    <case pos:line="27" pos:column="5">case <expr><name pos:line="27" pos:column="10">XML_TOK_PROLOG_S<pos:position pos:line="27" pos:column="26"/></name></expr>:<pos:position pos:line="27" pos:column="27"/></case>
      <if pos:line="28" pos:column="7">if <condition pos:line="28" pos:column="10">(<expr><name pos:line="28" pos:column="11">defaultHandler<pos:position pos:line="28" pos:column="25"/></name></expr>)<pos:position pos:line="28" pos:column="26"/></condition><then pos:line="28" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="9">reportDefault<pos:position pos:line="29" pos:column="22"/></name><argument_list pos:line="29" pos:column="22">(<argument><expr><name pos:line="29" pos:column="23">parser<pos:position pos:line="29" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="31">encoding<pos:position pos:line="29" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="41">s<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="44">next<pos:position pos:line="29" pos:column="48"/></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt></block></then></if>
      <break pos:line="30" pos:column="7">break;<pos:position pos:line="30" pos:column="13"/></break>
    <case pos:line="31" pos:column="5">case <expr><name pos:line="31" pos:column="10">XML_TOK_PI<pos:position pos:line="31" pos:column="20"/></name></expr>:<pos:position pos:line="31" pos:column="21"/></case>
      <if pos:line="32" pos:column="7">if <condition pos:line="32" pos:column="10">(<expr><operator pos:line="32" pos:column="11">!<pos:position pos:line="32" pos:column="12"/></operator><call><name pos:line="32" pos:column="12">reportProcessingInstruction<pos:position pos:line="32" pos:column="39"/></name><argument_list pos:line="32" pos:column="39">(<argument><expr><name pos:line="32" pos:column="40">parser<pos:position pos:line="32" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="48">encoding<pos:position pos:line="32" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="58">s<pos:position pos:line="32" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="61">next<pos:position pos:line="32" pos:column="65"/></name></expr></argument>)<pos:position pos:line="32" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="67"/></condition><then pos:line="32" pos:column="67">
        <block type="pseudo"><return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">XML_ERROR_NO_MEMORY<pos:position pos:line="33" pos:column="35"/></name></expr>;<pos:position pos:line="33" pos:column="36"/></return></block></then></if>
      <break pos:line="34" pos:column="7">break;<pos:position pos:line="34" pos:column="13"/></break>
    <case pos:line="35" pos:column="5">case <expr><name pos:line="35" pos:column="10">XML_TOK_COMMENT<pos:position pos:line="35" pos:column="25"/></name></expr>:<pos:position pos:line="35" pos:column="26"/></case>
      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><operator pos:line="36" pos:column="11">!<pos:position pos:line="36" pos:column="12"/></operator><call><name pos:line="36" pos:column="12">reportComment<pos:position pos:line="36" pos:column="25"/></name><argument_list pos:line="36" pos:column="25">(<argument><expr><name pos:line="36" pos:column="26">parser<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="34">encoding<pos:position pos:line="36" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="44">s<pos:position pos:line="36" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="47">next<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="53"/></condition><then pos:line="36" pos:column="53">
        <block type="pseudo"><return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">XML_ERROR_NO_MEMORY<pos:position pos:line="37" pos:column="35"/></name></expr>;<pos:position pos:line="37" pos:column="36"/></return></block></then></if>
      <break pos:line="38" pos:column="7">break;<pos:position pos:line="38" pos:column="13"/></break>
    <case pos:line="39" pos:column="5">case <expr><name pos:line="39" pos:column="10">XML_TOK_INVALID<pos:position pos:line="39" pos:column="25"/></name></expr>:<pos:position pos:line="39" pos:column="26"/></case>
      <expr_stmt><expr><name pos:line="40" pos:column="7">eventPtr<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">=<pos:position pos:line="40" pos:column="17"/></operator> <name pos:line="40" pos:column="18">next<pos:position pos:line="40" pos:column="22"/></name></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
      <return pos:line="41" pos:column="7">return <expr><name pos:line="41" pos:column="14">XML_ERROR_INVALID_TOKEN<pos:position pos:line="41" pos:column="37"/></name></expr>;<pos:position pos:line="41" pos:column="38"/></return>
    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">XML_TOK_PARTIAL<pos:position pos:line="42" pos:column="25"/></name></expr>:<pos:position pos:line="42" pos:column="26"/></case>
      <if pos:line="43" pos:column="7">if <condition pos:line="43" pos:column="10">(<expr><name pos:line="43" pos:column="11">nextPtr<pos:position pos:line="43" pos:column="18"/></name></expr>)<pos:position pos:line="43" pos:column="19"/></condition><then pos:line="43" pos:column="19"> <block pos:line="43" pos:column="20">{
        <expr_stmt><expr><operator pos:line="44" pos:column="9">*<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">nextPtr<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <name pos:line="44" pos:column="20">s<pos:position pos:line="44" pos:column="21"/></name></expr>;<pos:position pos:line="44" pos:column="22"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">XML_ERROR_NONE<pos:position pos:line="45" pos:column="30"/></name></expr>;<pos:position pos:line="45" pos:column="31"/></return>
      }<pos:position pos:line="46" pos:column="8"/></block></then></if>
      <return pos:line="47" pos:column="7">return <expr><name pos:line="47" pos:column="14">XML_ERROR_UNCLOSED_TOKEN<pos:position pos:line="47" pos:column="38"/></name></expr>;<pos:position pos:line="47" pos:column="39"/></return>
    <case pos:line="48" pos:column="5">case <expr><name pos:line="48" pos:column="10">XML_TOK_PARTIAL_CHAR<pos:position pos:line="48" pos:column="30"/></name></expr>:<pos:position pos:line="48" pos:column="31"/></case>
      <if pos:line="49" pos:column="7">if <condition pos:line="49" pos:column="10">(<expr><name pos:line="49" pos:column="11">nextPtr<pos:position pos:line="49" pos:column="18"/></name></expr>)<pos:position pos:line="49" pos:column="19"/></condition><then pos:line="49" pos:column="19"> <block pos:line="49" pos:column="20">{
        <expr_stmt><expr><operator pos:line="50" pos:column="9">*<pos:position pos:line="50" pos:column="10"/></operator><name pos:line="50" pos:column="10">nextPtr<pos:position pos:line="50" pos:column="17"/></name> <operator pos:line="50" pos:column="18">=<pos:position pos:line="50" pos:column="19"/></operator> <name pos:line="50" pos:column="20">s<pos:position pos:line="50" pos:column="21"/></name></expr>;<pos:position pos:line="50" pos:column="22"/></expr_stmt>
        <return pos:line="51" pos:column="9">return <expr><name pos:line="51" pos:column="16">XML_ERROR_NONE<pos:position pos:line="51" pos:column="30"/></name></expr>;<pos:position pos:line="51" pos:column="31"/></return>
      }<pos:position pos:line="52" pos:column="8"/></block></then></if>
      <return pos:line="53" pos:column="7">return <expr><name pos:line="53" pos:column="14">XML_ERROR_PARTIAL_CHAR<pos:position pos:line="53" pos:column="36"/></name></expr>;<pos:position pos:line="53" pos:column="37"/></return>
    <default pos:line="54" pos:column="5">default:<pos:position pos:line="54" pos:column="13"/></default>
      <return pos:line="55" pos:column="7">return <expr><name pos:line="55" pos:column="14">XML_ERROR_JUNK_AFTER_DOC_ELEMENT<pos:position pos:line="55" pos:column="46"/></name></expr>;<pos:position pos:line="55" pos:column="47"/></return>
    }<pos:position pos:line="56" pos:column="6"/></block></switch>
    <expr_stmt><expr><name pos:line="57" pos:column="5">eventPtr<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <name pos:line="57" pos:column="16">s<pos:position pos:line="57" pos:column="17"/></name> <operator pos:line="57" pos:column="18">=<pos:position pos:line="57" pos:column="19"/></operator> <name pos:line="57" pos:column="20">next<pos:position pos:line="57" pos:column="24"/></name></expr>;<pos:position pos:line="57" pos:column="25"/></expr_stmt>
  }<pos:position pos:line="58" pos:column="4"/></block></for>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
