<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3199_httpd-2.2.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">pipeblock<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">apr_file_t<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">thepipe<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><operator pos:line="3" pos:column="5">!<pos:position pos:line="3" pos:column="6"/></operator><name pos:line="3" pos:column="6">BEOS_BLOCKING<pos:position pos:line="3" pos:column="19"/></name></expr></cpp:if>
      <decl_stmt><decl><type><name pos:line="4" pos:column="7">int<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">fd_flags<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>

      <expr_stmt><expr><name pos:line="6" pos:column="7">fd_flags<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">=<pos:position pos:line="6" pos:column="17"/></operator> <call><name pos:line="6" pos:column="18">fcntl<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><name><name pos:line="6" pos:column="24">thepipe<pos:position pos:line="6" pos:column="31"/></name><operator pos:line="6" pos:column="31">-&gt;<pos:position pos:line="6" pos:column="36"/></operator><name pos:line="6" pos:column="33">filedes<pos:position pos:line="6" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="42">F_GETFL<pos:position pos:line="6" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="51">0<pos:position pos:line="6" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="54"/></expr_stmt>
<cpp:if pos:line="7" pos:column="1">#  <cpp:directive pos:line="7" pos:column="4">if<pos:position pos:line="7" pos:column="6"/></cpp:directive> <expr><call><name pos:line="7" pos:column="7">defined<pos:position pos:line="7" pos:column="14"/></name><argument_list pos:line="7" pos:column="14">(<argument><expr><name pos:line="7" pos:column="15">O_NONBLOCK<pos:position pos:line="7" pos:column="25"/></name></expr></argument>)<pos:position pos:line="7" pos:column="26"/></argument_list></call></expr></cpp:if>
      <expr_stmt><expr><name pos:line="8" pos:column="7">fd_flags<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">&amp;=<pos:position pos:line="8" pos:column="22"/></operator> <operator pos:line="8" pos:column="19">~<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">O_NONBLOCK<pos:position pos:line="8" pos:column="30"/></name></expr>;<pos:position pos:line="8" pos:column="31"/></expr_stmt>
<cpp:elif pos:line="9" pos:column="1">#  <cpp:directive pos:line="9" pos:column="4">elif<pos:position pos:line="9" pos:column="8"/></cpp:directive> <expr><call><name pos:line="9" pos:column="9">defined<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">O_NDELAY<pos:position pos:line="9" pos:column="25"/></name></expr></argument>)<pos:position pos:line="9" pos:column="26"/></argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name pos:line="10" pos:column="7">fd_flags<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">&amp;=<pos:position pos:line="10" pos:column="22"/></operator> <operator pos:line="10" pos:column="19">~<pos:position pos:line="10" pos:column="20"/></operator><name pos:line="10" pos:column="20">O_NDELAY<pos:position pos:line="10" pos:column="28"/></name></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt>
<cpp:elif pos:line="11" pos:column="1">#  <cpp:directive pos:line="11" pos:column="4">elif<pos:position pos:line="11" pos:column="8"/></cpp:directive> <expr><call><name pos:line="11" pos:column="9">defined<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">(<argument><expr><name pos:line="11" pos:column="17">O_FNDELAY<pos:position pos:line="11" pos:column="26"/></name></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr></cpp:elif>
      <expr_stmt><expr><name pos:line="12" pos:column="7">fd_flags<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">&amp;=<pos:position pos:line="12" pos:column="22"/></operator> <operator pos:line="12" pos:column="19">~<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="20">O_FNDELAY<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
<cpp:else pos:line="13" pos:column="1">#  <cpp:directive pos:line="13" pos:column="4">else<pos:position pos:line="13" pos:column="8"/></cpp:directive></cpp:else> 
      <comment type="block" pos:line="14" pos:column="7">/* XXXX: this breaks things, but an alternative isn't obvious...*/</comment>
      <return pos:line="15" pos:column="7">return <expr><name pos:line="15" pos:column="14">APR_ENOTIMPL<pos:position pos:line="15" pos:column="26"/></name></expr>;<pos:position pos:line="15" pos:column="27"/></return>
<cpp:endif pos:line="16" pos:column="1">#  <cpp:directive pos:line="16" pos:column="4">endif<pos:position pos:line="16" pos:column="9"/></cpp:directive></cpp:endif>
      <if pos:line="17" pos:column="7">if <condition pos:line="17" pos:column="10">(<expr><call><name pos:line="17" pos:column="11">fcntl<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><name><name pos:line="17" pos:column="17">thepipe<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">-&gt;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="26">filedes<pos:position pos:line="17" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="35">F_SETFL<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="44">fd_flags<pos:position pos:line="17" pos:column="52"/></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call> <operator pos:line="17" pos:column="54">==<pos:position pos:line="17" pos:column="56"/></operator> <operator pos:line="17" pos:column="57">-<pos:position pos:line="17" pos:column="58"/></operator><literal type="number" pos:line="17" pos:column="58">1<pos:position pos:line="17" pos:column="59"/></literal></expr>)<pos:position pos:line="17" pos:column="60"/></condition><then pos:line="17" pos:column="60"> <block pos:line="17" pos:column="61">{
          <return pos:line="18" pos:column="11">return <expr><name pos:line="18" pos:column="18">errno<pos:position pos:line="18" pos:column="23"/></name></expr>;<pos:position pos:line="18" pos:column="24"/></return>
      }<pos:position pos:line="19" pos:column="8"/></block></then></if>
<cpp:else pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">else<pos:position pos:line="20" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="20" pos:column="7">/* BEOS_BLOCKING */</comment>

<cpp:if pos:line="22" pos:column="1">#  <cpp:directive pos:line="22" pos:column="4">if<pos:position pos:line="22" pos:column="6"/></cpp:directive> <expr><name pos:line="22" pos:column="7">BEOS_BONE<pos:position pos:line="22" pos:column="16"/></name></expr></cpp:if> <comment type="block" pos:line="22" pos:column="17">/* This only works on BONE 0-6 */</comment>
      <decl_stmt><decl><type><name pos:line="23" pos:column="7">int<pos:position pos:line="23" pos:column="10"/></name></type> <name pos:line="23" pos:column="11">on<pos:position pos:line="23" pos:column="13"/></name> <init pos:line="23" pos:column="14">= <expr><literal type="number" pos:line="23" pos:column="16">0<pos:position pos:line="23" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="18"/></decl_stmt>
      <if pos:line="24" pos:column="7">if <condition pos:line="24" pos:column="10">(<expr><call><name pos:line="24" pos:column="11">ioctl<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><name><name pos:line="24" pos:column="17">thepipe<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">-&gt;<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="26">filedes<pos:position pos:line="24" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="35">FIONBIO<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="44">&amp;<pos:position pos:line="24" pos:column="49"/></operator><name pos:line="24" pos:column="45">on<pos:position pos:line="24" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="49">sizeof<argument_list pos:line="24" pos:column="55">(<argument><expr><name pos:line="24" pos:column="56">on<pos:position pos:line="24" pos:column="58"/></name></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call> <operator pos:line="24" pos:column="61">&lt;<pos:position pos:line="24" pos:column="65"/></operator> <literal type="number" pos:line="24" pos:column="63">0<pos:position pos:line="24" pos:column="64"/></literal></expr>)<pos:position pos:line="24" pos:column="65"/></condition><then pos:line="24" pos:column="65"> <block pos:line="24" pos:column="66">{
          <return pos:line="25" pos:column="11">return <expr><name pos:line="25" pos:column="18">errno<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></return>
      }<pos:position pos:line="26" pos:column="8"/></block></then></if>
<cpp:else pos:line="27" pos:column="1">#  <cpp:directive pos:line="27" pos:column="4">else<pos:position pos:line="27" pos:column="8"/></cpp:directive></cpp:else> <comment type="block" pos:line="27" pos:column="9">/* "classic" BeOS doesn't support this at all */</comment>
      <return pos:line="28" pos:column="7">return <expr><name pos:line="28" pos:column="14">APR_ENOTIMPL<pos:position pos:line="28" pos:column="26"/></name></expr>;<pos:position pos:line="28" pos:column="27"/></return>
<cpp:endif pos:line="29" pos:column="1">#  <cpp:directive pos:line="29" pos:column="4">endif<pos:position pos:line="29" pos:column="9"/></cpp:directive></cpp:endif> 
 
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="31" pos:column="8">/* !BEOS_BLOCKING */</comment>

    <expr_stmt><expr><name><name pos:line="33" pos:column="5">thepipe<pos:position pos:line="33" pos:column="12"/></name><operator pos:line="33" pos:column="12">-&gt;<pos:position pos:line="33" pos:column="17"/></operator><name pos:line="33" pos:column="14">blocking<pos:position pos:line="33" pos:column="22"/></name></name> <operator pos:line="33" pos:column="23">=<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="25">BLK_ON<pos:position pos:line="33" pos:column="31"/></name></expr>;<pos:position pos:line="33" pos:column="32"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">APR_SUCCESS<pos:position pos:line="34" pos:column="23"/></name></expr>;<pos:position pos:line="34" pos:column="24"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
