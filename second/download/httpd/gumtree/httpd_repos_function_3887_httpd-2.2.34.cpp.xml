<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3887_httpd-2.2.34.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">asio_pollset_remove<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">apr_pollset_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">pollset<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                                        <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">apr_pollfd_t<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">descriptor<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DBG_BUFF<pos:position pos:line="4" pos:column="13"/></name>
    <name pos:line="5" pos:column="5">asio_elem_t<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">elem<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">APR_SUCCESS<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_pollset_private_t<pos:position pos:line="7" pos:column="26"/></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">priv<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><name><name pos:line="7" pos:column="35">pollset<pos:position pos:line="7" pos:column="42"/></name><operator pos:line="7" pos:column="42">-&gt;<pos:position pos:line="7" pos:column="47"/></operator><name pos:line="7" pos:column="44">p<pos:position pos:line="7" pos:column="45"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="46"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">aiocb<pos:position pos:line="8" pos:column="17"/></name></name></type> <name pos:line="8" pos:column="18">cancel_a<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>   <comment type="block" pos:line="8" pos:column="30">/* AIO_CANCEL is synchronous, so autodata works fine */</comment>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">fd<pos:position pos:line="10" pos:column="11"/></name></decl>;<pos:position pos:line="10" pos:column="12"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="12" pos:column="5">DBG<pos:position pos:line="12" pos:column="8"/></name><argument_list pos:line="12" pos:column="8">(<argument><expr><literal type="number" pos:line="12" pos:column="9">2<pos:position pos:line="12" pos:column="10"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="12">"entered\n"<pos:position pos:line="12" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="25"/></expr_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><operator pos:line="14" pos:column="10">(<pos:position pos:line="14" pos:column="11"/></operator><name><name pos:line="14" pos:column="11">pollset<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">flags<pos:position pos:line="14" pos:column="25"/></name></name> <operator pos:line="14" pos:column="26">&amp;<pos:position pos:line="14" pos:column="31"/></operator> <name pos:line="14" pos:column="28">APR_POLLSET_THREADSAFE<pos:position pos:line="14" pos:column="50"/></name><operator pos:line="14" pos:column="50">)<pos:position pos:line="14" pos:column="51"/></operator></expr>)<pos:position pos:line="14" pos:column="52"/></condition><then pos:line="14" pos:column="52"> <block pos:line="14" pos:column="53">{
        <return pos:line="15" pos:column="9">return <expr><call><name pos:line="15" pos:column="16">posix_remove<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">pollset<pos:position pos:line="15" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="38">descriptor<pos:position pos:line="15" pos:column="48"/></name></expr></argument>)<pos:position pos:line="15" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="50"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">pollset_lock_rings<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">()<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>

<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">DEBUG<pos:position pos:line="20" pos:column="10"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">assert<pos:position pos:line="21" pos:column="11"/></name><argument_list pos:line="21" pos:column="11">(<argument><expr><name><name pos:line="21" pos:column="12">descriptor<pos:position pos:line="21" pos:column="22"/></name><operator pos:line="21" pos:column="22">-&gt;<pos:position pos:line="21" pos:column="27"/></operator><name pos:line="21" pos:column="24">desc_type<pos:position pos:line="21" pos:column="33"/></name></name> <operator pos:line="21" pos:column="34">==<pos:position pos:line="21" pos:column="36"/></operator> <name pos:line="21" pos:column="37">APR_POLL_SOCKET<pos:position pos:line="21" pos:column="52"/></name></expr></argument>)<pos:position pos:line="21" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="23" pos:column="5">/* zOS 1.12 doesn't support files for async i/o */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">fd<pos:position pos:line="24" pos:column="7"/></name> <operator pos:line="24" pos:column="8">=<pos:position pos:line="24" pos:column="9"/></operator> <name><name pos:line="24" pos:column="10">descriptor<pos:position pos:line="24" pos:column="20"/></name><operator pos:line="24" pos:column="20">-&gt;<pos:position pos:line="24" pos:column="25"/></operator><name pos:line="24" pos:column="22">desc<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">.<pos:position pos:line="24" pos:column="27"/></operator><name pos:line="24" pos:column="27">s<pos:position pos:line="24" pos:column="28"/></name><operator pos:line="24" pos:column="28">-&gt;<pos:position pos:line="24" pos:column="33"/></operator><name pos:line="24" pos:column="30">socketdes<pos:position pos:line="24" pos:column="39"/></name></name></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>

    <expr_stmt><expr><name pos:line="26" pos:column="5">elem<pos:position pos:line="26" pos:column="9"/></name> <operator pos:line="26" pos:column="10">=<pos:position pos:line="26" pos:column="11"/></operator> <call><name pos:line="26" pos:column="12">apr_hash_get<pos:position pos:line="26" pos:column="24"/></name><argument_list pos:line="26" pos:column="24">(<argument><expr><name><name pos:line="26" pos:column="25">priv<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">-&gt;<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="31">elems<pos:position pos:line="26" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="38">&amp;<pos:position pos:line="26" pos:column="43"/></operator><operator pos:line="26" pos:column="39">(<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="40">fd<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">)<pos:position pos:line="26" pos:column="43"/></operator></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="45">sizeof<argument_list pos:line="26" pos:column="51">(<argument><expr><name pos:line="26" pos:column="52">int<pos:position pos:line="26" pos:column="55"/></name></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="58"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">elem<pos:position pos:line="27" pos:column="13"/></name> <operator pos:line="27" pos:column="14">==<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">NULL<pos:position pos:line="27" pos:column="21"/></name></expr>)<pos:position pos:line="27" pos:column="22"/></condition><then pos:line="27" pos:column="22"> <block pos:line="27" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">DBG1<pos:position pos:line="28" pos:column="13"/></name><argument_list pos:line="28" pos:column="13">(<argument><expr><literal type="number" pos:line="28" pos:column="14">1<pos:position pos:line="28" pos:column="15"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="17">"couldn't find fd %d\n"<pos:position pos:line="28" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="42">fd<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name pos:line="29" pos:column="9">rv<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <name pos:line="29" pos:column="14">APR_NOTFOUND<pos:position pos:line="29" pos:column="26"/></name></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then> <else pos:line="30" pos:column="7">else <block pos:line="30" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">DBG1<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><literal type="number" pos:line="31" pos:column="14">5<pos:position pos:line="31" pos:column="15"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="17">"hash found fd %d\n"<pos:position pos:line="31" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="39">fd<pos:position pos:line="31" pos:column="41"/></name></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
        <comment type="block" pos:line="32" pos:column="9">/* delete this fd from the hash */</comment>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">apr_hash_set<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name><name pos:line="33" pos:column="22">priv<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">-&gt;<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="28">elems<pos:position pos:line="33" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="35">&amp;<pos:position pos:line="33" pos:column="40"/></operator><operator pos:line="33" pos:column="36">(<pos:position pos:line="33" pos:column="37"/></operator><name pos:line="33" pos:column="37">fd<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">)<pos:position pos:line="33" pos:column="40"/></operator></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="42">sizeof<argument_list pos:line="33" pos:column="48">(<argument><expr><name pos:line="33" pos:column="49">int<pos:position pos:line="33" pos:column="52"/></name></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="33" pos:column="55">NULL<pos:position pos:line="33" pos:column="59"/></name></expr></argument>)<pos:position pos:line="33" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="61"/></expr_stmt>

        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name><name pos:line="35" pos:column="13">elem<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">state<pos:position pos:line="35" pos:column="24"/></name></name> <operator pos:line="35" pos:column="25">==<pos:position pos:line="35" pos:column="27"/></operator> <name pos:line="35" pos:column="28">ASIO_INIT<pos:position pos:line="35" pos:column="37"/></name></expr>)<pos:position pos:line="35" pos:column="38"/></condition><then pos:line="35" pos:column="38"> <block pos:line="35" pos:column="39">{
            <comment type="block" pos:line="36" pos:column="13">/* asyncio call to cancel */</comment>
            <expr_stmt><expr><name><name pos:line="37" pos:column="13">cancel_a<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">.<pos:position pos:line="37" pos:column="22"/></operator><name pos:line="37" pos:column="22">aio_cmd<pos:position pos:line="37" pos:column="29"/></name></name> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <name pos:line="37" pos:column="32">AIO_CANCEL<pos:position pos:line="37" pos:column="42"/></name></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="38" pos:column="13">cancel_a<pos:position pos:line="38" pos:column="21"/></name><operator pos:line="38" pos:column="21">.<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="22">aio_buf<pos:position pos:line="38" pos:column="29"/></name></name> <operator pos:line="38" pos:column="30">=<pos:position pos:line="38" pos:column="31"/></operator> <operator pos:line="38" pos:column="32">&amp;<pos:position pos:line="38" pos:column="37"/></operator><name><name pos:line="38" pos:column="33">elem<pos:position pos:line="38" pos:column="37"/></name><operator pos:line="38" pos:column="37">-&gt;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="39">a<pos:position pos:line="38" pos:column="40"/></name></name></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>   <comment type="block" pos:line="38" pos:column="44">/* point to original aiocb */</comment>

            <expr_stmt><expr><name><name pos:line="40" pos:column="13">cancel_a<pos:position pos:line="40" pos:column="21"/></name><operator pos:line="40" pos:column="21">.<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="22">aio_cflags<pos:position pos:line="40" pos:column="32"/></name></name>  <operator pos:line="40" pos:column="34">=<pos:position pos:line="40" pos:column="35"/></operator> <literal type="number" pos:line="40" pos:column="36">0<pos:position pos:line="40" pos:column="37"/></literal></expr>;<pos:position pos:line="40" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="41" pos:column="13">cancel_a<pos:position pos:line="41" pos:column="21"/></name><operator pos:line="41" pos:column="21">.<pos:position pos:line="41" pos:column="22"/></operator><name pos:line="41" pos:column="22">aio_cflags2<pos:position pos:line="41" pos:column="33"/></name></name> <operator pos:line="41" pos:column="34">=<pos:position pos:line="41" pos:column="35"/></operator> <literal type="number" pos:line="41" pos:column="36">0<pos:position pos:line="41" pos:column="37"/></literal></expr>;<pos:position pos:line="41" pos:column="38"/></expr_stmt>

            <comment type="block" pos:line="43" pos:column="13">/* we want the original aiocb to show up on the pollset message queue 
             * before recycling its memory to eliminate race conditions
             */</comment>

            <expr_stmt><expr><name pos:line="47" pos:column="13">rv<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <call><name pos:line="47" pos:column="18">asyncio<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><operator pos:line="47" pos:column="26">&amp;<pos:position pos:line="47" pos:column="31"/></operator><name pos:line="47" pos:column="27">cancel_a<pos:position pos:line="47" pos:column="35"/></name></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">DBG1<pos:position pos:line="48" pos:column="17"/></name><argument_list pos:line="48" pos:column="17">(<argument><expr><literal type="number" pos:line="48" pos:column="18">4<pos:position pos:line="48" pos:column="19"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="21">"asyncio returned %d\n"<pos:position pos:line="48" pos:column="44"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="46">rv<pos:position pos:line="48" pos:column="48"/></name></expr></argument>)<pos:position pos:line="48" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="50"/></expr_stmt>

<cpp:if pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">if<pos:position pos:line="50" pos:column="4"/></cpp:directive> <expr><name pos:line="50" pos:column="5">DEBUG<pos:position pos:line="50" pos:column="10"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">assert<pos:position pos:line="51" pos:column="19"/></name><argument_list pos:line="51" pos:column="19">(<argument><expr><name pos:line="51" pos:column="20">rv<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">==<pos:position pos:line="51" pos:column="25"/></operator> <literal type="number" pos:line="51" pos:column="26">1<pos:position pos:line="51" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">elem<pos:position pos:line="54" pos:column="13"/></name><operator pos:line="54" pos:column="13">-&gt;<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="15">state<pos:position pos:line="54" pos:column="20"/></name></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <name pos:line="54" pos:column="23">ASIO_REMOVED<pos:position pos:line="54" pos:column="35"/></name></expr>;<pos:position pos:line="54" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name pos:line="55" pos:column="9">rv<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <name pos:line="55" pos:column="14">APR_SUCCESS<pos:position pos:line="55" pos:column="25"/></name></expr>;<pos:position pos:line="55" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">DBG1<pos:position pos:line="58" pos:column="9"/></name><argument_list pos:line="58" pos:column="9">(<argument><expr><literal type="number" pos:line="58" pos:column="10">2<pos:position pos:line="58" pos:column="11"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="58" pos:column="13">"exiting, rv: %d\n"<pos:position pos:line="58" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">rv<pos:position pos:line="58" pos:column="36"/></name></expr></argument>)<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="60" pos:column="5">pollset_unlock_rings<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">()<pos:position pos:line="60" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>

    <return pos:line="62" pos:column="5">return <expr><name pos:line="62" pos:column="12">rv<pos:position pos:line="62" pos:column="14"/></name></expr>;<pos:position pos:line="62" pos:column="15"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
