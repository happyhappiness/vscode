<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1706_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">bs2_ForkType<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">os_forktype<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">void<pos:position pos:line="1" pos:column="37"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">utsname<pos:position pos:line="3" pos:column="19"/></name></name></type> <name pos:line="3" pos:column="20">os_version<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>

    <comment type="block" pos:line="5" pos:column="5">/* have we checked the OS version before? If yes return the previous
     * result - the OS release isn't going to change suddenly!
     */</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">forktype<pos:position pos:line="8" pos:column="17"/></name> <operator pos:line="8" pos:column="18">!=<pos:position pos:line="8" pos:column="20"/></operator> <name pos:line="8" pos:column="21">bs2_unknown<pos:position pos:line="8" pos:column="32"/></name></expr>)<pos:position pos:line="8" pos:column="33"/></condition><then pos:line="8" pos:column="33"> <block pos:line="8" pos:column="34">{
	<return pos:line="9" pos:column="9">return <expr><name pos:line="9" pos:column="16">forktype<pos:position pos:line="9" pos:column="24"/></name></expr>;<pos:position pos:line="9" pos:column="25"/></return>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="12" pos:column="5">/* If the user is unprivileged, use the normal fork() only. */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name pos:line="13" pos:column="9">getuid<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">()<pos:position pos:line="13" pos:column="17"/></argument_list></call> <operator pos:line="13" pos:column="18">!=<pos:position pos:line="13" pos:column="20"/></operator> <literal type="number" pos:line="13" pos:column="21">0<pos:position pos:line="13" pos:column="22"/></literal></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23"> <block pos:line="13" pos:column="24">{
	<return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">forktype<pos:position pos:line="14" pos:column="24"/></name> <operator pos:line="14" pos:column="25">=<pos:position pos:line="14" pos:column="26"/></operator> <name pos:line="14" pos:column="27">bs2_FORK<pos:position pos:line="14" pos:column="35"/></name></expr>;<pos:position pos:line="14" pos:column="36"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">uname<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><operator pos:line="17" pos:column="15">&amp;<pos:position pos:line="17" pos:column="20"/></operator><name pos:line="17" pos:column="16">os_version<pos:position pos:line="17" pos:column="26"/></name></expr></argument>)<pos:position pos:line="17" pos:column="27"/></argument_list></call> <operator pos:line="17" pos:column="28">&lt;<pos:position pos:line="17" pos:column="32"/></operator> <literal type="number" pos:line="17" pos:column="30">0<pos:position pos:line="17" pos:column="31"/></literal></expr>)<pos:position pos:line="17" pos:column="32"/></condition><then pos:line="17" pos:column="32">
    <block pos:line="18" pos:column="5">{
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">ap_log_error<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">APLOG_MARK<pos:position pos:line="19" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="34">APLOG_ALERT<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">errno<pos:position pos:line="19" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="54">NULL<pos:position pos:line="19" pos:column="58"/></name></expr></argument>,
		     <argument><expr><literal type="string" pos:line="20" pos:column="22">"uname() failed - aborting."<pos:position pos:line="20" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="52"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="21" pos:column="9">exit<pos:position pos:line="21" pos:column="13"/></name><argument_list pos:line="21" pos:column="13">(<argument><expr><name pos:line="21" pos:column="14">APEXIT_CHILDFATAL<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/*
     * Old BS2000/OSD versions (before XPG4 SPEC1170) don't work with Apache.
     * Anyway, simply return a fork().
     */</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name pos:line="28" pos:column="9">strcmp<pos:position pos:line="28" pos:column="15"/></name><argument_list pos:line="28" pos:column="15">(<argument><expr><name><name pos:line="28" pos:column="16">os_version<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">.<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="27">release<pos:position pos:line="28" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="36">"01.0A"<pos:position pos:line="28" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="44"/></argument_list></call> <operator pos:line="28" pos:column="45">==<pos:position pos:line="28" pos:column="47"/></operator> <literal type="number" pos:line="28" pos:column="48">0<pos:position pos:line="28" pos:column="49"/></literal> <operator pos:line="28" pos:column="50">||<pos:position pos:line="28" pos:column="52"/></operator>
	<call><name pos:line="29" pos:column="9">strcmp<pos:position pos:line="29" pos:column="15"/></name><argument_list pos:line="29" pos:column="15">(<argument><expr><name><name pos:line="29" pos:column="16">os_version<pos:position pos:line="29" pos:column="26"/></name><operator pos:line="29" pos:column="26">.<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="27">release<pos:position pos:line="29" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="36">"02.0A"<pos:position pos:line="29" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call> <operator pos:line="29" pos:column="45">==<pos:position pos:line="29" pos:column="47"/></operator> <literal type="number" pos:line="29" pos:column="48">0<pos:position pos:line="29" pos:column="49"/></literal> <operator pos:line="29" pos:column="50">||<pos:position pos:line="29" pos:column="52"/></operator>
	<call><name pos:line="30" pos:column="9">strcmp<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><name><name pos:line="30" pos:column="16">os_version<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">.<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="27">release<pos:position pos:line="30" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="36">"02.1A"<pos:position pos:line="30" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call> <operator pos:line="30" pos:column="45">==<pos:position pos:line="30" pos:column="47"/></operator> <literal type="number" pos:line="30" pos:column="48">0<pos:position pos:line="30" pos:column="49"/></literal></expr>)<pos:position pos:line="30" pos:column="50"/></condition><then pos:line="30" pos:column="50">
    <block pos:line="31" pos:column="5">{
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">ap_log_error<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">APLOG_MARK<pos:position pos:line="32" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="34">APLOG_ERR<pos:position pos:line="32" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="45">0<pos:position pos:line="32" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="48">NULL<pos:position pos:line="32" pos:column="52"/></name></expr></argument>,
		     <argument><expr><literal type="string" pos:line="33" pos:column="22">"Error: unsupported OS version. "<pos:position pos:line="33" pos:column="55"/></literal>
		     <literal type="string" pos:line="34" pos:column="22">"You may encounter problems."<pos:position pos:line="34" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt>
	<expr_stmt><expr><name pos:line="35" pos:column="9">forktype<pos:position pos:line="35" pos:column="17"/></name> <operator pos:line="35" pos:column="18">=<pos:position pos:line="35" pos:column="19"/></operator> <name pos:line="35" pos:column="20">bs2_FORK<pos:position pos:line="35" pos:column="28"/></name></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then>

    <comment type="block" pos:line="38" pos:column="5">/* The following versions are special:
     * OS versions before A17 needs regular fork() and _rini().
     * A17 requires _rfork() and _rini(),
     * and later versions need ufork().
     */</comment>
    <elseif pos:line="43" pos:column="5">else <if pos:line="43" pos:column="10">if <condition pos:line="43" pos:column="13">(<expr><call><name pos:line="43" pos:column="14">strcmp<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name><name pos:line="43" pos:column="21">os_version<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">.<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="32">release<pos:position pos:line="43" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="41">"01.1A"<pos:position pos:line="43" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="49"/></argument_list></call> <operator pos:line="43" pos:column="50">==<pos:position pos:line="43" pos:column="52"/></operator> <literal type="number" pos:line="43" pos:column="53">0<pos:position pos:line="43" pos:column="54"/></literal> <operator pos:line="43" pos:column="55">||<pos:position pos:line="43" pos:column="57"/></operator>
	     <call><name pos:line="44" pos:column="14">strcmp<pos:position pos:line="44" pos:column="20"/></name><argument_list pos:line="44" pos:column="20">(<argument><expr><name><name pos:line="44" pos:column="21">os_version<pos:position pos:line="44" pos:column="31"/></name><operator pos:line="44" pos:column="31">.<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="32">release<pos:position pos:line="44" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="41">"03.0A"<pos:position pos:line="44" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="49"/></argument_list></call> <operator pos:line="44" pos:column="50">==<pos:position pos:line="44" pos:column="52"/></operator> <literal type="number" pos:line="44" pos:column="53">0<pos:position pos:line="44" pos:column="54"/></literal> <operator pos:line="44" pos:column="55">||<pos:position pos:line="44" pos:column="57"/></operator>
	     <call><name pos:line="45" pos:column="14">strcmp<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name><name pos:line="45" pos:column="21">os_version<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">.<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="32">release<pos:position pos:line="45" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="41">"03.1A"<pos:position pos:line="45" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="49"/></argument_list></call> <operator pos:line="45" pos:column="50">==<pos:position pos:line="45" pos:column="52"/></operator> <literal type="number" pos:line="45" pos:column="53">0<pos:position pos:line="45" pos:column="54"/></literal> <operator pos:line="45" pos:column="55">||<pos:position pos:line="45" pos:column="57"/></operator>
	     <call><name pos:line="46" pos:column="14">strcmp<pos:position pos:line="46" pos:column="20"/></name><argument_list pos:line="46" pos:column="20">(<argument><expr><name><name pos:line="46" pos:column="21">os_version<pos:position pos:line="46" pos:column="31"/></name><operator pos:line="46" pos:column="31">.<pos:position pos:line="46" pos:column="32"/></operator><name pos:line="46" pos:column="32">release<pos:position pos:line="46" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="41">"04.0A"<pos:position pos:line="46" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="49"/></argument_list></call> <operator pos:line="46" pos:column="50">==<pos:position pos:line="46" pos:column="52"/></operator> <literal type="number" pos:line="46" pos:column="53">0<pos:position pos:line="46" pos:column="54"/></literal></expr>)<pos:position pos:line="46" pos:column="55"/></condition><then pos:line="46" pos:column="55">
    <block pos:line="47" pos:column="5">{
        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><call><name pos:line="48" pos:column="13">strcmp<pos:position pos:line="48" pos:column="19"/></name> <argument_list pos:line="48" pos:column="20">(<argument><expr><name><name pos:line="48" pos:column="21">os_version<pos:position pos:line="48" pos:column="31"/></name><operator pos:line="48" pos:column="31">.<pos:position pos:line="48" pos:column="32"/></operator><name pos:line="48" pos:column="32">version<pos:position pos:line="48" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="41">"A18"<pos:position pos:line="48" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="47"/></argument_list></call> <operator pos:line="48" pos:column="48">&gt;=<pos:position pos:line="48" pos:column="53"/></operator> <literal type="number" pos:line="48" pos:column="51">0<pos:position pos:line="48" pos:column="52"/></literal></expr>)<pos:position pos:line="48" pos:column="53"/></condition><then pos:line="48" pos:column="53">
            <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="13">forktype<pos:position pos:line="49" pos:column="21"/></name> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <name pos:line="49" pos:column="24">bs2_UFORK<pos:position pos:line="49" pos:column="33"/></name></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt></block></then>

	<elseif pos:line="51" pos:column="9">else <if pos:line="51" pos:column="14">if <condition pos:line="51" pos:column="17">(<expr><call><name pos:line="51" pos:column="18">strcmp<pos:position pos:line="51" pos:column="24"/></name> <argument_list pos:line="51" pos:column="25">(<argument><expr><name><name pos:line="51" pos:column="26">os_version<pos:position pos:line="51" pos:column="36"/></name><operator pos:line="51" pos:column="36">.<pos:position pos:line="51" pos:column="37"/></operator><name pos:line="51" pos:column="37">version<pos:position pos:line="51" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="46">"A17"<pos:position pos:line="51" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="52"/></argument_list></call> <operator pos:line="51" pos:column="53">&lt;<pos:position pos:line="51" pos:column="57"/></operator> <literal type="number" pos:line="51" pos:column="55">0<pos:position pos:line="51" pos:column="56"/></literal></expr>)<pos:position pos:line="51" pos:column="57"/></condition><then pos:line="51" pos:column="57">
            <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="13">forktype<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <name pos:line="52" pos:column="24">bs2_FORK_RINI<pos:position pos:line="52" pos:column="37"/></name></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt></block></then></if></elseif>

	<else pos:line="54" pos:column="9">else
	    <block type="pseudo"><expr_stmt><expr><name pos:line="55" pos:column="13">forktype<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">=<pos:position pos:line="55" pos:column="23"/></operator> <name pos:line="55" pos:column="24">bs2_RFORK_RINI<pos:position pos:line="55" pos:column="38"/></name></expr>;<pos:position pos:line="55" pos:column="39"/></expr_stmt></block></else></if>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if></elseif>

    <comment type="block" pos:line="58" pos:column="5">/* All later OS versions will hopefully use ufork() only  ;-) */</comment>
    <else pos:line="59" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="9">forktype<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">=<pos:position pos:line="60" pos:column="19"/></operator> <name pos:line="60" pos:column="20">bs2_UFORK<pos:position pos:line="60" pos:column="29"/></name></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt></block></else></if>

    <return pos:line="62" pos:column="5">return <expr><name pos:line="62" pos:column="12">forktype<pos:position pos:line="62" pos:column="20"/></name></expr>;<pos:position pos:line="62" pos:column="21"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
