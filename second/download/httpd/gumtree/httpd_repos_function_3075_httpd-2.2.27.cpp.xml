<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3075_httpd-2.2.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">BF_set_key<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><specifier pos:line="1" pos:column="24">const<pos:position pos:line="1" pos:column="29"/></specifier> <name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">key<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">BF_key<pos:position pos:line="1" pos:column="47"/></name></type> <name pos:line="1" pos:column="48">expanded<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">BF_key<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">initial<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="2" pos:column="5">unsigned<pos:position pos:line="2" pos:column="13"/></name> <name pos:line="2" pos:column="14">char<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">flags<pos:position pos:line="2" pos:column="24"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="25"/></parameter_list>
<block pos:line="3" pos:column="1">{
	<decl_stmt><decl><type><specifier pos:line="4" pos:column="9">const<pos:position pos:line="4" pos:column="14"/></specifier> <name pos:line="4" pos:column="15">char<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">ptr<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name pos:line="4" pos:column="27">key<pos:position pos:line="4" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="5" pos:column="9">unsigned<pos:position pos:line="5" pos:column="17"/></name> <name pos:line="5" pos:column="18">int<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">bug<pos:position pos:line="5" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="27">i<pos:position pos:line="5" pos:column="28"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="30">j<pos:position pos:line="5" pos:column="31"/></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="6" pos:column="9">BF_word<pos:position pos:line="6" pos:column="16"/></name></type> <name pos:line="6" pos:column="17">safety<pos:position pos:line="6" pos:column="23"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="25">sign<pos:position pos:line="6" pos:column="29"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="31">diff<pos:position pos:line="6" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="6" pos:column="37">tmp<pos:position pos:line="6" pos:column="40"/></name><index pos:line="6" pos:column="40">[<expr><literal type="number" pos:line="6" pos:column="41">2<pos:position pos:line="6" pos:column="42"/></literal></expr>]<pos:position pos:line="6" pos:column="43"/></index></name></decl>;<pos:position pos:line="6" pos:column="44"/></decl_stmt>

<comment type="block" pos:line="8" pos:column="1">/*
 * There was a sign extension bug in older revisions of this function.  While
 * we would have liked to simply fix the bug and move on, we have to provide
 * a backwards compatibility feature (essentially the bug) for some systems and
 * a safety measure for some others.  The latter is needed because for certain
 * multiple inputs to the buggy algorithm there exist easily found inputs to
 * the correct algorithm that produce the same hash.  Thus, we optionally
 * deviate from the correct algorithm just enough to avoid such collisions.
 * While the bug itself affected the majority of passwords containing
 * characters with the 8th bit set (although only a percentage of those in a
 * collision-producing way), the anti-collision safety measure affects
 * only a subset of passwords containing the '\xff' character (not even all of
 * those passwords, just some of them).  This character is not found in valid
 * UTF-8 sequences and is rarely used in popular 8-bit character encodings.
 * Thus, the safety measure is unlikely to cause much annoyance, and is a
 * reasonable tradeoff to use when authenticating against existing hashes that
 * are not reliably known to have been computed with the correct algorithm.
 *
 * We use an approach that tries to minimize side-channel leaks of password
 * information - that is, we mostly use fixed-cost bitwise operations instead
 * of branches or table lookups.  (One conditional branch based on password
 * length remains.  It is not part of the bug aftermath, though, and is
 * difficult and possibly unreasonable to avoid given the use of C strings by
 * the caller, which results in similar timing leaks anyway.)
 *
 * For actual implementation, we set an array index in the variable "bug"
 * (0 means no bug, 1 means sign extension bug emulation) and a flag in the
 * variable "safety" (bit 16 is set when the safety measure is requested).
 * Valid combinations of settings are:
 *
 * Prefix "$2a$": bug = 0, safety = 0x10000
 * Prefix "$2x$": bug = 1, safety = 0
 * Prefix "$2y$": bug = 0, safety = 0
 */</comment>
	<expr_stmt><expr><name pos:line="42" pos:column="9">bug<pos:position pos:line="42" pos:column="12"/></name> <operator pos:line="42" pos:column="13">=<pos:position pos:line="42" pos:column="14"/></operator> <operator pos:line="42" pos:column="15">(<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="16">unsigned<pos:position pos:line="42" pos:column="24"/></name> <name pos:line="42" pos:column="25">int<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">)<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="29">flags<pos:position pos:line="42" pos:column="34"/></name> <operator pos:line="42" pos:column="35">&amp;<pos:position pos:line="42" pos:column="40"/></operator> <literal type="number" pos:line="42" pos:column="37">1<pos:position pos:line="42" pos:column="38"/></literal></expr>;<pos:position pos:line="42" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><name pos:line="43" pos:column="9">safety<pos:position pos:line="43" pos:column="15"/></name> <operator pos:line="43" pos:column="16">=<pos:position pos:line="43" pos:column="17"/></operator> <operator pos:line="43" pos:column="18">(<pos:position pos:line="43" pos:column="19"/></operator><operator pos:line="43" pos:column="19">(<pos:position pos:line="43" pos:column="20"/></operator><name pos:line="43" pos:column="20">BF_word<pos:position pos:line="43" pos:column="27"/></name><operator pos:line="43" pos:column="27">)<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="28">flags<pos:position pos:line="43" pos:column="33"/></name> <operator pos:line="43" pos:column="34">&amp;<pos:position pos:line="43" pos:column="39"/></operator> <literal type="number" pos:line="43" pos:column="36">2<pos:position pos:line="43" pos:column="37"/></literal><operator pos:line="43" pos:column="37">)<pos:position pos:line="43" pos:column="38"/></operator> <operator pos:line="43" pos:column="39">&lt;&lt;<pos:position pos:line="43" pos:column="47"/></operator> <literal type="number" pos:line="43" pos:column="42">15<pos:position pos:line="43" pos:column="44"/></literal></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt>

	<expr_stmt><expr><name pos:line="45" pos:column="9">sign<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <name pos:line="45" pos:column="16">diff<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">=<pos:position pos:line="45" pos:column="22"/></operator> <literal type="number" pos:line="45" pos:column="23">0<pos:position pos:line="45" pos:column="24"/></literal></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>

	<for pos:line="47" pos:column="9">for <control pos:line="47" pos:column="13">(<init><expr><name pos:line="47" pos:column="14">i<pos:position pos:line="47" pos:column="15"/></name> <operator pos:line="47" pos:column="16">=<pos:position pos:line="47" pos:column="17"/></operator> <literal type="number" pos:line="47" pos:column="18">0<pos:position pos:line="47" pos:column="19"/></literal></expr>;<pos:position pos:line="47" pos:column="20"/></init> <condition><expr><name pos:line="47" pos:column="21">i<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">&lt;<pos:position pos:line="47" pos:column="27"/></operator> <name pos:line="47" pos:column="25">BF_N<pos:position pos:line="47" pos:column="29"/></name> <operator pos:line="47" pos:column="30">+<pos:position pos:line="47" pos:column="31"/></operator> <literal type="number" pos:line="47" pos:column="32">2<pos:position pos:line="47" pos:column="33"/></literal></expr>;<pos:position pos:line="47" pos:column="34"/></condition> <incr><expr><name pos:line="47" pos:column="35">i<pos:position pos:line="47" pos:column="36"/></name><operator pos:line="47" pos:column="36">++<pos:position pos:line="47" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="47" pos:column="39"/></control> <block pos:line="47" pos:column="40">{
		<expr_stmt><expr><name><name pos:line="48" pos:column="17">tmp<pos:position pos:line="48" pos:column="20"/></name><index pos:line="48" pos:column="20">[<expr><literal type="number" pos:line="48" pos:column="21">0<pos:position pos:line="48" pos:column="22"/></literal></expr>]<pos:position pos:line="48" pos:column="23"/></index></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator> <name><name pos:line="48" pos:column="26">tmp<pos:position pos:line="48" pos:column="29"/></name><index pos:line="48" pos:column="29">[<expr><literal type="number" pos:line="48" pos:column="30">1<pos:position pos:line="48" pos:column="31"/></literal></expr>]<pos:position pos:line="48" pos:column="32"/></index></name> <operator pos:line="48" pos:column="33">=<pos:position pos:line="48" pos:column="34"/></operator> <literal type="number" pos:line="48" pos:column="35">0<pos:position pos:line="48" pos:column="36"/></literal></expr>;<pos:position pos:line="48" pos:column="37"/></expr_stmt>
		<for pos:line="49" pos:column="17">for <control pos:line="49" pos:column="21">(<init><expr><name pos:line="49" pos:column="22">j<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">=<pos:position pos:line="49" pos:column="25"/></operator> <literal type="number" pos:line="49" pos:column="26">0<pos:position pos:line="49" pos:column="27"/></literal></expr>;<pos:position pos:line="49" pos:column="28"/></init> <condition><expr><name pos:line="49" pos:column="29">j<pos:position pos:line="49" pos:column="30"/></name> <operator pos:line="49" pos:column="31">&lt;<pos:position pos:line="49" pos:column="35"/></operator> <literal type="number" pos:line="49" pos:column="33">4<pos:position pos:line="49" pos:column="34"/></literal></expr>;<pos:position pos:line="49" pos:column="35"/></condition> <incr><expr><name pos:line="49" pos:column="36">j<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">++<pos:position pos:line="49" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="49" pos:column="40"/></control> <block pos:line="49" pos:column="41">{
			<expr_stmt><expr><name><name pos:line="50" pos:column="25">tmp<pos:position pos:line="50" pos:column="28"/></name><index pos:line="50" pos:column="28">[<expr><literal type="number" pos:line="50" pos:column="29">0<pos:position pos:line="50" pos:column="30"/></literal></expr>]<pos:position pos:line="50" pos:column="31"/></index></name> <operator pos:line="50" pos:column="32">&lt;&lt;=<pos:position pos:line="50" pos:column="41"/></operator> <literal type="number" pos:line="50" pos:column="36">8<pos:position pos:line="50" pos:column="37"/></literal></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="51" pos:column="25">tmp<pos:position pos:line="51" pos:column="28"/></name><index pos:line="51" pos:column="28">[<expr><literal type="number" pos:line="51" pos:column="29">0<pos:position pos:line="51" pos:column="30"/></literal></expr>]<pos:position pos:line="51" pos:column="31"/></index></name> <operator pos:line="51" pos:column="32">|=<pos:position pos:line="51" pos:column="34"/></operator> <operator pos:line="51" pos:column="35">(<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="36">unsigned<pos:position pos:line="51" pos:column="44"/></name> <name pos:line="51" pos:column="45">char<pos:position pos:line="51" pos:column="49"/></name><operator pos:line="51" pos:column="49">)<pos:position pos:line="51" pos:column="50"/></operator><operator pos:line="51" pos:column="50">*<pos:position pos:line="51" pos:column="51"/></operator><name pos:line="51" pos:column="51">ptr<pos:position pos:line="51" pos:column="54"/></name></expr>;<pos:position pos:line="51" pos:column="55"/></expr_stmt> <comment type="block" pos:line="51" pos:column="56">/* correct */</comment>
			<expr_stmt><expr><name><name pos:line="52" pos:column="25">tmp<pos:position pos:line="52" pos:column="28"/></name><index pos:line="52" pos:column="28">[<expr><literal type="number" pos:line="52" pos:column="29">1<pos:position pos:line="52" pos:column="30"/></literal></expr>]<pos:position pos:line="52" pos:column="31"/></index></name> <operator pos:line="52" pos:column="32">&lt;&lt;=<pos:position pos:line="52" pos:column="41"/></operator> <literal type="number" pos:line="52" pos:column="36">8<pos:position pos:line="52" pos:column="37"/></literal></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt>
			<expr_stmt><expr><name><name pos:line="53" pos:column="25">tmp<pos:position pos:line="53" pos:column="28"/></name><index pos:line="53" pos:column="28">[<expr><literal type="number" pos:line="53" pos:column="29">1<pos:position pos:line="53" pos:column="30"/></literal></expr>]<pos:position pos:line="53" pos:column="31"/></index></name> <operator pos:line="53" pos:column="32">|=<pos:position pos:line="53" pos:column="34"/></operator> <operator pos:line="53" pos:column="35">(<pos:position pos:line="53" pos:column="36"/></operator><name pos:line="53" pos:column="36">BF_word_signed<pos:position pos:line="53" pos:column="50"/></name><operator pos:line="53" pos:column="50">)<pos:position pos:line="53" pos:column="51"/></operator><operator pos:line="53" pos:column="51">(<pos:position pos:line="53" pos:column="52"/></operator><name pos:line="53" pos:column="52">signed<pos:position pos:line="53" pos:column="58"/></name> <name pos:line="53" pos:column="59">char<pos:position pos:line="53" pos:column="63"/></name><operator pos:line="53" pos:column="63">)<pos:position pos:line="53" pos:column="64"/></operator><operator pos:line="53" pos:column="64">*<pos:position pos:line="53" pos:column="65"/></operator><name pos:line="53" pos:column="65">ptr<pos:position pos:line="53" pos:column="68"/></name></expr>;<pos:position pos:line="53" pos:column="69"/></expr_stmt> <comment type="block" pos:line="53" pos:column="70">/* bug */</comment>
<comment type="block" pos:line="54" pos:column="1">/*
 * Sign extension in the first char has no effect - nothing to overwrite yet,
 * and those extra 24 bits will be fully shifted out of the 32-bit word.  For
 * chars 2, 3, 4 in each four-char block, we set bit 7 of "sign" if sign
 * extension in tmp[1] occurs.  Once this flag is set, it remains set.
 */</comment>
			<if pos:line="60" pos:column="25">if <condition pos:line="60" pos:column="28">(<expr><name pos:line="60" pos:column="29">j<pos:position pos:line="60" pos:column="30"/></name></expr>)<pos:position pos:line="60" pos:column="31"/></condition><then pos:line="60" pos:column="31">
				<block type="pseudo"><expr_stmt><expr><name pos:line="61" pos:column="33">sign<pos:position pos:line="61" pos:column="37"/></name> <operator pos:line="61" pos:column="38">|=<pos:position pos:line="61" pos:column="40"/></operator> <name><name pos:line="61" pos:column="41">tmp<pos:position pos:line="61" pos:column="44"/></name><index pos:line="61" pos:column="44">[<expr><literal type="number" pos:line="61" pos:column="45">1<pos:position pos:line="61" pos:column="46"/></literal></expr>]<pos:position pos:line="61" pos:column="47"/></index></name> <operator pos:line="61" pos:column="48">&amp;<pos:position pos:line="61" pos:column="53"/></operator> <literal type="number" pos:line="61" pos:column="50">0x80<pos:position pos:line="61" pos:column="54"/></literal></expr>;<pos:position pos:line="61" pos:column="55"/></expr_stmt></block></then></if>
			<if pos:line="62" pos:column="25">if <condition pos:line="62" pos:column="28">(<expr><operator pos:line="62" pos:column="29">!<pos:position pos:line="62" pos:column="30"/></operator><operator pos:line="62" pos:column="30">*<pos:position pos:line="62" pos:column="31"/></operator><name pos:line="62" pos:column="31">ptr<pos:position pos:line="62" pos:column="34"/></name></expr>)<pos:position pos:line="62" pos:column="35"/></condition><then pos:line="62" pos:column="35">
				<block type="pseudo"><expr_stmt><expr><name pos:line="63" pos:column="33">ptr<pos:position pos:line="63" pos:column="36"/></name> <operator pos:line="63" pos:column="37">=<pos:position pos:line="63" pos:column="38"/></operator> <name pos:line="63" pos:column="39">key<pos:position pos:line="63" pos:column="42"/></name></expr>;<pos:position pos:line="63" pos:column="43"/></expr_stmt></block></then>
			<else pos:line="64" pos:column="25">else
				<block type="pseudo"><expr_stmt><expr><name pos:line="65" pos:column="33">ptr<pos:position pos:line="65" pos:column="36"/></name><operator pos:line="65" pos:column="36">++<pos:position pos:line="65" pos:column="38"/></operator></expr>;<pos:position pos:line="65" pos:column="39"/></expr_stmt></block></else></if>
		}<pos:position pos:line="66" pos:column="18"/></block></for>
		<expr_stmt><expr><name pos:line="67" pos:column="17">diff<pos:position pos:line="67" pos:column="21"/></name> <operator pos:line="67" pos:column="22">|=<pos:position pos:line="67" pos:column="24"/></operator> <name><name pos:line="67" pos:column="25">tmp<pos:position pos:line="67" pos:column="28"/></name><index pos:line="67" pos:column="28">[<expr><literal type="number" pos:line="67" pos:column="29">0<pos:position pos:line="67" pos:column="30"/></literal></expr>]<pos:position pos:line="67" pos:column="31"/></index></name> <operator pos:line="67" pos:column="32">^<pos:position pos:line="67" pos:column="33"/></operator> <name><name pos:line="67" pos:column="34">tmp<pos:position pos:line="67" pos:column="37"/></name><index pos:line="67" pos:column="37">[<expr><literal type="number" pos:line="67" pos:column="38">1<pos:position pos:line="67" pos:column="39"/></literal></expr>]<pos:position pos:line="67" pos:column="40"/></index></name></expr>;<pos:position pos:line="67" pos:column="41"/></expr_stmt> <comment type="block" pos:line="67" pos:column="42">/* Non-zero on any differences */</comment>

		<expr_stmt><expr><name><name pos:line="69" pos:column="17">expanded<pos:position pos:line="69" pos:column="25"/></name><index pos:line="69" pos:column="25">[<expr><name pos:line="69" pos:column="26">i<pos:position pos:line="69" pos:column="27"/></name></expr>]<pos:position pos:line="69" pos:column="28"/></index></name> <operator pos:line="69" pos:column="29">=<pos:position pos:line="69" pos:column="30"/></operator> <name><name pos:line="69" pos:column="31">tmp<pos:position pos:line="69" pos:column="34"/></name><index pos:line="69" pos:column="34">[<expr><name pos:line="69" pos:column="35">bug<pos:position pos:line="69" pos:column="38"/></name></expr>]<pos:position pos:line="69" pos:column="39"/></index></name></expr>;<pos:position pos:line="69" pos:column="40"/></expr_stmt>
		<expr_stmt><expr><name><name pos:line="70" pos:column="17">initial<pos:position pos:line="70" pos:column="24"/></name><index pos:line="70" pos:column="24">[<expr><name pos:line="70" pos:column="25">i<pos:position pos:line="70" pos:column="26"/></name></expr>]<pos:position pos:line="70" pos:column="27"/></index></name> <operator pos:line="70" pos:column="28">=<pos:position pos:line="70" pos:column="29"/></operator> <name><name pos:line="70" pos:column="30">BF_init_state<pos:position pos:line="70" pos:column="43"/></name><operator pos:line="70" pos:column="43">.<pos:position pos:line="70" pos:column="44"/></operator><name pos:line="70" pos:column="44">P<pos:position pos:line="70" pos:column="45"/></name><index pos:line="70" pos:column="45">[<expr><name pos:line="70" pos:column="46">i<pos:position pos:line="70" pos:column="47"/></name></expr>]<pos:position pos:line="70" pos:column="48"/></index></name> <operator pos:line="70" pos:column="49">^<pos:position pos:line="70" pos:column="50"/></operator> <name><name pos:line="70" pos:column="51">tmp<pos:position pos:line="70" pos:column="54"/></name><index pos:line="70" pos:column="54">[<expr><name pos:line="70" pos:column="55">bug<pos:position pos:line="70" pos:column="58"/></name></expr>]<pos:position pos:line="70" pos:column="59"/></index></name></expr>;<pos:position pos:line="70" pos:column="60"/></expr_stmt>
	}<pos:position pos:line="71" pos:column="10"/></block></for>

<comment type="block" pos:line="73" pos:column="1">/*
 * At this point, "diff" is zero iff the correct and buggy algorithms produced
 * exactly the same result.  If so and if "sign" is non-zero, which indicates
 * that there was a non-benign sign extension, this means that we have a
 * collision between the correctly computed hash for this password and a set of
 * passwords that could be supplied to the buggy algorithm.  Our safety measure
 * is meant to protect from such many-buggy to one-correct collisions, by
 * deviating from the correct algorithm in such cases.  Let's check for this.
 */</comment>
	<expr_stmt><expr><name pos:line="82" pos:column="9">diff<pos:position pos:line="82" pos:column="13"/></name> <operator pos:line="82" pos:column="14">|=<pos:position pos:line="82" pos:column="16"/></operator> <name pos:line="82" pos:column="17">diff<pos:position pos:line="82" pos:column="21"/></name> <operator pos:line="82" pos:column="22">&gt;&gt;<pos:position pos:line="82" pos:column="27"/></operator> <literal type="number" pos:line="82" pos:column="25">16<pos:position pos:line="82" pos:column="27"/></literal></expr>;<pos:position pos:line="82" pos:column="28"/></expr_stmt> <comment type="block" pos:line="82" pos:column="29">/* still zero iff exact match */</comment>
	<expr_stmt><expr><name pos:line="83" pos:column="9">diff<pos:position pos:line="83" pos:column="13"/></name> <operator pos:line="83" pos:column="14">&amp;=<pos:position pos:line="83" pos:column="20"/></operator> <literal type="number" pos:line="83" pos:column="17">0xffff<pos:position pos:line="83" pos:column="23"/></literal></expr>;<pos:position pos:line="83" pos:column="24"/></expr_stmt> <comment type="block" pos:line="83" pos:column="25">/* ditto */</comment>
	<expr_stmt><expr><name pos:line="84" pos:column="9">diff<pos:position pos:line="84" pos:column="13"/></name> <operator pos:line="84" pos:column="14">+=<pos:position pos:line="84" pos:column="16"/></operator> <literal type="number" pos:line="84" pos:column="17">0xffff<pos:position pos:line="84" pos:column="23"/></literal></expr>;<pos:position pos:line="84" pos:column="24"/></expr_stmt> <comment type="block" pos:line="84" pos:column="25">/* bit 16 set iff "diff" was non-zero (on non-match) */</comment>
	<expr_stmt><expr><name pos:line="85" pos:column="9">sign<pos:position pos:line="85" pos:column="13"/></name> <operator pos:line="85" pos:column="14">&lt;&lt;=<pos:position pos:line="85" pos:column="23"/></operator> <literal type="number" pos:line="85" pos:column="18">9<pos:position pos:line="85" pos:column="19"/></literal></expr>;<pos:position pos:line="85" pos:column="20"/></expr_stmt> <comment type="block" pos:line="85" pos:column="21">/* move the non-benign sign extension flag to bit 16 */</comment>
	<expr_stmt><expr><name pos:line="86" pos:column="9">sign<pos:position pos:line="86" pos:column="13"/></name> <operator pos:line="86" pos:column="14">&amp;=<pos:position pos:line="86" pos:column="20"/></operator> <operator pos:line="86" pos:column="17">~<pos:position pos:line="86" pos:column="18"/></operator><name pos:line="86" pos:column="18">diff<pos:position pos:line="86" pos:column="22"/></name> <operator pos:line="86" pos:column="23">&amp;<pos:position pos:line="86" pos:column="28"/></operator> <name pos:line="86" pos:column="25">safety<pos:position pos:line="86" pos:column="31"/></name></expr>;<pos:position pos:line="86" pos:column="32"/></expr_stmt> <comment type="block" pos:line="86" pos:column="33">/* action needed? */</comment>

<comment type="block" pos:line="88" pos:column="1">/*
 * If we have determined that we need to deviate from the correct algorithm,
 * flip bit 16 in initial expanded key.  (The choice of 16 is arbitrary, but
 * let's stick to it now.  It came out of the approach we used above, and it's
 * not any worse than any other choice we could make.)
 *
 * It is crucial that we don't do the same to the expanded key used in the main
 * Eksblowfish loop.  By doing it to only one of these two, we deviate from a
 * state that could be directly specified by a password to the buggy algorithm
 * (and to the fully correct one as well, but that's a side-effect).
 */</comment>
	<expr_stmt><expr><name><name pos:line="99" pos:column="9">initial<pos:position pos:line="99" pos:column="16"/></name><index pos:line="99" pos:column="16">[<expr><literal type="number" pos:line="99" pos:column="17">0<pos:position pos:line="99" pos:column="18"/></literal></expr>]<pos:position pos:line="99" pos:column="19"/></index></name> <operator pos:line="99" pos:column="20">^=<pos:position pos:line="99" pos:column="22"/></operator> <name pos:line="99" pos:column="23">sign<pos:position pos:line="99" pos:column="27"/></name></expr>;<pos:position pos:line="99" pos:column="28"/></expr_stmt>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
