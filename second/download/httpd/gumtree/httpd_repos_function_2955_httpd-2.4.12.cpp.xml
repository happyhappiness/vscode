<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2955_httpd-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">fcgi_check_authn_provider<pos:position pos:line="1" pos:column="45"/></name><parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><name pos:line="1" pos:column="46">cmd_parms<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">cmd<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="2" pos:column="41">void<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">d<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="3" pos:column="41">int<pos:position pos:line="3" pos:column="44"/></name></type> <name pos:line="3" pos:column="45">argc<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="4" pos:column="41">char<pos:position pos:line="4" pos:column="45"/></name> <modifier pos:line="4" pos:column="46">*<pos:position pos:line="4" pos:column="47"/></modifier><specifier pos:line="4" pos:column="47">const<pos:position pos:line="4" pos:column="52"/></specifier></type> <name><name pos:line="4" pos:column="53">argv<pos:position pos:line="4" pos:column="57"/></name><index pos:line="4" pos:column="57">[]<pos:position pos:line="4" pos:column="59"/></index></name></decl></parameter>)<pos:position pos:line="4" pos:column="60"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">dname<pos:position pos:line="6" pos:column="22"/></name> <init pos:line="6" pos:column="23">= <expr><literal type="string" pos:line="6" pos:column="25">"AuthnzFcgiCheckAuthnProvider"<pos:position pos:line="6" pos:column="55"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">fcgi_dir_conf<pos:position pos:line="7" pos:column="18"/></name> <modifier pos:line="7" pos:column="19">*<pos:position pos:line="7" pos:column="20"/></modifier></type><name pos:line="7" pos:column="20">dc<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name pos:line="7" pos:column="25">d<pos:position pos:line="7" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">ca<pos:position pos:line="8" pos:column="11"/></name> <init pos:line="8" pos:column="12">= <expr><literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">ca<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">&gt;=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="15">argc<pos:position pos:line="10" pos:column="19"/></name></expr>)<pos:position pos:line="10" pos:column="20"/></condition><then pos:line="10" pos:column="20"> <block pos:line="10" pos:column="21">{
        <return pos:line="11" pos:column="9">return <expr><call><name pos:line="11" pos:column="16">apr_pstrcat<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><name><name pos:line="11" pos:column="28">cmd<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">pool<pos:position pos:line="11" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="39">dname<pos:position pos:line="11" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="46">": No provider given"<pos:position pos:line="11" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="11" pos:column="69">NULL<pos:position pos:line="11" pos:column="73"/></name></expr></argument>)<pos:position pos:line="11" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="75"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="14" pos:column="5">dc<pos:position pos:line="14" pos:column="7"/></name><operator pos:line="14" pos:column="7">-&gt;<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="9">name<pos:position pos:line="14" pos:column="13"/></name></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <name><name pos:line="14" pos:column="16">argv<pos:position pos:line="14" pos:column="20"/></name><index pos:line="14" pos:column="20">[<expr><name pos:line="14" pos:column="21">ca<pos:position pos:line="14" pos:column="23"/></name></expr>]<pos:position pos:line="14" pos:column="24"/></index></name></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">ca<pos:position pos:line="15" pos:column="7"/></name><operator pos:line="15" pos:column="7">++<pos:position pos:line="15" pos:column="9"/></operator></expr>;<pos:position pos:line="15" pos:column="10"/></expr_stmt>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><call><name pos:line="17" pos:column="10">strcasecmp<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name><name pos:line="17" pos:column="21">dc<pos:position pos:line="17" pos:column="23"/></name><operator pos:line="17" pos:column="23">-&gt;<pos:position pos:line="17" pos:column="28"/></operator><name pos:line="17" pos:column="25">name<pos:position pos:line="17" pos:column="29"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="31">"None"<pos:position pos:line="17" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="39"/></condition><then pos:line="17" pos:column="39"> <block pos:line="17" pos:column="40">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">ca<pos:position pos:line="18" pos:column="15"/></name> <operator pos:line="18" pos:column="16">&lt;<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="18">argc<pos:position pos:line="18" pos:column="22"/></name></expr>)<pos:position pos:line="18" pos:column="23"/></condition><then pos:line="18" pos:column="23"> <block pos:line="18" pos:column="24">{
            <return pos:line="19" pos:column="13">return <expr><literal type="string" pos:line="19" pos:column="20">"Options aren't supported with \"None\""<pos:position pos:line="19" pos:column="60"/></literal></expr>;<pos:position pos:line="19" pos:column="61"/></return>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <while pos:line="23" pos:column="5">while <condition pos:line="23" pos:column="11">(<expr><name pos:line="23" pos:column="12">ca<pos:position pos:line="23" pos:column="14"/></name> <operator pos:line="23" pos:column="15">&lt;<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="17">argc<pos:position pos:line="23" pos:column="21"/></name></expr>)<pos:position pos:line="23" pos:column="22"/></condition> <block pos:line="23" pos:column="23">{
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">const<pos:position pos:line="24" pos:column="14"/></specifier> <name pos:line="24" pos:column="15">char<pos:position pos:line="24" pos:column="19"/></name> <modifier pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></modifier></type><name pos:line="24" pos:column="21">var<pos:position pos:line="24" pos:column="24"/></name> <init pos:line="24" pos:column="25">= <expr><name><name pos:line="24" pos:column="27">argv<pos:position pos:line="24" pos:column="31"/></name><index pos:line="24" pos:column="31">[<expr><name pos:line="24" pos:column="32">ca<pos:position pos:line="24" pos:column="34"/></name></expr>]<pos:position pos:line="24" pos:column="35"/></index></name></expr></init></decl>, <modifier pos:line="24" pos:column="37">*<pos:position pos:line="24" pos:column="38"/></modifier><decl><type ref="prev"/><name pos:line="24" pos:column="38">val<pos:position pos:line="24" pos:column="41"/></name></decl>;<pos:position pos:line="24" pos:column="42"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">int<pos:position pos:line="25" pos:column="12"/></name></type> <name pos:line="25" pos:column="13">badarg<pos:position pos:line="25" pos:column="19"/></name> <init pos:line="25" pos:column="20">= <expr><literal type="number" pos:line="25" pos:column="22">0<pos:position pos:line="25" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="25" pos:column="24"/></decl_stmt>

        <expr_stmt><expr><name pos:line="27" pos:column="9">ca<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">++<pos:position pos:line="27" pos:column="13"/></operator></expr>;<pos:position pos:line="27" pos:column="14"/></expr_stmt>

        <comment type="block" pos:line="29" pos:column="9">/* at present, everything needs an argument */</comment>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name pos:line="30" pos:column="13">ca<pos:position pos:line="30" pos:column="15"/></name> <operator pos:line="30" pos:column="16">&gt;=<pos:position pos:line="30" pos:column="21"/></operator> <name pos:line="30" pos:column="19">argc<pos:position pos:line="30" pos:column="23"/></name></expr>)<pos:position pos:line="30" pos:column="24"/></condition><then pos:line="30" pos:column="24"> <block pos:line="30" pos:column="25">{
            <return pos:line="31" pos:column="13">return <expr><call><name pos:line="31" pos:column="20">apr_pstrcat<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><name><name pos:line="31" pos:column="32">cmd<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">-&gt;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="37">pool<pos:position pos:line="31" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="43">dname<pos:position pos:line="31" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="50">": "<pos:position pos:line="31" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="56">var<pos:position pos:line="31" pos:column="59"/></name></expr></argument>,
                               <argument><expr><literal type="string" pos:line="32" pos:column="32">"needs an argument"<pos:position pos:line="32" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="53">NULL<pos:position pos:line="32" pos:column="57"/></name></expr></argument>)<pos:position pos:line="32" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="59"/></return>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="35" pos:column="9">val<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <name><name pos:line="35" pos:column="15">argv<pos:position pos:line="35" pos:column="19"/></name><index pos:line="35" pos:column="19">[<expr><name pos:line="35" pos:column="20">ca<pos:position pos:line="35" pos:column="22"/></name></expr>]<pos:position pos:line="35" pos:column="23"/></index></name></expr>;<pos:position pos:line="35" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="36" pos:column="9">ca<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">++<pos:position pos:line="36" pos:column="13"/></operator></expr>;<pos:position pos:line="36" pos:column="14"/></expr_stmt>

        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><operator pos:line="38" pos:column="13">!<pos:position pos:line="38" pos:column="14"/></operator><call><name pos:line="38" pos:column="14">strcasecmp<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">var<pos:position pos:line="38" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="30">"Authoritative"<pos:position pos:line="38" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="38" pos:column="47"/></condition><then pos:line="38" pos:column="47"> <block pos:line="38" pos:column="48">{
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><operator pos:line="39" pos:column="17">!<pos:position pos:line="39" pos:column="18"/></operator><call><name pos:line="39" pos:column="18">strcasecmp<pos:position pos:line="39" pos:column="28"/></name><argument_list pos:line="39" pos:column="28">(<argument><expr><name pos:line="39" pos:column="29">val<pos:position pos:line="39" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="34">"On"<pos:position pos:line="39" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="40"/></condition><then pos:line="39" pos:column="40"> <block pos:line="39" pos:column="41">{
                <expr_stmt><expr><name><name pos:line="40" pos:column="17">dc<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">-&gt;<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="21">authoritative<pos:position pos:line="40" pos:column="34"/></name></name> <operator pos:line="40" pos:column="35">=<pos:position pos:line="40" pos:column="36"/></operator> <literal type="number" pos:line="40" pos:column="37">1<pos:position pos:line="40" pos:column="38"/></literal></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="41" pos:column="14"/></block></then>
            <elseif pos:line="42" pos:column="13">else <if pos:line="42" pos:column="18">if <condition pos:line="42" pos:column="21">(<expr><operator pos:line="42" pos:column="22">!<pos:position pos:line="42" pos:column="23"/></operator><call><name pos:line="42" pos:column="23">strcasecmp<pos:position pos:line="42" pos:column="33"/></name><argument_list pos:line="42" pos:column="33">(<argument><expr><name pos:line="42" pos:column="34">val<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="39">"Off"<pos:position pos:line="42" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="46"/></condition><then pos:line="42" pos:column="46"> <block pos:line="42" pos:column="47">{
                <expr_stmt><expr><name><name pos:line="43" pos:column="17">dc<pos:position pos:line="43" pos:column="19"/></name><operator pos:line="43" pos:column="19">-&gt;<pos:position pos:line="43" pos:column="24"/></operator><name pos:line="43" pos:column="21">authoritative<pos:position pos:line="43" pos:column="34"/></name></name> <operator pos:line="43" pos:column="35">=<pos:position pos:line="43" pos:column="36"/></operator> <literal type="number" pos:line="43" pos:column="37">0<pos:position pos:line="43" pos:column="38"/></literal></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="44" pos:column="14"/></block></then></if></elseif>
            <else pos:line="45" pos:column="13">else <block pos:line="45" pos:column="18">{
                <expr_stmt><expr><name pos:line="46" pos:column="17">badarg<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">=<pos:position pos:line="46" pos:column="25"/></operator> <literal type="number" pos:line="46" pos:column="26">1<pos:position pos:line="46" pos:column="27"/></literal></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
            }<pos:position pos:line="47" pos:column="14"/></block></else></if>
        }<pos:position pos:line="48" pos:column="10"/></block></then>
        <elseif pos:line="49" pos:column="9">else <if pos:line="49" pos:column="14">if <condition pos:line="49" pos:column="17">(<expr><operator pos:line="49" pos:column="18">!<pos:position pos:line="49" pos:column="19"/></operator><call><name pos:line="49" pos:column="19">strcasecmp<pos:position pos:line="49" pos:column="29"/></name><argument_list pos:line="49" pos:column="29">(<argument><expr><name pos:line="49" pos:column="30">var<pos:position pos:line="49" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="35">"DefaultUser"<pos:position pos:line="49" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="50"/></condition><then pos:line="49" pos:column="50"> <block pos:line="49" pos:column="51">{
            <expr_stmt><expr><name><name pos:line="50" pos:column="13">dc<pos:position pos:line="50" pos:column="15"/></name><operator pos:line="50" pos:column="15">-&gt;<pos:position pos:line="50" pos:column="20"/></operator><name pos:line="50" pos:column="17">default_user<pos:position pos:line="50" pos:column="29"/></name></name> <operator pos:line="50" pos:column="30">=<pos:position pos:line="50" pos:column="31"/></operator> <name pos:line="50" pos:column="32">val<pos:position pos:line="50" pos:column="35"/></name></expr>;<pos:position pos:line="50" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="51" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="52" pos:column="9">else <if pos:line="52" pos:column="14">if <condition pos:line="52" pos:column="17">(<expr><operator pos:line="52" pos:column="18">!<pos:position pos:line="52" pos:column="19"/></operator><call><name pos:line="52" pos:column="19">strcasecmp<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">var<pos:position pos:line="52" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="52" pos:column="35">"RequireBasicAuth"<pos:position pos:line="52" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="55"/></condition><then pos:line="52" pos:column="55"> <block pos:line="52" pos:column="56">{
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><operator pos:line="53" pos:column="17">!<pos:position pos:line="53" pos:column="18"/></operator><call><name pos:line="53" pos:column="18">strcasecmp<pos:position pos:line="53" pos:column="28"/></name><argument_list pos:line="53" pos:column="28">(<argument><expr><name pos:line="53" pos:column="29">val<pos:position pos:line="53" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="34">"On"<pos:position pos:line="53" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="53" pos:column="40"/></condition><then pos:line="53" pos:column="40"> <block pos:line="53" pos:column="41">{
                <expr_stmt><expr><name><name pos:line="54" pos:column="17">dc<pos:position pos:line="54" pos:column="19"/></name><operator pos:line="54" pos:column="19">-&gt;<pos:position pos:line="54" pos:column="24"/></operator><name pos:line="54" pos:column="21">require_basic_auth<pos:position pos:line="54" pos:column="39"/></name></name> <operator pos:line="54" pos:column="40">=<pos:position pos:line="54" pos:column="41"/></operator> <literal type="number" pos:line="54" pos:column="42">1<pos:position pos:line="54" pos:column="43"/></literal></expr>;<pos:position pos:line="54" pos:column="44"/></expr_stmt>
            }<pos:position pos:line="55" pos:column="14"/></block></then>
            <elseif pos:line="56" pos:column="13">else <if pos:line="56" pos:column="18">if <condition pos:line="56" pos:column="21">(<expr><operator pos:line="56" pos:column="22">!<pos:position pos:line="56" pos:column="23"/></operator><call><name pos:line="56" pos:column="23">strcasecmp<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">(<argument><expr><name pos:line="56" pos:column="34">val<pos:position pos:line="56" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="39">"Off"<pos:position pos:line="56" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="56" pos:column="46"/></condition><then pos:line="56" pos:column="46"> <block pos:line="56" pos:column="47">{
                <expr_stmt><expr><name><name pos:line="57" pos:column="17">dc<pos:position pos:line="57" pos:column="19"/></name><operator pos:line="57" pos:column="19">-&gt;<pos:position pos:line="57" pos:column="24"/></operator><name pos:line="57" pos:column="21">require_basic_auth<pos:position pos:line="57" pos:column="39"/></name></name> <operator pos:line="57" pos:column="40">=<pos:position pos:line="57" pos:column="41"/></operator> <literal type="number" pos:line="57" pos:column="42">0<pos:position pos:line="57" pos:column="43"/></literal></expr>;<pos:position pos:line="57" pos:column="44"/></expr_stmt>
            }<pos:position pos:line="58" pos:column="14"/></block></then></if></elseif>
            <else pos:line="59" pos:column="13">else <block pos:line="59" pos:column="18">{
                <expr_stmt><expr><name pos:line="60" pos:column="17">badarg<pos:position pos:line="60" pos:column="23"/></name> <operator pos:line="60" pos:column="24">=<pos:position pos:line="60" pos:column="25"/></operator> <literal type="number" pos:line="60" pos:column="26">1<pos:position pos:line="60" pos:column="27"/></literal></expr>;<pos:position pos:line="60" pos:column="28"/></expr_stmt>
            }<pos:position pos:line="61" pos:column="14"/></block></else></if>
        }<pos:position pos:line="62" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="63" pos:column="9">else <if pos:line="63" pos:column="14">if <condition pos:line="63" pos:column="17">(<expr><operator pos:line="63" pos:column="18">!<pos:position pos:line="63" pos:column="19"/></operator><call><name pos:line="63" pos:column="19">strcasecmp<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">var<pos:position pos:line="63" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="35">"UserExpr"<pos:position pos:line="63" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="63" pos:column="47"/></condition><then pos:line="63" pos:column="47"> <block pos:line="63" pos:column="48">{
            <decl_stmt><decl><type><specifier pos:line="64" pos:column="13">const<pos:position pos:line="64" pos:column="18"/></specifier> <name pos:line="64" pos:column="19">char<pos:position pos:line="64" pos:column="23"/></name> <modifier pos:line="64" pos:column="24">*<pos:position pos:line="64" pos:column="25"/></modifier></type><name pos:line="64" pos:column="25">err<pos:position pos:line="64" pos:column="28"/></name></decl>;<pos:position pos:line="64" pos:column="29"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">int<pos:position pos:line="65" pos:column="16"/></name></type> <name pos:line="65" pos:column="17">flags<pos:position pos:line="65" pos:column="22"/></name> <init pos:line="65" pos:column="23">= <expr><name pos:line="65" pos:column="25">AP_EXPR_FLAG_DONT_VARY<pos:position pos:line="65" pos:column="47"/></name> <operator pos:line="65" pos:column="48">|<pos:position pos:line="65" pos:column="49"/></operator> <name pos:line="65" pos:column="50">AP_EXPR_FLAG_RESTRICTED<pos:position pos:line="65" pos:column="73"/></name>
                <operator pos:line="66" pos:column="17">|<pos:position pos:line="66" pos:column="18"/></operator> <name pos:line="66" pos:column="19">AP_EXPR_FLAG_STRING_RESULT<pos:position pos:line="66" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="66" pos:column="46"/></decl_stmt>

            <expr_stmt><expr><name><name pos:line="68" pos:column="13">dc<pos:position pos:line="68" pos:column="15"/></name><operator pos:line="68" pos:column="15">-&gt;<pos:position pos:line="68" pos:column="20"/></operator><name pos:line="68" pos:column="17">user_expr<pos:position pos:line="68" pos:column="26"/></name></name> <operator pos:line="68" pos:column="27">=<pos:position pos:line="68" pos:column="28"/></operator> <call><name pos:line="68" pos:column="29">ap_expr_parse_cmd<pos:position pos:line="68" pos:column="46"/></name><argument_list pos:line="68" pos:column="46">(<argument><expr><name pos:line="68" pos:column="47">cmd<pos:position pos:line="68" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="52">val<pos:position pos:line="68" pos:column="55"/></name></expr></argument>,
                                              <argument><expr><name pos:line="69" pos:column="47">flags<pos:position pos:line="69" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="54">&amp;<pos:position pos:line="69" pos:column="59"/></operator><name pos:line="69" pos:column="55">err<pos:position pos:line="69" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="60">NULL<pos:position pos:line="69" pos:column="64"/></name></expr></argument>)<pos:position pos:line="69" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="66"/></expr_stmt>
            <if pos:line="70" pos:column="13">if <condition pos:line="70" pos:column="16">(<expr><name pos:line="70" pos:column="17">err<pos:position pos:line="70" pos:column="20"/></name></expr>)<pos:position pos:line="70" pos:column="21"/></condition><then pos:line="70" pos:column="21"> <block pos:line="70" pos:column="22">{
                <return pos:line="71" pos:column="17">return <expr><call><name pos:line="71" pos:column="24">apr_psprintf<pos:position pos:line="71" pos:column="36"/></name><argument_list pos:line="71" pos:column="36">(<argument><expr><name><name pos:line="71" pos:column="37">cmd<pos:position pos:line="71" pos:column="40"/></name><operator pos:line="71" pos:column="40">-&gt;<pos:position pos:line="71" pos:column="45"/></operator><name pos:line="71" pos:column="42">pool<pos:position pos:line="71" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="48">"%s: Error parsing '%s': '%s'"<pos:position pos:line="71" pos:column="78"/></literal></expr></argument>,
                                    <argument><expr><name pos:line="72" pos:column="37">dname<pos:position pos:line="72" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="44">val<pos:position pos:line="72" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="49">err<pos:position pos:line="72" pos:column="52"/></name></expr></argument>)<pos:position pos:line="72" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="54"/></return>
            }<pos:position pos:line="73" pos:column="14"/></block></then></if>
        }<pos:position pos:line="74" pos:column="10"/></block></then></if></elseif>
        <else pos:line="75" pos:column="9">else <block pos:line="75" pos:column="14">{
            <return pos:line="76" pos:column="13">return <expr><call><name pos:line="76" pos:column="20">apr_pstrcat<pos:position pos:line="76" pos:column="31"/></name><argument_list pos:line="76" pos:column="31">(<argument><expr><name><name pos:line="76" pos:column="32">cmd<pos:position pos:line="76" pos:column="35"/></name><operator pos:line="76" pos:column="35">-&gt;<pos:position pos:line="76" pos:column="40"/></operator><name pos:line="76" pos:column="37">pool<pos:position pos:line="76" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="43">dname<pos:position pos:line="76" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="50">": Unexpected option '"<pos:position pos:line="76" pos:column="73"/></literal></expr></argument>,
                               <argument><expr><name pos:line="77" pos:column="32">var<pos:position pos:line="77" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="37">"'"<pos:position pos:line="77" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="42">NULL<pos:position pos:line="77" pos:column="46"/></name></expr></argument>)<pos:position pos:line="77" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="48"/></return>
        }<pos:position pos:line="78" pos:column="10"/></block></else></if>
        <if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name pos:line="79" pos:column="13">badarg<pos:position pos:line="79" pos:column="19"/></name></expr>)<pos:position pos:line="79" pos:column="20"/></condition><then pos:line="79" pos:column="20"> <block pos:line="79" pos:column="21">{
            <return pos:line="80" pos:column="13">return <expr><call><name pos:line="80" pos:column="20">apr_pstrcat<pos:position pos:line="80" pos:column="31"/></name><argument_list pos:line="80" pos:column="31">(<argument><expr><name><name pos:line="80" pos:column="32">cmd<pos:position pos:line="80" pos:column="35"/></name><operator pos:line="80" pos:column="35">-&gt;<pos:position pos:line="80" pos:column="40"/></operator><name pos:line="80" pos:column="37">pool<pos:position pos:line="80" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="43">dname<pos:position pos:line="80" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="80" pos:column="50">": Bad argument '"<pos:position pos:line="80" pos:column="68"/></literal></expr></argument>,
                               <argument><expr><name pos:line="81" pos:column="32">val<pos:position pos:line="81" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="37">"' to option '"<pos:position pos:line="81" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="54">var<pos:position pos:line="81" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="81" pos:column="59">"'"<pos:position pos:line="81" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="64">NULL<pos:position pos:line="81" pos:column="68"/></name></expr></argument>)<pos:position pos:line="81" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="70"/></return>
        }<pos:position pos:line="82" pos:column="10"/></block></then></if>
    }<pos:position pos:line="83" pos:column="6"/></block></while>

    <return pos:line="85" pos:column="5">return <expr><name pos:line="85" pos:column="12">NULL<pos:position pos:line="85" pos:column="16"/></name></expr>;<pos:position pos:line="85" pos:column="17"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
