<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3094_httpd-2.4.9.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ap_expr_eval_comp<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">ap_expr_eval_ctx_t<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">ctx<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="55">const<pos:position pos:line="1" pos:column="60"/></specifier> <name pos:line="1" pos:column="61">ap_expr_t<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">node<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">ap_expr_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">e1<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><name><name pos:line="3" pos:column="27">node<pos:position pos:line="3" pos:column="31"/></name><operator pos:line="3" pos:column="31">-&gt;<pos:position pos:line="3" pos:column="36"/></operator><name pos:line="3" pos:column="33">node_arg1<pos:position pos:line="3" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">ap_expr_t<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">e2<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name><name pos:line="4" pos:column="27">node<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">-&gt;<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="33">node_arg2<pos:position pos:line="4" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <switch pos:line="5" pos:column="5">switch <condition pos:line="5" pos:column="12">(<expr><name><name pos:line="5" pos:column="13">node<pos:position pos:line="5" pos:column="17"/></name><operator pos:line="5" pos:column="17">-&gt;<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="19">node_op<pos:position pos:line="5" pos:column="26"/></name></name></expr>)<pos:position pos:line="5" pos:column="27"/></condition> <block pos:line="5" pos:column="28">{
    <case pos:line="6" pos:column="5">case <expr><name pos:line="6" pos:column="10">op_EQ<pos:position pos:line="6" pos:column="15"/></name></expr>:<pos:position pos:line="6" pos:column="16"/></case>
        <return pos:line="7" pos:column="9">return <expr><operator pos:line="7" pos:column="16">(<pos:position pos:line="7" pos:column="17"/></operator><call><name pos:line="7" pos:column="17">intstrcmp<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><call><name pos:line="7" pos:column="27">ap_expr_eval_word<pos:position pos:line="7" pos:column="44"/></name><argument_list pos:line="7" pos:column="44">(<argument><expr><name pos:line="7" pos:column="45">ctx<pos:position pos:line="7" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="50">e1<pos:position pos:line="7" pos:column="52"/></name></expr></argument>)<pos:position pos:line="7" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="7" pos:column="55">ap_expr_eval_word<pos:position pos:line="7" pos:column="72"/></name><argument_list pos:line="7" pos:column="72">(<argument><expr><name pos:line="7" pos:column="73">ctx<pos:position pos:line="7" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="78">e2<pos:position pos:line="7" pos:column="80"/></name></expr></argument>)<pos:position pos:line="7" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="82"/></argument_list></call> <operator pos:line="7" pos:column="83">==<pos:position pos:line="7" pos:column="85"/></operator> <literal type="number" pos:line="7" pos:column="86">0<pos:position pos:line="7" pos:column="87"/></literal><operator pos:line="7" pos:column="87">)<pos:position pos:line="7" pos:column="88"/></operator></expr>;<pos:position pos:line="7" pos:column="89"/></return>
    <case pos:line="8" pos:column="5">case <expr><name pos:line="8" pos:column="10">op_NE<pos:position pos:line="8" pos:column="15"/></name></expr>:<pos:position pos:line="8" pos:column="16"/></case>
        <return pos:line="9" pos:column="9">return <expr><operator pos:line="9" pos:column="16">(<pos:position pos:line="9" pos:column="17"/></operator><call><name pos:line="9" pos:column="17">intstrcmp<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><call><name pos:line="9" pos:column="27">ap_expr_eval_word<pos:position pos:line="9" pos:column="44"/></name><argument_list pos:line="9" pos:column="44">(<argument><expr><name pos:line="9" pos:column="45">ctx<pos:position pos:line="9" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="50">e1<pos:position pos:line="9" pos:column="52"/></name></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="9" pos:column="55">ap_expr_eval_word<pos:position pos:line="9" pos:column="72"/></name><argument_list pos:line="9" pos:column="72">(<argument><expr><name pos:line="9" pos:column="73">ctx<pos:position pos:line="9" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="78">e2<pos:position pos:line="9" pos:column="80"/></name></expr></argument>)<pos:position pos:line="9" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="82"/></argument_list></call> <operator pos:line="9" pos:column="83">!=<pos:position pos:line="9" pos:column="85"/></operator> <literal type="number" pos:line="9" pos:column="86">0<pos:position pos:line="9" pos:column="87"/></literal><operator pos:line="9" pos:column="87">)<pos:position pos:line="9" pos:column="88"/></operator></expr>;<pos:position pos:line="9" pos:column="89"/></return>
    <case pos:line="10" pos:column="5">case <expr><name pos:line="10" pos:column="10">op_LT<pos:position pos:line="10" pos:column="15"/></name></expr>:<pos:position pos:line="10" pos:column="16"/></case>
        <return pos:line="11" pos:column="9">return <expr><operator pos:line="11" pos:column="16">(<pos:position pos:line="11" pos:column="17"/></operator><call><name pos:line="11" pos:column="17">intstrcmp<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><call><name pos:line="11" pos:column="27">ap_expr_eval_word<pos:position pos:line="11" pos:column="44"/></name><argument_list pos:line="11" pos:column="44">(<argument><expr><name pos:line="11" pos:column="45">ctx<pos:position pos:line="11" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="50">e1<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="55">ap_expr_eval_word<pos:position pos:line="11" pos:column="72"/></name><argument_list pos:line="11" pos:column="72">(<argument><expr><name pos:line="11" pos:column="73">ctx<pos:position pos:line="11" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="78">e2<pos:position pos:line="11" pos:column="80"/></name></expr></argument>)<pos:position pos:line="11" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="82"/></argument_list></call> <operator pos:line="11" pos:column="83">&lt;<pos:position pos:line="11" pos:column="87"/></operator>  <literal type="number" pos:line="11" pos:column="86">0<pos:position pos:line="11" pos:column="87"/></literal><operator pos:line="11" pos:column="87">)<pos:position pos:line="11" pos:column="88"/></operator></expr>;<pos:position pos:line="11" pos:column="89"/></return>
    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">op_LE<pos:position pos:line="12" pos:column="15"/></name></expr>:<pos:position pos:line="12" pos:column="16"/></case>
        <return pos:line="13" pos:column="9">return <expr><operator pos:line="13" pos:column="16">(<pos:position pos:line="13" pos:column="17"/></operator><call><name pos:line="13" pos:column="17">intstrcmp<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><call><name pos:line="13" pos:column="27">ap_expr_eval_word<pos:position pos:line="13" pos:column="44"/></name><argument_list pos:line="13" pos:column="44">(<argument><expr><name pos:line="13" pos:column="45">ctx<pos:position pos:line="13" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="50">e1<pos:position pos:line="13" pos:column="52"/></name></expr></argument>)<pos:position pos:line="13" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="13" pos:column="55">ap_expr_eval_word<pos:position pos:line="13" pos:column="72"/></name><argument_list pos:line="13" pos:column="72">(<argument><expr><name pos:line="13" pos:column="73">ctx<pos:position pos:line="13" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="78">e2<pos:position pos:line="13" pos:column="80"/></name></expr></argument>)<pos:position pos:line="13" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="13" pos:column="82"/></argument_list></call> <operator pos:line="13" pos:column="83">&lt;=<pos:position pos:line="13" pos:column="88"/></operator> <literal type="number" pos:line="13" pos:column="86">0<pos:position pos:line="13" pos:column="87"/></literal><operator pos:line="13" pos:column="87">)<pos:position pos:line="13" pos:column="88"/></operator></expr>;<pos:position pos:line="13" pos:column="89"/></return>
    <case pos:line="14" pos:column="5">case <expr><name pos:line="14" pos:column="10">op_GT<pos:position pos:line="14" pos:column="15"/></name></expr>:<pos:position pos:line="14" pos:column="16"/></case>
        <return pos:line="15" pos:column="9">return <expr><operator pos:line="15" pos:column="16">(<pos:position pos:line="15" pos:column="17"/></operator><call><name pos:line="15" pos:column="17">intstrcmp<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><call><name pos:line="15" pos:column="27">ap_expr_eval_word<pos:position pos:line="15" pos:column="44"/></name><argument_list pos:line="15" pos:column="44">(<argument><expr><name pos:line="15" pos:column="45">ctx<pos:position pos:line="15" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="50">e1<pos:position pos:line="15" pos:column="52"/></name></expr></argument>)<pos:position pos:line="15" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="55">ap_expr_eval_word<pos:position pos:line="15" pos:column="72"/></name><argument_list pos:line="15" pos:column="72">(<argument><expr><name pos:line="15" pos:column="73">ctx<pos:position pos:line="15" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="78">e2<pos:position pos:line="15" pos:column="80"/></name></expr></argument>)<pos:position pos:line="15" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="15" pos:column="82"/></argument_list></call> <operator pos:line="15" pos:column="83">&gt;<pos:position pos:line="15" pos:column="87"/></operator>  <literal type="number" pos:line="15" pos:column="86">0<pos:position pos:line="15" pos:column="87"/></literal><operator pos:line="15" pos:column="87">)<pos:position pos:line="15" pos:column="88"/></operator></expr>;<pos:position pos:line="15" pos:column="89"/></return>
    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">op_GE<pos:position pos:line="16" pos:column="15"/></name></expr>:<pos:position pos:line="16" pos:column="16"/></case>
        <return pos:line="17" pos:column="9">return <expr><operator pos:line="17" pos:column="16">(<pos:position pos:line="17" pos:column="17"/></operator><call><name pos:line="17" pos:column="17">intstrcmp<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><call><name pos:line="17" pos:column="27">ap_expr_eval_word<pos:position pos:line="17" pos:column="44"/></name><argument_list pos:line="17" pos:column="44">(<argument><expr><name pos:line="17" pos:column="45">ctx<pos:position pos:line="17" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="50">e1<pos:position pos:line="17" pos:column="52"/></name></expr></argument>)<pos:position pos:line="17" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="17" pos:column="55">ap_expr_eval_word<pos:position pos:line="17" pos:column="72"/></name><argument_list pos:line="17" pos:column="72">(<argument><expr><name pos:line="17" pos:column="73">ctx<pos:position pos:line="17" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="78">e2<pos:position pos:line="17" pos:column="80"/></name></expr></argument>)<pos:position pos:line="17" pos:column="81"/></argument_list></call></expr></argument>)<pos:position pos:line="17" pos:column="82"/></argument_list></call> <operator pos:line="17" pos:column="83">&gt;=<pos:position pos:line="17" pos:column="88"/></operator> <literal type="number" pos:line="17" pos:column="86">0<pos:position pos:line="17" pos:column="87"/></literal><operator pos:line="17" pos:column="87">)<pos:position pos:line="17" pos:column="88"/></operator></expr>;<pos:position pos:line="17" pos:column="89"/></return>
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">op_STR_EQ<pos:position pos:line="18" pos:column="19"/></name></expr>:<pos:position pos:line="18" pos:column="20"/></case>
        <return pos:line="19" pos:column="9">return <expr><operator pos:line="19" pos:column="16">(<pos:position pos:line="19" pos:column="17"/></operator><call><name pos:line="19" pos:column="17">strcmp<pos:position pos:line="19" pos:column="23"/></name><argument_list pos:line="19" pos:column="23">(<argument><expr><call><name pos:line="19" pos:column="24">ap_expr_eval_word<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name pos:line="19" pos:column="42">ctx<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">e1<pos:position pos:line="19" pos:column="49"/></name></expr></argument>)<pos:position pos:line="19" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="19" pos:column="52">ap_expr_eval_word<pos:position pos:line="19" pos:column="69"/></name><argument_list pos:line="19" pos:column="69">(<argument><expr><name pos:line="19" pos:column="70">ctx<pos:position pos:line="19" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="75">e2<pos:position pos:line="19" pos:column="77"/></name></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="19" pos:column="79"/></argument_list></call> <operator pos:line="19" pos:column="80">==<pos:position pos:line="19" pos:column="82"/></operator> <literal type="number" pos:line="19" pos:column="83">0<pos:position pos:line="19" pos:column="84"/></literal><operator pos:line="19" pos:column="84">)<pos:position pos:line="19" pos:column="85"/></operator></expr>;<pos:position pos:line="19" pos:column="86"/></return>
    <case pos:line="20" pos:column="5">case <expr><name pos:line="20" pos:column="10">op_STR_NE<pos:position pos:line="20" pos:column="19"/></name></expr>:<pos:position pos:line="20" pos:column="20"/></case>
        <return pos:line="21" pos:column="9">return <expr><operator pos:line="21" pos:column="16">(<pos:position pos:line="21" pos:column="17"/></operator><call><name pos:line="21" pos:column="17">strcmp<pos:position pos:line="21" pos:column="23"/></name><argument_list pos:line="21" pos:column="23">(<argument><expr><call><name pos:line="21" pos:column="24">ap_expr_eval_word<pos:position pos:line="21" pos:column="41"/></name><argument_list pos:line="21" pos:column="41">(<argument><expr><name pos:line="21" pos:column="42">ctx<pos:position pos:line="21" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="47">e1<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="52">ap_expr_eval_word<pos:position pos:line="21" pos:column="69"/></name><argument_list pos:line="21" pos:column="69">(<argument><expr><name pos:line="21" pos:column="70">ctx<pos:position pos:line="21" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="75">e2<pos:position pos:line="21" pos:column="77"/></name></expr></argument>)<pos:position pos:line="21" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="21" pos:column="79"/></argument_list></call> <operator pos:line="21" pos:column="80">!=<pos:position pos:line="21" pos:column="82"/></operator> <literal type="number" pos:line="21" pos:column="83">0<pos:position pos:line="21" pos:column="84"/></literal><operator pos:line="21" pos:column="84">)<pos:position pos:line="21" pos:column="85"/></operator></expr>;<pos:position pos:line="21" pos:column="86"/></return>
    <case pos:line="22" pos:column="5">case <expr><name pos:line="22" pos:column="10">op_STR_LT<pos:position pos:line="22" pos:column="19"/></name></expr>:<pos:position pos:line="22" pos:column="20"/></case>
        <return pos:line="23" pos:column="9">return <expr><operator pos:line="23" pos:column="16">(<pos:position pos:line="23" pos:column="17"/></operator><call><name pos:line="23" pos:column="17">strcmp<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><call><name pos:line="23" pos:column="24">ap_expr_eval_word<pos:position pos:line="23" pos:column="41"/></name><argument_list pos:line="23" pos:column="41">(<argument><expr><name pos:line="23" pos:column="42">ctx<pos:position pos:line="23" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="47">e1<pos:position pos:line="23" pos:column="49"/></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="52">ap_expr_eval_word<pos:position pos:line="23" pos:column="69"/></name><argument_list pos:line="23" pos:column="69">(<argument><expr><name pos:line="23" pos:column="70">ctx<pos:position pos:line="23" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="75">e2<pos:position pos:line="23" pos:column="77"/></name></expr></argument>)<pos:position pos:line="23" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="79"/></argument_list></call> <operator pos:line="23" pos:column="80">&lt;<pos:position pos:line="23" pos:column="84"/></operator>  <literal type="number" pos:line="23" pos:column="83">0<pos:position pos:line="23" pos:column="84"/></literal><operator pos:line="23" pos:column="84">)<pos:position pos:line="23" pos:column="85"/></operator></expr>;<pos:position pos:line="23" pos:column="86"/></return>
    <case pos:line="24" pos:column="5">case <expr><name pos:line="24" pos:column="10">op_STR_LE<pos:position pos:line="24" pos:column="19"/></name></expr>:<pos:position pos:line="24" pos:column="20"/></case>
        <return pos:line="25" pos:column="9">return <expr><operator pos:line="25" pos:column="16">(<pos:position pos:line="25" pos:column="17"/></operator><call><name pos:line="25" pos:column="17">strcmp<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><call><name pos:line="25" pos:column="24">ap_expr_eval_word<pos:position pos:line="25" pos:column="41"/></name><argument_list pos:line="25" pos:column="41">(<argument><expr><name pos:line="25" pos:column="42">ctx<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">e1<pos:position pos:line="25" pos:column="49"/></name></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="25" pos:column="52">ap_expr_eval_word<pos:position pos:line="25" pos:column="69"/></name><argument_list pos:line="25" pos:column="69">(<argument><expr><name pos:line="25" pos:column="70">ctx<pos:position pos:line="25" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="75">e2<pos:position pos:line="25" pos:column="77"/></name></expr></argument>)<pos:position pos:line="25" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="25" pos:column="79"/></argument_list></call> <operator pos:line="25" pos:column="80">&lt;=<pos:position pos:line="25" pos:column="85"/></operator> <literal type="number" pos:line="25" pos:column="83">0<pos:position pos:line="25" pos:column="84"/></literal><operator pos:line="25" pos:column="84">)<pos:position pos:line="25" pos:column="85"/></operator></expr>;<pos:position pos:line="25" pos:column="86"/></return>
    <case pos:line="26" pos:column="5">case <expr><name pos:line="26" pos:column="10">op_STR_GT<pos:position pos:line="26" pos:column="19"/></name></expr>:<pos:position pos:line="26" pos:column="20"/></case>
        <return pos:line="27" pos:column="9">return <expr><operator pos:line="27" pos:column="16">(<pos:position pos:line="27" pos:column="17"/></operator><call><name pos:line="27" pos:column="17">strcmp<pos:position pos:line="27" pos:column="23"/></name><argument_list pos:line="27" pos:column="23">(<argument><expr><call><name pos:line="27" pos:column="24">ap_expr_eval_word<pos:position pos:line="27" pos:column="41"/></name><argument_list pos:line="27" pos:column="41">(<argument><expr><name pos:line="27" pos:column="42">ctx<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">e1<pos:position pos:line="27" pos:column="49"/></name></expr></argument>)<pos:position pos:line="27" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="52">ap_expr_eval_word<pos:position pos:line="27" pos:column="69"/></name><argument_list pos:line="27" pos:column="69">(<argument><expr><name pos:line="27" pos:column="70">ctx<pos:position pos:line="27" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="75">e2<pos:position pos:line="27" pos:column="77"/></name></expr></argument>)<pos:position pos:line="27" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="79"/></argument_list></call> <operator pos:line="27" pos:column="80">&gt;<pos:position pos:line="27" pos:column="84"/></operator>  <literal type="number" pos:line="27" pos:column="83">0<pos:position pos:line="27" pos:column="84"/></literal><operator pos:line="27" pos:column="84">)<pos:position pos:line="27" pos:column="85"/></operator></expr>;<pos:position pos:line="27" pos:column="86"/></return>
    <case pos:line="28" pos:column="5">case <expr><name pos:line="28" pos:column="10">op_STR_GE<pos:position pos:line="28" pos:column="19"/></name></expr>:<pos:position pos:line="28" pos:column="20"/></case>
        <return pos:line="29" pos:column="9">return <expr><operator pos:line="29" pos:column="16">(<pos:position pos:line="29" pos:column="17"/></operator><call><name pos:line="29" pos:column="17">strcmp<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><call><name pos:line="29" pos:column="24">ap_expr_eval_word<pos:position pos:line="29" pos:column="41"/></name><argument_list pos:line="29" pos:column="41">(<argument><expr><name pos:line="29" pos:column="42">ctx<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="47">e1<pos:position pos:line="29" pos:column="49"/></name></expr></argument>)<pos:position pos:line="29" pos:column="50"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="52">ap_expr_eval_word<pos:position pos:line="29" pos:column="69"/></name><argument_list pos:line="29" pos:column="69">(<argument><expr><name pos:line="29" pos:column="70">ctx<pos:position pos:line="29" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="75">e2<pos:position pos:line="29" pos:column="77"/></name></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="29" pos:column="79"/></argument_list></call> <operator pos:line="29" pos:column="80">&gt;=<pos:position pos:line="29" pos:column="85"/></operator> <literal type="number" pos:line="29" pos:column="83">0<pos:position pos:line="29" pos:column="84"/></literal><operator pos:line="29" pos:column="84">)<pos:position pos:line="29" pos:column="85"/></operator></expr>;<pos:position pos:line="29" pos:column="86"/></return>
    <case pos:line="30" pos:column="5">case <expr><name pos:line="30" pos:column="10">op_IN<pos:position pos:line="30" pos:column="15"/></name></expr>:<pos:position pos:line="30" pos:column="16"/></case> <block pos:line="30" pos:column="17">{
            <decl_stmt><decl><type><specifier pos:line="31" pos:column="13">const<pos:position pos:line="31" pos:column="18"/></specifier> <name pos:line="31" pos:column="19">char<pos:position pos:line="31" pos:column="23"/></name> <modifier pos:line="31" pos:column="24">*<pos:position pos:line="31" pos:column="25"/></modifier></type><name pos:line="31" pos:column="25">needle<pos:position pos:line="31" pos:column="31"/></name> <init pos:line="31" pos:column="32">= <expr><call><name pos:line="31" pos:column="34">ap_expr_eval_word<pos:position pos:line="31" pos:column="51"/></name><argument_list pos:line="31" pos:column="51">(<argument><expr><name pos:line="31" pos:column="52">ctx<pos:position pos:line="31" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="57">e1<pos:position pos:line="31" pos:column="59"/></name></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="31" pos:column="61"/></decl_stmt>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(<expr><name><name pos:line="32" pos:column="17">e2<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">node_op<pos:position pos:line="32" pos:column="28"/></name></name> <operator pos:line="32" pos:column="29">==<pos:position pos:line="32" pos:column="31"/></operator> <name pos:line="32" pos:column="32">op_ListElement<pos:position pos:line="32" pos:column="46"/></name></expr>)<pos:position pos:line="32" pos:column="47"/></condition><then pos:line="32" pos:column="47"> <block pos:line="32" pos:column="48">{
                <do pos:line="33" pos:column="17">do <block pos:line="33" pos:column="20">{
                    <decl_stmt><decl><type><specifier pos:line="34" pos:column="21">const<pos:position pos:line="34" pos:column="26"/></specifier> <name pos:line="34" pos:column="27">ap_expr_t<pos:position pos:line="34" pos:column="36"/></name> <modifier pos:line="34" pos:column="37">*<pos:position pos:line="34" pos:column="38"/></modifier></type><name pos:line="34" pos:column="38">val<pos:position pos:line="34" pos:column="41"/></name> <init pos:line="34" pos:column="42">= <expr><name><name pos:line="34" pos:column="44">e2<pos:position pos:line="34" pos:column="46"/></name><operator pos:line="34" pos:column="46">-&gt;<pos:position pos:line="34" pos:column="51"/></operator><name pos:line="34" pos:column="48">node_arg1<pos:position pos:line="34" pos:column="57"/></name></name></expr></init></decl>;<pos:position pos:line="34" pos:column="58"/></decl_stmt>
                    <expr_stmt><expr><call><name pos:line="35" pos:column="21">AP_DEBUG_ASSERT<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">(<argument><expr><name><name pos:line="35" pos:column="37">e2<pos:position pos:line="35" pos:column="39"/></name><operator pos:line="35" pos:column="39">-&gt;<pos:position pos:line="35" pos:column="44"/></operator><name pos:line="35" pos:column="41">node_op<pos:position pos:line="35" pos:column="48"/></name></name> <operator pos:line="35" pos:column="49">==<pos:position pos:line="35" pos:column="51"/></operator> <name pos:line="35" pos:column="52">op_ListElement<pos:position pos:line="35" pos:column="66"/></name></expr></argument>)<pos:position pos:line="35" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="68"/></expr_stmt>
                    <if pos:line="36" pos:column="21">if <condition pos:line="36" pos:column="24">(<expr><call><name pos:line="36" pos:column="25">strcmp<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><name pos:line="36" pos:column="32">needle<pos:position pos:line="36" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="40">ap_expr_eval_word<pos:position pos:line="36" pos:column="57"/></name><argument_list pos:line="36" pos:column="57">(<argument><expr><name pos:line="36" pos:column="58">ctx<pos:position pos:line="36" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="63">val<pos:position pos:line="36" pos:column="66"/></name></expr></argument>)<pos:position pos:line="36" pos:column="67"/></argument_list></call></expr></argument>)<pos:position pos:line="36" pos:column="68"/></argument_list></call> <operator pos:line="36" pos:column="69">==<pos:position pos:line="36" pos:column="71"/></operator> <literal type="number" pos:line="36" pos:column="72">0<pos:position pos:line="36" pos:column="73"/></literal></expr>)<pos:position pos:line="36" pos:column="74"/></condition><then pos:line="36" pos:column="74"> <block pos:line="36" pos:column="75">{
                        <return pos:line="37" pos:column="25">return <expr><literal type="number" pos:line="37" pos:column="32">1<pos:position pos:line="37" pos:column="33"/></literal></expr>;<pos:position pos:line="37" pos:column="34"/></return>
                        <break pos:line="38" pos:column="25">break;<pos:position pos:line="38" pos:column="31"/></break>
                    }<pos:position pos:line="39" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><name pos:line="40" pos:column="21">e2<pos:position pos:line="40" pos:column="23"/></name> <operator pos:line="40" pos:column="24">=<pos:position pos:line="40" pos:column="25"/></operator> <name><name pos:line="40" pos:column="26">e2<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">-&gt;<pos:position pos:line="40" pos:column="33"/></operator><name pos:line="40" pos:column="30">node_arg2<pos:position pos:line="40" pos:column="39"/></name></name></expr>;<pos:position pos:line="40" pos:column="40"/></expr_stmt>
                }<pos:position pos:line="41" pos:column="18"/></block> while <condition pos:line="41" pos:column="25">(<expr><name pos:line="41" pos:column="26">e2<pos:position pos:line="41" pos:column="28"/></name> <operator pos:line="41" pos:column="29">!=<pos:position pos:line="41" pos:column="31"/></operator> <name pos:line="41" pos:column="32">NULL<pos:position pos:line="41" pos:column="36"/></name></expr>)<pos:position pos:line="41" pos:column="37"/></condition>;<pos:position pos:line="41" pos:column="38"/></do>
            }<pos:position pos:line="42" pos:column="14"/></block></then>
            <elseif pos:line="43" pos:column="13">else <if pos:line="43" pos:column="18">if <condition pos:line="43" pos:column="21">(<expr><name><name pos:line="43" pos:column="22">e2<pos:position pos:line="43" pos:column="24"/></name><operator pos:line="43" pos:column="24">-&gt;<pos:position pos:line="43" pos:column="29"/></operator><name pos:line="43" pos:column="26">node_op<pos:position pos:line="43" pos:column="33"/></name></name> <operator pos:line="43" pos:column="34">==<pos:position pos:line="43" pos:column="36"/></operator> <name pos:line="43" pos:column="37">op_ListFuncCall<pos:position pos:line="43" pos:column="52"/></name></expr>)<pos:position pos:line="43" pos:column="53"/></condition><then pos:line="43" pos:column="53"> <block pos:line="43" pos:column="54">{
                <decl_stmt><decl><type><specifier pos:line="44" pos:column="17">const<pos:position pos:line="44" pos:column="22"/></specifier> <name pos:line="44" pos:column="23">ap_expr_t<pos:position pos:line="44" pos:column="32"/></name> <modifier pos:line="44" pos:column="33">*<pos:position pos:line="44" pos:column="34"/></modifier></type><name pos:line="44" pos:column="34">info<pos:position pos:line="44" pos:column="38"/></name> <init pos:line="44" pos:column="39">= <expr><name><name pos:line="44" pos:column="41">e2<pos:position pos:line="44" pos:column="43"/></name><operator pos:line="44" pos:column="43">-&gt;<pos:position pos:line="44" pos:column="48"/></operator><name pos:line="44" pos:column="45">node_arg1<pos:position pos:line="44" pos:column="54"/></name></name></expr></init></decl>;<pos:position pos:line="44" pos:column="55"/></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="45" pos:column="17">const<pos:position pos:line="45" pos:column="22"/></specifier> <name pos:line="45" pos:column="23">ap_expr_t<pos:position pos:line="45" pos:column="32"/></name> <modifier pos:line="45" pos:column="33">*<pos:position pos:line="45" pos:column="34"/></modifier></type><name pos:line="45" pos:column="34">arg<pos:position pos:line="45" pos:column="37"/></name> <init pos:line="45" pos:column="38">= <expr><name><name pos:line="45" pos:column="40">e2<pos:position pos:line="45" pos:column="42"/></name><operator pos:line="45" pos:column="42">-&gt;<pos:position pos:line="45" pos:column="47"/></operator><name pos:line="45" pos:column="44">node_arg2<pos:position pos:line="45" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="45" pos:column="54"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">ap_expr_list_func_t<pos:position pos:line="46" pos:column="36"/></name> <modifier pos:line="46" pos:column="37">*<pos:position pos:line="46" pos:column="38"/></modifier></type><name pos:line="46" pos:column="38">func<pos:position pos:line="46" pos:column="42"/></name> <init pos:line="46" pos:column="43">= <expr><operator pos:line="46" pos:column="45">(<pos:position pos:line="46" pos:column="46"/></operator><name pos:line="46" pos:column="46">ap_expr_list_func_t<pos:position pos:line="46" pos:column="65"/></name> <operator pos:line="46" pos:column="66">*<pos:position pos:line="46" pos:column="67"/></operator><operator pos:line="46" pos:column="67">)<pos:position pos:line="46" pos:column="68"/></operator><name><name pos:line="46" pos:column="68">info<pos:position pos:line="46" pos:column="72"/></name><operator pos:line="46" pos:column="72">-&gt;<pos:position pos:line="46" pos:column="77"/></operator><name pos:line="46" pos:column="74">node_arg1<pos:position pos:line="46" pos:column="83"/></name></name></expr></init></decl>;<pos:position pos:line="46" pos:column="84"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="47" pos:column="17">apr_array_header_t<pos:position pos:line="47" pos:column="35"/></name> <modifier pos:line="47" pos:column="36">*<pos:position pos:line="47" pos:column="37"/></modifier></type><name pos:line="47" pos:column="37">haystack<pos:position pos:line="47" pos:column="45"/></name></decl>;<pos:position pos:line="47" pos:column="46"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="48" pos:column="17">int<pos:position pos:line="48" pos:column="20"/></name></type> <name pos:line="48" pos:column="21">i<pos:position pos:line="48" pos:column="22"/></name> <init pos:line="48" pos:column="23">= <expr><literal type="number" pos:line="48" pos:column="25">0<pos:position pos:line="48" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="48" pos:column="27"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="49" pos:column="17">AP_DEBUG_ASSERT<pos:position pos:line="49" pos:column="32"/></name><argument_list pos:line="49" pos:column="32">(<argument><expr><name pos:line="49" pos:column="33">func<pos:position pos:line="49" pos:column="37"/></name> <operator pos:line="49" pos:column="38">!=<pos:position pos:line="49" pos:column="40"/></operator> <name pos:line="49" pos:column="41">NULL<pos:position pos:line="49" pos:column="45"/></name></expr></argument>)<pos:position pos:line="49" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="47"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">AP_DEBUG_ASSERT<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name><name pos:line="50" pos:column="33">info<pos:position pos:line="50" pos:column="37"/></name><operator pos:line="50" pos:column="37">-&gt;<pos:position pos:line="50" pos:column="42"/></operator><name pos:line="50" pos:column="39">node_op<pos:position pos:line="50" pos:column="46"/></name></name> <operator pos:line="50" pos:column="47">==<pos:position pos:line="50" pos:column="49"/></operator> <name pos:line="50" pos:column="50">op_ListFuncInfo<pos:position pos:line="50" pos:column="65"/></name></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="67"/></expr_stmt>
                <expr_stmt><expr><name pos:line="51" pos:column="17">haystack<pos:position pos:line="51" pos:column="25"/></name> <operator pos:line="51" pos:column="26">=<pos:position pos:line="51" pos:column="27"/></operator> <call pos:line="51" pos:column="28">(<modifier pos:line="51" pos:column="29">*<pos:position pos:line="51" pos:column="30"/></modifier><name pos:line="51" pos:column="30">func<pos:position pos:line="51" pos:column="34"/></name>)<argument_list pos:line="51" pos:column="35">(<argument><expr><name pos:line="51" pos:column="36">ctx<pos:position pos:line="51" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="41">info<pos:position pos:line="51" pos:column="45"/></name><operator pos:line="51" pos:column="45">-&gt;<pos:position pos:line="51" pos:column="50"/></operator><name pos:line="51" pos:column="47">node_arg2<pos:position pos:line="51" pos:column="56"/></name></name></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="58">ap_expr_eval_word<pos:position pos:line="51" pos:column="75"/></name><argument_list pos:line="51" pos:column="75">(<argument><expr><name pos:line="51" pos:column="76">ctx<pos:position pos:line="51" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="81">arg<pos:position pos:line="51" pos:column="84"/></name></expr></argument>)<pos:position pos:line="51" pos:column="85"/></argument_list></call></expr></argument>)<pos:position pos:line="51" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="87"/></expr_stmt>
                <if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><name pos:line="52" pos:column="21">haystack<pos:position pos:line="52" pos:column="29"/></name> <operator pos:line="52" pos:column="30">==<pos:position pos:line="52" pos:column="32"/></operator> <name pos:line="52" pos:column="33">NULL<pos:position pos:line="52" pos:column="37"/></name></expr>)<pos:position pos:line="52" pos:column="38"/></condition><then pos:line="52" pos:column="38">
                    <block type="pseudo"><return pos:line="53" pos:column="21">return <expr><literal type="number" pos:line="53" pos:column="28">0<pos:position pos:line="53" pos:column="29"/></literal></expr>;<pos:position pos:line="53" pos:column="30"/></return></block></then></if>
                <for pos:line="54" pos:column="17">for <control pos:line="54" pos:column="21">(<init pos:line="54" pos:column="22">;<pos:position pos:line="54" pos:column="23"/></init> <condition><expr><name pos:line="54" pos:column="24">i<pos:position pos:line="54" pos:column="25"/></name> <operator pos:line="54" pos:column="26">&lt;<pos:position pos:line="54" pos:column="30"/></operator> <name><name pos:line="54" pos:column="28">haystack<pos:position pos:line="54" pos:column="36"/></name><operator pos:line="54" pos:column="36">-&gt;<pos:position pos:line="54" pos:column="41"/></operator><name pos:line="54" pos:column="38">nelts<pos:position pos:line="54" pos:column="43"/></name></name></expr>;<pos:position pos:line="54" pos:column="44"/></condition> <incr><expr><name pos:line="54" pos:column="45">i<pos:position pos:line="54" pos:column="46"/></name><operator pos:line="54" pos:column="46">++<pos:position pos:line="54" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="54" pos:column="49"/></control> <block pos:line="54" pos:column="50">{
                    <if pos:line="55" pos:column="21">if <condition pos:line="55" pos:column="24">(<expr><call><name pos:line="55" pos:column="25">strcmp<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">(<argument><expr><name pos:line="55" pos:column="32">needle<pos:position pos:line="55" pos:column="38"/></name></expr></argument>, <argument><expr><call><name pos:line="55" pos:column="40">APR_ARRAY_IDX<pos:position pos:line="55" pos:column="53"/></name><argument_list pos:line="55" pos:column="53">(<argument><expr><name pos:line="55" pos:column="54">haystack<pos:position pos:line="55" pos:column="62"/></name></expr></argument>,<argument><expr><name pos:line="55" pos:column="63">i<pos:position pos:line="55" pos:column="64"/></name></expr></argument>,<argument><expr><name pos:line="55" pos:column="65">char<pos:position pos:line="55" pos:column="69"/></name> <operator pos:line="55" pos:column="70">*<pos:position pos:line="55" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="55" pos:column="72"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="73"/></argument_list></call> <operator pos:line="55" pos:column="74">==<pos:position pos:line="55" pos:column="76"/></operator> <literal type="number" pos:line="55" pos:column="77">0<pos:position pos:line="55" pos:column="78"/></literal></expr>)<pos:position pos:line="55" pos:column="79"/></condition><then pos:line="55" pos:column="79">
                        <block type="pseudo"><return pos:line="56" pos:column="25">return <expr><literal type="number" pos:line="56" pos:column="32">1<pos:position pos:line="56" pos:column="33"/></literal></expr>;<pos:position pos:line="56" pos:column="34"/></return></block></then></if>
                }<pos:position pos:line="57" pos:column="18"/></block></for>
            }<pos:position pos:line="58" pos:column="14"/></block></then></if></elseif></if>
            <return pos:line="59" pos:column="13">return <expr><literal type="number" pos:line="59" pos:column="20">0<pos:position pos:line="59" pos:column="21"/></literal></expr>;<pos:position pos:line="59" pos:column="22"/></return>
        }<pos:position pos:line="60" pos:column="10"/></block>
    <case pos:line="61" pos:column="5">case <expr><name pos:line="61" pos:column="10">op_REG<pos:position pos:line="61" pos:column="16"/></name></expr>:<pos:position pos:line="61" pos:column="17"/></case>
    <case pos:line="62" pos:column="5">case <expr><name pos:line="62" pos:column="10">op_NRE<pos:position pos:line="62" pos:column="16"/></name></expr>:<pos:position pos:line="62" pos:column="17"/></case> <block pos:line="62" pos:column="18">{
            <decl_stmt><decl><type><specifier pos:line="63" pos:column="13">const<pos:position pos:line="63" pos:column="18"/></specifier> <name pos:line="63" pos:column="19">char<pos:position pos:line="63" pos:column="23"/></name> <modifier pos:line="63" pos:column="24">*<pos:position pos:line="63" pos:column="25"/></modifier></type><name pos:line="63" pos:column="25">word<pos:position pos:line="63" pos:column="29"/></name> <init pos:line="63" pos:column="30">= <expr><call><name pos:line="63" pos:column="32">ap_expr_eval_word<pos:position pos:line="63" pos:column="49"/></name><argument_list pos:line="63" pos:column="49">(<argument><expr><name pos:line="63" pos:column="50">ctx<pos:position pos:line="63" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="55">e1<pos:position pos:line="63" pos:column="57"/></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="63" pos:column="59"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="64" pos:column="13">const<pos:position pos:line="64" pos:column="18"/></specifier> <name pos:line="64" pos:column="19">ap_regex_t<pos:position pos:line="64" pos:column="29"/></name> <modifier pos:line="64" pos:column="30">*<pos:position pos:line="64" pos:column="31"/></modifier></type><name pos:line="64" pos:column="31">regex<pos:position pos:line="64" pos:column="36"/></name> <init pos:line="64" pos:column="37">= <expr><name><name pos:line="64" pos:column="39">e2<pos:position pos:line="64" pos:column="41"/></name><operator pos:line="64" pos:column="41">-&gt;<pos:position pos:line="64" pos:column="46"/></operator><name pos:line="64" pos:column="43">node_arg1<pos:position pos:line="64" pos:column="52"/></name></name></expr></init></decl>;<pos:position pos:line="64" pos:column="53"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="65" pos:column="13">int<pos:position pos:line="65" pos:column="16"/></name></type> <name pos:line="65" pos:column="17">result<pos:position pos:line="65" pos:column="23"/></name></decl>;<pos:position pos:line="65" pos:column="24"/></decl_stmt>

            <comment type="block" pos:line="67" pos:column="13">/*
             * $0 ... $9 may contain stuff the user wants to keep. Therefore
             * we only set them if there are capturing parens in the regex.
             */</comment>
            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><name><name pos:line="71" pos:column="17">regex<pos:position pos:line="71" pos:column="22"/></name><operator pos:line="71" pos:column="22">-&gt;<pos:position pos:line="71" pos:column="27"/></operator><name pos:line="71" pos:column="24">re_nsub<pos:position pos:line="71" pos:column="31"/></name></name> <operator pos:line="71" pos:column="32">&gt;<pos:position pos:line="71" pos:column="36"/></operator> <literal type="number" pos:line="71" pos:column="34">0<pos:position pos:line="71" pos:column="35"/></literal></expr>)<pos:position pos:line="71" pos:column="36"/></condition><then pos:line="71" pos:column="36"> <block pos:line="71" pos:column="37">{
                <expr_stmt><expr><name pos:line="72" pos:column="17">result<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">=<pos:position pos:line="72" pos:column="25"/></operator> <operator pos:line="72" pos:column="26">(<pos:position pos:line="72" pos:column="27"/></operator><literal type="number" pos:line="72" pos:column="27">0<pos:position pos:line="72" pos:column="28"/></literal> <operator pos:line="72" pos:column="29">==<pos:position pos:line="72" pos:column="31"/></operator> <call><name pos:line="72" pos:column="32">ap_regexec<pos:position pos:line="72" pos:column="42"/></name><argument_list pos:line="72" pos:column="42">(<argument><expr><name pos:line="72" pos:column="43">regex<pos:position pos:line="72" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="50">word<pos:position pos:line="72" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="56">ctx<pos:position pos:line="72" pos:column="59"/></name><operator pos:line="72" pos:column="59">-&gt;<pos:position pos:line="72" pos:column="64"/></operator><name pos:line="72" pos:column="61">re_nmatch<pos:position pos:line="72" pos:column="70"/></name></name></expr></argument>,
                                          <argument><expr><name><name pos:line="73" pos:column="43">ctx<pos:position pos:line="73" pos:column="46"/></name><operator pos:line="73" pos:column="46">-&gt;<pos:position pos:line="73" pos:column="51"/></operator><name pos:line="73" pos:column="48">re_pmatch<pos:position pos:line="73" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="59">0<pos:position pos:line="73" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="61"/></argument_list></call><operator pos:line="73" pos:column="61">)<pos:position pos:line="73" pos:column="62"/></operator></expr>;<pos:position pos:line="73" pos:column="63"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="74" pos:column="17">*<pos:position pos:line="74" pos:column="18"/></operator><name><name pos:line="74" pos:column="18">ctx<pos:position pos:line="74" pos:column="21"/></name><operator pos:line="74" pos:column="21">-&gt;<pos:position pos:line="74" pos:column="26"/></operator><name pos:line="74" pos:column="23">re_source<pos:position pos:line="74" pos:column="32"/></name></name> <operator pos:line="74" pos:column="33">=<pos:position pos:line="74" pos:column="34"/></operator> <ternary><condition><expr><name pos:line="74" pos:column="35">result<pos:position pos:line="74" pos:column="41"/></name></expr> ?<pos:position pos:line="74" pos:column="43"/></condition><then pos:line="74" pos:column="43"> <expr><name pos:line="74" pos:column="44">word<pos:position pos:line="74" pos:column="48"/></name></expr> <pos:position pos:line="74" pos:column="49"/></then><else pos:line="74" pos:column="49">: <expr><name pos:line="74" pos:column="51">NULL<pos:position pos:line="74" pos:column="55"/></name></expr></else></ternary></expr>;<pos:position pos:line="74" pos:column="56"/></expr_stmt>
            }<pos:position pos:line="75" pos:column="14"/></block></then>
            <else pos:line="76" pos:column="13">else <block pos:line="76" pos:column="18">{
                <expr_stmt><expr><name pos:line="77" pos:column="17">result<pos:position pos:line="77" pos:column="23"/></name> <operator pos:line="77" pos:column="24">=<pos:position pos:line="77" pos:column="25"/></operator> <operator pos:line="77" pos:column="26">(<pos:position pos:line="77" pos:column="27"/></operator><literal type="number" pos:line="77" pos:column="27">0<pos:position pos:line="77" pos:column="28"/></literal> <operator pos:line="77" pos:column="29">==<pos:position pos:line="77" pos:column="31"/></operator> <call><name pos:line="77" pos:column="32">ap_regexec<pos:position pos:line="77" pos:column="42"/></name><argument_list pos:line="77" pos:column="42">(<argument><expr><name pos:line="77" pos:column="43">regex<pos:position pos:line="77" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="50">word<pos:position pos:line="77" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="56">0<pos:position pos:line="77" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="59">NULL<pos:position pos:line="77" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="77" pos:column="65">0<pos:position pos:line="77" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="67"/></argument_list></call><operator pos:line="77" pos:column="67">)<pos:position pos:line="77" pos:column="68"/></operator></expr>;<pos:position pos:line="77" pos:column="69"/></expr_stmt>
            }<pos:position pos:line="78" pos:column="14"/></block></else></if>

            <if pos:line="80" pos:column="13">if <condition pos:line="80" pos:column="16">(<expr><name><name pos:line="80" pos:column="17">node<pos:position pos:line="80" pos:column="21"/></name><operator pos:line="80" pos:column="21">-&gt;<pos:position pos:line="80" pos:column="26"/></operator><name pos:line="80" pos:column="23">node_op<pos:position pos:line="80" pos:column="30"/></name></name> <operator pos:line="80" pos:column="31">==<pos:position pos:line="80" pos:column="33"/></operator> <name pos:line="80" pos:column="34">op_REG<pos:position pos:line="80" pos:column="40"/></name></expr>)<pos:position pos:line="80" pos:column="41"/></condition><then pos:line="80" pos:column="41">
                <block type="pseudo"><return pos:line="81" pos:column="17">return <expr><name pos:line="81" pos:column="24">result<pos:position pos:line="81" pos:column="30"/></name></expr>;<pos:position pos:line="81" pos:column="31"/></return></block></then>
            <else pos:line="82" pos:column="13">else
                <block type="pseudo"><return pos:line="83" pos:column="17">return <expr><operator pos:line="83" pos:column="24">!<pos:position pos:line="83" pos:column="25"/></operator><name pos:line="83" pos:column="25">result<pos:position pos:line="83" pos:column="31"/></name></expr>;<pos:position pos:line="83" pos:column="32"/></return></block></else></if>
        }<pos:position pos:line="84" pos:column="10"/></block>
    <default pos:line="85" pos:column="5">default:<pos:position pos:line="85" pos:column="13"/></default>
        <expr_stmt><expr><operator pos:line="86" pos:column="9">*<pos:position pos:line="86" pos:column="10"/></operator><name><name pos:line="86" pos:column="10">ctx<pos:position pos:line="86" pos:column="13"/></name><operator pos:line="86" pos:column="13">-&gt;<pos:position pos:line="86" pos:column="18"/></operator><name pos:line="86" pos:column="15">err<pos:position pos:line="86" pos:column="18"/></name></name> <operator pos:line="86" pos:column="19">=<pos:position pos:line="86" pos:column="20"/></operator> <literal type="string" pos:line="86" pos:column="21">"Internal evaluation error: Unknown comp expression node"<pos:position pos:line="86" pos:column="78"/></literal></expr>;<pos:position pos:line="86" pos:column="79"/></expr_stmt>
        <return pos:line="87" pos:column="9">return <expr><operator pos:line="87" pos:column="16">-<pos:position pos:line="87" pos:column="17"/></operator><literal type="number" pos:line="87" pos:column="17">1<pos:position pos:line="87" pos:column="18"/></literal></expr>;<pos:position pos:line="87" pos:column="19"/></return>
    }<pos:position pos:line="88" pos:column="6"/></block></switch>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
