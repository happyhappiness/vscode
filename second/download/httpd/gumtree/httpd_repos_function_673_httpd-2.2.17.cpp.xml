<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_673_httpd-2.2.17.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">SSL_CTX_use_certificate_chain<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(
    <parameter><decl><type><name pos:line="2" pos:column="5">SSL_CTX<pos:position pos:line="2" pos:column="12"/></name> <modifier pos:line="2" pos:column="13">*<pos:position pos:line="2" pos:column="14"/></modifier></type><name pos:line="2" pos:column="14">ctx<pos:position pos:line="2" pos:column="17"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="19">char<pos:position pos:line="2" pos:column="23"/></name> <modifier pos:line="2" pos:column="24">*<pos:position pos:line="2" pos:column="25"/></modifier></type><name pos:line="2" pos:column="25">file<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">int<pos:position pos:line="2" pos:column="34"/></name></type> <name pos:line="2" pos:column="35">skipfirst<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">modssl_read_bio_cb_fn<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">cb<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="72"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">BIO<pos:position pos:line="4" pos:column="8"/></name> <modifier pos:line="4" pos:column="9">*<pos:position pos:line="4" pos:column="10"/></modifier></type><name pos:line="4" pos:column="10">bio<pos:position pos:line="4" pos:column="13"/></name></decl>;<pos:position pos:line="4" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">X509<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">x509<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">long<pos:position pos:line="6" pos:column="18"/></name></type> <name pos:line="6" pos:column="19">err<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">n<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">STACK_OF<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">X509<pos:position pos:line="8" pos:column="18"/></name></expr></argument>)<pos:position pos:line="8" pos:column="19"/></argument_list></call> <operator pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">extra_certs<pos:position pos:line="8" pos:column="32"/></name></expr>;<pos:position pos:line="8" pos:column="33"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">(<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">bio<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <call><name pos:line="10" pos:column="16">BIO_new<pos:position pos:line="10" pos:column="23"/></name><argument_list pos:line="10" pos:column="23">(<argument><expr><call><name pos:line="10" pos:column="24">BIO_s_file_internal<pos:position pos:line="10" pos:column="43"/></name><argument_list pos:line="10" pos:column="43">()<pos:position pos:line="10" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call><operator pos:line="10" pos:column="46">)<pos:position pos:line="10" pos:column="47"/></operator> <operator pos:line="10" pos:column="48">==<pos:position pos:line="10" pos:column="50"/></operator> <name pos:line="10" pos:column="51">NULL<pos:position pos:line="10" pos:column="55"/></name></expr>)<pos:position pos:line="10" pos:column="56"/></condition><then pos:line="10" pos:column="56">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><operator pos:line="11" pos:column="16">-<pos:position pos:line="11" pos:column="17"/></operator><literal type="number" pos:line="11" pos:column="17">1<pos:position pos:line="11" pos:column="18"/></literal></expr>;<pos:position pos:line="11" pos:column="19"/></return></block></then></if>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">BIO_read_filename<pos:position pos:line="12" pos:column="26"/></name><argument_list pos:line="12" pos:column="26">(<argument><expr><name pos:line="12" pos:column="27">bio<pos:position pos:line="12" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">file<pos:position pos:line="12" pos:column="36"/></name></expr></argument>)<pos:position pos:line="12" pos:column="37"/></argument_list></call> <operator pos:line="12" pos:column="38">&lt;=<pos:position pos:line="12" pos:column="43"/></operator> <literal type="number" pos:line="12" pos:column="41">0<pos:position pos:line="12" pos:column="42"/></literal></expr>)<pos:position pos:line="12" pos:column="43"/></condition><then pos:line="12" pos:column="43"> <block pos:line="12" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">BIO_free<pos:position pos:line="13" pos:column="17"/></name><argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">bio<pos:position pos:line="13" pos:column="21"/></name></expr></argument>)<pos:position pos:line="13" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="23"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><operator pos:line="14" pos:column="16">-<pos:position pos:line="14" pos:column="17"/></operator><literal type="number" pos:line="14" pos:column="17">1<pos:position pos:line="14" pos:column="18"/></literal></expr>;<pos:position pos:line="14" pos:column="19"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="16" pos:column="5">/* optionally skip a leading server certificate */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">skipfirst<pos:position pos:line="17" pos:column="18"/></name></expr>)<pos:position pos:line="17" pos:column="19"/></condition><then pos:line="17" pos:column="19"> <block pos:line="17" pos:column="20">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><operator pos:line="18" pos:column="13">(<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">x509<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <call><name pos:line="18" pos:column="21">modssl_PEM_read_bio_X509<pos:position pos:line="18" pos:column="45"/></name><argument_list pos:line="18" pos:column="45">(<argument><expr><name pos:line="18" pos:column="46">bio<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">NULL<pos:position pos:line="18" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="57">cb<pos:position pos:line="18" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="61">NULL<pos:position pos:line="18" pos:column="65"/></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call><operator pos:line="18" pos:column="66">)<pos:position pos:line="18" pos:column="67"/></operator> <operator pos:line="18" pos:column="68">==<pos:position pos:line="18" pos:column="70"/></operator> <name pos:line="18" pos:column="71">NULL<pos:position pos:line="18" pos:column="75"/></name></expr>)<pos:position pos:line="18" pos:column="76"/></condition><then pos:line="18" pos:column="76"> <block pos:line="18" pos:column="77">{
            <expr_stmt><expr><call><name pos:line="19" pos:column="13">BIO_free<pos:position pos:line="19" pos:column="21"/></name><argument_list pos:line="19" pos:column="21">(<argument><expr><name pos:line="19" pos:column="22">bio<pos:position pos:line="19" pos:column="25"/></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
            <return pos:line="20" pos:column="13">return <expr><operator pos:line="20" pos:column="20">-<pos:position pos:line="20" pos:column="21"/></operator><literal type="number" pos:line="20" pos:column="21">1<pos:position pos:line="20" pos:column="22"/></literal></expr>;<pos:position pos:line="20" pos:column="23"/></return>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">X509_free<pos:position pos:line="22" pos:column="18"/></name><argument_list pos:line="22" pos:column="18">(<argument><expr><name pos:line="22" pos:column="19">x509<pos:position pos:line="22" pos:column="23"/></name></expr></argument>)<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="24" pos:column="5">/* free a perhaps already configured extra chain */</comment>
    <expr_stmt><expr><name pos:line="25" pos:column="5">extra_certs<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator><call><name pos:line="25" pos:column="17">SSL_CTX_get_extra_certs<pos:position pos:line="25" pos:column="40"/></name><argument_list pos:line="25" pos:column="40">(<argument><expr><name pos:line="25" pos:column="41">ctx<pos:position pos:line="25" pos:column="44"/></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">extra_certs<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">!=<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">NULL<pos:position pos:line="26" pos:column="28"/></name></expr>)<pos:position pos:line="26" pos:column="29"/></condition><then pos:line="26" pos:column="29"> <block pos:line="26" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">sk_X509_pop_free<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><operator pos:line="27" pos:column="26">(<pos:position pos:line="27" pos:column="27"/></operator><call><name pos:line="27" pos:column="27">STACK_OF<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">(<argument><expr><name pos:line="27" pos:column="36">X509<pos:position pos:line="27" pos:column="40"/></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call> <operator pos:line="27" pos:column="42">*<pos:position pos:line="27" pos:column="43"/></operator><operator pos:line="27" pos:column="43">)<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="44">extra_certs<pos:position pos:line="27" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="57">X509_free<pos:position pos:line="27" pos:column="66"/></name></expr></argument>)<pos:position pos:line="27" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">SSL_CTX_set_extra_certs<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">ctx<pos:position pos:line="28" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="28" pos:column="37">NULL<pos:position pos:line="28" pos:column="41"/></name></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="30" pos:column="5">/* create new extra chain by loading the certs */</comment>
    <expr_stmt><expr><name pos:line="31" pos:column="5">n<pos:position pos:line="31" pos:column="6"/></name> <operator pos:line="31" pos:column="7">=<pos:position pos:line="31" pos:column="8"/></operator> <literal type="number" pos:line="31" pos:column="9">0<pos:position pos:line="31" pos:column="10"/></literal></expr>;<pos:position pos:line="31" pos:column="11"/></expr_stmt>
    <while pos:line="32" pos:column="5">while <condition pos:line="32" pos:column="11">(<expr><operator pos:line="32" pos:column="12">(<pos:position pos:line="32" pos:column="13"/></operator><name pos:line="32" pos:column="13">x509<pos:position pos:line="32" pos:column="17"/></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <call><name pos:line="32" pos:column="20">modssl_PEM_read_bio_X509<pos:position pos:line="32" pos:column="44"/></name><argument_list pos:line="32" pos:column="44">(<argument><expr><name pos:line="32" pos:column="45">bio<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="50">NULL<pos:position pos:line="32" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="56">cb<pos:position pos:line="32" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="60">NULL<pos:position pos:line="32" pos:column="64"/></name></expr></argument>)<pos:position pos:line="32" pos:column="65"/></argument_list></call><operator pos:line="32" pos:column="65">)<pos:position pos:line="32" pos:column="66"/></operator> <operator pos:line="32" pos:column="67">!=<pos:position pos:line="32" pos:column="69"/></operator> <name pos:line="32" pos:column="70">NULL<pos:position pos:line="32" pos:column="74"/></name></expr>)<pos:position pos:line="32" pos:column="75"/></condition> <block pos:line="32" pos:column="76">{
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><call><name pos:line="33" pos:column="14">SSL_CTX_add_extra_chain_cert<pos:position pos:line="33" pos:column="42"/></name><argument_list pos:line="33" pos:column="42">(<argument><expr><name pos:line="33" pos:column="43">ctx<pos:position pos:line="33" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="48">x509<pos:position pos:line="33" pos:column="52"/></name></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="54"/></condition><then pos:line="33" pos:column="54"> <block pos:line="33" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">X509_free<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">x509<pos:position pos:line="34" pos:column="27"/></name></expr></argument>)<pos:position pos:line="34" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">BIO_free<pos:position pos:line="35" pos:column="21"/></name><argument_list pos:line="35" pos:column="21">(<argument><expr><name pos:line="35" pos:column="22">bio<pos:position pos:line="35" pos:column="25"/></name></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
            <return pos:line="36" pos:column="13">return <expr><operator pos:line="36" pos:column="20">-<pos:position pos:line="36" pos:column="21"/></operator><literal type="number" pos:line="36" pos:column="21">1<pos:position pos:line="36" pos:column="22"/></literal></expr>;<pos:position pos:line="36" pos:column="23"/></return>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="38" pos:column="9">n<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">++<pos:position pos:line="38" pos:column="12"/></operator></expr>;<pos:position pos:line="38" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></while>
    <comment type="block" pos:line="40" pos:column="5">/* Make sure that only the error is just an EOF */</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">err<pos:position pos:line="41" pos:column="13"/></name> <operator pos:line="41" pos:column="14">=<pos:position pos:line="41" pos:column="15"/></operator> <call><name pos:line="41" pos:column="16">ERR_peek_error<pos:position pos:line="41" pos:column="30"/></name><argument_list pos:line="41" pos:column="30">()<pos:position pos:line="41" pos:column="32"/></argument_list></call><operator pos:line="41" pos:column="32">)<pos:position pos:line="41" pos:column="33"/></operator> <operator pos:line="41" pos:column="34">&gt;<pos:position pos:line="41" pos:column="38"/></operator> <literal type="number" pos:line="41" pos:column="36">0<pos:position pos:line="41" pos:column="37"/></literal></expr>)<pos:position pos:line="41" pos:column="38"/></condition><then pos:line="41" pos:column="38"> <block pos:line="41" pos:column="39">{
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><operator pos:line="42" pos:column="13">!<pos:position pos:line="42" pos:column="14"/></operator><operator pos:line="42" pos:column="14">(<pos:position pos:line="42" pos:column="15"/></operator>   <call><name pos:line="42" pos:column="18">ERR_GET_LIB<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">err<pos:position pos:line="42" pos:column="33"/></name></expr></argument>)<pos:position pos:line="42" pos:column="34"/></argument_list></call> <operator pos:line="42" pos:column="35">==<pos:position pos:line="42" pos:column="37"/></operator> <name pos:line="42" pos:column="38">ERR_LIB_PEM<pos:position pos:line="42" pos:column="49"/></name>
              <operator pos:line="43" pos:column="15">&amp;&amp;<pos:position pos:line="43" pos:column="25"/></operator> <call><name pos:line="43" pos:column="18">ERR_GET_REASON<pos:position pos:line="43" pos:column="32"/></name><argument_list pos:line="43" pos:column="32">(<argument><expr><name pos:line="43" pos:column="33">err<pos:position pos:line="43" pos:column="36"/></name></expr></argument>)<pos:position pos:line="43" pos:column="37"/></argument_list></call> <operator pos:line="43" pos:column="38">==<pos:position pos:line="43" pos:column="40"/></operator> <name pos:line="43" pos:column="41">PEM_R_NO_START_LINE<pos:position pos:line="43" pos:column="60"/></name><operator pos:line="43" pos:column="60">)<pos:position pos:line="43" pos:column="61"/></operator></expr>)<pos:position pos:line="43" pos:column="62"/></condition><then pos:line="43" pos:column="62"> <block pos:line="43" pos:column="63">{
            <expr_stmt><expr><call><name pos:line="44" pos:column="13">BIO_free<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><name pos:line="44" pos:column="22">bio<pos:position pos:line="44" pos:column="25"/></name></expr></argument>)<pos:position pos:line="44" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt>
            <return pos:line="45" pos:column="13">return <expr><operator pos:line="45" pos:column="20">-<pos:position pos:line="45" pos:column="21"/></operator><literal type="number" pos:line="45" pos:column="21">1<pos:position pos:line="45" pos:column="22"/></literal></expr>;<pos:position pos:line="45" pos:column="23"/></return>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
        <while pos:line="47" pos:column="9">while <condition pos:line="47" pos:column="15">(<expr><call><name pos:line="47" pos:column="16">ERR_get_error<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">()<pos:position pos:line="47" pos:column="31"/></argument_list></call> <operator pos:line="47" pos:column="32">&gt;<pos:position pos:line="47" pos:column="36"/></operator> <literal type="number" pos:line="47" pos:column="34">0<pos:position pos:line="47" pos:column="35"/></literal></expr>)<pos:position pos:line="47" pos:column="36"/></condition> <block type="pseudo"><empty_stmt pos:line="47" pos:column="37">;<pos:position pos:line="47" pos:column="38"/></empty_stmt></block></while>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">BIO_free<pos:position pos:line="49" pos:column="13"/></name><argument_list pos:line="49" pos:column="13">(<argument><expr><name pos:line="49" pos:column="14">bio<pos:position pos:line="49" pos:column="17"/></name></expr></argument>)<pos:position pos:line="49" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="19"/></expr_stmt>
    <return pos:line="50" pos:column="5">return <expr><name pos:line="50" pos:column="12">n<pos:position pos:line="50" pos:column="13"/></name></expr>;<pos:position pos:line="50" pos:column="14"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
