<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1250_httpd-2.2.34.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">is_variant_better_rvsa<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">negotiation_state<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">neg<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">var_rec<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">variant<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="2" pos:column="35">var_rec<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">best<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">float<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">p_bestq<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">float<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">bestq<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><operator pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></operator><name pos:line="4" pos:column="20">p_bestq<pos:position pos:line="4" pos:column="27"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="29">q<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* TCN does not cover negotiation on content-encoding.  For now,
     * we ignore the encoding unless it was explicitly excluded.
     */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">variant<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">encoding_quality<pos:position pos:line="9" pos:column="34"/></name></name> <operator pos:line="9" pos:column="35">==<pos:position pos:line="9" pos:column="37"/></operator> <literal type="number" pos:line="9" pos:column="38">0.0f<pos:position pos:line="9" pos:column="42"/></literal></expr>)<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43">
        <block type="pseudo"><return pos:line="10" pos:column="9">return <expr><literal type="number" pos:line="10" pos:column="16">0<pos:position pos:line="10" pos:column="17"/></literal></expr>;<pos:position pos:line="10" pos:column="18"/></return></block></then></if>

    <expr_stmt><expr><name pos:line="12" pos:column="5">q<pos:position pos:line="12" pos:column="6"/></name> <operator pos:line="12" pos:column="7">=<pos:position pos:line="12" pos:column="8"/></operator> <name><name pos:line="12" pos:column="9">variant<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">mime_type_quality<pos:position pos:line="12" pos:column="35"/></name></name> <operator pos:line="12" pos:column="36">*<pos:position pos:line="12" pos:column="37"/></operator>
        <name><name pos:line="13" pos:column="9">variant<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">source_quality<pos:position pos:line="13" pos:column="32"/></name></name> <operator pos:line="13" pos:column="33">*<pos:position pos:line="13" pos:column="34"/></operator>
        <name><name pos:line="14" pos:column="9">variant<pos:position pos:line="14" pos:column="16"/></name><operator pos:line="14" pos:column="16">-&gt;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="18">charset_quality<pos:position pos:line="14" pos:column="33"/></name></name> <operator pos:line="14" pos:column="34">*<pos:position pos:line="14" pos:column="35"/></operator>
        <name><name pos:line="15" pos:column="9">variant<pos:position pos:line="15" pos:column="16"/></name><operator pos:line="15" pos:column="16">-&gt;<pos:position pos:line="15" pos:column="21"/></operator><name pos:line="15" pos:column="18">lang_quality<pos:position pos:line="15" pos:column="30"/></name></name></expr>;<pos:position pos:line="15" pos:column="31"/></expr_stmt>

   <comment type="block" pos:line="17" pos:column="4">/* RFC 2296 calls for the result to be rounded to 5 decimal places,
    * but we don't do that because it serves no useful purpose other
    * than to ensure that a remote algorithm operates on the same
    * precision as ours.  That is silly, since what we obviously want
    * is for the algorithm to operate on the best available precision
    * regardless of who runs it.  Since the above calculation may
    * result in significant variance at 1e-12, rounding would be bogus.
    */</comment>

<cpp:ifdef pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">ifdef<pos:position pos:line="26" pos:column="7"/></cpp:directive> <name pos:line="26" pos:column="8">NEG_DEBUG<pos:position pos:line="26" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">ap_log_error<pos:position pos:line="27" pos:column="17"/></name><argument_list pos:line="27" pos:column="17">(<argument><expr><name pos:line="27" pos:column="18">APLOG_MARK<pos:position pos:line="27" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="30">APLOG_STARTUP<pos:position pos:line="27" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="45">0<pos:position pos:line="27" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="48">NULL<pos:position pos:line="27" pos:column="52"/></name></expr></argument>,
           <argument><expr><literal type="string" pos:line="28" pos:column="12">"Variant: file=%s type=%s lang=%s sourceq=%1.3f "<pos:position pos:line="28" pos:column="61"/></literal>
           <literal type="string" pos:line="29" pos:column="12">"mimeq=%1.3f langq=%1.3f charq=%1.3f encq=%1.3f "<pos:position pos:line="29" pos:column="61"/></literal>
           <literal type="string" pos:line="30" pos:column="12">"q=%1.5f definite=%d"<pos:position pos:line="30" pos:column="33"/></literal></expr></argument>,
            <argument><expr><operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><ternary><condition><expr><name><name pos:line="31" pos:column="14">variant<pos:position pos:line="31" pos:column="21"/></name><operator pos:line="31" pos:column="21">-&gt;<pos:position pos:line="31" pos:column="26"/></operator><name pos:line="31" pos:column="23">file_name<pos:position pos:line="31" pos:column="32"/></name></name></expr> ?<pos:position pos:line="31" pos:column="34"/></condition><then pos:line="31" pos:column="34"> <expr><name><name pos:line="31" pos:column="35">variant<pos:position pos:line="31" pos:column="42"/></name><operator pos:line="31" pos:column="42">-&gt;<pos:position pos:line="31" pos:column="47"/></operator><name pos:line="31" pos:column="44">file_name<pos:position pos:line="31" pos:column="53"/></name></name></expr> <pos:position pos:line="31" pos:column="54"/></then><else pos:line="31" pos:column="54">: <expr><literal type="string" pos:line="31" pos:column="56">""<pos:position pos:line="31" pos:column="58"/></literal></expr></else></ternary><operator pos:line="31" pos:column="58">)<pos:position pos:line="31" pos:column="59"/></operator></expr></argument>,
            <argument><expr><operator pos:line="32" pos:column="13">(<pos:position pos:line="32" pos:column="14"/></operator><ternary><condition><expr><name><name pos:line="32" pos:column="14">variant<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">-&gt;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="23">mime_type<pos:position pos:line="32" pos:column="32"/></name></name></expr> ?<pos:position pos:line="32" pos:column="34"/></condition><then pos:line="32" pos:column="34"> <expr><name><name pos:line="32" pos:column="35">variant<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">-&gt;<pos:position pos:line="32" pos:column="47"/></operator><name pos:line="32" pos:column="44">mime_type<pos:position pos:line="32" pos:column="53"/></name></name></expr> <pos:position pos:line="32" pos:column="54"/></then><else pos:line="32" pos:column="54">: <expr><literal type="string" pos:line="32" pos:column="56">""<pos:position pos:line="32" pos:column="58"/></literal></expr></else></ternary><operator pos:line="32" pos:column="58">)<pos:position pos:line="32" pos:column="59"/></operator></expr></argument>,
            <argument><expr><operator pos:line="33" pos:column="13">(<pos:position pos:line="33" pos:column="14"/></operator><ternary><condition><expr><name><name pos:line="33" pos:column="14">variant<pos:position pos:line="33" pos:column="21"/></name><operator pos:line="33" pos:column="21">-&gt;<pos:position pos:line="33" pos:column="26"/></operator><name pos:line="33" pos:column="23">content_languages<pos:position pos:line="33" pos:column="40"/></name></name></expr>
             ?<pos:position pos:line="34" pos:column="15"/></condition><then pos:line="34" pos:column="15"> <expr><call><name pos:line="34" pos:column="16">apr_array_pstrcat<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name><name pos:line="34" pos:column="34">neg<pos:position pos:line="34" pos:column="37"/></name><operator pos:line="34" pos:column="37">-&gt;<pos:position pos:line="34" pos:column="42"/></operator><name pos:line="34" pos:column="39">pool<pos:position pos:line="34" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="45">variant<pos:position pos:line="34" pos:column="52"/></name><operator pos:line="34" pos:column="52">-&gt;<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="54">content_languages<pos:position pos:line="34" pos:column="71"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="34" pos:column="73">','<pos:position pos:line="34" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="77"/></argument_list></call></expr>
             <pos:position pos:line="35" pos:column="14"/></then><else pos:line="35" pos:column="14">: <expr><literal type="string" pos:line="35" pos:column="16">""<pos:position pos:line="35" pos:column="18"/></literal></expr></else></ternary><operator pos:line="35" pos:column="18">)<pos:position pos:line="35" pos:column="19"/></operator></expr></argument>,
            <argument><expr><name><name pos:line="36" pos:column="13">variant<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">-&gt;<pos:position pos:line="36" pos:column="25"/></operator><name pos:line="36" pos:column="22">source_quality<pos:position pos:line="36" pos:column="36"/></name></name></expr></argument>,
            <argument><expr><name><name pos:line="37" pos:column="13">variant<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">-&gt;<pos:position pos:line="37" pos:column="25"/></operator><name pos:line="37" pos:column="22">mime_type_quality<pos:position pos:line="37" pos:column="39"/></name></name></expr></argument>,
            <argument><expr><name><name pos:line="38" pos:column="13">variant<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">-&gt;<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="22">lang_quality<pos:position pos:line="38" pos:column="34"/></name></name></expr></argument>,
            <argument><expr><name><name pos:line="39" pos:column="13">variant<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">-&gt;<pos:position pos:line="39" pos:column="25"/></operator><name pos:line="39" pos:column="22">charset_quality<pos:position pos:line="39" pos:column="37"/></name></name></expr></argument>,
            <argument><expr><name><name pos:line="40" pos:column="13">variant<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">-&gt;<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="22">encoding_quality<pos:position pos:line="40" pos:column="38"/></name></name></expr></argument>,
            <argument><expr><name pos:line="41" pos:column="13">q<pos:position pos:line="41" pos:column="14"/></name></expr></argument>,
            <argument><expr><name><name pos:line="42" pos:column="13">variant<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">-&gt;<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="22">definite<pos:position pos:line="42" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="32"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">q<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">&lt;=<pos:position pos:line="45" pos:column="16"/></operator> <literal type="number" pos:line="45" pos:column="14">0.0f<pos:position pos:line="45" pos:column="18"/></literal></expr>)<pos:position pos:line="45" pos:column="19"/></condition><then pos:line="45" pos:column="19"> <block pos:line="45" pos:column="20">{
        <return pos:line="46" pos:column="9">return <expr><literal type="number" pos:line="46" pos:column="16">0<pos:position pos:line="46" pos:column="17"/></literal></expr>;<pos:position pos:line="46" pos:column="18"/></return>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name pos:line="48" pos:column="9">q<pos:position pos:line="48" pos:column="10"/></name> <operator pos:line="48" pos:column="11">&gt;<pos:position pos:line="48" pos:column="15"/></operator> <name pos:line="48" pos:column="13">bestq<pos:position pos:line="48" pos:column="18"/></name></expr>)<pos:position pos:line="48" pos:column="19"/></condition><then pos:line="48" pos:column="19"> <block pos:line="48" pos:column="20">{
        <expr_stmt><expr><operator pos:line="49" pos:column="9">*<pos:position pos:line="49" pos:column="10"/></operator><name pos:line="49" pos:column="10">p_bestq<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">q<pos:position pos:line="49" pos:column="21"/></name></expr>;<pos:position pos:line="49" pos:column="22"/></expr_stmt>
        <return pos:line="50" pos:column="9">return <expr><literal type="number" pos:line="50" pos:column="16">1<pos:position pos:line="50" pos:column="17"/></literal></expr>;<pos:position pos:line="50" pos:column="18"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">q<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">==<pos:position pos:line="52" pos:column="13"/></operator> <name pos:line="52" pos:column="14">bestq<pos:position pos:line="52" pos:column="19"/></name></expr>)<pos:position pos:line="52" pos:column="20"/></condition><then pos:line="52" pos:column="20"> <block pos:line="52" pos:column="21">{
        <comment type="block" pos:line="53" pos:column="9">/* If the best variant's encoding is of lesser quality than
         * this variant, then we prefer this variant
         */</comment>
        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name><name pos:line="56" pos:column="13">variant<pos:position pos:line="56" pos:column="20"/></name><operator pos:line="56" pos:column="20">-&gt;<pos:position pos:line="56" pos:column="25"/></operator><name pos:line="56" pos:column="22">encoding_quality<pos:position pos:line="56" pos:column="38"/></name></name> <operator pos:line="56" pos:column="39">&gt;<pos:position pos:line="56" pos:column="43"/></operator> <name><name pos:line="56" pos:column="41">best<pos:position pos:line="56" pos:column="45"/></name><operator pos:line="56" pos:column="45">-&gt;<pos:position pos:line="56" pos:column="50"/></operator><name pos:line="56" pos:column="47">encoding_quality<pos:position pos:line="56" pos:column="63"/></name></name></expr>)<pos:position pos:line="56" pos:column="64"/></condition><then pos:line="56" pos:column="64"> <block pos:line="56" pos:column="65">{
            <expr_stmt><expr><operator pos:line="57" pos:column="13">*<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">p_bestq<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <name pos:line="57" pos:column="24">q<pos:position pos:line="57" pos:column="25"/></name></expr>;<pos:position pos:line="57" pos:column="26"/></expr_stmt>
            <return pos:line="58" pos:column="13">return <expr><literal type="number" pos:line="58" pos:column="20">1<pos:position pos:line="58" pos:column="21"/></literal></expr>;<pos:position pos:line="58" pos:column="22"/></return>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>
    <return pos:line="61" pos:column="5">return <expr><literal type="number" pos:line="61" pos:column="12">0<pos:position pos:line="61" pos:column="13"/></literal></expr>;<pos:position pos:line="61" pos:column="14"/></return>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
