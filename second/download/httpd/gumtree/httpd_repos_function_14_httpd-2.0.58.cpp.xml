<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_14_httpd-2.0.58.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">accept_mutex_init<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">pthread_mutexattr_t<pos:position pos:line="3" pos:column="24"/></name></type> <name pos:line="3" pos:column="25">mattr<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">fd<pos:position pos:line="4" pos:column="11"/></name></decl>;<pos:position pos:line="4" pos:column="12"/></decl_stmt>

    <expr_stmt><expr><name pos:line="6" pos:column="5">fd<pos:position pos:line="6" pos:column="7"/></name> <operator pos:line="6" pos:column="8">=<pos:position pos:line="6" pos:column="9"/></operator> <call><name pos:line="6" pos:column="10">open<pos:position pos:line="6" pos:column="14"/></name> <argument_list pos:line="6" pos:column="15">(<argument><expr><literal type="string" pos:line="6" pos:column="16">"/dev/zero"<pos:position pos:line="6" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="29">O_RDWR<pos:position pos:line="6" pos:column="35"/></name></expr></argument>)<pos:position pos:line="6" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="37"/></expr_stmt>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">fd<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">==<pos:position pos:line="7" pos:column="14"/></operator> <operator pos:line="7" pos:column="15">-<pos:position pos:line="7" pos:column="16"/></operator><literal type="number" pos:line="7" pos:column="16">1<pos:position pos:line="7" pos:column="17"/></literal></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18"> <block pos:line="7" pos:column="19">{
	<expr_stmt><expr><call><name pos:line="8" pos:column="9">perror<pos:position pos:line="8" pos:column="15"/></name> <argument_list pos:line="8" pos:column="16">(<argument><expr><literal type="string" pos:line="8" pos:column="17">"open(/dev/zero)"<pos:position pos:line="8" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">exit<pos:position pos:line="9" pos:column="13"/></name> <argument_list pos:line="9" pos:column="14">(<argument><expr><literal type="number" pos:line="9" pos:column="15">1<pos:position pos:line="9" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="11" pos:column="5">mutex<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <operator pos:line="11" pos:column="13">(<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">pthread_mutex_t<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">*<pos:position pos:line="11" pos:column="31"/></operator><operator pos:line="11" pos:column="31">)<pos:position pos:line="11" pos:column="32"/></operator><call><name pos:line="11" pos:column="32">mmap<pos:position pos:line="11" pos:column="36"/></name> <argument_list pos:line="11" pos:column="37">(<argument><expr><operator pos:line="11" pos:column="38">(<pos:position pos:line="11" pos:column="39"/></operator><name pos:line="11" pos:column="39">caddr_t<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">)<pos:position pos:line="11" pos:column="47"/></operator><literal type="number" pos:line="11" pos:column="47">0<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="50">sizeof <argument_list pos:line="11" pos:column="57">(<argument><expr><operator pos:line="11" pos:column="58">*<pos:position pos:line="11" pos:column="59"/></operator><name pos:line="11" pos:column="59">mutex<pos:position pos:line="11" pos:column="64"/></name></expr></argument>)<pos:position pos:line="11" pos:column="65"/></argument_list></sizeof></expr></argument>,
		    <argument><expr><name pos:line="12" pos:column="21">PROT_READ<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">|<pos:position pos:line="12" pos:column="31"/></operator><name pos:line="12" pos:column="31">PROT_WRITE<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="43">MAP_SHARED<pos:position pos:line="12" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="55">fd<pos:position pos:line="12" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="12" pos:column="59">0<pos:position pos:line="12" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="62"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">mutex<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">==<pos:position pos:line="13" pos:column="17"/></operator> <operator pos:line="13" pos:column="18">(<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="19">void<pos:position pos:line="13" pos:column="23"/></name> <operator pos:line="13" pos:column="24">*<pos:position pos:line="13" pos:column="25"/></operator><operator pos:line="13" pos:column="25">)<pos:position pos:line="13" pos:column="26"/></operator><operator pos:line="13" pos:column="26">(<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">caddr_t<pos:position pos:line="13" pos:column="34"/></name><operator pos:line="13" pos:column="34">)<pos:position pos:line="13" pos:column="35"/></operator><operator pos:line="13" pos:column="35">-<pos:position pos:line="13" pos:column="36"/></operator><literal type="number" pos:line="13" pos:column="36">1<pos:position pos:line="13" pos:column="37"/></literal></expr>)<pos:position pos:line="13" pos:column="38"/></condition><then pos:line="13" pos:column="38"> <block pos:line="13" pos:column="39">{
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">perror<pos:position pos:line="14" pos:column="15"/></name> <argument_list pos:line="14" pos:column="16">(<argument><expr><literal type="string" pos:line="14" pos:column="17">"mmap"<pos:position pos:line="14" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="15" pos:column="9">exit<pos:position pos:line="15" pos:column="13"/></name> <argument_list pos:line="15" pos:column="14">(<argument><expr><literal type="number" pos:line="15" pos:column="15">1<pos:position pos:line="15" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="17" pos:column="5">close<pos:position pos:line="17" pos:column="10"/></name> <argument_list pos:line="17" pos:column="11">(<argument><expr><name pos:line="17" pos:column="12">fd<pos:position pos:line="17" pos:column="14"/></name></expr></argument>)<pos:position pos:line="17" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="16"/></expr_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">pthread_mutexattr_init<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><operator pos:line="18" pos:column="32">&amp;<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="33">mattr<pos:position pos:line="18" pos:column="38"/></name></expr></argument>)<pos:position pos:line="18" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="40"/></condition><then pos:line="18" pos:column="40"> <block pos:line="18" pos:column="41">{
	<expr_stmt><expr><call><name pos:line="19" pos:column="9">perror<pos:position pos:line="19" pos:column="15"/></name> <argument_list pos:line="19" pos:column="16">(<argument><expr><literal type="string" pos:line="19" pos:column="17">"pthread_mutexattr_init"<pos:position pos:line="19" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="43"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">exit<pos:position pos:line="20" pos:column="13"/></name> <argument_list pos:line="20" pos:column="14">(<argument><expr><literal type="number" pos:line="20" pos:column="15">1<pos:position pos:line="20" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name pos:line="22" pos:column="9">pthread_mutexattr_setpshared<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><operator pos:line="22" pos:column="38">&amp;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="39">mattr<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="46">PTHREAD_PROCESS_SHARED<pos:position pos:line="22" pos:column="68"/></name></expr></argument>)<pos:position pos:line="22" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="70"/></condition><then pos:line="22" pos:column="70"> <block pos:line="22" pos:column="71">{
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">perror<pos:position pos:line="23" pos:column="15"/></name> <argument_list pos:line="23" pos:column="16">(<argument><expr><literal type="string" pos:line="23" pos:column="17">"pthread_mutexattr_setpshared"<pos:position pos:line="23" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="24" pos:column="9">exit<pos:position pos:line="24" pos:column="13"/></name> <argument_list pos:line="24" pos:column="14">(<argument><expr><literal type="number" pos:line="24" pos:column="15">1<pos:position pos:line="24" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><call><name pos:line="26" pos:column="9">pthread_mutex_init<pos:position pos:line="26" pos:column="27"/></name><argument_list pos:line="26" pos:column="27">(<argument><expr><name pos:line="26" pos:column="28">mutex<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="35">&amp;<pos:position pos:line="26" pos:column="40"/></operator><name pos:line="26" pos:column="36">mattr<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43"> <block pos:line="26" pos:column="44">{
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">perror<pos:position pos:line="27" pos:column="15"/></name> <argument_list pos:line="27" pos:column="16">(<argument><expr><literal type="string" pos:line="27" pos:column="17">"pthread_mutex_init"<pos:position pos:line="27" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="28" pos:column="9">exit<pos:position pos:line="28" pos:column="13"/></name> <argument_list pos:line="28" pos:column="14">(<argument><expr><literal type="number" pos:line="28" pos:column="15">1<pos:position pos:line="28" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">sigfillset<pos:position pos:line="30" pos:column="15"/></name><argument_list pos:line="30" pos:column="15">(<argument><expr><operator pos:line="30" pos:column="16">&amp;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="17">accept_block_mask<pos:position pos:line="30" pos:column="34"/></name></expr></argument>)<pos:position pos:line="30" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="31" pos:column="5">sigdelset<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><operator pos:line="31" pos:column="15">&amp;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="16">accept_block_mask<pos:position pos:line="31" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="35">SIGHUP<pos:position pos:line="31" pos:column="41"/></name></expr></argument>)<pos:position pos:line="31" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="32" pos:column="5">sigdelset<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><operator pos:line="32" pos:column="15">&amp;<pos:position pos:line="32" pos:column="20"/></operator><name pos:line="32" pos:column="16">accept_block_mask<pos:position pos:line="32" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="35">SIGTERM<pos:position pos:line="32" pos:column="42"/></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">sigdelset<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><operator pos:line="33" pos:column="15">&amp;<pos:position pos:line="33" pos:column="20"/></operator><name pos:line="33" pos:column="16">accept_block_mask<pos:position pos:line="33" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="35">SIGUSR1<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
