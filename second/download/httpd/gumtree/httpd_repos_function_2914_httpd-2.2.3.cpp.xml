<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2914_httpd-2.2.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name> <name pos:line="2" pos:column="5">PREFIX<pos:position pos:line="2" pos:column="11"/></name></type>(<name pos:line="2" pos:column="12">scanLt<pos:position pos:line="2" pos:column="18"/></name>)<parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">ENCODING<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">enc<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">char<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">ptr<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="58">const<pos:position pos:line="2" pos:column="63"/></specifier> <name pos:line="2" pos:column="64">char<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">end<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>,
		   <parameter><decl><type><specifier pos:line="3" pos:column="20">const<pos:position pos:line="3" pos:column="25"/></specifier> <name pos:line="3" pos:column="26">char<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier><modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">nextTokPtr<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="44"/></parameter_list>
<block pos:line="4" pos:column="1">{
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">XML_NS<pos:position pos:line="5" pos:column="14"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">int<pos:position pos:line="6" pos:column="6"/></name></type> <name pos:line="6" pos:column="7">hadColon<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">endif<pos:position pos:line="7" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="8" pos:column="3">if <condition pos:line="8" pos:column="6">(<expr><name pos:line="8" pos:column="7">ptr<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">==<pos:position pos:line="8" pos:column="13"/></operator> <name pos:line="8" pos:column="14">end<pos:position pos:line="8" pos:column="17"/></name></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18">
    <block type="pseudo"><return pos:line="9" pos:column="5">return <expr><name pos:line="9" pos:column="12">XML_TOK_PARTIAL<pos:position pos:line="9" pos:column="27"/></name></expr>;<pos:position pos:line="9" pos:column="28"/></return></block></then></if>
  <switch pos:line="10" pos:column="3">switch <condition pos:line="10" pos:column="10">(<expr><call><name pos:line="10" pos:column="11">BYTE_TYPE<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">enc<pos:position pos:line="10" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="26">ptr<pos:position pos:line="10" pos:column="29"/></name></expr></argument>)<pos:position pos:line="10" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="31"/></condition> <block pos:line="10" pos:column="32">{
  <macro><name pos:line="11" pos:column="3">CHECK_NMSTRT_CASES<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument pos:line="11" pos:column="22">enc<pos:position pos:line="11" pos:column="25"/></argument>, <argument pos:line="11" pos:column="27">ptr<pos:position pos:line="11" pos:column="30"/></argument>, <argument pos:line="11" pos:column="32">end<pos:position pos:line="11" pos:column="35"/></argument>, <argument pos:line="11" pos:column="37">nextTokPtr<pos:position pos:line="11" pos:column="47"/></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></macro>
  <case pos:line="12" pos:column="3">case <expr><name pos:line="12" pos:column="8">BT_EXCL<pos:position pos:line="12" pos:column="15"/></name></expr>:<pos:position pos:line="12" pos:column="16"/></case>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">(<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">ptr<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">+=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">MINBPC<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">(<argument><expr><name pos:line="13" pos:column="24">enc<pos:position pos:line="13" pos:column="27"/></name></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></call><operator pos:line="13" pos:column="28">)<pos:position pos:line="13" pos:column="29"/></operator> <operator pos:line="13" pos:column="30">==<pos:position pos:line="13" pos:column="32"/></operator> <name pos:line="13" pos:column="33">end<pos:position pos:line="13" pos:column="36"/></name></expr>)<pos:position pos:line="13" pos:column="37"/></condition><then pos:line="13" pos:column="37">
      <block type="pseudo"><return pos:line="14" pos:column="7">return <expr><name pos:line="14" pos:column="14">XML_TOK_PARTIAL<pos:position pos:line="14" pos:column="29"/></name></expr>;<pos:position pos:line="14" pos:column="30"/></return></block></then></if>
    <switch pos:line="15" pos:column="5">switch <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">BYTE_TYPE<pos:position pos:line="15" pos:column="22"/></name><argument_list pos:line="15" pos:column="22">(<argument><expr><name pos:line="15" pos:column="23">enc<pos:position pos:line="15" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="28">ptr<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="33"/></condition> <block pos:line="15" pos:column="34">{
    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">BT_MINUS<pos:position pos:line="16" pos:column="18"/></name></expr>:<pos:position pos:line="16" pos:column="19"/></case>
      <return pos:line="17" pos:column="7">return <expr><call><call><name pos:line="17" pos:column="14">PREFIX<pos:position pos:line="17" pos:column="20"/></name><argument_list pos:line="17" pos:column="20">(<argument><expr><name pos:line="17" pos:column="21">scanComment<pos:position pos:line="17" pos:column="32"/></name></expr></argument>)<pos:position pos:line="17" pos:column="33"/></argument_list></call><argument_list pos:line="17" pos:column="33">(<argument><expr><name pos:line="17" pos:column="34">enc<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">ptr<pos:position pos:line="17" pos:column="42"/></name> <operator pos:line="17" pos:column="43">+<pos:position pos:line="17" pos:column="44"/></operator> <call><name pos:line="17" pos:column="45">MINBPC<pos:position pos:line="17" pos:column="51"/></name><argument_list pos:line="17" pos:column="51">(<argument><expr><name pos:line="17" pos:column="52">enc<pos:position pos:line="17" pos:column="55"/></name></expr></argument>)<pos:position pos:line="17" pos:column="56"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="58">end<pos:position pos:line="17" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="63">nextTokPtr<pos:position pos:line="17" pos:column="73"/></name></expr></argument>)<pos:position pos:line="17" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="75"/></return>
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">BT_LSQB<pos:position pos:line="18" pos:column="17"/></name></expr>:<pos:position pos:line="18" pos:column="18"/></case>
      <return pos:line="19" pos:column="7">return <expr><call><call><name pos:line="19" pos:column="14">PREFIX<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><name pos:line="19" pos:column="21">scanCdataSection<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call><argument_list pos:line="19" pos:column="38">(<argument><expr><name pos:line="19" pos:column="39">enc<pos:position pos:line="19" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">ptr<pos:position pos:line="19" pos:column="47"/></name> <operator pos:line="19" pos:column="48">+<pos:position pos:line="19" pos:column="49"/></operator> <call><name pos:line="19" pos:column="50">MINBPC<pos:position pos:line="19" pos:column="56"/></name><argument_list pos:line="19" pos:column="56">(<argument><expr><name pos:line="19" pos:column="57">enc<pos:position pos:line="19" pos:column="60"/></name></expr></argument>)<pos:position pos:line="19" pos:column="61"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="19" pos:column="63">end<pos:position pos:line="19" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="68">nextTokPtr<pos:position pos:line="19" pos:column="78"/></name></expr></argument>)<pos:position pos:line="19" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="80"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></switch>
    <expr_stmt><expr><operator pos:line="21" pos:column="5">*<pos:position pos:line="21" pos:column="6"/></operator><name pos:line="21" pos:column="6">nextTokPtr<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">ptr<pos:position pos:line="21" pos:column="22"/></name></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
    <return pos:line="22" pos:column="5">return <expr><name pos:line="22" pos:column="12">XML_TOK_INVALID<pos:position pos:line="22" pos:column="27"/></name></expr>;<pos:position pos:line="22" pos:column="28"/></return>
  <case pos:line="23" pos:column="3">case <expr><name pos:line="23" pos:column="8">BT_QUEST<pos:position pos:line="23" pos:column="16"/></name></expr>:<pos:position pos:line="23" pos:column="17"/></case>
    <return pos:line="24" pos:column="5">return <expr><call><call><name pos:line="24" pos:column="12">PREFIX<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">(<argument><expr><name pos:line="24" pos:column="19">scanPi<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">enc<pos:position pos:line="24" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="32">ptr<pos:position pos:line="24" pos:column="35"/></name> <operator pos:line="24" pos:column="36">+<pos:position pos:line="24" pos:column="37"/></operator> <call><name pos:line="24" pos:column="38">MINBPC<pos:position pos:line="24" pos:column="44"/></name><argument_list pos:line="24" pos:column="44">(<argument><expr><name pos:line="24" pos:column="45">enc<pos:position pos:line="24" pos:column="48"/></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="24" pos:column="51">end<pos:position pos:line="24" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="56">nextTokPtr<pos:position pos:line="24" pos:column="66"/></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="68"/></return>
  <case pos:line="25" pos:column="3">case <expr><name pos:line="25" pos:column="8">BT_SOL<pos:position pos:line="25" pos:column="14"/></name></expr>:<pos:position pos:line="25" pos:column="15"/></case>
    <return pos:line="26" pos:column="5">return <expr><call><call><name pos:line="26" pos:column="12">PREFIX<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">scanEndTag<pos:position pos:line="26" pos:column="29"/></name></expr></argument>)<pos:position pos:line="26" pos:column="30"/></argument_list></call><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">enc<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="36">ptr<pos:position pos:line="26" pos:column="39"/></name> <operator pos:line="26" pos:column="40">+<pos:position pos:line="26" pos:column="41"/></operator> <call><name pos:line="26" pos:column="42">MINBPC<pos:position pos:line="26" pos:column="48"/></name><argument_list pos:line="26" pos:column="48">(<argument><expr><name pos:line="26" pos:column="49">enc<pos:position pos:line="26" pos:column="52"/></name></expr></argument>)<pos:position pos:line="26" pos:column="53"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="26" pos:column="55">end<pos:position pos:line="26" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="60">nextTokPtr<pos:position pos:line="26" pos:column="70"/></name></expr></argument>)<pos:position pos:line="26" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="72"/></return>
  <default pos:line="27" pos:column="3">default:<pos:position pos:line="27" pos:column="11"/></default>
    <expr_stmt><expr><operator pos:line="28" pos:column="5">*<pos:position pos:line="28" pos:column="6"/></operator><name pos:line="28" pos:column="6">nextTokPtr<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">ptr<pos:position pos:line="28" pos:column="22"/></name></expr>;<pos:position pos:line="28" pos:column="23"/></expr_stmt>
    <return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">XML_TOK_INVALID<pos:position pos:line="29" pos:column="27"/></name></expr>;<pos:position pos:line="29" pos:column="28"/></return>
  }<pos:position pos:line="30" pos:column="4"/></block></switch>
<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">XML_NS<pos:position pos:line="31" pos:column="14"/></name></cpp:ifdef>
  <expr_stmt><expr><name pos:line="32" pos:column="3">hadColon<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <literal type="number" pos:line="32" pos:column="14">0<pos:position pos:line="32" pos:column="15"/></literal></expr>;<pos:position pos:line="32" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">endif<pos:position pos:line="33" pos:column="7"/></cpp:directive></cpp:endif>
  <comment type="block" pos:line="34" pos:column="3">/* we have a start-tag */</comment>
  <while pos:line="35" pos:column="3">while <condition pos:line="35" pos:column="9">(<expr><name pos:line="35" pos:column="10">ptr<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">!=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">end<pos:position pos:line="35" pos:column="20"/></name></expr>)<pos:position pos:line="35" pos:column="21"/></condition> <block pos:line="35" pos:column="22">{
    <switch pos:line="36" pos:column="5">switch <condition pos:line="36" pos:column="12">(<expr><call><name pos:line="36" pos:column="13">BYTE_TYPE<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">enc<pos:position pos:line="36" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="28">ptr<pos:position pos:line="36" pos:column="31"/></name></expr></argument>)<pos:position pos:line="36" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="33"/></condition> <block pos:line="36" pos:column="34">{
    <macro><name pos:line="37" pos:column="5">CHECK_NAME_CASES<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument pos:line="37" pos:column="22">enc<pos:position pos:line="37" pos:column="25"/></argument>, <argument pos:line="37" pos:column="27">ptr<pos:position pos:line="37" pos:column="30"/></argument>, <argument pos:line="37" pos:column="32">end<pos:position pos:line="37" pos:column="35"/></argument>, <argument pos:line="37" pos:column="37">nextTokPtr<pos:position pos:line="37" pos:column="47"/></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></macro>
<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef<pos:position pos:line="38" pos:column="7"/></cpp:directive> <name pos:line="38" pos:column="8">XML_NS<pos:position pos:line="38" pos:column="14"/></name></cpp:ifdef>
    <case pos:line="39" pos:column="5">case <expr><name pos:line="39" pos:column="10">BT_COLON<pos:position pos:line="39" pos:column="18"/></name></expr>:<pos:position pos:line="39" pos:column="19"/></case>
      <if pos:line="40" pos:column="7">if <condition pos:line="40" pos:column="10">(<expr><name pos:line="40" pos:column="11">hadColon<pos:position pos:line="40" pos:column="19"/></name></expr>)<pos:position pos:line="40" pos:column="20"/></condition><then pos:line="40" pos:column="20"> <block pos:line="40" pos:column="21">{
	<expr_stmt><expr><operator pos:line="41" pos:column="9">*<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">nextTokPtr<pos:position pos:line="41" pos:column="20"/></name> <operator pos:line="41" pos:column="21">=<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="23">ptr<pos:position pos:line="41" pos:column="26"/></name></expr>;<pos:position pos:line="41" pos:column="27"/></expr_stmt>
	<return pos:line="42" pos:column="9">return <expr><name pos:line="42" pos:column="16">XML_TOK_INVALID<pos:position pos:line="42" pos:column="31"/></name></expr>;<pos:position pos:line="42" pos:column="32"/></return>
      }<pos:position pos:line="43" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="44" pos:column="7">hadColon<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <literal type="number" pos:line="44" pos:column="18">1<pos:position pos:line="44" pos:column="19"/></literal></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="45" pos:column="7">ptr<pos:position pos:line="45" pos:column="10"/></name> <operator pos:line="45" pos:column="11">+=<pos:position pos:line="45" pos:column="13"/></operator> <call><name pos:line="45" pos:column="14">MINBPC<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">enc<pos:position pos:line="45" pos:column="24"/></name></expr></argument>)<pos:position pos:line="45" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>
      <if pos:line="46" pos:column="7">if <condition pos:line="46" pos:column="10">(<expr><name pos:line="46" pos:column="11">ptr<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">==<pos:position pos:line="46" pos:column="17"/></operator> <name pos:line="46" pos:column="18">end<pos:position pos:line="46" pos:column="21"/></name></expr>)<pos:position pos:line="46" pos:column="22"/></condition><then pos:line="46" pos:column="22">
	<block type="pseudo"><return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">XML_TOK_PARTIAL<pos:position pos:line="47" pos:column="31"/></name></expr>;<pos:position pos:line="47" pos:column="32"/></return></block></then></if>
      <switch pos:line="48" pos:column="7">switch <condition pos:line="48" pos:column="14">(<expr><call><name pos:line="48" pos:column="15">BYTE_TYPE<pos:position pos:line="48" pos:column="24"/></name><argument_list pos:line="48" pos:column="24">(<argument><expr><name pos:line="48" pos:column="25">enc<pos:position pos:line="48" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="30">ptr<pos:position pos:line="48" pos:column="33"/></name></expr></argument>)<pos:position pos:line="48" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="35"/></condition> <block pos:line="48" pos:column="36">{
      <macro><name pos:line="49" pos:column="7">CHECK_NMSTRT_CASES<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">(<argument pos:line="49" pos:column="26">enc<pos:position pos:line="49" pos:column="29"/></argument>, <argument pos:line="49" pos:column="31">ptr<pos:position pos:line="49" pos:column="34"/></argument>, <argument pos:line="49" pos:column="36">end<pos:position pos:line="49" pos:column="39"/></argument>, <argument pos:line="49" pos:column="41">nextTokPtr<pos:position pos:line="49" pos:column="51"/></argument>)<pos:position pos:line="49" pos:column="52"/></argument_list></macro>
      <default pos:line="50" pos:column="7">default:<pos:position pos:line="50" pos:column="15"/></default>
        <expr_stmt><expr><operator pos:line="51" pos:column="9">*<pos:position pos:line="51" pos:column="10"/></operator><name pos:line="51" pos:column="10">nextTokPtr<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">ptr<pos:position pos:line="51" pos:column="26"/></name></expr>;<pos:position pos:line="51" pos:column="27"/></expr_stmt>
        <return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">XML_TOK_INVALID<pos:position pos:line="52" pos:column="31"/></name></expr>;<pos:position pos:line="52" pos:column="32"/></return>
      }<pos:position pos:line="53" pos:column="8"/></block></switch>
      <break pos:line="54" pos:column="7">break;<pos:position pos:line="54" pos:column="13"/></break>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="56" pos:column="5">case <expr><name pos:line="56" pos:column="10">BT_S<pos:position pos:line="56" pos:column="14"/></name></expr>:<pos:position pos:line="56" pos:column="15"/></case> <case pos:line="56" pos:column="16">case <expr><name pos:line="56" pos:column="21">BT_CR<pos:position pos:line="56" pos:column="26"/></name></expr>:<pos:position pos:line="56" pos:column="27"/></case> <case pos:line="56" pos:column="28">case <expr><name pos:line="56" pos:column="33">BT_LF<pos:position pos:line="56" pos:column="38"/></name></expr>:<pos:position pos:line="56" pos:column="39"/></case>
      <block pos:line="57" pos:column="7">{
        <expr_stmt><expr><name pos:line="58" pos:column="9">ptr<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">+=<pos:position pos:line="58" pos:column="15"/></operator> <call><name pos:line="58" pos:column="16">MINBPC<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><name pos:line="58" pos:column="23">enc<pos:position pos:line="58" pos:column="26"/></name></expr></argument>)<pos:position pos:line="58" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="28"/></expr_stmt>
	<while pos:line="59" pos:column="9">while <condition pos:line="59" pos:column="15">(<expr><name pos:line="59" pos:column="16">ptr<pos:position pos:line="59" pos:column="19"/></name> <operator pos:line="59" pos:column="20">!=<pos:position pos:line="59" pos:column="22"/></operator> <name pos:line="59" pos:column="23">end<pos:position pos:line="59" pos:column="26"/></name></expr>)<pos:position pos:line="59" pos:column="27"/></condition> <block pos:line="59" pos:column="28">{
	  <switch pos:line="60" pos:column="11">switch <condition pos:line="60" pos:column="18">(<expr><call><name pos:line="60" pos:column="19">BYTE_TYPE<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">enc<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="34">ptr<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="39"/></condition> <block pos:line="60" pos:column="40">{
	  <macro><name pos:line="61" pos:column="11">CHECK_NMSTRT_CASES<pos:position pos:line="61" pos:column="29"/></name><argument_list pos:line="61" pos:column="29">(<argument pos:line="61" pos:column="30">enc<pos:position pos:line="61" pos:column="33"/></argument>, <argument pos:line="61" pos:column="35">ptr<pos:position pos:line="61" pos:column="38"/></argument>, <argument pos:line="61" pos:column="40">end<pos:position pos:line="61" pos:column="43"/></argument>, <argument pos:line="61" pos:column="45">nextTokPtr<pos:position pos:line="61" pos:column="55"/></argument>)<pos:position pos:line="61" pos:column="56"/></argument_list></macro>
	  <case pos:line="62" pos:column="11">case <expr><name pos:line="62" pos:column="16">BT_GT<pos:position pos:line="62" pos:column="21"/></name></expr>:<pos:position pos:line="62" pos:column="22"/></case>
	    <goto pos:line="63" pos:column="13">goto <name pos:line="63" pos:column="18">gt<pos:position pos:line="63" pos:column="20"/></name>;<pos:position pos:line="63" pos:column="21"/></goto>
	  <case pos:line="64" pos:column="11">case <expr><name pos:line="64" pos:column="16">BT_SOL<pos:position pos:line="64" pos:column="22"/></name></expr>:<pos:position pos:line="64" pos:column="23"/></case>
	    <goto pos:line="65" pos:column="13">goto <name pos:line="65" pos:column="18">sol<pos:position pos:line="65" pos:column="21"/></name>;<pos:position pos:line="65" pos:column="22"/></goto>
	  <case pos:line="66" pos:column="11">case <expr><name pos:line="66" pos:column="16">BT_S<pos:position pos:line="66" pos:column="20"/></name></expr>:<pos:position pos:line="66" pos:column="21"/></case> <case pos:line="66" pos:column="22">case <expr><name pos:line="66" pos:column="27">BT_CR<pos:position pos:line="66" pos:column="32"/></name></expr>:<pos:position pos:line="66" pos:column="33"/></case> <case pos:line="66" pos:column="34">case <expr><name pos:line="66" pos:column="39">BT_LF<pos:position pos:line="66" pos:column="44"/></name></expr>:<pos:position pos:line="66" pos:column="45"/></case>
	    <expr_stmt><expr><name pos:line="67" pos:column="13">ptr<pos:position pos:line="67" pos:column="16"/></name> <operator pos:line="67" pos:column="17">+=<pos:position pos:line="67" pos:column="19"/></operator> <call><name pos:line="67" pos:column="20">MINBPC<pos:position pos:line="67" pos:column="26"/></name><argument_list pos:line="67" pos:column="26">(<argument><expr><name pos:line="67" pos:column="27">enc<pos:position pos:line="67" pos:column="30"/></name></expr></argument>)<pos:position pos:line="67" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="32"/></expr_stmt>
	    <continue pos:line="68" pos:column="13">continue;<pos:position pos:line="68" pos:column="22"/></continue>
	  <default pos:line="69" pos:column="11">default:<pos:position pos:line="69" pos:column="19"/></default>
	    <expr_stmt><expr><operator pos:line="70" pos:column="13">*<pos:position pos:line="70" pos:column="14"/></operator><name pos:line="70" pos:column="14">nextTokPtr<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">=<pos:position pos:line="70" pos:column="26"/></operator> <name pos:line="70" pos:column="27">ptr<pos:position pos:line="70" pos:column="30"/></name></expr>;<pos:position pos:line="70" pos:column="31"/></expr_stmt>
	    <return pos:line="71" pos:column="13">return <expr><name pos:line="71" pos:column="20">XML_TOK_INVALID<pos:position pos:line="71" pos:column="35"/></name></expr>;<pos:position pos:line="71" pos:column="36"/></return>
	  }<pos:position pos:line="72" pos:column="12"/></block></switch>
	  <return pos:line="73" pos:column="11">return <expr><call><call><name pos:line="73" pos:column="18">PREFIX<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><name pos:line="73" pos:column="25">scanAtts<pos:position pos:line="73" pos:column="33"/></name></expr></argument>)<pos:position pos:line="73" pos:column="34"/></argument_list></call><argument_list pos:line="73" pos:column="34">(<argument><expr><name pos:line="73" pos:column="35">enc<pos:position pos:line="73" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="40">ptr<pos:position pos:line="73" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="45">end<pos:position pos:line="73" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="50">nextTokPtr<pos:position pos:line="73" pos:column="60"/></name></expr></argument>)<pos:position pos:line="73" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="62"/></return>
	}<pos:position pos:line="74" pos:column="10"/></block></while>
	<return pos:line="75" pos:column="9">return <expr><name pos:line="75" pos:column="16">XML_TOK_PARTIAL<pos:position pos:line="75" pos:column="31"/></name></expr>;<pos:position pos:line="75" pos:column="32"/></return>
      }<pos:position pos:line="76" pos:column="8"/></block>
    <case pos:line="77" pos:column="5">case <expr><name pos:line="77" pos:column="10">BT_GT<pos:position pos:line="77" pos:column="15"/></name></expr>:<pos:position pos:line="77" pos:column="16"/></case>
    <label><name pos:line="78" pos:column="5">gt<pos:position pos:line="78" pos:column="7"/></name>:<pos:position pos:line="78" pos:column="8"/></label>
      <expr_stmt><expr><operator pos:line="79" pos:column="7">*<pos:position pos:line="79" pos:column="8"/></operator><name pos:line="79" pos:column="8">nextTokPtr<pos:position pos:line="79" pos:column="18"/></name> <operator pos:line="79" pos:column="19">=<pos:position pos:line="79" pos:column="20"/></operator> <name pos:line="79" pos:column="21">ptr<pos:position pos:line="79" pos:column="24"/></name> <operator pos:line="79" pos:column="25">+<pos:position pos:line="79" pos:column="26"/></operator> <call><name pos:line="79" pos:column="27">MINBPC<pos:position pos:line="79" pos:column="33"/></name><argument_list pos:line="79" pos:column="33">(<argument><expr><name pos:line="79" pos:column="34">enc<pos:position pos:line="79" pos:column="37"/></name></expr></argument>)<pos:position pos:line="79" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="39"/></expr_stmt>
      <return pos:line="80" pos:column="7">return <expr><name pos:line="80" pos:column="14">XML_TOK_START_TAG_NO_ATTS<pos:position pos:line="80" pos:column="39"/></name></expr>;<pos:position pos:line="80" pos:column="40"/></return>
    <case pos:line="81" pos:column="5">case <expr><name pos:line="81" pos:column="10">BT_SOL<pos:position pos:line="81" pos:column="16"/></name></expr>:<pos:position pos:line="81" pos:column="17"/></case>
    <label><name pos:line="82" pos:column="5">sol<pos:position pos:line="82" pos:column="8"/></name>:<pos:position pos:line="82" pos:column="9"/></label>
      <expr_stmt><expr><name pos:line="83" pos:column="7">ptr<pos:position pos:line="83" pos:column="10"/></name> <operator pos:line="83" pos:column="11">+=<pos:position pos:line="83" pos:column="13"/></operator> <call><name pos:line="83" pos:column="14">MINBPC<pos:position pos:line="83" pos:column="20"/></name><argument_list pos:line="83" pos:column="20">(<argument><expr><name pos:line="83" pos:column="21">enc<pos:position pos:line="83" pos:column="24"/></name></expr></argument>)<pos:position pos:line="83" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="26"/></expr_stmt>
      <if pos:line="84" pos:column="7">if <condition pos:line="84" pos:column="10">(<expr><name pos:line="84" pos:column="11">ptr<pos:position pos:line="84" pos:column="14"/></name> <operator pos:line="84" pos:column="15">==<pos:position pos:line="84" pos:column="17"/></operator> <name pos:line="84" pos:column="18">end<pos:position pos:line="84" pos:column="21"/></name></expr>)<pos:position pos:line="84" pos:column="22"/></condition><then pos:line="84" pos:column="22">
	<block type="pseudo"><return pos:line="85" pos:column="9">return <expr><name pos:line="85" pos:column="16">XML_TOK_PARTIAL<pos:position pos:line="85" pos:column="31"/></name></expr>;<pos:position pos:line="85" pos:column="32"/></return></block></then></if>
      <if pos:line="86" pos:column="7">if <condition pos:line="86" pos:column="10">(<expr><operator pos:line="86" pos:column="11">!<pos:position pos:line="86" pos:column="12"/></operator><call><name pos:line="86" pos:column="12">CHAR_MATCHES<pos:position pos:line="86" pos:column="24"/></name><argument_list pos:line="86" pos:column="24">(<argument><expr><name pos:line="86" pos:column="25">enc<pos:position pos:line="86" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="30">ptr<pos:position pos:line="86" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="35">ASCII_GT<pos:position pos:line="86" pos:column="43"/></name></expr></argument>)<pos:position pos:line="86" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="86" pos:column="45"/></condition><then pos:line="86" pos:column="45"> <block pos:line="86" pos:column="46">{
	<expr_stmt><expr><operator pos:line="87" pos:column="9">*<pos:position pos:line="87" pos:column="10"/></operator><name pos:line="87" pos:column="10">nextTokPtr<pos:position pos:line="87" pos:column="20"/></name> <operator pos:line="87" pos:column="21">=<pos:position pos:line="87" pos:column="22"/></operator> <name pos:line="87" pos:column="23">ptr<pos:position pos:line="87" pos:column="26"/></name></expr>;<pos:position pos:line="87" pos:column="27"/></expr_stmt>
	<return pos:line="88" pos:column="9">return <expr><name pos:line="88" pos:column="16">XML_TOK_INVALID<pos:position pos:line="88" pos:column="31"/></name></expr>;<pos:position pos:line="88" pos:column="32"/></return>
      }<pos:position pos:line="89" pos:column="8"/></block></then></if>
      <expr_stmt><expr><operator pos:line="90" pos:column="7">*<pos:position pos:line="90" pos:column="8"/></operator><name pos:line="90" pos:column="8">nextTokPtr<pos:position pos:line="90" pos:column="18"/></name> <operator pos:line="90" pos:column="19">=<pos:position pos:line="90" pos:column="20"/></operator> <name pos:line="90" pos:column="21">ptr<pos:position pos:line="90" pos:column="24"/></name> <operator pos:line="90" pos:column="25">+<pos:position pos:line="90" pos:column="26"/></operator> <call><name pos:line="90" pos:column="27">MINBPC<pos:position pos:line="90" pos:column="33"/></name><argument_list pos:line="90" pos:column="33">(<argument><expr><name pos:line="90" pos:column="34">enc<pos:position pos:line="90" pos:column="37"/></name></expr></argument>)<pos:position pos:line="90" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="39"/></expr_stmt>
      <return pos:line="91" pos:column="7">return <expr><name pos:line="91" pos:column="14">XML_TOK_EMPTY_ELEMENT_NO_ATTS<pos:position pos:line="91" pos:column="43"/></name></expr>;<pos:position pos:line="91" pos:column="44"/></return>
    <default pos:line="92" pos:column="5">default:<pos:position pos:line="92" pos:column="13"/></default>
      <expr_stmt><expr><operator pos:line="93" pos:column="7">*<pos:position pos:line="93" pos:column="8"/></operator><name pos:line="93" pos:column="8">nextTokPtr<pos:position pos:line="93" pos:column="18"/></name> <operator pos:line="93" pos:column="19">=<pos:position pos:line="93" pos:column="20"/></operator> <name pos:line="93" pos:column="21">ptr<pos:position pos:line="93" pos:column="24"/></name></expr>;<pos:position pos:line="93" pos:column="25"/></expr_stmt>
      <return pos:line="94" pos:column="7">return <expr><name pos:line="94" pos:column="14">XML_TOK_INVALID<pos:position pos:line="94" pos:column="29"/></name></expr>;<pos:position pos:line="94" pos:column="30"/></return>
    }<pos:position pos:line="95" pos:column="6"/></block></switch>
  }<pos:position pos:line="96" pos:column="4"/></block></while>
  <return pos:line="97" pos:column="3">return <expr><name pos:line="97" pos:column="10">XML_TOK_PARTIAL<pos:position pos:line="97" pos:column="25"/></name></expr>;<pos:position pos:line="97" pos:column="26"/></return>
}<pos:position pos:line="98" pos:column="2"/></block></function></unit>
