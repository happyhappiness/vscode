<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_3774.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">substitute_filter<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">ap_filter_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">f<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">apr_bucket_brigade<pos:position pos:line="1" pos:column="73"/></name> <modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">bb<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">bytes<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">len<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">fbytes<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">buff<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">nl<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">NULL<pos:position pos:line="7" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">bflat<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_bucket<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">b<pos:position pos:line="9" pos:column="18"/></name></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_bucket<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">tmp_b<pos:position pos:line="10" pos:column="22"/></name></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">apr_bucket_brigade<pos:position pos:line="11" pos:column="23"/></name> <modifier pos:line="11" pos:column="24">*<pos:position pos:line="11" pos:column="25"/></modifier></type><name pos:line="11" pos:column="25">tmp_bb<pos:position pos:line="11" pos:column="31"/></name> <init pos:line="11" pos:column="32">= <expr><name pos:line="11" pos:column="34">NULL<pos:position pos:line="11" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">apr_status_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">rv<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="14" pos:column="5">substitute_module_ctx<pos:position pos:line="14" pos:column="26"/></name> <modifier pos:line="14" pos:column="27">*<pos:position pos:line="14" pos:column="28"/></modifier></type><name pos:line="14" pos:column="28">ctx<pos:position pos:line="14" pos:column="31"/></name> <init pos:line="14" pos:column="32">= <expr><name><name pos:line="14" pos:column="34">f<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">-&gt;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="37">ctx<pos:position pos:line="14" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="41"/></decl_stmt>

    <comment type="block" pos:line="16" pos:column="5">/*
     * First time around? Create the saved bb that we used for each pass
     * through. Note that we can also get here when we explicitly clear ctx,
     * for error handling
     */</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">ctx<pos:position pos:line="21" pos:column="13"/></name></expr>)<pos:position pos:line="21" pos:column="14"/></condition><then pos:line="21" pos:column="14"> <block pos:line="21" pos:column="15">{
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">f<pos:position pos:line="22" pos:column="10"/></name><operator pos:line="22" pos:column="10">-&gt;<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="12">ctx<pos:position pos:line="22" pos:column="15"/></name></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <name pos:line="22" pos:column="18">ctx<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <call><name pos:line="22" pos:column="24">apr_pcalloc<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name><name pos:line="22" pos:column="36">f<pos:position pos:line="22" pos:column="37"/></name><operator pos:line="22" pos:column="37">-&gt;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="39">r<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">-&gt;<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="42">pool<pos:position pos:line="22" pos:column="46"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="48">sizeof<argument_list pos:line="22" pos:column="54">(<argument><expr><operator pos:line="22" pos:column="55">*<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="56">ctx<pos:position pos:line="22" pos:column="59"/></name></expr></argument>)<pos:position pos:line="22" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="62"/></expr_stmt>
        <comment type="block" pos:line="23" pos:column="9">/*
         * Create all the temporary brigades we need and reuse them to avoid
         * creating them over and over again from r-&gt;pool which would cost a
         * lot of memory in some cases.
         */</comment>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">ctx<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">linebb<pos:position pos:line="28" pos:column="20"/></name></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <call><name pos:line="28" pos:column="23">apr_brigade_create<pos:position pos:line="28" pos:column="41"/></name><argument_list pos:line="28" pos:column="41">(<argument><expr><name><name pos:line="28" pos:column="42">f<pos:position pos:line="28" pos:column="43"/></name><operator pos:line="28" pos:column="43">-&gt;<pos:position pos:line="28" pos:column="48"/></operator><name pos:line="28" pos:column="45">r<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">-&gt;<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="48">pool<pos:position pos:line="28" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="54">f<pos:position pos:line="28" pos:column="55"/></name><operator pos:line="28" pos:column="55">-&gt;<pos:position pos:line="28" pos:column="60"/></operator><name pos:line="28" pos:column="57">c<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">-&gt;<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="60">bucket_alloc<pos:position pos:line="28" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">ctx<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">-&gt;<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="14">linesbb<pos:position pos:line="29" pos:column="21"/></name></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <call><name pos:line="29" pos:column="24">apr_brigade_create<pos:position pos:line="29" pos:column="42"/></name><argument_list pos:line="29" pos:column="42">(<argument><expr><name><name pos:line="29" pos:column="43">f<pos:position pos:line="29" pos:column="44"/></name><operator pos:line="29" pos:column="44">-&gt;<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="46">r<pos:position pos:line="29" pos:column="47"/></name><operator pos:line="29" pos:column="47">-&gt;<pos:position pos:line="29" pos:column="52"/></operator><name pos:line="29" pos:column="49">pool<pos:position pos:line="29" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="55">f<pos:position pos:line="29" pos:column="56"/></name><operator pos:line="29" pos:column="56">-&gt;<pos:position pos:line="29" pos:column="61"/></operator><name pos:line="29" pos:column="58">c<pos:position pos:line="29" pos:column="59"/></name><operator pos:line="29" pos:column="59">-&gt;<pos:position pos:line="29" pos:column="64"/></operator><name pos:line="29" pos:column="61">bucket_alloc<pos:position pos:line="29" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">ctx<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">pattbb<pos:position pos:line="30" pos:column="20"/></name></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <call><name pos:line="30" pos:column="23">apr_brigade_create<pos:position pos:line="30" pos:column="41"/></name><argument_list pos:line="30" pos:column="41">(<argument><expr><name><name pos:line="30" pos:column="42">f<pos:position pos:line="30" pos:column="43"/></name><operator pos:line="30" pos:column="43">-&gt;<pos:position pos:line="30" pos:column="48"/></operator><name pos:line="30" pos:column="45">r<pos:position pos:line="30" pos:column="46"/></name><operator pos:line="30" pos:column="46">-&gt;<pos:position pos:line="30" pos:column="51"/></operator><name pos:line="30" pos:column="48">pool<pos:position pos:line="30" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="54">f<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">-&gt;<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="57">c<pos:position pos:line="30" pos:column="58"/></name><operator pos:line="30" pos:column="58">-&gt;<pos:position pos:line="30" pos:column="63"/></operator><name pos:line="30" pos:column="60">bucket_alloc<pos:position pos:line="30" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
        <comment type="block" pos:line="31" pos:column="9">/*
         * Everything to be passed to the next filter goes in
         * here, our pass brigade.
         */</comment>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">ctx<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">-&gt;<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="14">passbb<pos:position pos:line="35" pos:column="20"/></name></name> <operator pos:line="35" pos:column="21">=<pos:position pos:line="35" pos:column="22"/></operator> <call><name pos:line="35" pos:column="23">apr_brigade_create<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name><name pos:line="35" pos:column="42">f<pos:position pos:line="35" pos:column="43"/></name><operator pos:line="35" pos:column="43">-&gt;<pos:position pos:line="35" pos:column="48"/></operator><name pos:line="35" pos:column="45">r<pos:position pos:line="35" pos:column="46"/></name><operator pos:line="35" pos:column="46">-&gt;<pos:position pos:line="35" pos:column="51"/></operator><name pos:line="35" pos:column="48">pool<pos:position pos:line="35" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="54">f<pos:position pos:line="35" pos:column="55"/></name><operator pos:line="35" pos:column="55">-&gt;<pos:position pos:line="35" pos:column="60"/></operator><name pos:line="35" pos:column="57">c<pos:position pos:line="35" pos:column="58"/></name><operator pos:line="35" pos:column="58">-&gt;<pos:position pos:line="35" pos:column="63"/></operator><name pos:line="35" pos:column="60">bucket_alloc<pos:position pos:line="35" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="74"/></expr_stmt>
        <comment type="block" pos:line="36" pos:column="9">/* Create our temporary pool only once */</comment>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">apr_pool_create<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><operator pos:line="37" pos:column="25">&amp;<pos:position pos:line="37" pos:column="30"/></operator><operator pos:line="37" pos:column="26">(<pos:position pos:line="37" pos:column="27"/></operator><name><name pos:line="37" pos:column="27">ctx<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">tpool<pos:position pos:line="37" pos:column="37"/></name></name><operator pos:line="37" pos:column="37">)<pos:position pos:line="37" pos:column="38"/></operator></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="40">f<pos:position pos:line="37" pos:column="41"/></name><operator pos:line="37" pos:column="41">-&gt;<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="43">r<pos:position pos:line="37" pos:column="44"/></name><operator pos:line="37" pos:column="44">-&gt;<pos:position pos:line="37" pos:column="49"/></operator><name pos:line="37" pos:column="46">pool<pos:position pos:line="37" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">apr_table_unset<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name><name pos:line="38" pos:column="25">f<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">-&gt;<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="28">r<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">-&gt;<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="31">headers_out<pos:position pos:line="38" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="44">"Content-Length"<pos:position pos:line="38" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="41" pos:column="5">/*
     * Shortcircuit processing
     */</comment>
    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><call><name pos:line="44" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">(<argument><expr><name pos:line="44" pos:column="27">bb<pos:position pos:line="44" pos:column="29"/></name></expr></argument>)<pos:position pos:line="44" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="31"/></condition><then pos:line="44" pos:column="31">
        <block type="pseudo"><return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">APR_SUCCESS<pos:position pos:line="45" pos:column="27"/></name></expr>;<pos:position pos:line="45" pos:column="28"/></return></block></then></if>

    <comment type="block" pos:line="47" pos:column="5">/*
     * Here's the concept:
     *  Read in the data and look for newlines. Once we
     *  find a full "line", add it to our working brigade.
     *  If we've finished reading the brigade and we have
     *  any left over data (not a "full" line), store that
     *  for the next pass.
     *
     * Note: anything stored in ctx-&gt;linebb for sure does not have
     * a newline char, so we don't concat that bb with the
     * new bb, since we would spending time searching for the newline
     * in data we know it doesn't exist. So instead, we simply scan
     * our current bb and, if we see a newline, prepend ctx-&gt;linebb
     * to the front of it. This makes the code much less straight-
     * forward (otherwise we could APR_BRIGADE_CONCAT(ctx-&gt;linebb, bb)
     * and just scan for newlines and not bother with needing to know
     * when ctx-&gt;linebb needs to be reset) but also faster. We'll take
     * the speed.
     *
     * Note: apr_brigade_split_line would be nice here, but we
     * really can't use it since we need more control and we want
     * to re-use already read bucket data.
     *
     * See mod_include if still confused :)
     */</comment>

    <while pos:line="73" pos:column="5">while <condition pos:line="73" pos:column="11">(<expr><operator pos:line="73" pos:column="12">(<pos:position pos:line="73" pos:column="13"/></operator><name pos:line="73" pos:column="13">b<pos:position pos:line="73" pos:column="14"/></name> <operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator> <call><name pos:line="73" pos:column="17">APR_BRIGADE_FIRST<pos:position pos:line="73" pos:column="34"/></name><argument_list pos:line="73" pos:column="34">(<argument><expr><name pos:line="73" pos:column="35">bb<pos:position pos:line="73" pos:column="37"/></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call><operator pos:line="73" pos:column="38">)<pos:position pos:line="73" pos:column="39"/></operator> <operator pos:line="73" pos:column="40">&amp;&amp;<pos:position pos:line="73" pos:column="50"/></operator> <operator pos:line="73" pos:column="43">(<pos:position pos:line="73" pos:column="44"/></operator><name pos:line="73" pos:column="44">b<pos:position pos:line="73" pos:column="45"/></name> <operator pos:line="73" pos:column="46">!=<pos:position pos:line="73" pos:column="48"/></operator> <call><name pos:line="73" pos:column="49">APR_BRIGADE_SENTINEL<pos:position pos:line="73" pos:column="69"/></name><argument_list pos:line="73" pos:column="69">(<argument><expr><name pos:line="73" pos:column="70">bb<pos:position pos:line="73" pos:column="72"/></name></expr></argument>)<pos:position pos:line="73" pos:column="73"/></argument_list></call><operator pos:line="73" pos:column="73">)<pos:position pos:line="73" pos:column="74"/></operator></expr>)<pos:position pos:line="73" pos:column="75"/></condition> <block pos:line="73" pos:column="76">{
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><call><name pos:line="74" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="74" pos:column="30"/></name><argument_list pos:line="74" pos:column="30">(<argument><expr><name pos:line="74" pos:column="31">b<pos:position pos:line="74" pos:column="32"/></name></expr></argument>)<pos:position pos:line="74" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="34"/></condition><then pos:line="74" pos:column="34"> <block pos:line="74" pos:column="35">{
            <comment type="block" pos:line="75" pos:column="13">/*
             * if we see the EOS, then we need to pass along everything we
             * have. But if the ctx-&gt;linebb isn't empty, then we need to add
             * that to the end of what we'll be passing.
             */</comment>
            <if pos:line="80" pos:column="13">if <condition pos:line="80" pos:column="16">(<expr><operator pos:line="80" pos:column="17">!<pos:position pos:line="80" pos:column="18"/></operator><call><name pos:line="80" pos:column="18">APR_BRIGADE_EMPTY<pos:position pos:line="80" pos:column="35"/></name><argument_list pos:line="80" pos:column="35">(<argument><expr><name><name pos:line="80" pos:column="36">ctx<pos:position pos:line="80" pos:column="39"/></name><operator pos:line="80" pos:column="39">-&gt;<pos:position pos:line="80" pos:column="44"/></operator><name pos:line="80" pos:column="41">linebb<pos:position pos:line="80" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="80" pos:column="49"/></condition><then pos:line="80" pos:column="49"> <block pos:line="80" pos:column="50">{
                <expr_stmt><expr><name pos:line="81" pos:column="17">rv<pos:position pos:line="81" pos:column="19"/></name> <operator pos:line="81" pos:column="20">=<pos:position pos:line="81" pos:column="21"/></operator> <call><name pos:line="81" pos:column="22">apr_brigade_pflatten<pos:position pos:line="81" pos:column="42"/></name><argument_list pos:line="81" pos:column="42">(<argument><expr><name><name pos:line="81" pos:column="43">ctx<pos:position pos:line="81" pos:column="46"/></name><operator pos:line="81" pos:column="46">-&gt;<pos:position pos:line="81" pos:column="51"/></operator><name pos:line="81" pos:column="48">linebb<pos:position pos:line="81" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="56">&amp;<pos:position pos:line="81" pos:column="61"/></operator><name pos:line="81" pos:column="57">bflat<pos:position pos:line="81" pos:column="62"/></name></expr></argument>,
                                          <argument><expr><operator pos:line="82" pos:column="43">&amp;<pos:position pos:line="82" pos:column="48"/></operator><name pos:line="82" pos:column="44">fbytes<pos:position pos:line="82" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="52">ctx<pos:position pos:line="82" pos:column="55"/></name><operator pos:line="82" pos:column="55">-&gt;<pos:position pos:line="82" pos:column="60"/></operator><name pos:line="82" pos:column="57">tpool<pos:position pos:line="82" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="64"/></expr_stmt>
                <if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><name pos:line="83" pos:column="21">rv<pos:position pos:line="83" pos:column="23"/></name> <operator pos:line="83" pos:column="24">!=<pos:position pos:line="83" pos:column="26"/></operator> <name pos:line="83" pos:column="27">APR_SUCCESS<pos:position pos:line="83" pos:column="38"/></name></expr>)<pos:position pos:line="83" pos:column="39"/></condition><then pos:line="83" pos:column="39">
                    <block type="pseudo"><goto pos:line="84" pos:column="21">goto <name pos:line="84" pos:column="26">err<pos:position pos:line="84" pos:column="29"/></name>;<pos:position pos:line="84" pos:column="30"/></goto></block></then></if>
                <if pos:line="85" pos:column="17">if <condition pos:line="85" pos:column="20">(<expr><name pos:line="85" pos:column="21">fbytes<pos:position pos:line="85" pos:column="27"/></name> <operator pos:line="85" pos:column="28">&gt;<pos:position pos:line="85" pos:column="32"/></operator> <name pos:line="85" pos:column="30">AP_SUBST_MAX_LINE_LENGTH<pos:position pos:line="85" pos:column="54"/></name></expr>)<pos:position pos:line="85" pos:column="55"/></condition><then pos:line="85" pos:column="55"> <block pos:line="85" pos:column="56">{
                    <expr_stmt><expr><name pos:line="86" pos:column="21">rv<pos:position pos:line="86" pos:column="23"/></name> <operator pos:line="86" pos:column="24">=<pos:position pos:line="86" pos:column="25"/></operator> <name pos:line="86" pos:column="26">APR_ENOMEM<pos:position pos:line="86" pos:column="36"/></name></expr>;<pos:position pos:line="86" pos:column="37"/></expr_stmt>
                    <goto pos:line="87" pos:column="21">goto <name pos:line="87" pos:column="26">err<pos:position pos:line="87" pos:column="29"/></name>;<pos:position pos:line="87" pos:column="30"/></goto>
                }<pos:position pos:line="88" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="89" pos:column="17">tmp_b<pos:position pos:line="89" pos:column="22"/></name> <operator pos:line="89" pos:column="23">=<pos:position pos:line="89" pos:column="24"/></operator> <call><name pos:line="89" pos:column="25">apr_bucket_transient_create<pos:position pos:line="89" pos:column="52"/></name><argument_list pos:line="89" pos:column="52">(<argument><expr><name pos:line="89" pos:column="53">bflat<pos:position pos:line="89" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="60">fbytes<pos:position pos:line="89" pos:column="66"/></name></expr></argument>,
                                                <argument><expr><name><name pos:line="90" pos:column="49">f<pos:position pos:line="90" pos:column="50"/></name><operator pos:line="90" pos:column="50">-&gt;<pos:position pos:line="90" pos:column="55"/></operator><name pos:line="90" pos:column="52">r<pos:position pos:line="90" pos:column="53"/></name><operator pos:line="90" pos:column="53">-&gt;<pos:position pos:line="90" pos:column="58"/></operator><name pos:line="90" pos:column="55">connection<pos:position pos:line="90" pos:column="65"/></name><operator pos:line="90" pos:column="65">-&gt;<pos:position pos:line="90" pos:column="70"/></operator><name pos:line="90" pos:column="67">bucket_alloc<pos:position pos:line="90" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="81"/></expr_stmt>
                <expr_stmt><expr><name pos:line="91" pos:column="17">rv<pos:position pos:line="91" pos:column="19"/></name> <operator pos:line="91" pos:column="20">=<pos:position pos:line="91" pos:column="21"/></operator> <call><name pos:line="91" pos:column="22">do_pattmatch<pos:position pos:line="91" pos:column="34"/></name><argument_list pos:line="91" pos:column="34">(<argument><expr><name pos:line="91" pos:column="35">f<pos:position pos:line="91" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="38">tmp_b<pos:position pos:line="91" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="45">ctx<pos:position pos:line="91" pos:column="48"/></name><operator pos:line="91" pos:column="48">-&gt;<pos:position pos:line="91" pos:column="53"/></operator><name pos:line="91" pos:column="50">pattbb<pos:position pos:line="91" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="91" pos:column="58">ctx<pos:position pos:line="91" pos:column="61"/></name><operator pos:line="91" pos:column="61">-&gt;<pos:position pos:line="91" pos:column="66"/></operator><name pos:line="91" pos:column="63">tpool<pos:position pos:line="91" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="70"/></expr_stmt>
                <if pos:line="92" pos:column="17">if <condition pos:line="92" pos:column="20">(<expr><name pos:line="92" pos:column="21">rv<pos:position pos:line="92" pos:column="23"/></name> <operator pos:line="92" pos:column="24">!=<pos:position pos:line="92" pos:column="26"/></operator> <name pos:line="92" pos:column="27">APR_SUCCESS<pos:position pos:line="92" pos:column="38"/></name></expr>)<pos:position pos:line="92" pos:column="39"/></condition><then pos:line="92" pos:column="39">
                    <block type="pseudo"><goto pos:line="93" pos:column="21">goto <name pos:line="93" pos:column="26">err<pos:position pos:line="93" pos:column="29"/></name>;<pos:position pos:line="93" pos:column="30"/></goto></block></then></if>
                <expr_stmt><expr><call><name pos:line="94" pos:column="17">APR_BRIGADE_CONCAT<pos:position pos:line="94" pos:column="35"/></name><argument_list pos:line="94" pos:column="35">(<argument><expr><name><name pos:line="94" pos:column="36">ctx<pos:position pos:line="94" pos:column="39"/></name><operator pos:line="94" pos:column="39">-&gt;<pos:position pos:line="94" pos:column="44"/></operator><name pos:line="94" pos:column="41">passbb<pos:position pos:line="94" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="94" pos:column="49">ctx<pos:position pos:line="94" pos:column="52"/></name><operator pos:line="94" pos:column="52">-&gt;<pos:position pos:line="94" pos:column="57"/></operator><name pos:line="94" pos:column="54">pattbb<pos:position pos:line="94" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="94" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="62"/></expr_stmt>
            }<pos:position pos:line="95" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="96" pos:column="13">apr_brigade_cleanup<pos:position pos:line="96" pos:column="32"/></name><argument_list pos:line="96" pos:column="32">(<argument><expr><name><name pos:line="96" pos:column="33">ctx<pos:position pos:line="96" pos:column="36"/></name><operator pos:line="96" pos:column="36">-&gt;<pos:position pos:line="96" pos:column="41"/></operator><name pos:line="96" pos:column="38">linebb<pos:position pos:line="96" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="46"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="97" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="97" pos:column="30"/></name><argument_list pos:line="97" pos:column="30">(<argument><expr><name pos:line="97" pos:column="31">b<pos:position pos:line="97" pos:column="32"/></name></expr></argument>)<pos:position pos:line="97" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="98" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="98" pos:column="36"/></name><argument_list pos:line="98" pos:column="36">(<argument><expr><name><name pos:line="98" pos:column="37">ctx<pos:position pos:line="98" pos:column="40"/></name><operator pos:line="98" pos:column="40">-&gt;<pos:position pos:line="98" pos:column="45"/></operator><name pos:line="98" pos:column="42">passbb<pos:position pos:line="98" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="50">b<pos:position pos:line="98" pos:column="51"/></name></expr></argument>)<pos:position pos:line="98" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="99" pos:column="10"/></block></then>
        <comment type="block" pos:line="100" pos:column="9">/*
         * No need to handle FLUSH buckets separately as we call
         * ap_pass_brigade anyway at the end of the loop.
         */</comment>
        <elseif pos:line="104" pos:column="9">else <if pos:line="104" pos:column="14">if <condition pos:line="104" pos:column="17">(<expr><call><name pos:line="104" pos:column="18">APR_BUCKET_IS_METADATA<pos:position pos:line="104" pos:column="40"/></name><argument_list pos:line="104" pos:column="40">(<argument><expr><name pos:line="104" pos:column="41">b<pos:position pos:line="104" pos:column="42"/></name></expr></argument>)<pos:position pos:line="104" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="44"/></condition><then pos:line="104" pos:column="44"> <block pos:line="104" pos:column="45">{
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="105" pos:column="30"/></name><argument_list pos:line="105" pos:column="30">(<argument><expr><name pos:line="105" pos:column="31">b<pos:position pos:line="105" pos:column="32"/></name></expr></argument>)<pos:position pos:line="105" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="106" pos:column="36"/></name><argument_list pos:line="106" pos:column="36">(<argument><expr><name><name pos:line="106" pos:column="37">ctx<pos:position pos:line="106" pos:column="40"/></name><operator pos:line="106" pos:column="40">-&gt;<pos:position pos:line="106" pos:column="45"/></operator><name pos:line="106" pos:column="42">passbb<pos:position pos:line="106" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="50">b<pos:position pos:line="106" pos:column="51"/></name></expr></argument>)<pos:position pos:line="106" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="107" pos:column="10"/></block></then></if></elseif>
        <else pos:line="108" pos:column="9">else <block pos:line="108" pos:column="14">{
            <comment type="block" pos:line="109" pos:column="13">/*
             * We have actual "data" so read in as much as we can and start
             * scanning and splitting from our read buffer
             */</comment>
            <expr_stmt><expr><name pos:line="113" pos:column="13">rv<pos:position pos:line="113" pos:column="15"/></name> <operator pos:line="113" pos:column="16">=<pos:position pos:line="113" pos:column="17"/></operator> <call><name pos:line="113" pos:column="18">apr_bucket_read<pos:position pos:line="113" pos:column="33"/></name><argument_list pos:line="113" pos:column="33">(<argument><expr><name pos:line="113" pos:column="34">b<pos:position pos:line="113" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="37">&amp;<pos:position pos:line="113" pos:column="42"/></operator><name pos:line="113" pos:column="38">buff<pos:position pos:line="113" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="113" pos:column="44">&amp;<pos:position pos:line="113" pos:column="49"/></operator><name pos:line="113" pos:column="45">bytes<pos:position pos:line="113" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="52">APR_BLOCK_READ<pos:position pos:line="113" pos:column="66"/></name></expr></argument>)<pos:position pos:line="113" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="68"/></expr_stmt>
            <if pos:line="114" pos:column="13">if <condition pos:line="114" pos:column="16">(<expr><name pos:line="114" pos:column="17">rv<pos:position pos:line="114" pos:column="19"/></name> <operator pos:line="114" pos:column="20">!=<pos:position pos:line="114" pos:column="22"/></operator> <name pos:line="114" pos:column="23">APR_SUCCESS<pos:position pos:line="114" pos:column="34"/></name> <operator pos:line="114" pos:column="35">||<pos:position pos:line="114" pos:column="37"/></operator> <name pos:line="114" pos:column="38">bytes<pos:position pos:line="114" pos:column="43"/></name> <operator pos:line="114" pos:column="44">==<pos:position pos:line="114" pos:column="46"/></operator> <literal type="number" pos:line="114" pos:column="47">0<pos:position pos:line="114" pos:column="48"/></literal></expr>)<pos:position pos:line="114" pos:column="49"/></condition><then pos:line="114" pos:column="49"> <block pos:line="114" pos:column="50">{
                <expr_stmt><expr><call><name pos:line="115" pos:column="17">apr_bucket_delete<pos:position pos:line="115" pos:column="34"/></name><argument_list pos:line="115" pos:column="34">(<argument><expr><name pos:line="115" pos:column="35">b<pos:position pos:line="115" pos:column="36"/></name></expr></argument>)<pos:position pos:line="115" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="116" pos:column="14"/></block></then>
            <else pos:line="117" pos:column="13">else <block pos:line="117" pos:column="18">{
                <decl_stmt><decl><type><name pos:line="118" pos:column="17">int<pos:position pos:line="118" pos:column="20"/></name></type> <name pos:line="118" pos:column="21">num<pos:position pos:line="118" pos:column="24"/></name> <init pos:line="118" pos:column="25">= <expr><literal type="number" pos:line="118" pos:column="27">0<pos:position pos:line="118" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="118" pos:column="29"/></decl_stmt>
                <while pos:line="119" pos:column="17">while <condition pos:line="119" pos:column="23">(<expr><name pos:line="119" pos:column="24">bytes<pos:position pos:line="119" pos:column="29"/></name> <operator pos:line="119" pos:column="30">&gt;<pos:position pos:line="119" pos:column="34"/></operator> <literal type="number" pos:line="119" pos:column="32">0<pos:position pos:line="119" pos:column="33"/></literal></expr>)<pos:position pos:line="119" pos:column="34"/></condition> <block pos:line="119" pos:column="35">{
                    <expr_stmt><expr><name pos:line="120" pos:column="21">nl<pos:position pos:line="120" pos:column="23"/></name> <operator pos:line="120" pos:column="24">=<pos:position pos:line="120" pos:column="25"/></operator> <call><name pos:line="120" pos:column="26">memchr<pos:position pos:line="120" pos:column="32"/></name><argument_list pos:line="120" pos:column="32">(<argument><expr><name pos:line="120" pos:column="33">buff<pos:position pos:line="120" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="39">APR_ASCII_LF<pos:position pos:line="120" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="53">bytes<pos:position pos:line="120" pos:column="58"/></name></expr></argument>)<pos:position pos:line="120" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="60"/></expr_stmt>
                    <if pos:line="121" pos:column="21">if <condition pos:line="121" pos:column="24">(<expr><name pos:line="121" pos:column="25">nl<pos:position pos:line="121" pos:column="27"/></name></expr>)<pos:position pos:line="121" pos:column="28"/></condition><then pos:line="121" pos:column="28"> <block pos:line="121" pos:column="29">{
                        <expr_stmt><expr><name pos:line="122" pos:column="25">len<pos:position pos:line="122" pos:column="28"/></name> <operator pos:line="122" pos:column="29">=<pos:position pos:line="122" pos:column="30"/></operator> <call pos:line="122" pos:column="31">(<name pos:line="122" pos:column="32">apr_size_t<pos:position pos:line="122" pos:column="42"/></name>) <argument_list pos:line="122" pos:column="44">(<argument><expr><name pos:line="122" pos:column="45">nl<pos:position pos:line="122" pos:column="47"/></name> <operator pos:line="122" pos:column="48">-<pos:position pos:line="122" pos:column="49"/></operator> <name pos:line="122" pos:column="50">buff<pos:position pos:line="122" pos:column="54"/></name></expr></argument>)<pos:position pos:line="122" pos:column="55"/></argument_list></call> <operator pos:line="122" pos:column="56">+<pos:position pos:line="122" pos:column="57"/></operator> <literal type="number" pos:line="122" pos:column="58">1<pos:position pos:line="122" pos:column="59"/></literal></expr>;<pos:position pos:line="122" pos:column="60"/></expr_stmt>
                        <comment type="block" pos:line="123" pos:column="25">/* split *after* the newline */</comment>
                        <expr_stmt><expr><call><name pos:line="124" pos:column="25">apr_bucket_split<pos:position pos:line="124" pos:column="41"/></name><argument_list pos:line="124" pos:column="41">(<argument><expr><name pos:line="124" pos:column="42">b<pos:position pos:line="124" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="45">len<pos:position pos:line="124" pos:column="48"/></name></expr></argument>)<pos:position pos:line="124" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="50"/></expr_stmt>
                        <comment type="block" pos:line="125" pos:column="25">/*
                         * We've likely read more data, so bypass rereading
                         * bucket data and continue scanning through this
                         * buffer
                         */</comment>
                        <expr_stmt><expr><name pos:line="130" pos:column="25">bytes<pos:position pos:line="130" pos:column="30"/></name> <operator pos:line="130" pos:column="31">-=<pos:position pos:line="130" pos:column="33"/></operator> <name pos:line="130" pos:column="34">len<pos:position pos:line="130" pos:column="37"/></name></expr>;<pos:position pos:line="130" pos:column="38"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="131" pos:column="25">buff<pos:position pos:line="131" pos:column="29"/></name> <operator pos:line="131" pos:column="30">+=<pos:position pos:line="131" pos:column="32"/></operator> <name pos:line="131" pos:column="33">len<pos:position pos:line="131" pos:column="36"/></name></expr>;<pos:position pos:line="131" pos:column="37"/></expr_stmt>
                        <comment type="block" pos:line="132" pos:column="25">/*
                         * we need b to be updated for future potential
                         * splitting
                         */</comment>
                        <expr_stmt><expr><name pos:line="136" pos:column="25">tmp_b<pos:position pos:line="136" pos:column="30"/></name> <operator pos:line="136" pos:column="31">=<pos:position pos:line="136" pos:column="32"/></operator> <call><name pos:line="136" pos:column="33">APR_BUCKET_NEXT<pos:position pos:line="136" pos:column="48"/></name><argument_list pos:line="136" pos:column="48">(<argument><expr><name pos:line="136" pos:column="49">b<pos:position pos:line="136" pos:column="50"/></name></expr></argument>)<pos:position pos:line="136" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="52"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="137" pos:column="25">APR_BUCKET_REMOVE<pos:position pos:line="137" pos:column="42"/></name><argument_list pos:line="137" pos:column="42">(<argument><expr><name pos:line="137" pos:column="43">b<pos:position pos:line="137" pos:column="44"/></name></expr></argument>)<pos:position pos:line="137" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="46"/></expr_stmt>
                        <comment type="block" pos:line="138" pos:column="25">/*
                         * Hey, we found a newline! Don't forget the old
                         * stuff that needs to be added to the front. So we
                         * add the split bucket to the end, flatten the whole
                         * bb, morph the whole shebang into a bucket which is
                         * then added to the tail of the newline bb.
                         */</comment>
                        <if pos:line="145" pos:column="25">if <condition pos:line="145" pos:column="28">(<expr><operator pos:line="145" pos:column="29">!<pos:position pos:line="145" pos:column="30"/></operator><call><name pos:line="145" pos:column="30">APR_BRIGADE_EMPTY<pos:position pos:line="145" pos:column="47"/></name><argument_list pos:line="145" pos:column="47">(<argument><expr><name><name pos:line="145" pos:column="48">ctx<pos:position pos:line="145" pos:column="51"/></name><operator pos:line="145" pos:column="51">-&gt;<pos:position pos:line="145" pos:column="56"/></operator><name pos:line="145" pos:column="53">linebb<pos:position pos:line="145" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="145" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="145" pos:column="61"/></condition><then pos:line="145" pos:column="61"> <block pos:line="145" pos:column="62">{
                            <expr_stmt><expr><call><name pos:line="146" pos:column="29">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="146" pos:column="52"/></name><argument_list pos:line="146" pos:column="52">(<argument><expr><name><name pos:line="146" pos:column="53">ctx<pos:position pos:line="146" pos:column="56"/></name><operator pos:line="146" pos:column="56">-&gt;<pos:position pos:line="146" pos:column="61"/></operator><name pos:line="146" pos:column="58">linebb<pos:position pos:line="146" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="66">b<pos:position pos:line="146" pos:column="67"/></name></expr></argument>)<pos:position pos:line="146" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="69"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="147" pos:column="29">rv<pos:position pos:line="147" pos:column="31"/></name> <operator pos:line="147" pos:column="32">=<pos:position pos:line="147" pos:column="33"/></operator> <call><name pos:line="147" pos:column="34">apr_brigade_pflatten<pos:position pos:line="147" pos:column="54"/></name><argument_list pos:line="147" pos:column="54">(<argument><expr><name><name pos:line="147" pos:column="55">ctx<pos:position pos:line="147" pos:column="58"/></name><operator pos:line="147" pos:column="58">-&gt;<pos:position pos:line="147" pos:column="63"/></operator><name pos:line="147" pos:column="60">linebb<pos:position pos:line="147" pos:column="66"/></name></name></expr></argument>, <argument><expr><operator pos:line="147" pos:column="68">&amp;<pos:position pos:line="147" pos:column="73"/></operator><name pos:line="147" pos:column="69">bflat<pos:position pos:line="147" pos:column="74"/></name></expr></argument>,
                                                      <argument><expr><operator pos:line="148" pos:column="55">&amp;<pos:position pos:line="148" pos:column="60"/></operator><name pos:line="148" pos:column="56">fbytes<pos:position pos:line="148" pos:column="62"/></name></expr></argument>, <argument><expr><name><name pos:line="148" pos:column="64">ctx<pos:position pos:line="148" pos:column="67"/></name><operator pos:line="148" pos:column="67">-&gt;<pos:position pos:line="148" pos:column="72"/></operator><name pos:line="148" pos:column="69">tpool<pos:position pos:line="148" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="76"/></expr_stmt>
                            <if pos:line="149" pos:column="29">if <condition pos:line="149" pos:column="32">(<expr><name pos:line="149" pos:column="33">rv<pos:position pos:line="149" pos:column="35"/></name> <operator pos:line="149" pos:column="36">!=<pos:position pos:line="149" pos:column="38"/></operator> <name pos:line="149" pos:column="39">APR_SUCCESS<pos:position pos:line="149" pos:column="50"/></name></expr>)<pos:position pos:line="149" pos:column="51"/></condition><then pos:line="149" pos:column="51">
                                <block type="pseudo"><goto pos:line="150" pos:column="33">goto <name pos:line="150" pos:column="38">err<pos:position pos:line="150" pos:column="41"/></name>;<pos:position pos:line="150" pos:column="42"/></goto></block></then></if>
                            <if pos:line="151" pos:column="29">if <condition pos:line="151" pos:column="32">(<expr><name pos:line="151" pos:column="33">fbytes<pos:position pos:line="151" pos:column="39"/></name> <operator pos:line="151" pos:column="40">&gt;<pos:position pos:line="151" pos:column="44"/></operator> <name pos:line="151" pos:column="42">AP_SUBST_MAX_LINE_LENGTH<pos:position pos:line="151" pos:column="66"/></name></expr>)<pos:position pos:line="151" pos:column="67"/></condition><then pos:line="151" pos:column="67"> <block pos:line="151" pos:column="68">{
                                <comment type="block" pos:line="152" pos:column="33">/* Avoid pflattening further lines, we will
                                 * abort later on anyway.
                                 */</comment>
                                <expr_stmt><expr><name pos:line="155" pos:column="33">rv<pos:position pos:line="155" pos:column="35"/></name> <operator pos:line="155" pos:column="36">=<pos:position pos:line="155" pos:column="37"/></operator> <name pos:line="155" pos:column="38">APR_ENOMEM<pos:position pos:line="155" pos:column="48"/></name></expr>;<pos:position pos:line="155" pos:column="49"/></expr_stmt>
                                <goto pos:line="156" pos:column="33">goto <name pos:line="156" pos:column="38">err<pos:position pos:line="156" pos:column="41"/></name>;<pos:position pos:line="156" pos:column="42"/></goto>
                            }<pos:position pos:line="157" pos:column="30"/></block></then></if>
                            <expr_stmt><expr><name pos:line="158" pos:column="29">b<pos:position pos:line="158" pos:column="30"/></name> <operator pos:line="158" pos:column="31">=<pos:position pos:line="158" pos:column="32"/></operator> <call><name pos:line="158" pos:column="33">apr_bucket_transient_create<pos:position pos:line="158" pos:column="60"/></name><argument_list pos:line="158" pos:column="60">(<argument><expr><name pos:line="158" pos:column="61">bflat<pos:position pos:line="158" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="158" pos:column="68">fbytes<pos:position pos:line="158" pos:column="74"/></name></expr></argument>,
                                            <argument><expr><name><name pos:line="159" pos:column="45">f<pos:position pos:line="159" pos:column="46"/></name><operator pos:line="159" pos:column="46">-&gt;<pos:position pos:line="159" pos:column="51"/></operator><name pos:line="159" pos:column="48">r<pos:position pos:line="159" pos:column="49"/></name><operator pos:line="159" pos:column="49">-&gt;<pos:position pos:line="159" pos:column="54"/></operator><name pos:line="159" pos:column="51">connection<pos:position pos:line="159" pos:column="61"/></name><operator pos:line="159" pos:column="61">-&gt;<pos:position pos:line="159" pos:column="66"/></operator><name pos:line="159" pos:column="63">bucket_alloc<pos:position pos:line="159" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="159" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="77"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="160" pos:column="29">apr_brigade_cleanup<pos:position pos:line="160" pos:column="48"/></name><argument_list pos:line="160" pos:column="48">(<argument><expr><name><name pos:line="160" pos:column="49">ctx<pos:position pos:line="160" pos:column="52"/></name><operator pos:line="160" pos:column="52">-&gt;<pos:position pos:line="160" pos:column="57"/></operator><name pos:line="160" pos:column="54">linebb<pos:position pos:line="160" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="160" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="62"/></expr_stmt>
                        }<pos:position pos:line="161" pos:column="26"/></block></then></if>
                        <expr_stmt><expr><name pos:line="162" pos:column="25">rv<pos:position pos:line="162" pos:column="27"/></name> <operator pos:line="162" pos:column="28">=<pos:position pos:line="162" pos:column="29"/></operator> <call><name pos:line="162" pos:column="30">do_pattmatch<pos:position pos:line="162" pos:column="42"/></name><argument_list pos:line="162" pos:column="42">(<argument><expr><name pos:line="162" pos:column="43">f<pos:position pos:line="162" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="46">b<pos:position pos:line="162" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="162" pos:column="49">ctx<pos:position pos:line="162" pos:column="52"/></name><operator pos:line="162" pos:column="52">-&gt;<pos:position pos:line="162" pos:column="57"/></operator><name pos:line="162" pos:column="54">pattbb<pos:position pos:line="162" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="162" pos:column="62">ctx<pos:position pos:line="162" pos:column="65"/></name><operator pos:line="162" pos:column="65">-&gt;<pos:position pos:line="162" pos:column="70"/></operator><name pos:line="162" pos:column="67">tpool<pos:position pos:line="162" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="162" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="74"/></expr_stmt>
                        <if pos:line="163" pos:column="25">if <condition pos:line="163" pos:column="28">(<expr><name pos:line="163" pos:column="29">rv<pos:position pos:line="163" pos:column="31"/></name> <operator pos:line="163" pos:column="32">!=<pos:position pos:line="163" pos:column="34"/></operator> <name pos:line="163" pos:column="35">APR_SUCCESS<pos:position pos:line="163" pos:column="46"/></name></expr>)<pos:position pos:line="163" pos:column="47"/></condition><then pos:line="163" pos:column="47">
                            <block type="pseudo"><goto pos:line="164" pos:column="29">goto <name pos:line="164" pos:column="34">err<pos:position pos:line="164" pos:column="37"/></name>;<pos:position pos:line="164" pos:column="38"/></goto></block></then></if>
                        <comment type="block" pos:line="165" pos:column="25">/*
                         * Count how many buckets we have in ctx-&gt;passbb
                         * so far. Yes, this is correct we count ctx-&gt;passbb
                         * and not ctx-&gt;pattbb as we do not reset num on every
                         * iteration.
                         */</comment>
                        <for pos:line="171" pos:column="25">for <control pos:line="171" pos:column="29">(<init><expr><name pos:line="171" pos:column="30">b<pos:position pos:line="171" pos:column="31"/></name> <operator pos:line="171" pos:column="32">=<pos:position pos:line="171" pos:column="33"/></operator> <call><name pos:line="171" pos:column="34">APR_BRIGADE_FIRST<pos:position pos:line="171" pos:column="51"/></name><argument_list pos:line="171" pos:column="51">(<argument><expr><name><name pos:line="171" pos:column="52">ctx<pos:position pos:line="171" pos:column="55"/></name><operator pos:line="171" pos:column="55">-&gt;<pos:position pos:line="171" pos:column="60"/></operator><name pos:line="171" pos:column="57">pattbb<pos:position pos:line="171" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="171" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="65"/></init>
                             <condition><expr><name pos:line="172" pos:column="30">b<pos:position pos:line="172" pos:column="31"/></name> <operator pos:line="172" pos:column="32">!=<pos:position pos:line="172" pos:column="34"/></operator> <call><name pos:line="172" pos:column="35">APR_BRIGADE_SENTINEL<pos:position pos:line="172" pos:column="55"/></name><argument_list pos:line="172" pos:column="55">(<argument><expr><name><name pos:line="172" pos:column="56">ctx<pos:position pos:line="172" pos:column="59"/></name><operator pos:line="172" pos:column="59">-&gt;<pos:position pos:line="172" pos:column="64"/></operator><name pos:line="172" pos:column="61">pattbb<pos:position pos:line="172" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="172" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="69"/></condition>
                             <incr><expr><name pos:line="173" pos:column="30">b<pos:position pos:line="173" pos:column="31"/></name> <operator pos:line="173" pos:column="32">=<pos:position pos:line="173" pos:column="33"/></operator> <call><name pos:line="173" pos:column="34">APR_BUCKET_NEXT<pos:position pos:line="173" pos:column="49"/></name><argument_list pos:line="173" pos:column="49">(<argument><expr><name pos:line="173" pos:column="50">b<pos:position pos:line="173" pos:column="51"/></name></expr></argument>)<pos:position pos:line="173" pos:column="52"/></argument_list></call></expr></incr>)<pos:position pos:line="173" pos:column="53"/></control> <block pos:line="173" pos:column="54">{
                            <expr_stmt><expr><name pos:line="174" pos:column="29">num<pos:position pos:line="174" pos:column="32"/></name><operator pos:line="174" pos:column="32">++<pos:position pos:line="174" pos:column="34"/></operator></expr>;<pos:position pos:line="174" pos:column="35"/></expr_stmt>
                        }<pos:position pos:line="175" pos:column="26"/></block></for>
                        <expr_stmt><expr><call><name pos:line="176" pos:column="25">APR_BRIGADE_CONCAT<pos:position pos:line="176" pos:column="43"/></name><argument_list pos:line="176" pos:column="43">(<argument><expr><name><name pos:line="176" pos:column="44">ctx<pos:position pos:line="176" pos:column="47"/></name><operator pos:line="176" pos:column="47">-&gt;<pos:position pos:line="176" pos:column="52"/></operator><name pos:line="176" pos:column="49">passbb<pos:position pos:line="176" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="176" pos:column="57">ctx<pos:position pos:line="176" pos:column="60"/></name><operator pos:line="176" pos:column="60">-&gt;<pos:position pos:line="176" pos:column="65"/></operator><name pos:line="176" pos:column="62">pattbb<pos:position pos:line="176" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="70"/></expr_stmt>
                        <comment type="block" pos:line="177" pos:column="25">/*
                         * If the number of buckets in ctx-&gt;passbb reaches an
                         * "insane" level, we consume much memory for all the
                         * buckets as such. So lets flush them down the chain
                         * in this case and thus clear ctx-&gt;passbb. This frees
                         * the buckets memory for further processing.
                         * Usually this condition should not become true, but
                         * it is a safety measure for edge cases.
                         */</comment>
                        <if pos:line="186" pos:column="25">if <condition pos:line="186" pos:column="28">(<expr><name pos:line="186" pos:column="29">num<pos:position pos:line="186" pos:column="32"/></name> <operator pos:line="186" pos:column="33">&gt;<pos:position pos:line="186" pos:column="37"/></operator> <name pos:line="186" pos:column="35">AP_MAX_BUCKETS<pos:position pos:line="186" pos:column="49"/></name></expr>)<pos:position pos:line="186" pos:column="50"/></condition><then pos:line="186" pos:column="50"> <block pos:line="186" pos:column="51">{
                            <expr_stmt><expr><name pos:line="187" pos:column="29">b<pos:position pos:line="187" pos:column="30"/></name> <operator pos:line="187" pos:column="31">=<pos:position pos:line="187" pos:column="32"/></operator> <call><name pos:line="187" pos:column="33">apr_bucket_flush_create<pos:position pos:line="187" pos:column="56"/></name><argument_list pos:line="187" pos:column="56">(
                                                <argument><expr><name><name pos:line="188" pos:column="49">f<pos:position pos:line="188" pos:column="50"/></name><operator pos:line="188" pos:column="50">-&gt;<pos:position pos:line="188" pos:column="55"/></operator><name pos:line="188" pos:column="52">r<pos:position pos:line="188" pos:column="53"/></name><operator pos:line="188" pos:column="53">-&gt;<pos:position pos:line="188" pos:column="58"/></operator><name pos:line="188" pos:column="55">connection<pos:position pos:line="188" pos:column="65"/></name><operator pos:line="188" pos:column="65">-&gt;<pos:position pos:line="188" pos:column="70"/></operator><name pos:line="188" pos:column="67">bucket_alloc<pos:position pos:line="188" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="188" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="81"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="189" pos:column="29">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="189" pos:column="52"/></name><argument_list pos:line="189" pos:column="52">(<argument><expr><name><name pos:line="189" pos:column="53">ctx<pos:position pos:line="189" pos:column="56"/></name><operator pos:line="189" pos:column="56">-&gt;<pos:position pos:line="189" pos:column="61"/></operator><name pos:line="189" pos:column="58">passbb<pos:position pos:line="189" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="66">b<pos:position pos:line="189" pos:column="67"/></name></expr></argument>)<pos:position pos:line="189" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="69"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="190" pos:column="29">rv<pos:position pos:line="190" pos:column="31"/></name> <operator pos:line="190" pos:column="32">=<pos:position pos:line="190" pos:column="33"/></operator> <call><name pos:line="190" pos:column="34">ap_pass_brigade<pos:position pos:line="190" pos:column="49"/></name><argument_list pos:line="190" pos:column="49">(<argument><expr><name><name pos:line="190" pos:column="50">f<pos:position pos:line="190" pos:column="51"/></name><operator pos:line="190" pos:column="51">-&gt;<pos:position pos:line="190" pos:column="56"/></operator><name pos:line="190" pos:column="53">next<pos:position pos:line="190" pos:column="57"/></name></name></expr></argument>, <argument><expr><name><name pos:line="190" pos:column="59">ctx<pos:position pos:line="190" pos:column="62"/></name><operator pos:line="190" pos:column="62">-&gt;<pos:position pos:line="190" pos:column="67"/></operator><name pos:line="190" pos:column="64">passbb<pos:position pos:line="190" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="190" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="72"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="191" pos:column="29">apr_brigade_cleanup<pos:position pos:line="191" pos:column="48"/></name><argument_list pos:line="191" pos:column="48">(<argument><expr><name><name pos:line="191" pos:column="49">ctx<pos:position pos:line="191" pos:column="52"/></name><operator pos:line="191" pos:column="52">-&gt;<pos:position pos:line="191" pos:column="57"/></operator><name pos:line="191" pos:column="54">passbb<pos:position pos:line="191" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="191" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="62"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="192" pos:column="29">num<pos:position pos:line="192" pos:column="32"/></name> <operator pos:line="192" pos:column="33">=<pos:position pos:line="192" pos:column="34"/></operator> <literal type="number" pos:line="192" pos:column="35">0<pos:position pos:line="192" pos:column="36"/></literal></expr>;<pos:position pos:line="192" pos:column="37"/></expr_stmt>
                            <expr_stmt><expr><call><name pos:line="193" pos:column="29">apr_pool_clear<pos:position pos:line="193" pos:column="43"/></name><argument_list pos:line="193" pos:column="43">(<argument><expr><name><name pos:line="193" pos:column="44">ctx<pos:position pos:line="193" pos:column="47"/></name><operator pos:line="193" pos:column="47">-&gt;<pos:position pos:line="193" pos:column="52"/></operator><name pos:line="193" pos:column="49">tpool<pos:position pos:line="193" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="193" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="56"/></expr_stmt>
                            <if pos:line="194" pos:column="29">if <condition pos:line="194" pos:column="32">(<expr><name pos:line="194" pos:column="33">rv<pos:position pos:line="194" pos:column="35"/></name> <operator pos:line="194" pos:column="36">!=<pos:position pos:line="194" pos:column="38"/></operator> <name pos:line="194" pos:column="39">APR_SUCCESS<pos:position pos:line="194" pos:column="50"/></name></expr>)<pos:position pos:line="194" pos:column="51"/></condition><then pos:line="194" pos:column="51">
                                <block type="pseudo"><goto pos:line="195" pos:column="33">goto <name pos:line="195" pos:column="38">err<pos:position pos:line="195" pos:column="41"/></name>;<pos:position pos:line="195" pos:column="42"/></goto></block></then></if>
                        }<pos:position pos:line="196" pos:column="26"/></block></then></if>
                        <expr_stmt><expr><name pos:line="197" pos:column="25">b<pos:position pos:line="197" pos:column="26"/></name> <operator pos:line="197" pos:column="27">=<pos:position pos:line="197" pos:column="28"/></operator> <name pos:line="197" pos:column="29">tmp_b<pos:position pos:line="197" pos:column="34"/></name></expr>;<pos:position pos:line="197" pos:column="35"/></expr_stmt>
                    }<pos:position pos:line="198" pos:column="22"/></block></then>
                    <else pos:line="199" pos:column="21">else <block pos:line="199" pos:column="26">{
                        <comment type="block" pos:line="200" pos:column="25">/*
                         * no newline in whatever is left of this buffer so
                         * tuck data away and get next bucket
                         */</comment>
                        <expr_stmt><expr><call><name pos:line="204" pos:column="25">APR_BUCKET_REMOVE<pos:position pos:line="204" pos:column="42"/></name><argument_list pos:line="204" pos:column="42">(<argument><expr><name pos:line="204" pos:column="43">b<pos:position pos:line="204" pos:column="44"/></name></expr></argument>)<pos:position pos:line="204" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="204" pos:column="46"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="205" pos:column="25">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="205" pos:column="48"/></name><argument_list pos:line="205" pos:column="48">(<argument><expr><name><name pos:line="205" pos:column="49">ctx<pos:position pos:line="205" pos:column="52"/></name><operator pos:line="205" pos:column="52">-&gt;<pos:position pos:line="205" pos:column="57"/></operator><name pos:line="205" pos:column="54">linebb<pos:position pos:line="205" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="205" pos:column="62">b<pos:position pos:line="205" pos:column="63"/></name></expr></argument>)<pos:position pos:line="205" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="206" pos:column="25">bytes<pos:position pos:line="206" pos:column="30"/></name> <operator pos:line="206" pos:column="31">=<pos:position pos:line="206" pos:column="32"/></operator> <literal type="number" pos:line="206" pos:column="33">0<pos:position pos:line="206" pos:column="34"/></literal></expr>;<pos:position pos:line="206" pos:column="35"/></expr_stmt>
                    }<pos:position pos:line="207" pos:column="22"/></block></else></if>
                }<pos:position pos:line="208" pos:column="18"/></block></while>
            }<pos:position pos:line="209" pos:column="14"/></block></else></if>
        }<pos:position pos:line="210" pos:column="10"/></block></else></if>
        <if pos:line="211" pos:column="9">if <condition pos:line="211" pos:column="12">(<expr><operator pos:line="211" pos:column="13">!<pos:position pos:line="211" pos:column="14"/></operator><call><name pos:line="211" pos:column="14">APR_BRIGADE_EMPTY<pos:position pos:line="211" pos:column="31"/></name><argument_list pos:line="211" pos:column="31">(<argument><expr><name><name pos:line="211" pos:column="32">ctx<pos:position pos:line="211" pos:column="35"/></name><operator pos:line="211" pos:column="35">-&gt;<pos:position pos:line="211" pos:column="40"/></operator><name pos:line="211" pos:column="37">passbb<pos:position pos:line="211" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="211" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="211" pos:column="45"/></condition><then pos:line="211" pos:column="45"> <block pos:line="211" pos:column="46">{
            <expr_stmt><expr><name pos:line="212" pos:column="13">rv<pos:position pos:line="212" pos:column="15"/></name> <operator pos:line="212" pos:column="16">=<pos:position pos:line="212" pos:column="17"/></operator> <call><name pos:line="212" pos:column="18">ap_pass_brigade<pos:position pos:line="212" pos:column="33"/></name><argument_list pos:line="212" pos:column="33">(<argument><expr><name><name pos:line="212" pos:column="34">f<pos:position pos:line="212" pos:column="35"/></name><operator pos:line="212" pos:column="35">-&gt;<pos:position pos:line="212" pos:column="40"/></operator><name pos:line="212" pos:column="37">next<pos:position pos:line="212" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="43">ctx<pos:position pos:line="212" pos:column="46"/></name><operator pos:line="212" pos:column="46">-&gt;<pos:position pos:line="212" pos:column="51"/></operator><name pos:line="212" pos:column="48">passbb<pos:position pos:line="212" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="212" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="213" pos:column="13">apr_brigade_cleanup<pos:position pos:line="213" pos:column="32"/></name><argument_list pos:line="213" pos:column="32">(<argument><expr><name><name pos:line="213" pos:column="33">ctx<pos:position pos:line="213" pos:column="36"/></name><operator pos:line="213" pos:column="36">-&gt;<pos:position pos:line="213" pos:column="41"/></operator><name pos:line="213" pos:column="38">passbb<pos:position pos:line="213" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="213" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="46"/></expr_stmt>
            <if pos:line="214" pos:column="13">if <condition pos:line="214" pos:column="16">(<expr><name pos:line="214" pos:column="17">rv<pos:position pos:line="214" pos:column="19"/></name> <operator pos:line="214" pos:column="20">!=<pos:position pos:line="214" pos:column="22"/></operator> <name pos:line="214" pos:column="23">APR_SUCCESS<pos:position pos:line="214" pos:column="34"/></name></expr>)<pos:position pos:line="214" pos:column="35"/></condition><then pos:line="214" pos:column="35">
                <block type="pseudo"><goto pos:line="215" pos:column="17">goto <name pos:line="215" pos:column="22">err<pos:position pos:line="215" pos:column="25"/></name>;<pos:position pos:line="215" pos:column="26"/></goto></block></then></if>
        }<pos:position pos:line="216" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="217" pos:column="9">apr_pool_clear<pos:position pos:line="217" pos:column="23"/></name><argument_list pos:line="217" pos:column="23">(<argument><expr><name><name pos:line="217" pos:column="24">ctx<pos:position pos:line="217" pos:column="27"/></name><operator pos:line="217" pos:column="27">-&gt;<pos:position pos:line="217" pos:column="32"/></operator><name pos:line="217" pos:column="29">tpool<pos:position pos:line="217" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="217" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="218" pos:column="6"/></block></while>

    <comment type="block" pos:line="220" pos:column="5">/* Anything left we want to save/setaside for the next go-around */</comment>
    <if pos:line="221" pos:column="5">if <condition pos:line="221" pos:column="8">(<expr><operator pos:line="221" pos:column="9">!<pos:position pos:line="221" pos:column="10"/></operator><call><name pos:line="221" pos:column="10">APR_BRIGADE_EMPTY<pos:position pos:line="221" pos:column="27"/></name><argument_list pos:line="221" pos:column="27">(<argument><expr><name><name pos:line="221" pos:column="28">ctx<pos:position pos:line="221" pos:column="31"/></name><operator pos:line="221" pos:column="31">-&gt;<pos:position pos:line="221" pos:column="36"/></operator><name pos:line="221" pos:column="33">linebb<pos:position pos:line="221" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="221" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="221" pos:column="41"/></condition><then pos:line="221" pos:column="41"> <block pos:line="221" pos:column="42">{
        <comment type="block" pos:line="222" pos:column="9">/*
         * Provide ap_save_brigade with an existing empty brigade
         * (ctx-&gt;linesbb) to avoid creating a new one.
         */</comment>
        <expr_stmt><expr><call><name pos:line="226" pos:column="9">ap_save_brigade<pos:position pos:line="226" pos:column="24"/></name><argument_list pos:line="226" pos:column="24">(<argument><expr><name pos:line="226" pos:column="25">f<pos:position pos:line="226" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="226" pos:column="28">&amp;<pos:position pos:line="226" pos:column="33"/></operator><operator pos:line="226" pos:column="29">(<pos:position pos:line="226" pos:column="30"/></operator><name><name pos:line="226" pos:column="30">ctx<pos:position pos:line="226" pos:column="33"/></name><operator pos:line="226" pos:column="33">-&gt;<pos:position pos:line="226" pos:column="38"/></operator><name pos:line="226" pos:column="35">linesbb<pos:position pos:line="226" pos:column="42"/></name></name><operator pos:line="226" pos:column="42">)<pos:position pos:line="226" pos:column="43"/></operator></expr></argument>, <argument><expr><operator pos:line="226" pos:column="45">&amp;<pos:position pos:line="226" pos:column="50"/></operator><operator pos:line="226" pos:column="46">(<pos:position pos:line="226" pos:column="47"/></operator><name><name pos:line="226" pos:column="47">ctx<pos:position pos:line="226" pos:column="50"/></name><operator pos:line="226" pos:column="50">-&gt;<pos:position pos:line="226" pos:column="55"/></operator><name pos:line="226" pos:column="52">linebb<pos:position pos:line="226" pos:column="58"/></name></name><operator pos:line="226" pos:column="58">)<pos:position pos:line="226" pos:column="59"/></operator></expr></argument>, <argument><expr><name><name pos:line="226" pos:column="61">f<pos:position pos:line="226" pos:column="62"/></name><operator pos:line="226" pos:column="62">-&gt;<pos:position pos:line="226" pos:column="67"/></operator><name pos:line="226" pos:column="64">r<pos:position pos:line="226" pos:column="65"/></name><operator pos:line="226" pos:column="65">-&gt;<pos:position pos:line="226" pos:column="70"/></operator><name pos:line="226" pos:column="67">pool<pos:position pos:line="226" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="226" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><name pos:line="227" pos:column="9">tmp_bb<pos:position pos:line="227" pos:column="15"/></name> <operator pos:line="227" pos:column="16">=<pos:position pos:line="227" pos:column="17"/></operator> <name><name pos:line="227" pos:column="18">ctx<pos:position pos:line="227" pos:column="21"/></name><operator pos:line="227" pos:column="21">-&gt;<pos:position pos:line="227" pos:column="26"/></operator><name pos:line="227" pos:column="23">linebb<pos:position pos:line="227" pos:column="29"/></name></name></expr>;<pos:position pos:line="227" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="228" pos:column="9">ctx<pos:position pos:line="228" pos:column="12"/></name><operator pos:line="228" pos:column="12">-&gt;<pos:position pos:line="228" pos:column="17"/></operator><name pos:line="228" pos:column="14">linebb<pos:position pos:line="228" pos:column="20"/></name></name> <operator pos:line="228" pos:column="21">=<pos:position pos:line="228" pos:column="22"/></operator> <name><name pos:line="228" pos:column="23">ctx<pos:position pos:line="228" pos:column="26"/></name><operator pos:line="228" pos:column="26">-&gt;<pos:position pos:line="228" pos:column="31"/></operator><name pos:line="228" pos:column="28">linesbb<pos:position pos:line="228" pos:column="35"/></name></name></expr>;<pos:position pos:line="228" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="229" pos:column="9">ctx<pos:position pos:line="229" pos:column="12"/></name><operator pos:line="229" pos:column="12">-&gt;<pos:position pos:line="229" pos:column="17"/></operator><name pos:line="229" pos:column="14">linesbb<pos:position pos:line="229" pos:column="21"/></name></name> <operator pos:line="229" pos:column="22">=<pos:position pos:line="229" pos:column="23"/></operator> <name pos:line="229" pos:column="24">tmp_bb<pos:position pos:line="229" pos:column="30"/></name></expr>;<pos:position pos:line="229" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="230" pos:column="6"/></block></then></if>

    <return pos:line="232" pos:column="5">return <expr><name pos:line="232" pos:column="12">APR_SUCCESS<pos:position pos:line="232" pos:column="23"/></name></expr>;<pos:position pos:line="232" pos:column="24"/></return>
<label><name pos:line="233" pos:column="1">err<pos:position pos:line="233" pos:column="4"/></name>:<pos:position pos:line="233" pos:column="5"/></label>
    <if pos:line="234" pos:column="5">if <condition pos:line="234" pos:column="8">(<expr><name pos:line="234" pos:column="9">rv<pos:position pos:line="234" pos:column="11"/></name> <operator pos:line="234" pos:column="12">==<pos:position pos:line="234" pos:column="14"/></operator> <name pos:line="234" pos:column="15">APR_ENOMEM<pos:position pos:line="234" pos:column="25"/></name></expr>)<pos:position pos:line="234" pos:column="26"/></condition><then pos:line="234" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="235" pos:column="9">ap_log_rerror<pos:position pos:line="235" pos:column="22"/></name><argument_list pos:line="235" pos:column="22">(<argument><expr><name pos:line="235" pos:column="23">APLOG_MARK<pos:position pos:line="235" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="235" pos:column="35">APLOG_ERR<pos:position pos:line="235" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="235" pos:column="46">0<pos:position pos:line="235" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="235" pos:column="49">f<pos:position pos:line="235" pos:column="50"/></name><operator pos:line="235" pos:column="50">-&gt;<pos:position pos:line="235" pos:column="55"/></operator><name pos:line="235" pos:column="52">r<pos:position pos:line="235" pos:column="53"/></name></name></expr></argument>, <argument><expr><call><name pos:line="235" pos:column="55">APLOGNO<pos:position pos:line="235" pos:column="62"/></name><argument_list pos:line="235" pos:column="62">(<argument><expr><literal type="number" pos:line="235" pos:column="63">01328<pos:position pos:line="235" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="235" pos:column="69"/></argument_list></call> <literal type="string" pos:line="235" pos:column="70">"Line too long, URI %s"<pos:position pos:line="235" pos:column="93"/></literal></expr></argument>,
                      <argument><expr><name><name pos:line="236" pos:column="23">f<pos:position pos:line="236" pos:column="24"/></name><operator pos:line="236" pos:column="24">-&gt;<pos:position pos:line="236" pos:column="29"/></operator><name pos:line="236" pos:column="26">r<pos:position pos:line="236" pos:column="27"/></name><operator pos:line="236" pos:column="27">-&gt;<pos:position pos:line="236" pos:column="32"/></operator><name pos:line="236" pos:column="29">uri<pos:position pos:line="236" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="236" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="236" pos:column="34"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="237" pos:column="5">apr_pool_clear<pos:position pos:line="237" pos:column="19"/></name><argument_list pos:line="237" pos:column="19">(<argument><expr><name><name pos:line="237" pos:column="20">ctx<pos:position pos:line="237" pos:column="23"/></name><operator pos:line="237" pos:column="23">-&gt;<pos:position pos:line="237" pos:column="28"/></operator><name pos:line="237" pos:column="25">tpool<pos:position pos:line="237" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="237" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="32"/></expr_stmt>
    <return pos:line="238" pos:column="5">return <expr><name pos:line="238" pos:column="12">rv<pos:position pos:line="238" pos:column="14"/></name></expr>;<pos:position pos:line="238" pos:column="15"/></return>
}<pos:position pos:line="239" pos:column="2"/></block></function></unit>
