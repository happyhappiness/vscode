<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4144_httpd-2.2.34.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">compile_regex<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">int<pos:position pos:line="2" pos:column="18"/></name></type> <name pos:line="2" pos:column="19">options<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="28">int<pos:position pos:line="2" pos:column="31"/></name></type> <name pos:line="2" pos:column="32">oldims<pos:position pos:line="2" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="40">int<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">brackets<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="55">uschar<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier><modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">codeptr<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>,
  <parameter><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">uschar<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier><modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">ptrptr<pos:position pos:line="3" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="26">const<pos:position pos:line="3" pos:column="31"/></specifier> <name pos:line="3" pos:column="32">char<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier><modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type><name pos:line="3" pos:column="39">errorptr<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="49">BOOL<pos:position pos:line="3" pos:column="53"/></name></type> <name pos:line="3" pos:column="54">lookbehind<pos:position pos:line="3" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="66">int<pos:position pos:line="3" pos:column="69"/></name></type> <name pos:line="3" pos:column="70">skipbytes<pos:position pos:line="3" pos:column="79"/></name></decl></parameter>,
  <parameter><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name> <modifier pos:line="4" pos:column="7">*<pos:position pos:line="4" pos:column="8"/></modifier></type><name pos:line="4" pos:column="8">firstbyteptr<pos:position pos:line="4" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="22">int<pos:position pos:line="4" pos:column="25"/></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">reqbyteptr<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="39">branch_chain<pos:position pos:line="4" pos:column="51"/></name> <modifier pos:line="4" pos:column="52">*<pos:position pos:line="4" pos:column="53"/></modifier></type><name pos:line="4" pos:column="53">bcptr<pos:position pos:line="4" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="60">compile_data<pos:position pos:line="4" pos:column="72"/></name> <modifier pos:line="4" pos:column="73">*<pos:position pos:line="4" pos:column="74"/></modifier></type><name pos:line="4" pos:column="74">cd<pos:position pos:line="4" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="77"/></parameter_list>
<block pos:line="5" pos:column="1">{
<decl_stmt><decl><type><specifier pos:line="6" pos:column="1">const<pos:position pos:line="6" pos:column="6"/></specifier> <name pos:line="6" pos:column="7">uschar<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">ptr<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><operator pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></operator><name pos:line="6" pos:column="22">ptrptr<pos:position pos:line="6" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="29"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">uschar<pos:position pos:line="7" pos:column="7"/></name> <modifier pos:line="7" pos:column="8">*<pos:position pos:line="7" pos:column="9"/></modifier></type><name pos:line="7" pos:column="9">code<pos:position pos:line="7" pos:column="13"/></name> <init pos:line="7" pos:column="14">= <expr><operator pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></operator><name pos:line="7" pos:column="17">codeptr<pos:position pos:line="7" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">uschar<pos:position pos:line="8" pos:column="7"/></name> <modifier pos:line="8" pos:column="8">*<pos:position pos:line="8" pos:column="9"/></modifier></type><name pos:line="8" pos:column="9">last_branch<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name pos:line="8" pos:column="23">code<pos:position pos:line="8" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="9" pos:column="1">uschar<pos:position pos:line="9" pos:column="7"/></name> <modifier pos:line="9" pos:column="8">*<pos:position pos:line="9" pos:column="9"/></modifier></type><name pos:line="9" pos:column="9">start_bracket<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><name pos:line="9" pos:column="25">code<pos:position pos:line="9" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="10" pos:column="1">uschar<pos:position pos:line="10" pos:column="7"/></name> <modifier pos:line="10" pos:column="8">*<pos:position pos:line="10" pos:column="9"/></modifier></type><name pos:line="10" pos:column="9">reverse_count<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><name pos:line="10" pos:column="25">NULL<pos:position pos:line="10" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="11" pos:column="1">int<pos:position pos:line="11" pos:column="4"/></name></type> <name pos:line="11" pos:column="5">firstbyte<pos:position pos:line="11" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="16">reqbyte<pos:position pos:line="11" pos:column="23"/></name></decl>;<pos:position pos:line="11" pos:column="24"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="12" pos:column="1">int<pos:position pos:line="12" pos:column="4"/></name></type> <name pos:line="12" pos:column="5">branchfirstbyte<pos:position pos:line="12" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="22">branchreqbyte<pos:position pos:line="12" pos:column="35"/></name></decl>;<pos:position pos:line="12" pos:column="36"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="13" pos:column="1">branch_chain<pos:position pos:line="13" pos:column="13"/></name></type> <name pos:line="13" pos:column="14">bc<pos:position pos:line="13" pos:column="16"/></name></decl>;<pos:position pos:line="13" pos:column="17"/></decl_stmt>

<expr_stmt><expr><name><name pos:line="15" pos:column="1">bc<pos:position pos:line="15" pos:column="3"/></name><operator pos:line="15" pos:column="3">.<pos:position pos:line="15" pos:column="4"/></operator><name pos:line="15" pos:column="4">outer<pos:position pos:line="15" pos:column="9"/></name></name> <operator pos:line="15" pos:column="10">=<pos:position pos:line="15" pos:column="11"/></operator> <name pos:line="15" pos:column="12">bcptr<pos:position pos:line="15" pos:column="17"/></name></expr>;<pos:position pos:line="15" pos:column="18"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="16" pos:column="1">bc<pos:position pos:line="16" pos:column="3"/></name><operator pos:line="16" pos:column="3">.<pos:position pos:line="16" pos:column="4"/></operator><name pos:line="16" pos:column="4">current<pos:position pos:line="16" pos:column="11"/></name></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <name pos:line="16" pos:column="14">code<pos:position pos:line="16" pos:column="18"/></name></expr>;<pos:position pos:line="16" pos:column="19"/></expr_stmt>

<expr_stmt><expr><name pos:line="18" pos:column="1">firstbyte<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <name pos:line="18" pos:column="13">reqbyte<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">=<pos:position pos:line="18" pos:column="22"/></operator> <name pos:line="18" pos:column="23">REQ_UNSET<pos:position pos:line="18" pos:column="32"/></name></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>

<comment type="block" pos:line="20" pos:column="1">/* Offset is set zero to mark that this bracket is still open */</comment>

<expr_stmt><expr><call><name pos:line="22" pos:column="1">PUT<pos:position pos:line="22" pos:column="4"/></name><argument_list pos:line="22" pos:column="4">(<argument><expr><name pos:line="22" pos:column="5">code<pos:position pos:line="22" pos:column="9"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="11">1<pos:position pos:line="22" pos:column="12"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="14">0<pos:position pos:line="22" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="17"/></expr_stmt>
<expr_stmt><expr><name pos:line="23" pos:column="1">code<pos:position pos:line="23" pos:column="5"/></name> <operator pos:line="23" pos:column="6">+=<pos:position pos:line="23" pos:column="8"/></operator> <literal type="number" pos:line="23" pos:column="9">1<pos:position pos:line="23" pos:column="10"/></literal> <operator pos:line="23" pos:column="11">+<pos:position pos:line="23" pos:column="12"/></operator> <name pos:line="23" pos:column="13">LINK_SIZE<pos:position pos:line="23" pos:column="22"/></name> <operator pos:line="23" pos:column="23">+<pos:position pos:line="23" pos:column="24"/></operator> <name pos:line="23" pos:column="25">skipbytes<pos:position pos:line="23" pos:column="34"/></name></expr>;<pos:position pos:line="23" pos:column="35"/></expr_stmt>

<comment type="block" pos:line="25" pos:column="1">/* Loop for each alternative branch */</comment>

<for pos:line="27" pos:column="1">for <control pos:line="27" pos:column="5">(<init pos:line="27" pos:column="6">;<pos:position pos:line="27" pos:column="7"/></init><condition pos:line="27" pos:column="7">;<pos:position pos:line="27" pos:column="8"/></condition><incr/>)<pos:position pos:line="27" pos:column="9"/></control>
  <block pos:line="28" pos:column="3">{
  <comment type="block" pos:line="29" pos:column="3">/* Handle a change of ims options at the start of the branch */</comment>

  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><operator pos:line="31" pos:column="7">(<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">options<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">&amp;<pos:position pos:line="31" pos:column="21"/></operator> <name pos:line="31" pos:column="18">PCRE_IMS<pos:position pos:line="31" pos:column="26"/></name><operator pos:line="31" pos:column="26">)<pos:position pos:line="31" pos:column="27"/></operator> <operator pos:line="31" pos:column="28">!=<pos:position pos:line="31" pos:column="30"/></operator> <name pos:line="31" pos:column="31">oldims<pos:position pos:line="31" pos:column="37"/></name></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38">
    <block pos:line="32" pos:column="5">{
    <expr_stmt><expr><operator pos:line="33" pos:column="5">*<pos:position pos:line="33" pos:column="6"/></operator><name pos:line="33" pos:column="6">code<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">++<pos:position pos:line="33" pos:column="12"/></operator> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <name pos:line="33" pos:column="15">OP_OPT<pos:position pos:line="33" pos:column="21"/></name></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="34" pos:column="5">*<pos:position pos:line="34" pos:column="6"/></operator><name pos:line="34" pos:column="6">code<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">++<pos:position pos:line="34" pos:column="12"/></operator> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <name pos:line="34" pos:column="15">options<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">&amp;<pos:position pos:line="34" pos:column="28"/></operator> <name pos:line="34" pos:column="25">PCRE_IMS<pos:position pos:line="34" pos:column="33"/></name></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="37" pos:column="3">/* Set up dummy OP_REVERSE if lookbehind assertion */</comment>

  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name pos:line="39" pos:column="7">lookbehind<pos:position pos:line="39" pos:column="17"/></name></expr>)<pos:position pos:line="39" pos:column="18"/></condition><then pos:line="39" pos:column="18">
    <block pos:line="40" pos:column="5">{
    <expr_stmt><expr><operator pos:line="41" pos:column="5">*<pos:position pos:line="41" pos:column="6"/></operator><name pos:line="41" pos:column="6">code<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">++<pos:position pos:line="41" pos:column="12"/></operator> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <name pos:line="41" pos:column="15">OP_REVERSE<pos:position pos:line="41" pos:column="25"/></name></expr>;<pos:position pos:line="41" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="42" pos:column="5">reverse_count<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name pos:line="42" pos:column="21">code<pos:position pos:line="42" pos:column="25"/></name></expr>;<pos:position pos:line="42" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="43" pos:column="5">PUTINC<pos:position pos:line="43" pos:column="11"/></name><argument_list pos:line="43" pos:column="11">(<argument><expr><name pos:line="43" pos:column="12">code<pos:position pos:line="43" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="18">0<pos:position pos:line="43" pos:column="19"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="43" pos:column="21">0<pos:position pos:line="43" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="46" pos:column="3">/* Now compile the branch */</comment>

  <if pos:line="48" pos:column="3">if <condition pos:line="48" pos:column="6">(<expr><operator pos:line="48" pos:column="7">!<pos:position pos:line="48" pos:column="8"/></operator><call><name pos:line="48" pos:column="8">compile_branch<pos:position pos:line="48" pos:column="22"/></name><argument_list pos:line="48" pos:column="22">(<argument><expr><operator pos:line="48" pos:column="23">&amp;<pos:position pos:line="48" pos:column="28"/></operator><name pos:line="48" pos:column="24">options<pos:position pos:line="48" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="33">brackets<pos:position pos:line="48" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="43">&amp;<pos:position pos:line="48" pos:column="48"/></operator><name pos:line="48" pos:column="44">code<pos:position pos:line="48" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="50">&amp;<pos:position pos:line="48" pos:column="55"/></operator><name pos:line="48" pos:column="51">ptr<pos:position pos:line="48" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="56">errorptr<pos:position pos:line="48" pos:column="64"/></name></expr></argument>,
        <argument><expr><operator pos:line="49" pos:column="9">&amp;<pos:position pos:line="49" pos:column="14"/></operator><name pos:line="49" pos:column="10">branchfirstbyte<pos:position pos:line="49" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="27">&amp;<pos:position pos:line="49" pos:column="32"/></operator><name pos:line="49" pos:column="28">branchreqbyte<pos:position pos:line="49" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="43">&amp;<pos:position pos:line="49" pos:column="48"/></operator><name pos:line="49" pos:column="44">bc<pos:position pos:line="49" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="48">cd<pos:position pos:line="49" pos:column="50"/></name></expr></argument>)<pos:position pos:line="49" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="52"/></condition><then pos:line="49" pos:column="52">
    <block pos:line="50" pos:column="5">{
    <expr_stmt><expr><operator pos:line="51" pos:column="5">*<pos:position pos:line="51" pos:column="6"/></operator><name pos:line="51" pos:column="6">ptrptr<pos:position pos:line="51" pos:column="12"/></name> <operator pos:line="51" pos:column="13">=<pos:position pos:line="51" pos:column="14"/></operator> <name pos:line="51" pos:column="15">ptr<pos:position pos:line="51" pos:column="18"/></name></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>
    <return pos:line="52" pos:column="5">return <expr><name pos:line="52" pos:column="12">FALSE<pos:position pos:line="52" pos:column="17"/></name></expr>;<pos:position pos:line="52" pos:column="18"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="55" pos:column="3">/* If this is the first branch, the firstbyte and reqbyte values for the
  branch become the values for the regex. */</comment>

  <if pos:line="58" pos:column="3">if <condition pos:line="58" pos:column="6">(<expr><operator pos:line="58" pos:column="7">*<pos:position pos:line="58" pos:column="8"/></operator><name pos:line="58" pos:column="8">last_branch<pos:position pos:line="58" pos:column="19"/></name> <operator pos:line="58" pos:column="20">!=<pos:position pos:line="58" pos:column="22"/></operator> <name pos:line="58" pos:column="23">OP_ALT<pos:position pos:line="58" pos:column="29"/></name></expr>)<pos:position pos:line="58" pos:column="30"/></condition><then pos:line="58" pos:column="30">
    <block pos:line="59" pos:column="5">{
    <expr_stmt><expr><name pos:line="60" pos:column="5">firstbyte<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator> <name pos:line="60" pos:column="17">branchfirstbyte<pos:position pos:line="60" pos:column="32"/></name></expr>;<pos:position pos:line="60" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="61" pos:column="5">reqbyte<pos:position pos:line="61" pos:column="12"/></name> <operator pos:line="61" pos:column="13">=<pos:position pos:line="61" pos:column="14"/></operator> <name pos:line="61" pos:column="15">branchreqbyte<pos:position pos:line="61" pos:column="28"/></name></expr>;<pos:position pos:line="61" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="62" pos:column="6"/></block></then>

  <comment type="block" pos:line="64" pos:column="3">/* If this is not the first branch, the first char and reqbyte have to
  match the values from all the previous branches, except that if the previous
  value for reqbyte didn't have REQ_VARY set, it can still match, and we set
  REQ_VARY for the regex. */</comment>

  <else pos:line="69" pos:column="3">else
    <block pos:line="70" pos:column="5">{
    <comment type="block" pos:line="71" pos:column="5">/* If we previously had a firstbyte, but it doesn't match the new branch,
    we have to abandon the firstbyte for the regex, but if there was previously
    no reqbyte, it takes on the value of the old firstbyte. */</comment>

    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">firstbyte<pos:position pos:line="75" pos:column="18"/></name> <operator pos:line="75" pos:column="19">&gt;=<pos:position pos:line="75" pos:column="24"/></operator> <literal type="number" pos:line="75" pos:column="22">0<pos:position pos:line="75" pos:column="23"/></literal> <operator pos:line="75" pos:column="24">&amp;&amp;<pos:position pos:line="75" pos:column="34"/></operator> <name pos:line="75" pos:column="27">firstbyte<pos:position pos:line="75" pos:column="36"/></name> <operator pos:line="75" pos:column="37">!=<pos:position pos:line="75" pos:column="39"/></operator> <name pos:line="75" pos:column="40">branchfirstbyte<pos:position pos:line="75" pos:column="55"/></name></expr>)<pos:position pos:line="75" pos:column="56"/></condition><then pos:line="75" pos:column="56">
      <block pos:line="76" pos:column="7">{
      <if pos:line="77" pos:column="7">if <condition pos:line="77" pos:column="10">(<expr><name pos:line="77" pos:column="11">reqbyte<pos:position pos:line="77" pos:column="18"/></name> <operator pos:line="77" pos:column="19">&lt;<pos:position pos:line="77" pos:column="23"/></operator> <literal type="number" pos:line="77" pos:column="21">0<pos:position pos:line="77" pos:column="22"/></literal></expr>)<pos:position pos:line="77" pos:column="23"/></condition><then pos:line="77" pos:column="23"> <block type="pseudo"><expr_stmt><expr><name pos:line="77" pos:column="24">reqbyte<pos:position pos:line="77" pos:column="31"/></name> <operator pos:line="77" pos:column="32">=<pos:position pos:line="77" pos:column="33"/></operator> <name pos:line="77" pos:column="34">firstbyte<pos:position pos:line="77" pos:column="43"/></name></expr>;<pos:position pos:line="77" pos:column="44"/></expr_stmt></block></then></if>
      <expr_stmt><expr><name pos:line="78" pos:column="7">firstbyte<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">=<pos:position pos:line="78" pos:column="18"/></operator> <name pos:line="78" pos:column="19">REQ_NONE<pos:position pos:line="78" pos:column="27"/></name></expr>;<pos:position pos:line="78" pos:column="28"/></expr_stmt>
      }<pos:position pos:line="79" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="81" pos:column="5">/* If we (now or from before) have no firstbyte, a firstbyte from the
    branch becomes a reqbyte if there isn't a branch reqbyte. */</comment>

    <if pos:line="84" pos:column="5">if <condition pos:line="84" pos:column="8">(<expr><name pos:line="84" pos:column="9">firstbyte<pos:position pos:line="84" pos:column="18"/></name> <operator pos:line="84" pos:column="19">&lt;<pos:position pos:line="84" pos:column="23"/></operator> <literal type="number" pos:line="84" pos:column="21">0<pos:position pos:line="84" pos:column="22"/></literal> <operator pos:line="84" pos:column="23">&amp;&amp;<pos:position pos:line="84" pos:column="33"/></operator> <name pos:line="84" pos:column="26">branchfirstbyte<pos:position pos:line="84" pos:column="41"/></name> <operator pos:line="84" pos:column="42">&gt;=<pos:position pos:line="84" pos:column="47"/></operator> <literal type="number" pos:line="84" pos:column="45">0<pos:position pos:line="84" pos:column="46"/></literal> <operator pos:line="84" pos:column="47">&amp;&amp;<pos:position pos:line="84" pos:column="57"/></operator> <name pos:line="84" pos:column="50">branchreqbyte<pos:position pos:line="84" pos:column="63"/></name> <operator pos:line="84" pos:column="64">&lt;<pos:position pos:line="84" pos:column="68"/></operator> <literal type="number" pos:line="84" pos:column="66">0<pos:position pos:line="84" pos:column="67"/></literal></expr>)<pos:position pos:line="84" pos:column="68"/></condition><then pos:line="84" pos:column="68">
        <block type="pseudo"><expr_stmt><expr><name pos:line="85" pos:column="9">branchreqbyte<pos:position pos:line="85" pos:column="22"/></name> <operator pos:line="85" pos:column="23">=<pos:position pos:line="85" pos:column="24"/></operator> <name pos:line="85" pos:column="25">branchfirstbyte<pos:position pos:line="85" pos:column="40"/></name></expr>;<pos:position pos:line="85" pos:column="41"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="87" pos:column="5">/* Now ensure that the reqbytes match */</comment>

    <if pos:line="89" pos:column="5">if <condition pos:line="89" pos:column="8">(<expr><operator pos:line="89" pos:column="9">(<pos:position pos:line="89" pos:column="10"/></operator><name pos:line="89" pos:column="10">reqbyte<pos:position pos:line="89" pos:column="17"/></name> <operator pos:line="89" pos:column="18">&amp;<pos:position pos:line="89" pos:column="23"/></operator> <operator pos:line="89" pos:column="20">~<pos:position pos:line="89" pos:column="21"/></operator><name pos:line="89" pos:column="21">REQ_VARY<pos:position pos:line="89" pos:column="29"/></name><operator pos:line="89" pos:column="29">)<pos:position pos:line="89" pos:column="30"/></operator> <operator pos:line="89" pos:column="31">!=<pos:position pos:line="89" pos:column="33"/></operator> <operator pos:line="89" pos:column="34">(<pos:position pos:line="89" pos:column="35"/></operator><name pos:line="89" pos:column="35">branchreqbyte<pos:position pos:line="89" pos:column="48"/></name> <operator pos:line="89" pos:column="49">&amp;<pos:position pos:line="89" pos:column="54"/></operator> <operator pos:line="89" pos:column="51">~<pos:position pos:line="89" pos:column="52"/></operator><name pos:line="89" pos:column="52">REQ_VARY<pos:position pos:line="89" pos:column="60"/></name><operator pos:line="89" pos:column="60">)<pos:position pos:line="89" pos:column="61"/></operator></expr>)<pos:position pos:line="89" pos:column="62"/></condition><then pos:line="89" pos:column="62">
      <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="7">reqbyte<pos:position pos:line="90" pos:column="14"/></name> <operator pos:line="90" pos:column="15">=<pos:position pos:line="90" pos:column="16"/></operator> <name pos:line="90" pos:column="17">REQ_NONE<pos:position pos:line="90" pos:column="25"/></name></expr>;<pos:position pos:line="90" pos:column="26"/></expr_stmt></block></then>
    <else pos:line="91" pos:column="5">else <block type="pseudo"><expr_stmt><expr><name pos:line="91" pos:column="10">reqbyte<pos:position pos:line="91" pos:column="17"/></name> <operator pos:line="91" pos:column="18">|=<pos:position pos:line="91" pos:column="20"/></operator> <name pos:line="91" pos:column="21">branchreqbyte<pos:position pos:line="91" pos:column="34"/></name></expr>;<pos:position pos:line="91" pos:column="35"/></expr_stmt></block></else></if>   <comment type="block" pos:line="91" pos:column="38">/* To "or" REQ_VARY */</comment>
    }<pos:position pos:line="92" pos:column="6"/></block></else></if>

  <comment type="block" pos:line="94" pos:column="3">/* If lookbehind, check that this branch matches a fixed-length string,
  and put the length into the OP_REVERSE item. Temporarily mark the end of
  the branch with OP_END. */</comment>

  <if pos:line="98" pos:column="3">if <condition pos:line="98" pos:column="6">(<expr><name pos:line="98" pos:column="7">lookbehind<pos:position pos:line="98" pos:column="17"/></name></expr>)<pos:position pos:line="98" pos:column="18"/></condition><then pos:line="98" pos:column="18">
    <block pos:line="99" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="100" pos:column="5">int<pos:position pos:line="100" pos:column="8"/></name></type> <name pos:line="100" pos:column="9">length<pos:position pos:line="100" pos:column="15"/></name></decl>;<pos:position pos:line="100" pos:column="16"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="101" pos:column="5">*<pos:position pos:line="101" pos:column="6"/></operator><name pos:line="101" pos:column="6">code<pos:position pos:line="101" pos:column="10"/></name> <operator pos:line="101" pos:column="11">=<pos:position pos:line="101" pos:column="12"/></operator> <name pos:line="101" pos:column="13">OP_END<pos:position pos:line="101" pos:column="19"/></name></expr>;<pos:position pos:line="101" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="102" pos:column="5">length<pos:position pos:line="102" pos:column="11"/></name> <operator pos:line="102" pos:column="12">=<pos:position pos:line="102" pos:column="13"/></operator> <call><name pos:line="102" pos:column="14">find_fixedlength<pos:position pos:line="102" pos:column="30"/></name><argument_list pos:line="102" pos:column="30">(<argument><expr><name pos:line="102" pos:column="31">last_branch<pos:position pos:line="102" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="44">options<pos:position pos:line="102" pos:column="51"/></name></expr></argument>)<pos:position pos:line="102" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">DPRINTF<pos:position pos:line="103" pos:column="12"/></name><argument_list pos:line="103" pos:column="12">(<argument><expr><operator pos:line="103" pos:column="13">(<pos:position pos:line="103" pos:column="14"/></operator><literal type="string" pos:line="103" pos:column="14">"fixed length = %d\n"<pos:position pos:line="103" pos:column="35"/></literal><operator pos:line="103" pos:column="35">,<pos:position pos:line="103" pos:column="36"/></operator> <name pos:line="103" pos:column="37">length<pos:position pos:line="103" pos:column="43"/></name><operator pos:line="103" pos:column="43">)<pos:position pos:line="103" pos:column="44"/></operator></expr></argument>)<pos:position pos:line="103" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="46"/></expr_stmt>
    <if pos:line="104" pos:column="5">if <condition pos:line="104" pos:column="8">(<expr><name pos:line="104" pos:column="9">length<pos:position pos:line="104" pos:column="15"/></name> <operator pos:line="104" pos:column="16">&lt;<pos:position pos:line="104" pos:column="20"/></operator> <literal type="number" pos:line="104" pos:column="18">0<pos:position pos:line="104" pos:column="19"/></literal></expr>)<pos:position pos:line="104" pos:column="20"/></condition><then pos:line="104" pos:column="20">
      <block pos:line="105" pos:column="7">{
      <expr_stmt><expr><operator pos:line="106" pos:column="7">*<pos:position pos:line="106" pos:column="8"/></operator><name pos:line="106" pos:column="8">errorptr<pos:position pos:line="106" pos:column="16"/></name> <operator pos:line="106" pos:column="17">=<pos:position pos:line="106" pos:column="18"/></operator> <ternary><condition><expr><operator pos:line="106" pos:column="19">(<pos:position pos:line="106" pos:column="20"/></operator><name pos:line="106" pos:column="20">length<pos:position pos:line="106" pos:column="26"/></name> <operator pos:line="106" pos:column="27">==<pos:position pos:line="106" pos:column="29"/></operator> <operator pos:line="106" pos:column="30">-<pos:position pos:line="106" pos:column="31"/></operator><literal type="number" pos:line="106" pos:column="31">2<pos:position pos:line="106" pos:column="32"/></literal><operator pos:line="106" pos:column="32">)<pos:position pos:line="106" pos:column="33"/></operator></expr>?<pos:position pos:line="106" pos:column="34"/></condition><then pos:line="106" pos:column="34"> <expr><name pos:line="106" pos:column="35">ERR36<pos:position pos:line="106" pos:column="40"/></name></expr> <pos:position pos:line="106" pos:column="41"/></then><else pos:line="106" pos:column="41">: <expr><name pos:line="106" pos:column="43">ERR25<pos:position pos:line="106" pos:column="48"/></name></expr></else></ternary></expr>;<pos:position pos:line="106" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="107" pos:column="7">*<pos:position pos:line="107" pos:column="8"/></operator><name pos:line="107" pos:column="8">ptrptr<pos:position pos:line="107" pos:column="14"/></name> <operator pos:line="107" pos:column="15">=<pos:position pos:line="107" pos:column="16"/></operator> <name pos:line="107" pos:column="17">ptr<pos:position pos:line="107" pos:column="20"/></name></expr>;<pos:position pos:line="107" pos:column="21"/></expr_stmt>
      <return pos:line="108" pos:column="7">return <expr><name pos:line="108" pos:column="14">FALSE<pos:position pos:line="108" pos:column="19"/></name></expr>;<pos:position pos:line="108" pos:column="20"/></return>
      }<pos:position pos:line="109" pos:column="8"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="110" pos:column="5">PUT<pos:position pos:line="110" pos:column="8"/></name><argument_list pos:line="110" pos:column="8">(<argument><expr><name pos:line="110" pos:column="9">reverse_count<pos:position pos:line="110" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="24">0<pos:position pos:line="110" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="27">length<pos:position pos:line="110" pos:column="33"/></name></expr></argument>)<pos:position pos:line="110" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="113" pos:column="3">/* Reached end of expression, either ')' or end of pattern. Go back through
  the alternative branches and reverse the chain of offsets, with the field in
  the BRA item now becoming an offset to the first alternative. If there are
  no alternatives, it points to the end of the group. The length in the
  terminating ket is always the length of the whole bracketed item. If any of
  the ims options were changed inside the group, compile a resetting op-code
  following, except at the very end of the pattern. Return leaving the pointer
  at the terminating char. */</comment>

  <if pos:line="122" pos:column="3">if <condition pos:line="122" pos:column="6">(<expr><operator pos:line="122" pos:column="7">*<pos:position pos:line="122" pos:column="8"/></operator><name pos:line="122" pos:column="8">ptr<pos:position pos:line="122" pos:column="11"/></name> <operator pos:line="122" pos:column="12">!=<pos:position pos:line="122" pos:column="14"/></operator> <literal type="char" pos:line="122" pos:column="15">'|'<pos:position pos:line="122" pos:column="18"/></literal></expr>)<pos:position pos:line="122" pos:column="19"/></condition><then pos:line="122" pos:column="19">
    <block pos:line="123" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="124" pos:column="5">int<pos:position pos:line="124" pos:column="8"/></name></type> <name pos:line="124" pos:column="9">length<pos:position pos:line="124" pos:column="15"/></name> <init pos:line="124" pos:column="16">= <expr><name pos:line="124" pos:column="18">code<pos:position pos:line="124" pos:column="22"/></name> <operator pos:line="124" pos:column="23">-<pos:position pos:line="124" pos:column="24"/></operator> <name pos:line="124" pos:column="25">last_branch<pos:position pos:line="124" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="124" pos:column="37"/></decl_stmt>
    <do pos:line="125" pos:column="5">do
      <block pos:line="126" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="127" pos:column="7">int<pos:position pos:line="127" pos:column="10"/></name></type> <name pos:line="127" pos:column="11">prev_length<pos:position pos:line="127" pos:column="22"/></name> <init pos:line="127" pos:column="23">= <expr><call><name pos:line="127" pos:column="25">GET<pos:position pos:line="127" pos:column="28"/></name><argument_list pos:line="127" pos:column="28">(<argument><expr><name pos:line="127" pos:column="29">last_branch<pos:position pos:line="127" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="42">1<pos:position pos:line="127" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="127" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="127" pos:column="45"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="128" pos:column="7">PUT<pos:position pos:line="128" pos:column="10"/></name><argument_list pos:line="128" pos:column="10">(<argument><expr><name pos:line="128" pos:column="11">last_branch<pos:position pos:line="128" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="128" pos:column="24">1<pos:position pos:line="128" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="128" pos:column="27">length<pos:position pos:line="128" pos:column="33"/></name></expr></argument>)<pos:position pos:line="128" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><name pos:line="129" pos:column="7">length<pos:position pos:line="129" pos:column="13"/></name> <operator pos:line="129" pos:column="14">=<pos:position pos:line="129" pos:column="15"/></operator> <name pos:line="129" pos:column="16">prev_length<pos:position pos:line="129" pos:column="27"/></name></expr>;<pos:position pos:line="129" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name pos:line="130" pos:column="7">last_branch<pos:position pos:line="130" pos:column="18"/></name> <operator pos:line="130" pos:column="19">-=<pos:position pos:line="130" pos:column="21"/></operator> <name pos:line="130" pos:column="22">length<pos:position pos:line="130" pos:column="28"/></name></expr>;<pos:position pos:line="130" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="131" pos:column="8"/></block>
    while <condition pos:line="132" pos:column="11">(<expr><name pos:line="132" pos:column="12">length<pos:position pos:line="132" pos:column="18"/></name> <operator pos:line="132" pos:column="19">&gt;<pos:position pos:line="132" pos:column="23"/></operator> <literal type="number" pos:line="132" pos:column="21">0<pos:position pos:line="132" pos:column="22"/></literal></expr>)<pos:position pos:line="132" pos:column="23"/></condition>;<pos:position pos:line="132" pos:column="24"/></do>

    <comment type="block" pos:line="134" pos:column="5">/* Fill in the ket */</comment>

    <expr_stmt><expr><operator pos:line="136" pos:column="5">*<pos:position pos:line="136" pos:column="6"/></operator><name pos:line="136" pos:column="6">code<pos:position pos:line="136" pos:column="10"/></name> <operator pos:line="136" pos:column="11">=<pos:position pos:line="136" pos:column="12"/></operator> <name pos:line="136" pos:column="13">OP_KET<pos:position pos:line="136" pos:column="19"/></name></expr>;<pos:position pos:line="136" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="137" pos:column="5">PUT<pos:position pos:line="137" pos:column="8"/></name><argument_list pos:line="137" pos:column="8">(<argument><expr><name pos:line="137" pos:column="9">code<pos:position pos:line="137" pos:column="13"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="137" pos:column="15">1<pos:position pos:line="137" pos:column="16"/></literal></expr></argument>, <argument><expr><name pos:line="137" pos:column="18">code<pos:position pos:line="137" pos:column="22"/></name> <operator pos:line="137" pos:column="23">-<pos:position pos:line="137" pos:column="24"/></operator> <name pos:line="137" pos:column="25">start_bracket<pos:position pos:line="137" pos:column="38"/></name></expr></argument>)<pos:position pos:line="137" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="138" pos:column="5">code<pos:position pos:line="138" pos:column="9"/></name> <operator pos:line="138" pos:column="10">+=<pos:position pos:line="138" pos:column="12"/></operator> <literal type="number" pos:line="138" pos:column="13">1<pos:position pos:line="138" pos:column="14"/></literal> <operator pos:line="138" pos:column="15">+<pos:position pos:line="138" pos:column="16"/></operator> <name pos:line="138" pos:column="17">LINK_SIZE<pos:position pos:line="138" pos:column="26"/></name></expr>;<pos:position pos:line="138" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="140" pos:column="5">/* Resetting option if needed */</comment>

    <if pos:line="142" pos:column="5">if <condition pos:line="142" pos:column="8">(<expr><operator pos:line="142" pos:column="9">(<pos:position pos:line="142" pos:column="10"/></operator><name pos:line="142" pos:column="10">options<pos:position pos:line="142" pos:column="17"/></name> <operator pos:line="142" pos:column="18">&amp;<pos:position pos:line="142" pos:column="23"/></operator> <name pos:line="142" pos:column="20">PCRE_IMS<pos:position pos:line="142" pos:column="28"/></name><operator pos:line="142" pos:column="28">)<pos:position pos:line="142" pos:column="29"/></operator> <operator pos:line="142" pos:column="30">!=<pos:position pos:line="142" pos:column="32"/></operator> <name pos:line="142" pos:column="33">oldims<pos:position pos:line="142" pos:column="39"/></name> <operator pos:line="142" pos:column="40">&amp;&amp;<pos:position pos:line="142" pos:column="50"/></operator> <operator pos:line="142" pos:column="43">*<pos:position pos:line="142" pos:column="44"/></operator><name pos:line="142" pos:column="44">ptr<pos:position pos:line="142" pos:column="47"/></name> <operator pos:line="142" pos:column="48">==<pos:position pos:line="142" pos:column="50"/></operator> <literal type="char" pos:line="142" pos:column="51">')'<pos:position pos:line="142" pos:column="54"/></literal></expr>)<pos:position pos:line="142" pos:column="55"/></condition><then pos:line="142" pos:column="55">
      <block pos:line="143" pos:column="7">{
      <expr_stmt><expr><operator pos:line="144" pos:column="7">*<pos:position pos:line="144" pos:column="8"/></operator><name pos:line="144" pos:column="8">code<pos:position pos:line="144" pos:column="12"/></name><operator pos:line="144" pos:column="12">++<pos:position pos:line="144" pos:column="14"/></operator> <operator pos:line="144" pos:column="15">=<pos:position pos:line="144" pos:column="16"/></operator> <name pos:line="144" pos:column="17">OP_OPT<pos:position pos:line="144" pos:column="23"/></name></expr>;<pos:position pos:line="144" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="145" pos:column="7">*<pos:position pos:line="145" pos:column="8"/></operator><name pos:line="145" pos:column="8">code<pos:position pos:line="145" pos:column="12"/></name><operator pos:line="145" pos:column="12">++<pos:position pos:line="145" pos:column="14"/></operator> <operator pos:line="145" pos:column="15">=<pos:position pos:line="145" pos:column="16"/></operator> <name pos:line="145" pos:column="17">oldims<pos:position pos:line="145" pos:column="23"/></name></expr>;<pos:position pos:line="145" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="146" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="148" pos:column="5">/* Set values to pass back */</comment>

    <expr_stmt><expr><operator pos:line="150" pos:column="5">*<pos:position pos:line="150" pos:column="6"/></operator><name pos:line="150" pos:column="6">codeptr<pos:position pos:line="150" pos:column="13"/></name> <operator pos:line="150" pos:column="14">=<pos:position pos:line="150" pos:column="15"/></operator> <name pos:line="150" pos:column="16">code<pos:position pos:line="150" pos:column="20"/></name></expr>;<pos:position pos:line="150" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="151" pos:column="5">*<pos:position pos:line="151" pos:column="6"/></operator><name pos:line="151" pos:column="6">ptrptr<pos:position pos:line="151" pos:column="12"/></name> <operator pos:line="151" pos:column="13">=<pos:position pos:line="151" pos:column="14"/></operator> <name pos:line="151" pos:column="15">ptr<pos:position pos:line="151" pos:column="18"/></name></expr>;<pos:position pos:line="151" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="152" pos:column="5">*<pos:position pos:line="152" pos:column="6"/></operator><name pos:line="152" pos:column="6">firstbyteptr<pos:position pos:line="152" pos:column="18"/></name> <operator pos:line="152" pos:column="19">=<pos:position pos:line="152" pos:column="20"/></operator> <name pos:line="152" pos:column="21">firstbyte<pos:position pos:line="152" pos:column="30"/></name></expr>;<pos:position pos:line="152" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="153" pos:column="5">*<pos:position pos:line="153" pos:column="6"/></operator><name pos:line="153" pos:column="6">reqbyteptr<pos:position pos:line="153" pos:column="16"/></name> <operator pos:line="153" pos:column="17">=<pos:position pos:line="153" pos:column="18"/></operator> <name pos:line="153" pos:column="19">reqbyte<pos:position pos:line="153" pos:column="26"/></name></expr>;<pos:position pos:line="153" pos:column="27"/></expr_stmt>
    <return pos:line="154" pos:column="5">return <expr><name pos:line="154" pos:column="12">TRUE<pos:position pos:line="154" pos:column="16"/></name></expr>;<pos:position pos:line="154" pos:column="17"/></return>
    }<pos:position pos:line="155" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="157" pos:column="3">/* Another branch follows; insert an "or" node. Its length field points back
  to the previous branch while the bracket remains open. At the end the chain
  is reversed. It's done like this so that the start of the bracket has a
  zero offset until it is closed, making it possible to detect recursion. */</comment>

  <expr_stmt><expr><operator pos:line="162" pos:column="3">*<pos:position pos:line="162" pos:column="4"/></operator><name pos:line="162" pos:column="4">code<pos:position pos:line="162" pos:column="8"/></name> <operator pos:line="162" pos:column="9">=<pos:position pos:line="162" pos:column="10"/></operator> <name pos:line="162" pos:column="11">OP_ALT<pos:position pos:line="162" pos:column="17"/></name></expr>;<pos:position pos:line="162" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="163" pos:column="3">PUT<pos:position pos:line="163" pos:column="6"/></name><argument_list pos:line="163" pos:column="6">(<argument><expr><name pos:line="163" pos:column="7">code<pos:position pos:line="163" pos:column="11"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="163" pos:column="13">1<pos:position pos:line="163" pos:column="14"/></literal></expr></argument>, <argument><expr><name pos:line="163" pos:column="16">code<pos:position pos:line="163" pos:column="20"/></name> <operator pos:line="163" pos:column="21">-<pos:position pos:line="163" pos:column="22"/></operator> <name pos:line="163" pos:column="23">last_branch<pos:position pos:line="163" pos:column="34"/></name></expr></argument>)<pos:position pos:line="163" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="164" pos:column="3">bc<pos:position pos:line="164" pos:column="5"/></name><operator pos:line="164" pos:column="5">.<pos:position pos:line="164" pos:column="6"/></operator><name pos:line="164" pos:column="6">current<pos:position pos:line="164" pos:column="13"/></name></name> <operator pos:line="164" pos:column="14">=<pos:position pos:line="164" pos:column="15"/></operator> <name pos:line="164" pos:column="16">last_branch<pos:position pos:line="164" pos:column="27"/></name> <operator pos:line="164" pos:column="28">=<pos:position pos:line="164" pos:column="29"/></operator> <name pos:line="164" pos:column="30">code<pos:position pos:line="164" pos:column="34"/></name></expr>;<pos:position pos:line="164" pos:column="35"/></expr_stmt>
  <expr_stmt><expr><name pos:line="165" pos:column="3">code<pos:position pos:line="165" pos:column="7"/></name> <operator pos:line="165" pos:column="8">+=<pos:position pos:line="165" pos:column="10"/></operator> <literal type="number" pos:line="165" pos:column="11">1<pos:position pos:line="165" pos:column="12"/></literal> <operator pos:line="165" pos:column="13">+<pos:position pos:line="165" pos:column="14"/></operator> <name pos:line="165" pos:column="15">LINK_SIZE<pos:position pos:line="165" pos:column="24"/></name></expr>;<pos:position pos:line="165" pos:column="25"/></expr_stmt>
  <expr_stmt><expr><name pos:line="166" pos:column="3">ptr<pos:position pos:line="166" pos:column="6"/></name><operator pos:line="166" pos:column="6">++<pos:position pos:line="166" pos:column="8"/></operator></expr>;<pos:position pos:line="166" pos:column="9"/></expr_stmt>
  }<pos:position pos:line="167" pos:column="4"/></block></for>
<comment type="block" pos:line="168" pos:column="1">/* Control never reaches here */</comment>
}<pos:position pos:line="169" pos:column="2"/></block></function></unit>
