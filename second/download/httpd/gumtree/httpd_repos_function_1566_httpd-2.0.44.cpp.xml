<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1566_httpd-2.0.44.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">util_ldap_search_node_copy<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">void<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">c<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">util_search_node_t<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">node<pos:position pos:line="3" pos:column="29"/></name> <init pos:line="3" pos:column="30">= <expr><operator pos:line="3" pos:column="32">(<pos:position pos:line="3" pos:column="33"/></operator><name pos:line="3" pos:column="33">util_search_node_t<pos:position pos:line="3" pos:column="51"/></name> <operator pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></operator><operator pos:line="3" pos:column="53">)<pos:position pos:line="3" pos:column="54"/></operator><name pos:line="3" pos:column="54">c<pos:position pos:line="3" pos:column="55"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">util_search_node_t<pos:position pos:line="4" pos:column="23"/></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">newnode<pos:position pos:line="4" pos:column="32"/></name> <init pos:line="4" pos:column="33">= <expr><call><name pos:line="4" pos:column="35">util_ald_alloc<pos:position pos:line="4" pos:column="49"/></name><argument_list pos:line="4" pos:column="49">(<argument><expr><sizeof pos:line="4" pos:column="50">sizeof<argument_list pos:line="4" pos:column="56">(<argument><expr><name pos:line="4" pos:column="57">util_search_node_t<pos:position pos:line="4" pos:column="75"/></name></expr></argument>)<pos:position pos:line="4" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="4" pos:column="77"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="78"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* safety check */</comment>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">newnode<pos:position pos:line="7" pos:column="16"/></name></expr>)<pos:position pos:line="7" pos:column="17"/></condition><then pos:line="7" pos:column="17"> <block pos:line="7" pos:column="18">{

        <comment type="block" pos:line="9" pos:column="9">/* copy vals */</comment>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name><name pos:line="10" pos:column="13">node<pos:position pos:line="10" pos:column="17"/></name><operator pos:line="10" pos:column="17">-&gt;<pos:position pos:line="10" pos:column="22"/></operator><name pos:line="10" pos:column="19">vals<pos:position pos:line="10" pos:column="23"/></name></name></expr>)<pos:position pos:line="10" pos:column="24"/></condition><then pos:line="10" pos:column="24"> <block pos:line="10" pos:column="25">{
            <decl_stmt><decl><type><name pos:line="11" pos:column="13">int<pos:position pos:line="11" pos:column="16"/></name></type> <name pos:line="11" pos:column="17">k<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><literal type="number" pos:line="11" pos:column="21">0<pos:position pos:line="11" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="12" pos:column="13">int<pos:position pos:line="12" pos:column="16"/></name></type> <name pos:line="12" pos:column="17">i<pos:position pos:line="12" pos:column="18"/></name> <init pos:line="12" pos:column="19">= <expr><literal type="number" pos:line="12" pos:column="21">0<pos:position pos:line="12" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
            <while pos:line="13" pos:column="13">while <condition pos:line="13" pos:column="19">(<expr><name><name pos:line="13" pos:column="20">node<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">vals<pos:position pos:line="13" pos:column="30"/></name><index pos:line="13" pos:column="30">[<expr><name pos:line="13" pos:column="31">k<pos:position pos:line="13" pos:column="32"/></name><operator pos:line="13" pos:column="32">++<pos:position pos:line="13" pos:column="34"/></operator></expr>]<pos:position pos:line="13" pos:column="35"/></index></name></expr>)<pos:position pos:line="13" pos:column="36"/></condition><block type="pseudo"><empty_stmt pos:line="13" pos:column="36">;<pos:position pos:line="13" pos:column="37"/></empty_stmt></block></while>
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><operator pos:line="14" pos:column="17">!<pos:position pos:line="14" pos:column="18"/></operator><operator pos:line="14" pos:column="18">(<pos:position pos:line="14" pos:column="19"/></operator><name><name pos:line="14" pos:column="19">newnode<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">-&gt;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="28">vals<pos:position pos:line="14" pos:column="32"/></name></name> <operator pos:line="14" pos:column="33">=<pos:position pos:line="14" pos:column="34"/></operator> <call><name pos:line="14" pos:column="35">util_ald_alloc<pos:position pos:line="14" pos:column="49"/></name><argument_list pos:line="14" pos:column="49">(<argument><expr><sizeof pos:line="14" pos:column="50">sizeof<argument_list pos:line="14" pos:column="56">(<argument><expr><name pos:line="14" pos:column="57">char<pos:position pos:line="14" pos:column="61"/></name> <operator pos:line="14" pos:column="62">*<pos:position pos:line="14" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="14" pos:column="64"/></argument_list></sizeof> <operator pos:line="14" pos:column="65">*<pos:position pos:line="14" pos:column="66"/></operator> <operator pos:line="14" pos:column="67">(<pos:position pos:line="14" pos:column="68"/></operator><name pos:line="14" pos:column="68">k<pos:position pos:line="14" pos:column="69"/></name><operator pos:line="14" pos:column="69">+<pos:position pos:line="14" pos:column="70"/></operator><literal type="number" pos:line="14" pos:column="70">1<pos:position pos:line="14" pos:column="71"/></literal><operator pos:line="14" pos:column="71">)<pos:position pos:line="14" pos:column="72"/></operator></expr></argument>)<pos:position pos:line="14" pos:column="73"/></argument_list></call><operator pos:line="14" pos:column="73">)<pos:position pos:line="14" pos:column="74"/></operator></expr>)<pos:position pos:line="14" pos:column="75"/></condition><then pos:line="14" pos:column="75"> <block pos:line="14" pos:column="76">{
                <expr_stmt><expr><call><name pos:line="15" pos:column="17">util_ldap_search_node_free<pos:position pos:line="15" pos:column="43"/></name><argument_list pos:line="15" pos:column="43">(<argument><expr><name pos:line="15" pos:column="44">newnode<pos:position pos:line="15" pos:column="51"/></name></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="53"/></expr_stmt>
                <return pos:line="16" pos:column="17">return <expr><name pos:line="16" pos:column="24">NULL<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></return>
            }<pos:position pos:line="17" pos:column="14"/></block></then></if>
            <while pos:line="18" pos:column="13">while <condition pos:line="18" pos:column="19">(<expr><name><name pos:line="18" pos:column="20">node<pos:position pos:line="18" pos:column="24"/></name><operator pos:line="18" pos:column="24">-&gt;<pos:position pos:line="18" pos:column="29"/></operator><name pos:line="18" pos:column="26">vals<pos:position pos:line="18" pos:column="30"/></name><index pos:line="18" pos:column="30">[<expr><name pos:line="18" pos:column="31">i<pos:position pos:line="18" pos:column="32"/></name></expr>]<pos:position pos:line="18" pos:column="33"/></index></name></expr>)<pos:position pos:line="18" pos:column="34"/></condition> <block pos:line="18" pos:column="35">{
                <if pos:line="19" pos:column="17">if <condition pos:line="19" pos:column="20">(<expr><operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><operator pos:line="19" pos:column="22">(<pos:position pos:line="19" pos:column="23"/></operator><name><name pos:line="19" pos:column="23">newnode<pos:position pos:line="19" pos:column="30"/></name><operator pos:line="19" pos:column="30">-&gt;<pos:position pos:line="19" pos:column="35"/></operator><name pos:line="19" pos:column="32">vals<pos:position pos:line="19" pos:column="36"/></name><index pos:line="19" pos:column="36">[<expr><name pos:line="19" pos:column="37">i<pos:position pos:line="19" pos:column="38"/></name></expr>]<pos:position pos:line="19" pos:column="39"/></index></name> <operator pos:line="19" pos:column="40">=<pos:position pos:line="19" pos:column="41"/></operator> <call><name pos:line="19" pos:column="42">util_ald_strdup<pos:position pos:line="19" pos:column="57"/></name><argument_list pos:line="19" pos:column="57">(<argument><expr><name><name pos:line="19" pos:column="58">node<pos:position pos:line="19" pos:column="62"/></name><operator pos:line="19" pos:column="62">-&gt;<pos:position pos:line="19" pos:column="67"/></operator><name pos:line="19" pos:column="64">vals<pos:position pos:line="19" pos:column="68"/></name><index pos:line="19" pos:column="68">[<expr><name pos:line="19" pos:column="69">i<pos:position pos:line="19" pos:column="70"/></name></expr>]<pos:position pos:line="19" pos:column="71"/></index></name></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call><operator pos:line="19" pos:column="72">)<pos:position pos:line="19" pos:column="73"/></operator></expr>)<pos:position pos:line="19" pos:column="74"/></condition><then pos:line="19" pos:column="74"> <block pos:line="19" pos:column="75">{
                    <expr_stmt><expr><call><name pos:line="20" pos:column="21">util_ldap_search_node_free<pos:position pos:line="20" pos:column="47"/></name><argument_list pos:line="20" pos:column="47">(<argument><expr><name pos:line="20" pos:column="48">newnode<pos:position pos:line="20" pos:column="55"/></name></expr></argument>)<pos:position pos:line="20" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="57"/></expr_stmt>
                    <return pos:line="21" pos:column="21">return <expr><name pos:line="21" pos:column="28">NULL<pos:position pos:line="21" pos:column="32"/></name></expr>;<pos:position pos:line="21" pos:column="33"/></return>
                }<pos:position pos:line="22" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="23" pos:column="17">i<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">++<pos:position pos:line="23" pos:column="20"/></operator></expr>;<pos:position pos:line="23" pos:column="21"/></expr_stmt>
            }<pos:position pos:line="24" pos:column="14"/></block></while>
        }<pos:position pos:line="25" pos:column="10"/></block></then>
        <else pos:line="26" pos:column="9">else <block pos:line="26" pos:column="14">{
            <expr_stmt><expr><name><name pos:line="27" pos:column="13">newnode<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">vals<pos:position pos:line="27" pos:column="26"/></name></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">NULL<pos:position pos:line="27" pos:column="33"/></name></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></else></if>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">!<pos:position pos:line="29" pos:column="14"/></operator><operator pos:line="29" pos:column="14">(<pos:position pos:line="29" pos:column="15"/></operator><name><name pos:line="29" pos:column="15">newnode<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">-&gt;<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="24">username<pos:position pos:line="29" pos:column="32"/></name></name> <operator pos:line="29" pos:column="33">=<pos:position pos:line="29" pos:column="34"/></operator> <call><name pos:line="29" pos:column="35">util_ald_strdup<pos:position pos:line="29" pos:column="50"/></name><argument_list pos:line="29" pos:column="50">(<argument><expr><name><name pos:line="29" pos:column="51">node<pos:position pos:line="29" pos:column="55"/></name><operator pos:line="29" pos:column="55">-&gt;<pos:position pos:line="29" pos:column="60"/></operator><name pos:line="29" pos:column="57">username<pos:position pos:line="29" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="66"/></argument_list></call><operator pos:line="29" pos:column="66">)<pos:position pos:line="29" pos:column="67"/></operator> <operator pos:line="29" pos:column="68">||<pos:position pos:line="29" pos:column="70"/></operator>
            <operator pos:line="30" pos:column="13">!<pos:position pos:line="30" pos:column="14"/></operator><operator pos:line="30" pos:column="14">(<pos:position pos:line="30" pos:column="15"/></operator><name><name pos:line="30" pos:column="15">newnode<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">-&gt;<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="24">dn<pos:position pos:line="30" pos:column="26"/></name></name> <operator pos:line="30" pos:column="27">=<pos:position pos:line="30" pos:column="28"/></operator> <call><name pos:line="30" pos:column="29">util_ald_strdup<pos:position pos:line="30" pos:column="44"/></name><argument_list pos:line="30" pos:column="44">(<argument><expr><name><name pos:line="30" pos:column="45">node<pos:position pos:line="30" pos:column="49"/></name><operator pos:line="30" pos:column="49">-&gt;<pos:position pos:line="30" pos:column="54"/></operator><name pos:line="30" pos:column="51">dn<pos:position pos:line="30" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="54"/></argument_list></call><operator pos:line="30" pos:column="54">)<pos:position pos:line="30" pos:column="55"/></operator> <operator pos:line="30" pos:column="56">||<pos:position pos:line="30" pos:column="58"/></operator>
            <operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><operator pos:line="31" pos:column="14">(<pos:position pos:line="31" pos:column="15"/></operator><name><name pos:line="31" pos:column="15">newnode<pos:position pos:line="31" pos:column="22"/></name><operator pos:line="31" pos:column="22">-&gt;<pos:position pos:line="31" pos:column="27"/></operator><name pos:line="31" pos:column="24">bindpw<pos:position pos:line="31" pos:column="30"/></name></name> <operator pos:line="31" pos:column="31">=<pos:position pos:line="31" pos:column="32"/></operator> <call><name pos:line="31" pos:column="33">util_ald_strdup<pos:position pos:line="31" pos:column="48"/></name><argument_list pos:line="31" pos:column="48">(<argument><expr><name><name pos:line="31" pos:column="49">node<pos:position pos:line="31" pos:column="53"/></name><operator pos:line="31" pos:column="53">-&gt;<pos:position pos:line="31" pos:column="58"/></operator><name pos:line="31" pos:column="55">bindpw<pos:position pos:line="31" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="62"/></argument_list></call><operator pos:line="31" pos:column="62">)<pos:position pos:line="31" pos:column="63"/></operator></expr> )<pos:position pos:line="31" pos:column="65"/></condition><then pos:line="31" pos:column="65"> <block pos:line="31" pos:column="66">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">util_ldap_search_node_free<pos:position pos:line="32" pos:column="39"/></name><argument_list pos:line="32" pos:column="39">(<argument><expr><name pos:line="32" pos:column="40">newnode<pos:position pos:line="32" pos:column="47"/></name></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>
            <return pos:line="33" pos:column="13">return <expr><name pos:line="33" pos:column="20">NULL<pos:position pos:line="33" pos:column="24"/></name></expr>;<pos:position pos:line="33" pos:column="25"/></return>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">newnode<pos:position pos:line="35" pos:column="16"/></name><operator pos:line="35" pos:column="16">-&gt;<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="18">lastbind<pos:position pos:line="35" pos:column="26"/></name></name> <operator pos:line="35" pos:column="27">=<pos:position pos:line="35" pos:column="28"/></operator> <name><name pos:line="35" pos:column="29">node<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">-&gt;<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="35">lastbind<pos:position pos:line="35" pos:column="43"/></name></name></expr>;<pos:position pos:line="35" pos:column="44"/></expr_stmt>

    }<pos:position pos:line="37" pos:column="6"/></block></then></if>
    <return pos:line="38" pos:column="5">return <expr><operator pos:line="38" pos:column="12">(<pos:position pos:line="38" pos:column="13"/></operator><name pos:line="38" pos:column="13">void<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">*<pos:position pos:line="38" pos:column="19"/></operator><operator pos:line="38" pos:column="19">)<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="20">newnode<pos:position pos:line="38" pos:column="27"/></name></expr>;<pos:position pos:line="38" pos:column="28"/></return>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
