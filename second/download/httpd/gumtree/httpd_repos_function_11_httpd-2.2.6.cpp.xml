<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_11_httpd-2.2.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">accept_mutex_init<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">void<pos:position pos:line="1" pos:column="28"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="29"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">NEED_UNION_SEMUN<pos:position pos:line="3" pos:column="24"/></name></cpp:ifdef>
    <comment type="block" pos:line="4" pos:column="5">/* believe it or not, you need to define this under solaris */</comment>
    <union pos:line="5" pos:column="5">union <name pos:line="5" pos:column="11">semun<pos:position pos:line="5" pos:column="16"/></name> <block pos:line="5" pos:column="17">{<public type="default" pos:line="5" pos:column="18">
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">int<pos:position pos:line="6" pos:column="12"/></name></type> <name pos:line="6" pos:column="13">val<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="7" pos:column="9">struct<pos:position pos:line="7" pos:column="15"/></name> <name pos:line="7" pos:column="16">semid_ds<pos:position pos:line="7" pos:column="24"/></name></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier></type><name pos:line="7" pos:column="26">buf<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">ushort<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">array<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
    <pos:position pos:line="9" pos:column="5"/></public>}<pos:position pos:line="9" pos:column="6"/></block>;<pos:position pos:line="9" pos:column="7"/></union>
<cpp:endif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">endif<pos:position pos:line="10" pos:column="7"/></cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">union<pos:position pos:line="12" pos:column="10"/></name> <name pos:line="12" pos:column="11">semun<pos:position pos:line="12" pos:column="16"/></name></name></type> <name pos:line="12" pos:column="17">ick<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">sem_id<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <call><name pos:line="14" pos:column="14">semget<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><literal type="number" pos:line="14" pos:column="21">999<pos:position pos:line="14" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="14" pos:column="26">1<pos:position pos:line="14" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="14" pos:column="29">IPC_CREAT<pos:position pos:line="14" pos:column="38"/></name> <operator pos:line="14" pos:column="39">|<pos:position pos:line="14" pos:column="40"/></operator> <literal type="number" pos:line="14" pos:column="41">0666<pos:position pos:line="14" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">sem_id<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">&lt;<pos:position pos:line="15" pos:column="20"/></operator> <literal type="number" pos:line="15" pos:column="18">0<pos:position pos:line="15" pos:column="19"/></literal></expr>)<pos:position pos:line="15" pos:column="20"/></condition><then pos:line="15" pos:column="20"> <block pos:line="15" pos:column="21">{
       <expr_stmt><expr><call><name pos:line="16" pos:column="8">perror<pos:position pos:line="16" pos:column="14"/></name> <argument_list pos:line="16" pos:column="15">(<argument><expr><literal type="string" pos:line="16" pos:column="16">"semget"<pos:position pos:line="16" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt>
       <expr_stmt><expr><call><name pos:line="17" pos:column="8">exit<pos:position pos:line="17" pos:column="12"/></name> <argument_list pos:line="17" pos:column="13">(<argument><expr><literal type="number" pos:line="17" pos:column="14">1<pos:position pos:line="17" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">ick<pos:position pos:line="19" pos:column="8"/></name><operator pos:line="19" pos:column="8">.<pos:position pos:line="19" pos:column="9"/></operator><name pos:line="19" pos:column="9">val<pos:position pos:line="19" pos:column="12"/></name></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <literal type="number" pos:line="19" pos:column="15">1<pos:position pos:line="19" pos:column="16"/></literal></expr>;<pos:position pos:line="19" pos:column="17"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">semctl<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">sem_id<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="24">0<pos:position pos:line="20" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="27">SETVAL<pos:position pos:line="20" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="35">ick<pos:position pos:line="20" pos:column="38"/></name></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call> <operator pos:line="20" pos:column="40">&lt;<pos:position pos:line="20" pos:column="44"/></operator> <literal type="number" pos:line="20" pos:column="42">0<pos:position pos:line="20" pos:column="43"/></literal></expr>)<pos:position pos:line="20" pos:column="44"/></condition><then pos:line="20" pos:column="44"> <block pos:line="20" pos:column="45">{
       <expr_stmt><expr><call><name pos:line="21" pos:column="8">perror<pos:position pos:line="21" pos:column="14"/></name> <argument_list pos:line="21" pos:column="15">(<argument><expr><literal type="string" pos:line="21" pos:column="16">"semctl"<pos:position pos:line="21" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">exit<pos:position pos:line="22" pos:column="13"/></name><argument_list pos:line="22" pos:column="13">(<argument><expr><literal type="number" pos:line="22" pos:column="14">1<pos:position pos:line="22" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
<cpp:ifdef pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">ifdef<pos:position pos:line="24" pos:column="7"/></cpp:directive> <name pos:line="24" pos:column="8">NO_SEM_UNDO<pos:position pos:line="24" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="25" pos:column="5">sigfillset<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><operator pos:line="25" pos:column="16">&amp;<pos:position pos:line="25" pos:column="21"/></operator><name pos:line="25" pos:column="17">accept_block_mask<pos:position pos:line="25" pos:column="34"/></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">sigdelset<pos:position pos:line="26" pos:column="14"/></name><argument_list pos:line="26" pos:column="14">(<argument><expr><operator pos:line="26" pos:column="15">&amp;<pos:position pos:line="26" pos:column="20"/></operator><name pos:line="26" pos:column="16">accept_block_mask<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">SIGHUP<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">sigdelset<pos:position pos:line="27" pos:column="14"/></name><argument_list pos:line="27" pos:column="14">(<argument><expr><operator pos:line="27" pos:column="15">&amp;<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="16">accept_block_mask<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">SIGTERM<pos:position pos:line="27" pos:column="42"/></name></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">sigdelset<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><operator pos:line="28" pos:column="15">&amp;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="16">accept_block_mask<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="35">SIGUSR1<pos:position pos:line="28" pos:column="42"/></name></expr></argument>)<pos:position pos:line="28" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
