<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_44_httpd-2.4.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier><specifier pos:line="1" pos:column="32">const<pos:position pos:line="1" pos:column="37"/></specifier></type> <name><name pos:line="1" pos:column="38">argv<pos:position pos:line="1" pos:column="42"/></name><index pos:line="1" pos:column="42">[]<pos:position pos:line="1" pos:column="44"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_pool_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">pool<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name pos:line="4" pos:column="23">APR_SUCCESS<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_getopt_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">opt<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">opt_arg<pos:position pos:line="6" pos:column="24"/></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">ch<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_file_t<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">infile<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_dbm_t<pos:position pos:line="9" pos:column="14"/></name> <modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier></type><name pos:line="9" pos:column="16">outdbm<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">apr_app_initialize<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><operator pos:line="11" pos:column="24">&amp;<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="25">argc<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="31">&amp;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="32">argv<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="38">NULL<pos:position pos:line="11" pos:column="42"/></name></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">atexit<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name pos:line="12" pos:column="12">apr_terminate<pos:position pos:line="12" pos:column="25"/></name></expr></argument>)<pos:position pos:line="12" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">verbose<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <literal type="number" pos:line="14" pos:column="15">0<pos:position pos:line="14" pos:column="16"/></literal></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">format<pos:position pos:line="15" pos:column="11"/></name> <operator pos:line="15" pos:column="12">=<pos:position pos:line="15" pos:column="13"/></operator> <name pos:line="15" pos:column="14">NULL<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">input<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">=<pos:position pos:line="16" pos:column="12"/></operator> <name pos:line="16" pos:column="13">NULL<pos:position pos:line="16" pos:column="17"/></name></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">output<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">=<pos:position pos:line="17" pos:column="13"/></operator> <name pos:line="17" pos:column="14">NULL<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">apr_pool_create<pos:position pos:line="19" pos:column="20"/></name><argument_list pos:line="19" pos:column="20">(<argument><expr><operator pos:line="19" pos:column="21">&amp;<pos:position pos:line="19" pos:column="26"/></operator><name pos:line="19" pos:column="22">pool<pos:position pos:line="19" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="28">NULL<pos:position pos:line="19" pos:column="32"/></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="34"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">argc<pos:position pos:line="21" pos:column="13"/></name></expr>)<pos:position pos:line="21" pos:column="14"/></condition><then pos:line="21" pos:column="14"> <block pos:line="21" pos:column="15">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">shortname<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">apr_filepath_name_get<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name><name pos:line="22" pos:column="43">argv<pos:position pos:line="22" pos:column="47"/></name><index pos:line="22" pos:column="47">[<expr><literal type="number" pos:line="22" pos:column="48">0<pos:position pos:line="22" pos:column="49"/></literal></expr>]<pos:position pos:line="22" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then>
    <else pos:line="24" pos:column="5">else <block pos:line="24" pos:column="10">{
        <expr_stmt><expr><name pos:line="25" pos:column="9">shortname<pos:position pos:line="25" pos:column="18"/></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <literal type="string" pos:line="25" pos:column="21">"httxt2dbm"<pos:position pos:line="25" pos:column="32"/></literal></expr>;<pos:position pos:line="25" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">apr_file_open_stderr<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><operator pos:line="28" pos:column="26">&amp;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="27">errfile<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="36">pool<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="29" pos:column="5">rv<pos:position pos:line="29" pos:column="7"/></name> <operator pos:line="29" pos:column="8">=<pos:position pos:line="29" pos:column="9"/></operator> <call><name pos:line="29" pos:column="10">apr_getopt_init<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><operator pos:line="29" pos:column="26">&amp;<pos:position pos:line="29" pos:column="31"/></operator><name pos:line="29" pos:column="27">opt<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="32">pool<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="38">argc<pos:position pos:line="29" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="44">argv<pos:position pos:line="29" pos:column="48"/></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>

    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">rv<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">!=<pos:position pos:line="31" pos:column="14"/></operator> <name pos:line="31" pos:column="15">APR_SUCCESS<pos:position pos:line="31" pos:column="26"/></name></expr>)<pos:position pos:line="31" pos:column="27"/></condition><then pos:line="31" pos:column="27"> <block pos:line="31" pos:column="28">{
        <macro><name pos:line="32" pos:column="9">apr_file_printf<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument pos:line="32" pos:column="25">errfile<pos:position pos:line="32" pos:column="32"/></argument>, <argument><literal type="string" pos:line="32" pos:column="34">"Error: apr_getopt_init failed."<pos:position pos:line="32" pos:column="66"/></literal>NL NL<pos:position pos:line="32" pos:column="71"/></argument>)<pos:position pos:line="32" pos:column="72"/></argument_list></macro><empty_stmt pos:line="32" pos:column="72">;<pos:position pos:line="32" pos:column="73"/></empty_stmt>
        <return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">1<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">argc<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">&lt;=<pos:position pos:line="36" pos:column="19"/></operator> <literal type="number" pos:line="36" pos:column="17">1<pos:position pos:line="36" pos:column="18"/></literal></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19"> <block pos:line="36" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">usage<pos:position pos:line="37" pos:column="14"/></name><argument_list pos:line="37" pos:column="14">()<pos:position pos:line="37" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>
        <return pos:line="38" pos:column="9">return <expr><literal type="number" pos:line="38" pos:column="16">1<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <while pos:line="41" pos:column="5">while <condition pos:line="41" pos:column="11">(<expr><operator pos:line="41" pos:column="12">(<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">rv<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <call><name pos:line="41" pos:column="18">apr_getopt<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">opt<pos:position pos:line="41" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="34">"vf::i::o::"<pos:position pos:line="41" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="41" pos:column="48">&amp;<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="49">ch<pos:position pos:line="41" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="53">&amp;<pos:position pos:line="41" pos:column="58"/></operator><name pos:line="41" pos:column="54">opt_arg<pos:position pos:line="41" pos:column="61"/></name></expr></argument>)<pos:position pos:line="41" pos:column="62"/></argument_list></call><operator pos:line="41" pos:column="62">)<pos:position pos:line="41" pos:column="63"/></operator> <operator pos:line="41" pos:column="64">==<pos:position pos:line="41" pos:column="66"/></operator> <name pos:line="41" pos:column="67">APR_SUCCESS<pos:position pos:line="41" pos:column="78"/></name></expr>)<pos:position pos:line="41" pos:column="79"/></condition> <block pos:line="41" pos:column="80">{
        <switch pos:line="42" pos:column="9">switch <condition pos:line="42" pos:column="16">(<expr><name pos:line="42" pos:column="17">ch<pos:position pos:line="42" pos:column="19"/></name></expr>)<pos:position pos:line="42" pos:column="20"/></condition> <block pos:line="42" pos:column="21">{
        <case pos:line="43" pos:column="9">case <expr><literal type="char" pos:line="43" pos:column="14">'v'<pos:position pos:line="43" pos:column="17"/></literal></expr>:<pos:position pos:line="43" pos:column="18"/></case>
            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">verbose<pos:position pos:line="44" pos:column="24"/></name></expr>)<pos:position pos:line="44" pos:column="25"/></condition><then pos:line="44" pos:column="25"> <block pos:line="44" pos:column="26">{
                <macro><name pos:line="45" pos:column="17">apr_file_printf<pos:position pos:line="45" pos:column="32"/></name><argument_list pos:line="45" pos:column="32">(<argument pos:line="45" pos:column="33">errfile<pos:position pos:line="45" pos:column="40"/></argument>, <argument><literal type="string" pos:line="45" pos:column="42">"Error: -v can only be passed once"<pos:position pos:line="45" pos:column="77"/></literal> NL NL<pos:position pos:line="45" pos:column="83"/></argument>)<pos:position pos:line="45" pos:column="84"/></argument_list></macro><empty_stmt pos:line="45" pos:column="84">;<pos:position pos:line="45" pos:column="85"/></empty_stmt>
                <expr_stmt><expr><call><name pos:line="46" pos:column="17">usage<pos:position pos:line="46" pos:column="22"/></name><argument_list pos:line="46" pos:column="22">()<pos:position pos:line="46" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>
                <return pos:line="47" pos:column="17">return <expr><literal type="number" pos:line="47" pos:column="24">1<pos:position pos:line="47" pos:column="25"/></literal></expr>;<pos:position pos:line="47" pos:column="26"/></return>
            }<pos:position pos:line="48" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="49" pos:column="13">verbose<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">=<pos:position pos:line="49" pos:column="22"/></operator> <literal type="number" pos:line="49" pos:column="23">1<pos:position pos:line="49" pos:column="24"/></literal></expr>;<pos:position pos:line="49" pos:column="25"/></expr_stmt>
            <break pos:line="50" pos:column="13">break;<pos:position pos:line="50" pos:column="19"/></break>
        <case pos:line="51" pos:column="9">case <expr><literal type="char" pos:line="51" pos:column="14">'f'<pos:position pos:line="51" pos:column="17"/></literal></expr>:<pos:position pos:line="51" pos:column="18"/></case>
            <if pos:line="52" pos:column="13">if <condition pos:line="52" pos:column="16">(<expr><name pos:line="52" pos:column="17">format<pos:position pos:line="52" pos:column="23"/></name></expr>)<pos:position pos:line="52" pos:column="24"/></condition><then pos:line="52" pos:column="24"> <block pos:line="52" pos:column="25">{
                <macro><name pos:line="53" pos:column="17">apr_file_printf<pos:position pos:line="53" pos:column="32"/></name><argument_list pos:line="53" pos:column="32">(<argument pos:line="53" pos:column="33">errfile<pos:position pos:line="53" pos:column="40"/></argument>, <argument><literal type="string" pos:line="53" pos:column="42">"Error: -f can only be passed once"<pos:position pos:line="53" pos:column="77"/></literal> NL NL<pos:position pos:line="53" pos:column="83"/></argument>)<pos:position pos:line="53" pos:column="84"/></argument_list></macro><empty_stmt pos:line="53" pos:column="84">;<pos:position pos:line="53" pos:column="85"/></empty_stmt>
                <expr_stmt><expr><call><name pos:line="54" pos:column="17">usage<pos:position pos:line="54" pos:column="22"/></name><argument_list pos:line="54" pos:column="22">()<pos:position pos:line="54" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="25"/></expr_stmt>
                <return pos:line="55" pos:column="17">return <expr><literal type="number" pos:line="55" pos:column="24">1<pos:position pos:line="55" pos:column="25"/></literal></expr>;<pos:position pos:line="55" pos:column="26"/></return>
            }<pos:position pos:line="56" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="57" pos:column="13">format<pos:position pos:line="57" pos:column="19"/></name> <operator pos:line="57" pos:column="20">=<pos:position pos:line="57" pos:column="21"/></operator> <call><name pos:line="57" pos:column="22">apr_pstrdup<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><name pos:line="57" pos:column="34">pool<pos:position pos:line="57" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="40">opt_arg<pos:position pos:line="57" pos:column="47"/></name></expr></argument>)<pos:position pos:line="57" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="49"/></expr_stmt>
            <break pos:line="58" pos:column="13">break;<pos:position pos:line="58" pos:column="19"/></break>
        <case pos:line="59" pos:column="9">case <expr><literal type="char" pos:line="59" pos:column="14">'i'<pos:position pos:line="59" pos:column="17"/></literal></expr>:<pos:position pos:line="59" pos:column="18"/></case>
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><name pos:line="60" pos:column="17">input<pos:position pos:line="60" pos:column="22"/></name></expr>)<pos:position pos:line="60" pos:column="23"/></condition><then pos:line="60" pos:column="23"> <block pos:line="60" pos:column="24">{
                <macro><name pos:line="61" pos:column="17">apr_file_printf<pos:position pos:line="61" pos:column="32"/></name><argument_list pos:line="61" pos:column="32">(<argument pos:line="61" pos:column="33">errfile<pos:position pos:line="61" pos:column="40"/></argument>, <argument><literal type="string" pos:line="61" pos:column="42">"Error: -i can only be passed once"<pos:position pos:line="61" pos:column="77"/></literal> NL NL<pos:position pos:line="61" pos:column="83"/></argument>)<pos:position pos:line="61" pos:column="84"/></argument_list></macro><empty_stmt pos:line="61" pos:column="84">;<pos:position pos:line="61" pos:column="85"/></empty_stmt>
                <expr_stmt><expr><call><name pos:line="62" pos:column="17">usage<pos:position pos:line="62" pos:column="22"/></name><argument_list pos:line="62" pos:column="22">()<pos:position pos:line="62" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="25"/></expr_stmt>
                <return pos:line="63" pos:column="17">return <expr><literal type="number" pos:line="63" pos:column="24">1<pos:position pos:line="63" pos:column="25"/></literal></expr>;<pos:position pos:line="63" pos:column="26"/></return>
            }<pos:position pos:line="64" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="65" pos:column="13">input<pos:position pos:line="65" pos:column="18"/></name> <operator pos:line="65" pos:column="19">=<pos:position pos:line="65" pos:column="20"/></operator> <call><name pos:line="65" pos:column="21">apr_pstrdup<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name pos:line="65" pos:column="33">pool<pos:position pos:line="65" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="39">opt_arg<pos:position pos:line="65" pos:column="46"/></name></expr></argument>)<pos:position pos:line="65" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="48"/></expr_stmt>
            <break pos:line="66" pos:column="13">break;<pos:position pos:line="66" pos:column="19"/></break>
        <case pos:line="67" pos:column="9">case <expr><literal type="char" pos:line="67" pos:column="14">'o'<pos:position pos:line="67" pos:column="17"/></literal></expr>:<pos:position pos:line="67" pos:column="18"/></case>
            <if pos:line="68" pos:column="13">if <condition pos:line="68" pos:column="16">(<expr><name pos:line="68" pos:column="17">output<pos:position pos:line="68" pos:column="23"/></name></expr>)<pos:position pos:line="68" pos:column="24"/></condition><then pos:line="68" pos:column="24"> <block pos:line="68" pos:column="25">{
                <macro><name pos:line="69" pos:column="17">apr_file_printf<pos:position pos:line="69" pos:column="32"/></name><argument_list pos:line="69" pos:column="32">(<argument pos:line="69" pos:column="33">errfile<pos:position pos:line="69" pos:column="40"/></argument>, <argument><literal type="string" pos:line="69" pos:column="42">"Error: -o can only be passed once"<pos:position pos:line="69" pos:column="77"/></literal> NL NL<pos:position pos:line="69" pos:column="83"/></argument>)<pos:position pos:line="69" pos:column="84"/></argument_list></macro><empty_stmt pos:line="69" pos:column="84">;<pos:position pos:line="69" pos:column="85"/></empty_stmt>
                <expr_stmt><expr><call><name pos:line="70" pos:column="17">usage<pos:position pos:line="70" pos:column="22"/></name><argument_list pos:line="70" pos:column="22">()<pos:position pos:line="70" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="25"/></expr_stmt>
                <return pos:line="71" pos:column="17">return <expr><literal type="number" pos:line="71" pos:column="24">1<pos:position pos:line="71" pos:column="25"/></literal></expr>;<pos:position pos:line="71" pos:column="26"/></return>
            }<pos:position pos:line="72" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="73" pos:column="13">output<pos:position pos:line="73" pos:column="19"/></name> <operator pos:line="73" pos:column="20">=<pos:position pos:line="73" pos:column="21"/></operator> <call><name pos:line="73" pos:column="22">apr_pstrdup<pos:position pos:line="73" pos:column="33"/></name><argument_list pos:line="73" pos:column="33">(<argument><expr><name pos:line="73" pos:column="34">pool<pos:position pos:line="73" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="40">opt_arg<pos:position pos:line="73" pos:column="47"/></name></expr></argument>)<pos:position pos:line="73" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="49"/></expr_stmt>
            <break pos:line="74" pos:column="13">break;<pos:position pos:line="74" pos:column="19"/></break>
        }<pos:position pos:line="75" pos:column="10"/></block></switch>
    }<pos:position pos:line="76" pos:column="6"/></block></while>

    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><name pos:line="78" pos:column="9">rv<pos:position pos:line="78" pos:column="11"/></name> <operator pos:line="78" pos:column="12">!=<pos:position pos:line="78" pos:column="14"/></operator> <name pos:line="78" pos:column="15">APR_EOF<pos:position pos:line="78" pos:column="22"/></name></expr>)<pos:position pos:line="78" pos:column="23"/></condition><then pos:line="78" pos:column="23"> <block pos:line="78" pos:column="24">{
        <macro><name pos:line="79" pos:column="9">apr_file_printf<pos:position pos:line="79" pos:column="24"/></name><argument_list pos:line="79" pos:column="24">(<argument pos:line="79" pos:column="25">errfile<pos:position pos:line="79" pos:column="32"/></argument>, <argument><literal type="string" pos:line="79" pos:column="34">"Error: Parsing Arguments Failed"<pos:position pos:line="79" pos:column="67"/></literal> NL NL<pos:position pos:line="79" pos:column="73"/></argument>)<pos:position pos:line="79" pos:column="74"/></argument_list></macro><empty_stmt pos:line="79" pos:column="74">;<pos:position pos:line="79" pos:column="75"/></empty_stmt>
        <expr_stmt><expr><call><name pos:line="80" pos:column="9">usage<pos:position pos:line="80" pos:column="14"/></name><argument_list pos:line="80" pos:column="14">()<pos:position pos:line="80" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="17"/></expr_stmt>
        <return pos:line="81" pos:column="9">return <expr><literal type="number" pos:line="81" pos:column="16">1<pos:position pos:line="81" pos:column="17"/></literal></expr>;<pos:position pos:line="81" pos:column="18"/></return>
    }<pos:position pos:line="82" pos:column="6"/></block></then></if>

    <if pos:line="84" pos:column="5">if <condition pos:line="84" pos:column="8">(<expr><operator pos:line="84" pos:column="9">!<pos:position pos:line="84" pos:column="10"/></operator><name pos:line="84" pos:column="10">input<pos:position pos:line="84" pos:column="15"/></name></expr>)<pos:position pos:line="84" pos:column="16"/></condition><then pos:line="84" pos:column="16"> <block pos:line="84" pos:column="17">{
        <macro><name pos:line="85" pos:column="9">apr_file_printf<pos:position pos:line="85" pos:column="24"/></name><argument_list pos:line="85" pos:column="24">(<argument pos:line="85" pos:column="25">errfile<pos:position pos:line="85" pos:column="32"/></argument>, <argument><literal type="string" pos:line="85" pos:column="34">"Error: No input file specified."<pos:position pos:line="85" pos:column="67"/></literal> NL NL<pos:position pos:line="85" pos:column="73"/></argument>)<pos:position pos:line="85" pos:column="74"/></argument_list></macro><empty_stmt pos:line="85" pos:column="74">;<pos:position pos:line="85" pos:column="75"/></empty_stmt>
        <expr_stmt><expr><call><name pos:line="86" pos:column="9">usage<pos:position pos:line="86" pos:column="14"/></name><argument_list pos:line="86" pos:column="14">()<pos:position pos:line="86" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="17"/></expr_stmt>
        <return pos:line="87" pos:column="9">return <expr><literal type="number" pos:line="87" pos:column="16">1<pos:position pos:line="87" pos:column="17"/></literal></expr>;<pos:position pos:line="87" pos:column="18"/></return>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>

    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><operator pos:line="90" pos:column="9">!<pos:position pos:line="90" pos:column="10"/></operator><name pos:line="90" pos:column="10">output<pos:position pos:line="90" pos:column="16"/></name></expr>)<pos:position pos:line="90" pos:column="17"/></condition><then pos:line="90" pos:column="17"> <block pos:line="90" pos:column="18">{
        <macro><name pos:line="91" pos:column="9">apr_file_printf<pos:position pos:line="91" pos:column="24"/></name><argument_list pos:line="91" pos:column="24">(<argument pos:line="91" pos:column="25">errfile<pos:position pos:line="91" pos:column="32"/></argument>, <argument><literal type="string" pos:line="91" pos:column="34">"Error: No output DBM specified."<pos:position pos:line="91" pos:column="67"/></literal> NL NL<pos:position pos:line="91" pos:column="73"/></argument>)<pos:position pos:line="91" pos:column="74"/></argument_list></macro><empty_stmt pos:line="91" pos:column="74">;<pos:position pos:line="91" pos:column="75"/></empty_stmt>
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">usage<pos:position pos:line="92" pos:column="14"/></name><argument_list pos:line="92" pos:column="14">()<pos:position pos:line="92" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="17"/></expr_stmt>
        <return pos:line="93" pos:column="9">return <expr><literal type="number" pos:line="93" pos:column="16">1<pos:position pos:line="93" pos:column="17"/></literal></expr>;<pos:position pos:line="93" pos:column="18"/></return>
    }<pos:position pos:line="94" pos:column="6"/></block></then></if>

    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><operator pos:line="96" pos:column="9">!<pos:position pos:line="96" pos:column="10"/></operator><name pos:line="96" pos:column="10">format<pos:position pos:line="96" pos:column="16"/></name></expr>)<pos:position pos:line="96" pos:column="17"/></condition><then pos:line="96" pos:column="17"> <block pos:line="96" pos:column="18">{
        <expr_stmt><expr><name pos:line="97" pos:column="9">format<pos:position pos:line="97" pos:column="15"/></name> <operator pos:line="97" pos:column="16">=<pos:position pos:line="97" pos:column="17"/></operator> <literal type="string" pos:line="97" pos:column="18">"default"<pos:position pos:line="97" pos:column="27"/></literal></expr>;<pos:position pos:line="97" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="98" pos:column="6"/></block></then></if>

    <if pos:line="100" pos:column="5">if <condition pos:line="100" pos:column="8">(<expr><name pos:line="100" pos:column="9">verbose<pos:position pos:line="100" pos:column="16"/></name></expr>)<pos:position pos:line="100" pos:column="17"/></condition><then pos:line="100" pos:column="17"> <block pos:line="100" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">apr_file_printf<pos:position pos:line="101" pos:column="24"/></name><argument_list pos:line="101" pos:column="24">(<argument><expr><name pos:line="101" pos:column="25">errfile<pos:position pos:line="101" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="34">"DBM Format: %s"<pos:position pos:line="101" pos:column="50"/></literal><name pos:line="101" pos:column="50">NL<pos:position pos:line="101" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="54">format<pos:position pos:line="101" pos:column="60"/></name></expr></argument>)<pos:position pos:line="101" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="62"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>

    <if pos:line="104" pos:column="5">if <condition pos:line="104" pos:column="8">(<expr><operator pos:line="104" pos:column="9">!<pos:position pos:line="104" pos:column="10"/></operator><call><name pos:line="104" pos:column="10">strcmp<pos:position pos:line="104" pos:column="16"/></name><argument_list pos:line="104" pos:column="16">(<argument><expr><name pos:line="104" pos:column="17">input<pos:position pos:line="104" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="24">"-"<pos:position pos:line="104" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="29"/></condition><then pos:line="104" pos:column="29"> <block pos:line="104" pos:column="30">{
        <expr_stmt><expr><name pos:line="105" pos:column="9">rv<pos:position pos:line="105" pos:column="11"/></name> <operator pos:line="105" pos:column="12">=<pos:position pos:line="105" pos:column="13"/></operator> <call><name pos:line="105" pos:column="14">apr_file_open_stdin<pos:position pos:line="105" pos:column="33"/></name><argument_list pos:line="105" pos:column="33">(<argument><expr><operator pos:line="105" pos:column="34">&amp;<pos:position pos:line="105" pos:column="39"/></operator><name pos:line="105" pos:column="35">infile<pos:position pos:line="105" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="43">pool<pos:position pos:line="105" pos:column="47"/></name></expr></argument>)<pos:position pos:line="105" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="106" pos:column="6"/></block></then>
    <else pos:line="107" pos:column="5">else <block pos:line="107" pos:column="10">{
        <expr_stmt><expr><name pos:line="108" pos:column="9">rv<pos:position pos:line="108" pos:column="11"/></name> <operator pos:line="108" pos:column="12">=<pos:position pos:line="108" pos:column="13"/></operator> <call><name pos:line="108" pos:column="14">apr_file_open<pos:position pos:line="108" pos:column="27"/></name><argument_list pos:line="108" pos:column="27">(<argument><expr><operator pos:line="108" pos:column="28">&amp;<pos:position pos:line="108" pos:column="33"/></operator><name pos:line="108" pos:column="29">infile<pos:position pos:line="108" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="37">input<pos:position pos:line="108" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="44">APR_READ<pos:position pos:line="108" pos:column="52"/></name><operator pos:line="108" pos:column="52">|<pos:position pos:line="108" pos:column="53"/></operator><name pos:line="108" pos:column="53">APR_BUFFERED<pos:position pos:line="108" pos:column="65"/></name></expr></argument>,
                           <argument><expr><name pos:line="109" pos:column="28">APR_OS_DEFAULT<pos:position pos:line="109" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="44">pool<pos:position pos:line="109" pos:column="48"/></name></expr></argument>)<pos:position pos:line="109" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="110" pos:column="6"/></block></else></if>

    <if pos:line="112" pos:column="5">if <condition pos:line="112" pos:column="8">(<expr><name pos:line="112" pos:column="9">rv<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">!=<pos:position pos:line="112" pos:column="14"/></operator> <name pos:line="112" pos:column="15">APR_SUCCESS<pos:position pos:line="112" pos:column="26"/></name></expr>)<pos:position pos:line="112" pos:column="27"/></condition><then pos:line="112" pos:column="27"> <block pos:line="112" pos:column="28">{
        <macro><name pos:line="113" pos:column="9">apr_file_printf<pos:position pos:line="113" pos:column="24"/></name><argument_list pos:line="113" pos:column="24">(<argument pos:line="113" pos:column="25">errfile<pos:position pos:line="113" pos:column="32"/></argument>,
                        <argument><literal type="string" pos:line="114" pos:column="25">"Error: Cannot open input file '%s': (%d) %s"<pos:position pos:line="114" pos:column="70"/></literal> NL NL<pos:position pos:line="114" pos:column="76"/></argument>,
                         <argument pos:line="115" pos:column="26">input<pos:position pos:line="115" pos:column="31"/></argument>, <argument pos:line="115" pos:column="33">rv<pos:position pos:line="115" pos:column="35"/></argument>, <argument pos:line="115" pos:column="37">apr_strerror(rv, errbuf, sizeof(errbuf))<pos:position pos:line="115" pos:column="77"/></argument>)<pos:position pos:line="115" pos:column="78"/></argument_list></macro><empty_stmt pos:line="115" pos:column="78">;<pos:position pos:line="115" pos:column="79"/></empty_stmt>
        <return pos:line="116" pos:column="9">return <expr><literal type="number" pos:line="116" pos:column="16">1<pos:position pos:line="116" pos:column="17"/></literal></expr>;<pos:position pos:line="116" pos:column="18"/></return>
    }<pos:position pos:line="117" pos:column="6"/></block></then></if>

    <if pos:line="119" pos:column="5">if <condition pos:line="119" pos:column="8">(<expr><name pos:line="119" pos:column="9">verbose<pos:position pos:line="119" pos:column="16"/></name></expr>)<pos:position pos:line="119" pos:column="17"/></condition><then pos:line="119" pos:column="17"> <block pos:line="119" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="120" pos:column="9">apr_file_printf<pos:position pos:line="120" pos:column="24"/></name><argument_list pos:line="120" pos:column="24">(<argument><expr><name pos:line="120" pos:column="25">errfile<pos:position pos:line="120" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="120" pos:column="34">"Input File: %s"<pos:position pos:line="120" pos:column="50"/></literal><name pos:line="120" pos:column="50">NL<pos:position pos:line="120" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="54">input<pos:position pos:line="120" pos:column="59"/></name></expr></argument>)<pos:position pos:line="120" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="121" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="123" pos:column="5">rv<pos:position pos:line="123" pos:column="7"/></name> <operator pos:line="123" pos:column="8">=<pos:position pos:line="123" pos:column="9"/></operator> <call><name pos:line="123" pos:column="10">apr_dbm_open_ex<pos:position pos:line="123" pos:column="25"/></name><argument_list pos:line="123" pos:column="25">(<argument><expr><operator pos:line="123" pos:column="26">&amp;<pos:position pos:line="123" pos:column="31"/></operator><name pos:line="123" pos:column="27">outdbm<pos:position pos:line="123" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="35">format<pos:position pos:line="123" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="43">output<pos:position pos:line="123" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="51">APR_DBM_RWCREATE<pos:position pos:line="123" pos:column="67"/></name></expr></argument>,
                    <argument><expr><name pos:line="124" pos:column="21">APR_OS_DEFAULT<pos:position pos:line="124" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="37">pool<pos:position pos:line="124" pos:column="41"/></name></expr></argument>)<pos:position pos:line="124" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="43"/></expr_stmt>

    <if pos:line="126" pos:column="5">if <condition pos:line="126" pos:column="8">(<expr><call><name pos:line="126" pos:column="9">APR_STATUS_IS_ENOTIMPL<pos:position pos:line="126" pos:column="31"/></name><argument_list pos:line="126" pos:column="31">(<argument><expr><name pos:line="126" pos:column="32">rv<pos:position pos:line="126" pos:column="34"/></name></expr></argument>)<pos:position pos:line="126" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="36"/></condition><then pos:line="126" pos:column="36"> <block pos:line="126" pos:column="37">{
        <macro><name pos:line="127" pos:column="9">apr_file_printf<pos:position pos:line="127" pos:column="24"/></name><argument_list pos:line="127" pos:column="24">(<argument pos:line="127" pos:column="25">errfile<pos:position pos:line="127" pos:column="32"/></argument>,
                        <argument><literal type="string" pos:line="128" pos:column="25">"Error: The requested DBM Format '%s' is not available."<pos:position pos:line="128" pos:column="81"/></literal> NL NL<pos:position pos:line="128" pos:column="87"/></argument>,
                         <argument pos:line="129" pos:column="26">format<pos:position pos:line="129" pos:column="32"/></argument>)<pos:position pos:line="129" pos:column="33"/></argument_list></macro><empty_stmt pos:line="129" pos:column="33">;<pos:position pos:line="129" pos:column="34"/></empty_stmt>
        <return pos:line="130" pos:column="9">return <expr><literal type="number" pos:line="130" pos:column="16">1<pos:position pos:line="130" pos:column="17"/></literal></expr>;<pos:position pos:line="130" pos:column="18"/></return>
    }<pos:position pos:line="131" pos:column="6"/></block></then></if>

    <if pos:line="133" pos:column="5">if <condition pos:line="133" pos:column="8">(<expr><name pos:line="133" pos:column="9">rv<pos:position pos:line="133" pos:column="11"/></name> <operator pos:line="133" pos:column="12">!=<pos:position pos:line="133" pos:column="14"/></operator> <name pos:line="133" pos:column="15">APR_SUCCESS<pos:position pos:line="133" pos:column="26"/></name></expr>)<pos:position pos:line="133" pos:column="27"/></condition><then pos:line="133" pos:column="27"> <block pos:line="133" pos:column="28">{
        <macro><name pos:line="134" pos:column="9">apr_file_printf<pos:position pos:line="134" pos:column="24"/></name><argument_list pos:line="134" pos:column="24">(<argument pos:line="134" pos:column="25">errfile<pos:position pos:line="134" pos:column="32"/></argument>,
                        <argument><literal type="string" pos:line="135" pos:column="25">"Error: Cannot open output DBM '%s': (%d) %s"<pos:position pos:line="135" pos:column="70"/></literal> NL NL<pos:position pos:line="135" pos:column="76"/></argument>,
                         <argument pos:line="136" pos:column="26">output<pos:position pos:line="136" pos:column="32"/></argument>, <argument pos:line="136" pos:column="34">rv<pos:position pos:line="136" pos:column="36"/></argument>, <argument pos:line="136" pos:column="38">apr_strerror(rv, errbuf, sizeof(errbuf))<pos:position pos:line="136" pos:column="78"/></argument>)<pos:position pos:line="136" pos:column="79"/></argument_list></macro><empty_stmt pos:line="136" pos:column="79">;<pos:position pos:line="136" pos:column="80"/></empty_stmt>
        <return pos:line="137" pos:column="9">return <expr><literal type="number" pos:line="137" pos:column="16">1<pos:position pos:line="137" pos:column="17"/></literal></expr>;<pos:position pos:line="137" pos:column="18"/></return>
    }<pos:position pos:line="138" pos:column="6"/></block></then></if>

    <if pos:line="140" pos:column="5">if <condition pos:line="140" pos:column="8">(<expr><name pos:line="140" pos:column="9">verbose<pos:position pos:line="140" pos:column="16"/></name></expr>)<pos:position pos:line="140" pos:column="17"/></condition><then pos:line="140" pos:column="17"> <block pos:line="140" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="141" pos:column="9">apr_file_printf<pos:position pos:line="141" pos:column="24"/></name><argument_list pos:line="141" pos:column="24">(<argument><expr><name pos:line="141" pos:column="25">errfile<pos:position pos:line="141" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="141" pos:column="34">"DBM File: %s"<pos:position pos:line="141" pos:column="48"/></literal><name pos:line="141" pos:column="48">NL<pos:position pos:line="141" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="141" pos:column="52">output<pos:position pos:line="141" pos:column="58"/></name></expr></argument>)<pos:position pos:line="141" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="142" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="144" pos:column="5">rv<pos:position pos:line="144" pos:column="7"/></name> <operator pos:line="144" pos:column="8">=<pos:position pos:line="144" pos:column="9"/></operator> <call><name pos:line="144" pos:column="10">to_dbm<pos:position pos:line="144" pos:column="16"/></name><argument_list pos:line="144" pos:column="16">(<argument><expr><name pos:line="144" pos:column="17">outdbm<pos:position pos:line="144" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="25">infile<pos:position pos:line="144" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="33">pool<pos:position pos:line="144" pos:column="37"/></name></expr></argument>)<pos:position pos:line="144" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="39"/></expr_stmt>

    <if pos:line="146" pos:column="5">if <condition pos:line="146" pos:column="8">(<expr><name pos:line="146" pos:column="9">rv<pos:position pos:line="146" pos:column="11"/></name> <operator pos:line="146" pos:column="12">!=<pos:position pos:line="146" pos:column="14"/></operator> <name pos:line="146" pos:column="15">APR_SUCCESS<pos:position pos:line="146" pos:column="26"/></name></expr>)<pos:position pos:line="146" pos:column="27"/></condition><then pos:line="146" pos:column="27"> <block pos:line="146" pos:column="28">{
        <macro><name pos:line="147" pos:column="9">apr_file_printf<pos:position pos:line="147" pos:column="24"/></name><argument_list pos:line="147" pos:column="24">(<argument pos:line="147" pos:column="25">errfile<pos:position pos:line="147" pos:column="32"/></argument>,
                        <argument><literal type="string" pos:line="148" pos:column="25">"Error: Converting to DBM: (%d) %s"<pos:position pos:line="148" pos:column="60"/></literal> NL NL<pos:position pos:line="148" pos:column="66"/></argument>,
                         <argument pos:line="149" pos:column="26">rv<pos:position pos:line="149" pos:column="28"/></argument>, <argument pos:line="149" pos:column="30">apr_strerror(rv, errbuf, sizeof(errbuf))<pos:position pos:line="149" pos:column="70"/></argument>)<pos:position pos:line="149" pos:column="71"/></argument_list></macro><empty_stmt pos:line="149" pos:column="71">;<pos:position pos:line="149" pos:column="72"/></empty_stmt>
        <return pos:line="150" pos:column="9">return <expr><literal type="number" pos:line="150" pos:column="16">1<pos:position pos:line="150" pos:column="17"/></literal></expr>;<pos:position pos:line="150" pos:column="18"/></return>
    }<pos:position pos:line="151" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="153" pos:column="5">apr_dbm_close<pos:position pos:line="153" pos:column="18"/></name><argument_list pos:line="153" pos:column="18">(<argument><expr><name pos:line="153" pos:column="19">outdbm<pos:position pos:line="153" pos:column="25"/></name></expr></argument>)<pos:position pos:line="153" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="27"/></expr_stmt>

    <if pos:line="155" pos:column="5">if <condition pos:line="155" pos:column="8">(<expr><name pos:line="155" pos:column="9">verbose<pos:position pos:line="155" pos:column="16"/></name></expr>)<pos:position pos:line="155" pos:column="17"/></condition><then pos:line="155" pos:column="17"> <block pos:line="155" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="156" pos:column="9">apr_file_printf<pos:position pos:line="156" pos:column="24"/></name><argument_list pos:line="156" pos:column="24">(<argument><expr><name pos:line="156" pos:column="25">errfile<pos:position pos:line="156" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="156" pos:column="34">"Conversion Complete."<pos:position pos:line="156" pos:column="56"/></literal> <name pos:line="156" pos:column="57">NL<pos:position pos:line="156" pos:column="59"/></name></expr></argument>)<pos:position pos:line="156" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="157" pos:column="6"/></block></then></if>

    <return pos:line="159" pos:column="5">return <expr><literal type="number" pos:line="159" pos:column="12">0<pos:position pos:line="159" pos:column="13"/></literal></expr>;<pos:position pos:line="159" pos:column="14"/></return>
}<pos:position pos:line="160" pos:column="2"/></block></function></unit>
