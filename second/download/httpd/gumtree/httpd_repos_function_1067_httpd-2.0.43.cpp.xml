<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1067_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">best_match<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">negotiation_state<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">neg<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">var_rec<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier><modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">pbest<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">j<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">var_rec<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">best<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name pos:line="4" pos:column="21">NULL<pos:position pos:line="4" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">float<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">bestq<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0.0f<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">enum<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">algorithm_results<pos:position pos:line="6" pos:column="27"/></name></name></type> <name pos:line="6" pos:column="28">algorithm_result<pos:position pos:line="6" pos:column="44"/></name></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">var_rec<pos:position pos:line="8" pos:column="12"/></name> <modifier pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></modifier></type><name pos:line="8" pos:column="14">avail_recs<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><operator pos:line="8" pos:column="27">(<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">var_rec<pos:position pos:line="8" pos:column="35"/></name> <operator pos:line="8" pos:column="36">*<pos:position pos:line="8" pos:column="37"/></operator><operator pos:line="8" pos:column="37">)<pos:position pos:line="8" pos:column="38"/></operator> <name><name pos:line="8" pos:column="39">neg<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">-&gt;<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="44">avail_vars<pos:position pos:line="8" pos:column="54"/></name><operator pos:line="8" pos:column="54">-&gt;<pos:position pos:line="8" pos:column="59"/></operator><name pos:line="8" pos:column="56">elts<pos:position pos:line="8" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="61"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">set_default_lang_quality<pos:position pos:line="10" pos:column="29"/></name><argument_list pos:line="10" pos:column="29">(<argument><expr><name pos:line="10" pos:column="30">neg<pos:position pos:line="10" pos:column="33"/></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="12" pos:column="5">/*
     * Find the 'best' variant 
     */</comment>

    <for pos:line="16" pos:column="5">for <control pos:line="16" pos:column="9">(<init><expr><name pos:line="16" pos:column="10">j<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <literal type="number" pos:line="16" pos:column="14">0<pos:position pos:line="16" pos:column="15"/></literal></expr>;<pos:position pos:line="16" pos:column="16"/></init> <condition><expr><name pos:line="16" pos:column="17">j<pos:position pos:line="16" pos:column="18"/></name> <operator pos:line="16" pos:column="19">&lt;<pos:position pos:line="16" pos:column="23"/></operator> <name><name pos:line="16" pos:column="21">neg<pos:position pos:line="16" pos:column="24"/></name><operator pos:line="16" pos:column="24">-&gt;<pos:position pos:line="16" pos:column="29"/></operator><name pos:line="16" pos:column="26">avail_vars<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">nelts<pos:position pos:line="16" pos:column="43"/></name></name></expr>;<pos:position pos:line="16" pos:column="44"/></condition> <incr><expr><operator pos:line="16" pos:column="45">++<pos:position pos:line="16" pos:column="47"/></operator><name pos:line="16" pos:column="47">j<pos:position pos:line="16" pos:column="48"/></name></expr></incr>)<pos:position pos:line="16" pos:column="49"/></control> <block pos:line="16" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">var_rec<pos:position pos:line="17" pos:column="16"/></name> <modifier pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></modifier></type><name pos:line="17" pos:column="18">variant<pos:position pos:line="17" pos:column="25"/></name> <init pos:line="17" pos:column="26">= <expr><operator pos:line="17" pos:column="28">&amp;<pos:position pos:line="17" pos:column="33"/></operator><name><name pos:line="17" pos:column="29">avail_recs<pos:position pos:line="17" pos:column="39"/></name><index pos:line="17" pos:column="39">[<expr><name pos:line="17" pos:column="40">j<pos:position pos:line="17" pos:column="41"/></name></expr>]<pos:position pos:line="17" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="17" pos:column="43"/></decl_stmt>

        <comment type="block" pos:line="19" pos:column="9">/* Find all the relevant 'quality' values from the
         * Accept... headers, and store in the variant.  This also
         * prepares for sending an Alternates header etc so we need to
         * do it even if we do not actually plan to find a best
         * variant.  
         */</comment>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">set_accept_quality<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">neg<pos:position pos:line="25" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="33">variant<pos:position pos:line="25" pos:column="40"/></name></expr></argument>)<pos:position pos:line="25" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">set_language_quality<pos:position pos:line="26" pos:column="29"/></name><argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">neg<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">variant<pos:position pos:line="26" pos:column="42"/></name></expr></argument>)<pos:position pos:line="26" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">set_encoding_quality<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">neg<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="35">variant<pos:position pos:line="27" pos:column="42"/></name></expr></argument>)<pos:position pos:line="27" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">set_charset_quality<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">neg<pos:position pos:line="28" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="34">variant<pos:position pos:line="28" pos:column="41"/></name></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>

        <comment type="block" pos:line="30" pos:column="9">/* Only do variant selection if we may actually choose a
         * variant for the client 
         */</comment>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name><name pos:line="33" pos:column="13">neg<pos:position pos:line="33" pos:column="16"/></name><operator pos:line="33" pos:column="16">-&gt;<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="18">may_choose<pos:position pos:line="33" pos:column="28"/></name></name></expr>)<pos:position pos:line="33" pos:column="29"/></condition><then pos:line="33" pos:column="29"> <block pos:line="33" pos:column="30">{

            <comment type="block" pos:line="35" pos:column="13">/* Now find out if this variant is better than the current
             * best, either using the RVSA/1.0 algorithm, or Apache's
             * internal server-driven algorithm. Presumably other
             * server-driven algorithms are possible, and could be
             * implemented here.
             */</comment>
     
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><name><name pos:line="42" pos:column="17">neg<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">-&gt;<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="22">use_rvsa<pos:position pos:line="42" pos:column="30"/></name></name></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31"> <block pos:line="42" pos:column="32">{
                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><call><name pos:line="43" pos:column="21">is_variant_better_rvsa<pos:position pos:line="43" pos:column="43"/></name><argument_list pos:line="43" pos:column="43">(<argument><expr><name pos:line="43" pos:column="44">neg<pos:position pos:line="43" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="49">variant<pos:position pos:line="43" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="58">best<pos:position pos:line="43" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="64">&amp;<pos:position pos:line="43" pos:column="69"/></operator><name pos:line="43" pos:column="65">bestq<pos:position pos:line="43" pos:column="70"/></name></expr></argument>)<pos:position pos:line="43" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="72"/></condition><then pos:line="43" pos:column="72"> <block pos:line="43" pos:column="73">{
                    <expr_stmt><expr><name pos:line="44" pos:column="21">best<pos:position pos:line="44" pos:column="25"/></name> <operator pos:line="44" pos:column="26">=<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="28">variant<pos:position pos:line="44" pos:column="35"/></name></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>
            }<pos:position pos:line="46" pos:column="14"/></block></then>
            <else pos:line="47" pos:column="13">else <block pos:line="47" pos:column="18">{
                <if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><call><name pos:line="48" pos:column="21">is_variant_better<pos:position pos:line="48" pos:column="38"/></name><argument_list pos:line="48" pos:column="38">(<argument><expr><name pos:line="48" pos:column="39">neg<pos:position pos:line="48" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="44">variant<pos:position pos:line="48" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="53">best<pos:position pos:line="48" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="59">&amp;<pos:position pos:line="48" pos:column="64"/></operator><name pos:line="48" pos:column="60">bestq<pos:position pos:line="48" pos:column="65"/></name></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="67"/></condition><then pos:line="48" pos:column="67"> <block pos:line="48" pos:column="68">{
                    <expr_stmt><expr><name pos:line="49" pos:column="21">best<pos:position pos:line="49" pos:column="25"/></name> <operator pos:line="49" pos:column="26">=<pos:position pos:line="49" pos:column="27"/></operator> <name pos:line="49" pos:column="28">variant<pos:position pos:line="49" pos:column="35"/></name></expr>;<pos:position pos:line="49" pos:column="36"/></expr_stmt>
                }<pos:position pos:line="50" pos:column="18"/></block></then></if>
            }<pos:position pos:line="51" pos:column="14"/></block></else></if>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if>
    }<pos:position pos:line="53" pos:column="6"/></block></for>

    <comment type="block" pos:line="55" pos:column="5">/* We now either have a best variant, or no best variant */</comment>

    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name><name pos:line="57" pos:column="9">neg<pos:position pos:line="57" pos:column="12"/></name><operator pos:line="57" pos:column="12">-&gt;<pos:position pos:line="57" pos:column="17"/></operator><name pos:line="57" pos:column="14">use_rvsa<pos:position pos:line="57" pos:column="22"/></name></name></expr>)<pos:position pos:line="57" pos:column="23"/></condition><then pos:line="57" pos:column="23">    <block pos:line="57" pos:column="27">{
        <comment type="block" pos:line="58" pos:column="9">/* calculate result for RVSA/1.0 algorithm:
         * only a choice response if the best variant has q&gt;0
         * and is definite
         */</comment>
        <expr_stmt><expr><name pos:line="62" pos:column="9">algorithm_result<pos:position pos:line="62" pos:column="25"/></name> <operator pos:line="62" pos:column="26">=<pos:position pos:line="62" pos:column="27"/></operator> <ternary><condition><expr><operator pos:line="62" pos:column="28">(<pos:position pos:line="62" pos:column="29"/></operator><name pos:line="62" pos:column="29">best<pos:position pos:line="62" pos:column="33"/></name> <operator pos:line="62" pos:column="34">&amp;&amp;<pos:position pos:line="62" pos:column="44"/></operator> <name><name pos:line="62" pos:column="37">best<pos:position pos:line="62" pos:column="41"/></name><operator pos:line="62" pos:column="41">-&gt;<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="43">definite<pos:position pos:line="62" pos:column="51"/></name></name><operator pos:line="62" pos:column="51">)<pos:position pos:line="62" pos:column="52"/></operator> <operator pos:line="62" pos:column="53">&amp;&amp;<pos:position pos:line="62" pos:column="63"/></operator> <operator pos:line="62" pos:column="56">(<pos:position pos:line="62" pos:column="57"/></operator><name pos:line="62" pos:column="57">bestq<pos:position pos:line="62" pos:column="62"/></name> <operator pos:line="62" pos:column="63">&gt;<pos:position pos:line="62" pos:column="67"/></operator> <literal type="number" pos:line="62" pos:column="65">0<pos:position pos:line="62" pos:column="66"/></literal><operator pos:line="62" pos:column="66">)<pos:position pos:line="62" pos:column="67"/></operator></expr> ?<pos:position pos:line="62" pos:column="69"/></condition><then pos:line="62" pos:column="69">
                           <expr><name pos:line="63" pos:column="28">alg_choice<pos:position pos:line="63" pos:column="38"/></name></expr> <pos:position pos:line="63" pos:column="39"/></then><else pos:line="63" pos:column="39">: <expr><name pos:line="63" pos:column="41">alg_list<pos:position pos:line="63" pos:column="49"/></name></expr></else></ternary></expr>;<pos:position pos:line="63" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="64" pos:column="6"/></block></then>
    <else pos:line="65" pos:column="5">else <block pos:line="65" pos:column="10">{
        <comment type="block" pos:line="66" pos:column="9">/* calculate result for Apache negotiation algorithm */</comment>
        <expr_stmt><expr><name pos:line="67" pos:column="9">algorithm_result<pos:position pos:line="67" pos:column="25"/></name> <operator pos:line="67" pos:column="26">=<pos:position pos:line="67" pos:column="27"/></operator> <ternary><condition><expr><name pos:line="67" pos:column="28">bestq<pos:position pos:line="67" pos:column="33"/></name> <operator pos:line="67" pos:column="34">&gt;<pos:position pos:line="67" pos:column="38"/></operator> <literal type="number" pos:line="67" pos:column="36">0<pos:position pos:line="67" pos:column="37"/></literal></expr> ?<pos:position pos:line="67" pos:column="39"/></condition><then pos:line="67" pos:column="39"> <expr><name pos:line="67" pos:column="40">alg_choice<pos:position pos:line="67" pos:column="50"/></name></expr> <pos:position pos:line="67" pos:column="51"/></then><else pos:line="67" pos:column="51">: <expr><name pos:line="67" pos:column="53">alg_list<pos:position pos:line="67" pos:column="61"/></name></expr></else></ternary></expr>;<pos:position pos:line="67" pos:column="62"/></expr_stmt>        
    }<pos:position pos:line="68" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="70" pos:column="5">/* Returning a choice response with a non-neighboring variant is a
     * protocol security error in TCN (see rfc2295).  We do *not*
     * verify here that the variant and URI are neighbors, even though
     * we may return alg_choice.  We depend on the environment (the
     * caller) to only declare the resource transparently negotiable if
     * all variants are neighbors.
     */</comment>
    <expr_stmt><expr><operator pos:line="77" pos:column="5">*<pos:position pos:line="77" pos:column="6"/></operator><name pos:line="77" pos:column="6">pbest<pos:position pos:line="77" pos:column="11"/></name> <operator pos:line="77" pos:column="12">=<pos:position pos:line="77" pos:column="13"/></operator> <name pos:line="77" pos:column="14">best<pos:position pos:line="77" pos:column="18"/></name></expr>;<pos:position pos:line="77" pos:column="19"/></expr_stmt>
    <return pos:line="78" pos:column="5">return <expr><name pos:line="78" pos:column="12">algorithm_result<pos:position pos:line="78" pos:column="28"/></name></expr>;<pos:position pos:line="78" pos:column="29"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
