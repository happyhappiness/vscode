<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_983_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name><modifier pos:line="1" pos:column="18">*<pos:position pos:line="1" pos:column="19"/></modifier></type> <name pos:line="1" pos:column="20">regen_key<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">apr_pool_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">p<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">apr_table_t<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">headers<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">apr_array_header_t<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">varray<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="58">const<pos:position pos:line="2" pos:column="63"/></specifier> <name pos:line="2" pos:column="64">char<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">oldkey<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="77"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">iovec<pos:position pos:line="4" pos:column="17"/></name></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">iov<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">i<pos:position pos:line="5" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="12">k<pos:position pos:line="5" pos:column="13"/></name></decl>;<pos:position pos:line="5" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">nvec<pos:position pos:line="6" pos:column="13"/></name></decl>;<pos:position pos:line="6" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">header<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier><modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">elts<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">nvec<pos:position pos:line="10" pos:column="9"/></name> <operator pos:line="10" pos:column="10">=<pos:position pos:line="10" pos:column="11"/></operator> <operator pos:line="10" pos:column="12">(<pos:position pos:line="10" pos:column="13"/></operator><name><name pos:line="10" pos:column="13">varray<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">nelts<pos:position pos:line="10" pos:column="26"/></name></name> <operator pos:line="10" pos:column="27">*<pos:position pos:line="10" pos:column="28"/></operator> <literal type="number" pos:line="10" pos:column="29">2<pos:position pos:line="10" pos:column="30"/></literal><operator pos:line="10" pos:column="30">)<pos:position pos:line="10" pos:column="31"/></operator> <operator pos:line="10" pos:column="32">+<pos:position pos:line="10" pos:column="33"/></operator> <literal type="number" pos:line="10" pos:column="34">1<pos:position pos:line="10" pos:column="35"/></literal></expr>;<pos:position pos:line="10" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">iov<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <call><name pos:line="11" pos:column="11">apr_palloc<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">p<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="25">sizeof<argument_list pos:line="11" pos:column="31">(<argument><expr pos:line="11" pos:column="32">struct <name pos:line="11" pos:column="39">iovec<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></sizeof> <operator pos:line="11" pos:column="46">*<pos:position pos:line="11" pos:column="47"/></operator> <name pos:line="11" pos:column="48">nvec<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><name pos:line="12" pos:column="5">elts<pos:position pos:line="12" pos:column="9"/></name> <operator pos:line="12" pos:column="10">=<pos:position pos:line="12" pos:column="11"/></operator> <operator pos:line="12" pos:column="12">(<pos:position pos:line="12" pos:column="13"/></operator><specifier pos:line="12" pos:column="13">const<pos:position pos:line="12" pos:column="18"/></specifier> <name pos:line="12" pos:column="19">char<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">*<pos:position pos:line="12" pos:column="25"/></operator><operator pos:line="12" pos:column="25">*<pos:position pos:line="12" pos:column="26"/></operator><operator pos:line="12" pos:column="26">)<pos:position pos:line="12" pos:column="27"/></operator> <name><name pos:line="12" pos:column="28">varray<pos:position pos:line="12" pos:column="34"/></name><operator pos:line="12" pos:column="34">-&gt;<pos:position pos:line="12" pos:column="39"/></operator><name pos:line="12" pos:column="36">elts<pos:position pos:line="12" pos:column="40"/></name></name></expr>;<pos:position pos:line="12" pos:column="41"/></expr_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* TODO:
     *    - Handle multiple-value headers better. (sort them?)
     *    - Handle Case in-sensitive Values better.
     *        This isn't the end of the world, since it just lowers the cache
     *        hit rate, but it would be nice to fix.
     *
     * The majority are case insenstive if they are values (encoding etc).
     * Most of rfc2616 is case insensitive on header contents.
     *
     * So the better solution may be to identify headers which should be
     * treated case-sensitive?
     *  HTTP URI's (3.2.3) [host and scheme are insensitive]
     *  HTTP method (5.1.1)
     *  HTTP-date values (3.3.1)
     *  3.7 Media Types [exerpt]
     *     The type, subtype, and parameter attribute names are case-
     *     insensitive. Parameter values might or might not be case-sensitive,
     *     depending on the semantics of the parameter name.
     *  4.20 Except [exerpt]
     *     Comparison of expectation values is case-insensitive for unquoted
     *     tokens (including the 100-continue token), and is case-sensitive for
     *     quoted-string expectation-extensions.
     */</comment>

    <for pos:line="38" pos:column="5">for<control pos:line="38" pos:column="8">(<init><expr><name pos:line="38" pos:column="9">i<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">=<pos:position pos:line="38" pos:column="11"/></operator><literal type="number" pos:line="38" pos:column="11">0<pos:position pos:line="38" pos:column="12"/></literal></expr><operator pos:line="38" pos:column="12">,<pos:position pos:line="38" pos:column="13"/></operator> <expr><name pos:line="38" pos:column="14">k<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">=<pos:position pos:line="38" pos:column="16"/></operator><literal type="number" pos:line="38" pos:column="16">0<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></init> <condition><expr><name pos:line="38" pos:column="19">i<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">&lt;<pos:position pos:line="38" pos:column="25"/></operator> <name><name pos:line="38" pos:column="23">varray<pos:position pos:line="38" pos:column="29"/></name><operator pos:line="38" pos:column="29">-&gt;<pos:position pos:line="38" pos:column="34"/></operator><name pos:line="38" pos:column="31">nelts<pos:position pos:line="38" pos:column="36"/></name></name></expr>;<pos:position pos:line="38" pos:column="37"/></condition> <incr><expr><name pos:line="38" pos:column="38">i<pos:position pos:line="38" pos:column="39"/></name><operator pos:line="38" pos:column="39">++<pos:position pos:line="38" pos:column="41"/></operator></expr></incr>)<pos:position pos:line="38" pos:column="42"/></control> <block pos:line="38" pos:column="43">{
        <expr_stmt><expr><name pos:line="39" pos:column="9">header<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <call><name pos:line="39" pos:column="18">apr_table_get<pos:position pos:line="39" pos:column="31"/></name><argument_list pos:line="39" pos:column="31">(<argument><expr><name pos:line="39" pos:column="32">headers<pos:position pos:line="39" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="41">elts<pos:position pos:line="39" pos:column="45"/></name><index pos:line="39" pos:column="45">[<expr><name pos:line="39" pos:column="46">i<pos:position pos:line="39" pos:column="47"/></name></expr>]<pos:position pos:line="39" pos:column="48"/></index></name></expr></argument>)<pos:position pos:line="39" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="50"/></expr_stmt>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">!<pos:position pos:line="40" pos:column="14"/></operator><name pos:line="40" pos:column="14">header<pos:position pos:line="40" pos:column="20"/></name></expr>)<pos:position pos:line="40" pos:column="21"/></condition><then pos:line="40" pos:column="21"> <block pos:line="40" pos:column="22">{
            <expr_stmt><expr><name pos:line="41" pos:column="13">header<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator> <literal type="string" pos:line="41" pos:column="22">""<pos:position pos:line="41" pos:column="24"/></literal></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">iov<pos:position pos:line="43" pos:column="12"/></name><index pos:line="43" pos:column="12">[<expr><name pos:line="43" pos:column="13">k<pos:position pos:line="43" pos:column="14"/></name></expr>]<pos:position pos:line="43" pos:column="15"/></index></name><operator pos:line="43" pos:column="15">.<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="16">iov_base<pos:position pos:line="43" pos:column="24"/></name> <operator pos:line="43" pos:column="25">=<pos:position pos:line="43" pos:column="26"/></operator> <operator pos:line="43" pos:column="27">(<pos:position pos:line="43" pos:column="28"/></operator><name pos:line="43" pos:column="28">char<pos:position pos:line="43" pos:column="32"/></name><operator pos:line="43" pos:column="32">*<pos:position pos:line="43" pos:column="33"/></operator><operator pos:line="43" pos:column="33">)<pos:position pos:line="43" pos:column="34"/></operator> <name><name pos:line="43" pos:column="35">elts<pos:position pos:line="43" pos:column="39"/></name><index pos:line="43" pos:column="39">[<expr><name pos:line="43" pos:column="40">i<pos:position pos:line="43" pos:column="41"/></name></expr>]<pos:position pos:line="43" pos:column="42"/></index></name></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="44" pos:column="9">iov<pos:position pos:line="44" pos:column="12"/></name><index pos:line="44" pos:column="12">[<expr><name pos:line="44" pos:column="13">k<pos:position pos:line="44" pos:column="14"/></name></expr>]<pos:position pos:line="44" pos:column="15"/></index></name><operator pos:line="44" pos:column="15">.<pos:position pos:line="44" pos:column="16"/></operator><name pos:line="44" pos:column="16">iov_len<pos:position pos:line="44" pos:column="23"/></name> <operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator> <call><name pos:line="44" pos:column="26">strlen<pos:position pos:line="44" pos:column="32"/></name><argument_list pos:line="44" pos:column="32">(<argument><expr><name><name pos:line="44" pos:column="33">elts<pos:position pos:line="44" pos:column="37"/></name><index pos:line="44" pos:column="37">[<expr><name pos:line="44" pos:column="38">i<pos:position pos:line="44" pos:column="39"/></name></expr>]<pos:position pos:line="44" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="44" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="45" pos:column="9">k<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">++<pos:position pos:line="45" pos:column="12"/></operator></expr>;<pos:position pos:line="45" pos:column="13"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">iov<pos:position pos:line="46" pos:column="12"/></name><index pos:line="46" pos:column="12">[<expr><name pos:line="46" pos:column="13">k<pos:position pos:line="46" pos:column="14"/></name></expr>]<pos:position pos:line="46" pos:column="15"/></index></name><operator pos:line="46" pos:column="15">.<pos:position pos:line="46" pos:column="16"/></operator><name pos:line="46" pos:column="16">iov_base<pos:position pos:line="46" pos:column="24"/></name> <operator pos:line="46" pos:column="25">=<pos:position pos:line="46" pos:column="26"/></operator> <operator pos:line="46" pos:column="27">(<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="28">char<pos:position pos:line="46" pos:column="32"/></name><operator pos:line="46" pos:column="32">*<pos:position pos:line="46" pos:column="33"/></operator><operator pos:line="46" pos:column="33">)<pos:position pos:line="46" pos:column="34"/></operator> <name pos:line="46" pos:column="35">header<pos:position pos:line="46" pos:column="41"/></name></expr>;<pos:position pos:line="46" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">iov<pos:position pos:line="47" pos:column="12"/></name><index pos:line="47" pos:column="12">[<expr><name pos:line="47" pos:column="13">k<pos:position pos:line="47" pos:column="14"/></name></expr>]<pos:position pos:line="47" pos:column="15"/></index></name><operator pos:line="47" pos:column="15">.<pos:position pos:line="47" pos:column="16"/></operator><name pos:line="47" pos:column="16">iov_len<pos:position pos:line="47" pos:column="23"/></name> <operator pos:line="47" pos:column="24">=<pos:position pos:line="47" pos:column="25"/></operator> <call><name pos:line="47" pos:column="26">strlen<pos:position pos:line="47" pos:column="32"/></name><argument_list pos:line="47" pos:column="32">(<argument><expr><name pos:line="47" pos:column="33">header<pos:position pos:line="47" pos:column="39"/></name></expr></argument>)<pos:position pos:line="47" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="48" pos:column="9">k<pos:position pos:line="48" pos:column="10"/></name><operator pos:line="48" pos:column="10">++<pos:position pos:line="48" pos:column="12"/></operator></expr>;<pos:position pos:line="48" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></for>
    <expr_stmt><expr><name><name pos:line="50" pos:column="5">iov<pos:position pos:line="50" pos:column="8"/></name><index pos:line="50" pos:column="8">[<expr><name pos:line="50" pos:column="9">k<pos:position pos:line="50" pos:column="10"/></name></expr>]<pos:position pos:line="50" pos:column="11"/></index></name><operator pos:line="50" pos:column="11">.<pos:position pos:line="50" pos:column="12"/></operator><name pos:line="50" pos:column="12">iov_base<pos:position pos:line="50" pos:column="20"/></name> <operator pos:line="50" pos:column="21">=<pos:position pos:line="50" pos:column="22"/></operator> <operator pos:line="50" pos:column="23">(<pos:position pos:line="50" pos:column="24"/></operator><name pos:line="50" pos:column="24">char<pos:position pos:line="50" pos:column="28"/></name><operator pos:line="50" pos:column="28">*<pos:position pos:line="50" pos:column="29"/></operator><operator pos:line="50" pos:column="29">)<pos:position pos:line="50" pos:column="30"/></operator> <name pos:line="50" pos:column="31">oldkey<pos:position pos:line="50" pos:column="37"/></name></expr>;<pos:position pos:line="50" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">iov<pos:position pos:line="51" pos:column="8"/></name><index pos:line="51" pos:column="8">[<expr><name pos:line="51" pos:column="9">k<pos:position pos:line="51" pos:column="10"/></name></expr>]<pos:position pos:line="51" pos:column="11"/></index></name><operator pos:line="51" pos:column="11">.<pos:position pos:line="51" pos:column="12"/></operator><name pos:line="51" pos:column="12">iov_len<pos:position pos:line="51" pos:column="19"/></name> <operator pos:line="51" pos:column="20">=<pos:position pos:line="51" pos:column="21"/></operator> <call><name pos:line="51" pos:column="22">strlen<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">oldkey<pos:position pos:line="51" pos:column="35"/></name></expr></argument>)<pos:position pos:line="51" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name pos:line="52" pos:column="5">k<pos:position pos:line="52" pos:column="6"/></name><operator pos:line="52" pos:column="6">++<pos:position pos:line="52" pos:column="8"/></operator></expr>;<pos:position pos:line="52" pos:column="9"/></expr_stmt>

    <return pos:line="54" pos:column="5">return <expr><call><name pos:line="54" pos:column="12">apr_pstrcatv<pos:position pos:line="54" pos:column="24"/></name><argument_list pos:line="54" pos:column="24">(<argument><expr><name pos:line="54" pos:column="25">p<pos:position pos:line="54" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="28">iov<pos:position pos:line="54" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="33">k<pos:position pos:line="54" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="36">NULL<pos:position pos:line="54" pos:column="40"/></name></expr></argument>)<pos:position pos:line="54" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="42"/></return>
}<pos:position pos:line="55" pos:column="2"/></block></function></unit>
