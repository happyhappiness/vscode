<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_93.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">send_req<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">fd<pos:position pos:line="1" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="30">request_rec<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">r<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">argv0<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">char<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier><modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">env<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="71">int<pos:position pos:line="1" pos:column="74"/></name></type> <name pos:line="1" pos:column="75">req_type<pos:position pos:line="1" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="84"/></parameter_list> 
<block pos:line="2" pos:column="1">{ 
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">len<pos:position pos:line="3" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="14">r_type<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><name pos:line="3" pos:column="23">req_type<pos:position pos:line="3" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="32"/></decl_stmt> 
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name> <init pos:line="4" pos:column="11">= <expr><literal type="number" pos:line="4" pos:column="13">0<pos:position pos:line="4" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt> 
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">data<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt> 
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">module<pos:position pos:line="6" pos:column="11"/></name> <modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type><name pos:line="6" pos:column="13">suexec_mod<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><call><name pos:line="6" pos:column="26">ap_find_linked_module<pos:position pos:line="6" pos:column="47"/></name><argument_list pos:line="6" pos:column="47">(<argument><expr><literal type="string" pos:line="6" pos:column="48">"mod_suexec.c"<pos:position pos:line="6" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="64"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">data<pos:position pos:line="8" pos:column="9"/></name> <operator pos:line="8" pos:column="10">=<pos:position pos:line="8" pos:column="11"/></operator> <call><name pos:line="8" pos:column="12">apr_pstrcat<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><name><name pos:line="8" pos:column="24">r<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">pool<pos:position pos:line="8" pos:column="31"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="33">r<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">filename<pos:position pos:line="8" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="46">"\n"<pos:position pos:line="8" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="52">argv0<pos:position pos:line="8" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="59">"\n"<pos:position pos:line="8" pos:column="63"/></literal></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="65">r<pos:position pos:line="8" pos:column="66"/></name><operator pos:line="8" pos:column="66">-&gt;<pos:position pos:line="8" pos:column="71"/></operator><name pos:line="8" pos:column="68">uri<pos:position pos:line="8" pos:column="71"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="73">"\n"<pos:position pos:line="8" pos:column="77"/></literal></expr></argument>, 
                     <argument><expr><name pos:line="9" pos:column="22">NULL<pos:position pos:line="9" pos:column="26"/></name></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt> 

    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><expr><name pos:line="11" pos:column="10">i<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator><literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal></expr>;<pos:position pos:line="11" pos:column="15"/></init> <condition><expr><name><name pos:line="11" pos:column="16">env<pos:position pos:line="11" pos:column="19"/></name><index pos:line="11" pos:column="19">[<expr><name pos:line="11" pos:column="20">i<pos:position pos:line="11" pos:column="21"/></name></expr>]<pos:position pos:line="11" pos:column="22"/></index></name></expr>;<pos:position pos:line="11" pos:column="23"/></condition> <incr><expr><name pos:line="11" pos:column="24">i<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">++<pos:position pos:line="11" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="28"/></control> <block pos:line="11" pos:column="29">{ 
        <continue pos:line="12" pos:column="9">continue;<pos:position pos:line="12" pos:column="18"/></continue> 
    }<pos:position pos:line="13" pos:column="6"/></block></for> 

    <comment type="block" pos:line="15" pos:column="5">/* Write the request type (SSI "exec cmd" or cgi). */</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">write<pos:position pos:line="16" pos:column="14"/></name><argument_list pos:line="16" pos:column="14">(<argument><expr><name pos:line="16" pos:column="15">fd<pos:position pos:line="16" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="19">&amp;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="20">r_type<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="28">sizeof<argument_list pos:line="16" pos:column="34">(<argument><expr><name pos:line="16" pos:column="35">int<pos:position pos:line="16" pos:column="38"/></name></expr></argument>)<pos:position pos:line="16" pos:column="39"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="40"/></argument_list></call> <operator pos:line="16" pos:column="41">&lt;<pos:position pos:line="16" pos:column="45"/></operator> <literal type="number" pos:line="16" pos:column="43">0<pos:position pos:line="16" pos:column="44"/></literal></expr>)<pos:position pos:line="16" pos:column="45"/></condition><then pos:line="16" pos:column="45"> <block pos:line="16" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">ap_log_rerror<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">APLOG_MARK<pos:position pos:line="17" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="35">APLOG_ERR<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="46">errno<pos:position pos:line="17" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">r<pos:position pos:line="17" pos:column="54"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="18" pos:column="22">"write to cgi daemon process"<pos:position pos:line="18" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="53"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="21" pos:column="5">/* Write the number of entries in the environment. */</comment>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name pos:line="22" pos:column="9">write<pos:position pos:line="22" pos:column="14"/></name><argument_list pos:line="22" pos:column="14">(<argument><expr><name pos:line="22" pos:column="15">fd<pos:position pos:line="22" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="19">&amp;<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="20">i<pos:position pos:line="22" pos:column="21"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="23">sizeof<argument_list pos:line="22" pos:column="29">(<argument><expr><name pos:line="22" pos:column="30">int<pos:position pos:line="22" pos:column="33"/></name></expr></argument>)<pos:position pos:line="22" pos:column="34"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call> <operator pos:line="22" pos:column="36">&lt;<pos:position pos:line="22" pos:column="40"/></operator> <literal type="number" pos:line="22" pos:column="38">0<pos:position pos:line="22" pos:column="39"/></literal></expr>)<pos:position pos:line="22" pos:column="40"/></condition><then pos:line="22" pos:column="40"> <block pos:line="22" pos:column="41">{
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">ap_log_rerror<pos:position pos:line="23" pos:column="22"/></name><argument_list pos:line="23" pos:column="22">(<argument><expr><name pos:line="23" pos:column="23">APLOG_MARK<pos:position pos:line="23" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="35">APLOG_ERR<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="46">errno<pos:position pos:line="23" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="53">r<pos:position pos:line="23" pos:column="54"/></name></expr></argument>, 
                     <argument><expr><literal type="string" pos:line="24" pos:column="22">"write to cgi daemon process"<pos:position pos:line="24" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="53"/></expr_stmt> 
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>     

    <for pos:line="27" pos:column="5">for <control pos:line="27" pos:column="9">(<init><expr><name pos:line="27" pos:column="10">i<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <literal type="number" pos:line="27" pos:column="14">0<pos:position pos:line="27" pos:column="15"/></literal></expr>;<pos:position pos:line="27" pos:column="16"/></init> <condition><expr><name><name pos:line="27" pos:column="17">env<pos:position pos:line="27" pos:column="20"/></name><index pos:line="27" pos:column="20">[<expr><name pos:line="27" pos:column="21">i<pos:position pos:line="27" pos:column="22"/></name></expr>]<pos:position pos:line="27" pos:column="23"/></index></name></expr>;<pos:position pos:line="27" pos:column="24"/></condition> <incr><expr><name pos:line="27" pos:column="25">i<pos:position pos:line="27" pos:column="26"/></name><operator pos:line="27" pos:column="26">++<pos:position pos:line="27" pos:column="28"/></operator></expr></incr>)<pos:position pos:line="27" pos:column="29"/></control> <block pos:line="27" pos:column="30">{ 
        <expr_stmt><expr><name pos:line="28" pos:column="9">data<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <call><name pos:line="28" pos:column="16">apr_pstrcat<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><name><name pos:line="28" pos:column="28">r<pos:position pos:line="28" pos:column="29"/></name><operator pos:line="28" pos:column="29">-&gt;<pos:position pos:line="28" pos:column="34"/></operator><name pos:line="28" pos:column="31">pool<pos:position pos:line="28" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="37">data<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="43">env<pos:position pos:line="28" pos:column="46"/></name><index pos:line="28" pos:column="46">[<expr><name pos:line="28" pos:column="47">i<pos:position pos:line="28" pos:column="48"/></name></expr>]<pos:position pos:line="28" pos:column="49"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="51">"\n"<pos:position pos:line="28" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="57">NULL<pos:position pos:line="28" pos:column="61"/></name></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt> 
    }<pos:position pos:line="29" pos:column="6"/></block></for> 
    <expr_stmt><expr><name pos:line="30" pos:column="5">data<pos:position pos:line="30" pos:column="9"/></name> <operator pos:line="30" pos:column="10">=<pos:position pos:line="30" pos:column="11"/></operator> <call><name pos:line="30" pos:column="12">apr_pstrcat<pos:position pos:line="30" pos:column="23"/></name><argument_list pos:line="30" pos:column="23">(<argument><expr><name><name pos:line="30" pos:column="24">r<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">-&gt;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="27">pool<pos:position pos:line="30" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="33">data<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="39">r<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">-&gt;<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="42">args<pos:position pos:line="30" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">NULL<pos:position pos:line="30" pos:column="52"/></name></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt> 
    <expr_stmt><expr><name pos:line="31" pos:column="5">len<pos:position pos:line="31" pos:column="8"/></name> <operator pos:line="31" pos:column="9">=<pos:position pos:line="31" pos:column="10"/></operator> <call><name pos:line="31" pos:column="11">strlen<pos:position pos:line="31" pos:column="17"/></name><argument_list pos:line="31" pos:column="17">(<argument><expr><name pos:line="31" pos:column="18">data<pos:position pos:line="31" pos:column="22"/></name></expr></argument>)<pos:position pos:line="31" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt> 
    <comment type="block" pos:line="32" pos:column="5">/* Write the length of the concatenated env string. */</comment>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><call><name pos:line="33" pos:column="9">write<pos:position pos:line="33" pos:column="14"/></name><argument_list pos:line="33" pos:column="14">(<argument><expr><name pos:line="33" pos:column="15">fd<pos:position pos:line="33" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="19">&amp;<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="20">len<pos:position pos:line="33" pos:column="23"/></name></expr></argument>, <argument><expr><sizeof pos:line="33" pos:column="25">sizeof<argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">int<pos:position pos:line="33" pos:column="35"/></name></expr></argument>)<pos:position pos:line="33" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call> <operator pos:line="33" pos:column="38">&lt;<pos:position pos:line="33" pos:column="42"/></operator> <literal type="number" pos:line="33" pos:column="40">0<pos:position pos:line="33" pos:column="41"/></literal></expr>)<pos:position pos:line="33" pos:column="42"/></condition><then pos:line="33" pos:column="42"> <block pos:line="33" pos:column="43">{ 
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">ap_log_rerror<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">APLOG_MARK<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="35">APLOG_ERR<pos:position pos:line="34" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="46">errno<pos:position pos:line="34" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="53">r<pos:position pos:line="34" pos:column="54"/></name></expr></argument>, 
                     <argument><expr><literal type="string" pos:line="35" pos:column="22">"write to cgi daemon process"<pos:position pos:line="35" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="53"/></expr_stmt> 
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="37" pos:column="5">/* Write the concatted env string. */</comment>     
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><call><name pos:line="38" pos:column="9">write<pos:position pos:line="38" pos:column="14"/></name><argument_list pos:line="38" pos:column="14">(<argument><expr><name pos:line="38" pos:column="15">fd<pos:position pos:line="38" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="19">data<pos:position pos:line="38" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="25">len<pos:position pos:line="38" pos:column="28"/></name></expr></argument>)<pos:position pos:line="38" pos:column="29"/></argument_list></call> <operator pos:line="38" pos:column="30">&lt;<pos:position pos:line="38" pos:column="34"/></operator> <literal type="number" pos:line="38" pos:column="32">0<pos:position pos:line="38" pos:column="33"/></literal></expr>)<pos:position pos:line="38" pos:column="34"/></condition><then pos:line="38" pos:column="34"> <block pos:line="38" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">ap_log_rerror<pos:position pos:line="39" pos:column="22"/></name><argument_list pos:line="39" pos:column="22">(<argument><expr><name pos:line="39" pos:column="23">APLOG_MARK<pos:position pos:line="39" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="35">APLOG_ERR<pos:position pos:line="39" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="46">errno<pos:position pos:line="39" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="53">r<pos:position pos:line="39" pos:column="54"/></name></expr></argument>, 
                     <argument><expr><literal type="string" pos:line="40" pos:column="22">"write to cgi daemon process"<pos:position pos:line="40" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="53"/></expr_stmt> 
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="42" pos:column="5">/* Write module_index id value. */</comment>     
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><call><name pos:line="43" pos:column="9">write<pos:position pos:line="43" pos:column="14"/></name><argument_list pos:line="43" pos:column="14">(<argument><expr><name pos:line="43" pos:column="15">fd<pos:position pos:line="43" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="19">&amp;<pos:position pos:line="43" pos:column="24"/></operator><name><name pos:line="43" pos:column="20">core_module<pos:position pos:line="43" pos:column="31"/></name><operator pos:line="43" pos:column="31">.<pos:position pos:line="43" pos:column="32"/></operator><name pos:line="43" pos:column="32">module_index<pos:position pos:line="43" pos:column="44"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="46">sizeof<argument_list pos:line="43" pos:column="52">(<argument><expr><name pos:line="43" pos:column="53">int<pos:position pos:line="43" pos:column="56"/></name></expr></argument>)<pos:position pos:line="43" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call> <operator pos:line="43" pos:column="59">&lt;<pos:position pos:line="43" pos:column="63"/></operator> <literal type="number" pos:line="43" pos:column="61">0<pos:position pos:line="43" pos:column="62"/></literal></expr>)<pos:position pos:line="43" pos:column="63"/></condition><then pos:line="43" pos:column="63"> <block pos:line="43" pos:column="64">{ 
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">ap_log_rerror<pos:position pos:line="44" pos:column="22"/></name><argument_list pos:line="44" pos:column="22">(<argument><expr><name pos:line="44" pos:column="23">APLOG_MARK<pos:position pos:line="44" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="35">APLOG_ERR<pos:position pos:line="44" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="46">errno<pos:position pos:line="44" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="53">r<pos:position pos:line="44" pos:column="54"/></name></expr></argument>, 
                     <argument><expr><literal type="string" pos:line="45" pos:column="22">"write to cgi daemon process"<pos:position pos:line="45" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt> 
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>     
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><name pos:line="47" pos:column="9">suexec_mod<pos:position pos:line="47" pos:column="19"/></name></expr>)<pos:position pos:line="47" pos:column="20"/></condition><then pos:line="47" pos:column="20"> <block pos:line="47" pos:column="21">{
        <decl_stmt><decl><type><name pos:line="48" pos:column="9">suexec_config_t<pos:position pos:line="48" pos:column="24"/></name> <modifier pos:line="48" pos:column="25">*<pos:position pos:line="48" pos:column="26"/></modifier></type><name pos:line="48" pos:column="26">suexec_cfg<pos:position pos:line="48" pos:column="36"/></name> <init pos:line="48" pos:column="37">= <expr><call><name pos:line="48" pos:column="39">ap_get_module_config<pos:position pos:line="48" pos:column="59"/></name><argument_list pos:line="48" pos:column="59">(<argument><expr><name><name pos:line="48" pos:column="60">r<pos:position pos:line="48" pos:column="61"/></name><operator pos:line="48" pos:column="61">-&gt;<pos:position pos:line="48" pos:column="66"/></operator><name pos:line="48" pos:column="63">per_dir_config<pos:position pos:line="48" pos:column="77"/></name></name></expr></argument>,
                                                           <argument><expr><name pos:line="49" pos:column="60">suexec_mod<pos:position pos:line="49" pos:column="70"/></name></expr></argument>)<pos:position pos:line="49" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="49" pos:column="72"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="51" pos:column="9">write<pos:position pos:line="51" pos:column="14"/></name><argument_list pos:line="51" pos:column="14">(<argument><expr><name pos:line="51" pos:column="15">fd<pos:position pos:line="51" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="51" pos:column="19">&amp;<pos:position pos:line="51" pos:column="24"/></operator><name><name pos:line="51" pos:column="20">suexec_mod<pos:position pos:line="51" pos:column="30"/></name><operator pos:line="51" pos:column="30">-&gt;<pos:position pos:line="51" pos:column="35"/></operator><name pos:line="51" pos:column="32">module_index<pos:position pos:line="51" pos:column="44"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="51" pos:column="46">sizeof<argument_list pos:line="51" pos:column="52">(<argument><expr><name pos:line="51" pos:column="53">int<pos:position pos:line="51" pos:column="56"/></name></expr></argument>)<pos:position pos:line="51" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">write<pos:position pos:line="52" pos:column="14"/></name><argument_list pos:line="52" pos:column="14">(<argument><expr><name pos:line="52" pos:column="15">fd<pos:position pos:line="52" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="19">suexec_cfg<pos:position pos:line="52" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="52" pos:column="31">sizeof<argument_list pos:line="52" pos:column="37">(<argument><expr><operator pos:line="52" pos:column="38">*<pos:position pos:line="52" pos:column="39"/></operator><name pos:line="52" pos:column="39">suexec_cfg<pos:position pos:line="52" pos:column="49"/></name></expr></argument>)<pos:position pos:line="52" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="52" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

<cpp:if pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">if<pos:position pos:line="55" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="55" pos:column="5">0<pos:position pos:line="55" pos:column="6"/></literal></expr></cpp:if>
<cpp:ifdef pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">ifdef<pos:position pos:line="56" pos:column="7"/></cpp:directive> <name pos:line="56" pos:column="8">RLIMIT_CPU<pos:position pos:line="56" pos:column="18"/></name></cpp:ifdef> 
    if (conf-&gt;limit_cpu) { 
        len = 1; 
        write(fd, &amp;len, sizeof(int)); 
        write(fd, conf-&gt;limit_cpu, sizeof(struct rlimit)); 
    } 
    else { 
        len = 0; 
        write(fd, &amp;len, sizeof(int)); 
    } 
<cpp:endif pos:line="66" pos:column="1">#<cpp:directive pos:line="66" pos:column="2">endif<pos:position pos:line="66" pos:column="7"/></cpp:directive></cpp:endif> 

<cpp:if pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">if<pos:position pos:line="68" pos:column="4"/></cpp:directive> <expr><call><name pos:line="68" pos:column="5">defined<pos:position pos:line="68" pos:column="12"/></name><argument_list pos:line="68" pos:column="12">(<argument><expr><name pos:line="68" pos:column="13">RLIMIT_DATA<pos:position pos:line="68" pos:column="24"/></name></expr></argument>)<pos:position pos:line="68" pos:column="25"/></argument_list></call> <operator pos:line="68" pos:column="26">||<pos:position pos:line="68" pos:column="28"/></operator> <call><name pos:line="68" pos:column="29">defined<pos:position pos:line="68" pos:column="36"/></name><argument_list pos:line="68" pos:column="36">(<argument><expr><name pos:line="68" pos:column="37">RLIMIT_VMEM<pos:position pos:line="68" pos:column="48"/></name></expr></argument>)<pos:position pos:line="68" pos:column="49"/></argument_list></call> <operator pos:line="68" pos:column="50">||<pos:position pos:line="68" pos:column="52"/></operator> <call><name pos:line="68" pos:column="53">defined<pos:position pos:line="68" pos:column="60"/></name><argument_list pos:line="68" pos:column="60">(<argument><expr><name pos:line="68" pos:column="61">RLIMIT_AS<pos:position pos:line="68" pos:column="70"/></name></expr></argument>)<pos:position pos:line="68" pos:column="71"/></argument_list></call></expr></cpp:if> 
    if (conf-&gt;limit_mem) { 
        len = 1; 
        write(fd, &amp;len, sizeof(int)); 
        write(fd, conf-&gt;limit_mem, sizeof(struct rlimit)); 
    } 
    else { 
        len = 0; 
        write(fd, &amp;len, sizeof(int)); 
    } 
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif> 
  
<cpp:ifdef pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">ifdef<pos:position pos:line="80" pos:column="7"/></cpp:directive> <name pos:line="80" pos:column="8">RLIMIT_NPROC<pos:position pos:line="80" pos:column="20"/></name></cpp:ifdef> 
    if (conf-&gt;limit_nproc) { 
        len = 1; 
        write(fd, &amp;len, sizeof(int)); 
        write(fd, conf-&gt;limit_nproc, sizeof(struct rlimit)); 
    } 
    else { 
        len = 0; 
        write(fd, &amp;len, sizeof(int)); 
    } 
<cpp:endif pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">endif<pos:position pos:line="90" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">endif<pos:position pos:line="91" pos:column="7"/></cpp:directive></cpp:endif> 
   <comment type="block" pos:line="92" pos:column="4">/* send a minimal notes table */</comment>
   <expr_stmt><expr><name pos:line="93" pos:column="4">data<pos:position pos:line="93" pos:column="8"/></name>  <operator pos:line="93" pos:column="10">=<pos:position pos:line="93" pos:column="11"/></operator> <operator pos:line="93" pos:column="12">(<pos:position pos:line="93" pos:column="13"/></operator><name pos:line="93" pos:column="13">char<pos:position pos:line="93" pos:column="17"/></name> <operator pos:line="93" pos:column="18">*<pos:position pos:line="93" pos:column="19"/></operator><operator pos:line="93" pos:column="19">)<pos:position pos:line="93" pos:column="20"/></operator> <call><name pos:line="93" pos:column="21">apr_table_get<pos:position pos:line="93" pos:column="34"/></name><argument_list pos:line="93" pos:column="34">(<argument><expr><name><name pos:line="93" pos:column="35">r<pos:position pos:line="93" pos:column="36"/></name><operator pos:line="93" pos:column="36">-&gt;<pos:position pos:line="93" pos:column="41"/></operator><name pos:line="93" pos:column="38">notes<pos:position pos:line="93" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="45">"mod_userdir_user"<pos:position pos:line="93" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="65"/></expr_stmt>
   <if pos:line="94" pos:column="4">if <condition pos:line="94" pos:column="7">(<expr><name pos:line="94" pos:column="8">data<pos:position pos:line="94" pos:column="12"/></name> <operator pos:line="94" pos:column="13">!=<pos:position pos:line="94" pos:column="15"/></operator> <name pos:line="94" pos:column="16">NULL<pos:position pos:line="94" pos:column="20"/></name></expr>)<pos:position pos:line="94" pos:column="21"/></condition><then pos:line="94" pos:column="21"> <block pos:line="94" pos:column="22">{
       <expr_stmt><expr><name pos:line="95" pos:column="8">len<pos:position pos:line="95" pos:column="11"/></name> <operator pos:line="95" pos:column="12">=<pos:position pos:line="95" pos:column="13"/></operator> <call><name pos:line="95" pos:column="14">strlen<pos:position pos:line="95" pos:column="20"/></name><argument_list pos:line="95" pos:column="20">(<argument><expr><name pos:line="95" pos:column="21">data<pos:position pos:line="95" pos:column="25"/></name></expr></argument>)<pos:position pos:line="95" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="27"/></expr_stmt>
       <expr_stmt><expr><call><name pos:line="96" pos:column="8">write<pos:position pos:line="96" pos:column="13"/></name><argument_list pos:line="96" pos:column="13">(<argument><expr><name pos:line="96" pos:column="14">fd<pos:position pos:line="96" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="96" pos:column="18">&amp;<pos:position pos:line="96" pos:column="23"/></operator><name pos:line="96" pos:column="19">len<pos:position pos:line="96" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="96" pos:column="24">sizeof<argument_list pos:line="96" pos:column="30">(<argument><expr><name pos:line="96" pos:column="31">len<pos:position pos:line="96" pos:column="34"/></name></expr></argument>)<pos:position pos:line="96" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="96" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="37"/></expr_stmt>
       <expr_stmt><expr><call><name pos:line="97" pos:column="8">write<pos:position pos:line="97" pos:column="13"/></name><argument_list pos:line="97" pos:column="13">(<argument><expr><name pos:line="97" pos:column="14">fd<pos:position pos:line="97" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="18">data<pos:position pos:line="97" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="24">len<pos:position pos:line="97" pos:column="27"/></name></expr></argument>)<pos:position pos:line="97" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="29"/></expr_stmt>
   }<pos:position pos:line="98" pos:column="5"/></block></then>
   <else pos:line="99" pos:column="4">else <block pos:line="99" pos:column="9">{
       <expr_stmt><expr><name pos:line="100" pos:column="8">len<pos:position pos:line="100" pos:column="11"/></name> <operator pos:line="100" pos:column="12">=<pos:position pos:line="100" pos:column="13"/></operator> <literal type="number" pos:line="100" pos:column="14">0<pos:position pos:line="100" pos:column="15"/></literal></expr>;<pos:position pos:line="100" pos:column="16"/></expr_stmt>
       <expr_stmt><expr><call><name pos:line="101" pos:column="8">write<pos:position pos:line="101" pos:column="13"/></name><argument_list pos:line="101" pos:column="13">(<argument><expr><name pos:line="101" pos:column="14">fd<pos:position pos:line="101" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="18">&amp;<pos:position pos:line="101" pos:column="23"/></operator><name pos:line="101" pos:column="19">len<pos:position pos:line="101" pos:column="22"/></name></expr></argument>, <argument><expr><sizeof pos:line="101" pos:column="24">sizeof<argument_list pos:line="101" pos:column="30">(<argument><expr><name pos:line="101" pos:column="31">len<pos:position pos:line="101" pos:column="34"/></name></expr></argument>)<pos:position pos:line="101" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="101" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="37"/></expr_stmt>
   }<pos:position pos:line="102" pos:column="5"/></block></else></if>
}<pos:position pos:line="103" pos:column="2"/></block></function></unit>
