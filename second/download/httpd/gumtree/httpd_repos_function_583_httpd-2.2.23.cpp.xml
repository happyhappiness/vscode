<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_583_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">unique_id_child_init<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">apr_pool_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">p<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">server_rec<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">s<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">pid_t<pos:position pos:line="3" pos:column="10"/></name></type> <name pos:line="3" pos:column="11">pid<pos:position pos:line="3" pos:column="14"/></name></decl>;<pos:position pos:line="3" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_time_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">tv<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/*
     * Note that we use the pid because it's possible that on the same
     * physical machine there are multiple servers (i.e. using Listen). But
     * it's guaranteed that none of them will share the same pids between
     * children.
     *
     * XXX: for multithread this needs to use a pid/tid combo and probably
     * needs to be expanded to 32 bits
     */</comment>
    <expr_stmt><expr><name pos:line="15" pos:column="5">pid<pos:position pos:line="15" pos:column="8"/></name> <operator pos:line="15" pos:column="9">=<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">getpid<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">()<pos:position pos:line="15" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="16" pos:column="5">cur_unique_id<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">.<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="19">pid<pos:position pos:line="16" pos:column="22"/></name></name> <operator pos:line="16" pos:column="23">=<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">pid<pos:position pos:line="16" pos:column="28"/></name></expr>;<pos:position pos:line="16" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="18" pos:column="5">/*
     * Test our assumption that the pid is 32-bits.  It's possible that
     * 64-bit machines will declare pid_t to be 64 bits but only use 32
     * of them.  It would have been really nice to test this during
     * global_init ... but oh well.
     */</comment>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">(<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">pid_t<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">)<pos:position pos:line="24" pos:column="16"/></operator><name><name pos:line="24" pos:column="16">cur_unique_id<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">.<pos:position pos:line="24" pos:column="30"/></operator><name pos:line="24" pos:column="30">pid<pos:position pos:line="24" pos:column="33"/></name></name> <operator pos:line="24" pos:column="34">!=<pos:position pos:line="24" pos:column="36"/></operator> <name pos:line="24" pos:column="37">pid<pos:position pos:line="24" pos:column="40"/></name></expr>)<pos:position pos:line="24" pos:column="41"/></condition><then pos:line="24" pos:column="41"> <block pos:line="24" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">ap_log_error<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">APLOG_MARK<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">APLOG_CRIT<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="46">0<pos:position pos:line="25" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="49">s<pos:position pos:line="25" pos:column="50"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="26" pos:column="21">"oh no! pids are greater than 32-bits!  I'm broken!"<pos:position pos:line="26" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="29" pos:column="5">cur_unique_id<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">.<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">in_addr<pos:position pos:line="29" pos:column="26"/></name></name> <operator pos:line="29" pos:column="27">=<pos:position pos:line="29" pos:column="28"/></operator> <name pos:line="29" pos:column="29">global_in_addr<pos:position pos:line="29" pos:column="43"/></name></expr>;<pos:position pos:line="29" pos:column="44"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/*
     * If we use 0 as the initial counter we have a little less protection
     * against restart problems, and a little less protection against a clock
     * going backwards in time.
     */</comment>
    <expr_stmt><expr><name pos:line="36" pos:column="5">tv<pos:position pos:line="36" pos:column="7"/></name> <operator pos:line="36" pos:column="8">=<pos:position pos:line="36" pos:column="9"/></operator> <call><name pos:line="36" pos:column="10">apr_time_now<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">()<pos:position pos:line="36" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="25"/></expr_stmt>
    <comment type="block" pos:line="37" pos:column="5">/* Some systems have very low variance on the low end of their system
     * counter, defend against that.
     */</comment>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">cur_unique_id<pos:position pos:line="40" pos:column="18"/></name><operator pos:line="40" pos:column="18">.<pos:position pos:line="40" pos:column="19"/></operator><name pos:line="40" pos:column="19">counter<pos:position pos:line="40" pos:column="26"/></name></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <call pos:line="40" pos:column="29">(<name pos:line="40" pos:column="30">unsigned<pos:position pos:line="40" pos:column="38"/></name> <name pos:line="40" pos:column="39">short<pos:position pos:line="40" pos:column="44"/></name>)<argument_list pos:line="40" pos:column="45">(<argument><expr><call><name pos:line="40" pos:column="46">apr_time_usec<pos:position pos:line="40" pos:column="59"/></name><argument_list pos:line="40" pos:column="59">(<argument><expr><name pos:line="40" pos:column="60">tv<pos:position pos:line="40" pos:column="62"/></name></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call> <operator pos:line="40" pos:column="64">/<pos:position pos:line="40" pos:column="65"/></operator> <literal type="number" pos:line="40" pos:column="66">10<pos:position pos:line="40" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="70"/></expr_stmt>

    <comment type="block" pos:line="42" pos:column="5">/*
     * We must always use network ordering for these bytes, so that
     * identifiers are comparable between machines of different byte
     * orderings.  Note in_addr is already in network order.
     */</comment>
    <expr_stmt><expr><name><name pos:line="47" pos:column="5">cur_unique_id<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">.<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="19">pid<pos:position pos:line="47" pos:column="22"/></name></name> <operator pos:line="47" pos:column="23">=<pos:position pos:line="47" pos:column="24"/></operator> <call><name pos:line="47" pos:column="25">htonl<pos:position pos:line="47" pos:column="30"/></name><argument_list pos:line="47" pos:column="30">(<argument><expr><name><name pos:line="47" pos:column="31">cur_unique_id<pos:position pos:line="47" pos:column="44"/></name><operator pos:line="47" pos:column="44">.<pos:position pos:line="47" pos:column="45"/></operator><name pos:line="47" pos:column="45">pid<pos:position pos:line="47" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="48" pos:column="5">cur_unique_id<pos:position pos:line="48" pos:column="18"/></name><operator pos:line="48" pos:column="18">.<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="19">counter<pos:position pos:line="48" pos:column="26"/></name></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <call><name pos:line="48" pos:column="29">htons<pos:position pos:line="48" pos:column="34"/></name><argument_list pos:line="48" pos:column="34">(<argument><expr><name><name pos:line="48" pos:column="35">cur_unique_id<pos:position pos:line="48" pos:column="48"/></name><operator pos:line="48" pos:column="48">.<pos:position pos:line="48" pos:column="49"/></operator><name pos:line="48" pos:column="49">counter<pos:position pos:line="48" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="58"/></expr_stmt>
}<pos:position pos:line="49" pos:column="2"/></block></function></unit>
