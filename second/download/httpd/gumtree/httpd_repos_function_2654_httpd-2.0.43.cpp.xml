<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2654_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">pool_bucket_destroy<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">void<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">data<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_bucket_pool<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">p<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name pos:line="3" pos:column="26">data<pos:position pos:line="3" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>

    <comment type="block" pos:line="5" pos:column="5">/* If the pool is cleaned up before the last reference goes
     * away, the data is really now on the heap; heap_destroy() takes
     * over.  free() in heap_destroy() thinks it's freeing
     * an apr_bucket_heap, when in reality it's freeing the whole
     * apr_bucket_pool for us.
     */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">p<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">pool<pos:position pos:line="11" pos:column="16"/></name></name></expr>)<pos:position pos:line="11" pos:column="17"/></condition><then pos:line="11" pos:column="17"> <block pos:line="11" pos:column="18">{
        <comment type="block" pos:line="12" pos:column="9">/* the shared resource is still in the pool
         * because the pool has not been cleaned up yet
         */</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">apr_bucket_shared_destroy<pos:position pos:line="15" pos:column="38"/></name><argument_list pos:line="15" pos:column="38">(<argument><expr><name pos:line="15" pos:column="39">p<pos:position pos:line="15" pos:column="40"/></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42"> <block pos:line="15" pos:column="43">{
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">apr_pool_cleanup_kill<pos:position pos:line="16" pos:column="34"/></name><argument_list pos:line="16" pos:column="34">(<argument><expr><name><name pos:line="16" pos:column="35">p<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">pool<pos:position pos:line="16" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="44">p<pos:position pos:line="16" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="47">pool_bucket_cleanup<pos:position pos:line="16" pos:column="66"/></name></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="68"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">apr_bucket_free<pos:position pos:line="17" pos:column="28"/></name><argument_list pos:line="17" pos:column="28">(<argument><expr><name pos:line="17" pos:column="29">p<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></then>
    <else pos:line="20" pos:column="5">else <block pos:line="20" pos:column="10">{
        <comment type="block" pos:line="21" pos:column="9">/* the shared resource is no longer in the pool, it's
         * on the heap, but this reference still thinks it's a pool
         * bucket.  we should just go ahead and pass control to
         * heap_destroy() for it since it doesn't know any better.
         */</comment>
        <expr_stmt><expr><call><name><name pos:line="26" pos:column="9">apr_bucket_type_heap<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">.<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">destroy<pos:position pos:line="26" pos:column="37"/></name></name><argument_list pos:line="26" pos:column="37">(<argument><expr><name pos:line="26" pos:column="38">p<pos:position pos:line="26" pos:column="39"/></name></expr></argument>)<pos:position pos:line="26" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="27" pos:column="6"/></block></else></if>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
