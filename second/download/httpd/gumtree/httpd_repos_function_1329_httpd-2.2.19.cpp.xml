<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1329_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">get_req<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">fd<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">request_rec<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">r<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier><modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">argv0<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier><modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier><modifier pos:line="1" pos:column="74">*<pos:position pos:line="1" pos:column="75"/></modifier></type><name pos:line="1" pos:column="75">env<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="2" pos:column="29">cgid_req_t<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">req<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="45"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier><modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">environ<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">core_request_config<pos:position pos:line="6" pos:column="24"/></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">temp_core<pos:position pos:line="6" pos:column="35"/></name></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">void<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier><modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">rconf<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">stat<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="10" pos:column="5">r<pos:position pos:line="10" pos:column="6"/></name><operator pos:line="10" pos:column="6">-&gt;<pos:position pos:line="10" pos:column="11"/></operator><name pos:line="10" pos:column="8">server<pos:position pos:line="10" pos:column="14"/></name></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <call><name pos:line="10" pos:column="17">apr_pcalloc<pos:position pos:line="10" pos:column="28"/></name><argument_list pos:line="10" pos:column="28">(<argument><expr><name><name pos:line="10" pos:column="29">r<pos:position pos:line="10" pos:column="30"/></name><operator pos:line="10" pos:column="30">-&gt;<pos:position pos:line="10" pos:column="35"/></operator><name pos:line="10" pos:column="32">pool<pos:position pos:line="10" pos:column="36"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="38">sizeof<argument_list pos:line="10" pos:column="44">(<argument><expr><name pos:line="10" pos:column="45">server_rec<pos:position pos:line="10" pos:column="55"/></name></expr></argument>)<pos:position pos:line="10" pos:column="56"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="58"/></expr_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* read the request header */</comment>
    <expr_stmt><expr><name pos:line="13" pos:column="5">stat<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <call><name pos:line="13" pos:column="12">sock_read<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">fd<pos:position pos:line="13" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="26">req<pos:position pos:line="13" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="13" pos:column="31">sizeof<argument_list pos:line="13" pos:column="37">(<argument><expr><operator pos:line="13" pos:column="38">*<pos:position pos:line="13" pos:column="39"/></operator><name pos:line="13" pos:column="39">req<pos:position pos:line="13" pos:column="42"/></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="45"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">stat<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">!=<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">APR_SUCCESS<pos:position pos:line="14" pos:column="28"/></name></expr>)<pos:position pos:line="14" pos:column="29"/></condition><then pos:line="14" pos:column="29"> <block pos:line="14" pos:column="30">{
        <return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">stat<pos:position pos:line="15" pos:column="20"/></name></expr>;<pos:position pos:line="15" pos:column="21"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="17" pos:column="5">r<pos:position pos:line="17" pos:column="6"/></name><operator pos:line="17" pos:column="6">-&gt;<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="8">server<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">loglevel<pos:position pos:line="17" pos:column="24"/></name></name> <operator pos:line="17" pos:column="25">=<pos:position pos:line="17" pos:column="26"/></operator> <name><name pos:line="17" pos:column="27">req<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">loglevel<pos:position pos:line="17" pos:column="40"/></name></name></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">req<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">req_type<pos:position pos:line="18" pos:column="22"/></name></name> <operator pos:line="18" pos:column="23">==<pos:position pos:line="18" pos:column="25"/></operator> <name pos:line="18" pos:column="26">GETPID_REQ<pos:position pos:line="18" pos:column="36"/></name></expr>)<pos:position pos:line="18" pos:column="37"/></condition><then pos:line="18" pos:column="37"> <block pos:line="18" pos:column="38">{
        <comment type="block" pos:line="19" pos:column="9">/* no more data sent for this request */</comment>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">APR_SUCCESS<pos:position pos:line="20" pos:column="27"/></name></expr>;<pos:position pos:line="20" pos:column="28"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="23" pos:column="5">/* handle module indexes and such */</comment>
    <expr_stmt><expr><name pos:line="24" pos:column="5">rconf<pos:position pos:line="24" pos:column="10"/></name> <operator pos:line="24" pos:column="11">=<pos:position pos:line="24" pos:column="12"/></operator> <operator pos:line="24" pos:column="13">(<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">void<pos:position pos:line="24" pos:column="18"/></name> <operator pos:line="24" pos:column="19">*<pos:position pos:line="24" pos:column="20"/></operator><operator pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></operator><operator pos:line="24" pos:column="21">)<pos:position pos:line="24" pos:column="22"/></operator> <call><name pos:line="24" pos:column="23">apr_pcalloc<pos:position pos:line="24" pos:column="34"/></name><argument_list pos:line="24" pos:column="34">(<argument><expr><name><name pos:line="24" pos:column="35">r<pos:position pos:line="24" pos:column="36"/></name><operator pos:line="24" pos:column="36">-&gt;<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="38">pool<pos:position pos:line="24" pos:column="42"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="44">sizeof<argument_list pos:line="24" pos:column="50">(<argument><expr><name pos:line="24" pos:column="51">void<pos:position pos:line="24" pos:column="55"/></name> <operator pos:line="24" pos:column="56">*<pos:position pos:line="24" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="58"/></argument_list></sizeof> <operator pos:line="24" pos:column="59">*<pos:position pos:line="24" pos:column="60"/></operator> <operator pos:line="24" pos:column="61">(<pos:position pos:line="24" pos:column="62"/></operator><name pos:line="24" pos:column="62">total_modules<pos:position pos:line="24" pos:column="75"/></name> <operator pos:line="24" pos:column="76">+<pos:position pos:line="24" pos:column="77"/></operator> <name pos:line="24" pos:column="78">DYNAMIC_MODULE_LIMIT<pos:position pos:line="24" pos:column="98"/></name><operator pos:line="24" pos:column="98">)<pos:position pos:line="24" pos:column="99"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="100"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="101"/></expr_stmt>

    <expr_stmt><expr><name pos:line="26" pos:column="5">temp_core<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <operator pos:line="26" pos:column="17">(<pos:position pos:line="26" pos:column="18"/></operator><name pos:line="26" pos:column="18">core_request_config<pos:position pos:line="26" pos:column="37"/></name> <operator pos:line="26" pos:column="38">*<pos:position pos:line="26" pos:column="39"/></operator><operator pos:line="26" pos:column="39">)<pos:position pos:line="26" pos:column="40"/></operator><call><name pos:line="26" pos:column="40">apr_palloc<pos:position pos:line="26" pos:column="50"/></name><argument_list pos:line="26" pos:column="50">(<argument><expr><name><name pos:line="26" pos:column="51">r<pos:position pos:line="26" pos:column="52"/></name><operator pos:line="26" pos:column="52">-&gt;<pos:position pos:line="26" pos:column="57"/></operator><name pos:line="26" pos:column="54">pool<pos:position pos:line="26" pos:column="58"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="26" pos:column="60">sizeof<argument_list pos:line="26" pos:column="66">(<argument><expr><name pos:line="26" pos:column="67">core_module<pos:position pos:line="26" pos:column="78"/></name></expr></argument>)<pos:position pos:line="26" pos:column="79"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="26" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="81"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">rconf<pos:position pos:line="27" pos:column="10"/></name><index pos:line="27" pos:column="10">[<expr><name><name pos:line="27" pos:column="11">req<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">-&gt;<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="16">core_module_index<pos:position pos:line="27" pos:column="33"/></name></name></expr>]<pos:position pos:line="27" pos:column="34"/></index></name> <operator pos:line="27" pos:column="35">=<pos:position pos:line="27" pos:column="36"/></operator> <operator pos:line="27" pos:column="37">(<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="38">void<pos:position pos:line="27" pos:column="42"/></name> <operator pos:line="27" pos:column="43">*<pos:position pos:line="27" pos:column="44"/></operator><operator pos:line="27" pos:column="44">)<pos:position pos:line="27" pos:column="45"/></operator><name pos:line="27" pos:column="45">temp_core<pos:position pos:line="27" pos:column="54"/></name></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="28" pos:column="5">r<pos:position pos:line="28" pos:column="6"/></name><operator pos:line="28" pos:column="6">-&gt;<pos:position pos:line="28" pos:column="11"/></operator><name pos:line="28" pos:column="8">request_config<pos:position pos:line="28" pos:column="22"/></name></name> <operator pos:line="28" pos:column="23">=<pos:position pos:line="28" pos:column="24"/></operator> <operator pos:line="28" pos:column="25">(<pos:position pos:line="28" pos:column="26"/></operator><name pos:line="28" pos:column="26">ap_conf_vector_t<pos:position pos:line="28" pos:column="42"/></name> <operator pos:line="28" pos:column="43">*<pos:position pos:line="28" pos:column="44"/></operator><operator pos:line="28" pos:column="44">)<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="45">rconf<pos:position pos:line="28" pos:column="50"/></name></expr>;<pos:position pos:line="28" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">ap_set_module_config<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><name><name pos:line="29" pos:column="26">r<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">-&gt;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="29">request_config<pos:position pos:line="29" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="45">&amp;<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="46">cgid_module<pos:position pos:line="29" pos:column="57"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="59">(<pos:position pos:line="29" pos:column="60"/></operator><name pos:line="29" pos:column="60">void<pos:position pos:line="29" pos:column="64"/></name> <operator pos:line="29" pos:column="65">*<pos:position pos:line="29" pos:column="66"/></operator><operator pos:line="29" pos:column="66">)<pos:position pos:line="29" pos:column="67"/></operator><operator pos:line="29" pos:column="67">&amp;<pos:position pos:line="29" pos:column="72"/></operator><name><name pos:line="29" pos:column="68">req<pos:position pos:line="29" pos:column="71"/></name><operator pos:line="29" pos:column="71">-&gt;<pos:position pos:line="29" pos:column="76"/></operator><name pos:line="29" pos:column="73">ugid<pos:position pos:line="29" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="79"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* Read the filename, argv0, uri, and args */</comment>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">r<pos:position pos:line="32" pos:column="6"/></name><operator pos:line="32" pos:column="6">-&gt;<pos:position pos:line="32" pos:column="11"/></operator><name pos:line="32" pos:column="8">filename<pos:position pos:line="32" pos:column="16"/></name></name> <operator pos:line="32" pos:column="17">=<pos:position pos:line="32" pos:column="18"/></operator> <call><name pos:line="32" pos:column="19">apr_pcalloc<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name><name pos:line="32" pos:column="31">r<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">-&gt;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="34">pool<pos:position pos:line="32" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="40">req<pos:position pos:line="32" pos:column="43"/></name><operator pos:line="32" pos:column="43">-&gt;<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="45">filename_len<pos:position pos:line="32" pos:column="57"/></name></name> <operator pos:line="32" pos:column="58">+<pos:position pos:line="32" pos:column="59"/></operator> <literal type="number" pos:line="32" pos:column="60">1<pos:position pos:line="32" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="33" pos:column="5">*<pos:position pos:line="33" pos:column="6"/></operator><name pos:line="33" pos:column="6">argv0<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <call><name pos:line="33" pos:column="14">apr_pcalloc<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name><name pos:line="33" pos:column="26">r<pos:position pos:line="33" pos:column="27"/></name><operator pos:line="33" pos:column="27">-&gt;<pos:position pos:line="33" pos:column="32"/></operator><name pos:line="33" pos:column="29">pool<pos:position pos:line="33" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="35">req<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">-&gt;<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="40">argv0_len<pos:position pos:line="33" pos:column="49"/></name></name> <operator pos:line="33" pos:column="50">+<pos:position pos:line="33" pos:column="51"/></operator> <literal type="number" pos:line="33" pos:column="52">1<pos:position pos:line="33" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">r<pos:position pos:line="34" pos:column="6"/></name><operator pos:line="34" pos:column="6">-&gt;<pos:position pos:line="34" pos:column="11"/></operator><name pos:line="34" pos:column="8">uri<pos:position pos:line="34" pos:column="11"/></name></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <call><name pos:line="34" pos:column="14">apr_pcalloc<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name><name pos:line="34" pos:column="26">r<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-&gt;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="29">pool<pos:position pos:line="34" pos:column="33"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="35">req<pos:position pos:line="34" pos:column="38"/></name><operator pos:line="34" pos:column="38">-&gt;<pos:position pos:line="34" pos:column="43"/></operator><name pos:line="34" pos:column="40">uri_len<pos:position pos:line="34" pos:column="47"/></name></name> <operator pos:line="34" pos:column="48">+<pos:position pos:line="34" pos:column="49"/></operator> <literal type="number" pos:line="34" pos:column="50">1<pos:position pos:line="34" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">(<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">stat<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <call><name pos:line="35" pos:column="17">sock_read<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">fd<pos:position pos:line="35" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="31">r<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">-&gt;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="34">filename<pos:position pos:line="35" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="35" pos:column="44">req<pos:position pos:line="35" pos:column="47"/></name><operator pos:line="35" pos:column="47">-&gt;<pos:position pos:line="35" pos:column="52"/></operator><name pos:line="35" pos:column="49">filename_len<pos:position pos:line="35" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></call><operator pos:line="35" pos:column="62">)<pos:position pos:line="35" pos:column="63"/></operator> <operator pos:line="35" pos:column="64">!=<pos:position pos:line="35" pos:column="66"/></operator> <name pos:line="35" pos:column="67">APR_SUCCESS<pos:position pos:line="35" pos:column="78"/></name> <operator pos:line="35" pos:column="79">||<pos:position pos:line="35" pos:column="81"/></operator>
        <operator pos:line="36" pos:column="9">(<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">stat<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">=<pos:position pos:line="36" pos:column="16"/></operator> <call><name pos:line="36" pos:column="17">sock_read<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">fd<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="31">*<pos:position pos:line="36" pos:column="32"/></operator><name pos:line="36" pos:column="32">argv0<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="39">req<pos:position pos:line="36" pos:column="42"/></name><operator pos:line="36" pos:column="42">-&gt;<pos:position pos:line="36" pos:column="47"/></operator><name pos:line="36" pos:column="44">argv0_len<pos:position pos:line="36" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call><operator pos:line="36" pos:column="54">)<pos:position pos:line="36" pos:column="55"/></operator> <operator pos:line="36" pos:column="56">!=<pos:position pos:line="36" pos:column="58"/></operator> <name pos:line="36" pos:column="59">APR_SUCCESS<pos:position pos:line="36" pos:column="70"/></name> <operator pos:line="36" pos:column="71">||<pos:position pos:line="36" pos:column="73"/></operator>
        <operator pos:line="37" pos:column="9">(<pos:position pos:line="37" pos:column="10"/></operator><name pos:line="37" pos:column="10">stat<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <call><name pos:line="37" pos:column="17">sock_read<pos:position pos:line="37" pos:column="26"/></name><argument_list pos:line="37" pos:column="26">(<argument><expr><name pos:line="37" pos:column="27">fd<pos:position pos:line="37" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="31">r<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">-&gt;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="34">uri<pos:position pos:line="37" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="39">req<pos:position pos:line="37" pos:column="42"/></name><operator pos:line="37" pos:column="42">-&gt;<pos:position pos:line="37" pos:column="47"/></operator><name pos:line="37" pos:column="44">uri_len<pos:position pos:line="37" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call><operator pos:line="37" pos:column="52">)<pos:position pos:line="37" pos:column="53"/></operator> <operator pos:line="37" pos:column="54">!=<pos:position pos:line="37" pos:column="56"/></operator> <name pos:line="37" pos:column="57">APR_SUCCESS<pos:position pos:line="37" pos:column="68"/></name></expr>)<pos:position pos:line="37" pos:column="69"/></condition><then pos:line="37" pos:column="69"> <block pos:line="37" pos:column="70">{
        <return pos:line="38" pos:column="9">return <expr><name pos:line="38" pos:column="16">stat<pos:position pos:line="38" pos:column="20"/></name></expr>;<pos:position pos:line="38" pos:column="21"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="41" pos:column="5">r<pos:position pos:line="41" pos:column="6"/></name><operator pos:line="41" pos:column="6">-&gt;<pos:position pos:line="41" pos:column="11"/></operator><name pos:line="41" pos:column="8">args<pos:position pos:line="41" pos:column="12"/></name></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <call><name pos:line="41" pos:column="15">apr_pcalloc<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><name><name pos:line="41" pos:column="27">r<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">-&gt;<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="30">pool<pos:position pos:line="41" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="36">req<pos:position pos:line="41" pos:column="39"/></name><operator pos:line="41" pos:column="39">-&gt;<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="41">args_len<pos:position pos:line="41" pos:column="49"/></name></name> <operator pos:line="41" pos:column="50">+<pos:position pos:line="41" pos:column="51"/></operator> <literal type="number" pos:line="41" pos:column="52">1<pos:position pos:line="41" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="55"/></expr_stmt> <comment type="block" pos:line="41" pos:column="56">/* empty string if no args */</comment>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name><name pos:line="42" pos:column="9">req<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">-&gt;<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="14">args_len<pos:position pos:line="42" pos:column="22"/></name></name></expr>)<pos:position pos:line="42" pos:column="23"/></condition><then pos:line="42" pos:column="23"> <block pos:line="42" pos:column="24">{
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">(<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">stat<pos:position pos:line="43" pos:column="18"/></name> <operator pos:line="43" pos:column="19">=<pos:position pos:line="43" pos:column="20"/></operator> <call><name pos:line="43" pos:column="21">sock_read<pos:position pos:line="43" pos:column="30"/></name><argument_list pos:line="43" pos:column="30">(<argument><expr><name pos:line="43" pos:column="31">fd<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="35">r<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">-&gt;<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="38">args<pos:position pos:line="43" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="44">req<pos:position pos:line="43" pos:column="47"/></name><operator pos:line="43" pos:column="47">-&gt;<pos:position pos:line="43" pos:column="52"/></operator><name pos:line="43" pos:column="49">args_len<pos:position pos:line="43" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="58"/></argument_list></call><operator pos:line="43" pos:column="58">)<pos:position pos:line="43" pos:column="59"/></operator> <operator pos:line="43" pos:column="60">!=<pos:position pos:line="43" pos:column="62"/></operator> <name pos:line="43" pos:column="63">APR_SUCCESS<pos:position pos:line="43" pos:column="74"/></name></expr>)<pos:position pos:line="43" pos:column="75"/></condition><then pos:line="43" pos:column="75"> <block pos:line="43" pos:column="76">{
            <return pos:line="44" pos:column="13">return <expr><name pos:line="44" pos:column="20">stat<pos:position pos:line="44" pos:column="24"/></name></expr>;<pos:position pos:line="44" pos:column="25"/></return>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="48" pos:column="5">/* read the environment variables */</comment>
    <expr_stmt><expr><name pos:line="49" pos:column="5">environ<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <call><name pos:line="49" pos:column="15">apr_pcalloc<pos:position pos:line="49" pos:column="26"/></name><argument_list pos:line="49" pos:column="26">(<argument><expr><name><name pos:line="49" pos:column="27">r<pos:position pos:line="49" pos:column="28"/></name><operator pos:line="49" pos:column="28">-&gt;<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="30">pool<pos:position pos:line="49" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="36">(<pos:position pos:line="49" pos:column="37"/></operator><name><name pos:line="49" pos:column="37">req<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">-&gt;<pos:position pos:line="49" pos:column="45"/></operator><name pos:line="49" pos:column="42">env_count<pos:position pos:line="49" pos:column="51"/></name></name> <operator pos:line="49" pos:column="52">+<pos:position pos:line="49" pos:column="53"/></operator> <literal type="number" pos:line="49" pos:column="54">2<pos:position pos:line="49" pos:column="55"/></literal><operator pos:line="49" pos:column="55">)<pos:position pos:line="49" pos:column="56"/></operator> <operator pos:line="49" pos:column="57">*<pos:position pos:line="49" pos:column="58"/></operator><sizeof pos:line="49" pos:column="58">sizeof<argument_list pos:line="49" pos:column="64">(<argument><expr><name pos:line="49" pos:column="65">char<pos:position pos:line="49" pos:column="69"/></name> <operator pos:line="49" pos:column="70">*<pos:position pos:line="49" pos:column="71"/></operator></expr></argument>)<pos:position pos:line="49" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="74"/></expr_stmt>
    <for pos:line="50" pos:column="5">for <control pos:line="50" pos:column="9">(<init><expr><name pos:line="50" pos:column="10">i<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <literal type="number" pos:line="50" pos:column="14">0<pos:position pos:line="50" pos:column="15"/></literal></expr>;<pos:position pos:line="50" pos:column="16"/></init> <condition><expr><name pos:line="50" pos:column="17">i<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">&lt;<pos:position pos:line="50" pos:column="23"/></operator> <name><name pos:line="50" pos:column="21">req<pos:position pos:line="50" pos:column="24"/></name><operator pos:line="50" pos:column="24">-&gt;<pos:position pos:line="50" pos:column="29"/></operator><name pos:line="50" pos:column="26">env_count<pos:position pos:line="50" pos:column="35"/></name></name></expr>;<pos:position pos:line="50" pos:column="36"/></condition> <incr><expr><name pos:line="50" pos:column="37">i<pos:position pos:line="50" pos:column="38"/></name><operator pos:line="50" pos:column="38">++<pos:position pos:line="50" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="50" pos:column="41"/></control> <block pos:line="50" pos:column="42">{
        <decl_stmt><decl><type><name pos:line="51" pos:column="9">apr_size_t<pos:position pos:line="51" pos:column="19"/></name></type> <name pos:line="51" pos:column="20">curlen<pos:position pos:line="51" pos:column="26"/></name></decl>;<pos:position pos:line="51" pos:column="27"/></decl_stmt>

        <if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><operator pos:line="53" pos:column="13">(<pos:position pos:line="53" pos:column="14"/></operator><name pos:line="53" pos:column="14">stat<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <call><name pos:line="53" pos:column="21">sock_read<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name pos:line="53" pos:column="31">fd<pos:position pos:line="53" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="35">&amp;<pos:position pos:line="53" pos:column="40"/></operator><name pos:line="53" pos:column="36">curlen<pos:position pos:line="53" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="53" pos:column="44">sizeof<argument_list pos:line="53" pos:column="50">(<argument><expr><name pos:line="53" pos:column="51">curlen<pos:position pos:line="53" pos:column="57"/></name></expr></argument>)<pos:position pos:line="53" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="53" pos:column="59"/></argument_list></call><operator pos:line="53" pos:column="59">)<pos:position pos:line="53" pos:column="60"/></operator> <operator pos:line="53" pos:column="61">!=<pos:position pos:line="53" pos:column="63"/></operator> <name pos:line="53" pos:column="64">APR_SUCCESS<pos:position pos:line="53" pos:column="75"/></name></expr>)<pos:position pos:line="53" pos:column="76"/></condition><then pos:line="53" pos:column="76"> <block pos:line="53" pos:column="77">{
            <return pos:line="54" pos:column="13">return <expr><name pos:line="54" pos:column="20">stat<pos:position pos:line="54" pos:column="24"/></name></expr>;<pos:position pos:line="54" pos:column="25"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">environ<pos:position pos:line="56" pos:column="16"/></name><index pos:line="56" pos:column="16">[<expr><name pos:line="56" pos:column="17">i<pos:position pos:line="56" pos:column="18"/></name></expr>]<pos:position pos:line="56" pos:column="19"/></index></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <call><name pos:line="56" pos:column="22">apr_pcalloc<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">(<argument><expr><name><name pos:line="56" pos:column="34">r<pos:position pos:line="56" pos:column="35"/></name><operator pos:line="56" pos:column="35">-&gt;<pos:position pos:line="56" pos:column="40"/></operator><name pos:line="56" pos:column="37">pool<pos:position pos:line="56" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="43">curlen<pos:position pos:line="56" pos:column="49"/></name> <operator pos:line="56" pos:column="50">+<pos:position pos:line="56" pos:column="51"/></operator> <literal type="number" pos:line="56" pos:column="52">1<pos:position pos:line="56" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="55"/></expr_stmt>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><operator pos:line="57" pos:column="13">(<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">stat<pos:position pos:line="57" pos:column="18"/></name> <operator pos:line="57" pos:column="19">=<pos:position pos:line="57" pos:column="20"/></operator> <call><name pos:line="57" pos:column="21">sock_read<pos:position pos:line="57" pos:column="30"/></name><argument_list pos:line="57" pos:column="30">(<argument><expr><name pos:line="57" pos:column="31">fd<pos:position pos:line="57" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="35">environ<pos:position pos:line="57" pos:column="42"/></name><index pos:line="57" pos:column="42">[<expr><name pos:line="57" pos:column="43">i<pos:position pos:line="57" pos:column="44"/></name></expr>]<pos:position pos:line="57" pos:column="45"/></index></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="47">curlen<pos:position pos:line="57" pos:column="53"/></name></expr></argument>)<pos:position pos:line="57" pos:column="54"/></argument_list></call><operator pos:line="57" pos:column="54">)<pos:position pos:line="57" pos:column="55"/></operator> <operator pos:line="57" pos:column="56">!=<pos:position pos:line="57" pos:column="58"/></operator> <name pos:line="57" pos:column="59">APR_SUCCESS<pos:position pos:line="57" pos:column="70"/></name></expr>)<pos:position pos:line="57" pos:column="71"/></condition><then pos:line="57" pos:column="71"> <block pos:line="57" pos:column="72">{
            <return pos:line="58" pos:column="13">return <expr><name pos:line="58" pos:column="20">stat<pos:position pos:line="58" pos:column="24"/></name></expr>;<pos:position pos:line="58" pos:column="25"/></return>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if>
    }<pos:position pos:line="60" pos:column="6"/></block></for>
    <expr_stmt><expr><operator pos:line="61" pos:column="5">*<pos:position pos:line="61" pos:column="6"/></operator><name pos:line="61" pos:column="6">env<pos:position pos:line="61" pos:column="9"/></name> <operator pos:line="61" pos:column="10">=<pos:position pos:line="61" pos:column="11"/></operator> <name pos:line="61" pos:column="12">environ<pos:position pos:line="61" pos:column="19"/></name></expr>;<pos:position pos:line="61" pos:column="20"/></expr_stmt>

<cpp:if pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">if<pos:position pos:line="63" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="63" pos:column="5">0<pos:position pos:line="63" pos:column="6"/></literal></expr></cpp:if>
<cpp:ifdef pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">ifdef<pos:position pos:line="64" pos:column="7"/></cpp:directive> <name pos:line="64" pos:column="8">RLIMIT_CPU<pos:position pos:line="64" pos:column="18"/></name></cpp:ifdef>
    sock_read(fd, &amp;j, sizeof(int));
    if (j) {
        temp_core-&gt;limit_cpu = (struct rlimit *)apr_palloc (sizeof(struct rlimit));
        sock_read(fd, temp_core-&gt;limit_cpu, sizeof(struct rlimit));
    }
    else {
        temp_core-&gt;limit_cpu = NULL;
    }
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="75" pos:column="1">#<cpp:directive pos:line="75" pos:column="2">if<pos:position pos:line="75" pos:column="4"/></cpp:directive> <expr><call><name pos:line="75" pos:column="5">defined<pos:position pos:line="75" pos:column="12"/></name> <argument_list pos:line="75" pos:column="13">(<argument><expr><name pos:line="75" pos:column="14">RLIMIT_DATA<pos:position pos:line="75" pos:column="25"/></name></expr></argument>)<pos:position pos:line="75" pos:column="26"/></argument_list></call> <operator pos:line="75" pos:column="27">||<pos:position pos:line="75" pos:column="29"/></operator> <call><name pos:line="75" pos:column="30">defined<pos:position pos:line="75" pos:column="37"/></name><argument_list pos:line="75" pos:column="37">(<argument><expr><name pos:line="75" pos:column="38">RLIMIT_VMEM<pos:position pos:line="75" pos:column="49"/></name></expr></argument>)<pos:position pos:line="75" pos:column="50"/></argument_list></call> <operator pos:line="75" pos:column="51">||<pos:position pos:line="75" pos:column="53"/></operator> <call><name pos:line="75" pos:column="54">defined<pos:position pos:line="75" pos:column="61"/></name><argument_list pos:line="75" pos:column="61">(<argument><expr><name pos:line="75" pos:column="62">RLIMIT_AS<pos:position pos:line="75" pos:column="71"/></name></expr></argument>)<pos:position pos:line="75" pos:column="72"/></argument_list></call></expr></cpp:if>
    sock_read(fd, &amp;j, sizeof(int));
    if (j) {
        temp_core-&gt;limit_mem = (struct rlimit *)apr_palloc(r-&gt;pool, sizeof(struct rlimit));
        sock_read(fd, temp_core-&gt;limit_mem, sizeof(struct rlimit));
    }
    else {
        temp_core-&gt;limit_mem = NULL;
    }
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">ifdef<pos:position pos:line="86" pos:column="7"/></cpp:directive> <name pos:line="86" pos:column="8">RLIMIT_NPROC<pos:position pos:line="86" pos:column="20"/></name></cpp:ifdef>
    sock_read(fd, &amp;j, sizeof(int));
    if (j) {
        temp_core-&gt;limit_nproc = (struct rlimit *)apr_palloc(r-&gt;pool, sizeof(struct rlimit));
        sock_read(fd, temp_core-&gt;limit_nproc, sizeof(struct rlimit));
    }
    else {
        temp_core-&gt;limit_nproc = NULL;
    }
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">endif<pos:position pos:line="96" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="98" pos:column="5">return <expr><name pos:line="98" pos:column="12">APR_SUCCESS<pos:position pos:line="98" pos:column="23"/></name></expr>;<pos:position pos:line="98" pos:column="24"/></return>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
