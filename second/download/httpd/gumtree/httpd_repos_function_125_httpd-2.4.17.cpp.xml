<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_125_httpd-2.4.17.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier> <specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier></type> <name><name pos:line="1" pos:column="39">argv<pos:position pos:line="1" pos:column="43"/></name><index pos:line="1" pos:column="43">[]<pos:position pos:line="1" pos:column="45"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_file_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type> <name pos:line="3" pos:column="18">outfile<pos:position pos:line="3" pos:column="25"/></name></decl>;<pos:position pos:line="3" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_file_t<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type> <name pos:line="4" pos:column="18">infile<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_getopt_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type> <name pos:line="5" pos:column="20">o<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_pool_t<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type> <name pos:line="6" pos:column="18">pool<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_pool_t<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">pline<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">status<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type> <name pos:line="9" pos:column="18">arg<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type> <name pos:line="10" pos:column="12">stats<pos:position pos:line="10" pos:column="17"/></name> <init pos:line="10" pos:column="18">= <expr><name pos:line="10" pos:column="20">NULL<pos:position pos:line="10" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type> <name pos:line="11" pos:column="12">inbuffer<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type> <name pos:line="12" pos:column="12">outbuffer<pos:position pos:line="12" pos:column="21"/></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">char<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type> <name pos:line="13" pos:column="12">line<pos:position pos:line="13" pos:column="16"/></name></decl>;<pos:position pos:line="13" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">doublelookups<pos:position pos:line="14" pos:column="22"/></name> <init pos:line="14" pos:column="23">= <expr><literal type="number" pos:line="14" pos:column="25">0<pos:position pos:line="14" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><call><name pos:line="16" pos:column="9">apr_app_initialize<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><operator pos:line="16" pos:column="28">&amp;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="29">argc<pos:position pos:line="16" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="35">&amp;<pos:position pos:line="16" pos:column="40"/></operator><name pos:line="16" pos:column="36">argv<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">NULL<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call> <operator pos:line="16" pos:column="48">!=<pos:position pos:line="16" pos:column="50"/></operator> <name pos:line="16" pos:column="51">APR_SUCCESS<pos:position pos:line="16" pos:column="62"/></name></expr>)<pos:position pos:line="16" pos:column="63"/></condition><then pos:line="16" pos:column="63"> <block pos:line="16" pos:column="64">{
        <return pos:line="17" pos:column="9">return <expr><literal type="number" pos:line="17" pos:column="16">1<pos:position pos:line="17" pos:column="17"/></literal></expr>;<pos:position pos:line="17" pos:column="18"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="19" pos:column="5">atexit<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">apr_terminate<pos:position pos:line="19" pos:column="25"/></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">argc<pos:position pos:line="21" pos:column="13"/></name></expr>)<pos:position pos:line="21" pos:column="14"/></condition><then pos:line="21" pos:column="14"> <block pos:line="21" pos:column="15">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">shortname<pos:position pos:line="22" pos:column="18"/></name> <operator pos:line="22" pos:column="19">=<pos:position pos:line="22" pos:column="20"/></operator> <call><name pos:line="22" pos:column="21">apr_filepath_name_get<pos:position pos:line="22" pos:column="42"/></name><argument_list pos:line="22" pos:column="42">(<argument><expr><name><name pos:line="22" pos:column="43">argv<pos:position pos:line="22" pos:column="47"/></name><index pos:line="22" pos:column="47">[<expr><literal type="number" pos:line="22" pos:column="48">0<pos:position pos:line="22" pos:column="49"/></literal></expr>]<pos:position pos:line="22" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="22" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="52"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><call><name pos:line="25" pos:column="9">apr_pool_create<pos:position pos:line="25" pos:column="24"/></name><argument_list pos:line="25" pos:column="24">(<argument><expr><operator pos:line="25" pos:column="25">&amp;<pos:position pos:line="25" pos:column="30"/></operator><name pos:line="25" pos:column="26">pool<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="32">NULL<pos:position pos:line="25" pos:column="36"/></name></expr></argument>)<pos:position pos:line="25" pos:column="37"/></argument_list></call> <operator pos:line="25" pos:column="38">!=<pos:position pos:line="25" pos:column="40"/></operator> <name pos:line="25" pos:column="41">APR_SUCCESS<pos:position pos:line="25" pos:column="52"/></name></expr>)<pos:position pos:line="25" pos:column="53"/></condition><then pos:line="25" pos:column="53"> <block pos:line="25" pos:column="54">{
        <return pos:line="26" pos:column="9">return <expr><literal type="number" pos:line="26" pos:column="16">1<pos:position pos:line="26" pos:column="17"/></literal></expr>;<pos:position pos:line="26" pos:column="18"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">apr_file_open_stderr<pos:position pos:line="28" pos:column="25"/></name><argument_list pos:line="28" pos:column="25">(<argument><expr><operator pos:line="28" pos:column="26">&amp;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="27">errfile<pos:position pos:line="28" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="36">pool<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">apr_getopt_init<pos:position pos:line="29" pos:column="20"/></name><argument_list pos:line="29" pos:column="20">(<argument><expr><operator pos:line="29" pos:column="21">&amp;<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="22">o<pos:position pos:line="29" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="25">pool<pos:position pos:line="29" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="31">argc<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="37">argv<pos:position pos:line="29" pos:column="41"/></name></expr></argument>)<pos:position pos:line="29" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>

    <while pos:line="31" pos:column="5">while <condition pos:line="31" pos:column="11">(<expr><literal type="number" pos:line="31" pos:column="12">1<pos:position pos:line="31" pos:column="13"/></literal></expr>)<pos:position pos:line="31" pos:column="14"/></condition> <block pos:line="31" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="32" pos:column="9">char<pos:position pos:line="32" pos:column="13"/></name></type> <name pos:line="32" pos:column="14">opt<pos:position pos:line="32" pos:column="17"/></name></decl>;<pos:position pos:line="32" pos:column="18"/></decl_stmt>
        <expr_stmt><expr><name pos:line="33" pos:column="9">status<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <call><name pos:line="33" pos:column="18">apr_getopt<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">o<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="32">"s:c"<pos:position pos:line="33" pos:column="37"/></literal></expr></argument>, <argument><expr><operator pos:line="33" pos:column="39">&amp;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="40">opt<pos:position pos:line="33" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="45">&amp;<pos:position pos:line="33" pos:column="50"/></operator><name pos:line="33" pos:column="46">arg<pos:position pos:line="33" pos:column="49"/></name></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">status<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">==<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">APR_EOF<pos:position pos:line="34" pos:column="30"/></name></expr>)<pos:position pos:line="34" pos:column="31"/></condition><then pos:line="34" pos:column="31"> <block pos:line="34" pos:column="32">{
            <break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break>
        }<pos:position pos:line="36" pos:column="10"/></block></then>
        <elseif pos:line="37" pos:column="9">else <if pos:line="37" pos:column="14">if <condition pos:line="37" pos:column="17">(<expr><name pos:line="37" pos:column="18">status<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">!=<pos:position pos:line="37" pos:column="27"/></operator> <name pos:line="37" pos:column="28">APR_SUCCESS<pos:position pos:line="37" pos:column="39"/></name></expr>)<pos:position pos:line="37" pos:column="40"/></condition><then pos:line="37" pos:column="40"> <block pos:line="37" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="38" pos:column="13">usage<pos:position pos:line="38" pos:column="18"/></name><argument_list pos:line="38" pos:column="18">()<pos:position pos:line="38" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if></elseif>
        <else pos:line="40" pos:column="9">else <block pos:line="40" pos:column="14">{
            <switch pos:line="41" pos:column="13">switch <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">opt<pos:position pos:line="41" pos:column="24"/></name></expr>)<pos:position pos:line="41" pos:column="25"/></condition> <block pos:line="41" pos:column="26">{
            <case pos:line="42" pos:column="13">case <expr><literal type="char" pos:line="42" pos:column="18">'c'<pos:position pos:line="42" pos:column="21"/></literal></expr>:<pos:position pos:line="42" pos:column="22"/></case>
                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">doublelookups<pos:position pos:line="43" pos:column="34"/></name></expr>)<pos:position pos:line="43" pos:column="35"/></condition><then pos:line="43" pos:column="35"> <block pos:line="43" pos:column="36">{
                    <expr_stmt><expr><call><name pos:line="44" pos:column="21">usage<pos:position pos:line="44" pos:column="26"/></name><argument_list pos:line="44" pos:column="26">()<pos:position pos:line="44" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="46" pos:column="17">doublelookups<pos:position pos:line="46" pos:column="30"/></name> <operator pos:line="46" pos:column="31">=<pos:position pos:line="46" pos:column="32"/></operator> <literal type="number" pos:line="46" pos:column="33">1<pos:position pos:line="46" pos:column="34"/></literal></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>
                <break pos:line="47" pos:column="17">break;<pos:position pos:line="47" pos:column="23"/></break>
            <case pos:line="48" pos:column="13">case <expr><literal type="char" pos:line="48" pos:column="18">'s'<pos:position pos:line="48" pos:column="21"/></literal></expr>:<pos:position pos:line="48" pos:column="22"/></case>
                <if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">stats<pos:position pos:line="49" pos:column="26"/></name></expr>)<pos:position pos:line="49" pos:column="27"/></condition><then pos:line="49" pos:column="27"> <block pos:line="49" pos:column="28">{
                    <expr_stmt><expr><call><name pos:line="50" pos:column="21">usage<pos:position pos:line="50" pos:column="26"/></name><argument_list pos:line="50" pos:column="26">()<pos:position pos:line="50" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="51" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="52" pos:column="17">stats<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <call><name pos:line="52" pos:column="25">apr_pstrdup<pos:position pos:line="52" pos:column="36"/></name><argument_list pos:line="52" pos:column="36">(<argument><expr><name pos:line="52" pos:column="37">pool<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="43">arg<pos:position pos:line="52" pos:column="46"/></name></expr></argument>)<pos:position pos:line="52" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="48"/></expr_stmt>
                <break pos:line="53" pos:column="17">break;<pos:position pos:line="53" pos:column="23"/></break>
            }<pos:position pos:line="54" pos:column="14"/></block></switch> <comment type="block" pos:line="54" pos:column="15">/* switch */</comment>
        }<pos:position pos:line="55" pos:column="10"/></block></else></if> <comment type="block" pos:line="55" pos:column="11">/* else */</comment>
    }<pos:position pos:line="56" pos:column="6"/></block></while> <comment type="block" pos:line="56" pos:column="7">/* while */</comment>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">apr_file_open_stdout<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><operator pos:line="58" pos:column="26">&amp;<pos:position pos:line="58" pos:column="31"/></operator><name pos:line="58" pos:column="27">outfile<pos:position pos:line="58" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="36">pool<pos:position pos:line="58" pos:column="40"/></name></expr></argument>)<pos:position pos:line="58" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="59" pos:column="5">apr_file_open_stdin<pos:position pos:line="59" pos:column="24"/></name><argument_list pos:line="59" pos:column="24">(<argument><expr><operator pos:line="59" pos:column="25">&amp;<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="26">infile<pos:position pos:line="59" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="34">pool<pos:position pos:line="59" pos:column="38"/></name></expr></argument>)<pos:position pos:line="59" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="61" pos:column="5">/* Allocate two new 10k file buffers */</comment>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(   <expr><operator pos:line="62" pos:column="12">(<pos:position pos:line="62" pos:column="13"/></operator><name pos:line="62" pos:column="13">outbuffer<pos:position pos:line="62" pos:column="22"/></name> <operator pos:line="62" pos:column="23">=<pos:position pos:line="62" pos:column="24"/></operator> <call><name pos:line="62" pos:column="25">apr_palloc<pos:position pos:line="62" pos:column="35"/></name><argument_list pos:line="62" pos:column="35">(<argument><expr><name pos:line="62" pos:column="36">pool<pos:position pos:line="62" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="42">WRITE_BUF_SIZE<pos:position pos:line="62" pos:column="56"/></name></expr></argument>)<pos:position pos:line="62" pos:column="57"/></argument_list></call><operator pos:line="62" pos:column="57">)<pos:position pos:line="62" pos:column="58"/></operator> <operator pos:line="62" pos:column="59">==<pos:position pos:line="62" pos:column="61"/></operator> <name pos:line="62" pos:column="62">NULL<pos:position pos:line="62" pos:column="66"/></name>
        <operator pos:line="63" pos:column="9">||<pos:position pos:line="63" pos:column="11"/></operator> <operator pos:line="63" pos:column="12">(<pos:position pos:line="63" pos:column="13"/></operator><name pos:line="63" pos:column="13">inbuffer<pos:position pos:line="63" pos:column="21"/></name>  <operator pos:line="63" pos:column="23">=<pos:position pos:line="63" pos:column="24"/></operator> <call><name pos:line="63" pos:column="25">apr_palloc<pos:position pos:line="63" pos:column="35"/></name><argument_list pos:line="63" pos:column="35">(<argument><expr><name pos:line="63" pos:column="36">pool<pos:position pos:line="63" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="42">READ_BUF_SIZE<pos:position pos:line="63" pos:column="55"/></name></expr></argument>)<pos:position pos:line="63" pos:column="56"/></argument_list></call><operator pos:line="63" pos:column="56">)<pos:position pos:line="63" pos:column="57"/></operator>  <operator pos:line="63" pos:column="59">==<pos:position pos:line="63" pos:column="61"/></operator> <name pos:line="63" pos:column="62">NULL<pos:position pos:line="63" pos:column="66"/></name>
        <operator pos:line="64" pos:column="9">||<pos:position pos:line="64" pos:column="11"/></operator> <operator pos:line="64" pos:column="12">(<pos:position pos:line="64" pos:column="13"/></operator><name pos:line="64" pos:column="13">line<pos:position pos:line="64" pos:column="17"/></name>      <operator pos:line="64" pos:column="23">=<pos:position pos:line="64" pos:column="24"/></operator> <call><name pos:line="64" pos:column="25">apr_palloc<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">(<argument><expr><name pos:line="64" pos:column="36">pool<pos:position pos:line="64" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="42">LINE_BUF_SIZE<pos:position pos:line="64" pos:column="55"/></name></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call><operator pos:line="64" pos:column="56">)<pos:position pos:line="64" pos:column="57"/></operator>  <operator pos:line="64" pos:column="59">==<pos:position pos:line="64" pos:column="61"/></operator> <name pos:line="64" pos:column="62">NULL<pos:position pos:line="64" pos:column="66"/></name></expr>)<pos:position pos:line="64" pos:column="67"/></condition><then pos:line="64" pos:column="67"> <block pos:line="64" pos:column="68">{
        <return pos:line="65" pos:column="9">return <expr><literal type="number" pos:line="65" pos:column="16">1<pos:position pos:line="65" pos:column="17"/></literal></expr>;<pos:position pos:line="65" pos:column="18"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="68" pos:column="5">/* Set the buffers */</comment>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">apr_file_buffer_set<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">infile<pos:position pos:line="69" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="33">inbuffer<pos:position pos:line="69" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="43">READ_BUF_SIZE<pos:position pos:line="69" pos:column="56"/></name></expr></argument>)<pos:position pos:line="69" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">apr_file_buffer_set<pos:position pos:line="70" pos:column="24"/></name><argument_list pos:line="70" pos:column="24">(<argument><expr><name pos:line="70" pos:column="25">outfile<pos:position pos:line="70" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="34">outbuffer<pos:position pos:line="70" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="45">WRITE_BUF_SIZE<pos:position pos:line="70" pos:column="59"/></name></expr></argument>)<pos:position pos:line="70" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="61"/></expr_stmt>

    <expr_stmt><expr><name pos:line="72" pos:column="5">cache<pos:position pos:line="72" pos:column="10"/></name> <operator pos:line="72" pos:column="11">=<pos:position pos:line="72" pos:column="12"/></operator> <call><name pos:line="72" pos:column="13">apr_hash_make<pos:position pos:line="72" pos:column="26"/></name><argument_list pos:line="72" pos:column="26">(<argument><expr><name pos:line="72" pos:column="27">pool<pos:position pos:line="72" pos:column="31"/></name></expr></argument>)<pos:position pos:line="72" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>
    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><call><name pos:line="73" pos:column="9">apr_pool_create<pos:position pos:line="73" pos:column="24"/></name><argument_list pos:line="73" pos:column="24">(<argument><expr><operator pos:line="73" pos:column="25">&amp;<pos:position pos:line="73" pos:column="30"/></operator><name pos:line="73" pos:column="26">pline<pos:position pos:line="73" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="33">pool<pos:position pos:line="73" pos:column="37"/></name></expr></argument>)<pos:position pos:line="73" pos:column="38"/></argument_list></call> <operator pos:line="73" pos:column="39">!=<pos:position pos:line="73" pos:column="41"/></operator> <name pos:line="73" pos:column="42">APR_SUCCESS<pos:position pos:line="73" pos:column="53"/></name></expr>)<pos:position pos:line="73" pos:column="54"/></condition><then pos:line="73" pos:column="54"> <block pos:line="73" pos:column="55">{
        <return pos:line="74" pos:column="9">return <expr><literal type="number" pos:line="74" pos:column="16">1<pos:position pos:line="74" pos:column="17"/></literal></expr>;<pos:position pos:line="74" pos:column="18"/></return>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if>

    <while pos:line="77" pos:column="5">while <condition pos:line="77" pos:column="11">(<expr><call><name pos:line="77" pos:column="12">apr_file_gets<pos:position pos:line="77" pos:column="25"/></name><argument_list pos:line="77" pos:column="25">(<argument><expr><name pos:line="77" pos:column="26">line<pos:position pos:line="77" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="32">LINE_BUF_SIZE<pos:position pos:line="77" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="47">infile<pos:position pos:line="77" pos:column="53"/></name></expr></argument>)<pos:position pos:line="77" pos:column="54"/></argument_list></call> <operator pos:line="77" pos:column="55">==<pos:position pos:line="77" pos:column="57"/></operator> <name pos:line="77" pos:column="58">APR_SUCCESS<pos:position pos:line="77" pos:column="69"/></name></expr>)<pos:position pos:line="77" pos:column="70"/></condition> <block pos:line="77" pos:column="71">{
        <decl_stmt><decl><type><name pos:line="78" pos:column="9">char<pos:position pos:line="78" pos:column="13"/></name> <modifier pos:line="78" pos:column="14">*<pos:position pos:line="78" pos:column="15"/></modifier></type><name pos:line="78" pos:column="15">hostname<pos:position pos:line="78" pos:column="23"/></name></decl>;<pos:position pos:line="78" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="79" pos:column="9">char<pos:position pos:line="79" pos:column="13"/></name> <modifier pos:line="79" pos:column="14">*<pos:position pos:line="79" pos:column="15"/></modifier></type><name pos:line="79" pos:column="15">space<pos:position pos:line="79" pos:column="20"/></name></decl>;<pos:position pos:line="79" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="80" pos:column="9">apr_sockaddr_t<pos:position pos:line="80" pos:column="23"/></name> <modifier pos:line="80" pos:column="24">*<pos:position pos:line="80" pos:column="25"/></modifier></type><name pos:line="80" pos:column="25">ip<pos:position pos:line="80" pos:column="27"/></name></decl>;<pos:position pos:line="80" pos:column="28"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="81" pos:column="9">apr_sockaddr_t<pos:position pos:line="81" pos:column="23"/></name> <modifier pos:line="81" pos:column="24">*<pos:position pos:line="81" pos:column="25"/></modifier></type><name pos:line="81" pos:column="25">ipdouble<pos:position pos:line="81" pos:column="33"/></name></decl>;<pos:position pos:line="81" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="82" pos:column="9">char<pos:position pos:line="82" pos:column="13"/></name></type> <name><name pos:line="82" pos:column="14">dummy<pos:position pos:line="82" pos:column="19"/></name><index pos:line="82" pos:column="19">[]<pos:position pos:line="82" pos:column="21"/></index></name> <init pos:line="82" pos:column="22">= <expr><literal type="string" pos:line="82" pos:column="24">" "<pos:position pos:line="82" pos:column="27"/></literal> <name pos:line="82" pos:column="28">APR_EOL_STR<pos:position pos:line="82" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="82" pos:column="40"/></decl_stmt>

        <if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name><name pos:line="84" pos:column="13">line<pos:position pos:line="84" pos:column="17"/></name><index pos:line="84" pos:column="17">[<expr><literal type="number" pos:line="84" pos:column="18">0<pos:position pos:line="84" pos:column="19"/></literal></expr>]<pos:position pos:line="84" pos:column="20"/></index></name> <operator pos:line="84" pos:column="21">==<pos:position pos:line="84" pos:column="23"/></operator> <literal type="char" pos:line="84" pos:column="24">'\0'<pos:position pos:line="84" pos:column="28"/></literal></expr>)<pos:position pos:line="84" pos:column="29"/></condition><then pos:line="84" pos:column="29"> <block pos:line="84" pos:column="30">{
            <continue pos:line="85" pos:column="13">continue;<pos:position pos:line="85" pos:column="22"/></continue>
        }<pos:position pos:line="86" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="88" pos:column="9">/* Count our log entries */</comment>
        <expr_stmt><expr><name pos:line="89" pos:column="9">entries<pos:position pos:line="89" pos:column="16"/></name><operator pos:line="89" pos:column="16">++<pos:position pos:line="89" pos:column="18"/></operator></expr>;<pos:position pos:line="89" pos:column="19"/></expr_stmt>

        <comment type="block" pos:line="91" pos:column="9">/* Check if this could even be an IP address */</comment>
        <if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><operator pos:line="92" pos:column="13">!<pos:position pos:line="92" pos:column="14"/></operator><call><name pos:line="92" pos:column="14">apr_isxdigit<pos:position pos:line="92" pos:column="26"/></name><argument_list pos:line="92" pos:column="26">(<argument><expr><name><name pos:line="92" pos:column="27">line<pos:position pos:line="92" pos:column="31"/></name><index pos:line="92" pos:column="31">[<expr><literal type="number" pos:line="92" pos:column="32">0<pos:position pos:line="92" pos:column="33"/></literal></expr>]<pos:position pos:line="92" pos:column="34"/></index></name></expr></argument>)<pos:position pos:line="92" pos:column="35"/></argument_list></call> <operator pos:line="92" pos:column="36">&amp;&amp;<pos:position pos:line="92" pos:column="46"/></operator> <name><name pos:line="92" pos:column="39">line<pos:position pos:line="92" pos:column="43"/></name><index pos:line="92" pos:column="43">[<expr><literal type="number" pos:line="92" pos:column="44">0<pos:position pos:line="92" pos:column="45"/></literal></expr>]<pos:position pos:line="92" pos:column="46"/></index></name> <operator pos:line="92" pos:column="47">!=<pos:position pos:line="92" pos:column="49"/></operator> <literal type="char" pos:line="92" pos:column="50">':'<pos:position pos:line="92" pos:column="53"/></literal></expr>)<pos:position pos:line="92" pos:column="54"/></condition><then pos:line="92" pos:column="54"> <block pos:line="92" pos:column="55">{
            <expr_stmt><expr><name pos:line="93" pos:column="13">withname<pos:position pos:line="93" pos:column="21"/></name><operator pos:line="93" pos:column="21">++<pos:position pos:line="93" pos:column="23"/></operator></expr>;<pos:position pos:line="93" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">apr_file_puts<pos:position pos:line="94" pos:column="26"/></name><argument_list pos:line="94" pos:column="26">(<argument><expr><name pos:line="94" pos:column="27">line<pos:position pos:line="94" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="33">outfile<pos:position pos:line="94" pos:column="40"/></name></expr></argument>)<pos:position pos:line="94" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="42"/></expr_stmt>
            <continue pos:line="95" pos:column="13">continue;<pos:position pos:line="95" pos:column="22"/></continue>
        }<pos:position pos:line="96" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="98" pos:column="9">/* Terminate the line at the next space */</comment>
        <if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><operator pos:line="99" pos:column="13">(<pos:position pos:line="99" pos:column="14"/></operator><name pos:line="99" pos:column="14">space<pos:position pos:line="99" pos:column="19"/></name> <operator pos:line="99" pos:column="20">=<pos:position pos:line="99" pos:column="21"/></operator> <call><name pos:line="99" pos:column="22">strchr<pos:position pos:line="99" pos:column="28"/></name><argument_list pos:line="99" pos:column="28">(<argument><expr><name pos:line="99" pos:column="29">line<pos:position pos:line="99" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="99" pos:column="35">' '<pos:position pos:line="99" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="39"/></argument_list></call><operator pos:line="99" pos:column="39">)<pos:position pos:line="99" pos:column="40"/></operator> <operator pos:line="99" pos:column="41">!=<pos:position pos:line="99" pos:column="43"/></operator> <name pos:line="99" pos:column="44">NULL<pos:position pos:line="99" pos:column="48"/></name></expr>)<pos:position pos:line="99" pos:column="49"/></condition><then pos:line="99" pos:column="49"> <block pos:line="99" pos:column="50">{
            <expr_stmt><expr><operator pos:line="100" pos:column="13">*<pos:position pos:line="100" pos:column="14"/></operator><name pos:line="100" pos:column="14">space<pos:position pos:line="100" pos:column="19"/></name> <operator pos:line="100" pos:column="20">=<pos:position pos:line="100" pos:column="21"/></operator> <literal type="char" pos:line="100" pos:column="22">'\0'<pos:position pos:line="100" pos:column="26"/></literal></expr>;<pos:position pos:line="100" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="101" pos:column="10"/></block></then>
        <else pos:line="102" pos:column="9">else <block pos:line="102" pos:column="14">{
            <expr_stmt><expr><name pos:line="103" pos:column="13">space<pos:position pos:line="103" pos:column="18"/></name> <operator pos:line="103" pos:column="19">=<pos:position pos:line="103" pos:column="20"/></operator> <name pos:line="103" pos:column="21">dummy<pos:position pos:line="103" pos:column="26"/></name></expr>;<pos:position pos:line="103" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="104" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="106" pos:column="9">/* See if we have it in our cache */</comment>
        <expr_stmt><expr><name pos:line="107" pos:column="9">hostname<pos:position pos:line="107" pos:column="17"/></name> <operator pos:line="107" pos:column="18">=<pos:position pos:line="107" pos:column="19"/></operator> <operator pos:line="107" pos:column="20">(<pos:position pos:line="107" pos:column="21"/></operator><name pos:line="107" pos:column="21">char<pos:position pos:line="107" pos:column="25"/></name> <operator pos:line="107" pos:column="26">*<pos:position pos:line="107" pos:column="27"/></operator><operator pos:line="107" pos:column="27">)<pos:position pos:line="107" pos:column="28"/></operator> <call><name pos:line="107" pos:column="29">apr_hash_get<pos:position pos:line="107" pos:column="41"/></name><argument_list pos:line="107" pos:column="41">(<argument><expr><name pos:line="107" pos:column="42">cache<pos:position pos:line="107" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="49">line<pos:position pos:line="107" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="107" pos:column="55">APR_HASH_KEY_STRING<pos:position pos:line="107" pos:column="74"/></name></expr></argument>)<pos:position pos:line="107" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="76"/></expr_stmt>
        <if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><name pos:line="108" pos:column="13">hostname<pos:position pos:line="108" pos:column="21"/></name></expr>)<pos:position pos:line="108" pos:column="22"/></condition><then pos:line="108" pos:column="22"> <block pos:line="108" pos:column="23">{
            <expr_stmt><expr><call><name pos:line="109" pos:column="13">apr_file_printf<pos:position pos:line="109" pos:column="28"/></name><argument_list pos:line="109" pos:column="28">(<argument><expr><name pos:line="109" pos:column="29">outfile<pos:position pos:line="109" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="38">"%s %s"<pos:position pos:line="109" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="109" pos:column="47">hostname<pos:position pos:line="109" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="57">space<pos:position pos:line="109" pos:column="62"/></name> <operator pos:line="109" pos:column="63">+<pos:position pos:line="109" pos:column="64"/></operator> <literal type="number" pos:line="109" pos:column="65">1<pos:position pos:line="109" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="68"/></expr_stmt>
            <expr_stmt><expr><name pos:line="110" pos:column="13">cachehits<pos:position pos:line="110" pos:column="22"/></name><operator pos:line="110" pos:column="22">++<pos:position pos:line="110" pos:column="24"/></operator></expr>;<pos:position pos:line="110" pos:column="25"/></expr_stmt>
            <continue pos:line="111" pos:column="13">continue;<pos:position pos:line="111" pos:column="22"/></continue>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="114" pos:column="9">/* Parse the IP address */</comment>
        <expr_stmt><expr><name pos:line="115" pos:column="9">status<pos:position pos:line="115" pos:column="15"/></name> <operator pos:line="115" pos:column="16">=<pos:position pos:line="115" pos:column="17"/></operator> <call><name pos:line="115" pos:column="18">apr_sockaddr_info_get<pos:position pos:line="115" pos:column="39"/></name><argument_list pos:line="115" pos:column="39">(<argument><expr><operator pos:line="115" pos:column="40">&amp;<pos:position pos:line="115" pos:column="45"/></operator><name pos:line="115" pos:column="41">ip<pos:position pos:line="115" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="45">line<pos:position pos:line="115" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="51">APR_UNSPEC<pos:position pos:line="115" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="63">0<pos:position pos:line="115" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="115" pos:column="66">0<pos:position pos:line="115" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="115" pos:column="69">pline<pos:position pos:line="115" pos:column="74"/></name></expr></argument>)<pos:position pos:line="115" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="76"/></expr_stmt>
        <if pos:line="116" pos:column="9">if <condition pos:line="116" pos:column="12">(<expr><name pos:line="116" pos:column="13">status<pos:position pos:line="116" pos:column="19"/></name> <operator pos:line="116" pos:column="20">!=<pos:position pos:line="116" pos:column="22"/></operator> <name pos:line="116" pos:column="23">APR_SUCCESS<pos:position pos:line="116" pos:column="34"/></name></expr>)<pos:position pos:line="116" pos:column="35"/></condition><then pos:line="116" pos:column="35"> <block pos:line="116" pos:column="36">{
            <comment type="block" pos:line="117" pos:column="13">/* Not an IP address */</comment>
            <expr_stmt><expr><name pos:line="118" pos:column="13">withname<pos:position pos:line="118" pos:column="21"/></name><operator pos:line="118" pos:column="21">++<pos:position pos:line="118" pos:column="23"/></operator></expr>;<pos:position pos:line="118" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="119" pos:column="13">*<pos:position pos:line="119" pos:column="14"/></operator><name pos:line="119" pos:column="14">space<pos:position pos:line="119" pos:column="19"/></name> <operator pos:line="119" pos:column="20">=<pos:position pos:line="119" pos:column="21"/></operator> <literal type="char" pos:line="119" pos:column="22">' '<pos:position pos:line="119" pos:column="25"/></literal></expr>;<pos:position pos:line="119" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">apr_file_puts<pos:position pos:line="120" pos:column="26"/></name><argument_list pos:line="120" pos:column="26">(<argument><expr><name pos:line="120" pos:column="27">line<pos:position pos:line="120" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="33">outfile<pos:position pos:line="120" pos:column="40"/></name></expr></argument>)<pos:position pos:line="120" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="42"/></expr_stmt>
            <continue pos:line="121" pos:column="13">continue;<pos:position pos:line="121" pos:column="22"/></continue>
        }<pos:position pos:line="122" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="124" pos:column="9">/* This does not make much sense, but historically "resolves" means
         * "parsed as an IP address". It does not mean we actually resolved
         * the IP address into a hostname.
         */</comment>
        <expr_stmt><expr><name pos:line="128" pos:column="9">resolves<pos:position pos:line="128" pos:column="17"/></name><operator pos:line="128" pos:column="17">++<pos:position pos:line="128" pos:column="19"/></operator></expr>;<pos:position pos:line="128" pos:column="20"/></expr_stmt>

        <comment type="block" pos:line="130" pos:column="9">/* From here on our we cache each result, even if it was not
         * succesful
         */</comment>
        <expr_stmt><expr><name pos:line="133" pos:column="9">cachesize<pos:position pos:line="133" pos:column="18"/></name><operator pos:line="133" pos:column="18">++<pos:position pos:line="133" pos:column="20"/></operator></expr>;<pos:position pos:line="133" pos:column="21"/></expr_stmt>

        <comment type="block" pos:line="135" pos:column="9">/* Try and perform a reverse lookup */</comment>
        <expr_stmt><expr><name pos:line="136" pos:column="9">status<pos:position pos:line="136" pos:column="15"/></name> <operator pos:line="136" pos:column="16">=<pos:position pos:line="136" pos:column="17"/></operator> <call><name pos:line="136" pos:column="18">apr_getnameinfo<pos:position pos:line="136" pos:column="33"/></name><argument_list pos:line="136" pos:column="33">(<argument><expr><operator pos:line="136" pos:column="34">&amp;<pos:position pos:line="136" pos:column="39"/></operator><name pos:line="136" pos:column="35">hostname<pos:position pos:line="136" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="45">ip<pos:position pos:line="136" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="136" pos:column="49">0<pos:position pos:line="136" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="51"/></argument_list></call> <operator pos:line="136" pos:column="52">!=<pos:position pos:line="136" pos:column="54"/></operator> <name pos:line="136" pos:column="55">APR_SUCCESS<pos:position pos:line="136" pos:column="66"/></name></expr>;<pos:position pos:line="136" pos:column="67"/></expr_stmt>
        <if pos:line="137" pos:column="9">if <condition pos:line="137" pos:column="12">(<expr><name pos:line="137" pos:column="13">status<pos:position pos:line="137" pos:column="19"/></name> <operator pos:line="137" pos:column="20">||<pos:position pos:line="137" pos:column="22"/></operator> <name pos:line="137" pos:column="23">hostname<pos:position pos:line="137" pos:column="31"/></name> <operator pos:line="137" pos:column="32">==<pos:position pos:line="137" pos:column="34"/></operator> <name pos:line="137" pos:column="35">NULL<pos:position pos:line="137" pos:column="39"/></name></expr>)<pos:position pos:line="137" pos:column="40"/></condition><then pos:line="137" pos:column="40"> <block pos:line="137" pos:column="41">{
            <comment type="block" pos:line="138" pos:column="13">/* Could not perform a reverse lookup */</comment>
            <expr_stmt><expr><operator pos:line="139" pos:column="13">*<pos:position pos:line="139" pos:column="14"/></operator><name pos:line="139" pos:column="14">space<pos:position pos:line="139" pos:column="19"/></name> <operator pos:line="139" pos:column="20">=<pos:position pos:line="139" pos:column="21"/></operator> <literal type="char" pos:line="139" pos:column="22">' '<pos:position pos:line="139" pos:column="25"/></literal></expr>;<pos:position pos:line="139" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="140" pos:column="13">apr_file_puts<pos:position pos:line="140" pos:column="26"/></name><argument_list pos:line="140" pos:column="26">(<argument><expr><name pos:line="140" pos:column="27">line<pos:position pos:line="140" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="33">outfile<pos:position pos:line="140" pos:column="40"/></name></expr></argument>)<pos:position pos:line="140" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="141" pos:column="13">noreverse<pos:position pos:line="141" pos:column="22"/></name><operator pos:line="141" pos:column="22">++<pos:position pos:line="141" pos:column="24"/></operator></expr>;<pos:position pos:line="141" pos:column="25"/></expr_stmt>

            <comment type="block" pos:line="143" pos:column="13">/* Add to cache */</comment>
            <expr_stmt><expr><operator pos:line="144" pos:column="13">*<pos:position pos:line="144" pos:column="14"/></operator><name pos:line="144" pos:column="14">space<pos:position pos:line="144" pos:column="19"/></name> <operator pos:line="144" pos:column="20">=<pos:position pos:line="144" pos:column="21"/></operator> <literal type="char" pos:line="144" pos:column="22">'\0'<pos:position pos:line="144" pos:column="26"/></literal></expr>;<pos:position pos:line="144" pos:column="27"/></expr_stmt>
            <macro><name pos:line="145" pos:column="13">apr_hash_set<pos:position pos:line="145" pos:column="25"/></name><argument_list pos:line="145" pos:column="25">(<argument pos:line="145" pos:column="26">cache<pos:position pos:line="145" pos:column="31"/></argument>, <argument pos:line="145" pos:column="33">line<pos:position pos:line="145" pos:column="37"/></argument>, <argument pos:line="145" pos:column="39">APR_HASH_KEY_STRING<pos:position pos:line="145" pos:column="58"/></argument>,
                         <argument pos:line="146" pos:column="26">apr_pstrdup(apr_h<pos:position pos:line="146" pos:column="43"/></argument></argument_list></macro></block></then></if></block></while></block></function></unit>
