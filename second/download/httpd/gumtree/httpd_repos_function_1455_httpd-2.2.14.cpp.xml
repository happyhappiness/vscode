<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1455_httpd-2.2.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">proxy_worker<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type><name pos:line="1" pos:column="22">find_best_worker<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">proxy_balancer<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">balancer<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">request_rec<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">r<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">proxy_worker<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">candidate<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><name pos:line="4" pos:column="31">NULL<pos:position pos:line="4" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">rv<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <call><name pos:line="7" pos:column="15">PROXY_THREAD_LOCK<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">balancer<pos:position pos:line="7" pos:column="41"/></name></expr></argument>)<pos:position pos:line="7" pos:column="42"/></argument_list></call><operator pos:line="7" pos:column="42">)<pos:position pos:line="7" pos:column="43"/></operator> <operator pos:line="7" pos:column="44">!=<pos:position pos:line="7" pos:column="46"/></operator> <name pos:line="7" pos:column="47">APR_SUCCESS<pos:position pos:line="7" pos:column="58"/></name></expr>)<pos:position pos:line="7" pos:column="59"/></condition><then pos:line="7" pos:column="59"> <block pos:line="7" pos:column="60">{
        <expr_stmt><expr><call><name pos:line="8" pos:column="9">ap_log_error<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">APLOG_MARK<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="34">APLOG_ERR<pos:position pos:line="8" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="45">rv<pos:position pos:line="8" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="49">r<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">-&gt;<pos:position pos:line="8" pos:column="55"/></operator><name pos:line="8" pos:column="52">server<pos:position pos:line="8" pos:column="58"/></name></name></expr></argument>,
        <argument><expr><literal type="string" pos:line="9" pos:column="9">"proxy: BALANCER: (%s). Lock failed for find_best_worker()"<pos:position pos:line="9" pos:column="68"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="70">balancer<pos:position pos:line="9" pos:column="78"/></name><operator pos:line="9" pos:column="78">-&gt;<pos:position pos:line="9" pos:column="83"/></operator><name pos:line="9" pos:column="80">name<pos:position pos:line="9" pos:column="84"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="86"/></expr_stmt>
        <return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">NULL<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="13" pos:column="5">candidate<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call pos:line="13" pos:column="17">(<modifier pos:line="13" pos:column="18">*<pos:position pos:line="13" pos:column="19"/></modifier><name><name pos:line="13" pos:column="19">balancer<pos:position pos:line="13" pos:column="27"/></name><operator pos:line="13" pos:column="27">-&gt;<pos:position pos:line="13" pos:column="32"/></operator><name pos:line="13" pos:column="29">lbmethod<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">-&gt;<pos:position pos:line="13" pos:column="42"/></operator><name pos:line="13" pos:column="39">finder<pos:position pos:line="13" pos:column="45"/></name></name>)<argument_list pos:line="13" pos:column="46">(<argument><expr><name pos:line="13" pos:column="47">balancer<pos:position pos:line="13" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="57">r<pos:position pos:line="13" pos:column="58"/></name></expr></argument>)<pos:position pos:line="13" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="60"/></expr_stmt>

    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">candidate<pos:position pos:line="15" pos:column="18"/></name></expr>)<pos:position pos:line="15" pos:column="19"/></condition><then pos:line="15" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="16" pos:column="9">candidate<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">-&gt;<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="20">s<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">-&gt;<pos:position pos:line="16" pos:column="26"/></operator><name pos:line="16" pos:column="23">elected<pos:position pos:line="16" pos:column="30"/></name></name><operator pos:line="16" pos:column="30">++<pos:position pos:line="16" pos:column="32"/></operator></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt></block></then></if>

<comment type="block" pos:line="18" pos:column="1">/*
        PROXY_THREAD_UNLOCK(balancer);
        return NULL;
*/</comment>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">(<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">rv<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">PROXY_THREAD_UNLOCK<pos:position pos:line="23" pos:column="34"/></name><argument_list pos:line="23" pos:column="34">(<argument><expr><name pos:line="23" pos:column="35">balancer<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call><operator pos:line="23" pos:column="44">)<pos:position pos:line="23" pos:column="45"/></operator> <operator pos:line="23" pos:column="46">!=<pos:position pos:line="23" pos:column="48"/></operator> <name pos:line="23" pos:column="49">APR_SUCCESS<pos:position pos:line="23" pos:column="60"/></name></expr>)<pos:position pos:line="23" pos:column="61"/></condition><then pos:line="23" pos:column="61"> <block pos:line="23" pos:column="62">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">ap_log_error<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">APLOG_MARK<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">APLOG_ERR<pos:position pos:line="24" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="45">rv<pos:position pos:line="24" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="49">r<pos:position pos:line="24" pos:column="50"/></name><operator pos:line="24" pos:column="50">-&gt;<pos:position pos:line="24" pos:column="55"/></operator><name pos:line="24" pos:column="52">server<pos:position pos:line="24" pos:column="58"/></name></name></expr></argument>,
        <argument><expr><literal type="string" pos:line="25" pos:column="9">"proxy: BALANCER: (%s). Unlock failed for find_best_worker()"<pos:position pos:line="25" pos:column="70"/></literal></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="72">balancer<pos:position pos:line="25" pos:column="80"/></name><operator pos:line="25" pos:column="80">-&gt;<pos:position pos:line="25" pos:column="85"/></operator><name pos:line="25" pos:column="82">name<pos:position pos:line="25" pos:column="86"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="88"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">candidate<pos:position pos:line="28" pos:column="18"/></name> <operator pos:line="28" pos:column="19">==<pos:position pos:line="28" pos:column="21"/></operator> <name pos:line="28" pos:column="22">NULL<pos:position pos:line="28" pos:column="26"/></name></expr>)<pos:position pos:line="28" pos:column="27"/></condition><then pos:line="28" pos:column="27"> <block pos:line="28" pos:column="28">{
        <comment type="block" pos:line="29" pos:column="9">/* All the workers are in error state or disabled.
         * If the balancer has a timeout sleep for a while
         * and try again to find the worker. The chances are
         * that some other thread will release a connection.
         * By default the timeout is not set, and the server
         * returns SERVER_BUSY.
         */</comment>
<cpp:if pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">if<pos:position pos:line="36" pos:column="4"/></cpp:directive> <expr><name pos:line="36" pos:column="5">APR_HAS_THREADS<pos:position pos:line="36" pos:column="20"/></name></expr></cpp:if>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name><name pos:line="37" pos:column="13">balancer<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">-&gt;<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="23">timeout<pos:position pos:line="37" pos:column="30"/></name></name></expr>)<pos:position pos:line="37" pos:column="31"/></condition><then pos:line="37" pos:column="31"> <block pos:line="37" pos:column="32">{
            <comment type="block" pos:line="38" pos:column="13">/* XXX: This can perhaps be build using some
             * smarter mechanism, like tread_cond.
             * But since the statuses can came from
             * different childs, use the provided algo.
             */</comment>
            <decl_stmt><decl><type><name pos:line="43" pos:column="13">apr_interval_time_t<pos:position pos:line="43" pos:column="32"/></name></type> <name pos:line="43" pos:column="33">timeout<pos:position pos:line="43" pos:column="40"/></name> <init pos:line="43" pos:column="41">= <expr><name><name pos:line="43" pos:column="43">balancer<pos:position pos:line="43" pos:column="51"/></name><operator pos:line="43" pos:column="51">-&gt;<pos:position pos:line="43" pos:column="56"/></operator><name pos:line="43" pos:column="53">timeout<pos:position pos:line="43" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="43" pos:column="61"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="44" pos:column="13">apr_interval_time_t<pos:position pos:line="44" pos:column="32"/></name></type> <name pos:line="44" pos:column="33">step<pos:position pos:line="44" pos:column="37"/></name></decl>, <decl><type ref="prev"/><name pos:line="44" pos:column="39">tval<pos:position pos:line="44" pos:column="43"/></name> <init pos:line="44" pos:column="44">= <expr><literal type="number" pos:line="44" pos:column="46">0<pos:position pos:line="44" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="44" pos:column="48"/></decl_stmt>
            <comment type="block" pos:line="45" pos:column="13">/* Set the timeout to 0 so that we don't
             * end in infinite loop
             */</comment>
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">balancer<pos:position pos:line="48" pos:column="21"/></name><operator pos:line="48" pos:column="21">-&gt;<pos:position pos:line="48" pos:column="26"/></operator><name pos:line="48" pos:column="23">timeout<pos:position pos:line="48" pos:column="30"/></name></name> <operator pos:line="48" pos:column="31">=<pos:position pos:line="48" pos:column="32"/></operator> <literal type="number" pos:line="48" pos:column="33">0<pos:position pos:line="48" pos:column="34"/></literal></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><name pos:line="49" pos:column="13">step<pos:position pos:line="49" pos:column="17"/></name> <operator pos:line="49" pos:column="18">=<pos:position pos:line="49" pos:column="19"/></operator> <name pos:line="49" pos:column="20">timeout<pos:position pos:line="49" pos:column="27"/></name> <operator pos:line="49" pos:column="28">/<pos:position pos:line="49" pos:column="29"/></operator> <literal type="number" pos:line="49" pos:column="30">100<pos:position pos:line="49" pos:column="33"/></literal></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
            <while pos:line="50" pos:column="13">while <condition pos:line="50" pos:column="19">(<expr><name pos:line="50" pos:column="20">tval<pos:position pos:line="50" pos:column="24"/></name> <operator pos:line="50" pos:column="25">&lt;<pos:position pos:line="50" pos:column="29"/></operator> <name pos:line="50" pos:column="27">timeout<pos:position pos:line="50" pos:column="34"/></name></expr>)<pos:position pos:line="50" pos:column="35"/></condition> <block pos:line="50" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="51" pos:column="17">apr_sleep<pos:position pos:line="51" pos:column="26"/></name><argument_list pos:line="51" pos:column="26">(<argument><expr><name pos:line="51" pos:column="27">step<pos:position pos:line="51" pos:column="31"/></name></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
                <comment type="block" pos:line="52" pos:column="17">/* Try again */</comment>
                <if pos:line="53" pos:column="17">if <condition pos:line="53" pos:column="20">(<expr><operator pos:line="53" pos:column="21">(<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="22">candidate<pos:position pos:line="53" pos:column="31"/></name> <operator pos:line="53" pos:column="32">=<pos:position pos:line="53" pos:column="33"/></operator> <call><name pos:line="53" pos:column="34">find_best_worker<pos:position pos:line="53" pos:column="50"/></name><argument_list pos:line="53" pos:column="50">(<argument><expr><name pos:line="53" pos:column="51">balancer<pos:position pos:line="53" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="61">r<pos:position pos:line="53" pos:column="62"/></name></expr></argument>)<pos:position pos:line="53" pos:column="63"/></argument_list></call><operator pos:line="53" pos:column="63">)<pos:position pos:line="53" pos:column="64"/></operator></expr>)<pos:position pos:line="53" pos:column="65"/></condition><then pos:line="53" pos:column="65">
                    <block type="pseudo"><break pos:line="54" pos:column="21">break;<pos:position pos:line="54" pos:column="27"/></break></block></then></if>
                <expr_stmt><expr><name pos:line="55" pos:column="17">tval<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">+=<pos:position pos:line="55" pos:column="24"/></operator> <name pos:line="55" pos:column="25">step<pos:position pos:line="55" pos:column="29"/></name></expr>;<pos:position pos:line="55" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="56" pos:column="14"/></block></while>
            <comment type="block" pos:line="57" pos:column="13">/* restore the timeout */</comment>
            <expr_stmt><expr><name><name pos:line="58" pos:column="13">balancer<pos:position pos:line="58" pos:column="21"/></name><operator pos:line="58" pos:column="21">-&gt;<pos:position pos:line="58" pos:column="26"/></operator><name pos:line="58" pos:column="23">timeout<pos:position pos:line="58" pos:column="30"/></name></name> <operator pos:line="58" pos:column="31">=<pos:position pos:line="58" pos:column="32"/></operator> <name pos:line="58" pos:column="33">timeout<pos:position pos:line="58" pos:column="40"/></name></expr>;<pos:position pos:line="58" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="59" pos:column="10"/></block></then></if>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <return pos:line="63" pos:column="5">return <expr><name pos:line="63" pos:column="12">candidate<pos:position pos:line="63" pos:column="21"/></name></expr>;<pos:position pos:line="63" pos:column="22"/></return>

}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
