<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1657_httpd-2.4.10.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">use_macro<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">cmd_parms<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type> <name pos:line="1" pos:column="42">cmd<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">void<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">dummy<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="60">const<pos:position pos:line="1" pos:column="65"/></specifier> <name pos:line="1" pos:column="66">char<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">arg<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">name<pos:position pos:line="3" pos:column="15"/></name></decl>, <modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="18">recursion<pos:position pos:line="3" pos:column="27"/></name></decl>, <modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="30">where<pos:position pos:line="3" pos:column="35"/></name></decl>;<pos:position pos:line="3" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">errmsg<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ap_macro_t<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">macro<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_array_header_t<pos:position pos:line="6" pos:column="23"/></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">replacements<pos:position pos:line="6" pos:column="37"/></name></decl>;<pos:position pos:line="6" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_array_header_t<pos:position pos:line="7" pos:column="23"/></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">contents<pos:position pos:line="7" pos:column="33"/></name></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">debug<pos:position pos:line="9" pos:column="10"/></name><argument_list pos:line="9" pos:column="10">(<argument><expr><call><name pos:line="9" pos:column="11">fprintf<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">stderr<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="27">"use_macro -%s-\n"<pos:position pos:line="9" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="47">arg<pos:position pos:line="9" pos:column="50"/></name></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="9" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="53"/></expr_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* must be initialized, or no macros has been defined */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">ap_macros<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">==<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr>)<pos:position pos:line="12" pos:column="27"/></condition><then pos:line="12" pos:column="27"> <block pos:line="12" pos:column="28">{
        <return pos:line="13" pos:column="9">return <expr><literal type="string" pos:line="13" pos:column="16">"no macro defined before "<pos:position pos:line="13" pos:column="42"/></literal> <name pos:line="13" pos:column="43">USE_MACRO<pos:position pos:line="13" pos:column="52"/></name></expr>;<pos:position pos:line="13" pos:column="53"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/* get lowercase macro name */</comment>
    <expr_stmt><expr><name pos:line="17" pos:column="5">name<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">=<pos:position pos:line="17" pos:column="11"/></operator> <call><name pos:line="17" pos:column="12">ap_getword_conf<pos:position pos:line="17" pos:column="27"/></name><argument_list pos:line="17" pos:column="27">(<argument><expr><name><name pos:line="17" pos:column="28">cmd<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">temp_pool<pos:position pos:line="17" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="44">&amp;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="45">arg<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ap_str_tolower<pos:position pos:line="18" pos:column="19"/></name><argument_list pos:line="18" pos:column="19">(<argument><expr><name pos:line="18" pos:column="20">name<pos:position pos:line="18" pos:column="24"/></name></expr></argument>)<pos:position pos:line="18" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><call><name pos:line="20" pos:column="9">empty_string_p<pos:position pos:line="20" pos:column="23"/></name><argument_list pos:line="20" pos:column="23">(<argument><expr><name pos:line="20" pos:column="24">name<pos:position pos:line="20" pos:column="28"/></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="30"/></condition><then pos:line="20" pos:column="30"> <block pos:line="20" pos:column="31">{
        <return pos:line="21" pos:column="9">return <expr><literal type="string" pos:line="21" pos:column="16">"no macro name specified with "<pos:position pos:line="21" pos:column="47"/></literal> <name pos:line="21" pos:column="48">USE_MACRO<pos:position pos:line="21" pos:column="57"/></name></expr>;<pos:position pos:line="21" pos:column="58"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/* get macro definition */</comment>
    <expr_stmt><expr><name pos:line="25" pos:column="5">macro<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <call><name pos:line="25" pos:column="13">apr_hash_get<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">ap_macros<pos:position pos:line="25" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="37">name<pos:position pos:line="25" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="43">APR_HASH_KEY_STRING<pos:position pos:line="25" pos:column="62"/></name></expr></argument>)<pos:position pos:line="25" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="64"/></expr_stmt>

    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">!<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">macro<pos:position pos:line="27" pos:column="15"/></name></expr>)<pos:position pos:line="27" pos:column="16"/></condition><then pos:line="27" pos:column="16"> <block pos:line="27" pos:column="17">{
        <return pos:line="28" pos:column="9">return <expr><call><name pos:line="28" pos:column="16">apr_psprintf<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name><name pos:line="28" pos:column="29">cmd<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">-&gt;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="34">temp_pool<pos:position pos:line="28" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="45">"macro '%s' undefined"<pos:position pos:line="28" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="69">name<pos:position pos:line="28" pos:column="73"/></name></expr></argument>)<pos:position pos:line="28" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="75"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="31" pos:column="5">/* recursion is detected here by looking at the config file name,
     * which may already contains "macro 'foo'". Ok, it looks like a hack,
     * but otherwise it is uneasy to keep this data available somewhere...
     * the name has just the needed visibility and liveness.
     */</comment>
    <expr_stmt><expr><name pos:line="36" pos:column="5">recursion<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">=<pos:position pos:line="36" pos:column="16"/></operator>
        <call><name pos:line="37" pos:column="9">apr_pstrcat<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name><name pos:line="37" pos:column="21">cmd<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">-&gt;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="26">temp_pool<pos:position pos:line="37" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="37">"macro '"<pos:position pos:line="37" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="48">macro<pos:position pos:line="37" pos:column="53"/></name><operator pos:line="37" pos:column="53">-&gt;<pos:position pos:line="37" pos:column="58"/></operator><name pos:line="37" pos:column="55">name<pos:position pos:line="37" pos:column="59"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="61">"'"<pos:position pos:line="37" pos:column="64"/></literal></expr></argument>, <argument><expr><name pos:line="37" pos:column="66">NULL<pos:position pos:line="37" pos:column="70"/></name></expr></argument>)<pos:position pos:line="37" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="72"/></expr_stmt>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name pos:line="39" pos:column="9">ap_strstr<pos:position pos:line="39" pos:column="18"/></name><argument_list pos:line="39" pos:column="18">(<argument><expr><operator pos:line="39" pos:column="19">(<pos:position pos:line="39" pos:column="20"/></operator><name pos:line="39" pos:column="20">char<pos:position pos:line="39" pos:column="24"/></name> <operator pos:line="39" pos:column="25">*<pos:position pos:line="39" pos:column="26"/></operator><operator pos:line="39" pos:column="26">)<pos:position pos:line="39" pos:column="27"/></operator> <name><name pos:line="39" pos:column="28">cmd<pos:position pos:line="39" pos:column="31"/></name><operator pos:line="39" pos:column="31">-&gt;<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="33">config_file<pos:position pos:line="39" pos:column="44"/></name><operator pos:line="39" pos:column="44">-&gt;<pos:position pos:line="39" pos:column="49"/></operator><name pos:line="39" pos:column="46">name<pos:position pos:line="39" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="52">recursion<pos:position pos:line="39" pos:column="61"/></name></expr></argument>)<pos:position pos:line="39" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="63"/></condition><then pos:line="39" pos:column="63"> <block pos:line="39" pos:column="64">{
        <return pos:line="40" pos:column="9">return <expr><call><name pos:line="40" pos:column="16">apr_psprintf<pos:position pos:line="40" pos:column="28"/></name><argument_list pos:line="40" pos:column="28">(<argument><expr><name><name pos:line="40" pos:column="29">cmd<pos:position pos:line="40" pos:column="32"/></name><operator pos:line="40" pos:column="32">-&gt;<pos:position pos:line="40" pos:column="37"/></operator><name pos:line="40" pos:column="34">temp_pool<pos:position pos:line="40" pos:column="43"/></name></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="41" pos:column="29">"recursive use of macro '%s' is invalid"<pos:position pos:line="41" pos:column="69"/></literal></expr></argument>,
                            <argument><expr><name><name pos:line="42" pos:column="29">macro<pos:position pos:line="42" pos:column="34"/></name><operator pos:line="42" pos:column="34">-&gt;<pos:position pos:line="42" pos:column="39"/></operator><name pos:line="42" pos:column="36">name<pos:position pos:line="42" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="42"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* get macro arguments */</comment>
    <expr_stmt><expr><name pos:line="46" pos:column="5">replacements<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <call><name pos:line="46" pos:column="20">get_arguments<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name><name pos:line="46" pos:column="34">cmd<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">-&gt;<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="39">temp_pool<pos:position pos:line="46" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="50">arg<pos:position pos:line="46" pos:column="53"/></name></expr></argument>)<pos:position pos:line="46" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="55"/></expr_stmt>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name><name pos:line="48" pos:column="9">macro<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">-&gt;<pos:position pos:line="48" pos:column="19"/></operator><name pos:line="48" pos:column="16">arguments<pos:position pos:line="48" pos:column="25"/></name><operator pos:line="48" pos:column="25">-&gt;<pos:position pos:line="48" pos:column="30"/></operator><name pos:line="48" pos:column="27">nelts<pos:position pos:line="48" pos:column="32"/></name></name> <operator pos:line="48" pos:column="33">!=<pos:position pos:line="48" pos:column="35"/></operator> <name><name pos:line="48" pos:column="36">replacements<pos:position pos:line="48" pos:column="48"/></name><operator pos:line="48" pos:column="48">-&gt;<pos:position pos:line="48" pos:column="53"/></operator><name pos:line="48" pos:column="50">nelts<pos:position pos:line="48" pos:column="55"/></name></name></expr>)<pos:position pos:line="48" pos:column="56"/></condition><then pos:line="48" pos:column="56"> <block pos:line="48" pos:column="57">{
        <return pos:line="49" pos:column="9">return <expr><call><name pos:line="49" pos:column="16">apr_psprintf<pos:position pos:line="49" pos:column="28"/></name><argument_list pos:line="49" pos:column="28">(<argument><expr><name><name pos:line="49" pos:column="29">cmd<pos:position pos:line="49" pos:column="32"/></name><operator pos:line="49" pos:column="32">-&gt;<pos:position pos:line="49" pos:column="37"/></operator><name pos:line="49" pos:column="34">temp_pool<pos:position pos:line="49" pos:column="43"/></name></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="50" pos:column="29">"macro '%s' (%s) used "<pos:position pos:line="50" pos:column="52"/></literal>
                            <literal type="string" pos:line="51" pos:column="29">"with %d arguments instead of %d"<pos:position pos:line="51" pos:column="62"/></literal></expr></argument>,
                            <argument><expr><name><name pos:line="52" pos:column="29">macro<pos:position pos:line="52" pos:column="34"/></name><operator pos:line="52" pos:column="34">-&gt;<pos:position pos:line="52" pos:column="39"/></operator><name pos:line="52" pos:column="36">name<pos:position pos:line="52" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="42">macro<pos:position pos:line="52" pos:column="47"/></name><operator pos:line="52" pos:column="47">-&gt;<pos:position pos:line="52" pos:column="52"/></operator><name pos:line="52" pos:column="49">location<pos:position pos:line="52" pos:column="57"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="53" pos:column="29">replacements<pos:position pos:line="53" pos:column="41"/></name><operator pos:line="53" pos:column="41">-&gt;<pos:position pos:line="53" pos:column="46"/></operator><name pos:line="53" pos:column="43">nelts<pos:position pos:line="53" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="50">macro<pos:position pos:line="53" pos:column="55"/></name><operator pos:line="53" pos:column="55">-&gt;<pos:position pos:line="53" pos:column="60"/></operator><name pos:line="53" pos:column="57">arguments<pos:position pos:line="53" pos:column="66"/></name><operator pos:line="53" pos:column="66">-&gt;<pos:position pos:line="53" pos:column="71"/></operator><name pos:line="53" pos:column="68">nelts<pos:position pos:line="53" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="75"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="56" pos:column="5">where<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <call><name pos:line="56" pos:column="13">apr_psprintf<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><name><name pos:line="56" pos:column="26">cmd<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">temp_pool<pos:position pos:line="56" pos:column="40"/></name></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="57" pos:column="26">"macro '%s' (%s) used on line %d of \"%s\""<pos:position pos:line="57" pos:column="69"/></literal></expr></argument>,
                         <argument><expr><name><name pos:line="58" pos:column="26">macro<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">-&gt;<pos:position pos:line="58" pos:column="36"/></operator><name pos:line="58" pos:column="33">name<pos:position pos:line="58" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="39">macro<pos:position pos:line="58" pos:column="44"/></name><operator pos:line="58" pos:column="44">-&gt;<pos:position pos:line="58" pos:column="49"/></operator><name pos:line="58" pos:column="46">location<pos:position pos:line="58" pos:column="54"/></name></name></expr></argument>,
                         <argument><expr><name><name pos:line="59" pos:column="26">cmd<pos:position pos:line="59" pos:column="29"/></name><operator pos:line="59" pos:column="29">-&gt;<pos:position pos:line="59" pos:column="34"/></operator><name pos:line="59" pos:column="31">config_file<pos:position pos:line="59" pos:column="42"/></name><operator pos:line="59" pos:column="42">-&gt;<pos:position pos:line="59" pos:column="47"/></operator><name pos:line="59" pos:column="44">line_number<pos:position pos:line="59" pos:column="55"/></name></name></expr></argument>,
                         <argument><expr><name><name pos:line="60" pos:column="26">cmd<pos:position pos:line="60" pos:column="29"/></name><operator pos:line="60" pos:column="29">-&gt;<pos:position pos:line="60" pos:column="34"/></operator><name pos:line="60" pos:column="31">config_file<pos:position pos:line="60" pos:column="42"/></name><operator pos:line="60" pos:column="42">-&gt;<pos:position pos:line="60" pos:column="47"/></operator><name pos:line="60" pos:column="44">name<pos:position pos:line="60" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="62" pos:column="5">check_macro_use_arguments<pos:position pos:line="62" pos:column="30"/></name><argument_list pos:line="62" pos:column="30">(<argument><expr><name pos:line="62" pos:column="31">where<pos:position pos:line="62" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="38">replacements<pos:position pos:line="62" pos:column="50"/></name></expr></argument>)<pos:position pos:line="62" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><name pos:line="64" pos:column="5">errmsg<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <call><name pos:line="64" pos:column="14">process_content<pos:position pos:line="64" pos:column="29"/></name><argument_list pos:line="64" pos:column="29">(<argument><expr><name><name pos:line="64" pos:column="30">cmd<pos:position pos:line="64" pos:column="33"/></name><operator pos:line="64" pos:column="33">-&gt;<pos:position pos:line="64" pos:column="38"/></operator><name pos:line="64" pos:column="35">temp_pool<pos:position pos:line="64" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="46">macro<pos:position pos:line="64" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="53">replacements<pos:position pos:line="64" pos:column="65"/></name></expr></argument>,
                             <argument><expr><name pos:line="65" pos:column="30">NULL<pos:position pos:line="65" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="36">&amp;<pos:position pos:line="65" pos:column="41"/></operator><name pos:line="65" pos:column="37">contents<pos:position pos:line="65" pos:column="45"/></name></expr></argument>)<pos:position pos:line="65" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="47"/></expr_stmt>

    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name pos:line="67" pos:column="9">errmsg<pos:position pos:line="67" pos:column="15"/></name></expr>)<pos:position pos:line="67" pos:column="16"/></condition><then pos:line="67" pos:column="16"> <block pos:line="67" pos:column="17">{
        <return pos:line="68" pos:column="9">return <expr><call><name pos:line="68" pos:column="16">apr_psprintf<pos:position pos:line="68" pos:column="28"/></name><argument_list pos:line="68" pos:column="28">(<argument><expr><name><name pos:line="68" pos:column="29">cmd<pos:position pos:line="68" pos:column="32"/></name><operator pos:line="68" pos:column="32">-&gt;<pos:position pos:line="68" pos:column="37"/></operator><name pos:line="68" pos:column="34">temp_pool<pos:position pos:line="68" pos:column="43"/></name></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="69" pos:column="29">"%s error while substituting: %s"<pos:position pos:line="69" pos:column="62"/></literal></expr></argument>,
                            <argument><expr><name pos:line="70" pos:column="29">where<pos:position pos:line="70" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="36">errmsg<pos:position pos:line="70" pos:column="42"/></name></expr></argument>)<pos:position pos:line="70" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="44"/></return>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="73" pos:column="5">/* the current "config file" is replaced by a string array...
       at the end of processing the array, the initial config file
       will be returned there (see next_one) so as to go on. */</comment>
    <expr_stmt><expr><name><name pos:line="76" pos:column="5">cmd<pos:position pos:line="76" pos:column="8"/></name><operator pos:line="76" pos:column="8">-&gt;<pos:position pos:line="76" pos:column="13"/></operator><name pos:line="76" pos:column="10">config_file<pos:position pos:line="76" pos:column="21"/></name></name> <operator pos:line="76" pos:column="22">=<pos:position pos:line="76" pos:column="23"/></operator> <call><name pos:line="76" pos:column="24">make_array_config<pos:position pos:line="76" pos:column="41"/></name><argument_list pos:line="76" pos:column="41">(<argument><expr><name><name pos:line="76" pos:column="42">cmd<pos:position pos:line="76" pos:column="45"/></name><operator pos:line="76" pos:column="45">-&gt;<pos:position pos:line="76" pos:column="50"/></operator><name pos:line="76" pos:column="47">temp_pool<pos:position pos:line="76" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="58">contents<pos:position pos:line="76" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="68">where<pos:position pos:line="76" pos:column="73"/></name></expr></argument>,
                                         <argument><expr><name><name pos:line="77" pos:column="42">cmd<pos:position pos:line="77" pos:column="45"/></name><operator pos:line="77" pos:column="45">-&gt;<pos:position pos:line="77" pos:column="50"/></operator><name pos:line="77" pos:column="47">config_file<pos:position pos:line="77" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="60">&amp;<pos:position pos:line="77" pos:column="65"/></operator><name><name pos:line="77" pos:column="61">cmd<pos:position pos:line="77" pos:column="64"/></name><operator pos:line="77" pos:column="64">-&gt;<pos:position pos:line="77" pos:column="69"/></operator><name pos:line="77" pos:column="66">config_file<pos:position pos:line="77" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="77" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="79"/></expr_stmt>

    <return pos:line="79" pos:column="5">return <expr><name pos:line="79" pos:column="12">NULL<pos:position pos:line="79" pos:column="16"/></name></expr>;<pos:position pos:line="79" pos:column="17"/></return>
}<pos:position pos:line="80" pos:column="2"/></block></function></unit>
