<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2783_httpd-2.0.64.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name><name pos:line="1" pos:column="26">argv<pos:position pos:line="1" pos:column="30"/></name><index pos:line="1" pos:column="30">[]<pos:position pos:line="1" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="33"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">i<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">value<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">printf<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="string" pos:line="6" pos:column="12">"/* this file is automatically generated by "<pos:position pos:line="6" pos:column="57"/></literal>
	    <literal type="string" pos:line="7" pos:column="13">"gen_uri_delims, do not edit */\n"<pos:position pos:line="7" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">printf<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="string" pos:line="8" pos:column="12">"static const unsigned char uri_delims[256] = {"<pos:position pos:line="8" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="62"/></expr_stmt>
    <for pos:line="9" pos:column="5">for <control pos:line="9" pos:column="9">(<init><expr><name pos:line="9" pos:column="10">i<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>;<pos:position pos:line="9" pos:column="16"/></init> <condition><expr><name pos:line="9" pos:column="17">i<pos:position pos:line="9" pos:column="18"/></name> <operator pos:line="9" pos:column="19">&lt;<pos:position pos:line="9" pos:column="23"/></operator> <literal type="number" pos:line="9" pos:column="21">256<pos:position pos:line="9" pos:column="24"/></literal></expr>;<pos:position pos:line="9" pos:column="25"/></condition> <incr><expr><operator pos:line="9" pos:column="26">++<pos:position pos:line="9" pos:column="28"/></operator><name pos:line="9" pos:column="28">i<pos:position pos:line="9" pos:column="29"/></name></expr></incr>)<pos:position pos:line="9" pos:column="30"/></control> <block pos:line="9" pos:column="31">{
	<if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">i<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">%<pos:position pos:line="10" pos:column="16"/></operator> <literal type="number" pos:line="10" pos:column="17">20<pos:position pos:line="10" pos:column="19"/></literal> <operator pos:line="10" pos:column="20">==<pos:position pos:line="10" pos:column="22"/></operator> <literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25">
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="11" pos:column="13">printf<pos:position pos:line="11" pos:column="19"/></name><argument_list pos:line="11" pos:column="19">(<argument><expr><literal type="string" pos:line="11" pos:column="20">"\n    "<pos:position pos:line="11" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt></block></then></if>
	<switch pos:line="12" pos:column="9">switch <condition pos:line="12" pos:column="16">(<expr><name pos:line="12" pos:column="17">i<pos:position pos:line="12" pos:column="18"/></name></expr>)<pos:position pos:line="12" pos:column="19"/></condition> <block pos:line="12" pos:column="20">{
	<case pos:line="13" pos:column="9">case <expr><literal type="char" pos:line="13" pos:column="14">':'<pos:position pos:line="13" pos:column="17"/></literal></expr>:<pos:position pos:line="13" pos:column="18"/></case> 	<expr_stmt><expr><name pos:line="13" pos:column="25">value<pos:position pos:line="13" pos:column="30"/></name> <operator pos:line="13" pos:column="31">=<pos:position pos:line="13" pos:column="32"/></operator> <literal type="string" pos:line="13" pos:column="33">"T_COLON"<pos:position pos:line="13" pos:column="42"/></literal></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>	<break pos:line="13" pos:column="49">break;<pos:position pos:line="13" pos:column="55"/></break>
	<case pos:line="14" pos:column="9">case <expr><literal type="char" pos:line="14" pos:column="14">'/'<pos:position pos:line="14" pos:column="17"/></literal></expr>:<pos:position pos:line="14" pos:column="18"/></case> 	<expr_stmt><expr><name pos:line="14" pos:column="25">value<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">=<pos:position pos:line="14" pos:column="32"/></operator> <literal type="string" pos:line="14" pos:column="33">"T_SLASH"<pos:position pos:line="14" pos:column="42"/></literal></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>	<break pos:line="14" pos:column="49">break;<pos:position pos:line="14" pos:column="55"/></break>
	<case pos:line="15" pos:column="9">case <expr><literal type="char" pos:line="15" pos:column="14">'?'<pos:position pos:line="15" pos:column="17"/></literal></expr>:<pos:position pos:line="15" pos:column="18"/></case> 	<expr_stmt><expr><name pos:line="15" pos:column="25">value<pos:position pos:line="15" pos:column="30"/></name> <operator pos:line="15" pos:column="31">=<pos:position pos:line="15" pos:column="32"/></operator> <literal type="string" pos:line="15" pos:column="33">"T_QUESTION"<pos:position pos:line="15" pos:column="45"/></literal></expr>;<pos:position pos:line="15" pos:column="46"/></expr_stmt>	<break pos:line="15" pos:column="49">break;<pos:position pos:line="15" pos:column="55"/></break>
	<case pos:line="16" pos:column="9">case <expr><literal type="char" pos:line="16" pos:column="14">'#'<pos:position pos:line="16" pos:column="17"/></literal></expr>:<pos:position pos:line="16" pos:column="18"/></case> 	<expr_stmt><expr><name pos:line="16" pos:column="25">value<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">=<pos:position pos:line="16" pos:column="32"/></operator> <literal type="string" pos:line="16" pos:column="33">"T_HASH"<pos:position pos:line="16" pos:column="41"/></literal></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>	<break pos:line="16" pos:column="49">break;<pos:position pos:line="16" pos:column="55"/></break>
	<case pos:line="17" pos:column="9">case <expr><literal type="char" pos:line="17" pos:column="14">'\0'<pos:position pos:line="17" pos:column="18"/></literal></expr>:<pos:position pos:line="17" pos:column="19"/></case> 	<expr_stmt><expr><name pos:line="17" pos:column="25">value<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">=<pos:position pos:line="17" pos:column="32"/></operator> <literal type="string" pos:line="17" pos:column="33">"T_NUL"<pos:position pos:line="17" pos:column="40"/></literal></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>	<break pos:line="17" pos:column="49">break;<pos:position pos:line="17" pos:column="55"/></break>
	<default pos:line="18" pos:column="9">default:<pos:position pos:line="18" pos:column="17"/></default>	<expr_stmt><expr><name pos:line="18" pos:column="25">value<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">=<pos:position pos:line="18" pos:column="32"/></operator> <literal type="string" pos:line="18" pos:column="33">"0"<pos:position pos:line="18" pos:column="36"/></literal></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>		<break pos:line="18" pos:column="49">break;<pos:position pos:line="18" pos:column="55"/></break>
	}<pos:position pos:line="19" pos:column="10"/></block></switch>
	<expr_stmt><expr><call><name pos:line="20" pos:column="9">printf<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><literal type="string" pos:line="20" pos:column="16">"%s%c"<pos:position pos:line="20" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="24">value<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><ternary><condition><expr><operator pos:line="20" pos:column="31">(<pos:position pos:line="20" pos:column="32"/></operator><name pos:line="20" pos:column="32">i<pos:position pos:line="20" pos:column="33"/></name> <operator pos:line="20" pos:column="34">&lt;<pos:position pos:line="20" pos:column="38"/></operator> <literal type="number" pos:line="20" pos:column="36">255<pos:position pos:line="20" pos:column="39"/></literal><operator pos:line="20" pos:column="39">)<pos:position pos:line="20" pos:column="40"/></operator></expr> ?<pos:position pos:line="20" pos:column="42"/></condition><then pos:line="20" pos:column="42"> <expr><literal type="char" pos:line="20" pos:column="43">','<pos:position pos:line="20" pos:column="46"/></literal></expr> <pos:position pos:line="20" pos:column="47"/></then><else pos:line="20" pos:column="47">: <expr><literal type="char" pos:line="20" pos:column="49">' '<pos:position pos:line="20" pos:column="52"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="20" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">printf<pos:position pos:line="22" pos:column="11"/></name><argument_list pos:line="22" pos:column="11">(<argument><expr><literal type="string" pos:line="22" pos:column="12">"\n};\n"<pos:position pos:line="22" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>

    <return pos:line="24" pos:column="5">return <expr><literal type="number" pos:line="24" pos:column="12">0<pos:position pos:line="24" pos:column="13"/></literal></expr>;<pos:position pos:line="24" pos:column="14"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
