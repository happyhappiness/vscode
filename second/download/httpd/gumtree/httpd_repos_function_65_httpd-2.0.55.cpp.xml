<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_65_httpd-2.0.55.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">ssl_start_connect<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name><name pos:line="1" pos:column="24">struct<pos:position pos:line="1" pos:column="30"/></name> <name pos:line="1" pos:column="31">connection<pos:position pos:line="1" pos:column="41"/></name></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type> <name pos:line="1" pos:column="44">c<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">BIO<pos:position pos:line="3" pos:column="8"/></name> <modifier pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></modifier></type><name pos:line="3" pos:column="10">bio<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">X509<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">x509cert<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">RSAREF<pos:position pos:line="5" pos:column="14"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">STACK<pos:position pos:line="6" pos:column="10"/></name> <modifier pos:line="6" pos:column="11">*<pos:position pos:line="6" pos:column="12"/></modifier></type><name pos:line="6" pos:column="12">sk<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
<cpp:else pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">else<pos:position pos:line="7" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">STACK_OF<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">X509<pos:position pos:line="8" pos:column="18"/></name></expr></argument>)<pos:position pos:line="8" pos:column="19"/></argument_list></call> <operator pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></operator><name pos:line="8" pos:column="21">sk<pos:position pos:line="8" pos:column="23"/></name></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">i<pos:position pos:line="10" pos:column="10"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="12">count<pos:position pos:line="10" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="19">hdone<pos:position pos:line="10" pos:column="24"/></name> <init pos:line="10" pos:column="25">= <expr><literal type="number" pos:line="10" pos:column="27">0<pos:position pos:line="10" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name></type> <name><name pos:line="11" pos:column="10">ssl_hostname<pos:position pos:line="11" pos:column="22"/></name><index pos:line="11" pos:column="22">[<expr><literal type="number" pos:line="11" pos:column="23">80<pos:position pos:line="11" pos:column="25"/></literal></expr>]<pos:position pos:line="11" pos:column="26"/></index></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>
    
    <comment type="block" pos:line="13" pos:column="5">/* XXX - Verify if it's okay - TBD */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">requests<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">&lt;<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="20">concurrency<pos:position pos:line="14" pos:column="31"/></name></expr>)<pos:position pos:line="14" pos:column="32"/></condition><then pos:line="14" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="9">requests<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">=<pos:position pos:line="15" pos:column="19"/></operator> <name pos:line="15" pos:column="20">concurrency<pos:position pos:line="15" pos:column="31"/></name></expr>;<pos:position pos:line="15" pos:column="32"/></expr_stmt></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><operator pos:line="17" pos:column="10">(<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">started<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">&lt;<pos:position pos:line="17" pos:column="23"/></operator> <name pos:line="17" pos:column="21">requests<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">)<pos:position pos:line="17" pos:column="30"/></operator></expr>)<pos:position pos:line="17" pos:column="31"/></condition><then pos:line="17" pos:column="31">
        <block type="pseudo"><return pos:line="18" pos:column="9">return;<pos:position pos:line="18" pos:column="16"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="20" pos:column="5">c<pos:position pos:line="20" pos:column="6"/></name><operator pos:line="20" pos:column="6">-&gt;<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="8">read<pos:position pos:line="20" pos:column="12"/></name></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <literal type="number" pos:line="20" pos:column="15">0<pos:position pos:line="20" pos:column="16"/></literal></expr>;<pos:position pos:line="20" pos:column="17"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="21" pos:column="5">c<pos:position pos:line="21" pos:column="6"/></name><operator pos:line="21" pos:column="6">-&gt;<pos:position pos:line="21" pos:column="11"/></operator><name pos:line="21" pos:column="8">bread<pos:position pos:line="21" pos:column="13"/></name></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <literal type="number" pos:line="21" pos:column="16">0<pos:position pos:line="21" pos:column="17"/></literal></expr>;<pos:position pos:line="21" pos:column="18"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">c<pos:position pos:line="22" pos:column="6"/></name><operator pos:line="22" pos:column="6">-&gt;<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="8">keepalive<pos:position pos:line="22" pos:column="17"/></name></name> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <literal type="number" pos:line="22" pos:column="20">0<pos:position pos:line="22" pos:column="21"/></literal></expr>;<pos:position pos:line="22" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="23" pos:column="5">c<pos:position pos:line="23" pos:column="6"/></name><operator pos:line="23" pos:column="6">-&gt;<pos:position pos:line="23" pos:column="11"/></operator><name pos:line="23" pos:column="8">cbx<pos:position pos:line="23" pos:column="11"/></name></name> <operator pos:line="23" pos:column="12">=<pos:position pos:line="23" pos:column="13"/></operator> <literal type="number" pos:line="23" pos:column="14">0<pos:position pos:line="23" pos:column="15"/></literal></expr>;<pos:position pos:line="23" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">c<pos:position pos:line="24" pos:column="6"/></name><operator pos:line="24" pos:column="6">-&gt;<pos:position pos:line="24" pos:column="11"/></operator><name pos:line="24" pos:column="8">gotheader<pos:position pos:line="24" pos:column="17"/></name></name> <operator pos:line="24" pos:column="18">=<pos:position pos:line="24" pos:column="19"/></operator> <literal type="number" pos:line="24" pos:column="20">0<pos:position pos:line="24" pos:column="21"/></literal></expr>;<pos:position pos:line="24" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">c<pos:position pos:line="25" pos:column="6"/></name><operator pos:line="25" pos:column="6">-&gt;<pos:position pos:line="25" pos:column="11"/></operator><name pos:line="25" pos:column="8">rwrite<pos:position pos:line="25" pos:column="14"/></name></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <literal type="number" pos:line="25" pos:column="17">0<pos:position pos:line="25" pos:column="18"/></literal></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">c<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">-&gt;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="12">ctx<pos:position pos:line="26" pos:column="15"/></name></name></expr>)<pos:position pos:line="26" pos:column="16"/></condition><then pos:line="26" pos:column="16">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="27" pos:column="9">apr_pool_destroy<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name><name pos:line="27" pos:column="26">c<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="29">ctx<pos:position pos:line="27" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="34"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="28" pos:column="5">apr_pool_create<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><operator pos:line="28" pos:column="21">&amp;<pos:position pos:line="28" pos:column="26"/></operator><name><name pos:line="28" pos:column="22">c<pos:position pos:line="28" pos:column="23"/></name><operator pos:line="28" pos:column="23">-&gt;<pos:position pos:line="28" pos:column="28"/></operator><name pos:line="28" pos:column="25">ctx<pos:position pos:line="28" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="30">cntxt<pos:position pos:line="28" pos:column="35"/></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">(<pos:position pos:line="30" pos:column="10"/></operator><name><name pos:line="30" pos:column="10">c<pos:position pos:line="30" pos:column="11"/></name><operator pos:line="30" pos:column="11">-&gt;<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="13">ssl<pos:position pos:line="30" pos:column="16"/></name></name><operator pos:line="30" pos:column="16">=<pos:position pos:line="30" pos:column="17"/></operator><call><name pos:line="30" pos:column="17">SSL_new<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><name pos:line="30" pos:column="25">ctx<pos:position pos:line="30" pos:column="28"/></name></expr></argument>)<pos:position pos:line="30" pos:column="29"/></argument_list></call><operator pos:line="30" pos:column="29">)<pos:position pos:line="30" pos:column="30"/></operator> <operator pos:line="30" pos:column="31">==<pos:position pos:line="30" pos:column="33"/></operator> <name pos:line="30" pos:column="34">NULL<pos:position pos:line="30" pos:column="38"/></name></expr>)<pos:position pos:line="30" pos:column="39"/></condition><then pos:line="30" pos:column="39">
    <block pos:line="31" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">BIO_printf<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">bio_err<pos:position pos:line="32" pos:column="27"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="32" pos:column="28">"SSL_new failed\n"<pos:position pos:line="32" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">exit<pos:position pos:line="33" pos:column="13"/></name><argument_list pos:line="33" pos:column="13">(<argument><expr><literal type="number" pos:line="33" pos:column="14">1<pos:position pos:line="33" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="36" pos:column="5">ssl_rand_seed<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">()<pos:position pos:line="36" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="38" pos:column="5">c<pos:position pos:line="38" pos:column="6"/></name><operator pos:line="38" pos:column="6">-&gt;<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="8">start<pos:position pos:line="38" pos:column="13"/></name></name> <operator pos:line="38" pos:column="14">=<pos:position pos:line="38" pos:column="15"/></operator> <call><name pos:line="38" pos:column="16">apr_time_now<pos:position pos:line="38" pos:column="28"/></name><argument_list pos:line="38" pos:column="28">()<pos:position pos:line="38" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="39" pos:column="5">memset<pos:position pos:line="39" pos:column="11"/></name><argument_list pos:line="39" pos:column="11">(<argument><expr><name pos:line="39" pos:column="12">ssl_hostname<pos:position pos:line="39" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="26">0<pos:position pos:line="39" pos:column="27"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="29">80<pos:position pos:line="39" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">sprintf<pos:position pos:line="40" pos:column="12"/></name><argument_list pos:line="40" pos:column="12">(<argument><expr><name pos:line="40" pos:column="13">ssl_hostname<pos:position pos:line="40" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="27">"%s:%d"<pos:position pos:line="40" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="36">hostname<pos:position pos:line="40" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="46">port<pos:position pos:line="40" pos:column="50"/></name></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><operator pos:line="42" pos:column="9">(<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">bio<pos:position pos:line="42" pos:column="13"/></name> <operator pos:line="42" pos:column="14">=<pos:position pos:line="42" pos:column="15"/></operator> <call><name pos:line="42" pos:column="16">BIO_new_connect<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><name pos:line="42" pos:column="32">ssl_hostname<pos:position pos:line="42" pos:column="44"/></name></expr></argument>)<pos:position pos:line="42" pos:column="45"/></argument_list></call><operator pos:line="42" pos:column="45">)<pos:position pos:line="42" pos:column="46"/></operator> <operator pos:line="42" pos:column="47">==<pos:position pos:line="42" pos:column="49"/></operator> <name pos:line="42" pos:column="50">NULL<pos:position pos:line="42" pos:column="54"/></name></expr>)<pos:position pos:line="42" pos:column="55"/></condition><then pos:line="42" pos:column="55">
    <block pos:line="43" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">BIO_printf<pos:position pos:line="44" pos:column="19"/></name><argument_list pos:line="44" pos:column="19">(<argument><expr><name pos:line="44" pos:column="20">bio_err<pos:position pos:line="44" pos:column="27"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="44" pos:column="28">"BIO_new_connect failed\n"<pos:position pos:line="44" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="45" pos:column="9">exit<pos:position pos:line="45" pos:column="13"/></name><argument_list pos:line="45" pos:column="13">(<argument><expr><literal type="number" pos:line="45" pos:column="14">1<pos:position pos:line="45" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">SSL_set_bio<pos:position pos:line="47" pos:column="16"/></name><argument_list pos:line="47" pos:column="16">(<argument><expr><name><name pos:line="47" pos:column="17">c<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">-&gt;<pos:position pos:line="47" pos:column="23"/></operator><name pos:line="47" pos:column="20">ssl<pos:position pos:line="47" pos:column="23"/></name></name></expr></argument>,<argument><expr><name pos:line="47" pos:column="24">bio<pos:position pos:line="47" pos:column="27"/></name></expr></argument>,<argument><expr><name pos:line="47" pos:column="28">bio<pos:position pos:line="47" pos:column="31"/></name></expr></argument>)<pos:position pos:line="47" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="48" pos:column="5">SSL_set_connect_state<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><name><name pos:line="48" pos:column="27">c<pos:position pos:line="48" pos:column="28"/></name><operator pos:line="48" pos:column="28">-&gt;<pos:position pos:line="48" pos:column="33"/></operator><name pos:line="48" pos:column="30">ssl<pos:position pos:line="48" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="35"/></expr_stmt>

    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">verbosity<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">&gt;=<pos:position pos:line="50" pos:column="24"/></operator> <literal type="number" pos:line="50" pos:column="22">4<pos:position pos:line="50" pos:column="23"/></literal></expr>)<pos:position pos:line="50" pos:column="24"/></condition><then pos:line="50" pos:column="24">
    <block pos:line="51" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">BIO_set_callback<pos:position pos:line="52" pos:column="25"/></name><argument_list pos:line="52" pos:column="25">(<argument><expr><name pos:line="52" pos:column="26">bio<pos:position pos:line="52" pos:column="29"/></name></expr></argument>,<argument><expr><name pos:line="52" pos:column="30">ssl_print_cb<pos:position pos:line="52" pos:column="42"/></name></expr></argument>)<pos:position pos:line="52" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">BIO_set_callback_arg<pos:position pos:line="53" pos:column="29"/></name><argument_list pos:line="53" pos:column="29">(<argument><expr><name pos:line="53" pos:column="30">bio<pos:position pos:line="53" pos:column="33"/></name></expr></argument>,<argument><expr><operator pos:line="53" pos:column="34">(<pos:position pos:line="53" pos:column="35"/></operator><name pos:line="53" pos:column="35">void<pos:position pos:line="53" pos:column="39"/></name><operator pos:line="53" pos:column="39">*<pos:position pos:line="53" pos:column="40"/></operator><operator pos:line="53" pos:column="40">)<pos:position pos:line="53" pos:column="41"/></operator><name pos:line="53" pos:column="41">bio_err<pos:position pos:line="53" pos:column="48"/></name></expr></argument>)<pos:position pos:line="53" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <while pos:line="56" pos:column="5">while <condition pos:line="56" pos:column="11">(<expr><operator pos:line="56" pos:column="12">!<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="13">hdone<pos:position pos:line="56" pos:column="18"/></name></expr>)<pos:position pos:line="56" pos:column="19"/></condition>
    <block pos:line="57" pos:column="5">{
        <expr_stmt><expr><name pos:line="58" pos:column="9">i<pos:position pos:line="58" pos:column="10"/></name> <operator pos:line="58" pos:column="11">=<pos:position pos:line="58" pos:column="12"/></operator> <call><name pos:line="58" pos:column="13">SSL_do_handshake<pos:position pos:line="58" pos:column="29"/></name><argument_list pos:line="58" pos:column="29">(<argument><expr><name><name pos:line="58" pos:column="30">c<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">-&gt;<pos:position pos:line="58" pos:column="36"/></operator><name pos:line="58" pos:column="33">ssl<pos:position pos:line="58" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt>

        <switch pos:line="60" pos:column="9">switch <condition pos:line="60" pos:column="16">(<expr><call><name pos:line="60" pos:column="17">SSL_get_error<pos:position pos:line="60" pos:column="30"/></name><argument_list pos:line="60" pos:column="30">(<argument><expr><name><name pos:line="60" pos:column="31">c<pos:position pos:line="60" pos:column="32"/></name><operator pos:line="60" pos:column="32">-&gt;<pos:position pos:line="60" pos:column="37"/></operator><name pos:line="60" pos:column="34">ssl<pos:position pos:line="60" pos:column="37"/></name></name></expr></argument>,<argument><expr><name pos:line="60" pos:column="38">i<pos:position pos:line="60" pos:column="39"/></name></expr></argument>)<pos:position pos:line="60" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="41"/></condition>
        <block pos:line="61" pos:column="9">{
            <case pos:line="62" pos:column="13">case <expr><name pos:line="62" pos:column="18">SSL_ERROR_NONE<pos:position pos:line="62" pos:column="32"/></name></expr>:<pos:position pos:line="62" pos:column="33"/></case>
                <expr_stmt><expr><name pos:line="63" pos:column="17">hdone<pos:position pos:line="63" pos:column="22"/></name><operator pos:line="63" pos:column="22">=<pos:position pos:line="63" pos:column="23"/></operator><literal type="number" pos:line="63" pos:column="23">1<pos:position pos:line="63" pos:column="24"/></literal></expr>;<pos:position pos:line="63" pos:column="25"/></expr_stmt>
                <break pos:line="64" pos:column="17">break;<pos:position pos:line="64" pos:column="23"/></break>
            <case pos:line="65" pos:column="13">case <expr><name pos:line="65" pos:column="18">SSL_ERROR_SSL<pos:position pos:line="65" pos:column="31"/></name></expr>:<pos:position pos:line="65" pos:column="32"/></case>
            <case pos:line="66" pos:column="13">case <expr><name pos:line="66" pos:column="18">SSL_ERROR_SYSCALL<pos:position pos:line="66" pos:column="35"/></name></expr>:<pos:position pos:line="66" pos:column="36"/></case>
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">BIO_printf<pos:position pos:line="67" pos:column="27"/></name><argument_list pos:line="67" pos:column="27">(<argument><expr><name pos:line="67" pos:column="28">bio_err<pos:position pos:line="67" pos:column="35"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="67" pos:column="36">"SSL connection failed\n"<pos:position pos:line="67" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="63"/></expr_stmt>
                <expr_stmt><expr><name pos:line="68" pos:column="17">err_conn<pos:position pos:line="68" pos:column="25"/></name><operator pos:line="68" pos:column="25">++<pos:position pos:line="68" pos:column="27"/></operator></expr>;<pos:position pos:line="68" pos:column="28"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="69" pos:column="17">c<pos:position pos:line="69" pos:column="18"/></name><operator pos:line="69" pos:column="18">-&gt;<pos:position pos:line="69" pos:column="23"/></operator><name pos:line="69" pos:column="20">state<pos:position pos:line="69" pos:column="25"/></name></name> <operator pos:line="69" pos:column="26">=<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="28">STATE_UNCONNECTED<pos:position pos:line="69" pos:column="45"/></name></expr>;<pos:position pos:line="69" pos:column="46"/></expr_stmt>
                <if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><name pos:line="70" pos:column="21">bad<pos:position pos:line="70" pos:column="24"/></name><operator pos:line="70" pos:column="24">++<pos:position pos:line="70" pos:column="26"/></operator> <operator pos:line="70" pos:column="27">&gt;<pos:position pos:line="70" pos:column="31"/></operator> <literal type="number" pos:line="70" pos:column="29">10<pos:position pos:line="70" pos:column="31"/></literal></expr>)<pos:position pos:line="70" pos:column="32"/></condition><then pos:line="70" pos:column="32"> <block pos:line="70" pos:column="33">{
                    <expr_stmt><expr><call><name pos:line="71" pos:column="21">SSL_free<pos:position pos:line="71" pos:column="29"/></name> <argument_list pos:line="71" pos:column="30">(<argument><expr><name><name pos:line="71" pos:column="31">c<pos:position pos:line="71" pos:column="32"/></name><operator pos:line="71" pos:column="32">-&gt;<pos:position pos:line="71" pos:column="37"/></operator><name pos:line="71" pos:column="34">ssl<pos:position pos:line="71" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="39"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="72" pos:column="21">BIO_printf<pos:position pos:line="72" pos:column="31"/></name><argument_list pos:line="72" pos:column="31">(<argument><expr><name pos:line="72" pos:column="32">bio_err<pos:position pos:line="72" pos:column="39"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="72" pos:column="40">"\nTest aborted after 10 failures\n\n"<pos:position pos:line="72" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="80"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="73" pos:column="21">exit<pos:position pos:line="73" pos:column="25"/></name> <argument_list pos:line="73" pos:column="26">(<argument><expr><literal type="number" pos:line="73" pos:column="27">1<pos:position pos:line="73" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="30"/></expr_stmt>
                }<pos:position pos:line="74" pos:column="18"/></block></then></if>
                <break pos:line="75" pos:column="17">break;<pos:position pos:line="75" pos:column="23"/></break>
            <case pos:line="76" pos:column="13">case <expr><name pos:line="76" pos:column="18">SSL_ERROR_WANT_READ<pos:position pos:line="76" pos:column="37"/></name></expr>:<pos:position pos:line="76" pos:column="38"/></case>
            <case pos:line="77" pos:column="13">case <expr><name pos:line="77" pos:column="18">SSL_ERROR_WANT_WRITE<pos:position pos:line="77" pos:column="38"/></name></expr>:<pos:position pos:line="77" pos:column="39"/></case>
            <case pos:line="78" pos:column="13">case <expr><name pos:line="78" pos:column="18">SSL_ERROR_WANT_CONNECT<pos:position pos:line="78" pos:column="40"/></name></expr>:<pos:position pos:line="78" pos:column="41"/></case>
                <expr_stmt><expr><call><name pos:line="79" pos:column="17">BIO_printf<pos:position pos:line="79" pos:column="27"/></name><argument_list pos:line="79" pos:column="27">(<argument><expr><name pos:line="79" pos:column="28">bio_err<pos:position pos:line="79" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="37">"Waiting .. sleep(1)\n"<pos:position pos:line="79" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="62"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="80" pos:column="17">apr_sleep<pos:position pos:line="80" pos:column="26"/></name><argument_list pos:line="80" pos:column="26">(<argument><expr><call><name pos:line="80" pos:column="27">apr_time_from_sec<pos:position pos:line="80" pos:column="44"/></name><argument_list pos:line="80" pos:column="44">(<argument><expr><literal type="number" pos:line="80" pos:column="45">1<pos:position pos:line="80" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="80" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="49"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="81" pos:column="17">c<pos:position pos:line="81" pos:column="18"/></name><operator pos:line="81" pos:column="18">-&gt;<pos:position pos:line="81" pos:column="23"/></operator><name pos:line="81" pos:column="20">state<pos:position pos:line="81" pos:column="25"/></name></name> <operator pos:line="81" pos:column="26">=<pos:position pos:line="81" pos:column="27"/></operator> <name pos:line="81" pos:column="28">STATE_CONNECTED<pos:position pos:line="81" pos:column="43"/></name></expr>;<pos:position pos:line="81" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="82" pos:column="17">c<pos:position pos:line="82" pos:column="18"/></name><operator pos:line="82" pos:column="18">-&gt;<pos:position pos:line="82" pos:column="23"/></operator><name pos:line="82" pos:column="20">rwrite<pos:position pos:line="82" pos:column="26"/></name></name> <operator pos:line="82" pos:column="27">=<pos:position pos:line="82" pos:column="28"/></operator> <literal type="number" pos:line="82" pos:column="29">0<pos:position pos:line="82" pos:column="30"/></literal></expr>;<pos:position pos:line="82" pos:column="31"/></expr_stmt>
                <break pos:line="83" pos:column="17">break;<pos:position pos:line="83" pos:column="23"/></break>
            <case pos:line="84" pos:column="13">case <expr><name pos:line="84" pos:column="18">SSL_ERROR_ZERO_RETURN<pos:position pos:line="84" pos:column="39"/></name></expr>:<pos:position pos:line="84" pos:column="40"/></case>
                <expr_stmt><expr><call><name pos:line="85" pos:column="17">BIO_printf<pos:position pos:line="85" pos:column="27"/></name><argument_list pos:line="85" pos:column="27">(<argument><expr><name pos:line="85" pos:column="28">bio_err<pos:position pos:line="85" pos:column="35"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="85" pos:column="36">"socket closed\n"<pos:position pos:line="85" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="55"/></expr_stmt>
                <break pos:line="86" pos:column="17">break;<pos:position pos:line="86" pos:column="23"/></break>
        }<pos:position pos:line="87" pos:column="10"/></block></switch>
    }<pos:position pos:line="88" pos:column="6"/></block></while>
    
    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><name pos:line="90" pos:column="9">verbosity<pos:position pos:line="90" pos:column="18"/></name> <operator pos:line="90" pos:column="19">&gt;=<pos:position pos:line="90" pos:column="24"/></operator> <literal type="number" pos:line="90" pos:column="22">2<pos:position pos:line="90" pos:column="23"/></literal></expr>)<pos:position pos:line="90" pos:column="24"/></condition><then pos:line="90" pos:column="24">
    <block pos:line="91" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">BIO_printf<pos:position pos:line="92" pos:column="19"/></name><argument_list pos:line="92" pos:column="19">(<argument><expr><name pos:line="92" pos:column="20">bio_err<pos:position pos:line="92" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="29">"\n"<pos:position pos:line="92" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="93" pos:column="9">sk<pos:position pos:line="93" pos:column="11"/></name> <operator pos:line="93" pos:column="12">=<pos:position pos:line="93" pos:column="13"/></operator> <call><name pos:line="93" pos:column="14">SSL_get_peer_cert_chain<pos:position pos:line="93" pos:column="37"/></name><argument_list pos:line="93" pos:column="37">(<argument><expr><name><name pos:line="93" pos:column="38">c<pos:position pos:line="93" pos:column="39"/></name><operator pos:line="93" pos:column="39">-&gt;<pos:position pos:line="93" pos:column="44"/></operator><name pos:line="93" pos:column="41">ssl<pos:position pos:line="93" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="46"/></expr_stmt>
<cpp:ifdef pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">ifdef<pos:position pos:line="94" pos:column="7"/></cpp:directive> <name pos:line="94" pos:column="8">RSAREF<pos:position pos:line="94" pos:column="14"/></name></cpp:ifdef>
        <if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><operator pos:line="95" pos:column="13">(<pos:position pos:line="95" pos:column="14"/></operator><name pos:line="95" pos:column="14">count<pos:position pos:line="95" pos:column="19"/></name> <operator pos:line="95" pos:column="20">=<pos:position pos:line="95" pos:column="21"/></operator> <call><name pos:line="95" pos:column="22">sk_num<pos:position pos:line="95" pos:column="28"/></name><argument_list pos:line="95" pos:column="28">(<argument><expr><name pos:line="95" pos:column="29">sk<pos:position pos:line="95" pos:column="31"/></name></expr></argument>)<pos:position pos:line="95" pos:column="32"/></argument_list></call><operator pos:line="95" pos:column="32">)<pos:position pos:line="95" pos:column="33"/></operator> <operator pos:line="95" pos:column="34">&gt;<pos:position pos:line="95" pos:column="38"/></operator> <literal type="number" pos:line="95" pos:column="36">0<pos:position pos:line="95" pos:column="37"/></literal></expr>)<pos:position pos:line="95" pos:column="38"/></condition><then pos:line="95" pos:column="38">
<cpp:else pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">else<pos:position pos:line="96" pos:column="6"/></cpp:directive></cpp:else>
        <block type="pseudo"><if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><operator pos:line="97" pos:column="13">(<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="14">count<pos:position pos:line="97" pos:column="19"/></name> <operator pos:line="97" pos:column="20">=<pos:position pos:line="97" pos:column="21"/></operator> <call><name pos:line="97" pos:column="22">sk_X509_num<pos:position pos:line="97" pos:column="33"/></name><argument_list pos:line="97" pos:column="33">(<argument><expr><name pos:line="97" pos:column="34">sk<pos:position pos:line="97" pos:column="36"/></name></expr></argument>)<pos:position pos:line="97" pos:column="37"/></argument_list></call><operator pos:line="97" pos:column="37">)<pos:position pos:line="97" pos:column="38"/></operator> <operator pos:line="97" pos:column="39">&gt;<pos:position pos:line="97" pos:column="43"/></operator> <literal type="number" pos:line="97" pos:column="41">0<pos:position pos:line="97" pos:column="42"/></literal></expr>)<pos:position pos:line="97" pos:column="43"/></condition><then pos:line="97" pos:column="43">
<cpp:endif pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">endif<pos:position pos:line="98" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="99" pos:column="9">{
            <for pos:line="100" pos:column="13">for <control pos:line="100" pos:column="17">(<init><expr><name pos:line="100" pos:column="18">i<pos:position pos:line="100" pos:column="19"/></name><operator pos:line="100" pos:column="19">=<pos:position pos:line="100" pos:column="20"/></operator><literal type="number" pos:line="100" pos:column="20">1<pos:position pos:line="100" pos:column="21"/></literal></expr>;<pos:position pos:line="100" pos:column="22"/></init> <condition><expr><name pos:line="100" pos:column="23">i<pos:position pos:line="100" pos:column="24"/></name><operator pos:line="100" pos:column="24">&lt;<pos:position pos:line="100" pos:column="28"/></operator><name pos:line="100" pos:column="25">count<pos:position pos:line="100" pos:column="30"/></name></expr>;<pos:position pos:line="100" pos:column="31"/></condition> <incr><expr><name pos:line="100" pos:column="32">i<pos:position pos:line="100" pos:column="33"/></name><operator pos:line="100" pos:column="33">++<pos:position pos:line="100" pos:column="35"/></operator></expr></incr>)<pos:position pos:line="100" pos:column="36"/></control>
            <block pos:line="101" pos:column="13">{
<cpp:ifdef pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">ifdef<pos:position pos:line="102" pos:column="7"/></cpp:directive> <name pos:line="102" pos:column="8">RSAREF<pos:position pos:line="102" pos:column="14"/></name></cpp:ifdef>
                <expr_stmt><expr><name pos:line="103" pos:column="17">x509cert<pos:position pos:line="103" pos:column="25"/></name> <operator pos:line="103" pos:column="26">=<pos:position pos:line="103" pos:column="27"/></operator> <operator pos:line="103" pos:column="28">(<pos:position pos:line="103" pos:column="29"/></operator><name pos:line="103" pos:column="29">X509<pos:position pos:line="103" pos:column="33"/></name> <operator pos:line="103" pos:column="34">*<pos:position pos:line="103" pos:column="35"/></operator><operator pos:line="103" pos:column="35">)<pos:position pos:line="103" pos:column="36"/></operator><call><name pos:line="103" pos:column="36">sk_value<pos:position pos:line="103" pos:column="44"/></name><argument_list pos:line="103" pos:column="44">(<argument><expr><name pos:line="103" pos:column="45">sk<pos:position pos:line="103" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="103" pos:column="48">i<pos:position pos:line="103" pos:column="49"/></name></expr></argument>)<pos:position pos:line="103" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="51"/></expr_stmt>
<cpp:else pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">else<pos:position pos:line="104" pos:column="6"/></cpp:directive></cpp:else>
                <expr_stmt><expr><name pos:line="105" pos:column="17">x509cert<pos:position pos:line="105" pos:column="25"/></name> <operator pos:line="105" pos:column="26">=<pos:position pos:line="105" pos:column="27"/></operator> <operator pos:line="105" pos:column="28">(<pos:position pos:line="105" pos:column="29"/></operator><name pos:line="105" pos:column="29">X509<pos:position pos:line="105" pos:column="33"/></name> <operator pos:line="105" pos:column="34">*<pos:position pos:line="105" pos:column="35"/></operator><operator pos:line="105" pos:column="35">)<pos:position pos:line="105" pos:column="36"/></operator><call><name pos:line="105" pos:column="36">sk_X509_value<pos:position pos:line="105" pos:column="49"/></name><argument_list pos:line="105" pos:column="49">(<argument><expr><name pos:line="105" pos:column="50">sk<pos:position pos:line="105" pos:column="52"/></name></expr></argument>,<argument><expr><name pos:line="105" pos:column="53">i<pos:position pos:line="105" pos:column="54"/></name></expr></argument>)<pos:position pos:line="105" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="56"/></expr_stmt>
<cpp:endif pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">endif<pos:position pos:line="106" pos:column="7"/></cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name pos:line="107" pos:column="17">ssl_print_cert_info<pos:position pos:line="107" pos:column="36"/></name><argument_list pos:line="107" pos:column="36">(<argument><expr><name pos:line="107" pos:column="37">bio_out<pos:position pos:line="107" pos:column="44"/></name></expr></argument>,<argument><expr><name pos:line="107" pos:column="45">x509cert<pos:position pos:line="107" pos:column="53"/></name></expr></argument>)<pos:position pos:line="107" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="108" pos:column="17">X509_free<pos:position pos:line="108" pos:column="26"/></name><argument_list pos:line="108" pos:column="26">(<argument><expr><name pos:line="108" pos:column="27">x509cert<pos:position pos:line="108" pos:column="35"/></name></expr></argument>)<pos:position pos:line="108" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="109" pos:column="14"/></block></for>
        }<pos:position pos:line="110" pos:column="10"/></block></then></if></block></then></if>

        <expr_stmt><expr><name pos:line="112" pos:column="9">x509cert<pos:position pos:line="112" pos:column="17"/></name> <operator pos:line="112" pos:column="18">=<pos:position pos:line="112" pos:column="19"/></operator> <call><name pos:line="112" pos:column="20">SSL_get_peer_certificate<pos:position pos:line="112" pos:column="44"/></name><argument_list pos:line="112" pos:column="44">(<argument><expr><name><name pos:line="112" pos:column="45">c<pos:position pos:line="112" pos:column="46"/></name><operator pos:line="112" pos:column="46">-&gt;<pos:position pos:line="112" pos:column="51"/></operator><name pos:line="112" pos:column="48">ssl<pos:position pos:line="112" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="53"/></expr_stmt>
        <if pos:line="113" pos:column="9">if <condition pos:line="113" pos:column="12">(<expr><name pos:line="113" pos:column="13">x509cert<pos:position pos:line="113" pos:column="21"/></name> <operator pos:line="113" pos:column="22">==<pos:position pos:line="113" pos:column="24"/></operator> <name pos:line="113" pos:column="25">NULL<pos:position pos:line="113" pos:column="29"/></name></expr>)<pos:position pos:line="113" pos:column="30"/></condition><then pos:line="113" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="114" pos:column="13">BIO_printf<pos:position pos:line="114" pos:column="23"/></name><argument_list pos:line="114" pos:column="23">(<argument><expr><name pos:line="114" pos:column="24">bio_out<pos:position pos:line="114" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="33">"Anon DH\n"<pos:position pos:line="114" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="46"/></expr_stmt></block></then>
        <else pos:line="115" pos:column="9">else
        <block pos:line="116" pos:column="9">{
            <expr_stmt><expr><call><name pos:line="117" pos:column="13">BIO_printf<pos:position pos:line="117" pos:column="23"/></name><argument_list pos:line="117" pos:column="23">(<argument><expr><name pos:line="117" pos:column="24">bio_out<pos:position pos:line="117" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="117" pos:column="33">"Peer certificate\n"<pos:position pos:line="117" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="55"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="118" pos:column="13">ssl_print_cert_info<pos:position pos:line="118" pos:column="32"/></name><argument_list pos:line="118" pos:column="32">(<argument><expr><name pos:line="118" pos:column="33">bio_out<pos:position pos:line="118" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="118" pos:column="41">x509cert<pos:position pos:line="118" pos:column="49"/></name></expr></argument>)<pos:position pos:line="118" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="119" pos:column="13">X509_free<pos:position pos:line="119" pos:column="22"/></name><argument_list pos:line="119" pos:column="22">(<argument><expr><name pos:line="119" pos:column="23">x509cert<pos:position pos:line="119" pos:column="31"/></name></expr></argument>)<pos:position pos:line="119" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="120" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name pos:line="122" pos:column="9">ssl_print_connection_info<pos:position pos:line="122" pos:column="34"/></name><argument_list pos:line="122" pos:column="34">(<argument><expr><name pos:line="122" pos:column="35">bio_err<pos:position pos:line="122" pos:column="42"/></name></expr></argument>,<argument><expr><name><name pos:line="122" pos:column="43">c<pos:position pos:line="122" pos:column="44"/></name><operator pos:line="122" pos:column="44">-&gt;<pos:position pos:line="122" pos:column="49"/></operator><name pos:line="122" pos:column="46">ssl<pos:position pos:line="122" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="122" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">SSL_SESSION_print<pos:position pos:line="123" pos:column="26"/></name><argument_list pos:line="123" pos:column="26">(<argument><expr><name pos:line="123" pos:column="27">bio_err<pos:position pos:line="123" pos:column="34"/></name></expr></argument>,<argument><expr><call><name pos:line="123" pos:column="35">SSL_get_session<pos:position pos:line="123" pos:column="50"/></name><argument_list pos:line="123" pos:column="50">(<argument><expr><name><name pos:line="123" pos:column="51">c<pos:position pos:line="123" pos:column="52"/></name><operator pos:line="123" pos:column="52">-&gt;<pos:position pos:line="123" pos:column="57"/></operator><name pos:line="123" pos:column="54">ssl<pos:position pos:line="123" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="123" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="124" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="126" pos:column="5">/* connected first time */</comment>
    <expr_stmt><expr><name pos:line="127" pos:column="5">started<pos:position pos:line="127" pos:column="12"/></name><operator pos:line="127" pos:column="12">++<pos:position pos:line="127" pos:column="14"/></operator></expr>;<pos:position pos:line="127" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="128" pos:column="5">write_request<pos:position pos:line="128" pos:column="18"/></name><argument_list pos:line="128" pos:column="18">(<argument><expr><name pos:line="128" pos:column="19">c<pos:position pos:line="128" pos:column="20"/></name></expr></argument>)<pos:position pos:line="128" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="22"/></expr_stmt>
}<pos:position pos:line="129" pos:column="2"/></block></function></unit>
