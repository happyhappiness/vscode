<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1246_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">zap_sp_and_dup<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">apr_pool_t<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">p<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">const<pos:position pos:line="1" pos:column="49"/></specifier> <name pos:line="1" pos:column="50">char<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">start<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                            <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">end<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">apr_size_t<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">len<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <while pos:line="4" pos:column="5">while <condition pos:line="4" pos:column="11">(<expr><operator pos:line="4" pos:column="12">(<pos:position pos:line="4" pos:column="13"/></operator><name pos:line="4" pos:column="13">start<pos:position pos:line="4" pos:column="18"/></name> <operator pos:line="4" pos:column="19">&lt;<pos:position pos:line="4" pos:column="23"/></operator> <name pos:line="4" pos:column="21">end<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">)<pos:position pos:line="4" pos:column="25"/></operator> <operator pos:line="4" pos:column="26">&amp;&amp;<pos:position pos:line="4" pos:column="36"/></operator> <call><name pos:line="4" pos:column="29">apr_isspace<pos:position pos:line="4" pos:column="40"/></name><argument_list pos:line="4" pos:column="40">(<argument><expr><operator pos:line="4" pos:column="41">*<pos:position pos:line="4" pos:column="42"/></operator><name pos:line="4" pos:column="42">start<pos:position pos:line="4" pos:column="47"/></name></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="4" pos:column="49"/></condition> <block pos:line="4" pos:column="50">{
        <expr_stmt><expr><name pos:line="5" pos:column="9">start<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">++<pos:position pos:line="5" pos:column="16"/></operator></expr>;<pos:position pos:line="5" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="6" pos:column="6"/></block></while>
    <while pos:line="7" pos:column="5">while <condition pos:line="7" pos:column="11">(<expr><operator pos:line="7" pos:column="12">(<pos:position pos:line="7" pos:column="13"/></operator><name pos:line="7" pos:column="13">end<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">&gt;<pos:position pos:line="7" pos:column="21"/></operator> <name pos:line="7" pos:column="19">start<pos:position pos:line="7" pos:column="24"/></name><operator pos:line="7" pos:column="24">)<pos:position pos:line="7" pos:column="25"/></operator> <operator pos:line="7" pos:column="26">&amp;&amp;<pos:position pos:line="7" pos:column="36"/></operator> <call><name pos:line="7" pos:column="29">apr_isspace<pos:position pos:line="7" pos:column="40"/></name><argument_list pos:line="7" pos:column="40">(<argument><expr><operator pos:line="7" pos:column="41">*<pos:position pos:line="7" pos:column="42"/></operator><operator pos:line="7" pos:column="42">(<pos:position pos:line="7" pos:column="43"/></operator><name pos:line="7" pos:column="43">end<pos:position pos:line="7" pos:column="46"/></name> <operator pos:line="7" pos:column="47">-<pos:position pos:line="7" pos:column="48"/></operator> <literal type="number" pos:line="7" pos:column="49">1<pos:position pos:line="7" pos:column="50"/></literal><operator pos:line="7" pos:column="50">)<pos:position pos:line="7" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="7" pos:column="53"/></condition> <block pos:line="7" pos:column="54">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">end<pos:position pos:line="8" pos:column="12"/></name><operator pos:line="8" pos:column="12">--<pos:position pos:line="8" pos:column="14"/></operator></expr>;<pos:position pos:line="8" pos:column="15"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></while>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">len<pos:position pos:line="10" pos:column="12"/></name></expr>)<pos:position pos:line="10" pos:column="13"/></condition><then pos:line="10" pos:column="13"> <block pos:line="10" pos:column="14">{
        <expr_stmt><expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">len<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">=<pos:position pos:line="11" pos:column="15"/></operator> <name pos:line="11" pos:column="16">end<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">-<pos:position pos:line="11" pos:column="21"/></operator> <name pos:line="11" pos:column="22">start<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>
    <return pos:line="13" pos:column="5">return <expr><call><name pos:line="13" pos:column="12">apr_pstrmemdup<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">p<pos:position pos:line="13" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="30">start<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="37">end<pos:position pos:line="13" pos:column="40"/></name> <operator pos:line="13" pos:column="41">-<pos:position pos:line="13" pos:column="42"/></operator> <name pos:line="13" pos:column="43">start<pos:position pos:line="13" pos:column="48"/></name></expr></argument>)<pos:position pos:line="13" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="50"/></return>
}<pos:position pos:line="14" pos:column="2"/></block></function></unit>
