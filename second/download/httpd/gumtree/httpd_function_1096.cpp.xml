<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_1096.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">void<pos:position pos:line="1" pos:column="14"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="15"/></parameter_list>
<block pos:line="2" pos:column="1">{
<decl_stmt><decl><type><name pos:line="3" pos:column="1">int<pos:position pos:line="3" pos:column="4"/></name></type> <name pos:line="3" pos:column="5">i<pos:position pos:line="3" pos:column="6"/></name></decl>;<pos:position pos:line="3" pos:column="7"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="4" pos:column="1">const<pos:position pos:line="4" pos:column="6"/></specifier> <name pos:line="4" pos:column="7">unsigned<pos:position pos:line="4" pos:column="15"/></name> <name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">tables<pos:position pos:line="4" pos:column="28"/></name> <init pos:line="4" pos:column="29">= <expr><call><name pos:line="4" pos:column="31">pcre_maketables<pos:position pos:line="4" pos:column="46"/></name><argument_list pos:line="4" pos:column="46">()<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>

<expr_stmt><expr><call><name pos:line="6" pos:column="1">printf<pos:position pos:line="6" pos:column="7"/></name><argument_list pos:line="6" pos:column="7">(
  <argument><expr><literal type="string" pos:line="7" pos:column="3">"/*************************************************\n"<pos:position pos:line="7" pos:column="57"/></literal>
  <literal type="string" pos:line="8" pos:column="3">"*      Perl-Compatible Regular Expressions       *\n"<pos:position pos:line="8" pos:column="57"/></literal>
  <literal type="string" pos:line="9" pos:column="3">"*************************************************/\n\n"<pos:position pos:line="9" pos:column="59"/></literal>
  <literal type="string" pos:line="10" pos:column="3">"/* This file is automatically written by the dftables auxiliary \n"<pos:position pos:line="10" pos:column="71"/></literal>
  <literal type="string" pos:line="11" pos:column="3">"program. If you edit it by hand, you might like to edit the Makefile to \n"<pos:position pos:line="11" pos:column="79"/></literal>
  <literal type="string" pos:line="12" pos:column="3">"prevent its ever being regenerated.\n\n"<pos:position pos:line="12" pos:column="44"/></literal>
  <literal type="string" pos:line="13" pos:column="3">"This file is #included in the compilation of pcre.c to build the default\n"<pos:position pos:line="13" pos:column="79"/></literal>
  <literal type="string" pos:line="14" pos:column="3">"character tables which are used when no tables are passed to the compile\n"<pos:position pos:line="14" pos:column="79"/></literal>
  <literal type="string" pos:line="15" pos:column="3">"function. */\n\n"<pos:position pos:line="15" pos:column="21"/></literal>
  <literal type="string" pos:line="16" pos:column="3">"static unsigned char pcre_default_tables[] = {\n\n"<pos:position pos:line="16" pos:column="55"/></literal>
  <literal type="string" pos:line="17" pos:column="3">"/* This table is a lower casing table. */\n\n"<pos:position pos:line="17" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>

<expr_stmt><expr><call><name pos:line="19" pos:column="1">printf<pos:position pos:line="19" pos:column="7"/></name><argument_list pos:line="19" pos:column="7">(<argument><expr><literal type="string" pos:line="19" pos:column="8">"  "<pos:position pos:line="19" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="14"/></expr_stmt>
<for pos:line="20" pos:column="1">for <control pos:line="20" pos:column="5">(<init><expr><name pos:line="20" pos:column="6">i<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">=<pos:position pos:line="20" pos:column="9"/></operator> <literal type="number" pos:line="20" pos:column="10">0<pos:position pos:line="20" pos:column="11"/></literal></expr>;<pos:position pos:line="20" pos:column="12"/></init> <condition><expr><name pos:line="20" pos:column="13">i<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">&lt;<pos:position pos:line="20" pos:column="19"/></operator> <literal type="number" pos:line="20" pos:column="17">256<pos:position pos:line="20" pos:column="20"/></literal></expr>;<pos:position pos:line="20" pos:column="21"/></condition> <incr><expr><name pos:line="20" pos:column="22">i<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">++<pos:position pos:line="20" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="20" pos:column="26"/></control>
  <block pos:line="21" pos:column="3">{
  <if pos:line="22" pos:column="3">if <condition pos:line="22" pos:column="6">(<expr><operator pos:line="22" pos:column="7">(<pos:position pos:line="22" pos:column="8"/></operator><name pos:line="22" pos:column="8">i<pos:position pos:line="22" pos:column="9"/></name> <operator pos:line="22" pos:column="10">&amp;<pos:position pos:line="22" pos:column="15"/></operator> <literal type="number" pos:line="22" pos:column="12">7<pos:position pos:line="22" pos:column="13"/></literal><operator pos:line="22" pos:column="13">)<pos:position pos:line="22" pos:column="14"/></operator> <operator pos:line="22" pos:column="15">==<pos:position pos:line="22" pos:column="17"/></operator> <literal type="number" pos:line="22" pos:column="18">0<pos:position pos:line="22" pos:column="19"/></literal> <operator pos:line="22" pos:column="20">&amp;&amp;<pos:position pos:line="22" pos:column="30"/></operator> <name pos:line="22" pos:column="23">i<pos:position pos:line="22" pos:column="24"/></name> <operator pos:line="22" pos:column="25">!=<pos:position pos:line="22" pos:column="27"/></operator> <literal type="number" pos:line="22" pos:column="28">0<pos:position pos:line="22" pos:column="29"/></literal></expr>)<pos:position pos:line="22" pos:column="30"/></condition><then pos:line="22" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="22" pos:column="31">printf<pos:position pos:line="22" pos:column="37"/></name><argument_list pos:line="22" pos:column="37">(<argument><expr><literal type="string" pos:line="22" pos:column="38">"\n  "<pos:position pos:line="22" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="46"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="23" pos:column="3">printf<pos:position pos:line="23" pos:column="9"/></name><argument_list pos:line="23" pos:column="9">(<argument><expr><literal type="string" pos:line="23" pos:column="10">"%3d"<pos:position pos:line="23" pos:column="15"/></literal></expr></argument>, <argument><expr><operator pos:line="23" pos:column="17">*<pos:position pos:line="23" pos:column="18"/></operator><name pos:line="23" pos:column="18">tables<pos:position pos:line="23" pos:column="24"/></name><operator pos:line="23" pos:column="24">++<pos:position pos:line="23" pos:column="26"/></operator></expr></argument>)<pos:position pos:line="23" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>
  <if pos:line="24" pos:column="3">if <condition pos:line="24" pos:column="6">(<expr><name pos:line="24" pos:column="7">i<pos:position pos:line="24" pos:column="8"/></name> <operator pos:line="24" pos:column="9">!=<pos:position pos:line="24" pos:column="11"/></operator> <literal type="number" pos:line="24" pos:column="12">255<pos:position pos:line="24" pos:column="15"/></literal></expr>)<pos:position pos:line="24" pos:column="16"/></condition><then pos:line="24" pos:column="16"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="24" pos:column="17">printf<pos:position pos:line="24" pos:column="23"/></name><argument_list pos:line="24" pos:column="23">(<argument><expr><literal type="string" pos:line="24" pos:column="24">","<pos:position pos:line="24" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="29"/></expr_stmt></block></then></if>
  }<pos:position pos:line="25" pos:column="4"/></block></for>
<expr_stmt><expr><call><name pos:line="26" pos:column="1">printf<pos:position pos:line="26" pos:column="7"/></name><argument_list pos:line="26" pos:column="7">(<argument><expr><literal type="string" pos:line="26" pos:column="8">",\n\n"<pos:position pos:line="26" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>

<expr_stmt><expr><call><name pos:line="28" pos:column="1">printf<pos:position pos:line="28" pos:column="7"/></name><argument_list pos:line="28" pos:column="7">(<argument><expr><literal type="string" pos:line="28" pos:column="8">"/* This table is a case flipping table. */\n\n"<pos:position pos:line="28" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="58"/></expr_stmt>

<expr_stmt><expr><call><name pos:line="30" pos:column="1">printf<pos:position pos:line="30" pos:column="7"/></name><argument_list pos:line="30" pos:column="7">(<argument><expr><literal type="string" pos:line="30" pos:column="8">"  "<pos:position pos:line="30" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="14"/></expr_stmt>
<for pos:line="31" pos:column="1">for <control pos:line="31" pos:column="5">(<init><expr><name pos:line="31" pos:column="6">i<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <literal type="number" pos:line="31" pos:column="10">0<pos:position pos:line="31" pos:column="11"/></literal></expr>;<pos:position pos:line="31" pos:column="12"/></init> <condition><expr><name pos:line="31" pos:column="13">i<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">&lt;<pos:position pos:line="31" pos:column="19"/></operator> <literal type="number" pos:line="31" pos:column="17">256<pos:position pos:line="31" pos:column="20"/></literal></expr>;<pos:position pos:line="31" pos:column="21"/></condition> <incr><expr><name pos:line="31" pos:column="22">i<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">++<pos:position pos:line="31" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="31" pos:column="26"/></control>
  <block pos:line="32" pos:column="3">{
  <if pos:line="33" pos:column="3">if <condition pos:line="33" pos:column="6">(<expr><operator pos:line="33" pos:column="7">(<pos:position pos:line="33" pos:column="8"/></operator><name pos:line="33" pos:column="8">i<pos:position pos:line="33" pos:column="9"/></name> <operator pos:line="33" pos:column="10">&amp;<pos:position pos:line="33" pos:column="15"/></operator> <literal type="number" pos:line="33" pos:column="12">7<pos:position pos:line="33" pos:column="13"/></literal><operator pos:line="33" pos:column="13">)<pos:position pos:line="33" pos:column="14"/></operator> <operator pos:line="33" pos:column="15">==<pos:position pos:line="33" pos:column="17"/></operator> <literal type="number" pos:line="33" pos:column="18">0<pos:position pos:line="33" pos:column="19"/></literal> <operator pos:line="33" pos:column="20">&amp;&amp;<pos:position pos:line="33" pos:column="30"/></operator> <name pos:line="33" pos:column="23">i<pos:position pos:line="33" pos:column="24"/></name> <operator pos:line="33" pos:column="25">!=<pos:position pos:line="33" pos:column="27"/></operator> <literal type="number" pos:line="33" pos:column="28">0<pos:position pos:line="33" pos:column="29"/></literal></expr>)<pos:position pos:line="33" pos:column="30"/></condition><then pos:line="33" pos:column="30"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="33" pos:column="31">printf<pos:position pos:line="33" pos:column="37"/></name><argument_list pos:line="33" pos:column="37">(<argument><expr><literal type="string" pos:line="33" pos:column="38">"\n  "<pos:position pos:line="33" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt></block></then></if>
  <expr_stmt><expr><call><name pos:line="34" pos:column="3">printf<pos:position pos:line="34" pos:column="9"/></name><argument_list pos:line="34" pos:column="9">(<argument><expr><literal type="string" pos:line="34" pos:column="10">"%3d"<pos:position pos:line="34" pos:column="15"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="17">*<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">tables<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">++<pos:position pos:line="34" pos:column="26"/></operator></expr></argument>)<pos:position pos:line="34" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>
  <if pos:line="35" pos:column="3">if <condition pos:line="35" pos:column="6">(<expr><name pos:line="35" pos:column="7">i<pos:position pos:line="35" pos:column="8"/></name> <operator pos:line="35" pos:column="9">!=<pos:position pos:line="35" pos:column="11"/></operator> <literal type="number" pos:line="35" pos:column="12">255<pos:position pos:line="35" pos:column="15"/></literal></expr>)<pos:position pos:line="35" pos:column="16"/></condition><then pos:line="35" pos:column="16"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="35" pos:column="17">printf<pos:position pos:line="35" pos:column="23"/></name><argument_list pos:line="35" pos:column="23">(<argument><expr><literal type="string" pos:line="35" pos:column="24">","<pos:position pos:line="35" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt></block></then></if>
  }<pos:position pos:line="36" pos:column="4"/></block></for>
<expr_stmt><expr><call><name pos:line="37" pos:column="1">printf<pos:position pos:line="37" pos:column="7"/></name><argument_list pos:line="37" pos:column="7">(<argument><expr><literal type="string" pos:line="37" pos:column="8">",\n\n"<pos:position pos:line="37" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="17"/></expr_stmt>

<expr_stmt><expr><call><name pos:line="39" pos:column="1">printf<pos:position pos:line="39" pos:column="7"/></name><argument_list pos:line="39" pos:column="7">(
  <argument><expr><literal type="string" pos:line="40" pos:column="3">"/* This table contains bit maps for various character classes.\n"<pos:position pos:line="40" pos:column="69"/></literal>
  <literal type="string" pos:line="41" pos:column="3">"Each map is 32 bytes long and the bits run from the least\n"<pos:position pos:line="41" pos:column="64"/></literal>
  <literal type="string" pos:line="42" pos:column="3">"significant end of each byte. The classes that have their own\n"<pos:position pos:line="42" pos:column="68"/></literal>
  <literal type="string" pos:line="43" pos:column="3">"maps are: space, xdigit, digit, upper, lower, word, graph\n"<pos:position pos:line="43" pos:column="64"/></literal>
  <literal type="string" pos:line="44" pos:column="3">"print, punct, and cntrl. Other classes are built from combinations. */\n\n"<pos:position pos:line="44" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="81"/></expr_stmt>

<expr_stmt><expr><call><name pos:line="46" pos:column="1">printf<pos:position pos:line="46" pos:column="7"/></name><argument_list pos:line="46" pos:column="7">(<argument><expr><literal type="string" pos:line="46" pos:column="8">"  "<pos:position pos:line="46" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="14"/></expr_stmt>
<for pos:line="47" pos:column="1">for <control pos:line="47" pos:column="5">(<init><expr><name pos:line="47" pos:column="6">i<pos:position pos:line="47" pos:column="7"/></name> <operator pos:line="47" pos:column="8">=<pos:position pos:line="47" pos:column="9"/></operator> <literal type="number" pos:line="47" pos:column="10">0<pos:position pos:line="47" pos:column="11"/></literal></expr>;<pos:position pos:line="47" pos:column="12"/></init> <condition><expr><name pos:line="47" pos:column="13">i<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">&lt;<pos:position pos:line="47" pos:column="19"/></operator> <name pos:line="47" pos:column="17">cbit_length<pos:position pos:line="47" pos:column="28"/></name></expr>;<pos:position pos:line="47" pos:column="29"/></condition> <incr><expr><name pos:line="47" pos:column="30">i<pos:position pos:line="47" pos:column="31"/></name><operator pos:line="47" pos:column="31">++<pos:position pos:line="47" pos:column="33"/></operator></expr></incr>)<pos:position pos:line="47" pos:column="34"/></control>
  <block pos:line="48" pos:column="3">{
  <if pos:line="49" pos:column="3">if <condition pos:line="49" pos:column="6">(<expr><operator pos:line="49" pos:column="7">(<pos:position pos:line="49" pos:column="8"/></operator><name pos:line="49" pos:column="8">i<pos:position pos:line="49" pos:column="9"/></name> <operator pos:line="49" pos:column="10">&amp;<pos:position pos:line="49" pos:column="15"/></operator> <literal type="number" pos:line="49" pos:column="12">7<pos:position pos:line="49" pos:column="13"/></literal><operator pos:line="49" pos:column="13">)<pos:position pos:line="49" pos:column="14"/></operator> <operator pos:line="49" pos:column="15">==<pos:position pos:line="49" pos:column="17"/></operator> <literal type="number" pos:line="49" pos:column="18">0<pos:position pos:line="49" pos:column="19"/></literal> <operator pos:line="49" pos:column="20">&amp;&amp;<pos:position pos:line="49" pos:column="30"/></operator> <name pos:line="49" pos:column="23">i<pos:position pos:line="49" pos:column="24"/></name> <operator pos:line="49" pos:column="25">!=<pos:position pos:line="49" pos:column="27"/></operator> <literal type="number" pos:line="49" pos:column="28">0<pos:position pos:line="49" pos:column="29"/></literal></expr>)<pos:position pos:line="49" pos:column="30"/></condition><then pos:line="49" pos:column="30">
    <block pos:line="50" pos:column="5">{
    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><operator pos:line="51" pos:column="9">(<pos:position pos:line="51" pos:column="10"/></operator><name pos:line="51" pos:column="10">i<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">&amp;<pos:position pos:line="51" pos:column="17"/></operator> <literal type="number" pos:line="51" pos:column="14">31<pos:position pos:line="51" pos:column="16"/></literal><operator pos:line="51" pos:column="16">)<pos:position pos:line="51" pos:column="17"/></operator> <operator pos:line="51" pos:column="18">==<pos:position pos:line="51" pos:column="20"/></operator> <literal type="number" pos:line="51" pos:column="21">0<pos:position pos:line="51" pos:column="22"/></literal></expr>)<pos:position pos:line="51" pos:column="23"/></condition><then pos:line="51" pos:column="23"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="51" pos:column="24">printf<pos:position pos:line="51" pos:column="30"/></name><argument_list pos:line="51" pos:column="30">(<argument><expr><literal type="string" pos:line="51" pos:column="31">"\n"<pos:position pos:line="51" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="37"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">printf<pos:position pos:line="52" pos:column="11"/></name><argument_list pos:line="52" pos:column="11">(<argument><expr><literal type="string" pos:line="52" pos:column="12">"\n  "<pos:position pos:line="52" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="54" pos:column="3">printf<pos:position pos:line="54" pos:column="9"/></name><argument_list pos:line="54" pos:column="9">(<argument><expr><literal type="string" pos:line="54" pos:column="10">"0x%02x"<pos:position pos:line="54" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="54" pos:column="20">*<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="21">tables<pos:position pos:line="54" pos:column="27"/></name><operator pos:line="54" pos:column="27">++<pos:position pos:line="54" pos:column="29"/></operator></expr></argument>)<pos:position pos:line="54" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>
  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><name pos:line="55" pos:column="7">i<pos:position pos:line="55" pos:column="8"/></name> <operator pos:line="55" pos:column="9">!=<pos:position pos:line="55" pos:column="11"/></operator> <name pos:line="55" pos:column="12">cbit_length<pos:position pos:line="55" pos:column="23"/></name> <operator pos:line="55" pos:column="24">-<pos:position pos:line="55" pos:column="25"/></operator> <literal type="number" pos:line="55" pos:column="26">1<pos:position pos:line="55" pos:column="27"/></literal></expr>)<pos:position pos:line="55" pos:column="28"/></condition><then pos:line="55" pos:column="28"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="55" pos:column="29">printf<pos:position pos:line="55" pos:column="35"/></name><argument_list pos:line="55" pos:column="35">(<argument><expr><literal type="string" pos:line="55" pos:column="36">","<pos:position pos:line="55" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="41"/></expr_stmt></block></then></if>
  }<pos:position pos:line="56" pos:column="4"/></block></for>
<expr_stmt><expr><call><name pos:line="57" pos:column="1">printf<pos:position pos:line="57" pos:column="7"/></name><argument_list pos:line="57" pos:column="7">(<argument><expr><literal type="string" pos:line="57" pos:column="8">",\n\n"<pos:position pos:line="57" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="17"/></expr_stmt>

<expr_stmt><expr><call><name pos:line="59" pos:column="1">printf<pos:position pos:line="59" pos:column="7"/></name><argument_list pos:line="59" pos:column="7">(
  <argument><expr><literal type="string" pos:line="60" pos:column="3">"/* This table identifies various classes of character by individual bits:\n"<pos:position pos:line="60" pos:column="80"/></literal>
  <literal type="string" pos:line="61" pos:column="3">"  0x%02x   white space character\n"<pos:position pos:line="61" pos:column="39"/></literal>
  <literal type="string" pos:line="62" pos:column="3">"  0x%02x   letter\n"<pos:position pos:line="62" pos:column="24"/></literal>
  <literal type="string" pos:line="63" pos:column="3">"  0x%02x   decimal digit\n"<pos:position pos:line="63" pos:column="31"/></literal>
  <literal type="string" pos:line="64" pos:column="3">"  0x%02x   hexadecimal digit\n"<pos:position pos:line="64" pos:column="35"/></literal>
  <literal type="string" pos:line="65" pos:column="3">"  0x%02x   alphanumeric or '_'\n"<pos:position pos:line="65" pos:column="37"/></literal>
  <literal type="string" pos:line="66" pos:column="3">"  0x%02x   regular expression metacharacter or binary zero\n*/\n\n"<pos:position pos:line="66" pos:column="71"/></literal></expr></argument>,
  <argument><expr><name pos:line="67" pos:column="3">ctype_space<pos:position pos:line="67" pos:column="14"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="16">ctype_letter<pos:position pos:line="67" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="30">ctype_digit<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="43">ctype_xdigit<pos:position pos:line="67" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="57">ctype_word<pos:position pos:line="67" pos:column="67"/></name></expr></argument>,
  <argument><expr><name pos:line="68" pos:column="3">ctype_meta<pos:position pos:line="68" pos:column="13"/></name></expr></argument>)<pos:position pos:line="68" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="15"/></expr_stmt>

<expr_stmt><expr><call><name pos:line="70" pos:column="1">printf<pos:position pos:line="70" pos:column="7"/></name><argument_list pos:line="70" pos:column="7">(<argument><expr><literal type="string" pos:line="70" pos:column="8">"  "<pos:position pos:line="70" pos:column="12"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="13"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="14"/></expr_stmt>
<for pos:line="71" pos:column="1">for <control pos:line="71" pos:column="5">(<init><expr><name pos:line="71" pos:column="6">i<pos:position pos:line="71" pos:column="7"/></name> <operator pos:line="71" pos:column="8">=<pos:position pos:line="71" pos:column="9"/></operator> <literal type="number" pos:line="71" pos:column="10">0<pos:position pos:line="71" pos:column="11"/></literal></expr>;<pos:position pos:line="71" pos:column="12"/></init> <condition><expr><name pos:line="71" pos:column="13">i<pos:position pos:line="71" pos:column="14"/></name> <operator pos:line="71" pos:column="15">&lt;<pos:position pos:line="71" pos:column="19"/></operator> <literal type="number" pos:line="71" pos:column="17">256<pos:position pos:line="71" pos:column="20"/></literal></expr>;<pos:position pos:line="71" pos:column="21"/></condition> <incr><expr><name pos:line="71" pos:column="22">i<pos:position pos:line="71" pos:column="23"/></name><operator pos:line="71" pos:column="23">++<pos:position pos:line="71" pos:column="25"/></operator></expr></incr>)<pos:position pos:line="71" pos:column="26"/></control>
  <block pos:line="72" pos:column="3">{
  <if pos:line="73" pos:column="3">if <condition pos:line="73" pos:column="6">(<expr><operator pos:line="73" pos:column="7">(<pos:position pos:line="73" pos:column="8"/></operator><name pos:line="73" pos:column="8">i<pos:position pos:line="73" pos:column="9"/></name> <operator pos:line="73" pos:column="10">&amp;<pos:position pos:line="73" pos:column="15"/></operator> <literal type="number" pos:line="73" pos:column="12">7<pos:position pos:line="73" pos:column="13"/></literal><operator pos:line="73" pos:column="13">)<pos:position pos:line="73" pos:column="14"/></operator> <operator pos:line="73" pos:column="15">==<pos:position pos:line="73" pos:column="17"/></operator> <literal type="number" pos:line="73" pos:column="18">0<pos:position pos:line="73" pos:column="19"/></literal> <operator pos:line="73" pos:column="20">&amp;&amp;<pos:position pos:line="73" pos:column="30"/></operator> <name pos:line="73" pos:column="23">i<pos:position pos:line="73" pos:column="24"/></name> <operator pos:line="73" pos:column="25">!=<pos:position pos:line="73" pos:column="27"/></operator> <literal type="number" pos:line="73" pos:column="28">0<pos:position pos:line="73" pos:column="29"/></literal></expr>)<pos:position pos:line="73" pos:column="30"/></condition><then pos:line="73" pos:column="30">
    <block pos:line="74" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">printf<pos:position pos:line="75" pos:column="11"/></name><argument_list pos:line="75" pos:column="11">(<argument><expr><literal type="string" pos:line="75" pos:column="12">" /* "<pos:position pos:line="75" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="20"/></expr_stmt>
    <if pos:line="76" pos:column="5">if <condition pos:line="76" pos:column="8">(<expr><call><name pos:line="76" pos:column="9">isprint<pos:position pos:line="76" pos:column="16"/></name><argument_list pos:line="76" pos:column="16">(<argument><expr><name pos:line="76" pos:column="17">i<pos:position pos:line="76" pos:column="18"/></name><operator pos:line="76" pos:column="18">-<pos:position pos:line="76" pos:column="19"/></operator><literal type="number" pos:line="76" pos:column="19">8<pos:position pos:line="76" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="22"/></condition><then pos:line="76" pos:column="22"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="76" pos:column="23">printf<pos:position pos:line="76" pos:column="29"/></name><argument_list pos:line="76" pos:column="29">(<argument><expr><literal type="string" pos:line="76" pos:column="30">" %c -"<pos:position pos:line="76" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="39">i<pos:position pos:line="76" pos:column="40"/></name><operator pos:line="76" pos:column="40">-<pos:position pos:line="76" pos:column="41"/></operator><literal type="number" pos:line="76" pos:column="41">8<pos:position pos:line="76" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="44"/></expr_stmt></block></then>
      <else pos:line="77" pos:column="7">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="77" pos:column="12">printf<pos:position pos:line="77" pos:column="18"/></name><argument_list pos:line="77" pos:column="18">(<argument><expr><literal type="string" pos:line="77" pos:column="19">"%3d-"<pos:position pos:line="77" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="77" pos:column="27">i<pos:position pos:line="77" pos:column="28"/></name><operator pos:line="77" pos:column="28">-<pos:position pos:line="77" pos:column="29"/></operator><literal type="number" pos:line="77" pos:column="29">8<pos:position pos:line="77" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="32"/></expr_stmt></block></else></if>
    <if pos:line="78" pos:column="5">if <condition pos:line="78" pos:column="8">(<expr><call><name pos:line="78" pos:column="9">isprint<pos:position pos:line="78" pos:column="16"/></name><argument_list pos:line="78" pos:column="16">(<argument><expr><name pos:line="78" pos:column="17">i<pos:position pos:line="78" pos:column="18"/></name><operator pos:line="78" pos:column="18">-<pos:position pos:line="78" pos:column="19"/></operator><literal type="number" pos:line="78" pos:column="19">1<pos:position pos:line="78" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="22"/></condition><then pos:line="78" pos:column="22"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="78" pos:column="23">printf<pos:position pos:line="78" pos:column="29"/></name><argument_list pos:line="78" pos:column="29">(<argument><expr><literal type="string" pos:line="78" pos:column="30">" %c "<pos:position pos:line="78" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="38">i<pos:position pos:line="78" pos:column="39"/></name><operator pos:line="78" pos:column="39">-<pos:position pos:line="78" pos:column="40"/></operator><literal type="number" pos:line="78" pos:column="40">1<pos:position pos:line="78" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="43"/></expr_stmt></block></then>
      <else pos:line="79" pos:column="7">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="79" pos:column="12">printf<pos:position pos:line="79" pos:column="18"/></name><argument_list pos:line="79" pos:column="18">(<argument><expr><literal type="string" pos:line="79" pos:column="19">"%3d"<pos:position pos:line="79" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="79" pos:column="26">i<pos:position pos:line="79" pos:column="27"/></name><operator pos:line="79" pos:column="27">-<pos:position pos:line="79" pos:column="28"/></operator><literal type="number" pos:line="79" pos:column="28">1<pos:position pos:line="79" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="31"/></expr_stmt></block></else></if>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">printf<pos:position pos:line="80" pos:column="11"/></name><argument_list pos:line="80" pos:column="11">(<argument><expr><literal type="string" pos:line="80" pos:column="12">" */\n  "<pos:position pos:line="80" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if>
  <expr_stmt><expr><call><name pos:line="82" pos:column="3">printf<pos:position pos:line="82" pos:column="9"/></name><argument_list pos:line="82" pos:column="9">(<argument><expr><literal type="string" pos:line="82" pos:column="10">"0x%02x"<pos:position pos:line="82" pos:column="18"/></literal></expr></argument>, <argument><expr><operator pos:line="82" pos:column="20">*<pos:position pos:line="82" pos:column="21"/></operator><name pos:line="82" pos:column="21">tables<pos:position pos:line="82" pos:column="27"/></name><operator pos:line="82" pos:column="27">++<pos:position pos:line="82" pos:column="29"/></operator></expr></argument>)<pos:position pos:line="82" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="31"/></expr_stmt>
  <if pos:line="83" pos:column="3">if <condition pos:line="83" pos:column="6">(<expr><name pos:line="83" pos:column="7">i<pos:position pos:line="83" pos:column="8"/></name> <operator pos:line="83" pos:column="9">!=<pos:position pos:line="83" pos:column="11"/></operator> <literal type="number" pos:line="83" pos:column="12">255<pos:position pos:line="83" pos:column="15"/></literal></expr>)<pos:position pos:line="83" pos:column="16"/></condition><then pos:line="83" pos:column="16"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="17">printf<pos:position pos:line="83" pos:column="23"/></name><argument_list pos:line="83" pos:column="23">(<argument><expr><literal type="string" pos:line="83" pos:column="24">","<pos:position pos:line="83" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="29"/></expr_stmt></block></then></if>
  }<pos:position pos:line="84" pos:column="4"/></block></for>

<expr_stmt><expr><call><name pos:line="86" pos:column="1">printf<pos:position pos:line="86" pos:column="7"/></name><argument_list pos:line="86" pos:column="7">(<argument><expr><literal type="string" pos:line="86" pos:column="8">"};/* "<pos:position pos:line="86" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="17"/></expr_stmt>
<if pos:line="87" pos:column="1">if <condition pos:line="87" pos:column="4">(<expr><call><name pos:line="87" pos:column="5">isprint<pos:position pos:line="87" pos:column="12"/></name><argument_list pos:line="87" pos:column="12">(<argument><expr><name pos:line="87" pos:column="13">i<pos:position pos:line="87" pos:column="14"/></name><operator pos:line="87" pos:column="14">-<pos:position pos:line="87" pos:column="15"/></operator><literal type="number" pos:line="87" pos:column="15">8<pos:position pos:line="87" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="17"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="18"/></condition><then pos:line="87" pos:column="18"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="87" pos:column="19">printf<pos:position pos:line="87" pos:column="25"/></name><argument_list pos:line="87" pos:column="25">(<argument><expr><literal type="string" pos:line="87" pos:column="26">" %c -"<pos:position pos:line="87" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="35">i<pos:position pos:line="87" pos:column="36"/></name><operator pos:line="87" pos:column="36">-<pos:position pos:line="87" pos:column="37"/></operator><literal type="number" pos:line="87" pos:column="37">8<pos:position pos:line="87" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="40"/></expr_stmt></block></then>
  <else pos:line="88" pos:column="3">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="8">printf<pos:position pos:line="88" pos:column="14"/></name><argument_list pos:line="88" pos:column="14">(<argument><expr><literal type="string" pos:line="88" pos:column="15">"%3d-"<pos:position pos:line="88" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="88" pos:column="23">i<pos:position pos:line="88" pos:column="24"/></name><operator pos:line="88" pos:column="24">-<pos:position pos:line="88" pos:column="25"/></operator><literal type="number" pos:line="88" pos:column="25">8<pos:position pos:line="88" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="28"/></expr_stmt></block></else></if>
<if pos:line="89" pos:column="1">if <condition pos:line="89" pos:column="4">(<expr><call><name pos:line="89" pos:column="5">isprint<pos:position pos:line="89" pos:column="12"/></name><argument_list pos:line="89" pos:column="12">(<argument><expr><name pos:line="89" pos:column="13">i<pos:position pos:line="89" pos:column="14"/></name><operator pos:line="89" pos:column="14">-<pos:position pos:line="89" pos:column="15"/></operator><literal type="number" pos:line="89" pos:column="15">1<pos:position pos:line="89" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="17"/></argument_list></call></expr>)<pos:position pos:line="89" pos:column="18"/></condition><then pos:line="89" pos:column="18"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="89" pos:column="19">printf<pos:position pos:line="89" pos:column="25"/></name><argument_list pos:line="89" pos:column="25">(<argument><expr><literal type="string" pos:line="89" pos:column="26">" %c "<pos:position pos:line="89" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="34">i<pos:position pos:line="89" pos:column="35"/></name><operator pos:line="89" pos:column="35">-<pos:position pos:line="89" pos:column="36"/></operator><literal type="number" pos:line="89" pos:column="36">1<pos:position pos:line="89" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="39"/></expr_stmt></block></then>
  <else pos:line="90" pos:column="3">else <block type="pseudo"><expr_stmt><expr><call><name pos:line="90" pos:column="8">printf<pos:position pos:line="90" pos:column="14"/></name><argument_list pos:line="90" pos:column="14">(<argument><expr><literal type="string" pos:line="90" pos:column="15">"%3d"<pos:position pos:line="90" pos:column="20"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="22">i<pos:position pos:line="90" pos:column="23"/></name><operator pos:line="90" pos:column="23">-<pos:position pos:line="90" pos:column="24"/></operator><literal type="number" pos:line="90" pos:column="24">1<pos:position pos:line="90" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="27"/></expr_stmt></block></else></if>
<expr_stmt><expr><call><name pos:line="91" pos:column="1">printf<pos:position pos:line="91" pos:column="7"/></name><argument_list pos:line="91" pos:column="7">(<argument><expr><literal type="string" pos:line="91" pos:column="8">" */\n\n/* End of chartables.c */\n"<pos:position pos:line="91" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="46"/></expr_stmt>

<return pos:line="93" pos:column="1">return <expr><literal type="number" pos:line="93" pos:column="8">0<pos:position pos:line="93" pos:column="9"/></literal></expr>;<pos:position pos:line="93" pos:column="10"/></return>
}<pos:position pos:line="94" pos:column="2"/></block></function></unit>
