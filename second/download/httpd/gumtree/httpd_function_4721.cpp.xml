<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_4721.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">ssl_io_filter_coalesce<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">ap_filter_t<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">f<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>,
                                           <parameter><decl><type><name pos:line="2" pos:column="44">apr_bucket_brigade<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">bb<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_bucket<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">e<pos:position pos:line="4" pos:column="18"/></name></decl>, <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="21">last<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><name pos:line="4" pos:column="28">NULL<pos:position pos:line="4" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">bytes<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><literal type="number" pos:line="5" pos:column="24">0<pos:position pos:line="5" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">coalesce_ctx<pos:position pos:line="6" pos:column="24"/></name></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">ctx<pos:position pos:line="6" pos:column="29"/></name> <init pos:line="6" pos:column="30">= <expr><name><name pos:line="6" pos:column="32">f<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">ctx<pos:position pos:line="6" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">unsigned<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">count<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* The brigade consists of zero-or-more small data buckets which
     * can be coalesced (the prefix), followed by the remainder of the
     * brigade.
     *
     * Find the last bucket - if any - of that prefix.  count gives
     * the number of buckets in the prefix.  The "prefix" must contain
     * only data buckets with known length, and must be of a total
     * size which fits into the buffer.
     *
     * N.B.: The process here could be repeated throughout the brigade
     * (coalesce any run of consecutive data buckets) but this would
     * add significant complexity, particularly to memory
     * management. */</comment>
    <for pos:line="22" pos:column="5">for <control pos:line="22" pos:column="9">(<init><expr><name pos:line="22" pos:column="10">e<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <call><name pos:line="22" pos:column="14">APR_BRIGADE_FIRST<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">bb<pos:position pos:line="22" pos:column="34"/></name></expr></argument>)<pos:position pos:line="22" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="36"/></init>
         <condition><expr><name pos:line="23" pos:column="10">e<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">!=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">APR_BRIGADE_SENTINEL<pos:position pos:line="23" pos:column="35"/></name><argument_list pos:line="23" pos:column="35">(<argument><expr><name pos:line="23" pos:column="36">bb<pos:position pos:line="23" pos:column="38"/></name></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call>
             <operator pos:line="24" pos:column="14">&amp;&amp;<pos:position pos:line="24" pos:column="24"/></operator> <operator pos:line="24" pos:column="17">!<pos:position pos:line="24" pos:column="18"/></operator><call><name pos:line="24" pos:column="18">APR_BUCKET_IS_METADATA<pos:position pos:line="24" pos:column="40"/></name><argument_list pos:line="24" pos:column="40">(<argument><expr><name pos:line="24" pos:column="41">e<pos:position pos:line="24" pos:column="42"/></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call>
             <operator pos:line="25" pos:column="14">&amp;&amp;<pos:position pos:line="25" pos:column="24"/></operator> <name><name pos:line="25" pos:column="17">e<pos:position pos:line="25" pos:column="18"/></name><operator pos:line="25" pos:column="18">-&gt;<pos:position pos:line="25" pos:column="23"/></operator><name pos:line="25" pos:column="20">length<pos:position pos:line="25" pos:column="26"/></name></name> <operator pos:line="25" pos:column="27">!=<pos:position pos:line="25" pos:column="29"/></operator> <operator pos:line="25" pos:column="30">(<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="31">apr_size_t<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">)<pos:position pos:line="25" pos:column="42"/></operator><operator pos:line="25" pos:column="42">-<pos:position pos:line="25" pos:column="43"/></operator><literal type="number" pos:line="25" pos:column="43">1<pos:position pos:line="25" pos:column="44"/></literal>
             <operator pos:line="26" pos:column="14">&amp;&amp;<pos:position pos:line="26" pos:column="24"/></operator> <name><name pos:line="26" pos:column="17">e<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">-&gt;<pos:position pos:line="26" pos:column="23"/></operator><name pos:line="26" pos:column="20">length<pos:position pos:line="26" pos:column="26"/></name></name> <operator pos:line="26" pos:column="27">&lt;<pos:position pos:line="26" pos:column="31"/></operator> <name pos:line="26" pos:column="29">COALESCE_BYTES<pos:position pos:line="26" pos:column="43"/></name>
             <operator pos:line="27" pos:column="14">&amp;&amp;<pos:position pos:line="27" pos:column="24"/></operator> <operator pos:line="27" pos:column="17">(<pos:position pos:line="27" pos:column="18"/></operator><name pos:line="27" pos:column="18">bytes<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">+<pos:position pos:line="27" pos:column="25"/></operator> <name><name pos:line="27" pos:column="26">e<pos:position pos:line="27" pos:column="27"/></name><operator pos:line="27" pos:column="27">-&gt;<pos:position pos:line="27" pos:column="32"/></operator><name pos:line="27" pos:column="29">length<pos:position pos:line="27" pos:column="35"/></name></name><operator pos:line="27" pos:column="35">)<pos:position pos:line="27" pos:column="36"/></operator> <operator pos:line="27" pos:column="37">&lt;<pos:position pos:line="27" pos:column="41"/></operator> <name pos:line="27" pos:column="39">COALESCE_BYTES<pos:position pos:line="27" pos:column="53"/></name>
             <operator pos:line="28" pos:column="14">&amp;&amp;<pos:position pos:line="28" pos:column="24"/></operator> <operator pos:line="28" pos:column="17">(<pos:position pos:line="28" pos:column="18"/></operator><name pos:line="28" pos:column="18">ctx<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">==<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">NULL<pos:position pos:line="28" pos:column="29"/></name>
                 <operator pos:line="29" pos:column="18">||<pos:position pos:line="29" pos:column="20"/></operator> <name pos:line="29" pos:column="21">bytes<pos:position pos:line="29" pos:column="26"/></name> <operator pos:line="29" pos:column="27">+<pos:position pos:line="29" pos:column="28"/></operator> <name><name pos:line="29" pos:column="29">ctx<pos:position pos:line="29" pos:column="32"/></name><operator pos:line="29" pos:column="32">-&gt;<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="34">bytes<pos:position pos:line="29" pos:column="39"/></name></name> <operator pos:line="29" pos:column="40">+<pos:position pos:line="29" pos:column="41"/></operator> <name><name pos:line="29" pos:column="42">e<pos:position pos:line="29" pos:column="43"/></name><operator pos:line="29" pos:column="43">-&gt;<pos:position pos:line="29" pos:column="48"/></operator><name pos:line="29" pos:column="45">length<pos:position pos:line="29" pos:column="51"/></name></name> <operator pos:line="29" pos:column="52">&lt;<pos:position pos:line="29" pos:column="56"/></operator> <name pos:line="29" pos:column="54">COALESCE_BYTES<pos:position pos:line="29" pos:column="68"/></name><operator pos:line="29" pos:column="68">)<pos:position pos:line="29" pos:column="69"/></operator></expr>;<pos:position pos:line="29" pos:column="70"/></condition>
         <incr><expr><name pos:line="30" pos:column="10">e<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <call><name pos:line="30" pos:column="14">APR_BUCKET_NEXT<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">e<pos:position pos:line="30" pos:column="31"/></name></expr></argument>)<pos:position pos:line="30" pos:column="32"/></argument_list></call></expr></incr>)<pos:position pos:line="30" pos:column="33"/></control> <block pos:line="30" pos:column="34">{
        <expr_stmt><expr><name pos:line="31" pos:column="9">last<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <name pos:line="31" pos:column="16">e<pos:position pos:line="31" pos:column="17"/></name></expr>;<pos:position pos:line="31" pos:column="18"/></expr_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">e<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">length<pos:position pos:line="32" pos:column="22"/></name></name></expr>)<pos:position pos:line="32" pos:column="23"/></condition><then pos:line="32" pos:column="23"> <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="24">count<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">++<pos:position pos:line="32" pos:column="31"/></operator></expr>;<pos:position pos:line="32" pos:column="32"/></expr_stmt></block></then></if> <comment type="block" pos:line="32" pos:column="33">/* don't count zero-length buckets */</comment>
        <expr_stmt><expr><name pos:line="33" pos:column="9">bytes<pos:position pos:line="33" pos:column="14"/></name> <operator pos:line="33" pos:column="15">+=<pos:position pos:line="33" pos:column="17"/></operator> <name><name pos:line="33" pos:column="18">e<pos:position pos:line="33" pos:column="19"/></name><operator pos:line="33" pos:column="19">-&gt;<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="21">length<pos:position pos:line="33" pos:column="27"/></name></name></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></for>

    <comment type="block" pos:line="36" pos:column="5">/* Coalesce the prefix, if:
     * a) more than one bucket is found to coalesce, or
     * b) the brigade contains only a single data bucket, or
     * c)
     */</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><name pos:line="41" pos:column="9">bytes<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">&gt;<pos:position pos:line="41" pos:column="19"/></operator> <literal type="number" pos:line="41" pos:column="17">0<pos:position pos:line="41" pos:column="18"/></literal>
        <operator pos:line="42" pos:column="9">&amp;&amp;<pos:position pos:line="42" pos:column="19"/></operator> <operator pos:line="42" pos:column="12">(<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="13">count<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">&gt;<pos:position pos:line="42" pos:column="23"/></operator> <literal type="number" pos:line="42" pos:column="21">1<pos:position pos:line="42" pos:column="22"/></literal>
            <operator pos:line="43" pos:column="13">||<pos:position pos:line="43" pos:column="15"/></operator> <operator pos:line="43" pos:column="16">(<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="17">count<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">==<pos:position pos:line="43" pos:column="25"/></operator> <literal type="number" pos:line="43" pos:column="26">1<pos:position pos:line="43" pos:column="27"/></literal> <operator pos:line="43" pos:column="28">&amp;&amp;<pos:position pos:line="43" pos:column="38"/></operator> <call><name pos:line="43" pos:column="31">APR_BUCKET_NEXT<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">(<argument><expr><name pos:line="43" pos:column="47">last<pos:position pos:line="43" pos:column="51"/></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call> <operator pos:line="43" pos:column="53">==<pos:position pos:line="43" pos:column="55"/></operator> <call><name pos:line="43" pos:column="56">APR_BRIGADE_SENTINEL<pos:position pos:line="43" pos:column="76"/></name><argument_list pos:line="43" pos:column="76">(<argument><expr><name pos:line="43" pos:column="77">bb<pos:position pos:line="43" pos:column="79"/></name></expr></argument>)<pos:position pos:line="43" pos:column="80"/></argument_list></call><operator pos:line="43" pos:column="80">)<pos:position pos:line="43" pos:column="81"/></operator><operator pos:line="43" pos:column="81">)<pos:position pos:line="43" pos:column="82"/></operator></expr>)<pos:position pos:line="43" pos:column="83"/></condition><then pos:line="43" pos:column="83"> <block pos:line="43" pos:column="84">{
        <comment type="block" pos:line="44" pos:column="9">/* If coalescing some bytes, ensure a context has been
         * created. */</comment>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">!<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">ctx<pos:position pos:line="46" pos:column="17"/></name></expr>)<pos:position pos:line="46" pos:column="18"/></condition><then pos:line="46" pos:column="18"> <block pos:line="46" pos:column="19">{
            <expr_stmt><expr><name><name pos:line="47" pos:column="13">f<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">ctx<pos:position pos:line="47" pos:column="19"/></name></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <name pos:line="47" pos:column="22">ctx<pos:position pos:line="47" pos:column="25"/></name> <operator pos:line="47" pos:column="26">=<pos:position pos:line="47" pos:column="27"/></operator> <call><name pos:line="47" pos:column="28">apr_palloc<pos:position pos:line="47" pos:column="38"/></name><argument_list pos:line="47" pos:column="38">(<argument><expr><name><name pos:line="47" pos:column="39">f<pos:position pos:line="47" pos:column="40"/></name><operator pos:line="47" pos:column="40">-&gt;<pos:position pos:line="47" pos:column="45"/></operator><name pos:line="47" pos:column="42">c<pos:position pos:line="47" pos:column="43"/></name><operator pos:line="47" pos:column="43">-&gt;<pos:position pos:line="47" pos:column="48"/></operator><name pos:line="47" pos:column="45">pool<pos:position pos:line="47" pos:column="49"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="47" pos:column="51">sizeof <name><pos:position pos:line="47" pos:column="58"/></name></sizeof>*<name pos:line="47" pos:column="59">ctx<pos:position pos:line="47" pos:column="62"/></name></expr></argument>)<pos:position pos:line="47" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="64"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">ctx<pos:position pos:line="48" pos:column="16"/></name><operator pos:line="48" pos:column="16">-&gt;<pos:position pos:line="48" pos:column="21"/></operator><name pos:line="48" pos:column="18">bytes<pos:position pos:line="48" pos:column="23"/></name></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator> <literal type="number" pos:line="48" pos:column="26">0<pos:position pos:line="48" pos:column="27"/></literal></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="51" pos:column="9">ap_log_cerror<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><name pos:line="51" pos:column="23">APLOG_MARK<pos:position pos:line="51" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="35">APLOG_TRACE4<pos:position pos:line="51" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="49">0<pos:position pos:line="51" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="52">f<pos:position pos:line="51" pos:column="53"/></name><operator pos:line="51" pos:column="53">-&gt;<pos:position pos:line="51" pos:column="58"/></operator><name pos:line="51" pos:column="55">c<pos:position pos:line="51" pos:column="56"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="52" pos:column="23">"coalesce: have %"<pos:position pos:line="52" pos:column="41"/></literal> <name pos:line="52" pos:column="42">APR_SIZE_T_FMT<pos:position pos:line="52" pos:column="56"/></name> <literal type="string" pos:line="52" pos:column="57">" bytes, "<pos:position pos:line="52" pos:column="67"/></literal>
                      <literal type="string" pos:line="53" pos:column="23">"adding %"<pos:position pos:line="53" pos:column="33"/></literal> <name pos:line="53" pos:column="34">APR_SIZE_T_FMT<pos:position pos:line="53" pos:column="48"/></name> <literal type="string" pos:line="53" pos:column="49">" more"<pos:position pos:line="53" pos:column="56"/></literal></expr></argument>, <argument><expr><name><name pos:line="53" pos:column="58">ctx<pos:position pos:line="53" pos:column="61"/></name><operator pos:line="53" pos:column="61">-&gt;<pos:position pos:line="53" pos:column="66"/></operator><name pos:line="53" pos:column="63">bytes<pos:position pos:line="53" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="70">bytes<pos:position pos:line="53" pos:column="75"/></name></expr></argument>)<pos:position pos:line="53" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="77"/></expr_stmt>

        <comment type="block" pos:line="55" pos:column="9">/* Iterate through the prefix segment.  For non-fatal errors
         * in this loop it is safe to break out and fall back to the
         * normal path of sending the buffer + remaining buckets in
         * brigade.  */</comment>
        <expr_stmt><expr><name pos:line="59" pos:column="9">e<pos:position pos:line="59" pos:column="10"/></name> <operator pos:line="59" pos:column="11">=<pos:position pos:line="59" pos:column="12"/></operator> <call><name pos:line="59" pos:column="13">APR_BRIGADE_FIRST<pos:position pos:line="59" pos:column="30"/></name><argument_list pos:line="59" pos:column="30">(<argument><expr><name pos:line="59" pos:column="31">bb<pos:position pos:line="59" pos:column="33"/></name></expr></argument>)<pos:position pos:line="59" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="35"/></expr_stmt>
        <while pos:line="60" pos:column="9">while <condition pos:line="60" pos:column="15">(<expr><name pos:line="60" pos:column="16">e<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">!=<pos:position pos:line="60" pos:column="20"/></operator> <name pos:line="60" pos:column="21">last<pos:position pos:line="60" pos:column="25"/></name></expr>)<pos:position pos:line="60" pos:column="26"/></condition> <block pos:line="60" pos:column="27">{
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">apr_size_t<pos:position pos:line="61" pos:column="23"/></name></type> <name pos:line="61" pos:column="24">len<pos:position pos:line="61" pos:column="27"/></name></decl>;<pos:position pos:line="61" pos:column="28"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="62" pos:column="13">const<pos:position pos:line="62" pos:column="18"/></specifier> <name pos:line="62" pos:column="19">char<pos:position pos:line="62" pos:column="23"/></name> <modifier pos:line="62" pos:column="24">*<pos:position pos:line="62" pos:column="25"/></modifier></type><name pos:line="62" pos:column="25">data<pos:position pos:line="62" pos:column="29"/></name></decl>;<pos:position pos:line="62" pos:column="30"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="63" pos:column="13">apr_bucket<pos:position pos:line="63" pos:column="23"/></name> <modifier pos:line="63" pos:column="24">*<pos:position pos:line="63" pos:column="25"/></modifier></type><name pos:line="63" pos:column="25">next<pos:position pos:line="63" pos:column="29"/></name></decl>;<pos:position pos:line="63" pos:column="30"/></decl_stmt>

            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><call><name pos:line="65" pos:column="17">APR_BUCKET_IS_METADATA<pos:position pos:line="65" pos:column="39"/></name><argument_list pos:line="65" pos:column="39">(<argument><expr><name pos:line="65" pos:column="40">e<pos:position pos:line="65" pos:column="41"/></name></expr></argument>)<pos:position pos:line="65" pos:column="42"/></argument_list></call>
                <operator pos:line="66" pos:column="17">||<pos:position pos:line="66" pos:column="19"/></operator> <name><name pos:line="66" pos:column="20">e<pos:position pos:line="66" pos:column="21"/></name><operator pos:line="66" pos:column="21">-&gt;<pos:position pos:line="66" pos:column="26"/></operator><name pos:line="66" pos:column="23">length<pos:position pos:line="66" pos:column="29"/></name></name> <operator pos:line="66" pos:column="30">==<pos:position pos:line="66" pos:column="32"/></operator> <operator pos:line="66" pos:column="33">(<pos:position pos:line="66" pos:column="34"/></operator><name pos:line="66" pos:column="34">apr_size_t<pos:position pos:line="66" pos:column="44"/></name><operator pos:line="66" pos:column="44">)<pos:position pos:line="66" pos:column="45"/></operator><operator pos:line="66" pos:column="45">-<pos:position pos:line="66" pos:column="46"/></operator><literal type="number" pos:line="66" pos:column="46">1<pos:position pos:line="66" pos:column="47"/></literal></expr>)<pos:position pos:line="66" pos:column="48"/></condition><then pos:line="66" pos:column="48"> <block pos:line="66" pos:column="49">{
                <expr_stmt><expr><call><name pos:line="67" pos:column="17">ap_log_cerror<pos:position pos:line="67" pos:column="30"/></name><argument_list pos:line="67" pos:column="30">(<argument><expr><name pos:line="67" pos:column="31">APLOG_MARK<pos:position pos:line="67" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="43">APLOG_ERR<pos:position pos:line="67" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="54">0<pos:position pos:line="67" pos:column="55"/></literal></expr></argument>, <argument><expr><name><name pos:line="67" pos:column="57">f<pos:position pos:line="67" pos:column="58"/></name><operator pos:line="67" pos:column="58">-&gt;<pos:position pos:line="67" pos:column="63"/></operator><name pos:line="67" pos:column="60">c<pos:position pos:line="67" pos:column="61"/></name></name></expr></argument>, <argument><expr><call><name pos:line="67" pos:column="63">APLOGNO<pos:position pos:line="67" pos:column="70"/></name><argument_list pos:line="67" pos:column="70">(<argument><expr><literal type="number" pos:line="67" pos:column="71">02012<pos:position pos:line="67" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="77"/></argument_list></call>
                              <literal type="string" pos:line="68" pos:column="31">"unexpected bucket type during coalesce"<pos:position pos:line="68" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="73"/></expr_stmt>
                <break pos:line="69" pos:column="17">break;<pos:position pos:line="69" pos:column="23"/></break> <comment type="block" pos:line="69" pos:column="24">/* non-fatal error; break out */</comment>
            }<pos:position pos:line="70" pos:column="14"/></block></then></if>

            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><name><name pos:line="72" pos:column="17">e<pos:position pos:line="72" pos:column="18"/></name><operator pos:line="72" pos:column="18">-&gt;<pos:position pos:line="72" pos:column="23"/></operator><name pos:line="72" pos:column="20">length<pos:position pos:line="72" pos:column="26"/></name></name></expr>)<pos:position pos:line="72" pos:column="27"/></condition><then pos:line="72" pos:column="27"> <block pos:line="72" pos:column="28">{
                <decl_stmt><decl><type><name pos:line="73" pos:column="17">apr_status_t<pos:position pos:line="73" pos:column="29"/></name></type> <name pos:line="73" pos:column="30">rv<pos:position pos:line="73" pos:column="32"/></name></decl>;<pos:position pos:line="73" pos:column="33"/></decl_stmt>

                <comment type="block" pos:line="75" pos:column="17">/* A blocking read should be fine here for a
                 * known-length data bucket, rather than the usual
                 * non-block/flush/block.  */</comment>
                <expr_stmt><expr><name pos:line="78" pos:column="17">rv<pos:position pos:line="78" pos:column="19"/></name> <operator pos:line="78" pos:column="20">=<pos:position pos:line="78" pos:column="21"/></operator> <call><name pos:line="78" pos:column="22">apr_bucket_read<pos:position pos:line="78" pos:column="37"/></name><argument_list pos:line="78" pos:column="37">(<argument><expr><name pos:line="78" pos:column="38">e<pos:position pos:line="78" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="41">&amp;<pos:position pos:line="78" pos:column="46"/></operator><name pos:line="78" pos:column="42">data<pos:position pos:line="78" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="48">&amp;<pos:position pos:line="78" pos:column="53"/></operator><name pos:line="78" pos:column="49">len<pos:position pos:line="78" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="54">APR_BLOCK_READ<pos:position pos:line="78" pos:column="68"/></name></expr></argument>)<pos:position pos:line="78" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="70"/></expr_stmt>
                <if pos:line="79" pos:column="17">if <condition pos:line="79" pos:column="20">(<expr><name pos:line="79" pos:column="21">rv<pos:position pos:line="79" pos:column="23"/></name></expr>)<pos:position pos:line="79" pos:column="24"/></condition><then pos:line="79" pos:column="24"> <block pos:line="79" pos:column="25">{
                    <expr_stmt><expr><call><name pos:line="80" pos:column="21">ap_log_cerror<pos:position pos:line="80" pos:column="34"/></name><argument_list pos:line="80" pos:column="34">(<argument><expr><name pos:line="80" pos:column="35">APLOG_MARK<pos:position pos:line="80" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="47">APLOG_ERR<pos:position pos:line="80" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="58">rv<pos:position pos:line="80" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="80" pos:column="62">f<pos:position pos:line="80" pos:column="63"/></name><operator pos:line="80" pos:column="63">-&gt;<pos:position pos:line="80" pos:column="68"/></operator><name pos:line="80" pos:column="65">c<pos:position pos:line="80" pos:column="66"/></name></name></expr></argument>, <argument><expr><call><name pos:line="80" pos:column="68">APLOGNO<pos:position pos:line="80" pos:column="75"/></name><argument_list pos:line="80" pos:column="75">(<argument><expr><literal type="number" pos:line="80" pos:column="76">02013<pos:position pos:line="80" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="80" pos:column="82"/></argument_list></call>
                                  <literal type="string" pos:line="81" pos:column="35">"coalesce failed to read from data bucket"<pos:position pos:line="81" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="81" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="79"/></expr_stmt>
                    <return pos:line="82" pos:column="21">return <expr><name pos:line="82" pos:column="28">AP_FILTER_ERROR<pos:position pos:line="82" pos:column="43"/></name></expr>;<pos:position pos:line="82" pos:column="44"/></return>
                }<pos:position pos:line="83" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="85" pos:column="17">/* Be paranoid. */</comment>
                <if pos:line="86" pos:column="17">if <condition pos:line="86" pos:column="20">(<expr><name pos:line="86" pos:column="21">len<pos:position pos:line="86" pos:column="24"/></name> <operator pos:line="86" pos:column="25">&gt;<pos:position pos:line="86" pos:column="29"/></operator> <sizeof pos:line="86" pos:column="27">sizeof <name><name pos:line="86" pos:column="34">ctx<pos:position pos:line="86" pos:column="37"/></name><operator pos:line="86" pos:column="37">-&gt;<pos:position pos:line="86" pos:column="42"/></operator><name pos:line="86" pos:column="39">buffer<pos:position pos:line="86" pos:column="45"/></name></name></sizeof>
                    <operator pos:line="87" pos:column="21">||<pos:position pos:line="87" pos:column="23"/></operator> <operator pos:line="87" pos:column="24">(<pos:position pos:line="87" pos:column="25"/></operator><name pos:line="87" pos:column="25">len<pos:position pos:line="87" pos:column="28"/></name> <operator pos:line="87" pos:column="29">+<pos:position pos:line="87" pos:column="30"/></operator> <name><name pos:line="87" pos:column="31">ctx<pos:position pos:line="87" pos:column="34"/></name><operator pos:line="87" pos:column="34">-&gt;<pos:position pos:line="87" pos:column="39"/></operator><name pos:line="87" pos:column="36">bytes<pos:position pos:line="87" pos:column="41"/></name></name> <operator pos:line="87" pos:column="42">&gt;<pos:position pos:line="87" pos:column="46"/></operator> <sizeof pos:line="87" pos:column="44">sizeof <name><name pos:line="87" pos:column="51">ctx<pos:position pos:line="87" pos:column="54"/></name><operator pos:line="87" pos:column="54">-&gt;<pos:position pos:line="87" pos:column="59"/></operator><name pos:line="87" pos:column="56">buffer<pos:position pos:line="87" pos:column="62"/></name></name></sizeof><operator pos:line="87" pos:column="62">)<pos:position pos:line="87" pos:column="63"/></operator></expr>)<pos:position pos:line="87" pos:column="64"/></condition><then pos:line="87" pos:column="64"> <block pos:line="87" pos:column="65">{
                    <expr_stmt><expr><call><name pos:line="88" pos:column="21">ap_log_cerror<pos:position pos:line="88" pos:column="34"/></name><argument_list pos:line="88" pos:column="34">(<argument><expr><name pos:line="88" pos:column="35">APLOG_MARK<pos:position pos:line="88" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="47">APLOG_ERR<pos:position pos:line="88" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="88" pos:column="58">0<pos:position pos:line="88" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="88" pos:column="61">f<pos:position pos:line="88" pos:column="62"/></name><operator pos:line="88" pos:column="62">-&gt;<pos:position pos:line="88" pos:column="67"/></operator><name pos:line="88" pos:column="64">c<pos:position pos:line="88" pos:column="65"/></name></name></expr></argument>, <argument><expr><call><name pos:line="88" pos:column="67">APLOGNO<pos:position pos:line="88" pos:column="74"/></name><argument_list pos:line="88" pos:column="74">(<argument><expr><literal type="number" pos:line="88" pos:column="75">02014<pos:position pos:line="88" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="81"/></argument_list></call>
                                  <literal type="string" pos:line="89" pos:column="35">"unexpected coalesced bucket data length"<pos:position pos:line="89" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="78"/></expr_stmt>
                    <break pos:line="90" pos:column="21">break;<pos:position pos:line="90" pos:column="27"/></break> <comment type="block" pos:line="90" pos:column="28">/* non-fatal error; break out */</comment>
                }<pos:position pos:line="91" pos:column="18"/></block></then></if>

                <expr_stmt><expr><call><name pos:line="93" pos:column="17">memcpy<pos:position pos:line="93" pos:column="23"/></name><argument_list pos:line="93" pos:column="23">(<argument><expr><name><name pos:line="93" pos:column="24">ctx<pos:position pos:line="93" pos:column="27"/></name><operator pos:line="93" pos:column="27">-&gt;<pos:position pos:line="93" pos:column="32"/></operator><name pos:line="93" pos:column="29">buffer<pos:position pos:line="93" pos:column="35"/></name></name> <operator pos:line="93" pos:column="36">+<pos:position pos:line="93" pos:column="37"/></operator> <name><name pos:line="93" pos:column="38">ctx<pos:position pos:line="93" pos:column="41"/></name><operator pos:line="93" pos:column="41">-&gt;<pos:position pos:line="93" pos:column="46"/></operator><name pos:line="93" pos:column="43">bytes<pos:position pos:line="93" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="50">data<pos:position pos:line="93" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="56">len<pos:position pos:line="93" pos:column="59"/></name></expr></argument>)<pos:position pos:line="93" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="61"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="94" pos:column="17">ctx<pos:position pos:line="94" pos:column="20"/></name><operator pos:line="94" pos:column="20">-&gt;<pos:position pos:line="94" pos:column="25"/></operator><name pos:line="94" pos:column="22">bytes<pos:position pos:line="94" pos:column="27"/></name></name> <operator pos:line="94" pos:column="28">+=<pos:position pos:line="94" pos:column="30"/></operator> <name pos:line="94" pos:column="31">len<pos:position pos:line="94" pos:column="34"/></name></expr>;<pos:position pos:line="94" pos:column="35"/></expr_stmt>
            }<pos:position pos:line="95" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="97" pos:column="13">next<pos:position pos:line="97" pos:column="17"/></name> <operator pos:line="97" pos:column="18">=<pos:position pos:line="97" pos:column="19"/></operator> <call><name pos:line="97" pos:column="20">APR_BUCKET_NEXT<pos:position pos:line="97" pos:column="35"/></name><argument_list pos:line="97" pos:column="35">(<argument><expr><name pos:line="97" pos:column="36">e<pos:position pos:line="97" pos:column="37"/></name></expr></argument>)<pos:position pos:line="97" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="98" pos:column="13">apr_bucket_delete<pos:position pos:line="98" pos:column="30"/></name><argument_list pos:line="98" pos:column="30">(<argument><expr><name pos:line="98" pos:column="31">e<pos:position pos:line="98" pos:column="32"/></name></expr></argument>)<pos:position pos:line="98" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name pos:line="99" pos:column="13">e<pos:position pos:line="99" pos:column="14"/></name> <operator pos:line="99" pos:column="15">=<pos:position pos:line="99" pos:column="16"/></operator> <name pos:line="99" pos:column="17">next<pos:position pos:line="99" pos:column="21"/></name></expr>;<pos:position pos:line="99" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="100" pos:column="10"/></block></while>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>

    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><call><name pos:line="103" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="103" pos:column="26"/></name><argument_list pos:line="103" pos:column="26">(<argument><expr><name pos:line="103" pos:column="27">bb<pos:position pos:line="103" pos:column="29"/></name></expr></argument>)<pos:position pos:line="103" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="103" pos:column="31"/></condition><then pos:line="103" pos:column="31"> <block pos:line="103" pos:column="32">{
        <comment type="block" pos:line="104" pos:column="9">/* If the brigade is now empty, our work here is done. */</comment>
        <return pos:line="105" pos:column="9">return <expr><name pos:line="105" pos:column="16">APR_SUCCESS<pos:position pos:line="105" pos:column="27"/></name></expr>;<pos:position pos:line="105" pos:column="28"/></return>
    }<pos:position pos:line="106" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="108" pos:column="5">/* If anything remains in the brigade, it must now be passed down
     * the filter stack, first prepending anything that has been
     * coalesced. */</comment>
    <if pos:line="111" pos:column="5">if <condition pos:line="111" pos:column="8">(<expr><name pos:line="111" pos:column="9">ctx<pos:position pos:line="111" pos:column="12"/></name> <operator pos:line="111" pos:column="13">&amp;&amp;<pos:position pos:line="111" pos:column="23"/></operator> <name><name pos:line="111" pos:column="16">ctx<pos:position pos:line="111" pos:column="19"/></name><operator pos:line="111" pos:column="19">-&gt;<pos:position pos:line="111" pos:column="24"/></operator><name pos:line="111" pos:column="21">bytes<pos:position pos:line="111" pos:column="26"/></name></name></expr>)<pos:position pos:line="111" pos:column="27"/></condition><then pos:line="111" pos:column="27"> <block pos:line="111" pos:column="28">{
        <decl_stmt><decl><type><name pos:line="112" pos:column="9">apr_bucket<pos:position pos:line="112" pos:column="19"/></name> <modifier pos:line="112" pos:column="20">*<pos:position pos:line="112" pos:column="21"/></modifier></type><name pos:line="112" pos:column="21">e<pos:position pos:line="112" pos:column="22"/></name></decl>;<pos:position pos:line="112" pos:column="23"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="114" pos:column="9">ap_log_cerror<pos:position pos:line="114" pos:column="22"/></name><argument_list pos:line="114" pos:column="22">(<argument><expr><name pos:line="114" pos:column="23">APLOG_MARK<pos:position pos:line="114" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="35">APLOG_TRACE4<pos:position pos:line="114" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="114" pos:column="49">0<pos:position pos:line="114" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="114" pos:column="52">f<pos:position pos:line="114" pos:column="53"/></name><operator pos:line="114" pos:column="53">-&gt;<pos:position pos:line="114" pos:column="58"/></operator><name pos:line="114" pos:column="55">c<pos:position pos:line="114" pos:column="56"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="115" pos:column="23">"coalesce: passing on %"<pos:position pos:line="115" pos:column="47"/></literal> <name pos:line="115" pos:column="48">APR_SIZE_T_FMT<pos:position pos:line="115" pos:column="62"/></name> <literal type="string" pos:line="115" pos:column="63">" bytes"<pos:position pos:line="115" pos:column="71"/></literal></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="73">ctx<pos:position pos:line="115" pos:column="76"/></name><operator pos:line="115" pos:column="76">-&gt;<pos:position pos:line="115" pos:column="81"/></operator><name pos:line="115" pos:column="78">bytes<pos:position pos:line="115" pos:column="83"/></name></name></expr></argument>)<pos:position pos:line="115" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="85"/></expr_stmt>

        <expr_stmt><expr><name pos:line="117" pos:column="9">e<pos:position pos:line="117" pos:column="10"/></name> <operator pos:line="117" pos:column="11">=<pos:position pos:line="117" pos:column="12"/></operator> <call><name pos:line="117" pos:column="13">apr_bucket_transient_create<pos:position pos:line="117" pos:column="40"/></name><argument_list pos:line="117" pos:column="40">(<argument><expr><name><name pos:line="117" pos:column="41">ctx<pos:position pos:line="117" pos:column="44"/></name><operator pos:line="117" pos:column="44">-&gt;<pos:position pos:line="117" pos:column="49"/></operator><name pos:line="117" pos:column="46">buffer<pos:position pos:line="117" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="54">ctx<pos:position pos:line="117" pos:column="57"/></name><operator pos:line="117" pos:column="57">-&gt;<pos:position pos:line="117" pos:column="62"/></operator><name pos:line="117" pos:column="59">bytes<pos:position pos:line="117" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="66">bb<pos:position pos:line="117" pos:column="68"/></name><operator pos:line="117" pos:column="68">-&gt;<pos:position pos:line="117" pos:column="73"/></operator><name pos:line="117" pos:column="70">bucket_alloc<pos:position pos:line="117" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="117" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="118" pos:column="9">APR_BRIGADE_INSERT_HEAD<pos:position pos:line="118" pos:column="32"/></name><argument_list pos:line="118" pos:column="32">(<argument><expr><name pos:line="118" pos:column="33">bb<pos:position pos:line="118" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="37">e<pos:position pos:line="118" pos:column="38"/></name></expr></argument>)<pos:position pos:line="118" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="119" pos:column="9">ctx<pos:position pos:line="119" pos:column="12"/></name><operator pos:line="119" pos:column="12">-&gt;<pos:position pos:line="119" pos:column="17"/></operator><name pos:line="119" pos:column="14">bytes<pos:position pos:line="119" pos:column="19"/></name></name> <operator pos:line="119" pos:column="20">=<pos:position pos:line="119" pos:column="21"/></operator> <literal type="number" pos:line="119" pos:column="22">0<pos:position pos:line="119" pos:column="23"/></literal></expr>;<pos:position pos:line="119" pos:column="24"/></expr_stmt> <comment type="block" pos:line="119" pos:column="25">/* buffer now emptied. */</comment>
    }<pos:position pos:line="120" pos:column="6"/></block></then></if>

    <return pos:line="122" pos:column="5">return <expr><call><name pos:line="122" pos:column="12">ap_pass_brigade<pos:position pos:line="122" pos:column="27"/></name><argument_list pos:line="122" pos:column="27">(<argument><expr><name><name pos:line="122" pos:column="28">f<pos:position pos:line="122" pos:column="29"/></name><operator pos:line="122" pos:column="29">-&gt;<pos:position pos:line="122" pos:column="34"/></operator><name pos:line="122" pos:column="31">next<pos:position pos:line="122" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="122" pos:column="37">bb<pos:position pos:line="122" pos:column="39"/></name></expr></argument>)<pos:position pos:line="122" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="41"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
