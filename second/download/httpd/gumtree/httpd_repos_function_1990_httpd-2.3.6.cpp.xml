<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1990_httpd-2.3.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">sed_eval_buffer<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">sed_eval_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">eval<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">buf<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">int<pos:position pos:line="1" pos:column="68"/></name></type> <name pos:line="1" pos:column="69">bufsz<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="76">void<pos:position pos:line="1" pos:column="80"/></name> <modifier pos:line="1" pos:column="81">*<pos:position pos:line="1" pos:column="82"/></modifier></type><name pos:line="1" pos:column="82">fout<pos:position pos:line="1" pos:column="86"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="87"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">rv<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">eval<pos:position pos:line="5" pos:column="13"/></name><operator pos:line="5" pos:column="13">-&gt;<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="15">quitflag<pos:position pos:line="5" pos:column="23"/></name></name></expr>)<pos:position pos:line="5" pos:column="24"/></condition><then pos:line="5" pos:column="24">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><name pos:line="6" pos:column="16">APR_SUCCESS<pos:position pos:line="6" pos:column="27"/></name></expr>;<pos:position pos:line="6" pos:column="28"/></return></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name pos:line="8" pos:column="10">sed_canbe_finalized<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name><name pos:line="8" pos:column="30">eval<pos:position pos:line="8" pos:column="34"/></name><operator pos:line="8" pos:column="34">-&gt;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="36">commands<pos:position pos:line="8" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="46"/></condition><then pos:line="8" pos:column="46"> <block pos:line="8" pos:column="47">{
        <comment type="block" pos:line="9" pos:column="9">/* Commands were not finalized properly. */</comment>
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name><modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type> <name pos:line="10" pos:column="21">error<pos:position pos:line="10" pos:column="26"/></name> <init pos:line="10" pos:column="27">= <expr><call><name pos:line="10" pos:column="29">sed_get_finalize_error<pos:position pos:line="10" pos:column="51"/></name><argument_list pos:line="10" pos:column="51">(<argument><expr><name><name pos:line="10" pos:column="52">eval<pos:position pos:line="10" pos:column="56"/></name><operator pos:line="10" pos:column="56">-&gt;<pos:position pos:line="10" pos:column="61"/></operator><name pos:line="10" pos:column="58">commands<pos:position pos:line="10" pos:column="66"/></name></name></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="68">eval<pos:position pos:line="10" pos:column="72"/></name><operator pos:line="10" pos:column="72">-&gt;<pos:position pos:line="10" pos:column="77"/></operator><name pos:line="10" pos:column="74">pool<pos:position pos:line="10" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="80"/></decl_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">error<pos:position pos:line="11" pos:column="18"/></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19"> <block pos:line="11" pos:column="20">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">eval_errf<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">eval<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="29">error<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="36"/></expr_stmt>
            <return pos:line="13" pos:column="13">return <expr><name pos:line="13" pos:column="20">APR_EGENERAL<pos:position pos:line="13" pos:column="32"/></name></expr>;<pos:position pos:line="13" pos:column="33"/></return>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="17" pos:column="5">eval<pos:position pos:line="17" pos:column="9"/></name><operator pos:line="17" pos:column="9">-&gt;<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="11">fout<pos:position pos:line="17" pos:column="15"/></name></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">fout<pos:position pos:line="17" pos:column="22"/></name></expr>;<pos:position pos:line="17" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="19" pos:column="5">/* Process leftovers */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">bufsz<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">&amp;&amp;<pos:position pos:line="20" pos:column="25"/></operator> <name><name pos:line="20" pos:column="18">eval<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">lreadyflag<pos:position pos:line="20" pos:column="34"/></name></name></expr>)<pos:position pos:line="20" pos:column="35"/></condition><then pos:line="20" pos:column="35"> <block pos:line="20" pos:column="36">{
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">eval<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">lreadyflag<pos:position pos:line="21" pos:column="25"/></name></name> <operator pos:line="21" pos:column="26">=<pos:position pos:line="21" pos:column="27"/></operator> <literal type="number" pos:line="21" pos:column="28">0<pos:position pos:line="21" pos:column="29"/></literal></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">eval<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">-&gt;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="15">lspend<pos:position pos:line="22" pos:column="21"/></name></name><operator pos:line="22" pos:column="21">--<pos:position pos:line="22" pos:column="23"/></operator></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="23" pos:column="9">*<pos:position pos:line="23" pos:column="10"/></operator><name><name pos:line="23" pos:column="10">eval<pos:position pos:line="23" pos:column="14"/></name><operator pos:line="23" pos:column="14">-&gt;<pos:position pos:line="23" pos:column="19"/></operator><name pos:line="23" pos:column="16">lspend<pos:position pos:line="23" pos:column="22"/></name></name> <operator pos:line="23" pos:column="23">=<pos:position pos:line="23" pos:column="24"/></operator> <literal type="char" pos:line="23" pos:column="25">'\0'<pos:position pos:line="23" pos:column="29"/></literal></expr>;<pos:position pos:line="23" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">rv<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">execute<pos:position pos:line="24" pos:column="21"/></name><argument_list pos:line="24" pos:column="21">(<argument><expr><name pos:line="24" pos:column="22">eval<pos:position pos:line="24" pos:column="26"/></name></expr></argument>)<pos:position pos:line="24" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">rv<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">!=<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">APR_SUCCESS<pos:position pos:line="25" pos:column="30"/></name></expr>)<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31">
            <block type="pseudo"><return pos:line="26" pos:column="13">return <expr><name pos:line="26" pos:column="20">rv<pos:position pos:line="26" pos:column="22"/></name></expr>;<pos:position pos:line="26" pos:column="23"/></return></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <while pos:line="29" pos:column="5">while <condition pos:line="29" pos:column="11">(<expr><name pos:line="29" pos:column="12">bufsz<pos:position pos:line="29" pos:column="17"/></name></expr>)<pos:position pos:line="29" pos:column="18"/></condition> <block pos:line="29" pos:column="19">{
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">char<pos:position pos:line="30" pos:column="13"/></name> <modifier pos:line="30" pos:column="14">*<pos:position pos:line="30" pos:column="15"/></modifier></type><name pos:line="30" pos:column="15">n<pos:position pos:line="30" pos:column="16"/></name></decl>;<pos:position pos:line="30" pos:column="17"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="31" pos:column="9">int<pos:position pos:line="31" pos:column="12"/></name></type> <name pos:line="31" pos:column="13">llen<pos:position pos:line="31" pos:column="17"/></name></decl>;<pos:position pos:line="31" pos:column="18"/></decl_stmt>

        <expr_stmt><expr><name pos:line="33" pos:column="9">n<pos:position pos:line="33" pos:column="10"/></name> <operator pos:line="33" pos:column="11">=<pos:position pos:line="33" pos:column="12"/></operator> <call><name pos:line="33" pos:column="13">memchr<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">buf<pos:position pos:line="33" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="25">'\n'<pos:position pos:line="33" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="33" pos:column="31">bufsz<pos:position pos:line="33" pos:column="36"/></name></expr></argument>)<pos:position pos:line="33" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="38"/></expr_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">n<pos:position pos:line="34" pos:column="14"/></name> <operator pos:line="34" pos:column="15">==<pos:position pos:line="34" pos:column="17"/></operator> <name pos:line="34" pos:column="18">NULL<pos:position pos:line="34" pos:column="22"/></name></expr>)<pos:position pos:line="34" pos:column="23"/></condition><then pos:line="34" pos:column="23">
            <block type="pseudo"><break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break></block></then></if>

        <expr_stmt><expr><name pos:line="37" pos:column="9">llen<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <name pos:line="37" pos:column="16">n<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">-<pos:position pos:line="37" pos:column="19"/></operator> <name pos:line="37" pos:column="20">buf<pos:position pos:line="37" pos:column="23"/></name></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">llen<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">==<pos:position pos:line="38" pos:column="20"/></operator> <name pos:line="38" pos:column="21">bufsz<pos:position pos:line="38" pos:column="26"/></name> <operator pos:line="38" pos:column="27">-<pos:position pos:line="38" pos:column="28"/></operator> <literal type="number" pos:line="38" pos:column="29">1<pos:position pos:line="38" pos:column="30"/></literal></expr>)<pos:position pos:line="38" pos:column="31"/></condition><then pos:line="38" pos:column="31"> <block pos:line="38" pos:column="32">{
            <comment type="block" pos:line="39" pos:column="13">/* This might be the last line; delay its processing */</comment>
            <expr_stmt><expr><name><name pos:line="40" pos:column="13">eval<pos:position pos:line="40" pos:column="17"/></name><operator pos:line="40" pos:column="17">-&gt;<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="19">lreadyflag<pos:position pos:line="40" pos:column="29"/></name></name> <operator pos:line="40" pos:column="30">=<pos:position pos:line="40" pos:column="31"/></operator> <literal type="number" pos:line="40" pos:column="32">1<pos:position pos:line="40" pos:column="33"/></literal></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>
            <break pos:line="41" pos:column="13">break;<pos:position pos:line="41" pos:column="19"/></break>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>
        
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">appendmem_to_linebuf<pos:position pos:line="44" pos:column="29"/></name><argument_list pos:line="44" pos:column="29">(<argument><expr><name pos:line="44" pos:column="30">eval<pos:position pos:line="44" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="36">buf<pos:position pos:line="44" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="41">llen<pos:position pos:line="44" pos:column="45"/></name> <operator pos:line="44" pos:column="46">+<pos:position pos:line="44" pos:column="47"/></operator> <literal type="number" pos:line="44" pos:column="48">1<pos:position pos:line="44" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="45" pos:column="9">--<pos:position pos:line="45" pos:column="11"/></operator><name><name pos:line="45" pos:column="11">eval<pos:position pos:line="45" pos:column="15"/></name><operator pos:line="45" pos:column="15">-&gt;<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="17">lspend<pos:position pos:line="45" pos:column="23"/></name></name></expr>;<pos:position pos:line="45" pos:column="24"/></expr_stmt>
        <comment type="block" pos:line="46" pos:column="9">/* replace new line character with NULL */</comment>
        <expr_stmt><expr><operator pos:line="47" pos:column="9">*<pos:position pos:line="47" pos:column="10"/></operator><name><name pos:line="47" pos:column="10">eval<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">-&gt;<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="16">lspend<pos:position pos:line="47" pos:column="22"/></name></name> <operator pos:line="47" pos:column="23">=<pos:position pos:line="47" pos:column="24"/></operator> <literal type="char" pos:line="47" pos:column="25">'\0'<pos:position pos:line="47" pos:column="29"/></literal></expr>;<pos:position pos:line="47" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="48" pos:column="9">buf<pos:position pos:line="48" pos:column="12"/></name> <operator pos:line="48" pos:column="13">+=<pos:position pos:line="48" pos:column="15"/></operator> <operator pos:line="48" pos:column="16">(<pos:position pos:line="48" pos:column="17"/></operator><name pos:line="48" pos:column="17">llen<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">+<pos:position pos:line="48" pos:column="23"/></operator> <literal type="number" pos:line="48" pos:column="24">1<pos:position pos:line="48" pos:column="25"/></literal><operator pos:line="48" pos:column="25">)<pos:position pos:line="48" pos:column="26"/></operator></expr>;<pos:position pos:line="48" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">bufsz<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">-=<pos:position pos:line="49" pos:column="17"/></operator> <operator pos:line="49" pos:column="18">(<pos:position pos:line="49" pos:column="19"/></operator><name pos:line="49" pos:column="19">llen<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">+<pos:position pos:line="49" pos:column="25"/></operator> <literal type="number" pos:line="49" pos:column="26">1<pos:position pos:line="49" pos:column="27"/></literal><operator pos:line="49" pos:column="27">)<pos:position pos:line="49" pos:column="28"/></operator></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name pos:line="50" pos:column="9">rv<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <call><name pos:line="50" pos:column="14">execute<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">eval<pos:position pos:line="50" pos:column="26"/></name></expr></argument>)<pos:position pos:line="50" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="28"/></expr_stmt>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">rv<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">!=<pos:position pos:line="51" pos:column="18"/></operator> <name pos:line="51" pos:column="19">APR_SUCCESS<pos:position pos:line="51" pos:column="30"/></name></expr>)<pos:position pos:line="51" pos:column="31"/></condition><then pos:line="51" pos:column="31">
            <block type="pseudo"><return pos:line="52" pos:column="13">return <expr><name pos:line="52" pos:column="20">rv<pos:position pos:line="52" pos:column="22"/></name></expr>;<pos:position pos:line="52" pos:column="23"/></return></block></then></if>
        <if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name><name pos:line="53" pos:column="13">eval<pos:position pos:line="53" pos:column="17"/></name><operator pos:line="53" pos:column="17">-&gt;<pos:position pos:line="53" pos:column="22"/></operator><name pos:line="53" pos:column="19">quitflag<pos:position pos:line="53" pos:column="27"/></name></name></expr>)<pos:position pos:line="53" pos:column="28"/></condition><then pos:line="53" pos:column="28">
            <block type="pseudo"><break pos:line="54" pos:column="13">break;<pos:position pos:line="54" pos:column="19"/></break></block></then></if>
    }<pos:position pos:line="55" pos:column="6"/></block></while>

    <comment type="block" pos:line="57" pos:column="5">/* Save the leftovers for later */</comment>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">bufsz<pos:position pos:line="58" pos:column="14"/></name></expr>)<pos:position pos:line="58" pos:column="15"/></condition><then pos:line="58" pos:column="15"> <block pos:line="58" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="59" pos:column="9">appendmem_to_linebuf<pos:position pos:line="59" pos:column="29"/></name><argument_list pos:line="59" pos:column="29">(<argument><expr><name pos:line="59" pos:column="30">eval<pos:position pos:line="59" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="36">buf<pos:position pos:line="59" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="41">bufsz<pos:position pos:line="59" pos:column="46"/></name></expr></argument>)<pos:position pos:line="59" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <return pos:line="62" pos:column="5">return <expr><name pos:line="62" pos:column="12">APR_SUCCESS<pos:position pos:line="62" pos:column="23"/></name></expr>;<pos:position pos:line="62" pos:column="24"/></return>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
