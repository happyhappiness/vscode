<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_7441.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lua_websocket_ping<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">lua_State<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">L<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> 
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_socket_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">sock<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">plen<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">prelude<pos:position pos:line="5" pos:column="17"/></name><index pos:line="5" pos:column="17">[<expr><literal type="number" pos:line="5" pos:column="18">2<pos:position pos:line="5" pos:column="19"/></literal></expr>]<pos:position pos:line="5" pos:column="20"/></index></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">request_rec<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">r<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><call><name pos:line="7" pos:column="22">ap_lua_check_request_rec<pos:position pos:line="7" pos:column="46"/></name><argument_list pos:line="7" pos:column="46">(<argument><expr><name pos:line="7" pos:column="47">L<pos:position pos:line="7" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="50">1<pos:position pos:line="7" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="53"/></decl_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">sock<pos:position pos:line="8" pos:column="9"/></name> <operator pos:line="8" pos:column="10">=<pos:position pos:line="8" pos:column="11"/></operator> <call><name pos:line="8" pos:column="12">ap_get_conn_socket<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name><name pos:line="8" pos:column="31">r<pos:position pos:line="8" pos:column="32"/></name><operator pos:line="8" pos:column="32">-&gt;<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="34">connection<pos:position pos:line="8" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="46"/></expr_stmt>
    
    <comment type="block" pos:line="10" pos:column="5">/* Send a header that says: PING. */</comment>
    <expr_stmt><expr><name><name pos:line="11" pos:column="5">prelude<pos:position pos:line="11" pos:column="12"/></name><index pos:line="11" pos:column="12">[<expr><literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal></expr>]<pos:position pos:line="11" pos:column="15"/></index></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <literal type="number" pos:line="11" pos:column="18">0x89<pos:position pos:line="11" pos:column="22"/></literal></expr>;<pos:position pos:line="11" pos:column="23"/></expr_stmt> <comment type="block" pos:line="11" pos:column="24">/* ping  opcode */</comment>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">prelude<pos:position pos:line="12" pos:column="12"/></name><index pos:line="12" pos:column="12">[<expr><literal type="number" pos:line="12" pos:column="13">1<pos:position pos:line="12" pos:column="14"/></literal></expr>]<pos:position pos:line="12" pos:column="15"/></index></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <literal type="number" pos:line="12" pos:column="18">0<pos:position pos:line="12" pos:column="19"/></literal></expr>;<pos:position pos:line="12" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="13" pos:column="5">plen<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <literal type="number" pos:line="13" pos:column="12">2<pos:position pos:line="13" pos:column="13"/></literal></expr>;<pos:position pos:line="13" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">apr_socket_send<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><name pos:line="14" pos:column="21">sock<pos:position pos:line="14" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="27">prelude<pos:position pos:line="14" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="36">&amp;<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="37">plen<pos:position pos:line="14" pos:column="41"/></name></expr></argument>)<pos:position pos:line="14" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="43"/></expr_stmt>
    
    
    <comment type="block" pos:line="17" pos:column="5">/* Get opcode and FIN bit from pong */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">plen<pos:position pos:line="18" pos:column="9"/></name> <operator pos:line="18" pos:column="10">=<pos:position pos:line="18" pos:column="11"/></operator> <literal type="number" pos:line="18" pos:column="12">2<pos:position pos:line="18" pos:column="13"/></literal></expr>;<pos:position pos:line="18" pos:column="14"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">rv<pos:position pos:line="19" pos:column="7"/></name> <operator pos:line="19" pos:column="8">=<pos:position pos:line="19" pos:column="9"/></operator> <call><name pos:line="19" pos:column="10">apr_socket_recv<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><name pos:line="19" pos:column="26">sock<pos:position pos:line="19" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="32">prelude<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="41">&amp;<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="42">plen<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">rv<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">==<pos:position pos:line="20" pos:column="14"/></operator> <name pos:line="20" pos:column="15">APR_SUCCESS<pos:position pos:line="20" pos:column="26"/></name></expr>)<pos:position pos:line="20" pos:column="27"/></condition><then pos:line="20" pos:column="27"> <block pos:line="20" pos:column="28">{
        <decl_stmt><decl><type><name pos:line="21" pos:column="9">unsigned<pos:position pos:line="21" pos:column="17"/></name> <name pos:line="21" pos:column="18">char<pos:position pos:line="21" pos:column="22"/></name></type> <name pos:line="21" pos:column="23">opcode<pos:position pos:line="21" pos:column="29"/></name> <init pos:line="21" pos:column="30">= <expr><name><name pos:line="21" pos:column="32">prelude<pos:position pos:line="21" pos:column="39"/></name><index pos:line="21" pos:column="39">[<expr><literal type="number" pos:line="21" pos:column="40">0<pos:position pos:line="21" pos:column="41"/></literal></expr>]<pos:position pos:line="21" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="21" pos:column="43"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">unsigned<pos:position pos:line="22" pos:column="17"/></name> <name pos:line="22" pos:column="18">char<pos:position pos:line="22" pos:column="22"/></name></type> <name pos:line="22" pos:column="23">len<pos:position pos:line="22" pos:column="26"/></name> <init pos:line="22" pos:column="27">= <expr><name><name pos:line="22" pos:column="29">prelude<pos:position pos:line="22" pos:column="36"/></name><index pos:line="22" pos:column="36">[<expr><literal type="number" pos:line="22" pos:column="37">1<pos:position pos:line="22" pos:column="38"/></literal></expr>]<pos:position pos:line="22" pos:column="39"/></index></name></expr></init></decl>;<pos:position pos:line="22" pos:column="40"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">unsigned<pos:position pos:line="23" pos:column="17"/></name> <name pos:line="23" pos:column="18">char<pos:position pos:line="23" pos:column="22"/></name></type> <name pos:line="23" pos:column="23">mask<pos:position pos:line="23" pos:column="27"/></name> <init pos:line="23" pos:column="28">= <expr><name pos:line="23" pos:column="30">len<pos:position pos:line="23" pos:column="33"/></name> <operator pos:line="23" pos:column="34">&gt;&gt;<pos:position pos:line="23" pos:column="39"/></operator> <literal type="number" pos:line="23" pos:column="37">7<pos:position pos:line="23" pos:column="38"/></literal></expr></init></decl>;<pos:position pos:line="23" pos:column="39"/></decl_stmt>
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">mask<pos:position pos:line="24" pos:column="17"/></name></expr>)<pos:position pos:line="24" pos:column="18"/></condition><then pos:line="24" pos:column="18"> <block type="pseudo"><expr_stmt><expr><name pos:line="24" pos:column="19">len<pos:position pos:line="24" pos:column="22"/></name> <operator pos:line="24" pos:column="23">-=<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="26">128<pos:position pos:line="24" pos:column="29"/></literal></expr>;<pos:position pos:line="24" pos:column="30"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="25" pos:column="9">plen<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <name pos:line="25" pos:column="16">len<pos:position pos:line="25" pos:column="19"/></name></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">ap_log_rerror<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">APLOG_MARK<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">APLOG_DEBUG<pos:position pos:line="26" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="48">0<pos:position pos:line="26" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="51">r<pos:position pos:line="26" pos:column="52"/></name></expr></argument>, 
                        <argument><expr><literal type="string" pos:line="27" pos:column="25">"Websocket: Got PONG opcode: %x"<pos:position pos:line="27" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="59">opcode<pos:position pos:line="27" pos:column="65"/></name></expr></argument>)<pos:position pos:line="27" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="67"/></expr_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">opcode<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">==<pos:position pos:line="28" pos:column="22"/></operator> <literal type="number" pos:line="28" pos:column="23">0x8A<pos:position pos:line="28" pos:column="27"/></literal></expr>)<pos:position pos:line="28" pos:column="28"/></condition><then pos:line="28" pos:column="28"> <block pos:line="28" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">lua_pushboolean<pos:position pos:line="29" pos:column="28"/></name><argument_list pos:line="29" pos:column="28">(<argument><expr><name pos:line="29" pos:column="29">L<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="32">1<pos:position pos:line="29" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></then>
        <else pos:line="31" pos:column="9">else <block pos:line="31" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="32" pos:column="13">lua_pushboolean<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><name pos:line="32" pos:column="29">L<pos:position pos:line="32" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="32">0<pos:position pos:line="32" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="33" pos:column="10"/></block></else></if>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name pos:line="34" pos:column="13">plen<pos:position pos:line="34" pos:column="17"/></name> <operator pos:line="34" pos:column="18">&gt;<pos:position pos:line="34" pos:column="22"/></operator> <literal type="number" pos:line="34" pos:column="20">0<pos:position pos:line="34" pos:column="21"/></literal></expr>)<pos:position pos:line="34" pos:column="22"/></condition><then pos:line="34" pos:column="22"> <block pos:line="34" pos:column="23">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">ap_log_rerror<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><name pos:line="35" pos:column="27">APLOG_MARK<pos:position pos:line="35" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="39">APLOG_TRACE1<pos:position pos:line="35" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="53">0<pos:position pos:line="35" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="35" pos:column="56">r<pos:position pos:line="35" pos:column="57"/></name></expr></argument>, 
                        <argument><expr><literal type="string" pos:line="36" pos:column="25">"Websocket: Reading %lu bytes of PONG"<pos:position pos:line="36" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="36" pos:column="65">plen<pos:position pos:line="36" pos:column="69"/></name></expr></argument>)<pos:position pos:line="36" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="71"/></expr_stmt>
            <return pos:line="37" pos:column="13">return <expr><literal type="number" pos:line="37" pos:column="20">1<pos:position pos:line="37" pos:column="21"/></literal></expr>;<pos:position pos:line="37" pos:column="22"/></return>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">mask<pos:position pos:line="39" pos:column="17"/></name></expr>)<pos:position pos:line="39" pos:column="18"/></condition><then pos:line="39" pos:column="18"> <block pos:line="39" pos:column="19">{
            <expr_stmt><expr><name pos:line="40" pos:column="13">plen<pos:position pos:line="40" pos:column="17"/></name> <operator pos:line="40" pos:column="18">=<pos:position pos:line="40" pos:column="19"/></operator> <literal type="number" pos:line="40" pos:column="20">2<pos:position pos:line="40" pos:column="21"/></literal></expr>;<pos:position pos:line="40" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">apr_socket_recv<pos:position pos:line="41" pos:column="28"/></name><argument_list pos:line="41" pos:column="28">(<argument><expr><name pos:line="41" pos:column="29">sock<pos:position pos:line="41" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="35">prelude<pos:position pos:line="41" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="41" pos:column="44">&amp;<pos:position pos:line="41" pos:column="49"/></operator><name pos:line="41" pos:column="45">plen<pos:position pos:line="41" pos:column="49"/></name></expr></argument>)<pos:position pos:line="41" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name pos:line="42" pos:column="13">plen<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">=<pos:position pos:line="42" pos:column="19"/></operator> <literal type="number" pos:line="42" pos:column="20">2<pos:position pos:line="42" pos:column="21"/></literal></expr>;<pos:position pos:line="42" pos:column="22"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">apr_socket_recv<pos:position pos:line="43" pos:column="28"/></name><argument_list pos:line="43" pos:column="28">(<argument><expr><name pos:line="43" pos:column="29">sock<pos:position pos:line="43" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="35">prelude<pos:position pos:line="43" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="44">&amp;<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="45">plen<pos:position pos:line="43" pos:column="49"/></name></expr></argument>)<pos:position pos:line="43" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>
    }<pos:position pos:line="45" pos:column="6"/></block></then>
    <else pos:line="46" pos:column="5">else <block pos:line="46" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">lua_pushboolean<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">L<pos:position pos:line="47" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="47" pos:column="28">0<pos:position pos:line="47" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></else></if>
    <return pos:line="49" pos:column="5">return <expr><literal type="number" pos:line="49" pos:column="12">1<pos:position pos:line="49" pos:column="13"/></literal></expr>;<pos:position pos:line="49" pos:column="14"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
