<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3002_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">cfg_trim_line<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">buf<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">start<pos:position pos:line="3" pos:column="16"/></name></decl>, <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="19">end<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
    <comment type="block" pos:line="4" pos:column="5">/*
     * Leading and trailing white space is eliminated completely
     */</comment>
    <expr_stmt><expr><name pos:line="7" pos:column="5">start<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">=<pos:position pos:line="7" pos:column="12"/></operator> <name pos:line="7" pos:column="13">buf<pos:position pos:line="7" pos:column="16"/></name></expr>;<pos:position pos:line="7" pos:column="17"/></expr_stmt>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><call><name pos:line="8" pos:column="12">apr_isspace<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><operator pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">start<pos:position pos:line="8" pos:column="30"/></name></expr></argument>)<pos:position pos:line="8" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="32"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="9" pos:column="9">++<pos:position pos:line="9" pos:column="11"/></operator><name pos:line="9" pos:column="11">start<pos:position pos:line="9" pos:column="16"/></name></expr>;<pos:position pos:line="9" pos:column="17"/></expr_stmt></block></while>
    <comment type="block" pos:line="10" pos:column="5">/* blast trailing whitespace */</comment>
    <expr_stmt><expr><name pos:line="11" pos:column="5">end<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <operator pos:line="11" pos:column="11">&amp;<pos:position pos:line="11" pos:column="16"/></operator><name><name pos:line="11" pos:column="12">start<pos:position pos:line="11" pos:column="17"/></name><index pos:line="11" pos:column="17">[<expr><call><name pos:line="11" pos:column="18">strlen<pos:position pos:line="11" pos:column="24"/></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name pos:line="11" pos:column="25">start<pos:position pos:line="11" pos:column="30"/></name></expr></argument>)<pos:position pos:line="11" pos:column="31"/></argument_list></call></expr>]<pos:position pos:line="11" pos:column="32"/></index></name></expr>;<pos:position pos:line="11" pos:column="33"/></expr_stmt>
    <while pos:line="12" pos:column="5">while <condition pos:line="12" pos:column="11">(<expr><operator pos:line="12" pos:column="12">--<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">end<pos:position pos:line="12" pos:column="17"/></name> <operator pos:line="12" pos:column="18">&gt;=<pos:position pos:line="12" pos:column="23"/></operator> <name pos:line="12" pos:column="21">start<pos:position pos:line="12" pos:column="26"/></name> <operator pos:line="12" pos:column="27">&amp;&amp;<pos:position pos:line="12" pos:column="37"/></operator> <call><name pos:line="12" pos:column="30">apr_isspace<pos:position pos:line="12" pos:column="41"/></name><argument_list pos:line="12" pos:column="41">(<argument><expr><operator pos:line="12" pos:column="42">*<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="43">end<pos:position pos:line="12" pos:column="46"/></name></expr></argument>)<pos:position pos:line="12" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="48"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="13" pos:column="9">*<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">end<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">=<pos:position pos:line="13" pos:column="15"/></operator> <literal type="char" pos:line="13" pos:column="16">'\0'<pos:position pos:line="13" pos:column="20"/></literal></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt></block></while>
    <comment type="block" pos:line="14" pos:column="5">/* Zap leading whitespace by shifting */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">start<pos:position pos:line="15" pos:column="14"/></name> <operator pos:line="15" pos:column="15">!=<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">buf<pos:position pos:line="15" pos:column="21"/></name></expr>)<pos:position pos:line="15" pos:column="22"/></condition><then pos:line="15" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="9">memmove<pos:position pos:line="16" pos:column="16"/></name><argument_list pos:line="16" pos:column="16">(<argument><expr><name pos:line="16" pos:column="17">buf<pos:position pos:line="16" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="22">start<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="29">end<pos:position pos:line="16" pos:column="32"/></name> <operator pos:line="16" pos:column="33">-<pos:position pos:line="16" pos:column="34"/></operator> <name pos:line="16" pos:column="35">start<pos:position pos:line="16" pos:column="40"/></name> <operator pos:line="16" pos:column="41">+<pos:position pos:line="16" pos:column="42"/></operator> <literal type="number" pos:line="16" pos:column="43">2<pos:position pos:line="16" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="46"/></expr_stmt></block></then></if>
<cpp:ifdef pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">ifdef<pos:position pos:line="17" pos:column="7"/></cpp:directive> <name pos:line="17" pos:column="8">DEBUG_CFG_LINES<pos:position pos:line="17" pos:column="23"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="18" pos:column="5">ap_log_error<pos:position pos:line="18" pos:column="17"/></name><argument_list pos:line="18" pos:column="17">(<argument><expr><name pos:line="18" pos:column="18">APLOG_MARK<pos:position pos:line="18" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="30">APLOG_NOTICE<pos:position pos:line="18" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="44">0<pos:position pos:line="18" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="47">NULL<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="18" pos:column="53">APLOGNO<pos:position pos:line="18" pos:column="60"/></name><argument_list pos:line="18" pos:column="60">(<argument><expr><literal type="number" pos:line="18" pos:column="61">00555<pos:position pos:line="18" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="67"/></argument_list></call> <literal type="string" pos:line="18" pos:column="68">"Read config: '%s'"<pos:position pos:line="18" pos:column="87"/></literal></expr></argument>, <argument><expr><name pos:line="18" pos:column="89">buf<pos:position pos:line="18" pos:column="92"/></name></expr></argument>)<pos:position pos:line="18" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="94"/></expr_stmt>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="20" pos:column="5">return <expr><name pos:line="20" pos:column="12">end<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">-<pos:position pos:line="20" pos:column="17"/></operator> <name pos:line="20" pos:column="18">start<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">+<pos:position pos:line="20" pos:column="25"/></operator> <literal type="number" pos:line="20" pos:column="26">1<pos:position pos:line="20" pos:column="27"/></literal></expr>;<pos:position pos:line="20" pos:column="28"/></return>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
