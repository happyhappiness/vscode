<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2907_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ap_expr_eval<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">ap_expr_eval_ctx_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">ctx<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">ap_expr_t<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">node<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="72"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">ap_expr_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">e1<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><name><name pos:line="3" pos:column="27">node<pos:position pos:line="3" pos:column="31"/></name><operator pos:line="3" pos:column="31">-&gt;<pos:position pos:line="3" pos:column="36"/></operator><name pos:line="3" pos:column="33">node_arg1<pos:position pos:line="3" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">ap_expr_t<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">e2<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name><name pos:line="4" pos:column="27">node<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">-&gt;<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="33">node_arg2<pos:position pos:line="4" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">result<pos:position pos:line="5" pos:column="15"/></name> <init pos:line="5" pos:column="16">= <expr><name pos:line="5" pos:column="18">FALSE<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">inc_rec<pos:position pos:line="6" pos:column="16"/></name><argument_list pos:line="6" pos:column="16">(<argument><expr><name pos:line="6" pos:column="17">ctx<pos:position pos:line="6" pos:column="20"/></name></expr></argument>)<pos:position pos:line="6" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="22"/></condition><then pos:line="6" pos:column="22">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">result<pos:position pos:line="7" pos:column="22"/></name></expr>;<pos:position pos:line="7" pos:column="23"/></return></block></then></if>
    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><literal type="number" pos:line="8" pos:column="12">1<pos:position pos:line="8" pos:column="13"/></literal></expr>)<pos:position pos:line="8" pos:column="14"/></condition> <block pos:line="8" pos:column="15">{
        <switch pos:line="9" pos:column="9">switch <condition pos:line="9" pos:column="16">(<expr><name><name pos:line="9" pos:column="17">node<pos:position pos:line="9" pos:column="21"/></name><operator pos:line="9" pos:column="21">-&gt;<pos:position pos:line="9" pos:column="26"/></operator><name pos:line="9" pos:column="23">node_op<pos:position pos:line="9" pos:column="30"/></name></name></expr>)<pos:position pos:line="9" pos:column="31"/></condition> <block pos:line="9" pos:column="32">{
        <case pos:line="10" pos:column="9">case <expr><name pos:line="10" pos:column="14">op_True<pos:position pos:line="10" pos:column="21"/></name></expr>:<pos:position pos:line="10" pos:column="22"/></case>
            <expr_stmt><expr><name pos:line="11" pos:column="13">result<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">^=<pos:position pos:line="11" pos:column="22"/></operator> <name pos:line="11" pos:column="23">TRUE<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></expr_stmt>
            <goto pos:line="12" pos:column="13">goto <name pos:line="12" pos:column="18">out<pos:position pos:line="12" pos:column="21"/></name>;<pos:position pos:line="12" pos:column="22"/></goto>
        <case pos:line="13" pos:column="9">case <expr><name pos:line="13" pos:column="14">op_False<pos:position pos:line="13" pos:column="22"/></name></expr>:<pos:position pos:line="13" pos:column="23"/></case>
            <expr_stmt><expr><name pos:line="14" pos:column="13">result<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">^=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">FALSE<pos:position pos:line="14" pos:column="28"/></name></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
            <goto pos:line="15" pos:column="13">goto <name pos:line="15" pos:column="18">out<pos:position pos:line="15" pos:column="21"/></name>;<pos:position pos:line="15" pos:column="22"/></goto>
        <case pos:line="16" pos:column="9">case <expr><name pos:line="16" pos:column="14">op_Not<pos:position pos:line="16" pos:column="20"/></name></expr>:<pos:position pos:line="16" pos:column="21"/></case>
            <expr_stmt><expr><name pos:line="17" pos:column="13">result<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <operator pos:line="17" pos:column="22">!<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="23">result<pos:position pos:line="17" pos:column="29"/></name></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name pos:line="18" pos:column="13">node<pos:position pos:line="18" pos:column="17"/></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <name pos:line="18" pos:column="20">e1<pos:position pos:line="18" pos:column="22"/></name></expr>;<pos:position pos:line="18" pos:column="23"/></expr_stmt>
            <break pos:line="19" pos:column="13">break;<pos:position pos:line="19" pos:column="19"/></break>
        <case pos:line="20" pos:column="9">case <expr><name pos:line="20" pos:column="14">op_Or<pos:position pos:line="20" pos:column="19"/></name></expr>:<pos:position pos:line="20" pos:column="20"/></case>
            <do pos:line="21" pos:column="13">do <block pos:line="21" pos:column="16">{
                <if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">e1<pos:position pos:line="22" pos:column="23"/></name><operator pos:line="22" pos:column="23">-&gt;<pos:position pos:line="22" pos:column="28"/></operator><name pos:line="22" pos:column="25">node_op<pos:position pos:line="22" pos:column="32"/></name></name> <operator pos:line="22" pos:column="33">==<pos:position pos:line="22" pos:column="35"/></operator> <name pos:line="22" pos:column="36">op_Not<pos:position pos:line="22" pos:column="42"/></name></expr>)<pos:position pos:line="22" pos:column="43"/></condition><then pos:line="22" pos:column="43"> <block pos:line="22" pos:column="44">{
                    <if pos:line="23" pos:column="21">if <condition pos:line="23" pos:column="24">(<expr><operator pos:line="23" pos:column="25">!<pos:position pos:line="23" pos:column="26"/></operator><call><name pos:line="23" pos:column="26">ap_expr_eval<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><name pos:line="23" pos:column="39">ctx<pos:position pos:line="23" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="44">e1<pos:position pos:line="23" pos:column="46"/></name><operator pos:line="23" pos:column="46">-&gt;<pos:position pos:line="23" pos:column="51"/></operator><name pos:line="23" pos:column="48">node_arg1<pos:position pos:line="23" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="59"/></condition><then pos:line="23" pos:column="59"> <block pos:line="23" pos:column="60">{
                        <expr_stmt><expr><name pos:line="24" pos:column="25">result<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">^=<pos:position pos:line="24" pos:column="34"/></operator> <name pos:line="24" pos:column="35">TRUE<pos:position pos:line="24" pos:column="39"/></name></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
                        <goto pos:line="25" pos:column="25">goto <name pos:line="25" pos:column="30">out<pos:position pos:line="25" pos:column="33"/></name>;<pos:position pos:line="25" pos:column="34"/></goto>
                    }<pos:position pos:line="26" pos:column="22"/></block></then></if>
                }<pos:position pos:line="27" pos:column="18"/></block></then>
                <else pos:line="28" pos:column="17">else <block pos:line="28" pos:column="22">{
                    <if pos:line="29" pos:column="21">if <condition pos:line="29" pos:column="24">(<expr><call><name pos:line="29" pos:column="25">ap_expr_eval<pos:position pos:line="29" pos:column="37"/></name><argument_list pos:line="29" pos:column="37">(<argument><expr><name pos:line="29" pos:column="38">ctx<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">e1<pos:position pos:line="29" pos:column="45"/></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="47"/></condition><then pos:line="29" pos:column="47"> <block pos:line="29" pos:column="48">{
                        <expr_stmt><expr><name pos:line="30" pos:column="25">result<pos:position pos:line="30" pos:column="31"/></name> <operator pos:line="30" pos:column="32">^=<pos:position pos:line="30" pos:column="34"/></operator> <name pos:line="30" pos:column="35">TRUE<pos:position pos:line="30" pos:column="39"/></name></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
                        <goto pos:line="31" pos:column="25">goto <name pos:line="31" pos:column="30">out<pos:position pos:line="31" pos:column="33"/></name>;<pos:position pos:line="31" pos:column="34"/></goto>
                    }<pos:position pos:line="32" pos:column="22"/></block></then></if>
                }<pos:position pos:line="33" pos:column="18"/></block></else></if>
                <expr_stmt><expr><name pos:line="34" pos:column="17">node<pos:position pos:line="34" pos:column="21"/></name> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <name><name pos:line="34" pos:column="24">node<pos:position pos:line="34" pos:column="28"/></name><operator pos:line="34" pos:column="28">-&gt;<pos:position pos:line="34" pos:column="33"/></operator><name pos:line="34" pos:column="30">node_arg2<pos:position pos:line="34" pos:column="39"/></name></name></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>
                <expr_stmt><expr><name pos:line="35" pos:column="17">e1<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <name><name pos:line="35" pos:column="22">node<pos:position pos:line="35" pos:column="26"/></name><operator pos:line="35" pos:column="26">-&gt;<pos:position pos:line="35" pos:column="31"/></operator><name pos:line="35" pos:column="28">node_arg1<pos:position pos:line="35" pos:column="37"/></name></name></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="36" pos:column="14"/></block> while <condition pos:line="36" pos:column="21">(<expr><name><name pos:line="36" pos:column="22">node<pos:position pos:line="36" pos:column="26"/></name><operator pos:line="36" pos:column="26">-&gt;<pos:position pos:line="36" pos:column="31"/></operator><name pos:line="36" pos:column="28">node_op<pos:position pos:line="36" pos:column="35"/></name></name> <operator pos:line="36" pos:column="36">==<pos:position pos:line="36" pos:column="38"/></operator> <name pos:line="36" pos:column="39">op_Or<pos:position pos:line="36" pos:column="44"/></name></expr>)<pos:position pos:line="36" pos:column="45"/></condition>;<pos:position pos:line="36" pos:column="46"/></do>
            <break pos:line="37" pos:column="13">break;<pos:position pos:line="37" pos:column="19"/></break>
        <case pos:line="38" pos:column="9">case <expr><name pos:line="38" pos:column="14">op_And<pos:position pos:line="38" pos:column="20"/></name></expr>:<pos:position pos:line="38" pos:column="21"/></case>
            <do pos:line="39" pos:column="13">do <block pos:line="39" pos:column="16">{
                <if pos:line="40" pos:column="17">if <condition pos:line="40" pos:column="20">(<expr><name><name pos:line="40" pos:column="21">e1<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">-&gt;<pos:position pos:line="40" pos:column="28"/></operator><name pos:line="40" pos:column="25">node_op<pos:position pos:line="40" pos:column="32"/></name></name> <operator pos:line="40" pos:column="33">==<pos:position pos:line="40" pos:column="35"/></operator> <name pos:line="40" pos:column="36">op_Not<pos:position pos:line="40" pos:column="42"/></name></expr>)<pos:position pos:line="40" pos:column="43"/></condition><then pos:line="40" pos:column="43"> <block pos:line="40" pos:column="44">{
                    <if pos:line="41" pos:column="21">if <condition pos:line="41" pos:column="24">(<expr><call><name pos:line="41" pos:column="25">ap_expr_eval<pos:position pos:line="41" pos:column="37"/></name><argument_list pos:line="41" pos:column="37">(<argument><expr><name pos:line="41" pos:column="38">ctx<pos:position pos:line="41" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="43">e1<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">-&gt;<pos:position pos:line="41" pos:column="50"/></operator><name pos:line="41" pos:column="47">node_arg1<pos:position pos:line="41" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="58"/></condition><then pos:line="41" pos:column="58"> <block pos:line="41" pos:column="59">{
                        <expr_stmt><expr><name pos:line="42" pos:column="25">result<pos:position pos:line="42" pos:column="31"/></name> <operator pos:line="42" pos:column="32">^=<pos:position pos:line="42" pos:column="34"/></operator> <name pos:line="42" pos:column="35">FALSE<pos:position pos:line="42" pos:column="40"/></name></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>
                        <goto pos:line="43" pos:column="25">goto <name pos:line="43" pos:column="30">out<pos:position pos:line="43" pos:column="33"/></name>;<pos:position pos:line="43" pos:column="34"/></goto>
                    }<pos:position pos:line="44" pos:column="22"/></block></then></if>
                }<pos:position pos:line="45" pos:column="18"/></block></then>
                <else pos:line="46" pos:column="17">else <block pos:line="46" pos:column="22">{
                    <if pos:line="47" pos:column="21">if <condition pos:line="47" pos:column="24">(<expr><operator pos:line="47" pos:column="25">!<pos:position pos:line="47" pos:column="26"/></operator><call><name pos:line="47" pos:column="26">ap_expr_eval<pos:position pos:line="47" pos:column="38"/></name><argument_list pos:line="47" pos:column="38">(<argument><expr><name pos:line="47" pos:column="39">ctx<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="44">e1<pos:position pos:line="47" pos:column="46"/></name></expr></argument>)<pos:position pos:line="47" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="47" pos:column="48"/></condition><then pos:line="47" pos:column="48"> <block pos:line="47" pos:column="49">{
                        <expr_stmt><expr><name pos:line="48" pos:column="25">result<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">^=<pos:position pos:line="48" pos:column="34"/></operator> <name pos:line="48" pos:column="35">FALSE<pos:position pos:line="48" pos:column="40"/></name></expr>;<pos:position pos:line="48" pos:column="41"/></expr_stmt>
                        <goto pos:line="49" pos:column="25">goto <name pos:line="49" pos:column="30">out<pos:position pos:line="49" pos:column="33"/></name>;<pos:position pos:line="49" pos:column="34"/></goto>
                    }<pos:position pos:line="50" pos:column="22"/></block></then></if>
                }<pos:position pos:line="51" pos:column="18"/></block></else></if>
                <expr_stmt><expr><name pos:line="52" pos:column="17">node<pos:position pos:line="52" pos:column="21"/></name> <operator pos:line="52" pos:column="22">=<pos:position pos:line="52" pos:column="23"/></operator> <name><name pos:line="52" pos:column="24">node<pos:position pos:line="52" pos:column="28"/></name><operator pos:line="52" pos:column="28">-&gt;<pos:position pos:line="52" pos:column="33"/></operator><name pos:line="52" pos:column="30">node_arg2<pos:position pos:line="52" pos:column="39"/></name></name></expr>;<pos:position pos:line="52" pos:column="40"/></expr_stmt>
                <expr_stmt><expr><name pos:line="53" pos:column="17">e1<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <name><name pos:line="53" pos:column="22">node<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">-&gt;<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="28">node_arg1<pos:position pos:line="53" pos:column="37"/></name></name></expr>;<pos:position pos:line="53" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="54" pos:column="14"/></block> while <condition pos:line="54" pos:column="21">(<expr><name><name pos:line="54" pos:column="22">node<pos:position pos:line="54" pos:column="26"/></name><operator pos:line="54" pos:column="26">-&gt;<pos:position pos:line="54" pos:column="31"/></operator><name pos:line="54" pos:column="28">node_op<pos:position pos:line="54" pos:column="35"/></name></name> <operator pos:line="54" pos:column="36">==<pos:position pos:line="54" pos:column="38"/></operator> <name pos:line="54" pos:column="39">op_And<pos:position pos:line="54" pos:column="45"/></name></expr>)<pos:position pos:line="54" pos:column="46"/></condition>;<pos:position pos:line="54" pos:column="47"/></do>
            <break pos:line="55" pos:column="13">break;<pos:position pos:line="55" pos:column="19"/></break>
        <case pos:line="56" pos:column="9">case <expr><name pos:line="56" pos:column="14">op_UnaryOpCall<pos:position pos:line="56" pos:column="28"/></name></expr>:<pos:position pos:line="56" pos:column="29"/></case>
            <expr_stmt><expr><name pos:line="57" pos:column="13">result<pos:position pos:line="57" pos:column="19"/></name> <operator pos:line="57" pos:column="20">^=<pos:position pos:line="57" pos:column="22"/></operator> <call><name pos:line="57" pos:column="23">ap_expr_eval_unary_op<pos:position pos:line="57" pos:column="44"/></name><argument_list pos:line="57" pos:column="44">(<argument><expr><name pos:line="57" pos:column="45">ctx<pos:position pos:line="57" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="50">e1<pos:position pos:line="57" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="54">e2<pos:position pos:line="57" pos:column="56"/></name></expr></argument>)<pos:position pos:line="57" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="58"/></expr_stmt>
            <goto pos:line="58" pos:column="13">goto <name pos:line="58" pos:column="18">out<pos:position pos:line="58" pos:column="21"/></name>;<pos:position pos:line="58" pos:column="22"/></goto>
        <case pos:line="59" pos:column="9">case <expr><name pos:line="59" pos:column="14">op_BinaryOpCall<pos:position pos:line="59" pos:column="29"/></name></expr>:<pos:position pos:line="59" pos:column="30"/></case>
            <expr_stmt><expr><name pos:line="60" pos:column="13">result<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">^=<pos:position pos:line="60" pos:column="22"/></operator> <call><name pos:line="60" pos:column="23">ap_expr_eval_binary_op<pos:position pos:line="60" pos:column="45"/></name><argument_list pos:line="60" pos:column="45">(<argument><expr><name pos:line="60" pos:column="46">ctx<pos:position pos:line="60" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="51">e1<pos:position pos:line="60" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="55">e2<pos:position pos:line="60" pos:column="57"/></name></expr></argument>)<pos:position pos:line="60" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="59"/></expr_stmt>
            <goto pos:line="61" pos:column="13">goto <name pos:line="61" pos:column="18">out<pos:position pos:line="61" pos:column="21"/></name>;<pos:position pos:line="61" pos:column="22"/></goto>
        <case pos:line="62" pos:column="9">case <expr><name pos:line="62" pos:column="14">op_Comp<pos:position pos:line="62" pos:column="21"/></name></expr>:<pos:position pos:line="62" pos:column="22"/></case>
            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><name><name pos:line="63" pos:column="17">ctx<pos:position pos:line="63" pos:column="20"/></name><operator pos:line="63" pos:column="20">-&gt;<pos:position pos:line="63" pos:column="25"/></operator><name pos:line="63" pos:column="22">info<pos:position pos:line="63" pos:column="26"/></name><operator pos:line="63" pos:column="26">-&gt;<pos:position pos:line="63" pos:column="31"/></operator><name pos:line="63" pos:column="28">flags<pos:position pos:line="63" pos:column="33"/></name></name> <operator pos:line="63" pos:column="34">&amp;<pos:position pos:line="63" pos:column="39"/></operator> <name pos:line="63" pos:column="36">AP_EXPR_FLAG_SSL_EXPR_COMPAT<pos:position pos:line="63" pos:column="64"/></name></expr>)<pos:position pos:line="63" pos:column="65"/></condition><then pos:line="63" pos:column="65">
                <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="17">result<pos:position pos:line="64" pos:column="23"/></name> <operator pos:line="64" pos:column="24">^=<pos:position pos:line="64" pos:column="26"/></operator> <call><name pos:line="64" pos:column="27">ssl_expr_eval_comp<pos:position pos:line="64" pos:column="45"/></name><argument_list pos:line="64" pos:column="45">(<argument><expr><name pos:line="64" pos:column="46">ctx<pos:position pos:line="64" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="51">e1<pos:position pos:line="64" pos:column="53"/></name></expr></argument>)<pos:position pos:line="64" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="55"/></expr_stmt></block></then>
            <else pos:line="65" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="66" pos:column="17">result<pos:position pos:line="66" pos:column="23"/></name> <operator pos:line="66" pos:column="24">^=<pos:position pos:line="66" pos:column="26"/></operator> <call><name pos:line="66" pos:column="27">ap_expr_eval_comp<pos:position pos:line="66" pos:column="44"/></name><argument_list pos:line="66" pos:column="44">(<argument><expr><name pos:line="66" pos:column="45">ctx<pos:position pos:line="66" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="50">e1<pos:position pos:line="66" pos:column="52"/></name></expr></argument>)<pos:position pos:line="66" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="54"/></expr_stmt></block></else></if>
            <goto pos:line="67" pos:column="13">goto <name pos:line="67" pos:column="18">out<pos:position pos:line="67" pos:column="21"/></name>;<pos:position pos:line="67" pos:column="22"/></goto>
        <default pos:line="68" pos:column="9">default:<pos:position pos:line="68" pos:column="17"/></default>
            <expr_stmt><expr><operator pos:line="69" pos:column="13">*<pos:position pos:line="69" pos:column="14"/></operator><name><name pos:line="69" pos:column="14">ctx<pos:position pos:line="69" pos:column="17"/></name><operator pos:line="69" pos:column="17">-&gt;<pos:position pos:line="69" pos:column="22"/></operator><name pos:line="69" pos:column="19">err<pos:position pos:line="69" pos:column="22"/></name></name> <operator pos:line="69" pos:column="23">=<pos:position pos:line="69" pos:column="24"/></operator> <literal type="string" pos:line="69" pos:column="25">"Internal evaluation error: Unknown expression node"<pos:position pos:line="69" pos:column="77"/></literal></expr>;<pos:position pos:line="69" pos:column="78"/></expr_stmt>
            <goto pos:line="70" pos:column="13">goto <name pos:line="70" pos:column="18">out<pos:position pos:line="70" pos:column="21"/></name>;<pos:position pos:line="70" pos:column="22"/></goto>
        }<pos:position pos:line="71" pos:column="10"/></block></switch>
        <expr_stmt><expr><name pos:line="72" pos:column="9">e1<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">=<pos:position pos:line="72" pos:column="13"/></operator> <name><name pos:line="72" pos:column="14">node<pos:position pos:line="72" pos:column="18"/></name><operator pos:line="72" pos:column="18">-&gt;<pos:position pos:line="72" pos:column="23"/></operator><name pos:line="72" pos:column="20">node_arg1<pos:position pos:line="72" pos:column="29"/></name></name></expr>;<pos:position pos:line="72" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="73" pos:column="9">e2<pos:position pos:line="73" pos:column="11"/></name> <operator pos:line="73" pos:column="12">=<pos:position pos:line="73" pos:column="13"/></operator> <name><name pos:line="73" pos:column="14">node<pos:position pos:line="73" pos:column="18"/></name><operator pos:line="73" pos:column="18">-&gt;<pos:position pos:line="73" pos:column="23"/></operator><name pos:line="73" pos:column="20">node_arg2<pos:position pos:line="73" pos:column="29"/></name></name></expr>;<pos:position pos:line="73" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="74" pos:column="6"/></block></while>
<label><name pos:line="75" pos:column="1">out<pos:position pos:line="75" pos:column="4"/></name>:<pos:position pos:line="75" pos:column="5"/></label>
    <expr_stmt><expr><name><name pos:line="76" pos:column="5">ctx<pos:position pos:line="76" pos:column="8"/></name><operator pos:line="76" pos:column="8">-&gt;<pos:position pos:line="76" pos:column="13"/></operator><name pos:line="76" pos:column="10">reclvl<pos:position pos:line="76" pos:column="16"/></name></name><operator pos:line="76" pos:column="16">--<pos:position pos:line="76" pos:column="18"/></operator></expr>;<pos:position pos:line="76" pos:column="19"/></expr_stmt>
    <return pos:line="77" pos:column="5">return <expr><name pos:line="77" pos:column="12">result<pos:position pos:line="77" pos:column="18"/></name></expr>;<pos:position pos:line="77" pos:column="19"/></return>
}<pos:position pos:line="78" pos:column="2"/></block></function></unit>
