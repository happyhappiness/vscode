<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_3658.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">xlate_in_filter<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">ap_filter_t<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">f<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">apr_bucket_brigade<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">bb<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">ap_input_mode_t<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">mode<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="50">apr_read_type_e<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">block<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="3" pos:column="28">apr_off_t<pos:position pos:line="3" pos:column="37"/></name></type> <name pos:line="3" pos:column="38">readbytes<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">charset_req_t<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">reqinfo<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><call><name pos:line="6" pos:column="30">ap_get_module_config<pos:position pos:line="6" pos:column="50"/></name><argument_list pos:line="6" pos:column="50">(<argument><expr><name><name pos:line="6" pos:column="51">f<pos:position pos:line="6" pos:column="52"/></name><operator pos:line="6" pos:column="52">-&gt;<pos:position pos:line="6" pos:column="57"/></operator><name pos:line="6" pos:column="54">r<pos:position pos:line="6" pos:column="55"/></name><operator pos:line="6" pos:column="55">-&gt;<pos:position pos:line="6" pos:column="60"/></operator><name pos:line="6" pos:column="57">request_config<pos:position pos:line="6" pos:column="71"/></name></name></expr></argument>,
                                                  <argument><expr><operator pos:line="7" pos:column="51">&amp;<pos:position pos:line="7" pos:column="56"/></operator><name pos:line="7" pos:column="52">charset_lite_module<pos:position pos:line="7" pos:column="71"/></name></expr></argument>)<pos:position pos:line="7" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="73"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">charset_dir_t<pos:position pos:line="8" pos:column="18"/></name> <modifier pos:line="8" pos:column="19">*<pos:position pos:line="8" pos:column="20"/></modifier></type><name pos:line="8" pos:column="20">dc<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><call><name pos:line="8" pos:column="25">ap_get_module_config<pos:position pos:line="8" pos:column="45"/></name><argument_list pos:line="8" pos:column="45">(<argument><expr><name><name pos:line="8" pos:column="46">f<pos:position pos:line="8" pos:column="47"/></name><operator pos:line="8" pos:column="47">-&gt;<pos:position pos:line="8" pos:column="52"/></operator><name pos:line="8" pos:column="49">r<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">-&gt;<pos:position pos:line="8" pos:column="55"/></operator><name pos:line="8" pos:column="52">per_dir_config<pos:position pos:line="8" pos:column="66"/></name></name></expr></argument>,
                                             <argument><expr><operator pos:line="9" pos:column="46">&amp;<pos:position pos:line="9" pos:column="51"/></operator><name pos:line="9" pos:column="47">charset_lite_module<pos:position pos:line="9" pos:column="66"/></name></expr></argument>)<pos:position pos:line="9" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="68"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">charset_filter_ctx_t<pos:position pos:line="10" pos:column="25"/></name> <modifier pos:line="10" pos:column="26">*<pos:position pos:line="10" pos:column="27"/></modifier></type><name pos:line="10" pos:column="27">ctx<pos:position pos:line="10" pos:column="30"/></name> <init pos:line="10" pos:column="31">= <expr><name><name pos:line="10" pos:column="33">f<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">ctx<pos:position pos:line="10" pos:column="39"/></name></name></expr></init></decl>;<pos:position pos:line="10" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">apr_size_t<pos:position pos:line="11" pos:column="15"/></name></type> <name pos:line="11" pos:column="16">buffer_size<pos:position pos:line="11" pos:column="27"/></name></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">hit_eos<pos:position pos:line="12" pos:column="16"/></name></decl>;<pos:position pos:line="12" pos:column="17"/></decl_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><operator pos:line="14" pos:column="9">!<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">ctx<pos:position pos:line="14" pos:column="13"/></name></expr>)<pos:position pos:line="14" pos:column="14"/></condition><then pos:line="14" pos:column="14"> <block pos:line="14" pos:column="15">{
        <comment type="block" pos:line="15" pos:column="9">/* this is SetInputFilter path; grab the preallocated context,
         * if any; note that if we decided not to do anything in an earlier
         * handler, we won't even have a reqinfo
         */</comment>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">reqinfo<pos:position pos:line="19" pos:column="20"/></name></expr>)<pos:position pos:line="19" pos:column="21"/></condition><then pos:line="19" pos:column="21"> <block pos:line="19" pos:column="22">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">ctx<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <name><name pos:line="20" pos:column="19">f<pos:position pos:line="20" pos:column="20"/></name><operator pos:line="20" pos:column="20">-&gt;<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="22">ctx<pos:position pos:line="20" pos:column="25"/></name></name> <operator pos:line="20" pos:column="26">=<pos:position pos:line="20" pos:column="27"/></operator> <name><name pos:line="20" pos:column="28">reqinfo<pos:position pos:line="20" pos:column="35"/></name><operator pos:line="20" pos:column="35">-&gt;<pos:position pos:line="20" pos:column="40"/></operator><name pos:line="20" pos:column="37">input_ctx<pos:position pos:line="20" pos:column="46"/></name></name></expr>;<pos:position pos:line="20" pos:column="47"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">reqinfo<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">-&gt;<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="22">input_ctx<pos:position pos:line="21" pos:column="31"/></name></name> <operator pos:line="21" pos:column="32">=<pos:position pos:line="21" pos:column="33"/></operator> <name pos:line="21" pos:column="34">NULL<pos:position pos:line="21" pos:column="38"/></name></expr>;<pos:position pos:line="21" pos:column="39"/></expr_stmt> <comment type="block" pos:line="21" pos:column="40">/* prevent SNAFU if user coded us twice
                                        * in the filter chain; we can't have two
                                        * instances using the same context
                                        */</comment>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><operator pos:line="26" pos:column="13">!<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">ctx<pos:position pos:line="26" pos:column="17"/></name></expr>)<pos:position pos:line="26" pos:column="18"/></condition><then pos:line="26" pos:column="18"> <block pos:line="26" pos:column="19">{                   <comment type="block" pos:line="26" pos:column="39">/* no idea how to translate; don't do anything */</comment>
            <expr_stmt><expr><name pos:line="27" pos:column="13">ctx<pos:position pos:line="27" pos:column="16"/></name> <operator pos:line="27" pos:column="17">=<pos:position pos:line="27" pos:column="18"/></operator> <name><name pos:line="27" pos:column="19">f<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">ctx<pos:position pos:line="27" pos:column="25"/></name></name> <operator pos:line="27" pos:column="26">=<pos:position pos:line="27" pos:column="27"/></operator> <call><name pos:line="27" pos:column="28">apr_pcalloc<pos:position pos:line="27" pos:column="39"/></name><argument_list pos:line="27" pos:column="39">(<argument><expr><name><name pos:line="27" pos:column="40">f<pos:position pos:line="27" pos:column="41"/></name><operator pos:line="27" pos:column="41">-&gt;<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="43">r<pos:position pos:line="27" pos:column="44"/></name><operator pos:line="27" pos:column="44">-&gt;<pos:position pos:line="27" pos:column="49"/></operator><name pos:line="27" pos:column="46">pool<pos:position pos:line="27" pos:column="50"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="27" pos:column="52">sizeof<argument_list pos:line="27" pos:column="58">(<argument><expr><name pos:line="27" pos:column="59">charset_filter_ctx_t<pos:position pos:line="27" pos:column="79"/></name></expr></argument>)<pos:position pos:line="27" pos:column="80"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="27" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="82"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="28" pos:column="13">ctx<pos:position pos:line="28" pos:column="16"/></name><operator pos:line="28" pos:column="16">-&gt;<pos:position pos:line="28" pos:column="21"/></operator><name pos:line="28" pos:column="18">dc<pos:position pos:line="28" pos:column="20"/></name></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <name pos:line="28" pos:column="23">dc<pos:position pos:line="28" pos:column="25"/></name></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="29" pos:column="13">ctx<pos:position pos:line="29" pos:column="16"/></name><operator pos:line="29" pos:column="16">-&gt;<pos:position pos:line="29" pos:column="21"/></operator><name pos:line="29" pos:column="18">noop<pos:position pos:line="29" pos:column="22"/></name></name> <operator pos:line="29" pos:column="23">=<pos:position pos:line="29" pos:column="24"/></operator> <literal type="number" pos:line="29" pos:column="25">1<pos:position pos:line="29" pos:column="26"/></literal></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name><name pos:line="33" pos:column="9">dc<pos:position pos:line="33" pos:column="11"/></name><operator pos:line="33" pos:column="11">-&gt;<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="13">debug<pos:position pos:line="33" pos:column="18"/></name></name> <operator pos:line="33" pos:column="19">&gt;=<pos:position pos:line="33" pos:column="24"/></operator> <name pos:line="33" pos:column="22">DBGLVL_GORY<pos:position pos:line="33" pos:column="33"/></name></expr>)<pos:position pos:line="33" pos:column="34"/></condition><then pos:line="33" pos:column="34"> <block pos:line="33" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">ap_log_rerror<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><name pos:line="34" pos:column="23">APLOG_MARK<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="35">APLOG_DEBUG<pos:position pos:line="34" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="48">0<pos:position pos:line="34" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="51">f<pos:position pos:line="34" pos:column="52"/></name><operator pos:line="34" pos:column="52">-&gt;<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="54">r<pos:position pos:line="34" pos:column="55"/></name></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="35" pos:column="22">"xlate_in_filter() - "<pos:position pos:line="35" pos:column="44"/></literal>
                     <literal type="string" pos:line="36" pos:column="22">"charset_source: %s charset_default: %s"<pos:position pos:line="36" pos:column="62"/></literal></expr></argument>,
                     <argument><expr><ternary><condition><expr><name pos:line="37" pos:column="22">dc<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">&amp;&amp;<pos:position pos:line="37" pos:column="35"/></operator> <name><name pos:line="37" pos:column="28">dc<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">charset_source<pos:position pos:line="37" pos:column="46"/></name></name></expr> ?<pos:position pos:line="37" pos:column="48"/></condition><then pos:line="37" pos:column="48"> <expr><name><name pos:line="37" pos:column="49">dc<pos:position pos:line="37" pos:column="51"/></name><operator pos:line="37" pos:column="51">-&gt;<pos:position pos:line="37" pos:column="56"/></operator><name pos:line="37" pos:column="53">charset_source<pos:position pos:line="37" pos:column="67"/></name></name></expr> <pos:position pos:line="37" pos:column="68"/></then><else pos:line="37" pos:column="68">: <expr><literal type="string" pos:line="37" pos:column="70">"(none)"<pos:position pos:line="37" pos:column="78"/></literal></expr></else></ternary></expr></argument>,
                     <argument><expr><ternary><condition><expr><name pos:line="38" pos:column="22">dc<pos:position pos:line="38" pos:column="24"/></name> <operator pos:line="38" pos:column="25">&amp;&amp;<pos:position pos:line="38" pos:column="35"/></operator> <name><name pos:line="38" pos:column="28">dc<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">-&gt;<pos:position pos:line="38" pos:column="35"/></operator><name pos:line="38" pos:column="32">charset_default<pos:position pos:line="38" pos:column="47"/></name></name></expr> ?<pos:position pos:line="38" pos:column="49"/></condition><then pos:line="38" pos:column="49"> <expr><name><name pos:line="38" pos:column="50">dc<pos:position pos:line="38" pos:column="52"/></name><operator pos:line="38" pos:column="52">-&gt;<pos:position pos:line="38" pos:column="57"/></operator><name pos:line="38" pos:column="54">charset_default<pos:position pos:line="38" pos:column="69"/></name></name></expr> <pos:position pos:line="38" pos:column="70"/></then><else pos:line="38" pos:column="70">: <expr><literal type="string" pos:line="38" pos:column="72">"(none)"<pos:position pos:line="38" pos:column="80"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="38" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="82"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">!<pos:position pos:line="41" pos:column="10"/></operator><name><name pos:line="41" pos:column="10">ctx<pos:position pos:line="41" pos:column="13"/></name><operator pos:line="41" pos:column="13">-&gt;<pos:position pos:line="41" pos:column="18"/></operator><name pos:line="41" pos:column="15">ran<pos:position pos:line="41" pos:column="18"/></name></name></expr>)<pos:position pos:line="41" pos:column="19"/></condition><then pos:line="41" pos:column="19"> <block pos:line="41" pos:column="20">{  <comment type="block" pos:line="41" pos:column="23">/* filter never ran before */</comment>
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">chk_filter_chain<pos:position pos:line="42" pos:column="25"/></name><argument_list pos:line="42" pos:column="25">(<argument><expr><name pos:line="42" pos:column="26">f<pos:position pos:line="42" pos:column="27"/></name></expr></argument>)<pos:position pos:line="42" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">ctx<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">ran<pos:position pos:line="43" pos:column="17"/></name></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <literal type="number" pos:line="43" pos:column="20">1<pos:position pos:line="43" pos:column="21"/></literal></expr>;<pos:position pos:line="43" pos:column="22"/></expr_stmt>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><name><name pos:line="44" pos:column="14">ctx<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">-&gt;<pos:position pos:line="44" pos:column="22"/></operator><name pos:line="44" pos:column="19">noop<pos:position pos:line="44" pos:column="23"/></name></name> <operator pos:line="44" pos:column="24">&amp;&amp;<pos:position pos:line="44" pos:column="34"/></operator> <operator pos:line="44" pos:column="27">!<pos:position pos:line="44" pos:column="28"/></operator><name><name pos:line="44" pos:column="28">ctx<pos:position pos:line="44" pos:column="31"/></name><operator pos:line="44" pos:column="31">-&gt;<pos:position pos:line="44" pos:column="36"/></operator><name pos:line="44" pos:column="33">is_sb<pos:position pos:line="44" pos:column="38"/></name></name>
            <operator pos:line="45" pos:column="13">&amp;&amp;<pos:position pos:line="45" pos:column="23"/></operator> <call><name pos:line="45" pos:column="16">apr_table_get<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">(<argument><expr><name><name pos:line="45" pos:column="30">f<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">-&gt;<pos:position pos:line="45" pos:column="36"/></operator><name pos:line="45" pos:column="33">r<pos:position pos:line="45" pos:column="34"/></name><operator pos:line="45" pos:column="34">-&gt;<pos:position pos:line="45" pos:column="39"/></operator><name pos:line="45" pos:column="36">headers_in<pos:position pos:line="45" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="48">"Content-Length"<pos:position pos:line="45" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="66"/></condition><then pos:line="45" pos:column="66"> <block pos:line="45" pos:column="67">{
            <comment type="block" pos:line="46" pos:column="13">/* A Content-Length header is present, but it won't be valid after
             * conversion because we're not converting between two single-byte
             * charsets.  This will affect most CGI scripts and may affect
             * some modules.
             * Content-Length can't be unset here because that would break
             * being able to read the request body.
             * Processing of chunked request bodies is not impacted by this
             * filter since the the length was not declared anyway.
             */</comment>
            <if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><name><name pos:line="55" pos:column="17">dc<pos:position pos:line="55" pos:column="19"/></name><operator pos:line="55" pos:column="19">-&gt;<pos:position pos:line="55" pos:column="24"/></operator><name pos:line="55" pos:column="21">debug<pos:position pos:line="55" pos:column="26"/></name></name> <operator pos:line="55" pos:column="27">&gt;=<pos:position pos:line="55" pos:column="32"/></operator> <name pos:line="55" pos:column="30">DBGLVL_PMC<pos:position pos:line="55" pos:column="40"/></name></expr>)<pos:position pos:line="55" pos:column="41"/></condition><then pos:line="55" pos:column="41"> <block pos:line="55" pos:column="42">{
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">ap_log_rerror<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">APLOG_MARK<pos:position pos:line="56" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="43">APLOG_DEBUG<pos:position pos:line="56" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="56">0<pos:position pos:line="56" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="59">f<pos:position pos:line="56" pos:column="60"/></name><operator pos:line="56" pos:column="60">-&gt;<pos:position pos:line="56" pos:column="65"/></operator><name pos:line="56" pos:column="62">r<pos:position pos:line="56" pos:column="63"/></name></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="57" pos:column="31">"Request body length may change, resulting in "<pos:position pos:line="57" pos:column="78"/></literal>
                              <literal type="string" pos:line="58" pos:column="31">"misprocessing by some modules or scripts"<pos:position pos:line="58" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="75"/></expr_stmt>
            }<pos:position pos:line="59" pos:column="14"/></block></then></if>
        }<pos:position pos:line="60" pos:column="10"/></block></then></if>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name><name pos:line="63" pos:column="9">ctx<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">-&gt;<pos:position pos:line="63" pos:column="17"/></operator><name pos:line="63" pos:column="14">noop<pos:position pos:line="63" pos:column="18"/></name></name></expr>)<pos:position pos:line="63" pos:column="19"/></condition><then pos:line="63" pos:column="19"> <block pos:line="63" pos:column="20">{
        <return pos:line="64" pos:column="9">return <expr><call><name pos:line="64" pos:column="16">ap_get_brigade<pos:position pos:line="64" pos:column="30"/></name><argument_list pos:line="64" pos:column="30">(<argument><expr><name><name pos:line="64" pos:column="31">f<pos:position pos:line="64" pos:column="32"/></name><operator pos:line="64" pos:column="32">-&gt;<pos:position pos:line="64" pos:column="37"/></operator><name pos:line="64" pos:column="34">next<pos:position pos:line="64" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="40">bb<pos:position pos:line="64" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="44">mode<pos:position pos:line="64" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="50">block<pos:position pos:line="64" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="57">readbytes<pos:position pos:line="64" pos:column="66"/></name></expr></argument>)<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="68"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><call><name pos:line="67" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="67" pos:column="26"/></name><argument_list pos:line="67" pos:column="26">(<argument><expr><name><name pos:line="67" pos:column="27">ctx<pos:position pos:line="67" pos:column="30"/></name><operator pos:line="67" pos:column="30">-&gt;<pos:position pos:line="67" pos:column="35"/></operator><name pos:line="67" pos:column="32">bb<pos:position pos:line="67" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="67" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="36"/></condition><then pos:line="67" pos:column="36"> <block pos:line="67" pos:column="37">{
        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><operator pos:line="68" pos:column="13">(<pos:position pos:line="68" pos:column="14"/></operator><name pos:line="68" pos:column="14">rv<pos:position pos:line="68" pos:column="16"/></name> <operator pos:line="68" pos:column="17">=<pos:position pos:line="68" pos:column="18"/></operator> <call><name pos:line="68" pos:column="19">ap_get_brigade<pos:position pos:line="68" pos:column="33"/></name><argument_list pos:line="68" pos:column="33">(<argument><expr><name><name pos:line="68" pos:column="34">f<pos:position pos:line="68" pos:column="35"/></name><operator pos:line="68" pos:column="35">-&gt;<pos:position pos:line="68" pos:column="40"/></operator><name pos:line="68" pos:column="37">next<pos:position pos:line="68" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="43">bb<pos:position pos:line="68" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="47">mode<pos:position pos:line="68" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="53">block<pos:position pos:line="68" pos:column="58"/></name></expr></argument>,
                                 <argument><expr><name pos:line="69" pos:column="34">readbytes<pos:position pos:line="69" pos:column="43"/></name></expr></argument>)<pos:position pos:line="69" pos:column="44"/></argument_list></call><operator pos:line="69" pos:column="44">)<pos:position pos:line="69" pos:column="45"/></operator> <operator pos:line="69" pos:column="46">!=<pos:position pos:line="69" pos:column="48"/></operator> <name pos:line="69" pos:column="49">APR_SUCCESS<pos:position pos:line="69" pos:column="60"/></name></expr>)<pos:position pos:line="69" pos:column="61"/></condition><then pos:line="69" pos:column="61"> <block pos:line="69" pos:column="62">{
            <return pos:line="70" pos:column="13">return <expr><name pos:line="70" pos:column="20">rv<pos:position pos:line="70" pos:column="22"/></name></expr>;<pos:position pos:line="70" pos:column="23"/></return>
        }<pos:position pos:line="71" pos:column="10"/></block></then></if>
    }<pos:position pos:line="72" pos:column="6"/></block></then>
    <else pos:line="73" pos:column="5">else <block pos:line="73" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">APR_BRIGADE_PREPEND<pos:position pos:line="74" pos:column="28"/></name><argument_list pos:line="74" pos:column="28">(<argument><expr><name pos:line="74" pos:column="29">bb<pos:position pos:line="74" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="33">ctx<pos:position pos:line="74" pos:column="36"/></name><operator pos:line="74" pos:column="36">-&gt;<pos:position pos:line="74" pos:column="41"/></operator><name pos:line="74" pos:column="38">bb<pos:position pos:line="74" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="42"/></expr_stmt> <comment type="block" pos:line="74" pos:column="43">/* first use the leftovers */</comment>
    }<pos:position pos:line="75" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="77" pos:column="5">buffer_size<pos:position pos:line="77" pos:column="16"/></name> <operator pos:line="77" pos:column="17">=<pos:position pos:line="77" pos:column="18"/></operator> <name pos:line="77" pos:column="19">INPUT_XLATE_BUF_SIZE<pos:position pos:line="77" pos:column="39"/></name></expr>;<pos:position pos:line="77" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="78" pos:column="5">rv<pos:position pos:line="78" pos:column="7"/></name> <operator pos:line="78" pos:column="8">=<pos:position pos:line="78" pos:column="9"/></operator> <call><name pos:line="78" pos:column="10">xlate_brigade<pos:position pos:line="78" pos:column="23"/></name><argument_list pos:line="78" pos:column="23">(<argument><expr><name pos:line="78" pos:column="24">ctx<pos:position pos:line="78" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="29">bb<pos:position pos:line="78" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="33">ctx<pos:position pos:line="78" pos:column="36"/></name><operator pos:line="78" pos:column="36">-&gt;<pos:position pos:line="78" pos:column="41"/></operator><name pos:line="78" pos:column="38">tmp<pos:position pos:line="78" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="43">&amp;<pos:position pos:line="78" pos:column="48"/></operator><name pos:line="78" pos:column="44">buffer_size<pos:position pos:line="78" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="78" pos:column="57">&amp;<pos:position pos:line="78" pos:column="62"/></operator><name pos:line="78" pos:column="58">hit_eos<pos:position pos:line="78" pos:column="65"/></name></expr></argument>)<pos:position pos:line="78" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="67"/></expr_stmt>
    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">rv<pos:position pos:line="79" pos:column="11"/></name> <operator pos:line="79" pos:column="12">==<pos:position pos:line="79" pos:column="14"/></operator> <name pos:line="79" pos:column="15">APR_SUCCESS<pos:position pos:line="79" pos:column="26"/></name></expr>)<pos:position pos:line="79" pos:column="27"/></condition><then pos:line="79" pos:column="27"> <block pos:line="79" pos:column="28">{
        <if pos:line="80" pos:column="9">if <condition pos:line="80" pos:column="12">(<expr><operator pos:line="80" pos:column="13">!<pos:position pos:line="80" pos:column="14"/></operator><name pos:line="80" pos:column="14">hit_eos<pos:position pos:line="80" pos:column="21"/></name></expr>)<pos:position pos:line="80" pos:column="22"/></condition><then pos:line="80" pos:column="22"> <block pos:line="80" pos:column="23">{
            <comment type="block" pos:line="81" pos:column="13">/* move anything leftover into our context for next time;
             * we don't currently "set aside" since the data came from
             * down below, but I suspect that for long-term we need to
             * do that
             */</comment>
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">APR_BRIGADE_CONCAT<pos:position pos:line="86" pos:column="31"/></name><argument_list pos:line="86" pos:column="31">(<argument><expr><name><name pos:line="86" pos:column="32">ctx<pos:position pos:line="86" pos:column="35"/></name><operator pos:line="86" pos:column="35">-&gt;<pos:position pos:line="86" pos:column="40"/></operator><name pos:line="86" pos:column="37">bb<pos:position pos:line="86" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="41">bb<pos:position pos:line="86" pos:column="43"/></name></expr></argument>)<pos:position pos:line="86" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="87" pos:column="10"/></block></then></if>
        <if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><name pos:line="88" pos:column="13">buffer_size<pos:position pos:line="88" pos:column="24"/></name> <operator pos:line="88" pos:column="25">&lt;<pos:position pos:line="88" pos:column="29"/></operator> <name pos:line="88" pos:column="27">INPUT_XLATE_BUF_SIZE<pos:position pos:line="88" pos:column="47"/></name></expr>)<pos:position pos:line="88" pos:column="48"/></condition><then pos:line="88" pos:column="48"> <block pos:line="88" pos:column="49">{ <comment type="block" pos:line="88" pos:column="51">/* do we have output? */</comment>
            <decl_stmt><decl><type><name pos:line="89" pos:column="13">apr_bucket<pos:position pos:line="89" pos:column="23"/></name> <modifier pos:line="89" pos:column="24">*<pos:position pos:line="89" pos:column="25"/></modifier></type><name pos:line="89" pos:column="25">e<pos:position pos:line="89" pos:column="26"/></name></decl>;<pos:position pos:line="89" pos:column="27"/></decl_stmt>

            <expr_stmt><expr><name pos:line="91" pos:column="13">e<pos:position pos:line="91" pos:column="14"/></name> <operator pos:line="91" pos:column="15">=<pos:position pos:line="91" pos:column="16"/></operator> <call><name pos:line="91" pos:column="17">apr_bucket_heap_create<pos:position pos:line="91" pos:column="39"/></name><argument_list pos:line="91" pos:column="39">(<argument><expr><name><name pos:line="91" pos:column="40">ctx<pos:position pos:line="91" pos:column="43"/></name><operator pos:line="91" pos:column="43">-&gt;<pos:position pos:line="91" pos:column="48"/></operator><name pos:line="91" pos:column="45">tmp<pos:position pos:line="91" pos:column="48"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="92" pos:column="40">INPUT_XLATE_BUF_SIZE<pos:position pos:line="92" pos:column="60"/></name> <operator pos:line="92" pos:column="61">-<pos:position pos:line="92" pos:column="62"/></operator> <name pos:line="92" pos:column="63">buffer_size<pos:position pos:line="92" pos:column="74"/></name></expr></argument>,
                                       <argument><expr><name pos:line="93" pos:column="40">NULL<pos:position pos:line="93" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="46">f<pos:position pos:line="93" pos:column="47"/></name><operator pos:line="93" pos:column="47">-&gt;<pos:position pos:line="93" pos:column="52"/></operator><name pos:line="93" pos:column="49">r<pos:position pos:line="93" pos:column="50"/></name><operator pos:line="93" pos:column="50">-&gt;<pos:position pos:line="93" pos:column="55"/></operator><name pos:line="93" pos:column="52">connection<pos:position pos:line="93" pos:column="62"/></name><operator pos:line="93" pos:column="62">-&gt;<pos:position pos:line="93" pos:column="67"/></operator><name pos:line="93" pos:column="64">bucket_alloc<pos:position pos:line="93" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="78"/></expr_stmt>
            <comment type="block" pos:line="94" pos:column="13">/* make sure we insert at the head, because there may be
             * an eos bucket already there, and the eos bucket should
             * come after the data
             */</comment>
            <expr_stmt><expr><call><name pos:line="98" pos:column="13">APR_BRIGADE_INSERT_HEAD<pos:position pos:line="98" pos:column="36"/></name><argument_list pos:line="98" pos:column="36">(<argument><expr><name pos:line="98" pos:column="37">bb<pos:position pos:line="98" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="41">e<pos:position pos:line="98" pos:column="42"/></name></expr></argument>)<pos:position pos:line="98" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="99" pos:column="10"/></block></then>
        <else pos:line="100" pos:column="9">else <block pos:line="100" pos:column="14">{
            <comment type="block" pos:line="101" pos:column="13">/* XXX need to get some more data... what if the last brigade
             * we got had only the first byte of a multibyte char?  we need
             * to grab more data from the network instead of returning an
             * empty brigade
             */</comment>
        }<pos:position pos:line="106" pos:column="10"/></block></else></if>
        <comment type="block" pos:line="107" pos:column="9">/* If we have any metadata at the head of ctx-&gt;bb, go ahead and move it
         * onto the end of bb to be returned to our caller.
         */</comment>
        <if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><operator pos:line="110" pos:column="13">!<pos:position pos:line="110" pos:column="14"/></operator><call><name pos:line="110" pos:column="14">APR_BRIGADE_EMPTY<pos:position pos:line="110" pos:column="31"/></name><argument_list pos:line="110" pos:column="31">(<argument><expr><name><name pos:line="110" pos:column="32">ctx<pos:position pos:line="110" pos:column="35"/></name><operator pos:line="110" pos:column="35">-&gt;<pos:position pos:line="110" pos:column="40"/></operator><name pos:line="110" pos:column="37">bb<pos:position pos:line="110" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="110" pos:column="41"/></condition><then pos:line="110" pos:column="41"> <block pos:line="110" pos:column="42">{
            <decl_stmt><decl><type><name pos:line="111" pos:column="13">apr_bucket<pos:position pos:line="111" pos:column="23"/></name> <modifier pos:line="111" pos:column="24">*<pos:position pos:line="111" pos:column="25"/></modifier></type><name pos:line="111" pos:column="25">b<pos:position pos:line="111" pos:column="26"/></name> <init pos:line="111" pos:column="27">= <expr><call><name pos:line="111" pos:column="29">APR_BRIGADE_FIRST<pos:position pos:line="111" pos:column="46"/></name><argument_list pos:line="111" pos:column="46">(<argument><expr><name><name pos:line="111" pos:column="47">ctx<pos:position pos:line="111" pos:column="50"/></name><operator pos:line="111" pos:column="50">-&gt;<pos:position pos:line="111" pos:column="55"/></operator><name pos:line="111" pos:column="52">bb<pos:position pos:line="111" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="111" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="111" pos:column="56"/></decl_stmt>
            <while pos:line="112" pos:column="13">while <condition pos:line="112" pos:column="19">(<expr><name pos:line="112" pos:column="20">b<pos:position pos:line="112" pos:column="21"/></name> <operator pos:line="112" pos:column="22">!=<pos:position pos:line="112" pos:column="24"/></operator> <call><name pos:line="112" pos:column="25">APR_BRIGADE_SENTINEL<pos:position pos:line="112" pos:column="45"/></name><argument_list pos:line="112" pos:column="45">(<argument><expr><name><name pos:line="112" pos:column="46">ctx<pos:position pos:line="112" pos:column="49"/></name><operator pos:line="112" pos:column="49">-&gt;<pos:position pos:line="112" pos:column="54"/></operator><name pos:line="112" pos:column="51">bb<pos:position pos:line="112" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="54"/></argument_list></call>
                   <operator pos:line="113" pos:column="20">&amp;&amp;<pos:position pos:line="113" pos:column="30"/></operator> <call><name pos:line="113" pos:column="23">APR_BUCKET_IS_METADATA<pos:position pos:line="113" pos:column="45"/></name><argument_list pos:line="113" pos:column="45">(<argument><expr><name pos:line="113" pos:column="46">b<pos:position pos:line="113" pos:column="47"/></name></expr></argument>)<pos:position pos:line="113" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="49"/></condition> <block pos:line="113" pos:column="50">{
                <expr_stmt><expr><call><name pos:line="114" pos:column="17">APR_BUCKET_REMOVE<pos:position pos:line="114" pos:column="34"/></name><argument_list pos:line="114" pos:column="34">(<argument><expr><name pos:line="114" pos:column="35">b<pos:position pos:line="114" pos:column="36"/></name></expr></argument>)<pos:position pos:line="114" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="115" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="115" pos:column="40"/></name><argument_list pos:line="115" pos:column="40">(<argument><expr><name pos:line="115" pos:column="41">bb<pos:position pos:line="115" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="45">b<pos:position pos:line="115" pos:column="46"/></name></expr></argument>)<pos:position pos:line="115" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name pos:line="116" pos:column="17">b<pos:position pos:line="116" pos:column="18"/></name> <operator pos:line="116" pos:column="19">=<pos:position pos:line="116" pos:column="20"/></operator> <call><name pos:line="116" pos:column="21">APR_BRIGADE_FIRST<pos:position pos:line="116" pos:column="38"/></name><argument_list pos:line="116" pos:column="38">(<argument><expr><name><name pos:line="116" pos:column="39">ctx<pos:position pos:line="116" pos:column="42"/></name><operator pos:line="116" pos:column="42">-&gt;<pos:position pos:line="116" pos:column="47"/></operator><name pos:line="116" pos:column="44">bb<pos:position pos:line="116" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="116" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="117" pos:column="14"/></block></while>
        }<pos:position pos:line="118" pos:column="10"/></block></then></if>
    }<pos:position pos:line="119" pos:column="6"/></block></then>
    <else pos:line="120" pos:column="5">else <block pos:line="120" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="121" pos:column="9">log_xlate_error<pos:position pos:line="121" pos:column="24"/></name><argument_list pos:line="121" pos:column="24">(<argument><expr><name pos:line="121" pos:column="25">f<pos:position pos:line="121" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="28">rv<pos:position pos:line="121" pos:column="30"/></name></expr></argument>)<pos:position pos:line="121" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="122" pos:column="6"/></block></else></if>

    <return pos:line="124" pos:column="5">return <expr><name pos:line="124" pos:column="12">rv<pos:position pos:line="124" pos:column="14"/></name></expr>;<pos:position pos:line="124" pos:column="15"/></return>
}<pos:position pos:line="125" pos:column="2"/></block></function></unit>
