<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_696_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">brigade_consume<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">apr_bucket_brigade<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">bb<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">apr_read_type_e<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">block<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="3" pos:column="37">char<pos:position pos:line="3" pos:column="41"/></name> <modifier pos:line="3" pos:column="42">*<pos:position pos:line="3" pos:column="43"/></modifier></type><name pos:line="3" pos:column="43">c<pos:position pos:line="3" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="46">apr_size_t<pos:position pos:line="3" pos:column="56"/></name> <modifier pos:line="3" pos:column="57">*<pos:position pos:line="3" pos:column="58"/></modifier></type><name pos:line="3" pos:column="58">len<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="62"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">actual<pos:position pos:line="5" pos:column="22"/></name> <init pos:line="5" pos:column="23">= <expr><literal type="number" pos:line="5" pos:column="25">0<pos:position pos:line="5" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">status<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><name pos:line="6" pos:column="27">APR_SUCCESS<pos:position pos:line="6" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>

    <while pos:line="8" pos:column="5">while <condition pos:line="8" pos:column="11">(<expr><operator pos:line="8" pos:column="12">!<pos:position pos:line="8" pos:column="13"/></operator><call><name pos:line="8" pos:column="13">APR_BRIGADE_EMPTY<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">bb<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="35"/></condition> <block pos:line="8" pos:column="36">{
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">apr_bucket<pos:position pos:line="9" pos:column="19"/></name> <modifier pos:line="9" pos:column="20">*<pos:position pos:line="9" pos:column="21"/></modifier></type><name pos:line="9" pos:column="21">b<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><call><name pos:line="9" pos:column="25">APR_BRIGADE_FIRST<pos:position pos:line="9" pos:column="42"/></name><argument_list pos:line="9" pos:column="42">(<argument><expr><name pos:line="9" pos:column="43">bb<pos:position pos:line="9" pos:column="45"/></name></expr></argument>)<pos:position pos:line="9" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="47"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="10" pos:column="9">const<pos:position pos:line="10" pos:column="14"/></specifier> <name pos:line="10" pos:column="15">char<pos:position pos:line="10" pos:column="19"/></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">str<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">apr_size_t<pos:position pos:line="11" pos:column="19"/></name></type> <name pos:line="11" pos:column="20">str_len<pos:position pos:line="11" pos:column="27"/></name></decl>;<pos:position pos:line="11" pos:column="28"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">apr_size_t<pos:position pos:line="12" pos:column="19"/></name></type> <name pos:line="12" pos:column="20">consume<pos:position pos:line="12" pos:column="27"/></name></decl>;<pos:position pos:line="12" pos:column="28"/></decl_stmt>

        <comment type="block" pos:line="14" pos:column="9">/* Justin points out this is an http-ism that might
         * not fit if brigade_consume is added to APR.  Perhaps
         * apr_bucket_read(eos_bucket) should return APR_EOF?
         * Then this becomes mainline instead of a one-off.
         */</comment>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><call><name pos:line="19" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">b<pos:position pos:line="19" pos:column="32"/></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="34"/></condition><then pos:line="19" pos:column="34"> <block pos:line="19" pos:column="35">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">status<pos:position pos:line="20" pos:column="19"/></name> <operator pos:line="20" pos:column="20">=<pos:position pos:line="20" pos:column="21"/></operator> <name pos:line="20" pos:column="22">APR_EOF<pos:position pos:line="20" pos:column="29"/></name></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
            <break pos:line="21" pos:column="13">break;<pos:position pos:line="21" pos:column="19"/></break>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="24" pos:column="9">/* The reason I'm not offering brigade_consume yet
         * across to apr-util is that the following call
         * illustrates how borked that API really is.  For
         * this sort of case (caller provided buffer) it
         * would be much more trivial for apr_bucket_consume
         * to do all the work that follows, based on the
         * particular characteristics of the bucket we are
         * consuming here.
         */</comment>
        <expr_stmt><expr><name pos:line="33" pos:column="9">status<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <call><name pos:line="33" pos:column="18">apr_bucket_read<pos:position pos:line="33" pos:column="33"/></name><argument_list pos:line="33" pos:column="33">(<argument><expr><name pos:line="33" pos:column="34">b<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="37">&amp;<pos:position pos:line="33" pos:column="42"/></operator><name pos:line="33" pos:column="38">str<pos:position pos:line="33" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="43">&amp;<pos:position pos:line="33" pos:column="48"/></operator><name pos:line="33" pos:column="44">str_len<pos:position pos:line="33" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="53">block<pos:position pos:line="33" pos:column="58"/></name></expr></argument>)<pos:position pos:line="33" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="60"/></expr_stmt>

        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">status<pos:position pos:line="35" pos:column="19"/></name> <operator pos:line="35" pos:column="20">!=<pos:position pos:line="35" pos:column="22"/></operator> <name pos:line="35" pos:column="23">APR_SUCCESS<pos:position pos:line="35" pos:column="34"/></name></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35"> <block pos:line="35" pos:column="36">{
            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><call><name pos:line="36" pos:column="17">APR_STATUS_IS_EOF<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">status<pos:position pos:line="36" pos:column="41"/></name></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="43"/></condition><then pos:line="36" pos:column="43"> <block pos:line="36" pos:column="44">{
                <comment type="block" pos:line="37" pos:column="17">/* This stream bucket was consumed */</comment>
                <expr_stmt><expr><call><name pos:line="38" pos:column="17">apr_bucket_delete<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">b<pos:position pos:line="38" pos:column="36"/></name></expr></argument>)<pos:position pos:line="38" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>
                <continue pos:line="39" pos:column="17">continue;<pos:position pos:line="39" pos:column="26"/></continue>
            }<pos:position pos:line="40" pos:column="14"/></block></then></if>
            <break pos:line="41" pos:column="13">break;<pos:position pos:line="41" pos:column="19"/></break>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>

        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">str_len<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">&gt;<pos:position pos:line="44" pos:column="25"/></operator> <literal type="number" pos:line="44" pos:column="23">0<pos:position pos:line="44" pos:column="24"/></literal></expr>)<pos:position pos:line="44" pos:column="25"/></condition><then pos:line="44" pos:column="25"> <block pos:line="44" pos:column="26">{
            <comment type="block" pos:line="45" pos:column="13">/* Do not block once some data has been consumed */</comment>
            <expr_stmt><expr><name pos:line="46" pos:column="13">block<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <name pos:line="46" pos:column="21">APR_NONBLOCK_READ<pos:position pos:line="46" pos:column="38"/></name></expr>;<pos:position pos:line="46" pos:column="39"/></expr_stmt>

            <comment type="block" pos:line="48" pos:column="13">/* Assure we don't overflow. */</comment>
            <expr_stmt><expr><name pos:line="49" pos:column="13">consume<pos:position pos:line="49" pos:column="20"/></name> <operator pos:line="49" pos:column="21">=<pos:position pos:line="49" pos:column="22"/></operator> <ternary><condition><expr><operator pos:line="49" pos:column="23">(<pos:position pos:line="49" pos:column="24"/></operator><name pos:line="49" pos:column="24">str_len<pos:position pos:line="49" pos:column="31"/></name> <operator pos:line="49" pos:column="32">+<pos:position pos:line="49" pos:column="33"/></operator> <name pos:line="49" pos:column="34">actual<pos:position pos:line="49" pos:column="40"/></name> <operator pos:line="49" pos:column="41">&gt;<pos:position pos:line="49" pos:column="45"/></operator> <operator pos:line="49" pos:column="43">*<pos:position pos:line="49" pos:column="44"/></operator><name pos:line="49" pos:column="44">len<pos:position pos:line="49" pos:column="47"/></name><operator pos:line="49" pos:column="47">)<pos:position pos:line="49" pos:column="48"/></operator></expr> ?<pos:position pos:line="49" pos:column="50"/></condition><then pos:line="49" pos:column="50"> <expr><operator pos:line="49" pos:column="51">*<pos:position pos:line="49" pos:column="52"/></operator><name pos:line="49" pos:column="52">len<pos:position pos:line="49" pos:column="55"/></name> <operator pos:line="49" pos:column="56">-<pos:position pos:line="49" pos:column="57"/></operator> <name pos:line="49" pos:column="58">actual<pos:position pos:line="49" pos:column="64"/></name></expr> <pos:position pos:line="49" pos:column="65"/></then><else pos:line="49" pos:column="65">: <expr><name pos:line="49" pos:column="67">str_len<pos:position pos:line="49" pos:column="74"/></name></expr></else></ternary></expr>;<pos:position pos:line="49" pos:column="75"/></expr_stmt>

            <expr_stmt><expr><call><name pos:line="51" pos:column="13">memcpy<pos:position pos:line="51" pos:column="19"/></name><argument_list pos:line="51" pos:column="19">(<argument><expr><name pos:line="51" pos:column="20">c<pos:position pos:line="51" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="23">str<pos:position pos:line="51" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="28">consume<pos:position pos:line="51" pos:column="35"/></name></expr></argument>)<pos:position pos:line="51" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="37"/></expr_stmt>

            <expr_stmt><expr><name pos:line="53" pos:column="13">c<pos:position pos:line="53" pos:column="14"/></name> <operator pos:line="53" pos:column="15">+=<pos:position pos:line="53" pos:column="17"/></operator> <name pos:line="53" pos:column="18">consume<pos:position pos:line="53" pos:column="25"/></name></expr>;<pos:position pos:line="53" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name pos:line="54" pos:column="13">actual<pos:position pos:line="54" pos:column="19"/></name> <operator pos:line="54" pos:column="20">+=<pos:position pos:line="54" pos:column="22"/></operator> <name pos:line="54" pos:column="23">consume<pos:position pos:line="54" pos:column="30"/></name></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>

            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><name pos:line="56" pos:column="17">consume<pos:position pos:line="56" pos:column="24"/></name> <operator pos:line="56" pos:column="25">&gt;=<pos:position pos:line="56" pos:column="30"/></operator> <name><name pos:line="56" pos:column="28">b<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">length<pos:position pos:line="56" pos:column="37"/></name></name></expr>)<pos:position pos:line="56" pos:column="38"/></condition><then pos:line="56" pos:column="38"> <block pos:line="56" pos:column="39">{
                <comment type="block" pos:line="57" pos:column="17">/* This physical bucket was consumed */</comment>
                <expr_stmt><expr><call><name pos:line="58" pos:column="17">apr_bucket_delete<pos:position pos:line="58" pos:column="34"/></name><argument_list pos:line="58" pos:column="34">(<argument><expr><name pos:line="58" pos:column="35">b<pos:position pos:line="58" pos:column="36"/></name></expr></argument>)<pos:position pos:line="58" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="59" pos:column="14"/></block></then>
            <else pos:line="60" pos:column="13">else <block pos:line="60" pos:column="18">{
                <comment type="block" pos:line="61" pos:column="17">/* Only part of this physical bucket was consumed */</comment>
                <expr_stmt><expr><name><name pos:line="62" pos:column="17">b<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">-&gt;<pos:position pos:line="62" pos:column="23"/></operator><name pos:line="62" pos:column="20">start<pos:position pos:line="62" pos:column="25"/></name></name> <operator pos:line="62" pos:column="26">+=<pos:position pos:line="62" pos:column="28"/></operator> <name pos:line="62" pos:column="29">consume<pos:position pos:line="62" pos:column="36"/></name></expr>;<pos:position pos:line="62" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="63" pos:column="17">b<pos:position pos:line="63" pos:column="18"/></name><operator pos:line="63" pos:column="18">-&gt;<pos:position pos:line="63" pos:column="23"/></operator><name pos:line="63" pos:column="20">length<pos:position pos:line="63" pos:column="26"/></name></name> <operator pos:line="63" pos:column="27">-=<pos:position pos:line="63" pos:column="29"/></operator> <name pos:line="63" pos:column="30">consume<pos:position pos:line="63" pos:column="37"/></name></expr>;<pos:position pos:line="63" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="64" pos:column="14"/></block></else></if>
        }<pos:position pos:line="65" pos:column="10"/></block></then>
        <elseif pos:line="66" pos:column="9">else <if pos:line="66" pos:column="14">if <condition pos:line="66" pos:column="17">(<expr><name><name pos:line="66" pos:column="18">b<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">-&gt;<pos:position pos:line="66" pos:column="24"/></operator><name pos:line="66" pos:column="21">length<pos:position pos:line="66" pos:column="27"/></name></name> <operator pos:line="66" pos:column="28">==<pos:position pos:line="66" pos:column="30"/></operator> <literal type="number" pos:line="66" pos:column="31">0<pos:position pos:line="66" pos:column="32"/></literal></expr>)<pos:position pos:line="66" pos:column="33"/></condition><then pos:line="66" pos:column="33"> <block pos:line="66" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">apr_bucket_delete<pos:position pos:line="67" pos:column="30"/></name><argument_list pos:line="67" pos:column="30">(<argument><expr><name pos:line="67" pos:column="31">b<pos:position pos:line="67" pos:column="32"/></name></expr></argument>)<pos:position pos:line="67" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="68" pos:column="10"/></block></then></if></elseif></if>

        <comment type="block" pos:line="70" pos:column="9">/* This could probably be actual == *len, but be safe from stray
         * photons. */</comment>
        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><name pos:line="72" pos:column="13">actual<pos:position pos:line="72" pos:column="19"/></name> <operator pos:line="72" pos:column="20">&gt;=<pos:position pos:line="72" pos:column="25"/></operator> <operator pos:line="72" pos:column="23">*<pos:position pos:line="72" pos:column="24"/></operator><name pos:line="72" pos:column="24">len<pos:position pos:line="72" pos:column="27"/></name></expr>)<pos:position pos:line="72" pos:column="28"/></condition><then pos:line="72" pos:column="28"> <block pos:line="72" pos:column="29">{
            <break pos:line="73" pos:column="13">break;<pos:position pos:line="73" pos:column="19"/></break>
        }<pos:position pos:line="74" pos:column="10"/></block></then></if>
    }<pos:position pos:line="75" pos:column="6"/></block></while>

    <expr_stmt><expr><operator pos:line="77" pos:column="5">*<pos:position pos:line="77" pos:column="6"/></operator><name pos:line="77" pos:column="6">len<pos:position pos:line="77" pos:column="9"/></name> <operator pos:line="77" pos:column="10">=<pos:position pos:line="77" pos:column="11"/></operator> <name pos:line="77" pos:column="12">actual<pos:position pos:line="77" pos:column="18"/></name></expr>;<pos:position pos:line="77" pos:column="19"/></expr_stmt>
    <return pos:line="78" pos:column="5">return <expr><name pos:line="78" pos:column="12">status<pos:position pos:line="78" pos:column="18"/></name></expr>;<pos:position pos:line="78" pos:column="19"/></return>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
