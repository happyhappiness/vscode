<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1550_httpd-2.4.16.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">lookup_map_program<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">request_rec<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">r<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">apr_file_t<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">fpin<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">apr_file_t<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">fpout<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">char<pos:position pos:line="2" pos:column="56"/></name> <modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type><name pos:line="2" pos:column="58">key<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">buf<pos:position pos:line="4" pos:column="14"/></name></decl>;<pos:position pos:line="4" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">c<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">i<pos:position pos:line="6" pos:column="17"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="19">nbytes<pos:position pos:line="6" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="27">combined_len<pos:position pos:line="6" pos:column="39"/></name> <init pos:line="6" pos:column="40">= <expr><literal type="number" pos:line="6" pos:column="42">0<pos:position pos:line="6" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_status_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">rv<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">eol<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name pos:line="8" pos:column="23">APR_EOL_STR<pos:position pos:line="8" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">eolc<pos:position pos:line="9" pos:column="20"/></name> <init pos:line="9" pos:column="21">= <expr><literal type="number" pos:line="9" pos:column="23">0<pos:position pos:line="9" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">found_nl<pos:position pos:line="10" pos:column="17"/></name> <init pos:line="10" pos:column="18">= <expr><literal type="number" pos:line="10" pos:column="20">0<pos:position pos:line="10" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">result_list<pos:position pos:line="11" pos:column="16"/></name> <modifier pos:line="11" pos:column="17">*<pos:position pos:line="11" pos:column="18"/></modifier></type><name pos:line="11" pos:column="18">buflist<pos:position pos:line="11" pos:column="25"/></name> <init pos:line="11" pos:column="26">= <expr><name pos:line="11" pos:column="28">NULL<pos:position pos:line="11" pos:column="32"/></name></expr></init></decl>, <modifier pos:line="11" pos:column="34">*<pos:position pos:line="11" pos:column="35"/></modifier><decl><type ref="prev"/><name pos:line="11" pos:column="35">curbuf<pos:position pos:line="11" pos:column="41"/></name> <init pos:line="11" pos:column="42">= <expr><name pos:line="11" pos:column="44">NULL<pos:position pos:line="11" pos:column="48"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="49"/></decl_stmt>

<cpp:ifndef pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">ifndef<pos:position pos:line="13" pos:column="8"/></cpp:directive> <name pos:line="13" pos:column="9">NO_WRITEV<pos:position pos:line="13" pos:column="18"/></name></cpp:ifndef>
    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">struct<pos:position pos:line="14" pos:column="11"/></name> <name pos:line="14" pos:column="12">iovec<pos:position pos:line="14" pos:column="17"/></name></name></type> <name><name pos:line="14" pos:column="18">iova<pos:position pos:line="14" pos:column="22"/></name><index pos:line="14" pos:column="22">[<expr><literal type="number" pos:line="14" pos:column="23">2<pos:position pos:line="14" pos:column="24"/></literal></expr>]<pos:position pos:line="14" pos:column="25"/></index></name></decl>;<pos:position pos:line="14" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">apr_size_t<pos:position pos:line="15" pos:column="15"/></name></type> <name pos:line="15" pos:column="16">niov<pos:position pos:line="15" pos:column="20"/></name></decl>;<pos:position pos:line="15" pos:column="21"/></decl_stmt>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="18" pos:column="5">/* when `RewriteEngine off' was used in the per-server
     * context then the rewritemap-programs were not spawned.
     * In this case using such a map (usually in per-dir context)
     * is useless because it is not available.
     *
     * newlines in the key leave bytes in the pipe and cause
     * bad things to happen (next map lookup will use the chars
     * after the \n instead of the new key etc etc - in other words,
     * the Rewritemap falls out of sync with the requests).
     */</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">fpin<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">==<pos:position pos:line="28" pos:column="16"/></operator> <name pos:line="28" pos:column="17">NULL<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">||<pos:position pos:line="28" pos:column="24"/></operator> <name pos:line="28" pos:column="25">fpout<pos:position pos:line="28" pos:column="30"/></name> <operator pos:line="28" pos:column="31">==<pos:position pos:line="28" pos:column="33"/></operator> <name pos:line="28" pos:column="34">NULL<pos:position pos:line="28" pos:column="38"/></name> <operator pos:line="28" pos:column="39">||<pos:position pos:line="28" pos:column="41"/></operator> <call><name pos:line="28" pos:column="42">ap_strchr<pos:position pos:line="28" pos:column="51"/></name><argument_list pos:line="28" pos:column="51">(<argument><expr><name pos:line="28" pos:column="52">key<pos:position pos:line="28" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="57">'\n'<pos:position pos:line="28" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="63"/></condition><then pos:line="28" pos:column="63"> <block pos:line="28" pos:column="64">{
        <return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">NULL<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="32" pos:column="5">/* take the lock */</comment>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">rewrite_mapr_lock_acquire<pos:position pos:line="33" pos:column="34"/></name></expr>)<pos:position pos:line="33" pos:column="35"/></condition><then pos:line="33" pos:column="35"> <block pos:line="33" pos:column="36">{
        <expr_stmt><expr><name pos:line="34" pos:column="9">rv<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <call><name pos:line="34" pos:column="14">apr_global_mutex_lock<pos:position pos:line="34" pos:column="35"/></name><argument_list pos:line="34" pos:column="35">(<argument><expr><name pos:line="34" pos:column="36">rewrite_mapr_lock_acquire<pos:position pos:line="34" pos:column="61"/></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="63"/></expr_stmt>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">rv<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">!=<pos:position pos:line="35" pos:column="18"/></operator> <name pos:line="35" pos:column="19">APR_SUCCESS<pos:position pos:line="35" pos:column="30"/></name></expr>)<pos:position pos:line="35" pos:column="31"/></condition><then pos:line="35" pos:column="31"> <block pos:line="35" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">ap_log_rerror<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">APLOG_MARK<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="39">APLOG_ERR<pos:position pos:line="36" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="50">rv<pos:position pos:line="36" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">r<pos:position pos:line="36" pos:column="55"/></name></expr></argument>, <argument><expr><call><name pos:line="36" pos:column="57">APLOGNO<pos:position pos:line="36" pos:column="64"/></name><argument_list pos:line="36" pos:column="64">(<argument><expr><literal type="number" pos:line="36" pos:column="65">00659<pos:position pos:line="36" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="71"/></argument_list></call>
                          <literal type="string" pos:line="37" pos:column="27">"apr_global_mutex_lock(rewrite_mapr_lock_acquire) "<pos:position pos:line="37" pos:column="78"/></literal>
                          <literal type="string" pos:line="38" pos:column="27">"failed"<pos:position pos:line="38" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt>
            <return pos:line="39" pos:column="13">return <expr><name pos:line="39" pos:column="20">NULL<pos:position pos:line="39" pos:column="24"/></name></expr>;<pos:position pos:line="39" pos:column="25"/></return> <comment type="block" pos:line="39" pos:column="26">/* Maybe this should be fatal? */</comment>
        }<pos:position pos:line="40" pos:column="10"/></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="43" pos:column="5">/* write out the request key */</comment>
<cpp:ifdef pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">ifdef<pos:position pos:line="44" pos:column="7"/></cpp:directive> <name pos:line="44" pos:column="8">NO_WRITEV<pos:position pos:line="44" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="45" pos:column="5">nbytes<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">=<pos:position pos:line="45" pos:column="13"/></operator> <call><name pos:line="45" pos:column="14">strlen<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name pos:line="45" pos:column="21">key<pos:position pos:line="45" pos:column="24"/></name></expr></argument>)<pos:position pos:line="45" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="46" pos:column="5">/* XXX: error handling */</comment>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">apr_file_write_full<pos:position pos:line="47" pos:column="24"/></name><argument_list pos:line="47" pos:column="24">(<argument><expr><name pos:line="47" pos:column="25">fpin<pos:position pos:line="47" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="31">key<pos:position pos:line="47" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="36">nbytes<pos:position pos:line="47" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="44">NULL<pos:position pos:line="47" pos:column="48"/></name></expr></argument>)<pos:position pos:line="47" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="48" pos:column="5">nbytes<pos:position pos:line="48" pos:column="11"/></name> <operator pos:line="48" pos:column="12">=<pos:position pos:line="48" pos:column="13"/></operator> <literal type="number" pos:line="48" pos:column="14">1<pos:position pos:line="48" pos:column="15"/></literal></expr>;<pos:position pos:line="48" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">apr_file_write_full<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name pos:line="49" pos:column="25">fpin<pos:position pos:line="49" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="49" pos:column="31">"\n"<pos:position pos:line="49" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="37">nbytes<pos:position pos:line="49" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="45">NULL<pos:position pos:line="49" pos:column="49"/></name></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="51"/></expr_stmt>
<cpp:else pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">else<pos:position pos:line="50" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">iova<pos:position pos:line="51" pos:column="9"/></name><index pos:line="51" pos:column="9">[<expr><literal type="number" pos:line="51" pos:column="10">0<pos:position pos:line="51" pos:column="11"/></literal></expr>]<pos:position pos:line="51" pos:column="12"/></index></name><operator pos:line="51" pos:column="12">.<pos:position pos:line="51" pos:column="13"/></operator><name pos:line="51" pos:column="13">iov_base<pos:position pos:line="51" pos:column="21"/></name> <operator pos:line="51" pos:column="22">=<pos:position pos:line="51" pos:column="23"/></operator> <name pos:line="51" pos:column="24">key<pos:position pos:line="51" pos:column="27"/></name></expr>;<pos:position pos:line="51" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="52" pos:column="5">iova<pos:position pos:line="52" pos:column="9"/></name><index pos:line="52" pos:column="9">[<expr><literal type="number" pos:line="52" pos:column="10">0<pos:position pos:line="52" pos:column="11"/></literal></expr>]<pos:position pos:line="52" pos:column="12"/></index></name><operator pos:line="52" pos:column="12">.<pos:position pos:line="52" pos:column="13"/></operator><name pos:line="52" pos:column="13">iov_len<pos:position pos:line="52" pos:column="20"/></name> <operator pos:line="52" pos:column="21">=<pos:position pos:line="52" pos:column="22"/></operator> <call><name pos:line="52" pos:column="23">strlen<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name pos:line="52" pos:column="30">key<pos:position pos:line="52" pos:column="33"/></name></expr></argument>)<pos:position pos:line="52" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="53" pos:column="5">iova<pos:position pos:line="53" pos:column="9"/></name><index pos:line="53" pos:column="9">[<expr><literal type="number" pos:line="53" pos:column="10">1<pos:position pos:line="53" pos:column="11"/></literal></expr>]<pos:position pos:line="53" pos:column="12"/></index></name><operator pos:line="53" pos:column="12">.<pos:position pos:line="53" pos:column="13"/></operator><name pos:line="53" pos:column="13">iov_base<pos:position pos:line="53" pos:column="21"/></name> <operator pos:line="53" pos:column="22">=<pos:position pos:line="53" pos:column="23"/></operator> <literal type="string" pos:line="53" pos:column="24">"\n"<pos:position pos:line="53" pos:column="28"/></literal></expr>;<pos:position pos:line="53" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="54" pos:column="5">iova<pos:position pos:line="54" pos:column="9"/></name><index pos:line="54" pos:column="9">[<expr><literal type="number" pos:line="54" pos:column="10">1<pos:position pos:line="54" pos:column="11"/></literal></expr>]<pos:position pos:line="54" pos:column="12"/></index></name><operator pos:line="54" pos:column="12">.<pos:position pos:line="54" pos:column="13"/></operator><name pos:line="54" pos:column="13">iov_len<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">=<pos:position pos:line="54" pos:column="22"/></operator> <literal type="number" pos:line="54" pos:column="23">1<pos:position pos:line="54" pos:column="24"/></literal></expr>;<pos:position pos:line="54" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><name pos:line="56" pos:column="5">niov<pos:position pos:line="56" pos:column="9"/></name> <operator pos:line="56" pos:column="10">=<pos:position pos:line="56" pos:column="11"/></operator> <literal type="number" pos:line="56" pos:column="12">2<pos:position pos:line="56" pos:column="13"/></literal></expr>;<pos:position pos:line="56" pos:column="14"/></expr_stmt>
    <comment type="block" pos:line="57" pos:column="5">/* XXX: error handling */</comment>
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">apr_file_writev_full<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><name pos:line="58" pos:column="26">fpin<pos:position pos:line="58" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="32">iova<pos:position pos:line="58" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="38">niov<pos:position pos:line="58" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="58" pos:column="44">&amp;<pos:position pos:line="58" pos:column="49"/></operator><name pos:line="58" pos:column="45">nbytes<pos:position pos:line="58" pos:column="51"/></name></expr></argument>)<pos:position pos:line="58" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="53"/></expr_stmt>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="61" pos:column="5">buf<pos:position pos:line="61" pos:column="8"/></name> <operator pos:line="61" pos:column="9">=<pos:position pos:line="61" pos:column="10"/></operator> <call><name pos:line="61" pos:column="11">apr_palloc<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name><name pos:line="61" pos:column="22">r<pos:position pos:line="61" pos:column="23"/></name><operator pos:line="61" pos:column="23">-&gt;<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="25">pool<pos:position pos:line="61" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="31">REWRITE_PRG_MAP_BUF<pos:position pos:line="61" pos:column="50"/></name> <operator pos:line="61" pos:column="51">+<pos:position pos:line="61" pos:column="52"/></operator> <literal type="number" pos:line="61" pos:column="53">1<pos:position pos:line="61" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="56"/></expr_stmt>

    <comment type="block" pos:line="63" pos:column="5">/* read in the response value */</comment>
    <expr_stmt><expr><name pos:line="64" pos:column="5">nbytes<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <literal type="number" pos:line="64" pos:column="14">1<pos:position pos:line="64" pos:column="15"/></literal></expr>;<pos:position pos:line="64" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="65" pos:column="5">apr_file_read<pos:position pos:line="65" pos:column="18"/></name><argument_list pos:line="65" pos:column="18">(<argument><expr><name pos:line="65" pos:column="19">fpout<pos:position pos:line="65" pos:column="24"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="26">&amp;<pos:position pos:line="65" pos:column="31"/></operator><name pos:line="65" pos:column="27">c<pos:position pos:line="65" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="30">&amp;<pos:position pos:line="65" pos:column="35"/></operator><name pos:line="65" pos:column="31">nbytes<pos:position pos:line="65" pos:column="37"/></name></expr></argument>)<pos:position pos:line="65" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="39"/></expr_stmt>
    <do pos:line="66" pos:column="5">do <block pos:line="66" pos:column="8">{
        <expr_stmt><expr><name pos:line="67" pos:column="9">i<pos:position pos:line="67" pos:column="10"/></name> <operator pos:line="67" pos:column="11">=<pos:position pos:line="67" pos:column="12"/></operator> <literal type="number" pos:line="67" pos:column="13">0<pos:position pos:line="67" pos:column="14"/></literal></expr>;<pos:position pos:line="67" pos:column="15"/></expr_stmt>
        <while pos:line="68" pos:column="9">while <condition pos:line="68" pos:column="15">(<expr><name pos:line="68" pos:column="16">nbytes<pos:position pos:line="68" pos:column="22"/></name> <operator pos:line="68" pos:column="23">==<pos:position pos:line="68" pos:column="25"/></operator> <literal type="number" pos:line="68" pos:column="26">1<pos:position pos:line="68" pos:column="27"/></literal> <operator pos:line="68" pos:column="28">&amp;&amp;<pos:position pos:line="68" pos:column="38"/></operator> <operator pos:line="68" pos:column="31">(<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="32">i<pos:position pos:line="68" pos:column="33"/></name> <operator pos:line="68" pos:column="34">&lt;<pos:position pos:line="68" pos:column="38"/></operator> <name pos:line="68" pos:column="36">REWRITE_PRG_MAP_BUF<pos:position pos:line="68" pos:column="55"/></name><operator pos:line="68" pos:column="55">)<pos:position pos:line="68" pos:column="56"/></operator></expr>)<pos:position pos:line="68" pos:column="57"/></condition> <block pos:line="68" pos:column="58">{
            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><name pos:line="69" pos:column="17">c<pos:position pos:line="69" pos:column="18"/></name> <operator pos:line="69" pos:column="19">==<pos:position pos:line="69" pos:column="21"/></operator> <name><name pos:line="69" pos:column="22">eol<pos:position pos:line="69" pos:column="25"/></name><index pos:line="69" pos:column="25">[<expr><name pos:line="69" pos:column="26">eolc<pos:position pos:line="69" pos:column="30"/></name></expr>]<pos:position pos:line="69" pos:column="31"/></index></name></expr>)<pos:position pos:line="69" pos:column="32"/></condition><then pos:line="69" pos:column="32"> <block pos:line="69" pos:column="33">{
                <if pos:line="70" pos:column="17">if <condition pos:line="70" pos:column="20">(<expr><operator pos:line="70" pos:column="21">!<pos:position pos:line="70" pos:column="22"/></operator><name><name pos:line="70" pos:column="22">eol<pos:position pos:line="70" pos:column="25"/></name><index pos:line="70" pos:column="25">[<expr><operator pos:line="70" pos:column="26">++<pos:position pos:line="70" pos:column="28"/></operator><name pos:line="70" pos:column="28">eolc<pos:position pos:line="70" pos:column="32"/></name></expr>]<pos:position pos:line="70" pos:column="33"/></index></name></expr>)<pos:position pos:line="70" pos:column="34"/></condition><then pos:line="70" pos:column="34"> <block pos:line="70" pos:column="35">{
                    <comment type="block" pos:line="71" pos:column="21">/* remove eol from the buffer */</comment>
                    <expr_stmt><expr><operator pos:line="72" pos:column="21">--<pos:position pos:line="72" pos:column="23"/></operator><name pos:line="72" pos:column="23">eolc<pos:position pos:line="72" pos:column="27"/></name></expr>;<pos:position pos:line="72" pos:column="28"/></expr_stmt>
                    <if pos:line="73" pos:column="21">if <condition pos:line="73" pos:column="24">(<expr><name pos:line="73" pos:column="25">i<pos:position pos:line="73" pos:column="26"/></name> <operator pos:line="73" pos:column="27">&lt;<pos:position pos:line="73" pos:column="31"/></operator> <name pos:line="73" pos:column="29">eolc<pos:position pos:line="73" pos:column="33"/></name></expr>)<pos:position pos:line="73" pos:column="34"/></condition><then pos:line="73" pos:column="34"> <block pos:line="73" pos:column="35">{
                        <expr_stmt><expr><name><name pos:line="74" pos:column="25">curbuf<pos:position pos:line="74" pos:column="31"/></name><operator pos:line="74" pos:column="31">-&gt;<pos:position pos:line="74" pos:column="36"/></operator><name pos:line="74" pos:column="33">len<pos:position pos:line="74" pos:column="36"/></name></name> <operator pos:line="74" pos:column="37">-=<pos:position pos:line="74" pos:column="39"/></operator> <name pos:line="74" pos:column="40">eolc<pos:position pos:line="74" pos:column="44"/></name><operator pos:line="74" pos:column="44">-<pos:position pos:line="74" pos:column="45"/></operator><name pos:line="74" pos:column="45">i<pos:position pos:line="74" pos:column="46"/></name></expr>;<pos:position pos:line="74" pos:column="47"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="75" pos:column="25">i<pos:position pos:line="75" pos:column="26"/></name> <operator pos:line="75" pos:column="27">=<pos:position pos:line="75" pos:column="28"/></operator> <literal type="number" pos:line="75" pos:column="29">0<pos:position pos:line="75" pos:column="30"/></literal></expr>;<pos:position pos:line="75" pos:column="31"/></expr_stmt>
                    }<pos:position pos:line="76" pos:column="22"/></block></then>
                    <else pos:line="77" pos:column="21">else <block pos:line="77" pos:column="26">{
                        <expr_stmt><expr><name pos:line="78" pos:column="25">i<pos:position pos:line="78" pos:column="26"/></name> <operator pos:line="78" pos:column="27">-=<pos:position pos:line="78" pos:column="29"/></operator> <name pos:line="78" pos:column="30">eolc<pos:position pos:line="78" pos:column="34"/></name></expr>;<pos:position pos:line="78" pos:column="35"/></expr_stmt>
                    }<pos:position pos:line="79" pos:column="22"/></block></else></if>
                    <expr_stmt><expr><operator pos:line="80" pos:column="21">++<pos:position pos:line="80" pos:column="23"/></operator><name pos:line="80" pos:column="23">found_nl<pos:position pos:line="80" pos:column="31"/></name></expr>;<pos:position pos:line="80" pos:column="32"/></expr_stmt>
                    <break pos:line="81" pos:column="21">break;<pos:position pos:line="81" pos:column="27"/></break>
                }<pos:position pos:line="82" pos:column="18"/></block></then></if>
            }<pos:position pos:line="83" pos:column="14"/></block></then>

            <comment type="block" pos:line="85" pos:column="13">/* only partial (invalid) eol sequence -&gt; reset the counter */</comment>
            <elseif pos:line="86" pos:column="13">else <if pos:line="86" pos:column="18">if <condition pos:line="86" pos:column="21">(<expr><name pos:line="86" pos:column="22">eolc<pos:position pos:line="86" pos:column="26"/></name></expr>)<pos:position pos:line="86" pos:column="27"/></condition><then pos:line="86" pos:column="27"> <block pos:line="86" pos:column="28">{
                <expr_stmt><expr><name pos:line="87" pos:column="17">eolc<pos:position pos:line="87" pos:column="21"/></name> <operator pos:line="87" pos:column="22">=<pos:position pos:line="87" pos:column="23"/></operator> <literal type="number" pos:line="87" pos:column="24">0<pos:position pos:line="87" pos:column="25"/></literal></expr>;<pos:position pos:line="87" pos:column="26"/></expr_stmt>
            }<pos:position pos:line="88" pos:column="14"/></block></then></if></elseif>

            <comment type="block" pos:line="90" pos:column="13">/* catch binary mode, e.g. on Win32 */</comment>
            <elseif pos:line="91" pos:column="13">else <if pos:line="91" pos:column="18">if <condition pos:line="91" pos:column="21">(<expr><name pos:line="91" pos:column="22">c<pos:position pos:line="91" pos:column="23"/></name> <operator pos:line="91" pos:column="24">==<pos:position pos:line="91" pos:column="26"/></operator> <literal type="char" pos:line="91" pos:column="27">'\n'<pos:position pos:line="91" pos:column="31"/></literal></expr>)<pos:position pos:line="91" pos:column="32"/></condition><then pos:line="91" pos:column="32"> <block pos:line="91" pos:column="33">{
                <expr_stmt><expr><operator pos:line="92" pos:column="17">++<pos:position pos:line="92" pos:column="19"/></operator><name pos:line="92" pos:column="19">found_nl<pos:position pos:line="92" pos:column="27"/></name></expr>;<pos:position pos:line="92" pos:column="28"/></expr_stmt>
                <break pos:line="93" pos:column="17">break;<pos:position pos:line="93" pos:column="23"/></break>
            }<pos:position pos:line="94" pos:column="14"/></block></then></if></elseif></if>

            <expr_stmt><expr><name><name pos:line="96" pos:column="13">buf<pos:position pos:line="96" pos:column="16"/></name><index pos:line="96" pos:column="16">[<expr><name pos:line="96" pos:column="17">i<pos:position pos:line="96" pos:column="18"/></name><operator pos:line="96" pos:column="18">++<pos:position pos:line="96" pos:column="20"/></operator></expr>]<pos:position pos:line="96" pos:column="21"/></index></name> <operator pos:line="96" pos:column="22">=<pos:position pos:line="96" pos:column="23"/></operator> <name pos:line="96" pos:column="24">c<pos:position pos:line="96" pos:column="25"/></name></expr>;<pos:position pos:line="96" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="97" pos:column="13">apr_file_read<pos:position pos:line="97" pos:column="26"/></name><argument_list pos:line="97" pos:column="26">(<argument><expr><name pos:line="97" pos:column="27">fpout<pos:position pos:line="97" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="34">&amp;<pos:position pos:line="97" pos:column="39"/></operator><name pos:line="97" pos:column="35">c<pos:position pos:line="97" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="38">&amp;<pos:position pos:line="97" pos:column="43"/></operator><name pos:line="97" pos:column="39">nbytes<pos:position pos:line="97" pos:column="45"/></name></expr></argument>)<pos:position pos:line="97" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="98" pos:column="10"/></block></while>

        <comment type="block" pos:line="100" pos:column="9">/* well, if there wasn't a newline yet, we need to read further */</comment>
        <if pos:line="101" pos:column="9">if <condition pos:line="101" pos:column="12">(<expr><name pos:line="101" pos:column="13">buflist<pos:position pos:line="101" pos:column="20"/></name> <operator pos:line="101" pos:column="21">||<pos:position pos:line="101" pos:column="23"/></operator> <operator pos:line="101" pos:column="24">(<pos:position pos:line="101" pos:column="25"/></operator><name pos:line="101" pos:column="25">nbytes<pos:position pos:line="101" pos:column="31"/></name> <operator pos:line="101" pos:column="32">==<pos:position pos:line="101" pos:column="34"/></operator> <literal type="number" pos:line="101" pos:column="35">1<pos:position pos:line="101" pos:column="36"/></literal> <operator pos:line="101" pos:column="37">&amp;&amp;<pos:position pos:line="101" pos:column="47"/></operator> <operator pos:line="101" pos:column="40">!<pos:position pos:line="101" pos:column="41"/></operator><name pos:line="101" pos:column="41">found_nl<pos:position pos:line="101" pos:column="49"/></name><operator pos:line="101" pos:column="49">)<pos:position pos:line="101" pos:column="50"/></operator></expr>)<pos:position pos:line="101" pos:column="51"/></condition><then pos:line="101" pos:column="51"> <block pos:line="101" pos:column="52">{
            <if pos:line="102" pos:column="13">if <condition pos:line="102" pos:column="16">(<expr><operator pos:line="102" pos:column="17">!<pos:position pos:line="102" pos:column="18"/></operator><name pos:line="102" pos:column="18">buflist<pos:position pos:line="102" pos:column="25"/></name></expr>)<pos:position pos:line="102" pos:column="26"/></condition><then pos:line="102" pos:column="26"> <block pos:line="102" pos:column="27">{
                <expr_stmt><expr><name pos:line="103" pos:column="17">curbuf<pos:position pos:line="103" pos:column="23"/></name> <operator pos:line="103" pos:column="24">=<pos:position pos:line="103" pos:column="25"/></operator> <name pos:line="103" pos:column="26">buflist<pos:position pos:line="103" pos:column="33"/></name> <operator pos:line="103" pos:column="34">=<pos:position pos:line="103" pos:column="35"/></operator> <call><name pos:line="103" pos:column="36">apr_palloc<pos:position pos:line="103" pos:column="46"/></name><argument_list pos:line="103" pos:column="46">(<argument><expr><name><name pos:line="103" pos:column="47">r<pos:position pos:line="103" pos:column="48"/></name><operator pos:line="103" pos:column="48">-&gt;<pos:position pos:line="103" pos:column="53"/></operator><name pos:line="103" pos:column="50">pool<pos:position pos:line="103" pos:column="54"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="103" pos:column="56">sizeof<argument_list pos:line="103" pos:column="62">(<argument><expr><operator pos:line="103" pos:column="63">*<pos:position pos:line="103" pos:column="64"/></operator><name pos:line="103" pos:column="64">buflist<pos:position pos:line="103" pos:column="71"/></name></expr></argument>)<pos:position pos:line="103" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="103" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="74"/></expr_stmt>
            }<pos:position pos:line="104" pos:column="14"/></block></then>
            <elseif pos:line="105" pos:column="13">else <if pos:line="105" pos:column="18">if <condition pos:line="105" pos:column="21">(<expr><name pos:line="105" pos:column="22">i<pos:position pos:line="105" pos:column="23"/></name></expr>)<pos:position pos:line="105" pos:column="24"/></condition><then pos:line="105" pos:column="24"> <block pos:line="105" pos:column="25">{
                <expr_stmt><expr><name><name pos:line="106" pos:column="17">curbuf<pos:position pos:line="106" pos:column="23"/></name><operator pos:line="106" pos:column="23">-&gt;<pos:position pos:line="106" pos:column="28"/></operator><name pos:line="106" pos:column="25">next<pos:position pos:line="106" pos:column="29"/></name></name> <operator pos:line="106" pos:column="30">=<pos:position pos:line="106" pos:column="31"/></operator> <call><name pos:line="106" pos:column="32">apr_palloc<pos:position pos:line="106" pos:column="42"/></name><argument_list pos:line="106" pos:column="42">(<argument><expr><name><name pos:line="106" pos:column="43">r<pos:position pos:line="106" pos:column="44"/></name><operator pos:line="106" pos:column="44">-&gt;<pos:position pos:line="106" pos:column="49"/></operator><name pos:line="106" pos:column="46">pool<pos:position pos:line="106" pos:column="50"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="106" pos:column="52">sizeof<argument_list pos:line="106" pos:column="58">(<argument><expr><operator pos:line="106" pos:column="59">*<pos:position pos:line="106" pos:column="60"/></operator><name pos:line="106" pos:column="60">buflist<pos:position pos:line="106" pos:column="67"/></name></expr></argument>)<pos:position pos:line="106" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="106" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="70"/></expr_stmt>
                <expr_stmt><expr><name pos:line="107" pos:column="17">curbuf<pos:position pos:line="107" pos:column="23"/></name> <operator pos:line="107" pos:column="24">=<pos:position pos:line="107" pos:column="25"/></operator> <name><name pos:line="107" pos:column="26">curbuf<pos:position pos:line="107" pos:column="32"/></name><operator pos:line="107" pos:column="32">-&gt;<pos:position pos:line="107" pos:column="37"/></operator><name pos:line="107" pos:column="34">next<pos:position pos:line="107" pos:column="38"/></name></name></expr>;<pos:position pos:line="107" pos:column="39"/></expr_stmt>

            }<pos:position pos:line="109" pos:column="14"/></block></then></if></elseif></if>
            <expr_stmt><expr><name><name pos:line="110" pos:column="13">curbuf<pos:position pos:line="110" pos:column="19"/></name><operator pos:line="110" pos:column="19">-&gt;<pos:position pos:line="110" pos:column="24"/></operator><name pos:line="110" pos:column="21">next<pos:position pos:line="110" pos:column="25"/></name></name> <operator pos:line="110" pos:column="26">=<pos:position pos:line="110" pos:column="27"/></operator> <name pos:line="110" pos:column="28">NULL<pos:position pos:line="110" pos:column="32"/></name></expr>;<pos:position pos:line="110" pos:column="33"/></expr_stmt>

            <if pos:line="112" pos:column="13">if <condition pos:line="112" pos:column="16">(<expr><name pos:line="112" pos:column="17">i<pos:position pos:line="112" pos:column="18"/></name></expr>)<pos:position pos:line="112" pos:column="19"/></condition><then pos:line="112" pos:column="19"> <block pos:line="112" pos:column="20">{
                <expr_stmt><expr><name><name pos:line="113" pos:column="17">curbuf<pos:position pos:line="113" pos:column="23"/></name><operator pos:line="113" pos:column="23">-&gt;<pos:position pos:line="113" pos:column="28"/></operator><name pos:line="113" pos:column="25">string<pos:position pos:line="113" pos:column="31"/></name></name> <operator pos:line="113" pos:column="32">=<pos:position pos:line="113" pos:column="33"/></operator> <name pos:line="113" pos:column="34">buf<pos:position pos:line="113" pos:column="37"/></name></expr>;<pos:position pos:line="113" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="114" pos:column="17">curbuf<pos:position pos:line="114" pos:column="23"/></name><operator pos:line="114" pos:column="23">-&gt;<pos:position pos:line="114" pos:column="28"/></operator><name pos:line="114" pos:column="25">len<pos:position pos:line="114" pos:column="28"/></name></name> <operator pos:line="114" pos:column="29">=<pos:position pos:line="114" pos:column="30"/></operator> <name pos:line="114" pos:column="31">i<pos:position pos:line="114" pos:column="32"/></name></expr>;<pos:position pos:line="114" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name pos:line="115" pos:column="17">combined_len<pos:position pos:line="115" pos:column="29"/></name> <operator pos:line="115" pos:column="30">+=<pos:position pos:line="115" pos:column="32"/></operator> <name pos:line="115" pos:column="33">i<pos:position pos:line="115" pos:column="34"/></name></expr>;<pos:position pos:line="115" pos:column="35"/></expr_stmt>
                <expr_stmt><expr><name pos:line="116" pos:column="17">buf<pos:position pos:line="116" pos:column="20"/></name> <operator pos:line="116" pos:column="21">=<pos:position pos:line="116" pos:column="22"/></operator> <call><name pos:line="116" pos:column="23">apr_palloc<pos:position pos:line="116" pos:column="33"/></name><argument_list pos:line="116" pos:column="33">(<argument><expr><name><name pos:line="116" pos:column="34">r<pos:position pos:line="116" pos:column="35"/></name><operator pos:line="116" pos:column="35">-&gt;<pos:position pos:line="116" pos:column="40"/></operator><name pos:line="116" pos:column="37">pool<pos:position pos:line="116" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="43">REWRITE_PRG_MAP_BUF<pos:position pos:line="116" pos:column="62"/></name></expr></argument>)<pos:position pos:line="116" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="64"/></expr_stmt>
            }<pos:position pos:line="117" pos:column="14"/></block></then></if>

            <if pos:line="119" pos:column="13">if <condition pos:line="119" pos:column="16">(<expr><name pos:line="119" pos:column="17">nbytes<pos:position pos:line="119" pos:column="23"/></name> <operator pos:line="119" pos:column="24">==<pos:position pos:line="119" pos:column="26"/></operator> <literal type="number" pos:line="119" pos:column="27">1<pos:position pos:line="119" pos:column="28"/></literal> <operator pos:line="119" pos:column="29">&amp;&amp;<pos:position pos:line="119" pos:column="39"/></operator> <operator pos:line="119" pos:column="32">!<pos:position pos:line="119" pos:column="33"/></operator><name pos:line="119" pos:column="33">found_nl<pos:position pos:line="119" pos:column="41"/></name></expr>)<pos:position pos:line="119" pos:column="42"/></condition><then pos:line="119" pos:column="42"> <block pos:line="119" pos:column="43">{
                <continue pos:line="120" pos:column="17">continue;<pos:position pos:line="120" pos:column="26"/></continue>
            }<pos:position pos:line="121" pos:column="14"/></block></then></if>
        }<pos:position pos:line="122" pos:column="10"/></block></then></if>

        <break pos:line="124" pos:column="9">break;<pos:position pos:line="124" pos:column="15"/></break>
    }<pos:position pos:line="125" pos:column="6"/></block> while <condition pos:line="125" pos:column="13">(<expr><literal type="number" pos:line="125" pos:column="14">1<pos:position pos:line="125" pos:column="15"/></literal></expr>)<pos:position pos:line="125" pos:column="16"/></condition>;<pos:position pos:line="125" pos:column="17"/></do>

    <comment type="block" pos:line="127" pos:column="5">/* concat the stuff */</comment>
    <if pos:line="128" pos:column="5">if <condition pos:line="128" pos:column="8">(<expr><name pos:line="128" pos:column="9">buflist<pos:position pos:line="128" pos:column="16"/></name></expr>)<pos:position pos:line="128" pos:column="17"/></condition><then pos:line="128" pos:column="17"> <block pos:line="128" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="129" pos:column="9">char<pos:position pos:line="129" pos:column="13"/></name> <modifier pos:line="129" pos:column="14">*<pos:position pos:line="129" pos:column="15"/></modifier></type><name pos:line="129" pos:column="15">p<pos:position pos:line="129" pos:column="16"/></name></decl>;<pos:position pos:line="129" pos:column="17"/></decl_stmt>

        <expr_stmt><expr><name pos:line="131" pos:column="9">p<pos:position pos:line="131" pos:column="10"/></name> <operator pos:line="131" pos:column="11">=<pos:position pos:line="131" pos:column="12"/></operator> <name pos:line="131" pos:column="13">buf<pos:position pos:line="131" pos:column="16"/></name> <operator pos:line="131" pos:column="17">=<pos:position pos:line="131" pos:column="18"/></operator> <call><name pos:line="131" pos:column="19">apr_palloc<pos:position pos:line="131" pos:column="29"/></name><argument_list pos:line="131" pos:column="29">(<argument><expr><name><name pos:line="131" pos:column="30">r<pos:position pos:line="131" pos:column="31"/></name><operator pos:line="131" pos:column="31">-&gt;<pos:position pos:line="131" pos:column="36"/></operator><name pos:line="131" pos:column="33">pool<pos:position pos:line="131" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="39">combined_len<pos:position pos:line="131" pos:column="51"/></name> <operator pos:line="131" pos:column="52">+<pos:position pos:line="131" pos:column="53"/></operator> <literal type="number" pos:line="131" pos:column="54">1<pos:position pos:line="131" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="57"/></expr_stmt> <comment type="block" pos:line="131" pos:column="58">/* \0 */</comment>
        <while pos:line="132" pos:column="9">while <condition pos:line="132" pos:column="15">(<expr><name pos:line="132" pos:column="16">buflist<pos:position pos:line="132" pos:column="23"/></name></expr>)<pos:position pos:line="132" pos:column="24"/></condition> <block pos:line="132" pos:column="25">{
            <if pos:line="133" pos:column="13">if <condition pos:line="133" pos:column="16">(<expr><name><name pos:line="133" pos:column="17">buflist<pos:position pos:line="133" pos:column="24"/></name><operator pos:line="133" pos:column="24">-&gt;<pos:position pos:line="133" pos:column="29"/></operator><name pos:line="133" pos:column="26">len<pos:position pos:line="133" pos:column="29"/></name></name></expr>)<pos:position pos:line="133" pos:column="30"/></condition><then pos:line="133" pos:column="30"> <block pos:line="133" pos:column="31">{
                <expr_stmt><expr><call><name pos:line="134" pos:column="17">memcpy<pos:position pos:line="134" pos:column="23"/></name><argument_list pos:line="134" pos:column="23">(<argument><expr><name pos:line="134" pos:column="24">p<pos:position pos:line="134" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="27">buflist<pos:position pos:line="134" pos:column="34"/></name><operator pos:line="134" pos:column="34">-&gt;<pos:position pos:line="134" pos:column="39"/></operator><name pos:line="134" pos:column="36">string<pos:position pos:line="134" pos:column="42"/></name></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="44">buflist<pos:position pos:line="134" pos:column="51"/></name><operator pos:line="134" pos:column="51">-&gt;<pos:position pos:line="134" pos:column="56"/></operator><name pos:line="134" pos:column="53">len<pos:position pos:line="134" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="134" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="58"/></expr_stmt>
                <expr_stmt><expr><name pos:line="135" pos:column="17">p<pos:position pos:line="135" pos:column="18"/></name> <operator pos:line="135" pos:column="19">+=<pos:position pos:line="135" pos:column="21"/></operator> <name><name pos:line="135" pos:column="22">buflist<pos:position pos:line="135" pos:column="29"/></name><operator pos:line="135" pos:column="29">-&gt;<pos:position pos:line="135" pos:column="34"/></operator><name pos:line="135" pos:column="31">len<pos:position pos:line="135" pos:column="34"/></name></name></expr>;<pos:position pos:line="135" pos:column="35"/></expr_stmt>
            }<pos:position pos:line="136" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="137" pos:column="13">buflist<pos:position pos:line="137" pos:column="20"/></name> <operator pos:line="137" pos:column="21">=<pos:position pos:line="137" pos:column="22"/></operator> <name><name pos:line="137" pos:column="23">buflist<pos:position pos:line="137" pos:column="30"/></name><operator pos:line="137" pos:column="30">-&gt;<pos:position pos:line="137" pos:column="35"/></operator><name pos:line="137" pos:column="32">next<pos:position pos:line="137" pos:column="36"/></name></name></expr>;<pos:position pos:line="137" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="138" pos:column="10"/></block></while>
        <expr_stmt><expr><operator pos:line="139" pos:column="9">*<pos:position pos:line="139" pos:column="10"/></operator><name pos:line="139" pos:column="10">p<pos:position pos:line="139" pos:column="11"/></name> <operator pos:line="139" pos:column="12">=<pos:position pos:line="139" pos:column="13"/></operator> <literal type="char" pos:line="139" pos:column="14">'\0'<pos:position pos:line="139" pos:column="18"/></literal></expr>;<pos:position pos:line="139" pos:column="19"/></expr_stmt></block></then></if></block></function>
 </unit>
