<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5807.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">h2_stream<pos:position pos:line="1" pos:column="10"/></name> <modifier pos:line="1" pos:column="11">*<pos:position pos:line="1" pos:column="12"/></modifier></type><name pos:line="1" pos:column="12">h2_mplx_next_submit<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">h2_mplx<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">m<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">h2_stream_set<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">streams<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">status<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">h2_stream<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">stream<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name pos:line="4" pos:column="25">NULL<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">AP_DEBUG_ASSERT<pos:position pos:line="5" pos:column="20"/></name><argument_list pos:line="5" pos:column="20">(<argument><expr><name pos:line="5" pos:column="21">m<pos:position pos:line="5" pos:column="22"/></name></expr></argument>)<pos:position pos:line="5" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="24"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">m<pos:position pos:line="6" pos:column="10"/></name><operator pos:line="6" pos:column="10">-&gt;<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="12">aborted<pos:position pos:line="6" pos:column="19"/></name></name></expr>)<pos:position pos:line="6" pos:column="20"/></condition><then pos:line="6" pos:column="20"> <block pos:line="6" pos:column="21">{
        <return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">NULL<pos:position pos:line="7" pos:column="20"/></name></expr>;<pos:position pos:line="7" pos:column="21"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="9" pos:column="5">status<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">=<pos:position pos:line="9" pos:column="13"/></operator> <call><name pos:line="9" pos:column="14">apr_thread_mutex_lock<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><name><name pos:line="9" pos:column="36">m<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">-&gt;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="39">lock<pos:position pos:line="9" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="45"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">APR_SUCCESS<pos:position pos:line="10" pos:column="20"/></name> <operator pos:line="10" pos:column="21">==<pos:position pos:line="10" pos:column="23"/></operator> <name pos:line="10" pos:column="24">status<pos:position pos:line="10" pos:column="30"/></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31"> <block pos:line="10" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="11" pos:column="9">h2_io<pos:position pos:line="11" pos:column="14"/></name> <modifier pos:line="11" pos:column="15">*<pos:position pos:line="11" pos:column="16"/></modifier></type><name pos:line="11" pos:column="16">io<pos:position pos:line="11" pos:column="18"/></name> <init pos:line="11" pos:column="19">= <expr><call><name pos:line="11" pos:column="21">h2_io_set_get_highest_prio<pos:position pos:line="11" pos:column="47"/></name><argument_list pos:line="11" pos:column="47">(<argument><expr><name><name pos:line="11" pos:column="48">m<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">-&gt;<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="51">ready_ios<pos:position pos:line="11" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="62"/></decl_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">io<pos:position pos:line="12" pos:column="15"/></name></expr>)<pos:position pos:line="12" pos:column="16"/></condition><then pos:line="12" pos:column="16"> <block pos:line="12" pos:column="17">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">h2_response<pos:position pos:line="13" pos:column="24"/></name> <modifier pos:line="13" pos:column="25">*<pos:position pos:line="13" pos:column="26"/></modifier></type><name pos:line="13" pos:column="26">response<pos:position pos:line="13" pos:column="34"/></name> <init pos:line="13" pos:column="35">= <expr><name><name pos:line="13" pos:column="37">io<pos:position pos:line="13" pos:column="39"/></name><operator pos:line="13" pos:column="39">-&gt;<pos:position pos:line="13" pos:column="44"/></operator><name pos:line="13" pos:column="41">response<pos:position pos:line="13" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="50"/></decl_stmt>
            
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">AP_DEBUG_ASSERT<pos:position pos:line="15" pos:column="28"/></name><argument_list pos:line="15" pos:column="28">(<argument><expr><name pos:line="15" pos:column="29">response<pos:position pos:line="15" pos:column="37"/></name></expr></argument>)<pos:position pos:line="15" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="16" pos:column="13">h2_io_set_remove<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name><name pos:line="16" pos:column="30">m<pos:position pos:line="16" pos:column="31"/></name><operator pos:line="16" pos:column="31">-&gt;<pos:position pos:line="16" pos:column="36"/></operator><name pos:line="16" pos:column="33">ready_ios<pos:position pos:line="16" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="44">io<pos:position pos:line="16" pos:column="46"/></name></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="48"/></expr_stmt>
            
            <expr_stmt><expr><name pos:line="18" pos:column="13">stream<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <call><name pos:line="18" pos:column="22">h2_stream_set_get<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">(<argument><expr><name pos:line="18" pos:column="40">streams<pos:position pos:line="18" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="49">response<pos:position pos:line="18" pos:column="57"/></name><operator pos:line="18" pos:column="57">-&gt;<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="59">stream_id<pos:position pos:line="18" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="70"/></expr_stmt>
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><name pos:line="19" pos:column="17">stream<pos:position pos:line="19" pos:column="23"/></name></expr>)<pos:position pos:line="19" pos:column="24"/></condition><then pos:line="19" pos:column="24"> <block pos:line="19" pos:column="25">{
                <expr_stmt><expr><call><name pos:line="20" pos:column="17">h2_stream_set_response<pos:position pos:line="20" pos:column="39"/></name><argument_list pos:line="20" pos:column="39">(<argument><expr><name pos:line="20" pos:column="40">stream<pos:position pos:line="20" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="48">response<pos:position pos:line="20" pos:column="56"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="58">io<pos:position pos:line="20" pos:column="60"/></name><operator pos:line="20" pos:column="60">-&gt;<pos:position pos:line="20" pos:column="65"/></operator><name pos:line="20" pos:column="62">bbout<pos:position pos:line="20" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="69"/></expr_stmt>
                <if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name><name pos:line="21" pos:column="21">io<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">output_drained<pos:position pos:line="21" pos:column="39"/></name></name></expr>)<pos:position pos:line="21" pos:column="40"/></condition><then pos:line="21" pos:column="40"> <block pos:line="21" pos:column="41">{
                    <expr_stmt><expr><call><name pos:line="22" pos:column="21">apr_thread_cond_signal<pos:position pos:line="22" pos:column="43"/></name><argument_list pos:line="22" pos:column="43">(<argument><expr><name><name pos:line="22" pos:column="44">io<pos:position pos:line="22" pos:column="46"/></name><operator pos:line="22" pos:column="46">-&gt;<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="48">output_drained<pos:position pos:line="22" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="64"/></expr_stmt>
                }<pos:position pos:line="23" pos:column="18"/></block></then></if>
            }<pos:position pos:line="24" pos:column="14"/></block></then>
            <else pos:line="25" pos:column="13">else <block pos:line="25" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="26" pos:column="17">ap_log_cerror<pos:position pos:line="26" pos:column="30"/></name><argument_list pos:line="26" pos:column="30">(<argument><expr><name pos:line="26" pos:column="31">APLOG_MARK<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">APLOG_WARNING<pos:position pos:line="26" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="58">APR_NOTFOUND<pos:position pos:line="26" pos:column="70"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="72">m<pos:position pos:line="26" pos:column="73"/></name><operator pos:line="26" pos:column="73">-&gt;<pos:position pos:line="26" pos:column="78"/></operator><name pos:line="26" pos:column="75">c<pos:position pos:line="26" pos:column="76"/></name></name></expr></argument>,
                              <argument><expr><call><name pos:line="27" pos:column="31">APLOGNO<pos:position pos:line="27" pos:column="38"/></name><argument_list pos:line="27" pos:column="38">(<argument><expr><literal type="number" pos:line="27" pos:column="39">02953<pos:position pos:line="27" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call> <literal type="string" pos:line="27" pos:column="46">"h2_mplx(%ld): stream for response %d"<pos:position pos:line="27" pos:column="84"/></literal></expr></argument>,
                              <argument><expr><name><name pos:line="28" pos:column="31">m<pos:position pos:line="28" pos:column="32"/></name><operator pos:line="28" pos:column="32">-&gt;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="34">id<pos:position pos:line="28" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="38">response<pos:position pos:line="28" pos:column="46"/></name><operator pos:line="28" pos:column="46">-&gt;<pos:position pos:line="28" pos:column="51"/></operator><name pos:line="28" pos:column="48">stream_id<pos:position pos:line="28" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>
            }<pos:position pos:line="29" pos:column="14"/></block></else></if>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="31" pos:column="32"/></name><argument_list pos:line="31" pos:column="32">(<argument><expr><name><name pos:line="31" pos:column="33">m<pos:position pos:line="31" pos:column="34"/></name><operator pos:line="31" pos:column="34">-&gt;<pos:position pos:line="31" pos:column="39"/></operator><name pos:line="31" pos:column="36">lock<pos:position pos:line="31" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">stream<pos:position pos:line="33" pos:column="18"/></name></expr>;<pos:position pos:line="33" pos:column="19"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
