<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2146_httpd-2.2.16.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">buffer_output<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">request_rec<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">r<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                                  <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">str<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">apr_size_t<pos:position pos:line="2" pos:column="62"/></name></type> <name pos:line="2" pos:column="63">len<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">conn_rec<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">c<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name><name pos:line="4" pos:column="19">r<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">-&gt;<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="22">connection<pos:position pos:line="4" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ap_filter_t<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">f<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">old_write_filter_ctx<pos:position pos:line="6" pos:column="25"/></name> <modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier></type><name pos:line="6" pos:column="27">ctx<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">len<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">==<pos:position pos:line="8" pos:column="15"/></operator> <literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr>)<pos:position pos:line="8" pos:column="18"/></condition><then pos:line="8" pos:column="18">
        <block type="pseudo"><return pos:line="9" pos:column="9">return <expr><name pos:line="9" pos:column="16">APR_SUCCESS<pos:position pos:line="9" pos:column="27"/></name></expr>;<pos:position pos:line="9" pos:column="28"/></return></block></then></if>

    <comment type="block" pos:line="11" pos:column="5">/* future optimization: record some flags in the request_rec to
     * say whether we've added our filter, and whether it is first.
     */</comment>

    <comment type="block" pos:line="15" pos:column="5">/* this will typically exit on the first test */</comment>
    <for pos:line="16" pos:column="5">for <control pos:line="16" pos:column="9">(<init><expr><name pos:line="16" pos:column="10">f<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">=<pos:position pos:line="16" pos:column="13"/></operator> <name><name pos:line="16" pos:column="14">r<pos:position pos:line="16" pos:column="15"/></name><operator pos:line="16" pos:column="15">-&gt;<pos:position pos:line="16" pos:column="20"/></operator><name pos:line="16" pos:column="17">output_filters<pos:position pos:line="16" pos:column="31"/></name></name></expr>;<pos:position pos:line="16" pos:column="32"/></init> <condition><expr><name pos:line="16" pos:column="33">f<pos:position pos:line="16" pos:column="34"/></name> <operator pos:line="16" pos:column="35">!=<pos:position pos:line="16" pos:column="37"/></operator> <name pos:line="16" pos:column="38">NULL<pos:position pos:line="16" pos:column="42"/></name></expr>;<pos:position pos:line="16" pos:column="43"/></condition> <incr><expr><name pos:line="16" pos:column="44">f<pos:position pos:line="16" pos:column="45"/></name> <operator pos:line="16" pos:column="46">=<pos:position pos:line="16" pos:column="47"/></operator> <name><name pos:line="16" pos:column="48">f<pos:position pos:line="16" pos:column="49"/></name><operator pos:line="16" pos:column="49">-&gt;<pos:position pos:line="16" pos:column="54"/></operator><name pos:line="16" pos:column="51">next<pos:position pos:line="16" pos:column="55"/></name></name></expr></incr>)<pos:position pos:line="16" pos:column="56"/></control> <block pos:line="16" pos:column="57">{
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">ap_old_write_func<pos:position pos:line="17" pos:column="30"/></name> <operator pos:line="17" pos:column="31">==<pos:position pos:line="17" pos:column="33"/></operator> <name><name pos:line="17" pos:column="34">f<pos:position pos:line="17" pos:column="35"/></name><operator pos:line="17" pos:column="35">-&gt;<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="37">frec<pos:position pos:line="17" pos:column="41"/></name></name></expr>)<pos:position pos:line="17" pos:column="42"/></condition><then pos:line="17" pos:column="42">
            <block type="pseudo"><break pos:line="18" pos:column="13">break;<pos:position pos:line="18" pos:column="19"/></break></block></then></if>
    }<pos:position pos:line="19" pos:column="6"/></block></for>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">f<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">==<pos:position pos:line="21" pos:column="13"/></operator> <name pos:line="21" pos:column="14">NULL<pos:position pos:line="21" pos:column="18"/></name></expr>)<pos:position pos:line="21" pos:column="19"/></condition><then pos:line="21" pos:column="19"> <block pos:line="21" pos:column="20">{
        <comment type="block" pos:line="22" pos:column="9">/* our filter hasn't been added yet */</comment>
        <expr_stmt><expr><name pos:line="23" pos:column="9">ctx<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <call><name pos:line="23" pos:column="15">apr_pcalloc<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><name><name pos:line="23" pos:column="27">r<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">-&gt;<pos:position pos:line="23" pos:column="33"/></operator><name pos:line="23" pos:column="30">pool<pos:position pos:line="23" pos:column="34"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="23" pos:column="36">sizeof<argument_list pos:line="23" pos:column="42">(<argument><expr><operator pos:line="23" pos:column="43">*<pos:position pos:line="23" pos:column="44"/></operator><name pos:line="23" pos:column="44">ctx<pos:position pos:line="23" pos:column="47"/></name></expr></argument>)<pos:position pos:line="23" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="23" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">ap_add_output_filter<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><literal type="string" pos:line="24" pos:column="30">"OLD_WRITE"<pos:position pos:line="24" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="43">ctx<pos:position pos:line="24" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="48">r<pos:position pos:line="24" pos:column="49"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="51">r<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">-&gt;<pos:position pos:line="24" pos:column="57"/></operator><name pos:line="24" pos:column="54">connection<pos:position pos:line="24" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">f<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <name><name pos:line="25" pos:column="13">r<pos:position pos:line="25" pos:column="14"/></name><operator pos:line="25" pos:column="14">-&gt;<pos:position pos:line="25" pos:column="19"/></operator><name pos:line="25" pos:column="16">output_filters<pos:position pos:line="25" pos:column="30"/></name></name></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="28" pos:column="5">/* if the first filter is not our buffering filter, then we have to
     * deliver the content through the normal filter chain
     */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">f<pos:position pos:line="31" pos:column="10"/></name> <operator pos:line="31" pos:column="11">!=<pos:position pos:line="31" pos:column="13"/></operator> <name><name pos:line="31" pos:column="14">r<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">-&gt;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="17">output_filters<pos:position pos:line="31" pos:column="31"/></name></name></expr>)<pos:position pos:line="31" pos:column="32"/></condition><then pos:line="31" pos:column="32"> <block pos:line="31" pos:column="33">{
        <decl_stmt><decl><type><name pos:line="32" pos:column="9">apr_bucket_brigade<pos:position pos:line="32" pos:column="27"/></name> <modifier pos:line="32" pos:column="28">*<pos:position pos:line="32" pos:column="29"/></modifier></type><name pos:line="32" pos:column="29">bb<pos:position pos:line="32" pos:column="31"/></name> <init pos:line="32" pos:column="32">= <expr><call><name pos:line="32" pos:column="34">apr_brigade_create<pos:position pos:line="32" pos:column="52"/></name><argument_list pos:line="32" pos:column="52">(<argument><expr><name><name pos:line="32" pos:column="53">r<pos:position pos:line="32" pos:column="54"/></name><operator pos:line="32" pos:column="54">-&gt;<pos:position pos:line="32" pos:column="59"/></operator><name pos:line="32" pos:column="56">pool<pos:position pos:line="32" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="62">c<pos:position pos:line="32" pos:column="63"/></name><operator pos:line="32" pos:column="63">-&gt;<pos:position pos:line="32" pos:column="68"/></operator><name pos:line="32" pos:column="65">bucket_alloc<pos:position pos:line="32" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="79"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">apr_bucket<pos:position pos:line="33" pos:column="19"/></name> <modifier pos:line="33" pos:column="20">*<pos:position pos:line="33" pos:column="21"/></modifier></type><name pos:line="33" pos:column="21">b<pos:position pos:line="33" pos:column="22"/></name> <init pos:line="33" pos:column="23">= <expr><call><name pos:line="33" pos:column="25">apr_bucket_transient_create<pos:position pos:line="33" pos:column="52"/></name><argument_list pos:line="33" pos:column="52">(<argument><expr><name pos:line="33" pos:column="53">str<pos:position pos:line="33" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="58">len<pos:position pos:line="33" pos:column="61"/></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="63">c<pos:position pos:line="33" pos:column="64"/></name><operator pos:line="33" pos:column="64">-&gt;<pos:position pos:line="33" pos:column="69"/></operator><name pos:line="33" pos:column="66">bucket_alloc<pos:position pos:line="33" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="80"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="34" pos:column="32"/></name><argument_list pos:line="34" pos:column="32">(<argument><expr><name pos:line="34" pos:column="33">bb<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="37">b<pos:position pos:line="34" pos:column="38"/></name></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>

        <return pos:line="36" pos:column="9">return <expr><call><name pos:line="36" pos:column="16">ap_pass_brigade<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><name><name pos:line="36" pos:column="32">r<pos:position pos:line="36" pos:column="33"/></name><operator pos:line="36" pos:column="33">-&gt;<pos:position pos:line="36" pos:column="38"/></operator><name pos:line="36" pos:column="35">output_filters<pos:position pos:line="36" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="51">bb<pos:position pos:line="36" pos:column="53"/></name></expr></argument>)<pos:position pos:line="36" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="55"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="39" pos:column="5">/* grab the context from our filter */</comment>
    <expr_stmt><expr><name pos:line="40" pos:column="5">ctx<pos:position pos:line="40" pos:column="8"/></name> <operator pos:line="40" pos:column="9">=<pos:position pos:line="40" pos:column="10"/></operator> <name><name pos:line="40" pos:column="11">r<pos:position pos:line="40" pos:column="12"/></name><operator pos:line="40" pos:column="12">-&gt;<pos:position pos:line="40" pos:column="17"/></operator><name pos:line="40" pos:column="14">output_filters<pos:position pos:line="40" pos:column="28"/></name><operator pos:line="40" pos:column="28">-&gt;<pos:position pos:line="40" pos:column="33"/></operator><name pos:line="40" pos:column="30">ctx<pos:position pos:line="40" pos:column="33"/></name></name></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name><name pos:line="42" pos:column="9">ctx<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">-&gt;<pos:position pos:line="42" pos:column="17"/></operator><name pos:line="42" pos:column="14">bb<pos:position pos:line="42" pos:column="16"/></name></name> <operator pos:line="42" pos:column="17">==<pos:position pos:line="42" pos:column="19"/></operator> <name pos:line="42" pos:column="20">NULL<pos:position pos:line="42" pos:column="24"/></name></expr>)<pos:position pos:line="42" pos:column="25"/></condition><then pos:line="42" pos:column="25"> <block pos:line="42" pos:column="26">{
        <expr_stmt><expr><name><name pos:line="43" pos:column="9">ctx<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">bb<pos:position pos:line="43" pos:column="16"/></name></name> <operator pos:line="43" pos:column="17">=<pos:position pos:line="43" pos:column="18"/></operator> <call><name pos:line="43" pos:column="19">apr_brigade_create<pos:position pos:line="43" pos:column="37"/></name><argument_list pos:line="43" pos:column="37">(<argument><expr><name><name pos:line="43" pos:column="38">r<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">-&gt;<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="41">pool<pos:position pos:line="43" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="47">c<pos:position pos:line="43" pos:column="48"/></name><operator pos:line="43" pos:column="48">-&gt;<pos:position pos:line="43" pos:column="53"/></operator><name pos:line="43" pos:column="50">bucket_alloc<pos:position pos:line="43" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>

    <return pos:line="46" pos:column="5">return <expr><call><name pos:line="46" pos:column="12">ap_fwrite<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><name><name pos:line="46" pos:column="22">f<pos:position pos:line="46" pos:column="23"/></name><operator pos:line="46" pos:column="23">-&gt;<pos:position pos:line="46" pos:column="28"/></operator><name pos:line="46" pos:column="25">next<pos:position pos:line="46" pos:column="29"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="31">ctx<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">-&gt;<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="36">bb<pos:position pos:line="46" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="40">str<pos:position pos:line="46" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="45">len<pos:position pos:line="46" pos:column="48"/></name></expr></argument>)<pos:position pos:line="46" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="50"/></return>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
