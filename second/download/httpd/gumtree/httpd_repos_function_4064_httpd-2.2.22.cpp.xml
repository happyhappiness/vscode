<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4064_httpd-2.2.22.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">uschar<pos:position pos:line="1" pos:column="20"/></name> <modifier pos:line="1" pos:column="21">*<pos:position pos:line="1" pos:column="22"/></modifier></type>
<name pos:line="2" pos:column="1">find_bracket<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">uschar<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier></type><name pos:line="2" pos:column="28">code<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">BOOL<pos:position pos:line="2" pos:column="38"/></name></type> <name pos:line="2" pos:column="39">utf8<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="45">int<pos:position pos:line="2" pos:column="48"/></name></type> <name pos:line="2" pos:column="49">number<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
<cpp:ifndef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifndef<pos:position pos:line="4" pos:column="8"/></cpp:directive> <name pos:line="4" pos:column="9">SUPPORT_UTF8<pos:position pos:line="4" pos:column="21"/></name></cpp:ifndef>
<expr_stmt><expr><name pos:line="5" pos:column="1">utf8<pos:position pos:line="5" pos:column="5"/></name> <operator pos:line="5" pos:column="6">=<pos:position pos:line="5" pos:column="7"/></operator> <name pos:line="5" pos:column="8">utf8<pos:position pos:line="5" pos:column="12"/></name></expr>;<pos:position pos:line="5" pos:column="13"/></expr_stmt>               <comment type="block" pos:line="5" pos:column="28">/* Stop pedantic compilers complaining */</comment>
<cpp:endif pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">endif<pos:position pos:line="6" pos:column="7"/></cpp:directive></cpp:endif>

<for pos:line="8" pos:column="1">for <control pos:line="8" pos:column="5">(<init pos:line="8" pos:column="6">;<pos:position pos:line="8" pos:column="7"/></init><condition pos:line="8" pos:column="7">;<pos:position pos:line="8" pos:column="8"/></condition><incr/>)<pos:position pos:line="8" pos:column="9"/></control>
  <block pos:line="9" pos:column="3">{
  <decl_stmt><decl><type><specifier pos:line="10" pos:column="3">register<pos:position pos:line="10" pos:column="11"/></specifier> <name pos:line="10" pos:column="12">int<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">c<pos:position pos:line="10" pos:column="17"/></name> <init pos:line="10" pos:column="18">= <expr><operator pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="21">code<pos:position pos:line="10" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="26"/></decl_stmt>
  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">c<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">==<pos:position pos:line="11" pos:column="11"/></operator> <name pos:line="11" pos:column="12">OP_END<pos:position pos:line="11" pos:column="18"/></name></expr>)<pos:position pos:line="11" pos:column="19"/></condition><then pos:line="11" pos:column="19"> <block type="pseudo"><return pos:line="11" pos:column="20">return <expr><name pos:line="11" pos:column="27">NULL<pos:position pos:line="11" pos:column="31"/></name></expr>;<pos:position pos:line="11" pos:column="32"/></return></block></then>
  <elseif pos:line="12" pos:column="3">else <if pos:line="12" pos:column="8">if <condition pos:line="12" pos:column="11">(<expr><name pos:line="12" pos:column="12">c<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">&gt;<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="16">OP_BRA<pos:position pos:line="12" pos:column="22"/></name></expr>)<pos:position pos:line="12" pos:column="23"/></condition><then pos:line="12" pos:column="23">
    <block pos:line="13" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name pos:line="14" pos:column="9">n<pos:position pos:line="14" pos:column="10"/></name> <init pos:line="14" pos:column="11">= <expr><name pos:line="14" pos:column="13">c<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">-<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">OP_BRA<pos:position pos:line="14" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="24"/></decl_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">n<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">&gt;<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="13">EXTRACT_BASIC_MAX<pos:position pos:line="15" pos:column="30"/></name></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31"> <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="32">n<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">=<pos:position pos:line="15" pos:column="35"/></operator> <call><name pos:line="15" pos:column="36">GET2<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name pos:line="15" pos:column="41">code<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="47">2<pos:position pos:line="15" pos:column="48"/></literal><operator pos:line="15" pos:column="48">+<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="49">LINK_SIZE<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt></block></then></if>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">n<pos:position pos:line="16" pos:column="10"/></name> <operator pos:line="16" pos:column="11">==<pos:position pos:line="16" pos:column="13"/></operator> <name pos:line="16" pos:column="14">number<pos:position pos:line="16" pos:column="20"/></name></expr>)<pos:position pos:line="16" pos:column="21"/></condition><then pos:line="16" pos:column="21"> <block type="pseudo"><return pos:line="16" pos:column="22">return <expr><operator pos:line="16" pos:column="29">(<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="30">uschar<pos:position pos:line="16" pos:column="36"/></name> <operator pos:line="16" pos:column="37">*<pos:position pos:line="16" pos:column="38"/></operator><operator pos:line="16" pos:column="38">)<pos:position pos:line="16" pos:column="39"/></operator><name pos:line="16" pos:column="39">code<pos:position pos:line="16" pos:column="43"/></name></expr>;<pos:position pos:line="16" pos:column="44"/></return></block></then></if>
    <expr_stmt><expr><name pos:line="17" pos:column="5">code<pos:position pos:line="17" pos:column="9"/></name> <operator pos:line="17" pos:column="10">+=<pos:position pos:line="17" pos:column="12"/></operator> <name><name pos:line="17" pos:column="13">OP_lengths<pos:position pos:line="17" pos:column="23"/></name><index pos:line="17" pos:column="23">[<expr><name pos:line="17" pos:column="24">OP_BRA<pos:position pos:line="17" pos:column="30"/></name></expr>]<pos:position pos:line="17" pos:column="31"/></index></name></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if></elseif>
  <else pos:line="19" pos:column="3">else
    <block pos:line="20" pos:column="5">{
    <expr_stmt><expr><name pos:line="21" pos:column="5">code<pos:position pos:line="21" pos:column="9"/></name> <operator pos:line="21" pos:column="10">+=<pos:position pos:line="21" pos:column="12"/></operator> <name><name pos:line="21" pos:column="13">OP_lengths<pos:position pos:line="21" pos:column="23"/></name><index pos:line="21" pos:column="23">[<expr><name pos:line="21" pos:column="24">c<pos:position pos:line="21" pos:column="25"/></name></expr>]<pos:position pos:line="21" pos:column="26"/></index></name></expr>;<pos:position pos:line="21" pos:column="27"/></expr_stmt>

<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">SUPPORT_UTF8<pos:position pos:line="23" pos:column="20"/></name></cpp:ifdef>

    <comment type="block" pos:line="25" pos:column="5">/* In UTF-8 mode, opcodes that are followed by a character may be followed
    by a multi-byte character. The length in the table is a minimum, so we have
    to scan along to skip the extra bytes. All opcodes are less than 128, so we
    can use relatively efficient code. */</comment>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">utf8<pos:position pos:line="30" pos:column="13"/></name></expr>)<pos:position pos:line="30" pos:column="14"/></condition><then pos:line="30" pos:column="14"> <block type="pseudo"><switch pos:line="30" pos:column="15">switch<condition pos:line="30" pos:column="21">(<expr><name pos:line="30" pos:column="22">c<pos:position pos:line="30" pos:column="23"/></name></expr>)<pos:position pos:line="30" pos:column="24"/></condition>
      <block pos:line="31" pos:column="7">{
      <case pos:line="32" pos:column="7">case <expr><name pos:line="32" pos:column="12">OP_CHAR<pos:position pos:line="32" pos:column="19"/></name></expr>:<pos:position pos:line="32" pos:column="20"/></case>
      <case pos:line="33" pos:column="7">case <expr><name pos:line="33" pos:column="12">OP_CHARNC<pos:position pos:line="33" pos:column="21"/></name></expr>:<pos:position pos:line="33" pos:column="22"/></case>
      <case pos:line="34" pos:column="7">case <expr><name pos:line="34" pos:column="12">OP_EXACT<pos:position pos:line="34" pos:column="20"/></name></expr>:<pos:position pos:line="34" pos:column="21"/></case>
      <case pos:line="35" pos:column="7">case <expr><name pos:line="35" pos:column="12">OP_UPTO<pos:position pos:line="35" pos:column="19"/></name></expr>:<pos:position pos:line="35" pos:column="20"/></case>
      <case pos:line="36" pos:column="7">case <expr><name pos:line="36" pos:column="12">OP_MINUPTO<pos:position pos:line="36" pos:column="22"/></name></expr>:<pos:position pos:line="36" pos:column="23"/></case>
      <case pos:line="37" pos:column="7">case <expr><name pos:line="37" pos:column="12">OP_STAR<pos:position pos:line="37" pos:column="19"/></name></expr>:<pos:position pos:line="37" pos:column="20"/></case>
      <case pos:line="38" pos:column="7">case <expr><name pos:line="38" pos:column="12">OP_MINSTAR<pos:position pos:line="38" pos:column="22"/></name></expr>:<pos:position pos:line="38" pos:column="23"/></case>
      <case pos:line="39" pos:column="7">case <expr><name pos:line="39" pos:column="12">OP_PLUS<pos:position pos:line="39" pos:column="19"/></name></expr>:<pos:position pos:line="39" pos:column="20"/></case>
      <case pos:line="40" pos:column="7">case <expr><name pos:line="40" pos:column="12">OP_MINPLUS<pos:position pos:line="40" pos:column="22"/></name></expr>:<pos:position pos:line="40" pos:column="23"/></case>
      <case pos:line="41" pos:column="7">case <expr><name pos:line="41" pos:column="12">OP_QUERY<pos:position pos:line="41" pos:column="20"/></name></expr>:<pos:position pos:line="41" pos:column="21"/></case>
      <case pos:line="42" pos:column="7">case <expr><name pos:line="42" pos:column="12">OP_MINQUERY<pos:position pos:line="42" pos:column="23"/></name></expr>:<pos:position pos:line="42" pos:column="24"/></case>
      <while pos:line="43" pos:column="7">while <condition pos:line="43" pos:column="13">(<expr><operator pos:line="43" pos:column="14">(<pos:position pos:line="43" pos:column="15"/></operator><operator pos:line="43" pos:column="15">*<pos:position pos:line="43" pos:column="16"/></operator><name pos:line="43" pos:column="16">code<pos:position pos:line="43" pos:column="20"/></name> <operator pos:line="43" pos:column="21">&amp;<pos:position pos:line="43" pos:column="26"/></operator> <literal type="number" pos:line="43" pos:column="23">0xc0<pos:position pos:line="43" pos:column="27"/></literal><operator pos:line="43" pos:column="27">)<pos:position pos:line="43" pos:column="28"/></operator> <operator pos:line="43" pos:column="29">==<pos:position pos:line="43" pos:column="31"/></operator> <literal type="number" pos:line="43" pos:column="32">0x80<pos:position pos:line="43" pos:column="36"/></literal></expr>)<pos:position pos:line="43" pos:column="37"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="43" pos:column="38">code<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">++<pos:position pos:line="43" pos:column="44"/></operator></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt></block></while>
      <break pos:line="44" pos:column="7">break;<pos:position pos:line="44" pos:column="13"/></break>

      <comment type="block" pos:line="46" pos:column="7">/* XCLASS is used for classes that cannot be represented just by a bit
      map. This includes negated single high-valued characters. The length in
      the table is zero; the actual length is stored in the compiled code. */</comment>

      <case pos:line="50" pos:column="7">case <expr><name pos:line="50" pos:column="12">OP_XCLASS<pos:position pos:line="50" pos:column="21"/></name></expr>:<pos:position pos:line="50" pos:column="22"/></case>
      <expr_stmt><expr><name pos:line="51" pos:column="7">code<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">+=<pos:position pos:line="51" pos:column="14"/></operator> <call><name pos:line="51" pos:column="15">GET<pos:position pos:line="51" pos:column="18"/></name><argument_list pos:line="51" pos:column="18">(<argument><expr><name pos:line="51" pos:column="19">code<pos:position pos:line="51" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="51" pos:column="25">1<pos:position pos:line="51" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="27"/></argument_list></call> <operator pos:line="51" pos:column="28">+<pos:position pos:line="51" pos:column="29"/></operator> <literal type="number" pos:line="51" pos:column="30">1<pos:position pos:line="51" pos:column="31"/></literal></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
      <break pos:line="52" pos:column="7">break;<pos:position pos:line="52" pos:column="13"/></break>
      }<pos:position pos:line="53" pos:column="8"/></block></switch></block></then></if>
<cpp:endif pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">endif<pos:position pos:line="54" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="55" pos:column="6"/></block></else></if>
  }<pos:position pos:line="56" pos:column="4"/></block></for>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
