<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2859_httpd-2.2.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name></type> <name pos:line="2" pos:column="5">initScan<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">ENCODING<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier><modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">encodingTable<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>,
	     <parameter><decl><type><specifier pos:line="3" pos:column="14">const<pos:position pos:line="3" pos:column="19"/></specifier> <name pos:line="3" pos:column="20">INIT_ENCODING<pos:position pos:line="3" pos:column="33"/></name> <modifier pos:line="3" pos:column="34">*<pos:position pos:line="3" pos:column="35"/></modifier></type><name pos:line="3" pos:column="35">enc<pos:position pos:line="3" pos:column="38"/></name></decl></parameter>,
	     <parameter><decl><type><name pos:line="4" pos:column="14">int<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">state<pos:position pos:line="4" pos:column="23"/></name></decl></parameter>,
	     <parameter><decl><type><specifier pos:line="5" pos:column="14">const<pos:position pos:line="5" pos:column="19"/></specifier> <name pos:line="5" pos:column="20">char<pos:position pos:line="5" pos:column="24"/></name> <modifier pos:line="5" pos:column="25">*<pos:position pos:line="5" pos:column="26"/></modifier></type><name pos:line="5" pos:column="26">ptr<pos:position pos:line="5" pos:column="29"/></name></decl></parameter>,
	     <parameter><decl><type><specifier pos:line="6" pos:column="14">const<pos:position pos:line="6" pos:column="19"/></specifier> <name pos:line="6" pos:column="20">char<pos:position pos:line="6" pos:column="24"/></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">end<pos:position pos:line="6" pos:column="29"/></name></decl></parameter>,
	     <parameter><decl><type><specifier pos:line="7" pos:column="14">const<pos:position pos:line="7" pos:column="19"/></specifier> <name pos:line="7" pos:column="20">char<pos:position pos:line="7" pos:column="24"/></name> <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier><modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type><name pos:line="7" pos:column="27">nextTokPtr<pos:position pos:line="7" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="7" pos:column="38"/></parameter_list>
<block pos:line="8" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="9" pos:column="3">const<pos:position pos:line="9" pos:column="8"/></specifier> <name pos:line="9" pos:column="9">ENCODING<pos:position pos:line="9" pos:column="17"/></name> <modifier pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></modifier><modifier pos:line="9" pos:column="19">*<pos:position pos:line="9" pos:column="20"/></modifier></type><name pos:line="9" pos:column="20">encPtr<pos:position pos:line="9" pos:column="26"/></name></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>

  <if pos:line="11" pos:column="3">if <condition pos:line="11" pos:column="6">(<expr><name pos:line="11" pos:column="7">ptr<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">==<pos:position pos:line="11" pos:column="13"/></operator> <name pos:line="11" pos:column="14">end<pos:position pos:line="11" pos:column="17"/></name></expr>)<pos:position pos:line="11" pos:column="18"/></condition><then pos:line="11" pos:column="18">
    <block type="pseudo"><return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">XML_TOK_NONE<pos:position pos:line="12" pos:column="24"/></name></expr>;<pos:position pos:line="12" pos:column="25"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="13" pos:column="3">encPtr<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <name><name pos:line="13" pos:column="12">enc<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">-&gt;<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="17">encPtr<pos:position pos:line="13" pos:column="23"/></name></name></expr>;<pos:position pos:line="13" pos:column="24"/></expr_stmt>
  <if pos:line="14" pos:column="3">if <condition pos:line="14" pos:column="6">(<expr><name pos:line="14" pos:column="7">ptr<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">+<pos:position pos:line="14" pos:column="12"/></operator> <literal type="number" pos:line="14" pos:column="13">1<pos:position pos:line="14" pos:column="14"/></literal> <operator pos:line="14" pos:column="15">==<pos:position pos:line="14" pos:column="17"/></operator> <name pos:line="14" pos:column="18">end<pos:position pos:line="14" pos:column="21"/></name></expr>)<pos:position pos:line="14" pos:column="22"/></condition><then pos:line="14" pos:column="22"> <block pos:line="14" pos:column="23">{
    <comment type="block" pos:line="15" pos:column="5">/* only a single byte available for auto-detection */</comment>
<cpp:ifndef pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">ifndef<pos:position pos:line="16" pos:column="8"/></cpp:directive> <name pos:line="16" pos:column="9">XML_DTD<pos:position pos:line="16" pos:column="16"/></name></cpp:ifndef> <comment type="block" pos:line="16" pos:column="17">/* FIXME */</comment>
    <comment type="block" pos:line="17" pos:column="5">/* a well-formed document entity must have more than one byte */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">state<pos:position pos:line="18" pos:column="14"/></name> <operator pos:line="18" pos:column="15">!=<pos:position pos:line="18" pos:column="17"/></operator> <name pos:line="18" pos:column="18">XML_CONTENT_STATE<pos:position pos:line="18" pos:column="35"/></name></expr>)<pos:position pos:line="18" pos:column="36"/></condition><then pos:line="18" pos:column="36">
      <block type="pseudo"><return pos:line="19" pos:column="7">return <expr><name pos:line="19" pos:column="14">XML_TOK_PARTIAL<pos:position pos:line="19" pos:column="29"/></name></expr>;<pos:position pos:line="19" pos:column="30"/></return></block></then></if>
<cpp:endif pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">endif<pos:position pos:line="20" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="21" pos:column="5">/* so we're parsing an external text entity... */</comment>
    <comment type="block" pos:line="22" pos:column="5">/* if UTF-16 was externally specified, then we need at least 2 bytes */</comment>
    <switch pos:line="23" pos:column="5">switch <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">INIT_ENC_INDEX<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">enc<pos:position pos:line="23" pos:column="31"/></name></expr></argument>)<pos:position pos:line="23" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="33"/></condition> <block pos:line="23" pos:column="34">{
    <case pos:line="24" pos:column="5">case <expr><name pos:line="24" pos:column="10">UTF_16_ENC<pos:position pos:line="24" pos:column="20"/></name></expr>:<pos:position pos:line="24" pos:column="21"/></case>
    <case pos:line="25" pos:column="5">case <expr><name pos:line="25" pos:column="10">UTF_16LE_ENC<pos:position pos:line="25" pos:column="22"/></name></expr>:<pos:position pos:line="25" pos:column="23"/></case>
    <case pos:line="26" pos:column="5">case <expr><name pos:line="26" pos:column="10">UTF_16BE_ENC<pos:position pos:line="26" pos:column="22"/></name></expr>:<pos:position pos:line="26" pos:column="23"/></case>
      <return pos:line="27" pos:column="7">return <expr><name pos:line="27" pos:column="14">XML_TOK_PARTIAL<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></switch>
    <switch pos:line="29" pos:column="5">switch <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">unsigned<pos:position pos:line="29" pos:column="22"/></name> <name pos:line="29" pos:column="23">char<pos:position pos:line="29" pos:column="27"/></name><operator pos:line="29" pos:column="27">)<pos:position pos:line="29" pos:column="28"/></operator><operator pos:line="29" pos:column="28">*<pos:position pos:line="29" pos:column="29"/></operator><name pos:line="29" pos:column="29">ptr<pos:position pos:line="29" pos:column="32"/></name></expr>)<pos:position pos:line="29" pos:column="33"/></condition> <block pos:line="29" pos:column="34">{
    <case pos:line="30" pos:column="5">case <expr><literal type="number" pos:line="30" pos:column="10">0xFE<pos:position pos:line="30" pos:column="14"/></literal></expr>:<pos:position pos:line="30" pos:column="15"/></case>
    <case pos:line="31" pos:column="5">case <expr><literal type="number" pos:line="31" pos:column="10">0xFF<pos:position pos:line="31" pos:column="14"/></literal></expr>:<pos:position pos:line="31" pos:column="15"/></case>
    <case pos:line="32" pos:column="5">case <expr><literal type="number" pos:line="32" pos:column="10">0xEF<pos:position pos:line="32" pos:column="14"/></literal></expr>:<pos:position pos:line="32" pos:column="15"/></case> <comment type="block" pos:line="32" pos:column="16">/* possibly first byte of UTF-8 BOM */</comment>
      <if pos:line="33" pos:column="7">if <condition pos:line="33" pos:column="10">(<expr><call><name pos:line="33" pos:column="11">INIT_ENC_INDEX<pos:position pos:line="33" pos:column="25"/></name><argument_list pos:line="33" pos:column="25">(<argument><expr><name pos:line="33" pos:column="26">enc<pos:position pos:line="33" pos:column="29"/></name></expr></argument>)<pos:position pos:line="33" pos:column="30"/></argument_list></call> <operator pos:line="33" pos:column="31">==<pos:position pos:line="33" pos:column="33"/></operator> <name pos:line="33" pos:column="34">ISO_8859_1_ENC<pos:position pos:line="33" pos:column="48"/></name>
	  <operator pos:line="34" pos:column="11">&amp;&amp;<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="14">state<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">==<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">XML_CONTENT_STATE<pos:position pos:line="34" pos:column="40"/></name></expr>)<pos:position pos:line="34" pos:column="41"/></condition><then pos:line="34" pos:column="41">
	<block type="pseudo"><break pos:line="35" pos:column="9">break;<pos:position pos:line="35" pos:column="15"/></break></block></then></if>
      <comment type="block" pos:line="36" pos:column="7">/* fall through */</comment>
    <case pos:line="37" pos:column="5">case <expr><literal type="number" pos:line="37" pos:column="10">0x00<pos:position pos:line="37" pos:column="14"/></literal></expr>:<pos:position pos:line="37" pos:column="15"/></case>
    <case pos:line="38" pos:column="5">case <expr><literal type="number" pos:line="38" pos:column="10">0x3C<pos:position pos:line="38" pos:column="14"/></literal></expr>:<pos:position pos:line="38" pos:column="15"/></case>
      <return pos:line="39" pos:column="7">return <expr><name pos:line="39" pos:column="14">XML_TOK_PARTIAL<pos:position pos:line="39" pos:column="29"/></name></expr>;<pos:position pos:line="39" pos:column="30"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></switch>
  }<pos:position pos:line="41" pos:column="4"/></block></then>
  <else pos:line="42" pos:column="3">else <block pos:line="42" pos:column="8">{
    <switch pos:line="43" pos:column="5">switch <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">(<pos:position pos:line="43" pos:column="14"/></operator><operator pos:line="43" pos:column="14">(<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">unsigned<pos:position pos:line="43" pos:column="23"/></name> <name pos:line="43" pos:column="24">char<pos:position pos:line="43" pos:column="28"/></name><operator pos:line="43" pos:column="28">)<pos:position pos:line="43" pos:column="29"/></operator><name><name pos:line="43" pos:column="29">ptr<pos:position pos:line="43" pos:column="32"/></name><index pos:line="43" pos:column="32">[<expr><literal type="number" pos:line="43" pos:column="33">0<pos:position pos:line="43" pos:column="34"/></literal></expr>]<pos:position pos:line="43" pos:column="35"/></index></name> <operator pos:line="43" pos:column="36">&lt;&lt;<pos:position pos:line="43" pos:column="44"/></operator> <literal type="number" pos:line="43" pos:column="39">8<pos:position pos:line="43" pos:column="40"/></literal><operator pos:line="43" pos:column="40">)<pos:position pos:line="43" pos:column="41"/></operator> <operator pos:line="43" pos:column="42">|<pos:position pos:line="43" pos:column="43"/></operator> <operator pos:line="43" pos:column="44">(<pos:position pos:line="43" pos:column="45"/></operator><name pos:line="43" pos:column="45">unsigned<pos:position pos:line="43" pos:column="53"/></name> <name pos:line="43" pos:column="54">char<pos:position pos:line="43" pos:column="58"/></name><operator pos:line="43" pos:column="58">)<pos:position pos:line="43" pos:column="59"/></operator><name><name pos:line="43" pos:column="59">ptr<pos:position pos:line="43" pos:column="62"/></name><index pos:line="43" pos:column="62">[<expr><literal type="number" pos:line="43" pos:column="63">1<pos:position pos:line="43" pos:column="64"/></literal></expr>]<pos:position pos:line="43" pos:column="65"/></index></name></expr>)<pos:position pos:line="43" pos:column="66"/></condition> <block pos:line="43" pos:column="67">{
    <case pos:line="44" pos:column="5">case <expr><literal type="number" pos:line="44" pos:column="10">0xFEFF<pos:position pos:line="44" pos:column="16"/></literal></expr>:<pos:position pos:line="44" pos:column="17"/></case>
      <if pos:line="45" pos:column="7">if <condition pos:line="45" pos:column="10">(<expr><call><name pos:line="45" pos:column="11">INIT_ENC_INDEX<pos:position pos:line="45" pos:column="25"/></name><argument_list pos:line="45" pos:column="25">(<argument><expr><name pos:line="45" pos:column="26">enc<pos:position pos:line="45" pos:column="29"/></name></expr></argument>)<pos:position pos:line="45" pos:column="30"/></argument_list></call> <operator pos:line="45" pos:column="31">==<pos:position pos:line="45" pos:column="33"/></operator> <name pos:line="45" pos:column="34">ISO_8859_1_ENC<pos:position pos:line="45" pos:column="48"/></name>
	  <operator pos:line="46" pos:column="11">&amp;&amp;<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="14">state<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">==<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">XML_CONTENT_STATE<pos:position pos:line="46" pos:column="40"/></name></expr>)<pos:position pos:line="46" pos:column="41"/></condition><then pos:line="46" pos:column="41">
	<block type="pseudo"><break pos:line="47" pos:column="9">break;<pos:position pos:line="47" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><operator pos:line="48" pos:column="7">*<pos:position pos:line="48" pos:column="8"/></operator><name pos:line="48" pos:column="8">nextTokPtr<pos:position pos:line="48" pos:column="18"/></name> <operator pos:line="48" pos:column="19">=<pos:position pos:line="48" pos:column="20"/></operator> <name pos:line="48" pos:column="21">ptr<pos:position pos:line="48" pos:column="24"/></name> <operator pos:line="48" pos:column="25">+<pos:position pos:line="48" pos:column="26"/></operator> <literal type="number" pos:line="48" pos:column="27">2<pos:position pos:line="48" pos:column="28"/></literal></expr>;<pos:position pos:line="48" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="49" pos:column="7">*<pos:position pos:line="49" pos:column="8"/></operator><name pos:line="49" pos:column="8">encPtr<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <name><name pos:line="49" pos:column="17">encodingTable<pos:position pos:line="49" pos:column="30"/></name><index pos:line="49" pos:column="30">[<expr><name pos:line="49" pos:column="31">UTF_16BE_ENC<pos:position pos:line="49" pos:column="43"/></name></expr>]<pos:position pos:line="49" pos:column="44"/></index></name></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt>
      <return pos:line="50" pos:column="7">return <expr><name pos:line="50" pos:column="14">XML_TOK_BOM<pos:position pos:line="50" pos:column="25"/></name></expr>;<pos:position pos:line="50" pos:column="26"/></return>
    <comment type="block" pos:line="51" pos:column="5">/* 00 3C is handled in the default case */</comment>
    <case pos:line="52" pos:column="5">case <expr><literal type="number" pos:line="52" pos:column="10">0x3C00<pos:position pos:line="52" pos:column="16"/></literal></expr>:<pos:position pos:line="52" pos:column="17"/></case>
      <if pos:line="53" pos:column="7">if <condition pos:line="53" pos:column="10">(<expr><operator pos:line="53" pos:column="11">(<pos:position pos:line="53" pos:column="12"/></operator><call><name pos:line="53" pos:column="12">INIT_ENC_INDEX<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">enc<pos:position pos:line="53" pos:column="30"/></name></expr></argument>)<pos:position pos:line="53" pos:column="31"/></argument_list></call> <operator pos:line="53" pos:column="32">==<pos:position pos:line="53" pos:column="34"/></operator> <name pos:line="53" pos:column="35">UTF_16BE_ENC<pos:position pos:line="53" pos:column="47"/></name>
	   <operator pos:line="54" pos:column="12">||<pos:position pos:line="54" pos:column="14"/></operator> <call><name pos:line="54" pos:column="15">INIT_ENC_INDEX<pos:position pos:line="54" pos:column="29"/></name><argument_list pos:line="54" pos:column="29">(<argument><expr><name pos:line="54" pos:column="30">enc<pos:position pos:line="54" pos:column="33"/></name></expr></argument>)<pos:position pos:line="54" pos:column="34"/></argument_list></call> <operator pos:line="54" pos:column="35">==<pos:position pos:line="54" pos:column="37"/></operator> <name pos:line="54" pos:column="38">UTF_16_ENC<pos:position pos:line="54" pos:column="48"/></name><operator pos:line="54" pos:column="48">)<pos:position pos:line="54" pos:column="49"/></operator>
	  <operator pos:line="55" pos:column="11">&amp;&amp;<pos:position pos:line="55" pos:column="21"/></operator> <name pos:line="55" pos:column="14">state<pos:position pos:line="55" pos:column="19"/></name> <operator pos:line="55" pos:column="20">==<pos:position pos:line="55" pos:column="22"/></operator> <name pos:line="55" pos:column="23">XML_CONTENT_STATE<pos:position pos:line="55" pos:column="40"/></name></expr>)<pos:position pos:line="55" pos:column="41"/></condition><then pos:line="55" pos:column="41">
	<block type="pseudo"><break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><operator pos:line="57" pos:column="7">*<pos:position pos:line="57" pos:column="8"/></operator><name pos:line="57" pos:column="8">encPtr<pos:position pos:line="57" pos:column="14"/></name> <operator pos:line="57" pos:column="15">=<pos:position pos:line="57" pos:column="16"/></operator> <name><name pos:line="57" pos:column="17">encodingTable<pos:position pos:line="57" pos:column="30"/></name><index pos:line="57" pos:column="30">[<expr><name pos:line="57" pos:column="31">UTF_16LE_ENC<pos:position pos:line="57" pos:column="43"/></name></expr>]<pos:position pos:line="57" pos:column="44"/></index></name></expr>;<pos:position pos:line="57" pos:column="45"/></expr_stmt>
      <return pos:line="58" pos:column="7">return <expr><call><name pos:line="58" pos:column="14">XmlTok<pos:position pos:line="58" pos:column="20"/></name><argument_list pos:line="58" pos:column="20">(<argument><expr><operator pos:line="58" pos:column="21">*<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="22">encPtr<pos:position pos:line="58" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="30">state<pos:position pos:line="58" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="37">ptr<pos:position pos:line="58" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="42">end<pos:position pos:line="58" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="47">nextTokPtr<pos:position pos:line="58" pos:column="57"/></name></expr></argument>)<pos:position pos:line="58" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="59"/></return>
    <case pos:line="59" pos:column="5">case <expr><literal type="number" pos:line="59" pos:column="10">0xFFFE<pos:position pos:line="59" pos:column="16"/></literal></expr>:<pos:position pos:line="59" pos:column="17"/></case>
      <if pos:line="60" pos:column="7">if <condition pos:line="60" pos:column="10">(<expr><call><name pos:line="60" pos:column="11">INIT_ENC_INDEX<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">enc<pos:position pos:line="60" pos:column="29"/></name></expr></argument>)<pos:position pos:line="60" pos:column="30"/></argument_list></call> <operator pos:line="60" pos:column="31">==<pos:position pos:line="60" pos:column="33"/></operator> <name pos:line="60" pos:column="34">ISO_8859_1_ENC<pos:position pos:line="60" pos:column="48"/></name>
	  <operator pos:line="61" pos:column="11">&amp;&amp;<pos:position pos:line="61" pos:column="21"/></operator> <name pos:line="61" pos:column="14">state<pos:position pos:line="61" pos:column="19"/></name> <operator pos:line="61" pos:column="20">==<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="23">XML_CONTENT_STATE<pos:position pos:line="61" pos:column="40"/></name></expr>)<pos:position pos:line="61" pos:column="41"/></condition><then pos:line="61" pos:column="41">
	<block type="pseudo"><break pos:line="62" pos:column="9">break;<pos:position pos:line="62" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><operator pos:line="63" pos:column="7">*<pos:position pos:line="63" pos:column="8"/></operator><name pos:line="63" pos:column="8">nextTokPtr<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">=<pos:position pos:line="63" pos:column="20"/></operator> <name pos:line="63" pos:column="21">ptr<pos:position pos:line="63" pos:column="24"/></name> <operator pos:line="63" pos:column="25">+<pos:position pos:line="63" pos:column="26"/></operator> <literal type="number" pos:line="63" pos:column="27">2<pos:position pos:line="63" pos:column="28"/></literal></expr>;<pos:position pos:line="63" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="64" pos:column="7">*<pos:position pos:line="64" pos:column="8"/></operator><name pos:line="64" pos:column="8">encPtr<pos:position pos:line="64" pos:column="14"/></name> <operator pos:line="64" pos:column="15">=<pos:position pos:line="64" pos:column="16"/></operator> <name><name pos:line="64" pos:column="17">encodingTable<pos:position pos:line="64" pos:column="30"/></name><index pos:line="64" pos:column="30">[<expr><name pos:line="64" pos:column="31">UTF_16LE_ENC<pos:position pos:line="64" pos:column="43"/></name></expr>]<pos:position pos:line="64" pos:column="44"/></index></name></expr>;<pos:position pos:line="64" pos:column="45"/></expr_stmt>
      <return pos:line="65" pos:column="7">return <expr><name pos:line="65" pos:column="14">XML_TOK_BOM<pos:position pos:line="65" pos:column="25"/></name></expr>;<pos:position pos:line="65" pos:column="26"/></return>
    <case pos:line="66" pos:column="5">case <expr><literal type="number" pos:line="66" pos:column="10">0xEFBB<pos:position pos:line="66" pos:column="16"/></literal></expr>:<pos:position pos:line="66" pos:column="17"/></case>
      <comment type="block" pos:line="67" pos:column="7">/* Maybe a UTF-8 BOM (EF BB BF) */</comment>
      <comment type="block" pos:line="68" pos:column="7">/* If there's an explicitly specified (external) encoding
         of ISO-8859-1 or some flavour of UTF-16
         and this is an external text entity,
	 don't look for the BOM,
         because it might be a legal data. */</comment>
      <if pos:line="73" pos:column="7">if <condition pos:line="73" pos:column="10">(<expr><name pos:line="73" pos:column="11">state<pos:position pos:line="73" pos:column="16"/></name> <operator pos:line="73" pos:column="17">==<pos:position pos:line="73" pos:column="19"/></operator> <name pos:line="73" pos:column="20">XML_CONTENT_STATE<pos:position pos:line="73" pos:column="37"/></name></expr>)<pos:position pos:line="73" pos:column="38"/></condition><then pos:line="73" pos:column="38"> <block pos:line="73" pos:column="39">{
	<decl_stmt><decl><type><name pos:line="74" pos:column="9">int<pos:position pos:line="74" pos:column="12"/></name></type> <name pos:line="74" pos:column="13">e<pos:position pos:line="74" pos:column="14"/></name> <init pos:line="74" pos:column="15">= <expr><call><name pos:line="74" pos:column="17">INIT_ENC_INDEX<pos:position pos:line="74" pos:column="31"/></name><argument_list pos:line="74" pos:column="31">(<argument><expr><name pos:line="74" pos:column="32">enc<pos:position pos:line="74" pos:column="35"/></name></expr></argument>)<pos:position pos:line="74" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="74" pos:column="37"/></decl_stmt>
	<if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">e<pos:position pos:line="75" pos:column="14"/></name> <operator pos:line="75" pos:column="15">==<pos:position pos:line="75" pos:column="17"/></operator> <name pos:line="75" pos:column="18">ISO_8859_1_ENC<pos:position pos:line="75" pos:column="32"/></name> <operator pos:line="75" pos:column="33">||<pos:position pos:line="75" pos:column="35"/></operator> <name pos:line="75" pos:column="36">e<pos:position pos:line="75" pos:column="37"/></name> <operator pos:line="75" pos:column="38">==<pos:position pos:line="75" pos:column="40"/></operator> <name pos:line="75" pos:column="41">UTF_16BE_ENC<pos:position pos:line="75" pos:column="53"/></name> <operator pos:line="75" pos:column="54">||<pos:position pos:line="75" pos:column="56"/></operator> <name pos:line="75" pos:column="57">e<pos:position pos:line="75" pos:column="58"/></name> <operator pos:line="75" pos:column="59">==<pos:position pos:line="75" pos:column="61"/></operator> <name pos:line="75" pos:column="62">UTF_16LE_ENC<pos:position pos:line="75" pos:column="74"/></name> <operator pos:line="75" pos:column="75">||<pos:position pos:line="75" pos:column="77"/></operator> <name pos:line="75" pos:column="78">e<pos:position pos:line="75" pos:column="79"/></name> <operator pos:line="75" pos:column="80">==<pos:position pos:line="75" pos:column="82"/></operator> <name pos:line="75" pos:column="83">UTF_16_ENC<pos:position pos:line="75" pos:column="93"/></name></expr>)<pos:position pos:line="75" pos:column="94"/></condition><then pos:line="75" pos:column="94">
	  <block type="pseudo"><break pos:line="76" pos:column="11">break;<pos:position pos:line="76" pos:column="17"/></break></block></then></if>
      }<pos:position pos:line="77" pos:column="8"/></block></then></if>
      <if pos:line="78" pos:column="7">if <condition pos:line="78" pos:column="10">(<expr><name pos:line="78" pos:column="11">ptr<pos:position pos:line="78" pos:column="14"/></name> <operator pos:line="78" pos:column="15">+<pos:position pos:line="78" pos:column="16"/></operator> <literal type="number" pos:line="78" pos:column="17">2<pos:position pos:line="78" pos:column="18"/></literal> <operator pos:line="78" pos:column="19">==<pos:position pos:line="78" pos:column="21"/></operator> <name pos:line="78" pos:column="22">end<pos:position pos:line="78" pos:column="25"/></name></expr>)<pos:position pos:line="78" pos:column="26"/></condition><then pos:line="78" pos:column="26">
	<block type="pseudo"><return pos:line="79" pos:column="9">return <expr><name pos:line="79" pos:column="16">XML_TOK_PARTIAL<pos:position pos:line="79" pos:column="31"/></name></expr>;<pos:position pos:line="79" pos:column="32"/></return></block></then></if>
      <if pos:line="80" pos:column="7">if <condition pos:line="80" pos:column="10">(<expr><operator pos:line="80" pos:column="11">(<pos:position pos:line="80" pos:column="12"/></operator><name pos:line="80" pos:column="12">unsigned<pos:position pos:line="80" pos:column="20"/></name> <name pos:line="80" pos:column="21">char<pos:position pos:line="80" pos:column="25"/></name><operator pos:line="80" pos:column="25">)<pos:position pos:line="80" pos:column="26"/></operator><name><name pos:line="80" pos:column="26">ptr<pos:position pos:line="80" pos:column="29"/></name><index pos:line="80" pos:column="29">[<expr><literal type="number" pos:line="80" pos:column="30">2<pos:position pos:line="80" pos:column="31"/></literal></expr>]<pos:position pos:line="80" pos:column="32"/></index></name> <operator pos:line="80" pos:column="33">==<pos:position pos:line="80" pos:column="35"/></operator> <literal type="number" pos:line="80" pos:column="36">0xBF<pos:position pos:line="80" pos:column="40"/></literal></expr>)<pos:position pos:line="80" pos:column="41"/></condition><then pos:line="80" pos:column="41"> <block pos:line="80" pos:column="42">{
	<expr_stmt><expr><operator pos:line="81" pos:column="9">*<pos:position pos:line="81" pos:column="10"/></operator><name pos:line="81" pos:column="10">nextTokPtr<pos:position pos:line="81" pos:column="20"/></name> <operator pos:line="81" pos:column="21">=<pos:position pos:line="81" pos:column="22"/></operator> <name pos:line="81" pos:column="23">ptr<pos:position pos:line="81" pos:column="26"/></name> <operator pos:line="81" pos:column="27">+<pos:position pos:line="81" pos:column="28"/></operator> <literal type="number" pos:line="81" pos:column="29">3<pos:position pos:line="81" pos:column="30"/></literal></expr>;<pos:position pos:line="81" pos:column="31"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="82" pos:column="9">*<pos:position pos:line="82" pos:column="10"/></operator><name pos:line="82" pos:column="10">encPtr<pos:position pos:line="82" pos:column="16"/></name> <operator pos:line="82" pos:column="17">=<pos:position pos:line="82" pos:column="18"/></operator> <name><name pos:line="82" pos:column="19">encodingTable<pos:position pos:line="82" pos:column="32"/></name><index pos:line="82" pos:column="32">[<expr><name pos:line="82" pos:column="33">UTF_8_ENC<pos:position pos:line="82" pos:column="42"/></name></expr>]<pos:position pos:line="82" pos:column="43"/></index></name></expr>;<pos:position pos:line="82" pos:column="44"/></expr_stmt>
	<return pos:line="83" pos:column="9">return <expr><name pos:line="83" pos:column="16">XML_TOK_BOM<pos:position pos:line="83" pos:column="27"/></name></expr>;<pos:position pos:line="83" pos:column="28"/></return>
      }<pos:position pos:line="84" pos:column="8"/></block></then></if>
      <break pos:line="85" pos:column="7">break;<pos:position pos:line="85" pos:column="13"/></break>
    <default pos:line="86" pos:column="5">default:<pos:position pos:line="86" pos:column="13"/></default>
      <if pos:line="87" pos:column="7">if <condition pos:line="87" pos:column="10">(<expr><name><name pos:line="87" pos:column="11">ptr<pos:position pos:line="87" pos:column="14"/></name><index pos:line="87" pos:column="14">[<expr><literal type="number" pos:line="87" pos:column="15">0<pos:position pos:line="87" pos:column="16"/></literal></expr>]<pos:position pos:line="87" pos:column="17"/></index></name> <operator pos:line="87" pos:column="18">==<pos:position pos:line="87" pos:column="20"/></operator> <literal type="char" pos:line="87" pos:column="21">'\0'<pos:position pos:line="87" pos:column="25"/></literal></expr>)<pos:position pos:line="87" pos:column="26"/></condition><then pos:line="87" pos:column="26"> <block pos:line="87" pos:column="27">{
	<comment type="block" pos:line="88" pos:column="9">/* 0 isn't a legal data character. Furthermore a document entity can only
	   start with ASCII characters.  So the only way this can fail to be big-endian
	   UTF-16 if it it's an external parsed general entity that's labelled as
	   UTF-16LE. */</comment>
	<if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name pos:line="92" pos:column="13">state<pos:position pos:line="92" pos:column="18"/></name> <operator pos:line="92" pos:column="19">==<pos:position pos:line="92" pos:column="21"/></operator> <name pos:line="92" pos:column="22">XML_CONTENT_STATE<pos:position pos:line="92" pos:column="39"/></name> <operator pos:line="92" pos:column="40">&amp;&amp;<pos:position pos:line="92" pos:column="50"/></operator> <call><name pos:line="92" pos:column="43">INIT_ENC_INDEX<pos:position pos:line="92" pos:column="57"/></name><argument_list pos:line="92" pos:column="57">(<argument><expr><name pos:line="92" pos:column="58">enc<pos:position pos:line="92" pos:column="61"/></name></expr></argument>)<pos:position pos:line="92" pos:column="62"/></argument_list></call> <operator pos:line="92" pos:column="63">==<pos:position pos:line="92" pos:column="65"/></operator> <name pos:line="92" pos:column="66">UTF_16LE_ENC<pos:position pos:line="92" pos:column="78"/></name></expr>)<pos:position pos:line="92" pos:column="79"/></condition><then pos:line="92" pos:column="79">
	  <block type="pseudo"><break pos:line="93" pos:column="11">break;<pos:position pos:line="93" pos:column="17"/></break></block></then></if>
	<expr_stmt><expr><operator pos:line="94" pos:column="9">*<pos:position pos:line="94" pos:column="10"/></operator><name pos:line="94" pos:column="10">encPtr<pos:position pos:line="94" pos:column="16"/></name> <operator pos:line="94" pos:column="17">=<pos:position pos:line="94" pos:column="18"/></operator> <name><name pos:line="94" pos:column="19">encodingTable<pos:position pos:line="94" pos:column="32"/></name><index pos:line="94" pos:column="32">[<expr><name pos:line="94" pos:column="33">UTF_16BE_ENC<pos:position pos:line="94" pos:column="45"/></name></expr>]<pos:position pos:line="94" pos:column="46"/></index></name></expr>;<pos:position pos:line="94" pos:column="47"/></expr_stmt>
	<return pos:line="95" pos:column="9">return <expr><call><name pos:line="95" pos:column="16">XmlTok<pos:position pos:line="95" pos:column="22"/></name><argument_list pos:line="95" pos:column="22">(<argument><expr><operator pos:line="95" pos:column="23">*<pos:position pos:line="95" pos:column="24"/></operator><name pos:line="95" pos:column="24">encPtr<pos:position pos:line="95" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="32">state<pos:position pos:line="95" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="39">ptr<pos:position pos:line="95" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="44">end<pos:position pos:line="95" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="49">nextTokPtr<pos:position pos:line="95" pos:column="59"/></name></expr></argument>)<pos:position pos:line="95" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="61"/></return>
      }<pos:position pos:line="96" pos:column="8"/></block></then>
      <elseif pos:line="97" pos:column="7">else <if pos:line="97" pos:column="12">if <condition pos:line="97" pos:column="15">(<expr><name><name pos:line="97" pos:column="16">ptr<pos:position pos:line="97" pos:column="19"/></name><index pos:line="97" pos:column="19">[<expr><literal type="number" pos:line="97" pos:column="20">1<pos:position pos:line="97" pos:column="21"/></literal></expr>]<pos:position pos:line="97" pos:column="22"/></index></name> <operator pos:line="97" pos:column="23">==<pos:position pos:line="97" pos:column="25"/></operator> <literal type="char" pos:line="97" pos:column="26">'\0'<pos:position pos:line="97" pos:column="30"/></literal></expr>)<pos:position pos:line="97" pos:column="31"/></condition><then pos:line="97" pos:column="31"> <block pos:line="97" pos:column="32">{
	<comment type="block" pos:line="98" pos:column="9">/* We could recover here in the case:
	    - parsing an external entity
	    - second byte is 0
	    - no externally specified encoding
	    - no encoding declaration
	   by assuming UTF-16LE.  But we don't, because this would mean when
	   presented just with a single byte, we couldn't reliably determine
	   whether we needed further bytes. */</comment>
	<if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><name pos:line="106" pos:column="13">state<pos:position pos:line="106" pos:column="18"/></name> <operator pos:line="106" pos:column="19">==<pos:position pos:line="106" pos:column="21"/></operator> <name pos:line="106" pos:column="22">XML_CONTENT_STATE<pos:position pos:line="106" pos:column="39"/></name></expr>)<pos:position pos:line="106" pos:column="40"/></condition><then pos:line="106" pos:column="40">
	  <block type="pseudo"><break pos:line="107" pos:column="11">break;<pos:position pos:line="107" pos:column="17"/></break></block></then></if>
	<expr_stmt><expr><operator pos:line="108" pos:column="9">*<pos:position pos:line="108" pos:column="10"/></operator><name pos:line="108" pos:column="10">encPtr<pos:position pos:line="108" pos:column="16"/></name> <operator pos:line="108" pos:column="17">=<pos:position pos:line="108" pos:column="18"/></operator> <name><name pos:line="108" pos:column="19">encodingTable<pos:position pos:line="108" pos:column="32"/></name><index pos:line="108" pos:column="32">[<expr><name pos:line="108" pos:column="33">UTF_16LE_ENC<pos:position pos:line="108" pos:column="45"/></name></expr>]<pos:position pos:line="108" pos:column="46"/></index></name></expr>;<pos:position pos:line="108" pos:column="47"/></expr_stmt>
	<return pos:line="109" pos:column="9">return <expr><call><name pos:line="109" pos:column="16">XmlTok<pos:position pos:line="109" pos:column="22"/></name><argument_list pos:line="109" pos:column="22">(<argument><expr><operator pos:line="109" pos:column="23">*<pos:position pos:line="109" pos:column="24"/></operator><name pos:line="109" pos:column="24">encPtr<pos:position pos:line="109" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="32">state<pos:position pos:line="109" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="39">ptr<pos:position pos:line="109" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="44">end<pos:position pos:line="109" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="49">nextTokPtr<pos:position pos:line="109" pos:column="59"/></name></expr></argument>)<pos:position pos:line="109" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="61"/></return>
      }<pos:position pos:line="110" pos:column="8"/></block></then></if></elseif></if>
      <break pos:line="111" pos:column="7">break;<pos:position pos:line="111" pos:column="13"/></break>
    }<pos:position pos:line="112" pos:column="6"/></block></switch>
  }<pos:position pos:line="113" pos:column="4"/></block></else></if>
  <expr_stmt><expr><operator pos:line="114" pos:column="3">*<pos:position pos:line="114" pos:column="4"/></operator><name pos:line="114" pos:column="4">encPtr<pos:position pos:line="114" pos:column="10"/></name> <operator pos:line="114" pos:column="11">=<pos:position pos:line="114" pos:column="12"/></operator> <name><name pos:line="114" pos:column="13">encodingTable<pos:position pos:line="114" pos:column="26"/></name><index pos:line="114" pos:column="26">[<expr><call><name pos:line="114" pos:column="27">INIT_ENC_INDEX<pos:position pos:line="114" pos:column="41"/></name><argument_list pos:line="114" pos:column="41">(<argument><expr><name pos:line="114" pos:column="42">enc<pos:position pos:line="114" pos:column="45"/></name></expr></argument>)<pos:position pos:line="114" pos:column="46"/></argument_list></call></expr>]<pos:position pos:line="114" pos:column="47"/></index></name></expr>;<pos:position pos:line="114" pos:column="48"/></expr_stmt>
  <return pos:line="115" pos:column="3">return <expr><call><name pos:line="115" pos:column="10">XmlTok<pos:position pos:line="115" pos:column="16"/></name><argument_list pos:line="115" pos:column="16">(<argument><expr><operator pos:line="115" pos:column="17">*<pos:position pos:line="115" pos:column="18"/></operator><name pos:line="115" pos:column="18">encPtr<pos:position pos:line="115" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="26">state<pos:position pos:line="115" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="33">ptr<pos:position pos:line="115" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="38">end<pos:position pos:line="115" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="43">nextTokPtr<pos:position pos:line="115" pos:column="53"/></name></expr></argument>)<pos:position pos:line="115" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="55"/></return>
}<pos:position pos:line="116" pos:column="2"/></block></function></unit>
