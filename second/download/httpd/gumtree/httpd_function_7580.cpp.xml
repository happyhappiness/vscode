<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_7580.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lua_table_set<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">lua_State<pos:position pos:line="1" pos:column="35"/></name> <modifier pos:line="1" pos:column="36">*<pos:position pos:line="1" pos:column="37"/></modifier></type><name pos:line="1" pos:column="37">L<pos:position pos:line="1" pos:column="38"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="39"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">req_table_t<pos:position pos:line="3" pos:column="16"/></name>    <modifier pos:line="3" pos:column="20">*<pos:position pos:line="3" pos:column="21"/></modifier></type><name pos:line="3" pos:column="21">t<pos:position pos:line="3" pos:column="22"/></name> <init pos:line="3" pos:column="23">= <expr><call><name pos:line="3" pos:column="25">ap_lua_check_apr_table<pos:position pos:line="3" pos:column="47"/></name><argument_list pos:line="3" pos:column="47">(<argument><expr><name pos:line="3" pos:column="48">L<pos:position pos:line="3" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="3" pos:column="51">1<pos:position pos:line="3" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="53"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="54"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name>     <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">key<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><call><name pos:line="4" pos:column="27">luaL_checkstring<pos:position pos:line="4" pos:column="43"/></name><argument_list pos:line="4" pos:column="43">(<argument><expr><name pos:line="4" pos:column="44">L<pos:position pos:line="4" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="4" pos:column="47">2<pos:position pos:line="4" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name>     <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">val<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><call><name pos:line="5" pos:column="27">luaL_checkstring<pos:position pos:line="5" pos:column="43"/></name><argument_list pos:line="5" pos:column="43">(<argument><expr><name pos:line="5" pos:column="44">L<pos:position pos:line="5" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="5" pos:column="47">3<pos:position pos:line="5" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>
    <comment type="block" pos:line="6" pos:column="5">/* Unless it's the 'notes' table, check for newline chars */</comment>
    <comment type="block" pos:line="7" pos:column="5">/* t-&gt;r will be NULL in case of the connection notes, but since 
       we aren't going to check anything called 'notes', we can safely 
       disregard checking whether t-&gt;r is defined.
    */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">strcmp<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><name><name pos:line="11" pos:column="16">t<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">-&gt;<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="19">n<pos:position pos:line="11" pos:column="20"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="22">"notes"<pos:position pos:line="11" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="30"/></argument_list></call> <operator pos:line="11" pos:column="31">&amp;&amp;<pos:position pos:line="11" pos:column="41"/></operator> <call><name pos:line="11" pos:column="34">ap_strchr_c<pos:position pos:line="11" pos:column="45"/></name><argument_list pos:line="11" pos:column="45">(<argument><expr><name pos:line="11" pos:column="46">val<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="11" pos:column="51">'\n'<pos:position pos:line="11" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="57"/></condition><then pos:line="11" pos:column="57"> <block pos:line="11" pos:column="58">{
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">char<pos:position pos:line="12" pos:column="13"/></name> <modifier pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></modifier></type><name pos:line="12" pos:column="15">badchar<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">char<pos:position pos:line="13" pos:column="13"/></name> <modifier pos:line="13" pos:column="14">*<pos:position pos:line="13" pos:column="15"/></modifier></type><name pos:line="13" pos:column="15">replacement<pos:position pos:line="13" pos:column="26"/></name> <init pos:line="13" pos:column="27">= <expr><call><name pos:line="13" pos:column="29">apr_pstrdup<pos:position pos:line="13" pos:column="40"/></name><argument_list pos:line="13" pos:column="40">(<argument><expr><name><name pos:line="13" pos:column="41">t<pos:position pos:line="13" pos:column="42"/></name><operator pos:line="13" pos:column="42">-&gt;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="44">r<pos:position pos:line="13" pos:column="45"/></name><operator pos:line="13" pos:column="45">-&gt;<pos:position pos:line="13" pos:column="50"/></operator><name pos:line="13" pos:column="47">pool<pos:position pos:line="13" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="53">val<pos:position pos:line="13" pos:column="56"/></name></expr></argument>)<pos:position pos:line="13" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="58"/></decl_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">badchar<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">replacement<pos:position pos:line="14" pos:column="30"/></name></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>
        <while pos:line="15" pos:column="9">while <condition pos:line="15" pos:column="15">( <expr><operator pos:line="15" pos:column="17">(<pos:position pos:line="15" pos:column="18"/></operator><name pos:line="15" pos:column="18">badchar<pos:position pos:line="15" pos:column="25"/></name> <operator pos:line="15" pos:column="26">=<pos:position pos:line="15" pos:column="27"/></operator> <call><name pos:line="15" pos:column="28">ap_strchr<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">badchar<pos:position pos:line="15" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="15" pos:column="47">'\n'<pos:position pos:line="15" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="52"/></argument_list></call><operator pos:line="15" pos:column="52">)<pos:position pos:line="15" pos:column="53"/></operator></expr> )<pos:position pos:line="15" pos:column="55"/></condition> <block pos:line="15" pos:column="56">{
            <expr_stmt><expr><operator pos:line="16" pos:column="13">*<pos:position pos:line="16" pos:column="14"/></operator><name pos:line="16" pos:column="14">badchar<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <literal type="char" pos:line="16" pos:column="24">' '<pos:position pos:line="16" pos:column="27"/></literal></expr>;<pos:position pos:line="16" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="17" pos:column="10"/></block></while>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">ap_log_rerror<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name pos:line="18" pos:column="23">APLOG_MARK<pos:position pos:line="18" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="35">APLOG_WARNING<pos:position pos:line="18" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="50">0<pos:position pos:line="18" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="53">t<pos:position pos:line="18" pos:column="54"/></name><operator pos:line="18" pos:column="54">-&gt;<pos:position pos:line="18" pos:column="59"/></operator><name pos:line="18" pos:column="56">r<pos:position pos:line="18" pos:column="57"/></name></name></expr></argument>, 
                <argument><expr><call><name pos:line="19" pos:column="17">APLOGNO<pos:position pos:line="19" pos:column="24"/></name><argument_list pos:line="19" pos:column="24">(<argument><expr><literal type="number" pos:line="19" pos:column="25">02614<pos:position pos:line="19" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="31"/></argument_list></call> <literal type="string" pos:line="19" pos:column="32">"mod_lua: Value for '%s' in table '%s' contains newline!"<pos:position pos:line="19" pos:column="89"/></literal></expr></argument>,
                  <argument><expr><name pos:line="20" pos:column="19">key<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="24">t<pos:position pos:line="20" pos:column="25"/></name><operator pos:line="20" pos:column="25">-&gt;<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="27">n<pos:position pos:line="20" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="21" pos:column="9">apr_table_set<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name><name pos:line="21" pos:column="23">t<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">-&gt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">t<pos:position pos:line="21" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="29">key<pos:position pos:line="21" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="34">replacement<pos:position pos:line="21" pos:column="45"/></name></expr></argument>)<pos:position pos:line="21" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then>
    <else pos:line="23" pos:column="5">else <block pos:line="23" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">apr_table_set<pos:position pos:line="24" pos:column="22"/></name><argument_list pos:line="24" pos:column="22">(<argument><expr><name><name pos:line="24" pos:column="23">t<pos:position pos:line="24" pos:column="24"/></name><operator pos:line="24" pos:column="24">-&gt;<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="26">t<pos:position pos:line="24" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="29">key<pos:position pos:line="24" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="34">val<pos:position pos:line="24" pos:column="37"/></name></expr></argument>)<pos:position pos:line="24" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></else></if>
    <return pos:line="26" pos:column="5">return <expr><literal type="number" pos:line="26" pos:column="12">0<pos:position pos:line="26" pos:column="13"/></literal></expr>;<pos:position pos:line="26" pos:column="14"/></return>
}<pos:position pos:line="27" pos:column="2"/></block></function></unit>
