<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1203_httpd-2.4.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">lua_websocket_read<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">lua_State<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">L<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list> 
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_socket_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier></type><name pos:line="3" pos:column="19">sock<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">n<pos:position pos:line="5" pos:column="10"/></name> <init pos:line="5" pos:column="11">= <expr><literal type="number" pos:line="5" pos:column="13">0<pos:position pos:line="5" pos:column="14"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">len<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">1<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">plen<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">short<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">payload_short<pos:position pos:line="8" pos:column="33"/></name> <init pos:line="8" pos:column="34">= <expr><literal type="number" pos:line="8" pos:column="36">0<pos:position pos:line="8" pos:column="37"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_uint64_t<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">payload_long<pos:position pos:line="9" pos:column="30"/></name> <init pos:line="9" pos:column="31">= <expr><literal type="number" pos:line="9" pos:column="33">0<pos:position pos:line="9" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">unsigned<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">char<pos:position pos:line="10" pos:column="18"/></name> <modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type><name pos:line="10" pos:column="20">mask_bytes<pos:position pos:line="10" pos:column="30"/></name></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name></type> <name pos:line="11" pos:column="10">byte<pos:position pos:line="11" pos:column="14"/></name></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">plaintext<pos:position pos:line="12" pos:column="18"/></name></decl>;<pos:position pos:line="12" pos:column="19"/></decl_stmt>
    
    
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">request_rec<pos:position pos:line="15" pos:column="16"/></name> <modifier pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></modifier></type><name pos:line="15" pos:column="18">r<pos:position pos:line="15" pos:column="19"/></name> <init pos:line="15" pos:column="20">= <expr><operator pos:line="15" pos:column="22">(<pos:position pos:line="15" pos:column="23"/></operator><name pos:line="15" pos:column="23">request_rec<pos:position pos:line="15" pos:column="34"/></name> <operator pos:line="15" pos:column="35">*<pos:position pos:line="15" pos:column="36"/></operator><operator pos:line="15" pos:column="36">)<pos:position pos:line="15" pos:column="37"/></operator> <call><name pos:line="15" pos:column="38">lua_unboxpointer<pos:position pos:line="15" pos:column="54"/></name><argument_list pos:line="15" pos:column="54">(<argument><expr><name pos:line="15" pos:column="55">L<pos:position pos:line="15" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="58">1<pos:position pos:line="15" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="61"/></decl_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">plaintext<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">=<pos:position pos:line="16" pos:column="16"/></operator> <ternary><condition><expr><call><name pos:line="16" pos:column="17">ap_lua_ssl_is_https<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name><name pos:line="16" pos:column="37">r<pos:position pos:line="16" pos:column="38"/></name><operator pos:line="16" pos:column="38">-&gt;<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="40">connection<pos:position pos:line="16" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr> ?<pos:position pos:line="16" pos:column="53"/></condition><then pos:line="16" pos:column="53"> <expr><literal type="number" pos:line="16" pos:column="54">0<pos:position pos:line="16" pos:column="55"/></literal></expr> <pos:position pos:line="16" pos:column="56"/></then><else pos:line="16" pos:column="56">: <expr><literal type="number" pos:line="16" pos:column="58">1<pos:position pos:line="16" pos:column="59"/></literal></expr></else></ternary></expr>;<pos:position pos:line="16" pos:column="60"/></expr_stmt>

    
    <expr_stmt><expr><name pos:line="19" pos:column="5">mask_bytes<pos:position pos:line="19" pos:column="15"/></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <call><name pos:line="19" pos:column="18">apr_pcalloc<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name><name pos:line="19" pos:column="30">r<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">-&gt;<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="33">pool<pos:position pos:line="19" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="39">4<pos:position pos:line="19" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">sock<pos:position pos:line="20" pos:column="9"/></name> <operator pos:line="20" pos:column="10">=<pos:position pos:line="20" pos:column="11"/></operator> <call><name pos:line="20" pos:column="12">ap_get_conn_socket<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><name><name pos:line="20" pos:column="31">r<pos:position pos:line="20" pos:column="32"/></name><operator pos:line="20" pos:column="32">-&gt;<pos:position pos:line="20" pos:column="37"/></operator><name pos:line="20" pos:column="34">connection<pos:position pos:line="20" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>

    <comment type="block" pos:line="22" pos:column="5">/* Get opcode and FIN bit */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">plaintext<pos:position pos:line="23" pos:column="18"/></name></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19"> <block pos:line="23" pos:column="20">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">rv<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">apr_socket_recv<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name pos:line="24" pos:column="30">sock<pos:position pos:line="24" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="36">&amp;<pos:position pos:line="24" pos:column="41"/></operator><name pos:line="24" pos:column="37">byte<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="43">&amp;<pos:position pos:line="24" pos:column="48"/></operator><name pos:line="24" pos:column="44">len<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then>
    <else pos:line="26" pos:column="5">else <block pos:line="26" pos:column="10">{
        <expr_stmt><expr><name pos:line="27" pos:column="9">rv<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <call><name pos:line="27" pos:column="14">lua_websocket_readbytes<pos:position pos:line="27" pos:column="37"/></name><argument_list pos:line="27" pos:column="37">(<argument><expr><name><name pos:line="27" pos:column="38">r<pos:position pos:line="27" pos:column="39"/></name><operator pos:line="27" pos:column="39">-&gt;<pos:position pos:line="27" pos:column="44"/></operator><name pos:line="27" pos:column="41">connection<pos:position pos:line="27" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="53">&amp;<pos:position pos:line="27" pos:column="58"/></operator><name pos:line="27" pos:column="54">byte<pos:position pos:line="27" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="60">1<pos:position pos:line="27" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></else></if>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">rv<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">==<pos:position pos:line="29" pos:column="14"/></operator> <name pos:line="29" pos:column="15">APR_SUCCESS<pos:position pos:line="29" pos:column="26"/></name></expr>)<pos:position pos:line="29" pos:column="27"/></condition><then pos:line="29" pos:column="27"> <block pos:line="29" pos:column="28">{
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">unsigned<pos:position pos:line="30" pos:column="17"/></name> <name pos:line="30" pos:column="18">char<pos:position pos:line="30" pos:column="22"/></name></type> <name pos:line="30" pos:column="23">fin<pos:position pos:line="30" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="30" pos:column="28">opcode<pos:position pos:line="30" pos:column="34"/></name></decl>, <decl><type ref="prev"/><name pos:line="30" pos:column="36">mask<pos:position pos:line="30" pos:column="40"/></name></decl>, <decl><type ref="prev"/><name pos:line="30" pos:column="42">payload<pos:position pos:line="30" pos:column="49"/></name></decl>;<pos:position pos:line="30" pos:column="50"/></decl_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">fin<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <name pos:line="31" pos:column="15">byte<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">&gt;&gt;<pos:position pos:line="31" pos:column="25"/></operator> <literal type="number" pos:line="31" pos:column="23">7<pos:position pos:line="31" pos:column="24"/></literal></expr>;<pos:position pos:line="31" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="32" pos:column="9">opcode<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">=<pos:position pos:line="32" pos:column="17"/></operator> <operator pos:line="32" pos:column="18">(<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="19">byte<pos:position pos:line="32" pos:column="23"/></name> <operator pos:line="32" pos:column="24">&lt;&lt;<pos:position pos:line="32" pos:column="32"/></operator> <literal type="number" pos:line="32" pos:column="27">4<pos:position pos:line="32" pos:column="28"/></literal><operator pos:line="32" pos:column="28">)<pos:position pos:line="32" pos:column="29"/></operator> <operator pos:line="32" pos:column="30">&gt;&gt;<pos:position pos:line="32" pos:column="35"/></operator> <literal type="number" pos:line="32" pos:column="33">4<pos:position pos:line="32" pos:column="34"/></literal></expr>;<pos:position pos:line="32" pos:column="35"/></expr_stmt>
        
        <comment type="block" pos:line="34" pos:column="9">/* Get the payload length and mask bit */</comment>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">plaintext<pos:position pos:line="35" pos:column="22"/></name></expr>)<pos:position pos:line="35" pos:column="23"/></condition><then pos:line="35" pos:column="23"> <block pos:line="35" pos:column="24">{
            <expr_stmt><expr><name pos:line="36" pos:column="13">rv<pos:position pos:line="36" pos:column="15"/></name> <operator pos:line="36" pos:column="16">=<pos:position pos:line="36" pos:column="17"/></operator> <call><name pos:line="36" pos:column="18">apr_socket_recv<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name pos:line="36" pos:column="34">sock<pos:position pos:line="36" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="40">&amp;<pos:position pos:line="36" pos:column="45"/></operator><name pos:line="36" pos:column="41">byte<pos:position pos:line="36" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="47">&amp;<pos:position pos:line="36" pos:column="52"/></operator><name pos:line="36" pos:column="48">len<pos:position pos:line="36" pos:column="51"/></name></expr></argument>)<pos:position pos:line="36" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then>
        <else pos:line="38" pos:column="9">else <block pos:line="38" pos:column="14">{
            <expr_stmt><expr><name pos:line="39" pos:column="13">rv<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <call><name pos:line="39" pos:column="18">lua_websocket_readbytes<pos:position pos:line="39" pos:column="41"/></name><argument_list pos:line="39" pos:column="41">(<argument><expr><name><name pos:line="39" pos:column="42">r<pos:position pos:line="39" pos:column="43"/></name><operator pos:line="39" pos:column="43">-&gt;<pos:position pos:line="39" pos:column="48"/></operator><name pos:line="39" pos:column="45">connection<pos:position pos:line="39" pos:column="55"/></name></name></expr></argument>, <argument><expr><operator pos:line="39" pos:column="57">&amp;<pos:position pos:line="39" pos:column="62"/></operator><name pos:line="39" pos:column="58">byte<pos:position pos:line="39" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="39" pos:column="64">1<pos:position pos:line="39" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="67"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></else></if>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><name pos:line="41" pos:column="13">rv<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">==<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">APR_SUCCESS<pos:position pos:line="41" pos:column="30"/></name></expr>)<pos:position pos:line="41" pos:column="31"/></condition><then pos:line="41" pos:column="31"> <block pos:line="41" pos:column="32">{
            <expr_stmt><expr><name pos:line="42" pos:column="13">mask<pos:position pos:line="42" pos:column="17"/></name> <operator pos:line="42" pos:column="18">=<pos:position pos:line="42" pos:column="19"/></operator> <name pos:line="42" pos:column="20">byte<pos:position pos:line="42" pos:column="24"/></name> <operator pos:line="42" pos:column="25">&gt;&gt;<pos:position pos:line="42" pos:column="30"/></operator> <literal type="number" pos:line="42" pos:column="28">7<pos:position pos:line="42" pos:column="29"/></literal></expr>;<pos:position pos:line="42" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name pos:line="43" pos:column="13">payload<pos:position pos:line="43" pos:column="20"/></name> <operator pos:line="43" pos:column="21">=<pos:position pos:line="43" pos:column="22"/></operator> <name pos:line="43" pos:column="23">byte<pos:position pos:line="43" pos:column="27"/></name> <operator pos:line="43" pos:column="28">-<pos:position pos:line="43" pos:column="29"/></operator> <literal type="number" pos:line="43" pos:column="30">128<pos:position pos:line="43" pos:column="33"/></literal></expr>;<pos:position pos:line="43" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">plen<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">=<pos:position pos:line="44" pos:column="19"/></operator> <name pos:line="44" pos:column="20">payload<pos:position pos:line="44" pos:column="27"/></name></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt>
            
            <comment type="block" pos:line="46" pos:column="13">/* Extended payload? */</comment>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name pos:line="47" pos:column="17">payload<pos:position pos:line="47" pos:column="24"/></name> <operator pos:line="47" pos:column="25">==<pos:position pos:line="47" pos:column="27"/></operator> <literal type="number" pos:line="47" pos:column="28">126<pos:position pos:line="47" pos:column="31"/></literal></expr>)<pos:position pos:line="47" pos:column="32"/></condition><then pos:line="47" pos:column="32"> <block pos:line="47" pos:column="33">{
                <expr_stmt><expr><name pos:line="48" pos:column="17">len<pos:position pos:line="48" pos:column="20"/></name> <operator pos:line="48" pos:column="21">=<pos:position pos:line="48" pos:column="22"/></operator> <literal type="number" pos:line="48" pos:column="23">2<pos:position pos:line="48" pos:column="24"/></literal></expr>;<pos:position pos:line="48" pos:column="25"/></expr_stmt>
                <if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">plaintext<pos:position pos:line="49" pos:column="30"/></name></expr>)<pos:position pos:line="49" pos:column="31"/></condition><then pos:line="49" pos:column="31"> <block pos:line="49" pos:column="32">{
                    <expr_stmt><expr><name pos:line="50" pos:column="21">rv<pos:position pos:line="50" pos:column="23"/></name> <operator pos:line="50" pos:column="24">=<pos:position pos:line="50" pos:column="25"/></operator> <call><name pos:line="50" pos:column="26">apr_socket_recv<pos:position pos:line="50" pos:column="41"/></name><argument_list pos:line="50" pos:column="41">(<argument><expr><name pos:line="50" pos:column="42">sock<pos:position pos:line="50" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="48">(<pos:position pos:line="50" pos:column="49"/></operator><name pos:line="50" pos:column="49">char<pos:position pos:line="50" pos:column="53"/></name><operator pos:line="50" pos:column="53">*<pos:position pos:line="50" pos:column="54"/></operator><operator pos:line="50" pos:column="54">)<pos:position pos:line="50" pos:column="55"/></operator> <operator pos:line="50" pos:column="56">&amp;<pos:position pos:line="50" pos:column="61"/></operator><name pos:line="50" pos:column="57">payload_short<pos:position pos:line="50" pos:column="70"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="72">&amp;<pos:position pos:line="50" pos:column="77"/></operator><name pos:line="50" pos:column="73">len<pos:position pos:line="50" pos:column="76"/></name></expr></argument>)<pos:position pos:line="50" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="78"/></expr_stmt>
                }<pos:position pos:line="51" pos:column="18"/></block></then>
                <else pos:line="52" pos:column="17">else <block pos:line="52" pos:column="22">{
                    <expr_stmt><expr><name pos:line="53" pos:column="21">rv<pos:position pos:line="53" pos:column="23"/></name> <operator pos:line="53" pos:column="24">=<pos:position pos:line="53" pos:column="25"/></operator> <call><name pos:line="53" pos:column="26">lua_websocket_readbytes<pos:position pos:line="53" pos:column="49"/></name><argument_list pos:line="53" pos:column="49">(<argument><expr><name><name pos:line="53" pos:column="50">r<pos:position pos:line="53" pos:column="51"/></name><operator pos:line="53" pos:column="51">-&gt;<pos:position pos:line="53" pos:column="56"/></operator><name pos:line="53" pos:column="53">connection<pos:position pos:line="53" pos:column="63"/></name></name></expr></argument>, 
                        <argument><expr><operator pos:line="54" pos:column="25">(<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="26">char<pos:position pos:line="54" pos:column="30"/></name><operator pos:line="54" pos:column="30">*<pos:position pos:line="54" pos:column="31"/></operator><operator pos:line="54" pos:column="31">)<pos:position pos:line="54" pos:column="32"/></operator> <operator pos:line="54" pos:column="33">&amp;<pos:position pos:line="54" pos:column="38"/></operator><name pos:line="54" pos:column="34">payload_short<pos:position pos:line="54" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="49">2<pos:position pos:line="54" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="52"/></expr_stmt>
                }<pos:position pos:line="55" pos:column="18"/></block></else></if>
                <expr_stmt><expr><name pos:line="56" pos:column="17">payload_short<pos:position pos:line="56" pos:column="30"/></name> <operator pos:line="56" pos:column="31">=<pos:position pos:line="56" pos:column="32"/></operator> <call><name pos:line="56" pos:column="33">ntohs<pos:position pos:line="56" pos:column="38"/></name><argument_list pos:line="56" pos:column="38">(<argument><expr><name pos:line="56" pos:column="39">payload_short<pos:position pos:line="56" pos:column="52"/></name></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="54"/></expr_stmt>
                
                <if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><name pos:line="58" pos:column="21">rv<pos:position pos:line="58" pos:column="23"/></name> <operator pos:line="58" pos:column="24">==<pos:position pos:line="58" pos:column="26"/></operator> <name pos:line="58" pos:column="27">APR_SUCCESS<pos:position pos:line="58" pos:column="38"/></name></expr>)<pos:position pos:line="58" pos:column="39"/></condition><then pos:line="58" pos:column="39"> <block pos:line="58" pos:column="40">{
                    <expr_stmt><expr><name pos:line="59" pos:column="21">plen<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">=<pos:position pos:line="59" pos:column="27"/></operator> <name pos:line="59" pos:column="28">payload_short<pos:position pos:line="59" pos:column="41"/></name></expr>;<pos:position pos:line="59" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="60" pos:column="18"/></block></then>
                <else pos:line="61" pos:column="17">else <block pos:line="61" pos:column="22">{
                    <return pos:line="62" pos:column="21">return <expr><literal type="number" pos:line="62" pos:column="28">0<pos:position pos:line="62" pos:column="29"/></literal></expr>;<pos:position pos:line="62" pos:column="30"/></return>
                }<pos:position pos:line="63" pos:column="18"/></block></else></if>
            }<pos:position pos:line="64" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="65" pos:column="13">/* Super duper extended payload? */</comment>
            <if pos:line="66" pos:column="13">if <condition pos:line="66" pos:column="16">(<expr><name pos:line="66" pos:column="17">payload<pos:position pos:line="66" pos:column="24"/></name> <operator pos:line="66" pos:column="25">==<pos:position pos:line="66" pos:column="27"/></operator> <literal type="number" pos:line="66" pos:column="28">127<pos:position pos:line="66" pos:column="31"/></literal></expr>)<pos:position pos:line="66" pos:column="32"/></condition><then pos:line="66" pos:column="32"> <block pos:line="66" pos:column="33">{
                <expr_stmt><expr><name pos:line="67" pos:column="17">len<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">=<pos:position pos:line="67" pos:column="22"/></operator> <literal type="number" pos:line="67" pos:column="23">8<pos:position pos:line="67" pos:column="24"/></literal></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>
                <if pos:line="68" pos:column="17">if <condition pos:line="68" pos:column="20">(<expr><name pos:line="68" pos:column="21">plaintext<pos:position pos:line="68" pos:column="30"/></name></expr>)<pos:position pos:line="68" pos:column="31"/></condition><then pos:line="68" pos:column="31"> <block pos:line="68" pos:column="32">{
                    <expr_stmt><expr><name pos:line="69" pos:column="21">rv<pos:position pos:line="69" pos:column="23"/></name> <operator pos:line="69" pos:column="24">=<pos:position pos:line="69" pos:column="25"/></operator> <call><name pos:line="69" pos:column="26">apr_socket_recv<pos:position pos:line="69" pos:column="41"/></name><argument_list pos:line="69" pos:column="41">(<argument><expr><name pos:line="69" pos:column="42">sock<pos:position pos:line="69" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="48">(<pos:position pos:line="69" pos:column="49"/></operator><name pos:line="69" pos:column="49">char<pos:position pos:line="69" pos:column="53"/></name><operator pos:line="69" pos:column="53">*<pos:position pos:line="69" pos:column="54"/></operator><operator pos:line="69" pos:column="54">)<pos:position pos:line="69" pos:column="55"/></operator> <operator pos:line="69" pos:column="56">&amp;<pos:position pos:line="69" pos:column="61"/></operator><name pos:line="69" pos:column="57">payload_long<pos:position pos:line="69" pos:column="69"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="71">&amp;<pos:position pos:line="69" pos:column="76"/></operator><name pos:line="69" pos:column="72">len<pos:position pos:line="69" pos:column="75"/></name></expr></argument>)<pos:position pos:line="69" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="77"/></expr_stmt>
                }<pos:position pos:line="70" pos:column="18"/></block></then>
                <else pos:line="71" pos:column="17">else <block pos:line="71" pos:column="22">{
                    <expr_stmt><expr><name pos:line="72" pos:column="21">rv<pos:position pos:line="72" pos:column="23"/></name> <operator pos:line="72" pos:column="24">=<pos:position pos:line="72" pos:column="25"/></operator> <call><name pos:line="72" pos:column="26">lua_websocket_readbytes<pos:position pos:line="72" pos:column="49"/></name><argument_list pos:line="72" pos:column="49">(<argument><expr><name><name pos:line="72" pos:column="50">r<pos:position pos:line="72" pos:column="51"/></name><operator pos:line="72" pos:column="51">-&gt;<pos:position pos:line="72" pos:column="56"/></operator><name pos:line="72" pos:column="53">connection<pos:position pos:line="72" pos:column="63"/></name></name></expr></argument>, 
                            <argument><expr><operator pos:line="73" pos:column="29">(<pos:position pos:line="73" pos:column="30"/></operator><name pos:line="73" pos:column="30">char<pos:position pos:line="73" pos:column="34"/></name><operator pos:line="73" pos:column="34">*<pos:position pos:line="73" pos:column="35"/></operator><operator pos:line="73" pos:column="35">)<pos:position pos:line="73" pos:column="36"/></operator> <operator pos:line="73" pos:column="37">&amp;<pos:position pos:line="73" pos:column="42"/></operator><name pos:line="73" pos:column="38">payload_long<pos:position pos:line="73" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="52">8<pos:position pos:line="73" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="55"/></expr_stmt>
                }<pos:position pos:line="74" pos:column="18"/></block></else></if>
                <if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">rv<pos:position pos:line="75" pos:column="23"/></name> <operator pos:line="75" pos:column="24">==<pos:position pos:line="75" pos:column="26"/></operator> <name pos:line="75" pos:column="27">APR_SUCCESS<pos:position pos:line="75" pos:column="38"/></name></expr>)<pos:position pos:line="75" pos:column="39"/></condition><then pos:line="75" pos:column="39"> <block pos:line="75" pos:column="40">{
                    <expr_stmt><expr><name pos:line="76" pos:column="21">plen<pos:position pos:line="76" pos:column="25"/></name> <operator pos:line="76" pos:column="26">=<pos:position pos:line="76" pos:column="27"/></operator> <call><name pos:line="76" pos:column="28">ap_ntoh64<pos:position pos:line="76" pos:column="37"/></name><argument_list pos:line="76" pos:column="37">(<argument><expr><operator pos:line="76" pos:column="38">&amp;<pos:position pos:line="76" pos:column="43"/></operator><name pos:line="76" pos:column="39">payload_long<pos:position pos:line="76" pos:column="51"/></name></expr></argument>)<pos:position pos:line="76" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="53"/></expr_stmt>
                }<pos:position pos:line="77" pos:column="18"/></block></then>
                <else pos:line="78" pos:column="17">else <block pos:line="78" pos:column="22">{
                    <return pos:line="79" pos:column="21">return <expr><literal type="number" pos:line="79" pos:column="28">0<pos:position pos:line="79" pos:column="29"/></literal></expr>;<pos:position pos:line="79" pos:column="30"/></return>
                }<pos:position pos:line="80" pos:column="18"/></block></else></if>
            }<pos:position pos:line="81" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">ap_log_rerror<pos:position pos:line="82" pos:column="26"/></name><argument_list pos:line="82" pos:column="26">(<argument><expr><name pos:line="82" pos:column="27">APLOG_MARK<pos:position pos:line="82" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="39">APLOG_DEBUG<pos:position pos:line="82" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="52">0<pos:position pos:line="82" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="82" pos:column="55">r<pos:position pos:line="82" pos:column="56"/></name></expr></argument>, 
                    <argument><expr><literal type="string" pos:line="83" pos:column="21">"Websocket: Reading %lu (%s) bytes, masking is %s. %s"<pos:position pos:line="83" pos:column="75"/></literal></expr></argument>, 
                    <argument><expr><name pos:line="84" pos:column="21">plen<pos:position pos:line="84" pos:column="25"/></name></expr></argument>,
                    <argument><expr><ternary><condition><expr><operator pos:line="85" pos:column="21">(<pos:position pos:line="85" pos:column="22"/></operator><name pos:line="85" pos:column="22">payload<pos:position pos:line="85" pos:column="29"/></name> <operator pos:line="85" pos:column="30">&gt;=<pos:position pos:line="85" pos:column="35"/></operator> <literal type="number" pos:line="85" pos:column="33">126<pos:position pos:line="85" pos:column="36"/></literal><operator pos:line="85" pos:column="36">)<pos:position pos:line="85" pos:column="37"/></operator></expr> ?<pos:position pos:line="85" pos:column="39"/></condition><then pos:line="85" pos:column="39"> <expr><literal type="string" pos:line="85" pos:column="40">"extra payload"<pos:position pos:line="85" pos:column="55"/></literal></expr> <pos:position pos:line="85" pos:column="56"/></then><else pos:line="85" pos:column="56">: <expr><literal type="string" pos:line="85" pos:column="58">"no extra payload"<pos:position pos:line="85" pos:column="76"/></literal></expr></else></ternary></expr></argument>, 
                    <argument><expr><ternary><condition><expr><name pos:line="86" pos:column="21">mask<pos:position pos:line="86" pos:column="25"/></name></expr> ?<pos:position pos:line="86" pos:column="27"/></condition><then pos:line="86" pos:column="27"> <expr><literal type="string" pos:line="86" pos:column="28">"on"<pos:position pos:line="86" pos:column="32"/></literal></expr> <pos:position pos:line="86" pos:column="33"/></then><else pos:line="86" pos:column="33">: <expr><literal type="string" pos:line="86" pos:column="35">"off"<pos:position pos:line="86" pos:column="40"/></literal></expr></else></ternary></expr></argument>, 
                    <argument><expr><ternary><condition><expr><name pos:line="87" pos:column="21">fin<pos:position pos:line="87" pos:column="24"/></name></expr> ?<pos:position pos:line="87" pos:column="26"/></condition><then pos:line="87" pos:column="26"> <expr><literal type="string" pos:line="87" pos:column="27">"This is a final frame"<pos:position pos:line="87" pos:column="50"/></literal></expr> <pos:position pos:line="87" pos:column="51"/></then><else pos:line="87" pos:column="51">: <expr><literal type="string" pos:line="87" pos:column="53">"more to follow"<pos:position pos:line="87" pos:column="69"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="87" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="71"/></expr_stmt>
            <if pos:line="88" pos:column="13">if <condition pos:line="88" pos:column="16">(<expr><name pos:line="88" pos:column="17">mask<pos:position pos:line="88" pos:column="21"/></name></expr>)<pos:position pos:line="88" pos:column="22"/></condition><then pos:line="88" pos:column="22"> <block pos:line="88" pos:column="23">{
                <expr_stmt><expr><name pos:line="89" pos:column="17">len<pos:position pos:line="89" pos:column="20"/></name> <operator pos:line="89" pos:column="21">=<pos:position pos:line="89" pos:column="22"/></operator> <literal type="number" pos:line="89" pos:column="23">4<pos:position pos:line="89" pos:column="24"/></literal></expr>;<pos:position pos:line="89" pos:column="25"/></expr_stmt>
                <if pos:line="90" pos:column="17">if <condition pos:line="90" pos:column="20">(<expr><name pos:line="90" pos:column="21">plaintext<pos:position pos:line="90" pos:column="30"/></name></expr>)<pos:position pos:line="90" pos:column="31"/></condition><then pos:line="90" pos:column="31"> <block pos:line="90" pos:column="32">{
                    <expr_stmt><expr><name pos:line="91" pos:column="21">rv<pos:position pos:line="91" pos:column="23"/></name> <operator pos:line="91" pos:column="24">=<pos:position pos:line="91" pos:column="25"/></operator> <call><name pos:line="91" pos:column="26">apr_socket_recv<pos:position pos:line="91" pos:column="41"/></name><argument_list pos:line="91" pos:column="41">(<argument><expr><name pos:line="91" pos:column="42">sock<pos:position pos:line="91" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="48">(<pos:position pos:line="91" pos:column="49"/></operator><name pos:line="91" pos:column="49">char<pos:position pos:line="91" pos:column="53"/></name><operator pos:line="91" pos:column="53">*<pos:position pos:line="91" pos:column="54"/></operator><operator pos:line="91" pos:column="54">)<pos:position pos:line="91" pos:column="55"/></operator> <name pos:line="91" pos:column="56">mask_bytes<pos:position pos:line="91" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="91" pos:column="68">&amp;<pos:position pos:line="91" pos:column="73"/></operator><name pos:line="91" pos:column="69">len<pos:position pos:line="91" pos:column="72"/></name></expr></argument>)<pos:position pos:line="91" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="74"/></expr_stmt>
                }<pos:position pos:line="92" pos:column="18"/></block></then>
                <else pos:line="93" pos:column="17">else <block pos:line="93" pos:column="22">{
                    <expr_stmt><expr><name pos:line="94" pos:column="21">rv<pos:position pos:line="94" pos:column="23"/></name> <operator pos:line="94" pos:column="24">=<pos:position pos:line="94" pos:column="25"/></operator> <call><name pos:line="94" pos:column="26">lua_websocket_readbytes<pos:position pos:line="94" pos:column="49"/></name><argument_list pos:line="94" pos:column="49">(<argument><expr><name><name pos:line="94" pos:column="50">r<pos:position pos:line="94" pos:column="51"/></name><operator pos:line="94" pos:column="51">-&gt;<pos:position pos:line="94" pos:column="56"/></operator><name pos:line="94" pos:column="53">connection<pos:position pos:line="94" pos:column="63"/></name></name></expr></argument>, 
                            <argument><expr><operator pos:line="95" pos:column="29">(<pos:position pos:line="95" pos:column="30"/></operator><name pos:line="95" pos:column="30">char<pos:position pos:line="95" pos:column="34"/></name><operator pos:line="95" pos:column="34">*<pos:position pos:line="95" pos:column="35"/></operator><operator pos:line="95" pos:column="35">)<pos:position pos:line="95" pos:column="36"/></operator> <name pos:line="95" pos:column="37">mask_bytes<pos:position pos:line="95" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="49">4<pos:position pos:line="95" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="52"/></expr_stmt>
                }<pos:position pos:line="96" pos:column="18"/></block></else></if>
                <if pos:line="97" pos:column="17">if <condition pos:line="97" pos:column="20">(<expr><name pos:line="97" pos:column="21">rv<pos:position pos:line="97" pos:column="23"/></name> <operator pos:line="97" pos:column="24">!=<pos:position pos:line="97" pos:column="26"/></operator> <name pos:line="97" pos:column="27">APR_SUCCESS<pos:position pos:line="97" pos:column="38"/></name></expr>)<pos:position pos:line="97" pos:column="39"/></condition><then pos:line="97" pos:column="39"> <block pos:line="97" pos:column="40">{
                    <return pos:line="98" pos:column="21">return <expr><literal type="number" pos:line="98" pos:column="28">0<pos:position pos:line="98" pos:column="29"/></literal></expr>;<pos:position pos:line="98" pos:column="30"/></return>
                }<pos:position pos:line="99" pos:column="18"/></block></then></if>
            }<pos:position pos:line="100" pos:column="14"/></block></then></if>
            <if pos:line="101" pos:column="13">if <condition pos:line="101" pos:column="16">(<expr><name><name pos:line="101" pos:column="17">plen<pos:position pos:line="101" pos:column="21"/></name> <argument_list type="generic" pos:line="101" pos:column="22">&lt; <argument><expr><operator pos:line="101" pos:column="24">(<pos:position pos:line="101" pos:column="25"/></operator><name pos:line="101" pos:column="25">HUGE_STRING_LEN<pos:position pos:line="101" pos:column="40"/></name><operator pos:line="101" pos:column="40">*<pos:position pos:line="101" pos:column="41"/></operator><literal type="number" pos:line="101" pos:column="41">1024<pos:position pos:line="101" pos:column="45"/></literal><operator pos:line="101" pos:column="45">)<pos:position pos:line="101" pos:column="46"/></operator> <operator pos:line="101" pos:column="47">&amp;&amp;<pos:position pos:line="101" pos:column="57"/></operator> <name pos:line="101" pos:column="50">plen<pos:position pos:line="101" pos:column="54"/></name></expr></argument> &gt;<pos:position pos:line="101" pos:column="59"/></argument_list></name> <literal type="number" pos:line="101" pos:column="57">0<pos:position pos:line="101" pos:column="58"/></literal></expr>)<pos:position pos:line="101" pos:column="59"/></condition><then pos:line="101" pos:column="59"> <block pos:line="101" pos:column="60">{
                <decl_stmt><decl><type><name pos:line="102" pos:column="17">apr_size_t<pos:position pos:line="102" pos:column="27"/></name></type> <name pos:line="102" pos:column="28">remaining<pos:position pos:line="102" pos:column="37"/></name> <init pos:line="102" pos:column="38">= <expr><name pos:line="102" pos:column="40">plen<pos:position pos:line="102" pos:column="44"/></name></expr></init></decl>;<pos:position pos:line="102" pos:column="45"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="103" pos:column="17">apr_size_t<pos:position pos:line="103" pos:column="27"/></name></type> <name pos:line="103" pos:column="28">received<pos:position pos:line="103" pos:column="36"/></name></decl>;<pos:position pos:line="103" pos:column="37"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="104" pos:column="17">apr_off_t<pos:position pos:line="104" pos:column="26"/></name></type> <name pos:line="104" pos:column="27">at<pos:position pos:line="104" pos:column="29"/></name> <init pos:line="104" pos:column="30">= <expr><literal type="number" pos:line="104" pos:column="32">0<pos:position pos:line="104" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="104" pos:column="34"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="105" pos:column="17">char<pos:position pos:line="105" pos:column="21"/></name> <modifier pos:line="105" pos:column="22">*<pos:position pos:line="105" pos:column="23"/></modifier></type><name pos:line="105" pos:column="23">buffer<pos:position pos:line="105" pos:column="29"/></name> <init pos:line="105" pos:column="30">= <expr><call><name pos:line="105" pos:column="32">apr_palloc<pos:position pos:line="105" pos:column="42"/></name><argument_list pos:line="105" pos:column="42">(<argument><expr><name><name pos:line="105" pos:column="43">r<pos:position pos:line="105" pos:column="44"/></name><operator pos:line="105" pos:column="44">-&gt;<pos:position pos:line="105" pos:column="49"/></operator><name pos:line="105" pos:column="46">pool<pos:position pos:line="105" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="52">plen<pos:position pos:line="105" pos:column="56"/></name><operator pos:line="105" pos:column="56">+<pos:position pos:line="105" pos:column="57"/></operator><literal type="number" pos:line="105" pos:column="57">1<pos:position pos:line="105" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="59"/></argument_list></call></expr></init></decl>;<pos:position pos:line="105" pos:column="60"/></decl_stmt>
                <expr_stmt><expr><name><name pos:line="106" pos:column="17">buffer<pos:position pos:line="106" pos:column="23"/></name><index pos:line="106" pos:column="23">[<expr><name pos:line="106" pos:column="24">plen<pos:position pos:line="106" pos:column="28"/></name></expr>]<pos:position pos:line="106" pos:column="29"/></index></name> <operator pos:line="106" pos:column="30">=<pos:position pos:line="106" pos:column="31"/></operator> <literal type="number" pos:line="106" pos:column="32">0<pos:position pos:line="106" pos:column="33"/></literal></expr>;<pos:position pos:line="106" pos:column="34"/></expr_stmt>
                
                <if pos:line="108" pos:column="17">if <condition pos:line="108" pos:column="20">(<expr><name pos:line="108" pos:column="21">plaintext<pos:position pos:line="108" pos:column="30"/></name></expr>)<pos:position pos:line="108" pos:column="31"/></condition><then pos:line="108" pos:column="31"> <block pos:line="108" pos:column="32">{
                    <while pos:line="109" pos:column="21">while <condition pos:line="109" pos:column="27">(<expr><name pos:line="109" pos:column="28">remaining<pos:position pos:line="109" pos:column="37"/></name> <operator pos:line="109" pos:column="38">&gt;<pos:position pos:line="109" pos:column="42"/></operator> <literal type="number" pos:line="109" pos:column="40">0<pos:position pos:line="109" pos:column="41"/></literal></expr>)<pos:position pos:line="109" pos:column="42"/></condition> <block pos:line="109" pos:column="43">{
                        <expr_stmt><expr><name pos:line="110" pos:column="25">received<pos:position pos:line="110" pos:column="33"/></name> <operator pos:line="110" pos:column="34">=<pos:position pos:line="110" pos:column="35"/></operator> <name pos:line="110" pos:column="36">remaining<pos:position pos:line="110" pos:column="45"/></name></expr>;<pos:position pos:line="110" pos:column="46"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="111" pos:column="25">rv<pos:position pos:line="111" pos:column="27"/></name> <operator pos:line="111" pos:column="28">=<pos:position pos:line="111" pos:column="29"/></operator> <call><name pos:line="111" pos:column="30">apr_socket_recv<pos:position pos:line="111" pos:column="45"/></name><argument_list pos:line="111" pos:column="45">(<argument><expr><name pos:line="111" pos:column="46">sock<pos:position pos:line="111" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="52">buffer<pos:position pos:line="111" pos:column="58"/></name><operator pos:line="111" pos:column="58">+<pos:position pos:line="111" pos:column="59"/></operator><name pos:line="111" pos:column="59">at<pos:position pos:line="111" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="63">&amp;<pos:position pos:line="111" pos:column="68"/></operator><name pos:line="111" pos:column="64">received<pos:position pos:line="111" pos:column="72"/></name></expr></argument>)<pos:position pos:line="111" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="74"/></expr_stmt>
                        <if pos:line="112" pos:column="25">if <condition pos:line="112" pos:column="28">(<expr><name pos:line="112" pos:column="29">received<pos:position pos:line="112" pos:column="37"/></name> <operator pos:line="112" pos:column="38">&gt;<pos:position pos:line="112" pos:column="42"/></operator> <literal type="number" pos:line="112" pos:column="40">0<pos:position pos:line="112" pos:column="41"/></literal></expr> )<pos:position pos:line="112" pos:column="43"/></condition><then pos:line="112" pos:column="43"> <block pos:line="112" pos:column="44">{
                            <expr_stmt><expr><name pos:line="113" pos:column="29">remaining<pos:position pos:line="113" pos:column="38"/></name> <operator pos:line="113" pos:column="39">-=<pos:position pos:line="113" pos:column="41"/></operator> <name pos:line="113" pos:column="42">received<pos:position pos:line="113" pos:column="50"/></name></expr>;<pos:position pos:line="113" pos:column="51"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="114" pos:column="29">at<pos:position pos:line="114" pos:column="31"/></name> <operator pos:line="114" pos:column="32">+=<pos:position pos:line="114" pos:column="34"/></operator> <name pos:line="114" pos:column="35">received<pos:position pos:line="114" pos:column="43"/></name></expr>;<pos:position pos:line="114" pos:column="44"/></expr_stmt>
                        }<pos:position pos:line="115" pos:column="26"/></block></then></if>
                    }<pos:position pos:line="116" pos:column="22"/></block></while>
                    <expr_stmt><expr><call><name pos:line="117" pos:column="21">ap_log_rerror<pos:position pos:line="117" pos:column="34"/></name><argument_list pos:line="117" pos:column="34">(<argument><expr><name pos:line="117" pos:column="35">APLOG_MARK<pos:position pos:line="117" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="47">APLOG_TRACE1<pos:position pos:line="117" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="61">0<pos:position pos:line="117" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="64">r<pos:position pos:line="117" pos:column="65"/></name></expr></argument>, 
                    <argument><expr><literal type="string" pos:line="118" pos:column="21">"Websocket: Frame contained %lu bytes, pushed to Lua stack"<pos:position pos:line="118" pos:column="80"/></literal></expr></argument>, 
                        <argument><expr><name pos:line="119" pos:column="25">at<pos:position pos:line="119" pos:column="27"/></name></expr></argument>)<pos:position pos:line="119" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="29"/></expr_stmt></block></then></if></block></then></if></block></then></if></block></then></if></block></function>
 </unit>
