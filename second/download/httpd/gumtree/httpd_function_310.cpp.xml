<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_310.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">sig_coredump<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">int<pos:position pos:line="1" pos:column="29"/></name></type> <name pos:line="1" pos:column="30">sig<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">chdir<pos:position pos:line="3" pos:column="10"/></name><argument_list pos:line="3" pos:column="10">(<argument><expr><name pos:line="3" pos:column="11">ap_coredump_dir<pos:position pos:line="3" pos:column="26"/></name></expr></argument>)<pos:position pos:line="3" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">apr_signal<pos:position pos:line="4" pos:column="15"/></name><argument_list pos:line="4" pos:column="15">(<argument><expr><name pos:line="4" pos:column="16">sig<pos:position pos:line="4" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="21">SIG_DFL<pos:position pos:line="4" pos:column="28"/></name></expr></argument>)<pos:position pos:line="4" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="30"/></expr_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">ap_my_pid<pos:position pos:line="5" pos:column="18"/></name> <operator pos:line="5" pos:column="19">==<pos:position pos:line="5" pos:column="21"/></operator> <name pos:line="5" pos:column="22">parent_pid<pos:position pos:line="5" pos:column="32"/></name></expr>)<pos:position pos:line="5" pos:column="33"/></condition><then pos:line="5" pos:column="33"> <block pos:line="5" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="6" pos:column="13">ap_log_error<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name pos:line="6" pos:column="26">APLOG_MARK<pos:position pos:line="6" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="38">APLOG_NOTICE<pos:position pos:line="6" pos:column="50"/></name></expr></argument>,
                         <argument><expr><literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="7" pos:column="29">ap_server_conf<pos:position pos:line="7" pos:column="43"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="8" pos:column="26">"seg fault or similar nasty error detected "<pos:position pos:line="8" pos:column="70"/></literal>
                         <literal type="string" pos:line="9" pos:column="26">"in the parent process"<pos:position pos:line="9" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="10" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">kill<pos:position pos:line="11" pos:column="9"/></name><argument_list pos:line="11" pos:column="9">(<argument><expr><call><name pos:line="11" pos:column="10">getpid<pos:position pos:line="11" pos:column="16"/></name><argument_list pos:line="11" pos:column="16">()<pos:position pos:line="11" pos:column="18"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="11" pos:column="20">sig<pos:position pos:line="11" pos:column="23"/></name></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="25"/></expr_stmt>
    <comment type="block" pos:line="12" pos:column="5">/* At this point we've got sig blocked, because we're still inside
     * the signal handler.  When we leave the signal handler it will
     * be unblocked, and we'll take the signal... and coredump or whatever
     * is appropriate for this particular Unix.  In addition the parent
     * will see the real signal we received -- whereas if we called
     * abort() here, the parent would only see SIGABRT.
     */</comment>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
