<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5571.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">get_lines_till_end_token<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">apr_pool_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type> <name pos:line="1" pos:column="52">pool<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">ap_configfile_t<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type> <name pos:line="2" pos:column="57">config_file<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="3" pos:column="39">const<pos:position pos:line="3" pos:column="44"/></specifier> <name pos:line="3" pos:column="45">char<pos:position pos:line="3" pos:column="49"/></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">end_token<pos:position pos:line="3" pos:column="60"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="4" pos:column="39">const<pos:position pos:line="4" pos:column="44"/></specifier> <name pos:line="4" pos:column="45">char<pos:position pos:line="4" pos:column="49"/></name> <modifier pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></modifier></type><name pos:line="4" pos:column="51">begin_token<pos:position pos:line="4" pos:column="62"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="5" pos:column="39">const<pos:position pos:line="5" pos:column="44"/></specifier> <name pos:line="5" pos:column="45">char<pos:position pos:line="5" pos:column="49"/></name> <modifier pos:line="5" pos:column="50">*<pos:position pos:line="5" pos:column="51"/></modifier></type><name pos:line="5" pos:column="51">where<pos:position pos:line="5" pos:column="56"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="6" pos:column="39">apr_array_header_t<pos:position pos:line="6" pos:column="57"/></name> <modifier pos:line="6" pos:column="58">*<pos:position pos:line="6" pos:column="59"/></modifier><modifier pos:line="6" pos:column="59">*<pos:position pos:line="6" pos:column="60"/></modifier></type> <name pos:line="6" pos:column="61">plines<pos:position pos:line="6" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="68"/></parameter_list>
<block pos:line="7" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_array_header_t<pos:position pos:line="8" pos:column="23"/></name> <modifier pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></modifier></type><name pos:line="8" pos:column="25">lines<pos:position pos:line="8" pos:column="30"/></name> <init pos:line="8" pos:column="31">= <expr><call><name pos:line="8" pos:column="33">apr_array_make<pos:position pos:line="8" pos:column="47"/></name><argument_list pos:line="8" pos:column="47">(<argument><expr><name pos:line="8" pos:column="48">pool<pos:position pos:line="8" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="54">1<pos:position pos:line="8" pos:column="55"/></literal></expr></argument>, <argument><expr><sizeof pos:line="8" pos:column="57">sizeof<argument_list pos:line="8" pos:column="63">(<argument><expr><name pos:line="8" pos:column="64">char<pos:position pos:line="8" pos:column="68"/></name> <operator pos:line="8" pos:column="69">*<pos:position pos:line="8" pos:column="70"/></operator></expr></argument>)<pos:position pos:line="8" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="73"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name></type> <name><name pos:line="9" pos:column="10">line<pos:position pos:line="9" pos:column="14"/></name><index pos:line="9" pos:column="14">[<expr><name pos:line="9" pos:column="15">MAX_STRING_LEN<pos:position pos:line="9" pos:column="29"/></name></expr>]<pos:position pos:line="9" pos:column="30"/></index></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>  <comment type="block" pos:line="9" pos:column="33">/* sorry, but this is expected by getline:-( */</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">macro_nesting<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><literal type="number" pos:line="10" pos:column="25">1<pos:position pos:line="10" pos:column="26"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="28">any_nesting<pos:position pos:line="10" pos:column="39"/></name> <init pos:line="10" pos:column="40">= <expr><literal type="number" pos:line="10" pos:column="42">1<pos:position pos:line="10" pos:column="43"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">line_number_start<pos:position pos:line="11" pos:column="26"/></name> <init pos:line="11" pos:column="27">= <expr><name><name pos:line="11" pos:column="29">config_file<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">-&gt;<pos:position pos:line="11" pos:column="45"/></operator><name pos:line="11" pos:column="42">line_number<pos:position pos:line="11" pos:column="53"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="54"/></decl_stmt>

    <while pos:line="13" pos:column="5">while <condition pos:line="13" pos:column="11">(<expr><operator pos:line="13" pos:column="12">!<pos:position pos:line="13" pos:column="13"/></operator><call><name pos:line="13" pos:column="13">ap_cfg_getline<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">line<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="34">MAX_STRING_LEN<pos:position pos:line="13" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="50">config_file<pos:position pos:line="13" pos:column="61"/></name></expr></argument>)<pos:position pos:line="13" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="63"/></condition> <block pos:line="13" pos:column="64">{
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">char<pos:position pos:line="14" pos:column="13"/></name> <modifier pos:line="14" pos:column="14">*<pos:position pos:line="14" pos:column="15"/></modifier></type><name pos:line="14" pos:column="15">ptr<pos:position pos:line="14" pos:column="18"/></name> <init pos:line="14" pos:column="19">= <expr><name pos:line="14" pos:column="21">line<pos:position pos:line="14" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">char<pos:position pos:line="15" pos:column="13"/></name> <modifier pos:line="15" pos:column="14">*<pos:position pos:line="15" pos:column="15"/></modifier></type><name pos:line="15" pos:column="15">first<pos:position pos:line="15" pos:column="20"/></name></decl>, <modifier pos:line="15" pos:column="22">*<pos:position pos:line="15" pos:column="23"/></modifier><modifier pos:line="15" pos:column="23">*<pos:position pos:line="15" pos:column="24"/></modifier>new;<pos:position pos:line="15" pos:column="28"/></decl_stmt>
        <comment type="block" pos:line="16" pos:column="9">/* skip comments */</comment>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">*<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">line<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">==<pos:position pos:line="17" pos:column="21"/></operator> <literal type="char" pos:line="17" pos:column="22">'#'<pos:position pos:line="17" pos:column="25"/></literal></expr>)<pos:position pos:line="17" pos:column="26"/></condition><then pos:line="17" pos:column="26">
            <block type="pseudo"><continue pos:line="18" pos:column="13">continue;<pos:position pos:line="18" pos:column="22"/></continue></block></then></if>
        <expr_stmt><expr><name pos:line="19" pos:column="9">first<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <call><name pos:line="19" pos:column="17">ap_getword_conf_nc<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">pool<pos:position pos:line="19" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="42">&amp;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="43">ptr<pos:position pos:line="19" pos:column="46"/></name></expr></argument>)<pos:position pos:line="19" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="48"/></expr_stmt>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">first<pos:position pos:line="20" pos:column="18"/></name></expr>)<pos:position pos:line="20" pos:column="19"/></condition><then pos:line="20" pos:column="19"> <block pos:line="20" pos:column="20">{
            <comment type="block" pos:line="21" pos:column="13">/* detect nesting... */</comment>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><operator pos:line="22" pos:column="17">!<pos:position pos:line="22" pos:column="18"/></operator><call><name pos:line="22" pos:column="18">strncmp<pos:position pos:line="22" pos:column="25"/></name><argument_list pos:line="22" pos:column="25">(<argument><expr><name pos:line="22" pos:column="26">first<pos:position pos:line="22" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="33">"&lt;/"<pos:position pos:line="22" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="39">2<pos:position pos:line="22" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="42"/></condition><then pos:line="22" pos:column="42"> <block pos:line="22" pos:column="43">{
                <expr_stmt><expr><name pos:line="23" pos:column="17">any_nesting<pos:position pos:line="23" pos:column="28"/></name><operator pos:line="23" pos:column="28">--<pos:position pos:line="23" pos:column="30"/></operator></expr>;<pos:position pos:line="23" pos:column="31"/></expr_stmt>
                <if pos:line="24" pos:column="17">if <condition pos:line="24" pos:column="20">(<expr><name pos:line="24" pos:column="21">any_nesting<pos:position pos:line="24" pos:column="32"/></name> <operator pos:line="24" pos:column="33">&lt;<pos:position pos:line="24" pos:column="37"/></operator> <literal type="number" pos:line="24" pos:column="35">0<pos:position pos:line="24" pos:column="36"/></literal></expr>)<pos:position pos:line="24" pos:column="37"/></condition><then pos:line="24" pos:column="37"> <block pos:line="24" pos:column="38">{
                    <expr_stmt><expr><call><name pos:line="25" pos:column="21">ap_log_error<pos:position pos:line="25" pos:column="33"/></name><argument_list pos:line="25" pos:column="33">(<argument><expr><name pos:line="25" pos:column="34">APLOG_MARK<pos:position pos:line="25" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">APLOG_NOERRNO<pos:position pos:line="25" pos:column="59"/></name> <operator pos:line="25" pos:column="60">|<pos:position pos:line="25" pos:column="61"/></operator> <name pos:line="25" pos:column="62">APLOG_WARNING<pos:position pos:line="25" pos:column="75"/></name></expr></argument>,
                                 <argument><expr><literal type="number" pos:line="26" pos:column="34">0<pos:position pos:line="26" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="37">NULL<pos:position pos:line="26" pos:column="41"/></name></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="27" pos:column="34">"bad (negative) nesting on line %d of %s"<pos:position pos:line="27" pos:column="75"/></literal></expr></argument>,
                                 <argument><expr><name><name pos:line="28" pos:column="34">config_file<pos:position pos:line="28" pos:column="45"/></name><operator pos:line="28" pos:column="45">-&gt;<pos:position pos:line="28" pos:column="50"/></operator><name pos:line="28" pos:column="47">line_number<pos:position pos:line="28" pos:column="58"/></name></name> <operator pos:line="28" pos:column="59">-<pos:position pos:line="28" pos:column="60"/></operator> <name pos:line="28" pos:column="61">line_number_start<pos:position pos:line="28" pos:column="78"/></name></expr></argument>,
                                 <argument><expr><name pos:line="29" pos:column="34">where<pos:position pos:line="29" pos:column="39"/></name></expr></argument>)<pos:position pos:line="29" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="41"/></expr_stmt>
                }<pos:position pos:line="30" pos:column="18"/></block></then></if>
            }<pos:position pos:line="31" pos:column="14"/></block></then>
            <elseif pos:line="32" pos:column="13">else <if pos:line="32" pos:column="18">if <condition pos:line="32" pos:column="21">(<expr><operator pos:line="32" pos:column="22">!<pos:position pos:line="32" pos:column="23"/></operator><call><name pos:line="32" pos:column="23">strncmp<pos:position pos:line="32" pos:column="30"/></name><argument_list pos:line="32" pos:column="30">(<argument><expr><name pos:line="32" pos:column="31">first<pos:position pos:line="32" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="38">"&lt;"<pos:position pos:line="32" pos:column="44"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="43">1<pos:position pos:line="32" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="46"/></condition><then pos:line="32" pos:column="46"> <block pos:line="32" pos:column="47">{
                <expr_stmt><expr><name pos:line="33" pos:column="17">any_nesting<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">++<pos:position pos:line="33" pos:column="30"/></operator></expr>;<pos:position pos:line="33" pos:column="31"/></expr_stmt>
            }<pos:position pos:line="34" pos:column="14"/></block></then></if></elseif></if>

            <if pos:line="36" pos:column="13">if <condition pos:line="36" pos:column="16">(<expr><operator pos:line="36" pos:column="17">!<pos:position pos:line="36" pos:column="18"/></operator><call><name pos:line="36" pos:column="18">strcasecmp<pos:position pos:line="36" pos:column="28"/></name><argument_list pos:line="36" pos:column="28">(<argument><expr><name pos:line="36" pos:column="29">first<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="36">end_token<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="47"/></condition><then pos:line="36" pos:column="47"> <block pos:line="36" pos:column="48">{
                <comment type="block" pos:line="37" pos:column="17">/* check for proper closing */</comment>
                <decl_stmt><decl><type><name pos:line="38" pos:column="17">char<pos:position pos:line="38" pos:column="21"/></name> <modifier pos:line="38" pos:column="22">*<pos:position pos:line="38" pos:column="23"/></modifier></type> <name pos:line="38" pos:column="24">endp<pos:position pos:line="38" pos:column="28"/></name> <init pos:line="38" pos:column="29">= <expr><operator pos:line="38" pos:column="31">(<pos:position pos:line="38" pos:column="32"/></operator><name pos:line="38" pos:column="32">char<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">*<pos:position pos:line="38" pos:column="38"/></operator><operator pos:line="38" pos:column="38">)<pos:position pos:line="38" pos:column="39"/></operator> <call><name pos:line="38" pos:column="40">ap_strrchr_c<pos:position pos:line="38" pos:column="52"/></name><argument_list pos:line="38" pos:column="52">(<argument><expr><name pos:line="38" pos:column="53">line<pos:position pos:line="38" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="38" pos:column="59">'&gt;'<pos:position pos:line="38" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="38" pos:column="64"/></decl_stmt>

                <comment type="block" pos:line="40" pos:column="17">/* this cannot happen if end_token contains '&gt;' */</comment>
                <if pos:line="41" pos:column="17">if <condition pos:line="41" pos:column="20">(<expr><name pos:line="41" pos:column="21">endp<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">==<pos:position pos:line="41" pos:column="28"/></operator> <name pos:line="41" pos:column="29">NULL<pos:position pos:line="41" pos:column="33"/></name></expr>)<pos:position pos:line="41" pos:column="34"/></condition><then pos:line="41" pos:column="34"> <block pos:line="41" pos:column="35">{
                  <return pos:line="42" pos:column="19">return <expr><literal type="string" pos:line="42" pos:column="26">"end directive missing closing '&gt;'"<pos:position pos:line="42" pos:column="64"/></literal></expr>;<pos:position pos:line="42" pos:column="62"/></return>
                }<pos:position pos:line="43" pos:column="18"/></block></then></if>

                <expr_stmt><expr><call><name pos:line="45" pos:column="17">warn_if_non_blank<pos:position pos:line="45" pos:column="34"/></name><argument_list pos:line="45" pos:column="34">(
                    <argument><expr><literal type="string" pos:line="46" pos:column="21">"non blank chars found after directive closing"<pos:position pos:line="46" pos:column="68"/></literal></expr></argument>,
                    <argument><expr><name pos:line="47" pos:column="21">endp<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">+<pos:position pos:line="47" pos:column="26"/></operator><literal type="number" pos:line="47" pos:column="26">1<pos:position pos:line="47" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="47" pos:column="29">config_file<pos:position pos:line="47" pos:column="40"/></name></expr></argument>)<pos:position pos:line="47" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="42"/></expr_stmt>

                <expr_stmt><expr><name pos:line="49" pos:column="17">macro_nesting<pos:position pos:line="49" pos:column="30"/></name><operator pos:line="49" pos:column="30">--<pos:position pos:line="49" pos:column="32"/></operator></expr>;<pos:position pos:line="49" pos:column="33"/></expr_stmt>
                <if pos:line="50" pos:column="17">if <condition pos:line="50" pos:column="20">(<expr><operator pos:line="50" pos:column="21">!<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">macro_nesting<pos:position pos:line="50" pos:column="35"/></name></expr>)<pos:position pos:line="50" pos:column="36"/></condition><then pos:line="50" pos:column="36"> <block pos:line="50" pos:column="37">{
                    <if pos:line="51" pos:column="21">if <condition pos:line="51" pos:column="24">(<expr><name pos:line="51" pos:column="25">any_nesting<pos:position pos:line="51" pos:column="36"/></name></expr>)<pos:position pos:line="51" pos:column="37"/></condition><then pos:line="51" pos:column="37"> <block pos:line="51" pos:column="38">{
                        <expr_stmt><expr><call><name pos:line="52" pos:column="25">ap_log_error<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name pos:line="52" pos:column="38">APLOG_MARK<pos:position pos:line="52" pos:column="48"/></name></expr></argument>,
                                     <argument><expr><name pos:line="53" pos:column="38">APLOG_NOERRNO<pos:position pos:line="53" pos:column="51"/></name> <operator pos:line="53" pos:column="52">|<pos:position pos:line="53" pos:column="53"/></operator> <name pos:line="53" pos:column="54">APLOG_WARNING<pos:position pos:line="53" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="69">0<pos:position pos:line="53" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="72">NULL<pos:position pos:line="53" pos:column="76"/></name></expr></argument>,
                                     <argument><expr><literal type="string" pos:line="54" pos:column="38">"bad cumulated nesting (%+d) in %s"<pos:position pos:line="54" pos:column="73"/></literal></expr></argument>,
                                     <argument><expr><name pos:line="55" pos:column="38">any_nesting<pos:position pos:line="55" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="51">where<pos:position pos:line="55" pos:column="56"/></name></expr></argument>)<pos:position pos:line="55" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
                    }<pos:position pos:line="56" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><operator pos:line="57" pos:column="21">*<pos:position pos:line="57" pos:column="22"/></operator><name pos:line="57" pos:column="22">plines<pos:position pos:line="57" pos:column="28"/></name> <operator pos:line="57" pos:column="29">=<pos:position pos:line="57" pos:column="30"/></operator> <name pos:line="57" pos:column="31">lines<pos:position pos:line="57" pos:column="36"/></name></expr>;<pos:position pos:line="57" pos:column="37"/></expr_stmt>
                    <return pos:line="58" pos:column="21">return <expr><name pos:line="58" pos:column="28">NULL<pos:position pos:line="58" pos:column="32"/></name></expr>;<pos:position pos:line="58" pos:column="33"/></return>
                }<pos:position pos:line="59" pos:column="18"/></block></then></if>
            }<pos:position pos:line="60" pos:column="14"/></block></then>
            <elseif pos:line="61" pos:column="13">else <if pos:line="61" pos:column="18">if <condition pos:line="61" pos:column="21">(<expr><name pos:line="61" pos:column="22">begin_token<pos:position pos:line="61" pos:column="33"/></name> <operator pos:line="61" pos:column="34">&amp;&amp;<pos:position pos:line="61" pos:column="44"/></operator> <operator pos:line="61" pos:column="37">!<pos:position pos:line="61" pos:column="38"/></operator><call><name pos:line="61" pos:column="38">strcasecmp<pos:position pos:line="61" pos:column="48"/></name><argument_list pos:line="61" pos:column="48">(<argument><expr><name pos:line="61" pos:column="49">first<pos:position pos:line="61" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="56">begin_token<pos:position pos:line="61" pos:column="67"/></name></expr></argument>)<pos:position pos:line="61" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="61" pos:column="69"/></condition><then pos:line="61" pos:column="69"> <block pos:line="61" pos:column="70">{
                <expr_stmt><expr><name pos:line="62" pos:column="17">macro_nesting<pos:position pos:line="62" pos:column="30"/></name><operator pos:line="62" pos:column="30">++<pos:position pos:line="62" pos:column="32"/></operator></expr>;<pos:position pos:line="62" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="63" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="65" pos:column="9">new<pos:position pos:line="65" pos:column="12"/></operator> <operator pos:line="65" pos:column="13">=<pos:position pos:line="65" pos:column="14"/></operator> <call><name pos:line="65" pos:column="15">apr_array_push<pos:position pos:line="65" pos:column="29"/></name><argument_list pos:line="65" pos:column="29">(<argument><expr><name pos:line="65" pos:column="30">lines<pos:position pos:line="65" pos:column="35"/></name></expr></argument>)<pos:position pos:line="65" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="66" pos:column="9">*<pos:position pos:line="66" pos:column="10"/></operator><operator pos:line="66" pos:column="10">new<pos:position pos:line="66" pos:column="13"/></operator> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <call><name pos:line="66" pos:column="16">apr_psprintf<pos:position pos:line="66" pos:column="28"/></name><argument_list pos:line="66" pos:column="28">(<argument><expr><name pos:line="66" pos:column="29">pool<pos:position pos:line="66" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="35">"%s"<pos:position pos:line="66" pos:column="39"/></literal> <name pos:line="66" pos:column="40">APR_EOL_STR<pos:position pos:line="66" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="53">line<pos:position pos:line="66" pos:column="57"/></name></expr></argument>)<pos:position pos:line="66" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="59"/></expr_stmt> <comment type="block" pos:line="66" pos:column="60">/* put EOL back? */</comment>
    }<pos:position pos:line="67" pos:column="6"/></block></while>

    <return pos:line="69" pos:column="5">return <expr><call><name pos:line="69" pos:column="12">apr_psprintf<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><name pos:line="69" pos:column="25">pool<pos:position pos:line="69" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="31">"expected token not found: %s"<pos:position pos:line="69" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="69" pos:column="63">end_token<pos:position pos:line="69" pos:column="72"/></name></expr></argument>)<pos:position pos:line="69" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="74"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
