<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_2551.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name> <parameter_list pos:line="1" pos:column="10">(<parameter><decl><type><name pos:line="1" pos:column="11">int<pos:position pos:line="1" pos:column="14"/></name></type> <name pos:line="1" pos:column="15">argc<pos:position pos:line="1" pos:column="19"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="21">const<pos:position pos:line="1" pos:column="26"/></specifier> <name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier> <specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier></type> <name><name pos:line="1" pos:column="40">argv<pos:position pos:line="1" pos:column="44"/></name><index pos:line="1" pos:column="44">[]<pos:position pos:line="1" pos:column="46"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name></type> <name><name pos:line="3" pos:column="10">buf<pos:position pos:line="3" pos:column="13"/></name><index pos:line="3" pos:column="13">[<expr><name pos:line="3" pos:column="14">BUFSIZE<pos:position pos:line="3" pos:column="21"/></name></expr>]<pos:position pos:line="3" pos:column="22"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="3" pos:column="24">buf2<pos:position pos:line="3" pos:column="28"/></name><index pos:line="3" pos:column="28">[<expr><name pos:line="3" pos:column="29">MAX_PATH<pos:position pos:line="3" pos:column="37"/></name></expr>]<pos:position pos:line="3" pos:column="38"/></index></name></decl>, <decl><type ref="prev"/><name><name pos:line="3" pos:column="40">errbuf<pos:position pos:line="3" pos:column="46"/></name><index pos:line="3" pos:column="46">[<expr><name pos:line="3" pos:column="47">ERRMSGSZ<pos:position pos:line="3" pos:column="55"/></name></expr>]<pos:position pos:line="3" pos:column="56"/></index></name></decl>;<pos:position pos:line="3" pos:column="57"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">tLogEnd<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="22">tRotation<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><literal type="number" pos:line="4" pos:column="34">0<pos:position pos:line="4" pos:column="35"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="37">utc_offset<pos:position pos:line="4" pos:column="47"/></name> <init pos:line="4" pos:column="48">= <expr><literal type="number" pos:line="4" pos:column="50">0<pos:position pos:line="4" pos:column="51"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">unsigned<pos:position pos:line="5" pos:column="13"/></name> <name pos:line="5" pos:column="14">int<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">sRotation<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><literal type="number" pos:line="5" pos:column="30">0<pos:position pos:line="5" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">nMessCount<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">nRead<pos:position pos:line="7" pos:column="21"/></name></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="23">nWrite<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">use_strftime<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">use_localtime<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><literal type="number" pos:line="9" pos:column="25">0<pos:position pos:line="9" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">bypass_io<pos:position pos:line="10" pos:column="18"/></name> <init pos:line="10" pos:column="19">= <expr><literal type="number" pos:line="10" pos:column="21">0<pos:position pos:line="10" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">now<pos:position pos:line="11" pos:column="12"/></name> <init pos:line="11" pos:column="13">= <expr><literal type="number" pos:line="11" pos:column="15">0<pos:position pos:line="11" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">szLogRoot<pos:position pos:line="12" pos:column="26"/></name></decl>;<pos:position pos:line="12" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">apr_file_t<pos:position pos:line="13" pos:column="15"/></name> <modifier pos:line="13" pos:column="16">*<pos:position pos:line="13" pos:column="17"/></modifier></type><name pos:line="13" pos:column="17">f_stdin<pos:position pos:line="13" pos:column="24"/></name></decl>, <modifier pos:line="13" pos:column="26">*<pos:position pos:line="13" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="13" pos:column="27">nLogFD<pos:position pos:line="13" pos:column="33"/></name> <init pos:line="13" pos:column="34">= <expr><name pos:line="13" pos:column="36">NULL<pos:position pos:line="13" pos:column="40"/></name></expr></init></decl>, <modifier pos:line="13" pos:column="42">*<pos:position pos:line="13" pos:column="43"/></modifier><decl><type ref="prev"/><name pos:line="13" pos:column="43">nLogFDprev<pos:position pos:line="13" pos:column="53"/></name> <init pos:line="13" pos:column="54">= <expr><name pos:line="13" pos:column="56">NULL<pos:position pos:line="13" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="13" pos:column="61"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">apr_pool_t<pos:position pos:line="14" pos:column="15"/></name> <modifier pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></modifier></type><name pos:line="14" pos:column="17">pool<pos:position pos:line="14" pos:column="21"/></name></decl>;<pos:position pos:line="14" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">apr_pool_t<pos:position pos:line="15" pos:column="15"/></name> <modifier pos:line="15" pos:column="16">*<pos:position pos:line="15" pos:column="17"/></modifier></type><name pos:line="15" pos:column="17">pfile<pos:position pos:line="15" pos:column="22"/></name> <init pos:line="15" pos:column="23">= <expr><name pos:line="15" pos:column="25">NULL<pos:position pos:line="15" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">apr_pool_t<pos:position pos:line="16" pos:column="15"/></name> <modifier pos:line="16" pos:column="16">*<pos:position pos:line="16" pos:column="17"/></modifier></type><name pos:line="16" pos:column="17">pfile_prev<pos:position pos:line="16" pos:column="27"/></name> <init pos:line="16" pos:column="28">= <expr><name pos:line="16" pos:column="30">NULL<pos:position pos:line="16" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="16" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">apr_getopt_t<pos:position pos:line="17" pos:column="17"/></name> <modifier pos:line="17" pos:column="18">*<pos:position pos:line="17" pos:column="19"/></modifier></type><name pos:line="17" pos:column="19">opt<pos:position pos:line="17" pos:column="22"/></name></decl>;<pos:position pos:line="17" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">apr_status_t<pos:position pos:line="18" pos:column="17"/></name></type> <name pos:line="18" pos:column="18">rv<pos:position pos:line="18" pos:column="20"/></name></decl>;<pos:position pos:line="18" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">char<pos:position pos:line="19" pos:column="9"/></name></type> <name pos:line="19" pos:column="10">c<pos:position pos:line="19" pos:column="11"/></name></decl>;<pos:position pos:line="19" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="20" pos:column="5">const<pos:position pos:line="20" pos:column="10"/></specifier> <name pos:line="20" pos:column="11">char<pos:position pos:line="20" pos:column="15"/></name> <modifier pos:line="20" pos:column="16">*<pos:position pos:line="20" pos:column="17"/></modifier></type><name pos:line="20" pos:column="17">optarg<pos:position pos:line="20" pos:column="23"/></name></decl>;<pos:position pos:line="20" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">char<pos:position pos:line="21" pos:column="9"/></name> <modifier pos:line="21" pos:column="10">*<pos:position pos:line="21" pos:column="11"/></modifier></type><name pos:line="21" pos:column="11">ptr<pos:position pos:line="21" pos:column="14"/></name> <init pos:line="21" pos:column="15">= <expr><name pos:line="21" pos:column="17">NULL<pos:position pos:line="21" pos:column="21"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="22"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="23" pos:column="5">apr_app_initialize<pos:position pos:line="23" pos:column="23"/></name><argument_list pos:line="23" pos:column="23">(<argument><expr><operator pos:line="23" pos:column="24">&amp;<pos:position pos:line="23" pos:column="29"/></operator><name pos:line="23" pos:column="25">argc<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="31">&amp;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="32">argv<pos:position pos:line="23" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="38">NULL<pos:position pos:line="23" pos:column="42"/></name></expr></argument>)<pos:position pos:line="23" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="24" pos:column="5">atexit<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><name pos:line="24" pos:column="12">apr_terminate<pos:position pos:line="24" pos:column="25"/></name></expr></argument>)<pos:position pos:line="24" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">apr_pool_create<pos:position pos:line="26" pos:column="20"/></name><argument_list pos:line="26" pos:column="20">(<argument><expr><operator pos:line="26" pos:column="21">&amp;<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="22">pool<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">NULL<pos:position pos:line="26" pos:column="32"/></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="27" pos:column="5">apr_getopt_init<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><operator pos:line="27" pos:column="21">&amp;<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="22">opt<pos:position pos:line="27" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="27">pool<pos:position pos:line="27" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="33">argc<pos:position pos:line="27" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="39">argv<pos:position pos:line="27" pos:column="43"/></name></expr></argument>)<pos:position pos:line="27" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="45"/></expr_stmt>
    <while pos:line="28" pos:column="5">while <condition pos:line="28" pos:column="11">(<expr><operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><name pos:line="28" pos:column="13">rv<pos:position pos:line="28" pos:column="15"/></name> <operator pos:line="28" pos:column="16">=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">apr_getopt<pos:position pos:line="28" pos:column="28"/></name><argument_list pos:line="28" pos:column="28">(<argument><expr><name pos:line="28" pos:column="29">opt<pos:position pos:line="28" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="34">"lf"<pos:position pos:line="28" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="28" pos:column="40">&amp;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="41">c<pos:position pos:line="28" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="44">&amp;<pos:position pos:line="28" pos:column="49"/></operator><name pos:line="28" pos:column="45">optarg<pos:position pos:line="28" pos:column="51"/></name></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call><operator pos:line="28" pos:column="52">)<pos:position pos:line="28" pos:column="53"/></operator> <operator pos:line="28" pos:column="54">==<pos:position pos:line="28" pos:column="56"/></operator> <name pos:line="28" pos:column="57">APR_SUCCESS<pos:position pos:line="28" pos:column="68"/></name></expr>)<pos:position pos:line="28" pos:column="69"/></condition> <block pos:line="28" pos:column="70">{
        <switch pos:line="29" pos:column="9">switch <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">c<pos:position pos:line="29" pos:column="18"/></name></expr>)<pos:position pos:line="29" pos:column="19"/></condition> <block pos:line="29" pos:column="20">{
        <case pos:line="30" pos:column="9">case <expr><literal type="char" pos:line="30" pos:column="14">'l'<pos:position pos:line="30" pos:column="17"/></literal></expr>:<pos:position pos:line="30" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="31" pos:column="13">use_localtime<pos:position pos:line="31" pos:column="26"/></name> <operator pos:line="31" pos:column="27">=<pos:position pos:line="31" pos:column="28"/></operator> <literal type="number" pos:line="31" pos:column="29">1<pos:position pos:line="31" pos:column="30"/></literal></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
            <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>
        <case pos:line="33" pos:column="9">case <expr><literal type="char" pos:line="33" pos:column="14">'f'<pos:position pos:line="33" pos:column="17"/></literal></expr>:<pos:position pos:line="33" pos:column="18"/></case>
            <expr_stmt><expr><name pos:line="34" pos:column="13">bypass_io<pos:position pos:line="34" pos:column="22"/></name> <operator pos:line="34" pos:column="23">=<pos:position pos:line="34" pos:column="24"/></operator> <literal type="number" pos:line="34" pos:column="25">1<pos:position pos:line="34" pos:column="26"/></literal></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
            <break pos:line="35" pos:column="13">break;<pos:position pos:line="35" pos:column="19"/></break>
        }<pos:position pos:line="36" pos:column="10"/></block></switch>
    }<pos:position pos:line="37" pos:column="6"/></block></while>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">rv<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">!=<pos:position pos:line="39" pos:column="14"/></operator> <name pos:line="39" pos:column="15">APR_EOF<pos:position pos:line="39" pos:column="22"/></name></expr>)<pos:position pos:line="39" pos:column="23"/></condition><then pos:line="39" pos:column="23"> <block pos:line="39" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">usage<pos:position pos:line="40" pos:column="14"/></name><argument_list pos:line="40" pos:column="14">(<argument><expr><name><name pos:line="40" pos:column="15">argv<pos:position pos:line="40" pos:column="19"/></name><index pos:line="40" pos:column="19">[<expr><literal type="number" pos:line="40" pos:column="20">0<pos:position pos:line="40" pos:column="21"/></literal></expr>]<pos:position pos:line="40" pos:column="22"/></index></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="24">NULL<pos:position pos:line="40" pos:column="28"/></name></expr></argument> <comment type="block" pos:line="40" pos:column="29">/* specific error message already issued */</comment> )<pos:position pos:line="40" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name><name pos:line="43" pos:column="9">opt<pos:position pos:line="43" pos:column="12"/></name><operator pos:line="43" pos:column="12">-&gt;<pos:position pos:line="43" pos:column="17"/></operator><name pos:line="43" pos:column="14">ind<pos:position pos:line="43" pos:column="17"/></name></name> <operator pos:line="43" pos:column="18">+<pos:position pos:line="43" pos:column="19"/></operator> <literal type="number" pos:line="43" pos:column="20">2<pos:position pos:line="43" pos:column="21"/></literal> <operator pos:line="43" pos:column="22">!=<pos:position pos:line="43" pos:column="24"/></operator> <name pos:line="43" pos:column="25">argc<pos:position pos:line="43" pos:column="29"/></name> <operator pos:line="43" pos:column="30">&amp;&amp;<pos:position pos:line="43" pos:column="40"/></operator> <name><name pos:line="43" pos:column="33">opt<pos:position pos:line="43" pos:column="36"/></name><operator pos:line="43" pos:column="36">-&gt;<pos:position pos:line="43" pos:column="41"/></operator><name pos:line="43" pos:column="38">ind<pos:position pos:line="43" pos:column="41"/></name></name> <operator pos:line="43" pos:column="42">+<pos:position pos:line="43" pos:column="43"/></operator> <literal type="number" pos:line="43" pos:column="44">3<pos:position pos:line="43" pos:column="45"/></literal> <operator pos:line="43" pos:column="46">!=<pos:position pos:line="43" pos:column="48"/></operator> <name pos:line="43" pos:column="49">argc<pos:position pos:line="43" pos:column="53"/></name></expr>)<pos:position pos:line="43" pos:column="54"/></condition><then pos:line="43" pos:column="54"> <block pos:line="43" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">usage<pos:position pos:line="44" pos:column="14"/></name><argument_list pos:line="44" pos:column="14">(<argument><expr><name><name pos:line="44" pos:column="15">argv<pos:position pos:line="44" pos:column="19"/></name><index pos:line="44" pos:column="19">[<expr><literal type="number" pos:line="44" pos:column="20">0<pos:position pos:line="44" pos:column="21"/></literal></expr>]<pos:position pos:line="44" pos:column="22"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="24">"Incorrect number of arguments"<pos:position pos:line="44" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="47" pos:column="5">szLogRoot<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">=<pos:position pos:line="47" pos:column="16"/></operator> <name><name pos:line="47" pos:column="17">argv<pos:position pos:line="47" pos:column="21"/></name><index pos:line="47" pos:column="21">[<expr><name><name pos:line="47" pos:column="22">opt<pos:position pos:line="47" pos:column="25"/></name><operator pos:line="47" pos:column="25">-&gt;<pos:position pos:line="47" pos:column="30"/></operator><name pos:line="47" pos:column="27">ind<pos:position pos:line="47" pos:column="30"/></name></name><operator pos:line="47" pos:column="30">++<pos:position pos:line="47" pos:column="32"/></operator></expr>]<pos:position pos:line="47" pos:column="33"/></index></name></expr>;<pos:position pos:line="47" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name pos:line="49" pos:column="5">ptr<pos:position pos:line="49" pos:column="8"/></name> <operator pos:line="49" pos:column="9">=<pos:position pos:line="49" pos:column="10"/></operator> <call><name pos:line="49" pos:column="11">strchr<pos:position pos:line="49" pos:column="17"/></name><argument_list pos:line="49" pos:column="17">(<argument><expr><name><name pos:line="49" pos:column="18">argv<pos:position pos:line="49" pos:column="22"/></name><index pos:line="49" pos:column="22">[<expr><name><name pos:line="49" pos:column="23">opt<pos:position pos:line="49" pos:column="26"/></name><operator pos:line="49" pos:column="26">-&gt;<pos:position pos:line="49" pos:column="31"/></operator><name pos:line="49" pos:column="28">ind<pos:position pos:line="49" pos:column="31"/></name></name></expr>]<pos:position pos:line="49" pos:column="32"/></index></name></expr></argument>, <argument><expr><literal type="char" pos:line="49" pos:column="34">'M'<pos:position pos:line="49" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">ptr<pos:position pos:line="50" pos:column="12"/></name></expr>)<pos:position pos:line="50" pos:column="13"/></condition><then pos:line="50" pos:column="13"> <block pos:line="50" pos:column="14">{ <comment type="block" pos:line="50" pos:column="16">/* rotation based on file size */</comment>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><operator pos:line="51" pos:column="13">*<pos:position pos:line="51" pos:column="14"/></operator><operator pos:line="51" pos:column="14">(<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="15">ptr<pos:position pos:line="51" pos:column="18"/></name><operator pos:line="51" pos:column="18">+<pos:position pos:line="51" pos:column="19"/></operator><literal type="number" pos:line="51" pos:column="19">1<pos:position pos:line="51" pos:column="20"/></literal><operator pos:line="51" pos:column="20">)<pos:position pos:line="51" pos:column="21"/></operator> <operator pos:line="51" pos:column="22">==<pos:position pos:line="51" pos:column="24"/></operator> <literal type="char" pos:line="51" pos:column="25">'\0'<pos:position pos:line="51" pos:column="29"/></literal></expr>)<pos:position pos:line="51" pos:column="30"/></condition><then pos:line="51" pos:column="30"> <block pos:line="51" pos:column="31">{
            <expr_stmt><expr><name pos:line="52" pos:column="13">sRotation<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">=<pos:position pos:line="52" pos:column="24"/></operator> <call><name pos:line="52" pos:column="25">atoi<pos:position pos:line="52" pos:column="29"/></name><argument_list pos:line="52" pos:column="29">(<argument><expr><name><name pos:line="52" pos:column="30">argv<pos:position pos:line="52" pos:column="34"/></name><index pos:line="52" pos:column="34">[<expr><name><name pos:line="52" pos:column="35">opt<pos:position pos:line="52" pos:column="38"/></name><operator pos:line="52" pos:column="38">-&gt;<pos:position pos:line="52" pos:column="43"/></operator><name pos:line="52" pos:column="40">ind<pos:position pos:line="52" pos:column="43"/></name></name></expr>]<pos:position pos:line="52" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="52" pos:column="45"/></argument_list></call> <operator pos:line="52" pos:column="46">*<pos:position pos:line="52" pos:column="47"/></operator> <literal type="number" pos:line="52" pos:column="48">1048576<pos:position pos:line="52" pos:column="55"/></literal></expr>;<pos:position pos:line="52" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <if pos:line="54" pos:column="9">if <condition pos:line="54" pos:column="12">(<expr><name pos:line="54" pos:column="13">sRotation<pos:position pos:line="54" pos:column="22"/></name> <operator pos:line="54" pos:column="23">==<pos:position pos:line="54" pos:column="25"/></operator> <literal type="number" pos:line="54" pos:column="26">0<pos:position pos:line="54" pos:column="27"/></literal></expr>)<pos:position pos:line="54" pos:column="28"/></condition><then pos:line="54" pos:column="28"> <block pos:line="54" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">usage<pos:position pos:line="55" pos:column="18"/></name><argument_list pos:line="55" pos:column="18">(<argument><expr><name><name pos:line="55" pos:column="19">argv<pos:position pos:line="55" pos:column="23"/></name><index pos:line="55" pos:column="23">[<expr><literal type="number" pos:line="55" pos:column="24">0<pos:position pos:line="55" pos:column="25"/></literal></expr>]<pos:position pos:line="55" pos:column="26"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="28">"Invalid rotation size parameter"<pos:position pos:line="55" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="63"/></expr_stmt>
        }<pos:position pos:line="56" pos:column="10"/></block></then></if>
    }<pos:position pos:line="57" pos:column="6"/></block></then>
    <else pos:line="58" pos:column="5">else <block pos:line="58" pos:column="10">{ <comment type="block" pos:line="58" pos:column="12">/* rotation based on elapsed time */</comment>
        <expr_stmt><expr><name pos:line="59" pos:column="9">tRotation<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <call><name pos:line="59" pos:column="21">atoi<pos:position pos:line="59" pos:column="25"/></name><argument_list pos:line="59" pos:column="25">(<argument><expr><name><name pos:line="59" pos:column="26">argv<pos:position pos:line="59" pos:column="30"/></name><index pos:line="59" pos:column="30">[<expr><name><name pos:line="59" pos:column="31">opt<pos:position pos:line="59" pos:column="34"/></name><operator pos:line="59" pos:column="34">-&gt;<pos:position pos:line="59" pos:column="39"/></operator><name pos:line="59" pos:column="36">ind<pos:position pos:line="59" pos:column="39"/></name></name></expr>]<pos:position pos:line="59" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="59" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="42"/></expr_stmt>
        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><name pos:line="60" pos:column="13">tRotation<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">&lt;=<pos:position pos:line="60" pos:column="28"/></operator> <literal type="number" pos:line="60" pos:column="26">0<pos:position pos:line="60" pos:column="27"/></literal></expr>)<pos:position pos:line="60" pos:column="28"/></condition><then pos:line="60" pos:column="28"> <block pos:line="60" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="61" pos:column="13">usage<pos:position pos:line="61" pos:column="18"/></name><argument_list pos:line="61" pos:column="18">(<argument><expr><name><name pos:line="61" pos:column="19">argv<pos:position pos:line="61" pos:column="23"/></name><index pos:line="61" pos:column="23">[<expr><literal type="number" pos:line="61" pos:column="24">0<pos:position pos:line="61" pos:column="25"/></literal></expr>]<pos:position pos:line="61" pos:column="26"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="28">"Invalid rotation time parameter"<pos:position pos:line="61" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="63"/></expr_stmt>
        }<pos:position pos:line="62" pos:column="10"/></block></then></if>
    }<pos:position pos:line="63" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">opt<pos:position pos:line="64" pos:column="8"/></name><operator pos:line="64" pos:column="8">-&gt;<pos:position pos:line="64" pos:column="13"/></operator><name pos:line="64" pos:column="10">ind<pos:position pos:line="64" pos:column="13"/></name></name><operator pos:line="64" pos:column="13">++<pos:position pos:line="64" pos:column="15"/></operator></expr>;<pos:position pos:line="64" pos:column="16"/></expr_stmt>

    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><name><name pos:line="66" pos:column="9">opt<pos:position pos:line="66" pos:column="12"/></name><operator pos:line="66" pos:column="12">-&gt;<pos:position pos:line="66" pos:column="17"/></operator><name pos:line="66" pos:column="14">ind<pos:position pos:line="66" pos:column="17"/></name></name> <operator pos:line="66" pos:column="18">&lt;<pos:position pos:line="66" pos:column="22"/></operator> <name pos:line="66" pos:column="20">argc<pos:position pos:line="66" pos:column="24"/></name></expr>)<pos:position pos:line="66" pos:column="25"/></condition><then pos:line="66" pos:column="25"> <block pos:line="66" pos:column="26">{ <comment type="block" pos:line="66" pos:column="28">/* have UTC offset */</comment>
        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">use_localtime<pos:position pos:line="67" pos:column="26"/></name></expr>)<pos:position pos:line="67" pos:column="27"/></condition><then pos:line="67" pos:column="27"> <block pos:line="67" pos:column="28">{
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">usage<pos:position pos:line="68" pos:column="18"/></name><argument_list pos:line="68" pos:column="18">(<argument><expr><name><name pos:line="68" pos:column="19">argv<pos:position pos:line="68" pos:column="23"/></name><index pos:line="68" pos:column="23">[<expr><literal type="number" pos:line="68" pos:column="24">0<pos:position pos:line="68" pos:column="25"/></literal></expr>]<pos:position pos:line="68" pos:column="26"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="28">"UTC offset parameter is not valid with -l"<pos:position pos:line="68" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="73"/></expr_stmt>
        }<pos:position pos:line="69" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="70" pos:column="9">utc_offset<pos:position pos:line="70" pos:column="19"/></name> <operator pos:line="70" pos:column="20">=<pos:position pos:line="70" pos:column="21"/></operator> <call><name pos:line="70" pos:column="22">atoi<pos:position pos:line="70" pos:column="26"/></name><argument_list pos:line="70" pos:column="26">(<argument><expr><name><name pos:line="70" pos:column="27">argv<pos:position pos:line="70" pos:column="31"/></name><index pos:line="70" pos:column="31">[<expr><name><name pos:line="70" pos:column="32">opt<pos:position pos:line="70" pos:column="35"/></name><operator pos:line="70" pos:column="35">-&gt;<pos:position pos:line="70" pos:column="40"/></operator><name pos:line="70" pos:column="37">ind<pos:position pos:line="70" pos:column="40"/></name></name></expr>]<pos:position pos:line="70" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="70" pos:column="42"/></argument_list></call> <operator pos:line="70" pos:column="43">*<pos:position pos:line="70" pos:column="44"/></operator> <literal type="number" pos:line="70" pos:column="45">60<pos:position pos:line="70" pos:column="47"/></literal></expr>;<pos:position pos:line="70" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="73" pos:column="5">use_strftime<pos:position pos:line="73" pos:column="17"/></name> <operator pos:line="73" pos:column="18">=<pos:position pos:line="73" pos:column="19"/></operator> <operator pos:line="73" pos:column="20">(<pos:position pos:line="73" pos:column="21"/></operator><call><name pos:line="73" pos:column="21">strchr<pos:position pos:line="73" pos:column="27"/></name><argument_list pos:line="73" pos:column="27">(<argument><expr><name pos:line="73" pos:column="28">szLogRoot<pos:position pos:line="73" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="73" pos:column="39">'%'<pos:position pos:line="73" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="43"/></argument_list></call> <operator pos:line="73" pos:column="44">!=<pos:position pos:line="73" pos:column="46"/></operator> <name pos:line="73" pos:column="47">NULL<pos:position pos:line="73" pos:column="51"/></name><operator pos:line="73" pos:column="51">)<pos:position pos:line="73" pos:column="52"/></operator></expr>;<pos:position pos:line="73" pos:column="53"/></expr_stmt>
    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><call><name pos:line="74" pos:column="9">apr_file_open_stdin<pos:position pos:line="74" pos:column="28"/></name><argument_list pos:line="74" pos:column="28">(<argument><expr><operator pos:line="74" pos:column="29">&amp;<pos:position pos:line="74" pos:column="34"/></operator><name pos:line="74" pos:column="30">f_stdin<pos:position pos:line="74" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="39">pool<pos:position pos:line="74" pos:column="43"/></name></expr></argument>)<pos:position pos:line="74" pos:column="44"/></argument_list></call> <operator pos:line="74" pos:column="45">!=<pos:position pos:line="74" pos:column="47"/></operator> <name pos:line="74" pos:column="48">APR_SUCCESS<pos:position pos:line="74" pos:column="59"/></name></expr>)<pos:position pos:line="74" pos:column="60"/></condition><then pos:line="74" pos:column="60"> <block pos:line="74" pos:column="61">{
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">fprintf<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">stderr<pos:position pos:line="75" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="25">"Unable to open stdin\n"<pos:position pos:line="75" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">exit<pos:position pos:line="76" pos:column="13"/></name><argument_list pos:line="76" pos:column="13">(<argument><expr><literal type="number" pos:line="76" pos:column="14">1<pos:position pos:line="76" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <for pos:line="79" pos:column="5">for <control pos:line="79" pos:column="9">(<init pos:line="79" pos:column="10">;<pos:position pos:line="79" pos:column="11"/></init><condition pos:line="79" pos:column="11">;<pos:position pos:line="79" pos:column="12"/></condition><incr/>)<pos:position pos:line="79" pos:column="13"/></control> <block pos:line="79" pos:column="14">{
        <expr_stmt><expr><name pos:line="80" pos:column="9">nRead<pos:position pos:line="80" pos:column="14"/></name> <operator pos:line="80" pos:column="15">=<pos:position pos:line="80" pos:column="16"/></operator> <sizeof pos:line="80" pos:column="17">sizeof<argument_list pos:line="80" pos:column="23">(<argument><expr><name pos:line="80" pos:column="24">buf<pos:position pos:line="80" pos:column="27"/></name></expr></argument>)<pos:position pos:line="80" pos:column="28"/></argument_list></sizeof></expr>;<pos:position pos:line="80" pos:column="29"/></expr_stmt>
        <comment type="block" pos:line="81" pos:column="9">/*
         * Bypass reading stdin if we are forcing the logfile
         * to be opened as soon as we start. Since we won't be
         * writing anything, we just want to open the file.
         * First time through is the only time we do this
         * since we reset bypass_io after the 1st loop
         */</comment>
        <if pos:line="88" pos:column="9">if <condition pos:line="88" pos:column="12">(<expr><operator pos:line="88" pos:column="13">!<pos:position pos:line="88" pos:column="14"/></operator><name pos:line="88" pos:column="14">bypass_io<pos:position pos:line="88" pos:column="23"/></name></expr>)<pos:position pos:line="88" pos:column="24"/></condition><then pos:line="88" pos:column="24"> <block pos:line="88" pos:column="25">{
            <if pos:line="89" pos:column="13">if <condition pos:line="89" pos:column="16">(<expr><call><name pos:line="89" pos:column="17">apr_file_read<pos:position pos:line="89" pos:column="30"/></name><argument_list pos:line="89" pos:column="30">(<argument><expr><name pos:line="89" pos:column="31">f_stdin<pos:position pos:line="89" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="40">buf<pos:position pos:line="89" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="89" pos:column="45">&amp;<pos:position pos:line="89" pos:column="50"/></operator><name pos:line="89" pos:column="46">nRead<pos:position pos:line="89" pos:column="51"/></name></expr></argument>)<pos:position pos:line="89" pos:column="52"/></argument_list></call> <operator pos:line="89" pos:column="53">!=<pos:position pos:line="89" pos:column="55"/></operator> <name pos:line="89" pos:column="56">APR_SUCCESS<pos:position pos:line="89" pos:column="67"/></name></expr>)<pos:position pos:line="89" pos:column="68"/></condition><then pos:line="89" pos:column="68"> <block pos:line="89" pos:column="69">{
                <expr_stmt><expr><call><name pos:line="90" pos:column="17">exit<pos:position pos:line="90" pos:column="21"/></name><argument_list pos:line="90" pos:column="21">(<argument><expr><literal type="number" pos:line="90" pos:column="22">3<pos:position pos:line="90" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="91" pos:column="14"/></block></then></if>
        }<pos:position pos:line="92" pos:column="10"/></block></then></if>
        <if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name pos:line="93" pos:column="13">tRotation<pos:position pos:line="93" pos:column="22"/></name></expr>)<pos:position pos:line="93" pos:column="23"/></condition><then pos:line="93" pos:column="23"> <block pos:line="93" pos:column="24">{
            <expr_stmt><expr><name pos:line="94" pos:column="13">now<pos:position pos:line="94" pos:column="16"/></name> <operator pos:line="94" pos:column="17">=<pos:position pos:line="94" pos:column="18"/></operator> <call><name pos:line="94" pos:column="19">get_now<pos:position pos:line="94" pos:column="26"/></name><argument_list pos:line="94" pos:column="26">(<argument><expr><name pos:line="94" pos:column="27">use_localtime<pos:position pos:line="94" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="42">utc_offset<pos:position pos:line="94" pos:column="52"/></name></expr></argument>)<pos:position pos:line="94" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="54"/></expr_stmt>
            <if pos:line="95" pos:column="13">if <condition pos:line="95" pos:column="16">(<expr><name pos:line="95" pos:column="17">nLogFD<pos:position pos:line="95" pos:column="23"/></name> <operator pos:line="95" pos:column="24">!=<pos:position pos:line="95" pos:column="26"/></operator> <name pos:line="95" pos:column="27">NULL<pos:position pos:line="95" pos:column="31"/></name> <operator pos:line="95" pos:column="32">&amp;&amp;<pos:position pos:line="95" pos:column="42"/></operator> <name pos:line="95" pos:column="35">now<pos:position pos:line="95" pos:column="38"/></name> <operator pos:line="95" pos:column="39">&gt;=<pos:position pos:line="95" pos:column="44"/></operator> <name pos:line="95" pos:column="42">tLogEnd<pos:position pos:line="95" pos:column="49"/></name></expr>)<pos:position pos:line="95" pos:column="50"/></condition><then pos:line="95" pos:column="50"> <block pos:line="95" pos:column="51">{
                <expr_stmt><expr><name pos:line="96" pos:column="17">nLogFDprev<pos:position pos:line="96" pos:column="27"/></name> <operator pos:line="96" pos:column="28">=<pos:position pos:line="96" pos:column="29"/></operator> <name pos:line="96" pos:column="30">nLogFD<pos:position pos:line="96" pos:column="36"/></name></expr>;<pos:position pos:line="96" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name pos:line="97" pos:column="17">nLogFD<pos:position pos:line="97" pos:column="23"/></name> <operator pos:line="97" pos:column="24">=<pos:position pos:line="97" pos:column="25"/></operator> <name pos:line="97" pos:column="26">NULL<pos:position pos:line="97" pos:column="30"/></name></expr>;<pos:position pos:line="97" pos:column="31"/></expr_stmt>
            }<pos:position pos:line="98" pos:column="14"/></block></then></if>
        }<pos:position pos:line="99" pos:column="10"/></block></then>
        <elseif pos:line="100" pos:column="9">else <if pos:line="100" pos:column="14">if <condition pos:line="100" pos:column="17">(<expr><name pos:line="100" pos:column="18">sRotation<pos:position pos:line="100" pos:column="27"/></name></expr>)<pos:position pos:line="100" pos:column="28"/></condition><then pos:line="100" pos:column="28"> <block pos:line="100" pos:column="29">{
            <decl_stmt><decl><type><name pos:line="101" pos:column="13">apr_finfo_t<pos:position pos:line="101" pos:column="24"/></name></type> <name pos:line="101" pos:column="25">finfo<pos:position pos:line="101" pos:column="30"/></name></decl>;<pos:position pos:line="101" pos:column="31"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="102" pos:column="13">apr_off_t<pos:position pos:line="102" pos:column="22"/></name></type> <name pos:line="102" pos:column="23">current_size<pos:position pos:line="102" pos:column="35"/></name> <init pos:line="102" pos:column="36">= <expr><operator pos:line="102" pos:column="38">-<pos:position pos:line="102" pos:column="39"/></operator><literal type="number" pos:line="102" pos:column="39">1<pos:position pos:line="102" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="102" pos:column="41"/></decl_stmt>

            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><operator pos:line="104" pos:column="17">(<pos:position pos:line="104" pos:column="18"/></operator><name pos:line="104" pos:column="18">nLogFD<pos:position pos:line="104" pos:column="24"/></name> <operator pos:line="104" pos:column="25">!=<pos:position pos:line="104" pos:column="27"/></operator> <name pos:line="104" pos:column="28">NULL<pos:position pos:line="104" pos:column="32"/></name><operator pos:line="104" pos:column="32">)<pos:position pos:line="104" pos:column="33"/></operator> <operator pos:line="104" pos:column="34">&amp;&amp;<pos:position pos:line="104" pos:column="44"/></operator>
                <operator pos:line="105" pos:column="17">(<pos:position pos:line="105" pos:column="18"/></operator><call><name pos:line="105" pos:column="18">apr_file_info_get<pos:position pos:line="105" pos:column="35"/></name><argument_list pos:line="105" pos:column="35">(<argument><expr><operator pos:line="105" pos:column="36">&amp;<pos:position pos:line="105" pos:column="41"/></operator><name pos:line="105" pos:column="37">finfo<pos:position pos:line="105" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="44">APR_FINFO_SIZE<pos:position pos:line="105" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="60">nLogFD<pos:position pos:line="105" pos:column="66"/></name></expr></argument>)<pos:position pos:line="105" pos:column="67"/></argument_list></call> <operator pos:line="105" pos:column="68">==<pos:position pos:line="105" pos:column="70"/></operator> <name pos:line="105" pos:column="71">APR_SUCCESS<pos:position pos:line="105" pos:column="82"/></name><operator pos:line="105" pos:column="82">)<pos:position pos:line="105" pos:column="83"/></operator></expr>)<pos:position pos:line="105" pos:column="84"/></condition><then pos:line="105" pos:column="84"> <block pos:line="105" pos:column="85">{
                <expr_stmt><expr><name pos:line="106" pos:column="17">current_size<pos:position pos:line="106" pos:column="29"/></name> <operator pos:line="106" pos:column="30">=<pos:position pos:line="106" pos:column="31"/></operator> <name><name pos:line="106" pos:column="32">finfo<pos:position pos:line="106" pos:column="37"/></name><operator pos:line="106" pos:column="37">.<pos:position pos:line="106" pos:column="38"/></operator><name pos:line="106" pos:column="38">size<pos:position pos:line="106" pos:column="42"/></name></name></expr>;<pos:position pos:line="106" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="107" pos:column="14"/></block></then></if>

            <if pos:line="109" pos:column="13">if <condition pos:line="109" pos:column="16">(<expr><name pos:line="109" pos:column="17">current_size<pos:position pos:line="109" pos:column="29"/></name> <operator pos:line="109" pos:column="30">&gt;<pos:position pos:line="109" pos:column="34"/></operator> <name pos:line="109" pos:column="32">sRotation<pos:position pos:line="109" pos:column="41"/></name></expr>)<pos:position pos:line="109" pos:column="42"/></condition><then pos:line="109" pos:column="42"> <block pos:line="109" pos:column="43">{
                <expr_stmt><expr><name pos:line="110" pos:column="17">nLogFDprev<pos:position pos:line="110" pos:column="27"/></name> <operator pos:line="110" pos:column="28">=<pos:position pos:line="110" pos:column="29"/></operator> <name pos:line="110" pos:column="30">nLogFD<pos:position pos:line="110" pos:column="36"/></name></expr>;<pos:position pos:line="110" pos:column="37"/></expr_stmt>
                <expr_stmt><expr><name pos:line="111" pos:column="17">nLogFD<pos:position pos:line="111" pos:column="23"/></name> <operator pos:line="111" pos:column="24">=<pos:position pos:line="111" pos:column="25"/></operator> <name pos:line="111" pos:column="26">NULL<pos:position pos:line="111" pos:column="30"/></name></expr>;<pos:position pos:line="111" pos:column="31"/></expr_stmt>
            }<pos:position pos:line="112" pos:column="14"/></block></then></if>
        }<pos:position pos:line="113" pos:column="10"/></block></then></if></elseif>
        <else pos:line="114" pos:column="9">else <block pos:line="114" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">fprintf<pos:position pos:line="115" pos:column="20"/></name><argument_list pos:line="115" pos:column="20">(<argument><expr><name pos:line="115" pos:column="21">stderr<pos:position pos:line="115" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="29">"No rotation time or size specified\n"<pos:position pos:line="115" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="116" pos:column="13">exit<pos:position pos:line="116" pos:column="17"/></name><argument_list pos:line="116" pos:column="17">(<argument><expr><literal type="number" pos:line="116" pos:column="18">2<pos:position pos:line="116" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="117" pos:column="10"/></block></else></if>

        <if pos:line="119" pos:column="9">if <condition pos:line="119" pos:column="12">(<expr><name pos:line="119" pos:column="13">nLogFD<pos:position pos:line="119" pos:column="19"/></name> <operator pos:line="119" pos:column="20">==<pos:position pos:line="119" pos:column="22"/></operator> <name pos:line="119" pos:column="23">NULL<pos:position pos:line="119" pos:column="27"/></name></expr>)<pos:position pos:line="119" pos:column="28"/></condition><then pos:line="119" pos:column="28"> <block pos:line="119" pos:column="29">{
            <decl_stmt><decl><type><name pos:line="120" pos:column="13">int<pos:position pos:line="120" pos:column="16"/></name></type> <name pos:line="120" pos:column="17">tLogStart<pos:position pos:line="120" pos:column="26"/></name></decl>;<pos:position pos:line="120" pos:column="27"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="121" pos:column="13">apr_status_t<pos:position pos:line="121" pos:column="25"/></name></type> <name pos:line="121" pos:column="26">rv<pos:position pos:line="121" pos:column="28"/></name></decl>;<pos:position pos:line="121" pos:column="29"/></decl_stmt>

            <if pos:line="123" pos:column="13">if <condition pos:line="123" pos:column="16">(<expr><name pos:line="123" pos:column="17">tRotation<pos:position pos:line="123" pos:column="26"/></name></expr>)<pos:position pos:line="123" pos:column="27"/></condition><then pos:line="123" pos:column="27"> <block pos:line="123" pos:column="28">{
                <expr_stmt><expr><name pos:line="124" pos:column="17">tLogStart<pos:position pos:line="124" pos:column="26"/></name> <operator pos:line="124" pos:column="27">=<pos:position pos:line="124" pos:column="28"/></operator> <operator pos:line="124" pos:column="29">(<pos:position pos:line="124" pos:column="30"/></operator><name pos:line="124" pos:column="30">now<pos:position pos:line="124" pos:column="33"/></name> <operator pos:line="124" pos:column="34">/<pos:position pos:line="124" pos:column="35"/></operator> <name pos:line="124" pos:column="36">tRotation<pos:position pos:line="124" pos:column="45"/></name><operator pos:line="124" pos:column="45">)<pos:position pos:line="124" pos:column="46"/></operator> <operator pos:line="124" pos:column="47">*<pos:position pos:line="124" pos:column="48"/></operator> <name pos:line="124" pos:column="49">tRotation<pos:position pos:line="124" pos:column="58"/></name></expr>;<pos:position pos:line="124" pos:column="59"/></expr_stmt>
            }<pos:position pos:line="125" pos:column="14"/></block></then>
            <else pos:line="126" pos:column="13">else <block pos:line="126" pos:column="18">{
                <expr_stmt><expr><name pos:line="127" pos:column="17">tLogStart<pos:position pos:line="127" pos:column="26"/></name> <operator pos:line="127" pos:column="27">=<pos:position pos:line="127" pos:column="28"/></operator> <call><name pos:line="127" pos:column="29">get_now<pos:position pos:line="127" pos:column="36"/></name><argument_list pos:line="127" pos:column="36">(<argument><expr><name pos:line="127" pos:column="37">use_localtime<pos:position pos:line="127" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="52">utc_offset<pos:position pos:line="127" pos:column="62"/></name></expr></argument>)<pos:position pos:line="127" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="64"/></expr_stmt>
            }<pos:position pos:line="128" pos:column="14"/></block></else></if>

            <if pos:line="130" pos:column="13">if <condition pos:line="130" pos:column="16">(<expr><name pos:line="130" pos:column="17">use_strftime<pos:position pos:line="130" pos:column="29"/></name></expr>)<pos:position pos:line="130" pos:column="30"/></condition><then pos:line="130" pos:column="30"> <block pos:line="130" pos:column="31">{
                <decl_stmt><decl><type><name pos:line="131" pos:column="17">apr_time_t<pos:position pos:line="131" pos:column="27"/></name></type> <name pos:line="131" pos:column="28">tNow<pos:position pos:line="131" pos:column="32"/></name> <init pos:line="131" pos:column="33">= <expr><call><name pos:line="131" pos:column="35">apr_time_from_sec<pos:position pos:line="131" pos:column="52"/></name><argument_list pos:line="131" pos:column="52">(<argument><expr><name pos:line="131" pos:column="53">tLogStart<pos:position pos:line="131" pos:column="62"/></name></expr></argument>)<pos:position pos:line="131" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="131" pos:column="64"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="132" pos:column="17">apr_time_exp_t<pos:position pos:line="132" pos:column="31"/></name></type> <name pos:line="132" pos:column="32">e<pos:position pos:line="132" pos:column="33"/></name></decl>;<pos:position pos:line="132" pos:column="34"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="133" pos:column="17">apr_size_t<pos:position pos:line="133" pos:column="27"/></name></type> <name pos:line="133" pos:column="28">rs<pos:position pos:line="133" pos:column="30"/></name></decl>;<pos:position pos:line="133" pos:column="31"/></decl_stmt>

                <expr_stmt><expr><call><name pos:line="135" pos:column="17">apr_time_exp_gmt<pos:position pos:line="135" pos:column="33"/></name><argument_list pos:line="135" pos:column="33">(<argument><expr><operator pos:line="135" pos:column="34">&amp;<pos:position pos:line="135" pos:column="39"/></operator><name pos:line="135" pos:column="35">e<pos:position pos:line="135" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="38">tNow<pos:position pos:line="135" pos:column="42"/></name></expr></argument>)<pos:position pos:line="135" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="136" pos:column="17">apr_strftime<pos:position pos:line="136" pos:column="29"/></name><argument_list pos:line="136" pos:column="29">(<argument><expr><name pos:line="136" pos:column="30">buf2<pos:position pos:line="136" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="136" pos:column="36">&amp;<pos:position pos:line="136" pos:column="41"/></operator><name pos:line="136" pos:column="37">rs<pos:position pos:line="136" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="136" pos:column="41">sizeof<argument_list pos:line="136" pos:column="47">(<argument><expr><name pos:line="136" pos:column="48">buf2<pos:position pos:line="136" pos:column="52"/></name></expr></argument>)<pos:position pos:line="136" pos:column="53"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="136" pos:column="55">szLogRoot<pos:position pos:line="136" pos:column="64"/></name></expr></argument>, <argument><expr><operator pos:line="136" pos:column="66">&amp;<pos:position pos:line="136" pos:column="71"/></operator><name pos:line="136" pos:column="67">e<pos:position pos:line="136" pos:column="68"/></name></expr></argument>)<pos:position pos:line="136" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="70"/></expr_stmt>
            }<pos:position pos:line="137" pos:column="14"/></block></then>
            <else pos:line="138" pos:column="13">else <block pos:line="138" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="139" pos:column="17">apr_snprintf<pos:position pos:line="139" pos:column="29"/></name><argument_list pos:line="139" pos:column="29">(<argument><expr><name pos:line="139" pos:column="30">buf2<pos:position pos:line="139" pos:column="34"/></name></expr></argument>, <argument><expr><sizeof pos:line="139" pos:column="36">sizeof<argument_list pos:line="139" pos:column="42">(<argument><expr><name pos:line="139" pos:column="43">buf2<pos:position pos:line="139" pos:column="47"/></name></expr></argument>)<pos:position pos:line="139" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="139" pos:column="50">"%s.%010d"<pos:position pos:line="139" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="62">szLogRoot<pos:position pos:line="139" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="73">tLogStart<pos:position pos:line="139" pos:column="82"/></name></expr></argument>)<pos:position pos:line="139" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="84"/></expr_stmt>
            }<pos:position pos:line="140" pos:column="14"/></block></else></if>
            <expr_stmt><expr><name pos:line="141" pos:column="13">tLogEnd<pos:position pos:line="141" pos:column="20"/></name> <operator pos:line="141" pos:column="21">=<pos:position pos:line="141" pos:column="22"/></operator> <name pos:line="141" pos:column="23">tLogStart<pos:position pos:line="141" pos:column="32"/></name> <operator pos:line="141" pos:column="33">+<pos:position pos:line="141" pos:column="34"/></operator> <name pos:line="141" pos:column="35">tRotation<pos:position pos:line="141" pos:column="44"/></name></expr>;<pos:position pos:line="141" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><name pos:line="142" pos:column="13">pfile_prev<pos:position pos:line="142" pos:column="23"/></name> <operator pos:line="142" pos:column="24">=<pos:position pos:line="142" pos:column="25"/></operator> <name pos:line="142" pos:column="26">pfile<pos:position pos:line="142" pos:column="31"/></name></expr>;<pos:position pos:line="142" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="143" pos:column="13">apr_pool_create<pos:position pos:line="143" pos:column="28"/></name><argument_list pos:line="143" pos:column="28">(<argument><expr><operator pos:line="143" pos:column="29">&amp;<pos:position pos:line="143" pos:column="34"/></operator><name pos:line="143" pos:column="30">pfile<pos:position pos:line="143" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="143" pos:column="37">pool<pos:position pos:line="143" pos:column="41"/></name></expr></argument>)<pos:position pos:line="143" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name pos:line="144" pos:column="13">rv<pos:position pos:line="144" pos:column="15"/></name> <operator pos:line="144" pos:column="16">=<pos:position pos:line="144" pos:column="17"/></operator> <call><name pos:line="144" pos:column="18">apr_file_open<pos:position pos:line="144" pos:column="31"/></name><argument_list pos:line="144" pos:column="31">(<argument><expr><operator pos:line="144" pos:column="32">&amp;<pos:position pos:line="144" pos:column="37"/></operator><name pos:line="144" pos:column="33">nLogFD<pos:position pos:line="144" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="41">buf2<pos:position pos:line="144" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="47">APR_WRITE<pos:position pos:line="144" pos:column="56"/></name> <operator pos:line="144" pos:column="57">|<pos:position pos:line="144" pos:column="58"/></operator> <name pos:line="144" pos:column="59">APR_CREATE<pos:position pos:line="144" pos:column="69"/></name> <operator pos:line="144" pos:column="70">|<pos:position pos:line="144" pos:column="71"/></operator> <name pos:line="144" pos:column="72">APR_APPEND<pos:position pos:line="144" pos:column="82"/></name></expr></argument>,
                               <argument><expr><name pos:line="145" pos:column="32">APR_OS_DEFAULT<pos:position pos:line="145" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="48">pfile<pos:position pos:line="145" pos:column="53"/></name></expr></argument>)<pos:position pos:line="145" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="55"/></expr_stmt>
            <if pos:line="146" pos:column="13">if <condition pos:line="146" pos:column="16">(<expr><name pos:line="146" pos:column="17">rv<pos:position pos:line="146" pos:column="19"/></name> <operator pos:line="146" pos:column="20">!=<pos:position pos:line="146" pos:column="22"/></operator> <name pos:line="146" pos:column="23">APR_SUCCESS<pos:position pos:line="146" pos:column="34"/></name></expr>)<pos:position pos:line="146" pos:column="35"/></condition><then pos:line="146" pos:column="35"> <block pos:line="146" pos:column="36">{
                <decl_stmt><decl><type><name pos:line="147" pos:column="17">char<pos:position pos:line="147" pos:column="21"/></name></type> <name><name pos:line="147" pos:column="22">error<pos:position pos:line="147" pos:column="27"/></name><index pos:line="147" pos:column="27">[<expr><literal type="number" pos:line="147" pos:column="28">120<pos:position pos:line="147" pos:column="31"/></literal></expr>]<pos:position pos:line="147" pos:column="32"/></index></name></decl>;<pos:position pos:line="147" pos:column="33"/></decl_stmt>

                <expr_stmt><expr><call><name pos:line="149" pos:column="17">apr_strerror<pos:position pos:line="149" pos:column="29"/></name><argument_list pos:line="149" pos:column="29">(<argument><expr><name pos:line="149" pos:column="30">rv<pos:position pos:line="149" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="149" pos:column="34">error<pos:position pos:line="149" pos:column="39"/></name></expr></argument>, <argument><expr><sizeof pos:line="149" pos:column="41">sizeof <name pos:line="149" pos:column="48">error<pos:position pos:line="149" pos:column="53"/></name></sizeof></expr></argument>)<pos:position pos:line="149" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="55"/></expr_stmt>

                <comment type="block" pos:line="151" pos:column="17">/* Uh-oh. Failed to open the new log file. Try to clear
                 * the previous log file, note the lost log entries,
                 * and keep on truckin'. */</comment>
                <if pos:line="154" pos:column="17">if <condition pos:line="154" pos:column="20">(<expr><name pos:line="154" pos:column="21">nLogFDprev<pos:position pos:line="154" pos:column="31"/></name> <operator pos:line="154" pos:column="32">==<pos:position pos:line="154" pos:column="34"/></operator> <name pos:line="154" pos:column="35">NULL<pos:position pos:line="154" pos:column="39"/></name></expr>)<pos:position pos:line="154" pos:column="40"/></condition><then pos:line="154" pos:column="40"> <block pos:line="154" pos:column="41">{
                    <expr_stmt><expr><call><name pos:line="155" pos:column="21">fprintf<pos:position pos:line="155" pos:column="28"/></name><argument_list pos:line="155" pos:column="28">(<argument><expr><name pos:line="155" pos:column="29">stderr<pos:position pos:line="155" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="155" pos:column="37">"Could not open log file '%s' (%s)\n"<pos:position pos:line="155" pos:column="74"/></literal></expr></argument>, <argument><expr><name pos:line="155" pos:column="76">buf2<pos:position pos:line="155" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="82">error<pos:position pos:line="155" pos:column="87"/></name></expr></argument>)<pos:position pos:line="155" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="89"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="156" pos:column="21">exit<pos:position pos:line="156" pos:column="25"/></name><argument_list pos:line="156" pos:column="25">(<argument><expr><literal type="number" pos:line="156" pos:column="26">2<pos:position pos:line="156" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="156" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="157" pos:column="18"/></block></then>
                <else pos:line="158" pos:column="17">else <block pos:line="158" pos:column="22">{
                    <expr_stmt><expr><name pos:line="159" pos:column="21">nLogFD<pos:position pos:line="159" pos:column="27"/></name> <operator pos:line="159" pos:column="28">=<pos:position pos:line="159" pos:column="29"/></operator> <name pos:line="159" pos:column="30">nLogFDprev<pos:position pos:line="159" pos:column="40"/></name></expr>;<pos:position pos:line="159" pos:column="41"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="160" pos:column="21">apr_pool_destroy<pos:position pos:line="160" pos:column="37"/></name><argument_list pos:line="160" pos:column="37">(<argument><expr><name pos:line="160" pos:column="38">pfile<pos:position pos:line="160" pos:column="43"/></name></expr></argument>)<pos:position pos:line="160" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="45"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="161" pos:column="21">pfile<pos:position pos:line="161" pos:column="26"/></name> <operator pos:line="161" pos:column="27">=<pos:position pos:line="161" pos:column="28"/></operator> <name pos:line="161" pos:column="29">pfile_prev<pos:position pos:line="161" pos:column="39"/></name></expr>;<pos:position pos:line="161" pos:column="40"/></expr_stmt>
                    <comment type="block" pos:line="162" pos:column="21">/* Try to keep this error message constant length
                     * in case it occurs several times. */</comment>
                    <expr_stmt><expr><call><name pos:line="164" pos:column="21">apr_snprintf<pos:position pos:line="164" pos:column="33"/></name><argument_list pos:line="164" pos:column="33">(<argument><expr><name pos:line="164" pos:column="34">errbuf<pos:position pos:line="164" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="164" pos:column="42">sizeof <name pos:line="164" pos:column="49">errbuf<pos:position pos:line="164" pos:column="55"/></name></sizeof></expr></argument>,
                                 <argument><expr><literal type="string" pos:line="165" pos:column="34">"Resetting log file due to error opening "<pos:position pos:line="165" pos:column="76"/></literal>
                                 <literal type="string" pos:line="166" pos:column="34">"new log file, %10d messages lost: %-25.25s\n"<pos:position pos:line="166" pos:column="80"/></literal></expr></argument>,
                                 <argument><expr><name pos:line="167" pos:column="34">nMessCount<pos:position pos:line="167" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="167" pos:column="46">error<pos:position pos:line="167" pos:column="51"/></name></expr></argument>)<pos:position pos:line="167" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="53"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="168" pos:column="21">nWrite<pos:position pos:line="168" pos:column="27"/></name> <operator pos:line="168" pos:column="28">=<pos:position pos:line="168" pos:column="29"/></operator> <call><name pos:line="168" pos:column="30">strlen<pos:position pos:line="168" pos:column="36"/></name><argument_list pos:line="168" pos:column="36">(<argument><expr><name pos:line="168" pos:column="37">errbuf<pos:position pos:line="168" pos:column="43"/></name></expr></argument>)<pos:position pos:line="168" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="45"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="169" pos:column="21">apr_file_trunc<pos:position pos:line="169" pos:column="35"/></name><argument_list pos:line="169" pos:column="35">(<argument><expr><name pos:line="169" pos:column="36">nLogFD<pos:position pos:line="169" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="169" pos:column="44">0<pos:position pos:line="169" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="169" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="47"/></expr_stmt>
                    <if pos:line="170" pos:column="21">if <condition pos:line="170" pos:column="24">(<expr><call><name pos:line="170" pos:column="25">apr_file_write<pos:position pos:line="170" pos:column="39"/></name><argument_list pos:line="170" pos:column="39">(<argument><expr><name pos:line="170" pos:column="40">nLogFD<pos:position pos:line="170" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="170" pos:column="48">errbuf<pos:position pos:line="170" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="170" pos:column="56">&amp;<pos:position pos:line="170" pos:column="61"/></operator><name pos:line="170" pos:column="57">nWrite<pos:position pos:line="170" pos:column="63"/></name></expr></argument>)<pos:position pos:line="170" pos:column="64"/></argument_list></call> <operator pos:line="170" pos:column="65">!=<pos:position pos:line="170" pos:column="67"/></operator> <name pos:line="170" pos:column="68">APR_SUCCESS<pos:position pos:line="170" pos:column="79"/></name></expr>)<pos:position pos:line="170" pos:column="80"/></condition><then pos:line="170" pos:column="80"> <block pos:line="170" pos:column="81">{
                        <expr_stmt><expr><call><name pos:line="171" pos:column="25">fprintf<pos:position pos:line="171" pos:column="32"/></name><argument_list pos:line="171" pos:column="32">(<argument><expr><name pos:line="171" pos:column="33">stderr<pos:position pos:line="171" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="171" pos:column="41">"Error writing to the file %s\n"<pos:position pos:line="171" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="171" pos:column="75">buf2<pos:position pos:line="171" pos:column="79"/></name></expr></argument>)<pos:position pos:line="171" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="81"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="172" pos:column="25">exit<pos:position pos:line="172" pos:column="29"/></name><argument_list pos:line="172" pos:column="29">(<argument><expr><literal type="number" pos:line="172" pos:column="30">2<pos:position pos:line="172" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="33"/></expr_stmt>
                    }<pos:position pos:line="173" pos:column="22"/></block></then></if>
                }<pos:position pos:line="174" pos:column="18"/></block></else></if>
            }<pos:position pos:line="175" pos:column="14"/></block></then>
            <elseif pos:line="176" pos:column="13">else <if pos:line="176" pos:column="18">if <condition pos:line="176" pos:column="21">(<expr><name pos:line="176" pos:column="22">nLogFDprev<pos:position pos:line="176" pos:column="32"/></name></expr>)<pos:position pos:line="176" pos:column="33"/></condition><then pos:line="176" pos:column="33"> <block pos:line="176" pos:column="34">{
                <expr_stmt><expr><call><name pos:line="177" pos:column="17">apr_file_close<pos:position pos:line="177" pos:column="31"/></name><argument_list pos:line="177" pos:column="31">(<argument><expr><name pos:line="177" pos:column="32">nLogFDprev<pos:position pos:line="177" pos:column="42"/></name></expr></argument>)<pos:position pos:line="177" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="44"/></expr_stmt>
                <if pos:line="178" pos:column="17">if <condition pos:line="178" pos:column="20">(<expr><name pos:line="178" pos:column="21">pfile_prev<pos:position pos:line="178" pos:column="31"/></name></expr>)<pos:position pos:line="178" pos:column="32"/></condition><then pos:line="178" pos:column="32"> <block pos:line="178" pos:column="33">{
                    <expr_stmt><expr><call><name pos:line="179" pos:column="21">apr_pool_destroy<pos:position pos:line="179" pos:column="37"/></name><argument_list pos:line="179" pos:column="37">(<argument><expr><name pos:line="179" pos:column="38">pfile_prev<pos:position pos:line="179" pos:column="48"/></name></expr></argument>)<pos:position pos:line="179" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="50"/></expr_stmt>
                }<pos:position pos:line="180" pos:column="18"/></block></then></if>
            }<pos:position pos:line="181" pos:column="14"/></block></then></if></elseif></if>
            <expr_stmt><expr><name pos:line="182" pos:column="13">nMessCount<pos:position pos:line="182" pos:column="23"/></name> <operator pos:line="182" pos:column="24">=<pos:position pos:line="182" pos:column="25"/></operator> <literal type="number" pos:line="182" pos:column="26">0<pos:position pos:line="182" pos:column="27"/></literal></expr>;<pos:position pos:line="182" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="183" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="184" pos:column="9">/*
         * If we just bypassed reading stdin, due to bypass_io,
         * then we have nothing to write, so skip this.
         */</comment>
        <if pos:line="188" pos:column="9">if <condition pos:line="188" pos:column="12">(<expr><operator pos:line="188" pos:column="13">!<pos:position pos:line="188" pos:column="14"/></operator><name pos:line="188" pos:column="14">bypass_io<pos:position pos:line="188" pos:column="23"/></name></expr>)<pos:position pos:line="188" pos:column="24"/></condition><then pos:line="188" pos:column="24"> <block pos:line="188" pos:column="25">{
            <expr_stmt><expr><name pos:line="189" pos:column="13">nWrite<pos:position pos:line="189" pos:column="19"/></name> <operator pos:line="189" pos:column="20">=<pos:position pos:line="189" pos:column="21"/></operator> <name pos:line="189" pos:column="22">nRead<pos:position pos:line="189" pos:column="27"/></name></expr>;<pos:position pos:line="189" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="190" pos:column="13">rv<pos:position pos:line="190" pos:column="15"/></name> <operator pos:line="190" pos:column="16">=<pos:position pos:line="190" pos:column="17"/></operator> <call><name pos:line="190" pos:column="18">apr_file_write<pos:position pos:line="190" pos:column="32"/></name><argument_list pos:line="190" pos:column="32">(<argument><expr><name pos:line="190" pos:column="33">nLogFD<pos:position pos:line="190" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="41">buf<pos:position pos:line="190" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="190" pos:column="46">&amp;<pos:position pos:line="190" pos:column="51"/></operator><name pos:line="190" pos:column="47">nWrite<pos:position pos:line="190" pos:column="53"/></name></expr></argument>)<pos:position pos:line="190" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="55"/></expr_stmt>
            <if pos:line="191" pos:column="13">if <condition pos:line="191" pos:column="16">(<expr><name pos:line="191" pos:column="17">rv<pos:position pos:line="191" pos:column="19"/></name> <operator pos:line="191" pos:column="20">==<pos:position pos:line="191" pos:column="22"/></operator> <name pos:line="191" pos:column="23">APR_SUCCESS<pos:position pos:line="191" pos:column="34"/></name> <operator pos:line="191" pos:column="35">&amp;&amp;<pos:position pos:line="191" pos:column="45"/></operator> <name pos:line="191" pos:column="38">nWrite<pos:position pos:line="191" pos:column="44"/></name> <operator pos:line="191" pos:column="45">!=<pos:position pos:line="191" pos:column="47"/></operator> <name pos:line="191" pos:column="48">nRead<pos:position pos:line="191" pos:column="53"/></name></expr>)<pos:position pos:line="191" pos:column="54"/></condition><then pos:line="191" pos:column="54"> <block pos:line="191" pos:column="55">{
                <comment type="block" pos:line="192" pos:column="17">/* buffer partially written, which for rotatelogs means we encountered
                 * an error such as out of space or quota or some other limit reached;
                 * try to write the rest so we get the real error code
                 */</comment>
                <decl_stmt><decl><type><name pos:line="196" pos:column="17">apr_size_t<pos:position pos:line="196" pos:column="27"/></name></type> <name pos:line="196" pos:column="28">nWritten<pos:position pos:line="196" pos:column="36"/></name> <init pos:line="196" pos:column="37">= <expr><name pos:line="196" pos:column="39">nWrite<pos:position pos:line="196" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="196" pos:column="46"/></decl_stmt>

                <expr_stmt><expr><name pos:line="198" pos:column="17">nRead<pos:position pos:line="198" pos:column="22"/></name>  <operator pos:line="198" pos:column="24">=<pos:position pos:line="198" pos:column="25"/></operator> <name pos:line="198" pos:column="26">nRead<pos:position pos:line="198" pos:column="31"/></name> <operator pos:line="198" pos:column="32">-<pos:position pos:line="198" pos:column="33"/></operator> <name pos:line="198" pos:column="34">nWritten<pos:position pos:line="198" pos:column="42"/></name></expr>;<pos:position pos:line="198" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><name pos:line="199" pos:column="17">nWrite<pos:position pos:line="199" pos:column="23"/></name> <operator pos:line="199" pos:column="24">=<pos:position pos:line="199" pos:column="25"/></operator> <name pos:line="199" pos:column="26">nRead<pos:position pos:line="199" pos:column="31"/></name></expr>;<pos:position pos:line="199" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><name pos:line="200" pos:column="17">rv<pos:position pos:line="200" pos:column="19"/></name> <operator pos:line="200" pos:column="20">=<pos:position pos:line="200" pos:column="21"/></operator> <call><name pos:line="200" pos:column="22">apr_file_write<pos:position pos:line="200" pos:column="36"/></name><argument_list pos:line="200" pos:column="36">(<argument><expr><name pos:line="200" pos:column="37">nLogFD<pos:position pos:line="200" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="200" pos:column="45">buf<pos:position pos:line="200" pos:column="48"/></name> <operator pos:line="200" pos:column="49">+<pos:position pos:line="200" pos:column="50"/></operator> <name pos:line="200" pos:column="51">nWritten<pos:position pos:line="200" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="200" pos:column="61">&amp;<pos:position pos:line="200" pos:column="66"/></operator><name pos:line="200" pos:column="62">nWrite<pos:position pos:line="200" pos:column="68"/></name></expr></argument>)<pos:position pos:line="200" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="70"/></expr_stmt>
            }<pos:position pos:line="201" pos:column="14"/></block></then></if>
            <if pos:line="202" pos:column="13">if <condition pos:line="202" pos:column="16">(<expr><name pos:line="202" pos:column="17">nWrite<pos:position pos:line="202" pos:column="23"/></name> <operator pos:line="202" pos:column="24">!=<pos:position pos:line="202" pos:column="26"/></operator> <name pos:line="202" pos:column="27">nRead<pos:position pos:line="202" pos:column="32"/></name></expr>)<pos:position pos:line="202" pos:column="33"/></condition><then pos:line="202" pos:column="33"> <block pos:line="202" pos:column="34">{
                <decl_stmt><decl><type><name pos:line="203" pos:column="17">char<pos:position pos:line="203" pos:column="21"/></name></type> <name><name pos:line="203" pos:column="22">strerrbuf<pos:position pos:line="203" pos:column="31"/></name><index pos:line="203" pos:column="31">[<expr><literal type="number" pos:line="203" pos:column="32">120<pos:position pos:line="203" pos:column="35"/></literal></expr>]<pos:position pos:line="203" pos:column="36"/></index></name></decl>;<pos:position pos:line="203" pos:column="37"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="204" pos:column="17">apr_off_t<pos:position pos:line="204" pos:column="26"/></name></type> <name pos:line="204" pos:column="27">cur_offset<pos:position pos:line="204" pos:column="37"/></name></decl>;<pos:position pos:line="204" pos:column="38"/></decl_stmt>
                
                <expr_stmt><expr><name pos:line="206" pos:column="17">cur_offset<pos:position pos:line="206" pos:column="27"/></name> <operator pos:line="206" pos:column="28">=<pos:position pos:line="206" pos:column="29"/></operator> <literal type="number" pos:line="206" pos:column="30">0<pos:position pos:line="206" pos:column="31"/></literal></expr>;<pos:position pos:line="206" pos:column="32"/></expr_stmt>
                <if pos:line="207" pos:column="17">if <condition pos:line="207" pos:column="20">(<expr><call><name pos:line="207" pos:column="21">apr_file_seek<pos:position pos:line="207" pos:column="34"/></name><argument_list pos:line="207" pos:column="34">(<argument><expr><name pos:line="207" pos:column="35">nLogFD<pos:position pos:line="207" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="207" pos:column="43">APR_CUR<pos:position pos:line="207" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="207" pos:column="52">&amp;<pos:position pos:line="207" pos:column="57"/></operator><name pos:line="207" pos:column="53">cur_offset<pos:position pos:line="207" pos:column="63"/></name></expr></argument>)<pos:position pos:line="207" pos:column="64"/></argument_list></call> <operator pos:line="207" pos:column="65">!=<pos:position pos:line="207" pos:column="67"/></operator> <name pos:line="207" pos:column="68">APR_SUCCESS<pos:position pos:line="207" pos:column="79"/></name></expr>)<pos:position pos:line="207" pos:column="80"/></condition><then pos:line="207" pos:column="80"> <block pos:line="207" pos:column="81">{
                    <expr_stmt><expr><name pos:line="208" pos:column="21">cur_offset<pos:position pos:line="208" pos:column="31"/></name> <operator pos:line="208" pos:column="32">=<pos:position pos:line="208" pos:column="33"/></operator> <operator pos:line="208" pos:column="34">-<pos:position pos:line="208" pos:column="35"/></operator><literal type="number" pos:line="208" pos:column="35">1<pos:position pos:line="208" pos:column="36"/></literal></expr>;<pos:position pos:line="208" pos:column="37"/></expr_stmt>
                }<pos:position pos:line="209" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="210" pos:column="17">apr_strerror<pos:position pos:line="210" pos:column="29"/></name><argument_list pos:line="210" pos:column="29">(<argument><expr><name pos:line="210" pos:column="30">rv<pos:position pos:line="210" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="210" pos:column="34">strerrbuf<pos:position pos:line="210" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="210" pos:column="45">sizeof <name pos:line="210" pos:column="52">strerrbuf<pos:position pos:line="210" pos:column="61"/></name></sizeof></expr></argument>)<pos:position pos:line="210" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="210" pos:column="63"/></expr_stmt>
                <expr_stmt><expr><name pos:line="211" pos:column="17">nMessCount<pos:position pos:line="211" pos:column="27"/></name><operator pos:line="211" pos:column="27">++<pos:position pos:line="211" pos:column="29"/></operator></expr>;<pos:position pos:line="211" pos:column="30"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="212" pos:column="17">apr_snprintf<pos:position pos:line="212" pos:column="29"/></name><argument_list pos:line="212" pos:column="29">(<argument><expr><name pos:line="212" pos:column="30">errbuf<pos:position pos:line="212" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="212" pos:column="38">sizeof <name pos:line="212" pos:column="45">errbuf<pos:position pos:line="212" pos:column="51"/></name></sizeof></expr></argument>,
                             <argument><expr><literal type="string" pos:line="213" pos:column="30">"Error %d writing to log file at offset %"<pos:position pos:line="213" pos:column="72"/></literal> <name pos:line="213" pos:column="73">APR_OFF_T_FMT<pos:position pos:line="213" pos:column="86"/></name> <literal type="string" pos:line="213" pos:column="87">". "<pos:position pos:line="213" pos:column="91"/></literal>
                             <literal type="string" pos:line="214" pos:column="30">"%10d messages lost (%s)\n"<pos:position pos:line="214" pos:column="57"/></literal></expr></argument>,
                             <argument><expr><name pos:line="215" pos:column="30">rv<pos:position pos:line="215" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="34">cur_offset<pos:position pos:line="215" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="46">nMessCount<pos:position pos:line="215" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="215" pos:column="58">strerrbuf<pos:position pos:line="215" pos:column="67"/></name></expr></argument>)<pos:position pos:line="215" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="69"/></expr_stmt>
                <expr_stmt><expr><name pos:line="216" pos:column="17">nWrite<pos:position pos:line="216" pos:column="23"/></name> <operator pos:line="216" pos:column="24">=<pos:position pos:line="216" pos:column="25"/></operator> <call><name pos:line="216" pos:column="26">strlen<pos:position pos:line="216" pos:column="32"/></name><argument_list pos:line="216" pos:column="32">(<argument><expr><name pos:line="216" pos:column="33">errbuf<pos:position pos:line="216" pos:column="39"/></name></expr></argument>)<pos:position pos:line="216" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="41"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="217" pos:column="17">apr_file_trunc<pos:position pos:line="217" pos:column="31"/></name><argument_list pos:line="217" pos:column="31">(<argument><expr><name pos:line="217" pos:column="32">nLogFD<pos:position pos:line="217" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="217" pos:column="40">0<pos:position pos:line="217" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="217" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="43"/></expr_stmt>
                <if pos:line="218" pos:column="17">if <condition pos:line="218" pos:column="20">(<expr><call><name pos:line="218" pos:column="21">apr_file_write<pos:position pos:line="218" pos:column="35"/></name><argument_list pos:line="218" pos:column="35">(<argument><expr><name pos:line="218" pos:column="36">nLogFD<pos:position pos:line="218" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="44">errbuf<pos:position pos:line="218" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="218" pos:column="52">&amp;<pos:position pos:line="218" pos:column="57"/></operator><name pos:line="218" pos:column="53">nWrite<pos:position pos:line="218" pos:column="59"/></name></expr></argument>)<pos:position pos:line="218" pos:column="60"/></argument_list></call> <operator pos:line="218" pos:column="61">!=<pos:position pos:line="218" pos:column="63"/></operator> <name pos:line="218" pos:column="64">APR_SUCCESS<pos:position pos:line="218" pos:column="75"/></name></expr>)<pos:position pos:line="218" pos:column="76"/></condition><then pos:line="218" pos:column="76"> <block pos:line="218" pos:column="77">{
                    <expr_stmt><expr><call><name pos:line="219" pos:column="21">fprintf<pos:position pos:line="219" pos:column="28"/></name><argument_list pos:line="219" pos:column="28">(<argument><expr><name pos:line="219" pos:column="29">stderr<pos:position pos:line="219" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="37">"Error writing to the file %s\n"<pos:position pos:line="219" pos:column="69"/></literal></expr></argument>, <argument><expr><name pos:line="219" pos:column="71">buf2<pos:position pos:line="219" pos:column="75"/></name></expr></argument>)<pos:position pos:line="219" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="219" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="220" pos:column="17">exit<pos:position pos:line="220" pos:column="21"/></name><argument_list pos:line="220" pos:column="21">(<argument><expr><literal type="number" pos:line="220" pos:column="22">2<pos:position pos:line="220" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="220" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="25"/></expr_stmt>
                }<pos:position pos:line="221" pos:column="18"/></block></then></if>
            }<pos:position pos:line="222" pos:column="14"/></block></then>
            <else pos:line="223" pos:column="13">else <block pos:line="223" pos:column="18">{
                <expr_stmt><expr><name pos:line="224" pos:column="17">nMessCount<pos:position pos:line="224" pos:column="27"/></name><operator pos:line="224" pos:column="27">++<pos:position pos:line="224" pos:column="29"/></operator></expr>;<pos:position pos:line="224" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="225" pos:column="14"/></block></else></if>
        }<pos:position pos:line="226" pos:column="10"/></block></then>
        <else pos:line="227" pos:column="9">else <block pos:line="227" pos:column="14">{
           <comment type="block" pos:line="228" pos:column="12">/* now worry about reading 'n writing all the time */</comment>
           <expr_stmt><expr><name pos:line="229" pos:column="12">bypass_io<pos:position pos:line="229" pos:column="21"/></name> <operator pos:line="229" pos:column="22">=<pos:position pos:line="229" pos:column="23"/></operator> <literal type="number" pos:line="229" pos:column="24">0<pos:position pos:line="229" pos:column="25"/></literal></expr>;<pos:position pos:line="229" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="230" pos:column="10"/></block></else></if>
    }<pos:position pos:line="231" pos:column="6"/></block></for>
    <comment type="block" pos:line="232" pos:column="5">/* Of course we never, but prevent compiler warnings */</comment>
    <return pos:line="233" pos:column="5">return <expr><literal type="number" pos:line="233" pos:column="12">0<pos:position pos:line="233" pos:column="13"/></literal></expr>;<pos:position pos:line="233" pos:column="14"/></return>
}<pos:position pos:line="234" pos:column="2"/></block></function></unit>
