<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_502_httpd-2.2.22.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ascmagic<pos:position pos:line="1" pos:column="20"/></name><parameter_list pos:line="1" pos:column="20">(<parameter><decl><type><name pos:line="1" pos:column="21">request_rec<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">r<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="37">unsigned<pos:position pos:line="1" pos:column="45"/></name> <name pos:line="1" pos:column="46">char<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">buf<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">apr_size_t<pos:position pos:line="1" pos:column="67"/></name></type> <name pos:line="1" pos:column="68">nbytes<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="75"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">has_escapes<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><literal type="number" pos:line="3" pos:column="23">0<pos:position pos:line="3" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">char<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">s<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">nbuf<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><name pos:line="5" pos:column="15">HOWMANY<pos:position pos:line="5" pos:column="22"/></name> <operator pos:line="5" pos:column="23">+<pos:position pos:line="5" pos:column="24"/></operator> <literal type="number" pos:line="5" pos:column="25">1<pos:position pos:line="5" pos:column="26"/></literal></expr>]<pos:position pos:line="5" pos:column="27"/></index></name></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>  <comment type="block" pos:line="5" pos:column="30">/* one extra for terminating '\0' */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">token<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">register<pos:position pos:line="7" pos:column="13"/></specifier> <name><name pos:line="7" pos:column="14">struct<pos:position pos:line="7" pos:column="20"/></name> <name pos:line="7" pos:column="21">names<pos:position pos:line="7" pos:column="26"/></name></name> <modifier pos:line="7" pos:column="27">*<pos:position pos:line="7" pos:column="28"/></modifier></type><name pos:line="7" pos:column="28">p<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">small_nbytes<pos:position pos:line="8" pos:column="21"/></name></decl>;<pos:position pos:line="8" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">strtok_state<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* these are easy, do them first */</comment>

    <comment type="block" pos:line="13" pos:column="5">/*
     * for troff, look for . + letter + letter or .\"; this must be done to
     * disambiguate tar archives' ./file and other trash from real troff
     * input.
     */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">*<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">buf<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">==<pos:position pos:line="18" pos:column="16"/></operator> <literal type="char" pos:line="18" pos:column="17">'.'<pos:position pos:line="18" pos:column="20"/></literal></expr>)<pos:position pos:line="18" pos:column="21"/></condition><then pos:line="18" pos:column="21"> <block pos:line="18" pos:column="22">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">unsigned<pos:position pos:line="19" pos:column="17"/></name> <name pos:line="19" pos:column="18">char<pos:position pos:line="19" pos:column="22"/></name> <modifier pos:line="19" pos:column="23">*<pos:position pos:line="19" pos:column="24"/></modifier></type><name pos:line="19" pos:column="24">tp<pos:position pos:line="19" pos:column="26"/></name> <init pos:line="19" pos:column="27">= <expr><name pos:line="19" pos:column="29">buf<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">+<pos:position pos:line="19" pos:column="34"/></operator> <literal type="number" pos:line="19" pos:column="35">1<pos:position pos:line="19" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="37"/></decl_stmt>

        <while pos:line="21" pos:column="9">while <condition pos:line="21" pos:column="15">(<expr><call><name pos:line="21" pos:column="16">apr_isspace<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><operator pos:line="21" pos:column="28">*<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">tp<pos:position pos:line="21" pos:column="31"/></name></expr></argument>)<pos:position pos:line="21" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="33"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="22" pos:column="13">++<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">tp<pos:position pos:line="22" pos:column="17"/></name></expr>;<pos:position pos:line="22" pos:column="18"/></expr_stmt></block></while>  <comment type="block" pos:line="22" pos:column="20">/* skip leading whitespace */</comment>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">(<pos:position pos:line="23" pos:column="14"/></operator><call><name pos:line="23" pos:column="14">apr_isalnum<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">(<argument><expr><operator pos:line="23" pos:column="26">*<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">tp<pos:position pos:line="23" pos:column="29"/></name></expr></argument>)<pos:position pos:line="23" pos:column="30"/></argument_list></call> <operator pos:line="23" pos:column="31">||<pos:position pos:line="23" pos:column="33"/></operator> <operator pos:line="23" pos:column="34">*<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="35">tp<pos:position pos:line="23" pos:column="37"/></name> <operator pos:line="23" pos:column="38">==<pos:position pos:line="23" pos:column="40"/></operator> <literal type="char" pos:line="23" pos:column="41">'\\'<pos:position pos:line="23" pos:column="45"/></literal><operator pos:line="23" pos:column="45">)<pos:position pos:line="23" pos:column="46"/></operator> <operator pos:line="23" pos:column="47">&amp;&amp;<pos:position pos:line="23" pos:column="57"/></operator>
             <operator pos:line="24" pos:column="14">(<pos:position pos:line="24" pos:column="15"/></operator><call><name pos:line="24" pos:column="15">apr_isalnum<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><operator pos:line="24" pos:column="27">*<pos:position pos:line="24" pos:column="28"/></operator><operator pos:line="24" pos:column="28">(<pos:position pos:line="24" pos:column="29"/></operator><name pos:line="24" pos:column="29">tp<pos:position pos:line="24" pos:column="31"/></name> <operator pos:line="24" pos:column="32">+<pos:position pos:line="24" pos:column="33"/></operator> <literal type="number" pos:line="24" pos:column="34">1<pos:position pos:line="24" pos:column="35"/></literal><operator pos:line="24" pos:column="35">)<pos:position pos:line="24" pos:column="36"/></operator></expr></argument>)<pos:position pos:line="24" pos:column="37"/></argument_list></call> <operator pos:line="24" pos:column="38">||<pos:position pos:line="24" pos:column="40"/></operator> <operator pos:line="24" pos:column="41">*<pos:position pos:line="24" pos:column="42"/></operator><name pos:line="24" pos:column="42">tp<pos:position pos:line="24" pos:column="44"/></name> <operator pos:line="24" pos:column="45">==<pos:position pos:line="24" pos:column="47"/></operator> <literal type="char" pos:line="24" pos:column="48">'"'<pos:position pos:line="24" pos:column="51"/></literal><operator pos:line="24" pos:column="51">)<pos:position pos:line="24" pos:column="52"/></operator></expr>)<pos:position pos:line="24" pos:column="53"/></condition><then pos:line="24" pos:column="53"> <block pos:line="24" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">magic_rsl_puts<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">r<pos:position pos:line="25" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="31">"application/x-troff"<pos:position pos:line="25" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="54"/></expr_stmt>
            <return pos:line="26" pos:column="13">return <expr><literal type="number" pos:line="26" pos:column="20">1<pos:position pos:line="26" pos:column="21"/></literal></expr>;<pos:position pos:line="26" pos:column="22"/></return>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><operator pos:line="29" pos:column="10">*<pos:position pos:line="29" pos:column="11"/></operator><name pos:line="29" pos:column="11">buf<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">==<pos:position pos:line="29" pos:column="17"/></operator> <literal type="char" pos:line="29" pos:column="18">'c'<pos:position pos:line="29" pos:column="21"/></literal> <operator pos:line="29" pos:column="22">||<pos:position pos:line="29" pos:column="24"/></operator> <operator pos:line="29" pos:column="25">*<pos:position pos:line="29" pos:column="26"/></operator><name pos:line="29" pos:column="26">buf<pos:position pos:line="29" pos:column="29"/></name> <operator pos:line="29" pos:column="30">==<pos:position pos:line="29" pos:column="32"/></operator> <literal type="char" pos:line="29" pos:column="33">'C'<pos:position pos:line="29" pos:column="36"/></literal><operator pos:line="29" pos:column="36">)<pos:position pos:line="29" pos:column="37"/></operator> <operator pos:line="29" pos:column="38">&amp;&amp;<pos:position pos:line="29" pos:column="48"/></operator> <call><name pos:line="29" pos:column="41">apr_isspace<pos:position pos:line="29" pos:column="52"/></name><argument_list pos:line="29" pos:column="52">(<argument><expr><operator pos:line="29" pos:column="53">*<pos:position pos:line="29" pos:column="54"/></operator><operator pos:line="29" pos:column="54">(<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="55">buf<pos:position pos:line="29" pos:column="58"/></name> <operator pos:line="29" pos:column="59">+<pos:position pos:line="29" pos:column="60"/></operator> <literal type="number" pos:line="29" pos:column="61">1<pos:position pos:line="29" pos:column="62"/></literal><operator pos:line="29" pos:column="62">)<pos:position pos:line="29" pos:column="63"/></operator></expr></argument>)<pos:position pos:line="29" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="65"/></condition><then pos:line="29" pos:column="65"> <block pos:line="29" pos:column="66">{
        <comment type="block" pos:line="30" pos:column="9">/* Fortran */</comment>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">magic_rsl_puts<pos:position pos:line="31" pos:column="23"/></name><argument_list pos:line="31" pos:column="23">(<argument><expr><name pos:line="31" pos:column="24">r<pos:position pos:line="31" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="27">"text/plain"<pos:position pos:line="31" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
        <return pos:line="32" pos:column="9">return <expr><literal type="number" pos:line="32" pos:column="16">1<pos:position pos:line="32" pos:column="17"/></literal></expr>;<pos:position pos:line="32" pos:column="18"/></return>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="35" pos:column="5">/* look for tokens from names.h - this is expensive!, so we'll limit
     * ourselves to only SMALL_HOWMANY bytes */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">small_nbytes<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <ternary><condition><expr><operator pos:line="37" pos:column="20">(<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="21">nbytes<pos:position pos:line="37" pos:column="27"/></name> <operator pos:line="37" pos:column="28">&gt;<pos:position pos:line="37" pos:column="32"/></operator> <name pos:line="37" pos:column="30">SMALL_HOWMANY<pos:position pos:line="37" pos:column="43"/></name><operator pos:line="37" pos:column="43">)<pos:position pos:line="37" pos:column="44"/></operator></expr> ?<pos:position pos:line="37" pos:column="46"/></condition><then pos:line="37" pos:column="46"> <expr><name pos:line="37" pos:column="47">SMALL_HOWMANY<pos:position pos:line="37" pos:column="60"/></name></expr> <pos:position pos:line="37" pos:column="61"/></then><else pos:line="37" pos:column="61">: <expr><name pos:line="37" pos:column="63">nbytes<pos:position pos:line="37" pos:column="69"/></name></expr></else></ternary></expr>;<pos:position pos:line="37" pos:column="70"/></expr_stmt>
    <comment type="block" pos:line="38" pos:column="5">/* make a copy of the buffer here because apr_strtok() will destroy it */</comment>
    <expr_stmt><expr><name pos:line="39" pos:column="5">s<pos:position pos:line="39" pos:column="6"/></name> <operator pos:line="39" pos:column="7">=<pos:position pos:line="39" pos:column="8"/></operator> <operator pos:line="39" pos:column="9">(<pos:position pos:line="39" pos:column="10"/></operator><name pos:line="39" pos:column="10">unsigned<pos:position pos:line="39" pos:column="18"/></name> <name pos:line="39" pos:column="19">char<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">*<pos:position pos:line="39" pos:column="25"/></operator><operator pos:line="39" pos:column="25">)<pos:position pos:line="39" pos:column="26"/></operator> <call><name pos:line="39" pos:column="27">memcpy<pos:position pos:line="39" pos:column="33"/></name><argument_list pos:line="39" pos:column="33">(<argument><expr><name pos:line="39" pos:column="34">nbuf<pos:position pos:line="39" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="40">buf<pos:position pos:line="39" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="45">small_nbytes<pos:position pos:line="39" pos:column="57"/></name></expr></argument>)<pos:position pos:line="39" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="40" pos:column="5">s<pos:position pos:line="40" pos:column="6"/></name><index pos:line="40" pos:column="6">[<expr><name pos:line="40" pos:column="7">small_nbytes<pos:position pos:line="40" pos:column="19"/></name></expr>]<pos:position pos:line="40" pos:column="20"/></index></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <literal type="char" pos:line="40" pos:column="23">'\0'<pos:position pos:line="40" pos:column="27"/></literal></expr>;<pos:position pos:line="40" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="41" pos:column="5">has_escapes<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <operator pos:line="41" pos:column="19">(<pos:position pos:line="41" pos:column="20"/></operator><call><name pos:line="41" pos:column="20">memchr<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><name pos:line="41" pos:column="27">s<pos:position pos:line="41" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="30">'\033'<pos:position pos:line="41" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="38">small_nbytes<pos:position pos:line="41" pos:column="50"/></name></expr></argument>)<pos:position pos:line="41" pos:column="51"/></argument_list></call> <operator pos:line="41" pos:column="52">!=<pos:position pos:line="41" pos:column="54"/></operator> <name pos:line="41" pos:column="55">NULL<pos:position pos:line="41" pos:column="59"/></name><operator pos:line="41" pos:column="59">)<pos:position pos:line="41" pos:column="60"/></operator></expr>;<pos:position pos:line="41" pos:column="61"/></expr_stmt>
    <while pos:line="42" pos:column="5">while <condition pos:line="42" pos:column="11">(<expr><operator pos:line="42" pos:column="12">(<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="13">token<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <call><name pos:line="42" pos:column="21">apr_strtok<pos:position pos:line="42" pos:column="31"/></name><argument_list pos:line="42" pos:column="31">(<argument><expr><operator pos:line="42" pos:column="32">(<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="33">char<pos:position pos:line="42" pos:column="37"/></name> <operator pos:line="42" pos:column="38">*<pos:position pos:line="42" pos:column="39"/></operator><operator pos:line="42" pos:column="39">)<pos:position pos:line="42" pos:column="40"/></operator> <name pos:line="42" pos:column="41">s<pos:position pos:line="42" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="44">" \t\n\r\f"<pos:position pos:line="42" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="42" pos:column="57">&amp;<pos:position pos:line="42" pos:column="62"/></operator><name pos:line="42" pos:column="58">strtok_state<pos:position pos:line="42" pos:column="70"/></name></expr></argument>)<pos:position pos:line="42" pos:column="71"/></argument_list></call><operator pos:line="42" pos:column="71">)<pos:position pos:line="42" pos:column="72"/></operator> <operator pos:line="42" pos:column="73">!=<pos:position pos:line="42" pos:column="75"/></operator> <name pos:line="42" pos:column="76">NULL<pos:position pos:line="42" pos:column="80"/></name></expr>)<pos:position pos:line="42" pos:column="81"/></condition> <block pos:line="42" pos:column="82">{
        <expr_stmt><expr><name pos:line="43" pos:column="9">s<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <name pos:line="43" pos:column="13">NULL<pos:position pos:line="43" pos:column="17"/></name></expr>;<pos:position pos:line="43" pos:column="18"/></expr_stmt>  <comment type="block" pos:line="43" pos:column="20">/* make apr_strtok() keep on tokin' */</comment>
        <for pos:line="44" pos:column="9">for <control pos:line="44" pos:column="13">(<init><expr><name pos:line="44" pos:column="14">p<pos:position pos:line="44" pos:column="15"/></name> <operator pos:line="44" pos:column="16">=<pos:position pos:line="44" pos:column="17"/></operator> <name pos:line="44" pos:column="18">names<pos:position pos:line="44" pos:column="23"/></name></expr>;<pos:position pos:line="44" pos:column="24"/></init> <condition><expr><name pos:line="44" pos:column="25">p<pos:position pos:line="44" pos:column="26"/></name> <operator pos:line="44" pos:column="27">&lt;<pos:position pos:line="44" pos:column="31"/></operator> <name pos:line="44" pos:column="29">names<pos:position pos:line="44" pos:column="34"/></name> <operator pos:line="44" pos:column="35">+<pos:position pos:line="44" pos:column="36"/></operator> <name pos:line="44" pos:column="37">NNAMES<pos:position pos:line="44" pos:column="43"/></name></expr>;<pos:position pos:line="44" pos:column="44"/></condition> <incr><expr><name pos:line="44" pos:column="45">p<pos:position pos:line="44" pos:column="46"/></name><operator pos:line="44" pos:column="46">++<pos:position pos:line="44" pos:column="48"/></operator></expr></incr>)<pos:position pos:line="44" pos:column="49"/></control> <block pos:line="44" pos:column="50">{
            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><call><name pos:line="45" pos:column="17">STREQ<pos:position pos:line="45" pos:column="22"/></name><argument_list pos:line="45" pos:column="22">(<argument><expr><name><name pos:line="45" pos:column="23">p<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">name<pos:position pos:line="45" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="32">token<pos:position pos:line="45" pos:column="37"/></name></expr></argument>)<pos:position pos:line="45" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="39"/></condition><then pos:line="45" pos:column="39"> <block pos:line="45" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="46" pos:column="17">magic_rsl_puts<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name pos:line="46" pos:column="32">r<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="35">types<pos:position pos:line="46" pos:column="40"/></name><index pos:line="46" pos:column="40">[<expr><name><name pos:line="46" pos:column="41">p<pos:position pos:line="46" pos:column="42"/></name><operator pos:line="46" pos:column="42">-&gt;<pos:position pos:line="46" pos:column="47"/></operator><name pos:line="46" pos:column="44">type<pos:position pos:line="46" pos:column="48"/></name></name></expr>]<pos:position pos:line="46" pos:column="49"/></index></name></expr></argument>)<pos:position pos:line="46" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="51"/></expr_stmt>
                <if pos:line="47" pos:column="17">if <condition pos:line="47" pos:column="20">(<expr><name pos:line="47" pos:column="21">has_escapes<pos:position pos:line="47" pos:column="32"/></name></expr>)<pos:position pos:line="47" pos:column="33"/></condition><then pos:line="47" pos:column="33">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="48" pos:column="21">magic_rsl_puts<pos:position pos:line="48" pos:column="35"/></name><argument_list pos:line="48" pos:column="35">(<argument><expr><name pos:line="48" pos:column="36">r<pos:position pos:line="48" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="39">" (with escape sequences)"<pos:position pos:line="48" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="67"/></expr_stmt></block></then></if>
                <return pos:line="49" pos:column="17">return <expr><literal type="number" pos:line="49" pos:column="24">1<pos:position pos:line="49" pos:column="25"/></literal></expr>;<pos:position pos:line="49" pos:column="26"/></return>
            }<pos:position pos:line="50" pos:column="14"/></block></then></if>
        }<pos:position pos:line="51" pos:column="10"/></block></for>
    }<pos:position pos:line="52" pos:column="6"/></block></while>

    <switch pos:line="54" pos:column="5">switch <condition pos:line="54" pos:column="12">(<expr><call><name pos:line="54" pos:column="13">is_tar<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">buf<pos:position pos:line="54" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="25">nbytes<pos:position pos:line="54" pos:column="31"/></name></expr></argument>)<pos:position pos:line="54" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="33"/></condition> <block pos:line="54" pos:column="34">{
    <case pos:line="55" pos:column="5">case <expr><literal type="number" pos:line="55" pos:column="10">1<pos:position pos:line="55" pos:column="11"/></literal></expr>:<pos:position pos:line="55" pos:column="12"/></case>
        <comment type="block" pos:line="56" pos:column="9">/* V7 tar archive */</comment>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">magic_rsl_puts<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><name pos:line="57" pos:column="24">r<pos:position pos:line="57" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="27">"application/x-tar"<pos:position pos:line="57" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="48"/></expr_stmt>
        <return pos:line="58" pos:column="9">return <expr><literal type="number" pos:line="58" pos:column="16">1<pos:position pos:line="58" pos:column="17"/></literal></expr>;<pos:position pos:line="58" pos:column="18"/></return>
    <case pos:line="59" pos:column="5">case <expr><literal type="number" pos:line="59" pos:column="10">2<pos:position pos:line="59" pos:column="11"/></literal></expr>:<pos:position pos:line="59" pos:column="12"/></case>
        <comment type="block" pos:line="60" pos:column="9">/* POSIX tar archive */</comment>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">magic_rsl_puts<pos:position pos:line="61" pos:column="23"/></name><argument_list pos:line="61" pos:column="23">(<argument><expr><name pos:line="61" pos:column="24">r<pos:position pos:line="61" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="27">"application/x-tar"<pos:position pos:line="61" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="48"/></expr_stmt>
        <return pos:line="62" pos:column="9">return <expr><literal type="number" pos:line="62" pos:column="16">1<pos:position pos:line="62" pos:column="17"/></literal></expr>;<pos:position pos:line="62" pos:column="18"/></return>
    }<pos:position pos:line="63" pos:column="6"/></block></switch>

    <comment type="block" pos:line="65" pos:column="5">/* all else fails, but it is ascii... */</comment>
    <return pos:line="66" pos:column="5">return <expr><literal type="number" pos:line="66" pos:column="12">0<pos:position pos:line="66" pos:column="13"/></literal></expr>;<pos:position pos:line="66" pos:column="14"/></return>
}<pos:position pos:line="67" pos:column="2"/></block></function></unit>
