<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_4037.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">rfc1413_connect<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">apr_socket_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">newsock<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">conn_rec<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">conn<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">server_rec<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">srv<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">apr_time_t<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">timeout<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_sockaddr_t<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">localsa<pos:position pos:line="5" pos:column="28"/></name></decl>, <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="31">destsa<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">rv<pos:position pos:line="7" pos:column="12"/></name> <operator pos:line="7" pos:column="13">=<pos:position pos:line="7" pos:column="14"/></operator> <call><name pos:line="7" pos:column="15">apr_sockaddr_info_get<pos:position pos:line="7" pos:column="36"/></name><argument_list pos:line="7" pos:column="36">(<argument><expr><operator pos:line="7" pos:column="37">&amp;<pos:position pos:line="7" pos:column="42"/></operator><name pos:line="7" pos:column="38">localsa<pos:position pos:line="7" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="47">conn<pos:position pos:line="7" pos:column="51"/></name><operator pos:line="7" pos:column="51">-&gt;<pos:position pos:line="7" pos:column="56"/></operator><name pos:line="7" pos:column="53">local_ip<pos:position pos:line="7" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="63">APR_UNSPEC<pos:position pos:line="7" pos:column="73"/></name></expr></argument>,
                              <argument><expr><literal type="number" pos:line="8" pos:column="31">0<pos:position pos:line="8" pos:column="32"/></literal></expr></argument>, <comment type="block" pos:line="8" pos:column="34">/* ephemeral port */</comment>
                              <argument><expr><literal type="number" pos:line="9" pos:column="31">0<pos:position pos:line="9" pos:column="32"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="34">conn<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">-&gt;<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="40">pool<pos:position pos:line="9" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call><operator pos:line="9" pos:column="45">)<pos:position pos:line="9" pos:column="46"/></operator> <operator pos:line="9" pos:column="47">!=<pos:position pos:line="9" pos:column="49"/></operator> <name pos:line="9" pos:column="50">APR_SUCCESS<pos:position pos:line="9" pos:column="61"/></name></expr>)<pos:position pos:line="9" pos:column="62"/></condition><then pos:line="9" pos:column="62"> <block pos:line="9" pos:column="63">{
        <comment type="block" pos:line="10" pos:column="9">/* This should not fail since we have a numeric address string
         * as the host. */</comment>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">ap_log_error<pos:position pos:line="12" pos:column="21"/></name><argument_list pos:line="12" pos:column="21">(<argument><expr><name pos:line="12" pos:column="22">APLOG_MARK<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="34">APLOG_CRIT<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="46">rv<pos:position pos:line="12" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="50">srv<pos:position pos:line="12" pos:column="53"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="13" pos:column="22">"rfc1413: apr_sockaddr_info_get(%s) failed"<pos:position pos:line="13" pos:column="65"/></literal></expr></argument>,
                     <argument><expr><name><name pos:line="14" pos:column="22">conn<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">-&gt;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="28">local_ip<pos:position pos:line="14" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
        <return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">rv<pos:position pos:line="15" pos:column="18"/></name></expr>;<pos:position pos:line="15" pos:column="19"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">(<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">rv<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">apr_sockaddr_info_get<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><operator pos:line="18" pos:column="37">&amp;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="38">destsa<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="46">conn<pos:position pos:line="18" pos:column="50"/></name><operator pos:line="18" pos:column="50">-&gt;<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="52">remote_ip<pos:position pos:line="18" pos:column="61"/></name></name></expr></argument>,
                              <argument><expr><name><name pos:line="19" pos:column="31">localsa<pos:position pos:line="19" pos:column="38"/></name><operator pos:line="19" pos:column="38">-&gt;<pos:position pos:line="19" pos:column="43"/></operator><name pos:line="19" pos:column="40">family<pos:position pos:line="19" pos:column="46"/></name></name></expr></argument>, <comment type="block" pos:line="19" pos:column="48">/* has to match */</comment>
                              <argument><expr><name pos:line="20" pos:column="31">RFC1413_PORT<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="45">0<pos:position pos:line="20" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="48">conn<pos:position pos:line="20" pos:column="52"/></name><operator pos:line="20" pos:column="52">-&gt;<pos:position pos:line="20" pos:column="57"/></operator><name pos:line="20" pos:column="54">pool<pos:position pos:line="20" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="59"/></argument_list></call><operator pos:line="20" pos:column="59">)<pos:position pos:line="20" pos:column="60"/></operator> <operator pos:line="20" pos:column="61">!=<pos:position pos:line="20" pos:column="63"/></operator> <name pos:line="20" pos:column="64">APR_SUCCESS<pos:position pos:line="20" pos:column="75"/></name></expr>)<pos:position pos:line="20" pos:column="76"/></condition><then pos:line="20" pos:column="76"> <block pos:line="20" pos:column="77">{
        <comment type="block" pos:line="21" pos:column="9">/* This should not fail since we have a numeric address string
         * as the host. */</comment>
        <expr_stmt><expr><call><name pos:line="23" pos:column="9">ap_log_error<pos:position pos:line="23" pos:column="21"/></name><argument_list pos:line="23" pos:column="21">(<argument><expr><name pos:line="23" pos:column="22">APLOG_MARK<pos:position pos:line="23" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="34">APLOG_CRIT<pos:position pos:line="23" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="46">rv<pos:position pos:line="23" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="50">srv<pos:position pos:line="23" pos:column="53"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="24" pos:column="22">"rfc1413: apr_sockaddr_info_get(%s) failed"<pos:position pos:line="24" pos:column="65"/></literal></expr></argument>,
                     <argument><expr><name><name pos:line="25" pos:column="22">conn<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-&gt;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="28">remote_ip<pos:position pos:line="25" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
        <return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">rv<pos:position pos:line="26" pos:column="18"/></name></expr>;<pos:position pos:line="26" pos:column="19"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><operator pos:line="29" pos:column="9">(<pos:position pos:line="29" pos:column="10"/></operator><name pos:line="29" pos:column="10">rv<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <call><name pos:line="29" pos:column="15">apr_socket_create<pos:position pos:line="29" pos:column="32"/></name><argument_list pos:line="29" pos:column="32">(<argument><expr><name pos:line="29" pos:column="33">newsock<pos:position pos:line="29" pos:column="40"/></name></expr></argument>,
                                <argument><expr><name><name pos:line="30" pos:column="33">localsa<pos:position pos:line="30" pos:column="40"/></name><operator pos:line="30" pos:column="40">-&gt;<pos:position pos:line="30" pos:column="45"/></operator><name pos:line="30" pos:column="42">family<pos:position pos:line="30" pos:column="48"/></name></name></expr></argument>, <comment type="block" pos:line="30" pos:column="50">/* has to match */</comment>
                                <argument><expr><name pos:line="31" pos:column="33">SOCK_STREAM<pos:position pos:line="31" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="46">0<pos:position pos:line="31" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="49">conn<pos:position pos:line="31" pos:column="53"/></name><operator pos:line="31" pos:column="53">-&gt;<pos:position pos:line="31" pos:column="58"/></operator><name pos:line="31" pos:column="55">pool<pos:position pos:line="31" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call><operator pos:line="31" pos:column="60">)<pos:position pos:line="31" pos:column="61"/></operator> <operator pos:line="31" pos:column="62">!=<pos:position pos:line="31" pos:column="64"/></operator> <name pos:line="31" pos:column="65">APR_SUCCESS<pos:position pos:line="31" pos:column="76"/></name></expr>)<pos:position pos:line="31" pos:column="77"/></condition><then pos:line="31" pos:column="77"> <block pos:line="31" pos:column="78">{
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">ap_log_error<pos:position pos:line="32" pos:column="21"/></name><argument_list pos:line="32" pos:column="21">(<argument><expr><name pos:line="32" pos:column="22">APLOG_MARK<pos:position pos:line="32" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="34">APLOG_CRIT<pos:position pos:line="32" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="46">rv<pos:position pos:line="32" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="50">srv<pos:position pos:line="32" pos:column="53"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="33" pos:column="22">"rfc1413: error creating query socket"<pos:position pos:line="33" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="62"/></expr_stmt>
        <return pos:line="34" pos:column="9">return <expr><name pos:line="34" pos:column="16">rv<pos:position pos:line="34" pos:column="18"/></name></expr>;<pos:position pos:line="34" pos:column="19"/></return>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>

    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><operator pos:line="37" pos:column="9">(<pos:position pos:line="37" pos:column="10"/></operator><name pos:line="37" pos:column="10">rv<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">=<pos:position pos:line="37" pos:column="14"/></operator> <call><name pos:line="37" pos:column="15">apr_socket_timeout_set<pos:position pos:line="37" pos:column="37"/></name><argument_list pos:line="37" pos:column="37">(<argument><expr><operator pos:line="37" pos:column="38">*<pos:position pos:line="37" pos:column="39"/></operator><name pos:line="37" pos:column="39">newsock<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">timeout<pos:position pos:line="37" pos:column="55"/></name></expr></argument>)<pos:position pos:line="37" pos:column="56"/></argument_list></call><operator pos:line="37" pos:column="56">)<pos:position pos:line="37" pos:column="57"/></operator> <operator pos:line="37" pos:column="58">!=<pos:position pos:line="37" pos:column="60"/></operator> <name pos:line="37" pos:column="61">APR_SUCCESS<pos:position pos:line="37" pos:column="72"/></name></expr>)<pos:position pos:line="37" pos:column="73"/></condition><then pos:line="37" pos:column="73"> <block pos:line="37" pos:column="74">{
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">ap_log_error<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">APLOG_MARK<pos:position pos:line="38" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="34">APLOG_CRIT<pos:position pos:line="38" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="46">rv<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="50">srv<pos:position pos:line="38" pos:column="53"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="39" pos:column="22">"rfc1413: error setting query socket timeout"<pos:position pos:line="39" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">apr_socket_close<pos:position pos:line="40" pos:column="25"/></name><argument_list pos:line="40" pos:column="25">(<argument><expr><operator pos:line="40" pos:column="26">*<pos:position pos:line="40" pos:column="27"/></operator><name pos:line="40" pos:column="27">newsock<pos:position pos:line="40" pos:column="34"/></name></expr></argument>)<pos:position pos:line="40" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="36"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><name pos:line="41" pos:column="16">rv<pos:position pos:line="41" pos:column="18"/></name></expr>;<pos:position pos:line="41" pos:column="19"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

<comment type="block" pos:line="44" pos:column="1">/*
 * Bind the local and remote ends of the query socket to the same
 * IP addresses as the connection under investigation. We go
 * through all this trouble because the local or remote system
 * might have more than one network address. The RFC1413 etc.
 * client sends only port numbers; the server takes the IP
 * addresses from the query socket.
 */</comment>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><operator pos:line="53" pos:column="9">(<pos:position pos:line="53" pos:column="10"/></operator><name pos:line="53" pos:column="10">rv<pos:position pos:line="53" pos:column="12"/></name> <operator pos:line="53" pos:column="13">=<pos:position pos:line="53" pos:column="14"/></operator> <call><name pos:line="53" pos:column="15">apr_socket_bind<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><operator pos:line="53" pos:column="31">*<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="32">newsock<pos:position pos:line="53" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="41">localsa<pos:position pos:line="53" pos:column="48"/></name></expr></argument>)<pos:position pos:line="53" pos:column="49"/></argument_list></call><operator pos:line="53" pos:column="49">)<pos:position pos:line="53" pos:column="50"/></operator> <operator pos:line="53" pos:column="51">!=<pos:position pos:line="53" pos:column="53"/></operator> <name pos:line="53" pos:column="54">APR_SUCCESS<pos:position pos:line="53" pos:column="65"/></name></expr>)<pos:position pos:line="53" pos:column="66"/></condition><then pos:line="53" pos:column="66"> <block pos:line="53" pos:column="67">{
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">ap_log_error<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><name pos:line="54" pos:column="22">APLOG_MARK<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="34">APLOG_CRIT<pos:position pos:line="54" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="46">rv<pos:position pos:line="54" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="50">srv<pos:position pos:line="54" pos:column="53"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="55" pos:column="22">"rfc1413: Error binding query socket to local port"<pos:position pos:line="55" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">apr_socket_close<pos:position pos:line="56" pos:column="25"/></name><argument_list pos:line="56" pos:column="25">(<argument><expr><operator pos:line="56" pos:column="26">*<pos:position pos:line="56" pos:column="27"/></operator><name pos:line="56" pos:column="27">newsock<pos:position pos:line="56" pos:column="34"/></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
        <return pos:line="57" pos:column="9">return <expr><name pos:line="57" pos:column="16">rv<pos:position pos:line="57" pos:column="18"/></name></expr>;<pos:position pos:line="57" pos:column="19"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></then></if>

<comment type="block" pos:line="60" pos:column="1">/*
 * errors from connect usually imply the remote machine doesn't support
 * the service; don't log such an error
 */</comment>
    <if pos:line="64" pos:column="5">if <condition pos:line="64" pos:column="8">(<expr><operator pos:line="64" pos:column="9">(<pos:position pos:line="64" pos:column="10"/></operator><name pos:line="64" pos:column="10">rv<pos:position pos:line="64" pos:column="12"/></name> <operator pos:line="64" pos:column="13">=<pos:position pos:line="64" pos:column="14"/></operator> <call><name pos:line="64" pos:column="15">apr_socket_connect<pos:position pos:line="64" pos:column="33"/></name><argument_list pos:line="64" pos:column="33">(<argument><expr><operator pos:line="64" pos:column="34">*<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="35">newsock<pos:position pos:line="64" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="44">destsa<pos:position pos:line="64" pos:column="50"/></name></expr></argument>)<pos:position pos:line="64" pos:column="51"/></argument_list></call><operator pos:line="64" pos:column="51">)<pos:position pos:line="64" pos:column="52"/></operator> <operator pos:line="64" pos:column="53">!=<pos:position pos:line="64" pos:column="55"/></operator> <name pos:line="64" pos:column="56">APR_SUCCESS<pos:position pos:line="64" pos:column="67"/></name></expr>)<pos:position pos:line="64" pos:column="68"/></condition><then pos:line="64" pos:column="68"> <block pos:line="64" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">apr_socket_close<pos:position pos:line="65" pos:column="25"/></name><argument_list pos:line="65" pos:column="25">(<argument><expr><operator pos:line="65" pos:column="26">*<pos:position pos:line="65" pos:column="27"/></operator><name pos:line="65" pos:column="27">newsock<pos:position pos:line="65" pos:column="34"/></name></expr></argument>)<pos:position pos:line="65" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="36"/></expr_stmt>
        <return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">rv<pos:position pos:line="66" pos:column="18"/></name></expr>;<pos:position pos:line="66" pos:column="19"/></return>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">APR_SUCCESS<pos:position pos:line="69" pos:column="23"/></name></expr>;<pos:position pos:line="69" pos:column="24"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
