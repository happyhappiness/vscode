<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1951_httpd-2.4.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">set_balancer_param<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">proxy_server_conf<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">conf<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">apr_pool_t<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">p<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="3" pos:column="39">proxy_balancer<pos:position pos:line="3" pos:column="53"/></name> <modifier pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></modifier></type><name pos:line="3" pos:column="55">balancer<pos:position pos:line="3" pos:column="63"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="4" pos:column="39">const<pos:position pos:line="4" pos:column="44"/></specifier> <name pos:line="4" pos:column="45">char<pos:position pos:line="4" pos:column="49"/></name> <modifier pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></modifier></type><name pos:line="4" pos:column="51">key<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="5" pos:column="39">const<pos:position pos:line="5" pos:column="44"/></specifier> <name pos:line="5" pos:column="45">char<pos:position pos:line="5" pos:column="49"/></name> <modifier pos:line="5" pos:column="50">*<pos:position pos:line="5" pos:column="51"/></modifier></type><name pos:line="5" pos:column="51">val<pos:position pos:line="5" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="55"/></parameter_list>
<block pos:line="6" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">ival<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name pos:line="9" pos:column="10">strcasecmp<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">key<pos:position pos:line="9" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="26">"stickysession"<pos:position pos:line="9" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="43"/></condition><then pos:line="9" pos:column="43"> <block pos:line="9" pos:column="44">{
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">char<pos:position pos:line="10" pos:column="13"/></name> <modifier pos:line="10" pos:column="14">*<pos:position pos:line="10" pos:column="15"/></modifier></type><name pos:line="10" pos:column="15">path<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>
        <comment type="block" pos:line="11" pos:column="9">/* Balancer sticky session name.
         * Set to something like JSESSIONID or
         * PHPSESSIONID, etc..,
         */</comment>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><call><name pos:line="15" pos:column="13">strlen<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">val<pos:position pos:line="15" pos:column="23"/></name></expr></argument>)<pos:position pos:line="15" pos:column="24"/></argument_list></call> <operator pos:line="15" pos:column="25">&gt;=<pos:position pos:line="15" pos:column="30"/></operator> <sizeof pos:line="15" pos:column="28">sizeof<argument_list pos:line="15" pos:column="34">(<argument><expr><name><name pos:line="15" pos:column="35">balancer<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">s<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">-&gt;<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="48">sticky_path<pos:position pos:line="15" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="60"/></argument_list></sizeof></expr>)<pos:position pos:line="15" pos:column="61"/></condition><then pos:line="15" pos:column="61">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="16" pos:column="13">apr_psprintf<pos:position pos:line="16" pos:column="25"/></name><argument_list pos:line="16" pos:column="25">(<argument><expr><name pos:line="16" pos:column="26">p<pos:position pos:line="16" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="29">"stickysession length must be &lt; %d characters"<pos:position pos:line="16" pos:column="78"/></literal></expr></argument>,
                    <argument><expr><operator pos:line="17" pos:column="21">(<pos:position pos:line="17" pos:column="22"/></operator><name pos:line="17" pos:column="22">int<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">)<pos:position pos:line="17" pos:column="26"/></operator><sizeof pos:line="17" pos:column="26">sizeof<argument_list pos:line="17" pos:column="32">(<argument><expr><name><name pos:line="17" pos:column="33">balancer<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">-&gt;<pos:position pos:line="17" pos:column="46"/></operator><name pos:line="17" pos:column="43">s<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">-&gt;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="46">sticky_path<pos:position pos:line="17" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="17" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="60"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">PROXY_STRNCPY<pos:position pos:line="18" pos:column="22"/></name><argument_list pos:line="18" pos:column="22">(<argument><expr><name><name pos:line="18" pos:column="23">balancer<pos:position pos:line="18" pos:column="31"/></name><operator pos:line="18" pos:column="31">-&gt;<pos:position pos:line="18" pos:column="36"/></operator><name pos:line="18" pos:column="33">s<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">-&gt;<pos:position pos:line="18" pos:column="39"/></operator><name pos:line="18" pos:column="36">sticky_path<pos:position pos:line="18" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="49">val<pos:position pos:line="18" pos:column="52"/></name></expr></argument>)<pos:position pos:line="18" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">PROXY_STRNCPY<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name><name pos:line="19" pos:column="23">balancer<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">-&gt;<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="33">s<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">-&gt;<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="36">sticky<pos:position pos:line="19" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="44">val<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>

        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><operator pos:line="21" pos:column="13">(<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">path<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="21">strchr<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><operator pos:line="21" pos:column="28">(<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="29">char<pos:position pos:line="21" pos:column="33"/></name> <operator pos:line="21" pos:column="34">*<pos:position pos:line="21" pos:column="35"/></operator><operator pos:line="21" pos:column="35">)<pos:position pos:line="21" pos:column="36"/></operator><name><name pos:line="21" pos:column="36">balancer<pos:position pos:line="21" pos:column="44"/></name><operator pos:line="21" pos:column="44">-&gt;<pos:position pos:line="21" pos:column="49"/></operator><name pos:line="21" pos:column="46">s<pos:position pos:line="21" pos:column="47"/></name><operator pos:line="21" pos:column="47">-&gt;<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="49">sticky<pos:position pos:line="21" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="21" pos:column="57">'|'<pos:position pos:line="21" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call><operator pos:line="21" pos:column="61">)<pos:position pos:line="21" pos:column="62"/></operator></expr>)<pos:position pos:line="21" pos:column="63"/></condition><then pos:line="21" pos:column="63"> <block pos:line="21" pos:column="64">{
            <expr_stmt><expr><operator pos:line="22" pos:column="13">*<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">path<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">++<pos:position pos:line="22" pos:column="20"/></operator> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <literal type="char" pos:line="22" pos:column="23">'\0'<pos:position pos:line="22" pos:column="27"/></literal></expr>;<pos:position pos:line="22" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">PROXY_STRNCPY<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">(<argument><expr><name><name pos:line="23" pos:column="27">balancer<pos:position pos:line="23" pos:column="35"/></name><operator pos:line="23" pos:column="35">-&gt;<pos:position pos:line="23" pos:column="40"/></operator><name pos:line="23" pos:column="37">s<pos:position pos:line="23" pos:column="38"/></name><operator pos:line="23" pos:column="38">-&gt;<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="40">sticky_path<pos:position pos:line="23" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="53">path<pos:position pos:line="23" pos:column="57"/></name></expr></argument>)<pos:position pos:line="23" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="59"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>
    }<pos:position pos:line="25" pos:column="6"/></block></then>
    <elseif pos:line="26" pos:column="5">else <if pos:line="26" pos:column="10">if <condition pos:line="26" pos:column="13">(<expr><operator pos:line="26" pos:column="14">!<pos:position pos:line="26" pos:column="15"/></operator><call><name pos:line="26" pos:column="15">strcasecmp<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">key<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="31">"stickysessionsep"<pos:position pos:line="26" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="51"/></condition><then pos:line="26" pos:column="51"> <block pos:line="26" pos:column="52">{
        <comment type="block" pos:line="27" pos:column="9">/* separator/delimiter for sessionid and route,
         * normally '.'
         */</comment>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">strlen<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><name pos:line="30" pos:column="20">val<pos:position pos:line="30" pos:column="23"/></name></expr></argument>)<pos:position pos:line="30" pos:column="24"/></argument_list></call> <operator pos:line="30" pos:column="25">!=<pos:position pos:line="30" pos:column="27"/></operator> <literal type="number" pos:line="30" pos:column="28">1<pos:position pos:line="30" pos:column="29"/></literal></expr>)<pos:position pos:line="30" pos:column="30"/></condition><then pos:line="30" pos:column="30"> <block pos:line="30" pos:column="31">{
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><operator pos:line="31" pos:column="17">!<pos:position pos:line="31" pos:column="18"/></operator><call><name pos:line="31" pos:column="18">strcasecmp<pos:position pos:line="31" pos:column="28"/></name><argument_list pos:line="31" pos:column="28">(<argument><expr><name pos:line="31" pos:column="29">val<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="34">"off"<pos:position pos:line="31" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="41"/></condition><then pos:line="31" pos:column="41">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="32" pos:column="17">balancer<pos:position pos:line="32" pos:column="25"/></name><operator pos:line="32" pos:column="25">-&gt;<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="27">s<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">-&gt;<pos:position pos:line="32" pos:column="33"/></operator><name pos:line="32" pos:column="30">sticky_separator<pos:position pos:line="32" pos:column="46"/></name></name> <operator pos:line="32" pos:column="47">=<pos:position pos:line="32" pos:column="48"/></operator> <literal type="number" pos:line="32" pos:column="49">0<pos:position pos:line="32" pos:column="50"/></literal></expr>;<pos:position pos:line="32" pos:column="51"/></expr_stmt></block></then>
            <else pos:line="33" pos:column="13">else      
                <block type="pseudo"><return pos:line="34" pos:column="17">return <expr><literal type="string" pos:line="34" pos:column="24">"stickysessionsep must be a single character or Off"<pos:position pos:line="34" pos:column="76"/></literal></expr>;<pos:position pos:line="34" pos:column="77"/></return></block></else></if>
        }<pos:position pos:line="35" pos:column="10"/></block></then>
        <else pos:line="36" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="37" pos:column="13">balancer<pos:position pos:line="37" pos:column="21"/></name><operator pos:line="37" pos:column="21">-&gt;<pos:position pos:line="37" pos:column="26"/></operator><name pos:line="37" pos:column="23">s<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">-&gt;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="26">sticky_separator<pos:position pos:line="37" pos:column="42"/></name></name> <operator pos:line="37" pos:column="43">=<pos:position pos:line="37" pos:column="44"/></operator> <operator pos:line="37" pos:column="45">*<pos:position pos:line="37" pos:column="46"/></operator><name pos:line="37" pos:column="46">val<pos:position pos:line="37" pos:column="49"/></name></expr>;<pos:position pos:line="37" pos:column="50"/></expr_stmt></block></else></if>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="39" pos:column="5">else <if pos:line="39" pos:column="10">if <condition pos:line="39" pos:column="13">(<expr><operator pos:line="39" pos:column="14">!<pos:position pos:line="39" pos:column="15"/></operator><call><name pos:line="39" pos:column="15">strcasecmp<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">key<pos:position pos:line="39" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="31">"nofailover"<pos:position pos:line="39" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="45"/></condition><then pos:line="39" pos:column="45"> <block pos:line="39" pos:column="46">{
        <comment type="block" pos:line="40" pos:column="9">/* If set to 'on' the session will break
         * if the worker is in error state or
         * disabled.
         */</comment>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><call><name pos:line="44" pos:column="14">strcasecmp<pos:position pos:line="44" pos:column="24"/></name><argument_list pos:line="44" pos:column="24">(<argument><expr><name pos:line="44" pos:column="25">val<pos:position pos:line="44" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="44" pos:column="30">"on"<pos:position pos:line="44" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="36"/></condition><then pos:line="44" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="45" pos:column="13">balancer<pos:position pos:line="45" pos:column="21"/></name><operator pos:line="45" pos:column="21">-&gt;<pos:position pos:line="45" pos:column="26"/></operator><name pos:line="45" pos:column="23">s<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">sticky_force<pos:position pos:line="45" pos:column="38"/></name></name> <operator pos:line="45" pos:column="39">=<pos:position pos:line="45" pos:column="40"/></operator> <literal type="number" pos:line="45" pos:column="41">1<pos:position pos:line="45" pos:column="42"/></literal></expr>;<pos:position pos:line="45" pos:column="43"/></expr_stmt></block></then>
        <elseif pos:line="46" pos:column="9">else <if pos:line="46" pos:column="14">if <condition pos:line="46" pos:column="17">(<expr><operator pos:line="46" pos:column="18">!<pos:position pos:line="46" pos:column="19"/></operator><call><name pos:line="46" pos:column="19">strcasecmp<pos:position pos:line="46" pos:column="29"/></name><argument_list pos:line="46" pos:column="29">(<argument><expr><name pos:line="46" pos:column="30">val<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="35">"off"<pos:position pos:line="46" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="42"/></condition><then pos:line="46" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="47" pos:column="13">balancer<pos:position pos:line="47" pos:column="21"/></name><operator pos:line="47" pos:column="21">-&gt;<pos:position pos:line="47" pos:column="26"/></operator><name pos:line="47" pos:column="23">s<pos:position pos:line="47" pos:column="24"/></name><operator pos:line="47" pos:column="24">-&gt;<pos:position pos:line="47" pos:column="29"/></operator><name pos:line="47" pos:column="26">sticky_force<pos:position pos:line="47" pos:column="38"/></name></name> <operator pos:line="47" pos:column="39">=<pos:position pos:line="47" pos:column="40"/></operator> <literal type="number" pos:line="47" pos:column="41">0<pos:position pos:line="47" pos:column="42"/></literal></expr>;<pos:position pos:line="47" pos:column="43"/></expr_stmt></block></then></if></elseif>
        <else pos:line="48" pos:column="9">else
            <block type="pseudo"><return pos:line="49" pos:column="13">return <expr><literal type="string" pos:line="49" pos:column="20">"failover must be On|Off"<pos:position pos:line="49" pos:column="45"/></literal></expr>;<pos:position pos:line="49" pos:column="46"/></return></block></else></if>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="51" pos:column="5">else <if pos:line="51" pos:column="10">if <condition pos:line="51" pos:column="13">(<expr><operator pos:line="51" pos:column="14">!<pos:position pos:line="51" pos:column="15"/></operator><call><name pos:line="51" pos:column="15">strcasecmp<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">key<pos:position pos:line="51" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="31">"timeout"<pos:position pos:line="51" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="42"/></condition><then pos:line="51" pos:column="42"> <block pos:line="51" pos:column="43">{
        <comment type="block" pos:line="52" pos:column="9">/* Balancer timeout in seconds.
         * If set this will be the maximum time to
         * wait for a free worker.
         * Default is not to wait.
         */</comment>
        <expr_stmt><expr><name pos:line="57" pos:column="9">ival<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">=<pos:position pos:line="57" pos:column="15"/></operator> <call><name pos:line="57" pos:column="16">atoi<pos:position pos:line="57" pos:column="20"/></name><argument_list pos:line="57" pos:column="20">(<argument><expr><name pos:line="57" pos:column="21">val<pos:position pos:line="57" pos:column="24"/></name></expr></argument>)<pos:position pos:line="57" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="26"/></expr_stmt>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">ival<pos:position pos:line="58" pos:column="17"/></name> <operator pos:line="58" pos:column="18">&lt;<pos:position pos:line="58" pos:column="22"/></operator> <literal type="number" pos:line="58" pos:column="20">1<pos:position pos:line="58" pos:column="21"/></literal></expr>)<pos:position pos:line="58" pos:column="22"/></condition><then pos:line="58" pos:column="22">
            <block type="pseudo"><return pos:line="59" pos:column="13">return <expr><literal type="string" pos:line="59" pos:column="20">"timeout must be at least one second"<pos:position pos:line="59" pos:column="57"/></literal></expr>;<pos:position pos:line="59" pos:column="58"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="60" pos:column="9">balancer<pos:position pos:line="60" pos:column="17"/></name><operator pos:line="60" pos:column="17">-&gt;<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="19">s<pos:position pos:line="60" pos:column="20"/></name><operator pos:line="60" pos:column="20">-&gt;<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="22">timeout<pos:position pos:line="60" pos:column="29"/></name></name> <operator pos:line="60" pos:column="30">=<pos:position pos:line="60" pos:column="31"/></operator> <call><name pos:line="60" pos:column="32">apr_time_from_sec<pos:position pos:line="60" pos:column="49"/></name><argument_list pos:line="60" pos:column="49">(<argument><expr><name pos:line="60" pos:column="50">ival<pos:position pos:line="60" pos:column="54"/></name></expr></argument>)<pos:position pos:line="60" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="62" pos:column="5">else <if pos:line="62" pos:column="10">if <condition pos:line="62" pos:column="13">(<expr><operator pos:line="62" pos:column="14">!<pos:position pos:line="62" pos:column="15"/></operator><call><name pos:line="62" pos:column="15">strcasecmp<pos:position pos:line="62" pos:column="25"/></name><argument_list pos:line="62" pos:column="25">(<argument><expr><name pos:line="62" pos:column="26">key<pos:position pos:line="62" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="31">"maxattempts"<pos:position pos:line="62" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="46"/></condition><then pos:line="62" pos:column="46"> <block pos:line="62" pos:column="47">{
        <comment type="block" pos:line="63" pos:column="9">/* Maximum number of failover attempts before
         * giving up.
         */</comment>
        <expr_stmt><expr><name pos:line="66" pos:column="9">ival<pos:position pos:line="66" pos:column="13"/></name> <operator pos:line="66" pos:column="14">=<pos:position pos:line="66" pos:column="15"/></operator> <call><name pos:line="66" pos:column="16">atoi<pos:position pos:line="66" pos:column="20"/></name><argument_list pos:line="66" pos:column="20">(<argument><expr><name pos:line="66" pos:column="21">val<pos:position pos:line="66" pos:column="24"/></name></expr></argument>)<pos:position pos:line="66" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="26"/></expr_stmt>
        <if pos:line="67" pos:column="9">if <condition pos:line="67" pos:column="12">(<expr><name pos:line="67" pos:column="13">ival<pos:position pos:line="67" pos:column="17"/></name> <operator pos:line="67" pos:column="18">&lt;<pos:position pos:line="67" pos:column="22"/></operator> <literal type="number" pos:line="67" pos:column="20">0<pos:position pos:line="67" pos:column="21"/></literal></expr>)<pos:position pos:line="67" pos:column="22"/></condition><then pos:line="67" pos:column="22">
            <block type="pseudo"><return pos:line="68" pos:column="13">return <expr><literal type="string" pos:line="68" pos:column="20">"maximum number of attempts must be a positive number"<pos:position pos:line="68" pos:column="74"/></literal></expr>;<pos:position pos:line="68" pos:column="75"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="69" pos:column="9">balancer<pos:position pos:line="69" pos:column="17"/></name><operator pos:line="69" pos:column="17">-&gt;<pos:position pos:line="69" pos:column="22"/></operator><name pos:line="69" pos:column="19">s<pos:position pos:line="69" pos:column="20"/></name><operator pos:line="69" pos:column="20">-&gt;<pos:position pos:line="69" pos:column="25"/></operator><name pos:line="69" pos:column="22">max_attempts<pos:position pos:line="69" pos:column="34"/></name></name> <operator pos:line="69" pos:column="35">=<pos:position pos:line="69" pos:column="36"/></operator> <name pos:line="69" pos:column="37">ival<pos:position pos:line="69" pos:column="41"/></name></expr>;<pos:position pos:line="69" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="70" pos:column="9">balancer<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">-&gt;<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="19">s<pos:position pos:line="70" pos:column="20"/></name><operator pos:line="70" pos:column="20">-&gt;<pos:position pos:line="70" pos:column="25"/></operator><name pos:line="70" pos:column="22">max_attempts_set<pos:position pos:line="70" pos:column="38"/></name></name> <operator pos:line="70" pos:column="39">=<pos:position pos:line="70" pos:column="40"/></operator> <literal type="number" pos:line="70" pos:column="41">1<pos:position pos:line="70" pos:column="42"/></literal></expr>;<pos:position pos:line="70" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="72" pos:column="5">else <if pos:line="72" pos:column="10">if <condition pos:line="72" pos:column="13">(<expr><operator pos:line="72" pos:column="14">!<pos:position pos:line="72" pos:column="15"/></operator><call><name pos:line="72" pos:column="15">strcasecmp<pos:position pos:line="72" pos:column="25"/></name><argument_list pos:line="72" pos:column="25">(<argument><expr><name pos:line="72" pos:column="26">key<pos:position pos:line="72" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="31">"lbmethod"<pos:position pos:line="72" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="43"/></condition><then pos:line="72" pos:column="43"> <block pos:line="72" pos:column="44">{
        <decl_stmt><decl><type><name pos:line="73" pos:column="9">proxy_balancer_method<pos:position pos:line="73" pos:column="30"/></name> <modifier pos:line="73" pos:column="31">*<pos:position pos:line="73" pos:column="32"/></modifier></type><name pos:line="73" pos:column="32">provider<pos:position pos:line="73" pos:column="40"/></name></decl>;<pos:position pos:line="73" pos:column="41"/></decl_stmt>
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><call><name pos:line="74" pos:column="13">strlen<pos:position pos:line="74" pos:column="19"/></name><argument_list pos:line="74" pos:column="19">(<argument><expr><name pos:line="74" pos:column="20">val<pos:position pos:line="74" pos:column="23"/></name></expr></argument>)<pos:position pos:line="74" pos:column="24"/></argument_list></call> <operator pos:line="74" pos:column="25">&gt;<pos:position pos:line="74" pos:column="29"/></operator> <operator pos:line="74" pos:column="27">(<pos:position pos:line="74" pos:column="28"/></operator><sizeof pos:line="74" pos:column="28">sizeof<argument_list pos:line="74" pos:column="34">(<argument><expr><name><name pos:line="74" pos:column="35">balancer<pos:position pos:line="74" pos:column="43"/></name><operator pos:line="74" pos:column="43">-&gt;<pos:position pos:line="74" pos:column="48"/></operator><name pos:line="74" pos:column="45">s<pos:position pos:line="74" pos:column="46"/></name><operator pos:line="74" pos:column="46">-&gt;<pos:position pos:line="74" pos:column="51"/></operator><name pos:line="74" pos:column="48">lbpname<pos:position pos:line="74" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="56"/></argument_list></sizeof><operator pos:line="74" pos:column="56">-<pos:position pos:line="74" pos:column="57"/></operator><literal type="number" pos:line="74" pos:column="57">1<pos:position pos:line="74" pos:column="58"/></literal><operator pos:line="74" pos:column="58">)<pos:position pos:line="74" pos:column="59"/></operator></expr>)<pos:position pos:line="74" pos:column="60"/></condition><then pos:line="74" pos:column="60">
            <block type="pseudo"><return pos:line="75" pos:column="13">return <expr><literal type="string" pos:line="75" pos:column="20">"unknown lbmethod"<pos:position pos:line="75" pos:column="38"/></literal></expr>;<pos:position pos:line="75" pos:column="39"/></return></block></then></if>
        <expr_stmt><expr><name pos:line="76" pos:column="9">provider<pos:position pos:line="76" pos:column="17"/></name> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <call><name pos:line="76" pos:column="20">ap_lookup_provider<pos:position pos:line="76" pos:column="38"/></name><argument_list pos:line="76" pos:column="38">(<argument><expr><name pos:line="76" pos:column="39">PROXY_LBMETHOD<pos:position pos:line="76" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="55">val<pos:position pos:line="76" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="60">"0"<pos:position pos:line="76" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="65"/></expr_stmt>
        <if pos:line="77" pos:column="9">if <condition pos:line="77" pos:column="12">(<expr><name pos:line="77" pos:column="13">provider<pos:position pos:line="77" pos:column="21"/></name></expr>)<pos:position pos:line="77" pos:column="22"/></condition><then pos:line="77" pos:column="22"> <block pos:line="77" pos:column="23">{
            <expr_stmt><expr><name><name pos:line="78" pos:column="13">balancer<pos:position pos:line="78" pos:column="21"/></name><operator pos:line="78" pos:column="21">-&gt;<pos:position pos:line="78" pos:column="26"/></operator><name pos:line="78" pos:column="23">lbmethod<pos:position pos:line="78" pos:column="31"/></name></name> <operator pos:line="78" pos:column="32">=<pos:position pos:line="78" pos:column="33"/></operator> <name pos:line="78" pos:column="34">provider<pos:position pos:line="78" pos:column="42"/></name></expr>;<pos:position pos:line="78" pos:column="43"/></expr_stmt>
            <if pos:line="79" pos:column="13">if <condition pos:line="79" pos:column="16">(<expr><call><name pos:line="79" pos:column="17">PROXY_STRNCPY<pos:position pos:line="79" pos:column="30"/></name><argument_list pos:line="79" pos:column="30">(<argument><expr><name><name pos:line="79" pos:column="31">balancer<pos:position pos:line="79" pos:column="39"/></name><operator pos:line="79" pos:column="39">-&gt;<pos:position pos:line="79" pos:column="44"/></operator><name pos:line="79" pos:column="41">s<pos:position pos:line="79" pos:column="42"/></name><operator pos:line="79" pos:column="42">-&gt;<pos:position pos:line="79" pos:column="47"/></operator><name pos:line="79" pos:column="44">lbpname<pos:position pos:line="79" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="53">val<pos:position pos:line="79" pos:column="56"/></name></expr></argument>)<pos:position pos:line="79" pos:column="57"/></argument_list></call> <operator pos:line="79" pos:column="58">==<pos:position pos:line="79" pos:column="60"/></operator> <name pos:line="79" pos:column="61">APR_SUCCESS<pos:position pos:line="79" pos:column="72"/></name></expr>)<pos:position pos:line="79" pos:column="73"/></condition><then pos:line="79" pos:column="73"> <block pos:line="79" pos:column="74">{
                <return pos:line="80" pos:column="17">return <expr><name pos:line="80" pos:column="24">NULL<pos:position pos:line="80" pos:column="28"/></name></expr>;<pos:position pos:line="80" pos:column="29"/></return>
            }<pos:position pos:line="81" pos:column="14"/></block></then>
            <else pos:line="82" pos:column="13">else <block pos:line="82" pos:column="18">{
                <return pos:line="83" pos:column="17">return <expr><literal type="string" pos:line="83" pos:column="24">"lbmethod name too large"<pos:position pos:line="83" pos:column="49"/></literal></expr>;<pos:position pos:line="83" pos:column="50"/></return>
            }<pos:position pos:line="84" pos:column="14"/></block></else></if>
        }<pos:position pos:line="85" pos:column="10"/></block></then></if>
        <return pos:line="86" pos:column="9">return <expr><literal type="string" pos:line="86" pos:column="16">"unknown lbmethod"<pos:position pos:line="86" pos:column="34"/></literal></expr>;<pos:position pos:line="86" pos:column="35"/></return>
    }<pos:position pos:line="87" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="88" pos:column="5">else <if pos:line="88" pos:column="10">if <condition pos:line="88" pos:column="13">(<expr><operator pos:line="88" pos:column="14">!<pos:position pos:line="88" pos:column="15"/></operator><call><name pos:line="88" pos:column="15">strcasecmp<pos:position pos:line="88" pos:column="25"/></name><argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">key<pos:position pos:line="88" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="31">"scolonpathdelim"<pos:position pos:line="88" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="50"/></condition><then pos:line="88" pos:column="50"> <block pos:line="88" pos:column="51">{
        <comment type="block" pos:line="89" pos:column="9">/* If set to 'on' then ';' will also be
         * used as a session path separator/delim (ala
         * mod_jk)
         */</comment>
        <if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><operator pos:line="93" pos:column="13">!<pos:position pos:line="93" pos:column="14"/></operator><call><name pos:line="93" pos:column="14">strcasecmp<pos:position pos:line="93" pos:column="24"/></name><argument_list pos:line="93" pos:column="24">(<argument><expr><name pos:line="93" pos:column="25">val<pos:position pos:line="93" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="30">"on"<pos:position pos:line="93" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="36"/></condition><then pos:line="93" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="94" pos:column="13">balancer<pos:position pos:line="94" pos:column="21"/></name><operator pos:line="94" pos:column="21">-&gt;<pos:position pos:line="94" pos:column="26"/></operator><name pos:line="94" pos:column="23">s<pos:position pos:line="94" pos:column="24"/></name><operator pos:line="94" pos:column="24">-&gt;<pos:position pos:line="94" pos:column="29"/></operator><name pos:line="94" pos:column="26">scolonsep<pos:position pos:line="94" pos:column="35"/></name></name> <operator pos:line="94" pos:column="36">=<pos:position pos:line="94" pos:column="37"/></operator> <literal type="number" pos:line="94" pos:column="38">1<pos:position pos:line="94" pos:column="39"/></literal></expr>;<pos:position pos:line="94" pos:column="40"/></expr_stmt></block></then>
        <elseif pos:line="95" pos:column="9">else <if pos:line="95" pos:column="14">if <condition pos:line="95" pos:column="17">(<expr><operator pos:line="95" pos:column="18">!<pos:position pos:line="95" pos:column="19"/></operator><call><name pos:line="95" pos:column="19">strcasecmp<pos:position pos:line="95" pos:column="29"/></name><argument_list pos:line="95" pos:column="29">(<argument><expr><name pos:line="95" pos:column="30">val<pos:position pos:line="95" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="95" pos:column="35">"off"<pos:position pos:line="95" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="95" pos:column="42"/></condition><then pos:line="95" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="96" pos:column="13">balancer<pos:position pos:line="96" pos:column="21"/></name><operator pos:line="96" pos:column="21">-&gt;<pos:position pos:line="96" pos:column="26"/></operator><name pos:line="96" pos:column="23">s<pos:position pos:line="96" pos:column="24"/></name><operator pos:line="96" pos:column="24">-&gt;<pos:position pos:line="96" pos:column="29"/></operator><name pos:line="96" pos:column="26">scolonsep<pos:position pos:line="96" pos:column="35"/></name></name> <operator pos:line="96" pos:column="36">=<pos:position pos:line="96" pos:column="37"/></operator> <literal type="number" pos:line="96" pos:column="38">0<pos:position pos:line="96" pos:column="39"/></literal></expr>;<pos:position pos:line="96" pos:column="40"/></expr_stmt></block></then></if></elseif>
        <else pos:line="97" pos:column="9">else
            <block type="pseudo"><return pos:line="98" pos:column="13">return <expr><literal type="string" pos:line="98" pos:column="20">"scolonpathdelim must be On|Off"<pos:position pos:line="98" pos:column="52"/></literal></expr>;<pos:position pos:line="98" pos:column="53"/></return></block></else></if>
    }<pos:position pos:line="99" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="100" pos:column="5">else <if pos:line="100" pos:column="10">if <condition pos:line="100" pos:column="13">(<expr><operator pos:line="100" pos:column="14">!<pos:position pos:line="100" pos:column="15"/></operator><call><name pos:line="100" pos:column="15">strcasecmp<pos:position pos:line="100" pos:column="25"/></name><argument_list pos:line="100" pos:column="25">(<argument><expr><name pos:line="100" pos:column="26">key<pos:position pos:line="100" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="100" pos:column="31">"failonstatus"<pos:position pos:line="100" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="47"/></condition><then pos:line="100" pos:column="47"> <block pos:line="100" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="101" pos:column="9">char<pos:position pos:line="101" pos:column="13"/></name> <modifier pos:line="101" pos:column="14">*<pos:position pos:line="101" pos:column="15"/></modifier></type><name pos:line="101" pos:column="15">val_split<pos:position pos:line="101" pos:column="24"/></name></decl>;<pos:position pos:line="101" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="102" pos:column="9">char<pos:position pos:line="102" pos:column="13"/></name> <modifier pos:line="102" pos:column="14">*<pos:position pos:line="102" pos:column="15"/></modifier></type><name pos:line="102" pos:column="15">status<pos:position pos:line="102" pos:column="21"/></name></decl>;<pos:position pos:line="102" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="103" pos:column="9">char<pos:position pos:line="103" pos:column="13"/></name> <modifier pos:line="103" pos:column="14">*<pos:position pos:line="103" pos:column="15"/></modifier></type><name pos:line="103" pos:column="15">tok_state<pos:position pos:line="103" pos:column="24"/></name></decl>;<pos:position pos:line="103" pos:column="25"/></decl_stmt>

        <expr_stmt><expr><name pos:line="105" pos:column="9">val_split<pos:position pos:line="105" pos:column="18"/></name> <operator pos:line="105" pos:column="19">=<pos:position pos:line="105" pos:column="20"/></operator> <call><name pos:line="105" pos:column="21">apr_pstrdup<pos:position pos:line="105" pos:column="32"/></name><argument_list pos:line="105" pos:column="32">(<argument><expr><name pos:line="105" pos:column="33">p<pos:position pos:line="105" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="36">val<pos:position pos:line="105" pos:column="39"/></name></expr></argument>)<pos:position pos:line="105" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="41"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="107" pos:column="9">balancer<pos:position pos:line="107" pos:column="17"/></name><operator pos:line="107" pos:column="17">-&gt;<pos:position pos:line="107" pos:column="22"/></operator><name pos:line="107" pos:column="19">errstatuses<pos:position pos:line="107" pos:column="30"/></name></name> <operator pos:line="107" pos:column="31">=<pos:position pos:line="107" pos:column="32"/></operator> <call><name pos:line="107" pos:column="33">apr_array_make<pos:position pos:line="107" pos:column="47"/></name><argument_list pos:line="107" pos:column="47">(<argument><expr><name pos:line="107" pos:column="48">p<pos:position pos:line="107" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="107" pos:column="51">1<pos:position pos:line="107" pos:column="52"/></literal></expr></argument>, <argument><expr><sizeof pos:line="107" pos:column="54">sizeof<argument_list pos:line="107" pos:column="60">(<argument><expr><name pos:line="107" pos:column="61">int<pos:position pos:line="107" pos:column="64"/></name></expr></argument>)<pos:position pos:line="107" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="107" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="67"/></expr_stmt>

        <expr_stmt><expr><name pos:line="109" pos:column="9">status<pos:position pos:line="109" pos:column="15"/></name> <operator pos:line="109" pos:column="16">=<pos:position pos:line="109" pos:column="17"/></operator> <call><name pos:line="109" pos:column="18">apr_strtok<pos:position pos:line="109" pos:column="28"/></name><argument_list pos:line="109" pos:column="28">(<argument><expr><name pos:line="109" pos:column="29">val_split<pos:position pos:line="109" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="40">", "<pos:position pos:line="109" pos:column="44"/></literal></expr></argument>, <argument><expr><operator pos:line="109" pos:column="46">&amp;<pos:position pos:line="109" pos:column="51"/></operator><name pos:line="109" pos:column="47">tok_state<pos:position pos:line="109" pos:column="56"/></name></expr></argument>)<pos:position pos:line="109" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="58"/></expr_stmt>
        <while pos:line="110" pos:column="9">while <condition pos:line="110" pos:column="15">(<expr><name pos:line="110" pos:column="16">status<pos:position pos:line="110" pos:column="22"/></name> <operator pos:line="110" pos:column="23">!=<pos:position pos:line="110" pos:column="25"/></operator> <name pos:line="110" pos:column="26">NULL<pos:position pos:line="110" pos:column="30"/></name></expr>)<pos:position pos:line="110" pos:column="31"/></condition> <block pos:line="110" pos:column="32">{
            <expr_stmt><expr><name pos:line="111" pos:column="13">ival<pos:position pos:line="111" pos:column="17"/></name> <operator pos:line="111" pos:column="18">=<pos:position pos:line="111" pos:column="19"/></operator> <call><name pos:line="111" pos:column="20">atoi<pos:position pos:line="111" pos:column="24"/></name><argument_list pos:line="111" pos:column="24">(<argument><expr><name pos:line="111" pos:column="25">status<pos:position pos:line="111" pos:column="31"/></name></expr></argument>)<pos:position pos:line="111" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="33"/></expr_stmt>
            <if pos:line="112" pos:column="13">if <condition pos:line="112" pos:column="16">(<expr><call><name pos:line="112" pos:column="17">ap_is_HTTP_VALID_RESPONSE<pos:position pos:line="112" pos:column="42"/></name><argument_list pos:line="112" pos:column="42">(<argument><expr><name pos:line="112" pos:column="43">ival<pos:position pos:line="112" pos:column="47"/></name></expr></argument>)<pos:position pos:line="112" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="112" pos:column="49"/></condition><then pos:line="112" pos:column="49"> <block pos:line="112" pos:column="50">{
                <expr_stmt><expr><operator pos:line="113" pos:column="17">*<pos:position pos:line="113" pos:column="18"/></operator><operator pos:line="113" pos:column="18">(<pos:position pos:line="113" pos:column="19"/></operator><name pos:line="113" pos:column="19">int<pos:position pos:line="113" pos:column="22"/></name> <operator pos:line="113" pos:column="23">*<pos:position pos:line="113" pos:column="24"/></operator><operator pos:line="113" pos:column="24">)<pos:position pos:line="113" pos:column="25"/></operator><call><name pos:line="113" pos:column="25">apr_array_push<pos:position pos:line="113" pos:column="39"/></name><argument_list pos:line="113" pos:column="39">(<argument><expr><name><name pos:line="113" pos:column="40">balancer<pos:position pos:line="113" pos:column="48"/></name><operator pos:line="113" pos:column="48">-&gt;<pos:position pos:line="113" pos:column="53"/></operator><name pos:line="113" pos:column="50">errstatuses<pos:position pos:line="113" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="113" pos:column="62"/></argument_list></call> <operator pos:line="113" pos:column="63">=<pos:position pos:line="113" pos:column="64"/></operator> <name pos:line="113" pos:column="65">ival<pos:position pos:line="113" pos:column="69"/></name></expr>;<pos:position pos:line="113" pos:column="70"/></expr_stmt>
            }<pos:position pos:line="114" pos:column="14"/></block></then>
            <else pos:line="115" pos:column="13">else <block pos:line="115" pos:column="18">{
                <return pos:line="116" pos:column="17">return <expr><literal type="string" pos:line="116" pos:column="24">"failonstatus must be one or more HTTP response codes"<pos:position pos:line="116" pos:column="78"/></literal></expr>;<pos:position pos:line="116" pos:column="79"/></return>
            }<pos:position pos:line="117" pos:column="14"/></block></else></if>
            <expr_stmt><expr><name pos:line="118" pos:column="13">status<pos:position pos:line="118" pos:column="19"/></name> <operator pos:line="118" pos:column="20">=<pos:position pos:line="118" pos:column="21"/></operator> <call><name pos:line="118" pos:column="22">apr_strtok<pos:position pos:line="118" pos:column="32"/></name><argument_list pos:line="118" pos:column="32">(<argument><expr><name pos:line="118" pos:column="33">NULL<pos:position pos:line="118" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="118" pos:column="39">", "<pos:position pos:line="118" pos:column="43"/></literal></expr></argument>, <argument><expr><operator pos:line="118" pos:column="45">&amp;<pos:position pos:line="118" pos:column="50"/></operator><name pos:line="118" pos:column="46">tok_state<pos:position pos:line="118" pos:column="55"/></name></expr></argument>)<pos:position pos:line="118" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="119" pos:column="10"/></block></while>

    }<pos:position pos:line="121" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="122" pos:column="5">else <if pos:line="122" pos:column="10">if <condition pos:line="122" pos:column="13">(<expr><operator pos:line="122" pos:column="14">!<pos:position pos:line="122" pos:column="15"/></operator><call><name pos:line="122" pos:column="15">strcasecmp<pos:position pos:line="122" pos:column="25"/></name><argument_list pos:line="122" pos:column="25">(<argument><expr><name pos:line="122" pos:column="26">key<pos:position pos:line="122" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="31">"failontimeout"<pos:position pos:line="122" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="48"/></condition><then pos:line="122" pos:column="48"> <block pos:line="122" pos:column="49">{
        <if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><operator pos:line="123" pos:column="13">!<pos:position pos:line="123" pos:column="14"/></operator><call><name pos:line="123" pos:column="14">strcasecmp<pos:position pos:line="123" pos:column="24"/></name><argument_list pos:line="123" pos:column="24">(<argument><expr><name pos:line="123" pos:column="25">val<pos:position pos:line="123" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="30">"on"<pos:position pos:line="123" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="123" pos:column="36"/></condition><then pos:line="123" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="124" pos:column="13">balancer<pos:position pos:line="124" pos:column="21"/></name><operator pos:line="124" pos:column="21">-&gt;<pos:position pos:line="124" pos:column="26"/></operator><name pos:line="124" pos:column="23">failontimeout<pos:position pos:line="124" pos:column="36"/></name></name> <operator pos:line="124" pos:column="37">=<pos:position pos:line="124" pos:column="38"/></operator> <literal type="number" pos:line="124" pos:column="39">1<pos:position pos:line="124" pos:column="40"/></literal></expr>;<pos:position pos:line="124" pos:column="41"/></expr_stmt></block></then>
        <elseif pos:line="125" pos:column="9">else <if pos:line="125" pos:column="14">if <condition pos:line="125" pos:column="17">(<expr><operator pos:line="125" pos:column="18">!<pos:position pos:line="125" pos:column="19"/></operator><call><name pos:line="125" pos:column="19">strcasecmp<pos:position pos:line="125" pos:column="29"/></name><argument_list pos:line="125" pos:column="29">(<argument><expr><name pos:line="125" pos:column="30">val<pos:position pos:line="125" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="35">"off"<pos:position pos:line="125" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="42"/></condition><then pos:line="125" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="126" pos:column="13">balancer<pos:position pos:line="126" pos:column="21"/></name><operator pos:line="126" pos:column="21">-&gt;<pos:position pos:line="126" pos:column="26"/></operator><name pos:line="126" pos:column="23">failontimeout<pos:position pos:line="126" pos:column="36"/></name></name> <operator pos:line="126" pos:column="37">=<pos:position pos:line="126" pos:column="38"/></operator> <literal type="number" pos:line="126" pos:column="39">0<pos:position pos:line="126" pos:column="40"/></literal></expr>;<pos:position pos:line="126" pos:column="41"/></expr_stmt></block></then></if></elseif>
        <else pos:line="127" pos:column="9">else
            <block type="pseudo"><return pos:line="128" pos:column="13">return <expr><literal type="string" pos:line="128" pos:column="20">"failontimeout must be On|Off"<pos:position pos:line="128" pos:column="50"/></literal></expr>;<pos:position pos:line="128" pos:column="51"/></return></block></else></if>
    }<pos:position pos:line="129" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="130" pos:column="5">else <if pos:line="130" pos:column="10">if <condition pos:line="130" pos:column="13">(<expr><operator pos:line="130" pos:column="14">!<pos:position pos:line="130" pos:column="15"/></operator><call><name pos:line="130" pos:column="15">strcasecmp<pos:position pos:line="130" pos:column="25"/></name><argument_list pos:line="130" pos:column="25">(<argument><expr><name pos:line="130" pos:column="26">key<pos:position pos:line="130" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="130" pos:column="31">"nonce"<pos:position pos:line="130" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="130" pos:column="40"/></condition><then pos:line="130" pos:column="40"> <block pos:line="130" pos:column="41">{
        <if pos:line="131" pos:column="9">if <condition pos:line="131" pos:column="12">(<expr><operator pos:line="131" pos:column="13">!<pos:position pos:line="131" pos:column="14"/></operator><call><name pos:line="131" pos:column="14">strcasecmp<pos:position pos:line="131" pos:column="24"/></name><argument_list pos:line="131" pos:column="24">(<argument><expr><name pos:line="131" pos:column="25">val<pos:position pos:line="131" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="30">"None"<pos:position pos:line="131" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="131" pos:column="38"/></condition><then pos:line="131" pos:column="38"> <block pos:line="131" pos:column="39">{
            <expr_stmt><expr><operator pos:line="132" pos:column="13">*<pos:position pos:line="132" pos:column="14"/></operator><name><name pos:line="132" pos:column="14">balancer<pos:position pos:line="132" pos:column="22"/></name><operator pos:line="132" pos:column="22">-&gt;<pos:position pos:line="132" pos:column="27"/></operator><name pos:line="132" pos:column="24">s<pos:position pos:line="132" pos:column="25"/></name><operator pos:line="132" pos:column="25">-&gt;<pos:position pos:line="132" pos:column="30"/></operator><name pos:line="132" pos:column="27">nonce<pos:position pos:line="132" pos:column="32"/></name></name> <operator pos:line="132" pos:column="33">=<pos:position pos:line="132" pos:column="34"/></operator> <literal type="char" pos:line="132" pos:column="35">'\0'<pos:position pos:line="132" pos:column="39"/></literal></expr>;<pos:position pos:line="132" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="133" pos:column="10"/></block></then>
        <else pos:line="134" pos:column="9">else <block pos:line="134" pos:column="14">{
            <if pos:line="135" pos:column="13">if <condition pos:line="135" pos:column="16">(<expr><call><name pos:line="135" pos:column="17">PROXY_STRNCPY<pos:position pos:line="135" pos:column="30"/></name><argument_list pos:line="135" pos:column="30">(<argument><expr><name><name pos:line="135" pos:column="31">balancer<pos:position pos:line="135" pos:column="39"/></name><operator pos:line="135" pos:column="39">-&gt;<pos:position pos:line="135" pos:column="44"/></operator><name pos:line="135" pos:column="41">s<pos:position pos:line="135" pos:column="42"/></name><operator pos:line="135" pos:column="42">-&gt;<pos:position pos:line="135" pos:column="47"/></operator><name pos:line="135" pos:column="44">nonce<pos:position pos:line="135" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="51">val<pos:position pos:line="135" pos:column="54"/></name></expr></argument>)<pos:position pos:line="135" pos:column="55"/></argument_list></call> <operator pos:line="135" pos:column="56">!=<pos:position pos:line="135" pos:column="58"/></operator> <name pos:line="135" pos:column="59">APR_SUCCESS<pos:position pos:line="135" pos:column="70"/></name></expr>)<pos:position pos:line="135" pos:column="71"/></condition><then pos:line="135" pos:column="71"> <block pos:line="135" pos:column="72">{
                <return pos:line="136" pos:column="17">return <expr><literal type="string" pos:line="136" pos:column="24">"Provided nonce is too large"<pos:position pos:line="136" pos:column="53"/></literal></expr>;<pos:position pos:line="136" pos:column="54"/></return>
            }<pos:position pos:line="137" pos:column="14"/></block></then></if>
        }<pos:position pos:line="138" pos:column="10"/></block></else></if>
    }<pos:position pos:line="139" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="140" pos:column="5">else <if pos:line="140" pos:column="10">if <condition pos:line="140" pos:column="13">(<expr><operator pos:line="140" pos:column="14">!<pos:position pos:line="140" pos:column="15"/></operator><call><name pos:line="140" pos:column="15">strcasecmp<pos:position pos:line="140" pos:column="25"/></name><argument_list pos:line="140" pos:column="25">(<argument><expr><name pos:line="140" pos:column="26">key<pos:position pos:line="140" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="140" pos:column="31">"growth"<pos:position pos:line="140" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="140" pos:column="41"/></condition><then pos:line="140" pos:column="41"> <block pos:line="140" pos:column="42">{
        <expr_stmt><expr><name pos:line="141" pos:column="9">ival<pos:position pos:line="141" pos:column="13"/></name> <operator pos:line="141" pos:column="14">=<pos:position pos:line="141" pos:column="15"/></operator> <call><name pos:line="141" pos:column="16">atoi<pos:position pos:line="141" pos:column="20"/></name><argument_list pos:line="141" pos:column="20">(<argument><expr><name pos:line="141" pos:column="21">val<pos:position pos:line="141" pos:column="24"/></name></expr></argument>)<pos:position pos:line="141" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="26"/></expr_stmt>
        <if pos:line="142" pos:column="9">if <condition pos:line="142" pos:column="12">(<expr><name><name pos:line="142" pos:column="13">ival<pos:position pos:line="142" pos:column="17"/></name> <argument_list type="generic" pos:line="142" pos:column="18">&lt; <argument><expr><literal type="number" pos:line="142" pos:column="20">1<pos:position pos:line="142" pos:column="21"/></literal> <operator pos:line="142" pos:column="22">||<pos:position pos:line="142" pos:column="24"/></operator> <name pos:line="142" pos:column="25">ival<pos:position pos:line="142" pos:column="29"/></name></expr></argument> &gt;<pos:position pos:line="142" pos:column="34"/></argument_list></name> <literal type="number" pos:line="142" pos:column="32">100<pos:position pos:line="142" pos:column="35"/></literal></expr>)<pos:position pos:line="142" pos:column="36"/></condition><then pos:line="142" pos:column="36">   <comment type="block" pos:line="142" pos:column="39">/* arbitrary limit here */</comment>
            <block type="pseudo"><return pos:line="143" pos:column="13">return <expr><literal type="string" pos:line="143" pos:column="20">"growth must be between 1 and 100"<pos:position pos:line="143" pos:column="54"/></literal></expr>;<pos:position pos:line="143" pos:column="55"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="144" pos:column="9">balancer<pos:position pos:line="144" pos:column="17"/></name><operator pos:line="144" pos:column="17">-&gt;<pos:position pos:line="144" pos:column="22"/></operator><name pos:line="144" pos:column="19">growth<pos:position pos:line="144" pos:column="25"/></name></name> <operator pos:line="144" pos:column="26">=<pos:position pos:line="144" pos:column="27"/></operator> <name pos:line="144" pos:column="28">ival<pos:position pos:line="144" pos:column="32"/></name></expr>;<pos:position pos:line="144" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="145" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="146" pos:column="5">else <if pos:line="146" pos:column="10">if <condition pos:line="146" pos:column="13">(<expr><operator pos:line="146" pos:column="14">!<pos:position pos:line="146" pos:column="15"/></operator><call><name pos:line="146" pos:column="15">strcasecmp<pos:position pos:line="146" pos:column="25"/></name><argument_list pos:line="146" pos:column="25">(<argument><expr><name pos:line="146" pos:column="26">key<pos:position pos:line="146" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="31">"forcerecovery"<pos:position pos:line="146" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="146" pos:column="48"/></condition><then pos:line="146" pos:column="48"> <block pos:line="146" pos:column="49">{
        <if pos:line="147" pos:column="9">if <condition pos:line="147" pos:column="12">(<expr><operator pos:line="147" pos:column="13">!<pos:position pos:line="147" pos:column="14"/></operator><call><name pos:line="147" pos:column="14">strcasecmp<pos:position pos:line="147" pos:column="24"/></name><argument_list pos:line="147" pos:column="24">(<argument><expr><name pos:line="147" pos:column="25">val<pos:position pos:line="147" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="30">"on"<pos:position pos:line="147" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="36"/></condition><then pos:line="147" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="148" pos:column="13">balancer<pos:position pos:line="148" pos:column="21"/></name><operator pos:line="148" pos:column="21">-&gt;<pos:position pos:line="148" pos:column="26"/></operator><name pos:line="148" pos:column="23">s<pos:position pos:line="148" pos:column="24"/></name><operator pos:line="148" pos:column="24">-&gt;<pos:position pos:line="148" pos:column="29"/></operator><name pos:line="148" pos:column="26">forcerecovery<pos:position pos:line="148" pos:column="39"/></name></name> <operator pos:line="148" pos:column="40">=<pos:position pos:line="148" pos:column="41"/></operator> <literal type="number" pos:line="148" pos:column="42">1<pos:position pos:line="148" pos:column="43"/></literal></expr>;<pos:position pos:line="148" pos:column="44"/></expr_stmt></block></then>
        <elseif pos:line="149" pos:column="9">else <if pos:line="149" pos:column="14">if <condition pos:line="149" pos:column="17">(<expr><operator pos:line="149" pos:column="18">!<pos:position pos:line="149" pos:column="19"/></operator><call><name pos:line="149" pos:column="19">strcasecmp<pos:position pos:line="149" pos:column="29"/></name><argument_list pos:line="149" pos:column="29">(<argument><expr><name pos:line="149" pos:column="30">val<pos:position pos:line="149" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="149" pos:column="35">"off"<pos:position pos:line="149" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="149" pos:column="42"/></condition><then pos:line="149" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="150" pos:column="13">balancer<pos:position pos:line="150" pos:column="21"/></name><operator pos:line="150" pos:column="21">-&gt;<pos:position pos:line="150" pos:column="26"/></operator><name pos:line="150" pos:column="23">s<pos:position pos:line="150" pos:column="24"/></name><operator pos:line="150" pos:column="24">-&gt;<pos:position pos:line="150" pos:column="29"/></operator><name pos:line="150" pos:column="26">forcerecovery<pos:position pos:line="150" pos:column="39"/></name></name> <operator pos:line="150" pos:column="40">=<pos:position pos:line="150" pos:column="41"/></operator> <literal type="number" pos:line="150" pos:column="42">0<pos:position pos:line="150" pos:column="43"/></literal></expr>;<pos:position pos:line="150" pos:column="44"/></expr_stmt></block></then></if></elseif>
        <else pos:line="151" pos:column="9">else
            <block type="pseudo"><return pos:line="152" pos:column="13">return <expr><literal type="string" pos:line="152" pos:column="20">"forcerecovery must be On|Off"<pos:position pos:line="152" pos:column="50"/></literal></expr>;<pos:position pos:line="152" pos:column="51"/></return></block></else></if>
    }<pos:position pos:line="153" pos:column="6"/></block></then></if></elseif>
    <else pos:line="154" pos:column="5">else <block pos:line="154" pos:column="10">{
        <return pos:line="155" pos:column="9">return <expr><literal type="string" pos:line="155" pos:column="16">"unknown Balancer parameter"<pos:position pos:line="155" pos:column="44"/></literal></expr>;<pos:position pos:line="155" pos:column="45"/></return>
    }<pos:position pos:line="156" pos:column="6"/></block></else></if>
    <return pos:line="157" pos:column="5">return <expr><name pos:line="157" pos:column="12">NULL<pos:position pos:line="157" pos:column="16"/></name></expr>;<pos:position pos:line="157" pos:column="17"/></return>
}<pos:position pos:line="158" pos:column="2"/></block></function></unit>
