<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2765_httpd-2.4.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">buffer_in_filter<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">ap_filter_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">f<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">apr_bucket_brigade<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">bb<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="2" pos:column="9">ap_input_mode_t<pos:position pos:line="2" pos:column="24"/></name></type> <name pos:line="2" pos:column="25">mode<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">apr_read_type_e<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">block<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">apr_off_t<pos:position pos:line="2" pos:column="63"/></name></type> <name pos:line="2" pos:column="64">readbytes<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_bucket<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">e<pos:position pos:line="4" pos:column="18"/></name></decl>, <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="21">after<pos:position pos:line="4" pos:column="26"/></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">buffer_ctx<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">ctx<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name><name pos:line="6" pos:column="23">f<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">-&gt;<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="26">ctx<pos:position pos:line="6" pos:column="29"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="30"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* buffer on main requests only */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name pos:line="9" pos:column="10">ap_is_initial_req<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name><name pos:line="9" pos:column="28">f<pos:position pos:line="9" pos:column="29"/></name><operator pos:line="9" pos:column="29">-&gt;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="31">r<pos:position pos:line="9" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="34"/></condition><then pos:line="9" pos:column="34"> <block pos:line="9" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">ap_remove_input_filter<pos:position pos:line="10" pos:column="31"/></name><argument_list pos:line="10" pos:column="31">(<argument><expr><name pos:line="10" pos:column="32">f<pos:position pos:line="10" pos:column="33"/></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><call><name pos:line="11" pos:column="16">ap_get_brigade<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name><name pos:line="11" pos:column="31">f<pos:position pos:line="11" pos:column="32"/></name><operator pos:line="11" pos:column="32">-&gt;<pos:position pos:line="11" pos:column="37"/></operator><name pos:line="11" pos:column="34">next<pos:position pos:line="11" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="40">bb<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="44">mode<pos:position pos:line="11" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="50">block<pos:position pos:line="11" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="57">readbytes<pos:position pos:line="11" pos:column="66"/></name></expr></argument>)<pos:position pos:line="11" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="68"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="14" pos:column="5">/* first time in? create a context */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">ctx<pos:position pos:line="15" pos:column="13"/></name></expr>)<pos:position pos:line="15" pos:column="14"/></condition><then pos:line="15" pos:column="14"> <block pos:line="15" pos:column="15">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">ctx<pos:position pos:line="16" pos:column="12"/></name> <operator pos:line="16" pos:column="13">=<pos:position pos:line="16" pos:column="14"/></operator> <name><name pos:line="16" pos:column="15">f<pos:position pos:line="16" pos:column="16"/></name><operator pos:line="16" pos:column="16">-&gt;<pos:position pos:line="16" pos:column="21"/></operator><name pos:line="16" pos:column="18">ctx<pos:position pos:line="16" pos:column="21"/></name></name> <operator pos:line="16" pos:column="22">=<pos:position pos:line="16" pos:column="23"/></operator> <call><name pos:line="16" pos:column="24">apr_pcalloc<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name><name pos:line="16" pos:column="36">f<pos:position pos:line="16" pos:column="37"/></name><operator pos:line="16" pos:column="37">-&gt;<pos:position pos:line="16" pos:column="42"/></operator><name pos:line="16" pos:column="39">r<pos:position pos:line="16" pos:column="40"/></name><operator pos:line="16" pos:column="40">-&gt;<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="42">pool<pos:position pos:line="16" pos:column="46"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="16" pos:column="48">sizeof<argument_list pos:line="16" pos:column="54">(<argument><expr><operator pos:line="16" pos:column="55">*<pos:position pos:line="16" pos:column="56"/></operator><name pos:line="16" pos:column="56">ctx<pos:position pos:line="16" pos:column="59"/></name></expr></argument>)<pos:position pos:line="16" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="16" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">ctx<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">bb<pos:position pos:line="17" pos:column="16"/></name></name> <operator pos:line="17" pos:column="17">=<pos:position pos:line="17" pos:column="18"/></operator> <call><name pos:line="17" pos:column="19">apr_brigade_create<pos:position pos:line="17" pos:column="37"/></name><argument_list pos:line="17" pos:column="37">(<argument><expr><name><name pos:line="17" pos:column="38">f<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">r<pos:position pos:line="17" pos:column="42"/></name><operator pos:line="17" pos:column="42">-&gt;<pos:position pos:line="17" pos:column="47"/></operator><name pos:line="17" pos:column="44">pool<pos:position pos:line="17" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="50">f<pos:position pos:line="17" pos:column="51"/></name><operator pos:line="17" pos:column="51">-&gt;<pos:position pos:line="17" pos:column="56"/></operator><name pos:line="17" pos:column="53">c<pos:position pos:line="17" pos:column="54"/></name><operator pos:line="17" pos:column="54">-&gt;<pos:position pos:line="17" pos:column="59"/></operator><name pos:line="17" pos:column="56">bucket_alloc<pos:position pos:line="17" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">ctx<pos:position pos:line="18" pos:column="12"/></name><operator pos:line="18" pos:column="12">-&gt;<pos:position pos:line="18" pos:column="17"/></operator><name pos:line="18" pos:column="14">tmp<pos:position pos:line="18" pos:column="17"/></name></name> <operator pos:line="18" pos:column="18">=<pos:position pos:line="18" pos:column="19"/></operator> <call><name pos:line="18" pos:column="20">apr_brigade_create<pos:position pos:line="18" pos:column="38"/></name><argument_list pos:line="18" pos:column="38">(<argument><expr><name><name pos:line="18" pos:column="39">f<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">-&gt;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="42">r<pos:position pos:line="18" pos:column="43"/></name><operator pos:line="18" pos:column="43">-&gt;<pos:position pos:line="18" pos:column="48"/></operator><name pos:line="18" pos:column="45">pool<pos:position pos:line="18" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="51">f<pos:position pos:line="18" pos:column="52"/></name><operator pos:line="18" pos:column="52">-&gt;<pos:position pos:line="18" pos:column="57"/></operator><name pos:line="18" pos:column="54">c<pos:position pos:line="18" pos:column="55"/></name><operator pos:line="18" pos:column="55">-&gt;<pos:position pos:line="18" pos:column="60"/></operator><name pos:line="18" pos:column="57">bucket_alloc<pos:position pos:line="18" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="71"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">ctx<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">-&gt;<pos:position pos:line="19" pos:column="17"/></operator><name pos:line="19" pos:column="14">conf<pos:position pos:line="19" pos:column="18"/></name></name> <operator pos:line="19" pos:column="19">=<pos:position pos:line="19" pos:column="20"/></operator> <call><name pos:line="19" pos:column="21">ap_get_module_config<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><name><name pos:line="19" pos:column="42">f<pos:position pos:line="19" pos:column="43"/></name><operator pos:line="19" pos:column="43">-&gt;<pos:position pos:line="19" pos:column="48"/></operator><name pos:line="19" pos:column="45">r<pos:position pos:line="19" pos:column="46"/></name><operator pos:line="19" pos:column="46">-&gt;<pos:position pos:line="19" pos:column="51"/></operator><name pos:line="19" pos:column="48">per_dir_config<pos:position pos:line="19" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="64">&amp;<pos:position pos:line="19" pos:column="69"/></operator><name pos:line="19" pos:column="65">buffer_module<pos:position pos:line="19" pos:column="78"/></name></expr></argument>)<pos:position pos:line="19" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="22" pos:column="5">/* just get out of the way of things we don't want. */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">mode<pos:position pos:line="23" pos:column="13"/></name> <operator pos:line="23" pos:column="14">!=<pos:position pos:line="23" pos:column="16"/></operator> <name pos:line="23" pos:column="17">AP_MODE_READBYTES<pos:position pos:line="23" pos:column="34"/></name></expr>)<pos:position pos:line="23" pos:column="35"/></condition><then pos:line="23" pos:column="35"> <block pos:line="23" pos:column="36">{
        <return pos:line="24" pos:column="9">return <expr><call><name pos:line="24" pos:column="16">ap_get_brigade<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name><name pos:line="24" pos:column="31">f<pos:position pos:line="24" pos:column="32"/></name><operator pos:line="24" pos:column="32">-&gt;<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="34">next<pos:position pos:line="24" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">bb<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">mode<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="50">block<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">readbytes<pos:position pos:line="24" pos:column="66"/></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="68"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="27" pos:column="5">/* if our buffer is empty, read off the network until the buffer is full */</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name pos:line="28" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name><name pos:line="28" pos:column="27">ctx<pos:position pos:line="28" pos:column="30"/></name><operator pos:line="28" pos:column="30">-&gt;<pos:position pos:line="28" pos:column="35"/></operator><name pos:line="28" pos:column="32">bb<pos:position pos:line="28" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="36"/></condition><then pos:line="28" pos:column="36"> <block pos:line="28" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">int<pos:position pos:line="29" pos:column="12"/></name></type> <name pos:line="29" pos:column="13">seen_flush<pos:position pos:line="29" pos:column="23"/></name> <init pos:line="29" pos:column="24">= <expr><literal type="number" pos:line="29" pos:column="26">0<pos:position pos:line="29" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="28"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="31" pos:column="9">ctx<pos:position pos:line="31" pos:column="12"/></name><operator pos:line="31" pos:column="12">-&gt;<pos:position pos:line="31" pos:column="17"/></operator><name pos:line="31" pos:column="14">remaining<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">=<pos:position pos:line="31" pos:column="25"/></operator> <name><name pos:line="31" pos:column="26">ctx<pos:position pos:line="31" pos:column="29"/></name><operator pos:line="31" pos:column="29">-&gt;<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="31">conf<pos:position pos:line="31" pos:column="35"/></name><operator pos:line="31" pos:column="35">-&gt;<pos:position pos:line="31" pos:column="40"/></operator><name pos:line="31" pos:column="37">size<pos:position pos:line="31" pos:column="41"/></name></name></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>

        <while pos:line="33" pos:column="9">while <condition pos:line="33" pos:column="15">(<expr><operator pos:line="33" pos:column="16">!<pos:position pos:line="33" pos:column="17"/></operator><name><name pos:line="33" pos:column="17">ctx<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">-&gt;<pos:position pos:line="33" pos:column="25"/></operator><name pos:line="33" pos:column="22">seen_eos<pos:position pos:line="33" pos:column="30"/></name></name> <operator pos:line="33" pos:column="31">&amp;&amp;<pos:position pos:line="33" pos:column="41"/></operator> <operator pos:line="33" pos:column="34">!<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="35">seen_flush<pos:position pos:line="33" pos:column="45"/></name> <operator pos:line="33" pos:column="46">&amp;&amp;<pos:position pos:line="33" pos:column="56"/></operator> <name><name pos:line="33" pos:column="49">ctx<pos:position pos:line="33" pos:column="52"/></name><operator pos:line="33" pos:column="52">-&gt;<pos:position pos:line="33" pos:column="57"/></operator><name pos:line="33" pos:column="54">remaining<pos:position pos:line="33" pos:column="63"/></name></name> <operator pos:line="33" pos:column="64">&gt;<pos:position pos:line="33" pos:column="68"/></operator> <literal type="number" pos:line="33" pos:column="66">0<pos:position pos:line="33" pos:column="67"/></literal></expr>)<pos:position pos:line="33" pos:column="68"/></condition> <block pos:line="33" pos:column="69">{
            <decl_stmt><decl><type><specifier pos:line="34" pos:column="13">const<pos:position pos:line="34" pos:column="18"/></specifier> <name pos:line="34" pos:column="19">char<pos:position pos:line="34" pos:column="23"/></name> <modifier pos:line="34" pos:column="24">*<pos:position pos:line="34" pos:column="25"/></modifier></type><name pos:line="34" pos:column="25">data<pos:position pos:line="34" pos:column="29"/></name></decl>;<pos:position pos:line="34" pos:column="30"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="35" pos:column="13">apr_size_t<pos:position pos:line="35" pos:column="23"/></name></type> <name pos:line="35" pos:column="24">size<pos:position pos:line="35" pos:column="28"/></name> <init pos:line="35" pos:column="29">= <expr><literal type="number" pos:line="35" pos:column="31">0<pos:position pos:line="35" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="35" pos:column="33"/></decl_stmt>

            <if pos:line="37" pos:column="13">if <condition pos:line="37" pos:column="16">(<expr><call><name pos:line="37" pos:column="17">APR_BRIGADE_EMPTY<pos:position pos:line="37" pos:column="34"/></name><argument_list pos:line="37" pos:column="34">(<argument><expr><name><name pos:line="37" pos:column="35">ctx<pos:position pos:line="37" pos:column="38"/></name><operator pos:line="37" pos:column="38">-&gt;<pos:position pos:line="37" pos:column="43"/></operator><name pos:line="37" pos:column="40">tmp<pos:position pos:line="37" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="45"/></condition><then pos:line="37" pos:column="45"> <block pos:line="37" pos:column="46">{
                <expr_stmt><expr><name pos:line="38" pos:column="17">rv<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">=<pos:position pos:line="38" pos:column="21"/></operator> <call><name pos:line="38" pos:column="22">ap_get_brigade<pos:position pos:line="38" pos:column="36"/></name><argument_list pos:line="38" pos:column="36">(<argument><expr><name><name pos:line="38" pos:column="37">f<pos:position pos:line="38" pos:column="38"/></name><operator pos:line="38" pos:column="38">-&gt;<pos:position pos:line="38" pos:column="43"/></operator><name pos:line="38" pos:column="40">next<pos:position pos:line="38" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="46">ctx<pos:position pos:line="38" pos:column="49"/></name><operator pos:line="38" pos:column="49">-&gt;<pos:position pos:line="38" pos:column="54"/></operator><name pos:line="38" pos:column="51">tmp<pos:position pos:line="38" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="56">mode<pos:position pos:line="38" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="62">block<pos:position pos:line="38" pos:column="67"/></name></expr></argument>,
                                    <argument><expr><name><name pos:line="39" pos:column="37">ctx<pos:position pos:line="39" pos:column="40"/></name><operator pos:line="39" pos:column="40">-&gt;<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="42">remaining<pos:position pos:line="39" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="53"/></expr_stmt>

                <comment type="block" pos:line="41" pos:column="17">/* if an error was received, bail out now. If the error is
                 * EAGAIN and we have not yet seen an EOS, we will definitely
                 * be called again, at which point we will send our buffered
                 * data. Instead of sending EAGAIN, some filters return an
                 * empty brigade instead when data is not yet available. In
                 * this case, pass through the APR_SUCCESS and emulate the
                 * underlying filter.
                 */</comment>
                <if pos:line="49" pos:column="17">if <condition pos:line="49" pos:column="20">(<expr><name pos:line="49" pos:column="21">rv<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">!=<pos:position pos:line="49" pos:column="26"/></operator> <name pos:line="49" pos:column="27">APR_SUCCESS<pos:position pos:line="49" pos:column="38"/></name> <operator pos:line="49" pos:column="39">||<pos:position pos:line="49" pos:column="41"/></operator> <call><name pos:line="49" pos:column="42">APR_BRIGADE_EMPTY<pos:position pos:line="49" pos:column="59"/></name><argument_list pos:line="49" pos:column="59">(<argument><expr><name><name pos:line="49" pos:column="60">ctx<pos:position pos:line="49" pos:column="63"/></name><operator pos:line="49" pos:column="63">-&gt;<pos:position pos:line="49" pos:column="68"/></operator><name pos:line="49" pos:column="65">tmp<pos:position pos:line="49" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="70"/></condition><then pos:line="49" pos:column="70"> <block pos:line="49" pos:column="71">{
                    <return pos:line="50" pos:column="21">return <expr><name pos:line="50" pos:column="28">rv<pos:position pos:line="50" pos:column="30"/></name></expr>;<pos:position pos:line="50" pos:column="31"/></return>
                }<pos:position pos:line="51" pos:column="18"/></block></then></if>
            }<pos:position pos:line="52" pos:column="14"/></block></then></if>

            <do pos:line="54" pos:column="13">do <block pos:line="54" pos:column="16">{
                <expr_stmt><expr><name pos:line="55" pos:column="17">e<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator> <call><name pos:line="55" pos:column="21">APR_BRIGADE_FIRST<pos:position pos:line="55" pos:column="38"/></name><argument_list pos:line="55" pos:column="38">(<argument><expr><name><name pos:line="55" pos:column="39">ctx<pos:position pos:line="55" pos:column="42"/></name><operator pos:line="55" pos:column="42">-&gt;<pos:position pos:line="55" pos:column="47"/></operator><name pos:line="55" pos:column="44">tmp<pos:position pos:line="55" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="55" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="49"/></expr_stmt>

                <comment type="block" pos:line="57" pos:column="17">/* if we see an EOS, we are done */</comment>
                <if pos:line="58" pos:column="17">if <condition pos:line="58" pos:column="20">(<expr><call><name pos:line="58" pos:column="21">APR_BUCKET_IS_EOS<pos:position pos:line="58" pos:column="38"/></name><argument_list pos:line="58" pos:column="38">(<argument><expr><name pos:line="58" pos:column="39">e<pos:position pos:line="58" pos:column="40"/></name></expr></argument>)<pos:position pos:line="58" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="58" pos:column="42"/></condition><then pos:line="58" pos:column="42"> <block pos:line="58" pos:column="43">{
                    <expr_stmt><expr><call><name pos:line="59" pos:column="21">APR_BUCKET_REMOVE<pos:position pos:line="59" pos:column="38"/></name><argument_list pos:line="59" pos:column="38">(<argument><expr><name pos:line="59" pos:column="39">e<pos:position pos:line="59" pos:column="40"/></name></expr></argument>)<pos:position pos:line="59" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="42"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="60" pos:column="21">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="60" pos:column="44"/></name><argument_list pos:line="60" pos:column="44">(<argument><expr><name><name pos:line="60" pos:column="45">ctx<pos:position pos:line="60" pos:column="48"/></name><operator pos:line="60" pos:column="48">-&gt;<pos:position pos:line="60" pos:column="53"/></operator><name pos:line="60" pos:column="50">bb<pos:position pos:line="60" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="54">e<pos:position pos:line="60" pos:column="55"/></name></expr></argument>)<pos:position pos:line="60" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="57"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="61" pos:column="21">ctx<pos:position pos:line="61" pos:column="24"/></name><operator pos:line="61" pos:column="24">-&gt;<pos:position pos:line="61" pos:column="29"/></operator><name pos:line="61" pos:column="26">seen_eos<pos:position pos:line="61" pos:column="34"/></name></name> <operator pos:line="61" pos:column="35">=<pos:position pos:line="61" pos:column="36"/></operator> <literal type="number" pos:line="61" pos:column="37">1<pos:position pos:line="61" pos:column="38"/></literal></expr>;<pos:position pos:line="61" pos:column="39"/></expr_stmt>
                    <break pos:line="62" pos:column="21">break;<pos:position pos:line="62" pos:column="27"/></break>
                }<pos:position pos:line="63" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="65" pos:column="17">/* flush buckets clear the buffer */</comment>
                <if pos:line="66" pos:column="17">if <condition pos:line="66" pos:column="20">(<expr><call><name pos:line="66" pos:column="21">APR_BUCKET_IS_FLUSH<pos:position pos:line="66" pos:column="40"/></name><argument_list pos:line="66" pos:column="40">(<argument><expr><name pos:line="66" pos:column="41">e<pos:position pos:line="66" pos:column="42"/></name></expr></argument>)<pos:position pos:line="66" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="44"/></condition><then pos:line="66" pos:column="44"> <block pos:line="66" pos:column="45">{
                    <expr_stmt><expr><call><name pos:line="67" pos:column="21">APR_BUCKET_REMOVE<pos:position pos:line="67" pos:column="38"/></name><argument_list pos:line="67" pos:column="38">(<argument><expr><name pos:line="67" pos:column="39">e<pos:position pos:line="67" pos:column="40"/></name></expr></argument>)<pos:position pos:line="67" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="42"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="68" pos:column="21">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="68" pos:column="44"/></name><argument_list pos:line="68" pos:column="44">(<argument><expr><name><name pos:line="68" pos:column="45">ctx<pos:position pos:line="68" pos:column="48"/></name><operator pos:line="68" pos:column="48">-&gt;<pos:position pos:line="68" pos:column="53"/></operator><name pos:line="68" pos:column="50">bb<pos:position pos:line="68" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="54">e<pos:position pos:line="68" pos:column="55"/></name></expr></argument>)<pos:position pos:line="68" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="57"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="69" pos:column="21">seen_flush<pos:position pos:line="69" pos:column="31"/></name> <operator pos:line="69" pos:column="32">=<pos:position pos:line="69" pos:column="33"/></operator> <literal type="number" pos:line="69" pos:column="34">1<pos:position pos:line="69" pos:column="35"/></literal></expr>;<pos:position pos:line="69" pos:column="36"/></expr_stmt>
                    <break pos:line="70" pos:column="21">break;<pos:position pos:line="70" pos:column="27"/></break>
                }<pos:position pos:line="71" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="73" pos:column="17">/* pass metadata buckets through */</comment>
                <if pos:line="74" pos:column="17">if <condition pos:line="74" pos:column="20">(<expr><call><name pos:line="74" pos:column="21">APR_BUCKET_IS_METADATA<pos:position pos:line="74" pos:column="43"/></name><argument_list pos:line="74" pos:column="43">(<argument><expr><name pos:line="74" pos:column="44">e<pos:position pos:line="74" pos:column="45"/></name></expr></argument>)<pos:position pos:line="74" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="47"/></condition><then pos:line="74" pos:column="47"> <block pos:line="74" pos:column="48">{
                    <expr_stmt><expr><call><name pos:line="75" pos:column="21">APR_BUCKET_REMOVE<pos:position pos:line="75" pos:column="38"/></name><argument_list pos:line="75" pos:column="38">(<argument><expr><name pos:line="75" pos:column="39">e<pos:position pos:line="75" pos:column="40"/></name></expr></argument>)<pos:position pos:line="75" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="42"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="76" pos:column="21">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="76" pos:column="44"/></name><argument_list pos:line="76" pos:column="44">(<argument><expr><name><name pos:line="76" pos:column="45">ctx<pos:position pos:line="76" pos:column="48"/></name><operator pos:line="76" pos:column="48">-&gt;<pos:position pos:line="76" pos:column="53"/></operator><name pos:line="76" pos:column="50">bb<pos:position pos:line="76" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="54">e<pos:position pos:line="76" pos:column="55"/></name></expr></argument>)<pos:position pos:line="76" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="57"/></expr_stmt>
                    <continue pos:line="77" pos:column="21">continue;<pos:position pos:line="77" pos:column="30"/></continue>
                }<pos:position pos:line="78" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="80" pos:column="17">/* read the bucket in, pack it into the buffer */</comment>
                <if pos:line="81" pos:column="17">if <condition pos:line="81" pos:column="20">(<expr><name pos:line="81" pos:column="21">APR_SUCCESS<pos:position pos:line="81" pos:column="32"/></name> <operator pos:line="81" pos:column="33">==<pos:position pos:line="81" pos:column="35"/></operator> <operator pos:line="81" pos:column="36">(<pos:position pos:line="81" pos:column="37"/></operator><name pos:line="81" pos:column="37">rv<pos:position pos:line="81" pos:column="39"/></name> <operator pos:line="81" pos:column="40">=<pos:position pos:line="81" pos:column="41"/></operator> <call><name pos:line="81" pos:column="42">apr_bucket_read<pos:position pos:line="81" pos:column="57"/></name><argument_list pos:line="81" pos:column="57">(<argument><expr><name pos:line="81" pos:column="58">e<pos:position pos:line="81" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="61">&amp;<pos:position pos:line="81" pos:column="66"/></operator><name pos:line="81" pos:column="62">data<pos:position pos:line="81" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="68">&amp;<pos:position pos:line="81" pos:column="73"/></operator><name pos:line="81" pos:column="69">size<pos:position pos:line="81" pos:column="73"/></name></expr></argument>,
                                                         <argument><expr><name pos:line="82" pos:column="58">APR_BLOCK_READ<pos:position pos:line="82" pos:column="72"/></name></expr></argument>)<pos:position pos:line="82" pos:column="73"/></argument_list></call><operator pos:line="82" pos:column="73">)<pos:position pos:line="82" pos:column="74"/></operator></expr>)<pos:position pos:line="82" pos:column="75"/></condition><then pos:line="82" pos:column="75"> <block pos:line="82" pos:column="76">{
                    <expr_stmt><expr><call><name pos:line="83" pos:column="21">apr_brigade_write<pos:position pos:line="83" pos:column="38"/></name><argument_list pos:line="83" pos:column="38">(<argument><expr><name><name pos:line="83" pos:column="39">ctx<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">-&gt;<pos:position pos:line="83" pos:column="47"/></operator><name pos:line="83" pos:column="44">bb<pos:position pos:line="83" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="48">NULL<pos:position pos:line="83" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="54">NULL<pos:position pos:line="83" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="60">data<pos:position pos:line="83" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="66">size<pos:position pos:line="83" pos:column="70"/></name></expr></argument>)<pos:position pos:line="83" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="72"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="84" pos:column="21">ctx<pos:position pos:line="84" pos:column="24"/></name><operator pos:line="84" pos:column="24">-&gt;<pos:position pos:line="84" pos:column="29"/></operator><name pos:line="84" pos:column="26">remaining<pos:position pos:line="84" pos:column="35"/></name></name> <operator pos:line="84" pos:column="36">-=<pos:position pos:line="84" pos:column="38"/></operator> <name pos:line="84" pos:column="39">size<pos:position pos:line="84" pos:column="43"/></name></expr>;<pos:position pos:line="84" pos:column="44"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="85" pos:column="21">apr_bucket_delete<pos:position pos:line="85" pos:column="38"/></name><argument_list pos:line="85" pos:column="38">(<argument><expr><name pos:line="85" pos:column="39">e<pos:position pos:line="85" pos:column="40"/></name></expr></argument>)<pos:position pos:line="85" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="86" pos:column="18"/></block></then> <else pos:line="86" pos:column="19">else <block pos:line="86" pos:column="24">{
                    <return pos:line="87" pos:column="21">return <expr><name pos:line="87" pos:column="28">rv<pos:position pos:line="87" pos:column="30"/></name></expr>;<pos:position pos:line="87" pos:column="31"/></return>
                }<pos:position pos:line="88" pos:column="18"/></block></else></if>

            }<pos:position pos:line="90" pos:column="14"/></block> while <condition pos:line="90" pos:column="21">(<expr><operator pos:line="90" pos:column="22">!<pos:position pos:line="90" pos:column="23"/></operator><call><name pos:line="90" pos:column="23">APR_BRIGADE_EMPTY<pos:position pos:line="90" pos:column="40"/></name><argument_list pos:line="90" pos:column="40">(<argument><expr><name><name pos:line="90" pos:column="41">ctx<pos:position pos:line="90" pos:column="44"/></name><operator pos:line="90" pos:column="44">-&gt;<pos:position pos:line="90" pos:column="49"/></operator><name pos:line="90" pos:column="46">tmp<pos:position pos:line="90" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="90" pos:column="51"/></condition>;<pos:position pos:line="90" pos:column="52"/></do>
        }<pos:position pos:line="91" pos:column="10"/></block></while>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="94" pos:column="5">/* give the caller the data they asked for from the buffer */</comment>
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">apr_brigade_partition<pos:position pos:line="95" pos:column="26"/></name><argument_list pos:line="95" pos:column="26">(<argument><expr><name><name pos:line="95" pos:column="27">ctx<pos:position pos:line="95" pos:column="30"/></name><operator pos:line="95" pos:column="30">-&gt;<pos:position pos:line="95" pos:column="35"/></operator><name pos:line="95" pos:column="32">bb<pos:position pos:line="95" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="36">readbytes<pos:position pos:line="95" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="47">&amp;<pos:position pos:line="95" pos:column="52"/></operator><name pos:line="95" pos:column="48">after<pos:position pos:line="95" pos:column="53"/></name></expr></argument>)<pos:position pos:line="95" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="55"/></expr_stmt>
    <expr_stmt><expr><name pos:line="96" pos:column="5">e<pos:position pos:line="96" pos:column="6"/></name> <operator pos:line="96" pos:column="7">=<pos:position pos:line="96" pos:column="8"/></operator> <call><name pos:line="96" pos:column="9">APR_BRIGADE_FIRST<pos:position pos:line="96" pos:column="26"/></name><argument_list pos:line="96" pos:column="26">(<argument><expr><name><name pos:line="96" pos:column="27">ctx<pos:position pos:line="96" pos:column="30"/></name><operator pos:line="96" pos:column="30">-&gt;<pos:position pos:line="96" pos:column="35"/></operator><name pos:line="96" pos:column="32">bb<pos:position pos:line="96" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="36"/></expr_stmt>
    <while pos:line="97" pos:column="5">while <condition pos:line="97" pos:column="11">(<expr><name pos:line="97" pos:column="12">e<pos:position pos:line="97" pos:column="13"/></name> <operator pos:line="97" pos:column="14">!=<pos:position pos:line="97" pos:column="16"/></operator> <name pos:line="97" pos:column="17">after<pos:position pos:line="97" pos:column="22"/></name></expr>)<pos:position pos:line="97" pos:column="23"/></condition> <block pos:line="97" pos:column="24">{
        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><call><name pos:line="98" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="98" pos:column="30"/></name><argument_list pos:line="98" pos:column="30">(<argument><expr><name pos:line="98" pos:column="31">e<pos:position pos:line="98" pos:column="32"/></name></expr></argument>)<pos:position pos:line="98" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="34"/></condition><then pos:line="98" pos:column="34"> <block pos:line="98" pos:column="35">{
            <comment type="block" pos:line="99" pos:column="13">/* last bucket read, step out of the way */</comment>
            <expr_stmt><expr><call><name pos:line="100" pos:column="13">ap_remove_input_filter<pos:position pos:line="100" pos:column="35"/></name><argument_list pos:line="100" pos:column="35">(<argument><expr><name pos:line="100" pos:column="36">f<pos:position pos:line="100" pos:column="37"/></name></expr></argument>)<pos:position pos:line="100" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="101" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">APR_BUCKET_REMOVE<pos:position pos:line="102" pos:column="26"/></name><argument_list pos:line="102" pos:column="26">(<argument><expr><name pos:line="102" pos:column="27">e<pos:position pos:line="102" pos:column="28"/></name></expr></argument>)<pos:position pos:line="102" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="103" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="103" pos:column="32"/></name><argument_list pos:line="103" pos:column="32">(<argument><expr><name pos:line="103" pos:column="33">bb<pos:position pos:line="103" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="37">e<pos:position pos:line="103" pos:column="38"/></name></expr></argument>)<pos:position pos:line="103" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="104" pos:column="9">e<pos:position pos:line="104" pos:column="10"/></name> <operator pos:line="104" pos:column="11">=<pos:position pos:line="104" pos:column="12"/></operator> <call><name pos:line="104" pos:column="13">APR_BRIGADE_FIRST<pos:position pos:line="104" pos:column="30"/></name><argument_list pos:line="104" pos:column="30">(<argument><expr><name><name pos:line="104" pos:column="31">ctx<pos:position pos:line="104" pos:column="34"/></name><operator pos:line="104" pos:column="34">-&gt;<pos:position pos:line="104" pos:column="39"/></operator><name pos:line="104" pos:column="36">bb<pos:position pos:line="104" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="105" pos:column="6"/></block></while>

    <return pos:line="107" pos:column="5">return <expr><name pos:line="107" pos:column="12">APR_SUCCESS<pos:position pos:line="107" pos:column="23"/></name></expr>;<pos:position pos:line="107" pos:column="24"/></return>
}<pos:position pos:line="108" pos:column="2"/></block></function></unit>
