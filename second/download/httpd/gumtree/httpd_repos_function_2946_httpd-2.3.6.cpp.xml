<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2946_httpd-2.3.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">extract_cookie_line<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">ap_cookie_do<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type> <name pos:line="1" pos:column="47">v<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="50">const<pos:position pos:line="1" pos:column="55"/></specifier> <name pos:line="1" pos:column="56">char<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">key<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="67">const<pos:position pos:line="1" pos:column="72"/></specifier> <name pos:line="1" pos:column="73">char<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">val<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="83"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">last1<pos:position pos:line="3" pos:column="16"/></name></decl>, <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="19">last2<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">cookie<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">apr_pstrdup<pos:position pos:line="4" pos:column="31"/></name><argument_list pos:line="4" pos:column="31">(<argument><expr><name><name pos:line="4" pos:column="32">v<pos:position pos:line="4" pos:column="33"/></name><operator pos:line="4" pos:column="33">-&gt;<pos:position pos:line="4" pos:column="38"/></operator><name pos:line="4" pos:column="35">r<pos:position pos:line="4" pos:column="36"/></name><operator pos:line="4" pos:column="36">-&gt;<pos:position pos:line="4" pos:column="41"/></operator><name pos:line="4" pos:column="38">pool<pos:position pos:line="4" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="44">val<pos:position pos:line="4" pos:column="47"/></name></expr></argument>)<pos:position pos:line="4" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="49"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">name<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><call><name pos:line="5" pos:column="24">apr_pstrcat<pos:position pos:line="5" pos:column="35"/></name><argument_list pos:line="5" pos:column="35">(<argument><expr><name><name pos:line="5" pos:column="36">v<pos:position pos:line="5" pos:column="37"/></name><operator pos:line="5" pos:column="37">-&gt;<pos:position pos:line="5" pos:column="42"/></operator><name pos:line="5" pos:column="39">r<pos:position pos:line="5" pos:column="40"/></name><operator pos:line="5" pos:column="40">-&gt;<pos:position pos:line="5" pos:column="45"/></operator><name pos:line="5" pos:column="42">pool<pos:position pos:line="5" pos:column="46"/></name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name pos:line="5" pos:column="48">v<pos:position pos:line="5" pos:column="49"/></name><operator pos:line="5" pos:column="49">-&gt;<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="51">name<pos:position pos:line="5" pos:column="55"/></name></name></expr> ?<pos:position pos:line="5" pos:column="57"/></condition><then pos:line="5" pos:column="57"> <expr><name><name pos:line="5" pos:column="58">v<pos:position pos:line="5" pos:column="59"/></name><operator pos:line="5" pos:column="59">-&gt;<pos:position pos:line="5" pos:column="64"/></operator><name pos:line="5" pos:column="61">name<pos:position pos:line="5" pos:column="65"/></name></name></expr> <pos:position pos:line="5" pos:column="66"/></then><else pos:line="5" pos:column="66">: <expr><literal type="string" pos:line="5" pos:column="68">""<pos:position pos:line="5" pos:column="70"/></literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="72">"="<pos:position pos:line="5" pos:column="75"/></literal></expr></argument>, <argument><expr><name pos:line="5" pos:column="77">NULL<pos:position pos:line="5" pos:column="81"/></name></expr></argument>)<pos:position pos:line="5" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="83"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">size_t<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">len<pos:position pos:line="6" pos:column="15"/></name> <init pos:line="6" pos:column="16">= <expr><call><name pos:line="6" pos:column="18">strlen<pos:position pos:line="6" pos:column="24"/></name><argument_list pos:line="6" pos:column="24">(<argument><expr><name pos:line="6" pos:column="25">name<pos:position pos:line="6" pos:column="29"/></name></expr></argument>)<pos:position pos:line="6" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">new_cookie<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><literal type="string" pos:line="7" pos:column="30">""<pos:position pos:line="7" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">comma<pos:position pos:line="8" pos:column="22"/></name> <init pos:line="8" pos:column="23">= <expr><literal type="string" pos:line="8" pos:column="25">","<pos:position pos:line="8" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">next1<pos:position pos:line="9" pos:column="16"/></name></decl>;<pos:position pos:line="9" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">semi<pos:position pos:line="10" pos:column="21"/></name> <init pos:line="10" pos:column="22">= <expr><literal type="string" pos:line="10" pos:column="24">";"<pos:position pos:line="10" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">next2<pos:position pos:line="11" pos:column="16"/></name></decl>;<pos:position pos:line="11" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">sep<pos:position pos:line="12" pos:column="20"/></name> <init pos:line="12" pos:column="21">= <expr><literal type="string" pos:line="12" pos:column="23">""<pos:position pos:line="12" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">cookies<pos:position pos:line="13" pos:column="16"/></name> <init pos:line="13" pos:column="17">= <expr><literal type="number" pos:line="13" pos:column="19">0<pos:position pos:line="13" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="15" pos:column="5">/* find the cookie called name */</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">eat<pos:position pos:line="16" pos:column="12"/></name> <init pos:line="16" pos:column="13">= <expr><literal type="number" pos:line="16" pos:column="15">0<pos:position pos:line="16" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="17"/></decl_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">next1<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <call><name pos:line="17" pos:column="13">apr_strtok<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name pos:line="17" pos:column="24">cookie<pos:position pos:line="17" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="32">comma<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="39">&amp;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="40">last1<pos:position pos:line="17" pos:column="45"/></name></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt>
    <while pos:line="18" pos:column="5">while <condition pos:line="18" pos:column="11">(<expr><name pos:line="18" pos:column="12">next1<pos:position pos:line="18" pos:column="17"/></name></expr>)<pos:position pos:line="18" pos:column="18"/></condition> <block pos:line="18" pos:column="19">{
        <expr_stmt><expr><name pos:line="19" pos:column="9">next2<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">=<pos:position pos:line="19" pos:column="16"/></operator> <call><name pos:line="19" pos:column="17">apr_strtok<pos:position pos:line="19" pos:column="27"/></name><argument_list pos:line="19" pos:column="27">(<argument><expr><name pos:line="19" pos:column="28">next1<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="35">semi<pos:position pos:line="19" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="41">&amp;<pos:position pos:line="19" pos:column="46"/></operator><name pos:line="19" pos:column="42">last2<pos:position pos:line="19" pos:column="47"/></name></expr></argument>)<pos:position pos:line="19" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="49"/></expr_stmt>
        <while pos:line="20" pos:column="9">while <condition pos:line="20" pos:column="15">(<expr><name pos:line="20" pos:column="16">next2<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition> <block pos:line="20" pos:column="23">{
            <decl_stmt><decl><type><name pos:line="21" pos:column="13">char<pos:position pos:line="21" pos:column="17"/></name> <modifier pos:line="21" pos:column="18">*<pos:position pos:line="21" pos:column="19"/></modifier></type><name pos:line="21" pos:column="19">trim<pos:position pos:line="21" pos:column="23"/></name> <init pos:line="21" pos:column="24">= <expr><name pos:line="21" pos:column="26">next2<pos:position pos:line="21" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="32"/></decl_stmt>
            <while pos:line="22" pos:column="13">while <condition pos:line="22" pos:column="19">(<expr><call><name pos:line="22" pos:column="20">apr_isspace<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><operator pos:line="22" pos:column="32">*<pos:position pos:line="22" pos:column="33"/></operator><name pos:line="22" pos:column="33">trim<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="39"/></condition> <block pos:line="22" pos:column="40">{
                <expr_stmt><expr><name pos:line="23" pos:column="17">trim<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">++<pos:position pos:line="23" pos:column="23"/></operator></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="24" pos:column="14"/></block></while>
            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><operator pos:line="25" pos:column="17">!<pos:position pos:line="25" pos:column="18"/></operator><call><name pos:line="25" pos:column="18">strncmp<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">trim<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="32">name<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">len<pos:position pos:line="25" pos:column="41"/></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="43"/></condition><then pos:line="25" pos:column="43"> <block pos:line="25" pos:column="44">{
                <if pos:line="26" pos:column="17">if <condition pos:line="26" pos:column="20">(<expr><name><name pos:line="26" pos:column="21">v<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">-&gt;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="24">encoded<pos:position pos:line="26" pos:column="31"/></name></name></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32"> <block pos:line="26" pos:column="33">{
                    <if pos:line="27" pos:column="21">if <condition pos:line="27" pos:column="24">(<expr><call><name pos:line="27" pos:column="25">strcmp<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name><name pos:line="27" pos:column="32">v<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">-&gt;<pos:position pos:line="27" pos:column="38"/></operator><name pos:line="27" pos:column="35">encoded<pos:position pos:line="27" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">trim<pos:position pos:line="27" pos:column="48"/></name> <operator pos:line="27" pos:column="49">+<pos:position pos:line="27" pos:column="50"/></operator> <name pos:line="27" pos:column="51">len<pos:position pos:line="27" pos:column="54"/></name></expr></argument>)<pos:position pos:line="27" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="56"/></condition><then pos:line="27" pos:column="56"> <block pos:line="27" pos:column="57">{
                        <expr_stmt><expr><name><name pos:line="28" pos:column="25">v<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">duplicated<pos:position pos:line="28" pos:column="38"/></name></name> <operator pos:line="28" pos:column="39">=<pos:position pos:line="28" pos:column="40"/></operator> <literal type="number" pos:line="28" pos:column="41">1<pos:position pos:line="28" pos:column="42"/></literal></expr>;<pos:position pos:line="28" pos:column="43"/></expr_stmt>
                    }<pos:position pos:line="29" pos:column="22"/></block></then></if>
                }<pos:position pos:line="30" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name><name pos:line="31" pos:column="17">v<pos:position pos:line="31" pos:column="18"/></name><operator pos:line="31" pos:column="18">-&gt;<pos:position pos:line="31" pos:column="23"/></operator><name pos:line="31" pos:column="20">encoded<pos:position pos:line="31" pos:column="27"/></name></name> <operator pos:line="31" pos:column="28">=<pos:position pos:line="31" pos:column="29"/></operator> <call><name pos:line="31" pos:column="30">apr_pstrdup<pos:position pos:line="31" pos:column="41"/></name><argument_list pos:line="31" pos:column="41">(<argument><expr><name><name pos:line="31" pos:column="42">v<pos:position pos:line="31" pos:column="43"/></name><operator pos:line="31" pos:column="43">-&gt;<pos:position pos:line="31" pos:column="48"/></operator><name pos:line="31" pos:column="45">r<pos:position pos:line="31" pos:column="46"/></name><operator pos:line="31" pos:column="46">-&gt;<pos:position pos:line="31" pos:column="51"/></operator><name pos:line="31" pos:column="48">pool<pos:position pos:line="31" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="54">trim<pos:position pos:line="31" pos:column="58"/></name> <operator pos:line="31" pos:column="59">+<pos:position pos:line="31" pos:column="60"/></operator> <name pos:line="31" pos:column="61">len<pos:position pos:line="31" pos:column="64"/></name></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="66"/></expr_stmt>
                <expr_stmt><expr><name pos:line="32" pos:column="17">eat<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <literal type="number" pos:line="32" pos:column="23">1<pos:position pos:line="32" pos:column="24"/></literal></expr>;<pos:position pos:line="32" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="33" pos:column="14"/></block></then>
            <else pos:line="34" pos:column="13">else <block pos:line="34" pos:column="18">{
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><operator pos:line="35" pos:column="21">*<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="22">trim<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">!=<pos:position pos:line="35" pos:column="29"/></operator> <literal type="char" pos:line="35" pos:column="30">'$'<pos:position pos:line="35" pos:column="33"/></literal></expr>)<pos:position pos:line="35" pos:column="34"/></condition><then pos:line="35" pos:column="34"> <block pos:line="35" pos:column="35">{
                    <expr_stmt><expr><name pos:line="36" pos:column="21">cookies<pos:position pos:line="36" pos:column="28"/></name><operator pos:line="36" pos:column="28">++<pos:position pos:line="36" pos:column="30"/></operator></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="37" pos:column="21">eat<pos:position pos:line="37" pos:column="24"/></name> <operator pos:line="37" pos:column="25">=<pos:position pos:line="37" pos:column="26"/></operator> <literal type="number" pos:line="37" pos:column="27">0<pos:position pos:line="37" pos:column="28"/></literal></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="38" pos:column="18"/></block></then></if>
                <if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><operator pos:line="39" pos:column="21">!<pos:position pos:line="39" pos:column="22"/></operator><name pos:line="39" pos:column="22">eat<pos:position pos:line="39" pos:column="25"/></name></expr>)<pos:position pos:line="39" pos:column="26"/></condition><then pos:line="39" pos:column="26"> <block pos:line="39" pos:column="27">{
                    <expr_stmt><expr><name pos:line="40" pos:column="21">new_cookie<pos:position pos:line="40" pos:column="31"/></name> <operator pos:line="40" pos:column="32">=<pos:position pos:line="40" pos:column="33"/></operator> <call><name pos:line="40" pos:column="34">apr_pstrcat<pos:position pos:line="40" pos:column="45"/></name><argument_list pos:line="40" pos:column="45">(<argument><expr><name><name pos:line="40" pos:column="46">v<pos:position pos:line="40" pos:column="47"/></name><operator pos:line="40" pos:column="47">-&gt;<pos:position pos:line="40" pos:column="52"/></operator><name pos:line="40" pos:column="49">r<pos:position pos:line="40" pos:column="50"/></name><operator pos:line="40" pos:column="50">-&gt;<pos:position pos:line="40" pos:column="55"/></operator><name pos:line="40" pos:column="52">pool<pos:position pos:line="40" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="58">new_cookie<pos:position pos:line="40" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="70">sep<pos:position pos:line="40" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="75">next2<pos:position pos:line="40" pos:column="80"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="82">NULL<pos:position pos:line="40" pos:column="86"/></name></expr></argument>)<pos:position pos:line="40" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="88"/></expr_stmt>
                }<pos:position pos:line="41" pos:column="18"/></block></then></if>
            }<pos:position pos:line="42" pos:column="14"/></block></else></if>
            <expr_stmt><expr><name pos:line="43" pos:column="13">next2<pos:position pos:line="43" pos:column="18"/></name> <operator pos:line="43" pos:column="19">=<pos:position pos:line="43" pos:column="20"/></operator> <call><name pos:line="43" pos:column="21">apr_strtok<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">NULL<pos:position pos:line="43" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="38">semi<pos:position pos:line="43" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="44">&amp;<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="45">last2<pos:position pos:line="43" pos:column="50"/></name></expr></argument>)<pos:position pos:line="43" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">sep<pos:position pos:line="44" pos:column="16"/></name> <operator pos:line="44" pos:column="17">=<pos:position pos:line="44" pos:column="18"/></operator> <name pos:line="44" pos:column="19">semi<pos:position pos:line="44" pos:column="23"/></name></expr>;<pos:position pos:line="44" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="45" pos:column="10"/></block></while>

        <expr_stmt><expr><name pos:line="47" pos:column="9">next1<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">=<pos:position pos:line="47" pos:column="16"/></operator> <call><name pos:line="47" pos:column="17">apr_strtok<pos:position pos:line="47" pos:column="27"/></name><argument_list pos:line="47" pos:column="27">(<argument><expr><name pos:line="47" pos:column="28">NULL<pos:position pos:line="47" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="34">comma<pos:position pos:line="47" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="47" pos:column="41">&amp;<pos:position pos:line="47" pos:column="46"/></operator><name pos:line="47" pos:column="42">last1<pos:position pos:line="47" pos:column="47"/></name></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="48" pos:column="9">sep<pos:position pos:line="48" pos:column="12"/></name> <operator pos:line="48" pos:column="13">=<pos:position pos:line="48" pos:column="14"/></operator> <name pos:line="48" pos:column="15">comma<pos:position pos:line="48" pos:column="20"/></name></expr>;<pos:position pos:line="48" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></while>

    <comment type="block" pos:line="51" pos:column="5">/* any cookies left over? */</comment>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">cookies<pos:position pos:line="52" pos:column="16"/></name></expr>)<pos:position pos:line="52" pos:column="17"/></condition><then pos:line="52" pos:column="17"> <block pos:line="52" pos:column="18">{
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">apr_table_addn<pos:position pos:line="53" pos:column="23"/></name><argument_list pos:line="53" pos:column="23">(<argument><expr><name><name pos:line="53" pos:column="24">v<pos:position pos:line="53" pos:column="25"/></name><operator pos:line="53" pos:column="25">-&gt;<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="27">new_cookies<pos:position pos:line="53" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="40">key<pos:position pos:line="53" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="45">new_cookie<pos:position pos:line="53" pos:column="55"/></name></expr></argument>)<pos:position pos:line="53" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <return pos:line="56" pos:column="5">return <expr><literal type="number" pos:line="56" pos:column="12">1<pos:position pos:line="56" pos:column="13"/></literal></expr>;<pos:position pos:line="56" pos:column="14"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
