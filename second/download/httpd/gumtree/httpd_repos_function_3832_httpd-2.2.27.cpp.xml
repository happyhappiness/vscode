<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3832_httpd-2.2.27.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">apr_pollset_drain_wakeup_pipe<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">apr_pollset_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">pollset<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name></type> <name><name pos:line="3" pos:column="10">rb<pos:position pos:line="3" pos:column="12"/></name><index pos:line="3" pos:column="12">[<expr><literal type="number" pos:line="3" pos:column="13">512<pos:position pos:line="3" pos:column="16"/></literal></expr>]<pos:position pos:line="3" pos:column="17"/></index></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">nr<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><sizeof pos:line="4" pos:column="21">sizeof<argument_list pos:line="4" pos:column="27">(<argument><expr><name pos:line="4" pos:column="28">rb<pos:position pos:line="4" pos:column="30"/></name></expr></argument>)<pos:position pos:line="4" pos:column="31"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>

    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><call><name pos:line="6" pos:column="12">apr_file_read<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name><name pos:line="6" pos:column="26">pollset<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">wakeup_pipe<pos:position pos:line="6" pos:column="46"/></name><index pos:line="6" pos:column="46">[<expr><literal type="number" pos:line="6" pos:column="47">0<pos:position pos:line="6" pos:column="48"/></literal></expr>]<pos:position pos:line="6" pos:column="49"/></index></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="51">rb<pos:position pos:line="6" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="55">&amp;<pos:position pos:line="6" pos:column="60"/></operator><name pos:line="6" pos:column="56">nr<pos:position pos:line="6" pos:column="58"/></name></expr></argument>)<pos:position pos:line="6" pos:column="59"/></argument_list></call> <operator pos:line="6" pos:column="60">==<pos:position pos:line="6" pos:column="62"/></operator> <name pos:line="6" pos:column="63">APR_SUCCESS<pos:position pos:line="6" pos:column="74"/></name></expr>)<pos:position pos:line="6" pos:column="75"/></condition> <block pos:line="6" pos:column="76">{
        <comment type="block" pos:line="7" pos:column="9">/* Although we write just one byte to the other end of the pipe
         * during wakeup, multiple threads could call the wakeup.
         * So simply drain out from the input side of the pipe all
         * the data.
         */</comment>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">nr<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">!=<pos:position pos:line="12" pos:column="18"/></operator> <sizeof pos:line="12" pos:column="19">sizeof<argument_list pos:line="12" pos:column="25">(<argument><expr><name pos:line="12" pos:column="26">rb<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></sizeof></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30">
            <block type="pseudo"><break pos:line="13" pos:column="13">break;<pos:position pos:line="13" pos:column="19"/></break></block></then></if>
    }<pos:position pos:line="14" pos:column="6"/></block></while>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
