<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1301_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type>
    <name pos:line="2" pos:column="5">add_proxy<pos:position pos:line="2" pos:column="14"/></name><parameter_list pos:line="2" pos:column="14">(<parameter><decl><type><name pos:line="2" pos:column="15">cmd_parms<pos:position pos:line="2" pos:column="24"/></name> <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">cmd<pos:position pos:line="2" pos:column="29"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="31">void<pos:position pos:line="2" pos:column="35"/></name> <modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">dummy<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="44">const<pos:position pos:line="2" pos:column="49"/></specifier> <name pos:line="2" pos:column="50">char<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">f1<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="60">const<pos:position pos:line="2" pos:column="65"/></specifier> <name pos:line="2" pos:column="66">char<pos:position pos:line="2" pos:column="70"/></name> <modifier pos:line="2" pos:column="71">*<pos:position pos:line="2" pos:column="72"/></modifier></type><name pos:line="2" pos:column="72">r1<pos:position pos:line="2" pos:column="74"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="76">int<pos:position pos:line="2" pos:column="79"/></name></type> <name pos:line="2" pos:column="80">regex<pos:position pos:line="2" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="86"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">server_rec<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">s<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name><name pos:line="4" pos:column="21">cmd<pos:position pos:line="4" pos:column="24"/></name><operator pos:line="4" pos:column="24">-&gt;<pos:position pos:line="4" pos:column="29"/></operator><name pos:line="4" pos:column="26">server<pos:position pos:line="4" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">proxy_server_conf<pos:position pos:line="5" pos:column="22"/></name> <modifier pos:line="5" pos:column="23">*<pos:position pos:line="5" pos:column="24"/></modifier></type><name pos:line="5" pos:column="24">conf<pos:position pos:line="5" pos:column="28"/></name> <init pos:line="5" pos:column="29">=
    <expr><operator pos:line="6" pos:column="5">(<pos:position pos:line="6" pos:column="6"/></operator><name pos:line="6" pos:column="6">proxy_server_conf<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></operator><operator pos:line="6" pos:column="25">)<pos:position pos:line="6" pos:column="26"/></operator> <call><name pos:line="6" pos:column="27">ap_get_module_config<pos:position pos:line="6" pos:column="47"/></name><argument_list pos:line="6" pos:column="47">(<argument><expr><name><name pos:line="6" pos:column="48">s<pos:position pos:line="6" pos:column="49"/></name><operator pos:line="6" pos:column="49">-&gt;<pos:position pos:line="6" pos:column="54"/></operator><name pos:line="6" pos:column="51">module_config<pos:position pos:line="6" pos:column="64"/></name></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="66">&amp;<pos:position pos:line="6" pos:column="71"/></operator><name pos:line="6" pos:column="67">proxy_module<pos:position pos:line="6" pos:column="79"/></name></expr></argument>)<pos:position pos:line="6" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="81"/></decl_stmt>
    struct <expr_stmt><expr><name pos:line="7" pos:column="12">proxy_remote<pos:position pos:line="7" pos:column="24"/></name> <operator pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></operator><operator pos:line="7" pos:column="26">new<pos:position pos:line="7" pos:column="29"/></operator></expr>;<pos:position pos:line="7" pos:column="30"/></expr_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">p<pos:position pos:line="8" pos:column="12"/></name></decl>, <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier><decl><type ref="prev"/><name pos:line="8" pos:column="15">q<pos:position pos:line="8" pos:column="16"/></name></decl>;<pos:position pos:line="8" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">r<pos:position pos:line="9" pos:column="12"/></name></decl>, <modifier pos:line="9" pos:column="14">*<pos:position pos:line="9" pos:column="15"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="15">f<pos:position pos:line="9" pos:column="16"/></name></decl>, <modifier pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="9" pos:column="19">scheme<pos:position pos:line="9" pos:column="25"/></name></decl>;<pos:position pos:line="9" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">regex_t<pos:position pos:line="10" pos:column="12"/></name> <modifier pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></modifier></type><name pos:line="10" pos:column="14">reg<pos:position pos:line="10" pos:column="17"/></name> <init pos:line="10" pos:column="18">= <expr><name pos:line="10" pos:column="20">NULL<pos:position pos:line="10" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">port<pos:position pos:line="11" pos:column="13"/></name></decl>;<pos:position pos:line="11" pos:column="14"/></decl_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">r<pos:position pos:line="13" pos:column="6"/></name> <operator pos:line="13" pos:column="7">=<pos:position pos:line="13" pos:column="8"/></operator> <call><name pos:line="13" pos:column="9">apr_pstrdup<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name><name pos:line="13" pos:column="21">cmd<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">-&gt;<pos:position pos:line="13" pos:column="29"/></operator><name pos:line="13" pos:column="26">pool<pos:position pos:line="13" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="32">r1<pos:position pos:line="13" pos:column="34"/></name></expr></argument>)<pos:position pos:line="13" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">scheme<pos:position pos:line="14" pos:column="11"/></name> <operator pos:line="14" pos:column="12">=<pos:position pos:line="14" pos:column="13"/></operator> <call><name pos:line="14" pos:column="14">apr_pstrdup<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name><name pos:line="14" pos:column="26">cmd<pos:position pos:line="14" pos:column="29"/></name><operator pos:line="14" pos:column="29">-&gt;<pos:position pos:line="14" pos:column="34"/></operator><name pos:line="14" pos:column="31">pool<pos:position pos:line="14" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="37">r1<pos:position pos:line="14" pos:column="39"/></name></expr></argument>)<pos:position pos:line="14" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="15" pos:column="5">f<pos:position pos:line="15" pos:column="6"/></name> <operator pos:line="15" pos:column="7">=<pos:position pos:line="15" pos:column="8"/></operator> <call><name pos:line="15" pos:column="9">apr_pstrdup<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name><name pos:line="15" pos:column="21">cmd<pos:position pos:line="15" pos:column="24"/></name><operator pos:line="15" pos:column="24">-&gt;<pos:position pos:line="15" pos:column="29"/></operator><name pos:line="15" pos:column="26">pool<pos:position pos:line="15" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="32">f1<pos:position pos:line="15" pos:column="34"/></name></expr></argument>)<pos:position pos:line="15" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="16" pos:column="5">p<pos:position pos:line="16" pos:column="6"/></name> <operator pos:line="16" pos:column="7">=<pos:position pos:line="16" pos:column="8"/></operator> <call><name pos:line="16" pos:column="9">strchr<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><name pos:line="16" pos:column="16">r<pos:position pos:line="16" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="16" pos:column="19">':'<pos:position pos:line="16" pos:column="22"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">p<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">==<pos:position pos:line="17" pos:column="13"/></operator> <name pos:line="17" pos:column="14">NULL<pos:position pos:line="17" pos:column="18"/></name> <operator pos:line="17" pos:column="19">||<pos:position pos:line="17" pos:column="21"/></operator> <name><name pos:line="17" pos:column="22">p<pos:position pos:line="17" pos:column="23"/></name><index pos:line="17" pos:column="23">[<expr><literal type="number" pos:line="17" pos:column="24">1<pos:position pos:line="17" pos:column="25"/></literal></expr>]<pos:position pos:line="17" pos:column="26"/></index></name> <operator pos:line="17" pos:column="27">!=<pos:position pos:line="17" pos:column="29"/></operator> <literal type="char" pos:line="17" pos:column="30">'/'<pos:position pos:line="17" pos:column="33"/></literal> <operator pos:line="17" pos:column="34">||<pos:position pos:line="17" pos:column="36"/></operator> <name><name pos:line="17" pos:column="37">p<pos:position pos:line="17" pos:column="38"/></name><index pos:line="17" pos:column="38">[<expr><literal type="number" pos:line="17" pos:column="39">2<pos:position pos:line="17" pos:column="40"/></literal></expr>]<pos:position pos:line="17" pos:column="41"/></index></name> <operator pos:line="17" pos:column="42">!=<pos:position pos:line="17" pos:column="44"/></operator> <literal type="char" pos:line="17" pos:column="45">'/'<pos:position pos:line="17" pos:column="48"/></literal> <operator pos:line="17" pos:column="49">||<pos:position pos:line="17" pos:column="51"/></operator> <name><name pos:line="17" pos:column="52">p<pos:position pos:line="17" pos:column="53"/></name><index pos:line="17" pos:column="53">[<expr><literal type="number" pos:line="17" pos:column="54">3<pos:position pos:line="17" pos:column="55"/></literal></expr>]<pos:position pos:line="17" pos:column="56"/></index></name> <operator pos:line="17" pos:column="57">==<pos:position pos:line="17" pos:column="59"/></operator> <literal type="char" pos:line="17" pos:column="60">'\0'<pos:position pos:line="17" pos:column="64"/></literal></expr>)<pos:position pos:line="17" pos:column="65"/></condition><then pos:line="17" pos:column="65"> <block pos:line="17" pos:column="66">{
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">regex<pos:position pos:line="18" pos:column="18"/></name></expr>)<pos:position pos:line="18" pos:column="19"/></condition><then pos:line="18" pos:column="19">
            <block type="pseudo"><return pos:line="19" pos:column="13">return <expr><literal type="string" pos:line="19" pos:column="20">"ProxyRemoteMatch: Bad syntax for a remote proxy server"<pos:position pos:line="19" pos:column="76"/></literal></expr>;<pos:position pos:line="19" pos:column="77"/></return></block></then>
        <else pos:line="20" pos:column="9">else
            <block type="pseudo"><return pos:line="21" pos:column="13">return <expr><literal type="string" pos:line="21" pos:column="20">"ProxyRemote: Bad syntax for a remote proxy server"<pos:position pos:line="21" pos:column="71"/></literal></expr>;<pos:position pos:line="21" pos:column="72"/></return></block></else></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then>
    <else pos:line="23" pos:column="5">else <block pos:line="23" pos:column="10">{
        <expr_stmt><expr><name><name pos:line="24" pos:column="9">scheme<pos:position pos:line="24" pos:column="15"/></name><index pos:line="24" pos:column="15">[<expr><name pos:line="24" pos:column="16">p<pos:position pos:line="24" pos:column="17"/></name><operator pos:line="24" pos:column="17">-<pos:position pos:line="24" pos:column="18"/></operator><name pos:line="24" pos:column="18">r<pos:position pos:line="24" pos:column="19"/></name></expr>]<pos:position pos:line="24" pos:column="20"/></index></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="23">0<pos:position pos:line="24" pos:column="24"/></literal></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="26" pos:column="5">q<pos:position pos:line="26" pos:column="6"/></name> <operator pos:line="26" pos:column="7">=<pos:position pos:line="26" pos:column="8"/></operator> <call><name pos:line="26" pos:column="9">strchr<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">p<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">+<pos:position pos:line="26" pos:column="19"/></operator> <literal type="number" pos:line="26" pos:column="20">3<pos:position pos:line="26" pos:column="21"/></literal></expr></argument>, <argument><expr><literal type="char" pos:line="26" pos:column="23">':'<pos:position pos:line="26" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="28"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">q<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">!=<pos:position pos:line="27" pos:column="13"/></operator> <name pos:line="27" pos:column="14">NULL<pos:position pos:line="27" pos:column="18"/></name></expr>)<pos:position pos:line="27" pos:column="19"/></condition><then pos:line="27" pos:column="19"> <block pos:line="27" pos:column="20">{
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><call><name pos:line="28" pos:column="13">sscanf<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name pos:line="28" pos:column="20">q<pos:position pos:line="28" pos:column="21"/></name> <operator pos:line="28" pos:column="22">+<pos:position pos:line="28" pos:column="23"/></operator> <literal type="number" pos:line="28" pos:column="24">1<pos:position pos:line="28" pos:column="25"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="27">"%u"<pos:position pos:line="28" pos:column="31"/></literal></expr></argument>, <argument><expr><operator pos:line="28" pos:column="33">&amp;<pos:position pos:line="28" pos:column="38"/></operator><name pos:line="28" pos:column="34">port<pos:position pos:line="28" pos:column="38"/></name></expr></argument>)<pos:position pos:line="28" pos:column="39"/></argument_list></call> <operator pos:line="28" pos:column="40">!=<pos:position pos:line="28" pos:column="42"/></operator> <literal type="number" pos:line="28" pos:column="43">1<pos:position pos:line="28" pos:column="44"/></literal> <operator pos:line="28" pos:column="45">||<pos:position pos:line="28" pos:column="47"/></operator> <name pos:line="28" pos:column="48">port<pos:position pos:line="28" pos:column="52"/></name> <operator pos:line="28" pos:column="53">&gt;<pos:position pos:line="28" pos:column="57"/></operator> <literal type="number" pos:line="28" pos:column="55">65535<pos:position pos:line="28" pos:column="60"/></literal></expr>)<pos:position pos:line="28" pos:column="61"/></condition><then pos:line="28" pos:column="61"> <block pos:line="28" pos:column="62">{
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name pos:line="29" pos:column="17">regex<pos:position pos:line="29" pos:column="22"/></name></expr>)<pos:position pos:line="29" pos:column="23"/></condition><then pos:line="29" pos:column="23">
                <block type="pseudo"><return pos:line="30" pos:column="17">return <expr><literal type="string" pos:line="30" pos:column="24">"ProxyRemoteMatch: Bad syntax for a remote proxy server (bad port number)"<pos:position pos:line="30" pos:column="98"/></literal></expr>;<pos:position pos:line="30" pos:column="99"/></return></block></then>
            <else pos:line="31" pos:column="13">else
                <block type="pseudo"><return pos:line="32" pos:column="17">return <expr><literal type="string" pos:line="32" pos:column="24">"ProxyRemote: Bad syntax for a remote proxy server (bad port number)"<pos:position pos:line="32" pos:column="93"/></literal></expr>;<pos:position pos:line="32" pos:column="94"/></return></block></else></if>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="34" pos:column="9">*<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">q<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <literal type="char" pos:line="34" pos:column="14">'\0'<pos:position pos:line="34" pos:column="18"/></literal></expr>;<pos:position pos:line="34" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then>
    <else pos:line="36" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="9">port<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <operator pos:line="37" pos:column="16">-<pos:position pos:line="37" pos:column="17"/></operator><literal type="number" pos:line="37" pos:column="17">1<pos:position pos:line="37" pos:column="18"/></literal></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt></block></else></if>
    <expr_stmt><expr><operator pos:line="38" pos:column="5">*<pos:position pos:line="38" pos:column="6"/></operator><name pos:line="38" pos:column="6">p<pos:position pos:line="38" pos:column="7"/></name> <operator pos:line="38" pos:column="8">=<pos:position pos:line="38" pos:column="9"/></operator> <literal type="char" pos:line="38" pos:column="10">'\0'<pos:position pos:line="38" pos:column="14"/></literal></expr>;<pos:position pos:line="38" pos:column="15"/></expr_stmt>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">regex<pos:position pos:line="39" pos:column="14"/></name></expr>)<pos:position pos:line="39" pos:column="15"/></condition><then pos:line="39" pos:column="15"> <block pos:line="39" pos:column="16">{
        <expr_stmt><expr><name pos:line="40" pos:column="9">reg<pos:position pos:line="40" pos:column="12"/></name> <operator pos:line="40" pos:column="13">=<pos:position pos:line="40" pos:column="14"/></operator> <call><name pos:line="40" pos:column="15">ap_pregcomp<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><name><name pos:line="40" pos:column="27">cmd<pos:position pos:line="40" pos:column="30"/></name><operator pos:line="40" pos:column="30">-&gt;<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="32">pool<pos:position pos:line="40" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="38">f<pos:position pos:line="40" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="41">REG_EXTENDED<pos:position pos:line="40" pos:column="53"/></name></expr></argument>)<pos:position pos:line="40" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="55"/></expr_stmt>
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><operator pos:line="41" pos:column="13">!<pos:position pos:line="41" pos:column="14"/></operator><name pos:line="41" pos:column="14">reg<pos:position pos:line="41" pos:column="17"/></name></expr>)<pos:position pos:line="41" pos:column="18"/></condition><then pos:line="41" pos:column="18">
            <block type="pseudo"><return pos:line="42" pos:column="13">return <expr><literal type="string" pos:line="42" pos:column="20">"Regular expression for ProxyRemoteMatch could not be compiled."<pos:position pos:line="42" pos:column="84"/></literal></expr>;<pos:position pos:line="42" pos:column="85"/></return></block></then></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then>
    <elseif pos:line="44" pos:column="5">else
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><call><name pos:line="45" pos:column="13">strchr<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><name pos:line="45" pos:column="20">f<pos:position pos:line="45" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="45" pos:column="23">':'<pos:position pos:line="45" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="27"/></argument_list></call> <operator pos:line="45" pos:column="28">==<pos:position pos:line="45" pos:column="30"/></operator> <name pos:line="45" pos:column="31">NULL<pos:position pos:line="45" pos:column="35"/></name></expr>)<pos:position pos:line="45" pos:column="36"/></condition><then pos:line="45" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="46" pos:column="13">ap_str_tolower<pos:position pos:line="46" pos:column="27"/></name><argument_list pos:line="46" pos:column="27">(<argument><expr><name pos:line="46" pos:column="28">f<pos:position pos:line="46" pos:column="29"/></name></expr></argument>)<pos:position pos:line="46" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="31"/></expr_stmt></block></then></if></elseif></if>		<comment type="block" pos:line="46" pos:column="41">/* lowercase scheme */</comment>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">ap_str_tolower<pos:position pos:line="47" pos:column="19"/></name><argument_list pos:line="47" pos:column="19">(<argument><expr><name pos:line="47" pos:column="20">p<pos:position pos:line="47" pos:column="21"/></name> <operator pos:line="47" pos:column="22">+<pos:position pos:line="47" pos:column="23"/></operator> <literal type="number" pos:line="47" pos:column="24">3<pos:position pos:line="47" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="27"/></expr_stmt>		<comment type="block" pos:line="47" pos:column="41">/* lowercase hostname */</comment>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">port<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">==<pos:position pos:line="49" pos:column="16"/></operator> <operator pos:line="49" pos:column="17">-<pos:position pos:line="49" pos:column="18"/></operator><literal type="number" pos:line="49" pos:column="18">1<pos:position pos:line="49" pos:column="19"/></literal></expr>)<pos:position pos:line="49" pos:column="20"/></condition><then pos:line="49" pos:column="20"> <block pos:line="49" pos:column="21">{
        <expr_stmt><expr><name pos:line="50" pos:column="9">port<pos:position pos:line="50" pos:column="13"/></name> <operator pos:line="50" pos:column="14">=<pos:position pos:line="50" pos:column="15"/></operator> <call><name pos:line="50" pos:column="16">apr_uri_port_of_scheme<pos:position pos:line="50" pos:column="38"/></name><argument_list pos:line="50" pos:column="38">(<argument><expr><name pos:line="50" pos:column="39">scheme<pos:position pos:line="50" pos:column="45"/></name></expr></argument>)<pos:position pos:line="50" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="53" pos:column="5">new<pos:position pos:line="53" pos:column="8"/></operator> <operator pos:line="53" pos:column="9">=<pos:position pos:line="53" pos:column="10"/></operator> <call><name pos:line="53" pos:column="11">apr_array_push<pos:position pos:line="53" pos:column="25"/></name><argument_list pos:line="53" pos:column="25">(<argument><expr><name><name pos:line="53" pos:column="26">conf<pos:position pos:line="53" pos:column="30"/></name><operator pos:line="53" pos:column="30">-&gt;<pos:position pos:line="53" pos:column="35"/></operator><name pos:line="53" pos:column="32">proxies<pos:position pos:line="53" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="53" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="54" pos:column="5">new<pos:position pos:line="54" pos:column="8"/></operator><operator pos:line="54" pos:column="8">-&gt;<pos:position pos:line="54" pos:column="13"/></operator><name pos:line="54" pos:column="10">scheme<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">=<pos:position pos:line="54" pos:column="18"/></operator> <name pos:line="54" pos:column="19">f<pos:position pos:line="54" pos:column="20"/></name></expr>;<pos:position pos:line="54" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="55" pos:column="5">new<pos:position pos:line="55" pos:column="8"/></operator><operator pos:line="55" pos:column="8">-&gt;<pos:position pos:line="55" pos:column="13"/></operator><name pos:line="55" pos:column="10">protocol<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator> <name pos:line="55" pos:column="21">r<pos:position pos:line="55" pos:column="22"/></name></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="56" pos:column="5">new<pos:position pos:line="56" pos:column="8"/></operator><operator pos:line="56" pos:column="8">-&gt;<pos:position pos:line="56" pos:column="13"/></operator><name pos:line="56" pos:column="10">hostname<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <name pos:line="56" pos:column="21">p<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">+<pos:position pos:line="56" pos:column="24"/></operator> <literal type="number" pos:line="56" pos:column="25">3<pos:position pos:line="56" pos:column="26"/></literal></expr>;<pos:position pos:line="56" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="57" pos:column="5">new<pos:position pos:line="57" pos:column="8"/></operator><operator pos:line="57" pos:column="8">-&gt;<pos:position pos:line="57" pos:column="13"/></operator><name pos:line="57" pos:column="10">port<pos:position pos:line="57" pos:column="14"/></name> <operator pos:line="57" pos:column="15">=<pos:position pos:line="57" pos:column="16"/></operator> <name pos:line="57" pos:column="17">port<pos:position pos:line="57" pos:column="21"/></name></expr>;<pos:position pos:line="57" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="58" pos:column="5">new<pos:position pos:line="58" pos:column="8"/></operator><operator pos:line="58" pos:column="8">-&gt;<pos:position pos:line="58" pos:column="13"/></operator><name pos:line="58" pos:column="10">regexp<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <name pos:line="58" pos:column="19">reg<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="59" pos:column="5">new<pos:position pos:line="59" pos:column="8"/></operator><operator pos:line="59" pos:column="8">-&gt;<pos:position pos:line="59" pos:column="13"/></operator><name pos:line="59" pos:column="10">use_regex<pos:position pos:line="59" pos:column="19"/></name> <operator pos:line="59" pos:column="20">=<pos:position pos:line="59" pos:column="21"/></operator> <name pos:line="59" pos:column="22">regex<pos:position pos:line="59" pos:column="27"/></name></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>
    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">NULL<pos:position pos:line="60" pos:column="16"/></name></expr>;<pos:position pos:line="60" pos:column="17"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
