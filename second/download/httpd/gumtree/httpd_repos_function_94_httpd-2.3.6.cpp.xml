<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_94_httpd-2.3.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">open_postfile<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><specifier pos:line="1" pos:column="35">const<pos:position pos:line="1" pos:column="40"/></specifier> <name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">pfile<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="53"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_file_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">postfd<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_finfo_t<pos:position pos:line="4" pos:column="16"/></name></type> <name pos:line="4" pos:column="17">finfo<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">errmsg<pos:position pos:line="6" pos:column="16"/></name><index pos:line="6" pos:column="16">[<expr><literal type="number" pos:line="6" pos:column="17">120<pos:position pos:line="6" pos:column="20"/></literal></expr>]<pos:position pos:line="6" pos:column="21"/></index></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">rv<pos:position pos:line="8" pos:column="7"/></name> <operator pos:line="8" pos:column="8">=<pos:position pos:line="8" pos:column="9"/></operator> <call><name pos:line="8" pos:column="10">apr_file_open<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><operator pos:line="8" pos:column="24">&amp;<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="25">postfd<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="33">pfile<pos:position pos:line="8" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="40">APR_READ<pos:position pos:line="8" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="50">APR_OS_DEFAULT<pos:position pos:line="8" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="66">cntxt<pos:position pos:line="8" pos:column="71"/></name></expr></argument>)<pos:position pos:line="8" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="73"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">rv<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">!=<pos:position pos:line="9" pos:column="14"/></operator> <name pos:line="9" pos:column="15">APR_SUCCESS<pos:position pos:line="9" pos:column="26"/></name></expr>)<pos:position pos:line="9" pos:column="27"/></condition><then pos:line="9" pos:column="27"> <block pos:line="9" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">fprintf<pos:position pos:line="10" pos:column="16"/></name><argument_list pos:line="10" pos:column="16">(<argument><expr><name pos:line="10" pos:column="17">stderr<pos:position pos:line="10" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="25">"ab: Could not open POST data file (%s): %s\n"<pos:position pos:line="10" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="10" pos:column="73">pfile<pos:position pos:line="10" pos:column="78"/></name></expr></argument>,
                <argument><expr><call><name pos:line="11" pos:column="17">apr_strerror<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">rv<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="34">errmsg<pos:position pos:line="11" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="42">sizeof <name pos:line="11" pos:column="49">errmsg<pos:position pos:line="11" pos:column="55"/></name></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt>
        <return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">rv<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="15" pos:column="5">rv<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <call><name pos:line="15" pos:column="10">apr_file_info_get<pos:position pos:line="15" pos:column="27"/></name><argument_list pos:line="15" pos:column="27">(<argument><expr><operator pos:line="15" pos:column="28">&amp;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="29">finfo<pos:position pos:line="15" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="36">APR_FINFO_NORM<pos:position pos:line="15" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="52">postfd<pos:position pos:line="15" pos:column="58"/></name></expr></argument>)<pos:position pos:line="15" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="60"/></expr_stmt>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">rv<pos:position pos:line="16" pos:column="11"/></name> <operator pos:line="16" pos:column="12">!=<pos:position pos:line="16" pos:column="14"/></operator> <name pos:line="16" pos:column="15">APR_SUCCESS<pos:position pos:line="16" pos:column="26"/></name></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27"> <block pos:line="16" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">fprintf<pos:position pos:line="17" pos:column="16"/></name><argument_list pos:line="17" pos:column="16">(<argument><expr><name pos:line="17" pos:column="17">stderr<pos:position pos:line="17" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="17" pos:column="25">"ab: Could not stat POST data file (%s): %s\n"<pos:position pos:line="17" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="17" pos:column="73">pfile<pos:position pos:line="17" pos:column="78"/></name></expr></argument>,
                <argument><expr><call><name pos:line="18" pos:column="17">apr_strerror<pos:position pos:line="18" pos:column="29"/></name><argument_list pos:line="18" pos:column="29">(<argument><expr><name pos:line="18" pos:column="30">rv<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="34">errmsg<pos:position pos:line="18" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="18" pos:column="42">sizeof <name pos:line="18" pos:column="49">errmsg<pos:position pos:line="18" pos:column="55"/></name></sizeof></expr></argument>)<pos:position pos:line="18" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="18" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="58"/></expr_stmt>
        <return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">rv<pos:position pos:line="19" pos:column="18"/></name></expr>;<pos:position pos:line="19" pos:column="19"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="21" pos:column="5">postlen<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <operator pos:line="21" pos:column="15">(<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">apr_size_t<pos:position pos:line="21" pos:column="26"/></name><operator pos:line="21" pos:column="26">)<pos:position pos:line="21" pos:column="27"/></operator><name><name pos:line="21" pos:column="27">finfo<pos:position pos:line="21" pos:column="32"/></name><operator pos:line="21" pos:column="32">.<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="33">size<pos:position pos:line="21" pos:column="37"/></name></name></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">postdata<pos:position pos:line="22" pos:column="13"/></name> <operator pos:line="22" pos:column="14">=<pos:position pos:line="22" pos:column="15"/></operator> <call><name pos:line="22" pos:column="16">malloc<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">(<argument><expr><name pos:line="22" pos:column="23">postlen<pos:position pos:line="22" pos:column="30"/></name></expr></argument>)<pos:position pos:line="22" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="32"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">postdata<pos:position pos:line="23" pos:column="18"/></name></expr>)<pos:position pos:line="23" pos:column="19"/></condition><then pos:line="23" pos:column="19"> <block pos:line="23" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">fprintf<pos:position pos:line="24" pos:column="16"/></name><argument_list pos:line="24" pos:column="16">(<argument><expr><name pos:line="24" pos:column="17">stderr<pos:position pos:line="24" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="25">"ab: Could not allocate POST data buffer\n"<pos:position pos:line="24" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="70"/></expr_stmt>
        <return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">APR_ENOMEM<pos:position pos:line="25" pos:column="26"/></name></expr>;<pos:position pos:line="25" pos:column="27"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="27" pos:column="5">rv<pos:position pos:line="27" pos:column="7"/></name> <operator pos:line="27" pos:column="8">=<pos:position pos:line="27" pos:column="9"/></operator> <call><name pos:line="27" pos:column="10">apr_file_read_full<pos:position pos:line="27" pos:column="28"/></name><argument_list pos:line="27" pos:column="28">(<argument><expr><name pos:line="27" pos:column="29">postfd<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">postdata<pos:position pos:line="27" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="47">postlen<pos:position pos:line="27" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="56">NULL<pos:position pos:line="27" pos:column="60"/></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="62"/></expr_stmt>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">rv<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">!=<pos:position pos:line="28" pos:column="14"/></operator> <name pos:line="28" pos:column="15">APR_SUCCESS<pos:position pos:line="28" pos:column="26"/></name></expr>)<pos:position pos:line="28" pos:column="27"/></condition><then pos:line="28" pos:column="27"> <block pos:line="28" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">fprintf<pos:position pos:line="29" pos:column="16"/></name><argument_list pos:line="29" pos:column="16">(<argument><expr><name pos:line="29" pos:column="17">stderr<pos:position pos:line="29" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="25">"ab: Could not read POST data file: %s\n"<pos:position pos:line="29" pos:column="66"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="30" pos:column="17">apr_strerror<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name pos:line="30" pos:column="30">rv<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="34">errmsg<pos:position pos:line="30" pos:column="40"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="42">sizeof <name pos:line="30" pos:column="49">errmsg<pos:position pos:line="30" pos:column="55"/></name></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="30" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="58"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">rv<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">apr_file_close<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><name pos:line="33" pos:column="20">postfd<pos:position pos:line="33" pos:column="26"/></name></expr></argument>)<pos:position pos:line="33" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>
    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">APR_SUCCESS<pos:position pos:line="34" pos:column="23"/></name></expr>;<pos:position pos:line="34" pos:column="24"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
