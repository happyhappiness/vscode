<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2924_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">conn_var_fn<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">ap_expr_eval_ctx_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">ctx<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">void<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">data<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">index<pos:position pos:line="3" pos:column="14"/></name> <init pos:line="3" pos:column="15">= <expr><operator pos:line="3" pos:column="17">(<pos:position pos:line="3" pos:column="18"/></operator><operator pos:line="3" pos:column="18">(<pos:position pos:line="3" pos:column="19"/></operator><specifier pos:line="3" pos:column="19">const<pos:position pos:line="3" pos:column="24"/></specifier> <name pos:line="3" pos:column="25">char<pos:position pos:line="3" pos:column="29"/></name> <operator pos:line="3" pos:column="30">*<pos:position pos:line="3" pos:column="31"/></operator><operator pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></operator><operator pos:line="3" pos:column="32">)<pos:position pos:line="3" pos:column="33"/></operator><name pos:line="3" pos:column="33">data<pos:position pos:line="3" pos:column="37"/></name> <operator pos:line="3" pos:column="38">-<pos:position pos:line="3" pos:column="39"/></operator> <name pos:line="3" pos:column="40">conn_var_names<pos:position pos:line="3" pos:column="54"/></name><operator pos:line="3" pos:column="54">)<pos:position pos:line="3" pos:column="55"/></operator></expr></init></decl>;<pos:position pos:line="3" pos:column="56"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">conn_rec<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">c<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name><name pos:line="4" pos:column="19">ctx<pos:position pos:line="4" pos:column="22"/></name><operator pos:line="4" pos:column="22">-&gt;<pos:position pos:line="4" pos:column="27"/></operator><name pos:line="4" pos:column="24">c<pos:position pos:line="4" pos:column="25"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="26"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">c<pos:position pos:line="5" pos:column="11"/></name></expr>)<pos:position pos:line="5" pos:column="12"/></condition><then pos:line="5" pos:column="12">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><literal type="string" pos:line="6" pos:column="16">""<pos:position pos:line="6" pos:column="18"/></literal></expr>;<pos:position pos:line="6" pos:column="19"/></return></block></then></if>

    <switch pos:line="8" pos:column="5">switch <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">index<pos:position pos:line="8" pos:column="18"/></name></expr>)<pos:position pos:line="8" pos:column="19"/></condition> <block pos:line="8" pos:column="20">{
    <case pos:line="9" pos:column="5">case <expr><literal type="number" pos:line="9" pos:column="10">0<pos:position pos:line="9" pos:column="11"/></literal></expr>:<pos:position pos:line="9" pos:column="12"/></case>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">is_https<pos:position pos:line="10" pos:column="21"/></name> <operator pos:line="10" pos:column="22">&amp;&amp;<pos:position pos:line="10" pos:column="32"/></operator> <call><name pos:line="10" pos:column="25">is_https<pos:position pos:line="10" pos:column="33"/></name><argument_list pos:line="10" pos:column="33">(<argument><expr><name pos:line="10" pos:column="34">c<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="37"/></condition><then pos:line="10" pos:column="37">
            <block type="pseudo"><return pos:line="11" pos:column="13">return <expr><literal type="string" pos:line="11" pos:column="20">"on"<pos:position pos:line="11" pos:column="24"/></literal></expr>;<pos:position pos:line="11" pos:column="25"/></return></block></then>
        <else pos:line="12" pos:column="9">else
            <block type="pseudo"><return pos:line="13" pos:column="13">return <expr><literal type="string" pos:line="13" pos:column="20">"off"<pos:position pos:line="13" pos:column="25"/></literal></expr>;<pos:position pos:line="13" pos:column="26"/></return></block></else></if>
    <case pos:line="14" pos:column="5">case <expr><literal type="number" pos:line="14" pos:column="10">1<pos:position pos:line="14" pos:column="11"/></literal></expr>:<pos:position pos:line="14" pos:column="12"/></case>
<cpp:if pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">if<pos:position pos:line="15" pos:column="4"/></cpp:directive> <expr><name pos:line="15" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="15" pos:column="18"/></name></expr></cpp:if>
        <block pos:line="16" pos:column="9">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">apr_sockaddr_t<pos:position pos:line="17" pos:column="27"/></name> <modifier pos:line="17" pos:column="28">*<pos:position pos:line="17" pos:column="29"/></modifier></type><name pos:line="17" pos:column="29">addr<pos:position pos:line="17" pos:column="33"/></name> <init pos:line="17" pos:column="34">= <expr><name><name pos:line="17" pos:column="36">c<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">-&gt;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="39">client_addr<pos:position pos:line="17" pos:column="50"/></name></name></expr></init></decl>;<pos:position pos:line="17" pos:column="51"/></decl_stmt>
            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><name><name pos:line="18" pos:column="17">addr<pos:position pos:line="18" pos:column="21"/></name><operator pos:line="18" pos:column="21">-&gt;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="23">family<pos:position pos:line="18" pos:column="29"/></name></name> <operator pos:line="18" pos:column="30">==<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">AF_INET6<pos:position pos:line="18" pos:column="41"/></name>
                <operator pos:line="19" pos:column="17">&amp;&amp;<pos:position pos:line="19" pos:column="27"/></operator> <operator pos:line="19" pos:column="20">!<pos:position pos:line="19" pos:column="21"/></operator><call><name pos:line="19" pos:column="21">IN6_IS_ADDR_V4MAPPED<pos:position pos:line="19" pos:column="41"/></name><argument_list pos:line="19" pos:column="41">(<argument><expr><operator pos:line="19" pos:column="42">(<pos:position pos:line="19" pos:column="43"/></operator>struct <name pos:line="19" pos:column="50">in6_addr<pos:position pos:line="19" pos:column="58"/></name> <operator pos:line="19" pos:column="59">*<pos:position pos:line="19" pos:column="60"/></operator><operator pos:line="19" pos:column="60">)<pos:position pos:line="19" pos:column="61"/></operator><name><name pos:line="19" pos:column="61">addr<pos:position pos:line="19" pos:column="65"/></name><operator pos:line="19" pos:column="65">-&gt;<pos:position pos:line="19" pos:column="70"/></operator><name pos:line="19" pos:column="67">ipaddr_ptr<pos:position pos:line="19" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="78"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="79"/></condition><then pos:line="19" pos:column="79">
                <block type="pseudo"><return pos:line="20" pos:column="17">return <expr><literal type="string" pos:line="20" pos:column="24">"on"<pos:position pos:line="20" pos:column="28"/></literal></expr>;<pos:position pos:line="20" pos:column="29"/></return></block></then>
            <else pos:line="21" pos:column="13">else
                <block type="pseudo"><return pos:line="22" pos:column="17">return <expr><literal type="string" pos:line="22" pos:column="24">"off"<pos:position pos:line="22" pos:column="29"/></literal></expr>;<pos:position pos:line="22" pos:column="30"/></return></block></else></if>
        }<pos:position pos:line="23" pos:column="10"/></block>
<cpp:else pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">else<pos:position pos:line="24" pos:column="6"/></cpp:directive></cpp:else>
        <return pos:line="25" pos:column="9">return <expr><literal type="string" pos:line="25" pos:column="16">"off"<pos:position pos:line="25" pos:column="21"/></literal></expr>;<pos:position pos:line="25" pos:column="22"/></return>
<cpp:endif pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">endif<pos:position pos:line="26" pos:column="7"/></cpp:directive></cpp:endif>
    <case pos:line="27" pos:column="5">case <expr><literal type="number" pos:line="27" pos:column="10">2<pos:position pos:line="27" pos:column="11"/></literal></expr>:<pos:position pos:line="27" pos:column="12"/></case>
        <return pos:line="28" pos:column="9">return <expr><name><name pos:line="28" pos:column="16">c<pos:position pos:line="28" pos:column="17"/></name><operator pos:line="28" pos:column="17">-&gt;<pos:position pos:line="28" pos:column="22"/></operator><name pos:line="28" pos:column="19">log_id<pos:position pos:line="28" pos:column="25"/></name></name></expr>;<pos:position pos:line="28" pos:column="26"/></return>
    <case pos:line="29" pos:column="5">case <expr><literal type="number" pos:line="29" pos:column="10">3<pos:position pos:line="29" pos:column="11"/></literal></expr>:<pos:position pos:line="29" pos:column="12"/></case>
        <return pos:line="30" pos:column="9">return <expr><name><name pos:line="30" pos:column="16">c<pos:position pos:line="30" pos:column="17"/></name><operator pos:line="30" pos:column="17">-&gt;<pos:position pos:line="30" pos:column="22"/></operator><name pos:line="30" pos:column="19">client_ip<pos:position pos:line="30" pos:column="28"/></name></name></expr>;<pos:position pos:line="30" pos:column="29"/></return>
    <default pos:line="31" pos:column="5">default:<pos:position pos:line="31" pos:column="13"/></default>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">ap_assert<pos:position pos:line="32" pos:column="18"/></name><argument_list pos:line="32" pos:column="18">(<argument><expr><literal type="number" pos:line="32" pos:column="19">0<pos:position pos:line="32" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">NULL<pos:position pos:line="33" pos:column="20"/></name></expr>;<pos:position pos:line="33" pos:column="21"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></switch>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
