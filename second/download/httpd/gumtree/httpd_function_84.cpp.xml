<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_84.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">create_entity<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">cache_handle_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">h<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">request_rec<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">r<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
                         <parameter><decl><type><specifier pos:line="2" pos:column="26">const<pos:position pos:line="2" pos:column="31"/></specifier> <name pos:line="2" pos:column="32">char<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">type<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, 
                         <parameter><decl><type><specifier pos:line="3" pos:column="26">const<pos:position pos:line="3" pos:column="31"/></specifier> <name pos:line="3" pos:column="32">char<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">key<pos:position pos:line="3" pos:column="41"/></name></decl></parameter>, 
                         <parameter><decl><type><name pos:line="4" pos:column="26">apr_off_t<pos:position pos:line="4" pos:column="35"/></name></type> <name pos:line="4" pos:column="36">len<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="40"/></parameter_list> 
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">cache_object_t<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">obj<pos:position pos:line="6" pos:column="24"/></name></decl>, <modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="27">tmp_obj<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">mem_cache_object_t<pos:position pos:line="7" pos:column="23"/></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">mobj<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">cache_type_e<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">type_e<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_size_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">key_len<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">strcasecmp<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">type<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="27">"mem"<pos:position pos:line="11" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="34"/></condition><then pos:line="11" pos:column="34"> <block pos:line="11" pos:column="35">{
        <expr_stmt><expr><name pos:line="12" pos:column="9">type_e<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">=<pos:position pos:line="12" pos:column="17"/></operator> <name pos:line="12" pos:column="18">CACHE_TYPE_HEAP<pos:position pos:line="12" pos:column="33"/></name></expr>;<pos:position pos:line="12" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then> 
    <elseif pos:line="14" pos:column="5">else <if pos:line="14" pos:column="10">if <condition pos:line="14" pos:column="13">(<expr><operator pos:line="14" pos:column="14">!<pos:position pos:line="14" pos:column="15"/></operator><call><name pos:line="14" pos:column="15">strcasecmp<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">type<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="32">"fd"<pos:position pos:line="14" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="38"/></condition><then pos:line="14" pos:column="38"> <block pos:line="14" pos:column="39">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">type_e<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">=<pos:position pos:line="15" pos:column="17"/></operator> <name pos:line="15" pos:column="18">CACHE_TYPE_FILE<pos:position pos:line="15" pos:column="33"/></name></expr>;<pos:position pos:line="15" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if></elseif>
    <else pos:line="17" pos:column="5">else <block pos:line="17" pos:column="10">{
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">DECLINED<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="21" pos:column="5">/* In principle, we should be able to dispense with the cache_size checks
     * when caching open file descriptors.  However, code in cache_insert() and 
     * other places does not make the distinction whether a file's content or
     * descriptor is being cached. For now, just do all the same size checks
     * regardless of what we are caching.
     */</comment>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name><name pos:line="27" pos:column="9">len<pos:position pos:line="27" pos:column="12"/></name> <argument_list type="generic" pos:line="27" pos:column="13">&lt; <argument><expr><name><name pos:line="27" pos:column="15">sconf<pos:position pos:line="27" pos:column="20"/></name><operator pos:line="27" pos:column="20">-&gt;<pos:position pos:line="27" pos:column="25"/></operator><name pos:line="27" pos:column="22">min_cache_object_size<pos:position pos:line="27" pos:column="43"/></name></name> <operator pos:line="27" pos:column="44">||<pos:position pos:line="27" pos:column="46"/></operator> 
        <name pos:line="28" pos:column="9">len<pos:position pos:line="28" pos:column="12"/></name></expr></argument> &gt;<pos:position pos:line="28" pos:column="17"/></argument_list></name> <name><name pos:line="28" pos:column="15">sconf<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">max_cache_object_size<pos:position pos:line="28" pos:column="43"/></name></name></expr>)<pos:position pos:line="28" pos:column="44"/></condition><then pos:line="28" pos:column="44"> <block pos:line="28" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">ap_log_error<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">APLOG_MARK<pos:position pos:line="29" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="34">APLOG_DEBUG<pos:position pos:line="29" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="47">0<pos:position pos:line="29" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="50">r<pos:position pos:line="29" pos:column="51"/></name><operator pos:line="29" pos:column="51">-&gt;<pos:position pos:line="29" pos:column="56"/></operator><name pos:line="29" pos:column="53">server<pos:position pos:line="29" pos:column="59"/></name></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="30" pos:column="22">"cache_mem: URL %s failed the size check, "<pos:position pos:line="30" pos:column="65"/></literal>
                     <literal type="string" pos:line="31" pos:column="22">"or is incomplete"<pos:position pos:line="31" pos:column="40"/></literal></expr></argument>, 
                     <argument><expr><name pos:line="32" pos:column="22">key<pos:position pos:line="32" pos:column="25"/></name></expr></argument>)<pos:position pos:line="32" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="27"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">DECLINED<pos:position pos:line="33" pos:column="24"/></name></expr>;<pos:position pos:line="33" pos:column="25"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">type_e<pos:position pos:line="35" pos:column="15"/></name> <operator pos:line="35" pos:column="16">==<pos:position pos:line="35" pos:column="18"/></operator> <name pos:line="35" pos:column="19">CACHE_TYPE_FILE<pos:position pos:line="35" pos:column="34"/></name></expr>)<pos:position pos:line="35" pos:column="35"/></condition><then pos:line="35" pos:column="35"> <block pos:line="35" pos:column="36">{
        <comment type="block" pos:line="36" pos:column="9">/* CACHE_TYPE_FILE is only valid for local content handled by the 
         * default handler. Need a better way to check if the file is
         * local or not.
         */</comment>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><operator pos:line="40" pos:column="13">!<pos:position pos:line="40" pos:column="14"/></operator><name><name pos:line="40" pos:column="14">r<pos:position pos:line="40" pos:column="15"/></name><operator pos:line="40" pos:column="15">-&gt;<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="17">filename<pos:position pos:line="40" pos:column="25"/></name></name></expr>)<pos:position pos:line="40" pos:column="26"/></condition><then pos:line="40" pos:column="26"> <block pos:line="40" pos:column="27">{
            <return pos:line="41" pos:column="13">return <expr><name pos:line="41" pos:column="20">DECLINED<pos:position pos:line="41" pos:column="28"/></name></expr>;<pos:position pos:line="41" pos:column="29"/></return>
        }<pos:position pos:line="42" pos:column="10"/></block></then></if>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="45" pos:column="5">/* Allocate and initialize cache_object_t */</comment>
    <expr_stmt><expr><name pos:line="46" pos:column="5">obj<pos:position pos:line="46" pos:column="8"/></name> <operator pos:line="46" pos:column="9">=<pos:position pos:line="46" pos:column="10"/></operator> <call><name pos:line="46" pos:column="11">calloc<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">(<argument><expr><literal type="number" pos:line="46" pos:column="18">1<pos:position pos:line="46" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="21">sizeof<argument_list pos:line="46" pos:column="27">(<argument><expr><operator pos:line="46" pos:column="28">*<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="29">obj<pos:position pos:line="46" pos:column="32"/></name></expr></argument>)<pos:position pos:line="46" pos:column="33"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="46" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="35"/></expr_stmt>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><operator pos:line="47" pos:column="9">!<pos:position pos:line="47" pos:column="10"/></operator><name pos:line="47" pos:column="10">obj<pos:position pos:line="47" pos:column="13"/></name></expr>)<pos:position pos:line="47" pos:column="14"/></condition><then pos:line="47" pos:column="14"> <block pos:line="47" pos:column="15">{
        <return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">DECLINED<pos:position pos:line="48" pos:column="24"/></name></expr>;<pos:position pos:line="48" pos:column="25"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="50" pos:column="5">key_len<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">=<pos:position pos:line="50" pos:column="14"/></operator> <call><name pos:line="50" pos:column="15">strlen<pos:position pos:line="50" pos:column="21"/></name><argument_list pos:line="50" pos:column="21">(<argument><expr><name pos:line="50" pos:column="22">key<pos:position pos:line="50" pos:column="25"/></name></expr></argument>)<pos:position pos:line="50" pos:column="26"/></argument_list></call> <operator pos:line="50" pos:column="27">+<pos:position pos:line="50" pos:column="28"/></operator> <literal type="number" pos:line="50" pos:column="29">1<pos:position pos:line="50" pos:column="30"/></literal></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="51" pos:column="5">obj<pos:position pos:line="51" pos:column="8"/></name><operator pos:line="51" pos:column="8">-&gt;<pos:position pos:line="51" pos:column="13"/></operator><name pos:line="51" pos:column="10">key<pos:position pos:line="51" pos:column="13"/></name></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <call><name pos:line="51" pos:column="16">malloc<pos:position pos:line="51" pos:column="22"/></name><argument_list pos:line="51" pos:column="22">(<argument><expr><name pos:line="51" pos:column="23">key_len<pos:position pos:line="51" pos:column="30"/></name></expr></argument>)<pos:position pos:line="51" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="32"/></expr_stmt>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><operator pos:line="52" pos:column="9">!<pos:position pos:line="52" pos:column="10"/></operator><name><name pos:line="52" pos:column="10">obj<pos:position pos:line="52" pos:column="13"/></name><operator pos:line="52" pos:column="13">-&gt;<pos:position pos:line="52" pos:column="18"/></operator><name pos:line="52" pos:column="15">key<pos:position pos:line="52" pos:column="18"/></name></name></expr>)<pos:position pos:line="52" pos:column="19"/></condition><then pos:line="52" pos:column="19"> <block pos:line="52" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="53" pos:column="9">cleanup_cache_object<pos:position pos:line="53" pos:column="29"/></name><argument_list pos:line="53" pos:column="29">(<argument><expr><name pos:line="53" pos:column="30">obj<pos:position pos:line="53" pos:column="33"/></name></expr></argument>)<pos:position pos:line="53" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>
        <return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">DECLINED<pos:position pos:line="54" pos:column="24"/></name></expr>;<pos:position pos:line="54" pos:column="25"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">memcpy<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><name><name pos:line="56" pos:column="12">obj<pos:position pos:line="56" pos:column="15"/></name><operator pos:line="56" pos:column="15">-&gt;<pos:position pos:line="56" pos:column="20"/></operator><name pos:line="56" pos:column="17">key<pos:position pos:line="56" pos:column="20"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="22">key<pos:position pos:line="56" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="27">key_len<pos:position pos:line="56" pos:column="34"/></name></expr></argument>)<pos:position pos:line="56" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="57" pos:column="5">obj<pos:position pos:line="57" pos:column="8"/></name><operator pos:line="57" pos:column="8">-&gt;<pos:position pos:line="57" pos:column="13"/></operator><name pos:line="57" pos:column="10">info<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">.<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="15">len<pos:position pos:line="57" pos:column="18"/></name></name> <operator pos:line="57" pos:column="19">=<pos:position pos:line="57" pos:column="20"/></operator> <name pos:line="57" pos:column="21">len<pos:position pos:line="57" pos:column="24"/></name></expr>;<pos:position pos:line="57" pos:column="25"/></expr_stmt>


    <comment type="block" pos:line="60" pos:column="5">/* Allocate and init mem_cache_object_t */</comment>
    <expr_stmt><expr><name pos:line="61" pos:column="5">mobj<pos:position pos:line="61" pos:column="9"/></name> <operator pos:line="61" pos:column="10">=<pos:position pos:line="61" pos:column="11"/></operator> <call><name pos:line="61" pos:column="12">calloc<pos:position pos:line="61" pos:column="18"/></name><argument_list pos:line="61" pos:column="18">(<argument><expr><literal type="number" pos:line="61" pos:column="19">1<pos:position pos:line="61" pos:column="20"/></literal></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="22">sizeof<argument_list pos:line="61" pos:column="28">(<argument><expr><operator pos:line="61" pos:column="29">*<pos:position pos:line="61" pos:column="30"/></operator><name pos:line="61" pos:column="30">mobj<pos:position pos:line="61" pos:column="34"/></name></expr></argument>)<pos:position pos:line="61" pos:column="35"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="37"/></expr_stmt>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><operator pos:line="62" pos:column="9">!<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">mobj<pos:position pos:line="62" pos:column="14"/></name></expr>)<pos:position pos:line="62" pos:column="15"/></condition><then pos:line="62" pos:column="15"> <block pos:line="62" pos:column="16">{
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">cleanup_cache_object<pos:position pos:line="63" pos:column="29"/></name><argument_list pos:line="63" pos:column="29">(<argument><expr><name pos:line="63" pos:column="30">obj<pos:position pos:line="63" pos:column="33"/></name></expr></argument>)<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
        <return pos:line="64" pos:column="9">return <expr><name pos:line="64" pos:column="16">DECLINED<pos:position pos:line="64" pos:column="24"/></name></expr>;<pos:position pos:line="64" pos:column="25"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="67" pos:column="5">/* Finish initing the cache object */</comment>
<cpp:ifdef pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">ifdef<pos:position pos:line="68" pos:column="7"/></cpp:directive> <name pos:line="68" pos:column="8">USE_ATOMICS<pos:position pos:line="68" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">apr_atomic_set<pos:position pos:line="69" pos:column="19"/></name><argument_list pos:line="69" pos:column="19">(<argument><expr><operator pos:line="69" pos:column="20">&amp;<pos:position pos:line="69" pos:column="25"/></operator><name><name pos:line="69" pos:column="21">obj<pos:position pos:line="69" pos:column="24"/></name><operator pos:line="69" pos:column="24">-&gt;<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="26">refcount<pos:position pos:line="69" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="36">1<pos:position pos:line="69" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="39"/></expr_stmt>
<cpp:else pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">else<pos:position pos:line="70" pos:column="6"/></cpp:directive></cpp:else> 
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">obj<pos:position pos:line="71" pos:column="8"/></name><operator pos:line="71" pos:column="8">-&gt;<pos:position pos:line="71" pos:column="13"/></operator><name pos:line="71" pos:column="10">refcount<pos:position pos:line="71" pos:column="18"/></name></name> <operator pos:line="71" pos:column="19">=<pos:position pos:line="71" pos:column="20"/></operator> <literal type="number" pos:line="71" pos:column="21">1<pos:position pos:line="71" pos:column="22"/></literal></expr>;<pos:position pos:line="71" pos:column="23"/></expr_stmt>
<cpp:endif pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">endif<pos:position pos:line="72" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">mobj<pos:position pos:line="73" pos:column="9"/></name><operator pos:line="73" pos:column="9">-&gt;<pos:position pos:line="73" pos:column="14"/></operator><name pos:line="73" pos:column="11">total_refs<pos:position pos:line="73" pos:column="21"/></name></name> <operator pos:line="73" pos:column="22">=<pos:position pos:line="73" pos:column="23"/></operator> <literal type="number" pos:line="73" pos:column="24">1<pos:position pos:line="73" pos:column="25"/></literal></expr>;<pos:position pos:line="73" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="74" pos:column="5">obj<pos:position pos:line="74" pos:column="8"/></name><operator pos:line="74" pos:column="8">-&gt;<pos:position pos:line="74" pos:column="13"/></operator><name pos:line="74" pos:column="10">complete<pos:position pos:line="74" pos:column="18"/></name></name> <operator pos:line="74" pos:column="19">=<pos:position pos:line="74" pos:column="20"/></operator> <literal type="number" pos:line="74" pos:column="21">0<pos:position pos:line="74" pos:column="22"/></literal></expr>;<pos:position pos:line="74" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="75" pos:column="5">obj<pos:position pos:line="75" pos:column="8"/></name><operator pos:line="75" pos:column="8">-&gt;<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="10">cleanup<pos:position pos:line="75" pos:column="17"/></name></name> <operator pos:line="75" pos:column="18">=<pos:position pos:line="75" pos:column="19"/></operator> <literal type="number" pos:line="75" pos:column="20">0<pos:position pos:line="75" pos:column="21"/></literal></expr>;<pos:position pos:line="75" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="76" pos:column="5">obj<pos:position pos:line="76" pos:column="8"/></name><operator pos:line="76" pos:column="8">-&gt;<pos:position pos:line="76" pos:column="13"/></operator><name pos:line="76" pos:column="10">vobj<pos:position pos:line="76" pos:column="14"/></name></name> <operator pos:line="76" pos:column="15">=<pos:position pos:line="76" pos:column="16"/></operator> <name pos:line="76" pos:column="17">mobj<pos:position pos:line="76" pos:column="21"/></name></expr>;<pos:position pos:line="76" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="77" pos:column="5">mobj<pos:position pos:line="77" pos:column="9"/></name><operator pos:line="77" pos:column="9">-&gt;<pos:position pos:line="77" pos:column="14"/></operator><name pos:line="77" pos:column="11">m_len<pos:position pos:line="77" pos:column="16"/></name></name> <operator pos:line="77" pos:column="17">=<pos:position pos:line="77" pos:column="18"/></operator> <name pos:line="77" pos:column="19">len<pos:position pos:line="77" pos:column="22"/></name></expr>;<pos:position pos:line="77" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="78" pos:column="5">mobj<pos:position pos:line="78" pos:column="9"/></name><operator pos:line="78" pos:column="9">-&gt;<pos:position pos:line="78" pos:column="14"/></operator><name pos:line="78" pos:column="11">type<pos:position pos:line="78" pos:column="15"/></name></name> <operator pos:line="78" pos:column="16">=<pos:position pos:line="78" pos:column="17"/></operator> <name pos:line="78" pos:column="18">type_e<pos:position pos:line="78" pos:column="24"/></name></expr>;<pos:position pos:line="78" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="80" pos:column="5">/* Place the cache_object_t into the hash table.
     * Note: Perhaps we should wait to put the object in the
     * hash table when the object is complete?  I add the object here to
     * avoid multiple threads attempting to cache the same content only
     * to discover at the very end that only one of them will suceed.
     * Furthermore, adding the cache object to the table at the end could
     * open up a subtle but easy to exploit DoS hole: someone could request 
     * a very large file with multiple requests. Better to detect this here
     * rather than after the cache object has been completely built and
     * initialized...
     * XXX Need a way to insert into the cache w/o such coarse grained locking 
     */</comment>
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name><name pos:line="92" pos:column="9">sconf<pos:position pos:line="92" pos:column="14"/></name><operator pos:line="92" pos:column="14">-&gt;<pos:position pos:line="92" pos:column="19"/></operator><name pos:line="92" pos:column="16">lock<pos:position pos:line="92" pos:column="20"/></name></name></expr>)<pos:position pos:line="92" pos:column="21"/></condition><then pos:line="92" pos:column="21"> <block pos:line="92" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="93" pos:column="30"/></name><argument_list pos:line="93" pos:column="30">(<argument><expr><name><name pos:line="93" pos:column="31">sconf<pos:position pos:line="93" pos:column="36"/></name><operator pos:line="93" pos:column="36">-&gt;<pos:position pos:line="93" pos:column="41"/></operator><name pos:line="93" pos:column="38">lock<pos:position pos:line="93" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="94" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="95" pos:column="5">tmp_obj<pos:position pos:line="95" pos:column="12"/></name> <operator pos:line="95" pos:column="13">=<pos:position pos:line="95" pos:column="14"/></operator> <operator pos:line="95" pos:column="15">(<pos:position pos:line="95" pos:column="16"/></operator><name pos:line="95" pos:column="16">cache_object_t<pos:position pos:line="95" pos:column="30"/></name> <operator pos:line="95" pos:column="31">*<pos:position pos:line="95" pos:column="32"/></operator><operator pos:line="95" pos:column="32">)<pos:position pos:line="95" pos:column="33"/></operator> <call><name pos:line="95" pos:column="34">cache_find<pos:position pos:line="95" pos:column="44"/></name><argument_list pos:line="95" pos:column="44">(<argument><expr><name><name pos:line="95" pos:column="45">sconf<pos:position pos:line="95" pos:column="50"/></name><operator pos:line="95" pos:column="50">-&gt;<pos:position pos:line="95" pos:column="55"/></operator><name pos:line="95" pos:column="52">cache_cache<pos:position pos:line="95" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="65">key<pos:position pos:line="95" pos:column="68"/></name></expr></argument>)<pos:position pos:line="95" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="70"/></expr_stmt>

    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><operator pos:line="97" pos:column="9">!<pos:position pos:line="97" pos:column="10"/></operator><name pos:line="97" pos:column="10">tmp_obj<pos:position pos:line="97" pos:column="17"/></name></expr>)<pos:position pos:line="97" pos:column="18"/></condition><then pos:line="97" pos:column="18"> <block pos:line="97" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">cache_insert<pos:position pos:line="98" pos:column="21"/></name><argument_list pos:line="98" pos:column="21">(<argument><expr><name><name pos:line="98" pos:column="22">sconf<pos:position pos:line="98" pos:column="27"/></name><operator pos:line="98" pos:column="27">-&gt;<pos:position pos:line="98" pos:column="32"/></operator><name pos:line="98" pos:column="29">cache_cache<pos:position pos:line="98" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="42">obj<pos:position pos:line="98" pos:column="45"/></name></expr></argument>)<pos:position pos:line="98" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="47"/></expr_stmt>     
        <expr_stmt><expr><name><name pos:line="99" pos:column="9">sconf<pos:position pos:line="99" pos:column="14"/></name><operator pos:line="99" pos:column="14">-&gt;<pos:position pos:line="99" pos:column="19"/></operator><name pos:line="99" pos:column="16">object_cnt<pos:position pos:line="99" pos:column="26"/></name></name><operator pos:line="99" pos:column="26">++<pos:position pos:line="99" pos:column="28"/></operator></expr>;<pos:position pos:line="99" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="100" pos:column="9">sconf<pos:position pos:line="100" pos:column="14"/></name><operator pos:line="100" pos:column="14">-&gt;<pos:position pos:line="100" pos:column="19"/></operator><name pos:line="100" pos:column="16">cache_size<pos:position pos:line="100" pos:column="26"/></name></name> <operator pos:line="100" pos:column="27">+=<pos:position pos:line="100" pos:column="29"/></operator> <name pos:line="100" pos:column="30">len<pos:position pos:line="100" pos:column="33"/></name></expr>;<pos:position pos:line="100" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>
    <if pos:line="102" pos:column="5">if <condition pos:line="102" pos:column="8">(<expr><name><name pos:line="102" pos:column="9">sconf<pos:position pos:line="102" pos:column="14"/></name><operator pos:line="102" pos:column="14">-&gt;<pos:position pos:line="102" pos:column="19"/></operator><name pos:line="102" pos:column="16">lock<pos:position pos:line="102" pos:column="20"/></name></name></expr>)<pos:position pos:line="102" pos:column="21"/></condition><then pos:line="102" pos:column="21"> <block pos:line="102" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="103" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="103" pos:column="32"/></name><argument_list pos:line="103" pos:column="32">(<argument><expr><name><name pos:line="103" pos:column="33">sconf<pos:position pos:line="103" pos:column="38"/></name><operator pos:line="103" pos:column="38">-&gt;<pos:position pos:line="103" pos:column="43"/></operator><name pos:line="103" pos:column="40">lock<pos:position pos:line="103" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="104" pos:column="6"/></block></then></if>

    <if pos:line="106" pos:column="5">if <condition pos:line="106" pos:column="8">(<expr><name pos:line="106" pos:column="9">tmp_obj<pos:position pos:line="106" pos:column="16"/></name></expr>)<pos:position pos:line="106" pos:column="17"/></condition><then pos:line="106" pos:column="17"> <block pos:line="106" pos:column="18">{
        <comment type="block" pos:line="107" pos:column="9">/* This thread collided with another thread loading the same object
         * into the cache at the same time. Defer to the other thread which 
         * is further along.
         */</comment>
        <expr_stmt><expr><call><name pos:line="111" pos:column="9">cleanup_cache_object<pos:position pos:line="111" pos:column="29"/></name><argument_list pos:line="111" pos:column="29">(<argument><expr><name pos:line="111" pos:column="30">obj<pos:position pos:line="111" pos:column="33"/></name></expr></argument>)<pos:position pos:line="111" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="35"/></expr_stmt>
        <return pos:line="112" pos:column="9">return <expr><name pos:line="112" pos:column="16">DECLINED<pos:position pos:line="112" pos:column="24"/></name></expr>;<pos:position pos:line="112" pos:column="25"/></return>
    }<pos:position pos:line="113" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="115" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="115" pos:column="30"/></name><argument_list pos:line="115" pos:column="30">(<argument><expr><name><name pos:line="115" pos:column="31">r<pos:position pos:line="115" pos:column="32"/></name><operator pos:line="115" pos:column="32">-&gt;<pos:position pos:line="115" pos:column="37"/></operator><name pos:line="115" pos:column="34">pool<pos:position pos:line="115" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="40">obj<pos:position pos:line="115" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="45">decrement_refcount<pos:position pos:line="115" pos:column="63"/></name></expr></argument>, 
                              <argument><expr><name pos:line="116" pos:column="31">apr_pool_cleanup_null<pos:position pos:line="116" pos:column="52"/></name></expr></argument>)<pos:position pos:line="116" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="54"/></expr_stmt>

    <comment type="block" pos:line="118" pos:column="5">/* Populate the cache handle */</comment>
    <expr_stmt><expr><name><name pos:line="119" pos:column="5">h<pos:position pos:line="119" pos:column="6"/></name><operator pos:line="119" pos:column="6">-&gt;<pos:position pos:line="119" pos:column="11"/></operator><name pos:line="119" pos:column="8">cache_obj<pos:position pos:line="119" pos:column="17"/></name></name> <operator pos:line="119" pos:column="18">=<pos:position pos:line="119" pos:column="19"/></operator> <name pos:line="119" pos:column="20">obj<pos:position pos:line="119" pos:column="23"/></name></expr>;<pos:position pos:line="119" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="120" pos:column="5">h<pos:position pos:line="120" pos:column="6"/></name><operator pos:line="120" pos:column="6">-&gt;<pos:position pos:line="120" pos:column="11"/></operator><name pos:line="120" pos:column="8">read_body<pos:position pos:line="120" pos:column="17"/></name></name> <operator pos:line="120" pos:column="18">=<pos:position pos:line="120" pos:column="19"/></operator> <operator pos:line="120" pos:column="20">&amp;<pos:position pos:line="120" pos:column="25"/></operator><name pos:line="120" pos:column="21">read_body<pos:position pos:line="120" pos:column="30"/></name></expr>;<pos:position pos:line="120" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="121" pos:column="5">h<pos:position pos:line="121" pos:column="6"/></name><operator pos:line="121" pos:column="6">-&gt;<pos:position pos:line="121" pos:column="11"/></operator><name pos:line="121" pos:column="8">read_headers<pos:position pos:line="121" pos:column="20"/></name></name> <operator pos:line="121" pos:column="21">=<pos:position pos:line="121" pos:column="22"/></operator> <operator pos:line="121" pos:column="23">&amp;<pos:position pos:line="121" pos:column="28"/></operator><name pos:line="121" pos:column="24">read_headers<pos:position pos:line="121" pos:column="36"/></name></expr>;<pos:position pos:line="121" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="122" pos:column="5">h<pos:position pos:line="122" pos:column="6"/></name><operator pos:line="122" pos:column="6">-&gt;<pos:position pos:line="122" pos:column="11"/></operator><name pos:line="122" pos:column="8">write_body<pos:position pos:line="122" pos:column="18"/></name></name> <operator pos:line="122" pos:column="19">=<pos:position pos:line="122" pos:column="20"/></operator> <operator pos:line="122" pos:column="21">&amp;<pos:position pos:line="122" pos:column="26"/></operator><name pos:line="122" pos:column="22">write_body<pos:position pos:line="122" pos:column="32"/></name></expr>;<pos:position pos:line="122" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="123" pos:column="5">h<pos:position pos:line="123" pos:column="6"/></name><operator pos:line="123" pos:column="6">-&gt;<pos:position pos:line="123" pos:column="11"/></operator><name pos:line="123" pos:column="8">write_headers<pos:position pos:line="123" pos:column="21"/></name></name> <operator pos:line="123" pos:column="22">=<pos:position pos:line="123" pos:column="23"/></operator> <operator pos:line="123" pos:column="24">&amp;<pos:position pos:line="123" pos:column="29"/></operator><name pos:line="123" pos:column="25">write_headers<pos:position pos:line="123" pos:column="38"/></name></expr>;<pos:position pos:line="123" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="124" pos:column="5">h<pos:position pos:line="124" pos:column="6"/></name><operator pos:line="124" pos:column="6">-&gt;<pos:position pos:line="124" pos:column="11"/></operator><name pos:line="124" pos:column="8">remove_entity<pos:position pos:line="124" pos:column="21"/></name></name> <operator pos:line="124" pos:column="22">=<pos:position pos:line="124" pos:column="23"/></operator> <operator pos:line="124" pos:column="24">&amp;<pos:position pos:line="124" pos:column="29"/></operator><name pos:line="124" pos:column="25">remove_entity<pos:position pos:line="124" pos:column="38"/></name></expr>;<pos:position pos:line="124" pos:column="39"/></expr_stmt>

    <return pos:line="126" pos:column="5">return <expr><name pos:line="126" pos:column="12">OK<pos:position pos:line="126" pos:column="14"/></name></expr>;<pos:position pos:line="126" pos:column="15"/></return>
}<pos:position pos:line="127" pos:column="2"/></block></function></unit>
