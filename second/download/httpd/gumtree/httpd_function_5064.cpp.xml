<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5064.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">event_run<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">apr_pool_t<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type> <name pos:line="1" pos:column="35">_pconf<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">apr_pool_t<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type> <name pos:line="1" pos:column="56">plog<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="62">server_rec<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type> <name pos:line="1" pos:column="75">s<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">remaining_children_to_start<pos:position pos:line="3" pos:column="36"/></name></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="5" pos:column="5">ap_log_pid<pos:position pos:line="5" pos:column="15"/></name><argument_list pos:line="5" pos:column="15">(<argument><expr><name pos:line="5" pos:column="16">pconf<pos:position pos:line="5" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="23">ap_pid_fname<pos:position pos:line="5" pos:column="35"/></name></expr></argument>)<pos:position pos:line="5" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="37"/></expr_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">is_graceful<pos:position pos:line="7" pos:column="21"/></name></expr>)<pos:position pos:line="7" pos:column="22"/></condition><then pos:line="7" pos:column="22"> <block pos:line="7" pos:column="23">{
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">ap_run_pre_mpm<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><name><name pos:line="8" pos:column="28">s<pos:position pos:line="8" pos:column="29"/></name><operator pos:line="8" pos:column="29">-&gt;<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="31">process<pos:position pos:line="8" pos:column="38"/></name><operator pos:line="8" pos:column="38">-&gt;<pos:position pos:line="8" pos:column="43"/></operator><name pos:line="8" pos:column="40">pool<pos:position pos:line="8" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="46">SB_SHARED<pos:position pos:line="8" pos:column="55"/></name></expr></argument>)<pos:position pos:line="8" pos:column="56"/></argument_list></call> <operator pos:line="8" pos:column="57">!=<pos:position pos:line="8" pos:column="59"/></operator> <name pos:line="8" pos:column="60">OK<pos:position pos:line="8" pos:column="62"/></name></expr>)<pos:position pos:line="8" pos:column="63"/></condition><then pos:line="8" pos:column="63"> <block pos:line="8" pos:column="64">{
            <expr_stmt><expr><name pos:line="9" pos:column="13">mpm_state<pos:position pos:line="9" pos:column="22"/></name> <operator pos:line="9" pos:column="23">=<pos:position pos:line="9" pos:column="24"/></operator> <name pos:line="9" pos:column="25">AP_MPMQ_STOPPING<pos:position pos:line="9" pos:column="41"/></name></expr>;<pos:position pos:line="9" pos:column="42"/></expr_stmt>
            <return pos:line="10" pos:column="13">return <expr><name pos:line="10" pos:column="20">DONE<pos:position pos:line="10" pos:column="24"/></name></expr>;<pos:position pos:line="10" pos:column="25"/></return>
        }<pos:position pos:line="11" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="12" pos:column="9">/* fix the generation number in the global score; we just got a new,
         * cleared scoreboard
         */</comment>
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">ap_scoreboard_image<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">global<pos:position pos:line="15" pos:column="36"/></name><operator pos:line="15" pos:column="36">-&gt;<pos:position pos:line="15" pos:column="41"/></operator><name pos:line="15" pos:column="38">running_generation<pos:position pos:line="15" pos:column="56"/></name></name> <operator pos:line="15" pos:column="57">=<pos:position pos:line="15" pos:column="58"/></operator> <name pos:line="15" pos:column="59">my_generation<pos:position pos:line="15" pos:column="72"/></name></expr>;<pos:position pos:line="15" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="18" pos:column="5">set_signals<pos:position pos:line="18" pos:column="16"/></name><argument_list pos:line="18" pos:column="16">()<pos:position pos:line="18" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="19"/></expr_stmt>
    <comment type="block" pos:line="19" pos:column="5">/* Don't thrash... */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">max_spare_threads<pos:position pos:line="20" pos:column="26"/></name> <operator pos:line="20" pos:column="27">&lt;<pos:position pos:line="20" pos:column="31"/></operator> <name pos:line="20" pos:column="29">min_spare_threads<pos:position pos:line="20" pos:column="46"/></name> <operator pos:line="20" pos:column="47">+<pos:position pos:line="20" pos:column="48"/></operator> <name pos:line="20" pos:column="49">threads_per_child<pos:position pos:line="20" pos:column="66"/></name></expr>)<pos:position pos:line="20" pos:column="67"/></condition><then pos:line="20" pos:column="67">
        <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="9">max_spare_threads<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">=<pos:position pos:line="21" pos:column="28"/></operator> <name pos:line="21" pos:column="29">min_spare_threads<pos:position pos:line="21" pos:column="46"/></name> <operator pos:line="21" pos:column="47">+<pos:position pos:line="21" pos:column="48"/></operator> <name pos:line="21" pos:column="49">threads_per_child<pos:position pos:line="21" pos:column="66"/></name></expr>;<pos:position pos:line="21" pos:column="67"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="23" pos:column="5">/* If we're doing a graceful_restart then we're going to see a lot
     * of children exiting immediately when we get into the main loop
     * below (because we just sent them AP_SIG_GRACEFUL).  This happens pretty
     * rapidly... and for each one that exits we may start a new one, until
     * there are at least min_spare_threads idle threads, counting across
     * all children.  But we may be permitted to start more children than
     * that, so we'll just keep track of how many we're
     * supposed to start up without the 1 second penalty between each fork.
     */</comment>
    <expr_stmt><expr><name pos:line="32" pos:column="5">remaining_children_to_start<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">=<pos:position pos:line="32" pos:column="34"/></operator> <name pos:line="32" pos:column="35">ap_daemons_to_start<pos:position pos:line="32" pos:column="54"/></name></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">remaining_children_to_start<pos:position pos:line="33" pos:column="36"/></name> <operator pos:line="33" pos:column="37">&gt;<pos:position pos:line="33" pos:column="41"/></operator> <name pos:line="33" pos:column="39">ap_daemons_limit<pos:position pos:line="33" pos:column="55"/></name></expr>)<pos:position pos:line="33" pos:column="56"/></condition><then pos:line="33" pos:column="56"> <block pos:line="33" pos:column="57">{
        <expr_stmt><expr><name pos:line="34" pos:column="9">remaining_children_to_start<pos:position pos:line="34" pos:column="36"/></name> <operator pos:line="34" pos:column="37">=<pos:position pos:line="34" pos:column="38"/></operator> <name pos:line="34" pos:column="39">ap_daemons_limit<pos:position pos:line="34" pos:column="55"/></name></expr>;<pos:position pos:line="34" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">!<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">is_graceful<pos:position pos:line="36" pos:column="21"/></name></expr>)<pos:position pos:line="36" pos:column="22"/></condition><then pos:line="36" pos:column="22"> <block pos:line="36" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">startup_children<pos:position pos:line="37" pos:column="25"/></name><argument_list pos:line="37" pos:column="25">(<argument><expr><name pos:line="37" pos:column="26">remaining_children_to_start<pos:position pos:line="37" pos:column="53"/></name></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name pos:line="38" pos:column="9">remaining_children_to_start<pos:position pos:line="38" pos:column="36"/></name> <operator pos:line="38" pos:column="37">=<pos:position pos:line="38" pos:column="38"/></operator> <literal type="number" pos:line="38" pos:column="39">0<pos:position pos:line="38" pos:column="40"/></literal></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then>
    <else pos:line="40" pos:column="5">else <block pos:line="40" pos:column="10">{
        <comment type="block" pos:line="41" pos:column="9">/* give the system some time to recover before kicking into
         * exponential mode */</comment>
        <expr_stmt><expr><name pos:line="43" pos:column="9">hold_off_on_exponential_spawning<pos:position pos:line="43" pos:column="41"/></name> <operator pos:line="43" pos:column="42">=<pos:position pos:line="43" pos:column="43"/></operator> <literal type="number" pos:line="43" pos:column="44">10<pos:position pos:line="43" pos:column="46"/></literal></expr>;<pos:position pos:line="43" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="46" pos:column="5">ap_log_error<pos:position pos:line="46" pos:column="17"/></name><argument_list pos:line="46" pos:column="17">(<argument><expr><name pos:line="46" pos:column="18">APLOG_MARK<pos:position pos:line="46" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="30">APLOG_NOTICE<pos:position pos:line="46" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="46" pos:column="44">0<pos:position pos:line="46" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">ap_server_conf<pos:position pos:line="46" pos:column="61"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="47" pos:column="18">"%s configured -- resuming normal operations"<pos:position pos:line="47" pos:column="63"/></literal></expr></argument>,
                 <argument><expr><call><name pos:line="48" pos:column="18">ap_get_server_description<pos:position pos:line="48" pos:column="43"/></name><argument_list pos:line="48" pos:column="43">()<pos:position pos:line="48" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="48" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">ap_log_error<pos:position pos:line="49" pos:column="17"/></name><argument_list pos:line="49" pos:column="17">(<argument><expr><name pos:line="49" pos:column="18">APLOG_MARK<pos:position pos:line="49" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="30">APLOG_INFO<pos:position pos:line="49" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="49" pos:column="42">0<pos:position pos:line="49" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="49" pos:column="45">ap_server_conf<pos:position pos:line="49" pos:column="59"/></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="50" pos:column="18">"Server built: %s"<pos:position pos:line="50" pos:column="36"/></literal></expr></argument>, <argument><expr><call><name pos:line="50" pos:column="38">ap_get_server_built<pos:position pos:line="50" pos:column="57"/></name><argument_list pos:line="50" pos:column="57">()<pos:position pos:line="50" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="51" pos:column="5">ap_log_command_line<pos:position pos:line="51" pos:column="24"/></name><argument_list pos:line="51" pos:column="24">(<argument><expr><name pos:line="51" pos:column="25">plog<pos:position pos:line="51" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="31">s<pos:position pos:line="51" pos:column="32"/></name></expr></argument>)<pos:position pos:line="51" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name pos:line="53" pos:column="5">restart_pending<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <name pos:line="53" pos:column="23">shutdown_pending<pos:position pos:line="53" pos:column="39"/></name> <operator pos:line="53" pos:column="40">=<pos:position pos:line="53" pos:column="41"/></operator> <literal type="number" pos:line="53" pos:column="42">0<pos:position pos:line="53" pos:column="43"/></literal></expr>;<pos:position pos:line="53" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="54" pos:column="5">mpm_state<pos:position pos:line="54" pos:column="14"/></name> <operator pos:line="54" pos:column="15">=<pos:position pos:line="54" pos:column="16"/></operator> <name pos:line="54" pos:column="17">AP_MPMQ_RUNNING<pos:position pos:line="54" pos:column="32"/></name></expr>;<pos:position pos:line="54" pos:column="33"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="56" pos:column="5">server_main_loop<pos:position pos:line="56" pos:column="21"/></name><argument_list pos:line="56" pos:column="21">(<argument><expr><name pos:line="56" pos:column="22">remaining_children_to_start<pos:position pos:line="56" pos:column="49"/></name></expr></argument>)<pos:position pos:line="56" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="57" pos:column="5">mpm_state<pos:position pos:line="57" pos:column="14"/></name> <operator pos:line="57" pos:column="15">=<pos:position pos:line="57" pos:column="16"/></operator> <name pos:line="57" pos:column="17">AP_MPMQ_STOPPING<pos:position pos:line="57" pos:column="33"/></name></expr>;<pos:position pos:line="57" pos:column="34"/></expr_stmt>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">shutdown_pending<pos:position pos:line="59" pos:column="25"/></name> <operator pos:line="59" pos:column="26">&amp;&amp;<pos:position pos:line="59" pos:column="36"/></operator> <operator pos:line="59" pos:column="29">!<pos:position pos:line="59" pos:column="30"/></operator><name pos:line="59" pos:column="30">is_graceful<pos:position pos:line="59" pos:column="41"/></name></expr>)<pos:position pos:line="59" pos:column="42"/></condition><then pos:line="59" pos:column="42"> <block pos:line="59" pos:column="43">{
        <comment type="block" pos:line="60" pos:column="9">/* Time to shut down:
         * Kill child processes, tell them to call child_exit, etc...
         */</comment>
        <expr_stmt><expr><call><name pos:line="63" pos:column="9">ap_event_pod_killpg<pos:position pos:line="63" pos:column="28"/></name><argument_list pos:line="63" pos:column="28">(<argument><expr><name pos:line="63" pos:column="29">pod<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="34">ap_daemons_limit<pos:position pos:line="63" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="52">FALSE<pos:position pos:line="63" pos:column="57"/></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="64" pos:column="9">ap_reclaim_child_processes<pos:position pos:line="64" pos:column="35"/></name><argument_list pos:line="64" pos:column="35">(<argument><expr><literal type="number" pos:line="64" pos:column="36">1<pos:position pos:line="64" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="39"/></expr_stmt>  <comment type="block" pos:line="64" pos:column="41">/* Start with SIGTERM */</comment>

        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><operator pos:line="66" pos:column="13">!<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">child_fatal<pos:position pos:line="66" pos:column="25"/></name></expr>)<pos:position pos:line="66" pos:column="26"/></condition><then pos:line="66" pos:column="26"> <block pos:line="66" pos:column="27">{
            <comment type="block" pos:line="67" pos:column="13">/* cleanup pid file on normal shutdown */</comment>
            <decl_stmt><decl><type><specifier pos:line="68" pos:column="13">const<pos:position pos:line="68" pos:column="18"/></specifier> <name pos:line="68" pos:column="19">char<pos:position pos:line="68" pos:column="23"/></name> <modifier pos:line="68" pos:column="24">*<pos:position pos:line="68" pos:column="25"/></modifier></type><name pos:line="68" pos:column="25">pidfile<pos:position pos:line="68" pos:column="32"/></name> <init pos:line="68" pos:column="33">= <expr><name pos:line="68" pos:column="35">NULL<pos:position pos:line="68" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="68" pos:column="40"/></decl_stmt>
            <expr_stmt><expr><name pos:line="69" pos:column="13">pidfile<pos:position pos:line="69" pos:column="20"/></name> <operator pos:line="69" pos:column="21">=<pos:position pos:line="69" pos:column="22"/></operator> <call><name pos:line="69" pos:column="23">ap_server_root_relative<pos:position pos:line="69" pos:column="46"/></name><argument_list pos:line="69" pos:column="46">(<argument><expr><name pos:line="69" pos:column="47">pconf<pos:position pos:line="69" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="69" pos:column="54">ap_pid_fname<pos:position pos:line="69" pos:column="66"/></name></expr></argument>)<pos:position pos:line="69" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="68"/></expr_stmt>
            <if pos:line="70" pos:column="13">if <condition pos:line="70" pos:column="16">(<expr><name pos:line="70" pos:column="17">pidfile<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">!=<pos:position pos:line="70" pos:column="27"/></operator> <name pos:line="70" pos:column="28">NULL<pos:position pos:line="70" pos:column="32"/></name> <operator pos:line="70" pos:column="33">&amp;&amp;<pos:position pos:line="70" pos:column="43"/></operator> <call><name pos:line="70" pos:column="36">unlink<pos:position pos:line="70" pos:column="42"/></name><argument_list pos:line="70" pos:column="42">(<argument><expr><name pos:line="70" pos:column="43">pidfile<pos:position pos:line="70" pos:column="50"/></name></expr></argument>)<pos:position pos:line="70" pos:column="51"/></argument_list></call> <operator pos:line="70" pos:column="52">==<pos:position pos:line="70" pos:column="54"/></operator> <literal type="number" pos:line="70" pos:column="55">0<pos:position pos:line="70" pos:column="56"/></literal></expr>)<pos:position pos:line="70" pos:column="57"/></condition><then pos:line="70" pos:column="57">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="71" pos:column="17">ap_log_error<pos:position pos:line="71" pos:column="29"/></name><argument_list pos:line="71" pos:column="29">(<argument><expr><name pos:line="71" pos:column="30">APLOG_MARK<pos:position pos:line="71" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="42">APLOG_INFO<pos:position pos:line="71" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="54">0<pos:position pos:line="71" pos:column="55"/></literal></expr></argument>,
                             <argument><expr><name pos:line="72" pos:column="30">ap_server_conf<pos:position pos:line="72" pos:column="44"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="73" pos:column="30">"removed PID file %s (pid=%ld)"<pos:position pos:line="73" pos:column="61"/></literal></expr></argument>,
                             <argument><expr><name pos:line="74" pos:column="30">pidfile<pos:position pos:line="74" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="74" pos:column="39">(<pos:position pos:line="74" pos:column="40"/></operator><name pos:line="74" pos:column="40">long<pos:position pos:line="74" pos:column="44"/></name><operator pos:line="74" pos:column="44">)<pos:position pos:line="74" pos:column="45"/></operator> <call><name pos:line="74" pos:column="46">getpid<pos:position pos:line="74" pos:column="52"/></name><argument_list pos:line="74" pos:column="52">()<pos:position pos:line="74" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="56"/></expr_stmt></block></then></if>

            <expr_stmt><expr><call><name pos:line="76" pos:column="13">ap_log_error<pos:position pos:line="76" pos:column="25"/></name><argument_list pos:line="76" pos:column="25">(<argument><expr><name pos:line="76" pos:column="26">APLOG_MARK<pos:position pos:line="76" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="38">APLOG_NOTICE<pos:position pos:line="76" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="52">0<pos:position pos:line="76" pos:column="53"/></literal></expr></argument>,
                         <argument><expr><name pos:line="77" pos:column="26">ap_server_conf<pos:position pos:line="77" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="42">"caught SIGTERM, shutting down"<pos:position pos:line="77" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="75"/></expr_stmt>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if>
        <return pos:line="79" pos:column="9">return <expr><name pos:line="79" pos:column="16">DONE<pos:position pos:line="79" pos:column="20"/></name></expr>;<pos:position pos:line="79" pos:column="21"/></return>
    }<pos:position pos:line="80" pos:column="6"/></block></then> <elseif pos:line="80" pos:column="7">else <if pos:line="80" pos:column="12">if <condition pos:line="80" pos:column="15">(<expr><name pos:line="80" pos:column="16">shutdown_pending<pos:position pos:line="80" pos:column="32"/></name></expr>)<pos:position pos:line="80" pos:column="33"/></condition><then pos:line="80" pos:column="33"> <block pos:line="80" pos:column="34">{
        <comment type="block" pos:line="81" pos:column="9">/* Time to gracefully shut down:
         * Kill child processes, tell them to call child_exit, etc...
         */</comment>
        <decl_stmt><decl><type><name pos:line="84" pos:column="9">int<pos:position pos:line="84" pos:column="12"/></name></type> <name pos:line="84" pos:column="13">active_children<pos:position pos:line="84" pos:column="28"/></name></decl>;<pos:position pos:line="84" pos:column="29"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="85" pos:column="9">int<pos:position pos:line="85" pos:column="12"/></name></type> <name pos:line="85" pos:column="13">index<pos:position pos:line="85" pos:column="18"/></name></decl>;<pos:position pos:line="85" pos:column="19"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="86" pos:column="9">apr_time_t<pos:position pos:line="86" pos:column="19"/></name></type> <name pos:line="86" pos:column="20">cutoff<pos:position pos:line="86" pos:column="26"/></name> <init pos:line="86" pos:column="27">= <expr><literal type="number" pos:line="86" pos:column="29">0<pos:position pos:line="86" pos:column="30"/></literal></expr></init></decl>;<pos:position pos:line="86" pos:column="31"/></decl_stmt>

        <comment type="block" pos:line="88" pos:column="9">/* Close our listeners, and then ask our children to do same */</comment>
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">ap_close_listeners<pos:position pos:line="89" pos:column="27"/></name><argument_list pos:line="89" pos:column="27">()<pos:position pos:line="89" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="90" pos:column="9">ap_event_pod_killpg<pos:position pos:line="90" pos:column="28"/></name><argument_list pos:line="90" pos:column="28">(<argument><expr><name pos:line="90" pos:column="29">pod<pos:position pos:line="90" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="34">ap_daemons_limit<pos:position pos:line="90" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="52">TRUE<pos:position pos:line="90" pos:column="56"/></name></expr></argument>)<pos:position pos:line="90" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">ap_relieve_child_processes<pos:position pos:line="91" pos:column="35"/></name><argument_list pos:line="91" pos:column="35">()<pos:position pos:line="91" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="38"/></expr_stmt>

        <if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><operator pos:line="93" pos:column="13">!<pos:position pos:line="93" pos:column="14"/></operator><name pos:line="93" pos:column="14">child_fatal<pos:position pos:line="93" pos:column="25"/></name></expr>)<pos:position pos:line="93" pos:column="26"/></condition><then pos:line="93" pos:column="26"> <block pos:line="93" pos:column="27">{
            <comment type="block" pos:line="94" pos:column="13">/* cleanup pid file on normal shutdown */</comment>
            <decl_stmt><decl><type><specifier pos:line="95" pos:column="13">const<pos:position pos:line="95" pos:column="18"/></specifier> <name pos:line="95" pos:column="19">char<pos:position pos:line="95" pos:column="23"/></name> <modifier pos:line="95" pos:column="24">*<pos:position pos:line="95" pos:column="25"/></modifier></type><name pos:line="95" pos:column="25">pidfile<pos:position pos:line="95" pos:column="32"/></name> <init pos:line="95" pos:column="33">= <expr><name pos:line="95" pos:column="35">NULL<pos:position pos:line="95" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="95" pos:column="40"/></decl_stmt>
            <expr_stmt><expr><name pos:line="96" pos:column="13">pidfile<pos:position pos:line="96" pos:column="20"/></name> <operator pos:line="96" pos:column="21">=<pos:position pos:line="96" pos:column="22"/></operator> <call><name pos:line="96" pos:column="23">ap_server_root_relative<pos:position pos:line="96" pos:column="46"/></name> <argument_list pos:line="96" pos:column="47">(<argument><expr><name pos:line="96" pos:column="48">pconf<pos:position pos:line="96" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="55">ap_pid_fname<pos:position pos:line="96" pos:column="67"/></name></expr></argument>)<pos:position pos:line="96" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="69"/></expr_stmt>
            <if pos:line="97" pos:column="13">if <condition pos:line="97" pos:column="16">( <expr><name pos:line="97" pos:column="18">pidfile<pos:position pos:line="97" pos:column="25"/></name> <operator pos:line="97" pos:column="26">!=<pos:position pos:line="97" pos:column="28"/></operator> <name pos:line="97" pos:column="29">NULL<pos:position pos:line="97" pos:column="33"/></name> <operator pos:line="97" pos:column="34">&amp;&amp;<pos:position pos:line="97" pos:column="44"/></operator> <call><name pos:line="97" pos:column="37">unlink<pos:position pos:line="97" pos:column="43"/></name><argument_list pos:line="97" pos:column="43">(<argument><expr><name pos:line="97" pos:column="44">pidfile<pos:position pos:line="97" pos:column="51"/></name></expr></argument>)<pos:position pos:line="97" pos:column="52"/></argument_list></call> <operator pos:line="97" pos:column="53">==<pos:position pos:line="97" pos:column="55"/></operator> <literal type="number" pos:line="97" pos:column="56">0<pos:position pos:line="97" pos:column="57"/></literal></expr>)<pos:position pos:line="97" pos:column="58"/></condition><then pos:line="97" pos:column="58">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="98" pos:column="17">ap_log_error<pos:position pos:line="98" pos:column="29"/></name><argument_list pos:line="98" pos:column="29">(<argument><expr><name pos:line="98" pos:column="30">APLOG_MARK<pos:position pos:line="98" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="42">APLOG_INFO<pos:position pos:line="98" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="54">0<pos:position pos:line="98" pos:column="55"/></literal></expr></argument>,
                             <argument><expr><name pos:line="99" pos:column="30">ap_server_conf<pos:position pos:line="99" pos:column="44"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="100" pos:column="30">"removed PID file %s (pid=%ld)"<pos:position pos:line="100" pos:column="61"/></literal></expr></argument>,
                             <argument><expr><name pos:line="101" pos:column="30">pidfile<pos:position pos:line="101" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="101" pos:column="39">(<pos:position pos:line="101" pos:column="40"/></operator><name pos:line="101" pos:column="40">long<pos:position pos:line="101" pos:column="44"/></name><operator pos:line="101" pos:column="44">)<pos:position pos:line="101" pos:column="45"/></operator><call><name pos:line="101" pos:column="45">getpid<pos:position pos:line="101" pos:column="51"/></name><argument_list pos:line="101" pos:column="51">()<pos:position pos:line="101" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="101" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="55"/></expr_stmt></block></then></if>

            <expr_stmt><expr><call><name pos:line="103" pos:column="13">ap_log_error<pos:position pos:line="103" pos:column="25"/></name><argument_list pos:line="103" pos:column="25">(<argument><expr><name pos:line="103" pos:column="26">APLOG_MARK<pos:position pos:line="103" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="38">APLOG_NOTICE<pos:position pos:line="103" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="52">0<pos:position pos:line="103" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="103" pos:column="55">ap_server_conf<pos:position pos:line="103" pos:column="69"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="104" pos:column="26">"caught "<pos:position pos:line="104" pos:column="35"/></literal> <name pos:line="104" pos:column="36">AP_SIG_GRACEFUL_STOP_STRING<pos:position pos:line="104" pos:column="63"/></name>
                         <literal type="string" pos:line="105" pos:column="26">", shutting down gracefully"<pos:position pos:line="105" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="106" pos:column="10"/></block></then></if>

        <if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><name pos:line="108" pos:column="13">ap_graceful_shutdown_timeout<pos:position pos:line="108" pos:column="41"/></name></expr>)<pos:position pos:line="108" pos:column="42"/></condition><then pos:line="108" pos:column="42"> <block pos:line="108" pos:column="43">{
            <expr_stmt><expr><name pos:line="109" pos:column="13">cutoff<pos:position pos:line="109" pos:column="19"/></name> <operator pos:line="109" pos:column="20">=<pos:position pos:line="109" pos:column="21"/></operator> <call><name pos:line="109" pos:column="22">apr_time_now<pos:position pos:line="109" pos:column="34"/></name><argument_list pos:line="109" pos:column="34">()<pos:position pos:line="109" pos:column="36"/></argument_list></call> <operator pos:line="109" pos:column="37">+<pos:position pos:line="109" pos:column="38"/></operator>
                     <call><name pos:line="110" pos:column="22">apr_time_from_sec<pos:position pos:line="110" pos:column="39"/></name><argument_list pos:line="110" pos:column="39">(<argument><expr><name pos:line="110" pos:column="40">ap_graceful_shutdown_timeout<pos:position pos:line="110" pos:column="68"/></name></expr></argument>)<pos:position pos:line="110" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="70"/></expr_stmt>
        }<pos:position pos:line="111" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="113" pos:column="9">/* Don't really exit until each child has finished */</comment>
        <expr_stmt><expr><name pos:line="114" pos:column="9">shutdown_pending<pos:position pos:line="114" pos:column="25"/></name> <operator pos:line="114" pos:column="26">=<pos:position pos:line="114" pos:column="27"/></operator> <literal type="number" pos:line="114" pos:column="28">0<pos:position pos:line="114" pos:column="29"/></literal></expr>;<pos:position pos:line="114" pos:column="30"/></expr_stmt>
        <do pos:line="115" pos:column="9">do <block pos:line="115" pos:column="12">{
            <comment type="block" pos:line="116" pos:column="13">/* Pause for a second */</comment>
            <expr_stmt><expr><call><name pos:line="117" pos:column="13">apr_sleep<pos:position pos:line="117" pos:column="22"/></name><argument_list pos:line="117" pos:column="22">(<argument><expr><call><name pos:line="117" pos:column="23">apr_time_from_sec<pos:position pos:line="117" pos:column="40"/></name><argument_list pos:line="117" pos:column="40">(<argument><expr><literal type="number" pos:line="117" pos:column="41">1<pos:position pos:line="117" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="117" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="117" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="45"/></expr_stmt>

            <comment type="block" pos:line="119" pos:column="13">/* Relieve any children which have now exited */</comment>
            <expr_stmt><expr><call><name pos:line="120" pos:column="13">ap_relieve_child_processes<pos:position pos:line="120" pos:column="39"/></name><argument_list pos:line="120" pos:column="39">()<pos:position pos:line="120" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="42"/></expr_stmt>

            <expr_stmt><expr><name pos:line="122" pos:column="13">active_children<pos:position pos:line="122" pos:column="28"/></name> <operator pos:line="122" pos:column="29">=<pos:position pos:line="122" pos:column="30"/></operator> <literal type="number" pos:line="122" pos:column="31">0<pos:position pos:line="122" pos:column="32"/></literal></expr>;<pos:position pos:line="122" pos:column="33"/></expr_stmt>
            <for pos:line="123" pos:column="13">for <control pos:line="123" pos:column="17">(<init><expr><name pos:line="123" pos:column="18">index<pos:position pos:line="123" pos:column="23"/></name> <operator pos:line="123" pos:column="24">=<pos:position pos:line="123" pos:column="25"/></operator> <literal type="number" pos:line="123" pos:column="26">0<pos:position pos:line="123" pos:column="27"/></literal></expr>;<pos:position pos:line="123" pos:column="28"/></init> <condition><expr><name pos:line="123" pos:column="29">index<pos:position pos:line="123" pos:column="34"/></name> <operator pos:line="123" pos:column="35">&lt;<pos:position pos:line="123" pos:column="39"/></operator> <name pos:line="123" pos:column="37">ap_daemons_limit<pos:position pos:line="123" pos:column="53"/></name></expr>;<pos:position pos:line="123" pos:column="54"/></condition> <incr><expr><operator pos:line="123" pos:column="55">++<pos:position pos:line="123" pos:column="57"/></operator><name pos:line="123" pos:column="57">index<pos:position pos:line="123" pos:column="62"/></name></expr></incr>)<pos:position pos:line="123" pos:column="63"/></control> <block pos:line="123" pos:column="64">{
                <if pos:line="124" pos:column="17">if <condition pos:line="124" pos:column="20">(<expr><call><name pos:line="124" pos:column="21">ap_mpm_safe_kill<pos:position pos:line="124" pos:column="37"/></name><argument_list pos:line="124" pos:column="37">(<argument><expr><call><name pos:line="124" pos:column="38">MPM_CHILD_PID<pos:position pos:line="124" pos:column="51"/></name><argument_list pos:line="124" pos:column="51">(<argument><expr><name pos:line="124" pos:column="52">index<pos:position pos:line="124" pos:column="57"/></name></expr></argument>)<pos:position pos:line="124" pos:column="58"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="124" pos:column="60">0<pos:position pos:line="124" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="62"/></argument_list></call> <operator pos:line="124" pos:column="63">==<pos:position pos:line="124" pos:column="65"/></operator> <name pos:line="124" pos:column="66">APR_SUCCESS<pos:position pos:line="124" pos:column="77"/></name></expr>)<pos:position pos:line="124" pos:column="78"/></condition><then pos:line="124" pos:column="78"> <block pos:line="124" pos:column="79">{
                    <expr_stmt><expr><name pos:line="125" pos:column="21">active_children<pos:position pos:line="125" pos:column="36"/></name> <operator pos:line="125" pos:column="37">=<pos:position pos:line="125" pos:column="38"/></operator> <literal type="number" pos:line="125" pos:column="39">1<pos:position pos:line="125" pos:column="40"/></literal></expr>;<pos:position pos:line="125" pos:column="41"/></expr_stmt>
                    <comment type="block" pos:line="126" pos:column="21">/* Having just one child is enough to stay around */</comment>
                    <break pos:line="127" pos:column="21">break;<pos:position pos:line="127" pos:column="27"/></break>
                }<pos:position pos:line="128" pos:column="18"/></block></then></if>
            }<pos:position pos:line="129" pos:column="14"/></block></for>
        }<pos:position pos:line="130" pos:column="10"/></block> while <condition pos:line="130" pos:column="17">(<expr><operator pos:line="130" pos:column="18">!<pos:position pos:line="130" pos:column="19"/></operator><name pos:line="130" pos:column="19">shutdown_pending<pos:position pos:line="130" pos:column="35"/></name> <operator pos:line="130" pos:column="36">&amp;&amp;<pos:position pos:line="130" pos:column="46"/></operator> <name pos:line="130" pos:column="39">active_children<pos:position pos:line="130" pos:column="54"/></name> <operator pos:line="130" pos:column="55">&amp;&amp;<pos:position pos:line="130" pos:column="65"/></operator>
                 <operator pos:line="131" pos:column="18">(<pos:position pos:line="131" pos:column="19"/></operator><operator pos:line="131" pos:column="19">!<pos:position pos:line="131" pos:column="20"/></operator><name pos:line="131" pos:column="20">ap_graceful_shutdown_timeout<pos:position pos:line="131" pos:column="48"/></name> <operator pos:line="131" pos:column="49">||<pos:position pos:line="131" pos:column="51"/></operator> <call><name pos:line="131" pos:column="52">apr_time_now<pos:position pos:line="131" pos:column="64"/></name><argument_list pos:line="131" pos:column="64">()<pos:position pos:line="131" pos:column="66"/></argument_list></call> <operator pos:line="131" pos:column="67">&lt;<pos:position pos:line="131" pos:column="71"/></operator> <name pos:line="131" pos:column="69">cutoff<pos:position pos:line="131" pos:column="75"/></name><operator pos:line="131" pos:column="75">)<pos:position pos:line="131" pos:column="76"/></operator></expr>)<pos:position pos:line="131" pos:column="77"/></condition>;<pos:position pos:line="131" pos:column="78"/></do>

        <comment type="block" pos:line="133" pos:column="9">/* We might be here because we received SIGTERM, either
         * way, try and make sure that all of our processes are
         * really dead.
         */</comment>
        <expr_stmt><expr><call><name pos:line="137" pos:column="9">ap_event_pod_killpg<pos:position pos:line="137" pos:column="28"/></name><argument_list pos:line="137" pos:column="28">(<argument><expr><name pos:line="137" pos:column="29">pod<pos:position pos:line="137" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="34">ap_daemons_limit<pos:position pos:line="137" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="52">FALSE<pos:position pos:line="137" pos:column="57"/></name></expr></argument>)<pos:position pos:line="137" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="138" pos:column="9">ap_reclaim_child_processes<pos:position pos:line="138" pos:column="35"/></name><argument_list pos:line="138" pos:column="35">(<argument><expr><literal type="number" pos:line="138" pos:column="36">1<pos:position pos:line="138" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="39"/></expr_stmt>

        <return pos:line="140" pos:column="9">return <expr><name pos:line="140" pos:column="16">DONE<pos:position pos:line="140" pos:column="20"/></name></expr>;<pos:position pos:line="140" pos:column="21"/></return>
    }<pos:position pos:line="141" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="143" pos:column="5">/* we've been told to restart */</comment>
    <expr_stmt><expr><call><name pos:line="144" pos:column="5">apr_signal<pos:position pos:line="144" pos:column="15"/></name><argument_list pos:line="144" pos:column="15">(<argument><expr><name pos:line="144" pos:column="16">SIGHUP<pos:position pos:line="144" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="24">SIG_IGN<pos:position pos:line="144" pos:column="31"/></name></expr></argument>)<pos:position pos:line="144" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="33"/></expr_stmt>

    <if pos:line="146" pos:column="5">if <condition pos:line="146" pos:column="8">(<expr><name pos:line="146" pos:column="9">one_process<pos:position pos:line="146" pos:column="20"/></name></expr>)<pos:position pos:line="146" pos:column="21"/></condition><then pos:line="146" pos:column="21"> <block pos:line="146" pos:column="22">{
        <comment type="block" pos:line="147" pos:column="9">/* not worth thinking about */</comment>
        <return pos:line="148" pos:column="9">return <expr><name pos:line="148" pos:column="16">DONE<pos:position pos:line="148" pos:column="20"/></name></expr>;<pos:position pos:line="148" pos:column="21"/></return>
    }<pos:position pos:line="149" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="151" pos:column="5">/* advance to the next generation */</comment>
    <comment type="block" pos:line="152" pos:column="5">/* XXX: we really need to make sure this new generation number isn't in
     * use by any of the children.
     */</comment>
    <expr_stmt><expr><operator pos:line="155" pos:column="5">++<pos:position pos:line="155" pos:column="7"/></operator><name pos:line="155" pos:column="7">my_generation<pos:position pos:line="155" pos:column="20"/></name></expr>;<pos:position pos:line="155" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="156" pos:column="5">ap_scoreboard_image<pos:position pos:line="156" pos:column="24"/></name><operator pos:line="156" pos:column="24">-&gt;<pos:position pos:line="156" pos:column="29"/></operator><name pos:line="156" pos:column="26">global<pos:position pos:line="156" pos:column="32"/></name><operator pos:line="156" pos:column="32">-&gt;<pos:position pos:line="156" pos:column="37"/></operator><name pos:line="156" pos:column="34">running_generation<pos:position pos:line="156" pos:column="52"/></name></name> <operator pos:line="156" pos:column="53">=<pos:position pos:line="156" pos:column="54"/></operator> <name pos:line="156" pos:column="55">my_generation<pos:position pos:line="156" pos:column="68"/></name></expr>;<pos:position pos:line="156" pos:column="69"/></expr_stmt>

    <if pos:line="158" pos:column="5">if <condition pos:line="158" pos:column="8">(<expr><name pos:line="158" pos:column="9">is_graceful<pos:position pos:line="158" pos:column="20"/></name></expr>)<pos:position pos:line="158" pos:column="21"/></condition><then pos:line="158" pos:column="21"> <block pos:line="158" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="159" pos:column="9">ap_log_error<pos:position pos:line="159" pos:column="21"/></name><argument_list pos:line="159" pos:column="21">(<argument><expr><name pos:line="159" pos:column="22">APLOG_MARK<pos:position pos:line="159" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="159" pos:column="34">APLOG_NOTICE<pos:position pos:line="159" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="159" pos:column="48">0<pos:position pos:line="159" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="159" pos:column="51">ap_server_conf<pos:position pos:line="159" pos:column="65"/></name></expr></argument>,
                     <argument><expr><name pos:line="160" pos:column="22">AP_SIG_GRACEFUL_STRING<pos:position pos:line="160" pos:column="44"/></name>
                     <literal type="string" pos:line="161" pos:column="22">" received.  Doing graceful restart"<pos:position pos:line="161" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="161" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="60"/></expr_stmt>
        <comment type="block" pos:line="162" pos:column="9">/* wake up the children...time to die.  But we'll have more soon */</comment>
        <expr_stmt><expr><call><name pos:line="163" pos:column="9">ap_event_pod_killpg<pos:position pos:line="163" pos:column="28"/></name><argument_list pos:line="163" pos:column="28">(<argument><expr><name pos:line="163" pos:column="29">pod<pos:position pos:line="163" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="34">ap_daemons_limit<pos:position pos:line="163" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="52">TRUE<pos:position pos:line="163" pos:column="56"/></name></expr></argument>)<pos:position pos:line="163" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="58"/></expr_stmt>


        <comment type="block" pos:line="166" pos:column="9">/* This is mostly for debugging... so that we know what is still
         * gracefully dealing with existing request.
         */</comment>

    }<pos:position pos:line="170" pos:column="6"/></block></then>
    <else pos:line="171" pos:column="5">else <block pos:line="171" pos:column="10">{
        <comment type="block" pos:line="172" pos:column="9">/* Kill 'em all.  Since the child acts the same on the parents SIGTERM
         * and a SIGHUP, we may as well use the same signal, because some user
         * pthreads are stealing signals from us left and right.
         */</comment>
        <expr_stmt><expr><call><name pos:line="176" pos:column="9">ap_event_pod_killpg<pos:position pos:line="176" pos:column="28"/></name><argument_list pos:line="176" pos:column="28">(<argument><expr><name pos:line="176" pos:column="29">pod<pos:position pos:line="176" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="34">ap_daemons_limit<pos:position pos:line="176" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="176" pos:column="52">FALSE<pos:position pos:line="176" pos:column="57"/></name></expr></argument>)<pos:position pos:line="176" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="59"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="178" pos:column="9">ap_reclaim_child_processes<pos:position pos:line="178" pos:column="35"/></name><argument_list pos:line="178" pos:column="35">(<argument><expr><literal type="number" pos:line="178" pos:column="36">1<pos:position pos:line="178" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="178" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="39"/></expr_stmt>  <comment type="block" pos:line="178" pos:column="41">/* Start with SIGTERM */</comment>
        <expr_stmt><expr><call><name pos:line="179" pos:column="9">ap_log_error<pos:position pos:line="179" pos:column="21"/></name><argument_list pos:line="179" pos:column="21">(<argument><expr><name pos:line="179" pos:column="22">APLOG_MARK<pos:position pos:line="179" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="179" pos:column="34">APLOG_NOTICE<pos:position pos:line="179" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="179" pos:column="48">0<pos:position pos:line="179" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="179" pos:column="51">ap_server_conf<pos:position pos:line="179" pos:column="65"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="180" pos:column="22">"SIGHUP received.  Attempting to restart"<pos:position pos:line="180" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="65"/></expr_stmt>
    }<pos:position pos:line="181" pos:column="6"/></block></else></if>

    <return pos:line="183" pos:column="5">return <expr><name pos:line="183" pos:column="12">OK<pos:position pos:line="183" pos:column="14"/></name></expr>;<pos:position pos:line="183" pos:column="15"/></return>
}<pos:position pos:line="184" pos:column="2"/></block></function></unit>
