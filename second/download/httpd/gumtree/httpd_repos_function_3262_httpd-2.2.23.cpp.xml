<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3262_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">PTRCALL<pos:position pos:line="1" pos:column="20"/></name></type>
<name pos:line="2" pos:column="1">unknown_toUtf16<pos:position pos:line="2" pos:column="16"/></name><parameter_list pos:line="2" pos:column="16">(<parameter><decl><type><specifier pos:line="2" pos:column="17">const<pos:position pos:line="2" pos:column="22"/></specifier> <name pos:line="2" pos:column="23">ENCODING<pos:position pos:line="2" pos:column="31"/></name> <modifier pos:line="2" pos:column="32">*<pos:position pos:line="2" pos:column="33"/></modifier></type><name pos:line="2" pos:column="33">enc<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>,
                <parameter><decl><type><specifier pos:line="3" pos:column="17">const<pos:position pos:line="3" pos:column="22"/></specifier> <name pos:line="3" pos:column="23">char<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier><modifier pos:line="3" pos:column="29">*<pos:position pos:line="3" pos:column="30"/></modifier></type><name pos:line="3" pos:column="30">fromP<pos:position pos:line="3" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="37">const<pos:position pos:line="3" pos:column="42"/></specifier> <name pos:line="3" pos:column="43">char<pos:position pos:line="3" pos:column="47"/></name> <modifier pos:line="3" pos:column="48">*<pos:position pos:line="3" pos:column="49"/></modifier></type><name pos:line="3" pos:column="49">fromLim<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>,
                <parameter><decl><type><name pos:line="4" pos:column="17">unsigned<pos:position pos:line="4" pos:column="25"/></name> <name pos:line="4" pos:column="26">short<pos:position pos:line="4" pos:column="31"/></name> <modifier pos:line="4" pos:column="32">*<pos:position pos:line="4" pos:column="33"/></modifier><modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">toP<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="39">const<pos:position pos:line="4" pos:column="44"/></specifier> <name pos:line="4" pos:column="45">unsigned<pos:position pos:line="4" pos:column="53"/></name> <name pos:line="4" pos:column="54">short<pos:position pos:line="4" pos:column="59"/></name> <modifier pos:line="4" pos:column="60">*<pos:position pos:line="4" pos:column="61"/></modifier></type><name pos:line="4" pos:column="61">toLim<pos:position pos:line="4" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="67"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">unknown_encoding<pos:position pos:line="6" pos:column="32"/></name></name> <modifier pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></modifier></type><name pos:line="6" pos:column="34">uenc<pos:position pos:line="6" pos:column="38"/></name> <init pos:line="6" pos:column="39">= <expr><call><name pos:line="6" pos:column="41">AS_UNKNOWN_ENCODING<pos:position pos:line="6" pos:column="60"/></name><argument_list pos:line="6" pos:column="60">(<argument><expr><name pos:line="6" pos:column="61">enc<pos:position pos:line="6" pos:column="64"/></name></expr></argument>)<pos:position pos:line="6" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="66"/></decl_stmt>
  <while pos:line="7" pos:column="3">while <condition pos:line="7" pos:column="9">(<expr><operator pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></operator><name pos:line="7" pos:column="11">fromP<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">!=<pos:position pos:line="7" pos:column="19"/></operator> <name pos:line="7" pos:column="20">fromLim<pos:position pos:line="7" pos:column="27"/></name> <operator pos:line="7" pos:column="28">&amp;&amp;<pos:position pos:line="7" pos:column="38"/></operator> <operator pos:line="7" pos:column="31">*<pos:position pos:line="7" pos:column="32"/></operator><name pos:line="7" pos:column="32">toP<pos:position pos:line="7" pos:column="35"/></name> <operator pos:line="7" pos:column="36">!=<pos:position pos:line="7" pos:column="38"/></operator> <name pos:line="7" pos:column="39">toLim<pos:position pos:line="7" pos:column="44"/></name></expr>)<pos:position pos:line="7" pos:column="45"/></condition> <block pos:line="7" pos:column="46">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">short<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">c<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><name><name pos:line="8" pos:column="24">uenc<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">-&gt;<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="30">utf16<pos:position pos:line="8" pos:column="35"/></name><index pos:line="8" pos:column="35">[<expr><operator pos:line="8" pos:column="36">(<pos:position pos:line="8" pos:column="37"/></operator><name pos:line="8" pos:column="37">unsigned<pos:position pos:line="8" pos:column="45"/></name> <name pos:line="8" pos:column="46">char<pos:position pos:line="8" pos:column="50"/></name><operator pos:line="8" pos:column="50">)<pos:position pos:line="8" pos:column="51"/></operator><operator pos:line="8" pos:column="51">*<pos:position pos:line="8" pos:column="52"/></operator><operator pos:line="8" pos:column="52">*<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="53">fromP<pos:position pos:line="8" pos:column="58"/></name></expr>]<pos:position pos:line="8" pos:column="59"/></index></name></expr></init></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">c<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">==<pos:position pos:line="9" pos:column="13"/></operator> <literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16"> <block pos:line="9" pos:column="17">{
      <expr_stmt><expr><name pos:line="10" pos:column="7">c<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">=<pos:position pos:line="10" pos:column="10"/></operator> <operator pos:line="10" pos:column="11">(<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="12">unsigned<pos:position pos:line="10" pos:column="20"/></name> <name pos:line="10" pos:column="21">short<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">)<pos:position pos:line="10" pos:column="27"/></operator>
          <call><name><name pos:line="11" pos:column="11">uenc<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">-&gt;<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="17">convert<pos:position pos:line="11" pos:column="24"/></name></name><argument_list pos:line="11" pos:column="24">(<argument><expr><name><name pos:line="11" pos:column="25">uenc<pos:position pos:line="11" pos:column="29"/></name><operator pos:line="11" pos:column="29">-&gt;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="31">userData<pos:position pos:line="11" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="41">*<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="42">fromP<pos:position pos:line="11" pos:column="47"/></name></expr></argument>)<pos:position pos:line="11" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="49"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="12" pos:column="7">*<pos:position pos:line="12" pos:column="8"/></operator><name pos:line="12" pos:column="8">fromP<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">+=<pos:position pos:line="12" pos:column="16"/></operator> <operator pos:line="12" pos:column="17">(<pos:position pos:line="12" pos:column="18"/></operator><call><name pos:line="12" pos:column="18">AS_NORMAL_ENCODING<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><name pos:line="12" pos:column="37">enc<pos:position pos:line="12" pos:column="40"/></name></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call><operator pos:line="12" pos:column="41">-&gt;<pos:position pos:line="12" pos:column="46"/></operator><name><name pos:line="12" pos:column="43">type<pos:position pos:line="12" pos:column="47"/></name><index pos:line="12" pos:column="47">[<expr><operator pos:line="12" pos:column="48">(<pos:position pos:line="12" pos:column="49"/></operator><name pos:line="12" pos:column="49">unsigned<pos:position pos:line="12" pos:column="57"/></name> <name pos:line="12" pos:column="58">char<pos:position pos:line="12" pos:column="62"/></name><operator pos:line="12" pos:column="62">)<pos:position pos:line="12" pos:column="63"/></operator><operator pos:line="12" pos:column="63">*<pos:position pos:line="12" pos:column="64"/></operator><operator pos:line="12" pos:column="64">*<pos:position pos:line="12" pos:column="65"/></operator><name pos:line="12" pos:column="65">fromP<pos:position pos:line="12" pos:column="70"/></name></expr>]<pos:position pos:line="12" pos:column="71"/></index></name>
                 <operator pos:line="13" pos:column="18">-<pos:position pos:line="13" pos:column="19"/></operator> <operator pos:line="13" pos:column="20">(<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="21">BT_LEAD2<pos:position pos:line="13" pos:column="29"/></name> <operator pos:line="13" pos:column="30">-<pos:position pos:line="13" pos:column="31"/></operator> <literal type="number" pos:line="13" pos:column="32">2<pos:position pos:line="13" pos:column="33"/></literal><operator pos:line="13" pos:column="33">)<pos:position pos:line="13" pos:column="34"/></operator><operator pos:line="13" pos:column="34">)<pos:position pos:line="13" pos:column="35"/></operator></expr>;<pos:position pos:line="13" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then>
    <else pos:line="15" pos:column="5">else
      <block type="pseudo"><expr_stmt><expr><operator pos:line="16" pos:column="7">(<pos:position pos:line="16" pos:column="8"/></operator><operator pos:line="16" pos:column="8">*<pos:position pos:line="16" pos:column="9"/></operator><name pos:line="16" pos:column="9">fromP<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">)<pos:position pos:line="16" pos:column="15"/></operator><operator pos:line="16" pos:column="15">++<pos:position pos:line="16" pos:column="17"/></operator></expr>;<pos:position pos:line="16" pos:column="18"/></expr_stmt></block></else></if>
    <expr_stmt><expr><operator pos:line="17" pos:column="5">*<pos:position pos:line="17" pos:column="6"/></operator><operator pos:line="17" pos:column="6">(<pos:position pos:line="17" pos:column="7"/></operator><operator pos:line="17" pos:column="7">*<pos:position pos:line="17" pos:column="8"/></operator><name pos:line="17" pos:column="8">toP<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">)<pos:position pos:line="17" pos:column="12"/></operator><operator pos:line="17" pos:column="12">++<pos:position pos:line="17" pos:column="14"/></operator> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <name pos:line="17" pos:column="17">c<pos:position pos:line="17" pos:column="18"/></name></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
  }<pos:position pos:line="18" pos:column="4"/></block></while>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
