<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_28_httpd-2.0.58.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">start_connect<pos:position pos:line="1" pos:column="19"/></name><parameter_list pos:line="1" pos:column="19">(<parameter><decl><type><name><name pos:line="1" pos:column="20">struct<pos:position pos:line="1" pos:column="26"/></name> <name pos:line="1" pos:column="27">connection<pos:position pos:line="1" pos:column="37"/></name></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">c<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <expr_stmt><expr><name><name pos:line="3" pos:column="3">c<pos:position pos:line="3" pos:column="4"/></name><operator pos:line="3" pos:column="4">-&gt;<pos:position pos:line="3" pos:column="9"/></operator><name pos:line="3" pos:column="6">read<pos:position pos:line="3" pos:column="10"/></name></name> <operator pos:line="3" pos:column="11">=<pos:position pos:line="3" pos:column="12"/></operator> <literal type="number" pos:line="3" pos:column="13">0<pos:position pos:line="3" pos:column="14"/></literal></expr>;<pos:position pos:line="3" pos:column="15"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="4" pos:column="3">c<pos:position pos:line="4" pos:column="4"/></name><operator pos:line="4" pos:column="4">-&gt;<pos:position pos:line="4" pos:column="9"/></operator><name pos:line="4" pos:column="6">bread<pos:position pos:line="4" pos:column="11"/></name></name> <operator pos:line="4" pos:column="12">=<pos:position pos:line="4" pos:column="13"/></operator> <literal type="number" pos:line="4" pos:column="14">0<pos:position pos:line="4" pos:column="15"/></literal></expr>;<pos:position pos:line="4" pos:column="16"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="5" pos:column="3">c<pos:position pos:line="5" pos:column="4"/></name><operator pos:line="5" pos:column="4">-&gt;<pos:position pos:line="5" pos:column="9"/></operator><name pos:line="5" pos:column="6">keepalive<pos:position pos:line="5" pos:column="15"/></name></name> <operator pos:line="5" pos:column="16">=<pos:position pos:line="5" pos:column="17"/></operator> <literal type="number" pos:line="5" pos:column="18">0<pos:position pos:line="5" pos:column="19"/></literal></expr>;<pos:position pos:line="5" pos:column="20"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="6" pos:column="3">c<pos:position pos:line="6" pos:column="4"/></name><operator pos:line="6" pos:column="4">-&gt;<pos:position pos:line="6" pos:column="9"/></operator><name pos:line="6" pos:column="6">cbx<pos:position pos:line="6" pos:column="9"/></name></name> <operator pos:line="6" pos:column="10">=<pos:position pos:line="6" pos:column="11"/></operator> <literal type="number" pos:line="6" pos:column="12">0<pos:position pos:line="6" pos:column="13"/></literal></expr>;<pos:position pos:line="6" pos:column="14"/></expr_stmt> 
  <expr_stmt><expr><name><name pos:line="7" pos:column="3">c<pos:position pos:line="7" pos:column="4"/></name><operator pos:line="7" pos:column="4">-&gt;<pos:position pos:line="7" pos:column="9"/></operator><name pos:line="7" pos:column="6">gotheader<pos:position pos:line="7" pos:column="15"/></name></name> <operator pos:line="7" pos:column="16">=<pos:position pos:line="7" pos:column="17"/></operator> <literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr>;<pos:position pos:line="7" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name><name pos:line="9" pos:column="3">c<pos:position pos:line="9" pos:column="4"/></name><operator pos:line="9" pos:column="4">-&gt;<pos:position pos:line="9" pos:column="9"/></operator><name pos:line="9" pos:column="6">fd<pos:position pos:line="9" pos:column="8"/></name></name> <operator pos:line="9" pos:column="9">=<pos:position pos:line="9" pos:column="10"/></operator> <call><name pos:line="9" pos:column="11">socket<pos:position pos:line="9" pos:column="17"/></name><argument_list pos:line="9" pos:column="17">(<argument><expr><name pos:line="9" pos:column="18">AF_INET<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="27">SOCK_STREAM<pos:position pos:line="9" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="40">0<pos:position pos:line="9" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="43"/></expr_stmt>
  <if pos:line="10" pos:column="3">if<condition pos:line="10" pos:column="5">(<expr><name><name pos:line="10" pos:column="6">c<pos:position pos:line="10" pos:column="7"/></name><operator pos:line="10" pos:column="7">-&gt;<pos:position pos:line="10" pos:column="12"/></operator><name pos:line="10" pos:column="9">fd<pos:position pos:line="10" pos:column="11"/></name></name><operator pos:line="10" pos:column="11">&lt;<pos:position pos:line="10" pos:column="15"/></operator><literal type="number" pos:line="10" pos:column="12">0<pos:position pos:line="10" pos:column="13"/></literal></expr>)<pos:position pos:line="10" pos:column="14"/></condition><then pos:line="10" pos:column="14"> <block type="pseudo"><expr_stmt><expr><call><name pos:line="10" pos:column="15">err<pos:position pos:line="10" pos:column="18"/></name><argument_list pos:line="10" pos:column="18">(<argument><expr><literal type="string" pos:line="10" pos:column="19">"socket"<pos:position pos:line="10" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="29"/></expr_stmt></block></then></if>

  <expr_stmt><expr><call><name pos:line="12" pos:column="3">nonblock<pos:position pos:line="12" pos:column="11"/></name><argument_list pos:line="12" pos:column="11">(<argument><expr><name><name pos:line="12" pos:column="12">c<pos:position pos:line="12" pos:column="13"/></name><operator pos:line="12" pos:column="13">-&gt;<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="15">fd<pos:position pos:line="12" pos:column="17"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="19"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="13" pos:column="3">gettimeofday<pos:position pos:line="13" pos:column="15"/></name><argument_list pos:line="13" pos:column="15">(<argument><expr><operator pos:line="13" pos:column="16">&amp;<pos:position pos:line="13" pos:column="21"/></operator><name><name pos:line="13" pos:column="17">c<pos:position pos:line="13" pos:column="18"/></name><operator pos:line="13" pos:column="18">-&gt;<pos:position pos:line="13" pos:column="23"/></operator><name pos:line="13" pos:column="20">start<pos:position pos:line="13" pos:column="25"/></name></name></expr></argument>,<argument><expr><literal type="number" pos:line="13" pos:column="26">0<pos:position pos:line="13" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="29"/></expr_stmt>

  <if pos:line="15" pos:column="3">if<condition pos:line="15" pos:column="5">(<expr><call><name pos:line="15" pos:column="6">connect<pos:position pos:line="15" pos:column="13"/></name><argument_list pos:line="15" pos:column="13">(<argument><expr><name><name pos:line="15" pos:column="14">c<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">-&gt;<pos:position pos:line="15" pos:column="20"/></operator><name pos:line="15" pos:column="17">fd<pos:position pos:line="15" pos:column="19"/></name></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="21">(<pos:position pos:line="15" pos:column="22"/></operator>struct <name pos:line="15" pos:column="29">sockaddr<pos:position pos:line="15" pos:column="37"/></name> <operator pos:line="15" pos:column="38">*<pos:position pos:line="15" pos:column="39"/></operator><operator pos:line="15" pos:column="39">)<pos:position pos:line="15" pos:column="40"/></operator> <operator pos:line="15" pos:column="41">&amp;<pos:position pos:line="15" pos:column="46"/></operator><name pos:line="15" pos:column="42">server<pos:position pos:line="15" pos:column="48"/></name></expr></argument>, <argument><expr><sizeof pos:line="15" pos:column="50">sizeof<argument_list pos:line="15" pos:column="56">(<argument><expr><name pos:line="15" pos:column="57">server<pos:position pos:line="15" pos:column="63"/></name></expr></argument>)<pos:position pos:line="15" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="15" pos:column="65"/></argument_list></call><operator pos:line="15" pos:column="65">&lt;<pos:position pos:line="15" pos:column="69"/></operator><literal type="number" pos:line="15" pos:column="66">0<pos:position pos:line="15" pos:column="67"/></literal></expr>)<pos:position pos:line="15" pos:column="68"/></condition><then pos:line="15" pos:column="68"> <block pos:line="15" pos:column="69">{
    <if pos:line="16" pos:column="5">if<condition pos:line="16" pos:column="7">(<expr><name pos:line="16" pos:column="8">errno<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">==<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="15">EINPROGRESS<pos:position pos:line="16" pos:column="26"/></name></expr>)<pos:position pos:line="16" pos:column="27"/></condition><then pos:line="16" pos:column="27"> <block pos:line="16" pos:column="28">{
      <expr_stmt><expr><name><name pos:line="17" pos:column="7">c<pos:position pos:line="17" pos:column="8"/></name><operator pos:line="17" pos:column="8">-&gt;<pos:position pos:line="17" pos:column="13"/></operator><name pos:line="17" pos:column="10">state<pos:position pos:line="17" pos:column="15"/></name></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <name pos:line="17" pos:column="18">STATE_CONNECTING<pos:position pos:line="17" pos:column="34"/></name></expr>;<pos:position pos:line="17" pos:column="35"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="18" pos:column="7">FD_SET<pos:position pos:line="18" pos:column="13"/></name><argument_list pos:line="18" pos:column="13">(<argument><expr><name><name pos:line="18" pos:column="14">c<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">fd<pos:position pos:line="18" pos:column="19"/></name></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="21">&amp;<pos:position pos:line="18" pos:column="26"/></operator><name pos:line="18" pos:column="22">writebits<pos:position pos:line="18" pos:column="31"/></name></expr></argument>)<pos:position pos:line="18" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="33"/></expr_stmt>
      <return pos:line="19" pos:column="7">return;<pos:position pos:line="19" pos:column="14"/></return>
    }<pos:position pos:line="20" pos:column="6"/></block></then>
    <else pos:line="21" pos:column="5">else <block pos:line="21" pos:column="10">{
      <expr_stmt><expr><call><name pos:line="22" pos:column="7">close<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><name><name pos:line="22" pos:column="13">c<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">-&gt;<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="16">fd<pos:position pos:line="22" pos:column="18"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="23" pos:column="7">err_conn<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">++<pos:position pos:line="23" pos:column="17"/></operator></expr>;<pos:position pos:line="23" pos:column="18"/></expr_stmt>
      <if pos:line="24" pos:column="7">if<condition pos:line="24" pos:column="9">(<expr><name pos:line="24" pos:column="10">bad<pos:position pos:line="24" pos:column="13"/></name><operator pos:line="24" pos:column="13">++<pos:position pos:line="24" pos:column="15"/></operator><operator pos:line="24" pos:column="15">&gt;<pos:position pos:line="24" pos:column="19"/></operator><literal type="number" pos:line="24" pos:column="16">10<pos:position pos:line="24" pos:column="18"/></literal></expr>)<pos:position pos:line="24" pos:column="19"/></condition><then pos:line="24" pos:column="19"> <block pos:line="24" pos:column="20">{
	<expr_stmt><expr><call><name pos:line="25" pos:column="9">printf<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><literal type="string" pos:line="25" pos:column="16">"\nTest aborted after 10 failures\n\n"<pos:position pos:line="25" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="56"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">exit<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">(<argument><expr><literal type="number" pos:line="26" pos:column="14">1<pos:position pos:line="26" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="17"/></expr_stmt>
      }<pos:position pos:line="27" pos:column="8"/></block></then></if> 
      <expr_stmt><expr><call><name pos:line="28" pos:column="7">start_connect<pos:position pos:line="28" pos:column="20"/></name><argument_list pos:line="28" pos:column="20">(<argument><expr><name pos:line="28" pos:column="21">c<pos:position pos:line="28" pos:column="22"/></name></expr></argument>)<pos:position pos:line="28" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></else></if>      
  }<pos:position pos:line="30" pos:column="4"/></block></then></if>
  
  <comment type="block" pos:line="32" pos:column="3">/* connected first time */</comment>
  <expr_stmt><expr><call><name pos:line="33" pos:column="3">write_request<pos:position pos:line="33" pos:column="16"/></name><argument_list pos:line="33" pos:column="16">(<argument><expr><name pos:line="33" pos:column="17">c<pos:position pos:line="33" pos:column="18"/></name></expr></argument>)<pos:position pos:line="33" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="20"/></expr_stmt>
}<pos:position pos:line="34" pos:column="2"/></block></function></unit>
