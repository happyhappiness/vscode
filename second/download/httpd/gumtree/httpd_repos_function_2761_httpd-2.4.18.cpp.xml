<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2761_httpd-2.4.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">set_reqtimeout_param<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">reqtimeout_srv_cfg<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">conf<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">apr_pool_t<pos:position pos:line="2" pos:column="49"/></name> <modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type><name pos:line="2" pos:column="51">p<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="3" pos:column="39">const<pos:position pos:line="3" pos:column="44"/></specifier> <name pos:line="3" pos:column="45">char<pos:position pos:line="3" pos:column="49"/></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">key<pos:position pos:line="3" pos:column="54"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="4" pos:column="39">const<pos:position pos:line="4" pos:column="44"/></specifier> <name pos:line="4" pos:column="45">char<pos:position pos:line="4" pos:column="49"/></name> <modifier pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></modifier></type><name pos:line="4" pos:column="51">val<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="55"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">ret<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">NULL<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">rate_str<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name pos:line="7" pos:column="22">NULL<pos:position pos:line="7" pos:column="26"/></name></expr></init></decl>, <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="29">initial_str<pos:position pos:line="7" pos:column="40"/></name></decl>, <modifier pos:line="7" pos:column="42">*<pos:position pos:line="7" pos:column="43"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="43">max_str<pos:position pos:line="7" pos:column="50"/></name> <init pos:line="7" pos:column="51">= <expr><name pos:line="7" pos:column="53">NULL<pos:position pos:line="7" pos:column="57"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="58"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">rate<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="19">initial<pos:position pos:line="8" pos:column="26"/></name> <init pos:line="8" pos:column="27">= <expr><literal type="number" pos:line="8" pos:column="29">0<pos:position pos:line="8" pos:column="30"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="32">max<pos:position pos:line="8" pos:column="35"/></name> <init pos:line="8" pos:column="36">= <expr><literal type="number" pos:line="8" pos:column="38">0<pos:position pos:line="8" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>
    <enum pos:line="9" pos:column="5">enum <block pos:line="9" pos:column="10">{ <decl><name pos:line="9" pos:column="12">PARAM_HEADER<pos:position pos:line="9" pos:column="24"/></name></decl>, <decl><name pos:line="9" pos:column="26">PARAM_BODY<pos:position pos:line="9" pos:column="36"/></name></decl> }<pos:position pos:line="9" pos:column="38"/></block> <decl><name pos:line="9" pos:column="39">type<pos:position pos:line="9" pos:column="43"/></name></decl>;<pos:position pos:line="9" pos:column="44"/></enum>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">strcasecmp<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">key<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="26">"header"<pos:position pos:line="11" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="36"/></condition><then pos:line="11" pos:column="36"> <block pos:line="11" pos:column="37">{
        <expr_stmt><expr><name pos:line="12" pos:column="9">type<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">PARAM_HEADER<pos:position pos:line="12" pos:column="28"/></name></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then>
    <elseif pos:line="14" pos:column="5">else <if pos:line="14" pos:column="10">if <condition pos:line="14" pos:column="13">(<expr><operator pos:line="14" pos:column="14">!<pos:position pos:line="14" pos:column="15"/></operator><call><name pos:line="14" pos:column="15">strcasecmp<pos:position pos:line="14" pos:column="25"/></name><argument_list pos:line="14" pos:column="25">(<argument><expr><name pos:line="14" pos:column="26">key<pos:position pos:line="14" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="14" pos:column="31">"body"<pos:position pos:line="14" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="39"/></condition><then pos:line="14" pos:column="39"> <block pos:line="14" pos:column="40">{
        <expr_stmt><expr><name pos:line="15" pos:column="9">type<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">PARAM_BODY<pos:position pos:line="15" pos:column="26"/></name></expr>;<pos:position pos:line="15" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if></elseif>
    <else pos:line="17" pos:column="5">else <block pos:line="17" pos:column="10">{
        <return pos:line="18" pos:column="9">return <expr><literal type="string" pos:line="18" pos:column="16">"Unknown RequestReadTimeout parameter"<pos:position pos:line="18" pos:column="54"/></literal></expr>;<pos:position pos:line="18" pos:column="55"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></else></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">(<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">rate_str<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">=<pos:position pos:line="21" pos:column="20"/></operator> <call><name pos:line="21" pos:column="21">ap_strcasestr<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><name pos:line="21" pos:column="35">val<pos:position pos:line="21" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="40">",minrate="<pos:position pos:line="21" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="52"/></argument_list></call><operator pos:line="21" pos:column="52">)<pos:position pos:line="21" pos:column="53"/></operator></expr>)<pos:position pos:line="21" pos:column="54"/></condition><then pos:line="21" pos:column="54"> <block pos:line="21" pos:column="55">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">initial_str<pos:position pos:line="22" pos:column="20"/></name> <operator pos:line="22" pos:column="21">=<pos:position pos:line="22" pos:column="22"/></operator> <call><name pos:line="22" pos:column="23">apr_pstrndup<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">p<pos:position pos:line="22" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="39">val<pos:position pos:line="22" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="44">rate_str<pos:position pos:line="22" pos:column="52"/></name> <operator pos:line="22" pos:column="53">-<pos:position pos:line="22" pos:column="54"/></operator> <name pos:line="22" pos:column="55">val<pos:position pos:line="22" pos:column="58"/></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">rate_str<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">+=<pos:position pos:line="23" pos:column="20"/></operator> <call><name pos:line="23" pos:column="21">strlen<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><literal type="string" pos:line="23" pos:column="28">",minrate="<pos:position pos:line="23" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name pos:line="24" pos:column="9">ret<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <call><name pos:line="24" pos:column="15">parse_int<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><name pos:line="24" pos:column="25">p<pos:position pos:line="24" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="28">rate_str<pos:position pos:line="24" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="38">&amp;<pos:position pos:line="24" pos:column="43"/></operator><name pos:line="24" pos:column="39">rate<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">ret<pos:position pos:line="25" pos:column="16"/></name></expr>)<pos:position pos:line="25" pos:column="17"/></condition><then pos:line="25" pos:column="17">
            <block type="pseudo"><return pos:line="26" pos:column="13">return <expr><name pos:line="26" pos:column="20">ret<pos:position pos:line="26" pos:column="23"/></name></expr>;<pos:position pos:line="26" pos:column="24"/></return></block></then></if>

        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">rate<pos:position pos:line="28" pos:column="17"/></name> <operator pos:line="28" pos:column="18">==<pos:position pos:line="28" pos:column="20"/></operator> <literal type="number" pos:line="28" pos:column="21">0<pos:position pos:line="28" pos:column="22"/></literal></expr>)<pos:position pos:line="28" pos:column="23"/></condition><then pos:line="28" pos:column="23">
            <block type="pseudo"><return pos:line="29" pos:column="13">return <expr><literal type="string" pos:line="29" pos:column="20">"Minimum data rate must be larger than 0"<pos:position pos:line="29" pos:column="61"/></literal></expr>;<pos:position pos:line="29" pos:column="62"/></return></block></then></if>

        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">max_str<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">=<pos:position pos:line="31" pos:column="23"/></operator> <call><name pos:line="31" pos:column="24">strchr<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name pos:line="31" pos:column="31">initial_str<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="31" pos:column="44">'-'<pos:position pos:line="31" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call><operator pos:line="31" pos:column="48">)<pos:position pos:line="31" pos:column="49"/></operator></expr>)<pos:position pos:line="31" pos:column="50"/></condition><then pos:line="31" pos:column="50"> <block pos:line="31" pos:column="51">{
            <expr_stmt><expr><operator pos:line="32" pos:column="13">*<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">max_str<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">++<pos:position pos:line="32" pos:column="23"/></operator> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <literal type="char" pos:line="32" pos:column="26">'\0'<pos:position pos:line="32" pos:column="30"/></literal></expr>;<pos:position pos:line="32" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name pos:line="33" pos:column="13">ret<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <call><name pos:line="33" pos:column="19">parse_int<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">p<pos:position pos:line="33" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="32">max_str<pos:position pos:line="33" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="41">&amp;<pos:position pos:line="33" pos:column="46"/></operator><name pos:line="33" pos:column="42">max<pos:position pos:line="33" pos:column="45"/></name></expr></argument>)<pos:position pos:line="33" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>
            <if pos:line="34" pos:column="13">if <condition pos:line="34" pos:column="16">(<expr><name pos:line="34" pos:column="17">ret<pos:position pos:line="34" pos:column="20"/></name></expr>)<pos:position pos:line="34" pos:column="21"/></condition><then pos:line="34" pos:column="21">
                <block type="pseudo"><return pos:line="35" pos:column="17">return <expr><name pos:line="35" pos:column="24">ret<pos:position pos:line="35" pos:column="27"/></name></expr>;<pos:position pos:line="35" pos:column="28"/></return></block></then></if>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="38" pos:column="9">ret<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <call><name pos:line="38" pos:column="15">parse_int<pos:position pos:line="38" pos:column="24"/></name><argument_list pos:line="38" pos:column="24">(<argument><expr><name pos:line="38" pos:column="25">p<pos:position pos:line="38" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="28">initial_str<pos:position pos:line="38" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="41">&amp;<pos:position pos:line="38" pos:column="46"/></operator><name pos:line="38" pos:column="42">initial<pos:position pos:line="38" pos:column="49"/></name></expr></argument>)<pos:position pos:line="38" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then>
    <else pos:line="40" pos:column="5">else <block pos:line="40" pos:column="10">{
        <if pos:line="41" pos:column="9">if <condition pos:line="41" pos:column="12">(<expr><call><name pos:line="41" pos:column="13">ap_strchr_c<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name pos:line="41" pos:column="25">val<pos:position pos:line="41" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="41" pos:column="30">'-'<pos:position pos:line="41" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="35"/></condition><then pos:line="41" pos:column="35">
            <block type="pseudo"><return pos:line="42" pos:column="13">return <expr><literal type="string" pos:line="42" pos:column="20">"Must set MinRate option if using timeout range"<pos:position pos:line="42" pos:column="68"/></literal></expr>;<pos:position pos:line="42" pos:column="69"/></return></block></then></if>
        <expr_stmt><expr><name pos:line="43" pos:column="9">ret<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <call><name pos:line="43" pos:column="15">parse_int<pos:position pos:line="43" pos:column="24"/></name><argument_list pos:line="43" pos:column="24">(<argument><expr><name pos:line="43" pos:column="25">p<pos:position pos:line="43" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="28">val<pos:position pos:line="43" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="33">&amp;<pos:position pos:line="43" pos:column="38"/></operator><name pos:line="43" pos:column="34">initial<pos:position pos:line="43" pos:column="41"/></name></expr></argument>)<pos:position pos:line="43" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></else></if>

    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><name pos:line="46" pos:column="9">ret<pos:position pos:line="46" pos:column="12"/></name></expr>)<pos:position pos:line="46" pos:column="13"/></condition><then pos:line="46" pos:column="13">
        <block type="pseudo"><return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">ret<pos:position pos:line="47" pos:column="19"/></name></expr>;<pos:position pos:line="47" pos:column="20"/></return></block></then></if>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">max<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">&amp;&amp;<pos:position pos:line="49" pos:column="23"/></operator> <name pos:line="49" pos:column="16">initial<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">&gt;=<pos:position pos:line="49" pos:column="29"/></operator> <name pos:line="49" pos:column="27">max<pos:position pos:line="49" pos:column="30"/></name></expr>)<pos:position pos:line="49" pos:column="31"/></condition><then pos:line="49" pos:column="31"> <block pos:line="49" pos:column="32">{
        <return pos:line="50" pos:column="9">return <expr><literal type="string" pos:line="50" pos:column="16">"Maximum timeout must be larger than initial timeout"<pos:position pos:line="50" pos:column="69"/></literal></expr>;<pos:position pos:line="50" pos:column="70"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">type<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">==<pos:position pos:line="53" pos:column="16"/></operator> <name pos:line="53" pos:column="17">PARAM_HEADER<pos:position pos:line="53" pos:column="29"/></name></expr>)<pos:position pos:line="53" pos:column="30"/></condition><then pos:line="53" pos:column="30"> <block pos:line="53" pos:column="31">{
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">conf<pos:position pos:line="54" pos:column="13"/></name><operator pos:line="54" pos:column="13">-&gt;<pos:position pos:line="54" pos:column="18"/></operator><name pos:line="54" pos:column="15">header_timeout<pos:position pos:line="54" pos:column="29"/></name></name> <operator pos:line="54" pos:column="30">=<pos:position pos:line="54" pos:column="31"/></operator> <name pos:line="54" pos:column="32">initial<pos:position pos:line="54" pos:column="39"/></name></expr>;<pos:position pos:line="54" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">conf<pos:position pos:line="55" pos:column="13"/></name><operator pos:line="55" pos:column="13">-&gt;<pos:position pos:line="55" pos:column="18"/></operator><name pos:line="55" pos:column="15">header_max_timeout<pos:position pos:line="55" pos:column="33"/></name></name> <operator pos:line="55" pos:column="34">=<pos:position pos:line="55" pos:column="35"/></operator> <name pos:line="55" pos:column="36">max<pos:position pos:line="55" pos:column="39"/></name></expr>;<pos:position pos:line="55" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">conf<pos:position pos:line="56" pos:column="13"/></name><operator pos:line="56" pos:column="13">-&gt;<pos:position pos:line="56" pos:column="18"/></operator><name pos:line="56" pos:column="15">header_min_rate<pos:position pos:line="56" pos:column="30"/></name></name> <operator pos:line="56" pos:column="31">=<pos:position pos:line="56" pos:column="32"/></operator> <name pos:line="56" pos:column="33">rate<pos:position pos:line="56" pos:column="37"/></name></expr>;<pos:position pos:line="56" pos:column="38"/></expr_stmt>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">rate<pos:position pos:line="57" pos:column="17"/></name></expr>)<pos:position pos:line="57" pos:column="18"/></condition><then pos:line="57" pos:column="18">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="58" pos:column="13">conf<pos:position pos:line="58" pos:column="17"/></name><operator pos:line="58" pos:column="17">-&gt;<pos:position pos:line="58" pos:column="22"/></operator><name pos:line="58" pos:column="19">header_rate_factor<pos:position pos:line="58" pos:column="37"/></name></name> <operator pos:line="58" pos:column="38">=<pos:position pos:line="58" pos:column="39"/></operator> <call><name pos:line="58" pos:column="40">apr_time_from_sec<pos:position pos:line="58" pos:column="57"/></name><argument_list pos:line="58" pos:column="57">(<argument><expr><literal type="number" pos:line="58" pos:column="58">1<pos:position pos:line="58" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="60"/></argument_list></call> <operator pos:line="58" pos:column="61">/<pos:position pos:line="58" pos:column="62"/></operator> <name pos:line="58" pos:column="63">rate<pos:position pos:line="58" pos:column="67"/></name></expr>;<pos:position pos:line="58" pos:column="68"/></expr_stmt></block></then></if>
    }<pos:position pos:line="59" pos:column="6"/></block></then>
    <else pos:line="60" pos:column="5">else <block pos:line="60" pos:column="10">{
        <expr_stmt><expr><name><name pos:line="61" pos:column="9">conf<pos:position pos:line="61" pos:column="13"/></name><operator pos:line="61" pos:column="13">-&gt;<pos:position pos:line="61" pos:column="18"/></operator><name pos:line="61" pos:column="15">body_timeout<pos:position pos:line="61" pos:column="27"/></name></name> <operator pos:line="61" pos:column="28">=<pos:position pos:line="61" pos:column="29"/></operator> <name pos:line="61" pos:column="30">initial<pos:position pos:line="61" pos:column="37"/></name></expr>;<pos:position pos:line="61" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="62" pos:column="9">conf<pos:position pos:line="62" pos:column="13"/></name><operator pos:line="62" pos:column="13">-&gt;<pos:position pos:line="62" pos:column="18"/></operator><name pos:line="62" pos:column="15">body_max_timeout<pos:position pos:line="62" pos:column="31"/></name></name> <operator pos:line="62" pos:column="32">=<pos:position pos:line="62" pos:column="33"/></operator> <name pos:line="62" pos:column="34">max<pos:position pos:line="62" pos:column="37"/></name></expr>;<pos:position pos:line="62" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="63" pos:column="9">conf<pos:position pos:line="63" pos:column="13"/></name><operator pos:line="63" pos:column="13">-&gt;<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="15">body_min_rate<pos:position pos:line="63" pos:column="28"/></name></name> <operator pos:line="63" pos:column="29">=<pos:position pos:line="63" pos:column="30"/></operator> <name pos:line="63" pos:column="31">rate<pos:position pos:line="63" pos:column="35"/></name></expr>;<pos:position pos:line="63" pos:column="36"/></expr_stmt>
        <if pos:line="64" pos:column="9">if <condition pos:line="64" pos:column="12">(<expr><name pos:line="64" pos:column="13">rate<pos:position pos:line="64" pos:column="17"/></name></expr>)<pos:position pos:line="64" pos:column="18"/></condition><then pos:line="64" pos:column="18">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="65" pos:column="13">conf<pos:position pos:line="65" pos:column="17"/></name><operator pos:line="65" pos:column="17">-&gt;<pos:position pos:line="65" pos:column="22"/></operator><name pos:line="65" pos:column="19">body_rate_factor<pos:position pos:line="65" pos:column="35"/></name></name> <operator pos:line="65" pos:column="36">=<pos:position pos:line="65" pos:column="37"/></operator> <call><name pos:line="65" pos:column="38">apr_time_from_sec<pos:position pos:line="65" pos:column="55"/></name><argument_list pos:line="65" pos:column="55">(<argument><expr><literal type="number" pos:line="65" pos:column="56">1<pos:position pos:line="65" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="58"/></argument_list></call> <operator pos:line="65" pos:column="59">/<pos:position pos:line="65" pos:column="60"/></operator> <name pos:line="65" pos:column="61">rate<pos:position pos:line="65" pos:column="65"/></name></expr>;<pos:position pos:line="65" pos:column="66"/></expr_stmt></block></then></if>
    }<pos:position pos:line="66" pos:column="6"/></block></else></if>
    <return pos:line="67" pos:column="5">return <expr><name pos:line="67" pos:column="12">ret<pos:position pos:line="67" pos:column="15"/></name></expr>;<pos:position pos:line="67" pos:column="16"/></return>
}<pos:position pos:line="68" pos:column="2"/></block></function></unit>
