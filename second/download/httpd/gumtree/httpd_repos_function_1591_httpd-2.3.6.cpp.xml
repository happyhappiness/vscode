<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1591_httpd-2.3.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">check_pipeline<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">conn_rec<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">c<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name><name pos:line="3" pos:column="9">c<pos:position pos:line="3" pos:column="10"/></name><operator pos:line="3" pos:column="10">-&gt;<pos:position pos:line="3" pos:column="15"/></operator><name pos:line="3" pos:column="12">keepalive<pos:position pos:line="3" pos:column="21"/></name></name> <operator pos:line="3" pos:column="22">!=<pos:position pos:line="3" pos:column="24"/></operator> <name pos:line="3" pos:column="25">AP_CONN_CLOSE<pos:position pos:line="3" pos:column="38"/></name></expr>)<pos:position pos:line="3" pos:column="39"/></condition><then pos:line="3" pos:column="39"> <block pos:line="3" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="4" pos:column="9">apr_status_t<pos:position pos:line="4" pos:column="21"/></name></type> <name pos:line="4" pos:column="22">rv<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">apr_bucket_brigade<pos:position pos:line="5" pos:column="27"/></name> <modifier pos:line="5" pos:column="28">*<pos:position pos:line="5" pos:column="29"/></modifier></type><name pos:line="5" pos:column="29">bb<pos:position pos:line="5" pos:column="31"/></name> <init pos:line="5" pos:column="32">= <expr><call><name pos:line="5" pos:column="34">apr_brigade_create<pos:position pos:line="5" pos:column="52"/></name><argument_list pos:line="5" pos:column="52">(<argument><expr><name><name pos:line="5" pos:column="53">c<pos:position pos:line="5" pos:column="54"/></name><operator pos:line="5" pos:column="54">-&gt;<pos:position pos:line="5" pos:column="59"/></operator><name pos:line="5" pos:column="56">pool<pos:position pos:line="5" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="5" pos:column="62">c<pos:position pos:line="5" pos:column="63"/></name><operator pos:line="5" pos:column="63">-&gt;<pos:position pos:line="5" pos:column="68"/></operator><name pos:line="5" pos:column="65">bucket_alloc<pos:position pos:line="5" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="78"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="79"/></decl_stmt>

        <expr_stmt><expr><name pos:line="7" pos:column="9">rv<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <call><name pos:line="7" pos:column="14">ap_get_brigade<pos:position pos:line="7" pos:column="28"/></name><argument_list pos:line="7" pos:column="28">(<argument><expr><name><name pos:line="7" pos:column="29">c<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">-&gt;<pos:position pos:line="7" pos:column="35"/></operator><name pos:line="7" pos:column="32">input_filters<pos:position pos:line="7" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="47">bb<pos:position pos:line="7" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="51">AP_MODE_SPECULATIVE<pos:position pos:line="7" pos:column="70"/></name></expr></argument>,
                            <argument><expr><name pos:line="8" pos:column="29">APR_NONBLOCK_READ<pos:position pos:line="8" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="8" pos:column="48">1<pos:position pos:line="8" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="51"/></expr_stmt>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">rv<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">!=<pos:position pos:line="9" pos:column="18"/></operator> <name pos:line="9" pos:column="19">APR_SUCCESS<pos:position pos:line="9" pos:column="30"/></name> <operator pos:line="9" pos:column="31">||<pos:position pos:line="9" pos:column="33"/></operator> <call><name pos:line="9" pos:column="34">APR_BRIGADE_EMPTY<pos:position pos:line="9" pos:column="51"/></name><argument_list pos:line="9" pos:column="51">(<argument><expr><name pos:line="9" pos:column="52">bb<pos:position pos:line="9" pos:column="54"/></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="56"/></condition><then pos:line="9" pos:column="56"> <block pos:line="9" pos:column="57">{
            <comment type="block" pos:line="10" pos:column="13">/*
             * Error or empty brigade: There is no data present in the input
             * filter
             */</comment>
            <expr_stmt><expr><name><name pos:line="14" pos:column="13">c<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">-&gt;<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="16">data_in_input_filters<pos:position pos:line="14" pos:column="37"/></name></name> <operator pos:line="14" pos:column="38">=<pos:position pos:line="14" pos:column="39"/></operator> <literal type="number" pos:line="14" pos:column="40">0<pos:position pos:line="14" pos:column="41"/></literal></expr>;<pos:position pos:line="14" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></then>
        <else pos:line="16" pos:column="9">else <block pos:line="16" pos:column="14">{
            <expr_stmt><expr><name><name pos:line="17" pos:column="13">c<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">data_in_input_filters<pos:position pos:line="17" pos:column="37"/></name></name> <operator pos:line="17" pos:column="38">=<pos:position pos:line="17" pos:column="39"/></operator> <literal type="number" pos:line="17" pos:column="40">1<pos:position pos:line="17" pos:column="41"/></literal></expr>;<pos:position pos:line="17" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">apr_brigade_destroy<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><name pos:line="19" pos:column="29">bb<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
}<pos:position pos:line="21" pos:column="2"/></block></function></unit>
