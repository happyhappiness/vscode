<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4011_httpd-2.2.34.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">wait_for_connect<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">apr_socket_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">sock<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">rc<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">timeval<pos:position pos:line="4" pos:column="19"/></name></name></type> <name pos:line="4" pos:column="20">tv<pos:position pos:line="4" pos:column="22"/></name></decl>, <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="25">tvptr<pos:position pos:line="4" pos:column="30"/></name></decl>;<pos:position pos:line="4" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">fd_set<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">wfdset<pos:position pos:line="5" pos:column="18"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="20">efdset<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* wait for the connect to complete or timeout */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">FD_ZERO<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><operator pos:line="8" pos:column="13">&amp;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="14">wfdset<pos:position pos:line="8" pos:column="20"/></name></expr></argument>)<pos:position pos:line="8" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">FD_SET<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name><name pos:line="9" pos:column="12">sock<pos:position pos:line="9" pos:column="16"/></name><operator pos:line="9" pos:column="16">-&gt;<pos:position pos:line="9" pos:column="21"/></operator><name pos:line="9" pos:column="18">socketdes<pos:position pos:line="9" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="9" pos:column="29">&amp;<pos:position pos:line="9" pos:column="34"/></operator><name pos:line="9" pos:column="30">wfdset<pos:position pos:line="9" pos:column="36"/></name></expr></argument>)<pos:position pos:line="9" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">FD_ZERO<pos:position pos:line="10" pos:column="12"/></name><argument_list pos:line="10" pos:column="12">(<argument><expr><operator pos:line="10" pos:column="13">&amp;<pos:position pos:line="10" pos:column="18"/></operator><name pos:line="10" pos:column="14">efdset<pos:position pos:line="10" pos:column="20"/></name></expr></argument>)<pos:position pos:line="10" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">FD_SET<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><name><name pos:line="11" pos:column="12">sock<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">socketdes<pos:position pos:line="11" pos:column="27"/></name></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="29">&amp;<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="30">efdset<pos:position pos:line="11" pos:column="36"/></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">sock<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">timeout<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">&lt;<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="25">0<pos:position pos:line="13" pos:column="26"/></literal></expr>)<pos:position pos:line="13" pos:column="27"/></condition><then pos:line="13" pos:column="27"> <block pos:line="13" pos:column="28">{
        <expr_stmt><expr><name pos:line="14" pos:column="9">tvptr<pos:position pos:line="14" pos:column="14"/></name> <operator pos:line="14" pos:column="15">=<pos:position pos:line="14" pos:column="16"/></operator> <name pos:line="14" pos:column="17">NULL<pos:position pos:line="14" pos:column="21"/></name></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then>
    <else pos:line="16" pos:column="5">else <block pos:line="16" pos:column="10">{
        <comment type="block" pos:line="17" pos:column="9">/* casts for winsock/timeval definition */</comment>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">tv<pos:position pos:line="18" pos:column="11"/></name><operator pos:line="18" pos:column="11">.<pos:position pos:line="18" pos:column="12"/></operator><name pos:line="18" pos:column="12">tv_sec<pos:position pos:line="18" pos:column="18"/></name></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator>  <operator pos:line="18" pos:column="22">(<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="23">long<pos:position pos:line="18" pos:column="27"/></name><operator pos:line="18" pos:column="27">)<pos:position pos:line="18" pos:column="28"/></operator><call><name pos:line="18" pos:column="28">apr_time_sec<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name><name pos:line="18" pos:column="41">sock<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">-&gt;<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="47">timeout<pos:position pos:line="18" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">tv<pos:position pos:line="19" pos:column="11"/></name><operator pos:line="19" pos:column="11">.<pos:position pos:line="19" pos:column="12"/></operator><name pos:line="19" pos:column="12">tv_usec<pos:position pos:line="19" pos:column="19"/></name></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <operator pos:line="19" pos:column="22">(<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="23">int<pos:position pos:line="19" pos:column="26"/></name><operator pos:line="19" pos:column="26">)<pos:position pos:line="19" pos:column="27"/></operator><call><name pos:line="19" pos:column="27">apr_time_usec<pos:position pos:line="19" pos:column="40"/></name><argument_list pos:line="19" pos:column="40">(<argument><expr><name><name pos:line="19" pos:column="41">sock<pos:position pos:line="19" pos:column="45"/></name><operator pos:line="19" pos:column="45">-&gt;<pos:position pos:line="19" pos:column="50"/></operator><name pos:line="19" pos:column="47">timeout<pos:position pos:line="19" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name pos:line="20" pos:column="9">tvptr<pos:position pos:line="20" pos:column="14"/></name> <operator pos:line="20" pos:column="15">=<pos:position pos:line="20" pos:column="16"/></operator> <operator pos:line="20" pos:column="17">&amp;<pos:position pos:line="20" pos:column="22"/></operator><name pos:line="20" pos:column="18">tv<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="22" pos:column="5">rc<pos:position pos:line="22" pos:column="7"/></name> <operator pos:line="22" pos:column="8">=<pos:position pos:line="22" pos:column="9"/></operator> <call><name pos:line="22" pos:column="10">select<pos:position pos:line="22" pos:column="16"/></name><argument_list pos:line="22" pos:column="16">(<argument><expr><name pos:line="22" pos:column="17">FD_SETSIZE<pos:position pos:line="22" pos:column="27"/></name><operator pos:line="22" pos:column="27">+<pos:position pos:line="22" pos:column="28"/></operator><literal type="number" pos:line="22" pos:column="28">1<pos:position pos:line="22" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="22" pos:column="31">NULL<pos:position pos:line="22" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="37">&amp;<pos:position pos:line="22" pos:column="42"/></operator><name pos:line="22" pos:column="38">wfdset<pos:position pos:line="22" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="46">&amp;<pos:position pos:line="22" pos:column="51"/></operator><name pos:line="22" pos:column="47">efdset<pos:position pos:line="22" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="55">tvptr<pos:position pos:line="22" pos:column="60"/></name></expr></argument>)<pos:position pos:line="22" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="62"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">rc<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">==<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">SOCKET_ERROR<pos:position pos:line="23" pos:column="27"/></name></expr>)<pos:position pos:line="23" pos:column="28"/></condition><then pos:line="23" pos:column="28"> <block pos:line="23" pos:column="29">{
        <return pos:line="24" pos:column="9">return <expr><call><name pos:line="24" pos:column="16">apr_get_netos_error<pos:position pos:line="24" pos:column="35"/></name><argument_list pos:line="24" pos:column="35">()<pos:position pos:line="24" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="38"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then>
    <elseif pos:line="26" pos:column="5">else <if pos:line="26" pos:column="10">if <condition pos:line="26" pos:column="13">(<expr><operator pos:line="26" pos:column="14">!<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">rc<pos:position pos:line="26" pos:column="17"/></name></expr>)<pos:position pos:line="26" pos:column="18"/></condition><then pos:line="26" pos:column="18"> <block pos:line="26" pos:column="19">{
        <return pos:line="27" pos:column="9">return <expr><call><name pos:line="27" pos:column="16">APR_FROM_OS_ERROR<pos:position pos:line="27" pos:column="33"/></name><argument_list pos:line="27" pos:column="33">(<argument><expr><name pos:line="27" pos:column="34">WSAETIMEDOUT<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if></elseif></if>
    <comment type="block" pos:line="29" pos:column="5">/* Evaluate the efdset */</comment>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><call><name pos:line="30" pos:column="9">FD_ISSET<pos:position pos:line="30" pos:column="17"/></name><argument_list pos:line="30" pos:column="17">(<argument><expr><name><name pos:line="30" pos:column="18">sock<pos:position pos:line="30" pos:column="22"/></name><operator pos:line="30" pos:column="22">-&gt;<pos:position pos:line="30" pos:column="27"/></operator><name pos:line="30" pos:column="24">socketdes<pos:position pos:line="30" pos:column="33"/></name></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="35">&amp;<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="36">efdset<pos:position pos:line="30" pos:column="42"/></name></expr></argument>)<pos:position pos:line="30" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="44"/></condition><then pos:line="30" pos:column="44"> <block pos:line="30" pos:column="45">{
        <comment type="block" pos:line="31" pos:column="9">/* The connect failed. */</comment>
        <decl_stmt><decl><type><name pos:line="32" pos:column="9">int<pos:position pos:line="32" pos:column="12"/></name></type> <name pos:line="32" pos:column="13">rclen<pos:position pos:line="32" pos:column="18"/></name> <init pos:line="32" pos:column="19">= <expr><sizeof pos:line="32" pos:column="21">sizeof<argument_list pos:line="32" pos:column="27">(<argument><expr><name pos:line="32" pos:column="28">rc<pos:position pos:line="32" pos:column="30"/></name></expr></argument>)<pos:position pos:line="32" pos:column="31"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="32" pos:column="32"/></decl_stmt>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">getsockopt<pos:position pos:line="33" pos:column="23"/></name><argument_list pos:line="33" pos:column="23">(<argument><expr><name><name pos:line="33" pos:column="24">sock<pos:position pos:line="33" pos:column="28"/></name><operator pos:line="33" pos:column="28">-&gt;<pos:position pos:line="33" pos:column="33"/></operator><name pos:line="33" pos:column="30">socketdes<pos:position pos:line="33" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="41">SOL_SOCKET<pos:position pos:line="33" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="53">SO_ERROR<pos:position pos:line="33" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="63">(<pos:position pos:line="33" pos:column="64"/></operator><name pos:line="33" pos:column="64">char<pos:position pos:line="33" pos:column="68"/></name><operator pos:line="33" pos:column="68">*<pos:position pos:line="33" pos:column="69"/></operator><operator pos:line="33" pos:column="69">)<pos:position pos:line="33" pos:column="70"/></operator> <operator pos:line="33" pos:column="71">&amp;<pos:position pos:line="33" pos:column="76"/></operator><name pos:line="33" pos:column="72">rc<pos:position pos:line="33" pos:column="74"/></name></expr></argument>, <argument><expr><operator pos:line="33" pos:column="76">&amp;<pos:position pos:line="33" pos:column="81"/></operator><name pos:line="33" pos:column="77">rclen<pos:position pos:line="33" pos:column="82"/></name></expr></argument>)<pos:position pos:line="33" pos:column="83"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="84"/></condition><then pos:line="33" pos:column="84"> <block pos:line="33" pos:column="85">{
            <return pos:line="34" pos:column="13">return <expr><call><name pos:line="34" pos:column="20">apr_get_netos_error<pos:position pos:line="34" pos:column="39"/></name><argument_list pos:line="34" pos:column="39">()<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></return>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>
        <return pos:line="36" pos:column="9">return <expr><call><name pos:line="36" pos:column="16">APR_FROM_OS_ERROR<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name pos:line="36" pos:column="34">rc<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">APR_SUCCESS<pos:position pos:line="39" pos:column="23"/></name></expr>;<pos:position pos:line="39" pos:column="24"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
