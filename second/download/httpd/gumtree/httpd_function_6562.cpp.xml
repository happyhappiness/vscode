<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6562.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">get_line<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">h2_response_parser<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">parser<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="58">apr_bucket_brigade<pos:position pos:line="1" pos:column="76"/></name> <modifier pos:line="1" pos:column="77">*<pos:position pos:line="1" pos:column="78"/></modifier></type><name pos:line="1" pos:column="78">bb<pos:position pos:line="1" pos:column="80"/></name></decl></parameter>, 
                             <parameter><decl><type><name pos:line="2" pos:column="30">char<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">line<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="42">apr_size_t<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">len<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="57"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">h2_task<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">task<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name><name pos:line="4" pos:column="21">parser<pos:position pos:line="4" pos:column="27"/></name><operator pos:line="4" pos:column="27">-&gt;<pos:position pos:line="4" pos:column="32"/></operator><name pos:line="4" pos:column="29">task<pos:position pos:line="4" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">status<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name><name pos:line="7" pos:column="10">parser<pos:position pos:line="7" pos:column="16"/></name><operator pos:line="7" pos:column="16">-&gt;<pos:position pos:line="7" pos:column="21"/></operator><name pos:line="7" pos:column="18">tmp<pos:position pos:line="7" pos:column="21"/></name></name></expr>)<pos:position pos:line="7" pos:column="22"/></condition><then pos:line="7" pos:column="22"> <block pos:line="7" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="8" pos:column="9">parser<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">tmp<pos:position pos:line="8" pos:column="20"/></name></name> <operator pos:line="8" pos:column="21">=<pos:position pos:line="8" pos:column="22"/></operator> <call><name pos:line="8" pos:column="23">apr_brigade_create<pos:position pos:line="8" pos:column="41"/></name><argument_list pos:line="8" pos:column="41">(<argument><expr><name><name pos:line="8" pos:column="42">task<pos:position pos:line="8" pos:column="46"/></name><operator pos:line="8" pos:column="46">-&gt;<pos:position pos:line="8" pos:column="51"/></operator><name pos:line="8" pos:column="48">pool<pos:position pos:line="8" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="8" pos:column="54">task<pos:position pos:line="8" pos:column="58"/></name><operator pos:line="8" pos:column="58">-&gt;<pos:position pos:line="8" pos:column="63"/></operator><name pos:line="8" pos:column="60">c<pos:position pos:line="8" pos:column="61"/></name><operator pos:line="8" pos:column="61">-&gt;<pos:position pos:line="8" pos:column="66"/></operator><name pos:line="8" pos:column="63">bucket_alloc<pos:position pos:line="8" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="8" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="10" pos:column="5">status<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">apr_brigade_split_line<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name><name pos:line="10" pos:column="37">parser<pos:position pos:line="10" pos:column="43"/></name><operator pos:line="10" pos:column="43">-&gt;<pos:position pos:line="10" pos:column="48"/></operator><name pos:line="10" pos:column="45">tmp<pos:position pos:line="10" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="50">bb<pos:position pos:line="10" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="54">APR_BLOCK_READ<pos:position pos:line="10" pos:column="68"/></name></expr></argument>, 
                                    <argument><expr><name pos:line="11" pos:column="37">HUGE_STRING_LEN<pos:position pos:line="11" pos:column="52"/></name></expr></argument>)<pos:position pos:line="11" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="54"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">status<pos:position pos:line="12" pos:column="15"/></name> <operator pos:line="12" pos:column="16">==<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">APR_SUCCESS<pos:position pos:line="12" pos:column="30"/></name></expr>)<pos:position pos:line="12" pos:column="31"/></condition><then pos:line="12" pos:column="31"> <block pos:line="12" pos:column="32">{
        <expr_stmt><expr><operator pos:line="13" pos:column="9">--<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">len<pos:position pos:line="13" pos:column="14"/></name></expr>;<pos:position pos:line="13" pos:column="15"/></expr_stmt>
        <expr_stmt><expr><name pos:line="14" pos:column="9">status<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">=<pos:position pos:line="14" pos:column="17"/></operator> <call><name pos:line="14" pos:column="18">apr_brigade_flatten<pos:position pos:line="14" pos:column="37"/></name><argument_list pos:line="14" pos:column="37">(<argument><expr><name><name pos:line="14" pos:column="38">parser<pos:position pos:line="14" pos:column="44"/></name><operator pos:line="14" pos:column="44">-&gt;<pos:position pos:line="14" pos:column="49"/></operator><name pos:line="14" pos:column="46">tmp<pos:position pos:line="14" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="51">line<pos:position pos:line="14" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="57">&amp;<pos:position pos:line="14" pos:column="62"/></operator><name pos:line="14" pos:column="58">len<pos:position pos:line="14" pos:column="61"/></name></expr></argument>)<pos:position pos:line="14" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="63"/></expr_stmt>
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">status<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">==<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">APR_SUCCESS<pos:position pos:line="15" pos:column="34"/></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <block pos:line="15" pos:column="36">{
            <comment type="block" pos:line="16" pos:column="13">/* we assume a non-0 containing line and remove trailing crlf. */</comment>
            <expr_stmt><expr><name><name pos:line="17" pos:column="13">line<pos:position pos:line="17" pos:column="17"/></name><index pos:line="17" pos:column="17">[<expr><name pos:line="17" pos:column="18">len<pos:position pos:line="17" pos:column="21"/></name></expr>]<pos:position pos:line="17" pos:column="22"/></index></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <literal type="char" pos:line="17" pos:column="25">'\0'<pos:position pos:line="17" pos:column="29"/></literal></expr>;<pos:position pos:line="17" pos:column="30"/></expr_stmt>
            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><name pos:line="18" pos:column="17">len<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">&gt;=<pos:position pos:line="18" pos:column="26"/></operator> <literal type="number" pos:line="18" pos:column="24">2<pos:position pos:line="18" pos:column="25"/></literal> <operator pos:line="18" pos:column="26">&amp;&amp;<pos:position pos:line="18" pos:column="36"/></operator> <operator pos:line="18" pos:column="29">!<pos:position pos:line="18" pos:column="30"/></operator><call><name pos:line="18" pos:column="30">strcmp<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><name pos:line="18" pos:column="37">H2_CRLF<pos:position pos:line="18" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="46">line<pos:position pos:line="18" pos:column="50"/></name> <operator pos:line="18" pos:column="51">+<pos:position pos:line="18" pos:column="52"/></operator> <name pos:line="18" pos:column="53">len<pos:position pos:line="18" pos:column="56"/></name> <operator pos:line="18" pos:column="57">-<pos:position pos:line="18" pos:column="58"/></operator> <literal type="number" pos:line="18" pos:column="59">2<pos:position pos:line="18" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="62"/></condition><then pos:line="18" pos:column="62"> <block pos:line="18" pos:column="63">{
                <expr_stmt><expr><name pos:line="19" pos:column="17">len<pos:position pos:line="19" pos:column="20"/></name> <operator pos:line="19" pos:column="21">-=<pos:position pos:line="19" pos:column="23"/></operator> <literal type="number" pos:line="19" pos:column="24">2<pos:position pos:line="19" pos:column="25"/></literal></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="20" pos:column="17">line<pos:position pos:line="20" pos:column="21"/></name><index pos:line="20" pos:column="21">[<expr><name pos:line="20" pos:column="22">len<pos:position pos:line="20" pos:column="25"/></name></expr>]<pos:position pos:line="20" pos:column="26"/></index></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <literal type="char" pos:line="20" pos:column="29">'\0'<pos:position pos:line="20" pos:column="33"/></literal></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="21" pos:column="17">apr_brigade_cleanup<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><name><name pos:line="21" pos:column="37">parser<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">-&gt;<pos:position pos:line="21" pos:column="48"/></operator><name pos:line="21" pos:column="45">tmp<pos:position pos:line="21" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="22" pos:column="17">ap_log_cerror<pos:position pos:line="22" pos:column="30"/></name><argument_list pos:line="22" pos:column="30">(<argument><expr><name pos:line="22" pos:column="31">APLOG_MARK<pos:position pos:line="22" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="43">APLOG_DEBUG<pos:position pos:line="22" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="22" pos:column="56">0<pos:position pos:line="22" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="59">task<pos:position pos:line="22" pos:column="63"/></name><operator pos:line="22" pos:column="63">-&gt;<pos:position pos:line="22" pos:column="68"/></operator><name pos:line="22" pos:column="65">c<pos:position pos:line="22" pos:column="66"/></name></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="23" pos:column="31">"h2_task(%s): read response line: %s"<pos:position pos:line="23" pos:column="68"/></literal></expr></argument>, 
                              <argument><expr><name><name pos:line="24" pos:column="31">task<pos:position pos:line="24" pos:column="35"/></name><operator pos:line="24" pos:column="35">-&gt;<pos:position pos:line="24" pos:column="40"/></operator><name pos:line="24" pos:column="37">id<pos:position pos:line="24" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">line<pos:position pos:line="24" pos:column="45"/></name></expr></argument>)<pos:position pos:line="24" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="25" pos:column="14"/></block></then>
            <else pos:line="26" pos:column="13">else <block pos:line="26" pos:column="18">{
                <comment type="block" pos:line="27" pos:column="17">/* this does not look like a complete line yet */</comment>
                <expr_stmt><expr><call><name pos:line="28" pos:column="17">ap_log_cerror<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">APLOG_MARK<pos:position pos:line="28" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="43">APLOG_DEBUG<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="56">0<pos:position pos:line="28" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="59">task<pos:position pos:line="28" pos:column="63"/></name><operator pos:line="28" pos:column="63">-&gt;<pos:position pos:line="28" pos:column="68"/></operator><name pos:line="28" pos:column="65">c<pos:position pos:line="28" pos:column="66"/></name></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="29" pos:column="31">"h2_task(%s): read response, incomplete line: %s"<pos:position pos:line="29" pos:column="80"/></literal></expr></argument>, 
                              <argument><expr><name><name pos:line="30" pos:column="31">task<pos:position pos:line="30" pos:column="35"/></name><operator pos:line="30" pos:column="35">-&gt;<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="37">id<pos:position pos:line="30" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="41">line<pos:position pos:line="30" pos:column="45"/></name></expr></argument>)<pos:position pos:line="30" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="47"/></expr_stmt>
                <return pos:line="31" pos:column="17">return <expr><name pos:line="31" pos:column="24">APR_EAGAIN<pos:position pos:line="31" pos:column="34"/></name></expr>;<pos:position pos:line="31" pos:column="35"/></return>
            }<pos:position pos:line="32" pos:column="14"/></block></else></if>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">apr_brigade_cleanup<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name><name pos:line="35" pos:column="25">parser<pos:position pos:line="35" pos:column="31"/></name><operator pos:line="35" pos:column="31">-&gt;<pos:position pos:line="35" pos:column="36"/></operator><name pos:line="35" pos:column="33">tmp<pos:position pos:line="35" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="38"/></expr_stmt>
    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">status<pos:position pos:line="36" pos:column="18"/></name></expr>;<pos:position pos:line="36" pos:column="19"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
