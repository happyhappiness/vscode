<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2356_httpd-2.2.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">unsigned<pos:position pos:line="1" pos:column="16"/></name> <name pos:line="1" pos:column="17">int<pos:position pos:line="1" pos:column="20"/></name> <name pos:line="1" pos:column="21">__stdcall<pos:position pos:line="1" pos:column="30"/></name></type> <name pos:line="1" pos:column="31">win9x_accept<pos:position pos:line="1" pos:column="43"/></name><parameter_list pos:line="1" pos:column="43">(<parameter><decl><type><name pos:line="1" pos:column="44">void<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type> <name pos:line="1" pos:column="51">dummy<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="3" pos:column="5">struct<pos:position pos:line="3" pos:column="11"/></name> <name pos:line="3" pos:column="12">timeval<pos:position pos:line="3" pos:column="19"/></name></name></type> <name pos:line="3" pos:column="20">tv<pos:position pos:line="3" pos:column="22"/></name></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">fd_set<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">main_fds<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">wait_time<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><literal type="number" pos:line="5" pos:column="21">1<pos:position pos:line="5" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">SOCKET<pos:position pos:line="6" pos:column="11"/></name></type> <name pos:line="6" pos:column="12">csd<pos:position pos:line="6" pos:column="15"/></name></decl>;<pos:position pos:line="6" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">SOCKET<pos:position pos:line="7" pos:column="11"/></name></type> <name pos:line="7" pos:column="12">nsd<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><name pos:line="7" pos:column="18">INVALID_SOCKET<pos:position pos:line="7" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">count_select_errors<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><literal type="number" pos:line="8" pos:column="31">0<pos:position pos:line="8" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">rc<pos:position pos:line="9" pos:column="11"/></name></decl>;<pos:position pos:line="9" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">clen<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">ap_listen_rec<pos:position pos:line="11" pos:column="18"/></name> <modifier pos:line="11" pos:column="19">*<pos:position pos:line="11" pos:column="20"/></modifier></type><name pos:line="11" pos:column="20">lr<pos:position pos:line="11" pos:column="22"/></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="12" pos:column="5">struct<pos:position pos:line="12" pos:column="11"/></name> <name pos:line="12" pos:column="12">fd_set<pos:position pos:line="12" pos:column="18"/></name></name></type> <name pos:line="12" pos:column="19">listenfds<pos:position pos:line="12" pos:column="28"/></name></decl>;<pos:position pos:line="12" pos:column="29"/></decl_stmt>
<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><name pos:line="13" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="13" pos:column="18"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="14" pos:column="5">struct<pos:position pos:line="14" pos:column="11"/></name> <name pos:line="14" pos:column="12">sockaddr_in6<pos:position pos:line="14" pos:column="24"/></name></name></type> <name pos:line="14" pos:column="25">sa_client<pos:position pos:line="14" pos:column="34"/></name></decl>;<pos:position pos:line="14" pos:column="35"/></decl_stmt>
<cpp:else pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">else<pos:position pos:line="15" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name pos:line="16" pos:column="5">struct<pos:position pos:line="16" pos:column="11"/></name> <name pos:line="16" pos:column="12">sockaddr_in<pos:position pos:line="16" pos:column="23"/></name></name></type> <name pos:line="16" pos:column="24">sa_client<pos:position pos:line="16" pos:column="33"/></name></decl>;<pos:position pos:line="16" pos:column="34"/></decl_stmt>
<cpp:endif pos:line="17" pos:column="1">#<cpp:directive pos:line="17" pos:column="2">endif<pos:position pos:line="17" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="19" pos:column="5">/* Setup the listeners
     * ToDo: Use apr_poll()
     */</comment>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">FD_ZERO<pos:position pos:line="22" pos:column="12"/></name><argument_list pos:line="22" pos:column="12">(<argument><expr><operator pos:line="22" pos:column="13">&amp;<pos:position pos:line="22" pos:column="18"/></operator><name pos:line="22" pos:column="14">listenfds<pos:position pos:line="22" pos:column="23"/></name></expr></argument>)<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>
    <for pos:line="23" pos:column="5">for <control pos:line="23" pos:column="9">(<init><expr><name pos:line="23" pos:column="10">lr<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">ap_listeners<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></init> <condition><expr><name pos:line="23" pos:column="29">lr<pos:position pos:line="23" pos:column="31"/></name></expr>;<pos:position pos:line="23" pos:column="32"/></condition> <incr><expr><name pos:line="23" pos:column="33">lr<pos:position pos:line="23" pos:column="35"/></name> <operator pos:line="23" pos:column="36">=<pos:position pos:line="23" pos:column="37"/></operator> <name><name pos:line="23" pos:column="38">lr<pos:position pos:line="23" pos:column="40"/></name><operator pos:line="23" pos:column="40">-&gt;<pos:position pos:line="23" pos:column="45"/></operator><name pos:line="23" pos:column="42">next<pos:position pos:line="23" pos:column="46"/></name></name></expr></incr>)<pos:position pos:line="23" pos:column="47"/></control> <block pos:line="23" pos:column="48">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name><name pos:line="24" pos:column="13">lr<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">-&gt;<pos:position pos:line="24" pos:column="20"/></operator><name pos:line="24" pos:column="17">sd<pos:position pos:line="24" pos:column="19"/></name></name> <operator pos:line="24" pos:column="20">!=<pos:position pos:line="24" pos:column="22"/></operator> <name pos:line="24" pos:column="23">NULL<pos:position pos:line="24" pos:column="27"/></name></expr>)<pos:position pos:line="24" pos:column="28"/></condition><then pos:line="24" pos:column="28"> <block pos:line="24" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">apr_os_sock_get<pos:position pos:line="25" pos:column="28"/></name><argument_list pos:line="25" pos:column="28">(<argument><expr><operator pos:line="25" pos:column="29">&amp;<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="30">nsd<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="25" pos:column="35">lr<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">-&gt;<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="39">sd<pos:position pos:line="25" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">FD_SET<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><name pos:line="26" pos:column="20">nsd<pos:position pos:line="26" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="25">&amp;<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="26">listenfds<pos:position pos:line="26" pos:column="35"/></name></expr></argument>)<pos:position pos:line="26" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="37"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">ap_log_error<pos:position pos:line="27" pos:column="25"/></name><argument_list pos:line="27" pos:column="25">(<argument><expr><name pos:line="27" pos:column="26">APLOG_MARK<pos:position pos:line="27" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="38">APLOG_NOTICE<pos:position pos:line="27" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="27" pos:column="52">0<pos:position pos:line="27" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="55">ap_server_conf<pos:position pos:line="27" pos:column="69"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="28" pos:column="26">"Child %d: Listening on port %d."<pos:position pos:line="28" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="61">my_pid<pos:position pos:line="28" pos:column="67"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="69">lr<pos:position pos:line="28" pos:column="71"/></name><operator pos:line="28" pos:column="71">-&gt;<pos:position pos:line="28" pos:column="76"/></operator><name pos:line="28" pos:column="73">bind_addr<pos:position pos:line="28" pos:column="82"/></name><operator pos:line="28" pos:column="82">-&gt;<pos:position pos:line="28" pos:column="87"/></operator><name pos:line="28" pos:column="84">port<pos:position pos:line="28" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="90"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="32" pos:column="5">head_listener<pos:position pos:line="32" pos:column="18"/></name> <operator pos:line="32" pos:column="19">=<pos:position pos:line="32" pos:column="20"/></operator> <name pos:line="32" pos:column="21">ap_listeners<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>

    <while pos:line="34" pos:column="5">while <condition pos:line="34" pos:column="11">(<expr><operator pos:line="34" pos:column="12">!<pos:position pos:line="34" pos:column="13"/></operator><name pos:line="34" pos:column="13">shutdown_in_progress<pos:position pos:line="34" pos:column="33"/></name></expr>)<pos:position pos:line="34" pos:column="34"/></condition> <block pos:line="34" pos:column="35">{
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">tv<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">.<pos:position pos:line="35" pos:column="12"/></operator><name pos:line="35" pos:column="12">tv_sec<pos:position pos:line="35" pos:column="18"/></name></name> <operator pos:line="35" pos:column="19">=<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">wait_time<pos:position pos:line="35" pos:column="30"/></name></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="36" pos:column="9">tv<pos:position pos:line="36" pos:column="11"/></name><operator pos:line="36" pos:column="11">.<pos:position pos:line="36" pos:column="12"/></operator><name pos:line="36" pos:column="12">tv_usec<pos:position pos:line="36" pos:column="19"/></name></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <literal type="number" pos:line="36" pos:column="22">0<pos:position pos:line="36" pos:column="23"/></literal></expr>;<pos:position pos:line="36" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">memcpy<pos:position pos:line="37" pos:column="15"/></name><argument_list pos:line="37" pos:column="15">(<argument><expr><operator pos:line="37" pos:column="16">&amp;<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="17">main_fds<pos:position pos:line="37" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="37" pos:column="27">&amp;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="28">listenfds<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="37" pos:column="39">sizeof<argument_list pos:line="37" pos:column="45">(<argument><expr><name pos:line="37" pos:column="46">fd_set<pos:position pos:line="37" pos:column="52"/></name></expr></argument>)<pos:position pos:line="37" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="37" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="55"/></expr_stmt>

        <comment type="block" pos:line="39" pos:column="9">/* First parameter of select() is ignored on Windows */</comment>
        <expr_stmt><expr><name pos:line="40" pos:column="9">rc<pos:position pos:line="40" pos:column="11"/></name> <operator pos:line="40" pos:column="12">=<pos:position pos:line="40" pos:column="13"/></operator> <call><name pos:line="40" pos:column="14">select<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><literal type="number" pos:line="40" pos:column="21">0<pos:position pos:line="40" pos:column="22"/></literal></expr></argument>, <argument><expr><operator pos:line="40" pos:column="24">&amp;<pos:position pos:line="40" pos:column="29"/></operator><name pos:line="40" pos:column="25">main_fds<pos:position pos:line="40" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="35">NULL<pos:position pos:line="40" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="41">NULL<pos:position pos:line="40" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="47">&amp;<pos:position pos:line="40" pos:column="52"/></operator><name pos:line="40" pos:column="48">tv<pos:position pos:line="40" pos:column="50"/></name></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>

        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">rc<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">==<pos:position pos:line="42" pos:column="18"/></operator> <literal type="number" pos:line="42" pos:column="19">0<pos:position pos:line="42" pos:column="20"/></literal> <operator pos:line="42" pos:column="21">||<pos:position pos:line="42" pos:column="23"/></operator> <operator pos:line="42" pos:column="24">(<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="25">rc<pos:position pos:line="42" pos:column="27"/></name> <operator pos:line="42" pos:column="28">==<pos:position pos:line="42" pos:column="30"/></operator> <name pos:line="42" pos:column="31">SOCKET_ERROR<pos:position pos:line="42" pos:column="43"/></name> <operator pos:line="42" pos:column="44">&amp;&amp;<pos:position pos:line="42" pos:column="54"/></operator> <call><name pos:line="42" pos:column="47">APR_STATUS_IS_EINTR<pos:position pos:line="42" pos:column="66"/></name><argument_list pos:line="42" pos:column="66">(<argument><expr><call><name pos:line="42" pos:column="67">apr_get_netos_error<pos:position pos:line="42" pos:column="86"/></name><argument_list pos:line="42" pos:column="86">()<pos:position pos:line="42" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="89"/></argument_list></call><operator pos:line="42" pos:column="89">)<pos:position pos:line="42" pos:column="90"/></operator></expr>)<pos:position pos:line="42" pos:column="91"/></condition><then pos:line="42" pos:column="91"> <block pos:line="42" pos:column="92">{
            <expr_stmt><expr><name pos:line="43" pos:column="13">count_select_errors<pos:position pos:line="43" pos:column="32"/></name> <operator pos:line="43" pos:column="33">=<pos:position pos:line="43" pos:column="34"/></operator> <literal type="number" pos:line="43" pos:column="35">0<pos:position pos:line="43" pos:column="36"/></literal></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>    <comment type="block" pos:line="43" pos:column="41">/* reset count of errors */</comment>
            <continue pos:line="44" pos:column="13">continue;<pos:position pos:line="44" pos:column="22"/></continue>
        }<pos:position pos:line="45" pos:column="10"/></block></then>
        <elseif pos:line="46" pos:column="9">else <if pos:line="46" pos:column="14">if <condition pos:line="46" pos:column="17">(<expr><name pos:line="46" pos:column="18">rc<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">==<pos:position pos:line="46" pos:column="23"/></operator> <name pos:line="46" pos:column="24">SOCKET_ERROR<pos:position pos:line="46" pos:column="36"/></name></expr>)<pos:position pos:line="46" pos:column="37"/></condition><then pos:line="46" pos:column="37"> <block pos:line="46" pos:column="38">{
            <comment type="block" pos:line="47" pos:column="13">/* A "real" error occurred, log it and increment the count of
             * select errors. This count is used to ensure we don't go into
             * a busy loop of continuous errors.
             */</comment>
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">ap_log_error<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">APLOG_MARK<pos:position pos:line="51" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="38">APLOG_INFO<pos:position pos:line="51" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="51" pos:column="50">apr_get_netos_error<pos:position pos:line="51" pos:column="69"/></name><argument_list pos:line="51" pos:column="69">()<pos:position pos:line="51" pos:column="71"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="51" pos:column="73">ap_server_conf<pos:position pos:line="51" pos:column="87"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="52" pos:column="26">"select failed with error %d"<pos:position pos:line="52" pos:column="55"/></literal></expr></argument>, <argument><expr><call><name pos:line="52" pos:column="57">apr_get_netos_error<pos:position pos:line="52" pos:column="76"/></name><argument_list pos:line="52" pos:column="76">()<pos:position pos:line="52" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="52" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="80"/></expr_stmt>
            <expr_stmt><expr><name pos:line="53" pos:column="13">count_select_errors<pos:position pos:line="53" pos:column="32"/></name><operator pos:line="53" pos:column="32">++<pos:position pos:line="53" pos:column="34"/></operator></expr>;<pos:position pos:line="53" pos:column="35"/></expr_stmt>
            <if pos:line="54" pos:column="13">if <condition pos:line="54" pos:column="16">(<expr><name pos:line="54" pos:column="17">count_select_errors<pos:position pos:line="54" pos:column="36"/></name> <operator pos:line="54" pos:column="37">&gt;<pos:position pos:line="54" pos:column="41"/></operator> <name pos:line="54" pos:column="39">MAX_SELECT_ERRORS<pos:position pos:line="54" pos:column="56"/></name></expr>)<pos:position pos:line="54" pos:column="57"/></condition><then pos:line="54" pos:column="57"> <block pos:line="54" pos:column="58">{
                <expr_stmt><expr><name pos:line="55" pos:column="17">shutdown_in_progress<pos:position pos:line="55" pos:column="37"/></name> <operator pos:line="55" pos:column="38">=<pos:position pos:line="55" pos:column="39"/></operator> <literal type="number" pos:line="55" pos:column="40">1<pos:position pos:line="55" pos:column="41"/></literal></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">ap_log_error<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">APLOG_MARK<pos:position pos:line="56" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="42">APLOG_ERR<pos:position pos:line="56" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="53">apr_get_netos_error<pos:position pos:line="56" pos:column="72"/></name><argument_list pos:line="56" pos:column="72">()<pos:position pos:line="56" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="56" pos:column="76">ap_server_conf<pos:position pos:line="56" pos:column="90"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="57" pos:column="30">"Too many errors in select loop. Child process exiting."<pos:position pos:line="57" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="87"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="88"/></expr_stmt>
                <break pos:line="58" pos:column="17">break;<pos:position pos:line="58" pos:column="23"/></break>
            }<pos:position pos:line="59" pos:column="14"/></block></then></if>
        }<pos:position pos:line="60" pos:column="10"/></block></then></if></elseif> <else pos:line="60" pos:column="11">else <block pos:line="60" pos:column="16">{
            <decl_stmt><decl><type><name pos:line="61" pos:column="13">ap_listen_rec<pos:position pos:line="61" pos:column="26"/></name> <modifier pos:line="61" pos:column="27">*<pos:position pos:line="61" pos:column="28"/></modifier></type><name pos:line="61" pos:column="28">lr<pos:position pos:line="61" pos:column="30"/></name></decl>;<pos:position pos:line="61" pos:column="31"/></decl_stmt>

            <expr_stmt><expr><name pos:line="63" pos:column="13">lr<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">=<pos:position pos:line="63" pos:column="17"/></operator> <call><name pos:line="63" pos:column="18">find_ready_listener<pos:position pos:line="63" pos:column="37"/></name><argument_list pos:line="63" pos:column="37">(<argument><expr><operator pos:line="63" pos:column="38">&amp;<pos:position pos:line="63" pos:column="43"/></operator><name pos:line="63" pos:column="39">main_fds<pos:position pos:line="63" pos:column="47"/></name></expr></argument>)<pos:position pos:line="63" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="49"/></expr_stmt>
            <if pos:line="64" pos:column="13">if <condition pos:line="64" pos:column="16">(<expr><name pos:line="64" pos:column="17">lr<pos:position pos:line="64" pos:column="19"/></name> <operator pos:line="64" pos:column="20">!=<pos:position pos:line="64" pos:column="22"/></operator> <name pos:line="64" pos:column="23">NULL<pos:position pos:line="64" pos:column="27"/></name></expr>)<pos:position pos:line="64" pos:column="28"/></condition><then pos:line="64" pos:column="28"> <block pos:line="64" pos:column="29">{
                <comment type="block" pos:line="65" pos:column="17">/* fetch the native socket descriptor */</comment>
                <expr_stmt><expr><call><name pos:line="66" pos:column="17">apr_os_sock_get<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(<argument><expr><operator pos:line="66" pos:column="33">&amp;<pos:position pos:line="66" pos:column="38"/></operator><name pos:line="66" pos:column="34">nsd<pos:position pos:line="66" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="39">lr<pos:position pos:line="66" pos:column="41"/></name><operator pos:line="66" pos:column="41">-&gt;<pos:position pos:line="66" pos:column="46"/></operator><name pos:line="66" pos:column="43">sd<pos:position pos:line="66" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="67" pos:column="14"/></block></then></if>
        }<pos:position pos:line="68" pos:column="10"/></block></else></if>

        <do pos:line="70" pos:column="9">do <block pos:line="70" pos:column="12">{
            <expr_stmt><expr><name pos:line="71" pos:column="13">clen<pos:position pos:line="71" pos:column="17"/></name> <operator pos:line="71" pos:column="18">=<pos:position pos:line="71" pos:column="19"/></operator> <sizeof pos:line="71" pos:column="20">sizeof<argument_list pos:line="71" pos:column="26">(<argument><expr><name pos:line="71" pos:column="27">sa_client<pos:position pos:line="71" pos:column="36"/></name></expr></argument>)<pos:position pos:line="71" pos:column="37"/></argument_list></sizeof></expr>;<pos:position pos:line="71" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name pos:line="72" pos:column="13">csd<pos:position pos:line="72" pos:column="16"/></name> <operator pos:line="72" pos:column="17">=<pos:position pos:line="72" pos:column="18"/></operator> <call><name pos:line="72" pos:column="19">accept<pos:position pos:line="72" pos:column="25"/></name><argument_list pos:line="72" pos:column="25">(<argument><expr><name pos:line="72" pos:column="26">nsd<pos:position pos:line="72" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="31">(<pos:position pos:line="72" pos:column="32"/></operator>struct <name pos:line="72" pos:column="39">sockaddr<pos:position pos:line="72" pos:column="47"/></name> <operator pos:line="72" pos:column="48">*<pos:position pos:line="72" pos:column="49"/></operator><operator pos:line="72" pos:column="49">)<pos:position pos:line="72" pos:column="50"/></operator> <operator pos:line="72" pos:column="51">&amp;<pos:position pos:line="72" pos:column="56"/></operator><name pos:line="72" pos:column="52">sa_client<pos:position pos:line="72" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="72" pos:column="63">&amp;<pos:position pos:line="72" pos:column="68"/></operator><name pos:line="72" pos:column="64">clen<pos:position pos:line="72" pos:column="68"/></name></expr></argument>)<pos:position pos:line="72" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="70"/></expr_stmt>
        }<pos:position pos:line="73" pos:column="10"/></block> while <condition pos:line="73" pos:column="17">(<expr><name pos:line="73" pos:column="18">csd<pos:position pos:line="73" pos:column="21"/></name> <operator pos:line="73" pos:column="22">&lt;<pos:position pos:line="73" pos:column="26"/></operator> <literal type="number" pos:line="73" pos:column="24">0<pos:position pos:line="73" pos:column="25"/></literal> <operator pos:line="73" pos:column="26">&amp;&amp;<pos:position pos:line="73" pos:column="36"/></operator> <call><name pos:line="73" pos:column="29">APR_STATUS_IS_EINTR<pos:position pos:line="73" pos:column="48"/></name><argument_list pos:line="73" pos:column="48">(<argument><expr><call><name pos:line="73" pos:column="49">apr_get_netos_error<pos:position pos:line="73" pos:column="68"/></name><argument_list pos:line="73" pos:column="68">()<pos:position pos:line="73" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="73" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="73" pos:column="72"/></condition>;<pos:position pos:line="73" pos:column="73"/></do>

        <if pos:line="75" pos:column="9">if <condition pos:line="75" pos:column="12">(<expr><name pos:line="75" pos:column="13">csd<pos:position pos:line="75" pos:column="16"/></name> <operator pos:line="75" pos:column="17">&lt;<pos:position pos:line="75" pos:column="21"/></operator> <literal type="number" pos:line="75" pos:column="19">0<pos:position pos:line="75" pos:column="20"/></literal></expr>)<pos:position pos:line="75" pos:column="21"/></condition><then pos:line="75" pos:column="21"> <block pos:line="75" pos:column="22">{
            <if pos:line="76" pos:column="13">if <condition pos:line="76" pos:column="16">(<expr><call><name pos:line="76" pos:column="17">APR_STATUS_IS_ECONNABORTED<pos:position pos:line="76" pos:column="43"/></name><argument_list pos:line="76" pos:column="43">(<argument><expr><call><name pos:line="76" pos:column="44">apr_get_netos_error<pos:position pos:line="76" pos:column="63"/></name><argument_list pos:line="76" pos:column="63">()<pos:position pos:line="76" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="76" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="76" pos:column="67"/></condition><then pos:line="76" pos:column="67"> <block pos:line="76" pos:column="68">{
                <expr_stmt><expr><call><name pos:line="77" pos:column="17">ap_log_error<pos:position pos:line="77" pos:column="29"/></name><argument_list pos:line="77" pos:column="29">(<argument><expr><name pos:line="77" pos:column="30">APLOG_MARK<pos:position pos:line="77" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="42">APLOG_ERR<pos:position pos:line="77" pos:column="51"/></name></expr></argument>, <argument><expr><call><name pos:line="77" pos:column="53">apr_get_netos_error<pos:position pos:line="77" pos:column="72"/></name><argument_list pos:line="77" pos:column="72">()<pos:position pos:line="77" pos:column="74"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="77" pos:column="76">ap_server_conf<pos:position pos:line="77" pos:column="90"/></name></expr></argument>,
                            <argument><expr><literal type="string" pos:line="78" pos:column="29">"accept: (client socket)"<pos:position pos:line="78" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="56"/></expr_stmt>
            }<pos:position pos:line="79" pos:column="14"/></block></then></if>
        }<pos:position pos:line="80" pos:column="10"/></block></then>
        <else pos:line="81" pos:column="9">else <block pos:line="81" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="82" pos:column="13">add_job<pos:position pos:line="82" pos:column="20"/></name><argument_list pos:line="82" pos:column="20">(<argument><expr><name pos:line="82" pos:column="21">csd<pos:position pos:line="82" pos:column="24"/></name></expr></argument>)<pos:position pos:line="82" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="83" pos:column="10"/></block></else></if>
    }<pos:position pos:line="84" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">SetEvent<pos:position pos:line="85" pos:column="13"/></name><argument_list pos:line="85" pos:column="13">(<argument><expr><name pos:line="85" pos:column="14">exit_event<pos:position pos:line="85" pos:column="24"/></name></expr></argument>)<pos:position pos:line="85" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="26"/></expr_stmt>
    <return pos:line="86" pos:column="5">return <expr><literal type="number" pos:line="86" pos:column="12">0<pos:position pos:line="86" pos:column="13"/></literal></expr>;<pos:position pos:line="86" pos:column="14"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
