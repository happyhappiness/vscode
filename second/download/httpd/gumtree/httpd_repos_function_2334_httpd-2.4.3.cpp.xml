<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2334_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">CaseFilterOutFilter<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">ap_filter_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">f<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="2" pos:column="41">apr_bucket_brigade<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">pbbIn<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="67"/></parameter_list>
    <block pos:line="3" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">request_rec<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">r<pos:position pos:line="4" pos:column="19"/></name> <init pos:line="4" pos:column="20">= <expr><name><name pos:line="4" pos:column="22">f<pos:position pos:line="4" pos:column="23"/></name><operator pos:line="4" pos:column="23">-&gt;<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="25">r<pos:position pos:line="4" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">conn_rec<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">c<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name><name pos:line="5" pos:column="19">r<pos:position pos:line="5" pos:column="20"/></name><operator pos:line="5" pos:column="20">-&gt;<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="22">connection<pos:position pos:line="5" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_bucket<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">pbktIn<pos:position pos:line="6" pos:column="23"/></name></decl>;<pos:position pos:line="6" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_bucket_brigade<pos:position pos:line="7" pos:column="23"/></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">pbbOut<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><name pos:line="9" pos:column="5">pbbOut<pos:position pos:line="9" pos:column="11"/></name><operator pos:line="9" pos:column="11">=<pos:position pos:line="9" pos:column="12"/></operator><call><name pos:line="9" pos:column="12">apr_brigade_create<pos:position pos:line="9" pos:column="30"/></name><argument_list pos:line="9" pos:column="30">(<argument><expr><name><name pos:line="9" pos:column="31">r<pos:position pos:line="9" pos:column="32"/></name><operator pos:line="9" pos:column="32">-&gt;<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="34">pool<pos:position pos:line="9" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="40">c<pos:position pos:line="9" pos:column="41"/></name><operator pos:line="9" pos:column="41">-&gt;<pos:position pos:line="9" pos:column="46"/></operator><name pos:line="9" pos:column="43">bucket_alloc<pos:position pos:line="9" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="57"/></expr_stmt>
    <for pos:line="10" pos:column="5">for <control pos:line="10" pos:column="9">(<init><expr><name pos:line="10" pos:column="10">pbktIn<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <call><name pos:line="10" pos:column="19">APR_BRIGADE_FIRST<pos:position pos:line="10" pos:column="36"/></name><argument_list pos:line="10" pos:column="36">(<argument><expr><name pos:line="10" pos:column="37">pbbIn<pos:position pos:line="10" pos:column="42"/></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="44"/></init>
         <condition><expr><name pos:line="11" pos:column="10">pbktIn<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">!=<pos:position pos:line="11" pos:column="19"/></operator> <call><name pos:line="11" pos:column="20">APR_BRIGADE_SENTINEL<pos:position pos:line="11" pos:column="40"/></name><argument_list pos:line="11" pos:column="40">(<argument><expr><name pos:line="11" pos:column="41">pbbIn<pos:position pos:line="11" pos:column="46"/></name></expr></argument>)<pos:position pos:line="11" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="48"/></condition>
         <incr><expr><name pos:line="12" pos:column="10">pbktIn<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <call><name pos:line="12" pos:column="19">APR_BUCKET_NEXT<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">pbktIn<pos:position pos:line="12" pos:column="41"/></name></expr></argument>)<pos:position pos:line="12" pos:column="42"/></argument_list></call></expr></incr>)<pos:position pos:line="12" pos:column="43"/></control>
    <block pos:line="13" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="14" pos:column="9">const<pos:position pos:line="14" pos:column="14"/></specifier> <name pos:line="14" pos:column="15">char<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">data<pos:position pos:line="14" pos:column="25"/></name></decl>;<pos:position pos:line="14" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">apr_size_t<pos:position pos:line="15" pos:column="19"/></name></type> <name pos:line="15" pos:column="20">len<pos:position pos:line="15" pos:column="23"/></name></decl>;<pos:position pos:line="15" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">char<pos:position pos:line="16" pos:column="13"/></name> <modifier pos:line="16" pos:column="14">*<pos:position pos:line="16" pos:column="15"/></modifier></type><name pos:line="16" pos:column="15">buf<pos:position pos:line="16" pos:column="18"/></name></decl>;<pos:position pos:line="16" pos:column="19"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">apr_size_t<pos:position pos:line="17" pos:column="19"/></name></type> <name pos:line="17" pos:column="20">n<pos:position pos:line="17" pos:column="21"/></name></decl>;<pos:position pos:line="17" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">apr_bucket<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">pbktOut<pos:position pos:line="18" pos:column="28"/></name></decl>;<pos:position pos:line="18" pos:column="29"/></decl_stmt>

        <if pos:line="20" pos:column="9">if<condition pos:line="20" pos:column="11">(<expr><call><name pos:line="20" pos:column="12">APR_BUCKET_IS_EOS<pos:position pos:line="20" pos:column="29"/></name><argument_list pos:line="20" pos:column="29">(<argument><expr><name pos:line="20" pos:column="30">pbktIn<pos:position pos:line="20" pos:column="36"/></name></expr></argument>)<pos:position pos:line="20" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38">
            <block pos:line="21" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="22" pos:column="13">apr_bucket<pos:position pos:line="22" pos:column="23"/></name> <modifier pos:line="22" pos:column="24">*<pos:position pos:line="22" pos:column="25"/></modifier></type><name pos:line="22" pos:column="25">pbktEOS<pos:position pos:line="22" pos:column="32"/></name><init pos:line="22" pos:column="32">=<expr><call><name pos:line="22" pos:column="33">apr_bucket_eos_create<pos:position pos:line="22" pos:column="54"/></name><argument_list pos:line="22" pos:column="54">(<argument><expr><name><name pos:line="22" pos:column="55">c<pos:position pos:line="22" pos:column="56"/></name><operator pos:line="22" pos:column="56">-&gt;<pos:position pos:line="22" pos:column="61"/></operator><name pos:line="22" pos:column="58">bucket_alloc<pos:position pos:line="22" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="22" pos:column="72"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="23" pos:column="36"/></name><argument_list pos:line="23" pos:column="36">(<argument><expr><name pos:line="23" pos:column="37">pbbOut<pos:position pos:line="23" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="23" pos:column="44">pbktEOS<pos:position pos:line="23" pos:column="51"/></name></expr></argument>)<pos:position pos:line="23" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="53"/></expr_stmt>
            <continue pos:line="24" pos:column="13">continue;<pos:position pos:line="24" pos:column="22"/></continue>
            }<pos:position pos:line="25" pos:column="14"/></block></then></if>

        <comment type="block" pos:line="27" pos:column="9">/* read */</comment>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">apr_bucket_read<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">pbktIn<pos:position pos:line="28" pos:column="31"/></name></expr></argument>,<argument><expr><operator pos:line="28" pos:column="32">&amp;<pos:position pos:line="28" pos:column="37"/></operator><name pos:line="28" pos:column="33">data<pos:position pos:line="28" pos:column="37"/></name></expr></argument>,<argument><expr><operator pos:line="28" pos:column="38">&amp;<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="39">len<pos:position pos:line="28" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="28" pos:column="43">APR_BLOCK_READ<pos:position pos:line="28" pos:column="57"/></name></expr></argument>)<pos:position pos:line="28" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="59"/></expr_stmt>

        <comment type="block" pos:line="30" pos:column="9">/* write */</comment>
        <expr_stmt><expr><name pos:line="31" pos:column="9">buf<pos:position pos:line="31" pos:column="12"/></name> <operator pos:line="31" pos:column="13">=<pos:position pos:line="31" pos:column="14"/></operator> <call><name pos:line="31" pos:column="15">apr_bucket_alloc<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><name pos:line="31" pos:column="32">len<pos:position pos:line="31" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="31" pos:column="37">c<pos:position pos:line="31" pos:column="38"/></name><operator pos:line="31" pos:column="38">-&gt;<pos:position pos:line="31" pos:column="43"/></operator><name pos:line="31" pos:column="40">bucket_alloc<pos:position pos:line="31" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="54"/></expr_stmt>
        <for pos:line="32" pos:column="9">for<control pos:line="32" pos:column="12">(<init><expr><name pos:line="32" pos:column="13">n<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">=<pos:position pos:line="32" pos:column="15"/></operator><literal type="number" pos:line="32" pos:column="15">0<pos:position pos:line="32" pos:column="16"/></literal></expr> ;<pos:position pos:line="32" pos:column="18"/></init> <condition><expr><name pos:line="32" pos:column="19">n<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">&lt;<pos:position pos:line="32" pos:column="25"/></operator> <name pos:line="32" pos:column="23">len<pos:position pos:line="32" pos:column="26"/></name></expr> ;<pos:position pos:line="32" pos:column="28"/></condition> <incr><expr><operator pos:line="32" pos:column="29">++<pos:position pos:line="32" pos:column="31"/></operator><name pos:line="32" pos:column="31">n<pos:position pos:line="32" pos:column="32"/></name></expr></incr>)<pos:position pos:line="32" pos:column="33"/></control>
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="33" pos:column="13">buf<pos:position pos:line="33" pos:column="16"/></name><index pos:line="33" pos:column="16">[<expr><name pos:line="33" pos:column="17">n<pos:position pos:line="33" pos:column="18"/></name></expr>]<pos:position pos:line="33" pos:column="19"/></index></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <call><name pos:line="33" pos:column="22">apr_toupper<pos:position pos:line="33" pos:column="33"/></name><argument_list pos:line="33" pos:column="33">(<argument><expr><name><name pos:line="33" pos:column="34">data<pos:position pos:line="33" pos:column="38"/></name><index pos:line="33" pos:column="38">[<expr><name pos:line="33" pos:column="39">n<pos:position pos:line="33" pos:column="40"/></name></expr>]<pos:position pos:line="33" pos:column="41"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="43"/></expr_stmt></block></for>

        <expr_stmt><expr><name pos:line="35" pos:column="9">pbktOut<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <call><name pos:line="35" pos:column="19">apr_bucket_heap_create<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name pos:line="35" pos:column="42">buf<pos:position pos:line="35" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="47">len<pos:position pos:line="35" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="52">apr_bucket_free<pos:position pos:line="35" pos:column="67"/></name></expr></argument>,
                                         <argument><expr><name><name pos:line="36" pos:column="42">c<pos:position pos:line="36" pos:column="43"/></name><operator pos:line="36" pos:column="43">-&gt;<pos:position pos:line="36" pos:column="48"/></operator><name pos:line="36" pos:column="45">bucket_alloc<pos:position pos:line="36" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">pbbOut<pos:position pos:line="37" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="37" pos:column="40">pbktOut<pos:position pos:line="37" pos:column="47"/></name></expr></argument>)<pos:position pos:line="37" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="49"/></expr_stmt>
        }<pos:position pos:line="38" pos:column="10"/></block></for>

    <comment type="block" pos:line="40" pos:column="5">/* Q: is there any advantage to passing a brigade for each bucket?
     * A: obviously, it can cut down server resource consumption, if this
     * experimental module was fed a file of 4MB, it would be using 8MB for
     * the 'read' buckets and the 'write' buckets.
     *
     * Note it is more efficient to consume (destroy) each bucket as it's
     * processed above than to do a single cleanup down here.  In any case,
     * don't let our caller pass the same buckets to us, twice;
     */</comment>
    <expr_stmt><expr><call><name pos:line="49" pos:column="5">apr_brigade_cleanup<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name pos:line="49" pos:column="25">pbbIn<pos:position pos:line="49" pos:column="30"/></name></expr></argument>)<pos:position pos:line="49" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="32"/></expr_stmt>
    <return pos:line="50" pos:column="5">return <expr><call><name pos:line="50" pos:column="12">ap_pass_brigade<pos:position pos:line="50" pos:column="27"/></name><argument_list pos:line="50" pos:column="27">(<argument><expr><name><name pos:line="50" pos:column="28">f<pos:position pos:line="50" pos:column="29"/></name><operator pos:line="50" pos:column="29">-&gt;<pos:position pos:line="50" pos:column="34"/></operator><name pos:line="50" pos:column="31">next<pos:position pos:line="50" pos:column="35"/></name></name></expr></argument>,<argument><expr><name pos:line="50" pos:column="36">pbbOut<pos:position pos:line="50" pos:column="42"/></name></expr></argument>)<pos:position pos:line="50" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="44"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></function></unit>
