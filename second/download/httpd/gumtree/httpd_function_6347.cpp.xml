<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6347.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">read_to_scratch<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">h2_conn_io<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">io<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">apr_bucket<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier></type><name pos:line="1" pos:column="65">b<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">status<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">data<pos:position pos:line="4" pos:column="21"/></name></decl>;<pos:position pos:line="4" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">len<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>
    
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name><name pos:line="7" pos:column="10">b<pos:position pos:line="7" pos:column="11"/></name><operator pos:line="7" pos:column="11">-&gt;<pos:position pos:line="7" pos:column="16"/></operator><name pos:line="7" pos:column="13">length<pos:position pos:line="7" pos:column="19"/></name></name></expr>)<pos:position pos:line="7" pos:column="20"/></condition><then pos:line="7" pos:column="20"> <block pos:line="7" pos:column="21">{
        <return pos:line="8" pos:column="9">return <expr><name pos:line="8" pos:column="16">APR_SUCCESS<pos:position pos:line="8" pos:column="27"/></name></expr>;<pos:position pos:line="8" pos:column="28"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">AP_DEBUG_ASSERT<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name><name pos:line="11" pos:column="21">b<pos:position pos:line="11" pos:column="22"/></name><operator pos:line="11" pos:column="22">-&gt;<pos:position pos:line="11" pos:column="27"/></operator><name pos:line="11" pos:column="24">length<pos:position pos:line="11" pos:column="30"/></name></name> <operator pos:line="11" pos:column="31">&lt;=<pos:position pos:line="11" pos:column="36"/></operator> <operator pos:line="11" pos:column="34">(<pos:position pos:line="11" pos:column="35"/></operator><name><name pos:line="11" pos:column="35">io<pos:position pos:line="11" pos:column="37"/></name><operator pos:line="11" pos:column="37">-&gt;<pos:position pos:line="11" pos:column="42"/></operator><name pos:line="11" pos:column="39">ssize<pos:position pos:line="11" pos:column="44"/></name></name> <operator pos:line="11" pos:column="45">-<pos:position pos:line="11" pos:column="46"/></operator> <name><name pos:line="11" pos:column="47">io<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">-&gt;<pos:position pos:line="11" pos:column="54"/></operator><name pos:line="11" pos:column="51">slen<pos:position pos:line="11" pos:column="55"/></name></name><operator pos:line="11" pos:column="55">)<pos:position pos:line="11" pos:column="56"/></operator></expr></argument>)<pos:position pos:line="11" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="58"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">APR_BUCKET_IS_FILE<pos:position pos:line="12" pos:column="27"/></name><argument_list pos:line="12" pos:column="27">(<argument><expr><name pos:line="12" pos:column="28">b<pos:position pos:line="12" pos:column="29"/></name></expr></argument>)<pos:position pos:line="12" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="12" pos:column="31"/></condition><then pos:line="12" pos:column="31"> <block pos:line="12" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="13" pos:column="9">apr_bucket_file<pos:position pos:line="13" pos:column="24"/></name> <modifier pos:line="13" pos:column="25">*<pos:position pos:line="13" pos:column="26"/></modifier></type><name pos:line="13" pos:column="26">f<pos:position pos:line="13" pos:column="27"/></name> <init pos:line="13" pos:column="28">= <expr><operator pos:line="13" pos:column="30">(<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">apr_bucket_file<pos:position pos:line="13" pos:column="46"/></name> <operator pos:line="13" pos:column="47">*<pos:position pos:line="13" pos:column="48"/></operator><operator pos:line="13" pos:column="48">)<pos:position pos:line="13" pos:column="49"/></operator><name><name pos:line="13" pos:column="49">b<pos:position pos:line="13" pos:column="50"/></name><operator pos:line="13" pos:column="50">-&gt;<pos:position pos:line="13" pos:column="55"/></operator><name pos:line="13" pos:column="52">data<pos:position pos:line="13" pos:column="56"/></name></name></expr></init></decl>;<pos:position pos:line="13" pos:column="57"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="14" pos:column="9">apr_file_t<pos:position pos:line="14" pos:column="19"/></name> <modifier pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></modifier></type><name pos:line="14" pos:column="21">fd<pos:position pos:line="14" pos:column="23"/></name> <init pos:line="14" pos:column="24">= <expr><name><name pos:line="14" pos:column="26">f<pos:position pos:line="14" pos:column="27"/></name><operator pos:line="14" pos:column="27">-&gt;<pos:position pos:line="14" pos:column="32"/></operator><name pos:line="14" pos:column="29">fd<pos:position pos:line="14" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="14" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">apr_off_t<pos:position pos:line="15" pos:column="18"/></name></type> <name pos:line="15" pos:column="19">offset<pos:position pos:line="15" pos:column="25"/></name> <init pos:line="15" pos:column="26">= <expr><name><name pos:line="15" pos:column="28">b<pos:position pos:line="15" pos:column="29"/></name><operator pos:line="15" pos:column="29">-&gt;<pos:position pos:line="15" pos:column="34"/></operator><name pos:line="15" pos:column="31">start<pos:position pos:line="15" pos:column="36"/></name></name></expr></init></decl>;<pos:position pos:line="15" pos:column="37"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="16" pos:column="9">apr_size_t<pos:position pos:line="16" pos:column="19"/></name></type> <name pos:line="16" pos:column="20">len<pos:position pos:line="16" pos:column="23"/></name> <init pos:line="16" pos:column="24">= <expr><name><name pos:line="16" pos:column="26">b<pos:position pos:line="16" pos:column="27"/></name><operator pos:line="16" pos:column="27">-&gt;<pos:position pos:line="16" pos:column="32"/></operator><name pos:line="16" pos:column="29">length<pos:position pos:line="16" pos:column="35"/></name></name></expr></init></decl>;<pos:position pos:line="16" pos:column="36"/></decl_stmt>
        
        <comment type="block" pos:line="18" pos:column="9">/* file buckets will either mmap (which we do not want) or
         * read 8000 byte chunks and split themself. However, we do
         * know *exactly* how many bytes we need where.
         */</comment>
        <expr_stmt><expr><name pos:line="22" pos:column="9">status<pos:position pos:line="22" pos:column="15"/></name> <operator pos:line="22" pos:column="16">=<pos:position pos:line="22" pos:column="17"/></operator> <call><name pos:line="22" pos:column="18">apr_file_seek<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name pos:line="22" pos:column="32">fd<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="36">APR_SET<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="45">&amp;<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="46">offset<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">status<pos:position pos:line="23" pos:column="19"/></name> <operator pos:line="23" pos:column="20">!=<pos:position pos:line="23" pos:column="22"/></operator> <name pos:line="23" pos:column="23">APR_SUCCESS<pos:position pos:line="23" pos:column="34"/></name></expr>)<pos:position pos:line="23" pos:column="35"/></condition><then pos:line="23" pos:column="35"> <block pos:line="23" pos:column="36">{
            <return pos:line="24" pos:column="13">return <expr><name pos:line="24" pos:column="20">status<pos:position pos:line="24" pos:column="26"/></name></expr>;<pos:position pos:line="24" pos:column="27"/></return>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="26" pos:column="9">status<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <call><name pos:line="26" pos:column="18">apr_file_read<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">fd<pos:position pos:line="26" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="36">io<pos:position pos:line="26" pos:column="38"/></name><operator pos:line="26" pos:column="38">-&gt;<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="40">scratch<pos:position pos:line="26" pos:column="47"/></name></name> <operator pos:line="26" pos:column="48">+<pos:position pos:line="26" pos:column="49"/></operator> <name><name pos:line="26" pos:column="50">io<pos:position pos:line="26" pos:column="52"/></name><operator pos:line="26" pos:column="52">-&gt;<pos:position pos:line="26" pos:column="57"/></operator><name pos:line="26" pos:column="54">slen<pos:position pos:line="26" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="26" pos:column="60">&amp;<pos:position pos:line="26" pos:column="65"/></operator><name pos:line="26" pos:column="61">len<pos:position pos:line="26" pos:column="64"/></name></expr></argument>)<pos:position pos:line="26" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="66"/></expr_stmt>
<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><name pos:line="27" pos:column="5">LOG_SCRATCH<pos:position pos:line="27" pos:column="16"/></name></expr></cpp:if>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">ap_log_cerror<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">APLOG_MARK<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="35">APLOG_DEBUG<pos:position pos:line="28" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="48">status<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="56">io<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">-&gt;<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="60">c<pos:position pos:line="28" pos:column="61"/></name></name></expr></argument>, <argument><expr><call><name pos:line="28" pos:column="63">APLOGNO<pos:position pos:line="28" pos:column="70"/></name><argument_list pos:line="28" pos:column="70">(<argument><expr><literal type="number" pos:line="28" pos:column="71">03387<pos:position pos:line="28" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="77"/></argument_list></call>
                      <literal type="string" pos:line="29" pos:column="23">"h2_conn_io(%ld): FILE_to_scratch(%ld)"<pos:position pos:line="29" pos:column="62"/></literal></expr></argument>, 
                      <argument><expr><name><name pos:line="30" pos:column="23">io<pos:position pos:line="30" pos:column="25"/></name><operator pos:line="30" pos:column="25">-&gt;<pos:position pos:line="30" pos:column="30"/></operator><name pos:line="30" pos:column="27">c<pos:position pos:line="30" pos:column="28"/></name><operator pos:line="30" pos:column="28">-&gt;<pos:position pos:line="30" pos:column="33"/></operator><name pos:line="30" pos:column="30">id<pos:position pos:line="30" pos:column="32"/></name></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="34">(<pos:position pos:line="30" pos:column="35"/></operator><name pos:line="30" pos:column="35">long<pos:position pos:line="30" pos:column="39"/></name><operator pos:line="30" pos:column="39">)<pos:position pos:line="30" pos:column="40"/></operator><name pos:line="30" pos:column="40">len<pos:position pos:line="30" pos:column="43"/></name></expr></argument>)<pos:position pos:line="30" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="45"/></expr_stmt> 
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name pos:line="32" pos:column="13">status<pos:position pos:line="32" pos:column="19"/></name> <operator pos:line="32" pos:column="20">!=<pos:position pos:line="32" pos:column="22"/></operator> <name pos:line="32" pos:column="23">APR_SUCCESS<pos:position pos:line="32" pos:column="34"/></name> <operator pos:line="32" pos:column="35">&amp;&amp;<pos:position pos:line="32" pos:column="45"/></operator> <name pos:line="32" pos:column="38">status<pos:position pos:line="32" pos:column="44"/></name> <operator pos:line="32" pos:column="45">!=<pos:position pos:line="32" pos:column="47"/></operator> <name pos:line="32" pos:column="48">APR_EOF<pos:position pos:line="32" pos:column="55"/></name></expr>)<pos:position pos:line="32" pos:column="56"/></condition><then pos:line="32" pos:column="56"> <block pos:line="32" pos:column="57">{
            <return pos:line="33" pos:column="13">return <expr><name pos:line="33" pos:column="20">status<pos:position pos:line="33" pos:column="26"/></name></expr>;<pos:position pos:line="33" pos:column="27"/></return>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="35" pos:column="9">io<pos:position pos:line="35" pos:column="11"/></name><operator pos:line="35" pos:column="11">-&gt;<pos:position pos:line="35" pos:column="16"/></operator><name pos:line="35" pos:column="13">slen<pos:position pos:line="35" pos:column="17"/></name></name> <operator pos:line="35" pos:column="18">+=<pos:position pos:line="35" pos:column="20"/></operator> <name pos:line="35" pos:column="21">len<pos:position pos:line="35" pos:column="24"/></name></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></then>
    <else pos:line="37" pos:column="5">else <block pos:line="37" pos:column="10">{
        <expr_stmt><expr><name pos:line="38" pos:column="9">status<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <call><name pos:line="38" pos:column="18">apr_bucket_read<pos:position pos:line="38" pos:column="33"/></name><argument_list pos:line="38" pos:column="33">(<argument><expr><name pos:line="38" pos:column="34">b<pos:position pos:line="38" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="37">&amp;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="38">data<pos:position pos:line="38" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="44">&amp;<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="45">len<pos:position pos:line="38" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="50">APR_BLOCK_READ<pos:position pos:line="38" pos:column="64"/></name></expr></argument>)<pos:position pos:line="38" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="66"/></expr_stmt>
        <if pos:line="39" pos:column="9">if <condition pos:line="39" pos:column="12">(<expr><name pos:line="39" pos:column="13">status<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">==<pos:position pos:line="39" pos:column="22"/></operator> <name pos:line="39" pos:column="23">APR_SUCCESS<pos:position pos:line="39" pos:column="34"/></name></expr>)<pos:position pos:line="39" pos:column="35"/></condition><then pos:line="39" pos:column="35"> <block pos:line="39" pos:column="36">{
<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><name pos:line="40" pos:column="5">LOG_SCRATCH<pos:position pos:line="40" pos:column="16"/></name></expr></cpp:if>
            <expr_stmt><expr><call><name pos:line="41" pos:column="13">ap_log_cerror<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><name pos:line="41" pos:column="27">APLOG_MARK<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="39">APLOG_DEBUG<pos:position pos:line="41" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="52">0<pos:position pos:line="41" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="55">io<pos:position pos:line="41" pos:column="57"/></name><operator pos:line="41" pos:column="57">-&gt;<pos:position pos:line="41" pos:column="62"/></operator><name pos:line="41" pos:column="59">c<pos:position pos:line="41" pos:column="60"/></name></name></expr></argument>, <argument><expr><call><name pos:line="41" pos:column="62">APLOGNO<pos:position pos:line="41" pos:column="69"/></name><argument_list pos:line="41" pos:column="69">(<argument><expr><literal type="number" pos:line="41" pos:column="70">03388<pos:position pos:line="41" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="76"/></argument_list></call>
                          <literal type="string" pos:line="42" pos:column="27">"h2_conn_io(%ld): read_to_scratch(%ld)"<pos:position pos:line="42" pos:column="66"/></literal></expr></argument>, 
                          <argument><expr><name><name pos:line="43" pos:column="27">io<pos:position pos:line="43" pos:column="29"/></name><operator pos:line="43" pos:column="29">-&gt;<pos:position pos:line="43" pos:column="34"/></operator><name pos:line="43" pos:column="31">c<pos:position pos:line="43" pos:column="32"/></name><operator pos:line="43" pos:column="32">-&gt;<pos:position pos:line="43" pos:column="37"/></operator><name pos:line="43" pos:column="34">id<pos:position pos:line="43" pos:column="36"/></name></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="38">(<pos:position pos:line="43" pos:column="39"/></operator><name pos:line="43" pos:column="39">long<pos:position pos:line="43" pos:column="43"/></name><operator pos:line="43" pos:column="43">)<pos:position pos:line="43" pos:column="44"/></operator><name><name pos:line="43" pos:column="44">b<pos:position pos:line="43" pos:column="45"/></name><operator pos:line="43" pos:column="45">-&gt;<pos:position pos:line="43" pos:column="50"/></operator><name pos:line="43" pos:column="47">length<pos:position pos:line="43" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="55"/></expr_stmt> 
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">memcpy<pos:position pos:line="45" pos:column="19"/></name><argument_list pos:line="45" pos:column="19">(<argument><expr><name><name pos:line="45" pos:column="20">io<pos:position pos:line="45" pos:column="22"/></name><operator pos:line="45" pos:column="22">-&gt;<pos:position pos:line="45" pos:column="27"/></operator><name pos:line="45" pos:column="24">scratch<pos:position pos:line="45" pos:column="31"/></name></name><operator pos:line="45" pos:column="31">+<pos:position pos:line="45" pos:column="32"/></operator><name><name pos:line="45" pos:column="32">io<pos:position pos:line="45" pos:column="34"/></name><operator pos:line="45" pos:column="34">-&gt;<pos:position pos:line="45" pos:column="39"/></operator><name pos:line="45" pos:column="36">slen<pos:position pos:line="45" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="42">data<pos:position pos:line="45" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="48">len<pos:position pos:line="45" pos:column="51"/></name></expr></argument>)<pos:position pos:line="45" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="46" pos:column="13">io<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">-&gt;<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="17">slen<pos:position pos:line="46" pos:column="21"/></name></name> <operator pos:line="46" pos:column="22">+=<pos:position pos:line="46" pos:column="24"/></operator> <name pos:line="46" pos:column="25">len<pos:position pos:line="46" pos:column="28"/></name></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>
    }<pos:position pos:line="48" pos:column="6"/></block></else></if>
    <return pos:line="49" pos:column="5">return <expr><name pos:line="49" pos:column="12">status<pos:position pos:line="49" pos:column="18"/></name></expr>;<pos:position pos:line="49" pos:column="19"/></return>
}<pos:position pos:line="50" pos:column="2"/></block></function></unit>
