<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2169_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">perchild_hooks<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">apr_pool_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">p<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="block" pos:line="3" pos:column="5">/* The perchild open_logs phase must run before the core's, or stderr
     * will be redirected to a file, and the messages won't print to the
     * console.
     */</comment>
    <decl_stmt><decl><specifier pos:line="7" pos:column="5">static<pos:position pos:line="7" pos:column="11"/></specifier> <type><specifier pos:line="7" pos:column="12">const<pos:position pos:line="7" pos:column="17"/></specifier> <name pos:line="7" pos:column="18">char<pos:position pos:line="7" pos:column="22"/></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier><specifier pos:line="7" pos:column="24">const<pos:position pos:line="7" pos:column="29"/></specifier></type> <name><name pos:line="7" pos:column="30">aszSucc<pos:position pos:line="7" pos:column="37"/></name><index pos:line="7" pos:column="37">[]<pos:position pos:line="7" pos:column="39"/></index></name> <init pos:line="7" pos:column="40">= <expr><block pos:line="7" pos:column="42">{<expr><literal type="string" pos:line="7" pos:column="43">"core.c"<pos:position pos:line="7" pos:column="51"/></literal></expr>, <expr><name pos:line="7" pos:column="53">NULL<pos:position pos:line="7" pos:column="57"/></name></expr>}<pos:position pos:line="7" pos:column="58"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="59"/></decl_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">one_process<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <literal type="number" pos:line="8" pos:column="19">0<pos:position pos:line="8" pos:column="20"/></literal></expr>;<pos:position pos:line="8" pos:column="21"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="10" pos:column="5">ap_hook_open_logs<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">perchild_open_logs<pos:position pos:line="10" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="43">NULL<pos:position pos:line="10" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="49">aszSucc<pos:position pos:line="10" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="58">APR_HOOK_MIDDLE<pos:position pos:line="10" pos:column="73"/></name></expr></argument>)<pos:position pos:line="10" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">ap_hook_pre_config<pos:position pos:line="11" pos:column="23"/></name><argument_list pos:line="11" pos:column="23">(<argument><expr><name pos:line="11" pos:column="24">perchild_pre_config<pos:position pos:line="11" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="45">NULL<pos:position pos:line="11" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="51">NULL<pos:position pos:line="11" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="57">APR_HOOK_MIDDLE<pos:position pos:line="11" pos:column="72"/></name></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt> 
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">ap_hook_post_config<pos:position pos:line="12" pos:column="24"/></name><argument_list pos:line="12" pos:column="24">(<argument><expr><name pos:line="12" pos:column="25">perchild_post_config<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="47">NULL<pos:position pos:line="12" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="53">NULL<pos:position pos:line="12" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="59">APR_HOOK_MIDDLE<pos:position pos:line="12" pos:column="74"/></name></expr></argument>)<pos:position pos:line="12" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="76"/></expr_stmt> 

    <comment type="block" pos:line="14" pos:column="5">/* Both of these must be run absolutely first.  If this request isn't for 
     * this server then we need to forward it to the proper child.  No sense
     * tying up this server running more post_read request hooks if it is
     * just going to be forwarded along.  The process_connection hook allows
     * perchild to receive the passed request correctly, by automatically
     * filling in the core_input_filter's ctx pointer.
     */</comment>
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">ap_hook_post_read_request<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">perchild_post_read<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="51">NULL<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="57">NULL<pos:position pos:line="21" pos:column="61"/></name></expr></argument>,
                              <argument><expr><name pos:line="22" pos:column="31">APR_HOOK_REALLY_FIRST<pos:position pos:line="22" pos:column="52"/></name></expr></argument>)<pos:position pos:line="22" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="54"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">ap_hook_process_connection<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">perchild_process_connection<pos:position pos:line="23" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="61">NULL<pos:position pos:line="23" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="67">NULL<pos:position pos:line="23" pos:column="71"/></name></expr></argument>, 
                               <argument><expr><name pos:line="24" pos:column="32">APR_HOOK_REALLY_FIRST<pos:position pos:line="24" pos:column="53"/></name></expr></argument>)<pos:position pos:line="24" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="55"/></expr_stmt>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
