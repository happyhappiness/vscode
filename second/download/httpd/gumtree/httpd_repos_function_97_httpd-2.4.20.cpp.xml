<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_97_httpd-2.4.20.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">read_connection<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">connection<pos:position pos:line="1" pos:column="46"/></name></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type> <name pos:line="1" pos:column="49">c<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="51"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">r<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">status<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">part<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">respcode<pos:position pos:line="6" pos:column="18"/></name><index pos:line="6" pos:column="18">[<expr><literal type="number" pos:line="6" pos:column="19">4<pos:position pos:line="6" pos:column="20"/></literal></expr>]<pos:position pos:line="6" pos:column="21"/></index></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>       <comment type="block" pos:line="6" pos:column="29">/* 3 digits and null */</comment>

    <expr_stmt><expr><name pos:line="8" pos:column="5">r<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <sizeof pos:line="8" pos:column="9">sizeof<argument_list pos:line="8" pos:column="15">(<argument><expr><name pos:line="8" pos:column="16">buffer<pos:position pos:line="8" pos:column="22"/></name></expr></argument>)<pos:position pos:line="8" pos:column="23"/></argument_list></sizeof></expr>;<pos:position pos:line="8" pos:column="24"/></expr_stmt>
<cpp:ifdef pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">ifdef<pos:position pos:line="9" pos:column="7"/></cpp:directive> <name pos:line="9" pos:column="8">USE_SSL<pos:position pos:line="9" pos:column="15"/></name></cpp:ifdef>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">c<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">ssl<pos:position pos:line="10" pos:column="15"/></name></name></expr>)<pos:position pos:line="10" pos:column="16"/></condition><then pos:line="10" pos:column="16"> <block pos:line="10" pos:column="17">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">status<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <call><name pos:line="11" pos:column="18">SSL_read<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><name><name pos:line="11" pos:column="27">c<pos:position pos:line="11" pos:column="28"/></name><operator pos:line="11" pos:column="28">-&gt;<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="30">ssl<pos:position pos:line="11" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="35">buffer<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">r<pos:position pos:line="11" pos:column="44"/></name></expr></argument>)<pos:position pos:line="11" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="46"/></expr_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">status<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">&lt;=<pos:position pos:line="12" pos:column="25"/></operator> <literal type="number" pos:line="12" pos:column="23">0<pos:position pos:line="12" pos:column="24"/></literal></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25"> <block pos:line="12" pos:column="26">{
            <decl_stmt><decl><type><name pos:line="13" pos:column="13">int<pos:position pos:line="13" pos:column="16"/></name></type> <name pos:line="13" pos:column="17">scode<pos:position pos:line="13" pos:column="22"/></name> <init pos:line="13" pos:column="23">= <expr><call><name pos:line="13" pos:column="25">SSL_get_error<pos:position pos:line="13" pos:column="38"/></name><argument_list pos:line="13" pos:column="38">(<argument><expr><name><name pos:line="13" pos:column="39">c<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">-&gt;<pos:position pos:line="13" pos:column="45"/></operator><name pos:line="13" pos:column="42">ssl<pos:position pos:line="13" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="47">status<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="13" pos:column="55"/></decl_stmt>

            <if pos:line="15" pos:column="13">if <condition pos:line="15" pos:column="16">(<expr><name pos:line="15" pos:column="17">scode<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">==<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">SSL_ERROR_ZERO_RETURN<pos:position pos:line="15" pos:column="47"/></name></expr>)<pos:position pos:line="15" pos:column="48"/></condition><then pos:line="15" pos:column="48"> <block pos:line="15" pos:column="49">{
                <comment type="block" pos:line="16" pos:column="17">/* connection closed cleanly: */</comment>
                <expr_stmt><expr><name pos:line="17" pos:column="17">good<pos:position pos:line="17" pos:column="21"/></name><operator pos:line="17" pos:column="21">++<pos:position pos:line="17" pos:column="23"/></operator></expr>;<pos:position pos:line="17" pos:column="24"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="18" pos:column="17">close_connection<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name pos:line="18" pos:column="34">c<pos:position pos:line="18" pos:column="35"/></name></expr></argument>)<pos:position pos:line="18" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="19" pos:column="14"/></block></then>
            <elseif pos:line="20" pos:column="13">else <if pos:line="20" pos:column="18">if <condition pos:line="20" pos:column="21">(<expr><name pos:line="20" pos:column="22">scode<pos:position pos:line="20" pos:column="27"/></name> <operator pos:line="20" pos:column="28">==<pos:position pos:line="20" pos:column="30"/></operator> <name pos:line="20" pos:column="31">SSL_ERROR_SYSCALL<pos:position pos:line="20" pos:column="48"/></name>
                     <operator pos:line="21" pos:column="22">&amp;&amp;<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="25">status<pos:position pos:line="21" pos:column="31"/></name> <operator pos:line="21" pos:column="32">==<pos:position pos:line="21" pos:column="34"/></operator> <literal type="number" pos:line="21" pos:column="35">0<pos:position pos:line="21" pos:column="36"/></literal>
                     <operator pos:line="22" pos:column="22">&amp;&amp;<pos:position pos:line="22" pos:column="32"/></operator> <name><name pos:line="22" pos:column="25">c<pos:position pos:line="22" pos:column="26"/></name><operator pos:line="22" pos:column="26">-&gt;<pos:position pos:line="22" pos:column="31"/></operator><name pos:line="22" pos:column="28">read<pos:position pos:line="22" pos:column="32"/></name></name> <operator pos:line="22" pos:column="33">!=<pos:position pos:line="22" pos:column="35"/></operator> <literal type="number" pos:line="22" pos:column="36">0<pos:position pos:line="22" pos:column="37"/></literal></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38"> <block pos:line="22" pos:column="39">{
                <comment type="block" pos:line="23" pos:column="17">/* connection closed, but in violation of the protocol, after
                 * some data has already been read; this commonly happens, so
                 * let the length check catch any response errors
                 */</comment>
                <expr_stmt><expr><name pos:line="27" pos:column="17">good<pos:position pos:line="27" pos:column="21"/></name><operator pos:line="27" pos:column="21">++<pos:position pos:line="27" pos:column="23"/></operator></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="28" pos:column="17">close_connection<pos:position pos:line="28" pos:column="33"/></name><argument_list pos:line="28" pos:column="33">(<argument><expr><name pos:line="28" pos:column="34">c<pos:position pos:line="28" pos:column="35"/></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="29" pos:column="14"/></block></then></if></elseif>
            <elseif pos:line="30" pos:column="13">else <if pos:line="30" pos:column="18">if <condition pos:line="30" pos:column="21">(<expr><name pos:line="30" pos:column="22">scode<pos:position pos:line="30" pos:column="27"/></name> <operator pos:line="30" pos:column="28">!=<pos:position pos:line="30" pos:column="30"/></operator> <name pos:line="30" pos:column="31">SSL_ERROR_WANT_WRITE<pos:position pos:line="30" pos:column="51"/></name>
                     <operator pos:line="31" pos:column="22">&amp;&amp;<pos:position pos:line="31" pos:column="32"/></operator> <name pos:line="31" pos:column="25">scode<pos:position pos:line="31" pos:column="30"/></name> <operator pos:line="31" pos:column="31">!=<pos:position pos:line="31" pos:column="33"/></operator> <name pos:line="31" pos:column="34">SSL_ERROR_WANT_READ<pos:position pos:line="31" pos:column="53"/></name></expr>)<pos:position pos:line="31" pos:column="54"/></condition><then pos:line="31" pos:column="54"> <block pos:line="31" pos:column="55">{
                <comment type="block" pos:line="32" pos:column="17">/* some fatal error: */</comment>
                <expr_stmt><expr><name><name pos:line="33" pos:column="17">c<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">-&gt;<pos:position pos:line="33" pos:column="23"/></operator><name pos:line="33" pos:column="20">read<pos:position pos:line="33" pos:column="24"/></name></name> <operator pos:line="33" pos:column="25">=<pos:position pos:line="33" pos:column="26"/></operator> <literal type="number" pos:line="33" pos:column="27">0<pos:position pos:line="33" pos:column="28"/></literal></expr>;<pos:position pos:line="33" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="34" pos:column="17">BIO_printf<pos:position pos:line="34" pos:column="27"/></name><argument_list pos:line="34" pos:column="27">(<argument><expr><name pos:line="34" pos:column="28">bio_err<pos:position pos:line="34" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="34" pos:column="37">"SSL read failed (%d) - closing connection\n"<pos:position pos:line="34" pos:column="82"/></literal></expr></argument>, <argument><expr><name pos:line="34" pos:column="84">scode<pos:position pos:line="34" pos:column="89"/></name></expr></argument>)<pos:position pos:line="34" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="91"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="35" pos:column="17">ERR_print_errors<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">(<argument><expr><name pos:line="35" pos:column="34">bio_err<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">close_connection<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name pos:line="36" pos:column="34">c<pos:position pos:line="36" pos:column="35"/></name></expr></argument>)<pos:position pos:line="36" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="37" pos:column="14"/></block></then></if></elseif></if>
            <return pos:line="38" pos:column="13">return;<pos:position pos:line="38" pos:column="20"/></return>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="40" pos:column="9">r<pos:position pos:line="40" pos:column="10"/></name> <operator pos:line="40" pos:column="11">=<pos:position pos:line="40" pos:column="12"/></operator> <name pos:line="40" pos:column="13">status<pos:position pos:line="40" pos:column="19"/></name></expr>;<pos:position pos:line="40" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then>
    <else pos:line="42" pos:column="5">else
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="44" pos:column="5">{
        <expr_stmt><expr><name pos:line="45" pos:column="9">status<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <call><name pos:line="45" pos:column="18">apr_socket_recv<pos:position pos:line="45" pos:column="33"/></name><argument_list pos:line="45" pos:column="33">(<argument><expr><name><name pos:line="45" pos:column="34">c<pos:position pos:line="45" pos:column="35"/></name><operator pos:line="45" pos:column="35">-&gt;<pos:position pos:line="45" pos:column="40"/></operator><name pos:line="45" pos:column="37">aprsock<pos:position pos:line="45" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="46">buffer<pos:position pos:line="45" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="45" pos:column="54">&amp;<pos:position pos:line="45" pos:column="59"/></operator><name pos:line="45" pos:column="55">r<pos:position pos:line="45" pos:column="56"/></name></expr></argument>)<pos:position pos:line="45" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="58"/></expr_stmt>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">APR_STATUS_IS_EAGAIN<pos:position pos:line="46" pos:column="33"/></name><argument_list pos:line="46" pos:column="33">(<argument><expr><name pos:line="46" pos:column="34">status<pos:position pos:line="46" pos:column="40"/></name></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="46" pos:column="42"/></condition><then pos:line="46" pos:column="42">
            <block type="pseudo"><return pos:line="47" pos:column="13">return;<pos:position pos:line="47" pos:column="20"/></return></block></then>
        <elseif pos:line="48" pos:column="9">else <if pos:line="48" pos:column="14">if <condition pos:line="48" pos:column="17">(<expr><name pos:line="48" pos:column="18">r<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">==<pos:position pos:line="48" pos:column="22"/></operator> <literal type="number" pos:line="48" pos:column="23">0<pos:position pos:line="48" pos:column="24"/></literal> <operator pos:line="48" pos:column="25">&amp;&amp;<pos:position pos:line="48" pos:column="35"/></operator> <call><name pos:line="48" pos:column="28">APR_STATUS_IS_EOF<pos:position pos:line="48" pos:column="45"/></name><argument_list pos:line="48" pos:column="45">(<argument><expr><name pos:line="48" pos:column="46">status<pos:position pos:line="48" pos:column="52"/></name></expr></argument>)<pos:position pos:line="48" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="54"/></condition><then pos:line="48" pos:column="54"> <block pos:line="48" pos:column="55">{
            <expr_stmt><expr><name pos:line="49" pos:column="13">good<pos:position pos:line="49" pos:column="17"/></name><operator pos:line="49" pos:column="17">++<pos:position pos:line="49" pos:column="19"/></operator></expr>;<pos:position pos:line="49" pos:column="20"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">close_connection<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">c<pos:position pos:line="50" pos:column="31"/></name></expr></argument>)<pos:position pos:line="50" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="33"/></expr_stmt>
            <return pos:line="51" pos:column="13">return;<pos:position pos:line="51" pos:column="20"/></return>
        }<pos:position pos:line="52" pos:column="10"/></block></then></if></elseif>
        <comment type="block" pos:line="53" pos:column="9">/* catch legitimate fatal apr_socket_recv errors */</comment>
        <elseif pos:line="54" pos:column="9">else <if pos:line="54" pos:column="14">if <condition pos:line="54" pos:column="17">(<expr><name pos:line="54" pos:column="18">status<pos:position pos:line="54" pos:column="24"/></name> <operator pos:line="54" pos:column="25">!=<pos:position pos:line="54" pos:column="27"/></operator> <name pos:line="54" pos:column="28">APR_SUCCESS<pos:position pos:line="54" pos:column="39"/></name></expr>)<pos:position pos:line="54" pos:column="40"/></condition><then pos:line="54" pos:column="40"> <block pos:line="54" pos:column="41">{
            <expr_stmt><expr><name pos:line="55" pos:column="13">err_recv<pos:position pos:line="55" pos:column="21"/></name><operator pos:line="55" pos:column="21">++<pos:position pos:line="55" pos:column="23"/></operator></expr>;<pos:position pos:line="55" pos:column="24"/></expr_stmt>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><name pos:line="56" pos:column="17">recverrok<pos:position pos:line="56" pos:column="26"/></name></expr>)<pos:position pos:line="56" pos:column="27"/></condition><then pos:line="56" pos:column="27"> <block pos:line="56" pos:column="28">{
                <expr_stmt><expr><name pos:line="57" pos:column="17">bad<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">++<pos:position pos:line="57" pos:column="22"/></operator></expr>;<pos:position pos:line="57" pos:column="23"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="58" pos:column="17">close_connection<pos:position pos:line="58" pos:column="33"/></name><argument_list pos:line="58" pos:column="33">(<argument><expr><name pos:line="58" pos:column="34">c<pos:position pos:line="58" pos:column="35"/></name></expr></argument>)<pos:position pos:line="58" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="37"/></expr_stmt>
                <if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><name pos:line="59" pos:column="21">verbosity<pos:position pos:line="59" pos:column="30"/></name> <operator pos:line="59" pos:column="31">&gt;=<pos:position pos:line="59" pos:column="36"/></operator> <literal type="number" pos:line="59" pos:column="34">1<pos:position pos:line="59" pos:column="35"/></literal></expr>)<pos:position pos:line="59" pos:column="36"/></condition><then pos:line="59" pos:column="36"> <block pos:line="59" pos:column="37">{
                    <decl_stmt><decl><type><name pos:line="60" pos:column="21">char<pos:position pos:line="60" pos:column="25"/></name></type> <name><name pos:line="60" pos:column="26">buf<pos:position pos:line="60" pos:column="29"/></name><index pos:line="60" pos:column="29">[<expr><literal type="number" pos:line="60" pos:column="30">120<pos:position pos:line="60" pos:column="33"/></literal></expr>]<pos:position pos:line="60" pos:column="34"/></index></name></decl>;<pos:position pos:line="60" pos:column="35"/></decl_stmt>
                    <expr_stmt><expr><call><name pos:line="61" pos:column="21">fprintf<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><name pos:line="61" pos:column="29">stderr<pos:position pos:line="61" pos:column="35"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="61" pos:column="36">"%s: %s (%d)\n"<pos:position pos:line="61" pos:column="51"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="61" pos:column="53">"apr_socket_recv"<pos:position pos:line="61" pos:column="70"/></literal></expr></argument>, <argument><expr><call><name pos:line="61" pos:column="72">apr_strerror<pos:position pos:line="61" pos:column="84"/></name><argument_list pos:line="61" pos:column="84">(<argument><expr><name pos:line="61" pos:column="85">status<pos:position pos:line="61" pos:column="91"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="93">buf<pos:position pos:line="61" pos:column="96"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="98">sizeof <name pos:line="61" pos:column="105">buf<pos:position pos:line="61" pos:column="108"/></name></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="109"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="61" pos:column="111">status<pos:position pos:line="61" pos:column="117"/></name></expr></argument>)<pos:position pos:line="61" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="119"/></expr_stmt>
                }<pos:position pos:line="62" pos:column="18"/></block></then></if>
                <return pos:line="63" pos:column="17">return;<pos:position pos:line="63" pos:column="24"/></return>
            }<pos:position pos:line="64" pos:column="14"/></block></then> <else pos:line="64" pos:column="15">else <block pos:line="64" pos:column="20">{
                <expr_stmt><expr><call><name pos:line="65" pos:column="17">apr_err<pos:position pos:line="65" pos:column="24"/></name><argument_list pos:line="65" pos:column="24">(<argument><expr><literal type="string" pos:line="65" pos:column="25">"apr_socket_recv"<pos:position pos:line="65" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="44">status<pos:position pos:line="65" pos:column="50"/></name></expr></argument>)<pos:position pos:line="65" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="52"/></expr_stmt>
            }<pos:position pos:line="66" pos:column="14"/></block></else></if>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="68" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="70" pos:column="5">totalread<pos:position pos:line="70" pos:column="14"/></name> <operator pos:line="70" pos:column="15">+=<pos:position pos:line="70" pos:column="17"/></operator> <name pos:line="70" pos:column="18">r<pos:position pos:line="70" pos:column="19"/></name></expr>;<pos:position pos:line="70" pos:column="20"/></expr_stmt>
    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name><name pos:line="71" pos:column="9">c<pos:position pos:line="71" pos:column="10"/></name><operator pos:line="71" pos:column="10">-&gt;<pos:position pos:line="71" pos:column="15"/></operator><name pos:line="71" pos:column="12">read<pos:position pos:line="71" pos:column="16"/></name></name> <operator pos:line="71" pos:column="17">==<pos:position pos:line="71" pos:column="19"/></operator> <literal type="number" pos:line="71" pos:column="20">0<pos:position pos:line="71" pos:column="21"/></literal></expr>)<pos:position pos:line="71" pos:column="22"/></condition><then pos:line="71" pos:column="22"> <block pos:line="71" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="72" pos:column="9">c<pos:position pos:line="72" pos:column="10"/></name><operator pos:line="72" pos:column="10">-&gt;<pos:position pos:line="72" pos:column="15"/></operator><name pos:line="72" pos:column="12">beginread<pos:position pos:line="72" pos:column="21"/></name></name> <operator pos:line="72" pos:column="22">=<pos:position pos:line="72" pos:column="23"/></operator> <call><name pos:line="72" pos:column="24">apr_time_now<pos:position pos:line="72" pos:column="36"/></name><argument_list pos:line="72" pos:column="36">()<pos:position pos:line="72" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="74" pos:column="5">c<pos:position pos:line="74" pos:column="6"/></name><operator pos:line="74" pos:column="6">-&gt;<pos:position pos:line="74" pos:column="11"/></operator><name pos:line="74" pos:column="8">read<pos:position pos:line="74" pos:column="12"/></name></name> <operator pos:line="74" pos:column="13">+=<pos:position pos:line="74" pos:column="15"/></operator> <name pos:line="74" pos:column="16">r<pos:position pos:line="74" pos:column="17"/></name></expr>;<pos:position pos:line="74" pos:column="18"/></expr_stmt>


    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><operator pos:line="77" pos:column="9">!<pos:position pos:line="77" pos:column="10"/></operator><name><name pos:line="77" pos:column="10">c<pos:position pos:line="77" pos:column="11"/></name><operator pos:line="77" pos:column="11">-&gt;<pos:position pos:line="77" pos:column="16"/></operator><name pos:line="77" pos:column="13">gotheader<pos:position pos:line="77" pos:column="22"/></name></name></expr>)<pos:position pos:line="77" pos:column="23"/></condition><then pos:line="77" pos:column="23"> <block pos:line="77" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="78" pos:column="9">char<pos:position pos:line="78" pos:column="13"/></name> <modifier pos:line="78" pos:column="14">*<pos:position pos:line="78" pos:column="15"/></modifier></type><name pos:line="78" pos:column="15">s<pos:position pos:line="78" pos:column="16"/></name></decl>;<pos:position pos:line="78" pos:column="17"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="79" pos:column="9">int<pos:position pos:line="79" pos:column="12"/></name></type> <name pos:line="79" pos:column="13">l<pos:position pos:line="79" pos:column="14"/></name> <init pos:line="79" pos:column="15">= <expr><literal type="number" pos:line="79" pos:column="17">4<pos:position pos:line="79" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="79" pos:column="19"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="80" pos:column="9">apr_size_t<pos:position pos:line="80" pos:column="19"/></name></type> <name pos:line="80" pos:column="20">space<pos:position pos:line="80" pos:column="25"/></name> <init pos:line="80" pos:column="26">= <expr><name pos:line="80" pos:column="28">CBUFFSIZE<pos:position pos:line="80" pos:column="37"/></name> <operator pos:line="80" pos:column="38">-<pos:position pos:line="80" pos:column="39"/></operator> <name><name pos:line="80" pos:column="40">c<pos:position pos:line="80" pos:column="41"/></name><operator pos:line="80" pos:column="41">-&gt;<pos:position pos:line="80" pos:column="46"/></operator><name pos:line="80" pos:column="43">cbx<pos:position pos:line="80" pos:column="46"/></name></name> <operator pos:line="80" pos:column="47">-<pos:position pos:line="80" pos:column="48"/></operator> <literal type="number" pos:line="80" pos:column="49">1<pos:position pos:line="80" pos:column="50"/></literal></expr></init></decl>;<pos:position pos:line="80" pos:column="51"/></decl_stmt> <comment type="block" pos:line="80" pos:column="52">/* -1 allows for \0 term */</comment>
        <decl_stmt><decl><type><name pos:line="81" pos:column="9">int<pos:position pos:line="81" pos:column="12"/></name></type> <name pos:line="81" pos:column="13">tocopy<pos:position pos:line="81" pos:column="19"/></name> <init pos:line="81" pos:column="20">= <expr><ternary><condition><expr><operator pos:line="81" pos:column="22">(<pos:position pos:line="81" pos:column="23"/></operator><name pos:line="81" pos:column="23">space<pos:position pos:line="81" pos:column="28"/></name> <operator pos:line="81" pos:column="29">&lt;<pos:position pos:line="81" pos:column="33"/></operator> <name pos:line="81" pos:column="31">r<pos:position pos:line="81" pos:column="32"/></name><operator pos:line="81" pos:column="32">)<pos:position pos:line="81" pos:column="33"/></operator></expr> ?<pos:position pos:line="81" pos:column="35"/></condition><then pos:line="81" pos:column="35"> <expr><name pos:line="81" pos:column="36">space<pos:position pos:line="81" pos:column="41"/></name></expr> <pos:position pos:line="81" pos:column="42"/></then><else pos:line="81" pos:column="42">: <expr><name pos:line="81" pos:column="44">r<pos:position pos:line="81" pos:column="45"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="81" pos:column="46"/></decl_stmt>
<cpp:ifdef pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">ifdef<pos:position pos:line="82" pos:column="7"/></cpp:directive> <name pos:line="82" pos:column="8">NOT_ASCII<pos:position pos:line="82" pos:column="17"/></name></cpp:ifdef>
        <decl_stmt><decl><type><name pos:line="83" pos:column="9">apr_size_t<pos:position pos:line="83" pos:column="19"/></name></type> <name pos:line="83" pos:column="20">inbytes_left<pos:position pos:line="83" pos:column="32"/></name> <init pos:line="83" pos:column="33">= <expr><name pos:line="83" pos:column="35">space<pos:position pos:line="83" pos:column="40"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="83" pos:column="42">outbytes_left<pos:position pos:line="83" pos:column="55"/></name> <init pos:line="83" pos:column="56">= <expr><name pos:line="83" pos:column="58">space<pos:position pos:line="83" pos:column="63"/></name></expr></init></decl>;<pos:position pos:line="83" pos:column="64"/></decl_stmt>

        <expr_stmt><expr><name pos:line="85" pos:column="9">status<pos:position pos:line="85" pos:column="15"/></name> <operator pos:line="85" pos:column="16">=<pos:position pos:line="85" pos:column="17"/></operator> <call><name pos:line="85" pos:column="18">apr_xlate_conv_buffer<pos:position pos:line="85" pos:column="39"/></name><argument_list pos:line="85" pos:column="39">(<argument><expr><name pos:line="85" pos:column="40">from_ascii<pos:position pos:line="85" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="52">buffer<pos:position pos:line="85" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="85" pos:column="60">&amp;<pos:position pos:line="85" pos:column="65"/></operator><name pos:line="85" pos:column="61">inbytes_left<pos:position pos:line="85" pos:column="73"/></name></expr></argument>,
                           <argument><expr><name><name pos:line="86" pos:column="28">c<pos:position pos:line="86" pos:column="29"/></name><operator pos:line="86" pos:column="29">-&gt;<pos:position pos:line="86" pos:column="34"/></operator><name pos:line="86" pos:column="31">cbuff<pos:position pos:line="86" pos:column="36"/></name></name> <operator pos:line="86" pos:column="37">+<pos:position pos:line="86" pos:column="38"/></operator> <name><name pos:line="86" pos:column="39">c<pos:position pos:line="86" pos:column="40"/></name><operator pos:line="86" pos:column="40">-&gt;<pos:position pos:line="86" pos:column="45"/></operator><name pos:line="86" pos:column="42">cbx<pos:position pos:line="86" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="47">&amp;<pos:position pos:line="86" pos:column="52"/></operator><name pos:line="86" pos:column="48">outbytes_left<pos:position pos:line="86" pos:column="61"/></name></expr></argument>)<pos:position pos:line="86" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="63"/></expr_stmt>
        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">status<pos:position pos:line="87" pos:column="19"/></name> <operator pos:line="87" pos:column="20">||<pos:position pos:line="87" pos:column="22"/></operator> <name pos:line="87" pos:column="23">inbytes_left<pos:position pos:line="87" pos:column="35"/></name> <operator pos:line="87" pos:column="36">||<pos:position pos:line="87" pos:column="38"/></operator> <name pos:line="87" pos:column="39">outbytes_left<pos:position pos:line="87" pos:column="52"/></name></expr>)<pos:position pos:line="87" pos:column="53"/></condition><then pos:line="87" pos:column="53"> <block pos:line="87" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="88" pos:column="13">fprintf<pos:position pos:line="88" pos:column="20"/></name><argument_list pos:line="88" pos:column="20">(<argument><expr><name pos:line="88" pos:column="21">stderr<pos:position pos:line="88" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="29">"only simple translation is supported (%d/%"<pos:position pos:line="88" pos:column="73"/></literal> <name pos:line="88" pos:column="74">APR_SIZE_T_FMT<pos:position pos:line="88" pos:column="88"/></name>
                            <literal type="string" pos:line="89" pos:column="29">"/%"<pos:position pos:line="89" pos:column="33"/></literal> <name pos:line="89" pos:column="34">APR_SIZE_T_FMT<pos:position pos:line="89" pos:column="48"/></name> <literal type="string" pos:line="89" pos:column="49">")\n"<pos:position pos:line="89" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="89" pos:column="56">status<pos:position pos:line="89" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="64">inbytes_left<pos:position pos:line="89" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="78">outbytes_left<pos:position pos:line="89" pos:column="91"/></name></expr></argument>)<pos:position pos:line="89" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="93"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="90" pos:column="13">exit<pos:position pos:line="90" pos:column="17"/></name><argument_list pos:line="90" pos:column="17">(<argument><expr><literal type="number" pos:line="90" pos:column="18">1<pos:position pos:line="90" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="91" pos:column="10"/></block></then></if>
<cpp:else pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">else<pos:position pos:line="92" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">memcpy<pos:position pos:line="93" pos:column="15"/></name><argument_list pos:line="93" pos:column="15">(<argument><expr><name><name pos:line="93" pos:column="16">c<pos:position pos:line="93" pos:column="17"/></name><operator pos:line="93" pos:column="17">-&gt;<pos:position pos:line="93" pos:column="22"/></operator><name pos:line="93" pos:column="19">cbuff<pos:position pos:line="93" pos:column="24"/></name></name> <operator pos:line="93" pos:column="25">+<pos:position pos:line="93" pos:column="26"/></operator> <name><name pos:line="93" pos:column="27">c<pos:position pos:line="93" pos:column="28"/></name><operator pos:line="93" pos:column="28">-&gt;<pos:position pos:line="93" pos:column="33"/></operator><name pos:line="93" pos:column="30">cbx<pos:position pos:line="93" pos:column="33"/></name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="35">buffer<pos:position pos:line="93" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="43">space<pos:position pos:line="93" pos:column="48"/></name></expr></argument>)<pos:position pos:line="93" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="50"/></expr_stmt>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif>              <comment type="block" pos:line="94" pos:column="21">/* NOT_ASCII */</comment>
        <expr_stmt><expr><name><name pos:line="95" pos:column="9">c<pos:position pos:line="95" pos:column="10"/></name><operator pos:line="95" pos:column="10">-&gt;<pos:position pos:line="95" pos:column="15"/></operator><name pos:line="95" pos:column="12">cbx<pos:position pos:line="95" pos:column="15"/></name></name> <operator pos:line="95" pos:column="16">+=<pos:position pos:line="95" pos:column="18"/></operator> <name pos:line="95" pos:column="19">tocopy<pos:position pos:line="95" pos:column="25"/></name></expr>;<pos:position pos:line="95" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="96" pos:column="9">space<pos:position pos:line="96" pos:column="14"/></name> <operator pos:line="96" pos:column="15">-=<pos:position pos:line="96" pos:column="17"/></operator> <name pos:line="96" pos:column="18">tocopy<pos:position pos:line="96" pos:column="24"/></name></expr>;<pos:position pos:line="96" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="97" pos:column="9">c<pos:position pos:line="97" pos:column="10"/></name><operator pos:line="97" pos:column="10">-&gt;<pos:position pos:line="97" pos:column="15"/></operator><name pos:line="97" pos:column="12">cbuff<pos:position pos:line="97" pos:column="17"/></name><index pos:line="97" pos:column="17">[<expr><name><name pos:line="97" pos:column="18">c<pos:position pos:line="97" pos:column="19"/></name><operator pos:line="97" pos:column="19">-&gt;<pos:position pos:line="97" pos:column="24"/></operator><name pos:line="97" pos:column="21">cbx<pos:position pos:line="97" pos:column="24"/></name></name></expr>]<pos:position pos:line="97" pos:column="25"/></index></name> <operator pos:line="97" pos:column="26">=<pos:position pos:line="97" pos:column="27"/></operator> <literal type="number" pos:line="97" pos:column="28">0<pos:position pos:line="97" pos:column="29"/></literal></expr>;<pos:position pos:line="97" pos:column="30"/></expr_stmt>   <comment type="block" pos:line="97" pos:column="33">/* terminate for benefit of strstr */</comment>
        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">verbosity<pos:position pos:line="98" pos:column="22"/></name> <operator pos:line="98" pos:column="23">&gt;=<pos:position pos:line="98" pos:column="28"/></operator> <literal type="number" pos:line="98" pos:column="26">2<pos:position pos:line="98" pos:column="27"/></literal></expr>)<pos:position pos:line="98" pos:column="28"/></condition><then pos:line="98" pos:column="28"> <block pos:line="98" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="99" pos:column="13">printf<pos:position pos:line="99" pos:column="19"/></name><argument_list pos:line="99" pos:column="19">(<argument><expr><literal type="string" pos:line="99" pos:column="20">"LOG: header received:\n%s\n"<pos:position pos:line="99" pos:column="49"/></literal></expr></argument>, <argument><expr><name><name pos:line="99" pos:column="51">c<pos:position pos:line="99" pos:column="52"/></name><operator pos:line="99" pos:column="52">-&gt;<pos:position pos:line="99" pos:column="57"/></operator><name pos:line="99" pos:column="54">cbuff<pos:position pos:line="99" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="99" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="61"/></expr_stmt>
        }<pos:position pos:line="100" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="101" pos:column="9">s<pos:position pos:line="101" pos:column="10"/></name> <operator pos:line="101" pos:column="11">=<pos:position pos:line="101" pos:column="12"/></operator> <call><name pos:line="101" pos:column="13">strstr<pos:position pos:line="101" pos:column="19"/></name><argument_list pos:line="101" pos:column="19">(<argument><expr><name><name pos:line="101" pos:column="20">c<pos:position pos:line="101" pos:column="21"/></name><operator pos:line="101" pos:column="21">-&gt;<pos:position pos:line="101" pos:column="26"/></operator><name pos:line="101" pos:column="23">cbuff<pos:position pos:line="101" pos:column="28"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="101" pos:column="30">"\r\n\r\n"<pos:position pos:line="101" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="42"/></expr_stmt>
        <comment type="block" pos:line="102" pos:column="9">/*
         * this next line is so that we talk to NCSA 1.5 which blatantly
         * breaks the http specifaction
         */</comment>
        <if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><operator pos:line="106" pos:column="13">!<pos:position pos:line="106" pos:column="14"/></operator><name pos:line="106" pos:column="14">s<pos:position pos:line="106" pos:column="15"/></name></expr>)<pos:position pos:line="106" pos:column="16"/></condition><then pos:line="106" pos:column="16"> <block pos:line="106" pos:column="17">{
            <expr_stmt><expr><name pos:line="107" pos:column="13">s<pos:position pos:line="107" pos:column="14"/></name> <operator pos:line="107" pos:column="15">=<pos:position pos:line="107" pos:column="16"/></operator> <call><name pos:line="107" pos:column="17">strstr<pos:position pos:line="107" pos:column="23"/></name><argument_list pos:line="107" pos:column="23">(<argument><expr><name><name pos:line="107" pos:column="24">c<pos:position pos:line="107" pos:column="25"/></name><operator pos:line="107" pos:column="25">-&gt;<pos:position pos:line="107" pos:column="30"/></operator><name pos:line="107" pos:column="27">cbuff<pos:position pos:line="107" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="34">"\n\n"<pos:position pos:line="107" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="108" pos:column="13">l<pos:position pos:line="108" pos:column="14"/></name> <operator pos:line="108" pos:column="15">=<pos:position pos:line="108" pos:column="16"/></operator> <literal type="number" pos:line="108" pos:column="17">2<pos:position pos:line="108" pos:column="18"/></literal></expr>;<pos:position pos:line="108" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="109" pos:column="10"/></block></then></if>

        <if pos:line="111" pos:column="9">if <condition pos:line="111" pos:column="12">(<expr><operator pos:line="111" pos:column="13">!<pos:position pos:line="111" pos:column="14"/></operator><name pos:line="111" pos:column="14">s<pos:position pos:line="111" pos:column="15"/></name></expr>)<pos:position pos:line="111" pos:column="16"/></condition><then pos:line="111" pos:column="16"> <block pos:line="111" pos:column="17">{
            <comment type="block" pos:line="112" pos:column="13">/* read rest next time */</comment>
            <if pos:line="113" pos:column="13">if <condition pos:line="113" pos:column="16">(<expr><name pos:line="113" pos:column="17">space<pos:position pos:line="113" pos:column="22"/></name></expr>)<pos:position pos:line="113" pos:column="23"/></condition><then pos:line="113" pos:column="23"> <block pos:line="113" pos:column="24">{
                <return pos:line="114" pos:column="17">return;<pos:position pos:line="114" pos:column="24"/></return>
            }<pos:position pos:line="115" pos:column="14"/></block></then>
            <else pos:line="116" pos:column="13">else <block pos:line="116" pos:column="18">{
            <comment type="block" pos:line="117" pos:column="13">/* header is in invalid or too big - close connection */</comment>
                <expr_stmt><expr><call><name pos:line="118" pos:column="17">set_conn_state<pos:position pos:line="118" pos:column="31"/></name><argument_list pos:line="118" pos:column="31">(<argument><expr><name pos:line="118" pos:column="32">c<pos:position pos:line="118" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="35">STATE_UNCONNECTED<pos:position pos:line="118" pos:column="52"/></name></expr></argument>)<pos:position pos:line="118" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="54"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="119" pos:column="17">apr_socket_close<pos:position pos:line="119" pos:column="33"/></name><argument_list pos:line="119" pos:column="33">(<argument><expr><name><name pos:line="119" pos:column="34">c<pos:position pos:line="119" pos:column="35"/></name><operator pos:line="119" pos:column="35">-&gt;<pos:position pos:line="119" pos:column="40"/></operator><name pos:line="119" pos:column="37">aprsock<pos:position pos:line="119" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="119" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><name pos:line="120" pos:column="17">err_response<pos:position pos:line="120" pos:column="29"/></name><operator pos:line="120" pos:column="29">++<pos:position pos:line="120" pos:column="31"/></operator></expr>;<pos:position pos:line="120" pos:column="32"/></expr_stmt>
                <if pos:line="121" pos:column="17">if <condition pos:line="121" pos:column="20">(<expr><name pos:line="121" pos:column="21">bad<pos:position pos:line="121" pos:column="24"/></name><operator pos:line="121" pos:column="24">++<pos:position pos:line="121" pos:column="26"/></operator> <operator pos:line="121" pos:column="27">&gt;<pos:position pos:line="121" pos:column="31"/></operator> <literal type="number" pos:line="121" pos:column="29">10<pos:position pos:line="121" pos:column="31"/></literal></expr>)<pos:position pos:line="121" pos:column="32"/></condition><then pos:line="121" pos:column="32"> <block pos:line="121" pos:column="33">{
                    <expr_stmt><expr><call><name pos:line="122" pos:column="21">err<pos:position pos:line="122" pos:column="24"/></name><argument_list pos:line="122" pos:column="24">(<argument><expr><literal type="string" pos:line="122" pos:column="25">"\nTest aborted after 10 failures\n\n"<pos:position pos:line="122" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="65"/></expr_stmt>
                }<pos:position pos:line="123" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="124" pos:column="17">start_connect<pos:position pos:line="124" pos:column="30"/></name><argument_list pos:line="124" pos:column="30">(<argument><expr><name pos:line="124" pos:column="31">c<pos:position pos:line="124" pos:column="32"/></name></expr></argument>)<pos:position pos:line="124" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="125" pos:column="14"/></block></else></if>
        }<pos:position pos:line="126" pos:column="10"/></block></then></if></block></then></if></block></function>
  </unit>
