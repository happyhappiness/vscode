<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6381.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">out_open<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">h2_mplx<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">m<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">int<pos:position pos:line="1" pos:column="45"/></name></type> <name pos:line="1" pos:column="46">stream_id<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">h2_response<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">response<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">ap_filter_t<pos:position pos:line="2" pos:column="41"/></name><modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type> <name pos:line="2" pos:column="43">f<pos:position pos:line="2" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="46">apr_bucket_brigade<pos:position pos:line="2" pos:column="64"/></name> <modifier pos:line="2" pos:column="65">*<pos:position pos:line="2" pos:column="66"/></modifier></type><name pos:line="2" pos:column="66">bb<pos:position pos:line="2" pos:column="68"/></name></decl></parameter>,
                             <parameter><decl><type><name><name pos:line="3" pos:column="30">struct<pos:position pos:line="3" pos:column="36"/></name> <name pos:line="3" pos:column="37">apr_thread_cond_t<pos:position pos:line="3" pos:column="54"/></name></name> <modifier pos:line="3" pos:column="55">*<pos:position pos:line="3" pos:column="56"/></modifier></type><name pos:line="3" pos:column="56">iowait<pos:position pos:line="3" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="63"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">status<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">APR_SUCCESS<pos:position pos:line="5" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
    
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">h2_io<pos:position pos:line="7" pos:column="10"/></name> <modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">io<pos:position pos:line="7" pos:column="14"/></name> <init pos:line="7" pos:column="15">= <expr><call><name pos:line="7" pos:column="17">h2_io_set_get<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name><name pos:line="7" pos:column="31">m<pos:position pos:line="7" pos:column="32"/></name><operator pos:line="7" pos:column="32">-&gt;<pos:position pos:line="7" pos:column="37"/></operator><name pos:line="7" pos:column="34">stream_ios<pos:position pos:line="7" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="46">stream_id<pos:position pos:line="7" pos:column="55"/></name></expr></argument>)<pos:position pos:line="7" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="57"/></decl_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">io<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">&amp;&amp;<pos:position pos:line="8" pos:column="22"/></operator> <operator pos:line="8" pos:column="15">!<pos:position pos:line="8" pos:column="16"/></operator><name><name pos:line="8" pos:column="16">io<pos:position pos:line="8" pos:column="18"/></name><operator pos:line="8" pos:column="18">-&gt;<pos:position pos:line="8" pos:column="23"/></operator><name pos:line="8" pos:column="20">orphaned<pos:position pos:line="8" pos:column="28"/></name></name></expr>)<pos:position pos:line="8" pos:column="29"/></condition><then pos:line="8" pos:column="29"> <block pos:line="8" pos:column="30">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">f<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15"> <block pos:line="9" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="10" pos:column="13">ap_log_cerror<pos:position pos:line="10" pos:column="26"/></name><argument_list pos:line="10" pos:column="26">(<argument><expr><name pos:line="10" pos:column="27">APLOG_MARK<pos:position pos:line="10" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="39">APLOG_TRACE1<pos:position pos:line="10" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="10" pos:column="53">0<pos:position pos:line="10" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="10" pos:column="56">f<pos:position pos:line="10" pos:column="57"/></name><operator pos:line="10" pos:column="57">-&gt;<pos:position pos:line="10" pos:column="62"/></operator><name pos:line="10" pos:column="59">c<pos:position pos:line="10" pos:column="60"/></name></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="11" pos:column="27">"h2_mplx(%ld-%d): open response: %d, rst=%d"<pos:position pos:line="11" pos:column="71"/></literal></expr></argument>,
                          <argument><expr><name><name pos:line="12" pos:column="27">m<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">id<pos:position pos:line="12" pos:column="32"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="34">stream_id<pos:position pos:line="12" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="12" pos:column="45">response<pos:position pos:line="12" pos:column="53"/></name><operator pos:line="12" pos:column="53">-&gt;<pos:position pos:line="12" pos:column="58"/></operator><name pos:line="12" pos:column="55">http_status<pos:position pos:line="12" pos:column="66"/></name></name></expr></argument>, 
                          <argument><expr><name><name pos:line="13" pos:column="27">response<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">-&gt;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="37">rst_error<pos:position pos:line="13" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="48"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
        
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">h2_io_set_response<pos:position pos:line="16" pos:column="27"/></name><argument_list pos:line="16" pos:column="27">(<argument><expr><name pos:line="16" pos:column="28">io<pos:position pos:line="16" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="32">response<pos:position pos:line="16" pos:column="40"/></name></expr></argument>)<pos:position pos:line="16" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">h2_io_set_add<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name><name pos:line="17" pos:column="23">m<pos:position pos:line="17" pos:column="24"/></name><operator pos:line="17" pos:column="24">-&gt;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="26">ready_ios<pos:position pos:line="17" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="37">io<pos:position pos:line="17" pos:column="39"/></name></expr></argument>)<pos:position pos:line="17" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="41"/></expr_stmt>
        <if pos:line="18" pos:column="9">if <condition pos:line="18" pos:column="12">(<expr><name pos:line="18" pos:column="13">response<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">&amp;&amp;<pos:position pos:line="18" pos:column="32"/></operator> <name><name pos:line="18" pos:column="25">response<pos:position pos:line="18" pos:column="33"/></name><operator pos:line="18" pos:column="33">-&gt;<pos:position pos:line="18" pos:column="38"/></operator><name pos:line="18" pos:column="35">http_status<pos:position pos:line="18" pos:column="46"/></name></name> <operator pos:line="18" pos:column="47">&lt;<pos:position pos:line="18" pos:column="51"/></operator> <literal type="number" pos:line="18" pos:column="49">300<pos:position pos:line="18" pos:column="52"/></literal></expr>)<pos:position pos:line="18" pos:column="53"/></condition><then pos:line="18" pos:column="53"> <block pos:line="18" pos:column="54">{
            <comment type="block" pos:line="19" pos:column="13">/* we might see some file buckets in the output, see
             * if we have enough handles reserved. */</comment>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">check_tx_reservation<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name pos:line="21" pos:column="34">m<pos:position pos:line="21" pos:column="35"/></name></expr></argument>)<pos:position pos:line="21" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">bb<pos:position pos:line="23" pos:column="15"/></name></expr>)<pos:position pos:line="23" pos:column="16"/></condition><then pos:line="23" pos:column="16"> <block pos:line="23" pos:column="17">{
            <expr_stmt><expr><name pos:line="24" pos:column="13">status<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <call><name pos:line="24" pos:column="22">out_write<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">m<pos:position pos:line="24" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="35">io<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="39">f<pos:position pos:line="24" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="24" pos:column="42">0<pos:position pos:line="24" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="45">bb<pos:position pos:line="24" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="49">iowait<pos:position pos:line="24" pos:column="55"/></name></expr></argument>)<pos:position pos:line="24" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="57"/></expr_stmt>
            <if pos:line="25" pos:column="13">if <condition pos:line="25" pos:column="16">(<expr><name pos:line="25" pos:column="17">status<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">==<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="27">APR_INCOMPLETE<pos:position pos:line="25" pos:column="41"/></name></expr>)<pos:position pos:line="25" pos:column="42"/></condition><then pos:line="25" pos:column="42"> <block pos:line="25" pos:column="43">{
                <comment type="block" pos:line="26" pos:column="17">/* write will have transferred as much data as possible.
                   caller has to deal with non-empty brigade */</comment>
                <expr_stmt><expr><name pos:line="28" pos:column="17">status<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">APR_SUCCESS<pos:position pos:line="28" pos:column="37"/></name></expr>;<pos:position pos:line="28" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="29" pos:column="14"/></block></then></if>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">have_out_data_for<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">m<pos:position pos:line="31" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="30">stream_id<pos:position pos:line="31" pos:column="39"/></name></expr></argument>)<pos:position pos:line="31" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></then>
    <else pos:line="33" pos:column="5">else <block pos:line="33" pos:column="10">{
        <expr_stmt><expr><name pos:line="34" pos:column="9">status<pos:position pos:line="34" pos:column="15"/></name> <operator pos:line="34" pos:column="16">=<pos:position pos:line="34" pos:column="17"/></operator> <name pos:line="34" pos:column="18">APR_ECONNABORTED<pos:position pos:line="34" pos:column="34"/></name></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></else></if>
    <return pos:line="36" pos:column="5">return <expr><name pos:line="36" pos:column="12">status<pos:position pos:line="36" pos:column="18"/></name></expr>;<pos:position pos:line="36" pos:column="19"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
