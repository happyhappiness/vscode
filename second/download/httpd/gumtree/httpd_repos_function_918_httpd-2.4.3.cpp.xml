<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_918_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ssl_expr_lookup<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">ap_expr_lookup_parms<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">parms<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <switch pos:line="3" pos:column="5">switch <condition pos:line="3" pos:column="12">(<expr><name><name pos:line="3" pos:column="13">parms<pos:position pos:line="3" pos:column="18"/></name><operator pos:line="3" pos:column="18">-&gt;<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="20">type<pos:position pos:line="3" pos:column="24"/></name></name></expr>)<pos:position pos:line="3" pos:column="25"/></condition> <block pos:line="3" pos:column="26">{
    <case pos:line="4" pos:column="5">case <expr><name pos:line="4" pos:column="10">AP_EXPR_FUNC_VAR<pos:position pos:line="4" pos:column="26"/></name></expr>:<pos:position pos:line="4" pos:column="27"/></case>
        <comment type="block" pos:line="5" pos:column="9">/* for now, we just handle everything that starts with SSL_, but
         * register our hook as APR_HOOK_LAST
         * XXX: This can be optimized
         */</comment>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">strcEQn<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name><name pos:line="9" pos:column="21">parms<pos:position pos:line="9" pos:column="26"/></name><operator pos:line="9" pos:column="26">-&gt;<pos:position pos:line="9" pos:column="31"/></operator><name pos:line="9" pos:column="28">name<pos:position pos:line="9" pos:column="32"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="34">"SSL_"<pos:position pos:line="9" pos:column="40"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="42">4<pos:position pos:line="9" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="45"/></condition><then pos:line="9" pos:column="45"> <block pos:line="9" pos:column="46">{
            <expr_stmt><expr><operator pos:line="10" pos:column="13">*<pos:position pos:line="10" pos:column="14"/></operator><name><name pos:line="10" pos:column="14">parms<pos:position pos:line="10" pos:column="19"/></name><operator pos:line="10" pos:column="19">-&gt;<pos:position pos:line="10" pos:column="24"/></operator><name pos:line="10" pos:column="21">func<pos:position pos:line="10" pos:column="25"/></name></name> <operator pos:line="10" pos:column="26">=<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="28">expr_var_fn<pos:position pos:line="10" pos:column="39"/></name></expr>;<pos:position pos:line="10" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></operator><name><name pos:line="11" pos:column="14">parms<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">data<pos:position pos:line="11" pos:column="25"/></name></name> <operator pos:line="11" pos:column="26">=<pos:position pos:line="11" pos:column="27"/></operator> <name><name pos:line="11" pos:column="28">parms<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">-&gt;<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="35">name<pos:position pos:line="11" pos:column="39"/></name></name> <operator pos:line="11" pos:column="40">+<pos:position pos:line="11" pos:column="41"/></operator> <literal type="number" pos:line="11" pos:column="42">4<pos:position pos:line="11" pos:column="43"/></literal></expr>;<pos:position pos:line="11" pos:column="44"/></expr_stmt>
            <return pos:line="12" pos:column="13">return <expr><name pos:line="12" pos:column="20">OK<pos:position pos:line="12" pos:column="22"/></name></expr>;<pos:position pos:line="12" pos:column="23"/></return>
        }<pos:position pos:line="13" pos:column="10"/></block></then></if>
        <break pos:line="14" pos:column="9">break;<pos:position pos:line="14" pos:column="15"/></break>
    <case pos:line="15" pos:column="5">case <expr><name pos:line="15" pos:column="10">AP_EXPR_FUNC_LIST<pos:position pos:line="15" pos:column="27"/></name></expr>:<pos:position pos:line="15" pos:column="28"/></case>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">strcEQ<pos:position pos:line="16" pos:column="19"/></name><argument_list pos:line="16" pos:column="19">(<argument><expr><name><name pos:line="16" pos:column="20">parms<pos:position pos:line="16" pos:column="25"/></name><operator pos:line="16" pos:column="25">-&gt;<pos:position pos:line="16" pos:column="30"/></operator><name pos:line="16" pos:column="27">name<pos:position pos:line="16" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="33">"PeerExtList"<pos:position pos:line="16" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="48"/></condition><then pos:line="16" pos:column="48"> <block pos:line="16" pos:column="49">{
            <expr_stmt><expr><operator pos:line="17" pos:column="13">*<pos:position pos:line="17" pos:column="14"/></operator><name><name pos:line="17" pos:column="14">parms<pos:position pos:line="17" pos:column="19"/></name><operator pos:line="17" pos:column="19">-&gt;<pos:position pos:line="17" pos:column="24"/></operator><name pos:line="17" pos:column="21">func<pos:position pos:line="17" pos:column="25"/></name></name> <operator pos:line="17" pos:column="26">=<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">expr_peer_ext_list_fn<pos:position pos:line="17" pos:column="49"/></name></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="18" pos:column="13">*<pos:position pos:line="18" pos:column="14"/></operator><name><name pos:line="18" pos:column="14">parms<pos:position pos:line="18" pos:column="19"/></name><operator pos:line="18" pos:column="19">-&gt;<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="21">data<pos:position pos:line="18" pos:column="25"/></name></name> <operator pos:line="18" pos:column="26">=<pos:position pos:line="18" pos:column="27"/></operator> <literal type="string" pos:line="18" pos:column="28">"PeerExtList"<pos:position pos:line="18" pos:column="41"/></literal></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
            <return pos:line="19" pos:column="13">return <expr><name pos:line="19" pos:column="20">OK<pos:position pos:line="19" pos:column="22"/></name></expr>;<pos:position pos:line="19" pos:column="23"/></return>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
        <break pos:line="21" pos:column="9">break;<pos:position pos:line="21" pos:column="15"/></break>
    }<pos:position pos:line="22" pos:column="6"/></block></switch>
    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">DECLINED<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
