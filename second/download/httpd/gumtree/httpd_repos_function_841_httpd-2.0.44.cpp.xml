<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_841_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">ssl_hook_pre_config<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">apr_pool_t<pos:position pos:line="1" pos:column="42"/></name> <modifier pos:line="1" pos:column="43">*<pos:position pos:line="1" pos:column="44"/></modifier></type><name pos:line="1" pos:column="44">pconf<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="2" pos:column="32">apr_pool_t<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">plog<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="3" pos:column="32">apr_pool_t<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">ptemp<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="50"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <comment type="block" pos:line="5" pos:column="5">/* Preregister the malloc callbacks so cmds can make library calls */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">CRYPTO_malloc_init<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">()<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* Register us to handle mod_log_config %c/%x variables */</comment>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">ssl_var_log_config_register<pos:position pos:line="9" pos:column="32"/></name><argument_list pos:line="9" pos:column="32">(<argument><expr><name pos:line="9" pos:column="33">pconf<pos:position pos:line="9" pos:column="38"/></name></expr></argument>)<pos:position pos:line="9" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="10" pos:column="5">0<pos:position pos:line="10" pos:column="6"/></literal></expr></cpp:if> <comment type="block" pos:line="10" pos:column="7">/* XXX */</comment>
    <comment type="block" pos:line="11" pos:column="5">/* XXX: Register us to handle mod_status extensions that don't exist yet */</comment>
    ssl_scache_status_register(pconf);
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="13" pos:column="8">/* -0- */</comment>

    <return pos:line="15" pos:column="5">return <expr><name pos:line="15" pos:column="12">OK<pos:position pos:line="15" pos:column="14"/></name></expr>;<pos:position pos:line="15" pos:column="15"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
