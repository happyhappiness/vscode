<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2914_httpd-2.0.64.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">apr_thread_rwlock_rdlock_core<pos:position pos:line="1" pos:column="50"/></name><parameter_list pos:line="1" pos:column="50">(<parameter><decl><type><name pos:line="1" pos:column="51">apr_thread_rwlock_t<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">rwlock<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,
                                                  <parameter><decl><type><name pos:line="2" pos:column="51">DWORD<pos:position pos:line="2" pos:column="56"/></name></type>  <name pos:line="2" pos:column="58">milliseconds<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="71"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DWORD<pos:position pos:line="4" pos:column="10"/></name></type>   <name pos:line="4" pos:column="13">code<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">WaitForSingleObject<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">(<argument><expr><name><name pos:line="4" pos:column="40">rwlock<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">-&gt;<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="48">write_mutex<pos:position pos:line="4" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="61">milliseconds<pos:position pos:line="4" pos:column="73"/></name></expr></argument>)<pos:position pos:line="4" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="75"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">code<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">==<pos:position pos:line="6" pos:column="16"/></operator> <name pos:line="6" pos:column="17">WAIT_FAILED<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">||<pos:position pos:line="6" pos:column="31"/></operator> <name pos:line="6" pos:column="32">code<pos:position pos:line="6" pos:column="36"/></name> <operator pos:line="6" pos:column="37">==<pos:position pos:line="6" pos:column="39"/></operator> <name pos:line="6" pos:column="40">WAIT_TIMEOUT<pos:position pos:line="6" pos:column="52"/></name></expr>)<pos:position pos:line="6" pos:column="53"/></condition><then pos:line="6" pos:column="53">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><call><name pos:line="7" pos:column="16">APR_FROM_OS_ERROR<pos:position pos:line="7" pos:column="33"/></name><argument_list pos:line="7" pos:column="33">(<argument><expr><name pos:line="7" pos:column="34">code<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></return></block></then></if>

    <comment type="block" pos:line="9" pos:column="5">/* We've successfully acquired the writer mutex, we can't be locked
     * for write, so it's OK to add the reader lock.  The writer mutex
     * doubles as race condition protection for the readers counter.   
     */</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">InterlockedIncrement<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><operator pos:line="13" pos:column="26">&amp;<pos:position pos:line="13" pos:column="31"/></operator><name><name pos:line="13" pos:column="27">rwlock<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">-&gt;<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="35">readers<pos:position pos:line="13" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="44"/></expr_stmt>
    
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator> <call><name pos:line="15" pos:column="11">ResetEvent<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><name><name pos:line="15" pos:column="22">rwlock<pos:position pos:line="15" pos:column="28"/></name><operator pos:line="15" pos:column="28">-&gt;<pos:position pos:line="15" pos:column="33"/></operator><name pos:line="15" pos:column="30">read_event<pos:position pos:line="15" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="42"/></condition><then pos:line="15" pos:column="42">
        <block type="pseudo"><return pos:line="16" pos:column="9">return <expr><call><name pos:line="16" pos:column="16">apr_get_os_error<pos:position pos:line="16" pos:column="32"/></name><argument_list pos:line="16" pos:column="32">()<pos:position pos:line="16" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="35"/></return></block></then></if>
    
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">!<pos:position pos:line="18" pos:column="10"/></operator> <call><name pos:line="18" pos:column="11">ReleaseMutex<pos:position pos:line="18" pos:column="23"/></name><argument_list pos:line="18" pos:column="23">(<argument><expr><name><name pos:line="18" pos:column="24">rwlock<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">write_mutex<pos:position pos:line="18" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="45"/></condition><then pos:line="18" pos:column="45">
        <block type="pseudo"><return pos:line="19" pos:column="9">return <expr><call><name pos:line="19" pos:column="16">apr_get_os_error<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">()<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></return></block></then></if>
    
    <return pos:line="21" pos:column="5">return <expr><name pos:line="21" pos:column="12">APR_SUCCESS<pos:position pos:line="21" pos:column="23"/></name></expr>;<pos:position pos:line="21" pos:column="24"/></return>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
