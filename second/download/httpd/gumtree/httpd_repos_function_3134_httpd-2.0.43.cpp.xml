<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3134_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">check_escape<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">uschar<pos:position pos:line="2" pos:column="26"/></name> <modifier pos:line="2" pos:column="27">*<pos:position pos:line="2" pos:column="28"/></modifier><modifier pos:line="2" pos:column="28">*<pos:position pos:line="2" pos:column="29"/></modifier></type><name pos:line="2" pos:column="29">ptrptr<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="37">const<pos:position pos:line="2" pos:column="42"/></specifier> <name pos:line="2" pos:column="43">char<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier><modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">errorptr<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">int<pos:position pos:line="2" pos:column="63"/></name></type> <name pos:line="2" pos:column="64">bracount<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>,
  <parameter><decl><type><name pos:line="3" pos:column="3">int<pos:position pos:line="3" pos:column="6"/></name></type> <name pos:line="3" pos:column="7">options<pos:position pos:line="3" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="16">BOOL<pos:position pos:line="3" pos:column="20"/></name></type> <name pos:line="3" pos:column="21">isclass<pos:position pos:line="3" pos:column="28"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="30">compile_data<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">cd<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list>
<block pos:line="4" pos:column="1">{
<decl_stmt><decl><type><specifier pos:line="5" pos:column="1">const<pos:position pos:line="5" pos:column="6"/></specifier> <name pos:line="5" pos:column="7">uschar<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">ptr<pos:position pos:line="5" pos:column="18"/></name> <init pos:line="5" pos:column="19">= <expr><operator pos:line="5" pos:column="21">*<pos:position pos:line="5" pos:column="22"/></operator><name pos:line="5" pos:column="22">ptrptr<pos:position pos:line="5" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">int<pos:position pos:line="6" pos:column="4"/></name></type> <name pos:line="6" pos:column="5">c<pos:position pos:line="6" pos:column="6"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="8">i<pos:position pos:line="6" pos:column="9"/></name></decl>;<pos:position pos:line="6" pos:column="10"/></decl_stmt>

<comment type="block" pos:line="8" pos:column="1">/* If backslash is at the end of the pattern, it's an error. */</comment>

<expr_stmt><expr><name pos:line="10" pos:column="1">c<pos:position pos:line="10" pos:column="2"/></name> <operator pos:line="10" pos:column="3">=<pos:position pos:line="10" pos:column="4"/></operator> <operator pos:line="10" pos:column="5">*<pos:position pos:line="10" pos:column="6"/></operator><operator pos:line="10" pos:column="6">(<pos:position pos:line="10" pos:column="7"/></operator><operator pos:line="10" pos:column="7">++<pos:position pos:line="10" pos:column="9"/></operator><name pos:line="10" pos:column="9">ptr<pos:position pos:line="10" pos:column="12"/></name><operator pos:line="10" pos:column="12">)<pos:position pos:line="10" pos:column="13"/></operator></expr>;<pos:position pos:line="10" pos:column="14"/></expr_stmt>
<if pos:line="11" pos:column="1">if <condition pos:line="11" pos:column="4">(<expr><name pos:line="11" pos:column="5">c<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">==<pos:position pos:line="11" pos:column="9"/></operator> <literal type="number" pos:line="11" pos:column="10">0<pos:position pos:line="11" pos:column="11"/></literal></expr>)<pos:position pos:line="11" pos:column="12"/></condition><then pos:line="11" pos:column="12"> <block type="pseudo"><expr_stmt><expr><operator pos:line="11" pos:column="13">*<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">errorptr<pos:position pos:line="11" pos:column="22"/></name> <operator pos:line="11" pos:column="23">=<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">ERR1<pos:position pos:line="11" pos:column="29"/></name></expr>;<pos:position pos:line="11" pos:column="30"/></expr_stmt></block></then>

<comment type="block" pos:line="13" pos:column="1">/* Digits or letters may have special meaning; all others are literals. */</comment>

<elseif pos:line="15" pos:column="1">else <if pos:line="15" pos:column="6">if <condition pos:line="15" pos:column="9">(<expr><name><name pos:line="15" pos:column="10">c<pos:position pos:line="15" pos:column="11"/></name> <argument_list type="generic" pos:line="15" pos:column="12">&lt; <argument><expr><literal type="char" pos:line="15" pos:column="14">'0'<pos:position pos:line="15" pos:column="17"/></literal> <operator pos:line="15" pos:column="18">||<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">c<pos:position pos:line="15" pos:column="22"/></name></expr></argument> &gt;<pos:position pos:line="15" pos:column="27"/></argument_list></name> <literal type="char" pos:line="15" pos:column="25">'z'<pos:position pos:line="15" pos:column="28"/></literal></expr>)<pos:position pos:line="15" pos:column="29"/></condition><then pos:line="15" pos:column="29"> <block pos:line="15" pos:column="30">{}<pos:position pos:line="15" pos:column="32"/></block></then></if></elseif>

<comment type="block" pos:line="17" pos:column="1">/* Do an initial lookup in a table. A non-zero result is something that can be
returned immediately. Otherwise further processing may be required. */</comment>

<elseif pos:line="20" pos:column="1">else <if pos:line="20" pos:column="6">if <condition pos:line="20" pos:column="9">(<expr><operator pos:line="20" pos:column="10">(<pos:position pos:line="20" pos:column="11"/></operator><name pos:line="20" pos:column="11">i<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <name><name pos:line="20" pos:column="15">escapes<pos:position pos:line="20" pos:column="22"/></name><index pos:line="20" pos:column="22">[<expr><name pos:line="20" pos:column="23">c<pos:position pos:line="20" pos:column="24"/></name> <operator pos:line="20" pos:column="25">-<pos:position pos:line="20" pos:column="26"/></operator> <literal type="char" pos:line="20" pos:column="27">'0'<pos:position pos:line="20" pos:column="30"/></literal></expr>]<pos:position pos:line="20" pos:column="31"/></index></name><operator pos:line="20" pos:column="31">)<pos:position pos:line="20" pos:column="32"/></operator> <operator pos:line="20" pos:column="33">!=<pos:position pos:line="20" pos:column="35"/></operator> <literal type="number" pos:line="20" pos:column="36">0<pos:position pos:line="20" pos:column="37"/></literal></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38"> <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="39">c<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">=<pos:position pos:line="20" pos:column="42"/></operator> <name pos:line="20" pos:column="43">i<pos:position pos:line="20" pos:column="44"/></name></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt></block></then></if></elseif>

<comment type="block" pos:line="22" pos:column="1">/* Escapes that need further processing, or are illegal. */</comment>

<else pos:line="24" pos:column="1">else
  <block pos:line="25" pos:column="3">{
  <decl_stmt><decl><type><specifier pos:line="26" pos:column="3">const<pos:position pos:line="26" pos:column="8"/></specifier> <name pos:line="26" pos:column="9">uschar<pos:position pos:line="26" pos:column="15"/></name> <modifier pos:line="26" pos:column="16">*<pos:position pos:line="26" pos:column="17"/></modifier></type><name pos:line="26" pos:column="17">oldptr<pos:position pos:line="26" pos:column="23"/></name></decl>;<pos:position pos:line="26" pos:column="24"/></decl_stmt>
  <switch pos:line="27" pos:column="3">switch <condition pos:line="27" pos:column="10">(<expr><name pos:line="27" pos:column="11">c<pos:position pos:line="27" pos:column="12"/></name></expr>)<pos:position pos:line="27" pos:column="13"/></condition>
    <block pos:line="28" pos:column="5">{
    <comment type="block" pos:line="29" pos:column="5">/* The handling of escape sequences consisting of a string of digits
    starting with one that is not zero is not straightforward. By experiment,
    the way Perl works seems to be as follows:

    Outside a character class, the digits are read as a decimal number. If the
    number is less than 10, or if there are that many previous extracting
    left brackets, then it is a back reference. Otherwise, up to three octal
    digits are read to form an escaped byte. Thus \123 is likely to be octal
    123 (cf \0123, which is octal 012 followed by the literal 3). If the octal
    value is greater than 377, the least significant 8 bits are taken. Inside a
    character class, \ followed by a digit is always an octal number. */</comment>

    <case pos:line="41" pos:column="5">case <expr><literal type="char" pos:line="41" pos:column="10">'1'<pos:position pos:line="41" pos:column="13"/></literal></expr>:<pos:position pos:line="41" pos:column="14"/></case> <case pos:line="41" pos:column="15">case <expr><literal type="char" pos:line="41" pos:column="20">'2'<pos:position pos:line="41" pos:column="23"/></literal></expr>:<pos:position pos:line="41" pos:column="24"/></case> <case pos:line="41" pos:column="25">case <expr><literal type="char" pos:line="41" pos:column="30">'3'<pos:position pos:line="41" pos:column="33"/></literal></expr>:<pos:position pos:line="41" pos:column="34"/></case> <case pos:line="41" pos:column="35">case <expr><literal type="char" pos:line="41" pos:column="40">'4'<pos:position pos:line="41" pos:column="43"/></literal></expr>:<pos:position pos:line="41" pos:column="44"/></case> <case pos:line="41" pos:column="45">case <expr><literal type="char" pos:line="41" pos:column="50">'5'<pos:position pos:line="41" pos:column="53"/></literal></expr>:<pos:position pos:line="41" pos:column="54"/></case>
    <case pos:line="42" pos:column="5">case <expr><literal type="char" pos:line="42" pos:column="10">'6'<pos:position pos:line="42" pos:column="13"/></literal></expr>:<pos:position pos:line="42" pos:column="14"/></case> <case pos:line="42" pos:column="15">case <expr><literal type="char" pos:line="42" pos:column="20">'7'<pos:position pos:line="42" pos:column="23"/></literal></expr>:<pos:position pos:line="42" pos:column="24"/></case> <case pos:line="42" pos:column="25">case <expr><literal type="char" pos:line="42" pos:column="30">'8'<pos:position pos:line="42" pos:column="33"/></literal></expr>:<pos:position pos:line="42" pos:column="34"/></case> <case pos:line="42" pos:column="35">case <expr><literal type="char" pos:line="42" pos:column="40">'9'<pos:position pos:line="42" pos:column="43"/></literal></expr>:<pos:position pos:line="42" pos:column="44"/></case>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><operator pos:line="44" pos:column="9">!<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">isclass<pos:position pos:line="44" pos:column="17"/></name></expr>)<pos:position pos:line="44" pos:column="18"/></condition><then pos:line="44" pos:column="18">
      <block pos:line="45" pos:column="7">{
      <expr_stmt><expr><name pos:line="46" pos:column="7">oldptr<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <name pos:line="46" pos:column="16">ptr<pos:position pos:line="46" pos:column="19"/></name></expr>;<pos:position pos:line="46" pos:column="20"/></expr_stmt>
      <expr_stmt><expr><name pos:line="47" pos:column="7">c<pos:position pos:line="47" pos:column="8"/></name> <operator pos:line="47" pos:column="9">-=<pos:position pos:line="47" pos:column="11"/></operator> <literal type="char" pos:line="47" pos:column="12">'0'<pos:position pos:line="47" pos:column="15"/></literal></expr>;<pos:position pos:line="47" pos:column="16"/></expr_stmt>
      <while pos:line="48" pos:column="7">while <condition pos:line="48" pos:column="13">(<expr><operator pos:line="48" pos:column="14">(<pos:position pos:line="48" pos:column="15"/></operator><name><name pos:line="48" pos:column="15">cd<pos:position pos:line="48" pos:column="17"/></name><operator pos:line="48" pos:column="17">-&gt;<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="19">ctypes<pos:position pos:line="48" pos:column="25"/></name><index pos:line="48" pos:column="25">[<expr><name><name pos:line="48" pos:column="26">ptr<pos:position pos:line="48" pos:column="29"/></name><index pos:line="48" pos:column="29">[<expr><literal type="number" pos:line="48" pos:column="30">1<pos:position pos:line="48" pos:column="31"/></literal></expr>]<pos:position pos:line="48" pos:column="32"/></index></name></expr>]<pos:position pos:line="48" pos:column="33"/></index></name> <operator pos:line="48" pos:column="34">&amp;<pos:position pos:line="48" pos:column="39"/></operator> <name pos:line="48" pos:column="36">ctype_digit<pos:position pos:line="48" pos:column="47"/></name><operator pos:line="48" pos:column="47">)<pos:position pos:line="48" pos:column="48"/></operator> <operator pos:line="48" pos:column="49">!=<pos:position pos:line="48" pos:column="51"/></operator> <literal type="number" pos:line="48" pos:column="52">0<pos:position pos:line="48" pos:column="53"/></literal></expr>)<pos:position pos:line="48" pos:column="54"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="49" pos:column="9">c<pos:position pos:line="49" pos:column="10"/></name> <operator pos:line="49" pos:column="11">=<pos:position pos:line="49" pos:column="12"/></operator> <name pos:line="49" pos:column="13">c<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">*<pos:position pos:line="49" pos:column="16"/></operator> <literal type="number" pos:line="49" pos:column="17">10<pos:position pos:line="49" pos:column="19"/></literal> <operator pos:line="49" pos:column="20">+<pos:position pos:line="49" pos:column="21"/></operator> <operator pos:line="49" pos:column="22">*<pos:position pos:line="49" pos:column="23"/></operator><operator pos:line="49" pos:column="23">(<pos:position pos:line="49" pos:column="24"/></operator><operator pos:line="49" pos:column="24">++<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="26">ptr<pos:position pos:line="49" pos:column="29"/></name><operator pos:line="49" pos:column="29">)<pos:position pos:line="49" pos:column="30"/></operator> <operator pos:line="49" pos:column="31">-<pos:position pos:line="49" pos:column="32"/></operator> <literal type="char" pos:line="49" pos:column="33">'0'<pos:position pos:line="49" pos:column="36"/></literal></expr>;<pos:position pos:line="49" pos:column="37"/></expr_stmt></block></while>
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><name pos:line="50" pos:column="11">c<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">&lt;<pos:position pos:line="50" pos:column="17"/></operator> <literal type="number" pos:line="50" pos:column="15">10<pos:position pos:line="50" pos:column="17"/></literal> <operator pos:line="50" pos:column="18">||<pos:position pos:line="50" pos:column="20"/></operator> <name pos:line="50" pos:column="21">c<pos:position pos:line="50" pos:column="22"/></name> <operator pos:line="50" pos:column="23">&lt;=<pos:position pos:line="50" pos:column="28"/></operator> <name pos:line="50" pos:column="26">bracount<pos:position pos:line="50" pos:column="34"/></name></expr>)<pos:position pos:line="50" pos:column="35"/></condition><then pos:line="50" pos:column="35">
        <block pos:line="51" pos:column="9">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">c<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <operator pos:line="52" pos:column="13">-<pos:position pos:line="52" pos:column="14"/></operator><operator pos:line="52" pos:column="14">(<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="15">ESC_REF<pos:position pos:line="52" pos:column="22"/></name> <operator pos:line="52" pos:column="23">+<pos:position pos:line="52" pos:column="24"/></operator> <name pos:line="52" pos:column="25">c<pos:position pos:line="52" pos:column="26"/></name><operator pos:line="52" pos:column="26">)<pos:position pos:line="52" pos:column="27"/></operator></expr>;<pos:position pos:line="52" pos:column="28"/></expr_stmt>
        <break pos:line="53" pos:column="9">break;<pos:position pos:line="53" pos:column="15"/></break>
        }<pos:position pos:line="54" pos:column="10"/></block></then></if>
      <expr_stmt><expr><name pos:line="55" pos:column="7">ptr<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <name pos:line="55" pos:column="13">oldptr<pos:position pos:line="55" pos:column="19"/></name></expr>;<pos:position pos:line="55" pos:column="20"/></expr_stmt>      <comment type="block" pos:line="55" pos:column="26">/* Put the pointer back and fall through */</comment>
      }<pos:position pos:line="56" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="58" pos:column="5">/* Handle an octal number following \. If the first digit is 8 or 9, Perl
    generates a binary zero byte and treats the digit as a following literal.
    Thus we have to pull back the pointer by one. */</comment>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><operator pos:line="62" pos:column="9">(<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">c<pos:position pos:line="62" pos:column="11"/></name> <operator pos:line="62" pos:column="12">=<pos:position pos:line="62" pos:column="13"/></operator> <operator pos:line="62" pos:column="14">*<pos:position pos:line="62" pos:column="15"/></operator><name pos:line="62" pos:column="15">ptr<pos:position pos:line="62" pos:column="18"/></name><operator pos:line="62" pos:column="18">)<pos:position pos:line="62" pos:column="19"/></operator> <operator pos:line="62" pos:column="20">&gt;=<pos:position pos:line="62" pos:column="25"/></operator> <literal type="char" pos:line="62" pos:column="23">'8'<pos:position pos:line="62" pos:column="26"/></literal></expr>)<pos:position pos:line="62" pos:column="27"/></condition><then pos:line="62" pos:column="27">
      <block pos:line="63" pos:column="7">{
      <expr_stmt><expr><name pos:line="64" pos:column="7">ptr<pos:position pos:line="64" pos:column="10"/></name><operator pos:line="64" pos:column="10">--<pos:position pos:line="64" pos:column="12"/></operator></expr>;<pos:position pos:line="64" pos:column="13"/></expr_stmt>
      <expr_stmt><expr><name pos:line="65" pos:column="7">c<pos:position pos:line="65" pos:column="8"/></name> <operator pos:line="65" pos:column="9">=<pos:position pos:line="65" pos:column="10"/></operator> <literal type="number" pos:line="65" pos:column="11">0<pos:position pos:line="65" pos:column="12"/></literal></expr>;<pos:position pos:line="65" pos:column="13"/></expr_stmt>
      <break pos:line="66" pos:column="7">break;<pos:position pos:line="66" pos:column="13"/></break>
      }<pos:position pos:line="67" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="69" pos:column="5">/* \0 always starts an octal number, but we may drop through to here with a
    larger first octal digit. */</comment>

    <case pos:line="72" pos:column="5">case <expr><literal type="char" pos:line="72" pos:column="10">'0'<pos:position pos:line="72" pos:column="13"/></literal></expr>:<pos:position pos:line="72" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="73" pos:column="5">c<pos:position pos:line="73" pos:column="6"/></name> <operator pos:line="73" pos:column="7">-=<pos:position pos:line="73" pos:column="9"/></operator> <literal type="char" pos:line="73" pos:column="10">'0'<pos:position pos:line="73" pos:column="13"/></literal></expr>;<pos:position pos:line="73" pos:column="14"/></expr_stmt>
    <while pos:line="74" pos:column="5">while<condition pos:line="74" pos:column="10">(<expr><name pos:line="74" pos:column="11">i<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">++<pos:position pos:line="74" pos:column="14"/></operator> <operator pos:line="74" pos:column="15">&lt;<pos:position pos:line="74" pos:column="19"/></operator> <literal type="number" pos:line="74" pos:column="17">2<pos:position pos:line="74" pos:column="18"/></literal> <operator pos:line="74" pos:column="19">&amp;&amp;<pos:position pos:line="74" pos:column="29"/></operator> <operator pos:line="74" pos:column="22">(<pos:position pos:line="74" pos:column="23"/></operator><name><name pos:line="74" pos:column="23">cd<pos:position pos:line="74" pos:column="25"/></name><operator pos:line="74" pos:column="25">-&gt;<pos:position pos:line="74" pos:column="30"/></operator><name pos:line="74" pos:column="27">ctypes<pos:position pos:line="74" pos:column="33"/></name><index pos:line="74" pos:column="33">[<expr><name><name pos:line="74" pos:column="34">ptr<pos:position pos:line="74" pos:column="37"/></name><index pos:line="74" pos:column="37">[<expr><literal type="number" pos:line="74" pos:column="38">1<pos:position pos:line="74" pos:column="39"/></literal></expr>]<pos:position pos:line="74" pos:column="40"/></index></name></expr>]<pos:position pos:line="74" pos:column="41"/></index></name> <operator pos:line="74" pos:column="42">&amp;<pos:position pos:line="74" pos:column="47"/></operator> <name pos:line="74" pos:column="44">ctype_digit<pos:position pos:line="74" pos:column="55"/></name><operator pos:line="74" pos:column="55">)<pos:position pos:line="74" pos:column="56"/></operator> <operator pos:line="74" pos:column="57">!=<pos:position pos:line="74" pos:column="59"/></operator> <literal type="number" pos:line="74" pos:column="60">0<pos:position pos:line="74" pos:column="61"/></literal> <operator pos:line="74" pos:column="62">&amp;&amp;<pos:position pos:line="74" pos:column="72"/></operator>
      <name><name pos:line="75" pos:column="7">ptr<pos:position pos:line="75" pos:column="10"/></name><index pos:line="75" pos:column="10">[<expr><literal type="number" pos:line="75" pos:column="11">1<pos:position pos:line="75" pos:column="12"/></literal></expr>]<pos:position pos:line="75" pos:column="13"/></index></name> <operator pos:line="75" pos:column="14">!=<pos:position pos:line="75" pos:column="16"/></operator> <literal type="char" pos:line="75" pos:column="17">'8'<pos:position pos:line="75" pos:column="20"/></literal> <operator pos:line="75" pos:column="21">&amp;&amp;<pos:position pos:line="75" pos:column="31"/></operator> <name><name pos:line="75" pos:column="24">ptr<pos:position pos:line="75" pos:column="27"/></name><index pos:line="75" pos:column="27">[<expr><literal type="number" pos:line="75" pos:column="28">1<pos:position pos:line="75" pos:column="29"/></literal></expr>]<pos:position pos:line="75" pos:column="30"/></index></name> <operator pos:line="75" pos:column="31">!=<pos:position pos:line="75" pos:column="33"/></operator> <literal type="char" pos:line="75" pos:column="34">'9'<pos:position pos:line="75" pos:column="37"/></literal></expr>)<pos:position pos:line="75" pos:column="38"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="76" pos:column="9">c<pos:position pos:line="76" pos:column="10"/></name> <operator pos:line="76" pos:column="11">=<pos:position pos:line="76" pos:column="12"/></operator> <name pos:line="76" pos:column="13">c<pos:position pos:line="76" pos:column="14"/></name> <operator pos:line="76" pos:column="15">*<pos:position pos:line="76" pos:column="16"/></operator> <literal type="number" pos:line="76" pos:column="17">8<pos:position pos:line="76" pos:column="18"/></literal> <operator pos:line="76" pos:column="19">+<pos:position pos:line="76" pos:column="20"/></operator> <operator pos:line="76" pos:column="21">*<pos:position pos:line="76" pos:column="22"/></operator><operator pos:line="76" pos:column="22">(<pos:position pos:line="76" pos:column="23"/></operator><operator pos:line="76" pos:column="23">++<pos:position pos:line="76" pos:column="25"/></operator><name pos:line="76" pos:column="25">ptr<pos:position pos:line="76" pos:column="28"/></name><operator pos:line="76" pos:column="28">)<pos:position pos:line="76" pos:column="29"/></operator> <operator pos:line="76" pos:column="30">-<pos:position pos:line="76" pos:column="31"/></operator> <literal type="char" pos:line="76" pos:column="32">'0'<pos:position pos:line="76" pos:column="35"/></literal></expr>;<pos:position pos:line="76" pos:column="36"/></expr_stmt></block></while>
    <expr_stmt><expr><name pos:line="77" pos:column="5">c<pos:position pos:line="77" pos:column="6"/></name> <operator pos:line="77" pos:column="7">&amp;=<pos:position pos:line="77" pos:column="13"/></operator> <literal type="number" pos:line="77" pos:column="10">255<pos:position pos:line="77" pos:column="13"/></literal></expr>;<pos:position pos:line="77" pos:column="14"/></expr_stmt>     <comment type="block" pos:line="77" pos:column="19">/* Take least significant 8 bits */</comment>
    <break pos:line="78" pos:column="5">break;<pos:position pos:line="78" pos:column="11"/></break>

    <comment type="block" pos:line="80" pos:column="5">/* \x is complicated when UTF-8 is enabled. \x{ddd} is a character number
    which can be greater than 0xff, but only if the ddd are hex digits. */</comment>

    <case pos:line="83" pos:column="5">case <expr><literal type="char" pos:line="83" pos:column="10">'x'<pos:position pos:line="83" pos:column="13"/></literal></expr>:<pos:position pos:line="83" pos:column="14"/></case>
<cpp:ifdef pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">ifdef<pos:position pos:line="84" pos:column="7"/></cpp:directive> <name pos:line="84" pos:column="8">SUPPORT_UTF8<pos:position pos:line="84" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name><name pos:line="85" pos:column="9">ptr<pos:position pos:line="85" pos:column="12"/></name><index pos:line="85" pos:column="12">[<expr><literal type="number" pos:line="85" pos:column="13">1<pos:position pos:line="85" pos:column="14"/></literal></expr>]<pos:position pos:line="85" pos:column="15"/></index></name> <operator pos:line="85" pos:column="16">==<pos:position pos:line="85" pos:column="18"/></operator> <literal type="char" pos:line="85" pos:column="19">'{'<pos:position pos:line="85" pos:column="22"/></literal> <operator pos:line="85" pos:column="23">&amp;&amp;<pos:position pos:line="85" pos:column="33"/></operator> <operator pos:line="85" pos:column="26">(<pos:position pos:line="85" pos:column="27"/></operator><name pos:line="85" pos:column="27">options<pos:position pos:line="85" pos:column="34"/></name> <operator pos:line="85" pos:column="35">&amp;<pos:position pos:line="85" pos:column="40"/></operator> <name pos:line="85" pos:column="37">PCRE_UTF8<pos:position pos:line="85" pos:column="46"/></name><operator pos:line="85" pos:column="46">)<pos:position pos:line="85" pos:column="47"/></operator> <operator pos:line="85" pos:column="48">!=<pos:position pos:line="85" pos:column="50"/></operator> <literal type="number" pos:line="85" pos:column="51">0<pos:position pos:line="85" pos:column="52"/></literal></expr>)<pos:position pos:line="85" pos:column="53"/></condition><then pos:line="85" pos:column="53">
      <block pos:line="86" pos:column="7">{
      <decl_stmt><decl><type><specifier pos:line="87" pos:column="7">const<pos:position pos:line="87" pos:column="12"/></specifier> <name pos:line="87" pos:column="13">uschar<pos:position pos:line="87" pos:column="19"/></name> <modifier pos:line="87" pos:column="20">*<pos:position pos:line="87" pos:column="21"/></modifier></type><name pos:line="87" pos:column="21">pt<pos:position pos:line="87" pos:column="23"/></name> <init pos:line="87" pos:column="24">= <expr><name pos:line="87" pos:column="26">ptr<pos:position pos:line="87" pos:column="29"/></name> <operator pos:line="87" pos:column="30">+<pos:position pos:line="87" pos:column="31"/></operator> <literal type="number" pos:line="87" pos:column="32">2<pos:position pos:line="87" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="87" pos:column="34"/></decl_stmt>
      <decl_stmt><decl><type><specifier pos:line="88" pos:column="7">register<pos:position pos:line="88" pos:column="15"/></specifier> <name pos:line="88" pos:column="16">int<pos:position pos:line="88" pos:column="19"/></name></type> <name pos:line="88" pos:column="20">count<pos:position pos:line="88" pos:column="25"/></name> <init pos:line="88" pos:column="26">= <expr><literal type="number" pos:line="88" pos:column="28">0<pos:position pos:line="88" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="88" pos:column="30"/></decl_stmt>
      <expr_stmt><expr><name pos:line="89" pos:column="7">c<pos:position pos:line="89" pos:column="8"/></name> <operator pos:line="89" pos:column="9">=<pos:position pos:line="89" pos:column="10"/></operator> <literal type="number" pos:line="89" pos:column="11">0<pos:position pos:line="89" pos:column="12"/></literal></expr>;<pos:position pos:line="89" pos:column="13"/></expr_stmt>
      <while pos:line="90" pos:column="7">while <condition pos:line="90" pos:column="13">(<expr><operator pos:line="90" pos:column="14">(<pos:position pos:line="90" pos:column="15"/></operator><name><name pos:line="90" pos:column="15">cd<pos:position pos:line="90" pos:column="17"/></name><operator pos:line="90" pos:column="17">-&gt;<pos:position pos:line="90" pos:column="22"/></operator><name pos:line="90" pos:column="19">ctypes<pos:position pos:line="90" pos:column="25"/></name><index pos:line="90" pos:column="25">[<expr><operator pos:line="90" pos:column="26">*<pos:position pos:line="90" pos:column="27"/></operator><name pos:line="90" pos:column="27">pt<pos:position pos:line="90" pos:column="29"/></name></expr>]<pos:position pos:line="90" pos:column="30"/></index></name> <operator pos:line="90" pos:column="31">&amp;<pos:position pos:line="90" pos:column="36"/></operator> <name pos:line="90" pos:column="33">ctype_xdigit<pos:position pos:line="90" pos:column="45"/></name><operator pos:line="90" pos:column="45">)<pos:position pos:line="90" pos:column="46"/></operator> <operator pos:line="90" pos:column="47">!=<pos:position pos:line="90" pos:column="49"/></operator> <literal type="number" pos:line="90" pos:column="50">0<pos:position pos:line="90" pos:column="51"/></literal></expr>)<pos:position pos:line="90" pos:column="52"/></condition>
        <block pos:line="91" pos:column="9">{
        <expr_stmt><expr><name pos:line="92" pos:column="9">count<pos:position pos:line="92" pos:column="14"/></name><operator pos:line="92" pos:column="14">++<pos:position pos:line="92" pos:column="16"/></operator></expr>;<pos:position pos:line="92" pos:column="17"/></expr_stmt>
        <expr_stmt><expr><name pos:line="93" pos:column="9">c<pos:position pos:line="93" pos:column="10"/></name> <operator pos:line="93" pos:column="11">=<pos:position pos:line="93" pos:column="12"/></operator> <name pos:line="93" pos:column="13">c<pos:position pos:line="93" pos:column="14"/></name> <operator pos:line="93" pos:column="15">*<pos:position pos:line="93" pos:column="16"/></operator> <literal type="number" pos:line="93" pos:column="17">16<pos:position pos:line="93" pos:column="19"/></literal> <operator pos:line="93" pos:column="20">+<pos:position pos:line="93" pos:column="21"/></operator> <name><name pos:line="93" pos:column="22">cd<pos:position pos:line="93" pos:column="24"/></name><operator pos:line="93" pos:column="24">-&gt;<pos:position pos:line="93" pos:column="29"/></operator><name pos:line="93" pos:column="26">lcc<pos:position pos:line="93" pos:column="29"/></name><index pos:line="93" pos:column="29">[<expr><operator pos:line="93" pos:column="30">*<pos:position pos:line="93" pos:column="31"/></operator><name pos:line="93" pos:column="31">pt<pos:position pos:line="93" pos:column="33"/></name></expr>]<pos:position pos:line="93" pos:column="34"/></index></name> <operator pos:line="93" pos:column="35">-<pos:position pos:line="93" pos:column="36"/></operator>
          <operator pos:line="94" pos:column="11">(<pos:position pos:line="94" pos:column="12"/></operator><ternary><condition><expr><operator pos:line="94" pos:column="12">(<pos:position pos:line="94" pos:column="13"/></operator><operator pos:line="94" pos:column="13">(<pos:position pos:line="94" pos:column="14"/></operator><name><name pos:line="94" pos:column="14">cd<pos:position pos:line="94" pos:column="16"/></name><operator pos:line="94" pos:column="16">-&gt;<pos:position pos:line="94" pos:column="21"/></operator><name pos:line="94" pos:column="18">ctypes<pos:position pos:line="94" pos:column="24"/></name><index pos:line="94" pos:column="24">[<expr><operator pos:line="94" pos:column="25">*<pos:position pos:line="94" pos:column="26"/></operator><name pos:line="94" pos:column="26">pt<pos:position pos:line="94" pos:column="28"/></name></expr>]<pos:position pos:line="94" pos:column="29"/></index></name> <operator pos:line="94" pos:column="30">&amp;<pos:position pos:line="94" pos:column="35"/></operator> <name pos:line="94" pos:column="32">ctype_digit<pos:position pos:line="94" pos:column="43"/></name><operator pos:line="94" pos:column="43">)<pos:position pos:line="94" pos:column="44"/></operator> <operator pos:line="94" pos:column="45">!=<pos:position pos:line="94" pos:column="47"/></operator> <literal type="number" pos:line="94" pos:column="48">0<pos:position pos:line="94" pos:column="49"/></literal><operator pos:line="94" pos:column="49">)<pos:position pos:line="94" pos:column="50"/></operator></expr>?<pos:position pos:line="94" pos:column="51"/></condition><then pos:line="94" pos:column="51"> <expr><literal type="char" pos:line="94" pos:column="52">'0'<pos:position pos:line="94" pos:column="55"/></literal></expr> <pos:position pos:line="94" pos:column="56"/></then><else pos:line="94" pos:column="56">: <expr><literal type="char" pos:line="94" pos:column="58">'W'<pos:position pos:line="94" pos:column="61"/></literal></expr></else></ternary><operator pos:line="94" pos:column="61">)<pos:position pos:line="94" pos:column="62"/></operator></expr>;<pos:position pos:line="94" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name pos:line="95" pos:column="9">pt<pos:position pos:line="95" pos:column="11"/></name><operator pos:line="95" pos:column="11">++<pos:position pos:line="95" pos:column="13"/></operator></expr>;<pos:position pos:line="95" pos:column="14"/></expr_stmt>
        }<pos:position pos:line="96" pos:column="10"/></block></while>
      <if pos:line="97" pos:column="7">if <condition pos:line="97" pos:column="10">(<expr><operator pos:line="97" pos:column="11">*<pos:position pos:line="97" pos:column="12"/></operator><name pos:line="97" pos:column="12">pt<pos:position pos:line="97" pos:column="14"/></name> <operator pos:line="97" pos:column="15">==<pos:position pos:line="97" pos:column="17"/></operator> <literal type="char" pos:line="97" pos:column="18">'}'<pos:position pos:line="97" pos:column="21"/></literal></expr>)<pos:position pos:line="97" pos:column="22"/></condition><then pos:line="97" pos:column="22">
        <block pos:line="98" pos:column="9">{
        <if pos:line="99" pos:column="9">if <condition pos:line="99" pos:column="12">(<expr><name><name pos:line="99" pos:column="13">c<pos:position pos:line="99" pos:column="14"/></name> <argument_list type="generic" pos:line="99" pos:column="15">&lt; <argument><expr><literal type="number" pos:line="99" pos:column="17">0<pos:position pos:line="99" pos:column="18"/></literal> <operator pos:line="99" pos:column="19">||<pos:position pos:line="99" pos:column="21"/></operator> <name pos:line="99" pos:column="22">count<pos:position pos:line="99" pos:column="27"/></name></expr></argument> &gt;<pos:position pos:line="99" pos:column="32"/></argument_list></name> <literal type="number" pos:line="99" pos:column="30">8<pos:position pos:line="99" pos:column="31"/></literal></expr>)<pos:position pos:line="99" pos:column="32"/></condition><then pos:line="99" pos:column="32"> <block type="pseudo"><expr_stmt><expr><operator pos:line="99" pos:column="33">*<pos:position pos:line="99" pos:column="34"/></operator><name pos:line="99" pos:column="34">errorptr<pos:position pos:line="99" pos:column="42"/></name> <operator pos:line="99" pos:column="43">=<pos:position pos:line="99" pos:column="44"/></operator> <name pos:line="99" pos:column="45">ERR34<pos:position pos:line="99" pos:column="50"/></name></expr>;<pos:position pos:line="99" pos:column="51"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="100" pos:column="9">ptr<pos:position pos:line="100" pos:column="12"/></name> <operator pos:line="100" pos:column="13">=<pos:position pos:line="100" pos:column="14"/></operator> <name pos:line="100" pos:column="15">pt<pos:position pos:line="100" pos:column="17"/></name></expr>;<pos:position pos:line="100" pos:column="18"/></expr_stmt>
        <break pos:line="101" pos:column="9">break;<pos:position pos:line="101" pos:column="15"/></break>
        }<pos:position pos:line="102" pos:column="10"/></block></then></if>
      <comment type="block" pos:line="103" pos:column="7">/* If the sequence of hex digits does not end with '}', then we don't
      recognize this construct; fall through to the normal \x handling. */</comment>
      }<pos:position pos:line="105" pos:column="8"/></block></then></if>
<cpp:endif pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">endif<pos:position pos:line="106" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="108" pos:column="5">/* Read just a single hex char */</comment>

    <expr_stmt><expr><name pos:line="110" pos:column="5">c<pos:position pos:line="110" pos:column="6"/></name> <operator pos:line="110" pos:column="7">=<pos:position pos:line="110" pos:column="8"/></operator> <literal type="number" pos:line="110" pos:column="9">0<pos:position pos:line="110" pos:column="10"/></literal></expr>;<pos:position pos:line="110" pos:column="11"/></expr_stmt>
    <while pos:line="111" pos:column="5">while <condition pos:line="111" pos:column="11">(<expr><name pos:line="111" pos:column="12">i<pos:position pos:line="111" pos:column="13"/></name><operator pos:line="111" pos:column="13">++<pos:position pos:line="111" pos:column="15"/></operator> <operator pos:line="111" pos:column="16">&lt;<pos:position pos:line="111" pos:column="20"/></operator> <literal type="number" pos:line="111" pos:column="18">2<pos:position pos:line="111" pos:column="19"/></literal> <operator pos:line="111" pos:column="20">&amp;&amp;<pos:position pos:line="111" pos:column="30"/></operator> <operator pos:line="111" pos:column="23">(<pos:position pos:line="111" pos:column="24"/></operator><name><name pos:line="111" pos:column="24">cd<pos:position pos:line="111" pos:column="26"/></name><operator pos:line="111" pos:column="26">-&gt;<pos:position pos:line="111" pos:column="31"/></operator><name pos:line="111" pos:column="28">ctypes<pos:position pos:line="111" pos:column="34"/></name><index pos:line="111" pos:column="34">[<expr><name><name pos:line="111" pos:column="35">ptr<pos:position pos:line="111" pos:column="38"/></name><index pos:line="111" pos:column="38">[<expr><literal type="number" pos:line="111" pos:column="39">1<pos:position pos:line="111" pos:column="40"/></literal></expr>]<pos:position pos:line="111" pos:column="41"/></index></name></expr>]<pos:position pos:line="111" pos:column="42"/></index></name> <operator pos:line="111" pos:column="43">&amp;<pos:position pos:line="111" pos:column="48"/></operator> <name pos:line="111" pos:column="45">ctype_xdigit<pos:position pos:line="111" pos:column="57"/></name><operator pos:line="111" pos:column="57">)<pos:position pos:line="111" pos:column="58"/></operator> <operator pos:line="111" pos:column="59">!=<pos:position pos:line="111" pos:column="61"/></operator> <literal type="number" pos:line="111" pos:column="62">0<pos:position pos:line="111" pos:column="63"/></literal></expr>)<pos:position pos:line="111" pos:column="64"/></condition>
      <block pos:line="112" pos:column="7">{
      <expr_stmt><expr><name pos:line="113" pos:column="7">ptr<pos:position pos:line="113" pos:column="10"/></name><operator pos:line="113" pos:column="10">++<pos:position pos:line="113" pos:column="12"/></operator></expr>;<pos:position pos:line="113" pos:column="13"/></expr_stmt>
      <expr_stmt><expr><name pos:line="114" pos:column="7">c<pos:position pos:line="114" pos:column="8"/></name> <operator pos:line="114" pos:column="9">=<pos:position pos:line="114" pos:column="10"/></operator> <name pos:line="114" pos:column="11">c<pos:position pos:line="114" pos:column="12"/></name> <operator pos:line="114" pos:column="13">*<pos:position pos:line="114" pos:column="14"/></operator> <literal type="number" pos:line="114" pos:column="15">16<pos:position pos:line="114" pos:column="17"/></literal> <operator pos:line="114" pos:column="18">+<pos:position pos:line="114" pos:column="19"/></operator> <name><name pos:line="114" pos:column="20">cd<pos:position pos:line="114" pos:column="22"/></name><operator pos:line="114" pos:column="22">-&gt;<pos:position pos:line="114" pos:column="27"/></operator><name pos:line="114" pos:column="24">lcc<pos:position pos:line="114" pos:column="27"/></name><index pos:line="114" pos:column="27">[<expr><operator pos:line="114" pos:column="28">*<pos:position pos:line="114" pos:column="29"/></operator><name pos:line="114" pos:column="29">ptr<pos:position pos:line="114" pos:column="32"/></name></expr>]<pos:position pos:line="114" pos:column="33"/></index></name> <operator pos:line="114" pos:column="34">-<pos:position pos:line="114" pos:column="35"/></operator>
        <operator pos:line="115" pos:column="9">(<pos:position pos:line="115" pos:column="10"/></operator><ternary><condition><expr><operator pos:line="115" pos:column="10">(<pos:position pos:line="115" pos:column="11"/></operator><operator pos:line="115" pos:column="11">(<pos:position pos:line="115" pos:column="12"/></operator><name><name pos:line="115" pos:column="12">cd<pos:position pos:line="115" pos:column="14"/></name><operator pos:line="115" pos:column="14">-&gt;<pos:position pos:line="115" pos:column="19"/></operator><name pos:line="115" pos:column="16">ctypes<pos:position pos:line="115" pos:column="22"/></name><index pos:line="115" pos:column="22">[<expr><operator pos:line="115" pos:column="23">*<pos:position pos:line="115" pos:column="24"/></operator><name pos:line="115" pos:column="24">ptr<pos:position pos:line="115" pos:column="27"/></name></expr>]<pos:position pos:line="115" pos:column="28"/></index></name> <operator pos:line="115" pos:column="29">&amp;<pos:position pos:line="115" pos:column="34"/></operator> <name pos:line="115" pos:column="31">ctype_digit<pos:position pos:line="115" pos:column="42"/></name><operator pos:line="115" pos:column="42">)<pos:position pos:line="115" pos:column="43"/></operator> <operator pos:line="115" pos:column="44">!=<pos:position pos:line="115" pos:column="46"/></operator> <literal type="number" pos:line="115" pos:column="47">0<pos:position pos:line="115" pos:column="48"/></literal><operator pos:line="115" pos:column="48">)<pos:position pos:line="115" pos:column="49"/></operator></expr>?<pos:position pos:line="115" pos:column="50"/></condition><then pos:line="115" pos:column="50"> <expr><literal type="char" pos:line="115" pos:column="51">'0'<pos:position pos:line="115" pos:column="54"/></literal></expr> <pos:position pos:line="115" pos:column="55"/></then><else pos:line="115" pos:column="55">: <expr><literal type="char" pos:line="115" pos:column="57">'W'<pos:position pos:line="115" pos:column="60"/></literal></expr></else></ternary><operator pos:line="115" pos:column="60">)<pos:position pos:line="115" pos:column="61"/></operator></expr>;<pos:position pos:line="115" pos:column="62"/></expr_stmt>
      }<pos:position pos:line="116" pos:column="8"/></block></while>
    <break pos:line="117" pos:column="5">break;<pos:position pos:line="117" pos:column="11"/></break>

    <comment type="block" pos:line="119" pos:column="5">/* Other special escapes not starting with a digit are straightforward */</comment>

    <case pos:line="121" pos:column="5">case <expr><literal type="char" pos:line="121" pos:column="10">'c'<pos:position pos:line="121" pos:column="13"/></literal></expr>:<pos:position pos:line="121" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="122" pos:column="5">c<pos:position pos:line="122" pos:column="6"/></name> <operator pos:line="122" pos:column="7">=<pos:position pos:line="122" pos:column="8"/></operator> <operator pos:line="122" pos:column="9">*<pos:position pos:line="122" pos:column="10"/></operator><operator pos:line="122" pos:column="10">(<pos:position pos:line="122" pos:column="11"/></operator><operator pos:line="122" pos:column="11">++<pos:position pos:line="122" pos:column="13"/></operator><name pos:line="122" pos:column="13">ptr<pos:position pos:line="122" pos:column="16"/></name><operator pos:line="122" pos:column="16">)<pos:position pos:line="122" pos:column="17"/></operator></expr>;<pos:position pos:line="122" pos:column="18"/></expr_stmt>
    <if pos:line="123" pos:column="5">if <condition pos:line="123" pos:column="8">(<expr><name pos:line="123" pos:column="9">c<pos:position pos:line="123" pos:column="10"/></name> <operator pos:line="123" pos:column="11">==<pos:position pos:line="123" pos:column="13"/></operator> <literal type="number" pos:line="123" pos:column="14">0<pos:position pos:line="123" pos:column="15"/></literal></expr>)<pos:position pos:line="123" pos:column="16"/></condition><then pos:line="123" pos:column="16">
      <block pos:line="124" pos:column="7">{
      <expr_stmt><expr><operator pos:line="125" pos:column="7">*<pos:position pos:line="125" pos:column="8"/></operator><name pos:line="125" pos:column="8">errorptr<pos:position pos:line="125" pos:column="16"/></name> <operator pos:line="125" pos:column="17">=<pos:position pos:line="125" pos:column="18"/></operator> <name pos:line="125" pos:column="19">ERR2<pos:position pos:line="125" pos:column="23"/></name></expr>;<pos:position pos:line="125" pos:column="24"/></expr_stmt>
      <return pos:line="126" pos:column="7">return <expr><literal type="number" pos:line="126" pos:column="14">0<pos:position pos:line="126" pos:column="15"/></literal></expr>;<pos:position pos:line="126" pos:column="16"/></return>
      }<pos:position pos:line="127" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="129" pos:column="5">/* A letter is upper-cased; then the 0x40 bit is flipped */</comment>

    <if pos:line="131" pos:column="5">if <condition pos:line="131" pos:column="8">(<expr><name pos:line="131" pos:column="9">c<pos:position pos:line="131" pos:column="10"/></name> <operator pos:line="131" pos:column="11">&gt;=<pos:position pos:line="131" pos:column="16"/></operator> <literal type="char" pos:line="131" pos:column="14">'a'<pos:position pos:line="131" pos:column="17"/></literal> <operator pos:line="131" pos:column="18">&amp;&amp;<pos:position pos:line="131" pos:column="28"/></operator> <name pos:line="131" pos:column="21">c<pos:position pos:line="131" pos:column="22"/></name> <operator pos:line="131" pos:column="23">&lt;=<pos:position pos:line="131" pos:column="28"/></operator> <literal type="char" pos:line="131" pos:column="26">'z'<pos:position pos:line="131" pos:column="29"/></literal></expr>)<pos:position pos:line="131" pos:column="30"/></condition><then pos:line="131" pos:column="30"> <block type="pseudo"><expr_stmt><expr><name pos:line="131" pos:column="31">c<pos:position pos:line="131" pos:column="32"/></name> <operator pos:line="131" pos:column="33">=<pos:position pos:line="131" pos:column="34"/></operator> <name><name pos:line="131" pos:column="35">cd<pos:position pos:line="131" pos:column="37"/></name><operator pos:line="131" pos:column="37">-&gt;<pos:position pos:line="131" pos:column="42"/></operator><name pos:line="131" pos:column="39">fcc<pos:position pos:line="131" pos:column="42"/></name><index pos:line="131" pos:column="42">[<expr><name pos:line="131" pos:column="43">c<pos:position pos:line="131" pos:column="44"/></name></expr>]<pos:position pos:line="131" pos:column="45"/></index></name></expr>;<pos:position pos:line="131" pos:column="46"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="132" pos:column="5">c<pos:position pos:line="132" pos:column="6"/></name> <operator pos:line="132" pos:column="7">^=<pos:position pos:line="132" pos:column="9"/></operator> <literal type="number" pos:line="132" pos:column="10">0x40<pos:position pos:line="132" pos:column="14"/></literal></expr>;<pos:position pos:line="132" pos:column="15"/></expr_stmt>
    <break pos:line="133" pos:column="5">break;<pos:position pos:line="133" pos:column="11"/></break>

    <comment type="block" pos:line="135" pos:column="5">/* PCRE_EXTRA enables extensions to Perl in the matter of escapes. Any
    other alphameric following \ is an error if PCRE_EXTRA was set; otherwise,
    for Perl compatibility, it is a literal. This code looks a bit odd, but
    there used to be some cases other than the default, and there may be again
    in future, so I haven't "optimized" it. */</comment>

    <default pos:line="141" pos:column="5">default:<pos:position pos:line="141" pos:column="13"/></default>
    <if pos:line="142" pos:column="5">if <condition pos:line="142" pos:column="8">(<expr><operator pos:line="142" pos:column="9">(<pos:position pos:line="142" pos:column="10"/></operator><name pos:line="142" pos:column="10">options<pos:position pos:line="142" pos:column="17"/></name> <operator pos:line="142" pos:column="18">&amp;<pos:position pos:line="142" pos:column="23"/></operator> <name pos:line="142" pos:column="20">PCRE_EXTRA<pos:position pos:line="142" pos:column="30"/></name><operator pos:line="142" pos:column="30">)<pos:position pos:line="142" pos:column="31"/></operator> <operator pos:line="142" pos:column="32">!=<pos:position pos:line="142" pos:column="34"/></operator> <literal type="number" pos:line="142" pos:column="35">0<pos:position pos:line="142" pos:column="36"/></literal></expr>)<pos:position pos:line="142" pos:column="37"/></condition><then pos:line="142" pos:column="37"> <block type="pseudo"><switch pos:line="142" pos:column="38">switch<condition pos:line="142" pos:column="44">(<expr><name pos:line="142" pos:column="45">c<pos:position pos:line="142" pos:column="46"/></name></expr>)<pos:position pos:line="142" pos:column="47"/></condition>
      <block pos:line="143" pos:column="7">{
      <default pos:line="144" pos:column="7">default:<pos:position pos:line="144" pos:column="15"/></default>
      <expr_stmt><expr><operator pos:line="145" pos:column="7">*<pos:position pos:line="145" pos:column="8"/></operator><name pos:line="145" pos:column="8">errorptr<pos:position pos:line="145" pos:column="16"/></name> <operator pos:line="145" pos:column="17">=<pos:position pos:line="145" pos:column="18"/></operator> <name pos:line="145" pos:column="19">ERR3<pos:position pos:line="145" pos:column="23"/></name></expr>;<pos:position pos:line="145" pos:column="24"/></expr_stmt>
      <break pos:line="146" pos:column="7">break;<pos:position pos:line="146" pos:column="13"/></break>
      }<pos:position pos:line="147" pos:column="8"/></block></switch></block></then></if>
    <break pos:line="148" pos:column="5">break;<pos:position pos:line="148" pos:column="11"/></break>
    }<pos:position pos:line="149" pos:column="6"/></block></switch>
  }<pos:position pos:line="150" pos:column="4"/></block></else></if>

<expr_stmt><expr><operator pos:line="152" pos:column="1">*<pos:position pos:line="152" pos:column="2"/></operator><name pos:line="152" pos:column="2">ptrptr<pos:position pos:line="152" pos:column="8"/></name> <operator pos:line="152" pos:column="9">=<pos:position pos:line="152" pos:column="10"/></operator> <name pos:line="152" pos:column="11">ptr<pos:position pos:line="152" pos:column="14"/></name></expr>;<pos:position pos:line="152" pos:column="15"/></expr_stmt>
<return pos:line="153" pos:column="1">return <expr><name pos:line="153" pos:column="8">c<pos:position pos:line="153" pos:column="9"/></name></expr>;<pos:position pos:line="153" pos:column="10"/></return>
}<pos:position pos:line="154" pos:column="2"/></block></function></unit>
