<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1847_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">trace_add<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">server_rec<pos:position pos:line="1" pos:column="33"/></name> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">s<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">request_rec<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">r<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">x_cfg<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">mconfig<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,
                      <parameter><decl><type><specifier pos:line="2" pos:column="23">const<pos:position pos:line="2" pos:column="28"/></specifier> <name pos:line="2" pos:column="29">char<pos:position pos:line="2" pos:column="33"/></name> <modifier pos:line="2" pos:column="34">*<pos:position pos:line="2" pos:column="35"/></modifier></type><name pos:line="2" pos:column="35">note<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="40"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">sofar<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">addon<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">where<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_pool_t<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">p<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">trace_copy<pos:position pos:line="8" pos:column="27"/></name></decl>;<pos:position pos:line="8" pos:column="28"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/*
     * Make sure our pools and tables are set up - we need 'em.
     */</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">setup_module_cells<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">()<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
    <comment type="block" pos:line="14" pos:column="5">/*
     * Now, if we're in request-context, we use the request pool.
     */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">r<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">!=<pos:position pos:line="17" pos:column="13"/></operator> <name pos:line="17" pos:column="14">NULL<pos:position pos:line="17" pos:column="18"/></name></expr>)<pos:position pos:line="17" pos:column="19"/></condition><then pos:line="17" pos:column="19"> <block pos:line="17" pos:column="20">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">p<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <name><name pos:line="18" pos:column="13">r<pos:position pos:line="18" pos:column="14"/></name><operator pos:line="18" pos:column="14">-&gt;<pos:position pos:line="18" pos:column="19"/></operator><name pos:line="18" pos:column="16">pool<pos:position pos:line="18" pos:column="20"/></name></name></expr>;<pos:position pos:line="18" pos:column="21"/></expr_stmt>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">trace_copy<pos:position pos:line="19" pos:column="24"/></name> <operator pos:line="19" pos:column="25">=<pos:position pos:line="19" pos:column="26"/></operator> <call><name pos:line="19" pos:column="27">apr_table_get<pos:position pos:line="19" pos:column="40"/></name><argument_list pos:line="19" pos:column="40">(<argument><expr><name><name pos:line="19" pos:column="41">r<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">notes<pos:position pos:line="19" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="51">TRACE_NOTE<pos:position pos:line="19" pos:column="61"/></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call><operator pos:line="19" pos:column="62">)<pos:position pos:line="19" pos:column="63"/></operator> <operator pos:line="19" pos:column="64">==<pos:position pos:line="19" pos:column="66"/></operator> <name pos:line="19" pos:column="67">NULL<pos:position pos:line="19" pos:column="71"/></name></expr>)<pos:position pos:line="19" pos:column="72"/></condition><then pos:line="19" pos:column="72"> <block pos:line="19" pos:column="73">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">trace_copy<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <literal type="string" pos:line="20" pos:column="26">""<pos:position pos:line="20" pos:column="28"/></literal></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then>
    <else pos:line="23" pos:column="5">else <block pos:line="23" pos:column="10">{
        <comment type="block" pos:line="24" pos:column="9">/*
         * We're not in request context, so the trace gets attached to our
         * module-wide pool.  We do the create/destroy every time we're called
         * in non-request context; this avoids leaking memory in some of
         * the subsequent calls that allocate memory only once (such as the
         * key formation below).
         *
         * Make a new sub-pool and copy any existing trace to it.  Point the
         * trace cell at the copied value.
         */</comment>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">apr_pool_create<pos:position pos:line="34" pos:column="24"/></name><argument_list pos:line="34" pos:column="24">(<argument><expr><operator pos:line="34" pos:column="25">&amp;<pos:position pos:line="34" pos:column="30"/></operator><name pos:line="34" pos:column="26">p<pos:position pos:line="34" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="29">x_pool<pos:position pos:line="34" pos:column="35"/></name></expr></argument>)<pos:position pos:line="34" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="37"/></expr_stmt>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">trace<pos:position pos:line="35" pos:column="18"/></name> <operator pos:line="35" pos:column="19">!=<pos:position pos:line="35" pos:column="21"/></operator> <name pos:line="35" pos:column="22">NULL<pos:position pos:line="35" pos:column="26"/></name></expr>)<pos:position pos:line="35" pos:column="27"/></condition><then pos:line="35" pos:column="27"> <block pos:line="35" pos:column="28">{
            <expr_stmt><expr><name pos:line="36" pos:column="13">trace<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <call><name pos:line="36" pos:column="21">apr_pstrdup<pos:position pos:line="36" pos:column="32"/></name><argument_list pos:line="36" pos:column="32">(<argument><expr><name pos:line="36" pos:column="33">p<pos:position pos:line="36" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="36">trace<pos:position pos:line="36" pos:column="41"/></name></expr></argument>)<pos:position pos:line="36" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="38" pos:column="9">/*
         * Now, if we have a sub-pool from before, nuke it and replace with
         * the one we just allocated.
         */</comment>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">x_subpool<pos:position pos:line="42" pos:column="22"/></name> <operator pos:line="42" pos:column="23">!=<pos:position pos:line="42" pos:column="25"/></operator> <name pos:line="42" pos:column="26">NULL<pos:position pos:line="42" pos:column="30"/></name></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31"> <block pos:line="42" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">apr_pool_destroy<pos:position pos:line="43" pos:column="29"/></name><argument_list pos:line="43" pos:column="29">(<argument><expr><name pos:line="43" pos:column="30">x_subpool<pos:position pos:line="43" pos:column="39"/></name></expr></argument>)<pos:position pos:line="43" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="45" pos:column="9">x_subpool<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <name pos:line="45" pos:column="21">p<pos:position pos:line="45" pos:column="22"/></name></expr>;<pos:position pos:line="45" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="46" pos:column="9">trace_copy<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">=<pos:position pos:line="46" pos:column="21"/></operator> <name pos:line="46" pos:column="22">trace<pos:position pos:line="46" pos:column="27"/></name></expr>;<pos:position pos:line="46" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></else></if>
    <comment type="block" pos:line="48" pos:column="5">/*
     * If we weren't passed a configuration record, we can't figure out to
     * what location this call applies.  This only happens for co-routines
     * that don't operate in a particular directory or server context.  If we
     * got a valid record, extract the location (directory or server) to which
     * it applies.
     */</comment>
    <expr_stmt><expr><name pos:line="55" pos:column="5">where<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="55" pos:column="13">(<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">mconfig<pos:position pos:line="55" pos:column="21"/></name> <operator pos:line="55" pos:column="22">!=<pos:position pos:line="55" pos:column="24"/></operator> <name pos:line="55" pos:column="25">NULL<pos:position pos:line="55" pos:column="29"/></name><operator pos:line="55" pos:column="29">)<pos:position pos:line="55" pos:column="30"/></operator></expr> ?<pos:position pos:line="55" pos:column="32"/></condition><then pos:line="55" pos:column="32"> <expr><name><name pos:line="55" pos:column="33">mconfig<pos:position pos:line="55" pos:column="40"/></name><operator pos:line="55" pos:column="40">-&gt;<pos:position pos:line="55" pos:column="45"/></operator><name pos:line="55" pos:column="42">loc<pos:position pos:line="55" pos:column="45"/></name></name></expr> <pos:position pos:line="55" pos:column="46"/></then><else pos:line="55" pos:column="46">: <expr><literal type="string" pos:line="55" pos:column="48">"nowhere"<pos:position pos:line="55" pos:column="57"/></literal></expr></else></ternary></expr>;<pos:position pos:line="55" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name pos:line="56" pos:column="5">where<pos:position pos:line="56" pos:column="10"/></name> <operator pos:line="56" pos:column="11">=<pos:position pos:line="56" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="56" pos:column="13">(<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">where<pos:position pos:line="56" pos:column="19"/></name> <operator pos:line="56" pos:column="20">!=<pos:position pos:line="56" pos:column="22"/></operator> <name pos:line="56" pos:column="23">NULL<pos:position pos:line="56" pos:column="27"/></name><operator pos:line="56" pos:column="27">)<pos:position pos:line="56" pos:column="28"/></operator></expr> ?<pos:position pos:line="56" pos:column="30"/></condition><then pos:line="56" pos:column="30"> <expr><name pos:line="56" pos:column="31">where<pos:position pos:line="56" pos:column="36"/></name></expr> <pos:position pos:line="56" pos:column="37"/></then><else pos:line="56" pos:column="37">: <expr><literal type="string" pos:line="56" pos:column="39">""<pos:position pos:line="56" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt>
    <comment type="block" pos:line="57" pos:column="5">/*
     * Now, if we're not in request context, see if we've been called with
     * this particular combination before.  The apr_table_t is allocated in the
     * module's private pool, which doesn't get destroyed.
     */</comment>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><name pos:line="62" pos:column="9">r<pos:position pos:line="62" pos:column="10"/></name> <operator pos:line="62" pos:column="11">==<pos:position pos:line="62" pos:column="13"/></operator> <name pos:line="62" pos:column="14">NULL<pos:position pos:line="62" pos:column="18"/></name></expr>)<pos:position pos:line="62" pos:column="19"/></condition><then pos:line="62" pos:column="19"> <block pos:line="62" pos:column="20">{
        <decl_stmt><decl><type><name pos:line="63" pos:column="9">char<pos:position pos:line="63" pos:column="13"/></name> <modifier pos:line="63" pos:column="14">*<pos:position pos:line="63" pos:column="15"/></modifier></type><name pos:line="63" pos:column="15">key<pos:position pos:line="63" pos:column="18"/></name></decl>;<pos:position pos:line="63" pos:column="19"/></decl_stmt>

        <expr_stmt><expr><name pos:line="65" pos:column="9">key<pos:position pos:line="65" pos:column="12"/></name> <operator pos:line="65" pos:column="13">=<pos:position pos:line="65" pos:column="14"/></operator> <call><name pos:line="65" pos:column="15">apr_pstrcat<pos:position pos:line="65" pos:column="26"/></name><argument_list pos:line="65" pos:column="26">(<argument><expr><name pos:line="65" pos:column="27">p<pos:position pos:line="65" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="30">note<pos:position pos:line="65" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="36">":"<pos:position pos:line="65" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">where<pos:position pos:line="65" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="48">NULL<pos:position pos:line="65" pos:column="52"/></name></expr></argument>)<pos:position pos:line="65" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="54"/></expr_stmt>
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><call><name pos:line="66" pos:column="13">apr_table_get<pos:position pos:line="66" pos:column="26"/></name><argument_list pos:line="66" pos:column="26">(<argument><expr><name pos:line="66" pos:column="27">static_calls_made<pos:position pos:line="66" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="46">key<pos:position pos:line="66" pos:column="49"/></name></expr></argument>)<pos:position pos:line="66" pos:column="50"/></argument_list></call> <operator pos:line="66" pos:column="51">!=<pos:position pos:line="66" pos:column="53"/></operator> <name pos:line="66" pos:column="54">NULL<pos:position pos:line="66" pos:column="58"/></name></expr>)<pos:position pos:line="66" pos:column="59"/></condition><then pos:line="66" pos:column="59"> <block pos:line="66" pos:column="60">{
            <comment type="block" pos:line="67" pos:column="13">/*
             * Been here, done this.
             */</comment>
            <return pos:line="70" pos:column="13">return;<pos:position pos:line="70" pos:column="20"/></return>
        }<pos:position pos:line="71" pos:column="10"/></block></then>
        <else pos:line="72" pos:column="9">else <block pos:line="72" pos:column="14">{
            <comment type="block" pos:line="73" pos:column="13">/*
             * First time for this combination of routine and environment -
             * log it so we don't do it again.
             */</comment>
            <expr_stmt><expr><call><name pos:line="77" pos:column="13">apr_table_set<pos:position pos:line="77" pos:column="26"/></name><argument_list pos:line="77" pos:column="26">(<argument><expr><name pos:line="77" pos:column="27">static_calls_made<pos:position pos:line="77" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="46">key<pos:position pos:line="77" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="77" pos:column="51">"been here"<pos:position pos:line="77" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="78" pos:column="10"/></block></else></if>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="80" pos:column="5">addon<pos:position pos:line="80" pos:column="10"/></name> <operator pos:line="80" pos:column="11">=<pos:position pos:line="80" pos:column="12"/></operator> <call><name pos:line="80" pos:column="13">apr_pstrcat<pos:position pos:line="80" pos:column="24"/></name><argument_list pos:line="80" pos:column="24">(<argument><expr><name pos:line="80" pos:column="25">p<pos:position pos:line="80" pos:column="26"/></name></expr></argument>,
                        <argument><expr><literal type="string" pos:line="81" pos:column="25">"   &lt;li&gt;\n"<pos:position pos:line="81" pos:column="42"/></literal>
                        <literal type="string" pos:line="82" pos:column="25">"    &lt;dl&gt;\n"<pos:position pos:line="82" pos:column="43"/></literal>
                        <literal type="string" pos:line="83" pos:column="25">"     &lt;dt&gt;&lt;samp&gt;"<pos:position pos:line="83" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="83" pos:column="44">note<pos:position pos:line="83" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="50">"&lt;/samp&gt;&lt;/dt&gt;\n"<pos:position pos:line="83" pos:column="78"/></literal>
                        <literal type="string" pos:line="84" pos:column="25">"     &lt;dd&gt;&lt;samp&gt;["<pos:position pos:line="84" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="84" pos:column="45">where<pos:position pos:line="84" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="84" pos:column="52">"]&lt;/samp&gt;&lt;/dd&gt;\n"<pos:position pos:line="84" pos:column="81"/></literal>
                        <literal type="string" pos:line="85" pos:column="25">"    &lt;/dl&gt;\n"<pos:position pos:line="85" pos:column="44"/></literal>
                        <literal type="string" pos:line="86" pos:column="25">"   &lt;/li&gt;\n"<pos:position pos:line="86" pos:column="43"/></literal></expr></argument>,
                        <argument><expr><name pos:line="87" pos:column="25">NULL<pos:position pos:line="87" pos:column="29"/></name></expr></argument>)<pos:position pos:line="87" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="88" pos:column="5">sofar<pos:position pos:line="88" pos:column="10"/></name> <operator pos:line="88" pos:column="11">=<pos:position pos:line="88" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="88" pos:column="13">(<pos:position pos:line="88" pos:column="14"/></operator><name pos:line="88" pos:column="14">trace_copy<pos:position pos:line="88" pos:column="24"/></name> <operator pos:line="88" pos:column="25">==<pos:position pos:line="88" pos:column="27"/></operator> <name pos:line="88" pos:column="28">NULL<pos:position pos:line="88" pos:column="32"/></name><operator pos:line="88" pos:column="32">)<pos:position pos:line="88" pos:column="33"/></operator></expr> ?<pos:position pos:line="88" pos:column="35"/></condition><then pos:line="88" pos:column="35"> <expr><literal type="string" pos:line="88" pos:column="36">""<pos:position pos:line="88" pos:column="38"/></literal></expr> <pos:position pos:line="88" pos:column="39"/></then><else pos:line="88" pos:column="39">: <expr><name pos:line="88" pos:column="41">trace_copy<pos:position pos:line="88" pos:column="51"/></name></expr></else></ternary></expr>;<pos:position pos:line="88" pos:column="52"/></expr_stmt>
    <expr_stmt><expr><name pos:line="89" pos:column="5">trace_copy<pos:position pos:line="89" pos:column="15"/></name> <operator pos:line="89" pos:column="16">=<pos:position pos:line="89" pos:column="17"/></operator> <call><name pos:line="89" pos:column="18">apr_pstrcat<pos:position pos:line="89" pos:column="29"/></name><argument_list pos:line="89" pos:column="29">(<argument><expr><name pos:line="89" pos:column="30">p<pos:position pos:line="89" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="33">sofar<pos:position pos:line="89" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="40">addon<pos:position pos:line="89" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="47">NULL<pos:position pos:line="89" pos:column="51"/></name></expr></argument>)<pos:position pos:line="89" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="53"/></expr_stmt>
    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><name pos:line="90" pos:column="9">r<pos:position pos:line="90" pos:column="10"/></name> <operator pos:line="90" pos:column="11">!=<pos:position pos:line="90" pos:column="13"/></operator> <name pos:line="90" pos:column="14">NULL<pos:position pos:line="90" pos:column="18"/></name></expr>)<pos:position pos:line="90" pos:column="19"/></condition><then pos:line="90" pos:column="19"> <block pos:line="90" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">apr_table_set<pos:position pos:line="91" pos:column="22"/></name><argument_list pos:line="91" pos:column="22">(<argument><expr><name><name pos:line="91" pos:column="23">r<pos:position pos:line="91" pos:column="24"/></name><operator pos:line="91" pos:column="24">-&gt;<pos:position pos:line="91" pos:column="29"/></operator><name pos:line="91" pos:column="26">notes<pos:position pos:line="91" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="33">TRACE_NOTE<pos:position pos:line="91" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="45">trace_copy<pos:position pos:line="91" pos:column="55"/></name></expr></argument>)<pos:position pos:line="91" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></then>
    <else pos:line="93" pos:column="5">else <block pos:line="93" pos:column="10">{
        <expr_stmt><expr><name pos:line="94" pos:column="9">trace<pos:position pos:line="94" pos:column="14"/></name> <operator pos:line="94" pos:column="15">=<pos:position pos:line="94" pos:column="16"/></operator> <name pos:line="94" pos:column="17">trace_copy<pos:position pos:line="94" pos:column="27"/></name></expr>;<pos:position pos:line="94" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="95" pos:column="6"/></block></else></if>
    <comment type="block" pos:line="96" pos:column="5">/*
     * You *could* change the following if you wanted to see the calling
     * sequence reported in the server's error_log, but beware - almost all of
     * these co-routines are called for every single request, and the impact
     * on the size (and readability) of the error_log is considerable.
     */</comment>
<cpp:define pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">define<pos:position pos:line="102" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="102" pos:column="9">EXAMPLE_LOG_EACH<pos:position pos:line="102" pos:column="25"/></name></cpp:macro> <cpp:value pos:line="102" pos:column="26">0<pos:position pos:line="102" pos:column="27"/></cpp:value></cpp:define>
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><name pos:line="103" pos:column="9">EXAMPLE_LOG_EACH<pos:position pos:line="103" pos:column="25"/></name> <operator pos:line="103" pos:column="26">&amp;&amp;<pos:position pos:line="103" pos:column="36"/></operator> <operator pos:line="103" pos:column="29">(<pos:position pos:line="103" pos:column="30"/></operator><name pos:line="103" pos:column="30">s<pos:position pos:line="103" pos:column="31"/></name> <operator pos:line="103" pos:column="32">!=<pos:position pos:line="103" pos:column="34"/></operator> <name pos:line="103" pos:column="35">NULL<pos:position pos:line="103" pos:column="39"/></name><operator pos:line="103" pos:column="39">)<pos:position pos:line="103" pos:column="40"/></operator></expr>)<pos:position pos:line="103" pos:column="41"/></condition><then pos:line="103" pos:column="41"> <block pos:line="103" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="104" pos:column="9">ap_log_error<pos:position pos:line="104" pos:column="21"/></name><argument_list pos:line="104" pos:column="21">(<argument><expr><name pos:line="104" pos:column="22">APLOG_MARK<pos:position pos:line="104" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="34">APLOG_DEBUG<pos:position pos:line="104" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="104" pos:column="47">0<pos:position pos:line="104" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="50">s<pos:position pos:line="104" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="53">"mod_example: %s"<pos:position pos:line="104" pos:column="70"/></literal></expr></argument>, <argument><expr><name pos:line="104" pos:column="72">note<pos:position pos:line="104" pos:column="76"/></name></expr></argument>)<pos:position pos:line="104" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>
}<pos:position pos:line="106" pos:column="2"/></block></function></unit>
