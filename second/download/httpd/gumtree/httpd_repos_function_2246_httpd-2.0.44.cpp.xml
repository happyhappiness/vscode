<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2246_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">child_main<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">child_num_arg<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="42"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_thread_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">threads<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">thread_starter<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">ts<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_threadattr_t<pos:position pos:line="6" pos:column="21"/></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">thread_attr<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_thread_t<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">start_thread_id<pos:position pos:line="7" pos:column="34"/></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>

    <expr_stmt><expr><name pos:line="9" pos:column="5">ap_my_pid<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">=<pos:position pos:line="9" pos:column="16"/></operator> <call><name pos:line="9" pos:column="17">getpid<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">()<pos:position pos:line="9" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="10" pos:column="5">apr_pool_create<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><operator pos:line="10" pos:column="21">&amp;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="22">pchild<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">pconf<pos:position pos:line="10" pos:column="35"/></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="12" pos:column="5">/*stuff to do before we switch id's, so we have permissions.*/</comment>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">ap_reopen_scoreboard<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">pchild<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="34">NULL<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="40">0<pos:position pos:line="13" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="43"/></expr_stmt>

    <expr_stmt><expr><name pos:line="15" pos:column="5">rv<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <call><name pos:line="15" pos:column="10">SAFE_ACCEPT<pos:position pos:line="15" pos:column="21"/></name><argument_list pos:line="15" pos:column="21">(<argument><expr><call><name pos:line="15" pos:column="22">apr_proc_mutex_child_init<pos:position pos:line="15" pos:column="47"/></name><argument_list pos:line="15" pos:column="47">(<argument><expr><operator pos:line="15" pos:column="48">&amp;<pos:position pos:line="15" pos:column="53"/></operator><name pos:line="15" pos:column="49">accept_mutex<pos:position pos:line="15" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="63">ap_lock_fname<pos:position pos:line="15" pos:column="76"/></name></expr></argument>,
                                               <argument><expr><name pos:line="16" pos:column="48">pchild<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="16" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="57"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">rv<pos:position pos:line="17" pos:column="11"/></name> <operator pos:line="17" pos:column="12">!=<pos:position pos:line="17" pos:column="14"/></operator> <name pos:line="17" pos:column="15">APR_SUCCESS<pos:position pos:line="17" pos:column="26"/></name></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27"> <block pos:line="17" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="18" pos:column="9">ap_log_error<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">APLOG_MARK<pos:position pos:line="18" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="34">APLOG_EMERG<pos:position pos:line="18" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="47">rv<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">ap_server_conf<pos:position pos:line="18" pos:column="65"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="19" pos:column="22">"Couldn't initialize cross-process lock in child"<pos:position pos:line="19" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">clean_child_exit<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="20" pos:column="43"/></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">unixd_setup_child<pos:position pos:line="23" pos:column="26"/></name><argument_list pos:line="23" pos:column="26">()<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="29"/></condition><then pos:line="23" pos:column="29"> <block pos:line="23" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">clean_child_exit<pos:position pos:line="24" pos:column="25"/></name><argument_list pos:line="24" pos:column="25">(<argument><expr><name pos:line="24" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">ap_run_child_init<pos:position pos:line="27" pos:column="22"/></name><argument_list pos:line="27" pos:column="22">(<argument><expr><name pos:line="27" pos:column="23">pchild<pos:position pos:line="27" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="31">ap_server_conf<pos:position pos:line="27" pos:column="45"/></name></expr></argument>)<pos:position pos:line="27" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="29" pos:column="5">/* done with init critical section */</comment>

    <comment type="block" pos:line="31" pos:column="5">/* Just use the standard apr_setup_signal_thread to block all signals
     * from being received.  The child processes no longer use signals for
     * any communication with the parent process.
     */</comment>
    <expr_stmt><expr><name pos:line="35" pos:column="5">rv<pos:position pos:line="35" pos:column="7"/></name> <operator pos:line="35" pos:column="8">=<pos:position pos:line="35" pos:column="9"/></operator> <call><name pos:line="35" pos:column="10">apr_setup_signal_thread<pos:position pos:line="35" pos:column="33"/></name><argument_list pos:line="35" pos:column="33">()<pos:position pos:line="35" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">rv<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">!=<pos:position pos:line="36" pos:column="14"/></operator> <name pos:line="36" pos:column="15">APR_SUCCESS<pos:position pos:line="36" pos:column="26"/></name></expr>)<pos:position pos:line="36" pos:column="27"/></condition><then pos:line="36" pos:column="27"> <block pos:line="36" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">ap_log_error<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name pos:line="37" pos:column="22">APLOG_MARK<pos:position pos:line="37" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="34">APLOG_EMERG<pos:position pos:line="37" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="47">rv<pos:position pos:line="37" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="51">ap_server_conf<pos:position pos:line="37" pos:column="65"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="38" pos:column="22">"Couldn't initialize signal thread"<pos:position pos:line="38" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="39" pos:column="9">clean_child_exit<pos:position pos:line="39" pos:column="25"/></name><argument_list pos:line="39" pos:column="25">(<argument><expr><name pos:line="39" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="39" pos:column="43"/></name></expr></argument>)<pos:position pos:line="39" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">ap_max_requests_per_child<pos:position pos:line="42" pos:column="34"/></name></expr>)<pos:position pos:line="42" pos:column="35"/></condition><then pos:line="42" pos:column="35"> <block pos:line="42" pos:column="36">{
        <expr_stmt><expr><name pos:line="43" pos:column="9">requests_this_child<pos:position pos:line="43" pos:column="28"/></name> <operator pos:line="43" pos:column="29">=<pos:position pos:line="43" pos:column="30"/></operator> <name pos:line="43" pos:column="31">ap_max_requests_per_child<pos:position pos:line="43" pos:column="56"/></name></expr>;<pos:position pos:line="43" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="44" pos:column="6"/></block></then>
    <else pos:line="45" pos:column="5">else <block pos:line="45" pos:column="10">{
        <comment type="block" pos:line="46" pos:column="9">/* coding a value of zero means infinity */</comment>
        <expr_stmt><expr><name pos:line="47" pos:column="9">requests_this_child<pos:position pos:line="47" pos:column="28"/></name> <operator pos:line="47" pos:column="29">=<pos:position pos:line="47" pos:column="30"/></operator> <name pos:line="47" pos:column="31">INT_MAX<pos:position pos:line="47" pos:column="38"/></name></expr>;<pos:position pos:line="47" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></else></if>
    
    <comment type="block" pos:line="50" pos:column="5">/* Setup worker threads */</comment>

    <comment type="block" pos:line="52" pos:column="5">/* clear the storage; we may not create all our threads immediately, 
     * and we want a 0 entry to indicate a thread which was not created
     */</comment>
    <expr_stmt><expr><name pos:line="55" pos:column="5">threads<pos:position pos:line="55" pos:column="12"/></name> <operator pos:line="55" pos:column="13">=<pos:position pos:line="55" pos:column="14"/></operator> <operator pos:line="55" pos:column="15">(<pos:position pos:line="55" pos:column="16"/></operator><name pos:line="55" pos:column="16">apr_thread_t<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">*<pos:position pos:line="55" pos:column="30"/></operator><operator pos:line="55" pos:column="30">*<pos:position pos:line="55" pos:column="31"/></operator><operator pos:line="55" pos:column="31">)<pos:position pos:line="55" pos:column="32"/></operator><call><name pos:line="55" pos:column="32">calloc<pos:position pos:line="55" pos:column="38"/></name><argument_list pos:line="55" pos:column="38">(<argument><expr><literal type="number" pos:line="55" pos:column="39">1<pos:position pos:line="55" pos:column="40"/></literal></expr></argument>, 
                                <argument><expr><sizeof pos:line="56" pos:column="33">sizeof<argument_list pos:line="56" pos:column="39">(<argument><expr><name pos:line="56" pos:column="40">apr_thread_t<pos:position pos:line="56" pos:column="52"/></name> <operator pos:line="56" pos:column="53">*<pos:position pos:line="56" pos:column="54"/></operator></expr></argument>)<pos:position pos:line="56" pos:column="55"/></argument_list></sizeof> <operator pos:line="56" pos:column="56">*<pos:position pos:line="56" pos:column="57"/></operator> <name pos:line="56" pos:column="58">ap_threads_per_child<pos:position pos:line="56" pos:column="78"/></name></expr></argument>)<pos:position pos:line="56" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="80"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">threads<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">==<pos:position pos:line="57" pos:column="19"/></operator> <name pos:line="57" pos:column="20">NULL<pos:position pos:line="57" pos:column="24"/></name></expr>)<pos:position pos:line="57" pos:column="25"/></condition><then pos:line="57" pos:column="25"> <block pos:line="57" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">ap_log_error<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument><expr><name pos:line="58" pos:column="22">APLOG_MARK<pos:position pos:line="58" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">APLOG_ALERT<pos:position pos:line="58" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="47">errno<pos:position pos:line="58" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="54">ap_server_conf<pos:position pos:line="58" pos:column="68"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="59" pos:column="22">"malloc: out of memory"<pos:position pos:line="59" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="60" pos:column="9">clean_child_exit<pos:position pos:line="60" pos:column="25"/></name><argument_list pos:line="60" pos:column="25">(<argument><expr><name pos:line="60" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="60" pos:column="43"/></name></expr></argument>)<pos:position pos:line="60" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="63" pos:column="5">ts<pos:position pos:line="63" pos:column="7"/></name> <operator pos:line="63" pos:column="8">=<pos:position pos:line="63" pos:column="9"/></operator> <operator pos:line="63" pos:column="10">(<pos:position pos:line="63" pos:column="11"/></operator><name pos:line="63" pos:column="11">thread_starter<pos:position pos:line="63" pos:column="25"/></name> <operator pos:line="63" pos:column="26">*<pos:position pos:line="63" pos:column="27"/></operator><operator pos:line="63" pos:column="27">)<pos:position pos:line="63" pos:column="28"/></operator><call><name pos:line="63" pos:column="28">apr_palloc<pos:position pos:line="63" pos:column="38"/></name><argument_list pos:line="63" pos:column="38">(<argument><expr><name pos:line="63" pos:column="39">pchild<pos:position pos:line="63" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="63" pos:column="47">sizeof<argument_list pos:line="63" pos:column="53">(<argument><expr><operator pos:line="63" pos:column="54">*<pos:position pos:line="63" pos:column="55"/></operator><name pos:line="63" pos:column="55">ts<pos:position pos:line="63" pos:column="57"/></name></expr></argument>)<pos:position pos:line="63" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="63" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="60"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="65" pos:column="5">apr_threadattr_create<pos:position pos:line="65" pos:column="26"/></name><argument_list pos:line="65" pos:column="26">(<argument><expr><operator pos:line="65" pos:column="27">&amp;<pos:position pos:line="65" pos:column="32"/></operator><name pos:line="65" pos:column="28">thread_attr<pos:position pos:line="65" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="41">pchild<pos:position pos:line="65" pos:column="47"/></name></expr></argument>)<pos:position pos:line="65" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="49"/></expr_stmt>
    <comment type="block" pos:line="66" pos:column="5">/* 0 means PTHREAD_CREATE_JOINABLE */</comment>
    <expr_stmt><expr><call><name pos:line="67" pos:column="5">apr_threadattr_detach_set<pos:position pos:line="67" pos:column="30"/></name><argument_list pos:line="67" pos:column="30">(<argument><expr><name pos:line="67" pos:column="31">thread_attr<pos:position pos:line="67" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="67" pos:column="44">0<pos:position pos:line="67" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="69" pos:column="5">ts<pos:position pos:line="69" pos:column="7"/></name><operator pos:line="69" pos:column="7">-&gt;<pos:position pos:line="69" pos:column="12"/></operator><name pos:line="69" pos:column="9">threads<pos:position pos:line="69" pos:column="16"/></name></name> <operator pos:line="69" pos:column="17">=<pos:position pos:line="69" pos:column="18"/></operator> <name pos:line="69" pos:column="19">threads<pos:position pos:line="69" pos:column="26"/></name></expr>;<pos:position pos:line="69" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">ts<pos:position pos:line="70" pos:column="7"/></name><operator pos:line="70" pos:column="7">-&gt;<pos:position pos:line="70" pos:column="12"/></operator><name pos:line="70" pos:column="9">child_num_arg<pos:position pos:line="70" pos:column="22"/></name></name> <operator pos:line="70" pos:column="23">=<pos:position pos:line="70" pos:column="24"/></operator> <name pos:line="70" pos:column="25">child_num_arg<pos:position pos:line="70" pos:column="38"/></name></expr>;<pos:position pos:line="70" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">ts<pos:position pos:line="71" pos:column="7"/></name><operator pos:line="71" pos:column="7">-&gt;<pos:position pos:line="71" pos:column="12"/></operator><name pos:line="71" pos:column="9">threadattr<pos:position pos:line="71" pos:column="19"/></name></name> <operator pos:line="71" pos:column="20">=<pos:position pos:line="71" pos:column="21"/></operator> <name pos:line="71" pos:column="22">thread_attr<pos:position pos:line="71" pos:column="33"/></name></expr>;<pos:position pos:line="71" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name pos:line="73" pos:column="5">rv<pos:position pos:line="73" pos:column="7"/></name> <operator pos:line="73" pos:column="8">=<pos:position pos:line="73" pos:column="9"/></operator> <call><name pos:line="73" pos:column="10">apr_thread_create<pos:position pos:line="73" pos:column="27"/></name><argument_list pos:line="73" pos:column="27">(<argument><expr><operator pos:line="73" pos:column="28">&amp;<pos:position pos:line="73" pos:column="33"/></operator><name pos:line="73" pos:column="29">start_thread_id<pos:position pos:line="73" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="46">thread_attr<pos:position pos:line="73" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="59">start_threads<pos:position pos:line="73" pos:column="72"/></name></expr></argument>,
                           <argument><expr><name pos:line="74" pos:column="28">ts<pos:position pos:line="74" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="32">pchild<pos:position pos:line="74" pos:column="38"/></name></expr></argument>)<pos:position pos:line="74" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="40"/></expr_stmt>
    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">rv<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">!=<pos:position pos:line="75" pos:column="14"/></operator> <name pos:line="75" pos:column="15">APR_SUCCESS<pos:position pos:line="75" pos:column="26"/></name></expr>)<pos:position pos:line="75" pos:column="27"/></condition><then pos:line="75" pos:column="27"> <block pos:line="75" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="76" pos:column="9">ap_log_error<pos:position pos:line="76" pos:column="21"/></name><argument_list pos:line="76" pos:column="21">(<argument><expr><name pos:line="76" pos:column="22">APLOG_MARK<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="34">APLOG_ALERT<pos:position pos:line="76" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="47">rv<pos:position pos:line="76" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="51">ap_server_conf<pos:position pos:line="76" pos:column="65"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="77" pos:column="22">"apr_thread_create: unable to create worker thread"<pos:position pos:line="77" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="77" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="75"/></expr_stmt>
        <comment type="block" pos:line="78" pos:column="9">/* In case system resources are maxxed out, we don't want
           Apache running away with the CPU trying to fork over and
           over and over again if we exit. */</comment>
        <expr_stmt><expr><call><name pos:line="81" pos:column="9">apr_sleep<pos:position pos:line="81" pos:column="18"/></name><argument_list pos:line="81" pos:column="18">(<argument><expr><literal type="number" pos:line="81" pos:column="19">10<pos:position pos:line="81" pos:column="21"/></literal> <operator pos:line="81" pos:column="22">*<pos:position pos:line="81" pos:column="23"/></operator> <name pos:line="81" pos:column="24">APR_USEC_PER_SEC<pos:position pos:line="81" pos:column="40"/></name></expr></argument>)<pos:position pos:line="81" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">clean_child_exit<pos:position pos:line="82" pos:column="25"/></name><argument_list pos:line="82" pos:column="25">(<argument><expr><name pos:line="82" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="82" pos:column="43"/></name></expr></argument>)<pos:position pos:line="82" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="83" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="85" pos:column="5">/* If we are only running in one_process mode, we will want to
     * still handle signals. */</comment>
    <if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><name pos:line="87" pos:column="9">one_process<pos:position pos:line="87" pos:column="20"/></name></expr>)<pos:position pos:line="87" pos:column="21"/></condition><then pos:line="87" pos:column="21"> <block pos:line="87" pos:column="22">{
        <comment type="block" pos:line="88" pos:column="9">/* Block until we get a terminating signal. */</comment>
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">apr_signal_thread<pos:position pos:line="89" pos:column="26"/></name><argument_list pos:line="89" pos:column="26">(<argument><expr><name pos:line="89" pos:column="27">check_signal<pos:position pos:line="89" pos:column="39"/></name></expr></argument>)<pos:position pos:line="89" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="41"/></expr_stmt>
        <comment type="block" pos:line="90" pos:column="9">/* make sure the start thread has finished; signal_threads() 
         * and join_workers() depend on that
         */</comment>
        <comment type="block" pos:line="93" pos:column="9">/* XXX join_start_thread() won't be awakened if one of our
         *     threads encounters a critical error and attempts to
         *     shutdown this child
         */</comment>
        <expr_stmt><expr><call><name pos:line="97" pos:column="9">join_start_thread<pos:position pos:line="97" pos:column="26"/></name><argument_list pos:line="97" pos:column="26">(<argument><expr><name pos:line="97" pos:column="27">start_thread_id<pos:position pos:line="97" pos:column="42"/></name></expr></argument>)<pos:position pos:line="97" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">signal_threads<pos:position pos:line="98" pos:column="23"/></name><argument_list pos:line="98" pos:column="23">(<argument><expr><name pos:line="98" pos:column="24">ST_UNGRACEFUL<pos:position pos:line="98" pos:column="37"/></name></expr></argument>)<pos:position pos:line="98" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="39"/></expr_stmt> <comment type="block" pos:line="98" pos:column="40">/* helps us terminate a little more
                           * quickly than the dispatch of the signal thread
                           * beats the Pipe of Death and the browsers
                           */</comment>
        <comment type="block" pos:line="102" pos:column="9">/* A terminating signal was received. Now join each of the
         * workers to clean them up.
         *   If the worker already exited, then the join frees
         *   their resources and returns.
         *   If the worker hasn't exited, then this blocks until
         *   they have (then cleans up).
         */</comment>
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">join_workers<pos:position pos:line="109" pos:column="21"/></name><argument_list pos:line="109" pos:column="21">(<argument><expr><name pos:line="109" pos:column="22">threads<pos:position pos:line="109" pos:column="29"/></name></expr></argument>)<pos:position pos:line="109" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="110" pos:column="6"/></block></then>
    <else pos:line="111" pos:column="5">else <block pos:line="111" pos:column="10">{ <comment type="block" pos:line="111" pos:column="12">/* !one_process */</comment>
        <comment type="block" pos:line="112" pos:column="9">/* remove SIGTERM from the set of blocked signals...  if one of
         * the other threads in the process needs to take us down
         * (e.g., for MaxRequestsPerChild) it will send us SIGTERM
         */</comment>
        <expr_stmt><expr><call><name pos:line="116" pos:column="9">unblock_signal<pos:position pos:line="116" pos:column="23"/></name><argument_list pos:line="116" pos:column="23">(<argument><expr><name pos:line="116" pos:column="24">SIGTERM<pos:position pos:line="116" pos:column="31"/></name></expr></argument>)<pos:position pos:line="116" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="117" pos:column="9">join_start_thread<pos:position pos:line="117" pos:column="26"/></name><argument_list pos:line="117" pos:column="26">(<argument><expr><name pos:line="117" pos:column="27">start_thread_id<pos:position pos:line="117" pos:column="42"/></name></expr></argument>)<pos:position pos:line="117" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="118" pos:column="9">join_workers<pos:position pos:line="118" pos:column="21"/></name><argument_list pos:line="118" pos:column="21">(<argument><expr><name pos:line="118" pos:column="22">threads<pos:position pos:line="118" pos:column="29"/></name></expr></argument>)<pos:position pos:line="118" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="119" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="121" pos:column="5">free<pos:position pos:line="121" pos:column="9"/></name><argument_list pos:line="121" pos:column="9">(<argument><expr><name pos:line="121" pos:column="10">threads<pos:position pos:line="121" pos:column="17"/></name></expr></argument>)<pos:position pos:line="121" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="123" pos:column="5">clean_child_exit<pos:position pos:line="123" pos:column="21"/></name><argument_list pos:line="123" pos:column="21">(<argument><expr><ternary><condition><expr><name pos:line="123" pos:column="22">resource_shortage<pos:position pos:line="123" pos:column="39"/></name></expr> ?<pos:position pos:line="123" pos:column="41"/></condition><then pos:line="123" pos:column="41"> <expr><name pos:line="123" pos:column="42">APEXIT_CHILDSICK<pos:position pos:line="123" pos:column="58"/></name></expr> <pos:position pos:line="123" pos:column="59"/></then><else pos:line="123" pos:column="59">: <expr><literal type="number" pos:line="123" pos:column="61">0<pos:position pos:line="123" pos:column="62"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="123" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="64"/></expr_stmt>
}<pos:position pos:line="124" pos:column="2"/></block></function></unit>
