<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3138_httpd-2.0.63.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_socket_sendfile<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">apr_socket_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type> <name pos:line="1" pos:column="49">sock<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">apr_file_t<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type> <name pos:line="1" pos:column="68">file<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">apr_hdtr_t<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type> <name pos:line="2" pos:column="47">hdtr<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">apr_off_t<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type> <name pos:line="2" pos:column="65">offset<pos:position pos:line="2" pos:column="71"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="3" pos:column="34">apr_size_t<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type> <name pos:line="3" pos:column="47">len<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="52">apr_int32_t<pos:position pos:line="3" pos:column="63"/></name></type> <name pos:line="3" pos:column="64">flags<pos:position pos:line="3" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="70"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">off_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">nbytes<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><literal type="number" pos:line="5" pos:column="20">0<pos:position pos:line="5" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">rv<pos:position pos:line="6" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="13">i<pos:position pos:line="6" pos:column="14"/></name></decl>;<pos:position pos:line="6" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">sf_hdtr<pos:position pos:line="7" pos:column="19"/></name></name></type> <name pos:line="7" pos:column="20">headerstruct<pos:position pos:line="7" pos:column="32"/></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">bytes_to_send<pos:position pos:line="8" pos:column="29"/></name> <init pos:line="8" pos:column="30">= <expr><operator pos:line="8" pos:column="32">*<pos:position pos:line="8" pos:column="33"/></operator><name pos:line="8" pos:column="33">len<pos:position pos:line="8" pos:column="36"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="37"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* Ignore flags for now. */</comment>
    <expr_stmt><expr><name pos:line="11" pos:column="5">flags<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <literal type="number" pos:line="11" pos:column="13">0<pos:position pos:line="11" pos:column="14"/></literal></expr>;<pos:position pos:line="11" pos:column="15"/></expr_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><operator pos:line="13" pos:column="9">!<pos:position pos:line="13" pos:column="10"/></operator><name pos:line="13" pos:column="10">hdtr<pos:position pos:line="13" pos:column="14"/></name></expr>)<pos:position pos:line="13" pos:column="15"/></condition><then pos:line="13" pos:column="15"> <block pos:line="13" pos:column="16">{
        <expr_stmt><expr><name pos:line="14" pos:column="9">hdtr<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <operator pos:line="14" pos:column="16">&amp;<pos:position pos:line="14" pos:column="21"/></operator><name pos:line="14" pos:column="17">no_hdtr<pos:position pos:line="14" pos:column="24"/></name></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then>

    <elseif pos:line="17" pos:column="5">else <if pos:line="17" pos:column="10">if <condition pos:line="17" pos:column="13">(<expr><name><name pos:line="17" pos:column="14">hdtr<pos:position pos:line="17" pos:column="18"/></name><operator pos:line="17" pos:column="18">-&gt;<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="20">numheaders<pos:position pos:line="17" pos:column="30"/></name></name> <operator pos:line="17" pos:column="31">&amp;&amp;<pos:position pos:line="17" pos:column="41"/></operator> <call><name pos:line="17" pos:column="34">include_hdrs_in_length<pos:position pos:line="17" pos:column="56"/></name><argument_list pos:line="17" pos:column="56">()<pos:position pos:line="17" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="17" pos:column="59"/></condition><then pos:line="17" pos:column="59"> <block pos:line="17" pos:column="60">{

        <comment type="block" pos:line="19" pos:column="9">/* On early versions of FreeBSD sendfile, the number of bytes to send 
         * must include the length of the headers.  Don't look at the man page 
         * for this :(  Instead, look at the the logic in 
         * src/sys/kern/uipc_syscalls::sendfile().
         *
         * This was fixed in the middle of 4.6-STABLE
         */</comment>
        <for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">i<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">0<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></init> <condition><expr><name pos:line="26" pos:column="21">i<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&lt;<pos:position pos:line="26" pos:column="27"/></operator> <name><name pos:line="26" pos:column="25">hdtr<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">-&gt;<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="31">numheaders<pos:position pos:line="26" pos:column="41"/></name></name></expr>;<pos:position pos:line="26" pos:column="42"/></condition> <incr><expr><name pos:line="26" pos:column="43">i<pos:position pos:line="26" pos:column="44"/></name><operator pos:line="26" pos:column="44">++<pos:position pos:line="26" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="26" pos:column="47"/></control> <block pos:line="26" pos:column="48">{
            <expr_stmt><expr><name pos:line="27" pos:column="13">bytes_to_send<pos:position pos:line="27" pos:column="26"/></name> <operator pos:line="27" pos:column="27">+=<pos:position pos:line="27" pos:column="29"/></operator> <name><name pos:line="27" pos:column="30">hdtr<pos:position pos:line="27" pos:column="34"/></name><operator pos:line="27" pos:column="34">-&gt;<pos:position pos:line="27" pos:column="39"/></operator><name pos:line="27" pos:column="36">headers<pos:position pos:line="27" pos:column="43"/></name><index pos:line="27" pos:column="43">[<expr><name pos:line="27" pos:column="44">i<pos:position pos:line="27" pos:column="45"/></name></expr>]<pos:position pos:line="27" pos:column="46"/></index></name><operator pos:line="27" pos:column="46">.<pos:position pos:line="27" pos:column="47"/></operator><name pos:line="27" pos:column="47">iov_len<pos:position pos:line="27" pos:column="54"/></name></expr>;<pos:position pos:line="27" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></for>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if></elseif></if>

    <expr_stmt><expr><name><name pos:line="31" pos:column="5">headerstruct<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">.<pos:position pos:line="31" pos:column="18"/></operator><name pos:line="31" pos:column="18">headers<pos:position pos:line="31" pos:column="25"/></name></name> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <name><name pos:line="31" pos:column="28">hdtr<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">-&gt;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="34">headers<pos:position pos:line="31" pos:column="41"/></name></name></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">headerstruct<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">.<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">hdr_cnt<pos:position pos:line="32" pos:column="25"/></name></name> <operator pos:line="32" pos:column="26">=<pos:position pos:line="32" pos:column="27"/></operator> <name><name pos:line="32" pos:column="28">hdtr<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">-&gt;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="34">numheaders<pos:position pos:line="32" pos:column="44"/></name></name></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">headerstruct<pos:position pos:line="33" pos:column="17"/></name><operator pos:line="33" pos:column="17">.<pos:position pos:line="33" pos:column="18"/></operator><name pos:line="33" pos:column="18">trailers<pos:position pos:line="33" pos:column="26"/></name></name> <operator pos:line="33" pos:column="27">=<pos:position pos:line="33" pos:column="28"/></operator> <name><name pos:line="33" pos:column="29">hdtr<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">-&gt;<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="35">trailers<pos:position pos:line="33" pos:column="43"/></name></name></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">headerstruct<pos:position pos:line="34" pos:column="17"/></name><operator pos:line="34" pos:column="17">.<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">trl_cnt<pos:position pos:line="34" pos:column="25"/></name></name> <operator pos:line="34" pos:column="26">=<pos:position pos:line="34" pos:column="27"/></operator> <name><name pos:line="34" pos:column="28">hdtr<pos:position pos:line="34" pos:column="32"/></name><operator pos:line="34" pos:column="32">-&gt;<pos:position pos:line="34" pos:column="37"/></operator><name pos:line="34" pos:column="34">numtrailers<pos:position pos:line="34" pos:column="45"/></name></name></expr>;<pos:position pos:line="34" pos:column="46"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* FreeBSD can send the headers/footers as part of the system call */</comment>
    <do pos:line="37" pos:column="5">do <block pos:line="37" pos:column="8">{
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name><name pos:line="38" pos:column="13">sock<pos:position pos:line="38" pos:column="17"/></name><operator pos:line="38" pos:column="17">-&gt;<pos:position pos:line="38" pos:column="22"/></operator><name pos:line="38" pos:column="19">netmask<pos:position pos:line="38" pos:column="26"/></name></name> <operator pos:line="38" pos:column="27">&amp;<pos:position pos:line="38" pos:column="32"/></operator> <name pos:line="38" pos:column="29">APR_INCOMPLETE_WRITE<pos:position pos:line="38" pos:column="49"/></name></expr>)<pos:position pos:line="38" pos:column="50"/></condition><then pos:line="38" pos:column="50"> <block pos:line="38" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="39" pos:column="13">apr_status_t<pos:position pos:line="39" pos:column="25"/></name></type> <name pos:line="39" pos:column="26">arv<pos:position pos:line="39" pos:column="29"/></name></decl>;<pos:position pos:line="39" pos:column="30"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="40" pos:column="13">sock<pos:position pos:line="40" pos:column="17"/></name><operator pos:line="40" pos:column="17">-&gt;<pos:position pos:line="40" pos:column="22"/></operator><name pos:line="40" pos:column="19">netmask<pos:position pos:line="40" pos:column="26"/></name></name> <operator pos:line="40" pos:column="27">&amp;=<pos:position pos:line="40" pos:column="33"/></operator> <operator pos:line="40" pos:column="30">~<pos:position pos:line="40" pos:column="31"/></operator><name pos:line="40" pos:column="31">APR_INCOMPLETE_WRITE<pos:position pos:line="40" pos:column="51"/></name></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">arv<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <call><name pos:line="41" pos:column="19">apr_wait_for_io_or_timeout<pos:position pos:line="41" pos:column="45"/></name><argument_list pos:line="41" pos:column="45">(<argument><expr><name pos:line="41" pos:column="46">NULL<pos:position pos:line="41" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="52">sock<pos:position pos:line="41" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="41" pos:column="58">0<pos:position pos:line="41" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="61"/></expr_stmt>
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><name pos:line="42" pos:column="17">arv<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">!=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">APR_SUCCESS<pos:position pos:line="42" pos:column="35"/></name></expr>)<pos:position pos:line="42" pos:column="36"/></condition><then pos:line="42" pos:column="36"> <block pos:line="42" pos:column="37">{
                <expr_stmt><expr><operator pos:line="43" pos:column="17">*<pos:position pos:line="43" pos:column="18"/></operator><name pos:line="43" pos:column="18">len<pos:position pos:line="43" pos:column="21"/></name> <operator pos:line="43" pos:column="22">=<pos:position pos:line="43" pos:column="23"/></operator> <literal type="number" pos:line="43" pos:column="24">0<pos:position pos:line="43" pos:column="25"/></literal></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>
                <return pos:line="44" pos:column="17">return <expr><name pos:line="44" pos:column="24">arv<pos:position pos:line="44" pos:column="27"/></name></expr>;<pos:position pos:line="44" pos:column="28"/></return>
            }<pos:position pos:line="45" pos:column="14"/></block></then></if>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><name pos:line="47" pos:column="13">bytes_to_send<pos:position pos:line="47" pos:column="26"/></name></expr>)<pos:position pos:line="47" pos:column="27"/></condition><then pos:line="47" pos:column="27"> <block pos:line="47" pos:column="28">{
            <comment type="block" pos:line="48" pos:column="13">/* We won't dare call sendfile() if we don't have
             * header or file bytes to send because bytes_to_send == 0
             * means send the whole file.
             */</comment>
            <expr_stmt><expr><name pos:line="52" pos:column="13">rv<pos:position pos:line="52" pos:column="15"/></name> <operator pos:line="52" pos:column="16">=<pos:position pos:line="52" pos:column="17"/></operator> <call><name pos:line="52" pos:column="18">sendfile<pos:position pos:line="52" pos:column="26"/></name><argument_list pos:line="52" pos:column="26">(<argument><expr><name><name pos:line="52" pos:column="27">file<pos:position pos:line="52" pos:column="31"/></name><operator pos:line="52" pos:column="31">-&gt;<pos:position pos:line="52" pos:column="36"/></operator><name pos:line="52" pos:column="33">filedes<pos:position pos:line="52" pos:column="40"/></name></name></expr></argument>, <comment type="block" pos:line="52" pos:column="42">/* file to be sent */</comment>
                          <argument><expr><name><name pos:line="53" pos:column="27">sock<pos:position pos:line="53" pos:column="31"/></name><operator pos:line="53" pos:column="31">-&gt;<pos:position pos:line="53" pos:column="36"/></operator><name pos:line="53" pos:column="33">socketdes<pos:position pos:line="53" pos:column="42"/></name></name></expr></argument>, <comment type="block" pos:line="53" pos:column="44">/* socket */</comment>
                          <argument><expr><operator pos:line="54" pos:column="27">*<pos:position pos:line="54" pos:column="28"/></operator><name pos:line="54" pos:column="28">offset<pos:position pos:line="54" pos:column="34"/></name></expr></argument>,       <comment type="block" pos:line="54" pos:column="42">/* where in the file to start */</comment>
                          <argument><expr><name pos:line="55" pos:column="27">bytes_to_send<pos:position pos:line="55" pos:column="40"/></name></expr></argument>, <comment type="block" pos:line="55" pos:column="42">/* number of bytes to send */</comment>
                          <argument><expr><operator pos:line="56" pos:column="27">&amp;<pos:position pos:line="56" pos:column="32"/></operator><name pos:line="56" pos:column="28">headerstruct<pos:position pos:line="56" pos:column="40"/></name></expr></argument>, <comment type="block" pos:line="56" pos:column="42">/* Headers/footers */</comment>
                          <argument><expr><operator pos:line="57" pos:column="27">&amp;<pos:position pos:line="57" pos:column="32"/></operator><name pos:line="57" pos:column="28">nbytes<pos:position pos:line="57" pos:column="34"/></name></expr></argument>,       <comment type="block" pos:line="57" pos:column="42">/* number of bytes written */</comment>
                          <argument><expr><name pos:line="58" pos:column="27">flags<pos:position pos:line="58" pos:column="32"/></name></expr></argument>)<pos:position pos:line="58" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>        <comment type="block" pos:line="58" pos:column="42">/* undefined, set to 0 */</comment>

            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><name pos:line="60" pos:column="17">rv<pos:position pos:line="60" pos:column="19"/></name> <operator pos:line="60" pos:column="20">==<pos:position pos:line="60" pos:column="22"/></operator> <operator pos:line="60" pos:column="23">-<pos:position pos:line="60" pos:column="24"/></operator><literal type="number" pos:line="60" pos:column="24">1<pos:position pos:line="60" pos:column="25"/></literal></expr>)<pos:position pos:line="60" pos:column="26"/></condition><then pos:line="60" pos:column="26"> <block pos:line="60" pos:column="27">{
                <if pos:line="61" pos:column="17">if <condition pos:line="61" pos:column="20">(<expr><name pos:line="61" pos:column="21">errno<pos:position pos:line="61" pos:column="26"/></name> <operator pos:line="61" pos:column="27">==<pos:position pos:line="61" pos:column="29"/></operator> <name pos:line="61" pos:column="30">EAGAIN<pos:position pos:line="61" pos:column="36"/></name></expr>)<pos:position pos:line="61" pos:column="37"/></condition><then pos:line="61" pos:column="37"> <block pos:line="61" pos:column="38">{
                    <if pos:line="62" pos:column="21">if <condition pos:line="62" pos:column="24">(<expr><call><name pos:line="62" pos:column="25">apr_is_option_set<pos:position pos:line="62" pos:column="42"/></name><argument_list pos:line="62" pos:column="42">(<argument><expr><name><name pos:line="62" pos:column="43">sock<pos:position pos:line="62" pos:column="47"/></name><operator pos:line="62" pos:column="47">-&gt;<pos:position pos:line="62" pos:column="52"/></operator><name pos:line="62" pos:column="49">netmask<pos:position pos:line="62" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="58">APR_SO_TIMEOUT<pos:position pos:line="62" pos:column="72"/></name></expr></argument>)<pos:position pos:line="62" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="74"/></condition><then pos:line="62" pos:column="74"> <block pos:line="62" pos:column="75">{
                        <expr_stmt><expr><name><name pos:line="63" pos:column="25">sock<pos:position pos:line="63" pos:column="29"/></name><operator pos:line="63" pos:column="29">-&gt;<pos:position pos:line="63" pos:column="34"/></operator><name pos:line="63" pos:column="31">netmask<pos:position pos:line="63" pos:column="38"/></name></name> <operator pos:line="63" pos:column="39">|=<pos:position pos:line="63" pos:column="41"/></operator> <name pos:line="63" pos:column="42">APR_INCOMPLETE_WRITE<pos:position pos:line="63" pos:column="62"/></name></expr>;<pos:position pos:line="63" pos:column="63"/></expr_stmt>
                    }<pos:position pos:line="64" pos:column="22"/></block></then></if>
                    <comment type="block" pos:line="65" pos:column="21">/* FreeBSD's sendfile can return -1/EAGAIN even if it
                     * sent bytes.  Sanitize the result so we get normal EAGAIN
                     * semantics w.r.t. bytes sent.
                     */</comment>
                    <if pos:line="69" pos:column="21">if <condition pos:line="69" pos:column="24">(<expr><name pos:line="69" pos:column="25">nbytes<pos:position pos:line="69" pos:column="31"/></name></expr>)<pos:position pos:line="69" pos:column="32"/></condition><then pos:line="69" pos:column="32"> <block pos:line="69" pos:column="33">{
                        <comment type="block" pos:line="70" pos:column="25">/* normal exit for a big file &amp; non-blocking io */</comment>
                        <expr_stmt><expr><operator pos:line="71" pos:column="25">(<pos:position pos:line="71" pos:column="26"/></operator><operator pos:line="71" pos:column="26">*<pos:position pos:line="71" pos:column="27"/></operator><name pos:line="71" pos:column="27">len<pos:position pos:line="71" pos:column="30"/></name><operator pos:line="71" pos:column="30">)<pos:position pos:line="71" pos:column="31"/></operator> <operator pos:line="71" pos:column="32">=<pos:position pos:line="71" pos:column="33"/></operator> <name pos:line="71" pos:column="34">nbytes<pos:position pos:line="71" pos:column="40"/></name></expr>;<pos:position pos:line="71" pos:column="41"/></expr_stmt>
                        <return pos:line="72" pos:column="25">return <expr><name pos:line="72" pos:column="32">APR_SUCCESS<pos:position pos:line="72" pos:column="43"/></name></expr>;<pos:position pos:line="72" pos:column="44"/></return>
                    }<pos:position pos:line="73" pos:column="22"/></block></then></if>
                }<pos:position pos:line="74" pos:column="18"/></block></then></if>
            }<pos:position pos:line="75" pos:column="14"/></block></then>
            <else pos:line="76" pos:column="13">else <block pos:line="76" pos:column="18">{       <comment type="block" pos:line="76" pos:column="26">/* rv == 0 (or the kernel is broken) */</comment>
                <if pos:line="77" pos:column="17">if <condition pos:line="77" pos:column="20">(<expr><name pos:line="77" pos:column="21">nbytes<pos:position pos:line="77" pos:column="27"/></name> <operator pos:line="77" pos:column="28">==<pos:position pos:line="77" pos:column="30"/></operator> <literal type="number" pos:line="77" pos:column="31">0<pos:position pos:line="77" pos:column="32"/></literal></expr>)<pos:position pos:line="77" pos:column="33"/></condition><then pos:line="77" pos:column="33"> <block pos:line="77" pos:column="34">{
                    <comment type="block" pos:line="78" pos:column="21">/* Most likely the file got smaller after the stat.
                     * Return an error so the caller can do the Right Thing.
                     */</comment>
                    <expr_stmt><expr><operator pos:line="81" pos:column="21">(<pos:position pos:line="81" pos:column="22"/></operator><operator pos:line="81" pos:column="22">*<pos:position pos:line="81" pos:column="23"/></operator><name pos:line="81" pos:column="23">len<pos:position pos:line="81" pos:column="26"/></name><operator pos:line="81" pos:column="26">)<pos:position pos:line="81" pos:column="27"/></operator> <operator pos:line="81" pos:column="28">=<pos:position pos:line="81" pos:column="29"/></operator> <name pos:line="81" pos:column="30">nbytes<pos:position pos:line="81" pos:column="36"/></name></expr>;<pos:position pos:line="81" pos:column="37"/></expr_stmt>
                    <return pos:line="82" pos:column="21">return <expr><name pos:line="82" pos:column="28">APR_EOF<pos:position pos:line="82" pos:column="35"/></name></expr>;<pos:position pos:line="82" pos:column="36"/></return>
                }<pos:position pos:line="83" pos:column="18"/></block></then></if>
            }<pos:position pos:line="84" pos:column="14"/></block></else></if>
        }<pos:position pos:line="85" pos:column="10"/></block></then>    
        <else pos:line="86" pos:column="9">else <block pos:line="86" pos:column="14">{
            <comment type="block" pos:line="87" pos:column="13">/* just trailer bytes... use writev()
             */</comment>
            <expr_stmt><expr><name pos:line="89" pos:column="13">rv<pos:position pos:line="89" pos:column="15"/></name> <operator pos:line="89" pos:column="16">=<pos:position pos:line="89" pos:column="17"/></operator> <call><name pos:line="89" pos:column="18">writev<pos:position pos:line="89" pos:column="24"/></name><argument_list pos:line="89" pos:column="24">(<argument><expr><name><name pos:line="89" pos:column="25">sock<pos:position pos:line="89" pos:column="29"/></name><operator pos:line="89" pos:column="29">-&gt;<pos:position pos:line="89" pos:column="34"/></operator><name pos:line="89" pos:column="31">socketdes<pos:position pos:line="89" pos:column="40"/></name></name></expr></argument>,
                        <argument><expr><name><name pos:line="90" pos:column="25">hdtr<pos:position pos:line="90" pos:column="29"/></name><operator pos:line="90" pos:column="29">-&gt;<pos:position pos:line="90" pos:column="34"/></operator><name pos:line="90" pos:column="31">trailers<pos:position pos:line="90" pos:column="39"/></name></name></expr></argument>,
                        <argument><expr><name><name pos:line="91" pos:column="25">hdtr<pos:position pos:line="91" pos:column="29"/></name><operator pos:line="91" pos:column="29">-&gt;<pos:position pos:line="91" pos:column="34"/></operator><name pos:line="91" pos:column="31">numtrailers<pos:position pos:line="91" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="44"/></expr_stmt>
            <if pos:line="92" pos:column="13">if <condition pos:line="92" pos:column="16">(<expr><name pos:line="92" pos:column="17">rv<pos:position pos:line="92" pos:column="19"/></name> <operator pos:line="92" pos:column="20">&gt;<pos:position pos:line="92" pos:column="24"/></operator> <literal type="number" pos:line="92" pos:column="22">0<pos:position pos:line="92" pos:column="23"/></literal></expr>)<pos:position pos:line="92" pos:column="24"/></condition><then pos:line="92" pos:column="24"> <block pos:line="92" pos:column="25">{
                <expr_stmt><expr><name pos:line="93" pos:column="17">nbytes<pos:position pos:line="93" pos:column="23"/></name> <operator pos:line="93" pos:column="24">=<pos:position pos:line="93" pos:column="25"/></operator> <name pos:line="93" pos:column="26">rv<pos:position pos:line="93" pos:column="28"/></name></expr>;<pos:position pos:line="93" pos:column="29"/></expr_stmt>
                <expr_stmt><expr><name pos:line="94" pos:column="17">rv<pos:position pos:line="94" pos:column="19"/></name> <operator pos:line="94" pos:column="20">=<pos:position pos:line="94" pos:column="21"/></operator> <literal type="number" pos:line="94" pos:column="22">0<pos:position pos:line="94" pos:column="23"/></literal></expr>;<pos:position pos:line="94" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="95" pos:column="14"/></block></then>
            <else pos:line="96" pos:column="13">else <block pos:line="96" pos:column="18">{
                <expr_stmt><expr><name pos:line="97" pos:column="17">nbytes<pos:position pos:line="97" pos:column="23"/></name> <operator pos:line="97" pos:column="24">=<pos:position pos:line="97" pos:column="25"/></operator> <literal type="number" pos:line="97" pos:column="26">0<pos:position pos:line="97" pos:column="27"/></literal></expr>;<pos:position pos:line="97" pos:column="28"/></expr_stmt>
            }<pos:position pos:line="98" pos:column="14"/></block></else></if>
        }<pos:position pos:line="99" pos:column="10"/></block></else></if>
        <if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name pos:line="100" pos:column="13">rv<pos:position pos:line="100" pos:column="15"/></name> <operator pos:line="100" pos:column="16">==<pos:position pos:line="100" pos:column="18"/></operator> <operator pos:line="100" pos:column="19">-<pos:position pos:line="100" pos:column="20"/></operator><literal type="number" pos:line="100" pos:column="20">1<pos:position pos:line="100" pos:column="21"/></literal> <operator pos:line="100" pos:column="22">&amp;&amp;<pos:position pos:line="100" pos:column="32"/></operator>
            <name pos:line="101" pos:column="13">errno<pos:position pos:line="101" pos:column="18"/></name> <operator pos:line="101" pos:column="19">==<pos:position pos:line="101" pos:column="21"/></operator> <name pos:line="101" pos:column="22">EAGAIN<pos:position pos:line="101" pos:column="28"/></name> <operator pos:line="101" pos:column="29">&amp;&amp;<pos:position pos:line="101" pos:column="39"/></operator> 
            <call><name pos:line="102" pos:column="13">apr_is_option_set<pos:position pos:line="102" pos:column="30"/></name><argument_list pos:line="102" pos:column="30">(<argument><expr><name><name pos:line="102" pos:column="31">sock<pos:position pos:line="102" pos:column="35"/></name><operator pos:line="102" pos:column="35">-&gt;<pos:position pos:line="102" pos:column="40"/></operator><name pos:line="102" pos:column="37">netmask<pos:position pos:line="102" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="46">APR_SO_TIMEOUT<pos:position pos:line="102" pos:column="60"/></name></expr></argument>)<pos:position pos:line="102" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="102" pos:column="62"/></condition><then pos:line="102" pos:column="62"> <block pos:line="102" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="103" pos:column="13">apr_status_t<pos:position pos:line="103" pos:column="25"/></name></type> <name pos:line="103" pos:column="26">arv<pos:position pos:line="103" pos:column="29"/></name> <init pos:line="103" pos:column="30">= <expr><call><name pos:line="103" pos:column="32">apr_wait_for_io_or_timeout<pos:position pos:line="103" pos:column="58"/></name><argument_list pos:line="103" pos:column="58">(<argument><expr><name pos:line="103" pos:column="59">NULL<pos:position pos:line="103" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="65">sock<pos:position pos:line="103" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="103" pos:column="71">0<pos:position pos:line="103" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="103" pos:column="74"/></decl_stmt>
            <if pos:line="104" pos:column="13">if <condition pos:line="104" pos:column="16">(<expr><name pos:line="104" pos:column="17">arv<pos:position pos:line="104" pos:column="20"/></name> <operator pos:line="104" pos:column="21">!=<pos:position pos:line="104" pos:column="23"/></operator> <name pos:line="104" pos:column="24">APR_SUCCESS<pos:position pos:line="104" pos:column="35"/></name></expr>)<pos:position pos:line="104" pos:column="36"/></condition><then pos:line="104" pos:column="36"> <block pos:line="104" pos:column="37">{
                <expr_stmt><expr><operator pos:line="105" pos:column="17">*<pos:position pos:line="105" pos:column="18"/></operator><name pos:line="105" pos:column="18">len<pos:position pos:line="105" pos:column="21"/></name> <operator pos:line="105" pos:column="22">=<pos:position pos:line="105" pos:column="23"/></operator> <literal type="number" pos:line="105" pos:column="24">0<pos:position pos:line="105" pos:column="25"/></literal></expr>;<pos:position pos:line="105" pos:column="26"/></expr_stmt>
                <return pos:line="106" pos:column="17">return <expr><name pos:line="106" pos:column="24">arv<pos:position pos:line="106" pos:column="27"/></name></expr>;<pos:position pos:line="106" pos:column="28"/></return>
            }<pos:position pos:line="107" pos:column="14"/></block></then></if>
        }<pos:position pos:line="108" pos:column="10"/></block></then></if>
    }<pos:position pos:line="109" pos:column="6"/></block> while <condition pos:line="109" pos:column="13">(<expr><name pos:line="109" pos:column="14">rv<pos:position pos:line="109" pos:column="16"/></name> <operator pos:line="109" pos:column="17">==<pos:position pos:line="109" pos:column="19"/></operator> <operator pos:line="109" pos:column="20">-<pos:position pos:line="109" pos:column="21"/></operator><literal type="number" pos:line="109" pos:column="21">1<pos:position pos:line="109" pos:column="22"/></literal> <operator pos:line="109" pos:column="23">&amp;&amp;<pos:position pos:line="109" pos:column="33"/></operator> <operator pos:line="109" pos:column="26">(<pos:position pos:line="109" pos:column="27"/></operator><name pos:line="109" pos:column="27">errno<pos:position pos:line="109" pos:column="32"/></name> <operator pos:line="109" pos:column="33">==<pos:position pos:line="109" pos:column="35"/></operator> <name pos:line="109" pos:column="36">EINTR<pos:position pos:line="109" pos:column="41"/></name> <operator pos:line="109" pos:column="42">||<pos:position pos:line="109" pos:column="44"/></operator> <name pos:line="109" pos:column="45">errno<pos:position pos:line="109" pos:column="50"/></name> <operator pos:line="109" pos:column="51">==<pos:position pos:line="109" pos:column="53"/></operator> <name pos:line="109" pos:column="54">EAGAIN<pos:position pos:line="109" pos:column="60"/></name><operator pos:line="109" pos:column="60">)<pos:position pos:line="109" pos:column="61"/></operator></expr>)<pos:position pos:line="109" pos:column="62"/></condition>;<pos:position pos:line="109" pos:column="63"/></do>

    <expr_stmt><expr><operator pos:line="111" pos:column="5">(<pos:position pos:line="111" pos:column="6"/></operator><operator pos:line="111" pos:column="6">*<pos:position pos:line="111" pos:column="7"/></operator><name pos:line="111" pos:column="7">len<pos:position pos:line="111" pos:column="10"/></name><operator pos:line="111" pos:column="10">)<pos:position pos:line="111" pos:column="11"/></operator> <operator pos:line="111" pos:column="12">=<pos:position pos:line="111" pos:column="13"/></operator> <name pos:line="111" pos:column="14">nbytes<pos:position pos:line="111" pos:column="20"/></name></expr>;<pos:position pos:line="111" pos:column="21"/></expr_stmt>
    <if pos:line="112" pos:column="5">if <condition pos:line="112" pos:column="8">(<expr><name pos:line="112" pos:column="9">rv<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">==<pos:position pos:line="112" pos:column="14"/></operator> <operator pos:line="112" pos:column="15">-<pos:position pos:line="112" pos:column="16"/></operator><literal type="number" pos:line="112" pos:column="16">1<pos:position pos:line="112" pos:column="17"/></literal></expr>)<pos:position pos:line="112" pos:column="18"/></condition><then pos:line="112" pos:column="18"> <block pos:line="112" pos:column="19">{
        <return pos:line="113" pos:column="9">return <expr><name pos:line="113" pos:column="16">errno<pos:position pos:line="113" pos:column="21"/></name></expr>;<pos:position pos:line="113" pos:column="22"/></return>
    }<pos:position pos:line="114" pos:column="6"/></block></then></if>
    <return pos:line="115" pos:column="5">return <expr><name pos:line="115" pos:column="12">APR_SUCCESS<pos:position pos:line="115" pos:column="23"/></name></expr>;<pos:position pos:line="115" pos:column="24"/></return>
}<pos:position pos:line="116" pos:column="2"/></block></function></unit>
