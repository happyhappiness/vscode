<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3702_httpd-2.2.11.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">dlopen<pos:position pos:line="1" pos:column="13"/></name><parameter_list pos:line="1" pos:column="13">(<parameter><decl><type><specifier pos:line="1" pos:column="14">const<pos:position pos:line="1" pos:column="19"/></specifier> <name pos:line="1" pos:column="20">char<pos:position pos:line="1" pos:column="24"/></name> <modifier pos:line="1" pos:column="25">*<pos:position pos:line="1" pos:column="26"/></modifier></type><name pos:line="1" pos:column="26">path<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">int<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">mode<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="41"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">register<pos:position pos:line="3" pos:column="13"/></specifier> <name pos:line="3" pos:column="14">ModulePtr<pos:position pos:line="3" pos:column="23"/></name></type> <name pos:line="3" pos:column="24">mp<pos:position pos:line="3" pos:column="26"/></name></decl>;<pos:position pos:line="3" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="4" pos:column="5">static<pos:position pos:line="4" pos:column="11"/></specifier> <type><name pos:line="4" pos:column="12">void<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">mainModule<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/*
     * Upon the first call register a terminate handler that will
     * close all libraries. Also get a reference to the main module
     * for use with loadbind.
     */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">mainModule<pos:position pos:line="11" pos:column="20"/></name></expr>)<pos:position pos:line="11" pos:column="21"/></condition><then pos:line="11" pos:column="21"> <block pos:line="11" pos:column="22">{
	<if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">(<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">mainModule<pos:position pos:line="12" pos:column="24"/></name> <operator pos:line="12" pos:column="25">=<pos:position pos:line="12" pos:column="26"/></operator> <call><name pos:line="12" pos:column="27">findMain<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">()<pos:position pos:line="12" pos:column="37"/></argument_list></call><operator pos:line="12" pos:column="37">)<pos:position pos:line="12" pos:column="38"/></operator> <operator pos:line="12" pos:column="39">==<pos:position pos:line="12" pos:column="41"/></operator> <name pos:line="12" pos:column="42">NULL<pos:position pos:line="12" pos:column="46"/></name></expr>)<pos:position pos:line="12" pos:column="47"/></condition><then pos:line="12" pos:column="47">
	    <block type="pseudo"><return pos:line="13" pos:column="13">return <expr><name pos:line="13" pos:column="20">NULL<pos:position pos:line="13" pos:column="24"/></name></expr>;<pos:position pos:line="13" pos:column="25"/></return></block></then></if>
	<expr_stmt><expr><call><name pos:line="14" pos:column="9">atexit<pos:position pos:line="14" pos:column="15"/></name><argument_list pos:line="14" pos:column="15">(<argument><expr><name pos:line="14" pos:column="16">terminate<pos:position pos:line="14" pos:column="25"/></name></expr></argument>)<pos:position pos:line="14" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="16" pos:column="5">/*
     * Scan the list of modules if we have the module already loaded.
     */</comment>
    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init><expr><name pos:line="19" pos:column="10">mp<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <name pos:line="19" pos:column="15">modList<pos:position pos:line="19" pos:column="22"/></name></expr>;<pos:position pos:line="19" pos:column="23"/></init> <condition><expr><name pos:line="19" pos:column="24">mp<pos:position pos:line="19" pos:column="26"/></name></expr>;<pos:position pos:line="19" pos:column="27"/></condition> <incr><expr><name pos:line="19" pos:column="28">mp<pos:position pos:line="19" pos:column="30"/></name> <operator pos:line="19" pos:column="31">=<pos:position pos:line="19" pos:column="32"/></operator> <name><name pos:line="19" pos:column="33">mp<pos:position pos:line="19" pos:column="35"/></name><operator pos:line="19" pos:column="35">-&gt;<pos:position pos:line="19" pos:column="40"/></operator><name pos:line="19" pos:column="37">next<pos:position pos:line="19" pos:column="41"/></name></name></expr></incr>)<pos:position pos:line="19" pos:column="42"/></control>
	<block type="pseudo"><if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><call><name pos:line="20" pos:column="13">strcmp<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><name><name pos:line="20" pos:column="20">mp<pos:position pos:line="20" pos:column="22"/></name><operator pos:line="20" pos:column="22">-&gt;<pos:position pos:line="20" pos:column="27"/></operator><name pos:line="20" pos:column="24">name<pos:position pos:line="20" pos:column="28"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="30">path<pos:position pos:line="20" pos:column="34"/></name></expr></argument>)<pos:position pos:line="20" pos:column="35"/></argument_list></call> <operator pos:line="20" pos:column="36">==<pos:position pos:line="20" pos:column="38"/></operator> <literal type="number" pos:line="20" pos:column="39">0<pos:position pos:line="20" pos:column="40"/></literal></expr>)<pos:position pos:line="20" pos:column="41"/></condition><then pos:line="20" pos:column="41"> <block pos:line="20" pos:column="42">{
	    <expr_stmt><expr><name><name pos:line="21" pos:column="13">mp<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">refCnt<pos:position pos:line="21" pos:column="23"/></name></name><operator pos:line="21" pos:column="23">++<pos:position pos:line="21" pos:column="25"/></operator></expr>;<pos:position pos:line="21" pos:column="26"/></expr_stmt>
	    <return pos:line="22" pos:column="13">return <expr><name pos:line="22" pos:column="20">mp<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></return>
	}<pos:position pos:line="23" pos:column="10"/></block></then></if></block></for>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">(<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">mp<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <operator pos:line="24" pos:column="15">(<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">ModulePtr<pos:position pos:line="24" pos:column="25"/></name><operator pos:line="24" pos:column="25">)<pos:position pos:line="24" pos:column="26"/></operator> <call><name pos:line="24" pos:column="27">calloc<pos:position pos:line="24" pos:column="33"/></name><argument_list pos:line="24" pos:column="33">(<argument><expr><literal type="number" pos:line="24" pos:column="34">1<pos:position pos:line="24" pos:column="35"/></literal></expr></argument>, <argument><expr><sizeof pos:line="24" pos:column="37">sizeof<argument_list pos:line="24" pos:column="43">(<argument><expr><operator pos:line="24" pos:column="44">*<pos:position pos:line="24" pos:column="45"/></operator><name pos:line="24" pos:column="45">mp<pos:position pos:line="24" pos:column="47"/></name></expr></argument>)<pos:position pos:line="24" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call><operator pos:line="24" pos:column="49">)<pos:position pos:line="24" pos:column="50"/></operator> <operator pos:line="24" pos:column="51">==<pos:position pos:line="24" pos:column="53"/></operator> <name pos:line="24" pos:column="54">NULL<pos:position pos:line="24" pos:column="58"/></name></expr>)<pos:position pos:line="24" pos:column="59"/></condition><then pos:line="24" pos:column="59"> <block pos:line="24" pos:column="60">{
	<expr_stmt><expr><name pos:line="25" pos:column="9">errvalid<pos:position pos:line="25" pos:column="17"/></name><operator pos:line="25" pos:column="17">++<pos:position pos:line="25" pos:column="19"/></operator></expr>;<pos:position pos:line="25" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="26" pos:column="9">strcpy<pos:position pos:line="26" pos:column="15"/></name><argument_list pos:line="26" pos:column="15">(<argument><expr><name pos:line="26" pos:column="16">errbuf<pos:position pos:line="26" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="24">"calloc: "<pos:position pos:line="26" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">strcat<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><name pos:line="27" pos:column="16">errbuf<pos:position pos:line="27" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="27" pos:column="24">strerror<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><name pos:line="27" pos:column="33">errno<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="27" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="41"/></expr_stmt>
	<return pos:line="28" pos:column="9">return <expr><name pos:line="28" pos:column="16">NULL<pos:position pos:line="28" pos:column="20"/></name></expr>;<pos:position pos:line="28" pos:column="21"/></return>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><operator pos:line="30" pos:column="9">(<pos:position pos:line="30" pos:column="10"/></operator><name><name pos:line="30" pos:column="10">mp<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">name<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <call><name pos:line="30" pos:column="21">strdup<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name pos:line="30" pos:column="28">path<pos:position pos:line="30" pos:column="32"/></name></expr></argument>)<pos:position pos:line="30" pos:column="33"/></argument_list></call><operator pos:line="30" pos:column="33">)<pos:position pos:line="30" pos:column="34"/></operator> <operator pos:line="30" pos:column="35">==<pos:position pos:line="30" pos:column="37"/></operator> <name pos:line="30" pos:column="38">NULL<pos:position pos:line="30" pos:column="42"/></name></expr>)<pos:position pos:line="30" pos:column="43"/></condition><then pos:line="30" pos:column="43"> <block pos:line="30" pos:column="44">{
	<expr_stmt><expr><name pos:line="31" pos:column="9">errvalid<pos:position pos:line="31" pos:column="17"/></name><operator pos:line="31" pos:column="17">++<pos:position pos:line="31" pos:column="19"/></operator></expr>;<pos:position pos:line="31" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="32" pos:column="9">strcpy<pos:position pos:line="32" pos:column="15"/></name><argument_list pos:line="32" pos:column="15">(<argument><expr><name pos:line="32" pos:column="16">errbuf<pos:position pos:line="32" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="24">"strdup: "<pos:position pos:line="32" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="33" pos:column="9">strcat<pos:position pos:line="33" pos:column="15"/></name><argument_list pos:line="33" pos:column="15">(<argument><expr><name pos:line="33" pos:column="16">errbuf<pos:position pos:line="33" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="33" pos:column="24">strerror<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name pos:line="33" pos:column="33">errno<pos:position pos:line="33" pos:column="38"/></name></expr></argument>)<pos:position pos:line="33" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="34" pos:column="9">free<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">mp<pos:position pos:line="34" pos:column="16"/></name></expr></argument>)<pos:position pos:line="34" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="18"/></expr_stmt>
	<return pos:line="35" pos:column="9">return <expr><name pos:line="35" pos:column="16">NULL<pos:position pos:line="35" pos:column="20"/></name></expr>;<pos:position pos:line="35" pos:column="21"/></return>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="37" pos:column="5">/*
     * load should be declared load(const char *...). Thus we
     * cast the path to a normal char *. Ugly.
     */</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name><name pos:line="41" pos:column="10">mp<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">-&gt;<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="14">entry<pos:position pos:line="41" pos:column="19"/></name></name> <operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator> <operator pos:line="41" pos:column="22">(<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="23">void<pos:position pos:line="41" pos:column="27"/></name> <operator pos:line="41" pos:column="28">*<pos:position pos:line="41" pos:column="29"/></operator><operator pos:line="41" pos:column="29">)<pos:position pos:line="41" pos:column="30"/></operator> <call><name pos:line="41" pos:column="31">loadAndInit<pos:position pos:line="41" pos:column="42"/></name><argument_list pos:line="41" pos:column="42">(<argument><expr><operator pos:line="41" pos:column="43">(<pos:position pos:line="41" pos:column="44"/></operator><name pos:line="41" pos:column="44">char<pos:position pos:line="41" pos:column="48"/></name> <operator pos:line="41" pos:column="49">*<pos:position pos:line="41" pos:column="50"/></operator><operator pos:line="41" pos:column="50">)<pos:position pos:line="41" pos:column="51"/></operator> <name pos:line="41" pos:column="52">path<pos:position pos:line="41" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">L_NOAUTODEFER<pos:position pos:line="41" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="73">NULL<pos:position pos:line="41" pos:column="77"/></name></expr></argument>)<pos:position pos:line="41" pos:column="78"/></argument_list></call><operator pos:line="41" pos:column="78">)<pos:position pos:line="41" pos:column="79"/></operator> <operator pos:line="41" pos:column="80">==<pos:position pos:line="41" pos:column="82"/></operator> <name pos:line="41" pos:column="83">NULL<pos:position pos:line="41" pos:column="87"/></name></expr>)<pos:position pos:line="41" pos:column="88"/></condition><then pos:line="41" pos:column="88"> <block pos:line="41" pos:column="89">{
	<expr_stmt><expr><call><name pos:line="42" pos:column="9">free<pos:position pos:line="42" pos:column="13"/></name><argument_list pos:line="42" pos:column="13">(<argument><expr><name><name pos:line="42" pos:column="14">mp<pos:position pos:line="42" pos:column="16"/></name><operator pos:line="42" pos:column="16">-&gt;<pos:position pos:line="42" pos:column="21"/></operator><name pos:line="42" pos:column="18">name<pos:position pos:line="42" pos:column="22"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="24"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="43" pos:column="9">free<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">(<argument><expr><name pos:line="43" pos:column="14">mp<pos:position pos:line="43" pos:column="16"/></name></expr></argument>)<pos:position pos:line="43" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="18"/></expr_stmt>
	<expr_stmt><expr><name pos:line="44" pos:column="9">errvalid<pos:position pos:line="44" pos:column="17"/></name><operator pos:line="44" pos:column="17">++<pos:position pos:line="44" pos:column="19"/></operator></expr>;<pos:position pos:line="44" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="45" pos:column="9">strcpy<pos:position pos:line="45" pos:column="15"/></name><argument_list pos:line="45" pos:column="15">(<argument><expr><name pos:line="45" pos:column="16">errbuf<pos:position pos:line="45" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="45" pos:column="24">"dlopen: "<pos:position pos:line="45" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="46" pos:column="9">strcat<pos:position pos:line="46" pos:column="15"/></name><argument_list pos:line="46" pos:column="15">(<argument><expr><name pos:line="46" pos:column="16">errbuf<pos:position pos:line="46" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="24">path<pos:position pos:line="46" pos:column="28"/></name></expr></argument>)<pos:position pos:line="46" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="30"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="47" pos:column="9">strcat<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><name pos:line="47" pos:column="16">errbuf<pos:position pos:line="47" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="47" pos:column="24">": "<pos:position pos:line="47" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="30"/></expr_stmt>
	<comment type="block" pos:line="48" pos:column="9">/*
	 * If AIX says the file is not executable, the error
	 * can be further described by querying the loader about
	 * the last error.
	 */</comment>
	<if pos:line="53" pos:column="9">if <condition pos:line="53" pos:column="12">(<expr><name pos:line="53" pos:column="13">errno<pos:position pos:line="53" pos:column="18"/></name> <operator pos:line="53" pos:column="19">==<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">ENOEXEC<pos:position pos:line="53" pos:column="29"/></name></expr>)<pos:position pos:line="53" pos:column="30"/></condition><then pos:line="53" pos:column="30"> <block pos:line="53" pos:column="31">{
	    <decl_stmt><decl><type><name pos:line="54" pos:column="13">char<pos:position pos:line="54" pos:column="17"/></name> <modifier pos:line="54" pos:column="18">*<pos:position pos:line="54" pos:column="19"/></modifier></type><name><name pos:line="54" pos:column="19">tmp<pos:position pos:line="54" pos:column="22"/></name><index pos:line="54" pos:column="22">[<expr><name pos:line="54" pos:column="23">BUFSIZ<pos:position pos:line="54" pos:column="29"/></name> <operator pos:line="54" pos:column="30">/<pos:position pos:line="54" pos:column="31"/></operator> <sizeof pos:line="54" pos:column="32">sizeof<argument_list pos:line="54" pos:column="38">(<argument><expr><name pos:line="54" pos:column="39">char<pos:position pos:line="54" pos:column="43"/></name> <operator pos:line="54" pos:column="44">*<pos:position pos:line="54" pos:column="45"/></operator></expr></argument>)<pos:position pos:line="54" pos:column="46"/></argument_list></sizeof></expr>]<pos:position pos:line="54" pos:column="47"/></index></name></decl>;<pos:position pos:line="54" pos:column="48"/></decl_stmt>
	    <if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><call><name pos:line="55" pos:column="17">loadquery<pos:position pos:line="55" pos:column="26"/></name><argument_list pos:line="55" pos:column="26">(<argument><expr><name pos:line="55" pos:column="27">L_GETMESSAGES<pos:position pos:line="55" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="42">tmp<pos:position pos:line="55" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="47">sizeof<argument_list pos:line="55" pos:column="53">(<argument><expr><name pos:line="55" pos:column="54">tmp<pos:position pos:line="55" pos:column="57"/></name></expr></argument>)<pos:position pos:line="55" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="59"/></argument_list></call> <operator pos:line="55" pos:column="60">==<pos:position pos:line="55" pos:column="62"/></operator> <operator pos:line="55" pos:column="63">-<pos:position pos:line="55" pos:column="64"/></operator><literal type="number" pos:line="55" pos:column="64">1<pos:position pos:line="55" pos:column="65"/></literal></expr>)<pos:position pos:line="55" pos:column="66"/></condition><then pos:line="55" pos:column="66">
		<block type="pseudo"><expr_stmt><expr><call><name pos:line="56" pos:column="17">strcpy<pos:position pos:line="56" pos:column="23"/></name><argument_list pos:line="56" pos:column="23">(<argument><expr><name pos:line="56" pos:column="24">errbuf<pos:position pos:line="56" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="56" pos:column="32">strerror<pos:position pos:line="56" pos:column="40"/></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name pos:line="56" pos:column="41">errno<pos:position pos:line="56" pos:column="46"/></name></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="56" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="49"/></expr_stmt></block></then>
	    <else pos:line="57" pos:column="13">else <block pos:line="57" pos:column="18">{
		<decl_stmt><decl><type><name pos:line="58" pos:column="17">char<pos:position pos:line="58" pos:column="21"/></name> <modifier pos:line="58" pos:column="22">*<pos:position pos:line="58" pos:column="23"/></modifier><modifier pos:line="58" pos:column="23">*<pos:position pos:line="58" pos:column="24"/></modifier></type><name pos:line="58" pos:column="24">p<pos:position pos:line="58" pos:column="25"/></name></decl>;<pos:position pos:line="58" pos:column="26"/></decl_stmt>
		<for pos:line="59" pos:column="17">for <control pos:line="59" pos:column="21">(<init><expr><name pos:line="59" pos:column="22">p<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <name pos:line="59" pos:column="26">tmp<pos:position pos:line="59" pos:column="29"/></name></expr>;<pos:position pos:line="59" pos:column="30"/></init> <condition><expr><operator pos:line="59" pos:column="31">*<pos:position pos:line="59" pos:column="32"/></operator><name pos:line="59" pos:column="32">p<pos:position pos:line="59" pos:column="33"/></name></expr>;<pos:position pos:line="59" pos:column="34"/></condition> <incr><expr><name pos:line="59" pos:column="35">p<pos:position pos:line="59" pos:column="36"/></name><operator pos:line="59" pos:column="36">++<pos:position pos:line="59" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="59" pos:column="39"/></control>
		    <block type="pseudo"><expr_stmt><expr><call><name pos:line="60" pos:column="21">caterr<pos:position pos:line="60" pos:column="27"/></name><argument_list pos:line="60" pos:column="27">(<argument><expr><operator pos:line="60" pos:column="28">*<pos:position pos:line="60" pos:column="29"/></operator><name pos:line="60" pos:column="29">p<pos:position pos:line="60" pos:column="30"/></name></expr></argument>)<pos:position pos:line="60" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="32"/></expr_stmt></block></for>
	    }<pos:position pos:line="61" pos:column="14"/></block></else></if>
	}<pos:position pos:line="62" pos:column="10"/></block></then>
	<else pos:line="63" pos:column="9">else
	    <block type="pseudo"><expr_stmt><expr><call><name pos:line="64" pos:column="13">strcat<pos:position pos:line="64" pos:column="19"/></name><argument_list pos:line="64" pos:column="19">(<argument><expr><name pos:line="64" pos:column="20">errbuf<pos:position pos:line="64" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="64" pos:column="28">strerror<pos:position pos:line="64" pos:column="36"/></name><argument_list pos:line="64" pos:column="36">(<argument><expr><name pos:line="64" pos:column="37">errno<pos:position pos:line="64" pos:column="42"/></name></expr></argument>)<pos:position pos:line="64" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="64" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="45"/></expr_stmt></block></else></if>
	<return pos:line="65" pos:column="9">return <expr><name pos:line="65" pos:column="16">NULL<pos:position pos:line="65" pos:column="20"/></name></expr>;<pos:position pos:line="65" pos:column="21"/></return>
    }<pos:position pos:line="66" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="67" pos:column="5">mp<pos:position pos:line="67" pos:column="7"/></name><operator pos:line="67" pos:column="7">-&gt;<pos:position pos:line="67" pos:column="12"/></operator><name pos:line="67" pos:column="9">refCnt<pos:position pos:line="67" pos:column="15"/></name></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <literal type="number" pos:line="67" pos:column="18">1<pos:position pos:line="67" pos:column="19"/></literal></expr>;<pos:position pos:line="67" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="68" pos:column="5">mp<pos:position pos:line="68" pos:column="7"/></name><operator pos:line="68" pos:column="7">-&gt;<pos:position pos:line="68" pos:column="12"/></operator><name pos:line="68" pos:column="9">next<pos:position pos:line="68" pos:column="13"/></name></name> <operator pos:line="68" pos:column="14">=<pos:position pos:line="68" pos:column="15"/></operator> <name pos:line="68" pos:column="16">modList<pos:position pos:line="68" pos:column="23"/></name></expr>;<pos:position pos:line="68" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="69" pos:column="5">modList<pos:position pos:line="69" pos:column="12"/></name> <operator pos:line="69" pos:column="13">=<pos:position pos:line="69" pos:column="14"/></operator> <name pos:line="69" pos:column="15">mp<pos:position pos:line="69" pos:column="17"/></name></expr>;<pos:position pos:line="69" pos:column="18"/></expr_stmt>
    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><call><name pos:line="70" pos:column="9">loadbind<pos:position pos:line="70" pos:column="17"/></name><argument_list pos:line="70" pos:column="17">(<argument><expr><literal type="number" pos:line="70" pos:column="18">0<pos:position pos:line="70" pos:column="19"/></literal></expr></argument>, <argument><expr><name pos:line="70" pos:column="21">mainModule<pos:position pos:line="70" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="33">mp<pos:position pos:line="70" pos:column="35"/></name><operator pos:line="70" pos:column="35">-&gt;<pos:position pos:line="70" pos:column="40"/></operator><name pos:line="70" pos:column="37">entry<pos:position pos:line="70" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="43"/></argument_list></call> <operator pos:line="70" pos:column="44">==<pos:position pos:line="70" pos:column="46"/></operator> <operator pos:line="70" pos:column="47">-<pos:position pos:line="70" pos:column="48"/></operator><literal type="number" pos:line="70" pos:column="48">1<pos:position pos:line="70" pos:column="49"/></literal></expr>)<pos:position pos:line="70" pos:column="50"/></condition><then pos:line="70" pos:column="50"> <block pos:line="70" pos:column="51">{
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">dlclose<pos:position pos:line="71" pos:column="16"/></name><argument_list pos:line="71" pos:column="16">(<argument><expr><name pos:line="71" pos:column="17">mp<pos:position pos:line="71" pos:column="19"/></name></expr></argument>)<pos:position pos:line="71" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="21"/></expr_stmt>
	<expr_stmt><expr><name pos:line="72" pos:column="9">errvalid<pos:position pos:line="72" pos:column="17"/></name><operator pos:line="72" pos:column="17">++<pos:position pos:line="72" pos:column="19"/></operator></expr>;<pos:position pos:line="72" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="73" pos:column="9">strcpy<pos:position pos:line="73" pos:column="15"/></name><argument_list pos:line="73" pos:column="15">(<argument><expr><name pos:line="73" pos:column="16">errbuf<pos:position pos:line="73" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="24">"loadbind: "<pos:position pos:line="73" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="38"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="74" pos:column="9">strcat<pos:position pos:line="74" pos:column="15"/></name><argument_list pos:line="74" pos:column="15">(<argument><expr><name pos:line="74" pos:column="16">errbuf<pos:position pos:line="74" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="74" pos:column="24">strerror<pos:position pos:line="74" pos:column="32"/></name><argument_list pos:line="74" pos:column="32">(<argument><expr><name pos:line="74" pos:column="33">errno<pos:position pos:line="74" pos:column="38"/></name></expr></argument>)<pos:position pos:line="74" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="74" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="41"/></expr_stmt>
	<return pos:line="75" pos:column="9">return <expr><name pos:line="75" pos:column="16">NULL<pos:position pos:line="75" pos:column="20"/></name></expr>;<pos:position pos:line="75" pos:column="21"/></return>
    }<pos:position pos:line="76" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="77" pos:column="5">/*
     * If the user wants global binding, loadbind against all other
     * loaded modules.
     */</comment>
    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><name pos:line="81" pos:column="9">mode<pos:position pos:line="81" pos:column="13"/></name> <operator pos:line="81" pos:column="14">&amp;<pos:position pos:line="81" pos:column="19"/></operator> <name pos:line="81" pos:column="16">RTLD_GLOBAL<pos:position pos:line="81" pos:column="27"/></name></expr>)<pos:position pos:line="81" pos:column="28"/></condition><then pos:line="81" pos:column="28"> <block pos:line="81" pos:column="29">{
	<decl_stmt><decl><type><specifier pos:line="82" pos:column="9">register<pos:position pos:line="82" pos:column="17"/></specifier> <name pos:line="82" pos:column="18">ModulePtr<pos:position pos:line="82" pos:column="27"/></name></type> <name pos:line="82" pos:column="28">mp1<pos:position pos:line="82" pos:column="31"/></name></decl>;<pos:position pos:line="82" pos:column="32"/></decl_stmt>
	<for pos:line="83" pos:column="9">for <control pos:line="83" pos:column="13">(<init><expr><name pos:line="83" pos:column="14">mp1<pos:position pos:line="83" pos:column="17"/></name> <operator pos:line="83" pos:column="18">=<pos:position pos:line="83" pos:column="19"/></operator> <name><name pos:line="83" pos:column="20">mp<pos:position pos:line="83" pos:column="22"/></name><operator pos:line="83" pos:column="22">-&gt;<pos:position pos:line="83" pos:column="27"/></operator><name pos:line="83" pos:column="24">next<pos:position pos:line="83" pos:column="28"/></name></name></expr>;<pos:position pos:line="83" pos:column="29"/></init> <condition><expr><name pos:line="83" pos:column="30">mp1<pos:position pos:line="83" pos:column="33"/></name></expr>;<pos:position pos:line="83" pos:column="34"/></condition> <incr><expr><name pos:line="83" pos:column="35">mp1<pos:position pos:line="83" pos:column="38"/></name> <operator pos:line="83" pos:column="39">=<pos:position pos:line="83" pos:column="40"/></operator> <name><name pos:line="83" pos:column="41">mp1<pos:position pos:line="83" pos:column="44"/></name><operator pos:line="83" pos:column="44">-&gt;<pos:position pos:line="83" pos:column="49"/></operator><name pos:line="83" pos:column="46">next<pos:position pos:line="83" pos:column="50"/></name></name></expr></incr>)<pos:position pos:line="83" pos:column="51"/></control>
	    <block type="pseudo"><if pos:line="84" pos:column="13">if <condition pos:line="84" pos:column="16">(<expr><call><name pos:line="84" pos:column="17">loadbind<pos:position pos:line="84" pos:column="25"/></name><argument_list pos:line="84" pos:column="25">(<argument><expr><literal type="number" pos:line="84" pos:column="26">0<pos:position pos:line="84" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="29">mp1<pos:position pos:line="84" pos:column="32"/></name><operator pos:line="84" pos:column="32">-&gt;<pos:position pos:line="84" pos:column="37"/></operator><name pos:line="84" pos:column="34">entry<pos:position pos:line="84" pos:column="39"/></name></name></expr></argument>, <argument><expr><name><name pos:line="84" pos:column="41">mp<pos:position pos:line="84" pos:column="43"/></name><operator pos:line="84" pos:column="43">-&gt;<pos:position pos:line="84" pos:column="48"/></operator><name pos:line="84" pos:column="45">entry<pos:position pos:line="84" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="84" pos:column="51"/></argument_list></call> <operator pos:line="84" pos:column="52">==<pos:position pos:line="84" pos:column="54"/></operator> <operator pos:line="84" pos:column="55">-<pos:position pos:line="84" pos:column="56"/></operator><literal type="number" pos:line="84" pos:column="56">1<pos:position pos:line="84" pos:column="57"/></literal></expr>)<pos:position pos:line="84" pos:column="58"/></condition><then pos:line="84" pos:column="58"> <block pos:line="84" pos:column="59">{
		<expr_stmt><expr><call><name pos:line="85" pos:column="17">dlclose<pos:position pos:line="85" pos:column="24"/></name><argument_list pos:line="85" pos:column="24">(<argument><expr><name pos:line="85" pos:column="25">mp<pos:position pos:line="85" pos:column="27"/></name></expr></argument>)<pos:position pos:line="85" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="29"/></expr_stmt>
		<expr_stmt><expr><name pos:line="86" pos:column="17">errvalid<pos:position pos:line="86" pos:column="25"/></name><operator pos:line="86" pos:column="25">++<pos:position pos:line="86" pos:column="27"/></operator></expr>;<pos:position pos:line="86" pos:column="28"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="87" pos:column="17">strcpy<pos:position pos:line="87" pos:column="23"/></name><argument_list pos:line="87" pos:column="23">(<argument><expr><name pos:line="87" pos:column="24">errbuf<pos:position pos:line="87" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="32">"loadbind: "<pos:position pos:line="87" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="46"/></expr_stmt>
		<expr_stmt><expr><call><name pos:line="88" pos:column="17">strcat<pos:position pos:line="88" pos:column="23"/></name><argument_list pos:line="88" pos:column="23">(<argument><expr><name pos:line="88" pos:column="24">errbuf<pos:position pos:line="88" pos:column="30"/></name></expr></argument>, <argument><expr><call><name pos:line="88" pos:column="32">strerror<pos:position pos:line="88" pos:column="40"/></name><argument_list pos:line="88" pos:column="40">(<argument><expr><name pos:line="88" pos:column="41">errno<pos:position pos:line="88" pos:column="46"/></name></expr></argument>)<pos:position pos:line="88" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="88" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="49"/></expr_stmt>
		<return pos:line="89" pos:column="17">return <expr><name pos:line="89" pos:column="24">NULL<pos:position pos:line="89" pos:column="28"/></name></expr>;<pos:position pos:line="89" pos:column="29"/></return>
	    }<pos:position pos:line="90" pos:column="14"/></block></then></if></block></for>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><call><name pos:line="92" pos:column="9">readExports<pos:position pos:line="92" pos:column="20"/></name><argument_list pos:line="92" pos:column="20">(<argument><expr><name pos:line="92" pos:column="21">mp<pos:position pos:line="92" pos:column="23"/></name></expr></argument>)<pos:position pos:line="92" pos:column="24"/></argument_list></call> <operator pos:line="92" pos:column="25">==<pos:position pos:line="92" pos:column="27"/></operator> <operator pos:line="92" pos:column="28">-<pos:position pos:line="92" pos:column="29"/></operator><literal type="number" pos:line="92" pos:column="29">1<pos:position pos:line="92" pos:column="30"/></literal></expr>)<pos:position pos:line="92" pos:column="31"/></condition><then pos:line="92" pos:column="31"> <block pos:line="92" pos:column="32">{
	<expr_stmt><expr><call><name pos:line="93" pos:column="9">dlclose<pos:position pos:line="93" pos:column="16"/></name><argument_list pos:line="93" pos:column="16">(<argument><expr><name pos:line="93" pos:column="17">mp<pos:position pos:line="93" pos:column="19"/></name></expr></argument>)<pos:position pos:line="93" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="21"/></expr_stmt>
	<return pos:line="94" pos:column="9">return <expr><name pos:line="94" pos:column="16">NULL<pos:position pos:line="94" pos:column="20"/></name></expr>;<pos:position pos:line="94" pos:column="21"/></return>
    }<pos:position pos:line="95" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="96" pos:column="5">/*
     * If there is a dl_info structure, call the init function.
     */</comment>
    <if pos:line="99" pos:column="5">if <condition pos:line="99" pos:column="8">(<expr><name><name pos:line="99" pos:column="9">mp<pos:position pos:line="99" pos:column="11"/></name><operator pos:line="99" pos:column="11">-&gt;<pos:position pos:line="99" pos:column="16"/></operator><name pos:line="99" pos:column="13">info<pos:position pos:line="99" pos:column="17"/></name></name> <operator pos:line="99" pos:column="18">=<pos:position pos:line="99" pos:column="19"/></operator> <operator pos:line="99" pos:column="20">(<pos:position pos:line="99" pos:column="21"/></operator>struct <name pos:line="99" pos:column="28">dl_info<pos:position pos:line="99" pos:column="35"/></name> <operator pos:line="99" pos:column="36">*<pos:position pos:line="99" pos:column="37"/></operator><operator pos:line="99" pos:column="37">)<pos:position pos:line="99" pos:column="38"/></operator> <call><name pos:line="99" pos:column="39">dlsym<pos:position pos:line="99" pos:column="44"/></name><argument_list pos:line="99" pos:column="44">(<argument><expr><name pos:line="99" pos:column="45">mp<pos:position pos:line="99" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="49">"dl_info"<pos:position pos:line="99" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="60"/></condition><then pos:line="99" pos:column="60"> <block pos:line="99" pos:column="61">{
	<if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><name><name pos:line="100" pos:column="13">mp<pos:position pos:line="100" pos:column="15"/></name><operator pos:line="100" pos:column="15">-&gt;<pos:position pos:line="100" pos:column="20"/></operator><name pos:line="100" pos:column="17">info<pos:position pos:line="100" pos:column="21"/></name><operator pos:line="100" pos:column="21">-&gt;<pos:position pos:line="100" pos:column="26"/></operator><name pos:line="100" pos:column="23">init<pos:position pos:line="100" pos:column="27"/></name></name></expr>)<pos:position pos:line="100" pos:column="28"/></condition><then pos:line="100" pos:column="28">
	    <block type="pseudo"><expr_stmt><expr><call pos:line="101" pos:column="13">(<modifier pos:line="101" pos:column="14">*<pos:position pos:line="101" pos:column="15"/></modifier><name><name pos:line="101" pos:column="15">mp<pos:position pos:line="101" pos:column="17"/></name><operator pos:line="101" pos:column="17">-&gt;<pos:position pos:line="101" pos:column="22"/></operator><name pos:line="101" pos:column="19">info<pos:position pos:line="101" pos:column="23"/></name><operator pos:line="101" pos:column="23">-&gt;<pos:position pos:line="101" pos:column="28"/></operator><name pos:line="101" pos:column="25">init<pos:position pos:line="101" pos:column="29"/></name></name>) <argument_list pos:line="101" pos:column="31">()<pos:position pos:line="101" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="34"/></expr_stmt></block></then></if>
    }<pos:position pos:line="102" pos:column="6"/></block></then>
    <else pos:line="103" pos:column="5">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="104" pos:column="9">errvalid<pos:position pos:line="104" pos:column="17"/></name> <operator pos:line="104" pos:column="18">=<pos:position pos:line="104" pos:column="19"/></operator> <literal type="number" pos:line="104" pos:column="20">0<pos:position pos:line="104" pos:column="21"/></literal></expr>;<pos:position pos:line="104" pos:column="22"/></expr_stmt></block></else></if>
    <comment type="block" pos:line="105" pos:column="5">/*
     * If the shared object was compiled using xlC we will need
     * to call static constructors (and later on dlclose destructors).
     */</comment>
    <if pos:line="109" pos:column="5">if <condition pos:line="109" pos:column="8">(<expr><name><name pos:line="109" pos:column="9">mp<pos:position pos:line="109" pos:column="11"/></name><operator pos:line="109" pos:column="11">-&gt;<pos:position pos:line="109" pos:column="16"/></operator><name pos:line="109" pos:column="13">cdtors<pos:position pos:line="109" pos:column="19"/></name></name> <operator pos:line="109" pos:column="20">=<pos:position pos:line="109" pos:column="21"/></operator> <operator pos:line="109" pos:column="22">(<pos:position pos:line="109" pos:column="23"/></operator><name pos:line="109" pos:column="23">CdtorPtr<pos:position pos:line="109" pos:column="31"/></name><operator pos:line="109" pos:column="31">)<pos:position pos:line="109" pos:column="32"/></operator> <call><name pos:line="109" pos:column="33">dlsym<pos:position pos:line="109" pos:column="38"/></name><argument_list pos:line="109" pos:column="38">(<argument><expr><name pos:line="109" pos:column="39">mp<pos:position pos:line="109" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="109" pos:column="43">"__cdtors"<pos:position pos:line="109" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="55"/></condition><then pos:line="109" pos:column="55"> <block pos:line="109" pos:column="56">{
	<decl_stmt><decl><type><name pos:line="110" pos:column="9">CdtorPtr<pos:position pos:line="110" pos:column="17"/></name></type> <name pos:line="110" pos:column="18">cp<pos:position pos:line="110" pos:column="20"/></name> <init pos:line="110" pos:column="21">= <expr><name><name pos:line="110" pos:column="23">mp<pos:position pos:line="110" pos:column="25"/></name><operator pos:line="110" pos:column="25">-&gt;<pos:position pos:line="110" pos:column="30"/></operator><name pos:line="110" pos:column="27">cdtors<pos:position pos:line="110" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="110" pos:column="34"/></decl_stmt>
	<while pos:line="111" pos:column="9">while <condition pos:line="111" pos:column="15">(<expr><name><name pos:line="111" pos:column="16">cp<pos:position pos:line="111" pos:column="18"/></name><operator pos:line="111" pos:column="18">-&gt;<pos:position pos:line="111" pos:column="23"/></operator><name pos:line="111" pos:column="20">init<pos:position pos:line="111" pos:column="24"/></name></name> <operator pos:line="111" pos:column="25">||<pos:position pos:line="111" pos:column="27"/></operator> <name><name pos:line="111" pos:column="28">cp<pos:position pos:line="111" pos:column="30"/></name><operator pos:line="111" pos:column="30">-&gt;<pos:position pos:line="111" pos:column="35"/></operator><name pos:line="111" pos:column="32">term<pos:position pos:line="111" pos:column="36"/></name></name></expr>)<pos:position pos:line="111" pos:column="37"/></condition> <block pos:line="111" pos:column="38">{
	    <if pos:line="112" pos:column="13">if <condition pos:line="112" pos:column="16">(<expr><name><name pos:line="112" pos:column="17">cp<pos:position pos:line="112" pos:column="19"/></name><operator pos:line="112" pos:column="19">-&gt;<pos:position pos:line="112" pos:column="24"/></operator><name pos:line="112" pos:column="21">init<pos:position pos:line="112" pos:column="25"/></name></name> <operator pos:line="112" pos:column="26">&amp;&amp;<pos:position pos:line="112" pos:column="36"/></operator> <name><name pos:line="112" pos:column="29">cp<pos:position pos:line="112" pos:column="31"/></name><operator pos:line="112" pos:column="31">-&gt;<pos:position pos:line="112" pos:column="36"/></operator><name pos:line="112" pos:column="33">init<pos:position pos:line="112" pos:column="37"/></name></name> <operator pos:line="112" pos:column="38">!=<pos:position pos:line="112" pos:column="40"/></operator> <operator pos:line="112" pos:column="41">(<pos:position pos:line="112" pos:column="42"/></operator><call><call><name pos:line="112" pos:column="42">void<pos:position pos:line="112" pos:column="46"/></name> <argument_list pos:line="112" pos:column="47">(<argument><expr><operator pos:line="112" pos:column="48">*<pos:position pos:line="112" pos:column="49"/></operator></expr></argument>)<pos:position pos:line="112" pos:column="50"/></argument_list></call><argument_list pos:line="112" pos:column="50">(<argument><expr><name pos:line="112" pos:column="51">void<pos:position pos:line="112" pos:column="55"/></name></expr></argument>)<pos:position pos:line="112" pos:column="56"/></argument_list></call><operator pos:line="112" pos:column="56">)<pos:position pos:line="112" pos:column="57"/></operator> <literal type="number" pos:line="112" pos:column="58">0xffffffff<pos:position pos:line="112" pos:column="68"/></literal></expr>)<pos:position pos:line="112" pos:column="69"/></condition><then pos:line="112" pos:column="69">
		<block type="pseudo"><expr_stmt><expr><call pos:line="113" pos:column="17">(<modifier pos:line="113" pos:column="18">*<pos:position pos:line="113" pos:column="19"/></modifier><name><name pos:line="113" pos:column="19">cp<pos:position pos:line="113" pos:column="21"/></name><operator pos:line="113" pos:column="21">-&gt;<pos:position pos:line="113" pos:column="26"/></operator><name pos:line="113" pos:column="23">init<pos:position pos:line="113" pos:column="27"/></name></name>) <argument_list pos:line="113" pos:column="29">()<pos:position pos:line="113" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="32"/></expr_stmt></block></then></if>
	    <expr_stmt><expr><name pos:line="114" pos:column="13">cp<pos:position pos:line="114" pos:column="15"/></name><operator pos:line="114" pos:column="15">++<pos:position pos:line="114" pos:column="17"/></operator></expr>;<pos:position pos:line="114" pos:column="18"/></expr_stmt>
	}<pos:position pos:line="115" pos:column="10"/></block></while>
	<comment type="block" pos:line="116" pos:column="9">/*
	 * If the shared object was compiled using g++, we will need
	 * to call global constructors using the _GLOBAL__DI function,
	 * and later, global destructors using the _GLOBAL_DD
	 * funciton.  --jwe
	 */</comment>
    }<pos:position pos:line="122" pos:column="6"/></block></then>
    <elseif pos:line="123" pos:column="5">else <if pos:line="123" pos:column="10">if <condition pos:line="123" pos:column="13">(<expr><name><name pos:line="123" pos:column="14">mp<pos:position pos:line="123" pos:column="16"/></name><operator pos:line="123" pos:column="16">-&gt;<pos:position pos:line="123" pos:column="21"/></operator><name pos:line="123" pos:column="18">gcc_ctor<pos:position pos:line="123" pos:column="26"/></name></name> <operator pos:line="123" pos:column="27">=<pos:position pos:line="123" pos:column="28"/></operator> <operator pos:line="123" pos:column="29">(<pos:position pos:line="123" pos:column="30"/></operator><name pos:line="123" pos:column="30">GccCDtorPtr<pos:position pos:line="123" pos:column="41"/></name><operator pos:line="123" pos:column="41">)<pos:position pos:line="123" pos:column="42"/></operator> <call><name pos:line="123" pos:column="43">dlsym<pos:position pos:line="123" pos:column="48"/></name><argument_list pos:line="123" pos:column="48">(<argument><expr><name pos:line="123" pos:column="49">mp<pos:position pos:line="123" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="53">"_GLOBAL__DI"<pos:position pos:line="123" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="123" pos:column="68"/></condition><then pos:line="123" pos:column="68"> <block pos:line="123" pos:column="69">{
	<expr_stmt><expr><call pos:line="124" pos:column="9">(<modifier pos:line="124" pos:column="10">*<pos:position pos:line="124" pos:column="11"/></modifier><name><name pos:line="124" pos:column="11">mp<pos:position pos:line="124" pos:column="13"/></name><operator pos:line="124" pos:column="13">-&gt;<pos:position pos:line="124" pos:column="18"/></operator><name pos:line="124" pos:column="15">gcc_ctor<pos:position pos:line="124" pos:column="23"/></name></name>) <argument_list pos:line="124" pos:column="25">()<pos:position pos:line="124" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="28"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="125" pos:column="9">mp<pos:position pos:line="125" pos:column="11"/></name><operator pos:line="125" pos:column="11">-&gt;<pos:position pos:line="125" pos:column="16"/></operator><name pos:line="125" pos:column="13">gcc_dtor<pos:position pos:line="125" pos:column="21"/></name></name> <operator pos:line="125" pos:column="22">=<pos:position pos:line="125" pos:column="23"/></operator> <operator pos:line="125" pos:column="24">(<pos:position pos:line="125" pos:column="25"/></operator><name pos:line="125" pos:column="25">GccCDtorPtr<pos:position pos:line="125" pos:column="36"/></name><operator pos:line="125" pos:column="36">)<pos:position pos:line="125" pos:column="37"/></operator> <call><name pos:line="125" pos:column="38">dlsym<pos:position pos:line="125" pos:column="43"/></name><argument_list pos:line="125" pos:column="43">(<argument><expr><name pos:line="125" pos:column="44">mp<pos:position pos:line="125" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="48">"_GLOBAL__DD"<pos:position pos:line="125" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="63"/></expr_stmt>
    }<pos:position pos:line="126" pos:column="6"/></block></then></if></elseif>
    <else pos:line="127" pos:column="5">else
	<block type="pseudo"><expr_stmt><expr><name pos:line="128" pos:column="9">errvalid<pos:position pos:line="128" pos:column="17"/></name> <operator pos:line="128" pos:column="18">=<pos:position pos:line="128" pos:column="19"/></operator> <literal type="number" pos:line="128" pos:column="20">0<pos:position pos:line="128" pos:column="21"/></literal></expr>;<pos:position pos:line="128" pos:column="22"/></expr_stmt></block></else></if>
    <return pos:line="129" pos:column="5">return <expr><name pos:line="129" pos:column="12">mp<pos:position pos:line="129" pos:column="14"/></name></expr>;<pos:position pos:line="129" pos:column="15"/></return>
}<pos:position pos:line="130" pos:column="2"/></block></function></unit>
