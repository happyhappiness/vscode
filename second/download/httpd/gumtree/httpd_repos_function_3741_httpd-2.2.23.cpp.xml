<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3741_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">strnatcmp0<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">char<pos:position pos:line="1" pos:column="27"/></name> <specifier pos:line="1" pos:column="28">const<pos:position pos:line="1" pos:column="33"/></specifier> <modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type><name pos:line="1" pos:column="35">a<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">char<pos:position pos:line="1" pos:column="42"/></name> <specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">b<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">int<pos:position pos:line="1" pos:column="56"/></name></type> <name pos:line="1" pos:column="57">fold_case<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
     <decl_stmt><decl><type><name pos:line="3" pos:column="6">int<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">ai<pos:position pos:line="3" pos:column="12"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="14">bi<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="4" pos:column="6">char<pos:position pos:line="4" pos:column="10"/></name></type> <name pos:line="4" pos:column="11">ca<pos:position pos:line="4" pos:column="13"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="15">cb<pos:position pos:line="4" pos:column="17"/></name></decl>;<pos:position pos:line="4" pos:column="18"/></decl_stmt>
     <decl_stmt><decl><type><name pos:line="5" pos:column="6">int<pos:position pos:line="5" pos:column="9"/></name></type> <name pos:line="5" pos:column="10">fractional<pos:position pos:line="5" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="22">result<pos:position pos:line="5" pos:column="28"/></name></decl>;<pos:position pos:line="5" pos:column="29"/></decl_stmt>
     <expr_stmt><expr><name pos:line="6" pos:column="6">ai<pos:position pos:line="6" pos:column="8"/></name> <operator pos:line="6" pos:column="9">=<pos:position pos:line="6" pos:column="10"/></operator> <name pos:line="6" pos:column="11">bi<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">=<pos:position pos:line="6" pos:column="15"/></operator> <literal type="number" pos:line="6" pos:column="16">0<pos:position pos:line="6" pos:column="17"/></literal></expr>;<pos:position pos:line="6" pos:column="18"/></expr_stmt>
     <while pos:line="7" pos:column="6">while <condition pos:line="7" pos:column="12">(<expr><literal type="number" pos:line="7" pos:column="13">1<pos:position pos:line="7" pos:column="14"/></literal></expr>)<pos:position pos:line="7" pos:column="15"/></condition> <block pos:line="7" pos:column="16">{
	  <expr_stmt><expr><name pos:line="8" pos:column="11">ca<pos:position pos:line="8" pos:column="13"/></name> <operator pos:line="8" pos:column="14">=<pos:position pos:line="8" pos:column="15"/></operator> <name><name pos:line="8" pos:column="16">a<pos:position pos:line="8" pos:column="17"/></name><index pos:line="8" pos:column="17">[<expr><name pos:line="8" pos:column="18">ai<pos:position pos:line="8" pos:column="20"/></name></expr>]<pos:position pos:line="8" pos:column="21"/></index></name></expr>;<pos:position pos:line="8" pos:column="22"/></expr_stmt> <expr_stmt><expr><name pos:line="8" pos:column="23">cb<pos:position pos:line="8" pos:column="25"/></name> <operator pos:line="8" pos:column="26">=<pos:position pos:line="8" pos:column="27"/></operator> <name><name pos:line="8" pos:column="28">b<pos:position pos:line="8" pos:column="29"/></name><index pos:line="8" pos:column="29">[<expr><name pos:line="8" pos:column="30">bi<pos:position pos:line="8" pos:column="32"/></name></expr>]<pos:position pos:line="8" pos:column="33"/></index></name></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>

	  <comment type="block" pos:line="10" pos:column="11">/* skip over leading spaces or zeros */</comment>
	  <while pos:line="11" pos:column="11">while <condition pos:line="11" pos:column="17">(<expr><call><name pos:line="11" pos:column="18">apr_isspace<pos:position pos:line="11" pos:column="29"/></name><argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">ca<pos:position pos:line="11" pos:column="32"/></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="34"/></condition>
	       <block type="pseudo"><expr_stmt><expr><name pos:line="12" pos:column="16">ca<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">=<pos:position pos:line="12" pos:column="20"/></operator> <name><name pos:line="12" pos:column="21">a<pos:position pos:line="12" pos:column="22"/></name><index pos:line="12" pos:column="22">[<expr><operator pos:line="12" pos:column="23">++<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="25">ai<pos:position pos:line="12" pos:column="27"/></name></expr>]<pos:position pos:line="12" pos:column="28"/></index></name></expr>;<pos:position pos:line="12" pos:column="29"/></expr_stmt></block></while>

	  <while pos:line="14" pos:column="11">while <condition pos:line="14" pos:column="17">(<expr><call><name pos:line="14" pos:column="18">apr_isspace<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">cb<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="34"/></condition>
	       <block type="pseudo"><expr_stmt><expr><name pos:line="15" pos:column="16">cb<pos:position pos:line="15" pos:column="18"/></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <name><name pos:line="15" pos:column="21">b<pos:position pos:line="15" pos:column="22"/></name><index pos:line="15" pos:column="22">[<expr><operator pos:line="15" pos:column="23">++<pos:position pos:line="15" pos:column="25"/></operator><name pos:line="15" pos:column="25">bi<pos:position pos:line="15" pos:column="27"/></name></expr>]<pos:position pos:line="15" pos:column="28"/></index></name></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt></block></while>

	  <comment type="block" pos:line="17" pos:column="11">/* process run of digits */</comment>
	  <if pos:line="18" pos:column="11">if <condition pos:line="18" pos:column="14">(<expr><call><name pos:line="18" pos:column="15">apr_isdigit<pos:position pos:line="18" pos:column="26"/></name><argument_list pos:line="18" pos:column="26">(<argument><expr><name pos:line="18" pos:column="27">ca<pos:position pos:line="18" pos:column="29"/></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call>  <operator pos:line="18" pos:column="32">&amp;&amp;<pos:position pos:line="18" pos:column="42"/></operator>  <call><name pos:line="18" pos:column="36">apr_isdigit<pos:position pos:line="18" pos:column="47"/></name><argument_list pos:line="18" pos:column="47">(<argument><expr><name pos:line="18" pos:column="48">cb<pos:position pos:line="18" pos:column="50"/></name></expr></argument>)<pos:position pos:line="18" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="52"/></condition><then pos:line="18" pos:column="52"> <block pos:line="18" pos:column="53">{
	       <expr_stmt><expr><name pos:line="19" pos:column="16">fractional<pos:position pos:line="19" pos:column="26"/></name> <operator pos:line="19" pos:column="27">=<pos:position pos:line="19" pos:column="28"/></operator> <operator pos:line="19" pos:column="29">(<pos:position pos:line="19" pos:column="30"/></operator><name pos:line="19" pos:column="30">ca<pos:position pos:line="19" pos:column="32"/></name> <operator pos:line="19" pos:column="33">==<pos:position pos:line="19" pos:column="35"/></operator> <literal type="char" pos:line="19" pos:column="36">'0'<pos:position pos:line="19" pos:column="39"/></literal> <operator pos:line="19" pos:column="40">||<pos:position pos:line="19" pos:column="42"/></operator> <name pos:line="19" pos:column="43">cb<pos:position pos:line="19" pos:column="45"/></name> <operator pos:line="19" pos:column="46">==<pos:position pos:line="19" pos:column="48"/></operator> <literal type="char" pos:line="19" pos:column="49">'0'<pos:position pos:line="19" pos:column="52"/></literal><operator pos:line="19" pos:column="52">)<pos:position pos:line="19" pos:column="53"/></operator></expr>;<pos:position pos:line="19" pos:column="54"/></expr_stmt>

	       <if pos:line="21" pos:column="16">if <condition pos:line="21" pos:column="19">(<expr><name pos:line="21" pos:column="20">fractional<pos:position pos:line="21" pos:column="30"/></name></expr>)<pos:position pos:line="21" pos:column="31"/></condition><then pos:line="21" pos:column="31"> <block pos:line="21" pos:column="32">{
		    <if pos:line="22" pos:column="21">if <condition pos:line="22" pos:column="24">(<expr><operator pos:line="22" pos:column="25">(<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">result<pos:position pos:line="22" pos:column="32"/></name> <operator pos:line="22" pos:column="33">=<pos:position pos:line="22" pos:column="34"/></operator> <call><name pos:line="22" pos:column="35">compare_left<pos:position pos:line="22" pos:column="47"/></name><argument_list pos:line="22" pos:column="47">(<argument><expr><name pos:line="22" pos:column="48">a<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">+<pos:position pos:line="22" pos:column="50"/></operator><name pos:line="22" pos:column="50">ai<pos:position pos:line="22" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="54">b<pos:position pos:line="22" pos:column="55"/></name><operator pos:line="22" pos:column="55">+<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="56">bi<pos:position pos:line="22" pos:column="58"/></name></expr></argument>)<pos:position pos:line="22" pos:column="59"/></argument_list></call><operator pos:line="22" pos:column="59">)<pos:position pos:line="22" pos:column="60"/></operator> <operator pos:line="22" pos:column="61">!=<pos:position pos:line="22" pos:column="63"/></operator> <literal type="number" pos:line="22" pos:column="64">0<pos:position pos:line="22" pos:column="65"/></literal></expr>)<pos:position pos:line="22" pos:column="66"/></condition><then pos:line="22" pos:column="66">
			 <block type="pseudo"><return pos:line="23" pos:column="26">return <expr><name pos:line="23" pos:column="33">result<pos:position pos:line="23" pos:column="39"/></name></expr>;<pos:position pos:line="23" pos:column="40"/></return></block></then></if>
	       }<pos:position pos:line="24" pos:column="17"/></block></then> <else pos:line="24" pos:column="18">else <block pos:line="24" pos:column="23">{
		    <if pos:line="25" pos:column="21">if <condition pos:line="25" pos:column="24">(<expr><operator pos:line="25" pos:column="25">(<pos:position pos:line="25" pos:column="26"/></operator><name pos:line="25" pos:column="26">result<pos:position pos:line="25" pos:column="32"/></name> <operator pos:line="25" pos:column="33">=<pos:position pos:line="25" pos:column="34"/></operator> <call><name pos:line="25" pos:column="35">compare_right<pos:position pos:line="25" pos:column="48"/></name><argument_list pos:line="25" pos:column="48">(<argument><expr><name pos:line="25" pos:column="49">a<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">+<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="51">ai<pos:position pos:line="25" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="55">b<pos:position pos:line="25" pos:column="56"/></name><operator pos:line="25" pos:column="56">+<pos:position pos:line="25" pos:column="57"/></operator><name pos:line="25" pos:column="57">bi<pos:position pos:line="25" pos:column="59"/></name></expr></argument>)<pos:position pos:line="25" pos:column="60"/></argument_list></call><operator pos:line="25" pos:column="60">)<pos:position pos:line="25" pos:column="61"/></operator> <operator pos:line="25" pos:column="62">!=<pos:position pos:line="25" pos:column="64"/></operator> <literal type="number" pos:line="25" pos:column="65">0<pos:position pos:line="25" pos:column="66"/></literal></expr>)<pos:position pos:line="25" pos:column="67"/></condition><then pos:line="25" pos:column="67">
			 <block type="pseudo"><return pos:line="26" pos:column="26">return <expr><name pos:line="26" pos:column="33">result<pos:position pos:line="26" pos:column="39"/></name></expr>;<pos:position pos:line="26" pos:column="40"/></return></block></then></if>
	       }<pos:position pos:line="27" pos:column="17"/></block></else></if>
	  }<pos:position pos:line="28" pos:column="12"/></block></then></if>

	  <if pos:line="30" pos:column="11">if <condition pos:line="30" pos:column="14">(<expr><operator pos:line="30" pos:column="15">!<pos:position pos:line="30" pos:column="16"/></operator><name pos:line="30" pos:column="16">ca<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&amp;&amp;<pos:position pos:line="30" pos:column="29"/></operator> <operator pos:line="30" pos:column="22">!<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">cb<pos:position pos:line="30" pos:column="25"/></name></expr>)<pos:position pos:line="30" pos:column="26"/></condition><then pos:line="30" pos:column="26"> <block pos:line="30" pos:column="27">{
	       <comment type="block" pos:line="31" pos:column="16">/* The strings compare the same.  Perhaps the caller
                  will want to call strcmp to break the tie. */</comment>
	       <return pos:line="33" pos:column="16">return <expr><literal type="number" pos:line="33" pos:column="23">0<pos:position pos:line="33" pos:column="24"/></literal></expr>;<pos:position pos:line="33" pos:column="25"/></return>
	  }<pos:position pos:line="34" pos:column="12"/></block></then></if>

	  <if pos:line="36" pos:column="11">if <condition pos:line="36" pos:column="14">(<expr><name pos:line="36" pos:column="15">fold_case<pos:position pos:line="36" pos:column="24"/></name></expr>)<pos:position pos:line="36" pos:column="25"/></condition><then pos:line="36" pos:column="25"> <block pos:line="36" pos:column="26">{
	       <expr_stmt><expr><name pos:line="37" pos:column="16">ca<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <call><name pos:line="37" pos:column="21">apr_toupper<pos:position pos:line="37" pos:column="32"/></name><argument_list pos:line="37" pos:column="32">(<argument><expr><name pos:line="37" pos:column="33">ca<pos:position pos:line="37" pos:column="35"/></name></expr></argument>)<pos:position pos:line="37" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="37"/></expr_stmt>
	       <expr_stmt><expr><name pos:line="38" pos:column="16">cb<pos:position pos:line="38" pos:column="18"/></name> <operator pos:line="38" pos:column="19">=<pos:position pos:line="38" pos:column="20"/></operator> <call><name pos:line="38" pos:column="21">apr_toupper<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">cb<pos:position pos:line="38" pos:column="35"/></name></expr></argument>)<pos:position pos:line="38" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="37"/></expr_stmt>
	  }<pos:position pos:line="39" pos:column="12"/></block></then></if>
	  
	  <if pos:line="41" pos:column="11">if <condition pos:line="41" pos:column="14">(<expr><name pos:line="41" pos:column="15">ca<pos:position pos:line="41" pos:column="17"/></name> <operator pos:line="41" pos:column="18">&lt;<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="20">cb<pos:position pos:line="41" pos:column="22"/></name></expr>)<pos:position pos:line="41" pos:column="23"/></condition><then pos:line="41" pos:column="23">
	       <block type="pseudo"><return pos:line="42" pos:column="16">return <expr><operator pos:line="42" pos:column="23">-<pos:position pos:line="42" pos:column="24"/></operator><literal type="number" pos:line="42" pos:column="24">1<pos:position pos:line="42" pos:column="25"/></literal></expr>;<pos:position pos:line="42" pos:column="26"/></return></block></then>
	  <elseif pos:line="43" pos:column="11">else <if pos:line="43" pos:column="16">if <condition pos:line="43" pos:column="19">(<expr><name pos:line="43" pos:column="20">ca<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">&gt;<pos:position pos:line="43" pos:column="27"/></operator> <name pos:line="43" pos:column="25">cb<pos:position pos:line="43" pos:column="27"/></name></expr>)<pos:position pos:line="43" pos:column="28"/></condition><then pos:line="43" pos:column="28">
	       <block type="pseudo"><return pos:line="44" pos:column="16">return <expr><operator pos:line="44" pos:column="23">+<pos:position pos:line="44" pos:column="24"/></operator><literal type="number" pos:line="44" pos:column="24">1<pos:position pos:line="44" pos:column="25"/></literal></expr>;<pos:position pos:line="44" pos:column="26"/></return></block></then></if></elseif></if>

	  <expr_stmt><expr><operator pos:line="46" pos:column="11">++<pos:position pos:line="46" pos:column="13"/></operator><name pos:line="46" pos:column="13">ai<pos:position pos:line="46" pos:column="15"/></name></expr>;<pos:position pos:line="46" pos:column="16"/></expr_stmt> <expr_stmt><expr><operator pos:line="46" pos:column="17">++<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="19">bi<pos:position pos:line="46" pos:column="21"/></name></expr>;<pos:position pos:line="46" pos:column="22"/></expr_stmt>
     }<pos:position pos:line="47" pos:column="7"/></block></while>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
