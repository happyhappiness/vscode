<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1051_httpd-2.4.10.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">mk_password_hash<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">passwd_ctx<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">ctx<pos:position pos:line="1" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="38"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">pw<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name></type> <name><name pos:line="4" pos:column="10">salt<pos:position pos:line="4" pos:column="14"/></name><index pos:line="4" pos:column="14">[<expr><literal type="number" pos:line="4" pos:column="15">16<pos:position pos:line="4" pos:column="17"/></literal></expr>]<pos:position pos:line="4" pos:column="18"/></index></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">ret<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><literal type="number" pos:line="6" pos:column="15">0<pos:position pos:line="6" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">CRYPT_ALGO_SUPPORTED<pos:position pos:line="7" pos:column="25"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">cbuf<pos:position pos:line="8" pos:column="15"/></name></decl>;<pos:position pos:line="8" pos:column="16"/></decl_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><name pos:line="11" pos:column="5">pw<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <name><name pos:line="11" pos:column="10">ctx<pos:position pos:line="11" pos:column="13"/></name><operator pos:line="11" pos:column="13">-&gt;<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="15">passwd<pos:position pos:line="11" pos:column="21"/></name></name></expr>;<pos:position pos:line="11" pos:column="22"/></expr_stmt>
    <switch pos:line="12" pos:column="5">switch <condition pos:line="12" pos:column="12">(<expr><name><name pos:line="12" pos:column="13">ctx<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">alg<pos:position pos:line="12" pos:column="21"/></name></name></expr>)<pos:position pos:line="12" pos:column="22"/></condition> <block pos:line="12" pos:column="23">{
    <case pos:line="13" pos:column="5">case <expr><name pos:line="13" pos:column="10">ALG_APSHA<pos:position pos:line="13" pos:column="19"/></name></expr>:<pos:position pos:line="13" pos:column="20"/></case>
        <comment type="block" pos:line="14" pos:column="9">/* XXX out &gt;= 28 + strlen(sha1) chars - fixed len SHA */</comment>
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">apr_sha1_base64<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><name pos:line="15" pos:column="25">pw<pos:position pos:line="15" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="15" pos:column="29">strlen<pos:position pos:line="15" pos:column="35"/></name><argument_list pos:line="15" pos:column="35">(<argument><expr><name pos:line="15" pos:column="36">pw<pos:position pos:line="15" pos:column="38"/></name></expr></argument>)<pos:position pos:line="15" pos:column="39"/></argument_list></call></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="41">ctx<pos:position pos:line="15" pos:column="44"/></name><operator pos:line="15" pos:column="44">-&gt;<pos:position pos:line="15" pos:column="49"/></operator><name pos:line="15" pos:column="46">out<pos:position pos:line="15" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="51"/></expr_stmt>
        <break pos:line="16" pos:column="9">break;<pos:position pos:line="16" pos:column="15"/></break>

    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">ALG_APMD5<pos:position pos:line="18" pos:column="19"/></name></expr>:<pos:position pos:line="18" pos:column="20"/></case>
        <expr_stmt><expr><name pos:line="19" pos:column="9">ret<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">=<pos:position pos:line="19" pos:column="14"/></operator> <call><name pos:line="19" pos:column="15">generate_salt<pos:position pos:line="19" pos:column="28"/></name><argument_list pos:line="19" pos:column="28">(<argument><expr><name pos:line="19" pos:column="29">salt<pos:position pos:line="19" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="19" pos:column="35">8<pos:position pos:line="19" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="19" pos:column="38">&amp;<pos:position pos:line="19" pos:column="43"/></operator><name><name pos:line="19" pos:column="39">ctx<pos:position pos:line="19" pos:column="42"/></name><operator pos:line="19" pos:column="42">-&gt;<pos:position pos:line="19" pos:column="47"/></operator><name pos:line="19" pos:column="44">errstr<pos:position pos:line="19" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="52">ctx<pos:position pos:line="19" pos:column="55"/></name><operator pos:line="19" pos:column="55">-&gt;<pos:position pos:line="19" pos:column="60"/></operator><name pos:line="19" pos:column="57">pool<pos:position pos:line="19" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="63"/></expr_stmt>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">ret<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">!=<pos:position pos:line="20" pos:column="19"/></operator> <literal type="number" pos:line="20" pos:column="20">0<pos:position pos:line="20" pos:column="21"/></literal></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22"> <block pos:line="20" pos:column="23">{
            <expr_stmt><expr><name pos:line="21" pos:column="13">ret<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">ERR_GENERAL<pos:position pos:line="21" pos:column="30"/></name></expr>;<pos:position pos:line="21" pos:column="31"/></expr_stmt>
            <break pos:line="22" pos:column="13">break;<pos:position pos:line="22" pos:column="19"/></break>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="24" pos:column="9">rv<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">apr_md5_encode<pos:position pos:line="24" pos:column="28"/></name><argument_list pos:line="24" pos:column="28">(<argument><expr><name pos:line="24" pos:column="29">pw<pos:position pos:line="24" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="33">salt<pos:position pos:line="24" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="39">ctx<pos:position pos:line="24" pos:column="42"/></name><operator pos:line="24" pos:column="42">-&gt;<pos:position pos:line="24" pos:column="47"/></operator><name pos:line="24" pos:column="44">out<pos:position pos:line="24" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="24" pos:column="49">ctx<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">-&gt;<pos:position pos:line="24" pos:column="57"/></operator><name pos:line="24" pos:column="54">out_len<pos:position pos:line="24" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">rv<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">!=<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">APR_SUCCESS<pos:position pos:line="25" pos:column="30"/></name></expr>)<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31"> <block pos:line="25" pos:column="32">{
            <expr_stmt><expr><name><name pos:line="26" pos:column="13">ctx<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">-&gt;<pos:position pos:line="26" pos:column="21"/></operator><name pos:line="26" pos:column="18">errstr<pos:position pos:line="26" pos:column="24"/></name></name> <operator pos:line="26" pos:column="25">=<pos:position pos:line="26" pos:column="26"/></operator> <call><name pos:line="26" pos:column="27">apr_psprintf<pos:position pos:line="26" pos:column="39"/></name><argument_list pos:line="26" pos:column="39">(<argument><expr><name><name pos:line="26" pos:column="40">ctx<pos:position pos:line="26" pos:column="43"/></name><operator pos:line="26" pos:column="43">-&gt;<pos:position pos:line="26" pos:column="48"/></operator><name pos:line="26" pos:column="45">pool<pos:position pos:line="26" pos:column="49"/></name></name></expr></argument>,
                                       <argument><expr><literal type="string" pos:line="27" pos:column="40">"could not encode password: %pm"<pos:position pos:line="27" pos:column="72"/></literal></expr></argument>, <argument><expr><operator pos:line="27" pos:column="74">&amp;<pos:position pos:line="27" pos:column="79"/></operator><name pos:line="27" pos:column="75">rv<pos:position pos:line="27" pos:column="77"/></name></expr></argument>)<pos:position pos:line="27" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><name pos:line="28" pos:column="13">ret<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">=<pos:position pos:line="28" pos:column="18"/></operator> <name pos:line="28" pos:column="19">ERR_GENERAL<pos:position pos:line="28" pos:column="30"/></name></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
        <break pos:line="30" pos:column="9">break;<pos:position pos:line="30" pos:column="15"/></break>

<cpp:if pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">if<pos:position pos:line="32" pos:column="4"/></cpp:directive> <expr><name pos:line="32" pos:column="5">CRYPT_ALGO_SUPPORTED<pos:position pos:line="32" pos:column="25"/></name></expr></cpp:if>
    <case pos:line="33" pos:column="5">case <expr><name pos:line="33" pos:column="10">ALG_CRYPT<pos:position pos:line="33" pos:column="19"/></name></expr>:<pos:position pos:line="33" pos:column="20"/></case>
        <expr_stmt><expr><name pos:line="34" pos:column="9">ret<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <call><name pos:line="34" pos:column="15">generate_salt<pos:position pos:line="34" pos:column="28"/></name><argument_list pos:line="34" pos:column="28">(<argument><expr><name pos:line="34" pos:column="29">salt<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="34" pos:column="35">8<pos:position pos:line="34" pos:column="36"/></literal></expr></argument>, <argument><expr><operator pos:line="34" pos:column="38">&amp;<pos:position pos:line="34" pos:column="43"/></operator><name><name pos:line="34" pos:column="39">ctx<pos:position pos:line="34" pos:column="42"/></name><operator pos:line="34" pos:column="42">-&gt;<pos:position pos:line="34" pos:column="47"/></operator><name pos:line="34" pos:column="44">errstr<pos:position pos:line="34" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="52">ctx<pos:position pos:line="34" pos:column="55"/></name><operator pos:line="34" pos:column="55">-&gt;<pos:position pos:line="34" pos:column="60"/></operator><name pos:line="34" pos:column="57">pool<pos:position pos:line="34" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="63"/></expr_stmt>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name pos:line="35" pos:column="13">ret<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">!=<pos:position pos:line="35" pos:column="19"/></operator> <literal type="number" pos:line="35" pos:column="20">0<pos:position pos:line="35" pos:column="21"/></literal></expr>)<pos:position pos:line="35" pos:column="22"/></condition><then pos:line="35" pos:column="22">
            <block type="pseudo"><break pos:line="36" pos:column="13">break;<pos:position pos:line="36" pos:column="19"/></break></block></then></if>
        <expr_stmt><expr><name pos:line="37" pos:column="9">cbuf<pos:position pos:line="37" pos:column="13"/></name> <operator pos:line="37" pos:column="14">=<pos:position pos:line="37" pos:column="15"/></operator> <call><name pos:line="37" pos:column="16">crypt<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><name pos:line="37" pos:column="22">pw<pos:position pos:line="37" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="26">salt<pos:position pos:line="37" pos:column="30"/></name></expr></argument>)<pos:position pos:line="37" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="32"/></expr_stmt>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">cbuf<pos:position pos:line="38" pos:column="17"/></name> <operator pos:line="38" pos:column="18">==<pos:position pos:line="38" pos:column="20"/></operator> <name pos:line="38" pos:column="21">NULL<pos:position pos:line="38" pos:column="25"/></name></expr>)<pos:position pos:line="38" pos:column="26"/></condition><then pos:line="38" pos:column="26"> <block pos:line="38" pos:column="27">{
            <expr_stmt><expr><name pos:line="39" pos:column="13">rv<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <call><name pos:line="39" pos:column="18">APR_FROM_OS_ERROR<pos:position pos:line="39" pos:column="35"/></name><argument_list pos:line="39" pos:column="35">(<argument><expr><name pos:line="39" pos:column="36">errno<pos:position pos:line="39" pos:column="41"/></name></expr></argument>)<pos:position pos:line="39" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="40" pos:column="13">ctx<pos:position pos:line="40" pos:column="16"/></name><operator pos:line="40" pos:column="16">-&gt;<pos:position pos:line="40" pos:column="21"/></operator><name pos:line="40" pos:column="18">errstr<pos:position pos:line="40" pos:column="24"/></name></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <call><name pos:line="40" pos:column="27">apr_psprintf<pos:position pos:line="40" pos:column="39"/></name><argument_list pos:line="40" pos:column="39">(<argument><expr><name><name pos:line="40" pos:column="40">ctx<pos:position pos:line="40" pos:column="43"/></name><operator pos:line="40" pos:column="43">-&gt;<pos:position pos:line="40" pos:column="48"/></operator><name pos:line="40" pos:column="45">pool<pos:position pos:line="40" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="51">"crypt() failed: %pm"<pos:position pos:line="40" pos:column="72"/></literal></expr></argument>, <argument><expr><operator pos:line="40" pos:column="74">&amp;<pos:position pos:line="40" pos:column="79"/></operator><name pos:line="40" pos:column="75">rv<pos:position pos:line="40" pos:column="77"/></name></expr></argument>)<pos:position pos:line="40" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="79"/></expr_stmt>
            <expr_stmt><expr><name pos:line="41" pos:column="13">ret<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">ERR_PWMISMATCH<pos:position pos:line="41" pos:column="33"/></name></expr>;<pos:position pos:line="41" pos:column="34"/></expr_stmt>
            <break pos:line="42" pos:column="13">break;<pos:position pos:line="42" pos:column="19"/></break>
        }<pos:position pos:line="43" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="45" pos:column="9">apr_cpystrn<pos:position pos:line="45" pos:column="20"/></name><argument_list pos:line="45" pos:column="20">(<argument><expr><name><name pos:line="45" pos:column="21">ctx<pos:position pos:line="45" pos:column="24"/></name><operator pos:line="45" pos:column="24">-&gt;<pos:position pos:line="45" pos:column="29"/></operator><name pos:line="45" pos:column="26">out<pos:position pos:line="45" pos:column="29"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="31">cbuf<pos:position pos:line="45" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="37">ctx<pos:position pos:line="45" pos:column="40"/></name><operator pos:line="45" pos:column="40">-&gt;<pos:position pos:line="45" pos:column="45"/></operator><name pos:line="45" pos:column="42">out_len<pos:position pos:line="45" pos:column="49"/></name></name> <operator pos:line="45" pos:column="50">-<pos:position pos:line="45" pos:column="51"/></operator> <literal type="number" pos:line="45" pos:column="52">1<pos:position pos:line="45" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="55"/></expr_stmt>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><call><name pos:line="46" pos:column="13">strlen<pos:position pos:line="46" pos:column="19"/></name><argument_list pos:line="46" pos:column="19">(<argument><expr><name pos:line="46" pos:column="20">pw<pos:position pos:line="46" pos:column="22"/></name></expr></argument>)<pos:position pos:line="46" pos:column="23"/></argument_list></call> <operator pos:line="46" pos:column="24">&gt;<pos:position pos:line="46" pos:column="28"/></operator> <literal type="number" pos:line="46" pos:column="26">8<pos:position pos:line="46" pos:column="27"/></literal></expr>)<pos:position pos:line="46" pos:column="28"/></condition><then pos:line="46" pos:column="28"> <block pos:line="46" pos:column="29">{
            <decl_stmt><decl><type><name pos:line="47" pos:column="13">char<pos:position pos:line="47" pos:column="17"/></name> <modifier pos:line="47" pos:column="18">*<pos:position pos:line="47" pos:column="19"/></modifier></type><name pos:line="47" pos:column="19">truncpw<pos:position pos:line="47" pos:column="26"/></name> <init pos:line="47" pos:column="27">= <expr><call><name pos:line="47" pos:column="29">apr_pstrdup<pos:position pos:line="47" pos:column="40"/></name><argument_list pos:line="47" pos:column="40">(<argument><expr><name><name pos:line="47" pos:column="41">ctx<pos:position pos:line="47" pos:column="44"/></name><operator pos:line="47" pos:column="44">-&gt;<pos:position pos:line="47" pos:column="49"/></operator><name pos:line="47" pos:column="46">pool<pos:position pos:line="47" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="52">pw<pos:position pos:line="47" pos:column="54"/></name></expr></argument>)<pos:position pos:line="47" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="47" pos:column="56"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="48" pos:column="13">truncpw<pos:position pos:line="48" pos:column="20"/></name><index pos:line="48" pos:column="20">[<expr><literal type="number" pos:line="48" pos:column="21">8<pos:position pos:line="48" pos:column="22"/></literal></expr>]<pos:position pos:line="48" pos:column="23"/></index></name> <operator pos:line="48" pos:column="24">=<pos:position pos:line="48" pos:column="25"/></operator> <literal type="char" pos:line="48" pos:column="26">'\0'<pos:position pos:line="48" pos:column="30"/></literal></expr>;<pos:position pos:line="48" pos:column="31"/></expr_stmt>
            <if pos:line="49" pos:column="13">if <condition pos:line="49" pos:column="16">(<expr><operator pos:line="49" pos:column="17">!<pos:position pos:line="49" pos:column="18"/></operator><call><name pos:line="49" pos:column="18">strcmp<pos:position pos:line="49" pos:column="24"/></name><argument_list pos:line="49" pos:column="24">(<argument><expr><name><name pos:line="49" pos:column="25">ctx<pos:position pos:line="49" pos:column="28"/></name><operator pos:line="49" pos:column="28">-&gt;<pos:position pos:line="49" pos:column="33"/></operator><name pos:line="49" pos:column="30">out<pos:position pos:line="49" pos:column="33"/></name></name></expr></argument>, <argument><expr><call><name pos:line="49" pos:column="35">crypt<pos:position pos:line="49" pos:column="40"/></name><argument_list pos:line="49" pos:column="40">(<argument><expr><name pos:line="49" pos:column="41">truncpw<pos:position pos:line="49" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="50">salt<pos:position pos:line="49" pos:column="54"/></name></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="49" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="57"/></condition><then pos:line="49" pos:column="57"> <block pos:line="49" pos:column="58">{
                <expr_stmt><expr><name><name pos:line="50" pos:column="17">ctx<pos:position pos:line="50" pos:column="20"/></name><operator pos:line="50" pos:column="20">-&gt;<pos:position pos:line="50" pos:column="25"/></operator><name pos:line="50" pos:column="22">errstr<pos:position pos:line="50" pos:column="28"/></name></name> <operator pos:line="50" pos:column="29">=<pos:position pos:line="50" pos:column="30"/></operator> <call><name pos:line="50" pos:column="31">apr_psprintf<pos:position pos:line="50" pos:column="43"/></name><argument_list pos:line="50" pos:column="43">(<argument><expr><name><name pos:line="50" pos:column="44">ctx<pos:position pos:line="50" pos:column="47"/></name><operator pos:line="50" pos:column="47">-&gt;<pos:position pos:line="50" pos:column="52"/></operator><name pos:line="50" pos:column="49">pool<pos:position pos:line="50" pos:column="53"/></name></name></expr></argument>,
                                           <argument><expr><literal type="string" pos:line="51" pos:column="44">"Warning: Password truncated to 8 "<pos:position pos:line="51" pos:column="79"/></literal>
                                           <literal type="string" pos:line="52" pos:column="44">"characters by CRYPT algorithm."<pos:position pos:line="52" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="78"/></expr_stmt>
            }<pos:position pos:line="53" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">memset<pos:position pos:line="54" pos:column="19"/></name><argument_list pos:line="54" pos:column="19">(<argument><expr><name pos:line="54" pos:column="20">truncpw<pos:position pos:line="54" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="54" pos:column="29">'\0'<pos:position pos:line="54" pos:column="33"/></literal></expr></argument>, <argument><expr><call><name pos:line="54" pos:column="35">strlen<pos:position pos:line="54" pos:column="41"/></name><argument_list pos:line="54" pos:column="41">(<argument><expr><name pos:line="54" pos:column="42">pw<pos:position pos:line="54" pos:column="44"/></name></expr></argument>)<pos:position pos:line="54" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="54" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>
        <break pos:line="56" pos:column="9">break;<pos:position pos:line="56" pos:column="15"/></break>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="57" pos:column="8">/* CRYPT_ALGO_SUPPORTED */</comment>

<cpp:if pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">if<pos:position pos:line="59" pos:column="4"/></cpp:directive> <expr><name pos:line="59" pos:column="5">BCRYPT_ALGO_SUPPORTED<pos:position pos:line="59" pos:column="26"/></name></expr></cpp:if>
    <case pos:line="60" pos:column="5">case <expr><name pos:line="60" pos:column="10">ALG_BCRYPT<pos:position pos:line="60" pos:column="20"/></name></expr>:<pos:position pos:line="60" pos:column="21"/></case>
        <expr_stmt><expr><name pos:line="61" pos:column="9">rv<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <call><name pos:line="61" pos:column="14">apr_generate_random_bytes<pos:position pos:line="61" pos:column="39"/></name><argument_list pos:line="61" pos:column="39">(<argument><expr><operator pos:line="61" pos:column="40">(<pos:position pos:line="61" pos:column="41"/></operator><name pos:line="61" pos:column="41">unsigned<pos:position pos:line="61" pos:column="49"/></name> <name pos:line="61" pos:column="50">char<pos:position pos:line="61" pos:column="54"/></name><operator pos:line="61" pos:column="54">*<pos:position pos:line="61" pos:column="55"/></operator><operator pos:line="61" pos:column="55">)<pos:position pos:line="61" pos:column="56"/></operator><name pos:line="61" pos:column="56">salt<pos:position pos:line="61" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="62">16<pos:position pos:line="61" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="61" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="66"/></expr_stmt>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">rv<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">!=<pos:position pos:line="62" pos:column="18"/></operator> <name pos:line="62" pos:column="19">APR_SUCCESS<pos:position pos:line="62" pos:column="30"/></name></expr>)<pos:position pos:line="62" pos:column="31"/></condition><then pos:line="62" pos:column="31"> <block pos:line="62" pos:column="32">{
            <expr_stmt><expr><name><name pos:line="63" pos:column="13">ctx<pos:position pos:line="63" pos:column="16"/></name><operator pos:line="63" pos:column="16">-&gt;<pos:position pos:line="63" pos:column="21"/></operator><name pos:line="63" pos:column="18">errstr<pos:position pos:line="63" pos:column="24"/></name></name> <operator pos:line="63" pos:column="25">=<pos:position pos:line="63" pos:column="26"/></operator> <call><name pos:line="63" pos:column="27">apr_psprintf<pos:position pos:line="63" pos:column="39"/></name><argument_list pos:line="63" pos:column="39">(<argument><expr><name><name pos:line="63" pos:column="40">ctx<pos:position pos:line="63" pos:column="43"/></name><operator pos:line="63" pos:column="43">-&gt;<pos:position pos:line="63" pos:column="48"/></operator><name pos:line="63" pos:column="45">pool<pos:position pos:line="63" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="63" pos:column="51">"Unable to generate random "<pos:position pos:line="63" pos:column="79"/></literal>
                                       <literal type="string" pos:line="64" pos:column="40">"bytes: %pm"<pos:position pos:line="64" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="64" pos:column="54">&amp;<pos:position pos:line="64" pos:column="59"/></operator><name pos:line="64" pos:column="55">rv<pos:position pos:line="64" pos:column="57"/></name></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt>
            <expr_stmt><expr><name pos:line="65" pos:column="13">ret<pos:position pos:line="65" pos:column="16"/></name> <operator pos:line="65" pos:column="17">=<pos:position pos:line="65" pos:column="18"/></operator> <name pos:line="65" pos:column="19">ERR_RANDOM<pos:position pos:line="65" pos:column="29"/></name></expr>;<pos:position pos:line="65" pos:column="30"/></expr_stmt>
            <break pos:line="66" pos:column="13">break;<pos:position pos:line="66" pos:column="19"/></break>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if>

        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name><name pos:line="69" pos:column="13">ctx<pos:position pos:line="69" pos:column="16"/></name><operator pos:line="69" pos:column="16">-&gt;<pos:position pos:line="69" pos:column="21"/></operator><name pos:line="69" pos:column="18">cost<pos:position pos:line="69" pos:column="22"/></name></name> <operator pos:line="69" pos:column="23">==<pos:position pos:line="69" pos:column="25"/></operator> <literal type="number" pos:line="69" pos:column="26">0<pos:position pos:line="69" pos:column="27"/></literal></expr>)<pos:position pos:line="69" pos:column="28"/></condition><then pos:line="69" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="70" pos:column="13">ctx<pos:position pos:line="70" pos:column="16"/></name><operator pos:line="70" pos:column="16">-&gt;<pos:position pos:line="70" pos:column="21"/></operator><name pos:line="70" pos:column="18">cost<pos:position pos:line="70" pos:column="22"/></name></name> <operator pos:line="70" pos:column="23">=<pos:position pos:line="70" pos:column="24"/></operator> <name pos:line="70" pos:column="25">BCRYPT_DEFAULT_COST<pos:position pos:line="70" pos:column="44"/></name></expr>;<pos:position pos:line="70" pos:column="45"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="71" pos:column="9">rv<pos:position pos:line="71" pos:column="11"/></name> <operator pos:line="71" pos:column="12">=<pos:position pos:line="71" pos:column="13"/></operator> <call><name pos:line="71" pos:column="14">apr_bcrypt_encode<pos:position pos:line="71" pos:column="31"/></name><argument_list pos:line="71" pos:column="31">(<argument><expr><name pos:line="71" pos:column="32">pw<pos:position pos:line="71" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="71" pos:column="36">ctx<pos:position pos:line="71" pos:column="39"/></name><operator pos:line="71" pos:column="39">-&gt;<pos:position pos:line="71" pos:column="44"/></operator><name pos:line="71" pos:column="41">cost<pos:position pos:line="71" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="47">(<pos:position pos:line="71" pos:column="48"/></operator><name pos:line="71" pos:column="48">unsigned<pos:position pos:line="71" pos:column="56"/></name> <name pos:line="71" pos:column="57">char<pos:position pos:line="71" pos:column="61"/></name><operator pos:line="71" pos:column="61">*<pos:position pos:line="71" pos:column="62"/></operator><operator pos:line="71" pos:column="62">)<pos:position pos:line="71" pos:column="63"/></operator><name pos:line="71" pos:column="63">salt<pos:position pos:line="71" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="69">16<pos:position pos:line="71" pos:column="71"/></literal></expr></argument>,
                               <argument><expr><name><name pos:line="72" pos:column="32">ctx<pos:position pos:line="72" pos:column="35"/></name><operator pos:line="72" pos:column="35">-&gt;<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="37">out<pos:position pos:line="72" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="72" pos:column="42">ctx<pos:position pos:line="72" pos:column="45"/></name><operator pos:line="72" pos:column="45">-&gt;<pos:position pos:line="72" pos:column="50"/></operator><name pos:line="72" pos:column="47">out_len<pos:position pos:line="72" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="56"/></expr_stmt>
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">rv<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">!=<pos:position pos:line="73" pos:column="18"/></operator> <name pos:line="73" pos:column="19">APR_SUCCESS<pos:position pos:line="73" pos:column="30"/></name></expr>)<pos:position pos:line="73" pos:column="31"/></condition><then pos:line="73" pos:column="31"> <block pos:line="73" pos:column="32">{
            <expr_stmt><expr><name><name pos:line="74" pos:column="13">ctx<pos:position pos:line="74" pos:column="16"/></name><operator pos:line="74" pos:column="16">-&gt;<pos:position pos:line="74" pos:column="21"/></operator><name pos:line="74" pos:column="18">errstr<pos:position pos:line="74" pos:column="24"/></name></name> <operator pos:line="74" pos:column="25">=<pos:position pos:line="74" pos:column="26"/></operator> <call><name pos:line="74" pos:column="27">apr_psprintf<pos:position pos:line="74" pos:column="39"/></name><argument_list pos:line="74" pos:column="39">(<argument><expr><name><name pos:line="74" pos:column="40">ctx<pos:position pos:line="74" pos:column="43"/></name><operator pos:line="74" pos:column="43">-&gt;<pos:position pos:line="74" pos:column="48"/></operator><name pos:line="74" pos:column="45">pool<pos:position pos:line="74" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="51">"Unable to encode with "<pos:position pos:line="74" pos:column="75"/></literal>
                                       <literal type="string" pos:line="75" pos:column="40">"bcrypt: %pm"<pos:position pos:line="75" pos:column="53"/></literal></expr></argument>, <argument><expr><operator pos:line="75" pos:column="55">&amp;<pos:position pos:line="75" pos:column="60"/></operator><name pos:line="75" pos:column="56">rv<pos:position pos:line="75" pos:column="58"/></name></expr></argument>)<pos:position pos:line="75" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><name pos:line="76" pos:column="13">ret<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">=<pos:position pos:line="76" pos:column="18"/></operator> <name pos:line="76" pos:column="19">ERR_PWMISMATCH<pos:position pos:line="76" pos:column="33"/></name></expr>;<pos:position pos:line="76" pos:column="34"/></expr_stmt>
            <break pos:line="77" pos:column="13">break;<pos:position pos:line="77" pos:column="19"/></break>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if>
        <break pos:line="79" pos:column="9">break;<pos:position pos:line="79" pos:column="15"/></break>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="80" pos:column="8">/* BCRYPT_ALGO_SUPPORTED */</comment>

    <default pos:line="82" pos:column="5">default:<pos:position pos:line="82" pos:column="13"/></default>
        <expr_stmt><expr><name><name pos:line="83" pos:column="9">ctx<pos:position pos:line="83" pos:column="12"/></name><operator pos:line="83" pos:column="12">-&gt;<pos:position pos:line="83" pos:column="17"/></operator><name pos:line="83" pos:column="14">errstr<pos:position pos:line="83" pos:column="20"/></name></name> <operator pos:line="83" pos:column="21">=<pos:position pos:line="83" pos:column="22"/></operator> <call><name pos:line="83" pos:column="23">apr_psprintf<pos:position pos:line="83" pos:column="35"/></name><argument_list pos:line="83" pos:column="35">(<argument><expr><name><name pos:line="83" pos:column="36">ctx<pos:position pos:line="83" pos:column="39"/></name><operator pos:line="83" pos:column="39">-&gt;<pos:position pos:line="83" pos:column="44"/></operator><name pos:line="83" pos:column="41">pool<pos:position pos:line="83" pos:column="45"/></name></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="84" pos:column="35">"mk_password_hash(): unsupported algorithm %d"<pos:position pos:line="84" pos:column="81"/></literal></expr></argument>,
                                  <argument><expr><name><name pos:line="85" pos:column="35">ctx<pos:position pos:line="85" pos:column="38"/></name><operator pos:line="85" pos:column="38">-&gt;<pos:position pos:line="85" pos:column="43"/></operator><name pos:line="85" pos:column="40">alg<pos:position pos:line="85" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="86" pos:column="9">ret<pos:position pos:line="86" pos:column="12"/></name> <operator pos:line="86" pos:column="13">=<pos:position pos:line="86" pos:column="14"/></operator> <name pos:line="86" pos:column="15">ERR_GENERAL<pos:position pos:line="86" pos:column="26"/></name></expr>;<pos:position pos:line="86" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="87" pos:column="6"/></block></switch>
    <expr_stmt><expr><call><name pos:line="88" pos:column="5">memset<pos:position pos:line="88" pos:column="11"/></name><argument_list pos:line="88" pos:column="11">(<argument><expr><name pos:line="88" pos:column="12">pw<pos:position pos:line="88" pos:column="14"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="88" pos:column="16">'\0'<pos:position pos:line="88" pos:column="20"/></literal></expr></argument>, <argument><expr><call><name pos:line="88" pos:column="22">strlen<pos:position pos:line="88" pos:column="28"/></name><argument_list pos:line="88" pos:column="28">(<argument><expr><name pos:line="88" pos:column="29">pw<pos:position pos:line="88" pos:column="31"/></name></expr></argument>)<pos:position pos:line="88" pos:column="32"/></argument_list></call></expr></argument>)<pos:position pos:line="88" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="34"/></expr_stmt>
    <return pos:line="89" pos:column="5">return <expr><name pos:line="89" pos:column="12">ret<pos:position pos:line="89" pos:column="15"/></name></expr>;<pos:position pos:line="89" pos:column="16"/></return>
}<pos:position pos:line="90" pos:column="2"/></block></function></unit>
