<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3201_httpd-2.2.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">utf8_to_unicode_path<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">apr_wchar_t<pos:position pos:line="1" pos:column="46"/></name><modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type> <name pos:line="1" pos:column="48">retstr<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="56">apr_size_t<pos:position pos:line="1" pos:column="66"/></name></type> <name pos:line="1" pos:column="67">retlen<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>, 
                                  <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name><modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type> <name pos:line="2" pos:column="47">srcstr<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* TODO: The computations could preconvert the string to determine
     * the true size of the retstr, but that's a memory over speed
     * tradeoff that isn't appropriate this early in development.
     *
     * Allocate the maximum string length based on leading 4 
     * characters of \\?\ (allowing nearly unlimited path lengths) 
     * plus the trailing null, then transform /'s into \\'s since
     * the \\?\ form doesn't allow '/' path seperators.
     *
     * Note that the \\?\ form only works for local drive paths, and
     * \\?\UNC\ is needed UNC paths.
     */</comment>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">apr_size_t<pos:position pos:line="16" pos:column="15"/></name></type> <name pos:line="16" pos:column="16">srcremains<pos:position pos:line="16" pos:column="26"/></name> <init pos:line="16" pos:column="27">= <expr><call><name pos:line="16" pos:column="29">strlen<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">srcstr<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call> <operator pos:line="16" pos:column="44">+<pos:position pos:line="16" pos:column="45"/></operator> <literal type="number" pos:line="16" pos:column="46">1<pos:position pos:line="16" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">apr_wchar_t<pos:position pos:line="17" pos:column="16"/></name> <modifier pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></modifier></type><name pos:line="17" pos:column="18">t<pos:position pos:line="17" pos:column="19"/></name> <init pos:line="17" pos:column="20">= <expr><name pos:line="17" pos:column="22">retstr<pos:position pos:line="17" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">apr_status_t<pos:position pos:line="18" pos:column="17"/></name></type> <name pos:line="18" pos:column="18">rv<pos:position pos:line="18" pos:column="20"/></name></decl>;<pos:position pos:line="18" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* This is correct, we don't twist the filename if it is will
     * definately be shorter than MAX_PATH.  It merits some 
     * performance testing to see if this has any effect, but there
     * seem to be applications that get confused by the resulting
     * Unicode \\?\ style file names, especially if they use argv[0]
     * or call the Win32 API functions such as GetModuleName, etc.
     * Not every application is prepared to handle such names.
     *
     * Note that a utf-8 name can never result in more wide chars
     * than the original number of utf-8 narrow chars.
     */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name pos:line="31" pos:column="9">srcremains<pos:position pos:line="31" pos:column="19"/></name> <operator pos:line="31" pos:column="20">&gt;<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="22">MAX_PATH<pos:position pos:line="31" pos:column="30"/></name></expr>)<pos:position pos:line="31" pos:column="31"/></condition><then pos:line="31" pos:column="31"> <block pos:line="31" pos:column="32">{
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">srcstr<pos:position pos:line="32" pos:column="19"/></name><index pos:line="32" pos:column="19">[<expr><literal type="number" pos:line="32" pos:column="20">1<pos:position pos:line="32" pos:column="21"/></literal></expr>]<pos:position pos:line="32" pos:column="22"/></index></name> <operator pos:line="32" pos:column="23">==<pos:position pos:line="32" pos:column="25"/></operator> <literal type="char" pos:line="32" pos:column="26">':'<pos:position pos:line="32" pos:column="29"/></literal> <operator pos:line="32" pos:column="30">&amp;&amp;<pos:position pos:line="32" pos:column="40"/></operator> <operator pos:line="32" pos:column="33">(<pos:position pos:line="32" pos:column="34"/></operator><name><name pos:line="32" pos:column="34">srcstr<pos:position pos:line="32" pos:column="40"/></name><index pos:line="32" pos:column="40">[<expr><literal type="number" pos:line="32" pos:column="41">2<pos:position pos:line="32" pos:column="42"/></literal></expr>]<pos:position pos:line="32" pos:column="43"/></index></name> <operator pos:line="32" pos:column="44">==<pos:position pos:line="32" pos:column="46"/></operator> <literal type="char" pos:line="32" pos:column="47">'/'<pos:position pos:line="32" pos:column="50"/></literal> <operator pos:line="32" pos:column="51">||<pos:position pos:line="32" pos:column="53"/></operator> <name><name pos:line="32" pos:column="54">srcstr<pos:position pos:line="32" pos:column="60"/></name><index pos:line="32" pos:column="60">[<expr><literal type="number" pos:line="32" pos:column="61">2<pos:position pos:line="32" pos:column="62"/></literal></expr>]<pos:position pos:line="32" pos:column="63"/></index></name> <operator pos:line="32" pos:column="64">==<pos:position pos:line="32" pos:column="66"/></operator> <literal type="char" pos:line="32" pos:column="67">'\\'<pos:position pos:line="32" pos:column="71"/></literal><operator pos:line="32" pos:column="71">)<pos:position pos:line="32" pos:column="72"/></operator></expr>)<pos:position pos:line="32" pos:column="73"/></condition><then pos:line="32" pos:column="73"> <block pos:line="32" pos:column="74">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">wcscpy<pos:position pos:line="33" pos:column="19"/></name> <argument_list pos:line="33" pos:column="20">(<argument><expr><name pos:line="33" pos:column="21">retstr<pos:position pos:line="33" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="29">L"\\\\?\\"<pos:position pos:line="33" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name pos:line="34" pos:column="13">retlen<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">-=<pos:position pos:line="34" pos:column="22"/></operator> <literal type="number" pos:line="34" pos:column="23">4<pos:position pos:line="34" pos:column="24"/></literal></expr>;<pos:position pos:line="34" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="35" pos:column="13">t<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">+=<pos:position pos:line="35" pos:column="17"/></operator> <literal type="number" pos:line="35" pos:column="18">4<pos:position pos:line="35" pos:column="19"/></literal></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then>
        <elseif pos:line="37" pos:column="9">else <if pos:line="37" pos:column="14">if <condition pos:line="37" pos:column="17">(<expr><operator pos:line="37" pos:column="18">(<pos:position pos:line="37" pos:column="19"/></operator><name><name pos:line="37" pos:column="19">srcstr<pos:position pos:line="37" pos:column="25"/></name><index pos:line="37" pos:column="25">[<expr><literal type="number" pos:line="37" pos:column="26">0<pos:position pos:line="37" pos:column="27"/></literal></expr>]<pos:position pos:line="37" pos:column="28"/></index></name> <operator pos:line="37" pos:column="29">==<pos:position pos:line="37" pos:column="31"/></operator> <literal type="char" pos:line="37" pos:column="32">'/'<pos:position pos:line="37" pos:column="35"/></literal> <operator pos:line="37" pos:column="36">||<pos:position pos:line="37" pos:column="38"/></operator> <name><name pos:line="37" pos:column="39">srcstr<pos:position pos:line="37" pos:column="45"/></name><index pos:line="37" pos:column="45">[<expr><literal type="number" pos:line="37" pos:column="46">0<pos:position pos:line="37" pos:column="47"/></literal></expr>]<pos:position pos:line="37" pos:column="48"/></index></name> <operator pos:line="37" pos:column="49">==<pos:position pos:line="37" pos:column="51"/></operator> <literal type="char" pos:line="37" pos:column="52">'\\'<pos:position pos:line="37" pos:column="56"/></literal><operator pos:line="37" pos:column="56">)<pos:position pos:line="37" pos:column="57"/></operator>
              <operator pos:line="38" pos:column="15">&amp;&amp;<pos:position pos:line="38" pos:column="25"/></operator> <operator pos:line="38" pos:column="18">(<pos:position pos:line="38" pos:column="19"/></operator><name><name pos:line="38" pos:column="19">srcstr<pos:position pos:line="38" pos:column="25"/></name><index pos:line="38" pos:column="25">[<expr><literal type="number" pos:line="38" pos:column="26">1<pos:position pos:line="38" pos:column="27"/></literal></expr>]<pos:position pos:line="38" pos:column="28"/></index></name> <operator pos:line="38" pos:column="29">==<pos:position pos:line="38" pos:column="31"/></operator> <literal type="char" pos:line="38" pos:column="32">'/'<pos:position pos:line="38" pos:column="35"/></literal> <operator pos:line="38" pos:column="36">||<pos:position pos:line="38" pos:column="38"/></operator> <name><name pos:line="38" pos:column="39">srcstr<pos:position pos:line="38" pos:column="45"/></name><index pos:line="38" pos:column="45">[<expr><literal type="number" pos:line="38" pos:column="46">1<pos:position pos:line="38" pos:column="47"/></literal></expr>]<pos:position pos:line="38" pos:column="48"/></index></name> <operator pos:line="38" pos:column="49">==<pos:position pos:line="38" pos:column="51"/></operator> <literal type="char" pos:line="38" pos:column="52">'\\'<pos:position pos:line="38" pos:column="56"/></literal><operator pos:line="38" pos:column="56">)<pos:position pos:line="38" pos:column="57"/></operator>
              <operator pos:line="39" pos:column="15">&amp;&amp;<pos:position pos:line="39" pos:column="25"/></operator> <operator pos:line="39" pos:column="18">(<pos:position pos:line="39" pos:column="19"/></operator><name><name pos:line="39" pos:column="19">srcstr<pos:position pos:line="39" pos:column="25"/></name><index pos:line="39" pos:column="25">[<expr><literal type="number" pos:line="39" pos:column="26">2<pos:position pos:line="39" pos:column="27"/></literal></expr>]<pos:position pos:line="39" pos:column="28"/></index></name> <operator pos:line="39" pos:column="29">!=<pos:position pos:line="39" pos:column="31"/></operator> <literal type="char" pos:line="39" pos:column="32">'?'<pos:position pos:line="39" pos:column="35"/></literal><operator pos:line="39" pos:column="35">)<pos:position pos:line="39" pos:column="36"/></operator></expr>)<pos:position pos:line="39" pos:column="37"/></condition><then pos:line="39" pos:column="37"> <block pos:line="39" pos:column="38">{
            <comment type="block" pos:line="40" pos:column="13">/* Skip the slashes */</comment>
            <expr_stmt><expr><name pos:line="41" pos:column="13">srcstr<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">+=<pos:position pos:line="41" pos:column="22"/></operator> <literal type="number" pos:line="41" pos:column="23">2<pos:position pos:line="41" pos:column="24"/></literal></expr>;<pos:position pos:line="41" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="42" pos:column="13">srcremains<pos:position pos:line="42" pos:column="23"/></name> <operator pos:line="42" pos:column="24">-=<pos:position pos:line="42" pos:column="26"/></operator> <literal type="number" pos:line="42" pos:column="27">2<pos:position pos:line="42" pos:column="28"/></literal></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">wcscpy<pos:position pos:line="43" pos:column="19"/></name> <argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">retstr<pos:position pos:line="43" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="43" pos:column="29">L"\\\\?\\UNC\\"<pos:position pos:line="43" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="46"/></expr_stmt>
            <expr_stmt><expr><name pos:line="44" pos:column="13">retlen<pos:position pos:line="44" pos:column="19"/></name> <operator pos:line="44" pos:column="20">-=<pos:position pos:line="44" pos:column="22"/></operator> <literal type="number" pos:line="44" pos:column="23">8<pos:position pos:line="44" pos:column="24"/></literal></expr>;<pos:position pos:line="44" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="45" pos:column="13">t<pos:position pos:line="45" pos:column="14"/></name> <operator pos:line="45" pos:column="15">+=<pos:position pos:line="45" pos:column="17"/></operator> <literal type="number" pos:line="45" pos:column="18">8<pos:position pos:line="45" pos:column="19"/></literal></expr>;<pos:position pos:line="45" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">rv<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">=<pos:position pos:line="49" pos:column="13"/></operator> <call><name pos:line="49" pos:column="14">apr_conv_utf8_to_ucs2<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">srcstr<pos:position pos:line="49" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="44">&amp;<pos:position pos:line="49" pos:column="49"/></operator><name pos:line="49" pos:column="45">srcremains<pos:position pos:line="49" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="57">t<pos:position pos:line="49" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="49" pos:column="60">&amp;<pos:position pos:line="49" pos:column="65"/></operator><name pos:line="49" pos:column="61">retlen<pos:position pos:line="49" pos:column="67"/></name></expr></argument>)<pos:position pos:line="49" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="69"/></condition><then pos:line="49" pos:column="69"> <block pos:line="49" pos:column="70">{
        <return pos:line="50" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="50" pos:column="16">(<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="17">rv<pos:position pos:line="50" pos:column="19"/></name> <operator pos:line="50" pos:column="20">==<pos:position pos:line="50" pos:column="22"/></operator> <name pos:line="50" pos:column="23">APR_INCOMPLETE<pos:position pos:line="50" pos:column="37"/></name><operator pos:line="50" pos:column="37">)<pos:position pos:line="50" pos:column="38"/></operator></expr> ?<pos:position pos:line="50" pos:column="40"/></condition><then pos:line="50" pos:column="40"> <expr><name pos:line="50" pos:column="41">APR_EINVAL<pos:position pos:line="50" pos:column="51"/></name></expr> <pos:position pos:line="50" pos:column="52"/></then><else pos:line="50" pos:column="52">: <expr><name pos:line="50" pos:column="54">rv<pos:position pos:line="50" pos:column="56"/></name></expr></else></ternary></expr>;<pos:position pos:line="50" pos:column="57"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">srcremains<pos:position pos:line="52" pos:column="19"/></name></expr>)<pos:position pos:line="52" pos:column="20"/></condition><then pos:line="52" pos:column="20"> <block pos:line="52" pos:column="21">{
        <return pos:line="53" pos:column="9">return <expr><name pos:line="53" pos:column="16">APR_ENAMETOOLONG<pos:position pos:line="53" pos:column="32"/></name></expr>;<pos:position pos:line="53" pos:column="33"/></return>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>
    <for pos:line="55" pos:column="5">for <control pos:line="55" pos:column="9">(<init pos:line="55" pos:column="10">;<pos:position pos:line="55" pos:column="11"/></init> <condition><expr><operator pos:line="55" pos:column="12">*<pos:position pos:line="55" pos:column="13"/></operator><name pos:line="55" pos:column="13">t<pos:position pos:line="55" pos:column="14"/></name></expr>;<pos:position pos:line="55" pos:column="15"/></condition> <incr><expr><operator pos:line="55" pos:column="16">++<pos:position pos:line="55" pos:column="18"/></operator><name pos:line="55" pos:column="18">t<pos:position pos:line="55" pos:column="19"/></name></expr></incr>)<pos:position pos:line="55" pos:column="20"/></control>
        <block type="pseudo"><if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><operator pos:line="56" pos:column="13">*<pos:position pos:line="56" pos:column="14"/></operator><name pos:line="56" pos:column="14">t<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">==<pos:position pos:line="56" pos:column="18"/></operator> <literal type="string" pos:line="56" pos:column="19">L'<pos:position pos:line="56" pos:column="21"/></literal>/'<pos:position pos:line="56" pos:column="23"/></expr>)<pos:position pos:line="56" pos:column="24"/></condition><then pos:line="56" pos:column="24">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="57" pos:column="13">*<pos:position pos:line="57" pos:column="14"/></operator><name pos:line="57" pos:column="14">t<pos:position pos:line="57" pos:column="15"/></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <literal type="string" pos:line="57" pos:column="18">L'<pos:position pos:line="57" pos:column="20"/></literal>\\'<pos:position pos:line="57" pos:column="23"/></expr>;<pos:position pos:line="57" pos:column="24"/></expr_stmt></block></then></if></block></for>
    <return pos:line="58" pos:column="5">return <expr><name pos:line="58" pos:column="12">APR_SUCCESS<pos:position pos:line="58" pos:column="23"/></name></expr>;<pos:position pos:line="58" pos:column="24"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
