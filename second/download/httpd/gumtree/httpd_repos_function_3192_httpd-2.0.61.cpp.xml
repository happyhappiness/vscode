<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3192_httpd-2.0.61.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">free_proc_chain<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name><name pos:line="1" pos:column="29">struct<pos:position pos:line="1" pos:column="35"/></name> <name pos:line="1" pos:column="36">process_chain<pos:position pos:line="1" pos:column="49"/></name></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">procs<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="block" pos:line="3" pos:column="5">/* Dispose of the subprocesses we've spawned off in the course of
     * whatever it was we're cleaning up now.  This may involve killing
     * some of them off...
     */</comment>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">process_chain<pos:position pos:line="7" pos:column="25"/></name></name> <modifier pos:line="7" pos:column="26">*<pos:position pos:line="7" pos:column="27"/></modifier></type><name pos:line="7" pos:column="27">pc<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">need_timeout<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_time_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">timeout_interval<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">procs<pos:position pos:line="11" pos:column="15"/></name></expr>)<pos:position pos:line="11" pos:column="16"/></condition><then pos:line="11" pos:column="16">
        <block type="pseudo"><return pos:line="12" pos:column="9">return;<pos:position pos:line="12" pos:column="16"/></return></block></then></if> <comment type="block" pos:line="12" pos:column="17">/* No work.  Whew! */</comment>

    <comment type="block" pos:line="14" pos:column="5">/* First, check to see if we need to do the SIGTERM, sleep, SIGKILL
     * dance with any of the processes we're cleaning up.  If we've got
     * any kill-on-sight subprocesses, ditch them now as well, so they
     * don't waste any more cycles doing whatever it is that they shouldn't
     * be doing anymore.
     */</comment>

<cpp:ifndef pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">ifndef<pos:position pos:line="21" pos:column="8"/></cpp:directive> <name pos:line="21" pos:column="9">NEED_WAITPID<pos:position pos:line="21" pos:column="21"/></name></cpp:ifndef>
    <comment type="block" pos:line="22" pos:column="5">/* Pick up all defunct processes */</comment>
    <for pos:line="23" pos:column="5">for <control pos:line="23" pos:column="9">(<init><expr><name pos:line="23" pos:column="10">pc<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">procs<pos:position pos:line="23" pos:column="20"/></name></expr>;<pos:position pos:line="23" pos:column="21"/></init> <condition><expr><name pos:line="23" pos:column="22">pc<pos:position pos:line="23" pos:column="24"/></name></expr>;<pos:position pos:line="23" pos:column="25"/></condition> <incr><expr><name pos:line="23" pos:column="26">pc<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">=<pos:position pos:line="23" pos:column="30"/></operator> <name><name pos:line="23" pos:column="31">pc<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">-&gt;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="35">next<pos:position pos:line="23" pos:column="39"/></name></name></expr></incr>)<pos:position pos:line="23" pos:column="40"/></control> <block pos:line="23" pos:column="41">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><call><name pos:line="24" pos:column="13">apr_proc_wait<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name><name pos:line="24" pos:column="27">pc<pos:position pos:line="24" pos:column="29"/></name><operator pos:line="24" pos:column="29">-&gt;<pos:position pos:line="24" pos:column="34"/></operator><name pos:line="24" pos:column="31">proc<pos:position pos:line="24" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="37">NULL<pos:position pos:line="24" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="43">NULL<pos:position pos:line="24" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="49">APR_NOWAIT<pos:position pos:line="24" pos:column="59"/></name></expr></argument>)<pos:position pos:line="24" pos:column="60"/></argument_list></call> <operator pos:line="24" pos:column="61">!=<pos:position pos:line="24" pos:column="63"/></operator> <name pos:line="24" pos:column="64">APR_CHILD_NOTDONE<pos:position pos:line="24" pos:column="81"/></name></expr>)<pos:position pos:line="24" pos:column="82"/></condition><then pos:line="24" pos:column="82">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="25" pos:column="13">pc<pos:position pos:line="25" pos:column="15"/></name><operator pos:line="25" pos:column="15">-&gt;<pos:position pos:line="25" pos:column="20"/></operator><name pos:line="25" pos:column="17">kill_how<pos:position pos:line="25" pos:column="25"/></name></name> <operator pos:line="25" pos:column="26">=<pos:position pos:line="25" pos:column="27"/></operator> <name pos:line="25" pos:column="28">APR_KILL_NEVER<pos:position pos:line="25" pos:column="42"/></name></expr>;<pos:position pos:line="25" pos:column="43"/></expr_stmt></block></then></if>
    }<pos:position pos:line="26" pos:column="6"/></block></for>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="27" pos:column="8">/* !defined(NEED_WAITPID) */</comment>

    <for pos:line="29" pos:column="5">for <control pos:line="29" pos:column="9">(<init><expr><name pos:line="29" pos:column="10">pc<pos:position pos:line="29" pos:column="12"/></name> <operator pos:line="29" pos:column="13">=<pos:position pos:line="29" pos:column="14"/></operator> <name pos:line="29" pos:column="15">procs<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></init> <condition><expr><name pos:line="29" pos:column="22">pc<pos:position pos:line="29" pos:column="24"/></name></expr>;<pos:position pos:line="29" pos:column="25"/></condition> <incr><expr><name pos:line="29" pos:column="26">pc<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">=<pos:position pos:line="29" pos:column="30"/></operator> <name><name pos:line="29" pos:column="31">pc<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">-&gt;<pos:position pos:line="29" pos:column="38"/></operator><name pos:line="29" pos:column="35">next<pos:position pos:line="29" pos:column="39"/></name></name></expr></incr>)<pos:position pos:line="29" pos:column="40"/></control> <block pos:line="29" pos:column="41">{
<cpp:ifndef pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">ifndef<pos:position pos:line="30" pos:column="8"/></cpp:directive> <name pos:line="30" pos:column="9">WIN32<pos:position pos:line="30" pos:column="14"/></name></cpp:ifndef>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">(<pos:position pos:line="31" pos:column="14"/></operator><name><name pos:line="31" pos:column="14">pc<pos:position pos:line="31" pos:column="16"/></name><operator pos:line="31" pos:column="16">-&gt;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="18">kill_how<pos:position pos:line="31" pos:column="26"/></name></name> <operator pos:line="31" pos:column="27">==<pos:position pos:line="31" pos:column="29"/></operator> <name pos:line="31" pos:column="30">APR_KILL_AFTER_TIMEOUT<pos:position pos:line="31" pos:column="52"/></name><operator pos:line="31" pos:column="52">)<pos:position pos:line="31" pos:column="53"/></operator>
            <operator pos:line="32" pos:column="13">||<pos:position pos:line="32" pos:column="15"/></operator> <operator pos:line="32" pos:column="16">(<pos:position pos:line="32" pos:column="17"/></operator><name><name pos:line="32" pos:column="17">pc<pos:position pos:line="32" pos:column="19"/></name><operator pos:line="32" pos:column="19">-&gt;<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="21">kill_how<pos:position pos:line="32" pos:column="29"/></name></name> <operator pos:line="32" pos:column="30">==<pos:position pos:line="32" pos:column="32"/></operator> <name pos:line="32" pos:column="33">APR_KILL_ONLY_ONCE<pos:position pos:line="32" pos:column="51"/></name><operator pos:line="32" pos:column="51">)<pos:position pos:line="32" pos:column="52"/></operator></expr>)<pos:position pos:line="32" pos:column="53"/></condition><then pos:line="32" pos:column="53"> <block pos:line="32" pos:column="54">{
            <comment type="block" pos:line="33" pos:column="13">/*
             * Subprocess may be dead already.  Only need the timeout if not.
             * Note: apr_proc_kill on Windows is TerminateProcess(), which is
             * similar to a SIGKILL, so always give the process a timeout
             * under Windows before killing it.
             */</comment>
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><call><name pos:line="39" pos:column="17">apr_proc_kill<pos:position pos:line="39" pos:column="30"/></name><argument_list pos:line="39" pos:column="30">(<argument><expr><name><name pos:line="39" pos:column="31">pc<pos:position pos:line="39" pos:column="33"/></name><operator pos:line="39" pos:column="33">-&gt;<pos:position pos:line="39" pos:column="38"/></operator><name pos:line="39" pos:column="35">proc<pos:position pos:line="39" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="39" pos:column="41">SIGTERM<pos:position pos:line="39" pos:column="48"/></name></expr></argument>)<pos:position pos:line="39" pos:column="49"/></argument_list></call> <operator pos:line="39" pos:column="50">==<pos:position pos:line="39" pos:column="52"/></operator> <name pos:line="39" pos:column="53">APR_SUCCESS<pos:position pos:line="39" pos:column="64"/></name></expr>)<pos:position pos:line="39" pos:column="65"/></condition><then pos:line="39" pos:column="65">
                <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="17">need_timeout<pos:position pos:line="40" pos:column="29"/></name> <operator pos:line="40" pos:column="30">=<pos:position pos:line="40" pos:column="31"/></operator> <literal type="number" pos:line="40" pos:column="32">1<pos:position pos:line="40" pos:column="33"/></literal></expr>;<pos:position pos:line="40" pos:column="34"/></expr_stmt></block></then></if>
        }<pos:position pos:line="41" pos:column="10"/></block></then>
        <elseif pos:line="42" pos:column="9">else <if pos:line="42" pos:column="14">if <condition pos:line="42" pos:column="17">(<expr><name><name pos:line="42" pos:column="18">pc<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">-&gt;<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="22">kill_how<pos:position pos:line="42" pos:column="30"/></name></name> <operator pos:line="42" pos:column="31">==<pos:position pos:line="42" pos:column="33"/></operator> <name pos:line="42" pos:column="34">APR_KILL_ALWAYS<pos:position pos:line="42" pos:column="49"/></name></expr>)<pos:position pos:line="42" pos:column="50"/></condition><then pos:line="42" pos:column="50"> <block pos:line="42" pos:column="51">{
<cpp:else pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">else<pos:position pos:line="43" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="43" pos:column="7">/* WIN32 knows only one fast, clean method of killing processes today */</comment>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name><name pos:line="44" pos:column="13">pc<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">kill_how<pos:position pos:line="44" pos:column="25"/></name></name> <operator pos:line="44" pos:column="26">!=<pos:position pos:line="44" pos:column="28"/></operator> <name pos:line="44" pos:column="29">APR_KILL_NEVER<pos:position pos:line="44" pos:column="43"/></name></expr>)<pos:position pos:line="44" pos:column="44"/></condition><then pos:line="44" pos:column="44"> <block pos:line="44" pos:column="45">{
            <expr_stmt><expr><name pos:line="45" pos:column="13">need_timeout<pos:position pos:line="45" pos:column="25"/></name> <operator pos:line="45" pos:column="26">=<pos:position pos:line="45" pos:column="27"/></operator> <literal type="number" pos:line="45" pos:column="28">1<pos:position pos:line="45" pos:column="29"/></literal></expr>;<pos:position pos:line="45" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="46" pos:column="13">pc<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">-&gt;<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="17">kill_how<pos:position pos:line="46" pos:column="25"/></name></name> <operator pos:line="46" pos:column="26">=<pos:position pos:line="46" pos:column="27"/></operator> <name pos:line="46" pos:column="28">APR_KILL_ALWAYS<pos:position pos:line="46" pos:column="43"/></name></expr>;<pos:position pos:line="46" pos:column="44"/></expr_stmt>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">apr_proc_kill<pos:position pos:line="48" pos:column="26"/></name><argument_list pos:line="48" pos:column="26">(<argument><expr><name><name pos:line="48" pos:column="27">pc<pos:position pos:line="48" pos:column="29"/></name><operator pos:line="48" pos:column="29">-&gt;<pos:position pos:line="48" pos:column="34"/></operator><name pos:line="48" pos:column="31">proc<pos:position pos:line="48" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="37">SIGKILL<pos:position pos:line="48" pos:column="44"/></name></expr></argument>)<pos:position pos:line="48" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="52" pos:column="5">/* Sleep only if we have to. The sleep algorithm grows
     * by a factor of two on each iteration. TIMEOUT_INTERVAL
     * is equal to TIMEOUT_USECS / 64.
     */</comment>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">need_timeout<pos:position pos:line="56" pos:column="21"/></name></expr>)<pos:position pos:line="56" pos:column="22"/></condition><then pos:line="56" pos:column="22"> <block pos:line="56" pos:column="23">{
        <expr_stmt><expr><name pos:line="57" pos:column="9">timeout_interval<pos:position pos:line="57" pos:column="25"/></name> <operator pos:line="57" pos:column="26">=<pos:position pos:line="57" pos:column="27"/></operator> <name pos:line="57" pos:column="28">TIMEOUT_INTERVAL<pos:position pos:line="57" pos:column="44"/></name></expr>;<pos:position pos:line="57" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">apr_sleep<pos:position pos:line="58" pos:column="18"/></name><argument_list pos:line="58" pos:column="18">(<argument><expr><name pos:line="58" pos:column="19">timeout_interval<pos:position pos:line="58" pos:column="35"/></name></expr></argument>)<pos:position pos:line="58" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="37"/></expr_stmt>

        <do pos:line="60" pos:column="9">do <block pos:line="60" pos:column="12">{
            <comment type="block" pos:line="61" pos:column="13">/* check the status of the subprocesses */</comment>
            <expr_stmt><expr><name pos:line="62" pos:column="13">need_timeout<pos:position pos:line="62" pos:column="25"/></name> <operator pos:line="62" pos:column="26">=<pos:position pos:line="62" pos:column="27"/></operator> <literal type="number" pos:line="62" pos:column="28">0<pos:position pos:line="62" pos:column="29"/></literal></expr>;<pos:position pos:line="62" pos:column="30"/></expr_stmt>
            <for pos:line="63" pos:column="13">for <control pos:line="63" pos:column="17">(<init><expr><name pos:line="63" pos:column="18">pc<pos:position pos:line="63" pos:column="20"/></name> <operator pos:line="63" pos:column="21">=<pos:position pos:line="63" pos:column="22"/></operator> <name pos:line="63" pos:column="23">procs<pos:position pos:line="63" pos:column="28"/></name></expr>;<pos:position pos:line="63" pos:column="29"/></init> <condition><expr><name pos:line="63" pos:column="30">pc<pos:position pos:line="63" pos:column="32"/></name></expr>;<pos:position pos:line="63" pos:column="33"/></condition> <incr><expr><name pos:line="63" pos:column="34">pc<pos:position pos:line="63" pos:column="36"/></name> <operator pos:line="63" pos:column="37">=<pos:position pos:line="63" pos:column="38"/></operator> <name><name pos:line="63" pos:column="39">pc<pos:position pos:line="63" pos:column="41"/></name><operator pos:line="63" pos:column="41">-&gt;<pos:position pos:line="63" pos:column="46"/></operator><name pos:line="63" pos:column="43">next<pos:position pos:line="63" pos:column="47"/></name></name></expr></incr>)<pos:position pos:line="63" pos:column="48"/></control> <block pos:line="63" pos:column="49">{
                <if pos:line="64" pos:column="17">if <condition pos:line="64" pos:column="20">(<expr><name><name pos:line="64" pos:column="21">pc<pos:position pos:line="64" pos:column="23"/></name><operator pos:line="64" pos:column="23">-&gt;<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="25">kill_how<pos:position pos:line="64" pos:column="33"/></name></name> <operator pos:line="64" pos:column="34">==<pos:position pos:line="64" pos:column="36"/></operator> <name pos:line="64" pos:column="37">APR_KILL_AFTER_TIMEOUT<pos:position pos:line="64" pos:column="59"/></name></expr>)<pos:position pos:line="64" pos:column="60"/></condition><then pos:line="64" pos:column="60"> <block pos:line="64" pos:column="61">{
                    <if pos:line="65" pos:column="21">if <condition pos:line="65" pos:column="24">(<expr><call><name pos:line="65" pos:column="25">apr_proc_wait<pos:position pos:line="65" pos:column="38"/></name><argument_list pos:line="65" pos:column="38">(<argument><expr><name><name pos:line="65" pos:column="39">pc<pos:position pos:line="65" pos:column="41"/></name><operator pos:line="65" pos:column="41">-&gt;<pos:position pos:line="65" pos:column="46"/></operator><name pos:line="65" pos:column="43">proc<pos:position pos:line="65" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="49">NULL<pos:position pos:line="65" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="55">NULL<pos:position pos:line="65" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="61">APR_NOWAIT<pos:position pos:line="65" pos:column="71"/></name></expr></argument>)<pos:position pos:line="65" pos:column="72"/></argument_list></call>
                            <operator pos:line="66" pos:column="29">==<pos:position pos:line="66" pos:column="31"/></operator> <name pos:line="66" pos:column="32">APR_CHILD_NOTDONE<pos:position pos:line="66" pos:column="49"/></name></expr>)<pos:position pos:line="66" pos:column="50"/></condition><then pos:line="66" pos:column="50">
                        <block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="25">need_timeout<pos:position pos:line="67" pos:column="37"/></name> <operator pos:line="67" pos:column="38">=<pos:position pos:line="67" pos:column="39"/></operator> <literal type="number" pos:line="67" pos:column="40">1<pos:position pos:line="67" pos:column="41"/></literal></expr>;<pos:position pos:line="67" pos:column="42"/></expr_stmt></block></then>		<comment type="block" pos:line="67" pos:column="57">/* subprocess is still active */</comment>
                    <else pos:line="68" pos:column="21">else
                        <block type="pseudo"><expr_stmt><expr><name><name pos:line="69" pos:column="25">pc<pos:position pos:line="69" pos:column="27"/></name><operator pos:line="69" pos:column="27">-&gt;<pos:position pos:line="69" pos:column="32"/></operator><name pos:line="69" pos:column="29">kill_how<pos:position pos:line="69" pos:column="37"/></name></name> <operator pos:line="69" pos:column="38">=<pos:position pos:line="69" pos:column="39"/></operator> <name pos:line="69" pos:column="40">APR_KILL_NEVER<pos:position pos:line="69" pos:column="54"/></name></expr>;<pos:position pos:line="69" pos:column="55"/></expr_stmt></block></else></if>	<comment type="block" pos:line="69" pos:column="57">/* subprocess has exited */</comment>
                }<pos:position pos:line="70" pos:column="18"/></block></then></if>
            }<pos:position pos:line="71" pos:column="14"/></block></for>
            <if pos:line="72" pos:column="13">if <condition pos:line="72" pos:column="16">(<expr><name pos:line="72" pos:column="17">need_timeout<pos:position pos:line="72" pos:column="29"/></name></expr>)<pos:position pos:line="72" pos:column="30"/></condition><then pos:line="72" pos:column="30"> <block pos:line="72" pos:column="31">{
                <if pos:line="73" pos:column="17">if <condition pos:line="73" pos:column="20">(<expr><name pos:line="73" pos:column="21">timeout_interval<pos:position pos:line="73" pos:column="37"/></name> <operator pos:line="73" pos:column="38">&gt;=<pos:position pos:line="73" pos:column="43"/></operator> <name pos:line="73" pos:column="41">TIMEOUT_USECS<pos:position pos:line="73" pos:column="54"/></name></expr>)<pos:position pos:line="73" pos:column="55"/></condition><then pos:line="73" pos:column="55"> <block pos:line="73" pos:column="56">{
                    <break pos:line="74" pos:column="21">break;<pos:position pos:line="74" pos:column="27"/></break>
                }<pos:position pos:line="75" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="76" pos:column="17">apr_sleep<pos:position pos:line="76" pos:column="26"/></name><argument_list pos:line="76" pos:column="26">(<argument><expr><name pos:line="76" pos:column="27">timeout_interval<pos:position pos:line="76" pos:column="43"/></name></expr></argument>)<pos:position pos:line="76" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><name pos:line="77" pos:column="17">timeout_interval<pos:position pos:line="77" pos:column="33"/></name> <operator pos:line="77" pos:column="34">*=<pos:position pos:line="77" pos:column="36"/></operator> <literal type="number" pos:line="77" pos:column="37">2<pos:position pos:line="77" pos:column="38"/></literal></expr>;<pos:position pos:line="77" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="78" pos:column="14"/></block></then></if>
        }<pos:position pos:line="79" pos:column="10"/></block> while <condition pos:line="79" pos:column="17">(<expr><name pos:line="79" pos:column="18">need_timeout<pos:position pos:line="79" pos:column="30"/></name></expr>)<pos:position pos:line="79" pos:column="31"/></condition>;<pos:position pos:line="79" pos:column="32"/></do>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="82" pos:column="5">/* OK, the scripts we just timed out for have had a chance to clean up
     * --- now, just get rid of them, and also clean up the system accounting
     * goop...
     */</comment>
    <for pos:line="86" pos:column="5">for <control pos:line="86" pos:column="9">(<init><expr><name pos:line="86" pos:column="10">pc<pos:position pos:line="86" pos:column="12"/></name> <operator pos:line="86" pos:column="13">=<pos:position pos:line="86" pos:column="14"/></operator> <name pos:line="86" pos:column="15">procs<pos:position pos:line="86" pos:column="20"/></name></expr>;<pos:position pos:line="86" pos:column="21"/></init> <condition><expr><name pos:line="86" pos:column="22">pc<pos:position pos:line="86" pos:column="24"/></name></expr>;<pos:position pos:line="86" pos:column="25"/></condition> <incr><expr><name pos:line="86" pos:column="26">pc<pos:position pos:line="86" pos:column="28"/></name> <operator pos:line="86" pos:column="29">=<pos:position pos:line="86" pos:column="30"/></operator> <name><name pos:line="86" pos:column="31">pc<pos:position pos:line="86" pos:column="33"/></name><operator pos:line="86" pos:column="33">-&gt;<pos:position pos:line="86" pos:column="38"/></operator><name pos:line="86" pos:column="35">next<pos:position pos:line="86" pos:column="39"/></name></name></expr></incr>)<pos:position pos:line="86" pos:column="40"/></control> <block pos:line="86" pos:column="41">{
        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name><name pos:line="87" pos:column="13">pc<pos:position pos:line="87" pos:column="15"/></name><operator pos:line="87" pos:column="15">-&gt;<pos:position pos:line="87" pos:column="20"/></operator><name pos:line="87" pos:column="17">kill_how<pos:position pos:line="87" pos:column="25"/></name></name> <operator pos:line="87" pos:column="26">==<pos:position pos:line="87" pos:column="28"/></operator> <name pos:line="87" pos:column="29">APR_KILL_AFTER_TIMEOUT<pos:position pos:line="87" pos:column="51"/></name></expr>)<pos:position pos:line="87" pos:column="52"/></condition><then pos:line="87" pos:column="52">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="88" pos:column="13">apr_proc_kill<pos:position pos:line="88" pos:column="26"/></name><argument_list pos:line="88" pos:column="26">(<argument><expr><name><name pos:line="88" pos:column="27">pc<pos:position pos:line="88" pos:column="29"/></name><operator pos:line="88" pos:column="29">-&gt;<pos:position pos:line="88" pos:column="34"/></operator><name pos:line="88" pos:column="31">proc<pos:position pos:line="88" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="37">SIGKILL<pos:position pos:line="88" pos:column="44"/></name></expr></argument>)<pos:position pos:line="88" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="46"/></expr_stmt></block></then></if>
    }<pos:position pos:line="89" pos:column="6"/></block></for>

    <comment type="block" pos:line="91" pos:column="5">/* Now wait for all the signaled processes to die */</comment>
    <for pos:line="92" pos:column="5">for <control pos:line="92" pos:column="9">(<init><expr><name pos:line="92" pos:column="10">pc<pos:position pos:line="92" pos:column="12"/></name> <operator pos:line="92" pos:column="13">=<pos:position pos:line="92" pos:column="14"/></operator> <name pos:line="92" pos:column="15">procs<pos:position pos:line="92" pos:column="20"/></name></expr>;<pos:position pos:line="92" pos:column="21"/></init> <condition><expr><name pos:line="92" pos:column="22">pc<pos:position pos:line="92" pos:column="24"/></name></expr>;<pos:position pos:line="92" pos:column="25"/></condition> <incr><expr><name pos:line="92" pos:column="26">pc<pos:position pos:line="92" pos:column="28"/></name> <operator pos:line="92" pos:column="29">=<pos:position pos:line="92" pos:column="30"/></operator> <name><name pos:line="92" pos:column="31">pc<pos:position pos:line="92" pos:column="33"/></name><operator pos:line="92" pos:column="33">-&gt;<pos:position pos:line="92" pos:column="38"/></operator><name pos:line="92" pos:column="35">next<pos:position pos:line="92" pos:column="39"/></name></name></expr></incr>)<pos:position pos:line="92" pos:column="40"/></control> <block pos:line="92" pos:column="41">{
        <if pos:line="93" pos:column="9">if <condition pos:line="93" pos:column="12">(<expr><name><name pos:line="93" pos:column="13">pc<pos:position pos:line="93" pos:column="15"/></name><operator pos:line="93" pos:column="15">-&gt;<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="17">kill_how<pos:position pos:line="93" pos:column="25"/></name></name> <operator pos:line="93" pos:column="26">!=<pos:position pos:line="93" pos:column="28"/></operator> <name pos:line="93" pos:column="29">APR_KILL_NEVER<pos:position pos:line="93" pos:column="43"/></name></expr>)<pos:position pos:line="93" pos:column="44"/></condition><then pos:line="93" pos:column="44">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="94" pos:column="13">(<pos:position pos:line="94" pos:column="14"/></operator><name pos:line="94" pos:column="14">void<pos:position pos:line="94" pos:column="18"/></name><operator pos:line="94" pos:column="18">)<pos:position pos:line="94" pos:column="19"/></operator><call><name pos:line="94" pos:column="19">apr_proc_wait<pos:position pos:line="94" pos:column="32"/></name><argument_list pos:line="94" pos:column="32">(<argument><expr><name><name pos:line="94" pos:column="33">pc<pos:position pos:line="94" pos:column="35"/></name><operator pos:line="94" pos:column="35">-&gt;<pos:position pos:line="94" pos:column="40"/></operator><name pos:line="94" pos:column="37">proc<pos:position pos:line="94" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="43">NULL<pos:position pos:line="94" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="49">NULL<pos:position pos:line="94" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="55">APR_WAIT<pos:position pos:line="94" pos:column="63"/></name></expr></argument>)<pos:position pos:line="94" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="65"/></expr_stmt></block></then></if>
    }<pos:position pos:line="95" pos:column="6"/></block></for>
}<pos:position pos:line="96" pos:column="2"/></block></for>


<comment type="block" pos:line="99" pos:column="1">/*
 * Pool creation/destruction stubs, for people who are running
 * mixed release/debug enviroments.
 */</comment>

<cpp:if pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">if<pos:position pos:line="104" pos:column="4"/></cpp:directive> <expr><operator pos:line="104" pos:column="5">!<pos:position pos:line="104" pos:column="6"/></operator><name pos:line="104" pos:column="6">APR_POOL_DEBUG<pos:position pos:line="104" pos:column="20"/></name></expr></cpp:if>
<macro><name pos:line="105" pos:column="1">APR_DECLARE<pos:position pos:line="105" pos:column="12"/></name><argument_list pos:line="105" pos:column="12">(<argument pos:line="105" pos:column="13">void *<pos:position pos:line="105" pos:column="19"/></argument>)<pos:position pos:line="105" pos:column="20"/></argument_list></macro> <macro><name pos:line="105" pos:column="21">apr_palloc_debug<pos:position pos:line="105" pos:column="37"/></name><argument_list pos:line="105" pos:column="37">(<argument pos:line="105" pos:column="38">apr_pool_t *pool<pos:position pos:line="105" pos:column="54"/></argument>, <argument pos:line="105" pos:column="56">apr_size_t size<pos:position pos:line="105" pos:column="71"/></argument>,
                                     <argument pos:line="106" pos:column="38">const char *file_line<pos:position pos:line="106" pos:column="59"/></argument>)<pos:position pos:line="106" pos:column="60"/></argument_list></macro>
<block pos:line="107" pos:column="1">{
    <return pos:line="108" pos:column="5">return <expr><call><name pos:line="108" pos:column="12">apr_palloc<pos:position pos:line="108" pos:column="22"/></name><argument_list pos:line="108" pos:column="22">(<argument><expr><name pos:line="108" pos:column="23">pool<pos:position pos:line="108" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="29">size<pos:position pos:line="108" pos:column="33"/></name></expr></argument>)<pos:position pos:line="108" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="35"/></return>
}<pos:position pos:line="109" pos:column="2"/></block>

<macro><name pos:line="111" pos:column="1">APR_DECLARE<pos:position pos:line="111" pos:column="12"/></name><argument_list pos:line="111" pos:column="12">(<argument pos:line="111" pos:column="13">void *<pos:position pos:line="111" pos:column="19"/></argument>)<pos:position pos:line="111" pos:column="20"/></argument_list></macro> <macro><name pos:line="111" pos:column="21">apr_pcalloc_debug<pos:position pos:line="111" pos:column="38"/></name><argument_list pos:line="111" pos:column="38">(<argument pos:line="111" pos:column="39">apr_pool_t *pool<pos:position pos:line="111" pos:column="55"/></argument>, <argument pos:line="111" pos:column="57">apr_size_t size<pos:position pos:line="111" pos:column="72"/></argument>,
                                      <argument pos:line="112" pos:column="39">const char *file_line<pos:position pos:line="112" pos:column="60"/></argument>)<pos:position pos:line="112" pos:column="61"/></argument_list></macro>
<block pos:line="113" pos:column="1">{
    <return pos:line="114" pos:column="5">return <expr><call><name pos:line="114" pos:column="12">apr_pcalloc<pos:position pos:line="114" pos:column="23"/></name><argument_list pos:line="114" pos:column="23">(<argument><expr><name pos:line="114" pos:column="24">pool<pos:position pos:line="114" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="30">size<pos:position pos:line="114" pos:column="34"/></name></expr></argument>)<pos:position pos:line="114" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="36"/></return>
}<pos:position pos:line="115" pos:column="2"/></block>

<macro><name pos:line="117" pos:column="1">APR_DECLARE<pos:position pos:line="117" pos:column="12"/></name><argument_list pos:line="117" pos:column="12">(<argument pos:line="117" pos:column="13">void<pos:position pos:line="117" pos:column="17"/></argument>)<pos:position pos:line="117" pos:column="18"/></argument_list></macro> <macro><name pos:line="117" pos:column="19">apr_pool_clear_debug<pos:position pos:line="117" pos:column="39"/></name><argument_list pos:line="117" pos:column="39">(<argument pos:line="117" pos:column="40">apr_pool_t *pool<pos:position pos:line="117" pos:column="56"/></argument>,
                                       <argument pos:line="118" pos:column="40">const char *file_line<pos:position pos:line="118" pos:column="61"/></argument>)<pos:position pos:line="118" pos:column="62"/></argument_list></macro>
<block pos:line="119" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">apr_pool_clear<pos:position pos:line="120" pos:column="19"/></name><argument_list pos:line="120" pos:column="19">(<argument><expr><name pos:line="120" pos:column="20">pool<pos:position pos:line="120" pos:column="24"/></name></expr></argument>)<pos:position pos:line="120" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="26"/></expr_stmt>
}<pos:position pos:line="121" pos:column="2"/></block>

<macro><name pos:line="123" pos:column="1">APR_DECLARE<pos:position pos:line="123" pos:column="12"/></name><argument_list pos:line="123" pos:column="12">(<argument pos:line="123" pos:column="13">void<pos:position pos:line="123" pos:column="17"/></argument>)<pos:position pos:line="123" pos:column="18"/></argument_list></macro> <macro><name pos:line="123" pos:column="19">apr_pool_destroy_debug<pos:position pos:line="123" pos:column="41"/></name><argument_list pos:line="123" pos:column="41">(<argument pos:line="123" pos:column="42">apr_pool_t *pool<pos:position pos:line="123" pos:column="58"/></argument>,
                                         <argument pos:line="124" pos:column="42">const char *file_line<pos:position pos:line="124" pos:column="63"/></argument>)<pos:position pos:line="124" pos:column="64"/></argument_list></macro>
<block pos:line="125" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="126" pos:column="5">apr_pool_destroy<pos:position pos:line="126" pos:column="21"/></name><argument_list pos:line="126" pos:column="21">(<argument><expr><name pos:line="126" pos:column="22">pool<pos:position pos:line="126" pos:column="26"/></name></expr></argument>)<pos:position pos:line="126" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="28"/></expr_stmt>
}<pos:position pos:line="127" pos:column="2"/></block>

<macro><name pos:line="129" pos:column="1">APR_DECLARE<pos:position pos:line="129" pos:column="12"/></name><argument_list pos:line="129" pos:column="12">(<argument pos:line="129" pos:column="13">apr_status_t<pos:position pos:line="129" pos:column="25"/></argument>)<pos:position pos:line="129" pos:column="26"/></argument_list></macro> <macro><name pos:line="129" pos:column="27">apr_pool_create_ex_debug<pos:position pos:line="129" pos:column="51"/></name><argument_list pos:line="129" pos:column="51">(<argument pos:line="129" pos:column="52">apr_pool_t **newpool<pos:position pos:line="129" pos:column="72"/></argument>,
                                                   <argument pos:line="130" pos:column="52">apr_pool_t *parent<pos:position pos:line="130" pos:column="70"/></argument>,
                                                   <argument pos:line="131" pos:column="52">apr_abortfunc_t abort_fn<pos:position pos:line="131" pos:column="76"/></argument>,
                                                   <argument pos:line="132" pos:column="52">apr_allocator_t *allocator<pos:position pos:line="132" pos:column="78"/></argument>,
                                                   <argument pos:line="133" pos:column="52">const char *file_line<pos:position pos:line="133" pos:column="73"/></argument>)<pos:position pos:line="133" pos:column="74"/></argument_list></macro>
<block pos:line="134" pos:column="1">{
    <return pos:line="135" pos:column="5">return <expr><call><name pos:line="135" pos:column="12">apr_pool_create_ex<pos:position pos:line="135" pos:column="30"/></name><argument_list pos:line="135" pos:column="30">(<argument><expr><name pos:line="135" pos:column="31">newpool<pos:position pos:line="135" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="40">parent<pos:position pos:line="135" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="48">abort_fn<pos:position pos:line="135" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="58">allocator<pos:position pos:line="135" pos:column="67"/></name></expr></argument>)<pos:position pos:line="135" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="69"/></return>
}<pos:position pos:line="136" pos:column="2"/></block>

<cpp:else pos:line="138" pos:column="1">#<cpp:directive pos:line="138" pos:column="2">else<pos:position pos:line="138" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="138" pos:column="7">/* APR_POOL_DEBUG */</comment>

<cpp:undef pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">undef<pos:position pos:line="140" pos:column="7"/></cpp:directive> <name pos:line="140" pos:column="8">apr_palloc<pos:position pos:line="140" pos:column="18"/></name></cpp:undef>
<macro><name pos:line="141" pos:column="1">APR_DECLARE<pos:position pos:line="141" pos:column="12"/></name><argument_list pos:line="141" pos:column="12">(<argument pos:line="141" pos:column="13">void *<pos:position pos:line="141" pos:column="19"/></argument>)<pos:position pos:line="141" pos:column="20"/></argument_list></macro> <macro><name pos:line="141" pos:column="21">apr_palloc<pos:position pos:line="141" pos:column="31"/></name><argument_list pos:line="141" pos:column="31">(<argument pos:line="141" pos:column="32">apr_pool_t *pool<pos:position pos:line="141" pos:column="48"/></argument>, <argument pos:line="141" pos:column="50">apr_size_t size<pos:position pos:line="141" pos:column="65"/></argument>)<pos:position pos:line="141" pos:column="66"/></argument_list></macro><empty_stmt pos:line="141" pos:column="66">;<pos:position pos:line="141" pos:column="67"/></empty_stmt>

<macro><name pos:line="143" pos:column="1">APR_DECLARE<pos:position pos:line="143" pos:column="12"/></name><argument_list pos:line="143" pos:column="12">(<argument pos:line="143" pos:column="13">void *<pos:position pos:line="143" pos:column="19"/></argument>)<pos:position pos:line="143" pos:column="20"/></argument_list></macro> <macro><name pos:line="143" pos:column="21">apr_palloc<pos:position pos:line="143" pos:column="31"/></name><argument_list pos:line="143" pos:column="31">(<argument pos:line="143" pos:column="32">apr_pool_t *pool<pos:position pos:line="143" pos:column="48"/></argument>, <argument pos:line="143" pos:column="50">apr_size_t size<pos:position pos:line="143" pos:column="65"/></argument>)<pos:position pos:line="143" pos:column="66"/></argument_list></macro>
<block pos:line="144" pos:column="1">{
    <return pos:line="145" pos:column="5">return <expr><call><name pos:line="145" pos:column="12">apr_palloc_debug<pos:position pos:line="145" pos:column="28"/></name><argument_list pos:line="145" pos:column="28">(<argument><expr><name pos:line="145" pos:column="29">pool<pos:position pos:line="145" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="35">size<pos:position pos:line="145" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="145" pos:column="41">"undefined"<pos:position pos:line="145" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="54"/></return>
}<pos:position pos:line="146" pos:column="2"/></block>

<cpp:undef pos:line="148" pos:column="1">#<cpp:directive pos:line="148" pos:column="2">undef<pos:position pos:line="148" pos:column="7"/></cpp:directive> <name pos:line="148" pos:column="8">apr_pcalloc<pos:position pos:line="148" pos:column="19"/></name></cpp:undef>
<macro><name pos:line="149" pos:column="1">APR_DECLARE<pos:position pos:line="149" pos:column="12"/></name><argument_list pos:line="149" pos:column="12">(<argument pos:line="149" pos:column="13">void *<pos:position pos:line="149" pos:column="19"/></argument>)<pos:position pos:line="149" pos:column="20"/></argument_list></macro> <macro><name pos:line="149" pos:column="21">apr_pcalloc<pos:position pos:line="149" pos:column="32"/></name><argument_list pos:line="149" pos:column="32">(<argument pos:line="149" pos:column="33">apr_pool_t *pool<pos:position pos:line="149" pos:column="49"/></argument>, <argument pos:line="149" pos:column="51">apr_size_t size<pos:position pos:line="149" pos:column="66"/></argument>)<pos:position pos:line="149" pos:column="67"/></argument_list></macro><empty_stmt pos:line="149" pos:column="67">;<pos:position pos:line="149" pos:column="68"/></empty_stmt>

<macro><name pos:line="151" pos:column="1">APR_DECLARE<pos:position pos:line="151" pos:column="12"/></name><argument_list pos:line="151" pos:column="12">(<argument pos:line="151" pos:column="13">void *<pos:position pos:line="151" pos:column="19"/></argument>)<pos:position pos:line="151" pos:column="20"/></argument_list></macro> <macro><name pos:line="151" pos:column="21">apr_pcalloc<pos:position pos:line="151" pos:column="32"/></name><argument_list pos:line="151" pos:column="32">(<argument pos:line="151" pos:column="33">apr_pool_t *pool<pos:position pos:line="151" pos:column="49"/></argument>, <argument pos:line="151" pos:column="51">apr_size_t size<pos:position pos:line="151" pos:column="66"/></argument>)<pos:position pos:line="151" pos:column="67"/></argument_list></macro>
<block pos:line="152" pos:column="1">{
    <return pos:line="153" pos:column="5">return <expr><call><name pos:line="153" pos:column="12">apr_pcalloc_debug<pos:position pos:line="153" pos:column="29"/></name><argument_list pos:line="153" pos:column="29">(<argument><expr><name pos:line="153" pos:column="30">pool<pos:position pos:line="153" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="36">size<pos:position pos:line="153" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="153" pos:column="42">"undefined"<pos:position pos:line="153" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="55"/></return>
}<pos:position pos:line="154" pos:column="2"/></block>

<cpp:undef pos:line="156" pos:column="1">#<cpp:directive pos:line="156" pos:column="2">undef<pos:position pos:line="156" pos:column="7"/></cpp:directive> <name pos:line="156" pos:column="8">apr_pool_clear<pos:position pos:line="156" pos:column="22"/></name></cpp:undef>
<macro><name pos:line="157" pos:column="1">APR_DECLARE<pos:position pos:line="157" pos:column="12"/></name><argument_list pos:line="157" pos:column="12">(<argument pos:line="157" pos:column="13">void<pos:position pos:line="157" pos:column="17"/></argument>)<pos:position pos:line="157" pos:column="18"/></argument_list></macro> <expr_stmt><expr><call><name pos:line="157" pos:column="19">apr_pool_clear<pos:position pos:line="157" pos:column="33"/></name><argument_list pos:line="157" pos:column="33">(<argument><expr><name pos:line="157" pos:column="34">apr_pool_t<pos:position pos:line="157" pos:column="44"/></name> <operator pos:line="157" pos:column="45">*<pos:position pos:line="157" pos:column="46"/></operator><name pos:line="157" pos:column="46">pool<pos:position pos:line="157" pos:column="50"/></name></expr></argument>)<pos:position pos:line="157" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="52"/></expr_stmt>

<macro><name pos:line="159" pos:column="1">APR_DECLARE<pos:position pos:line="159" pos:column="12"/></name><argument_list pos:line="159" pos:column="12">(<argument pos:line="159" pos:column="13">void<pos:position pos:line="159" pos:column="17"/></argument>)<pos:position pos:line="159" pos:column="18"/></argument_list></macro> <macro><name pos:line="159" pos:column="19">apr_pool_clear<pos:position pos:line="159" pos:column="33"/></name><argument_list pos:line="159" pos:column="33">(<argument pos:line="159" pos:column="34">apr_pool_t *pool<pos:position pos:line="159" pos:column="50"/></argument>)<pos:position pos:line="159" pos:column="51"/></argument_list></macro>
<block pos:line="160" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="161" pos:column="5">apr_pool_clear_debug<pos:position pos:line="161" pos:column="25"/></name><argument_list pos:line="161" pos:column="25">(<argument><expr><name pos:line="161" pos:column="26">pool<pos:position pos:line="161" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="161" pos:column="32">"undefined"<pos:position pos:line="161" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="161" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="45"/></expr_stmt>
}<pos:position pos:line="162" pos:column="2"/></block>

<cpp:undef pos:line="164" pos:column="1">#<cpp:directive pos:line="164" pos:column="2">undef<pos:position pos:line="164" pos:column="7"/></cpp:directive> <name pos:line="164" pos:column="8">apr_pool_destroy<pos:position pos:line="164" pos:column="24"/></name></cpp:undef>
<macro><name pos:line="165" pos:column="1">APR_DECLARE<pos:position pos:line="165" pos:column="12"/></name><argument_list pos:line="165" pos:column="12">(<argument pos:line="165" pos:column="13">void<pos:position pos:line="165" pos:column="17"/></argument>)<pos:position pos:line="165" pos:column="18"/></argument_list></macro> <expr_stmt><expr><call><name pos:line="165" pos:column="19">apr_pool_destroy<pos:position pos:line="165" pos:column="35"/></name><argument_list pos:line="165" pos:column="35">(<argument><expr><name pos:line="165" pos:column="36">apr_pool_t<pos:position pos:line="165" pos:column="46"/></name> <operator pos:line="165" pos:column="47">*<pos:position pos:line="165" pos:column="48"/></operator><name pos:line="165" pos:column="48">pool<pos:position pos:line="165" pos:column="52"/></name></expr></argument>)<pos:position pos:line="165" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="54"/></expr_stmt>

<macro><name pos:line="167" pos:column="1">APR_DECLARE<pos:position pos:line="167" pos:column="12"/></name><argument_list pos:line="167" pos:column="12">(<argument pos:line="167" pos:column="13">void<pos:position pos:line="167" pos:column="17"/></argument>)<pos:position pos:line="167" pos:column="18"/></argument_list></macro> <macro><name pos:line="167" pos:column="19">apr_pool_destroy<pos:position pos:line="167" pos:column="35"/></name><argument_list pos:line="167" pos:column="35">(<argument pos:line="167" pos:column="36">apr_pool_t *pool<pos:position pos:line="167" pos:column="52"/></argument>)<pos:position pos:line="167" pos:column="53"/></argument_list></macro>
<block pos:line="168" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="169" pos:column="5">apr_pool_destroy_debug<pos:position pos:line="169" pos:column="27"/></name><argument_list pos:line="169" pos:column="27">(<argument><expr><name pos:line="169" pos:column="28">pool<pos:position pos:line="169" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="169" pos:column="34">"undefined"<pos:position pos:line="169" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="169" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="47"/></expr_stmt>
}<pos:position pos:line="170" pos:column="2"/></block>

<cpp:undef pos:line="172" pos:column="1">#<cpp:directive pos:line="172" pos:column="2">undef<pos:position pos:line="172" pos:column="7"/></cpp:directive> <name pos:line="172" pos:column="8">apr_pool_create_ex<pos:position pos:line="172" pos:column="26"/></name></cpp:undef>
<macro><name pos:line="173" pos:column="1">APR_DECLARE<pos:position pos:line="173" pos:column="12"/></name><argument_list pos:line="173" pos:column="12">(<argument pos:line="173" pos:column="13">apr_status_t<pos:position pos:line="173" pos:column="25"/></argument>)<pos:position pos:line="173" pos:column="26"/></argument_list></macro> <macro><name pos:line="173" pos:column="27">apr_pool_create_ex<pos:position pos:line="173" pos:column="45"/></name><argument_list pos:line="173" pos:column="45">(<argument pos:line="173" pos:column="46">apr_pool_t **newpool<pos:position pos:line="173" pos:column="66"/></argument>,
                                             <argument pos:line="174" pos:column="46">apr_pool_t *parent<pos:position pos:line="174" pos:column="64"/></argument>,
                                             <argument pos:line="175" pos:column="46">apr_abortfunc_t abort_fn<pos:position pos:line="175" pos:column="70"/></argument>,
                                             <argument pos:line="176" pos:column="46">apr_allocator_t *allocator<pos:position pos:line="176" pos:column="72"/></argument>)<pos:position pos:line="176" pos:column="73"/></argument_list></macro><empty_stmt pos:line="176" pos:column="73">;<pos:position pos:line="176" pos:column="74"/></empty_stmt>

<macro><name pos:line="178" pos:column="1">APR_DECLARE<pos:position pos:line="178" pos:column="12"/></name><argument_list pos:line="178" pos:column="12">(<argument pos:line="178" pos:column="13">apr_status_t<pos:position pos:line="178" pos:column="25"/></argument>)<pos:position pos:line="178" pos:column="26"/></argument_list></macro> <macro><name pos:line="178" pos:column="27">apr_pool_create_ex<pos:position pos:line="178" pos:column="45"/></name><argument_list pos:line="178" pos:column="45">(<argument pos:line="178" pos:column="46">apr_pool_t **newpool<pos:position pos:line="178" pos:column="66"/></argument>,
                                             <argument pos:line="179" pos:column="46">apr_pool_t *parent<pos:position pos:line="179" pos:column="64"/></argument>,
                                             <argument pos:line="180" pos:column="46">apr_abortfunc_t abort_fn<pos:position pos:line="180" pos:column="70"/></argument>,
                                             <argument pos:line="181" pos:column="46">apr_allocator_t *allocator<pos:position pos:line="181" pos:column="72"/></argument>)<pos:position pos:line="181" pos:column="73"/></argument_list></macro>
<block pos:line="182" pos:column="1">{
    <return pos:line="183" pos:column="5">return <expr><call><name pos:line="183" pos:column="12">apr_pool_create_ex_debug<pos:position pos:line="183" pos:column="36"/></name><argument_list pos:line="183" pos:column="36">(<argument><expr><name pos:line="183" pos:column="37">newpool<pos:position pos:line="183" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="46">parent<pos:position pos:line="183" pos:column="52"/></name></expr></argument>,
                                    <argument><expr><name pos:line="184" pos:column="37">abort_fn<pos:position pos:line="184" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="184" pos:column="47">allocator<pos:position pos:line="184" pos:column="56"/></name></expr></argument>,
                                    <argument><expr><literal type="string" pos:line="185" pos:column="37">"undefined"<pos:position pos:line="185" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="185" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="185" pos:column="50"/></return>
}<pos:position pos:line="186" pos:column="2"/></block>

<cpp:endif pos:line="188" pos:column="1">#<cpp:directive pos:line="188" pos:column="2">endif<pos:position pos:line="188" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="188" pos:column="8">/* APR_POOL_DEBUG */</comment>

<comment type="block" pos:line="190" pos:column="1">/* Deprecated */</comment>
<macro><name pos:line="191" pos:column="1">APR_DECLARE<pos:position pos:line="191" pos:column="12"/></name><argument_list pos:line="191" pos:column="12">(<argument pos:line="191" pos:column="13">void<pos:position pos:line="191" pos:column="17"/></argument>)<pos:position pos:line="191" pos:column="18"/></argument_list></macro> <macro><name pos:line="191" pos:column="19">apr_allocator_set_max_free<pos:position pos:line="191" pos:column="45"/></name><argument_list pos:line="191" pos:column="45">(<argument pos:line="191" pos:column="46">apr_allocator_t *allocator<pos:position pos:line="191" pos:column="72"/></argument>,
                                             <argument pos:line="192" pos:column="46">apr_size_t size<pos:position pos:line="192" pos:column="61"/></argument>)<pos:position pos:line="192" pos:column="62"/></argument_list></macro>
<block pos:line="193" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="194" pos:column="5">apr_allocator_max_free_set<pos:position pos:line="194" pos:column="31"/></name><argument_list pos:line="194" pos:column="31">(<argument><expr><name pos:line="194" pos:column="32">allocator<pos:position pos:line="194" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="194" pos:column="43">size<pos:position pos:line="194" pos:column="47"/></name></expr></argument>)<pos:position pos:line="194" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="194" pos:column="49"/></expr_stmt>
}<pos:position pos:line="195" pos:column="2"/></block>

<comment type="block" pos:line="197" pos:column="1">/* Deprecated */</comment>
<macro><name pos:line="198" pos:column="1">APR_DECLARE<pos:position pos:line="198" pos:column="12"/></name><argument_list pos:line="198" pos:column="12">(<argument pos:line="198" pos:column="13">void<pos:position pos:line="198" pos:column="17"/></argument>)<pos:position pos:line="198" pos:column="18"/></argument_list></macro> <macro><name pos:line="198" pos:column="19">apr_pool_set_abort<pos:position pos:line="198" pos:column="37"/></name><argument_list pos:line="198" pos:column="37">(<argument pos:line="198" pos:column="38">apr_abortfunc_t abort_fn<pos:position pos:line="198" pos:column="62"/></argument>,
                                     <argument pos:line="199" pos:column="38">apr_pool_t *pool<pos:position pos:line="199" pos:column="54"/></argument>)<pos:position pos:line="199" pos:column="55"/></argument_list></macro>
<block pos:line="200" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="201" pos:column="5">apr_pool_abort_set<pos:position pos:line="201" pos:column="23"/></name><argument_list pos:line="201" pos:column="23">(<argument><expr><name pos:line="201" pos:column="24">abort_fn<pos:position pos:line="201" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="34">pool<pos:position pos:line="201" pos:column="38"/></name></expr></argument>)<pos:position pos:line="201" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="40"/></expr_stmt>
}<pos:position pos:line="202" pos:column="2"/></block>

<comment type="block" pos:line="204" pos:column="1">/* Deprecated */</comment>
<macro><name pos:line="205" pos:column="1">APR_DECLARE<pos:position pos:line="205" pos:column="12"/></name><argument_list pos:line="205" pos:column="12">(<argument pos:line="205" pos:column="13">apr_abortfunc_t<pos:position pos:line="205" pos:column="28"/></argument>)<pos:position pos:line="205" pos:column="29"/></argument_list></macro> <macro><name pos:line="205" pos:column="30">apr_pool_get_abort<pos:position pos:line="205" pos:column="48"/></name><argument_list pos:line="205" pos:column="48">(<argument pos:line="205" pos:column="49">apr_pool_t *pool<pos:position pos:line="205" pos:column="65"/></argument>)<pos:position pos:line="205" pos:column="66"/></argument_list></macro>
<block pos:line="206" pos:column="1">{
    <return pos:line="207" pos:column="5">return <expr><call><name pos:line="207" pos:column="12">apr_pool_abort_get<pos:position pos:line="207" pos:column="30"/></name><argument_list pos:line="207" pos:column="30">(<argument><expr><name pos:line="207" pos:column="31">pool<pos:position pos:line="207" pos:column="35"/></name></expr></argument>)<pos:position pos:line="207" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="37"/></return>
}<pos:position pos:line="208" pos:column="2"/></block>

<comment type="block" pos:line="210" pos:column="1">/* Deprecated */</comment>
<macro><name pos:line="211" pos:column="1">APR_DECLARE<pos:position pos:line="211" pos:column="12"/></name><argument_list pos:line="211" pos:column="12">(<argument pos:line="211" pos:column="13">apr_pool_t *<pos:position pos:line="211" pos:column="25"/></argument>)<pos:position pos:line="211" pos:column="26"/></argument_list></macro> <macro><name pos:line="211" pos:column="27">apr_pool_get_parent<pos:position pos:line="211" pos:column="46"/></name><argument_list pos:line="211" pos:column="46">(<argument pos:line="211" pos:column="47">apr_pool_t *pool<pos:position pos:line="211" pos:column="63"/></argument>)<pos:position pos:line="211" pos:column="64"/></argument_list></macro>
<block pos:line="212" pos:column="1">{
    <return pos:line="213" pos:column="5">return <expr><call><name pos:line="213" pos:column="12">apr_pool_parent_get<pos:position pos:line="213" pos:column="31"/></name><argument_list pos:line="213" pos:column="31">(<argument><expr><name pos:line="213" pos:column="32">pool<pos:position pos:line="213" pos:column="36"/></name></expr></argument>)<pos:position pos:line="213" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="213" pos:column="38"/></return>
}<pos:position pos:line="214" pos:column="2"/></block>

<comment type="block" pos:line="216" pos:column="1">/* Deprecated */</comment>
<macro><name pos:line="217" pos:column="1">APR_DECLARE<pos:position pos:line="217" pos:column="12"/></name><argument_list pos:line="217" pos:column="12">(<argument pos:line="217" pos:column="13">void<pos:position pos:line="217" pos:column="17"/></argument>)<pos:position pos:line="217" pos:column="18"/></argument_list></macro> <macro><name pos:line="217" pos:column="19">apr_allocator_set_owner<pos:position pos:line="217" pos:column="42"/></name><argument_list pos:line="217" pos:column="42">(<argument pos:line="217" pos:column="43">apr_allocator_t *allocator<pos:position pos:line="217" pos:column="69"/></argument>,
                                          <argument pos:line="218" pos:column="43">apr_pool_t *pool<pos:position pos:line="218" pos:column="59"/></argument>)<pos:position pos:line="218" pos:column="60"/></argument_list></macro>
<block pos:line="219" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="220" pos:column="5">apr_allocator_owner_set<pos:position pos:line="220" pos:column="28"/></name><argument_list pos:line="220" pos:column="28">(<argument><expr><name pos:line="220" pos:column="29">allocator<pos:position pos:line="220" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="220" pos:column="40">pool<pos:position pos:line="220" pos:column="44"/></name></expr></argument>)<pos:position pos:line="220" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="46"/></expr_stmt>
}<pos:position pos:line="221" pos:column="2"/></block>

<comment type="block" pos:line="223" pos:column="1">/* Deprecated */</comment>
<macro><name pos:line="224" pos:column="1">APR_DECLARE<pos:position pos:line="224" pos:column="12"/></name><argument_list pos:line="224" pos:column="12">(<argument pos:line="224" pos:column="13">apr_pool_t *<pos:position pos:line="224" pos:column="25"/></argument>)<pos:position pos:line="224" pos:column="26"/></argument_list></macro> <macro><name pos:line="224" pos:column="27">apr_allocator_get_owner<pos:position pos:line="224" pos:column="50"/></name><argument_list pos:line="224" pos:column="50">(
                                  <argument pos:line="225" pos:column="35">apr_allocator_t *allocator<pos:position pos:line="225" pos:column="61"/></argument>)<pos:position pos:line="225" pos:column="62"/></argument_list></macro>
<block pos:line="226" pos:column="1">{
    <return pos:line="227" pos:column="5">return <expr><call><name pos:line="227" pos:column="12">apr_allocator_owner_get<pos:position pos:line="227" pos:column="35"/></name><argument_list pos:line="227" pos:column="35">(<argument><expr><name pos:line="227" pos:column="36">allocator<pos:position pos:line="227" pos:column="45"/></name></expr></argument>)<pos:position pos:line="227" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="227" pos:column="47"/></return>
}<pos:position pos:line="228" pos:column="2"/></block>

<cpp:if pos:line="230" pos:column="1">#<cpp:directive pos:line="230" pos:column="2">if<pos:position pos:line="230" pos:column="4"/></cpp:directive> <expr><name pos:line="230" pos:column="5">APR_HAS_THREADS<pos:position pos:line="230" pos:column="20"/></name></expr></cpp:if>
<comment type="block" pos:line="231" pos:column="1">/* Deprecated */</comment>
<macro><name pos:line="232" pos:column="1">APR_DECLARE<pos:position pos:line="232" pos:column="12"/></name><argument_list pos:line="232" pos:column="12">(<argument pos:line="232" pos:column="13">apr_thread_mutex_t *<pos:position pos:line="232" pos:column="33"/></argument>)<pos:position pos:line="232" pos:column="34"/></argument_list></macro> <macro><name pos:line="232" pos:column="35">apr_allocator_get_mutex<pos:position pos:line="232" pos:column="58"/></name><argument_list pos:line="232" pos:column="58">(
                                      <argument pos:line="233" pos:column="39">apr_allocator_t *allocator<pos:position pos:line="233" pos:column="65"/></argument>)<pos:position pos:line="233" pos:column="66"/></argument_list></macro>
<block pos:line="234" pos:column="1">{
    <return pos:line="235" pos:column="5">return <expr><call><name pos:line="235" pos:column="12">apr_allocator_mutex_get<pos:position pos:line="235" pos:column="35"/></name><argument_list pos:line="235" pos:column="35">(<argument><expr><name pos:line="235" pos:column="36">allocator<pos:position pos:line="235" pos:column="45"/></name></expr></argument>)<pos:position pos:line="235" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="47"/></return>
}<pos:position pos:line="236" pos:column="2"/></block>

<comment type="block" pos:line="238" pos:column="1">/* Deprecated */</comment>
<macro><name pos:line="239" pos:column="1">APR_DECLARE<pos:position pos:line="239" pos:column="12"/></name><argument_list pos:line="239" pos:column="12">(<argument pos:line="239" pos:column="13">void<pos:position pos:line="239" pos:column="17"/></argument>)<pos:position pos:line="239" pos:column="18"/></argument_list></macro> <macro><name pos:line="239" pos:column="19">apr_allocator_set_mutex<pos:position pos:line="239" pos:column="42"/></name><argument_list pos:line="239" pos:column="42">(<argument pos:line="239" pos:column="43">apr_allocator_t *allocator<pos:position pos:line="239" pos:column="69"/></argument>,
                                          <argument pos:line="240" pos:column="43">apr_thread_mutex_t *mutex<pos:position pos:line="240" pos:column="68"/></argument>)<pos:position pos:line="240" pos:column="69"/></argument_list></macro>
<block pos:line="241" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="242" pos:column="5">apr_allocator_mutex_set<pos:position pos:line="242" pos:column="28"/></name><argument_list pos:line="242" pos:column="28">(<argument><expr><name pos:line="242" pos:column="29">allocator<pos:position pos:line="242" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="242" pos:column="40">mutex<pos:position pos:line="242" pos:column="45"/></name></expr></argument>)<pos:position pos:line="242" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="47"/></expr_stmt>
}<pos:position pos:line="243" pos:column="2"/></block></block></function></unit>
