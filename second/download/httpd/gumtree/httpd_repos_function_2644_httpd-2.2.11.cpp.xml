<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2644_httpd-2.2.11.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">num_cmd_write<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">apr_memcache_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">mc<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">char<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">cmd<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="3" pos:column="39">const<pos:position pos:line="3" pos:column="44"/></specifier> <name pos:line="3" pos:column="45">apr_uint32_t<pos:position pos:line="3" pos:column="57"/></name></type> <name pos:line="3" pos:column="58">cmd_size<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="4" pos:column="39">const<pos:position pos:line="4" pos:column="44"/></specifier> <name pos:line="4" pos:column="45">char<pos:position pos:line="4" pos:column="49"/></name> <modifier pos:line="4" pos:column="50">*<pos:position pos:line="4" pos:column="51"/></modifier></type><name pos:line="4" pos:column="51">key<pos:position pos:line="4" pos:column="54"/></name></decl></parameter>,
                                      <parameter><decl><type><specifier pos:line="5" pos:column="39">const<pos:position pos:line="5" pos:column="44"/></specifier> <name pos:line="5" pos:column="45">apr_int32_t<pos:position pos:line="5" pos:column="56"/></name></type> <name pos:line="5" pos:column="57">inc<pos:position pos:line="5" pos:column="60"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="6" pos:column="39">apr_uint32_t<pos:position pos:line="6" pos:column="51"/></name> <modifier pos:line="6" pos:column="52">*<pos:position pos:line="6" pos:column="53"/></modifier></type><name pos:line="6" pos:column="53">new_value<pos:position pos:line="6" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="6" pos:column="63"/></parameter_list>
<block pos:line="7" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">rv<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_memcache_server_t<pos:position pos:line="9" pos:column="26"/></name> <modifier pos:line="9" pos:column="27">*<pos:position pos:line="9" pos:column="28"/></modifier></type><name pos:line="9" pos:column="28">ms<pos:position pos:line="9" pos:column="30"/></name></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_memcache_conn_t<pos:position pos:line="10" pos:column="24"/></name> <modifier pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></modifier></type><name pos:line="10" pos:column="26">conn<pos:position pos:line="10" pos:column="30"/></name></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">apr_uint32_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">hash<pos:position pos:line="11" pos:column="22"/></name></decl>;<pos:position pos:line="11" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">apr_size_t<pos:position pos:line="12" pos:column="15"/></name></type> <name pos:line="12" pos:column="16">written<pos:position pos:line="12" pos:column="23"/></name></decl>;<pos:position pos:line="12" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="13" pos:column="5">struct<pos:position pos:line="13" pos:column="11"/></name> <name pos:line="13" pos:column="12">iovec<pos:position pos:line="13" pos:column="17"/></name></name></type> <name><name pos:line="13" pos:column="18">vec<pos:position pos:line="13" pos:column="21"/></name><index pos:line="13" pos:column="21">[<expr><literal type="number" pos:line="13" pos:column="22">3<pos:position pos:line="13" pos:column="23"/></literal></expr>]<pos:position pos:line="13" pos:column="24"/></index></name></decl>;<pos:position pos:line="13" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">apr_size_t<pos:position pos:line="14" pos:column="15"/></name></type> <name pos:line="14" pos:column="16">klen<pos:position pos:line="14" pos:column="20"/></name> <init pos:line="14" pos:column="21">= <expr><call><name pos:line="14" pos:column="23">strlen<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">key<pos:position pos:line="14" pos:column="33"/></name></expr></argument>)<pos:position pos:line="14" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="14" pos:column="35"/></decl_stmt>

    <expr_stmt><expr><name pos:line="16" pos:column="5">hash<pos:position pos:line="16" pos:column="9"/></name> <operator pos:line="16" pos:column="10">=<pos:position pos:line="16" pos:column="11"/></operator> <call><name pos:line="16" pos:column="12">apr_memcache_hash<pos:position pos:line="16" pos:column="29"/></name><argument_list pos:line="16" pos:column="29">(<argument><expr><name pos:line="16" pos:column="30">mc<pos:position pos:line="16" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="34">key<pos:position pos:line="16" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="39">klen<pos:position pos:line="16" pos:column="43"/></name></expr></argument>)<pos:position pos:line="16" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="17" pos:column="5">ms<pos:position pos:line="17" pos:column="7"/></name> <operator pos:line="17" pos:column="8">=<pos:position pos:line="17" pos:column="9"/></operator> <call><name pos:line="17" pos:column="10">apr_memcache_find_server_hash<pos:position pos:line="17" pos:column="39"/></name><argument_list pos:line="17" pos:column="39">(<argument><expr><name pos:line="17" pos:column="40">mc<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="44">hash<pos:position pos:line="17" pos:column="48"/></name></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name pos:line="18" pos:column="9">ms<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">==<pos:position pos:line="18" pos:column="14"/></operator> <name pos:line="18" pos:column="15">NULL<pos:position pos:line="18" pos:column="19"/></name></expr>)<pos:position pos:line="18" pos:column="20"/></condition><then pos:line="18" pos:column="20">
        <block type="pseudo"><return pos:line="19" pos:column="9">return <expr><name pos:line="19" pos:column="16">APR_NOTFOUND<pos:position pos:line="19" pos:column="28"/></name></expr>;<pos:position pos:line="19" pos:column="29"/></return></block></then></if>
    
    <expr_stmt><expr><name pos:line="21" pos:column="5">rv<pos:position pos:line="21" pos:column="7"/></name> <operator pos:line="21" pos:column="8">=<pos:position pos:line="21" pos:column="9"/></operator> <call><name pos:line="21" pos:column="10">ms_find_conn<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">ms<pos:position pos:line="21" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="27">&amp;<pos:position pos:line="21" pos:column="32"/></operator><name pos:line="21" pos:column="28">conn<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">rv<pos:position pos:line="23" pos:column="11"/></name> <operator pos:line="23" pos:column="12">!=<pos:position pos:line="23" pos:column="14"/></operator> <name pos:line="23" pos:column="15">APR_SUCCESS<pos:position pos:line="23" pos:column="26"/></name></expr>)<pos:position pos:line="23" pos:column="27"/></condition><then pos:line="23" pos:column="27"> <block pos:line="23" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">apr_memcache_disable_server<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name pos:line="24" pos:column="37">mc<pos:position pos:line="24" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">ms<pos:position pos:line="24" pos:column="43"/></name></expr></argument>)<pos:position pos:line="24" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="45"/></expr_stmt>
        <return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">rv<pos:position pos:line="25" pos:column="18"/></name></expr>;<pos:position pos:line="25" pos:column="19"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="28" pos:column="5">/* &lt;cmd&gt; &lt;key&gt; &lt;value&gt;\r\n */</comment>
    <expr_stmt><expr><name><name pos:line="29" pos:column="5">vec<pos:position pos:line="29" pos:column="8"/></name><index pos:line="29" pos:column="8">[<expr><literal type="number" pos:line="29" pos:column="9">0<pos:position pos:line="29" pos:column="10"/></literal></expr>]<pos:position pos:line="29" pos:column="11"/></index></name><operator pos:line="29" pos:column="11">.<pos:position pos:line="29" pos:column="12"/></operator><name pos:line="29" pos:column="12">iov_base<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="23">cmd<pos:position pos:line="29" pos:column="26"/></name></expr>;<pos:position pos:line="29" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="30" pos:column="5">vec<pos:position pos:line="30" pos:column="8"/></name><index pos:line="30" pos:column="8">[<expr><literal type="number" pos:line="30" pos:column="9">0<pos:position pos:line="30" pos:column="10"/></literal></expr>]<pos:position pos:line="30" pos:column="11"/></index></name><operator pos:line="30" pos:column="11">.<pos:position pos:line="30" pos:column="12"/></operator><name pos:line="30" pos:column="12">iov_len<pos:position pos:line="30" pos:column="19"/></name>  <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <name pos:line="30" pos:column="23">cmd_size<pos:position pos:line="30" pos:column="31"/></name></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="32" pos:column="5">vec<pos:position pos:line="32" pos:column="8"/></name><index pos:line="32" pos:column="8">[<expr><literal type="number" pos:line="32" pos:column="9">1<pos:position pos:line="32" pos:column="10"/></literal></expr>]<pos:position pos:line="32" pos:column="11"/></index></name><operator pos:line="32" pos:column="11">.<pos:position pos:line="32" pos:column="12"/></operator><name pos:line="32" pos:column="12">iov_base<pos:position pos:line="32" pos:column="20"/></name> <operator pos:line="32" pos:column="21">=<pos:position pos:line="32" pos:column="22"/></operator> <operator pos:line="32" pos:column="23">(<pos:position pos:line="32" pos:column="24"/></operator><name pos:line="32" pos:column="24">void<pos:position pos:line="32" pos:column="28"/></name><operator pos:line="32" pos:column="28">*<pos:position pos:line="32" pos:column="29"/></operator><operator pos:line="32" pos:column="29">)<pos:position pos:line="32" pos:column="30"/></operator><name pos:line="32" pos:column="30">key<pos:position pos:line="32" pos:column="33"/></name></expr>;<pos:position pos:line="32" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">vec<pos:position pos:line="33" pos:column="8"/></name><index pos:line="33" pos:column="8">[<expr><literal type="number" pos:line="33" pos:column="9">1<pos:position pos:line="33" pos:column="10"/></literal></expr>]<pos:position pos:line="33" pos:column="11"/></index></name><operator pos:line="33" pos:column="11">.<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">iov_len<pos:position pos:line="33" pos:column="19"/></name>  <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="23">klen<pos:position pos:line="33" pos:column="27"/></name></expr>;<pos:position pos:line="33" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name pos:line="35" pos:column="5">klen<pos:position pos:line="35" pos:column="9"/></name> <operator pos:line="35" pos:column="10">=<pos:position pos:line="35" pos:column="11"/></operator> <call><name pos:line="35" pos:column="12">apr_snprintf<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name><name pos:line="35" pos:column="25">conn<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">-&gt;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="31">buffer<pos:position pos:line="35" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="39">BUFFER_SIZE<pos:position pos:line="35" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="52">" %u"<pos:position pos:line="35" pos:column="57"/></literal> <name pos:line="35" pos:column="58">MC_EOL<pos:position pos:line="35" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="66">inc<pos:position pos:line="35" pos:column="69"/></name></expr></argument>)<pos:position pos:line="35" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="71"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="37" pos:column="5">vec<pos:position pos:line="37" pos:column="8"/></name><index pos:line="37" pos:column="8">[<expr><literal type="number" pos:line="37" pos:column="9">2<pos:position pos:line="37" pos:column="10"/></literal></expr>]<pos:position pos:line="37" pos:column="11"/></index></name><operator pos:line="37" pos:column="11">.<pos:position pos:line="37" pos:column="12"/></operator><name pos:line="37" pos:column="12">iov_base<pos:position pos:line="37" pos:column="20"/></name> <operator pos:line="37" pos:column="21">=<pos:position pos:line="37" pos:column="22"/></operator> <name><name pos:line="37" pos:column="23">conn<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">-&gt;<pos:position pos:line="37" pos:column="32"/></operator><name pos:line="37" pos:column="29">buffer<pos:position pos:line="37" pos:column="35"/></name></name></expr>;<pos:position pos:line="37" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">vec<pos:position pos:line="38" pos:column="8"/></name><index pos:line="38" pos:column="8">[<expr><literal type="number" pos:line="38" pos:column="9">2<pos:position pos:line="38" pos:column="10"/></literal></expr>]<pos:position pos:line="38" pos:column="11"/></index></name><operator pos:line="38" pos:column="11">.<pos:position pos:line="38" pos:column="12"/></operator><name pos:line="38" pos:column="12">iov_len<pos:position pos:line="38" pos:column="19"/></name>  <operator pos:line="38" pos:column="21">=<pos:position pos:line="38" pos:column="22"/></operator> <name pos:line="38" pos:column="23">klen<pos:position pos:line="38" pos:column="27"/></name></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><name pos:line="40" pos:column="5">rv<pos:position pos:line="40" pos:column="7"/></name> <operator pos:line="40" pos:column="8">=<pos:position pos:line="40" pos:column="9"/></operator> <call><name pos:line="40" pos:column="10">apr_socket_sendv<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><name><name pos:line="40" pos:column="27">conn<pos:position pos:line="40" pos:column="31"/></name><operator pos:line="40" pos:column="31">-&gt;<pos:position pos:line="40" pos:column="36"/></operator><name pos:line="40" pos:column="33">sock<pos:position pos:line="40" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="39">vec<pos:position pos:line="40" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="44">3<pos:position pos:line="40" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="40" pos:column="47">&amp;<pos:position pos:line="40" pos:column="52"/></operator><name pos:line="40" pos:column="48">written<pos:position pos:line="40" pos:column="55"/></name></expr></argument>)<pos:position pos:line="40" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="57"/></expr_stmt>

    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">rv<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">!=<pos:position pos:line="42" pos:column="14"/></operator> <name pos:line="42" pos:column="15">APR_SUCCESS<pos:position pos:line="42" pos:column="26"/></name></expr>)<pos:position pos:line="42" pos:column="27"/></condition><then pos:line="42" pos:column="27"> <block pos:line="42" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">ms_bad_conn<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">ms<pos:position pos:line="43" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="25">conn<pos:position pos:line="43" pos:column="29"/></name></expr></argument>)<pos:position pos:line="43" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">apr_memcache_disable_server<pos:position pos:line="44" pos:column="36"/></name><argument_list pos:line="44" pos:column="36">(<argument><expr><name pos:line="44" pos:column="37">mc<pos:position pos:line="44" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="41">ms<pos:position pos:line="44" pos:column="43"/></name></expr></argument>)<pos:position pos:line="44" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="45"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">rv<pos:position pos:line="45" pos:column="18"/></name></expr>;<pos:position pos:line="45" pos:column="19"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="48" pos:column="5">rv<pos:position pos:line="48" pos:column="7"/></name> <operator pos:line="48" pos:column="8">=<pos:position pos:line="48" pos:column="9"/></operator> <call><name pos:line="48" pos:column="10">get_server_line<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">conn<pos:position pos:line="48" pos:column="30"/></name></expr></argument>)<pos:position pos:line="48" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="32"/></expr_stmt>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">rv<pos:position pos:line="49" pos:column="11"/></name> <operator pos:line="49" pos:column="12">!=<pos:position pos:line="49" pos:column="14"/></operator> <name pos:line="49" pos:column="15">APR_SUCCESS<pos:position pos:line="49" pos:column="26"/></name></expr>)<pos:position pos:line="49" pos:column="27"/></condition><then pos:line="49" pos:column="27"> <block pos:line="49" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="50" pos:column="9">ms_bad_conn<pos:position pos:line="50" pos:column="20"/></name><argument_list pos:line="50" pos:column="20">(<argument><expr><name pos:line="50" pos:column="21">ms<pos:position pos:line="50" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="25">conn<pos:position pos:line="50" pos:column="29"/></name></expr></argument>)<pos:position pos:line="50" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">apr_memcache_disable_server<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><name pos:line="51" pos:column="37">mc<pos:position pos:line="51" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="41">ms<pos:position pos:line="51" pos:column="43"/></name></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
        <return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">rv<pos:position pos:line="52" pos:column="18"/></name></expr>;<pos:position pos:line="52" pos:column="19"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><call><name pos:line="55" pos:column="9">strncmp<pos:position pos:line="55" pos:column="16"/></name><argument_list pos:line="55" pos:column="16">(<argument><expr><name pos:line="55" pos:column="17">MS_ERROR<pos:position pos:line="55" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="27">conn<pos:position pos:line="55" pos:column="31"/></name><operator pos:line="55" pos:column="31">-&gt;<pos:position pos:line="55" pos:column="36"/></operator><name pos:line="55" pos:column="33">buffer<pos:position pos:line="55" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="41">MS_ERROR_LEN<pos:position pos:line="55" pos:column="53"/></name></expr></argument>)<pos:position pos:line="55" pos:column="54"/></argument_list></call> <operator pos:line="55" pos:column="55">==<pos:position pos:line="55" pos:column="57"/></operator> <literal type="number" pos:line="55" pos:column="58">0<pos:position pos:line="55" pos:column="59"/></literal></expr>)<pos:position pos:line="55" pos:column="60"/></condition><then pos:line="55" pos:column="60"> <block pos:line="55" pos:column="61">{
        <expr_stmt><expr><name pos:line="56" pos:column="9">rv<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">=<pos:position pos:line="56" pos:column="13"/></operator> <name pos:line="56" pos:column="14">APR_EGENERAL<pos:position pos:line="56" pos:column="26"/></name></expr>;<pos:position pos:line="56" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then>
    <elseif pos:line="58" pos:column="5">else <if pos:line="58" pos:column="10">if <condition pos:line="58" pos:column="13">(<expr><call><name pos:line="58" pos:column="14">strncmp<pos:position pos:line="58" pos:column="21"/></name><argument_list pos:line="58" pos:column="21">(<argument><expr><name pos:line="58" pos:column="22">MS_NOT_FOUND<pos:position pos:line="58" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="36">conn<pos:position pos:line="58" pos:column="40"/></name><operator pos:line="58" pos:column="40">-&gt;<pos:position pos:line="58" pos:column="45"/></operator><name pos:line="58" pos:column="42">buffer<pos:position pos:line="58" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="50">MS_NOT_FOUND_LEN<pos:position pos:line="58" pos:column="66"/></name></expr></argument>)<pos:position pos:line="58" pos:column="67"/></argument_list></call> <operator pos:line="58" pos:column="68">==<pos:position pos:line="58" pos:column="70"/></operator> <literal type="number" pos:line="58" pos:column="71">0<pos:position pos:line="58" pos:column="72"/></literal></expr>)<pos:position pos:line="58" pos:column="73"/></condition><then pos:line="58" pos:column="73"> <block pos:line="58" pos:column="74">{
        <expr_stmt><expr><name pos:line="59" pos:column="9">rv<pos:position pos:line="59" pos:column="11"/></name> <operator pos:line="59" pos:column="12">=<pos:position pos:line="59" pos:column="13"/></operator> <name pos:line="59" pos:column="14">APR_NOTFOUND<pos:position pos:line="59" pos:column="26"/></name></expr>;<pos:position pos:line="59" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if></elseif>
    <else pos:line="61" pos:column="5">else <block pos:line="61" pos:column="10">{
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">new_value<pos:position pos:line="62" pos:column="22"/></name></expr>)<pos:position pos:line="62" pos:column="23"/></condition><then pos:line="62" pos:column="23"> <block pos:line="62" pos:column="24">{
            <expr_stmt><expr><operator pos:line="63" pos:column="13">*<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="14">new_value<pos:position pos:line="63" pos:column="23"/></name> <operator pos:line="63" pos:column="24">=<pos:position pos:line="63" pos:column="25"/></operator> <call><name pos:line="63" pos:column="26">atoi<pos:position pos:line="63" pos:column="30"/></name><argument_list pos:line="63" pos:column="30">(<argument><expr><name><name pos:line="63" pos:column="31">conn<pos:position pos:line="63" pos:column="35"/></name><operator pos:line="63" pos:column="35">-&gt;<pos:position pos:line="63" pos:column="40"/></operator><name pos:line="63" pos:column="37">buffer<pos:position pos:line="63" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="63" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="65" pos:column="9">rv<pos:position pos:line="65" pos:column="11"/></name> <operator pos:line="65" pos:column="12">=<pos:position pos:line="65" pos:column="13"/></operator> <name pos:line="65" pos:column="14">APR_SUCCESS<pos:position pos:line="65" pos:column="25"/></name></expr>;<pos:position pos:line="65" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="66" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="68" pos:column="5">ms_release_conn<pos:position pos:line="68" pos:column="20"/></name><argument_list pos:line="68" pos:column="20">(<argument><expr><name pos:line="68" pos:column="21">ms<pos:position pos:line="68" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="25">conn<pos:position pos:line="68" pos:column="29"/></name></expr></argument>)<pos:position pos:line="68" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="31"/></expr_stmt>

    <return pos:line="70" pos:column="5">return <expr><name pos:line="70" pos:column="12">rv<pos:position pos:line="70" pos:column="14"/></name></expr>;<pos:position pos:line="70" pos:column="15"/></return>
}<pos:position pos:line="71" pos:column="2"/></block></function></unit>
