<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_270_httpd-2.0.43.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">dav_lookup_result<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">dav_lookup_uri<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">uri<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">request_rec<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type> <name pos:line="1" pos:column="65">r<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">int<pos:position pos:line="2" pos:column="37"/></name></type> <name pos:line="2" pos:column="38">must_be_absolute<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">dav_lookup_result<pos:position pos:line="4" pos:column="22"/></name></type> <name pos:line="4" pos:column="23">result<pos:position pos:line="4" pos:column="29"/></name> <init pos:line="4" pos:column="30">= <expr><block pos:line="4" pos:column="32">{ <expr><literal type="number" pos:line="4" pos:column="34">0<pos:position pos:line="4" pos:column="35"/></literal></expr> }<pos:position pos:line="4" pos:column="37"/></block></expr></init></decl>;<pos:position pos:line="4" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">scheme<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_port_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">port<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_uri_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">comp<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">new_file<pos:position pos:line="8" pos:column="19"/></name></decl>;<pos:position pos:line="8" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">domain<pos:position pos:line="9" pos:column="23"/></name></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>

    <comment type="block" pos:line="11" pos:column="5">/* first thing to do is parse the URI into various components */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><call><name pos:line="12" pos:column="9">apr_uri_parse<pos:position pos:line="12" pos:column="22"/></name><argument_list pos:line="12" pos:column="22">(<argument><expr><name><name pos:line="12" pos:column="23">r<pos:position pos:line="12" pos:column="24"/></name><operator pos:line="12" pos:column="24">-&gt;<pos:position pos:line="12" pos:column="29"/></operator><name pos:line="12" pos:column="26">pool<pos:position pos:line="12" pos:column="30"/></name></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="32">uri<pos:position pos:line="12" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="37">&amp;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="38">comp<pos:position pos:line="12" pos:column="42"/></name></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call> <operator pos:line="12" pos:column="44">!=<pos:position pos:line="12" pos:column="46"/></operator> <name pos:line="12" pos:column="47">APR_SUCCESS<pos:position pos:line="12" pos:column="58"/></name></expr>)<pos:position pos:line="12" pos:column="59"/></condition><then pos:line="12" pos:column="59"> <block pos:line="12" pos:column="60">{
	<expr_stmt><expr><name><name pos:line="13" pos:column="9">result<pos:position pos:line="13" pos:column="15"/></name><operator pos:line="13" pos:column="15">.<pos:position pos:line="13" pos:column="16"/></operator><name pos:line="13" pos:column="16">err<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">.<pos:position pos:line="13" pos:column="20"/></operator><name pos:line="13" pos:column="20">status<pos:position pos:line="13" pos:column="26"/></name></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name pos:line="13" pos:column="29">HTTP_BAD_REQUEST<pos:position pos:line="13" pos:column="45"/></name></expr>;<pos:position pos:line="13" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="14" pos:column="9">result<pos:position pos:line="14" pos:column="15"/></name><operator pos:line="14" pos:column="15">.<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">err<pos:position pos:line="14" pos:column="19"/></name><operator pos:line="14" pos:column="19">.<pos:position pos:line="14" pos:column="20"/></operator><name pos:line="14" pos:column="20">desc<pos:position pos:line="14" pos:column="24"/></name></name> <operator pos:line="14" pos:column="25">=<pos:position pos:line="14" pos:column="26"/></operator> <literal type="string" pos:line="14" pos:column="27">"Invalid syntax in Destination URI."<pos:position pos:line="14" pos:column="63"/></literal></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>
	<return pos:line="15" pos:column="9">return <expr><name pos:line="15" pos:column="16">result<pos:position pos:line="15" pos:column="22"/></name></expr>;<pos:position pos:line="15" pos:column="23"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="18" pos:column="5">/* the URI must be an absoluteURI (WEBDAV S9.3) */</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name><name pos:line="19" pos:column="9">comp<pos:position pos:line="19" pos:column="13"/></name><operator pos:line="19" pos:column="13">.<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">scheme<pos:position pos:line="19" pos:column="20"/></name></name> <operator pos:line="19" pos:column="21">==<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="24">NULL<pos:position pos:line="19" pos:column="28"/></name> <operator pos:line="19" pos:column="29">&amp;&amp;<pos:position pos:line="19" pos:column="39"/></operator> <name pos:line="19" pos:column="32">must_be_absolute<pos:position pos:line="19" pos:column="48"/></name></expr>)<pos:position pos:line="19" pos:column="49"/></condition><then pos:line="19" pos:column="49"> <block pos:line="19" pos:column="50">{
	<expr_stmt><expr><name><name pos:line="20" pos:column="9">result<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">.<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="16">err<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">.<pos:position pos:line="20" pos:column="20"/></operator><name pos:line="20" pos:column="20">status<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="29">HTTP_BAD_REQUEST<pos:position pos:line="20" pos:column="45"/></name></expr>;<pos:position pos:line="20" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="21" pos:column="9">result<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">.<pos:position pos:line="21" pos:column="16"/></operator><name pos:line="21" pos:column="16">err<pos:position pos:line="21" pos:column="19"/></name><operator pos:line="21" pos:column="19">.<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="20">desc<pos:position pos:line="21" pos:column="24"/></name></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <literal type="string" pos:line="21" pos:column="27">"Destination URI must be an absolute URI."<pos:position pos:line="21" pos:column="69"/></literal></expr>;<pos:position pos:line="21" pos:column="70"/></expr_stmt>
	<return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">result<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="25" pos:column="5">/* the URI must not have a query (args) or a fragment */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name><name pos:line="26" pos:column="9">comp<pos:position pos:line="26" pos:column="13"/></name><operator pos:line="26" pos:column="13">.<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">query<pos:position pos:line="26" pos:column="19"/></name></name> <operator pos:line="26" pos:column="20">!=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">NULL<pos:position pos:line="26" pos:column="27"/></name> <operator pos:line="26" pos:column="28">||<pos:position pos:line="26" pos:column="30"/></operator> <name><name pos:line="26" pos:column="31">comp<pos:position pos:line="26" pos:column="35"/></name><operator pos:line="26" pos:column="35">.<pos:position pos:line="26" pos:column="36"/></operator><name pos:line="26" pos:column="36">fragment<pos:position pos:line="26" pos:column="44"/></name></name> <operator pos:line="26" pos:column="45">!=<pos:position pos:line="26" pos:column="47"/></operator> <name pos:line="26" pos:column="48">NULL<pos:position pos:line="26" pos:column="52"/></name></expr>)<pos:position pos:line="26" pos:column="53"/></condition><then pos:line="26" pos:column="53"> <block pos:line="26" pos:column="54">{
	<expr_stmt><expr><name><name pos:line="27" pos:column="9">result<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">.<pos:position pos:line="27" pos:column="16"/></operator><name pos:line="27" pos:column="16">err<pos:position pos:line="27" pos:column="19"/></name><operator pos:line="27" pos:column="19">.<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">status<pos:position pos:line="27" pos:column="26"/></name></name> <operator pos:line="27" pos:column="27">=<pos:position pos:line="27" pos:column="28"/></operator> <name pos:line="27" pos:column="29">HTTP_BAD_REQUEST<pos:position pos:line="27" pos:column="45"/></name></expr>;<pos:position pos:line="27" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="28" pos:column="9">result<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">.<pos:position pos:line="28" pos:column="16"/></operator><name pos:line="28" pos:column="16">err<pos:position pos:line="28" pos:column="19"/></name><operator pos:line="28" pos:column="19">.<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="20">desc<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">=<pos:position pos:line="28" pos:column="26"/></operator>
	    <literal type="string" pos:line="29" pos:column="13">"Destination URI contains invalid components "<pos:position pos:line="29" pos:column="59"/></literal>
	    <literal type="string" pos:line="30" pos:column="13">"(a query or a fragment)."<pos:position pos:line="30" pos:column="39"/></literal></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
	<return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">result<pos:position pos:line="31" pos:column="22"/></name></expr>;<pos:position pos:line="31" pos:column="23"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="34" pos:column="5">/* If the scheme or port was provided, then make sure that it matches
       the scheme/port of this request. If the request must be absolute,
       then require the (explicit/implicit) scheme/port be matching.

       ### hmm. if a port wasn't provided (does the parse return port==0?),
       ### but we're on a non-standard port, then we won't detect that the
       ### URI's port implies the wrong one.
    */</comment>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name><name pos:line="42" pos:column="9">comp<pos:position pos:line="42" pos:column="13"/></name><operator pos:line="42" pos:column="13">.<pos:position pos:line="42" pos:column="14"/></operator><name pos:line="42" pos:column="14">scheme<pos:position pos:line="42" pos:column="20"/></name></name> <operator pos:line="42" pos:column="21">!=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">NULL<pos:position pos:line="42" pos:column="28"/></name> <operator pos:line="42" pos:column="29">||<pos:position pos:line="42" pos:column="31"/></operator> <name><name pos:line="42" pos:column="32">comp<pos:position pos:line="42" pos:column="36"/></name><operator pos:line="42" pos:column="36">.<pos:position pos:line="42" pos:column="37"/></operator><name pos:line="42" pos:column="37">port<pos:position pos:line="42" pos:column="41"/></name></name> <operator pos:line="42" pos:column="42">!=<pos:position pos:line="42" pos:column="44"/></operator> <literal type="number" pos:line="42" pos:column="45">0<pos:position pos:line="42" pos:column="46"/></literal> <operator pos:line="42" pos:column="47">||<pos:position pos:line="42" pos:column="49"/></operator> <name pos:line="42" pos:column="50">must_be_absolute<pos:position pos:line="42" pos:column="66"/></name></expr>)<pos:position pos:line="42" pos:column="67"/></condition><then pos:line="42" pos:column="67">
    <block pos:line="43" pos:column="5">{
        <comment type="block" pos:line="44" pos:column="9">/* ### not sure this works if the current request came in via https: */</comment>
        <expr_stmt><expr><name pos:line="45" pos:column="9">scheme<pos:position pos:line="45" pos:column="15"/></name> <operator pos:line="45" pos:column="16">=<pos:position pos:line="45" pos:column="17"/></operator> <name><name pos:line="45" pos:column="18">r<pos:position pos:line="45" pos:column="19"/></name><operator pos:line="45" pos:column="19">-&gt;<pos:position pos:line="45" pos:column="24"/></operator><name pos:line="45" pos:column="21">parsed_uri<pos:position pos:line="45" pos:column="31"/></name><operator pos:line="45" pos:column="31">.<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="32">scheme<pos:position pos:line="45" pos:column="38"/></name></name></expr>;<pos:position pos:line="45" pos:column="39"/></expr_stmt>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">scheme<pos:position pos:line="46" pos:column="19"/></name> <operator pos:line="46" pos:column="20">==<pos:position pos:line="46" pos:column="22"/></operator> <name pos:line="46" pos:column="23">NULL<pos:position pos:line="46" pos:column="27"/></name></expr>)<pos:position pos:line="46" pos:column="28"/></condition><then pos:line="46" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><name pos:line="47" pos:column="13">scheme<pos:position pos:line="47" pos:column="19"/></name> <operator pos:line="47" pos:column="20">=<pos:position pos:line="47" pos:column="21"/></operator> <call><name pos:line="47" pos:column="22">ap_http_method<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><name pos:line="47" pos:column="37">r<pos:position pos:line="47" pos:column="38"/></name></expr></argument>)<pos:position pos:line="47" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="40"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="49" pos:column="9">/* insert a port if the URI did not contain one */</comment>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name><name pos:line="50" pos:column="13">comp<pos:position pos:line="50" pos:column="17"/></name><operator pos:line="50" pos:column="17">.<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="18">port<pos:position pos:line="50" pos:column="22"/></name></name> <operator pos:line="50" pos:column="23">==<pos:position pos:line="50" pos:column="25"/></operator> <literal type="number" pos:line="50" pos:column="26">0<pos:position pos:line="50" pos:column="27"/></literal></expr>)<pos:position pos:line="50" pos:column="28"/></condition><then pos:line="50" pos:column="28">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="51" pos:column="13">comp<pos:position pos:line="51" pos:column="17"/></name><operator pos:line="51" pos:column="17">.<pos:position pos:line="51" pos:column="18"/></operator><name pos:line="51" pos:column="18">port<pos:position pos:line="51" pos:column="22"/></name></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <call><name pos:line="51" pos:column="25">apr_uri_port_of_scheme<pos:position pos:line="51" pos:column="47"/></name><argument_list pos:line="51" pos:column="47">(<argument><expr><name><name pos:line="51" pos:column="48">comp<pos:position pos:line="51" pos:column="52"/></name><operator pos:line="51" pos:column="52">.<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="53">scheme<pos:position pos:line="51" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="61"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="53" pos:column="9">/* now, verify that the URI uses the same scheme as the current.
           request. the port must match our port.
        */</comment>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">apr_sockaddr_port_get<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><operator pos:line="56" pos:column="31">&amp;<pos:position pos:line="56" pos:column="36"/></operator><name pos:line="56" pos:column="32">port<pos:position pos:line="56" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="38">r<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">-&gt;<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="41">connection<pos:position pos:line="56" pos:column="51"/></name><operator pos:line="56" pos:column="51">-&gt;<pos:position pos:line="56" pos:column="56"/></operator><name pos:line="56" pos:column="53">local_addr<pos:position pos:line="56" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="65"/></expr_stmt>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><call><name pos:line="57" pos:column="13">strcasecmp<pos:position pos:line="57" pos:column="23"/></name><argument_list pos:line="57" pos:column="23">(<argument><expr><name><name pos:line="57" pos:column="24">comp<pos:position pos:line="57" pos:column="28"/></name><operator pos:line="57" pos:column="28">.<pos:position pos:line="57" pos:column="29"/></operator><name pos:line="57" pos:column="29">scheme<pos:position pos:line="57" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="37">scheme<pos:position pos:line="57" pos:column="43"/></name></expr></argument>)<pos:position pos:line="57" pos:column="44"/></argument_list></call> <operator pos:line="57" pos:column="45">!=<pos:position pos:line="57" pos:column="47"/></operator> <literal type="number" pos:line="57" pos:column="48">0<pos:position pos:line="57" pos:column="49"/></literal>
<cpp:ifdef pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">ifdef<pos:position pos:line="58" pos:column="7"/></cpp:directive> <name pos:line="58" pos:column="8">APACHE_PORT_HANDLING_IS_BUSTED<pos:position pos:line="58" pos:column="38"/></name></cpp:ifdef>
            <operator pos:line="59" pos:column="13">||<pos:position pos:line="59" pos:column="15"/></operator> <name><name pos:line="59" pos:column="16">comp<pos:position pos:line="59" pos:column="20"/></name><operator pos:line="59" pos:column="20">.<pos:position pos:line="59" pos:column="21"/></operator><name pos:line="59" pos:column="21">port<pos:position pos:line="59" pos:column="25"/></name></name> <operator pos:line="59" pos:column="26">!=<pos:position pos:line="59" pos:column="28"/></operator> <name pos:line="59" pos:column="29">port<pos:position pos:line="59" pos:column="33"/></name></expr>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif>
            )<pos:position pos:line="61" pos:column="14"/></condition><then pos:line="61" pos:column="14"> <block pos:line="61" pos:column="15">{
            <expr_stmt><expr><name><name pos:line="62" pos:column="13">result<pos:position pos:line="62" pos:column="19"/></name><operator pos:line="62" pos:column="19">.<pos:position pos:line="62" pos:column="20"/></operator><name pos:line="62" pos:column="20">err<pos:position pos:line="62" pos:column="23"/></name><operator pos:line="62" pos:column="23">.<pos:position pos:line="62" pos:column="24"/></operator><name pos:line="62" pos:column="24">status<pos:position pos:line="62" pos:column="30"/></name></name> <operator pos:line="62" pos:column="31">=<pos:position pos:line="62" pos:column="32"/></operator> <name pos:line="62" pos:column="33">HTTP_BAD_GATEWAY<pos:position pos:line="62" pos:column="49"/></name></expr>;<pos:position pos:line="62" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="63" pos:column="13">result<pos:position pos:line="63" pos:column="19"/></name><operator pos:line="63" pos:column="19">.<pos:position pos:line="63" pos:column="20"/></operator><name pos:line="63" pos:column="20">err<pos:position pos:line="63" pos:column="23"/></name><operator pos:line="63" pos:column="23">.<pos:position pos:line="63" pos:column="24"/></operator><name pos:line="63" pos:column="24">desc<pos:position pos:line="63" pos:column="28"/></name></name> <operator pos:line="63" pos:column="29">=<pos:position pos:line="63" pos:column="30"/></operator> <call><name pos:line="63" pos:column="31">apr_psprintf<pos:position pos:line="63" pos:column="43"/></name><argument_list pos:line="63" pos:column="43">(<argument><expr><name><name pos:line="63" pos:column="44">r<pos:position pos:line="63" pos:column="45"/></name><operator pos:line="63" pos:column="45">-&gt;<pos:position pos:line="63" pos:column="50"/></operator><name pos:line="63" pos:column="47">pool<pos:position pos:line="63" pos:column="51"/></name></name></expr></argument>,
                                           <argument><expr><literal type="string" pos:line="64" pos:column="44">"Destination URI refers to "<pos:position pos:line="64" pos:column="72"/></literal>
                                           <literal type="string" pos:line="65" pos:column="44">"different scheme or port "<pos:position pos:line="65" pos:column="71"/></literal>
                                           <literal type="string" pos:line="66" pos:column="44">"(%s://hostname:%d)"<pos:position pos:line="66" pos:column="64"/></literal> <name pos:line="66" pos:column="65">APR_EOL_STR<pos:position pos:line="66" pos:column="76"/></name>
                                           <literal type="string" pos:line="67" pos:column="44">"(want: %s://hostname:%d)"<pos:position pos:line="67" pos:column="70"/></literal></expr></argument>,
                                           <argument><expr><ternary><condition><expr><name><name pos:line="68" pos:column="44">comp<pos:position pos:line="68" pos:column="48"/></name><operator pos:line="68" pos:column="48">.<pos:position pos:line="68" pos:column="49"/></operator><name pos:line="68" pos:column="49">scheme<pos:position pos:line="68" pos:column="55"/></name></name></expr> ?<pos:position pos:line="68" pos:column="57"/></condition><then pos:line="68" pos:column="57"> <expr><name><name pos:line="68" pos:column="58">comp<pos:position pos:line="68" pos:column="62"/></name><operator pos:line="68" pos:column="62">.<pos:position pos:line="68" pos:column="63"/></operator><name pos:line="68" pos:column="63">scheme<pos:position pos:line="68" pos:column="69"/></name></name></expr> <pos:position pos:line="68" pos:column="70"/></then><else pos:line="68" pos:column="70">: <expr><name pos:line="68" pos:column="72">scheme<pos:position pos:line="68" pos:column="78"/></name></expr></else></ternary></expr></argument>,
                                           <argument><expr><ternary><condition><expr><name><name pos:line="69" pos:column="44">comp<pos:position pos:line="69" pos:column="48"/></name><operator pos:line="69" pos:column="48">.<pos:position pos:line="69" pos:column="49"/></operator><name pos:line="69" pos:column="49">port<pos:position pos:line="69" pos:column="53"/></name></name></expr> ?<pos:position pos:line="69" pos:column="55"/></condition><then pos:line="69" pos:column="55"> <expr><name><name pos:line="69" pos:column="56">comp<pos:position pos:line="69" pos:column="60"/></name><operator pos:line="69" pos:column="60">.<pos:position pos:line="69" pos:column="61"/></operator><name pos:line="69" pos:column="61">port<pos:position pos:line="69" pos:column="65"/></name></name></expr> <pos:position pos:line="69" pos:column="66"/></then><else pos:line="69" pos:column="66">: <expr><name pos:line="69" pos:column="68">port<pos:position pos:line="69" pos:column="72"/></name></expr></else></ternary></expr></argument>,
                                           <argument><expr><name pos:line="70" pos:column="44">scheme<pos:position pos:line="70" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="52">port<pos:position pos:line="70" pos:column="56"/></name></expr></argument>)<pos:position pos:line="70" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="58"/></expr_stmt>
            <return pos:line="71" pos:column="13">return <expr><name pos:line="71" pos:column="20">result<pos:position pos:line="71" pos:column="26"/></name></expr>;<pos:position pos:line="71" pos:column="27"/></return>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="75" pos:column="5">/* we have verified the scheme, port, and general structure */</comment>

    <comment type="block" pos:line="77" pos:column="5">/*
    ** Hrm.  IE5 will pass unqualified hostnames for both the 
    ** Host: and Destination: headers.  This breaks the
    ** http_vhost.c::matches_aliases function.
    **
    ** For now, qualify unqualified comp.hostnames with
    ** r-&gt;server-&gt;server_hostname.
    **
    ** ### this is a big hack. Apache should provide a better way.
    ** ### maybe the admin should list the unqualified hosts in a
    ** ### &lt;ServerAlias&gt; block?
    */</comment>
    <if pos:line="89" pos:column="5">if <condition pos:line="89" pos:column="8">(<expr><name><name pos:line="89" pos:column="9">comp<pos:position pos:line="89" pos:column="13"/></name><operator pos:line="89" pos:column="13">.<pos:position pos:line="89" pos:column="14"/></operator><name pos:line="89" pos:column="14">hostname<pos:position pos:line="89" pos:column="22"/></name></name> <operator pos:line="89" pos:column="23">!=<pos:position pos:line="89" pos:column="25"/></operator> <name pos:line="89" pos:column="26">NULL<pos:position pos:line="89" pos:column="30"/></name>
        <operator pos:line="90" pos:column="9">&amp;&amp;<pos:position pos:line="90" pos:column="19"/></operator> <call><name pos:line="90" pos:column="12">strrchr<pos:position pos:line="90" pos:column="19"/></name><argument_list pos:line="90" pos:column="19">(<argument><expr><name><name pos:line="90" pos:column="20">comp<pos:position pos:line="90" pos:column="24"/></name><operator pos:line="90" pos:column="24">.<pos:position pos:line="90" pos:column="25"/></operator><name pos:line="90" pos:column="25">hostname<pos:position pos:line="90" pos:column="33"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="90" pos:column="35">'.'<pos:position pos:line="90" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="39"/></argument_list></call> <operator pos:line="90" pos:column="40">==<pos:position pos:line="90" pos:column="42"/></operator> <name pos:line="90" pos:column="43">NULL<pos:position pos:line="90" pos:column="47"/></name>
	<operator pos:line="91" pos:column="9">&amp;&amp;<pos:position pos:line="91" pos:column="19"/></operator> <operator pos:line="91" pos:column="12">(<pos:position pos:line="91" pos:column="13"/></operator><name pos:line="91" pos:column="13">domain<pos:position pos:line="91" pos:column="19"/></name> <operator pos:line="91" pos:column="20">=<pos:position pos:line="91" pos:column="21"/></operator> <call><name pos:line="91" pos:column="22">strchr<pos:position pos:line="91" pos:column="28"/></name><argument_list pos:line="91" pos:column="28">(<argument><expr><name><name pos:line="91" pos:column="29">r<pos:position pos:line="91" pos:column="30"/></name><operator pos:line="91" pos:column="30">-&gt;<pos:position pos:line="91" pos:column="35"/></operator><name pos:line="91" pos:column="32">server<pos:position pos:line="91" pos:column="38"/></name><operator pos:line="91" pos:column="38">-&gt;<pos:position pos:line="91" pos:column="43"/></operator><name pos:line="91" pos:column="40">server_hostname<pos:position pos:line="91" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="91" pos:column="57">'.'<pos:position pos:line="91" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="61"/></argument_list></call><operator pos:line="91" pos:column="61">)<pos:position pos:line="91" pos:column="62"/></operator> <operator pos:line="91" pos:column="63">!=<pos:position pos:line="91" pos:column="65"/></operator> <name pos:line="91" pos:column="66">NULL<pos:position pos:line="91" pos:column="70"/></name></expr>)<pos:position pos:line="91" pos:column="71"/></condition><then pos:line="91" pos:column="71"> <block pos:line="91" pos:column="72">{
	<expr_stmt><expr><name><name pos:line="92" pos:column="9">comp<pos:position pos:line="92" pos:column="13"/></name><operator pos:line="92" pos:column="13">.<pos:position pos:line="92" pos:column="14"/></operator><name pos:line="92" pos:column="14">hostname<pos:position pos:line="92" pos:column="22"/></name></name> <operator pos:line="92" pos:column="23">=<pos:position pos:line="92" pos:column="24"/></operator> <call><name pos:line="92" pos:column="25">apr_pstrcat<pos:position pos:line="92" pos:column="36"/></name><argument_list pos:line="92" pos:column="36">(<argument><expr><name><name pos:line="92" pos:column="37">r<pos:position pos:line="92" pos:column="38"/></name><operator pos:line="92" pos:column="38">-&gt;<pos:position pos:line="92" pos:column="43"/></operator><name pos:line="92" pos:column="40">pool<pos:position pos:line="92" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="92" pos:column="46">comp<pos:position pos:line="92" pos:column="50"/></name><operator pos:line="92" pos:column="50">.<pos:position pos:line="92" pos:column="51"/></operator><name pos:line="92" pos:column="51">hostname<pos:position pos:line="92" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="61">domain<pos:position pos:line="92" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="69">NULL<pos:position pos:line="92" pos:column="73"/></name></expr></argument>)<pos:position pos:line="92" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="93" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="95" pos:column="5">/* now, if a hostname was provided, then verify that it represents the
       same server as the current connection. note that we just use our
       port, since we've verified the URI matches ours */</comment>
<cpp:ifdef pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">ifdef<pos:position pos:line="98" pos:column="7"/></cpp:directive> <name pos:line="98" pos:column="8">APACHE_PORT_HANDLING_IS_BUSTED<pos:position pos:line="98" pos:column="38"/></name></cpp:ifdef>
    <if pos:line="99" pos:column="5">if <condition pos:line="99" pos:column="8">(<expr><name><name pos:line="99" pos:column="9">comp<pos:position pos:line="99" pos:column="13"/></name><operator pos:line="99" pos:column="13">.<pos:position pos:line="99" pos:column="14"/></operator><name pos:line="99" pos:column="14">hostname<pos:position pos:line="99" pos:column="22"/></name></name> <operator pos:line="99" pos:column="23">!=<pos:position pos:line="99" pos:column="25"/></operator> <name pos:line="99" pos:column="26">NULL<pos:position pos:line="99" pos:column="30"/></name> <operator pos:line="99" pos:column="31">&amp;&amp;<pos:position pos:line="99" pos:column="41"/></operator>
	<operator pos:line="100" pos:column="9">!<pos:position pos:line="100" pos:column="10"/></operator><call><name pos:line="100" pos:column="10">ap_matches_request_vhost<pos:position pos:line="100" pos:column="34"/></name><argument_list pos:line="100" pos:column="34">(<argument><expr><name pos:line="100" pos:column="35">r<pos:position pos:line="100" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="100" pos:column="38">comp<pos:position pos:line="100" pos:column="42"/></name><operator pos:line="100" pos:column="42">.<pos:position pos:line="100" pos:column="43"/></operator><name pos:line="100" pos:column="43">hostname<pos:position pos:line="100" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="53">port<pos:position pos:line="100" pos:column="57"/></name></expr></argument>)<pos:position pos:line="100" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="59"/></condition><then pos:line="100" pos:column="59"> <block pos:line="100" pos:column="60">{
	<expr_stmt><expr><name><name pos:line="101" pos:column="9">result<pos:position pos:line="101" pos:column="15"/></name><operator pos:line="101" pos:column="15">.<pos:position pos:line="101" pos:column="16"/></operator><name pos:line="101" pos:column="16">err<pos:position pos:line="101" pos:column="19"/></name><operator pos:line="101" pos:column="19">.<pos:position pos:line="101" pos:column="20"/></operator><name pos:line="101" pos:column="20">status<pos:position pos:line="101" pos:column="26"/></name></name> <operator pos:line="101" pos:column="27">=<pos:position pos:line="101" pos:column="28"/></operator> <name pos:line="101" pos:column="29">HTTP_BAD_GATEWAY<pos:position pos:line="101" pos:column="45"/></name></expr>;<pos:position pos:line="101" pos:column="46"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="102" pos:column="9">result<pos:position pos:line="102" pos:column="15"/></name><operator pos:line="102" pos:column="15">.<pos:position pos:line="102" pos:column="16"/></operator><name pos:line="102" pos:column="16">err<pos:position pos:line="102" pos:column="19"/></name><operator pos:line="102" pos:column="19">.<pos:position pos:line="102" pos:column="20"/></operator><name pos:line="102" pos:column="20">desc<pos:position pos:line="102" pos:column="24"/></name></name> <operator pos:line="102" pos:column="25">=<pos:position pos:line="102" pos:column="26"/></operator> <literal type="string" pos:line="102" pos:column="27">"Destination URI refers to a different server."<pos:position pos:line="102" pos:column="74"/></literal></expr>;<pos:position pos:line="102" pos:column="75"/></expr_stmt>
	<return pos:line="103" pos:column="9">return <expr><name pos:line="103" pos:column="16">result<pos:position pos:line="103" pos:column="22"/></name></expr>;<pos:position pos:line="103" pos:column="23"/></return>
    }<pos:position pos:line="104" pos:column="6"/></block></then></if>
<cpp:endif pos:line="105" pos:column="1">#<cpp:directive pos:line="105" pos:column="2">endif<pos:position pos:line="105" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="107" pos:column="5">/* we have verified that the requested URI denotes the same server as
       the current request. Therefore, we can use ap_sub_req_lookup_uri() */</comment>

    <comment type="block" pos:line="110" pos:column="5">/* reconstruct a URI as just the path */</comment>
    <expr_stmt><expr><name pos:line="111" pos:column="5">new_file<pos:position pos:line="111" pos:column="13"/></name> <operator pos:line="111" pos:column="14">=<pos:position pos:line="111" pos:column="15"/></operator> <call><name pos:line="111" pos:column="16">apr_uri_unparse<pos:position pos:line="111" pos:column="31"/></name><argument_list pos:line="111" pos:column="31">(<argument><expr><name><name pos:line="111" pos:column="32">r<pos:position pos:line="111" pos:column="33"/></name><operator pos:line="111" pos:column="33">-&gt;<pos:position pos:line="111" pos:column="38"/></operator><name pos:line="111" pos:column="35">pool<pos:position pos:line="111" pos:column="39"/></name></name></expr></argument>, <argument><expr><operator pos:line="111" pos:column="41">&amp;<pos:position pos:line="111" pos:column="46"/></operator><name pos:line="111" pos:column="42">comp<pos:position pos:line="111" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="48">APR_URI_UNP_OMITSITEPART<pos:position pos:line="111" pos:column="72"/></name></expr></argument>)<pos:position pos:line="111" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="74"/></expr_stmt>

    <comment type="block" pos:line="113" pos:column="5">/*
     * Lookup the URI and return the sub-request. Note that we use the
     * same HTTP method on the destination. This allows the destination
     * to apply appropriate restrictions (e.g. readonly).
     */</comment>
    <expr_stmt><expr><name><name pos:line="118" pos:column="5">result<pos:position pos:line="118" pos:column="11"/></name><operator pos:line="118" pos:column="11">.<pos:position pos:line="118" pos:column="12"/></operator><name pos:line="118" pos:column="12">rnew<pos:position pos:line="118" pos:column="16"/></name></name> <operator pos:line="118" pos:column="17">=<pos:position pos:line="118" pos:column="18"/></operator> <call><name pos:line="118" pos:column="19">ap_sub_req_method_uri<pos:position pos:line="118" pos:column="40"/></name><argument_list pos:line="118" pos:column="40">(<argument><expr><name><name pos:line="118" pos:column="41">r<pos:position pos:line="118" pos:column="42"/></name><operator pos:line="118" pos:column="42">-&gt;<pos:position pos:line="118" pos:column="47"/></operator><name pos:line="118" pos:column="44">method<pos:position pos:line="118" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="52">new_file<pos:position pos:line="118" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="62">r<pos:position pos:line="118" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="65">NULL<pos:position pos:line="118" pos:column="69"/></name></expr></argument>)<pos:position pos:line="118" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="71"/></expr_stmt>

    <return pos:line="120" pos:column="5">return <expr><name pos:line="120" pos:column="12">result<pos:position pos:line="120" pos:column="18"/></name></expr>;<pos:position pos:line="120" pos:column="19"/></return>
}<pos:position pos:line="121" pos:column="2"/></block></function></unit>
