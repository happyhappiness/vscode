<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2935_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">core_expr_lookup<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">ap_expr_lookup_parms<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">parms<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <switch pos:line="3" pos:column="5">switch <condition pos:line="3" pos:column="12">(<expr><name><name pos:line="3" pos:column="13">parms<pos:position pos:line="3" pos:column="18"/></name><operator pos:line="3" pos:column="18">-&gt;<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="20">type<pos:position pos:line="3" pos:column="24"/></name></name></expr>)<pos:position pos:line="3" pos:column="25"/></condition> <block pos:line="3" pos:column="26">{
    <case pos:line="4" pos:column="5">case <expr><name pos:line="4" pos:column="10">AP_EXPR_FUNC_VAR<pos:position pos:line="4" pos:column="26"/></name></expr>:<pos:position pos:line="4" pos:column="27"/></case> <block pos:line="4" pos:column="28">{
            <decl_stmt><decl><type><specifier pos:line="5" pos:column="13">const<pos:position pos:line="5" pos:column="18"/></specifier> <name><name pos:line="5" pos:column="19">struct<pos:position pos:line="5" pos:column="25"/></name> <name pos:line="5" pos:column="26">expr_provider_multi<pos:position pos:line="5" pos:column="45"/></name></name> <modifier pos:line="5" pos:column="46">*<pos:position pos:line="5" pos:column="47"/></modifier></type><name pos:line="5" pos:column="47">prov<pos:position pos:line="5" pos:column="51"/></name> <init pos:line="5" pos:column="52">= <expr><name pos:line="5" pos:column="54">var_providers<pos:position pos:line="5" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="68"/></decl_stmt>
            <while pos:line="6" pos:column="13">while <condition pos:line="6" pos:column="19">(<expr><name><name pos:line="6" pos:column="20">prov<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">-&gt;<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="26">func<pos:position pos:line="6" pos:column="30"/></name></name></expr>)<pos:position pos:line="6" pos:column="31"/></condition> <block pos:line="6" pos:column="32">{
                <decl_stmt><decl><type><specifier pos:line="7" pos:column="17">const<pos:position pos:line="7" pos:column="22"/></specifier> <name pos:line="7" pos:column="23">char<pos:position pos:line="7" pos:column="27"/></name> <modifier pos:line="7" pos:column="28">*<pos:position pos:line="7" pos:column="29"/></modifier><modifier pos:line="7" pos:column="29">*<pos:position pos:line="7" pos:column="30"/></modifier></type><name pos:line="7" pos:column="30">name<pos:position pos:line="7" pos:column="34"/></name> <init pos:line="7" pos:column="35">= <expr><name><name pos:line="7" pos:column="37">prov<pos:position pos:line="7" pos:column="41"/></name><operator pos:line="7" pos:column="41">-&gt;<pos:position pos:line="7" pos:column="46"/></operator><name pos:line="7" pos:column="43">names<pos:position pos:line="7" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="49"/></decl_stmt>
                <while pos:line="8" pos:column="17">while <condition pos:line="8" pos:column="23">(<expr><operator pos:line="8" pos:column="24">*<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="25">name<pos:position pos:line="8" pos:column="29"/></name></expr>)<pos:position pos:line="8" pos:column="30"/></condition> <block pos:line="8" pos:column="31">{
                    <if pos:line="9" pos:column="21">if <condition pos:line="9" pos:column="24">(<expr><call><name pos:line="9" pos:column="25">strcasecmp<pos:position pos:line="9" pos:column="35"/></name><argument_list pos:line="9" pos:column="35">(<argument><expr><operator pos:line="9" pos:column="36">*<pos:position pos:line="9" pos:column="37"/></operator><name pos:line="9" pos:column="37">name<pos:position pos:line="9" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="43">parms<pos:position pos:line="9" pos:column="48"/></name><operator pos:line="9" pos:column="48">-&gt;<pos:position pos:line="9" pos:column="53"/></operator><name pos:line="9" pos:column="50">name<pos:position pos:line="9" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="55"/></argument_list></call> <operator pos:line="9" pos:column="56">==<pos:position pos:line="9" pos:column="58"/></operator> <literal type="number" pos:line="9" pos:column="59">0<pos:position pos:line="9" pos:column="60"/></literal></expr>)<pos:position pos:line="9" pos:column="61"/></condition><then pos:line="9" pos:column="61"> <block pos:line="9" pos:column="62">{
                        <expr_stmt><expr><operator pos:line="10" pos:column="25">*<pos:position pos:line="10" pos:column="26"/></operator><name><name pos:line="10" pos:column="26">parms<pos:position pos:line="10" pos:column="31"/></name><operator pos:line="10" pos:column="31">-&gt;<pos:position pos:line="10" pos:column="36"/></operator><name pos:line="10" pos:column="33">func<pos:position pos:line="10" pos:column="37"/></name></name> <operator pos:line="10" pos:column="38">=<pos:position pos:line="10" pos:column="39"/></operator> <name><name pos:line="10" pos:column="40">prov<pos:position pos:line="10" pos:column="44"/></name><operator pos:line="10" pos:column="44">-&gt;<pos:position pos:line="10" pos:column="49"/></operator><name pos:line="10" pos:column="46">func<pos:position pos:line="10" pos:column="50"/></name></name></expr>;<pos:position pos:line="10" pos:column="51"/></expr_stmt>
                        <expr_stmt><expr><operator pos:line="11" pos:column="25">*<pos:position pos:line="11" pos:column="26"/></operator><name><name pos:line="11" pos:column="26">parms<pos:position pos:line="11" pos:column="31"/></name><operator pos:line="11" pos:column="31">-&gt;<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="33">data<pos:position pos:line="11" pos:column="37"/></name></name> <operator pos:line="11" pos:column="38">=<pos:position pos:line="11" pos:column="39"/></operator> <name pos:line="11" pos:column="40">name<pos:position pos:line="11" pos:column="44"/></name></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>
                        <return pos:line="12" pos:column="25">return <expr><name pos:line="12" pos:column="32">OK<pos:position pos:line="12" pos:column="34"/></name></expr>;<pos:position pos:line="12" pos:column="35"/></return>
                    }<pos:position pos:line="13" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><name pos:line="14" pos:column="21">name<pos:position pos:line="14" pos:column="25"/></name><operator pos:line="14" pos:column="25">++<pos:position pos:line="14" pos:column="27"/></operator></expr>;<pos:position pos:line="14" pos:column="28"/></expr_stmt>
                }<pos:position pos:line="15" pos:column="18"/></block></while>
                <expr_stmt><expr><name pos:line="16" pos:column="17">prov<pos:position pos:line="16" pos:column="21"/></name><operator pos:line="16" pos:column="21">++<pos:position pos:line="16" pos:column="23"/></operator></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="17" pos:column="14"/></block></while>
        }<pos:position pos:line="18" pos:column="10"/></block>
        <break pos:line="19" pos:column="9">break;<pos:position pos:line="19" pos:column="15"/></break>
    <case pos:line="20" pos:column="5">case <expr><name pos:line="20" pos:column="10">AP_EXPR_FUNC_STRING<pos:position pos:line="20" pos:column="29"/></name></expr>:<pos:position pos:line="20" pos:column="30"/></case>
    <case pos:line="21" pos:column="5">case <expr><name pos:line="21" pos:column="10">AP_EXPR_FUNC_OP_UNARY<pos:position pos:line="21" pos:column="31"/></name></expr>:<pos:position pos:line="21" pos:column="32"/></case>
    <case pos:line="22" pos:column="5">case <expr><name pos:line="22" pos:column="10">AP_EXPR_FUNC_OP_BINARY<pos:position pos:line="22" pos:column="32"/></name></expr>:<pos:position pos:line="22" pos:column="33"/></case> <block pos:line="22" pos:column="34">{
            <decl_stmt><decl><type><specifier pos:line="23" pos:column="13">const<pos:position pos:line="23" pos:column="18"/></specifier> <name><name pos:line="23" pos:column="19">struct<pos:position pos:line="23" pos:column="25"/></name> <name pos:line="23" pos:column="26">expr_provider_single<pos:position pos:line="23" pos:column="46"/></name></name> <modifier pos:line="23" pos:column="47">*<pos:position pos:line="23" pos:column="48"/></modifier></type><name pos:line="23" pos:column="48">prov<pos:position pos:line="23" pos:column="52"/></name></decl>;<pos:position pos:line="23" pos:column="53"/></decl_stmt>
            <switch pos:line="24" pos:column="13">switch <condition pos:line="24" pos:column="20">(<expr><name><name pos:line="24" pos:column="21">parms<pos:position pos:line="24" pos:column="26"/></name><operator pos:line="24" pos:column="26">-&gt;<pos:position pos:line="24" pos:column="31"/></operator><name pos:line="24" pos:column="28">type<pos:position pos:line="24" pos:column="32"/></name></name></expr>)<pos:position pos:line="24" pos:column="33"/></condition> <block pos:line="24" pos:column="34">{
            <case pos:line="25" pos:column="13">case <expr><name pos:line="25" pos:column="18">AP_EXPR_FUNC_STRING<pos:position pos:line="25" pos:column="37"/></name></expr>:<pos:position pos:line="25" pos:column="38"/></case>
                <expr_stmt><expr><name pos:line="26" pos:column="17">prov<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <name pos:line="26" pos:column="24">string_func_providers<pos:position pos:line="26" pos:column="45"/></name></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>
                <break pos:line="27" pos:column="17">break;<pos:position pos:line="27" pos:column="23"/></break>
            <case pos:line="28" pos:column="13">case <expr><name pos:line="28" pos:column="18">AP_EXPR_FUNC_OP_UNARY<pos:position pos:line="28" pos:column="39"/></name></expr>:<pos:position pos:line="28" pos:column="40"/></case>
                <expr_stmt><expr><name pos:line="29" pos:column="17">prov<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <name pos:line="29" pos:column="24">unary_op_providers<pos:position pos:line="29" pos:column="42"/></name></expr>;<pos:position pos:line="29" pos:column="43"/></expr_stmt>
                <break pos:line="30" pos:column="17">break;<pos:position pos:line="30" pos:column="23"/></break>
            <case pos:line="31" pos:column="13">case <expr><name pos:line="31" pos:column="18">AP_EXPR_FUNC_OP_BINARY<pos:position pos:line="31" pos:column="40"/></name></expr>:<pos:position pos:line="31" pos:column="41"/></case>
                <expr_stmt><expr><name pos:line="32" pos:column="17">prov<pos:position pos:line="32" pos:column="21"/></name> <operator pos:line="32" pos:column="22">=<pos:position pos:line="32" pos:column="23"/></operator> <name pos:line="32" pos:column="24">binary_op_providers<pos:position pos:line="32" pos:column="43"/></name></expr>;<pos:position pos:line="32" pos:column="44"/></expr_stmt>
                <break pos:line="33" pos:column="17">break;<pos:position pos:line="33" pos:column="23"/></break>
            <default pos:line="34" pos:column="13">default:<pos:position pos:line="34" pos:column="21"/></default>
                <expr_stmt><expr><call><name pos:line="35" pos:column="17">ap_assert<pos:position pos:line="35" pos:column="26"/></name><argument_list pos:line="35" pos:column="26">(<argument><expr><literal type="number" pos:line="35" pos:column="27">0<pos:position pos:line="35" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="36" pos:column="14"/></block></switch>
            <while pos:line="37" pos:column="13">while <condition pos:line="37" pos:column="19">(<expr><name><name pos:line="37" pos:column="20">prov<pos:position pos:line="37" pos:column="24"/></name><operator pos:line="37" pos:column="24">-&gt;<pos:position pos:line="37" pos:column="29"/></operator><name pos:line="37" pos:column="26">func<pos:position pos:line="37" pos:column="30"/></name></name></expr>)<pos:position pos:line="37" pos:column="31"/></condition> <block pos:line="37" pos:column="32">{
                <decl_stmt><decl><type><name pos:line="38" pos:column="17">int<pos:position pos:line="38" pos:column="20"/></name></type> <name pos:line="38" pos:column="21">match<pos:position pos:line="38" pos:column="26"/></name></decl>;<pos:position pos:line="38" pos:column="27"/></decl_stmt>
                <if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name><name pos:line="39" pos:column="21">parms<pos:position pos:line="39" pos:column="26"/></name><operator pos:line="39" pos:column="26">-&gt;<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="28">type<pos:position pos:line="39" pos:column="32"/></name></name> <operator pos:line="39" pos:column="33">==<pos:position pos:line="39" pos:column="35"/></operator> <name pos:line="39" pos:column="36">AP_EXPR_FUNC_OP_UNARY<pos:position pos:line="39" pos:column="57"/></name></expr>)<pos:position pos:line="39" pos:column="58"/></condition><then pos:line="39" pos:column="58">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="40" pos:column="21">match<pos:position pos:line="40" pos:column="26"/></name> <operator pos:line="40" pos:column="27">=<pos:position pos:line="40" pos:column="28"/></operator> <operator pos:line="40" pos:column="29">!<pos:position pos:line="40" pos:column="30"/></operator><call><name pos:line="40" pos:column="30">strcmp<pos:position pos:line="40" pos:column="36"/></name><argument_list pos:line="40" pos:column="36">(<argument><expr><name><name pos:line="40" pos:column="37">prov<pos:position pos:line="40" pos:column="41"/></name><operator pos:line="40" pos:column="41">-&gt;<pos:position pos:line="40" pos:column="46"/></operator><name pos:line="40" pos:column="43">name<pos:position pos:line="40" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="49">parms<pos:position pos:line="40" pos:column="54"/></name><operator pos:line="40" pos:column="54">-&gt;<pos:position pos:line="40" pos:column="59"/></operator><name pos:line="40" pos:column="56">name<pos:position pos:line="40" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="62"/></expr_stmt></block></then>
                <else pos:line="41" pos:column="17">else
                    <block type="pseudo"><expr_stmt><expr><name pos:line="42" pos:column="21">match<pos:position pos:line="42" pos:column="26"/></name> <operator pos:line="42" pos:column="27">=<pos:position pos:line="42" pos:column="28"/></operator> <operator pos:line="42" pos:column="29">!<pos:position pos:line="42" pos:column="30"/></operator><call><name pos:line="42" pos:column="30">strcasecmp<pos:position pos:line="42" pos:column="40"/></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name><name pos:line="42" pos:column="41">prov<pos:position pos:line="42" pos:column="45"/></name><operator pos:line="42" pos:column="45">-&gt;<pos:position pos:line="42" pos:column="50"/></operator><name pos:line="42" pos:column="47">name<pos:position pos:line="42" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="53">parms<pos:position pos:line="42" pos:column="58"/></name><operator pos:line="42" pos:column="58">-&gt;<pos:position pos:line="42" pos:column="63"/></operator><name pos:line="42" pos:column="60">name<pos:position pos:line="42" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="66"/></expr_stmt></block></else></if>
                <if pos:line="43" pos:column="17">if <condition pos:line="43" pos:column="20">(<expr><name pos:line="43" pos:column="21">match<pos:position pos:line="43" pos:column="26"/></name></expr>)<pos:position pos:line="43" pos:column="27"/></condition><then pos:line="43" pos:column="27"> <block pos:line="43" pos:column="28">{
                    <if pos:line="44" pos:column="21">if <condition pos:line="44" pos:column="24">(<expr><operator pos:line="44" pos:column="25">(<pos:position pos:line="44" pos:column="26"/></operator><name><name pos:line="44" pos:column="26">parms<pos:position pos:line="44" pos:column="31"/></name><operator pos:line="44" pos:column="31">-&gt;<pos:position pos:line="44" pos:column="36"/></operator><name pos:line="44" pos:column="33">flags<pos:position pos:line="44" pos:column="38"/></name></name> <operator pos:line="44" pos:column="39">&amp;<pos:position pos:line="44" pos:column="44"/></operator> <name pos:line="44" pos:column="41">AP_EXPR_FLAG_RESTRICTED<pos:position pos:line="44" pos:column="64"/></name><operator pos:line="44" pos:column="64">)<pos:position pos:line="44" pos:column="65"/></operator>
                        <operator pos:line="45" pos:column="25">&amp;&amp;<pos:position pos:line="45" pos:column="35"/></operator> <name><name pos:line="45" pos:column="28">prov<pos:position pos:line="45" pos:column="32"/></name><operator pos:line="45" pos:column="32">-&gt;<pos:position pos:line="45" pos:column="37"/></operator><name pos:line="45" pos:column="34">restricted<pos:position pos:line="45" pos:column="44"/></name></name></expr>)<pos:position pos:line="45" pos:column="45"/></condition><then pos:line="45" pos:column="45"> <block pos:line="45" pos:column="46">{
                        <expr_stmt><expr><operator pos:line="46" pos:column="25">*<pos:position pos:line="46" pos:column="26"/></operator><name><name pos:line="46" pos:column="26">parms<pos:position pos:line="46" pos:column="31"/></name><operator pos:line="46" pos:column="31">-&gt;<pos:position pos:line="46" pos:column="36"/></operator><name pos:line="46" pos:column="33">err<pos:position pos:line="46" pos:column="36"/></name></name> <operator pos:line="46" pos:column="37">=<pos:position pos:line="46" pos:column="38"/></operator>
                            <call><name pos:line="47" pos:column="29">apr_psprintf<pos:position pos:line="47" pos:column="41"/></name><argument_list pos:line="47" pos:column="41">(<argument><expr><name><name pos:line="47" pos:column="42">parms<pos:position pos:line="47" pos:column="47"/></name><operator pos:line="47" pos:column="47">-&gt;<pos:position pos:line="47" pos:column="52"/></operator><name pos:line="47" pos:column="49">ptemp<pos:position pos:line="47" pos:column="54"/></name></name></expr></argument>,
                                         <argument><expr><literal type="string" pos:line="48" pos:column="42">"%s%s not available in restricted context"<pos:position pos:line="48" pos:column="84"/></literal></expr></argument>,
                                         <argument><expr><ternary><condition><expr><operator pos:line="49" pos:column="42">(<pos:position pos:line="49" pos:column="43"/></operator><name><name pos:line="49" pos:column="43">parms<pos:position pos:line="49" pos:column="48"/></name><operator pos:line="49" pos:column="48">-&gt;<pos:position pos:line="49" pos:column="53"/></operator><name pos:line="49" pos:column="50">type<pos:position pos:line="49" pos:column="54"/></name></name> <operator pos:line="49" pos:column="55">==<pos:position pos:line="49" pos:column="57"/></operator> <name pos:line="49" pos:column="58">AP_EXPR_FUNC_STRING<pos:position pos:line="49" pos:column="77"/></name><operator pos:line="49" pos:column="77">)<pos:position pos:line="49" pos:column="78"/></operator></expr> ?<pos:position pos:line="49" pos:column="80"/></condition><then pos:line="49" pos:column="80"> <expr><literal type="string" pos:line="49" pos:column="81">""<pos:position pos:line="49" pos:column="83"/></literal></expr> <pos:position pos:line="49" pos:column="84"/></then><else pos:line="49" pos:column="84">: <expr><literal type="string" pos:line="49" pos:column="86">"-"<pos:position pos:line="49" pos:column="89"/></literal></expr></else></ternary></expr></argument>,
                                         <argument><expr><name><name pos:line="50" pos:column="42">prov<pos:position pos:line="50" pos:column="46"/></name><operator pos:line="50" pos:column="46">-&gt;<pos:position pos:line="50" pos:column="51"/></operator><name pos:line="50" pos:column="48">name<pos:position pos:line="50" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="54"/></expr_stmt>
                        <return pos:line="51" pos:column="25">return <expr><operator pos:line="51" pos:column="32">!<pos:position pos:line="51" pos:column="33"/></operator><name pos:line="51" pos:column="33">OK<pos:position pos:line="51" pos:column="35"/></name></expr>;<pos:position pos:line="51" pos:column="36"/></return>
                    }<pos:position pos:line="52" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><operator pos:line="53" pos:column="21">*<pos:position pos:line="53" pos:column="22"/></operator><name><name pos:line="53" pos:column="22">parms<pos:position pos:line="53" pos:column="27"/></name><operator pos:line="53" pos:column="27">-&gt;<pos:position pos:line="53" pos:column="32"/></operator><name pos:line="53" pos:column="29">func<pos:position pos:line="53" pos:column="33"/></name></name> <operator pos:line="53" pos:column="34">=<pos:position pos:line="53" pos:column="35"/></operator> <name><name pos:line="53" pos:column="36">prov<pos:position pos:line="53" pos:column="40"/></name><operator pos:line="53" pos:column="40">-&gt;<pos:position pos:line="53" pos:column="45"/></operator><name pos:line="53" pos:column="42">func<pos:position pos:line="53" pos:column="46"/></name></name></expr>;<pos:position pos:line="53" pos:column="47"/></expr_stmt>
                    <if pos:line="54" pos:column="21">if <condition pos:line="54" pos:column="24">(<expr><name><name pos:line="54" pos:column="25">prov<pos:position pos:line="54" pos:column="29"/></name><operator pos:line="54" pos:column="29">-&gt;<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="31">arg_parsing_func<pos:position pos:line="54" pos:column="47"/></name></name></expr>)<pos:position pos:line="54" pos:column="48"/></condition><then pos:line="54" pos:column="48"> <block pos:line="54" pos:column="49">{
                        <return pos:line="55" pos:column="25">return <expr><call><name><name pos:line="55" pos:column="32">prov<pos:position pos:line="55" pos:column="36"/></name><operator pos:line="55" pos:column="36">-&gt;<pos:position pos:line="55" pos:column="41"/></operator><name pos:line="55" pos:column="38">arg_parsing_func<pos:position pos:line="55" pos:column="54"/></name></name><argument_list pos:line="55" pos:column="54">(<argument><expr><name pos:line="55" pos:column="55">parms<pos:position pos:line="55" pos:column="60"/></name></expr></argument>)<pos:position pos:line="55" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="62"/></return>
                    }<pos:position pos:line="56" pos:column="22"/></block></then>
                    <else pos:line="57" pos:column="21">else <block pos:line="57" pos:column="26">{
                        <expr_stmt><expr><operator pos:line="58" pos:column="25">*<pos:position pos:line="58" pos:column="26"/></operator><name><name pos:line="58" pos:column="26">parms<pos:position pos:line="58" pos:column="31"/></name><operator pos:line="58" pos:column="31">-&gt;<pos:position pos:line="58" pos:column="36"/></operator><name pos:line="58" pos:column="33">data<pos:position pos:line="58" pos:column="37"/></name></name> <operator pos:line="58" pos:column="38">=<pos:position pos:line="58" pos:column="39"/></operator> <name><name pos:line="58" pos:column="40">prov<pos:position pos:line="58" pos:column="44"/></name><operator pos:line="58" pos:column="44">-&gt;<pos:position pos:line="58" pos:column="49"/></operator><name pos:line="58" pos:column="46">name<pos:position pos:line="58" pos:column="50"/></name></name></expr>;<pos:position pos:line="58" pos:column="51"/></expr_stmt>
                        <return pos:line="59" pos:column="25">return <expr><name pos:line="59" pos:column="32">OK<pos:position pos:line="59" pos:column="34"/></name></expr>;<pos:position pos:line="59" pos:column="35"/></return>
                    }<pos:position pos:line="60" pos:column="22"/></block></else></if>
                }<pos:position pos:line="61" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="62" pos:column="17">prov<pos:position pos:line="62" pos:column="21"/></name><operator pos:line="62" pos:column="21">++<pos:position pos:line="62" pos:column="23"/></operator></expr>;<pos:position pos:line="62" pos:column="24"/></expr_stmt>
            }<pos:position pos:line="63" pos:column="14"/></block></while>
        }<pos:position pos:line="64" pos:column="10"/></block>
        <break pos:line="65" pos:column="9">break;<pos:position pos:line="65" pos:column="15"/></break>
    <default pos:line="66" pos:column="5">default:<pos:position pos:line="66" pos:column="13"/></default>
        <break pos:line="67" pos:column="9">break;<pos:position pos:line="67" pos:column="15"/></break>
    }<pos:position pos:line="68" pos:column="6"/></block></switch>
    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">DECLINED<pos:position pos:line="69" pos:column="20"/></name></expr>;<pos:position pos:line="69" pos:column="21"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
