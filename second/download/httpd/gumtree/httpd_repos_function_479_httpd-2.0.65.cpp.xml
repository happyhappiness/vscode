<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_479_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">set_and_comp_regexp<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">cookie_dir_rec<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">dcfg<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, 
                                <parameter><decl><type><name pos:line="2" pos:column="33">apr_pool_t<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">p<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>,
                                <parameter><decl><type><specifier pos:line="3" pos:column="33">const<pos:position pos:line="3" pos:column="38"/></specifier> <name pos:line="3" pos:column="39">char<pos:position pos:line="3" pos:column="43"/></name> <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="45">cookie_name<pos:position pos:line="3" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="57"/></parameter_list> 
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">danger_chars<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><literal type="number" pos:line="5" pos:column="24">0<pos:position pos:line="5" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">sp<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name pos:line="6" pos:column="22">cookie_name<pos:position pos:line="6" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="34"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* The goal is to end up with this regexp, 
     * ^cookie_name=([^;]+)|;[\t]+cookie_name=([^;]+) 
     * with cookie_name obviously substituted either
     * with the real cookie name set by the user in httpd.conf, or with the
     * default COOKIE_NAME.
     */</comment>

    <comment type="block" pos:line="15" pos:column="5">/* Anyway, we need to escape the cookie_name before pasting it
     * into the regex
     */</comment>
    <while pos:line="18" pos:column="5">while <condition pos:line="18" pos:column="11">(<expr><operator pos:line="18" pos:column="12">*<pos:position pos:line="18" pos:column="13"/></operator><name pos:line="18" pos:column="13">sp<pos:position pos:line="18" pos:column="15"/></name></expr>)<pos:position pos:line="18" pos:column="16"/></condition> <block pos:line="18" pos:column="17">{
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">!<pos:position pos:line="19" pos:column="14"/></operator><call><name pos:line="19" pos:column="14">apr_isalnum<pos:position pos:line="19" pos:column="25"/></name><argument_list pos:line="19" pos:column="25">(<argument><expr><operator pos:line="19" pos:column="26">*<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">sp<pos:position pos:line="19" pos:column="29"/></name></expr></argument>)<pos:position pos:line="19" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31"> <block pos:line="19" pos:column="32">{
            <expr_stmt><expr><operator pos:line="20" pos:column="13">++<pos:position pos:line="20" pos:column="15"/></operator><name pos:line="20" pos:column="15">danger_chars<pos:position pos:line="20" pos:column="27"/></name></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="22" pos:column="9">++<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">sp<pos:position pos:line="22" pos:column="13"/></name></expr>;<pos:position pos:line="22" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></while>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">danger_chars<pos:position pos:line="25" pos:column="21"/></name></expr>)<pos:position pos:line="25" pos:column="22"/></condition><then pos:line="25" pos:column="22"> <block pos:line="25" pos:column="23">{
        <decl_stmt><decl><type><name pos:line="26" pos:column="9">char<pos:position pos:line="26" pos:column="13"/></name> <modifier pos:line="26" pos:column="14">*<pos:position pos:line="26" pos:column="15"/></modifier></type><name pos:line="26" pos:column="15">cp<pos:position pos:line="26" pos:column="17"/></name></decl>;<pos:position pos:line="26" pos:column="18"/></decl_stmt>
        <expr_stmt><expr><name pos:line="27" pos:column="9">cp<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">=<pos:position pos:line="27" pos:column="13"/></operator> <call><name pos:line="27" pos:column="14">apr_palloc<pos:position pos:line="27" pos:column="24"/></name><argument_list pos:line="27" pos:column="24">(<argument><expr><name pos:line="27" pos:column="25">p<pos:position pos:line="27" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="28">sp<pos:position pos:line="27" pos:column="30"/></name> <operator pos:line="27" pos:column="31">-<pos:position pos:line="27" pos:column="32"/></operator> <name pos:line="27" pos:column="33">cookie_name<pos:position pos:line="27" pos:column="44"/></name> <operator pos:line="27" pos:column="45">+<pos:position pos:line="27" pos:column="46"/></operator> <name pos:line="27" pos:column="47">danger_chars<pos:position pos:line="27" pos:column="59"/></name> <operator pos:line="27" pos:column="60">+<pos:position pos:line="27" pos:column="61"/></operator> <literal type="number" pos:line="27" pos:column="62">1<pos:position pos:line="27" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="65"/></expr_stmt> <comment type="block" pos:line="27" pos:column="66">/* 1 == \0 */</comment>
        <expr_stmt><expr><name pos:line="28" pos:column="9">sp<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name pos:line="28" pos:column="14">cookie_name<pos:position pos:line="28" pos:column="25"/></name></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="29" pos:column="9">cookie_name<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">=<pos:position pos:line="29" pos:column="22"/></operator> <name pos:line="29" pos:column="23">cp<pos:position pos:line="29" pos:column="25"/></name></expr>;<pos:position pos:line="29" pos:column="26"/></expr_stmt>
        <while pos:line="30" pos:column="9">while <condition pos:line="30" pos:column="15">(<expr><operator pos:line="30" pos:column="16">*<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="17">sp<pos:position pos:line="30" pos:column="19"/></name></expr>)<pos:position pos:line="30" pos:column="20"/></condition> <block pos:line="30" pos:column="21">{
            <if pos:line="31" pos:column="13">if <condition pos:line="31" pos:column="16">(<expr><operator pos:line="31" pos:column="17">!<pos:position pos:line="31" pos:column="18"/></operator><call><name pos:line="31" pos:column="18">apr_isalnum<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><operator pos:line="31" pos:column="30">*<pos:position pos:line="31" pos:column="31"/></operator><name pos:line="31" pos:column="31">sp<pos:position pos:line="31" pos:column="33"/></name></expr></argument>)<pos:position pos:line="31" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="35"/></condition><then pos:line="31" pos:column="35"> <block pos:line="31" pos:column="36">{
                <expr_stmt><expr><operator pos:line="32" pos:column="17">*<pos:position pos:line="32" pos:column="18"/></operator><name pos:line="32" pos:column="18">cp<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">++<pos:position pos:line="32" pos:column="22"/></operator> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <literal type="char" pos:line="32" pos:column="25">'\\'<pos:position pos:line="32" pos:column="29"/></literal></expr>;<pos:position pos:line="32" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="33" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="34" pos:column="13">*<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">cp<pos:position pos:line="34" pos:column="16"/></name><operator pos:line="34" pos:column="16">++<pos:position pos:line="34" pos:column="18"/></operator> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <operator pos:line="34" pos:column="21">*<pos:position pos:line="34" pos:column="22"/></operator><name pos:line="34" pos:column="22">sp<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">++<pos:position pos:line="34" pos:column="26"/></operator></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></while>
        <expr_stmt><expr><operator pos:line="36" pos:column="9">*<pos:position pos:line="36" pos:column="10"/></operator><name pos:line="36" pos:column="10">cp<pos:position pos:line="36" pos:column="12"/></name> <operator pos:line="36" pos:column="13">=<pos:position pos:line="36" pos:column="14"/></operator> <literal type="char" pos:line="36" pos:column="15">'\0'<pos:position pos:line="36" pos:column="19"/></literal></expr>;<pos:position pos:line="36" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="39" pos:column="5">dcfg<pos:position pos:line="39" pos:column="9"/></name><operator pos:line="39" pos:column="9">-&gt;<pos:position pos:line="39" pos:column="14"/></operator><name pos:line="39" pos:column="11">regexp_string<pos:position pos:line="39" pos:column="24"/></name></name> <operator pos:line="39" pos:column="25">=<pos:position pos:line="39" pos:column="26"/></operator> <call><name pos:line="39" pos:column="27">apr_pstrcat<pos:position pos:line="39" pos:column="38"/></name><argument_list pos:line="39" pos:column="38">(<argument><expr><name pos:line="39" pos:column="39">p<pos:position pos:line="39" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="39" pos:column="42">"^"<pos:position pos:line="39" pos:column="45"/></literal></expr></argument>,
                                      <argument><expr><name pos:line="40" pos:column="39">cookie_name<pos:position pos:line="40" pos:column="50"/></name></expr></argument>,
                                      <argument><expr><literal type="string" pos:line="41" pos:column="39">"=([^;]+)|;[ \t]+"<pos:position pos:line="41" pos:column="57"/></literal></expr></argument>,
                                      <argument><expr><name pos:line="42" pos:column="39">cookie_name<pos:position pos:line="42" pos:column="50"/></name></expr></argument>,
                                      <argument><expr><literal type="string" pos:line="43" pos:column="39">"=([^;]+)"<pos:position pos:line="43" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="51">NULL<pos:position pos:line="43" pos:column="55"/></name></expr></argument>)<pos:position pos:line="43" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="57"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="45" pos:column="5">dcfg<pos:position pos:line="45" pos:column="9"/></name><operator pos:line="45" pos:column="9">-&gt;<pos:position pos:line="45" pos:column="14"/></operator><name pos:line="45" pos:column="11">regexp<pos:position pos:line="45" pos:column="17"/></name></name> <operator pos:line="45" pos:column="18">=<pos:position pos:line="45" pos:column="19"/></operator> <call><name pos:line="45" pos:column="20">ap_pregcomp<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name pos:line="45" pos:column="32">p<pos:position pos:line="45" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="45" pos:column="35">dcfg<pos:position pos:line="45" pos:column="39"/></name><operator pos:line="45" pos:column="39">-&gt;<pos:position pos:line="45" pos:column="44"/></operator><name pos:line="45" pos:column="41">regexp_string<pos:position pos:line="45" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="56">REG_EXTENDED<pos:position pos:line="45" pos:column="68"/></name></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">ap_assert<pos:position pos:line="46" pos:column="14"/></name><argument_list pos:line="46" pos:column="14">(<argument><expr><name><name pos:line="46" pos:column="15">dcfg<pos:position pos:line="46" pos:column="19"/></name><operator pos:line="46" pos:column="19">-&gt;<pos:position pos:line="46" pos:column="24"/></operator><name pos:line="46" pos:column="21">regexp<pos:position pos:line="46" pos:column="27"/></name></name> <operator pos:line="46" pos:column="28">!=<pos:position pos:line="46" pos:column="30"/></operator> <name pos:line="46" pos:column="31">NULL<pos:position pos:line="46" pos:column="35"/></name></expr></argument>)<pos:position pos:line="46" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="37"/></expr_stmt>
}<pos:position pos:line="47" pos:column="2"/></block></function></unit>
