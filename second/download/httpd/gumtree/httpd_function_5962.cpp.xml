<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5962.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">reqtimeout_hooks<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">apr_pool_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">pool<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="47"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="block" pos:line="3" pos:column="5">/*
     * mod_ssl is AP_FTYPE_CONNECTION + 5 and mod_reqtimeout needs to
     * be called before mod_ssl. Otherwise repeated reads during the ssl
     * handshake can prevent the timeout from triggering.
     */</comment>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">ap_register_input_filter<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name pos:line="8" pos:column="30">reqtimeout_filter_name<pos:position pos:line="8" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="54">reqtimeout_filter<pos:position pos:line="8" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="73">NULL<pos:position pos:line="8" pos:column="77"/></name></expr></argument>,
                             <argument><expr><name pos:line="9" pos:column="30">AP_FTYPE_CONNECTION<pos:position pos:line="9" pos:column="49"/></name> <operator pos:line="9" pos:column="50">+<pos:position pos:line="9" pos:column="51"/></operator> <literal type="number" pos:line="9" pos:column="52">8<pos:position pos:line="9" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="55"/></expr_stmt>

    <comment type="block" pos:line="11" pos:column="5">/*
     * We need to pause timeout detection in between requests, for
     * speculative and non-blocking reads, so between each outgoing EOR
     * and the next pre_read_request call.
     */</comment>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">ap_register_output_filter<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name pos:line="16" pos:column="31">reqtimeout_filter_name<pos:position pos:line="16" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="55">reqtimeout_eor<pos:position pos:line="16" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="71">NULL<pos:position pos:line="16" pos:column="75"/></name></expr></argument>,
                              <argument><expr><name pos:line="17" pos:column="31">AP_FTYPE_CONNECTION<pos:position pos:line="17" pos:column="50"/></name></expr></argument>)<pos:position pos:line="17" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="52"/></expr_stmt>

    <comment type="block" pos:line="19" pos:column="5">/*
     * mod_reqtimeout needs to be called before ap_process_http_request (which
     * is run at APR_HOOK_REALLY_LAST) but after all other protocol modules.
     * This ensures that it only influences normal http connections and not
     * e.g. mod_ftp. Also, if mod_reqtimeout used the pre_connection hook, it
     * would be inserted on mod_proxy's backend connections.
     */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ap_hook_process_connection<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">reqtimeout_init<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="49">NULL<pos:position pos:line="26" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="55">NULL<pos:position pos:line="26" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="61">APR_HOOK_LAST<pos:position pos:line="26" pos:column="74"/></name></expr></argument>)<pos:position pos:line="26" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="76"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="28" pos:column="5">ap_hook_pre_read_request<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">reqtimeout_before_header<pos:position pos:line="28" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="56">NULL<pos:position pos:line="28" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="62">NULL<pos:position pos:line="28" pos:column="66"/></name></expr></argument>,
                             <argument><expr><name pos:line="29" pos:column="30">APR_HOOK_MIDDLE<pos:position pos:line="29" pos:column="45"/></name></expr></argument>)<pos:position pos:line="29" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">ap_hook_post_read_request<pos:position pos:line="30" pos:column="30"/></name><argument_list pos:line="30" pos:column="30">(<argument><expr><name pos:line="30" pos:column="31">reqtimeout_before_body<pos:position pos:line="30" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="55">NULL<pos:position pos:line="30" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="61">NULL<pos:position pos:line="30" pos:column="65"/></name></expr></argument>,
                              <argument><expr><name pos:line="31" pos:column="31">APR_HOOK_MIDDLE<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></expr_stmt>

<cpp:if pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">if<pos:position pos:line="33" pos:column="4"/></cpp:directive> <expr><name pos:line="33" pos:column="5">MRT_DEFAULT_HEADER_MIN_RATE<pos:position pos:line="33" pos:column="32"/></name> <operator pos:line="33" pos:column="33">&gt;<pos:position pos:line="33" pos:column="37"/></operator> <literal type="number" pos:line="33" pos:column="35">0<pos:position pos:line="33" pos:column="36"/></literal></expr></cpp:if>
    <expr_stmt><expr><name pos:line="34" pos:column="5">default_header_rate_factor<pos:position pos:line="34" pos:column="31"/></name> <operator pos:line="34" pos:column="32">=<pos:position pos:line="34" pos:column="33"/></operator> <call><name pos:line="34" pos:column="34">apr_time_from_sec<pos:position pos:line="34" pos:column="51"/></name><argument_list pos:line="34" pos:column="51">(<argument><expr><literal type="number" pos:line="34" pos:column="52">1<pos:position pos:line="34" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="54"/></argument_list></call> <operator pos:line="34" pos:column="55">/<pos:position pos:line="34" pos:column="56"/></operator> <name pos:line="34" pos:column="57">MRT_DEFAULT_HEADER_MIN_RATE<pos:position pos:line="34" pos:column="84"/></name></expr>;<pos:position pos:line="34" pos:column="85"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">if<pos:position pos:line="36" pos:column="4"/></cpp:directive> <expr><name pos:line="36" pos:column="5">MRT_DEFAULT_BODY_MIN_RATE<pos:position pos:line="36" pos:column="30"/></name> <operator pos:line="36" pos:column="31">&gt;<pos:position pos:line="36" pos:column="35"/></operator> <literal type="number" pos:line="36" pos:column="33">0<pos:position pos:line="36" pos:column="34"/></literal></expr></cpp:if>
    <expr_stmt><expr><name pos:line="37" pos:column="5">default_body_rate_factor<pos:position pos:line="37" pos:column="29"/></name> <operator pos:line="37" pos:column="30">=<pos:position pos:line="37" pos:column="31"/></operator> <call><name pos:line="37" pos:column="32">apr_time_from_sec<pos:position pos:line="37" pos:column="49"/></name><argument_list pos:line="37" pos:column="49">(<argument><expr><literal type="number" pos:line="37" pos:column="50">1<pos:position pos:line="37" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="52"/></argument_list></call> <operator pos:line="37" pos:column="53">/<pos:position pos:line="37" pos:column="54"/></operator> <name pos:line="37" pos:column="55">MRT_DEFAULT_BODY_MIN_RATE<pos:position pos:line="37" pos:column="80"/></name></expr>;<pos:position pos:line="37" pos:column="81"/></expr_stmt>
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
