<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_1016.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int32<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">worker_thread<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">void<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">dummy<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">worker_slot<pos:position pos:line="3" pos:column="20"/></name> <init pos:line="3" pos:column="21">= <expr><operator pos:line="3" pos:column="23">(<pos:position pos:line="3" pos:column="24"/></operator><name pos:line="3" pos:column="24">int<pos:position pos:line="3" pos:column="27"/></name><operator pos:line="3" pos:column="27">)<pos:position pos:line="3" pos:column="28"/></operator><name pos:line="3" pos:column="28">dummy<pos:position pos:line="3" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_allocator_t<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier></type><name pos:line="4" pos:column="22">allocator<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_bucket_alloc_t<pos:position pos:line="5" pos:column="23"/></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">bucket_alloc<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name> <init pos:line="6" pos:column="21">= <expr><name pos:line="6" pos:column="23">APR_EINIT<pos:position pos:line="6" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">last_poll_idx<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">sigset_t<pos:position pos:line="8" pos:column="13"/></name></type> <name pos:line="8" pos:column="14">sig_mask<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">requests_this_child<pos:position pos:line="9" pos:column="28"/></name> <init pos:line="9" pos:column="29">= <expr><literal type="number" pos:line="9" pos:column="31">0<pos:position pos:line="9" pos:column="32"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_pollset_t<pos:position pos:line="10" pos:column="18"/></name> <modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type><name pos:line="10" pos:column="20">pollset<pos:position pos:line="10" pos:column="27"/></name> <init pos:line="10" pos:column="28">= <expr><name pos:line="10" pos:column="30">NULL<pos:position pos:line="10" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">ap_listen_rec<pos:position pos:line="11" pos:column="18"/></name> <modifier pos:line="11" pos:column="19">*<pos:position pos:line="11" pos:column="20"/></modifier></type><name pos:line="11" pos:column="20">lr<pos:position pos:line="11" pos:column="22"/></name> <init pos:line="11" pos:column="23">= <expr><name pos:line="11" pos:column="25">NULL<pos:position pos:line="11" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">ap_sb_handle_t<pos:position pos:line="12" pos:column="19"/></name> <modifier pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></modifier></type><name pos:line="12" pos:column="21">sbh<pos:position pos:line="12" pos:column="24"/></name> <init pos:line="12" pos:column="25">= <expr><name pos:line="12" pos:column="27">NULL<pos:position pos:line="12" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">i<pos:position pos:line="13" pos:column="10"/></name></decl>;<pos:position pos:line="13" pos:column="11"/></decl_stmt>
    <comment type="block" pos:line="14" pos:column="5">/* each worker thread is in control of its own destiny...*/</comment>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">this_worker_should_exit<pos:position pos:line="15" pos:column="32"/></name> <init pos:line="15" pos:column="33">= <expr><literal type="number" pos:line="15" pos:column="35">0<pos:position pos:line="15" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="37"/></decl_stmt>
    <comment type="block" pos:line="16" pos:column="5">/* We have 2 pools that we create/use throughout the lifetime of this
     * worker. The first and longest lived is the pworker pool. From
     * this we create the ptrans pool, the lifetime of which is the same
     * as each connection and is reset prior to each attempt to
     * process a connection.
     */</comment>
    <decl_stmt><decl><type><name pos:line="22" pos:column="5">apr_pool_t<pos:position pos:line="22" pos:column="15"/></name> <modifier pos:line="22" pos:column="16">*<pos:position pos:line="22" pos:column="17"/></modifier></type><name pos:line="22" pos:column="17">ptrans<pos:position pos:line="22" pos:column="23"/></name> <init pos:line="22" pos:column="24">= <expr><name pos:line="22" pos:column="26">NULL<pos:position pos:line="22" pos:column="30"/></name></expr></init></decl>;<pos:position pos:line="22" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="23" pos:column="5">apr_pool_t<pos:position pos:line="23" pos:column="15"/></name> <modifier pos:line="23" pos:column="16">*<pos:position pos:line="23" pos:column="17"/></modifier></type><name pos:line="23" pos:column="17">pworker<pos:position pos:line="23" pos:column="24"/></name> <init pos:line="23" pos:column="25">= <expr><name pos:line="23" pos:column="27">NULL<pos:position pos:line="23" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><name pos:line="25" pos:column="5">mpm_state<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <name pos:line="25" pos:column="17">AP_MPMQ_STARTING<pos:position pos:line="25" pos:column="33"/></name></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt> <comment type="block" pos:line="25" pos:column="35">/* for benefit of any hooks that run as this
                                  * child initializes
                                  */</comment>

    <expr_stmt><expr><call><name pos:line="29" pos:column="5">on_exit_thread<pos:position pos:line="29" pos:column="19"/></name><argument_list pos:line="29" pos:column="19">(<argument><expr><name pos:line="29" pos:column="20">check_restart<pos:position pos:line="29" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="35">(<pos:position pos:line="29" pos:column="36"/></operator><name pos:line="29" pos:column="36">void<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">*<pos:position pos:line="29" pos:column="41"/></operator><operator pos:line="29" pos:column="41">)<pos:position pos:line="29" pos:column="42"/></operator><name pos:line="29" pos:column="42">worker_slot<pos:position pos:line="29" pos:column="53"/></name></expr></argument>)<pos:position pos:line="29" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="55"/></expr_stmt>

    <comment type="block" pos:line="31" pos:column="5">/* block the signals for this thread only if we're not running as a
     * single process.
     */</comment>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><operator pos:line="34" pos:column="9">!<pos:position pos:line="34" pos:column="10"/></operator><name pos:line="34" pos:column="10">one_process<pos:position pos:line="34" pos:column="21"/></name></expr>)<pos:position pos:line="34" pos:column="22"/></condition><then pos:line="34" pos:column="22"> <block pos:line="34" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="35" pos:column="9">sigfillset<pos:position pos:line="35" pos:column="19"/></name><argument_list pos:line="35" pos:column="19">(<argument><expr><operator pos:line="35" pos:column="20">&amp;<pos:position pos:line="35" pos:column="25"/></operator><name pos:line="35" pos:column="21">sig_mask<pos:position pos:line="35" pos:column="29"/></name></expr></argument>)<pos:position pos:line="35" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">sigprocmask<pos:position pos:line="36" pos:column="20"/></name><argument_list pos:line="36" pos:column="20">(<argument><expr><name pos:line="36" pos:column="21">SIG_BLOCK<pos:position pos:line="36" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="32">&amp;<pos:position pos:line="36" pos:column="37"/></operator><name pos:line="36" pos:column="33">sig_mask<pos:position pos:line="36" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="43">NULL<pos:position pos:line="36" pos:column="47"/></name></expr></argument>)<pos:position pos:line="36" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="39" pos:column="5">/* Each worker thread is fully in control of it's destinay and so
     * to allow each thread to handle the lifetime of it's own resources
     * we create and use a subcontext for every thread.
     * The subcontext is a child of the pconf pool.
     */</comment>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">apr_allocator_create<pos:position pos:line="44" pos:column="25"/></name><argument_list pos:line="44" pos:column="25">(<argument><expr><operator pos:line="44" pos:column="26">&amp;<pos:position pos:line="44" pos:column="31"/></operator><name pos:line="44" pos:column="27">allocator<pos:position pos:line="44" pos:column="36"/></name></expr></argument>)<pos:position pos:line="44" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">apr_allocator_max_free_set<pos:position pos:line="45" pos:column="31"/></name><argument_list pos:line="45" pos:column="31">(<argument><expr><name pos:line="45" pos:column="32">allocator<pos:position pos:line="45" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="43">ap_max_mem_free<pos:position pos:line="45" pos:column="58"/></name></expr></argument>)<pos:position pos:line="45" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">apr_pool_create_ex<pos:position pos:line="46" pos:column="23"/></name><argument_list pos:line="46" pos:column="23">(<argument><expr><operator pos:line="46" pos:column="24">&amp;<pos:position pos:line="46" pos:column="29"/></operator><name pos:line="46" pos:column="25">pworker<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">pconf<pos:position pos:line="46" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="41">NULL<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">allocator<pos:position pos:line="46" pos:column="56"/></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="47" pos:column="5">apr_allocator_owner_set<pos:position pos:line="47" pos:column="28"/></name><argument_list pos:line="47" pos:column="28">(<argument><expr><name pos:line="47" pos:column="29">allocator<pos:position pos:line="47" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="40">pworker<pos:position pos:line="47" pos:column="47"/></name></expr></argument>)<pos:position pos:line="47" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="49"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="49" pos:column="5">apr_pool_create<pos:position pos:line="49" pos:column="20"/></name><argument_list pos:line="49" pos:column="20">(<argument><expr><operator pos:line="49" pos:column="21">&amp;<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="22">ptrans<pos:position pos:line="49" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="30">pworker<pos:position pos:line="49" pos:column="37"/></name></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">apr_pool_tag<pos:position pos:line="50" pos:column="17"/></name><argument_list pos:line="50" pos:column="17">(<argument><expr><name pos:line="50" pos:column="18">ptrans<pos:position pos:line="50" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="26">"transaction"<pos:position pos:line="50" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="41"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="52" pos:column="5">ap_create_sb_handle<pos:position pos:line="52" pos:column="24"/></name><argument_list pos:line="52" pos:column="24">(<argument><expr><operator pos:line="52" pos:column="25">&amp;<pos:position pos:line="52" pos:column="30"/></operator><name pos:line="52" pos:column="26">sbh<pos:position pos:line="52" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="31">pworker<pos:position pos:line="52" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="52" pos:column="40">0<pos:position pos:line="52" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="52" pos:column="43">worker_slot<pos:position pos:line="52" pos:column="54"/></name></expr></argument>)<pos:position pos:line="52" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="53" pos:column="5">(<pos:position pos:line="53" pos:column="6"/></operator><name pos:line="53" pos:column="6">void<pos:position pos:line="53" pos:column="10"/></name><operator pos:line="53" pos:column="10">)<pos:position pos:line="53" pos:column="11"/></operator> <call><name pos:line="53" pos:column="12">ap_update_child_status<pos:position pos:line="53" pos:column="34"/></name><argument_list pos:line="53" pos:column="34">(<argument><expr><name pos:line="53" pos:column="35">sbh<pos:position pos:line="53" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="40">SERVER_READY<pos:position pos:line="53" pos:column="52"/></name></expr></argument>, <argument><expr><operator pos:line="53" pos:column="54">(<pos:position pos:line="53" pos:column="55"/></operator><name pos:line="53" pos:column="55">request_rec<pos:position pos:line="53" pos:column="66"/></name> <operator pos:line="53" pos:column="67">*<pos:position pos:line="53" pos:column="68"/></operator><operator pos:line="53" pos:column="68">)<pos:position pos:line="53" pos:column="69"/></operator> <name pos:line="53" pos:column="70">NULL<pos:position pos:line="53" pos:column="74"/></name></expr></argument>)<pos:position pos:line="53" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="76"/></expr_stmt>

    <comment type="block" pos:line="55" pos:column="5">/* We add an extra socket here as we add the udp_sock we use for signalling
     * death. This gets added after the others.
     */</comment>
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">apr_pollset_create<pos:position pos:line="58" pos:column="23"/></name><argument_list pos:line="58" pos:column="23">(<argument><expr><operator pos:line="58" pos:column="24">&amp;<pos:position pos:line="58" pos:column="29"/></operator><name pos:line="58" pos:column="25">pollset<pos:position pos:line="58" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="34">num_listening_sockets<pos:position pos:line="58" pos:column="55"/></name> <operator pos:line="58" pos:column="56">+<pos:position pos:line="58" pos:column="57"/></operator> <literal type="number" pos:line="58" pos:column="58">1<pos:position pos:line="58" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="58" pos:column="61">pworker<pos:position pos:line="58" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="58" pos:column="70">0<pos:position pos:line="58" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="73"/></expr_stmt>

    <for pos:line="60" pos:column="5">for <control pos:line="60" pos:column="9">(<init><expr><name pos:line="60" pos:column="10">lr<pos:position pos:line="60" pos:column="12"/></name> <operator pos:line="60" pos:column="13">=<pos:position pos:line="60" pos:column="14"/></operator> <name pos:line="60" pos:column="15">ap_listeners<pos:position pos:line="60" pos:column="27"/></name></expr><operator pos:line="60" pos:column="27">,<pos:position pos:line="60" pos:column="28"/></operator> <expr><name pos:line="60" pos:column="29">i<pos:position pos:line="60" pos:column="30"/></name> <operator pos:line="60" pos:column="31">=<pos:position pos:line="60" pos:column="32"/></operator> <name pos:line="60" pos:column="33">num_listening_sockets<pos:position pos:line="60" pos:column="54"/></name></expr>;<pos:position pos:line="60" pos:column="55"/></init> <condition><expr><name pos:line="60" pos:column="56">i<pos:position pos:line="60" pos:column="57"/></name><operator pos:line="60" pos:column="57">--<pos:position pos:line="60" pos:column="59"/></operator></expr>;<pos:position pos:line="60" pos:column="60"/></condition> <incr><expr><name pos:line="60" pos:column="61">lr<pos:position pos:line="60" pos:column="63"/></name> <operator pos:line="60" pos:column="64">=<pos:position pos:line="60" pos:column="65"/></operator> <name><name pos:line="60" pos:column="66">lr<pos:position pos:line="60" pos:column="68"/></name><operator pos:line="60" pos:column="68">-&gt;<pos:position pos:line="60" pos:column="73"/></operator><name pos:line="60" pos:column="70">next<pos:position pos:line="60" pos:column="74"/></name></name></expr></incr>)<pos:position pos:line="60" pos:column="75"/></control> <block pos:line="60" pos:column="76">{
        <decl_stmt><decl><type><name pos:line="61" pos:column="9">apr_pollfd_t<pos:position pos:line="61" pos:column="21"/></name></type> <name pos:line="61" pos:column="22">pfd<pos:position pos:line="61" pos:column="25"/></name> <init pos:line="61" pos:column="26">= <expr><block pos:line="61" pos:column="28">{<expr><literal type="number" pos:line="61" pos:column="29">0<pos:position pos:line="61" pos:column="30"/></literal></expr>}<pos:position pos:line="61" pos:column="31"/></block></expr></init></decl>;<pos:position pos:line="61" pos:column="32"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="63" pos:column="9">pfd<pos:position pos:line="63" pos:column="12"/></name><operator pos:line="63" pos:column="12">.<pos:position pos:line="63" pos:column="13"/></operator><name pos:line="63" pos:column="13">desc_type<pos:position pos:line="63" pos:column="22"/></name></name> <operator pos:line="63" pos:column="23">=<pos:position pos:line="63" pos:column="24"/></operator> <name pos:line="63" pos:column="25">APR_POLL_SOCKET<pos:position pos:line="63" pos:column="40"/></name></expr>;<pos:position pos:line="63" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="64" pos:column="9">pfd<pos:position pos:line="64" pos:column="12"/></name><operator pos:line="64" pos:column="12">.<pos:position pos:line="64" pos:column="13"/></operator><name pos:line="64" pos:column="13">desc<pos:position pos:line="64" pos:column="17"/></name><operator pos:line="64" pos:column="17">.<pos:position pos:line="64" pos:column="18"/></operator><name pos:line="64" pos:column="18">s<pos:position pos:line="64" pos:column="19"/></name></name> <operator pos:line="64" pos:column="20">=<pos:position pos:line="64" pos:column="21"/></operator> <name><name pos:line="64" pos:column="22">lr<pos:position pos:line="64" pos:column="24"/></name><operator pos:line="64" pos:column="24">-&gt;<pos:position pos:line="64" pos:column="29"/></operator><name pos:line="64" pos:column="26">sd<pos:position pos:line="64" pos:column="28"/></name></name></expr>;<pos:position pos:line="64" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="65" pos:column="9">pfd<pos:position pos:line="65" pos:column="12"/></name><operator pos:line="65" pos:column="12">.<pos:position pos:line="65" pos:column="13"/></operator><name pos:line="65" pos:column="13">reqevents<pos:position pos:line="65" pos:column="22"/></name></name> <operator pos:line="65" pos:column="23">=<pos:position pos:line="65" pos:column="24"/></operator> <name pos:line="65" pos:column="25">APR_POLLIN<pos:position pos:line="65" pos:column="35"/></name></expr>;<pos:position pos:line="65" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="66" pos:column="9">pfd<pos:position pos:line="66" pos:column="12"/></name><operator pos:line="66" pos:column="12">.<pos:position pos:line="66" pos:column="13"/></operator><name pos:line="66" pos:column="13">client_data<pos:position pos:line="66" pos:column="24"/></name></name> <operator pos:line="66" pos:column="25">=<pos:position pos:line="66" pos:column="26"/></operator> <name pos:line="66" pos:column="27">lr<pos:position pos:line="66" pos:column="29"/></name></expr>;<pos:position pos:line="66" pos:column="30"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="68" pos:column="9">apr_pollset_add<pos:position pos:line="68" pos:column="24"/></name><argument_list pos:line="68" pos:column="24">(<argument><expr><name pos:line="68" pos:column="25">pollset<pos:position pos:line="68" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="34">&amp;<pos:position pos:line="68" pos:column="39"/></operator><name pos:line="68" pos:column="35">pfd<pos:position pos:line="68" pos:column="38"/></name></expr></argument>)<pos:position pos:line="68" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="69" pos:column="6"/></block></for>
    <block pos:line="70" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="71" pos:column="9">apr_pollfd_t<pos:position pos:line="71" pos:column="21"/></name></type> <name pos:line="71" pos:column="22">pfd<pos:position pos:line="71" pos:column="25"/></name> <init pos:line="71" pos:column="26">= <expr><block pos:line="71" pos:column="28">{<expr><literal type="number" pos:line="71" pos:column="29">0<pos:position pos:line="71" pos:column="30"/></literal></expr>}<pos:position pos:line="71" pos:column="31"/></block></expr></init></decl>;<pos:position pos:line="71" pos:column="32"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="73" pos:column="9">pfd<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">.<pos:position pos:line="73" pos:column="13"/></operator><name pos:line="73" pos:column="13">desc_type<pos:position pos:line="73" pos:column="22"/></name></name> <operator pos:line="73" pos:column="23">=<pos:position pos:line="73" pos:column="24"/></operator> <name pos:line="73" pos:column="25">APR_POLL_SOCKET<pos:position pos:line="73" pos:column="40"/></name></expr>;<pos:position pos:line="73" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="74" pos:column="9">pfd<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">.<pos:position pos:line="74" pos:column="13"/></operator><name pos:line="74" pos:column="13">desc<pos:position pos:line="74" pos:column="17"/></name><operator pos:line="74" pos:column="17">.<pos:position pos:line="74" pos:column="18"/></operator><name pos:line="74" pos:column="18">s<pos:position pos:line="74" pos:column="19"/></name></name> <operator pos:line="74" pos:column="20">=<pos:position pos:line="74" pos:column="21"/></operator> <name pos:line="74" pos:column="22">udp_sock<pos:position pos:line="74" pos:column="30"/></name></expr>;<pos:position pos:line="74" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="75" pos:column="9">pfd<pos:position pos:line="75" pos:column="12"/></name><operator pos:line="75" pos:column="12">.<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="13">reqevents<pos:position pos:line="75" pos:column="22"/></name></name> <operator pos:line="75" pos:column="23">=<pos:position pos:line="75" pos:column="24"/></operator> <name pos:line="75" pos:column="25">APR_POLLIN<pos:position pos:line="75" pos:column="35"/></name></expr>;<pos:position pos:line="75" pos:column="36"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="77" pos:column="9">apr_pollset_add<pos:position pos:line="77" pos:column="24"/></name><argument_list pos:line="77" pos:column="24">(<argument><expr><name pos:line="77" pos:column="25">pollset<pos:position pos:line="77" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="77" pos:column="34">&amp;<pos:position pos:line="77" pos:column="39"/></operator><name pos:line="77" pos:column="35">pfd<pos:position pos:line="77" pos:column="38"/></name></expr></argument>)<pos:position pos:line="77" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block>

    <expr_stmt><expr><name pos:line="80" pos:column="5">bucket_alloc<pos:position pos:line="80" pos:column="17"/></name> <operator pos:line="80" pos:column="18">=<pos:position pos:line="80" pos:column="19"/></operator> <call><name pos:line="80" pos:column="20">apr_bucket_alloc_create<pos:position pos:line="80" pos:column="43"/></name><argument_list pos:line="80" pos:column="43">(<argument><expr><name pos:line="80" pos:column="44">pworker<pos:position pos:line="80" pos:column="51"/></name></expr></argument>)<pos:position pos:line="80" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="53"/></expr_stmt>

    <expr_stmt><expr><name pos:line="82" pos:column="5">mpm_state<pos:position pos:line="82" pos:column="14"/></name> <operator pos:line="82" pos:column="15">=<pos:position pos:line="82" pos:column="16"/></operator> <name pos:line="82" pos:column="17">AP_MPMQ_RUNNING<pos:position pos:line="82" pos:column="32"/></name></expr>;<pos:position pos:line="82" pos:column="33"/></expr_stmt>

        <while pos:line="84" pos:column="9">while <condition pos:line="84" pos:column="15">(<expr><operator pos:line="84" pos:column="16">!<pos:position pos:line="84" pos:column="17"/></operator><name pos:line="84" pos:column="17">this_worker_should_exit<pos:position pos:line="84" pos:column="40"/></name></expr>)<pos:position pos:line="84" pos:column="41"/></condition> <block pos:line="84" pos:column="42">{
        <decl_stmt><decl><type><name pos:line="85" pos:column="9">conn_rec<pos:position pos:line="85" pos:column="17"/></name> <modifier pos:line="85" pos:column="18">*<pos:position pos:line="85" pos:column="19"/></modifier></type><name pos:line="85" pos:column="19">current_conn<pos:position pos:line="85" pos:column="31"/></name></decl>;<pos:position pos:line="85" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="86" pos:column="9">void<pos:position pos:line="86" pos:column="13"/></name> <modifier pos:line="86" pos:column="14">*<pos:position pos:line="86" pos:column="15"/></modifier></type><name pos:line="86" pos:column="15">csd<pos:position pos:line="86" pos:column="18"/></name></decl>;<pos:position pos:line="86" pos:column="19"/></decl_stmt>

        <comment type="block" pos:line="88" pos:column="9">/* (Re)initialize this child to a pre-connection state. */</comment>
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">apr_pool_clear<pos:position pos:line="89" pos:column="23"/></name><argument_list pos:line="89" pos:column="23">(<argument><expr><name pos:line="89" pos:column="24">ptrans<pos:position pos:line="89" pos:column="30"/></name></expr></argument>)<pos:position pos:line="89" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="32"/></expr_stmt>

        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><operator pos:line="91" pos:column="13">(<pos:position pos:line="91" pos:column="14"/></operator><name pos:line="91" pos:column="14">ap_max_requests_per_thread<pos:position pos:line="91" pos:column="40"/></name> <operator pos:line="91" pos:column="41">&gt;<pos:position pos:line="91" pos:column="45"/></operator> <literal type="number" pos:line="91" pos:column="43">0<pos:position pos:line="91" pos:column="44"/></literal>
             <operator pos:line="92" pos:column="14">&amp;&amp;<pos:position pos:line="92" pos:column="24"/></operator> <name pos:line="92" pos:column="17">requests_this_child<pos:position pos:line="92" pos:column="36"/></name><operator pos:line="92" pos:column="36">++<pos:position pos:line="92" pos:column="38"/></operator> <operator pos:line="92" pos:column="39">&gt;=<pos:position pos:line="92" pos:column="44"/></operator> <name pos:line="92" pos:column="42">ap_max_requests_per_thread<pos:position pos:line="92" pos:column="68"/></name><operator pos:line="92" pos:column="68">)<pos:position pos:line="92" pos:column="69"/></operator></expr>)<pos:position pos:line="92" pos:column="70"/></condition><then pos:line="92" pos:column="70">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="13">clean_child_exit<pos:position pos:line="93" pos:column="29"/></name><argument_list pos:line="93" pos:column="29">(<argument><expr><literal type="number" pos:line="93" pos:column="30">0<pos:position pos:line="93" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="93" pos:column="33">worker_slot<pos:position pos:line="93" pos:column="44"/></name></expr></argument>)<pos:position pos:line="93" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="46"/></expr_stmt></block></then></if>

        <expr_stmt><expr><operator pos:line="95" pos:column="9">(<pos:position pos:line="95" pos:column="10"/></operator><name pos:line="95" pos:column="10">void<pos:position pos:line="95" pos:column="14"/></name><operator pos:line="95" pos:column="14">)<pos:position pos:line="95" pos:column="15"/></operator> <call><name pos:line="95" pos:column="16">ap_update_child_status<pos:position pos:line="95" pos:column="38"/></name><argument_list pos:line="95" pos:column="38">(<argument><expr><name pos:line="95" pos:column="39">sbh<pos:position pos:line="95" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="44">SERVER_READY<pos:position pos:line="95" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="95" pos:column="58">(<pos:position pos:line="95" pos:column="59"/></operator><name pos:line="95" pos:column="59">request_rec<pos:position pos:line="95" pos:column="70"/></name> <operator pos:line="95" pos:column="71">*<pos:position pos:line="95" pos:column="72"/></operator><operator pos:line="95" pos:column="72">)<pos:position pos:line="95" pos:column="73"/></operator> <name pos:line="95" pos:column="74">NULL<pos:position pos:line="95" pos:column="78"/></name></expr></argument>)<pos:position pos:line="95" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="80"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="97" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="97" pos:column="30"/></name><argument_list pos:line="97" pos:column="30">(<argument><expr><name pos:line="97" pos:column="31">accept_mutex<pos:position pos:line="97" pos:column="43"/></name></expr></argument>)<pos:position pos:line="97" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="45"/></expr_stmt>

        <comment type="block" pos:line="99" pos:column="9">/* We always (presently) have at least 2 sockets we listen on, so
         * we don't have the ability for a fast path for a single socket
         * as some MPM's allow :(
         */</comment>
        <for pos:line="103" pos:column="9">for <control pos:line="103" pos:column="13">(<init pos:line="103" pos:column="14">;<pos:position pos:line="103" pos:column="15"/></init><condition pos:line="103" pos:column="15">;<pos:position pos:line="103" pos:column="16"/></condition><incr/>)<pos:position pos:line="103" pos:column="17"/></control> <block pos:line="103" pos:column="18">{
            <decl_stmt><decl><type><name pos:line="104" pos:column="13">apr_int32_t<pos:position pos:line="104" pos:column="24"/></name></type> <name pos:line="104" pos:column="25">numdesc<pos:position pos:line="104" pos:column="32"/></name> <init pos:line="104" pos:column="33">= <expr><literal type="number" pos:line="104" pos:column="35">0<pos:position pos:line="104" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="104" pos:column="37"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="105" pos:column="13">const<pos:position pos:line="105" pos:column="18"/></specifier> <name pos:line="105" pos:column="19">apr_pollfd_t<pos:position pos:line="105" pos:column="31"/></name> <modifier pos:line="105" pos:column="32">*<pos:position pos:line="105" pos:column="33"/></modifier></type><name pos:line="105" pos:column="33">pdesc<pos:position pos:line="105" pos:column="38"/></name> <init pos:line="105" pos:column="39">= <expr><name pos:line="105" pos:column="41">NULL<pos:position pos:line="105" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="105" pos:column="46"/></decl_stmt>

            <expr_stmt><expr><name pos:line="107" pos:column="13">rv<pos:position pos:line="107" pos:column="15"/></name> <operator pos:line="107" pos:column="16">=<pos:position pos:line="107" pos:column="17"/></operator> <call><name pos:line="107" pos:column="18">apr_pollset_poll<pos:position pos:line="107" pos:column="34"/></name><argument_list pos:line="107" pos:column="34">(<argument><expr><name pos:line="107" pos:column="35">pollset<pos:position pos:line="107" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="44">-<pos:position pos:line="107" pos:column="45"/></operator><literal type="number" pos:line="107" pos:column="45">1<pos:position pos:line="107" pos:column="46"/></literal></expr></argument>, <argument><expr><operator pos:line="107" pos:column="48">&amp;<pos:position pos:line="107" pos:column="53"/></operator><name pos:line="107" pos:column="49">numdesc<pos:position pos:line="107" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="107" pos:column="58">&amp;<pos:position pos:line="107" pos:column="63"/></operator><name pos:line="107" pos:column="59">pdesc<pos:position pos:line="107" pos:column="64"/></name></expr></argument>)<pos:position pos:line="107" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="66"/></expr_stmt>
            <if pos:line="108" pos:column="13">if <condition pos:line="108" pos:column="16">(<expr><name pos:line="108" pos:column="17">rv<pos:position pos:line="108" pos:column="19"/></name> <operator pos:line="108" pos:column="20">!=<pos:position pos:line="108" pos:column="22"/></operator> <name pos:line="108" pos:column="23">APR_SUCCESS<pos:position pos:line="108" pos:column="34"/></name></expr>)<pos:position pos:line="108" pos:column="35"/></condition><then pos:line="108" pos:column="35"> <block pos:line="108" pos:column="36">{
                <if pos:line="109" pos:column="17">if <condition pos:line="109" pos:column="20">(<expr><call><name pos:line="109" pos:column="21">APR_STATUS_IS_EINTR<pos:position pos:line="109" pos:column="40"/></name><argument_list pos:line="109" pos:column="40">(<argument><expr><name pos:line="109" pos:column="41">rv<pos:position pos:line="109" pos:column="43"/></name></expr></argument>)<pos:position pos:line="109" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="109" pos:column="45"/></condition><then pos:line="109" pos:column="45"> <block pos:line="109" pos:column="46">{
                    <if pos:line="110" pos:column="21">if <condition pos:line="110" pos:column="24">(<expr><name pos:line="110" pos:column="25">one_process<pos:position pos:line="110" pos:column="36"/></name> <operator pos:line="110" pos:column="37">&amp;&amp;<pos:position pos:line="110" pos:column="47"/></operator> <name pos:line="110" pos:column="40">shutdown_pending<pos:position pos:line="110" pos:column="56"/></name></expr>)<pos:position pos:line="110" pos:column="57"/></condition><then pos:line="110" pos:column="57">
                        <block type="pseudo"><return pos:line="111" pos:column="25">return;<pos:position pos:line="111" pos:column="32"/></return></block></then></if>
                    <continue pos:line="112" pos:column="21">continue;<pos:position pos:line="112" pos:column="30"/></continue>
                }<pos:position pos:line="113" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="114" pos:column="17">ap_log_error<pos:position pos:line="114" pos:column="29"/></name><argument_list pos:line="114" pos:column="29">(<argument><expr><name pos:line="114" pos:column="30">APLOG_MARK<pos:position pos:line="114" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="42">APLOG_ERR<pos:position pos:line="114" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="114" pos:column="53">rv<pos:position pos:line="114" pos:column="55"/></name></expr></argument>,
                             <argument><expr><name pos:line="115" pos:column="30">ap_server_conf<pos:position pos:line="115" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="46">"apr_pollset_poll: (listen)"<pos:position pos:line="115" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="115" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="76"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="116" pos:column="17">clean_child_exit<pos:position pos:line="116" pos:column="33"/></name><argument_list pos:line="116" pos:column="33">(<argument><expr><literal type="number" pos:line="116" pos:column="34">1<pos:position pos:line="116" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="116" pos:column="37">worker_slot<pos:position pos:line="116" pos:column="48"/></name></expr></argument>)<pos:position pos:line="116" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="50"/></expr_stmt>
            }<pos:position pos:line="117" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="118" pos:column="13">/* We can always use pdesc[0], but sockets at position N
             * could end up completely starved of attention in a very
             * busy server. Therefore, we round-robin across the
             * returned set of descriptors. While it is possible that
             * the returned set of descriptors might flip around and
             * continue to starve some sockets, we happen to know the
             * internal pollset implementation retains ordering
             * stability of the sockets. Thus, the round-robin should
             * ensure that a socket will eventually be serviced.
             */</comment>
            <if pos:line="128" pos:column="13">if <condition pos:line="128" pos:column="16">(<expr><name pos:line="128" pos:column="17">last_poll_idx<pos:position pos:line="128" pos:column="30"/></name> <operator pos:line="128" pos:column="31">&gt;=<pos:position pos:line="128" pos:column="36"/></operator> <name pos:line="128" pos:column="34">numdesc<pos:position pos:line="128" pos:column="41"/></name></expr>)<pos:position pos:line="128" pos:column="42"/></condition><then pos:line="128" pos:column="42">
                <block type="pseudo"><expr_stmt><expr><name pos:line="129" pos:column="17">last_poll_idx<pos:position pos:line="129" pos:column="30"/></name> <operator pos:line="129" pos:column="31">=<pos:position pos:line="129" pos:column="32"/></operator> <literal type="number" pos:line="129" pos:column="33">0<pos:position pos:line="129" pos:column="34"/></literal></expr>;<pos:position pos:line="129" pos:column="35"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="131" pos:column="13">/* Grab a listener record from the client_data of the poll
             * descriptor, and advance our saved index to round-robin
             * the next fetch.
             *
             * ### hmm... this descriptor might have POLLERR rather
             * ### than POLLIN
             */</comment>

            <expr_stmt><expr><name pos:line="139" pos:column="13">lr<pos:position pos:line="139" pos:column="15"/></name> <operator pos:line="139" pos:column="16">=<pos:position pos:line="139" pos:column="17"/></operator> <name><name pos:line="139" pos:column="18">pdesc<pos:position pos:line="139" pos:column="23"/></name><index pos:line="139" pos:column="23">[<expr><name pos:line="139" pos:column="24">last_poll_idx<pos:position pos:line="139" pos:column="37"/></name><operator pos:line="139" pos:column="37">++<pos:position pos:line="139" pos:column="39"/></operator></expr>]<pos:position pos:line="139" pos:column="40"/></index></name><operator pos:line="139" pos:column="40">.<pos:position pos:line="139" pos:column="41"/></operator><name pos:line="139" pos:column="41">client_data<pos:position pos:line="139" pos:column="52"/></name></expr>;<pos:position pos:line="139" pos:column="53"/></expr_stmt>

            <comment type="block" pos:line="141" pos:column="13">/* The only socket we add without client_data is the first, the UDP socket
             * we listen on for restart signals. If we've therefore gotten a hit on that
             * listener lr will be NULL here and we know we've been told to die.
             * Before we jump to the end of the while loop with this_worker_should_exit
             * set to 1 (causing us to exit normally we hope) we release the accept_mutex
             * as we want every thread to go through this same routine :)
             * Bit of a hack, but compared to what I had before...
             */</comment>
            <if pos:line="149" pos:column="13">if <condition pos:line="149" pos:column="16">(<expr><name pos:line="149" pos:column="17">lr<pos:position pos:line="149" pos:column="19"/></name> <operator pos:line="149" pos:column="20">==<pos:position pos:line="149" pos:column="22"/></operator> <name pos:line="149" pos:column="23">NULL<pos:position pos:line="149" pos:column="27"/></name></expr>)<pos:position pos:line="149" pos:column="28"/></condition><then pos:line="149" pos:column="28"> <block pos:line="149" pos:column="29">{
                <expr_stmt><expr><name pos:line="150" pos:column="17">this_worker_should_exit<pos:position pos:line="150" pos:column="40"/></name> <operator pos:line="150" pos:column="41">=<pos:position pos:line="150" pos:column="42"/></operator> <literal type="number" pos:line="150" pos:column="43">1<pos:position pos:line="150" pos:column="44"/></literal></expr>;<pos:position pos:line="150" pos:column="45"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="151" pos:column="17">apr_thread_mutex_unlock<pos:position pos:line="151" pos:column="40"/></name><argument_list pos:line="151" pos:column="40">(<argument><expr><name pos:line="151" pos:column="41">accept_mutex<pos:position pos:line="151" pos:column="53"/></name></expr></argument>)<pos:position pos:line="151" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="55"/></expr_stmt>
                <goto pos:line="152" pos:column="17">goto <name pos:line="152" pos:column="22">got_a_black_spot<pos:position pos:line="152" pos:column="38"/></name>;<pos:position pos:line="152" pos:column="39"/></goto>
            }<pos:position pos:line="153" pos:column="14"/></block></then></if>
            <goto pos:line="154" pos:column="13">goto <name pos:line="154" pos:column="18">got_fd<pos:position pos:line="154" pos:column="24"/></name>;<pos:position pos:line="154" pos:column="25"/></goto>
        }<pos:position pos:line="155" pos:column="10"/></block></for>
<label><name pos:line="156" pos:column="1">got_fd<pos:position pos:line="156" pos:column="7"/></name>:<pos:position pos:line="156" pos:column="8"/></label>
        <comment type="block" pos:line="157" pos:column="9">/* Run beos_accept to accept the connection and set things up to
         * allow us to process it. We always release the accept_lock here,
         * even if we failt o accept as otherwise we'll starve other workers
         * which would be bad.
         */</comment>
        <expr_stmt><expr><name pos:line="162" pos:column="9">rv<pos:position pos:line="162" pos:column="11"/></name> <operator pos:line="162" pos:column="12">=<pos:position pos:line="162" pos:column="13"/></operator> <call><name pos:line="162" pos:column="14">beos_accept<pos:position pos:line="162" pos:column="25"/></name><argument_list pos:line="162" pos:column="25">(<argument><expr><operator pos:line="162" pos:column="26">&amp;<pos:position pos:line="162" pos:column="31"/></operator><name pos:line="162" pos:column="27">csd<pos:position pos:line="162" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="32">lr<pos:position pos:line="162" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="36">ptrans<pos:position pos:line="162" pos:column="42"/></name></expr></argument>)<pos:position pos:line="162" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="163" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="163" pos:column="32"/></name><argument_list pos:line="163" pos:column="32">(<argument><expr><name pos:line="163" pos:column="33">accept_mutex<pos:position pos:line="163" pos:column="45"/></name></expr></argument>)<pos:position pos:line="163" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="47"/></expr_stmt>

        <if pos:line="165" pos:column="9">if <condition pos:line="165" pos:column="12">(<expr><name pos:line="165" pos:column="13">rv<pos:position pos:line="165" pos:column="15"/></name> <operator pos:line="165" pos:column="16">==<pos:position pos:line="165" pos:column="18"/></operator> <name pos:line="165" pos:column="19">APR_EGENERAL<pos:position pos:line="165" pos:column="31"/></name></expr>)<pos:position pos:line="165" pos:column="32"/></condition><then pos:line="165" pos:column="32"> <block pos:line="165" pos:column="33">{
            <comment type="block" pos:line="166" pos:column="13">/* resource shortage or should-not-occur occured */</comment>
            <expr_stmt><expr><call><name pos:line="167" pos:column="13">clean_child_exit<pos:position pos:line="167" pos:column="29"/></name><argument_list pos:line="167" pos:column="29">(<argument><expr><literal type="number" pos:line="167" pos:column="30">1<pos:position pos:line="167" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="167" pos:column="33">worker_slot<pos:position pos:line="167" pos:column="44"/></name></expr></argument>)<pos:position pos:line="167" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="168" pos:column="10"/></block></then> <elseif pos:line="168" pos:column="11">else <if pos:line="168" pos:column="16">if <condition pos:line="168" pos:column="19">(<expr><name pos:line="168" pos:column="20">rv<pos:position pos:line="168" pos:column="22"/></name> <operator pos:line="168" pos:column="23">!=<pos:position pos:line="168" pos:column="25"/></operator> <name pos:line="168" pos:column="26">APR_SUCCESS<pos:position pos:line="168" pos:column="37"/></name></expr>)<pos:position pos:line="168" pos:column="38"/></condition><then pos:line="168" pos:column="38">
            <block type="pseudo"><continue pos:line="169" pos:column="13">continue;<pos:position pos:line="169" pos:column="22"/></continue></block></then></if></elseif></if>

        <expr_stmt><expr><name pos:line="171" pos:column="9">current_conn<pos:position pos:line="171" pos:column="21"/></name> <operator pos:line="171" pos:column="22">=<pos:position pos:line="171" pos:column="23"/></operator> <call><name pos:line="171" pos:column="24">ap_run_create_connection<pos:position pos:line="171" pos:column="48"/></name><argument_list pos:line="171" pos:column="48">(<argument><expr><name pos:line="171" pos:column="49">ptrans<pos:position pos:line="171" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="57">ap_server_conf<pos:position pos:line="171" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="73">csd<pos:position pos:line="171" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="78">worker_slot<pos:position pos:line="171" pos:column="89"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="91">sbh<pos:position pos:line="171" pos:column="94"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="96">bucket_alloc<pos:position pos:line="171" pos:column="108"/></name></expr></argument>)<pos:position pos:line="171" pos:column="109"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="110"/></expr_stmt>
        <if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><name pos:line="172" pos:column="13">current_conn<pos:position pos:line="172" pos:column="25"/></name></expr>)<pos:position pos:line="172" pos:column="26"/></condition><then pos:line="172" pos:column="26"> <block pos:line="172" pos:column="27">{
            <expr_stmt><expr><call><name pos:line="173" pos:column="13">ap_process_connection<pos:position pos:line="173" pos:column="34"/></name><argument_list pos:line="173" pos:column="34">(<argument><expr><name pos:line="173" pos:column="35">current_conn<pos:position pos:line="173" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="49">csd<pos:position pos:line="173" pos:column="52"/></name></expr></argument>)<pos:position pos:line="173" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="173" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="174" pos:column="13">ap_lingering_close<pos:position pos:line="174" pos:column="31"/></name><argument_list pos:line="174" pos:column="31">(<argument><expr><name pos:line="174" pos:column="32">current_conn<pos:position pos:line="174" pos:column="44"/></name></expr></argument>)<pos:position pos:line="174" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="46"/></expr_stmt>
        }<pos:position pos:line="175" pos:column="10"/></block></then></if>

        <if pos:line="177" pos:column="9">if <condition pos:line="177" pos:column="12">(<expr><name pos:line="177" pos:column="13">ap_my_generation<pos:position pos:line="177" pos:column="29"/></name> <operator pos:line="177" pos:column="30">!=<pos:position pos:line="177" pos:column="32"/></operator>
                 <name><name pos:line="178" pos:column="18">ap_scoreboard_image<pos:position pos:line="178" pos:column="37"/></name><operator pos:line="178" pos:column="37">-&gt;<pos:position pos:line="178" pos:column="42"/></operator><name pos:line="178" pos:column="39">global<pos:position pos:line="178" pos:column="45"/></name><operator pos:line="178" pos:column="45">-&gt;<pos:position pos:line="178" pos:column="50"/></operator><name pos:line="178" pos:column="47">running_generation<pos:position pos:line="178" pos:column="65"/></name></name></expr>)<pos:position pos:line="178" pos:column="66"/></condition><then pos:line="178" pos:column="66"> <block pos:line="178" pos:column="67">{ <comment type="block" pos:line="178" pos:column="69">/* restart? */</comment>
            <comment type="block" pos:line="179" pos:column="13">/* yeah, this could be non-graceful restart, in which case the
             * parent will kill us soon enough, but why bother checking?
             */</comment>
            <expr_stmt><expr><name pos:line="182" pos:column="13">this_worker_should_exit<pos:position pos:line="182" pos:column="36"/></name> <operator pos:line="182" pos:column="37">=<pos:position pos:line="182" pos:column="38"/></operator> <literal type="number" pos:line="182" pos:column="39">1<pos:position pos:line="182" pos:column="40"/></literal></expr>;<pos:position pos:line="182" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="183" pos:column="10"/></block></then></if>
<label><name pos:line="184" pos:column="1">got_a_black_spot<pos:position pos:line="184" pos:column="17"/></name>:<pos:position pos:line="184" pos:column="18"/></label>
    }<pos:position pos:line="185" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="187" pos:column="5">apr_pool_destroy<pos:position pos:line="187" pos:column="21"/></name><argument_list pos:line="187" pos:column="21">(<argument><expr><name pos:line="187" pos:column="22">ptrans<pos:position pos:line="187" pos:column="28"/></name></expr></argument>)<pos:position pos:line="187" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="188" pos:column="5">apr_pool_destroy<pos:position pos:line="188" pos:column="21"/></name><argument_list pos:line="188" pos:column="21">(<argument><expr><name pos:line="188" pos:column="22">pworker<pos:position pos:line="188" pos:column="29"/></name></expr></argument>)<pos:position pos:line="188" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="31"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="190" pos:column="5">clean_child_exit<pos:position pos:line="190" pos:column="21"/></name><argument_list pos:line="190" pos:column="21">(<argument><expr><literal type="number" pos:line="190" pos:column="22">0<pos:position pos:line="190" pos:column="23"/></literal></expr></argument>, <argument><expr><name pos:line="190" pos:column="25">worker_slot<pos:position pos:line="190" pos:column="36"/></name></expr></argument>)<pos:position pos:line="190" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="38"/></expr_stmt>
}<pos:position pos:line="191" pos:column="2"/></block></function></unit>
