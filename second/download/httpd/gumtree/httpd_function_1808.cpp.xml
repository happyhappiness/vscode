<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_1808.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">inflate_out_filter<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">ap_filter_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">f<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">apr_bucket_brigade<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">bb<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_bucket<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">e<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">request_rec<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">r<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name><name pos:line="5" pos:column="22">f<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">-&gt;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="25">r<pos:position pos:line="5" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">deflate_ctx<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">ctx<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><name><name pos:line="6" pos:column="24">f<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">ctx<pos:position pos:line="6" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">zRC<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">rv<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">deflate_filter_config<pos:position pos:line="9" pos:column="26"/></name> <modifier pos:line="9" pos:column="27">*<pos:position pos:line="9" pos:column="28"/></modifier></type><name pos:line="9" pos:column="28">c<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">deflate_dirconf_t<pos:position pos:line="10" pos:column="22"/></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier></type><name pos:line="10" pos:column="24">dc<pos:position pos:line="10" pos:column="26"/></name></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Do nothing if asked to filter nothing. */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name pos:line="13" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">bb<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="31"/></condition><then pos:line="13" pos:column="31"> <block pos:line="13" pos:column="32">{
        <return pos:line="14" pos:column="9">return <expr><call><name pos:line="14" pos:column="16">ap_pass_brigade<pos:position pos:line="14" pos:column="31"/></name><argument_list pos:line="14" pos:column="31">(<argument><expr><name><name pos:line="14" pos:column="32">f<pos:position pos:line="14" pos:column="33"/></name><operator pos:line="14" pos:column="33">-&gt;<pos:position pos:line="14" pos:column="38"/></operator><name pos:line="14" pos:column="35">next<pos:position pos:line="14" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="41">bb<pos:position pos:line="14" pos:column="43"/></name></expr></argument>)<pos:position pos:line="14" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="45"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="17" pos:column="5">c<pos:position pos:line="17" pos:column="6"/></name> <operator pos:line="17" pos:column="7">=<pos:position pos:line="17" pos:column="8"/></operator> <call><name pos:line="17" pos:column="9">ap_get_module_config<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name><name pos:line="17" pos:column="30">r<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">server<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">module_config<pos:position pos:line="17" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="56">&amp;<pos:position pos:line="17" pos:column="61"/></operator><name pos:line="17" pos:column="57">deflate_module<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="73"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">dc<pos:position pos:line="18" pos:column="7"/></name> <operator pos:line="18" pos:column="8">=<pos:position pos:line="18" pos:column="9"/></operator> <call><name pos:line="18" pos:column="10">ap_get_module_config<pos:position pos:line="18" pos:column="30"/></name><argument_list pos:line="18" pos:column="30">(<argument><expr><name><name pos:line="18" pos:column="31">r<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">-&gt;<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="34">per_dir_config<pos:position pos:line="18" pos:column="48"/></name></name></expr></argument>, <argument><expr><operator pos:line="18" pos:column="50">&amp;<pos:position pos:line="18" pos:column="55"/></operator><name pos:line="18" pos:column="51">deflate_module<pos:position pos:line="18" pos:column="65"/></name></expr></argument>)<pos:position pos:line="18" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="67"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">ctx<pos:position pos:line="20" pos:column="13"/></name></expr>)<pos:position pos:line="20" pos:column="14"/></condition><then pos:line="20" pos:column="14"> <block pos:line="20" pos:column="15">{

        <comment type="block" pos:line="22" pos:column="9">/* only work on main request/no subrequests */</comment>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">!<pos:position pos:line="23" pos:column="14"/></operator><call><name pos:line="23" pos:column="14">ap_is_initial_req<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name pos:line="23" pos:column="32">r<pos:position pos:line="23" pos:column="33"/></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="35"/></condition><then pos:line="23" pos:column="35"> <block pos:line="23" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">ap_remove_output_filter<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name pos:line="24" pos:column="37">f<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
            <return pos:line="25" pos:column="13">return <expr><call><name pos:line="25" pos:column="20">ap_pass_brigade<pos:position pos:line="25" pos:column="35"/></name><argument_list pos:line="25" pos:column="35">(<argument><expr><name><name pos:line="25" pos:column="36">f<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">-&gt;<pos:position pos:line="25" pos:column="42"/></operator><name pos:line="25" pos:column="39">next<pos:position pos:line="25" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">bb<pos:position pos:line="25" pos:column="47"/></name></expr></argument>)<pos:position pos:line="25" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="49"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="28" pos:column="9">/* We can't operate on Content-Ranges */</comment>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">apr_table_get<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name><name pos:line="29" pos:column="27">r<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">-&gt;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="30">headers_out<pos:position pos:line="29" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="29" pos:column="43">"Content-Range"<pos:position pos:line="29" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="59"/></argument_list></call> <operator pos:line="29" pos:column="60">!=<pos:position pos:line="29" pos:column="62"/></operator> <name pos:line="29" pos:column="63">NULL<pos:position pos:line="29" pos:column="67"/></name></expr>)<pos:position pos:line="29" pos:column="68"/></condition><then pos:line="29" pos:column="68"> <block pos:line="29" pos:column="69">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">ap_remove_output_filter<pos:position pos:line="30" pos:column="36"/></name><argument_list pos:line="30" pos:column="36">(<argument><expr><name pos:line="30" pos:column="37">f<pos:position pos:line="30" pos:column="38"/></name></expr></argument>)<pos:position pos:line="30" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="40"/></expr_stmt>
            <return pos:line="31" pos:column="13">return <expr><call><name pos:line="31" pos:column="20">ap_pass_brigade<pos:position pos:line="31" pos:column="35"/></name><argument_list pos:line="31" pos:column="35">(<argument><expr><name><name pos:line="31" pos:column="36">f<pos:position pos:line="31" pos:column="37"/></name><operator pos:line="31" pos:column="37">-&gt;<pos:position pos:line="31" pos:column="42"/></operator><name pos:line="31" pos:column="39">next<pos:position pos:line="31" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="45">bb<pos:position pos:line="31" pos:column="47"/></name></expr></argument>)<pos:position pos:line="31" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="49"/></return>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="34" pos:column="9">/*
         * Let's see what our current Content-Encoding is.
         * Only inflate if gzipped.
         */</comment>
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><call><name pos:line="38" pos:column="13">check_gzip<pos:position pos:line="38" pos:column="23"/></name><argument_list pos:line="38" pos:column="23">(<argument><expr><name pos:line="38" pos:column="24">r<pos:position pos:line="38" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="27">r<pos:position pos:line="38" pos:column="28"/></name><operator pos:line="38" pos:column="28">-&gt;<pos:position pos:line="38" pos:column="33"/></operator><name pos:line="38" pos:column="30">headers_out<pos:position pos:line="38" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="38" pos:column="43">r<pos:position pos:line="38" pos:column="44"/></name><operator pos:line="38" pos:column="44">-&gt;<pos:position pos:line="38" pos:column="49"/></operator><name pos:line="38" pos:column="46">err_headers_out<pos:position pos:line="38" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call> <operator pos:line="38" pos:column="63">==<pos:position pos:line="38" pos:column="65"/></operator> <literal type="number" pos:line="38" pos:column="66">0<pos:position pos:line="38" pos:column="67"/></literal></expr>)<pos:position pos:line="38" pos:column="68"/></condition><then pos:line="38" pos:column="68"> <block pos:line="38" pos:column="69">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">ap_remove_output_filter<pos:position pos:line="39" pos:column="36"/></name><argument_list pos:line="39" pos:column="36">(<argument><expr><name pos:line="39" pos:column="37">f<pos:position pos:line="39" pos:column="38"/></name></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="40"/></expr_stmt>
            <return pos:line="40" pos:column="13">return <expr><call><name pos:line="40" pos:column="20">ap_pass_brigade<pos:position pos:line="40" pos:column="35"/></name><argument_list pos:line="40" pos:column="35">(<argument><expr><name><name pos:line="40" pos:column="36">f<pos:position pos:line="40" pos:column="37"/></name><operator pos:line="40" pos:column="37">-&gt;<pos:position pos:line="40" pos:column="42"/></operator><name pos:line="40" pos:column="39">next<pos:position pos:line="40" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="45">bb<pos:position pos:line="40" pos:column="47"/></name></expr></argument>)<pos:position pos:line="40" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="49"/></return>
        }<pos:position pos:line="41" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="43" pos:column="9">/* No need to inflate HEAD or 204/304 */</comment>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><call><name pos:line="44" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="44" pos:column="30"/></name><argument_list pos:line="44" pos:column="30">(<argument><expr><call><name pos:line="44" pos:column="31">APR_BRIGADE_FIRST<pos:position pos:line="44" pos:column="48"/></name><argument_list pos:line="44" pos:column="48">(<argument><expr><name pos:line="44" pos:column="49">bb<pos:position pos:line="44" pos:column="51"/></name></expr></argument>)<pos:position pos:line="44" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="44" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="44" pos:column="54"/></condition><then pos:line="44" pos:column="54"> <block pos:line="44" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">ap_remove_output_filter<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><name pos:line="45" pos:column="37">f<pos:position pos:line="45" pos:column="38"/></name></expr></argument>)<pos:position pos:line="45" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="40"/></expr_stmt>
            <return pos:line="46" pos:column="13">return <expr><call><name pos:line="46" pos:column="20">ap_pass_brigade<pos:position pos:line="46" pos:column="35"/></name><argument_list pos:line="46" pos:column="35">(<argument><expr><name><name pos:line="46" pos:column="36">f<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">-&gt;<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="39">next<pos:position pos:line="46" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="45">bb<pos:position pos:line="46" pos:column="47"/></name></expr></argument>)<pos:position pos:line="46" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="49"/></return>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="49" pos:column="9">f<pos:position pos:line="49" pos:column="10"/></name><operator pos:line="49" pos:column="10">-&gt;<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="12">ctx<pos:position pos:line="49" pos:column="15"/></name></name> <operator pos:line="49" pos:column="16">=<pos:position pos:line="49" pos:column="17"/></operator> <name pos:line="49" pos:column="18">ctx<pos:position pos:line="49" pos:column="21"/></name> <operator pos:line="49" pos:column="22">=<pos:position pos:line="49" pos:column="23"/></operator> <call><name pos:line="49" pos:column="24">apr_pcalloc<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name><name pos:line="49" pos:column="36">f<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">-&gt;<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="39">r<pos:position pos:line="49" pos:column="40"/></name><operator pos:line="49" pos:column="40">-&gt;<pos:position pos:line="49" pos:column="45"/></operator><name pos:line="49" pos:column="42">pool<pos:position pos:line="49" pos:column="46"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="49" pos:column="48">sizeof<argument_list pos:line="49" pos:column="54">(<argument><expr><operator pos:line="49" pos:column="55">*<pos:position pos:line="49" pos:column="56"/></operator><name pos:line="49" pos:column="56">ctx<pos:position pos:line="49" pos:column="59"/></name></expr></argument>)<pos:position pos:line="49" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="49" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="50" pos:column="9">ctx<pos:position pos:line="50" pos:column="12"/></name><operator pos:line="50" pos:column="12">-&gt;<pos:position pos:line="50" pos:column="17"/></operator><name pos:line="50" pos:column="14">bb<pos:position pos:line="50" pos:column="16"/></name></name> <operator pos:line="50" pos:column="17">=<pos:position pos:line="50" pos:column="18"/></operator> <call><name pos:line="50" pos:column="19">apr_brigade_create<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name><name pos:line="50" pos:column="38">r<pos:position pos:line="50" pos:column="39"/></name><operator pos:line="50" pos:column="39">-&gt;<pos:position pos:line="50" pos:column="44"/></operator><name pos:line="50" pos:column="41">pool<pos:position pos:line="50" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="47">f<pos:position pos:line="50" pos:column="48"/></name><operator pos:line="50" pos:column="48">-&gt;<pos:position pos:line="50" pos:column="53"/></operator><name pos:line="50" pos:column="50">c<pos:position pos:line="50" pos:column="51"/></name><operator pos:line="50" pos:column="51">-&gt;<pos:position pos:line="50" pos:column="56"/></operator><name pos:line="50" pos:column="53">bucket_alloc<pos:position pos:line="50" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="51" pos:column="9">ctx<pos:position pos:line="51" pos:column="12"/></name><operator pos:line="51" pos:column="12">-&gt;<pos:position pos:line="51" pos:column="17"/></operator><name pos:line="51" pos:column="14">buffer<pos:position pos:line="51" pos:column="20"/></name></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <call><name pos:line="51" pos:column="23">apr_palloc<pos:position pos:line="51" pos:column="33"/></name><argument_list pos:line="51" pos:column="33">(<argument><expr><name><name pos:line="51" pos:column="34">r<pos:position pos:line="51" pos:column="35"/></name><operator pos:line="51" pos:column="35">-&gt;<pos:position pos:line="51" pos:column="40"/></operator><name pos:line="51" pos:column="37">pool<pos:position pos:line="51" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="43">c<pos:position pos:line="51" pos:column="44"/></name><operator pos:line="51" pos:column="44">-&gt;<pos:position pos:line="51" pos:column="49"/></operator><name pos:line="51" pos:column="46">bufferSize<pos:position pos:line="51" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="52" pos:column="9">ctx<pos:position pos:line="52" pos:column="12"/></name><operator pos:line="52" pos:column="12">-&gt;<pos:position pos:line="52" pos:column="17"/></operator><name pos:line="52" pos:column="14">libz_end_func<pos:position pos:line="52" pos:column="27"/></name></name> <operator pos:line="52" pos:column="28">=<pos:position pos:line="52" pos:column="29"/></operator> <name pos:line="52" pos:column="30">inflateEnd<pos:position pos:line="52" pos:column="40"/></name></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="53" pos:column="9">ctx<pos:position pos:line="53" pos:column="12"/></name><operator pos:line="53" pos:column="12">-&gt;<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="14">validation_buffer<pos:position pos:line="53" pos:column="31"/></name></name> <operator pos:line="53" pos:column="32">=<pos:position pos:line="53" pos:column="33"/></operator> <name pos:line="53" pos:column="34">NULL<pos:position pos:line="53" pos:column="38"/></name></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">ctx<pos:position pos:line="54" pos:column="12"/></name><operator pos:line="54" pos:column="12">-&gt;<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="14">validation_buffer_length<pos:position pos:line="54" pos:column="38"/></name></name> <operator pos:line="54" pos:column="39">=<pos:position pos:line="54" pos:column="40"/></operator> <literal type="number" pos:line="54" pos:column="41">0<pos:position pos:line="54" pos:column="42"/></literal></expr>;<pos:position pos:line="54" pos:column="43"/></expr_stmt>

        <expr_stmt><expr><name pos:line="56" pos:column="9">zRC<pos:position pos:line="56" pos:column="12"/></name> <operator pos:line="56" pos:column="13">=<pos:position pos:line="56" pos:column="14"/></operator> <call><name pos:line="56" pos:column="15">inflateInit2<pos:position pos:line="56" pos:column="27"/></name><argument_list pos:line="56" pos:column="27">(<argument><expr><operator pos:line="56" pos:column="28">&amp;<pos:position pos:line="56" pos:column="33"/></operator><name><name pos:line="56" pos:column="29">ctx<pos:position pos:line="56" pos:column="32"/></name><operator pos:line="56" pos:column="32">-&gt;<pos:position pos:line="56" pos:column="37"/></operator><name pos:line="56" pos:column="34">stream<pos:position pos:line="56" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="42">c<pos:position pos:line="56" pos:column="43"/></name><operator pos:line="56" pos:column="43">-&gt;<pos:position pos:line="56" pos:column="48"/></operator><name pos:line="56" pos:column="45">windowSize<pos:position pos:line="56" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="57"/></expr_stmt>

        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><name pos:line="58" pos:column="13">zRC<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">!=<pos:position pos:line="58" pos:column="19"/></operator> <name pos:line="58" pos:column="20">Z_OK<pos:position pos:line="58" pos:column="24"/></name></expr>)<pos:position pos:line="58" pos:column="25"/></condition><then pos:line="58" pos:column="25"> <block pos:line="58" pos:column="26">{
            <expr_stmt><expr><name><name pos:line="59" pos:column="13">f<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">-&gt;<pos:position pos:line="59" pos:column="19"/></operator><name pos:line="59" pos:column="16">ctx<pos:position pos:line="59" pos:column="19"/></name></name> <operator pos:line="59" pos:column="20">=<pos:position pos:line="59" pos:column="21"/></operator> <name pos:line="59" pos:column="22">NULL<pos:position pos:line="59" pos:column="26"/></name></expr>;<pos:position pos:line="59" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="60" pos:column="13">inflateEnd<pos:position pos:line="60" pos:column="23"/></name><argument_list pos:line="60" pos:column="23">(<argument><expr><operator pos:line="60" pos:column="24">&amp;<pos:position pos:line="60" pos:column="29"/></operator><name><name pos:line="60" pos:column="25">ctx<pos:position pos:line="60" pos:column="28"/></name><operator pos:line="60" pos:column="28">-&gt;<pos:position pos:line="60" pos:column="33"/></operator><name pos:line="60" pos:column="30">stream<pos:position pos:line="60" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="61" pos:column="13">ap_log_rerror<pos:position pos:line="61" pos:column="26"/></name><argument_list pos:line="61" pos:column="26">(<argument><expr><name pos:line="61" pos:column="27">APLOG_MARK<pos:position pos:line="61" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="39">APLOG_ERR<pos:position pos:line="61" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="50">0<pos:position pos:line="61" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="53">r<pos:position pos:line="61" pos:column="54"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="62" pos:column="27">"unable to init Zlib: "<pos:position pos:line="62" pos:column="50"/></literal>
                          <literal type="string" pos:line="63" pos:column="27">"inflateInit2 returned %d: URL %s"<pos:position pos:line="63" pos:column="61"/></literal></expr></argument>,
                          <argument><expr><name pos:line="64" pos:column="27">zRC<pos:position pos:line="64" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="32">r<pos:position pos:line="64" pos:column="33"/></name><operator pos:line="64" pos:column="33">-&gt;<pos:position pos:line="64" pos:column="38"/></operator><name pos:line="64" pos:column="35">uri<pos:position pos:line="64" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="40"/></expr_stmt>
            <comment type="block" pos:line="65" pos:column="13">/*
             * Remove ourselves as it does not make sense to return:
             * We are not able to init libz and pass data down the chain
             * compressed.
             */</comment>
            <expr_stmt><expr><call><name pos:line="70" pos:column="13">ap_remove_output_filter<pos:position pos:line="70" pos:column="36"/></name><argument_list pos:line="70" pos:column="36">(<argument><expr><name pos:line="70" pos:column="37">f<pos:position pos:line="70" pos:column="38"/></name></expr></argument>)<pos:position pos:line="70" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="40"/></expr_stmt>
            <return pos:line="71" pos:column="13">return <expr><call><name pos:line="71" pos:column="20">ap_pass_brigade<pos:position pos:line="71" pos:column="35"/></name><argument_list pos:line="71" pos:column="35">(<argument><expr><name><name pos:line="71" pos:column="36">f<pos:position pos:line="71" pos:column="37"/></name><operator pos:line="71" pos:column="37">-&gt;<pos:position pos:line="71" pos:column="42"/></operator><name pos:line="71" pos:column="39">next<pos:position pos:line="71" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="45">bb<pos:position pos:line="71" pos:column="47"/></name></expr></argument>)<pos:position pos:line="71" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="49"/></return>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="74" pos:column="9">/*
         * Register a cleanup function to ensure that we cleanup the internal
         * libz resources.
         */</comment>
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">apr_pool_cleanup_register<pos:position pos:line="78" pos:column="34"/></name><argument_list pos:line="78" pos:column="34">(<argument><expr><name><name pos:line="78" pos:column="35">r<pos:position pos:line="78" pos:column="36"/></name><operator pos:line="78" pos:column="36">-&gt;<pos:position pos:line="78" pos:column="41"/></operator><name pos:line="78" pos:column="38">pool<pos:position pos:line="78" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="44">ctx<pos:position pos:line="78" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="78" pos:column="49">deflate_ctx_cleanup<pos:position pos:line="78" pos:column="68"/></name></expr></argument>,
                                  <argument><expr><name pos:line="79" pos:column="35">apr_pool_cleanup_null<pos:position pos:line="79" pos:column="56"/></name></expr></argument>)<pos:position pos:line="79" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="58"/></expr_stmt>

        <comment type="block" pos:line="81" pos:column="9">/* these are unlikely to be set anyway, but ... */</comment>
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">apr_table_unset<pos:position pos:line="82" pos:column="24"/></name><argument_list pos:line="82" pos:column="24">(<argument><expr><name><name pos:line="82" pos:column="25">r<pos:position pos:line="82" pos:column="26"/></name><operator pos:line="82" pos:column="26">-&gt;<pos:position pos:line="82" pos:column="31"/></operator><name pos:line="82" pos:column="28">headers_out<pos:position pos:line="82" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="41">"Content-Length"<pos:position pos:line="82" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">apr_table_unset<pos:position pos:line="83" pos:column="24"/></name><argument_list pos:line="83" pos:column="24">(<argument><expr><name><name pos:line="83" pos:column="25">r<pos:position pos:line="83" pos:column="26"/></name><operator pos:line="83" pos:column="26">-&gt;<pos:position pos:line="83" pos:column="31"/></operator><name pos:line="83" pos:column="28">headers_out<pos:position pos:line="83" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="41">"Content-MD5"<pos:position pos:line="83" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="56"/></expr_stmt>

        <comment type="block" pos:line="85" pos:column="9">/* initialize inflate output buffer */</comment>
        <expr_stmt><expr><name><name pos:line="86" pos:column="9">ctx<pos:position pos:line="86" pos:column="12"/></name><operator pos:line="86" pos:column="12">-&gt;<pos:position pos:line="86" pos:column="17"/></operator><name pos:line="86" pos:column="14">stream<pos:position pos:line="86" pos:column="20"/></name><operator pos:line="86" pos:column="20">.<pos:position pos:line="86" pos:column="21"/></operator><name pos:line="86" pos:column="21">next_out<pos:position pos:line="86" pos:column="29"/></name></name> <operator pos:line="86" pos:column="30">=<pos:position pos:line="86" pos:column="31"/></operator> <name><name pos:line="86" pos:column="32">ctx<pos:position pos:line="86" pos:column="35"/></name><operator pos:line="86" pos:column="35">-&gt;<pos:position pos:line="86" pos:column="40"/></operator><name pos:line="86" pos:column="37">buffer<pos:position pos:line="86" pos:column="43"/></name></name></expr>;<pos:position pos:line="86" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="87" pos:column="9">ctx<pos:position pos:line="87" pos:column="12"/></name><operator pos:line="87" pos:column="12">-&gt;<pos:position pos:line="87" pos:column="17"/></operator><name pos:line="87" pos:column="14">stream<pos:position pos:line="87" pos:column="20"/></name><operator pos:line="87" pos:column="20">.<pos:position pos:line="87" pos:column="21"/></operator><name pos:line="87" pos:column="21">avail_out<pos:position pos:line="87" pos:column="30"/></name></name> <operator pos:line="87" pos:column="31">=<pos:position pos:line="87" pos:column="32"/></operator> <name><name pos:line="87" pos:column="33">c<pos:position pos:line="87" pos:column="34"/></name><operator pos:line="87" pos:column="34">-&gt;<pos:position pos:line="87" pos:column="39"/></operator><name pos:line="87" pos:column="36">bufferSize<pos:position pos:line="87" pos:column="46"/></name></name></expr>;<pos:position pos:line="87" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>

    <while pos:line="90" pos:column="5">while <condition pos:line="90" pos:column="11">(<expr><operator pos:line="90" pos:column="12">!<pos:position pos:line="90" pos:column="13"/></operator><call><name pos:line="90" pos:column="13">APR_BRIGADE_EMPTY<pos:position pos:line="90" pos:column="30"/></name><argument_list pos:line="90" pos:column="30">(<argument><expr><name pos:line="90" pos:column="31">bb<pos:position pos:line="90" pos:column="33"/></name></expr></argument>)<pos:position pos:line="90" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="90" pos:column="35"/></condition>
    <block pos:line="91" pos:column="5">{
        <decl_stmt><decl><type><specifier pos:line="92" pos:column="9">const<pos:position pos:line="92" pos:column="14"/></specifier> <name pos:line="92" pos:column="15">char<pos:position pos:line="92" pos:column="19"/></name> <modifier pos:line="92" pos:column="20">*<pos:position pos:line="92" pos:column="21"/></modifier></type><name pos:line="92" pos:column="21">data<pos:position pos:line="92" pos:column="25"/></name></decl>;<pos:position pos:line="92" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="93" pos:column="9">apr_bucket<pos:position pos:line="93" pos:column="19"/></name> <modifier pos:line="93" pos:column="20">*<pos:position pos:line="93" pos:column="21"/></modifier></type><name pos:line="93" pos:column="21">b<pos:position pos:line="93" pos:column="22"/></name></decl>;<pos:position pos:line="93" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="94" pos:column="9">apr_size_t<pos:position pos:line="94" pos:column="19"/></name></type> <name pos:line="94" pos:column="20">len<pos:position pos:line="94" pos:column="23"/></name></decl>;<pos:position pos:line="94" pos:column="24"/></decl_stmt>

        <expr_stmt><expr><name pos:line="96" pos:column="9">e<pos:position pos:line="96" pos:column="10"/></name> <operator pos:line="96" pos:column="11">=<pos:position pos:line="96" pos:column="12"/></operator> <call><name pos:line="96" pos:column="13">APR_BRIGADE_FIRST<pos:position pos:line="96" pos:column="30"/></name><argument_list pos:line="96" pos:column="30">(<argument><expr><name pos:line="96" pos:column="31">bb<pos:position pos:line="96" pos:column="33"/></name></expr></argument>)<pos:position pos:line="96" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="35"/></expr_stmt>

        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><call><name pos:line="98" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="98" pos:column="30"/></name><argument_list pos:line="98" pos:column="30">(<argument><expr><name pos:line="98" pos:column="31">e<pos:position pos:line="98" pos:column="32"/></name></expr></argument>)<pos:position pos:line="98" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="98" pos:column="34"/></condition><then pos:line="98" pos:column="34"> <block pos:line="98" pos:column="35">{
            <comment type="block" pos:line="99" pos:column="13">/*
             * We are really done now. Ensure that we never return here, even
             * if a second EOS bucket falls down the chain. Thus remove
             * ourselves.
             */</comment>
            <expr_stmt><expr><call><name pos:line="104" pos:column="13">ap_remove_output_filter<pos:position pos:line="104" pos:column="36"/></name><argument_list pos:line="104" pos:column="36">(<argument><expr><name pos:line="104" pos:column="37">f<pos:position pos:line="104" pos:column="38"/></name></expr></argument>)<pos:position pos:line="104" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="40"/></expr_stmt>
            <comment type="block" pos:line="105" pos:column="13">/* should be zero already anyway */</comment>
            <expr_stmt><expr><name><name pos:line="106" pos:column="13">ctx<pos:position pos:line="106" pos:column="16"/></name><operator pos:line="106" pos:column="16">-&gt;<pos:position pos:line="106" pos:column="21"/></operator><name pos:line="106" pos:column="18">stream<pos:position pos:line="106" pos:column="24"/></name><operator pos:line="106" pos:column="24">.<pos:position pos:line="106" pos:column="25"/></operator><name pos:line="106" pos:column="25">avail_in<pos:position pos:line="106" pos:column="33"/></name></name> <operator pos:line="106" pos:column="34">=<pos:position pos:line="106" pos:column="35"/></operator> <literal type="number" pos:line="106" pos:column="36">0<pos:position pos:line="106" pos:column="37"/></literal></expr>;<pos:position pos:line="106" pos:column="38"/></expr_stmt>
            <comment type="block" pos:line="107" pos:column="13">/*
             * Flush the remaining data from the zlib buffers. It is correct
             * to use Z_SYNC_FLUSH in this case and not Z_FINISH as in the
             * deflate case. In the inflate case Z_FINISH requires to have a
             * large enough output buffer to put ALL data in otherwise it
             * fails, whereas in the deflate case you can empty a filled output
             * buffer and call it again until no more output can be created.
             */</comment>
            <expr_stmt><expr><call><name pos:line="115" pos:column="13">flush_libz_buffer<pos:position pos:line="115" pos:column="30"/></name><argument_list pos:line="115" pos:column="30">(<argument><expr><name pos:line="115" pos:column="31">ctx<pos:position pos:line="115" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="36">c<pos:position pos:line="115" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="39">f<pos:position pos:line="115" pos:column="40"/></name><operator pos:line="115" pos:column="40">-&gt;<pos:position pos:line="115" pos:column="45"/></operator><name pos:line="115" pos:column="42">c<pos:position pos:line="115" pos:column="43"/></name><operator pos:line="115" pos:column="43">-&gt;<pos:position pos:line="115" pos:column="48"/></operator><name pos:line="115" pos:column="45">bucket_alloc<pos:position pos:line="115" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="59">inflate<pos:position pos:line="115" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="115" pos:column="68">Z_SYNC_FLUSH<pos:position pos:line="115" pos:column="80"/></name></expr></argument>,
                              <argument><expr><name pos:line="116" pos:column="31">UPDATE_CRC<pos:position pos:line="116" pos:column="41"/></name></expr></argument>)<pos:position pos:line="116" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="117" pos:column="13">ap_log_rerror<pos:position pos:line="117" pos:column="26"/></name><argument_list pos:line="117" pos:column="26">(<argument><expr><name pos:line="117" pos:column="27">APLOG_MARK<pos:position pos:line="117" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="117" pos:column="39">APLOG_DEBUG<pos:position pos:line="117" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="117" pos:column="52">0<pos:position pos:line="117" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="117" pos:column="55">r<pos:position pos:line="117" pos:column="56"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="118" pos:column="27">"Zlib: Inflated %ld to %ld : URL %s"<pos:position pos:line="118" pos:column="63"/></literal></expr></argument>,
                          <argument><expr><name><name pos:line="119" pos:column="27">ctx<pos:position pos:line="119" pos:column="30"/></name><operator pos:line="119" pos:column="30">-&gt;<pos:position pos:line="119" pos:column="35"/></operator><name pos:line="119" pos:column="32">stream<pos:position pos:line="119" pos:column="38"/></name><operator pos:line="119" pos:column="38">.<pos:position pos:line="119" pos:column="39"/></operator><name pos:line="119" pos:column="39">total_in<pos:position pos:line="119" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="49">ctx<pos:position pos:line="119" pos:column="52"/></name><operator pos:line="119" pos:column="52">-&gt;<pos:position pos:line="119" pos:column="57"/></operator><name pos:line="119" pos:column="54">stream<pos:position pos:line="119" pos:column="60"/></name><operator pos:line="119" pos:column="60">.<pos:position pos:line="119" pos:column="61"/></operator><name pos:line="119" pos:column="61">total_out<pos:position pos:line="119" pos:column="70"/></name></name></expr></argument>, <argument><expr><name><name pos:line="119" pos:column="72">r<pos:position pos:line="119" pos:column="73"/></name><operator pos:line="119" pos:column="73">-&gt;<pos:position pos:line="119" pos:column="78"/></operator><name pos:line="119" pos:column="75">uri<pos:position pos:line="119" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="119" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="119" pos:column="80"/></expr_stmt>

            <if pos:line="121" pos:column="13">if <condition pos:line="121" pos:column="16">(<expr><name><name pos:line="121" pos:column="17">ctx<pos:position pos:line="121" pos:column="20"/></name><operator pos:line="121" pos:column="20">-&gt;<pos:position pos:line="121" pos:column="25"/></operator><name pos:line="121" pos:column="22">validation_buffer_length<pos:position pos:line="121" pos:column="46"/></name></name> <operator pos:line="121" pos:column="47">==<pos:position pos:line="121" pos:column="49"/></operator> <name pos:line="121" pos:column="50">VALIDATION_SIZE<pos:position pos:line="121" pos:column="65"/></name></expr>)<pos:position pos:line="121" pos:column="66"/></condition><then pos:line="121" pos:column="66"> <block pos:line="121" pos:column="67">{
                <decl_stmt><decl><type><name pos:line="122" pos:column="17">unsigned<pos:position pos:line="122" pos:column="25"/></name> <name pos:line="122" pos:column="26">long<pos:position pos:line="122" pos:column="30"/></name></type> <name pos:line="122" pos:column="31">compCRC<pos:position pos:line="122" pos:column="38"/></name></decl>, <decl><type ref="prev"/><name pos:line="122" pos:column="40">compLen<pos:position pos:line="122" pos:column="47"/></name></decl>;<pos:position pos:line="122" pos:column="48"/></decl_stmt>
                <expr_stmt><expr><name pos:line="123" pos:column="17">compCRC<pos:position pos:line="123" pos:column="24"/></name> <operator pos:line="123" pos:column="25">=<pos:position pos:line="123" pos:column="26"/></operator> <call><name pos:line="123" pos:column="27">getLong<pos:position pos:line="123" pos:column="34"/></name><argument_list pos:line="123" pos:column="34">(<argument><expr><name><name pos:line="123" pos:column="35">ctx<pos:position pos:line="123" pos:column="38"/></name><operator pos:line="123" pos:column="38">-&gt;<pos:position pos:line="123" pos:column="43"/></operator><name pos:line="123" pos:column="40">validation_buffer<pos:position pos:line="123" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="59"/></expr_stmt>
                <if pos:line="124" pos:column="17">if <condition pos:line="124" pos:column="20">(<expr><name><name pos:line="124" pos:column="21">ctx<pos:position pos:line="124" pos:column="24"/></name><operator pos:line="124" pos:column="24">-&gt;<pos:position pos:line="124" pos:column="29"/></operator><name pos:line="124" pos:column="26">crc<pos:position pos:line="124" pos:column="29"/></name></name> <operator pos:line="124" pos:column="30">!=<pos:position pos:line="124" pos:column="32"/></operator> <name pos:line="124" pos:column="33">compCRC<pos:position pos:line="124" pos:column="40"/></name></expr>)<pos:position pos:line="124" pos:column="41"/></condition><then pos:line="124" pos:column="41"> <block pos:line="124" pos:column="42">{
                    <expr_stmt><expr><call><name pos:line="125" pos:column="21">ap_log_rerror<pos:position pos:line="125" pos:column="34"/></name><argument_list pos:line="125" pos:column="34">(<argument><expr><name pos:line="125" pos:column="35">APLOG_MARK<pos:position pos:line="125" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="47">APLOG_ERR<pos:position pos:line="125" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="125" pos:column="58">0<pos:position pos:line="125" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="125" pos:column="61">r<pos:position pos:line="125" pos:column="62"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="126" pos:column="35">"Zlib: Checksum of inflated stream invalid"<pos:position pos:line="126" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="80"/></expr_stmt>
                    <return pos:line="127" pos:column="21">return <expr><name pos:line="127" pos:column="28">APR_EGENERAL<pos:position pos:line="127" pos:column="40"/></name></expr>;<pos:position pos:line="127" pos:column="41"/></return>
                }<pos:position pos:line="128" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name><name pos:line="129" pos:column="17">ctx<pos:position pos:line="129" pos:column="20"/></name><operator pos:line="129" pos:column="20">-&gt;<pos:position pos:line="129" pos:column="25"/></operator><name pos:line="129" pos:column="22">validation_buffer<pos:position pos:line="129" pos:column="39"/></name></name> <operator pos:line="129" pos:column="40">+=<pos:position pos:line="129" pos:column="42"/></operator> <name pos:line="129" pos:column="43">VALIDATION_SIZE<pos:position pos:line="129" pos:column="58"/></name> <operator pos:line="129" pos:column="59">/<pos:position pos:line="129" pos:column="60"/></operator> <literal type="number" pos:line="129" pos:column="61">2<pos:position pos:line="129" pos:column="62"/></literal></expr>;<pos:position pos:line="129" pos:column="63"/></expr_stmt>
                <expr_stmt><expr><name pos:line="130" pos:column="17">compLen<pos:position pos:line="130" pos:column="24"/></name> <operator pos:line="130" pos:column="25">=<pos:position pos:line="130" pos:column="26"/></operator> <call><name pos:line="130" pos:column="27">getLong<pos:position pos:line="130" pos:column="34"/></name><argument_list pos:line="130" pos:column="34">(<argument><expr><name><name pos:line="130" pos:column="35">ctx<pos:position pos:line="130" pos:column="38"/></name><operator pos:line="130" pos:column="38">-&gt;<pos:position pos:line="130" pos:column="43"/></operator><name pos:line="130" pos:column="40">validation_buffer<pos:position pos:line="130" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="130" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="59"/></expr_stmt>
                <comment type="block" pos:line="131" pos:column="17">/* gzip stores original size only as 4 byte value */</comment>
                <if pos:line="132" pos:column="17">if <condition pos:line="132" pos:column="20">(<expr><operator pos:line="132" pos:column="21">(<pos:position pos:line="132" pos:column="22"/></operator><name><name pos:line="132" pos:column="22">ctx<pos:position pos:line="132" pos:column="25"/></name><operator pos:line="132" pos:column="25">-&gt;<pos:position pos:line="132" pos:column="30"/></operator><name pos:line="132" pos:column="27">stream<pos:position pos:line="132" pos:column="33"/></name><operator pos:line="132" pos:column="33">.<pos:position pos:line="132" pos:column="34"/></operator><name pos:line="132" pos:column="34">total_out<pos:position pos:line="132" pos:column="43"/></name></name> <operator pos:line="132" pos:column="44">&amp;<pos:position pos:line="132" pos:column="49"/></operator> <literal type="number" pos:line="132" pos:column="46">0xFFFFFFFF<pos:position pos:line="132" pos:column="56"/></literal><operator pos:line="132" pos:column="56">)<pos:position pos:line="132" pos:column="57"/></operator> <operator pos:line="132" pos:column="58">!=<pos:position pos:line="132" pos:column="60"/></operator> <name pos:line="132" pos:column="61">compLen<pos:position pos:line="132" pos:column="68"/></name></expr>)<pos:position pos:line="132" pos:column="69"/></condition><then pos:line="132" pos:column="69"> <block pos:line="132" pos:column="70">{
                    <expr_stmt><expr><call><name pos:line="133" pos:column="21">ap_log_rerror<pos:position pos:line="133" pos:column="34"/></name><argument_list pos:line="133" pos:column="34">(<argument><expr><name pos:line="133" pos:column="35">APLOG_MARK<pos:position pos:line="133" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="47">APLOG_ERR<pos:position pos:line="133" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="133" pos:column="58">0<pos:position pos:line="133" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="133" pos:column="61">r<pos:position pos:line="133" pos:column="62"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="134" pos:column="35">"Zlib: Length of inflated stream invalid"<pos:position pos:line="134" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="134" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="78"/></expr_stmt>
                    <return pos:line="135" pos:column="21">return <expr><name pos:line="135" pos:column="28">APR_EGENERAL<pos:position pos:line="135" pos:column="40"/></name></expr>;<pos:position pos:line="135" pos:column="41"/></return>
                }<pos:position pos:line="136" pos:column="18"/></block></then></if>
            }<pos:position pos:line="137" pos:column="14"/></block></then>
            <else pos:line="138" pos:column="13">else <block pos:line="138" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="139" pos:column="17">ap_log_rerror<pos:position pos:line="139" pos:column="30"/></name><argument_list pos:line="139" pos:column="30">(<argument><expr><name pos:line="139" pos:column="31">APLOG_MARK<pos:position pos:line="139" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="43">APLOG_ERR<pos:position pos:line="139" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="139" pos:column="54">0<pos:position pos:line="139" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="139" pos:column="57">r<pos:position pos:line="139" pos:column="58"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="140" pos:column="31">"Zlib: Validation bytes not present"<pos:position pos:line="140" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="69"/></expr_stmt>
                <return pos:line="141" pos:column="17">return <expr><name pos:line="141" pos:column="24">APR_EGENERAL<pos:position pos:line="141" pos:column="36"/></name></expr>;<pos:position pos:line="141" pos:column="37"/></return>
            }<pos:position pos:line="142" pos:column="14"/></block></else></if>

            <expr_stmt><expr><call><name pos:line="144" pos:column="13">inflateEnd<pos:position pos:line="144" pos:column="23"/></name><argument_list pos:line="144" pos:column="23">(<argument><expr><operator pos:line="144" pos:column="24">&amp;<pos:position pos:line="144" pos:column="29"/></operator><name><name pos:line="144" pos:column="25">ctx<pos:position pos:line="144" pos:column="28"/></name><operator pos:line="144" pos:column="28">-&gt;<pos:position pos:line="144" pos:column="33"/></operator><name pos:line="144" pos:column="30">stream<pos:position pos:line="144" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="144" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="38"/></expr_stmt>
            <comment type="block" pos:line="145" pos:column="13">/* No need for cleanup any longer */</comment>
            <expr_stmt><expr><call><name pos:line="146" pos:column="13">apr_pool_cleanup_kill<pos:position pos:line="146" pos:column="34"/></name><argument_list pos:line="146" pos:column="34">(<argument><expr><name><name pos:line="146" pos:column="35">r<pos:position pos:line="146" pos:column="36"/></name><operator pos:line="146" pos:column="36">-&gt;<pos:position pos:line="146" pos:column="41"/></operator><name pos:line="146" pos:column="38">pool<pos:position pos:line="146" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="44">ctx<pos:position pos:line="146" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="49">deflate_ctx_cleanup<pos:position pos:line="146" pos:column="68"/></name></expr></argument>)<pos:position pos:line="146" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="70"/></expr_stmt>

            <comment type="block" pos:line="148" pos:column="13">/* Remove EOS from the old list, and insert into the new. */</comment>
            <expr_stmt><expr><call><name pos:line="149" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="149" pos:column="30"/></name><argument_list pos:line="149" pos:column="30">(<argument><expr><name pos:line="149" pos:column="31">e<pos:position pos:line="149" pos:column="32"/></name></expr></argument>)<pos:position pos:line="149" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="150" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="150" pos:column="36"/></name><argument_list pos:line="150" pos:column="36">(<argument><expr><name><name pos:line="150" pos:column="37">ctx<pos:position pos:line="150" pos:column="40"/></name><operator pos:line="150" pos:column="40">-&gt;<pos:position pos:line="150" pos:column="45"/></operator><name pos:line="150" pos:column="42">bb<pos:position pos:line="150" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="150" pos:column="46">e<pos:position pos:line="150" pos:column="47"/></name></expr></argument>)<pos:position pos:line="150" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="49"/></expr_stmt>

            <comment type="block" pos:line="152" pos:column="13">/*
             * Okay, we've seen the EOS.
             * Time to pass it along down the chain.
             */</comment>
            <return pos:line="156" pos:column="13">return <expr><call><name pos:line="156" pos:column="20">ap_pass_brigade<pos:position pos:line="156" pos:column="35"/></name><argument_list pos:line="156" pos:column="35">(<argument><expr><name><name pos:line="156" pos:column="36">f<pos:position pos:line="156" pos:column="37"/></name><operator pos:line="156" pos:column="37">-&gt;<pos:position pos:line="156" pos:column="42"/></operator><name pos:line="156" pos:column="39">next<pos:position pos:line="156" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="156" pos:column="45">ctx<pos:position pos:line="156" pos:column="48"/></name><operator pos:line="156" pos:column="48">-&gt;<pos:position pos:line="156" pos:column="53"/></operator><name pos:line="156" pos:column="50">bb<pos:position pos:line="156" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="156" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="54"/></return>
        }<pos:position pos:line="157" pos:column="10"/></block></then></if>

        <if pos:line="159" pos:column="9">if <condition pos:line="159" pos:column="12">(<expr><call><name pos:line="159" pos:column="13">APR_BUCKET_IS_FLUSH<pos:position pos:line="159" pos:column="32"/></name><argument_list pos:line="159" pos:column="32">(<argument><expr><name pos:line="159" pos:column="33">e<pos:position pos:line="159" pos:column="34"/></name></expr></argument>)<pos:position pos:line="159" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="159" pos:column="36"/></condition><then pos:line="159" pos:column="36"> <block pos:line="159" pos:column="37">{
            <decl_stmt><decl><type><name pos:line="160" pos:column="13">apr_status_t<pos:position pos:line="160" pos:column="25"/></name></type> <name pos:line="160" pos:column="26">rv<pos:position pos:line="160" pos:column="28"/></name></decl>;<pos:position pos:line="160" pos:column="29"/></decl_stmt>

            <comment type="block" pos:line="162" pos:column="13">/* flush the remaining data from the zlib buffers */</comment>
            <expr_stmt><expr><name pos:line="163" pos:column="13">zRC<pos:position pos:line="163" pos:column="16"/></name> <operator pos:line="163" pos:column="17">=<pos:position pos:line="163" pos:column="18"/></operator> <call><name pos:line="163" pos:column="19">flush_libz_buffer<pos:position pos:line="163" pos:column="36"/></name><argument_list pos:line="163" pos:column="36">(<argument><expr><name pos:line="163" pos:column="37">ctx<pos:position pos:line="163" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="42">c<pos:position pos:line="163" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="163" pos:column="45">f<pos:position pos:line="163" pos:column="46"/></name><operator pos:line="163" pos:column="46">-&gt;<pos:position pos:line="163" pos:column="51"/></operator><name pos:line="163" pos:column="48">c<pos:position pos:line="163" pos:column="49"/></name><operator pos:line="163" pos:column="49">-&gt;<pos:position pos:line="163" pos:column="54"/></operator><name pos:line="163" pos:column="51">bucket_alloc<pos:position pos:line="163" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="65">inflate<pos:position pos:line="163" pos:column="72"/></name></expr></argument>,
                                    <argument><expr><name pos:line="164" pos:column="37">Z_SYNC_FLUSH<pos:position pos:line="164" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="51">UPDATE_CRC<pos:position pos:line="164" pos:column="61"/></name></expr></argument>)<pos:position pos:line="164" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="63"/></expr_stmt>
            <if pos:line="165" pos:column="13">if <condition pos:line="165" pos:column="16">(<expr><name pos:line="165" pos:column="17">zRC<pos:position pos:line="165" pos:column="20"/></name> <operator pos:line="165" pos:column="21">==<pos:position pos:line="165" pos:column="23"/></operator> <name pos:line="165" pos:column="24">Z_STREAM_END<pos:position pos:line="165" pos:column="36"/></name></expr>)<pos:position pos:line="165" pos:column="37"/></condition><then pos:line="165" pos:column="37"> <block pos:line="165" pos:column="38">{
                <if pos:line="166" pos:column="17">if <condition pos:line="166" pos:column="20">(<expr><name><name pos:line="166" pos:column="21">ctx<pos:position pos:line="166" pos:column="24"/></name><operator pos:line="166" pos:column="24">-&gt;<pos:position pos:line="166" pos:column="29"/></operator><name pos:line="166" pos:column="26">validation_buffer<pos:position pos:line="166" pos:column="43"/></name></name> <operator pos:line="166" pos:column="44">==<pos:position pos:line="166" pos:column="46"/></operator> <name pos:line="166" pos:column="47">NULL<pos:position pos:line="166" pos:column="51"/></name></expr>)<pos:position pos:line="166" pos:column="52"/></condition><then pos:line="166" pos:column="52"> <block pos:line="166" pos:column="53">{
                    <expr_stmt><expr><name><name pos:line="167" pos:column="21">ctx<pos:position pos:line="167" pos:column="24"/></name><operator pos:line="167" pos:column="24">-&gt;<pos:position pos:line="167" pos:column="29"/></operator><name pos:line="167" pos:column="26">validation_buffer<pos:position pos:line="167" pos:column="43"/></name></name> <operator pos:line="167" pos:column="44">=<pos:position pos:line="167" pos:column="45"/></operator> <call><name pos:line="167" pos:column="46">apr_pcalloc<pos:position pos:line="167" pos:column="57"/></name><argument_list pos:line="167" pos:column="57">(<argument><expr><name><name pos:line="167" pos:column="58">f<pos:position pos:line="167" pos:column="59"/></name><operator pos:line="167" pos:column="59">-&gt;<pos:position pos:line="167" pos:column="64"/></operator><name pos:line="167" pos:column="61">r<pos:position pos:line="167" pos:column="62"/></name><operator pos:line="167" pos:column="62">-&gt;<pos:position pos:line="167" pos:column="67"/></operator><name pos:line="167" pos:column="64">pool<pos:position pos:line="167" pos:column="68"/></name></name></expr></argument>,
                                                         <argument><expr><name pos:line="168" pos:column="58">VALIDATION_SIZE<pos:position pos:line="168" pos:column="73"/></name></expr></argument>)<pos:position pos:line="168" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="75"/></expr_stmt>
                }<pos:position pos:line="169" pos:column="18"/></block></then></if>
            }<pos:position pos:line="170" pos:column="14"/></block></then>
            <elseif pos:line="171" pos:column="13">else <if pos:line="171" pos:column="18">if <condition pos:line="171" pos:column="21">(<expr><name pos:line="171" pos:column="22">zRC<pos:position pos:line="171" pos:column="25"/></name> <operator pos:line="171" pos:column="26">!=<pos:position pos:line="171" pos:column="28"/></operator> <name pos:line="171" pos:column="29">Z_OK<pos:position pos:line="171" pos:column="33"/></name></expr>)<pos:position pos:line="171" pos:column="34"/></condition><then pos:line="171" pos:column="34"> <block pos:line="171" pos:column="35">{
                <return pos:line="172" pos:column="17">return <expr><name pos:line="172" pos:column="24">APR_EGENERAL<pos:position pos:line="172" pos:column="36"/></name></expr>;<pos:position pos:line="172" pos:column="37"/></return>
            }<pos:position pos:line="173" pos:column="14"/></block></then></if></elseif></if>

            <comment type="block" pos:line="175" pos:column="13">/* Remove flush bucket from old brigade anf insert into the new. */</comment>
            <expr_stmt><expr><call><name pos:line="176" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="176" pos:column="30"/></name><argument_list pos:line="176" pos:column="30">(<argument><expr><name pos:line="176" pos:column="31">e<pos:position pos:line="176" pos:column="32"/></name></expr></argument>)<pos:position pos:line="176" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="177" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="177" pos:column="36"/></name><argument_list pos:line="177" pos:column="36">(<argument><expr><name><name pos:line="177" pos:column="37">ctx<pos:position pos:line="177" pos:column="40"/></name><operator pos:line="177" pos:column="40">-&gt;<pos:position pos:line="177" pos:column="45"/></operator><name pos:line="177" pos:column="42">bb<pos:position pos:line="177" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="46">e<pos:position pos:line="177" pos:column="47"/></name></expr></argument>)<pos:position pos:line="177" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="178" pos:column="13">rv<pos:position pos:line="178" pos:column="15"/></name> <operator pos:line="178" pos:column="16">=<pos:position pos:line="178" pos:column="17"/></operator> <call><name pos:line="178" pos:column="18">ap_pass_brigade<pos:position pos:line="178" pos:column="33"/></name><argument_list pos:line="178" pos:column="33">(<argument><expr><name><name pos:line="178" pos:column="34">f<pos:position pos:line="178" pos:column="35"/></name><operator pos:line="178" pos:column="35">-&gt;<pos:position pos:line="178" pos:column="40"/></operator><name pos:line="178" pos:column="37">next<pos:position pos:line="178" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="178" pos:column="43">ctx<pos:position pos:line="178" pos:column="46"/></name><operator pos:line="178" pos:column="46">-&gt;<pos:position pos:line="178" pos:column="51"/></operator><name pos:line="178" pos:column="48">bb<pos:position pos:line="178" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="178" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="52"/></expr_stmt>
            <if pos:line="179" pos:column="13">if <condition pos:line="179" pos:column="16">(<expr><name pos:line="179" pos:column="17">rv<pos:position pos:line="179" pos:column="19"/></name> <operator pos:line="179" pos:column="20">!=<pos:position pos:line="179" pos:column="22"/></operator> <name pos:line="179" pos:column="23">APR_SUCCESS<pos:position pos:line="179" pos:column="34"/></name></expr>)<pos:position pos:line="179" pos:column="35"/></condition><then pos:line="179" pos:column="35"> <block pos:line="179" pos:column="36">{
                <return pos:line="180" pos:column="17">return <expr><name pos:line="180" pos:column="24">rv<pos:position pos:line="180" pos:column="26"/></name></expr>;<pos:position pos:line="180" pos:column="27"/></return>
            }<pos:position pos:line="181" pos:column="14"/></block></then></if>
            <continue pos:line="182" pos:column="13">continue;<pos:position pos:line="182" pos:column="22"/></continue>
        }<pos:position pos:line="183" pos:column="10"/></block></then></if>

        <if pos:line="185" pos:column="9">if <condition pos:line="185" pos:column="12">(<expr><call><name pos:line="185" pos:column="13">APR_BUCKET_IS_METADATA<pos:position pos:line="185" pos:column="35"/></name><argument_list pos:line="185" pos:column="35">(<argument><expr><name pos:line="185" pos:column="36">e<pos:position pos:line="185" pos:column="37"/></name></expr></argument>)<pos:position pos:line="185" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="185" pos:column="39"/></condition><then pos:line="185" pos:column="39"> <block pos:line="185" pos:column="40">{
            <comment type="block" pos:line="186" pos:column="13">/*
             * Remove meta data bucket from old brigade and insert into the
             * new.
             */</comment>
            <expr_stmt><expr><call><name pos:line="190" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="190" pos:column="30"/></name><argument_list pos:line="190" pos:column="30">(<argument><expr><name pos:line="190" pos:column="31">e<pos:position pos:line="190" pos:column="32"/></name></expr></argument>)<pos:position pos:line="190" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="191" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="191" pos:column="36"/></name><argument_list pos:line="191" pos:column="36">(<argument><expr><name><name pos:line="191" pos:column="37">ctx<pos:position pos:line="191" pos:column="40"/></name><operator pos:line="191" pos:column="40">-&gt;<pos:position pos:line="191" pos:column="45"/></operator><name pos:line="191" pos:column="42">bb<pos:position pos:line="191" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="46">e<pos:position pos:line="191" pos:column="47"/></name></expr></argument>)<pos:position pos:line="191" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="49"/></expr_stmt>
            <continue pos:line="192" pos:column="13">continue;<pos:position pos:line="192" pos:column="22"/></continue>
        }<pos:position pos:line="193" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="195" pos:column="9">/* read */</comment>
        <expr_stmt><expr><call><name pos:line="196" pos:column="9">apr_bucket_read<pos:position pos:line="196" pos:column="24"/></name><argument_list pos:line="196" pos:column="24">(<argument><expr><name pos:line="196" pos:column="25">e<pos:position pos:line="196" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="196" pos:column="28">&amp;<pos:position pos:line="196" pos:column="33"/></operator><name pos:line="196" pos:column="29">data<pos:position pos:line="196" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="196" pos:column="35">&amp;<pos:position pos:line="196" pos:column="40"/></operator><name pos:line="196" pos:column="36">len<pos:position pos:line="196" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="196" pos:column="41">APR_BLOCK_READ<pos:position pos:line="196" pos:column="55"/></name></expr></argument>)<pos:position pos:line="196" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="57"/></expr_stmt>
        <if pos:line="197" pos:column="9">if <condition pos:line="197" pos:column="12">(<expr><operator pos:line="197" pos:column="13">!<pos:position pos:line="197" pos:column="14"/></operator><name pos:line="197" pos:column="14">len<pos:position pos:line="197" pos:column="17"/></name></expr>)<pos:position pos:line="197" pos:column="18"/></condition><then pos:line="197" pos:column="18"> <block pos:line="197" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="198" pos:column="13">apr_bucket_delete<pos:position pos:line="198" pos:column="30"/></name><argument_list pos:line="198" pos:column="30">(<argument><expr><name pos:line="198" pos:column="31">e<pos:position pos:line="198" pos:column="32"/></name></expr></argument>)<pos:position pos:line="198" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="34"/></expr_stmt>
            <continue pos:line="199" pos:column="13">continue;<pos:position pos:line="199" pos:column="22"/></continue>
        }<pos:position pos:line="200" pos:column="10"/></block></then></if>
        <if pos:line="201" pos:column="9">if <condition pos:line="201" pos:column="12">(<expr><name pos:line="201" pos:column="13">len<pos:position pos:line="201" pos:column="16"/></name> <operator pos:line="201" pos:column="17">&gt;<pos:position pos:line="201" pos:column="21"/></operator> <name pos:line="201" pos:column="19">APR_INT32_MAX<pos:position pos:line="201" pos:column="32"/></name></expr>)<pos:position pos:line="201" pos:column="33"/></condition><then pos:line="201" pos:column="33"> <block pos:line="201" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="202" pos:column="13">apr_bucket_split<pos:position pos:line="202" pos:column="29"/></name><argument_list pos:line="202" pos:column="29">(<argument><expr><name pos:line="202" pos:column="30">e<pos:position pos:line="202" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="33">APR_INT32_MAX<pos:position pos:line="202" pos:column="46"/></name></expr></argument>)<pos:position pos:line="202" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="203" pos:column="13">apr_bucket_read<pos:position pos:line="203" pos:column="28"/></name><argument_list pos:line="203" pos:column="28">(<argument><expr><name pos:line="203" pos:column="29">e<pos:position pos:line="203" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="203" pos:column="32">&amp;<pos:position pos:line="203" pos:column="37"/></operator><name pos:line="203" pos:column="33">data<pos:position pos:line="203" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="203" pos:column="39">&amp;<pos:position pos:line="203" pos:column="44"/></operator><name pos:line="203" pos:column="40">len<pos:position pos:line="203" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="203" pos:column="45">APR_BLOCK_READ<pos:position pos:line="203" pos:column="59"/></name></expr></argument>)<pos:position pos:line="203" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="61"/></expr_stmt>
        }<pos:position pos:line="204" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="206" pos:column="9">/* first bucket contains zlib header */</comment>
        <if pos:line="207" pos:column="9">if <condition pos:line="207" pos:column="12">(<expr><name><name pos:line="207" pos:column="13">ctx<pos:position pos:line="207" pos:column="16"/></name><operator pos:line="207" pos:column="16">-&gt;<pos:position pos:line="207" pos:column="21"/></operator><name pos:line="207" pos:column="18">header_len<pos:position pos:line="207" pos:column="28"/></name></name> <operator pos:line="207" pos:column="29">&lt;<pos:position pos:line="207" pos:column="33"/></operator> <sizeof pos:line="207" pos:column="31">sizeof<argument_list pos:line="207" pos:column="37">(<argument><expr><name><name pos:line="207" pos:column="38">ctx<pos:position pos:line="207" pos:column="41"/></name><operator pos:line="207" pos:column="41">-&gt;<pos:position pos:line="207" pos:column="46"/></operator><name pos:line="207" pos:column="43">header<pos:position pos:line="207" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="207" pos:column="50"/></argument_list></sizeof></expr>)<pos:position pos:line="207" pos:column="51"/></condition><then pos:line="207" pos:column="51"> <block pos:line="207" pos:column="52">{
            <decl_stmt><decl><type><name pos:line="208" pos:column="13">apr_size_t<pos:position pos:line="208" pos:column="23"/></name></type> <name pos:line="208" pos:column="24">rem<pos:position pos:line="208" pos:column="27"/></name></decl>;<pos:position pos:line="208" pos:column="28"/></decl_stmt>

            <expr_stmt><expr><name pos:line="210" pos:column="13">rem<pos:position pos:line="210" pos:column="16"/></name> <operator pos:line="210" pos:column="17">=<pos:position pos:line="210" pos:column="18"/></operator> <sizeof pos:line="210" pos:column="19">sizeof<argument_list pos:line="210" pos:column="25">(<argument><expr><name><name pos:line="210" pos:column="26">ctx<pos:position pos:line="210" pos:column="29"/></name><operator pos:line="210" pos:column="29">-&gt;<pos:position pos:line="210" pos:column="34"/></operator><name pos:line="210" pos:column="31">header<pos:position pos:line="210" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="210" pos:column="38"/></argument_list></sizeof> <operator pos:line="210" pos:column="39">-<pos:position pos:line="210" pos:column="40"/></operator> <name><name pos:line="210" pos:column="41">ctx<pos:position pos:line="210" pos:column="44"/></name><operator pos:line="210" pos:column="44">-&gt;<pos:position pos:line="210" pos:column="49"/></operator><name pos:line="210" pos:column="46">header_len<pos:position pos:line="210" pos:column="56"/></name></name></expr>;<pos:position pos:line="210" pos:column="57"/></expr_stmt>
            <if pos:line="211" pos:column="13">if <condition pos:line="211" pos:column="16">(<expr><name pos:line="211" pos:column="17">len<pos:position pos:line="211" pos:column="20"/></name> <operator pos:line="211" pos:column="21">&lt;<pos:position pos:line="211" pos:column="25"/></operator> <name pos:line="211" pos:column="23">rem<pos:position pos:line="211" pos:column="26"/></name></expr>)<pos:position pos:line="211" pos:column="27"/></condition><then pos:line="211" pos:column="27"> <block pos:line="211" pos:column="28">{
                <expr_stmt><expr><call><name pos:line="212" pos:column="17">memcpy<pos:position pos:line="212" pos:column="23"/></name><argument_list pos:line="212" pos:column="23">(<argument><expr><name><name pos:line="212" pos:column="24">ctx<pos:position pos:line="212" pos:column="27"/></name><operator pos:line="212" pos:column="27">-&gt;<pos:position pos:line="212" pos:column="32"/></operator><name pos:line="212" pos:column="29">header<pos:position pos:line="212" pos:column="35"/></name></name> <operator pos:line="212" pos:column="36">+<pos:position pos:line="212" pos:column="37"/></operator> <name><name pos:line="212" pos:column="38">ctx<pos:position pos:line="212" pos:column="41"/></name><operator pos:line="212" pos:column="41">-&gt;<pos:position pos:line="212" pos:column="46"/></operator><name pos:line="212" pos:column="43">header_len<pos:position pos:line="212" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="55">data<pos:position pos:line="212" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="61">len<pos:position pos:line="212" pos:column="64"/></name></expr></argument>)<pos:position pos:line="212" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="66"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="213" pos:column="17">ctx<pos:position pos:line="213" pos:column="20"/></name><operator pos:line="213" pos:column="20">-&gt;<pos:position pos:line="213" pos:column="25"/></operator><name pos:line="213" pos:column="22">header_len<pos:position pos:line="213" pos:column="32"/></name></name> <operator pos:line="213" pos:column="33">+=<pos:position pos:line="213" pos:column="35"/></operator> <name pos:line="213" pos:column="36">len<pos:position pos:line="213" pos:column="39"/></name></expr>;<pos:position pos:line="213" pos:column="40"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="214" pos:column="17">apr_bucket_delete<pos:position pos:line="214" pos:column="34"/></name><argument_list pos:line="214" pos:column="34">(<argument><expr><name pos:line="214" pos:column="35">e<pos:position pos:line="214" pos:column="36"/></name></expr></argument>)<pos:position pos:line="214" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="38"/></expr_stmt>
                <continue pos:line="215" pos:column="17">continue;<pos:position pos:line="215" pos:column="26"/></continue>
            }<pos:position pos:line="216" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="217" pos:column="13">memcpy<pos:position pos:line="217" pos:column="19"/></name><argument_list pos:line="217" pos:column="19">(<argument><expr><name><name pos:line="217" pos:column="20">ctx<pos:position pos:line="217" pos:column="23"/></name><operator pos:line="217" pos:column="23">-&gt;<pos:position pos:line="217" pos:column="28"/></operator><name pos:line="217" pos:column="25">header<pos:position pos:line="217" pos:column="31"/></name></name> <operator pos:line="217" pos:column="32">+<pos:position pos:line="217" pos:column="33"/></operator> <name><name pos:line="217" pos:column="34">ctx<pos:position pos:line="217" pos:column="37"/></name><operator pos:line="217" pos:column="37">-&gt;<pos:position pos:line="217" pos:column="42"/></operator><name pos:line="217" pos:column="39">header_len<pos:position pos:line="217" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="217" pos:column="51">data<pos:position pos:line="217" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="217" pos:column="57">rem<pos:position pos:line="217" pos:column="60"/></name></expr></argument>)<pos:position pos:line="217" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="218" pos:column="13">ctx<pos:position pos:line="218" pos:column="16"/></name><operator pos:line="218" pos:column="16">-&gt;<pos:position pos:line="218" pos:column="21"/></operator><name pos:line="218" pos:column="18">header_len<pos:position pos:line="218" pos:column="28"/></name></name> <operator pos:line="218" pos:column="29">+=<pos:position pos:line="218" pos:column="31"/></operator> <name pos:line="218" pos:column="32">rem<pos:position pos:line="218" pos:column="35"/></name></expr>;<pos:position pos:line="218" pos:column="36"/></expr_stmt>
            <block pos:line="219" pos:column="13">{
                <decl_stmt><decl><type><name pos:line="220" pos:column="17">int<pos:position pos:line="220" pos:column="20"/></name></type> <name pos:line="220" pos:column="21">zlib_method<pos:position pos:line="220" pos:column="32"/></name></decl>;<pos:position pos:line="220" pos:column="33"/></decl_stmt>
                <expr_stmt><expr><name pos:line="221" pos:column="17">zlib_method<pos:position pos:line="221" pos:column="28"/></name> <operator pos:line="221" pos:column="29">=<pos:position pos:line="221" pos:column="30"/></operator> <name><name pos:line="221" pos:column="31">ctx<pos:position pos:line="221" pos:column="34"/></name><operator pos:line="221" pos:column="34">-&gt;<pos:position pos:line="221" pos:column="39"/></operator><name pos:line="221" pos:column="36">header<pos:position pos:line="221" pos:column="42"/></name><index pos:line="221" pos:column="42">[<expr><literal type="number" pos:line="221" pos:column="43">2<pos:position pos:line="221" pos:column="44"/></literal></expr>]<pos:position pos:line="221" pos:column="45"/></index></name></expr>;<pos:position pos:line="221" pos:column="46"/></expr_stmt>
                <if pos:line="222" pos:column="17">if <condition pos:line="222" pos:column="20">(<expr><name pos:line="222" pos:column="21">zlib_method<pos:position pos:line="222" pos:column="32"/></name> <operator pos:line="222" pos:column="33">!=<pos:position pos:line="222" pos:column="35"/></operator> <name pos:line="222" pos:column="36">Z_DEFLATED<pos:position pos:line="222" pos:column="46"/></name></expr>)<pos:position pos:line="222" pos:column="47"/></condition><then pos:line="222" pos:column="47"> <block pos:line="222" pos:column="48">{
                    <expr_stmt><expr><call><name pos:line="223" pos:column="21">ap_log_rerror<pos:position pos:line="223" pos:column="34"/></name><argument_list pos:line="223" pos:column="34">(<argument><expr><name pos:line="223" pos:column="35">APLOG_MARK<pos:position pos:line="223" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="223" pos:column="47">APLOG_DEBUG<pos:position pos:line="223" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="223" pos:column="60">0<pos:position pos:line="223" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="223" pos:column="63">r<pos:position pos:line="223" pos:column="64"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="224" pos:column="35">"inflate: data not deflated!"<pos:position pos:line="224" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="224" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="66"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="225" pos:column="21">ap_remove_output_filter<pos:position pos:line="225" pos:column="44"/></name><argument_list pos:line="225" pos:column="44">(<argument><expr><name pos:line="225" pos:column="45">f<pos:position pos:line="225" pos:column="46"/></name></expr></argument>)<pos:position pos:line="225" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="225" pos:column="48"/></expr_stmt>
                    <return pos:line="226" pos:column="21">return <expr><call><name pos:line="226" pos:column="28">ap_pass_brigade<pos:position pos:line="226" pos:column="43"/></name><argument_list pos:line="226" pos:column="43">(<argument><expr><name><name pos:line="226" pos:column="44">f<pos:position pos:line="226" pos:column="45"/></name><operator pos:line="226" pos:column="45">-&gt;<pos:position pos:line="226" pos:column="50"/></operator><name pos:line="226" pos:column="47">next<pos:position pos:line="226" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="226" pos:column="53">bb<pos:position pos:line="226" pos:column="55"/></name></expr></argument>)<pos:position pos:line="226" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="57"/></return>
                }<pos:position pos:line="227" pos:column="18"/></block></then></if>
                <if pos:line="228" pos:column="17">if <condition pos:line="228" pos:column="20">(<expr><name><name pos:line="228" pos:column="21">ctx<pos:position pos:line="228" pos:column="24"/></name><operator pos:line="228" pos:column="24">-&gt;<pos:position pos:line="228" pos:column="29"/></operator><name pos:line="228" pos:column="26">header<pos:position pos:line="228" pos:column="32"/></name><index pos:line="228" pos:column="32">[<expr><literal type="number" pos:line="228" pos:column="33">0<pos:position pos:line="228" pos:column="34"/></literal></expr>]<pos:position pos:line="228" pos:column="35"/></index></name> <operator pos:line="228" pos:column="36">!=<pos:position pos:line="228" pos:column="38"/></operator> <name><name pos:line="228" pos:column="39">deflate_magic<pos:position pos:line="228" pos:column="52"/></name><index pos:line="228" pos:column="52">[<expr><literal type="number" pos:line="228" pos:column="53">0<pos:position pos:line="228" pos:column="54"/></literal></expr>]<pos:position pos:line="228" pos:column="55"/></index></name> <operator pos:line="228" pos:column="56">||<pos:position pos:line="228" pos:column="58"/></operator>
                    <name><name pos:line="229" pos:column="21">ctx<pos:position pos:line="229" pos:column="24"/></name><operator pos:line="229" pos:column="24">-&gt;<pos:position pos:line="229" pos:column="29"/></operator><name pos:line="229" pos:column="26">header<pos:position pos:line="229" pos:column="32"/></name><index pos:line="229" pos:column="32">[<expr><literal type="number" pos:line="229" pos:column="33">1<pos:position pos:line="229" pos:column="34"/></literal></expr>]<pos:position pos:line="229" pos:column="35"/></index></name> <operator pos:line="229" pos:column="36">!=<pos:position pos:line="229" pos:column="38"/></operator> <name><name pos:line="229" pos:column="39">deflate_magic<pos:position pos:line="229" pos:column="52"/></name><index pos:line="229" pos:column="52">[<expr><literal type="number" pos:line="229" pos:column="53">1<pos:position pos:line="229" pos:column="54"/></literal></expr>]<pos:position pos:line="229" pos:column="55"/></index></name></expr>)<pos:position pos:line="229" pos:column="56"/></condition><then pos:line="229" pos:column="56"> <block pos:line="229" pos:column="57">{
                        <expr_stmt><expr><call><name pos:line="230" pos:column="25">ap_log_rerror<pos:position pos:line="230" pos:column="38"/></name><argument_list pos:line="230" pos:column="38">(<argument><expr><name pos:line="230" pos:column="39">APLOG_MARK<pos:position pos:line="230" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="230" pos:column="51">APLOG_ERR<pos:position pos:line="230" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="230" pos:column="62">0<pos:position pos:line="230" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="230" pos:column="65">r<pos:position pos:line="230" pos:column="66"/></name></expr></argument>,
                                      <argument><expr><literal type="string" pos:line="231" pos:column="39">"inflate: bad header"<pos:position pos:line="231" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="231" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="231" pos:column="62"/></expr_stmt>
                    <return pos:line="232" pos:column="21">return <expr><name pos:line="232" pos:column="28">APR_EGENERAL<pos:position pos:line="232" pos:column="40"/></name></expr> ;<pos:position pos:line="232" pos:column="42"/></return>
                }<pos:position pos:line="233" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name><name pos:line="234" pos:column="17">ctx<pos:position pos:line="234" pos:column="20"/></name><operator pos:line="234" pos:column="20">-&gt;<pos:position pos:line="234" pos:column="25"/></operator><name pos:line="234" pos:column="22">zlib_flags<pos:position pos:line="234" pos:column="32"/></name></name> <operator pos:line="234" pos:column="33">=<pos:position pos:line="234" pos:column="34"/></operator> <name><name pos:line="234" pos:column="35">ctx<pos:position pos:line="234" pos:column="38"/></name><operator pos:line="234" pos:column="38">-&gt;<pos:position pos:line="234" pos:column="43"/></operator><name pos:line="234" pos:column="40">header<pos:position pos:line="234" pos:column="46"/></name><index pos:line="234" pos:column="46">[<expr><literal type="number" pos:line="234" pos:column="47">3<pos:position pos:line="234" pos:column="48"/></literal></expr>]<pos:position pos:line="234" pos:column="49"/></index></name></expr>;<pos:position pos:line="234" pos:column="50"/></expr_stmt>
                <if pos:line="235" pos:column="17">if <condition pos:line="235" pos:column="20">(<expr><operator pos:line="235" pos:column="21">(<pos:position pos:line="235" pos:column="22"/></operator><name><name pos:line="235" pos:column="22">ctx<pos:position pos:line="235" pos:column="25"/></name><operator pos:line="235" pos:column="25">-&gt;<pos:position pos:line="235" pos:column="30"/></operator><name pos:line="235" pos:column="27">zlib_flags<pos:position pos:line="235" pos:column="37"/></name></name> <operator pos:line="235" pos:column="38">&amp;<pos:position pos:line="235" pos:column="43"/></operator> <name pos:line="235" pos:column="40">RESERVED<pos:position pos:line="235" pos:column="48"/></name><operator pos:line="235" pos:column="48">)<pos:position pos:line="235" pos:column="49"/></operator></expr>)<pos:position pos:line="235" pos:column="50"/></condition><then pos:line="235" pos:column="50"> <block pos:line="235" pos:column="51">{
                    <expr_stmt><expr><call><name pos:line="236" pos:column="21">ap_log_rerror<pos:position pos:line="236" pos:column="34"/></name><argument_list pos:line="236" pos:column="34">(<argument><expr><name pos:line="236" pos:column="35">APLOG_MARK<pos:position pos:line="236" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="236" pos:column="47">APLOG_ERR<pos:position pos:line="236" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="236" pos:column="58">0<pos:position pos:line="236" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="236" pos:column="61">r<pos:position pos:line="236" pos:column="62"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="237" pos:column="35">"inflate: bad flags %02x"<pos:position pos:line="237" pos:column="60"/></literal></expr></argument>,
                                  <argument><expr><name><name pos:line="238" pos:column="35">ctx<pos:position pos:line="238" pos:column="38"/></name><operator pos:line="238" pos:column="38">-&gt;<pos:position pos:line="238" pos:column="43"/></operator><name pos:line="238" pos:column="40">zlib_flags<pos:position pos:line="238" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="238" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="238" pos:column="52"/></expr_stmt>
                    <return pos:line="239" pos:column="21">return <expr><name pos:line="239" pos:column="28">APR_EGENERAL<pos:position pos:line="239" pos:column="40"/></name></expr>;<pos:position pos:line="239" pos:column="41"/></return>
                }<pos:position pos:line="240" pos:column="18"/></block></then></if>
            }<pos:position pos:line="241" pos:column="14"/></block>
            <if pos:line="242" pos:column="13">if <condition pos:line="242" pos:column="16">(<expr><name pos:line="242" pos:column="17">len<pos:position pos:line="242" pos:column="20"/></name> <operator pos:line="242" pos:column="21">==<pos:position pos:line="242" pos:column="23"/></operator> <name pos:line="242" pos:column="24">rem<pos:position pos:line="242" pos:column="27"/></name></expr>)<pos:position pos:line="242" pos:column="28"/></condition><then pos:line="242" pos:column="28"> <block pos:line="242" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="243" pos:column="17">apr_bucket_delete<pos:position pos:line="243" pos:column="34"/></name><argument_list pos:line="243" pos:column="34">(<argument><expr><name pos:line="243" pos:column="35">e<pos:position pos:line="243" pos:column="36"/></name></expr></argument>)<pos:position pos:line="243" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="38"/></expr_stmt>
                <continue pos:line="244" pos:column="17">continue;<pos:position pos:line="244" pos:column="26"/></continue>
            }<pos:position pos:line="245" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="246" pos:column="13">data<pos:position pos:line="246" pos:column="17"/></name> <operator pos:line="246" pos:column="18">+=<pos:position pos:line="246" pos:column="20"/></operator> <name pos:line="246" pos:column="21">rem<pos:position pos:line="246" pos:column="24"/></name></expr>;<pos:position pos:line="246" pos:column="25"/></expr_stmt>
            <expr_stmt><expr><name pos:line="247" pos:column="13">len<pos:position pos:line="247" pos:column="16"/></name> <operator pos:line="247" pos:column="17">-=<pos:position pos:line="247" pos:column="19"/></operator> <name pos:line="247" pos:column="20">rem<pos:position pos:line="247" pos:column="23"/></name></expr>;<pos:position pos:line="247" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="248" pos:column="10"/></block></then></if>

        <if pos:line="250" pos:column="9">if <condition pos:line="250" pos:column="12">(<expr><name><name pos:line="250" pos:column="13">ctx<pos:position pos:line="250" pos:column="16"/></name><operator pos:line="250" pos:column="16">-&gt;<pos:position pos:line="250" pos:column="21"/></operator><name pos:line="250" pos:column="18">zlib_flags<pos:position pos:line="250" pos:column="28"/></name></name></expr>)<pos:position pos:line="250" pos:column="29"/></condition><then pos:line="250" pos:column="29"> <block pos:line="250" pos:column="30">{
            <expr_stmt><expr><name pos:line="251" pos:column="13">rv<pos:position pos:line="251" pos:column="15"/></name> <operator pos:line="251" pos:column="16">=<pos:position pos:line="251" pos:column="17"/></operator> <call><name pos:line="251" pos:column="18">consume_zlib_flags<pos:position pos:line="251" pos:column="36"/></name><argument_list pos:line="251" pos:column="36">(<argument><expr><name pos:line="251" pos:column="37">ctx<pos:position pos:line="251" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="251" pos:column="42">&amp;<pos:position pos:line="251" pos:column="47"/></operator><name pos:line="251" pos:column="43">data<pos:position pos:line="251" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="251" pos:column="49">&amp;<pos:position pos:line="251" pos:column="54"/></operator><name pos:line="251" pos:column="50">len<pos:position pos:line="251" pos:column="53"/></name></expr></argument>)<pos:position pos:line="251" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="55"/></expr_stmt>
            <if pos:line="252" pos:column="13">if <condition pos:line="252" pos:column="16">(<expr><name pos:line="252" pos:column="17">rv<pos:position pos:line="252" pos:column="19"/></name> <operator pos:line="252" pos:column="20">==<pos:position pos:line="252" pos:column="22"/></operator> <name pos:line="252" pos:column="23">APR_SUCCESS<pos:position pos:line="252" pos:column="34"/></name></expr>)<pos:position pos:line="252" pos:column="35"/></condition><then pos:line="252" pos:column="35"> <block pos:line="252" pos:column="36">{
                <expr_stmt><expr><name><name pos:line="253" pos:column="17">ctx<pos:position pos:line="253" pos:column="20"/></name><operator pos:line="253" pos:column="20">-&gt;<pos:position pos:line="253" pos:column="25"/></operator><name pos:line="253" pos:column="22">zlib_flags<pos:position pos:line="253" pos:column="32"/></name></name> <operator pos:line="253" pos:column="33">=<pos:position pos:line="253" pos:column="34"/></operator> <literal type="number" pos:line="253" pos:column="35">0<pos:position pos:line="253" pos:column="36"/></literal></expr>;<pos:position pos:line="253" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="254" pos:column="14"/></block></then></if>
            <if pos:line="255" pos:column="13">if <condition pos:line="255" pos:column="16">(<expr><operator pos:line="255" pos:column="17">!<pos:position pos:line="255" pos:column="18"/></operator><name pos:line="255" pos:column="18">len<pos:position pos:line="255" pos:column="21"/></name></expr>)<pos:position pos:line="255" pos:column="22"/></condition><then pos:line="255" pos:column="22"> <block pos:line="255" pos:column="23">{
                <expr_stmt><expr><call><name pos:line="256" pos:column="17">apr_bucket_delete<pos:position pos:line="256" pos:column="34"/></name><argument_list pos:line="256" pos:column="34">(<argument><expr><name pos:line="256" pos:column="35">e<pos:position pos:line="256" pos:column="36"/></name></expr></argument>)<pos:position pos:line="256" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="38"/></expr_stmt>
                <continue pos:line="257" pos:column="17">continue;<pos:position pos:line="257" pos:column="26"/></continue>
            }<pos:position pos:line="258" pos:column="14"/></block></then></if>
        }<pos:position pos:line="259" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="261" pos:column="9">/* pass through zlib inflate. */</comment>
        <expr_stmt><expr><name><name pos:line="262" pos:column="9">ctx<pos:position pos:line="262" pos:column="12"/></name><operator pos:line="262" pos:column="12">-&gt;<pos:position pos:line="262" pos:column="17"/></operator><name pos:line="262" pos:column="14">stream<pos:position pos:line="262" pos:column="20"/></name><operator pos:line="262" pos:column="20">.<pos:position pos:line="262" pos:column="21"/></operator><name pos:line="262" pos:column="21">next_in<pos:position pos:line="262" pos:column="28"/></name></name> <operator pos:line="262" pos:column="29">=<pos:position pos:line="262" pos:column="30"/></operator> <operator pos:line="262" pos:column="31">(<pos:position pos:line="262" pos:column="32"/></operator><name pos:line="262" pos:column="32">unsigned<pos:position pos:line="262" pos:column="40"/></name> <name pos:line="262" pos:column="41">char<pos:position pos:line="262" pos:column="45"/></name> <operator pos:line="262" pos:column="46">*<pos:position pos:line="262" pos:column="47"/></operator><operator pos:line="262" pos:column="47">)<pos:position pos:line="262" pos:column="48"/></operator><name pos:line="262" pos:column="48">data<pos:position pos:line="262" pos:column="52"/></name></expr>;<pos:position pos:line="262" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="263" pos:column="9">ctx<pos:position pos:line="263" pos:column="12"/></name><operator pos:line="263" pos:column="12">-&gt;<pos:position pos:line="263" pos:column="17"/></operator><name pos:line="263" pos:column="14">stream<pos:position pos:line="263" pos:column="20"/></name><operator pos:line="263" pos:column="20">.<pos:position pos:line="263" pos:column="21"/></operator><name pos:line="263" pos:column="21">avail_in<pos:position pos:line="263" pos:column="29"/></name></name> <operator pos:line="263" pos:column="30">=<pos:position pos:line="263" pos:column="31"/></operator> <name pos:line="263" pos:column="32">len<pos:position pos:line="263" pos:column="35"/></name></expr>;<pos:position pos:line="263" pos:column="36"/></expr_stmt>

        <if pos:line="265" pos:column="9">if <condition pos:line="265" pos:column="12">(<expr><name><name pos:line="265" pos:column="13">ctx<pos:position pos:line="265" pos:column="16"/></name><operator pos:line="265" pos:column="16">-&gt;<pos:position pos:line="265" pos:column="21"/></operator><name pos:line="265" pos:column="18">validation_buffer<pos:position pos:line="265" pos:column="35"/></name></name></expr>)<pos:position pos:line="265" pos:column="36"/></condition><then pos:line="265" pos:column="36"> <block pos:line="265" pos:column="37">{
            <if pos:line="266" pos:column="13">if <condition pos:line="266" pos:column="16">(<expr><name><name pos:line="266" pos:column="17">ctx<pos:position pos:line="266" pos:column="20"/></name><operator pos:line="266" pos:column="20">-&gt;<pos:position pos:line="266" pos:column="25"/></operator><name pos:line="266" pos:column="22">validation_buffer_length<pos:position pos:line="266" pos:column="46"/></name></name> <operator pos:line="266" pos:column="47">&lt;<pos:position pos:line="266" pos:column="51"/></operator> <name pos:line="266" pos:column="49">VALIDATION_SIZE<pos:position pos:line="266" pos:column="64"/></name></expr>)<pos:position pos:line="266" pos:column="65"/></condition><then pos:line="266" pos:column="65"> <block pos:line="266" pos:column="66">{
                <decl_stmt><decl><type><name pos:line="267" pos:column="17">apr_size_t<pos:position pos:line="267" pos:column="27"/></name></type> <name pos:line="267" pos:column="28">copy_size<pos:position pos:line="267" pos:column="37"/></name></decl>;<pos:position pos:line="267" pos:column="38"/></decl_stmt>

                <expr_stmt><expr><name pos:line="269" pos:column="17">copy_size<pos:position pos:line="269" pos:column="26"/></name> <operator pos:line="269" pos:column="27">=<pos:position pos:line="269" pos:column="28"/></operator> <name pos:line="269" pos:column="29">VALIDATION_SIZE<pos:position pos:line="269" pos:column="44"/></name> <operator pos:line="269" pos:column="45">-<pos:position pos:line="269" pos:column="46"/></operator> <name><name pos:line="269" pos:column="47">ctx<pos:position pos:line="269" pos:column="50"/></name><operator pos:line="269" pos:column="50">-&gt;<pos:position pos:line="269" pos:column="55"/></operator><name pos:line="269" pos:column="52">validation_buffer_length<pos:position pos:line="269" pos:column="76"/></name></name></expr>;<pos:position pos:line="269" pos:column="77"/></expr_stmt>
                <if pos:line="270" pos:column="17">if <condition pos:line="270" pos:column="20">(<expr><name pos:line="270" pos:column="21">copy_size<pos:position pos:line="270" pos:column="30"/></name> <operator pos:line="270" pos:column="31">&gt;<pos:position pos:line="270" pos:column="35"/></operator> <name><name pos:line="270" pos:column="33">ctx<pos:position pos:line="270" pos:column="36"/></name><operator pos:line="270" pos:column="36">-&gt;<pos:position pos:line="270" pos:column="41"/></operator><name pos:line="270" pos:column="38">stream<pos:position pos:line="270" pos:column="44"/></name><operator pos:line="270" pos:column="44">.<pos:position pos:line="270" pos:column="45"/></operator><name pos:line="270" pos:column="45">avail_in<pos:position pos:line="270" pos:column="53"/></name></name></expr>)<pos:position pos:line="270" pos:column="54"/></condition><then pos:line="270" pos:column="54">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="271" pos:column="21">copy_size<pos:position pos:line="271" pos:column="30"/></name> <operator pos:line="271" pos:column="31">=<pos:position pos:line="271" pos:column="32"/></operator> <name><name pos:line="271" pos:column="33">ctx<pos:position pos:line="271" pos:column="36"/></name><operator pos:line="271" pos:column="36">-&gt;<pos:position pos:line="271" pos:column="41"/></operator><name pos:line="271" pos:column="38">stream<pos:position pos:line="271" pos:column="44"/></name><operator pos:line="271" pos:column="44">.<pos:position pos:line="271" pos:column="45"/></operator><name pos:line="271" pos:column="45">avail_in<pos:position pos:line="271" pos:column="53"/></name></name></expr>;<pos:position pos:line="271" pos:column="54"/></expr_stmt></block></then></if>
                <expr_stmt><expr><call><name pos:line="272" pos:column="17">memcpy<pos:position pos:line="272" pos:column="23"/></name><argument_list pos:line="272" pos:column="23">(<argument><expr><name><name pos:line="272" pos:column="24">ctx<pos:position pos:line="272" pos:column="27"/></name><operator pos:line="272" pos:column="27">-&gt;<pos:position pos:line="272" pos:column="32"/></operator><name pos:line="272" pos:column="29">validation_buffer<pos:position pos:line="272" pos:column="46"/></name></name> <operator pos:line="272" pos:column="47">+<pos:position pos:line="272" pos:column="48"/></operator> <name><name pos:line="272" pos:column="49">ctx<pos:position pos:line="272" pos:column="52"/></name><operator pos:line="272" pos:column="52">-&gt;<pos:position pos:line="272" pos:column="57"/></operator><name pos:line="272" pos:column="54">validation_buffer_length<pos:position pos:line="272" pos:column="78"/></name></name></expr></argument>,
                       <argument><expr><name><name pos:line="273" pos:column="24">ctx<pos:position pos:line="273" pos:column="27"/></name><operator pos:line="273" pos:column="27">-&gt;<pos:position pos:line="273" pos:column="32"/></operator><name pos:line="273" pos:column="29">stream<pos:position pos:line="273" pos:column="35"/></name><operator pos:line="273" pos:column="35">.<pos:position pos:line="273" pos:column="36"/></operator><name pos:line="273" pos:column="36">next_in<pos:position pos:line="273" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="273" pos:column="45">copy_size<pos:position pos:line="273" pos:column="54"/></name></expr></argument>)<pos:position pos:line="273" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="56"/></expr_stmt>
                <comment type="block" pos:line="274" pos:column="17">/* Saved copy_size bytes */</comment>
                <expr_stmt><expr><name><name pos:line="275" pos:column="17">ctx<pos:position pos:line="275" pos:column="20"/></name><operator pos:line="275" pos:column="20">-&gt;<pos:position pos:line="275" pos:column="25"/></operator><name pos:line="275" pos:column="22">stream<pos:position pos:line="275" pos:column="28"/></name><operator pos:line="275" pos:column="28">.<pos:position pos:line="275" pos:column="29"/></operator><name pos:line="275" pos:column="29">avail_in<pos:position pos:line="275" pos:column="37"/></name></name> <operator pos:line="275" pos:column="38">-=<pos:position pos:line="275" pos:column="40"/></operator> <name pos:line="275" pos:column="41">copy_size<pos:position pos:line="275" pos:column="50"/></name></expr>;<pos:position pos:line="275" pos:column="51"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="276" pos:column="17">ctx<pos:position pos:line="276" pos:column="20"/></name><operator pos:line="276" pos:column="20">-&gt;<pos:position pos:line="276" pos:column="25"/></operator><name pos:line="276" pos:column="22">validation_buffer_length<pos:position pos:line="276" pos:column="46"/></name></name> <operator pos:line="276" pos:column="47">+=<pos:position pos:line="276" pos:column="49"/></operator> <name pos:line="276" pos:column="50">copy_size<pos:position pos:line="276" pos:column="59"/></name></expr>;<pos:position pos:line="276" pos:column="60"/></expr_stmt>
            }<pos:position pos:line="277" pos:column="14"/></block></then></if>
            <if pos:line="278" pos:column="13">if <condition pos:line="278" pos:column="16">(<expr><name><name pos:line="278" pos:column="17">ctx<pos:position pos:line="278" pos:column="20"/></name><operator pos:line="278" pos:column="20">-&gt;<pos:position pos:line="278" pos:column="25"/></operator><name pos:line="278" pos:column="22">stream<pos:position pos:line="278" pos:column="28"/></name><operator pos:line="278" pos:column="28">.<pos:position pos:line="278" pos:column="29"/></operator><name pos:line="278" pos:column="29">avail_in<pos:position pos:line="278" pos:column="37"/></name></name></expr>)<pos:position pos:line="278" pos:column="38"/></condition><then pos:line="278" pos:column="38"> <block pos:line="278" pos:column="39">{
                <expr_stmt><expr><call><name pos:line="279" pos:column="17">ap_log_rerror<pos:position pos:line="279" pos:column="30"/></name><argument_list pos:line="279" pos:column="30">(<argument><expr><name pos:line="279" pos:column="31">APLOG_MARK<pos:position pos:line="279" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="279" pos:column="43">APLOG_DEBUG<pos:position pos:line="279" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="279" pos:column="56">0<pos:position pos:line="279" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="279" pos:column="59">r<pos:position pos:line="279" pos:column="60"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="280" pos:column="31">"Zlib: %d bytes of garbage at the end of "<pos:position pos:line="280" pos:column="73"/></literal>
                              <literal type="string" pos:line="281" pos:column="31">"compressed stream."<pos:position pos:line="281" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="281" pos:column="53">ctx<pos:position pos:line="281" pos:column="56"/></name><operator pos:line="281" pos:column="56">-&gt;<pos:position pos:line="281" pos:column="61"/></operator><name pos:line="281" pos:column="58">stream<pos:position pos:line="281" pos:column="64"/></name><operator pos:line="281" pos:column="64">.<pos:position pos:line="281" pos:column="65"/></operator><name pos:line="281" pos:column="65">avail_in<pos:position pos:line="281" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="281" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="281" pos:column="75"/></expr_stmt>
                <comment type="block" pos:line="282" pos:column="17">/*
                 * There is nothing worth consuming for zlib left, because it is
                 * either garbage data or the data has been copied to the
                 * validation buffer (processing validation data is no business
                 * for zlib). So set ctx-&gt;stream.avail_in to zero to indicate
                 * this to the following while loop.
                 */</comment>
                <expr_stmt><expr><name><name pos:line="289" pos:column="17">ctx<pos:position pos:line="289" pos:column="20"/></name><operator pos:line="289" pos:column="20">-&gt;<pos:position pos:line="289" pos:column="25"/></operator><name pos:line="289" pos:column="22">stream<pos:position pos:line="289" pos:column="28"/></name><operator pos:line="289" pos:column="28">.<pos:position pos:line="289" pos:column="29"/></operator><name pos:line="289" pos:column="29">avail_in<pos:position pos:line="289" pos:column="37"/></name></name> <operator pos:line="289" pos:column="38">=<pos:position pos:line="289" pos:column="39"/></operator> <literal type="number" pos:line="289" pos:column="40">0<pos:position pos:line="289" pos:column="41"/></literal></expr>;<pos:position pos:line="289" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="290" pos:column="14"/></block></then></if>
        }<pos:position pos:line="291" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="293" pos:column="9">zRC<pos:position pos:line="293" pos:column="12"/></name> <operator pos:line="293" pos:column="13">=<pos:position pos:line="293" pos:column="14"/></operator> <name pos:line="293" pos:column="15">Z_OK<pos:position pos:line="293" pos:column="19"/></name></expr>;<pos:position pos:line="293" pos:column="20"/></expr_stmt>

        <while pos:line="295" pos:column="9">while <condition pos:line="295" pos:column="15">(<expr><name><name pos:line="295" pos:column="16">ctx<pos:position pos:line="295" pos:column="19"/></name><operator pos:line="295" pos:column="19">-&gt;<pos:position pos:line="295" pos:column="24"/></operator><name pos:line="295" pos:column="21">stream<pos:position pos:line="295" pos:column="27"/></name><operator pos:line="295" pos:column="27">.<pos:position pos:line="295" pos:column="28"/></operator><name pos:line="295" pos:column="28">avail_in<pos:position pos:line="295" pos:column="36"/></name></name> <operator pos:line="295" pos:column="37">!=<pos:position pos:line="295" pos:column="39"/></operator> <literal type="number" pos:line="295" pos:column="40">0<pos:position pos:line="295" pos:column="41"/></literal></expr>)<pos:position pos:line="295" pos:column="42"/></condition> <block pos:line="295" pos:column="43">{
            <if pos:line="296" pos:column="13">if <condition pos:line="296" pos:column="16">(<expr><name><name pos:line="296" pos:column="17">ctx<pos:position pos:line="296" pos:column="20"/></name><operator pos:line="296" pos:column="20">-&gt;<pos:position pos:line="296" pos:column="25"/></operator><name pos:line="296" pos:column="22">stream<pos:position pos:line="296" pos:column="28"/></name><operator pos:line="296" pos:column="28">.<pos:position pos:line="296" pos:column="29"/></operator><name pos:line="296" pos:column="29">avail_out<pos:position pos:line="296" pos:column="38"/></name></name> <operator pos:line="296" pos:column="39">==<pos:position pos:line="296" pos:column="41"/></operator> <literal type="number" pos:line="296" pos:column="42">0<pos:position pos:line="296" pos:column="43"/></literal></expr>)<pos:position pos:line="296" pos:column="44"/></condition><then pos:line="296" pos:column="44"> <block pos:line="296" pos:column="45">{

                <if pos:line="298" pos:column="17">if <condition pos:line="298" pos:column="20">(<expr><operator pos:line="298" pos:column="21">!<pos:position pos:line="298" pos:column="22"/></operator><call><name pos:line="298" pos:column="22">check_ratio<pos:position pos:line="298" pos:column="33"/></name><argument_list pos:line="298" pos:column="33">(<argument><expr><name pos:line="298" pos:column="34">r<pos:position pos:line="298" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="298" pos:column="37">ctx<pos:position pos:line="298" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="298" pos:column="42">dc<pos:position pos:line="298" pos:column="44"/></name></expr></argument>)<pos:position pos:line="298" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="298" pos:column="46"/></condition><then pos:line="298" pos:column="46"> <block pos:line="298" pos:column="47">{
                    <expr_stmt><expr><call><name pos:line="299" pos:column="21">ap_log_rerror<pos:position pos:line="299" pos:column="34"/></name><argument_list pos:line="299" pos:column="34">(<argument><expr><name pos:line="299" pos:column="35">APLOG_MARK<pos:position pos:line="299" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="299" pos:column="47">APLOG_WARNING<pos:position pos:line="299" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="299" pos:column="62">0<pos:position pos:line="299" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="299" pos:column="65">r<pos:position pos:line="299" pos:column="66"/></name></expr></argument>, 
                            <argument><expr><literal type="string" pos:line="300" pos:column="29">"Inflated content ratio is larger than the "<pos:position pos:line="300" pos:column="73"/></literal>
                            <literal type="string" pos:line="301" pos:column="29">"configured limit %i by %i time(s)"<pos:position pos:line="301" pos:column="64"/></literal></expr></argument>,
                            <argument><expr><name><name pos:line="302" pos:column="29">dc<pos:position pos:line="302" pos:column="31"/></name><operator pos:line="302" pos:column="31">-&gt;<pos:position pos:line="302" pos:column="36"/></operator><name pos:line="302" pos:column="33">ratio_limit<pos:position pos:line="302" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="302" pos:column="46">dc<pos:position pos:line="302" pos:column="48"/></name><operator pos:line="302" pos:column="48">-&gt;<pos:position pos:line="302" pos:column="53"/></operator><name pos:line="302" pos:column="50">ratio_burst<pos:position pos:line="302" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="302" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="63"/></expr_stmt>
                    <return pos:line="303" pos:column="21">return <expr><name pos:line="303" pos:column="28">APR_EINVAL<pos:position pos:line="303" pos:column="38"/></name></expr>;<pos:position pos:line="303" pos:column="39"/></return>
                }<pos:position pos:line="304" pos:column="18"/></block></then></if>

                <expr_stmt><expr><name><name pos:line="306" pos:column="17">ctx<pos:position pos:line="306" pos:column="20"/></name><operator pos:line="306" pos:column="20">-&gt;<pos:position pos:line="306" pos:column="25"/></operator><name pos:line="306" pos:column="22">stream<pos:position pos:line="306" pos:column="28"/></name><operator pos:line="306" pos:column="28">.<pos:position pos:line="306" pos:column="29"/></operator><name pos:line="306" pos:column="29">next_out<pos:position pos:line="306" pos:column="37"/></name></name> <operator pos:line="306" pos:column="38">=<pos:position pos:line="306" pos:column="39"/></operator> <name><name pos:line="306" pos:column="40">ctx<pos:position pos:line="306" pos:column="43"/></name><operator pos:line="306" pos:column="43">-&gt;<pos:position pos:line="306" pos:column="48"/></operator><name pos:line="306" pos:column="45">buffer<pos:position pos:line="306" pos:column="51"/></name></name></expr>;<pos:position pos:line="306" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><name pos:line="307" pos:column="17">len<pos:position pos:line="307" pos:column="20"/></name> <operator pos:line="307" pos:column="21">=<pos:position pos:line="307" pos:column="22"/></operator> <name><name pos:line="307" pos:column="23">c<pos:position pos:line="307" pos:column="24"/></name><operator pos:line="307" pos:column="24">-&gt;<pos:position pos:line="307" pos:column="29"/></operator><name pos:line="307" pos:column="26">bufferSize<pos:position pos:line="307" pos:column="36"/></name></name> <operator pos:line="307" pos:column="37">-<pos:position pos:line="307" pos:column="38"/></operator> <name><name pos:line="307" pos:column="39">ctx<pos:position pos:line="307" pos:column="42"/></name><operator pos:line="307" pos:column="42">-&gt;<pos:position pos:line="307" pos:column="47"/></operator><name pos:line="307" pos:column="44">stream<pos:position pos:line="307" pos:column="50"/></name><operator pos:line="307" pos:column="50">.<pos:position pos:line="307" pos:column="51"/></operator><name pos:line="307" pos:column="51">avail_out<pos:position pos:line="307" pos:column="60"/></name></name></expr>;<pos:position pos:line="307" pos:column="61"/></expr_stmt>

                <expr_stmt><expr><name><name pos:line="309" pos:column="17">ctx<pos:position pos:line="309" pos:column="20"/></name><operator pos:line="309" pos:column="20">-&gt;<pos:position pos:line="309" pos:column="25"/></operator><name pos:line="309" pos:column="22">crc<pos:position pos:line="309" pos:column="25"/></name></name> <operator pos:line="309" pos:column="26">=<pos:position pos:line="309" pos:column="27"/></operator> <call><name pos:line="309" pos:column="28">crc32<pos:position pos:line="309" pos:column="33"/></name><argument_list pos:line="309" pos:column="33">(<argument><expr><name><name pos:line="309" pos:column="34">ctx<pos:position pos:line="309" pos:column="37"/></name><operator pos:line="309" pos:column="37">-&gt;<pos:position pos:line="309" pos:column="42"/></operator><name pos:line="309" pos:column="39">crc<pos:position pos:line="309" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="309" pos:column="44">(<pos:position pos:line="309" pos:column="45"/></operator><specifier pos:line="309" pos:column="45">const<pos:position pos:line="309" pos:column="50"/></specifier> <name pos:line="309" pos:column="51">Bytef<pos:position pos:line="309" pos:column="56"/></name> <operator pos:line="309" pos:column="57">*<pos:position pos:line="309" pos:column="58"/></operator><operator pos:line="309" pos:column="58">)<pos:position pos:line="309" pos:column="59"/></operator><name><name pos:line="309" pos:column="59">ctx<pos:position pos:line="309" pos:column="62"/></name><operator pos:line="309" pos:column="62">-&gt;<pos:position pos:line="309" pos:column="67"/></operator><name pos:line="309" pos:column="64">buffer<pos:position pos:line="309" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="309" pos:column="72">len<pos:position pos:line="309" pos:column="75"/></name></expr></argument>)<pos:position pos:line="309" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="309" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><name pos:line="310" pos:column="17">b<pos:position pos:line="310" pos:column="18"/></name> <operator pos:line="310" pos:column="19">=<pos:position pos:line="310" pos:column="20"/></operator> <call><name pos:line="310" pos:column="21">apr_bucket_heap_create<pos:position pos:line="310" pos:column="43"/></name><argument_list pos:line="310" pos:column="43">(<argument><expr><operator pos:line="310" pos:column="44">(<pos:position pos:line="310" pos:column="45"/></operator><name pos:line="310" pos:column="45">char<pos:position pos:line="310" pos:column="49"/></name> <operator pos:line="310" pos:column="50">*<pos:position pos:line="310" pos:column="51"/></operator><operator pos:line="310" pos:column="51">)<pos:position pos:line="310" pos:column="52"/></operator><name><name pos:line="310" pos:column="52">ctx<pos:position pos:line="310" pos:column="55"/></name><operator pos:line="310" pos:column="55">-&gt;<pos:position pos:line="310" pos:column="60"/></operator><name pos:line="310" pos:column="57">buffer<pos:position pos:line="310" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="310" pos:column="65">len<pos:position pos:line="310" pos:column="68"/></name></expr></argument>,
                                           <argument><expr><name pos:line="311" pos:column="44">NULL<pos:position pos:line="311" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="311" pos:column="50">f<pos:position pos:line="311" pos:column="51"/></name><operator pos:line="311" pos:column="51">-&gt;<pos:position pos:line="311" pos:column="56"/></operator><name pos:line="311" pos:column="53">c<pos:position pos:line="311" pos:column="54"/></name><operator pos:line="311" pos:column="54">-&gt;<pos:position pos:line="311" pos:column="59"/></operator><name pos:line="311" pos:column="56">bucket_alloc<pos:position pos:line="311" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="311" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="70"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="312" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="312" pos:column="40"/></name><argument_list pos:line="312" pos:column="40">(<argument><expr><name><name pos:line="312" pos:column="41">ctx<pos:position pos:line="312" pos:column="44"/></name><operator pos:line="312" pos:column="44">-&gt;<pos:position pos:line="312" pos:column="49"/></operator><name pos:line="312" pos:column="46">bb<pos:position pos:line="312" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="312" pos:column="50">b<pos:position pos:line="312" pos:column="51"/></name></expr></argument>)<pos:position pos:line="312" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="312" pos:column="53"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="313" pos:column="17">ctx<pos:position pos:line="313" pos:column="20"/></name><operator pos:line="313" pos:column="20">-&gt;<pos:position pos:line="313" pos:column="25"/></operator><name pos:line="313" pos:column="22">stream<pos:position pos:line="313" pos:column="28"/></name><operator pos:line="313" pos:column="28">.<pos:position pos:line="313" pos:column="29"/></operator><name pos:line="313" pos:column="29">avail_out<pos:position pos:line="313" pos:column="38"/></name></name> <operator pos:line="313" pos:column="39">=<pos:position pos:line="313" pos:column="40"/></operator> <name><name pos:line="313" pos:column="41">c<pos:position pos:line="313" pos:column="42"/></name><operator pos:line="313" pos:column="42">-&gt;<pos:position pos:line="313" pos:column="47"/></operator><name pos:line="313" pos:column="44">bufferSize<pos:position pos:line="313" pos:column="54"/></name></name></expr>;<pos:position pos:line="313" pos:column="55"/></expr_stmt>
                <comment type="block" pos:line="314" pos:column="17">/* Send what we have right now to the next filter. */</comment>
                <expr_stmt><expr><name pos:line="315" pos:column="17">rv<pos:position pos:line="315" pos:column="19"/></name> <operator pos:line="315" pos:column="20">=<pos:position pos:line="315" pos:column="21"/></operator> <call><name pos:line="315" pos:column="22">ap_pass_brigade<pos:position pos:line="315" pos:column="37"/></name><argument_list pos:line="315" pos:column="37">(<argument><expr><name><name pos:line="315" pos:column="38">f<pos:position pos:line="315" pos:column="39"/></name><operator pos:line="315" pos:column="39">-&gt;<pos:position pos:line="315" pos:column="44"/></operator><name pos:line="315" pos:column="41">next<pos:position pos:line="315" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="315" pos:column="47">ctx<pos:position pos:line="315" pos:column="50"/></name><operator pos:line="315" pos:column="50">-&gt;<pos:position pos:line="315" pos:column="55"/></operator><name pos:line="315" pos:column="52">bb<pos:position pos:line="315" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="315" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="315" pos:column="56"/></expr_stmt>
                <if pos:line="316" pos:column="17">if <condition pos:line="316" pos:column="20">(<expr><name pos:line="316" pos:column="21">rv<pos:position pos:line="316" pos:column="23"/></name> <operator pos:line="316" pos:column="24">!=<pos:position pos:line="316" pos:column="26"/></operator> <name pos:line="316" pos:column="27">APR_SUCCESS<pos:position pos:line="316" pos:column="38"/></name></expr>)<pos:position pos:line="316" pos:column="39"/></condition><then pos:line="316" pos:column="39"> <block pos:line="316" pos:column="40">{
                    <return pos:line="317" pos:column="21">return <expr><name pos:line="317" pos:column="28">rv<pos:position pos:line="317" pos:column="30"/></name></expr>;<pos:position pos:line="317" pos:column="31"/></return>
                }<pos:position pos:line="318" pos:column="18"/></block></then></if>
            }<pos:position pos:line="319" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="321" pos:column="13">zRC<pos:position pos:line="321" pos:column="16"/></name> <operator pos:line="321" pos:column="17">=<pos:position pos:line="321" pos:column="18"/></operator> <call><name pos:line="321" pos:column="19">inflate<pos:position pos:line="321" pos:column="26"/></name><argument_list pos:line="321" pos:column="26">(<argument><expr><operator pos:line="321" pos:column="27">&amp;<pos:position pos:line="321" pos:column="32"/></operator><name><name pos:line="321" pos:column="28">ctx<pos:position pos:line="321" pos:column="31"/></name><operator pos:line="321" pos:column="31">-&gt;<pos:position pos:line="321" pos:column="36"/></operator><name pos:line="321" pos:column="33">stream<pos:position pos:line="321" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="321" pos:column="41">Z_NO_FLUSH<pos:position pos:line="321" pos:column="51"/></name></expr></argument>)<pos:position pos:line="321" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="53"/></expr_stmt>

            <if pos:line="323" pos:column="13">if <condition pos:line="323" pos:column="16">(<expr><name pos:line="323" pos:column="17">zRC<pos:position pos:line="323" pos:column="20"/></name> <operator pos:line="323" pos:column="21">==<pos:position pos:line="323" pos:column="23"/></operator> <name pos:line="323" pos:column="24">Z_STREAM_END<pos:position pos:line="323" pos:column="36"/></name></expr>)<pos:position pos:line="323" pos:column="37"/></condition><then pos:line="323" pos:column="37"> <block pos:line="323" pos:column="38">{
                <comment type="block" pos:line="324" pos:column="17">/*
                 * We have inflated all data. Now try to capture the
                 * validation bytes. We may not have them all available
                 * right now, but capture what is there.
                 */</comment>
                <expr_stmt><expr><name><name pos:line="329" pos:column="17">ctx<pos:position pos:line="329" pos:column="20"/></name><operator pos:line="329" pos:column="20">-&gt;<pos:position pos:line="329" pos:column="25"/></operator><name pos:line="329" pos:column="22">validation_buffer<pos:position pos:line="329" pos:column="39"/></name></name> <operator pos:line="329" pos:column="40">=<pos:position pos:line="329" pos:column="41"/></operator> <call><name pos:line="329" pos:column="42">apr_pcalloc<pos:position pos:line="329" pos:column="53"/></name><argument_list pos:line="329" pos:column="53">(<argument><expr><name><name pos:line="329" pos:column="54">f<pos:position pos:line="329" pos:column="55"/></name><operator pos:line="329" pos:column="55">-&gt;<pos:position pos:line="329" pos:column="60"/></operator><name pos:line="329" pos:column="57">r<pos:position pos:line="329" pos:column="58"/></name><operator pos:line="329" pos:column="58">-&gt;<pos:position pos:line="329" pos:column="63"/></operator><name pos:line="329" pos:column="60">pool<pos:position pos:line="329" pos:column="64"/></name></name></expr></argument>,
                                                     <argument><expr><name pos:line="330" pos:column="54">VALIDATION_SIZE<pos:position pos:line="330" pos:column="69"/></name></expr></argument>)<pos:position pos:line="330" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="330" pos:column="71"/></expr_stmt>
                <if pos:line="331" pos:column="17">if <condition pos:line="331" pos:column="20">(<expr><name><name pos:line="331" pos:column="21">ctx<pos:position pos:line="331" pos:column="24"/></name><operator pos:line="331" pos:column="24">-&gt;<pos:position pos:line="331" pos:column="29"/></operator><name pos:line="331" pos:column="26">stream<pos:position pos:line="331" pos:column="32"/></name><operator pos:line="331" pos:column="32">.<pos:position pos:line="331" pos:column="33"/></operator><name pos:line="331" pos:column="33">avail_in<pos:position pos:line="331" pos:column="41"/></name></name> <operator pos:line="331" pos:column="42">&gt;<pos:position pos:line="331" pos:column="46"/></operator> <name pos:line="331" pos:column="44">VALIDATION_SIZE<pos:position pos:line="331" pos:column="59"/></name></expr>)<pos:position pos:line="331" pos:column="60"/></condition><then pos:line="331" pos:column="60"> <block pos:line="331" pos:column="61">{
                    <expr_stmt><expr><name><name pos:line="332" pos:column="21">ctx<pos:position pos:line="332" pos:column="24"/></name><operator pos:line="332" pos:column="24">-&gt;<pos:position pos:line="332" pos:column="29"/></operator><name pos:line="332" pos:column="26">validation_buffer_length<pos:position pos:line="332" pos:column="50"/></name></name> <operator pos:line="332" pos:column="51">=<pos:position pos:line="332" pos:column="52"/></operator> <name pos:line="332" pos:column="53">VALIDATION_SIZE<pos:position pos:line="332" pos:column="68"/></name></expr>;<pos:position pos:line="332" pos:column="69"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="333" pos:column="21">ap_log_rerror<pos:position pos:line="333" pos:column="34"/></name><argument_list pos:line="333" pos:column="34">(<argument><expr><name pos:line="333" pos:column="35">APLOG_MARK<pos:position pos:line="333" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="333" pos:column="47">APLOG_DEBUG<pos:position pos:line="333" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="333" pos:column="60">0<pos:position pos:line="333" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="333" pos:column="63">r<pos:position pos:line="333" pos:column="64"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="334" pos:column="35">"Zlib: %d bytes of garbage at the end of "<pos:position pos:line="334" pos:column="77"/></literal>
                                  <literal type="string" pos:line="335" pos:column="35">"compressed stream."<pos:position pos:line="335" pos:column="55"/></literal></expr></argument>,
                                  <argument><expr><name><name pos:line="336" pos:column="35">ctx<pos:position pos:line="336" pos:column="38"/></name><operator pos:line="336" pos:column="38">-&gt;<pos:position pos:line="336" pos:column="43"/></operator><name pos:line="336" pos:column="40">stream<pos:position pos:line="336" pos:column="46"/></name><operator pos:line="336" pos:column="46">.<pos:position pos:line="336" pos:column="47"/></operator><name pos:line="336" pos:column="47">avail_in<pos:position pos:line="336" pos:column="55"/></name></name> <operator pos:line="336" pos:column="56">-<pos:position pos:line="336" pos:column="57"/></operator> <name pos:line="336" pos:column="58">VALIDATION_SIZE<pos:position pos:line="336" pos:column="73"/></name></expr></argument>)<pos:position pos:line="336" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="336" pos:column="75"/></expr_stmt>
                }<pos:position pos:line="337" pos:column="18"/></block></then> <elseif pos:line="337" pos:column="19">else <if pos:line="337" pos:column="24">if <condition pos:line="337" pos:column="27">(<expr><name><name pos:line="337" pos:column="28">ctx<pos:position pos:line="337" pos:column="31"/></name><operator pos:line="337" pos:column="31">-&gt;<pos:position pos:line="337" pos:column="36"/></operator><name pos:line="337" pos:column="33">stream<pos:position pos:line="337" pos:column="39"/></name><operator pos:line="337" pos:column="39">.<pos:position pos:line="337" pos:column="40"/></operator><name pos:line="337" pos:column="40">avail_in<pos:position pos:line="337" pos:column="48"/></name></name> <operator pos:line="337" pos:column="49">&gt;<pos:position pos:line="337" pos:column="53"/></operator> <literal type="number" pos:line="337" pos:column="51">0<pos:position pos:line="337" pos:column="52"/></literal></expr>)<pos:position pos:line="337" pos:column="53"/></condition><then pos:line="337" pos:column="53"> <block pos:line="337" pos:column="54">{
                           <expr_stmt><expr><name><name pos:line="338" pos:column="28">ctx<pos:position pos:line="338" pos:column="31"/></name><operator pos:line="338" pos:column="31">-&gt;<pos:position pos:line="338" pos:column="36"/></operator><name pos:line="338" pos:column="33">validation_buffer_length<pos:position pos:line="338" pos:column="57"/></name></name> <operator pos:line="338" pos:column="58">=<pos:position pos:line="338" pos:column="59"/></operator> <name><name pos:line="338" pos:column="60">ctx<pos:position pos:line="338" pos:column="63"/></name><operator pos:line="338" pos:column="63">-&gt;<pos:position pos:line="338" pos:column="68"/></operator><name pos:line="338" pos:column="65">stream<pos:position pos:line="338" pos:column="71"/></name><operator pos:line="338" pos:column="71">.<pos:position pos:line="338" pos:column="72"/></operator><name pos:line="338" pos:column="72">avail_in<pos:position pos:line="338" pos:column="80"/></name></name></expr>;<pos:position pos:line="338" pos:column="81"/></expr_stmt>
                }<pos:position pos:line="339" pos:column="18"/></block></then></if></elseif></if>
                <if pos:line="340" pos:column="17">if <condition pos:line="340" pos:column="20">(<expr><name><name pos:line="340" pos:column="21">ctx<pos:position pos:line="340" pos:column="24"/></name><operator pos:line="340" pos:column="24">-&gt;<pos:position pos:line="340" pos:column="29"/></operator><name pos:line="340" pos:column="26">validation_buffer_length<pos:position pos:line="340" pos:column="50"/></name></name></expr>)<pos:position pos:line="340" pos:column="51"/></condition><then pos:line="340" pos:column="51">
                    <block type="pseudo"><expr_stmt><expr><call><name pos:line="341" pos:column="21">memcpy<pos:position pos:line="341" pos:column="27"/></name><argument_list pos:line="341" pos:column="27">(<argument><expr><name><name pos:line="341" pos:column="28">ctx<pos:position pos:line="341" pos:column="31"/></name><operator pos:line="341" pos:column="31">-&gt;<pos:position pos:line="341" pos:column="36"/></operator><name pos:line="341" pos:column="33">validation_buffer<pos:position pos:line="341" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="341" pos:column="52">ctx<pos:position pos:line="341" pos:column="55"/></name><operator pos:line="341" pos:column="55">-&gt;<pos:position pos:line="341" pos:column="60"/></operator><name pos:line="341" pos:column="57">stream<pos:position pos:line="341" pos:column="63"/></name><operator pos:line="341" pos:column="63">.<pos:position pos:line="341" pos:column="64"/></operator><name pos:line="341" pos:column="64">next_in<pos:position pos:line="341" pos:column="71"/></name></name></expr></argument>,
                           <argument><expr><name><name pos:line="342" pos:column="28">ctx<pos:position pos:line="342" pos:column="31"/></name><operator pos:line="342" pos:column="31">-&gt;<pos:position pos:line="342" pos:column="36"/></operator><name pos:line="342" pos:column="33">validation_buffer_length<pos:position pos:line="342" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="342" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="342" pos:column="59"/></expr_stmt></block></then></if>
                <break pos:line="343" pos:column="17">break;<pos:position pos:line="343" pos:column="23"/></break>
            }<pos:position pos:line="344" pos:column="14"/></block></then></if>

            <if pos:line="346" pos:column="13">if <condition pos:line="346" pos:column="16">(<expr><name pos:line="346" pos:column="17">zRC<pos:position pos:line="346" pos:column="20"/></name> <operator pos:line="346" pos:column="21">!=<pos:position pos:line="346" pos:column="23"/></operator> <name pos:line="346" pos:column="24">Z_OK<pos:position pos:line="346" pos:column="28"/></name></expr>)<pos:position pos:line="346" pos:column="29"/></condition><then pos:line="346" pos:column="29"> <block pos:line="346" pos:column="30">{
                <expr_stmt><expr><call><name pos:line="347" pos:column="17">ap_log_rerror<pos:position pos:line="347" pos:column="30"/></name><argument_list pos:line="347" pos:column="30">(<argument><expr><name pos:line="347" pos:column="31">APLOG_MARK<pos:position pos:line="347" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="347" pos:column="43">APLOG_WARNING<pos:position pos:line="347" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="347" pos:column="58">0<pos:position pos:line="347" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="347" pos:column="61">r<pos:position pos:line="347" pos:column="62"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="348" pos:column="31">"Zlib error %d inflating data (%s)"<pos:position pos:line="348" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="348" pos:column="68">zRC<pos:position pos:line="348" pos:column="71"/></name></expr></argument>,
                              <argument><expr><name><name pos:line="349" pos:column="31">ctx<pos:position pos:line="349" pos:column="34"/></name><operator pos:line="349" pos:column="34">-&gt;<pos:position pos:line="349" pos:column="39"/></operator><name pos:line="349" pos:column="36">stream<pos:position pos:line="349" pos:column="42"/></name><operator pos:line="349" pos:column="42">.<pos:position pos:line="349" pos:column="43"/></operator><name pos:line="349" pos:column="43">msg<pos:position pos:line="349" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="349" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="349" pos:column="48"/></expr_stmt>
                <return pos:line="350" pos:column="17">return <expr><name pos:line="350" pos:column="24">APR_EGENERAL<pos:position pos:line="350" pos:column="36"/></name></expr>;<pos:position pos:line="350" pos:column="37"/></return>
            }<pos:position pos:line="351" pos:column="14"/></block></then></if>
        }<pos:position pos:line="352" pos:column="10"/></block></while>

        <expr_stmt><expr><call><name pos:line="354" pos:column="9">apr_bucket_delete<pos:position pos:line="354" pos:column="26"/></name><argument_list pos:line="354" pos:column="26">(<argument><expr><name pos:line="354" pos:column="27">e<pos:position pos:line="354" pos:column="28"/></name></expr></argument>)<pos:position pos:line="354" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="354" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="355" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="357" pos:column="5">apr_brigade_cleanup<pos:position pos:line="357" pos:column="24"/></name><argument_list pos:line="357" pos:column="24">(<argument><expr><name pos:line="357" pos:column="25">bb<pos:position pos:line="357" pos:column="27"/></name></expr></argument>)<pos:position pos:line="357" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="357" pos:column="29"/></expr_stmt>
    <return pos:line="358" pos:column="5">return <expr><name pos:line="358" pos:column="12">APR_SUCCESS<pos:position pos:line="358" pos:column="23"/></name></expr>;<pos:position pos:line="358" pos:column="24"/></return>
}<pos:position pos:line="359" pos:column="2"/></block></function></unit>
