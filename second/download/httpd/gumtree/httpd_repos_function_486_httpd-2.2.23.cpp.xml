<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_486_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">magic_rsl_to_request<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">request_rec<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">r<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">cur_frag<pos:position pos:line="3" pos:column="17"/></name></decl>,         <comment type="block" pos:line="3" pos:column="27">/* current fragment number/counter */</comment>
        <decl><type ref="prev"/><name pos:line="4" pos:column="9">cur_pos<pos:position pos:line="4" pos:column="16"/></name></decl>,          <comment type="block" pos:line="4" pos:column="27">/* current position within fragment */</comment>
        <decl><type ref="prev"/><name pos:line="5" pos:column="9">type_frag<pos:position pos:line="5" pos:column="18"/></name></decl>,        <comment type="block" pos:line="5" pos:column="27">/* content type starting point: fragment */</comment>
        <decl><type ref="prev"/><name pos:line="6" pos:column="9">type_pos<pos:position pos:line="6" pos:column="17"/></name></decl>,         <comment type="block" pos:line="6" pos:column="27">/* content type starting point: position */</comment>
        <decl><type ref="prev"/><name pos:line="7" pos:column="9">type_len<pos:position pos:line="7" pos:column="17"/></name></decl>,         <comment type="block" pos:line="7" pos:column="27">/* content type length */</comment>
        <decl><type ref="prev"/><name pos:line="8" pos:column="9">encoding_frag<pos:position pos:line="8" pos:column="22"/></name></decl>,    <comment type="block" pos:line="8" pos:column="27">/* content encoding starting point: fragment */</comment>
        <decl><type ref="prev"/><name pos:line="9" pos:column="9">encoding_pos<pos:position pos:line="9" pos:column="21"/></name></decl>,     <comment type="block" pos:line="9" pos:column="27">/* content encoding starting point: position */</comment>
        <decl><type ref="prev"/><name pos:line="10" pos:column="9">encoding_len<pos:position pos:line="10" pos:column="21"/></name></decl>;<pos:position pos:line="10" pos:column="22"/></decl_stmt>     <comment type="block" pos:line="10" pos:column="27">/* content encoding length */</comment>

    <decl_stmt><decl><type><name pos:line="12" pos:column="5">magic_rsl<pos:position pos:line="12" pos:column="14"/></name> <modifier pos:line="12" pos:column="15">*<pos:position pos:line="12" pos:column="16"/></modifier></type><name pos:line="12" pos:column="16">frag<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>      <comment type="block" pos:line="12" pos:column="27">/* list-traversal pointer */</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">rsl_states<pos:position pos:line="13" pos:column="15"/></name></type> <name pos:line="13" pos:column="16">state<pos:position pos:line="13" pos:column="21"/></name></decl>;<pos:position pos:line="13" pos:column="22"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="15" pos:column="5">magic_req_rec<pos:position pos:line="15" pos:column="18"/></name> <modifier pos:line="15" pos:column="19">*<pos:position pos:line="15" pos:column="20"/></modifier></type><name pos:line="15" pos:column="20">req_dat<pos:position pos:line="15" pos:column="27"/></name> <init pos:line="15" pos:column="28">= <expr><operator pos:line="15" pos:column="30">(<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="31">magic_req_rec<pos:position pos:line="15" pos:column="44"/></name> <operator pos:line="15" pos:column="45">*<pos:position pos:line="15" pos:column="46"/></operator><operator pos:line="15" pos:column="46">)<pos:position pos:line="15" pos:column="47"/></operator>
                    <call><name pos:line="16" pos:column="21">ap_get_module_config<pos:position pos:line="16" pos:column="41"/></name><argument_list pos:line="16" pos:column="41">(<argument><expr><name><name pos:line="16" pos:column="42">r<pos:position pos:line="16" pos:column="43"/></name><operator pos:line="16" pos:column="43">-&gt;<pos:position pos:line="16" pos:column="48"/></operator><name pos:line="16" pos:column="45">request_config<pos:position pos:line="16" pos:column="59"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="61">&amp;<pos:position pos:line="16" pos:column="66"/></operator><name pos:line="16" pos:column="62">mime_magic_module<pos:position pos:line="16" pos:column="79"/></name></expr></argument>)<pos:position pos:line="16" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="81"/></decl_stmt>

    <comment type="block" pos:line="18" pos:column="5">/* check if we have a result */</comment>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><operator pos:line="19" pos:column="9">!<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">req_dat<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">||<pos:position pos:line="19" pos:column="20"/></operator> <operator pos:line="19" pos:column="21">!<pos:position pos:line="19" pos:column="22"/></operator><name><name pos:line="19" pos:column="22">req_dat<pos:position pos:line="19" pos:column="29"/></name><operator pos:line="19" pos:column="29">-&gt;<pos:position pos:line="19" pos:column="34"/></operator><name pos:line="19" pos:column="31">head<pos:position pos:line="19" pos:column="35"/></name></name></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
        <comment type="block" pos:line="20" pos:column="9">/* empty - no match, we defer to other Apache modules */</comment>
        <return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">DECLINED<pos:position pos:line="21" pos:column="24"/></name></expr>;<pos:position pos:line="21" pos:column="25"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="24" pos:column="5">/* start searching for the type and encoding */</comment>
    <expr_stmt><expr><name pos:line="25" pos:column="5">state<pos:position pos:line="25" pos:column="10"/></name> <operator pos:line="25" pos:column="11">=<pos:position pos:line="25" pos:column="12"/></operator> <name pos:line="25" pos:column="13">rsl_leading_space<pos:position pos:line="25" pos:column="30"/></name></expr>;<pos:position pos:line="25" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="26" pos:column="5">type_frag<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <name pos:line="26" pos:column="17">type_pos<pos:position pos:line="26" pos:column="25"/></name> <operator pos:line="26" pos:column="26">=<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">type_len<pos:position pos:line="26" pos:column="36"/></name> <operator pos:line="26" pos:column="37">=<pos:position pos:line="26" pos:column="38"/></operator> <literal type="number" pos:line="26" pos:column="39">0<pos:position pos:line="26" pos:column="40"/></literal></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name pos:line="27" pos:column="5">encoding_frag<pos:position pos:line="27" pos:column="18"/></name> <operator pos:line="27" pos:column="19">=<pos:position pos:line="27" pos:column="20"/></operator> <name pos:line="27" pos:column="21">encoding_pos<pos:position pos:line="27" pos:column="33"/></name> <operator pos:line="27" pos:column="34">=<pos:position pos:line="27" pos:column="35"/></operator> <name pos:line="27" pos:column="36">encoding_len<pos:position pos:line="27" pos:column="48"/></name> <operator pos:line="27" pos:column="49">=<pos:position pos:line="27" pos:column="50"/></operator> <literal type="number" pos:line="27" pos:column="51">0<pos:position pos:line="27" pos:column="52"/></literal></expr>;<pos:position pos:line="27" pos:column="53"/></expr_stmt>
    <for pos:line="28" pos:column="5">for <control pos:line="28" pos:column="9">(<init><expr><name pos:line="28" pos:column="10">frag<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">=<pos:position pos:line="28" pos:column="16"/></operator> <name><name pos:line="28" pos:column="17">req_dat<pos:position pos:line="28" pos:column="24"/></name><operator pos:line="28" pos:column="24">-&gt;<pos:position pos:line="28" pos:column="29"/></operator><name pos:line="28" pos:column="26">head<pos:position pos:line="28" pos:column="30"/></name></name></expr><operator pos:line="28" pos:column="30">,<pos:position pos:line="28" pos:column="31"/></operator> <expr><name pos:line="28" pos:column="32">cur_frag<pos:position pos:line="28" pos:column="40"/></name> <operator pos:line="28" pos:column="41">=<pos:position pos:line="28" pos:column="42"/></operator> <literal type="number" pos:line="28" pos:column="43">0<pos:position pos:line="28" pos:column="44"/></literal></expr>;<pos:position pos:line="28" pos:column="45"/></init>
         <condition><expr><name pos:line="29" pos:column="10">frag<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">&amp;&amp;<pos:position pos:line="29" pos:column="25"/></operator> <name><name pos:line="29" pos:column="18">frag<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">-&gt;<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="24">next<pos:position pos:line="29" pos:column="28"/></name></name></expr>;<pos:position pos:line="29" pos:column="29"/></condition>
         <incr><expr><name pos:line="30" pos:column="10">frag<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">=<pos:position pos:line="30" pos:column="16"/></operator> <name><name pos:line="30" pos:column="17">frag<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">-&gt;<pos:position pos:line="30" pos:column="26"/></operator><name pos:line="30" pos:column="23">next<pos:position pos:line="30" pos:column="27"/></name></name></expr><operator pos:line="30" pos:column="27">,<pos:position pos:line="30" pos:column="28"/></operator> <expr><name pos:line="30" pos:column="29">cur_frag<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">++<pos:position pos:line="30" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="40"/></control> <block pos:line="30" pos:column="41">{
        <comment type="block" pos:line="31" pos:column="9">/* loop through the characters in the fragment */</comment>
        <for pos:line="32" pos:column="9">for <control pos:line="32" pos:column="13">(<init><expr><name pos:line="32" pos:column="14">cur_pos<pos:position pos:line="32" pos:column="21"/></name> <operator pos:line="32" pos:column="22">=<pos:position pos:line="32" pos:column="23"/></operator> <literal type="number" pos:line="32" pos:column="24">0<pos:position pos:line="32" pos:column="25"/></literal></expr>;<pos:position pos:line="32" pos:column="26"/></init> <condition><expr><name><name pos:line="32" pos:column="27">frag<pos:position pos:line="32" pos:column="31"/></name><operator pos:line="32" pos:column="31">-&gt;<pos:position pos:line="32" pos:column="36"/></operator><name pos:line="32" pos:column="33">str<pos:position pos:line="32" pos:column="36"/></name><index pos:line="32" pos:column="36">[<expr><name pos:line="32" pos:column="37">cur_pos<pos:position pos:line="32" pos:column="44"/></name></expr>]<pos:position pos:line="32" pos:column="45"/></index></name></expr>;<pos:position pos:line="32" pos:column="46"/></condition> <incr><expr><name pos:line="32" pos:column="47">cur_pos<pos:position pos:line="32" pos:column="54"/></name><operator pos:line="32" pos:column="54">++<pos:position pos:line="32" pos:column="56"/></operator></expr></incr>)<pos:position pos:line="32" pos:column="57"/></control> <block pos:line="32" pos:column="58">{
            <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><call><name pos:line="33" pos:column="17">apr_isspace<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name><name pos:line="33" pos:column="29">frag<pos:position pos:line="33" pos:column="33"/></name><operator pos:line="33" pos:column="33">-&gt;<pos:position pos:line="33" pos:column="38"/></operator><name pos:line="33" pos:column="35">str<pos:position pos:line="33" pos:column="38"/></name><index pos:line="33" pos:column="38">[<expr><name pos:line="33" pos:column="39">cur_pos<pos:position pos:line="33" pos:column="46"/></name></expr>]<pos:position pos:line="33" pos:column="47"/></index></name></expr></argument>)<pos:position pos:line="33" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="49"/></condition><then pos:line="33" pos:column="49"> <block pos:line="33" pos:column="50">{
                <comment type="block" pos:line="34" pos:column="17">/* process whitespace actions for each state */</comment>
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">state<pos:position pos:line="35" pos:column="26"/></name> <operator pos:line="35" pos:column="27">==<pos:position pos:line="35" pos:column="29"/></operator> <name pos:line="35" pos:column="30">rsl_leading_space<pos:position pos:line="35" pos:column="47"/></name></expr>)<pos:position pos:line="35" pos:column="48"/></condition><then pos:line="35" pos:column="48"> <block pos:line="35" pos:column="49">{
                    <comment type="block" pos:line="36" pos:column="21">/* eat whitespace in this state */</comment>
                    <continue pos:line="37" pos:column="21">continue;<pos:position pos:line="37" pos:column="30"/></continue>
                }<pos:position pos:line="38" pos:column="18"/></block></then>
                <elseif pos:line="39" pos:column="17">else <if pos:line="39" pos:column="22">if <condition pos:line="39" pos:column="25">(<expr><name pos:line="39" pos:column="26">state<pos:position pos:line="39" pos:column="31"/></name> <operator pos:line="39" pos:column="32">==<pos:position pos:line="39" pos:column="34"/></operator> <name pos:line="39" pos:column="35">rsl_type<pos:position pos:line="39" pos:column="43"/></name></expr>)<pos:position pos:line="39" pos:column="44"/></condition><then pos:line="39" pos:column="44"> <block pos:line="39" pos:column="45">{
                    <comment type="block" pos:line="40" pos:column="21">/* whitespace: type has no slash! */</comment>
                    <return pos:line="41" pos:column="21">return <expr><name pos:line="41" pos:column="28">DECLINED<pos:position pos:line="41" pos:column="36"/></name></expr>;<pos:position pos:line="41" pos:column="37"/></return>
                }<pos:position pos:line="42" pos:column="18"/></block></then></if></elseif>
                <elseif pos:line="43" pos:column="17">else <if pos:line="43" pos:column="22">if <condition pos:line="43" pos:column="25">(<expr><name pos:line="43" pos:column="26">state<pos:position pos:line="43" pos:column="31"/></name> <operator pos:line="43" pos:column="32">==<pos:position pos:line="43" pos:column="34"/></operator> <name pos:line="43" pos:column="35">rsl_subtype<pos:position pos:line="43" pos:column="46"/></name></expr>)<pos:position pos:line="43" pos:column="47"/></condition><then pos:line="43" pos:column="47"> <block pos:line="43" pos:column="48">{
                    <comment type="block" pos:line="44" pos:column="21">/* whitespace: end of MIME type */</comment>
                    <expr_stmt><expr><name pos:line="45" pos:column="21">state<pos:position pos:line="45" pos:column="26"/></name><operator pos:line="45" pos:column="26">++<pos:position pos:line="45" pos:column="28"/></operator></expr>;<pos:position pos:line="45" pos:column="29"/></expr_stmt>
                    <continue pos:line="46" pos:column="21">continue;<pos:position pos:line="46" pos:column="30"/></continue>
                }<pos:position pos:line="47" pos:column="18"/></block></then></if></elseif>
                <elseif pos:line="48" pos:column="17">else <if pos:line="48" pos:column="22">if <condition pos:line="48" pos:column="25">(<expr><name pos:line="48" pos:column="26">state<pos:position pos:line="48" pos:column="31"/></name> <operator pos:line="48" pos:column="32">==<pos:position pos:line="48" pos:column="34"/></operator> <name pos:line="48" pos:column="35">rsl_separator<pos:position pos:line="48" pos:column="48"/></name></expr>)<pos:position pos:line="48" pos:column="49"/></condition><then pos:line="48" pos:column="49"> <block pos:line="48" pos:column="50">{
                    <comment type="block" pos:line="49" pos:column="21">/* eat whitespace in this state */</comment>
                    <continue pos:line="50" pos:column="21">continue;<pos:position pos:line="50" pos:column="30"/></continue>
                }<pos:position pos:line="51" pos:column="18"/></block></then></if></elseif>
                <elseif pos:line="52" pos:column="17">else <if pos:line="52" pos:column="22">if <condition pos:line="52" pos:column="25">(<expr><name pos:line="52" pos:column="26">state<pos:position pos:line="52" pos:column="31"/></name> <operator pos:line="52" pos:column="32">==<pos:position pos:line="52" pos:column="34"/></operator> <name pos:line="52" pos:column="35">rsl_encoding<pos:position pos:line="52" pos:column="47"/></name></expr>)<pos:position pos:line="52" pos:column="48"/></condition><then pos:line="52" pos:column="48"> <block pos:line="52" pos:column="49">{
                    <comment type="block" pos:line="53" pos:column="21">/* whitespace: end of MIME encoding */</comment>
                    <comment type="block" pos:line="54" pos:column="21">/* we're done */</comment>
                    <expr_stmt><expr><name pos:line="55" pos:column="21">frag<pos:position pos:line="55" pos:column="25"/></name> <operator pos:line="55" pos:column="26">=<pos:position pos:line="55" pos:column="27"/></operator> <name><name pos:line="55" pos:column="28">req_dat<pos:position pos:line="55" pos:column="35"/></name><operator pos:line="55" pos:column="35">-&gt;<pos:position pos:line="55" pos:column="40"/></operator><name pos:line="55" pos:column="37">tail<pos:position pos:line="55" pos:column="41"/></name></name></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>
                    <break pos:line="56" pos:column="21">break;<pos:position pos:line="56" pos:column="27"/></break>
                }<pos:position pos:line="57" pos:column="18"/></block></then></if></elseif>
                <else pos:line="58" pos:column="17">else <block pos:line="58" pos:column="22">{
                    <comment type="block" pos:line="59" pos:column="21">/* should not be possible */</comment>
                    <comment type="block" pos:line="60" pos:column="21">/* abandon malfunctioning module */</comment>
                    <expr_stmt><expr><call><name pos:line="61" pos:column="21">ap_log_rerror<pos:position pos:line="61" pos:column="34"/></name><argument_list pos:line="61" pos:column="34">(<argument><expr><name pos:line="61" pos:column="35">APLOG_MARK<pos:position pos:line="61" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="47">APLOG_ERR<pos:position pos:line="61" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="61" pos:column="58">0<pos:position pos:line="61" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="61" pos:column="61">r<pos:position pos:line="61" pos:column="62"/></name></expr></argument>,
                                <argument><expr><name pos:line="62" pos:column="33">MODNAME<pos:position pos:line="62" pos:column="40"/></name> <literal type="string" pos:line="62" pos:column="41">": bad state %d (ws)"<pos:position pos:line="62" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="62" pos:column="64">state<pos:position pos:line="62" pos:column="69"/></name></expr></argument>)<pos:position pos:line="62" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="71"/></expr_stmt>
                    <return pos:line="63" pos:column="21">return <expr><name pos:line="63" pos:column="28">DECLINED<pos:position pos:line="63" pos:column="36"/></name></expr>;<pos:position pos:line="63" pos:column="37"/></return>
                }<pos:position pos:line="64" pos:column="18"/></block></else></if>
                <comment type="block" pos:line="65" pos:column="17">/* NOTREACHED */</comment>
            }<pos:position pos:line="66" pos:column="14"/></block></then>
            <elseif pos:line="67" pos:column="13">else <if pos:line="67" pos:column="18">if <condition pos:line="67" pos:column="21">(<expr><name pos:line="67" pos:column="22">state<pos:position pos:line="67" pos:column="27"/></name> <operator pos:line="67" pos:column="28">==<pos:position pos:line="67" pos:column="30"/></operator> <name pos:line="67" pos:column="31">rsl_type<pos:position pos:line="67" pos:column="39"/></name> <operator pos:line="67" pos:column="40">&amp;&amp;<pos:position pos:line="67" pos:column="50"/></operator>
                     <name><name pos:line="68" pos:column="22">frag<pos:position pos:line="68" pos:column="26"/></name><operator pos:line="68" pos:column="26">-&gt;<pos:position pos:line="68" pos:column="31"/></operator><name pos:line="68" pos:column="28">str<pos:position pos:line="68" pos:column="31"/></name><index pos:line="68" pos:column="31">[<expr><name pos:line="68" pos:column="32">cur_pos<pos:position pos:line="68" pos:column="39"/></name></expr>]<pos:position pos:line="68" pos:column="40"/></index></name> <operator pos:line="68" pos:column="41">==<pos:position pos:line="68" pos:column="43"/></operator> <literal type="char" pos:line="68" pos:column="44">'/'<pos:position pos:line="68" pos:column="47"/></literal></expr>)<pos:position pos:line="68" pos:column="48"/></condition><then pos:line="68" pos:column="48"> <block pos:line="68" pos:column="49">{
                <comment type="block" pos:line="69" pos:column="17">/* copy the char and go to rsl_subtype state */</comment>
                <expr_stmt><expr><name pos:line="70" pos:column="17">type_len<pos:position pos:line="70" pos:column="25"/></name><operator pos:line="70" pos:column="25">++<pos:position pos:line="70" pos:column="27"/></operator></expr>;<pos:position pos:line="70" pos:column="28"/></expr_stmt>
                <expr_stmt><expr><name pos:line="71" pos:column="17">state<pos:position pos:line="71" pos:column="22"/></name><operator pos:line="71" pos:column="22">++<pos:position pos:line="71" pos:column="24"/></operator></expr>;<pos:position pos:line="71" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="72" pos:column="14"/></block></then></if></elseif>
            <else pos:line="73" pos:column="13">else <block pos:line="73" pos:column="18">{
                <comment type="block" pos:line="74" pos:column="17">/* process non-space actions for each state */</comment>
                <if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><name pos:line="75" pos:column="21">state<pos:position pos:line="75" pos:column="26"/></name> <operator pos:line="75" pos:column="27">==<pos:position pos:line="75" pos:column="29"/></operator> <name pos:line="75" pos:column="30">rsl_leading_space<pos:position pos:line="75" pos:column="47"/></name></expr>)<pos:position pos:line="75" pos:column="48"/></condition><then pos:line="75" pos:column="48"> <block pos:line="75" pos:column="49">{
                    <comment type="block" pos:line="76" pos:column="21">/* non-space: begin MIME type */</comment>
                    <expr_stmt><expr><name pos:line="77" pos:column="21">state<pos:position pos:line="77" pos:column="26"/></name><operator pos:line="77" pos:column="26">++<pos:position pos:line="77" pos:column="28"/></operator></expr>;<pos:position pos:line="77" pos:column="29"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="78" pos:column="21">type_frag<pos:position pos:line="78" pos:column="30"/></name> <operator pos:line="78" pos:column="31">=<pos:position pos:line="78" pos:column="32"/></operator> <name pos:line="78" pos:column="33">cur_frag<pos:position pos:line="78" pos:column="41"/></name></expr>;<pos:position pos:line="78" pos:column="42"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="79" pos:column="21">type_pos<pos:position pos:line="79" pos:column="29"/></name> <operator pos:line="79" pos:column="30">=<pos:position pos:line="79" pos:column="31"/></operator> <name pos:line="79" pos:column="32">cur_pos<pos:position pos:line="79" pos:column="39"/></name></expr>;<pos:position pos:line="79" pos:column="40"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="80" pos:column="21">type_len<pos:position pos:line="80" pos:column="29"/></name> <operator pos:line="80" pos:column="30">=<pos:position pos:line="80" pos:column="31"/></operator> <literal type="number" pos:line="80" pos:column="32">1<pos:position pos:line="80" pos:column="33"/></literal></expr>;<pos:position pos:line="80" pos:column="34"/></expr_stmt>
                    <continue pos:line="81" pos:column="21">continue;<pos:position pos:line="81" pos:column="30"/></continue>
                }<pos:position pos:line="82" pos:column="18"/></block></then>
                <elseif pos:line="83" pos:column="17">else <if pos:line="83" pos:column="22">if <condition pos:line="83" pos:column="25">(<expr><name pos:line="83" pos:column="26">state<pos:position pos:line="83" pos:column="31"/></name> <operator pos:line="83" pos:column="32">==<pos:position pos:line="83" pos:column="34"/></operator> <name pos:line="83" pos:column="35">rsl_type<pos:position pos:line="83" pos:column="43"/></name> <operator pos:line="83" pos:column="44">||<pos:position pos:line="83" pos:column="46"/></operator>
                         <name pos:line="84" pos:column="26">state<pos:position pos:line="84" pos:column="31"/></name> <operator pos:line="84" pos:column="32">==<pos:position pos:line="84" pos:column="34"/></operator> <name pos:line="84" pos:column="35">rsl_subtype<pos:position pos:line="84" pos:column="46"/></name></expr>)<pos:position pos:line="84" pos:column="47"/></condition><then pos:line="84" pos:column="47"> <block pos:line="84" pos:column="48">{
                    <comment type="block" pos:line="85" pos:column="21">/* non-space: adds to type */</comment>
                    <expr_stmt><expr><name pos:line="86" pos:column="21">type_len<pos:position pos:line="86" pos:column="29"/></name><operator pos:line="86" pos:column="29">++<pos:position pos:line="86" pos:column="31"/></operator></expr>;<pos:position pos:line="86" pos:column="32"/></expr_stmt>
                    <continue pos:line="87" pos:column="21">continue;<pos:position pos:line="87" pos:column="30"/></continue>
                }<pos:position pos:line="88" pos:column="18"/></block></then></if></elseif>
                <elseif pos:line="89" pos:column="17">else <if pos:line="89" pos:column="22">if <condition pos:line="89" pos:column="25">(<expr><name pos:line="89" pos:column="26">state<pos:position pos:line="89" pos:column="31"/></name> <operator pos:line="89" pos:column="32">==<pos:position pos:line="89" pos:column="34"/></operator> <name pos:line="89" pos:column="35">rsl_separator<pos:position pos:line="89" pos:column="48"/></name></expr>)<pos:position pos:line="89" pos:column="49"/></condition><then pos:line="89" pos:column="49"> <block pos:line="89" pos:column="50">{
                    <comment type="block" pos:line="90" pos:column="21">/* non-space: begin MIME encoding */</comment>
                    <expr_stmt><expr><name pos:line="91" pos:column="21">state<pos:position pos:line="91" pos:column="26"/></name><operator pos:line="91" pos:column="26">++<pos:position pos:line="91" pos:column="28"/></operator></expr>;<pos:position pos:line="91" pos:column="29"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="92" pos:column="21">encoding_frag<pos:position pos:line="92" pos:column="34"/></name> <operator pos:line="92" pos:column="35">=<pos:position pos:line="92" pos:column="36"/></operator> <name pos:line="92" pos:column="37">cur_frag<pos:position pos:line="92" pos:column="45"/></name></expr>;<pos:position pos:line="92" pos:column="46"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="93" pos:column="21">encoding_pos<pos:position pos:line="93" pos:column="33"/></name> <operator pos:line="93" pos:column="34">=<pos:position pos:line="93" pos:column="35"/></operator> <name pos:line="93" pos:column="36">cur_pos<pos:position pos:line="93" pos:column="43"/></name></expr>;<pos:position pos:line="93" pos:column="44"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="94" pos:column="21">encoding_len<pos:position pos:line="94" pos:column="33"/></name> <operator pos:line="94" pos:column="34">=<pos:position pos:line="94" pos:column="35"/></operator> <literal type="number" pos:line="94" pos:column="36">1<pos:position pos:line="94" pos:column="37"/></literal></expr>;<pos:position pos:line="94" pos:column="38"/></expr_stmt>
                    <continue pos:line="95" pos:column="21">continue;<pos:position pos:line="95" pos:column="30"/></continue>
                }<pos:position pos:line="96" pos:column="18"/></block></then></if></elseif>
                <elseif pos:line="97" pos:column="17">else <if pos:line="97" pos:column="22">if <condition pos:line="97" pos:column="25">(<expr><name pos:line="97" pos:column="26">state<pos:position pos:line="97" pos:column="31"/></name> <operator pos:line="97" pos:column="32">==<pos:position pos:line="97" pos:column="34"/></operator> <name pos:line="97" pos:column="35">rsl_encoding<pos:position pos:line="97" pos:column="47"/></name></expr>)<pos:position pos:line="97" pos:column="48"/></condition><then pos:line="97" pos:column="48"> <block pos:line="97" pos:column="49">{
                    <comment type="block" pos:line="98" pos:column="21">/* non-space: adds to encoding */</comment>
                    <expr_stmt><expr><name pos:line="99" pos:column="21">encoding_len<pos:position pos:line="99" pos:column="33"/></name><operator pos:line="99" pos:column="33">++<pos:position pos:line="99" pos:column="35"/></operator></expr>;<pos:position pos:line="99" pos:column="36"/></expr_stmt>
                    <continue pos:line="100" pos:column="21">continue;<pos:position pos:line="100" pos:column="30"/></continue>
                }<pos:position pos:line="101" pos:column="18"/></block></then></if></elseif>
                <else pos:line="102" pos:column="17">else <block pos:line="102" pos:column="22">{
                    <comment type="block" pos:line="103" pos:column="21">/* should not be possible */</comment>
                    <comment type="block" pos:line="104" pos:column="21">/* abandon malfunctioning module */</comment>
                    <expr_stmt><expr><call><name pos:line="105" pos:column="21">ap_log_rerror<pos:position pos:line="105" pos:column="34"/></name><argument_list pos:line="105" pos:column="34">(<argument><expr><name pos:line="105" pos:column="35">APLOG_MARK<pos:position pos:line="105" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="47">APLOG_ERR<pos:position pos:line="105" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="105" pos:column="58">0<pos:position pos:line="105" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="105" pos:column="61">r<pos:position pos:line="105" pos:column="62"/></name></expr></argument>,
                                <argument><expr><name pos:line="106" pos:column="33">MODNAME<pos:position pos:line="106" pos:column="40"/></name> <literal type="string" pos:line="106" pos:column="41">": bad state %d (ns)"<pos:position pos:line="106" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="106" pos:column="64">state<pos:position pos:line="106" pos:column="69"/></name></expr></argument>)<pos:position pos:line="106" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="71"/></expr_stmt>
                    <return pos:line="107" pos:column="21">return <expr><name pos:line="107" pos:column="28">DECLINED<pos:position pos:line="107" pos:column="36"/></name></expr>;<pos:position pos:line="107" pos:column="37"/></return>
                }<pos:position pos:line="108" pos:column="18"/></block></else></if>
                <comment type="block" pos:line="109" pos:column="17">/* NOTREACHED */</comment>
            }<pos:position pos:line="110" pos:column="14"/></block></else></if>
            <comment type="block" pos:line="111" pos:column="13">/* NOTREACHED */</comment>
        }<pos:position pos:line="112" pos:column="10"/></block></for>
    }<pos:position pos:line="113" pos:column="6"/></block></for>

    <comment type="block" pos:line="115" pos:column="5">/* if we ended prior to state rsl_subtype, we had incomplete info */</comment>
    <if pos:line="116" pos:column="5">if <condition pos:line="116" pos:column="8">(<expr><name pos:line="116" pos:column="9">state<pos:position pos:line="116" pos:column="14"/></name> <operator pos:line="116" pos:column="15">!=<pos:position pos:line="116" pos:column="17"/></operator> <name pos:line="116" pos:column="18">rsl_subtype<pos:position pos:line="116" pos:column="29"/></name> <operator pos:line="116" pos:column="30">&amp;&amp;<pos:position pos:line="116" pos:column="40"/></operator> <name pos:line="116" pos:column="33">state<pos:position pos:line="116" pos:column="38"/></name> <operator pos:line="116" pos:column="39">!=<pos:position pos:line="116" pos:column="41"/></operator> <name pos:line="116" pos:column="42">rsl_separator<pos:position pos:line="116" pos:column="55"/></name> <operator pos:line="116" pos:column="56">&amp;&amp;<pos:position pos:line="116" pos:column="66"/></operator>
        <name pos:line="117" pos:column="9">state<pos:position pos:line="117" pos:column="14"/></name> <operator pos:line="117" pos:column="15">!=<pos:position pos:line="117" pos:column="17"/></operator> <name pos:line="117" pos:column="18">rsl_encoding<pos:position pos:line="117" pos:column="30"/></name></expr>)<pos:position pos:line="117" pos:column="31"/></condition><then pos:line="117" pos:column="31"> <block pos:line="117" pos:column="32">{
        <comment type="block" pos:line="118" pos:column="9">/* defer to other modules */</comment>
        <return pos:line="119" pos:column="9">return <expr><name pos:line="119" pos:column="16">DECLINED<pos:position pos:line="119" pos:column="24"/></name></expr>;<pos:position pos:line="119" pos:column="25"/></return>
    }<pos:position pos:line="120" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="122" pos:column="5">/* save the info in the request record */</comment>
    <if pos:line="123" pos:column="5">if <condition pos:line="123" pos:column="8">(<expr><name pos:line="123" pos:column="9">state<pos:position pos:line="123" pos:column="14"/></name> <operator pos:line="123" pos:column="15">==<pos:position pos:line="123" pos:column="17"/></operator> <name pos:line="123" pos:column="18">rsl_subtype<pos:position pos:line="123" pos:column="29"/></name> <operator pos:line="123" pos:column="30">||<pos:position pos:line="123" pos:column="32"/></operator> <name pos:line="123" pos:column="33">state<pos:position pos:line="123" pos:column="38"/></name> <operator pos:line="123" pos:column="39">==<pos:position pos:line="123" pos:column="41"/></operator> <name pos:line="123" pos:column="42">rsl_encoding<pos:position pos:line="123" pos:column="54"/></name> <operator pos:line="123" pos:column="55">||<pos:position pos:line="123" pos:column="57"/></operator>
        <name pos:line="124" pos:column="9">state<pos:position pos:line="124" pos:column="14"/></name> <operator pos:line="124" pos:column="15">==<pos:position pos:line="124" pos:column="17"/></operator> <name pos:line="124" pos:column="18">rsl_encoding<pos:position pos:line="124" pos:column="30"/></name></expr>)<pos:position pos:line="124" pos:column="31"/></condition><then pos:line="124" pos:column="31"> <block pos:line="124" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="125" pos:column="9">char<pos:position pos:line="125" pos:column="13"/></name> <modifier pos:line="125" pos:column="14">*<pos:position pos:line="125" pos:column="15"/></modifier></type><name pos:line="125" pos:column="15">tmp<pos:position pos:line="125" pos:column="18"/></name></decl>;<pos:position pos:line="125" pos:column="19"/></decl_stmt>
        <expr_stmt><expr><name pos:line="126" pos:column="9">tmp<pos:position pos:line="126" pos:column="12"/></name> <operator pos:line="126" pos:column="13">=<pos:position pos:line="126" pos:column="14"/></operator> <call><name pos:line="126" pos:column="15">rsl_strdup<pos:position pos:line="126" pos:column="25"/></name><argument_list pos:line="126" pos:column="25">(<argument><expr><name pos:line="126" pos:column="26">r<pos:position pos:line="126" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="29">type_frag<pos:position pos:line="126" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="40">type_pos<pos:position pos:line="126" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="50">type_len<pos:position pos:line="126" pos:column="58"/></name></expr></argument>)<pos:position pos:line="126" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="60"/></expr_stmt>
        <comment type="block" pos:line="127" pos:column="9">/* XXX: this could be done at config time I'm sure... but I'm
         * confused by all this magic_rsl stuff. -djg */</comment>
        <expr_stmt><expr><call><name pos:line="129" pos:column="9">ap_content_type_tolower<pos:position pos:line="129" pos:column="32"/></name><argument_list pos:line="129" pos:column="32">(<argument><expr><name pos:line="129" pos:column="33">tmp<pos:position pos:line="129" pos:column="36"/></name></expr></argument>)<pos:position pos:line="129" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="130" pos:column="9">ap_set_content_type<pos:position pos:line="130" pos:column="28"/></name><argument_list pos:line="130" pos:column="28">(<argument><expr><name pos:line="130" pos:column="29">r<pos:position pos:line="130" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="32">tmp<pos:position pos:line="130" pos:column="35"/></name></expr></argument>)<pos:position pos:line="130" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="37"/></expr_stmt>
    }<pos:position pos:line="131" pos:column="6"/></block></then></if>
    <if pos:line="132" pos:column="5">if <condition pos:line="132" pos:column="8">(<expr><name pos:line="132" pos:column="9">state<pos:position pos:line="132" pos:column="14"/></name> <operator pos:line="132" pos:column="15">==<pos:position pos:line="132" pos:column="17"/></operator> <name pos:line="132" pos:column="18">rsl_encoding<pos:position pos:line="132" pos:column="30"/></name></expr>)<pos:position pos:line="132" pos:column="31"/></condition><then pos:line="132" pos:column="31"> <block pos:line="132" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="133" pos:column="9">char<pos:position pos:line="133" pos:column="13"/></name> <modifier pos:line="133" pos:column="14">*<pos:position pos:line="133" pos:column="15"/></modifier></type><name pos:line="133" pos:column="15">tmp<pos:position pos:line="133" pos:column="18"/></name></decl>;<pos:position pos:line="133" pos:column="19"/></decl_stmt>
        <expr_stmt><expr><name pos:line="134" pos:column="9">tmp<pos:position pos:line="134" pos:column="12"/></name> <operator pos:line="134" pos:column="13">=<pos:position pos:line="134" pos:column="14"/></operator> <call><name pos:line="134" pos:column="15">rsl_strdup<pos:position pos:line="134" pos:column="25"/></name><argument_list pos:line="134" pos:column="25">(<argument><expr><name pos:line="134" pos:column="26">r<pos:position pos:line="134" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="29">encoding_frag<pos:position pos:line="134" pos:column="42"/></name></expr></argument>,
                                         <argument><expr><name pos:line="135" pos:column="42">encoding_pos<pos:position pos:line="135" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="56">encoding_len<pos:position pos:line="135" pos:column="68"/></name></expr></argument>)<pos:position pos:line="135" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="70"/></expr_stmt>
        <comment type="block" pos:line="136" pos:column="9">/* XXX: this could be done at config time I'm sure... but I'm
         * confused by all this magic_rsl stuff. -djg */</comment>
        <expr_stmt><expr><call><name pos:line="138" pos:column="9">ap_str_tolower<pos:position pos:line="138" pos:column="23"/></name><argument_list pos:line="138" pos:column="23">(<argument><expr><name pos:line="138" pos:column="24">tmp<pos:position pos:line="138" pos:column="27"/></name></expr></argument>)<pos:position pos:line="138" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="139" pos:column="9">r<pos:position pos:line="139" pos:column="10"/></name><operator pos:line="139" pos:column="10">-&gt;<pos:position pos:line="139" pos:column="15"/></operator><name pos:line="139" pos:column="12">content_encoding<pos:position pos:line="139" pos:column="28"/></name></name> <operator pos:line="139" pos:column="29">=<pos:position pos:line="139" pos:column="30"/></operator> <name pos:line="139" pos:column="31">tmp<pos:position pos:line="139" pos:column="34"/></name></expr>;<pos:position pos:line="139" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="140" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="142" pos:column="5">/* detect memory allocation or other errors */</comment>
    <if pos:line="143" pos:column="5">if <condition pos:line="143" pos:column="8">(<expr><operator pos:line="143" pos:column="9">!<pos:position pos:line="143" pos:column="10"/></operator><name><name pos:line="143" pos:column="10">r<pos:position pos:line="143" pos:column="11"/></name><operator pos:line="143" pos:column="11">-&gt;<pos:position pos:line="143" pos:column="16"/></operator><name pos:line="143" pos:column="13">content_type<pos:position pos:line="143" pos:column="25"/></name></name> <operator pos:line="143" pos:column="26">||<pos:position pos:line="143" pos:column="28"/></operator>
        <operator pos:line="144" pos:column="9">(<pos:position pos:line="144" pos:column="10"/></operator><name pos:line="144" pos:column="10">state<pos:position pos:line="144" pos:column="15"/></name> <operator pos:line="144" pos:column="16">==<pos:position pos:line="144" pos:column="18"/></operator> <name pos:line="144" pos:column="19">rsl_encoding<pos:position pos:line="144" pos:column="31"/></name> <operator pos:line="144" pos:column="32">&amp;&amp;<pos:position pos:line="144" pos:column="42"/></operator> <operator pos:line="144" pos:column="35">!<pos:position pos:line="144" pos:column="36"/></operator><name><name pos:line="144" pos:column="36">r<pos:position pos:line="144" pos:column="37"/></name><operator pos:line="144" pos:column="37">-&gt;<pos:position pos:line="144" pos:column="42"/></operator><name pos:line="144" pos:column="39">content_encoding<pos:position pos:line="144" pos:column="55"/></name></name><operator pos:line="144" pos:column="55">)<pos:position pos:line="144" pos:column="56"/></operator></expr>)<pos:position pos:line="144" pos:column="57"/></condition><then pos:line="144" pos:column="57"> <block pos:line="144" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="145" pos:column="9">ap_log_rerror<pos:position pos:line="145" pos:column="22"/></name><argument_list pos:line="145" pos:column="22">(<argument><expr><name pos:line="145" pos:column="23">APLOG_MARK<pos:position pos:line="145" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="35">APLOG_ERR<pos:position pos:line="145" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="145" pos:column="46">0<pos:position pos:line="145" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="145" pos:column="49">r<pos:position pos:line="145" pos:column="50"/></name></expr></argument>,
                      <argument><expr><name pos:line="146" pos:column="23">MODNAME<pos:position pos:line="146" pos:column="30"/></name> <literal type="string" pos:line="146" pos:column="31">": unexpected state %d; could be caused by bad "<pos:position pos:line="146" pos:column="79"/></literal>
                      <literal type="string" pos:line="147" pos:column="23">"data in magic file"<pos:position pos:line="147" pos:column="43"/></literal></expr></argument>,
                      <argument><expr><name pos:line="148" pos:column="23">state<pos:position pos:line="148" pos:column="28"/></name></expr></argument>)<pos:position pos:line="148" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="30"/></expr_stmt>
        <return pos:line="149" pos:column="9">return <expr><name pos:line="149" pos:column="16">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="149" pos:column="42"/></name></expr>;<pos:position pos:line="149" pos:column="43"/></return>
    }<pos:position pos:line="150" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="152" pos:column="5">/* success! */</comment>
    <return pos:line="153" pos:column="5">return <expr><name pos:line="153" pos:column="12">OK<pos:position pos:line="153" pos:column="14"/></name></expr>;<pos:position pos:line="153" pos:column="15"/></return>
}<pos:position pos:line="154" pos:column="2"/></block></function></unit>
