<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2362_httpd-2.0.43.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_queue_push<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">apr_queue_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">queue<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">void<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">data<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">rv<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">need_signal<pos:position pos:line="4" pos:column="20"/></name><init pos:line="4" pos:column="20">=<expr><literal type="number" pos:line="4" pos:column="21">0<pos:position pos:line="4" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">queue<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">-&gt;<pos:position pos:line="5" pos:column="19"/></operator><name pos:line="5" pos:column="16">terminated<pos:position pos:line="5" pos:column="26"/></name></name></expr>)<pos:position pos:line="5" pos:column="27"/></condition><then pos:line="5" pos:column="27"> <block pos:line="5" pos:column="28">{
        <return pos:line="6" pos:column="9">return <expr><name pos:line="6" pos:column="16">APR_EOF<pos:position pos:line="6" pos:column="23"/></name></expr>;<pos:position pos:line="6" pos:column="24"/></return> <comment type="block" pos:line="6" pos:column="25">/* no more elements ever again */</comment>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="9" pos:column="5">rv<pos:position pos:line="9" pos:column="7"/></name> <operator pos:line="9" pos:column="8">=<pos:position pos:line="9" pos:column="9"/></operator> <call><name pos:line="9" pos:column="10">apr_thread_mutex_lock<pos:position pos:line="9" pos:column="31"/></name><argument_list pos:line="9" pos:column="31">(<argument><expr><name><name pos:line="9" pos:column="32">queue<pos:position pos:line="9" pos:column="37"/></name><operator pos:line="9" pos:column="37">-&gt;<pos:position pos:line="9" pos:column="42"/></operator><name pos:line="9" pos:column="39">one_big_mutex<pos:position pos:line="9" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="54"/></expr_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">rv<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">!=<pos:position pos:line="10" pos:column="14"/></operator> <name pos:line="10" pos:column="15">APR_SUCCESS<pos:position pos:line="10" pos:column="26"/></name></expr>)<pos:position pos:line="10" pos:column="27"/></condition><then pos:line="10" pos:column="27"> <block pos:line="10" pos:column="28">{
        <return pos:line="11" pos:column="9">return <expr><name pos:line="11" pos:column="16">rv<pos:position pos:line="11" pos:column="18"/></name></expr>;<pos:position pos:line="11" pos:column="19"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">apr_queue_full<pos:position pos:line="14" pos:column="23"/></name><argument_list pos:line="14" pos:column="23">(<argument><expr><name pos:line="14" pos:column="24">queue<pos:position pos:line="14" pos:column="29"/></name></expr></argument>)<pos:position pos:line="14" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="31"/></condition><then pos:line="14" pos:column="31"> <block pos:line="14" pos:column="32">{
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><operator pos:line="15" pos:column="13">!<pos:position pos:line="15" pos:column="14"/></operator><name><name pos:line="15" pos:column="14">queue<pos:position pos:line="15" pos:column="19"/></name><operator pos:line="15" pos:column="19">-&gt;<pos:position pos:line="15" pos:column="24"/></operator><name pos:line="15" pos:column="21">terminated<pos:position pos:line="15" pos:column="31"/></name></name></expr>)<pos:position pos:line="15" pos:column="32"/></condition><then pos:line="15" pos:column="32"> <block pos:line="15" pos:column="33">{
            <expr_stmt><expr><name pos:line="16" pos:column="13">rv<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">apr_thread_cond_wait<pos:position pos:line="16" pos:column="38"/></name><argument_list pos:line="16" pos:column="38">(<argument><expr><name><name pos:line="16" pos:column="39">queue<pos:position pos:line="16" pos:column="44"/></name><operator pos:line="16" pos:column="44">-&gt;<pos:position pos:line="16" pos:column="49"/></operator><name pos:line="16" pos:column="46">not_full<pos:position pos:line="16" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="16" pos:column="56">queue<pos:position pos:line="16" pos:column="61"/></name><operator pos:line="16" pos:column="61">-&gt;<pos:position pos:line="16" pos:column="66"/></operator><name pos:line="16" pos:column="63">one_big_mutex<pos:position pos:line="16" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="16" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="78"/></expr_stmt>
            <if pos:line="17" pos:column="13">if <condition pos:line="17" pos:column="16">(<expr><name pos:line="17" pos:column="17">rv<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">!=<pos:position pos:line="17" pos:column="22"/></operator> <name pos:line="17" pos:column="23">APR_SUCCESS<pos:position pos:line="17" pos:column="34"/></name></expr>)<pos:position pos:line="17" pos:column="35"/></condition><then pos:line="17" pos:column="35"> <block pos:line="17" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="18" pos:column="17">apr_thread_mutex_unlock<pos:position pos:line="18" pos:column="40"/></name><argument_list pos:line="18" pos:column="40">(<argument><expr><name><name pos:line="18" pos:column="41">queue<pos:position pos:line="18" pos:column="46"/></name><operator pos:line="18" pos:column="46">-&gt;<pos:position pos:line="18" pos:column="51"/></operator><name pos:line="18" pos:column="48">one_big_mutex<pos:position pos:line="18" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="63"/></expr_stmt>
                <return pos:line="19" pos:column="17">return <expr><name pos:line="19" pos:column="24">rv<pos:position pos:line="19" pos:column="26"/></name></expr>;<pos:position pos:line="19" pos:column="27"/></return>
            }<pos:position pos:line="20" pos:column="14"/></block></then></if>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="22" pos:column="9">/* If we wake up and it's still empty, then we were interrupted */</comment>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><call><name pos:line="23" pos:column="13">apr_queue_full<pos:position pos:line="23" pos:column="27"/></name><argument_list pos:line="23" pos:column="27">(<argument><expr><name pos:line="23" pos:column="28">queue<pos:position pos:line="23" pos:column="33"/></name></expr></argument>)<pos:position pos:line="23" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="23" pos:column="35"/></condition><then pos:line="23" pos:column="35"> <block pos:line="23" pos:column="36">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">Q_DBG<pos:position pos:line="24" pos:column="18"/></name><argument_list pos:line="24" pos:column="18">( <argument><expr><literal type="string" pos:line="24" pos:column="20">"queue full (intr)"<pos:position pos:line="24" pos:column="39"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="41">queue<pos:position pos:line="24" pos:column="46"/></name></expr></argument>)<pos:position pos:line="24" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><name pos:line="25" pos:column="13">rv<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <call><name pos:line="25" pos:column="18">apr_thread_mutex_unlock<pos:position pos:line="25" pos:column="41"/></name><argument_list pos:line="25" pos:column="41">(<argument><expr><name><name pos:line="25" pos:column="42">queue<pos:position pos:line="25" pos:column="47"/></name><operator pos:line="25" pos:column="47">-&gt;<pos:position pos:line="25" pos:column="52"/></operator><name pos:line="25" pos:column="49">one_big_mutex<pos:position pos:line="25" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="64"/></expr_stmt>
            <if pos:line="26" pos:column="13">if <condition pos:line="26" pos:column="16">(<expr><name pos:line="26" pos:column="17">rv<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">!=<pos:position pos:line="26" pos:column="22"/></operator> <name pos:line="26" pos:column="23">APR_SUCCESS<pos:position pos:line="26" pos:column="34"/></name></expr>)<pos:position pos:line="26" pos:column="35"/></condition><then pos:line="26" pos:column="35"> <block pos:line="26" pos:column="36">{
                <return pos:line="27" pos:column="17">return <expr><name pos:line="27" pos:column="24">rv<pos:position pos:line="27" pos:column="26"/></name></expr>;<pos:position pos:line="27" pos:column="27"/></return>
            }<pos:position pos:line="28" pos:column="14"/></block></then></if>
            <if pos:line="29" pos:column="13">if <condition pos:line="29" pos:column="16">(<expr><name><name pos:line="29" pos:column="17">queue<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">-&gt;<pos:position pos:line="29" pos:column="27"/></operator><name pos:line="29" pos:column="24">terminated<pos:position pos:line="29" pos:column="34"/></name></name></expr>)<pos:position pos:line="29" pos:column="35"/></condition><then pos:line="29" pos:column="35"> <block pos:line="29" pos:column="36">{
                <return pos:line="30" pos:column="17">return <expr><name pos:line="30" pos:column="24">APR_EOF<pos:position pos:line="30" pos:column="31"/></name></expr>;<pos:position pos:line="30" pos:column="32"/></return> <comment type="block" pos:line="30" pos:column="33">/* no more elements ever again */</comment>
            }<pos:position pos:line="31" pos:column="14"/></block></then>
            <else pos:line="32" pos:column="13">else <block pos:line="32" pos:column="18">{
                <return pos:line="33" pos:column="17">return <expr><name pos:line="33" pos:column="24">APR_EINTR<pos:position pos:line="33" pos:column="33"/></name></expr>;<pos:position pos:line="33" pos:column="34"/></return>
            }<pos:position pos:line="34" pos:column="14"/></block></else></if>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="38" pos:column="5">/* if we were empty then signal that we aren't */</comment>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><call><name pos:line="39" pos:column="9">apr_queue_empty<pos:position pos:line="39" pos:column="24"/></name><argument_list pos:line="39" pos:column="24">(<argument><expr><name pos:line="39" pos:column="25">queue<pos:position pos:line="39" pos:column="30"/></name></expr></argument>)<pos:position pos:line="39" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="32"/></condition><then pos:line="39" pos:column="32"> <block pos:line="39" pos:column="33">{
        <expr_stmt><expr><name pos:line="40" pos:column="9">need_signal<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">=<pos:position pos:line="40" pos:column="21"/></operator><literal type="number" pos:line="40" pos:column="21">1<pos:position pos:line="40" pos:column="22"/></literal></expr>;<pos:position pos:line="40" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="43" pos:column="5">queue<pos:position pos:line="43" pos:column="10"/></name><operator pos:line="43" pos:column="10">-&gt;<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="12">data<pos:position pos:line="43" pos:column="16"/></name><index pos:line="43" pos:column="16">[<expr><name><name pos:line="43" pos:column="17">queue<pos:position pos:line="43" pos:column="22"/></name><operator pos:line="43" pos:column="22">-&gt;<pos:position pos:line="43" pos:column="27"/></operator><name pos:line="43" pos:column="24">in<pos:position pos:line="43" pos:column="26"/></name></name></expr>]<pos:position pos:line="43" pos:column="27"/></index></name> <operator pos:line="43" pos:column="28">=<pos:position pos:line="43" pos:column="29"/></operator> <name pos:line="43" pos:column="30">data<pos:position pos:line="43" pos:column="34"/></name></expr>;<pos:position pos:line="43" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="44" pos:column="5">queue<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">-&gt;<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="12">in<pos:position pos:line="44" pos:column="14"/></name></name> <operator pos:line="44" pos:column="15">=<pos:position pos:line="44" pos:column="16"/></operator> <operator pos:line="44" pos:column="17">(<pos:position pos:line="44" pos:column="18"/></operator><name><name pos:line="44" pos:column="18">queue<pos:position pos:line="44" pos:column="23"/></name><operator pos:line="44" pos:column="23">-&gt;<pos:position pos:line="44" pos:column="28"/></operator><name pos:line="44" pos:column="25">in<pos:position pos:line="44" pos:column="27"/></name></name> <operator pos:line="44" pos:column="28">+<pos:position pos:line="44" pos:column="29"/></operator><literal type="number" pos:line="44" pos:column="29">1<pos:position pos:line="44" pos:column="30"/></literal><operator pos:line="44" pos:column="30">)<pos:position pos:line="44" pos:column="31"/></operator> <operator pos:line="44" pos:column="32">%<pos:position pos:line="44" pos:column="33"/></operator> <name><name pos:line="44" pos:column="34">queue<pos:position pos:line="44" pos:column="39"/></name><operator pos:line="44" pos:column="39">-&gt;<pos:position pos:line="44" pos:column="44"/></operator><name pos:line="44" pos:column="41">bounds<pos:position pos:line="44" pos:column="47"/></name></name></expr> ;<pos:position pos:line="44" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="45" pos:column="5">queue<pos:position pos:line="45" pos:column="10"/></name><operator pos:line="45" pos:column="10">-&gt;<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="12">nelts<pos:position pos:line="45" pos:column="17"/></name></name><operator pos:line="45" pos:column="17">++<pos:position pos:line="45" pos:column="19"/></operator></expr>;<pos:position pos:line="45" pos:column="20"/></expr_stmt>

    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">( <expr><name pos:line="47" pos:column="10">need_signal<pos:position pos:line="47" pos:column="21"/></name> <operator pos:line="47" pos:column="22">==<pos:position pos:line="47" pos:column="24"/></operator> <literal type="number" pos:line="47" pos:column="25">1<pos:position pos:line="47" pos:column="26"/></literal></expr> )<pos:position pos:line="47" pos:column="28"/></condition><then pos:line="47" pos:column="28"> <block pos:line="47" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">Q_DBG<pos:position pos:line="48" pos:column="14"/></name><argument_list pos:line="48" pos:column="14">( <argument><expr><literal type="string" pos:line="48" pos:column="16">"sig !empty"<pos:position pos:line="48" pos:column="28"/></literal></expr></argument>, <argument><expr><name pos:line="48" pos:column="30">queue<pos:position pos:line="48" pos:column="35"/></name></expr></argument>)<pos:position pos:line="48" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="49" pos:column="9">rv<pos:position pos:line="49" pos:column="11"/></name>  <operator pos:line="49" pos:column="13">=<pos:position pos:line="49" pos:column="14"/></operator> <call><name pos:line="49" pos:column="15">apr_thread_cond_signal<pos:position pos:line="49" pos:column="37"/></name><argument_list pos:line="49" pos:column="37">(<argument><expr><name><name pos:line="49" pos:column="38">queue<pos:position pos:line="49" pos:column="43"/></name><operator pos:line="49" pos:column="43">-&gt;<pos:position pos:line="49" pos:column="48"/></operator><name pos:line="49" pos:column="45">not_empty<pos:position pos:line="49" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="56"/></expr_stmt>
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">( <expr><name pos:line="50" pos:column="14">rv<pos:position pos:line="50" pos:column="16"/></name> <operator pos:line="50" pos:column="17">!=<pos:position pos:line="50" pos:column="19"/></operator> <name pos:line="50" pos:column="20">APR_SUCCESS<pos:position pos:line="50" pos:column="31"/></name></expr>)<pos:position pos:line="50" pos:column="32"/></condition><then pos:line="50" pos:column="32"> <block pos:line="50" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="51" pos:column="36"/></name><argument_list pos:line="51" pos:column="36">(<argument><expr><name><name pos:line="51" pos:column="37">queue<pos:position pos:line="51" pos:column="42"/></name><operator pos:line="51" pos:column="42">-&gt;<pos:position pos:line="51" pos:column="47"/></operator><name pos:line="51" pos:column="44">one_big_mutex<pos:position pos:line="51" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="59"/></expr_stmt>
            <return pos:line="52" pos:column="13">return <expr><name pos:line="52" pos:column="20">rv<pos:position pos:line="52" pos:column="22"/></name></expr>;<pos:position pos:line="52" pos:column="23"/></return>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="56" pos:column="5">rv<pos:position pos:line="56" pos:column="7"/></name> <operator pos:line="56" pos:column="8">=<pos:position pos:line="56" pos:column="9"/></operator> <call><name pos:line="56" pos:column="10">apr_thread_mutex_unlock<pos:position pos:line="56" pos:column="33"/></name><argument_list pos:line="56" pos:column="33">(<argument><expr><name><name pos:line="56" pos:column="34">queue<pos:position pos:line="56" pos:column="39"/></name><operator pos:line="56" pos:column="39">-&gt;<pos:position pos:line="56" pos:column="44"/></operator><name pos:line="56" pos:column="41">one_big_mutex<pos:position pos:line="56" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="56"/></expr_stmt>
    <return pos:line="57" pos:column="5">return <expr><name pos:line="57" pos:column="12">rv<pos:position pos:line="57" pos:column="14"/></name></expr>;<pos:position pos:line="57" pos:column="15"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
