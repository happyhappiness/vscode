<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_22_httpd-2.4.7.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">main<pos:position pos:line="1" pos:column="10"/></name> <parameter_list pos:line="1" pos:column="11">(<parameter><decl><type><name pos:line="1" pos:column="12">int<pos:position pos:line="1" pos:column="15"/></name></type> <name pos:line="1" pos:column="16">argc<pos:position pos:line="1" pos:column="20"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier><modifier pos:line="1" pos:column="28">*<pos:position pos:line="1" pos:column="29"/></modifier></type><name pos:line="1" pos:column="29">argv<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="34"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">num_iter<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">num_child<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">i<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">timeval<pos:position pos:line="6" pos:column="19"/></name></name></type> <name pos:line="6" pos:column="20">first<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">timeval<pos:position pos:line="7" pos:column="19"/></name></name></type> <name pos:line="7" pos:column="20">last<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">long<pos:position pos:line="8" pos:column="9"/></name></type> <name pos:line="8" pos:column="10">ms<pos:position pos:line="8" pos:column="12"/></name></decl>;<pos:position pos:line="8" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">pid<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">unsigned<pos:position pos:line="10" pos:column="13"/></name> <name pos:line="10" pos:column="14">long<pos:position pos:line="10" pos:column="18"/></name> <modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type><name pos:line="10" pos:column="20">shared_counter<pos:position pos:line="10" pos:column="34"/></name></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">argc<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">!=<pos:position pos:line="12" pos:column="16"/></operator> <literal type="number" pos:line="12" pos:column="17">3<pos:position pos:line="12" pos:column="18"/></literal></expr>)<pos:position pos:line="12" pos:column="19"/></condition><then pos:line="12" pos:column="19"> <block pos:line="12" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">fprintf<pos:position pos:line="13" pos:column="16"/></name> <argument_list pos:line="13" pos:column="17">(<argument><expr><name pos:line="13" pos:column="18">stderr<pos:position pos:line="13" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="26">"Usage: time-sem num-child num iter\n"<pos:position pos:line="13" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">exit<pos:position pos:line="14" pos:column="13"/></name> <argument_list pos:line="14" pos:column="14">(<argument><expr><literal type="number" pos:line="14" pos:column="15">1<pos:position pos:line="14" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="17" pos:column="5">num_child<pos:position pos:line="17" pos:column="14"/></name> <operator pos:line="17" pos:column="15">=<pos:position pos:line="17" pos:column="16"/></operator> <call><name pos:line="17" pos:column="17">atoi<pos:position pos:line="17" pos:column="21"/></name> <argument_list pos:line="17" pos:column="22">(<argument><expr><name><name pos:line="17" pos:column="23">argv<pos:position pos:line="17" pos:column="27"/></name><index pos:line="17" pos:column="27">[<expr><literal type="number" pos:line="17" pos:column="28">1<pos:position pos:line="17" pos:column="29"/></literal></expr>]<pos:position pos:line="17" pos:column="30"/></index></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">num_iter<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <call><name pos:line="18" pos:column="16">atoi<pos:position pos:line="18" pos:column="20"/></name> <argument_list pos:line="18" pos:column="21">(<argument><expr><name><name pos:line="18" pos:column="22">argv<pos:position pos:line="18" pos:column="26"/></name><index pos:line="18" pos:column="26">[<expr><literal type="number" pos:line="18" pos:column="27">2<pos:position pos:line="18" pos:column="28"/></literal></expr>]<pos:position pos:line="18" pos:column="29"/></index></name></expr></argument>)<pos:position pos:line="18" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* allocate shared memory for the shared_counter */</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">shared_counter<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name pos:line="21" pos:column="22">get_shared_mem<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><sizeof pos:line="21" pos:column="37">sizeof<argument_list pos:line="21" pos:column="43">(<argument><expr><operator pos:line="21" pos:column="44">*<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="45">shared_counter<pos:position pos:line="21" pos:column="59"/></name></expr></argument>)<pos:position pos:line="21" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="62"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* initialize counter to 0 */</comment>
    <expr_stmt><expr><operator pos:line="24" pos:column="5">*<pos:position pos:line="24" pos:column="6"/></operator><name pos:line="24" pos:column="6">shared_counter<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">=<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="23">0<pos:position pos:line="24" pos:column="24"/></literal></expr>;<pos:position pos:line="24" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">accept_mutex_init<pos:position pos:line="26" pos:column="22"/></name> <argument_list pos:line="26" pos:column="23">()<pos:position pos:line="26" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="28" pos:column="5">/* parent grabs mutex until done spawning children */</comment>
    <expr_stmt><expr><call><name pos:line="29" pos:column="5">accept_mutex_on<pos:position pos:line="29" pos:column="20"/></name> <argument_list pos:line="29" pos:column="21">()<pos:position pos:line="29" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="24"/></expr_stmt>

    <for pos:line="31" pos:column="5">for <control pos:line="31" pos:column="9">(<init><expr><name pos:line="31" pos:column="10">i<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <literal type="number" pos:line="31" pos:column="14">0<pos:position pos:line="31" pos:column="15"/></literal></expr>;<pos:position pos:line="31" pos:column="16"/></init> <condition><expr><name pos:line="31" pos:column="17">i<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">&lt;<pos:position pos:line="31" pos:column="23"/></operator> <name pos:line="31" pos:column="21">num_child<pos:position pos:line="31" pos:column="30"/></name></expr>;<pos:position pos:line="31" pos:column="31"/></condition> <incr><expr><operator pos:line="31" pos:column="32">++<pos:position pos:line="31" pos:column="34"/></operator><name pos:line="31" pos:column="34">i<pos:position pos:line="31" pos:column="35"/></name></expr></incr>)<pos:position pos:line="31" pos:column="36"/></control> <block pos:line="31" pos:column="37">{
        <expr_stmt><expr><name pos:line="32" pos:column="9">pid<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <call><name pos:line="32" pos:column="15">fork<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">()<pos:position pos:line="32" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="22"/></expr_stmt>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><name pos:line="33" pos:column="13">pid<pos:position pos:line="33" pos:column="16"/></name> <operator pos:line="33" pos:column="17">==<pos:position pos:line="33" pos:column="19"/></operator> <literal type="number" pos:line="33" pos:column="20">0<pos:position pos:line="33" pos:column="21"/></literal></expr>)<pos:position pos:line="33" pos:column="22"/></condition><then pos:line="33" pos:column="22"> <block pos:line="33" pos:column="23">{
            <comment type="block" pos:line="34" pos:column="13">/* child, do our thing */</comment>
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">accept_mutex_child_init<pos:position pos:line="35" pos:column="36"/></name><argument_list pos:line="35" pos:column="36">()<pos:position pos:line="35" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="39"/></expr_stmt>
            <for pos:line="36" pos:column="13">for <control pos:line="36" pos:column="17">(<init><expr><name pos:line="36" pos:column="18">i<pos:position pos:line="36" pos:column="19"/></name> <operator pos:line="36" pos:column="20">=<pos:position pos:line="36" pos:column="21"/></operator> <literal type="number" pos:line="36" pos:column="22">0<pos:position pos:line="36" pos:column="23"/></literal></expr>;<pos:position pos:line="36" pos:column="24"/></init> <condition><expr><name pos:line="36" pos:column="25">i<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">&lt;<pos:position pos:line="36" pos:column="31"/></operator> <name pos:line="36" pos:column="29">num_iter<pos:position pos:line="36" pos:column="37"/></name></expr>;<pos:position pos:line="36" pos:column="38"/></condition> <incr><expr><operator pos:line="36" pos:column="39">++<pos:position pos:line="36" pos:column="41"/></operator><name pos:line="36" pos:column="41">i<pos:position pos:line="36" pos:column="42"/></name></expr></incr>)<pos:position pos:line="36" pos:column="43"/></control> <block pos:line="36" pos:column="44">{
                <decl_stmt><decl><type><name pos:line="37" pos:column="17">unsigned<pos:position pos:line="37" pos:column="25"/></name> <name pos:line="37" pos:column="26">long<pos:position pos:line="37" pos:column="30"/></name></type> <name pos:line="37" pos:column="31">tmp<pos:position pos:line="37" pos:column="34"/></name></decl>;<pos:position pos:line="37" pos:column="35"/></decl_stmt>

                <expr_stmt><expr><call><name pos:line="39" pos:column="17">accept_mutex_on<pos:position pos:line="39" pos:column="32"/></name> <argument_list pos:line="39" pos:column="33">()<pos:position pos:line="39" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><name pos:line="40" pos:column="17">tmp<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">=<pos:position pos:line="40" pos:column="22"/></operator> <operator pos:line="40" pos:column="23">*<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="24">shared_counter<pos:position pos:line="40" pos:column="38"/></name></expr>;<pos:position pos:line="40" pos:column="39"/></expr_stmt>
                <expr_stmt><expr><name pos:line="41" pos:column="17">YIELD<pos:position pos:line="41" pos:column="22"/></name></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="42" pos:column="17">*<pos:position pos:line="42" pos:column="18"/></operator><name pos:line="42" pos:column="18">shared_counter<pos:position pos:line="42" pos:column="32"/></name> <operator pos:line="42" pos:column="33">=<pos:position pos:line="42" pos:column="34"/></operator> <name pos:line="42" pos:column="35">tmp<pos:position pos:line="42" pos:column="38"/></name> <operator pos:line="42" pos:column="39">+<pos:position pos:line="42" pos:column="40"/></operator> <literal type="number" pos:line="42" pos:column="41">1<pos:position pos:line="42" pos:column="42"/></literal></expr>;<pos:position pos:line="42" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="43" pos:column="17">accept_mutex_off<pos:position pos:line="43" pos:column="33"/></name> <argument_list pos:line="43" pos:column="34">()<pos:position pos:line="43" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="44" pos:column="14"/></block></for>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">exit<pos:position pos:line="45" pos:column="17"/></name> <argument_list pos:line="45" pos:column="18">(<argument><expr><literal type="number" pos:line="45" pos:column="19">0<pos:position pos:line="45" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="46" pos:column="10"/></block></then> <elseif pos:line="46" pos:column="11">else <if pos:line="46" pos:column="16">if <condition pos:line="46" pos:column="19">(<expr><name pos:line="46" pos:column="20">pid<pos:position pos:line="46" pos:column="23"/></name> <operator pos:line="46" pos:column="24">==<pos:position pos:line="46" pos:column="26"/></operator> <operator pos:line="46" pos:column="27">-<pos:position pos:line="46" pos:column="28"/></operator><literal type="number" pos:line="46" pos:column="28">1<pos:position pos:line="46" pos:column="29"/></literal></expr>)<pos:position pos:line="46" pos:column="30"/></condition><then pos:line="46" pos:column="30"> <block pos:line="46" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">perror<pos:position pos:line="47" pos:column="19"/></name> <argument_list pos:line="47" pos:column="20">(<argument><expr><literal type="string" pos:line="47" pos:column="21">"fork"<pos:position pos:line="47" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="48" pos:column="13">exit<pos:position pos:line="48" pos:column="17"/></name> <argument_list pos:line="48" pos:column="18">(<argument><expr><literal type="number" pos:line="48" pos:column="19">1<pos:position pos:line="48" pos:column="20"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if></elseif></if>
    }<pos:position pos:line="50" pos:column="6"/></block></for>

    <comment type="block" pos:line="52" pos:column="5">/* a quick test to see that nothing is screwed up */</comment>
    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><operator pos:line="53" pos:column="9">*<pos:position pos:line="53" pos:column="10"/></operator><name pos:line="53" pos:column="10">shared_counter<pos:position pos:line="53" pos:column="24"/></name> <operator pos:line="53" pos:column="25">!=<pos:position pos:line="53" pos:column="27"/></operator> <literal type="number" pos:line="53" pos:column="28">0<pos:position pos:line="53" pos:column="29"/></literal></expr>)<pos:position pos:line="53" pos:column="30"/></condition><then pos:line="53" pos:column="30"> <block pos:line="53" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="54" pos:column="9">puts<pos:position pos:line="54" pos:column="13"/></name> <argument_list pos:line="54" pos:column="14">(<argument><expr><literal type="string" pos:line="54" pos:column="15">"WTF! shared_counter != 0 before the children have been started!"<pos:position pos:line="54" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="82"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="55" pos:column="9">exit<pos:position pos:line="55" pos:column="13"/></name> <argument_list pos:line="55" pos:column="14">(<argument><expr><literal type="number" pos:line="55" pos:column="15">1<pos:position pos:line="55" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="58" pos:column="5">gettimeofday<pos:position pos:line="58" pos:column="17"/></name> <argument_list pos:line="58" pos:column="18">(<argument><expr><operator pos:line="58" pos:column="19">&amp;<pos:position pos:line="58" pos:column="24"/></operator><name pos:line="58" pos:column="20">first<pos:position pos:line="58" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="27">NULL<pos:position pos:line="58" pos:column="31"/></name></expr></argument>)<pos:position pos:line="58" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="33"/></expr_stmt>
    <comment type="block" pos:line="59" pos:column="5">/* launch children into action */</comment>
    <expr_stmt><expr><call><name pos:line="60" pos:column="5">accept_mutex_off<pos:position pos:line="60" pos:column="21"/></name> <argument_list pos:line="60" pos:column="22">()<pos:position pos:line="60" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="25"/></expr_stmt>
    <for pos:line="61" pos:column="5">for <control pos:line="61" pos:column="9">(<init><expr><name pos:line="61" pos:column="10">i<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <literal type="number" pos:line="61" pos:column="14">0<pos:position pos:line="61" pos:column="15"/></literal></expr>;<pos:position pos:line="61" pos:column="16"/></init> <condition><expr><name pos:line="61" pos:column="17">i<pos:position pos:line="61" pos:column="18"/></name> <operator pos:line="61" pos:column="19">&lt;<pos:position pos:line="61" pos:column="23"/></operator> <name pos:line="61" pos:column="21">num_child<pos:position pos:line="61" pos:column="30"/></name></expr>;<pos:position pos:line="61" pos:column="31"/></condition> <incr><expr><operator pos:line="61" pos:column="32">++<pos:position pos:line="61" pos:column="34"/></operator><name pos:line="61" pos:column="34">i<pos:position pos:line="61" pos:column="35"/></name></expr></incr>)<pos:position pos:line="61" pos:column="36"/></control> <block pos:line="61" pos:column="37">{
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><call><name pos:line="62" pos:column="13">wait<pos:position pos:line="62" pos:column="17"/></name><argument_list pos:line="62" pos:column="17">(<argument><expr><name pos:line="62" pos:column="18">NULL<pos:position pos:line="62" pos:column="22"/></name></expr></argument>)<pos:position pos:line="62" pos:column="23"/></argument_list></call> <operator pos:line="62" pos:column="24">==<pos:position pos:line="62" pos:column="26"/></operator> <operator pos:line="62" pos:column="27">-<pos:position pos:line="62" pos:column="28"/></operator><literal type="number" pos:line="62" pos:column="28">1<pos:position pos:line="62" pos:column="29"/></literal></expr>)<pos:position pos:line="62" pos:column="30"/></condition><then pos:line="62" pos:column="30"> <block pos:line="62" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="63" pos:column="13">perror<pos:position pos:line="63" pos:column="19"/></name> <argument_list pos:line="63" pos:column="20">(<argument><expr><literal type="string" pos:line="63" pos:column="21">"wait"<pos:position pos:line="63" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>
    }<pos:position pos:line="65" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">gettimeofday<pos:position pos:line="66" pos:column="17"/></name> <argument_list pos:line="66" pos:column="18">(<argument><expr><operator pos:line="66" pos:column="19">&amp;<pos:position pos:line="66" pos:column="24"/></operator><name pos:line="66" pos:column="20">last<pos:position pos:line="66" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="26">NULL<pos:position pos:line="66" pos:column="30"/></name></expr></argument>)<pos:position pos:line="66" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="32"/></expr_stmt>

    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><operator pos:line="68" pos:column="9">*<pos:position pos:line="68" pos:column="10"/></operator><name pos:line="68" pos:column="10">shared_counter<pos:position pos:line="68" pos:column="24"/></name> <operator pos:line="68" pos:column="25">!=<pos:position pos:line="68" pos:column="27"/></operator> <name pos:line="68" pos:column="28">num_child<pos:position pos:line="68" pos:column="37"/></name> <operator pos:line="68" pos:column="38">*<pos:position pos:line="68" pos:column="39"/></operator> <name pos:line="68" pos:column="40">num_iter<pos:position pos:line="68" pos:column="48"/></name></expr>)<pos:position pos:line="68" pos:column="49"/></condition><then pos:line="68" pos:column="49"> <block pos:line="68" pos:column="50">{
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">printf<pos:position pos:line="69" pos:column="15"/></name> <argument_list pos:line="69" pos:column="16">(<argument><expr><literal type="string" pos:line="69" pos:column="17">"WTF! shared_counter != num_child * num_iter!\n"<pos:position pos:line="69" pos:column="65"/></literal>
                <literal type="string" pos:line="70" pos:column="17">"shared_counter = %lu\nnum_child = %d\nnum_iter=%d\n"<pos:position pos:line="70" pos:column="70"/></literal></expr></argument>,
                <argument><expr><operator pos:line="71" pos:column="17">*<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">shared_counter<pos:position pos:line="71" pos:column="32"/></name></expr></argument>,
                <argument><expr><name pos:line="72" pos:column="17">num_child<pos:position pos:line="72" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="28">num_iter<pos:position pos:line="72" pos:column="36"/></name></expr></argument>)<pos:position pos:line="72" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="73" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="75" pos:column="5">last<pos:position pos:line="75" pos:column="9"/></name><operator pos:line="75" pos:column="9">.<pos:position pos:line="75" pos:column="10"/></operator><name pos:line="75" pos:column="10">tv_sec<pos:position pos:line="75" pos:column="16"/></name></name> <operator pos:line="75" pos:column="17">-=<pos:position pos:line="75" pos:column="19"/></operator> <name><name pos:line="75" pos:column="20">first<pos:position pos:line="75" pos:column="25"/></name><operator pos:line="75" pos:column="25">.<pos:position pos:line="75" pos:column="26"/></operator><name pos:line="75" pos:column="26">tv_sec<pos:position pos:line="75" pos:column="32"/></name></name></expr>;<pos:position pos:line="75" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name pos:line="76" pos:column="5">ms<pos:position pos:line="76" pos:column="7"/></name> <operator pos:line="76" pos:column="8">=<pos:position pos:line="76" pos:column="9"/></operator> <name><name pos:line="76" pos:column="10">last<pos:position pos:line="76" pos:column="14"/></name><operator pos:line="76" pos:column="14">.<pos:position pos:line="76" pos:column="15"/></operator><name pos:line="76" pos:column="15">tv_usec<pos:position pos:line="76" pos:column="22"/></name></name> <operator pos:line="76" pos:column="23">-<pos:position pos:line="76" pos:column="24"/></operator> <name><name pos:line="76" pos:column="25">first<pos:position pos:line="76" pos:column="30"/></name><operator pos:line="76" pos:column="30">.<pos:position pos:line="76" pos:column="31"/></operator><name pos:line="76" pos:column="31">tv_usec<pos:position pos:line="76" pos:column="38"/></name></name></expr>;<pos:position pos:line="76" pos:column="39"/></expr_stmt>
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><name pos:line="77" pos:column="9">ms<pos:position pos:line="77" pos:column="11"/></name> <operator pos:line="77" pos:column="12">&lt;<pos:position pos:line="77" pos:column="16"/></operator> <literal type="number" pos:line="77" pos:column="14">0<pos:position pos:line="77" pos:column="15"/></literal></expr>)<pos:position pos:line="77" pos:column="16"/></condition><then pos:line="77" pos:column="16"> <block pos:line="77" pos:column="17">{
        <expr_stmt><expr><operator pos:line="78" pos:column="9">--<pos:position pos:line="78" pos:column="11"/></operator><name><name pos:line="78" pos:column="11">last<pos:position pos:line="78" pos:column="15"/></name><operator pos:line="78" pos:column="15">.<pos:position pos:line="78" pos:column="16"/></operator><name pos:line="78" pos:column="16">tv_sec<pos:position pos:line="78" pos:column="22"/></name></name></expr>;<pos:position pos:line="78" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="79" pos:column="9">ms<pos:position pos:line="79" pos:column="11"/></name> <operator pos:line="79" pos:column="12">+=<pos:position pos:line="79" pos:column="14"/></operator> <literal type="number" pos:line="79" pos:column="15">1000000<pos:position pos:line="79" pos:column="22"/></literal></expr>;<pos:position pos:line="79" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="81" pos:column="5">last<pos:position pos:line="81" pos:column="9"/></name><operator pos:line="81" pos:column="9">.<pos:position pos:line="81" pos:column="10"/></operator><name pos:line="81" pos:column="10">tv_usec<pos:position pos:line="81" pos:column="17"/></name></name> <operator pos:line="81" pos:column="18">=<pos:position pos:line="81" pos:column="19"/></operator> <name pos:line="81" pos:column="20">ms<pos:position pos:line="81" pos:column="22"/></name></expr>;<pos:position pos:line="81" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="82" pos:column="5">printf<pos:position pos:line="82" pos:column="11"/></name> <argument_list pos:line="82" pos:column="12">(<argument><expr><literal type="string" pos:line="82" pos:column="13">"%8lu.%06lu\n"<pos:position pos:line="82" pos:column="27"/></literal></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="29">last<pos:position pos:line="82" pos:column="33"/></name><operator pos:line="82" pos:column="33">.<pos:position pos:line="82" pos:column="34"/></operator><name pos:line="82" pos:column="34">tv_sec<pos:position pos:line="82" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="42">last<pos:position pos:line="82" pos:column="46"/></name><operator pos:line="82" pos:column="46">.<pos:position pos:line="82" pos:column="47"/></operator><name pos:line="82" pos:column="47">tv_usec<pos:position pos:line="82" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="82" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="56"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="84" pos:column="5">accept_mutex_cleanup<pos:position pos:line="84" pos:column="25"/></name><argument_list pos:line="84" pos:column="25">()<pos:position pos:line="84" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">exit<pos:position pos:line="86" pos:column="9"/></name><argument_list pos:line="86" pos:column="9">(<argument><expr><literal type="number" pos:line="86" pos:column="10">0<pos:position pos:line="86" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="13"/></expr_stmt>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
