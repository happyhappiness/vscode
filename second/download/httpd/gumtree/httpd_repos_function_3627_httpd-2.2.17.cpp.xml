<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3627_httpd-2.2.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">create_socket_pipe<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">SOCKET<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">rd<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">SOCKET<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">wr<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><specifier pos:line="3" pos:column="5">static<pos:position pos:line="3" pos:column="11"/></specifier> <type><name pos:line="3" pos:column="12">int<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">id<pos:position pos:line="3" pos:column="18"/></name> <init pos:line="3" pos:column="19">= <expr><literal type="number" pos:line="3" pos:column="21">0<pos:position pos:line="3" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="5" pos:column="5">SOCKET<pos:position pos:line="5" pos:column="11"/></name></type> <name pos:line="5" pos:column="12">ls<pos:position pos:line="5" pos:column="14"/></name></decl>;<pos:position pos:line="5" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">sockaddr_in<pos:position pos:line="6" pos:column="23"/></name></name></type> <name pos:line="6" pos:column="24">pa<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="7" pos:column="5">struct<pos:position pos:line="7" pos:column="11"/></name> <name pos:line="7" pos:column="12">sockaddr_in<pos:position pos:line="7" pos:column="23"/></name></name></type> <name pos:line="7" pos:column="24">la<pos:position pos:line="7" pos:column="26"/></name></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">sockaddr_in<pos:position pos:line="8" pos:column="23"/></name></name></type> <name pos:line="8" pos:column="24">ca<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">nrd<pos:position pos:line="9" pos:column="12"/></name></decl>;<pos:position pos:line="9" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_status_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">rv<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><name pos:line="10" pos:column="23">APR_SUCCESS<pos:position pos:line="10" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">ll<pos:position pos:line="11" pos:column="11"/></name> <init pos:line="11" pos:column="12">= <expr><sizeof pos:line="11" pos:column="14">sizeof<argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">la<pos:position pos:line="11" pos:column="23"/></name></expr></argument>)<pos:position pos:line="11" pos:column="24"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="11" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">lc<pos:position pos:line="12" pos:column="11"/></name> <init pos:line="12" pos:column="12">= <expr><sizeof pos:line="12" pos:column="14">sizeof<argument_list pos:line="12" pos:column="20">(<argument><expr><name pos:line="12" pos:column="21">ca<pos:position pos:line="12" pos:column="23"/></name></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">bm<pos:position pos:line="13" pos:column="11"/></name> <init pos:line="13" pos:column="12">= <expr><literal type="number" pos:line="13" pos:column="14">1<pos:position pos:line="13" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">int<pos:position pos:line="14" pos:column="8"/></name></type> <name><name pos:line="14" pos:column="9">uid<pos:position pos:line="14" pos:column="12"/></name><index pos:line="14" pos:column="12">[<expr><literal type="number" pos:line="14" pos:column="13">2<pos:position pos:line="14" pos:column="14"/></literal></expr>]<pos:position pos:line="14" pos:column="15"/></index></name></decl>;<pos:position pos:line="14" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name><name pos:line="15" pos:column="9">iid<pos:position pos:line="15" pos:column="12"/></name><index pos:line="15" pos:column="12">[<expr><literal type="number" pos:line="15" pos:column="13">2<pos:position pos:line="15" pos:column="14"/></literal></expr>]<pos:position pos:line="15" pos:column="15"/></index></name></decl>;<pos:position pos:line="15" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="17" pos:column="5">*<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">rd<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <name pos:line="17" pos:column="11">INVALID_SOCKET<pos:position pos:line="17" pos:column="25"/></name></expr>;<pos:position pos:line="17" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="18" pos:column="5">*<pos:position pos:line="18" pos:column="6"/></operator><name pos:line="18" pos:column="6">wr<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <name pos:line="18" pos:column="11">INVALID_SOCKET<pos:position pos:line="18" pos:column="25"/></name></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* Create the unique socket identifier
     * so that we know the connection originated
     * from us.
     */</comment>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">uid<pos:position pos:line="24" pos:column="8"/></name><index pos:line="24" pos:column="8">[<expr><literal type="number" pos:line="24" pos:column="9">0<pos:position pos:line="24" pos:column="10"/></literal></expr>]<pos:position pos:line="24" pos:column="11"/></index></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">getpid<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">()<pos:position pos:line="24" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">uid<pos:position pos:line="25" pos:column="8"/></name><index pos:line="25" pos:column="8">[<expr><literal type="number" pos:line="25" pos:column="9">1<pos:position pos:line="25" pos:column="10"/></literal></expr>]<pos:position pos:line="25" pos:column="11"/></index></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name pos:line="25" pos:column="14">id<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">++<pos:position pos:line="25" pos:column="18"/></operator></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">(<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">ls<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">socket<pos:position pos:line="26" pos:column="21"/></name><argument_list pos:line="26" pos:column="21">(<argument><expr><name pos:line="26" pos:column="22">AF_INET<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="31">SOCK_STREAM<pos:position pos:line="26" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="44">IPPROTO_TCP<pos:position pos:line="26" pos:column="55"/></name></expr></argument>)<pos:position pos:line="26" pos:column="56"/></argument_list></call><operator pos:line="26" pos:column="56">)<pos:position pos:line="26" pos:column="57"/></operator> <operator pos:line="26" pos:column="58">==<pos:position pos:line="26" pos:column="60"/></operator> <name pos:line="26" pos:column="61">INVALID_SOCKET<pos:position pos:line="26" pos:column="75"/></name></expr>)<pos:position pos:line="26" pos:column="76"/></condition><then pos:line="26" pos:column="76"> <block pos:line="26" pos:column="77">{
        <return pos:line="27" pos:column="9">return <expr><call><name pos:line="27" pos:column="16">apr_get_netos_error<pos:position pos:line="27" pos:column="35"/></name><argument_list pos:line="27" pos:column="35">()<pos:position pos:line="27" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="38"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="30" pos:column="5">pa<pos:position pos:line="30" pos:column="7"/></name><operator pos:line="30" pos:column="7">.<pos:position pos:line="30" pos:column="8"/></operator><name pos:line="30" pos:column="8">sin_family<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <name pos:line="30" pos:column="21">AF_INET<pos:position pos:line="30" pos:column="28"/></name></expr>;<pos:position pos:line="30" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="31" pos:column="5">pa<pos:position pos:line="31" pos:column="7"/></name><operator pos:line="31" pos:column="7">.<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">sin_port<pos:position pos:line="31" pos:column="16"/></name></name>   <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <literal type="number" pos:line="31" pos:column="21">0<pos:position pos:line="31" pos:column="22"/></literal></expr>;<pos:position pos:line="31" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">pa<pos:position pos:line="32" pos:column="7"/></name><operator pos:line="32" pos:column="7">.<pos:position pos:line="32" pos:column="8"/></operator><name pos:line="32" pos:column="8">sin_addr<pos:position pos:line="32" pos:column="16"/></name><operator pos:line="32" pos:column="16">.<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">s_addr<pos:position pos:line="32" pos:column="23"/></name></name> <operator pos:line="32" pos:column="24">=<pos:position pos:line="32" pos:column="25"/></operator> <call><name pos:line="32" pos:column="26">inet_addr<pos:position pos:line="32" pos:column="35"/></name><argument_list pos:line="32" pos:column="35">(<argument><expr><literal type="string" pos:line="32" pos:column="36">"127.0.0.1"<pos:position pos:line="32" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="49"/></expr_stmt>

    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><call><name pos:line="34" pos:column="9">bind<pos:position pos:line="34" pos:column="13"/></name><argument_list pos:line="34" pos:column="13">(<argument><expr><name pos:line="34" pos:column="14">ls<pos:position pos:line="34" pos:column="16"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="18">(<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="19">SOCKADDR<pos:position pos:line="34" pos:column="27"/></name> <operator pos:line="34" pos:column="28">*<pos:position pos:line="34" pos:column="29"/></operator><operator pos:line="34" pos:column="29">)<pos:position pos:line="34" pos:column="30"/></operator><operator pos:line="34" pos:column="30">&amp;<pos:position pos:line="34" pos:column="35"/></operator><name pos:line="34" pos:column="31">pa<pos:position pos:line="34" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="34" pos:column="35">sizeof<argument_list pos:line="34" pos:column="41">(<argument><expr><name pos:line="34" pos:column="42">pa<pos:position pos:line="34" pos:column="44"/></name></expr></argument>)<pos:position pos:line="34" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="34" pos:column="46"/></argument_list></call> <operator pos:line="34" pos:column="47">==<pos:position pos:line="34" pos:column="49"/></operator> <name pos:line="34" pos:column="50">SOCKET_ERROR<pos:position pos:line="34" pos:column="62"/></name></expr>)<pos:position pos:line="34" pos:column="63"/></condition><then pos:line="34" pos:column="63"> <block pos:line="34" pos:column="64">{
        <expr_stmt><expr><name pos:line="35" pos:column="9">rv<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator>  <call><name pos:line="35" pos:column="15">apr_get_netos_error<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">()<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
        <goto pos:line="36" pos:column="9">goto <name pos:line="36" pos:column="14">cleanup<pos:position pos:line="36" pos:column="21"/></name>;<pos:position pos:line="36" pos:column="22"/></goto>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>
    <if pos:line="38" pos:column="5">if <condition pos:line="38" pos:column="8">(<expr><call><name pos:line="38" pos:column="9">getsockname<pos:position pos:line="38" pos:column="20"/></name><argument_list pos:line="38" pos:column="20">(<argument><expr><name pos:line="38" pos:column="21">ls<pos:position pos:line="38" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="25">(<pos:position pos:line="38" pos:column="26"/></operator><name pos:line="38" pos:column="26">SOCKADDR<pos:position pos:line="38" pos:column="34"/></name> <operator pos:line="38" pos:column="35">*<pos:position pos:line="38" pos:column="36"/></operator><operator pos:line="38" pos:column="36">)<pos:position pos:line="38" pos:column="37"/></operator><operator pos:line="38" pos:column="37">&amp;<pos:position pos:line="38" pos:column="42"/></operator><name pos:line="38" pos:column="38">la<pos:position pos:line="38" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="38" pos:column="42">&amp;<pos:position pos:line="38" pos:column="47"/></operator><name pos:line="38" pos:column="43">ll<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></call> <operator pos:line="38" pos:column="47">==<pos:position pos:line="38" pos:column="49"/></operator> <name pos:line="38" pos:column="50">SOCKET_ERROR<pos:position pos:line="38" pos:column="62"/></name></expr>)<pos:position pos:line="38" pos:column="63"/></condition><then pos:line="38" pos:column="63"> <block pos:line="38" pos:column="64">{
        <expr_stmt><expr><name pos:line="39" pos:column="9">rv<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator>  <call><name pos:line="39" pos:column="15">apr_get_netos_error<pos:position pos:line="39" pos:column="34"/></name><argument_list pos:line="39" pos:column="34">()<pos:position pos:line="39" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="37"/></expr_stmt>
        <goto pos:line="40" pos:column="9">goto <name pos:line="40" pos:column="14">cleanup<pos:position pos:line="40" pos:column="21"/></name>;<pos:position pos:line="40" pos:column="22"/></goto>
    }<pos:position pos:line="41" pos:column="6"/></block></then></if>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><call><name pos:line="42" pos:column="9">listen<pos:position pos:line="42" pos:column="15"/></name><argument_list pos:line="42" pos:column="15">(<argument><expr><name pos:line="42" pos:column="16">ls<pos:position pos:line="42" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="20">1<pos:position pos:line="42" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="22"/></argument_list></call> <operator pos:line="42" pos:column="23">==<pos:position pos:line="42" pos:column="25"/></operator> <name pos:line="42" pos:column="26">SOCKET_ERROR<pos:position pos:line="42" pos:column="38"/></name></expr>)<pos:position pos:line="42" pos:column="39"/></condition><then pos:line="42" pos:column="39"> <block pos:line="42" pos:column="40">{
        <expr_stmt><expr><name pos:line="43" pos:column="9">rv<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator>  <call><name pos:line="43" pos:column="15">apr_get_netos_error<pos:position pos:line="43" pos:column="34"/></name><argument_list pos:line="43" pos:column="34">()<pos:position pos:line="43" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="37"/></expr_stmt>
        <goto pos:line="44" pos:column="9">goto <name pos:line="44" pos:column="14">cleanup<pos:position pos:line="44" pos:column="21"/></name>;<pos:position pos:line="44" pos:column="22"/></goto>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>
    <if pos:line="46" pos:column="5">if <condition pos:line="46" pos:column="8">(<expr><operator pos:line="46" pos:column="9">(<pos:position pos:line="46" pos:column="10"/></operator><operator pos:line="46" pos:column="10">*<pos:position pos:line="46" pos:column="11"/></operator><name pos:line="46" pos:column="11">wr<pos:position pos:line="46" pos:column="13"/></name> <operator pos:line="46" pos:column="14">=<pos:position pos:line="46" pos:column="15"/></operator> <call><name pos:line="46" pos:column="16">socket<pos:position pos:line="46" pos:column="22"/></name><argument_list pos:line="46" pos:column="22">(<argument><expr><name pos:line="46" pos:column="23">AF_INET<pos:position pos:line="46" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="32">SOCK_STREAM<pos:position pos:line="46" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="45">IPPROTO_TCP<pos:position pos:line="46" pos:column="56"/></name></expr></argument>)<pos:position pos:line="46" pos:column="57"/></argument_list></call><operator pos:line="46" pos:column="57">)<pos:position pos:line="46" pos:column="58"/></operator> <operator pos:line="46" pos:column="59">==<pos:position pos:line="46" pos:column="61"/></operator> <name pos:line="46" pos:column="62">INVALID_SOCKET<pos:position pos:line="46" pos:column="76"/></name></expr>)<pos:position pos:line="46" pos:column="77"/></condition><then pos:line="46" pos:column="77"> <block pos:line="46" pos:column="78">{
        <expr_stmt><expr><name pos:line="47" pos:column="9">rv<pos:position pos:line="47" pos:column="11"/></name> <operator pos:line="47" pos:column="12">=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">apr_get_netos_error<pos:position pos:line="47" pos:column="33"/></name><argument_list pos:line="47" pos:column="33">()<pos:position pos:line="47" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="36"/></expr_stmt>
        <goto pos:line="48" pos:column="9">goto <name pos:line="48" pos:column="14">cleanup<pos:position pos:line="48" pos:column="21"/></name>;<pos:position pos:line="48" pos:column="22"/></goto>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><call><name pos:line="50" pos:column="9">connect<pos:position pos:line="50" pos:column="16"/></name><argument_list pos:line="50" pos:column="16">(<argument><expr><operator pos:line="50" pos:column="17">*<pos:position pos:line="50" pos:column="18"/></operator><name pos:line="50" pos:column="18">wr<pos:position pos:line="50" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="50" pos:column="22">(<pos:position pos:line="50" pos:column="23"/></operator><name pos:line="50" pos:column="23">SOCKADDR<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">*<pos:position pos:line="50" pos:column="33"/></operator><operator pos:line="50" pos:column="33">)<pos:position pos:line="50" pos:column="34"/></operator><operator pos:line="50" pos:column="34">&amp;<pos:position pos:line="50" pos:column="39"/></operator><name pos:line="50" pos:column="35">la<pos:position pos:line="50" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="50" pos:column="39">sizeof<argument_list pos:line="50" pos:column="45">(<argument><expr><name pos:line="50" pos:column="46">la<pos:position pos:line="50" pos:column="48"/></name></expr></argument>)<pos:position pos:line="50" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="50" pos:column="50"/></argument_list></call> <operator pos:line="50" pos:column="51">==<pos:position pos:line="50" pos:column="53"/></operator> <name pos:line="50" pos:column="54">SOCKET_ERROR<pos:position pos:line="50" pos:column="66"/></name></expr>)<pos:position pos:line="50" pos:column="67"/></condition><then pos:line="50" pos:column="67"> <block pos:line="50" pos:column="68">{
        <expr_stmt><expr><name pos:line="51" pos:column="9">rv<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">=<pos:position pos:line="51" pos:column="13"/></operator>  <call><name pos:line="51" pos:column="15">apr_get_netos_error<pos:position pos:line="51" pos:column="34"/></name><argument_list pos:line="51" pos:column="34">()<pos:position pos:line="51" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="37"/></expr_stmt>
        <goto pos:line="52" pos:column="9">goto <name pos:line="52" pos:column="14">cleanup<pos:position pos:line="52" pos:column="21"/></name>;<pos:position pos:line="52" pos:column="22"/></goto>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>
    <if pos:line="54" pos:column="5">if <condition pos:line="54" pos:column="8">(<expr><call><name pos:line="54" pos:column="9">send<pos:position pos:line="54" pos:column="13"/></name><argument_list pos:line="54" pos:column="13">(<argument><expr><operator pos:line="54" pos:column="14">*<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="15">wr<pos:position pos:line="54" pos:column="17"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="19">(<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="20">char<pos:position pos:line="54" pos:column="24"/></name> <operator pos:line="54" pos:column="25">*<pos:position pos:line="54" pos:column="26"/></operator><operator pos:line="54" pos:column="26">)<pos:position pos:line="54" pos:column="27"/></operator><name pos:line="54" pos:column="27">uid<pos:position pos:line="54" pos:column="30"/></name></expr></argument>, <argument><expr><sizeof pos:line="54" pos:column="32">sizeof<argument_list pos:line="54" pos:column="38">(<argument><expr><name pos:line="54" pos:column="39">uid<pos:position pos:line="54" pos:column="42"/></name></expr></argument>)<pos:position pos:line="54" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="45">0<pos:position pos:line="54" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call> <operator pos:line="54" pos:column="48">!=<pos:position pos:line="54" pos:column="50"/></operator> <sizeof pos:line="54" pos:column="51">sizeof<argument_list pos:line="54" pos:column="57">(<argument><expr><name pos:line="54" pos:column="58">uid<pos:position pos:line="54" pos:column="61"/></name></expr></argument>)<pos:position pos:line="54" pos:column="62"/></argument_list></sizeof></expr>)<pos:position pos:line="54" pos:column="63"/></condition><then pos:line="54" pos:column="63"> <block pos:line="54" pos:column="64">{
        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">(<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">rv<pos:position pos:line="55" pos:column="16"/></name> <operator pos:line="55" pos:column="17">=<pos:position pos:line="55" pos:column="18"/></operator>  <call><name pos:line="55" pos:column="20">apr_get_netos_error<pos:position pos:line="55" pos:column="39"/></name><argument_list pos:line="55" pos:column="39">()<pos:position pos:line="55" pos:column="41"/></argument_list></call><operator pos:line="55" pos:column="41">)<pos:position pos:line="55" pos:column="42"/></operator> <operator pos:line="55" pos:column="43">==<pos:position pos:line="55" pos:column="45"/></operator> <literal type="number" pos:line="55" pos:column="46">0<pos:position pos:line="55" pos:column="47"/></literal></expr>)<pos:position pos:line="55" pos:column="48"/></condition><then pos:line="55" pos:column="48"> <block pos:line="55" pos:column="49">{
            <expr_stmt><expr><name pos:line="56" pos:column="13">rv<pos:position pos:line="56" pos:column="15"/></name> <operator pos:line="56" pos:column="16">=<pos:position pos:line="56" pos:column="17"/></operator> <name pos:line="56" pos:column="18">APR_EINVAL<pos:position pos:line="56" pos:column="28"/></name></expr>;<pos:position pos:line="56" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="57" pos:column="10"/></block></then></if>
        <goto pos:line="58" pos:column="9">goto <name pos:line="58" pos:column="14">cleanup<pos:position pos:line="58" pos:column="21"/></name>;<pos:position pos:line="58" pos:column="22"/></goto>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><call><name pos:line="60" pos:column="9">ioctlsocket<pos:position pos:line="60" pos:column="20"/></name><argument_list pos:line="60" pos:column="20">(<argument><expr><name pos:line="60" pos:column="21">ls<pos:position pos:line="60" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="25">FIONBIO<pos:position pos:line="60" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="34">&amp;<pos:position pos:line="60" pos:column="39"/></operator><name pos:line="60" pos:column="35">bm<pos:position pos:line="60" pos:column="37"/></name></expr></argument>)<pos:position pos:line="60" pos:column="38"/></argument_list></call> <operator pos:line="60" pos:column="39">==<pos:position pos:line="60" pos:column="41"/></operator> <name pos:line="60" pos:column="42">SOCKET_ERROR<pos:position pos:line="60" pos:column="54"/></name></expr>)<pos:position pos:line="60" pos:column="55"/></condition><then pos:line="60" pos:column="55"> <block pos:line="60" pos:column="56">{
        <expr_stmt><expr><name pos:line="61" pos:column="9">rv<pos:position pos:line="61" pos:column="11"/></name> <operator pos:line="61" pos:column="12">=<pos:position pos:line="61" pos:column="13"/></operator> <call><name pos:line="61" pos:column="14">apr_get_netos_error<pos:position pos:line="61" pos:column="33"/></name><argument_list pos:line="61" pos:column="33">()<pos:position pos:line="61" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="36"/></expr_stmt>
        <goto pos:line="62" pos:column="9">goto <name pos:line="62" pos:column="14">cleanup<pos:position pos:line="62" pos:column="21"/></name>;<pos:position pos:line="62" pos:column="22"/></goto>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>
    <for pos:line="64" pos:column="5">for <control pos:line="64" pos:column="9">(<init pos:line="64" pos:column="10">;<pos:position pos:line="64" pos:column="11"/></init><condition pos:line="64" pos:column="11">;<pos:position pos:line="64" pos:column="12"/></condition><incr/>)<pos:position pos:line="64" pos:column="13"/></control> <block pos:line="64" pos:column="14">{
        <comment type="block" pos:line="65" pos:column="9">/* Listening socket is nonblocking by now.
         * The accept must create the socket
         * immediatelly because we connected already.
         */</comment>
        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><operator pos:line="69" pos:column="13">(<pos:position pos:line="69" pos:column="14"/></operator><operator pos:line="69" pos:column="14">*<pos:position pos:line="69" pos:column="15"/></operator><name pos:line="69" pos:column="15">rd<pos:position pos:line="69" pos:column="17"/></name> <operator pos:line="69" pos:column="18">=<pos:position pos:line="69" pos:column="19"/></operator> <call><name pos:line="69" pos:column="20">accept<pos:position pos:line="69" pos:column="26"/></name><argument_list pos:line="69" pos:column="26">(<argument><expr><name pos:line="69" pos:column="27">ls<pos:position pos:line="69" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="31">(<pos:position pos:line="69" pos:column="32"/></operator><name pos:line="69" pos:column="32">SOCKADDR<pos:position pos:line="69" pos:column="40"/></name> <operator pos:line="69" pos:column="41">*<pos:position pos:line="69" pos:column="42"/></operator><operator pos:line="69" pos:column="42">)<pos:position pos:line="69" pos:column="43"/></operator><operator pos:line="69" pos:column="43">&amp;<pos:position pos:line="69" pos:column="48"/></operator><name pos:line="69" pos:column="44">ca<pos:position pos:line="69" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="69" pos:column="48">&amp;<pos:position pos:line="69" pos:column="53"/></operator><name pos:line="69" pos:column="49">lc<pos:position pos:line="69" pos:column="51"/></name></expr></argument>)<pos:position pos:line="69" pos:column="52"/></argument_list></call><operator pos:line="69" pos:column="52">)<pos:position pos:line="69" pos:column="53"/></operator> <operator pos:line="69" pos:column="54">==<pos:position pos:line="69" pos:column="56"/></operator> <name pos:line="69" pos:column="57">INVALID_SOCKET<pos:position pos:line="69" pos:column="71"/></name></expr>)<pos:position pos:line="69" pos:column="72"/></condition><then pos:line="69" pos:column="72"> <block pos:line="69" pos:column="73">{
            <expr_stmt><expr><name pos:line="70" pos:column="13">rv<pos:position pos:line="70" pos:column="15"/></name> <operator pos:line="70" pos:column="16">=<pos:position pos:line="70" pos:column="17"/></operator>  <call><name pos:line="70" pos:column="19">apr_get_netos_error<pos:position pos:line="70" pos:column="38"/></name><argument_list pos:line="70" pos:column="38">()<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>
            <goto pos:line="71" pos:column="13">goto <name pos:line="71" pos:column="18">cleanup<pos:position pos:line="71" pos:column="25"/></name>;<pos:position pos:line="71" pos:column="26"/></goto>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="73" pos:column="9">/* Verify the connection by reading the send identification.
         */</comment>
        <expr_stmt><expr><name pos:line="75" pos:column="9">nrd<pos:position pos:line="75" pos:column="12"/></name> <operator pos:line="75" pos:column="13">=<pos:position pos:line="75" pos:column="14"/></operator> <call><name pos:line="75" pos:column="15">recv<pos:position pos:line="75" pos:column="19"/></name><argument_list pos:line="75" pos:column="19">(<argument><expr><operator pos:line="75" pos:column="20">*<pos:position pos:line="75" pos:column="21"/></operator><name pos:line="75" pos:column="21">rd<pos:position pos:line="75" pos:column="23"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="25">(<pos:position pos:line="75" pos:column="26"/></operator><name pos:line="75" pos:column="26">char<pos:position pos:line="75" pos:column="30"/></name> <operator pos:line="75" pos:column="31">*<pos:position pos:line="75" pos:column="32"/></operator><operator pos:line="75" pos:column="32">)<pos:position pos:line="75" pos:column="33"/></operator><name pos:line="75" pos:column="33">iid<pos:position pos:line="75" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="75" pos:column="38">sizeof<argument_list pos:line="75" pos:column="44">(<argument><expr><name pos:line="75" pos:column="45">iid<pos:position pos:line="75" pos:column="48"/></name></expr></argument>)<pos:position pos:line="75" pos:column="49"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="number" pos:line="75" pos:column="51">0<pos:position pos:line="75" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="54"/></expr_stmt>
        <if pos:line="76" pos:column="9">if <condition pos:line="76" pos:column="12">(<expr><name pos:line="76" pos:column="13">nrd<pos:position pos:line="76" pos:column="16"/></name> <operator pos:line="76" pos:column="17">==<pos:position pos:line="76" pos:column="19"/></operator> <sizeof pos:line="76" pos:column="20">sizeof<argument_list pos:line="76" pos:column="26">(<argument><expr><name pos:line="76" pos:column="27">iid<pos:position pos:line="76" pos:column="30"/></name></expr></argument>)<pos:position pos:line="76" pos:column="31"/></argument_list></sizeof></expr>)<pos:position pos:line="76" pos:column="32"/></condition><then pos:line="76" pos:column="32"> <block pos:line="76" pos:column="33">{
            <if pos:line="77" pos:column="13">if <condition pos:line="77" pos:column="16">(<expr><call><name pos:line="77" pos:column="17">memcmp<pos:position pos:line="77" pos:column="23"/></name><argument_list pos:line="77" pos:column="23">(<argument><expr><name pos:line="77" pos:column="24">uid<pos:position pos:line="77" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="29">iid<pos:position pos:line="77" pos:column="32"/></name></expr></argument>, <argument><expr><sizeof pos:line="77" pos:column="34">sizeof<argument_list pos:line="77" pos:column="40">(<argument><expr><name pos:line="77" pos:column="41">uid<pos:position pos:line="77" pos:column="44"/></name></expr></argument>)<pos:position pos:line="77" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="77" pos:column="46"/></argument_list></call> <operator pos:line="77" pos:column="47">==<pos:position pos:line="77" pos:column="49"/></operator> <literal type="number" pos:line="77" pos:column="50">0<pos:position pos:line="77" pos:column="51"/></literal></expr>)<pos:position pos:line="77" pos:column="52"/></condition><then pos:line="77" pos:column="52"> <block pos:line="77" pos:column="53">{
                <comment type="block" pos:line="78" pos:column="17">/* Wow, we recived what we send.
                 * Put read side of the pipe to the blocking
                 * mode and return.
                 */</comment>
                <expr_stmt><expr><name pos:line="82" pos:column="17">bm<pos:position pos:line="82" pos:column="19"/></name> <operator pos:line="82" pos:column="20">=<pos:position pos:line="82" pos:column="21"/></operator> <literal type="number" pos:line="82" pos:column="22">0<pos:position pos:line="82" pos:column="23"/></literal></expr>;<pos:position pos:line="82" pos:column="24"/></expr_stmt>
                <if pos:line="83" pos:column="17">if <condition pos:line="83" pos:column="20">(<expr><call><name pos:line="83" pos:column="21">ioctlsocket<pos:position pos:line="83" pos:column="32"/></name><argument_list pos:line="83" pos:column="32">(<argument><expr><operator pos:line="83" pos:column="33">*<pos:position pos:line="83" pos:column="34"/></operator><name pos:line="83" pos:column="34">rd<pos:position pos:line="83" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="38">FIONBIO<pos:position pos:line="83" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="83" pos:column="47">&amp;<pos:position pos:line="83" pos:column="52"/></operator><name pos:line="83" pos:column="48">bm<pos:position pos:line="83" pos:column="50"/></name></expr></argument>)<pos:position pos:line="83" pos:column="51"/></argument_list></call> <operator pos:line="83" pos:column="52">==<pos:position pos:line="83" pos:column="54"/></operator> <name pos:line="83" pos:column="55">SOCKET_ERROR<pos:position pos:line="83" pos:column="67"/></name></expr>)<pos:position pos:line="83" pos:column="68"/></condition><then pos:line="83" pos:column="68"> <block pos:line="83" pos:column="69">{
                    <expr_stmt><expr><name pos:line="84" pos:column="21">rv<pos:position pos:line="84" pos:column="23"/></name> <operator pos:line="84" pos:column="24">=<pos:position pos:line="84" pos:column="25"/></operator> <call><name pos:line="84" pos:column="26">apr_get_netos_error<pos:position pos:line="84" pos:column="45"/></name><argument_list pos:line="84" pos:column="45">()<pos:position pos:line="84" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="48"/></expr_stmt>
                    <goto pos:line="85" pos:column="21">goto <name pos:line="85" pos:column="26">cleanup<pos:position pos:line="85" pos:column="33"/></name>;<pos:position pos:line="85" pos:column="34"/></goto>
                }<pos:position pos:line="86" pos:column="18"/></block></then></if>
                <break pos:line="87" pos:column="17">break;<pos:position pos:line="87" pos:column="23"/></break>
            }<pos:position pos:line="88" pos:column="14"/></block></then></if>
        }<pos:position pos:line="89" pos:column="10"/></block></then>
        <elseif pos:line="90" pos:column="9">else <if pos:line="90" pos:column="14">if <condition pos:line="90" pos:column="17">(<expr><name pos:line="90" pos:column="18">nrd<pos:position pos:line="90" pos:column="21"/></name> <operator pos:line="90" pos:column="22">==<pos:position pos:line="90" pos:column="24"/></operator> <name pos:line="90" pos:column="25">SOCKET_ERROR<pos:position pos:line="90" pos:column="37"/></name></expr>)<pos:position pos:line="90" pos:column="38"/></condition><then pos:line="90" pos:column="38"> <block pos:line="90" pos:column="39">{
            <expr_stmt><expr><name pos:line="91" pos:column="13">rv<pos:position pos:line="91" pos:column="15"/></name> <operator pos:line="91" pos:column="16">=<pos:position pos:line="91" pos:column="17"/></operator>  <call><name pos:line="91" pos:column="19">apr_get_netos_error<pos:position pos:line="91" pos:column="38"/></name><argument_list pos:line="91" pos:column="38">()<pos:position pos:line="91" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="41"/></expr_stmt>
            <goto pos:line="92" pos:column="13">goto <name pos:line="92" pos:column="18">cleanup<pos:position pos:line="92" pos:column="25"/></name>;<pos:position pos:line="92" pos:column="26"/></goto>
        }<pos:position pos:line="93" pos:column="10"/></block></then></if></elseif></if>
        <expr_stmt><expr><call><name pos:line="94" pos:column="9">closesocket<pos:position pos:line="94" pos:column="20"/></name><argument_list pos:line="94" pos:column="20">(<argument><expr><operator pos:line="94" pos:column="21">*<pos:position pos:line="94" pos:column="22"/></operator><name pos:line="94" pos:column="22">rd<pos:position pos:line="94" pos:column="24"/></name></expr></argument>)<pos:position pos:line="94" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="95" pos:column="6"/></block></for>
    <comment type="block" pos:line="96" pos:column="5">/* We don't need the listening socket any more */</comment>
    <expr_stmt><expr><call><name pos:line="97" pos:column="5">closesocket<pos:position pos:line="97" pos:column="16"/></name><argument_list pos:line="97" pos:column="16">(<argument><expr><name pos:line="97" pos:column="17">ls<pos:position pos:line="97" pos:column="19"/></name></expr></argument>)<pos:position pos:line="97" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="21"/></expr_stmt>
    <return pos:line="98" pos:column="5">return <expr><literal type="number" pos:line="98" pos:column="12">0<pos:position pos:line="98" pos:column="13"/></literal></expr>;<pos:position pos:line="98" pos:column="14"/></return>

<label><name pos:line="100" pos:column="1">cleanup<pos:position pos:line="100" pos:column="8"/></name>:<pos:position pos:line="100" pos:column="9"/></label>
    <comment type="block" pos:line="101" pos:column="5">/* Don't leak resources */</comment>
    <if pos:line="102" pos:column="5">if <condition pos:line="102" pos:column="8">(<expr><operator pos:line="102" pos:column="9">*<pos:position pos:line="102" pos:column="10"/></operator><name pos:line="102" pos:column="10">rd<pos:position pos:line="102" pos:column="12"/></name> <operator pos:line="102" pos:column="13">!=<pos:position pos:line="102" pos:column="15"/></operator> <name pos:line="102" pos:column="16">INVALID_SOCKET<pos:position pos:line="102" pos:column="30"/></name></expr>)<pos:position pos:line="102" pos:column="31"/></condition><then pos:line="102" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="103" pos:column="9">closesocket<pos:position pos:line="103" pos:column="20"/></name><argument_list pos:line="103" pos:column="20">(<argument><expr><operator pos:line="103" pos:column="21">*<pos:position pos:line="103" pos:column="22"/></operator><name pos:line="103" pos:column="22">rd<pos:position pos:line="103" pos:column="24"/></name></expr></argument>)<pos:position pos:line="103" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="26"/></expr_stmt></block></then></if>
    <if pos:line="104" pos:column="5">if <condition pos:line="104" pos:column="8">(<expr><operator pos:line="104" pos:column="9">*<pos:position pos:line="104" pos:column="10"/></operator><name pos:line="104" pos:column="10">wr<pos:position pos:line="104" pos:column="12"/></name> <operator pos:line="104" pos:column="13">!=<pos:position pos:line="104" pos:column="15"/></operator> <name pos:line="104" pos:column="16">INVALID_SOCKET<pos:position pos:line="104" pos:column="30"/></name></expr>)<pos:position pos:line="104" pos:column="31"/></condition><then pos:line="104" pos:column="31">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="105" pos:column="9">closesocket<pos:position pos:line="105" pos:column="20"/></name><argument_list pos:line="105" pos:column="20">(<argument><expr><operator pos:line="105" pos:column="21">*<pos:position pos:line="105" pos:column="22"/></operator><name pos:line="105" pos:column="22">wr<pos:position pos:line="105" pos:column="24"/></name></expr></argument>)<pos:position pos:line="105" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="26"/></expr_stmt></block></then></if>

    <expr_stmt><expr><operator pos:line="107" pos:column="5">*<pos:position pos:line="107" pos:column="6"/></operator><name pos:line="107" pos:column="6">rd<pos:position pos:line="107" pos:column="8"/></name> <operator pos:line="107" pos:column="9">=<pos:position pos:line="107" pos:column="10"/></operator> <name pos:line="107" pos:column="11">INVALID_SOCKET<pos:position pos:line="107" pos:column="25"/></name></expr>;<pos:position pos:line="107" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="108" pos:column="5">*<pos:position pos:line="108" pos:column="6"/></operator><name pos:line="108" pos:column="6">wr<pos:position pos:line="108" pos:column="8"/></name> <operator pos:line="108" pos:column="9">=<pos:position pos:line="108" pos:column="10"/></operator> <name pos:line="108" pos:column="11">INVALID_SOCKET<pos:position pos:line="108" pos:column="25"/></name></expr>;<pos:position pos:line="108" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="109" pos:column="5">closesocket<pos:position pos:line="109" pos:column="16"/></name><argument_list pos:line="109" pos:column="16">(<argument><expr><name pos:line="109" pos:column="17">ls<pos:position pos:line="109" pos:column="19"/></name></expr></argument>)<pos:position pos:line="109" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="21"/></expr_stmt>
    <return pos:line="110" pos:column="5">return <expr><name pos:line="110" pos:column="12">rv<pos:position pos:line="110" pos:column="14"/></name></expr>;<pos:position pos:line="110" pos:column="15"/></return>
}<pos:position pos:line="111" pos:column="2"/></block></function></unit>
