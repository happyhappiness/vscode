<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2231_httpd-2.3.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">exipc_post_config<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">apr_pool_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">pconf<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="49">apr_pool_t<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">plog<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, 
                             <parameter><decl><type><name pos:line="2" pos:column="30">apr_pool_t<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">ptemp<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">server_rec<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">s<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">void<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">data<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt> <comment type="block" pos:line="4" pos:column="17">/* These two help ensure that we only init once. */</comment>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">userdata_key<pos:position pos:line="5" pos:column="29"/></name></decl>;<pos:position pos:line="5" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rs<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">exipc_data<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">base<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">tempdir<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt> 


    <comment type="block" pos:line="11" pos:column="5">/* 
     * The following checks if this routine has been called before. 
     * This is necessary because the parent process gets initialized
     * a couple of times as the server starts up, and we don't want 
     * to create any more mutexes and shared memory segments than
     * we're actually going to use. 
     * 
     * The key needs to be unique for the entire web server, so put
     * the module name in it.
     */</comment> 
    <expr_stmt><expr><name pos:line="21" pos:column="5">userdata_key<pos:position pos:line="21" pos:column="17"/></name> <operator pos:line="21" pos:column="18">=<pos:position pos:line="21" pos:column="19"/></operator> <literal type="string" pos:line="21" pos:column="20">"example_ipc_init_module"<pos:position pos:line="21" pos:column="45"/></literal></expr>;<pos:position pos:line="21" pos:column="46"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">apr_pool_userdata_get<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><operator pos:line="22" pos:column="27">&amp;<pos:position pos:line="22" pos:column="32"/></operator><name pos:line="22" pos:column="28">data<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="34">userdata_key<pos:position pos:line="22" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="48">s<pos:position pos:line="22" pos:column="49"/></name><operator pos:line="22" pos:column="49">-&gt;<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="51">process<pos:position pos:line="22" pos:column="58"/></name><operator pos:line="22" pos:column="58">-&gt;<pos:position pos:line="22" pos:column="63"/></operator><name pos:line="22" pos:column="60">pool<pos:position pos:line="22" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">data<pos:position pos:line="23" pos:column="14"/></name></expr>)<pos:position pos:line="23" pos:column="15"/></condition><then pos:line="23" pos:column="15"> <block pos:line="23" pos:column="16">{
        <comment type="block" pos:line="24" pos:column="9">/* 
         * If no data was found for our key, this must be the first
         * time the module is initialized. Put some data under that
         * key and return.
         */</comment>
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">apr_pool_userdata_set<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><operator pos:line="29" pos:column="31">(<pos:position pos:line="29" pos:column="32"/></operator><specifier pos:line="29" pos:column="32">const<pos:position pos:line="29" pos:column="37"/></specifier> <name pos:line="29" pos:column="38">void<pos:position pos:line="29" pos:column="42"/></name> <operator pos:line="29" pos:column="43">*<pos:position pos:line="29" pos:column="44"/></operator><operator pos:line="29" pos:column="44">)<pos:position pos:line="29" pos:column="45"/></operator> <literal type="number" pos:line="29" pos:column="46">1<pos:position pos:line="29" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="49">userdata_key<pos:position pos:line="29" pos:column="61"/></name></expr></argument>, 
                              <argument><expr><name pos:line="30" pos:column="31">apr_pool_cleanup_null<pos:position pos:line="30" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="54">s<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">-&gt;<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="57">process<pos:position pos:line="30" pos:column="64"/></name><operator pos:line="30" pos:column="64">-&gt;<pos:position pos:line="30" pos:column="69"/></operator><name pos:line="30" pos:column="66">pool<pos:position pos:line="30" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">OK<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if> <comment type="block" pos:line="32" pos:column="7">/* Kilroy was here */</comment>

    <comment type="block" pos:line="34" pos:column="5">/* 
     * The shared memory allocation routines take a file name.
     * Depending on system-specific implementation of these
     * routines, that file may or may not actually be created. We'd
     * like to store those files in the operating system's designated
     * temporary directory, which APR can point us to.
     */</comment>
    <expr_stmt><expr><name pos:line="41" pos:column="5">rs<pos:position pos:line="41" pos:column="7"/></name> <operator pos:line="41" pos:column="8">=<pos:position pos:line="41" pos:column="9"/></operator> <call><name pos:line="41" pos:column="10">apr_temp_dir_get<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><operator pos:line="41" pos:column="27">&amp;<pos:position pos:line="41" pos:column="32"/></operator><name pos:line="41" pos:column="28">tempdir<pos:position pos:line="41" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="37">pconf<pos:position pos:line="41" pos:column="42"/></name></expr></argument>)<pos:position pos:line="41" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="44"/></expr_stmt>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">APR_SUCCESS<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">!=<pos:position pos:line="42" pos:column="23"/></operator> <name pos:line="42" pos:column="24">rs<pos:position pos:line="42" pos:column="26"/></name></expr>)<pos:position pos:line="42" pos:column="27"/></condition><then pos:line="42" pos:column="27"> <block pos:line="42" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="43" pos:column="9">ap_log_error<pos:position pos:line="43" pos:column="21"/></name><argument_list pos:line="43" pos:column="21">(<argument><expr><name pos:line="43" pos:column="22">APLOG_MARK<pos:position pos:line="43" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="34">APLOG_ERR<pos:position pos:line="43" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="45">rs<pos:position pos:line="43" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="49">s<pos:position pos:line="43" pos:column="50"/></name></expr></argument>, 
                     <argument><expr><literal type="string" pos:line="44" pos:column="22">"Failed to find temporary directory"<pos:position pos:line="44" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="60"/></expr_stmt>
        <return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="45" pos:column="42"/></name></expr>;<pos:position pos:line="45" pos:column="43"/></return>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="48" pos:column="5">/* Create the shared memory segment */</comment>

    <comment type="block" pos:line="50" pos:column="5">/* 
     * Create a unique filename using our pid. This information is 
     * stashed in the global variable so the children inherit it.
     */</comment>
    <expr_stmt><expr><name pos:line="54" pos:column="5">shmfilename<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">=<pos:position pos:line="54" pos:column="18"/></operator> <call><name pos:line="54" pos:column="19">apr_psprintf<pos:position pos:line="54" pos:column="31"/></name><argument_list pos:line="54" pos:column="31">(<argument><expr><name pos:line="54" pos:column="32">pconf<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="39">"%s/httpd_shm.%ld"<pos:position pos:line="54" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="59">tempdir<pos:position pos:line="54" pos:column="66"/></name></expr></argument>, 
                               <argument><expr><operator pos:line="55" pos:column="32">(<pos:position pos:line="55" pos:column="33"/></operator><name pos:line="55" pos:column="33">long<pos:position pos:line="55" pos:column="37"/></name> <name pos:line="55" pos:column="38">int<pos:position pos:line="55" pos:column="41"/></name><operator pos:line="55" pos:column="41">)<pos:position pos:line="55" pos:column="42"/></operator><call><name pos:line="55" pos:column="42">getpid<pos:position pos:line="55" pos:column="48"/></name><argument_list pos:line="55" pos:column="48">()<pos:position pos:line="55" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="55" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="52"/></expr_stmt>

    <comment type="block" pos:line="57" pos:column="5">/* Now create that segment */</comment>
    <expr_stmt><expr><name pos:line="58" pos:column="5">rs<pos:position pos:line="58" pos:column="7"/></name> <operator pos:line="58" pos:column="8">=<pos:position pos:line="58" pos:column="9"/></operator> <call><name pos:line="58" pos:column="10">apr_shm_create<pos:position pos:line="58" pos:column="24"/></name><argument_list pos:line="58" pos:column="24">(<argument><expr><operator pos:line="58" pos:column="25">&amp;<pos:position pos:line="58" pos:column="30"/></operator><name pos:line="58" pos:column="26">exipc_shm<pos:position pos:line="58" pos:column="35"/></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="37">sizeof<argument_list pos:line="58" pos:column="43">(<argument><expr><name pos:line="58" pos:column="44">exipc_data<pos:position pos:line="58" pos:column="54"/></name></expr></argument>)<pos:position pos:line="58" pos:column="55"/></argument_list></sizeof></expr></argument>, 
                        <argument><expr><operator pos:line="59" pos:column="25">(<pos:position pos:line="59" pos:column="26"/></operator><specifier pos:line="59" pos:column="26">const<pos:position pos:line="59" pos:column="31"/></specifier> <name pos:line="59" pos:column="32">char<pos:position pos:line="59" pos:column="36"/></name> <operator pos:line="59" pos:column="37">*<pos:position pos:line="59" pos:column="38"/></operator><operator pos:line="59" pos:column="38">)<pos:position pos:line="59" pos:column="39"/></operator> <name pos:line="59" pos:column="40">shmfilename<pos:position pos:line="59" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="53">pconf<pos:position pos:line="59" pos:column="58"/></name></expr></argument>)<pos:position pos:line="59" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="60"/></expr_stmt>
    <if pos:line="60" pos:column="5">if <condition pos:line="60" pos:column="8">(<expr><name pos:line="60" pos:column="9">APR_SUCCESS<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">!=<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">rs<pos:position pos:line="60" pos:column="26"/></name></expr>)<pos:position pos:line="60" pos:column="27"/></condition><then pos:line="60" pos:column="27"> <block pos:line="60" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">ap_log_error<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">APLOG_MARK<pos:position pos:line="61" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="34">APLOG_ERR<pos:position pos:line="61" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="45">rs<pos:position pos:line="61" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="49">s<pos:position pos:line="61" pos:column="50"/></name></expr></argument>, 
                     <argument><expr><literal type="string" pos:line="62" pos:column="22">"Failed to create shared memory segment on file %s"<pos:position pos:line="62" pos:column="73"/></literal></expr></argument>, 
                     <argument><expr><name pos:line="63" pos:column="22">shmfilename<pos:position pos:line="63" pos:column="33"/></name></expr></argument>)<pos:position pos:line="63" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="35"/></expr_stmt>
        <return pos:line="64" pos:column="9">return <expr><name pos:line="64" pos:column="16">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="64" pos:column="42"/></name></expr>;<pos:position pos:line="64" pos:column="43"/></return>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="67" pos:column="5">/* Created it, now let's zero it out */</comment>
    <expr_stmt><expr><name pos:line="68" pos:column="5">base<pos:position pos:line="68" pos:column="9"/></name> <operator pos:line="68" pos:column="10">=<pos:position pos:line="68" pos:column="11"/></operator> <operator pos:line="68" pos:column="12">(<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="13">exipc_data<pos:position pos:line="68" pos:column="23"/></name> <operator pos:line="68" pos:column="24">*<pos:position pos:line="68" pos:column="25"/></operator><operator pos:line="68" pos:column="25">)<pos:position pos:line="68" pos:column="26"/></operator><call><name pos:line="68" pos:column="26">apr_shm_baseaddr_get<pos:position pos:line="68" pos:column="46"/></name><argument_list pos:line="68" pos:column="46">(<argument><expr><name pos:line="68" pos:column="47">exipc_shm<pos:position pos:line="68" pos:column="56"/></name></expr></argument>)<pos:position pos:line="68" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="69" pos:column="5">base<pos:position pos:line="69" pos:column="9"/></name><operator pos:line="69" pos:column="9">-&gt;<pos:position pos:line="69" pos:column="14"/></operator><name pos:line="69" pos:column="11">counter<pos:position pos:line="69" pos:column="18"/></name></name> <operator pos:line="69" pos:column="19">=<pos:position pos:line="69" pos:column="20"/></operator> <literal type="number" pos:line="69" pos:column="21">0<pos:position pos:line="69" pos:column="22"/></literal></expr>;<pos:position pos:line="69" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="71" pos:column="5">/* Create global mutex */</comment>

    <expr_stmt><expr><name pos:line="73" pos:column="5">rs<pos:position pos:line="73" pos:column="7"/></name> <operator pos:line="73" pos:column="8">=<pos:position pos:line="73" pos:column="9"/></operator> <call><name pos:line="73" pos:column="10">ap_global_mutex_create<pos:position pos:line="73" pos:column="32"/></name><argument_list pos:line="73" pos:column="32">(<argument><expr><operator pos:line="73" pos:column="33">&amp;<pos:position pos:line="73" pos:column="38"/></operator><name pos:line="73" pos:column="34">exipc_mutex<pos:position pos:line="73" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="47">NULL<pos:position pos:line="73" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="53">exipc_mutex_type<pos:position pos:line="73" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="71">NULL<pos:position pos:line="73" pos:column="75"/></name></expr></argument>,
                                <argument><expr><name pos:line="74" pos:column="33">s<pos:position pos:line="74" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="36">pconf<pos:position pos:line="74" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="43">0<pos:position pos:line="74" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="46"/></expr_stmt>
    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">APR_SUCCESS<pos:position pos:line="75" pos:column="20"/></name> <operator pos:line="75" pos:column="21">!=<pos:position pos:line="75" pos:column="23"/></operator> <name pos:line="75" pos:column="24">rs<pos:position pos:line="75" pos:column="26"/></name></expr>)<pos:position pos:line="75" pos:column="27"/></condition><then pos:line="75" pos:column="27"> <block pos:line="75" pos:column="28">{
        <return pos:line="76" pos:column="9">return <expr><name pos:line="76" pos:column="16">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="76" pos:column="42"/></name></expr>;<pos:position pos:line="76" pos:column="43"/></return>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="79" pos:column="5">/* 
     * Destroy the shm segment when the configuration pool gets destroyed. This
     * happens on server restarts. The parent will then (above) allocate a new
     * shm segment that the new children will bind to. 
     */</comment>
    <expr_stmt><expr><call><name pos:line="84" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="84" pos:column="30"/></name><argument_list pos:line="84" pos:column="30">(<argument><expr><name pos:line="84" pos:column="31">pconf<pos:position pos:line="84" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="38">NULL<pos:position pos:line="84" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="44">shm_cleanup_wrapper<pos:position pos:line="84" pos:column="63"/></name></expr></argument>, 
                              <argument><expr><name pos:line="85" pos:column="31">apr_pool_cleanup_null<pos:position pos:line="85" pos:column="52"/></name></expr></argument>)<pos:position pos:line="85" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="54"/></expr_stmt>    
    <return pos:line="86" pos:column="5">return <expr><name pos:line="86" pos:column="12">OK<pos:position pos:line="86" pos:column="14"/></name></expr>;<pos:position pos:line="86" pos:column="15"/></return>
}<pos:position pos:line="87" pos:column="2"/></block></function></unit>
