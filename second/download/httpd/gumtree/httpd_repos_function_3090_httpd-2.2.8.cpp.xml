<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3090_httpd-2.2.8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">apr_os_strerror<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">char<pos:position pos:line="1" pos:column="34"/></name><modifier pos:line="1" pos:column="34">*<pos:position pos:line="1" pos:column="35"/></modifier></type> <name pos:line="1" pos:column="36">buf<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">apr_size_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">bufsize<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="61">int<pos:position pos:line="1" pos:column="64"/></name></type> <name pos:line="1" pos:column="65">err<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="3" pos:column="3">char<pos:position pos:line="3" pos:column="7"/></name></type> <name><name pos:line="3" pos:column="8">result<pos:position pos:line="3" pos:column="14"/></name><index pos:line="3" pos:column="14">[<expr><literal type="number" pos:line="3" pos:column="15">200<pos:position pos:line="3" pos:column="18"/></literal></expr>]<pos:position pos:line="3" pos:column="19"/></index></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="4" pos:column="3">unsigned<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">char<pos:position pos:line="4" pos:column="16"/></name></type> <name><name pos:line="4" pos:column="17">message<pos:position pos:line="4" pos:column="24"/></name><index pos:line="4" pos:column="24">[<expr><name pos:line="4" pos:column="25">HUGE_STRING_LEN<pos:position pos:line="4" pos:column="40"/></name></expr>]<pos:position pos:line="4" pos:column="41"/></index></name></decl>;<pos:position pos:line="4" pos:column="42"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">ULONG<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name> <modifier pos:line="6" pos:column="8">*<pos:position pos:line="6" pos:column="9"/></modifier></type><name pos:line="6" pos:column="9">pos<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">int<pos:position pos:line="7" pos:column="6"/></name></type> <name pos:line="7" pos:column="7">c<pos:position pos:line="7" pos:column="8"/></name></decl>;<pos:position pos:line="7" pos:column="9"/></decl_stmt>
  
  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">err<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">&gt;=<pos:position pos:line="9" pos:column="16"/></operator> <literal type="number" pos:line="9" pos:column="14">10000<pos:position pos:line="9" pos:column="19"/></literal> <operator pos:line="9" pos:column="20">&amp;&amp;<pos:position pos:line="9" pos:column="30"/></operator> <name pos:line="9" pos:column="23">err<pos:position pos:line="9" pos:column="26"/></name> <operator pos:line="9" pos:column="27">&lt;<pos:position pos:line="9" pos:column="31"/></operator> <literal type="number" pos:line="9" pos:column="29">12000<pos:position pos:line="9" pos:column="34"/></literal></expr>)<pos:position pos:line="9" pos:column="35"/></condition><then pos:line="9" pos:column="35"> <block pos:line="9" pos:column="36">{  <comment type="block" pos:line="9" pos:column="39">/* socket error codes */</comment>
      <return pos:line="10" pos:column="7">return <expr><call><name pos:line="10" pos:column="14">stuffbuffer<pos:position pos:line="10" pos:column="25"/></name><argument_list pos:line="10" pos:column="25">(<argument><expr><name pos:line="10" pos:column="26">buf<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="31">bufsize<pos:position pos:line="10" pos:column="38"/></name></expr></argument>,
                         <argument><expr><call><name pos:line="11" pos:column="26">strerror<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><call><name pos:line="11" pos:column="35">apr_canonical_error<pos:position pos:line="11" pos:column="54"/></name><argument_list pos:line="11" pos:column="54">(<argument><expr><name pos:line="11" pos:column="55">err<pos:position pos:line="11" pos:column="58"/></name><operator pos:line="11" pos:column="58">+<pos:position pos:line="11" pos:column="59"/></operator><name pos:line="11" pos:column="59">APR_OS_START_SYSERR<pos:position pos:line="11" pos:column="78"/></name></expr></argument>)<pos:position pos:line="11" pos:column="79"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="11" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="82"/></return>
  }<pos:position pos:line="12" pos:column="4"/></block></then> 
  <elseif pos:line="13" pos:column="3">else <if pos:line="13" pos:column="8">if <condition pos:line="13" pos:column="11">(<expr><call><name pos:line="13" pos:column="12">DosGetMessage<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><name pos:line="13" pos:column="26">NULL<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="32">0<pos:position pos:line="13" pos:column="33"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="35">message<pos:position pos:line="13" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="44">HUGE_STRING_LEN<pos:position pos:line="13" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="61">err<pos:position pos:line="13" pos:column="64"/></name></expr></argument>,
			 <argument><expr><literal type="string" pos:line="14" pos:column="26">"OSO001.MSG"<pos:position pos:line="14" pos:column="38"/></literal></expr></argument>, <argument><expr><operator pos:line="14" pos:column="40">&amp;<pos:position pos:line="14" pos:column="45"/></operator><name pos:line="14" pos:column="41">len<pos:position pos:line="14" pos:column="44"/></name></expr></argument>)<pos:position pos:line="14" pos:column="45"/></argument_list></call> <operator pos:line="14" pos:column="46">==<pos:position pos:line="14" pos:column="48"/></operator> <literal type="number" pos:line="14" pos:column="49">0<pos:position pos:line="14" pos:column="50"/></literal></expr>)<pos:position pos:line="14" pos:column="51"/></condition><then pos:line="14" pos:column="51"> <block pos:line="14" pos:column="52">{
      <expr_stmt><expr><name pos:line="15" pos:column="7">len<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">--<pos:position pos:line="15" pos:column="12"/></operator></expr>;<pos:position pos:line="15" pos:column="13"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="16" pos:column="7">message<pos:position pos:line="16" pos:column="14"/></name><index pos:line="16" pos:column="14">[<expr><name pos:line="16" pos:column="15">len<pos:position pos:line="16" pos:column="18"/></name></expr>]<pos:position pos:line="16" pos:column="19"/></index></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <literal type="number" pos:line="16" pos:column="22">0<pos:position pos:line="16" pos:column="23"/></literal></expr>;<pos:position pos:line="16" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><name pos:line="17" pos:column="7">pos<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <name pos:line="17" pos:column="13">result<pos:position pos:line="17" pos:column="19"/></name></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>
  
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><name pos:line="19" pos:column="11">len<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">&gt;=<pos:position pos:line="19" pos:column="20"/></operator> <sizeof pos:line="19" pos:column="18">sizeof<argument_list pos:line="19" pos:column="24">(<argument><expr><name pos:line="19" pos:column="25">result<pos:position pos:line="19" pos:column="31"/></name></expr></argument>)<pos:position pos:line="19" pos:column="32"/></argument_list></sizeof></expr>)<pos:position pos:line="19" pos:column="33"/></condition><then pos:line="19" pos:column="33">
        <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="9">len<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">=<pos:position pos:line="20" pos:column="14"/></operator> <sizeof pos:line="20" pos:column="15">sizeof<argument_list pos:line="20" pos:column="21">(<argument><expr><name pos:line="20" pos:column="22">result<pos:position pos:line="20" pos:column="28"/></name><operator pos:line="20" pos:column="28">-<pos:position pos:line="20" pos:column="29"/></operator><literal type="number" pos:line="20" pos:column="29">1<pos:position pos:line="20" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="31"/></argument_list></sizeof></expr>;<pos:position pos:line="20" pos:column="32"/></expr_stmt></block></then></if>

      <for pos:line="22" pos:column="7">for <control pos:line="22" pos:column="11">(<init><expr><name pos:line="22" pos:column="12">c<pos:position pos:line="22" pos:column="13"/></name><operator pos:line="22" pos:column="13">=<pos:position pos:line="22" pos:column="14"/></operator><literal type="number" pos:line="22" pos:column="14">0<pos:position pos:line="22" pos:column="15"/></literal></expr>;<pos:position pos:line="22" pos:column="16"/></init> <condition><expr><name pos:line="22" pos:column="17">c<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">&lt;<pos:position pos:line="22" pos:column="22"/></operator><name pos:line="22" pos:column="19">len<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></condition> <incr><expr><name pos:line="22" pos:column="24">c<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">++<pos:position pos:line="22" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="22" pos:column="28"/></control> <block pos:line="22" pos:column="29">{
	  <comment type="block" pos:line="23" pos:column="11">/* skip multiple whitespace */</comment>
          <while pos:line="24" pos:column="11">while <condition pos:line="24" pos:column="17">(<expr><call><name pos:line="24" pos:column="18">apr_isspace<pos:position pos:line="24" pos:column="29"/></name><argument_list pos:line="24" pos:column="29">(<argument><expr><name><name pos:line="24" pos:column="30">message<pos:position pos:line="24" pos:column="37"/></name><index pos:line="24" pos:column="37">[<expr><name pos:line="24" pos:column="38">c<pos:position pos:line="24" pos:column="39"/></name></expr>]<pos:position pos:line="24" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call> <operator pos:line="24" pos:column="42">&amp;&amp;<pos:position pos:line="24" pos:column="52"/></operator> <call><name pos:line="24" pos:column="45">apr_isspace<pos:position pos:line="24" pos:column="56"/></name><argument_list pos:line="24" pos:column="56">(<argument><expr><name><name pos:line="24" pos:column="57">message<pos:position pos:line="24" pos:column="64"/></name><index pos:line="24" pos:column="64">[<expr><name pos:line="24" pos:column="65">c<pos:position pos:line="24" pos:column="66"/></name><operator pos:line="24" pos:column="66">+<pos:position pos:line="24" pos:column="67"/></operator><literal type="number" pos:line="24" pos:column="67">1<pos:position pos:line="24" pos:column="68"/></literal></expr>]<pos:position pos:line="24" pos:column="69"/></index></name></expr></argument>)<pos:position pos:line="24" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="71"/></condition>
              <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="15">c<pos:position pos:line="25" pos:column="16"/></name><operator pos:line="25" pos:column="16">++<pos:position pos:line="25" pos:column="18"/></operator></expr>;<pos:position pos:line="25" pos:column="19"/></expr_stmt></block></while>
          <expr_stmt><expr><operator pos:line="26" pos:column="11">*<pos:position pos:line="26" pos:column="12"/></operator><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">pos<pos:position pos:line="26" pos:column="16"/></name><operator pos:line="26" pos:column="16">++<pos:position pos:line="26" pos:column="18"/></operator><operator pos:line="26" pos:column="18">)<pos:position pos:line="26" pos:column="19"/></operator> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <ternary><condition><expr><call><name pos:line="26" pos:column="22">apr_isspace<pos:position pos:line="26" pos:column="33"/></name><argument_list pos:line="26" pos:column="33">(<argument><expr><name><name pos:line="26" pos:column="34">message<pos:position pos:line="26" pos:column="41"/></name><index pos:line="26" pos:column="41">[<expr><name pos:line="26" pos:column="42">c<pos:position pos:line="26" pos:column="43"/></name></expr>]<pos:position pos:line="26" pos:column="44"/></index></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr> ?<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47"> <expr><literal type="char" pos:line="26" pos:column="48">' '<pos:position pos:line="26" pos:column="51"/></literal></expr> <pos:position pos:line="26" pos:column="52"/></then><else pos:line="26" pos:column="52">: <expr><name><name pos:line="26" pos:column="54">message<pos:position pos:line="26" pos:column="61"/></name><index pos:line="26" pos:column="61">[<expr><name pos:line="26" pos:column="62">c<pos:position pos:line="26" pos:column="63"/></name></expr>]<pos:position pos:line="26" pos:column="64"/></index></name></expr></else></ternary></expr>;<pos:position pos:line="26" pos:column="65"/></expr_stmt>
      }<pos:position pos:line="27" pos:column="8"/></block></for>
  
      <expr_stmt><expr><operator pos:line="29" pos:column="7">*<pos:position pos:line="29" pos:column="8"/></operator><name pos:line="29" pos:column="8">pos<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">=<pos:position pos:line="29" pos:column="13"/></operator> <literal type="number" pos:line="29" pos:column="14">0<pos:position pos:line="29" pos:column="15"/></literal></expr>;<pos:position pos:line="29" pos:column="16"/></expr_stmt>
  }<pos:position pos:line="30" pos:column="4"/></block></then></if></elseif> 
  <else pos:line="31" pos:column="3">else <block pos:line="31" pos:column="8">{
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">sprintf<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">result<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"OS/2 error %d"<pos:position pos:line="32" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="40">err<pos:position pos:line="32" pos:column="43"/></name></expr></argument>)<pos:position pos:line="32" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt>
  }<pos:position pos:line="33" pos:column="4"/></block></else></if>

  <comment type="block" pos:line="35" pos:column="3">/* Stuff the string into the caller supplied buffer, then return 
   * a pointer to it.
   */</comment>
  <return pos:line="38" pos:column="3">return <expr><call><name pos:line="38" pos:column="10">stuffbuffer<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">buf<pos:position pos:line="38" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="27">bufsize<pos:position pos:line="38" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="36">result<pos:position pos:line="38" pos:column="42"/></name></expr></argument>)<pos:position pos:line="38" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="44"/></return>  
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
