<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2712_httpd-2.0.63.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name> <name pos:line="2" pos:column="5">PREFIX<pos:position pos:line="2" pos:column="11"/></name></type>(<name pos:line="2" pos:column="12">entityValueTok<pos:position pos:line="2" pos:column="26"/></name>)<parameter_list pos:line="2" pos:column="27">(<parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">ENCODING<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">enc<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="49">const<pos:position pos:line="2" pos:column="54"/></specifier> <name pos:line="2" pos:column="55">char<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">ptr<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="66">const<pos:position pos:line="2" pos:column="71"/></specifier> <name pos:line="2" pos:column="72">char<pos:position pos:line="2" pos:column="76"/></name> <modifier pos:line="2" pos:column="77">*<pos:position pos:line="2" pos:column="78"/></modifier></type><name pos:line="2" pos:column="78">end<pos:position pos:line="2" pos:column="81"/></name></decl></parameter>,
			   <parameter><decl><type><specifier pos:line="3" pos:column="28">const<pos:position pos:line="3" pos:column="33"/></specifier> <name pos:line="3" pos:column="34">char<pos:position pos:line="3" pos:column="38"/></name> <modifier pos:line="3" pos:column="39">*<pos:position pos:line="3" pos:column="40"/></modifier><modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier></type><name pos:line="3" pos:column="41">nextTokPtr<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="52"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="5" pos:column="3">const<pos:position pos:line="5" pos:column="8"/></specifier> <name pos:line="5" pos:column="9">char<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">start<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
  <if pos:line="6" pos:column="3">if <condition pos:line="6" pos:column="6">(<expr><name pos:line="6" pos:column="7">ptr<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">==<pos:position pos:line="6" pos:column="13"/></operator> <name pos:line="6" pos:column="14">end<pos:position pos:line="6" pos:column="17"/></name></expr>)<pos:position pos:line="6" pos:column="18"/></condition><then pos:line="6" pos:column="18">
    <block type="pseudo"><return pos:line="7" pos:column="5">return <expr><name pos:line="7" pos:column="12">XML_TOK_NONE<pos:position pos:line="7" pos:column="24"/></name></expr>;<pos:position pos:line="7" pos:column="25"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="8" pos:column="3">start<pos:position pos:line="8" pos:column="8"/></name> <operator pos:line="8" pos:column="9">=<pos:position pos:line="8" pos:column="10"/></operator> <name pos:line="8" pos:column="11">ptr<pos:position pos:line="8" pos:column="14"/></name></expr>;<pos:position pos:line="8" pos:column="15"/></expr_stmt>
  <while pos:line="9" pos:column="3">while <condition pos:line="9" pos:column="9">(<expr><name pos:line="9" pos:column="10">ptr<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">!=<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">end<pos:position pos:line="9" pos:column="20"/></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition> <block pos:line="9" pos:column="22">{
    <switch pos:line="10" pos:column="5">switch <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">BYTE_TYPE<pos:position pos:line="10" pos:column="22"/></name><argument_list pos:line="10" pos:column="22">(<argument><expr><name pos:line="10" pos:column="23">enc<pos:position pos:line="10" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="28">ptr<pos:position pos:line="10" pos:column="31"/></name></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="33"/></condition> <block pos:line="10" pos:column="34">{
<cpp:define pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">define<pos:position pos:line="11" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="11" pos:column="9">LEAD_CASE<pos:position pos:line="11" pos:column="18"/></name><parameter_list pos:line="11" pos:column="18">(<parameter><type><name pos:line="11" pos:column="19">n<pos:position pos:line="11" pos:column="20"/></name></type></parameter>)<pos:position pos:line="11" pos:column="21"/></parameter_list></cpp:macro> \
    <cpp:value pos:line="12" pos:column="5">case BT_LEAD ## n: ptr += n; break;<pos:position pos:line="12" pos:column="40"/></cpp:value></cpp:define>
    <macro><name pos:line="13" pos:column="5">LEAD_CASE<pos:position pos:line="13" pos:column="14"/></name><argument_list pos:line="13" pos:column="14">(<argument><literal type="number" pos:line="13" pos:column="15">2<pos:position pos:line="13" pos:column="16"/></literal></argument>)<pos:position pos:line="13" pos:column="17"/></argument_list></macro> <macro><name pos:line="13" pos:column="18">LEAD_CASE<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><literal type="number" pos:line="13" pos:column="28">3<pos:position pos:line="13" pos:column="29"/></literal></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></macro> <macro><name pos:line="13" pos:column="31">LEAD_CASE<pos:position pos:line="13" pos:column="40"/></name><argument_list pos:line="13" pos:column="40">(<argument><literal type="number" pos:line="13" pos:column="41">4<pos:position pos:line="13" pos:column="42"/></literal></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></macro>
<cpp:undef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">undef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">LEAD_CASE<pos:position pos:line="14" pos:column="17"/></name></cpp:undef>
    <case pos:line="15" pos:column="5">case <expr><name pos:line="15" pos:column="10">BT_AMP<pos:position pos:line="15" pos:column="16"/></name></expr>:<pos:position pos:line="15" pos:column="17"/></case>
      <if pos:line="16" pos:column="7">if <condition pos:line="16" pos:column="10">(<expr><name pos:line="16" pos:column="11">ptr<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">==<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="18">start<pos:position pos:line="16" pos:column="23"/></name></expr>)<pos:position pos:line="16" pos:column="24"/></condition><then pos:line="16" pos:column="24">
	<block type="pseudo"><return pos:line="17" pos:column="9">return <expr><call><call><name pos:line="17" pos:column="16">PREFIX<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">scanRef<pos:position pos:line="17" pos:column="30"/></name></expr></argument>)<pos:position pos:line="17" pos:column="31"/></argument_list></call><argument_list pos:line="17" pos:column="31">(<argument><expr><name pos:line="17" pos:column="32">enc<pos:position pos:line="17" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="37">ptr<pos:position pos:line="17" pos:column="40"/></name> <operator pos:line="17" pos:column="41">+<pos:position pos:line="17" pos:column="42"/></operator> <call><name pos:line="17" pos:column="43">MINBPC<pos:position pos:line="17" pos:column="49"/></name><argument_list pos:line="17" pos:column="49">(<argument><expr><name pos:line="17" pos:column="50">enc<pos:position pos:line="17" pos:column="53"/></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="17" pos:column="56">end<pos:position pos:line="17" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="61">nextTokPtr<pos:position pos:line="17" pos:column="71"/></name></expr></argument>)<pos:position pos:line="17" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="73"/></return></block></then></if>
      <expr_stmt><expr><operator pos:line="18" pos:column="7">*<pos:position pos:line="18" pos:column="8"/></operator><name pos:line="18" pos:column="8">nextTokPtr<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">=<pos:position pos:line="18" pos:column="20"/></operator> <name pos:line="18" pos:column="21">ptr<pos:position pos:line="18" pos:column="24"/></name></expr>;<pos:position pos:line="18" pos:column="25"/></expr_stmt>
      <return pos:line="19" pos:column="7">return <expr><name pos:line="19" pos:column="14">XML_TOK_DATA_CHARS<pos:position pos:line="19" pos:column="32"/></name></expr>;<pos:position pos:line="19" pos:column="33"/></return>
    <case pos:line="20" pos:column="5">case <expr><name pos:line="20" pos:column="10">BT_PERCNT<pos:position pos:line="20" pos:column="19"/></name></expr>:<pos:position pos:line="20" pos:column="20"/></case>
      <if pos:line="21" pos:column="7">if <condition pos:line="21" pos:column="10">(<expr><name pos:line="21" pos:column="11">ptr<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">==<pos:position pos:line="21" pos:column="17"/></operator> <name pos:line="21" pos:column="18">start<pos:position pos:line="21" pos:column="23"/></name></expr>)<pos:position pos:line="21" pos:column="24"/></condition><then pos:line="21" pos:column="24"> <block pos:line="21" pos:column="25">{
	<decl_stmt><decl><type><name pos:line="22" pos:column="9">int<pos:position pos:line="22" pos:column="12"/></name></type> <name pos:line="22" pos:column="13">tok<pos:position pos:line="22" pos:column="16"/></name> <init pos:line="22" pos:column="17">=  <expr><call><call><name pos:line="22" pos:column="20">PREFIX<pos:position pos:line="22" pos:column="26"/></name><argument_list pos:line="22" pos:column="26">(<argument><expr><name pos:line="22" pos:column="27">scanPercent<pos:position pos:line="22" pos:column="38"/></name></expr></argument>)<pos:position pos:line="22" pos:column="39"/></argument_list></call><argument_list pos:line="22" pos:column="39">(<argument><expr><name pos:line="22" pos:column="40">enc<pos:position pos:line="22" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="45">ptr<pos:position pos:line="22" pos:column="48"/></name> <operator pos:line="22" pos:column="49">+<pos:position pos:line="22" pos:column="50"/></operator> <call><name pos:line="22" pos:column="51">MINBPC<pos:position pos:line="22" pos:column="57"/></name><argument_list pos:line="22" pos:column="57">(<argument><expr><name pos:line="22" pos:column="58">enc<pos:position pos:line="22" pos:column="61"/></name></expr></argument>)<pos:position pos:line="22" pos:column="62"/></argument_list></call></expr></argument>,
				       <argument><expr><name pos:line="23" pos:column="40">end<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">nextTokPtr<pos:position pos:line="23" pos:column="55"/></name></expr></argument>)<pos:position pos:line="23" pos:column="56"/></argument_list></call></expr></init></decl>;<pos:position pos:line="23" pos:column="57"/></decl_stmt>
	<return pos:line="24" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="24" pos:column="16">(<pos:position pos:line="24" pos:column="17"/></operator><name pos:line="24" pos:column="17">tok<pos:position pos:line="24" pos:column="20"/></name> <operator pos:line="24" pos:column="21">==<pos:position pos:line="24" pos:column="23"/></operator> <name pos:line="24" pos:column="24">XML_TOK_PERCENT<pos:position pos:line="24" pos:column="39"/></name><operator pos:line="24" pos:column="39">)<pos:position pos:line="24" pos:column="40"/></operator></expr> ?<pos:position pos:line="24" pos:column="42"/></condition><then pos:line="24" pos:column="42"> <expr><name pos:line="24" pos:column="43">XML_TOK_INVALID<pos:position pos:line="24" pos:column="58"/></name></expr> <pos:position pos:line="24" pos:column="59"/></then><else pos:line="24" pos:column="59">: <expr><name pos:line="24" pos:column="61">tok<pos:position pos:line="24" pos:column="64"/></name></expr></else></ternary></expr>;<pos:position pos:line="24" pos:column="65"/></return>
      }<pos:position pos:line="25" pos:column="8"/></block></then></if>
      <expr_stmt><expr><operator pos:line="26" pos:column="7">*<pos:position pos:line="26" pos:column="8"/></operator><name pos:line="26" pos:column="8">nextTokPtr<pos:position pos:line="26" pos:column="18"/></name> <operator pos:line="26" pos:column="19">=<pos:position pos:line="26" pos:column="20"/></operator> <name pos:line="26" pos:column="21">ptr<pos:position pos:line="26" pos:column="24"/></name></expr>;<pos:position pos:line="26" pos:column="25"/></expr_stmt>
      <return pos:line="27" pos:column="7">return <expr><name pos:line="27" pos:column="14">XML_TOK_DATA_CHARS<pos:position pos:line="27" pos:column="32"/></name></expr>;<pos:position pos:line="27" pos:column="33"/></return>
    <case pos:line="28" pos:column="5">case <expr><name pos:line="28" pos:column="10">BT_LF<pos:position pos:line="28" pos:column="15"/></name></expr>:<pos:position pos:line="28" pos:column="16"/></case>
      <if pos:line="29" pos:column="7">if <condition pos:line="29" pos:column="10">(<expr><name pos:line="29" pos:column="11">ptr<pos:position pos:line="29" pos:column="14"/></name> <operator pos:line="29" pos:column="15">==<pos:position pos:line="29" pos:column="17"/></operator> <name pos:line="29" pos:column="18">start<pos:position pos:line="29" pos:column="23"/></name></expr>)<pos:position pos:line="29" pos:column="24"/></condition><then pos:line="29" pos:column="24"> <block pos:line="29" pos:column="25">{
	<expr_stmt><expr><operator pos:line="30" pos:column="9">*<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">nextTokPtr<pos:position pos:line="30" pos:column="20"/></name> <operator pos:line="30" pos:column="21">=<pos:position pos:line="30" pos:column="22"/></operator> <name pos:line="30" pos:column="23">ptr<pos:position pos:line="30" pos:column="26"/></name> <operator pos:line="30" pos:column="27">+<pos:position pos:line="30" pos:column="28"/></operator> <call><name pos:line="30" pos:column="29">MINBPC<pos:position pos:line="30" pos:column="35"/></name><argument_list pos:line="30" pos:column="35">(<argument><expr><name pos:line="30" pos:column="36">enc<pos:position pos:line="30" pos:column="39"/></name></expr></argument>)<pos:position pos:line="30" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="41"/></expr_stmt>
	<return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">XML_TOK_DATA_NEWLINE<pos:position pos:line="31" pos:column="36"/></name></expr>;<pos:position pos:line="31" pos:column="37"/></return>
      }<pos:position pos:line="32" pos:column="8"/></block></then></if>
      <expr_stmt><expr><operator pos:line="33" pos:column="7">*<pos:position pos:line="33" pos:column="8"/></operator><name pos:line="33" pos:column="8">nextTokPtr<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <name pos:line="33" pos:column="21">ptr<pos:position pos:line="33" pos:column="24"/></name></expr>;<pos:position pos:line="33" pos:column="25"/></expr_stmt>
      <return pos:line="34" pos:column="7">return <expr><name pos:line="34" pos:column="14">XML_TOK_DATA_CHARS<pos:position pos:line="34" pos:column="32"/></name></expr>;<pos:position pos:line="34" pos:column="33"/></return>
    <case pos:line="35" pos:column="5">case <expr><name pos:line="35" pos:column="10">BT_CR<pos:position pos:line="35" pos:column="15"/></name></expr>:<pos:position pos:line="35" pos:column="16"/></case>
      <if pos:line="36" pos:column="7">if <condition pos:line="36" pos:column="10">(<expr><name pos:line="36" pos:column="11">ptr<pos:position pos:line="36" pos:column="14"/></name> <operator pos:line="36" pos:column="15">==<pos:position pos:line="36" pos:column="17"/></operator> <name pos:line="36" pos:column="18">start<pos:position pos:line="36" pos:column="23"/></name></expr>)<pos:position pos:line="36" pos:column="24"/></condition><then pos:line="36" pos:column="24"> <block pos:line="36" pos:column="25">{
	<expr_stmt><expr><name pos:line="37" pos:column="9">ptr<pos:position pos:line="37" pos:column="12"/></name> <operator pos:line="37" pos:column="13">+=<pos:position pos:line="37" pos:column="15"/></operator> <call><name pos:line="37" pos:column="16">MINBPC<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">enc<pos:position pos:line="37" pos:column="26"/></name></expr></argument>)<pos:position pos:line="37" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="28"/></expr_stmt>
	<if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">ptr<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">==<pos:position pos:line="38" pos:column="19"/></operator> <name pos:line="38" pos:column="20">end<pos:position pos:line="38" pos:column="23"/></name></expr>)<pos:position pos:line="38" pos:column="24"/></condition><then pos:line="38" pos:column="24">
	  <block type="pseudo"><return pos:line="39" pos:column="11">return <expr><name pos:line="39" pos:column="18">XML_TOK_TRAILING_CR<pos:position pos:line="39" pos:column="37"/></name></expr>;<pos:position pos:line="39" pos:column="38"/></return></block></then></if>
	<if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">BYTE_TYPE<pos:position pos:line="40" pos:column="22"/></name><argument_list pos:line="40" pos:column="22">(<argument><expr><name pos:line="40" pos:column="23">enc<pos:position pos:line="40" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="28">ptr<pos:position pos:line="40" pos:column="31"/></name></expr></argument>)<pos:position pos:line="40" pos:column="32"/></argument_list></call> <operator pos:line="40" pos:column="33">==<pos:position pos:line="40" pos:column="35"/></operator> <name pos:line="40" pos:column="36">BT_LF<pos:position pos:line="40" pos:column="41"/></name></expr>)<pos:position pos:line="40" pos:column="42"/></condition><then pos:line="40" pos:column="42">
	  <block type="pseudo"><expr_stmt><expr><name pos:line="41" pos:column="11">ptr<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">+=<pos:position pos:line="41" pos:column="17"/></operator> <call><name pos:line="41" pos:column="18">MINBPC<pos:position pos:line="41" pos:column="24"/></name><argument_list pos:line="41" pos:column="24">(<argument><expr><name pos:line="41" pos:column="25">enc<pos:position pos:line="41" pos:column="28"/></name></expr></argument>)<pos:position pos:line="41" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="30"/></expr_stmt></block></then></if>
	<expr_stmt><expr><operator pos:line="42" pos:column="9">*<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">nextTokPtr<pos:position pos:line="42" pos:column="20"/></name> <operator pos:line="42" pos:column="21">=<pos:position pos:line="42" pos:column="22"/></operator> <name pos:line="42" pos:column="23">ptr<pos:position pos:line="42" pos:column="26"/></name></expr>;<pos:position pos:line="42" pos:column="27"/></expr_stmt>
	<return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">XML_TOK_DATA_NEWLINE<pos:position pos:line="43" pos:column="36"/></name></expr>;<pos:position pos:line="43" pos:column="37"/></return>
      }<pos:position pos:line="44" pos:column="8"/></block></then></if>
      <expr_stmt><expr><operator pos:line="45" pos:column="7">*<pos:position pos:line="45" pos:column="8"/></operator><name pos:line="45" pos:column="8">nextTokPtr<pos:position pos:line="45" pos:column="18"/></name> <operator pos:line="45" pos:column="19">=<pos:position pos:line="45" pos:column="20"/></operator> <name pos:line="45" pos:column="21">ptr<pos:position pos:line="45" pos:column="24"/></name></expr>;<pos:position pos:line="45" pos:column="25"/></expr_stmt>
      <return pos:line="46" pos:column="7">return <expr><name pos:line="46" pos:column="14">XML_TOK_DATA_CHARS<pos:position pos:line="46" pos:column="32"/></name></expr>;<pos:position pos:line="46" pos:column="33"/></return>
    <default pos:line="47" pos:column="5">default:<pos:position pos:line="47" pos:column="13"/></default>
      <expr_stmt><expr><name pos:line="48" pos:column="7">ptr<pos:position pos:line="48" pos:column="10"/></name> <operator pos:line="48" pos:column="11">+=<pos:position pos:line="48" pos:column="13"/></operator> <call><name pos:line="48" pos:column="14">MINBPC<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">enc<pos:position pos:line="48" pos:column="24"/></name></expr></argument>)<pos:position pos:line="48" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="26"/></expr_stmt>
      <break pos:line="49" pos:column="7">break;<pos:position pos:line="49" pos:column="13"/></break>
    }<pos:position pos:line="50" pos:column="6"/></block></switch>
  }<pos:position pos:line="51" pos:column="4"/></block></while>
  <expr_stmt><expr><operator pos:line="52" pos:column="3">*<pos:position pos:line="52" pos:column="4"/></operator><name pos:line="52" pos:column="4">nextTokPtr<pos:position pos:line="52" pos:column="14"/></name> <operator pos:line="52" pos:column="15">=<pos:position pos:line="52" pos:column="16"/></operator> <name pos:line="52" pos:column="17">ptr<pos:position pos:line="52" pos:column="20"/></name></expr>;<pos:position pos:line="52" pos:column="21"/></expr_stmt>
  <return pos:line="53" pos:column="3">return <expr><name pos:line="53" pos:column="10">XML_TOK_DATA_CHARS<pos:position pos:line="53" pos:column="28"/></name></expr>;<pos:position pos:line="53" pos:column="29"/></return>
}<pos:position pos:line="54" pos:column="2"/></block></function></unit>
