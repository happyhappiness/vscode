<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2413_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">server_main_loop<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">remaining_threads_to_start<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">child_slot<pos:position pos:line="3" pos:column="19"/></name></decl>;<pos:position pos:line="3" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_exit_why_e<pos:position pos:line="4" pos:column="19"/></name></type> <name pos:line="4" pos:column="20">exitwhy<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">status<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_proc_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">pid<pos:position pos:line="6" pos:column="19"/></name></decl>;<pos:position pos:line="6" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">i<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>

    <while pos:line="9" pos:column="5">while <condition pos:line="9" pos:column="11">(<expr><operator pos:line="9" pos:column="12">!<pos:position pos:line="9" pos:column="13"/></operator><name pos:line="9" pos:column="13">restart_pending<pos:position pos:line="9" pos:column="28"/></name> <operator pos:line="9" pos:column="29">&amp;&amp;<pos:position pos:line="9" pos:column="39"/></operator> <operator pos:line="9" pos:column="32">!<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="33">shutdown_pending<pos:position pos:line="9" pos:column="49"/></name></expr>)<pos:position pos:line="9" pos:column="50"/></condition> <block pos:line="9" pos:column="51">{

        <expr_stmt><expr><call><name pos:line="11" pos:column="9">ap_wait_or_timeout<pos:position pos:line="11" pos:column="27"/></name><argument_list pos:line="11" pos:column="27">(<argument><expr><operator pos:line="11" pos:column="28">&amp;<pos:position pos:line="11" pos:column="33"/></operator><name pos:line="11" pos:column="29">exitwhy<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="38">&amp;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="39">status<pos:position pos:line="11" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="47">&amp;<pos:position pos:line="11" pos:column="52"/></operator><name pos:line="11" pos:column="48">pid<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="53">pconf<pos:position pos:line="11" pos:column="58"/></name></expr></argument>)<pos:position pos:line="11" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="60"/></expr_stmt>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name><name pos:line="13" pos:column="13">pid<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">.<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="17">pid<pos:position pos:line="13" pos:column="20"/></name></name> <operator pos:line="13" pos:column="21">&gt;=<pos:position pos:line="13" pos:column="26"/></operator> <literal type="number" pos:line="13" pos:column="24">0<pos:position pos:line="13" pos:column="25"/></literal></expr>)<pos:position pos:line="13" pos:column="26"/></condition><then pos:line="13" pos:column="26"> <block pos:line="13" pos:column="27">{
            <if pos:line="14" pos:column="13">if <condition pos:line="14" pos:column="16">(<expr><call><name pos:line="14" pos:column="17">ap_process_child_status<pos:position pos:line="14" pos:column="40"/></name><argument_list pos:line="14" pos:column="40">(<argument><expr><operator pos:line="14" pos:column="41">&amp;<pos:position pos:line="14" pos:column="46"/></operator><name pos:line="14" pos:column="42">pid<pos:position pos:line="14" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="47">exitwhy<pos:position pos:line="14" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="56">status<pos:position pos:line="14" pos:column="62"/></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call> <operator pos:line="14" pos:column="64">==<pos:position pos:line="14" pos:column="66"/></operator> <name pos:line="14" pos:column="67">APEXIT_CHILDFATAL<pos:position pos:line="14" pos:column="84"/></name></expr>)<pos:position pos:line="14" pos:column="85"/></condition><then pos:line="14" pos:column="85"> <block pos:line="14" pos:column="86">{
                <expr_stmt><expr><name pos:line="15" pos:column="17">shutdown_pending<pos:position pos:line="15" pos:column="33"/></name> <operator pos:line="15" pos:column="34">=<pos:position pos:line="15" pos:column="35"/></operator> <literal type="number" pos:line="15" pos:column="36">1<pos:position pos:line="15" pos:column="37"/></literal></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name pos:line="16" pos:column="17">child_fatal<pos:position pos:line="16" pos:column="28"/></name> <operator pos:line="16" pos:column="29">=<pos:position pos:line="16" pos:column="30"/></operator> <literal type="number" pos:line="16" pos:column="31">1<pos:position pos:line="16" pos:column="32"/></literal></expr>;<pos:position pos:line="16" pos:column="33"/></expr_stmt>
                <return pos:line="17" pos:column="17">return;<pos:position pos:line="17" pos:column="24"/></return>
            }<pos:position pos:line="18" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="19" pos:column="13">/* non-fatal death... note that it's gone in the scoreboard. */</comment>
            <expr_stmt><expr><name pos:line="20" pos:column="13">child_slot<pos:position pos:line="20" pos:column="23"/></name> <operator pos:line="20" pos:column="24">=<pos:position pos:line="20" pos:column="25"/></operator> <operator pos:line="20" pos:column="26">-<pos:position pos:line="20" pos:column="27"/></operator><literal type="number" pos:line="20" pos:column="27">1<pos:position pos:line="20" pos:column="28"/></literal></expr>;<pos:position pos:line="20" pos:column="29"/></expr_stmt>
            <for pos:line="21" pos:column="13">for <control pos:line="21" pos:column="17">(<init><expr><name pos:line="21" pos:column="18">i<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr>;<pos:position pos:line="21" pos:column="24"/></init> <condition><expr><name pos:line="21" pos:column="25">i<pos:position pos:line="21" pos:column="26"/></name> <operator pos:line="21" pos:column="27">&lt;<pos:position pos:line="21" pos:column="31"/></operator> <name pos:line="21" pos:column="29">ap_max_child_assigned<pos:position pos:line="21" pos:column="50"/></name></expr>;<pos:position pos:line="21" pos:column="51"/></condition> <incr><expr><operator pos:line="21" pos:column="52">++<pos:position pos:line="21" pos:column="54"/></operator><name pos:line="21" pos:column="54">i<pos:position pos:line="21" pos:column="55"/></name></expr></incr>)<pos:position pos:line="21" pos:column="56"/></control> <block pos:line="21" pos:column="57">{
                <if pos:line="22" pos:column="17">if <condition pos:line="22" pos:column="20">(<expr><name><name pos:line="22" pos:column="21">ap_scoreboard_image<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">-&gt;<pos:position pos:line="22" pos:column="45"/></operator><name pos:line="22" pos:column="42">servers<pos:position pos:line="22" pos:column="49"/></name><index pos:line="22" pos:column="49">[<expr><literal type="number" pos:line="22" pos:column="50">0<pos:position pos:line="22" pos:column="51"/></literal></expr>]<pos:position pos:line="22" pos:column="52"/></index><index pos:line="22" pos:column="52">[<expr><name pos:line="22" pos:column="53">i<pos:position pos:line="22" pos:column="54"/></name></expr>]<pos:position pos:line="22" pos:column="55"/></index></name><operator pos:line="22" pos:column="55">.<pos:position pos:line="22" pos:column="56"/></operator><name pos:line="22" pos:column="56">tid<pos:position pos:line="22" pos:column="59"/></name> <operator pos:line="22" pos:column="60">==<pos:position pos:line="22" pos:column="62"/></operator> <name><name pos:line="22" pos:column="63">pid<pos:position pos:line="22" pos:column="66"/></name><operator pos:line="22" pos:column="66">.<pos:position pos:line="22" pos:column="67"/></operator><name pos:line="22" pos:column="67">pid<pos:position pos:line="22" pos:column="70"/></name></name></expr>)<pos:position pos:line="22" pos:column="71"/></condition><then pos:line="22" pos:column="71"> <block pos:line="22" pos:column="72">{
                    <expr_stmt><expr><name pos:line="23" pos:column="21">child_slot<pos:position pos:line="23" pos:column="31"/></name> <operator pos:line="23" pos:column="32">=<pos:position pos:line="23" pos:column="33"/></operator> <name pos:line="23" pos:column="34">i<pos:position pos:line="23" pos:column="35"/></name></expr>;<pos:position pos:line="23" pos:column="36"/></expr_stmt>
                    <break pos:line="24" pos:column="21">break;<pos:position pos:line="24" pos:column="27"/></break>
                }<pos:position pos:line="25" pos:column="18"/></block></then></if>
            }<pos:position pos:line="26" pos:column="14"/></block></for>
            <if pos:line="27" pos:column="13">if <condition pos:line="27" pos:column="16">(<expr><name pos:line="27" pos:column="17">child_slot<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">&gt;=<pos:position pos:line="27" pos:column="33"/></operator> <literal type="number" pos:line="27" pos:column="31">0<pos:position pos:line="27" pos:column="32"/></literal></expr>)<pos:position pos:line="27" pos:column="33"/></condition><then pos:line="27" pos:column="33"> <block pos:line="27" pos:column="34">{
                <expr_stmt><expr><name><name pos:line="28" pos:column="17">ap_scoreboard_image<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">-&gt;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="38">servers<pos:position pos:line="28" pos:column="45"/></name><index pos:line="28" pos:column="45">[<expr><literal type="number" pos:line="28" pos:column="46">0<pos:position pos:line="28" pos:column="47"/></literal></expr>]<pos:position pos:line="28" pos:column="48"/></index><index pos:line="28" pos:column="48">[<expr><name pos:line="28" pos:column="49">child_slot<pos:position pos:line="28" pos:column="59"/></name></expr>]<pos:position pos:line="28" pos:column="60"/></index></name><operator pos:line="28" pos:column="60">.<pos:position pos:line="28" pos:column="61"/></operator><name pos:line="28" pos:column="61">tid<pos:position pos:line="28" pos:column="64"/></name> <operator pos:line="28" pos:column="65">=<pos:position pos:line="28" pos:column="66"/></operator> <literal type="number" pos:line="28" pos:column="67">0<pos:position pos:line="28" pos:column="68"/></literal></expr>;<pos:position pos:line="28" pos:column="69"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="29" pos:column="17">(<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">void<pos:position pos:line="29" pos:column="22"/></name><operator pos:line="29" pos:column="22">)<pos:position pos:line="29" pos:column="23"/></operator> <call><name pos:line="29" pos:column="24">ap_update_child_status_from_indexes<pos:position pos:line="29" pos:column="59"/></name><argument_list pos:line="29" pos:column="59">(<argument><expr><literal type="number" pos:line="29" pos:column="60">0<pos:position pos:line="29" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="29" pos:column="63">child_slot<pos:position pos:line="29" pos:column="73"/></name></expr></argument>,
                                                           <argument><expr><name pos:line="30" pos:column="60">SERVER_DEAD<pos:position pos:line="30" pos:column="71"/></name></expr></argument>,
                                                           <argument><expr><operator pos:line="31" pos:column="60">(<pos:position pos:line="31" pos:column="61"/></operator><name pos:line="31" pos:column="61">request_rec<pos:position pos:line="31" pos:column="72"/></name><operator pos:line="31" pos:column="72">*<pos:position pos:line="31" pos:column="73"/></operator><operator pos:line="31" pos:column="73">)<pos:position pos:line="31" pos:column="74"/></operator><name pos:line="31" pos:column="74">NULL<pos:position pos:line="31" pos:column="78"/></name></expr></argument>)<pos:position pos:line="31" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="80"/></expr_stmt>

                <if pos:line="33" pos:column="17">if <condition pos:line="33" pos:column="20">(<expr><name pos:line="33" pos:column="21">remaining_threads_to_start<pos:position pos:line="33" pos:column="47"/></name>
                            <operator pos:line="34" pos:column="29">&amp;&amp;<pos:position pos:line="34" pos:column="39"/></operator> <name pos:line="34" pos:column="32">child_slot<pos:position pos:line="34" pos:column="42"/></name> <operator pos:line="34" pos:column="43">&lt;<pos:position pos:line="34" pos:column="47"/></operator> <name pos:line="34" pos:column="45">ap_thread_limit<pos:position pos:line="34" pos:column="60"/></name></expr>)<pos:position pos:line="34" pos:column="61"/></condition><then pos:line="34" pos:column="61"> <block pos:line="34" pos:column="62">{
                    <comment type="block" pos:line="35" pos:column="21">/* we're still doing a 1-for-1 replacement of dead
                     * children with new children
                     */</comment>
                    <expr_stmt><expr><call><name pos:line="38" pos:column="21">make_worker<pos:position pos:line="38" pos:column="32"/></name><argument_list pos:line="38" pos:column="32">(<argument><expr><name pos:line="38" pos:column="33">child_slot<pos:position pos:line="38" pos:column="43"/></name></expr></argument>)<pos:position pos:line="38" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="45"/></expr_stmt>
                    <expr_stmt><expr><operator pos:line="39" pos:column="21">--<pos:position pos:line="39" pos:column="23"/></operator><name pos:line="39" pos:column="23">remaining_threads_to_start<pos:position pos:line="39" pos:column="49"/></name></expr>;<pos:position pos:line="39" pos:column="50"/></expr_stmt>
                        }<pos:position pos:line="40" pos:column="26"/></block></then></if>
<comment type="block" pos:line="41" pos:column="1">/* TODO
#if APR_HAS_OTHER_CHILD
            }
            else if (apr_proc_other_child_refresh(&amp;pid, status) == 0) {
#endif
*/</comment>
            }<pos:position pos:line="47" pos:column="14"/></block></then>
            <elseif pos:line="48" pos:column="13">else <if pos:line="48" pos:column="18">if <condition pos:line="48" pos:column="21">(<expr><name pos:line="48" pos:column="22">is_graceful<pos:position pos:line="48" pos:column="33"/></name></expr>)<pos:position pos:line="48" pos:column="34"/></condition><then pos:line="48" pos:column="34"> <block pos:line="48" pos:column="35">{
                <comment type="block" pos:line="49" pos:column="17">/* Great, we've probably just lost a slot in the
                 * scoreboard.  Somehow we don't know about this
                 * child.
                 */</comment>
                 <expr_stmt><expr><call><name pos:line="53" pos:column="18">ap_log_error<pos:position pos:line="53" pos:column="30"/></name><argument_list pos:line="53" pos:column="30">(<argument><expr><name pos:line="53" pos:column="31">APLOG_MARK<pos:position pos:line="53" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="43">APLOG_WARNING<pos:position pos:line="53" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="58">0<pos:position pos:line="53" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="61">ap_server_conf<pos:position pos:line="53" pos:column="75"/></name></expr></argument>,
                                          <argument><expr><literal type="string" pos:line="54" pos:column="43">"long lost child came home! (pid %ld)"<pos:position pos:line="54" pos:column="81"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="83">pid<pos:position pos:line="54" pos:column="86"/></name><operator pos:line="54" pos:column="86">.<pos:position pos:line="54" pos:column="87"/></operator><name pos:line="54" pos:column="87">pid<pos:position pos:line="54" pos:column="90"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="92"/></expr_stmt>
            }<pos:position pos:line="55" pos:column="14"/></block></then></if></elseif></if>

            <comment type="block" pos:line="57" pos:column="13">/* Don't perform idle maintenance when a child dies,
             * only do it when there's a timeout.  Remember only a
             * finite number of children can die, and it's pretty
             * pathological for a lot to die suddenly.
             */</comment>
             <continue pos:line="62" pos:column="14">continue;<pos:position pos:line="62" pos:column="23"/></continue>
         }<pos:position pos:line="63" pos:column="11"/></block></then>
             <elseif pos:line="64" pos:column="14">else <if pos:line="64" pos:column="19">if <condition pos:line="64" pos:column="22">(<expr><name pos:line="64" pos:column="23">remaining_threads_to_start<pos:position pos:line="64" pos:column="49"/></name></expr>)<pos:position pos:line="64" pos:column="50"/></condition><then pos:line="64" pos:column="50"> <block pos:line="64" pos:column="51">{
             <comment type="block" pos:line="65" pos:column="14">/* we hit a 1 second timeout in which none of the previous
              * generation of children needed to be reaped... so assume
              * they're all done, and pick up the slack if any is left.
              */</comment>
              <expr_stmt><expr><call><name pos:line="69" pos:column="15">startup_threads<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">remaining_threads_to_start<pos:position pos:line="69" pos:column="57"/></name></expr></argument>)<pos:position pos:line="69" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="59"/></expr_stmt>
              <expr_stmt><expr><name pos:line="70" pos:column="15">remaining_threads_to_start<pos:position pos:line="70" pos:column="41"/></name> <operator pos:line="70" pos:column="42">=<pos:position pos:line="70" pos:column="43"/></operator> <literal type="number" pos:line="70" pos:column="44">0<pos:position pos:line="70" pos:column="45"/></literal></expr>;<pos:position pos:line="70" pos:column="46"/></expr_stmt>
              <comment type="block" pos:line="71" pos:column="15">/* In any event we really shouldn't do the code below because
               * few of the servers we just started are in the IDLE state
               * yet, so we'd mistakenly create an extra server.
               */</comment>
              <continue pos:line="75" pos:column="15">continue;<pos:position pos:line="75" pos:column="24"/></continue>
         }<pos:position pos:line="76" pos:column="11"/></block></then></if></elseif></if>
         <expr_stmt><expr><call><name pos:line="77" pos:column="10">perform_idle_server_maintenance<pos:position pos:line="77" pos:column="41"/></name><argument_list pos:line="77" pos:column="41">()<pos:position pos:line="77" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></while>
}<pos:position pos:line="79" pos:column="2"/></block></function></unit>
