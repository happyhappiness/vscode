<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_80_httpd-2.4.20.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">long<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ssl_print_cb<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">BIO<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">bio<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="35">int<pos:position pos:line="1" pos:column="38"/></name></type> <name pos:line="1" pos:column="39">cmd<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>,<parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">argp<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="60">int<pos:position pos:line="1" pos:column="63"/></name></type> <name pos:line="1" pos:column="64">argi<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="69">long<pos:position pos:line="1" pos:column="73"/></name></type> <name pos:line="1" pos:column="74">argl<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="79">long<pos:position pos:line="1" pos:column="83"/></name></type> <name pos:line="1" pos:column="84">ret<pos:position pos:line="1" pos:column="87"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="88"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">BIO<pos:position pos:line="3" pos:column="8"/></name> <modifier pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></modifier></type><name pos:line="3" pos:column="10">out<pos:position pos:line="3" pos:column="13"/></name></decl>;<pos:position pos:line="3" pos:column="14"/></decl_stmt>

    <expr_stmt><expr><name pos:line="5" pos:column="5">out<pos:position pos:line="5" pos:column="8"/></name><operator pos:line="5" pos:column="8">=<pos:position pos:line="5" pos:column="9"/></operator><operator pos:line="5" pos:column="9">(<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">BIO<pos:position pos:line="5" pos:column="13"/></name> <operator pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></operator><operator pos:line="5" pos:column="15">)<pos:position pos:line="5" pos:column="16"/></operator><call><name pos:line="5" pos:column="16">BIO_get_callback_arg<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">(<argument><expr><name pos:line="5" pos:column="37">bio<pos:position pos:line="5" pos:column="40"/></name></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="5" pos:column="42"/></expr_stmt>
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">out<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">==<pos:position pos:line="6" pos:column="15"/></operator> <name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block type="pseudo"><return pos:line="6" pos:column="22">return<expr><operator pos:line="6" pos:column="28">(<pos:position pos:line="6" pos:column="29"/></operator><name pos:line="6" pos:column="29">ret<pos:position pos:line="6" pos:column="32"/></name><operator pos:line="6" pos:column="32">)<pos:position pos:line="6" pos:column="33"/></operator></expr>;<pos:position pos:line="6" pos:column="34"/></return></block></then></if>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">cmd<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">==<pos:position pos:line="8" pos:column="15"/></operator> <operator pos:line="8" pos:column="16">(<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">BIO_CB_READ<pos:position pos:line="8" pos:column="28"/></name><operator pos:line="8" pos:column="28">|<pos:position pos:line="8" pos:column="29"/></operator><name pos:line="8" pos:column="29">BIO_CB_RETURN<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">)<pos:position pos:line="8" pos:column="43"/></operator></expr>)<pos:position pos:line="8" pos:column="44"/></condition><then pos:line="8" pos:column="44"> <block pos:line="8" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">BIO_printf<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">out<pos:position pos:line="9" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="9" pos:column="24">"read from %p [%p] (%d bytes =&gt; %ld (0x%lX))\n"<pos:position pos:line="9" pos:column="74"/></literal></expr></argument>,
                   <argument><expr><name pos:line="10" pos:column="20">bio<pos:position pos:line="10" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="25">argp<pos:position pos:line="10" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="31">argi<pos:position pos:line="10" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="37">ret<pos:position pos:line="10" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="42">ret<pos:position pos:line="10" pos:column="45"/></name></expr></argument>)<pos:position pos:line="10" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">BIO_dump<pos:position pos:line="11" pos:column="17"/></name><argument_list pos:line="11" pos:column="17">(<argument><expr><name pos:line="11" pos:column="18">out<pos:position pos:line="11" pos:column="21"/></name></expr></argument>,<argument><expr><operator pos:line="11" pos:column="22">(<pos:position pos:line="11" pos:column="23"/></operator><name pos:line="11" pos:column="23">char<pos:position pos:line="11" pos:column="27"/></name> <operator pos:line="11" pos:column="28">*<pos:position pos:line="11" pos:column="29"/></operator><operator pos:line="11" pos:column="29">)<pos:position pos:line="11" pos:column="30"/></operator><name pos:line="11" pos:column="30">argp<pos:position pos:line="11" pos:column="34"/></name></expr></argument>,<argument><expr><operator pos:line="11" pos:column="35">(<pos:position pos:line="11" pos:column="36"/></operator><name pos:line="11" pos:column="36">int<pos:position pos:line="11" pos:column="39"/></name><operator pos:line="11" pos:column="39">)<pos:position pos:line="11" pos:column="40"/></operator><name pos:line="11" pos:column="40">ret<pos:position pos:line="11" pos:column="43"/></name></expr></argument>)<pos:position pos:line="11" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="45"/></expr_stmt>
        <return pos:line="12" pos:column="9">return<expr><operator pos:line="12" pos:column="15">(<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="16">ret<pos:position pos:line="12" pos:column="19"/></name><operator pos:line="12" pos:column="19">)<pos:position pos:line="12" pos:column="20"/></operator></expr>;<pos:position pos:line="12" pos:column="21"/></return>
    }<pos:position pos:line="13" pos:column="6"/></block></then>
    <elseif pos:line="14" pos:column="5">else <if pos:line="14" pos:column="10">if <condition pos:line="14" pos:column="13">(<expr><name pos:line="14" pos:column="14">cmd<pos:position pos:line="14" pos:column="17"/></name> <operator pos:line="14" pos:column="18">==<pos:position pos:line="14" pos:column="20"/></operator> <operator pos:line="14" pos:column="21">(<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">BIO_CB_WRITE<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">|<pos:position pos:line="14" pos:column="35"/></operator><name pos:line="14" pos:column="35">BIO_CB_RETURN<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">)<pos:position pos:line="14" pos:column="49"/></operator></expr>)<pos:position pos:line="14" pos:column="50"/></condition><then pos:line="14" pos:column="50"> <block pos:line="14" pos:column="51">{
        <expr_stmt><expr><call><name pos:line="15" pos:column="9">BIO_printf<pos:position pos:line="15" pos:column="19"/></name><argument_list pos:line="15" pos:column="19">(<argument><expr><name pos:line="15" pos:column="20">out<pos:position pos:line="15" pos:column="23"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="15" pos:column="24">"write to %p [%p] (%d bytes =&gt; %ld (0x%lX))\n"<pos:position pos:line="15" pos:column="73"/></literal></expr></argument>,
                   <argument><expr><name pos:line="16" pos:column="20">bio<pos:position pos:line="16" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="25">argp<pos:position pos:line="16" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="31">argi<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="37">ret<pos:position pos:line="16" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="42">ret<pos:position pos:line="16" pos:column="45"/></name></expr></argument>)<pos:position pos:line="16" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">BIO_dump<pos:position pos:line="17" pos:column="17"/></name><argument_list pos:line="17" pos:column="17">(<argument><expr><name pos:line="17" pos:column="18">out<pos:position pos:line="17" pos:column="21"/></name></expr></argument>,<argument><expr><operator pos:line="17" pos:column="22">(<pos:position pos:line="17" pos:column="23"/></operator><name pos:line="17" pos:column="23">char<pos:position pos:line="17" pos:column="27"/></name> <operator pos:line="17" pos:column="28">*<pos:position pos:line="17" pos:column="29"/></operator><operator pos:line="17" pos:column="29">)<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="30">argp<pos:position pos:line="17" pos:column="34"/></name></expr></argument>,<argument><expr><operator pos:line="17" pos:column="35">(<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="36">int<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">)<pos:position pos:line="17" pos:column="40"/></operator><name pos:line="17" pos:column="40">ret<pos:position pos:line="17" pos:column="43"/></name></expr></argument>)<pos:position pos:line="17" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if></elseif></if>
    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">ret<pos:position pos:line="19" pos:column="15"/></name></expr>;<pos:position pos:line="19" pos:column="16"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
