<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1710_httpd-2.2.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_size_t<pos:position pos:line="1" pos:column="18"/></name></type> <name pos:line="1" pos:column="19">find_start_sequence<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">include_ctx_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">ctx<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">data<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">apr_size_t<pos:position pos:line="2" pos:column="49"/></name></type> <name pos:line="2" pos:column="50">len<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">ssi_internal_ctx<pos:position pos:line="4" pos:column="28"/></name></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">intern<pos:position pos:line="4" pos:column="36"/></name> <init pos:line="4" pos:column="37">= <expr><name><name pos:line="4" pos:column="39">ctx<pos:position pos:line="4" pos:column="42"/></name><operator pos:line="4" pos:column="42">-&gt;<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="44">intern<pos:position pos:line="4" pos:column="50"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="51"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">slen<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><name><name pos:line="5" pos:column="23">intern<pos:position pos:line="5" pos:column="29"/></name><operator pos:line="5" pos:column="29">-&gt;<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="31">start_seq_pat<pos:position pos:line="5" pos:column="44"/></name><operator pos:line="5" pos:column="44">-&gt;<pos:position pos:line="5" pos:column="49"/></operator><name pos:line="5" pos:column="46">pattern_len<pos:position pos:line="5" pos:column="57"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="58"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">index<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">p<pos:position pos:line="7" pos:column="18"/></name></decl>, <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="21">ep<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">len<pos:position pos:line="9" pos:column="12"/></name> <operator pos:line="9" pos:column="13">&lt;<pos:position pos:line="9" pos:column="17"/></operator> <name pos:line="9" pos:column="15">slen<pos:position pos:line="9" pos:column="19"/></name></expr>)<pos:position pos:line="9" pos:column="20"/></condition><then pos:line="9" pos:column="20"> <block pos:line="9" pos:column="21">{
        <expr_stmt><expr><name pos:line="10" pos:column="9">p<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <name pos:line="10" pos:column="13">data<pos:position pos:line="10" pos:column="17"/></name></expr>;<pos:position pos:line="10" pos:column="18"/></expr_stmt> <comment type="block" pos:line="10" pos:column="19">/* try partial match at the end of the buffer (below) */</comment>
    }<pos:position pos:line="11" pos:column="6"/></block></then>
    <else pos:line="12" pos:column="5">else <block pos:line="12" pos:column="10">{
        <comment type="block" pos:line="13" pos:column="9">/* try fast bndm search over the buffer
         * (hopefully the whole start sequence can be found in this buffer)
         */</comment>
        <expr_stmt><expr><name pos:line="16" pos:column="9">index<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">=<pos:position pos:line="16" pos:column="16"/></operator> <call><name pos:line="16" pos:column="17">bndm<pos:position pos:line="16" pos:column="21"/></name><argument_list pos:line="16" pos:column="21">(<argument><expr><name><name pos:line="16" pos:column="22">intern<pos:position pos:line="16" pos:column="28"/></name><operator pos:line="16" pos:column="28">-&gt;<pos:position pos:line="16" pos:column="33"/></operator><name pos:line="16" pos:column="30">start_seq_pat<pos:position pos:line="16" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="45">data<pos:position pos:line="16" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="51">len<pos:position pos:line="16" pos:column="54"/></name></expr></argument>)<pos:position pos:line="16" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="56"/></expr_stmt>

        <comment type="block" pos:line="18" pos:column="9">/* wow, found it. ready. */</comment>
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">index<pos:position pos:line="19" pos:column="18"/></name> <operator pos:line="19" pos:column="19">&lt;<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="21">len<pos:position pos:line="19" pos:column="24"/></name></expr>)<pos:position pos:line="19" pos:column="25"/></condition><then pos:line="19" pos:column="25"> <block pos:line="19" pos:column="26">{
            <expr_stmt><expr><name><name pos:line="20" pos:column="13">intern<pos:position pos:line="20" pos:column="19"/></name><operator pos:line="20" pos:column="19">-&gt;<pos:position pos:line="20" pos:column="24"/></operator><name pos:line="20" pos:column="21">state<pos:position pos:line="20" pos:column="26"/></name></name> <operator pos:line="20" pos:column="27">=<pos:position pos:line="20" pos:column="28"/></operator> <name pos:line="20" pos:column="29">PARSE_DIRECTIVE<pos:position pos:line="20" pos:column="44"/></name></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt>
            <return pos:line="21" pos:column="13">return <expr><name pos:line="21" pos:column="20">index<pos:position pos:line="21" pos:column="25"/></name></expr>;<pos:position pos:line="21" pos:column="26"/></return>
        }<pos:position pos:line="22" pos:column="10"/></block></then>
        <else pos:line="23" pos:column="9">else <block pos:line="23" pos:column="14">{
            <comment type="block" pos:line="24" pos:column="13">/* ok, the pattern can't be found as whole in the buffer,
             * check the end for a partial match
             */</comment>
            <expr_stmt><expr><name pos:line="27" pos:column="13">p<pos:position pos:line="27" pos:column="14"/></name> <operator pos:line="27" pos:column="15">=<pos:position pos:line="27" pos:column="16"/></operator> <name pos:line="27" pos:column="17">data<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">+<pos:position pos:line="27" pos:column="23"/></operator> <name pos:line="27" pos:column="24">len<pos:position pos:line="27" pos:column="27"/></name> <operator pos:line="27" pos:column="28">-<pos:position pos:line="27" pos:column="29"/></operator> <name pos:line="27" pos:column="30">slen<pos:position pos:line="27" pos:column="34"/></name> <operator pos:line="27" pos:column="35">+<pos:position pos:line="27" pos:column="36"/></operator> <literal type="number" pos:line="27" pos:column="37">1<pos:position pos:line="27" pos:column="38"/></literal></expr>;<pos:position pos:line="27" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></else></if>
    }<pos:position pos:line="29" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="31" pos:column="5">ep<pos:position pos:line="31" pos:column="7"/></name> <operator pos:line="31" pos:column="8">=<pos:position pos:line="31" pos:column="9"/></operator> <name pos:line="31" pos:column="10">data<pos:position pos:line="31" pos:column="14"/></name> <operator pos:line="31" pos:column="15">+<pos:position pos:line="31" pos:column="16"/></operator> <name pos:line="31" pos:column="17">len<pos:position pos:line="31" pos:column="20"/></name></expr>;<pos:position pos:line="31" pos:column="21"/></expr_stmt>
    <do pos:line="32" pos:column="5">do <block pos:line="32" pos:column="8">{
        <while pos:line="33" pos:column="9">while <condition pos:line="33" pos:column="15">(<expr><name pos:line="33" pos:column="16">p<pos:position pos:line="33" pos:column="17"/></name> <operator pos:line="33" pos:column="18">&lt;<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="20">ep<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">&amp;&amp;<pos:position pos:line="33" pos:column="33"/></operator> <operator pos:line="33" pos:column="26">*<pos:position pos:line="33" pos:column="27"/></operator><name pos:line="33" pos:column="27">p<pos:position pos:line="33" pos:column="28"/></name> <operator pos:line="33" pos:column="29">!=<pos:position pos:line="33" pos:column="31"/></operator> <operator pos:line="33" pos:column="32">*<pos:position pos:line="33" pos:column="33"/></operator><name><name pos:line="33" pos:column="33">intern<pos:position pos:line="33" pos:column="39"/></name><operator pos:line="33" pos:column="39">-&gt;<pos:position pos:line="33" pos:column="44"/></operator><name pos:line="33" pos:column="41">start_seq<pos:position pos:line="33" pos:column="50"/></name></name></expr>)<pos:position pos:line="33" pos:column="51"/></condition> <block pos:line="33" pos:column="52">{
            <expr_stmt><expr><operator pos:line="34" pos:column="13">++<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">p<pos:position pos:line="34" pos:column="16"/></name></expr>;<pos:position pos:line="34" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></while>

        <expr_stmt><expr><name pos:line="37" pos:column="9">index<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <name pos:line="37" pos:column="17">p<pos:position pos:line="37" pos:column="18"/></name> <operator pos:line="37" pos:column="19">-<pos:position pos:line="37" pos:column="20"/></operator> <name pos:line="37" pos:column="21">data<pos:position pos:line="37" pos:column="25"/></name></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt>

        <comment type="block" pos:line="39" pos:column="9">/* found a possible start_seq start */</comment>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><name pos:line="40" pos:column="13">p<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">&lt;<pos:position pos:line="40" pos:column="19"/></operator> <name pos:line="40" pos:column="17">ep<pos:position pos:line="40" pos:column="19"/></name></expr>)<pos:position pos:line="40" pos:column="20"/></condition><then pos:line="40" pos:column="20"> <block pos:line="40" pos:column="21">{
            <decl_stmt><decl><type><name pos:line="41" pos:column="13">apr_size_t<pos:position pos:line="41" pos:column="23"/></name></type> <name pos:line="41" pos:column="24">pos<pos:position pos:line="41" pos:column="27"/></name> <init pos:line="41" pos:column="28">= <expr><literal type="number" pos:line="41" pos:column="30">1<pos:position pos:line="41" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="41" pos:column="32"/></decl_stmt>

            <expr_stmt><expr><operator pos:line="43" pos:column="13">++<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">p<pos:position pos:line="43" pos:column="16"/></name></expr>;<pos:position pos:line="43" pos:column="17"/></expr_stmt>
            <while pos:line="44" pos:column="13">while <condition pos:line="44" pos:column="19">(<expr><name pos:line="44" pos:column="20">p<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">&lt;<pos:position pos:line="44" pos:column="26"/></operator> <name pos:line="44" pos:column="24">ep<pos:position pos:line="44" pos:column="26"/></name> <operator pos:line="44" pos:column="27">&amp;&amp;<pos:position pos:line="44" pos:column="37"/></operator> <operator pos:line="44" pos:column="30">*<pos:position pos:line="44" pos:column="31"/></operator><name pos:line="44" pos:column="31">p<pos:position pos:line="44" pos:column="32"/></name> <operator pos:line="44" pos:column="33">==<pos:position pos:line="44" pos:column="35"/></operator> <name><name pos:line="44" pos:column="36">intern<pos:position pos:line="44" pos:column="42"/></name><operator pos:line="44" pos:column="42">-&gt;<pos:position pos:line="44" pos:column="47"/></operator><name pos:line="44" pos:column="44">start_seq<pos:position pos:line="44" pos:column="53"/></name><index pos:line="44" pos:column="53">[<expr><name pos:line="44" pos:column="54">pos<pos:position pos:line="44" pos:column="57"/></name></expr>]<pos:position pos:line="44" pos:column="58"/></index></name></expr>)<pos:position pos:line="44" pos:column="59"/></condition> <block pos:line="44" pos:column="60">{
                <expr_stmt><expr><operator pos:line="45" pos:column="17">++<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">p<pos:position pos:line="45" pos:column="20"/></name></expr>;<pos:position pos:line="45" pos:column="21"/></expr_stmt>
                <expr_stmt><expr><operator pos:line="46" pos:column="17">++<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="19">pos<pos:position pos:line="46" pos:column="22"/></name></expr>;<pos:position pos:line="46" pos:column="23"/></expr_stmt>
            }<pos:position pos:line="47" pos:column="14"/></block></while>

            <comment type="block" pos:line="49" pos:column="13">/* partial match found. Store the info for the next round */</comment>
            <if pos:line="50" pos:column="13">if <condition pos:line="50" pos:column="16">(<expr><name pos:line="50" pos:column="17">p<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">==<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">ep<pos:position pos:line="50" pos:column="24"/></name></expr>)<pos:position pos:line="50" pos:column="25"/></condition><then pos:line="50" pos:column="25"> <block pos:line="50" pos:column="26">{
                <expr_stmt><expr><name><name pos:line="51" pos:column="17">intern<pos:position pos:line="51" pos:column="23"/></name><operator pos:line="51" pos:column="23">-&gt;<pos:position pos:line="51" pos:column="28"/></operator><name pos:line="51" pos:column="25">state<pos:position pos:line="51" pos:column="30"/></name></name> <operator pos:line="51" pos:column="31">=<pos:position pos:line="51" pos:column="32"/></operator> <name pos:line="51" pos:column="33">PARSE_HEAD<pos:position pos:line="51" pos:column="43"/></name></expr>;<pos:position pos:line="51" pos:column="44"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="52" pos:column="17">intern<pos:position pos:line="52" pos:column="23"/></name><operator pos:line="52" pos:column="23">-&gt;<pos:position pos:line="52" pos:column="28"/></operator><name pos:line="52" pos:column="25">parse_pos<pos:position pos:line="52" pos:column="34"/></name></name> <operator pos:line="52" pos:column="35">=<pos:position pos:line="52" pos:column="36"/></operator> <name pos:line="52" pos:column="37">pos<pos:position pos:line="52" pos:column="40"/></name></expr>;<pos:position pos:line="52" pos:column="41"/></expr_stmt>
                <return pos:line="53" pos:column="17">return <expr><name pos:line="53" pos:column="24">index<pos:position pos:line="53" pos:column="29"/></name></expr>;<pos:position pos:line="53" pos:column="30"/></return>
            }<pos:position pos:line="54" pos:column="14"/></block></then></if>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="57" pos:column="9">/* we must try all combinations; consider (e.g.) SSIStartTag "---&gt;"
         * and a string data of "--.-" and the end of the buffer
         */</comment>
        <expr_stmt><expr><name pos:line="60" pos:column="9">p<pos:position pos:line="60" pos:column="10"/></name> <operator pos:line="60" pos:column="11">=<pos:position pos:line="60" pos:column="12"/></operator> <name pos:line="60" pos:column="13">data<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">+<pos:position pos:line="60" pos:column="19"/></operator> <name pos:line="60" pos:column="20">index<pos:position pos:line="60" pos:column="25"/></name> <operator pos:line="60" pos:column="26">+<pos:position pos:line="60" pos:column="27"/></operator> <literal type="number" pos:line="60" pos:column="28">1<pos:position pos:line="60" pos:column="29"/></literal></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block> while <condition pos:line="61" pos:column="13">(<expr><name pos:line="61" pos:column="14">p<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">&lt;<pos:position pos:line="61" pos:column="20"/></operator> <name pos:line="61" pos:column="18">ep<pos:position pos:line="61" pos:column="20"/></name></expr>)<pos:position pos:line="61" pos:column="21"/></condition>;<pos:position pos:line="61" pos:column="22"/></do>

    <comment type="block" pos:line="63" pos:column="5">/* no match */</comment>
    <return pos:line="64" pos:column="5">return <expr><name pos:line="64" pos:column="12">len<pos:position pos:line="64" pos:column="15"/></name></expr>;<pos:position pos:line="64" pos:column="16"/></return>
}<pos:position pos:line="65" pos:column="2"/></block></function></unit>
