<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1392_httpd-2.0.61.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">deflate_in_filter<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">ap_filter_t<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">f<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">apr_bucket_brigade<pos:position pos:line="2" pos:column="57"/></name> <modifier pos:line="2" pos:column="58">*<pos:position pos:line="2" pos:column="59"/></modifier></type><name pos:line="2" pos:column="59">bb<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="3" pos:column="39">ap_input_mode_t<pos:position pos:line="3" pos:column="54"/></name></type> <name pos:line="3" pos:column="55">mode<pos:position pos:line="3" pos:column="59"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="4" pos:column="39">apr_read_type_e<pos:position pos:line="4" pos:column="54"/></name></type> <name pos:line="4" pos:column="55">block<pos:position pos:line="4" pos:column="60"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="5" pos:column="39">apr_off_t<pos:position pos:line="5" pos:column="48"/></name></type> <name pos:line="5" pos:column="49">readbytes<pos:position pos:line="5" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="59"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_bucket<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">bkt<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">request_rec<pos:position pos:line="8" pos:column="16"/></name> <modifier pos:line="8" pos:column="17">*<pos:position pos:line="8" pos:column="18"/></modifier></type><name pos:line="8" pos:column="18">r<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name><name pos:line="8" pos:column="22">f<pos:position pos:line="8" pos:column="23"/></name><operator pos:line="8" pos:column="23">-&gt;<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="25">r<pos:position pos:line="8" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">deflate_ctx<pos:position pos:line="9" pos:column="16"/></name> <modifier pos:line="9" pos:column="17">*<pos:position pos:line="9" pos:column="18"/></modifier></type><name pos:line="9" pos:column="18">ctx<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name><name pos:line="9" pos:column="24">f<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">ctx<pos:position pos:line="9" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">zRC<pos:position pos:line="10" pos:column="12"/></name></decl>;<pos:position pos:line="10" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">apr_status_t<pos:position pos:line="11" pos:column="17"/></name></type> <name pos:line="11" pos:column="18">rv<pos:position pos:line="11" pos:column="20"/></name></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">deflate_filter_config<pos:position pos:line="12" pos:column="26"/></name> <modifier pos:line="12" pos:column="27">*<pos:position pos:line="12" pos:column="28"/></modifier></type><name pos:line="12" pos:column="28">c<pos:position pos:line="12" pos:column="29"/></name></decl>;<pos:position pos:line="12" pos:column="30"/></decl_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* just get out of the way of things we don't want. */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">mode<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">!=<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">AP_MODE_READBYTES<pos:position pos:line="15" pos:column="34"/></name></expr>)<pos:position pos:line="15" pos:column="35"/></condition><then pos:line="15" pos:column="35"> <block pos:line="15" pos:column="36">{
        <return pos:line="16" pos:column="9">return <expr><call><name pos:line="16" pos:column="16">ap_get_brigade<pos:position pos:line="16" pos:column="30"/></name><argument_list pos:line="16" pos:column="30">(<argument><expr><name><name pos:line="16" pos:column="31">f<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">-&gt;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="34">next<pos:position pos:line="16" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">bb<pos:position pos:line="16" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="44">mode<pos:position pos:line="16" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="50">block<pos:position pos:line="16" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="57">readbytes<pos:position pos:line="16" pos:column="66"/></name></expr></argument>)<pos:position pos:line="16" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="68"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="19" pos:column="5">c<pos:position pos:line="19" pos:column="6"/></name> <operator pos:line="19" pos:column="7">=<pos:position pos:line="19" pos:column="8"/></operator> <call><name pos:line="19" pos:column="9">ap_get_module_config<pos:position pos:line="19" pos:column="29"/></name><argument_list pos:line="19" pos:column="29">(<argument><expr><name><name pos:line="19" pos:column="30">r<pos:position pos:line="19" pos:column="31"/></name><operator pos:line="19" pos:column="31">-&gt;<pos:position pos:line="19" pos:column="36"/></operator><name pos:line="19" pos:column="33">server<pos:position pos:line="19" pos:column="39"/></name><operator pos:line="19" pos:column="39">-&gt;<pos:position pos:line="19" pos:column="44"/></operator><name pos:line="19" pos:column="41">module_config<pos:position pos:line="19" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="56">&amp;<pos:position pos:line="19" pos:column="61"/></operator><name pos:line="19" pos:column="57">deflate_module<pos:position pos:line="19" pos:column="71"/></name></expr></argument>)<pos:position pos:line="19" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="73"/></expr_stmt>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">ctx<pos:position pos:line="21" pos:column="13"/></name></expr>)<pos:position pos:line="21" pos:column="14"/></condition><then pos:line="21" pos:column="14"> <block pos:line="21" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="22" pos:column="9">int<pos:position pos:line="22" pos:column="12"/></name></type> <name pos:line="22" pos:column="13">found<pos:position pos:line="22" pos:column="18"/></name> <init pos:line="22" pos:column="19">= <expr><literal type="number" pos:line="22" pos:column="21">0<pos:position pos:line="22" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="22" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="23" pos:column="9">char<pos:position pos:line="23" pos:column="13"/></name> <modifier pos:line="23" pos:column="14">*<pos:position pos:line="23" pos:column="15"/></modifier></type><name pos:line="23" pos:column="15">token<pos:position pos:line="23" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name><name pos:line="23" pos:column="22">deflate_hdr<pos:position pos:line="23" pos:column="33"/></name><index pos:line="23" pos:column="33">[<expr><literal type="number" pos:line="23" pos:column="34">10<pos:position pos:line="23" pos:column="36"/></literal></expr>]<pos:position pos:line="23" pos:column="37"/></index></name></decl>;<pos:position pos:line="23" pos:column="38"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="24" pos:column="9">const<pos:position pos:line="24" pos:column="14"/></specifier> <name pos:line="24" pos:column="15">char<pos:position pos:line="24" pos:column="19"/></name> <modifier pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></modifier></type><name pos:line="24" pos:column="21">encoding<pos:position pos:line="24" pos:column="29"/></name></decl>;<pos:position pos:line="24" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="25" pos:column="9">apr_size_t<pos:position pos:line="25" pos:column="19"/></name></type> <name pos:line="25" pos:column="20">len<pos:position pos:line="25" pos:column="23"/></name></decl>;<pos:position pos:line="25" pos:column="24"/></decl_stmt>

        <comment type="block" pos:line="27" pos:column="9">/* only work on main request/no subrequests */</comment>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name><name pos:line="28" pos:column="13">r<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">-&gt;<pos:position pos:line="28" pos:column="19"/></operator><name pos:line="28" pos:column="16">main<pos:position pos:line="28" pos:column="20"/></name></name></expr>)<pos:position pos:line="28" pos:column="21"/></condition><then pos:line="28" pos:column="21"> <block pos:line="28" pos:column="22">{
            <expr_stmt><expr><call><name pos:line="29" pos:column="13">ap_remove_input_filter<pos:position pos:line="29" pos:column="35"/></name><argument_list pos:line="29" pos:column="35">(<argument><expr><name pos:line="29" pos:column="36">f<pos:position pos:line="29" pos:column="37"/></name></expr></argument>)<pos:position pos:line="29" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="39"/></expr_stmt>
            <return pos:line="30" pos:column="13">return <expr><call><name pos:line="30" pos:column="20">ap_get_brigade<pos:position pos:line="30" pos:column="34"/></name><argument_list pos:line="30" pos:column="34">(<argument><expr><name><name pos:line="30" pos:column="35">f<pos:position pos:line="30" pos:column="36"/></name><operator pos:line="30" pos:column="36">-&gt;<pos:position pos:line="30" pos:column="41"/></operator><name pos:line="30" pos:column="38">next<pos:position pos:line="30" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="44">bb<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="48">mode<pos:position pos:line="30" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="54">block<pos:position pos:line="30" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="61">readbytes<pos:position pos:line="30" pos:column="70"/></name></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></return>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="33" pos:column="9">/* Let's see what our current Content-Encoding is.
         * If gzip is present, don't gzip again.  (We could, but let's not.)
         */</comment>
        <expr_stmt><expr><name pos:line="36" pos:column="9">encoding<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <call><name pos:line="36" pos:column="20">apr_table_get<pos:position pos:line="36" pos:column="33"/></name><argument_list pos:line="36" pos:column="33">(<argument><expr><name><name pos:line="36" pos:column="34">r<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">-&gt;<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="37">headers_in<pos:position pos:line="36" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="49">"Content-Encoding"<pos:position pos:line="36" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="69"/></expr_stmt>
        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><name pos:line="37" pos:column="13">encoding<pos:position pos:line="37" pos:column="21"/></name></expr>)<pos:position pos:line="37" pos:column="22"/></condition><then pos:line="37" pos:column="22"> <block pos:line="37" pos:column="23">{
            <decl_stmt><decl><type><specifier pos:line="38" pos:column="13">const<pos:position pos:line="38" pos:column="18"/></specifier> <name pos:line="38" pos:column="19">char<pos:position pos:line="38" pos:column="23"/></name> <modifier pos:line="38" pos:column="24">*<pos:position pos:line="38" pos:column="25"/></modifier></type><name pos:line="38" pos:column="25">tmp<pos:position pos:line="38" pos:column="28"/></name> <init pos:line="38" pos:column="29">= <expr><name pos:line="38" pos:column="31">encoding<pos:position pos:line="38" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="38" pos:column="40"/></decl_stmt>

            <expr_stmt><expr><name pos:line="40" pos:column="13">token<pos:position pos:line="40" pos:column="18"/></name> <operator pos:line="40" pos:column="19">=<pos:position pos:line="40" pos:column="20"/></operator> <call><name pos:line="40" pos:column="21">ap_get_token<pos:position pos:line="40" pos:column="33"/></name><argument_list pos:line="40" pos:column="33">(<argument><expr><name><name pos:line="40" pos:column="34">r<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">-&gt;<pos:position pos:line="40" pos:column="40"/></operator><name pos:line="40" pos:column="37">pool<pos:position pos:line="40" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="40" pos:column="43">&amp;<pos:position pos:line="40" pos:column="48"/></operator><name pos:line="40" pos:column="44">tmp<pos:position pos:line="40" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="40" pos:column="49">0<pos:position pos:line="40" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="52"/></expr_stmt>
            <while pos:line="41" pos:column="13">while <condition pos:line="41" pos:column="19">(<expr><name pos:line="41" pos:column="20">token<pos:position pos:line="41" pos:column="25"/></name> <operator pos:line="41" pos:column="26">&amp;&amp;<pos:position pos:line="41" pos:column="36"/></operator> <name><name pos:line="41" pos:column="29">token<pos:position pos:line="41" pos:column="34"/></name><index pos:line="41" pos:column="34">[<expr><literal type="number" pos:line="41" pos:column="35">0<pos:position pos:line="41" pos:column="36"/></literal></expr>]<pos:position pos:line="41" pos:column="37"/></index></name></expr>)<pos:position pos:line="41" pos:column="38"/></condition> <block pos:line="41" pos:column="39">{
                <if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><operator pos:line="42" pos:column="21">!<pos:position pos:line="42" pos:column="22"/></operator><call><name pos:line="42" pos:column="22">strcasecmp<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">token<pos:position pos:line="42" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="42" pos:column="40">"gzip"<pos:position pos:line="42" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="48"/></condition><then pos:line="42" pos:column="48"> <block pos:line="42" pos:column="49">{
                    <expr_stmt><expr><name pos:line="43" pos:column="21">found<pos:position pos:line="43" pos:column="26"/></name> <operator pos:line="43" pos:column="27">=<pos:position pos:line="43" pos:column="28"/></operator> <literal type="number" pos:line="43" pos:column="29">1<pos:position pos:line="43" pos:column="30"/></literal></expr>;<pos:position pos:line="43" pos:column="31"/></expr_stmt>
                    <break pos:line="44" pos:column="21">break;<pos:position pos:line="44" pos:column="27"/></break>
                }<pos:position pos:line="45" pos:column="18"/></block></then></if>
                <comment type="block" pos:line="46" pos:column="17">/* Otherwise, skip token */</comment>
                <expr_stmt><expr><name pos:line="47" pos:column="17">tmp<pos:position pos:line="47" pos:column="20"/></name><operator pos:line="47" pos:column="20">++<pos:position pos:line="47" pos:column="22"/></operator></expr>;<pos:position pos:line="47" pos:column="23"/></expr_stmt>
                <expr_stmt><expr><name pos:line="48" pos:column="17">token<pos:position pos:line="48" pos:column="22"/></name> <operator pos:line="48" pos:column="23">=<pos:position pos:line="48" pos:column="24"/></operator> <call><name pos:line="48" pos:column="25">ap_get_token<pos:position pos:line="48" pos:column="37"/></name><argument_list pos:line="48" pos:column="37">(<argument><expr><name><name pos:line="48" pos:column="38">r<pos:position pos:line="48" pos:column="39"/></name><operator pos:line="48" pos:column="39">-&gt;<pos:position pos:line="48" pos:column="44"/></operator><name pos:line="48" pos:column="41">pool<pos:position pos:line="48" pos:column="45"/></name></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="47">&amp;<pos:position pos:line="48" pos:column="52"/></operator><name pos:line="48" pos:column="48">tmp<pos:position pos:line="48" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="53">0<pos:position pos:line="48" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="56"/></expr_stmt>
            }<pos:position pos:line="49" pos:column="14"/></block></while>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>

        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">found<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">==<pos:position pos:line="52" pos:column="21"/></operator> <literal type="number" pos:line="52" pos:column="22">0<pos:position pos:line="52" pos:column="23"/></literal></expr>)<pos:position pos:line="52" pos:column="24"/></condition><then pos:line="52" pos:column="24"> <block pos:line="52" pos:column="25">{
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">ap_remove_input_filter<pos:position pos:line="53" pos:column="35"/></name><argument_list pos:line="53" pos:column="35">(<argument><expr><name pos:line="53" pos:column="36">f<pos:position pos:line="53" pos:column="37"/></name></expr></argument>)<pos:position pos:line="53" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="39"/></expr_stmt>
            <return pos:line="54" pos:column="13">return <expr><call><name pos:line="54" pos:column="20">ap_get_brigade<pos:position pos:line="54" pos:column="34"/></name><argument_list pos:line="54" pos:column="34">(<argument><expr><name><name pos:line="54" pos:column="35">f<pos:position pos:line="54" pos:column="36"/></name><operator pos:line="54" pos:column="36">-&gt;<pos:position pos:line="54" pos:column="41"/></operator><name pos:line="54" pos:column="38">next<pos:position pos:line="54" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="44">bb<pos:position pos:line="54" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="48">mode<pos:position pos:line="54" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="54">block<pos:position pos:line="54" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="61">readbytes<pos:position pos:line="54" pos:column="70"/></name></expr></argument>)<pos:position pos:line="54" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="72"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="57" pos:column="9">f<pos:position pos:line="57" pos:column="10"/></name><operator pos:line="57" pos:column="10">-&gt;<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="12">ctx<pos:position pos:line="57" pos:column="15"/></name></name> <operator pos:line="57" pos:column="16">=<pos:position pos:line="57" pos:column="17"/></operator> <name pos:line="57" pos:column="18">ctx<pos:position pos:line="57" pos:column="21"/></name> <operator pos:line="57" pos:column="22">=<pos:position pos:line="57" pos:column="23"/></operator> <call><name pos:line="57" pos:column="24">apr_pcalloc<pos:position pos:line="57" pos:column="35"/></name><argument_list pos:line="57" pos:column="35">(<argument><expr><name><name pos:line="57" pos:column="36">f<pos:position pos:line="57" pos:column="37"/></name><operator pos:line="57" pos:column="37">-&gt;<pos:position pos:line="57" pos:column="42"/></operator><name pos:line="57" pos:column="39">r<pos:position pos:line="57" pos:column="40"/></name><operator pos:line="57" pos:column="40">-&gt;<pos:position pos:line="57" pos:column="45"/></operator><name pos:line="57" pos:column="42">pool<pos:position pos:line="57" pos:column="46"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="57" pos:column="48">sizeof<argument_list pos:line="57" pos:column="54">(<argument><expr><operator pos:line="57" pos:column="55">*<pos:position pos:line="57" pos:column="56"/></operator><name pos:line="57" pos:column="56">ctx<pos:position pos:line="57" pos:column="59"/></name></expr></argument>)<pos:position pos:line="57" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="58" pos:column="9">ctx<pos:position pos:line="58" pos:column="12"/></name><operator pos:line="58" pos:column="12">-&gt;<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="14">bb<pos:position pos:line="58" pos:column="16"/></name></name> <operator pos:line="58" pos:column="17">=<pos:position pos:line="58" pos:column="18"/></operator> <call><name pos:line="58" pos:column="19">apr_brigade_create<pos:position pos:line="58" pos:column="37"/></name><argument_list pos:line="58" pos:column="37">(<argument><expr><name><name pos:line="58" pos:column="38">r<pos:position pos:line="58" pos:column="39"/></name><operator pos:line="58" pos:column="39">-&gt;<pos:position pos:line="58" pos:column="44"/></operator><name pos:line="58" pos:column="41">pool<pos:position pos:line="58" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="58" pos:column="47">f<pos:position pos:line="58" pos:column="48"/></name><operator pos:line="58" pos:column="48">-&gt;<pos:position pos:line="58" pos:column="53"/></operator><name pos:line="58" pos:column="50">c<pos:position pos:line="58" pos:column="51"/></name><operator pos:line="58" pos:column="51">-&gt;<pos:position pos:line="58" pos:column="56"/></operator><name pos:line="58" pos:column="53">bucket_alloc<pos:position pos:line="58" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="58" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">ctx<pos:position pos:line="59" pos:column="12"/></name><operator pos:line="59" pos:column="12">-&gt;<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="14">proc_bb<pos:position pos:line="59" pos:column="21"/></name></name> <operator pos:line="59" pos:column="22">=<pos:position pos:line="59" pos:column="23"/></operator> <call><name pos:line="59" pos:column="24">apr_brigade_create<pos:position pos:line="59" pos:column="42"/></name><argument_list pos:line="59" pos:column="42">(<argument><expr><name><name pos:line="59" pos:column="43">r<pos:position pos:line="59" pos:column="44"/></name><operator pos:line="59" pos:column="44">-&gt;<pos:position pos:line="59" pos:column="49"/></operator><name pos:line="59" pos:column="46">pool<pos:position pos:line="59" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="52">f<pos:position pos:line="59" pos:column="53"/></name><operator pos:line="59" pos:column="53">-&gt;<pos:position pos:line="59" pos:column="58"/></operator><name pos:line="59" pos:column="55">c<pos:position pos:line="59" pos:column="56"/></name><operator pos:line="59" pos:column="56">-&gt;<pos:position pos:line="59" pos:column="61"/></operator><name pos:line="59" pos:column="58">bucket_alloc<pos:position pos:line="59" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="60" pos:column="9">ctx<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">-&gt;<pos:position pos:line="60" pos:column="17"/></operator><name pos:line="60" pos:column="14">buffer<pos:position pos:line="60" pos:column="20"/></name></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <call><name pos:line="60" pos:column="23">apr_palloc<pos:position pos:line="60" pos:column="33"/></name><argument_list pos:line="60" pos:column="33">(<argument><expr><name><name pos:line="60" pos:column="34">r<pos:position pos:line="60" pos:column="35"/></name><operator pos:line="60" pos:column="35">-&gt;<pos:position pos:line="60" pos:column="40"/></operator><name pos:line="60" pos:column="37">pool<pos:position pos:line="60" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="43">c<pos:position pos:line="60" pos:column="44"/></name><operator pos:line="60" pos:column="44">-&gt;<pos:position pos:line="60" pos:column="49"/></operator><name pos:line="60" pos:column="46">bufferSize<pos:position pos:line="60" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="60" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="58"/></expr_stmt>

        <expr_stmt><expr><name pos:line="62" pos:column="9">rv<pos:position pos:line="62" pos:column="11"/></name> <operator pos:line="62" pos:column="12">=<pos:position pos:line="62" pos:column="13"/></operator> <call><name pos:line="62" pos:column="14">ap_get_brigade<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><name><name pos:line="62" pos:column="29">f<pos:position pos:line="62" pos:column="30"/></name><operator pos:line="62" pos:column="30">-&gt;<pos:position pos:line="62" pos:column="35"/></operator><name pos:line="62" pos:column="32">next<pos:position pos:line="62" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="38">ctx<pos:position pos:line="62" pos:column="41"/></name><operator pos:line="62" pos:column="41">-&gt;<pos:position pos:line="62" pos:column="46"/></operator><name pos:line="62" pos:column="43">bb<pos:position pos:line="62" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="47">AP_MODE_READBYTES<pos:position pos:line="62" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="66">block<pos:position pos:line="62" pos:column="71"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="62" pos:column="73">10<pos:position pos:line="62" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="77"/></expr_stmt>
        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">rv<pos:position pos:line="63" pos:column="15"/></name> <operator pos:line="63" pos:column="16">!=<pos:position pos:line="63" pos:column="18"/></operator> <name pos:line="63" pos:column="19">APR_SUCCESS<pos:position pos:line="63" pos:column="30"/></name></expr>)<pos:position pos:line="63" pos:column="31"/></condition><then pos:line="63" pos:column="31"> <block pos:line="63" pos:column="32">{
            <return pos:line="64" pos:column="13">return <expr><name pos:line="64" pos:column="20">rv<pos:position pos:line="64" pos:column="22"/></name></expr>;<pos:position pos:line="64" pos:column="23"/></return>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="67" pos:column="9">len<pos:position pos:line="67" pos:column="12"/></name> <operator pos:line="67" pos:column="13">=<pos:position pos:line="67" pos:column="14"/></operator> <literal type="number" pos:line="67" pos:column="15">10<pos:position pos:line="67" pos:column="17"/></literal></expr>;<pos:position pos:line="67" pos:column="18"/></expr_stmt> 
        <expr_stmt><expr><name pos:line="68" pos:column="9">rv<pos:position pos:line="68" pos:column="11"/></name> <operator pos:line="68" pos:column="12">=<pos:position pos:line="68" pos:column="13"/></operator> <call><name pos:line="68" pos:column="14">apr_brigade_flatten<pos:position pos:line="68" pos:column="33"/></name><argument_list pos:line="68" pos:column="33">(<argument><expr><name><name pos:line="68" pos:column="34">ctx<pos:position pos:line="68" pos:column="37"/></name><operator pos:line="68" pos:column="37">-&gt;<pos:position pos:line="68" pos:column="42"/></operator><name pos:line="68" pos:column="39">bb<pos:position pos:line="68" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="43">deflate_hdr<pos:position pos:line="68" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="68" pos:column="56">&amp;<pos:position pos:line="68" pos:column="61"/></operator><name pos:line="68" pos:column="57">len<pos:position pos:line="68" pos:column="60"/></name></expr></argument>)<pos:position pos:line="68" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="62"/></expr_stmt> 
        <if pos:line="69" pos:column="9">if <condition pos:line="69" pos:column="12">(<expr><name pos:line="69" pos:column="13">rv<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">!=<pos:position pos:line="69" pos:column="18"/></operator> <name pos:line="69" pos:column="19">APR_SUCCESS<pos:position pos:line="69" pos:column="30"/></name></expr>)<pos:position pos:line="69" pos:column="31"/></condition><then pos:line="69" pos:column="31"> <block pos:line="69" pos:column="32">{
            <return pos:line="70" pos:column="13">return <expr><name pos:line="70" pos:column="20">rv<pos:position pos:line="70" pos:column="22"/></name></expr>;<pos:position pos:line="70" pos:column="23"/></return>
        }<pos:position pos:line="71" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="73" pos:column="9">/* We didn't get the magic bytes. */</comment>
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name pos:line="74" pos:column="13">len<pos:position pos:line="74" pos:column="16"/></name> <operator pos:line="74" pos:column="17">!=<pos:position pos:line="74" pos:column="19"/></operator> <literal type="number" pos:line="74" pos:column="20">10<pos:position pos:line="74" pos:column="22"/></literal> <operator pos:line="74" pos:column="23">||<pos:position pos:line="74" pos:column="25"/></operator>
            <name><name pos:line="75" pos:column="13">deflate_hdr<pos:position pos:line="75" pos:column="24"/></name><index pos:line="75" pos:column="24">[<expr><literal type="number" pos:line="75" pos:column="25">0<pos:position pos:line="75" pos:column="26"/></literal></expr>]<pos:position pos:line="75" pos:column="27"/></index></name> <operator pos:line="75" pos:column="28">!=<pos:position pos:line="75" pos:column="30"/></operator> <name><name pos:line="75" pos:column="31">deflate_magic<pos:position pos:line="75" pos:column="44"/></name><index pos:line="75" pos:column="44">[<expr><literal type="number" pos:line="75" pos:column="45">0<pos:position pos:line="75" pos:column="46"/></literal></expr>]<pos:position pos:line="75" pos:column="47"/></index></name> <operator pos:line="75" pos:column="48">||<pos:position pos:line="75" pos:column="50"/></operator>
            <name><name pos:line="76" pos:column="13">deflate_hdr<pos:position pos:line="76" pos:column="24"/></name><index pos:line="76" pos:column="24">[<expr><literal type="number" pos:line="76" pos:column="25">1<pos:position pos:line="76" pos:column="26"/></literal></expr>]<pos:position pos:line="76" pos:column="27"/></index></name> <operator pos:line="76" pos:column="28">!=<pos:position pos:line="76" pos:column="30"/></operator> <name><name pos:line="76" pos:column="31">deflate_magic<pos:position pos:line="76" pos:column="44"/></name><index pos:line="76" pos:column="44">[<expr><literal type="number" pos:line="76" pos:column="45">1<pos:position pos:line="76" pos:column="46"/></literal></expr>]<pos:position pos:line="76" pos:column="47"/></index></name></expr>)<pos:position pos:line="76" pos:column="48"/></condition><then pos:line="76" pos:column="48"> <block pos:line="76" pos:column="49">{
            <return pos:line="77" pos:column="13">return <expr><name pos:line="77" pos:column="20">APR_EGENERAL<pos:position pos:line="77" pos:column="32"/></name></expr>;<pos:position pos:line="77" pos:column="33"/></return>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="80" pos:column="9">/* We can't handle flags for now. */</comment>
        <if pos:line="81" pos:column="9">if <condition pos:line="81" pos:column="12">(<expr><name><name pos:line="81" pos:column="13">deflate_hdr<pos:position pos:line="81" pos:column="24"/></name><index pos:line="81" pos:column="24">[<expr><literal type="number" pos:line="81" pos:column="25">3<pos:position pos:line="81" pos:column="26"/></literal></expr>]<pos:position pos:line="81" pos:column="27"/></index></name> <operator pos:line="81" pos:column="28">!=<pos:position pos:line="81" pos:column="30"/></operator> <literal type="number" pos:line="81" pos:column="31">0<pos:position pos:line="81" pos:column="32"/></literal></expr>)<pos:position pos:line="81" pos:column="33"/></condition><then pos:line="81" pos:column="33"> <block pos:line="81" pos:column="34">{
            <return pos:line="82" pos:column="13">return <expr><name pos:line="82" pos:column="20">APR_EGENERAL<pos:position pos:line="82" pos:column="32"/></name></expr>;<pos:position pos:line="82" pos:column="33"/></return>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="85" pos:column="9">zRC<pos:position pos:line="85" pos:column="12"/></name> <operator pos:line="85" pos:column="13">=<pos:position pos:line="85" pos:column="14"/></operator> <call><name pos:line="85" pos:column="15">inflateInit2<pos:position pos:line="85" pos:column="27"/></name><argument_list pos:line="85" pos:column="27">(<argument><expr><operator pos:line="85" pos:column="28">&amp;<pos:position pos:line="85" pos:column="33"/></operator><name><name pos:line="85" pos:column="29">ctx<pos:position pos:line="85" pos:column="32"/></name><operator pos:line="85" pos:column="32">-&gt;<pos:position pos:line="85" pos:column="37"/></operator><name pos:line="85" pos:column="34">stream<pos:position pos:line="85" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="42">c<pos:position pos:line="85" pos:column="43"/></name><operator pos:line="85" pos:column="43">-&gt;<pos:position pos:line="85" pos:column="48"/></operator><name pos:line="85" pos:column="45">windowSize<pos:position pos:line="85" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="57"/></expr_stmt>

        <if pos:line="87" pos:column="9">if <condition pos:line="87" pos:column="12">(<expr><name pos:line="87" pos:column="13">zRC<pos:position pos:line="87" pos:column="16"/></name> <operator pos:line="87" pos:column="17">!=<pos:position pos:line="87" pos:column="19"/></operator> <name pos:line="87" pos:column="20">Z_OK<pos:position pos:line="87" pos:column="24"/></name></expr>)<pos:position pos:line="87" pos:column="25"/></condition><then pos:line="87" pos:column="25"> <block pos:line="87" pos:column="26">{
            <expr_stmt><expr><name><name pos:line="88" pos:column="13">f<pos:position pos:line="88" pos:column="14"/></name><operator pos:line="88" pos:column="14">-&gt;<pos:position pos:line="88" pos:column="19"/></operator><name pos:line="88" pos:column="16">ctx<pos:position pos:line="88" pos:column="19"/></name></name> <operator pos:line="88" pos:column="20">=<pos:position pos:line="88" pos:column="21"/></operator> <name pos:line="88" pos:column="22">NULL<pos:position pos:line="88" pos:column="26"/></name></expr>;<pos:position pos:line="88" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="89" pos:column="13">inflateEnd<pos:position pos:line="89" pos:column="23"/></name><argument_list pos:line="89" pos:column="23">(<argument><expr><operator pos:line="89" pos:column="24">&amp;<pos:position pos:line="89" pos:column="29"/></operator><name><name pos:line="89" pos:column="25">ctx<pos:position pos:line="89" pos:column="28"/></name><operator pos:line="89" pos:column="28">-&gt;<pos:position pos:line="89" pos:column="33"/></operator><name pos:line="89" pos:column="30">stream<pos:position pos:line="89" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="89" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="90" pos:column="13">ap_log_rerror<pos:position pos:line="90" pos:column="26"/></name><argument_list pos:line="90" pos:column="26">(<argument><expr><name pos:line="90" pos:column="27">APLOG_MARK<pos:position pos:line="90" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="39">APLOG_ERR<pos:position pos:line="90" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="50">0<pos:position pos:line="90" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="53">r<pos:position pos:line="90" pos:column="54"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="91" pos:column="27">"unable to init Zlib: "<pos:position pos:line="91" pos:column="50"/></literal>
                          <literal type="string" pos:line="92" pos:column="27">"inflateInit2 returned %d: URL %s"<pos:position pos:line="92" pos:column="61"/></literal></expr></argument>,
                          <argument><expr><name pos:line="93" pos:column="27">zRC<pos:position pos:line="93" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="32">r<pos:position pos:line="93" pos:column="33"/></name><operator pos:line="93" pos:column="33">-&gt;<pos:position pos:line="93" pos:column="38"/></operator><name pos:line="93" pos:column="35">uri<pos:position pos:line="93" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">ap_remove_input_filter<pos:position pos:line="94" pos:column="35"/></name><argument_list pos:line="94" pos:column="35">(<argument><expr><name pos:line="94" pos:column="36">f<pos:position pos:line="94" pos:column="37"/></name></expr></argument>)<pos:position pos:line="94" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="39"/></expr_stmt>
            <return pos:line="95" pos:column="13">return <expr><call><name pos:line="95" pos:column="20">ap_get_brigade<pos:position pos:line="95" pos:column="34"/></name><argument_list pos:line="95" pos:column="34">(<argument><expr><name><name pos:line="95" pos:column="35">f<pos:position pos:line="95" pos:column="36"/></name><operator pos:line="95" pos:column="36">-&gt;<pos:position pos:line="95" pos:column="41"/></operator><name pos:line="95" pos:column="38">next<pos:position pos:line="95" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="44">bb<pos:position pos:line="95" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="48">mode<pos:position pos:line="95" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="54">block<pos:position pos:line="95" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="61">readbytes<pos:position pos:line="95" pos:column="70"/></name></expr></argument>)<pos:position pos:line="95" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="72"/></return>
        }<pos:position pos:line="96" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="98" pos:column="9">/* initialize deflate output buffer */</comment>
        <expr_stmt><expr><name><name pos:line="99" pos:column="9">ctx<pos:position pos:line="99" pos:column="12"/></name><operator pos:line="99" pos:column="12">-&gt;<pos:position pos:line="99" pos:column="17"/></operator><name pos:line="99" pos:column="14">stream<pos:position pos:line="99" pos:column="20"/></name><operator pos:line="99" pos:column="20">.<pos:position pos:line="99" pos:column="21"/></operator><name pos:line="99" pos:column="21">next_out<pos:position pos:line="99" pos:column="29"/></name></name> <operator pos:line="99" pos:column="30">=<pos:position pos:line="99" pos:column="31"/></operator> <name><name pos:line="99" pos:column="32">ctx<pos:position pos:line="99" pos:column="35"/></name><operator pos:line="99" pos:column="35">-&gt;<pos:position pos:line="99" pos:column="40"/></operator><name pos:line="99" pos:column="37">buffer<pos:position pos:line="99" pos:column="43"/></name></name></expr>;<pos:position pos:line="99" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="100" pos:column="9">ctx<pos:position pos:line="100" pos:column="12"/></name><operator pos:line="100" pos:column="12">-&gt;<pos:position pos:line="100" pos:column="17"/></operator><name pos:line="100" pos:column="14">stream<pos:position pos:line="100" pos:column="20"/></name><operator pos:line="100" pos:column="20">.<pos:position pos:line="100" pos:column="21"/></operator><name pos:line="100" pos:column="21">avail_out<pos:position pos:line="100" pos:column="30"/></name></name> <operator pos:line="100" pos:column="31">=<pos:position pos:line="100" pos:column="32"/></operator> <name><name pos:line="100" pos:column="33">c<pos:position pos:line="100" pos:column="34"/></name><operator pos:line="100" pos:column="34">-&gt;<pos:position pos:line="100" pos:column="39"/></operator><name pos:line="100" pos:column="36">bufferSize<pos:position pos:line="100" pos:column="46"/></name></name></expr>;<pos:position pos:line="100" pos:column="47"/></expr_stmt>

        <expr_stmt><expr><call><name pos:line="102" pos:column="9">apr_brigade_cleanup<pos:position pos:line="102" pos:column="28"/></name><argument_list pos:line="102" pos:column="28">(<argument><expr><name><name pos:line="102" pos:column="29">ctx<pos:position pos:line="102" pos:column="32"/></name><operator pos:line="102" pos:column="32">-&gt;<pos:position pos:line="102" pos:column="37"/></operator><name pos:line="102" pos:column="34">bb<pos:position pos:line="102" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="102" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="103" pos:column="6"/></block></then></if>

    <if pos:line="105" pos:column="5">if <condition pos:line="105" pos:column="8">(<expr><call><name pos:line="105" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="105" pos:column="26"/></name><argument_list pos:line="105" pos:column="26">(<argument><expr><name><name pos:line="105" pos:column="27">ctx<pos:position pos:line="105" pos:column="30"/></name><operator pos:line="105" pos:column="30">-&gt;<pos:position pos:line="105" pos:column="35"/></operator><name pos:line="105" pos:column="32">proc_bb<pos:position pos:line="105" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="105" pos:column="41"/></condition><then pos:line="105" pos:column="41"> <block pos:line="105" pos:column="42">{
        <expr_stmt><expr><name pos:line="106" pos:column="9">rv<pos:position pos:line="106" pos:column="11"/></name> <operator pos:line="106" pos:column="12">=<pos:position pos:line="106" pos:column="13"/></operator> <call><name pos:line="106" pos:column="14">ap_get_brigade<pos:position pos:line="106" pos:column="28"/></name><argument_list pos:line="106" pos:column="28">(<argument><expr><name><name pos:line="106" pos:column="29">f<pos:position pos:line="106" pos:column="30"/></name><operator pos:line="106" pos:column="30">-&gt;<pos:position pos:line="106" pos:column="35"/></operator><name pos:line="106" pos:column="32">next<pos:position pos:line="106" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="38">ctx<pos:position pos:line="106" pos:column="41"/></name><operator pos:line="106" pos:column="41">-&gt;<pos:position pos:line="106" pos:column="46"/></operator><name pos:line="106" pos:column="43">bb<pos:position pos:line="106" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="47">mode<pos:position pos:line="106" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="53">block<pos:position pos:line="106" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="60">readbytes<pos:position pos:line="106" pos:column="69"/></name></expr></argument>)<pos:position pos:line="106" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="71"/></expr_stmt>

        <if pos:line="108" pos:column="9">if <condition pos:line="108" pos:column="12">(<expr><name pos:line="108" pos:column="13">rv<pos:position pos:line="108" pos:column="15"/></name> <operator pos:line="108" pos:column="16">!=<pos:position pos:line="108" pos:column="18"/></operator> <name pos:line="108" pos:column="19">APR_SUCCESS<pos:position pos:line="108" pos:column="30"/></name></expr>)<pos:position pos:line="108" pos:column="31"/></condition><then pos:line="108" pos:column="31"> <block pos:line="108" pos:column="32">{
            <comment type="block" pos:line="109" pos:column="13">/* What about APR_EAGAIN errors? */</comment>
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">inflateEnd<pos:position pos:line="110" pos:column="23"/></name><argument_list pos:line="110" pos:column="23">(<argument><expr><operator pos:line="110" pos:column="24">&amp;<pos:position pos:line="110" pos:column="29"/></operator><name><name pos:line="110" pos:column="25">ctx<pos:position pos:line="110" pos:column="28"/></name><operator pos:line="110" pos:column="28">-&gt;<pos:position pos:line="110" pos:column="33"/></operator><name pos:line="110" pos:column="30">stream<pos:position pos:line="110" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="38"/></expr_stmt>
            <return pos:line="111" pos:column="13">return <expr><name pos:line="111" pos:column="20">rv<pos:position pos:line="111" pos:column="22"/></name></expr>;<pos:position pos:line="111" pos:column="23"/></return>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if>

        <macro><name pos:line="114" pos:column="9">APR_BRIGADE_FOREACH<pos:position pos:line="114" pos:column="28"/></name><argument_list pos:line="114" pos:column="28">(<argument pos:line="114" pos:column="29">bkt<pos:position pos:line="114" pos:column="32"/></argument>, <argument pos:line="114" pos:column="34">ctx-&gt;bb<pos:position pos:line="114" pos:column="41"/></argument>)<pos:position pos:line="114" pos:column="42"/></argument_list></macro> <block pos:line="114" pos:column="43">{
            <decl_stmt><decl><type><specifier pos:line="115" pos:column="13">const<pos:position pos:line="115" pos:column="18"/></specifier> <name pos:line="115" pos:column="19">char<pos:position pos:line="115" pos:column="23"/></name> <modifier pos:line="115" pos:column="24">*<pos:position pos:line="115" pos:column="25"/></modifier></type><name pos:line="115" pos:column="25">data<pos:position pos:line="115" pos:column="29"/></name></decl>;<pos:position pos:line="115" pos:column="30"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="116" pos:column="13">apr_size_t<pos:position pos:line="116" pos:column="23"/></name></type> <name pos:line="116" pos:column="24">len<pos:position pos:line="116" pos:column="27"/></name></decl>;<pos:position pos:line="116" pos:column="28"/></decl_stmt>

            <comment type="block" pos:line="118" pos:column="13">/* If we actually see the EOS, that means we screwed up! */</comment>
            <if pos:line="119" pos:column="13">if <condition pos:line="119" pos:column="16">(<expr><call><name pos:line="119" pos:column="17">APR_BUCKET_IS_EOS<pos:position pos:line="119" pos:column="34"/></name><argument_list pos:line="119" pos:column="34">(<argument><expr><name pos:line="119" pos:column="35">bkt<pos:position pos:line="119" pos:column="38"/></name></expr></argument>)<pos:position pos:line="119" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="119" pos:column="40"/></condition><then pos:line="119" pos:column="40"> <block pos:line="119" pos:column="41">{
                <expr_stmt><expr><call><name pos:line="120" pos:column="17">inflateEnd<pos:position pos:line="120" pos:column="27"/></name><argument_list pos:line="120" pos:column="27">(<argument><expr><operator pos:line="120" pos:column="28">&amp;<pos:position pos:line="120" pos:column="33"/></operator><name><name pos:line="120" pos:column="29">ctx<pos:position pos:line="120" pos:column="32"/></name><operator pos:line="120" pos:column="32">-&gt;<pos:position pos:line="120" pos:column="37"/></operator><name pos:line="120" pos:column="34">stream<pos:position pos:line="120" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="42"/></expr_stmt>
                <return pos:line="121" pos:column="17">return <expr><name pos:line="121" pos:column="24">APR_EGENERAL<pos:position pos:line="121" pos:column="36"/></name></expr>;<pos:position pos:line="121" pos:column="37"/></return>
            }<pos:position pos:line="122" pos:column="14"/></block></then></if>

            <if pos:line="124" pos:column="13">if <condition pos:line="124" pos:column="16">(<expr><call><name pos:line="124" pos:column="17">APR_BUCKET_IS_FLUSH<pos:position pos:line="124" pos:column="36"/></name><argument_list pos:line="124" pos:column="36">(<argument><expr><name pos:line="124" pos:column="37">bkt<pos:position pos:line="124" pos:column="40"/></name></expr></argument>)<pos:position pos:line="124" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="124" pos:column="42"/></condition><then pos:line="124" pos:column="42"> <block pos:line="124" pos:column="43">{
                <decl_stmt><decl><type><name pos:line="125" pos:column="17">apr_bucket<pos:position pos:line="125" pos:column="27"/></name> <modifier pos:line="125" pos:column="28">*<pos:position pos:line="125" pos:column="29"/></modifier></type><name pos:line="125" pos:column="29">tmp_heap<pos:position pos:line="125" pos:column="37"/></name></decl>;<pos:position pos:line="125" pos:column="38"/></decl_stmt>
                <expr_stmt><expr><name pos:line="126" pos:column="17">zRC<pos:position pos:line="126" pos:column="20"/></name> <operator pos:line="126" pos:column="21">=<pos:position pos:line="126" pos:column="22"/></operator> <call><name pos:line="126" pos:column="23">inflate<pos:position pos:line="126" pos:column="30"/></name><argument_list pos:line="126" pos:column="30">(<argument><expr><operator pos:line="126" pos:column="31">&amp;<pos:position pos:line="126" pos:column="36"/></operator><operator pos:line="126" pos:column="32">(<pos:position pos:line="126" pos:column="33"/></operator><name><name pos:line="126" pos:column="33">ctx<pos:position pos:line="126" pos:column="36"/></name><operator pos:line="126" pos:column="36">-&gt;<pos:position pos:line="126" pos:column="41"/></operator><name pos:line="126" pos:column="38">stream<pos:position pos:line="126" pos:column="44"/></name></name><operator pos:line="126" pos:column="44">)<pos:position pos:line="126" pos:column="45"/></operator></expr></argument>, <argument><expr><name pos:line="126" pos:column="47">Z_SYNC_FLUSH<pos:position pos:line="126" pos:column="59"/></name></expr></argument>)<pos:position pos:line="126" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="61"/></expr_stmt>
                <if pos:line="127" pos:column="17">if <condition pos:line="127" pos:column="20">(<expr><name pos:line="127" pos:column="21">zRC<pos:position pos:line="127" pos:column="24"/></name> <operator pos:line="127" pos:column="25">!=<pos:position pos:line="127" pos:column="27"/></operator> <name pos:line="127" pos:column="28">Z_OK<pos:position pos:line="127" pos:column="32"/></name></expr>)<pos:position pos:line="127" pos:column="33"/></condition><then pos:line="127" pos:column="33"> <block pos:line="127" pos:column="34">{
                    <expr_stmt><expr><call><name pos:line="128" pos:column="21">inflateEnd<pos:position pos:line="128" pos:column="31"/></name><argument_list pos:line="128" pos:column="31">(<argument><expr><operator pos:line="128" pos:column="32">&amp;<pos:position pos:line="128" pos:column="37"/></operator><name><name pos:line="128" pos:column="33">ctx<pos:position pos:line="128" pos:column="36"/></name><operator pos:line="128" pos:column="36">-&gt;<pos:position pos:line="128" pos:column="41"/></operator><name pos:line="128" pos:column="38">stream<pos:position pos:line="128" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="46"/></expr_stmt>
                    <return pos:line="129" pos:column="21">return <expr><name pos:line="129" pos:column="28">APR_EGENERAL<pos:position pos:line="129" pos:column="40"/></name></expr>;<pos:position pos:line="129" pos:column="41"/></return>
                }<pos:position pos:line="130" pos:column="18"/></block></then></if>

                <expr_stmt><expr><name><name pos:line="132" pos:column="17">ctx<pos:position pos:line="132" pos:column="20"/></name><operator pos:line="132" pos:column="20">-&gt;<pos:position pos:line="132" pos:column="25"/></operator><name pos:line="132" pos:column="22">stream<pos:position pos:line="132" pos:column="28"/></name><operator pos:line="132" pos:column="28">.<pos:position pos:line="132" pos:column="29"/></operator><name pos:line="132" pos:column="29">next_out<pos:position pos:line="132" pos:column="37"/></name></name> <operator pos:line="132" pos:column="38">=<pos:position pos:line="132" pos:column="39"/></operator> <name><name pos:line="132" pos:column="40">ctx<pos:position pos:line="132" pos:column="43"/></name><operator pos:line="132" pos:column="43">-&gt;<pos:position pos:line="132" pos:column="48"/></operator><name pos:line="132" pos:column="45">buffer<pos:position pos:line="132" pos:column="51"/></name></name></expr>;<pos:position pos:line="132" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><name pos:line="133" pos:column="17">len<pos:position pos:line="133" pos:column="20"/></name> <operator pos:line="133" pos:column="21">=<pos:position pos:line="133" pos:column="22"/></operator> <name><name pos:line="133" pos:column="23">c<pos:position pos:line="133" pos:column="24"/></name><operator pos:line="133" pos:column="24">-&gt;<pos:position pos:line="133" pos:column="29"/></operator><name pos:line="133" pos:column="26">bufferSize<pos:position pos:line="133" pos:column="36"/></name></name> <operator pos:line="133" pos:column="37">-<pos:position pos:line="133" pos:column="38"/></operator> <name><name pos:line="133" pos:column="39">ctx<pos:position pos:line="133" pos:column="42"/></name><operator pos:line="133" pos:column="42">-&gt;<pos:position pos:line="133" pos:column="47"/></operator><name pos:line="133" pos:column="44">stream<pos:position pos:line="133" pos:column="50"/></name><operator pos:line="133" pos:column="50">.<pos:position pos:line="133" pos:column="51"/></operator><name pos:line="133" pos:column="51">avail_out<pos:position pos:line="133" pos:column="60"/></name></name></expr>;<pos:position pos:line="133" pos:column="61"/></expr_stmt>

                <expr_stmt><expr><name><name pos:line="135" pos:column="17">ctx<pos:position pos:line="135" pos:column="20"/></name><operator pos:line="135" pos:column="20">-&gt;<pos:position pos:line="135" pos:column="25"/></operator><name pos:line="135" pos:column="22">crc<pos:position pos:line="135" pos:column="25"/></name></name> <operator pos:line="135" pos:column="26">=<pos:position pos:line="135" pos:column="27"/></operator> <call><name pos:line="135" pos:column="28">crc32<pos:position pos:line="135" pos:column="33"/></name><argument_list pos:line="135" pos:column="33">(<argument><expr><name><name pos:line="135" pos:column="34">ctx<pos:position pos:line="135" pos:column="37"/></name><operator pos:line="135" pos:column="37">-&gt;<pos:position pos:line="135" pos:column="42"/></operator><name pos:line="135" pos:column="39">crc<pos:position pos:line="135" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="135" pos:column="44">(<pos:position pos:line="135" pos:column="45"/></operator><specifier pos:line="135" pos:column="45">const<pos:position pos:line="135" pos:column="50"/></specifier> <name pos:line="135" pos:column="51">Bytef<pos:position pos:line="135" pos:column="56"/></name> <operator pos:line="135" pos:column="57">*<pos:position pos:line="135" pos:column="58"/></operator><operator pos:line="135" pos:column="58">)<pos:position pos:line="135" pos:column="59"/></operator><name><name pos:line="135" pos:column="59">ctx<pos:position pos:line="135" pos:column="62"/></name><operator pos:line="135" pos:column="62">-&gt;<pos:position pos:line="135" pos:column="67"/></operator><name pos:line="135" pos:column="64">buffer<pos:position pos:line="135" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="72">len<pos:position pos:line="135" pos:column="75"/></name></expr></argument>)<pos:position pos:line="135" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><name pos:line="136" pos:column="17">tmp_heap<pos:position pos:line="136" pos:column="25"/></name> <operator pos:line="136" pos:column="26">=<pos:position pos:line="136" pos:column="27"/></operator> <call><name pos:line="136" pos:column="28">apr_bucket_heap_create<pos:position pos:line="136" pos:column="50"/></name><argument_list pos:line="136" pos:column="50">(<argument><expr><operator pos:line="136" pos:column="51">(<pos:position pos:line="136" pos:column="52"/></operator><name pos:line="136" pos:column="52">char<pos:position pos:line="136" pos:column="56"/></name> <operator pos:line="136" pos:column="57">*<pos:position pos:line="136" pos:column="58"/></operator><operator pos:line="136" pos:column="58">)<pos:position pos:line="136" pos:column="59"/></operator><name><name pos:line="136" pos:column="59">ctx<pos:position pos:line="136" pos:column="62"/></name><operator pos:line="136" pos:column="62">-&gt;<pos:position pos:line="136" pos:column="67"/></operator><name pos:line="136" pos:column="64">buffer<pos:position pos:line="136" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="72">len<pos:position pos:line="136" pos:column="75"/></name></expr></argument>,
                                                 <argument><expr><name pos:line="137" pos:column="50">NULL<pos:position pos:line="137" pos:column="54"/></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="56">f<pos:position pos:line="137" pos:column="57"/></name><operator pos:line="137" pos:column="57">-&gt;<pos:position pos:line="137" pos:column="62"/></operator><name pos:line="137" pos:column="59">c<pos:position pos:line="137" pos:column="60"/></name><operator pos:line="137" pos:column="60">-&gt;<pos:position pos:line="137" pos:column="65"/></operator><name pos:line="137" pos:column="62">bucket_alloc<pos:position pos:line="137" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="137" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="76"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="138" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="138" pos:column="40"/></name><argument_list pos:line="138" pos:column="40">(<argument><expr><name><name pos:line="138" pos:column="41">ctx<pos:position pos:line="138" pos:column="44"/></name><operator pos:line="138" pos:column="44">-&gt;<pos:position pos:line="138" pos:column="49"/></operator><name pos:line="138" pos:column="46">proc_bb<pos:position pos:line="138" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="138" pos:column="55">tmp_heap<pos:position pos:line="138" pos:column="63"/></name></expr></argument>)<pos:position pos:line="138" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="65"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="139" pos:column="17">ctx<pos:position pos:line="139" pos:column="20"/></name><operator pos:line="139" pos:column="20">-&gt;<pos:position pos:line="139" pos:column="25"/></operator><name pos:line="139" pos:column="22">stream<pos:position pos:line="139" pos:column="28"/></name><operator pos:line="139" pos:column="28">.<pos:position pos:line="139" pos:column="29"/></operator><name pos:line="139" pos:column="29">avail_out<pos:position pos:line="139" pos:column="38"/></name></name> <operator pos:line="139" pos:column="39">=<pos:position pos:line="139" pos:column="40"/></operator> <name><name pos:line="139" pos:column="41">c<pos:position pos:line="139" pos:column="42"/></name><operator pos:line="139" pos:column="42">-&gt;<pos:position pos:line="139" pos:column="47"/></operator><name pos:line="139" pos:column="44">bufferSize<pos:position pos:line="139" pos:column="54"/></name></name></expr>;<pos:position pos:line="139" pos:column="55"/></expr_stmt>

                <comment type="block" pos:line="141" pos:column="17">/* Move everything to the returning brigade. */</comment>
                <expr_stmt><expr><call><name pos:line="142" pos:column="17">APR_BUCKET_REMOVE<pos:position pos:line="142" pos:column="34"/></name><argument_list pos:line="142" pos:column="34">(<argument><expr><name pos:line="142" pos:column="35">bkt<pos:position pos:line="142" pos:column="38"/></name></expr></argument>)<pos:position pos:line="142" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="40"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="143" pos:column="17">APR_BRIGADE_CONCAT<pos:position pos:line="143" pos:column="35"/></name><argument_list pos:line="143" pos:column="35">(<argument><expr><name pos:line="143" pos:column="36">bb<pos:position pos:line="143" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="143" pos:column="40">ctx<pos:position pos:line="143" pos:column="43"/></name><operator pos:line="143" pos:column="43">-&gt;<pos:position pos:line="143" pos:column="48"/></operator><name pos:line="143" pos:column="45">bb<pos:position pos:line="143" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="49"/></expr_stmt>
                <break pos:line="144" pos:column="17">break;<pos:position pos:line="144" pos:column="23"/></break>
            }<pos:position pos:line="145" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="147" pos:column="13">/* read */</comment>
            <expr_stmt><expr><call><name pos:line="148" pos:column="13">apr_bucket_read<pos:position pos:line="148" pos:column="28"/></name><argument_list pos:line="148" pos:column="28">(<argument><expr><name pos:line="148" pos:column="29">bkt<pos:position pos:line="148" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="148" pos:column="34">&amp;<pos:position pos:line="148" pos:column="39"/></operator><name pos:line="148" pos:column="35">data<pos:position pos:line="148" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="148" pos:column="41">&amp;<pos:position pos:line="148" pos:column="46"/></operator><name pos:line="148" pos:column="42">len<pos:position pos:line="148" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="47">APR_BLOCK_READ<pos:position pos:line="148" pos:column="61"/></name></expr></argument>)<pos:position pos:line="148" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="148" pos:column="63"/></expr_stmt>

            <comment type="block" pos:line="150" pos:column="13">/* pass through zlib inflate. */</comment>
            <expr_stmt><expr><name><name pos:line="151" pos:column="13">ctx<pos:position pos:line="151" pos:column="16"/></name><operator pos:line="151" pos:column="16">-&gt;<pos:position pos:line="151" pos:column="21"/></operator><name pos:line="151" pos:column="18">stream<pos:position pos:line="151" pos:column="24"/></name><operator pos:line="151" pos:column="24">.<pos:position pos:line="151" pos:column="25"/></operator><name pos:line="151" pos:column="25">next_in<pos:position pos:line="151" pos:column="32"/></name></name> <operator pos:line="151" pos:column="33">=<pos:position pos:line="151" pos:column="34"/></operator> <operator pos:line="151" pos:column="35">(<pos:position pos:line="151" pos:column="36"/></operator><name pos:line="151" pos:column="36">unsigned<pos:position pos:line="151" pos:column="44"/></name> <name pos:line="151" pos:column="45">char<pos:position pos:line="151" pos:column="49"/></name> <operator pos:line="151" pos:column="50">*<pos:position pos:line="151" pos:column="51"/></operator><operator pos:line="151" pos:column="51">)<pos:position pos:line="151" pos:column="52"/></operator><name pos:line="151" pos:column="52">data<pos:position pos:line="151" pos:column="56"/></name></expr>;<pos:position pos:line="151" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="152" pos:column="13">ctx<pos:position pos:line="152" pos:column="16"/></name><operator pos:line="152" pos:column="16">-&gt;<pos:position pos:line="152" pos:column="21"/></operator><name pos:line="152" pos:column="18">stream<pos:position pos:line="152" pos:column="24"/></name><operator pos:line="152" pos:column="24">.<pos:position pos:line="152" pos:column="25"/></operator><name pos:line="152" pos:column="25">avail_in<pos:position pos:line="152" pos:column="33"/></name></name> <operator pos:line="152" pos:column="34">=<pos:position pos:line="152" pos:column="35"/></operator> <name pos:line="152" pos:column="36">len<pos:position pos:line="152" pos:column="39"/></name></expr>;<pos:position pos:line="152" pos:column="40"/></expr_stmt>

            <expr_stmt><expr><name pos:line="154" pos:column="13">zRC<pos:position pos:line="154" pos:column="16"/></name> <operator pos:line="154" pos:column="17">=<pos:position pos:line="154" pos:column="18"/></operator> <name pos:line="154" pos:column="19">Z_OK<pos:position pos:line="154" pos:column="23"/></name></expr>;<pos:position pos:line="154" pos:column="24"/></expr_stmt>

            <while pos:line="156" pos:column="13">while <condition pos:line="156" pos:column="19">(<expr><name><name pos:line="156" pos:column="20">ctx<pos:position pos:line="156" pos:column="23"/></name><operator pos:line="156" pos:column="23">-&gt;<pos:position pos:line="156" pos:column="28"/></operator><name pos:line="156" pos:column="25">stream<pos:position pos:line="156" pos:column="31"/></name><operator pos:line="156" pos:column="31">.<pos:position pos:line="156" pos:column="32"/></operator><name pos:line="156" pos:column="32">avail_in<pos:position pos:line="156" pos:column="40"/></name></name> <operator pos:line="156" pos:column="41">!=<pos:position pos:line="156" pos:column="43"/></operator> <literal type="number" pos:line="156" pos:column="44">0<pos:position pos:line="156" pos:column="45"/></literal></expr>)<pos:position pos:line="156" pos:column="46"/></condition> <block pos:line="156" pos:column="47">{
                <if pos:line="157" pos:column="17">if <condition pos:line="157" pos:column="20">(<expr><name><name pos:line="157" pos:column="21">ctx<pos:position pos:line="157" pos:column="24"/></name><operator pos:line="157" pos:column="24">-&gt;<pos:position pos:line="157" pos:column="29"/></operator><name pos:line="157" pos:column="26">stream<pos:position pos:line="157" pos:column="32"/></name><operator pos:line="157" pos:column="32">.<pos:position pos:line="157" pos:column="33"/></operator><name pos:line="157" pos:column="33">avail_out<pos:position pos:line="157" pos:column="42"/></name></name> <operator pos:line="157" pos:column="43">==<pos:position pos:line="157" pos:column="45"/></operator> <literal type="number" pos:line="157" pos:column="46">0<pos:position pos:line="157" pos:column="47"/></literal></expr>)<pos:position pos:line="157" pos:column="48"/></condition><then pos:line="157" pos:column="48"> <block pos:line="157" pos:column="49">{
                    <decl_stmt><decl><type><name pos:line="158" pos:column="21">apr_bucket<pos:position pos:line="158" pos:column="31"/></name> <modifier pos:line="158" pos:column="32">*<pos:position pos:line="158" pos:column="33"/></modifier></type><name pos:line="158" pos:column="33">tmp_heap<pos:position pos:line="158" pos:column="41"/></name></decl>;<pos:position pos:line="158" pos:column="42"/></decl_stmt>
                    <expr_stmt><expr><name><name pos:line="159" pos:column="21">ctx<pos:position pos:line="159" pos:column="24"/></name><operator pos:line="159" pos:column="24">-&gt;<pos:position pos:line="159" pos:column="29"/></operator><name pos:line="159" pos:column="26">stream<pos:position pos:line="159" pos:column="32"/></name><operator pos:line="159" pos:column="32">.<pos:position pos:line="159" pos:column="33"/></operator><name pos:line="159" pos:column="33">next_out<pos:position pos:line="159" pos:column="41"/></name></name> <operator pos:line="159" pos:column="42">=<pos:position pos:line="159" pos:column="43"/></operator> <name><name pos:line="159" pos:column="44">ctx<pos:position pos:line="159" pos:column="47"/></name><operator pos:line="159" pos:column="47">-&gt;<pos:position pos:line="159" pos:column="52"/></operator><name pos:line="159" pos:column="49">buffer<pos:position pos:line="159" pos:column="55"/></name></name></expr>;<pos:position pos:line="159" pos:column="56"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="160" pos:column="21">len<pos:position pos:line="160" pos:column="24"/></name> <operator pos:line="160" pos:column="25">=<pos:position pos:line="160" pos:column="26"/></operator> <name><name pos:line="160" pos:column="27">c<pos:position pos:line="160" pos:column="28"/></name><operator pos:line="160" pos:column="28">-&gt;<pos:position pos:line="160" pos:column="33"/></operator><name pos:line="160" pos:column="30">bufferSize<pos:position pos:line="160" pos:column="40"/></name></name> <operator pos:line="160" pos:column="41">-<pos:position pos:line="160" pos:column="42"/></operator> <name><name pos:line="160" pos:column="43">ctx<pos:position pos:line="160" pos:column="46"/></name><operator pos:line="160" pos:column="46">-&gt;<pos:position pos:line="160" pos:column="51"/></operator><name pos:line="160" pos:column="48">stream<pos:position pos:line="160" pos:column="54"/></name><operator pos:line="160" pos:column="54">.<pos:position pos:line="160" pos:column="55"/></operator><name pos:line="160" pos:column="55">avail_out<pos:position pos:line="160" pos:column="64"/></name></name></expr>;<pos:position pos:line="160" pos:column="65"/></expr_stmt>

                    <expr_stmt><expr><name><name pos:line="162" pos:column="21">ctx<pos:position pos:line="162" pos:column="24"/></name><operator pos:line="162" pos:column="24">-&gt;<pos:position pos:line="162" pos:column="29"/></operator><name pos:line="162" pos:column="26">crc<pos:position pos:line="162" pos:column="29"/></name></name> <operator pos:line="162" pos:column="30">=<pos:position pos:line="162" pos:column="31"/></operator> <call><name pos:line="162" pos:column="32">crc32<pos:position pos:line="162" pos:column="37"/></name><argument_list pos:line="162" pos:column="37">(<argument><expr><name><name pos:line="162" pos:column="38">ctx<pos:position pos:line="162" pos:column="41"/></name><operator pos:line="162" pos:column="41">-&gt;<pos:position pos:line="162" pos:column="46"/></operator><name pos:line="162" pos:column="43">crc<pos:position pos:line="162" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="162" pos:column="48">(<pos:position pos:line="162" pos:column="49"/></operator><specifier pos:line="162" pos:column="49">const<pos:position pos:line="162" pos:column="54"/></specifier> <name pos:line="162" pos:column="55">Bytef<pos:position pos:line="162" pos:column="60"/></name> <operator pos:line="162" pos:column="61">*<pos:position pos:line="162" pos:column="62"/></operator><operator pos:line="162" pos:column="62">)<pos:position pos:line="162" pos:column="63"/></operator><name><name pos:line="162" pos:column="63">ctx<pos:position pos:line="162" pos:column="66"/></name><operator pos:line="162" pos:column="66">-&gt;<pos:position pos:line="162" pos:column="71"/></operator><name pos:line="162" pos:column="68">buffer<pos:position pos:line="162" pos:column="74"/></name></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="76">len<pos:position pos:line="162" pos:column="79"/></name></expr></argument>)<pos:position pos:line="162" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="81"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="163" pos:column="21">tmp_heap<pos:position pos:line="163" pos:column="29"/></name> <operator pos:line="163" pos:column="30">=<pos:position pos:line="163" pos:column="31"/></operator> <call><name pos:line="163" pos:column="32">apr_bucket_heap_create<pos:position pos:line="163" pos:column="54"/></name><argument_list pos:line="163" pos:column="54">(<argument><expr><operator pos:line="163" pos:column="55">(<pos:position pos:line="163" pos:column="56"/></operator><name pos:line="163" pos:column="56">char<pos:position pos:line="163" pos:column="60"/></name> <operator pos:line="163" pos:column="61">*<pos:position pos:line="163" pos:column="62"/></operator><operator pos:line="163" pos:column="62">)<pos:position pos:line="163" pos:column="63"/></operator><name><name pos:line="163" pos:column="63">ctx<pos:position pos:line="163" pos:column="66"/></name><operator pos:line="163" pos:column="66">-&gt;<pos:position pos:line="163" pos:column="71"/></operator><name pos:line="163" pos:column="68">buffer<pos:position pos:line="163" pos:column="74"/></name></name></expr></argument>, <argument><expr><name pos:line="163" pos:column="76">len<pos:position pos:line="163" pos:column="79"/></name></expr></argument>,
                                                      <argument><expr><name pos:line="164" pos:column="55">NULL<pos:position pos:line="164" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="164" pos:column="61">f<pos:position pos:line="164" pos:column="62"/></name><operator pos:line="164" pos:column="62">-&gt;<pos:position pos:line="164" pos:column="67"/></operator><name pos:line="164" pos:column="64">c<pos:position pos:line="164" pos:column="65"/></name><operator pos:line="164" pos:column="65">-&gt;<pos:position pos:line="164" pos:column="70"/></operator><name pos:line="164" pos:column="67">bucket_alloc<pos:position pos:line="164" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="164" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="81"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="165" pos:column="21">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="165" pos:column="44"/></name><argument_list pos:line="165" pos:column="44">(<argument><expr><name><name pos:line="165" pos:column="45">ctx<pos:position pos:line="165" pos:column="48"/></name><operator pos:line="165" pos:column="48">-&gt;<pos:position pos:line="165" pos:column="53"/></operator><name pos:line="165" pos:column="50">proc_bb<pos:position pos:line="165" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="59">tmp_heap<pos:position pos:line="165" pos:column="67"/></name></expr></argument>)<pos:position pos:line="165" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="69"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="166" pos:column="21">ctx<pos:position pos:line="166" pos:column="24"/></name><operator pos:line="166" pos:column="24">-&gt;<pos:position pos:line="166" pos:column="29"/></operator><name pos:line="166" pos:column="26">stream<pos:position pos:line="166" pos:column="32"/></name><operator pos:line="166" pos:column="32">.<pos:position pos:line="166" pos:column="33"/></operator><name pos:line="166" pos:column="33">avail_out<pos:position pos:line="166" pos:column="42"/></name></name> <operator pos:line="166" pos:column="43">=<pos:position pos:line="166" pos:column="44"/></operator> <name><name pos:line="166" pos:column="45">c<pos:position pos:line="166" pos:column="46"/></name><operator pos:line="166" pos:column="46">-&gt;<pos:position pos:line="166" pos:column="51"/></operator><name pos:line="166" pos:column="48">bufferSize<pos:position pos:line="166" pos:column="58"/></name></name></expr>;<pos:position pos:line="166" pos:column="59"/></expr_stmt>
                }<pos:position pos:line="167" pos:column="18"/></block></then></if>

                <expr_stmt><expr><name pos:line="169" pos:column="17">zRC<pos:position pos:line="169" pos:column="20"/></name> <operator pos:line="169" pos:column="21">=<pos:position pos:line="169" pos:column="22"/></operator> <call><name pos:line="169" pos:column="23">inflate<pos:position pos:line="169" pos:column="30"/></name><argument_list pos:line="169" pos:column="30">(<argument><expr><operator pos:line="169" pos:column="31">&amp;<pos:position pos:line="169" pos:column="36"/></operator><name><name pos:line="169" pos:column="32">ctx<pos:position pos:line="169" pos:column="35"/></name><operator pos:line="169" pos:column="35">-&gt;<pos:position pos:line="169" pos:column="40"/></operator><name pos:line="169" pos:column="37">stream<pos:position pos:line="169" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="45">Z_NO_FLUSH<pos:position pos:line="169" pos:column="55"/></name></expr></argument>)<pos:position pos:line="169" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="57"/></expr_stmt>

                <if pos:line="171" pos:column="17">if <condition pos:line="171" pos:column="20">(<expr><name pos:line="171" pos:column="21">zRC<pos:position pos:line="171" pos:column="24"/></name> <operator pos:line="171" pos:column="25">==<pos:position pos:line="171" pos:column="27"/></operator> <name pos:line="171" pos:column="28">Z_STREAM_END<pos:position pos:line="171" pos:column="40"/></name></expr>)<pos:position pos:line="171" pos:column="41"/></condition><then pos:line="171" pos:column="41"> <block pos:line="171" pos:column="42">{
                    <break pos:line="172" pos:column="21">break;<pos:position pos:line="172" pos:column="27"/></break>
                }<pos:position pos:line="173" pos:column="18"/></block></then></if>

                <if pos:line="175" pos:column="17">if <condition pos:line="175" pos:column="20">(<expr><name pos:line="175" pos:column="21">zRC<pos:position pos:line="175" pos:column="24"/></name> <operator pos:line="175" pos:column="25">!=<pos:position pos:line="175" pos:column="27"/></operator> <name pos:line="175" pos:column="28">Z_OK<pos:position pos:line="175" pos:column="32"/></name></expr>)<pos:position pos:line="175" pos:column="33"/></condition><then pos:line="175" pos:column="33"> <block pos:line="175" pos:column="34">{
                    <expr_stmt><expr><call><name pos:line="176" pos:column="21">inflateEnd<pos:position pos:line="176" pos:column="31"/></name><argument_list pos:line="176" pos:column="31">(<argument><expr><operator pos:line="176" pos:column="32">&amp;<pos:position pos:line="176" pos:column="37"/></operator><name><name pos:line="176" pos:column="33">ctx<pos:position pos:line="176" pos:column="36"/></name><operator pos:line="176" pos:column="36">-&gt;<pos:position pos:line="176" pos:column="41"/></operator><name pos:line="176" pos:column="38">stream<pos:position pos:line="176" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="176" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="46"/></expr_stmt>
                    <return pos:line="177" pos:column="21">return <expr><name pos:line="177" pos:column="28">APR_EGENERAL<pos:position pos:line="177" pos:column="40"/></name></expr>;<pos:position pos:line="177" pos:column="41"/></return>
                }<pos:position pos:line="178" pos:column="18"/></block></then></if>
            }<pos:position pos:line="179" pos:column="14"/></block></while>
            <if pos:line="180" pos:column="13">if <condition pos:line="180" pos:column="16">(<expr><name pos:line="180" pos:column="17">zRC<pos:position pos:line="180" pos:column="20"/></name> <operator pos:line="180" pos:column="21">==<pos:position pos:line="180" pos:column="23"/></operator> <name pos:line="180" pos:column="24">Z_STREAM_END<pos:position pos:line="180" pos:column="36"/></name></expr>)<pos:position pos:line="180" pos:column="37"/></condition><then pos:line="180" pos:column="37"> <block pos:line="180" pos:column="38">{
                <decl_stmt><decl><type><name pos:line="181" pos:column="17">apr_bucket<pos:position pos:line="181" pos:column="27"/></name> <modifier pos:line="181" pos:column="28">*<pos:position pos:line="181" pos:column="29"/></modifier></type><name pos:line="181" pos:column="29">tmp_heap<pos:position pos:line="181" pos:column="37"/></name></decl>, <modifier pos:line="181" pos:column="39">*<pos:position pos:line="181" pos:column="40"/></modifier><decl><type ref="prev"/><name pos:line="181" pos:column="40">eos<pos:position pos:line="181" pos:column="43"/></name></decl>;<pos:position pos:line="181" pos:column="44"/></decl_stmt>

                <expr_stmt><expr><call><name pos:line="183" pos:column="17">ap_log_rerror<pos:position pos:line="183" pos:column="30"/></name><argument_list pos:line="183" pos:column="30">(<argument><expr><name pos:line="183" pos:column="31">APLOG_MARK<pos:position pos:line="183" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="183" pos:column="43">APLOG_DEBUG<pos:position pos:line="183" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="183" pos:column="56">0<pos:position pos:line="183" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="183" pos:column="59">r<pos:position pos:line="183" pos:column="60"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="184" pos:column="31">"Zlib: Inflated %ld to %ld : URL %s"<pos:position pos:line="184" pos:column="67"/></literal></expr></argument>,
                              <argument><expr><name><name pos:line="185" pos:column="31">ctx<pos:position pos:line="185" pos:column="34"/></name><operator pos:line="185" pos:column="34">-&gt;<pos:position pos:line="185" pos:column="39"/></operator><name pos:line="185" pos:column="36">stream<pos:position pos:line="185" pos:column="42"/></name><operator pos:line="185" pos:column="42">.<pos:position pos:line="185" pos:column="43"/></operator><name pos:line="185" pos:column="43">total_in<pos:position pos:line="185" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="185" pos:column="53">ctx<pos:position pos:line="185" pos:column="56"/></name><operator pos:line="185" pos:column="56">-&gt;<pos:position pos:line="185" pos:column="61"/></operator><name pos:line="185" pos:column="58">stream<pos:position pos:line="185" pos:column="64"/></name><operator pos:line="185" pos:column="64">.<pos:position pos:line="185" pos:column="65"/></operator><name pos:line="185" pos:column="65">total_out<pos:position pos:line="185" pos:column="74"/></name></name></expr></argument>,
                              <argument><expr><name><name pos:line="186" pos:column="31">r<pos:position pos:line="186" pos:column="32"/></name><operator pos:line="186" pos:column="32">-&gt;<pos:position pos:line="186" pos:column="37"/></operator><name pos:line="186" pos:column="34">uri<pos:position pos:line="186" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="186" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="39"/></expr_stmt>

                <expr_stmt><expr><name pos:line="188" pos:column="17">len<pos:position pos:line="188" pos:column="20"/></name> <operator pos:line="188" pos:column="21">=<pos:position pos:line="188" pos:column="22"/></operator> <name><name pos:line="188" pos:column="23">c<pos:position pos:line="188" pos:column="24"/></name><operator pos:line="188" pos:column="24">-&gt;<pos:position pos:line="188" pos:column="29"/></operator><name pos:line="188" pos:column="26">bufferSize<pos:position pos:line="188" pos:column="36"/></name></name> <operator pos:line="188" pos:column="37">-<pos:position pos:line="188" pos:column="38"/></operator> <name><name pos:line="188" pos:column="39">ctx<pos:position pos:line="188" pos:column="42"/></name><operator pos:line="188" pos:column="42">-&gt;<pos:position pos:line="188" pos:column="47"/></operator><name pos:line="188" pos:column="44">stream<pos:position pos:line="188" pos:column="50"/></name><operator pos:line="188" pos:column="50">.<pos:position pos:line="188" pos:column="51"/></operator><name pos:line="188" pos:column="51">avail_out<pos:position pos:line="188" pos:column="60"/></name></name></expr>;<pos:position pos:line="188" pos:column="61"/></expr_stmt>

                <expr_stmt><expr><name><name pos:line="190" pos:column="17">ctx<pos:position pos:line="190" pos:column="20"/></name><operator pos:line="190" pos:column="20">-&gt;<pos:position pos:line="190" pos:column="25"/></operator><name pos:line="190" pos:column="22">crc<pos:position pos:line="190" pos:column="25"/></name></name> <operator pos:line="190" pos:column="26">=<pos:position pos:line="190" pos:column="27"/></operator> <call><name pos:line="190" pos:column="28">crc32<pos:position pos:line="190" pos:column="33"/></name><argument_list pos:line="190" pos:column="33">(<argument><expr><name><name pos:line="190" pos:column="34">ctx<pos:position pos:line="190" pos:column="37"/></name><operator pos:line="190" pos:column="37">-&gt;<pos:position pos:line="190" pos:column="42"/></operator><name pos:line="190" pos:column="39">crc<pos:position pos:line="190" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="190" pos:column="44">(<pos:position pos:line="190" pos:column="45"/></operator><specifier pos:line="190" pos:column="45">const<pos:position pos:line="190" pos:column="50"/></specifier> <name pos:line="190" pos:column="51">Bytef<pos:position pos:line="190" pos:column="56"/></name> <operator pos:line="190" pos:column="57">*<pos:position pos:line="190" pos:column="58"/></operator><operator pos:line="190" pos:column="58">)<pos:position pos:line="190" pos:column="59"/></operator><name><name pos:line="190" pos:column="59">ctx<pos:position pos:line="190" pos:column="62"/></name><operator pos:line="190" pos:column="62">-&gt;<pos:position pos:line="190" pos:column="67"/></operator><name pos:line="190" pos:column="64">buffer<pos:position pos:line="190" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="72">len<pos:position pos:line="190" pos:column="75"/></name></expr></argument>)<pos:position pos:line="190" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><name pos:line="191" pos:column="17">tmp_heap<pos:position pos:line="191" pos:column="25"/></name> <operator pos:line="191" pos:column="26">=<pos:position pos:line="191" pos:column="27"/></operator> <call><name pos:line="191" pos:column="28">apr_bucket_heap_create<pos:position pos:line="191" pos:column="50"/></name><argument_list pos:line="191" pos:column="50">(<argument><expr><operator pos:line="191" pos:column="51">(<pos:position pos:line="191" pos:column="52"/></operator><name pos:line="191" pos:column="52">char<pos:position pos:line="191" pos:column="56"/></name> <operator pos:line="191" pos:column="57">*<pos:position pos:line="191" pos:column="58"/></operator><operator pos:line="191" pos:column="58">)<pos:position pos:line="191" pos:column="59"/></operator><name><name pos:line="191" pos:column="59">ctx<pos:position pos:line="191" pos:column="62"/></name><operator pos:line="191" pos:column="62">-&gt;<pos:position pos:line="191" pos:column="67"/></operator><name pos:line="191" pos:column="64">buffer<pos:position pos:line="191" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="191" pos:column="72">len<pos:position pos:line="191" pos:column="75"/></name></expr></argument>,
                                                  <argument><expr><name pos:line="192" pos:column="51">NULL<pos:position pos:line="192" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="192" pos:column="57">f<pos:position pos:line="192" pos:column="58"/></name><operator pos:line="192" pos:column="58">-&gt;<pos:position pos:line="192" pos:column="63"/></operator><name pos:line="192" pos:column="60">c<pos:position pos:line="192" pos:column="61"/></name><operator pos:line="192" pos:column="61">-&gt;<pos:position pos:line="192" pos:column="66"/></operator><name pos:line="192" pos:column="63">bucket_alloc<pos:position pos:line="192" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="192" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="193" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="193" pos:column="40"/></name><argument_list pos:line="193" pos:column="40">(<argument><expr><name><name pos:line="193" pos:column="41">ctx<pos:position pos:line="193" pos:column="44"/></name><operator pos:line="193" pos:column="44">-&gt;<pos:position pos:line="193" pos:column="49"/></operator><name pos:line="193" pos:column="46">proc_bb<pos:position pos:line="193" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="193" pos:column="55">tmp_heap<pos:position pos:line="193" pos:column="63"/></name></expr></argument>)<pos:position pos:line="193" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="65"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="194" pos:column="17">ctx<pos:position pos:line="194" pos:column="20"/></name><operator pos:line="194" pos:column="20">-&gt;<pos:position pos:line="194" pos:column="25"/></operator><name pos:line="194" pos:column="22">stream<pos:position pos:line="194" pos:column="28"/></name><operator pos:line="194" pos:column="28">.<pos:position pos:line="194" pos:column="29"/></operator><name pos:line="194" pos:column="29">avail_out<pos:position pos:line="194" pos:column="38"/></name></name> <operator pos:line="194" pos:column="39">=<pos:position pos:line="194" pos:column="40"/></operator> <name><name pos:line="194" pos:column="41">c<pos:position pos:line="194" pos:column="42"/></name><operator pos:line="194" pos:column="42">-&gt;<pos:position pos:line="194" pos:column="47"/></operator><name pos:line="194" pos:column="44">bufferSize<pos:position pos:line="194" pos:column="54"/></name></name></expr>;<pos:position pos:line="194" pos:column="55"/></expr_stmt>

                <comment type="block" pos:line="196" pos:column="17">/* Is the remaining 8 bytes already in the avail stream? */</comment>
                <if pos:line="197" pos:column="17">if <condition pos:line="197" pos:column="20">(<expr><name><name pos:line="197" pos:column="21">ctx<pos:position pos:line="197" pos:column="24"/></name><operator pos:line="197" pos:column="24">-&gt;<pos:position pos:line="197" pos:column="29"/></operator><name pos:line="197" pos:column="26">stream<pos:position pos:line="197" pos:column="32"/></name><operator pos:line="197" pos:column="32">.<pos:position pos:line="197" pos:column="33"/></operator><name pos:line="197" pos:column="33">avail_in<pos:position pos:line="197" pos:column="41"/></name></name> <operator pos:line="197" pos:column="42">&gt;=<pos:position pos:line="197" pos:column="47"/></operator> <literal type="number" pos:line="197" pos:column="45">8<pos:position pos:line="197" pos:column="46"/></literal></expr>)<pos:position pos:line="197" pos:column="47"/></condition><then pos:line="197" pos:column="47"> <block pos:line="197" pos:column="48">{
                    <decl_stmt><decl><type><name pos:line="198" pos:column="21">unsigned<pos:position pos:line="198" pos:column="29"/></name> <name pos:line="198" pos:column="30">long<pos:position pos:line="198" pos:column="34"/></name></type> <name pos:line="198" pos:column="35">compCRC<pos:position pos:line="198" pos:column="42"/></name></decl>, <decl><type ref="prev"/><name pos:line="198" pos:column="44">compLen<pos:position pos:line="198" pos:column="51"/></name></decl>;<pos:position pos:line="198" pos:column="52"/></decl_stmt>
                    <expr_stmt><expr><name pos:line="199" pos:column="21">compCRC<pos:position pos:line="199" pos:column="28"/></name> <operator pos:line="199" pos:column="29">=<pos:position pos:line="199" pos:column="30"/></operator> <call><name pos:line="199" pos:column="31">getLong<pos:position pos:line="199" pos:column="38"/></name><argument_list pos:line="199" pos:column="38">(<argument><expr><name><name pos:line="199" pos:column="39">ctx<pos:position pos:line="199" pos:column="42"/></name><operator pos:line="199" pos:column="42">-&gt;<pos:position pos:line="199" pos:column="47"/></operator><name pos:line="199" pos:column="44">stream<pos:position pos:line="199" pos:column="50"/></name><operator pos:line="199" pos:column="50">.<pos:position pos:line="199" pos:column="51"/></operator><name pos:line="199" pos:column="51">next_in<pos:position pos:line="199" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="199" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="60"/></expr_stmt>
                    <if pos:line="200" pos:column="21">if <condition pos:line="200" pos:column="24">(<expr><name><name pos:line="200" pos:column="25">ctx<pos:position pos:line="200" pos:column="28"/></name><operator pos:line="200" pos:column="28">-&gt;<pos:position pos:line="200" pos:column="33"/></operator><name pos:line="200" pos:column="30">crc<pos:position pos:line="200" pos:column="33"/></name></name> <operator pos:line="200" pos:column="34">!=<pos:position pos:line="200" pos:column="36"/></operator> <name pos:line="200" pos:column="37">compCRC<pos:position pos:line="200" pos:column="44"/></name></expr>)<pos:position pos:line="200" pos:column="45"/></condition><then pos:line="200" pos:column="45"> <block pos:line="200" pos:column="46">{
                        <expr_stmt><expr><call><name pos:line="201" pos:column="25">inflateEnd<pos:position pos:line="201" pos:column="35"/></name><argument_list pos:line="201" pos:column="35">(<argument><expr><operator pos:line="201" pos:column="36">&amp;<pos:position pos:line="201" pos:column="41"/></operator><name><name pos:line="201" pos:column="37">ctx<pos:position pos:line="201" pos:column="40"/></name><operator pos:line="201" pos:column="40">-&gt;<pos:position pos:line="201" pos:column="45"/></operator><name pos:line="201" pos:column="42">stream<pos:position pos:line="201" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="201" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="50"/></expr_stmt>
                        <return pos:line="202" pos:column="25">return <expr><name pos:line="202" pos:column="32">APR_EGENERAL<pos:position pos:line="202" pos:column="44"/></name></expr>;<pos:position pos:line="202" pos:column="45"/></return>
                    }<pos:position pos:line="203" pos:column="22"/></block></then></if>
                    <expr_stmt><expr><name><name pos:line="204" pos:column="21">ctx<pos:position pos:line="204" pos:column="24"/></name><operator pos:line="204" pos:column="24">-&gt;<pos:position pos:line="204" pos:column="29"/></operator><name pos:line="204" pos:column="26">stream<pos:position pos:line="204" pos:column="32"/></name><operator pos:line="204" pos:column="32">.<pos:position pos:line="204" pos:column="33"/></operator><name pos:line="204" pos:column="33">next_in<pos:position pos:line="204" pos:column="40"/></name></name> <operator pos:line="204" pos:column="41">+=<pos:position pos:line="204" pos:column="43"/></operator> <literal type="number" pos:line="204" pos:column="44">4<pos:position pos:line="204" pos:column="45"/></literal></expr>;<pos:position pos:line="204" pos:column="46"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="205" pos:column="21">compLen<pos:position pos:line="205" pos:column="28"/></name> <operator pos:line="205" pos:column="29">=<pos:position pos:line="205" pos:column="30"/></operator> <call><name pos:line="205" pos:column="31">getLong<pos:position pos:line="205" pos:column="38"/></name><argument_list pos:line="205" pos:column="38">(<argument><expr><name><name pos:line="205" pos:column="39">ctx<pos:position pos:line="205" pos:column="42"/></name><operator pos:line="205" pos:column="42">-&gt;<pos:position pos:line="205" pos:column="47"/></operator><name pos:line="205" pos:column="44">stream<pos:position pos:line="205" pos:column="50"/></name><operator pos:line="205" pos:column="50">.<pos:position pos:line="205" pos:column="51"/></operator><name pos:line="205" pos:column="51">next_in<pos:position pos:line="205" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="205" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="205" pos:column="60"/></expr_stmt>
                    <if pos:line="206" pos:column="21">if <condition pos:line="206" pos:column="24">(<expr><name><name pos:line="206" pos:column="25">ctx<pos:position pos:line="206" pos:column="28"/></name><operator pos:line="206" pos:column="28">-&gt;<pos:position pos:line="206" pos:column="33"/></operator><name pos:line="206" pos:column="30">stream<pos:position pos:line="206" pos:column="36"/></name><operator pos:line="206" pos:column="36">.<pos:position pos:line="206" pos:column="37"/></operator><name pos:line="206" pos:column="37">total_out<pos:position pos:line="206" pos:column="46"/></name></name> <operator pos:line="206" pos:column="47">!=<pos:position pos:line="206" pos:column="49"/></operator> <name pos:line="206" pos:column="50">compLen<pos:position pos:line="206" pos:column="57"/></name></expr>)<pos:position pos:line="206" pos:column="58"/></condition><then pos:line="206" pos:column="58"> <block pos:line="206" pos:column="59">{
                        <expr_stmt><expr><call><name pos:line="207" pos:column="25">inflateEnd<pos:position pos:line="207" pos:column="35"/></name><argument_list pos:line="207" pos:column="35">(<argument><expr><operator pos:line="207" pos:column="36">&amp;<pos:position pos:line="207" pos:column="41"/></operator><name><name pos:line="207" pos:column="37">ctx<pos:position pos:line="207" pos:column="40"/></name><operator pos:line="207" pos:column="40">-&gt;<pos:position pos:line="207" pos:column="45"/></operator><name pos:line="207" pos:column="42">stream<pos:position pos:line="207" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="207" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="50"/></expr_stmt>
                        <return pos:line="208" pos:column="25">return <expr><name pos:line="208" pos:column="32">APR_EGENERAL<pos:position pos:line="208" pos:column="44"/></name></expr>;<pos:position pos:line="208" pos:column="45"/></return>
                    }<pos:position pos:line="209" pos:column="22"/></block></then></if>
                }<pos:position pos:line="210" pos:column="18"/></block></then>
                <else pos:line="211" pos:column="17">else <block pos:line="211" pos:column="22">{
                    <comment type="block" pos:line="212" pos:column="21">/* FIXME: We need to grab the 8 verification bytes
                     * from the wire! */</comment>
                    <expr_stmt><expr><call><name pos:line="214" pos:column="21">inflateEnd<pos:position pos:line="214" pos:column="31"/></name><argument_list pos:line="214" pos:column="31">(<argument><expr><operator pos:line="214" pos:column="32">&amp;<pos:position pos:line="214" pos:column="37"/></operator><name><name pos:line="214" pos:column="33">ctx<pos:position pos:line="214" pos:column="36"/></name><operator pos:line="214" pos:column="36">-&gt;<pos:position pos:line="214" pos:column="41"/></operator><name pos:line="214" pos:column="38">stream<pos:position pos:line="214" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="214" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="46"/></expr_stmt>
                    <return pos:line="215" pos:column="21">return <expr><name pos:line="215" pos:column="28">APR_EGENERAL<pos:position pos:line="215" pos:column="40"/></name></expr>;<pos:position pos:line="215" pos:column="41"/></return>
                }<pos:position pos:line="216" pos:column="18"/></block></else></if>

                <expr_stmt><expr><call><name pos:line="218" pos:column="17">inflateEnd<pos:position pos:line="218" pos:column="27"/></name><argument_list pos:line="218" pos:column="27">(<argument><expr><operator pos:line="218" pos:column="28">&amp;<pos:position pos:line="218" pos:column="33"/></operator><name><name pos:line="218" pos:column="29">ctx<pos:position pos:line="218" pos:column="32"/></name><operator pos:line="218" pos:column="32">-&gt;<pos:position pos:line="218" pos:column="37"/></operator><name pos:line="218" pos:column="34">stream<pos:position pos:line="218" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="218" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="42"/></expr_stmt>

                <expr_stmt><expr><name pos:line="220" pos:column="17">eos<pos:position pos:line="220" pos:column="20"/></name> <operator pos:line="220" pos:column="21">=<pos:position pos:line="220" pos:column="22"/></operator> <call><name pos:line="220" pos:column="23">apr_bucket_eos_create<pos:position pos:line="220" pos:column="44"/></name><argument_list pos:line="220" pos:column="44">(<argument><expr><name><name pos:line="220" pos:column="45">f<pos:position pos:line="220" pos:column="46"/></name><operator pos:line="220" pos:column="46">-&gt;<pos:position pos:line="220" pos:column="51"/></operator><name pos:line="220" pos:column="48">c<pos:position pos:line="220" pos:column="49"/></name><operator pos:line="220" pos:column="49">-&gt;<pos:position pos:line="220" pos:column="54"/></operator><name pos:line="220" pos:column="51">bucket_alloc<pos:position pos:line="220" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="220" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="65"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="221" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="221" pos:column="40"/></name><argument_list pos:line="221" pos:column="40">(<argument><expr><name><name pos:line="221" pos:column="41">ctx<pos:position pos:line="221" pos:column="44"/></name><operator pos:line="221" pos:column="44">-&gt;<pos:position pos:line="221" pos:column="49"/></operator><name pos:line="221" pos:column="46">proc_bb<pos:position pos:line="221" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="221" pos:column="55">eos<pos:position pos:line="221" pos:column="58"/></name></expr></argument>)<pos:position pos:line="221" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="60"/></expr_stmt> 
                <break pos:line="222" pos:column="17">break;<pos:position pos:line="222" pos:column="23"/></break>
            }<pos:position pos:line="223" pos:column="14"/></block></then></if>

        }<pos:position pos:line="225" pos:column="10"/></block>
        <expr_stmt><expr><call><name pos:line="226" pos:column="9">apr_brigade_cleanup<pos:position pos:line="226" pos:column="28"/></name><argument_list pos:line="226" pos:column="28">(<argument><expr><name><name pos:line="226" pos:column="29">ctx<pos:position pos:line="226" pos:column="32"/></name><operator pos:line="226" pos:column="32">-&gt;<pos:position pos:line="226" pos:column="37"/></operator><name pos:line="226" pos:column="34">bb<pos:position pos:line="226" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="226" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="226" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="227" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="229" pos:column="5">/* If we are about to return nothing for a 'blocking' read and we have
     * some data in our zlib buffer, flush it out so we can return something.
     */</comment>
    <if pos:line="232" pos:column="5">if <condition pos:line="232" pos:column="8">(<expr><name pos:line="232" pos:column="9">block<pos:position pos:line="232" pos:column="14"/></name> <operator pos:line="232" pos:column="15">==<pos:position pos:line="232" pos:column="17"/></operator> <name pos:line="232" pos:column="18">APR_BLOCK_READ<pos:position pos:line="232" pos:column="32"/></name> <operator pos:line="232" pos:column="33">&amp;&amp;<pos:position pos:line="232" pos:column="43"/></operator>
        <call><name pos:line="233" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="233" pos:column="26"/></name><argument_list pos:line="233" pos:column="26">(<argument><expr><name><name pos:line="233" pos:column="27">ctx<pos:position pos:line="233" pos:column="30"/></name><operator pos:line="233" pos:column="30">-&gt;<pos:position pos:line="233" pos:column="35"/></operator><name pos:line="233" pos:column="32">proc_bb<pos:position pos:line="233" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="233" pos:column="40"/></argument_list></call> <operator pos:line="233" pos:column="41">&amp;&amp;<pos:position pos:line="233" pos:column="51"/></operator>
        <name><name pos:line="234" pos:column="9">ctx<pos:position pos:line="234" pos:column="12"/></name><operator pos:line="234" pos:column="12">-&gt;<pos:position pos:line="234" pos:column="17"/></operator><name pos:line="234" pos:column="14">stream<pos:position pos:line="234" pos:column="20"/></name><operator pos:line="234" pos:column="20">.<pos:position pos:line="234" pos:column="21"/></operator><name pos:line="234" pos:column="21">avail_out<pos:position pos:line="234" pos:column="30"/></name></name> <operator pos:line="234" pos:column="31">&lt;<pos:position pos:line="234" pos:column="35"/></operator> <name><name pos:line="234" pos:column="33">c<pos:position pos:line="234" pos:column="34"/></name><operator pos:line="234" pos:column="34">-&gt;<pos:position pos:line="234" pos:column="39"/></operator><name pos:line="234" pos:column="36">bufferSize<pos:position pos:line="234" pos:column="46"/></name></name></expr>)<pos:position pos:line="234" pos:column="47"/></condition><then pos:line="234" pos:column="47"> <block pos:line="234" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="235" pos:column="9">apr_bucket<pos:position pos:line="235" pos:column="19"/></name> <modifier pos:line="235" pos:column="20">*<pos:position pos:line="235" pos:column="21"/></modifier></type><name pos:line="235" pos:column="21">tmp_heap<pos:position pos:line="235" pos:column="29"/></name></decl>;<pos:position pos:line="235" pos:column="30"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="236" pos:column="9">apr_size_t<pos:position pos:line="236" pos:column="19"/></name></type> <name pos:line="236" pos:column="20">len<pos:position pos:line="236" pos:column="23"/></name></decl>;<pos:position pos:line="236" pos:column="24"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="237" pos:column="9">ctx<pos:position pos:line="237" pos:column="12"/></name><operator pos:line="237" pos:column="12">-&gt;<pos:position pos:line="237" pos:column="17"/></operator><name pos:line="237" pos:column="14">stream<pos:position pos:line="237" pos:column="20"/></name><operator pos:line="237" pos:column="20">.<pos:position pos:line="237" pos:column="21"/></operator><name pos:line="237" pos:column="21">next_out<pos:position pos:line="237" pos:column="29"/></name></name> <operator pos:line="237" pos:column="30">=<pos:position pos:line="237" pos:column="31"/></operator> <name><name pos:line="237" pos:column="32">ctx<pos:position pos:line="237" pos:column="35"/></name><operator pos:line="237" pos:column="35">-&gt;<pos:position pos:line="237" pos:column="40"/></operator><name pos:line="237" pos:column="37">buffer<pos:position pos:line="237" pos:column="43"/></name></name></expr>;<pos:position pos:line="237" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="238" pos:column="9">len<pos:position pos:line="238" pos:column="12"/></name> <operator pos:line="238" pos:column="13">=<pos:position pos:line="238" pos:column="14"/></operator> <name><name pos:line="238" pos:column="15">c<pos:position pos:line="238" pos:column="16"/></name><operator pos:line="238" pos:column="16">-&gt;<pos:position pos:line="238" pos:column="21"/></operator><name pos:line="238" pos:column="18">bufferSize<pos:position pos:line="238" pos:column="28"/></name></name> <operator pos:line="238" pos:column="29">-<pos:position pos:line="238" pos:column="30"/></operator> <name><name pos:line="238" pos:column="31">ctx<pos:position pos:line="238" pos:column="34"/></name><operator pos:line="238" pos:column="34">-&gt;<pos:position pos:line="238" pos:column="39"/></operator><name pos:line="238" pos:column="36">stream<pos:position pos:line="238" pos:column="42"/></name><operator pos:line="238" pos:column="42">.<pos:position pos:line="238" pos:column="43"/></operator><name pos:line="238" pos:column="43">avail_out<pos:position pos:line="238" pos:column="52"/></name></name></expr>;<pos:position pos:line="238" pos:column="53"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="240" pos:column="9">ctx<pos:position pos:line="240" pos:column="12"/></name><operator pos:line="240" pos:column="12">-&gt;<pos:position pos:line="240" pos:column="17"/></operator><name pos:line="240" pos:column="14">crc<pos:position pos:line="240" pos:column="17"/></name></name> <operator pos:line="240" pos:column="18">=<pos:position pos:line="240" pos:column="19"/></operator> <call><name pos:line="240" pos:column="20">crc32<pos:position pos:line="240" pos:column="25"/></name><argument_list pos:line="240" pos:column="25">(<argument><expr><name><name pos:line="240" pos:column="26">ctx<pos:position pos:line="240" pos:column="29"/></name><operator pos:line="240" pos:column="29">-&gt;<pos:position pos:line="240" pos:column="34"/></operator><name pos:line="240" pos:column="31">crc<pos:position pos:line="240" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="240" pos:column="36">(<pos:position pos:line="240" pos:column="37"/></operator><specifier pos:line="240" pos:column="37">const<pos:position pos:line="240" pos:column="42"/></specifier> <name pos:line="240" pos:column="43">Bytef<pos:position pos:line="240" pos:column="48"/></name> <operator pos:line="240" pos:column="49">*<pos:position pos:line="240" pos:column="50"/></operator><operator pos:line="240" pos:column="50">)<pos:position pos:line="240" pos:column="51"/></operator><name><name pos:line="240" pos:column="51">ctx<pos:position pos:line="240" pos:column="54"/></name><operator pos:line="240" pos:column="54">-&gt;<pos:position pos:line="240" pos:column="59"/></operator><name pos:line="240" pos:column="56">buffer<pos:position pos:line="240" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="240" pos:column="64">len<pos:position pos:line="240" pos:column="67"/></name></expr></argument>)<pos:position pos:line="240" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><name pos:line="241" pos:column="9">tmp_heap<pos:position pos:line="241" pos:column="17"/></name> <operator pos:line="241" pos:column="18">=<pos:position pos:line="241" pos:column="19"/></operator> <call><name pos:line="241" pos:column="20">apr_bucket_heap_create<pos:position pos:line="241" pos:column="42"/></name><argument_list pos:line="241" pos:column="42">(<argument><expr><operator pos:line="241" pos:column="43">(<pos:position pos:line="241" pos:column="44"/></operator><name pos:line="241" pos:column="44">char<pos:position pos:line="241" pos:column="48"/></name> <operator pos:line="241" pos:column="49">*<pos:position pos:line="241" pos:column="50"/></operator><operator pos:line="241" pos:column="50">)<pos:position pos:line="241" pos:column="51"/></operator><name><name pos:line="241" pos:column="51">ctx<pos:position pos:line="241" pos:column="54"/></name><operator pos:line="241" pos:column="54">-&gt;<pos:position pos:line="241" pos:column="59"/></operator><name pos:line="241" pos:column="56">buffer<pos:position pos:line="241" pos:column="62"/></name></name></expr></argument>, <argument><expr><name pos:line="241" pos:column="64">len<pos:position pos:line="241" pos:column="67"/></name></expr></argument>,
                                          <argument><expr><name pos:line="242" pos:column="43">NULL<pos:position pos:line="242" pos:column="47"/></name></expr></argument>, <argument><expr><name><name pos:line="242" pos:column="49">f<pos:position pos:line="242" pos:column="50"/></name><operator pos:line="242" pos:column="50">-&gt;<pos:position pos:line="242" pos:column="55"/></operator><name pos:line="242" pos:column="52">c<pos:position pos:line="242" pos:column="53"/></name><operator pos:line="242" pos:column="53">-&gt;<pos:position pos:line="242" pos:column="58"/></operator><name pos:line="242" pos:column="55">bucket_alloc<pos:position pos:line="242" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="242" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="243" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="243" pos:column="32"/></name><argument_list pos:line="243" pos:column="32">(<argument><expr><name><name pos:line="243" pos:column="33">ctx<pos:position pos:line="243" pos:column="36"/></name><operator pos:line="243" pos:column="36">-&gt;<pos:position pos:line="243" pos:column="41"/></operator><name pos:line="243" pos:column="38">proc_bb<pos:position pos:line="243" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="243" pos:column="47">tmp_heap<pos:position pos:line="243" pos:column="55"/></name></expr></argument>)<pos:position pos:line="243" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="243" pos:column="57"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="244" pos:column="9">ctx<pos:position pos:line="244" pos:column="12"/></name><operator pos:line="244" pos:column="12">-&gt;<pos:position pos:line="244" pos:column="17"/></operator><name pos:line="244" pos:column="14">stream<pos:position pos:line="244" pos:column="20"/></name><operator pos:line="244" pos:column="20">.<pos:position pos:line="244" pos:column="21"/></operator><name pos:line="244" pos:column="21">avail_out<pos:position pos:line="244" pos:column="30"/></name></name> <operator pos:line="244" pos:column="31">=<pos:position pos:line="244" pos:column="32"/></operator> <name><name pos:line="244" pos:column="33">c<pos:position pos:line="244" pos:column="34"/></name><operator pos:line="244" pos:column="34">-&gt;<pos:position pos:line="244" pos:column="39"/></operator><name pos:line="244" pos:column="36">bufferSize<pos:position pos:line="244" pos:column="46"/></name></name></expr>;<pos:position pos:line="244" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="245" pos:column="6"/></block></then></if>

    <if pos:line="247" pos:column="5">if <condition pos:line="247" pos:column="8">(<expr><operator pos:line="247" pos:column="9">!<pos:position pos:line="247" pos:column="10"/></operator><call><name pos:line="247" pos:column="10">APR_BRIGADE_EMPTY<pos:position pos:line="247" pos:column="27"/></name><argument_list pos:line="247" pos:column="27">(<argument><expr><name><name pos:line="247" pos:column="28">ctx<pos:position pos:line="247" pos:column="31"/></name><operator pos:line="247" pos:column="31">-&gt;<pos:position pos:line="247" pos:column="36"/></operator><name pos:line="247" pos:column="33">proc_bb<pos:position pos:line="247" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="247" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="247" pos:column="42"/></condition><then pos:line="247" pos:column="42"> <block pos:line="247" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="248" pos:column="9">apr_bucket_brigade<pos:position pos:line="248" pos:column="27"/></name> <modifier pos:line="248" pos:column="28">*<pos:position pos:line="248" pos:column="29"/></modifier></type><name pos:line="248" pos:column="29">newbb<pos:position pos:line="248" pos:column="34"/></name></decl>;<pos:position pos:line="248" pos:column="35"/></decl_stmt>

        <comment type="block" pos:line="250" pos:column="9">/* May return APR_INCOMPLETE which is fine by us. */</comment>
        <expr_stmt><expr><call><name pos:line="251" pos:column="9">apr_brigade_partition<pos:position pos:line="251" pos:column="30"/></name><argument_list pos:line="251" pos:column="30">(<argument><expr><name><name pos:line="251" pos:column="31">ctx<pos:position pos:line="251" pos:column="34"/></name><operator pos:line="251" pos:column="34">-&gt;<pos:position pos:line="251" pos:column="39"/></operator><name pos:line="251" pos:column="36">proc_bb<pos:position pos:line="251" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="251" pos:column="45">readbytes<pos:position pos:line="251" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="251" pos:column="56">&amp;<pos:position pos:line="251" pos:column="61"/></operator><name pos:line="251" pos:column="57">bkt<pos:position pos:line="251" pos:column="60"/></name></expr></argument>)<pos:position pos:line="251" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="251" pos:column="62"/></expr_stmt>

        <expr_stmt><expr><name pos:line="253" pos:column="9">newbb<pos:position pos:line="253" pos:column="14"/></name> <operator pos:line="253" pos:column="15">=<pos:position pos:line="253" pos:column="16"/></operator> <call><name pos:line="253" pos:column="17">apr_brigade_split<pos:position pos:line="253" pos:column="34"/></name><argument_list pos:line="253" pos:column="34">(<argument><expr><name><name pos:line="253" pos:column="35">ctx<pos:position pos:line="253" pos:column="38"/></name><operator pos:line="253" pos:column="38">-&gt;<pos:position pos:line="253" pos:column="43"/></operator><name pos:line="253" pos:column="40">proc_bb<pos:position pos:line="253" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="253" pos:column="49">bkt<pos:position pos:line="253" pos:column="52"/></name></expr></argument>)<pos:position pos:line="253" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="253" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="254" pos:column="9">APR_BRIGADE_CONCAT<pos:position pos:line="254" pos:column="27"/></name><argument_list pos:line="254" pos:column="27">(<argument><expr><name pos:line="254" pos:column="28">bb<pos:position pos:line="254" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="254" pos:column="32">ctx<pos:position pos:line="254" pos:column="35"/></name><operator pos:line="254" pos:column="35">-&gt;<pos:position pos:line="254" pos:column="40"/></operator><name pos:line="254" pos:column="37">proc_bb<pos:position pos:line="254" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="254" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="254" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="255" pos:column="9">APR_BRIGADE_CONCAT<pos:position pos:line="255" pos:column="27"/></name><argument_list pos:line="255" pos:column="27">(<argument><expr><name><name pos:line="255" pos:column="28">ctx<pos:position pos:line="255" pos:column="31"/></name><operator pos:line="255" pos:column="31">-&gt;<pos:position pos:line="255" pos:column="36"/></operator><name pos:line="255" pos:column="33">proc_bb<pos:position pos:line="255" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="255" pos:column="42">newbb<pos:position pos:line="255" pos:column="47"/></name></expr></argument>)<pos:position pos:line="255" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="256" pos:column="6"/></block></then></if>

    <return pos:line="258" pos:column="5">return <expr><name pos:line="258" pos:column="12">APR_SUCCESS<pos:position pos:line="258" pos:column="23"/></name></expr>;<pos:position pos:line="258" pos:column="24"/></return>
}<pos:position pos:line="259" pos:column="2"/></block></function></unit>
