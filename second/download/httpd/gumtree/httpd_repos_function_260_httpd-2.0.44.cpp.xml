<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_260_httpd-2.0.44.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">dav_lock_get_activelock<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">request_rec<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">r<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">dav_lock<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">lock<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">dav_buffer<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">pbuf<pos:position pos:line="2" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="54"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">dav_lock<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">lock_scan<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">dav_hooks_locks<pos:position pos:line="5" pos:column="26"/></name> <modifier pos:line="5" pos:column="27">*<pos:position pos:line="5" pos:column="28"/></modifier></type><name pos:line="5" pos:column="28">hooks<pos:position pos:line="5" pos:column="33"/></name> <init pos:line="5" pos:column="34">= <expr><call><name pos:line="5" pos:column="36">DAV_GET_HOOKS_LOCKS<pos:position pos:line="5" pos:column="55"/></name><argument_list pos:line="5" pos:column="55">(<argument><expr><name pos:line="5" pos:column="56">r<pos:position pos:line="5" pos:column="57"/></name></expr></argument>)<pos:position pos:line="5" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">count<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">dav_buffer<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">work_buf<pos:position pos:line="7" pos:column="24"/></name> <init pos:line="7" pos:column="25">= <expr><block pos:line="7" pos:column="27">{ <expr><literal type="number" pos:line="7" pos:column="29">0<pos:position pos:line="7" pos:column="30"/></literal></expr> }<pos:position pos:line="7" pos:column="32"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_pool_t<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">p<pos:position pos:line="8" pos:column="18"/></name> <init pos:line="8" pos:column="19">= <expr><name><name pos:line="8" pos:column="21">r<pos:position pos:line="8" pos:column="22"/></name><operator pos:line="8" pos:column="22">-&gt;<pos:position pos:line="8" pos:column="27"/></operator><name pos:line="8" pos:column="24">pool<pos:position pos:line="8" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="29"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* If no locks or no lock provider, there are no locks */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name pos:line="11" pos:column="9">lock<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">==<pos:position pos:line="11" pos:column="16"/></operator> <name pos:line="11" pos:column="17">NULL<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">||<pos:position pos:line="11" pos:column="24"/></operator> <name pos:line="11" pos:column="25">hooks<pos:position pos:line="11" pos:column="30"/></name> <operator pos:line="11" pos:column="31">==<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="34">NULL<pos:position pos:line="11" pos:column="38"/></name></expr>)<pos:position pos:line="11" pos:column="39"/></condition><then pos:line="11" pos:column="39"> <block pos:line="11" pos:column="40">{
        <comment type="block" pos:line="12" pos:column="9">/*
        ** Since resourcediscovery is defined with (activelock)*, 
        ** &lt;D:activelock/&gt; shouldn't be necessary for an empty lock.
        */</comment>
        <return pos:line="16" pos:column="9">return <expr><literal type="string" pos:line="16" pos:column="16">""<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/*
    ** Note: it could be interesting to sum the lengths of the owners
    **       and locktokens during this loop. However, the buffer
    **       mechanism provides some rough padding so that we don't
    **       really need to have an exact size. Further, constructing
    **       locktoken strings could be relatively expensive.
    */</comment>
    <for pos:line="26" pos:column="5">for <control pos:line="26" pos:column="9">(<init><expr><name pos:line="26" pos:column="10">lock_scan<pos:position pos:line="26" pos:column="19"/></name> <operator pos:line="26" pos:column="20">=<pos:position pos:line="26" pos:column="21"/></operator> <name pos:line="26" pos:column="22">lock<pos:position pos:line="26" pos:column="26"/></name></expr>;<pos:position pos:line="26" pos:column="27"/></init> <condition><expr><name pos:line="26" pos:column="28">lock_scan<pos:position pos:line="26" pos:column="37"/></name> <operator pos:line="26" pos:column="38">!=<pos:position pos:line="26" pos:column="40"/></operator> <name pos:line="26" pos:column="41">NULL<pos:position pos:line="26" pos:column="45"/></name></expr>;<pos:position pos:line="26" pos:column="46"/></condition> <incr><expr><name pos:line="26" pos:column="47">lock_scan<pos:position pos:line="26" pos:column="56"/></name> <operator pos:line="26" pos:column="57">=<pos:position pos:line="26" pos:column="58"/></operator> <name><name pos:line="26" pos:column="59">lock_scan<pos:position pos:line="26" pos:column="68"/></name><operator pos:line="26" pos:column="68">-&gt;<pos:position pos:line="26" pos:column="73"/></operator><name pos:line="26" pos:column="70">next<pos:position pos:line="26" pos:column="74"/></name></name></expr></incr>)<pos:position pos:line="26" pos:column="75"/></control>
        <block type="pseudo"><expr_stmt><expr><name pos:line="27" pos:column="9">count<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">++<pos:position pos:line="27" pos:column="16"/></operator></expr>;<pos:position pos:line="27" pos:column="17"/></expr_stmt></block></for>

    <comment type="block" pos:line="29" pos:column="5">/* if a buffer was not provided, then use an internal buffer */</comment>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">pbuf<pos:position pos:line="30" pos:column="13"/></name> <operator pos:line="30" pos:column="14">==<pos:position pos:line="30" pos:column="16"/></operator> <name pos:line="30" pos:column="17">NULL<pos:position pos:line="30" pos:column="21"/></name></expr>)<pos:position pos:line="30" pos:column="22"/></condition><then pos:line="30" pos:column="22">
        <block type="pseudo"><expr_stmt><expr><name pos:line="31" pos:column="9">pbuf<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <operator pos:line="31" pos:column="16">&amp;<pos:position pos:line="31" pos:column="21"/></operator><name pos:line="31" pos:column="17">work_buf<pos:position pos:line="31" pos:column="25"/></name></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="33" pos:column="5">/* reset the length before we start appending stuff */</comment>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">pbuf<pos:position pos:line="34" pos:column="9"/></name><operator pos:line="34" pos:column="9">-&gt;<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="11">cur_len<pos:position pos:line="34" pos:column="18"/></name></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <literal type="number" pos:line="34" pos:column="21">0<pos:position pos:line="34" pos:column="22"/></literal></expr>;<pos:position pos:line="34" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* prep the buffer with a "good" size */</comment>
    <expr_stmt><expr><call><name pos:line="37" pos:column="5">dav_check_bufsize<pos:position pos:line="37" pos:column="22"/></name><argument_list pos:line="37" pos:column="22">(<argument><expr><name pos:line="37" pos:column="23">p<pos:position pos:line="37" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="26">pbuf<pos:position pos:line="37" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="32">count<pos:position pos:line="37" pos:column="37"/></name> <operator pos:line="37" pos:column="38">*<pos:position pos:line="37" pos:column="39"/></operator> <literal type="number" pos:line="37" pos:column="40">300<pos:position pos:line="37" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="45"/></expr_stmt>

    <for pos:line="39" pos:column="5">for <control pos:line="39" pos:column="9">(<init pos:line="39" pos:column="10">;<pos:position pos:line="39" pos:column="11"/></init> <condition><expr><name pos:line="39" pos:column="12">lock<pos:position pos:line="39" pos:column="16"/></name> <operator pos:line="39" pos:column="17">!=<pos:position pos:line="39" pos:column="19"/></operator> <name pos:line="39" pos:column="20">NULL<pos:position pos:line="39" pos:column="24"/></name></expr>;<pos:position pos:line="39" pos:column="25"/></condition> <incr><expr><name pos:line="39" pos:column="26">lock<pos:position pos:line="39" pos:column="30"/></name> <operator pos:line="39" pos:column="31">=<pos:position pos:line="39" pos:column="32"/></operator> <name><name pos:line="39" pos:column="33">lock<pos:position pos:line="39" pos:column="37"/></name><operator pos:line="39" pos:column="37">-&gt;<pos:position pos:line="39" pos:column="42"/></operator><name pos:line="39" pos:column="39">next<pos:position pos:line="39" pos:column="43"/></name></name></expr></incr>)<pos:position pos:line="39" pos:column="44"/></control> <block pos:line="39" pos:column="45">{
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">char<pos:position pos:line="40" pos:column="13"/></name></type> <name><name pos:line="40" pos:column="14">tmp<pos:position pos:line="40" pos:column="17"/></name><index pos:line="40" pos:column="17">[<expr><literal type="number" pos:line="40" pos:column="18">100<pos:position pos:line="40" pos:column="21"/></literal></expr>]<pos:position pos:line="40" pos:column="22"/></index></name></decl>;<pos:position pos:line="40" pos:column="23"/></decl_stmt>

<cpp:if pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">if<pos:position pos:line="42" pos:column="4"/></cpp:directive> <expr><name pos:line="42" pos:column="5">DAV_DEBUG<pos:position pos:line="42" pos:column="14"/></name></expr></cpp:if>
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><name><name pos:line="43" pos:column="13">lock<pos:position pos:line="43" pos:column="17"/></name><operator pos:line="43" pos:column="17">-&gt;<pos:position pos:line="43" pos:column="22"/></operator><name pos:line="43" pos:column="19">rectype<pos:position pos:line="43" pos:column="26"/></name></name> <operator pos:line="43" pos:column="27">==<pos:position pos:line="43" pos:column="29"/></operator> <name pos:line="43" pos:column="30">DAV_LOCKREC_INDIRECT_PARTIAL<pos:position pos:line="43" pos:column="58"/></name></expr>)<pos:position pos:line="43" pos:column="59"/></condition><then pos:line="43" pos:column="59"> <block pos:line="43" pos:column="60">{
            <comment type="block" pos:line="44" pos:column="13">/* ### crap. design error */</comment>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">dav_buffer_append<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><name pos:line="45" pos:column="31">p<pos:position pos:line="45" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="34">pbuf<pos:position pos:line="45" pos:column="38"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="46" pos:column="31">"DESIGN ERROR: attempted to product an "<pos:position pos:line="46" pos:column="71"/></literal>
                              <literal type="string" pos:line="47" pos:column="31">"activelock element from a partial, indirect "<pos:position pos:line="47" pos:column="77"/></literal>
                              <literal type="string" pos:line="48" pos:column="31">"lock record. Creating an XML parsing error "<pos:position pos:line="48" pos:column="76"/></literal>
                              <literal type="string" pos:line="49" pos:column="31">"to ease detection of this situation: &lt;"<pos:position pos:line="49" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="49" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="73"/></expr_stmt>
        }<pos:position pos:line="50" pos:column="10"/></block></then></if>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name pos:line="53" pos:column="9">dav_buffer_append<pos:position pos:line="53" pos:column="26"/></name><argument_list pos:line="53" pos:column="26">(<argument><expr><name pos:line="53" pos:column="27">p<pos:position pos:line="53" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="30">pbuf<pos:position pos:line="53" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="53" pos:column="36">"&lt;D:activelock&gt;"<pos:position pos:line="53" pos:column="58"/></literal> <name pos:line="53" pos:column="53">DEBUG_CR<pos:position pos:line="53" pos:column="61"/></name> <literal type="string" pos:line="53" pos:column="62">"&lt;D:locktype&gt;"<pos:position pos:line="53" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="78"/></expr_stmt>
        <switch pos:line="54" pos:column="9">switch <condition pos:line="54" pos:column="16">(<expr><name><name pos:line="54" pos:column="17">lock<pos:position pos:line="54" pos:column="21"/></name><operator pos:line="54" pos:column="21">-&gt;<pos:position pos:line="54" pos:column="26"/></operator><name pos:line="54" pos:column="23">type<pos:position pos:line="54" pos:column="27"/></name></name></expr>)<pos:position pos:line="54" pos:column="28"/></condition> <block pos:line="54" pos:column="29">{
        <case pos:line="55" pos:column="9">case <expr><name pos:line="55" pos:column="14">DAV_LOCKTYPE_WRITE<pos:position pos:line="55" pos:column="32"/></name></expr>:<pos:position pos:line="55" pos:column="33"/></case>
            <expr_stmt><expr><call><name pos:line="56" pos:column="13">dav_buffer_append<pos:position pos:line="56" pos:column="30"/></name><argument_list pos:line="56" pos:column="30">(<argument><expr><name pos:line="56" pos:column="31">p<pos:position pos:line="56" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="34">pbuf<pos:position pos:line="56" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="56" pos:column="40">"&lt;D:write/&gt;"<pos:position pos:line="56" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="54"/></expr_stmt>
            <break pos:line="57" pos:column="13">break;<pos:position pos:line="57" pos:column="19"/></break>
        <default pos:line="58" pos:column="9">default:<pos:position pos:line="58" pos:column="17"/></default>
            <comment type="block" pos:line="59" pos:column="13">/* ### internal error. log something? */</comment>
            <break pos:line="60" pos:column="13">break;<pos:position pos:line="60" pos:column="19"/></break>
        }<pos:position pos:line="61" pos:column="10"/></block></switch>
        <expr_stmt><expr><call><name pos:line="62" pos:column="9">dav_buffer_append<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name pos:line="62" pos:column="27">p<pos:position pos:line="62" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="30">pbuf<pos:position pos:line="62" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="36">"&lt;/D:locktype&gt;"<pos:position pos:line="62" pos:column="57"/></literal> <name pos:line="62" pos:column="52">DEBUG_CR<pos:position pos:line="62" pos:column="60"/></name> <literal type="string" pos:line="62" pos:column="61">"&lt;D:lockscope&gt;"<pos:position pos:line="62" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="78"/></expr_stmt>
        <switch pos:line="63" pos:column="9">switch <condition pos:line="63" pos:column="16">(<expr><name><name pos:line="63" pos:column="17">lock<pos:position pos:line="63" pos:column="21"/></name><operator pos:line="63" pos:column="21">-&gt;<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="23">scope<pos:position pos:line="63" pos:column="28"/></name></name></expr>)<pos:position pos:line="63" pos:column="29"/></condition> <block pos:line="63" pos:column="30">{
        <case pos:line="64" pos:column="9">case <expr><name pos:line="64" pos:column="14">DAV_LOCKSCOPE_EXCLUSIVE<pos:position pos:line="64" pos:column="37"/></name></expr>:<pos:position pos:line="64" pos:column="38"/></case>
            <expr_stmt><expr><call><name pos:line="65" pos:column="13">dav_buffer_append<pos:position pos:line="65" pos:column="30"/></name><argument_list pos:line="65" pos:column="30">(<argument><expr><name pos:line="65" pos:column="31">p<pos:position pos:line="65" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="34">pbuf<pos:position pos:line="65" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="40">"&lt;D:exclusive/&gt;"<pos:position pos:line="65" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="58"/></expr_stmt>
            <break pos:line="66" pos:column="13">break;<pos:position pos:line="66" pos:column="19"/></break>
        <case pos:line="67" pos:column="9">case <expr><name pos:line="67" pos:column="14">DAV_LOCKSCOPE_SHARED<pos:position pos:line="67" pos:column="34"/></name></expr>:<pos:position pos:line="67" pos:column="35"/></case>
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">dav_buffer_append<pos:position pos:line="68" pos:column="30"/></name><argument_list pos:line="68" pos:column="30">(<argument><expr><name pos:line="68" pos:column="31">p<pos:position pos:line="68" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="34">pbuf<pos:position pos:line="68" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="40">"&lt;D:shared/&gt;"<pos:position pos:line="68" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="55"/></expr_stmt>
            <break pos:line="69" pos:column="13">break;<pos:position pos:line="69" pos:column="19"/></break>
        <default pos:line="70" pos:column="9">default:<pos:position pos:line="70" pos:column="17"/></default>
            <comment type="block" pos:line="71" pos:column="13">/* ### internal error. log something? */</comment>
            <break pos:line="72" pos:column="13">break;<pos:position pos:line="72" pos:column="19"/></break>
        }<pos:position pos:line="73" pos:column="10"/></block></switch>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">dav_buffer_append<pos:position pos:line="74" pos:column="26"/></name><argument_list pos:line="74" pos:column="26">(<argument><expr><name pos:line="74" pos:column="27">p<pos:position pos:line="74" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="30">pbuf<pos:position pos:line="74" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="74" pos:column="36">"&lt;/D:lockscope&gt;"<pos:position pos:line="74" pos:column="58"/></literal> <name pos:line="74" pos:column="53">DEBUG_CR<pos:position pos:line="74" pos:column="61"/></name></expr></argument>)<pos:position pos:line="74" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="75" pos:column="9">sprintf<pos:position pos:line="75" pos:column="16"/></name><argument_list pos:line="75" pos:column="16">(<argument><expr><name pos:line="75" pos:column="17">tmp<pos:position pos:line="75" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="22">"&lt;D:depth&gt;%s&lt;/D:depth&gt;"<pos:position pos:line="75" pos:column="57"/></literal> <name pos:line="75" pos:column="46">DEBUG_CR<pos:position pos:line="75" pos:column="54"/></name></expr></argument>,
                <argument><expr><ternary><condition><expr><name><name pos:line="76" pos:column="17">lock<pos:position pos:line="76" pos:column="21"/></name><operator pos:line="76" pos:column="21">-&gt;<pos:position pos:line="76" pos:column="26"/></operator><name pos:line="76" pos:column="23">depth<pos:position pos:line="76" pos:column="28"/></name></name> <operator pos:line="76" pos:column="29">==<pos:position pos:line="76" pos:column="31"/></operator> <name pos:line="76" pos:column="32">DAV_INFINITY<pos:position pos:line="76" pos:column="44"/></name></expr> ?<pos:position pos:line="76" pos:column="46"/></condition><then pos:line="76" pos:column="46"> <expr><literal type="string" pos:line="76" pos:column="47">"infinity"<pos:position pos:line="76" pos:column="57"/></literal></expr> <pos:position pos:line="76" pos:column="58"/></then><else pos:line="76" pos:column="58">: <expr><literal type="string" pos:line="76" pos:column="60">"0"<pos:position pos:line="76" pos:column="63"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="76" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">dav_buffer_append<pos:position pos:line="77" pos:column="26"/></name><argument_list pos:line="77" pos:column="26">(<argument><expr><name pos:line="77" pos:column="27">p<pos:position pos:line="77" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="30">pbuf<pos:position pos:line="77" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="36">tmp<pos:position pos:line="77" pos:column="39"/></name></expr></argument>)<pos:position pos:line="77" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="41"/></expr_stmt>

        <if pos:line="79" pos:column="9">if <condition pos:line="79" pos:column="12">(<expr><name><name pos:line="79" pos:column="13">lock<pos:position pos:line="79" pos:column="17"/></name><operator pos:line="79" pos:column="17">-&gt;<pos:position pos:line="79" pos:column="22"/></operator><name pos:line="79" pos:column="19">owner<pos:position pos:line="79" pos:column="24"/></name></name></expr>)<pos:position pos:line="79" pos:column="25"/></condition><then pos:line="79" pos:column="25"> <block pos:line="79" pos:column="26">{
            <comment type="block" pos:line="80" pos:column="13">/*
            ** This contains a complete, self-contained &lt;DAV:owner&gt; element,
            ** with namespace declarations and xml:lang handling. Just drop
            ** it in.
            */</comment>
            <expr_stmt><expr><call><name pos:line="85" pos:column="13">dav_buffer_append<pos:position pos:line="85" pos:column="30"/></name><argument_list pos:line="85" pos:column="30">(<argument><expr><name pos:line="85" pos:column="31">p<pos:position pos:line="85" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="34">pbuf<pos:position pos:line="85" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="40">lock<pos:position pos:line="85" pos:column="44"/></name><operator pos:line="85" pos:column="44">-&gt;<pos:position pos:line="85" pos:column="49"/></operator><name pos:line="85" pos:column="46">owner<pos:position pos:line="85" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="86" pos:column="10"/></block></then></if>
                
        <expr_stmt><expr><call><name pos:line="88" pos:column="9">dav_buffer_append<pos:position pos:line="88" pos:column="26"/></name><argument_list pos:line="88" pos:column="26">(<argument><expr><name pos:line="88" pos:column="27">p<pos:position pos:line="88" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="30">pbuf<pos:position pos:line="88" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="36">"&lt;D:timeout&gt;"<pos:position pos:line="88" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="51"/></expr_stmt>
        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name><name pos:line="89" pos:column="13">lock<pos:position pos:line="89" pos:column="17"/></name><operator pos:line="89" pos:column="17">-&gt;<pos:position pos:line="89" pos:column="22"/></operator><name pos:line="89" pos:column="19">timeout<pos:position pos:line="89" pos:column="26"/></name></name> <operator pos:line="89" pos:column="27">==<pos:position pos:line="89" pos:column="29"/></operator> <name pos:line="89" pos:column="30">DAV_TIMEOUT_INFINITE<pos:position pos:line="89" pos:column="50"/></name></expr>)<pos:position pos:line="89" pos:column="51"/></condition><then pos:line="89" pos:column="51"> <block pos:line="89" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="90" pos:column="13">dav_buffer_append<pos:position pos:line="90" pos:column="30"/></name><argument_list pos:line="90" pos:column="30">(<argument><expr><name pos:line="90" pos:column="31">p<pos:position pos:line="90" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="34">pbuf<pos:position pos:line="90" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="40">"Infinite"<pos:position pos:line="90" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="91" pos:column="10"/></block></then>
        <else pos:line="92" pos:column="9">else <block pos:line="92" pos:column="14">{
            <decl_stmt><decl><type><name pos:line="93" pos:column="13">time_t<pos:position pos:line="93" pos:column="19"/></name></type> <name pos:line="93" pos:column="20">now<pos:position pos:line="93" pos:column="23"/></name> <init pos:line="93" pos:column="24">= <expr><call><name pos:line="93" pos:column="26">time<pos:position pos:line="93" pos:column="30"/></name><argument_list pos:line="93" pos:column="30">(<argument><expr><name pos:line="93" pos:column="31">NULL<pos:position pos:line="93" pos:column="35"/></name></expr></argument>)<pos:position pos:line="93" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="93" pos:column="37"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="94" pos:column="13">sprintf<pos:position pos:line="94" pos:column="20"/></name><argument_list pos:line="94" pos:column="20">(<argument><expr><name pos:line="94" pos:column="21">tmp<pos:position pos:line="94" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="94" pos:column="26">"Second-%lu"<pos:position pos:line="94" pos:column="38"/></literal></expr></argument>, <argument><expr><call pos:line="94" pos:column="40">(<name pos:line="94" pos:column="41">long<pos:position pos:line="94" pos:column="45"/></name> <name pos:line="94" pos:column="46">unsigned<pos:position pos:line="94" pos:column="54"/></name> <name pos:line="94" pos:column="55">int<pos:position pos:line="94" pos:column="58"/></name>)<argument_list pos:line="94" pos:column="59">(<argument><expr><name><name pos:line="94" pos:column="60">lock<pos:position pos:line="94" pos:column="64"/></name><operator pos:line="94" pos:column="64">-&gt;<pos:position pos:line="94" pos:column="69"/></operator><name pos:line="94" pos:column="66">timeout<pos:position pos:line="94" pos:column="73"/></name></name> <operator pos:line="94" pos:column="74">-<pos:position pos:line="94" pos:column="75"/></operator> <name pos:line="94" pos:column="76">now<pos:position pos:line="94" pos:column="79"/></name></expr></argument>)<pos:position pos:line="94" pos:column="80"/></argument_list></call></expr></argument>)<pos:position pos:line="94" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="82"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="95" pos:column="13">dav_buffer_append<pos:position pos:line="95" pos:column="30"/></name><argument_list pos:line="95" pos:column="30">(<argument><expr><name pos:line="95" pos:column="31">p<pos:position pos:line="95" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="34">pbuf<pos:position pos:line="95" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="40">tmp<pos:position pos:line="95" pos:column="43"/></name></expr></argument>)<pos:position pos:line="95" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="96" pos:column="10"/></block></else></if>

        <expr_stmt><expr><call><name pos:line="98" pos:column="9">dav_buffer_append<pos:position pos:line="98" pos:column="26"/></name><argument_list pos:line="98" pos:column="26">(<argument><expr><name pos:line="98" pos:column="27">p<pos:position pos:line="98" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="30">pbuf<pos:position pos:line="98" pos:column="34"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="99" pos:column="27">"&lt;/D:timeout&gt;"<pos:position pos:line="99" pos:column="47"/></literal> <name pos:line="99" pos:column="42">DEBUG_CR<pos:position pos:line="99" pos:column="50"/></name>
                          <literal type="string" pos:line="100" pos:column="27">"&lt;D:locktoken&gt;"<pos:position pos:line="100" pos:column="48"/></literal> <name pos:line="100" pos:column="43">DEBUG_CR<pos:position pos:line="100" pos:column="51"/></name>
                          <literal type="string" pos:line="101" pos:column="27">"&lt;D:href&gt;"<pos:position pos:line="101" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="101" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">dav_buffer_append<pos:position pos:line="102" pos:column="26"/></name><argument_list pos:line="102" pos:column="26">(<argument><expr><name pos:line="102" pos:column="27">p<pos:position pos:line="102" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="30">pbuf<pos:position pos:line="102" pos:column="34"/></name></expr></argument>,
                          <argument><expr><call pos:line="103" pos:column="27">(<modifier pos:line="103" pos:column="28">*<pos:position pos:line="103" pos:column="29"/></modifier><name><name pos:line="103" pos:column="29">hooks<pos:position pos:line="103" pos:column="34"/></name><operator pos:line="103" pos:column="34">-&gt;<pos:position pos:line="103" pos:column="39"/></operator><name pos:line="103" pos:column="36">format_locktoken<pos:position pos:line="103" pos:column="52"/></name></name>)<argument_list pos:line="103" pos:column="53">(<argument><expr><name pos:line="103" pos:column="54">p<pos:position pos:line="103" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="57">lock<pos:position pos:line="103" pos:column="61"/></name><operator pos:line="103" pos:column="61">-&gt;<pos:position pos:line="103" pos:column="66"/></operator><name pos:line="103" pos:column="63">locktoken<pos:position pos:line="103" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="103" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="104" pos:column="9">dav_buffer_append<pos:position pos:line="104" pos:column="26"/></name><argument_list pos:line="104" pos:column="26">(<argument><expr><name pos:line="104" pos:column="27">p<pos:position pos:line="104" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="30">pbuf<pos:position pos:line="104" pos:column="34"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="105" pos:column="27">"&lt;/D:href&gt;"<pos:position pos:line="105" pos:column="44"/></literal> <name pos:line="105" pos:column="39">DEBUG_CR<pos:position pos:line="105" pos:column="47"/></name>
                          <literal type="string" pos:line="106" pos:column="27">"&lt;/D:locktoken&gt;"<pos:position pos:line="106" pos:column="49"/></literal> <name pos:line="106" pos:column="44">DEBUG_CR<pos:position pos:line="106" pos:column="52"/></name>
                          <literal type="string" pos:line="107" pos:column="27">"&lt;/D:activelock&gt;"<pos:position pos:line="107" pos:column="50"/></literal> <name pos:line="107" pos:column="45">DEBUG_CR<pos:position pos:line="107" pos:column="53"/></name></expr></argument>)<pos:position pos:line="107" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="108" pos:column="6"/></block></for>

    <return pos:line="110" pos:column="5">return <expr><name><name pos:line="110" pos:column="12">pbuf<pos:position pos:line="110" pos:column="16"/></name><operator pos:line="110" pos:column="16">-&gt;<pos:position pos:line="110" pos:column="21"/></operator><name pos:line="110" pos:column="18">buf<pos:position pos:line="110" pos:column="21"/></name></name></expr>;<pos:position pos:line="110" pos:column="22"/></return>
}<pos:position pos:line="111" pos:column="2"/></block></function></unit>
