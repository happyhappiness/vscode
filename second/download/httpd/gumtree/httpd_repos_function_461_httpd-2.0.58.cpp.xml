<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_461_httpd-2.0.58.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">long<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">from_oct<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><name pos:line="1" pos:column="22">int<pos:position pos:line="1" pos:column="25"/></name></type> <name pos:line="1" pos:column="26">digs<pos:position pos:line="1" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="32">char<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">where<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">register<pos:position pos:line="3" pos:column="13"/></specifier> <name pos:line="3" pos:column="14">long<pos:position pos:line="3" pos:column="18"/></name></type> <name pos:line="3" pos:column="19">value<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>

    <while pos:line="5" pos:column="5">while <condition pos:line="5" pos:column="11">(<expr><call><name pos:line="5" pos:column="12">apr_isspace<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><operator pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></operator><name pos:line="5" pos:column="25">where<pos:position pos:line="5" pos:column="30"/></name></expr></argument>)<pos:position pos:line="5" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="32"/></condition> <block pos:line="5" pos:column="33">{	<comment type="block" pos:line="5" pos:column="41">/* Skip spaces */</comment>
	<expr_stmt><expr><name pos:line="6" pos:column="9">where<pos:position pos:line="6" pos:column="14"/></name><operator pos:line="6" pos:column="14">++<pos:position pos:line="6" pos:column="16"/></operator></expr>;<pos:position pos:line="6" pos:column="17"/></expr_stmt>
	<if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><operator pos:line="7" pos:column="13">--<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="15">digs<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">&lt;=<pos:position pos:line="7" pos:column="25"/></operator> <literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr>)<pos:position pos:line="7" pos:column="25"/></condition><then pos:line="7" pos:column="25">
	    <block type="pseudo"><return pos:line="8" pos:column="13">return <expr><operator pos:line="8" pos:column="20">-<pos:position pos:line="8" pos:column="21"/></operator><literal type="number" pos:line="8" pos:column="21">1<pos:position pos:line="8" pos:column="22"/></literal></expr>;<pos:position pos:line="8" pos:column="23"/></return></block></then></if>		<comment type="block" pos:line="8" pos:column="33">/* All blank field */</comment>
    }<pos:position pos:line="9" pos:column="6"/></block></while>
    <expr_stmt><expr><name pos:line="10" pos:column="5">value<pos:position pos:line="10" pos:column="10"/></name> <operator pos:line="10" pos:column="11">=<pos:position pos:line="10" pos:column="12"/></operator> <literal type="number" pos:line="10" pos:column="13">0<pos:position pos:line="10" pos:column="14"/></literal></expr>;<pos:position pos:line="10" pos:column="15"/></expr_stmt>
    <while pos:line="11" pos:column="5">while <condition pos:line="11" pos:column="11">(<expr><name pos:line="11" pos:column="12">digs<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">&gt;<pos:position pos:line="11" pos:column="21"/></operator> <literal type="number" pos:line="11" pos:column="19">0<pos:position pos:line="11" pos:column="20"/></literal> <operator pos:line="11" pos:column="21">&amp;&amp;<pos:position pos:line="11" pos:column="31"/></operator> <call><name pos:line="11" pos:column="24">isodigit<pos:position pos:line="11" pos:column="32"/></name><argument_list pos:line="11" pos:column="32">(<argument><expr><operator pos:line="11" pos:column="33">*<pos:position pos:line="11" pos:column="34"/></operator><name pos:line="11" pos:column="34">where<pos:position pos:line="11" pos:column="39"/></name></expr></argument>)<pos:position pos:line="11" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="41"/></condition> <block pos:line="11" pos:column="42">{	<comment type="block" pos:line="11" pos:column="49">/* Scan til nonoctal */</comment>
	<expr_stmt><expr><name pos:line="12" pos:column="9">value<pos:position pos:line="12" pos:column="14"/></name> <operator pos:line="12" pos:column="15">=<pos:position pos:line="12" pos:column="16"/></operator> <operator pos:line="12" pos:column="17">(<pos:position pos:line="12" pos:column="18"/></operator><name pos:line="12" pos:column="18">value<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">&lt;&lt;<pos:position pos:line="12" pos:column="32"/></operator> <literal type="number" pos:line="12" pos:column="27">3<pos:position pos:line="12" pos:column="28"/></literal><operator pos:line="12" pos:column="28">)<pos:position pos:line="12" pos:column="29"/></operator> <operator pos:line="12" pos:column="30">|<pos:position pos:line="12" pos:column="31"/></operator> <operator pos:line="12" pos:column="32">(<pos:position pos:line="12" pos:column="33"/></operator><operator pos:line="12" pos:column="33">*<pos:position pos:line="12" pos:column="34"/></operator><name pos:line="12" pos:column="34">where<pos:position pos:line="12" pos:column="39"/></name><operator pos:line="12" pos:column="39">++<pos:position pos:line="12" pos:column="41"/></operator> <operator pos:line="12" pos:column="42">-<pos:position pos:line="12" pos:column="43"/></operator> <literal type="char" pos:line="12" pos:column="44">'0'<pos:position pos:line="12" pos:column="47"/></literal><operator pos:line="12" pos:column="47">)<pos:position pos:line="12" pos:column="48"/></operator></expr>;<pos:position pos:line="12" pos:column="49"/></expr_stmt>
	<expr_stmt><expr><operator pos:line="13" pos:column="9">--<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">digs<pos:position pos:line="13" pos:column="15"/></name></expr>;<pos:position pos:line="13" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></while>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name pos:line="16" pos:column="9">digs<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">&gt;<pos:position pos:line="16" pos:column="18"/></operator> <literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal> <operator pos:line="16" pos:column="18">&amp;&amp;<pos:position pos:line="16" pos:column="28"/></operator> <operator pos:line="16" pos:column="21">*<pos:position pos:line="16" pos:column="22"/></operator><name pos:line="16" pos:column="22">where<pos:position pos:line="16" pos:column="27"/></name> <operator pos:line="16" pos:column="28">&amp;&amp;<pos:position pos:line="16" pos:column="38"/></operator> <operator pos:line="16" pos:column="31">!<pos:position pos:line="16" pos:column="32"/></operator><call><name pos:line="16" pos:column="32">apr_isspace<pos:position pos:line="16" pos:column="43"/></name><argument_list pos:line="16" pos:column="43">(<argument><expr><operator pos:line="16" pos:column="44">*<pos:position pos:line="16" pos:column="45"/></operator><name pos:line="16" pos:column="45">where<pos:position pos:line="16" pos:column="50"/></name></expr></argument>)<pos:position pos:line="16" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="52"/></condition><then pos:line="16" pos:column="52">
	<block type="pseudo"><return pos:line="17" pos:column="9">return <expr><operator pos:line="17" pos:column="16">-<pos:position pos:line="17" pos:column="17"/></operator><literal type="number" pos:line="17" pos:column="17">1<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></return></block></then></if>		<comment type="block" pos:line="17" pos:column="33">/* Ended on non-space/nul */</comment>

    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">value<pos:position pos:line="19" pos:column="17"/></name></expr>;<pos:position pos:line="19" pos:column="18"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
