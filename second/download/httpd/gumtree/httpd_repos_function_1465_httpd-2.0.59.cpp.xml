<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1465_httpd-2.0.59.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">util_ald_cache_insert<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">util_ald_cache_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">cache<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">void<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">payload<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">hashval<pos:position pos:line="3" pos:column="16"/></name></decl>;<pos:position pos:line="3" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">util_cache_node_t<pos:position pos:line="4" pos:column="22"/></name> <modifier pos:line="4" pos:column="23">*<pos:position pos:line="4" pos:column="24"/></modifier></type><name pos:line="4" pos:column="24">node<pos:position pos:line="4" pos:column="28"/></name></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* sanity check */</comment>
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><name pos:line="7" pos:column="9">cache<pos:position pos:line="7" pos:column="14"/></name> <operator pos:line="7" pos:column="15">==<pos:position pos:line="7" pos:column="17"/></operator> <name pos:line="7" pos:column="18">NULL<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">||<pos:position pos:line="7" pos:column="25"/></operator> <name pos:line="7" pos:column="26">payload<pos:position pos:line="7" pos:column="33"/></name> <operator pos:line="7" pos:column="34">==<pos:position pos:line="7" pos:column="36"/></operator> <name pos:line="7" pos:column="37">NULL<pos:position pos:line="7" pos:column="41"/></name></expr>)<pos:position pos:line="7" pos:column="42"/></condition><then pos:line="7" pos:column="42"> <block pos:line="7" pos:column="43">{
        <return pos:line="8" pos:column="9">return <expr><name pos:line="8" pos:column="16">NULL<pos:position pos:line="8" pos:column="20"/></name></expr>;<pos:position pos:line="8" pos:column="21"/></return>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="11" pos:column="5">/* check if we are full - if so, try purge */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">cache<pos:position pos:line="12" pos:column="14"/></name><operator pos:line="12" pos:column="14">-&gt;<pos:position pos:line="12" pos:column="19"/></operator><name pos:line="12" pos:column="16">numentries<pos:position pos:line="12" pos:column="26"/></name></name> <operator pos:line="12" pos:column="27">&gt;=<pos:position pos:line="12" pos:column="32"/></operator> <name><name pos:line="12" pos:column="30">cache<pos:position pos:line="12" pos:column="35"/></name><operator pos:line="12" pos:column="35">-&gt;<pos:position pos:line="12" pos:column="40"/></operator><name pos:line="12" pos:column="37">maxentries<pos:position pos:line="12" pos:column="47"/></name></name></expr>)<pos:position pos:line="12" pos:column="48"/></condition><then pos:line="12" pos:column="48"> <block pos:line="12" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">util_ald_cache_purge<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">cache<pos:position pos:line="13" pos:column="35"/></name></expr></argument>)<pos:position pos:line="13" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name><name pos:line="14" pos:column="13">cache<pos:position pos:line="14" pos:column="18"/></name><operator pos:line="14" pos:column="18">-&gt;<pos:position pos:line="14" pos:column="23"/></operator><name pos:line="14" pos:column="20">numentries<pos:position pos:line="14" pos:column="30"/></name></name> <operator pos:line="14" pos:column="31">&gt;=<pos:position pos:line="14" pos:column="36"/></operator> <name><name pos:line="14" pos:column="34">cache<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">-&gt;<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="41">maxentries<pos:position pos:line="14" pos:column="51"/></name></name></expr>)<pos:position pos:line="14" pos:column="52"/></condition><then pos:line="14" pos:column="52"> <block pos:line="14" pos:column="53">{
            <comment type="block" pos:line="15" pos:column="13">/* if the purge was not effective, we leave now to avoid an overflow */</comment>
            <return pos:line="16" pos:column="13">return <expr><name pos:line="16" pos:column="20">NULL<pos:position pos:line="16" pos:column="24"/></name></expr>;<pos:position pos:line="16" pos:column="25"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="20" pos:column="5">/* should be safe to add an entry */</comment>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">(<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">node<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">=<pos:position pos:line="21" pos:column="16"/></operator> <operator pos:line="21" pos:column="17">(<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="18">util_cache_node_t<pos:position pos:line="21" pos:column="35"/></name> <operator pos:line="21" pos:column="36">*<pos:position pos:line="21" pos:column="37"/></operator><operator pos:line="21" pos:column="37">)<pos:position pos:line="21" pos:column="38"/></operator><call><name pos:line="21" pos:column="38">util_ald_alloc<pos:position pos:line="21" pos:column="52"/></name><argument_list pos:line="21" pos:column="52">(<argument><expr><name pos:line="21" pos:column="53">cache<pos:position pos:line="21" pos:column="58"/></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="60">sizeof<argument_list pos:line="21" pos:column="66">(<argument><expr><name pos:line="21" pos:column="67">util_cache_node_t<pos:position pos:line="21" pos:column="84"/></name></expr></argument>)<pos:position pos:line="21" pos:column="85"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="86"/></argument_list></call><operator pos:line="21" pos:column="86">)<pos:position pos:line="21" pos:column="87"/></operator> <operator pos:line="21" pos:column="88">==<pos:position pos:line="21" pos:column="90"/></operator> <name pos:line="21" pos:column="91">NULL<pos:position pos:line="21" pos:column="95"/></name></expr>)<pos:position pos:line="21" pos:column="96"/></condition><then pos:line="21" pos:column="96"> <block pos:line="21" pos:column="97">{
        <return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">NULL<pos:position pos:line="22" pos:column="20"/></name></expr>;<pos:position pos:line="22" pos:column="21"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="25" pos:column="5">/* Take a copy of the payload before proceeeding. */</comment>
    <expr_stmt><expr><name pos:line="26" pos:column="5">payload<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call pos:line="26" pos:column="15">(<modifier pos:line="26" pos:column="16">*<pos:position pos:line="26" pos:column="17"/></modifier><name><name pos:line="26" pos:column="17">cache<pos:position pos:line="26" pos:column="22"/></name><operator pos:line="26" pos:column="22">-&gt;<pos:position pos:line="26" pos:column="27"/></operator><name pos:line="26" pos:column="24">copy<pos:position pos:line="26" pos:column="28"/></name></name>)<argument_list pos:line="26" pos:column="29">(<argument><expr><name pos:line="26" pos:column="30">cache<pos:position pos:line="26" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="37">payload<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="46"/></expr_stmt>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">!<pos:position pos:line="27" pos:column="10"/></operator><name pos:line="27" pos:column="10">payload<pos:position pos:line="27" pos:column="17"/></name></expr>)<pos:position pos:line="27" pos:column="18"/></condition><then pos:line="27" pos:column="18"> <block pos:line="27" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">util_ald_free<pos:position pos:line="28" pos:column="22"/></name><argument_list pos:line="28" pos:column="22">(<argument><expr><name pos:line="28" pos:column="23">cache<pos:position pos:line="28" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="30">node<pos:position pos:line="28" pos:column="34"/></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="36"/></expr_stmt>
        <return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">NULL<pos:position pos:line="29" pos:column="20"/></name></expr>;<pos:position pos:line="29" pos:column="21"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="32" pos:column="5">/* populate the entry */</comment>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">cache<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">inserts<pos:position pos:line="33" pos:column="19"/></name></name><operator pos:line="33" pos:column="19">++<pos:position pos:line="33" pos:column="21"/></operator></expr>;<pos:position pos:line="33" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="34" pos:column="5">hashval<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">=<pos:position pos:line="34" pos:column="14"/></operator> <call pos:line="34" pos:column="15">(<modifier pos:line="34" pos:column="16">*<pos:position pos:line="34" pos:column="17"/></modifier><name><name pos:line="34" pos:column="17">cache<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">-&gt;<pos:position pos:line="34" pos:column="27"/></operator><name pos:line="34" pos:column="24">hash<pos:position pos:line="34" pos:column="28"/></name></name>)<argument_list pos:line="34" pos:column="29">(<argument><expr><name pos:line="34" pos:column="30">payload<pos:position pos:line="34" pos:column="37"/></name></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call> <operator pos:line="34" pos:column="39">%<pos:position pos:line="34" pos:column="40"/></operator> <name><name pos:line="34" pos:column="41">cache<pos:position pos:line="34" pos:column="46"/></name><operator pos:line="34" pos:column="46">-&gt;<pos:position pos:line="34" pos:column="51"/></operator><name pos:line="34" pos:column="48">size<pos:position pos:line="34" pos:column="52"/></name></name></expr>;<pos:position pos:line="34" pos:column="53"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">node<pos:position pos:line="35" pos:column="9"/></name><operator pos:line="35" pos:column="9">-&gt;<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="11">add_time<pos:position pos:line="35" pos:column="19"/></name></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <call><name pos:line="35" pos:column="22">apr_time_now<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">()<pos:position pos:line="35" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="36" pos:column="5">node<pos:position pos:line="36" pos:column="9"/></name><operator pos:line="36" pos:column="9">-&gt;<pos:position pos:line="36" pos:column="14"/></operator><name pos:line="36" pos:column="11">payload<pos:position pos:line="36" pos:column="18"/></name></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <name pos:line="36" pos:column="21">payload<pos:position pos:line="36" pos:column="28"/></name></expr>;<pos:position pos:line="36" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="37" pos:column="5">node<pos:position pos:line="37" pos:column="9"/></name><operator pos:line="37" pos:column="9">-&gt;<pos:position pos:line="37" pos:column="14"/></operator><name pos:line="37" pos:column="11">next<pos:position pos:line="37" pos:column="15"/></name></name> <operator pos:line="37" pos:column="16">=<pos:position pos:line="37" pos:column="17"/></operator> <name><name pos:line="37" pos:column="18">cache<pos:position pos:line="37" pos:column="23"/></name><operator pos:line="37" pos:column="23">-&gt;<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="25">nodes<pos:position pos:line="37" pos:column="30"/></name><index pos:line="37" pos:column="30">[<expr><name pos:line="37" pos:column="31">hashval<pos:position pos:line="37" pos:column="38"/></name></expr>]<pos:position pos:line="37" pos:column="39"/></index></name></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="38" pos:column="5">cache<pos:position pos:line="38" pos:column="10"/></name><operator pos:line="38" pos:column="10">-&gt;<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="12">nodes<pos:position pos:line="38" pos:column="17"/></name><index pos:line="38" pos:column="17">[<expr><name pos:line="38" pos:column="18">hashval<pos:position pos:line="38" pos:column="25"/></name></expr>]<pos:position pos:line="38" pos:column="26"/></index></name> <operator pos:line="38" pos:column="27">=<pos:position pos:line="38" pos:column="28"/></operator> <name pos:line="38" pos:column="29">node<pos:position pos:line="38" pos:column="33"/></name></expr>;<pos:position pos:line="38" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="40" pos:column="5">/* if we reach the full mark, note the time we did so
     * for the benefit of the purge function
     */</comment>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">++<pos:position pos:line="43" pos:column="11"/></operator><name><name pos:line="43" pos:column="11">cache<pos:position pos:line="43" pos:column="16"/></name><operator pos:line="43" pos:column="16">-&gt;<pos:position pos:line="43" pos:column="21"/></operator><name pos:line="43" pos:column="18">numentries<pos:position pos:line="43" pos:column="28"/></name></name> <operator pos:line="43" pos:column="29">==<pos:position pos:line="43" pos:column="31"/></operator> <name><name pos:line="43" pos:column="32">cache<pos:position pos:line="43" pos:column="37"/></name><operator pos:line="43" pos:column="37">-&gt;<pos:position pos:line="43" pos:column="42"/></operator><name pos:line="43" pos:column="39">fullmark<pos:position pos:line="43" pos:column="47"/></name></name></expr>)<pos:position pos:line="43" pos:column="48"/></condition><then pos:line="43" pos:column="48"> <block pos:line="43" pos:column="49">{
        <expr_stmt><expr><name><name pos:line="44" pos:column="9">cache<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">-&gt;<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="16">marktime<pos:position pos:line="44" pos:column="24"/></name></name><operator pos:line="44" pos:column="24">=<pos:position pos:line="44" pos:column="25"/></operator><call><name pos:line="44" pos:column="25">apr_time_now<pos:position pos:line="44" pos:column="37"/></name><argument_list pos:line="44" pos:column="37">()<pos:position pos:line="44" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <return pos:line="47" pos:column="5">return <expr><name><name pos:line="47" pos:column="12">node<pos:position pos:line="47" pos:column="16"/></name><operator pos:line="47" pos:column="16">-&gt;<pos:position pos:line="47" pos:column="21"/></operator><name pos:line="47" pos:column="18">payload<pos:position pos:line="47" pos:column="25"/></name></name></expr>;<pos:position pos:line="47" pos:column="26"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
