<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1012_httpd-2.4.18.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">lua_input_filter_handle<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">ap_filter_t<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">f<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="2" pos:column="40">apr_bucket_brigade<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">pbbOut<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="3" pos:column="40">ap_input_mode_t<pos:position pos:line="3" pos:column="55"/></name></type> <name pos:line="3" pos:column="56">eMode<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="4" pos:column="40">apr_read_type_e<pos:position pos:line="4" pos:column="55"/></name></type> <name pos:line="4" pos:column="56">eBlock<pos:position pos:line="4" pos:column="62"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="5" pos:column="40">apr_off_t<pos:position pos:line="5" pos:column="49"/></name></type> <name pos:line="5" pos:column="50">nBytes<pos:position pos:line="5" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="57"/></parameter_list> 
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">request_rec<pos:position pos:line="7" pos:column="16"/></name> <modifier pos:line="7" pos:column="17">*<pos:position pos:line="7" pos:column="18"/></modifier></type><name pos:line="7" pos:column="18">r<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><name><name pos:line="7" pos:column="22">f<pos:position pos:line="7" pos:column="23"/></name><operator pos:line="7" pos:column="23">-&gt;<pos:position pos:line="7" pos:column="28"/></operator><name pos:line="7" pos:column="25">r<pos:position pos:line="7" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">rc<pos:position pos:line="8" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="13">lastCall<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">lua_State<pos:position pos:line="9" pos:column="14"/></name> <modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier></type><name pos:line="9" pos:column="16">L<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">lua_filter_ctx<pos:position pos:line="10" pos:column="19"/></name><modifier pos:line="10" pos:column="19">*<pos:position pos:line="10" pos:column="20"/></modifier></type> <name pos:line="10" pos:column="21">ctx<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">conn_rec<pos:position pos:line="11" pos:column="13"/></name> <modifier pos:line="11" pos:column="14">*<pos:position pos:line="11" pos:column="15"/></modifier></type><name pos:line="11" pos:column="15">c<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><name><name pos:line="11" pos:column="19">r<pos:position pos:line="11" pos:column="20"/></name><operator pos:line="11" pos:column="20">-&gt;<pos:position pos:line="11" pos:column="25"/></operator><name pos:line="11" pos:column="22">connection<pos:position pos:line="11" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="11" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">apr_status_t<pos:position pos:line="12" pos:column="17"/></name></type> <name pos:line="12" pos:column="18">ret<pos:position pos:line="12" pos:column="21"/></name></decl>;<pos:position pos:line="12" pos:column="22"/></decl_stmt>
    
    <comment type="block" pos:line="14" pos:column="5">/* Set up the initial filter context and acquire the function.
     * The corresponding Lua function should yield here.
     */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><name><name pos:line="17" pos:column="10">f<pos:position pos:line="17" pos:column="11"/></name><operator pos:line="17" pos:column="11">-&gt;<pos:position pos:line="17" pos:column="16"/></operator><name pos:line="17" pos:column="13">ctx<pos:position pos:line="17" pos:column="16"/></name></name></expr>)<pos:position pos:line="17" pos:column="17"/></condition><then pos:line="17" pos:column="17"> <block pos:line="17" pos:column="18">{
        <expr_stmt><expr><name pos:line="18" pos:column="9">rc<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <call><name pos:line="18" pos:column="14">lua_setup_filter_ctx<pos:position pos:line="18" pos:column="34"/></name><argument_list pos:line="18" pos:column="34">(<argument><expr><name pos:line="18" pos:column="35">f<pos:position pos:line="18" pos:column="36"/></name></expr></argument>,<argument><expr><name pos:line="18" pos:column="37">r<pos:position pos:line="18" pos:column="38"/></name></expr></argument>,<argument><expr><operator pos:line="18" pos:column="39">&amp;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="40">ctx<pos:position pos:line="18" pos:column="43"/></name></expr></argument>)<pos:position pos:line="18" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">f<pos:position pos:line="19" pos:column="10"/></name><operator pos:line="19" pos:column="10">-&gt;<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="12">ctx<pos:position pos:line="19" pos:column="15"/></name></name> <operator pos:line="19" pos:column="16">=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">ctx<pos:position pos:line="19" pos:column="21"/></name></expr>;<pos:position pos:line="19" pos:column="22"/></expr_stmt>
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">rc<pos:position pos:line="20" pos:column="15"/></name> <operator pos:line="20" pos:column="16">==<pos:position pos:line="20" pos:column="18"/></operator> <name pos:line="20" pos:column="19">APR_EGENERAL<pos:position pos:line="20" pos:column="31"/></name></expr>)<pos:position pos:line="20" pos:column="32"/></condition><then pos:line="20" pos:column="32"> <block pos:line="20" pos:column="33">{
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">ctx<pos:position pos:line="21" pos:column="16"/></name><operator pos:line="21" pos:column="16">-&gt;<pos:position pos:line="21" pos:column="21"/></operator><name pos:line="21" pos:column="18">broken<pos:position pos:line="21" pos:column="24"/></name></name> <operator pos:line="21" pos:column="25">=<pos:position pos:line="21" pos:column="26"/></operator> <literal type="number" pos:line="21" pos:column="27">1<pos:position pos:line="21" pos:column="28"/></literal></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">ap_remove_input_filter<pos:position pos:line="22" pos:column="35"/></name><argument_list pos:line="22" pos:column="35">(<argument><expr><name pos:line="22" pos:column="36">f<pos:position pos:line="22" pos:column="37"/></name></expr></argument>)<pos:position pos:line="22" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="39"/></expr_stmt> 
            <return pos:line="23" pos:column="13">return <expr><name pos:line="23" pos:column="20">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="23" pos:column="46"/></name></expr>;<pos:position pos:line="23" pos:column="47"/></return>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name pos:line="25" pos:column="13">rc<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">==<pos:position pos:line="25" pos:column="18"/></operator> <name pos:line="25" pos:column="19">APR_ENOENT<pos:position pos:line="25" pos:column="29"/></name></expr> )<pos:position pos:line="25" pos:column="31"/></condition><then pos:line="25" pos:column="31"> <block pos:line="25" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">ap_remove_input_filter<pos:position pos:line="26" pos:column="35"/></name><argument_list pos:line="26" pos:column="35">(<argument><expr><name pos:line="26" pos:column="36">f<pos:position pos:line="26" pos:column="37"/></name></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="27" pos:column="13">ctx<pos:position pos:line="27" pos:column="16"/></name><operator pos:line="27" pos:column="16">-&gt;<pos:position pos:line="27" pos:column="21"/></operator><name pos:line="27" pos:column="18">broken<pos:position pos:line="27" pos:column="24"/></name></name> <operator pos:line="27" pos:column="25">=<pos:position pos:line="27" pos:column="26"/></operator> <literal type="number" pos:line="27" pos:column="27">1<pos:position pos:line="27" pos:column="28"/></literal></expr>;<pos:position pos:line="27" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">rc<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">==<pos:position pos:line="29" pos:column="18"/></operator> <name pos:line="29" pos:column="19">APR_SUCCESS<pos:position pos:line="29" pos:column="30"/></name></expr>)<pos:position pos:line="29" pos:column="31"/></condition><then pos:line="29" pos:column="31"> <block pos:line="29" pos:column="32">{
            <expr_stmt><expr><name><name pos:line="30" pos:column="13">ctx<pos:position pos:line="30" pos:column="16"/></name><operator pos:line="30" pos:column="16">-&gt;<pos:position pos:line="30" pos:column="21"/></operator><name pos:line="30" pos:column="18">tmpBucket<pos:position pos:line="30" pos:column="27"/></name></name> <operator pos:line="30" pos:column="28">=<pos:position pos:line="30" pos:column="29"/></operator> <call><name pos:line="30" pos:column="30">apr_brigade_create<pos:position pos:line="30" pos:column="48"/></name><argument_list pos:line="30" pos:column="48">(<argument><expr><name><name pos:line="30" pos:column="49">r<pos:position pos:line="30" pos:column="50"/></name><operator pos:line="30" pos:column="50">-&gt;<pos:position pos:line="30" pos:column="55"/></operator><name pos:line="30" pos:column="52">pool<pos:position pos:line="30" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="58">c<pos:position pos:line="30" pos:column="59"/></name><operator pos:line="30" pos:column="59">-&gt;<pos:position pos:line="30" pos:column="64"/></operator><name pos:line="30" pos:column="61">bucket_alloc<pos:position pos:line="30" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="75"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="33" pos:column="5">ctx<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">=<pos:position pos:line="33" pos:column="10"/></operator> <operator pos:line="33" pos:column="11">(<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="12">lua_filter_ctx<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">*<pos:position pos:line="33" pos:column="27"/></operator><operator pos:line="33" pos:column="27">)<pos:position pos:line="33" pos:column="28"/></operator> <name><name pos:line="33" pos:column="29">f<pos:position pos:line="33" pos:column="30"/></name><operator pos:line="33" pos:column="30">-&gt;<pos:position pos:line="33" pos:column="35"/></operator><name pos:line="33" pos:column="32">ctx<pos:position pos:line="33" pos:column="35"/></name></name></expr>;<pos:position pos:line="33" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name pos:line="34" pos:column="5">L<pos:position pos:line="34" pos:column="6"/></name> <operator pos:line="34" pos:column="7">=<pos:position pos:line="34" pos:column="8"/></operator> <name><name pos:line="34" pos:column="9">ctx<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">-&gt;<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="14">L<pos:position pos:line="34" pos:column="15"/></name></name></expr>;<pos:position pos:line="34" pos:column="16"/></expr_stmt>
    <comment type="block" pos:line="35" pos:column="5">/* If the Lua script broke or denied serving the request, just pass the buckets through */</comment>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name><name pos:line="36" pos:column="9">ctx<pos:position pos:line="36" pos:column="12"/></name><operator pos:line="36" pos:column="12">-&gt;<pos:position pos:line="36" pos:column="17"/></operator><name pos:line="36" pos:column="14">broken<pos:position pos:line="36" pos:column="20"/></name></name></expr>)<pos:position pos:line="36" pos:column="21"/></condition><then pos:line="36" pos:column="21"> <block pos:line="36" pos:column="22">{
        <return pos:line="37" pos:column="9">return <expr><call><name pos:line="37" pos:column="16">ap_get_brigade<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name><name pos:line="37" pos:column="31">f<pos:position pos:line="37" pos:column="32"/></name><operator pos:line="37" pos:column="32">-&gt;<pos:position pos:line="37" pos:column="37"/></operator><name pos:line="37" pos:column="34">next<pos:position pos:line="37" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="40">pbbOut<pos:position pos:line="37" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="48">eMode<pos:position pos:line="37" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="55">eBlock<pos:position pos:line="37" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="37" pos:column="63">nBytes<pos:position pos:line="37" pos:column="69"/></name></expr></argument>)<pos:position pos:line="37" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="71"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
    
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><call><name pos:line="40" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="40" pos:column="26"/></name><argument_list pos:line="40" pos:column="26">(<argument><expr><name><name pos:line="40" pos:column="27">ctx<pos:position pos:line="40" pos:column="30"/></name><operator pos:line="40" pos:column="30">-&gt;<pos:position pos:line="40" pos:column="35"/></operator><name pos:line="40" pos:column="32">tmpBucket<pos:position pos:line="40" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="43"/></condition><then pos:line="40" pos:column="43"> <block pos:line="40" pos:column="44">{
        <expr_stmt><expr><name pos:line="41" pos:column="9">ret<pos:position pos:line="41" pos:column="12"/></name> <operator pos:line="41" pos:column="13">=<pos:position pos:line="41" pos:column="14"/></operator> <call><name pos:line="41" pos:column="15">ap_get_brigade<pos:position pos:line="41" pos:column="29"/></name><argument_list pos:line="41" pos:column="29">(<argument><expr><name><name pos:line="41" pos:column="30">f<pos:position pos:line="41" pos:column="31"/></name><operator pos:line="41" pos:column="31">-&gt;<pos:position pos:line="41" pos:column="36"/></operator><name pos:line="41" pos:column="33">next<pos:position pos:line="41" pos:column="37"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="39">ctx<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">-&gt;<pos:position pos:line="41" pos:column="47"/></operator><name pos:line="41" pos:column="44">tmpBucket<pos:position pos:line="41" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="55">eMode<pos:position pos:line="41" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="62">eBlock<pos:position pos:line="41" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="70">nBytes<pos:position pos:line="41" pos:column="76"/></name></expr></argument>)<pos:position pos:line="41" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="78"/></expr_stmt>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">eMode<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">==<pos:position pos:line="42" pos:column="21"/></operator> <name pos:line="42" pos:column="22">AP_MODE_EATCRLF<pos:position pos:line="42" pos:column="37"/></name> <operator pos:line="42" pos:column="38">||<pos:position pos:line="42" pos:column="40"/></operator> <name pos:line="42" pos:column="41">ret<pos:position pos:line="42" pos:column="44"/></name> <operator pos:line="42" pos:column="45">!=<pos:position pos:line="42" pos:column="47"/></operator> <name pos:line="42" pos:column="48">APR_SUCCESS<pos:position pos:line="42" pos:column="59"/></name></expr>)<pos:position pos:line="42" pos:column="60"/></condition><then pos:line="42" pos:column="60">
            <block type="pseudo"><return pos:line="43" pos:column="13">return <expr><name pos:line="43" pos:column="20">ret<pos:position pos:line="43" pos:column="23"/></name></expr>;<pos:position pos:line="43" pos:column="24"/></return></block></then></if>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
    
    <comment type="block" pos:line="46" pos:column="5">/* While the Lua function is still yielding, pass buckets to the coroutine */</comment>
    <if pos:line="47" pos:column="5">if <condition pos:line="47" pos:column="8">(<expr><operator pos:line="47" pos:column="9">!<pos:position pos:line="47" pos:column="10"/></operator><name><name pos:line="47" pos:column="10">ctx<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">-&gt;<pos:position pos:line="47" pos:column="18"/></operator><name pos:line="47" pos:column="15">broken<pos:position pos:line="47" pos:column="21"/></name></name></expr>)<pos:position pos:line="47" pos:column="22"/></condition><then pos:line="47" pos:column="22"> <block pos:line="47" pos:column="23">{
        <expr_stmt><expr><name pos:line="48" pos:column="9">lastCall<pos:position pos:line="48" pos:column="17"/></name> <operator pos:line="48" pos:column="18">=<pos:position pos:line="48" pos:column="19"/></operator> <literal type="number" pos:line="48" pos:column="20">0<pos:position pos:line="48" pos:column="21"/></literal></expr>;<pos:position pos:line="48" pos:column="22"/></expr_stmt>
        <while pos:line="49" pos:column="9">while<condition pos:line="49" pos:column="14">(<expr><operator pos:line="49" pos:column="15">!<pos:position pos:line="49" pos:column="16"/></operator><call><name pos:line="49" pos:column="16">APR_BRIGADE_EMPTY<pos:position pos:line="49" pos:column="33"/></name><argument_list pos:line="49" pos:column="33">(<argument><expr><name><name pos:line="49" pos:column="34">ctx<pos:position pos:line="49" pos:column="37"/></name><operator pos:line="49" pos:column="37">-&gt;<pos:position pos:line="49" pos:column="42"/></operator><name pos:line="49" pos:column="39">tmpBucket<pos:position pos:line="49" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="50"/></condition> <block pos:line="49" pos:column="51">{
            <decl_stmt><decl><type><name pos:line="50" pos:column="13">apr_bucket<pos:position pos:line="50" pos:column="23"/></name> <modifier pos:line="50" pos:column="24">*<pos:position pos:line="50" pos:column="25"/></modifier></type><name pos:line="50" pos:column="25">pbktIn<pos:position pos:line="50" pos:column="31"/></name> <init pos:line="50" pos:column="32">= <expr><call><name pos:line="50" pos:column="34">APR_BRIGADE_FIRST<pos:position pos:line="50" pos:column="51"/></name><argument_list pos:line="50" pos:column="51">(<argument><expr><name><name pos:line="50" pos:column="52">ctx<pos:position pos:line="50" pos:column="55"/></name><operator pos:line="50" pos:column="55">-&gt;<pos:position pos:line="50" pos:column="60"/></operator><name pos:line="50" pos:column="57">tmpBucket<pos:position pos:line="50" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="50" pos:column="68"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="51" pos:column="13">apr_bucket<pos:position pos:line="51" pos:column="23"/></name> <modifier pos:line="51" pos:column="24">*<pos:position pos:line="51" pos:column="25"/></modifier></type><name pos:line="51" pos:column="25">pbktOut<pos:position pos:line="51" pos:column="32"/></name></decl>;<pos:position pos:line="51" pos:column="33"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="52" pos:column="13">const<pos:position pos:line="52" pos:column="18"/></specifier> <name pos:line="52" pos:column="19">char<pos:position pos:line="52" pos:column="23"/></name> <modifier pos:line="52" pos:column="24">*<pos:position pos:line="52" pos:column="25"/></modifier></type><name pos:line="52" pos:column="25">data<pos:position pos:line="52" pos:column="29"/></name></decl>;<pos:position pos:line="52" pos:column="30"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="53" pos:column="13">apr_size_t<pos:position pos:line="53" pos:column="23"/></name></type> <name pos:line="53" pos:column="24">len<pos:position pos:line="53" pos:column="27"/></name></decl>;<pos:position pos:line="53" pos:column="28"/></decl_stmt>
            
            <if pos:line="55" pos:column="13">if <condition pos:line="55" pos:column="16">(<expr><call><name pos:line="55" pos:column="17">APR_BUCKET_IS_EOS<pos:position pos:line="55" pos:column="34"/></name><argument_list pos:line="55" pos:column="34">(<argument><expr><name pos:line="55" pos:column="35">pbktIn<pos:position pos:line="55" pos:column="41"/></name></expr></argument>)<pos:position pos:line="55" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="43"/></condition><then pos:line="55" pos:column="43"> <block pos:line="55" pos:column="44">{
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">APR_BUCKET_REMOVE<pos:position pos:line="56" pos:column="34"/></name><argument_list pos:line="56" pos:column="34">(<argument><expr><name pos:line="56" pos:column="35">pbktIn<pos:position pos:line="56" pos:column="41"/></name></expr></argument>)<pos:position pos:line="56" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="43"/></expr_stmt>
                <break pos:line="57" pos:column="17">break;<pos:position pos:line="57" pos:column="23"/></break>
            }<pos:position pos:line="58" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="60" pos:column="13">/* read the bucket */</comment>
            <expr_stmt><expr><name pos:line="61" pos:column="13">ret<pos:position pos:line="61" pos:column="16"/></name> <operator pos:line="61" pos:column="17">=<pos:position pos:line="61" pos:column="18"/></operator> <call><name pos:line="61" pos:column="19">apr_bucket_read<pos:position pos:line="61" pos:column="34"/></name><argument_list pos:line="61" pos:column="34">(<argument><expr><name pos:line="61" pos:column="35">pbktIn<pos:position pos:line="61" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="43">&amp;<pos:position pos:line="61" pos:column="48"/></operator><name pos:line="61" pos:column="44">data<pos:position pos:line="61" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="50">&amp;<pos:position pos:line="61" pos:column="55"/></operator><name pos:line="61" pos:column="51">len<pos:position pos:line="61" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="56">eBlock<pos:position pos:line="61" pos:column="62"/></name></expr></argument>)<pos:position pos:line="61" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="64"/></expr_stmt>
            <if pos:line="62" pos:column="13">if <condition pos:line="62" pos:column="16">(<expr><name pos:line="62" pos:column="17">ret<pos:position pos:line="62" pos:column="20"/></name> <operator pos:line="62" pos:column="21">!=<pos:position pos:line="62" pos:column="23"/></operator> <name pos:line="62" pos:column="24">APR_SUCCESS<pos:position pos:line="62" pos:column="35"/></name></expr>)<pos:position pos:line="62" pos:column="36"/></condition><then pos:line="62" pos:column="36">
                <block type="pseudo"><return pos:line="63" pos:column="17">return <expr><name pos:line="63" pos:column="24">ret<pos:position pos:line="63" pos:column="27"/></name></expr>;<pos:position pos:line="63" pos:column="28"/></return></block></then></if>

            <comment type="block" pos:line="65" pos:column="13">/* Push the bucket onto the Lua stack as a global var */</comment>
            <expr_stmt><expr><name pos:line="66" pos:column="13">lastCall<pos:position pos:line="66" pos:column="21"/></name><operator pos:line="66" pos:column="21">++<pos:position pos:line="66" pos:column="23"/></operator></expr>;<pos:position pos:line="66" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="67" pos:column="13">lua_pushlstring<pos:position pos:line="67" pos:column="28"/></name><argument_list pos:line="67" pos:column="28">(<argument><expr><name pos:line="67" pos:column="29">L<pos:position pos:line="67" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="32">data<pos:position pos:line="67" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="38">len<pos:position pos:line="67" pos:column="41"/></name></expr></argument>)<pos:position pos:line="67" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">lua_setglobal<pos:position pos:line="68" pos:column="26"/></name><argument_list pos:line="68" pos:column="26">(<argument><expr><name pos:line="68" pos:column="27">L<pos:position pos:line="68" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="68" pos:column="30">"bucket"<pos:position pos:line="68" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="68" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="40"/></expr_stmt>
            
            <comment type="block" pos:line="70" pos:column="13">/* If Lua yielded, it means we have something to pass on */</comment>
            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><call><name pos:line="71" pos:column="17">lua_resume<pos:position pos:line="71" pos:column="27"/></name><argument_list pos:line="71" pos:column="27">(<argument><expr><name pos:line="71" pos:column="28">L<pos:position pos:line="71" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="31">0<pos:position pos:line="71" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="33"/></argument_list></call> <operator pos:line="71" pos:column="34">==<pos:position pos:line="71" pos:column="36"/></operator> <name pos:line="71" pos:column="37">LUA_YIELD<pos:position pos:line="71" pos:column="46"/></name></expr>)<pos:position pos:line="71" pos:column="47"/></condition><then pos:line="71" pos:column="47"> <block pos:line="71" pos:column="48">{
                <decl_stmt><decl><type><name pos:line="72" pos:column="17">size_t<pos:position pos:line="72" pos:column="23"/></name></type> <name pos:line="72" pos:column="24">olen<pos:position pos:line="72" pos:column="28"/></name></decl>;<pos:position pos:line="72" pos:column="29"/></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="73" pos:column="17">const<pos:position pos:line="73" pos:column="22"/></specifier> <name pos:line="73" pos:column="23">char<pos:position pos:line="73" pos:column="27"/></name><modifier pos:line="73" pos:column="27">*<pos:position pos:line="73" pos:column="28"/></modifier></type> <name pos:line="73" pos:column="29">output<pos:position pos:line="73" pos:column="35"/></name> <init pos:line="73" pos:column="36">= <expr><call><name pos:line="73" pos:column="38">lua_tolstring<pos:position pos:line="73" pos:column="51"/></name><argument_list pos:line="73" pos:column="51">(<argument><expr><name pos:line="73" pos:column="52">L<pos:position pos:line="73" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="73" pos:column="55">1<pos:position pos:line="73" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="73" pos:column="58">&amp;<pos:position pos:line="73" pos:column="63"/></operator><name pos:line="73" pos:column="59">olen<pos:position pos:line="73" pos:column="63"/></name></expr></argument>)<pos:position pos:line="73" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="73" pos:column="65"/></decl_stmt>
                <expr_stmt><expr><name pos:line="74" pos:column="17">pbktOut<pos:position pos:line="74" pos:column="24"/></name> <operator pos:line="74" pos:column="25">=<pos:position pos:line="74" pos:column="26"/></operator> <call><name pos:line="74" pos:column="27">apr_bucket_heap_create<pos:position pos:line="74" pos:column="49"/></name><argument_list pos:line="74" pos:column="49">(<argument><expr><name pos:line="74" pos:column="50">output<pos:position pos:line="74" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="58">olen<pos:position pos:line="74" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="74" pos:column="64">0<pos:position pos:line="74" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="67">c<pos:position pos:line="74" pos:column="68"/></name><operator pos:line="74" pos:column="68">-&gt;<pos:position pos:line="74" pos:column="73"/></operator><name pos:line="74" pos:column="70">bucket_alloc<pos:position pos:line="74" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="74" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="84"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="75" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="75" pos:column="40"/></name><argument_list pos:line="75" pos:column="40">(<argument><expr><name pos:line="75" pos:column="41">pbbOut<pos:position pos:line="75" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="49">pbktOut<pos:position pos:line="75" pos:column="56"/></name></expr></argument>)<pos:position pos:line="75" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="58"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="76" pos:column="17">apr_bucket_delete<pos:position pos:line="76" pos:column="34"/></name><argument_list pos:line="76" pos:column="34">(<argument><expr><name pos:line="76" pos:column="35">pbktIn<pos:position pos:line="76" pos:column="41"/></name></expr></argument>)<pos:position pos:line="76" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="43"/></expr_stmt>
                <return pos:line="77" pos:column="17">return <expr><name pos:line="77" pos:column="24">APR_SUCCESS<pos:position pos:line="77" pos:column="35"/></name></expr>;<pos:position pos:line="77" pos:column="36"/></return>
            }<pos:position pos:line="78" pos:column="14"/></block></then>
            <else pos:line="79" pos:column="13">else <block pos:line="79" pos:column="18">{
                <expr_stmt><expr><name><name pos:line="80" pos:column="17">ctx<pos:position pos:line="80" pos:column="20"/></name><operator pos:line="80" pos:column="20">-&gt;<pos:position pos:line="80" pos:column="25"/></operator><name pos:line="80" pos:column="22">broken<pos:position pos:line="80" pos:column="28"/></name></name> <operator pos:line="80" pos:column="29">=<pos:position pos:line="80" pos:column="30"/></operator> <literal type="number" pos:line="80" pos:column="31">1<pos:position pos:line="80" pos:column="32"/></literal></expr>;<pos:position pos:line="80" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="81" pos:column="17">ap_lua_release_state<pos:position pos:line="81" pos:column="37"/></name><argument_list pos:line="81" pos:column="37">(<argument><expr><name pos:line="81" pos:column="38">L<pos:position pos:line="81" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="81" pos:column="41">ctx<pos:position pos:line="81" pos:column="44"/></name><operator pos:line="81" pos:column="44">-&gt;<pos:position pos:line="81" pos:column="49"/></operator><name pos:line="81" pos:column="46">spec<pos:position pos:line="81" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="52">r<pos:position pos:line="81" pos:column="53"/></name></expr></argument>)<pos:position pos:line="81" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="55"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="82" pos:column="17">ap_remove_input_filter<pos:position pos:line="82" pos:column="39"/></name><argument_list pos:line="82" pos:column="39">(<argument><expr><name pos:line="82" pos:column="40">f<pos:position pos:line="82" pos:column="41"/></name></expr></argument>)<pos:position pos:line="82" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="43"/></expr_stmt> 
                <expr_stmt><expr><call><name pos:line="83" pos:column="17">apr_bucket_delete<pos:position pos:line="83" pos:column="34"/></name><argument_list pos:line="83" pos:column="34">(<argument><expr><name pos:line="83" pos:column="35">pbktIn<pos:position pos:line="83" pos:column="41"/></name></expr></argument>)<pos:position pos:line="83" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="43"/></expr_stmt>
                <return pos:line="84" pos:column="17">return <expr><name pos:line="84" pos:column="24">HTTP_INTERNAL_SERVER_ERROR<pos:position pos:line="84" pos:column="50"/></name></expr>;<pos:position pos:line="84" pos:column="51"/></return>
            }<pos:position pos:line="85" pos:column="14"/></block></else></if>
        }<pos:position pos:line="86" pos:column="10"/></block></while>
        <comment type="block" pos:line="87" pos:column="9">/* If we've safely reached the end, do a final call to Lua to allow for any 
        finishing moves by the script, such as appending a tail. */</comment>
        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name pos:line="89" pos:column="13">lastCall<pos:position pos:line="89" pos:column="21"/></name> <operator pos:line="89" pos:column="22">==<pos:position pos:line="89" pos:column="24"/></operator> <literal type="number" pos:line="89" pos:column="25">0<pos:position pos:line="89" pos:column="26"/></literal></expr>)<pos:position pos:line="89" pos:column="27"/></condition><then pos:line="89" pos:column="27"> <block pos:line="89" pos:column="28">{
            <decl_stmt><decl><type><name pos:line="90" pos:column="13">apr_bucket<pos:position pos:line="90" pos:column="23"/></name> <modifier pos:line="90" pos:column="24">*<pos:position pos:line="90" pos:column="25"/></modifier></type><name pos:line="90" pos:column="25">pbktEOS<pos:position pos:line="90" pos:column="32"/></name> <init pos:line="90" pos:column="33">= <expr><call><name pos:line="90" pos:column="35">apr_bucket_eos_create<pos:position pos:line="90" pos:column="56"/></name><argument_list pos:line="90" pos:column="56">(<argument><expr><name><name pos:line="90" pos:column="57">c<pos:position pos:line="90" pos:column="58"/></name><operator pos:line="90" pos:column="58">-&gt;<pos:position pos:line="90" pos:column="63"/></operator><name pos:line="90" pos:column="60">bucket_alloc<pos:position pos:line="90" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="90" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="90" pos:column="74"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="91" pos:column="13">lua_pushnil<pos:position pos:line="91" pos:column="24"/></name><argument_list pos:line="91" pos:column="24">(<argument><expr><name pos:line="91" pos:column="25">L<pos:position pos:line="91" pos:column="26"/></name></expr></argument>)<pos:position pos:line="91" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="92" pos:column="13">lua_setglobal<pos:position pos:line="92" pos:column="26"/></name><argument_list pos:line="92" pos:column="26">(<argument><expr><name pos:line="92" pos:column="27">L<pos:position pos:line="92" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="30">"bucket"<pos:position pos:line="92" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="40"/></expr_stmt>
            <if pos:line="93" pos:column="13">if <condition pos:line="93" pos:column="16">(<expr><call><name pos:line="93" pos:column="17">lua_resume<pos:position pos:line="93" pos:column="27"/></name><argument_list pos:line="93" pos:column="27">(<argument><expr><name pos:line="93" pos:column="28">L<pos:position pos:line="93" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="31">0<pos:position pos:line="93" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="33"/></argument_list></call> <operator pos:line="93" pos:column="34">==<pos:position pos:line="93" pos:column="36"/></operator> <name pos:line="93" pos:column="37">LUA_YIELD<pos:position pos:line="93" pos:column="46"/></name></expr>)<pos:position pos:line="93" pos:column="47"/></condition><then pos:line="93" pos:column="47"> <block pos:line="93" pos:column="48">{
                <decl_stmt><decl><type><name pos:line="94" pos:column="17">apr_bucket<pos:position pos:line="94" pos:column="27"/></name> <modifier pos:line="94" pos:column="28">*<pos:position pos:line="94" pos:column="29"/></modifier></type><name pos:line="94" pos:column="29">pbktOut<pos:position pos:line="94" pos:column="36"/></name></decl>;<pos:position pos:line="94" pos:column="37"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="95" pos:column="17">size_t<pos:position pos:line="95" pos:column="23"/></name></type> <name pos:line="95" pos:column="24">olen<pos:position pos:line="95" pos:column="28"/></name></decl>;<pos:position pos:line="95" pos:column="29"/></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="96" pos:column="17">const<pos:position pos:line="96" pos:column="22"/></specifier> <name pos:line="96" pos:column="23">char<pos:position pos:line="96" pos:column="27"/></name><modifier pos:line="96" pos:column="27">*<pos:position pos:line="96" pos:column="28"/></modifier></type> <name pos:line="96" pos:column="29">output<pos:position pos:line="96" pos:column="35"/></name> <init pos:line="96" pos:column="36">= <expr><call><name pos:line="96" pos:column="38">lua_tolstring<pos:position pos:line="96" pos:column="51"/></name><argument_list pos:line="96" pos:column="51">(<argument><expr><name pos:line="96" pos:column="52">L<pos:position pos:line="96" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="55">1<pos:position pos:line="96" pos:column="56"/></literal></expr></argument>, <argument><expr><operator pos:line="96" pos:column="58">&amp;<pos:position pos:line="96" pos:column="63"/></operator><name pos:line="96" pos:column="59">olen<pos:position pos:line="96" pos:column="63"/></name></expr></argument>)<pos:position pos:line="96" pos:column="64"/></argument_list></call></expr></init></decl>;<pos:position pos:line="96" pos:column="65"/></decl_stmt>
                <expr_stmt><expr><name pos:line="97" pos:column="17">pbktOut<pos:position pos:line="97" pos:column="24"/></name> <operator pos:line="97" pos:column="25">=<pos:position pos:line="97" pos:column="26"/></operator> <call><name pos:line="97" pos:column="27">apr_bucket_heap_create<pos:position pos:line="97" pos:column="49"/></name><argument_list pos:line="97" pos:column="49">(<argument><expr><name pos:line="97" pos:column="50">output<pos:position pos:line="97" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="58">olen<pos:position pos:line="97" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="97" pos:column="64">0<pos:position pos:line="97" pos:column="65"/></literal></expr></argument>, <argument><expr><name><name pos:line="97" pos:column="67">c<pos:position pos:line="97" pos:column="68"/></name><operator pos:line="97" pos:column="68">-&gt;<pos:position pos:line="97" pos:column="73"/></operator><name pos:line="97" pos:column="70">bucket_alloc<pos:position pos:line="97" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="97" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="84"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="98" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="98" pos:column="40"/></name><argument_list pos:line="98" pos:column="40">(<argument><expr><name pos:line="98" pos:column="41">pbbOut<pos:position pos:line="98" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="49">pbktOut<pos:position pos:line="98" pos:column="56"/></name></expr></argument>)<pos:position pos:line="98" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="58"/></expr_stmt>
            }<pos:position pos:line="99" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="100" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="100" pos:column="36"/></name><argument_list pos:line="100" pos:column="36">(<argument><expr><name pos:line="100" pos:column="37">pbbOut<pos:position pos:line="100" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="100" pos:column="44">pbktEOS<pos:position pos:line="100" pos:column="51"/></name></expr></argument>)<pos:position pos:line="100" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="101" pos:column="13">ap_lua_release_state<pos:position pos:line="101" pos:column="33"/></name><argument_list pos:line="101" pos:column="33">(<argument><expr><name pos:line="101" pos:column="34">L<pos:position pos:line="101" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="101" pos:column="37">ctx<pos:position pos:line="101" pos:column="40"/></name><operator pos:line="101" pos:column="40">-&gt;<pos:position pos:line="101" pos:column="45"/></operator><name pos:line="101" pos:column="42">spec<pos:position pos:line="101" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="48">r<pos:position pos:line="101" pos:column="49"/></name></expr></argument>)<pos:position pos:line="101" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="102" pos:column="10"/></block></then></if>
    }<pos:position pos:line="103" pos:column="6"/></block></then></if>
    <return pos:line="104" pos:column="5">return <expr><name pos:line="104" pos:column="12">APR_SUCCESS<pos:position pos:line="104" pos:column="23"/></name></expr>;<pos:position pos:line="104" pos:column="24"/></return>
}<pos:position pos:line="105" pos:column="2"/></block></function></unit>
