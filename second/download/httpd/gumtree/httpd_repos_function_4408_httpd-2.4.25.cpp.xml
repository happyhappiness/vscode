<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4408_httpd-2.4.25.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">child_main<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">child_num_arg<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">int<pos:position pos:line="1" pos:column="46"/></name></type> <name pos:line="1" pos:column="47">child_bucket<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_thread_t<pos:position pos:line="3" pos:column="17"/></name> <modifier pos:line="3" pos:column="18">*<pos:position pos:line="3" pos:column="19"/></modifier><modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">threads<pos:position pos:line="3" pos:column="27"/></name></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">thread_starter<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">ts<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_threadattr_t<pos:position pos:line="6" pos:column="21"/></name> <modifier pos:line="6" pos:column="22">*<pos:position pos:line="6" pos:column="23"/></modifier></type><name pos:line="6" pos:column="23">thread_attr<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_thread_t<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">start_thread_id<pos:position pos:line="7" pos:column="34"/></name></decl>;<pos:position pos:line="7" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">i<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><name pos:line="10" pos:column="5">mpm_state<pos:position pos:line="10" pos:column="14"/></name> <operator pos:line="10" pos:column="15">=<pos:position pos:line="10" pos:column="16"/></operator> <name pos:line="10" pos:column="17">AP_MPMQ_STARTING<pos:position pos:line="10" pos:column="33"/></name></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>       <comment type="block" pos:line="10" pos:column="41">/* for benefit of any hooks that run as this
                                         * child initializes
                                         */</comment>
    <expr_stmt><expr><name pos:line="13" pos:column="5">ap_my_pid<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">=<pos:position pos:line="13" pos:column="16"/></operator> <call><name pos:line="13" pos:column="17">getpid<pos:position pos:line="13" pos:column="23"/></name><argument_list pos:line="13" pos:column="23">()<pos:position pos:line="13" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">ap_fatal_signal_child_setup<pos:position pos:line="14" pos:column="32"/></name><argument_list pos:line="14" pos:column="32">(<argument><expr><name pos:line="14" pos:column="33">ap_server_conf<pos:position pos:line="14" pos:column="47"/></name></expr></argument>)<pos:position pos:line="14" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="15" pos:column="5">apr_pool_create<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><operator pos:line="15" pos:column="21">&amp;<pos:position pos:line="15" pos:column="26"/></operator><name pos:line="15" pos:column="22">pchild<pos:position pos:line="15" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="30">pconf<pos:position pos:line="15" pos:column="35"/></name></expr></argument>)<pos:position pos:line="15" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="17" pos:column="5">/* close unused listeners and pods */</comment>
    <for pos:line="18" pos:column="5">for <control pos:line="18" pos:column="9">(<init><expr><name pos:line="18" pos:column="10">i<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <literal type="number" pos:line="18" pos:column="14">0<pos:position pos:line="18" pos:column="15"/></literal></expr>;<pos:position pos:line="18" pos:column="16"/></init> <condition><expr><name pos:line="18" pos:column="17">i<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&lt;<pos:position pos:line="18" pos:column="23"/></operator> <name><name pos:line="18" pos:column="21">retained<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">-&gt;<pos:position pos:line="18" pos:column="34"/></operator><name pos:line="18" pos:column="31">num_buckets<pos:position pos:line="18" pos:column="42"/></name></name></expr>;<pos:position pos:line="18" pos:column="43"/></condition> <incr><expr><name pos:line="18" pos:column="44">i<pos:position pos:line="18" pos:column="45"/></name><operator pos:line="18" pos:column="45">++<pos:position pos:line="18" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="18" pos:column="48"/></control> <block pos:line="18" pos:column="49">{
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">i<pos:position pos:line="19" pos:column="14"/></name> <operator pos:line="19" pos:column="15">!=<pos:position pos:line="19" pos:column="17"/></operator> <name pos:line="19" pos:column="18">child_bucket<pos:position pos:line="19" pos:column="30"/></name></expr>)<pos:position pos:line="19" pos:column="31"/></condition><then pos:line="19" pos:column="31"> <block pos:line="19" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">ap_close_listeners_ex<pos:position pos:line="20" pos:column="34"/></name><argument_list pos:line="20" pos:column="34">(<argument><expr><name><name pos:line="20" pos:column="35">all_buckets<pos:position pos:line="20" pos:column="46"/></name><index pos:line="20" pos:column="46">[<expr><name pos:line="20" pos:column="47">i<pos:position pos:line="20" pos:column="48"/></name></expr>]<pos:position pos:line="20" pos:column="49"/></index></name><operator pos:line="20" pos:column="49">.<pos:position pos:line="20" pos:column="50"/></operator><name pos:line="20" pos:column="50">listeners<pos:position pos:line="20" pos:column="59"/></name></expr></argument>)<pos:position pos:line="20" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="61"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="21" pos:column="13">ap_mpm_podx_close<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name><name pos:line="21" pos:column="31">all_buckets<pos:position pos:line="21" pos:column="42"/></name><index pos:line="21" pos:column="42">[<expr><name pos:line="21" pos:column="43">i<pos:position pos:line="21" pos:column="44"/></name></expr>]<pos:position pos:line="21" pos:column="45"/></index></name><operator pos:line="21" pos:column="45">.<pos:position pos:line="21" pos:column="46"/></operator><name pos:line="21" pos:column="46">pod<pos:position pos:line="21" pos:column="49"/></name></expr></argument>)<pos:position pos:line="21" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="22" pos:column="10"/></block></then></if>
    }<pos:position pos:line="23" pos:column="6"/></block></for>

    <comment type="block" pos:line="25" pos:column="5">/*stuff to do before we switch id's, so we have permissions. */</comment>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ap_reopen_scoreboard<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><name pos:line="26" pos:column="26">pchild<pos:position pos:line="26" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="34">NULL<pos:position pos:line="26" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="40">0<pos:position pos:line="26" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="43"/></expr_stmt>

    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name pos:line="28" pos:column="9">ap_run_drop_privileges<pos:position pos:line="28" pos:column="31"/></name><argument_list pos:line="28" pos:column="31">(<argument><expr><name pos:line="28" pos:column="32">pchild<pos:position pos:line="28" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="40">ap_server_conf<pos:position pos:line="28" pos:column="54"/></name></expr></argument>)<pos:position pos:line="28" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="56"/></condition><then pos:line="28" pos:column="56"> <block pos:line="28" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="29" pos:column="9">clean_child_exit<pos:position pos:line="29" pos:column="25"/></name><argument_list pos:line="29" pos:column="25">(<argument><expr><name pos:line="29" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="29" pos:column="43"/></name></expr></argument>)<pos:position pos:line="29" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="32" pos:column="5">apr_thread_mutex_create<pos:position pos:line="32" pos:column="28"/></name><argument_list pos:line="32" pos:column="28">(<argument><expr><operator pos:line="32" pos:column="29">&amp;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="30">g_timer_skiplist_mtx<pos:position pos:line="32" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="52">APR_THREAD_MUTEX_DEFAULT<pos:position pos:line="32" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="78">pchild<pos:position pos:line="32" pos:column="84"/></name></expr></argument>)<pos:position pos:line="32" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="86"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="33" pos:column="5">APR_RING_INIT<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><operator pos:line="33" pos:column="19">&amp;<pos:position pos:line="33" pos:column="24"/></operator><name pos:line="33" pos:column="20">timer_free_ring<pos:position pos:line="33" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="37">timer_event_t<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">link<pos:position pos:line="33" pos:column="56"/></name></expr></argument>)<pos:position pos:line="33" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">apr_skiplist_init<pos:position pos:line="34" pos:column="22"/></name><argument_list pos:line="34" pos:column="22">(<argument><expr><operator pos:line="34" pos:column="23">&amp;<pos:position pos:line="34" pos:column="28"/></operator><name pos:line="34" pos:column="24">timer_skiplist<pos:position pos:line="34" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="40">pchild<pos:position pos:line="34" pos:column="46"/></name></expr></argument>)<pos:position pos:line="34" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="48"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="35" pos:column="5">apr_skiplist_set_compare<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name pos:line="35" pos:column="30">timer_skiplist<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="46">timer_comp<pos:position pos:line="35" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="58">timer_comp<pos:position pos:line="35" pos:column="68"/></name></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="70"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="36" pos:column="5">ap_run_child_init<pos:position pos:line="36" pos:column="22"/></name><argument_list pos:line="36" pos:column="22">(<argument><expr><name pos:line="36" pos:column="23">pchild<pos:position pos:line="36" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="31">ap_server_conf<pos:position pos:line="36" pos:column="45"/></name></expr></argument>)<pos:position pos:line="36" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="38" pos:column="5">/* done with init critical section */</comment>

    <comment type="block" pos:line="40" pos:column="5">/* Just use the standard apr_setup_signal_thread to block all signals
     * from being received.  The child processes no longer use signals for
     * any communication with the parent process.
     */</comment>
    <expr_stmt><expr><name pos:line="44" pos:column="5">rv<pos:position pos:line="44" pos:column="7"/></name> <operator pos:line="44" pos:column="8">=<pos:position pos:line="44" pos:column="9"/></operator> <call><name pos:line="44" pos:column="10">apr_setup_signal_thread<pos:position pos:line="44" pos:column="33"/></name><argument_list pos:line="44" pos:column="33">()<pos:position pos:line="44" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="36"/></expr_stmt>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">rv<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">!=<pos:position pos:line="45" pos:column="14"/></operator> <name pos:line="45" pos:column="15">APR_SUCCESS<pos:position pos:line="45" pos:column="26"/></name></expr>)<pos:position pos:line="45" pos:column="27"/></condition><then pos:line="45" pos:column="27"> <block pos:line="45" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">ap_log_error<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><name pos:line="46" pos:column="22">APLOG_MARK<pos:position pos:line="46" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="34">APLOG_EMERG<pos:position pos:line="46" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="47">rv<pos:position pos:line="46" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="51">ap_server_conf<pos:position pos:line="46" pos:column="65"/></name></expr></argument>, <argument><expr><call><name pos:line="46" pos:column="67">APLOGNO<pos:position pos:line="46" pos:column="74"/></name><argument_list pos:line="46" pos:column="74">(<argument><expr><literal type="number" pos:line="46" pos:column="75">00479<pos:position pos:line="46" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="81"/></argument_list></call>
                     <literal type="string" pos:line="47" pos:column="22">"Couldn't initialize signal thread"<pos:position pos:line="47" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">clean_child_exit<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">APEXIT_CHILDFATAL<pos:position pos:line="48" pos:column="43"/></name></expr></argument>)<pos:position pos:line="48" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name pos:line="51" pos:column="9">ap_max_requests_per_child<pos:position pos:line="51" pos:column="34"/></name></expr>)<pos:position pos:line="51" pos:column="35"/></condition><then pos:line="51" pos:column="35"> <block pos:line="51" pos:column="36">{
        <expr_stmt><expr><name pos:line="52" pos:column="9">conns_this_child<pos:position pos:line="52" pos:column="25"/></name> <operator pos:line="52" pos:column="26">=<pos:position pos:line="52" pos:column="27"/></operator> <name pos:line="52" pos:column="28">ap_max_requests_per_child<pos:position pos:line="52" pos:column="53"/></name></expr>;<pos:position pos:line="52" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then>
    <else pos:line="54" pos:column="5">else <block pos:line="54" pos:column="10">{
        <comment type="block" pos:line="55" pos:column="9">/* coding a value of zero means infinity */</comment>
        <expr_stmt><expr><name pos:line="56" pos:column="9">conns_this_child<pos:position pos:line="56" pos:column="25"/></name> <operator pos:line="56" pos:column="26">=<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="28">APR_INT32_MAX<pos:position pos:line="56" pos:column="41"/></name></expr>;<pos:position pos:line="56" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="59" pos:column="5">/* Setup worker threads */</comment>

    <comment type="block" pos:line="61" pos:column="5">/* clear the storage; we may not create all our threads immediately,
     * and we want a 0 entry to indicate a thread which was not created
     */</comment>
    <expr_stmt><expr><name pos:line="64" pos:column="5">threads<pos:position pos:line="64" pos:column="12"/></name> <operator pos:line="64" pos:column="13">=<pos:position pos:line="64" pos:column="14"/></operator> <call><name pos:line="64" pos:column="15">ap_calloc<pos:position pos:line="64" pos:column="24"/></name><argument_list pos:line="64" pos:column="24">(<argument><expr><name pos:line="64" pos:column="25">threads_per_child<pos:position pos:line="64" pos:column="42"/></name></expr></argument>, <argument><expr><sizeof pos:line="64" pos:column="44">sizeof<argument_list pos:line="64" pos:column="50">(<argument><expr><name pos:line="64" pos:column="51">apr_thread_t<pos:position pos:line="64" pos:column="63"/></name> <operator pos:line="64" pos:column="64">*<pos:position pos:line="64" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="64" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name pos:line="65" pos:column="5">ts<pos:position pos:line="65" pos:column="7"/></name> <operator pos:line="65" pos:column="8">=<pos:position pos:line="65" pos:column="9"/></operator> <call><name pos:line="65" pos:column="10">apr_palloc<pos:position pos:line="65" pos:column="20"/></name><argument_list pos:line="65" pos:column="20">(<argument><expr><name pos:line="65" pos:column="21">pchild<pos:position pos:line="65" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="65" pos:column="29">sizeof<argument_list pos:line="65" pos:column="35">(<argument><expr><operator pos:line="65" pos:column="36">*<pos:position pos:line="65" pos:column="37"/></operator><name pos:line="65" pos:column="37">ts<pos:position pos:line="65" pos:column="39"/></name></expr></argument>)<pos:position pos:line="65" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="65" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="67" pos:column="5">apr_threadattr_create<pos:position pos:line="67" pos:column="26"/></name><argument_list pos:line="67" pos:column="26">(<argument><expr><operator pos:line="67" pos:column="27">&amp;<pos:position pos:line="67" pos:column="32"/></operator><name pos:line="67" pos:column="28">thread_attr<pos:position pos:line="67" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="41">pchild<pos:position pos:line="67" pos:column="47"/></name></expr></argument>)<pos:position pos:line="67" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="49"/></expr_stmt>
    <comment type="block" pos:line="68" pos:column="5">/* 0 means PTHREAD_CREATE_JOINABLE */</comment>
    <expr_stmt><expr><call><name pos:line="69" pos:column="5">apr_threadattr_detach_set<pos:position pos:line="69" pos:column="30"/></name><argument_list pos:line="69" pos:column="30">(<argument><expr><name pos:line="69" pos:column="31">thread_attr<pos:position pos:line="69" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="69" pos:column="44">0<pos:position pos:line="69" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="47"/></expr_stmt>

    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><name pos:line="71" pos:column="9">ap_thread_stacksize<pos:position pos:line="71" pos:column="28"/></name> <operator pos:line="71" pos:column="29">!=<pos:position pos:line="71" pos:column="31"/></operator> <literal type="number" pos:line="71" pos:column="32">0<pos:position pos:line="71" pos:column="33"/></literal></expr>)<pos:position pos:line="71" pos:column="34"/></condition><then pos:line="71" pos:column="34"> <block pos:line="71" pos:column="35">{
        <expr_stmt><expr><name pos:line="72" pos:column="9">rv<pos:position pos:line="72" pos:column="11"/></name> <operator pos:line="72" pos:column="12">=<pos:position pos:line="72" pos:column="13"/></operator> <call><name pos:line="72" pos:column="14">apr_threadattr_stacksize_set<pos:position pos:line="72" pos:column="42"/></name><argument_list pos:line="72" pos:column="42">(<argument><expr><name pos:line="72" pos:column="43">thread_attr<pos:position pos:line="72" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="56">ap_thread_stacksize<pos:position pos:line="72" pos:column="75"/></name></expr></argument>)<pos:position pos:line="72" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="77"/></expr_stmt>
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">rv<pos:position pos:line="73" pos:column="15"/></name> <operator pos:line="73" pos:column="16">!=<pos:position pos:line="73" pos:column="18"/></operator> <name pos:line="73" pos:column="19">APR_SUCCESS<pos:position pos:line="73" pos:column="30"/></name> <operator pos:line="73" pos:column="31">&amp;&amp;<pos:position pos:line="73" pos:column="41"/></operator> <name pos:line="73" pos:column="34">rv<pos:position pos:line="73" pos:column="36"/></name> <operator pos:line="73" pos:column="37">!=<pos:position pos:line="73" pos:column="39"/></operator> <name pos:line="73" pos:column="40">APR_ENOTIMPL<pos:position pos:line="73" pos:column="52"/></name></expr>)<pos:position pos:line="73" pos:column="53"/></condition><then pos:line="73" pos:column="53"> <block pos:line="73" pos:column="54">{
            <expr_stmt><expr><call><name pos:line="74" pos:column="13">ap_log_error<pos:position pos:line="74" pos:column="25"/></name><argument_list pos:line="74" pos:column="25">(<argument><expr><name pos:line="74" pos:column="26">APLOG_MARK<pos:position pos:line="74" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="38">APLOG_WARNING<pos:position pos:line="74" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="53">rv<pos:position pos:line="74" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="57">ap_server_conf<pos:position pos:line="74" pos:column="71"/></name></expr></argument>, <argument><expr><call><name pos:line="74" pos:column="73">APLOGNO<pos:position pos:line="74" pos:column="80"/></name><argument_list pos:line="74" pos:column="80">(<argument><expr><literal type="number" pos:line="74" pos:column="81">02436<pos:position pos:line="74" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="74" pos:column="87"/></argument_list></call>
                         <literal type="string" pos:line="75" pos:column="26">"WARNING: ThreadStackSize of %"<pos:position pos:line="75" pos:column="57"/></literal> <name pos:line="75" pos:column="58">APR_SIZE_T_FMT<pos:position pos:line="75" pos:column="72"/></name> <literal type="string" pos:line="75" pos:column="73">" is "<pos:position pos:line="75" pos:column="79"/></literal>
                         <literal type="string" pos:line="76" pos:column="26">"inappropriate, using default"<pos:position pos:line="76" pos:column="56"/></literal></expr></argument>, 
                         <argument><expr><name pos:line="77" pos:column="26">ap_thread_stacksize<pos:position pos:line="77" pos:column="45"/></name></expr></argument>)<pos:position pos:line="77" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="47"/></expr_stmt>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="81" pos:column="5">ts<pos:position pos:line="81" pos:column="7"/></name><operator pos:line="81" pos:column="7">-&gt;<pos:position pos:line="81" pos:column="12"/></operator><name pos:line="81" pos:column="9">threads<pos:position pos:line="81" pos:column="16"/></name></name> <operator pos:line="81" pos:column="17">=<pos:position pos:line="81" pos:column="18"/></operator> <name pos:line="81" pos:column="19">threads<pos:position pos:line="81" pos:column="26"/></name></expr>;<pos:position pos:line="81" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="82" pos:column="5">ts<pos:position pos:line="82" pos:column="7"/></name><operator pos:line="82" pos:column="7">-&gt;<pos:position pos:line="82" pos:column="12"/></operator><name pos:line="82" pos:column="9">listener<pos:position pos:line="82" pos:column="17"/></name></name> <operator pos:line="82" pos:column="18">=<pos:position pos:line="82" pos:column="19"/></operator> <name pos:line="82" pos:column="20">NULL<pos:position pos:line="82" pos:column="24"/></name></expr>;<pos:position pos:line="82" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="83" pos:column="5">ts<pos:position pos:line="83" pos:column="7"/></name><operator pos:line="83" pos:column="7">-&gt;<pos:position pos:line="83" pos:column="12"/></operator><name pos:line="83" pos:column="9">child_num_arg<pos:position pos:line="83" pos:column="22"/></name></name> <operator pos:line="83" pos:column="23">=<pos:position pos:line="83" pos:column="24"/></operator> <name pos:line="83" pos:column="25">child_num_arg<pos:position pos:line="83" pos:column="38"/></name></expr>;<pos:position pos:line="83" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="84" pos:column="5">ts<pos:position pos:line="84" pos:column="7"/></name><operator pos:line="84" pos:column="7">-&gt;<pos:position pos:line="84" pos:column="12"/></operator><name pos:line="84" pos:column="9">threadattr<pos:position pos:line="84" pos:column="19"/></name></name> <operator pos:line="84" pos:column="20">=<pos:position pos:line="84" pos:column="21"/></operator> <name pos:line="84" pos:column="22">thread_attr<pos:position pos:line="84" pos:column="33"/></name></expr>;<pos:position pos:line="84" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name pos:line="86" pos:column="5">rv<pos:position pos:line="86" pos:column="7"/></name> <operator pos:line="86" pos:column="8">=<pos:position pos:line="86" pos:column="9"/></operator> <call><name pos:line="86" pos:column="10">apr_thread_create<pos:position pos:line="86" pos:column="27"/></name><argument_list pos:line="86" pos:column="27">(<argument><expr><operator pos:line="86" pos:column="28">&amp;<pos:position pos:line="86" pos:column="33"/></operator><name pos:line="86" pos:column="29">start_thread_id<pos:position pos:line="86" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="46">thread_attr<pos:position pos:line="86" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="59">start_threads<pos:position pos:line="86" pos:column="72"/></name></expr></argument>,
                           <argument><expr><name pos:line="87" pos:column="28">ts<pos:position pos:line="87" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="32">pchild<pos:position pos:line="87" pos:column="38"/></name></expr></argument>)<pos:position pos:line="87" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="40"/></expr_stmt>
    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><name pos:line="88" pos:column="9">rv<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">!=<pos:position pos:line="88" pos:column="14"/></operator> <name pos:line="88" pos:column="15">APR_SUCCESS<pos:position pos:line="88" pos:column="26"/></name></expr>)<pos:position pos:line="88" pos:column="27"/></condition><then pos:line="88" pos:column="27"> <block pos:line="88" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">ap_log_error<pos:position pos:line="89" pos:column="21"/></name><argument_list pos:line="89" pos:column="21">(<argument><expr><name pos:line="89" pos:column="22">APLOG_MARK<pos:position pos:line="89" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="34">APLOG_ALERT<pos:position pos:line="89" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="47">rv<pos:position pos:line="89" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="51">ap_server_conf<pos:position pos:line="89" pos:column="65"/></name></expr></argument>, <argument><expr><call><name pos:line="89" pos:column="67">APLOGNO<pos:position pos:line="89" pos:column="74"/></name><argument_list pos:line="89" pos:column="74">(<argument><expr><literal type="number" pos:line="89" pos:column="75">00480<pos:position pos:line="89" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="81"/></argument_list></call>
                     <literal type="string" pos:line="90" pos:column="22">"apr_thread_create: unable to create worker thread"<pos:position pos:line="90" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="75"/></expr_stmt>
        <comment type="block" pos:line="91" pos:column="9">/* let the parent decide how bad this really is */</comment>
        <expr_stmt><expr><call><name pos:line="92" pos:column="9">clean_child_exit<pos:position pos:line="92" pos:column="25"/></name><argument_list pos:line="92" pos:column="25">(<argument><expr><name pos:line="92" pos:column="26">APEXIT_CHILDSICK<pos:position pos:line="92" pos:column="42"/></name></expr></argument>)<pos:position pos:line="92" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="93" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="95" pos:column="5">mpm_state<pos:position pos:line="95" pos:column="14"/></name> <operator pos:line="95" pos:column="15">=<pos:position pos:line="95" pos:column="16"/></operator> <name pos:line="95" pos:column="17">AP_MPMQ_RUNNING<pos:position pos:line="95" pos:column="32"/></name></expr>;<pos:position pos:line="95" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="97" pos:column="5">/* If we are only running in one_process mode, we will want to
     * still handle signals. */</comment>
    <if pos:line="99" pos:column="5">if <condition pos:line="99" pos:column="8">(<expr><name pos:line="99" pos:column="9">one_process<pos:position pos:line="99" pos:column="20"/></name></expr>)<pos:position pos:line="99" pos:column="21"/></condition><then pos:line="99" pos:column="21"> <block pos:line="99" pos:column="22">{
        <comment type="block" pos:line="100" pos:column="9">/* Block until we get a terminating signal. */</comment>
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">apr_signal_thread<pos:position pos:line="101" pos:column="26"/></name><argument_list pos:line="101" pos:column="26">(<argument><expr><name pos:line="101" pos:column="27">check_signal<pos:position pos:line="101" pos:column="39"/></name></expr></argument>)<pos:position pos:line="101" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="41"/></expr_stmt>
        <comment type="block" pos:line="102" pos:column="9">/* make sure the start thread has finished; signal_threads()
         * and join_workers() depend on that
         */</comment>
        <comment type="block" pos:line="105" pos:column="9">/* XXX join_start_thread() won't be awakened if one of our
         *     threads encounters a critical error and attempts to
         *     shutdown this child
         */</comment>
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">join_start_thread<pos:position pos:line="109" pos:column="26"/></name><argument_list pos:line="109" pos:column="26">(<argument><expr><name pos:line="109" pos:column="27">start_thread_id<pos:position pos:line="109" pos:column="42"/></name></expr></argument>)<pos:position pos:line="109" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="44"/></expr_stmt>

        <comment type="block" pos:line="111" pos:column="9">/* helps us terminate a little more quickly than the dispatch of the
         * signal thread; beats the Pipe of Death and the browsers
         */</comment>
        <expr_stmt><expr><call><name pos:line="114" pos:column="9">signal_threads<pos:position pos:line="114" pos:column="23"/></name><argument_list pos:line="114" pos:column="23">(<argument><expr><name pos:line="114" pos:column="24">ST_UNGRACEFUL<pos:position pos:line="114" pos:column="37"/></name></expr></argument>)<pos:position pos:line="114" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="114" pos:column="39"/></expr_stmt>

        <comment type="block" pos:line="116" pos:column="9">/* A terminating signal was received. Now join each of the
         * workers to clean them up.
         *   If the worker already exited, then the join frees
         *   their resources and returns.
         *   If the worker hasn't exited, then this blocks until
         *   they have (then cleans up).
         */</comment>
        <expr_stmt><expr><call><name pos:line="123" pos:column="9">join_workers<pos:position pos:line="123" pos:column="21"/></name><argument_list pos:line="123" pos:column="21">(<argument><expr><name><name pos:line="123" pos:column="22">ts<pos:position pos:line="123" pos:column="24"/></name><operator pos:line="123" pos:column="24">-&gt;<pos:position pos:line="123" pos:column="29"/></operator><name pos:line="123" pos:column="26">listener<pos:position pos:line="123" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="36">threads<pos:position pos:line="123" pos:column="43"/></name></expr></argument>)<pos:position pos:line="123" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="124" pos:column="6"/></block></then>
    <else pos:line="125" pos:column="5">else <block pos:line="125" pos:column="10">{                      <comment type="block" pos:line="125" pos:column="33">/* !one_process */</comment>
        <comment type="block" pos:line="126" pos:column="9">/* remove SIGTERM from the set of blocked signals...  if one of
         * the other threads in the process needs to take us down
         * (e.g., for MaxConnectionsPerChild) it will send us SIGTERM
         */</comment>
        <expr_stmt><expr><call><name pos:line="130" pos:column="9">unblock_signal<pos:position pos:line="130" pos:column="23"/></name><argument_list pos:line="130" pos:column="23">(<argument><expr><name pos:line="130" pos:column="24">SIGTERM<pos:position pos:line="130" pos:column="31"/></name></expr></argument>)<pos:position pos:line="130" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="131" pos:column="9">apr_signal<pos:position pos:line="131" pos:column="19"/></name><argument_list pos:line="131" pos:column="19">(<argument><expr><name pos:line="131" pos:column="20">SIGTERM<pos:position pos:line="131" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="131" pos:column="29">dummy_signal_handler<pos:position pos:line="131" pos:column="49"/></name></expr></argument>)<pos:position pos:line="131" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="51"/></expr_stmt>
        <comment type="block" pos:line="132" pos:column="9">/* Watch for any messages from the parent over the POD */</comment>
        <while pos:line="133" pos:column="9">while <condition pos:line="133" pos:column="15">(<expr><literal type="number" pos:line="133" pos:column="16">1<pos:position pos:line="133" pos:column="17"/></literal></expr>)<pos:position pos:line="133" pos:column="18"/></condition> <block pos:line="133" pos:column="19">{
            <expr_stmt><expr><name pos:line="134" pos:column="13">rv<pos:position pos:line="134" pos:column="15"/></name> <operator pos:line="134" pos:column="16">=<pos:position pos:line="134" pos:column="17"/></operator> <call><name pos:line="134" pos:column="18">ap_mpm_podx_check<pos:position pos:line="134" pos:column="35"/></name><argument_list pos:line="134" pos:column="35">(<argument><expr><name><name pos:line="134" pos:column="36">my_bucket<pos:position pos:line="134" pos:column="45"/></name><operator pos:line="134" pos:column="45">-&gt;<pos:position pos:line="134" pos:column="50"/></operator><name pos:line="134" pos:column="47">pod<pos:position pos:line="134" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="134" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="52"/></expr_stmt>
            <if pos:line="135" pos:column="13">if <condition pos:line="135" pos:column="16">(<expr><name pos:line="135" pos:column="17">rv<pos:position pos:line="135" pos:column="19"/></name> <operator pos:line="135" pos:column="20">==<pos:position pos:line="135" pos:column="22"/></operator> <name pos:line="135" pos:column="23">AP_MPM_PODX_NORESTART<pos:position pos:line="135" pos:column="44"/></name></expr>)<pos:position pos:line="135" pos:column="45"/></condition><then pos:line="135" pos:column="45"> <block pos:line="135" pos:column="46">{
                <comment type="block" pos:line="136" pos:column="17">/* see if termination was triggered while we slept */</comment>
                <switch pos:line="137" pos:column="17">switch <condition pos:line="137" pos:column="24">(<expr><name pos:line="137" pos:column="25">terminate_mode<pos:position pos:line="137" pos:column="39"/></name></expr>)<pos:position pos:line="137" pos:column="40"/></condition> <block pos:line="137" pos:column="41">{
                <case pos:line="138" pos:column="17">case <expr><name pos:line="138" pos:column="22">ST_GRACEFUL<pos:position pos:line="138" pos:column="33"/></name></expr>:<pos:position pos:line="138" pos:column="34"/></case>
                    <expr_stmt><expr><name pos:line="139" pos:column="21">rv<pos:position pos:line="139" pos:column="23"/></name> <operator pos:line="139" pos:column="24">=<pos:position pos:line="139" pos:column="25"/></operator> <name pos:line="139" pos:column="26">AP_MPM_PODX_GRACEFUL<pos:position pos:line="139" pos:column="46"/></name></expr>;<pos:position pos:line="139" pos:column="47"/></expr_stmt>
                    <break pos:line="140" pos:column="21">break;<pos:position pos:line="140" pos:column="27"/></break>
                <case pos:line="141" pos:column="17">case <expr><name pos:line="141" pos:column="22">ST_UNGRACEFUL<pos:position pos:line="141" pos:column="35"/></name></expr>:<pos:position pos:line="141" pos:column="36"/></case>
                    <expr_stmt><expr><name pos:line="142" pos:column="21">rv<pos:position pos:line="142" pos:column="23"/></name> <operator pos:line="142" pos:column="24">=<pos:position pos:line="142" pos:column="25"/></operator> <name pos:line="142" pos:column="26">AP_MPM_PODX_RESTART<pos:position pos:line="142" pos:column="45"/></name></expr>;<pos:position pos:line="142" pos:column="46"/></expr_stmt>
                    <break pos:line="143" pos:column="21">break;<pos:position pos:line="143" pos:column="27"/></break>
                }<pos:position pos:line="144" pos:column="18"/></block></switch>
            }<pos:position pos:line="145" pos:column="14"/></block></then></if>
            <if pos:line="146" pos:column="13">if <condition pos:line="146" pos:column="16">(<expr><name pos:line="146" pos:column="17">rv<pos:position pos:line="146" pos:column="19"/></name> <operator pos:line="146" pos:column="20">==<pos:position pos:line="146" pos:column="22"/></operator> <name pos:line="146" pos:column="23">AP_MPM_PODX_GRACEFUL<pos:position pos:line="146" pos:column="43"/></name> <operator pos:line="146" pos:column="44">||<pos:position pos:line="146" pos:column="46"/></operator> <name pos:line="146" pos:column="47">rv<pos:position pos:line="146" pos:column="49"/></name> <operator pos:line="146" pos:column="50">==<pos:position pos:line="146" pos:column="52"/></operator> <name pos:line="146" pos:column="53">AP_MPM_PODX_RESTART<pos:position pos:line="146" pos:column="72"/></name></expr>)<pos:position pos:line="146" pos:column="73"/></condition><then pos:line="146" pos:column="73"> <block pos:line="146" pos:column="74">{
                <comment type="block" pos:line="147" pos:column="17">/* make sure the start thread has finished;
                 * signal_threads() and join_workers depend on that
                 */</comment>
                <expr_stmt><expr><call><name pos:line="150" pos:column="17">join_start_thread<pos:position pos:line="150" pos:column="34"/></name><argument_list pos:line="150" pos:column="34">(<argument><expr><name pos:line="150" pos:column="35">start_thread_id<pos:position pos:line="150" pos:column="50"/></name></expr></argument>)<pos:position pos:line="150" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="52"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="151" pos:column="17">signal_threads<pos:position pos:line="151" pos:column="31"/></name><argument_list pos:line="151" pos:column="31">(<argument><expr><ternary><condition><expr><name pos:line="151" pos:column="32">rv<pos:position pos:line="151" pos:column="34"/></name> <operator pos:line="151" pos:column="35">==<pos:position pos:line="151" pos:column="37"/></operator>
                               <name pos:line="152" pos:column="32">AP_MPM_PODX_GRACEFUL<pos:position pos:line="152" pos:column="52"/></name></expr> ?<pos:position pos:line="152" pos:column="54"/></condition><then pos:line="152" pos:column="54"> <expr><name pos:line="152" pos:column="55">ST_GRACEFUL<pos:position pos:line="152" pos:column="66"/></name></expr> <pos:position pos:line="152" pos:column="67"/></then><else pos:line="152" pos:column="67">: <expr><name pos:line="152" pos:column="69">ST_UNGRACEFUL<pos:position pos:line="152" pos:column="82"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="152" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="84"/></expr_stmt>
                <break pos:line="153" pos:column="17">break;<pos:position pos:line="153" pos:column="23"/></break>
            }<pos:position pos:line="154" pos:column="14"/></block></then></if>
        }<pos:position pos:line="155" pos:column="10"/></block></while>

        <comment type="block" pos:line="157" pos:column="9">/* A terminating signal was received. Now join each of the
         * workers to clean them up.
         *   If the worker already exited, then the join frees
         *   their resources and returns.
         *   If the worker hasn't exited, then this blocks until
         *   they have (then cleans up).
         */</comment>
        <expr_stmt><expr><call><name pos:line="164" pos:column="9">join_workers<pos:position pos:line="164" pos:column="21"/></name><argument_list pos:line="164" pos:column="21">(<argument><expr><name><name pos:line="164" pos:column="22">ts<pos:position pos:line="164" pos:column="24"/></name><operator pos:line="164" pos:column="24">-&gt;<pos:position pos:line="164" pos:column="29"/></operator><name pos:line="164" pos:column="26">listener<pos:position pos:line="164" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="36">threads<pos:position pos:line="164" pos:column="43"/></name></expr></argument>)<pos:position pos:line="164" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="165" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="167" pos:column="5">free<pos:position pos:line="167" pos:column="9"/></name><argument_list pos:line="167" pos:column="9">(<argument><expr><name pos:line="167" pos:column="10">threads<pos:position pos:line="167" pos:column="17"/></name></expr></argument>)<pos:position pos:line="167" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="19"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="169" pos:column="5">clean_child_exit<pos:position pos:line="169" pos:column="21"/></name><argument_list pos:line="169" pos:column="21">(<argument><expr><ternary><condition><expr><name pos:line="169" pos:column="22">resource_shortage<pos:position pos:line="169" pos:column="39"/></name></expr> ?<pos:position pos:line="169" pos:column="41"/></condition><then pos:line="169" pos:column="41"> <expr><name pos:line="169" pos:column="42">APEXIT_CHILDSICK<pos:position pos:line="169" pos:column="58"/></name></expr> <pos:position pos:line="169" pos:column="59"/></then><else pos:line="169" pos:column="59">: <expr><literal type="number" pos:line="169" pos:column="61">0<pos:position pos:line="169" pos:column="62"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="169" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="64"/></expr_stmt>
}<pos:position pos:line="170" pos:column="2"/></block></function></unit>
