<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_667_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">bio_bucket_in_read<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">BIO<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">bio<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">in<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">inl<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">BIO_bucket_in_t<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">inbio<pos:position pos:line="3" pos:column="27"/></name> <init pos:line="3" pos:column="28">= <expr><call><name pos:line="3" pos:column="30">BIO_bucket_in_ptr<pos:position pos:line="3" pos:column="47"/></name><argument_list pos:line="3" pos:column="47">(<argument><expr><name pos:line="3" pos:column="48">bio<pos:position pos:line="3" pos:column="51"/></name></expr></argument>)<pos:position pos:line="3" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="53"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SSLConnRec<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">sslconn<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><call><name pos:line="4" pos:column="27">myConnConfig<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">(<argument><expr><name><name pos:line="4" pos:column="40">inbio<pos:position pos:line="4" pos:column="45"/></name><operator pos:line="4" pos:column="45">-&gt;<pos:position pos:line="4" pos:column="50"/></operator><name pos:line="4" pos:column="47">f<pos:position pos:line="4" pos:column="48"/></name><operator pos:line="4" pos:column="48">-&gt;<pos:position pos:line="4" pos:column="53"/></operator><name pos:line="4" pos:column="50">c<pos:position pos:line="4" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="4" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="53"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name> <init pos:line="5" pos:column="13">= <expr><literal type="number" pos:line="5" pos:column="15">0<pos:position pos:line="5" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* XXX: flush here only required for SSLv2;
     * OpenSSL calls BIO_flush() at the appropriate times for
     * the other protocols.
     */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">SSL_version<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name><name pos:line="11" pos:column="22">inbio<pos:position pos:line="11" pos:column="27"/></name><operator pos:line="11" pos:column="27">-&gt;<pos:position pos:line="11" pos:column="32"/></operator><name pos:line="11" pos:column="29">ssl<pos:position pos:line="11" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="33"/></argument_list></call> <operator pos:line="11" pos:column="34">==<pos:position pos:line="11" pos:column="36"/></operator> <name pos:line="11" pos:column="37">SSL2_VERSION<pos:position pos:line="11" pos:column="49"/></name><operator pos:line="11" pos:column="49">)<pos:position pos:line="11" pos:column="50"/></operator> <operator pos:line="11" pos:column="51">||<pos:position pos:line="11" pos:column="53"/></operator> <name><name pos:line="11" pos:column="54">sslconn<pos:position pos:line="11" pos:column="61"/></name><operator pos:line="11" pos:column="61">-&gt;<pos:position pos:line="11" pos:column="66"/></operator><name pos:line="11" pos:column="63">is_proxy<pos:position pos:line="11" pos:column="71"/></name></name></expr>)<pos:position pos:line="11" pos:column="72"/></condition><then pos:line="11" pos:column="72"> <block pos:line="11" pos:column="73">{
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">BIO_bucket_flush<pos:position pos:line="12" pos:column="25"/></name><argument_list pos:line="12" pos:column="25">(<argument><expr><name><name pos:line="12" pos:column="26">inbio<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">-&gt;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="33">wbio<pos:position pos:line="12" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="15" pos:column="5">inbio<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">rc<pos:position pos:line="15" pos:column="14"/></name></name> <operator pos:line="15" pos:column="15">=<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">APR_SUCCESS<pos:position pos:line="15" pos:column="28"/></name></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>
    
    <comment type="block" pos:line="17" pos:column="5">/* first use data already read from socket if any */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><operator pos:line="18" pos:column="9">(<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">len<pos:position pos:line="18" pos:column="13"/></name> <operator pos:line="18" pos:column="14">=<pos:position pos:line="18" pos:column="15"/></operator> <call><name pos:line="18" pos:column="16">char_buffer_read<pos:position pos:line="18" pos:column="32"/></name><argument_list pos:line="18" pos:column="32">(<argument><expr><operator pos:line="18" pos:column="33">&amp;<pos:position pos:line="18" pos:column="38"/></operator><name><name pos:line="18" pos:column="34">inbio<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">cbuf<pos:position pos:line="18" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="47">in<pos:position pos:line="18" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="51">inl<pos:position pos:line="18" pos:column="54"/></name></expr></argument>)<pos:position pos:line="18" pos:column="55"/></argument_list></call><operator pos:line="18" pos:column="55">)<pos:position pos:line="18" pos:column="56"/></operator></expr>)<pos:position pos:line="18" pos:column="57"/></condition><then pos:line="18" pos:column="57"> <block pos:line="18" pos:column="58">{
        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">len<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">&lt;=<pos:position pos:line="19" pos:column="23"/></operator> <name pos:line="19" pos:column="21">inl<pos:position pos:line="19" pos:column="24"/></name><operator pos:line="19" pos:column="24">)<pos:position pos:line="19" pos:column="25"/></operator> <operator pos:line="19" pos:column="26">||<pos:position pos:line="19" pos:column="28"/></operator> <name><name pos:line="19" pos:column="29">inbio<pos:position pos:line="19" pos:column="34"/></name><operator pos:line="19" pos:column="34">-&gt;<pos:position pos:line="19" pos:column="39"/></operator><name pos:line="19" pos:column="36">mode<pos:position pos:line="19" pos:column="40"/></name></name> <operator pos:line="19" pos:column="41">==<pos:position pos:line="19" pos:column="43"/></operator> <name pos:line="19" pos:column="44">AP_MODE_GETLINE<pos:position pos:line="19" pos:column="59"/></name></expr>)<pos:position pos:line="19" pos:column="60"/></condition><then pos:line="19" pos:column="60"> <block pos:line="19" pos:column="61">{
            <return pos:line="20" pos:column="13">return <expr><name pos:line="20" pos:column="20">len<pos:position pos:line="20" pos:column="23"/></name></expr>;<pos:position pos:line="20" pos:column="24"/></return>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="22" pos:column="9">inl<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">-=<pos:position pos:line="22" pos:column="15"/></operator> <name pos:line="22" pos:column="16">len<pos:position pos:line="22" pos:column="19"/></name></expr>;<pos:position pos:line="22" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <while pos:line="25" pos:column="5">while <condition pos:line="25" pos:column="11">(<expr><literal type="number" pos:line="25" pos:column="12">1<pos:position pos:line="25" pos:column="13"/></literal></expr>)<pos:position pos:line="25" pos:column="14"/></condition> <block pos:line="25" pos:column="15">{
        <decl_stmt><decl><type><specifier pos:line="26" pos:column="9">const<pos:position pos:line="26" pos:column="14"/></specifier> <name pos:line="26" pos:column="15">char<pos:position pos:line="26" pos:column="19"/></name> <modifier pos:line="26" pos:column="20">*<pos:position pos:line="26" pos:column="21"/></modifier></type><name pos:line="26" pos:column="21">buf<pos:position pos:line="26" pos:column="24"/></name></decl>;<pos:position pos:line="26" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="27" pos:column="9">apr_size_t<pos:position pos:line="27" pos:column="19"/></name></type> <name pos:line="27" pos:column="20">buf_len<pos:position pos:line="27" pos:column="27"/></name> <init pos:line="27" pos:column="28">= <expr><literal type="number" pos:line="27" pos:column="30">0<pos:position pos:line="27" pos:column="31"/></literal></expr></init></decl>;<pos:position pos:line="27" pos:column="32"/></decl_stmt>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name><name pos:line="29" pos:column="13">inbio<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">bucket<pos:position pos:line="29" pos:column="26"/></name></name></expr>)<pos:position pos:line="29" pos:column="27"/></condition><then pos:line="29" pos:column="27"> <block pos:line="29" pos:column="28">{
            <comment type="block" pos:line="30" pos:column="13">/* all of the data in this bucket has been read,
             * so we can delete it now.
             */</comment>
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">apr_bucket_delete<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name><name pos:line="33" pos:column="31">inbio<pos:position pos:line="33" pos:column="36"/></name><operator pos:line="33" pos:column="36">-&gt;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="38">bucket<pos:position pos:line="33" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="46"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="34" pos:column="13">inbio<pos:position pos:line="34" pos:column="18"/></name><operator pos:line="34" pos:column="18">-&gt;<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="20">bucket<pos:position pos:line="34" pos:column="26"/></name></name> <operator pos:line="34" pos:column="27">=<pos:position pos:line="34" pos:column="28"/></operator> <name pos:line="34" pos:column="29">NULL<pos:position pos:line="34" pos:column="33"/></name></expr>;<pos:position pos:line="34" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>

        <if pos:line="37" pos:column="9">if <condition pos:line="37" pos:column="12">(<expr><call><name pos:line="37" pos:column="13">APR_BRIGADE_EMPTY<pos:position pos:line="37" pos:column="30"/></name><argument_list pos:line="37" pos:column="30">(<argument><expr><name><name pos:line="37" pos:column="31">inbio<pos:position pos:line="37" pos:column="36"/></name><operator pos:line="37" pos:column="36">-&gt;<pos:position pos:line="37" pos:column="41"/></operator><name pos:line="37" pos:column="38">bb<pos:position pos:line="37" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="42"/></condition><then pos:line="37" pos:column="42"> <block pos:line="37" pos:column="43">{
            <comment type="block" pos:line="38" pos:column="13">/* We will always call with READBYTES even if the user wants
             * GETLINE.
             */</comment>
            <expr_stmt><expr><name><name pos:line="41" pos:column="13">inbio<pos:position pos:line="41" pos:column="18"/></name><operator pos:line="41" pos:column="18">-&gt;<pos:position pos:line="41" pos:column="23"/></operator><name pos:line="41" pos:column="20">rc<pos:position pos:line="41" pos:column="22"/></name></name> <operator pos:line="41" pos:column="23">=<pos:position pos:line="41" pos:column="24"/></operator> <call><name pos:line="41" pos:column="25">ap_get_brigade<pos:position pos:line="41" pos:column="39"/></name><argument_list pos:line="41" pos:column="39">(<argument><expr><name><name pos:line="41" pos:column="40">inbio<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">-&gt;<pos:position pos:line="41" pos:column="50"/></operator><name pos:line="41" pos:column="47">f<pos:position pos:line="41" pos:column="48"/></name><operator pos:line="41" pos:column="48">-&gt;<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="50">next<pos:position pos:line="41" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="56">inbio<pos:position pos:line="41" pos:column="61"/></name><operator pos:line="41" pos:column="61">-&gt;<pos:position pos:line="41" pos:column="66"/></operator><name pos:line="41" pos:column="63">bb<pos:position pos:line="41" pos:column="65"/></name></name></expr></argument>,
                                       <argument><expr><name pos:line="42" pos:column="40">AP_MODE_READBYTES<pos:position pos:line="42" pos:column="57"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="59">inbio<pos:position pos:line="42" pos:column="64"/></name><operator pos:line="42" pos:column="64">-&gt;<pos:position pos:line="42" pos:column="69"/></operator><name pos:line="42" pos:column="66">block<pos:position pos:line="42" pos:column="71"/></name></name></expr></argument>, 
                                       <argument><expr><name pos:line="43" pos:column="40">inl<pos:position pos:line="43" pos:column="43"/></name></expr></argument>)<pos:position pos:line="43" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="45"/></expr_stmt>

            <if pos:line="45" pos:column="13">if <condition pos:line="45" pos:column="16">(<expr><operator pos:line="45" pos:column="17">(<pos:position pos:line="45" pos:column="18"/></operator><name><name pos:line="45" pos:column="18">inbio<pos:position pos:line="45" pos:column="23"/></name><operator pos:line="45" pos:column="23">-&gt;<pos:position pos:line="45" pos:column="28"/></operator><name pos:line="45" pos:column="25">rc<pos:position pos:line="45" pos:column="27"/></name></name> <operator pos:line="45" pos:column="28">!=<pos:position pos:line="45" pos:column="30"/></operator> <name pos:line="45" pos:column="31">APR_SUCCESS<pos:position pos:line="45" pos:column="42"/></name><operator pos:line="45" pos:column="42">)<pos:position pos:line="45" pos:column="43"/></operator> <operator pos:line="45" pos:column="44">||<pos:position pos:line="45" pos:column="46"/></operator> <call><name pos:line="45" pos:column="47">APR_BRIGADE_EMPTY<pos:position pos:line="45" pos:column="64"/></name><argument_list pos:line="45" pos:column="64">(<argument><expr><name><name pos:line="45" pos:column="65">inbio<pos:position pos:line="45" pos:column="70"/></name><operator pos:line="45" pos:column="70">-&gt;<pos:position pos:line="45" pos:column="75"/></operator><name pos:line="45" pos:column="72">bb<pos:position pos:line="45" pos:column="74"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="45" pos:column="76"/></condition><then pos:line="45" pos:column="76">
            <block pos:line="46" pos:column="13">{
                <break pos:line="47" pos:column="17">break;<pos:position pos:line="47" pos:column="23"/></break>
            }<pos:position pos:line="48" pos:column="14"/></block></then></if>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="51" pos:column="9">inbio<pos:position pos:line="51" pos:column="14"/></name><operator pos:line="51" pos:column="14">-&gt;<pos:position pos:line="51" pos:column="19"/></operator><name pos:line="51" pos:column="16">bucket<pos:position pos:line="51" pos:column="22"/></name></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <call><name pos:line="51" pos:column="25">APR_BRIGADE_FIRST<pos:position pos:line="51" pos:column="42"/></name><argument_list pos:line="51" pos:column="42">(<argument><expr><name><name pos:line="51" pos:column="43">inbio<pos:position pos:line="51" pos:column="48"/></name><operator pos:line="51" pos:column="48">-&gt;<pos:position pos:line="51" pos:column="53"/></operator><name pos:line="51" pos:column="50">bb<pos:position pos:line="51" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="54"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="53" pos:column="9">inbio<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">-&gt;<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="16">rc<pos:position pos:line="53" pos:column="18"/></name></name> <operator pos:line="53" pos:column="19">=<pos:position pos:line="53" pos:column="20"/></operator> <call><name pos:line="53" pos:column="21">apr_bucket_read<pos:position pos:line="53" pos:column="36"/></name><argument_list pos:line="53" pos:column="36">(<argument><expr><name><name pos:line="53" pos:column="37">inbio<pos:position pos:line="53" pos:column="42"/></name><operator pos:line="53" pos:column="42">-&gt;<pos:position pos:line="53" pos:column="47"/></operator><name pos:line="53" pos:column="44">bucket<pos:position pos:line="53" pos:column="50"/></name></name></expr></argument>,
                                    <argument><expr><operator pos:line="54" pos:column="37">&amp;<pos:position pos:line="54" pos:column="42"/></operator><name pos:line="54" pos:column="38">buf<pos:position pos:line="54" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="54" pos:column="43">&amp;<pos:position pos:line="54" pos:column="48"/></operator><name pos:line="54" pos:column="44">buf_len<pos:position pos:line="54" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="53">inbio<pos:position pos:line="54" pos:column="58"/></name><operator pos:line="54" pos:column="58">-&gt;<pos:position pos:line="54" pos:column="63"/></operator><name pos:line="54" pos:column="60">block<pos:position pos:line="54" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="67"/></expr_stmt>

        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name><name pos:line="56" pos:column="13">inbio<pos:position pos:line="56" pos:column="18"/></name><operator pos:line="56" pos:column="18">-&gt;<pos:position pos:line="56" pos:column="23"/></operator><name pos:line="56" pos:column="20">rc<pos:position pos:line="56" pos:column="22"/></name></name> <operator pos:line="56" pos:column="23">!=<pos:position pos:line="56" pos:column="25"/></operator> <name pos:line="56" pos:column="26">APR_SUCCESS<pos:position pos:line="56" pos:column="37"/></name></expr>)<pos:position pos:line="56" pos:column="38"/></condition><then pos:line="56" pos:column="38"> <block pos:line="56" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="57" pos:column="13">apr_bucket_delete<pos:position pos:line="57" pos:column="30"/></name><argument_list pos:line="57" pos:column="30">(<argument><expr><name><name pos:line="57" pos:column="31">inbio<pos:position pos:line="57" pos:column="36"/></name><operator pos:line="57" pos:column="36">-&gt;<pos:position pos:line="57" pos:column="41"/></operator><name pos:line="57" pos:column="38">bucket<pos:position pos:line="57" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="46"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="58" pos:column="13">inbio<pos:position pos:line="58" pos:column="18"/></name><operator pos:line="58" pos:column="18">-&gt;<pos:position pos:line="58" pos:column="23"/></operator><name pos:line="58" pos:column="20">bucket<pos:position pos:line="58" pos:column="26"/></name></name> <operator pos:line="58" pos:column="27">=<pos:position pos:line="58" pos:column="28"/></operator> <name pos:line="58" pos:column="29">NULL<pos:position pos:line="58" pos:column="33"/></name></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>
            <return pos:line="59" pos:column="13">return <expr><name pos:line="59" pos:column="20">len<pos:position pos:line="59" pos:column="23"/></name></expr>;<pos:position pos:line="59" pos:column="24"/></return>
        }<pos:position pos:line="60" pos:column="10"/></block></then></if>

        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">buf_len<pos:position pos:line="62" pos:column="20"/></name></expr>)<pos:position pos:line="62" pos:column="21"/></condition><then pos:line="62" pos:column="21"> <block pos:line="62" pos:column="22">{
            <comment type="block" pos:line="63" pos:column="13">/* Protected against len &gt; MAX_INT 
             */</comment>
            <if pos:line="65" pos:column="13">if <condition pos:line="65" pos:column="16">(<expr><operator pos:line="65" pos:column="17">(<pos:position pos:line="65" pos:column="18"/></operator><name pos:line="65" pos:column="18">len<pos:position pos:line="65" pos:column="21"/></name> <operator pos:line="65" pos:column="22">+<pos:position pos:line="65" pos:column="23"/></operator> <operator pos:line="65" pos:column="24">(<pos:position pos:line="65" pos:column="25"/></operator><name pos:line="65" pos:column="25">int<pos:position pos:line="65" pos:column="28"/></name><operator pos:line="65" pos:column="28">)<pos:position pos:line="65" pos:column="29"/></operator><name pos:line="65" pos:column="29">buf_len<pos:position pos:line="65" pos:column="36"/></name><operator pos:line="65" pos:column="36">)<pos:position pos:line="65" pos:column="37"/></operator> <operator pos:line="65" pos:column="38">&gt;=<pos:position pos:line="65" pos:column="43"/></operator> <name pos:line="65" pos:column="41">inl<pos:position pos:line="65" pos:column="44"/></name> <operator pos:line="65" pos:column="45">||<pos:position pos:line="65" pos:column="47"/></operator> <operator pos:line="65" pos:column="48">(<pos:position pos:line="65" pos:column="49"/></operator><name pos:line="65" pos:column="49">int<pos:position pos:line="65" pos:column="52"/></name><operator pos:line="65" pos:column="52">)<pos:position pos:line="65" pos:column="53"/></operator><name pos:line="65" pos:column="53">buf_len<pos:position pos:line="65" pos:column="60"/></name> <operator pos:line="65" pos:column="61">&lt;<pos:position pos:line="65" pos:column="65"/></operator> <literal type="number" pos:line="65" pos:column="63">0<pos:position pos:line="65" pos:column="64"/></literal></expr>)<pos:position pos:line="65" pos:column="65"/></condition><then pos:line="65" pos:column="65"> <block pos:line="65" pos:column="66">{
                <comment type="block" pos:line="66" pos:column="17">/* we have enough to fill the buffer.
                 * append if we have already written to the buffer.
                 */</comment>
                <decl_stmt><decl><type><name pos:line="69" pos:column="17">int<pos:position pos:line="69" pos:column="20"/></name></type> <name pos:line="69" pos:column="21">nibble<pos:position pos:line="69" pos:column="27"/></name> <init pos:line="69" pos:column="28">= <expr><name pos:line="69" pos:column="30">inl<pos:position pos:line="69" pos:column="33"/></name> <operator pos:line="69" pos:column="34">-<pos:position pos:line="69" pos:column="35"/></operator> <name pos:line="69" pos:column="36">len<pos:position pos:line="69" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="69" pos:column="40"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="70" pos:column="17">char<pos:position pos:line="70" pos:column="21"/></name> <modifier pos:line="70" pos:column="22">*<pos:position pos:line="70" pos:column="23"/></modifier></type><name pos:line="70" pos:column="23">value<pos:position pos:line="70" pos:column="28"/></name> <init pos:line="70" pos:column="29">= <expr><operator pos:line="70" pos:column="31">(<pos:position pos:line="70" pos:column="32"/></operator><name pos:line="70" pos:column="32">char<pos:position pos:line="70" pos:column="36"/></name> <operator pos:line="70" pos:column="37">*<pos:position pos:line="70" pos:column="38"/></operator><operator pos:line="70" pos:column="38">)<pos:position pos:line="70" pos:column="39"/></operator><name pos:line="70" pos:column="39">buf<pos:position pos:line="70" pos:column="42"/></name><operator pos:line="70" pos:column="42">+<pos:position pos:line="70" pos:column="43"/></operator><name pos:line="70" pos:column="43">nibble<pos:position pos:line="70" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="70" pos:column="50"/></decl_stmt>

                <decl_stmt><decl><type><name pos:line="72" pos:column="17">int<pos:position pos:line="72" pos:column="20"/></name></type> <name pos:line="72" pos:column="21">length<pos:position pos:line="72" pos:column="27"/></name> <init pos:line="72" pos:column="28">= <expr><name pos:line="72" pos:column="30">buf_len<pos:position pos:line="72" pos:column="37"/></name> <operator pos:line="72" pos:column="38">-<pos:position pos:line="72" pos:column="39"/></operator> <name pos:line="72" pos:column="40">nibble<pos:position pos:line="72" pos:column="46"/></name></expr></init></decl>;<pos:position pos:line="72" pos:column="47"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="73" pos:column="17">memcpy<pos:position pos:line="73" pos:column="23"/></name><argument_list pos:line="73" pos:column="23">(<argument><expr><name pos:line="73" pos:column="24">in<pos:position pos:line="73" pos:column="26"/></name> <operator pos:line="73" pos:column="27">+<pos:position pos:line="73" pos:column="28"/></operator> <name pos:line="73" pos:column="29">len<pos:position pos:line="73" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="34">buf<pos:position pos:line="73" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="39">nibble<pos:position pos:line="73" pos:column="45"/></name></expr></argument>)<pos:position pos:line="73" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="47"/></expr_stmt>

                <expr_stmt><expr><call><name pos:line="75" pos:column="17">char_buffer_write<pos:position pos:line="75" pos:column="34"/></name><argument_list pos:line="75" pos:column="34">(<argument><expr><operator pos:line="75" pos:column="35">&amp;<pos:position pos:line="75" pos:column="40"/></operator><name><name pos:line="75" pos:column="36">inbio<pos:position pos:line="75" pos:column="41"/></name><operator pos:line="75" pos:column="41">-&gt;<pos:position pos:line="75" pos:column="46"/></operator><name pos:line="75" pos:column="43">cbuf<pos:position pos:line="75" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="49">value<pos:position pos:line="75" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="56">length<pos:position pos:line="75" pos:column="62"/></name></expr></argument>)<pos:position pos:line="75" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="64"/></expr_stmt>
                <expr_stmt><expr><name pos:line="76" pos:column="17">len<pos:position pos:line="76" pos:column="20"/></name> <operator pos:line="76" pos:column="21">+=<pos:position pos:line="76" pos:column="23"/></operator> <name pos:line="76" pos:column="24">nibble<pos:position pos:line="76" pos:column="30"/></name></expr>;<pos:position pos:line="76" pos:column="31"/></expr_stmt>

                <break pos:line="78" pos:column="17">break;<pos:position pos:line="78" pos:column="23"/></break>
            }<pos:position pos:line="79" pos:column="14"/></block></then>
            <else pos:line="80" pos:column="13">else <block pos:line="80" pos:column="18">{
                <comment type="block" pos:line="81" pos:column="17">/* not enough data,
                 * save what we have and try to read more.
                 */</comment>
                <expr_stmt><expr><call><name pos:line="84" pos:column="17">memcpy<pos:position pos:line="84" pos:column="23"/></name><argument_list pos:line="84" pos:column="23">(<argument><expr><name pos:line="84" pos:column="24">in<pos:position pos:line="84" pos:column="26"/></name> <operator pos:line="84" pos:column="27">+<pos:position pos:line="84" pos:column="28"/></operator> <name pos:line="84" pos:column="29">len<pos:position pos:line="84" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="34">buf<pos:position pos:line="84" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="39">buf_len<pos:position pos:line="84" pos:column="46"/></name></expr></argument>)<pos:position pos:line="84" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="48"/></expr_stmt>
                <expr_stmt><expr><name pos:line="85" pos:column="17">len<pos:position pos:line="85" pos:column="20"/></name> <operator pos:line="85" pos:column="21">+=<pos:position pos:line="85" pos:column="23"/></operator> <name pos:line="85" pos:column="24">buf_len<pos:position pos:line="85" pos:column="31"/></name></expr>;<pos:position pos:line="85" pos:column="32"/></expr_stmt>
            }<pos:position pos:line="86" pos:column="14"/></block></else></if>
        }<pos:position pos:line="87" pos:column="10"/></block></then></if>

        <if pos:line="89" pos:column="9">if <condition pos:line="89" pos:column="12">(<expr><name><name pos:line="89" pos:column="13">inbio<pos:position pos:line="89" pos:column="18"/></name><operator pos:line="89" pos:column="18">-&gt;<pos:position pos:line="89" pos:column="23"/></operator><name pos:line="89" pos:column="20">mode<pos:position pos:line="89" pos:column="24"/></name></name> <operator pos:line="89" pos:column="25">==<pos:position pos:line="89" pos:column="27"/></operator> <name pos:line="89" pos:column="28">AP_MODE_GETLINE<pos:position pos:line="89" pos:column="43"/></name></expr>)<pos:position pos:line="89" pos:column="44"/></condition><then pos:line="89" pos:column="44"> <block pos:line="89" pos:column="45">{
            <comment type="block" pos:line="90" pos:column="13">/* only read from the socket once in getline mode.
             * since callers buffer size is likely much larger than
             * the request headers.  caller can always come back for more
             * if first read didn't get all the headers.
             */</comment>
            <break pos:line="95" pos:column="13">break;<pos:position pos:line="95" pos:column="19"/></break>
        }<pos:position pos:line="96" pos:column="10"/></block></then></if>
    }<pos:position pos:line="97" pos:column="6"/></block></while>

    <return pos:line="99" pos:column="5">return <expr><name pos:line="99" pos:column="12">len<pos:position pos:line="99" pos:column="15"/></name></expr>;<pos:position pos:line="99" pos:column="16"/></return>
}<pos:position pos:line="100" pos:column="2"/></block></function></unit>
