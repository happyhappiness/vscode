<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3148_httpd-2.0.64.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">soblock<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">int<pos:position pos:line="1" pos:column="32"/></name></type> <name pos:line="1" pos:column="33">sd<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
<comment type="block" pos:line="3" pos:column="1">/* BeOS uses setsockopt at present for non blocking... */</comment>
<cpp:ifndef pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">ifndef<pos:position pos:line="4" pos:column="8"/></cpp:directive> <name pos:line="4" pos:column="9">BEOS<pos:position pos:line="4" pos:column="13"/></name></cpp:ifndef>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">fd_flags<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><name pos:line="7" pos:column="5">fd_flags<pos:position pos:line="7" pos:column="13"/></name> <operator pos:line="7" pos:column="14">=<pos:position pos:line="7" pos:column="15"/></operator> <call><name pos:line="7" pos:column="16">fcntl<pos:position pos:line="7" pos:column="21"/></name><argument_list pos:line="7" pos:column="21">(<argument><expr><name pos:line="7" pos:column="22">sd<pos:position pos:line="7" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="26">F_GETFL<pos:position pos:line="7" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="35">0<pos:position pos:line="7" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="38"/></expr_stmt>
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><call><name pos:line="8" pos:column="5">defined<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">O_NONBLOCK<pos:position pos:line="8" pos:column="23"/></name></expr></argument>)<pos:position pos:line="8" pos:column="24"/></argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name pos:line="9" pos:column="5">fd_flags<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">&amp;=<pos:position pos:line="9" pos:column="20"/></operator> <operator pos:line="9" pos:column="17">~<pos:position pos:line="9" pos:column="18"/></operator><name pos:line="9" pos:column="18">O_NONBLOCK<pos:position pos:line="9" pos:column="28"/></name></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt>
<cpp:elif pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">elif<pos:position pos:line="10" pos:column="6"/></cpp:directive> <expr><call><name pos:line="10" pos:column="7">defined<pos:position pos:line="10" pos:column="14"/></name><argument_list pos:line="10" pos:column="14">(<argument><expr><name pos:line="10" pos:column="15">O_NDELAY<pos:position pos:line="10" pos:column="23"/></name></expr></argument>)<pos:position pos:line="10" pos:column="24"/></argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name pos:line="11" pos:column="5">fd_flags<pos:position pos:line="11" pos:column="13"/></name> <operator pos:line="11" pos:column="14">&amp;=<pos:position pos:line="11" pos:column="20"/></operator> <operator pos:line="11" pos:column="17">~<pos:position pos:line="11" pos:column="18"/></operator><name pos:line="11" pos:column="18">O_NDELAY<pos:position pos:line="11" pos:column="26"/></name></expr>;<pos:position pos:line="11" pos:column="27"/></expr_stmt>
<cpp:elif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">elif<pos:position pos:line="12" pos:column="6"/></cpp:directive> <expr><call><name pos:line="12" pos:column="7">defined<pos:position pos:line="12" pos:column="14"/></name><argument_list pos:line="12" pos:column="14">(<argument><expr><name pos:line="12" pos:column="15">FNDELAY<pos:position pos:line="12" pos:column="22"/></name></expr></argument>)<pos:position pos:line="12" pos:column="23"/></argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name pos:line="13" pos:column="5">fd_flags<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">&amp;=<pos:position pos:line="13" pos:column="20"/></operator> <operator pos:line="13" pos:column="17">~<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="18">FNDELAY<pos:position pos:line="13" pos:column="25"/></name></expr>;<pos:position pos:line="13" pos:column="26"/></expr_stmt>
<cpp:else pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">else<pos:position pos:line="14" pos:column="6"/></cpp:directive></cpp:else>
<cpp:error pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">error<pos:position pos:line="15" pos:column="7"/></cpp:directive> Please teach APR how to make sockets blocking on your platform.<pos:position pos:line="15" pos:column="71"/></cpp:error>
<cpp:endif pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">endif<pos:position pos:line="16" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><call><name pos:line="17" pos:column="9">fcntl<pos:position pos:line="17" pos:column="14"/></name><argument_list pos:line="17" pos:column="14">(<argument><expr><name pos:line="17" pos:column="15">sd<pos:position pos:line="17" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="19">F_SETFL<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="28">fd_flags<pos:position pos:line="17" pos:column="36"/></name></expr></argument>)<pos:position pos:line="17" pos:column="37"/></argument_list></call> <operator pos:line="17" pos:column="38">==<pos:position pos:line="17" pos:column="40"/></operator> <operator pos:line="17" pos:column="41">-<pos:position pos:line="17" pos:column="42"/></operator><literal type="number" pos:line="17" pos:column="42">1<pos:position pos:line="17" pos:column="43"/></literal></expr>)<pos:position pos:line="17" pos:column="44"/></condition><then pos:line="17" pos:column="44"> <block pos:line="17" pos:column="45">{
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">errno<pos:position pos:line="18" pos:column="21"/></name></expr>;<pos:position pos:line="18" pos:column="22"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
<cpp:else pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">else<pos:position pos:line="20" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">on<pos:position pos:line="21" pos:column="11"/></name> <init pos:line="21" pos:column="12">= <expr><literal type="number" pos:line="21" pos:column="14">0<pos:position pos:line="21" pos:column="15"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="16"/></decl_stmt>
    <if pos:line="22" pos:column="5">if <condition pos:line="22" pos:column="8">(<expr><call><name pos:line="22" pos:column="9">setsockopt<pos:position pos:line="22" pos:column="19"/></name><argument_list pos:line="22" pos:column="19">(<argument><expr><name pos:line="22" pos:column="20">sd<pos:position pos:line="22" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="24">SOL_SOCKET<pos:position pos:line="22" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="36">SO_NONBLOCK<pos:position pos:line="22" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="22" pos:column="49">&amp;<pos:position pos:line="22" pos:column="54"/></operator><name pos:line="22" pos:column="50">on<pos:position pos:line="22" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="22" pos:column="54">sizeof<argument_list pos:line="22" pos:column="60">(<argument><expr><name pos:line="22" pos:column="61">int<pos:position pos:line="22" pos:column="64"/></name></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="66"/></argument_list></call> <operator pos:line="22" pos:column="67">&lt;<pos:position pos:line="22" pos:column="71"/></operator> <literal type="number" pos:line="22" pos:column="69">0<pos:position pos:line="22" pos:column="70"/></literal></expr>)<pos:position pos:line="22" pos:column="71"/></condition><then pos:line="22" pos:column="71">
        <block type="pseudo"><return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">errno<pos:position pos:line="23" pos:column="21"/></name></expr>;<pos:position pos:line="23" pos:column="22"/></return></block></then></if>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="24" pos:column="8">/* BEOS */</comment>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">APR_SUCCESS<pos:position pos:line="25" pos:column="23"/></name></expr>;<pos:position pos:line="25" pos:column="24"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
