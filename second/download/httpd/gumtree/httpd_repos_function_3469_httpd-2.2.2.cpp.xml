<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3469_httpd-2.2.2.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name> <modifier pos:line="1" pos:column="6">*<pos:position pos:line="1" pos:column="7"/></modifier></type><name pos:line="1" pos:column="7">apr_atomic_casptr<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><specifier pos:line="1" pos:column="25">volatile<pos:position pos:line="1" pos:column="33"/></specifier> <name pos:line="1" pos:column="34">void<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier><modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">mem<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">void<pos:position pos:line="1" pos:column="50"/></name> <modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">with<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="58">const<pos:position pos:line="1" pos:column="63"/></specifier> <name pos:line="1" pos:column="64">void<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">cmp<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">void<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">prev<pos:position pos:line="3" pos:column="15"/></name></decl>;<pos:position pos:line="3" pos:column="16"/></decl_stmt>
<cpp:if pos:line="4" pos:column="1">#<cpp:directive pos:line="4" pos:column="2">if<pos:position pos:line="4" pos:column="4"/></cpp:directive> <expr><name pos:line="4" pos:column="5">APR_HAS_THREADS<pos:position pos:line="4" pos:column="20"/></name></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_thread_mutex_t<pos:position pos:line="5" pos:column="23"/></name> <modifier pos:line="5" pos:column="24">*<pos:position pos:line="5" pos:column="25"/></modifier></type><name pos:line="5" pos:column="25">lock<pos:position pos:line="5" pos:column="29"/></name> <init pos:line="5" pos:column="30">= <expr><name><name pos:line="5" pos:column="32">hash_mutex<pos:position pos:line="5" pos:column="42"/></name><index pos:line="5" pos:column="42">[<expr><call><name pos:line="5" pos:column="43">ATOMIC_HASH<pos:position pos:line="5" pos:column="54"/></name><argument_list pos:line="5" pos:column="54">(<argument><expr><name pos:line="5" pos:column="55">mem<pos:position pos:line="5" pos:column="58"/></name></expr></argument>)<pos:position pos:line="5" pos:column="59"/></argument_list></call></expr>]<pos:position pos:line="5" pos:column="60"/></index></name></expr></init></decl>;<pos:position pos:line="5" pos:column="61"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">CHECK<pos:position pos:line="7" pos:column="10"/></name><argument_list pos:line="7" pos:column="10">(<argument><expr><call><name pos:line="7" pos:column="11">apr_thread_mutex_lock<pos:position pos:line="7" pos:column="32"/></name><argument_list pos:line="7" pos:column="32">(<argument><expr><name pos:line="7" pos:column="33">lock<pos:position pos:line="7" pos:column="37"/></name></expr></argument>)<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="8" pos:column="5">prev<pos:position pos:line="8" pos:column="9"/></name> <operator pos:line="8" pos:column="10">=<pos:position pos:line="8" pos:column="11"/></operator> <operator pos:line="8" pos:column="12">*<pos:position pos:line="8" pos:column="13"/></operator><operator pos:line="8" pos:column="13">(<pos:position pos:line="8" pos:column="14"/></operator><name pos:line="8" pos:column="14">void<pos:position pos:line="8" pos:column="18"/></name> <operator pos:line="8" pos:column="19">*<pos:position pos:line="8" pos:column="20"/></operator><operator pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></operator><operator pos:line="8" pos:column="21">)<pos:position pos:line="8" pos:column="22"/></operator><name pos:line="8" pos:column="22">mem<pos:position pos:line="8" pos:column="25"/></name></expr>;<pos:position pos:line="8" pos:column="26"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">prev<pos:position pos:line="9" pos:column="13"/></name> <operator pos:line="9" pos:column="14">==<pos:position pos:line="9" pos:column="16"/></operator> <name pos:line="9" pos:column="17">cmp<pos:position pos:line="9" pos:column="20"/></name></expr>)<pos:position pos:line="9" pos:column="21"/></condition><then pos:line="9" pos:column="21"> <block pos:line="9" pos:column="22">{
        <expr_stmt><expr><operator pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">mem<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <name pos:line="10" pos:column="16">with<pos:position pos:line="10" pos:column="20"/></name></expr>;<pos:position pos:line="10" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="12" pos:column="5">CHECK<pos:position pos:line="12" pos:column="10"/></name><argument_list pos:line="12" pos:column="10">(<argument><expr><call><name pos:line="12" pos:column="11">apr_thread_mutex_unlock<pos:position pos:line="12" pos:column="34"/></name><argument_list pos:line="12" pos:column="34">(<argument><expr><name pos:line="12" pos:column="35">lock<pos:position pos:line="12" pos:column="39"/></name></expr></argument>)<pos:position pos:line="12" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>
<cpp:else pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">else<pos:position pos:line="13" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><name pos:line="14" pos:column="5">prev<pos:position pos:line="14" pos:column="9"/></name> <operator pos:line="14" pos:column="10">=<pos:position pos:line="14" pos:column="11"/></operator> <operator pos:line="14" pos:column="12">*<pos:position pos:line="14" pos:column="13"/></operator><operator pos:line="14" pos:column="13">(<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">void<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">*<pos:position pos:line="14" pos:column="20"/></operator><operator pos:line="14" pos:column="20">*<pos:position pos:line="14" pos:column="21"/></operator><operator pos:line="14" pos:column="21">)<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">mem<pos:position pos:line="14" pos:column="25"/></name></expr>;<pos:position pos:line="14" pos:column="26"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">prev<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">==<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">cmp<pos:position pos:line="15" pos:column="20"/></name></expr>)<pos:position pos:line="15" pos:column="21"/></condition><then pos:line="15" pos:column="21"> <block pos:line="15" pos:column="22">{
        <expr_stmt><expr><operator pos:line="16" pos:column="9">*<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">mem<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <name pos:line="16" pos:column="16">with<pos:position pos:line="16" pos:column="20"/></name></expr>;<pos:position pos:line="16" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="18" pos:column="8">/* APR_HAS_THREADS */</comment>
    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">prev<pos:position pos:line="19" pos:column="16"/></name></expr>;<pos:position pos:line="19" pos:column="17"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
