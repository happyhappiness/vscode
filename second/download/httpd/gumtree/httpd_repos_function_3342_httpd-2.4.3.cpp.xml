<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3342_httpd-2.4.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">ap_push_pool<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">fd_queue_info_t<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type> <name pos:line="1" pos:column="37">queue_info<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">apr_pool_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type> <name pos:line="2" pos:column="50">pool_to_recycle<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="66"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="4" pos:column="5">struct<pos:position pos:line="4" pos:column="11"/></name> <name pos:line="4" pos:column="12">recycled_pool<pos:position pos:line="4" pos:column="25"/></name></name> <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier></type><name pos:line="4" pos:column="27">new_recycle<pos:position pos:line="4" pos:column="38"/></name></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    <comment type="block" pos:line="5" pos:column="5">/* If we have been given a pool to recycle, atomically link
     * it into the queue_info's list of recycled pools
     */</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">pool_to_recycle<pos:position pos:line="8" pos:column="25"/></name></expr>)<pos:position pos:line="8" pos:column="26"/></condition><then pos:line="8" pos:column="26">
        <block type="pseudo"><return pos:line="9" pos:column="9">return;<pos:position pos:line="9" pos:column="16"/></return></block></then></if>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">queue_info<pos:position pos:line="11" pos:column="19"/></name><operator pos:line="11" pos:column="19">-&gt;<pos:position pos:line="11" pos:column="24"/></operator><name pos:line="11" pos:column="21">max_recycled_pools<pos:position pos:line="11" pos:column="39"/></name></name> <operator pos:line="11" pos:column="40">&gt;=<pos:position pos:line="11" pos:column="45"/></operator> <literal type="number" pos:line="11" pos:column="43">0<pos:position pos:line="11" pos:column="44"/></literal></expr>)<pos:position pos:line="11" pos:column="45"/></condition><then pos:line="11" pos:column="45"> <block pos:line="11" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="12" pos:column="9">apr_uint32_t<pos:position pos:line="12" pos:column="21"/></name></type> <name pos:line="12" pos:column="22">cnt<pos:position pos:line="12" pos:column="25"/></name> <init pos:line="12" pos:column="26">= <expr><call><name pos:line="12" pos:column="28">apr_atomic_read32<pos:position pos:line="12" pos:column="45"/></name><argument_list pos:line="12" pos:column="45">(<argument><expr><operator pos:line="12" pos:column="46">&amp;<pos:position pos:line="12" pos:column="51"/></operator><name><name pos:line="12" pos:column="47">queue_info<pos:position pos:line="12" pos:column="57"/></name><operator pos:line="12" pos:column="57">-&gt;<pos:position pos:line="12" pos:column="62"/></operator><name pos:line="12" pos:column="59">recycled_pools_count<pos:position pos:line="12" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="12" pos:column="81"/></decl_stmt>
        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">cnt<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">&gt;=<pos:position pos:line="13" pos:column="22"/></operator> <name><name pos:line="13" pos:column="20">queue_info<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">-&gt;<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="32">max_recycled_pools<pos:position pos:line="13" pos:column="50"/></name></name></expr>)<pos:position pos:line="13" pos:column="51"/></condition><then pos:line="13" pos:column="51"> <block pos:line="13" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">apr_pool_destroy<pos:position pos:line="14" pos:column="29"/></name><argument_list pos:line="14" pos:column="29">(<argument><expr><name pos:line="14" pos:column="30">pool_to_recycle<pos:position pos:line="14" pos:column="45"/></name></expr></argument>)<pos:position pos:line="14" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="47"/></expr_stmt>
            <return pos:line="15" pos:column="13">return;<pos:position pos:line="15" pos:column="20"/></return>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">apr_atomic_inc32<pos:position pos:line="17" pos:column="25"/></name><argument_list pos:line="17" pos:column="25">(<argument><expr><operator pos:line="17" pos:column="26">&amp;<pos:position pos:line="17" pos:column="31"/></operator><name><name pos:line="17" pos:column="27">queue_info<pos:position pos:line="17" pos:column="37"/></name><operator pos:line="17" pos:column="37">-&gt;<pos:position pos:line="17" pos:column="42"/></operator><name pos:line="17" pos:column="39">recycled_pools_count<pos:position pos:line="17" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="20" pos:column="5">new_recycle<pos:position pos:line="20" pos:column="16"/></name> <operator pos:line="20" pos:column="17">=<pos:position pos:line="20" pos:column="18"/></operator> <operator pos:line="20" pos:column="19">(<pos:position pos:line="20" pos:column="20"/></operator>struct <name pos:line="20" pos:column="27">recycled_pool<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">*<pos:position pos:line="20" pos:column="42"/></operator><operator pos:line="20" pos:column="42">)<pos:position pos:line="20" pos:column="43"/></operator> <call><name pos:line="20" pos:column="44">apr_palloc<pos:position pos:line="20" pos:column="54"/></name><argument_list pos:line="20" pos:column="54">(<argument><expr><name pos:line="20" pos:column="55">pool_to_recycle<pos:position pos:line="20" pos:column="70"/></name></expr></argument>,
                                                      <argument><expr><sizeof pos:line="21" pos:column="55">sizeof <argument_list pos:line="21" pos:column="62">(<argument><expr><operator pos:line="21" pos:column="63">*<pos:position pos:line="21" pos:column="64"/></operator><name pos:line="21" pos:column="64">new_recycle<pos:position pos:line="21" pos:column="75"/></name></expr></argument>)<pos:position pos:line="21" pos:column="76"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="78"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="22" pos:column="5">new_recycle<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">-&gt;<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="18">pool<pos:position pos:line="22" pos:column="22"/></name></name> <operator pos:line="22" pos:column="23">=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">pool_to_recycle<pos:position pos:line="22" pos:column="40"/></name></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
    <for pos:line="23" pos:column="5">for <control pos:line="23" pos:column="9">(<init pos:line="23" pos:column="10">;<pos:position pos:line="23" pos:column="11"/></init><condition pos:line="23" pos:column="11">;<pos:position pos:line="23" pos:column="12"/></condition><incr/>)<pos:position pos:line="23" pos:column="13"/></control> <block pos:line="23" pos:column="14">{
        <comment type="block" pos:line="24" pos:column="9">/*
         * Save queue_info-&gt;recycled_pool in local variable next because
         * new_recycle-&gt;next can be changed after apr_atomic_casptr
         * function call. For gory details see PR 44402.
         */</comment>
        <decl_stmt><decl><type><name><name pos:line="29" pos:column="9">struct<pos:position pos:line="29" pos:column="15"/></name> <name pos:line="29" pos:column="16">recycled_pool<pos:position pos:line="29" pos:column="29"/></name></name> <modifier pos:line="29" pos:column="30">*<pos:position pos:line="29" pos:column="31"/></modifier></type><name pos:line="29" pos:column="31">next<pos:position pos:line="29" pos:column="35"/></name> <init pos:line="29" pos:column="36">= <expr><name><name pos:line="29" pos:column="38">queue_info<pos:position pos:line="29" pos:column="48"/></name><operator pos:line="29" pos:column="48">-&gt;<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="50">recycled_pools<pos:position pos:line="29" pos:column="64"/></name></name></expr></init></decl>;<pos:position pos:line="29" pos:column="65"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">new_recycle<pos:position pos:line="30" pos:column="20"/></name><operator pos:line="30" pos:column="20">-&gt;<pos:position pos:line="30" pos:column="25"/></operator><name pos:line="30" pos:column="22">next<pos:position pos:line="30" pos:column="26"/></name></name> <operator pos:line="30" pos:column="27">=<pos:position pos:line="30" pos:column="28"/></operator> <name pos:line="30" pos:column="29">next<pos:position pos:line="30" pos:column="33"/></name></expr>;<pos:position pos:line="30" pos:column="34"/></expr_stmt>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><call><name pos:line="31" pos:column="13">apr_atomic_casptr<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><operator pos:line="31" pos:column="31">(<pos:position pos:line="31" pos:column="32"/></operator><name pos:line="31" pos:column="32">void<pos:position pos:line="31" pos:column="36"/></name><operator pos:line="31" pos:column="36">*<pos:position pos:line="31" pos:column="37"/></operator><operator pos:line="31" pos:column="37">)<pos:position pos:line="31" pos:column="38"/></operator> <operator pos:line="31" pos:column="39">&amp;<pos:position pos:line="31" pos:column="44"/></operator><operator pos:line="31" pos:column="40">(<pos:position pos:line="31" pos:column="41"/></operator><name><name pos:line="31" pos:column="41">queue_info<pos:position pos:line="31" pos:column="51"/></name><operator pos:line="31" pos:column="51">-&gt;<pos:position pos:line="31" pos:column="56"/></operator><name pos:line="31" pos:column="53">recycled_pools<pos:position pos:line="31" pos:column="67"/></name></name><operator pos:line="31" pos:column="67">)<pos:position pos:line="31" pos:column="68"/></operator></expr></argument>,
                              <argument><expr><name pos:line="32" pos:column="31">new_recycle<pos:position pos:line="32" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="44">next<pos:position pos:line="32" pos:column="48"/></name></expr></argument>)<pos:position pos:line="32" pos:column="49"/></argument_list></call> <operator pos:line="32" pos:column="50">==<pos:position pos:line="32" pos:column="52"/></operator> <name pos:line="32" pos:column="53">next<pos:position pos:line="32" pos:column="57"/></name></expr>)<pos:position pos:line="32" pos:column="58"/></condition><then pos:line="32" pos:column="58">
            <block type="pseudo"><break pos:line="33" pos:column="13">break;<pos:position pos:line="33" pos:column="19"/></break></block></then></if>
    }<pos:position pos:line="34" pos:column="6"/></block></for>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
