<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3122_httpd-2.2.2.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">proc_mutex_proc_pthread_create<pos:position pos:line="1" pos:column="51"/></name><parameter_list pos:line="1" pos:column="51">(<parameter><decl><type><name pos:line="1" pos:column="52">apr_proc_mutex_t<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">new_mutex<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>,
                                                   <parameter><decl><type><specifier pos:line="2" pos:column="52">const<pos:position pos:line="2" pos:column="57"/></specifier> <name pos:line="2" pos:column="58">char<pos:position pos:line="2" pos:column="62"/></name> <modifier pos:line="2" pos:column="63">*<pos:position pos:line="2" pos:column="64"/></modifier></type><name pos:line="2" pos:column="64">fname<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">fd<pos:position pos:line="5" pos:column="11"/></name></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">pthread_mutexattr_t<pos:position pos:line="6" pos:column="24"/></name></type> <name pos:line="6" pos:column="25">mattr<pos:position pos:line="6" pos:column="30"/></name></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">fd<pos:position pos:line="8" pos:column="7"/></name> <operator pos:line="8" pos:column="8">=<pos:position pos:line="8" pos:column="9"/></operator> <call><name pos:line="8" pos:column="10">open<pos:position pos:line="8" pos:column="14"/></name><argument_list pos:line="8" pos:column="14">(<argument><expr><literal type="string" pos:line="8" pos:column="15">"/dev/zero"<pos:position pos:line="8" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">O_RDWR<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="36"/></expr_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">fd<pos:position pos:line="9" pos:column="11"/></name> <operator pos:line="9" pos:column="12">&lt;<pos:position pos:line="9" pos:column="16"/></operator> <literal type="number" pos:line="9" pos:column="14">0<pos:position pos:line="9" pos:column="15"/></literal></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16"> <block pos:line="9" pos:column="17">{
        <return pos:line="10" pos:column="9">return <expr><name pos:line="10" pos:column="16">errno<pos:position pos:line="10" pos:column="21"/></name></expr>;<pos:position pos:line="10" pos:column="22"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="13" pos:column="5">new_mutex<pos:position pos:line="13" pos:column="14"/></name><operator pos:line="13" pos:column="14">-&gt;<pos:position pos:line="13" pos:column="19"/></operator><name pos:line="13" pos:column="16">pthread_interproc<pos:position pos:line="13" pos:column="33"/></name></name> <operator pos:line="13" pos:column="34">=<pos:position pos:line="13" pos:column="35"/></operator> <operator pos:line="13" pos:column="36">(<pos:position pos:line="13" pos:column="37"/></operator><name pos:line="13" pos:column="37">pthread_mutex_t<pos:position pos:line="13" pos:column="52"/></name> <operator pos:line="13" pos:column="53">*<pos:position pos:line="13" pos:column="54"/></operator><operator pos:line="13" pos:column="54">)<pos:position pos:line="13" pos:column="55"/></operator><call><name pos:line="13" pos:column="55">mmap<pos:position pos:line="13" pos:column="59"/></name><argument_list pos:line="13" pos:column="59">(
                                       <argument><expr><operator pos:line="14" pos:column="40">(<pos:position pos:line="14" pos:column="41"/></operator><name pos:line="14" pos:column="41">caddr_t<pos:position pos:line="14" pos:column="48"/></name><operator pos:line="14" pos:column="48">)<pos:position pos:line="14" pos:column="49"/></operator> <literal type="number" pos:line="14" pos:column="50">0<pos:position pos:line="14" pos:column="51"/></literal></expr></argument>, 
                                       <argument><expr><sizeof pos:line="15" pos:column="40">sizeof<argument_list pos:line="15" pos:column="46">(<argument><expr><name pos:line="15" pos:column="47">pthread_mutex_t<pos:position pos:line="15" pos:column="62"/></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></sizeof></expr></argument>, 
                                       <argument><expr><name pos:line="16" pos:column="40">PROT_READ<pos:position pos:line="16" pos:column="49"/></name> <operator pos:line="16" pos:column="50">|<pos:position pos:line="16" pos:column="51"/></operator> <name pos:line="16" pos:column="52">PROT_WRITE<pos:position pos:line="16" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="64">MAP_SHARED<pos:position pos:line="16" pos:column="74"/></name></expr></argument>,
                                       <argument><expr><name pos:line="17" pos:column="40">fd<pos:position pos:line="17" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="44">0<pos:position pos:line="17" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="47"/></expr_stmt> 
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><name><name pos:line="18" pos:column="9">new_mutex<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">pthread_interproc<pos:position pos:line="18" pos:column="37"/></name></name> <operator pos:line="18" pos:column="38">==<pos:position pos:line="18" pos:column="40"/></operator> <operator pos:line="18" pos:column="41">(<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="42">pthread_mutex_t<pos:position pos:line="18" pos:column="57"/></name> <operator pos:line="18" pos:column="58">*<pos:position pos:line="18" pos:column="59"/></operator><operator pos:line="18" pos:column="59">)<pos:position pos:line="18" pos:column="60"/></operator> <operator pos:line="18" pos:column="61">(<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="62">caddr_t<pos:position pos:line="18" pos:column="69"/></name><operator pos:line="18" pos:column="69">)<pos:position pos:line="18" pos:column="70"/></operator> <operator pos:line="18" pos:column="71">-<pos:position pos:line="18" pos:column="72"/></operator><literal type="number" pos:line="18" pos:column="72">1<pos:position pos:line="18" pos:column="73"/></literal></expr>)<pos:position pos:line="18" pos:column="74"/></condition><then pos:line="18" pos:column="74"> <block pos:line="18" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">close<pos:position pos:line="19" pos:column="14"/></name><argument_list pos:line="19" pos:column="14">(<argument><expr><name pos:line="19" pos:column="15">fd<pos:position pos:line="19" pos:column="17"/></name></expr></argument>)<pos:position pos:line="19" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="19"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">errno<pos:position pos:line="20" pos:column="21"/></name></expr>;<pos:position pos:line="20" pos:column="22"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">close<pos:position pos:line="22" pos:column="10"/></name><argument_list pos:line="22" pos:column="10">(<argument><expr><name pos:line="22" pos:column="11">fd<pos:position pos:line="22" pos:column="13"/></name></expr></argument>)<pos:position pos:line="22" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="15"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="24" pos:column="5">new_mutex<pos:position pos:line="24" pos:column="14"/></name><operator pos:line="24" pos:column="14">-&gt;<pos:position pos:line="24" pos:column="19"/></operator><name pos:line="24" pos:column="16">curr_locked<pos:position pos:line="24" pos:column="27"/></name></name> <operator pos:line="24" pos:column="28">=<pos:position pos:line="24" pos:column="29"/></operator> <operator pos:line="24" pos:column="30">-<pos:position pos:line="24" pos:column="31"/></operator><literal type="number" pos:line="24" pos:column="31">1<pos:position pos:line="24" pos:column="32"/></literal></expr>;<pos:position pos:line="24" pos:column="33"/></expr_stmt> <comment type="block" pos:line="24" pos:column="34">/* until the mutex has been created */</comment>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">(<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">rv<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">pthread_mutexattr_init<pos:position pos:line="26" pos:column="37"/></name><argument_list pos:line="26" pos:column="37">(<argument><expr><operator pos:line="26" pos:column="38">&amp;<pos:position pos:line="26" pos:column="43"/></operator><name pos:line="26" pos:column="39">mattr<pos:position pos:line="26" pos:column="44"/></name></expr></argument>)<pos:position pos:line="26" pos:column="45"/></argument_list></call><operator pos:line="26" pos:column="45">)<pos:position pos:line="26" pos:column="46"/></operator></expr>)<pos:position pos:line="26" pos:column="47"/></condition><then pos:line="26" pos:column="47"> <block pos:line="26" pos:column="48">{
<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">PTHREAD_SETS_ERRNO<pos:position pos:line="27" pos:column="26"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="28" pos:column="9">rv<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <name pos:line="28" pos:column="14">errno<pos:position pos:line="28" pos:column="19"/></name></expr>;<pos:position pos:line="28" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">proc_mutex_proc_pthread_cleanup<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name pos:line="30" pos:column="41">new_mutex<pos:position pos:line="30" pos:column="50"/></name></expr></argument>)<pos:position pos:line="30" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="52"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">rv<pos:position pos:line="31" pos:column="18"/></name></expr>;<pos:position pos:line="31" pos:column="19"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><operator pos:line="33" pos:column="9">(<pos:position pos:line="33" pos:column="10"/></operator><name pos:line="33" pos:column="10">rv<pos:position pos:line="33" pos:column="12"/></name> <operator pos:line="33" pos:column="13">=<pos:position pos:line="33" pos:column="14"/></operator> <call><name pos:line="33" pos:column="15">pthread_mutexattr_setpshared<pos:position pos:line="33" pos:column="43"/></name><argument_list pos:line="33" pos:column="43">(<argument><expr><operator pos:line="33" pos:column="44">&amp;<pos:position pos:line="33" pos:column="49"/></operator><name pos:line="33" pos:column="45">mattr<pos:position pos:line="33" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="52">PTHREAD_PROCESS_SHARED<pos:position pos:line="33" pos:column="74"/></name></expr></argument>)<pos:position pos:line="33" pos:column="75"/></argument_list></call><operator pos:line="33" pos:column="75">)<pos:position pos:line="33" pos:column="76"/></operator></expr>)<pos:position pos:line="33" pos:column="77"/></condition><then pos:line="33" pos:column="77"> <block pos:line="33" pos:column="78">{
<cpp:ifdef pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">ifdef<pos:position pos:line="34" pos:column="7"/></cpp:directive> <name pos:line="34" pos:column="8">PTHREAD_SETS_ERRNO<pos:position pos:line="34" pos:column="26"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="35" pos:column="9">rv<pos:position pos:line="35" pos:column="11"/></name> <operator pos:line="35" pos:column="12">=<pos:position pos:line="35" pos:column="13"/></operator> <name pos:line="35" pos:column="14">errno<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="36" pos:column="1">#<cpp:directive pos:line="36" pos:column="2">endif<pos:position pos:line="36" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="37" pos:column="9">proc_mutex_proc_pthread_cleanup<pos:position pos:line="37" pos:column="40"/></name><argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">new_mutex<pos:position pos:line="37" pos:column="50"/></name></expr></argument>)<pos:position pos:line="37" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">pthread_mutexattr_destroy<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><operator pos:line="38" pos:column="35">&amp;<pos:position pos:line="38" pos:column="40"/></operator><name pos:line="38" pos:column="36">mattr<pos:position pos:line="38" pos:column="41"/></name></expr></argument>)<pos:position pos:line="38" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
        <return pos:line="39" pos:column="9">return <expr><name pos:line="39" pos:column="16">rv<pos:position pos:line="39" pos:column="18"/></name></expr>;<pos:position pos:line="39" pos:column="19"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">HAVE_PTHREAD_MUTEX_ROBUST<pos:position pos:line="42" pos:column="33"/></name></cpp:ifdef>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><operator pos:line="43" pos:column="9">(<pos:position pos:line="43" pos:column="10"/></operator><name pos:line="43" pos:column="10">rv<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <call><name pos:line="43" pos:column="15">pthread_mutexattr_setrobust_np<pos:position pos:line="43" pos:column="45"/></name><argument_list pos:line="43" pos:column="45">(<argument><expr><operator pos:line="43" pos:column="46">&amp;<pos:position pos:line="43" pos:column="51"/></operator><name pos:line="43" pos:column="47">mattr<pos:position pos:line="43" pos:column="52"/></name></expr></argument>, 
                                               <argument><expr><name pos:line="44" pos:column="48">PTHREAD_MUTEX_ROBUST_NP<pos:position pos:line="44" pos:column="71"/></name></expr></argument>)<pos:position pos:line="44" pos:column="72"/></argument_list></call><operator pos:line="44" pos:column="72">)<pos:position pos:line="44" pos:column="73"/></operator></expr>)<pos:position pos:line="44" pos:column="74"/></condition><then pos:line="44" pos:column="74"> <block pos:line="44" pos:column="75">{
<cpp:ifdef pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">ifdef<pos:position pos:line="45" pos:column="7"/></cpp:directive> <name pos:line="45" pos:column="8">PTHREAD_SETS_ERRNO<pos:position pos:line="45" pos:column="26"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="46" pos:column="9">rv<pos:position pos:line="46" pos:column="11"/></name> <operator pos:line="46" pos:column="12">=<pos:position pos:line="46" pos:column="13"/></operator> <name pos:line="46" pos:column="14">errno<pos:position pos:line="46" pos:column="19"/></name></expr>;<pos:position pos:line="46" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">proc_mutex_proc_pthread_cleanup<pos:position pos:line="48" pos:column="40"/></name><argument_list pos:line="48" pos:column="40">(<argument><expr><name pos:line="48" pos:column="41">new_mutex<pos:position pos:line="48" pos:column="50"/></name></expr></argument>)<pos:position pos:line="48" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="49" pos:column="9">pthread_mutexattr_destroy<pos:position pos:line="49" pos:column="34"/></name><argument_list pos:line="49" pos:column="34">(<argument><expr><operator pos:line="49" pos:column="35">&amp;<pos:position pos:line="49" pos:column="40"/></operator><name pos:line="49" pos:column="36">mattr<pos:position pos:line="49" pos:column="41"/></name></expr></argument>)<pos:position pos:line="49" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="43"/></expr_stmt>
        <return pos:line="50" pos:column="9">return <expr><name pos:line="50" pos:column="16">rv<pos:position pos:line="50" pos:column="18"/></name></expr>;<pos:position pos:line="50" pos:column="19"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><operator pos:line="52" pos:column="9">(<pos:position pos:line="52" pos:column="10"/></operator><name pos:line="52" pos:column="10">rv<pos:position pos:line="52" pos:column="12"/></name> <operator pos:line="52" pos:column="13">=<pos:position pos:line="52" pos:column="14"/></operator> <call><name pos:line="52" pos:column="15">pthread_mutexattr_setprotocol<pos:position pos:line="52" pos:column="44"/></name><argument_list pos:line="52" pos:column="44">(<argument><expr><operator pos:line="52" pos:column="45">&amp;<pos:position pos:line="52" pos:column="50"/></operator><name pos:line="52" pos:column="46">mattr<pos:position pos:line="52" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="53">PTHREAD_PRIO_INHERIT<pos:position pos:line="52" pos:column="73"/></name></expr></argument>)<pos:position pos:line="52" pos:column="74"/></argument_list></call><operator pos:line="52" pos:column="74">)<pos:position pos:line="52" pos:column="75"/></operator></expr>)<pos:position pos:line="52" pos:column="76"/></condition><then pos:line="52" pos:column="76"> <block pos:line="52" pos:column="77">{
<cpp:ifdef pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">ifdef<pos:position pos:line="53" pos:column="7"/></cpp:directive> <name pos:line="53" pos:column="8">PTHREAD_SETS_ERRNO<pos:position pos:line="53" pos:column="26"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="54" pos:column="9">rv<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">=<pos:position pos:line="54" pos:column="13"/></operator> <name pos:line="54" pos:column="14">errno<pos:position pos:line="54" pos:column="19"/></name></expr>;<pos:position pos:line="54" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">proc_mutex_proc_pthread_cleanup<pos:position pos:line="56" pos:column="40"/></name><argument_list pos:line="56" pos:column="40">(<argument><expr><name pos:line="56" pos:column="41">new_mutex<pos:position pos:line="56" pos:column="50"/></name></expr></argument>)<pos:position pos:line="56" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">pthread_mutexattr_destroy<pos:position pos:line="57" pos:column="34"/></name><argument_list pos:line="57" pos:column="34">(<argument><expr><operator pos:line="57" pos:column="35">&amp;<pos:position pos:line="57" pos:column="40"/></operator><name pos:line="57" pos:column="36">mattr<pos:position pos:line="57" pos:column="41"/></name></expr></argument>)<pos:position pos:line="57" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="43"/></expr_stmt>
        <return pos:line="58" pos:column="9">return <expr><name pos:line="58" pos:column="16">rv<pos:position pos:line="58" pos:column="18"/></name></expr>;<pos:position pos:line="58" pos:column="19"/></return>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>
<cpp:endif pos:line="60" pos:column="1">#<cpp:directive pos:line="60" pos:column="2">endif<pos:position pos:line="60" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="60" pos:column="8">/* HAVE_PTHREAD_MUTEX_ROBUST */</comment>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><operator pos:line="62" pos:column="9">(<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">rv<pos:position pos:line="62" pos:column="12"/></name> <operator pos:line="62" pos:column="13">=<pos:position pos:line="62" pos:column="14"/></operator> <call><name pos:line="62" pos:column="15">pthread_mutex_init<pos:position pos:line="62" pos:column="33"/></name><argument_list pos:line="62" pos:column="33">(<argument><expr><name><name pos:line="62" pos:column="34">new_mutex<pos:position pos:line="62" pos:column="43"/></name><operator pos:line="62" pos:column="43">-&gt;<pos:position pos:line="62" pos:column="48"/></operator><name pos:line="62" pos:column="45">pthread_interproc<pos:position pos:line="62" pos:column="62"/></name></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="64">&amp;<pos:position pos:line="62" pos:column="69"/></operator><name pos:line="62" pos:column="65">mattr<pos:position pos:line="62" pos:column="70"/></name></expr></argument>)<pos:position pos:line="62" pos:column="71"/></argument_list></call><operator pos:line="62" pos:column="71">)<pos:position pos:line="62" pos:column="72"/></operator></expr>)<pos:position pos:line="62" pos:column="73"/></condition><then pos:line="62" pos:column="73"> <block pos:line="62" pos:column="74">{
<cpp:ifdef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifdef<pos:position pos:line="63" pos:column="7"/></cpp:directive> <name pos:line="63" pos:column="8">PTHREAD_SETS_ERRNO<pos:position pos:line="63" pos:column="26"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="64" pos:column="9">rv<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">=<pos:position pos:line="64" pos:column="13"/></operator> <name pos:line="64" pos:column="14">errno<pos:position pos:line="64" pos:column="19"/></name></expr>;<pos:position pos:line="64" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">endif<pos:position pos:line="65" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">proc_mutex_proc_pthread_cleanup<pos:position pos:line="66" pos:column="40"/></name><argument_list pos:line="66" pos:column="40">(<argument><expr><name pos:line="66" pos:column="41">new_mutex<pos:position pos:line="66" pos:column="50"/></name></expr></argument>)<pos:position pos:line="66" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="67" pos:column="9">pthread_mutexattr_destroy<pos:position pos:line="67" pos:column="34"/></name><argument_list pos:line="67" pos:column="34">(<argument><expr><operator pos:line="67" pos:column="35">&amp;<pos:position pos:line="67" pos:column="40"/></operator><name pos:line="67" pos:column="36">mattr<pos:position pos:line="67" pos:column="41"/></name></expr></argument>)<pos:position pos:line="67" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="43"/></expr_stmt>
        <return pos:line="68" pos:column="9">return <expr><name pos:line="68" pos:column="16">rv<pos:position pos:line="68" pos:column="18"/></name></expr>;<pos:position pos:line="68" pos:column="19"/></return>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="71" pos:column="5">new_mutex<pos:position pos:line="71" pos:column="14"/></name><operator pos:line="71" pos:column="14">-&gt;<pos:position pos:line="71" pos:column="19"/></operator><name pos:line="71" pos:column="16">curr_locked<pos:position pos:line="71" pos:column="27"/></name></name> <operator pos:line="71" pos:column="28">=<pos:position pos:line="71" pos:column="29"/></operator> <literal type="number" pos:line="71" pos:column="30">0<pos:position pos:line="71" pos:column="31"/></literal></expr>;<pos:position pos:line="71" pos:column="32"/></expr_stmt> <comment type="block" pos:line="71" pos:column="33">/* mutex created now */</comment>

    <if pos:line="73" pos:column="5">if <condition pos:line="73" pos:column="8">(<expr><operator pos:line="73" pos:column="9">(<pos:position pos:line="73" pos:column="10"/></operator><name pos:line="73" pos:column="10">rv<pos:position pos:line="73" pos:column="12"/></name> <operator pos:line="73" pos:column="13">=<pos:position pos:line="73" pos:column="14"/></operator> <call><name pos:line="73" pos:column="15">pthread_mutexattr_destroy<pos:position pos:line="73" pos:column="40"/></name><argument_list pos:line="73" pos:column="40">(<argument><expr><operator pos:line="73" pos:column="41">&amp;<pos:position pos:line="73" pos:column="46"/></operator><name pos:line="73" pos:column="42">mattr<pos:position pos:line="73" pos:column="47"/></name></expr></argument>)<pos:position pos:line="73" pos:column="48"/></argument_list></call><operator pos:line="73" pos:column="48">)<pos:position pos:line="73" pos:column="49"/></operator></expr>)<pos:position pos:line="73" pos:column="50"/></condition><then pos:line="73" pos:column="50"> <block pos:line="73" pos:column="51">{
<cpp:ifdef pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">ifdef<pos:position pos:line="74" pos:column="7"/></cpp:directive> <name pos:line="74" pos:column="8">PTHREAD_SETS_ERRNO<pos:position pos:line="74" pos:column="26"/></name></cpp:ifdef>
        <expr_stmt><expr><name pos:line="75" pos:column="9">rv<pos:position pos:line="75" pos:column="11"/></name> <operator pos:line="75" pos:column="12">=<pos:position pos:line="75" pos:column="13"/></operator> <name pos:line="75" pos:column="14">errno<pos:position pos:line="75" pos:column="19"/></name></expr>;<pos:position pos:line="75" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">proc_mutex_proc_pthread_cleanup<pos:position pos:line="77" pos:column="40"/></name><argument_list pos:line="77" pos:column="40">(<argument><expr><name pos:line="77" pos:column="41">new_mutex<pos:position pos:line="77" pos:column="50"/></name></expr></argument>)<pos:position pos:line="77" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="52"/></expr_stmt>
        <return pos:line="78" pos:column="9">return <expr><name pos:line="78" pos:column="16">rv<pos:position pos:line="78" pos:column="18"/></name></expr>;<pos:position pos:line="78" pos:column="19"/></return>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="81" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="81" pos:column="30"/></name><argument_list pos:line="81" pos:column="30">(<argument><expr><name><name pos:line="81" pos:column="31">new_mutex<pos:position pos:line="81" pos:column="40"/></name><operator pos:line="81" pos:column="40">-&gt;<pos:position pos:line="81" pos:column="45"/></operator><name pos:line="81" pos:column="42">pool<pos:position pos:line="81" pos:column="46"/></name></name></expr></argument>,
                              <argument><expr><operator pos:line="82" pos:column="31">(<pos:position pos:line="82" pos:column="32"/></operator><name pos:line="82" pos:column="32">void<pos:position pos:line="82" pos:column="36"/></name> <operator pos:line="82" pos:column="37">*<pos:position pos:line="82" pos:column="38"/></operator><operator pos:line="82" pos:column="38">)<pos:position pos:line="82" pos:column="39"/></operator><name pos:line="82" pos:column="39">new_mutex<pos:position pos:line="82" pos:column="48"/></name></expr></argument>,
                              <argument><expr><name pos:line="83" pos:column="31">apr_proc_mutex_cleanup<pos:position pos:line="83" pos:column="53"/></name></expr></argument>, 
                              <argument><expr><name pos:line="84" pos:column="31">apr_pool_cleanup_null<pos:position pos:line="84" pos:column="52"/></name></expr></argument>)<pos:position pos:line="84" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="54"/></expr_stmt>
    <return pos:line="85" pos:column="5">return <expr><name pos:line="85" pos:column="12">APR_SUCCESS<pos:position pos:line="85" pos:column="23"/></name></expr>;<pos:position pos:line="85" pos:column="24"/></return>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
