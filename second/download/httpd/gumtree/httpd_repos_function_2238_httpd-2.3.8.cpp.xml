<function xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position"><specifier pos:line="235" pos:column="1">static<pos:position pos:line="235" pos:column="7"/></specifier> <type><name pos:line="235" pos:column="8">int<pos:position pos:line="235" pos:column="11"/></name></type> <name pos:line="235" pos:column="12">exipc_handler<pos:position pos:line="235" pos:column="25"/></name><parameter_list pos:line="235" pos:column="25">(<parameter><decl><type><name pos:line="235" pos:column="26">request_rec<pos:position pos:line="235" pos:column="37"/></name> <modifier pos:line="235" pos:column="38">*<pos:position pos:line="235" pos:column="39"/></modifier></type><name pos:line="235" pos:column="39">r<pos:position pos:line="235" pos:column="40"/></name></decl></parameter>)<pos:position pos:line="235" pos:column="41"/></parameter_list>
<block pos:line="236" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="237" pos:column="5">int<pos:position pos:line="237" pos:column="8"/></name></type> <name pos:line="237" pos:column="9">gotlock<pos:position pos:line="237" pos:column="16"/></name> <init pos:line="237" pos:column="17">= <expr><literal type="number" pos:line="237" pos:column="19">0<pos:position pos:line="237" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="237" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="238" pos:column="5">int<pos:position pos:line="238" pos:column="8"/></name></type> <name pos:line="238" pos:column="9">camped<pos:position pos:line="238" pos:column="15"/></name></decl>;<pos:position pos:line="238" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="239" pos:column="5">apr_time_t<pos:position pos:line="239" pos:column="15"/></name></type> <name pos:line="239" pos:column="16">startcamp<pos:position pos:line="239" pos:column="25"/></name></decl>;<pos:position pos:line="239" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="240" pos:column="5">apr_int64_t<pos:position pos:line="240" pos:column="16"/></name></type> <name pos:line="240" pos:column="17">timecamped<pos:position pos:line="240" pos:column="27"/></name></decl>;<pos:position pos:line="240" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="241" pos:column="5">apr_status_t<pos:position pos:line="241" pos:column="17"/></name></type> <name pos:line="241" pos:column="18">rs<pos:position pos:line="241" pos:column="20"/></name></decl>;<pos:position pos:line="241" pos:column="21"/></decl_stmt> 
    <decl_stmt><decl><type><name pos:line="242" pos:column="5">exipc_data<pos:position pos:line="242" pos:column="15"/></name> <modifier pos:line="242" pos:column="16">*<pos:position pos:line="242" pos:column="17"/></modifier></type><name pos:line="242" pos:column="17">base<pos:position pos:line="242" pos:column="21"/></name></decl>;<pos:position pos:line="242" pos:column="22"/></decl_stmt>
    
    <if pos:line="244" pos:column="5">if <condition pos:line="244" pos:column="8">(<expr><call><name pos:line="244" pos:column="9">strcmp<pos:position pos:line="244" pos:column="15"/></name><argument_list pos:line="244" pos:column="15">(<argument><expr><name><name pos:line="244" pos:column="16">r<pos:position pos:line="244" pos:column="17"/></name><operator pos:line="244" pos:column="17">-&gt;<pos:position pos:line="244" pos:column="22"/></operator><name pos:line="244" pos:column="19">handler<pos:position pos:line="244" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="244" pos:column="28">"example_ipc"<pos:position pos:line="244" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="244" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="244" pos:column="43"/></condition><then pos:line="244" pos:column="43"> <block pos:line="244" pos:column="44">{
        <return pos:line="245" pos:column="9">return <expr><name pos:line="245" pos:column="16">DECLINED<pos:position pos:line="245" pos:column="24"/></name></expr>;<pos:position pos:line="245" pos:column="25"/></return>
    }<pos:position pos:line="246" pos:column="6"/></block></then></if>
    
    <comment type="block" pos:line="248" pos:column="5">/* 
     * The main function of the handler, aside from sending the 
     * status page to the client, is to increment the counter in 
     * the shared memory segment. This action needs to be mutexed 
     * out using the global mutex. 
     */</comment>
     
    <comment type="block" pos:line="255" pos:column="5">/* 
     * First, acquire the lock. This code is a lot more involved than
     * it usually needs to be, because the process based trylock
     * routine is not implemented on unix platforms. I left it in to
     * show how it would work if trylock worked, and for situations
     * and platforms where trylock works.
     */</comment>
    <for pos:line="262" pos:column="5">for <control pos:line="262" pos:column="9">(<init><expr><name pos:line="262" pos:column="10">camped<pos:position pos:line="262" pos:column="16"/></name> <operator pos:line="262" pos:column="17">=<pos:position pos:line="262" pos:column="18"/></operator> <literal type="number" pos:line="262" pos:column="19">0<pos:position pos:line="262" pos:column="20"/></literal></expr><operator pos:line="262" pos:column="20">,<pos:position pos:line="262" pos:column="21"/></operator> <expr><name pos:line="262" pos:column="22">timecamped<pos:position pos:line="262" pos:column="32"/></name> <operator pos:line="262" pos:column="33">=<pos:position pos:line="262" pos:column="34"/></operator> <literal type="number" pos:line="262" pos:column="35">0<pos:position pos:line="262" pos:column="36"/></literal></expr>;<pos:position pos:line="262" pos:column="37"/></init> <condition><expr><name pos:line="262" pos:column="38">camped<pos:position pos:line="262" pos:column="44"/></name> <operator pos:line="262" pos:column="45">&lt;<pos:position pos:line="262" pos:column="49"/></operator> <name pos:line="262" pos:column="47">MAXCAMP<pos:position pos:line="262" pos:column="54"/></name></expr>;<pos:position pos:line="262" pos:column="55"/></condition> <incr><expr><name pos:line="262" pos:column="56">camped<pos:position pos:line="262" pos:column="62"/></name><operator pos:line="262" pos:column="62">++<pos:position pos:line="262" pos:column="64"/></operator></expr></incr>)<pos:position pos:line="262" pos:column="65"/></control> <block pos:line="262" pos:column="66">{
        <expr_stmt><expr><name pos:line="263" pos:column="9">rs<pos:position pos:line="263" pos:column="11"/></name> <operator pos:line="263" pos:column="12">=<pos:position pos:line="263" pos:column="13"/></operator> <call><name pos:line="263" pos:column="14">apr_global_mutex_trylock<pos:position pos:line="263" pos:column="38"/></name><argument_list pos:line="263" pos:column="38">(<argument><expr><name pos:line="263" pos:column="39">exipc_mutex<pos:position pos:line="263" pos:column="50"/></name></expr></argument>)<pos:position pos:line="263" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="263" pos:column="52"/></expr_stmt> 
        <if pos:line="264" pos:column="9">if <condition pos:line="264" pos:column="12">(<expr><call><name pos:line="264" pos:column="13">APR_STATUS_IS_EBUSY<pos:position pos:line="264" pos:column="32"/></name><argument_list pos:line="264" pos:column="32">(<argument><expr><name pos:line="264" pos:column="33">rs<pos:position pos:line="264" pos:column="35"/></name></expr></argument>)<pos:position pos:line="264" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="264" pos:column="37"/></condition><then pos:line="264" pos:column="37"> <block pos:line="264" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="265" pos:column="13">apr_sleep<pos:position pos:line="265" pos:column="22"/></name><argument_list pos:line="265" pos:column="22">(<argument><expr><name pos:line="265" pos:column="23">CAMPOUT<pos:position pos:line="265" pos:column="30"/></name></expr></argument>)<pos:position pos:line="265" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="265" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="266" pos:column="10"/></block></then> <elseif pos:line="266" pos:column="11">else <if pos:line="266" pos:column="16">if <condition pos:line="266" pos:column="19">(<expr><name pos:line="266" pos:column="20">APR_SUCCESS<pos:position pos:line="266" pos:column="31"/></name> <operator pos:line="266" pos:column="32">==<pos:position pos:line="266" pos:column="34"/></operator> <name pos:line="266" pos:column="35">rs<pos:position pos:line="266" pos:column="37"/></name></expr>)<pos:position pos:line="266" pos:column="38"/></condition><then pos:line="266" pos:column="38"> <block pos:line="266" pos:column="39">{
            <expr_stmt><expr><name pos:line="267" pos:column="13">gotlock<pos:position pos:line="267" pos:column="20"/></name> <operator pos:line="267" pos:column="21">=<pos:position pos:line="267" pos:column="22"/></operator> <literal type="number" pos:line="267" pos:column="23">1<pos:position pos:line="267" pos:column="24"/></literal></expr>;<pos:position pos:line="267" pos:column="25"/></expr_stmt> 
            <break pos:line="268" pos:column="13">break;<pos:position pos:line="268" pos:column="19"/></break> <comment type="block" pos:line="268" pos:column="20">/* Get out of the loop */</comment>
        }<pos:position pos:line="269" pos:column="10"/></block></then></if></elseif> <elseif pos:line="269" pos:column="11">else <if pos:line="269" pos:column="16">if <condition pos:line="269" pos:column="19">(<expr><call><name pos:line="269" pos:column="20">APR_STATUS_IS_ENOTIMPL<pos:position pos:line="269" pos:column="42"/></name><argument_list pos:line="269" pos:column="42">(<argument><expr><name pos:line="269" pos:column="43">rs<pos:position pos:line="269" pos:column="45"/></name></expr></argument>)<pos:position pos:line="269" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="269" pos:column="47"/></condition><then pos:line="269" pos:column="47"> <block pos:line="269" pos:column="48">{
            <comment type="block" pos:line="270" pos:column="13">/* If it's not implemented, just hang in the mutex. */</comment>
            <expr_stmt><expr><name pos:line="271" pos:column="13">startcamp<pos:position pos:line="271" pos:column="22"/></name> <operator pos:line="271" pos:column="23">=<pos:position pos:line="271" pos:column="24"/></operator> <call><name pos:line="271" pos:column="25">apr_time_now<pos:position pos:line="271" pos:column="37"/></name><argument_list pos:line="271" pos:column="37">()<pos:position pos:line="271" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="271" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="272" pos:column="13">rs<pos:position pos:line="272" pos:column="15"/></name> <operator pos:line="272" pos:column="16">=<pos:position pos:line="272" pos:column="17"/></operator> <call><name pos:line="272" pos:column="18">apr_global_mutex_lock<pos:position pos:line="272" pos:column="39"/></name><argument_list pos:line="272" pos:column="39">(<argument><expr><name pos:line="272" pos:column="40">exipc_mutex<pos:position pos:line="272" pos:column="51"/></name></expr></argument>)<pos:position pos:line="272" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><name pos:line="273" pos:column="13">timecamped<pos:position pos:line="273" pos:column="23"/></name> <operator pos:line="273" pos:column="24">=<pos:position pos:line="273" pos:column="25"/></operator> <call pos:line="273" pos:column="26">(<name pos:line="273" pos:column="27">apr_int64_t<pos:position pos:line="273" pos:column="38"/></name>) <argument_list pos:line="273" pos:column="40">(<argument><expr><call><name pos:line="273" pos:column="41">apr_time_now<pos:position pos:line="273" pos:column="53"/></name><argument_list pos:line="273" pos:column="53">()<pos:position pos:line="273" pos:column="55"/></argument_list></call> <operator pos:line="273" pos:column="56">-<pos:position pos:line="273" pos:column="57"/></operator> <name pos:line="273" pos:column="58">startcamp<pos:position pos:line="273" pos:column="67"/></name></expr></argument>)<pos:position pos:line="273" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="69"/></expr_stmt>
            <if pos:line="274" pos:column="13">if <condition pos:line="274" pos:column="16">(<expr><name pos:line="274" pos:column="17">APR_SUCCESS<pos:position pos:line="274" pos:column="28"/></name> <operator pos:line="274" pos:column="29">==<pos:position pos:line="274" pos:column="31"/></operator> <name pos:line="274" pos:column="32">rs<pos:position pos:line="274" pos:column="34"/></name></expr>)<pos:position pos:line="274" pos:column="35"/></condition><then pos:line="274" pos:column="35"> <block pos:line="274" pos:column="36">{
                <expr_stmt><expr><name pos:line="275" pos:column="17">gotlock<pos:position pos:line="275" pos:column="24"/></name> <operator pos:line="275" pos:column="25">=<pos:position pos:line="275" pos:column="26"/></operator> <literal type="number" pos:line="275" pos:column="27">1<pos:position pos:line="275" pos:column="28"/></literal></expr>;<pos:position pos:line="275" pos:column="29"/></expr_stmt>
                <break pos:line="276" pos:column="17">break;<pos:position pos:line="276" pos:column="23"/></break> <comment type="block" pos:line="276" pos:column="24">/* Out of the loop */</comment>
            }<pos:position pos:line="277" pos:column="14"/></block></then> <else pos:line="277" pos:column="15">else <block pos:line="277" pos:column="20">{
                <comment type="block" pos:line="278" pos:column="17">/* Some error, log and bail */</comment>
                <expr_stmt><expr><call><name pos:line="279" pos:column="17">ap_log_error<pos:position pos:line="279" pos:column="29"/></name><argument_list pos:line="279" pos:column="29">(<argument><expr><name pos:line="279" pos:column="30">APLOG_MARK<pos:position pos:line="279" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="279" pos:column="42">APLOG_ERR<pos:position pos:line="279" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="279" pos:column="53">rs<pos:position pos:line="279" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="279" pos:column="57">r<pos:position pos:line="279" pos:column="58"/></name><operator pos:line="279" pos:column="58">-&gt;<pos:position pos:line="279" pos:column="63"/></operator><name pos:line="279" pos:column="60">server<pos:position pos:line="279" pos:column="66"/></name></name></expr></argument>, 
                             <argument><expr><literal type="string" pos:line="280" pos:column="30">"Child %ld failed to acquire lock"<pos:position pos:line="280" pos:column="64"/></literal></expr></argument>, 
                             <argument><expr><operator pos:line="281" pos:column="30">(<pos:position pos:line="281" pos:column="31"/></operator><name pos:line="281" pos:column="31">long<pos:position pos:line="281" pos:column="35"/></name> <name pos:line="281" pos:column="36">int<pos:position pos:line="281" pos:column="39"/></name><operator pos:line="281" pos:column="39">)<pos:position pos:line="281" pos:column="40"/></operator><call><name pos:line="281" pos:column="40">getpid<pos:position pos:line="281" pos:column="46"/></name><argument_list pos:line="281" pos:column="46">()<pos:position pos:line="281" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="281" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="281" pos:column="50"/></expr_stmt>
                <break pos:line="282" pos:column="17">break;<pos:position pos:line="282" pos:column="23"/></break> <comment type="block" pos:line="282" pos:column="24">/* Out of the loop without having the lock */</comment>
            }<pos:position pos:line="283" pos:column="14"/></block></else></if>                
        }<pos:position pos:line="284" pos:column="10"/></block></then></if></elseif> <else pos:line="284" pos:column="11">else <block pos:line="284" pos:column="16">{
            <comment type="block" pos:line="285" pos:column="13">/* Some other error, log and bail */</comment>
            <expr_stmt><expr><call><name pos:line="286" pos:column="13">ap_log_error<pos:position pos:line="286" pos:column="25"/></name><argument_list pos:line="286" pos:column="25">(<argument><expr><name pos:line="286" pos:column="26">APLOG_MARK<pos:position pos:line="286" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="286" pos:column="38">APLOG_ERR<pos:position pos:line="286" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="286" pos:column="49">rs<pos:position pos:line="286" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="286" pos:column="53">r<pos:position pos:line="286" pos:column="54"/></name><operator pos:line="286" pos:column="54">-&gt;<pos:position pos:line="286" pos:column="59"/></operator><name pos:line="286" pos:column="56">server<pos:position pos:line="286" pos:column="62"/></name></name></expr></argument>, 
                         <argument><expr><literal type="string" pos:line="287" pos:column="26">"Child %ld failed to try and acquire lock"<pos:position pos:line="287" pos:column="68"/></literal></expr></argument>, 
                         <argument><expr><operator pos:line="288" pos:column="26">(<pos:position pos:line="288" pos:column="27"/></operator><name pos:line="288" pos:column="27">long<pos:position pos:line="288" pos:column="31"/></name> <name pos:line="288" pos:column="32">int<pos:position pos:line="288" pos:column="35"/></name><operator pos:line="288" pos:column="35">)<pos:position pos:line="288" pos:column="36"/></operator><call><name pos:line="288" pos:column="36">getpid<pos:position pos:line="288" pos:column="42"/></name><argument_list pos:line="288" pos:column="42">()<pos:position pos:line="288" pos:column="44"/></argument_list></call></expr></argument>)<pos:position pos:line="288" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="46"/></expr_stmt>
            <break pos:line="289" pos:column="13">break;<pos:position pos:line="289" pos:column="19"/></break> <comment type="block" pos:line="289" pos:column="20">/* Out of the loop without having the lock */</comment>
            
        }<pos:position pos:line="291" pos:column="10"/></block></else></if>
        <comment type="block" pos:line="292" pos:column="9">/* 
         * The only way to get to this point is if the trylock worked
         * and returned BUSY. So, bump the time and try again
         */</comment>
        <expr_stmt><expr><name pos:line="296" pos:column="9">timecamped<pos:position pos:line="296" pos:column="19"/></name> <operator pos:line="296" pos:column="20">+=<pos:position pos:line="296" pos:column="22"/></operator> <name pos:line="296" pos:column="23">CAMPOUT<pos:position pos:line="296" pos:column="30"/></name></expr>;<pos:position pos:line="296" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="297" pos:column="9">ap_log_error<pos:position pos:line="297" pos:column="21"/></name><argument_list pos:line="297" pos:column="21">(<argument><expr><name pos:line="297" pos:column="22">APLOG_MARK<pos:position pos:line="297" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="297" pos:column="34">APLOG_NOERRNO<pos:position pos:line="297" pos:column="47"/></name> <operator pos:line="297" pos:column="48">|<pos:position pos:line="297" pos:column="49"/></operator> <name pos:line="297" pos:column="50">APLOG_NOTICE<pos:position pos:line="297" pos:column="62"/></name></expr></argument>, 
                     <argument><expr><literal type="number" pos:line="298" pos:column="22">0<pos:position pos:line="298" pos:column="23"/></literal></expr></argument>, <argument><expr><name><name pos:line="298" pos:column="25">r<pos:position pos:line="298" pos:column="26"/></name><operator pos:line="298" pos:column="26">-&gt;<pos:position pos:line="298" pos:column="31"/></operator><name pos:line="298" pos:column="28">server<pos:position pos:line="298" pos:column="34"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="298" pos:column="36">"Child %ld camping out on mutex for %"<pos:position pos:line="298" pos:column="74"/></literal> <name pos:line="298" pos:column="75">APR_INT64_T_FMT<pos:position pos:line="298" pos:column="90"/></name>
                     <literal type="string" pos:line="299" pos:column="22">" microseconds"<pos:position pos:line="299" pos:column="37"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="300" pos:column="22">(<pos:position pos:line="300" pos:column="23"/></operator><name pos:line="300" pos:column="23">long<pos:position pos:line="300" pos:column="27"/></name> <name pos:line="300" pos:column="28">int<pos:position pos:line="300" pos:column="31"/></name><operator pos:line="300" pos:column="31">)<pos:position pos:line="300" pos:column="32"/></operator> <call><name pos:line="300" pos:column="33">getpid<pos:position pos:line="300" pos:column="39"/></name><argument_list pos:line="300" pos:column="39">()<pos:position pos:line="300" pos:column="41"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="300" pos:column="43">timecamped<pos:position pos:line="300" pos:column="53"/></name></expr></argument>)<pos:position pos:line="300" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="301" pos:column="6"/></block></for> <comment type="block" pos:line="301" pos:column="7">/* Lock acquisition loop */</comment>
    
    <comment type="block" pos:line="303" pos:column="5">/* Sleep for a millisecond to make it a little harder for
     * httpd children to acquire the lock. 
     */</comment>
    <expr_stmt><expr><call><name pos:line="306" pos:column="5">apr_sleep<pos:position pos:line="306" pos:column="14"/></name><argument_list pos:line="306" pos:column="14">(<argument><expr><name pos:line="306" pos:column="15">SLEEPYTIME<pos:position pos:line="306" pos:column="25"/></name></expr></argument>)<pos:position pos:line="306" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="306" pos:column="27"/></expr_stmt>
    
    <expr_stmt><expr><name><name pos:line="308" pos:column="5">r<pos:position pos:line="308" pos:column="6"/></name><operator pos:line="308" pos:column="6">-&gt;<pos:position pos:line="308" pos:column="11"/></operator><name pos:line="308" pos:column="8">content_type<pos:position pos:line="308" pos:column="20"/></name></name> <operator pos:line="308" pos:column="21">=<pos:position pos:line="308" pos:column="22"/></operator> <literal type="string" pos:line="308" pos:column="23">"text/html"<pos:position pos:line="308" pos:column="34"/></literal></expr>;<pos:position pos:line="308" pos:column="35"/></expr_stmt>      

    <if pos:line="310" pos:column="5">if <condition pos:line="310" pos:column="8">(<expr><operator pos:line="310" pos:column="9">!<pos:position pos:line="310" pos:column="10"/></operator><name><name pos:line="310" pos:column="10">r<pos:position pos:line="310" pos:column="11"/></name><operator pos:line="310" pos:column="11">-&gt;<pos:position pos:line="310" pos:column="16"/></operator><name pos:line="310" pos:column="13">header_only<pos:position pos:line="310" pos:column="24"/></name></name></expr>)<pos:position pos:line="310" pos:column="25"/></condition><then pos:line="310" pos:column="25"> <block pos:line="310" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="311" pos:column="9">ap_rputs<pos:position pos:line="311" pos:column="17"/></name><argument_list pos:line="311" pos:column="17">(<argument><expr><name pos:line="311" pos:column="18">HTML_HEADER<pos:position pos:line="311" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="311" pos:column="31">r<pos:position pos:line="311" pos:column="32"/></name></expr></argument>)<pos:position pos:line="311" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="311" pos:column="34"/></expr_stmt>
        <if pos:line="312" pos:column="9">if <condition pos:line="312" pos:column="12">(<expr><name pos:line="312" pos:column="13">gotlock<pos:position pos:line="312" pos:column="20"/></name></expr>)<pos:position pos:line="312" pos:column="21"/></condition><then pos:line="312" pos:column="21"> <block pos:line="312" pos:column="22">{
            <comment type="block" pos:line="313" pos:column="13">/* Increment the counter */</comment>
            <expr_stmt><expr><name pos:line="314" pos:column="13">base<pos:position pos:line="314" pos:column="17"/></name> <operator pos:line="314" pos:column="18">=<pos:position pos:line="314" pos:column="19"/></operator> <operator pos:line="314" pos:column="20">(<pos:position pos:line="314" pos:column="21"/></operator><name pos:line="314" pos:column="21">exipc_data<pos:position pos:line="314" pos:column="31"/></name> <operator pos:line="314" pos:column="32">*<pos:position pos:line="314" pos:column="33"/></operator><operator pos:line="314" pos:column="33">)<pos:position pos:line="314" pos:column="34"/></operator><call><name pos:line="314" pos:column="34">apr_shm_baseaddr_get<pos:position pos:line="314" pos:column="54"/></name><argument_list pos:line="314" pos:column="54">(<argument><expr><name pos:line="314" pos:column="55">exipc_shm<pos:position pos:line="314" pos:column="64"/></name></expr></argument>)<pos:position pos:line="314" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="314" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="315" pos:column="13">base<pos:position pos:line="315" pos:column="17"/></name><operator pos:line="315" pos:column="17">-&gt;<pos:position pos:line="315" pos:column="22"/></operator><name pos:line="315" pos:column="19">counter<pos:position pos:line="315" pos:column="26"/></name></name><operator pos:line="315" pos:column="26">++<pos:position pos:line="315" pos:column="28"/></operator></expr>;<pos:position pos:line="315" pos:column="29"/></expr_stmt>
            <comment type="block" pos:line="316" pos:column="13">/* Send a page with our pid and the new value of the counter. */</comment>
            <expr_stmt><expr><call><name pos:line="317" pos:column="13">ap_rprintf<pos:position pos:line="317" pos:column="23"/></name><argument_list pos:line="317" pos:column="23">(<argument><expr><name pos:line="317" pos:column="24">r<pos:position pos:line="317" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="317" pos:column="27">"&lt;p&gt;Lock acquired after %ld microseoncds.&lt;/p&gt;\n"<pos:position pos:line="317" pos:column="87"/></literal></expr></argument>, 
                       <argument><expr><operator pos:line="318" pos:column="24">(<pos:position pos:line="318" pos:column="25"/></operator><name pos:line="318" pos:column="25">long<pos:position pos:line="318" pos:column="29"/></name> <name pos:line="318" pos:column="30">int<pos:position pos:line="318" pos:column="33"/></name><operator pos:line="318" pos:column="33">)<pos:position pos:line="318" pos:column="34"/></operator> <name pos:line="318" pos:column="35">timecamped<pos:position pos:line="318" pos:column="45"/></name></expr></argument>)<pos:position pos:line="318" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="318" pos:column="47"/></expr_stmt> 
            <expr_stmt><expr><call><name pos:line="319" pos:column="13">ap_rputs<pos:position pos:line="319" pos:column="21"/></name><argument_list pos:line="319" pos:column="21">(<argument><expr><literal type="string" pos:line="319" pos:column="22">"&lt;table border=\"1\"&gt;\n"<pos:position pos:line="319" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="319" pos:column="48">r<pos:position pos:line="319" pos:column="49"/></name></expr></argument>)<pos:position pos:line="319" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="319" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="320" pos:column="13">ap_rprintf<pos:position pos:line="320" pos:column="23"/></name><argument_list pos:line="320" pos:column="23">(<argument><expr><name pos:line="320" pos:column="24">r<pos:position pos:line="320" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="320" pos:column="27">"&lt;tr&gt;&lt;td&gt;Child pid:&lt;/td&gt;&lt;td&gt;%d&lt;/td&gt;&lt;/tr&gt;\n"<pos:position pos:line="320" pos:column="106"/></literal></expr></argument>, 
                       <argument><expr><operator pos:line="321" pos:column="24">(<pos:position pos:line="321" pos:column="25"/></operator><name pos:line="321" pos:column="25">int<pos:position pos:line="321" pos:column="28"/></name><operator pos:line="321" pos:column="28">)<pos:position pos:line="321" pos:column="29"/></operator> <call><name pos:line="321" pos:column="30">getpid<pos:position pos:line="321" pos:column="36"/></name><argument_list pos:line="321" pos:column="36">()<pos:position pos:line="321" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="321" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="322" pos:column="13">ap_rprintf<pos:position pos:line="322" pos:column="23"/></name><argument_list pos:line="322" pos:column="23">(<argument><expr><name pos:line="322" pos:column="24">r<pos:position pos:line="322" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="322" pos:column="27">"&lt;tr&gt;&lt;td&gt;Counter:&lt;/td&gt;&lt;td&gt;%u&lt;/td&gt;&lt;/tr&gt;\n"<pos:position pos:line="322" pos:column="104"/></literal></expr></argument>, 
                       <argument><expr><operator pos:line="323" pos:column="24">(<pos:position pos:line="323" pos:column="25"/></operator><name pos:line="323" pos:column="25">unsigned<pos:position pos:line="323" pos:column="33"/></name> <name pos:line="323" pos:column="34">int<pos:position pos:line="323" pos:column="37"/></name><operator pos:line="323" pos:column="37">)<pos:position pos:line="323" pos:column="38"/></operator><name><name pos:line="323" pos:column="38">base<pos:position pos:line="323" pos:column="42"/></name><operator pos:line="323" pos:column="42">-&gt;<pos:position pos:line="323" pos:column="47"/></operator><name pos:line="323" pos:column="44">counter<pos:position pos:line="323" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="323" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="323" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="324" pos:column="13">ap_rputs<pos:position pos:line="324" pos:column="21"/></name><argument_list pos:line="324" pos:column="21">(<argument><expr><literal type="string" pos:line="324" pos:column="22">"&lt;/table&gt;\n"<pos:position pos:line="324" pos:column="40"/></literal></expr></argument>, <argument><expr><name pos:line="324" pos:column="36">r<pos:position pos:line="324" pos:column="37"/></name></expr></argument>)<pos:position pos:line="324" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="325" pos:column="10"/></block></then> <else pos:line="325" pos:column="11">else <block pos:line="325" pos:column="16">{
            <comment type="block" pos:line="326" pos:column="13">/* 
             * Send a page saying that we couldn't get the lock. Don't say
             * what the counter is, because without the lock the value could
             * race. 
             */</comment>
            <expr_stmt><expr><call><name pos:line="331" pos:column="13">ap_rprintf<pos:position pos:line="331" pos:column="23"/></name><argument_list pos:line="331" pos:column="23">(<argument><expr><name pos:line="331" pos:column="24">r<pos:position pos:line="331" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="331" pos:column="27">"&lt;p&gt;Child %d failed to acquire lock "<pos:position pos:line="331" pos:column="70"/></literal>
                       <literal type="string" pos:line="332" pos:column="24">"after camping out for %d microseconds.&lt;/p&gt;\n"<pos:position pos:line="332" pos:column="76"/></literal></expr></argument>, 
                       <argument><expr><operator pos:line="333" pos:column="24">(<pos:position pos:line="333" pos:column="25"/></operator><name pos:line="333" pos:column="25">int<pos:position pos:line="333" pos:column="28"/></name><operator pos:line="333" pos:column="28">)<pos:position pos:line="333" pos:column="29"/></operator> <call><name pos:line="333" pos:column="30">getpid<pos:position pos:line="333" pos:column="36"/></name><argument_list pos:line="333" pos:column="36">()<pos:position pos:line="333" pos:column="38"/></argument_list></call></expr></argument>, <argument><expr><operator pos:line="333" pos:column="40">(<pos:position pos:line="333" pos:column="41"/></operator><name pos:line="333" pos:column="41">int<pos:position pos:line="333" pos:column="44"/></name><operator pos:line="333" pos:column="44">)<pos:position pos:line="333" pos:column="45"/></operator> <name pos:line="333" pos:column="46">timecamped<pos:position pos:line="333" pos:column="56"/></name></expr></argument>)<pos:position pos:line="333" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="333" pos:column="58"/></expr_stmt>
        }<pos:position pos:line="334" pos:column="10"/></block></else></if>
        <expr_stmt><expr><call><name pos:line="335" pos:column="9">ap_rputs<pos:position pos:line="335" pos:column="17"/></name><argument_list pos:line="335" pos:column="17">(<argument><expr><name pos:line="335" pos:column="18">HTML_FOOTER<pos:position pos:line="335" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="335" pos:column="31">r<pos:position pos:line="335" pos:column="32"/></name></expr></argument>)<pos:position pos:line="335" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="34"/></expr_stmt> 
    }<pos:position pos:line="336" pos:column="6"/></block></then></if> <comment type="block" pos:line="336" pos:column="7">/* r-&gt;header_only */</comment>
    
    <comment type="block" pos:line="338" pos:column="5">/* Release the lock */</comment>
    <if pos:line="339" pos:column="5">if <condition pos:line="339" pos:column="8">(<expr><name pos:line="339" pos:column="9">gotlock<pos:position pos:line="339" pos:column="16"/></name></expr>)<pos:position pos:line="339" pos:column="17"/></condition><then pos:line="339" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name pos:line="340" pos:column="9">rs<pos:position pos:line="340" pos:column="11"/></name> <operator pos:line="340" pos:column="12">=<pos:position pos:line="340" pos:column="13"/></operator> <call><name pos:line="340" pos:column="14">apr_global_mutex_unlock<pos:position pos:line="340" pos:column="37"/></name><argument_list pos:line="340" pos:column="37">(<argument><expr><name pos:line="340" pos:column="38">exipc_mutex<pos:position pos:line="340" pos:column="49"/></name></expr></argument>)<pos:position pos:line="340" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="340" pos:column="51"/></expr_stmt></block></then></if> 
    <comment type="block" pos:line="341" pos:column="5">/* Swallowing the result because what are we going to do with it at 
     * this stage? 
     */</comment>

    <return pos:line="345" pos:column="5">return <expr><name pos:line="345" pos:column="12">OK<pos:position pos:line="345" pos:column="14"/></name></expr>;<pos:position pos:line="345" pos:column="15"/></return>
}<pos:position pos:line="346" pos:column="2"/></block></function>

