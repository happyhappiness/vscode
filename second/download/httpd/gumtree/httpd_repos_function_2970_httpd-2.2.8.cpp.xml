<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2970_httpd-2.2.8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name> <name pos:line="2" pos:column="5">PREFIX<pos:position pos:line="2" pos:column="11"/></name></type>(<name pos:line="2" pos:column="12">cdataSectionTok<pos:position pos:line="2" pos:column="27"/></name>)<parameter_list pos:line="2" pos:column="28">(<parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">ENCODING<pos:position pos:line="2" pos:column="43"/></name> <modifier pos:line="2" pos:column="44">*<pos:position pos:line="2" pos:column="45"/></modifier></type><name pos:line="2" pos:column="45">enc<pos:position pos:line="2" pos:column="48"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="50">const<pos:position pos:line="2" pos:column="55"/></specifier> <name pos:line="2" pos:column="56">char<pos:position pos:line="2" pos:column="60"/></name> <modifier pos:line="2" pos:column="61">*<pos:position pos:line="2" pos:column="62"/></modifier></type><name pos:line="2" pos:column="62">ptr<pos:position pos:line="2" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="67">const<pos:position pos:line="2" pos:column="72"/></specifier> <name pos:line="2" pos:column="73">char<pos:position pos:line="2" pos:column="77"/></name> <modifier pos:line="2" pos:column="78">*<pos:position pos:line="2" pos:column="79"/></modifier></type><name pos:line="2" pos:column="79">end<pos:position pos:line="2" pos:column="82"/></name></decl></parameter>,
			    <parameter><decl><type><specifier pos:line="3" pos:column="29">const<pos:position pos:line="3" pos:column="34"/></specifier> <name pos:line="3" pos:column="35">char<pos:position pos:line="3" pos:column="39"/></name> <modifier pos:line="3" pos:column="40">*<pos:position pos:line="3" pos:column="41"/></modifier><modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">nextTokPtr<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="53"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <if pos:line="5" pos:column="3">if <condition pos:line="5" pos:column="6">(<expr><name pos:line="5" pos:column="7">ptr<pos:position pos:line="5" pos:column="10"/></name> <operator pos:line="5" pos:column="11">==<pos:position pos:line="5" pos:column="13"/></operator> <name pos:line="5" pos:column="14">end<pos:position pos:line="5" pos:column="17"/></name></expr>)<pos:position pos:line="5" pos:column="18"/></condition><then pos:line="5" pos:column="18">
    <block type="pseudo"><return pos:line="6" pos:column="5">return <expr><name pos:line="6" pos:column="12">XML_TOK_NONE<pos:position pos:line="6" pos:column="24"/></name></expr>;<pos:position pos:line="6" pos:column="25"/></return></block></then></if>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><call><name pos:line="7" pos:column="7">MINBPC<pos:position pos:line="7" pos:column="13"/></name><argument_list pos:line="7" pos:column="13">(<argument><expr><name pos:line="7" pos:column="14">enc<pos:position pos:line="7" pos:column="17"/></name></expr></argument>)<pos:position pos:line="7" pos:column="18"/></argument_list></call> <operator pos:line="7" pos:column="19">&gt;<pos:position pos:line="7" pos:column="23"/></operator> <literal type="number" pos:line="7" pos:column="21">1<pos:position pos:line="7" pos:column="22"/></literal></expr>)<pos:position pos:line="7" pos:column="23"/></condition><then pos:line="7" pos:column="23"> <block pos:line="7" pos:column="24">{
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">size_t<pos:position pos:line="8" pos:column="11"/></name></type> <name pos:line="8" pos:column="12">n<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><name pos:line="8" pos:column="16">end<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">-<pos:position pos:line="8" pos:column="21"/></operator> <name pos:line="8" pos:column="22">ptr<pos:position pos:line="8" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="26"/></decl_stmt>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name pos:line="9" pos:column="9">n<pos:position pos:line="9" pos:column="10"/></name> <operator pos:line="9" pos:column="11">&amp;<pos:position pos:line="9" pos:column="16"/></operator> <operator pos:line="9" pos:column="13">(<pos:position pos:line="9" pos:column="14"/></operator><call><name pos:line="9" pos:column="14">MINBPC<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">enc<pos:position pos:line="9" pos:column="24"/></name></expr></argument>)<pos:position pos:line="9" pos:column="25"/></argument_list></call> <operator pos:line="9" pos:column="26">-<pos:position pos:line="9" pos:column="27"/></operator> <literal type="number" pos:line="9" pos:column="28">1<pos:position pos:line="9" pos:column="29"/></literal><operator pos:line="9" pos:column="29">)<pos:position pos:line="9" pos:column="30"/></operator></expr>)<pos:position pos:line="9" pos:column="31"/></condition><then pos:line="9" pos:column="31"> <block pos:line="9" pos:column="32">{
      <expr_stmt><expr><name pos:line="10" pos:column="7">n<pos:position pos:line="10" pos:column="8"/></name> <operator pos:line="10" pos:column="9">&amp;=<pos:position pos:line="10" pos:column="15"/></operator> <operator pos:line="10" pos:column="12">~<pos:position pos:line="10" pos:column="13"/></operator><operator pos:line="10" pos:column="13">(<pos:position pos:line="10" pos:column="14"/></operator><call><name pos:line="10" pos:column="14">MINBPC<pos:position pos:line="10" pos:column="20"/></name><argument_list pos:line="10" pos:column="20">(<argument><expr><name pos:line="10" pos:column="21">enc<pos:position pos:line="10" pos:column="24"/></name></expr></argument>)<pos:position pos:line="10" pos:column="25"/></argument_list></call> <operator pos:line="10" pos:column="26">-<pos:position pos:line="10" pos:column="27"/></operator> <literal type="number" pos:line="10" pos:column="28">1<pos:position pos:line="10" pos:column="29"/></literal><operator pos:line="10" pos:column="29">)<pos:position pos:line="10" pos:column="30"/></operator></expr>;<pos:position pos:line="10" pos:column="31"/></expr_stmt>
      <if pos:line="11" pos:column="7">if <condition pos:line="11" pos:column="10">(<expr><name pos:line="11" pos:column="11">n<pos:position pos:line="11" pos:column="12"/></name> <operator pos:line="11" pos:column="13">==<pos:position pos:line="11" pos:column="15"/></operator> <literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>)<pos:position pos:line="11" pos:column="18"/></condition><then pos:line="11" pos:column="18">
	<block type="pseudo"><return pos:line="12" pos:column="9">return <expr><name pos:line="12" pos:column="16">XML_TOK_PARTIAL<pos:position pos:line="12" pos:column="31"/></name></expr>;<pos:position pos:line="12" pos:column="32"/></return></block></then></if>
      <expr_stmt><expr><name pos:line="13" pos:column="7">end<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <name pos:line="13" pos:column="13">ptr<pos:position pos:line="13" pos:column="16"/></name> <operator pos:line="13" pos:column="17">+<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">n<pos:position pos:line="13" pos:column="20"/></name></expr>;<pos:position pos:line="13" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
  }<pos:position pos:line="15" pos:column="4"/></block></then></if>
  <switch pos:line="16" pos:column="3">switch <condition pos:line="16" pos:column="10">(<expr><call><name pos:line="16" pos:column="11">BYTE_TYPE<pos:position pos:line="16" pos:column="20"/></name><argument_list pos:line="16" pos:column="20">(<argument><expr><name pos:line="16" pos:column="21">enc<pos:position pos:line="16" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="26">ptr<pos:position pos:line="16" pos:column="29"/></name></expr></argument>)<pos:position pos:line="16" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="31"/></condition> <block pos:line="16" pos:column="32">{
  <case pos:line="17" pos:column="3">case <expr><name pos:line="17" pos:column="8">BT_RSQB<pos:position pos:line="17" pos:column="15"/></name></expr>:<pos:position pos:line="17" pos:column="16"/></case>
    <expr_stmt><expr><name pos:line="18" pos:column="5">ptr<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">+=<pos:position pos:line="18" pos:column="11"/></operator> <call><name pos:line="18" pos:column="12">MINBPC<pos:position pos:line="18" pos:column="18"/></name><argument_list pos:line="18" pos:column="18">(<argument><expr><name pos:line="18" pos:column="19">enc<pos:position pos:line="18" pos:column="22"/></name></expr></argument>)<pos:position pos:line="18" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">ptr<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">==<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="16">end<pos:position pos:line="19" pos:column="19"/></name></expr>)<pos:position pos:line="19" pos:column="20"/></condition><then pos:line="19" pos:column="20">
      <block type="pseudo"><return pos:line="20" pos:column="7">return <expr><name pos:line="20" pos:column="14">XML_TOK_PARTIAL<pos:position pos:line="20" pos:column="29"/></name></expr>;<pos:position pos:line="20" pos:column="30"/></return></block></then></if>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><call><name pos:line="21" pos:column="10">CHAR_MATCHES<pos:position pos:line="21" pos:column="22"/></name><argument_list pos:line="21" pos:column="22">(<argument><expr><name pos:line="21" pos:column="23">enc<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">ptr<pos:position pos:line="21" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="33">ASCII_RSQB<pos:position pos:line="21" pos:column="43"/></name></expr></argument>)<pos:position pos:line="21" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="45"/></condition><then pos:line="21" pos:column="45">
      <block type="pseudo"><break pos:line="22" pos:column="7">break;<pos:position pos:line="22" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="23" pos:column="5">ptr<pos:position pos:line="23" pos:column="8"/></name> <operator pos:line="23" pos:column="9">+=<pos:position pos:line="23" pos:column="11"/></operator> <call><name pos:line="23" pos:column="12">MINBPC<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">enc<pos:position pos:line="23" pos:column="22"/></name></expr></argument>)<pos:position pos:line="23" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="24"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">ptr<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">==<pos:position pos:line="24" pos:column="15"/></operator> <name pos:line="24" pos:column="16">end<pos:position pos:line="24" pos:column="19"/></name></expr>)<pos:position pos:line="24" pos:column="20"/></condition><then pos:line="24" pos:column="20">
      <block type="pseudo"><return pos:line="25" pos:column="7">return <expr><name pos:line="25" pos:column="14">XML_TOK_PARTIAL<pos:position pos:line="25" pos:column="29"/></name></expr>;<pos:position pos:line="25" pos:column="30"/></return></block></then></if>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><call><name pos:line="26" pos:column="10">CHAR_MATCHES<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">enc<pos:position pos:line="26" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="28">ptr<pos:position pos:line="26" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="33">ASCII_GT<pos:position pos:line="26" pos:column="41"/></name></expr></argument>)<pos:position pos:line="26" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="26" pos:column="43"/></condition><then pos:line="26" pos:column="43"> <block pos:line="26" pos:column="44">{
      <expr_stmt><expr><name pos:line="27" pos:column="7">ptr<pos:position pos:line="27" pos:column="10"/></name> <operator pos:line="27" pos:column="11">-=<pos:position pos:line="27" pos:column="13"/></operator> <call><name pos:line="27" pos:column="14">MINBPC<pos:position pos:line="27" pos:column="20"/></name><argument_list pos:line="27" pos:column="20">(<argument><expr><name pos:line="27" pos:column="21">enc<pos:position pos:line="27" pos:column="24"/></name></expr></argument>)<pos:position pos:line="27" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="26"/></expr_stmt>
      <break pos:line="28" pos:column="7">break;<pos:position pos:line="28" pos:column="13"/></break>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="30" pos:column="5">*<pos:position pos:line="30" pos:column="6"/></operator><name pos:line="30" pos:column="6">nextTokPtr<pos:position pos:line="30" pos:column="16"/></name> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <name pos:line="30" pos:column="19">ptr<pos:position pos:line="30" pos:column="22"/></name> <operator pos:line="30" pos:column="23">+<pos:position pos:line="30" pos:column="24"/></operator> <call><name pos:line="30" pos:column="25">MINBPC<pos:position pos:line="30" pos:column="31"/></name><argument_list pos:line="30" pos:column="31">(<argument><expr><name pos:line="30" pos:column="32">enc<pos:position pos:line="30" pos:column="35"/></name></expr></argument>)<pos:position pos:line="30" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">XML_TOK_CDATA_SECT_CLOSE<pos:position pos:line="31" pos:column="36"/></name></expr>;<pos:position pos:line="31" pos:column="37"/></return>
  <case pos:line="32" pos:column="3">case <expr><name pos:line="32" pos:column="8">BT_CR<pos:position pos:line="32" pos:column="13"/></name></expr>:<pos:position pos:line="32" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="33" pos:column="5">ptr<pos:position pos:line="33" pos:column="8"/></name> <operator pos:line="33" pos:column="9">+=<pos:position pos:line="33" pos:column="11"/></operator> <call><name pos:line="33" pos:column="12">MINBPC<pos:position pos:line="33" pos:column="18"/></name><argument_list pos:line="33" pos:column="18">(<argument><expr><name pos:line="33" pos:column="19">enc<pos:position pos:line="33" pos:column="22"/></name></expr></argument>)<pos:position pos:line="33" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>
    <if pos:line="34" pos:column="5">if <condition pos:line="34" pos:column="8">(<expr><name pos:line="34" pos:column="9">ptr<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">==<pos:position pos:line="34" pos:column="15"/></operator> <name pos:line="34" pos:column="16">end<pos:position pos:line="34" pos:column="19"/></name></expr>)<pos:position pos:line="34" pos:column="20"/></condition><then pos:line="34" pos:column="20">
      <block type="pseudo"><return pos:line="35" pos:column="7">return <expr><name pos:line="35" pos:column="14">XML_TOK_PARTIAL<pos:position pos:line="35" pos:column="29"/></name></expr>;<pos:position pos:line="35" pos:column="30"/></return></block></then></if>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><call><name pos:line="36" pos:column="9">BYTE_TYPE<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">(<argument><expr><name pos:line="36" pos:column="19">enc<pos:position pos:line="36" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="24">ptr<pos:position pos:line="36" pos:column="27"/></name></expr></argument>)<pos:position pos:line="36" pos:column="28"/></argument_list></call> <operator pos:line="36" pos:column="29">==<pos:position pos:line="36" pos:column="31"/></operator> <name pos:line="36" pos:column="32">BT_LF<pos:position pos:line="36" pos:column="37"/></name></expr>)<pos:position pos:line="36" pos:column="38"/></condition><then pos:line="36" pos:column="38">
      <block type="pseudo"><expr_stmt><expr><name pos:line="37" pos:column="7">ptr<pos:position pos:line="37" pos:column="10"/></name> <operator pos:line="37" pos:column="11">+=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">MINBPC<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">enc<pos:position pos:line="37" pos:column="24"/></name></expr></argument>)<pos:position pos:line="37" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="26"/></expr_stmt></block></then></if>
    <expr_stmt><expr><operator pos:line="38" pos:column="5">*<pos:position pos:line="38" pos:column="6"/></operator><name pos:line="38" pos:column="6">nextTokPtr<pos:position pos:line="38" pos:column="16"/></name> <operator pos:line="38" pos:column="17">=<pos:position pos:line="38" pos:column="18"/></operator> <name pos:line="38" pos:column="19">ptr<pos:position pos:line="38" pos:column="22"/></name></expr>;<pos:position pos:line="38" pos:column="23"/></expr_stmt>
    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">XML_TOK_DATA_NEWLINE<pos:position pos:line="39" pos:column="32"/></name></expr>;<pos:position pos:line="39" pos:column="33"/></return>
  <case pos:line="40" pos:column="3">case <expr><name pos:line="40" pos:column="8">BT_LF<pos:position pos:line="40" pos:column="13"/></name></expr>:<pos:position pos:line="40" pos:column="14"/></case>
    <expr_stmt><expr><operator pos:line="41" pos:column="5">*<pos:position pos:line="41" pos:column="6"/></operator><name pos:line="41" pos:column="6">nextTokPtr<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <name pos:line="41" pos:column="19">ptr<pos:position pos:line="41" pos:column="22"/></name> <operator pos:line="41" pos:column="23">+<pos:position pos:line="41" pos:column="24"/></operator> <call><name pos:line="41" pos:column="25">MINBPC<pos:position pos:line="41" pos:column="31"/></name><argument_list pos:line="41" pos:column="31">(<argument><expr><name pos:line="41" pos:column="32">enc<pos:position pos:line="41" pos:column="35"/></name></expr></argument>)<pos:position pos:line="41" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="37"/></expr_stmt>
    <return pos:line="42" pos:column="5">return <expr><name pos:line="42" pos:column="12">XML_TOK_DATA_NEWLINE<pos:position pos:line="42" pos:column="32"/></name></expr>;<pos:position pos:line="42" pos:column="33"/></return>
  <macro><name pos:line="43" pos:column="3">INVALID_CASES<pos:position pos:line="43" pos:column="16"/></name><argument_list pos:line="43" pos:column="16">(<argument pos:line="43" pos:column="17">ptr<pos:position pos:line="43" pos:column="20"/></argument>, <argument pos:line="43" pos:column="22">nextTokPtr<pos:position pos:line="43" pos:column="32"/></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></macro>
  <default pos:line="44" pos:column="3">default:<pos:position pos:line="44" pos:column="11"/></default>
    <expr_stmt><expr><name pos:line="45" pos:column="5">ptr<pos:position pos:line="45" pos:column="8"/></name> <operator pos:line="45" pos:column="9">+=<pos:position pos:line="45" pos:column="11"/></operator> <call><name pos:line="45" pos:column="12">MINBPC<pos:position pos:line="45" pos:column="18"/></name><argument_list pos:line="45" pos:column="18">(<argument><expr><name pos:line="45" pos:column="19">enc<pos:position pos:line="45" pos:column="22"/></name></expr></argument>)<pos:position pos:line="45" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="24"/></expr_stmt>
    <break pos:line="46" pos:column="5">break;<pos:position pos:line="46" pos:column="11"/></break>
  }<pos:position pos:line="47" pos:column="4"/></block></switch>
  <while pos:line="48" pos:column="3">while <condition pos:line="48" pos:column="9">(<expr><name pos:line="48" pos:column="10">ptr<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">!=<pos:position pos:line="48" pos:column="16"/></operator> <name pos:line="48" pos:column="17">end<pos:position pos:line="48" pos:column="20"/></name></expr>)<pos:position pos:line="48" pos:column="21"/></condition> <block pos:line="48" pos:column="22">{
    <switch pos:line="49" pos:column="5">switch <condition pos:line="49" pos:column="12">(<expr><call><name pos:line="49" pos:column="13">BYTE_TYPE<pos:position pos:line="49" pos:column="22"/></name><argument_list pos:line="49" pos:column="22">(<argument><expr><name pos:line="49" pos:column="23">enc<pos:position pos:line="49" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="28">ptr<pos:position pos:line="49" pos:column="31"/></name></expr></argument>)<pos:position pos:line="49" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="33"/></condition> <block pos:line="49" pos:column="34">{
<cpp:define pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">define<pos:position pos:line="50" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="50" pos:column="9">LEAD_CASE<pos:position pos:line="50" pos:column="18"/></name><parameter_list pos:line="50" pos:column="18">(<parameter><type><name pos:line="50" pos:column="19">n<pos:position pos:line="50" pos:column="20"/></name></type></parameter>)<pos:position pos:line="50" pos:column="21"/></parameter_list></cpp:macro> \
    <cpp:value pos:line="51" pos:column="5">case BT_LEAD ## n: \
      if (end - ptr &lt; n || IS_INVALID_CHAR(enc, ptr, n)) { \
	*nextTokPtr = ptr; \
	return XML_TOK_DATA_CHARS; \
      } \
      ptr += n; \
      break;<pos:position pos:line="57" pos:column="13"/></cpp:value></cpp:define>
    <macro><name pos:line="58" pos:column="5">LEAD_CASE<pos:position pos:line="58" pos:column="14"/></name><argument_list pos:line="58" pos:column="14">(<argument><literal type="number" pos:line="58" pos:column="15">2<pos:position pos:line="58" pos:column="16"/></literal></argument>)<pos:position pos:line="58" pos:column="17"/></argument_list></macro> <macro><name pos:line="58" pos:column="18">LEAD_CASE<pos:position pos:line="58" pos:column="27"/></name><argument_list pos:line="58" pos:column="27">(<argument><literal type="number" pos:line="58" pos:column="28">3<pos:position pos:line="58" pos:column="29"/></literal></argument>)<pos:position pos:line="58" pos:column="30"/></argument_list></macro> <macro><name pos:line="58" pos:column="31">LEAD_CASE<pos:position pos:line="58" pos:column="40"/></name><argument_list pos:line="58" pos:column="40">(<argument><literal type="number" pos:line="58" pos:column="41">4<pos:position pos:line="58" pos:column="42"/></literal></argument>)<pos:position pos:line="58" pos:column="43"/></argument_list></macro>
<cpp:undef pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">undef<pos:position pos:line="59" pos:column="7"/></cpp:directive> <name pos:line="59" pos:column="8">LEAD_CASE<pos:position pos:line="59" pos:column="17"/></name></cpp:undef>
    <case pos:line="60" pos:column="5">case <expr><name pos:line="60" pos:column="10">BT_NONXML<pos:position pos:line="60" pos:column="19"/></name></expr>:<pos:position pos:line="60" pos:column="20"/></case>
    <case pos:line="61" pos:column="5">case <expr><name pos:line="61" pos:column="10">BT_MALFORM<pos:position pos:line="61" pos:column="20"/></name></expr>:<pos:position pos:line="61" pos:column="21"/></case>
    <case pos:line="62" pos:column="5">case <expr><name pos:line="62" pos:column="10">BT_TRAIL<pos:position pos:line="62" pos:column="18"/></name></expr>:<pos:position pos:line="62" pos:column="19"/></case>
    <case pos:line="63" pos:column="5">case <expr><name pos:line="63" pos:column="10">BT_CR<pos:position pos:line="63" pos:column="15"/></name></expr>:<pos:position pos:line="63" pos:column="16"/></case>
    <case pos:line="64" pos:column="5">case <expr><name pos:line="64" pos:column="10">BT_LF<pos:position pos:line="64" pos:column="15"/></name></expr>:<pos:position pos:line="64" pos:column="16"/></case>
    <case pos:line="65" pos:column="5">case <expr><name pos:line="65" pos:column="10">BT_RSQB<pos:position pos:line="65" pos:column="17"/></name></expr>:<pos:position pos:line="65" pos:column="18"/></case>
      <expr_stmt><expr><operator pos:line="66" pos:column="7">*<pos:position pos:line="66" pos:column="8"/></operator><name pos:line="66" pos:column="8">nextTokPtr<pos:position pos:line="66" pos:column="18"/></name> <operator pos:line="66" pos:column="19">=<pos:position pos:line="66" pos:column="20"/></operator> <name pos:line="66" pos:column="21">ptr<pos:position pos:line="66" pos:column="24"/></name></expr>;<pos:position pos:line="66" pos:column="25"/></expr_stmt>
      <return pos:line="67" pos:column="7">return <expr><name pos:line="67" pos:column="14">XML_TOK_DATA_CHARS<pos:position pos:line="67" pos:column="32"/></name></expr>;<pos:position pos:line="67" pos:column="33"/></return>
    <default pos:line="68" pos:column="5">default:<pos:position pos:line="68" pos:column="13"/></default>
      <expr_stmt><expr><name pos:line="69" pos:column="7">ptr<pos:position pos:line="69" pos:column="10"/></name> <operator pos:line="69" pos:column="11">+=<pos:position pos:line="69" pos:column="13"/></operator> <call><name pos:line="69" pos:column="14">MINBPC<pos:position pos:line="69" pos:column="20"/></name><argument_list pos:line="69" pos:column="20">(<argument><expr><name pos:line="69" pos:column="21">enc<pos:position pos:line="69" pos:column="24"/></name></expr></argument>)<pos:position pos:line="69" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="26"/></expr_stmt>
      <break pos:line="70" pos:column="7">break;<pos:position pos:line="70" pos:column="13"/></break>
    }<pos:position pos:line="71" pos:column="6"/></block></switch>
  }<pos:position pos:line="72" pos:column="4"/></block></while>
  <expr_stmt><expr><operator pos:line="73" pos:column="3">*<pos:position pos:line="73" pos:column="4"/></operator><name pos:line="73" pos:column="4">nextTokPtr<pos:position pos:line="73" pos:column="14"/></name> <operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator> <name pos:line="73" pos:column="17">ptr<pos:position pos:line="73" pos:column="20"/></name></expr>;<pos:position pos:line="73" pos:column="21"/></expr_stmt>
  <return pos:line="74" pos:column="3">return <expr><name pos:line="74" pos:column="10">XML_TOK_DATA_CHARS<pos:position pos:line="74" pos:column="28"/></name></expr>;<pos:position pos:line="74" pos:column="29"/></return>
}<pos:position pos:line="75" pos:column="2"/></block></function></unit>
