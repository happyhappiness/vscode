<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6553.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">h2_from_h1_read_response<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">h2_from_h1<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">from_h1<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="60">ap_filter_t<pos:position pos:line="1" pos:column="71"/></name><modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type> <name pos:line="1" pos:column="73">f<pos:position pos:line="1" pos:column="74"/></name></decl></parameter>,
                                      <parameter><decl><type><name pos:line="2" pos:column="39">apr_bucket_brigade<pos:position pos:line="2" pos:column="57"/></name><modifier pos:line="2" pos:column="57">*<pos:position pos:line="2" pos:column="58"/></modifier></type> <name pos:line="2" pos:column="59">bb<pos:position pos:line="2" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="62"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">status<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name pos:line="4" pos:column="27">APR_SUCCESS<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name></type> <name><name pos:line="5" pos:column="10">line<pos:position pos:line="5" pos:column="14"/></name><index pos:line="5" pos:column="14">[<expr><name pos:line="5" pos:column="15">HUGE_STRING_LEN<pos:position pos:line="5" pos:column="30"/></name></expr>]<pos:position pos:line="5" pos:column="31"/></index></name></decl>;<pos:position pos:line="5" pos:column="32"/></decl_stmt>
    
    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">(<pos:position pos:line="7" pos:column="10"/></operator><name><name pos:line="7" pos:column="10">from_h1<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">-&gt;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="19">state<pos:position pos:line="7" pos:column="24"/></name></name> <operator pos:line="7" pos:column="25">==<pos:position pos:line="7" pos:column="27"/></operator> <name pos:line="7" pos:column="28">H2_RESP_ST_BODY<pos:position pos:line="7" pos:column="43"/></name><operator pos:line="7" pos:column="43">)<pos:position pos:line="7" pos:column="44"/></operator> 
        <operator pos:line="8" pos:column="9">||<pos:position pos:line="8" pos:column="11"/></operator> <operator pos:line="8" pos:column="12">(<pos:position pos:line="8" pos:column="13"/></operator><name><name pos:line="8" pos:column="13">from_h1<pos:position pos:line="8" pos:column="20"/></name><operator pos:line="8" pos:column="20">-&gt;<pos:position pos:line="8" pos:column="25"/></operator><name pos:line="8" pos:column="22">state<pos:position pos:line="8" pos:column="27"/></name></name> <operator pos:line="8" pos:column="28">==<pos:position pos:line="8" pos:column="30"/></operator> <name pos:line="8" pos:column="31">H2_RESP_ST_DONE<pos:position pos:line="8" pos:column="46"/></name><operator pos:line="8" pos:column="46">)<pos:position pos:line="8" pos:column="47"/></operator></expr>)<pos:position pos:line="8" pos:column="48"/></condition><then pos:line="8" pos:column="48"> <block pos:line="8" pos:column="49">{
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name><name pos:line="9" pos:column="13">from_h1<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">chunked<pos:position pos:line="9" pos:column="29"/></name></name></expr>)<pos:position pos:line="9" pos:column="30"/></condition><then pos:line="9" pos:column="30"> <block pos:line="9" pos:column="31">{
            <comment type="block" pos:line="10" pos:column="13">/* The httpd core HTTP_HEADER filter has or will install the 
             * "CHUNK" output transcode filter, which appears further down 
             * the filter chain. We do not want it for HTTP/2.
             * Once we successfully deinstalled it, this filter has no
             * further function and we remove it.
             */</comment>
            <expr_stmt><expr><name pos:line="16" pos:column="13">status<pos:position pos:line="16" pos:column="19"/></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <call><name pos:line="16" pos:column="22">ap_remove_output_filter_byhandle<pos:position pos:line="16" pos:column="54"/></name><argument_list pos:line="16" pos:column="54">(<argument><expr><name><name pos:line="16" pos:column="55">f<pos:position pos:line="16" pos:column="56"/></name><operator pos:line="16" pos:column="56">-&gt;<pos:position pos:line="16" pos:column="61"/></operator><name pos:line="16" pos:column="58">r<pos:position pos:line="16" pos:column="59"/></name><operator pos:line="16" pos:column="59">-&gt;<pos:position pos:line="16" pos:column="64"/></operator><name pos:line="16" pos:column="61">output_filters<pos:position pos:line="16" pos:column="75"/></name></name></expr></argument>, 
                                                      <argument><expr><literal type="string" pos:line="17" pos:column="55">"CHUNK"<pos:position pos:line="17" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="64"/></expr_stmt>
            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><name pos:line="18" pos:column="17">status<pos:position pos:line="18" pos:column="23"/></name> <operator pos:line="18" pos:column="24">==<pos:position pos:line="18" pos:column="26"/></operator> <name pos:line="18" pos:column="27">APR_SUCCESS<pos:position pos:line="18" pos:column="38"/></name></expr>)<pos:position pos:line="18" pos:column="39"/></condition><then pos:line="18" pos:column="39"> <block pos:line="18" pos:column="40">{
                <expr_stmt><expr><call><name pos:line="19" pos:column="17">ap_remove_output_filter<pos:position pos:line="19" pos:column="40"/></name><argument_list pos:line="19" pos:column="40">(<argument><expr><name pos:line="19" pos:column="41">f<pos:position pos:line="19" pos:column="42"/></name></expr></argument>)<pos:position pos:line="19" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="44"/></expr_stmt>
            }<pos:position pos:line="20" pos:column="14"/></block></then></if>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        
        <return pos:line="23" pos:column="9">return <expr><call><name pos:line="23" pos:column="16">ap_pass_brigade<pos:position pos:line="23" pos:column="31"/></name><argument_list pos:line="23" pos:column="31">(<argument><expr><name><name pos:line="23" pos:column="32">f<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">-&gt;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="35">next<pos:position pos:line="23" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="41">bb<pos:position pos:line="23" pos:column="43"/></name></expr></argument>)<pos:position pos:line="23" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="45"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>
    
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">ap_log_cerror<pos:position pos:line="26" pos:column="18"/></name><argument_list pos:line="26" pos:column="18">(<argument><expr><name pos:line="26" pos:column="19">APLOG_MARK<pos:position pos:line="26" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="31">APLOG_TRACE1<pos:position pos:line="26" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="45">0<pos:position pos:line="26" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="48">f<pos:position pos:line="26" pos:column="49"/></name><operator pos:line="26" pos:column="49">-&gt;<pos:position pos:line="26" pos:column="54"/></operator><name pos:line="26" pos:column="51">c<pos:position pos:line="26" pos:column="52"/></name></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="27" pos:column="19">"h2_from_h1(%d): read_response"<pos:position pos:line="27" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="27" pos:column="52">from_h1<pos:position pos:line="27" pos:column="59"/></name><operator pos:line="27" pos:column="59">-&gt;<pos:position pos:line="27" pos:column="64"/></operator><name pos:line="27" pos:column="61">stream_id<pos:position pos:line="27" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="72"/></expr_stmt>
    
    <while pos:line="29" pos:column="5">while <condition pos:line="29" pos:column="11">(<expr><operator pos:line="29" pos:column="12">!<pos:position pos:line="29" pos:column="13"/></operator><call><name pos:line="29" pos:column="13">APR_BRIGADE_EMPTY<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">bb<pos:position pos:line="29" pos:column="33"/></name></expr></argument>)<pos:position pos:line="29" pos:column="34"/></argument_list></call> <operator pos:line="29" pos:column="35">&amp;&amp;<pos:position pos:line="29" pos:column="45"/></operator> <name pos:line="29" pos:column="38">status<pos:position pos:line="29" pos:column="44"/></name> <operator pos:line="29" pos:column="45">==<pos:position pos:line="29" pos:column="47"/></operator> <name pos:line="29" pos:column="48">APR_SUCCESS<pos:position pos:line="29" pos:column="59"/></name></expr>)<pos:position pos:line="29" pos:column="60"/></condition> <block pos:line="29" pos:column="61">{
        
        <switch pos:line="31" pos:column="9">switch <condition pos:line="31" pos:column="16">(<expr><name><name pos:line="31" pos:column="17">from_h1<pos:position pos:line="31" pos:column="24"/></name><operator pos:line="31" pos:column="24">-&gt;<pos:position pos:line="31" pos:column="29"/></operator><name pos:line="31" pos:column="26">state<pos:position pos:line="31" pos:column="31"/></name></name></expr>)<pos:position pos:line="31" pos:column="32"/></condition> <block pos:line="31" pos:column="33">{
                
            <case pos:line="33" pos:column="13">case <expr><name pos:line="33" pos:column="18">H2_RESP_ST_STATUS_LINE<pos:position pos:line="33" pos:column="40"/></name></expr>:<pos:position pos:line="33" pos:column="41"/></case>
            <case pos:line="34" pos:column="13">case <expr><name pos:line="34" pos:column="18">H2_RESP_ST_HEADERS<pos:position pos:line="34" pos:column="36"/></name></expr>:<pos:position pos:line="34" pos:column="37"/></case>
                <expr_stmt><expr><name pos:line="35" pos:column="17">status<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <call><name pos:line="35" pos:column="26">get_line<pos:position pos:line="35" pos:column="34"/></name><argument_list pos:line="35" pos:column="34">(<argument><expr><name pos:line="35" pos:column="35">from_h1<pos:position pos:line="35" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="44">bb<pos:position pos:line="35" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="48">f<pos:position pos:line="35" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="51">line<pos:position pos:line="35" pos:column="55"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="57">sizeof<argument_list pos:line="35" pos:column="63">(<argument><expr><name pos:line="35" pos:column="64">line<pos:position pos:line="35" pos:column="68"/></name></expr></argument>)<pos:position pos:line="35" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="71"/></expr_stmt>
                <if pos:line="36" pos:column="17">if <condition pos:line="36" pos:column="20">(<expr><name pos:line="36" pos:column="21">status<pos:position pos:line="36" pos:column="27"/></name> <operator pos:line="36" pos:column="28">!=<pos:position pos:line="36" pos:column="30"/></operator> <name pos:line="36" pos:column="31">APR_SUCCESS<pos:position pos:line="36" pos:column="42"/></name></expr>)<pos:position pos:line="36" pos:column="43"/></condition><then pos:line="36" pos:column="43"> <block pos:line="36" pos:column="44">{
                    <return pos:line="37" pos:column="21">return <expr><name pos:line="37" pos:column="28">status<pos:position pos:line="37" pos:column="34"/></name></expr>;<pos:position pos:line="37" pos:column="35"/></return>
                }<pos:position pos:line="38" pos:column="18"/></block></then></if>
                <if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name><name pos:line="39" pos:column="21">from_h1<pos:position pos:line="39" pos:column="28"/></name><operator pos:line="39" pos:column="28">-&gt;<pos:position pos:line="39" pos:column="33"/></operator><name pos:line="39" pos:column="30">state<pos:position pos:line="39" pos:column="35"/></name></name> <operator pos:line="39" pos:column="36">==<pos:position pos:line="39" pos:column="38"/></operator> <name pos:line="39" pos:column="39">H2_RESP_ST_STATUS_LINE<pos:position pos:line="39" pos:column="61"/></name></expr>)<pos:position pos:line="39" pos:column="62"/></condition><then pos:line="39" pos:column="62"> <block pos:line="39" pos:column="63">{
                    <comment type="block" pos:line="40" pos:column="21">/* instead of parsing, just take it directly */</comment>
                    <expr_stmt><expr><name><name pos:line="41" pos:column="21">from_h1<pos:position pos:line="41" pos:column="28"/></name><operator pos:line="41" pos:column="28">-&gt;<pos:position pos:line="41" pos:column="33"/></operator><name pos:line="41" pos:column="30">http_status<pos:position pos:line="41" pos:column="41"/></name></name> <operator pos:line="41" pos:column="42">=<pos:position pos:line="41" pos:column="43"/></operator> <name><name pos:line="41" pos:column="44">f<pos:position pos:line="41" pos:column="45"/></name><operator pos:line="41" pos:column="45">-&gt;<pos:position pos:line="41" pos:column="50"/></operator><name pos:line="41" pos:column="47">r<pos:position pos:line="41" pos:column="48"/></name><operator pos:line="41" pos:column="48">-&gt;<pos:position pos:line="41" pos:column="53"/></operator><name pos:line="41" pos:column="50">status<pos:position pos:line="41" pos:column="56"/></name></name></expr>;<pos:position pos:line="41" pos:column="57"/></expr_stmt>
                    <expr_stmt><expr><name><name pos:line="42" pos:column="21">from_h1<pos:position pos:line="42" pos:column="28"/></name><operator pos:line="42" pos:column="28">-&gt;<pos:position pos:line="42" pos:column="33"/></operator><name pos:line="42" pos:column="30">state<pos:position pos:line="42" pos:column="35"/></name></name> <operator pos:line="42" pos:column="36">=<pos:position pos:line="42" pos:column="37"/></operator> <name pos:line="42" pos:column="38">H2_RESP_ST_HEADERS<pos:position pos:line="42" pos:column="56"/></name></expr>;<pos:position pos:line="42" pos:column="57"/></expr_stmt>
                }<pos:position pos:line="43" pos:column="18"/></block></then>
                <elseif pos:line="44" pos:column="17">else <if pos:line="44" pos:column="22">if <condition pos:line="44" pos:column="25">(<expr><name><name pos:line="44" pos:column="26">line<pos:position pos:line="44" pos:column="30"/></name><index pos:line="44" pos:column="30">[<expr><literal type="number" pos:line="44" pos:column="31">0<pos:position pos:line="44" pos:column="32"/></literal></expr>]<pos:position pos:line="44" pos:column="33"/></index></name> <operator pos:line="44" pos:column="34">==<pos:position pos:line="44" pos:column="36"/></operator> <literal type="char" pos:line="44" pos:column="37">'\0'<pos:position pos:line="44" pos:column="41"/></literal></expr>)<pos:position pos:line="44" pos:column="42"/></condition><then pos:line="44" pos:column="42"> <block pos:line="44" pos:column="43">{
                    <comment type="block" pos:line="45" pos:column="21">/* end of headers, create the h2_response and
                     * pass the rest of the brigade down the filter
                     * chain.
                     */</comment>
                    <expr_stmt><expr><name pos:line="49" pos:column="21">status<pos:position pos:line="49" pos:column="27"/></name> <operator pos:line="49" pos:column="28">=<pos:position pos:line="49" pos:column="29"/></operator> <call><name pos:line="49" pos:column="30">make_h2_headers<pos:position pos:line="49" pos:column="45"/></name><argument_list pos:line="49" pos:column="45">(<argument><expr><name pos:line="49" pos:column="46">from_h1<pos:position pos:line="49" pos:column="53"/></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="55">f<pos:position pos:line="49" pos:column="56"/></name><operator pos:line="49" pos:column="56">-&gt;<pos:position pos:line="49" pos:column="61"/></operator><name pos:line="49" pos:column="58">r<pos:position pos:line="49" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="61"/></expr_stmt>
                    <if pos:line="50" pos:column="21">if <condition pos:line="50" pos:column="24">(<expr><name><name pos:line="50" pos:column="25">from_h1<pos:position pos:line="50" pos:column="32"/></name><operator pos:line="50" pos:column="32">-&gt;<pos:position pos:line="50" pos:column="37"/></operator><name pos:line="50" pos:column="34">bb<pos:position pos:line="50" pos:column="36"/></name></name></expr>)<pos:position pos:line="50" pos:column="37"/></condition><then pos:line="50" pos:column="37"> <block pos:line="50" pos:column="38">{
                        <expr_stmt><expr><call><name pos:line="51" pos:column="25">apr_brigade_destroy<pos:position pos:line="51" pos:column="44"/></name><argument_list pos:line="51" pos:column="44">(<argument><expr><name><name pos:line="51" pos:column="45">from_h1<pos:position pos:line="51" pos:column="52"/></name><operator pos:line="51" pos:column="52">-&gt;<pos:position pos:line="51" pos:column="57"/></operator><name pos:line="51" pos:column="54">bb<pos:position pos:line="51" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="58"/></expr_stmt>
                        <expr_stmt><expr><name><name pos:line="52" pos:column="25">from_h1<pos:position pos:line="52" pos:column="32"/></name><operator pos:line="52" pos:column="32">-&gt;<pos:position pos:line="52" pos:column="37"/></operator><name pos:line="52" pos:column="34">bb<pos:position pos:line="52" pos:column="36"/></name></name> <operator pos:line="52" pos:column="37">=<pos:position pos:line="52" pos:column="38"/></operator> <name pos:line="52" pos:column="39">NULL<pos:position pos:line="52" pos:column="43"/></name></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>
                    }<pos:position pos:line="53" pos:column="22"/></block></then></if>
                    <if pos:line="54" pos:column="21">if <condition pos:line="54" pos:column="24">(<expr><operator pos:line="54" pos:column="25">!<pos:position pos:line="54" pos:column="26"/></operator><call><name pos:line="54" pos:column="26">APR_BRIGADE_EMPTY<pos:position pos:line="54" pos:column="43"/></name><argument_list pos:line="54" pos:column="43">(<argument><expr><name pos:line="54" pos:column="44">bb<pos:position pos:line="54" pos:column="46"/></name></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="48"/></condition><then pos:line="54" pos:column="48"> <block pos:line="54" pos:column="49">{
                        <return pos:line="55" pos:column="25">return <expr><call><name pos:line="55" pos:column="32">ap_pass_brigade<pos:position pos:line="55" pos:column="47"/></name><argument_list pos:line="55" pos:column="47">(<argument><expr><name><name pos:line="55" pos:column="48">f<pos:position pos:line="55" pos:column="49"/></name><operator pos:line="55" pos:column="49">-&gt;<pos:position pos:line="55" pos:column="54"/></operator><name pos:line="55" pos:column="51">next<pos:position pos:line="55" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="57">bb<pos:position pos:line="55" pos:column="59"/></name></expr></argument>)<pos:position pos:line="55" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="61"/></return>
                    }<pos:position pos:line="56" pos:column="22"/></block></then></if>
                }<pos:position pos:line="57" pos:column="18"/></block></then></if></elseif>
                <else pos:line="58" pos:column="17">else <block pos:line="58" pos:column="22">{
                    <expr_stmt><expr><name pos:line="59" pos:column="21">status<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">=<pos:position pos:line="59" pos:column="29"/></operator> <call><name pos:line="59" pos:column="30">parse_header<pos:position pos:line="59" pos:column="42"/></name><argument_list pos:line="59" pos:column="42">(<argument><expr><name pos:line="59" pos:column="43">from_h1<pos:position pos:line="59" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="52">f<pos:position pos:line="59" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="55">line<pos:position pos:line="59" pos:column="59"/></name></expr></argument>)<pos:position pos:line="59" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="61"/></expr_stmt>
                }<pos:position pos:line="60" pos:column="18"/></block></else></if>
                <break pos:line="61" pos:column="17">break;<pos:position pos:line="61" pos:column="23"/></break>
                
            <default pos:line="63" pos:column="13">default:<pos:position pos:line="63" pos:column="21"/></default>
                <return pos:line="64" pos:column="17">return <expr><call><name pos:line="64" pos:column="24">ap_pass_brigade<pos:position pos:line="64" pos:column="39"/></name><argument_list pos:line="64" pos:column="39">(<argument><expr><name><name pos:line="64" pos:column="40">f<pos:position pos:line="64" pos:column="41"/></name><operator pos:line="64" pos:column="41">-&gt;<pos:position pos:line="64" pos:column="46"/></operator><name pos:line="64" pos:column="43">next<pos:position pos:line="64" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="49">bb<pos:position pos:line="64" pos:column="51"/></name></expr></argument>)<pos:position pos:line="64" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="53"/></return>
        }<pos:position pos:line="65" pos:column="10"/></block></switch>
        
    }<pos:position pos:line="67" pos:column="6"/></block></while>
    
    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">status<pos:position pos:line="69" pos:column="18"/></name></expr>;<pos:position pos:line="69" pos:column="19"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
