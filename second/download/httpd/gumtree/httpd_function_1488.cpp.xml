<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_1488.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">create_entity<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">cache_handle_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">h<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">cache_type_e<pos:position pos:line="1" pos:column="57"/></name></type> <name pos:line="1" pos:column="58">type_e<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">request_rec<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">r<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="42">const<pos:position pos:line="2" pos:column="47"/></specifier> <name pos:line="2" pos:column="48">char<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">key<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="59">apr_off_t<pos:position pos:line="2" pos:column="68"/></name></type> <name pos:line="2" pos:column="69">len<pos:position pos:line="2" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="73"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_pool_t<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">pool<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">cache_object_t<pos:position pos:line="6" pos:column="19"/></name> <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier></type><name pos:line="6" pos:column="21">obj<pos:position pos:line="6" pos:column="24"/></name></decl>, <modifier pos:line="6" pos:column="26">*<pos:position pos:line="6" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="27">tmp_obj<pos:position pos:line="6" pos:column="34"/></name></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">mem_cache_object_t<pos:position pos:line="7" pos:column="23"/></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">mobj<pos:position pos:line="7" pos:column="29"/></name></decl>;<pos:position pos:line="7" pos:column="30"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* we don't support caching of range requests (yet) */</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">r<pos:position pos:line="10" pos:column="10"/></name><operator pos:line="10" pos:column="10">-&gt;<pos:position pos:line="10" pos:column="15"/></operator><name pos:line="10" pos:column="12">status<pos:position pos:line="10" pos:column="18"/></name></name> <operator pos:line="10" pos:column="19">==<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="22">HTTP_PARTIAL_CONTENT<pos:position pos:line="10" pos:column="42"/></name></expr>)<pos:position pos:line="10" pos:column="43"/></condition><then pos:line="10" pos:column="43"> <block pos:line="10" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">ap_log_error<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">APLOG_MARK<pos:position pos:line="11" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="34">APLOG_DEBUG<pos:position pos:line="11" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="47">0<pos:position pos:line="11" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="50">r<pos:position pos:line="11" pos:column="51"/></name><operator pos:line="11" pos:column="51">-&gt;<pos:position pos:line="11" pos:column="56"/></operator><name pos:line="11" pos:column="53">server<pos:position pos:line="11" pos:column="59"/></name></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="12" pos:column="22">"disk_cache: URL %s partial content response not cached"<pos:position pos:line="12" pos:column="78"/></literal></expr></argument>,
                     <argument><expr><name pos:line="13" pos:column="22">key<pos:position pos:line="13" pos:column="25"/></name></expr></argument>)<pos:position pos:line="13" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="27"/></expr_stmt>
        <return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">DECLINED<pos:position pos:line="14" pos:column="24"/></name></expr>;<pos:position pos:line="14" pos:column="25"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">len<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">==<pos:position pos:line="17" pos:column="15"/></operator> <operator pos:line="17" pos:column="16">-<pos:position pos:line="17" pos:column="17"/></operator><literal type="number" pos:line="17" pos:column="17">1<pos:position pos:line="17" pos:column="18"/></literal></expr>)<pos:position pos:line="17" pos:column="19"/></condition><then pos:line="17" pos:column="19"> <block pos:line="17" pos:column="20">{
        <comment type="block" pos:line="18" pos:column="9">/* Caching a streaming response. Assume the response is
         * less than or equal to max_streaming_buffer_size. We will
         * correct all the cache size counters in store_body once
         * we know exactly know how much we are caching.
         */</comment>
        <expr_stmt><expr><name pos:line="23" pos:column="9">len<pos:position pos:line="23" pos:column="12"/></name> <operator pos:line="23" pos:column="13">=<pos:position pos:line="23" pos:column="14"/></operator> <name><name pos:line="23" pos:column="15">sconf<pos:position pos:line="23" pos:column="20"/></name><operator pos:line="23" pos:column="20">-&gt;<pos:position pos:line="23" pos:column="25"/></operator><name pos:line="23" pos:column="22">max_streaming_buffer_size<pos:position pos:line="23" pos:column="47"/></name></name></expr>;<pos:position pos:line="23" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="26" pos:column="5">/* Note: cache_insert() will automatically garbage collect
     * objects from the cache if the max_cache_size threshold is
     * exceeded. This means mod_mem_cache does not need to implement
     * max_cache_size checks.
     */</comment>
    <if pos:line="31" pos:column="5">if <condition pos:line="31" pos:column="8">(<expr><name><name pos:line="31" pos:column="9">len<pos:position pos:line="31" pos:column="12"/></name> <argument_list type="generic" pos:line="31" pos:column="13">&lt; <argument><expr><name><name pos:line="31" pos:column="15">sconf<pos:position pos:line="31" pos:column="20"/></name><operator pos:line="31" pos:column="20">-&gt;<pos:position pos:line="31" pos:column="25"/></operator><name pos:line="31" pos:column="22">min_cache_object_size<pos:position pos:line="31" pos:column="43"/></name></name> <operator pos:line="31" pos:column="44">||<pos:position pos:line="31" pos:column="46"/></operator>
        <name pos:line="32" pos:column="9">len<pos:position pos:line="32" pos:column="12"/></name></expr></argument> &gt;<pos:position pos:line="32" pos:column="17"/></argument_list></name> <name><name pos:line="32" pos:column="15">sconf<pos:position pos:line="32" pos:column="20"/></name><operator pos:line="32" pos:column="20">-&gt;<pos:position pos:line="32" pos:column="25"/></operator><name pos:line="32" pos:column="22">max_cache_object_size<pos:position pos:line="32" pos:column="43"/></name></name></expr>)<pos:position pos:line="32" pos:column="44"/></condition><then pos:line="32" pos:column="44"> <block pos:line="32" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">ap_log_error<pos:position pos:line="33" pos:column="21"/></name><argument_list pos:line="33" pos:column="21">(<argument><expr><name pos:line="33" pos:column="22">APLOG_MARK<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="34">APLOG_DEBUG<pos:position pos:line="33" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="33" pos:column="47">0<pos:position pos:line="33" pos:column="48"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="50">r<pos:position pos:line="33" pos:column="51"/></name><operator pos:line="33" pos:column="51">-&gt;<pos:position pos:line="33" pos:column="56"/></operator><name pos:line="33" pos:column="53">server<pos:position pos:line="33" pos:column="59"/></name></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="34" pos:column="22">"mem_cache: URL %s failed the size check and will not be cached."<pos:position pos:line="34" pos:column="87"/></literal></expr></argument>,
                     <argument><expr><name pos:line="35" pos:column="22">key<pos:position pos:line="35" pos:column="25"/></name></expr></argument>)<pos:position pos:line="35" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="27"/></expr_stmt>
        <return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">DECLINED<pos:position pos:line="36" pos:column="24"/></name></expr>;<pos:position pos:line="36" pos:column="25"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><name pos:line="39" pos:column="9">type_e<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">==<pos:position pos:line="39" pos:column="18"/></operator> <name pos:line="39" pos:column="19">CACHE_TYPE_FILE<pos:position pos:line="39" pos:column="34"/></name></expr>)<pos:position pos:line="39" pos:column="35"/></condition><then pos:line="39" pos:column="35"> <block pos:line="39" pos:column="36">{
        <comment type="block" pos:line="40" pos:column="9">/* CACHE_TYPE_FILE is only valid for local content handled by the
         * default handler. Need a better way to check if the file is
         * local or not.
         */</comment>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><operator pos:line="44" pos:column="13">!<pos:position pos:line="44" pos:column="14"/></operator><name><name pos:line="44" pos:column="14">r<pos:position pos:line="44" pos:column="15"/></name><operator pos:line="44" pos:column="15">-&gt;<pos:position pos:line="44" pos:column="20"/></operator><name pos:line="44" pos:column="17">filename<pos:position pos:line="44" pos:column="25"/></name></name></expr>)<pos:position pos:line="44" pos:column="26"/></condition><then pos:line="44" pos:column="26"> <block pos:line="44" pos:column="27">{
            <return pos:line="45" pos:column="13">return <expr><name pos:line="45" pos:column="20">DECLINED<pos:position pos:line="45" pos:column="28"/></name></expr>;<pos:position pos:line="45" pos:column="29"/></return>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="49" pos:column="5">rv<pos:position pos:line="49" pos:column="7"/></name> <operator pos:line="49" pos:column="8">=<pos:position pos:line="49" pos:column="9"/></operator> <call><name pos:line="49" pos:column="10">apr_pool_create<pos:position pos:line="49" pos:column="25"/></name><argument_list pos:line="49" pos:column="25">(<argument><expr><operator pos:line="49" pos:column="26">&amp;<pos:position pos:line="49" pos:column="31"/></operator><name pos:line="49" pos:column="27">pool<pos:position pos:line="49" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="33">NULL<pos:position pos:line="49" pos:column="37"/></name></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>

    <if pos:line="51" pos:column="5">if <condition pos:line="51" pos:column="8">(<expr><name pos:line="51" pos:column="9">rv<pos:position pos:line="51" pos:column="11"/></name> <operator pos:line="51" pos:column="12">!=<pos:position pos:line="51" pos:column="14"/></operator> <name pos:line="51" pos:column="15">APR_SUCCESS<pos:position pos:line="51" pos:column="26"/></name></expr>)<pos:position pos:line="51" pos:column="27"/></condition><then pos:line="51" pos:column="27"> <block pos:line="51" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="52" pos:column="9">ap_log_error<pos:position pos:line="52" pos:column="21"/></name><argument_list pos:line="52" pos:column="21">(<argument><expr><name pos:line="52" pos:column="22">APLOG_MARK<pos:position pos:line="52" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="34">APLOG_WARNING<pos:position pos:line="52" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="49">rv<pos:position pos:line="52" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="52" pos:column="53">r<pos:position pos:line="52" pos:column="54"/></name><operator pos:line="52" pos:column="54">-&gt;<pos:position pos:line="52" pos:column="59"/></operator><name pos:line="52" pos:column="56">server<pos:position pos:line="52" pos:column="62"/></name></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="53" pos:column="22">"mem_cache: Failed to create memory pool."<pos:position pos:line="53" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="53" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="66"/></expr_stmt>
        <return pos:line="54" pos:column="9">return <expr><name pos:line="54" pos:column="16">DECLINED<pos:position pos:line="54" pos:column="24"/></name></expr>;<pos:position pos:line="54" pos:column="25"/></return>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="57" pos:column="5">/* Allocate and initialize cache_object_t */</comment>
    <expr_stmt><expr><name pos:line="58" pos:column="5">obj<pos:position pos:line="58" pos:column="8"/></name> <operator pos:line="58" pos:column="9">=<pos:position pos:line="58" pos:column="10"/></operator> <call><name pos:line="58" pos:column="11">apr_pcalloc<pos:position pos:line="58" pos:column="22"/></name><argument_list pos:line="58" pos:column="22">(<argument><expr><name pos:line="58" pos:column="23">pool<pos:position pos:line="58" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="58" pos:column="29">sizeof<argument_list pos:line="58" pos:column="35">(<argument><expr><operator pos:line="58" pos:column="36">*<pos:position pos:line="58" pos:column="37"/></operator><name pos:line="58" pos:column="37">obj<pos:position pos:line="58" pos:column="40"/></name></expr></argument>)<pos:position pos:line="58" pos:column="41"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="58" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="43"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="59" pos:column="5">obj<pos:position pos:line="59" pos:column="8"/></name><operator pos:line="59" pos:column="8">-&gt;<pos:position pos:line="59" pos:column="13"/></operator><name pos:line="59" pos:column="10">key<pos:position pos:line="59" pos:column="13"/></name></name> <operator pos:line="59" pos:column="14">=<pos:position pos:line="59" pos:column="15"/></operator> <call><name pos:line="59" pos:column="16">apr_pstrdup<pos:position pos:line="59" pos:column="27"/></name><argument_list pos:line="59" pos:column="27">(<argument><expr><name pos:line="59" pos:column="28">pool<pos:position pos:line="59" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="34">key<pos:position pos:line="59" pos:column="37"/></name></expr></argument>)<pos:position pos:line="59" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="39"/></expr_stmt>

    <comment type="block" pos:line="61" pos:column="5">/* Allocate and init mem_cache_object_t */</comment>
    <expr_stmt><expr><name pos:line="62" pos:column="5">mobj<pos:position pos:line="62" pos:column="9"/></name> <operator pos:line="62" pos:column="10">=<pos:position pos:line="62" pos:column="11"/></operator> <call><name pos:line="62" pos:column="12">apr_pcalloc<pos:position pos:line="62" pos:column="23"/></name><argument_list pos:line="62" pos:column="23">(<argument><expr><name pos:line="62" pos:column="24">pool<pos:position pos:line="62" pos:column="28"/></name></expr></argument>, <argument><expr><sizeof pos:line="62" pos:column="30">sizeof<argument_list pos:line="62" pos:column="36">(<argument><expr><operator pos:line="62" pos:column="37">*<pos:position pos:line="62" pos:column="38"/></operator><name pos:line="62" pos:column="38">mobj<pos:position pos:line="62" pos:column="42"/></name></expr></argument>)<pos:position pos:line="62" pos:column="43"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="62" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="63" pos:column="5">mobj<pos:position pos:line="63" pos:column="9"/></name><operator pos:line="63" pos:column="9">-&gt;<pos:position pos:line="63" pos:column="14"/></operator><name pos:line="63" pos:column="11">pool<pos:position pos:line="63" pos:column="15"/></name></name> <operator pos:line="63" pos:column="16">=<pos:position pos:line="63" pos:column="17"/></operator> <name pos:line="63" pos:column="18">pool<pos:position pos:line="63" pos:column="22"/></name></expr>;<pos:position pos:line="63" pos:column="23"/></expr_stmt>

    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name pos:line="65" pos:column="9">threaded_mpm<pos:position pos:line="65" pos:column="21"/></name></expr>)<pos:position pos:line="65" pos:column="22"/></condition><then pos:line="65" pos:column="22"> <block pos:line="65" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">apr_thread_mutex_create<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(<argument><expr><operator pos:line="66" pos:column="33">&amp;<pos:position pos:line="66" pos:column="38"/></operator><name><name pos:line="66" pos:column="34">mobj<pos:position pos:line="66" pos:column="38"/></name><operator pos:line="66" pos:column="38">-&gt;<pos:position pos:line="66" pos:column="43"/></operator><name pos:line="66" pos:column="40">lock<pos:position pos:line="66" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="46">APR_THREAD_MUTEX_DEFAULT<pos:position pos:line="66" pos:column="70"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="72">pool<pos:position pos:line="66" pos:column="76"/></name></expr></argument>)<pos:position pos:line="66" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="69" pos:column="5">/* Finish initing the cache object */</comment>
    <expr_stmt><expr><call><name pos:line="70" pos:column="5">apr_atomic_set32<pos:position pos:line="70" pos:column="21"/></name><argument_list pos:line="70" pos:column="21">(<argument><expr><operator pos:line="70" pos:column="22">&amp;<pos:position pos:line="70" pos:column="27"/></operator><name><name pos:line="70" pos:column="23">obj<pos:position pos:line="70" pos:column="26"/></name><operator pos:line="70" pos:column="26">-&gt;<pos:position pos:line="70" pos:column="31"/></operator><name pos:line="70" pos:column="28">refcount<pos:position pos:line="70" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="70" pos:column="38">1<pos:position pos:line="70" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">mobj<pos:position pos:line="71" pos:column="9"/></name><operator pos:line="71" pos:column="9">-&gt;<pos:position pos:line="71" pos:column="14"/></operator><name pos:line="71" pos:column="11">total_refs<pos:position pos:line="71" pos:column="21"/></name></name> <operator pos:line="71" pos:column="22">=<pos:position pos:line="71" pos:column="23"/></operator> <literal type="number" pos:line="71" pos:column="24">1<pos:position pos:line="71" pos:column="25"/></literal></expr>;<pos:position pos:line="71" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="72" pos:column="5">obj<pos:position pos:line="72" pos:column="8"/></name><operator pos:line="72" pos:column="8">-&gt;<pos:position pos:line="72" pos:column="13"/></operator><name pos:line="72" pos:column="10">complete<pos:position pos:line="72" pos:column="18"/></name></name> <operator pos:line="72" pos:column="19">=<pos:position pos:line="72" pos:column="20"/></operator> <literal type="number" pos:line="72" pos:column="21">0<pos:position pos:line="72" pos:column="22"/></literal></expr>;<pos:position pos:line="72" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">obj<pos:position pos:line="73" pos:column="8"/></name><operator pos:line="73" pos:column="8">-&gt;<pos:position pos:line="73" pos:column="13"/></operator><name pos:line="73" pos:column="10">vobj<pos:position pos:line="73" pos:column="14"/></name></name> <operator pos:line="73" pos:column="15">=<pos:position pos:line="73" pos:column="16"/></operator> <name pos:line="73" pos:column="17">mobj<pos:position pos:line="73" pos:column="21"/></name></expr>;<pos:position pos:line="73" pos:column="22"/></expr_stmt>
    <comment type="block" pos:line="74" pos:column="5">/* Safe cast: We tested &lt; sconf-&gt;max_cache_object_size above */</comment>
    <expr_stmt><expr><name><name pos:line="75" pos:column="5">mobj<pos:position pos:line="75" pos:column="9"/></name><operator pos:line="75" pos:column="9">-&gt;<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="11">m_len<pos:position pos:line="75" pos:column="16"/></name></name> <operator pos:line="75" pos:column="17">=<pos:position pos:line="75" pos:column="18"/></operator> <operator pos:line="75" pos:column="19">(<pos:position pos:line="75" pos:column="20"/></operator><name pos:line="75" pos:column="20">apr_size_t<pos:position pos:line="75" pos:column="30"/></name><operator pos:line="75" pos:column="30">)<pos:position pos:line="75" pos:column="31"/></operator><name pos:line="75" pos:column="31">len<pos:position pos:line="75" pos:column="34"/></name></expr>;<pos:position pos:line="75" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="76" pos:column="5">mobj<pos:position pos:line="76" pos:column="9"/></name><operator pos:line="76" pos:column="9">-&gt;<pos:position pos:line="76" pos:column="14"/></operator><name pos:line="76" pos:column="11">type<pos:position pos:line="76" pos:column="15"/></name></name> <operator pos:line="76" pos:column="16">=<pos:position pos:line="76" pos:column="17"/></operator> <name pos:line="76" pos:column="18">type_e<pos:position pos:line="76" pos:column="24"/></name></expr>;<pos:position pos:line="76" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="78" pos:column="5">/* Place the cache_object_t into the hash table.
     * Note: Perhaps we should wait to put the object in the
     * hash table when the object is complete?  I add the object here to
     * avoid multiple threads attempting to cache the same content only
     * to discover at the very end that only one of them will succeed.
     * Furthermore, adding the cache object to the table at the end could
     * open up a subtle but easy to exploit DoS hole: someone could request
     * a very large file with multiple requests. Better to detect this here
     * rather than after the cache object has been completely built and
     * initialized...
     * XXX Need a way to insert into the cache w/o such coarse grained locking
     */</comment>
    <if pos:line="90" pos:column="5">if <condition pos:line="90" pos:column="8">(<expr><name><name pos:line="90" pos:column="9">sconf<pos:position pos:line="90" pos:column="14"/></name><operator pos:line="90" pos:column="14">-&gt;<pos:position pos:line="90" pos:column="19"/></operator><name pos:line="90" pos:column="16">lock<pos:position pos:line="90" pos:column="20"/></name></name></expr>)<pos:position pos:line="90" pos:column="21"/></condition><then pos:line="90" pos:column="21"> <block pos:line="90" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="91" pos:column="30"/></name><argument_list pos:line="91" pos:column="30">(<argument><expr><name><name pos:line="91" pos:column="31">sconf<pos:position pos:line="91" pos:column="36"/></name><operator pos:line="91" pos:column="36">-&gt;<pos:position pos:line="91" pos:column="41"/></operator><name pos:line="91" pos:column="38">lock<pos:position pos:line="91" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="93" pos:column="5">tmp_obj<pos:position pos:line="93" pos:column="12"/></name> <operator pos:line="93" pos:column="13">=<pos:position pos:line="93" pos:column="14"/></operator> <operator pos:line="93" pos:column="15">(<pos:position pos:line="93" pos:column="16"/></operator><name pos:line="93" pos:column="16">cache_object_t<pos:position pos:line="93" pos:column="30"/></name> <operator pos:line="93" pos:column="31">*<pos:position pos:line="93" pos:column="32"/></operator><operator pos:line="93" pos:column="32">)<pos:position pos:line="93" pos:column="33"/></operator> <call><name pos:line="93" pos:column="34">cache_find<pos:position pos:line="93" pos:column="44"/></name><argument_list pos:line="93" pos:column="44">(<argument><expr><name><name pos:line="93" pos:column="45">sconf<pos:position pos:line="93" pos:column="50"/></name><operator pos:line="93" pos:column="50">-&gt;<pos:position pos:line="93" pos:column="55"/></operator><name pos:line="93" pos:column="52">cache_cache<pos:position pos:line="93" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="93" pos:column="65">key<pos:position pos:line="93" pos:column="68"/></name></expr></argument>)<pos:position pos:line="93" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="70"/></expr_stmt>

    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><operator pos:line="95" pos:column="9">!<pos:position pos:line="95" pos:column="10"/></operator><name pos:line="95" pos:column="10">tmp_obj<pos:position pos:line="95" pos:column="17"/></name></expr>)<pos:position pos:line="95" pos:column="18"/></condition><then pos:line="95" pos:column="18"> <block pos:line="95" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="96" pos:column="9">cache_insert<pos:position pos:line="96" pos:column="21"/></name><argument_list pos:line="96" pos:column="21">(<argument><expr><name><name pos:line="96" pos:column="22">sconf<pos:position pos:line="96" pos:column="27"/></name><operator pos:line="96" pos:column="27">-&gt;<pos:position pos:line="96" pos:column="32"/></operator><name pos:line="96" pos:column="29">cache_cache<pos:position pos:line="96" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="42">obj<pos:position pos:line="96" pos:column="45"/></name></expr></argument>)<pos:position pos:line="96" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="47"/></expr_stmt>
        <comment type="block" pos:line="97" pos:column="9">/* Add a refcount to account for the reference by the
         * hashtable in the cache. Refcount should be 2 now, one
         * for this thread, and one for the cache.
         */</comment>
        <expr_stmt><expr><call><name pos:line="101" pos:column="9">apr_atomic_inc32<pos:position pos:line="101" pos:column="25"/></name><argument_list pos:line="101" pos:column="25">(<argument><expr><operator pos:line="101" pos:column="26">&amp;<pos:position pos:line="101" pos:column="31"/></operator><name><name pos:line="101" pos:column="27">obj<pos:position pos:line="101" pos:column="30"/></name><operator pos:line="101" pos:column="30">-&gt;<pos:position pos:line="101" pos:column="35"/></operator><name pos:line="101" pos:column="32">refcount<pos:position pos:line="101" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="101" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><name><name pos:line="103" pos:column="9">sconf<pos:position pos:line="103" pos:column="14"/></name><operator pos:line="103" pos:column="14">-&gt;<pos:position pos:line="103" pos:column="19"/></operator><name pos:line="103" pos:column="16">lock<pos:position pos:line="103" pos:column="20"/></name></name></expr>)<pos:position pos:line="103" pos:column="21"/></condition><then pos:line="103" pos:column="21"> <block pos:line="103" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="104" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="104" pos:column="32"/></name><argument_list pos:line="104" pos:column="32">(<argument><expr><name><name pos:line="104" pos:column="33">sconf<pos:position pos:line="104" pos:column="38"/></name><operator pos:line="104" pos:column="38">-&gt;<pos:position pos:line="104" pos:column="43"/></operator><name pos:line="104" pos:column="40">lock<pos:position pos:line="104" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="104" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>

    <if pos:line="107" pos:column="5">if <condition pos:line="107" pos:column="8">(<expr><name pos:line="107" pos:column="9">tmp_obj<pos:position pos:line="107" pos:column="16"/></name></expr>)<pos:position pos:line="107" pos:column="17"/></condition><then pos:line="107" pos:column="17"> <block pos:line="107" pos:column="18">{
        <comment type="block" pos:line="108" pos:column="9">/* This thread collided with another thread loading the same object
         * into the cache at the same time. Defer to the other thread which
         * is further along.
         */</comment>
        <expr_stmt><expr><call><name pos:line="112" pos:column="9">cleanup_cache_object<pos:position pos:line="112" pos:column="29"/></name><argument_list pos:line="112" pos:column="29">(<argument><expr><name pos:line="112" pos:column="30">obj<pos:position pos:line="112" pos:column="33"/></name></expr></argument>)<pos:position pos:line="112" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="35"/></expr_stmt>
        <return pos:line="113" pos:column="9">return <expr><name pos:line="113" pos:column="16">DECLINED<pos:position pos:line="113" pos:column="24"/></name></expr>;<pos:position pos:line="113" pos:column="25"/></return>
    }<pos:position pos:line="114" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="116" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="116" pos:column="30"/></name><argument_list pos:line="116" pos:column="30">(<argument><expr><name><name pos:line="116" pos:column="31">r<pos:position pos:line="116" pos:column="32"/></name><operator pos:line="116" pos:column="32">-&gt;<pos:position pos:line="116" pos:column="37"/></operator><name pos:line="116" pos:column="34">pool<pos:position pos:line="116" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="40">obj<pos:position pos:line="116" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="45">decrement_refcount<pos:position pos:line="116" pos:column="63"/></name></expr></argument>,
                              <argument><expr><name pos:line="117" pos:column="31">apr_pool_cleanup_null<pos:position pos:line="117" pos:column="52"/></name></expr></argument>)<pos:position pos:line="117" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="54"/></expr_stmt>

    <comment type="block" pos:line="119" pos:column="5">/* Populate the cache handle */</comment>
    <expr_stmt><expr><name><name pos:line="120" pos:column="5">h<pos:position pos:line="120" pos:column="6"/></name><operator pos:line="120" pos:column="6">-&gt;<pos:position pos:line="120" pos:column="11"/></operator><name pos:line="120" pos:column="8">cache_obj<pos:position pos:line="120" pos:column="17"/></name></name> <operator pos:line="120" pos:column="18">=<pos:position pos:line="120" pos:column="19"/></operator> <name pos:line="120" pos:column="20">obj<pos:position pos:line="120" pos:column="23"/></name></expr>;<pos:position pos:line="120" pos:column="24"/></expr_stmt>

    <return pos:line="122" pos:column="5">return <expr><name pos:line="122" pos:column="12">OK<pos:position pos:line="122" pos:column="14"/></name></expr>;<pos:position pos:line="122" pos:column="15"/></return>
}<pos:position pos:line="123" pos:column="2"/></block></function></unit>
