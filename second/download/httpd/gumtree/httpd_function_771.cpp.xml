<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_771.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">cmd_rewritecond<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">cmd_parms<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">cmd<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">void<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">in_dconf<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                                   <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">char<pos:position pos:line="2" pos:column="46"/></name> <modifier pos:line="2" pos:column="47">*<pos:position pos:line="2" pos:column="48"/></modifier></type><name pos:line="2" pos:column="48">in_str<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="55"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">rewrite_perdir_conf<pos:position pos:line="4" pos:column="24"/></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">dconf<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><name pos:line="4" pos:column="34">in_dconf<pos:position pos:line="4" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">str<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><call><name pos:line="5" pos:column="17">apr_pstrdup<pos:position pos:line="5" pos:column="28"/></name><argument_list pos:line="5" pos:column="28">(<argument><expr><name><name pos:line="5" pos:column="29">cmd<pos:position pos:line="5" pos:column="32"/></name><operator pos:line="5" pos:column="32">-&gt;<pos:position pos:line="5" pos:column="37"/></operator><name pos:line="5" pos:column="34">pool<pos:position pos:line="5" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="5" pos:column="40">in_str<pos:position pos:line="5" pos:column="46"/></name></expr></argument>)<pos:position pos:line="5" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="5" pos:column="48"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">rewrite_server_conf<pos:position pos:line="6" pos:column="24"/></name> <modifier pos:line="6" pos:column="25">*<pos:position pos:line="6" pos:column="26"/></modifier></type><name pos:line="6" pos:column="26">sconf<pos:position pos:line="6" pos:column="31"/></name></decl>;<pos:position pos:line="6" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">rewritecond_entry<pos:position pos:line="7" pos:column="22"/></name> <modifier pos:line="7" pos:column="23">*<pos:position pos:line="7" pos:column="24"/></modifier></type><name pos:line="7" pos:column="24">newcond<pos:position pos:line="7" pos:column="31"/></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">ap_regex_t<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">regexp<pos:position pos:line="8" pos:column="23"/></name></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">a1<pos:position pos:line="9" pos:column="13"/></name></decl>;<pos:position pos:line="9" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">a2<pos:position pos:line="10" pos:column="13"/></name></decl>;<pos:position pos:line="10" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">a3<pos:position pos:line="11" pos:column="13"/></name></decl>;<pos:position pos:line="11" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">err<pos:position pos:line="12" pos:column="20"/></name></decl>;<pos:position pos:line="12" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="14" pos:column="5">sconf<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <call><name pos:line="14" pos:column="13">ap_get_module_config<pos:position pos:line="14" pos:column="33"/></name><argument_list pos:line="14" pos:column="33">(<argument><expr><name><name pos:line="14" pos:column="34">cmd<pos:position pos:line="14" pos:column="37"/></name><operator pos:line="14" pos:column="37">-&gt;<pos:position pos:line="14" pos:column="42"/></operator><name pos:line="14" pos:column="39">server<pos:position pos:line="14" pos:column="45"/></name><operator pos:line="14" pos:column="45">-&gt;<pos:position pos:line="14" pos:column="50"/></operator><name pos:line="14" pos:column="47">module_config<pos:position pos:line="14" pos:column="60"/></name></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="62">&amp;<pos:position pos:line="14" pos:column="67"/></operator><name pos:line="14" pos:column="63">rewrite_module<pos:position pos:line="14" pos:column="77"/></name></expr></argument>)<pos:position pos:line="14" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="79"/></expr_stmt>

    <comment type="block" pos:line="16" pos:column="5">/*  make a new entry in the internal temporary rewrite rule list */</comment>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">cmd<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">path<pos:position pos:line="17" pos:column="18"/></name></name> <operator pos:line="17" pos:column="19">==<pos:position pos:line="17" pos:column="21"/></operator> <name pos:line="17" pos:column="22">NULL<pos:position pos:line="17" pos:column="26"/></name></expr>)<pos:position pos:line="17" pos:column="27"/></condition><then pos:line="17" pos:column="27"> <block pos:line="17" pos:column="28">{   <comment type="block" pos:line="17" pos:column="32">/* is server command */</comment>
        <expr_stmt><expr><name pos:line="18" pos:column="9">newcond<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <call><name pos:line="18" pos:column="19">apr_array_push<pos:position pos:line="18" pos:column="33"/></name><argument_list pos:line="18" pos:column="33">(<argument><expr><name><name pos:line="18" pos:column="34">sconf<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">rewriteconds<pos:position pos:line="18" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then>
    <else pos:line="20" pos:column="5">else <block pos:line="20" pos:column="10">{                     <comment type="block" pos:line="20" pos:column="32">/* is per-directory command */</comment>
        <expr_stmt><expr><name pos:line="21" pos:column="9">newcond<pos:position pos:line="21" pos:column="16"/></name> <operator pos:line="21" pos:column="17">=<pos:position pos:line="21" pos:column="18"/></operator> <call><name pos:line="21" pos:column="19">apr_array_push<pos:position pos:line="21" pos:column="33"/></name><argument_list pos:line="21" pos:column="33">(<argument><expr><name><name pos:line="21" pos:column="34">dconf<pos:position pos:line="21" pos:column="39"/></name><operator pos:line="21" pos:column="39">-&gt;<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="41">rewriteconds<pos:position pos:line="21" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="55"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="24" pos:column="5">/* parse the argument line ourself
     * a1 .. a3 are substrings of str, which is a fresh copy
     * of the argument line. So we can use a1 .. a3 without
     * copying them again.
     */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name pos:line="29" pos:column="9">parseargline<pos:position pos:line="29" pos:column="21"/></name><argument_list pos:line="29" pos:column="21">(<argument><expr><name pos:line="29" pos:column="22">str<pos:position pos:line="29" pos:column="25"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="27">&amp;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="28">a1<pos:position pos:line="29" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="32">&amp;<pos:position pos:line="29" pos:column="37"/></operator><name pos:line="29" pos:column="33">a2<pos:position pos:line="29" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="29" pos:column="37">&amp;<pos:position pos:line="29" pos:column="42"/></operator><name pos:line="29" pos:column="38">a3<pos:position pos:line="29" pos:column="40"/></name></expr></argument>)<pos:position pos:line="29" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <block pos:line="29" pos:column="43">{
        <return pos:line="30" pos:column="9">return <expr><call><name pos:line="30" pos:column="16">apr_pstrcat<pos:position pos:line="30" pos:column="27"/></name><argument_list pos:line="30" pos:column="27">(<argument><expr><name><name pos:line="30" pos:column="28">cmd<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">-&gt;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="33">pool<pos:position pos:line="30" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="30" pos:column="39">"RewriteCond: bad argument line '"<pos:position pos:line="30" pos:column="73"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="75">str<pos:position pos:line="30" pos:column="78"/></name></expr></argument>,
                           <argument><expr><literal type="string" pos:line="31" pos:column="28">"'"<pos:position pos:line="31" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="33">NULL<pos:position pos:line="31" pos:column="37"/></name></expr></argument>)<pos:position pos:line="31" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="39"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="34" pos:column="5">/* arg1: the input string */</comment>
    <expr_stmt><expr><name><name pos:line="35" pos:column="5">newcond<pos:position pos:line="35" pos:column="12"/></name><operator pos:line="35" pos:column="12">-&gt;<pos:position pos:line="35" pos:column="17"/></operator><name pos:line="35" pos:column="14">input<pos:position pos:line="35" pos:column="19"/></name></name> <operator pos:line="35" pos:column="20">=<pos:position pos:line="35" pos:column="21"/></operator> <name pos:line="35" pos:column="22">a1<pos:position pos:line="35" pos:column="24"/></name></expr>;<pos:position pos:line="35" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="37" pos:column="5">/* arg3: optional flags field
     * (this has to be parsed first, because we need to
     *  know if the regex should be compiled with ICASE!)
     */</comment>
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">newcond<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">-&gt;<pos:position pos:line="41" pos:column="17"/></operator><name pos:line="41" pos:column="14">flags<pos:position pos:line="41" pos:column="19"/></name></name> <operator pos:line="41" pos:column="20">=<pos:position pos:line="41" pos:column="21"/></operator> <name pos:line="41" pos:column="22">CONDFLAG_NONE<pos:position pos:line="41" pos:column="35"/></name></expr>;<pos:position pos:line="41" pos:column="36"/></expr_stmt>
    <if pos:line="42" pos:column="5">if <condition pos:line="42" pos:column="8">(<expr><name pos:line="42" pos:column="9">a3<pos:position pos:line="42" pos:column="11"/></name> <operator pos:line="42" pos:column="12">!=<pos:position pos:line="42" pos:column="14"/></operator> <name pos:line="42" pos:column="15">NULL<pos:position pos:line="42" pos:column="19"/></name></expr>)<pos:position pos:line="42" pos:column="20"/></condition><then pos:line="42" pos:column="20"> <block pos:line="42" pos:column="21">{
        <if pos:line="43" pos:column="9">if <condition pos:line="43" pos:column="12">(<expr><operator pos:line="43" pos:column="13">(<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">err<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <call><name pos:line="43" pos:column="20">cmd_parseflagfield<pos:position pos:line="43" pos:column="38"/></name><argument_list pos:line="43" pos:column="38">(<argument><expr><name><name pos:line="43" pos:column="39">cmd<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">-&gt;<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="44">pool<pos:position pos:line="43" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="50">newcond<pos:position pos:line="43" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="59">a3<pos:position pos:line="43" pos:column="61"/></name></expr></argument>,
                                      <argument><expr><name pos:line="44" pos:column="39">cmd_rewritecond_setflag<pos:position pos:line="44" pos:column="62"/></name></expr></argument>)<pos:position pos:line="44" pos:column="63"/></argument_list></call><operator pos:line="44" pos:column="63">)<pos:position pos:line="44" pos:column="64"/></operator> <operator pos:line="44" pos:column="65">!=<pos:position pos:line="44" pos:column="67"/></operator> <name pos:line="44" pos:column="68">NULL<pos:position pos:line="44" pos:column="72"/></name></expr>)<pos:position pos:line="44" pos:column="73"/></condition><then pos:line="44" pos:column="73"> <block pos:line="44" pos:column="74">{
            <return pos:line="45" pos:column="13">return <expr><name pos:line="45" pos:column="20">err<pos:position pos:line="45" pos:column="23"/></name></expr>;<pos:position pos:line="45" pos:column="24"/></return>
        }<pos:position pos:line="46" pos:column="10"/></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="49" pos:column="5">/* arg2: the pattern */</comment>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><operator pos:line="50" pos:column="9">*<pos:position pos:line="50" pos:column="10"/></operator><name pos:line="50" pos:column="10">a2<pos:position pos:line="50" pos:column="12"/></name> <operator pos:line="50" pos:column="13">==<pos:position pos:line="50" pos:column="15"/></operator> <literal type="char" pos:line="50" pos:column="16">'!'<pos:position pos:line="50" pos:column="19"/></literal></expr>)<pos:position pos:line="50" pos:column="20"/></condition><then pos:line="50" pos:column="20"> <block pos:line="50" pos:column="21">{
        <expr_stmt><expr><name><name pos:line="51" pos:column="9">newcond<pos:position pos:line="51" pos:column="16"/></name><operator pos:line="51" pos:column="16">-&gt;<pos:position pos:line="51" pos:column="21"/></operator><name pos:line="51" pos:column="18">flags<pos:position pos:line="51" pos:column="23"/></name></name> <operator pos:line="51" pos:column="24">|=<pos:position pos:line="51" pos:column="26"/></operator> <name pos:line="51" pos:column="27">CONDFLAG_NOTMATCH<pos:position pos:line="51" pos:column="44"/></name></expr>;<pos:position pos:line="51" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="52" pos:column="9">++<pos:position pos:line="52" pos:column="11"/></operator><name pos:line="52" pos:column="11">a2<pos:position pos:line="52" pos:column="13"/></name></expr>;<pos:position pos:line="52" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="55" pos:column="5">/* determine the pattern type */</comment>
    <expr_stmt><expr><name><name pos:line="56" pos:column="5">newcond<pos:position pos:line="56" pos:column="12"/></name><operator pos:line="56" pos:column="12">-&gt;<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="14">ptype<pos:position pos:line="56" pos:column="19"/></name></name> <operator pos:line="56" pos:column="20">=<pos:position pos:line="56" pos:column="21"/></operator> <literal type="number" pos:line="56" pos:column="22">0<pos:position pos:line="56" pos:column="23"/></literal></expr>;<pos:position pos:line="56" pos:column="24"/></expr_stmt>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><operator pos:line="57" pos:column="9">*<pos:position pos:line="57" pos:column="10"/></operator><name pos:line="57" pos:column="10">a2<pos:position pos:line="57" pos:column="12"/></name> <operator pos:line="57" pos:column="13">&amp;&amp;<pos:position pos:line="57" pos:column="23"/></operator> <name><name pos:line="57" pos:column="16">a2<pos:position pos:line="57" pos:column="18"/></name><index pos:line="57" pos:column="18">[<expr><literal type="number" pos:line="57" pos:column="19">1<pos:position pos:line="57" pos:column="20"/></literal></expr>]<pos:position pos:line="57" pos:column="21"/></index></name></expr>)<pos:position pos:line="57" pos:column="22"/></condition><then pos:line="57" pos:column="22"> <block pos:line="57" pos:column="23">{
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><operator pos:line="58" pos:column="13">!<pos:position pos:line="58" pos:column="14"/></operator><name><name pos:line="58" pos:column="14">a2<pos:position pos:line="58" pos:column="16"/></name><index pos:line="58" pos:column="16">[<expr><literal type="number" pos:line="58" pos:column="17">2<pos:position pos:line="58" pos:column="18"/></literal></expr>]<pos:position pos:line="58" pos:column="19"/></index></name> <operator pos:line="58" pos:column="20">&amp;&amp;<pos:position pos:line="58" pos:column="30"/></operator> <operator pos:line="58" pos:column="23">*<pos:position pos:line="58" pos:column="24"/></operator><name pos:line="58" pos:column="24">a2<pos:position pos:line="58" pos:column="26"/></name> <operator pos:line="58" pos:column="27">==<pos:position pos:line="58" pos:column="29"/></operator> <literal type="char" pos:line="58" pos:column="30">'-'<pos:position pos:line="58" pos:column="33"/></literal></expr>)<pos:position pos:line="58" pos:column="34"/></condition><then pos:line="58" pos:column="34"> <block pos:line="58" pos:column="35">{
            <switch pos:line="59" pos:column="13">switch <condition pos:line="59" pos:column="20">(<expr><name><name pos:line="59" pos:column="21">a2<pos:position pos:line="59" pos:column="23"/></name><index pos:line="59" pos:column="23">[<expr><literal type="number" pos:line="59" pos:column="24">1<pos:position pos:line="59" pos:column="25"/></literal></expr>]<pos:position pos:line="59" pos:column="26"/></index></name></expr>)<pos:position pos:line="59" pos:column="27"/></condition> <block pos:line="59" pos:column="28">{
            <case pos:line="60" pos:column="13">case <expr><literal type="char" pos:line="60" pos:column="18">'f'<pos:position pos:line="60" pos:column="21"/></literal></expr>:<pos:position pos:line="60" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="60" pos:column="23">newcond<pos:position pos:line="60" pos:column="30"/></name><operator pos:line="60" pos:column="30">-&gt;<pos:position pos:line="60" pos:column="35"/></operator><name pos:line="60" pos:column="32">ptype<pos:position pos:line="60" pos:column="37"/></name></name> <operator pos:line="60" pos:column="38">=<pos:position pos:line="60" pos:column="39"/></operator> <name pos:line="60" pos:column="40">CONDPAT_FILE_EXISTS<pos:position pos:line="60" pos:column="59"/></name></expr>;<pos:position pos:line="60" pos:column="60"/></expr_stmt> <break pos:line="60" pos:column="61">break;<pos:position pos:line="60" pos:column="67"/></break>
            <case pos:line="61" pos:column="13">case <expr><literal type="char" pos:line="61" pos:column="18">'s'<pos:position pos:line="61" pos:column="21"/></literal></expr>:<pos:position pos:line="61" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="61" pos:column="23">newcond<pos:position pos:line="61" pos:column="30"/></name><operator pos:line="61" pos:column="30">-&gt;<pos:position pos:line="61" pos:column="35"/></operator><name pos:line="61" pos:column="32">ptype<pos:position pos:line="61" pos:column="37"/></name></name> <operator pos:line="61" pos:column="38">=<pos:position pos:line="61" pos:column="39"/></operator> <name pos:line="61" pos:column="40">CONDPAT_FILE_SIZE<pos:position pos:line="61" pos:column="57"/></name></expr>;<pos:position pos:line="61" pos:column="58"/></expr_stmt>   <break pos:line="61" pos:column="61">break;<pos:position pos:line="61" pos:column="67"/></break>
            <case pos:line="62" pos:column="13">case <expr><literal type="char" pos:line="62" pos:column="18">'l'<pos:position pos:line="62" pos:column="21"/></literal></expr>:<pos:position pos:line="62" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="62" pos:column="23">newcond<pos:position pos:line="62" pos:column="30"/></name><operator pos:line="62" pos:column="30">-&gt;<pos:position pos:line="62" pos:column="35"/></operator><name pos:line="62" pos:column="32">ptype<pos:position pos:line="62" pos:column="37"/></name></name> <operator pos:line="62" pos:column="38">=<pos:position pos:line="62" pos:column="39"/></operator> <name pos:line="62" pos:column="40">CONDPAT_FILE_LINK<pos:position pos:line="62" pos:column="57"/></name></expr>;<pos:position pos:line="62" pos:column="58"/></expr_stmt>   <break pos:line="62" pos:column="61">break;<pos:position pos:line="62" pos:column="67"/></break>
            <case pos:line="63" pos:column="13">case <expr><literal type="char" pos:line="63" pos:column="18">'d'<pos:position pos:line="63" pos:column="21"/></literal></expr>:<pos:position pos:line="63" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="63" pos:column="23">newcond<pos:position pos:line="63" pos:column="30"/></name><operator pos:line="63" pos:column="30">-&gt;<pos:position pos:line="63" pos:column="35"/></operator><name pos:line="63" pos:column="32">ptype<pos:position pos:line="63" pos:column="37"/></name></name> <operator pos:line="63" pos:column="38">=<pos:position pos:line="63" pos:column="39"/></operator> <name pos:line="63" pos:column="40">CONDPAT_FILE_DIR<pos:position pos:line="63" pos:column="56"/></name></expr>;<pos:position pos:line="63" pos:column="57"/></expr_stmt>    <break pos:line="63" pos:column="61">break;<pos:position pos:line="63" pos:column="67"/></break>
            <case pos:line="64" pos:column="13">case <expr><literal type="char" pos:line="64" pos:column="18">'x'<pos:position pos:line="64" pos:column="21"/></literal></expr>:<pos:position pos:line="64" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="64" pos:column="23">newcond<pos:position pos:line="64" pos:column="30"/></name><operator pos:line="64" pos:column="30">-&gt;<pos:position pos:line="64" pos:column="35"/></operator><name pos:line="64" pos:column="32">ptype<pos:position pos:line="64" pos:column="37"/></name></name> <operator pos:line="64" pos:column="38">=<pos:position pos:line="64" pos:column="39"/></operator> <name pos:line="64" pos:column="40">CONDPAT_FILE_XBIT<pos:position pos:line="64" pos:column="57"/></name></expr>;<pos:position pos:line="64" pos:column="58"/></expr_stmt>   <break pos:line="64" pos:column="61">break;<pos:position pos:line="64" pos:column="67"/></break>
            <case pos:line="65" pos:column="13">case <expr><literal type="char" pos:line="65" pos:column="18">'U'<pos:position pos:line="65" pos:column="21"/></literal></expr>:<pos:position pos:line="65" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="65" pos:column="23">newcond<pos:position pos:line="65" pos:column="30"/></name><operator pos:line="65" pos:column="30">-&gt;<pos:position pos:line="65" pos:column="35"/></operator><name pos:line="65" pos:column="32">ptype<pos:position pos:line="65" pos:column="37"/></name></name> <operator pos:line="65" pos:column="38">=<pos:position pos:line="65" pos:column="39"/></operator> <name pos:line="65" pos:column="40">CONDPAT_LU_URL<pos:position pos:line="65" pos:column="54"/></name></expr>;<pos:position pos:line="65" pos:column="55"/></expr_stmt>      <break pos:line="65" pos:column="61">break;<pos:position pos:line="65" pos:column="67"/></break>
            <case pos:line="66" pos:column="13">case <expr><literal type="char" pos:line="66" pos:column="18">'F'<pos:position pos:line="66" pos:column="21"/></literal></expr>:<pos:position pos:line="66" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="66" pos:column="23">newcond<pos:position pos:line="66" pos:column="30"/></name><operator pos:line="66" pos:column="30">-&gt;<pos:position pos:line="66" pos:column="35"/></operator><name pos:line="66" pos:column="32">ptype<pos:position pos:line="66" pos:column="37"/></name></name> <operator pos:line="66" pos:column="38">=<pos:position pos:line="66" pos:column="39"/></operator> <name pos:line="66" pos:column="40">CONDPAT_LU_FILE<pos:position pos:line="66" pos:column="55"/></name></expr>;<pos:position pos:line="66" pos:column="56"/></expr_stmt>     <break pos:line="66" pos:column="61">break;<pos:position pos:line="66" pos:column="67"/></break>
            }<pos:position pos:line="67" pos:column="14"/></block></switch>
        }<pos:position pos:line="68" pos:column="10"/></block></then>
        <else pos:line="69" pos:column="9">else <block pos:line="69" pos:column="14">{
            <switch pos:line="70" pos:column="13">switch <condition pos:line="70" pos:column="20">(<expr><operator pos:line="70" pos:column="21">*<pos:position pos:line="70" pos:column="22"/></operator><name pos:line="70" pos:column="22">a2<pos:position pos:line="70" pos:column="24"/></name></expr>)<pos:position pos:line="70" pos:column="25"/></condition> <block pos:line="70" pos:column="26">{
            <case pos:line="71" pos:column="13">case <expr><literal type="char" pos:line="71" pos:column="18">'&gt;'<pos:position pos:line="71" pos:column="24"/></literal></expr>:<pos:position pos:line="71" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="71" pos:column="23">newcond<pos:position pos:line="71" pos:column="30"/></name><operator pos:line="71" pos:column="30">-&gt;<pos:position pos:line="71" pos:column="35"/></operator><name pos:line="71" pos:column="32">ptype<pos:position pos:line="71" pos:column="37"/></name></name> <operator pos:line="71" pos:column="38">=<pos:position pos:line="71" pos:column="39"/></operator> <name pos:line="71" pos:column="40">CONDPAT_STR_GT<pos:position pos:line="71" pos:column="54"/></name></expr>;<pos:position pos:line="71" pos:column="55"/></expr_stmt> <break pos:line="71" pos:column="56">break;<pos:position pos:line="71" pos:column="62"/></break>
            <case pos:line="72" pos:column="13">case <expr><literal type="char" pos:line="72" pos:column="18">'&lt;'<pos:position pos:line="72" pos:column="24"/></literal></expr>:<pos:position pos:line="72" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="72" pos:column="23">newcond<pos:position pos:line="72" pos:column="30"/></name><operator pos:line="72" pos:column="30">-&gt;<pos:position pos:line="72" pos:column="35"/></operator><name pos:line="72" pos:column="32">ptype<pos:position pos:line="72" pos:column="37"/></name></name> <operator pos:line="72" pos:column="38">=<pos:position pos:line="72" pos:column="39"/></operator> <name pos:line="72" pos:column="40">CONDPAT_STR_LT<pos:position pos:line="72" pos:column="54"/></name></expr>;<pos:position pos:line="72" pos:column="55"/></expr_stmt> <break pos:line="72" pos:column="56">break;<pos:position pos:line="72" pos:column="62"/></break>
            <case pos:line="73" pos:column="13">case <expr><literal type="char" pos:line="73" pos:column="18">'='<pos:position pos:line="73" pos:column="21"/></literal></expr>:<pos:position pos:line="73" pos:column="22"/></case> <expr_stmt><expr><name><name pos:line="73" pos:column="23">newcond<pos:position pos:line="73" pos:column="30"/></name><operator pos:line="73" pos:column="30">-&gt;<pos:position pos:line="73" pos:column="35"/></operator><name pos:line="73" pos:column="32">ptype<pos:position pos:line="73" pos:column="37"/></name></name> <operator pos:line="73" pos:column="38">=<pos:position pos:line="73" pos:column="39"/></operator> <name pos:line="73" pos:column="40">CONDPAT_STR_EQ<pos:position pos:line="73" pos:column="54"/></name></expr>;<pos:position pos:line="73" pos:column="55"/></expr_stmt>
                <comment type="block" pos:line="74" pos:column="17">/* "" represents an empty string */</comment>
                <if pos:line="75" pos:column="17">if <condition pos:line="75" pos:column="20">(<expr><operator pos:line="75" pos:column="21">*<pos:position pos:line="75" pos:column="22"/></operator><operator pos:line="75" pos:column="22">++<pos:position pos:line="75" pos:column="24"/></operator><name pos:line="75" pos:column="24">a2<pos:position pos:line="75" pos:column="26"/></name> <operator pos:line="75" pos:column="27">==<pos:position pos:line="75" pos:column="29"/></operator> <literal type="char" pos:line="75" pos:column="30">'"'<pos:position pos:line="75" pos:column="33"/></literal> <operator pos:line="75" pos:column="34">&amp;&amp;<pos:position pos:line="75" pos:column="44"/></operator> <name><name pos:line="75" pos:column="37">a2<pos:position pos:line="75" pos:column="39"/></name><index pos:line="75" pos:column="39">[<expr><literal type="number" pos:line="75" pos:column="40">1<pos:position pos:line="75" pos:column="41"/></literal></expr>]<pos:position pos:line="75" pos:column="42"/></index></name> <operator pos:line="75" pos:column="43">==<pos:position pos:line="75" pos:column="45"/></operator> <literal type="char" pos:line="75" pos:column="46">'"'<pos:position pos:line="75" pos:column="49"/></literal> <operator pos:line="75" pos:column="50">&amp;&amp;<pos:position pos:line="75" pos:column="60"/></operator> <operator pos:line="75" pos:column="53">!<pos:position pos:line="75" pos:column="54"/></operator><name><name pos:line="75" pos:column="54">a2<pos:position pos:line="75" pos:column="56"/></name><index pos:line="75" pos:column="56">[<expr><literal type="number" pos:line="75" pos:column="57">2<pos:position pos:line="75" pos:column="58"/></literal></expr>]<pos:position pos:line="75" pos:column="59"/></index></name></expr>)<pos:position pos:line="75" pos:column="60"/></condition><then pos:line="75" pos:column="60"> <block pos:line="75" pos:column="61">{
                    <expr_stmt><expr><name pos:line="76" pos:column="21">a2<pos:position pos:line="76" pos:column="23"/></name> <operator pos:line="76" pos:column="24">+=<pos:position pos:line="76" pos:column="26"/></operator> <literal type="number" pos:line="76" pos:column="27">2<pos:position pos:line="76" pos:column="28"/></literal></expr>;<pos:position pos:line="76" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="77" pos:column="18"/></block></then></if>
                <break pos:line="78" pos:column="17">break;<pos:position pos:line="78" pos:column="23"/></break>
            }<pos:position pos:line="79" pos:column="14"/></block></switch>
        }<pos:position pos:line="80" pos:column="10"/></block></else></if>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name><name pos:line="83" pos:column="9">newcond<pos:position pos:line="83" pos:column="16"/></name><operator pos:line="83" pos:column="16">-&gt;<pos:position pos:line="83" pos:column="21"/></operator><name pos:line="83" pos:column="18">ptype<pos:position pos:line="83" pos:column="23"/></name></name> <operator pos:line="83" pos:column="24">&amp;&amp;<pos:position pos:line="83" pos:column="34"/></operator> <name><name pos:line="83" pos:column="27">newcond<pos:position pos:line="83" pos:column="34"/></name><operator pos:line="83" pos:column="34">-&gt;<pos:position pos:line="83" pos:column="39"/></operator><name pos:line="83" pos:column="36">ptype<pos:position pos:line="83" pos:column="41"/></name></name> <operator pos:line="83" pos:column="42">!=<pos:position pos:line="83" pos:column="44"/></operator> <name pos:line="83" pos:column="45">CONDPAT_STR_EQ<pos:position pos:line="83" pos:column="59"/></name> <operator pos:line="83" pos:column="60">&amp;&amp;<pos:position pos:line="83" pos:column="70"/></operator>
        <operator pos:line="84" pos:column="9">(<pos:position pos:line="84" pos:column="10"/></operator><name><name pos:line="84" pos:column="10">newcond<pos:position pos:line="84" pos:column="17"/></name><operator pos:line="84" pos:column="17">-&gt;<pos:position pos:line="84" pos:column="22"/></operator><name pos:line="84" pos:column="19">flags<pos:position pos:line="84" pos:column="24"/></name></name> <operator pos:line="84" pos:column="25">&amp;<pos:position pos:line="84" pos:column="30"/></operator> <name pos:line="84" pos:column="27">CONDFLAG_NOCASE<pos:position pos:line="84" pos:column="42"/></name><operator pos:line="84" pos:column="42">)<pos:position pos:line="84" pos:column="43"/></operator></expr>)<pos:position pos:line="84" pos:column="44"/></condition><then pos:line="84" pos:column="44"> <block pos:line="84" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="85" pos:column="9">ap_log_error<pos:position pos:line="85" pos:column="21"/></name><argument_list pos:line="85" pos:column="21">(<argument><expr><name pos:line="85" pos:column="22">APLOG_MARK<pos:position pos:line="85" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="85" pos:column="34">APLOG_WARNING<pos:position pos:line="85" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="85" pos:column="49">0<pos:position pos:line="85" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="85" pos:column="52">cmd<pos:position pos:line="85" pos:column="55"/></name><operator pos:line="85" pos:column="55">-&gt;<pos:position pos:line="85" pos:column="60"/></operator><name pos:line="85" pos:column="57">server<pos:position pos:line="85" pos:column="63"/></name></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="86" pos:column="22">"RewriteCond: NoCase option for non-regex pattern '%s' "<pos:position pos:line="86" pos:column="78"/></literal>
                     <literal type="string" pos:line="87" pos:column="22">"is not supported and will be ignored."<pos:position pos:line="87" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="63">a2<pos:position pos:line="87" pos:column="65"/></name></expr></argument>)<pos:position pos:line="87" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="88" pos:column="9">newcond<pos:position pos:line="88" pos:column="16"/></name><operator pos:line="88" pos:column="16">-&gt;<pos:position pos:line="88" pos:column="21"/></operator><name pos:line="88" pos:column="18">flags<pos:position pos:line="88" pos:column="23"/></name></name> <operator pos:line="88" pos:column="24">&amp;=<pos:position pos:line="88" pos:column="30"/></operator> <operator pos:line="88" pos:column="27">~<pos:position pos:line="88" pos:column="28"/></operator><name pos:line="88" pos:column="28">CONDFLAG_NOCASE<pos:position pos:line="88" pos:column="43"/></name></expr>;<pos:position pos:line="88" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="91" pos:column="5">newcond<pos:position pos:line="91" pos:column="12"/></name><operator pos:line="91" pos:column="12">-&gt;<pos:position pos:line="91" pos:column="17"/></operator><name pos:line="91" pos:column="14">pattern<pos:position pos:line="91" pos:column="21"/></name></name> <operator pos:line="91" pos:column="22">=<pos:position pos:line="91" pos:column="23"/></operator> <name pos:line="91" pos:column="24">a2<pos:position pos:line="91" pos:column="26"/></name></expr>;<pos:position pos:line="91" pos:column="27"/></expr_stmt>

    <if pos:line="93" pos:column="5">if <condition pos:line="93" pos:column="8">(<expr><operator pos:line="93" pos:column="9">!<pos:position pos:line="93" pos:column="10"/></operator><name><name pos:line="93" pos:column="10">newcond<pos:position pos:line="93" pos:column="17"/></name><operator pos:line="93" pos:column="17">-&gt;<pos:position pos:line="93" pos:column="22"/></operator><name pos:line="93" pos:column="19">ptype<pos:position pos:line="93" pos:column="24"/></name></name></expr>)<pos:position pos:line="93" pos:column="25"/></condition><then pos:line="93" pos:column="25"> <block pos:line="93" pos:column="26">{
        <expr_stmt><expr><name pos:line="94" pos:column="9">regexp<pos:position pos:line="94" pos:column="15"/></name> <operator pos:line="94" pos:column="16">=<pos:position pos:line="94" pos:column="17"/></operator> <call><name pos:line="94" pos:column="18">ap_pregcomp<pos:position pos:line="94" pos:column="29"/></name><argument_list pos:line="94" pos:column="29">(<argument><expr><name><name pos:line="94" pos:column="30">cmd<pos:position pos:line="94" pos:column="33"/></name><operator pos:line="94" pos:column="33">-&gt;<pos:position pos:line="94" pos:column="38"/></operator><name pos:line="94" pos:column="35">pool<pos:position pos:line="94" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="41">a2<pos:position pos:line="94" pos:column="43"/></name></expr></argument>,
                             <argument><expr><name pos:line="95" pos:column="30">AP_REG_EXTENDED<pos:position pos:line="95" pos:column="45"/></name> <operator pos:line="95" pos:column="46">|<pos:position pos:line="95" pos:column="47"/></operator> <operator pos:line="95" pos:column="48">(<pos:position pos:line="95" pos:column="49"/></operator><ternary><condition><expr><operator pos:line="95" pos:column="49">(<pos:position pos:line="95" pos:column="50"/></operator><name><name pos:line="95" pos:column="50">newcond<pos:position pos:line="95" pos:column="57"/></name><operator pos:line="95" pos:column="57">-&gt;<pos:position pos:line="95" pos:column="62"/></operator><name pos:line="95" pos:column="59">flags<pos:position pos:line="95" pos:column="64"/></name></name> <operator pos:line="95" pos:column="65">&amp;<pos:position pos:line="95" pos:column="70"/></operator> <name pos:line="95" pos:column="67">CONDFLAG_NOCASE<pos:position pos:line="95" pos:column="82"/></name><operator pos:line="95" pos:column="82">)<pos:position pos:line="95" pos:column="83"/></operator></expr>
                                             ?<pos:position pos:line="96" pos:column="47"/></condition><then pos:line="96" pos:column="47"> <expr><name pos:line="96" pos:column="48">AP_REG_ICASE<pos:position pos:line="96" pos:column="60"/></name></expr> <pos:position pos:line="96" pos:column="61"/></then><else pos:line="96" pos:column="61">: <expr><literal type="number" pos:line="96" pos:column="63">0<pos:position pos:line="96" pos:column="64"/></literal></expr></else></ternary><operator pos:line="96" pos:column="64">)<pos:position pos:line="96" pos:column="65"/></operator></expr></argument>)<pos:position pos:line="96" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="67"/></expr_stmt>
        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><operator pos:line="97" pos:column="13">!<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="14">regexp<pos:position pos:line="97" pos:column="20"/></name></expr>)<pos:position pos:line="97" pos:column="21"/></condition><then pos:line="97" pos:column="21"> <block pos:line="97" pos:column="22">{
            <return pos:line="98" pos:column="13">return <expr><call><name pos:line="98" pos:column="20">apr_pstrcat<pos:position pos:line="98" pos:column="31"/></name><argument_list pos:line="98" pos:column="31">(<argument><expr><name><name pos:line="98" pos:column="32">cmd<pos:position pos:line="98" pos:column="35"/></name><operator pos:line="98" pos:column="35">-&gt;<pos:position pos:line="98" pos:column="40"/></operator><name pos:line="98" pos:column="37">pool<pos:position pos:line="98" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="43">"RewriteCond: cannot compile regular "<pos:position pos:line="98" pos:column="81"/></literal>
                               <literal type="string" pos:line="99" pos:column="32">"expression '"<pos:position pos:line="99" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="48">a2<pos:position pos:line="99" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="52">"'"<pos:position pos:line="99" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="57">NULL<pos:position pos:line="99" pos:column="61"/></name></expr></argument>)<pos:position pos:line="99" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="63"/></return>
        }<pos:position pos:line="100" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name><name pos:line="102" pos:column="9">newcond<pos:position pos:line="102" pos:column="16"/></name><operator pos:line="102" pos:column="16">-&gt;<pos:position pos:line="102" pos:column="21"/></operator><name pos:line="102" pos:column="18">regexp<pos:position pos:line="102" pos:column="24"/></name></name>  <operator pos:line="102" pos:column="26">=<pos:position pos:line="102" pos:column="27"/></operator> <name pos:line="102" pos:column="28">regexp<pos:position pos:line="102" pos:column="34"/></name></expr>;<pos:position pos:line="102" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="103" pos:column="6"/></block></then></if>

    <return pos:line="105" pos:column="5">return <expr><name pos:line="105" pos:column="12">NULL<pos:position pos:line="105" pos:column="16"/></name></expr>;<pos:position pos:line="105" pos:column="17"/></return>
}<pos:position pos:line="106" pos:column="2"/></block></function></unit>
