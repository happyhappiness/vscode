<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2506_httpd-2.4.16.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">trace_startup<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">apr_pool_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">p<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">server_rec<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">s<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">x_cfg<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">mconfig<pos:position pos:line="1" pos:column="71"/></name></decl></parameter>,
                          <parameter><decl><type><specifier pos:line="2" pos:column="27">const<pos:position pos:line="2" pos:column="32"/></specifier> <name pos:line="2" pos:column="33">char<pos:position pos:line="2" pos:column="37"/></name> <modifier pos:line="2" pos:column="38">*<pos:position pos:line="2" pos:column="39"/></modifier></type><name pos:line="2" pos:column="39">note<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">sofar<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">where<pos:position pos:line="5" pos:column="16"/></name></decl>, <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="5" pos:column="19">addon<pos:position pos:line="5" pos:column="24"/></name></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>

<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">EXAMPLE_LOG_EACH<pos:position pos:line="7" pos:column="21"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">example_log_each<pos:position pos:line="8" pos:column="21"/></name><argument_list pos:line="8" pos:column="21">(<argument><expr><name pos:line="8" pos:column="22">p<pos:position pos:line="8" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="25">s<pos:position pos:line="8" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="28">note<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">endif<pos:position pos:line="9" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="11" pos:column="5">/*
     * If we weren't passed a configuration record, we can't figure out to
     * what location this call applies.  This only happens for co-routines
     * that don't operate in a particular directory or server context.  If we
     * got a valid record, extract the location (directory or server) to which
     * it applies.
     */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">where<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="18" pos:column="13">(<pos:position pos:line="18" pos:column="14"/></operator><name pos:line="18" pos:column="14">mconfig<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">!=<pos:position pos:line="18" pos:column="24"/></operator> <name pos:line="18" pos:column="25">NULL<pos:position pos:line="18" pos:column="29"/></name><operator pos:line="18" pos:column="29">)<pos:position pos:line="18" pos:column="30"/></operator></expr> ?<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <expr><name><name pos:line="18" pos:column="33">mconfig<pos:position pos:line="18" pos:column="40"/></name><operator pos:line="18" pos:column="40">-&gt;<pos:position pos:line="18" pos:column="45"/></operator><name pos:line="18" pos:column="42">loc<pos:position pos:line="18" pos:column="45"/></name></name></expr> <pos:position pos:line="18" pos:column="46"/></then><else pos:line="18" pos:column="46">: <expr><literal type="string" pos:line="18" pos:column="48">"nowhere"<pos:position pos:line="18" pos:column="57"/></literal></expr></else></ternary></expr>;<pos:position pos:line="18" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name pos:line="19" pos:column="5">where<pos:position pos:line="19" pos:column="10"/></name> <operator pos:line="19" pos:column="11">=<pos:position pos:line="19" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="19" pos:column="13">(<pos:position pos:line="19" pos:column="14"/></operator><name pos:line="19" pos:column="14">where<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">!=<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">NULL<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">)<pos:position pos:line="19" pos:column="28"/></operator></expr> ?<pos:position pos:line="19" pos:column="30"/></condition><then pos:line="19" pos:column="30"> <expr><name pos:line="19" pos:column="31">where<pos:position pos:line="19" pos:column="36"/></name></expr> <pos:position pos:line="19" pos:column="37"/></then><else pos:line="19" pos:column="37">: <expr><literal type="string" pos:line="19" pos:column="39">""<pos:position pos:line="19" pos:column="41"/></literal></expr></else></ternary></expr>;<pos:position pos:line="19" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name pos:line="21" pos:column="5">addon<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <call><name pos:line="21" pos:column="13">apr_pstrcat<pos:position pos:line="21" pos:column="24"/></name><argument_list pos:line="21" pos:column="24">(<argument><expr><name pos:line="21" pos:column="25">p<pos:position pos:line="21" pos:column="26"/></name></expr></argument>,
                        <argument><expr><literal type="string" pos:line="22" pos:column="25">"   &lt;li&gt;\n"<pos:position pos:line="22" pos:column="42"/></literal>
                        <literal type="string" pos:line="23" pos:column="25">"    &lt;dl&gt;\n"<pos:position pos:line="23" pos:column="43"/></literal>
                        <literal type="string" pos:line="24" pos:column="25">"     &lt;dt&gt;&lt;samp&gt;"<pos:position pos:line="24" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">note<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="50">"&lt;/samp&gt;&lt;/dt&gt;\n"<pos:position pos:line="24" pos:column="78"/></literal>
                        <literal type="string" pos:line="25" pos:column="25">"     &lt;dd&gt;&lt;samp&gt;["<pos:position pos:line="25" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="45">where<pos:position pos:line="25" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="25" pos:column="52">"]&lt;/samp&gt;&lt;/dd&gt;\n"<pos:position pos:line="25" pos:column="81"/></literal>
                        <literal type="string" pos:line="26" pos:column="25">"    &lt;/dl&gt;\n"<pos:position pos:line="26" pos:column="44"/></literal>
                        <literal type="string" pos:line="27" pos:column="25">"   &lt;/li&gt;\n"<pos:position pos:line="27" pos:column="43"/></literal></expr></argument>,
                        <argument><expr><name pos:line="28" pos:column="25">NULL<pos:position pos:line="28" pos:column="29"/></name></expr></argument>)<pos:position pos:line="28" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="30" pos:column="5">/*
     * Make sure that we start with a valid string, even if we have never been
     * called.
     */</comment>
    <expr_stmt><expr><name pos:line="34" pos:column="5">sofar<pos:position pos:line="34" pos:column="10"/></name> <operator pos:line="34" pos:column="11">=<pos:position pos:line="34" pos:column="12"/></operator> <ternary><condition><expr><operator pos:line="34" pos:column="13">(<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">trace<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">==<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">NULL<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">)<pos:position pos:line="34" pos:column="28"/></operator></expr> ?<pos:position pos:line="34" pos:column="30"/></condition><then pos:line="34" pos:column="30"> <expr><literal type="string" pos:line="34" pos:column="31">""<pos:position pos:line="34" pos:column="33"/></literal></expr> <pos:position pos:line="34" pos:column="34"/></then><else pos:line="34" pos:column="34">: <expr><name pos:line="34" pos:column="36">trace<pos:position pos:line="34" pos:column="41"/></name></expr></else></ternary></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><name pos:line="36" pos:column="5">trace<pos:position pos:line="36" pos:column="10"/></name> <operator pos:line="36" pos:column="11">=<pos:position pos:line="36" pos:column="12"/></operator> <call><name pos:line="36" pos:column="13">apr_pstrcat<pos:position pos:line="36" pos:column="24"/></name><argument_list pos:line="36" pos:column="24">(<argument><expr><name pos:line="36" pos:column="25">p<pos:position pos:line="36" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="28">sofar<pos:position pos:line="36" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="35">addon<pos:position pos:line="36" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="42">NULL<pos:position pos:line="36" pos:column="46"/></name></expr></argument>)<pos:position pos:line="36" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="48"/></expr_stmt>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
