<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3168_httpd-2.3.8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">event_open_logs<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">apr_pool_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type> <name pos:line="1" pos:column="41">p<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">apr_pool_t<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type> <name pos:line="1" pos:column="57">plog<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                           <parameter><decl><type><name pos:line="2" pos:column="28">apr_pool_t<pos:position pos:line="2" pos:column="38"/></name> <modifier pos:line="2" pos:column="39">*<pos:position pos:line="2" pos:column="40"/></modifier></type> <name pos:line="2" pos:column="41">ptemp<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">server_rec<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type> <name pos:line="2" pos:column="61">s<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">startup<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><literal type="number" pos:line="4" pos:column="19">0<pos:position pos:line="4" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">level_flags<pos:position pos:line="5" pos:column="20"/></name> <init pos:line="5" pos:column="21">= <expr><literal type="number" pos:line="5" pos:column="23">0<pos:position pos:line="5" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">pconf<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <name pos:line="8" pos:column="13">p<pos:position pos:line="8" pos:column="14"/></name></expr>;<pos:position pos:line="8" pos:column="15"/></expr_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* the reverse of pre_config, we want this only the first time around */</comment>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><name><name pos:line="11" pos:column="9">retained<pos:position pos:line="11" pos:column="17"/></name><operator pos:line="11" pos:column="17">-&gt;<pos:position pos:line="11" pos:column="22"/></operator><name pos:line="11" pos:column="19">module_loads<pos:position pos:line="11" pos:column="31"/></name></name> <operator pos:line="11" pos:column="32">==<pos:position pos:line="11" pos:column="34"/></operator> <literal type="number" pos:line="11" pos:column="35">1<pos:position pos:line="11" pos:column="36"/></literal></expr>)<pos:position pos:line="11" pos:column="37"/></condition><then pos:line="11" pos:column="37"> <block pos:line="11" pos:column="38">{
        <expr_stmt><expr><name pos:line="12" pos:column="9">startup<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <literal type="number" pos:line="12" pos:column="19">1<pos:position pos:line="12" pos:column="20"/></literal></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="13" pos:column="9">level_flags<pos:position pos:line="13" pos:column="20"/></name> <operator pos:line="13" pos:column="21">|=<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="24">APLOG_STARTUP<pos:position pos:line="13" pos:column="37"/></name></expr>;<pos:position pos:line="13" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><operator pos:line="16" pos:column="9">(<pos:position pos:line="16" pos:column="10"/></operator><name pos:line="16" pos:column="10">num_listensocks<pos:position pos:line="16" pos:column="25"/></name> <operator pos:line="16" pos:column="26">=<pos:position pos:line="16" pos:column="27"/></operator> <call><name pos:line="16" pos:column="28">ap_setup_listeners<pos:position pos:line="16" pos:column="46"/></name><argument_list pos:line="16" pos:column="46">(<argument><expr><name pos:line="16" pos:column="47">ap_server_conf<pos:position pos:line="16" pos:column="61"/></name></expr></argument>)<pos:position pos:line="16" pos:column="62"/></argument_list></call><operator pos:line="16" pos:column="62">)<pos:position pos:line="16" pos:column="63"/></operator> <operator pos:line="16" pos:column="64">&lt;<pos:position pos:line="16" pos:column="68"/></operator> <literal type="number" pos:line="16" pos:column="66">1<pos:position pos:line="16" pos:column="67"/></literal></expr>)<pos:position pos:line="16" pos:column="68"/></condition><then pos:line="16" pos:column="68"> <block pos:line="16" pos:column="69">{
        <expr_stmt><expr><call><name pos:line="17" pos:column="9">ap_log_error<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument><expr><name pos:line="17" pos:column="22">APLOG_MARK<pos:position pos:line="17" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="34">APLOG_ALERT<pos:position pos:line="17" pos:column="45"/></name> <operator pos:line="17" pos:column="46">|<pos:position pos:line="17" pos:column="47"/></operator> <name pos:line="17" pos:column="48">level_flags<pos:position pos:line="17" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="17" pos:column="61">0<pos:position pos:line="17" pos:column="62"/></literal></expr></argument>,
                     <argument><expr><operator pos:line="18" pos:column="22">(<pos:position pos:line="18" pos:column="23"/></operator><ternary><condition><expr><name pos:line="18" pos:column="23">startup<pos:position pos:line="18" pos:column="30"/></name></expr> ?<pos:position pos:line="18" pos:column="32"/></condition><then pos:line="18" pos:column="32"> <expr><name pos:line="18" pos:column="33">NULL<pos:position pos:line="18" pos:column="37"/></name></expr> <pos:position pos:line="18" pos:column="38"/></then><else pos:line="18" pos:column="38">: <expr><name pos:line="18" pos:column="40">s<pos:position pos:line="18" pos:column="41"/></name></expr></else></ternary><operator pos:line="18" pos:column="41">)<pos:position pos:line="18" pos:column="42"/></operator></expr></argument>,
                     <argument><expr><literal type="string" pos:line="19" pos:column="22">"no listening sockets available, shutting down"<pos:position pos:line="19" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="71"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">DONE<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name pos:line="23" pos:column="10">one_process<pos:position pos:line="23" pos:column="21"/></name></expr>)<pos:position pos:line="23" pos:column="22"/></condition><then pos:line="23" pos:column="22"> <block pos:line="23" pos:column="23">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><operator pos:line="24" pos:column="13">(<pos:position pos:line="24" pos:column="14"/></operator><name pos:line="24" pos:column="14">rv<pos:position pos:line="24" pos:column="16"/></name> <operator pos:line="24" pos:column="17">=<pos:position pos:line="24" pos:column="18"/></operator> <call><name pos:line="24" pos:column="19">ap_event_pod_open<pos:position pos:line="24" pos:column="36"/></name><argument_list pos:line="24" pos:column="36">(<argument><expr><name pos:line="24" pos:column="37">pconf<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="44">&amp;<pos:position pos:line="24" pos:column="49"/></operator><name pos:line="24" pos:column="45">pod<pos:position pos:line="24" pos:column="48"/></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call><operator pos:line="24" pos:column="49">)<pos:position pos:line="24" pos:column="50"/></operator></expr>)<pos:position pos:line="24" pos:column="51"/></condition><then pos:line="24" pos:column="51"> <block pos:line="24" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="25" pos:column="13">ap_log_error<pos:position pos:line="25" pos:column="25"/></name><argument_list pos:line="25" pos:column="25">(<argument><expr><name pos:line="25" pos:column="26">APLOG_MARK<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">APLOG_CRIT<pos:position pos:line="25" pos:column="48"/></name> <operator pos:line="25" pos:column="49">|<pos:position pos:line="25" pos:column="50"/></operator> <name pos:line="25" pos:column="51">level_flags<pos:position pos:line="25" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="64">rv<pos:position pos:line="25" pos:column="66"/></name></expr></argument>,
                         <argument><expr><operator pos:line="26" pos:column="26">(<pos:position pos:line="26" pos:column="27"/></operator><ternary><condition><expr><name pos:line="26" pos:column="27">startup<pos:position pos:line="26" pos:column="34"/></name></expr> ?<pos:position pos:line="26" pos:column="36"/></condition><then pos:line="26" pos:column="36"> <expr><name pos:line="26" pos:column="37">NULL<pos:position pos:line="26" pos:column="41"/></name></expr> <pos:position pos:line="26" pos:column="42"/></then><else pos:line="26" pos:column="42">: <expr><name pos:line="26" pos:column="44">s<pos:position pos:line="26" pos:column="45"/></name></expr></else></ternary><operator pos:line="26" pos:column="45">)<pos:position pos:line="26" pos:column="46"/></operator></expr></argument>,
                         <argument><expr><literal type="string" pos:line="27" pos:column="26">"could not open pipe-of-death"<pos:position pos:line="27" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="58"/></expr_stmt>
            <return pos:line="28" pos:column="13">return <expr><name pos:line="28" pos:column="20">DONE<pos:position pos:line="28" pos:column="24"/></name></expr>;<pos:position pos:line="28" pos:column="25"/></return>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <return pos:line="31" pos:column="5">return <expr><name pos:line="31" pos:column="12">OK<pos:position pos:line="31" pos:column="14"/></name></expr>;<pos:position pos:line="31" pos:column="15"/></return>
}<pos:position pos:line="32" pos:column="2"/></block></function></unit>
