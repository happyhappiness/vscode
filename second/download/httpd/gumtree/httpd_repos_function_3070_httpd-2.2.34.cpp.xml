<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3070_httpd-2.2.34.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">crypto_block_encrypt<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">unsigned<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier><modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">out<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="2" pos:column="9">apr_size_t<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">outlen<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">unsigned<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">in<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">apr_size_t<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">inlen<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="3" pos:column="9">apr_crypto_block_t<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">ctx<pos:position pos:line="3" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="33"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">outl<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><operator pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">outlen<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">char<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">buffer<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* are we after the maximum size of the out buffer? */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">out<pos:position pos:line="9" pos:column="13"/></name></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14"> <block pos:line="9" pos:column="15">{
        <expr_stmt><expr><operator pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">outlen<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">inlen<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">+<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">EVP_MAX_BLOCK_LENGTH<pos:position pos:line="10" pos:column="47"/></name></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><name pos:line="11" pos:column="16">APR_SUCCESS<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="14" pos:column="5">/* must we allocate the output buffer from a pool? */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><operator pos:line="15" pos:column="10">*<pos:position pos:line="15" pos:column="11"/></operator><name pos:line="15" pos:column="11">out<pos:position pos:line="15" pos:column="14"/></name></expr>)<pos:position pos:line="15" pos:column="15"/></condition><then pos:line="15" pos:column="15"> <block pos:line="15" pos:column="16">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">buffer<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">apr_palloc<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name><name pos:line="16" pos:column="29">ctx<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">-&gt;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="34">pool<pos:position pos:line="16" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">inlen<pos:position pos:line="16" pos:column="45"/></name> <operator pos:line="16" pos:column="46">+<pos:position pos:line="16" pos:column="47"/></operator> <name pos:line="16" pos:column="48">EVP_MAX_BLOCK_LENGTH<pos:position pos:line="16" pos:column="68"/></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">buffer<pos:position pos:line="17" pos:column="20"/></name></expr>)<pos:position pos:line="17" pos:column="21"/></condition><then pos:line="17" pos:column="21"> <block pos:line="17" pos:column="22">{
            <return pos:line="18" pos:column="13">return <expr><name pos:line="18" pos:column="20">APR_ENOMEM<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></return>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">apr_crypto_clear<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name><name pos:line="20" pos:column="26">ctx<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">-&gt;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="31">pool<pos:position pos:line="20" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">buffer<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="45">inlen<pos:position pos:line="20" pos:column="50"/></name> <operator pos:line="20" pos:column="51">+<pos:position pos:line="20" pos:column="52"/></operator> <name pos:line="20" pos:column="53">EVP_MAX_BLOCK_LENGTH<pos:position pos:line="20" pos:column="73"/></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">out<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <name pos:line="21" pos:column="16">buffer<pos:position pos:line="21" pos:column="22"/></name></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><name pos:line="24" pos:column="5">CRYPT_OPENSSL_CONST_BUFFERS<pos:position pos:line="24" pos:column="32"/></name></expr></cpp:if>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><call><name pos:line="25" pos:column="10">EVP_EncryptUpdate<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><operator pos:line="25" pos:column="28">&amp;<pos:position pos:line="25" pos:column="33"/></operator><name><name pos:line="25" pos:column="29">ctx<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">-&gt;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="34">cipherCtx<pos:position pos:line="25" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="45">(<pos:position pos:line="25" pos:column="46"/></operator><operator pos:line="25" pos:column="46">*<pos:position pos:line="25" pos:column="47"/></operator><name pos:line="25" pos:column="47">out<pos:position pos:line="25" pos:column="50"/></name><operator pos:line="25" pos:column="50">)<pos:position pos:line="25" pos:column="51"/></operator></expr></argument>, <argument><expr><operator pos:line="25" pos:column="53">&amp;<pos:position pos:line="25" pos:column="58"/></operator><name pos:line="25" pos:column="54">outl<pos:position pos:line="25" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="60">in<pos:position pos:line="25" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="64">inlen<pos:position pos:line="25" pos:column="69"/></name></expr></argument>)<pos:position pos:line="25" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="71"/></condition><then pos:line="25" pos:column="71"> <block pos:line="25" pos:column="72">{
<cpp:else pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">else<pos:position pos:line="26" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">!<pos:position pos:line="27" pos:column="10"/></operator><call><name pos:line="27" pos:column="10">EVP_EncryptUpdate<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><operator pos:line="27" pos:column="28">&amp;<pos:position pos:line="27" pos:column="33"/></operator><name><name pos:line="27" pos:column="29">ctx<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-&gt;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="34">cipherCtx<pos:position pos:line="27" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="45">(<pos:position pos:line="27" pos:column="46"/></operator><operator pos:line="27" pos:column="46">*<pos:position pos:line="27" pos:column="47"/></operator><name pos:line="27" pos:column="47">out<pos:position pos:line="27" pos:column="50"/></name><operator pos:line="27" pos:column="50">)<pos:position pos:line="27" pos:column="51"/></operator></expr></argument>, <argument><expr><operator pos:line="27" pos:column="53">&amp;<pos:position pos:line="27" pos:column="58"/></operator><name pos:line="27" pos:column="54">outl<pos:position pos:line="27" pos:column="58"/></name></expr></argument>,
            <argument><expr><operator pos:line="28" pos:column="13">(<pos:position pos:line="28" pos:column="14"/></operator><name pos:line="28" pos:column="14">unsigned<pos:position pos:line="28" pos:column="22"/></name> <name pos:line="28" pos:column="23">char<pos:position pos:line="28" pos:column="27"/></name> <operator pos:line="28" pos:column="28">*<pos:position pos:line="28" pos:column="29"/></operator><operator pos:line="28" pos:column="29">)<pos:position pos:line="28" pos:column="30"/></operator> <name pos:line="28" pos:column="31">in<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="35">inlen<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42"> <block pos:line="28" pos:column="43">{
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
        <return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">APR_ECRYPT<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="32" pos:column="5">*<pos:position pos:line="32" pos:column="6"/></operator><name pos:line="32" pos:column="6">outlen<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">outl<pos:position pos:line="32" pos:column="19"/></name></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>

    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">APR_SUCCESS<pos:position pos:line="34" pos:column="23"/></name></expr>;<pos:position pos:line="34" pos:column="24"/></return>

}<pos:position pos:line="36" pos:column="2"/></block></then></if>

<comment type="block" format="doxygen" pos:line="38" pos:column="1">/**
 * @brief Encrypt final data block, write it to out.
 * @note If necessary the final block will be written out after being
 *       padded. Typically the final block will be written to the
 *       same buffer used by apr_crypto_block_encrypt, offset by the
 *       number of bytes returned as actually written by the
 *       apr_crypto_block_encrypt() call. After this call, the context
 *       is cleaned and can be reused by apr_crypto_block_encrypt_init().
 * @param out Address of a buffer to which data will be written. This
 *            buffer must already exist, and is usually the same
 *            buffer used by apr_evp_crypt(). See note.
 * @param outlen Length of the output will be written here.
 * @param ctx The block context to use.
 * @return APR_ECRYPT if an error occurred.
 * @return APR_EPADDING if padding was enabled and the block was incorrectly
 *         formatted.
 * @return APR_ENOTIMPL if not implemented.
 */</comment>
<function><specifier pos:line="56" pos:column="1">static<pos:position pos:line="56" pos:column="7"/></specifier> <type><name pos:line="56" pos:column="8">apr_status_t<pos:position pos:line="56" pos:column="20"/></name></type> <name pos:line="56" pos:column="21">crypto_block_encrypt_finish<pos:position pos:line="56" pos:column="48"/></name><parameter_list pos:line="56" pos:column="48">(<parameter><decl><type><name pos:line="56" pos:column="49">unsigned<pos:position pos:line="56" pos:column="57"/></name> <name pos:line="56" pos:column="58">char<pos:position pos:line="56" pos:column="62"/></name> <modifier pos:line="56" pos:column="63">*<pos:position pos:line="56" pos:column="64"/></modifier></type><name pos:line="56" pos:column="64">out<pos:position pos:line="56" pos:column="67"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="57" pos:column="9">apr_size_t<pos:position pos:line="57" pos:column="19"/></name> <modifier pos:line="57" pos:column="20">*<pos:position pos:line="57" pos:column="21"/></modifier></type><name pos:line="57" pos:column="21">outlen<pos:position pos:line="57" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="57" pos:column="29">apr_crypto_block_t<pos:position pos:line="57" pos:column="47"/></name> <modifier pos:line="57" pos:column="48">*<pos:position pos:line="57" pos:column="49"/></modifier></type><name pos:line="57" pos:column="49">ctx<pos:position pos:line="57" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="57" pos:column="53"/></parameter_list>
<block pos:line="58" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="59" pos:column="5">int<pos:position pos:line="59" pos:column="8"/></name></type> <name pos:line="59" pos:column="9">len<pos:position pos:line="59" pos:column="12"/></name> <init pos:line="59" pos:column="13">= <expr><operator pos:line="59" pos:column="15">*<pos:position pos:line="59" pos:column="16"/></operator><name pos:line="59" pos:column="16">outlen<pos:position pos:line="59" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="59" pos:column="23"/></decl_stmt>

    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><call><name pos:line="61" pos:column="9">EVP_EncryptFinal_ex<pos:position pos:line="61" pos:column="28"/></name><argument_list pos:line="61" pos:column="28">(<argument><expr><operator pos:line="61" pos:column="29">&amp;<pos:position pos:line="61" pos:column="34"/></operator><name><name pos:line="61" pos:column="30">ctx<pos:position pos:line="61" pos:column="33"/></name><operator pos:line="61" pos:column="33">-&gt;<pos:position pos:line="61" pos:column="38"/></operator><name pos:line="61" pos:column="35">cipherCtx<pos:position pos:line="61" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="46">out<pos:position pos:line="61" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="61" pos:column="51">&amp;<pos:position pos:line="61" pos:column="56"/></operator><name pos:line="61" pos:column="52">len<pos:position pos:line="61" pos:column="55"/></name></expr></argument>)<pos:position pos:line="61" pos:column="56"/></argument_list></call> <operator pos:line="61" pos:column="57">==<pos:position pos:line="61" pos:column="59"/></operator> <literal type="number" pos:line="61" pos:column="60">0<pos:position pos:line="61" pos:column="61"/></literal></expr>)<pos:position pos:line="61" pos:column="62"/></condition><then pos:line="61" pos:column="62"> <block pos:line="61" pos:column="63">{
        <return pos:line="62" pos:column="9">return <expr><name pos:line="62" pos:column="16">APR_EPADDING<pos:position pos:line="62" pos:column="28"/></name></expr>;<pos:position pos:line="62" pos:column="29"/></return>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="64" pos:column="5">*<pos:position pos:line="64" pos:column="6"/></operator><name pos:line="64" pos:column="6">outlen<pos:position pos:line="64" pos:column="12"/></name> <operator pos:line="64" pos:column="13">=<pos:position pos:line="64" pos:column="14"/></operator> <name pos:line="64" pos:column="15">len<pos:position pos:line="64" pos:column="18"/></name></expr>;<pos:position pos:line="64" pos:column="19"/></expr_stmt>

    <return pos:line="66" pos:column="5">return <expr><name pos:line="66" pos:column="12">APR_SUCCESS<pos:position pos:line="66" pos:column="23"/></name></expr>;<pos:position pos:line="66" pos:column="24"/></return>

}<pos:position pos:line="68" pos:column="2"/></block></function>

<comment type="block" format="doxygen" pos:line="70" pos:column="1">/**
 * @brief Initialise a context for decrypting arbitrary data using the given key.
 * @note If *ctx is NULL, a apr_crypto_block_t will be created from a pool. If
 *       *ctx is not NULL, *ctx must point at a previously created structure.
 * @param ctx The block context returned, see note.
 * @param blockSize The block size of the cipher.
 * @param iv Optional initialisation vector. If the buffer pointed to is NULL,
 *           an IV will be created at random, in space allocated from the pool.
 *           If the buffer is not NULL, the IV in the buffer will be used.
 * @param key The key structure.
 * @param p The pool to use.
 * @return Returns APR_ENOIV if an initialisation vector is required but not specified.
 *         Returns APR_EINIT if the backend failed to initialise the context. Returns
 *         APR_ENOTIMPL if not implemented.
 */</comment>
<function><specifier pos:line="85" pos:column="1">static<pos:position pos:line="85" pos:column="7"/></specifier> <type><name pos:line="85" pos:column="8">apr_status_t<pos:position pos:line="85" pos:column="20"/></name></type> <name pos:line="85" pos:column="21">crypto_block_decrypt_init<pos:position pos:line="85" pos:column="46"/></name><parameter_list pos:line="85" pos:column="46">(<parameter><decl><type><name pos:line="85" pos:column="47">apr_crypto_block_t<pos:position pos:line="85" pos:column="65"/></name> <modifier pos:line="85" pos:column="66">*<pos:position pos:line="85" pos:column="67"/></modifier><modifier pos:line="85" pos:column="67">*<pos:position pos:line="85" pos:column="68"/></modifier></type><name pos:line="85" pos:column="68">ctx<pos:position pos:line="85" pos:column="71"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="86" pos:column="9">apr_size_t<pos:position pos:line="86" pos:column="19"/></name> <modifier pos:line="86" pos:column="20">*<pos:position pos:line="86" pos:column="21"/></modifier></type><name pos:line="86" pos:column="21">blockSize<pos:position pos:line="86" pos:column="30"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="86" pos:column="32">const<pos:position pos:line="86" pos:column="37"/></specifier> <name pos:line="86" pos:column="38">unsigned<pos:position pos:line="86" pos:column="46"/></name> <name pos:line="86" pos:column="47">char<pos:position pos:line="86" pos:column="51"/></name> <modifier pos:line="86" pos:column="52">*<pos:position pos:line="86" pos:column="53"/></modifier></type><name pos:line="86" pos:column="53">iv<pos:position pos:line="86" pos:column="55"/></name></decl></parameter>,
        <parameter><decl><type><specifier pos:line="87" pos:column="9">const<pos:position pos:line="87" pos:column="14"/></specifier> <name pos:line="87" pos:column="15">apr_crypto_key_t<pos:position pos:line="87" pos:column="31"/></name> <modifier pos:line="87" pos:column="32">*<pos:position pos:line="87" pos:column="33"/></modifier></type><name pos:line="87" pos:column="33">key<pos:position pos:line="87" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="87" pos:column="38">apr_pool_t<pos:position pos:line="87" pos:column="48"/></name> <modifier pos:line="87" pos:column="49">*<pos:position pos:line="87" pos:column="50"/></modifier></type><name pos:line="87" pos:column="50">p<pos:position pos:line="87" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="87" pos:column="52"/></parameter_list>
<block pos:line="88" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="89" pos:column="5">apr_crypto_config_t<pos:position pos:line="89" pos:column="24"/></name> <modifier pos:line="89" pos:column="25">*<pos:position pos:line="89" pos:column="26"/></modifier></type><name pos:line="89" pos:column="26">config<pos:position pos:line="89" pos:column="32"/></name> <init pos:line="89" pos:column="33">= <expr><name><name pos:line="89" pos:column="35">key<pos:position pos:line="89" pos:column="38"/></name><operator pos:line="89" pos:column="38">-&gt;<pos:position pos:line="89" pos:column="43"/></operator><name pos:line="89" pos:column="40">f<pos:position pos:line="89" pos:column="41"/></name><operator pos:line="89" pos:column="41">-&gt;<pos:position pos:line="89" pos:column="46"/></operator><name pos:line="89" pos:column="43">config<pos:position pos:line="89" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="89" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="90" pos:column="5">apr_crypto_block_t<pos:position pos:line="90" pos:column="23"/></name> <modifier pos:line="90" pos:column="24">*<pos:position pos:line="90" pos:column="25"/></modifier></type><name pos:line="90" pos:column="25">block<pos:position pos:line="90" pos:column="30"/></name> <init pos:line="90" pos:column="31">= <expr><operator pos:line="90" pos:column="33">*<pos:position pos:line="90" pos:column="34"/></operator><name pos:line="90" pos:column="34">ctx<pos:position pos:line="90" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="90" pos:column="38"/></decl_stmt>
    <if pos:line="91" pos:column="5">if <condition pos:line="91" pos:column="8">(<expr><operator pos:line="91" pos:column="9">!<pos:position pos:line="91" pos:column="10"/></operator><name pos:line="91" pos:column="10">block<pos:position pos:line="91" pos:column="15"/></name></expr>)<pos:position pos:line="91" pos:column="16"/></condition><then pos:line="91" pos:column="16"> <block pos:line="91" pos:column="17">{
        <expr_stmt><expr><operator pos:line="92" pos:column="9">*<pos:position pos:line="92" pos:column="10"/></operator><name pos:line="92" pos:column="10">ctx<pos:position pos:line="92" pos:column="13"/></name> <operator pos:line="92" pos:column="14">=<pos:position pos:line="92" pos:column="15"/></operator> <name pos:line="92" pos:column="16">block<pos:position pos:line="92" pos:column="21"/></name> <operator pos:line="92" pos:column="22">=<pos:position pos:line="92" pos:column="23"/></operator> <call><name pos:line="92" pos:column="24">apr_pcalloc<pos:position pos:line="92" pos:column="35"/></name><argument_list pos:line="92" pos:column="35">(<argument><expr><name pos:line="92" pos:column="36">p<pos:position pos:line="92" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="39">sizeof<argument_list pos:line="92" pos:column="45">(<argument><expr><name pos:line="92" pos:column="46">apr_crypto_block_t<pos:position pos:line="92" pos:column="64"/></name></expr></argument>)<pos:position pos:line="92" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="93" pos:column="6"/></block></then></if>
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><operator pos:line="94" pos:column="9">!<pos:position pos:line="94" pos:column="10"/></operator><name pos:line="94" pos:column="10">block<pos:position pos:line="94" pos:column="15"/></name></expr>)<pos:position pos:line="94" pos:column="16"/></condition><then pos:line="94" pos:column="16"> <block pos:line="94" pos:column="17">{
        <return pos:line="95" pos:column="9">return <expr><name pos:line="95" pos:column="16">APR_ENOMEM<pos:position pos:line="95" pos:column="26"/></name></expr>;<pos:position pos:line="95" pos:column="27"/></return>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="97" pos:column="5">block<pos:position pos:line="97" pos:column="10"/></name><operator pos:line="97" pos:column="10">-&gt;<pos:position pos:line="97" pos:column="15"/></operator><name pos:line="97" pos:column="12">f<pos:position pos:line="97" pos:column="13"/></name></name> <operator pos:line="97" pos:column="14">=<pos:position pos:line="97" pos:column="15"/></operator> <name><name pos:line="97" pos:column="16">key<pos:position pos:line="97" pos:column="19"/></name><operator pos:line="97" pos:column="19">-&gt;<pos:position pos:line="97" pos:column="24"/></operator><name pos:line="97" pos:column="21">f<pos:position pos:line="97" pos:column="22"/></name></name></expr>;<pos:position pos:line="97" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="98" pos:column="5">block<pos:position pos:line="98" pos:column="10"/></name><operator pos:line="98" pos:column="10">-&gt;<pos:position pos:line="98" pos:column="15"/></operator><name pos:line="98" pos:column="12">pool<pos:position pos:line="98" pos:column="16"/></name></name> <operator pos:line="98" pos:column="17">=<pos:position pos:line="98" pos:column="18"/></operator> <name pos:line="98" pos:column="19">p<pos:position pos:line="98" pos:column="20"/></name></expr>;<pos:position pos:line="98" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="99" pos:column="5">block<pos:position pos:line="99" pos:column="10"/></name><operator pos:line="99" pos:column="10">-&gt;<pos:position pos:line="99" pos:column="15"/></operator><name pos:line="99" pos:column="12">provider<pos:position pos:line="99" pos:column="20"/></name></name> <operator pos:line="99" pos:column="21">=<pos:position pos:line="99" pos:column="22"/></operator> <name><name pos:line="99" pos:column="23">key<pos:position pos:line="99" pos:column="26"/></name><operator pos:line="99" pos:column="26">-&gt;<pos:position pos:line="99" pos:column="31"/></operator><name pos:line="99" pos:column="28">provider<pos:position pos:line="99" pos:column="36"/></name></name></expr>;<pos:position pos:line="99" pos:column="37"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="101" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="101" pos:column="30"/></name><argument_list pos:line="101" pos:column="30">(<argument><expr><name pos:line="101" pos:column="31">p<pos:position pos:line="101" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="34">block<pos:position pos:line="101" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="41">crypto_block_cleanup_helper<pos:position pos:line="101" pos:column="68"/></name></expr></argument>,
            <argument><expr><name pos:line="102" pos:column="13">apr_pool_cleanup_null<pos:position pos:line="102" pos:column="34"/></name></expr></argument>)<pos:position pos:line="102" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="36"/></expr_stmt>

    <comment type="block" pos:line="104" pos:column="5">/* create a new context for encryption */</comment>
    <expr_stmt><expr><call><name pos:line="105" pos:column="5">EVP_CIPHER_CTX_init<pos:position pos:line="105" pos:column="24"/></name><argument_list pos:line="105" pos:column="24">(<argument><expr><operator pos:line="105" pos:column="25">&amp;<pos:position pos:line="105" pos:column="30"/></operator><name><name pos:line="105" pos:column="26">block<pos:position pos:line="105" pos:column="31"/></name><operator pos:line="105" pos:column="31">-&gt;<pos:position pos:line="105" pos:column="36"/></operator><name pos:line="105" pos:column="33">cipherCtx<pos:position pos:line="105" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="105" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="106" pos:column="5">block<pos:position pos:line="106" pos:column="10"/></name><operator pos:line="106" pos:column="10">-&gt;<pos:position pos:line="106" pos:column="15"/></operator><name pos:line="106" pos:column="12">initialised<pos:position pos:line="106" pos:column="23"/></name></name> <operator pos:line="106" pos:column="24">=<pos:position pos:line="106" pos:column="25"/></operator> <literal type="number" pos:line="106" pos:column="26">1<pos:position pos:line="106" pos:column="27"/></literal></expr>;<pos:position pos:line="106" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="108" pos:column="5">/* generate an IV, if necessary */</comment>
    <if pos:line="109" pos:column="5">if <condition pos:line="109" pos:column="8">(<expr><name><name pos:line="109" pos:column="9">key<pos:position pos:line="109" pos:column="12"/></name><operator pos:line="109" pos:column="12">-&gt;<pos:position pos:line="109" pos:column="17"/></operator><name pos:line="109" pos:column="14">ivSize<pos:position pos:line="109" pos:column="20"/></name></name></expr>)<pos:position pos:line="109" pos:column="21"/></condition><then pos:line="109" pos:column="21"> <block pos:line="109" pos:column="22">{
        <if pos:line="110" pos:column="9">if <condition pos:line="110" pos:column="12">(<expr><name pos:line="110" pos:column="13">iv<pos:position pos:line="110" pos:column="15"/></name> <operator pos:line="110" pos:column="16">==<pos:position pos:line="110" pos:column="18"/></operator> <name pos:line="110" pos:column="19">NULL<pos:position pos:line="110" pos:column="23"/></name></expr>)<pos:position pos:line="110" pos:column="24"/></condition><then pos:line="110" pos:column="24"> <block pos:line="110" pos:column="25">{
            <return pos:line="111" pos:column="13">return <expr><name pos:line="111" pos:column="20">APR_ENOIV<pos:position pos:line="111" pos:column="29"/></name></expr>;<pos:position pos:line="111" pos:column="30"/></return>
        }<pos:position pos:line="112" pos:column="10"/></block></then></if>
    }<pos:position pos:line="113" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="115" pos:column="5">/* set up our encryption context */</comment>
<cpp:if pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">if<pos:position pos:line="116" pos:column="4"/></cpp:directive> <expr><name pos:line="116" pos:column="5">CRYPTO_OPENSSL_CONST_BUFFERS<pos:position pos:line="116" pos:column="33"/></name></expr></cpp:if>
    <if pos:line="117" pos:column="5">if <condition pos:line="117" pos:column="8">(<expr><operator pos:line="117" pos:column="9">!<pos:position pos:line="117" pos:column="10"/></operator><call><name pos:line="117" pos:column="10">EVP_DecryptInit_ex<pos:position pos:line="117" pos:column="28"/></name><argument_list pos:line="117" pos:column="28">(<argument><expr><operator pos:line="117" pos:column="29">&amp;<pos:position pos:line="117" pos:column="34"/></operator><name><name pos:line="117" pos:column="30">block<pos:position pos:line="117" pos:column="35"/></name><operator pos:line="117" pos:column="35">-&gt;<pos:position pos:line="117" pos:column="40"/></operator><name pos:line="117" pos:column="37">cipherCtx<pos:position pos:line="117" pos:column="46"/></name></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="48">key<pos:position pos:line="117" pos:column="51"/></name><operator pos:line="117" pos:column="51">-&gt;<pos:position pos:line="117" pos:column="56"/></operator><name pos:line="117" pos:column="53">cipher<pos:position pos:line="117" pos:column="59"/></name></name></expr></argument>, <argument><expr><name><name pos:line="117" pos:column="61">config<pos:position pos:line="117" pos:column="67"/></name><operator pos:line="117" pos:column="67">-&gt;<pos:position pos:line="117" pos:column="72"/></operator><name pos:line="117" pos:column="69">engine<pos:position pos:line="117" pos:column="75"/></name></name></expr></argument>,
            <argument><expr><name><name pos:line="118" pos:column="13">key<pos:position pos:line="118" pos:column="16"/></name><operator pos:line="118" pos:column="16">-&gt;<pos:position pos:line="118" pos:column="21"/></operator><name pos:line="118" pos:column="18">key<pos:position pos:line="118" pos:column="21"/></name></name></expr></argument>, <argument><expr><name pos:line="118" pos:column="23">iv<pos:position pos:line="118" pos:column="25"/></name></expr></argument>)<pos:position pos:line="118" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="118" pos:column="27"/></condition><then pos:line="118" pos:column="27"> <block pos:line="118" pos:column="28">{
<cpp:else pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">else<pos:position pos:line="119" pos:column="6"/></cpp:directive></cpp:else>
        <if pos:line="120" pos:column="9">if <condition pos:line="120" pos:column="12">(<expr><operator pos:line="120" pos:column="13">!<pos:position pos:line="120" pos:column="14"/></operator><call><name pos:line="120" pos:column="14">EVP_DecryptInit_ex<pos:position pos:line="120" pos:column="32"/></name><argument_list pos:line="120" pos:column="32">(<argument><expr><operator pos:line="120" pos:column="33">&amp;<pos:position pos:line="120" pos:column="38"/></operator><name><name pos:line="120" pos:column="34">block<pos:position pos:line="120" pos:column="39"/></name><operator pos:line="120" pos:column="39">-&gt;<pos:position pos:line="120" pos:column="44"/></operator><name pos:line="120" pos:column="41">cipherCtx<pos:position pos:line="120" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="52">key<pos:position pos:line="120" pos:column="55"/></name><operator pos:line="120" pos:column="55">-&gt;<pos:position pos:line="120" pos:column="60"/></operator><name pos:line="120" pos:column="57">cipher<pos:position pos:line="120" pos:column="63"/></name></name></expr></argument>, <argument><expr><name><name pos:line="120" pos:column="65">config<pos:position pos:line="120" pos:column="71"/></name><operator pos:line="120" pos:column="71">-&gt;<pos:position pos:line="120" pos:column="76"/></operator><name pos:line="120" pos:column="73">engine<pos:position pos:line="120" pos:column="79"/></name></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="81">(<pos:position pos:line="120" pos:column="82"/></operator><name pos:line="120" pos:column="82">unsigned<pos:position pos:line="120" pos:column="90"/></name> <name pos:line="120" pos:column="91">char<pos:position pos:line="120" pos:column="95"/></name> <operator pos:line="120" pos:column="96">*<pos:position pos:line="120" pos:column="97"/></operator><operator pos:line="120" pos:column="97">)<pos:position pos:line="120" pos:column="98"/></operator> <name><name pos:line="120" pos:column="99">key<pos:position pos:line="120" pos:column="102"/></name><operator pos:line="120" pos:column="102">-&gt;<pos:position pos:line="120" pos:column="107"/></operator><name pos:line="120" pos:column="104">key<pos:position pos:line="120" pos:column="107"/></name></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="109">(<pos:position pos:line="120" pos:column="110"/></operator><name pos:line="120" pos:column="110">unsigned<pos:position pos:line="120" pos:column="118"/></name> <name pos:line="120" pos:column="119">char<pos:position pos:line="120" pos:column="123"/></name> <operator pos:line="120" pos:column="124">*<pos:position pos:line="120" pos:column="125"/></operator><operator pos:line="120" pos:column="125">)<pos:position pos:line="120" pos:column="126"/></operator> <name pos:line="120" pos:column="127">iv<pos:position pos:line="120" pos:column="129"/></name></expr></argument>)<pos:position pos:line="120" pos:column="130"/></argument_list></call></expr>)<pos:position pos:line="120" pos:column="131"/></condition><then pos:line="120" pos:column="131"> <block pos:line="120" pos:column="132">{
<cpp:endif pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">endif<pos:position pos:line="121" pos:column="7"/></cpp:directive></cpp:endif>
        <return pos:line="122" pos:column="9">return <expr><name pos:line="122" pos:column="16">APR_EINIT<pos:position pos:line="122" pos:column="25"/></name></expr>;<pos:position pos:line="122" pos:column="26"/></return>
    }<pos:position pos:line="123" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="125" pos:column="5">/* Clear up any read padding */</comment>
    <if pos:line="126" pos:column="5">if <condition pos:line="126" pos:column="8">(<expr><operator pos:line="126" pos:column="9">!<pos:position pos:line="126" pos:column="10"/></operator><call><name pos:line="126" pos:column="10">EVP_CIPHER_CTX_set_padding<pos:position pos:line="126" pos:column="36"/></name><argument_list pos:line="126" pos:column="36">(<argument><expr><operator pos:line="126" pos:column="37">&amp;<pos:position pos:line="126" pos:column="42"/></operator><name><name pos:line="126" pos:column="38">block<pos:position pos:line="126" pos:column="43"/></name><operator pos:line="126" pos:column="43">-&gt;<pos:position pos:line="126" pos:column="48"/></operator><name pos:line="126" pos:column="45">cipherCtx<pos:position pos:line="126" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="126" pos:column="56">key<pos:position pos:line="126" pos:column="59"/></name><operator pos:line="126" pos:column="59">-&gt;<pos:position pos:line="126" pos:column="64"/></operator><name pos:line="126" pos:column="61">doPad<pos:position pos:line="126" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="126" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="68"/></condition><then pos:line="126" pos:column="68"> <block pos:line="126" pos:column="69">{
        <return pos:line="127" pos:column="9">return <expr><name pos:line="127" pos:column="16">APR_EPADDING<pos:position pos:line="127" pos:column="28"/></name></expr>;<pos:position pos:line="127" pos:column="29"/></return>
    }<pos:position pos:line="128" pos:column="6"/></block></then></if>

    <if pos:line="130" pos:column="5">if <condition pos:line="130" pos:column="8">(<expr><name pos:line="130" pos:column="9">blockSize<pos:position pos:line="130" pos:column="18"/></name></expr>)<pos:position pos:line="130" pos:column="19"/></condition><then pos:line="130" pos:column="19"> <block pos:line="130" pos:column="20">{
        <expr_stmt><expr><operator pos:line="131" pos:column="9">*<pos:position pos:line="131" pos:column="10"/></operator><name pos:line="131" pos:column="10">blockSize<pos:position pos:line="131" pos:column="19"/></name> <operator pos:line="131" pos:column="20">=<pos:position pos:line="131" pos:column="21"/></operator> <call><name pos:line="131" pos:column="22">EVP_CIPHER_block_size<pos:position pos:line="131" pos:column="43"/></name><argument_list pos:line="131" pos:column="43">(<argument><expr><name><name pos:line="131" pos:column="44">key<pos:position pos:line="131" pos:column="47"/></name><operator pos:line="131" pos:column="47">-&gt;<pos:position pos:line="131" pos:column="52"/></operator><name pos:line="131" pos:column="49">cipher<pos:position pos:line="131" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="57"/></expr_stmt>
    }<pos:position pos:line="132" pos:column="6"/></block></then></if>

    <return pos:line="134" pos:column="5">return <expr><name pos:line="134" pos:column="12">APR_SUCCESS<pos:position pos:line="134" pos:column="23"/></name></expr>;<pos:position pos:line="134" pos:column="24"/></return>

}<pos:position pos:line="136" pos:column="2"/></block></then></if>

<comment type="block" format="doxygen" pos:line="138" pos:column="1">/**
 * @brief Decrypt data provided by in, write it to out.
 * @note The number of bytes written will be written to outlen. If
 *       out is NULL, outlen will contain the maximum size of the
 *       buffer needed to hold the data, including any data
 *       generated by apr_crypto_block_decrypt_finish below. If *out points
 *       to NULL, a buffer sufficiently large will be created from
 *       the pool provided. If *out points to a not-NULL value, this
 *       value will be used as a buffer instead.
 * @param out Address of a buffer to which data will be written,
 *        see note.
 * @param outlen Length of the output will be written here.
 * @param in Address of the buffer to read.
 * @param inlen Length of the buffer to read.
 * @param ctx The block context to use.
 * @return APR_ECRYPT if an error occurred. Returns APR_ENOTIMPL if
 *         not implemented.
 */</comment>
<function><specifier pos:line="156" pos:column="1">static<pos:position pos:line="156" pos:column="7"/></specifier> <type><name pos:line="156" pos:column="8">apr_status_t<pos:position pos:line="156" pos:column="20"/></name></type> <name pos:line="156" pos:column="21">crypto_block_decrypt<pos:position pos:line="156" pos:column="41"/></name><parameter_list pos:line="156" pos:column="41">(<parameter><decl><type><name pos:line="156" pos:column="42">unsigned<pos:position pos:line="156" pos:column="50"/></name> <name pos:line="156" pos:column="51">char<pos:position pos:line="156" pos:column="55"/></name> <modifier pos:line="156" pos:column="56">*<pos:position pos:line="156" pos:column="57"/></modifier><modifier pos:line="156" pos:column="57">*<pos:position pos:line="156" pos:column="58"/></modifier></type><name pos:line="156" pos:column="58">out<pos:position pos:line="156" pos:column="61"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="157" pos:column="9">apr_size_t<pos:position pos:line="157" pos:column="19"/></name> <modifier pos:line="157" pos:column="20">*<pos:position pos:line="157" pos:column="21"/></modifier></type><name pos:line="157" pos:column="21">outlen<pos:position pos:line="157" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="157" pos:column="29">const<pos:position pos:line="157" pos:column="34"/></specifier> <name pos:line="157" pos:column="35">unsigned<pos:position pos:line="157" pos:column="43"/></name> <name pos:line="157" pos:column="44">char<pos:position pos:line="157" pos:column="48"/></name> <modifier pos:line="157" pos:column="49">*<pos:position pos:line="157" pos:column="50"/></modifier></type><name pos:line="157" pos:column="50">in<pos:position pos:line="157" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="157" pos:column="54">apr_size_t<pos:position pos:line="157" pos:column="64"/></name></type> <name pos:line="157" pos:column="65">inlen<pos:position pos:line="157" pos:column="70"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="158" pos:column="9">apr_crypto_block_t<pos:position pos:line="158" pos:column="27"/></name> <modifier pos:line="158" pos:column="28">*<pos:position pos:line="158" pos:column="29"/></modifier></type><name pos:line="158" pos:column="29">ctx<pos:position pos:line="158" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="158" pos:column="33"/></parameter_list>
<block pos:line="159" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="160" pos:column="5">int<pos:position pos:line="160" pos:column="8"/></name></type> <name pos:line="160" pos:column="9">outl<pos:position pos:line="160" pos:column="13"/></name> <init pos:line="160" pos:column="14">= <expr><operator pos:line="160" pos:column="16">*<pos:position pos:line="160" pos:column="17"/></operator><name pos:line="160" pos:column="17">outlen<pos:position pos:line="160" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="160" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="161" pos:column="5">unsigned<pos:position pos:line="161" pos:column="13"/></name> <name pos:line="161" pos:column="14">char<pos:position pos:line="161" pos:column="18"/></name> <modifier pos:line="161" pos:column="19">*<pos:position pos:line="161" pos:column="20"/></modifier></type><name pos:line="161" pos:column="20">buffer<pos:position pos:line="161" pos:column="26"/></name></decl>;<pos:position pos:line="161" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="163" pos:column="5">/* are we after the maximum size of the out buffer? */</comment>
    <if pos:line="164" pos:column="5">if <condition pos:line="164" pos:column="8">(<expr><operator pos:line="164" pos:column="9">!<pos:position pos:line="164" pos:column="10"/></operator><name pos:line="164" pos:column="10">out<pos:position pos:line="164" pos:column="13"/></name></expr>)<pos:position pos:line="164" pos:column="14"/></condition><then pos:line="164" pos:column="14"> <block pos:line="164" pos:column="15">{
        <expr_stmt><expr><operator pos:line="165" pos:column="9">*<pos:position pos:line="165" pos:column="10"/></operator><name pos:line="165" pos:column="10">outlen<pos:position pos:line="165" pos:column="16"/></name> <operator pos:line="165" pos:column="17">=<pos:position pos:line="165" pos:column="18"/></operator> <name pos:line="165" pos:column="19">inlen<pos:position pos:line="165" pos:column="24"/></name> <operator pos:line="165" pos:column="25">+<pos:position pos:line="165" pos:column="26"/></operator> <name pos:line="165" pos:column="27">EVP_MAX_BLOCK_LENGTH<pos:position pos:line="165" pos:column="47"/></name></expr>;<pos:position pos:line="165" pos:column="48"/></expr_stmt>
        <return pos:line="166" pos:column="9">return <expr><name pos:line="166" pos:column="16">APR_SUCCESS<pos:position pos:line="166" pos:column="27"/></name></expr>;<pos:position pos:line="166" pos:column="28"/></return>
    }<pos:position pos:line="167" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="169" pos:column="5">/* must we allocate the output buffer from a pool? */</comment>
    <if pos:line="170" pos:column="5">if <condition pos:line="170" pos:column="8">(<expr><operator pos:line="170" pos:column="9">!<pos:position pos:line="170" pos:column="10"/></operator><operator pos:line="170" pos:column="10">(<pos:position pos:line="170" pos:column="11"/></operator><operator pos:line="170" pos:column="11">*<pos:position pos:line="170" pos:column="12"/></operator><name pos:line="170" pos:column="12">out<pos:position pos:line="170" pos:column="15"/></name><operator pos:line="170" pos:column="15">)<pos:position pos:line="170" pos:column="16"/></operator></expr>)<pos:position pos:line="170" pos:column="17"/></condition><then pos:line="170" pos:column="17"> <block pos:line="170" pos:column="18">{
        <expr_stmt><expr><name pos:line="171" pos:column="9">buffer<pos:position pos:line="171" pos:column="15"/></name> <operator pos:line="171" pos:column="16">=<pos:position pos:line="171" pos:column="17"/></operator> <call><name pos:line="171" pos:column="18">apr_palloc<pos:position pos:line="171" pos:column="28"/></name><argument_list pos:line="171" pos:column="28">(<argument><expr><name><name pos:line="171" pos:column="29">ctx<pos:position pos:line="171" pos:column="32"/></name><operator pos:line="171" pos:column="32">-&gt;<pos:position pos:line="171" pos:column="37"/></operator><name pos:line="171" pos:column="34">pool<pos:position pos:line="171" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="40">inlen<pos:position pos:line="171" pos:column="45"/></name> <operator pos:line="171" pos:column="46">+<pos:position pos:line="171" pos:column="47"/></operator> <name pos:line="171" pos:column="48">EVP_MAX_BLOCK_LENGTH<pos:position pos:line="171" pos:column="68"/></name></expr></argument>)<pos:position pos:line="171" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="70"/></expr_stmt>
        <if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><operator pos:line="172" pos:column="13">!<pos:position pos:line="172" pos:column="14"/></operator><name pos:line="172" pos:column="14">buffer<pos:position pos:line="172" pos:column="20"/></name></expr>)<pos:position pos:line="172" pos:column="21"/></condition><then pos:line="172" pos:column="21"> <block pos:line="172" pos:column="22">{
            <return pos:line="173" pos:column="13">return <expr><name pos:line="173" pos:column="20">APR_ENOMEM<pos:position pos:line="173" pos:column="30"/></name></expr>;<pos:position pos:line="173" pos:column="31"/></return>
        }<pos:position pos:line="174" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="175" pos:column="9">apr_crypto_clear<pos:position pos:line="175" pos:column="25"/></name><argument_list pos:line="175" pos:column="25">(<argument><expr><name><name pos:line="175" pos:column="26">ctx<pos:position pos:line="175" pos:column="29"/></name><operator pos:line="175" pos:column="29">-&gt;<pos:position pos:line="175" pos:column="34"/></operator><name pos:line="175" pos:column="31">pool<pos:position pos:line="175" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="37">buffer<pos:position pos:line="175" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="45">inlen<pos:position pos:line="175" pos:column="50"/></name> <operator pos:line="175" pos:column="51">+<pos:position pos:line="175" pos:column="52"/></operator> <name pos:line="175" pos:column="53">EVP_MAX_BLOCK_LENGTH<pos:position pos:line="175" pos:column="73"/></name></expr></argument>)<pos:position pos:line="175" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="176" pos:column="9">*<pos:position pos:line="176" pos:column="10"/></operator><name pos:line="176" pos:column="10">out<pos:position pos:line="176" pos:column="13"/></name> <operator pos:line="176" pos:column="14">=<pos:position pos:line="176" pos:column="15"/></operator> <name pos:line="176" pos:column="16">buffer<pos:position pos:line="176" pos:column="22"/></name></expr>;<pos:position pos:line="176" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="177" pos:column="6"/></block></then></if>

<cpp:if pos:line="179" pos:column="1">#<cpp:directive pos:line="179" pos:column="2">if<pos:position pos:line="179" pos:column="4"/></cpp:directive> <expr><name pos:line="179" pos:column="5">CRYPT_OPENSSL_CONST_BUFFERS<pos:position pos:line="179" pos:column="32"/></name></expr></cpp:if>
    <if pos:line="180" pos:column="5">if <condition pos:line="180" pos:column="8">(<expr><operator pos:line="180" pos:column="9">!<pos:position pos:line="180" pos:column="10"/></operator><call><name pos:line="180" pos:column="10">EVP_DecryptUpdate<pos:position pos:line="180" pos:column="27"/></name><argument_list pos:line="180" pos:column="27">(<argument><expr><operator pos:line="180" pos:column="28">&amp;<pos:position pos:line="180" pos:column="33"/></operator><name><name pos:line="180" pos:column="29">ctx<pos:position pos:line="180" pos:column="32"/></name><operator pos:line="180" pos:column="32">-&gt;<pos:position pos:line="180" pos:column="37"/></operator><name pos:line="180" pos:column="34">cipherCtx<pos:position pos:line="180" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="180" pos:column="45">*<pos:position pos:line="180" pos:column="46"/></operator><name pos:line="180" pos:column="46">out<pos:position pos:line="180" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="180" pos:column="51">&amp;<pos:position pos:line="180" pos:column="56"/></operator><name pos:line="180" pos:column="52">outl<pos:position pos:line="180" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="58">in<pos:position pos:line="180" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="180" pos:column="62">inlen<pos:position pos:line="180" pos:column="67"/></name></expr></argument>)<pos:position pos:line="180" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="180" pos:column="69"/></condition><then pos:line="180" pos:column="69"> <block pos:line="180" pos:column="70">{
<cpp:else pos:line="181" pos:column="1">#<cpp:directive pos:line="181" pos:column="2">else<pos:position pos:line="181" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="182" pos:column="5">if <condition pos:line="182" pos:column="8">(<expr><operator pos:line="182" pos:column="9">!<pos:position pos:line="182" pos:column="10"/></operator><call><name pos:line="182" pos:column="10">EVP_DecryptUpdate<pos:position pos:line="182" pos:column="27"/></name><argument_list pos:line="182" pos:column="27">(<argument><expr><operator pos:line="182" pos:column="28">&amp;<pos:position pos:line="182" pos:column="33"/></operator><name><name pos:line="182" pos:column="29">ctx<pos:position pos:line="182" pos:column="32"/></name><operator pos:line="182" pos:column="32">-&gt;<pos:position pos:line="182" pos:column="37"/></operator><name pos:line="182" pos:column="34">cipherCtx<pos:position pos:line="182" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="182" pos:column="45">*<pos:position pos:line="182" pos:column="46"/></operator><name pos:line="182" pos:column="46">out<pos:position pos:line="182" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="182" pos:column="51">&amp;<pos:position pos:line="182" pos:column="56"/></operator><name pos:line="182" pos:column="52">outl<pos:position pos:line="182" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="182" pos:column="58">(<pos:position pos:line="182" pos:column="59"/></operator><name pos:line="182" pos:column="59">unsigned<pos:position pos:line="182" pos:column="67"/></name> <name pos:line="182" pos:column="68">char<pos:position pos:line="182" pos:column="72"/></name> <operator pos:line="182" pos:column="73">*<pos:position pos:line="182" pos:column="74"/></operator><operator pos:line="182" pos:column="74">)<pos:position pos:line="182" pos:column="75"/></operator> <name pos:line="182" pos:column="76">in<pos:position pos:line="182" pos:column="78"/></name></expr></argument>,
            <argument><expr><name pos:line="183" pos:column="13">inlen<pos:position pos:line="183" pos:column="18"/></name></expr></argument>)<pos:position pos:line="183" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="183" pos:column="20"/></condition><then pos:line="183" pos:column="20"> <block pos:line="183" pos:column="21">{
<cpp:endif pos:line="184" pos:column="1">#<cpp:directive pos:line="184" pos:column="2">endif<pos:position pos:line="184" pos:column="7"/></cpp:directive></cpp:endif>
        <return pos:line="185" pos:column="9">return <expr><name pos:line="185" pos:column="16">APR_ECRYPT<pos:position pos:line="185" pos:column="26"/></name></expr>;<pos:position pos:line="185" pos:column="27"/></return>
    }<pos:position pos:line="186" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="187" pos:column="5">*<pos:position pos:line="187" pos:column="6"/></operator><name pos:line="187" pos:column="6">outlen<pos:position pos:line="187" pos:column="12"/></name> <operator pos:line="187" pos:column="13">=<pos:position pos:line="187" pos:column="14"/></operator> <name pos:line="187" pos:column="15">outl<pos:position pos:line="187" pos:column="19"/></name></expr>;<pos:position pos:line="187" pos:column="20"/></expr_stmt>

    <return pos:line="189" pos:column="5">return <expr><name pos:line="189" pos:column="12">APR_SUCCESS<pos:position pos:line="189" pos:column="23"/></name></expr>;<pos:position pos:line="189" pos:column="24"/></return>

}<pos:position pos:line="191" pos:column="2"/></block></then></if>

<comment type="block" format="doxygen" pos:line="193" pos:column="1">/**
 * @brief Decrypt final data block, write it to out.
 * @note If necessary the final block will be written out after being
 *       padded. Typically the final block will be written to the
 *       same buffer used by apr_crypto_block_decrypt, offset by the
 *       number of bytes returned as actually written by the
 *       apr_crypto_block_decrypt() call. After this call, the context
 *       is cleaned and can be reused by apr_crypto_block_decrypt_init().
 * @param out Address of a buffer to which data will be written. This
 *            buffer must already exist, and is usually the same
 *            buffer used by apr_evp_crypt(). See note.
 * @param outlen Length of the output will be written here.
 * @param ctx The block context to use.
 * @return APR_ECRYPT if an error occurred.
 * @return APR_EPADDING if padding was enabled and the block was incorrectly
 *         formatted.
 * @return APR_ENOTIMPL if not implemented.
 */</comment>
<function><specifier pos:line="211" pos:column="1">static<pos:position pos:line="211" pos:column="7"/></specifier> <type><name pos:line="211" pos:column="8">apr_status_t<pos:position pos:line="211" pos:column="20"/></name></type> <name pos:line="211" pos:column="21">crypto_block_decrypt_finish<pos:position pos:line="211" pos:column="48"/></name><parameter_list pos:line="211" pos:column="48">(<parameter><decl><type><name pos:line="211" pos:column="49">unsigned<pos:position pos:line="211" pos:column="57"/></name> <name pos:line="211" pos:column="58">char<pos:position pos:line="211" pos:column="62"/></name> <modifier pos:line="211" pos:column="63">*<pos:position pos:line="211" pos:column="64"/></modifier></type><name pos:line="211" pos:column="64">out<pos:position pos:line="211" pos:column="67"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="212" pos:column="9">apr_size_t<pos:position pos:line="212" pos:column="19"/></name> <modifier pos:line="212" pos:column="20">*<pos:position pos:line="212" pos:column="21"/></modifier></type><name pos:line="212" pos:column="21">outlen<pos:position pos:line="212" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="212" pos:column="29">apr_crypto_block_t<pos:position pos:line="212" pos:column="47"/></name> <modifier pos:line="212" pos:column="48">*<pos:position pos:line="212" pos:column="49"/></modifier></type><name pos:line="212" pos:column="49">ctx<pos:position pos:line="212" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="212" pos:column="53"/></parameter_list>
<block pos:line="213" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="215" pos:column="5">int<pos:position pos:line="215" pos:column="8"/></name></type> <name pos:line="215" pos:column="9">len<pos:position pos:line="215" pos:column="12"/></name> <init pos:line="215" pos:column="13">= <expr><operator pos:line="215" pos:column="15">*<pos:position pos:line="215" pos:column="16"/></operator><name pos:line="215" pos:column="16">outlen<pos:position pos:line="215" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="215" pos:column="23"/></decl_stmt>

    <if pos:line="217" pos:column="5">if <condition pos:line="217" pos:column="8">(<expr><call><name pos:line="217" pos:column="9">EVP_DecryptFinal_ex<pos:position pos:line="217" pos:column="28"/></name><argument_list pos:line="217" pos:column="28">(<argument><expr><operator pos:line="217" pos:column="29">&amp;<pos:position pos:line="217" pos:column="34"/></operator><name><name pos:line="217" pos:column="30">ctx<pos:position pos:line="217" pos:column="33"/></name><operator pos:line="217" pos:column="33">-&gt;<pos:position pos:line="217" pos:column="38"/></operator><name pos:line="217" pos:column="35">cipherCtx<pos:position pos:line="217" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="217" pos:column="46">out<pos:position pos:line="217" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="217" pos:column="51">&amp;<pos:position pos:line="217" pos:column="56"/></operator><name pos:line="217" pos:column="52">len<pos:position pos:line="217" pos:column="55"/></name></expr></argument>)<pos:position pos:line="217" pos:column="56"/></argument_list></call> <operator pos:line="217" pos:column="57">==<pos:position pos:line="217" pos:column="59"/></operator> <literal type="number" pos:line="217" pos:column="60">0<pos:position pos:line="217" pos:column="61"/></literal></expr>)<pos:position pos:line="217" pos:column="62"/></condition><then pos:line="217" pos:column="62"> <block pos:line="217" pos:column="63">{
        <return pos:line="218" pos:column="9">return <expr><name pos:line="218" pos:column="16">APR_EPADDING<pos:position pos:line="218" pos:column="28"/></name></expr>;<pos:position pos:line="218" pos:column="29"/></return>
    }<pos:position pos:line="219" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="220" pos:column="5">*<pos:position pos:line="220" pos:column="6"/></operator><name pos:line="220" pos:column="6">outlen<pos:position pos:line="220" pos:column="12"/></name> <operator pos:line="220" pos:column="13">=<pos:position pos:line="220" pos:column="14"/></operator> <name pos:line="220" pos:column="15">len<pos:position pos:line="220" pos:column="18"/></name></expr>;<pos:position pos:line="220" pos:column="19"/></expr_stmt>

    <return pos:line="222" pos:column="5">return <expr><name pos:line="222" pos:column="12">APR_SUCCESS<pos:position pos:line="222" pos:column="23"/></name></expr>;<pos:position pos:line="222" pos:column="24"/></return>

}<pos:position pos:line="224" pos:column="2"/></block></function>

<comment type="block" format="doxygen" pos:line="226" pos:column="1">/**
 * OpenSSL module.
 */</comment>
<decl_stmt><decl><type><name pos:line="229" pos:column="1">APU_MODULE_DECLARE_DATA<pos:position pos:line="229" pos:column="24"/></name> <specifier pos:line="229" pos:column="25">const<pos:position pos:line="229" pos:column="30"/></specifier> <name pos:line="229" pos:column="31">apr_crypto_driver_t<pos:position pos:line="229" pos:column="50"/></name></type> <name pos:line="229" pos:column="51">apr_crypto_openssl_driver<pos:position pos:line="229" pos:column="76"/></name> <init pos:line="229" pos:column="77">= <expr><block pos:line="229" pos:column="79">{
    <expr><literal type="string" pos:line="230" pos:column="5">"openssl"<pos:position pos:line="230" pos:column="14"/></literal></expr>, <expr><name pos:line="230" pos:column="16">crypto_init<pos:position pos:line="230" pos:column="27"/></name></expr>, <expr><name pos:line="230" pos:column="29">crypto_make<pos:position pos:line="230" pos:column="40"/></name></expr>, <expr><name pos:line="230" pos:column="42">crypto_get_block_key_types<pos:position pos:line="230" pos:column="68"/></name></expr>,
    <expr><name pos:line="231" pos:column="5">crypto_get_block_key_modes<pos:position pos:line="231" pos:column="31"/></name></expr>, <expr><name pos:line="231" pos:column="33">crypto_passphrase<pos:position pos:line="231" pos:column="50"/></name></expr>,
    <expr><name pos:line="232" pos:column="5">crypto_block_encrypt_init<pos:position pos:line="232" pos:column="30"/></name></expr>, <expr><name pos:line="232" pos:column="32">crypto_block_encrypt<pos:position pos:line="232" pos:column="52"/></name></expr>,
    <expr><name pos:line="233" pos:column="5">crypto_block_encrypt_finish<pos:position pos:line="233" pos:column="32"/></name></expr>, <expr><name pos:line="233" pos:column="34">crypto_block_decrypt_init<pos:position pos:line="233" pos:column="59"/></name></expr>,
    <expr><name pos:line="234" pos:column="5">crypto_block_decrypt<pos:position pos:line="234" pos:column="25"/></name></expr>, <expr><name pos:line="234" pos:column="27">crypto_block_decrypt_finish<pos:position pos:line="234" pos:column="54"/></name></expr>,
    <expr><name pos:line="235" pos:column="5">crypto_block_cleanup<pos:position pos:line="235" pos:column="25"/></name></expr>, <expr><name pos:line="235" pos:column="27">crypto_cleanup<pos:position pos:line="235" pos:column="41"/></name></expr>, <expr><name pos:line="235" pos:column="43">crypto_shutdown<pos:position pos:line="235" pos:column="58"/></name></expr>, <expr><name pos:line="235" pos:column="60">crypto_error<pos:position pos:line="235" pos:column="72"/></name></expr>
}<pos:position pos:line="236" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="236" pos:column="3"/></decl_stmt></block></function></block></function></block></function></unit>
