<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6021.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">h2_stream<pos:position pos:line="1" pos:column="10"/></name> <modifier pos:line="1" pos:column="11">*<pos:position pos:line="1" pos:column="12"/></modifier></type><name pos:line="1" pos:column="12">h2_mplx_next_submit<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">h2_mplx<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">m<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">h2_ihash_t<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier></type><name pos:line="1" pos:column="56">streams<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">status<pos:position pos:line="3" pos:column="24"/></name></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">h2_stream<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">stream<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name pos:line="4" pos:column="25">NULL<pos:position pos:line="4" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">acquired<pos:position pos:line="5" pos:column="17"/></name></decl>;<pos:position pos:line="5" pos:column="18"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">AP_DEBUG_ASSERT<pos:position pos:line="7" pos:column="20"/></name><argument_list pos:line="7" pos:column="20">(<argument><expr><name pos:line="7" pos:column="21">m<pos:position pos:line="7" pos:column="22"/></name></expr></argument>)<pos:position pos:line="7" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">(<pos:position pos:line="8" pos:column="10"/></operator><name pos:line="8" pos:column="10">status<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <call><name pos:line="8" pos:column="19">enter_mutex<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">m<pos:position pos:line="8" pos:column="32"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="34">&amp;<pos:position pos:line="8" pos:column="39"/></operator><name pos:line="8" pos:column="35">acquired<pos:position pos:line="8" pos:column="43"/></name></expr></argument>)<pos:position pos:line="8" pos:column="44"/></argument_list></call><operator pos:line="8" pos:column="44">)<pos:position pos:line="8" pos:column="45"/></operator> <operator pos:line="8" pos:column="46">==<pos:position pos:line="8" pos:column="48"/></operator> <name pos:line="8" pos:column="49">APR_SUCCESS<pos:position pos:line="8" pos:column="60"/></name></expr>)<pos:position pos:line="8" pos:column="61"/></condition><then pos:line="8" pos:column="61"> <block pos:line="8" pos:column="62">{
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">h2_io<pos:position pos:line="9" pos:column="14"/></name> <modifier pos:line="9" pos:column="15">*<pos:position pos:line="9" pos:column="16"/></modifier></type><name pos:line="9" pos:column="16">io<pos:position pos:line="9" pos:column="18"/></name> <init pos:line="9" pos:column="19">= <expr><call><name pos:line="9" pos:column="21">h2_io_set_shift<pos:position pos:line="9" pos:column="36"/></name><argument_list pos:line="9" pos:column="36">(<argument><expr><name><name pos:line="9" pos:column="37">m<pos:position pos:line="9" pos:column="38"/></name><operator pos:line="9" pos:column="38">-&gt;<pos:position pos:line="9" pos:column="43"/></operator><name pos:line="9" pos:column="40">ready_ios<pos:position pos:line="9" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="51"/></decl_stmt>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">io<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">&amp;&amp;<pos:position pos:line="10" pos:column="26"/></operator> <operator pos:line="10" pos:column="19">!<pos:position pos:line="10" pos:column="20"/></operator><name><name pos:line="10" pos:column="20">m<pos:position pos:line="10" pos:column="21"/></name><operator pos:line="10" pos:column="21">-&gt;<pos:position pos:line="10" pos:column="26"/></operator><name pos:line="10" pos:column="23">aborted<pos:position pos:line="10" pos:column="30"/></name></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31"> <block pos:line="10" pos:column="32">{
            <expr_stmt><expr><name pos:line="11" pos:column="13">stream<pos:position pos:line="11" pos:column="19"/></name> <operator pos:line="11" pos:column="20">=<pos:position pos:line="11" pos:column="21"/></operator> <call><name pos:line="11" pos:column="22">h2_ihash_get<pos:position pos:line="11" pos:column="34"/></name><argument_list pos:line="11" pos:column="34">(<argument><expr><name pos:line="11" pos:column="35">streams<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="44">io<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">-&gt;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="48">id<pos:position pos:line="11" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="52"/></expr_stmt>
            <if pos:line="12" pos:column="13">if <condition pos:line="12" pos:column="16">(<expr><name pos:line="12" pos:column="17">stream<pos:position pos:line="12" pos:column="23"/></name></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24"> <block pos:line="12" pos:column="25">{
                <expr_stmt><expr><name><name pos:line="13" pos:column="17">io<pos:position pos:line="13" pos:column="19"/></name><operator pos:line="13" pos:column="19">-&gt;<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="21">submitted<pos:position pos:line="13" pos:column="30"/></name></name> <operator pos:line="13" pos:column="31">=<pos:position pos:line="13" pos:column="32"/></operator> <literal type="number" pos:line="13" pos:column="33">1<pos:position pos:line="13" pos:column="34"/></literal></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>
                <if pos:line="14" pos:column="17">if <condition pos:line="14" pos:column="20">(<expr><name><name pos:line="14" pos:column="21">io<pos:position pos:line="14" pos:column="23"/></name><operator pos:line="14" pos:column="23">-&gt;<pos:position pos:line="14" pos:column="28"/></operator><name pos:line="14" pos:column="25">rst_error<pos:position pos:line="14" pos:column="34"/></name></name></expr>)<pos:position pos:line="14" pos:column="35"/></condition><then pos:line="14" pos:column="35"> <block pos:line="14" pos:column="36">{
                    <expr_stmt><expr><call><name pos:line="15" pos:column="21">h2_stream_rst<pos:position pos:line="15" pos:column="34"/></name><argument_list pos:line="15" pos:column="34">(<argument><expr><name pos:line="15" pos:column="35">stream<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="15" pos:column="43">io<pos:position pos:line="15" pos:column="45"/></name><operator pos:line="15" pos:column="45">-&gt;<pos:position pos:line="15" pos:column="50"/></operator><name pos:line="15" pos:column="47">rst_error<pos:position pos:line="15" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="58"/></expr_stmt>
                }<pos:position pos:line="16" pos:column="18"/></block></then>
                <else pos:line="17" pos:column="17">else <block pos:line="17" pos:column="22">{
                    <expr_stmt><expr><call><name pos:line="18" pos:column="21">AP_DEBUG_ASSERT<pos:position pos:line="18" pos:column="36"/></name><argument_list pos:line="18" pos:column="36">(<argument><expr><name><name pos:line="18" pos:column="37">io<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">response<pos:position pos:line="18" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="19" pos:column="21">H2_MPLX_IO_OUT<pos:position pos:line="19" pos:column="35"/></name><argument_list pos:line="19" pos:column="35">(<argument><expr><name pos:line="19" pos:column="36">APLOG_TRACE2<pos:position pos:line="19" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="50">m<pos:position pos:line="19" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="53">io<pos:position pos:line="19" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="19" pos:column="57">"h2_mplx_next_submit_pre"<pos:position pos:line="19" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="19" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="84"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="20" pos:column="21">h2_stream_set_response<pos:position pos:line="20" pos:column="43"/></name><argument_list pos:line="20" pos:column="43">(<argument><expr><name pos:line="20" pos:column="44">stream<pos:position pos:line="20" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="52">io<pos:position pos:line="20" pos:column="54"/></name><operator pos:line="20" pos:column="54">-&gt;<pos:position pos:line="20" pos:column="59"/></operator><name pos:line="20" pos:column="56">response<pos:position pos:line="20" pos:column="64"/></name></name></expr></argument>, <argument><expr><name><name pos:line="20" pos:column="66">io<pos:position pos:line="20" pos:column="68"/></name><operator pos:line="20" pos:column="68">-&gt;<pos:position pos:line="20" pos:column="73"/></operator><name pos:line="20" pos:column="70">bbout<pos:position pos:line="20" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="20" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="77"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="21" pos:column="21">H2_MPLX_IO_OUT<pos:position pos:line="21" pos:column="35"/></name><argument_list pos:line="21" pos:column="35">(<argument><expr><name pos:line="21" pos:column="36">APLOG_TRACE2<pos:position pos:line="21" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="50">m<pos:position pos:line="21" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="53">io<pos:position pos:line="21" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="57">"h2_mplx_next_submit_post"<pos:position pos:line="21" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="85"/></expr_stmt>
                }<pos:position pos:line="22" pos:column="18"/></block></else></if>
            }<pos:position pos:line="23" pos:column="14"/></block></then>
            <else pos:line="24" pos:column="13">else <block pos:line="24" pos:column="18">{
                <comment type="block" pos:line="25" pos:column="17">/* We have the io ready, but the stream has gone away, maybe
                 * reset by the client. Should no longer happen since such
                 * streams should clear io's from the ready queue.
                 */</comment>
                <expr_stmt><expr><call><name pos:line="29" pos:column="17">ap_log_cerror<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">APLOG_MARK<pos:position pos:line="29" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="43">APLOG_WARNING<pos:position pos:line="29" pos:column="56"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="58">0<pos:position pos:line="29" pos:column="59"/></literal></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="61">m<pos:position pos:line="29" pos:column="62"/></name><operator pos:line="29" pos:column="62">-&gt;<pos:position pos:line="29" pos:column="67"/></operator><name pos:line="29" pos:column="64">c<pos:position pos:line="29" pos:column="65"/></name></name></expr></argument>, <argument><expr><call><name pos:line="29" pos:column="67">APLOGNO<pos:position pos:line="29" pos:column="74"/></name><argument_list pos:line="29" pos:column="74">(<argument><expr><literal type="number" pos:line="29" pos:column="75">03347<pos:position pos:line="29" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="29" pos:column="81"/></argument_list></call>
                              <literal type="string" pos:line="30" pos:column="31">"h2_mplx(%ld): stream for response %d closed, "<pos:position pos:line="30" pos:column="78"/></literal>
                              <literal type="string" pos:line="31" pos:column="31">"resetting io to close request processing"<pos:position pos:line="31" pos:column="73"/></literal></expr></argument>,
                              <argument><expr><name><name pos:line="32" pos:column="31">m<pos:position pos:line="32" pos:column="32"/></name><operator pos:line="32" pos:column="32">-&gt;<pos:position pos:line="32" pos:column="37"/></operator><name pos:line="32" pos:column="34">id<pos:position pos:line="32" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="38">io<pos:position pos:line="32" pos:column="40"/></name><operator pos:line="32" pos:column="40">-&gt;<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="42">id<pos:position pos:line="32" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="33" pos:column="17">h2_io_make_orphaned<pos:position pos:line="33" pos:column="36"/></name><argument_list pos:line="33" pos:column="36">(<argument><expr><name pos:line="33" pos:column="37">io<pos:position pos:line="33" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="41">H2_ERR_STREAM_CLOSED<pos:position pos:line="33" pos:column="61"/></name></expr></argument>)<pos:position pos:line="33" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="63"/></expr_stmt>
                <if pos:line="34" pos:column="17">if <condition pos:line="34" pos:column="20">(<expr><operator pos:line="34" pos:column="21">!<pos:position pos:line="34" pos:column="22"/></operator><name><name pos:line="34" pos:column="22">io<pos:position pos:line="34" pos:column="24"/></name><operator pos:line="34" pos:column="24">-&gt;<pos:position pos:line="34" pos:column="29"/></operator><name pos:line="34" pos:column="26">worker_started<pos:position pos:line="34" pos:column="40"/></name></name> <operator pos:line="34" pos:column="41">||<pos:position pos:line="34" pos:column="43"/></operator> <name><name pos:line="34" pos:column="44">io<pos:position pos:line="34" pos:column="46"/></name><operator pos:line="34" pos:column="46">-&gt;<pos:position pos:line="34" pos:column="51"/></operator><name pos:line="34" pos:column="48">worker_done<pos:position pos:line="34" pos:column="59"/></name></name></expr>)<pos:position pos:line="34" pos:column="60"/></condition><then pos:line="34" pos:column="60"> <block pos:line="34" pos:column="61">{
                    <expr_stmt><expr><call><name pos:line="35" pos:column="21">io_destroy<pos:position pos:line="35" pos:column="31"/></name><argument_list pos:line="35" pos:column="31">(<argument><expr><name pos:line="35" pos:column="32">m<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">io<pos:position pos:line="35" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="35" pos:column="39">1<pos:position pos:line="35" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="42"/></expr_stmt>
                }<pos:position pos:line="36" pos:column="18"/></block></then>
                <else pos:line="37" pos:column="17">else <block pos:line="37" pos:column="22">{
                    <comment type="block" pos:line="38" pos:column="21">/* hang around until the h2_task is done, but
                     * shutdown input and send out any events (e.g. window
                     * updates) asap. */</comment>
                    <expr_stmt><expr><call><name pos:line="41" pos:column="21">h2_io_in_shutdown<pos:position pos:line="41" pos:column="38"/></name><argument_list pos:line="41" pos:column="38">(<argument><expr><name pos:line="41" pos:column="39">io<pos:position pos:line="41" pos:column="41"/></name></expr></argument>)<pos:position pos:line="41" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="43"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="42" pos:column="21">io_in_consumed_signal<pos:position pos:line="42" pos:column="42"/></name><argument_list pos:line="42" pos:column="42">(<argument><expr><name pos:line="42" pos:column="43">m<pos:position pos:line="42" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="46">io<pos:position pos:line="42" pos:column="48"/></name></expr></argument>)<pos:position pos:line="42" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="50"/></expr_stmt>
                }<pos:position pos:line="43" pos:column="18"/></block></else></if>
            }<pos:position pos:line="44" pos:column="14"/></block></else></if>
            
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">h2_io_signal<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">io<pos:position pos:line="46" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="30">H2_IO_WRITE<pos:position pos:line="46" pos:column="41"/></name></expr></argument>)<pos:position pos:line="46" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="48" pos:column="9">leave_mutex<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">m<pos:position pos:line="48" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="24">acquired<pos:position pos:line="48" pos:column="32"/></name></expr></argument>)<pos:position pos:line="48" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>
    <return pos:line="50" pos:column="5">return <expr><name pos:line="50" pos:column="12">stream<pos:position pos:line="50" pos:column="18"/></name></expr>;<pos:position pos:line="50" pos:column="19"/></return>
}<pos:position pos:line="51" pos:column="2"/></block></function></unit>
