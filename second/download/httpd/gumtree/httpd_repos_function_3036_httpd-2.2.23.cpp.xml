<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3036_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">crypto_block_decrypt<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><name pos:line="1" pos:column="42">unsigned<pos:position pos:line="1" pos:column="50"/></name> <name pos:line="1" pos:column="51">char<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier><modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">out<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="2" pos:column="9">apr_size_t<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">outlen<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="29">const<pos:position pos:line="2" pos:column="34"/></specifier> <name pos:line="2" pos:column="35">unsigned<pos:position pos:line="2" pos:column="43"/></name> <name pos:line="2" pos:column="44">char<pos:position pos:line="2" pos:column="48"/></name> <modifier pos:line="2" pos:column="49">*<pos:position pos:line="2" pos:column="50"/></modifier></type><name pos:line="2" pos:column="50">in<pos:position pos:line="2" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="54">apr_size_t<pos:position pos:line="2" pos:column="64"/></name></type> <name pos:line="2" pos:column="65">inlen<pos:position pos:line="2" pos:column="70"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="3" pos:column="9">apr_crypto_block_t<pos:position pos:line="3" pos:column="27"/></name> <modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">ctx<pos:position pos:line="3" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="33"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">outl<pos:position pos:line="5" pos:column="13"/></name> <init pos:line="5" pos:column="14">= <expr><operator pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></operator><name pos:line="5" pos:column="17">outlen<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">unsigned<pos:position pos:line="6" pos:column="13"/></name> <name pos:line="6" pos:column="14">char<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">buffer<pos:position pos:line="6" pos:column="26"/></name></decl>;<pos:position pos:line="6" pos:column="27"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* are we after the maximum size of the out buffer? */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">out<pos:position pos:line="9" pos:column="13"/></name></expr>)<pos:position pos:line="9" pos:column="14"/></condition><then pos:line="9" pos:column="14"> <block pos:line="9" pos:column="15">{
        <expr_stmt><expr><operator pos:line="10" pos:column="9">*<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">outlen<pos:position pos:line="10" pos:column="16"/></name> <operator pos:line="10" pos:column="17">=<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">inlen<pos:position pos:line="10" pos:column="24"/></name> <operator pos:line="10" pos:column="25">+<pos:position pos:line="10" pos:column="26"/></operator> <name pos:line="10" pos:column="27">EVP_MAX_BLOCK_LENGTH<pos:position pos:line="10" pos:column="47"/></name></expr>;<pos:position pos:line="10" pos:column="48"/></expr_stmt>
        <return pos:line="11" pos:column="9">return <expr><name pos:line="11" pos:column="16">APR_SUCCESS<pos:position pos:line="11" pos:column="27"/></name></expr>;<pos:position pos:line="11" pos:column="28"/></return>
    }<pos:position pos:line="12" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="14" pos:column="5">/* must we allocate the output buffer from a pool? */</comment>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><operator pos:line="15" pos:column="9">!<pos:position pos:line="15" pos:column="10"/></operator><operator pos:line="15" pos:column="10">(<pos:position pos:line="15" pos:column="11"/></operator><operator pos:line="15" pos:column="11">*<pos:position pos:line="15" pos:column="12"/></operator><name pos:line="15" pos:column="12">out<pos:position pos:line="15" pos:column="15"/></name><operator pos:line="15" pos:column="15">)<pos:position pos:line="15" pos:column="16"/></operator></expr>)<pos:position pos:line="15" pos:column="17"/></condition><then pos:line="15" pos:column="17"> <block pos:line="15" pos:column="18">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">buffer<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <call><name pos:line="16" pos:column="18">apr_palloc<pos:position pos:line="16" pos:column="28"/></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name><name pos:line="16" pos:column="29">ctx<pos:position pos:line="16" pos:column="32"/></name><operator pos:line="16" pos:column="32">-&gt;<pos:position pos:line="16" pos:column="37"/></operator><name pos:line="16" pos:column="34">pool<pos:position pos:line="16" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="40">inlen<pos:position pos:line="16" pos:column="45"/></name> <operator pos:line="16" pos:column="46">+<pos:position pos:line="16" pos:column="47"/></operator> <name pos:line="16" pos:column="48">EVP_MAX_BLOCK_LENGTH<pos:position pos:line="16" pos:column="68"/></name></expr></argument>)<pos:position pos:line="16" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="70"/></expr_stmt>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">!<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">buffer<pos:position pos:line="17" pos:column="20"/></name></expr>)<pos:position pos:line="17" pos:column="21"/></condition><then pos:line="17" pos:column="21"> <block pos:line="17" pos:column="22">{
            <return pos:line="18" pos:column="13">return <expr><name pos:line="18" pos:column="20">APR_ENOMEM<pos:position pos:line="18" pos:column="30"/></name></expr>;<pos:position pos:line="18" pos:column="31"/></return>
        }<pos:position pos:line="19" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">apr_crypto_clear<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name><name pos:line="20" pos:column="26">ctx<pos:position pos:line="20" pos:column="29"/></name><operator pos:line="20" pos:column="29">-&gt;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="31">pool<pos:position pos:line="20" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">buffer<pos:position pos:line="20" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="45">inlen<pos:position pos:line="20" pos:column="50"/></name> <operator pos:line="20" pos:column="51">+<pos:position pos:line="20" pos:column="52"/></operator> <name pos:line="20" pos:column="53">EVP_MAX_BLOCK_LENGTH<pos:position pos:line="20" pos:column="73"/></name></expr></argument>)<pos:position pos:line="20" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">out<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">=<pos:position pos:line="21" pos:column="15"/></operator> <name pos:line="21" pos:column="16">buffer<pos:position pos:line="21" pos:column="22"/></name></expr>;<pos:position pos:line="21" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

<cpp:if pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">if<pos:position pos:line="24" pos:column="4"/></cpp:directive> <expr><name pos:line="24" pos:column="5">CRYPT_OPENSSL_CONST_BUFFERS<pos:position pos:line="24" pos:column="32"/></name></expr></cpp:if>
    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><operator pos:line="25" pos:column="9">!<pos:position pos:line="25" pos:column="10"/></operator><call><name pos:line="25" pos:column="10">EVP_DecryptUpdate<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><operator pos:line="25" pos:column="28">&amp;<pos:position pos:line="25" pos:column="33"/></operator><name><name pos:line="25" pos:column="29">ctx<pos:position pos:line="25" pos:column="32"/></name><operator pos:line="25" pos:column="32">-&gt;<pos:position pos:line="25" pos:column="37"/></operator><name pos:line="25" pos:column="34">cipherCtx<pos:position pos:line="25" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="45">*<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="46">out<pos:position pos:line="25" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="25" pos:column="51">&amp;<pos:position pos:line="25" pos:column="56"/></operator><name pos:line="25" pos:column="52">outl<pos:position pos:line="25" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="58">in<pos:position pos:line="25" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="62">inlen<pos:position pos:line="25" pos:column="67"/></name></expr></argument>)<pos:position pos:line="25" pos:column="68"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="69"/></condition><then pos:line="25" pos:column="69"> <block pos:line="25" pos:column="70">{
<cpp:else pos:line="26" pos:column="1">#<cpp:directive pos:line="26" pos:column="2">else<pos:position pos:line="26" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><operator pos:line="27" pos:column="9">!<pos:position pos:line="27" pos:column="10"/></operator><call><name pos:line="27" pos:column="10">EVP_DecryptUpdate<pos:position pos:line="27" pos:column="27"/></name><argument_list pos:line="27" pos:column="27">(<argument><expr><operator pos:line="27" pos:column="28">&amp;<pos:position pos:line="27" pos:column="33"/></operator><name><name pos:line="27" pos:column="29">ctx<pos:position pos:line="27" pos:column="32"/></name><operator pos:line="27" pos:column="32">-&gt;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="34">cipherCtx<pos:position pos:line="27" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="45">*<pos:position pos:line="27" pos:column="46"/></operator><name pos:line="27" pos:column="46">out<pos:position pos:line="27" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="51">&amp;<pos:position pos:line="27" pos:column="56"/></operator><name pos:line="27" pos:column="52">outl<pos:position pos:line="27" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="58">(<pos:position pos:line="27" pos:column="59"/></operator><name pos:line="27" pos:column="59">unsigned<pos:position pos:line="27" pos:column="67"/></name> <name pos:line="27" pos:column="68">char<pos:position pos:line="27" pos:column="72"/></name> <operator pos:line="27" pos:column="73">*<pos:position pos:line="27" pos:column="74"/></operator><operator pos:line="27" pos:column="74">)<pos:position pos:line="27" pos:column="75"/></operator> <name pos:line="27" pos:column="76">in<pos:position pos:line="27" pos:column="78"/></name></expr></argument>,
            <argument><expr><name pos:line="28" pos:column="13">inlen<pos:position pos:line="28" pos:column="18"/></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="20"/></condition><then pos:line="28" pos:column="20"> <block pos:line="28" pos:column="21">{
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
        <return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">APR_ECRYPT<pos:position pos:line="30" pos:column="26"/></name></expr>;<pos:position pos:line="30" pos:column="27"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="32" pos:column="5">*<pos:position pos:line="32" pos:column="6"/></operator><name pos:line="32" pos:column="6">outlen<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">outl<pos:position pos:line="32" pos:column="19"/></name></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt>

    <return pos:line="34" pos:column="5">return <expr><name pos:line="34" pos:column="12">APR_SUCCESS<pos:position pos:line="34" pos:column="23"/></name></expr>;<pos:position pos:line="34" pos:column="24"/></return>

}<pos:position pos:line="36" pos:column="2"/></block></then></if>

<comment type="block" format="doxygen" pos:line="38" pos:column="1">/**
 * @brief Decrypt final data block, write it to out.
 * @note If necessary the final block will be written out after being
 *       padded. Typically the final block will be written to the
 *       same buffer used by apr_crypto_block_decrypt, offset by the
 *       number of bytes returned as actually written by the
 *       apr_crypto_block_decrypt() call. After this call, the context
 *       is cleaned and can be reused by apr_crypto_block_decrypt_init().
 * @param out Address of a buffer to which data will be written. This
 *            buffer must already exist, and is usually the same
 *            buffer used by apr_evp_crypt(). See note.
 * @param outlen Length of the output will be written here.
 * @param ctx The block context to use.
 * @return APR_ECRYPT if an error occurred.
 * @return APR_EPADDING if padding was enabled and the block was incorrectly
 *         formatted.
 * @return APR_ENOTIMPL if not implemented.
 */</comment>
<function><specifier pos:line="56" pos:column="1">static<pos:position pos:line="56" pos:column="7"/></specifier> <type><name pos:line="56" pos:column="8">apr_status_t<pos:position pos:line="56" pos:column="20"/></name></type> <name pos:line="56" pos:column="21">crypto_block_decrypt_finish<pos:position pos:line="56" pos:column="48"/></name><parameter_list pos:line="56" pos:column="48">(<parameter><decl><type><name pos:line="56" pos:column="49">unsigned<pos:position pos:line="56" pos:column="57"/></name> <name pos:line="56" pos:column="58">char<pos:position pos:line="56" pos:column="62"/></name> <modifier pos:line="56" pos:column="63">*<pos:position pos:line="56" pos:column="64"/></modifier></type><name pos:line="56" pos:column="64">out<pos:position pos:line="56" pos:column="67"/></name></decl></parameter>,
        <parameter><decl><type><name pos:line="57" pos:column="9">apr_size_t<pos:position pos:line="57" pos:column="19"/></name> <modifier pos:line="57" pos:column="20">*<pos:position pos:line="57" pos:column="21"/></modifier></type><name pos:line="57" pos:column="21">outlen<pos:position pos:line="57" pos:column="27"/></name></decl></parameter>, <parameter><decl><type><name pos:line="57" pos:column="29">apr_crypto_block_t<pos:position pos:line="57" pos:column="47"/></name> <modifier pos:line="57" pos:column="48">*<pos:position pos:line="57" pos:column="49"/></modifier></type><name pos:line="57" pos:column="49">ctx<pos:position pos:line="57" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="57" pos:column="53"/></parameter_list>
<block pos:line="58" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="60" pos:column="5">int<pos:position pos:line="60" pos:column="8"/></name></type> <name pos:line="60" pos:column="9">len<pos:position pos:line="60" pos:column="12"/></name> <init pos:line="60" pos:column="13">= <expr><operator pos:line="60" pos:column="15">*<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="16">outlen<pos:position pos:line="60" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="60" pos:column="23"/></decl_stmt>

    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><call><name pos:line="62" pos:column="9">EVP_DecryptFinal_ex<pos:position pos:line="62" pos:column="28"/></name><argument_list pos:line="62" pos:column="28">(<argument><expr><operator pos:line="62" pos:column="29">&amp;<pos:position pos:line="62" pos:column="34"/></operator><name><name pos:line="62" pos:column="30">ctx<pos:position pos:line="62" pos:column="33"/></name><operator pos:line="62" pos:column="33">-&gt;<pos:position pos:line="62" pos:column="38"/></operator><name pos:line="62" pos:column="35">cipherCtx<pos:position pos:line="62" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="46">out<pos:position pos:line="62" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="51">&amp;<pos:position pos:line="62" pos:column="56"/></operator><name pos:line="62" pos:column="52">len<pos:position pos:line="62" pos:column="55"/></name></expr></argument>)<pos:position pos:line="62" pos:column="56"/></argument_list></call> <operator pos:line="62" pos:column="57">==<pos:position pos:line="62" pos:column="59"/></operator> <literal type="number" pos:line="62" pos:column="60">0<pos:position pos:line="62" pos:column="61"/></literal></expr>)<pos:position pos:line="62" pos:column="62"/></condition><then pos:line="62" pos:column="62"> <block pos:line="62" pos:column="63">{
        <return pos:line="63" pos:column="9">return <expr><name pos:line="63" pos:column="16">APR_EPADDING<pos:position pos:line="63" pos:column="28"/></name></expr>;<pos:position pos:line="63" pos:column="29"/></return>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="65" pos:column="5">*<pos:position pos:line="65" pos:column="6"/></operator><name pos:line="65" pos:column="6">outlen<pos:position pos:line="65" pos:column="12"/></name> <operator pos:line="65" pos:column="13">=<pos:position pos:line="65" pos:column="14"/></operator> <name pos:line="65" pos:column="15">len<pos:position pos:line="65" pos:column="18"/></name></expr>;<pos:position pos:line="65" pos:column="19"/></expr_stmt>

    <return pos:line="67" pos:column="5">return <expr><name pos:line="67" pos:column="12">APR_SUCCESS<pos:position pos:line="67" pos:column="23"/></name></expr>;<pos:position pos:line="67" pos:column="24"/></return>

}<pos:position pos:line="69" pos:column="2"/></block></function>

<comment type="block" format="doxygen" pos:line="71" pos:column="1">/**
 * OpenSSL module.
 */</comment>
<decl_stmt><decl><type><name pos:line="74" pos:column="1">APU_MODULE_DECLARE_DATA<pos:position pos:line="74" pos:column="24"/></name> <specifier pos:line="74" pos:column="25">const<pos:position pos:line="74" pos:column="30"/></specifier> <name pos:line="74" pos:column="31">apr_crypto_driver_t<pos:position pos:line="74" pos:column="50"/></name></type> <name pos:line="74" pos:column="51">apr_crypto_openssl_driver<pos:position pos:line="74" pos:column="76"/></name> <init pos:line="74" pos:column="77">= <expr><block pos:line="74" pos:column="79">{
    <expr><literal type="string" pos:line="75" pos:column="5">"openssl"<pos:position pos:line="75" pos:column="14"/></literal></expr>, <expr><name pos:line="75" pos:column="16">crypto_init<pos:position pos:line="75" pos:column="27"/></name></expr>, <expr><name pos:line="75" pos:column="29">crypto_make<pos:position pos:line="75" pos:column="40"/></name></expr>, <expr><name pos:line="75" pos:column="42">crypto_get_block_key_types<pos:position pos:line="75" pos:column="68"/></name></expr>,
    <expr><name pos:line="76" pos:column="5">crypto_get_block_key_modes<pos:position pos:line="76" pos:column="31"/></name></expr>, <expr><name pos:line="76" pos:column="33">crypto_passphrase<pos:position pos:line="76" pos:column="50"/></name></expr>,
    <expr><name pos:line="77" pos:column="5">crypto_block_encrypt_init<pos:position pos:line="77" pos:column="30"/></name></expr>, <expr><name pos:line="77" pos:column="32">crypto_block_encrypt<pos:position pos:line="77" pos:column="52"/></name></expr>,
    <expr><name pos:line="78" pos:column="5">crypto_block_encrypt_finish<pos:position pos:line="78" pos:column="32"/></name></expr>, <expr><name pos:line="78" pos:column="34">crypto_block_decrypt_init<pos:position pos:line="78" pos:column="59"/></name></expr>,
    <expr><name pos:line="79" pos:column="5">crypto_block_decrypt<pos:position pos:line="79" pos:column="25"/></name></expr>, <expr><name pos:line="79" pos:column="27">crypto_block_decrypt_finish<pos:position pos:line="79" pos:column="54"/></name></expr>,
    <expr><name pos:line="80" pos:column="5">crypto_block_cleanup<pos:position pos:line="80" pos:column="25"/></name></expr>, <expr><name pos:line="80" pos:column="27">crypto_cleanup<pos:position pos:line="80" pos:column="41"/></name></expr>, <expr><name pos:line="80" pos:column="43">crypto_shutdown<pos:position pos:line="80" pos:column="58"/></name></expr>, <expr><name pos:line="80" pos:column="60">crypto_error<pos:position pos:line="80" pos:column="72"/></name></expr>
}<pos:position pos:line="81" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="81" pos:column="3"/></decl_stmt></block></function></unit>
