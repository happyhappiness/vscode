<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2661_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">PTRCALL<pos:position pos:line="1" pos:column="20"/></name></type>
<name pos:line="2" pos:column="1">unknown_toUtf8<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><specifier pos:line="2" pos:column="16">const<pos:position pos:line="2" pos:column="21"/></specifier> <name pos:line="2" pos:column="22">ENCODING<pos:position pos:line="2" pos:column="30"/></name> <modifier pos:line="2" pos:column="31">*<pos:position pos:line="2" pos:column="32"/></modifier></type><name pos:line="2" pos:column="32">enc<pos:position pos:line="2" pos:column="35"/></name></decl></parameter>,
               <parameter><decl><type><specifier pos:line="3" pos:column="16">const<pos:position pos:line="3" pos:column="21"/></specifier> <name pos:line="3" pos:column="22">char<pos:position pos:line="3" pos:column="26"/></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier><modifier pos:line="3" pos:column="28">*<pos:position pos:line="3" pos:column="29"/></modifier></type><name pos:line="3" pos:column="29">fromP<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="36">const<pos:position pos:line="3" pos:column="41"/></specifier> <name pos:line="3" pos:column="42">char<pos:position pos:line="3" pos:column="46"/></name> <modifier pos:line="3" pos:column="47">*<pos:position pos:line="3" pos:column="48"/></modifier></type><name pos:line="3" pos:column="48">fromLim<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>,
               <parameter><decl><type><name pos:line="4" pos:column="16">char<pos:position pos:line="4" pos:column="20"/></name> <modifier pos:line="4" pos:column="21">*<pos:position pos:line="4" pos:column="22"/></modifier><modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">toP<pos:position pos:line="4" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="4" pos:column="28">const<pos:position pos:line="4" pos:column="33"/></specifier> <name pos:line="4" pos:column="34">char<pos:position pos:line="4" pos:column="38"/></name> <modifier pos:line="4" pos:column="39">*<pos:position pos:line="4" pos:column="40"/></modifier></type><name pos:line="4" pos:column="40">toLim<pos:position pos:line="4" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="46"/></parameter_list>
<block pos:line="5" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name><name pos:line="6" pos:column="9">struct<pos:position pos:line="6" pos:column="15"/></name> <name pos:line="6" pos:column="16">unknown_encoding<pos:position pos:line="6" pos:column="32"/></name></name> <modifier pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></modifier></type><name pos:line="6" pos:column="34">uenc<pos:position pos:line="6" pos:column="38"/></name> <init pos:line="6" pos:column="39">= <expr><call><name pos:line="6" pos:column="41">AS_UNKNOWN_ENCODING<pos:position pos:line="6" pos:column="60"/></name><argument_list pos:line="6" pos:column="60">(<argument><expr><name pos:line="6" pos:column="61">enc<pos:position pos:line="6" pos:column="64"/></name></expr></argument>)<pos:position pos:line="6" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="66"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">char<pos:position pos:line="7" pos:column="7"/></name></type> <name><name pos:line="7" pos:column="8">buf<pos:position pos:line="7" pos:column="11"/></name><index pos:line="7" pos:column="11">[<expr><name pos:line="7" pos:column="12">XML_UTF8_ENCODE_MAX<pos:position pos:line="7" pos:column="31"/></name></expr>]<pos:position pos:line="7" pos:column="32"/></index></name></decl>;<pos:position pos:line="7" pos:column="33"/></decl_stmt>
  <for pos:line="8" pos:column="3">for <control pos:line="8" pos:column="7">(<init pos:line="8" pos:column="8">;<pos:position pos:line="8" pos:column="9"/></init><condition pos:line="8" pos:column="9">;<pos:position pos:line="8" pos:column="10"/></condition><incr/>)<pos:position pos:line="8" pos:column="11"/></control> <block pos:line="8" pos:column="12">{
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">utf8<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">n<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">fromP<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">==<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">fromLim<pos:position pos:line="11" pos:column="26"/></name></expr>)<pos:position pos:line="11" pos:column="27"/></condition><then pos:line="11" pos:column="27">
      <block type="pseudo"><break pos:line="12" pos:column="7">break;<pos:position pos:line="12" pos:column="13"/></break></block></then></if>
    <expr_stmt><expr><name pos:line="13" pos:column="5">utf8<pos:position pos:line="13" pos:column="9"/></name> <operator pos:line="13" pos:column="10">=<pos:position pos:line="13" pos:column="11"/></operator> <name><name pos:line="13" pos:column="12">uenc<pos:position pos:line="13" pos:column="16"/></name><operator pos:line="13" pos:column="16">-&gt;<pos:position pos:line="13" pos:column="21"/></operator><name pos:line="13" pos:column="18">utf8<pos:position pos:line="13" pos:column="22"/></name><index pos:line="13" pos:column="22">[<expr><operator pos:line="13" pos:column="23">(<pos:position pos:line="13" pos:column="24"/></operator><name pos:line="13" pos:column="24">unsigned<pos:position pos:line="13" pos:column="32"/></name> <name pos:line="13" pos:column="33">char<pos:position pos:line="13" pos:column="37"/></name><operator pos:line="13" pos:column="37">)<pos:position pos:line="13" pos:column="38"/></operator><operator pos:line="13" pos:column="38">*<pos:position pos:line="13" pos:column="39"/></operator><operator pos:line="13" pos:column="39">*<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="40">fromP<pos:position pos:line="13" pos:column="45"/></name></expr>]<pos:position pos:line="13" pos:column="46"/></index></name></expr>;<pos:position pos:line="13" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">n<pos:position pos:line="14" pos:column="6"/></name> <operator pos:line="14" pos:column="7">=<pos:position pos:line="14" pos:column="8"/></operator> <operator pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></operator><name pos:line="14" pos:column="10">utf8<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">++<pos:position pos:line="14" pos:column="16"/></operator></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">n<pos:position pos:line="15" pos:column="10"/></name> <operator pos:line="15" pos:column="11">==<pos:position pos:line="15" pos:column="13"/></operator> <literal type="number" pos:line="15" pos:column="14">0<pos:position pos:line="15" pos:column="15"/></literal></expr>)<pos:position pos:line="15" pos:column="16"/></condition><then pos:line="15" pos:column="16"> <block pos:line="15" pos:column="17">{
      <decl_stmt><decl><type><name pos:line="16" pos:column="7">int<pos:position pos:line="16" pos:column="10"/></name></type> <name pos:line="16" pos:column="11">c<pos:position pos:line="16" pos:column="12"/></name> <init pos:line="16" pos:column="13">= <expr><call><name><name pos:line="16" pos:column="15">uenc<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">convert<pos:position pos:line="16" pos:column="28"/></name></name><argument_list pos:line="16" pos:column="28">(<argument><expr><name><name pos:line="16" pos:column="29">uenc<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">-&gt;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="35">userData<pos:position pos:line="16" pos:column="43"/></name></name></expr></argument>, <argument><expr><operator pos:line="16" pos:column="45">*<pos:position pos:line="16" pos:column="46"/></operator><name pos:line="16" pos:column="46">fromP<pos:position pos:line="16" pos:column="51"/></name></expr></argument>)<pos:position pos:line="16" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="16" pos:column="53"/></decl_stmt>
      <expr_stmt><expr><name pos:line="17" pos:column="7">n<pos:position pos:line="17" pos:column="8"/></name> <operator pos:line="17" pos:column="9">=<pos:position pos:line="17" pos:column="10"/></operator> <call><name pos:line="17" pos:column="11">XmlUtf8Encode<pos:position pos:line="17" pos:column="24"/></name><argument_list pos:line="17" pos:column="24">(<argument><expr><name pos:line="17" pos:column="25">c<pos:position pos:line="17" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="28">buf<pos:position pos:line="17" pos:column="31"/></name></expr></argument>)<pos:position pos:line="17" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>
      <if pos:line="18" pos:column="7">if <condition pos:line="18" pos:column="10">(<expr><name pos:line="18" pos:column="11">n<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">&gt;<pos:position pos:line="18" pos:column="17"/></operator> <name pos:line="18" pos:column="15">toLim<pos:position pos:line="18" pos:column="20"/></name> <operator pos:line="18" pos:column="21">-<pos:position pos:line="18" pos:column="22"/></operator> <operator pos:line="18" pos:column="23">*<pos:position pos:line="18" pos:column="24"/></operator><name pos:line="18" pos:column="24">toP<pos:position pos:line="18" pos:column="27"/></name></expr>)<pos:position pos:line="18" pos:column="28"/></condition><then pos:line="18" pos:column="28">
        <block type="pseudo"><break pos:line="19" pos:column="9">break;<pos:position pos:line="19" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><name pos:line="20" pos:column="7">utf8<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <name pos:line="20" pos:column="14">buf<pos:position pos:line="20" pos:column="17"/></name></expr>;<pos:position pos:line="20" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="21" pos:column="7">*<pos:position pos:line="21" pos:column="8"/></operator><name pos:line="21" pos:column="8">fromP<pos:position pos:line="21" pos:column="13"/></name> <operator pos:line="21" pos:column="14">+=<pos:position pos:line="21" pos:column="16"/></operator> <operator pos:line="21" pos:column="17">(<pos:position pos:line="21" pos:column="18"/></operator><call><name pos:line="21" pos:column="18">AS_NORMAL_ENCODING<pos:position pos:line="21" pos:column="36"/></name><argument_list pos:line="21" pos:column="36">(<argument><expr><name pos:line="21" pos:column="37">enc<pos:position pos:line="21" pos:column="40"/></name></expr></argument>)<pos:position pos:line="21" pos:column="41"/></argument_list></call><operator pos:line="21" pos:column="41">-&gt;<pos:position pos:line="21" pos:column="46"/></operator><name><name pos:line="21" pos:column="43">type<pos:position pos:line="21" pos:column="47"/></name><index pos:line="21" pos:column="47">[<expr><operator pos:line="21" pos:column="48">(<pos:position pos:line="21" pos:column="49"/></operator><name pos:line="21" pos:column="49">unsigned<pos:position pos:line="21" pos:column="57"/></name> <name pos:line="21" pos:column="58">char<pos:position pos:line="21" pos:column="62"/></name><operator pos:line="21" pos:column="62">)<pos:position pos:line="21" pos:column="63"/></operator><operator pos:line="21" pos:column="63">*<pos:position pos:line="21" pos:column="64"/></operator><operator pos:line="21" pos:column="64">*<pos:position pos:line="21" pos:column="65"/></operator><name pos:line="21" pos:column="65">fromP<pos:position pos:line="21" pos:column="70"/></name></expr>]<pos:position pos:line="21" pos:column="71"/></index></name>
                 <operator pos:line="22" pos:column="18">-<pos:position pos:line="22" pos:column="19"/></operator> <operator pos:line="22" pos:column="20">(<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="21">BT_LEAD2<pos:position pos:line="22" pos:column="29"/></name> <operator pos:line="22" pos:column="30">-<pos:position pos:line="22" pos:column="31"/></operator> <literal type="number" pos:line="22" pos:column="32">2<pos:position pos:line="22" pos:column="33"/></literal><operator pos:line="22" pos:column="33">)<pos:position pos:line="22" pos:column="34"/></operator><operator pos:line="22" pos:column="34">)<pos:position pos:line="22" pos:column="35"/></operator></expr>;<pos:position pos:line="22" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></then>
    <else pos:line="24" pos:column="5">else <block pos:line="24" pos:column="10">{
      <if pos:line="25" pos:column="7">if <condition pos:line="25" pos:column="10">(<expr><name pos:line="25" pos:column="11">n<pos:position pos:line="25" pos:column="12"/></name> <operator pos:line="25" pos:column="13">&gt;<pos:position pos:line="25" pos:column="17"/></operator> <name pos:line="25" pos:column="15">toLim<pos:position pos:line="25" pos:column="20"/></name> <operator pos:line="25" pos:column="21">-<pos:position pos:line="25" pos:column="22"/></operator> <operator pos:line="25" pos:column="23">*<pos:position pos:line="25" pos:column="24"/></operator><name pos:line="25" pos:column="24">toP<pos:position pos:line="25" pos:column="27"/></name></expr>)<pos:position pos:line="25" pos:column="28"/></condition><then pos:line="25" pos:column="28">
        <block type="pseudo"><break pos:line="26" pos:column="9">break;<pos:position pos:line="26" pos:column="15"/></break></block></then></if>
      <expr_stmt><expr><operator pos:line="27" pos:column="7">(<pos:position pos:line="27" pos:column="8"/></operator><operator pos:line="27" pos:column="8">*<pos:position pos:line="27" pos:column="9"/></operator><name pos:line="27" pos:column="9">fromP<pos:position pos:line="27" pos:column="14"/></name><operator pos:line="27" pos:column="14">)<pos:position pos:line="27" pos:column="15"/></operator><operator pos:line="27" pos:column="15">++<pos:position pos:line="27" pos:column="17"/></operator></expr>;<pos:position pos:line="27" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></else></if>
    <do pos:line="29" pos:column="5">do <block pos:line="29" pos:column="8">{
      <expr_stmt><expr><operator pos:line="30" pos:column="7">*<pos:position pos:line="30" pos:column="8"/></operator><operator pos:line="30" pos:column="8">(<pos:position pos:line="30" pos:column="9"/></operator><operator pos:line="30" pos:column="9">*<pos:position pos:line="30" pos:column="10"/></operator><name pos:line="30" pos:column="10">toP<pos:position pos:line="30" pos:column="13"/></name><operator pos:line="30" pos:column="13">)<pos:position pos:line="30" pos:column="14"/></operator><operator pos:line="30" pos:column="14">++<pos:position pos:line="30" pos:column="16"/></operator> <operator pos:line="30" pos:column="17">=<pos:position pos:line="30" pos:column="18"/></operator> <operator pos:line="30" pos:column="19">*<pos:position pos:line="30" pos:column="20"/></operator><name pos:line="30" pos:column="20">utf8<pos:position pos:line="30" pos:column="24"/></name><operator pos:line="30" pos:column="24">++<pos:position pos:line="30" pos:column="26"/></operator></expr>;<pos:position pos:line="30" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block> while <condition pos:line="31" pos:column="13">(<expr><operator pos:line="31" pos:column="14">--<pos:position pos:line="31" pos:column="16"/></operator><name pos:line="31" pos:column="16">n<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">!=<pos:position pos:line="31" pos:column="20"/></operator> <literal type="number" pos:line="31" pos:column="21">0<pos:position pos:line="31" pos:column="22"/></literal></expr>)<pos:position pos:line="31" pos:column="23"/></condition>;<pos:position pos:line="31" pos:column="24"/></do>
  }<pos:position pos:line="32" pos:column="4"/></block></for>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
