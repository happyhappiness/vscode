<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3647_httpd-2.2.34.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> 
<name pos:line="2" pos:column="1">apr_thread_rwlock_wrlock_core<pos:position pos:line="2" pos:column="30"/></name><parameter_list pos:line="2" pos:column="30">(<parameter><decl><type><name pos:line="2" pos:column="31">apr_thread_rwlock_t<pos:position pos:line="2" pos:column="50"/></name> <modifier pos:line="2" pos:column="51">*<pos:position pos:line="2" pos:column="52"/></modifier></type><name pos:line="2" pos:column="52">rwlock<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">DWORD<pos:position pos:line="2" pos:column="65"/></name></type> <name pos:line="2" pos:column="66">milliseconds<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">DWORD<pos:position pos:line="4" pos:column="10"/></name></type>   <name pos:line="4" pos:column="13">code<pos:position pos:line="4" pos:column="17"/></name> <init pos:line="4" pos:column="18">= <expr><call><name pos:line="4" pos:column="20">WaitForSingleObject<pos:position pos:line="4" pos:column="39"/></name><argument_list pos:line="4" pos:column="39">(<argument><expr><name><name pos:line="4" pos:column="40">rwlock<pos:position pos:line="4" pos:column="46"/></name><operator pos:line="4" pos:column="46">-&gt;<pos:position pos:line="4" pos:column="51"/></operator><name pos:line="4" pos:column="48">write_mutex<pos:position pos:line="4" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="61">milliseconds<pos:position pos:line="4" pos:column="73"/></name></expr></argument>)<pos:position pos:line="4" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="75"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">code<pos:position pos:line="6" pos:column="13"/></name> <operator pos:line="6" pos:column="14">==<pos:position pos:line="6" pos:column="16"/></operator> <name pos:line="6" pos:column="17">WAIT_FAILED<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">||<pos:position pos:line="6" pos:column="31"/></operator> <name pos:line="6" pos:column="32">code<pos:position pos:line="6" pos:column="36"/></name> <operator pos:line="6" pos:column="37">==<pos:position pos:line="6" pos:column="39"/></operator> <name pos:line="6" pos:column="40">WAIT_TIMEOUT<pos:position pos:line="6" pos:column="52"/></name></expr>)<pos:position pos:line="6" pos:column="53"/></condition><then pos:line="6" pos:column="53">
        <block type="pseudo"><return pos:line="7" pos:column="9">return <expr><call><name pos:line="7" pos:column="16">APR_FROM_OS_ERROR<pos:position pos:line="7" pos:column="33"/></name><argument_list pos:line="7" pos:column="33">(<argument><expr><name pos:line="7" pos:column="34">code<pos:position pos:line="7" pos:column="38"/></name></expr></argument>)<pos:position pos:line="7" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="40"/></return></block></then></if>

    <comment type="block" pos:line="9" pos:column="5">/* We've got the writer lock but we have to wait for all readers to
     * unlock before it's ok to use it.
     */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">rwlock<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">readers<pos:position pos:line="12" pos:column="24"/></name></name></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25"> <block pos:line="12" pos:column="26">{
        <comment type="block" pos:line="13" pos:column="9">/* Must wait for readers to finish before returning, unless this
         * is an trywrlock (milliseconds == 0):
         */</comment>
        <expr_stmt><expr><name pos:line="16" pos:column="9">code<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <ternary><condition><expr><name pos:line="16" pos:column="16">milliseconds<pos:position pos:line="16" pos:column="28"/></name></expr>
          ?<pos:position pos:line="17" pos:column="12"/></condition><then pos:line="17" pos:column="12"> <expr><call><name pos:line="17" pos:column="13">WaitForSingleObject<pos:position pos:line="17" pos:column="32"/></name><argument_list pos:line="17" pos:column="32">(<argument><expr><name><name pos:line="17" pos:column="33">rwlock<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">read_event<pos:position pos:line="17" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="53">milliseconds<pos:position pos:line="17" pos:column="65"/></name></expr></argument>)<pos:position pos:line="17" pos:column="66"/></argument_list></call></expr>
          <pos:position pos:line="18" pos:column="11"/></then><else pos:line="18" pos:column="11">: <expr><name pos:line="18" pos:column="13">WAIT_TIMEOUT<pos:position pos:line="18" pos:column="25"/></name></expr></else></ternary></expr>;<pos:position pos:line="18" pos:column="26"/></expr_stmt>
        
        <if pos:line="20" pos:column="9">if <condition pos:line="20" pos:column="12">(<expr><name pos:line="20" pos:column="13">code<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">==<pos:position pos:line="20" pos:column="20"/></operator> <name pos:line="20" pos:column="21">WAIT_FAILED<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">||<pos:position pos:line="20" pos:column="35"/></operator> <name pos:line="20" pos:column="36">code<pos:position pos:line="20" pos:column="40"/></name> <operator pos:line="20" pos:column="41">==<pos:position pos:line="20" pos:column="43"/></operator> <name pos:line="20" pos:column="44">WAIT_TIMEOUT<pos:position pos:line="20" pos:column="56"/></name></expr>)<pos:position pos:line="20" pos:column="57"/></condition><then pos:line="20" pos:column="57"> <block pos:line="20" pos:column="58">{
            <comment type="block" pos:line="21" pos:column="13">/* Unable to wait for readers to finish, release write lock: */</comment>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><operator pos:line="22" pos:column="17">!<pos:position pos:line="22" pos:column="18"/></operator> <call><name pos:line="22" pos:column="19">ReleaseMutex<pos:position pos:line="22" pos:column="31"/></name><argument_list pos:line="22" pos:column="31">(<argument><expr><name><name pos:line="22" pos:column="32">rwlock<pos:position pos:line="22" pos:column="38"/></name><operator pos:line="22" pos:column="38">-&gt;<pos:position pos:line="22" pos:column="43"/></operator><name pos:line="22" pos:column="40">write_mutex<pos:position pos:line="22" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="53"/></condition><then pos:line="22" pos:column="53">
                <block type="pseudo"><return pos:line="23" pos:column="17">return <expr><call><name pos:line="23" pos:column="24">apr_get_os_error<pos:position pos:line="23" pos:column="40"/></name><argument_list pos:line="23" pos:column="40">()<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></return></block></then></if>
            
            <return pos:line="25" pos:column="13">return <expr><call><name pos:line="25" pos:column="20">APR_FROM_OS_ERROR<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name pos:line="25" pos:column="38">code<pos:position pos:line="25" pos:column="42"/></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <return pos:line="29" pos:column="5">return <expr><name pos:line="29" pos:column="12">APR_SUCCESS<pos:position pos:line="29" pos:column="23"/></name></expr>;<pos:position pos:line="29" pos:column="24"/></return>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
