<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_3736.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">handle_echo<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">include_ctx_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">ctx<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">ap_filter_t<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">f<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                                <parameter><decl><type><name pos:line="2" pos:column="33">apr_bucket_brigade<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">bb<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="56"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">encoding<pos:position pos:line="4" pos:column="25"/></name> <init pos:line="4" pos:column="26">= <expr><literal type="string" pos:line="4" pos:column="28">"entity"<pos:position pos:line="4" pos:column="36"/></literal></expr></init></decl>, <modifier pos:line="4" pos:column="38">*<pos:position pos:line="4" pos:column="39"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="39">decoding<pos:position pos:line="4" pos:column="47"/></name> <init pos:line="4" pos:column="48">= <expr><literal type="string" pos:line="4" pos:column="50">"none"<pos:position pos:line="4" pos:column="56"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="57"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">request_rec<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">r<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name><name pos:line="5" pos:column="22">f<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">-&gt;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="25">r<pos:position pos:line="5" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">error<pos:position pos:line="6" pos:column="14"/></name> <init pos:line="6" pos:column="15">= <expr><literal type="number" pos:line="6" pos:column="17">0<pos:position pos:line="6" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><name><name pos:line="8" pos:column="10">ctx<pos:position pos:line="8" pos:column="13"/></name><operator pos:line="8" pos:column="13">-&gt;<pos:position pos:line="8" pos:column="18"/></operator><name pos:line="8" pos:column="15">argc<pos:position pos:line="8" pos:column="19"/></name></name></expr>)<pos:position pos:line="8" pos:column="20"/></condition><then pos:line="8" pos:column="20"> <block pos:line="8" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="9" pos:column="9">ap_log_rerror<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">APLOG_MARK<pos:position pos:line="9" pos:column="33"/></name></expr></argument>,
                      <argument><expr><ternary><condition><expr><operator pos:line="10" pos:column="23">(<pos:position pos:line="10" pos:column="24"/></operator><name><name pos:line="10" pos:column="24">ctx<pos:position pos:line="10" pos:column="27"/></name><operator pos:line="10" pos:column="27">-&gt;<pos:position pos:line="10" pos:column="32"/></operator><name pos:line="10" pos:column="29">flags<pos:position pos:line="10" pos:column="34"/></name></name> <operator pos:line="10" pos:column="35">&amp;<pos:position pos:line="10" pos:column="40"/></operator> <name pos:line="10" pos:column="37">SSI_FLAG_PRINTING<pos:position pos:line="10" pos:column="54"/></name><operator pos:line="10" pos:column="54">)<pos:position pos:line="10" pos:column="55"/></operator></expr>
                          ?<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28"> <expr><name pos:line="11" pos:column="29">APLOG_ERR<pos:position pos:line="11" pos:column="38"/></name></expr> <pos:position pos:line="11" pos:column="39"/></then><else pos:line="11" pos:column="39">: <expr><name pos:line="11" pos:column="41">APLOG_WARNING<pos:position pos:line="11" pos:column="54"/></name></expr></else></ternary></expr></argument>,
                      <argument><expr><literal type="number" pos:line="12" pos:column="23">0<pos:position pos:line="12" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">r<pos:position pos:line="12" pos:column="27"/></name></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="29">APLOGNO<pos:position pos:line="12" pos:column="36"/></name><argument_list pos:line="12" pos:column="36">(<argument><expr><literal type="number" pos:line="12" pos:column="37">01343<pos:position pos:line="12" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="43"/></argument_list></call>
                      <literal type="string" pos:line="13" pos:column="23">"missing argument for echo element in %s"<pos:position pos:line="13" pos:column="64"/></literal></expr></argument>,
                      <argument><expr><name><name pos:line="14" pos:column="23">r<pos:position pos:line="14" pos:column="24"/></name><operator pos:line="14" pos:column="24">-&gt;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="26">filename<pos:position pos:line="14" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">!<pos:position pos:line="17" pos:column="10"/></operator><operator pos:line="17" pos:column="10">(<pos:position pos:line="17" pos:column="11"/></operator><name><name pos:line="17" pos:column="11">ctx<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">flags<pos:position pos:line="17" pos:column="21"/></name></name> <operator pos:line="17" pos:column="22">&amp;<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="24">SSI_FLAG_PRINTING<pos:position pos:line="17" pos:column="41"/></name><operator pos:line="17" pos:column="41">)<pos:position pos:line="17" pos:column="42"/></operator></expr>)<pos:position pos:line="17" pos:column="43"/></condition><then pos:line="17" pos:column="43"> <block pos:line="17" pos:column="44">{
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">APR_SUCCESS<pos:position pos:line="18" pos:column="27"/></name></expr>;<pos:position pos:line="18" pos:column="28"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><name><name pos:line="21" pos:column="10">ctx<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">-&gt;<pos:position pos:line="21" pos:column="18"/></operator><name pos:line="21" pos:column="15">argc<pos:position pos:line="21" pos:column="19"/></name></name></expr>)<pos:position pos:line="21" pos:column="20"/></condition><then pos:line="21" pos:column="20"> <block pos:line="21" pos:column="21">{
        <expr_stmt><expr><call><name pos:line="22" pos:column="9">SSI_CREATE_ERROR_BUCKET<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><name pos:line="22" pos:column="33">ctx<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">f<pos:position pos:line="22" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="41">bb<pos:position pos:line="22" pos:column="43"/></name></expr></argument>)<pos:position pos:line="22" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="45"/></expr_stmt>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">APR_SUCCESS<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><literal type="number" pos:line="26" pos:column="12">1<pos:position pos:line="26" pos:column="13"/></literal></expr>)<pos:position pos:line="26" pos:column="14"/></condition> <block pos:line="26" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="27" pos:column="9">char<pos:position pos:line="27" pos:column="13"/></name> <modifier pos:line="27" pos:column="14">*<pos:position pos:line="27" pos:column="15"/></modifier></type><name pos:line="27" pos:column="15">tag<pos:position pos:line="27" pos:column="18"/></name> <init pos:line="27" pos:column="19">= <expr><name pos:line="27" pos:column="21">NULL<pos:position pos:line="27" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">char<pos:position pos:line="28" pos:column="13"/></name> <modifier pos:line="28" pos:column="14">*<pos:position pos:line="28" pos:column="15"/></modifier></type><name pos:line="28" pos:column="15">tag_val<pos:position pos:line="28" pos:column="22"/></name> <init pos:line="28" pos:column="23">= <expr><name pos:line="28" pos:column="25">NULL<pos:position pos:line="28" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="30"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="30" pos:column="9">ap_ssi_get_tag_and_value<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">ctx<pos:position pos:line="30" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="39">&amp;<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="40">tag<pos:position pos:line="30" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="30" pos:column="45">&amp;<pos:position pos:line="30" pos:column="50"/></operator><name pos:line="30" pos:column="46">tag_val<pos:position pos:line="30" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="55">SSI_VALUE_DECODED<pos:position pos:line="30" pos:column="72"/></name></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">!<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">tag<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">||<pos:position pos:line="31" pos:column="20"/></operator> <operator pos:line="31" pos:column="21">!<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">tag_val<pos:position pos:line="31" pos:column="29"/></name></expr>)<pos:position pos:line="31" pos:column="30"/></condition><then pos:line="31" pos:column="30"> <block pos:line="31" pos:column="31">{
            <break pos:line="32" pos:column="13">break;<pos:position pos:line="32" pos:column="19"/></break>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>

        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><operator pos:line="35" pos:column="13">!<pos:position pos:line="35" pos:column="14"/></operator><call><name pos:line="35" pos:column="14">strcmp<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">tag<pos:position pos:line="35" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="35" pos:column="26">"var"<pos:position pos:line="35" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="35" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="35" pos:column="33"/></condition><then pos:line="35" pos:column="33"> <block pos:line="35" pos:column="34">{
            <decl_stmt><decl><type><specifier pos:line="36" pos:column="13">const<pos:position pos:line="36" pos:column="18"/></specifier> <name pos:line="36" pos:column="19">char<pos:position pos:line="36" pos:column="23"/></name> <modifier pos:line="36" pos:column="24">*<pos:position pos:line="36" pos:column="25"/></modifier></type><name pos:line="36" pos:column="25">val<pos:position pos:line="36" pos:column="28"/></name></decl>;<pos:position pos:line="36" pos:column="29"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="37" pos:column="13">const<pos:position pos:line="37" pos:column="18"/></specifier> <name pos:line="37" pos:column="19">char<pos:position pos:line="37" pos:column="23"/></name> <modifier pos:line="37" pos:column="24">*<pos:position pos:line="37" pos:column="25"/></modifier></type><name pos:line="37" pos:column="25">echo_text<pos:position pos:line="37" pos:column="34"/></name> <init pos:line="37" pos:column="35">= <expr><name pos:line="37" pos:column="37">NULL<pos:position pos:line="37" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="37" pos:column="42"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="38" pos:column="13">apr_size_t<pos:position pos:line="38" pos:column="23"/></name></type> <name pos:line="38" pos:column="24">e_len<pos:position pos:line="38" pos:column="29"/></name></decl>;<pos:position pos:line="38" pos:column="30"/></decl_stmt>

            <expr_stmt><expr><name pos:line="40" pos:column="13">val<pos:position pos:line="40" pos:column="16"/></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <call><name pos:line="40" pos:column="19">get_include_var<pos:position pos:line="40" pos:column="34"/></name><argument_list pos:line="40" pos:column="34">(<argument><expr><call><name pos:line="40" pos:column="35">ap_ssi_parse_string<pos:position pos:line="40" pos:column="54"/></name><argument_list pos:line="40" pos:column="54">(<argument><expr><name pos:line="40" pos:column="55">ctx<pos:position pos:line="40" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="60">tag_val<pos:position pos:line="40" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="69">NULL<pos:position pos:line="40" pos:column="73"/></name></expr></argument>,
                                                      <argument><expr><literal type="number" pos:line="41" pos:column="55">0<pos:position pos:line="41" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="41" pos:column="58">SSI_EXPAND_DROP_NAME<pos:position pos:line="41" pos:column="78"/></name></expr></argument>)<pos:position pos:line="41" pos:column="79"/></argument_list></call></expr></argument>,
                                  <argument><expr><name pos:line="42" pos:column="35">ctx<pos:position pos:line="42" pos:column="38"/></name></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="40"/></expr_stmt>

            <if pos:line="44" pos:column="13">if <condition pos:line="44" pos:column="16">(<expr><name pos:line="44" pos:column="17">val<pos:position pos:line="44" pos:column="20"/></name></expr>)<pos:position pos:line="44" pos:column="21"/></condition><then pos:line="44" pos:column="21"> <block pos:line="44" pos:column="22">{
                <decl_stmt><decl><type><name pos:line="45" pos:column="17">char<pos:position pos:line="45" pos:column="21"/></name> <modifier pos:line="45" pos:column="22">*<pos:position pos:line="45" pos:column="23"/></modifier></type><name pos:line="45" pos:column="23">last<pos:position pos:line="45" pos:column="27"/></name> <init pos:line="45" pos:column="28">= <expr><name pos:line="45" pos:column="30">NULL<pos:position pos:line="45" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="45" pos:column="35"/></decl_stmt>
                <decl_stmt><decl><type><name pos:line="46" pos:column="17">char<pos:position pos:line="46" pos:column="21"/></name> <modifier pos:line="46" pos:column="22">*<pos:position pos:line="46" pos:column="23"/></modifier></type><name pos:line="46" pos:column="23">e<pos:position pos:line="46" pos:column="24"/></name></decl>, <modifier pos:line="46" pos:column="26">*<pos:position pos:line="46" pos:column="27"/></modifier><decl><type ref="prev"/><name pos:line="46" pos:column="27">d<pos:position pos:line="46" pos:column="28"/></name></decl>, <modifier pos:line="46" pos:column="30">*<pos:position pos:line="46" pos:column="31"/></modifier><decl><type ref="prev"/><name pos:line="46" pos:column="31">token<pos:position pos:line="46" pos:column="36"/></name></decl>;<pos:position pos:line="46" pos:column="37"/></decl_stmt>

                <expr_stmt><expr><name pos:line="48" pos:column="17">echo_text<pos:position pos:line="48" pos:column="26"/></name> <operator pos:line="48" pos:column="27">=<pos:position pos:line="48" pos:column="28"/></operator> <name pos:line="48" pos:column="29">val<pos:position pos:line="48" pos:column="32"/></name></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>

                <expr_stmt><expr><name pos:line="50" pos:column="17">d<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <call><name pos:line="50" pos:column="21">apr_pstrdup<pos:position pos:line="50" pos:column="32"/></name><argument_list pos:line="50" pos:column="32">(<argument><expr><name><name pos:line="50" pos:column="33">ctx<pos:position pos:line="50" pos:column="36"/></name><operator pos:line="50" pos:column="36">-&gt;<pos:position pos:line="50" pos:column="41"/></operator><name pos:line="50" pos:column="38">pool<pos:position pos:line="50" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="44">decoding<pos:position pos:line="50" pos:column="52"/></name></expr></argument>)<pos:position pos:line="50" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="54"/></expr_stmt>
                <expr_stmt><expr><name pos:line="51" pos:column="17">token<pos:position pos:line="51" pos:column="22"/></name> <operator pos:line="51" pos:column="23">=<pos:position pos:line="51" pos:column="24"/></operator> <call><name pos:line="51" pos:column="25">apr_strtok<pos:position pos:line="51" pos:column="35"/></name><argument_list pos:line="51" pos:column="35">(<argument><expr><name pos:line="51" pos:column="36">d<pos:position pos:line="51" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="39">", \t"<pos:position pos:line="51" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="51" pos:column="47">&amp;<pos:position pos:line="51" pos:column="52"/></operator><name pos:line="51" pos:column="48">last<pos:position pos:line="51" pos:column="52"/></name></expr></argument>)<pos:position pos:line="51" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="54"/></expr_stmt>

                <while pos:line="53" pos:column="17">while<condition pos:line="53" pos:column="22">(<expr><name pos:line="53" pos:column="23">token<pos:position pos:line="53" pos:column="28"/></name></expr>)<pos:position pos:line="53" pos:column="29"/></condition> <block pos:line="53" pos:column="30">{
                    <if pos:line="54" pos:column="21">if <condition pos:line="54" pos:column="24">(<expr><operator pos:line="54" pos:column="25">!<pos:position pos:line="54" pos:column="26"/></operator><call><name pos:line="54" pos:column="26">strcasecmp<pos:position pos:line="54" pos:column="36"/></name><argument_list pos:line="54" pos:column="36">(<argument><expr><name pos:line="54" pos:column="37">token<pos:position pos:line="54" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="54" pos:column="44">"none"<pos:position pos:line="54" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="54" pos:column="52"/></condition><then pos:line="54" pos:column="52"> <block pos:line="54" pos:column="53">{
                        <comment type="block" pos:line="55" pos:column="25">/* do nothing */</comment>
                    }<pos:position pos:line="56" pos:column="22"/></block></then>
                    <elseif pos:line="57" pos:column="21">else <if pos:line="57" pos:column="26">if <condition pos:line="57" pos:column="29">(<expr><operator pos:line="57" pos:column="30">!<pos:position pos:line="57" pos:column="31"/></operator><call><name pos:line="57" pos:column="31">strcasecmp<pos:position pos:line="57" pos:column="41"/></name><argument_list pos:line="57" pos:column="41">(<argument><expr><name pos:line="57" pos:column="42">token<pos:position pos:line="57" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="49">"url"<pos:position pos:line="57" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="56"/></condition><then pos:line="57" pos:column="56"> <block pos:line="57" pos:column="57">{
                        <decl_stmt><decl><type><name pos:line="58" pos:column="25">char<pos:position pos:line="58" pos:column="29"/></name> <modifier pos:line="58" pos:column="30">*<pos:position pos:line="58" pos:column="31"/></modifier></type><name pos:line="58" pos:column="31">buf<pos:position pos:line="58" pos:column="34"/></name> <init pos:line="58" pos:column="35">= <expr><call><name pos:line="58" pos:column="37">apr_pstrdup<pos:position pos:line="58" pos:column="48"/></name><argument_list pos:line="58" pos:column="48">(<argument><expr><name><name pos:line="58" pos:column="49">ctx<pos:position pos:line="58" pos:column="52"/></name><operator pos:line="58" pos:column="52">-&gt;<pos:position pos:line="58" pos:column="57"/></operator><name pos:line="58" pos:column="54">pool<pos:position pos:line="58" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="60">echo_text<pos:position pos:line="58" pos:column="69"/></name></expr></argument>)<pos:position pos:line="58" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="58" pos:column="71"/></decl_stmt>
                        <expr_stmt><expr><call><name pos:line="59" pos:column="25">ap_unescape_url<pos:position pos:line="59" pos:column="40"/></name><argument_list pos:line="59" pos:column="40">(<argument><expr><name pos:line="59" pos:column="41">buf<pos:position pos:line="59" pos:column="44"/></name></expr></argument>)<pos:position pos:line="59" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="46"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="60" pos:column="25">echo_text<pos:position pos:line="60" pos:column="34"/></name> <operator pos:line="60" pos:column="35">=<pos:position pos:line="60" pos:column="36"/></operator> <name pos:line="60" pos:column="37">buf<pos:position pos:line="60" pos:column="40"/></name></expr>;<pos:position pos:line="60" pos:column="41"/></expr_stmt>
                    }<pos:position pos:line="61" pos:column="22"/></block></then></if></elseif>
                    <elseif pos:line="62" pos:column="21">else <if pos:line="62" pos:column="26">if <condition pos:line="62" pos:column="29">(<expr><operator pos:line="62" pos:column="30">!<pos:position pos:line="62" pos:column="31"/></operator><call><name pos:line="62" pos:column="31">strcasecmp<pos:position pos:line="62" pos:column="41"/></name><argument_list pos:line="62" pos:column="41">(<argument><expr><name pos:line="62" pos:column="42">token<pos:position pos:line="62" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="62" pos:column="49">"urlencoded"<pos:position pos:line="62" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="63"/></condition><then pos:line="62" pos:column="63"> <block pos:line="62" pos:column="64">{
                        <decl_stmt><decl><type><name pos:line="63" pos:column="25">char<pos:position pos:line="63" pos:column="29"/></name> <modifier pos:line="63" pos:column="30">*<pos:position pos:line="63" pos:column="31"/></modifier></type><name pos:line="63" pos:column="31">buf<pos:position pos:line="63" pos:column="34"/></name> <init pos:line="63" pos:column="35">= <expr><call><name pos:line="63" pos:column="37">apr_pstrdup<pos:position pos:line="63" pos:column="48"/></name><argument_list pos:line="63" pos:column="48">(<argument><expr><name><name pos:line="63" pos:column="49">ctx<pos:position pos:line="63" pos:column="52"/></name><operator pos:line="63" pos:column="52">-&gt;<pos:position pos:line="63" pos:column="57"/></operator><name pos:line="63" pos:column="54">pool<pos:position pos:line="63" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="60">echo_text<pos:position pos:line="63" pos:column="69"/></name></expr></argument>)<pos:position pos:line="63" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="63" pos:column="71"/></decl_stmt>
                        <expr_stmt><expr><call><name pos:line="64" pos:column="25">ap_unescape_urlencoded<pos:position pos:line="64" pos:column="47"/></name><argument_list pos:line="64" pos:column="47">(<argument><expr><name pos:line="64" pos:column="48">buf<pos:position pos:line="64" pos:column="51"/></name></expr></argument>)<pos:position pos:line="64" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="53"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="65" pos:column="25">echo_text<pos:position pos:line="65" pos:column="34"/></name> <operator pos:line="65" pos:column="35">=<pos:position pos:line="65" pos:column="36"/></operator> <name pos:line="65" pos:column="37">buf<pos:position pos:line="65" pos:column="40"/></name></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt>
                    }<pos:position pos:line="66" pos:column="22"/></block></then></if></elseif>
                    <elseif pos:line="67" pos:column="21">else <if pos:line="67" pos:column="26">if <condition pos:line="67" pos:column="29">(<expr><operator pos:line="67" pos:column="30">!<pos:position pos:line="67" pos:column="31"/></operator><call><name pos:line="67" pos:column="31">strcasecmp<pos:position pos:line="67" pos:column="41"/></name><argument_list pos:line="67" pos:column="41">(<argument><expr><name pos:line="67" pos:column="42">token<pos:position pos:line="67" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="67" pos:column="49">"entity"<pos:position pos:line="67" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="67" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="67" pos:column="59"/></condition><then pos:line="67" pos:column="59"> <block pos:line="67" pos:column="60">{
                        <decl_stmt><decl><type><name pos:line="68" pos:column="25">char<pos:position pos:line="68" pos:column="29"/></name> <modifier pos:line="68" pos:column="30">*<pos:position pos:line="68" pos:column="31"/></modifier></type><name pos:line="68" pos:column="31">buf<pos:position pos:line="68" pos:column="34"/></name> <init pos:line="68" pos:column="35">= <expr><call><name pos:line="68" pos:column="37">apr_pstrdup<pos:position pos:line="68" pos:column="48"/></name><argument_list pos:line="68" pos:column="48">(<argument><expr><name><name pos:line="68" pos:column="49">ctx<pos:position pos:line="68" pos:column="52"/></name><operator pos:line="68" pos:column="52">-&gt;<pos:position pos:line="68" pos:column="57"/></operator><name pos:line="68" pos:column="54">pool<pos:position pos:line="68" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="60">echo_text<pos:position pos:line="68" pos:column="69"/></name></expr></argument>)<pos:position pos:line="68" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="68" pos:column="71"/></decl_stmt>
                        <expr_stmt><expr><call><name pos:line="69" pos:column="25">decodehtml<pos:position pos:line="69" pos:column="35"/></name><argument_list pos:line="69" pos:column="35">(<argument><expr><name pos:line="69" pos:column="36">buf<pos:position pos:line="69" pos:column="39"/></name></expr></argument>)<pos:position pos:line="69" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="41"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="70" pos:column="25">echo_text<pos:position pos:line="70" pos:column="34"/></name> <operator pos:line="70" pos:column="35">=<pos:position pos:line="70" pos:column="36"/></operator> <name pos:line="70" pos:column="37">buf<pos:position pos:line="70" pos:column="40"/></name></expr>;<pos:position pos:line="70" pos:column="41"/></expr_stmt>
                    }<pos:position pos:line="71" pos:column="22"/></block></then></if></elseif>
                    <elseif pos:line="72" pos:column="21">else <if pos:line="72" pos:column="26">if <condition pos:line="72" pos:column="29">(<expr><operator pos:line="72" pos:column="30">!<pos:position pos:line="72" pos:column="31"/></operator><call><name pos:line="72" pos:column="31">strcasecmp<pos:position pos:line="72" pos:column="41"/></name><argument_list pos:line="72" pos:column="41">(<argument><expr><name pos:line="72" pos:column="42">token<pos:position pos:line="72" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="72" pos:column="49">"base64"<pos:position pos:line="72" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="72" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="59"/></condition><then pos:line="72" pos:column="59"> <block pos:line="72" pos:column="60">{
                        <expr_stmt><expr><name pos:line="73" pos:column="25">echo_text<pos:position pos:line="73" pos:column="34"/></name> <operator pos:line="73" pos:column="35">=<pos:position pos:line="73" pos:column="36"/></operator> <call><name pos:line="73" pos:column="37">ap_pbase64decode<pos:position pos:line="73" pos:column="53"/></name><argument_list pos:line="73" pos:column="53">(<argument><expr><name><name pos:line="73" pos:column="54">ctx<pos:position pos:line="73" pos:column="57"/></name><operator pos:line="73" pos:column="57">-&gt;<pos:position pos:line="73" pos:column="62"/></operator><name pos:line="73" pos:column="59">dpool<pos:position pos:line="73" pos:column="64"/></name></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="66">echo_text<pos:position pos:line="73" pos:column="75"/></name></expr></argument>)<pos:position pos:line="73" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="77"/></expr_stmt>
                    }<pos:position pos:line="74" pos:column="22"/></block></then></if></elseif>
                    <else pos:line="75" pos:column="21">else <block pos:line="75" pos:column="26">{
                        <expr_stmt><expr><call><name pos:line="76" pos:column="25">ap_log_rerror<pos:position pos:line="76" pos:column="38"/></name><argument_list pos:line="76" pos:column="38">(<argument><expr><name pos:line="76" pos:column="39">APLOG_MARK<pos:position pos:line="76" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="51">APLOG_ERR<pos:position pos:line="76" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="76" pos:column="62">0<pos:position pos:line="76" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="65">r<pos:position pos:line="76" pos:column="66"/></name></expr></argument>, <argument><expr><call><name pos:line="76" pos:column="68">APLOGNO<pos:position pos:line="76" pos:column="75"/></name><argument_list pos:line="76" pos:column="75">(<argument><expr><literal type="number" pos:line="76" pos:column="76">01344<pos:position pos:line="76" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="82"/></argument_list></call> <literal type="string" pos:line="76" pos:column="83">"unknown value "<pos:position pos:line="76" pos:column="99"/></literal>
                                      <literal type="string" pos:line="77" pos:column="39">"\"%s\" to parameter \"decoding\" of tag echo in "<pos:position pos:line="77" pos:column="89"/></literal>
                                      <literal type="string" pos:line="78" pos:column="39">"%s"<pos:position pos:line="78" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="78" pos:column="45">token<pos:position pos:line="78" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="78" pos:column="52">r<pos:position pos:line="78" pos:column="53"/></name><operator pos:line="78" pos:column="53">-&gt;<pos:position pos:line="78" pos:column="58"/></operator><name pos:line="78" pos:column="55">filename<pos:position pos:line="78" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="79" pos:column="25">SSI_CREATE_ERROR_BUCKET<pos:position pos:line="79" pos:column="48"/></name><argument_list pos:line="79" pos:column="48">(<argument><expr><name pos:line="79" pos:column="49">ctx<pos:position pos:line="79" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="54">f<pos:position pos:line="79" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="79" pos:column="57">bb<pos:position pos:line="79" pos:column="59"/></name></expr></argument>)<pos:position pos:line="79" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="61"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="80" pos:column="25">error<pos:position pos:line="80" pos:column="30"/></name> <operator pos:line="80" pos:column="31">=<pos:position pos:line="80" pos:column="32"/></operator> <literal type="number" pos:line="80" pos:column="33">1<pos:position pos:line="80" pos:column="34"/></literal></expr>;<pos:position pos:line="80" pos:column="35"/></expr_stmt>
                        <break pos:line="81" pos:column="25">break;<pos:position pos:line="81" pos:column="31"/></break>
                    }<pos:position pos:line="82" pos:column="22"/></block></else></if>
                    <expr_stmt><expr><name pos:line="83" pos:column="21">token<pos:position pos:line="83" pos:column="26"/></name> <operator pos:line="83" pos:column="27">=<pos:position pos:line="83" pos:column="28"/></operator> <call><name pos:line="83" pos:column="29">apr_strtok<pos:position pos:line="83" pos:column="39"/></name><argument_list pos:line="83" pos:column="39">(<argument><expr><name pos:line="83" pos:column="40">NULL<pos:position pos:line="83" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="46">", \t"<pos:position pos:line="83" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="83" pos:column="54">&amp;<pos:position pos:line="83" pos:column="59"/></operator><name pos:line="83" pos:column="55">last<pos:position pos:line="83" pos:column="59"/></name></expr></argument>)<pos:position pos:line="83" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="61"/></expr_stmt>
                }<pos:position pos:line="84" pos:column="18"/></block></while>

                <expr_stmt><expr><name pos:line="86" pos:column="17">e<pos:position pos:line="86" pos:column="18"/></name> <operator pos:line="86" pos:column="19">=<pos:position pos:line="86" pos:column="20"/></operator> <call><name pos:line="86" pos:column="21">apr_pstrdup<pos:position pos:line="86" pos:column="32"/></name><argument_list pos:line="86" pos:column="32">(<argument><expr><name><name pos:line="86" pos:column="33">ctx<pos:position pos:line="86" pos:column="36"/></name><operator pos:line="86" pos:column="36">-&gt;<pos:position pos:line="86" pos:column="41"/></operator><name pos:line="86" pos:column="38">pool<pos:position pos:line="86" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="44">encoding<pos:position pos:line="86" pos:column="52"/></name></expr></argument>)<pos:position pos:line="86" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="54"/></expr_stmt>
                <expr_stmt><expr><name pos:line="87" pos:column="17">token<pos:position pos:line="87" pos:column="22"/></name> <operator pos:line="87" pos:column="23">=<pos:position pos:line="87" pos:column="24"/></operator> <call><name pos:line="87" pos:column="25">apr_strtok<pos:position pos:line="87" pos:column="35"/></name><argument_list pos:line="87" pos:column="35">(<argument><expr><name pos:line="87" pos:column="36">e<pos:position pos:line="87" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="87" pos:column="39">", \t"<pos:position pos:line="87" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="87" pos:column="47">&amp;<pos:position pos:line="87" pos:column="52"/></operator><name pos:line="87" pos:column="48">last<pos:position pos:line="87" pos:column="52"/></name></expr></argument>)<pos:position pos:line="87" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="54"/></expr_stmt>

                <while pos:line="89" pos:column="17">while<condition pos:line="89" pos:column="22">(<expr><name pos:line="89" pos:column="23">token<pos:position pos:line="89" pos:column="28"/></name></expr>)<pos:position pos:line="89" pos:column="29"/></condition> <block pos:line="89" pos:column="30">{
                    <if pos:line="90" pos:column="21">if <condition pos:line="90" pos:column="24">(<expr><operator pos:line="90" pos:column="25">!<pos:position pos:line="90" pos:column="26"/></operator><call><name pos:line="90" pos:column="26">strcasecmp<pos:position pos:line="90" pos:column="36"/></name><argument_list pos:line="90" pos:column="36">(<argument><expr><name pos:line="90" pos:column="37">token<pos:position pos:line="90" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="44">"none"<pos:position pos:line="90" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="90" pos:column="52"/></condition><then pos:line="90" pos:column="52"> <block pos:line="90" pos:column="53">{
                        <comment type="block" pos:line="91" pos:column="25">/* do nothing */</comment>
                    }<pos:position pos:line="92" pos:column="22"/></block></then>
                    <elseif pos:line="93" pos:column="21">else <if pos:line="93" pos:column="26">if <condition pos:line="93" pos:column="29">(<expr><operator pos:line="93" pos:column="30">!<pos:position pos:line="93" pos:column="31"/></operator><call><name pos:line="93" pos:column="31">strcasecmp<pos:position pos:line="93" pos:column="41"/></name><argument_list pos:line="93" pos:column="41">(<argument><expr><name pos:line="93" pos:column="42">token<pos:position pos:line="93" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="49">"url"<pos:position pos:line="93" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="93" pos:column="56"/></condition><then pos:line="93" pos:column="56"> <block pos:line="93" pos:column="57">{
                        <expr_stmt><expr><name pos:line="94" pos:column="25">echo_text<pos:position pos:line="94" pos:column="34"/></name> <operator pos:line="94" pos:column="35">=<pos:position pos:line="94" pos:column="36"/></operator> <call><name pos:line="94" pos:column="37">ap_escape_uri<pos:position pos:line="94" pos:column="50"/></name><argument_list pos:line="94" pos:column="50">(<argument><expr><name><name pos:line="94" pos:column="51">ctx<pos:position pos:line="94" pos:column="54"/></name><operator pos:line="94" pos:column="54">-&gt;<pos:position pos:line="94" pos:column="59"/></operator><name pos:line="94" pos:column="56">dpool<pos:position pos:line="94" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="63">echo_text<pos:position pos:line="94" pos:column="72"/></name></expr></argument>)<pos:position pos:line="94" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="74"/></expr_stmt>
                    }<pos:position pos:line="95" pos:column="22"/></block></then></if></elseif>
                    <elseif pos:line="96" pos:column="21">else <if pos:line="96" pos:column="26">if <condition pos:line="96" pos:column="29">(<expr><operator pos:line="96" pos:column="30">!<pos:position pos:line="96" pos:column="31"/></operator><call><name pos:line="96" pos:column="31">strcasecmp<pos:position pos:line="96" pos:column="41"/></name><argument_list pos:line="96" pos:column="41">(<argument><expr><name pos:line="96" pos:column="42">token<pos:position pos:line="96" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="49">"urlencoded"<pos:position pos:line="96" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="63"/></condition><then pos:line="96" pos:column="63"> <block pos:line="96" pos:column="64">{
                        <expr_stmt><expr><name pos:line="97" pos:column="25">echo_text<pos:position pos:line="97" pos:column="34"/></name> <operator pos:line="97" pos:column="35">=<pos:position pos:line="97" pos:column="36"/></operator> <call><name pos:line="97" pos:column="37">ap_escape_urlencoded<pos:position pos:line="97" pos:column="57"/></name><argument_list pos:line="97" pos:column="57">(<argument><expr><name><name pos:line="97" pos:column="58">ctx<pos:position pos:line="97" pos:column="61"/></name><operator pos:line="97" pos:column="61">-&gt;<pos:position pos:line="97" pos:column="66"/></operator><name pos:line="97" pos:column="63">dpool<pos:position pos:line="97" pos:column="68"/></name></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="70">echo_text<pos:position pos:line="97" pos:column="79"/></name></expr></argument>)<pos:position pos:line="97" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="81"/></expr_stmt>
                    }<pos:position pos:line="98" pos:column="22"/></block></then></if></elseif>
                    <elseif pos:line="99" pos:column="21">else <if pos:line="99" pos:column="26">if <condition pos:line="99" pos:column="29">(<expr><operator pos:line="99" pos:column="30">!<pos:position pos:line="99" pos:column="31"/></operator><call><name pos:line="99" pos:column="31">strcasecmp<pos:position pos:line="99" pos:column="41"/></name><argument_list pos:line="99" pos:column="41">(<argument><expr><name pos:line="99" pos:column="42">token<pos:position pos:line="99" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="99" pos:column="49">"entity"<pos:position pos:line="99" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="99" pos:column="59"/></condition><then pos:line="99" pos:column="59"> <block pos:line="99" pos:column="60">{
                        <expr_stmt><expr><name pos:line="100" pos:column="25">echo_text<pos:position pos:line="100" pos:column="34"/></name> <operator pos:line="100" pos:column="35">=<pos:position pos:line="100" pos:column="36"/></operator> <call><name pos:line="100" pos:column="37">ap_escape_html2<pos:position pos:line="100" pos:column="52"/></name><argument_list pos:line="100" pos:column="52">(<argument><expr><name><name pos:line="100" pos:column="53">ctx<pos:position pos:line="100" pos:column="56"/></name><operator pos:line="100" pos:column="56">-&gt;<pos:position pos:line="100" pos:column="61"/></operator><name pos:line="100" pos:column="58">dpool<pos:position pos:line="100" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="100" pos:column="65">echo_text<pos:position pos:line="100" pos:column="74"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="100" pos:column="76">0<pos:position pos:line="100" pos:column="77"/></literal></expr></argument>)<pos:position pos:line="100" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="79"/></expr_stmt>
                    }<pos:position pos:line="101" pos:column="22"/></block></then></if></elseif>
                    <elseif pos:line="102" pos:column="21">else <if pos:line="102" pos:column="26">if <condition pos:line="102" pos:column="29">(<expr><operator pos:line="102" pos:column="30">!<pos:position pos:line="102" pos:column="31"/></operator><call><name pos:line="102" pos:column="31">strcasecmp<pos:position pos:line="102" pos:column="41"/></name><argument_list pos:line="102" pos:column="41">(<argument><expr><name pos:line="102" pos:column="42">token<pos:position pos:line="102" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="102" pos:column="49">"base64"<pos:position pos:line="102" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="102" pos:column="58"/></argument_list></call></expr>)<pos:position pos:line="102" pos:column="59"/></condition><then pos:line="102" pos:column="59"> <block pos:line="102" pos:column="60">{
                        <decl_stmt><decl><type><name pos:line="103" pos:column="25">char<pos:position pos:line="103" pos:column="29"/></name> <modifier pos:line="103" pos:column="30">*<pos:position pos:line="103" pos:column="31"/></modifier></type><name pos:line="103" pos:column="31">buf<pos:position pos:line="103" pos:column="34"/></name></decl>;<pos:position pos:line="103" pos:column="35"/></decl_stmt>
                        <expr_stmt><expr><name pos:line="104" pos:column="25">buf<pos:position pos:line="104" pos:column="28"/></name> <operator pos:line="104" pos:column="29">=<pos:position pos:line="104" pos:column="30"/></operator> <call><name pos:line="104" pos:column="31">ap_pbase64encode<pos:position pos:line="104" pos:column="47"/></name><argument_list pos:line="104" pos:column="47">(<argument><expr><name><name pos:line="104" pos:column="48">ctx<pos:position pos:line="104" pos:column="51"/></name><operator pos:line="104" pos:column="51">-&gt;<pos:position pos:line="104" pos:column="56"/></operator><name pos:line="104" pos:column="53">dpool<pos:position pos:line="104" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="104" pos:column="60">(<pos:position pos:line="104" pos:column="61"/></operator><name pos:line="104" pos:column="61">char<pos:position pos:line="104" pos:column="65"/></name> <operator pos:line="104" pos:column="66">*<pos:position pos:line="104" pos:column="67"/></operator><operator pos:line="104" pos:column="67">)<pos:position pos:line="104" pos:column="68"/></operator><name pos:line="104" pos:column="68">echo_text<pos:position pos:line="104" pos:column="77"/></name></expr></argument>)<pos:position pos:line="104" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="79"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="105" pos:column="25">echo_text<pos:position pos:line="105" pos:column="34"/></name> <operator pos:line="105" pos:column="35">=<pos:position pos:line="105" pos:column="36"/></operator> <name pos:line="105" pos:column="37">buf<pos:position pos:line="105" pos:column="40"/></name></expr>;<pos:position pos:line="105" pos:column="41"/></expr_stmt>
                    }<pos:position pos:line="106" pos:column="22"/></block></then></if></elseif>
                    <else pos:line="107" pos:column="21">else <block pos:line="107" pos:column="26">{
                        <expr_stmt><expr><call><name pos:line="108" pos:column="25">ap_log_rerror<pos:position pos:line="108" pos:column="38"/></name><argument_list pos:line="108" pos:column="38">(<argument><expr><name pos:line="108" pos:column="39">APLOG_MARK<pos:position pos:line="108" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="51">APLOG_ERR<pos:position pos:line="108" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="108" pos:column="62">0<pos:position pos:line="108" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="108" pos:column="65">r<pos:position pos:line="108" pos:column="66"/></name></expr></argument>, <argument><expr><call><name pos:line="108" pos:column="68">APLOGNO<pos:position pos:line="108" pos:column="75"/></name><argument_list pos:line="108" pos:column="75">(<argument><expr><literal type="number" pos:line="108" pos:column="76">01345<pos:position pos:line="108" pos:column="81"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="82"/></argument_list></call> <literal type="string" pos:line="108" pos:column="83">"unknown value "<pos:position pos:line="108" pos:column="99"/></literal>
                                      <literal type="string" pos:line="109" pos:column="39">"\"%s\" to parameter \"encoding\" of tag echo in "<pos:position pos:line="109" pos:column="89"/></literal>
                                      <literal type="string" pos:line="110" pos:column="39">"%s"<pos:position pos:line="110" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="45">token<pos:position pos:line="110" pos:column="50"/></name></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="52">r<pos:position pos:line="110" pos:column="53"/></name><operator pos:line="110" pos:column="53">-&gt;<pos:position pos:line="110" pos:column="58"/></operator><name pos:line="110" pos:column="55">filename<pos:position pos:line="110" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="110" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><call><name pos:line="111" pos:column="25">SSI_CREATE_ERROR_BUCKET<pos:position pos:line="111" pos:column="48"/></name><argument_list pos:line="111" pos:column="48">(<argument><expr><name pos:line="111" pos:column="49">ctx<pos:position pos:line="111" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="54">f<pos:position pos:line="111" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="111" pos:column="57">bb<pos:position pos:line="111" pos:column="59"/></name></expr></argument>)<pos:position pos:line="111" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="61"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="112" pos:column="25">error<pos:position pos:line="112" pos:column="30"/></name> <operator pos:line="112" pos:column="31">=<pos:position pos:line="112" pos:column="32"/></operator> <literal type="number" pos:line="112" pos:column="33">1<pos:position pos:line="112" pos:column="34"/></literal></expr>;<pos:position pos:line="112" pos:column="35"/></expr_stmt>
                        <break pos:line="113" pos:column="25">break;<pos:position pos:line="113" pos:column="31"/></break>
                    }<pos:position pos:line="114" pos:column="22"/></block></else></if>
                    <expr_stmt><expr><name pos:line="115" pos:column="21">token<pos:position pos:line="115" pos:column="26"/></name> <operator pos:line="115" pos:column="27">=<pos:position pos:line="115" pos:column="28"/></operator> <call><name pos:line="115" pos:column="29">apr_strtok<pos:position pos:line="115" pos:column="39"/></name><argument_list pos:line="115" pos:column="39">(<argument><expr><name pos:line="115" pos:column="40">NULL<pos:position pos:line="115" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="115" pos:column="46">", \t"<pos:position pos:line="115" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="115" pos:column="54">&amp;<pos:position pos:line="115" pos:column="59"/></operator><name pos:line="115" pos:column="55">last<pos:position pos:line="115" pos:column="59"/></name></expr></argument>)<pos:position pos:line="115" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="115" pos:column="61"/></expr_stmt>
                }<pos:position pos:line="116" pos:column="18"/></block></while>

                <expr_stmt><expr><name pos:line="118" pos:column="17">e_len<pos:position pos:line="118" pos:column="22"/></name> <operator pos:line="118" pos:column="23">=<pos:position pos:line="118" pos:column="24"/></operator> <call><name pos:line="118" pos:column="25">strlen<pos:position pos:line="118" pos:column="31"/></name><argument_list pos:line="118" pos:column="31">(<argument><expr><name pos:line="118" pos:column="32">echo_text<pos:position pos:line="118" pos:column="41"/></name></expr></argument>)<pos:position pos:line="118" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="119" pos:column="14"/></block></then>
            <else pos:line="120" pos:column="13">else <block pos:line="120" pos:column="18">{
                <expr_stmt><expr><name pos:line="121" pos:column="17">echo_text<pos:position pos:line="121" pos:column="26"/></name> <operator pos:line="121" pos:column="27">=<pos:position pos:line="121" pos:column="28"/></operator> <name><name pos:line="121" pos:column="29">ctx<pos:position pos:line="121" pos:column="32"/></name><operator pos:line="121" pos:column="32">-&gt;<pos:position pos:line="121" pos:column="37"/></operator><name pos:line="121" pos:column="34">intern<pos:position pos:line="121" pos:column="40"/></name><operator pos:line="121" pos:column="40">-&gt;<pos:position pos:line="121" pos:column="45"/></operator><name pos:line="121" pos:column="42">undefined_echo<pos:position pos:line="121" pos:column="56"/></name></name></expr>;<pos:position pos:line="121" pos:column="57"/></expr_stmt>
                <expr_stmt><expr><name pos:line="122" pos:column="17">e_len<pos:position pos:line="122" pos:column="22"/></name> <operator pos:line="122" pos:column="23">=<pos:position pos:line="122" pos:column="24"/></operator> <name><name pos:line="122" pos:column="25">ctx<pos:position pos:line="122" pos:column="28"/></name><operator pos:line="122" pos:column="28">-&gt;<pos:position pos:line="122" pos:column="33"/></operator><name pos:line="122" pos:column="30">intern<pos:position pos:line="122" pos:column="36"/></name><operator pos:line="122" pos:column="36">-&gt;<pos:position pos:line="122" pos:column="41"/></operator><name pos:line="122" pos:column="38">undefined_echo_len<pos:position pos:line="122" pos:column="56"/></name></name></expr>;<pos:position pos:line="122" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="123" pos:column="14"/></block></else></if>

            <if pos:line="125" pos:column="13">if <condition pos:line="125" pos:column="16">(<expr><name pos:line="125" pos:column="17">error<pos:position pos:line="125" pos:column="22"/></name></expr>)<pos:position pos:line="125" pos:column="23"/></condition><then pos:line="125" pos:column="23"> <block pos:line="125" pos:column="24">{
                <break pos:line="126" pos:column="17">break;<pos:position pos:line="126" pos:column="23"/></break>
            }<pos:position pos:line="127" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="129" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="129" pos:column="36"/></name><argument_list pos:line="129" pos:column="36">(<argument><expr><name pos:line="129" pos:column="37">bb<pos:position pos:line="129" pos:column="39"/></name></expr></argument>, <argument><expr><call><name pos:line="129" pos:column="41">apr_bucket_pool_create<pos:position pos:line="129" pos:column="63"/></name><argument_list pos:line="129" pos:column="63">(
                                    <argument><expr><call><name pos:line="130" pos:column="37">apr_pmemdup<pos:position pos:line="130" pos:column="48"/></name><argument_list pos:line="130" pos:column="48">(<argument><expr><name><name pos:line="130" pos:column="49">ctx<pos:position pos:line="130" pos:column="52"/></name><operator pos:line="130" pos:column="52">-&gt;<pos:position pos:line="130" pos:column="57"/></operator><name pos:line="130" pos:column="54">pool<pos:position pos:line="130" pos:column="58"/></name></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="60">echo_text<pos:position pos:line="130" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="71">e_len<pos:position pos:line="130" pos:column="76"/></name></expr></argument>)<pos:position pos:line="130" pos:column="77"/></argument_list></call></expr></argument>,
                                    <argument><expr><name pos:line="131" pos:column="37">e_len<pos:position pos:line="131" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="44">ctx<pos:position pos:line="131" pos:column="47"/></name><operator pos:line="131" pos:column="47">-&gt;<pos:position pos:line="131" pos:column="52"/></operator><name pos:line="131" pos:column="49">pool<pos:position pos:line="131" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="131" pos:column="55">f<pos:position pos:line="131" pos:column="56"/></name><operator pos:line="131" pos:column="56">-&gt;<pos:position pos:line="131" pos:column="61"/></operator><name pos:line="131" pos:column="58">c<pos:position pos:line="131" pos:column="59"/></name><operator pos:line="131" pos:column="59">-&gt;<pos:position pos:line="131" pos:column="64"/></operator><name pos:line="131" pos:column="61">bucket_alloc<pos:position pos:line="131" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="131" pos:column="74"/></argument_list></call></expr></argument>)<pos:position pos:line="131" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="76"/></expr_stmt>
        }<pos:position pos:line="132" pos:column="10"/></block></then>
        <elseif pos:line="133" pos:column="9">else <if pos:line="133" pos:column="14">if <condition pos:line="133" pos:column="17">(<expr><operator pos:line="133" pos:column="18">!<pos:position pos:line="133" pos:column="19"/></operator><call><name pos:line="133" pos:column="19">strcmp<pos:position pos:line="133" pos:column="25"/></name><argument_list pos:line="133" pos:column="25">(<argument><expr><name pos:line="133" pos:column="26">tag<pos:position pos:line="133" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="133" pos:column="31">"decoding"<pos:position pos:line="133" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="43"/></condition><then pos:line="133" pos:column="43"> <block pos:line="133" pos:column="44">{
            <expr_stmt><expr><name pos:line="134" pos:column="13">decoding<pos:position pos:line="134" pos:column="21"/></name> <operator pos:line="134" pos:column="22">=<pos:position pos:line="134" pos:column="23"/></operator> <name pos:line="134" pos:column="24">tag_val<pos:position pos:line="134" pos:column="31"/></name></expr>;<pos:position pos:line="134" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="135" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="136" pos:column="9">else <if pos:line="136" pos:column="14">if <condition pos:line="136" pos:column="17">(<expr><operator pos:line="136" pos:column="18">!<pos:position pos:line="136" pos:column="19"/></operator><call><name pos:line="136" pos:column="19">strcmp<pos:position pos:line="136" pos:column="25"/></name><argument_list pos:line="136" pos:column="25">(<argument><expr><name pos:line="136" pos:column="26">tag<pos:position pos:line="136" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="136" pos:column="31">"encoding"<pos:position pos:line="136" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="136" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="136" pos:column="43"/></condition><then pos:line="136" pos:column="43"> <block pos:line="136" pos:column="44">{
            <expr_stmt><expr><name pos:line="137" pos:column="13">encoding<pos:position pos:line="137" pos:column="21"/></name> <operator pos:line="137" pos:column="22">=<pos:position pos:line="137" pos:column="23"/></operator> <name pos:line="137" pos:column="24">tag_val<pos:position pos:line="137" pos:column="31"/></name></expr>;<pos:position pos:line="137" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="138" pos:column="10"/></block></then></if></elseif>
        <else pos:line="139" pos:column="9">else <block pos:line="139" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="140" pos:column="13">ap_log_rerror<pos:position pos:line="140" pos:column="26"/></name><argument_list pos:line="140" pos:column="26">(<argument><expr><name pos:line="140" pos:column="27">APLOG_MARK<pos:position pos:line="140" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="39">APLOG_ERR<pos:position pos:line="140" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="140" pos:column="50">0<pos:position pos:line="140" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="140" pos:column="53">r<pos:position pos:line="140" pos:column="54"/></name></expr></argument>, <argument><expr><call><name pos:line="140" pos:column="56">APLOGNO<pos:position pos:line="140" pos:column="63"/></name><argument_list pos:line="140" pos:column="63">(<argument><expr><literal type="number" pos:line="140" pos:column="64">01346<pos:position pos:line="140" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="70"/></argument_list></call> <literal type="string" pos:line="140" pos:column="71">"unknown parameter "<pos:position pos:line="140" pos:column="91"/></literal>
                          <literal type="string" pos:line="141" pos:column="27">"\"%s\" in tag echo of %s"<pos:position pos:line="141" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="141" pos:column="55">tag<pos:position pos:line="141" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="141" pos:column="60">r<pos:position pos:line="141" pos:column="61"/></name><operator pos:line="141" pos:column="61">-&gt;<pos:position pos:line="141" pos:column="66"/></operator><name pos:line="141" pos:column="63">filename<pos:position pos:line="141" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="141" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="73"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="142" pos:column="13">SSI_CREATE_ERROR_BUCKET<pos:position pos:line="142" pos:column="36"/></name><argument_list pos:line="142" pos:column="36">(<argument><expr><name pos:line="142" pos:column="37">ctx<pos:position pos:line="142" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="42">f<pos:position pos:line="142" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="45">bb<pos:position pos:line="142" pos:column="47"/></name></expr></argument>)<pos:position pos:line="142" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="49"/></expr_stmt>
            <break pos:line="143" pos:column="13">break;<pos:position pos:line="143" pos:column="19"/></break>
        }<pos:position pos:line="144" pos:column="10"/></block></else></if>
    }<pos:position pos:line="145" pos:column="6"/></block></while>

    <return pos:line="147" pos:column="5">return <expr><name pos:line="147" pos:column="12">APR_SUCCESS<pos:position pos:line="147" pos:column="23"/></name></expr>;<pos:position pos:line="147" pos:column="24"/></return>
}<pos:position pos:line="148" pos:column="2"/></block></function></unit>
