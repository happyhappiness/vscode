<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2924_httpd-2.2.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier>
<type><name pos:line="2" pos:column="1">int<pos:position pos:line="2" pos:column="4"/></name> <name pos:line="2" pos:column="5">PREFIX<pos:position pos:line="2" pos:column="11"/></name></type>(<name pos:line="2" pos:column="12">scanPi<pos:position pos:line="2" pos:column="18"/></name>)<parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><specifier pos:line="2" pos:column="20">const<pos:position pos:line="2" pos:column="25"/></specifier> <name pos:line="2" pos:column="26">ENCODING<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">enc<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="41">const<pos:position pos:line="2" pos:column="46"/></specifier> <name pos:line="2" pos:column="47">char<pos:position pos:line="2" pos:column="51"/></name> <modifier pos:line="2" pos:column="52">*<pos:position pos:line="2" pos:column="53"/></modifier></type><name pos:line="2" pos:column="53">ptr<pos:position pos:line="2" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="58">const<pos:position pos:line="2" pos:column="63"/></specifier> <name pos:line="2" pos:column="64">char<pos:position pos:line="2" pos:column="68"/></name> <modifier pos:line="2" pos:column="69">*<pos:position pos:line="2" pos:column="70"/></modifier></type><name pos:line="2" pos:column="70">end<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>,
		   <parameter><decl><type><specifier pos:line="3" pos:column="20">const<pos:position pos:line="3" pos:column="25"/></specifier> <name pos:line="3" pos:column="26">char<pos:position pos:line="3" pos:column="30"/></name> <modifier pos:line="3" pos:column="31">*<pos:position pos:line="3" pos:column="32"/></modifier><modifier pos:line="3" pos:column="32">*<pos:position pos:line="3" pos:column="33"/></modifier></type><name pos:line="3" pos:column="33">nextTokPtr<pos:position pos:line="3" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="44"/></parameter_list>
<block pos:line="4" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="5" pos:column="3">int<pos:position pos:line="5" pos:column="6"/></name></type> <name pos:line="5" pos:column="7">tok<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="6" pos:column="3">const<pos:position pos:line="6" pos:column="8"/></specifier> <name pos:line="6" pos:column="9">char<pos:position pos:line="6" pos:column="13"/></name> <modifier pos:line="6" pos:column="14">*<pos:position pos:line="6" pos:column="15"/></modifier></type><name pos:line="6" pos:column="15">target<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><name pos:line="6" pos:column="24">ptr<pos:position pos:line="6" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><name pos:line="7" pos:column="7">ptr<pos:position pos:line="7" pos:column="10"/></name> <operator pos:line="7" pos:column="11">==<pos:position pos:line="7" pos:column="13"/></operator> <name pos:line="7" pos:column="14">end<pos:position pos:line="7" pos:column="17"/></name></expr>)<pos:position pos:line="7" pos:column="18"/></condition><then pos:line="7" pos:column="18">
    <block type="pseudo"><return pos:line="8" pos:column="5">return <expr><name pos:line="8" pos:column="12">XML_TOK_PARTIAL<pos:position pos:line="8" pos:column="27"/></name></expr>;<pos:position pos:line="8" pos:column="28"/></return></block></then></if>
  <switch pos:line="9" pos:column="3">switch <condition pos:line="9" pos:column="10">(<expr><call><name pos:line="9" pos:column="11">BYTE_TYPE<pos:position pos:line="9" pos:column="20"/></name><argument_list pos:line="9" pos:column="20">(<argument><expr><name pos:line="9" pos:column="21">enc<pos:position pos:line="9" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="26">ptr<pos:position pos:line="9" pos:column="29"/></name></expr></argument>)<pos:position pos:line="9" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="31"/></condition> <block pos:line="9" pos:column="32">{
  <macro><name pos:line="10" pos:column="3">CHECK_NMSTRT_CASES<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument pos:line="10" pos:column="22">enc<pos:position pos:line="10" pos:column="25"/></argument>, <argument pos:line="10" pos:column="27">ptr<pos:position pos:line="10" pos:column="30"/></argument>, <argument pos:line="10" pos:column="32">end<pos:position pos:line="10" pos:column="35"/></argument>, <argument pos:line="10" pos:column="37">nextTokPtr<pos:position pos:line="10" pos:column="47"/></argument>)<pos:position pos:line="10" pos:column="48"/></argument_list></macro>
  <default pos:line="11" pos:column="3">default:<pos:position pos:line="11" pos:column="11"/></default>
    <expr_stmt><expr><operator pos:line="12" pos:column="5">*<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">nextTokPtr<pos:position pos:line="12" pos:column="16"/></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="19">ptr<pos:position pos:line="12" pos:column="22"/></name></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt>
    <return pos:line="13" pos:column="5">return <expr><name pos:line="13" pos:column="12">XML_TOK_INVALID<pos:position pos:line="13" pos:column="27"/></name></expr>;<pos:position pos:line="13" pos:column="28"/></return>
  }<pos:position pos:line="14" pos:column="4"/></block></switch>
  <while pos:line="15" pos:column="3">while <condition pos:line="15" pos:column="9">(<expr><name pos:line="15" pos:column="10">ptr<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">!=<pos:position pos:line="15" pos:column="16"/></operator> <name pos:line="15" pos:column="17">end<pos:position pos:line="15" pos:column="20"/></name></expr>)<pos:position pos:line="15" pos:column="21"/></condition> <block pos:line="15" pos:column="22">{
    <switch pos:line="16" pos:column="5">switch <condition pos:line="16" pos:column="12">(<expr><call><name pos:line="16" pos:column="13">BYTE_TYPE<pos:position pos:line="16" pos:column="22"/></name><argument_list pos:line="16" pos:column="22">(<argument><expr><name pos:line="16" pos:column="23">enc<pos:position pos:line="16" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="28">ptr<pos:position pos:line="16" pos:column="31"/></name></expr></argument>)<pos:position pos:line="16" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="33"/></condition> <block pos:line="16" pos:column="34">{
    <macro><name pos:line="17" pos:column="5">CHECK_NAME_CASES<pos:position pos:line="17" pos:column="21"/></name><argument_list pos:line="17" pos:column="21">(<argument pos:line="17" pos:column="22">enc<pos:position pos:line="17" pos:column="25"/></argument>, <argument pos:line="17" pos:column="27">ptr<pos:position pos:line="17" pos:column="30"/></argument>, <argument pos:line="17" pos:column="32">end<pos:position pos:line="17" pos:column="35"/></argument>, <argument pos:line="17" pos:column="37">nextTokPtr<pos:position pos:line="17" pos:column="47"/></argument>)<pos:position pos:line="17" pos:column="48"/></argument_list></macro>
    <case pos:line="18" pos:column="5">case <expr><name pos:line="18" pos:column="10">BT_S<pos:position pos:line="18" pos:column="14"/></name></expr>:<pos:position pos:line="18" pos:column="15"/></case> <case pos:line="18" pos:column="16">case <expr><name pos:line="18" pos:column="21">BT_CR<pos:position pos:line="18" pos:column="26"/></name></expr>:<pos:position pos:line="18" pos:column="27"/></case> <case pos:line="18" pos:column="28">case <expr><name pos:line="18" pos:column="33">BT_LF<pos:position pos:line="18" pos:column="38"/></name></expr>:<pos:position pos:line="18" pos:column="39"/></case>
      <if pos:line="19" pos:column="7">if <condition pos:line="19" pos:column="10">(<expr><operator pos:line="19" pos:column="11">!<pos:position pos:line="19" pos:column="12"/></operator><call><call><name pos:line="19" pos:column="12">PREFIX<pos:position pos:line="19" pos:column="18"/></name><argument_list pos:line="19" pos:column="18">(<argument><expr><name pos:line="19" pos:column="19">checkPiTarget<pos:position pos:line="19" pos:column="32"/></name></expr></argument>)<pos:position pos:line="19" pos:column="33"/></argument_list></call><argument_list pos:line="19" pos:column="33">(<argument><expr><name pos:line="19" pos:column="34">enc<pos:position pos:line="19" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="39">target<pos:position pos:line="19" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="47">ptr<pos:position pos:line="19" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="19" pos:column="52">&amp;<pos:position pos:line="19" pos:column="57"/></operator><name pos:line="19" pos:column="53">tok<pos:position pos:line="19" pos:column="56"/></name></expr></argument>)<pos:position pos:line="19" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="19" pos:column="58"/></condition><then pos:line="19" pos:column="58"> <block pos:line="19" pos:column="59">{
	<expr_stmt><expr><operator pos:line="20" pos:column="9">*<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">nextTokPtr<pos:position pos:line="20" pos:column="20"/></name> <operator pos:line="20" pos:column="21">=<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">ptr<pos:position pos:line="20" pos:column="26"/></name></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
	<return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">XML_TOK_INVALID<pos:position pos:line="21" pos:column="31"/></name></expr>;<pos:position pos:line="21" pos:column="32"/></return>
      }<pos:position pos:line="22" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="23" pos:column="7">ptr<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">+=<pos:position pos:line="23" pos:column="13"/></operator> <call><name pos:line="23" pos:column="14">MINBPC<pos:position pos:line="23" pos:column="20"/></name><argument_list pos:line="23" pos:column="20">(<argument><expr><name pos:line="23" pos:column="21">enc<pos:position pos:line="23" pos:column="24"/></name></expr></argument>)<pos:position pos:line="23" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
      <while pos:line="24" pos:column="7">while <condition pos:line="24" pos:column="13">(<expr><name pos:line="24" pos:column="14">ptr<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">!=<pos:position pos:line="24" pos:column="20"/></operator> <name pos:line="24" pos:column="21">end<pos:position pos:line="24" pos:column="24"/></name></expr>)<pos:position pos:line="24" pos:column="25"/></condition> <block pos:line="24" pos:column="26">{
        <switch pos:line="25" pos:column="9">switch <condition pos:line="25" pos:column="16">(<expr><call><name pos:line="25" pos:column="17">BYTE_TYPE<pos:position pos:line="25" pos:column="26"/></name><argument_list pos:line="25" pos:column="26">(<argument><expr><name pos:line="25" pos:column="27">enc<pos:position pos:line="25" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="32">ptr<pos:position pos:line="25" pos:column="35"/></name></expr></argument>)<pos:position pos:line="25" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="25" pos:column="37"/></condition> <block pos:line="25" pos:column="38">{
        <macro><name pos:line="26" pos:column="9">INVALID_CASES<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument pos:line="26" pos:column="23">ptr<pos:position pos:line="26" pos:column="26"/></argument>, <argument pos:line="26" pos:column="28">nextTokPtr<pos:position pos:line="26" pos:column="38"/></argument>)<pos:position pos:line="26" pos:column="39"/></argument_list></macro>
	<case pos:line="27" pos:column="9">case <expr><name pos:line="27" pos:column="14">BT_QUEST<pos:position pos:line="27" pos:column="22"/></name></expr>:<pos:position pos:line="27" pos:column="23"/></case>
	  <expr_stmt><expr><name pos:line="28" pos:column="11">ptr<pos:position pos:line="28" pos:column="14"/></name> <operator pos:line="28" pos:column="15">+=<pos:position pos:line="28" pos:column="17"/></operator> <call><name pos:line="28" pos:column="18">MINBPC<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name pos:line="28" pos:column="25">enc<pos:position pos:line="28" pos:column="28"/></name></expr></argument>)<pos:position pos:line="28" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="30"/></expr_stmt>
	  <if pos:line="29" pos:column="11">if <condition pos:line="29" pos:column="14">(<expr><name pos:line="29" pos:column="15">ptr<pos:position pos:line="29" pos:column="18"/></name> <operator pos:line="29" pos:column="19">==<pos:position pos:line="29" pos:column="21"/></operator> <name pos:line="29" pos:column="22">end<pos:position pos:line="29" pos:column="25"/></name></expr>)<pos:position pos:line="29" pos:column="26"/></condition><then pos:line="29" pos:column="26">
	    <block type="pseudo"><return pos:line="30" pos:column="13">return <expr><name pos:line="30" pos:column="20">XML_TOK_PARTIAL<pos:position pos:line="30" pos:column="35"/></name></expr>;<pos:position pos:line="30" pos:column="36"/></return></block></then></if>
	  <if pos:line="31" pos:column="11">if <condition pos:line="31" pos:column="14">(<expr><call><name pos:line="31" pos:column="15">CHAR_MATCHES<pos:position pos:line="31" pos:column="27"/></name><argument_list pos:line="31" pos:column="27">(<argument><expr><name pos:line="31" pos:column="28">enc<pos:position pos:line="31" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="33">ptr<pos:position pos:line="31" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="38">ASCII_GT<pos:position pos:line="31" pos:column="46"/></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="48"/></condition><then pos:line="31" pos:column="48"> <block pos:line="31" pos:column="49">{
	    <expr_stmt><expr><operator pos:line="32" pos:column="13">*<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">nextTokPtr<pos:position pos:line="32" pos:column="24"/></name> <operator pos:line="32" pos:column="25">=<pos:position pos:line="32" pos:column="26"/></operator> <name pos:line="32" pos:column="27">ptr<pos:position pos:line="32" pos:column="30"/></name> <operator pos:line="32" pos:column="31">+<pos:position pos:line="32" pos:column="32"/></operator> <call><name pos:line="32" pos:column="33">MINBPC<pos:position pos:line="32" pos:column="39"/></name><argument_list pos:line="32" pos:column="39">(<argument><expr><name pos:line="32" pos:column="40">enc<pos:position pos:line="32" pos:column="43"/></name></expr></argument>)<pos:position pos:line="32" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt>
	    <return pos:line="33" pos:column="13">return <expr><name pos:line="33" pos:column="20">tok<pos:position pos:line="33" pos:column="23"/></name></expr>;<pos:position pos:line="33" pos:column="24"/></return>
	  }<pos:position pos:line="34" pos:column="12"/></block></then></if>
	  <break pos:line="35" pos:column="11">break;<pos:position pos:line="35" pos:column="17"/></break>
	<default pos:line="36" pos:column="9">default:<pos:position pos:line="36" pos:column="17"/></default>
	  <expr_stmt><expr><name pos:line="37" pos:column="11">ptr<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">+=<pos:position pos:line="37" pos:column="17"/></operator> <call><name pos:line="37" pos:column="18">MINBPC<pos:position pos:line="37" pos:column="24"/></name><argument_list pos:line="37" pos:column="24">(<argument><expr><name pos:line="37" pos:column="25">enc<pos:position pos:line="37" pos:column="28"/></name></expr></argument>)<pos:position pos:line="37" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="30"/></expr_stmt>
	  <break pos:line="38" pos:column="11">break;<pos:position pos:line="38" pos:column="17"/></break>
	}<pos:position pos:line="39" pos:column="10"/></block></switch>
      }<pos:position pos:line="40" pos:column="8"/></block></while>
      <return pos:line="41" pos:column="7">return <expr><name pos:line="41" pos:column="14">XML_TOK_PARTIAL<pos:position pos:line="41" pos:column="29"/></name></expr>;<pos:position pos:line="41" pos:column="30"/></return>
    <case pos:line="42" pos:column="5">case <expr><name pos:line="42" pos:column="10">BT_QUEST<pos:position pos:line="42" pos:column="18"/></name></expr>:<pos:position pos:line="42" pos:column="19"/></case>
      <if pos:line="43" pos:column="7">if <condition pos:line="43" pos:column="10">(<expr><operator pos:line="43" pos:column="11">!<pos:position pos:line="43" pos:column="12"/></operator><call><call><name pos:line="43" pos:column="12">PREFIX<pos:position pos:line="43" pos:column="18"/></name><argument_list pos:line="43" pos:column="18">(<argument><expr><name pos:line="43" pos:column="19">checkPiTarget<pos:position pos:line="43" pos:column="32"/></name></expr></argument>)<pos:position pos:line="43" pos:column="33"/></argument_list></call><argument_list pos:line="43" pos:column="33">(<argument><expr><name pos:line="43" pos:column="34">enc<pos:position pos:line="43" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="39">target<pos:position pos:line="43" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="47">ptr<pos:position pos:line="43" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="43" pos:column="52">&amp;<pos:position pos:line="43" pos:column="57"/></operator><name pos:line="43" pos:column="53">tok<pos:position pos:line="43" pos:column="56"/></name></expr></argument>)<pos:position pos:line="43" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="43" pos:column="58"/></condition><then pos:line="43" pos:column="58"> <block pos:line="43" pos:column="59">{
	<expr_stmt><expr><operator pos:line="44" pos:column="9">*<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">nextTokPtr<pos:position pos:line="44" pos:column="20"/></name> <operator pos:line="44" pos:column="21">=<pos:position pos:line="44" pos:column="22"/></operator> <name pos:line="44" pos:column="23">ptr<pos:position pos:line="44" pos:column="26"/></name></expr>;<pos:position pos:line="44" pos:column="27"/></expr_stmt>
	<return pos:line="45" pos:column="9">return <expr><name pos:line="45" pos:column="16">XML_TOK_INVALID<pos:position pos:line="45" pos:column="31"/></name></expr>;<pos:position pos:line="45" pos:column="32"/></return>
      }<pos:position pos:line="46" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name pos:line="47" pos:column="7">ptr<pos:position pos:line="47" pos:column="10"/></name> <operator pos:line="47" pos:column="11">+=<pos:position pos:line="47" pos:column="13"/></operator> <call><name pos:line="47" pos:column="14">MINBPC<pos:position pos:line="47" pos:column="20"/></name><argument_list pos:line="47" pos:column="20">(<argument><expr><name pos:line="47" pos:column="21">enc<pos:position pos:line="47" pos:column="24"/></name></expr></argument>)<pos:position pos:line="47" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="26"/></expr_stmt>
      <if pos:line="48" pos:column="7">if <condition pos:line="48" pos:column="10">(<expr><name pos:line="48" pos:column="11">ptr<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">==<pos:position pos:line="48" pos:column="17"/></operator> <name pos:line="48" pos:column="18">end<pos:position pos:line="48" pos:column="21"/></name></expr>)<pos:position pos:line="48" pos:column="22"/></condition><then pos:line="48" pos:column="22">
	<block type="pseudo"><return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">XML_TOK_PARTIAL<pos:position pos:line="49" pos:column="31"/></name></expr>;<pos:position pos:line="49" pos:column="32"/></return></block></then></if>
      <if pos:line="50" pos:column="7">if <condition pos:line="50" pos:column="10">(<expr><call><name pos:line="50" pos:column="11">CHAR_MATCHES<pos:position pos:line="50" pos:column="23"/></name><argument_list pos:line="50" pos:column="23">(<argument><expr><name pos:line="50" pos:column="24">enc<pos:position pos:line="50" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="29">ptr<pos:position pos:line="50" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="34">ASCII_GT<pos:position pos:line="50" pos:column="42"/></name></expr></argument>)<pos:position pos:line="50" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="50" pos:column="44"/></condition><then pos:line="50" pos:column="44"> <block pos:line="50" pos:column="45">{
	<expr_stmt><expr><operator pos:line="51" pos:column="9">*<pos:position pos:line="51" pos:column="10"/></operator><name pos:line="51" pos:column="10">nextTokPtr<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">ptr<pos:position pos:line="51" pos:column="26"/></name> <operator pos:line="51" pos:column="27">+<pos:position pos:line="51" pos:column="28"/></operator> <call><name pos:line="51" pos:column="29">MINBPC<pos:position pos:line="51" pos:column="35"/></name><argument_list pos:line="51" pos:column="35">(<argument><expr><name pos:line="51" pos:column="36">enc<pos:position pos:line="51" pos:column="39"/></name></expr></argument>)<pos:position pos:line="51" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="41"/></expr_stmt>
	<return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">tok<pos:position pos:line="52" pos:column="19"/></name></expr>;<pos:position pos:line="52" pos:column="20"/></return>
      }<pos:position pos:line="53" pos:column="8"/></block></then></if>
      <comment type="block" pos:line="54" pos:column="7">/* fall through */</comment>
    <default pos:line="55" pos:column="5">default:<pos:position pos:line="55" pos:column="13"/></default>
      <expr_stmt><expr><operator pos:line="56" pos:column="7">*<pos:position pos:line="56" pos:column="8"/></operator><name pos:line="56" pos:column="8">nextTokPtr<pos:position pos:line="56" pos:column="18"/></name> <operator pos:line="56" pos:column="19">=<pos:position pos:line="56" pos:column="20"/></operator> <name pos:line="56" pos:column="21">ptr<pos:position pos:line="56" pos:column="24"/></name></expr>;<pos:position pos:line="56" pos:column="25"/></expr_stmt>
      <return pos:line="57" pos:column="7">return <expr><name pos:line="57" pos:column="14">XML_TOK_INVALID<pos:position pos:line="57" pos:column="29"/></name></expr>;<pos:position pos:line="57" pos:column="30"/></return>
    }<pos:position pos:line="58" pos:column="6"/></block></switch>
  }<pos:position pos:line="59" pos:column="4"/></block></while>
  <return pos:line="60" pos:column="3">return <expr><name pos:line="60" pos:column="10">XML_TOK_PARTIAL<pos:position pos:line="60" pos:column="25"/></name></expr>;<pos:position pos:line="60" pos:column="26"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
