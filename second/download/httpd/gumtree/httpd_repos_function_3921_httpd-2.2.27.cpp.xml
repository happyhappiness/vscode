<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3921_httpd-2.2.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">do_mcast_opt<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">int<pos:position pos:line="1" pos:column="37"/></name></type> <name pos:line="1" pos:column="38">type<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">apr_socket_t<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">sock<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">apr_byte_t<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">value<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="51"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><name pos:line="4" pos:column="23">APR_SUCCESS<pos:position pos:line="4" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="35"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><call><name pos:line="6" pos:column="9">sock_is_ipv4<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">sock<pos:position pos:line="6" pos:column="26"/></name></expr></argument>)<pos:position pos:line="6" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="28"/></condition><then pos:line="6" pos:column="28"> <block pos:line="6" pos:column="29">{
        <comment type="block" pos:line="7" pos:column="9">/* For the IP_MULTICAST_* options, this must be a (char *)
         * pointer. */</comment>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><call><name pos:line="9" pos:column="13">setsockopt<pos:position pos:line="9" pos:column="23"/></name><argument_list pos:line="9" pos:column="23">(<argument><expr><name><name pos:line="9" pos:column="24">sock<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">socketdes<pos:position pos:line="9" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="41">IPPROTO_IP<pos:position pos:line="9" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="53">type<pos:position pos:line="9" pos:column="57"/></name></expr></argument>,
                       <argument><expr><operator pos:line="10" pos:column="24">(<pos:position pos:line="10" pos:column="25"/></operator><specifier pos:line="10" pos:column="25">const<pos:position pos:line="10" pos:column="30"/></specifier> <name pos:line="10" pos:column="31">void<pos:position pos:line="10" pos:column="35"/></name> <operator pos:line="10" pos:column="36">*<pos:position pos:line="10" pos:column="37"/></operator><operator pos:line="10" pos:column="37">)<pos:position pos:line="10" pos:column="38"/></operator> <operator pos:line="10" pos:column="39">&amp;<pos:position pos:line="10" pos:column="44"/></operator><name pos:line="10" pos:column="40">value<pos:position pos:line="10" pos:column="45"/></name></expr></argument>, <argument><expr><sizeof pos:line="10" pos:column="47">sizeof<argument_list pos:line="10" pos:column="53">(<argument><expr><name pos:line="10" pos:column="54">value<pos:position pos:line="10" pos:column="59"/></name></expr></argument>)<pos:position pos:line="10" pos:column="60"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call> <operator pos:line="10" pos:column="62">==<pos:position pos:line="10" pos:column="64"/></operator> <operator pos:line="10" pos:column="65">-<pos:position pos:line="10" pos:column="66"/></operator><literal type="number" pos:line="10" pos:column="66">1<pos:position pos:line="10" pos:column="67"/></literal></expr>)<pos:position pos:line="10" pos:column="68"/></condition><then pos:line="10" pos:column="68"> <block pos:line="10" pos:column="69">{
            <expr_stmt><expr><name pos:line="11" pos:column="13">rv<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">errno<pos:position pos:line="11" pos:column="23"/></name></expr>;<pos:position pos:line="11" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="12" pos:column="10"/></block></then></if>
    }<pos:position pos:line="13" pos:column="6"/></block></then>
<cpp:if pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">if<pos:position pos:line="14" pos:column="4"/></cpp:directive> <expr><name pos:line="14" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="14" pos:column="18"/></name></expr></cpp:if>
    <elseif pos:line="15" pos:column="5">else <if pos:line="15" pos:column="10">if <condition pos:line="15" pos:column="13">(<expr><call><name pos:line="15" pos:column="14">sock_is_ipv6<pos:position pos:line="15" pos:column="26"/></name><argument_list pos:line="15" pos:column="26">(<argument><expr><name pos:line="15" pos:column="27">sock<pos:position pos:line="15" pos:column="31"/></name></expr></argument>)<pos:position pos:line="15" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="15" pos:column="33"/></condition><then pos:line="15" pos:column="33"> <block pos:line="15" pos:column="34">{
        <comment type="block" pos:line="16" pos:column="9">/* For the IPV6_* options, an (int *) pointer must be used. */</comment>
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">int<pos:position pos:line="17" pos:column="12"/></name></type> <name pos:line="17" pos:column="13">ivalue<pos:position pos:line="17" pos:column="19"/></name> <init pos:line="17" pos:column="20">= <expr><name pos:line="17" pos:column="22">value<pos:position pos:line="17" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="28"/></decl_stmt>

        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">type<pos:position pos:line="19" pos:column="17"/></name> <operator pos:line="19" pos:column="18">==<pos:position pos:line="19" pos:column="20"/></operator> <name pos:line="19" pos:column="21">IP_MULTICAST_TTL<pos:position pos:line="19" pos:column="37"/></name></expr>)<pos:position pos:line="19" pos:column="38"/></condition><then pos:line="19" pos:column="38"> <block pos:line="19" pos:column="39">{
            <expr_stmt><expr><name pos:line="20" pos:column="13">type<pos:position pos:line="20" pos:column="17"/></name> <operator pos:line="20" pos:column="18">=<pos:position pos:line="20" pos:column="19"/></operator> <name pos:line="20" pos:column="20">IPV6_MULTICAST_HOPS<pos:position pos:line="20" pos:column="39"/></name></expr>;<pos:position pos:line="20" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></then>
        <elseif pos:line="22" pos:column="9">else <if pos:line="22" pos:column="14">if <condition pos:line="22" pos:column="17">(<expr><name pos:line="22" pos:column="18">type<pos:position pos:line="22" pos:column="22"/></name> <operator pos:line="22" pos:column="23">==<pos:position pos:line="22" pos:column="25"/></operator> <name pos:line="22" pos:column="26">IP_MULTICAST_LOOP<pos:position pos:line="22" pos:column="43"/></name></expr>)<pos:position pos:line="22" pos:column="44"/></condition><then pos:line="22" pos:column="44"> <block pos:line="22" pos:column="45">{
            <expr_stmt><expr><name pos:line="23" pos:column="13">type<pos:position pos:line="23" pos:column="17"/></name> <operator pos:line="23" pos:column="18">=<pos:position pos:line="23" pos:column="19"/></operator> <name pos:line="23" pos:column="20">IPV6_MULTICAST_LOOP<pos:position pos:line="23" pos:column="39"/></name></expr>;<pos:position pos:line="23" pos:column="40"/></expr_stmt>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if></elseif>
        <else pos:line="25" pos:column="9">else <block pos:line="25" pos:column="14">{
            <return pos:line="26" pos:column="13">return <expr><name pos:line="26" pos:column="20">APR_ENOTIMPL<pos:position pos:line="26" pos:column="32"/></name></expr>;<pos:position pos:line="26" pos:column="33"/></return>
        }<pos:position pos:line="27" pos:column="10"/></block></else></if>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><call><name pos:line="29" pos:column="13">setsockopt<pos:position pos:line="29" pos:column="23"/></name><argument_list pos:line="29" pos:column="23">(<argument><expr><name><name pos:line="29" pos:column="24">sock<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">-&gt;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="30">socketdes<pos:position pos:line="29" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="41">IPPROTO_IPV6<pos:position pos:line="29" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="55">type<pos:position pos:line="29" pos:column="59"/></name></expr></argument>,
                       <argument><expr><operator pos:line="30" pos:column="24">(<pos:position pos:line="30" pos:column="25"/></operator><specifier pos:line="30" pos:column="25">const<pos:position pos:line="30" pos:column="30"/></specifier> <name pos:line="30" pos:column="31">void<pos:position pos:line="30" pos:column="35"/></name> <operator pos:line="30" pos:column="36">*<pos:position pos:line="30" pos:column="37"/></operator><operator pos:line="30" pos:column="37">)<pos:position pos:line="30" pos:column="38"/></operator> <operator pos:line="30" pos:column="39">&amp;<pos:position pos:line="30" pos:column="44"/></operator><name pos:line="30" pos:column="40">ivalue<pos:position pos:line="30" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="48">sizeof<argument_list pos:line="30" pos:column="54">(<argument><expr><name pos:line="30" pos:column="55">ivalue<pos:position pos:line="30" pos:column="61"/></name></expr></argument>)<pos:position pos:line="30" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="63"/></argument_list></call> <operator pos:line="30" pos:column="64">==<pos:position pos:line="30" pos:column="66"/></operator> <operator pos:line="30" pos:column="67">-<pos:position pos:line="30" pos:column="68"/></operator><literal type="number" pos:line="30" pos:column="68">1<pos:position pos:line="30" pos:column="69"/></literal></expr>)<pos:position pos:line="30" pos:column="70"/></condition><then pos:line="30" pos:column="70"> <block pos:line="30" pos:column="71">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">rv<pos:position pos:line="31" pos:column="15"/></name> <operator pos:line="31" pos:column="16">=<pos:position pos:line="31" pos:column="17"/></operator> <name pos:line="31" pos:column="18">errno<pos:position pos:line="31" pos:column="23"/></name></expr>;<pos:position pos:line="31" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></then></if>
    }<pos:position pos:line="33" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>
    <else pos:line="35" pos:column="5">else <block pos:line="35" pos:column="10">{
        <expr_stmt><expr><name pos:line="36" pos:column="9">rv<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <name pos:line="36" pos:column="14">APR_ENOTIMPL<pos:position pos:line="36" pos:column="26"/></name></expr>;<pos:position pos:line="36" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="37" pos:column="6"/></block></else></if>

    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">rv<pos:position pos:line="39" pos:column="14"/></name></expr>;<pos:position pos:line="39" pos:column="15"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
