<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3416_httpd-2.4.12.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">ap_core_output_filter<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">ap_filter_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">f<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">apr_bucket_brigade<pos:position pos:line="1" pos:column="70"/></name> <modifier pos:line="1" pos:column="71">*<pos:position pos:line="1" pos:column="72"/></modifier></type><name pos:line="1" pos:column="72">new_bb<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">conn_rec<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">c<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name><name pos:line="3" pos:column="19">f<pos:position pos:line="3" pos:column="20"/></name><operator pos:line="3" pos:column="20">-&gt;<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="22">c<pos:position pos:line="3" pos:column="23"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">core_net_rec<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">net<pos:position pos:line="4" pos:column="22"/></name> <init pos:line="4" pos:column="23">= <expr><name><name pos:line="4" pos:column="25">f<pos:position pos:line="4" pos:column="26"/></name><operator pos:line="4" pos:column="26">-&gt;<pos:position pos:line="4" pos:column="31"/></operator><name pos:line="4" pos:column="28">ctx<pos:position pos:line="4" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">core_output_filter_ctx_t<pos:position pos:line="5" pos:column="29"/></name> <modifier pos:line="5" pos:column="30">*<pos:position pos:line="5" pos:column="31"/></modifier></type><name pos:line="5" pos:column="31">ctx<pos:position pos:line="5" pos:column="34"/></name> <init pos:line="5" pos:column="35">= <expr><name><name pos:line="5" pos:column="37">net<pos:position pos:line="5" pos:column="40"/></name><operator pos:line="5" pos:column="40">-&gt;<pos:position pos:line="5" pos:column="45"/></operator><name pos:line="5" pos:column="42">out_ctx<pos:position pos:line="5" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="50"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_bucket_brigade<pos:position pos:line="6" pos:column="23"/></name> <modifier pos:line="6" pos:column="24">*<pos:position pos:line="6" pos:column="25"/></modifier></type><name pos:line="6" pos:column="25">bb<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name pos:line="6" pos:column="30">NULL<pos:position pos:line="6" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_bucket<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">bucket<pos:position pos:line="7" pos:column="23"/></name></decl>, <modifier pos:line="7" pos:column="25">*<pos:position pos:line="7" pos:column="26"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="26">next<pos:position pos:line="7" pos:column="30"/></name></decl>, <modifier pos:line="7" pos:column="32">*<pos:position pos:line="7" pos:column="33"/></modifier><decl><type ref="prev"/><name pos:line="7" pos:column="33">flush_upto<pos:position pos:line="7" pos:column="43"/></name> <init pos:line="7" pos:column="44">= <expr><name pos:line="7" pos:column="46">NULL<pos:position pos:line="7" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="51"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">bytes_in_brigade<pos:position pos:line="8" pos:column="32"/></name></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="34">non_file_bytes_in_brigade<pos:position pos:line="8" pos:column="59"/></name></decl>;<pos:position pos:line="8" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">eor_buckets_in_brigade<pos:position pos:line="9" pos:column="31"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="33">morphing_bucket_in_brigade<pos:position pos:line="9" pos:column="59"/></name></decl>;<pos:position pos:line="9" pos:column="60"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_status_t<pos:position pos:line="10" pos:column="17"/></name></type> <name pos:line="10" pos:column="18">rv<pos:position pos:line="10" pos:column="20"/></name></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Fail quickly if the connection has already been aborted. */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">c<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">aborted<pos:position pos:line="13" pos:column="19"/></name></name></expr>)<pos:position pos:line="13" pos:column="20"/></condition><then pos:line="13" pos:column="20"> <block pos:line="13" pos:column="21">{
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">new_bb<pos:position pos:line="14" pos:column="19"/></name> <operator pos:line="14" pos:column="20">!=<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="23">NULL<pos:position pos:line="14" pos:column="27"/></name></expr>)<pos:position pos:line="14" pos:column="28"/></condition><then pos:line="14" pos:column="28"> <block pos:line="14" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">apr_brigade_cleanup<pos:position pos:line="15" pos:column="32"/></name><argument_list pos:line="15" pos:column="32">(<argument><expr><name pos:line="15" pos:column="33">new_bb<pos:position pos:line="15" pos:column="39"/></name></expr></argument>)<pos:position pos:line="15" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
        <return pos:line="17" pos:column="9">return <expr><name pos:line="17" pos:column="16">APR_ECONNABORTED<pos:position pos:line="17" pos:column="32"/></name></expr>;<pos:position pos:line="17" pos:column="33"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name pos:line="20" pos:column="9">ctx<pos:position pos:line="20" pos:column="12"/></name> <operator pos:line="20" pos:column="13">==<pos:position pos:line="20" pos:column="15"/></operator> <name pos:line="20" pos:column="16">NULL<pos:position pos:line="20" pos:column="20"/></name></expr>)<pos:position pos:line="20" pos:column="21"/></condition><then pos:line="20" pos:column="21"> <block pos:line="20" pos:column="22">{
        <expr_stmt><expr><name pos:line="21" pos:column="9">ctx<pos:position pos:line="21" pos:column="12"/></name> <operator pos:line="21" pos:column="13">=<pos:position pos:line="21" pos:column="14"/></operator> <call><name pos:line="21" pos:column="15">apr_pcalloc<pos:position pos:line="21" pos:column="26"/></name><argument_list pos:line="21" pos:column="26">(<argument><expr><name><name pos:line="21" pos:column="27">c<pos:position pos:line="21" pos:column="28"/></name><operator pos:line="21" pos:column="28">-&gt;<pos:position pos:line="21" pos:column="33"/></operator><name pos:line="21" pos:column="30">pool<pos:position pos:line="21" pos:column="34"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="21" pos:column="36">sizeof<argument_list pos:line="21" pos:column="42">(<argument><expr><operator pos:line="21" pos:column="43">*<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="44">ctx<pos:position pos:line="21" pos:column="47"/></name></expr></argument>)<pos:position pos:line="21" pos:column="48"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="21" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="50"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="22" pos:column="9">net<pos:position pos:line="22" pos:column="12"/></name><operator pos:line="22" pos:column="12">-&gt;<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="14">out_ctx<pos:position pos:line="22" pos:column="21"/></name></name> <operator pos:line="22" pos:column="22">=<pos:position pos:line="22" pos:column="23"/></operator> <operator pos:line="22" pos:column="24">(<pos:position pos:line="22" pos:column="25"/></operator><name pos:line="22" pos:column="25">core_output_filter_ctx_t<pos:position pos:line="22" pos:column="49"/></name> <operator pos:line="22" pos:column="50">*<pos:position pos:line="22" pos:column="51"/></operator><operator pos:line="22" pos:column="51">)<pos:position pos:line="22" pos:column="52"/></operator><name pos:line="22" pos:column="52">ctx<pos:position pos:line="22" pos:column="55"/></name></expr>;<pos:position pos:line="22" pos:column="56"/></expr_stmt>
        <comment type="block" pos:line="23" pos:column="9">/*
         * Need to create tmp brigade with correct lifetime. Passing
         * NULL to apr_brigade_split_ex would result in a brigade
         * allocated from bb-&gt;pool which might be wrong.
         */</comment>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">ctx<pos:position pos:line="28" pos:column="12"/></name><operator pos:line="28" pos:column="12">-&gt;<pos:position pos:line="28" pos:column="17"/></operator><name pos:line="28" pos:column="14">tmp_flush_bb<pos:position pos:line="28" pos:column="26"/></name></name> <operator pos:line="28" pos:column="27">=<pos:position pos:line="28" pos:column="28"/></operator> <call><name pos:line="28" pos:column="29">apr_brigade_create<pos:position pos:line="28" pos:column="47"/></name><argument_list pos:line="28" pos:column="47">(<argument><expr><name><name pos:line="28" pos:column="48">c<pos:position pos:line="28" pos:column="49"/></name><operator pos:line="28" pos:column="49">-&gt;<pos:position pos:line="28" pos:column="54"/></operator><name pos:line="28" pos:column="51">pool<pos:position pos:line="28" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="57">c<pos:position pos:line="28" pos:column="58"/></name><operator pos:line="28" pos:column="58">-&gt;<pos:position pos:line="28" pos:column="63"/></operator><name pos:line="28" pos:column="60">bucket_alloc<pos:position pos:line="28" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="74"/></expr_stmt>
        <comment type="block" pos:line="29" pos:column="9">/* same for buffered_bb and ap_save_brigade */</comment>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">ctx<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">buffered_bb<pos:position pos:line="30" pos:column="25"/></name></name> <operator pos:line="30" pos:column="26">=<pos:position pos:line="30" pos:column="27"/></operator> <call><name pos:line="30" pos:column="28">apr_brigade_create<pos:position pos:line="30" pos:column="46"/></name><argument_list pos:line="30" pos:column="46">(<argument><expr><name><name pos:line="30" pos:column="47">c<pos:position pos:line="30" pos:column="48"/></name><operator pos:line="30" pos:column="48">-&gt;<pos:position pos:line="30" pos:column="53"/></operator><name pos:line="30" pos:column="50">pool<pos:position pos:line="30" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="56">c<pos:position pos:line="30" pos:column="57"/></name><operator pos:line="30" pos:column="57">-&gt;<pos:position pos:line="30" pos:column="62"/></operator><name pos:line="30" pos:column="59">bucket_alloc<pos:position pos:line="30" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <if pos:line="33" pos:column="5">if <condition pos:line="33" pos:column="8">(<expr><name pos:line="33" pos:column="9">new_bb<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">!=<pos:position pos:line="33" pos:column="18"/></operator> <name pos:line="33" pos:column="19">NULL<pos:position pos:line="33" pos:column="23"/></name></expr>)<pos:position pos:line="33" pos:column="24"/></condition><then pos:line="33" pos:column="24">
        <block type="pseudo"><expr_stmt><expr><name pos:line="34" pos:column="9">bb<pos:position pos:line="34" pos:column="11"/></name> <operator pos:line="34" pos:column="12">=<pos:position pos:line="34" pos:column="13"/></operator> <name pos:line="34" pos:column="14">new_bb<pos:position pos:line="34" pos:column="20"/></name></expr>;<pos:position pos:line="34" pos:column="21"/></expr_stmt></block></then></if>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">(<pos:position pos:line="36" pos:column="10"/></operator><name><name pos:line="36" pos:column="10">ctx<pos:position pos:line="36" pos:column="13"/></name><operator pos:line="36" pos:column="13">-&gt;<pos:position pos:line="36" pos:column="18"/></operator><name pos:line="36" pos:column="15">buffered_bb<pos:position pos:line="36" pos:column="26"/></name></name> <operator pos:line="36" pos:column="27">!=<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">NULL<pos:position pos:line="36" pos:column="34"/></name><operator pos:line="36" pos:column="34">)<pos:position pos:line="36" pos:column="35"/></operator> <operator pos:line="36" pos:column="36">&amp;&amp;<pos:position pos:line="36" pos:column="46"/></operator>
        <operator pos:line="37" pos:column="9">!<pos:position pos:line="37" pos:column="10"/></operator><call><name pos:line="37" pos:column="10">APR_BRIGADE_EMPTY<pos:position pos:line="37" pos:column="27"/></name><argument_list pos:line="37" pos:column="27">(<argument><expr><name><name pos:line="37" pos:column="28">ctx<pos:position pos:line="37" pos:column="31"/></name><operator pos:line="37" pos:column="31">-&gt;<pos:position pos:line="37" pos:column="36"/></operator><name pos:line="37" pos:column="33">buffered_bb<pos:position pos:line="37" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="37" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="46"/></condition><then pos:line="37" pos:column="46"> <block pos:line="37" pos:column="47">{
        <if pos:line="38" pos:column="9">if <condition pos:line="38" pos:column="12">(<expr><name pos:line="38" pos:column="13">new_bb<pos:position pos:line="38" pos:column="19"/></name> <operator pos:line="38" pos:column="20">!=<pos:position pos:line="38" pos:column="22"/></operator> <name pos:line="38" pos:column="23">NULL<pos:position pos:line="38" pos:column="27"/></name></expr>)<pos:position pos:line="38" pos:column="28"/></condition><then pos:line="38" pos:column="28"> <block pos:line="38" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="39" pos:column="13">APR_BRIGADE_PREPEND<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><name pos:line="39" pos:column="33">bb<pos:position pos:line="39" pos:column="35"/></name></expr></argument>, <argument><expr><name><name pos:line="39" pos:column="37">ctx<pos:position pos:line="39" pos:column="40"/></name><operator pos:line="39" pos:column="40">-&gt;<pos:position pos:line="39" pos:column="45"/></operator><name pos:line="39" pos:column="42">buffered_bb<pos:position pos:line="39" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="40" pos:column="10"/></block></then>
        <else pos:line="41" pos:column="9">else <block pos:line="41" pos:column="14">{
            <expr_stmt><expr><name pos:line="42" pos:column="13">bb<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <name><name pos:line="42" pos:column="18">ctx<pos:position pos:line="42" pos:column="21"/></name><operator pos:line="42" pos:column="21">-&gt;<pos:position pos:line="42" pos:column="26"/></operator><name pos:line="42" pos:column="23">buffered_bb<pos:position pos:line="42" pos:column="34"/></name></name></expr>;<pos:position pos:line="42" pos:column="35"/></expr_stmt>
        }<pos:position pos:line="43" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name><name pos:line="44" pos:column="9">c<pos:position pos:line="44" pos:column="10"/></name><operator pos:line="44" pos:column="10">-&gt;<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="12">data_in_output_filters<pos:position pos:line="44" pos:column="34"/></name></name> <operator pos:line="44" pos:column="35">=<pos:position pos:line="44" pos:column="36"/></operator> <literal type="number" pos:line="44" pos:column="37">0<pos:position pos:line="44" pos:column="38"/></literal></expr>;<pos:position pos:line="44" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="45" pos:column="6"/></block></then>
    <elseif pos:line="46" pos:column="5">else <if pos:line="46" pos:column="10">if <condition pos:line="46" pos:column="13">(<expr><name pos:line="46" pos:column="14">new_bb<pos:position pos:line="46" pos:column="20"/></name> <operator pos:line="46" pos:column="21">==<pos:position pos:line="46" pos:column="23"/></operator> <name pos:line="46" pos:column="24">NULL<pos:position pos:line="46" pos:column="28"/></name></expr>)<pos:position pos:line="46" pos:column="29"/></condition><then pos:line="46" pos:column="29"> <block pos:line="46" pos:column="30">{
        <return pos:line="47" pos:column="9">return <expr><name pos:line="47" pos:column="16">APR_SUCCESS<pos:position pos:line="47" pos:column="27"/></name></expr>;<pos:position pos:line="47" pos:column="28"/></return>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="50" pos:column="5">/* Scan through the brigade and decide whether to attempt a write,
     * and how much to write, based on the following rules:
     *
     *  1) The new_bb is null: Do a nonblocking write of as much as
     *     possible: do a nonblocking write of as much data as possible,
     *     then save the rest in ctx-&gt;buffered_bb.  (If new_bb == NULL,
     *     it probably means that the MPM is doing asynchronous write
     *     completion and has just determined that this connection
     *     is writable.)
     *
     *  2) Determine if and up to which bucket we need to do a blocking
     *     write:
     *
     *  a) The brigade contains a flush bucket: Do a blocking write
     *     of everything up that point.
     *
     *  b) The request is in CONN_STATE_HANDLER state, and the brigade
     *     contains at least THRESHOLD_MAX_BUFFER bytes in non-file
     *     buckets: Do blocking writes until the amount of data in the
     *     buffer is less than THRESHOLD_MAX_BUFFER.  (The point of this
     *     rule is to provide flow control, in case a handler is
     *     streaming out lots of data faster than the data can be
     *     sent to the client.)
     *
     *  c) The request is in CONN_STATE_HANDLER state, and the brigade
     *     contains at least MAX_REQUESTS_IN_PIPELINE EOR buckets:
     *     Do blocking writes until less than MAX_REQUESTS_IN_PIPELINE EOR
     *     buckets are left. (The point of this rule is to prevent too many
     *     FDs being kept open by pipelined requests, possibly allowing a
     *     DoS).
     *
     *  d) The brigade contains a morphing bucket: If there was no other
     *     reason to do a blocking write yet, try reading the bucket. If its
     *     contents fit into memory before THRESHOLD_MAX_BUFFER is reached,
     *     everything is fine. Otherwise we need to do a blocking write the
     *     up to and including the morphing bucket, because ap_save_brigade()
     *     would read the whole bucket into memory later on.
     *
     *  3) Actually do the blocking write up to the last bucket determined
     *     by rules 2a-d. The point of doing only one flush is to make as
     *     few calls to writev() as possible.
     *
     *  4) If the brigade contains at least THRESHOLD_MIN_WRITE
     *     bytes: Do a nonblocking write of as much data as possible,
     *     then save the rest in ctx-&gt;buffered_bb.
     */</comment>

    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><name pos:line="97" pos:column="9">new_bb<pos:position pos:line="97" pos:column="15"/></name> <operator pos:line="97" pos:column="16">==<pos:position pos:line="97" pos:column="18"/></operator> <name pos:line="97" pos:column="19">NULL<pos:position pos:line="97" pos:column="23"/></name></expr>)<pos:position pos:line="97" pos:column="24"/></condition><then pos:line="97" pos:column="24"> <block pos:line="97" pos:column="25">{
        <expr_stmt><expr><name pos:line="98" pos:column="9">rv<pos:position pos:line="98" pos:column="11"/></name> <operator pos:line="98" pos:column="12">=<pos:position pos:line="98" pos:column="13"/></operator> <call><name pos:line="98" pos:column="14">send_brigade_nonblocking<pos:position pos:line="98" pos:column="38"/></name><argument_list pos:line="98" pos:column="38">(<argument><expr><name><name pos:line="98" pos:column="39">net<pos:position pos:line="98" pos:column="42"/></name><operator pos:line="98" pos:column="42">-&gt;<pos:position pos:line="98" pos:column="47"/></operator><name pos:line="98" pos:column="44">client_socket<pos:position pos:line="98" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="59">bb<pos:position pos:line="98" pos:column="61"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="99" pos:column="39">&amp;<pos:position pos:line="99" pos:column="44"/></operator><operator pos:line="99" pos:column="40">(<pos:position pos:line="99" pos:column="41"/></operator><name><name pos:line="99" pos:column="41">ctx<pos:position pos:line="99" pos:column="44"/></name><operator pos:line="99" pos:column="44">-&gt;<pos:position pos:line="99" pos:column="49"/></operator><name pos:line="99" pos:column="46">bytes_written<pos:position pos:line="99" pos:column="59"/></name></name><operator pos:line="99" pos:column="59">)<pos:position pos:line="99" pos:column="60"/></operator></expr></argument>, <argument><expr><name pos:line="99" pos:column="62">c<pos:position pos:line="99" pos:column="63"/></name></expr></argument>)<pos:position pos:line="99" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="65"/></expr_stmt>
        <if pos:line="100" pos:column="9">if <condition pos:line="100" pos:column="12">(<expr><call><name pos:line="100" pos:column="13">APR_STATUS_IS_EAGAIN<pos:position pos:line="100" pos:column="33"/></name><argument_list pos:line="100" pos:column="33">(<argument><expr><name pos:line="100" pos:column="34">rv<pos:position pos:line="100" pos:column="36"/></name></expr></argument>)<pos:position pos:line="100" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="100" pos:column="38"/></condition><then pos:line="100" pos:column="38"> <block pos:line="100" pos:column="39">{
            <expr_stmt><expr><name pos:line="101" pos:column="13">rv<pos:position pos:line="101" pos:column="15"/></name> <operator pos:line="101" pos:column="16">=<pos:position pos:line="101" pos:column="17"/></operator> <name pos:line="101" pos:column="18">APR_SUCCESS<pos:position pos:line="101" pos:column="29"/></name></expr>;<pos:position pos:line="101" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="102" pos:column="10"/></block></then>
        <elseif pos:line="103" pos:column="9">else <if pos:line="103" pos:column="14">if <condition pos:line="103" pos:column="17">(<expr><name pos:line="103" pos:column="18">rv<pos:position pos:line="103" pos:column="20"/></name> <operator pos:line="103" pos:column="21">!=<pos:position pos:line="103" pos:column="23"/></operator> <name pos:line="103" pos:column="24">APR_SUCCESS<pos:position pos:line="103" pos:column="35"/></name></expr>)<pos:position pos:line="103" pos:column="36"/></condition><then pos:line="103" pos:column="36"> <block pos:line="103" pos:column="37">{
            <comment type="block" pos:line="104" pos:column="13">/* The client has aborted the connection */</comment>
            <expr_stmt><expr><call><name pos:line="105" pos:column="13">ap_log_cerror<pos:position pos:line="105" pos:column="26"/></name><argument_list pos:line="105" pos:column="26">(<argument><expr><name pos:line="105" pos:column="27">APLOG_MARK<pos:position pos:line="105" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="39">APLOG_TRACE1<pos:position pos:line="105" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="53">rv<pos:position pos:line="105" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="105" pos:column="57">c<pos:position pos:line="105" pos:column="58"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="106" pos:column="27">"core_output_filter: writing data to the network"<pos:position pos:line="106" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="78"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="107" pos:column="13">c<pos:position pos:line="107" pos:column="14"/></name><operator pos:line="107" pos:column="14">-&gt;<pos:position pos:line="107" pos:column="19"/></operator><name pos:line="107" pos:column="16">aborted<pos:position pos:line="107" pos:column="23"/></name></name> <operator pos:line="107" pos:column="24">=<pos:position pos:line="107" pos:column="25"/></operator> <literal type="number" pos:line="107" pos:column="26">1<pos:position pos:line="107" pos:column="27"/></literal></expr>;<pos:position pos:line="107" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="108" pos:column="10"/></block></then></if></elseif></if>
        <expr_stmt><expr><call><name pos:line="109" pos:column="9">setaside_remaining_output<pos:position pos:line="109" pos:column="34"/></name><argument_list pos:line="109" pos:column="34">(<argument><expr><name pos:line="109" pos:column="35">f<pos:position pos:line="109" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="38">ctx<pos:position pos:line="109" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="43">bb<pos:position pos:line="109" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="47">c<pos:position pos:line="109" pos:column="48"/></name></expr></argument>)<pos:position pos:line="109" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="50"/></expr_stmt>
        <return pos:line="110" pos:column="9">return <expr><name pos:line="110" pos:column="16">rv<pos:position pos:line="110" pos:column="18"/></name></expr>;<pos:position pos:line="110" pos:column="19"/></return>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="113" pos:column="5">bytes_in_brigade<pos:position pos:line="113" pos:column="21"/></name> <operator pos:line="113" pos:column="22">=<pos:position pos:line="113" pos:column="23"/></operator> <literal type="number" pos:line="113" pos:column="24">0<pos:position pos:line="113" pos:column="25"/></literal></expr>;<pos:position pos:line="113" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="114" pos:column="5">non_file_bytes_in_brigade<pos:position pos:line="114" pos:column="30"/></name> <operator pos:line="114" pos:column="31">=<pos:position pos:line="114" pos:column="32"/></operator> <literal type="number" pos:line="114" pos:column="33">0<pos:position pos:line="114" pos:column="34"/></literal></expr>;<pos:position pos:line="114" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name pos:line="115" pos:column="5">eor_buckets_in_brigade<pos:position pos:line="115" pos:column="27"/></name> <operator pos:line="115" pos:column="28">=<pos:position pos:line="115" pos:column="29"/></operator> <literal type="number" pos:line="115" pos:column="30">0<pos:position pos:line="115" pos:column="31"/></literal></expr>;<pos:position pos:line="115" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="116" pos:column="5">morphing_bucket_in_brigade<pos:position pos:line="116" pos:column="31"/></name> <operator pos:line="116" pos:column="32">=<pos:position pos:line="116" pos:column="33"/></operator> <literal type="number" pos:line="116" pos:column="34">0<pos:position pos:line="116" pos:column="35"/></literal></expr>;<pos:position pos:line="116" pos:column="36"/></expr_stmt>

    <for pos:line="118" pos:column="5">for <control pos:line="118" pos:column="9">(<init><expr><name pos:line="118" pos:column="10">bucket<pos:position pos:line="118" pos:column="16"/></name> <operator pos:line="118" pos:column="17">=<pos:position pos:line="118" pos:column="18"/></operator> <call><name pos:line="118" pos:column="19">APR_BRIGADE_FIRST<pos:position pos:line="118" pos:column="36"/></name><argument_list pos:line="118" pos:column="36">(<argument><expr><name pos:line="118" pos:column="37">bb<pos:position pos:line="118" pos:column="39"/></name></expr></argument>)<pos:position pos:line="118" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="41"/></init> <condition><expr><name pos:line="118" pos:column="42">bucket<pos:position pos:line="118" pos:column="48"/></name> <operator pos:line="118" pos:column="49">!=<pos:position pos:line="118" pos:column="51"/></operator> <call><name pos:line="118" pos:column="52">APR_BRIGADE_SENTINEL<pos:position pos:line="118" pos:column="72"/></name><argument_list pos:line="118" pos:column="72">(<argument><expr><name pos:line="118" pos:column="73">bb<pos:position pos:line="118" pos:column="75"/></name></expr></argument>)<pos:position pos:line="118" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="118" pos:column="77"/></condition>
         <incr><expr><name pos:line="119" pos:column="10">bucket<pos:position pos:line="119" pos:column="16"/></name> <operator pos:line="119" pos:column="17">=<pos:position pos:line="119" pos:column="18"/></operator> <name pos:line="119" pos:column="19">next<pos:position pos:line="119" pos:column="23"/></name></expr></incr>)<pos:position pos:line="119" pos:column="24"/></control> <block pos:line="119" pos:column="25">{
        <expr_stmt><expr><name pos:line="120" pos:column="9">next<pos:position pos:line="120" pos:column="13"/></name> <operator pos:line="120" pos:column="14">=<pos:position pos:line="120" pos:column="15"/></operator> <call><name pos:line="120" pos:column="16">APR_BUCKET_NEXT<pos:position pos:line="120" pos:column="31"/></name><argument_list pos:line="120" pos:column="31">(<argument><expr><name pos:line="120" pos:column="32">bucket<pos:position pos:line="120" pos:column="38"/></name></expr></argument>)<pos:position pos:line="120" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="40"/></expr_stmt>

        <if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><operator pos:line="122" pos:column="13">!<pos:position pos:line="122" pos:column="14"/></operator><call><name pos:line="122" pos:column="14">APR_BUCKET_IS_METADATA<pos:position pos:line="122" pos:column="36"/></name><argument_list pos:line="122" pos:column="36">(<argument><expr><name pos:line="122" pos:column="37">bucket<pos:position pos:line="122" pos:column="43"/></name></expr></argument>)<pos:position pos:line="122" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="45"/></condition><then pos:line="122" pos:column="45"> <block pos:line="122" pos:column="46">{
            <if pos:line="123" pos:column="13">if <condition pos:line="123" pos:column="16">(<expr><name><name pos:line="123" pos:column="17">bucket<pos:position pos:line="123" pos:column="23"/></name><operator pos:line="123" pos:column="23">-&gt;<pos:position pos:line="123" pos:column="28"/></operator><name pos:line="123" pos:column="25">length<pos:position pos:line="123" pos:column="31"/></name></name> <operator pos:line="123" pos:column="32">==<pos:position pos:line="123" pos:column="34"/></operator> <operator pos:line="123" pos:column="35">(<pos:position pos:line="123" pos:column="36"/></operator><name pos:line="123" pos:column="36">apr_size_t<pos:position pos:line="123" pos:column="46"/></name><operator pos:line="123" pos:column="46">)<pos:position pos:line="123" pos:column="47"/></operator><operator pos:line="123" pos:column="47">-<pos:position pos:line="123" pos:column="48"/></operator><literal type="number" pos:line="123" pos:column="48">1<pos:position pos:line="123" pos:column="49"/></literal></expr>)<pos:position pos:line="123" pos:column="50"/></condition><then pos:line="123" pos:column="50"> <block pos:line="123" pos:column="51">{
                <comment type="block" pos:line="124" pos:column="17">/*
                 * A setaside of morphing buckets would read everything into
                 * memory. Instead, we will flush everything up to and
                 * including this bucket.
                 */</comment>
                <expr_stmt><expr><name pos:line="129" pos:column="17">morphing_bucket_in_brigade<pos:position pos:line="129" pos:column="43"/></name> <operator pos:line="129" pos:column="44">=<pos:position pos:line="129" pos:column="45"/></operator> <literal type="number" pos:line="129" pos:column="46">1<pos:position pos:line="129" pos:column="47"/></literal></expr>;<pos:position pos:line="129" pos:column="48"/></expr_stmt>
            }<pos:position pos:line="130" pos:column="14"/></block></then>
            <else pos:line="131" pos:column="13">else <block pos:line="131" pos:column="18">{
                <expr_stmt><expr><name pos:line="132" pos:column="17">bytes_in_brigade<pos:position pos:line="132" pos:column="33"/></name> <operator pos:line="132" pos:column="34">+=<pos:position pos:line="132" pos:column="36"/></operator> <name><name pos:line="132" pos:column="37">bucket<pos:position pos:line="132" pos:column="43"/></name><operator pos:line="132" pos:column="43">-&gt;<pos:position pos:line="132" pos:column="48"/></operator><name pos:line="132" pos:column="45">length<pos:position pos:line="132" pos:column="51"/></name></name></expr>;<pos:position pos:line="132" pos:column="52"/></expr_stmt>
                <if pos:line="133" pos:column="17">if <condition pos:line="133" pos:column="20">(<expr><operator pos:line="133" pos:column="21">!<pos:position pos:line="133" pos:column="22"/></operator><call><name pos:line="133" pos:column="22">APR_BUCKET_IS_FILE<pos:position pos:line="133" pos:column="40"/></name><argument_list pos:line="133" pos:column="40">(<argument><expr><name pos:line="133" pos:column="41">bucket<pos:position pos:line="133" pos:column="47"/></name></expr></argument>)<pos:position pos:line="133" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="49"/></condition><then pos:line="133" pos:column="49">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="134" pos:column="21">non_file_bytes_in_brigade<pos:position pos:line="134" pos:column="46"/></name> <operator pos:line="134" pos:column="47">+=<pos:position pos:line="134" pos:column="49"/></operator> <name><name pos:line="134" pos:column="50">bucket<pos:position pos:line="134" pos:column="56"/></name><operator pos:line="134" pos:column="56">-&gt;<pos:position pos:line="134" pos:column="61"/></operator><name pos:line="134" pos:column="58">length<pos:position pos:line="134" pos:column="64"/></name></name></expr>;<pos:position pos:line="134" pos:column="65"/></expr_stmt></block></then></if>
            }<pos:position pos:line="135" pos:column="14"/></block></else></if>
        }<pos:position pos:line="136" pos:column="10"/></block></then>
        <elseif pos:line="137" pos:column="9">else <if pos:line="137" pos:column="14">if <condition pos:line="137" pos:column="17">(<expr><call><name pos:line="137" pos:column="18">AP_BUCKET_IS_EOR<pos:position pos:line="137" pos:column="34"/></name><argument_list pos:line="137" pos:column="34">(<argument><expr><name pos:line="137" pos:column="35">bucket<pos:position pos:line="137" pos:column="41"/></name></expr></argument>)<pos:position pos:line="137" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="137" pos:column="43"/></condition><then pos:line="137" pos:column="43"> <block pos:line="137" pos:column="44">{
            <expr_stmt><expr><name pos:line="138" pos:column="13">eor_buckets_in_brigade<pos:position pos:line="138" pos:column="35"/></name><operator pos:line="138" pos:column="35">++<pos:position pos:line="138" pos:column="37"/></operator></expr>;<pos:position pos:line="138" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="139" pos:column="10"/></block></then></if></elseif></if>

        <if pos:line="141" pos:column="9">if <condition pos:line="141" pos:column="12">(<expr><call><name pos:line="141" pos:column="13">APR_BUCKET_IS_FLUSH<pos:position pos:line="141" pos:column="32"/></name><argument_list pos:line="141" pos:column="32">(<argument><expr><name pos:line="141" pos:column="33">bucket<pos:position pos:line="141" pos:column="39"/></name></expr></argument>)<pos:position pos:line="141" pos:column="40"/></argument_list></call>
            <operator pos:line="142" pos:column="13">||<pos:position pos:line="142" pos:column="15"/></operator> <name pos:line="142" pos:column="16">non_file_bytes_in_brigade<pos:position pos:line="142" pos:column="41"/></name> <operator pos:line="142" pos:column="42">&gt;=<pos:position pos:line="142" pos:column="47"/></operator> <name pos:line="142" pos:column="45">THRESHOLD_MAX_BUFFER<pos:position pos:line="142" pos:column="65"/></name>
            <operator pos:line="143" pos:column="13">||<pos:position pos:line="143" pos:column="15"/></operator> <name pos:line="143" pos:column="16">morphing_bucket_in_brigade<pos:position pos:line="143" pos:column="42"/></name>
            <operator pos:line="144" pos:column="13">||<pos:position pos:line="144" pos:column="15"/></operator> <name pos:line="144" pos:column="16">eor_buckets_in_brigade<pos:position pos:line="144" pos:column="38"/></name> <operator pos:line="144" pos:column="39">&gt;<pos:position pos:line="144" pos:column="43"/></operator> <name pos:line="144" pos:column="41">MAX_REQUESTS_IN_PIPELINE<pos:position pos:line="144" pos:column="65"/></name></expr>)<pos:position pos:line="144" pos:column="66"/></condition><then pos:line="144" pos:column="66"> <block pos:line="144" pos:column="67">{
            <comment type="block" pos:line="145" pos:column="13">/* this segment of the brigade MUST be sent before returning. */</comment>

            <if pos:line="147" pos:column="13">if <condition pos:line="147" pos:column="16">(<expr><call><name pos:line="147" pos:column="17">APLOGctrace6<pos:position pos:line="147" pos:column="29"/></name><argument_list pos:line="147" pos:column="29">(<argument><expr><name pos:line="147" pos:column="30">c<pos:position pos:line="147" pos:column="31"/></name></expr></argument>)<pos:position pos:line="147" pos:column="32"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="33"/></condition><then pos:line="147" pos:column="33"> <block pos:line="147" pos:column="34">{
                <decl_stmt><decl><type><name pos:line="148" pos:column="17">char<pos:position pos:line="148" pos:column="21"/></name> <modifier pos:line="148" pos:column="22">*<pos:position pos:line="148" pos:column="23"/></modifier></type><name pos:line="148" pos:column="23">reason<pos:position pos:line="148" pos:column="29"/></name> <init pos:line="148" pos:column="30">= <expr><ternary><condition><expr><call><name pos:line="148" pos:column="32">APR_BUCKET_IS_FLUSH<pos:position pos:line="148" pos:column="51"/></name><argument_list pos:line="148" pos:column="51">(<argument><expr><name pos:line="148" pos:column="52">bucket<pos:position pos:line="148" pos:column="58"/></name></expr></argument>)<pos:position pos:line="148" pos:column="59"/></argument_list></call></expr> ?<pos:position pos:line="148" pos:column="61"/></condition><then pos:line="148" pos:column="61">
                               <expr><literal type="string" pos:line="149" pos:column="32">"FLUSH bucket"<pos:position pos:line="149" pos:column="46"/></literal></expr> <pos:position pos:line="149" pos:column="47"/></then><else pos:line="149" pos:column="47">:
                               <expr><ternary><condition><expr><operator pos:line="150" pos:column="32">(<pos:position pos:line="150" pos:column="33"/></operator><name pos:line="150" pos:column="33">non_file_bytes_in_brigade<pos:position pos:line="150" pos:column="58"/></name> <operator pos:line="150" pos:column="59">&gt;=<pos:position pos:line="150" pos:column="64"/></operator> <name pos:line="150" pos:column="62">THRESHOLD_MAX_BUFFER<pos:position pos:line="150" pos:column="82"/></name><operator pos:line="150" pos:column="82">)<pos:position pos:line="150" pos:column="83"/></operator></expr> ?<pos:position pos:line="150" pos:column="85"/></condition><then pos:line="150" pos:column="85">
                               <expr><literal type="string" pos:line="151" pos:column="32">"THRESHOLD_MAX_BUFFER"<pos:position pos:line="151" pos:column="54"/></literal></expr> <pos:position pos:line="151" pos:column="55"/></then><else pos:line="151" pos:column="55">:
                               <expr><ternary><condition><expr><name pos:line="152" pos:column="32">morphing_bucket_in_brigade<pos:position pos:line="152" pos:column="58"/></name></expr> ?<pos:position pos:line="152" pos:column="60"/></condition><then pos:line="152" pos:column="60"> <expr><literal type="string" pos:line="152" pos:column="61">"morphing bucket"<pos:position pos:line="152" pos:column="78"/></literal></expr> <pos:position pos:line="152" pos:column="79"/></then><else pos:line="152" pos:column="79">:
                               <expr><literal type="string" pos:line="153" pos:column="32">"MAX_REQUESTS_IN_PIPELINE"<pos:position pos:line="153" pos:column="58"/></literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;<pos:position pos:line="153" pos:column="59"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="154" pos:column="17">ap_log_cerror<pos:position pos:line="154" pos:column="30"/></name><argument_list pos:line="154" pos:column="30">(<argument><expr><name pos:line="154" pos:column="31">APLOG_MARK<pos:position pos:line="154" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="43">APLOG_TRACE6<pos:position pos:line="154" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="154" pos:column="57">0<pos:position pos:line="154" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="154" pos:column="60">c<pos:position pos:line="154" pos:column="61"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="155" pos:column="31">"core_output_filter: flushing because of %s"<pos:position pos:line="155" pos:column="75"/></literal></expr></argument>,
                              <argument><expr><name pos:line="156" pos:column="31">reason<pos:position pos:line="156" pos:column="37"/></name></expr></argument>)<pos:position pos:line="156" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="156" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="157" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="158" pos:column="13">/*
             * Defer the actual blocking write to avoid doing many writes.
             */</comment>
            <expr_stmt><expr><name pos:line="161" pos:column="13">flush_upto<pos:position pos:line="161" pos:column="23"/></name> <operator pos:line="161" pos:column="24">=<pos:position pos:line="161" pos:column="25"/></operator> <name pos:line="161" pos:column="26">next<pos:position pos:line="161" pos:column="30"/></name></expr>;<pos:position pos:line="161" pos:column="31"/></expr_stmt>

            <expr_stmt><expr><name pos:line="163" pos:column="13">bytes_in_brigade<pos:position pos:line="163" pos:column="29"/></name> <operator pos:line="163" pos:column="30">=<pos:position pos:line="163" pos:column="31"/></operator> <literal type="number" pos:line="163" pos:column="32">0<pos:position pos:line="163" pos:column="33"/></literal></expr>;<pos:position pos:line="163" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name pos:line="164" pos:column="13">non_file_bytes_in_brigade<pos:position pos:line="164" pos:column="38"/></name> <operator pos:line="164" pos:column="39">=<pos:position pos:line="164" pos:column="40"/></operator> <literal type="number" pos:line="164" pos:column="41">0<pos:position pos:line="164" pos:column="42"/></literal></expr>;<pos:position pos:line="164" pos:column="43"/></expr_stmt>
            <expr_stmt><expr><name pos:line="165" pos:column="13">eor_buckets_in_brigade<pos:position pos:line="165" pos:column="35"/></name> <operator pos:line="165" pos:column="36">=<pos:position pos:line="165" pos:column="37"/></operator> <literal type="number" pos:line="165" pos:column="38">0<pos:position pos:line="165" pos:column="39"/></literal></expr>;<pos:position pos:line="165" pos:column="40"/></expr_stmt>
            <expr_stmt><expr><name pos:line="166" pos:column="13">morphing_bucket_in_brigade<pos:position pos:line="166" pos:column="39"/></name> <operator pos:line="166" pos:column="40">=<pos:position pos:line="166" pos:column="41"/></operator> <literal type="number" pos:line="166" pos:column="42">0<pos:position pos:line="166" pos:column="43"/></literal></expr>;<pos:position pos:line="166" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="167" pos:column="10"/></block></then></if>
    }<pos:position pos:line="168" pos:column="6"/></block></for>

    <if pos:line="170" pos:column="5">if <condition pos:line="170" pos:column="8">(<expr><name pos:line="170" pos:column="9">flush_upto<pos:position pos:line="170" pos:column="19"/></name> <operator pos:line="170" pos:column="20">!=<pos:position pos:line="170" pos:column="22"/></operator> <name pos:line="170" pos:column="23">NULL<pos:position pos:line="170" pos:column="27"/></name></expr>)<pos:position pos:line="170" pos:column="28"/></condition><then pos:line="170" pos:column="28"> <block pos:line="170" pos:column="29">{
        <expr_stmt><expr><name><name pos:line="171" pos:column="9">ctx<pos:position pos:line="171" pos:column="12"/></name><operator pos:line="171" pos:column="12">-&gt;<pos:position pos:line="171" pos:column="17"/></operator><name pos:line="171" pos:column="14">tmp_flush_bb<pos:position pos:line="171" pos:column="26"/></name></name> <operator pos:line="171" pos:column="27">=<pos:position pos:line="171" pos:column="28"/></operator> <call><name pos:line="171" pos:column="29">apr_brigade_split_ex<pos:position pos:line="171" pos:column="49"/></name><argument_list pos:line="171" pos:column="49">(<argument><expr><name pos:line="171" pos:column="50">bb<pos:position pos:line="171" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="54">flush_upto<pos:position pos:line="171" pos:column="64"/></name></expr></argument>,
                                                 <argument><expr><name><name pos:line="172" pos:column="50">ctx<pos:position pos:line="172" pos:column="53"/></name><operator pos:line="172" pos:column="53">-&gt;<pos:position pos:line="172" pos:column="58"/></operator><name pos:line="172" pos:column="55">tmp_flush_bb<pos:position pos:line="172" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="172" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><name pos:line="173" pos:column="9">rv<pos:position pos:line="173" pos:column="11"/></name> <operator pos:line="173" pos:column="12">=<pos:position pos:line="173" pos:column="13"/></operator> <call><name pos:line="173" pos:column="14">send_brigade_blocking<pos:position pos:line="173" pos:column="35"/></name><argument_list pos:line="173" pos:column="35">(<argument><expr><name><name pos:line="173" pos:column="36">net<pos:position pos:line="173" pos:column="39"/></name><operator pos:line="173" pos:column="39">-&gt;<pos:position pos:line="173" pos:column="44"/></operator><name pos:line="173" pos:column="41">client_socket<pos:position pos:line="173" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="56">bb<pos:position pos:line="173" pos:column="58"/></name></expr></argument>,
                                   <argument><expr><operator pos:line="174" pos:column="36">&amp;<pos:position pos:line="174" pos:column="41"/></operator><operator pos:line="174" pos:column="37">(<pos:position pos:line="174" pos:column="38"/></operator><name><name pos:line="174" pos:column="38">ctx<pos:position pos:line="174" pos:column="41"/></name><operator pos:line="174" pos:column="41">-&gt;<pos:position pos:line="174" pos:column="46"/></operator><name pos:line="174" pos:column="43">bytes_written<pos:position pos:line="174" pos:column="56"/></name></name><operator pos:line="174" pos:column="56">)<pos:position pos:line="174" pos:column="57"/></operator></expr></argument>, <argument><expr><name pos:line="174" pos:column="59">c<pos:position pos:line="174" pos:column="60"/></name></expr></argument>)<pos:position pos:line="174" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="62"/></expr_stmt>
        <if pos:line="175" pos:column="9">if <condition pos:line="175" pos:column="12">(<expr><name pos:line="175" pos:column="13">rv<pos:position pos:line="175" pos:column="15"/></name> <operator pos:line="175" pos:column="16">!=<pos:position pos:line="175" pos:column="18"/></operator> <name pos:line="175" pos:column="19">APR_SUCCESS<pos:position pos:line="175" pos:column="30"/></name></expr>)<pos:position pos:line="175" pos:column="31"/></condition><then pos:line="175" pos:column="31"> <block pos:line="175" pos:column="32">{
            <comment type="block" pos:line="176" pos:column="13">/* The client has aborted the connection */</comment>
            <expr_stmt><expr><call><name pos:line="177" pos:column="13">ap_log_cerror<pos:position pos:line="177" pos:column="26"/></name><argument_list pos:line="177" pos:column="26">(<argument><expr><name pos:line="177" pos:column="27">APLOG_MARK<pos:position pos:line="177" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="39">APLOG_TRACE1<pos:position pos:line="177" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="53">rv<pos:position pos:line="177" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="177" pos:column="57">c<pos:position pos:line="177" pos:column="58"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="178" pos:column="27">"core_output_filter: writing data to the network"<pos:position pos:line="178" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="178" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="78"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="179" pos:column="13">c<pos:position pos:line="179" pos:column="14"/></name><operator pos:line="179" pos:column="14">-&gt;<pos:position pos:line="179" pos:column="19"/></operator><name pos:line="179" pos:column="16">aborted<pos:position pos:line="179" pos:column="23"/></name></name> <operator pos:line="179" pos:column="24">=<pos:position pos:line="179" pos:column="25"/></operator> <literal type="number" pos:line="179" pos:column="26">1<pos:position pos:line="179" pos:column="27"/></literal></expr>;<pos:position pos:line="179" pos:column="28"/></expr_stmt>
            <return pos:line="180" pos:column="13">return <expr><name pos:line="180" pos:column="20">rv<pos:position pos:line="180" pos:column="22"/></name></expr>;<pos:position pos:line="180" pos:column="23"/></return>
        }<pos:position pos:line="181" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="182" pos:column="9">APR_BRIGADE_CONCAT<pos:position pos:line="182" pos:column="27"/></name><argument_list pos:line="182" pos:column="27">(<argument><expr><name pos:line="182" pos:column="28">bb<pos:position pos:line="182" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="182" pos:column="32">ctx<pos:position pos:line="182" pos:column="35"/></name><operator pos:line="182" pos:column="35">-&gt;<pos:position pos:line="182" pos:column="40"/></operator><name pos:line="182" pos:column="37">tmp_flush_bb<pos:position pos:line="182" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="182" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="51"/></expr_stmt>
    }<pos:position pos:line="183" pos:column="6"/></block></then></if>

    <if pos:line="185" pos:column="5">if <condition pos:line="185" pos:column="8">(<expr><name pos:line="185" pos:column="9">bytes_in_brigade<pos:position pos:line="185" pos:column="25"/></name> <operator pos:line="185" pos:column="26">&gt;=<pos:position pos:line="185" pos:column="31"/></operator> <name pos:line="185" pos:column="29">THRESHOLD_MIN_WRITE<pos:position pos:line="185" pos:column="48"/></name></expr>)<pos:position pos:line="185" pos:column="49"/></condition><then pos:line="185" pos:column="49"> <block pos:line="185" pos:column="50">{
        <expr_stmt><expr><name pos:line="186" pos:column="9">rv<pos:position pos:line="186" pos:column="11"/></name> <operator pos:line="186" pos:column="12">=<pos:position pos:line="186" pos:column="13"/></operator> <call><name pos:line="186" pos:column="14">send_brigade_nonblocking<pos:position pos:line="186" pos:column="38"/></name><argument_list pos:line="186" pos:column="38">(<argument><expr><name><name pos:line="186" pos:column="39">net<pos:position pos:line="186" pos:column="42"/></name><operator pos:line="186" pos:column="42">-&gt;<pos:position pos:line="186" pos:column="47"/></operator><name pos:line="186" pos:column="44">client_socket<pos:position pos:line="186" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="186" pos:column="59">bb<pos:position pos:line="186" pos:column="61"/></name></expr></argument>,
                                      <argument><expr><operator pos:line="187" pos:column="39">&amp;<pos:position pos:line="187" pos:column="44"/></operator><operator pos:line="187" pos:column="40">(<pos:position pos:line="187" pos:column="41"/></operator><name><name pos:line="187" pos:column="41">ctx<pos:position pos:line="187" pos:column="44"/></name><operator pos:line="187" pos:column="44">-&gt;<pos:position pos:line="187" pos:column="49"/></operator><name pos:line="187" pos:column="46">bytes_written<pos:position pos:line="187" pos:column="59"/></name></name><operator pos:line="187" pos:column="59">)<pos:position pos:line="187" pos:column="60"/></operator></expr></argument>, <argument><expr><name pos:line="187" pos:column="62">c<pos:position pos:line="187" pos:column="63"/></name></expr></argument>)<pos:position pos:line="187" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="65"/></expr_stmt>
        <if pos:line="188" pos:column="9">if <condition pos:line="188" pos:column="12">(<expr><operator pos:line="188" pos:column="13">(<pos:position pos:line="188" pos:column="14"/></operator><name pos:line="188" pos:column="14">rv<pos:position pos:line="188" pos:column="16"/></name> <operator pos:line="188" pos:column="17">!=<pos:position pos:line="188" pos:column="19"/></operator> <name pos:line="188" pos:column="20">APR_SUCCESS<pos:position pos:line="188" pos:column="31"/></name><operator pos:line="188" pos:column="31">)<pos:position pos:line="188" pos:column="32"/></operator> <operator pos:line="188" pos:column="33">&amp;&amp;<pos:position pos:line="188" pos:column="43"/></operator> <operator pos:line="188" pos:column="36">(<pos:position pos:line="188" pos:column="37"/></operator><operator pos:line="188" pos:column="37">!<pos:position pos:line="188" pos:column="38"/></operator><call><name pos:line="188" pos:column="38">APR_STATUS_IS_EAGAIN<pos:position pos:line="188" pos:column="58"/></name><argument_list pos:line="188" pos:column="58">(<argument><expr><name pos:line="188" pos:column="59">rv<pos:position pos:line="188" pos:column="61"/></name></expr></argument>)<pos:position pos:line="188" pos:column="62"/></argument_list></call><operator pos:line="188" pos:column="62">)<pos:position pos:line="188" pos:column="63"/></operator></expr>)<pos:position pos:line="188" pos:column="64"/></condition><then pos:line="188" pos:column="64"> <block pos:line="188" pos:column="65">{
            <comment type="block" pos:line="189" pos:column="13">/* The client has aborted the connection */</comment>
            <expr_stmt><expr><call><name pos:line="190" pos:column="13">ap_log_cerror<pos:position pos:line="190" pos:column="26"/></name><argument_list pos:line="190" pos:column="26">(<argument><expr><name pos:line="190" pos:column="27">APLOG_MARK<pos:position pos:line="190" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="39">APLOG_TRACE1<pos:position pos:line="190" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="53">rv<pos:position pos:line="190" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="190" pos:column="57">c<pos:position pos:line="190" pos:column="58"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="191" pos:column="27">"core_output_filter: writing data to the network"<pos:position pos:line="191" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="191" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="78"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="192" pos:column="13">c<pos:position pos:line="192" pos:column="14"/></name><operator pos:line="192" pos:column="14">-&gt;<pos:position pos:line="192" pos:column="19"/></operator><name pos:line="192" pos:column="16">aborted<pos:position pos:line="192" pos:column="23"/></name></name> <operator pos:line="192" pos:column="24">=<pos:position pos:line="192" pos:column="25"/></operator> <literal type="number" pos:line="192" pos:column="26">1<pos:position pos:line="192" pos:column="27"/></literal></expr>;<pos:position pos:line="192" pos:column="28"/></expr_stmt>
            <return pos:line="193" pos:column="13">return <expr><name pos:line="193" pos:column="20">rv<pos:position pos:line="193" pos:column="22"/></name></expr>;<pos:position pos:line="193" pos:column="23"/></return>
        }<pos:position pos:line="194" pos:column="10"/></block></then></if>
    }<pos:position pos:line="195" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="197" pos:column="5">setaside_remaining_output<pos:position pos:line="197" pos:column="30"/></name><argument_list pos:line="197" pos:column="30">(<argument><expr><name pos:line="197" pos:column="31">f<pos:position pos:line="197" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="34">ctx<pos:position pos:line="197" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="39">bb<pos:position pos:line="197" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="197" pos:column="43">c<pos:position pos:line="197" pos:column="44"/></name></expr></argument>)<pos:position pos:line="197" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="197" pos:column="46"/></expr_stmt>
    <return pos:line="198" pos:column="5">return <expr><name pos:line="198" pos:column="12">APR_SUCCESS<pos:position pos:line="198" pos:column="23"/></name></expr>;<pos:position pos:line="198" pos:column="24"/></return>
}<pos:position pos:line="199" pos:column="2"/></block></function></unit>
