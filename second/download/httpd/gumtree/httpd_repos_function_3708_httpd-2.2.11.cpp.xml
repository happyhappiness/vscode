<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3708_httpd-2.2.11.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">readExports<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">ModulePtr<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">mp<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="37"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">LDFILE<pos:position pos:line="3" pos:column="11"/></name> <modifier pos:line="3" pos:column="12">*<pos:position pos:line="3" pos:column="13"/></modifier></type><name pos:line="3" pos:column="13">ldp<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name pos:line="3" pos:column="19">NULL<pos:position pos:line="3" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">SCNHDR<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">sh<pos:position pos:line="4" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="4" pos:column="16">shdata<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">LDHDR<pos:position pos:line="5" pos:column="10"/></name> <modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">lhp<pos:position pos:line="5" pos:column="15"/></name></decl>;<pos:position pos:line="5" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">ldbuf<pos:position pos:line="6" pos:column="16"/></name></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">LDSYM<pos:position pos:line="7" pos:column="10"/></name> <modifier pos:line="7" pos:column="11">*<pos:position pos:line="7" pos:column="12"/></modifier></type><name pos:line="7" pos:column="12">ls<pos:position pos:line="7" pos:column="14"/></name></decl>;<pos:position pos:line="7" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">i<pos:position pos:line="8" pos:column="10"/></name></decl>;<pos:position pos:line="8" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">ExportPtr<pos:position pos:line="9" pos:column="14"/></name></type> <name pos:line="9" pos:column="15">ep<pos:position pos:line="9" pos:column="17"/></name></decl>;<pos:position pos:line="9" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="10" pos:column="5">struct<pos:position pos:line="10" pos:column="11"/></name> <name pos:line="10" pos:column="12">ld_info<pos:position pos:line="10" pos:column="19"/></name></name> <modifier pos:line="10" pos:column="20">*<pos:position pos:line="10" pos:column="21"/></modifier></type><name pos:line="10" pos:column="21">lp<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">buf<pos:position pos:line="11" pos:column="14"/></name></decl>;<pos:position pos:line="11" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">int<pos:position pos:line="12" pos:column="8"/></name></type> <name pos:line="12" pos:column="9">size<pos:position pos:line="12" pos:column="13"/></name> <init pos:line="12" pos:column="14">= <expr><literal type="number" pos:line="12" pos:column="16">4<pos:position pos:line="12" pos:column="17"/></literal> <operator pos:line="12" pos:column="18">*<pos:position pos:line="12" pos:column="19"/></operator> <literal type="number" pos:line="12" pos:column="20">1024<pos:position pos:line="12" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="12" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">void<pos:position pos:line="13" pos:column="9"/></name> <modifier pos:line="13" pos:column="10">*<pos:position pos:line="13" pos:column="11"/></modifier></type><name pos:line="13" pos:column="11">dataorg<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>

    <comment type="block" pos:line="15" pos:column="5">/*
     * The module might be loaded due to the LIBPATH
     * environment variable. Search for the loaded
     * module using L_GETINFO.
     */</comment>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">(<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">buf<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <call><name pos:line="20" pos:column="16">malloc<pos:position pos:line="20" pos:column="22"/></name><argument_list pos:line="20" pos:column="22">(<argument><expr><name pos:line="20" pos:column="23">size<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call><operator pos:line="20" pos:column="28">)<pos:position pos:line="20" pos:column="29"/></operator> <operator pos:line="20" pos:column="30">==<pos:position pos:line="20" pos:column="32"/></operator> <name pos:line="20" pos:column="33">NULL<pos:position pos:line="20" pos:column="37"/></name></expr>)<pos:position pos:line="20" pos:column="38"/></condition><then pos:line="20" pos:column="38"> <block pos:line="20" pos:column="39">{
	<expr_stmt><expr><name pos:line="21" pos:column="9">errvalid<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">++<pos:position pos:line="21" pos:column="19"/></operator></expr>;<pos:position pos:line="21" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="22" pos:column="9">strcpy<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name pos:line="22" pos:column="16">errbuf<pos:position pos:line="22" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="24">"readExports: "<pos:position pos:line="22" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="22" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="23" pos:column="9">strcat<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name pos:line="23" pos:column="16">errbuf<pos:position pos:line="23" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="23" pos:column="24">strerror<pos:position pos:line="23" pos:column="32"/></name><argument_list pos:line="23" pos:column="32">(<argument><expr><name pos:line="23" pos:column="33">errno<pos:position pos:line="23" pos:column="38"/></name></expr></argument>)<pos:position pos:line="23" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="23" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="41"/></expr_stmt>
	<return pos:line="24" pos:column="9">return <expr><operator pos:line="24" pos:column="16">-<pos:position pos:line="24" pos:column="17"/></operator><literal type="number" pos:line="24" pos:column="17">1<pos:position pos:line="24" pos:column="18"/></literal></expr>;<pos:position pos:line="24" pos:column="19"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>
    <while pos:line="26" pos:column="5">while <condition pos:line="26" pos:column="11">(<expr><operator pos:line="26" pos:column="12">(<pos:position pos:line="26" pos:column="13"/></operator><name pos:line="26" pos:column="13">i<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">=<pos:position pos:line="26" pos:column="16"/></operator> <call><name pos:line="26" pos:column="17">loadquery<pos:position pos:line="26" pos:column="26"/></name><argument_list pos:line="26" pos:column="26">(<argument><expr><name pos:line="26" pos:column="27">L_GETINFO<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="38">buf<pos:position pos:line="26" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="43">size<pos:position pos:line="26" pos:column="47"/></name></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call><operator pos:line="26" pos:column="48">)<pos:position pos:line="26" pos:column="49"/></operator> <operator pos:line="26" pos:column="50">==<pos:position pos:line="26" pos:column="52"/></operator> <operator pos:line="26" pos:column="53">-<pos:position pos:line="26" pos:column="54"/></operator><literal type="number" pos:line="26" pos:column="54">1<pos:position pos:line="26" pos:column="55"/></literal> <operator pos:line="26" pos:column="56">&amp;&amp;<pos:position pos:line="26" pos:column="66"/></operator> <name pos:line="26" pos:column="59">errno<pos:position pos:line="26" pos:column="64"/></name> <operator pos:line="26" pos:column="65">==<pos:position pos:line="26" pos:column="67"/></operator> <name pos:line="26" pos:column="68">ENOMEM<pos:position pos:line="26" pos:column="74"/></name></expr>)<pos:position pos:line="26" pos:column="75"/></condition> <block pos:line="26" pos:column="76">{
	<expr_stmt><expr><call><name pos:line="27" pos:column="9">free<pos:position pos:line="27" pos:column="13"/></name><argument_list pos:line="27" pos:column="13">(<argument><expr><name pos:line="27" pos:column="14">buf<pos:position pos:line="27" pos:column="17"/></name></expr></argument>)<pos:position pos:line="27" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="19"/></expr_stmt>
	<expr_stmt><expr><name pos:line="28" pos:column="9">size<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">+=<pos:position pos:line="28" pos:column="16"/></operator> <literal type="number" pos:line="28" pos:column="17">4<pos:position pos:line="28" pos:column="18"/></literal> <operator pos:line="28" pos:column="19">*<pos:position pos:line="28" pos:column="20"/></operator> <literal type="number" pos:line="28" pos:column="21">1024<pos:position pos:line="28" pos:column="25"/></literal></expr>;<pos:position pos:line="28" pos:column="26"/></expr_stmt>
	<if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">buf<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <call><name pos:line="29" pos:column="20">malloc<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><name pos:line="29" pos:column="27">size<pos:position pos:line="29" pos:column="31"/></name></expr></argument>)<pos:position pos:line="29" pos:column="32"/></argument_list></call><operator pos:line="29" pos:column="32">)<pos:position pos:line="29" pos:column="33"/></operator> <operator pos:line="29" pos:column="34">==<pos:position pos:line="29" pos:column="36"/></operator> <name pos:line="29" pos:column="37">NULL<pos:position pos:line="29" pos:column="41"/></name></expr>)<pos:position pos:line="29" pos:column="42"/></condition><then pos:line="29" pos:column="42"> <block pos:line="29" pos:column="43">{
	    <expr_stmt><expr><name pos:line="30" pos:column="13">errvalid<pos:position pos:line="30" pos:column="21"/></name><operator pos:line="30" pos:column="21">++<pos:position pos:line="30" pos:column="23"/></operator></expr>;<pos:position pos:line="30" pos:column="24"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="31" pos:column="13">strcpy<pos:position pos:line="31" pos:column="19"/></name><argument_list pos:line="31" pos:column="19">(<argument><expr><name pos:line="31" pos:column="20">errbuf<pos:position pos:line="31" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="28">"readExports: "<pos:position pos:line="31" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="45"/></expr_stmt>
	    <expr_stmt><expr><call><name pos:line="32" pos:column="13">strcat<pos:position pos:line="32" pos:column="19"/></name><argument_list pos:line="32" pos:column="19">(<argument><expr><name pos:line="32" pos:column="20">errbuf<pos:position pos:line="32" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="28">strerror<pos:position pos:line="32" pos:column="36"/></name><argument_list pos:line="32" pos:column="36">(<argument><expr><name pos:line="32" pos:column="37">errno<pos:position pos:line="32" pos:column="42"/></name></expr></argument>)<pos:position pos:line="32" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="45"/></expr_stmt>
	    <return pos:line="33" pos:column="13">return <expr><operator pos:line="33" pos:column="20">-<pos:position pos:line="33" pos:column="21"/></operator><literal type="number" pos:line="33" pos:column="21">1<pos:position pos:line="33" pos:column="22"/></literal></expr>;<pos:position pos:line="33" pos:column="23"/></return>
	}<pos:position pos:line="34" pos:column="10"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></while>
    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><name pos:line="36" pos:column="9">i<pos:position pos:line="36" pos:column="10"/></name> <operator pos:line="36" pos:column="11">==<pos:position pos:line="36" pos:column="13"/></operator> <operator pos:line="36" pos:column="14">-<pos:position pos:line="36" pos:column="15"/></operator><literal type="number" pos:line="36" pos:column="15">1<pos:position pos:line="36" pos:column="16"/></literal></expr>)<pos:position pos:line="36" pos:column="17"/></condition><then pos:line="36" pos:column="17"> <block pos:line="36" pos:column="18">{
	<expr_stmt><expr><name pos:line="37" pos:column="9">errvalid<pos:position pos:line="37" pos:column="17"/></name><operator pos:line="37" pos:column="17">++<pos:position pos:line="37" pos:column="19"/></operator></expr>;<pos:position pos:line="37" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="38" pos:column="9">strcpy<pos:position pos:line="38" pos:column="15"/></name><argument_list pos:line="38" pos:column="15">(<argument><expr><name pos:line="38" pos:column="16">errbuf<pos:position pos:line="38" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="24">"readExports: "<pos:position pos:line="38" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="39" pos:column="9">strcat<pos:position pos:line="39" pos:column="15"/></name><argument_list pos:line="39" pos:column="15">(<argument><expr><name pos:line="39" pos:column="16">errbuf<pos:position pos:line="39" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="39" pos:column="24">strerror<pos:position pos:line="39" pos:column="32"/></name><argument_list pos:line="39" pos:column="32">(<argument><expr><name pos:line="39" pos:column="33">errno<pos:position pos:line="39" pos:column="38"/></name></expr></argument>)<pos:position pos:line="39" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="39" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="40" pos:column="9">free<pos:position pos:line="40" pos:column="13"/></name><argument_list pos:line="40" pos:column="13">(<argument><expr><name pos:line="40" pos:column="14">buf<pos:position pos:line="40" pos:column="17"/></name></expr></argument>)<pos:position pos:line="40" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="19"/></expr_stmt>
	<return pos:line="41" pos:column="9">return <expr><operator pos:line="41" pos:column="16">-<pos:position pos:line="41" pos:column="17"/></operator><literal type="number" pos:line="41" pos:column="17">1<pos:position pos:line="41" pos:column="18"/></literal></expr>;<pos:position pos:line="41" pos:column="19"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="43" pos:column="5">/*
     * Traverse the list of loaded modules. The entry point
     * returned by load() does actually point to the TOC
     * entry contained in the data segment.
     */</comment>
    <expr_stmt><expr><name pos:line="48" pos:column="5">lp<pos:position pos:line="48" pos:column="7"/></name> <operator pos:line="48" pos:column="8">=<pos:position pos:line="48" pos:column="9"/></operator> <operator pos:line="48" pos:column="10">(<pos:position pos:line="48" pos:column="11"/></operator>struct <name pos:line="48" pos:column="18">ld_info<pos:position pos:line="48" pos:column="25"/></name> <operator pos:line="48" pos:column="26">*<pos:position pos:line="48" pos:column="27"/></operator><operator pos:line="48" pos:column="27">)<pos:position pos:line="48" pos:column="28"/></operator> <name pos:line="48" pos:column="29">buf<pos:position pos:line="48" pos:column="32"/></name></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt>
    <while pos:line="49" pos:column="5">while <condition pos:line="49" pos:column="11">(<expr><name pos:line="49" pos:column="12">lp<pos:position pos:line="49" pos:column="14"/></name></expr>)<pos:position pos:line="49" pos:column="15"/></condition> <block pos:line="49" pos:column="16">{
	<if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">(<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">unsigned<pos:position pos:line="50" pos:column="22"/></name> <name pos:line="50" pos:column="23">long<pos:position pos:line="50" pos:column="27"/></name><operator pos:line="50" pos:column="27">)<pos:position pos:line="50" pos:column="28"/></operator> <name><name pos:line="50" pos:column="29">mp<pos:position pos:line="50" pos:column="31"/></name><operator pos:line="50" pos:column="31">-&gt;<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="33">entry<pos:position pos:line="50" pos:column="38"/></name></name> <operator pos:line="50" pos:column="39">&gt;=<pos:position pos:line="50" pos:column="44"/></operator> <operator pos:line="50" pos:column="42">(<pos:position pos:line="50" pos:column="43"/></operator><name pos:line="50" pos:column="43">unsigned<pos:position pos:line="50" pos:column="51"/></name> <name pos:line="50" pos:column="52">long<pos:position pos:line="50" pos:column="56"/></name><operator pos:line="50" pos:column="56">)<pos:position pos:line="50" pos:column="57"/></operator> <name><name pos:line="50" pos:column="58">lp<pos:position pos:line="50" pos:column="60"/></name><operator pos:line="50" pos:column="60">-&gt;<pos:position pos:line="50" pos:column="65"/></operator><name pos:line="50" pos:column="62">ldinfo_dataorg<pos:position pos:line="50" pos:column="76"/></name></name> <operator pos:line="50" pos:column="77">&amp;&amp;<pos:position pos:line="50" pos:column="87"/></operator>
	    <operator pos:line="51" pos:column="13">(<pos:position pos:line="51" pos:column="14"/></operator><name pos:line="51" pos:column="14">unsigned<pos:position pos:line="51" pos:column="22"/></name> <name pos:line="51" pos:column="23">long<pos:position pos:line="51" pos:column="27"/></name><operator pos:line="51" pos:column="27">)<pos:position pos:line="51" pos:column="28"/></operator> <name><name pos:line="51" pos:column="29">mp<pos:position pos:line="51" pos:column="31"/></name><operator pos:line="51" pos:column="31">-&gt;<pos:position pos:line="51" pos:column="36"/></operator><name pos:line="51" pos:column="33">entry<pos:position pos:line="51" pos:column="38"/></name></name> <operator pos:line="51" pos:column="39">&lt;<pos:position pos:line="51" pos:column="43"/></operator> <operator pos:line="51" pos:column="41">(<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="42">unsigned<pos:position pos:line="51" pos:column="50"/></name> <name pos:line="51" pos:column="51">long<pos:position pos:line="51" pos:column="55"/></name><operator pos:line="51" pos:column="55">)<pos:position pos:line="51" pos:column="56"/></operator> <name><name pos:line="51" pos:column="57">lp<pos:position pos:line="51" pos:column="59"/></name><operator pos:line="51" pos:column="59">-&gt;<pos:position pos:line="51" pos:column="64"/></operator><name pos:line="51" pos:column="61">ldinfo_dataorg<pos:position pos:line="51" pos:column="75"/></name></name> <operator pos:line="51" pos:column="76">+<pos:position pos:line="51" pos:column="77"/></operator>
	    <name><name pos:line="52" pos:column="13">lp<pos:position pos:line="52" pos:column="15"/></name><operator pos:line="52" pos:column="15">-&gt;<pos:position pos:line="52" pos:column="20"/></operator><name pos:line="52" pos:column="17">ldinfo_datasize<pos:position pos:line="52" pos:column="32"/></name></name></expr>)<pos:position pos:line="52" pos:column="33"/></condition><then pos:line="52" pos:column="33"> <block pos:line="52" pos:column="34">{
	    <expr_stmt><expr><name pos:line="53" pos:column="13">dataorg<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">=<pos:position pos:line="53" pos:column="22"/></operator> <name><name pos:line="53" pos:column="23">lp<pos:position pos:line="53" pos:column="25"/></name><operator pos:line="53" pos:column="25">-&gt;<pos:position pos:line="53" pos:column="30"/></operator><name pos:line="53" pos:column="27">ldinfo_dataorg<pos:position pos:line="53" pos:column="41"/></name></name></expr>;<pos:position pos:line="53" pos:column="42"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="54" pos:column="13">ldp<pos:position pos:line="54" pos:column="16"/></name> <operator pos:line="54" pos:column="17">=<pos:position pos:line="54" pos:column="18"/></operator> <call><name pos:line="54" pos:column="19">ldopen<pos:position pos:line="54" pos:column="25"/></name><argument_list pos:line="54" pos:column="25">(<argument><expr><name><name pos:line="54" pos:column="26">lp<pos:position pos:line="54" pos:column="28"/></name><operator pos:line="54" pos:column="28">-&gt;<pos:position pos:line="54" pos:column="33"/></operator><name pos:line="54" pos:column="30">ldinfo_filename<pos:position pos:line="54" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="47">ldp<pos:position pos:line="54" pos:column="50"/></name></expr></argument>)<pos:position pos:line="54" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="52"/></expr_stmt>
	    <break pos:line="55" pos:column="13">break;<pos:position pos:line="55" pos:column="19"/></break>
	}<pos:position pos:line="56" pos:column="10"/></block></then></if>
	<if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name><name pos:line="57" pos:column="13">lp<pos:position pos:line="57" pos:column="15"/></name><operator pos:line="57" pos:column="15">-&gt;<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="17">ldinfo_next<pos:position pos:line="57" pos:column="28"/></name></name> <operator pos:line="57" pos:column="29">==<pos:position pos:line="57" pos:column="31"/></operator> <literal type="number" pos:line="57" pos:column="32">0<pos:position pos:line="57" pos:column="33"/></literal></expr>)<pos:position pos:line="57" pos:column="34"/></condition><then pos:line="57" pos:column="34">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="58" pos:column="13">lp<pos:position pos:line="58" pos:column="15"/></name> <operator pos:line="58" pos:column="16">=<pos:position pos:line="58" pos:column="17"/></operator> <name pos:line="58" pos:column="18">NULL<pos:position pos:line="58" pos:column="22"/></name></expr>;<pos:position pos:line="58" pos:column="23"/></expr_stmt></block></then>
	<else pos:line="59" pos:column="9">else
	    <block type="pseudo"><expr_stmt><expr><name pos:line="60" pos:column="13">lp<pos:position pos:line="60" pos:column="15"/></name> <operator pos:line="60" pos:column="16">=<pos:position pos:line="60" pos:column="17"/></operator> <operator pos:line="60" pos:column="18">(<pos:position pos:line="60" pos:column="19"/></operator>struct <name pos:line="60" pos:column="26">ld_info<pos:position pos:line="60" pos:column="33"/></name> <operator pos:line="60" pos:column="34">*<pos:position pos:line="60" pos:column="35"/></operator><operator pos:line="60" pos:column="35">)<pos:position pos:line="60" pos:column="36"/></operator> <operator pos:line="60" pos:column="37">(<pos:position pos:line="60" pos:column="38"/></operator><operator pos:line="60" pos:column="38">(<pos:position pos:line="60" pos:column="39"/></operator><name pos:line="60" pos:column="39">char<pos:position pos:line="60" pos:column="43"/></name> <operator pos:line="60" pos:column="44">*<pos:position pos:line="60" pos:column="45"/></operator><operator pos:line="60" pos:column="45">)<pos:position pos:line="60" pos:column="46"/></operator> <name pos:line="60" pos:column="47">lp<pos:position pos:line="60" pos:column="49"/></name> <operator pos:line="60" pos:column="50">+<pos:position pos:line="60" pos:column="51"/></operator> <name><name pos:line="60" pos:column="52">lp<pos:position pos:line="60" pos:column="54"/></name><operator pos:line="60" pos:column="54">-&gt;<pos:position pos:line="60" pos:column="59"/></operator><name pos:line="60" pos:column="56">ldinfo_next<pos:position pos:line="60" pos:column="67"/></name></name><operator pos:line="60" pos:column="67">)<pos:position pos:line="60" pos:column="68"/></operator></expr>;<pos:position pos:line="60" pos:column="69"/></expr_stmt></block></else></if>
    }<pos:position pos:line="61" pos:column="6"/></block></while>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">free<pos:position pos:line="62" pos:column="9"/></name><argument_list pos:line="62" pos:column="9">(<argument><expr><name pos:line="62" pos:column="10">buf<pos:position pos:line="62" pos:column="13"/></name></expr></argument>)<pos:position pos:line="62" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="15"/></expr_stmt>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><operator pos:line="63" pos:column="9">!<pos:position pos:line="63" pos:column="10"/></operator><name pos:line="63" pos:column="10">ldp<pos:position pos:line="63" pos:column="13"/></name></expr>)<pos:position pos:line="63" pos:column="14"/></condition><then pos:line="63" pos:column="14"> <block pos:line="63" pos:column="15">{
	<expr_stmt><expr><name pos:line="64" pos:column="9">errvalid<pos:position pos:line="64" pos:column="17"/></name><operator pos:line="64" pos:column="17">++<pos:position pos:line="64" pos:column="19"/></operator></expr>;<pos:position pos:line="64" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="65" pos:column="9">strcpy<pos:position pos:line="65" pos:column="15"/></name><argument_list pos:line="65" pos:column="15">(<argument><expr><name pos:line="65" pos:column="16">errbuf<pos:position pos:line="65" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="24">"readExports: "<pos:position pos:line="65" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="66" pos:column="9">strcat<pos:position pos:line="66" pos:column="15"/></name><argument_list pos:line="66" pos:column="15">(<argument><expr><name pos:line="66" pos:column="16">errbuf<pos:position pos:line="66" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="66" pos:column="24">strerror<pos:position pos:line="66" pos:column="32"/></name><argument_list pos:line="66" pos:column="32">(<argument><expr><name pos:line="66" pos:column="33">errno<pos:position pos:line="66" pos:column="38"/></name></expr></argument>)<pos:position pos:line="66" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="66" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="41"/></expr_stmt>
	<return pos:line="67" pos:column="9">return <expr><operator pos:line="67" pos:column="16">-<pos:position pos:line="67" pos:column="17"/></operator><literal type="number" pos:line="67" pos:column="17">1<pos:position pos:line="67" pos:column="18"/></literal></expr>;<pos:position pos:line="67" pos:column="19"/></return>
    }<pos:position pos:line="68" pos:column="6"/></block></then></if>
    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><call><name pos:line="69" pos:column="9">TYPE<pos:position pos:line="69" pos:column="13"/></name><argument_list pos:line="69" pos:column="13">(<argument><expr><name pos:line="69" pos:column="14">ldp<pos:position pos:line="69" pos:column="17"/></name></expr></argument>)<pos:position pos:line="69" pos:column="18"/></argument_list></call> <operator pos:line="69" pos:column="19">!=<pos:position pos:line="69" pos:column="21"/></operator> <name pos:line="69" pos:column="22">U802TOCMAGIC<pos:position pos:line="69" pos:column="34"/></name></expr>)<pos:position pos:line="69" pos:column="35"/></condition><then pos:line="69" pos:column="35"> <block pos:line="69" pos:column="36">{
	<expr_stmt><expr><name pos:line="70" pos:column="9">errvalid<pos:position pos:line="70" pos:column="17"/></name><operator pos:line="70" pos:column="17">++<pos:position pos:line="70" pos:column="19"/></operator></expr>;<pos:position pos:line="70" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="71" pos:column="9">strcpy<pos:position pos:line="71" pos:column="15"/></name><argument_list pos:line="71" pos:column="15">(<argument><expr><name pos:line="71" pos:column="16">errbuf<pos:position pos:line="71" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="24">"readExports: bad magic"<pos:position pos:line="71" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="50"/></expr_stmt>
	<while pos:line="72" pos:column="9">while <condition pos:line="72" pos:column="15">(<expr><call><name pos:line="72" pos:column="16">ldclose<pos:position pos:line="72" pos:column="23"/></name><argument_list pos:line="72" pos:column="23">(<argument><expr><name pos:line="72" pos:column="24">ldp<pos:position pos:line="72" pos:column="27"/></name></expr></argument>)<pos:position pos:line="72" pos:column="28"/></argument_list></call> <operator pos:line="72" pos:column="29">==<pos:position pos:line="72" pos:column="31"/></operator> <name pos:line="72" pos:column="32">FAILURE<pos:position pos:line="72" pos:column="39"/></name></expr>)<pos:position pos:line="72" pos:column="40"/></condition><block type="pseudo"><empty_stmt pos:line="72" pos:column="40">;<pos:position pos:line="72" pos:column="41"/></empty_stmt></block></while>
	<return pos:line="73" pos:column="9">return <expr><operator pos:line="73" pos:column="16">-<pos:position pos:line="73" pos:column="17"/></operator><literal type="number" pos:line="73" pos:column="17">1<pos:position pos:line="73" pos:column="18"/></literal></expr>;<pos:position pos:line="73" pos:column="19"/></return>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="75" pos:column="5">/*
     * Get the padding for the data section. This is needed for
     * AIX 4.1 compilers. This is used when building the final
     * function pointer to the exported symbol.
     */</comment>
    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><call><name pos:line="80" pos:column="9">ldnshread<pos:position pos:line="80" pos:column="18"/></name><argument_list pos:line="80" pos:column="18">(<argument><expr><name pos:line="80" pos:column="19">ldp<pos:position pos:line="80" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="80" pos:column="24">_DATA<pos:position pos:line="80" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="31">&amp;<pos:position pos:line="80" pos:column="36"/></operator><name pos:line="80" pos:column="32">shdata<pos:position pos:line="80" pos:column="38"/></name></expr></argument>)<pos:position pos:line="80" pos:column="39"/></argument_list></call> <operator pos:line="80" pos:column="40">!=<pos:position pos:line="80" pos:column="42"/></operator> <name pos:line="80" pos:column="43">SUCCESS<pos:position pos:line="80" pos:column="50"/></name></expr>)<pos:position pos:line="80" pos:column="51"/></condition><then pos:line="80" pos:column="51"> <block pos:line="80" pos:column="52">{
	<expr_stmt><expr><name pos:line="81" pos:column="9">errvalid<pos:position pos:line="81" pos:column="17"/></name><operator pos:line="81" pos:column="17">++<pos:position pos:line="81" pos:column="19"/></operator></expr>;<pos:position pos:line="81" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="82" pos:column="9">strcpy<pos:position pos:line="82" pos:column="15"/></name><argument_list pos:line="82" pos:column="15">(<argument><expr><name pos:line="82" pos:column="16">errbuf<pos:position pos:line="82" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="82" pos:column="24">"readExports: cannot read data section header"<pos:position pos:line="82" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="72"/></expr_stmt>
	<while pos:line="83" pos:column="9">while <condition pos:line="83" pos:column="15">(<expr><call><name pos:line="83" pos:column="16">ldclose<pos:position pos:line="83" pos:column="23"/></name><argument_list pos:line="83" pos:column="23">(<argument><expr><name pos:line="83" pos:column="24">ldp<pos:position pos:line="83" pos:column="27"/></name></expr></argument>)<pos:position pos:line="83" pos:column="28"/></argument_list></call> <operator pos:line="83" pos:column="29">==<pos:position pos:line="83" pos:column="31"/></operator> <name pos:line="83" pos:column="32">FAILURE<pos:position pos:line="83" pos:column="39"/></name></expr>)<pos:position pos:line="83" pos:column="40"/></condition><block type="pseudo"><empty_stmt pos:line="83" pos:column="40">;<pos:position pos:line="83" pos:column="41"/></empty_stmt></block></while>
	<return pos:line="84" pos:column="9">return <expr><operator pos:line="84" pos:column="16">-<pos:position pos:line="84" pos:column="17"/></operator><literal type="number" pos:line="84" pos:column="17">1<pos:position pos:line="84" pos:column="18"/></literal></expr>;<pos:position pos:line="84" pos:column="19"/></return>
    }<pos:position pos:line="85" pos:column="6"/></block></then></if>
    <if pos:line="86" pos:column="5">if <condition pos:line="86" pos:column="8">(<expr><call><name pos:line="86" pos:column="9">ldnshread<pos:position pos:line="86" pos:column="18"/></name><argument_list pos:line="86" pos:column="18">(<argument><expr><name pos:line="86" pos:column="19">ldp<pos:position pos:line="86" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="24">_LOADER<pos:position pos:line="86" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="33">&amp;<pos:position pos:line="86" pos:column="38"/></operator><name pos:line="86" pos:column="34">sh<pos:position pos:line="86" pos:column="36"/></name></expr></argument>)<pos:position pos:line="86" pos:column="37"/></argument_list></call> <operator pos:line="86" pos:column="38">!=<pos:position pos:line="86" pos:column="40"/></operator> <name pos:line="86" pos:column="41">SUCCESS<pos:position pos:line="86" pos:column="48"/></name></expr>)<pos:position pos:line="86" pos:column="49"/></condition><then pos:line="86" pos:column="49"> <block pos:line="86" pos:column="50">{
	<expr_stmt><expr><name pos:line="87" pos:column="9">errvalid<pos:position pos:line="87" pos:column="17"/></name><operator pos:line="87" pos:column="17">++<pos:position pos:line="87" pos:column="19"/></operator></expr>;<pos:position pos:line="87" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="88" pos:column="9">strcpy<pos:position pos:line="88" pos:column="15"/></name><argument_list pos:line="88" pos:column="15">(<argument><expr><name pos:line="88" pos:column="16">errbuf<pos:position pos:line="88" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="24">"readExports: cannot read loader section header"<pos:position pos:line="88" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="74"/></expr_stmt>
	<while pos:line="89" pos:column="9">while <condition pos:line="89" pos:column="15">(<expr><call><name pos:line="89" pos:column="16">ldclose<pos:position pos:line="89" pos:column="23"/></name><argument_list pos:line="89" pos:column="23">(<argument><expr><name pos:line="89" pos:column="24">ldp<pos:position pos:line="89" pos:column="27"/></name></expr></argument>)<pos:position pos:line="89" pos:column="28"/></argument_list></call> <operator pos:line="89" pos:column="29">==<pos:position pos:line="89" pos:column="31"/></operator> <name pos:line="89" pos:column="32">FAILURE<pos:position pos:line="89" pos:column="39"/></name></expr>)<pos:position pos:line="89" pos:column="40"/></condition><block type="pseudo"><empty_stmt pos:line="89" pos:column="40">;<pos:position pos:line="89" pos:column="41"/></empty_stmt></block></while>
	<return pos:line="90" pos:column="9">return <expr><operator pos:line="90" pos:column="16">-<pos:position pos:line="90" pos:column="17"/></operator><literal type="number" pos:line="90" pos:column="17">1<pos:position pos:line="90" pos:column="18"/></literal></expr>;<pos:position pos:line="90" pos:column="19"/></return>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="92" pos:column="5">/*
     * We read the complete loader section in one chunk, this makes
     * finding long symbol names residing in the string table easier.
     */</comment>
    <if pos:line="96" pos:column="5">if <condition pos:line="96" pos:column="8">(<expr><operator pos:line="96" pos:column="9">(<pos:position pos:line="96" pos:column="10"/></operator><name pos:line="96" pos:column="10">ldbuf<pos:position pos:line="96" pos:column="15"/></name> <operator pos:line="96" pos:column="16">=<pos:position pos:line="96" pos:column="17"/></operator> <operator pos:line="96" pos:column="18">(<pos:position pos:line="96" pos:column="19"/></operator><name pos:line="96" pos:column="19">char<pos:position pos:line="96" pos:column="23"/></name> <operator pos:line="96" pos:column="24">*<pos:position pos:line="96" pos:column="25"/></operator><operator pos:line="96" pos:column="25">)<pos:position pos:line="96" pos:column="26"/></operator> <call><name pos:line="96" pos:column="27">malloc<pos:position pos:line="96" pos:column="33"/></name><argument_list pos:line="96" pos:column="33">(<argument><expr><name><name pos:line="96" pos:column="34">sh<pos:position pos:line="96" pos:column="36"/></name><operator pos:line="96" pos:column="36">.<pos:position pos:line="96" pos:column="37"/></operator><name pos:line="96" pos:column="37">s_size<pos:position pos:line="96" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="96" pos:column="44"/></argument_list></call><operator pos:line="96" pos:column="44">)<pos:position pos:line="96" pos:column="45"/></operator> <operator pos:line="96" pos:column="46">==<pos:position pos:line="96" pos:column="48"/></operator> <name pos:line="96" pos:column="49">NULL<pos:position pos:line="96" pos:column="53"/></name></expr>)<pos:position pos:line="96" pos:column="54"/></condition><then pos:line="96" pos:column="54"> <block pos:line="96" pos:column="55">{
	<expr_stmt><expr><name pos:line="97" pos:column="9">errvalid<pos:position pos:line="97" pos:column="17"/></name><operator pos:line="97" pos:column="17">++<pos:position pos:line="97" pos:column="19"/></operator></expr>;<pos:position pos:line="97" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="98" pos:column="9">strcpy<pos:position pos:line="98" pos:column="15"/></name><argument_list pos:line="98" pos:column="15">(<argument><expr><name pos:line="98" pos:column="16">errbuf<pos:position pos:line="98" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="98" pos:column="24">"readExports: "<pos:position pos:line="98" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="98" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="99" pos:column="9">strcat<pos:position pos:line="99" pos:column="15"/></name><argument_list pos:line="99" pos:column="15">(<argument><expr><name pos:line="99" pos:column="16">errbuf<pos:position pos:line="99" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="99" pos:column="24">strerror<pos:position pos:line="99" pos:column="32"/></name><argument_list pos:line="99" pos:column="32">(<argument><expr><name pos:line="99" pos:column="33">errno<pos:position pos:line="99" pos:column="38"/></name></expr></argument>)<pos:position pos:line="99" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="99" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="41"/></expr_stmt>
	<while pos:line="100" pos:column="9">while <condition pos:line="100" pos:column="15">(<expr><call><name pos:line="100" pos:column="16">ldclose<pos:position pos:line="100" pos:column="23"/></name><argument_list pos:line="100" pos:column="23">(<argument><expr><name pos:line="100" pos:column="24">ldp<pos:position pos:line="100" pos:column="27"/></name></expr></argument>)<pos:position pos:line="100" pos:column="28"/></argument_list></call> <operator pos:line="100" pos:column="29">==<pos:position pos:line="100" pos:column="31"/></operator> <name pos:line="100" pos:column="32">FAILURE<pos:position pos:line="100" pos:column="39"/></name></expr>)<pos:position pos:line="100" pos:column="40"/></condition><block type="pseudo"><empty_stmt pos:line="100" pos:column="40">;<pos:position pos:line="100" pos:column="41"/></empty_stmt></block></while>
	<return pos:line="101" pos:column="9">return <expr><operator pos:line="101" pos:column="16">-<pos:position pos:line="101" pos:column="17"/></operator><literal type="number" pos:line="101" pos:column="17">1<pos:position pos:line="101" pos:column="18"/></literal></expr>;<pos:position pos:line="101" pos:column="19"/></return>
    }<pos:position pos:line="102" pos:column="6"/></block></then></if>
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><call><name pos:line="103" pos:column="9">FSEEK<pos:position pos:line="103" pos:column="14"/></name><argument_list pos:line="103" pos:column="14">(<argument><expr><name pos:line="103" pos:column="15">ldp<pos:position pos:line="103" pos:column="18"/></name></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="20">sh<pos:position pos:line="103" pos:column="22"/></name><operator pos:line="103" pos:column="22">.<pos:position pos:line="103" pos:column="23"/></operator><name pos:line="103" pos:column="23">s_scnptr<pos:position pos:line="103" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="33">BEGINNING<pos:position pos:line="103" pos:column="42"/></name></expr></argument>)<pos:position pos:line="103" pos:column="43"/></argument_list></call> <operator pos:line="103" pos:column="44">!=<pos:position pos:line="103" pos:column="46"/></operator> <name pos:line="103" pos:column="47">OKFSEEK<pos:position pos:line="103" pos:column="54"/></name></expr>)<pos:position pos:line="103" pos:column="55"/></condition><then pos:line="103" pos:column="55"> <block pos:line="103" pos:column="56">{
	<expr_stmt><expr><name pos:line="104" pos:column="9">errvalid<pos:position pos:line="104" pos:column="17"/></name><operator pos:line="104" pos:column="17">++<pos:position pos:line="104" pos:column="19"/></operator></expr>;<pos:position pos:line="104" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="105" pos:column="9">strcpy<pos:position pos:line="105" pos:column="15"/></name><argument_list pos:line="105" pos:column="15">(<argument><expr><name pos:line="105" pos:column="16">errbuf<pos:position pos:line="105" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="24">"readExports: cannot seek to loader section"<pos:position pos:line="105" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="105" pos:column="70"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="106" pos:column="9">free<pos:position pos:line="106" pos:column="13"/></name><argument_list pos:line="106" pos:column="13">(<argument><expr><name pos:line="106" pos:column="14">ldbuf<pos:position pos:line="106" pos:column="19"/></name></expr></argument>)<pos:position pos:line="106" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="21"/></expr_stmt>
	<while pos:line="107" pos:column="9">while <condition pos:line="107" pos:column="15">(<expr><call><name pos:line="107" pos:column="16">ldclose<pos:position pos:line="107" pos:column="23"/></name><argument_list pos:line="107" pos:column="23">(<argument><expr><name pos:line="107" pos:column="24">ldp<pos:position pos:line="107" pos:column="27"/></name></expr></argument>)<pos:position pos:line="107" pos:column="28"/></argument_list></call> <operator pos:line="107" pos:column="29">==<pos:position pos:line="107" pos:column="31"/></operator> <name pos:line="107" pos:column="32">FAILURE<pos:position pos:line="107" pos:column="39"/></name></expr>)<pos:position pos:line="107" pos:column="40"/></condition><block type="pseudo"><empty_stmt pos:line="107" pos:column="40">;<pos:position pos:line="107" pos:column="41"/></empty_stmt></block></while>
	<return pos:line="108" pos:column="9">return <expr><operator pos:line="108" pos:column="16">-<pos:position pos:line="108" pos:column="17"/></operator><literal type="number" pos:line="108" pos:column="17">1<pos:position pos:line="108" pos:column="18"/></literal></expr>;<pos:position pos:line="108" pos:column="19"/></return>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>
    <if pos:line="110" pos:column="5">if <condition pos:line="110" pos:column="8">(<expr><call><name pos:line="110" pos:column="9">FREAD<pos:position pos:line="110" pos:column="14"/></name><argument_list pos:line="110" pos:column="14">(<argument><expr><name pos:line="110" pos:column="15">ldbuf<pos:position pos:line="110" pos:column="20"/></name></expr></argument>, <argument><expr><name><name pos:line="110" pos:column="22">sh<pos:position pos:line="110" pos:column="24"/></name><operator pos:line="110" pos:column="24">.<pos:position pos:line="110" pos:column="25"/></operator><name pos:line="110" pos:column="25">s_size<pos:position pos:line="110" pos:column="31"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="33">1<pos:position pos:line="110" pos:column="34"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="36">ldp<pos:position pos:line="110" pos:column="39"/></name></expr></argument>)<pos:position pos:line="110" pos:column="40"/></argument_list></call> <operator pos:line="110" pos:column="41">!=<pos:position pos:line="110" pos:column="43"/></operator> <literal type="number" pos:line="110" pos:column="44">1<pos:position pos:line="110" pos:column="45"/></literal></expr>)<pos:position pos:line="110" pos:column="46"/></condition><then pos:line="110" pos:column="46"> <block pos:line="110" pos:column="47">{
	<expr_stmt><expr><name pos:line="111" pos:column="9">errvalid<pos:position pos:line="111" pos:column="17"/></name><operator pos:line="111" pos:column="17">++<pos:position pos:line="111" pos:column="19"/></operator></expr>;<pos:position pos:line="111" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="112" pos:column="9">strcpy<pos:position pos:line="112" pos:column="15"/></name><argument_list pos:line="112" pos:column="15">(<argument><expr><name pos:line="112" pos:column="16">errbuf<pos:position pos:line="112" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="112" pos:column="24">"readExports: cannot read loader section"<pos:position pos:line="112" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="112" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="67"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="113" pos:column="9">free<pos:position pos:line="113" pos:column="13"/></name><argument_list pos:line="113" pos:column="13">(<argument><expr><name pos:line="113" pos:column="14">ldbuf<pos:position pos:line="113" pos:column="19"/></name></expr></argument>)<pos:position pos:line="113" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="21"/></expr_stmt>
	<while pos:line="114" pos:column="9">while <condition pos:line="114" pos:column="15">(<expr><call><name pos:line="114" pos:column="16">ldclose<pos:position pos:line="114" pos:column="23"/></name><argument_list pos:line="114" pos:column="23">(<argument><expr><name pos:line="114" pos:column="24">ldp<pos:position pos:line="114" pos:column="27"/></name></expr></argument>)<pos:position pos:line="114" pos:column="28"/></argument_list></call> <operator pos:line="114" pos:column="29">==<pos:position pos:line="114" pos:column="31"/></operator> <name pos:line="114" pos:column="32">FAILURE<pos:position pos:line="114" pos:column="39"/></name></expr>)<pos:position pos:line="114" pos:column="40"/></condition><block type="pseudo"><empty_stmt pos:line="114" pos:column="40">;<pos:position pos:line="114" pos:column="41"/></empty_stmt></block></while>
	<return pos:line="115" pos:column="9">return <expr><operator pos:line="115" pos:column="16">-<pos:position pos:line="115" pos:column="17"/></operator><literal type="number" pos:line="115" pos:column="17">1<pos:position pos:line="115" pos:column="18"/></literal></expr>;<pos:position pos:line="115" pos:column="19"/></return>
    }<pos:position pos:line="116" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="117" pos:column="5">lhp<pos:position pos:line="117" pos:column="8"/></name> <operator pos:line="117" pos:column="9">=<pos:position pos:line="117" pos:column="10"/></operator> <operator pos:line="117" pos:column="11">(<pos:position pos:line="117" pos:column="12"/></operator><name pos:line="117" pos:column="12">LDHDR<pos:position pos:line="117" pos:column="17"/></name> <operator pos:line="117" pos:column="18">*<pos:position pos:line="117" pos:column="19"/></operator><operator pos:line="117" pos:column="19">)<pos:position pos:line="117" pos:column="20"/></operator> <name pos:line="117" pos:column="21">ldbuf<pos:position pos:line="117" pos:column="26"/></name></expr>;<pos:position pos:line="117" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="118" pos:column="5">ls<pos:position pos:line="118" pos:column="7"/></name> <operator pos:line="118" pos:column="8">=<pos:position pos:line="118" pos:column="9"/></operator> <operator pos:line="118" pos:column="10">(<pos:position pos:line="118" pos:column="11"/></operator><name pos:line="118" pos:column="11">LDSYM<pos:position pos:line="118" pos:column="16"/></name> <operator pos:line="118" pos:column="17">*<pos:position pos:line="118" pos:column="18"/></operator><operator pos:line="118" pos:column="18">)<pos:position pos:line="118" pos:column="19"/></operator> <operator pos:line="118" pos:column="20">(<pos:position pos:line="118" pos:column="21"/></operator><name pos:line="118" pos:column="21">ldbuf<pos:position pos:line="118" pos:column="26"/></name> <operator pos:line="118" pos:column="27">+<pos:position pos:line="118" pos:column="28"/></operator> <name pos:line="118" pos:column="29">LDHDRSZ<pos:position pos:line="118" pos:column="36"/></name><operator pos:line="118" pos:column="36">)<pos:position pos:line="118" pos:column="37"/></operator></expr>;<pos:position pos:line="118" pos:column="38"/></expr_stmt>
    <comment type="block" pos:line="119" pos:column="5">/*
     * Count the number of exports to include in our export table.
     */</comment>
    <for pos:line="122" pos:column="5">for <control pos:line="122" pos:column="9">(<init><expr><name pos:line="122" pos:column="10">i<pos:position pos:line="122" pos:column="11"/></name> <operator pos:line="122" pos:column="12">=<pos:position pos:line="122" pos:column="13"/></operator> <name><name pos:line="122" pos:column="14">lhp<pos:position pos:line="122" pos:column="17"/></name><operator pos:line="122" pos:column="17">-&gt;<pos:position pos:line="122" pos:column="22"/></operator><name pos:line="122" pos:column="19">l_nsyms<pos:position pos:line="122" pos:column="26"/></name></name></expr>;<pos:position pos:line="122" pos:column="27"/></init> <condition><expr><name pos:line="122" pos:column="28">i<pos:position pos:line="122" pos:column="29"/></name></expr>;<pos:position pos:line="122" pos:column="30"/></condition> <incr><expr><name pos:line="122" pos:column="31">i<pos:position pos:line="122" pos:column="32"/></name><operator pos:line="122" pos:column="32">--<pos:position pos:line="122" pos:column="34"/></operator></expr><operator pos:line="122" pos:column="34">,<pos:position pos:line="122" pos:column="35"/></operator> <expr><name pos:line="122" pos:column="36">ls<pos:position pos:line="122" pos:column="38"/></name><operator pos:line="122" pos:column="38">++<pos:position pos:line="122" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="122" pos:column="41"/></control> <block pos:line="122" pos:column="42">{
	<if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><operator pos:line="123" pos:column="13">!<pos:position pos:line="123" pos:column="14"/></operator><call><name pos:line="123" pos:column="14">LDR_EXPORT<pos:position pos:line="123" pos:column="24"/></name><argument_list pos:line="123" pos:column="24">(<argument><expr><operator pos:line="123" pos:column="25">*<pos:position pos:line="123" pos:column="26"/></operator><name pos:line="123" pos:column="26">ls<pos:position pos:line="123" pos:column="28"/></name></expr></argument>)<pos:position pos:line="123" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="123" pos:column="30"/></condition><then pos:line="123" pos:column="30">
	    <block type="pseudo"><continue pos:line="124" pos:column="13">continue;<pos:position pos:line="124" pos:column="22"/></continue></block></then></if>
	<expr_stmt><expr><name><name pos:line="125" pos:column="9">mp<pos:position pos:line="125" pos:column="11"/></name><operator pos:line="125" pos:column="11">-&gt;<pos:position pos:line="125" pos:column="16"/></operator><name pos:line="125" pos:column="13">nExports<pos:position pos:line="125" pos:column="21"/></name></name><operator pos:line="125" pos:column="21">++<pos:position pos:line="125" pos:column="23"/></operator></expr>;<pos:position pos:line="125" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="126" pos:column="6"/></block></for>
    <if pos:line="127" pos:column="5">if <condition pos:line="127" pos:column="8">(<expr><operator pos:line="127" pos:column="9">(<pos:position pos:line="127" pos:column="10"/></operator><name><name pos:line="127" pos:column="10">mp<pos:position pos:line="127" pos:column="12"/></name><operator pos:line="127" pos:column="12">-&gt;<pos:position pos:line="127" pos:column="17"/></operator><name pos:line="127" pos:column="14">exports<pos:position pos:line="127" pos:column="21"/></name></name> <operator pos:line="127" pos:column="22">=<pos:position pos:line="127" pos:column="23"/></operator> <operator pos:line="127" pos:column="24">(<pos:position pos:line="127" pos:column="25"/></operator><name pos:line="127" pos:column="25">ExportPtr<pos:position pos:line="127" pos:column="34"/></name><operator pos:line="127" pos:column="34">)<pos:position pos:line="127" pos:column="35"/></operator> <call><name pos:line="127" pos:column="36">calloc<pos:position pos:line="127" pos:column="42"/></name><argument_list pos:line="127" pos:column="42">(<argument><expr><name><name pos:line="127" pos:column="43">mp<pos:position pos:line="127" pos:column="45"/></name><operator pos:line="127" pos:column="45">-&gt;<pos:position pos:line="127" pos:column="50"/></operator><name pos:line="127" pos:column="47">nExports<pos:position pos:line="127" pos:column="55"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="127" pos:column="57">sizeof<argument_list pos:line="127" pos:column="63">(<argument><expr><operator pos:line="127" pos:column="64">*<pos:position pos:line="127" pos:column="65"/></operator><name><name pos:line="127" pos:column="65">mp<pos:position pos:line="127" pos:column="67"/></name><operator pos:line="127" pos:column="67">-&gt;<pos:position pos:line="127" pos:column="72"/></operator><name pos:line="127" pos:column="69">exports<pos:position pos:line="127" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="127" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="127" pos:column="78"/></argument_list></call><operator pos:line="127" pos:column="78">)<pos:position pos:line="127" pos:column="79"/></operator> <operator pos:line="127" pos:column="80">==<pos:position pos:line="127" pos:column="82"/></operator> <name pos:line="127" pos:column="83">NULL<pos:position pos:line="127" pos:column="87"/></name></expr>)<pos:position pos:line="127" pos:column="88"/></condition><then pos:line="127" pos:column="88"> <block pos:line="127" pos:column="89">{
	<expr_stmt><expr><name pos:line="128" pos:column="9">errvalid<pos:position pos:line="128" pos:column="17"/></name><operator pos:line="128" pos:column="17">++<pos:position pos:line="128" pos:column="19"/></operator></expr>;<pos:position pos:line="128" pos:column="20"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="129" pos:column="9">strcpy<pos:position pos:line="129" pos:column="15"/></name><argument_list pos:line="129" pos:column="15">(<argument><expr><name pos:line="129" pos:column="16">errbuf<pos:position pos:line="129" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="129" pos:column="24">"readExports: "<pos:position pos:line="129" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="130" pos:column="9">strcat<pos:position pos:line="130" pos:column="15"/></name><argument_list pos:line="130" pos:column="15">(<argument><expr><name pos:line="130" pos:column="16">errbuf<pos:position pos:line="130" pos:column="22"/></name></expr></argument>, <argument><expr><call><name pos:line="130" pos:column="24">strerror<pos:position pos:line="130" pos:column="32"/></name><argument_list pos:line="130" pos:column="32">(<argument><expr><name pos:line="130" pos:column="33">errno<pos:position pos:line="130" pos:column="38"/></name></expr></argument>)<pos:position pos:line="130" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="130" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="130" pos:column="41"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="131" pos:column="9">free<pos:position pos:line="131" pos:column="13"/></name><argument_list pos:line="131" pos:column="13">(<argument><expr><name pos:line="131" pos:column="14">ldbuf<pos:position pos:line="131" pos:column="19"/></name></expr></argument>)<pos:position pos:line="131" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="21"/></expr_stmt>
	<while pos:line="132" pos:column="9">while <condition pos:line="132" pos:column="15">(<expr><call><name pos:line="132" pos:column="16">ldclose<pos:position pos:line="132" pos:column="23"/></name><argument_list pos:line="132" pos:column="23">(<argument><expr><name pos:line="132" pos:column="24">ldp<pos:position pos:line="132" pos:column="27"/></name></expr></argument>)<pos:position pos:line="132" pos:column="28"/></argument_list></call> <operator pos:line="132" pos:column="29">==<pos:position pos:line="132" pos:column="31"/></operator> <name pos:line="132" pos:column="32">FAILURE<pos:position pos:line="132" pos:column="39"/></name></expr>)<pos:position pos:line="132" pos:column="40"/></condition><block type="pseudo"><empty_stmt pos:line="132" pos:column="40">;<pos:position pos:line="132" pos:column="41"/></empty_stmt></block></while>
	<return pos:line="133" pos:column="9">return <expr><operator pos:line="133" pos:column="16">-<pos:position pos:line="133" pos:column="17"/></operator><literal type="number" pos:line="133" pos:column="17">1<pos:position pos:line="133" pos:column="18"/></literal></expr>;<pos:position pos:line="133" pos:column="19"/></return>
    }<pos:position pos:line="134" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="135" pos:column="5">/*
     * Fill in the export table. All entries are relative to
     * the beginning of the data origin.
     */</comment>
    <expr_stmt><expr><name pos:line="139" pos:column="5">ep<pos:position pos:line="139" pos:column="7"/></name> <operator pos:line="139" pos:column="8">=<pos:position pos:line="139" pos:column="9"/></operator> <name><name pos:line="139" pos:column="10">mp<pos:position pos:line="139" pos:column="12"/></name><operator pos:line="139" pos:column="12">-&gt;<pos:position pos:line="139" pos:column="17"/></operator><name pos:line="139" pos:column="14">exports<pos:position pos:line="139" pos:column="21"/></name></name></expr>;<pos:position pos:line="139" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="140" pos:column="5">ls<pos:position pos:line="140" pos:column="7"/></name> <operator pos:line="140" pos:column="8">=<pos:position pos:line="140" pos:column="9"/></operator> <operator pos:line="140" pos:column="10">(<pos:position pos:line="140" pos:column="11"/></operator><name pos:line="140" pos:column="11">LDSYM<pos:position pos:line="140" pos:column="16"/></name> <operator pos:line="140" pos:column="17">*<pos:position pos:line="140" pos:column="18"/></operator><operator pos:line="140" pos:column="18">)<pos:position pos:line="140" pos:column="19"/></operator> <operator pos:line="140" pos:column="20">(<pos:position pos:line="140" pos:column="21"/></operator><name pos:line="140" pos:column="21">ldbuf<pos:position pos:line="140" pos:column="26"/></name> <operator pos:line="140" pos:column="27">+<pos:position pos:line="140" pos:column="28"/></operator> <name pos:line="140" pos:column="29">LDHDRSZ<pos:position pos:line="140" pos:column="36"/></name><operator pos:line="140" pos:column="36">)<pos:position pos:line="140" pos:column="37"/></operator></expr>;<pos:position pos:line="140" pos:column="38"/></expr_stmt>
    <for pos:line="141" pos:column="5">for <control pos:line="141" pos:column="9">(<init><expr><name pos:line="141" pos:column="10">i<pos:position pos:line="141" pos:column="11"/></name> <operator pos:line="141" pos:column="12">=<pos:position pos:line="141" pos:column="13"/></operator> <name><name pos:line="141" pos:column="14">lhp<pos:position pos:line="141" pos:column="17"/></name><operator pos:line="141" pos:column="17">-&gt;<pos:position pos:line="141" pos:column="22"/></operator><name pos:line="141" pos:column="19">l_nsyms<pos:position pos:line="141" pos:column="26"/></name></name></expr>;<pos:position pos:line="141" pos:column="27"/></init> <condition><expr><name pos:line="141" pos:column="28">i<pos:position pos:line="141" pos:column="29"/></name></expr>;<pos:position pos:line="141" pos:column="30"/></condition> <incr><expr><name pos:line="141" pos:column="31">i<pos:position pos:line="141" pos:column="32"/></name><operator pos:line="141" pos:column="32">--<pos:position pos:line="141" pos:column="34"/></operator></expr><operator pos:line="141" pos:column="34">,<pos:position pos:line="141" pos:column="35"/></operator> <expr><name pos:line="141" pos:column="36">ls<pos:position pos:line="141" pos:column="38"/></name><operator pos:line="141" pos:column="38">++<pos:position pos:line="141" pos:column="40"/></operator></expr></incr>)<pos:position pos:line="141" pos:column="41"/></control> <block pos:line="141" pos:column="42">{
	<decl_stmt><decl><type><name pos:line="142" pos:column="9">char<pos:position pos:line="142" pos:column="13"/></name> <modifier pos:line="142" pos:column="14">*<pos:position pos:line="142" pos:column="15"/></modifier></type><name pos:line="142" pos:column="15">symname<pos:position pos:line="142" pos:column="22"/></name></decl>;<pos:position pos:line="142" pos:column="23"/></decl_stmt>
	<decl_stmt><decl><type><name pos:line="143" pos:column="9">char<pos:position pos:line="143" pos:column="13"/></name></type> <name><name pos:line="143" pos:column="14">tmpsym<pos:position pos:line="143" pos:column="20"/></name><index pos:line="143" pos:column="20">[<expr><name pos:line="143" pos:column="21">SYMNMLEN<pos:position pos:line="143" pos:column="29"/></name> <operator pos:line="143" pos:column="30">+<pos:position pos:line="143" pos:column="31"/></operator> <literal type="number" pos:line="143" pos:column="32">1<pos:position pos:line="143" pos:column="33"/></literal></expr>]<pos:position pos:line="143" pos:column="34"/></index></name></decl>;<pos:position pos:line="143" pos:column="35"/></decl_stmt>
	<if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><operator pos:line="144" pos:column="13">!<pos:position pos:line="144" pos:column="14"/></operator><call><name pos:line="144" pos:column="14">LDR_EXPORT<pos:position pos:line="144" pos:column="24"/></name><argument_list pos:line="144" pos:column="24">(<argument><expr><operator pos:line="144" pos:column="25">*<pos:position pos:line="144" pos:column="26"/></operator><name pos:line="144" pos:column="26">ls<pos:position pos:line="144" pos:column="28"/></name></expr></argument>)<pos:position pos:line="144" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="144" pos:column="30"/></condition><then pos:line="144" pos:column="30">
	    <block type="pseudo"><continue pos:line="145" pos:column="13">continue;<pos:position pos:line="145" pos:column="22"/></continue></block></then></if>
	<if pos:line="146" pos:column="9">if <condition pos:line="146" pos:column="12">(<expr><name><name pos:line="146" pos:column="13">ls<pos:position pos:line="146" pos:column="15"/></name><operator pos:line="146" pos:column="15">-&gt;<pos:position pos:line="146" pos:column="20"/></operator><name pos:line="146" pos:column="17">l_zeroes<pos:position pos:line="146" pos:column="25"/></name></name> <operator pos:line="146" pos:column="26">==<pos:position pos:line="146" pos:column="28"/></operator> <literal type="number" pos:line="146" pos:column="29">0<pos:position pos:line="146" pos:column="30"/></literal></expr>)<pos:position pos:line="146" pos:column="31"/></condition><then pos:line="146" pos:column="31">
	    <block type="pseudo"><expr_stmt><expr><name pos:line="147" pos:column="13">symname<pos:position pos:line="147" pos:column="20"/></name> <operator pos:line="147" pos:column="21">=<pos:position pos:line="147" pos:column="22"/></operator> <name><name pos:line="147" pos:column="23">ls<pos:position pos:line="147" pos:column="25"/></name><operator pos:line="147" pos:column="25">-&gt;<pos:position pos:line="147" pos:column="30"/></operator><name pos:line="147" pos:column="27">l_offset<pos:position pos:line="147" pos:column="35"/></name></name> <operator pos:line="147" pos:column="36">+<pos:position pos:line="147" pos:column="37"/></operator> <name><name pos:line="147" pos:column="38">lhp<pos:position pos:line="147" pos:column="41"/></name><operator pos:line="147" pos:column="41">-&gt;<pos:position pos:line="147" pos:column="46"/></operator><name pos:line="147" pos:column="43">l_stoff<pos:position pos:line="147" pos:column="50"/></name></name> <operator pos:line="147" pos:column="51">+<pos:position pos:line="147" pos:column="52"/></operator> <name pos:line="147" pos:column="53">ldbuf<pos:position pos:line="147" pos:column="58"/></name></expr>;<pos:position pos:line="147" pos:column="59"/></expr_stmt></block></then>
	<else pos:line="148" pos:column="9">else <block pos:line="148" pos:column="14">{
	    <comment type="block" pos:line="149" pos:column="13">/*
	     * The l_name member is not zero terminated, we
	     * must copy the first SYMNMLEN chars and make
	     * sure we have a zero byte at the end.
	     */</comment>
	    <expr_stmt><expr><call><name pos:line="154" pos:column="13">strncpy<pos:position pos:line="154" pos:column="20"/></name><argument_list pos:line="154" pos:column="20">(<argument><expr><name pos:line="154" pos:column="21">tmpsym<pos:position pos:line="154" pos:column="27"/></name></expr></argument>, <argument><expr><name><name pos:line="154" pos:column="29">ls<pos:position pos:line="154" pos:column="31"/></name><operator pos:line="154" pos:column="31">-&gt;<pos:position pos:line="154" pos:column="36"/></operator><name pos:line="154" pos:column="33">l_name<pos:position pos:line="154" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="41">SYMNMLEN<pos:position pos:line="154" pos:column="49"/></name></expr></argument>)<pos:position pos:line="154" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="51"/></expr_stmt>
	    <expr_stmt><expr><name><name pos:line="155" pos:column="13">tmpsym<pos:position pos:line="155" pos:column="19"/></name><index pos:line="155" pos:column="19">[<expr><name pos:line="155" pos:column="20">SYMNMLEN<pos:position pos:line="155" pos:column="28"/></name></expr>]<pos:position pos:line="155" pos:column="29"/></index></name> <operator pos:line="155" pos:column="30">=<pos:position pos:line="155" pos:column="31"/></operator> <literal type="char" pos:line="155" pos:column="32">'\0'<pos:position pos:line="155" pos:column="36"/></literal></expr>;<pos:position pos:line="155" pos:column="37"/></expr_stmt>
	    <expr_stmt><expr><name pos:line="156" pos:column="13">symname<pos:position pos:line="156" pos:column="20"/></name> <operator pos:line="156" pos:column="21">=<pos:position pos:line="156" pos:column="22"/></operator> <name pos:line="156" pos:column="23">tmpsym<pos:position pos:line="156" pos:column="29"/></name></expr>;<pos:position pos:line="156" pos:column="30"/></expr_stmt>
	}<pos:position pos:line="157" pos:column="10"/></block></else></if>
	<expr_stmt><expr><name><name pos:line="158" pos:column="9">ep<pos:position pos:line="158" pos:column="11"/></name><operator pos:line="158" pos:column="11">-&gt;<pos:position pos:line="158" pos:column="16"/></operator><name pos:line="158" pos:column="13">name<pos:position pos:line="158" pos:column="17"/></name></name> <operator pos:line="158" pos:column="18">=<pos:position pos:line="158" pos:column="19"/></operator> <call><name pos:line="158" pos:column="20">strdup<pos:position pos:line="158" pos:column="26"/></name><argument_list pos:line="158" pos:column="26">(<argument><expr><name pos:line="158" pos:column="27">symname<pos:position pos:line="158" pos:column="34"/></name></expr></argument>)<pos:position pos:line="158" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="36"/></expr_stmt>
	<expr_stmt><expr><name><name pos:line="159" pos:column="9">ep<pos:position pos:line="159" pos:column="11"/></name><operator pos:line="159" pos:column="11">-&gt;<pos:position pos:line="159" pos:column="16"/></operator><name pos:line="159" pos:column="13">addr<pos:position pos:line="159" pos:column="17"/></name></name> <operator pos:line="159" pos:column="18">=<pos:position pos:line="159" pos:column="19"/></operator> <operator pos:line="159" pos:column="20">(<pos:position pos:line="159" pos:column="21"/></operator><name pos:line="159" pos:column="21">void<pos:position pos:line="159" pos:column="25"/></name> <operator pos:line="159" pos:column="26">*<pos:position pos:line="159" pos:column="27"/></operator><operator pos:line="159" pos:column="27">)<pos:position pos:line="159" pos:column="28"/></operator> <operator pos:line="159" pos:column="29">(<pos:position pos:line="159" pos:column="30"/></operator><operator pos:line="159" pos:column="30">(<pos:position pos:line="159" pos:column="31"/></operator><name pos:line="159" pos:column="31">unsigned<pos:position pos:line="159" pos:column="39"/></name> <name pos:line="159" pos:column="40">long<pos:position pos:line="159" pos:column="44"/></name><operator pos:line="159" pos:column="44">)<pos:position pos:line="159" pos:column="45"/></operator> <name pos:line="159" pos:column="46">dataorg<pos:position pos:line="159" pos:column="53"/></name> <operator pos:line="159" pos:column="54">+<pos:position pos:line="159" pos:column="55"/></operator>
			     <name><name pos:line="160" pos:column="30">ls<pos:position pos:line="160" pos:column="32"/></name><operator pos:line="160" pos:column="32">-&gt;<pos:position pos:line="160" pos:column="37"/></operator><name pos:line="160" pos:column="34">l_value<pos:position pos:line="160" pos:column="41"/></name></name> <operator pos:line="160" pos:column="42">-<pos:position pos:line="160" pos:column="43"/></operator> <name><name pos:line="160" pos:column="44">shdata<pos:position pos:line="160" pos:column="50"/></name><operator pos:line="160" pos:column="50">.<pos:position pos:line="160" pos:column="51"/></operator><name pos:line="160" pos:column="51">s_vaddr<pos:position pos:line="160" pos:column="58"/></name></name><operator pos:line="160" pos:column="58">)<pos:position pos:line="160" pos:column="59"/></operator></expr>;<pos:position pos:line="160" pos:column="60"/></expr_stmt>
	<expr_stmt><expr><name pos:line="161" pos:column="9">ep<pos:position pos:line="161" pos:column="11"/></name><operator pos:line="161" pos:column="11">++<pos:position pos:line="161" pos:column="13"/></operator></expr>;<pos:position pos:line="161" pos:column="14"/></expr_stmt>
    }<pos:position pos:line="162" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="163" pos:column="5">free<pos:position pos:line="163" pos:column="9"/></name><argument_list pos:line="163" pos:column="9">(<argument><expr><name pos:line="163" pos:column="10">ldbuf<pos:position pos:line="163" pos:column="15"/></name></expr></argument>)<pos:position pos:line="163" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="17"/></expr_stmt>
    <while pos:line="164" pos:column="5">while <condition pos:line="164" pos:column="11">(<expr><call><name pos:line="164" pos:column="12">ldclose<pos:position pos:line="164" pos:column="19"/></name><argument_list pos:line="164" pos:column="19">(<argument><expr><name pos:line="164" pos:column="20">ldp<pos:position pos:line="164" pos:column="23"/></name></expr></argument>)<pos:position pos:line="164" pos:column="24"/></argument_list></call> <operator pos:line="164" pos:column="25">==<pos:position pos:line="164" pos:column="27"/></operator> <name pos:line="164" pos:column="28">FAILURE<pos:position pos:line="164" pos:column="35"/></name></expr>)<pos:position pos:line="164" pos:column="36"/></condition><block type="pseudo"><empty_stmt pos:line="164" pos:column="36">;<pos:position pos:line="164" pos:column="37"/></empty_stmt></block></while>
    <return pos:line="165" pos:column="5">return <expr><literal type="number" pos:line="165" pos:column="12">0<pos:position pos:line="165" pos:column="13"/></literal></expr>;<pos:position pos:line="165" pos:column="14"/></return>
}<pos:position pos:line="166" pos:column="2"/></block></function></unit>
