<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1341_httpd-2.0.55.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">handle_fsize<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">include_ctx_t<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">ctx<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">apr_bucket_brigade<pos:position pos:line="1" pos:column="63"/></name> <modifier pos:line="1" pos:column="64">*<pos:position pos:line="1" pos:column="65"/></modifier><modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">bb<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>, 
                        <parameter><decl><type><name pos:line="2" pos:column="25">request_rec<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">r<pos:position pos:line="2" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="41">ap_filter_t<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">f<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">apr_bucket<pos:position pos:line="2" pos:column="67"/></name> <modifier pos:line="2" pos:column="68">*<pos:position pos:line="2" pos:column="69"/></modifier></type><name pos:line="2" pos:column="69">head_ptr<pos:position pos:line="2" pos:column="77"/></name></decl></parameter>, 
                        <parameter><decl><type><name pos:line="3" pos:column="25">apr_bucket<pos:position pos:line="3" pos:column="35"/></name> <modifier pos:line="3" pos:column="36">*<pos:position pos:line="3" pos:column="37"/></modifier><modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">inserted_head<pos:position pos:line="3" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="52"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">tag<pos:position pos:line="5" pos:column="14"/></name>     <init pos:line="5" pos:column="19">= <expr><name pos:line="5" pos:column="21">NULL<pos:position pos:line="5" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">tag_val<pos:position pos:line="6" pos:column="18"/></name> <init pos:line="6" pos:column="19">= <expr><name pos:line="6" pos:column="21">NULL<pos:position pos:line="6" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_finfo_t<pos:position pos:line="7" pos:column="16"/></name></type>  <name pos:line="7" pos:column="18">finfo<pos:position pos:line="7" pos:column="23"/></name></decl>;<pos:position pos:line="7" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_size_t<pos:position pos:line="8" pos:column="15"/></name></type>  <name pos:line="8" pos:column="17">s_len<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_bucket<pos:position pos:line="9" pos:column="15"/></name>   <modifier pos:line="9" pos:column="18">*<pos:position pos:line="9" pos:column="19"/></modifier></type><name pos:line="9" pos:column="19">tmp_buck<pos:position pos:line="9" pos:column="27"/></name></decl>;<pos:position pos:line="9" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">parsed_string<pos:position pos:line="10" pos:column="24"/></name></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="12" pos:column="5">*<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">inserted_head<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">=<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">NULL<pos:position pos:line="12" pos:column="26"/></name></expr>;<pos:position pos:line="12" pos:column="27"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">ctx<pos:position pos:line="13" pos:column="12"/></name><operator pos:line="13" pos:column="12">-&gt;<pos:position pos:line="13" pos:column="17"/></operator><name pos:line="13" pos:column="14">flags<pos:position pos:line="13" pos:column="19"/></name></name> <operator pos:line="13" pos:column="20">&amp;<pos:position pos:line="13" pos:column="25"/></operator> <name pos:line="13" pos:column="22">FLAG_PRINTING<pos:position pos:line="13" pos:column="35"/></name></expr>)<pos:position pos:line="13" pos:column="36"/></condition><then pos:line="13" pos:column="36"> <block pos:line="13" pos:column="37">{
        <while pos:line="14" pos:column="9">while <condition pos:line="14" pos:column="15">(<expr><literal type="number" pos:line="14" pos:column="16">1<pos:position pos:line="14" pos:column="17"/></literal></expr>)<pos:position pos:line="14" pos:column="18"/></condition> <block pos:line="14" pos:column="19">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">ap_ssi_get_tag_and_value<pos:position pos:line="15" pos:column="37"/></name><argument_list pos:line="15" pos:column="37">(<argument><expr><name pos:line="15" pos:column="38">ctx<pos:position pos:line="15" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="43">&amp;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="44">tag<pos:position pos:line="15" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="15" pos:column="49">&amp;<pos:position pos:line="15" pos:column="54"/></operator><name pos:line="15" pos:column="50">tag_val<pos:position pos:line="15" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="59">1<pos:position pos:line="15" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
            <if pos:line="16" pos:column="13">if <condition pos:line="16" pos:column="16">(<expr><name pos:line="16" pos:column="17">tag_val<pos:position pos:line="16" pos:column="24"/></name> <operator pos:line="16" pos:column="25">==<pos:position pos:line="16" pos:column="27"/></operator> <name pos:line="16" pos:column="28">NULL<pos:position pos:line="16" pos:column="32"/></name></expr>)<pos:position pos:line="16" pos:column="33"/></condition><then pos:line="16" pos:column="33"> <block pos:line="16" pos:column="34">{
                <if pos:line="17" pos:column="17">if <condition pos:line="17" pos:column="20">(<expr><name pos:line="17" pos:column="21">tag<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">==<pos:position pos:line="17" pos:column="27"/></operator> <name pos:line="17" pos:column="28">NULL<pos:position pos:line="17" pos:column="32"/></name></expr>)<pos:position pos:line="17" pos:column="33"/></condition><then pos:line="17" pos:column="33"> <block pos:line="17" pos:column="34">{
                    <return pos:line="18" pos:column="21">return <expr><literal type="number" pos:line="18" pos:column="28">0<pos:position pos:line="18" pos:column="29"/></literal></expr>;<pos:position pos:line="18" pos:column="30"/></return>
                }<pos:position pos:line="19" pos:column="18"/></block></then>
                <else pos:line="20" pos:column="17">else <block pos:line="20" pos:column="22">{
                    <return pos:line="21" pos:column="21">return <expr><literal type="number" pos:line="21" pos:column="28">1<pos:position pos:line="21" pos:column="29"/></literal></expr>;<pos:position pos:line="21" pos:column="30"/></return>
                }<pos:position pos:line="22" pos:column="18"/></block></else></if>
            }<pos:position pos:line="23" pos:column="14"/></block></then>
            <else pos:line="24" pos:column="13">else <block pos:line="24" pos:column="18">{
                <expr_stmt><expr><name pos:line="25" pos:column="17">parsed_string<pos:position pos:line="25" pos:column="30"/></name> <operator pos:line="25" pos:column="31">=<pos:position pos:line="25" pos:column="32"/></operator> <call><name pos:line="25" pos:column="33">ap_ssi_parse_string<pos:position pos:line="25" pos:column="52"/></name><argument_list pos:line="25" pos:column="52">(<argument><expr><name pos:line="25" pos:column="53">r<pos:position pos:line="25" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="56">ctx<pos:position pos:line="25" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="61">tag_val<pos:position pos:line="25" pos:column="68"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="70">NULL<pos:position pos:line="25" pos:column="74"/></name></expr></argument>, 
                                                    <argument><expr><name pos:line="26" pos:column="53">MAX_STRING_LEN<pos:position pos:line="26" pos:column="67"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="69">0<pos:position pos:line="26" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="72"/></expr_stmt>
                <if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">!<pos:position pos:line="27" pos:column="22"/></operator><call><name pos:line="27" pos:column="22">find_file<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">r<pos:position pos:line="27" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="35">"fsize"<pos:position pos:line="27" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">tag<pos:position pos:line="27" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="49">parsed_string<pos:position pos:line="27" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="27" pos:column="64">&amp;<pos:position pos:line="27" pos:column="69"/></operator><name pos:line="27" pos:column="65">finfo<pos:position pos:line="27" pos:column="70"/></name></expr></argument>)<pos:position pos:line="27" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="27" pos:column="72"/></condition><then pos:line="27" pos:column="72"> <block pos:line="27" pos:column="73">{
                    <comment type="block" pos:line="28" pos:column="21">/* XXX: if we *know* we're going to have to copy the
                     * thing off of the stack anyway, why not palloc buff
                     * instead of sticking it on the stack; then we can just
                     * use a pool bucket and skip the copy
                     */</comment>
                    <decl_stmt><decl><type><name pos:line="33" pos:column="21">char<pos:position pos:line="33" pos:column="25"/></name></type> <name><name pos:line="33" pos:column="26">buff<pos:position pos:line="33" pos:column="30"/></name><index pos:line="33" pos:column="30">[<expr><literal type="number" pos:line="33" pos:column="31">50<pos:position pos:line="33" pos:column="33"/></literal></expr>]<pos:position pos:line="33" pos:column="34"/></index></name></decl>;<pos:position pos:line="33" pos:column="35"/></decl_stmt>

                    <if pos:line="35" pos:column="21">if <condition pos:line="35" pos:column="24">(<expr><operator pos:line="35" pos:column="25">!<pos:position pos:line="35" pos:column="26"/></operator><operator pos:line="35" pos:column="26">(<pos:position pos:line="35" pos:column="27"/></operator><name><name pos:line="35" pos:column="27">ctx<pos:position pos:line="35" pos:column="30"/></name><operator pos:line="35" pos:column="30">-&gt;<pos:position pos:line="35" pos:column="35"/></operator><name pos:line="35" pos:column="32">flags<pos:position pos:line="35" pos:column="37"/></name></name> <operator pos:line="35" pos:column="38">&amp;<pos:position pos:line="35" pos:column="43"/></operator> <name pos:line="35" pos:column="40">FLAG_SIZE_IN_BYTES<pos:position pos:line="35" pos:column="58"/></name><operator pos:line="35" pos:column="58">)<pos:position pos:line="35" pos:column="59"/></operator></expr>)<pos:position pos:line="35" pos:column="60"/></condition><then pos:line="35" pos:column="60"> <block pos:line="35" pos:column="61">{
                        <expr_stmt><expr><call><name pos:line="36" pos:column="25">apr_strfsize<pos:position pos:line="36" pos:column="37"/></name><argument_list pos:line="36" pos:column="37">(<argument><expr><name><name pos:line="36" pos:column="38">finfo<pos:position pos:line="36" pos:column="43"/></name><operator pos:line="36" pos:column="43">.<pos:position pos:line="36" pos:column="44"/></operator><name pos:line="36" pos:column="44">size<pos:position pos:line="36" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="50">buff<pos:position pos:line="36" pos:column="54"/></name></expr></argument>)<pos:position pos:line="36" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="56"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="37" pos:column="25">s_len<pos:position pos:line="37" pos:column="30"/></name> <operator pos:line="37" pos:column="31">=<pos:position pos:line="37" pos:column="32"/></operator> <call><name pos:line="37" pos:column="33">strlen<pos:position pos:line="37" pos:column="39"/></name> <argument_list pos:line="37" pos:column="40">(<argument><expr><name pos:line="37" pos:column="41">buff<pos:position pos:line="37" pos:column="45"/></name></expr></argument>)<pos:position pos:line="37" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="47"/></expr_stmt>
                    }<pos:position pos:line="38" pos:column="22"/></block></then>
                    <else pos:line="39" pos:column="21">else <block pos:line="39" pos:column="26">{
                        <decl_stmt><decl><type><name pos:line="40" pos:column="25">int<pos:position pos:line="40" pos:column="28"/></name></type> <name pos:line="40" pos:column="29">l<pos:position pos:line="40" pos:column="30"/></name></decl>, <decl><type ref="prev"/><name pos:line="40" pos:column="32">x<pos:position pos:line="40" pos:column="33"/></name></decl>, <decl><type ref="prev"/><name pos:line="40" pos:column="35">pos<pos:position pos:line="40" pos:column="38"/></name> <init pos:line="40" pos:column="39">= <expr><literal type="number" pos:line="40" pos:column="41">0<pos:position pos:line="40" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="40" pos:column="43"/></decl_stmt>
                        <decl_stmt><decl><type><name pos:line="41" pos:column="25">char<pos:position pos:line="41" pos:column="29"/></name></type> <name><name pos:line="41" pos:column="30">tmp_buff<pos:position pos:line="41" pos:column="38"/></name><index pos:line="41" pos:column="38">[<expr><literal type="number" pos:line="41" pos:column="39">50<pos:position pos:line="41" pos:column="41"/></literal></expr>]<pos:position pos:line="41" pos:column="42"/></index></name></decl>;<pos:position pos:line="41" pos:column="43"/></decl_stmt>

                        <expr_stmt><expr><call><name pos:line="43" pos:column="25">apr_snprintf<pos:position pos:line="43" pos:column="37"/></name><argument_list pos:line="43" pos:column="37">(<argument><expr><name pos:line="43" pos:column="38">tmp_buff<pos:position pos:line="43" pos:column="46"/></name></expr></argument>, <argument><expr><sizeof pos:line="43" pos:column="48">sizeof<argument_list pos:line="43" pos:column="54">(<argument><expr><name pos:line="43" pos:column="55">tmp_buff<pos:position pos:line="43" pos:column="63"/></name></expr></argument>)<pos:position pos:line="43" pos:column="64"/></argument_list></sizeof></expr></argument>, 
                                     <argument><expr><literal type="string" pos:line="44" pos:column="38">"%"<pos:position pos:line="44" pos:column="41"/></literal> <name pos:line="44" pos:column="42">APR_OFF_T_FMT<pos:position pos:line="44" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="44" pos:column="57">finfo<pos:position pos:line="44" pos:column="62"/></name><operator pos:line="44" pos:column="62">.<pos:position pos:line="44" pos:column="63"/></operator><name pos:line="44" pos:column="63">size<pos:position pos:line="44" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="69"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="45" pos:column="25">l<pos:position pos:line="45" pos:column="26"/></name> <operator pos:line="45" pos:column="27">=<pos:position pos:line="45" pos:column="28"/></operator> <call><name pos:line="45" pos:column="29">strlen<pos:position pos:line="45" pos:column="35"/></name><argument_list pos:line="45" pos:column="35">(<argument><expr><name pos:line="45" pos:column="36">tmp_buff<pos:position pos:line="45" pos:column="44"/></name></expr></argument>)<pos:position pos:line="45" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="46"/></expr_stmt>    <comment type="block" pos:line="45" pos:column="50">/* grrr */</comment>
                        <for pos:line="46" pos:column="25">for <control pos:line="46" pos:column="29">(<init><expr><name pos:line="46" pos:column="30">x<pos:position pos:line="46" pos:column="31"/></name> <operator pos:line="46" pos:column="32">=<pos:position pos:line="46" pos:column="33"/></operator> <literal type="number" pos:line="46" pos:column="34">0<pos:position pos:line="46" pos:column="35"/></literal></expr>;<pos:position pos:line="46" pos:column="36"/></init> <condition><expr><name pos:line="46" pos:column="37">x<pos:position pos:line="46" pos:column="38"/></name> <operator pos:line="46" pos:column="39">&lt;<pos:position pos:line="46" pos:column="43"/></operator> <name pos:line="46" pos:column="41">l<pos:position pos:line="46" pos:column="42"/></name></expr>;<pos:position pos:line="46" pos:column="43"/></condition> <incr><expr><name pos:line="46" pos:column="44">x<pos:position pos:line="46" pos:column="45"/></name><operator pos:line="46" pos:column="45">++<pos:position pos:line="46" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="46" pos:column="48"/></control> <block pos:line="46" pos:column="49">{
                            <if pos:line="47" pos:column="29">if <condition pos:line="47" pos:column="32">(<expr><name pos:line="47" pos:column="33">x<pos:position pos:line="47" pos:column="34"/></name> <operator pos:line="47" pos:column="35">&amp;&amp;<pos:position pos:line="47" pos:column="45"/></operator> <operator pos:line="47" pos:column="38">(<pos:position pos:line="47" pos:column="39"/></operator><operator pos:line="47" pos:column="39">!<pos:position pos:line="47" pos:column="40"/></operator><operator pos:line="47" pos:column="40">(<pos:position pos:line="47" pos:column="41"/></operator><operator pos:line="47" pos:column="41">(<pos:position pos:line="47" pos:column="42"/></operator><name pos:line="47" pos:column="42">l<pos:position pos:line="47" pos:column="43"/></name> <operator pos:line="47" pos:column="44">-<pos:position pos:line="47" pos:column="45"/></operator> <name pos:line="47" pos:column="46">x<pos:position pos:line="47" pos:column="47"/></name><operator pos:line="47" pos:column="47">)<pos:position pos:line="47" pos:column="48"/></operator> <operator pos:line="47" pos:column="49">%<pos:position pos:line="47" pos:column="50"/></operator> <literal type="number" pos:line="47" pos:column="51">3<pos:position pos:line="47" pos:column="52"/></literal><operator pos:line="47" pos:column="52">)<pos:position pos:line="47" pos:column="53"/></operator><operator pos:line="47" pos:column="53">)<pos:position pos:line="47" pos:column="54"/></operator></expr>)<pos:position pos:line="47" pos:column="55"/></condition><then pos:line="47" pos:column="55"> <block pos:line="47" pos:column="56">{
                                <expr_stmt><expr><name><name pos:line="48" pos:column="33">buff<pos:position pos:line="48" pos:column="37"/></name><index pos:line="48" pos:column="37">[<expr><name pos:line="48" pos:column="38">pos<pos:position pos:line="48" pos:column="41"/></name><operator pos:line="48" pos:column="41">++<pos:position pos:line="48" pos:column="43"/></operator></expr>]<pos:position pos:line="48" pos:column="44"/></index></name> <operator pos:line="48" pos:column="45">=<pos:position pos:line="48" pos:column="46"/></operator> <literal type="char" pos:line="48" pos:column="47">','<pos:position pos:line="48" pos:column="50"/></literal></expr>;<pos:position pos:line="48" pos:column="51"/></expr_stmt>
                            }<pos:position pos:line="49" pos:column="30"/></block></then></if>
                            <expr_stmt><expr><name><name pos:line="50" pos:column="29">buff<pos:position pos:line="50" pos:column="33"/></name><index pos:line="50" pos:column="33">[<expr><name pos:line="50" pos:column="34">pos<pos:position pos:line="50" pos:column="37"/></name><operator pos:line="50" pos:column="37">++<pos:position pos:line="50" pos:column="39"/></operator></expr>]<pos:position pos:line="50" pos:column="40"/></index></name> <operator pos:line="50" pos:column="41">=<pos:position pos:line="50" pos:column="42"/></operator> <name><name pos:line="50" pos:column="43">tmp_buff<pos:position pos:line="50" pos:column="51"/></name><index pos:line="50" pos:column="51">[<expr><name pos:line="50" pos:column="52">x<pos:position pos:line="50" pos:column="53"/></name></expr>]<pos:position pos:line="50" pos:column="54"/></index></name></expr>;<pos:position pos:line="50" pos:column="55"/></expr_stmt>
                        }<pos:position pos:line="51" pos:column="26"/></block></for>
                        <expr_stmt><expr><name><name pos:line="52" pos:column="25">buff<pos:position pos:line="52" pos:column="29"/></name><index pos:line="52" pos:column="29">[<expr><name pos:line="52" pos:column="30">pos<pos:position pos:line="52" pos:column="33"/></name></expr>]<pos:position pos:line="52" pos:column="34"/></index></name> <operator pos:line="52" pos:column="35">=<pos:position pos:line="52" pos:column="36"/></operator> <literal type="char" pos:line="52" pos:column="37">'\0'<pos:position pos:line="52" pos:column="41"/></literal></expr>;<pos:position pos:line="52" pos:column="42"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="53" pos:column="25">s_len<pos:position pos:line="53" pos:column="30"/></name> <operator pos:line="53" pos:column="31">=<pos:position pos:line="53" pos:column="32"/></operator> <name pos:line="53" pos:column="33">pos<pos:position pos:line="53" pos:column="36"/></name></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
                    }<pos:position pos:line="54" pos:column="22"/></block></else></if>

                    <expr_stmt><expr><name pos:line="56" pos:column="21">tmp_buck<pos:position pos:line="56" pos:column="29"/></name> <operator pos:line="56" pos:column="30">=<pos:position pos:line="56" pos:column="31"/></operator> <call><name pos:line="56" pos:column="32">apr_bucket_heap_create<pos:position pos:line="56" pos:column="54"/></name><argument_list pos:line="56" pos:column="54">(<argument><expr><name pos:line="56" pos:column="55">buff<pos:position pos:line="56" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="61">s_len<pos:position pos:line="56" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="68">NULL<pos:position pos:line="56" pos:column="72"/></name></expr></argument>,
                                                  <argument><expr><name><name pos:line="57" pos:column="51">r<pos:position pos:line="57" pos:column="52"/></name><operator pos:line="57" pos:column="52">-&gt;<pos:position pos:line="57" pos:column="57"/></operator><name pos:line="57" pos:column="54">connection<pos:position pos:line="57" pos:column="64"/></name><operator pos:line="57" pos:column="64">-&gt;<pos:position pos:line="57" pos:column="69"/></operator><name pos:line="57" pos:column="66">bucket_alloc<pos:position pos:line="57" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="80"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="58" pos:column="21">APR_BUCKET_INSERT_BEFORE<pos:position pos:line="58" pos:column="45"/></name><argument_list pos:line="58" pos:column="45">(<argument><expr><name pos:line="58" pos:column="46">head_ptr<pos:position pos:line="58" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="56">tmp_buck<pos:position pos:line="58" pos:column="64"/></name></expr></argument>)<pos:position pos:line="58" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="66"/></expr_stmt>
                    <if pos:line="59" pos:column="21">if <condition pos:line="59" pos:column="24">(<expr><operator pos:line="59" pos:column="25">*<pos:position pos:line="59" pos:column="26"/></operator><name pos:line="59" pos:column="26">inserted_head<pos:position pos:line="59" pos:column="39"/></name> <operator pos:line="59" pos:column="40">==<pos:position pos:line="59" pos:column="42"/></operator> <name pos:line="59" pos:column="43">NULL<pos:position pos:line="59" pos:column="47"/></name></expr>)<pos:position pos:line="59" pos:column="48"/></condition><then pos:line="59" pos:column="48"> <block pos:line="59" pos:column="49">{
                        <expr_stmt><expr><operator pos:line="60" pos:column="25">*<pos:position pos:line="60" pos:column="26"/></operator><name pos:line="60" pos:column="26">inserted_head<pos:position pos:line="60" pos:column="39"/></name> <operator pos:line="60" pos:column="40">=<pos:position pos:line="60" pos:column="41"/></operator> <name pos:line="60" pos:column="42">tmp_buck<pos:position pos:line="60" pos:column="50"/></name></expr>;<pos:position pos:line="60" pos:column="51"/></expr_stmt>
                    }<pos:position pos:line="61" pos:column="22"/></block></then></if>
                }<pos:position pos:line="62" pos:column="18"/></block></then>
                <else pos:line="63" pos:column="17">else <block pos:line="63" pos:column="22">{
                    <expr_stmt><expr><call><name pos:line="64" pos:column="21">CREATE_ERROR_BUCKET<pos:position pos:line="64" pos:column="40"/></name><argument_list pos:line="64" pos:column="40">(<argument><expr><name pos:line="64" pos:column="41">ctx<pos:position pos:line="64" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="46">tmp_buck<pos:position pos:line="64" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="56">head_ptr<pos:position pos:line="64" pos:column="64"/></name></expr></argument>, 
                                        <argument><expr><operator pos:line="65" pos:column="41">*<pos:position pos:line="65" pos:column="42"/></operator><name pos:line="65" pos:column="42">inserted_head<pos:position pos:line="65" pos:column="55"/></name></expr></argument>)<pos:position pos:line="65" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="57"/></expr_stmt>
                    <return pos:line="66" pos:column="21">return <expr><literal type="number" pos:line="66" pos:column="28">1<pos:position pos:line="66" pos:column="29"/></literal></expr>;<pos:position pos:line="66" pos:column="30"/></return>
                }<pos:position pos:line="67" pos:column="18"/></block></else></if>
            }<pos:position pos:line="68" pos:column="14"/></block></else></if>
        }<pos:position pos:line="69" pos:column="10"/></block></while>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>
    <return pos:line="71" pos:column="5">return <expr><literal type="number" pos:line="71" pos:column="12">0<pos:position pos:line="71" pos:column="13"/></literal></expr>;<pos:position pos:line="71" pos:column="14"/></return>
}<pos:position pos:line="72" pos:column="2"/></block></function></unit>
