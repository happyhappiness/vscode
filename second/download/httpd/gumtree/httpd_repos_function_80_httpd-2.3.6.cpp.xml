<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_80_httpd-2.3.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">write_request<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name><name pos:line="1" pos:column="27">struct<pos:position pos:line="1" pos:column="33"/></name> <name pos:line="1" pos:column="34">connection<pos:position pos:line="1" pos:column="44"/></name></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type> <name pos:line="1" pos:column="47">c<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">started<pos:position pos:line="3" pos:column="16"/></name> <operator pos:line="3" pos:column="17">&gt;=<pos:position pos:line="3" pos:column="22"/></operator> <name pos:line="3" pos:column="20">requests<pos:position pos:line="3" pos:column="28"/></name></expr>)<pos:position pos:line="3" pos:column="29"/></condition><then pos:line="3" pos:column="29"> <block pos:line="3" pos:column="30">{
        <return pos:line="4" pos:column="9">return;<pos:position pos:line="4" pos:column="16"/></return>
    }<pos:position pos:line="5" pos:column="6"/></block></then></if>

    <do pos:line="7" pos:column="5">do <block pos:line="7" pos:column="8">{
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">apr_time_t<pos:position pos:line="8" pos:column="19"/></name></type> <name pos:line="8" pos:column="20">tnow<pos:position pos:line="8" pos:column="24"/></name></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="9" pos:column="9">apr_size_t<pos:position pos:line="9" pos:column="19"/></name></type> <name pos:line="9" pos:column="20">l<pos:position pos:line="9" pos:column="21"/></name> <init pos:line="9" pos:column="22">= <expr><name><name pos:line="9" pos:column="24">c<pos:position pos:line="9" pos:column="25"/></name><operator pos:line="9" pos:column="25">-&gt;<pos:position pos:line="9" pos:column="30"/></operator><name pos:line="9" pos:column="27">rwrite<pos:position pos:line="9" pos:column="33"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">apr_status_t<pos:position pos:line="10" pos:column="21"/></name></type> <name pos:line="10" pos:column="22">e<pos:position pos:line="10" pos:column="23"/></name> <init pos:line="10" pos:column="24">= <expr><name pos:line="10" pos:column="26">APR_SUCCESS<pos:position pos:line="10" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="10" pos:column="38"/></decl_stmt> <comment type="block" pos:line="10" pos:column="39">/* prevent gcc warning */</comment>

        <expr_stmt><expr><name pos:line="12" pos:column="9">tnow<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">lasttime<pos:position pos:line="12" pos:column="24"/></name> <operator pos:line="12" pos:column="25">=<pos:position pos:line="12" pos:column="26"/></operator> <call><name pos:line="12" pos:column="27">apr_time_now<pos:position pos:line="12" pos:column="39"/></name><argument_list pos:line="12" pos:column="39">()<pos:position pos:line="12" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="42"/></expr_stmt>

        <comment type="block" pos:line="14" pos:column="9">/*
         * First time round ?
         */</comment>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name><name pos:line="17" pos:column="13">c<pos:position pos:line="17" pos:column="14"/></name><operator pos:line="17" pos:column="14">-&gt;<pos:position pos:line="17" pos:column="19"/></operator><name pos:line="17" pos:column="16">rwrite<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">==<pos:position pos:line="17" pos:column="25"/></operator> <literal type="number" pos:line="17" pos:column="26">0<pos:position pos:line="17" pos:column="27"/></literal></expr>)<pos:position pos:line="17" pos:column="28"/></condition><then pos:line="17" pos:column="28"> <block pos:line="17" pos:column="29">{
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">apr_socket_timeout_set<pos:position pos:line="18" pos:column="35"/></name><argument_list pos:line="18" pos:column="35">(<argument><expr><name><name pos:line="18" pos:column="36">c<pos:position pos:line="18" pos:column="37"/></name><operator pos:line="18" pos:column="37">-&gt;<pos:position pos:line="18" pos:column="42"/></operator><name pos:line="18" pos:column="39">aprsock<pos:position pos:line="18" pos:column="46"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="48">0<pos:position pos:line="18" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="19" pos:column="13">c<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">-&gt;<pos:position pos:line="19" pos:column="19"/></operator><name pos:line="19" pos:column="16">connect<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">tnow<pos:position pos:line="19" pos:column="30"/></name></expr>;<pos:position pos:line="19" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="20" pos:column="13">c<pos:position pos:line="20" pos:column="14"/></name><operator pos:line="20" pos:column="14">-&gt;<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="16">rwrote<pos:position pos:line="20" pos:column="22"/></name></name> <operator pos:line="20" pos:column="23">=<pos:position pos:line="20" pos:column="24"/></operator> <literal type="number" pos:line="20" pos:column="25">0<pos:position pos:line="20" pos:column="26"/></literal></expr>;<pos:position pos:line="20" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">c<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">rwrite<pos:position pos:line="21" pos:column="22"/></name></name> <operator pos:line="21" pos:column="23">=<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">reqlen<pos:position pos:line="21" pos:column="31"/></name></expr>;<pos:position pos:line="21" pos:column="32"/></expr_stmt>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><name pos:line="22" pos:column="17">send_body<pos:position pos:line="22" pos:column="26"/></name></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="23" pos:column="17">c<pos:position pos:line="23" pos:column="18"/></name><operator pos:line="23" pos:column="18">-&gt;<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="20">rwrite<pos:position pos:line="23" pos:column="26"/></name></name> <operator pos:line="23" pos:column="27">+=<pos:position pos:line="23" pos:column="29"/></operator> <name pos:line="23" pos:column="30">postlen<pos:position pos:line="23" pos:column="37"/></name></expr>;<pos:position pos:line="23" pos:column="38"/></expr_stmt></block></then></if>
        }<pos:position pos:line="24" pos:column="10"/></block></then>
        <elseif pos:line="25" pos:column="9">else <if pos:line="25" pos:column="14">if <condition pos:line="25" pos:column="17">(<expr><name pos:line="25" pos:column="18">tnow<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&gt;<pos:position pos:line="25" pos:column="27"/></operator> <name><name pos:line="25" pos:column="25">c<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-&gt;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="28">connect<pos:position pos:line="25" pos:column="35"/></name></name> <operator pos:line="25" pos:column="36">+<pos:position pos:line="25" pos:column="37"/></operator> <name pos:line="25" pos:column="38">aprtimeout<pos:position pos:line="25" pos:column="48"/></name></expr>)<pos:position pos:line="25" pos:column="49"/></condition><then pos:line="25" pos:column="49"> <block pos:line="25" pos:column="50">{
            <expr_stmt><expr><call><name pos:line="26" pos:column="13">printf<pos:position pos:line="26" pos:column="19"/></name><argument_list pos:line="26" pos:column="19">(<argument><expr><literal type="string" pos:line="26" pos:column="20">"Send request timed out!\n"<pos:position pos:line="26" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">close_connection<pos:position pos:line="27" pos:column="29"/></name><argument_list pos:line="27" pos:column="29">(<argument><expr><name pos:line="27" pos:column="30">c<pos:position pos:line="27" pos:column="31"/></name></expr></argument>)<pos:position pos:line="27" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="33"/></expr_stmt>
            <return pos:line="28" pos:column="13">return;<pos:position pos:line="28" pos:column="20"/></return>
        }<pos:position pos:line="29" pos:column="10"/></block></then></if></elseif></if>

<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">USE_SSL<pos:position pos:line="31" pos:column="15"/></name></cpp:ifdef>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">c<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">-&gt;<pos:position pos:line="32" pos:column="19"/></operator><name pos:line="32" pos:column="16">ssl<pos:position pos:line="32" pos:column="19"/></name></name></expr>)<pos:position pos:line="32" pos:column="20"/></condition><then pos:line="32" pos:column="20"> <block pos:line="32" pos:column="21">{
            <decl_stmt><decl><type><name pos:line="33" pos:column="13">apr_size_t<pos:position pos:line="33" pos:column="23"/></name></type> <name pos:line="33" pos:column="24">e_ssl<pos:position pos:line="33" pos:column="29"/></name></decl>;<pos:position pos:line="33" pos:column="30"/></decl_stmt>
            <expr_stmt><expr><name pos:line="34" pos:column="13">e_ssl<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <call><name pos:line="34" pos:column="21">SSL_write<pos:position pos:line="34" pos:column="30"/></name><argument_list pos:line="34" pos:column="30">(<argument><expr><name><name pos:line="34" pos:column="31">c<pos:position pos:line="34" pos:column="32"/></name><operator pos:line="34" pos:column="32">-&gt;<pos:position pos:line="34" pos:column="37"/></operator><name pos:line="34" pos:column="34">ssl<pos:position pos:line="34" pos:column="37"/></name></name></expr></argument>,<argument><expr><name pos:line="34" pos:column="38">request<pos:position pos:line="34" pos:column="45"/></name> <operator pos:line="34" pos:column="46">+<pos:position pos:line="34" pos:column="47"/></operator> <name><name pos:line="34" pos:column="48">c<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">-&gt;<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="51">rwrote<pos:position pos:line="34" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="59">l<pos:position pos:line="34" pos:column="60"/></name></expr></argument>)<pos:position pos:line="34" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="62"/></expr_stmt>
            <if pos:line="35" pos:column="13">if <condition pos:line="35" pos:column="16">(<expr><name pos:line="35" pos:column="17">e_ssl<pos:position pos:line="35" pos:column="22"/></name> <operator pos:line="35" pos:column="23">!=<pos:position pos:line="35" pos:column="25"/></operator> <name pos:line="35" pos:column="26">l<pos:position pos:line="35" pos:column="27"/></name></expr>)<pos:position pos:line="35" pos:column="28"/></condition><then pos:line="35" pos:column="28"> <block pos:line="35" pos:column="29">{
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">BIO_printf<pos:position pos:line="36" pos:column="27"/></name><argument_list pos:line="36" pos:column="27">(<argument><expr><name pos:line="36" pos:column="28">bio_err<pos:position pos:line="36" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="37">"SSL write failed - closing connection\n"<pos:position pos:line="36" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="80"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="37" pos:column="17">ERR_print_errors<pos:position pos:line="37" pos:column="33"/></name><argument_list pos:line="37" pos:column="33">(<argument><expr><name pos:line="37" pos:column="34">bio_err<pos:position pos:line="37" pos:column="41"/></name></expr></argument>)<pos:position pos:line="37" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="43"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="38" pos:column="17">close_connection<pos:position pos:line="38" pos:column="33"/></name> <argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">c<pos:position pos:line="38" pos:column="36"/></name></expr></argument>)<pos:position pos:line="38" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>
                <return pos:line="39" pos:column="17">return;<pos:position pos:line="39" pos:column="24"/></return>
            }<pos:position pos:line="40" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="41" pos:column="13">l<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">=<pos:position pos:line="41" pos:column="16"/></operator> <name pos:line="41" pos:column="17">e_ssl<pos:position pos:line="41" pos:column="22"/></name></expr>;<pos:position pos:line="41" pos:column="23"/></expr_stmt>
            <expr_stmt><expr><name pos:line="42" pos:column="13">e<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <name pos:line="42" pos:column="17">APR_SUCCESS<pos:position pos:line="42" pos:column="28"/></name></expr>;<pos:position pos:line="42" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="43" pos:column="10"/></block></then>
        <else pos:line="44" pos:column="9">else
<cpp:endif pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">endif<pos:position pos:line="45" pos:column="7"/></cpp:directive></cpp:endif>
            <block type="pseudo"><expr_stmt><expr><name pos:line="46" pos:column="13">e<pos:position pos:line="46" pos:column="14"/></name> <operator pos:line="46" pos:column="15">=<pos:position pos:line="46" pos:column="16"/></operator> <call><name pos:line="46" pos:column="17">apr_socket_send<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><name><name pos:line="46" pos:column="33">c<pos:position pos:line="46" pos:column="34"/></name><operator pos:line="46" pos:column="34">-&gt;<pos:position pos:line="46" pos:column="39"/></operator><name pos:line="46" pos:column="36">aprsock<pos:position pos:line="46" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="45">request<pos:position pos:line="46" pos:column="52"/></name> <operator pos:line="46" pos:column="53">+<pos:position pos:line="46" pos:column="54"/></operator> <name><name pos:line="46" pos:column="55">c<pos:position pos:line="46" pos:column="56"/></name><operator pos:line="46" pos:column="56">-&gt;<pos:position pos:line="46" pos:column="61"/></operator><name pos:line="46" pos:column="58">rwrote<pos:position pos:line="46" pos:column="64"/></name></name></expr></argument>, <argument><expr><operator pos:line="46" pos:column="66">&amp;<pos:position pos:line="46" pos:column="71"/></operator><name pos:line="46" pos:column="67">l<pos:position pos:line="46" pos:column="68"/></name></expr></argument>)<pos:position pos:line="46" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="70"/></expr_stmt></block></else></if>

        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name pos:line="48" pos:column="13">e<pos:position pos:line="48" pos:column="14"/></name> <operator pos:line="48" pos:column="15">!=<pos:position pos:line="48" pos:column="17"/></operator> <name pos:line="48" pos:column="18">APR_SUCCESS<pos:position pos:line="48" pos:column="29"/></name> <operator pos:line="48" pos:column="30">&amp;&amp;<pos:position pos:line="48" pos:column="40"/></operator> <operator pos:line="48" pos:column="33">!<pos:position pos:line="48" pos:column="34"/></operator><call><name pos:line="48" pos:column="34">APR_STATUS_IS_EAGAIN<pos:position pos:line="48" pos:column="54"/></name><argument_list pos:line="48" pos:column="54">(<argument><expr><name pos:line="48" pos:column="55">e<pos:position pos:line="48" pos:column="56"/></name></expr></argument>)<pos:position pos:line="48" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="58"/></condition><then pos:line="48" pos:column="58"> <block pos:line="48" pos:column="59">{
            <expr_stmt><expr><name pos:line="49" pos:column="13">epipe<pos:position pos:line="49" pos:column="18"/></name><operator pos:line="49" pos:column="18">++<pos:position pos:line="49" pos:column="20"/></operator></expr>;<pos:position pos:line="49" pos:column="21"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="50" pos:column="13">printf<pos:position pos:line="50" pos:column="19"/></name><argument_list pos:line="50" pos:column="19">(<argument><expr><literal type="string" pos:line="50" pos:column="20">"Send request failed!\n"<pos:position pos:line="50" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="46"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="51" pos:column="13">close_connection<pos:position pos:line="51" pos:column="29"/></name><argument_list pos:line="51" pos:column="29">(<argument><expr><name pos:line="51" pos:column="30">c<pos:position pos:line="51" pos:column="31"/></name></expr></argument>)<pos:position pos:line="51" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
            <return pos:line="52" pos:column="13">return;<pos:position pos:line="52" pos:column="20"/></return>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="54" pos:column="9">totalposted<pos:position pos:line="54" pos:column="20"/></name> <operator pos:line="54" pos:column="21">+=<pos:position pos:line="54" pos:column="23"/></operator> <name pos:line="54" pos:column="24">l<pos:position pos:line="54" pos:column="25"/></name></expr>;<pos:position pos:line="54" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="55" pos:column="9">c<pos:position pos:line="55" pos:column="10"/></name><operator pos:line="55" pos:column="10">-&gt;<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="12">rwrote<pos:position pos:line="55" pos:column="18"/></name></name> <operator pos:line="55" pos:column="19">+=<pos:position pos:line="55" pos:column="21"/></operator> <name pos:line="55" pos:column="22">l<pos:position pos:line="55" pos:column="23"/></name></expr>;<pos:position pos:line="55" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="56" pos:column="9">c<pos:position pos:line="56" pos:column="10"/></name><operator pos:line="56" pos:column="10">-&gt;<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="12">rwrite<pos:position pos:line="56" pos:column="18"/></name></name> <operator pos:line="56" pos:column="19">-=<pos:position pos:line="56" pos:column="21"/></operator> <name pos:line="56" pos:column="22">l<pos:position pos:line="56" pos:column="23"/></name></expr>;<pos:position pos:line="56" pos:column="24"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block> while <condition pos:line="57" pos:column="13">(<expr><name><name pos:line="57" pos:column="14">c<pos:position pos:line="57" pos:column="15"/></name><operator pos:line="57" pos:column="15">-&gt;<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="17">rwrite<pos:position pos:line="57" pos:column="23"/></name></name></expr>)<pos:position pos:line="57" pos:column="24"/></condition>;<pos:position pos:line="57" pos:column="25"/></do>

    <expr_stmt><expr><name><name pos:line="59" pos:column="5">c<pos:position pos:line="59" pos:column="6"/></name><operator pos:line="59" pos:column="6">-&gt;<pos:position pos:line="59" pos:column="11"/></operator><name pos:line="59" pos:column="8">endwrite<pos:position pos:line="59" pos:column="16"/></name></name> <operator pos:line="59" pos:column="17">=<pos:position pos:line="59" pos:column="18"/></operator> <name pos:line="59" pos:column="19">lasttime<pos:position pos:line="59" pos:column="27"/></name> <operator pos:line="59" pos:column="28">=<pos:position pos:line="59" pos:column="29"/></operator> <call><name pos:line="59" pos:column="30">apr_time_now<pos:position pos:line="59" pos:column="42"/></name><argument_list pos:line="59" pos:column="42">()<pos:position pos:line="59" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><name pos:line="60" pos:column="5">started<pos:position pos:line="60" pos:column="12"/></name><operator pos:line="60" pos:column="12">++<pos:position pos:line="60" pos:column="14"/></operator></expr>;<pos:position pos:line="60" pos:column="15"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="61" pos:column="5">set_conn_state<pos:position pos:line="61" pos:column="19"/></name><argument_list pos:line="61" pos:column="19">(<argument><expr><name pos:line="61" pos:column="20">c<pos:position pos:line="61" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="23">STATE_READ<pos:position pos:line="61" pos:column="33"/></name></expr></argument>)<pos:position pos:line="61" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="35"/></expr_stmt>
}<pos:position pos:line="62" pos:column="2"/></block></function></unit>
