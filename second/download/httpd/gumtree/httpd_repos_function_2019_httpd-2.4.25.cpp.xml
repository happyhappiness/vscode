<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2019_httpd-2.4.25.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">set_worker_param<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">apr_pool_t<pos:position pos:line="1" pos:column="47"/></name> <modifier pos:line="1" pos:column="48">*<pos:position pos:line="1" pos:column="49"/></modifier></type><name pos:line="1" pos:column="49">p<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">server_rec<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">s<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="3" pos:column="37">proxy_worker<pos:position pos:line="3" pos:column="49"/></name> <modifier pos:line="3" pos:column="50">*<pos:position pos:line="3" pos:column="51"/></modifier></type><name pos:line="3" pos:column="51">worker<pos:position pos:line="3" pos:column="57"/></name></decl></parameter>,
                                    <parameter><decl><type><specifier pos:line="4" pos:column="37">const<pos:position pos:line="4" pos:column="42"/></specifier> <name pos:line="4" pos:column="43">char<pos:position pos:line="4" pos:column="47"/></name> <modifier pos:line="4" pos:column="48">*<pos:position pos:line="4" pos:column="49"/></modifier></type><name pos:line="4" pos:column="49">key<pos:position pos:line="4" pos:column="52"/></name></decl></parameter>,
                                    <parameter><decl><type><specifier pos:line="5" pos:column="37">const<pos:position pos:line="5" pos:column="42"/></specifier> <name pos:line="5" pos:column="43">char<pos:position pos:line="5" pos:column="47"/></name> <modifier pos:line="5" pos:column="48">*<pos:position pos:line="5" pos:column="49"/></modifier></type><name pos:line="5" pos:column="49">val<pos:position pos:line="5" pos:column="52"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="53"/></parameter_list>
<block pos:line="6" pos:column="1">{

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">ival<pos:position pos:line="8" pos:column="13"/></name></decl>;<pos:position pos:line="8" pos:column="14"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_interval_time_t<pos:position pos:line="9" pos:column="24"/></name></type> <name pos:line="9" pos:column="25">timeout<pos:position pos:line="9" pos:column="32"/></name></decl>;<pos:position pos:line="9" pos:column="33"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">strcasecmp<pos:position pos:line="11" pos:column="20"/></name><argument_list pos:line="11" pos:column="20">(<argument><expr><name pos:line="11" pos:column="21">key<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="26">"loadfactor"<pos:position pos:line="11" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="40"/></condition><then pos:line="11" pos:column="40"> <block pos:line="11" pos:column="41">{
        <comment type="block" pos:line="12" pos:column="9">/* Normalized load factor. Used with BalancerMember,
         * it is a number between 1 and 100.
         */</comment>
        <expr_stmt><expr><name pos:line="15" pos:column="9">ival<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <call><name pos:line="15" pos:column="16">atoi<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">val<pos:position pos:line="15" pos:column="24"/></name></expr></argument>)<pos:position pos:line="15" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="26"/></expr_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">ival<pos:position pos:line="16" pos:column="17"/></name> <argument_list type="generic" pos:line="16" pos:column="18">&lt; <argument><expr><literal type="number" pos:line="16" pos:column="20">1<pos:position pos:line="16" pos:column="21"/></literal> <operator pos:line="16" pos:column="22">||<pos:position pos:line="16" pos:column="24"/></operator> <name pos:line="16" pos:column="25">ival<pos:position pos:line="16" pos:column="29"/></name></expr></argument> &gt;<pos:position pos:line="16" pos:column="34"/></argument_list></name> <literal type="number" pos:line="16" pos:column="32">100<pos:position pos:line="16" pos:column="35"/></literal></expr>)<pos:position pos:line="16" pos:column="36"/></condition><then pos:line="16" pos:column="36">
            <block type="pseudo"><return pos:line="17" pos:column="13">return <expr><literal type="string" pos:line="17" pos:column="20">"LoadFactor must be a number between 1..100"<pos:position pos:line="17" pos:column="64"/></literal></expr>;<pos:position pos:line="17" pos:column="65"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">worker<pos:position pos:line="18" pos:column="15"/></name><operator pos:line="18" pos:column="15">-&gt;<pos:position pos:line="18" pos:column="20"/></operator><name pos:line="18" pos:column="17">s<pos:position pos:line="18" pos:column="18"/></name><operator pos:line="18" pos:column="18">-&gt;<pos:position pos:line="18" pos:column="23"/></operator><name pos:line="18" pos:column="20">lbfactor<pos:position pos:line="18" pos:column="28"/></name></name> <operator pos:line="18" pos:column="29">=<pos:position pos:line="18" pos:column="30"/></operator> <name pos:line="18" pos:column="31">ival<pos:position pos:line="18" pos:column="35"/></name></expr>;<pos:position pos:line="18" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then>
    <elseif pos:line="20" pos:column="5">else <if pos:line="20" pos:column="10">if <condition pos:line="20" pos:column="13">(<expr><operator pos:line="20" pos:column="14">!<pos:position pos:line="20" pos:column="15"/></operator><call><name pos:line="20" pos:column="15">strcasecmp<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">key<pos:position pos:line="20" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="31">"retry"<pos:position pos:line="20" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="40"/></condition><then pos:line="20" pos:column="40"> <block pos:line="20" pos:column="41">{
        <comment type="block" pos:line="21" pos:column="9">/* If set it will give the retry timeout for the worker
         * The default value is 60 seconds, meaning that if
         * in error state, it will be retried after that timeout.
         */</comment>
        <expr_stmt><expr><name pos:line="25" pos:column="9">ival<pos:position pos:line="25" pos:column="13"/></name> <operator pos:line="25" pos:column="14">=<pos:position pos:line="25" pos:column="15"/></operator> <call><name pos:line="25" pos:column="16">atoi<pos:position pos:line="25" pos:column="20"/></name><argument_list pos:line="25" pos:column="20">(<argument><expr><name pos:line="25" pos:column="21">val<pos:position pos:line="25" pos:column="24"/></name></expr></argument>)<pos:position pos:line="25" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="26"/></expr_stmt>
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">ival<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">&lt;<pos:position pos:line="26" pos:column="22"/></operator> <literal type="number" pos:line="26" pos:column="20">0<pos:position pos:line="26" pos:column="21"/></literal></expr>)<pos:position pos:line="26" pos:column="22"/></condition><then pos:line="26" pos:column="22">
            <block type="pseudo"><return pos:line="27" pos:column="13">return <expr><literal type="string" pos:line="27" pos:column="20">"Retry must be a positive value"<pos:position pos:line="27" pos:column="52"/></literal></expr>;<pos:position pos:line="27" pos:column="53"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="28" pos:column="9">worker<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">s<pos:position pos:line="28" pos:column="18"/></name><operator pos:line="28" pos:column="18">-&gt;<pos:position pos:line="28" pos:column="23"/></operator><name pos:line="28" pos:column="20">retry<pos:position pos:line="28" pos:column="25"/></name></name> <operator pos:line="28" pos:column="26">=<pos:position pos:line="28" pos:column="27"/></operator> <call><name pos:line="28" pos:column="28">apr_time_from_sec<pos:position pos:line="28" pos:column="45"/></name><argument_list pos:line="28" pos:column="45">(<argument><expr><name pos:line="28" pos:column="46">ival<pos:position pos:line="28" pos:column="50"/></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">worker<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">s<pos:position pos:line="29" pos:column="18"/></name><operator pos:line="29" pos:column="18">-&gt;<pos:position pos:line="29" pos:column="23"/></operator><name pos:line="29" pos:column="20">retry_set<pos:position pos:line="29" pos:column="29"/></name></name> <operator pos:line="29" pos:column="30">=<pos:position pos:line="29" pos:column="31"/></operator> <literal type="number" pos:line="29" pos:column="32">1<pos:position pos:line="29" pos:column="33"/></literal></expr>;<pos:position pos:line="29" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="31" pos:column="5">else <if pos:line="31" pos:column="10">if <condition pos:line="31" pos:column="13">(<expr><operator pos:line="31" pos:column="14">!<pos:position pos:line="31" pos:column="15"/></operator><call><name pos:line="31" pos:column="15">strcasecmp<pos:position pos:line="31" pos:column="25"/></name><argument_list pos:line="31" pos:column="25">(<argument><expr><name pos:line="31" pos:column="26">key<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="31" pos:column="31">"ttl"<pos:position pos:line="31" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38"> <block pos:line="31" pos:column="39">{
        <comment type="block" pos:line="32" pos:column="9">/* Time in seconds that will destroy all the connections
         * that exceed the smax
         */</comment>
        <expr_stmt><expr><name pos:line="35" pos:column="9">ival<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">=<pos:position pos:line="35" pos:column="15"/></operator> <call><name pos:line="35" pos:column="16">atoi<pos:position pos:line="35" pos:column="20"/></name><argument_list pos:line="35" pos:column="20">(<argument><expr><name pos:line="35" pos:column="21">val<pos:position pos:line="35" pos:column="24"/></name></expr></argument>)<pos:position pos:line="35" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="26"/></expr_stmt>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">ival<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">&lt;<pos:position pos:line="36" pos:column="22"/></operator> <literal type="number" pos:line="36" pos:column="20">1<pos:position pos:line="36" pos:column="21"/></literal></expr>)<pos:position pos:line="36" pos:column="22"/></condition><then pos:line="36" pos:column="22">
            <block type="pseudo"><return pos:line="37" pos:column="13">return <expr><literal type="string" pos:line="37" pos:column="20">"TTL must be at least one second"<pos:position pos:line="37" pos:column="53"/></literal></expr>;<pos:position pos:line="37" pos:column="54"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="38" pos:column="9">worker<pos:position pos:line="38" pos:column="15"/></name><operator pos:line="38" pos:column="15">-&gt;<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="17">s<pos:position pos:line="38" pos:column="18"/></name><operator pos:line="38" pos:column="18">-&gt;<pos:position pos:line="38" pos:column="23"/></operator><name pos:line="38" pos:column="20">ttl<pos:position pos:line="38" pos:column="23"/></name></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <call><name pos:line="38" pos:column="26">apr_time_from_sec<pos:position pos:line="38" pos:column="43"/></name><argument_list pos:line="38" pos:column="43">(<argument><expr><name pos:line="38" pos:column="44">ival<pos:position pos:line="38" pos:column="48"/></name></expr></argument>)<pos:position pos:line="38" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="50"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="40" pos:column="5">else <if pos:line="40" pos:column="10">if <condition pos:line="40" pos:column="13">(<expr><operator pos:line="40" pos:column="14">!<pos:position pos:line="40" pos:column="15"/></operator><call><name pos:line="40" pos:column="15">strcasecmp<pos:position pos:line="40" pos:column="25"/></name><argument_list pos:line="40" pos:column="25">(<argument><expr><name pos:line="40" pos:column="26">key<pos:position pos:line="40" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="40" pos:column="31">"min"<pos:position pos:line="40" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="40" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="38"/></condition><then pos:line="40" pos:column="38"> <block pos:line="40" pos:column="39">{
        <comment type="block" pos:line="41" pos:column="9">/* Initial number of connections to remote
         */</comment>
        <expr_stmt><expr><name pos:line="43" pos:column="9">ival<pos:position pos:line="43" pos:column="13"/></name> <operator pos:line="43" pos:column="14">=<pos:position pos:line="43" pos:column="15"/></operator> <call><name pos:line="43" pos:column="16">atoi<pos:position pos:line="43" pos:column="20"/></name><argument_list pos:line="43" pos:column="20">(<argument><expr><name pos:line="43" pos:column="21">val<pos:position pos:line="43" pos:column="24"/></name></expr></argument>)<pos:position pos:line="43" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="26"/></expr_stmt>
        <if pos:line="44" pos:column="9">if <condition pos:line="44" pos:column="12">(<expr><name pos:line="44" pos:column="13">ival<pos:position pos:line="44" pos:column="17"/></name> <operator pos:line="44" pos:column="18">&lt;<pos:position pos:line="44" pos:column="22"/></operator> <literal type="number" pos:line="44" pos:column="20">0<pos:position pos:line="44" pos:column="21"/></literal></expr>)<pos:position pos:line="44" pos:column="22"/></condition><then pos:line="44" pos:column="22">
            <block type="pseudo"><return pos:line="45" pos:column="13">return <expr><literal type="string" pos:line="45" pos:column="20">"Min must be a positive number"<pos:position pos:line="45" pos:column="51"/></literal></expr>;<pos:position pos:line="45" pos:column="52"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="46" pos:column="9">worker<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">-&gt;<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="17">s<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">-&gt;<pos:position pos:line="46" pos:column="23"/></operator><name pos:line="46" pos:column="20">min<pos:position pos:line="46" pos:column="23"/></name></name> <operator pos:line="46" pos:column="24">=<pos:position pos:line="46" pos:column="25"/></operator> <name pos:line="46" pos:column="26">ival<pos:position pos:line="46" pos:column="30"/></name></expr>;<pos:position pos:line="46" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="48" pos:column="5">else <if pos:line="48" pos:column="10">if <condition pos:line="48" pos:column="13">(<expr><operator pos:line="48" pos:column="14">!<pos:position pos:line="48" pos:column="15"/></operator><call><name pos:line="48" pos:column="15">strcasecmp<pos:position pos:line="48" pos:column="25"/></name><argument_list pos:line="48" pos:column="25">(<argument><expr><name pos:line="48" pos:column="26">key<pos:position pos:line="48" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="48" pos:column="31">"max"<pos:position pos:line="48" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="48" pos:column="38"/></condition><then pos:line="48" pos:column="38"> <block pos:line="48" pos:column="39">{
        <comment type="block" pos:line="49" pos:column="9">/* Maximum number of connections to remote
         */</comment>
        <expr_stmt><expr><name pos:line="51" pos:column="9">ival<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">=<pos:position pos:line="51" pos:column="15"/></operator> <call><name pos:line="51" pos:column="16">atoi<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><name pos:line="51" pos:column="21">val<pos:position pos:line="51" pos:column="24"/></name></expr></argument>)<pos:position pos:line="51" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="26"/></expr_stmt>
        <if pos:line="52" pos:column="9">if <condition pos:line="52" pos:column="12">(<expr><name pos:line="52" pos:column="13">ival<pos:position pos:line="52" pos:column="17"/></name> <operator pos:line="52" pos:column="18">&lt;<pos:position pos:line="52" pos:column="22"/></operator> <literal type="number" pos:line="52" pos:column="20">0<pos:position pos:line="52" pos:column="21"/></literal></expr>)<pos:position pos:line="52" pos:column="22"/></condition><then pos:line="52" pos:column="22">
            <block type="pseudo"><return pos:line="53" pos:column="13">return <expr><literal type="string" pos:line="53" pos:column="20">"Max must be a positive number"<pos:position pos:line="53" pos:column="51"/></literal></expr>;<pos:position pos:line="53" pos:column="52"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="54" pos:column="9">worker<pos:position pos:line="54" pos:column="15"/></name><operator pos:line="54" pos:column="15">-&gt;<pos:position pos:line="54" pos:column="20"/></operator><name pos:line="54" pos:column="17">s<pos:position pos:line="54" pos:column="18"/></name><operator pos:line="54" pos:column="18">-&gt;<pos:position pos:line="54" pos:column="23"/></operator><name pos:line="54" pos:column="20">hmax<pos:position pos:line="54" pos:column="24"/></name></name> <operator pos:line="54" pos:column="25">=<pos:position pos:line="54" pos:column="26"/></operator> <name pos:line="54" pos:column="27">ival<pos:position pos:line="54" pos:column="31"/></name></expr>;<pos:position pos:line="54" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="55" pos:column="6"/></block></then></if></elseif>
    <comment type="block" pos:line="56" pos:column="5">/* XXX: More inteligent naming needed */</comment>
    <elseif pos:line="57" pos:column="5">else <if pos:line="57" pos:column="10">if <condition pos:line="57" pos:column="13">(<expr><operator pos:line="57" pos:column="14">!<pos:position pos:line="57" pos:column="15"/></operator><call><name pos:line="57" pos:column="15">strcasecmp<pos:position pos:line="57" pos:column="25"/></name><argument_list pos:line="57" pos:column="25">(<argument><expr><name pos:line="57" pos:column="26">key<pos:position pos:line="57" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="57" pos:column="31">"smax"<pos:position pos:line="57" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="57" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="57" pos:column="39"/></condition><then pos:line="57" pos:column="39"> <block pos:line="57" pos:column="40">{
        <comment type="block" pos:line="58" pos:column="9">/* Maximum number of connections to remote that
         * will not be destroyed
         */</comment>
        <expr_stmt><expr><name pos:line="61" pos:column="9">ival<pos:position pos:line="61" pos:column="13"/></name> <operator pos:line="61" pos:column="14">=<pos:position pos:line="61" pos:column="15"/></operator> <call><name pos:line="61" pos:column="16">atoi<pos:position pos:line="61" pos:column="20"/></name><argument_list pos:line="61" pos:column="20">(<argument><expr><name pos:line="61" pos:column="21">val<pos:position pos:line="61" pos:column="24"/></name></expr></argument>)<pos:position pos:line="61" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="26"/></expr_stmt>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">ival<pos:position pos:line="62" pos:column="17"/></name> <operator pos:line="62" pos:column="18">&lt;<pos:position pos:line="62" pos:column="22"/></operator> <literal type="number" pos:line="62" pos:column="20">0<pos:position pos:line="62" pos:column="21"/></literal></expr>)<pos:position pos:line="62" pos:column="22"/></condition><then pos:line="62" pos:column="22">
            <block type="pseudo"><return pos:line="63" pos:column="13">return <expr><literal type="string" pos:line="63" pos:column="20">"Smax must be a positive number"<pos:position pos:line="63" pos:column="52"/></literal></expr>;<pos:position pos:line="63" pos:column="53"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="64" pos:column="9">worker<pos:position pos:line="64" pos:column="15"/></name><operator pos:line="64" pos:column="15">-&gt;<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="17">s<pos:position pos:line="64" pos:column="18"/></name><operator pos:line="64" pos:column="18">-&gt;<pos:position pos:line="64" pos:column="23"/></operator><name pos:line="64" pos:column="20">smax<pos:position pos:line="64" pos:column="24"/></name></name> <operator pos:line="64" pos:column="25">=<pos:position pos:line="64" pos:column="26"/></operator> <name pos:line="64" pos:column="27">ival<pos:position pos:line="64" pos:column="31"/></name></expr>;<pos:position pos:line="64" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="65" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="66" pos:column="5">else <if pos:line="66" pos:column="10">if <condition pos:line="66" pos:column="13">(<expr><operator pos:line="66" pos:column="14">!<pos:position pos:line="66" pos:column="15"/></operator><call><name pos:line="66" pos:column="15">strcasecmp<pos:position pos:line="66" pos:column="25"/></name><argument_list pos:line="66" pos:column="25">(<argument><expr><name pos:line="66" pos:column="26">key<pos:position pos:line="66" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="31">"acquire"<pos:position pos:line="66" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="42"/></condition><then pos:line="66" pos:column="42"> <block pos:line="66" pos:column="43">{
        <comment type="block" pos:line="67" pos:column="9">/* Acquire timeout in given unit (default is milliseconds).
         * If set this will be the maximum time to
         * wait for a free connection.
         */</comment>
        <if pos:line="71" pos:column="9">if <condition pos:line="71" pos:column="12">(<expr><call><name pos:line="71" pos:column="13">ap_timeout_parameter_parse<pos:position pos:line="71" pos:column="39"/></name><argument_list pos:line="71" pos:column="39">(<argument><expr><name pos:line="71" pos:column="40">val<pos:position pos:line="71" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="71" pos:column="45">&amp;<pos:position pos:line="71" pos:column="50"/></operator><name pos:line="71" pos:column="46">timeout<pos:position pos:line="71" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="71" pos:column="55">"ms"<pos:position pos:line="71" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="60"/></argument_list></call> <operator pos:line="71" pos:column="61">!=<pos:position pos:line="71" pos:column="63"/></operator> <name pos:line="71" pos:column="64">APR_SUCCESS<pos:position pos:line="71" pos:column="75"/></name></expr>)<pos:position pos:line="71" pos:column="76"/></condition><then pos:line="71" pos:column="76">
            <block type="pseudo"><return pos:line="72" pos:column="13">return <expr><literal type="string" pos:line="72" pos:column="20">"Acquire timeout has wrong format"<pos:position pos:line="72" pos:column="54"/></literal></expr>;<pos:position pos:line="72" pos:column="55"/></return></block></then></if>
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><name pos:line="73" pos:column="13">timeout<pos:position pos:line="73" pos:column="20"/></name> <operator pos:line="73" pos:column="21">&lt;<pos:position pos:line="73" pos:column="25"/></operator> <literal type="number" pos:line="73" pos:column="23">1000<pos:position pos:line="73" pos:column="27"/></literal></expr>)<pos:position pos:line="73" pos:column="28"/></condition><then pos:line="73" pos:column="28">
            <block type="pseudo"><return pos:line="74" pos:column="13">return <expr><literal type="string" pos:line="74" pos:column="20">"Acquire must be at least one millisecond"<pos:position pos:line="74" pos:column="62"/></literal></expr>;<pos:position pos:line="74" pos:column="63"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="75" pos:column="9">worker<pos:position pos:line="75" pos:column="15"/></name><operator pos:line="75" pos:column="15">-&gt;<pos:position pos:line="75" pos:column="20"/></operator><name pos:line="75" pos:column="17">s<pos:position pos:line="75" pos:column="18"/></name><operator pos:line="75" pos:column="18">-&gt;<pos:position pos:line="75" pos:column="23"/></operator><name pos:line="75" pos:column="20">acquire<pos:position pos:line="75" pos:column="27"/></name></name> <operator pos:line="75" pos:column="28">=<pos:position pos:line="75" pos:column="29"/></operator> <name pos:line="75" pos:column="30">timeout<pos:position pos:line="75" pos:column="37"/></name></expr>;<pos:position pos:line="75" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="76" pos:column="9">worker<pos:position pos:line="76" pos:column="15"/></name><operator pos:line="76" pos:column="15">-&gt;<pos:position pos:line="76" pos:column="20"/></operator><name pos:line="76" pos:column="17">s<pos:position pos:line="76" pos:column="18"/></name><operator pos:line="76" pos:column="18">-&gt;<pos:position pos:line="76" pos:column="23"/></operator><name pos:line="76" pos:column="20">acquire_set<pos:position pos:line="76" pos:column="31"/></name></name> <operator pos:line="76" pos:column="32">=<pos:position pos:line="76" pos:column="33"/></operator> <literal type="number" pos:line="76" pos:column="34">1<pos:position pos:line="76" pos:column="35"/></literal></expr>;<pos:position pos:line="76" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="77" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="78" pos:column="5">else <if pos:line="78" pos:column="10">if <condition pos:line="78" pos:column="13">(<expr><operator pos:line="78" pos:column="14">!<pos:position pos:line="78" pos:column="15"/></operator><call><name pos:line="78" pos:column="15">strcasecmp<pos:position pos:line="78" pos:column="25"/></name><argument_list pos:line="78" pos:column="25">(<argument><expr><name pos:line="78" pos:column="26">key<pos:position pos:line="78" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="31">"timeout"<pos:position pos:line="78" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="78" pos:column="42"/></condition><then pos:line="78" pos:column="42"> <block pos:line="78" pos:column="43">{
        <comment type="block" pos:line="79" pos:column="9">/* Connection timeout in seconds.
         * Defaults to server timeout.
         */</comment>
        <expr_stmt><expr><name pos:line="82" pos:column="9">ival<pos:position pos:line="82" pos:column="13"/></name> <operator pos:line="82" pos:column="14">=<pos:position pos:line="82" pos:column="15"/></operator> <call><name pos:line="82" pos:column="16">atoi<pos:position pos:line="82" pos:column="20"/></name><argument_list pos:line="82" pos:column="20">(<argument><expr><name pos:line="82" pos:column="21">val<pos:position pos:line="82" pos:column="24"/></name></expr></argument>)<pos:position pos:line="82" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="26"/></expr_stmt>
        <if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><name pos:line="83" pos:column="13">ival<pos:position pos:line="83" pos:column="17"/></name> <operator pos:line="83" pos:column="18">&lt;<pos:position pos:line="83" pos:column="22"/></operator> <literal type="number" pos:line="83" pos:column="20">1<pos:position pos:line="83" pos:column="21"/></literal></expr>)<pos:position pos:line="83" pos:column="22"/></condition><then pos:line="83" pos:column="22">
            <block type="pseudo"><return pos:line="84" pos:column="13">return <expr><literal type="string" pos:line="84" pos:column="20">"Timeout must be at least one second"<pos:position pos:line="84" pos:column="57"/></literal></expr>;<pos:position pos:line="84" pos:column="58"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="85" pos:column="9">worker<pos:position pos:line="85" pos:column="15"/></name><operator pos:line="85" pos:column="15">-&gt;<pos:position pos:line="85" pos:column="20"/></operator><name pos:line="85" pos:column="17">s<pos:position pos:line="85" pos:column="18"/></name><operator pos:line="85" pos:column="18">-&gt;<pos:position pos:line="85" pos:column="23"/></operator><name pos:line="85" pos:column="20">timeout<pos:position pos:line="85" pos:column="27"/></name></name> <operator pos:line="85" pos:column="28">=<pos:position pos:line="85" pos:column="29"/></operator> <call><name pos:line="85" pos:column="30">apr_time_from_sec<pos:position pos:line="85" pos:column="47"/></name><argument_list pos:line="85" pos:column="47">(<argument><expr><name pos:line="85" pos:column="48">ival<pos:position pos:line="85" pos:column="52"/></name></expr></argument>)<pos:position pos:line="85" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="86" pos:column="9">worker<pos:position pos:line="86" pos:column="15"/></name><operator pos:line="86" pos:column="15">-&gt;<pos:position pos:line="86" pos:column="20"/></operator><name pos:line="86" pos:column="17">s<pos:position pos:line="86" pos:column="18"/></name><operator pos:line="86" pos:column="18">-&gt;<pos:position pos:line="86" pos:column="23"/></operator><name pos:line="86" pos:column="20">timeout_set<pos:position pos:line="86" pos:column="31"/></name></name> <operator pos:line="86" pos:column="32">=<pos:position pos:line="86" pos:column="33"/></operator> <literal type="number" pos:line="86" pos:column="34">1<pos:position pos:line="86" pos:column="35"/></literal></expr>;<pos:position pos:line="86" pos:column="36"/></expr_stmt>
    }<pos:position pos:line="87" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="88" pos:column="5">else <if pos:line="88" pos:column="10">if <condition pos:line="88" pos:column="13">(<expr><operator pos:line="88" pos:column="14">!<pos:position pos:line="88" pos:column="15"/></operator><call><name pos:line="88" pos:column="15">strcasecmp<pos:position pos:line="88" pos:column="25"/></name><argument_list pos:line="88" pos:column="25">(<argument><expr><name pos:line="88" pos:column="26">key<pos:position pos:line="88" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="31">"iobuffersize"<pos:position pos:line="88" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="47"/></condition><then pos:line="88" pos:column="47"> <block pos:line="88" pos:column="48">{
        <decl_stmt><decl><type><name pos:line="89" pos:column="9">long<pos:position pos:line="89" pos:column="13"/></name></type> <name pos:line="89" pos:column="14">s<pos:position pos:line="89" pos:column="15"/></name> <init pos:line="89" pos:column="16">= <expr><call><name pos:line="89" pos:column="18">atol<pos:position pos:line="89" pos:column="22"/></name><argument_list pos:line="89" pos:column="22">(<argument><expr><name pos:line="89" pos:column="23">val<pos:position pos:line="89" pos:column="26"/></name></expr></argument>)<pos:position pos:line="89" pos:column="27"/></argument_list></call></expr></init></decl>;<pos:position pos:line="89" pos:column="28"/></decl_stmt>
        <if pos:line="90" pos:column="9">if <condition pos:line="90" pos:column="12">(<expr><name pos:line="90" pos:column="13">s<pos:position pos:line="90" pos:column="14"/></name> <operator pos:line="90" pos:column="15">&lt;<pos:position pos:line="90" pos:column="19"/></operator> <literal type="number" pos:line="90" pos:column="17">512<pos:position pos:line="90" pos:column="20"/></literal> <operator pos:line="90" pos:column="21">&amp;&amp;<pos:position pos:line="90" pos:column="31"/></operator> <name pos:line="90" pos:column="24">s<pos:position pos:line="90" pos:column="25"/></name></expr>)<pos:position pos:line="90" pos:column="26"/></condition><then pos:line="90" pos:column="26"> <block pos:line="90" pos:column="27">{
            <return pos:line="91" pos:column="13">return <expr><literal type="string" pos:line="91" pos:column="20">"IOBufferSize must be &gt;= 512 bytes, or 0 for system default."<pos:position pos:line="91" pos:column="84"/></literal></expr>;<pos:position pos:line="91" pos:column="82"/></return>
        }<pos:position pos:line="92" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="93" pos:column="9">worker<pos:position pos:line="93" pos:column="15"/></name><operator pos:line="93" pos:column="15">-&gt;<pos:position pos:line="93" pos:column="20"/></operator><name pos:line="93" pos:column="17">s<pos:position pos:line="93" pos:column="18"/></name><operator pos:line="93" pos:column="18">-&gt;<pos:position pos:line="93" pos:column="23"/></operator><name pos:line="93" pos:column="20">io_buffer_size<pos:position pos:line="93" pos:column="34"/></name></name> <operator pos:line="93" pos:column="35">=<pos:position pos:line="93" pos:column="36"/></operator> <operator pos:line="93" pos:column="37">(<pos:position pos:line="93" pos:column="38"/></operator><ternary><condition><expr><name pos:line="93" pos:column="38">s<pos:position pos:line="93" pos:column="39"/></name></expr> ?<pos:position pos:line="93" pos:column="41"/></condition><then pos:line="93" pos:column="41"> <expr><name pos:line="93" pos:column="42">s<pos:position pos:line="93" pos:column="43"/></name></expr> <pos:position pos:line="93" pos:column="44"/></then><else pos:line="93" pos:column="44">: <expr><name pos:line="93" pos:column="46">AP_IOBUFSIZE<pos:position pos:line="93" pos:column="58"/></name></expr></else></ternary><operator pos:line="93" pos:column="58">)<pos:position pos:line="93" pos:column="59"/></operator></expr>;<pos:position pos:line="93" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="94" pos:column="9">worker<pos:position pos:line="94" pos:column="15"/></name><operator pos:line="94" pos:column="15">-&gt;<pos:position pos:line="94" pos:column="20"/></operator><name pos:line="94" pos:column="17">s<pos:position pos:line="94" pos:column="18"/></name><operator pos:line="94" pos:column="18">-&gt;<pos:position pos:line="94" pos:column="23"/></operator><name pos:line="94" pos:column="20">io_buffer_size_set<pos:position pos:line="94" pos:column="38"/></name></name> <operator pos:line="94" pos:column="39">=<pos:position pos:line="94" pos:column="40"/></operator> <literal type="number" pos:line="94" pos:column="41">1<pos:position pos:line="94" pos:column="42"/></literal></expr>;<pos:position pos:line="94" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="95" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="96" pos:column="5">else <if pos:line="96" pos:column="10">if <condition pos:line="96" pos:column="13">(<expr><operator pos:line="96" pos:column="14">!<pos:position pos:line="96" pos:column="15"/></operator><call><name pos:line="96" pos:column="15">strcasecmp<pos:position pos:line="96" pos:column="25"/></name><argument_list pos:line="96" pos:column="25">(<argument><expr><name pos:line="96" pos:column="26">key<pos:position pos:line="96" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="96" pos:column="31">"receivebuffersize"<pos:position pos:line="96" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="96" pos:column="52"/></condition><then pos:line="96" pos:column="52"> <block pos:line="96" pos:column="53">{
        <expr_stmt><expr><name pos:line="97" pos:column="9">ival<pos:position pos:line="97" pos:column="13"/></name> <operator pos:line="97" pos:column="14">=<pos:position pos:line="97" pos:column="15"/></operator> <call><name pos:line="97" pos:column="16">atoi<pos:position pos:line="97" pos:column="20"/></name><argument_list pos:line="97" pos:column="20">(<argument><expr><name pos:line="97" pos:column="21">val<pos:position pos:line="97" pos:column="24"/></name></expr></argument>)<pos:position pos:line="97" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="26"/></expr_stmt>
        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">ival<pos:position pos:line="98" pos:column="17"/></name> <operator pos:line="98" pos:column="18">&lt;<pos:position pos:line="98" pos:column="22"/></operator> <literal type="number" pos:line="98" pos:column="20">512<pos:position pos:line="98" pos:column="23"/></literal> <operator pos:line="98" pos:column="24">&amp;&amp;<pos:position pos:line="98" pos:column="34"/></operator> <name pos:line="98" pos:column="27">ival<pos:position pos:line="98" pos:column="31"/></name> <operator pos:line="98" pos:column="32">!=<pos:position pos:line="98" pos:column="34"/></operator> <literal type="number" pos:line="98" pos:column="35">0<pos:position pos:line="98" pos:column="36"/></literal></expr>)<pos:position pos:line="98" pos:column="37"/></condition><then pos:line="98" pos:column="37"> <block pos:line="98" pos:column="38">{
            <return pos:line="99" pos:column="13">return <expr><literal type="string" pos:line="99" pos:column="20">"ReceiveBufferSize must be &gt;= 512 bytes, or 0 for system default."<pos:position pos:line="99" pos:column="89"/></literal></expr>;<pos:position pos:line="99" pos:column="87"/></return>
        }<pos:position pos:line="100" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="101" pos:column="9">worker<pos:position pos:line="101" pos:column="15"/></name><operator pos:line="101" pos:column="15">-&gt;<pos:position pos:line="101" pos:column="20"/></operator><name pos:line="101" pos:column="17">s<pos:position pos:line="101" pos:column="18"/></name><operator pos:line="101" pos:column="18">-&gt;<pos:position pos:line="101" pos:column="23"/></operator><name pos:line="101" pos:column="20">recv_buffer_size<pos:position pos:line="101" pos:column="36"/></name></name> <operator pos:line="101" pos:column="37">=<pos:position pos:line="101" pos:column="38"/></operator> <name pos:line="101" pos:column="39">ival<pos:position pos:line="101" pos:column="43"/></name></expr>;<pos:position pos:line="101" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="102" pos:column="9">worker<pos:position pos:line="102" pos:column="15"/></name><operator pos:line="102" pos:column="15">-&gt;<pos:position pos:line="102" pos:column="20"/></operator><name pos:line="102" pos:column="17">s<pos:position pos:line="102" pos:column="18"/></name><operator pos:line="102" pos:column="18">-&gt;<pos:position pos:line="102" pos:column="23"/></operator><name pos:line="102" pos:column="20">recv_buffer_size_set<pos:position pos:line="102" pos:column="40"/></name></name> <operator pos:line="102" pos:column="41">=<pos:position pos:line="102" pos:column="42"/></operator> <literal type="number" pos:line="102" pos:column="43">1<pos:position pos:line="102" pos:column="44"/></literal></expr>;<pos:position pos:line="102" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="103" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="104" pos:column="5">else <if pos:line="104" pos:column="10">if <condition pos:line="104" pos:column="13">(<expr><operator pos:line="104" pos:column="14">!<pos:position pos:line="104" pos:column="15"/></operator><call><name pos:line="104" pos:column="15">strcasecmp<pos:position pos:line="104" pos:column="25"/></name><argument_list pos:line="104" pos:column="25">(<argument><expr><name pos:line="104" pos:column="26">key<pos:position pos:line="104" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="104" pos:column="31">"keepalive"<pos:position pos:line="104" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="104" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="104" pos:column="44"/></condition><then pos:line="104" pos:column="44"> <block pos:line="104" pos:column="45">{
        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><operator pos:line="105" pos:column="13">!<pos:position pos:line="105" pos:column="14"/></operator><call><name pos:line="105" pos:column="14">strcasecmp<pos:position pos:line="105" pos:column="24"/></name><argument_list pos:line="105" pos:column="24">(<argument><expr><name pos:line="105" pos:column="25">val<pos:position pos:line="105" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="105" pos:column="30">"on"<pos:position pos:line="105" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="105" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="105" pos:column="36"/></condition><then pos:line="105" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="106" pos:column="13">worker<pos:position pos:line="106" pos:column="19"/></name><operator pos:line="106" pos:column="19">-&gt;<pos:position pos:line="106" pos:column="24"/></operator><name pos:line="106" pos:column="21">s<pos:position pos:line="106" pos:column="22"/></name><operator pos:line="106" pos:column="22">-&gt;<pos:position pos:line="106" pos:column="27"/></operator><name pos:line="106" pos:column="24">keepalive<pos:position pos:line="106" pos:column="33"/></name></name> <operator pos:line="106" pos:column="34">=<pos:position pos:line="106" pos:column="35"/></operator> <literal type="number" pos:line="106" pos:column="36">1<pos:position pos:line="106" pos:column="37"/></literal></expr>;<pos:position pos:line="106" pos:column="38"/></expr_stmt></block></then>
        <elseif pos:line="107" pos:column="9">else <if pos:line="107" pos:column="14">if <condition pos:line="107" pos:column="17">(<expr><operator pos:line="107" pos:column="18">!<pos:position pos:line="107" pos:column="19"/></operator><call><name pos:line="107" pos:column="19">strcasecmp<pos:position pos:line="107" pos:column="29"/></name><argument_list pos:line="107" pos:column="29">(<argument><expr><name pos:line="107" pos:column="30">val<pos:position pos:line="107" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="35">"off"<pos:position pos:line="107" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="107" pos:column="42"/></condition><then pos:line="107" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="108" pos:column="13">worker<pos:position pos:line="108" pos:column="19"/></name><operator pos:line="108" pos:column="19">-&gt;<pos:position pos:line="108" pos:column="24"/></operator><name pos:line="108" pos:column="21">s<pos:position pos:line="108" pos:column="22"/></name><operator pos:line="108" pos:column="22">-&gt;<pos:position pos:line="108" pos:column="27"/></operator><name pos:line="108" pos:column="24">keepalive<pos:position pos:line="108" pos:column="33"/></name></name> <operator pos:line="108" pos:column="34">=<pos:position pos:line="108" pos:column="35"/></operator> <literal type="number" pos:line="108" pos:column="36">0<pos:position pos:line="108" pos:column="37"/></literal></expr>;<pos:position pos:line="108" pos:column="38"/></expr_stmt></block></then></if></elseif>
        <else pos:line="109" pos:column="9">else
            <block type="pseudo"><return pos:line="110" pos:column="13">return <expr><literal type="string" pos:line="110" pos:column="20">"KeepAlive must be On|Off"<pos:position pos:line="110" pos:column="46"/></literal></expr>;<pos:position pos:line="110" pos:column="47"/></return></block></else></if>
        <expr_stmt><expr><name><name pos:line="111" pos:column="9">worker<pos:position pos:line="111" pos:column="15"/></name><operator pos:line="111" pos:column="15">-&gt;<pos:position pos:line="111" pos:column="20"/></operator><name pos:line="111" pos:column="17">s<pos:position pos:line="111" pos:column="18"/></name><operator pos:line="111" pos:column="18">-&gt;<pos:position pos:line="111" pos:column="23"/></operator><name pos:line="111" pos:column="20">keepalive_set<pos:position pos:line="111" pos:column="33"/></name></name> <operator pos:line="111" pos:column="34">=<pos:position pos:line="111" pos:column="35"/></operator> <literal type="number" pos:line="111" pos:column="36">1<pos:position pos:line="111" pos:column="37"/></literal></expr>;<pos:position pos:line="111" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="112" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="113" pos:column="5">else <if pos:line="113" pos:column="10">if <condition pos:line="113" pos:column="13">(<expr><operator pos:line="113" pos:column="14">!<pos:position pos:line="113" pos:column="15"/></operator><call><name pos:line="113" pos:column="15">strcasecmp<pos:position pos:line="113" pos:column="25"/></name><argument_list pos:line="113" pos:column="25">(<argument><expr><name pos:line="113" pos:column="26">key<pos:position pos:line="113" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="113" pos:column="31">"disablereuse"<pos:position pos:line="113" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="113" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="113" pos:column="47"/></condition><then pos:line="113" pos:column="47"> <block pos:line="113" pos:column="48">{
        <if pos:line="114" pos:column="9">if <condition pos:line="114" pos:column="12">(<expr><operator pos:line="114" pos:column="13">!<pos:position pos:line="114" pos:column="14"/></operator><call><name pos:line="114" pos:column="14">strcasecmp<pos:position pos:line="114" pos:column="24"/></name><argument_list pos:line="114" pos:column="24">(<argument><expr><name pos:line="114" pos:column="25">val<pos:position pos:line="114" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="114" pos:column="30">"on"<pos:position pos:line="114" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="114" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="114" pos:column="36"/></condition><then pos:line="114" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="115" pos:column="13">worker<pos:position pos:line="115" pos:column="19"/></name><operator pos:line="115" pos:column="19">-&gt;<pos:position pos:line="115" pos:column="24"/></operator><name pos:line="115" pos:column="21">s<pos:position pos:line="115" pos:column="22"/></name><operator pos:line="115" pos:column="22">-&gt;<pos:position pos:line="115" pos:column="27"/></operator><name pos:line="115" pos:column="24">disablereuse<pos:position pos:line="115" pos:column="36"/></name></name> <operator pos:line="115" pos:column="37">=<pos:position pos:line="115" pos:column="38"/></operator> <literal type="number" pos:line="115" pos:column="39">1<pos:position pos:line="115" pos:column="40"/></literal></expr>;<pos:position pos:line="115" pos:column="41"/></expr_stmt></block></then>
        <elseif pos:line="116" pos:column="9">else <if pos:line="116" pos:column="14">if <condition pos:line="116" pos:column="17">(<expr><operator pos:line="116" pos:column="18">!<pos:position pos:line="116" pos:column="19"/></operator><call><name pos:line="116" pos:column="19">strcasecmp<pos:position pos:line="116" pos:column="29"/></name><argument_list pos:line="116" pos:column="29">(<argument><expr><name pos:line="116" pos:column="30">val<pos:position pos:line="116" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="116" pos:column="35">"off"<pos:position pos:line="116" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="116" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="116" pos:column="42"/></condition><then pos:line="116" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="117" pos:column="13">worker<pos:position pos:line="117" pos:column="19"/></name><operator pos:line="117" pos:column="19">-&gt;<pos:position pos:line="117" pos:column="24"/></operator><name pos:line="117" pos:column="21">s<pos:position pos:line="117" pos:column="22"/></name><operator pos:line="117" pos:column="22">-&gt;<pos:position pos:line="117" pos:column="27"/></operator><name pos:line="117" pos:column="24">disablereuse<pos:position pos:line="117" pos:column="36"/></name></name> <operator pos:line="117" pos:column="37">=<pos:position pos:line="117" pos:column="38"/></operator> <literal type="number" pos:line="117" pos:column="39">0<pos:position pos:line="117" pos:column="40"/></literal></expr>;<pos:position pos:line="117" pos:column="41"/></expr_stmt></block></then></if></elseif>
        <else pos:line="118" pos:column="9">else
            <block type="pseudo"><return pos:line="119" pos:column="13">return <expr><literal type="string" pos:line="119" pos:column="20">"DisableReuse must be On|Off"<pos:position pos:line="119" pos:column="49"/></literal></expr>;<pos:position pos:line="119" pos:column="50"/></return></block></else></if>
        <expr_stmt><expr><name><name pos:line="120" pos:column="9">worker<pos:position pos:line="120" pos:column="15"/></name><operator pos:line="120" pos:column="15">-&gt;<pos:position pos:line="120" pos:column="20"/></operator><name pos:line="120" pos:column="17">s<pos:position pos:line="120" pos:column="18"/></name><operator pos:line="120" pos:column="18">-&gt;<pos:position pos:line="120" pos:column="23"/></operator><name pos:line="120" pos:column="20">disablereuse_set<pos:position pos:line="120" pos:column="36"/></name></name> <operator pos:line="120" pos:column="37">=<pos:position pos:line="120" pos:column="38"/></operator> <literal type="number" pos:line="120" pos:column="39">1<pos:position pos:line="120" pos:column="40"/></literal></expr>;<pos:position pos:line="120" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="121" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="122" pos:column="5">else <if pos:line="122" pos:column="10">if <condition pos:line="122" pos:column="13">(<expr><operator pos:line="122" pos:column="14">!<pos:position pos:line="122" pos:column="15"/></operator><call><name pos:line="122" pos:column="15">strcasecmp<pos:position pos:line="122" pos:column="25"/></name><argument_list pos:line="122" pos:column="25">(<argument><expr><name pos:line="122" pos:column="26">key<pos:position pos:line="122" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="122" pos:column="31">"enablereuse"<pos:position pos:line="122" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="122" pos:column="45"/></argument_list></call></expr>)<pos:position pos:line="122" pos:column="46"/></condition><then pos:line="122" pos:column="46"> <block pos:line="122" pos:column="47">{
        <if pos:line="123" pos:column="9">if <condition pos:line="123" pos:column="12">(<expr><operator pos:line="123" pos:column="13">!<pos:position pos:line="123" pos:column="14"/></operator><call><name pos:line="123" pos:column="14">strcasecmp<pos:position pos:line="123" pos:column="24"/></name><argument_list pos:line="123" pos:column="24">(<argument><expr><name pos:line="123" pos:column="25">val<pos:position pos:line="123" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="123" pos:column="30">"on"<pos:position pos:line="123" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="123" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="123" pos:column="36"/></condition><then pos:line="123" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="124" pos:column="13">worker<pos:position pos:line="124" pos:column="19"/></name><operator pos:line="124" pos:column="19">-&gt;<pos:position pos:line="124" pos:column="24"/></operator><name pos:line="124" pos:column="21">s<pos:position pos:line="124" pos:column="22"/></name><operator pos:line="124" pos:column="22">-&gt;<pos:position pos:line="124" pos:column="27"/></operator><name pos:line="124" pos:column="24">disablereuse<pos:position pos:line="124" pos:column="36"/></name></name> <operator pos:line="124" pos:column="37">=<pos:position pos:line="124" pos:column="38"/></operator> <literal type="number" pos:line="124" pos:column="39">0<pos:position pos:line="124" pos:column="40"/></literal></expr>;<pos:position pos:line="124" pos:column="41"/></expr_stmt></block></then>
        <elseif pos:line="125" pos:column="9">else <if pos:line="125" pos:column="14">if <condition pos:line="125" pos:column="17">(<expr><operator pos:line="125" pos:column="18">!<pos:position pos:line="125" pos:column="19"/></operator><call><name pos:line="125" pos:column="19">strcasecmp<pos:position pos:line="125" pos:column="29"/></name><argument_list pos:line="125" pos:column="29">(<argument><expr><name pos:line="125" pos:column="30">val<pos:position pos:line="125" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="35">"off"<pos:position pos:line="125" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="125" pos:column="42"/></condition><then pos:line="125" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="126" pos:column="13">worker<pos:position pos:line="126" pos:column="19"/></name><operator pos:line="126" pos:column="19">-&gt;<pos:position pos:line="126" pos:column="24"/></operator><name pos:line="126" pos:column="21">s<pos:position pos:line="126" pos:column="22"/></name><operator pos:line="126" pos:column="22">-&gt;<pos:position pos:line="126" pos:column="27"/></operator><name pos:line="126" pos:column="24">disablereuse<pos:position pos:line="126" pos:column="36"/></name></name> <operator pos:line="126" pos:column="37">=<pos:position pos:line="126" pos:column="38"/></operator> <literal type="number" pos:line="126" pos:column="39">1<pos:position pos:line="126" pos:column="40"/></literal></expr>;<pos:position pos:line="126" pos:column="41"/></expr_stmt></block></then></if></elseif>
        <else pos:line="127" pos:column="9">else
            <block type="pseudo"><return pos:line="128" pos:column="13">return <expr><literal type="string" pos:line="128" pos:column="20">"EnableReuse must be On|Off"<pos:position pos:line="128" pos:column="48"/></literal></expr>;<pos:position pos:line="128" pos:column="49"/></return></block></else></if>
        <expr_stmt><expr><name><name pos:line="129" pos:column="9">worker<pos:position pos:line="129" pos:column="15"/></name><operator pos:line="129" pos:column="15">-&gt;<pos:position pos:line="129" pos:column="20"/></operator><name pos:line="129" pos:column="17">s<pos:position pos:line="129" pos:column="18"/></name><operator pos:line="129" pos:column="18">-&gt;<pos:position pos:line="129" pos:column="23"/></operator><name pos:line="129" pos:column="20">disablereuse_set<pos:position pos:line="129" pos:column="36"/></name></name> <operator pos:line="129" pos:column="37">=<pos:position pos:line="129" pos:column="38"/></operator> <literal type="number" pos:line="129" pos:column="39">1<pos:position pos:line="129" pos:column="40"/></literal></expr>;<pos:position pos:line="129" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="130" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="131" pos:column="5">else <if pos:line="131" pos:column="10">if <condition pos:line="131" pos:column="13">(<expr><operator pos:line="131" pos:column="14">!<pos:position pos:line="131" pos:column="15"/></operator><call><name pos:line="131" pos:column="15">strcasecmp<pos:position pos:line="131" pos:column="25"/></name><argument_list pos:line="131" pos:column="25">(<argument><expr><name pos:line="131" pos:column="26">key<pos:position pos:line="131" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="31">"route"<pos:position pos:line="131" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="131" pos:column="40"/></condition><then pos:line="131" pos:column="40"> <block pos:line="131" pos:column="41">{
        <comment type="block" pos:line="132" pos:column="9">/* Worker route.
         */</comment>
        <if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><call><name pos:line="134" pos:column="13">strlen<pos:position pos:line="134" pos:column="19"/></name><argument_list pos:line="134" pos:column="19">(<argument><expr><name pos:line="134" pos:column="20">val<pos:position pos:line="134" pos:column="23"/></name></expr></argument>)<pos:position pos:line="134" pos:column="24"/></argument_list></call> <operator pos:line="134" pos:column="25">&gt;=<pos:position pos:line="134" pos:column="30"/></operator> <sizeof pos:line="134" pos:column="28">sizeof<argument_list pos:line="134" pos:column="34">(<argument><expr><name><name pos:line="134" pos:column="35">worker<pos:position pos:line="134" pos:column="41"/></name><operator pos:line="134" pos:column="41">-&gt;<pos:position pos:line="134" pos:column="46"/></operator><name pos:line="134" pos:column="43">s<pos:position pos:line="134" pos:column="44"/></name><operator pos:line="134" pos:column="44">-&gt;<pos:position pos:line="134" pos:column="49"/></operator><name pos:line="134" pos:column="46">route<pos:position pos:line="134" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="134" pos:column="52"/></argument_list></sizeof></expr>)<pos:position pos:line="134" pos:column="53"/></condition><then pos:line="134" pos:column="53">
            <block type="pseudo"><return pos:line="135" pos:column="13">return <expr><call><name pos:line="135" pos:column="20">apr_psprintf<pos:position pos:line="135" pos:column="32"/></name><argument_list pos:line="135" pos:column="32">(<argument><expr><name pos:line="135" pos:column="33">p<pos:position pos:line="135" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="36">"Route length must be &lt; %d characters"<pos:position pos:line="135" pos:column="77"/></literal></expr></argument>,
                    <argument><expr><operator pos:line="136" pos:column="21">(<pos:position pos:line="136" pos:column="22"/></operator><name pos:line="136" pos:column="22">int<pos:position pos:line="136" pos:column="25"/></name><operator pos:line="136" pos:column="25">)<pos:position pos:line="136" pos:column="26"/></operator><sizeof pos:line="136" pos:column="26">sizeof<argument_list pos:line="136" pos:column="32">(<argument><expr><name><name pos:line="136" pos:column="33">worker<pos:position pos:line="136" pos:column="39"/></name><operator pos:line="136" pos:column="39">-&gt;<pos:position pos:line="136" pos:column="44"/></operator><name pos:line="136" pos:column="41">s<pos:position pos:line="136" pos:column="42"/></name><operator pos:line="136" pos:column="42">-&gt;<pos:position pos:line="136" pos:column="47"/></operator><name pos:line="136" pos:column="44">route<pos:position pos:line="136" pos:column="49"/></name></name></expr></argument>)<pos:position pos:line="136" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="136" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="52"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="137" pos:column="9">PROXY_STRNCPY<pos:position pos:line="137" pos:column="22"/></name><argument_list pos:line="137" pos:column="22">(<argument><expr><name><name pos:line="137" pos:column="23">worker<pos:position pos:line="137" pos:column="29"/></name><operator pos:line="137" pos:column="29">-&gt;<pos:position pos:line="137" pos:column="34"/></operator><name pos:line="137" pos:column="31">s<pos:position pos:line="137" pos:column="32"/></name><operator pos:line="137" pos:column="32">-&gt;<pos:position pos:line="137" pos:column="37"/></operator><name pos:line="137" pos:column="34">route<pos:position pos:line="137" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="41">val<pos:position pos:line="137" pos:column="44"/></name></expr></argument>)<pos:position pos:line="137" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="138" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="139" pos:column="5">else <if pos:line="139" pos:column="10">if <condition pos:line="139" pos:column="13">(<expr><operator pos:line="139" pos:column="14">!<pos:position pos:line="139" pos:column="15"/></operator><call><name pos:line="139" pos:column="15">strcasecmp<pos:position pos:line="139" pos:column="25"/></name><argument_list pos:line="139" pos:column="25">(<argument><expr><name pos:line="139" pos:column="26">key<pos:position pos:line="139" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="139" pos:column="31">"redirect"<pos:position pos:line="139" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="139" pos:column="43"/></condition><then pos:line="139" pos:column="43"> <block pos:line="139" pos:column="44">{
        <comment type="block" pos:line="140" pos:column="9">/* Worker redirection route.
         */</comment>
        <if pos:line="142" pos:column="9">if <condition pos:line="142" pos:column="12">(<expr><call><name pos:line="142" pos:column="13">strlen<pos:position pos:line="142" pos:column="19"/></name><argument_list pos:line="142" pos:column="19">(<argument><expr><name pos:line="142" pos:column="20">val<pos:position pos:line="142" pos:column="23"/></name></expr></argument>)<pos:position pos:line="142" pos:column="24"/></argument_list></call> <operator pos:line="142" pos:column="25">&gt;=<pos:position pos:line="142" pos:column="30"/></operator> <sizeof pos:line="142" pos:column="28">sizeof<argument_list pos:line="142" pos:column="34">(<argument><expr><name><name pos:line="142" pos:column="35">worker<pos:position pos:line="142" pos:column="41"/></name><operator pos:line="142" pos:column="41">-&gt;<pos:position pos:line="142" pos:column="46"/></operator><name pos:line="142" pos:column="43">s<pos:position pos:line="142" pos:column="44"/></name><operator pos:line="142" pos:column="44">-&gt;<pos:position pos:line="142" pos:column="49"/></operator><name pos:line="142" pos:column="46">redirect<pos:position pos:line="142" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="142" pos:column="55"/></argument_list></sizeof></expr>)<pos:position pos:line="142" pos:column="56"/></condition><then pos:line="142" pos:column="56">
            <block type="pseudo"><return pos:line="143" pos:column="13">return <expr><call><name pos:line="143" pos:column="20">apr_psprintf<pos:position pos:line="143" pos:column="32"/></name><argument_list pos:line="143" pos:column="32">(<argument><expr><name pos:line="143" pos:column="33">p<pos:position pos:line="143" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="143" pos:column="36">"Redirect length must be &lt; %d characters"<pos:position pos:line="143" pos:column="80"/></literal></expr></argument>,
                    <argument><expr><operator pos:line="144" pos:column="21">(<pos:position pos:line="144" pos:column="22"/></operator><name pos:line="144" pos:column="22">int<pos:position pos:line="144" pos:column="25"/></name><operator pos:line="144" pos:column="25">)<pos:position pos:line="144" pos:column="26"/></operator><sizeof pos:line="144" pos:column="26">sizeof<argument_list pos:line="144" pos:column="32">(<argument><expr><name><name pos:line="144" pos:column="33">worker<pos:position pos:line="144" pos:column="39"/></name><operator pos:line="144" pos:column="39">-&gt;<pos:position pos:line="144" pos:column="44"/></operator><name pos:line="144" pos:column="41">s<pos:position pos:line="144" pos:column="42"/></name><operator pos:line="144" pos:column="42">-&gt;<pos:position pos:line="144" pos:column="47"/></operator><name pos:line="144" pos:column="44">redirect<pos:position pos:line="144" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="144" pos:column="53"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="144" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="55"/></return></block></then></if>
        <expr_stmt><expr><call><name pos:line="145" pos:column="9">PROXY_STRNCPY<pos:position pos:line="145" pos:column="22"/></name><argument_list pos:line="145" pos:column="22">(<argument><expr><name><name pos:line="145" pos:column="23">worker<pos:position pos:line="145" pos:column="29"/></name><operator pos:line="145" pos:column="29">-&gt;<pos:position pos:line="145" pos:column="34"/></operator><name pos:line="145" pos:column="31">s<pos:position pos:line="145" pos:column="32"/></name><operator pos:line="145" pos:column="32">-&gt;<pos:position pos:line="145" pos:column="37"/></operator><name pos:line="145" pos:column="34">redirect<pos:position pos:line="145" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="145" pos:column="44">val<pos:position pos:line="145" pos:column="47"/></name></expr></argument>)<pos:position pos:line="145" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="146" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="147" pos:column="5">else <if pos:line="147" pos:column="10">if <condition pos:line="147" pos:column="13">(<expr><operator pos:line="147" pos:column="14">!<pos:position pos:line="147" pos:column="15"/></operator><call><name pos:line="147" pos:column="15">strcasecmp<pos:position pos:line="147" pos:column="25"/></name><argument_list pos:line="147" pos:column="25">(<argument><expr><name pos:line="147" pos:column="26">key<pos:position pos:line="147" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="31">"status"<pos:position pos:line="147" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="41"/></condition><then pos:line="147" pos:column="41"> <block pos:line="147" pos:column="42">{
        <decl_stmt><decl><type><specifier pos:line="148" pos:column="9">const<pos:position pos:line="148" pos:column="14"/></specifier> <name pos:line="148" pos:column="15">char<pos:position pos:line="148" pos:column="19"/></name> <modifier pos:line="148" pos:column="20">*<pos:position pos:line="148" pos:column="21"/></modifier></type><name pos:line="148" pos:column="21">v<pos:position pos:line="148" pos:column="22"/></name></decl>;<pos:position pos:line="148" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="149" pos:column="9">int<pos:position pos:line="149" pos:column="12"/></name></type> <name pos:line="149" pos:column="13">mode<pos:position pos:line="149" pos:column="17"/></name> <init pos:line="149" pos:column="18">= <expr><literal type="number" pos:line="149" pos:column="20">1<pos:position pos:line="149" pos:column="21"/></literal></expr></init></decl>;<pos:position pos:line="149" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="150" pos:column="9">apr_status_t<pos:position pos:line="150" pos:column="21"/></name></type> <name pos:line="150" pos:column="22">rv<pos:position pos:line="150" pos:column="24"/></name></decl>;<pos:position pos:line="150" pos:column="25"/></decl_stmt>
        <comment type="block" pos:line="151" pos:column="9">/* Worker status.
         */</comment>
        <for pos:line="153" pos:column="9">for <control pos:line="153" pos:column="13">(<init><expr><name pos:line="153" pos:column="14">v<pos:position pos:line="153" pos:column="15"/></name> <operator pos:line="153" pos:column="16">=<pos:position pos:line="153" pos:column="17"/></operator> <name pos:line="153" pos:column="18">val<pos:position pos:line="153" pos:column="21"/></name></expr>;<pos:position pos:line="153" pos:column="22"/></init> <condition><expr><operator pos:line="153" pos:column="23">*<pos:position pos:line="153" pos:column="24"/></operator><name pos:line="153" pos:column="24">v<pos:position pos:line="153" pos:column="25"/></name></expr>;<pos:position pos:line="153" pos:column="26"/></condition> <incr><expr><name pos:line="153" pos:column="27">v<pos:position pos:line="153" pos:column="28"/></name><operator pos:line="153" pos:column="28">++<pos:position pos:line="153" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="153" pos:column="31"/></control> <block pos:line="153" pos:column="32">{
            <if pos:line="154" pos:column="13">if <condition pos:line="154" pos:column="16">(<expr><operator pos:line="154" pos:column="17">*<pos:position pos:line="154" pos:column="18"/></operator><name pos:line="154" pos:column="18">v<pos:position pos:line="154" pos:column="19"/></name> <operator pos:line="154" pos:column="20">==<pos:position pos:line="154" pos:column="22"/></operator> <literal type="char" pos:line="154" pos:column="23">'+'<pos:position pos:line="154" pos:column="26"/></literal></expr>)<pos:position pos:line="154" pos:column="27"/></condition><then pos:line="154" pos:column="27"> <block pos:line="154" pos:column="28">{
                <expr_stmt><expr><name pos:line="155" pos:column="17">mode<pos:position pos:line="155" pos:column="21"/></name> <operator pos:line="155" pos:column="22">=<pos:position pos:line="155" pos:column="23"/></operator> <literal type="number" pos:line="155" pos:column="24">1<pos:position pos:line="155" pos:column="25"/></literal></expr>;<pos:position pos:line="155" pos:column="26"/></expr_stmt>
                <expr_stmt><expr><name pos:line="156" pos:column="17">v<pos:position pos:line="156" pos:column="18"/></name><operator pos:line="156" pos:column="18">++<pos:position pos:line="156" pos:column="20"/></operator></expr>;<pos:position pos:line="156" pos:column="21"/></expr_stmt>
            }<pos:position pos:line="157" pos:column="14"/></block></then>
            <elseif pos:line="158" pos:column="13">else <if pos:line="158" pos:column="18">if <condition pos:line="158" pos:column="21">(<expr><operator pos:line="158" pos:column="22">*<pos:position pos:line="158" pos:column="23"/></operator><name pos:line="158" pos:column="23">v<pos:position pos:line="158" pos:column="24"/></name> <operator pos:line="158" pos:column="25">==<pos:position pos:line="158" pos:column="27"/></operator> <literal type="char" pos:line="158" pos:column="28">'-'<pos:position pos:line="158" pos:column="31"/></literal></expr>)<pos:position pos:line="158" pos:column="32"/></condition><then pos:line="158" pos:column="32"> <block pos:line="158" pos:column="33">{
                <expr_stmt><expr><name pos:line="159" pos:column="17">mode<pos:position pos:line="159" pos:column="21"/></name> <operator pos:line="159" pos:column="22">=<pos:position pos:line="159" pos:column="23"/></operator> <literal type="number" pos:line="159" pos:column="24">0<pos:position pos:line="159" pos:column="25"/></literal></expr>;<pos:position pos:line="159" pos:column="26"/></expr_stmt>
                <expr_stmt><expr><name pos:line="160" pos:column="17">v<pos:position pos:line="160" pos:column="18"/></name><operator pos:line="160" pos:column="18">++<pos:position pos:line="160" pos:column="20"/></operator></expr>;<pos:position pos:line="160" pos:column="21"/></expr_stmt>
            }<pos:position pos:line="161" pos:column="14"/></block></then></if></elseif></if>
            <expr_stmt><expr><name pos:line="162" pos:column="13">rv<pos:position pos:line="162" pos:column="15"/></name> <operator pos:line="162" pos:column="16">=<pos:position pos:line="162" pos:column="17"/></operator> <call><name pos:line="162" pos:column="18">ap_proxy_set_wstatus<pos:position pos:line="162" pos:column="38"/></name><argument_list pos:line="162" pos:column="38">(<argument><expr><operator pos:line="162" pos:column="39">*<pos:position pos:line="162" pos:column="40"/></operator><name pos:line="162" pos:column="40">v<pos:position pos:line="162" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="43">mode<pos:position pos:line="162" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="162" pos:column="49">worker<pos:position pos:line="162" pos:column="55"/></name></expr></argument>)<pos:position pos:line="162" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="57"/></expr_stmt>
            <if pos:line="163" pos:column="13">if <condition pos:line="163" pos:column="16">(<expr><name pos:line="163" pos:column="17">rv<pos:position pos:line="163" pos:column="19"/></name> <operator pos:line="163" pos:column="20">!=<pos:position pos:line="163" pos:column="22"/></operator> <name pos:line="163" pos:column="23">APR_SUCCESS<pos:position pos:line="163" pos:column="34"/></name></expr>)<pos:position pos:line="163" pos:column="35"/></condition><then pos:line="163" pos:column="35">
                <block type="pseudo"><return pos:line="164" pos:column="17">return <expr><literal type="string" pos:line="164" pos:column="24">"Unknown status parameter option"<pos:position pos:line="164" pos:column="57"/></literal></expr>;<pos:position pos:line="164" pos:column="58"/></return></block></then></if>
        }<pos:position pos:line="165" pos:column="10"/></block></for>
    }<pos:position pos:line="166" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="167" pos:column="5">else <if pos:line="167" pos:column="10">if <condition pos:line="167" pos:column="13">(<expr><operator pos:line="167" pos:column="14">!<pos:position pos:line="167" pos:column="15"/></operator><call><name pos:line="167" pos:column="15">strcasecmp<pos:position pos:line="167" pos:column="25"/></name><argument_list pos:line="167" pos:column="25">(<argument><expr><name pos:line="167" pos:column="26">key<pos:position pos:line="167" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="167" pos:column="31">"flushpackets"<pos:position pos:line="167" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="167" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="167" pos:column="47"/></condition><then pos:line="167" pos:column="47"> <block pos:line="167" pos:column="48">{
        <if pos:line="168" pos:column="9">if <condition pos:line="168" pos:column="12">(<expr><operator pos:line="168" pos:column="13">!<pos:position pos:line="168" pos:column="14"/></operator><call><name pos:line="168" pos:column="14">strcasecmp<pos:position pos:line="168" pos:column="24"/></name><argument_list pos:line="168" pos:column="24">(<argument><expr><name pos:line="168" pos:column="25">val<pos:position pos:line="168" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="168" pos:column="30">"on"<pos:position pos:line="168" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="168" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="168" pos:column="36"/></condition><then pos:line="168" pos:column="36">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="169" pos:column="13">worker<pos:position pos:line="169" pos:column="19"/></name><operator pos:line="169" pos:column="19">-&gt;<pos:position pos:line="169" pos:column="24"/></operator><name pos:line="169" pos:column="21">s<pos:position pos:line="169" pos:column="22"/></name><operator pos:line="169" pos:column="22">-&gt;<pos:position pos:line="169" pos:column="27"/></operator><name pos:line="169" pos:column="24">flush_packets<pos:position pos:line="169" pos:column="37"/></name></name> <operator pos:line="169" pos:column="38">=<pos:position pos:line="169" pos:column="39"/></operator> <name pos:line="169" pos:column="40">flush_on<pos:position pos:line="169" pos:column="48"/></name></expr>;<pos:position pos:line="169" pos:column="49"/></expr_stmt></block></then>
        <elseif pos:line="170" pos:column="9">else <if pos:line="170" pos:column="14">if <condition pos:line="170" pos:column="17">(<expr><operator pos:line="170" pos:column="18">!<pos:position pos:line="170" pos:column="19"/></operator><call><name pos:line="170" pos:column="19">strcasecmp<pos:position pos:line="170" pos:column="29"/></name><argument_list pos:line="170" pos:column="29">(<argument><expr><name pos:line="170" pos:column="30">val<pos:position pos:line="170" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="170" pos:column="35">"off"<pos:position pos:line="170" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="170" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="170" pos:column="42"/></condition><then pos:line="170" pos:column="42">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="171" pos:column="13">worker<pos:position pos:line="171" pos:column="19"/></name><operator pos:line="171" pos:column="19">-&gt;<pos:position pos:line="171" pos:column="24"/></operator><name pos:line="171" pos:column="21">s<pos:position pos:line="171" pos:column="22"/></name><operator pos:line="171" pos:column="22">-&gt;<pos:position pos:line="171" pos:column="27"/></operator><name pos:line="171" pos:column="24">flush_packets<pos:position pos:line="171" pos:column="37"/></name></name> <operator pos:line="171" pos:column="38">=<pos:position pos:line="171" pos:column="39"/></operator> <name pos:line="171" pos:column="40">flush_off<pos:position pos:line="171" pos:column="49"/></name></expr>;<pos:position pos:line="171" pos:column="50"/></expr_stmt></block></then></if></elseif>
        <elseif pos:line="172" pos:column="9">else <if pos:line="172" pos:column="14">if <condition pos:line="172" pos:column="17">(<expr><operator pos:line="172" pos:column="18">!<pos:position pos:line="172" pos:column="19"/></operator><call><name pos:line="172" pos:column="19">strcasecmp<pos:position pos:line="172" pos:column="29"/></name><argument_list pos:line="172" pos:column="29">(<argument><expr><name pos:line="172" pos:column="30">val<pos:position pos:line="172" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="172" pos:column="35">"auto"<pos:position pos:line="172" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="172" pos:column="43"/></condition><then pos:line="172" pos:column="43">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="173" pos:column="13">worker<pos:position pos:line="173" pos:column="19"/></name><operator pos:line="173" pos:column="19">-&gt;<pos:position pos:line="173" pos:column="24"/></operator><name pos:line="173" pos:column="21">s<pos:position pos:line="173" pos:column="22"/></name><operator pos:line="173" pos:column="22">-&gt;<pos:position pos:line="173" pos:column="27"/></operator><name pos:line="173" pos:column="24">flush_packets<pos:position pos:line="173" pos:column="37"/></name></name> <operator pos:line="173" pos:column="38">=<pos:position pos:line="173" pos:column="39"/></operator> <name pos:line="173" pos:column="40">flush_auto<pos:position pos:line="173" pos:column="50"/></name></expr>;<pos:position pos:line="173" pos:column="51"/></expr_stmt></block></then></if></elseif>
        <else pos:line="174" pos:column="9">else
            <block type="pseudo"><return pos:line="175" pos:column="13">return <expr><literal type="string" pos:line="175" pos:column="20">"flushpackets must be on|off|auto"<pos:position pos:line="175" pos:column="54"/></literal></expr>;<pos:position pos:line="175" pos:column="55"/></return></block></else></if>
    }<pos:position pos:line="176" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="177" pos:column="5">else <if pos:line="177" pos:column="10">if <condition pos:line="177" pos:column="13">(<expr><operator pos:line="177" pos:column="14">!<pos:position pos:line="177" pos:column="15"/></operator><call><name pos:line="177" pos:column="15">strcasecmp<pos:position pos:line="177" pos:column="25"/></name><argument_list pos:line="177" pos:column="25">(<argument><expr><name pos:line="177" pos:column="26">key<pos:position pos:line="177" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="177" pos:column="31">"flushwait"<pos:position pos:line="177" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="177" pos:column="44"/></condition><then pos:line="177" pos:column="44"> <block pos:line="177" pos:column="45">{
        <expr_stmt><expr><name pos:line="178" pos:column="9">ival<pos:position pos:line="178" pos:column="13"/></name> <operator pos:line="178" pos:column="14">=<pos:position pos:line="178" pos:column="15"/></operator> <call><name pos:line="178" pos:column="16">atoi<pos:position pos:line="178" pos:column="20"/></name><argument_list pos:line="178" pos:column="20">(<argument><expr><name pos:line="178" pos:column="21">val<pos:position pos:line="178" pos:column="24"/></name></expr></argument>)<pos:position pos:line="178" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="26"/></expr_stmt>
        <if pos:line="179" pos:column="9">if <condition pos:line="179" pos:column="12">(<expr><name pos:line="179" pos:column="13">ival<pos:position pos:line="179" pos:column="17"/></name> <operator pos:line="179" pos:column="18">&gt;<pos:position pos:line="179" pos:column="22"/></operator> <literal type="number" pos:line="179" pos:column="20">1000<pos:position pos:line="179" pos:column="24"/></literal> <operator pos:line="179" pos:column="25">||<pos:position pos:line="179" pos:column="27"/></operator> <name pos:line="179" pos:column="28">ival<pos:position pos:line="179" pos:column="32"/></name> <operator pos:line="179" pos:column="33">&lt;<pos:position pos:line="179" pos:column="37"/></operator> <literal type="number" pos:line="179" pos:column="35">0<pos:position pos:line="179" pos:column="36"/></literal></expr>)<pos:position pos:line="179" pos:column="37"/></condition><then pos:line="179" pos:column="37"> <block pos:line="179" pos:column="38">{
            <return pos:line="180" pos:column="13">return <expr><literal type="string" pos:line="180" pos:column="20">"flushwait must be &lt;= 1000, or 0 for system default of 10 millseconds."<pos:position pos:line="180" pos:column="94"/></literal></expr>;<pos:position pos:line="180" pos:column="92"/></return>
        }<pos:position pos:line="181" pos:column="10"/></block></then></if>
        <if pos:line="182" pos:column="9">if <condition pos:line="182" pos:column="12">(<expr><name pos:line="182" pos:column="13">ival<pos:position pos:line="182" pos:column="17"/></name> <operator pos:line="182" pos:column="18">==<pos:position pos:line="182" pos:column="20"/></operator> <literal type="number" pos:line="182" pos:column="21">0<pos:position pos:line="182" pos:column="22"/></literal></expr>)<pos:position pos:line="182" pos:column="23"/></condition><then pos:line="182" pos:column="23">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="183" pos:column="13">worker<pos:position pos:line="183" pos:column="19"/></name><operator pos:line="183" pos:column="19">-&gt;<pos:position pos:line="183" pos:column="24"/></operator><name pos:line="183" pos:column="21">s<pos:position pos:line="183" pos:column="22"/></name><operator pos:line="183" pos:column="22">-&gt;<pos:position pos:line="183" pos:column="27"/></operator><name pos:line="183" pos:column="24">flush_wait<pos:position pos:line="183" pos:column="34"/></name></name> <operator pos:line="183" pos:column="35">=<pos:position pos:line="183" pos:column="36"/></operator> <name pos:line="183" pos:column="37">PROXY_FLUSH_WAIT<pos:position pos:line="183" pos:column="53"/></name></expr>;<pos:position pos:line="183" pos:column="54"/></expr_stmt></block></then>
        <else pos:line="184" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="185" pos:column="13">worker<pos:position pos:line="185" pos:column="19"/></name><operator pos:line="185" pos:column="19">-&gt;<pos:position pos:line="185" pos:column="24"/></operator><name pos:line="185" pos:column="21">s<pos:position pos:line="185" pos:column="22"/></name><operator pos:line="185" pos:column="22">-&gt;<pos:position pos:line="185" pos:column="27"/></operator><name pos:line="185" pos:column="24">flush_wait<pos:position pos:line="185" pos:column="34"/></name></name> <operator pos:line="185" pos:column="35">=<pos:position pos:line="185" pos:column="36"/></operator> <name pos:line="185" pos:column="37">ival<pos:position pos:line="185" pos:column="41"/></name> <operator pos:line="185" pos:column="42">*<pos:position pos:line="185" pos:column="43"/></operator> <literal type="number" pos:line="185" pos:column="44">1000<pos:position pos:line="185" pos:column="48"/></literal></expr>;<pos:position pos:line="185" pos:column="49"/></expr_stmt></block></else></if>    <comment type="block" pos:line="185" pos:column="53">/* change to microseconds */</comment>
    }<pos:position pos:line="186" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="187" pos:column="5">else <if pos:line="187" pos:column="10">if <condition pos:line="187" pos:column="13">(<expr><operator pos:line="187" pos:column="14">!<pos:position pos:line="187" pos:column="15"/></operator><call><name pos:line="187" pos:column="15">strcasecmp<pos:position pos:line="187" pos:column="25"/></name><argument_list pos:line="187" pos:column="25">(<argument><expr><name pos:line="187" pos:column="26">key<pos:position pos:line="187" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="187" pos:column="31">"ping"<pos:position pos:line="187" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="187" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="187" pos:column="39"/></condition><then pos:line="187" pos:column="39"> <block pos:line="187" pos:column="40">{
        <comment type="block" pos:line="188" pos:column="9">/* Ping/Pong timeout in given unit (default is second).
         */</comment>
        <if pos:line="190" pos:column="9">if <condition pos:line="190" pos:column="12">(<expr><call><name pos:line="190" pos:column="13">ap_timeout_parameter_parse<pos:position pos:line="190" pos:column="39"/></name><argument_list pos:line="190" pos:column="39">(<argument><expr><name pos:line="190" pos:column="40">val<pos:position pos:line="190" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="190" pos:column="45">&amp;<pos:position pos:line="190" pos:column="50"/></operator><name pos:line="190" pos:column="46">timeout<pos:position pos:line="190" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="190" pos:column="55">"s"<pos:position pos:line="190" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="190" pos:column="59"/></argument_list></call> <operator pos:line="190" pos:column="60">!=<pos:position pos:line="190" pos:column="62"/></operator> <name pos:line="190" pos:column="63">APR_SUCCESS<pos:position pos:line="190" pos:column="74"/></name></expr>)<pos:position pos:line="190" pos:column="75"/></condition><then pos:line="190" pos:column="75">
            <block type="pseudo"><return pos:line="191" pos:column="13">return <expr><literal type="string" pos:line="191" pos:column="20">"Ping/Pong timeout has wrong format"<pos:position pos:line="191" pos:column="56"/></literal></expr>;<pos:position pos:line="191" pos:column="57"/></return></block></then></if>
        <if pos:line="192" pos:column="9">if <condition pos:line="192" pos:column="12">(<expr><name pos:line="192" pos:column="13">timeout<pos:position pos:line="192" pos:column="20"/></name> <operator pos:line="192" pos:column="21">&lt;<pos:position pos:line="192" pos:column="25"/></operator> <literal type="number" pos:line="192" pos:column="23">1000<pos:position pos:line="192" pos:column="27"/></literal></expr>)<pos:position pos:line="192" pos:column="28"/></condition><then pos:line="192" pos:column="28">
            <block type="pseudo"><return pos:line="193" pos:column="13">return <expr><literal type="string" pos:line="193" pos:column="20">"Ping/Pong timeout must be at least one millisecond"<pos:position pos:line="193" pos:column="72"/></literal></expr>;<pos:position pos:line="193" pos:column="73"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="194" pos:column="9">worker<pos:position pos:line="194" pos:column="15"/></name><operator pos:line="194" pos:column="15">-&gt;<pos:position pos:line="194" pos:column="20"/></operator><name pos:line="194" pos:column="17">s<pos:position pos:line="194" pos:column="18"/></name><operator pos:line="194" pos:column="18">-&gt;<pos:position pos:line="194" pos:column="23"/></operator><name pos:line="194" pos:column="20">ping_timeout<pos:position pos:line="194" pos:column="32"/></name></name> <operator pos:line="194" pos:column="33">=<pos:position pos:line="194" pos:column="34"/></operator> <name pos:line="194" pos:column="35">timeout<pos:position pos:line="194" pos:column="42"/></name></expr>;<pos:position pos:line="194" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="195" pos:column="9">worker<pos:position pos:line="195" pos:column="15"/></name><operator pos:line="195" pos:column="15">-&gt;<pos:position pos:line="195" pos:column="20"/></operator><name pos:line="195" pos:column="17">s<pos:position pos:line="195" pos:column="18"/></name><operator pos:line="195" pos:column="18">-&gt;<pos:position pos:line="195" pos:column="23"/></operator><name pos:line="195" pos:column="20">ping_timeout_set<pos:position pos:line="195" pos:column="36"/></name></name> <operator pos:line="195" pos:column="37">=<pos:position pos:line="195" pos:column="38"/></operator> <literal type="number" pos:line="195" pos:column="39">1<pos:position pos:line="195" pos:column="40"/></literal></expr>;<pos:position pos:line="195" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="196" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="197" pos:column="5">else <if pos:line="197" pos:column="10">if <condition pos:line="197" pos:column="13">(<expr><operator pos:line="197" pos:column="14">!<pos:position pos:line="197" pos:column="15"/></operator><call><name pos:line="197" pos:column="15">strcasecmp<pos:position pos:line="197" pos:column="25"/></name><argument_list pos:line="197" pos:column="25">(<argument><expr><name pos:line="197" pos:column="26">key<pos:position pos:line="197" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="197" pos:column="31">"lbset"<pos:position pos:line="197" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="197" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="197" pos:column="40"/></condition><then pos:line="197" pos:column="40"> <block pos:line="197" pos:column="41">{
        <expr_stmt><expr><name pos:line="198" pos:column="9">ival<pos:position pos:line="198" pos:column="13"/></name> <operator pos:line="198" pos:column="14">=<pos:position pos:line="198" pos:column="15"/></operator> <call><name pos:line="198" pos:column="16">atoi<pos:position pos:line="198" pos:column="20"/></name><argument_list pos:line="198" pos:column="20">(<argument><expr><name pos:line="198" pos:column="21">val<pos:position pos:line="198" pos:column="24"/></name></expr></argument>)<pos:position pos:line="198" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="198" pos:column="26"/></expr_stmt>
        <if pos:line="199" pos:column="9">if <condition pos:line="199" pos:column="12">(<expr><name><name pos:line="199" pos:column="13">ival<pos:position pos:line="199" pos:column="17"/></name> <argument_list type="generic" pos:line="199" pos:column="18">&lt; <argument><expr><literal type="number" pos:line="199" pos:column="20">0<pos:position pos:line="199" pos:column="21"/></literal> <operator pos:line="199" pos:column="22">||<pos:position pos:line="199" pos:column="24"/></operator> <name pos:line="199" pos:column="25">ival<pos:position pos:line="199" pos:column="29"/></name></expr></argument> &gt;<pos:position pos:line="199" pos:column="34"/></argument_list></name> <literal type="number" pos:line="199" pos:column="32">99<pos:position pos:line="199" pos:column="34"/></literal></expr>)<pos:position pos:line="199" pos:column="35"/></condition><then pos:line="199" pos:column="35">
            <block type="pseudo"><return pos:line="200" pos:column="13">return <expr><literal type="string" pos:line="200" pos:column="20">"lbset must be between 0 and 99"<pos:position pos:line="200" pos:column="52"/></literal></expr>;<pos:position pos:line="200" pos:column="53"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="201" pos:column="9">worker<pos:position pos:line="201" pos:column="15"/></name><operator pos:line="201" pos:column="15">-&gt;<pos:position pos:line="201" pos:column="20"/></operator><name pos:line="201" pos:column="17">s<pos:position pos:line="201" pos:column="18"/></name><operator pos:line="201" pos:column="18">-&gt;<pos:position pos:line="201" pos:column="23"/></operator><name pos:line="201" pos:column="20">lbset<pos:position pos:line="201" pos:column="25"/></name></name> <operator pos:line="201" pos:column="26">=<pos:position pos:line="201" pos:column="27"/></operator> <name pos:line="201" pos:column="28">ival<pos:position pos:line="201" pos:column="32"/></name></expr>;<pos:position pos:line="201" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="202" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="203" pos:column="5">else <if pos:line="203" pos:column="10">if <condition pos:line="203" pos:column="13">(<expr><operator pos:line="203" pos:column="14">!<pos:position pos:line="203" pos:column="15"/></operator><call><name pos:line="203" pos:column="15">strcasecmp<pos:position pos:line="203" pos:column="25"/></name><argument_list pos:line="203" pos:column="25">(<argument><expr><name pos:line="203" pos:column="26">key<pos:position pos:line="203" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="203" pos:column="31">"connectiontimeout"<pos:position pos:line="203" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="203" pos:column="52"/></condition><then pos:line="203" pos:column="52"> <block pos:line="203" pos:column="53">{
        <comment type="block" pos:line="204" pos:column="9">/* Request timeout in given unit (default is second).
         * Defaults to connection timeout
         */</comment>
        <if pos:line="207" pos:column="9">if <condition pos:line="207" pos:column="12">(<expr><call><name pos:line="207" pos:column="13">ap_timeout_parameter_parse<pos:position pos:line="207" pos:column="39"/></name><argument_list pos:line="207" pos:column="39">(<argument><expr><name pos:line="207" pos:column="40">val<pos:position pos:line="207" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="207" pos:column="45">&amp;<pos:position pos:line="207" pos:column="50"/></operator><name pos:line="207" pos:column="46">timeout<pos:position pos:line="207" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="207" pos:column="55">"s"<pos:position pos:line="207" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="207" pos:column="59"/></argument_list></call> <operator pos:line="207" pos:column="60">!=<pos:position pos:line="207" pos:column="62"/></operator> <name pos:line="207" pos:column="63">APR_SUCCESS<pos:position pos:line="207" pos:column="74"/></name></expr>)<pos:position pos:line="207" pos:column="75"/></condition><then pos:line="207" pos:column="75">
            <block type="pseudo"><return pos:line="208" pos:column="13">return <expr><literal type="string" pos:line="208" pos:column="20">"Connectiontimeout has wrong format"<pos:position pos:line="208" pos:column="56"/></literal></expr>;<pos:position pos:line="208" pos:column="57"/></return></block></then></if>
        <if pos:line="209" pos:column="9">if <condition pos:line="209" pos:column="12">(<expr><name pos:line="209" pos:column="13">timeout<pos:position pos:line="209" pos:column="20"/></name> <operator pos:line="209" pos:column="21">&lt;<pos:position pos:line="209" pos:column="25"/></operator> <literal type="number" pos:line="209" pos:column="23">1000<pos:position pos:line="209" pos:column="27"/></literal></expr>)<pos:position pos:line="209" pos:column="28"/></condition><then pos:line="209" pos:column="28">
            <block type="pseudo"><return pos:line="210" pos:column="13">return <expr><literal type="string" pos:line="210" pos:column="20">"Connectiontimeout must be at least one millisecond."<pos:position pos:line="210" pos:column="73"/></literal></expr>;<pos:position pos:line="210" pos:column="74"/></return></block></then></if>
        <expr_stmt><expr><name><name pos:line="211" pos:column="9">worker<pos:position pos:line="211" pos:column="15"/></name><operator pos:line="211" pos:column="15">-&gt;<pos:position pos:line="211" pos:column="20"/></operator><name pos:line="211" pos:column="17">s<pos:position pos:line="211" pos:column="18"/></name><operator pos:line="211" pos:column="18">-&gt;<pos:position pos:line="211" pos:column="23"/></operator><name pos:line="211" pos:column="20">conn_timeout<pos:position pos:line="211" pos:column="32"/></name></name> <operator pos:line="211" pos:column="33">=<pos:position pos:line="211" pos:column="34"/></operator> <name pos:line="211" pos:column="35">timeout<pos:position pos:line="211" pos:column="42"/></name></expr>;<pos:position pos:line="211" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="212" pos:column="9">worker<pos:position pos:line="212" pos:column="15"/></name><operator pos:line="212" pos:column="15">-&gt;<pos:position pos:line="212" pos:column="20"/></operator><name pos:line="212" pos:column="17">s<pos:position pos:line="212" pos:column="18"/></name><operator pos:line="212" pos:column="18">-&gt;<pos:position pos:line="212" pos:column="23"/></operator><name pos:line="212" pos:column="20">conn_timeout_set<pos:position pos:line="212" pos:column="36"/></name></name> <operator pos:line="212" pos:column="37">=<pos:position pos:line="212" pos:column="38"/></operator> <literal type="number" pos:line="212" pos:column="39">1<pos:position pos:line="212" pos:column="40"/></literal></expr>;<pos:position pos:line="212" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="213" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="214" pos:column="5">else <if pos:line="214" pos:column="10">if <condition pos:line="214" pos:column="13">(<expr><operator pos:line="214" pos:column="14">!<pos:position pos:line="214" pos:column="15"/></operator><call><name pos:line="214" pos:column="15">strcasecmp<pos:position pos:line="214" pos:column="25"/></name><argument_list pos:line="214" pos:column="25">(<argument><expr><name pos:line="214" pos:column="26">key<pos:position pos:line="214" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="214" pos:column="31">"flusher"<pos:position pos:line="214" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="214" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="214" pos:column="42"/></condition><then pos:line="214" pos:column="42"> <block pos:line="214" pos:column="43">{
        <if pos:line="215" pos:column="9">if <condition pos:line="215" pos:column="12">(<expr><call><name pos:line="215" pos:column="13">strlen<pos:position pos:line="215" pos:column="19"/></name><argument_list pos:line="215" pos:column="19">(<argument><expr><name pos:line="215" pos:column="20">val<pos:position pos:line="215" pos:column="23"/></name></expr></argument>)<pos:position pos:line="215" pos:column="24"/></argument_list></call> <operator pos:line="215" pos:column="25">&gt;=<pos:position pos:line="215" pos:column="30"/></operator> <sizeof pos:line="215" pos:column="28">sizeof<argument_list pos:line="215" pos:column="34">(<argument><expr><name><name pos:line="215" pos:column="35">worker<pos:position pos:line="215" pos:column="41"/></name><operator pos:line="215" pos:column="41">-&gt;<pos:position pos:line="215" pos:column="46"/></operator><name pos:line="215" pos:column="43">s<pos:position pos:line="215" pos:column="44"/></name><operator pos:line="215" pos:column="44">-&gt;<pos:position pos:line="215" pos:column="49"/></operator><name pos:line="215" pos:column="46">flusher<pos:position pos:line="215" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="215" pos:column="54"/></argument_list></sizeof></expr>)<pos:position pos:line="215" pos:column="55"/></condition><then pos:line="215" pos:column="55">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="216" pos:column="13">apr_psprintf<pos:position pos:line="216" pos:column="25"/></name><argument_list pos:line="216" pos:column="25">(<argument><expr><name pos:line="216" pos:column="26">p<pos:position pos:line="216" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="216" pos:column="29">"flusher name length must be &lt; %d characters"<pos:position pos:line="216" pos:column="77"/></literal></expr></argument>,
                    <argument><expr><operator pos:line="217" pos:column="21">(<pos:position pos:line="217" pos:column="22"/></operator><name pos:line="217" pos:column="22">int<pos:position pos:line="217" pos:column="25"/></name><operator pos:line="217" pos:column="25">)<pos:position pos:line="217" pos:column="26"/></operator><sizeof pos:line="217" pos:column="26">sizeof<argument_list pos:line="217" pos:column="32">(<argument><expr><name><name pos:line="217" pos:column="33">worker<pos:position pos:line="217" pos:column="39"/></name><operator pos:line="217" pos:column="39">-&gt;<pos:position pos:line="217" pos:column="44"/></operator><name pos:line="217" pos:column="41">s<pos:position pos:line="217" pos:column="42"/></name><operator pos:line="217" pos:column="42">-&gt;<pos:position pos:line="217" pos:column="47"/></operator><name pos:line="217" pos:column="44">flusher<pos:position pos:line="217" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="217" pos:column="52"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="217" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="217" pos:column="54"/></expr_stmt></block></then></if>
        <expr_stmt><expr><call><name pos:line="218" pos:column="9">PROXY_STRNCPY<pos:position pos:line="218" pos:column="22"/></name><argument_list pos:line="218" pos:column="22">(<argument><expr><name><name pos:line="218" pos:column="23">worker<pos:position pos:line="218" pos:column="29"/></name><operator pos:line="218" pos:column="29">-&gt;<pos:position pos:line="218" pos:column="34"/></operator><name pos:line="218" pos:column="31">s<pos:position pos:line="218" pos:column="32"/></name><operator pos:line="218" pos:column="32">-&gt;<pos:position pos:line="218" pos:column="37"/></operator><name pos:line="218" pos:column="34">flusher<pos:position pos:line="218" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="218" pos:column="43">val<pos:position pos:line="218" pos:column="46"/></name></expr></argument>)<pos:position pos:line="218" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="219" pos:column="6"/></block></then></if></elseif>
    <else pos:line="220" pos:column="5">else <block pos:line="220" pos:column="10">{
        <if pos:line="221" pos:column="9">if <condition pos:line="221" pos:column="12">(<expr><name pos:line="221" pos:column="13">set_worker_hc_param_f<pos:position pos:line="221" pos:column="34"/></name></expr>)<pos:position pos:line="221" pos:column="35"/></condition><then pos:line="221" pos:column="35"> <block pos:line="221" pos:column="36">{
            <return pos:line="222" pos:column="13">return <expr><call><name pos:line="222" pos:column="20">set_worker_hc_param_f<pos:position pos:line="222" pos:column="41"/></name><argument_list pos:line="222" pos:column="41">(<argument><expr><name pos:line="222" pos:column="42">p<pos:position pos:line="222" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="45">s<pos:position pos:line="222" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="48">worker<pos:position pos:line="222" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="56">key<pos:position pos:line="222" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="61">val<pos:position pos:line="222" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="222" pos:column="66">NULL<pos:position pos:line="222" pos:column="70"/></name></expr></argument>)<pos:position pos:line="222" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="222" pos:column="72"/></return>
        }<pos:position pos:line="223" pos:column="10"/></block></then> <else pos:line="223" pos:column="11">else <block pos:line="223" pos:column="16">{
            <return pos:line="224" pos:column="13">return <expr><literal type="string" pos:line="224" pos:column="20">"unknown Worker parameter"<pos:position pos:line="224" pos:column="46"/></literal></expr>;<pos:position pos:line="224" pos:column="47"/></return>
        }<pos:position pos:line="225" pos:column="10"/></block></else></if>
    }<pos:position pos:line="226" pos:column="6"/></block></else></if>
    <return pos:line="227" pos:column="5">return <expr><name pos:line="227" pos:column="12">NULL<pos:position pos:line="227" pos:column="16"/></name></expr>;<pos:position pos:line="227" pos:column="17"/></return>
}<pos:position pos:line="228" pos:column="2"/></block></function></unit>
