<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2766_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">dbd_freetds_get_entry<pos:position pos:line="1" pos:column="41"/></name><parameter_list pos:line="1" pos:column="41">(<parameter><decl><type><specifier pos:line="1" pos:column="42">const<pos:position pos:line="1" pos:column="47"/></specifier> <name pos:line="1" pos:column="48">apr_dbd_row_t<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">row<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="68">int<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">n<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <comment type="block" pos:line="3" pos:column="5">/* FIXME: support different data types */</comment>
    <comment type="block" pos:line="4" pos:column="5">/* this fails - bind gets some vars but not others
    return (const char*)row-&gt;res-&gt;vars[n].data;
     */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">DBPROCESS<pos:position pos:line="7" pos:column="14"/></name><modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type> <name pos:line="7" pos:column="16">proc<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name><name pos:line="7" pos:column="23">row<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">res<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">proc<pos:position pos:line="7" pos:column="37"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">BYTE<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">ptr<pos:position pos:line="8" pos:column="14"/></name> <init pos:line="8" pos:column="15">= <expr><call><name pos:line="8" pos:column="17">dbdata<pos:position pos:line="8" pos:column="23"/></name><argument_list pos:line="8" pos:column="23">(<argument><expr><name pos:line="8" pos:column="24">proc<pos:position pos:line="8" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="30">n<pos:position pos:line="8" pos:column="31"/></name><operator pos:line="8" pos:column="31">+<pos:position pos:line="8" pos:column="32"/></operator><literal type="number" pos:line="8" pos:column="32">1<pos:position pos:line="8" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">t<pos:position pos:line="9" pos:column="10"/></name> <init pos:line="9" pos:column="11">= <expr><call><name pos:line="9" pos:column="13">dbcoltype<pos:position pos:line="9" pos:column="22"/></name><argument_list pos:line="9" pos:column="22">(<argument><expr><name pos:line="9" pos:column="23">proc<pos:position pos:line="9" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="29">n<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">+<pos:position pos:line="9" pos:column="31"/></operator><literal type="number" pos:line="9" pos:column="31">1<pos:position pos:line="9" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">l<pos:position pos:line="10" pos:column="10"/></name> <init pos:line="10" pos:column="11">= <expr><call><name pos:line="10" pos:column="13">dbcollen<pos:position pos:line="10" pos:column="21"/></name><argument_list pos:line="10" pos:column="21">(<argument><expr><name pos:line="10" pos:column="22">proc<pos:position pos:line="10" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="28">n<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">+<pos:position pos:line="10" pos:column="30"/></operator><literal type="number" pos:line="10" pos:column="30">1<pos:position pos:line="10" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="32"/></argument_list></call></expr></init></decl>;<pos:position pos:line="10" pos:column="33"/></decl_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">dbwillconvert<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">t<pos:position pos:line="11" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="26">SYBCHAR<pos:position pos:line="11" pos:column="33"/></name></expr></argument>)<pos:position pos:line="11" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="35"/></condition><then pos:line="11" pos:column="35"> <block pos:line="11" pos:column="36">{
      <expr_stmt><expr><call><name pos:line="12" pos:column="7">dbconvert<pos:position pos:line="12" pos:column="16"/></name><argument_list pos:line="12" pos:column="16">(<argument><expr><name pos:line="12" pos:column="17">proc<pos:position pos:line="12" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="23">t<pos:position pos:line="12" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="26">ptr<pos:position pos:line="12" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="31">l<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="34">SYBCHAR<pos:position pos:line="12" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="43">(<pos:position pos:line="12" pos:column="44"/></operator><name pos:line="12" pos:column="44">BYTE<pos:position pos:line="12" pos:column="48"/></name> <operator pos:line="12" pos:column="49">*<pos:position pos:line="12" pos:column="50"/></operator><operator pos:line="12" pos:column="50">)<pos:position pos:line="12" pos:column="51"/></operator><name><name pos:line="12" pos:column="51">row<pos:position pos:line="12" pos:column="54"/></name><operator pos:line="12" pos:column="54">-&gt;<pos:position pos:line="12" pos:column="59"/></operator><name pos:line="12" pos:column="56">buf<pos:position pos:line="12" pos:column="59"/></name></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="61">-<pos:position pos:line="12" pos:column="62"/></operator><literal type="number" pos:line="12" pos:column="62">1<pos:position pos:line="12" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="65"/></expr_stmt>
      <return pos:line="13" pos:column="7">return <expr><operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><specifier pos:line="13" pos:column="15">const<pos:position pos:line="13" pos:column="20"/></specifier> <name pos:line="13" pos:column="21">char<pos:position pos:line="13" pos:column="25"/></name><operator pos:line="13" pos:column="25">*<pos:position pos:line="13" pos:column="26"/></operator><operator pos:line="13" pos:column="26">)<pos:position pos:line="13" pos:column="27"/></operator><name><name pos:line="13" pos:column="27">row<pos:position pos:line="13" pos:column="30"/></name><operator pos:line="13" pos:column="30">-&gt;<pos:position pos:line="13" pos:column="35"/></operator><name pos:line="13" pos:column="32">buf<pos:position pos:line="13" pos:column="35"/></name></name></expr>;<pos:position pos:line="13" pos:column="36"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <return pos:line="15" pos:column="5">return <expr><operator pos:line="15" pos:column="12">(<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">char<pos:position pos:line="15" pos:column="17"/></name><operator pos:line="15" pos:column="17">*<pos:position pos:line="15" pos:column="18"/></operator><operator pos:line="15" pos:column="18">)<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="19">ptr<pos:position pos:line="15" pos:column="22"/></name></expr>;<pos:position pos:line="15" pos:column="23"/></return>
}<pos:position pos:line="16" pos:column="2"/></block></function></unit>
