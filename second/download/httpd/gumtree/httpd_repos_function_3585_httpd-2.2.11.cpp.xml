<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3585_httpd-2.2.11.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">apr__SHA256_Final<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">sha2_byte<pos:position pos:line="1" pos:column="33"/></name></type> <name><name pos:line="1" pos:column="34">digest<pos:position pos:line="1" pos:column="40"/></name><index pos:line="1" pos:column="40">[]<pos:position pos:line="1" pos:column="42"/></index></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="44">SHA256_CTX<pos:position pos:line="1" pos:column="54"/></name><modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type> <name pos:line="1" pos:column="56">context<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="64"/></parameter_list> <block pos:line="1" pos:column="65">{
        <decl_stmt><decl><type><name pos:line="2" pos:column="9">sha2_word32<pos:position pos:line="2" pos:column="20"/></name>     <modifier pos:line="2" pos:column="25">*<pos:position pos:line="2" pos:column="26"/></modifier></type><name pos:line="2" pos:column="26">d<pos:position pos:line="2" pos:column="27"/></name> <init pos:line="2" pos:column="28">= <expr><operator pos:line="2" pos:column="30">(<pos:position pos:line="2" pos:column="31"/></operator><name pos:line="2" pos:column="31">sha2_word32<pos:position pos:line="2" pos:column="42"/></name><operator pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></operator><operator pos:line="2" pos:column="43">)<pos:position pos:line="2" pos:column="44"/></operator><name pos:line="2" pos:column="44">digest<pos:position pos:line="2" pos:column="50"/></name></expr></init></decl>;<pos:position pos:line="2" pos:column="51"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="3" pos:column="9">unsigned<pos:position pos:line="3" pos:column="17"/></name> <name pos:line="3" pos:column="18">int<pos:position pos:line="3" pos:column="21"/></name></type>    <name pos:line="3" pos:column="25">usedspace<pos:position pos:line="3" pos:column="34"/></name></decl>;<pos:position pos:line="3" pos:column="35"/></decl_stmt>

        <comment type="block" pos:line="5" pos:column="9">/* Sanity check: */</comment>
        <expr_stmt><expr><call><name pos:line="6" pos:column="9">assert<pos:position pos:line="6" pos:column="15"/></name><argument_list pos:line="6" pos:column="15">(<argument><expr><name pos:line="6" pos:column="16">context<pos:position pos:line="6" pos:column="23"/></name> <operator pos:line="6" pos:column="24">!=<pos:position pos:line="6" pos:column="26"/></operator> <operator pos:line="6" pos:column="27">(<pos:position pos:line="6" pos:column="28"/></operator><name pos:line="6" pos:column="28">SHA256_CTX<pos:position pos:line="6" pos:column="38"/></name><operator pos:line="6" pos:column="38">*<pos:position pos:line="6" pos:column="39"/></operator><operator pos:line="6" pos:column="39">)<pos:position pos:line="6" pos:column="40"/></operator><literal type="number" pos:line="6" pos:column="40">0<pos:position pos:line="6" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="43"/></expr_stmt>

        <comment type="block" pos:line="8" pos:column="9">/* If no digest buffer is passed, we don't bother doing this: */</comment>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">digest<pos:position pos:line="9" pos:column="19"/></name> <operator pos:line="9" pos:column="20">!=<pos:position pos:line="9" pos:column="22"/></operator> <operator pos:line="9" pos:column="23">(<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="24">sha2_byte<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">*<pos:position pos:line="9" pos:column="34"/></operator><operator pos:line="9" pos:column="34">)<pos:position pos:line="9" pos:column="35"/></operator><literal type="number" pos:line="9" pos:column="35">0<pos:position pos:line="9" pos:column="36"/></literal></expr>)<pos:position pos:line="9" pos:column="37"/></condition><then pos:line="9" pos:column="37"> <block pos:line="9" pos:column="38">{
                <expr_stmt><expr><name pos:line="10" pos:column="17">usedspace<pos:position pos:line="10" pos:column="26"/></name> <operator pos:line="10" pos:column="27">=<pos:position pos:line="10" pos:column="28"/></operator> <call pos:line="10" pos:column="29">(<name pos:line="10" pos:column="30">unsigned<pos:position pos:line="10" pos:column="38"/></name> <name pos:line="10" pos:column="39">int<pos:position pos:line="10" pos:column="42"/></name>)<argument_list pos:line="10" pos:column="43">(<argument><expr><operator pos:line="10" pos:column="44">(<pos:position pos:line="10" pos:column="45"/></operator><name><name pos:line="10" pos:column="45">context<pos:position pos:line="10" pos:column="52"/></name><operator pos:line="10" pos:column="52">-&gt;<pos:position pos:line="10" pos:column="57"/></operator><name pos:line="10" pos:column="54">bitcount<pos:position pos:line="10" pos:column="62"/></name></name> <operator pos:line="10" pos:column="63">&gt;&gt;<pos:position pos:line="10" pos:column="68"/></operator> <literal type="number" pos:line="10" pos:column="66">3<pos:position pos:line="10" pos:column="67"/></literal><operator pos:line="10" pos:column="67">)<pos:position pos:line="10" pos:column="68"/></operator> 
                                         <operator pos:line="11" pos:column="42">%<pos:position pos:line="11" pos:column="43"/></operator> <name pos:line="11" pos:column="44">SHA256_BLOCK_LENGTH<pos:position pos:line="11" pos:column="63"/></name></expr></argument>)<pos:position pos:line="11" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="65"/></expr_stmt>
<cpp:if pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">if<pos:position pos:line="12" pos:column="4"/></cpp:directive> <expr><operator pos:line="12" pos:column="5">!<pos:position pos:line="12" pos:column="6"/></operator><name pos:line="12" pos:column="6">APR_IS_BIGENDIAN<pos:position pos:line="12" pos:column="22"/></name></expr></cpp:if>
                <comment type="block" pos:line="13" pos:column="17">/* Convert FROM host byte order */</comment>
                <expr_stmt><expr><call><name pos:line="14" pos:column="17">REVERSE64<pos:position pos:line="14" pos:column="26"/></name><argument_list pos:line="14" pos:column="26">(<argument><expr><name><name pos:line="14" pos:column="27">context<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">bitcount<pos:position pos:line="14" pos:column="44"/></name></name></expr></argument>,<argument><expr><name><name pos:line="14" pos:column="45">context<pos:position pos:line="14" pos:column="52"/></name><operator pos:line="14" pos:column="52">-&gt;<pos:position pos:line="14" pos:column="57"/></operator><name pos:line="14" pos:column="54">bitcount<pos:position pos:line="14" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="64"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
                <if pos:line="16" pos:column="17">if <condition pos:line="16" pos:column="20">(<expr><name pos:line="16" pos:column="21">usedspace<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">&gt;<pos:position pos:line="16" pos:column="35"/></operator> <literal type="number" pos:line="16" pos:column="33">0<pos:position pos:line="16" pos:column="34"/></literal></expr>)<pos:position pos:line="16" pos:column="35"/></condition><then pos:line="16" pos:column="35"> <block pos:line="16" pos:column="36">{
                        <comment type="block" pos:line="17" pos:column="25">/* Begin padding with a 1 bit: */</comment>
                        <expr_stmt><expr><name><name pos:line="18" pos:column="25">context<pos:position pos:line="18" pos:column="32"/></name><operator pos:line="18" pos:column="32">-&gt;<pos:position pos:line="18" pos:column="37"/></operator><name pos:line="18" pos:column="34">buffer<pos:position pos:line="18" pos:column="40"/></name><index pos:line="18" pos:column="40">[<expr><name pos:line="18" pos:column="41">usedspace<pos:position pos:line="18" pos:column="50"/></name><operator pos:line="18" pos:column="50">++<pos:position pos:line="18" pos:column="52"/></operator></expr>]<pos:position pos:line="18" pos:column="53"/></index></name> <operator pos:line="18" pos:column="54">=<pos:position pos:line="18" pos:column="55"/></operator> <literal type="number" pos:line="18" pos:column="56">0x80<pos:position pos:line="18" pos:column="60"/></literal></expr>;<pos:position pos:line="18" pos:column="61"/></expr_stmt>

                        <if pos:line="20" pos:column="25">if <condition pos:line="20" pos:column="28">(<expr><name pos:line="20" pos:column="29">usedspace<pos:position pos:line="20" pos:column="38"/></name> <operator pos:line="20" pos:column="39">&lt;=<pos:position pos:line="20" pos:column="44"/></operator> <name pos:line="20" pos:column="42">SHA256_SHORT_BLOCK_LENGTH<pos:position pos:line="20" pos:column="67"/></name></expr>)<pos:position pos:line="20" pos:column="68"/></condition><then pos:line="20" pos:column="68"> <block pos:line="20" pos:column="69">{
                                <comment type="block" pos:line="21" pos:column="33">/* Set-up for the last transform: */</comment>
                                <expr_stmt><expr><call><name pos:line="22" pos:column="33">MEMSET_BZERO<pos:position pos:line="22" pos:column="45"/></name><argument_list pos:line="22" pos:column="45">(<argument><expr><operator pos:line="22" pos:column="46">&amp;<pos:position pos:line="22" pos:column="51"/></operator><name><name pos:line="22" pos:column="47">context<pos:position pos:line="22" pos:column="54"/></name><operator pos:line="22" pos:column="54">-&gt;<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="56">buffer<pos:position pos:line="22" pos:column="62"/></name><index pos:line="22" pos:column="62">[<expr><name pos:line="22" pos:column="63">usedspace<pos:position pos:line="22" pos:column="72"/></name></expr>]<pos:position pos:line="22" pos:column="73"/></index></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="75">SHA256_SHORT_BLOCK_LENGTH<pos:position pos:line="22" pos:column="100"/></name> <operator pos:line="22" pos:column="101">-<pos:position pos:line="22" pos:column="102"/></operator> <name pos:line="22" pos:column="103">usedspace<pos:position pos:line="22" pos:column="112"/></name></expr></argument>)<pos:position pos:line="22" pos:column="113"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="114"/></expr_stmt>
                        }<pos:position pos:line="23" pos:column="26"/></block></then> <else pos:line="23" pos:column="27">else <block pos:line="23" pos:column="32">{
                                <if pos:line="24" pos:column="33">if <condition pos:line="24" pos:column="36">(<expr><name pos:line="24" pos:column="37">usedspace<pos:position pos:line="24" pos:column="46"/></name> <operator pos:line="24" pos:column="47">&lt;<pos:position pos:line="24" pos:column="51"/></operator> <name pos:line="24" pos:column="49">SHA256_BLOCK_LENGTH<pos:position pos:line="24" pos:column="68"/></name></expr>)<pos:position pos:line="24" pos:column="69"/></condition><then pos:line="24" pos:column="69"> <block pos:line="24" pos:column="70">{
                                        <expr_stmt><expr><call><name pos:line="25" pos:column="41">MEMSET_BZERO<pos:position pos:line="25" pos:column="53"/></name><argument_list pos:line="25" pos:column="53">(<argument><expr><operator pos:line="25" pos:column="54">&amp;<pos:position pos:line="25" pos:column="59"/></operator><name><name pos:line="25" pos:column="55">context<pos:position pos:line="25" pos:column="62"/></name><operator pos:line="25" pos:column="62">-&gt;<pos:position pos:line="25" pos:column="67"/></operator><name pos:line="25" pos:column="64">buffer<pos:position pos:line="25" pos:column="70"/></name><index pos:line="25" pos:column="70">[<expr><name pos:line="25" pos:column="71">usedspace<pos:position pos:line="25" pos:column="80"/></name></expr>]<pos:position pos:line="25" pos:column="81"/></index></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="83">SHA256_BLOCK_LENGTH<pos:position pos:line="25" pos:column="102"/></name> <operator pos:line="25" pos:column="103">-<pos:position pos:line="25" pos:column="104"/></operator> <name pos:line="25" pos:column="105">usedspace<pos:position pos:line="25" pos:column="114"/></name></expr></argument>)<pos:position pos:line="25" pos:column="115"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="116"/></expr_stmt>
                                }<pos:position pos:line="26" pos:column="34"/></block></then></if>
                                <comment type="block" pos:line="27" pos:column="33">/* Do second-to-last transform: */</comment>
                                <expr_stmt><expr><call><name pos:line="28" pos:column="33">apr__SHA256_Transform<pos:position pos:line="28" pos:column="54"/></name><argument_list pos:line="28" pos:column="54">(<argument><expr><name pos:line="28" pos:column="55">context<pos:position pos:line="28" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="64">(<pos:position pos:line="28" pos:column="65"/></operator><name pos:line="28" pos:column="65">sha2_word32<pos:position pos:line="28" pos:column="76"/></name><operator pos:line="28" pos:column="76">*<pos:position pos:line="28" pos:column="77"/></operator><operator pos:line="28" pos:column="77">)<pos:position pos:line="28" pos:column="78"/></operator><name><name pos:line="28" pos:column="78">context<pos:position pos:line="28" pos:column="85"/></name><operator pos:line="28" pos:column="85">-&gt;<pos:position pos:line="28" pos:column="90"/></operator><name pos:line="28" pos:column="87">buffer<pos:position pos:line="28" pos:column="93"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="94"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="95"/></expr_stmt>

                                <comment type="block" pos:line="30" pos:column="33">/* And set-up for the last transform: */</comment>
                                <expr_stmt><expr><call><name pos:line="31" pos:column="33">MEMSET_BZERO<pos:position pos:line="31" pos:column="45"/></name><argument_list pos:line="31" pos:column="45">(<argument><expr><name><name pos:line="31" pos:column="46">context<pos:position pos:line="31" pos:column="53"/></name><operator pos:line="31" pos:column="53">-&gt;<pos:position pos:line="31" pos:column="58"/></operator><name pos:line="31" pos:column="55">buffer<pos:position pos:line="31" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="63">SHA256_SHORT_BLOCK_LENGTH<pos:position pos:line="31" pos:column="88"/></name></expr></argument>)<pos:position pos:line="31" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="90"/></expr_stmt>
                        }<pos:position pos:line="32" pos:column="26"/></block></else></if>
                }<pos:position pos:line="33" pos:column="18"/></block></then> <else pos:line="33" pos:column="19">else <block pos:line="33" pos:column="24">{
                        <comment type="block" pos:line="34" pos:column="25">/* Set-up for the last transform: */</comment>
                        <expr_stmt><expr><call><name pos:line="35" pos:column="25">MEMSET_BZERO<pos:position pos:line="35" pos:column="37"/></name><argument_list pos:line="35" pos:column="37">(<argument><expr><name><name pos:line="35" pos:column="38">context<pos:position pos:line="35" pos:column="45"/></name><operator pos:line="35" pos:column="45">-&gt;<pos:position pos:line="35" pos:column="50"/></operator><name pos:line="35" pos:column="47">buffer<pos:position pos:line="35" pos:column="53"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="55">SHA256_SHORT_BLOCK_LENGTH<pos:position pos:line="35" pos:column="80"/></name></expr></argument>)<pos:position pos:line="35" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="82"/></expr_stmt>

                        <comment type="block" pos:line="37" pos:column="25">/* Begin padding with a 1 bit: */</comment>
                        <expr_stmt><expr><operator pos:line="38" pos:column="25">*<pos:position pos:line="38" pos:column="26"/></operator><name><name pos:line="38" pos:column="26">context<pos:position pos:line="38" pos:column="33"/></name><operator pos:line="38" pos:column="33">-&gt;<pos:position pos:line="38" pos:column="38"/></operator><name pos:line="38" pos:column="35">buffer<pos:position pos:line="38" pos:column="41"/></name></name> <operator pos:line="38" pos:column="42">=<pos:position pos:line="38" pos:column="43"/></operator> <literal type="number" pos:line="38" pos:column="44">0x80<pos:position pos:line="38" pos:column="48"/></literal></expr>;<pos:position pos:line="38" pos:column="49"/></expr_stmt>
                }<pos:position pos:line="39" pos:column="18"/></block></else></if>
                <comment type="block" pos:line="40" pos:column="17">/* Set the bit count: */</comment>
                <expr_stmt><expr><operator pos:line="41" pos:column="17">*<pos:position pos:line="41" pos:column="18"/></operator><operator pos:line="41" pos:column="18">(<pos:position pos:line="41" pos:column="19"/></operator><name pos:line="41" pos:column="19">sha2_word64<pos:position pos:line="41" pos:column="30"/></name><operator pos:line="41" pos:column="30">*<pos:position pos:line="41" pos:column="31"/></operator><operator pos:line="41" pos:column="31">)<pos:position pos:line="41" pos:column="32"/></operator><operator pos:line="41" pos:column="32">&amp;<pos:position pos:line="41" pos:column="37"/></operator><name><name pos:line="41" pos:column="33">context<pos:position pos:line="41" pos:column="40"/></name><operator pos:line="41" pos:column="40">-&gt;<pos:position pos:line="41" pos:column="45"/></operator><name pos:line="41" pos:column="42">buffer<pos:position pos:line="41" pos:column="48"/></name><index pos:line="41" pos:column="48">[<expr><name pos:line="41" pos:column="49">SHA256_SHORT_BLOCK_LENGTH<pos:position pos:line="41" pos:column="74"/></name></expr>]<pos:position pos:line="41" pos:column="75"/></index></name> <operator pos:line="41" pos:column="76">=<pos:position pos:line="41" pos:column="77"/></operator> <name><name pos:line="41" pos:column="78">context<pos:position pos:line="41" pos:column="85"/></name><operator pos:line="41" pos:column="85">-&gt;<pos:position pos:line="41" pos:column="90"/></operator><name pos:line="41" pos:column="87">bitcount<pos:position pos:line="41" pos:column="95"/></name></name></expr>;<pos:position pos:line="41" pos:column="96"/></expr_stmt>

                <comment type="block" pos:line="43" pos:column="17">/* Final transform: */</comment>
                <expr_stmt><expr><call><name pos:line="44" pos:column="17">apr__SHA256_Transform<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">context<pos:position pos:line="44" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="48">(<pos:position pos:line="44" pos:column="49"/></operator><name pos:line="44" pos:column="49">sha2_word32<pos:position pos:line="44" pos:column="60"/></name><operator pos:line="44" pos:column="60">*<pos:position pos:line="44" pos:column="61"/></operator><operator pos:line="44" pos:column="61">)<pos:position pos:line="44" pos:column="62"/></operator><name><name pos:line="44" pos:column="62">context<pos:position pos:line="44" pos:column="69"/></name><operator pos:line="44" pos:column="69">-&gt;<pos:position pos:line="44" pos:column="74"/></operator><name pos:line="44" pos:column="71">buffer<pos:position pos:line="44" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="44" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="79"/></expr_stmt>

<cpp:if pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">if<pos:position pos:line="46" pos:column="4"/></cpp:directive> <expr><operator pos:line="46" pos:column="5">!<pos:position pos:line="46" pos:column="6"/></operator><name pos:line="46" pos:column="6">APR_IS_BIGENDIAN<pos:position pos:line="46" pos:column="22"/></name></expr></cpp:if>
                <block pos:line="47" pos:column="17">{
                        <comment type="block" pos:line="48" pos:column="25">/* Convert TO host byte order */</comment>
                        <decl_stmt><decl><type><name pos:line="49" pos:column="25">int<pos:position pos:line="49" pos:column="28"/></name></type>     <name pos:line="49" pos:column="33">j<pos:position pos:line="49" pos:column="34"/></name></decl>;<pos:position pos:line="49" pos:column="35"/></decl_stmt>
                        <for pos:line="50" pos:column="25">for <control pos:line="50" pos:column="29">(<init><expr><name pos:line="50" pos:column="30">j<pos:position pos:line="50" pos:column="31"/></name> <operator pos:line="50" pos:column="32">=<pos:position pos:line="50" pos:column="33"/></operator> <literal type="number" pos:line="50" pos:column="34">0<pos:position pos:line="50" pos:column="35"/></literal></expr>;<pos:position pos:line="50" pos:column="36"/></init> <condition><expr><name pos:line="50" pos:column="37">j<pos:position pos:line="50" pos:column="38"/></name> <operator pos:line="50" pos:column="39">&lt;<pos:position pos:line="50" pos:column="43"/></operator> <literal type="number" pos:line="50" pos:column="41">8<pos:position pos:line="50" pos:column="42"/></literal></expr>;<pos:position pos:line="50" pos:column="43"/></condition> <incr><expr><name pos:line="50" pos:column="44">j<pos:position pos:line="50" pos:column="45"/></name><operator pos:line="50" pos:column="45">++<pos:position pos:line="50" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="50" pos:column="48"/></control> <block pos:line="50" pos:column="49">{
                                <expr_stmt><expr><call><name pos:line="51" pos:column="33">REVERSE32<pos:position pos:line="51" pos:column="42"/></name><argument_list pos:line="51" pos:column="42">(<argument><expr><name><name pos:line="51" pos:column="43">context<pos:position pos:line="51" pos:column="50"/></name><operator pos:line="51" pos:column="50">-&gt;<pos:position pos:line="51" pos:column="55"/></operator><name pos:line="51" pos:column="52">state<pos:position pos:line="51" pos:column="57"/></name><index pos:line="51" pos:column="57">[<expr><name pos:line="51" pos:column="58">j<pos:position pos:line="51" pos:column="59"/></name></expr>]<pos:position pos:line="51" pos:column="60"/></index></name></expr></argument>,<argument><expr><name><name pos:line="51" pos:column="61">context<pos:position pos:line="51" pos:column="68"/></name><operator pos:line="51" pos:column="68">-&gt;<pos:position pos:line="51" pos:column="73"/></operator><name pos:line="51" pos:column="70">state<pos:position pos:line="51" pos:column="75"/></name><index pos:line="51" pos:column="75">[<expr><name pos:line="51" pos:column="76">j<pos:position pos:line="51" pos:column="77"/></name></expr>]<pos:position pos:line="51" pos:column="78"/></index></name></expr></argument>)<pos:position pos:line="51" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="80"/></expr_stmt>
                                <expr_stmt><expr><operator pos:line="52" pos:column="33">*<pos:position pos:line="52" pos:column="34"/></operator><name pos:line="52" pos:column="34">d<pos:position pos:line="52" pos:column="35"/></name><operator pos:line="52" pos:column="35">++<pos:position pos:line="52" pos:column="37"/></operator> <operator pos:line="52" pos:column="38">=<pos:position pos:line="52" pos:column="39"/></operator> <name><name pos:line="52" pos:column="40">context<pos:position pos:line="52" pos:column="47"/></name><operator pos:line="52" pos:column="47">-&gt;<pos:position pos:line="52" pos:column="52"/></operator><name pos:line="52" pos:column="49">state<pos:position pos:line="52" pos:column="54"/></name><index pos:line="52" pos:column="54">[<expr><name pos:line="52" pos:column="55">j<pos:position pos:line="52" pos:column="56"/></name></expr>]<pos:position pos:line="52" pos:column="57"/></index></name></expr>;<pos:position pos:line="52" pos:column="58"/></expr_stmt>
                        }<pos:position pos:line="53" pos:column="26"/></block></for>
                }<pos:position pos:line="54" pos:column="18"/></block>
<cpp:else pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">else<pos:position pos:line="55" pos:column="6"/></cpp:directive></cpp:else>
                <expr_stmt><expr><call><name pos:line="56" pos:column="17">MEMCPY_BCOPY<pos:position pos:line="56" pos:column="29"/></name><argument_list pos:line="56" pos:column="29">(<argument><expr><name pos:line="56" pos:column="30">d<pos:position pos:line="56" pos:column="31"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="33">context<pos:position pos:line="56" pos:column="40"/></name><operator pos:line="56" pos:column="40">-&gt;<pos:position pos:line="56" pos:column="45"/></operator><name pos:line="56" pos:column="42">state<pos:position pos:line="56" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="49">SHA256_DIGEST_LENGTH<pos:position pos:line="56" pos:column="69"/></name></expr></argument>)<pos:position pos:line="56" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="71"/></expr_stmt>
<cpp:endif pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">endif<pos:position pos:line="57" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="60" pos:column="9">/* Clean up state data: */</comment>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">MEMSET_BZERO<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">context<pos:position pos:line="61" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="61" pos:column="31">sizeof<argument_list pos:line="61" pos:column="37">(<argument><expr><name pos:line="61" pos:column="38">context<pos:position pos:line="61" pos:column="45"/></name></expr></argument>)<pos:position pos:line="61" pos:column="46"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="61" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="61" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><name pos:line="62" pos:column="9">usedspace<pos:position pos:line="62" pos:column="18"/></name> <operator pos:line="62" pos:column="19">=<pos:position pos:line="62" pos:column="20"/></operator> <literal type="number" pos:line="62" pos:column="21">0<pos:position pos:line="62" pos:column="22"/></literal></expr>;<pos:position pos:line="62" pos:column="23"/></expr_stmt>
}<pos:position pos:line="63" pos:column="2"/></block></function></unit>
