<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3049_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">XML_Parser<pos:position pos:line="1" pos:column="18"/></name></type>
<name pos:line="2" pos:column="1">parserCreate<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><specifier pos:line="2" pos:column="14">const<pos:position pos:line="2" pos:column="19"/></specifier> <name pos:line="2" pos:column="20">XML_Char<pos:position pos:line="2" pos:column="28"/></name> <modifier pos:line="2" pos:column="29">*<pos:position pos:line="2" pos:column="30"/></modifier></type><name pos:line="2" pos:column="30">encodingName<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>,
             <parameter><decl><type><specifier pos:line="3" pos:column="14">const<pos:position pos:line="3" pos:column="19"/></specifier> <name pos:line="3" pos:column="20">XML_Memory_Handling_Suite<pos:position pos:line="3" pos:column="45"/></name> <modifier pos:line="3" pos:column="46">*<pos:position pos:line="3" pos:column="47"/></modifier></type><name pos:line="3" pos:column="47">memsuite<pos:position pos:line="3" pos:column="55"/></name></decl></parameter>,
             <parameter><decl><type><specifier pos:line="4" pos:column="14">const<pos:position pos:line="4" pos:column="19"/></specifier> <name pos:line="4" pos:column="20">XML_Char<pos:position pos:line="4" pos:column="28"/></name> <modifier pos:line="4" pos:column="29">*<pos:position pos:line="4" pos:column="30"/></modifier></type><name pos:line="4" pos:column="30">nameSep<pos:position pos:line="4" pos:column="37"/></name></decl></parameter>,
             <parameter><decl><type><name pos:line="5" pos:column="14">DTD<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">dtd<pos:position pos:line="5" pos:column="22"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="23"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><name pos:line="7" pos:column="3">XML_Parser<pos:position pos:line="7" pos:column="13"/></name></type> <name pos:line="7" pos:column="14">parser<pos:position pos:line="7" pos:column="20"/></name></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>

  <if pos:line="9" pos:column="3">if <condition pos:line="9" pos:column="6">(<expr><name pos:line="9" pos:column="7">memsuite<pos:position pos:line="9" pos:column="15"/></name></expr>)<pos:position pos:line="9" pos:column="16"/></condition><then pos:line="9" pos:column="16"> <block pos:line="9" pos:column="17">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">XML_Memory_Handling_Suite<pos:position pos:line="10" pos:column="30"/></name> <modifier pos:line="10" pos:column="31">*<pos:position pos:line="10" pos:column="32"/></modifier></type><name pos:line="10" pos:column="32">mtemp<pos:position pos:line="10" pos:column="37"/></name></decl>;<pos:position pos:line="10" pos:column="38"/></decl_stmt>
    <expr_stmt><expr><name pos:line="11" pos:column="5">parser<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <operator pos:line="11" pos:column="14">(<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="15">XML_Parser<pos:position pos:line="11" pos:column="25"/></name><operator pos:line="11" pos:column="25">)<pos:position pos:line="11" pos:column="26"/></operator>
      <call><name><name pos:line="12" pos:column="7">memsuite<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">-&gt;<pos:position pos:line="12" pos:column="20"/></operator><name pos:line="12" pos:column="17">malloc_fcn<pos:position pos:line="12" pos:column="27"/></name></name><argument_list pos:line="12" pos:column="27">(<argument><expr><sizeof pos:line="12" pos:column="28">sizeof<argument_list pos:line="12" pos:column="34">(<argument><expr pos:line="12" pos:column="35">struct <name pos:line="12" pos:column="42">XML_ParserStruct<pos:position pos:line="12" pos:column="58"/></name></expr></argument>)<pos:position pos:line="12" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="12" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="61"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">parser<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">!=<pos:position pos:line="13" pos:column="18"/></operator> <name pos:line="13" pos:column="19">NULL<pos:position pos:line="13" pos:column="23"/></name></expr>)<pos:position pos:line="13" pos:column="24"/></condition><then pos:line="13" pos:column="24"> <block pos:line="13" pos:column="25">{
      <expr_stmt><expr><name pos:line="14" pos:column="7">mtemp<pos:position pos:line="14" pos:column="12"/></name> <operator pos:line="14" pos:column="13">=<pos:position pos:line="14" pos:column="14"/></operator> <operator pos:line="14" pos:column="15">(<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">XML_Memory_Handling_Suite<pos:position pos:line="14" pos:column="41"/></name> <operator pos:line="14" pos:column="42">*<pos:position pos:line="14" pos:column="43"/></operator><operator pos:line="14" pos:column="43">)<pos:position pos:line="14" pos:column="44"/></operator><operator pos:line="14" pos:column="44">&amp;<pos:position pos:line="14" pos:column="49"/></operator><operator pos:line="14" pos:column="45">(<pos:position pos:line="14" pos:column="46"/></operator><name><name pos:line="14" pos:column="46">parser<pos:position pos:line="14" pos:column="52"/></name><operator pos:line="14" pos:column="52">-&gt;<pos:position pos:line="14" pos:column="57"/></operator><name pos:line="14" pos:column="54">m_mem<pos:position pos:line="14" pos:column="59"/></name></name><operator pos:line="14" pos:column="59">)<pos:position pos:line="14" pos:column="60"/></operator></expr>;<pos:position pos:line="14" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="15" pos:column="7">mtemp<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">-&gt;<pos:position pos:line="15" pos:column="17"/></operator><name pos:line="15" pos:column="14">malloc_fcn<pos:position pos:line="15" pos:column="24"/></name></name> <operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator> <name><name pos:line="15" pos:column="27">memsuite<pos:position pos:line="15" pos:column="35"/></name><operator pos:line="15" pos:column="35">-&gt;<pos:position pos:line="15" pos:column="40"/></operator><name pos:line="15" pos:column="37">malloc_fcn<pos:position pos:line="15" pos:column="47"/></name></name></expr>;<pos:position pos:line="15" pos:column="48"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="16" pos:column="7">mtemp<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">-&gt;<pos:position pos:line="16" pos:column="17"/></operator><name pos:line="16" pos:column="14">realloc_fcn<pos:position pos:line="16" pos:column="25"/></name></name> <operator pos:line="16" pos:column="26">=<pos:position pos:line="16" pos:column="27"/></operator> <name><name pos:line="16" pos:column="28">memsuite<pos:position pos:line="16" pos:column="36"/></name><operator pos:line="16" pos:column="36">-&gt;<pos:position pos:line="16" pos:column="41"/></operator><name pos:line="16" pos:column="38">realloc_fcn<pos:position pos:line="16" pos:column="49"/></name></name></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="17" pos:column="7">mtemp<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">free_fcn<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">=<pos:position pos:line="17" pos:column="24"/></operator> <name><name pos:line="17" pos:column="25">memsuite<pos:position pos:line="17" pos:column="33"/></name><operator pos:line="17" pos:column="33">-&gt;<pos:position pos:line="17" pos:column="38"/></operator><name pos:line="17" pos:column="35">free_fcn<pos:position pos:line="17" pos:column="43"/></name></name></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></then></if>
  }<pos:position pos:line="19" pos:column="4"/></block></then>
  <else pos:line="20" pos:column="3">else <block pos:line="20" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">XML_Memory_Handling_Suite<pos:position pos:line="21" pos:column="30"/></name> <modifier pos:line="21" pos:column="31">*<pos:position pos:line="21" pos:column="32"/></modifier></type><name pos:line="21" pos:column="32">mtemp<pos:position pos:line="21" pos:column="37"/></name></decl>;<pos:position pos:line="21" pos:column="38"/></decl_stmt>
    <expr_stmt><expr><name pos:line="22" pos:column="5">parser<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <operator pos:line="22" pos:column="14">(<pos:position pos:line="22" pos:column="15"/></operator><name pos:line="22" pos:column="15">XML_Parser<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">)<pos:position pos:line="22" pos:column="26"/></operator><call><name pos:line="22" pos:column="26">malloc<pos:position pos:line="22" pos:column="32"/></name><argument_list pos:line="22" pos:column="32">(<argument><expr><sizeof pos:line="22" pos:column="33">sizeof<argument_list pos:line="22" pos:column="39">(<argument><expr pos:line="22" pos:column="40">struct <name pos:line="22" pos:column="47">XML_ParserStruct<pos:position pos:line="22" pos:column="63"/></name></expr></argument>)<pos:position pos:line="22" pos:column="64"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="22" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="66"/></expr_stmt>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><name pos:line="23" pos:column="9">parser<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">!=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">NULL<pos:position pos:line="23" pos:column="23"/></name></expr>)<pos:position pos:line="23" pos:column="24"/></condition><then pos:line="23" pos:column="24"> <block pos:line="23" pos:column="25">{
      <expr_stmt><expr><name pos:line="24" pos:column="7">mtemp<pos:position pos:line="24" pos:column="12"/></name> <operator pos:line="24" pos:column="13">=<pos:position pos:line="24" pos:column="14"/></operator> <operator pos:line="24" pos:column="15">(<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">XML_Memory_Handling_Suite<pos:position pos:line="24" pos:column="41"/></name> <operator pos:line="24" pos:column="42">*<pos:position pos:line="24" pos:column="43"/></operator><operator pos:line="24" pos:column="43">)<pos:position pos:line="24" pos:column="44"/></operator><operator pos:line="24" pos:column="44">&amp;<pos:position pos:line="24" pos:column="49"/></operator><operator pos:line="24" pos:column="45">(<pos:position pos:line="24" pos:column="46"/></operator><name><name pos:line="24" pos:column="46">parser<pos:position pos:line="24" pos:column="52"/></name><operator pos:line="24" pos:column="52">-&gt;<pos:position pos:line="24" pos:column="57"/></operator><name pos:line="24" pos:column="54">m_mem<pos:position pos:line="24" pos:column="59"/></name></name><operator pos:line="24" pos:column="59">)<pos:position pos:line="24" pos:column="60"/></operator></expr>;<pos:position pos:line="24" pos:column="61"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="25" pos:column="7">mtemp<pos:position pos:line="25" pos:column="12"/></name><operator pos:line="25" pos:column="12">-&gt;<pos:position pos:line="25" pos:column="17"/></operator><name pos:line="25" pos:column="14">malloc_fcn<pos:position pos:line="25" pos:column="24"/></name></name> <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="27">malloc<pos:position pos:line="25" pos:column="33"/></name></expr>;<pos:position pos:line="25" pos:column="34"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="26" pos:column="7">mtemp<pos:position pos:line="26" pos:column="12"/></name><operator pos:line="26" pos:column="12">-&gt;<pos:position pos:line="26" pos:column="17"/></operator><name pos:line="26" pos:column="14">realloc_fcn<pos:position pos:line="26" pos:column="25"/></name></name> <operator pos:line="26" pos:column="26">=<pos:position pos:line="26" pos:column="27"/></operator> <name pos:line="26" pos:column="28">realloc<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="27" pos:column="7">mtemp<pos:position pos:line="27" pos:column="12"/></name><operator pos:line="27" pos:column="12">-&gt;<pos:position pos:line="27" pos:column="17"/></operator><name pos:line="27" pos:column="14">free_fcn<pos:position pos:line="27" pos:column="22"/></name></name> <operator pos:line="27" pos:column="23">=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">free<pos:position pos:line="27" pos:column="29"/></name></expr>;<pos:position pos:line="27" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
  }<pos:position pos:line="29" pos:column="4"/></block></else></if>

  <if pos:line="31" pos:column="3">if <condition pos:line="31" pos:column="6">(<expr><operator pos:line="31" pos:column="7">!<pos:position pos:line="31" pos:column="8"/></operator><name pos:line="31" pos:column="8">parser<pos:position pos:line="31" pos:column="14"/></name></expr>)<pos:position pos:line="31" pos:column="15"/></condition><then pos:line="31" pos:column="15">
    <block type="pseudo"><return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">parser<pos:position pos:line="32" pos:column="18"/></name></expr>;<pos:position pos:line="32" pos:column="19"/></return></block></then></if>

  <expr_stmt><expr><name pos:line="34" pos:column="3">buffer<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <name pos:line="34" pos:column="12">NULL<pos:position pos:line="34" pos:column="16"/></name></expr>;<pos:position pos:line="34" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="35" pos:column="3">bufferLim<pos:position pos:line="35" pos:column="12"/></name> <operator pos:line="35" pos:column="13">=<pos:position pos:line="35" pos:column="14"/></operator> <name pos:line="35" pos:column="15">NULL<pos:position pos:line="35" pos:column="19"/></name></expr>;<pos:position pos:line="35" pos:column="20"/></expr_stmt>

  <expr_stmt><expr><name pos:line="37" pos:column="3">attsSize<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <name pos:line="37" pos:column="14">INIT_ATTS_SIZE<pos:position pos:line="37" pos:column="28"/></name></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
  <expr_stmt><expr><name pos:line="38" pos:column="3">atts<pos:position pos:line="38" pos:column="7"/></name> <operator pos:line="38" pos:column="8">=<pos:position pos:line="38" pos:column="9"/></operator> <operator pos:line="38" pos:column="10">(<pos:position pos:line="38" pos:column="11"/></operator><name pos:line="38" pos:column="11">ATTRIBUTE<pos:position pos:line="38" pos:column="20"/></name> <operator pos:line="38" pos:column="21">*<pos:position pos:line="38" pos:column="22"/></operator><operator pos:line="38" pos:column="22">)<pos:position pos:line="38" pos:column="23"/></operator><call><name pos:line="38" pos:column="23">MALLOC<pos:position pos:line="38" pos:column="29"/></name><argument_list pos:line="38" pos:column="29">(<argument><expr><name pos:line="38" pos:column="30">attsSize<pos:position pos:line="38" pos:column="38"/></name> <operator pos:line="38" pos:column="39">*<pos:position pos:line="38" pos:column="40"/></operator> <sizeof pos:line="38" pos:column="41">sizeof<argument_list pos:line="38" pos:column="47">(<argument><expr><name pos:line="38" pos:column="48">ATTRIBUTE<pos:position pos:line="38" pos:column="57"/></name></expr></argument>)<pos:position pos:line="38" pos:column="58"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="38" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="60"/></expr_stmt>
  <if pos:line="39" pos:column="3">if <condition pos:line="39" pos:column="6">(<expr><name pos:line="39" pos:column="7">atts<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">==<pos:position pos:line="39" pos:column="14"/></operator> <name pos:line="39" pos:column="15">NULL<pos:position pos:line="39" pos:column="19"/></name></expr>)<pos:position pos:line="39" pos:column="20"/></condition><then pos:line="39" pos:column="20"> <block pos:line="39" pos:column="21">{
    <expr_stmt><expr><call><name pos:line="40" pos:column="5">FREE<pos:position pos:line="40" pos:column="9"/></name><argument_list pos:line="40" pos:column="9">(<argument><expr><name pos:line="40" pos:column="10">parser<pos:position pos:line="40" pos:column="16"/></name></expr></argument>)<pos:position pos:line="40" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="18"/></expr_stmt>
    <return pos:line="41" pos:column="5">return <expr><name pos:line="41" pos:column="12">NULL<pos:position pos:line="41" pos:column="16"/></name></expr>;<pos:position pos:line="41" pos:column="17"/></return>
  }<pos:position pos:line="42" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="43" pos:column="3">dataBuf<pos:position pos:line="43" pos:column="10"/></name> <operator pos:line="43" pos:column="11">=<pos:position pos:line="43" pos:column="12"/></operator> <operator pos:line="43" pos:column="13">(<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">XML_Char<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">*<pos:position pos:line="43" pos:column="24"/></operator><operator pos:line="43" pos:column="24">)<pos:position pos:line="43" pos:column="25"/></operator><call><name pos:line="43" pos:column="25">MALLOC<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">INIT_DATA_BUF_SIZE<pos:position pos:line="43" pos:column="50"/></name> <operator pos:line="43" pos:column="51">*<pos:position pos:line="43" pos:column="52"/></operator> <sizeof pos:line="43" pos:column="53">sizeof<argument_list pos:line="43" pos:column="59">(<argument><expr><name pos:line="43" pos:column="60">XML_Char<pos:position pos:line="43" pos:column="68"/></name></expr></argument>)<pos:position pos:line="43" pos:column="69"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="43" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="71"/></expr_stmt>
  <if pos:line="44" pos:column="3">if <condition pos:line="44" pos:column="6">(<expr><name pos:line="44" pos:column="7">dataBuf<pos:position pos:line="44" pos:column="14"/></name> <operator pos:line="44" pos:column="15">==<pos:position pos:line="44" pos:column="17"/></operator> <name pos:line="44" pos:column="18">NULL<pos:position pos:line="44" pos:column="22"/></name></expr>)<pos:position pos:line="44" pos:column="23"/></condition><then pos:line="44" pos:column="23"> <block pos:line="44" pos:column="24">{
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">FREE<pos:position pos:line="45" pos:column="9"/></name><argument_list pos:line="45" pos:column="9">(<argument><expr><name pos:line="45" pos:column="10">atts<pos:position pos:line="45" pos:column="14"/></name></expr></argument>)<pos:position pos:line="45" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">FREE<pos:position pos:line="46" pos:column="9"/></name><argument_list pos:line="46" pos:column="9">(<argument><expr><name pos:line="46" pos:column="10">parser<pos:position pos:line="46" pos:column="16"/></name></expr></argument>)<pos:position pos:line="46" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt>
    <return pos:line="47" pos:column="5">return <expr><name pos:line="47" pos:column="12">NULL<pos:position pos:line="47" pos:column="16"/></name></expr>;<pos:position pos:line="47" pos:column="17"/></return>
  }<pos:position pos:line="48" pos:column="4"/></block></then></if>
  <expr_stmt><expr><name pos:line="49" pos:column="3">dataBufEnd<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">=<pos:position pos:line="49" pos:column="15"/></operator> <name pos:line="49" pos:column="16">dataBuf<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">+<pos:position pos:line="49" pos:column="25"/></operator> <name pos:line="49" pos:column="26">INIT_DATA_BUF_SIZE<pos:position pos:line="49" pos:column="44"/></name></expr>;<pos:position pos:line="49" pos:column="45"/></expr_stmt>

  <if pos:line="51" pos:column="3">if <condition pos:line="51" pos:column="6">(<expr><name pos:line="51" pos:column="7">dtd<pos:position pos:line="51" pos:column="10"/></name></expr>)<pos:position pos:line="51" pos:column="11"/></condition><then pos:line="51" pos:column="11">
    <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="5">_dtd<pos:position pos:line="52" pos:column="9"/></name> <operator pos:line="52" pos:column="10">=<pos:position pos:line="52" pos:column="11"/></operator> <name pos:line="52" pos:column="12">dtd<pos:position pos:line="52" pos:column="15"/></name></expr>;<pos:position pos:line="52" pos:column="16"/></expr_stmt></block></then>
  <else pos:line="53" pos:column="3">else <block pos:line="53" pos:column="8">{
    <expr_stmt><expr><name pos:line="54" pos:column="5">_dtd<pos:position pos:line="54" pos:column="9"/></name> <operator pos:line="54" pos:column="10">=<pos:position pos:line="54" pos:column="11"/></operator> <call><name pos:line="54" pos:column="12">dtdCreate<pos:position pos:line="54" pos:column="21"/></name><argument_list pos:line="54" pos:column="21">(<argument><expr><operator pos:line="54" pos:column="22">&amp;<pos:position pos:line="54" pos:column="27"/></operator><name><name pos:line="54" pos:column="23">parser<pos:position pos:line="54" pos:column="29"/></name><operator pos:line="54" pos:column="29">-&gt;<pos:position pos:line="54" pos:column="34"/></operator><name pos:line="54" pos:column="31">m_mem<pos:position pos:line="54" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="54" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="38"/></expr_stmt>
    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name pos:line="55" pos:column="9">_dtd<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">==<pos:position pos:line="55" pos:column="16"/></operator> <name pos:line="55" pos:column="17">NULL<pos:position pos:line="55" pos:column="21"/></name></expr>)<pos:position pos:line="55" pos:column="22"/></condition><then pos:line="55" pos:column="22"> <block pos:line="55" pos:column="23">{
      <expr_stmt><expr><call><name pos:line="56" pos:column="7">FREE<pos:position pos:line="56" pos:column="11"/></name><argument_list pos:line="56" pos:column="11">(<argument><expr><name pos:line="56" pos:column="12">dataBuf<pos:position pos:line="56" pos:column="19"/></name></expr></argument>)<pos:position pos:line="56" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="21"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="57" pos:column="7">FREE<pos:position pos:line="57" pos:column="11"/></name><argument_list pos:line="57" pos:column="11">(<argument><expr><name pos:line="57" pos:column="12">atts<pos:position pos:line="57" pos:column="16"/></name></expr></argument>)<pos:position pos:line="57" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="18"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="58" pos:column="7">FREE<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">(<argument><expr><name pos:line="58" pos:column="12">parser<pos:position pos:line="58" pos:column="18"/></name></expr></argument>)<pos:position pos:line="58" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="20"/></expr_stmt>
      <return pos:line="59" pos:column="7">return <expr><name pos:line="59" pos:column="14">NULL<pos:position pos:line="59" pos:column="18"/></name></expr>;<pos:position pos:line="59" pos:column="19"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>
  }<pos:position pos:line="61" pos:column="4"/></block></else></if>

  <expr_stmt><expr><name pos:line="63" pos:column="3">freeBindingList<pos:position pos:line="63" pos:column="18"/></name> <operator pos:line="63" pos:column="19">=<pos:position pos:line="63" pos:column="20"/></operator> <name pos:line="63" pos:column="21">NULL<pos:position pos:line="63" pos:column="25"/></name></expr>;<pos:position pos:line="63" pos:column="26"/></expr_stmt>
  <expr_stmt><expr><name pos:line="64" pos:column="3">freeTagList<pos:position pos:line="64" pos:column="14"/></name> <operator pos:line="64" pos:column="15">=<pos:position pos:line="64" pos:column="16"/></operator> <name pos:line="64" pos:column="17">NULL<pos:position pos:line="64" pos:column="21"/></name></expr>;<pos:position pos:line="64" pos:column="22"/></expr_stmt>

  <expr_stmt><expr><name pos:line="66" pos:column="3">groupSize<pos:position pos:line="66" pos:column="12"/></name> <operator pos:line="66" pos:column="13">=<pos:position pos:line="66" pos:column="14"/></operator> <literal type="number" pos:line="66" pos:column="15">0<pos:position pos:line="66" pos:column="16"/></literal></expr>;<pos:position pos:line="66" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="67" pos:column="3">groupConnector<pos:position pos:line="67" pos:column="17"/></name> <operator pos:line="67" pos:column="18">=<pos:position pos:line="67" pos:column="19"/></operator> <name pos:line="67" pos:column="20">NULL<pos:position pos:line="67" pos:column="24"/></name></expr>;<pos:position pos:line="67" pos:column="25"/></expr_stmt>

  <expr_stmt><expr><name pos:line="69" pos:column="3">unknownEncodingHandler<pos:position pos:line="69" pos:column="25"/></name> <operator pos:line="69" pos:column="26">=<pos:position pos:line="69" pos:column="27"/></operator> <name pos:line="69" pos:column="28">NULL<pos:position pos:line="69" pos:column="32"/></name></expr>;<pos:position pos:line="69" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="70" pos:column="3">unknownEncodingHandlerData<pos:position pos:line="70" pos:column="29"/></name> <operator pos:line="70" pos:column="30">=<pos:position pos:line="70" pos:column="31"/></operator> <name pos:line="70" pos:column="32">NULL<pos:position pos:line="70" pos:column="36"/></name></expr>;<pos:position pos:line="70" pos:column="37"/></expr_stmt>

  <expr_stmt><expr><name pos:line="72" pos:column="3">namespaceSeparator<pos:position pos:line="72" pos:column="21"/></name> <operator pos:line="72" pos:column="22">=<pos:position pos:line="72" pos:column="23"/></operator> <literal type="char" pos:line="72" pos:column="24">'!'<pos:position pos:line="72" pos:column="27"/></literal></expr>;<pos:position pos:line="72" pos:column="28"/></expr_stmt>
  <expr_stmt><expr><name pos:line="73" pos:column="3">ns<pos:position pos:line="73" pos:column="5"/></name> <operator pos:line="73" pos:column="6">=<pos:position pos:line="73" pos:column="7"/></operator> <name pos:line="73" pos:column="8">XML_FALSE<pos:position pos:line="73" pos:column="17"/></name></expr>;<pos:position pos:line="73" pos:column="18"/></expr_stmt>
  <expr_stmt><expr><name pos:line="74" pos:column="3">ns_triplets<pos:position pos:line="74" pos:column="14"/></name> <operator pos:line="74" pos:column="15">=<pos:position pos:line="74" pos:column="16"/></operator> <name pos:line="74" pos:column="17">XML_FALSE<pos:position pos:line="74" pos:column="26"/></name></expr>;<pos:position pos:line="74" pos:column="27"/></expr_stmt>

  <expr_stmt><expr><name pos:line="76" pos:column="3">nsAtts<pos:position pos:line="76" pos:column="9"/></name> <operator pos:line="76" pos:column="10">=<pos:position pos:line="76" pos:column="11"/></operator> <name pos:line="76" pos:column="12">NULL<pos:position pos:line="76" pos:column="16"/></name></expr>;<pos:position pos:line="76" pos:column="17"/></expr_stmt>
  <expr_stmt><expr><name pos:line="77" pos:column="3">nsAttsVersion<pos:position pos:line="77" pos:column="16"/></name> <operator pos:line="77" pos:column="17">=<pos:position pos:line="77" pos:column="18"/></operator> <literal type="number" pos:line="77" pos:column="19">0<pos:position pos:line="77" pos:column="20"/></literal></expr>;<pos:position pos:line="77" pos:column="21"/></expr_stmt>
  <expr_stmt><expr><name pos:line="78" pos:column="3">nsAttsPower<pos:position pos:line="78" pos:column="14"/></name> <operator pos:line="78" pos:column="15">=<pos:position pos:line="78" pos:column="16"/></operator> <literal type="number" pos:line="78" pos:column="17">0<pos:position pos:line="78" pos:column="18"/></literal></expr>;<pos:position pos:line="78" pos:column="19"/></expr_stmt>

  <expr_stmt><expr><call><name pos:line="80" pos:column="3">poolInit<pos:position pos:line="80" pos:column="11"/></name><argument_list pos:line="80" pos:column="11">(<argument><expr><operator pos:line="80" pos:column="12">&amp;<pos:position pos:line="80" pos:column="17"/></operator><name pos:line="80" pos:column="13">tempPool<pos:position pos:line="80" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="80" pos:column="23">&amp;<pos:position pos:line="80" pos:column="28"/></operator><operator pos:line="80" pos:column="24">(<pos:position pos:line="80" pos:column="25"/></operator><name><name pos:line="80" pos:column="25">parser<pos:position pos:line="80" pos:column="31"/></name><operator pos:line="80" pos:column="31">-&gt;<pos:position pos:line="80" pos:column="36"/></operator><name pos:line="80" pos:column="33">m_mem<pos:position pos:line="80" pos:column="38"/></name></name><operator pos:line="80" pos:column="38">)<pos:position pos:line="80" pos:column="39"/></operator></expr></argument>)<pos:position pos:line="80" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="81" pos:column="3">poolInit<pos:position pos:line="81" pos:column="11"/></name><argument_list pos:line="81" pos:column="11">(<argument><expr><operator pos:line="81" pos:column="12">&amp;<pos:position pos:line="81" pos:column="17"/></operator><name pos:line="81" pos:column="13">temp2Pool<pos:position pos:line="81" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="81" pos:column="24">&amp;<pos:position pos:line="81" pos:column="29"/></operator><operator pos:line="81" pos:column="25">(<pos:position pos:line="81" pos:column="26"/></operator><name><name pos:line="81" pos:column="26">parser<pos:position pos:line="81" pos:column="32"/></name><operator pos:line="81" pos:column="32">-&gt;<pos:position pos:line="81" pos:column="37"/></operator><name pos:line="81" pos:column="34">m_mem<pos:position pos:line="81" pos:column="39"/></name></name><operator pos:line="81" pos:column="39">)<pos:position pos:line="81" pos:column="40"/></operator></expr></argument>)<pos:position pos:line="81" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="42"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="82" pos:column="3">parserInit<pos:position pos:line="82" pos:column="13"/></name><argument_list pos:line="82" pos:column="13">(<argument><expr><name pos:line="82" pos:column="14">parser<pos:position pos:line="82" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="22">encodingName<pos:position pos:line="82" pos:column="34"/></name></expr></argument>)<pos:position pos:line="82" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="36"/></expr_stmt>

  <if pos:line="84" pos:column="3">if <condition pos:line="84" pos:column="6">(<expr><name pos:line="84" pos:column="7">encodingName<pos:position pos:line="84" pos:column="19"/></name> <operator pos:line="84" pos:column="20">&amp;&amp;<pos:position pos:line="84" pos:column="30"/></operator> <operator pos:line="84" pos:column="23">!<pos:position pos:line="84" pos:column="24"/></operator><name pos:line="84" pos:column="24">protocolEncodingName<pos:position pos:line="84" pos:column="44"/></name></expr>)<pos:position pos:line="84" pos:column="45"/></condition><then pos:line="84" pos:column="45"> <block pos:line="84" pos:column="46">{
    <expr_stmt><expr><call><name pos:line="85" pos:column="5">XML_ParserFree<pos:position pos:line="85" pos:column="19"/></name><argument_list pos:line="85" pos:column="19">(<argument><expr><name pos:line="85" pos:column="20">parser<pos:position pos:line="85" pos:column="26"/></name></expr></argument>)<pos:position pos:line="85" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="28"/></expr_stmt>
    <return pos:line="86" pos:column="5">return <expr><name pos:line="86" pos:column="12">NULL<pos:position pos:line="86" pos:column="16"/></name></expr>;<pos:position pos:line="86" pos:column="17"/></return>
  }<pos:position pos:line="87" pos:column="4"/></block></then></if>

  <if pos:line="89" pos:column="3">if <condition pos:line="89" pos:column="6">(<expr><name pos:line="89" pos:column="7">nameSep<pos:position pos:line="89" pos:column="14"/></name></expr>)<pos:position pos:line="89" pos:column="15"/></condition><then pos:line="89" pos:column="15"> <block pos:line="89" pos:column="16">{
    <expr_stmt><expr><name pos:line="90" pos:column="5">ns<pos:position pos:line="90" pos:column="7"/></name> <operator pos:line="90" pos:column="8">=<pos:position pos:line="90" pos:column="9"/></operator> <name pos:line="90" pos:column="10">XML_TRUE<pos:position pos:line="90" pos:column="18"/></name></expr>;<pos:position pos:line="90" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="91" pos:column="5">internalEncoding<pos:position pos:line="91" pos:column="21"/></name> <operator pos:line="91" pos:column="22">=<pos:position pos:line="91" pos:column="23"/></operator> <call><name pos:line="91" pos:column="24">XmlGetInternalEncodingNS<pos:position pos:line="91" pos:column="48"/></name><argument_list pos:line="91" pos:column="48">()<pos:position pos:line="91" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><name pos:line="92" pos:column="5">namespaceSeparator<pos:position pos:line="92" pos:column="23"/></name> <operator pos:line="92" pos:column="24">=<pos:position pos:line="92" pos:column="25"/></operator> <operator pos:line="92" pos:column="26">*<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="27">nameSep<pos:position pos:line="92" pos:column="34"/></name></expr>;<pos:position pos:line="92" pos:column="35"/></expr_stmt>
  }<pos:position pos:line="93" pos:column="4"/></block></then>
  <else pos:line="94" pos:column="3">else <block pos:line="94" pos:column="8">{
    <expr_stmt><expr><name pos:line="95" pos:column="5">internalEncoding<pos:position pos:line="95" pos:column="21"/></name> <operator pos:line="95" pos:column="22">=<pos:position pos:line="95" pos:column="23"/></operator> <call><name pos:line="95" pos:column="24">XmlGetInternalEncoding<pos:position pos:line="95" pos:column="46"/></name><argument_list pos:line="95" pos:column="46">()<pos:position pos:line="95" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="49"/></expr_stmt>
  }<pos:position pos:line="96" pos:column="4"/></block></else></if>

  <return pos:line="98" pos:column="3">return <expr><name pos:line="98" pos:column="10">parser<pos:position pos:line="98" pos:column="16"/></name></expr>;<pos:position pos:line="98" pos:column="17"/></return>
}<pos:position pos:line="99" pos:column="2"/></block></function></unit>
