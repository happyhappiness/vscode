<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2303_httpd-2.0.61.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">worker_stack_awaken_next<pos:position pos:line="1" pos:column="45"/></name><parameter_list pos:line="1" pos:column="45">(<parameter><decl><type><name pos:line="1" pos:column="46">worker_stack<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">stack<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{

    <while pos:line="4" pos:column="5">while <condition pos:line="4" pos:column="11">(<expr><literal type="number" pos:line="4" pos:column="12">1<pos:position pos:line="4" pos:column="13"/></literal></expr>)<pos:position pos:line="4" pos:column="14"/></condition> <block pos:line="4" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="5" pos:column="9">apr_uint32_t<pos:position pos:line="5" pos:column="21"/></name></type> <name pos:line="5" pos:column="22">state<pos:position pos:line="5" pos:column="27"/></name> <init pos:line="5" pos:column="28">= <expr><name><name pos:line="5" pos:column="30">stack<pos:position pos:line="5" pos:column="35"/></name><operator pos:line="5" pos:column="35">-&gt;<pos:position pos:line="5" pos:column="40"/></operator><name pos:line="5" pos:column="37">state<pos:position pos:line="5" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="43"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">apr_uint32_t<pos:position pos:line="6" pos:column="21"/></name></type> <name pos:line="6" pos:column="22">first<pos:position pos:line="6" pos:column="27"/></name> <init pos:line="6" pos:column="28">= <expr><name pos:line="6" pos:column="30">state<pos:position pos:line="6" pos:column="35"/></name> <operator pos:line="6" pos:column="36">&amp;<pos:position pos:line="6" pos:column="41"/></operator> <name pos:line="6" pos:column="38">STACK_FIRST<pos:position pos:line="6" pos:column="49"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="50"/></decl_stmt>
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">first<pos:position pos:line="7" pos:column="18"/></name> <operator pos:line="7" pos:column="19">==<pos:position pos:line="7" pos:column="21"/></operator> <name pos:line="7" pos:column="22">STACK_LIST_END<pos:position pos:line="7" pos:column="36"/></name></expr>)<pos:position pos:line="7" pos:column="37"/></condition><then pos:line="7" pos:column="37"> <block pos:line="7" pos:column="38">{
            <if pos:line="8" pos:column="13">if <condition pos:line="8" pos:column="16">(<expr><call><name pos:line="8" pos:column="17">apr_atomic_cas<pos:position pos:line="8" pos:column="31"/></name><argument_list pos:line="8" pos:column="31">(<argument><expr><operator pos:line="8" pos:column="32">&amp;<pos:position pos:line="8" pos:column="37"/></operator><operator pos:line="8" pos:column="33">(<pos:position pos:line="8" pos:column="34"/></operator><name><name pos:line="8" pos:column="34">stack<pos:position pos:line="8" pos:column="39"/></name><operator pos:line="8" pos:column="39">-&gt;<pos:position pos:line="8" pos:column="44"/></operator><name pos:line="8" pos:column="41">state<pos:position pos:line="8" pos:column="46"/></name></name><operator pos:line="8" pos:column="46">)<pos:position pos:line="8" pos:column="47"/></operator></expr></argument>, <argument><expr><name pos:line="8" pos:column="49">state<pos:position pos:line="8" pos:column="54"/></name> <operator pos:line="8" pos:column="55">|<pos:position pos:line="8" pos:column="56"/></operator> <name pos:line="8" pos:column="57">STACK_NO_LISTENER<pos:position pos:line="8" pos:column="74"/></name></expr></argument>,
                               <argument><expr><name pos:line="9" pos:column="32">state<pos:position pos:line="9" pos:column="37"/></name></expr></argument>)<pos:position pos:line="9" pos:column="38"/></argument_list></call> <operator pos:line="9" pos:column="39">!=<pos:position pos:line="9" pos:column="41"/></operator> <name pos:line="9" pos:column="42">state<pos:position pos:line="9" pos:column="47"/></name></expr>)<pos:position pos:line="9" pos:column="48"/></condition><then pos:line="9" pos:column="48"> <block pos:line="9" pos:column="49">{
                <continue pos:line="10" pos:column="17">continue;<pos:position pos:line="10" pos:column="26"/></continue>
            }<pos:position pos:line="11" pos:column="14"/></block></then>
            <else pos:line="12" pos:column="13">else <block pos:line="12" pos:column="18">{
                <return pos:line="13" pos:column="17">return <expr><name pos:line="13" pos:column="24">APR_SUCCESS<pos:position pos:line="13" pos:column="35"/></name></expr>;<pos:position pos:line="13" pos:column="36"/></return>
            }<pos:position pos:line="14" pos:column="14"/></block></else></if>
        }<pos:position pos:line="15" pos:column="10"/></block></then>
        <else pos:line="16" pos:column="9">else <block pos:line="16" pos:column="14">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">worker_wakeup_info<pos:position pos:line="17" pos:column="31"/></name> <modifier pos:line="17" pos:column="32">*<pos:position pos:line="17" pos:column="33"/></modifier></type><name pos:line="17" pos:column="33">wakeup<pos:position pos:line="17" pos:column="39"/></name> <init pos:line="17" pos:column="40">= <expr><name><name pos:line="17" pos:column="42">worker_wakeups<pos:position pos:line="17" pos:column="56"/></name><index pos:line="17" pos:column="56">[<expr><name pos:line="17" pos:column="57">first<pos:position pos:line="17" pos:column="62"/></name></expr>]<pos:position pos:line="17" pos:column="63"/></index></name></expr></init></decl>;<pos:position pos:line="17" pos:column="64"/></decl_stmt>
            <if pos:line="18" pos:column="13">if <condition pos:line="18" pos:column="16">(<expr><call><name pos:line="18" pos:column="17">apr_atomic_cas<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><operator pos:line="18" pos:column="32">&amp;<pos:position pos:line="18" pos:column="37"/></operator><operator pos:line="18" pos:column="33">(<pos:position pos:line="18" pos:column="34"/></operator><name><name pos:line="18" pos:column="34">stack<pos:position pos:line="18" pos:column="39"/></name><operator pos:line="18" pos:column="39">-&gt;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="41">state<pos:position pos:line="18" pos:column="46"/></name></name><operator pos:line="18" pos:column="46">)<pos:position pos:line="18" pos:column="47"/></operator></expr></argument>, <argument><expr><operator pos:line="18" pos:column="49">(<pos:position pos:line="18" pos:column="50"/></operator><name pos:line="18" pos:column="50">state<pos:position pos:line="18" pos:column="55"/></name> <operator pos:line="18" pos:column="56">^<pos:position pos:line="18" pos:column="57"/></operator> <name pos:line="18" pos:column="58">first<pos:position pos:line="18" pos:column="63"/></name><operator pos:line="18" pos:column="63">)<pos:position pos:line="18" pos:column="64"/></operator> <operator pos:line="18" pos:column="65">|<pos:position pos:line="18" pos:column="66"/></operator> <name><name pos:line="18" pos:column="67">wakeup<pos:position pos:line="18" pos:column="73"/></name><operator pos:line="18" pos:column="73">-&gt;<pos:position pos:line="18" pos:column="78"/></operator><name pos:line="18" pos:column="75">next<pos:position pos:line="18" pos:column="79"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="19" pos:column="32">state<pos:position pos:line="19" pos:column="37"/></name></expr></argument>)<pos:position pos:line="19" pos:column="38"/></argument_list></call> <operator pos:line="19" pos:column="39">!=<pos:position pos:line="19" pos:column="41"/></operator> <name pos:line="19" pos:column="42">state<pos:position pos:line="19" pos:column="47"/></name></expr>)<pos:position pos:line="19" pos:column="48"/></condition><then pos:line="19" pos:column="48"> <block pos:line="19" pos:column="49">{
                <continue pos:line="20" pos:column="17">continue;<pos:position pos:line="20" pos:column="26"/></continue>
            }<pos:position pos:line="21" pos:column="14"/></block></then>
            <else pos:line="22" pos:column="13">else <block pos:line="22" pos:column="18">{
                <comment type="block" pos:line="23" pos:column="17">/* Acquire and release the idle worker's mutex to ensure
                 * that it's actually waiting on its condition variable
                 */</comment>
                <decl_stmt><decl><type><name pos:line="26" pos:column="17">apr_status_t<pos:position pos:line="26" pos:column="29"/></name></type> <name pos:line="26" pos:column="30">rv<pos:position pos:line="26" pos:column="32"/></name></decl>;<pos:position pos:line="26" pos:column="33"/></decl_stmt>
                <if pos:line="27" pos:column="17">if <condition pos:line="27" pos:column="20">(<expr><operator pos:line="27" pos:column="21">(<pos:position pos:line="27" pos:column="22"/></operator><name pos:line="27" pos:column="22">rv<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">=<pos:position pos:line="27" pos:column="26"/></operator> <call><name pos:line="27" pos:column="27">apr_thread_mutex_lock<pos:position pos:line="27" pos:column="48"/></name><argument_list pos:line="27" pos:column="48">(<argument><expr><name><name pos:line="27" pos:column="49">wakeup<pos:position pos:line="27" pos:column="55"/></name><operator pos:line="27" pos:column="55">-&gt;<pos:position pos:line="27" pos:column="60"/></operator><name pos:line="27" pos:column="57">mutex<pos:position pos:line="27" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="63"/></argument_list></call><operator pos:line="27" pos:column="63">)<pos:position pos:line="27" pos:column="64"/></operator> <operator pos:line="27" pos:column="65">!=<pos:position pos:line="27" pos:column="67"/></operator>
                    <name pos:line="28" pos:column="21">APR_SUCCESS<pos:position pos:line="28" pos:column="32"/></name></expr>)<pos:position pos:line="28" pos:column="33"/></condition><then pos:line="28" pos:column="33"> <block pos:line="28" pos:column="34">{
                    <return pos:line="29" pos:column="21">return <expr><name pos:line="29" pos:column="28">rv<pos:position pos:line="29" pos:column="30"/></name></expr>;<pos:position pos:line="29" pos:column="31"/></return>
                }<pos:position pos:line="30" pos:column="18"/></block></then></if>
                <if pos:line="31" pos:column="17">if <condition pos:line="31" pos:column="20">(<expr><operator pos:line="31" pos:column="21">(<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">rv<pos:position pos:line="31" pos:column="24"/></name> <operator pos:line="31" pos:column="25">=<pos:position pos:line="31" pos:column="26"/></operator> <call><name pos:line="31" pos:column="27">apr_thread_mutex_unlock<pos:position pos:line="31" pos:column="50"/></name><argument_list pos:line="31" pos:column="50">(<argument><expr><name><name pos:line="31" pos:column="51">wakeup<pos:position pos:line="31" pos:column="57"/></name><operator pos:line="31" pos:column="57">-&gt;<pos:position pos:line="31" pos:column="62"/></operator><name pos:line="31" pos:column="59">mutex<pos:position pos:line="31" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="65"/></argument_list></call><operator pos:line="31" pos:column="65">)<pos:position pos:line="31" pos:column="66"/></operator> <operator pos:line="31" pos:column="67">!=<pos:position pos:line="31" pos:column="69"/></operator>
                    <name pos:line="32" pos:column="21">APR_SUCCESS<pos:position pos:line="32" pos:column="32"/></name></expr>)<pos:position pos:line="32" pos:column="33"/></condition><then pos:line="32" pos:column="33"> <block pos:line="32" pos:column="34">{
                    <return pos:line="33" pos:column="21">return <expr><name pos:line="33" pos:column="28">rv<pos:position pos:line="33" pos:column="30"/></name></expr>;<pos:position pos:line="33" pos:column="31"/></return>
                }<pos:position pos:line="34" pos:column="18"/></block></then></if>
                <return pos:line="35" pos:column="17">return <expr><call><name pos:line="35" pos:column="24">apr_thread_cond_signal<pos:position pos:line="35" pos:column="46"/></name><argument_list pos:line="35" pos:column="46">(<argument><expr><name><name pos:line="35" pos:column="47">wakeup<pos:position pos:line="35" pos:column="53"/></name><operator pos:line="35" pos:column="53">-&gt;<pos:position pos:line="35" pos:column="58"/></operator><name pos:line="35" pos:column="55">cond<pos:position pos:line="35" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="35" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="61"/></return>
            }<pos:position pos:line="36" pos:column="14"/></block></else></if>
        }<pos:position pos:line="37" pos:column="10"/></block></else></if>
    }<pos:position pos:line="38" pos:column="6"/></block></while>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
