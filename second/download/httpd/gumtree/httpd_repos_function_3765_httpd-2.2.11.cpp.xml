<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3765_httpd-2.2.11.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_socket_sendto<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">apr_socket_t<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">sock<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">apr_sockaddr_t<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">where<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="2" pos:column="32">apr_int32_t<pos:position pos:line="2" pos:column="43"/></name></type> <name pos:line="2" pos:column="44">flags<pos:position pos:line="2" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="51">const<pos:position pos:line="2" pos:column="56"/></specifier> <name pos:line="2" pos:column="57">char<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">buf<pos:position pos:line="2" pos:column="66"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="3" pos:column="32">apr_size_t<pos:position pos:line="3" pos:column="42"/></name> <modifier pos:line="3" pos:column="43">*<pos:position pos:line="3" pos:column="44"/></modifier></type><name pos:line="3" pos:column="44">len<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="48"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_ssize_t<pos:position pos:line="5" pos:column="16"/></name></type> <name pos:line="5" pos:column="17">rv<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>

    <do pos:line="7" pos:column="5">do <block pos:line="7" pos:column="8">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">rv<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">sendto<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name><name pos:line="8" pos:column="21">sock<pos:position pos:line="8" pos:column="25"/></name><operator pos:line="8" pos:column="25">-&gt;<pos:position pos:line="8" pos:column="30"/></operator><name pos:line="8" pos:column="27">socketdes<pos:position pos:line="8" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="38">buf<pos:position pos:line="8" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="43">(<pos:position pos:line="8" pos:column="44"/></operator><operator pos:line="8" pos:column="44">*<pos:position pos:line="8" pos:column="45"/></operator><name pos:line="8" pos:column="45">len<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">)<pos:position pos:line="8" pos:column="49"/></operator></expr></argument>, <argument><expr><name pos:line="8" pos:column="51">flags<pos:position pos:line="8" pos:column="56"/></name></expr></argument>, 
                    <argument><expr><operator pos:line="9" pos:column="21">(<pos:position pos:line="9" pos:column="22"/></operator><specifier pos:line="9" pos:column="22">const<pos:position pos:line="9" pos:column="27"/></specifier> struct <name pos:line="9" pos:column="35">sockaddr<pos:position pos:line="9" pos:column="43"/></name><operator pos:line="9" pos:column="43">*<pos:position pos:line="9" pos:column="44"/></operator><operator pos:line="9" pos:column="44">)<pos:position pos:line="9" pos:column="45"/></operator><operator pos:line="9" pos:column="45">&amp;<pos:position pos:line="9" pos:column="50"/></operator><name><name pos:line="9" pos:column="46">where<pos:position pos:line="9" pos:column="51"/></name><operator pos:line="9" pos:column="51">-&gt;<pos:position pos:line="9" pos:column="56"/></operator><name pos:line="9" pos:column="53">sa<pos:position pos:line="9" pos:column="55"/></name></name></expr></argument>, 
                    <argument><expr><name><name pos:line="10" pos:column="21">where<pos:position pos:line="10" pos:column="26"/></name><operator pos:line="10" pos:column="26">-&gt;<pos:position pos:line="10" pos:column="31"/></operator><name pos:line="10" pos:column="28">salen<pos:position pos:line="10" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block> while <condition pos:line="11" pos:column="13">(<expr><name pos:line="11" pos:column="14">rv<pos:position pos:line="11" pos:column="16"/></name> <operator pos:line="11" pos:column="17">==<pos:position pos:line="11" pos:column="19"/></operator> <operator pos:line="11" pos:column="20">-<pos:position pos:line="11" pos:column="21"/></operator><literal type="number" pos:line="11" pos:column="21">1<pos:position pos:line="11" pos:column="22"/></literal> <operator pos:line="11" pos:column="23">&amp;&amp;<pos:position pos:line="11" pos:column="33"/></operator> <name pos:line="11" pos:column="26">errno<pos:position pos:line="11" pos:column="31"/></name> <operator pos:line="11" pos:column="32">==<pos:position pos:line="11" pos:column="34"/></operator> <name pos:line="11" pos:column="35">EINTR<pos:position pos:line="11" pos:column="40"/></name></expr>)<pos:position pos:line="11" pos:column="41"/></condition>;<pos:position pos:line="11" pos:column="42"/></do>

    <while pos:line="13" pos:column="5">while <condition pos:line="13" pos:column="11">(<expr><operator pos:line="13" pos:column="12">(<pos:position pos:line="13" pos:column="13"/></operator><name pos:line="13" pos:column="13">rv<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">==<pos:position pos:line="13" pos:column="18"/></operator> <operator pos:line="13" pos:column="19">-<pos:position pos:line="13" pos:column="20"/></operator><literal type="number" pos:line="13" pos:column="20">1<pos:position pos:line="13" pos:column="21"/></literal><operator pos:line="13" pos:column="21">)<pos:position pos:line="13" pos:column="22"/></operator> <operator pos:line="13" pos:column="23">&amp;&amp;<pos:position pos:line="13" pos:column="33"/></operator> <operator pos:line="13" pos:column="26">(<pos:position pos:line="13" pos:column="27"/></operator><name pos:line="13" pos:column="27">errno<pos:position pos:line="13" pos:column="32"/></name> <operator pos:line="13" pos:column="33">==<pos:position pos:line="13" pos:column="35"/></operator> <name pos:line="13" pos:column="36">EAGAIN<pos:position pos:line="13" pos:column="42"/></name> <operator pos:line="13" pos:column="43">||<pos:position pos:line="13" pos:column="45"/></operator> <name pos:line="13" pos:column="46">errno<pos:position pos:line="13" pos:column="51"/></name> <operator pos:line="13" pos:column="52">==<pos:position pos:line="13" pos:column="54"/></operator> <name pos:line="13" pos:column="55">EWOULDBLOCK<pos:position pos:line="13" pos:column="66"/></name><operator pos:line="13" pos:column="66">)<pos:position pos:line="13" pos:column="67"/></operator>
                      <operator pos:line="14" pos:column="23">&amp;&amp;<pos:position pos:line="14" pos:column="33"/></operator> <operator pos:line="14" pos:column="26">(<pos:position pos:line="14" pos:column="27"/></operator><name><name pos:line="14" pos:column="27">sock<pos:position pos:line="14" pos:column="31"/></name><operator pos:line="14" pos:column="31">-&gt;<pos:position pos:line="14" pos:column="36"/></operator><name pos:line="14" pos:column="33">timeout<pos:position pos:line="14" pos:column="40"/></name></name> <operator pos:line="14" pos:column="41">&gt;<pos:position pos:line="14" pos:column="45"/></operator> <literal type="number" pos:line="14" pos:column="43">0<pos:position pos:line="14" pos:column="44"/></literal><operator pos:line="14" pos:column="44">)<pos:position pos:line="14" pos:column="45"/></operator></expr>)<pos:position pos:line="14" pos:column="46"/></condition> <block pos:line="14" pos:column="47">{
        <decl_stmt><decl><type><name pos:line="15" pos:column="9">apr_status_t<pos:position pos:line="15" pos:column="21"/></name></type> <name pos:line="15" pos:column="22">arv<pos:position pos:line="15" pos:column="25"/></name> <init pos:line="15" pos:column="26">= <expr><call><name pos:line="15" pos:column="28">apr_wait_for_io_or_timeout<pos:position pos:line="15" pos:column="54"/></name><argument_list pos:line="15" pos:column="54">(<argument><expr><name pos:line="15" pos:column="55">NULL<pos:position pos:line="15" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="61">sock<pos:position pos:line="15" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="15" pos:column="67">0<pos:position pos:line="15" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="15" pos:column="70"/></decl_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">arv<pos:position pos:line="16" pos:column="16"/></name> <operator pos:line="16" pos:column="17">!=<pos:position pos:line="16" pos:column="19"/></operator> <name pos:line="16" pos:column="20">APR_SUCCESS<pos:position pos:line="16" pos:column="31"/></name></expr>)<pos:position pos:line="16" pos:column="32"/></condition><then pos:line="16" pos:column="32"> <block pos:line="16" pos:column="33">{
            <expr_stmt><expr><operator pos:line="17" pos:column="13">*<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">len<pos:position pos:line="17" pos:column="17"/></name> <operator pos:line="17" pos:column="18">=<pos:position pos:line="17" pos:column="19"/></operator> <literal type="number" pos:line="17" pos:column="20">0<pos:position pos:line="17" pos:column="21"/></literal></expr>;<pos:position pos:line="17" pos:column="22"/></expr_stmt>
            <return pos:line="18" pos:column="13">return <expr><name pos:line="18" pos:column="20">arv<pos:position pos:line="18" pos:column="23"/></name></expr>;<pos:position pos:line="18" pos:column="24"/></return>
        }<pos:position pos:line="19" pos:column="10"/></block></then> <else pos:line="19" pos:column="11">else <block pos:line="19" pos:column="16">{
            <do pos:line="20" pos:column="13">do <block pos:line="20" pos:column="16">{
                <expr_stmt><expr><name pos:line="21" pos:column="17">rv<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <call><name pos:line="21" pos:column="22">sendto<pos:position pos:line="21" pos:column="28"/></name><argument_list pos:line="21" pos:column="28">(<argument><expr><name><name pos:line="21" pos:column="29">sock<pos:position pos:line="21" pos:column="33"/></name><operator pos:line="21" pos:column="33">-&gt;<pos:position pos:line="21" pos:column="38"/></operator><name pos:line="21" pos:column="35">socketdes<pos:position pos:line="21" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="46">buf<pos:position pos:line="21" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="21" pos:column="51">(<pos:position pos:line="21" pos:column="52"/></operator><operator pos:line="21" pos:column="52">*<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="53">len<pos:position pos:line="21" pos:column="56"/></name><operator pos:line="21" pos:column="56">)<pos:position pos:line="21" pos:column="57"/></operator></expr></argument>, <argument><expr><name pos:line="21" pos:column="59">flags<pos:position pos:line="21" pos:column="64"/></name></expr></argument>,
                            <argument><expr><operator pos:line="22" pos:column="29">(<pos:position pos:line="22" pos:column="30"/></operator><specifier pos:line="22" pos:column="30">const<pos:position pos:line="22" pos:column="35"/></specifier> struct <name pos:line="22" pos:column="43">sockaddr<pos:position pos:line="22" pos:column="51"/></name><operator pos:line="22" pos:column="51">*<pos:position pos:line="22" pos:column="52"/></operator><operator pos:line="22" pos:column="52">)<pos:position pos:line="22" pos:column="53"/></operator><operator pos:line="22" pos:column="53">&amp;<pos:position pos:line="22" pos:column="58"/></operator><name><name pos:line="22" pos:column="54">where<pos:position pos:line="22" pos:column="59"/></name><operator pos:line="22" pos:column="59">-&gt;<pos:position pos:line="22" pos:column="64"/></operator><name pos:line="22" pos:column="61">sa<pos:position pos:line="22" pos:column="63"/></name></name></expr></argument>,
                            <argument><expr><name><name pos:line="23" pos:column="29">where<pos:position pos:line="23" pos:column="34"/></name><operator pos:line="23" pos:column="34">-&gt;<pos:position pos:line="23" pos:column="39"/></operator><name pos:line="23" pos:column="36">salen<pos:position pos:line="23" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="24" pos:column="14"/></block> while <condition pos:line="24" pos:column="21">(<expr><name pos:line="24" pos:column="22">rv<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">==<pos:position pos:line="24" pos:column="27"/></operator> <operator pos:line="24" pos:column="28">-<pos:position pos:line="24" pos:column="29"/></operator><literal type="number" pos:line="24" pos:column="29">1<pos:position pos:line="24" pos:column="30"/></literal> <operator pos:line="24" pos:column="31">&amp;&amp;<pos:position pos:line="24" pos:column="41"/></operator> <name pos:line="24" pos:column="34">errno<pos:position pos:line="24" pos:column="39"/></name> <operator pos:line="24" pos:column="40">==<pos:position pos:line="24" pos:column="42"/></operator> <name pos:line="24" pos:column="43">EINTR<pos:position pos:line="24" pos:column="48"/></name></expr>)<pos:position pos:line="24" pos:column="49"/></condition>;<pos:position pos:line="24" pos:column="50"/></do>
        }<pos:position pos:line="25" pos:column="10"/></block></else></if>
    }<pos:position pos:line="26" pos:column="6"/></block></while>
    <if pos:line="27" pos:column="5">if <condition pos:line="27" pos:column="8">(<expr><name pos:line="27" pos:column="9">rv<pos:position pos:line="27" pos:column="11"/></name> <operator pos:line="27" pos:column="12">==<pos:position pos:line="27" pos:column="14"/></operator> <operator pos:line="27" pos:column="15">-<pos:position pos:line="27" pos:column="16"/></operator><literal type="number" pos:line="27" pos:column="16">1<pos:position pos:line="27" pos:column="17"/></literal></expr>)<pos:position pos:line="27" pos:column="18"/></condition><then pos:line="27" pos:column="18"> <block pos:line="27" pos:column="19">{
        <expr_stmt><expr><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">len<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <literal type="number" pos:line="28" pos:column="16">0<pos:position pos:line="28" pos:column="17"/></literal></expr>;<pos:position pos:line="28" pos:column="18"/></expr_stmt>
        <return pos:line="29" pos:column="9">return <expr><name pos:line="29" pos:column="16">errno<pos:position pos:line="29" pos:column="21"/></name></expr>;<pos:position pos:line="29" pos:column="22"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="31" pos:column="5">*<pos:position pos:line="31" pos:column="6"/></operator><name pos:line="31" pos:column="6">len<pos:position pos:line="31" pos:column="9"/></name> <operator pos:line="31" pos:column="10">=<pos:position pos:line="31" pos:column="11"/></operator> <name pos:line="31" pos:column="12">rv<pos:position pos:line="31" pos:column="14"/></name></expr>;<pos:position pos:line="31" pos:column="15"/></expr_stmt>
    <return pos:line="32" pos:column="5">return <expr><name pos:line="32" pos:column="12">APR_SUCCESS<pos:position pos:line="32" pos:column="23"/></name></expr>;<pos:position pos:line="32" pos:column="24"/></return>
}<pos:position pos:line="33" pos:column="2"/></block></function></unit>
