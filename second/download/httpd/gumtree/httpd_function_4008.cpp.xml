<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_4008.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">do_negotiation<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">request_rec<pos:position pos:line="1" pos:column="38"/></name> <modifier pos:line="1" pos:column="39">*<pos:position pos:line="1" pos:column="40"/></modifier></type><name pos:line="1" pos:column="40">r<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="43">negotiation_state<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">neg<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">var_rec<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier><modifier pos:line="2" pos:column="36">*<pos:position pos:line="2" pos:column="37"/></modifier></type><name pos:line="2" pos:column="37">bestp<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="44">int<pos:position pos:line="2" pos:column="47"/></name></type> <name pos:line="2" pos:column="48">prefer_scripts<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">var_rec<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">avail_recs<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><operator pos:line="4" pos:column="27">(<pos:position pos:line="4" pos:column="28"/></operator><name pos:line="4" pos:column="28">var_rec<pos:position pos:line="4" pos:column="35"/></name> <operator pos:line="4" pos:column="36">*<pos:position pos:line="4" pos:column="37"/></operator><operator pos:line="4" pos:column="37">)<pos:position pos:line="4" pos:column="38"/></operator> <name><name pos:line="4" pos:column="39">neg<pos:position pos:line="4" pos:column="42"/></name><operator pos:line="4" pos:column="42">-&gt;<pos:position pos:line="4" pos:column="47"/></operator><name pos:line="4" pos:column="44">avail_vars<pos:position pos:line="4" pos:column="54"/></name><operator pos:line="4" pos:column="54">-&gt;<pos:position pos:line="4" pos:column="59"/></operator><name pos:line="4" pos:column="56">elts<pos:position pos:line="4" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="61"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">alg_result<pos:position pos:line="5" pos:column="19"/></name></decl>;<pos:position pos:line="5" pos:column="20"/></decl_stmt>              <comment type="block" pos:line="5" pos:column="34">/* result of variant selection algorithm */</comment>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">res<pos:position pos:line="6" pos:column="12"/></name></decl>;<pos:position pos:line="6" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">j<pos:position pos:line="7" pos:column="10"/></name></decl>;<pos:position pos:line="7" pos:column="11"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* Decide if resource is transparently negotiable */</comment>

    <comment type="block" pos:line="11" pos:column="5">/* GET or HEAD? (HEAD has same method number as GET) */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">r<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">method_number<pos:position pos:line="12" pos:column="25"/></name></name> <operator pos:line="12" pos:column="26">==<pos:position pos:line="12" pos:column="28"/></operator> <name pos:line="12" pos:column="29">M_GET<pos:position pos:line="12" pos:column="34"/></name></expr>)<pos:position pos:line="12" pos:column="35"/></condition><then pos:line="12" pos:column="35"> <block pos:line="12" pos:column="36">{

        <comment type="block" pos:line="14" pos:column="9">/* maybe this should be configurable, see also the comment
         * about recursive type maps in setup_choice_response()
         */</comment>
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">neg<pos:position pos:line="17" pos:column="12"/></name><operator pos:line="17" pos:column="12">-&gt;<pos:position pos:line="17" pos:column="17"/></operator><name pos:line="17" pos:column="14">is_transparent<pos:position pos:line="17" pos:column="28"/></name></name> <operator pos:line="17" pos:column="29">=<pos:position pos:line="17" pos:column="30"/></operator> <literal type="number" pos:line="17" pos:column="31">1<pos:position pos:line="17" pos:column="32"/></literal></expr>;<pos:position pos:line="17" pos:column="33"/></expr_stmt>

        <comment type="block" pos:line="19" pos:column="9">/* We can't be transparent if we are a map file in the middle
         * of the request URI.
         */</comment>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><name><name pos:line="22" pos:column="13">r<pos:position pos:line="22" pos:column="14"/></name><operator pos:line="22" pos:column="14">-&gt;<pos:position pos:line="22" pos:column="19"/></operator><name pos:line="22" pos:column="16">path_info<pos:position pos:line="22" pos:column="25"/></name></name> <operator pos:line="22" pos:column="26">&amp;&amp;<pos:position pos:line="22" pos:column="36"/></operator> <operator pos:line="22" pos:column="29">*<pos:position pos:line="22" pos:column="30"/></operator><name><name pos:line="22" pos:column="30">r<pos:position pos:line="22" pos:column="31"/></name><operator pos:line="22" pos:column="31">-&gt;<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="33">path_info<pos:position pos:line="22" pos:column="42"/></name></name></expr>)<pos:position pos:line="22" pos:column="43"/></condition><then pos:line="22" pos:column="43">
            <block type="pseudo"><expr_stmt><expr><name><name pos:line="23" pos:column="13">neg<pos:position pos:line="23" pos:column="16"/></name><operator pos:line="23" pos:column="16">-&gt;<pos:position pos:line="23" pos:column="21"/></operator><name pos:line="23" pos:column="18">is_transparent<pos:position pos:line="23" pos:column="32"/></name></name> <operator pos:line="23" pos:column="33">=<pos:position pos:line="23" pos:column="34"/></operator> <literal type="number" pos:line="23" pos:column="35">0<pos:position pos:line="23" pos:column="36"/></literal></expr>;<pos:position pos:line="23" pos:column="37"/></expr_stmt></block></then></if>

        <for pos:line="25" pos:column="9">for <control pos:line="25" pos:column="13">(<init><expr><name pos:line="25" pos:column="14">j<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">=<pos:position pos:line="25" pos:column="17"/></operator> <literal type="number" pos:line="25" pos:column="18">0<pos:position pos:line="25" pos:column="19"/></literal></expr>;<pos:position pos:line="25" pos:column="20"/></init> <condition><expr><name pos:line="25" pos:column="21">j<pos:position pos:line="25" pos:column="22"/></name> <operator pos:line="25" pos:column="23">&lt;<pos:position pos:line="25" pos:column="27"/></operator> <name><name pos:line="25" pos:column="25">neg<pos:position pos:line="25" pos:column="28"/></name><operator pos:line="25" pos:column="28">-&gt;<pos:position pos:line="25" pos:column="33"/></operator><name pos:line="25" pos:column="30">avail_vars<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">-&gt;<pos:position pos:line="25" pos:column="45"/></operator><name pos:line="25" pos:column="42">nelts<pos:position pos:line="25" pos:column="47"/></name></name></expr>;<pos:position pos:line="25" pos:column="48"/></condition> <incr><expr><operator pos:line="25" pos:column="49">++<pos:position pos:line="25" pos:column="51"/></operator><name pos:line="25" pos:column="51">j<pos:position pos:line="25" pos:column="52"/></name></expr></incr>)<pos:position pos:line="25" pos:column="53"/></control> <block pos:line="25" pos:column="54">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">var_rec<pos:position pos:line="26" pos:column="20"/></name> <modifier pos:line="26" pos:column="21">*<pos:position pos:line="26" pos:column="22"/></modifier></type><name pos:line="26" pos:column="22">variant<pos:position pos:line="26" pos:column="29"/></name> <init pos:line="26" pos:column="30">= <expr><operator pos:line="26" pos:column="32">&amp;<pos:position pos:line="26" pos:column="37"/></operator><name><name pos:line="26" pos:column="33">avail_recs<pos:position pos:line="26" pos:column="43"/></name><index pos:line="26" pos:column="43">[<expr><name pos:line="26" pos:column="44">j<pos:position pos:line="26" pos:column="45"/></name></expr>]<pos:position pos:line="26" pos:column="46"/></index></name></expr></init></decl>;<pos:position pos:line="26" pos:column="47"/></decl_stmt>

            <comment type="block" pos:line="28" pos:column="13">/* We can't be transparent, because of internal
             * assumptions in best_match(), if there is a
             * non-neighboring variant.  We can have a non-neighboring
             * variant when processing a type map.
             */</comment>
            <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><call><name pos:line="33" pos:column="17">ap_strchr_c<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name><name pos:line="33" pos:column="29">variant<pos:position pos:line="33" pos:column="36"/></name><operator pos:line="33" pos:column="36">-&gt;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="38">file_name<pos:position pos:line="33" pos:column="47"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="33" pos:column="49">'/'<pos:position pos:line="33" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="54"/></condition><then pos:line="33" pos:column="54">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="34" pos:column="17">neg<pos:position pos:line="34" pos:column="20"/></name><operator pos:line="34" pos:column="20">-&gt;<pos:position pos:line="34" pos:column="25"/></operator><name pos:line="34" pos:column="22">is_transparent<pos:position pos:line="34" pos:column="36"/></name></name> <operator pos:line="34" pos:column="37">=<pos:position pos:line="34" pos:column="38"/></operator> <literal type="number" pos:line="34" pos:column="39">0<pos:position pos:line="34" pos:column="40"/></literal></expr>;<pos:position pos:line="34" pos:column="41"/></expr_stmt></block></then></if>

            <comment type="block" pos:line="36" pos:column="13">/* We can't be transparent, because of the behavior
             * of variant typemap bodies.
             */</comment>
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name><name pos:line="39" pos:column="17">variant<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">-&gt;<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="26">body<pos:position pos:line="39" pos:column="30"/></name></name></expr>)<pos:position pos:line="39" pos:column="31"/></condition><then pos:line="39" pos:column="31"> <block pos:line="39" pos:column="32">{
                <expr_stmt><expr><name><name pos:line="40" pos:column="17">neg<pos:position pos:line="40" pos:column="20"/></name><operator pos:line="40" pos:column="20">-&gt;<pos:position pos:line="40" pos:column="25"/></operator><name pos:line="40" pos:column="22">is_transparent<pos:position pos:line="40" pos:column="36"/></name></name> <operator pos:line="40" pos:column="37">=<pos:position pos:line="40" pos:column="38"/></operator> <literal type="number" pos:line="40" pos:column="39">0<pos:position pos:line="40" pos:column="40"/></literal></expr>;<pos:position pos:line="40" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="41" pos:column="14"/></block></then></if>
        }<pos:position pos:line="42" pos:column="10"/></block></for>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name><name pos:line="45" pos:column="9">neg<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">-&gt;<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="14">is_transparent<pos:position pos:line="45" pos:column="28"/></name></name></expr>)<pos:position pos:line="45" pos:column="29"/></condition><then pos:line="45" pos:column="29">  <block pos:line="45" pos:column="31">{
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">parse_negotiate_header<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name pos:line="46" pos:column="32">r<pos:position pos:line="46" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="35">neg<pos:position pos:line="46" pos:column="38"/></name></expr></argument>)<pos:position pos:line="46" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></then>
    <else pos:line="48" pos:column="5">else <block pos:line="48" pos:column="10">{ <comment type="block" pos:line="48" pos:column="12">/* configure negotiation on non-transparent resource */</comment>
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">neg<pos:position pos:line="49" pos:column="12"/></name><operator pos:line="49" pos:column="12">-&gt;<pos:position pos:line="49" pos:column="17"/></operator><name pos:line="49" pos:column="14">may_choose<pos:position pos:line="49" pos:column="24"/></name></name> <operator pos:line="49" pos:column="25">=<pos:position pos:line="49" pos:column="26"/></operator> <literal type="number" pos:line="49" pos:column="27">1<pos:position pos:line="49" pos:column="28"/></literal></expr>;<pos:position pos:line="49" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="50" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="52" pos:column="5">maybe_add_default_accepts<pos:position pos:line="52" pos:column="30"/></name><argument_list pos:line="52" pos:column="30">(<argument><expr><name pos:line="52" pos:column="31">neg<pos:position pos:line="52" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="36">prefer_scripts<pos:position pos:line="52" pos:column="50"/></name></expr></argument>)<pos:position pos:line="52" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="52"/></expr_stmt>

    <expr_stmt><expr><name pos:line="54" pos:column="5">alg_result<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <call><name pos:line="54" pos:column="18">best_match<pos:position pos:line="54" pos:column="28"/></name><argument_list pos:line="54" pos:column="28">(<argument><expr><name pos:line="54" pos:column="29">neg<pos:position pos:line="54" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="34">bestp<pos:position pos:line="54" pos:column="39"/></name></expr></argument>)<pos:position pos:line="54" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="41"/></expr_stmt>

    <comment type="block" pos:line="56" pos:column="5">/* alg_result is one of
     *   alg_choice: a best variant is chosen
     *   alg_list: no best variant is chosen
     */</comment>

    <if pos:line="61" pos:column="5">if <condition pos:line="61" pos:column="8">(<expr><name pos:line="61" pos:column="9">alg_result<pos:position pos:line="61" pos:column="19"/></name> <operator pos:line="61" pos:column="20">==<pos:position pos:line="61" pos:column="22"/></operator> <name pos:line="61" pos:column="23">alg_list<pos:position pos:line="61" pos:column="31"/></name></expr>)<pos:position pos:line="61" pos:column="32"/></condition><then pos:line="61" pos:column="32"> <block pos:line="61" pos:column="33">{
        <comment type="block" pos:line="62" pos:column="9">/* send a list response or HTTP_NOT_ACCEPTABLE error response  */</comment>

        <expr_stmt><expr><name><name pos:line="64" pos:column="9">neg<pos:position pos:line="64" pos:column="12"/></name><operator pos:line="64" pos:column="12">-&gt;<pos:position pos:line="64" pos:column="17"/></operator><name pos:line="64" pos:column="14">send_alternates<pos:position pos:line="64" pos:column="29"/></name></name> <operator pos:line="64" pos:column="30">=<pos:position pos:line="64" pos:column="31"/></operator> <literal type="number" pos:line="64" pos:column="32">1<pos:position pos:line="64" pos:column="33"/></literal></expr>;<pos:position pos:line="64" pos:column="34"/></expr_stmt> <comment type="block" pos:line="64" pos:column="35">/* always include Alternates header */</comment>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">set_neg_headers<pos:position pos:line="65" pos:column="24"/></name><argument_list pos:line="65" pos:column="24">(<argument><expr><name pos:line="65" pos:column="25">r<pos:position pos:line="65" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="28">neg<pos:position pos:line="65" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="33">alg_result<pos:position pos:line="65" pos:column="43"/></name></expr></argument>)<pos:position pos:line="65" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="66" pos:column="9">store_variant_list<pos:position pos:line="66" pos:column="27"/></name><argument_list pos:line="66" pos:column="27">(<argument><expr><name pos:line="66" pos:column="28">r<pos:position pos:line="66" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="31">neg<pos:position pos:line="66" pos:column="34"/></name></expr></argument>)<pos:position pos:line="66" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="36"/></expr_stmt>

        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name><name pos:line="68" pos:column="13">neg<pos:position pos:line="68" pos:column="16"/></name><operator pos:line="68" pos:column="16">-&gt;<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="18">is_transparent<pos:position pos:line="68" pos:column="32"/></name></name> <operator pos:line="68" pos:column="33">&amp;&amp;<pos:position pos:line="68" pos:column="43"/></operator> <name><name pos:line="68" pos:column="36">neg<pos:position pos:line="68" pos:column="39"/></name><operator pos:line="68" pos:column="39">-&gt;<pos:position pos:line="68" pos:column="44"/></operator><name pos:line="68" pos:column="41">ua_supports_trans<pos:position pos:line="68" pos:column="58"/></name></name></expr>)<pos:position pos:line="68" pos:column="59"/></condition><then pos:line="68" pos:column="59"> <block pos:line="68" pos:column="60">{
            <comment type="block" pos:line="69" pos:column="13">/* XXX todo: expires? cachability? */</comment>

            <comment type="block" pos:line="71" pos:column="13">/* Some HTTP/1.0 clients are known to choke when they get
             * a 300 (multiple choices) response without a Location
             * header.  However the 300 code response we are are about
             * to generate will only reach 1.0 clients which support
             * transparent negotiation, and they should be OK. The
             * response should never reach older 1.0 clients, even if
             * we have CacheNegotiatedDocs enabled, because no 1.0
             * proxy cache (we know of) will cache and return 300
             * responses (they certainly won't if they conform to the
             * HTTP/1.0 specification).
             */</comment>
            <return pos:line="82" pos:column="13">return <expr><name pos:line="82" pos:column="20">HTTP_MULTIPLE_CHOICES<pos:position pos:line="82" pos:column="41"/></name></expr>;<pos:position pos:line="82" pos:column="42"/></return>
        }<pos:position pos:line="83" pos:column="10"/></block></then></if>

        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><operator pos:line="85" pos:column="13">!<pos:position pos:line="85" pos:column="14"/></operator><operator pos:line="85" pos:column="14">*<pos:position pos:line="85" pos:column="15"/></operator><name pos:line="85" pos:column="15">bestp<pos:position pos:line="85" pos:column="20"/></name></expr>)<pos:position pos:line="85" pos:column="21"/></condition><then pos:line="85" pos:column="21"> <block pos:line="85" pos:column="22">{
            <expr_stmt><expr><call><name pos:line="86" pos:column="13">ap_log_rerror<pos:position pos:line="86" pos:column="26"/></name><argument_list pos:line="86" pos:column="26">(<argument><expr><name pos:line="86" pos:column="27">APLOG_MARK<pos:position pos:line="86" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="86" pos:column="39">APLOG_ERR<pos:position pos:line="86" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="50">0<pos:position pos:line="86" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="53">r<pos:position pos:line="86" pos:column="54"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="87" pos:column="27">"no acceptable variant: %s"<pos:position pos:line="87" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="56">r<pos:position pos:line="87" pos:column="57"/></name><operator pos:line="87" pos:column="57">-&gt;<pos:position pos:line="87" pos:column="62"/></operator><name pos:line="87" pos:column="59">filename<pos:position pos:line="87" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="69"/></expr_stmt>
            <return pos:line="88" pos:column="13">return <expr><name pos:line="88" pos:column="20">HTTP_NOT_ACCEPTABLE<pos:position pos:line="88" pos:column="39"/></name></expr>;<pos:position pos:line="88" pos:column="40"/></return>
        }<pos:position pos:line="89" pos:column="10"/></block></then></if>
    }<pos:position pos:line="90" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="92" pos:column="5">/* Variant selection chose a variant */</comment>

    <comment type="block" pos:line="94" pos:column="5">/* XXX todo: merge the two cases in the if statement below */</comment>
    <if pos:line="95" pos:column="5">if <condition pos:line="95" pos:column="8">(<expr><name><name pos:line="95" pos:column="9">neg<pos:position pos:line="95" pos:column="12"/></name><operator pos:line="95" pos:column="12">-&gt;<pos:position pos:line="95" pos:column="17"/></operator><name pos:line="95" pos:column="14">is_transparent<pos:position pos:line="95" pos:column="28"/></name></name></expr>)<pos:position pos:line="95" pos:column="29"/></condition><then pos:line="95" pos:column="29"> <block pos:line="95" pos:column="30">{

        <if pos:line="97" pos:column="9">if <condition pos:line="97" pos:column="12">(<expr><operator pos:line="97" pos:column="13">(<pos:position pos:line="97" pos:column="14"/></operator><name pos:line="97" pos:column="14">res<pos:position pos:line="97" pos:column="17"/></name> <operator pos:line="97" pos:column="18">=<pos:position pos:line="97" pos:column="19"/></operator> <call><name pos:line="97" pos:column="20">setup_choice_response<pos:position pos:line="97" pos:column="41"/></name><argument_list pos:line="97" pos:column="41">(<argument><expr><name pos:line="97" pos:column="42">r<pos:position pos:line="97" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="45">neg<pos:position pos:line="97" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="97" pos:column="50">*<pos:position pos:line="97" pos:column="51"/></operator><name pos:line="97" pos:column="51">bestp<pos:position pos:line="97" pos:column="56"/></name></expr></argument>)<pos:position pos:line="97" pos:column="57"/></argument_list></call><operator pos:line="97" pos:column="57">)<pos:position pos:line="97" pos:column="58"/></operator> <operator pos:line="97" pos:column="59">!=<pos:position pos:line="97" pos:column="61"/></operator> <literal type="number" pos:line="97" pos:column="62">0<pos:position pos:line="97" pos:column="63"/></literal></expr>)<pos:position pos:line="97" pos:column="64"/></condition><then pos:line="97" pos:column="64"> <block pos:line="97" pos:column="65">{
            <return pos:line="98" pos:column="13">return <expr><name pos:line="98" pos:column="20">res<pos:position pos:line="98" pos:column="23"/></name></expr>;<pos:position pos:line="98" pos:column="24"/></return> <comment type="block" pos:line="98" pos:column="25">/* return if error */</comment>
        }<pos:position pos:line="99" pos:column="10"/></block></then></if>
    }<pos:position pos:line="100" pos:column="6"/></block></then>
    <else pos:line="101" pos:column="5">else <block pos:line="101" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="102" pos:column="9">set_neg_headers<pos:position pos:line="102" pos:column="24"/></name><argument_list pos:line="102" pos:column="24">(<argument><expr><name pos:line="102" pos:column="25">r<pos:position pos:line="102" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="28">neg<pos:position pos:line="102" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="102" pos:column="33">alg_result<pos:position pos:line="102" pos:column="43"/></name></expr></argument>)<pos:position pos:line="102" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="102" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="103" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="105" pos:column="5">/* Make sure caching works - Vary should handle HTTP/1.1, but for
     * HTTP/1.0, we can't allow caching at all.
     */</comment>

    <comment type="block" pos:line="109" pos:column="5">/* XXX: Note that we only set r-&gt;no_cache to 1, which causes
     * Expires: &lt;now&gt; to be added, when responding to a HTTP/1.0
     * client.  If we return the response to a 1.1 client, we do not
     * add Expires &lt;now&gt;, because doing so would degrade 1.1 cache
     * performance by preventing re-use of the response without prior
     * revalidation.  On the other hand, if the 1.1 client is a proxy
     * which was itself contacted by a 1.0 client, or a proxy cache
     * which can be contacted later by 1.0 clients, then we currently
     * rely on this 1.1 proxy to add the Expires: &lt;now&gt; when it
     * forwards the response.
     *
     * XXX: TODO: Find out if the 1.1 spec requires proxies and
     * tunnels to add Expires: &lt;now&gt; when forwarding the response to
     * 1.0 clients.  I (kh) recall it is rather vague on this point.
     * Testing actual 1.1 proxy implementations would also be nice. If
     * Expires: &lt;now&gt; is not added by proxies then we need to always
     * include Expires: &lt;now&gt; ourselves to ensure correct caching, but
     * this would degrade HTTP/1.1 cache efficiency unless we also add
     * Cache-Control: max-age=N, which we currently don't.
     *
     * Roy: No, we are not going to screw over HTTP future just to
     *      ensure that people who can't be bothered to upgrade their
     *      clients will always receive perfect server-side negotiation.
     *      Hell, those clients are sending bogus accept headers anyway.
     *
     *      Manual setting of cache-control/expires always overrides this
     *      automated kluge, on purpose.
     */</comment>

    <if pos:line="138" pos:column="5">if <condition pos:line="138" pos:column="8">(<expr><operator pos:line="138" pos:column="9">(<pos:position pos:line="138" pos:column="10"/></operator><operator pos:line="138" pos:column="10">!<pos:position pos:line="138" pos:column="11"/></operator><call><name pos:line="138" pos:column="11">do_cache_negotiated_docs<pos:position pos:line="138" pos:column="35"/></name><argument_list pos:line="138" pos:column="35">(<argument><expr><name><name pos:line="138" pos:column="36">r<pos:position pos:line="138" pos:column="37"/></name><operator pos:line="138" pos:column="37">-&gt;<pos:position pos:line="138" pos:column="42"/></operator><name pos:line="138" pos:column="39">server<pos:position pos:line="138" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="138" pos:column="46"/></argument_list></call>
         <operator pos:line="139" pos:column="10">&amp;&amp;<pos:position pos:line="139" pos:column="20"/></operator> <operator pos:line="139" pos:column="13">(<pos:position pos:line="139" pos:column="14"/></operator><name><name pos:line="139" pos:column="14">r<pos:position pos:line="139" pos:column="15"/></name><operator pos:line="139" pos:column="15">-&gt;<pos:position pos:line="139" pos:column="20"/></operator><name pos:line="139" pos:column="17">proto_num<pos:position pos:line="139" pos:column="26"/></name></name> <operator pos:line="139" pos:column="27">&lt;<pos:position pos:line="139" pos:column="31"/></operator> <call><name pos:line="139" pos:column="29">HTTP_VERSION<pos:position pos:line="139" pos:column="41"/></name><argument_list pos:line="139" pos:column="41">(<argument><expr><literal type="number" pos:line="139" pos:column="42">1<pos:position pos:line="139" pos:column="43"/></literal></expr></argument>,<argument><expr><literal type="number" pos:line="139" pos:column="44">1<pos:position pos:line="139" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="139" pos:column="46"/></argument_list></call><operator pos:line="139" pos:column="46">)<pos:position pos:line="139" pos:column="47"/></operator><operator pos:line="139" pos:column="47">)<pos:position pos:line="139" pos:column="48"/></operator>
         <operator pos:line="140" pos:column="10">&amp;&amp;<pos:position pos:line="140" pos:column="20"/></operator> <name><name pos:line="140" pos:column="13">neg<pos:position pos:line="140" pos:column="16"/></name><operator pos:line="140" pos:column="16">-&gt;<pos:position pos:line="140" pos:column="21"/></operator><name pos:line="140" pos:column="18">count_multiviews_variants<pos:position pos:line="140" pos:column="43"/></name></name> <operator pos:line="140" pos:column="44">!=<pos:position pos:line="140" pos:column="46"/></operator> <literal type="number" pos:line="140" pos:column="47">1<pos:position pos:line="140" pos:column="48"/></literal></expr>)<pos:position pos:line="140" pos:column="49"/></condition><then pos:line="140" pos:column="49"> <block pos:line="140" pos:column="50">{
        <expr_stmt><expr><name><name pos:line="141" pos:column="9">r<pos:position pos:line="141" pos:column="10"/></name><operator pos:line="141" pos:column="10">-&gt;<pos:position pos:line="141" pos:column="15"/></operator><name pos:line="141" pos:column="12">no_cache<pos:position pos:line="141" pos:column="20"/></name></name> <operator pos:line="141" pos:column="21">=<pos:position pos:line="141" pos:column="22"/></operator> <literal type="number" pos:line="141" pos:column="23">1<pos:position pos:line="141" pos:column="24"/></literal></expr>;<pos:position pos:line="141" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="142" pos:column="6"/></block></then></if>

    <return pos:line="144" pos:column="5">return <expr><name pos:line="144" pos:column="12">OK<pos:position pos:line="144" pos:column="14"/></name></expr>;<pos:position pos:line="144" pos:column="15"/></return>
}<pos:position pos:line="145" pos:column="2"/></block></function></unit>
