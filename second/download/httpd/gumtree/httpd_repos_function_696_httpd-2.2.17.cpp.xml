<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_696_httpd-2.2.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">bio_filter_in_read<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">BIO<pos:position pos:line="1" pos:column="34"/></name> <modifier pos:line="1" pos:column="35">*<pos:position pos:line="1" pos:column="36"/></modifier></type><name pos:line="1" pos:column="36">bio<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">char<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">in<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">int<pos:position pos:line="1" pos:column="54"/></name></type> <name pos:line="1" pos:column="55">inlen<pos:position pos:line="1" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="61"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_size_t<pos:position pos:line="3" pos:column="15"/></name></type> <name pos:line="3" pos:column="16">inl<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><name pos:line="3" pos:column="22">inlen<pos:position pos:line="3" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">bio_filter_in_ctx_t<pos:position pos:line="4" pos:column="24"/></name> <modifier pos:line="4" pos:column="25">*<pos:position pos:line="4" pos:column="26"/></modifier></type><name pos:line="4" pos:column="26">inctx<pos:position pos:line="4" pos:column="31"/></name> <init pos:line="4" pos:column="32">= <expr><operator pos:line="4" pos:column="34">(<pos:position pos:line="4" pos:column="35"/></operator><name pos:line="4" pos:column="35">bio_filter_in_ctx_t<pos:position pos:line="4" pos:column="54"/></name> <operator pos:line="4" pos:column="55">*<pos:position pos:line="4" pos:column="56"/></operator><operator pos:line="4" pos:column="56">)<pos:position pos:line="4" pos:column="57"/></operator><operator pos:line="4" pos:column="57">(<pos:position pos:line="4" pos:column="58"/></operator><name><name pos:line="4" pos:column="58">bio<pos:position pos:line="4" pos:column="61"/></name><operator pos:line="4" pos:column="61">-&gt;<pos:position pos:line="4" pos:column="66"/></operator><name pos:line="4" pos:column="63">ptr<pos:position pos:line="4" pos:column="66"/></name></name><operator pos:line="4" pos:column="66">)<pos:position pos:line="4" pos:column="67"/></operator></expr></init></decl>;<pos:position pos:line="4" pos:column="68"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_read_type_e<pos:position pos:line="5" pos:column="20"/></name></type> <name pos:line="5" pos:column="21">block<pos:position pos:line="5" pos:column="26"/></name> <init pos:line="5" pos:column="27">= <expr><name><name pos:line="5" pos:column="29">inctx<pos:position pos:line="5" pos:column="34"/></name><operator pos:line="5" pos:column="34">-&gt;<pos:position pos:line="5" pos:column="39"/></operator><name pos:line="5" pos:column="36">block<pos:position pos:line="5" pos:column="41"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="42"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="7" pos:column="5">inctx<pos:position pos:line="7" pos:column="10"/></name><operator pos:line="7" pos:column="10">-&gt;<pos:position pos:line="7" pos:column="15"/></operator><name pos:line="7" pos:column="12">rc<pos:position pos:line="7" pos:column="14"/></name></name> <operator pos:line="7" pos:column="15">=<pos:position pos:line="7" pos:column="16"/></operator> <name pos:line="7" pos:column="17">APR_SUCCESS<pos:position pos:line="7" pos:column="28"/></name></expr>;<pos:position pos:line="7" pos:column="29"/></expr_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* OpenSSL catches this case, so should we. */</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><operator pos:line="10" pos:column="9">!<pos:position pos:line="10" pos:column="10"/></operator><name pos:line="10" pos:column="10">in<pos:position pos:line="10" pos:column="12"/></name></expr>)<pos:position pos:line="10" pos:column="13"/></condition><then pos:line="10" pos:column="13">
        <block type="pseudo"><return pos:line="11" pos:column="9">return <expr><literal type="number" pos:line="11" pos:column="16">0<pos:position pos:line="11" pos:column="17"/></literal></expr>;<pos:position pos:line="11" pos:column="18"/></return></block></then></if>

    <comment type="block" pos:line="13" pos:column="5">/* Abort early if the client has initiated a renegotiation. */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">inctx<pos:position pos:line="14" pos:column="14"/></name><operator pos:line="14" pos:column="14">-&gt;<pos:position pos:line="14" pos:column="19"/></operator><name pos:line="14" pos:column="16">filter_ctx<pos:position pos:line="14" pos:column="26"/></name><operator pos:line="14" pos:column="26">-&gt;<pos:position pos:line="14" pos:column="31"/></operator><name pos:line="14" pos:column="28">config<pos:position pos:line="14" pos:column="34"/></name><operator pos:line="14" pos:column="34">-&gt;<pos:position pos:line="14" pos:column="39"/></operator><name pos:line="14" pos:column="36">reneg_state<pos:position pos:line="14" pos:column="47"/></name></name> <operator pos:line="14" pos:column="48">==<pos:position pos:line="14" pos:column="50"/></operator> <name pos:line="14" pos:column="51">RENEG_ABORT<pos:position pos:line="14" pos:column="62"/></name></expr>)<pos:position pos:line="14" pos:column="63"/></condition><then pos:line="14" pos:column="63"> <block pos:line="14" pos:column="64">{
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">inctx<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">rc<pos:position pos:line="15" pos:column="18"/></name></name> <operator pos:line="15" pos:column="19">=<pos:position pos:line="15" pos:column="20"/></operator> <name pos:line="15" pos:column="21">APR_ECONNABORTED<pos:position pos:line="15" pos:column="37"/></name></expr>;<pos:position pos:line="15" pos:column="38"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><operator pos:line="16" pos:column="16">-<pos:position pos:line="16" pos:column="17"/></operator><literal type="number" pos:line="16" pos:column="17">1<pos:position pos:line="16" pos:column="18"/></literal></expr>;<pos:position pos:line="16" pos:column="19"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="19" pos:column="5">/* In theory, OpenSSL should flush as necessary, but it is known
     * not to do so correctly in some cases; see PR 46952.
     *
     * Historically, this flush call was performed only for an SSLv2
     * connection or for a proxy connection.  Calling _out_flush
     * should be very cheap in cases where it is unnecessary (and no
     * output is buffered) so the performance impact of doing it
     * unconditionally should be minimal.
     */</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><call><name pos:line="28" pos:column="9">bio_filter_out_flush<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name><name pos:line="28" pos:column="30">inctx<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">-&gt;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="37">bio_out<pos:position pos:line="28" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></call> <operator pos:line="28" pos:column="46">&lt;<pos:position pos:line="28" pos:column="50"/></operator> <literal type="number" pos:line="28" pos:column="48">0<pos:position pos:line="28" pos:column="49"/></literal></expr>)<pos:position pos:line="28" pos:column="50"/></condition><then pos:line="28" pos:column="50"> <block pos:line="28" pos:column="51">{
        <decl_stmt><decl><type><name pos:line="29" pos:column="9">bio_filter_out_ctx_t<pos:position pos:line="29" pos:column="29"/></name> <modifier pos:line="29" pos:column="30">*<pos:position pos:line="29" pos:column="31"/></modifier></type><name pos:line="29" pos:column="31">outctx<pos:position pos:line="29" pos:column="37"/></name> <init pos:line="29" pos:column="38">= <expr><name><name pos:line="29" pos:column="40">inctx<pos:position pos:line="29" pos:column="45"/></name><operator pos:line="29" pos:column="45">-&gt;<pos:position pos:line="29" pos:column="50"/></operator><name pos:line="29" pos:column="47">bio_out<pos:position pos:line="29" pos:column="54"/></name><operator pos:line="29" pos:column="54">-&gt;<pos:position pos:line="29" pos:column="59"/></operator><name pos:line="29" pos:column="56">ptr<pos:position pos:line="29" pos:column="59"/></name></name></expr></init></decl>;<pos:position pos:line="29" pos:column="60"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">inctx<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">-&gt;<pos:position pos:line="30" pos:column="19"/></operator><name pos:line="30" pos:column="16">rc<pos:position pos:line="30" pos:column="18"/></name></name> <operator pos:line="30" pos:column="19">=<pos:position pos:line="30" pos:column="20"/></operator> <name><name pos:line="30" pos:column="21">outctx<pos:position pos:line="30" pos:column="27"/></name><operator pos:line="30" pos:column="27">-&gt;<pos:position pos:line="30" pos:column="32"/></operator><name pos:line="30" pos:column="29">rc<pos:position pos:line="30" pos:column="31"/></name></name></expr>;<pos:position pos:line="30" pos:column="32"/></expr_stmt>
        <return pos:line="31" pos:column="9">return <expr><operator pos:line="31" pos:column="16">-<pos:position pos:line="31" pos:column="17"/></operator><literal type="number" pos:line="31" pos:column="17">1<pos:position pos:line="31" pos:column="18"/></literal></expr>;<pos:position pos:line="31" pos:column="19"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="34" pos:column="5">BIO_clear_retry_flags<pos:position pos:line="34" pos:column="26"/></name><argument_list pos:line="34" pos:column="26">(<argument><expr><name pos:line="34" pos:column="27">bio<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>

    <if pos:line="36" pos:column="5">if <condition pos:line="36" pos:column="8">(<expr><operator pos:line="36" pos:column="9">!<pos:position pos:line="36" pos:column="10"/></operator><name><name pos:line="36" pos:column="10">inctx<pos:position pos:line="36" pos:column="15"/></name><operator pos:line="36" pos:column="15">-&gt;<pos:position pos:line="36" pos:column="20"/></operator><name pos:line="36" pos:column="17">bb<pos:position pos:line="36" pos:column="19"/></name></name></expr>)<pos:position pos:line="36" pos:column="20"/></condition><then pos:line="36" pos:column="20"> <block pos:line="36" pos:column="21">{
        <expr_stmt><expr><name><name pos:line="37" pos:column="9">inctx<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">-&gt;<pos:position pos:line="37" pos:column="19"/></operator><name pos:line="37" pos:column="16">rc<pos:position pos:line="37" pos:column="18"/></name></name> <operator pos:line="37" pos:column="19">=<pos:position pos:line="37" pos:column="20"/></operator> <name pos:line="37" pos:column="21">APR_EOF<pos:position pos:line="37" pos:column="28"/></name></expr>;<pos:position pos:line="37" pos:column="29"/></expr_stmt>
        <return pos:line="38" pos:column="9">return <expr><operator pos:line="38" pos:column="16">-<pos:position pos:line="38" pos:column="17"/></operator><literal type="number" pos:line="38" pos:column="17">1<pos:position pos:line="38" pos:column="18"/></literal></expr>;<pos:position pos:line="38" pos:column="19"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><call><name pos:line="41" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><name><name pos:line="41" pos:column="27">inctx<pos:position pos:line="41" pos:column="32"/></name><operator pos:line="41" pos:column="32">-&gt;<pos:position pos:line="41" pos:column="37"/></operator><name pos:line="41" pos:column="34">bb<pos:position pos:line="41" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="38"/></condition><then pos:line="41" pos:column="38"> <block pos:line="41" pos:column="39">{

        <expr_stmt><expr><name><name pos:line="43" pos:column="9">inctx<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">-&gt;<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="16">rc<pos:position pos:line="43" pos:column="18"/></name></name> <operator pos:line="43" pos:column="19">=<pos:position pos:line="43" pos:column="20"/></operator> <call><name pos:line="43" pos:column="21">ap_get_brigade<pos:position pos:line="43" pos:column="35"/></name><argument_list pos:line="43" pos:column="35">(<argument><expr><name><name pos:line="43" pos:column="36">inctx<pos:position pos:line="43" pos:column="41"/></name><operator pos:line="43" pos:column="41">-&gt;<pos:position pos:line="43" pos:column="46"/></operator><name pos:line="43" pos:column="43">f<pos:position pos:line="43" pos:column="44"/></name><operator pos:line="43" pos:column="44">-&gt;<pos:position pos:line="43" pos:column="49"/></operator><name pos:line="43" pos:column="46">next<pos:position pos:line="43" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="52">inctx<pos:position pos:line="43" pos:column="57"/></name><operator pos:line="43" pos:column="57">-&gt;<pos:position pos:line="43" pos:column="62"/></operator><name pos:line="43" pos:column="59">bb<pos:position pos:line="43" pos:column="61"/></name></name></expr></argument>,
                                   <argument><expr><name pos:line="44" pos:column="36">AP_MODE_READBYTES<pos:position pos:line="44" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="55">block<pos:position pos:line="44" pos:column="60"/></name></expr></argument>,
                                   <argument><expr><name pos:line="45" pos:column="36">inl<pos:position pos:line="45" pos:column="39"/></name></expr></argument>)<pos:position pos:line="45" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="41"/></expr_stmt>

        <comment type="block" pos:line="47" pos:column="9">/* If the read returns EAGAIN or success with an empty
         * brigade, return an error after setting the retry flag;
         * SSL_read() will then return -1, and SSL_get_error() will
         * indicate SSL_ERROR_WANT_READ. */</comment>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><call><name pos:line="51" pos:column="13">APR_STATUS_IS_EAGAIN<pos:position pos:line="51" pos:column="33"/></name><argument_list pos:line="51" pos:column="33">(<argument><expr><name><name pos:line="51" pos:column="34">inctx<pos:position pos:line="51" pos:column="39"/></name><operator pos:line="51" pos:column="39">-&gt;<pos:position pos:line="51" pos:column="44"/></operator><name pos:line="51" pos:column="41">rc<pos:position pos:line="51" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="44"/></argument_list></call> <operator pos:line="51" pos:column="45">||<pos:position pos:line="51" pos:column="47"/></operator> <call><name pos:line="51" pos:column="48">APR_STATUS_IS_EINTR<pos:position pos:line="51" pos:column="67"/></name><argument_list pos:line="51" pos:column="67">(<argument><expr><name><name pos:line="51" pos:column="68">inctx<pos:position pos:line="51" pos:column="73"/></name><operator pos:line="51" pos:column="73">-&gt;<pos:position pos:line="51" pos:column="78"/></operator><name pos:line="51" pos:column="75">rc<pos:position pos:line="51" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="78"/></argument_list></call>
               <operator pos:line="52" pos:column="16">||<pos:position pos:line="52" pos:column="18"/></operator> <operator pos:line="52" pos:column="19">(<pos:position pos:line="52" pos:column="20"/></operator><name><name pos:line="52" pos:column="20">inctx<pos:position pos:line="52" pos:column="25"/></name><operator pos:line="52" pos:column="25">-&gt;<pos:position pos:line="52" pos:column="30"/></operator><name pos:line="52" pos:column="27">rc<pos:position pos:line="52" pos:column="29"/></name></name> <operator pos:line="52" pos:column="30">==<pos:position pos:line="52" pos:column="32"/></operator> <name pos:line="52" pos:column="33">APR_SUCCESS<pos:position pos:line="52" pos:column="44"/></name> <operator pos:line="52" pos:column="45">&amp;&amp;<pos:position pos:line="52" pos:column="55"/></operator> <call><name pos:line="52" pos:column="48">APR_BRIGADE_EMPTY<pos:position pos:line="52" pos:column="65"/></name><argument_list pos:line="52" pos:column="65">(<argument><expr><name><name pos:line="52" pos:column="66">inctx<pos:position pos:line="52" pos:column="71"/></name><operator pos:line="52" pos:column="71">-&gt;<pos:position pos:line="52" pos:column="76"/></operator><name pos:line="52" pos:column="73">bb<pos:position pos:line="52" pos:column="75"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="76"/></argument_list></call><operator pos:line="52" pos:column="76">)<pos:position pos:line="52" pos:column="77"/></operator></expr>)<pos:position pos:line="52" pos:column="78"/></condition><then pos:line="52" pos:column="78"> <block pos:line="52" pos:column="79">{
            <expr_stmt><expr><call><name pos:line="53" pos:column="13">BIO_set_retry_read<pos:position pos:line="53" pos:column="31"/></name><argument_list pos:line="53" pos:column="31">(<argument><expr><name pos:line="53" pos:column="32">bio<pos:position pos:line="53" pos:column="35"/></name></expr></argument>)<pos:position pos:line="53" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="37"/></expr_stmt>
            <return pos:line="54" pos:column="13">return <expr><operator pos:line="54" pos:column="20">-<pos:position pos:line="54" pos:column="21"/></operator><literal type="number" pos:line="54" pos:column="21">1<pos:position pos:line="54" pos:column="22"/></literal></expr>;<pos:position pos:line="54" pos:column="23"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></then></if>

        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name><name pos:line="57" pos:column="13">inctx<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">-&gt;<pos:position pos:line="57" pos:column="23"/></operator><name pos:line="57" pos:column="20">rc<pos:position pos:line="57" pos:column="22"/></name></name> <operator pos:line="57" pos:column="23">!=<pos:position pos:line="57" pos:column="25"/></operator> <name pos:line="57" pos:column="26">APR_SUCCESS<pos:position pos:line="57" pos:column="37"/></name></expr>)<pos:position pos:line="57" pos:column="38"/></condition><then pos:line="57" pos:column="38"> <block pos:line="57" pos:column="39">{
            <comment type="block" pos:line="58" pos:column="13">/* Unexpected errors discard the brigade */</comment>
            <expr_stmt><expr><call><name pos:line="59" pos:column="13">apr_brigade_cleanup<pos:position pos:line="59" pos:column="32"/></name><argument_list pos:line="59" pos:column="32">(<argument><expr><name><name pos:line="59" pos:column="33">inctx<pos:position pos:line="59" pos:column="38"/></name><operator pos:line="59" pos:column="38">-&gt;<pos:position pos:line="59" pos:column="43"/></operator><name pos:line="59" pos:column="40">bb<pos:position pos:line="59" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="59" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="60" pos:column="13">inctx<pos:position pos:line="60" pos:column="18"/></name><operator pos:line="60" pos:column="18">-&gt;<pos:position pos:line="60" pos:column="23"/></operator><name pos:line="60" pos:column="20">bb<pos:position pos:line="60" pos:column="22"/></name></name> <operator pos:line="60" pos:column="23">=<pos:position pos:line="60" pos:column="24"/></operator> <name pos:line="60" pos:column="25">NULL<pos:position pos:line="60" pos:column="29"/></name></expr>;<pos:position pos:line="60" pos:column="30"/></expr_stmt>
            <return pos:line="61" pos:column="13">return <expr><operator pos:line="61" pos:column="20">-<pos:position pos:line="61" pos:column="21"/></operator><literal type="number" pos:line="61" pos:column="21">1<pos:position pos:line="61" pos:column="22"/></literal></expr>;<pos:position pos:line="61" pos:column="23"/></return>
        }<pos:position pos:line="62" pos:column="10"/></block></then></if>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="65" pos:column="5">inctx<pos:position pos:line="65" pos:column="10"/></name><operator pos:line="65" pos:column="10">-&gt;<pos:position pos:line="65" pos:column="15"/></operator><name pos:line="65" pos:column="12">rc<pos:position pos:line="65" pos:column="14"/></name></name> <operator pos:line="65" pos:column="15">=<pos:position pos:line="65" pos:column="16"/></operator> <call><name pos:line="65" pos:column="17">brigade_consume<pos:position pos:line="65" pos:column="32"/></name><argument_list pos:line="65" pos:column="32">(<argument><expr><name><name pos:line="65" pos:column="33">inctx<pos:position pos:line="65" pos:column="38"/></name><operator pos:line="65" pos:column="38">-&gt;<pos:position pos:line="65" pos:column="43"/></operator><name pos:line="65" pos:column="40">bb<pos:position pos:line="65" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="44">block<pos:position pos:line="65" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="51">in<pos:position pos:line="65" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="65" pos:column="55">&amp;<pos:position pos:line="65" pos:column="60"/></operator><name pos:line="65" pos:column="56">inl<pos:position pos:line="65" pos:column="59"/></name></expr></argument>)<pos:position pos:line="65" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="61"/></expr_stmt>

    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><name><name pos:line="67" pos:column="9">inctx<pos:position pos:line="67" pos:column="14"/></name><operator pos:line="67" pos:column="14">-&gt;<pos:position pos:line="67" pos:column="19"/></operator><name pos:line="67" pos:column="16">rc<pos:position pos:line="67" pos:column="18"/></name></name> <operator pos:line="67" pos:column="19">==<pos:position pos:line="67" pos:column="21"/></operator> <name pos:line="67" pos:column="22">APR_SUCCESS<pos:position pos:line="67" pos:column="33"/></name></expr>)<pos:position pos:line="67" pos:column="34"/></condition><then pos:line="67" pos:column="34"> <block pos:line="67" pos:column="35">{
        <return pos:line="68" pos:column="9">return <expr><operator pos:line="68" pos:column="16">(<pos:position pos:line="68" pos:column="17"/></operator><name pos:line="68" pos:column="17">int<pos:position pos:line="68" pos:column="20"/></name><operator pos:line="68" pos:column="20">)<pos:position pos:line="68" pos:column="21"/></operator><name pos:line="68" pos:column="21">inl<pos:position pos:line="68" pos:column="24"/></name></expr>;<pos:position pos:line="68" pos:column="25"/></return>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>

    <if pos:line="71" pos:column="5">if <condition pos:line="71" pos:column="8">(<expr><call><name pos:line="71" pos:column="9">APR_STATUS_IS_EAGAIN<pos:position pos:line="71" pos:column="29"/></name><argument_list pos:line="71" pos:column="29">(<argument><expr><name><name pos:line="71" pos:column="30">inctx<pos:position pos:line="71" pos:column="35"/></name><operator pos:line="71" pos:column="35">-&gt;<pos:position pos:line="71" pos:column="40"/></operator><name pos:line="71" pos:column="37">rc<pos:position pos:line="71" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="40"/></argument_list></call>
            <operator pos:line="72" pos:column="13">||<pos:position pos:line="72" pos:column="15"/></operator> <call><name pos:line="72" pos:column="16">APR_STATUS_IS_EINTR<pos:position pos:line="72" pos:column="35"/></name><argument_list pos:line="72" pos:column="35">(<argument><expr><name><name pos:line="72" pos:column="36">inctx<pos:position pos:line="72" pos:column="41"/></name><operator pos:line="72" pos:column="41">-&gt;<pos:position pos:line="72" pos:column="46"/></operator><name pos:line="72" pos:column="43">rc<pos:position pos:line="72" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="72" pos:column="47"/></condition><then pos:line="72" pos:column="47"> <block pos:line="72" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">BIO_set_retry_read<pos:position pos:line="73" pos:column="27"/></name><argument_list pos:line="73" pos:column="27">(<argument><expr><name pos:line="73" pos:column="28">bio<pos:position pos:line="73" pos:column="31"/></name></expr></argument>)<pos:position pos:line="73" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="33"/></expr_stmt>
        <return pos:line="74" pos:column="9">return <expr><operator pos:line="74" pos:column="16">(<pos:position pos:line="74" pos:column="17"/></operator><name pos:line="74" pos:column="17">int<pos:position pos:line="74" pos:column="20"/></name><operator pos:line="74" pos:column="20">)<pos:position pos:line="74" pos:column="21"/></operator><name pos:line="74" pos:column="21">inl<pos:position pos:line="74" pos:column="24"/></name></expr>;<pos:position pos:line="74" pos:column="25"/></return>
    }<pos:position pos:line="75" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="77" pos:column="5">/* Unexpected errors and APR_EOF clean out the brigade.
     * Subsequent calls will return APR_EOF.
     */</comment>
    <expr_stmt><expr><call><name pos:line="80" pos:column="5">apr_brigade_cleanup<pos:position pos:line="80" pos:column="24"/></name><argument_list pos:line="80" pos:column="24">(<argument><expr><name><name pos:line="80" pos:column="25">inctx<pos:position pos:line="80" pos:column="30"/></name><operator pos:line="80" pos:column="30">-&gt;<pos:position pos:line="80" pos:column="35"/></operator><name pos:line="80" pos:column="32">bb<pos:position pos:line="80" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="80" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="36"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="81" pos:column="5">inctx<pos:position pos:line="81" pos:column="10"/></name><operator pos:line="81" pos:column="10">-&gt;<pos:position pos:line="81" pos:column="15"/></operator><name pos:line="81" pos:column="12">bb<pos:position pos:line="81" pos:column="14"/></name></name> <operator pos:line="81" pos:column="15">=<pos:position pos:line="81" pos:column="16"/></operator> <name pos:line="81" pos:column="17">NULL<pos:position pos:line="81" pos:column="21"/></name></expr>;<pos:position pos:line="81" pos:column="22"/></expr_stmt>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><call><name pos:line="83" pos:column="9">APR_STATUS_IS_EOF<pos:position pos:line="83" pos:column="26"/></name><argument_list pos:line="83" pos:column="26">(<argument><expr><name><name pos:line="83" pos:column="27">inctx<pos:position pos:line="83" pos:column="32"/></name><operator pos:line="83" pos:column="32">-&gt;<pos:position pos:line="83" pos:column="37"/></operator><name pos:line="83" pos:column="34">rc<pos:position pos:line="83" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="37"/></argument_list></call> <operator pos:line="83" pos:column="38">&amp;&amp;<pos:position pos:line="83" pos:column="48"/></operator> <name pos:line="83" pos:column="41">inl<pos:position pos:line="83" pos:column="44"/></name></expr>)<pos:position pos:line="83" pos:column="45"/></condition><then pos:line="83" pos:column="45"> <block pos:line="83" pos:column="46">{
        <comment type="block" pos:line="84" pos:column="9">/* Provide the results of this read pass,
         * without resetting the BIO retry_read flag
         */</comment>
        <return pos:line="87" pos:column="9">return <expr><operator pos:line="87" pos:column="16">(<pos:position pos:line="87" pos:column="17"/></operator><name pos:line="87" pos:column="17">int<pos:position pos:line="87" pos:column="20"/></name><operator pos:line="87" pos:column="20">)<pos:position pos:line="87" pos:column="21"/></operator><name pos:line="87" pos:column="21">inl<pos:position pos:line="87" pos:column="24"/></name></expr>;<pos:position pos:line="87" pos:column="25"/></return>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if>

    <return pos:line="90" pos:column="5">return <expr><operator pos:line="90" pos:column="12">-<pos:position pos:line="90" pos:column="13"/></operator><literal type="number" pos:line="90" pos:column="13">1<pos:position pos:line="90" pos:column="14"/></literal></expr>;<pos:position pos:line="90" pos:column="15"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
