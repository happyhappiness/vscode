<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_458_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">mget<pos:position pos:line="1" pos:column="16"/></name><parameter_list pos:line="1" pos:column="16">(<parameter><decl><type><name pos:line="1" pos:column="17">request_rec<pos:position pos:line="1" pos:column="28"/></name> <modifier pos:line="1" pos:column="29">*<pos:position pos:line="1" pos:column="30"/></modifier></type><name pos:line="1" pos:column="30">r<pos:position pos:line="1" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="1" pos:column="33">union<pos:position pos:line="1" pos:column="38"/></name> <name pos:line="1" pos:column="39">VALUETYPE<pos:position pos:line="1" pos:column="48"/></name></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">p<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">unsigned<pos:position pos:line="1" pos:column="61"/></name> <name pos:line="1" pos:column="62">char<pos:position pos:line="1" pos:column="66"/></name> <modifier pos:line="1" pos:column="67">*<pos:position pos:line="1" pos:column="68"/></modifier></type><name pos:line="1" pos:column="68">s<pos:position pos:line="1" pos:column="69"/></name></decl></parameter>,
		<parameter><decl><type><name><name pos:line="2" pos:column="17">struct<pos:position pos:line="2" pos:column="23"/></name> <name pos:line="2" pos:column="24">magic<pos:position pos:line="2" pos:column="29"/></name></name> <modifier pos:line="2" pos:column="30">*<pos:position pos:line="2" pos:column="31"/></modifier></type><name pos:line="2" pos:column="31">m<pos:position pos:line="2" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="34">apr_size_t<pos:position pos:line="2" pos:column="44"/></name></type> <name pos:line="2" pos:column="45">nbytes<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="52"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">long<pos:position pos:line="4" pos:column="9"/></name></type> <name pos:line="4" pos:column="10">offset<pos:position pos:line="4" pos:column="16"/></name> <init pos:line="4" pos:column="17">= <expr><name><name pos:line="4" pos:column="19">m<pos:position pos:line="4" pos:column="20"/></name><operator pos:line="4" pos:column="20">-&gt;<pos:position pos:line="4" pos:column="25"/></operator><name pos:line="4" pos:column="22">offset<pos:position pos:line="4" pos:column="28"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">offset<pos:position pos:line="6" pos:column="15"/></name> <operator pos:line="6" pos:column="16">+<pos:position pos:line="6" pos:column="17"/></operator> <sizeof pos:line="6" pos:column="18">sizeof<argument_list pos:line="6" pos:column="24">(<argument><expr pos:line="6" pos:column="25">union <name pos:line="6" pos:column="31">VALUETYPE<pos:position pos:line="6" pos:column="40"/></name></expr></argument>)<pos:position pos:line="6" pos:column="41"/></argument_list></sizeof> <operator pos:line="6" pos:column="42">&gt;<pos:position pos:line="6" pos:column="46"/></operator> <name pos:line="6" pos:column="44">nbytes<pos:position pos:line="6" pos:column="50"/></name></expr>)<pos:position pos:line="6" pos:column="51"/></condition><then pos:line="6" pos:column="51">
	          <block type="pseudo"><return pos:line="7" pos:column="19">return <expr><literal type="number" pos:line="7" pos:column="26">0<pos:position pos:line="7" pos:column="27"/></literal></expr>;<pos:position pos:line="7" pos:column="28"/></return></block></then></if>

    <expr_stmt><expr><call><name pos:line="9" pos:column="5">memcpy<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><name pos:line="9" pos:column="12">p<pos:position pos:line="9" pos:column="13"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="15">s<pos:position pos:line="9" pos:column="16"/></name> <operator pos:line="9" pos:column="17">+<pos:position pos:line="9" pos:column="18"/></operator> <name pos:line="9" pos:column="19">offset<pos:position pos:line="9" pos:column="25"/></name></expr></argument>, <argument><expr><sizeof pos:line="9" pos:column="27">sizeof<argument_list pos:line="9" pos:column="33">(<argument><expr pos:line="9" pos:column="34">union <name pos:line="9" pos:column="40">VALUETYPE<pos:position pos:line="9" pos:column="49"/></name></expr></argument>)<pos:position pos:line="9" pos:column="50"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="52"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><call><name pos:line="11" pos:column="10">mconvert<pos:position pos:line="11" pos:column="18"/></name><argument_list pos:line="11" pos:column="18">(<argument><expr><name pos:line="11" pos:column="19">r<pos:position pos:line="11" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="22">p<pos:position pos:line="11" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="25">m<pos:position pos:line="11" pos:column="26"/></name></expr></argument>)<pos:position pos:line="11" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="28"/></condition><then pos:line="11" pos:column="28">
	<block type="pseudo"><return pos:line="12" pos:column="9">return <expr><literal type="number" pos:line="12" pos:column="16">0<pos:position pos:line="12" pos:column="17"/></literal></expr>;<pos:position pos:line="12" pos:column="18"/></return></block></then></if>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name><name pos:line="14" pos:column="9">m<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">flag<pos:position pos:line="14" pos:column="16"/></name></name> <operator pos:line="14" pos:column="17">&amp;<pos:position pos:line="14" pos:column="22"/></operator> <name pos:line="14" pos:column="19">INDIR<pos:position pos:line="14" pos:column="24"/></name></expr>)<pos:position pos:line="14" pos:column="25"/></condition><then pos:line="14" pos:column="25"> <block pos:line="14" pos:column="26">{

	<switch pos:line="16" pos:column="9">switch <condition pos:line="16" pos:column="16">(<expr><name><name pos:line="16" pos:column="17">m<pos:position pos:line="16" pos:column="18"/></name><operator pos:line="16" pos:column="18">-&gt;<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="20">in<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">.<pos:position pos:line="16" pos:column="23"/></operator><name pos:line="16" pos:column="23">type<pos:position pos:line="16" pos:column="27"/></name></name></expr>)<pos:position pos:line="16" pos:column="28"/></condition> <block pos:line="16" pos:column="29">{
	<case pos:line="17" pos:column="9">case <expr><name pos:line="17" pos:column="14">BYTE<pos:position pos:line="17" pos:column="18"/></name></expr>:<pos:position pos:line="17" pos:column="19"/></case>
	    <expr_stmt><expr><name pos:line="18" pos:column="13">offset<pos:position pos:line="18" pos:column="19"/></name> <operator pos:line="18" pos:column="20">=<pos:position pos:line="18" pos:column="21"/></operator> <name><name pos:line="18" pos:column="22">p<pos:position pos:line="18" pos:column="23"/></name><operator pos:line="18" pos:column="23">-&gt;<pos:position pos:line="18" pos:column="28"/></operator><name pos:line="18" pos:column="25">b<pos:position pos:line="18" pos:column="26"/></name></name> <operator pos:line="18" pos:column="27">+<pos:position pos:line="18" pos:column="28"/></operator> <name><name pos:line="18" pos:column="29">m<pos:position pos:line="18" pos:column="30"/></name><operator pos:line="18" pos:column="30">-&gt;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="32">in<pos:position pos:line="18" pos:column="34"/></name><operator pos:line="18" pos:column="34">.<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="35">offset<pos:position pos:line="18" pos:column="41"/></name></name></expr>;<pos:position pos:line="18" pos:column="42"/></expr_stmt>
	    <break pos:line="19" pos:column="13">break;<pos:position pos:line="19" pos:column="19"/></break>
	<case pos:line="20" pos:column="9">case <expr><name pos:line="20" pos:column="14">SHORT<pos:position pos:line="20" pos:column="19"/></name></expr>:<pos:position pos:line="20" pos:column="20"/></case>
	    <expr_stmt><expr><name pos:line="21" pos:column="13">offset<pos:position pos:line="21" pos:column="19"/></name> <operator pos:line="21" pos:column="20">=<pos:position pos:line="21" pos:column="21"/></operator> <name><name pos:line="21" pos:column="22">p<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">h<pos:position pos:line="21" pos:column="26"/></name></name> <operator pos:line="21" pos:column="27">+<pos:position pos:line="21" pos:column="28"/></operator> <name><name pos:line="21" pos:column="29">m<pos:position pos:line="21" pos:column="30"/></name><operator pos:line="21" pos:column="30">-&gt;<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="32">in<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">.<pos:position pos:line="21" pos:column="35"/></operator><name pos:line="21" pos:column="35">offset<pos:position pos:line="21" pos:column="41"/></name></name></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>
	    <break pos:line="22" pos:column="13">break;<pos:position pos:line="22" pos:column="19"/></break>
	<case pos:line="23" pos:column="9">case <expr><name pos:line="23" pos:column="14">LONG<pos:position pos:line="23" pos:column="18"/></name></expr>:<pos:position pos:line="23" pos:column="19"/></case>
	    <expr_stmt><expr><name pos:line="24" pos:column="13">offset<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <name><name pos:line="24" pos:column="22">p<pos:position pos:line="24" pos:column="23"/></name><operator pos:line="24" pos:column="23">-&gt;<pos:position pos:line="24" pos:column="28"/></operator><name pos:line="24" pos:column="25">l<pos:position pos:line="24" pos:column="26"/></name></name> <operator pos:line="24" pos:column="27">+<pos:position pos:line="24" pos:column="28"/></operator> <name><name pos:line="24" pos:column="29">m<pos:position pos:line="24" pos:column="30"/></name><operator pos:line="24" pos:column="30">-&gt;<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="32">in<pos:position pos:line="24" pos:column="34"/></name><operator pos:line="24" pos:column="34">.<pos:position pos:line="24" pos:column="35"/></operator><name pos:line="24" pos:column="35">offset<pos:position pos:line="24" pos:column="41"/></name></name></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
	    <break pos:line="25" pos:column="13">break;<pos:position pos:line="25" pos:column="19"/></break>
	}<pos:position pos:line="26" pos:column="10"/></block></switch>

	<if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">offset<pos:position pos:line="28" pos:column="19"/></name> <operator pos:line="28" pos:column="20">+<pos:position pos:line="28" pos:column="21"/></operator> <sizeof pos:line="28" pos:column="22">sizeof<argument_list pos:line="28" pos:column="28">(<argument><expr pos:line="28" pos:column="29">union <name pos:line="28" pos:column="35">VALUETYPE<pos:position pos:line="28" pos:column="44"/></name></expr></argument>)<pos:position pos:line="28" pos:column="45"/></argument_list></sizeof> <operator pos:line="28" pos:column="46">&gt;<pos:position pos:line="28" pos:column="50"/></operator> <name pos:line="28" pos:column="48">nbytes<pos:position pos:line="28" pos:column="54"/></name></expr>)<pos:position pos:line="28" pos:column="55"/></condition><then pos:line="28" pos:column="55">
	              <block type="pseudo"><return pos:line="29" pos:column="23">return <expr><literal type="number" pos:line="29" pos:column="30">0<pos:position pos:line="29" pos:column="31"/></literal></expr>;<pos:position pos:line="29" pos:column="32"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="31" pos:column="9">memcpy<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">p<pos:position pos:line="31" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="19">s<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">+<pos:position pos:line="31" pos:column="22"/></operator> <name pos:line="31" pos:column="23">offset<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="31" pos:column="31">sizeof<argument_list pos:line="31" pos:column="37">(<argument><expr pos:line="31" pos:column="38">union <name pos:line="31" pos:column="44">VALUETYPE<pos:position pos:line="31" pos:column="53"/></name></expr></argument>)<pos:position pos:line="31" pos:column="54"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="31" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="56"/></expr_stmt>

	<if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><operator pos:line="33" pos:column="13">!<pos:position pos:line="33" pos:column="14"/></operator><call><name pos:line="33" pos:column="14">mconvert<pos:position pos:line="33" pos:column="22"/></name><argument_list pos:line="33" pos:column="22">(<argument><expr><name pos:line="33" pos:column="23">r<pos:position pos:line="33" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="26">p<pos:position pos:line="33" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="29">m<pos:position pos:line="33" pos:column="30"/></name></expr></argument>)<pos:position pos:line="33" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="32"/></condition><then pos:line="33" pos:column="32">
	    <block type="pseudo"><return pos:line="34" pos:column="13">return <expr><literal type="number" pos:line="34" pos:column="20">0<pos:position pos:line="34" pos:column="21"/></literal></expr>;<pos:position pos:line="34" pos:column="22"/></return></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></then></if>
    <return pos:line="36" pos:column="5">return <expr><literal type="number" pos:line="36" pos:column="12">1<pos:position pos:line="36" pos:column="13"/></literal></expr>;<pos:position pos:line="36" pos:column="14"/></return>
}<pos:position pos:line="37" pos:column="2"/></block></function></unit>
