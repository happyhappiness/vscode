<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1415_httpd-2.3.8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">load_module<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">cmd_parms<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">cmd<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">void<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">dummy<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>,
                               <parameter><decl><type><specifier pos:line="2" pos:column="32">const<pos:position pos:line="2" pos:column="37"/></specifier> <name pos:line="2" pos:column="38">char<pos:position pos:line="2" pos:column="42"/></name> <modifier pos:line="2" pos:column="43">*<pos:position pos:line="2" pos:column="44"/></modifier></type><name pos:line="2" pos:column="44">modname<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="53">const<pos:position pos:line="2" pos:column="58"/></specifier> <name pos:line="2" pos:column="59">char<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">filename<pos:position pos:line="2" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="74"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_dso_handle_t<pos:position pos:line="4" pos:column="21"/></name> <modifier pos:line="4" pos:column="22">*<pos:position pos:line="4" pos:column="23"/></modifier></type><name pos:line="4" pos:column="23">modhandle<pos:position pos:line="4" pos:column="32"/></name></decl>;<pos:position pos:line="4" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_dso_handle_sym_t<pos:position pos:line="5" pos:column="25"/></name></type> <name pos:line="5" pos:column="26">modsym<pos:position pos:line="5" pos:column="32"/></name></decl>;<pos:position pos:line="5" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">module<pos:position pos:line="6" pos:column="11"/></name> <modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type><name pos:line="6" pos:column="13">modp<pos:position pos:line="6" pos:column="17"/></name></decl>;<pos:position pos:line="6" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">szModuleFile<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><call><name pos:line="7" pos:column="32">ap_server_root_relative<pos:position pos:line="7" pos:column="55"/></name><argument_list pos:line="7" pos:column="55">(<argument><expr><name><name pos:line="7" pos:column="56">cmd<pos:position pos:line="7" pos:column="59"/></name><operator pos:line="7" pos:column="59">-&gt;<pos:position pos:line="7" pos:column="64"/></operator><name pos:line="7" pos:column="61">pool<pos:position pos:line="7" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="67">filename<pos:position pos:line="7" pos:column="75"/></name></expr></argument>)<pos:position pos:line="7" pos:column="76"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="77"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">so_server_conf<pos:position pos:line="8" pos:column="19"/></name> <modifier pos:line="8" pos:column="20">*<pos:position pos:line="8" pos:column="21"/></modifier></type><name pos:line="8" pos:column="21">sconf<pos:position pos:line="8" pos:column="26"/></name></decl>;<pos:position pos:line="8" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">ap_module_symbol_t<pos:position pos:line="9" pos:column="23"/></name> <modifier pos:line="9" pos:column="24">*<pos:position pos:line="9" pos:column="25"/></modifier></type><name pos:line="9" pos:column="25">modi<pos:position pos:line="9" pos:column="29"/></name></decl>;<pos:position pos:line="9" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">ap_module_symbol_t<pos:position pos:line="10" pos:column="23"/></name> <modifier pos:line="10" pos:column="24">*<pos:position pos:line="10" pos:column="25"/></modifier></type><name pos:line="10" pos:column="25">modie<pos:position pos:line="10" pos:column="30"/></name></decl>;<pos:position pos:line="10" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">i<pos:position pos:line="11" pos:column="10"/></name></decl>;<pos:position pos:line="11" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="12" pos:column="5">const<pos:position pos:line="12" pos:column="10"/></specifier> <name pos:line="12" pos:column="11">char<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">error<pos:position pos:line="12" pos:column="22"/></name></decl>;<pos:position pos:line="12" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="14" pos:column="5">/* we need to setup this value for dummy to make sure that we don't try
     * to add a non-existant tree into the build when we return to
     * execute_now.
     */</comment>
    <expr_stmt><expr><operator pos:line="18" pos:column="5">*<pos:position pos:line="18" pos:column="6"/></operator><operator pos:line="18" pos:column="6">(<pos:position pos:line="18" pos:column="7"/></operator><name pos:line="18" pos:column="7">ap_directive_t<pos:position pos:line="18" pos:column="21"/></name> <operator pos:line="18" pos:column="22">*<pos:position pos:line="18" pos:column="23"/></operator><operator pos:line="18" pos:column="23">*<pos:position pos:line="18" pos:column="24"/></operator><operator pos:line="18" pos:column="24">)<pos:position pos:line="18" pos:column="25"/></operator><name pos:line="18" pos:column="25">dummy<pos:position pos:line="18" pos:column="30"/></name> <operator pos:line="18" pos:column="31">=<pos:position pos:line="18" pos:column="32"/></operator> <name pos:line="18" pos:column="33">NULL<pos:position pos:line="18" pos:column="37"/></name></expr>;<pos:position pos:line="18" pos:column="38"/></expr_stmt>

    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><operator pos:line="20" pos:column="9">!<pos:position pos:line="20" pos:column="10"/></operator><name pos:line="20" pos:column="10">szModuleFile<pos:position pos:line="20" pos:column="22"/></name></expr>)<pos:position pos:line="20" pos:column="23"/></condition><then pos:line="20" pos:column="23"> <block pos:line="20" pos:column="24">{
        <return pos:line="21" pos:column="9">return <expr><call><name pos:line="21" pos:column="16">apr_pstrcat<pos:position pos:line="21" pos:column="27"/></name><argument_list pos:line="21" pos:column="27">(<argument><expr><name><name pos:line="21" pos:column="28">cmd<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">pool<pos:position pos:line="21" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="39">"Invalid LoadModule path "<pos:position pos:line="21" pos:column="65"/></literal></expr></argument>,
                           <argument><expr><name pos:line="22" pos:column="28">filename<pos:position pos:line="22" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="22" pos:column="38">NULL<pos:position pos:line="22" pos:column="42"/></name></expr></argument>)<pos:position pos:line="22" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="44"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="25" pos:column="5">/*
     * check for already existing module
     * If it already exists, we have nothing to do
     * Check both dynamically-loaded modules and statically-linked modules.
     */</comment>
    <expr_stmt><expr><name pos:line="30" pos:column="5">sconf<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">=<pos:position pos:line="30" pos:column="12"/></operator> <operator pos:line="30" pos:column="13">(<pos:position pos:line="30" pos:column="14"/></operator><name pos:line="30" pos:column="14">so_server_conf<pos:position pos:line="30" pos:column="28"/></name> <operator pos:line="30" pos:column="29">*<pos:position pos:line="30" pos:column="30"/></operator><operator pos:line="30" pos:column="30">)<pos:position pos:line="30" pos:column="31"/></operator><call><name pos:line="30" pos:column="31">ap_get_module_config<pos:position pos:line="30" pos:column="51"/></name><argument_list pos:line="30" pos:column="51">(<argument><expr><name><name pos:line="30" pos:column="52">cmd<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">-&gt;<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="57">server<pos:position pos:line="30" pos:column="63"/></name><operator pos:line="30" pos:column="63">-&gt;<pos:position pos:line="30" pos:column="68"/></operator><name pos:line="30" pos:column="65">module_config<pos:position pos:line="30" pos:column="78"/></name></name></expr></argument>,
                                                <argument><expr><operator pos:line="31" pos:column="49">&amp;<pos:position pos:line="31" pos:column="54"/></operator><name pos:line="31" pos:column="50">so_module<pos:position pos:line="31" pos:column="59"/></name></expr></argument>)<pos:position pos:line="31" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name pos:line="32" pos:column="5">modie<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <operator pos:line="32" pos:column="13">(<pos:position pos:line="32" pos:column="14"/></operator><name pos:line="32" pos:column="14">ap_module_symbol_t<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">*<pos:position pos:line="32" pos:column="34"/></operator><operator pos:line="32" pos:column="34">)<pos:position pos:line="32" pos:column="35"/></operator><name><name pos:line="32" pos:column="35">sconf<pos:position pos:line="32" pos:column="40"/></name><operator pos:line="32" pos:column="40">-&gt;<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="42">loaded_modules<pos:position pos:line="32" pos:column="56"/></name><operator pos:line="32" pos:column="56">-&gt;<pos:position pos:line="32" pos:column="61"/></operator><name pos:line="32" pos:column="58">elts<pos:position pos:line="32" pos:column="62"/></name></name></expr>;<pos:position pos:line="32" pos:column="63"/></expr_stmt>
    <for pos:line="33" pos:column="5">for <control pos:line="33" pos:column="9">(<init><expr><name pos:line="33" pos:column="10">i<pos:position pos:line="33" pos:column="11"/></name> <operator pos:line="33" pos:column="12">=<pos:position pos:line="33" pos:column="13"/></operator> <literal type="number" pos:line="33" pos:column="14">0<pos:position pos:line="33" pos:column="15"/></literal></expr>;<pos:position pos:line="33" pos:column="16"/></init> <condition><expr><name pos:line="33" pos:column="17">i<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">&lt;<pos:position pos:line="33" pos:column="23"/></operator> <name><name pos:line="33" pos:column="21">sconf<pos:position pos:line="33" pos:column="26"/></name><operator pos:line="33" pos:column="26">-&gt;<pos:position pos:line="33" pos:column="31"/></operator><name pos:line="33" pos:column="28">loaded_modules<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">-&gt;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="44">nelts<pos:position pos:line="33" pos:column="49"/></name></name></expr>;<pos:position pos:line="33" pos:column="50"/></condition> <incr><expr><name pos:line="33" pos:column="51">i<pos:position pos:line="33" pos:column="52"/></name><operator pos:line="33" pos:column="52">++<pos:position pos:line="33" pos:column="54"/></operator></expr></incr>)<pos:position pos:line="33" pos:column="55"/></control> <block pos:line="33" pos:column="56">{
        <expr_stmt><expr><name pos:line="34" pos:column="9">modi<pos:position pos:line="34" pos:column="13"/></name> <operator pos:line="34" pos:column="14">=<pos:position pos:line="34" pos:column="15"/></operator> <operator pos:line="34" pos:column="16">&amp;<pos:position pos:line="34" pos:column="21"/></operator><name><name pos:line="34" pos:column="17">modie<pos:position pos:line="34" pos:column="22"/></name><index pos:line="34" pos:column="22">[<expr><name pos:line="34" pos:column="23">i<pos:position pos:line="34" pos:column="24"/></name></expr>]<pos:position pos:line="34" pos:column="25"/></index></name></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>
        <if pos:line="35" pos:column="9">if <condition pos:line="35" pos:column="12">(<expr><name><name pos:line="35" pos:column="13">modi<pos:position pos:line="35" pos:column="17"/></name><operator pos:line="35" pos:column="17">-&gt;<pos:position pos:line="35" pos:column="22"/></operator><name pos:line="35" pos:column="19">name<pos:position pos:line="35" pos:column="23"/></name></name> <operator pos:line="35" pos:column="24">!=<pos:position pos:line="35" pos:column="26"/></operator> <name pos:line="35" pos:column="27">NULL<pos:position pos:line="35" pos:column="31"/></name> <operator pos:line="35" pos:column="32">&amp;&amp;<pos:position pos:line="35" pos:column="42"/></operator> <call><name pos:line="35" pos:column="35">strcmp<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name><name pos:line="35" pos:column="42">modi<pos:position pos:line="35" pos:column="46"/></name><operator pos:line="35" pos:column="46">-&gt;<pos:position pos:line="35" pos:column="51"/></operator><name pos:line="35" pos:column="48">name<pos:position pos:line="35" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="54">modname<pos:position pos:line="35" pos:column="61"/></name></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></call> <operator pos:line="35" pos:column="63">==<pos:position pos:line="35" pos:column="65"/></operator> <literal type="number" pos:line="35" pos:column="66">0<pos:position pos:line="35" pos:column="67"/></literal></expr>)<pos:position pos:line="35" pos:column="68"/></condition><then pos:line="35" pos:column="68"> <block pos:line="35" pos:column="69">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">ap_log_perror<pos:position pos:line="36" pos:column="26"/></name><argument_list pos:line="36" pos:column="26">(<argument><expr><name pos:line="36" pos:column="27">APLOG_MARK<pos:position pos:line="36" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="39">APLOG_WARNING<pos:position pos:line="36" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="36" pos:column="54">0<pos:position pos:line="36" pos:column="55"/></literal></expr></argument>,
                          <argument><expr><name><name pos:line="37" pos:column="27">cmd<pos:position pos:line="37" pos:column="30"/></name><operator pos:line="37" pos:column="30">-&gt;<pos:position pos:line="37" pos:column="35"/></operator><name pos:line="37" pos:column="32">pool<pos:position pos:line="37" pos:column="36"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="38">"module %s is already loaded, skipping"<pos:position pos:line="37" pos:column="77"/></literal></expr></argument>,
                          <argument><expr><name pos:line="38" pos:column="27">modname<pos:position pos:line="38" pos:column="34"/></name></expr></argument>)<pos:position pos:line="38" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="36"/></expr_stmt>
            <return pos:line="39" pos:column="13">return <expr><name pos:line="39" pos:column="20">NULL<pos:position pos:line="39" pos:column="24"/></name></expr>;<pos:position pos:line="39" pos:column="25"/></return>
        }<pos:position pos:line="40" pos:column="10"/></block></then></if>
    }<pos:position pos:line="41" pos:column="6"/></block></for>

    <for pos:line="43" pos:column="5">for <control pos:line="43" pos:column="9">(<init><expr><name pos:line="43" pos:column="10">i<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">=<pos:position pos:line="43" pos:column="13"/></operator> <literal type="number" pos:line="43" pos:column="14">0<pos:position pos:line="43" pos:column="15"/></literal></expr>;<pos:position pos:line="43" pos:column="16"/></init> <condition><expr><name><name pos:line="43" pos:column="17">ap_preloaded_modules<pos:position pos:line="43" pos:column="37"/></name><index pos:line="43" pos:column="37">[<expr><name pos:line="43" pos:column="38">i<pos:position pos:line="43" pos:column="39"/></name></expr>]<pos:position pos:line="43" pos:column="40"/></index></name></expr>;<pos:position pos:line="43" pos:column="41"/></condition> <incr><expr><name pos:line="43" pos:column="42">i<pos:position pos:line="43" pos:column="43"/></name><operator pos:line="43" pos:column="43">++<pos:position pos:line="43" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="43" pos:column="46"/></control> <block pos:line="43" pos:column="47">{
        <decl_stmt><decl><type><specifier pos:line="44" pos:column="9">const<pos:position pos:line="44" pos:column="14"/></specifier> <name pos:line="44" pos:column="15">char<pos:position pos:line="44" pos:column="19"/></name> <modifier pos:line="44" pos:column="20">*<pos:position pos:line="44" pos:column="21"/></modifier></type><name pos:line="44" pos:column="21">preload_name<pos:position pos:line="44" pos:column="33"/></name></decl>;<pos:position pos:line="44" pos:column="34"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="45" pos:column="9">apr_size_t<pos:position pos:line="45" pos:column="19"/></name></type> <name pos:line="45" pos:column="20">preload_len<pos:position pos:line="45" pos:column="31"/></name></decl>;<pos:position pos:line="45" pos:column="32"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="46" pos:column="9">apr_size_t<pos:position pos:line="46" pos:column="19"/></name></type> <name pos:line="46" pos:column="20">thismod_len<pos:position pos:line="46" pos:column="31"/></name></decl>;<pos:position pos:line="46" pos:column="32"/></decl_stmt>

        <expr_stmt><expr><name pos:line="48" pos:column="9">modp<pos:position pos:line="48" pos:column="13"/></name> <operator pos:line="48" pos:column="14">=<pos:position pos:line="48" pos:column="15"/></operator> <name><name pos:line="48" pos:column="16">ap_preloaded_modules<pos:position pos:line="48" pos:column="36"/></name><index pos:line="48" pos:column="36">[<expr><name pos:line="48" pos:column="37">i<pos:position pos:line="48" pos:column="38"/></name></expr>]<pos:position pos:line="48" pos:column="39"/></index></name></expr>;<pos:position pos:line="48" pos:column="40"/></expr_stmt>

        <comment type="block" pos:line="50" pos:column="9">/* make sure we're comparing apples with apples
         * make sure name of preloaded module is mod_FOO.c
         * make sure name of structure being loaded is FOO_module
         */</comment>

        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><call><name pos:line="55" pos:column="13">memcmp<pos:position pos:line="55" pos:column="19"/></name><argument_list pos:line="55" pos:column="19">(<argument><expr><name><name pos:line="55" pos:column="20">modp<pos:position pos:line="55" pos:column="24"/></name><operator pos:line="55" pos:column="24">-&gt;<pos:position pos:line="55" pos:column="29"/></operator><name pos:line="55" pos:column="26">name<pos:position pos:line="55" pos:column="30"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="55" pos:column="32">"mod_"<pos:position pos:line="55" pos:column="38"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="55" pos:column="40">4<pos:position pos:line="55" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="55" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="43"/></condition><then pos:line="55" pos:column="43"> <block pos:line="55" pos:column="44">{
            <continue pos:line="56" pos:column="13">continue;<pos:position pos:line="56" pos:column="22"/></continue>
        }<pos:position pos:line="57" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="59" pos:column="9">preload_name<pos:position pos:line="59" pos:column="21"/></name> <operator pos:line="59" pos:column="22">=<pos:position pos:line="59" pos:column="23"/></operator> <name><name pos:line="59" pos:column="24">modp<pos:position pos:line="59" pos:column="28"/></name><operator pos:line="59" pos:column="28">-&gt;<pos:position pos:line="59" pos:column="33"/></operator><name pos:line="59" pos:column="30">name<pos:position pos:line="59" pos:column="34"/></name></name> <operator pos:line="59" pos:column="35">+<pos:position pos:line="59" pos:column="36"/></operator> <call><name pos:line="59" pos:column="37">strlen<pos:position pos:line="59" pos:column="43"/></name><argument_list pos:line="59" pos:column="43">(<argument><expr><literal type="string" pos:line="59" pos:column="44">"mod_"<pos:position pos:line="59" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="52"/></expr_stmt>
        <expr_stmt><expr><name pos:line="60" pos:column="9">preload_len<pos:position pos:line="60" pos:column="20"/></name> <operator pos:line="60" pos:column="21">=<pos:position pos:line="60" pos:column="22"/></operator> <call><name pos:line="60" pos:column="23">strlen<pos:position pos:line="60" pos:column="29"/></name><argument_list pos:line="60" pos:column="29">(<argument><expr><name pos:line="60" pos:column="30">preload_name<pos:position pos:line="60" pos:column="42"/></name></expr></argument>)<pos:position pos:line="60" pos:column="43"/></argument_list></call> <operator pos:line="60" pos:column="44">-<pos:position pos:line="60" pos:column="45"/></operator> <literal type="number" pos:line="60" pos:column="46">2<pos:position pos:line="60" pos:column="47"/></literal></expr>;<pos:position pos:line="60" pos:column="48"/></expr_stmt>

        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><call><name pos:line="62" pos:column="13">strlen<pos:position pos:line="62" pos:column="19"/></name><argument_list pos:line="62" pos:column="19">(<argument><expr><name pos:line="62" pos:column="20">modname<pos:position pos:line="62" pos:column="27"/></name></expr></argument>)<pos:position pos:line="62" pos:column="28"/></argument_list></call> <operator pos:line="62" pos:column="29">&lt;=<pos:position pos:line="62" pos:column="34"/></operator> <call><name pos:line="62" pos:column="32">strlen<pos:position pos:line="62" pos:column="38"/></name><argument_list pos:line="62" pos:column="38">(<argument><expr><literal type="string" pos:line="62" pos:column="39">"_module"<pos:position pos:line="62" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="50"/></condition><then pos:line="62" pos:column="50"> <block pos:line="62" pos:column="51">{
            <continue pos:line="63" pos:column="13">continue;<pos:position pos:line="63" pos:column="22"/></continue>
        }<pos:position pos:line="64" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="65" pos:column="9">thismod_len<pos:position pos:line="65" pos:column="20"/></name> <operator pos:line="65" pos:column="21">=<pos:position pos:line="65" pos:column="22"/></operator> <call><name pos:line="65" pos:column="23">strlen<pos:position pos:line="65" pos:column="29"/></name><argument_list pos:line="65" pos:column="29">(<argument><expr><name pos:line="65" pos:column="30">modname<pos:position pos:line="65" pos:column="37"/></name></expr></argument>)<pos:position pos:line="65" pos:column="38"/></argument_list></call> <operator pos:line="65" pos:column="39">-<pos:position pos:line="65" pos:column="40"/></operator> <call><name pos:line="65" pos:column="41">strlen<pos:position pos:line="65" pos:column="47"/></name><argument_list pos:line="65" pos:column="47">(<argument><expr><literal type="string" pos:line="65" pos:column="48">"_module"<pos:position pos:line="65" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="59"/></expr_stmt>
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><call><name pos:line="66" pos:column="13">strcmp<pos:position pos:line="66" pos:column="19"/></name><argument_list pos:line="66" pos:column="19">(<argument><expr><name pos:line="66" pos:column="20">modname<pos:position pos:line="66" pos:column="27"/></name> <operator pos:line="66" pos:column="28">+<pos:position pos:line="66" pos:column="29"/></operator> <name pos:line="66" pos:column="30">thismod_len<pos:position pos:line="66" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="66" pos:column="43">"_module"<pos:position pos:line="66" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="53"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="54"/></condition><then pos:line="66" pos:column="54"> <block pos:line="66" pos:column="55">{
            <continue pos:line="67" pos:column="13">continue;<pos:position pos:line="67" pos:column="22"/></continue>
        }<pos:position pos:line="68" pos:column="10"/></block></then></if>

        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">thismod_len<pos:position pos:line="70" pos:column="24"/></name> <operator pos:line="70" pos:column="25">!=<pos:position pos:line="70" pos:column="27"/></operator> <name pos:line="70" pos:column="28">preload_len<pos:position pos:line="70" pos:column="39"/></name></expr>)<pos:position pos:line="70" pos:column="40"/></condition><then pos:line="70" pos:column="40"> <block pos:line="70" pos:column="41">{
            <continue pos:line="71" pos:column="13">continue;<pos:position pos:line="71" pos:column="22"/></continue>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>

        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><operator pos:line="74" pos:column="13">!<pos:position pos:line="74" pos:column="14"/></operator><call><name pos:line="74" pos:column="14">memcmp<pos:position pos:line="74" pos:column="20"/></name><argument_list pos:line="74" pos:column="20">(<argument><expr><name pos:line="74" pos:column="21">modname<pos:position pos:line="74" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="30">preload_name<pos:position pos:line="74" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="44">preload_len<pos:position pos:line="74" pos:column="55"/></name></expr></argument>)<pos:position pos:line="74" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="74" pos:column="57"/></condition><then pos:line="74" pos:column="57"> <block pos:line="74" pos:column="58">{
            <return pos:line="75" pos:column="13">return <expr><call><name pos:line="75" pos:column="20">apr_pstrcat<pos:position pos:line="75" pos:column="31"/></name><argument_list pos:line="75" pos:column="31">(<argument><expr><name><name pos:line="75" pos:column="32">cmd<pos:position pos:line="75" pos:column="35"/></name><operator pos:line="75" pos:column="35">-&gt;<pos:position pos:line="75" pos:column="40"/></operator><name pos:line="75" pos:column="37">pool<pos:position pos:line="75" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="43">"module "<pos:position pos:line="75" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="54">modname<pos:position pos:line="75" pos:column="61"/></name></expr></argument>,
                               <argument><expr><literal type="string" pos:line="76" pos:column="32">" is built-in and can't be loaded"<pos:position pos:line="76" pos:column="66"/></literal></expr></argument>,
                               <argument><expr><name pos:line="77" pos:column="32">NULL<pos:position pos:line="77" pos:column="36"/></name></expr></argument>)<pos:position pos:line="77" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="38"/></return>
        }<pos:position pos:line="78" pos:column="10"/></block></then></if>
    }<pos:position pos:line="79" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="81" pos:column="5">modi<pos:position pos:line="81" pos:column="9"/></name> <operator pos:line="81" pos:column="10">=<pos:position pos:line="81" pos:column="11"/></operator> <call><name pos:line="81" pos:column="12">apr_array_push<pos:position pos:line="81" pos:column="26"/></name><argument_list pos:line="81" pos:column="26">(<argument><expr><name><name pos:line="81" pos:column="27">sconf<pos:position pos:line="81" pos:column="32"/></name><operator pos:line="81" pos:column="32">-&gt;<pos:position pos:line="81" pos:column="37"/></operator><name pos:line="81" pos:column="34">loaded_modules<pos:position pos:line="81" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="81" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="82" pos:column="5">modi<pos:position pos:line="82" pos:column="9"/></name><operator pos:line="82" pos:column="9">-&gt;<pos:position pos:line="82" pos:column="14"/></operator><name pos:line="82" pos:column="11">name<pos:position pos:line="82" pos:column="15"/></name></name> <operator pos:line="82" pos:column="16">=<pos:position pos:line="82" pos:column="17"/></operator> <name pos:line="82" pos:column="18">modname<pos:position pos:line="82" pos:column="25"/></name></expr>;<pos:position pos:line="82" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="84" pos:column="5">/*
     * Load the file into the Apache address space
     */</comment>
    <if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><call><name pos:line="87" pos:column="9">apr_dso_load<pos:position pos:line="87" pos:column="21"/></name><argument_list pos:line="87" pos:column="21">(<argument><expr><operator pos:line="87" pos:column="22">&amp;<pos:position pos:line="87" pos:column="27"/></operator><name pos:line="87" pos:column="23">modhandle<pos:position pos:line="87" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="34">szModuleFile<pos:position pos:line="87" pos:column="46"/></name></expr></argument>, <argument><expr><name><name pos:line="87" pos:column="48">cmd<pos:position pos:line="87" pos:column="51"/></name><operator pos:line="87" pos:column="51">-&gt;<pos:position pos:line="87" pos:column="56"/></operator><name pos:line="87" pos:column="53">pool<pos:position pos:line="87" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="87" pos:column="58"/></argument_list></call> <operator pos:line="87" pos:column="59">!=<pos:position pos:line="87" pos:column="61"/></operator> <name pos:line="87" pos:column="62">APR_SUCCESS<pos:position pos:line="87" pos:column="73"/></name></expr>)<pos:position pos:line="87" pos:column="74"/></condition><then pos:line="87" pos:column="74"> <block pos:line="87" pos:column="75">{
        <decl_stmt><decl><type><name pos:line="88" pos:column="9">char<pos:position pos:line="88" pos:column="13"/></name></type> <name><name pos:line="88" pos:column="14">my_error<pos:position pos:line="88" pos:column="22"/></name><index pos:line="88" pos:column="22">[<expr><literal type="number" pos:line="88" pos:column="23">256<pos:position pos:line="88" pos:column="26"/></literal></expr>]<pos:position pos:line="88" pos:column="27"/></index></name></decl>;<pos:position pos:line="88" pos:column="28"/></decl_stmt>

        <return pos:line="90" pos:column="9">return <expr><call><name pos:line="90" pos:column="16">apr_pstrcat<pos:position pos:line="90" pos:column="27"/></name><argument_list pos:line="90" pos:column="27">(<argument><expr><name><name pos:line="90" pos:column="28">cmd<pos:position pos:line="90" pos:column="31"/></name><operator pos:line="90" pos:column="31">-&gt;<pos:position pos:line="90" pos:column="36"/></operator><name pos:line="90" pos:column="33">pool<pos:position pos:line="90" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="90" pos:column="39">"Cannot load "<pos:position pos:line="90" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="90" pos:column="55">szModuleFile<pos:position pos:line="90" pos:column="67"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="91" pos:column="27">" into server: "<pos:position pos:line="91" pos:column="43"/></literal></expr></argument>,
                          <argument><expr><call><name pos:line="92" pos:column="27">apr_dso_error<pos:position pos:line="92" pos:column="40"/></name><argument_list pos:line="92" pos:column="40">(<argument><expr><name pos:line="92" pos:column="41">modhandle<pos:position pos:line="92" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="92" pos:column="52">my_error<pos:position pos:line="92" pos:column="60"/></name></expr></argument>, <argument><expr><sizeof pos:line="92" pos:column="62">sizeof<argument_list pos:line="92" pos:column="68">(<argument><expr><name pos:line="92" pos:column="69">my_error<pos:position pos:line="92" pos:column="77"/></name></expr></argument>)<pos:position pos:line="92" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="92" pos:column="79"/></argument_list></call></expr></argument>,
                          <argument><expr><name pos:line="93" pos:column="27">NULL<pos:position pos:line="93" pos:column="31"/></name></expr></argument>)<pos:position pos:line="93" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="33"/></return>
    }<pos:position pos:line="94" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">ap_log_perror<pos:position pos:line="95" pos:column="18"/></name><argument_list pos:line="95" pos:column="18">(<argument><expr><name pos:line="95" pos:column="19">APLOG_MARK<pos:position pos:line="95" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="31">APLOG_DEBUG<pos:position pos:line="95" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="95" pos:column="44">0<pos:position pos:line="95" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="95" pos:column="47">cmd<pos:position pos:line="95" pos:column="50"/></name><operator pos:line="95" pos:column="50">-&gt;<pos:position pos:line="95" pos:column="55"/></operator><name pos:line="95" pos:column="52">pool<pos:position pos:line="95" pos:column="56"/></name></name></expr></argument>,
                 <argument><expr><literal type="string" pos:line="96" pos:column="18">"loaded module %s"<pos:position pos:line="96" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="96" pos:column="38">modname<pos:position pos:line="96" pos:column="45"/></name></expr></argument>)<pos:position pos:line="96" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="98" pos:column="5">/*
     * Retrieve the pointer to the module structure through the module name:
     * First with the hidden variant (prefix `AP_') and then with the plain
     * symbol name.
     */</comment>
    <if pos:line="103" pos:column="5">if <condition pos:line="103" pos:column="8">(<expr><call><name pos:line="103" pos:column="9">apr_dso_sym<pos:position pos:line="103" pos:column="20"/></name><argument_list pos:line="103" pos:column="20">(<argument><expr><operator pos:line="103" pos:column="21">&amp;<pos:position pos:line="103" pos:column="26"/></operator><name pos:line="103" pos:column="22">modsym<pos:position pos:line="103" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="30">modhandle<pos:position pos:line="103" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="41">modname<pos:position pos:line="103" pos:column="48"/></name></expr></argument>)<pos:position pos:line="103" pos:column="49"/></argument_list></call> <operator pos:line="103" pos:column="50">!=<pos:position pos:line="103" pos:column="52"/></operator> <name pos:line="103" pos:column="53">APR_SUCCESS<pos:position pos:line="103" pos:column="64"/></name></expr>)<pos:position pos:line="103" pos:column="65"/></condition><then pos:line="103" pos:column="65"> <block pos:line="103" pos:column="66">{
        <decl_stmt><decl><type><name pos:line="104" pos:column="9">char<pos:position pos:line="104" pos:column="13"/></name></type> <name><name pos:line="104" pos:column="14">my_error<pos:position pos:line="104" pos:column="22"/></name><index pos:line="104" pos:column="22">[<expr><literal type="number" pos:line="104" pos:column="23">256<pos:position pos:line="104" pos:column="26"/></literal></expr>]<pos:position pos:line="104" pos:column="27"/></index></name></decl>;<pos:position pos:line="104" pos:column="28"/></decl_stmt>

        <return pos:line="106" pos:column="9">return <expr><call><name pos:line="106" pos:column="16">apr_pstrcat<pos:position pos:line="106" pos:column="27"/></name><argument_list pos:line="106" pos:column="27">(<argument><expr><name><name pos:line="106" pos:column="28">cmd<pos:position pos:line="106" pos:column="31"/></name><operator pos:line="106" pos:column="31">-&gt;<pos:position pos:line="106" pos:column="36"/></operator><name pos:line="106" pos:column="33">pool<pos:position pos:line="106" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="39">"Can't locate API module structure `"<pos:position pos:line="106" pos:column="76"/></literal></expr></argument>,
                          <argument><expr><name pos:line="107" pos:column="27">modname<pos:position pos:line="107" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="36">"' in file "<pos:position pos:line="107" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="107" pos:column="50">szModuleFile<pos:position pos:line="107" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="107" pos:column="64">": "<pos:position pos:line="107" pos:column="68"/></literal></expr></argument>,
                          <argument><expr><call><name pos:line="108" pos:column="27">apr_dso_error<pos:position pos:line="108" pos:column="40"/></name><argument_list pos:line="108" pos:column="40">(<argument><expr><name pos:line="108" pos:column="41">modhandle<pos:position pos:line="108" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="52">my_error<pos:position pos:line="108" pos:column="60"/></name></expr></argument>, <argument><expr><sizeof pos:line="108" pos:column="62">sizeof<argument_list pos:line="108" pos:column="68">(<argument><expr><name pos:line="108" pos:column="69">my_error<pos:position pos:line="108" pos:column="77"/></name></expr></argument>)<pos:position pos:line="108" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="108" pos:column="79"/></argument_list></call></expr></argument>,
                          <argument><expr><name pos:line="109" pos:column="27">NULL<pos:position pos:line="109" pos:column="31"/></name></expr></argument>)<pos:position pos:line="109" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="109" pos:column="33"/></return>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="111" pos:column="5">modp<pos:position pos:line="111" pos:column="9"/></name> <operator pos:line="111" pos:column="10">=<pos:position pos:line="111" pos:column="11"/></operator> <operator pos:line="111" pos:column="12">(<pos:position pos:line="111" pos:column="13"/></operator><name pos:line="111" pos:column="13">module<pos:position pos:line="111" pos:column="19"/></name><operator pos:line="111" pos:column="19">*<pos:position pos:line="111" pos:column="20"/></operator><operator pos:line="111" pos:column="20">)<pos:position pos:line="111" pos:column="21"/></operator> <name pos:line="111" pos:column="22">modsym<pos:position pos:line="111" pos:column="28"/></name></expr>;<pos:position pos:line="111" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="112" pos:column="5">modp<pos:position pos:line="112" pos:column="9"/></name><operator pos:line="112" pos:column="9">-&gt;<pos:position pos:line="112" pos:column="14"/></operator><name pos:line="112" pos:column="11">dynamic_load_handle<pos:position pos:line="112" pos:column="30"/></name></name> <operator pos:line="112" pos:column="31">=<pos:position pos:line="112" pos:column="32"/></operator> <operator pos:line="112" pos:column="33">(<pos:position pos:line="112" pos:column="34"/></operator><name pos:line="112" pos:column="34">apr_dso_handle_t<pos:position pos:line="112" pos:column="50"/></name> <operator pos:line="112" pos:column="51">*<pos:position pos:line="112" pos:column="52"/></operator><operator pos:line="112" pos:column="52">)<pos:position pos:line="112" pos:column="53"/></operator><name pos:line="112" pos:column="53">modhandle<pos:position pos:line="112" pos:column="62"/></name></expr>;<pos:position pos:line="112" pos:column="63"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="113" pos:column="5">modi<pos:position pos:line="113" pos:column="9"/></name><operator pos:line="113" pos:column="9">-&gt;<pos:position pos:line="113" pos:column="14"/></operator><name pos:line="113" pos:column="11">modp<pos:position pos:line="113" pos:column="15"/></name></name> <operator pos:line="113" pos:column="16">=<pos:position pos:line="113" pos:column="17"/></operator> <name pos:line="113" pos:column="18">modp<pos:position pos:line="113" pos:column="22"/></name></expr>;<pos:position pos:line="113" pos:column="23"/></expr_stmt>

    <comment type="block" pos:line="115" pos:column="5">/*
     * Make sure the found module structure is really a module structure
     *
     */</comment>
    <if pos:line="119" pos:column="5">if <condition pos:line="119" pos:column="8">(<expr><name><name pos:line="119" pos:column="9">modp<pos:position pos:line="119" pos:column="13"/></name><operator pos:line="119" pos:column="13">-&gt;<pos:position pos:line="119" pos:column="18"/></operator><name pos:line="119" pos:column="15">magic<pos:position pos:line="119" pos:column="20"/></name></name> <operator pos:line="119" pos:column="21">!=<pos:position pos:line="119" pos:column="23"/></operator> <name pos:line="119" pos:column="24">MODULE_MAGIC_COOKIE<pos:position pos:line="119" pos:column="43"/></name></expr>)<pos:position pos:line="119" pos:column="44"/></condition><then pos:line="119" pos:column="44"> <block pos:line="119" pos:column="45">{
        <return pos:line="120" pos:column="9">return <macro><name pos:line="120" pos:column="16">apr_psprintf<pos:position pos:line="120" pos:column="28"/></name><argument_list pos:line="120" pos:column="28">(<argument pos:line="120" pos:column="29">cmd-&gt;pool<pos:position pos:line="120" pos:column="38"/></argument>, <argument><literal type="string" pos:line="120" pos:column="40">"<pos:position pos:line="120" pos:column="41"/></literal></argument></argument_list></macro></return></block></then></if></block></function>API module structure '%s' in fil</unit>
