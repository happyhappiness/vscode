<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6766.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">h2_conn_io_pass<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">h2_conn_io<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">io<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">apr_bucket_brigade<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">bb<pos:position pos:line="1" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="69"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_bucket<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">b<pos:position pos:line="3" pos:column="18"/></name></decl>;<pos:position pos:line="3" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">status<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><name pos:line="4" pos:column="27">APR_SUCCESS<pos:position pos:line="4" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="39"/></decl_stmt>
    
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">check_write_size<pos:position pos:line="6" pos:column="21"/></name><argument_list pos:line="6" pos:column="21">(<argument><expr><name pos:line="6" pos:column="22">io<pos:position pos:line="6" pos:column="24"/></name></expr></argument>)<pos:position pos:line="6" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="26"/></expr_stmt>
    <while pos:line="7" pos:column="5">while <condition pos:line="7" pos:column="11">(<expr><operator pos:line="7" pos:column="12">!<pos:position pos:line="7" pos:column="13"/></operator><call><name pos:line="7" pos:column="13">APR_BRIGADE_EMPTY<pos:position pos:line="7" pos:column="30"/></name><argument_list pos:line="7" pos:column="30">(<argument><expr><name pos:line="7" pos:column="31">bb<pos:position pos:line="7" pos:column="33"/></name></expr></argument>)<pos:position pos:line="7" pos:column="34"/></argument_list></call> <operator pos:line="7" pos:column="35">&amp;&amp;<pos:position pos:line="7" pos:column="45"/></operator> <name pos:line="7" pos:column="38">status<pos:position pos:line="7" pos:column="44"/></name> <operator pos:line="7" pos:column="45">==<pos:position pos:line="7" pos:column="47"/></operator> <name pos:line="7" pos:column="48">APR_SUCCESS<pos:position pos:line="7" pos:column="59"/></name></expr>)<pos:position pos:line="7" pos:column="60"/></condition> <block pos:line="7" pos:column="61">{
        <expr_stmt><expr><name pos:line="8" pos:column="9">b<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">=<pos:position pos:line="8" pos:column="12"/></operator> <call><name pos:line="8" pos:column="13">APR_BRIGADE_FIRST<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">bb<pos:position pos:line="8" pos:column="33"/></name></expr></argument>)<pos:position pos:line="8" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="35"/></expr_stmt>
        
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><call><name pos:line="10" pos:column="13">APR_BUCKET_IS_METADATA<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name pos:line="10" pos:column="36">b<pos:position pos:line="10" pos:column="37"/></name></expr></argument>)<pos:position pos:line="10" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="39"/></condition><then pos:line="10" pos:column="39"> <block pos:line="10" pos:column="40">{
            <comment type="block" pos:line="11" pos:column="13">/* need to finish any open scratch bucket, as meta data 
             * needs to be forward "in order". */</comment>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">append_scratch<pos:position pos:line="13" pos:column="27"/></name><argument_list pos:line="13" pos:column="27">(<argument><expr><name pos:line="13" pos:column="28">io<pos:position pos:line="13" pos:column="30"/></name></expr></argument>)<pos:position pos:line="13" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name pos:line="14" pos:column="31">b<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="15" pos:column="36"/></name><argument_list pos:line="15" pos:column="36">(<argument><expr><name><name pos:line="15" pos:column="37">io<pos:position pos:line="15" pos:column="39"/></name><operator pos:line="15" pos:column="39">-&gt;<pos:position pos:line="15" pos:column="44"/></operator><name pos:line="15" pos:column="41">output<pos:position pos:line="15" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="49">b<pos:position pos:line="15" pos:column="50"/></name></expr></argument>)<pos:position pos:line="15" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then>
        <elseif pos:line="17" pos:column="9">else <if pos:line="17" pos:column="14">if <condition pos:line="17" pos:column="17">(<expr><name><name pos:line="17" pos:column="18">io<pos:position pos:line="17" pos:column="20"/></name><operator pos:line="17" pos:column="20">-&gt;<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="22">buffer_output<pos:position pos:line="17" pos:column="35"/></name></name></expr>)<pos:position pos:line="17" pos:column="36"/></condition><then pos:line="17" pos:column="36"> <block pos:line="17" pos:column="37">{
            <decl_stmt><decl><type><name pos:line="18" pos:column="13">apr_size_t<pos:position pos:line="18" pos:column="23"/></name></type> <name pos:line="18" pos:column="24">remain<pos:position pos:line="18" pos:column="30"/></name> <init pos:line="18" pos:column="31">= <expr><call><name pos:line="18" pos:column="33">assure_scratch_space<pos:position pos:line="18" pos:column="53"/></name><argument_list pos:line="18" pos:column="53">(<argument><expr><name pos:line="18" pos:column="54">io<pos:position pos:line="18" pos:column="56"/></name></expr></argument>)<pos:position pos:line="18" pos:column="57"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="58"/></decl_stmt>
            <if pos:line="19" pos:column="13">if <condition pos:line="19" pos:column="16">(<expr><name><name pos:line="19" pos:column="17">b<pos:position pos:line="19" pos:column="18"/></name><operator pos:line="19" pos:column="18">-&gt;<pos:position pos:line="19" pos:column="23"/></operator><name pos:line="19" pos:column="20">length<pos:position pos:line="19" pos:column="26"/></name></name> <operator pos:line="19" pos:column="27">&gt;<pos:position pos:line="19" pos:column="31"/></operator> <name pos:line="19" pos:column="29">remain<pos:position pos:line="19" pos:column="35"/></name></expr>)<pos:position pos:line="19" pos:column="36"/></condition><then pos:line="19" pos:column="36"> <block pos:line="19" pos:column="37">{
                <expr_stmt><expr><call><name pos:line="20" pos:column="17">apr_bucket_split<pos:position pos:line="20" pos:column="33"/></name><argument_list pos:line="20" pos:column="33">(<argument><expr><name pos:line="20" pos:column="34">b<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">remain<pos:position pos:line="20" pos:column="43"/></name></expr></argument>)<pos:position pos:line="20" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="45"/></expr_stmt>
                <if pos:line="21" pos:column="17">if <condition pos:line="21" pos:column="20">(<expr><name><name pos:line="21" pos:column="21">io<pos:position pos:line="21" pos:column="23"/></name><operator pos:line="21" pos:column="23">-&gt;<pos:position pos:line="21" pos:column="28"/></operator><name pos:line="21" pos:column="25">slen<pos:position pos:line="21" pos:column="29"/></name></name> <operator pos:line="21" pos:column="30">==<pos:position pos:line="21" pos:column="32"/></operator> <literal type="number" pos:line="21" pos:column="33">0<pos:position pos:line="21" pos:column="34"/></literal></expr>)<pos:position pos:line="21" pos:column="35"/></condition><then pos:line="21" pos:column="35"> <block pos:line="21" pos:column="36">{
                    <comment type="block" pos:line="22" pos:column="21">/* complete write_size bucket, append unchanged */</comment>
                    <expr_stmt><expr><call><name pos:line="23" pos:column="21">APR_BUCKET_REMOVE<pos:position pos:line="23" pos:column="38"/></name><argument_list pos:line="23" pos:column="38">(<argument><expr><name pos:line="23" pos:column="39">b<pos:position pos:line="23" pos:column="40"/></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="24" pos:column="21">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="24" pos:column="44"/></name><argument_list pos:line="24" pos:column="44">(<argument><expr><name><name pos:line="24" pos:column="45">io<pos:position pos:line="24" pos:column="47"/></name><operator pos:line="24" pos:column="47">-&gt;<pos:position pos:line="24" pos:column="52"/></operator><name pos:line="24" pos:column="49">output<pos:position pos:line="24" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">b<pos:position pos:line="24" pos:column="58"/></name></expr></argument>)<pos:position pos:line="24" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="60"/></expr_stmt>
<cpp:if pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">if<pos:position pos:line="25" pos:column="4"/></cpp:directive> <expr><name pos:line="25" pos:column="5">LOG_SCRATCH<pos:position pos:line="25" pos:column="16"/></name></expr></cpp:if>
                    <expr_stmt><expr><call><name pos:line="26" pos:column="21">ap_log_cerror<pos:position pos:line="26" pos:column="34"/></name><argument_list pos:line="26" pos:column="34">(<argument><expr><name pos:line="26" pos:column="35">APLOG_MARK<pos:position pos:line="26" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="47">APLOG_DEBUG<pos:position pos:line="26" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="60">0<pos:position pos:line="26" pos:column="61"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="63">io<pos:position pos:line="26" pos:column="65"/></name><operator pos:line="26" pos:column="65">-&gt;<pos:position pos:line="26" pos:column="70"/></operator><name pos:line="26" pos:column="67">c<pos:position pos:line="26" pos:column="68"/></name></name></expr></argument>, <argument><expr><call><name pos:line="26" pos:column="70">APLOGNO<pos:position pos:line="26" pos:column="77"/></name><argument_list pos:line="26" pos:column="77">(<argument><expr><literal type="number" pos:line="26" pos:column="78">03391<pos:position pos:line="26" pos:column="83"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="84"/></argument_list></call>
                                  <literal type="string" pos:line="27" pos:column="35">"h2_conn_io(%ld): pass bucket(%ld)"<pos:position pos:line="27" pos:column="70"/></literal></expr></argument>, 
                                  <argument><expr><name><name pos:line="28" pos:column="35">io<pos:position pos:line="28" pos:column="37"/></name><operator pos:line="28" pos:column="37">-&gt;<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="39">c<pos:position pos:line="28" pos:column="40"/></name><operator pos:line="28" pos:column="40">-&gt;<pos:position pos:line="28" pos:column="45"/></operator><name pos:line="28" pos:column="42">id<pos:position pos:line="28" pos:column="44"/></name></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="46">(<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="47">long<pos:position pos:line="28" pos:column="51"/></name><operator pos:line="28" pos:column="51">)<pos:position pos:line="28" pos:column="52"/></operator><name><name pos:line="28" pos:column="52">b<pos:position pos:line="28" pos:column="53"/></name><operator pos:line="28" pos:column="53">-&gt;<pos:position pos:line="28" pos:column="58"/></operator><name pos:line="28" pos:column="55">length<pos:position pos:line="28" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="28" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif>
                    <continue pos:line="30" pos:column="21">continue;<pos:position pos:line="30" pos:column="30"/></continue>
                }<pos:position pos:line="31" pos:column="18"/></block></then></if>
            }<pos:position pos:line="32" pos:column="14"/></block></then>
            <else pos:line="33" pos:column="13">else <block pos:line="33" pos:column="18">{
                <comment type="block" pos:line="34" pos:column="17">/* bucket fits in remain, copy to scratch */</comment>
                <expr_stmt><expr><name pos:line="35" pos:column="17">status<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">=<pos:position pos:line="35" pos:column="25"/></operator> <call><name pos:line="35" pos:column="26">read_to_scratch<pos:position pos:line="35" pos:column="41"/></name><argument_list pos:line="35" pos:column="41">(<argument><expr><name pos:line="35" pos:column="42">io<pos:position pos:line="35" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="46">b<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="36" pos:column="17">apr_bucket_delete<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">b<pos:position pos:line="36" pos:column="36"/></name></expr></argument>)<pos:position pos:line="36" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="38"/></expr_stmt>
                <continue pos:line="37" pos:column="17">continue;<pos:position pos:line="37" pos:column="26"/></continue>
            }<pos:position pos:line="38" pos:column="14"/></block></else></if>
        }<pos:position pos:line="39" pos:column="10"/></block></then></if></elseif>
        <else pos:line="40" pos:column="9">else <block pos:line="40" pos:column="14">{
            <comment type="block" pos:line="41" pos:column="13">/* no buffering, forward buckets setaside on flush */</comment>
            <if pos:line="42" pos:column="13">if <condition pos:line="42" pos:column="16">(<expr><call><name pos:line="42" pos:column="17">APR_BUCKET_IS_TRANSIENT<pos:position pos:line="42" pos:column="40"/></name><argument_list pos:line="42" pos:column="40">(<argument><expr><name pos:line="42" pos:column="41">b<pos:position pos:line="42" pos:column="42"/></name></expr></argument>)<pos:position pos:line="42" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="42" pos:column="44"/></condition><then pos:line="42" pos:column="44"> <block pos:line="42" pos:column="45">{
                <expr_stmt><expr><call><name pos:line="43" pos:column="17">apr_bucket_setaside<pos:position pos:line="43" pos:column="36"/></name><argument_list pos:line="43" pos:column="36">(<argument><expr><name pos:line="43" pos:column="37">b<pos:position pos:line="43" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="40">io<pos:position pos:line="43" pos:column="42"/></name><operator pos:line="43" pos:column="42">-&gt;<pos:position pos:line="43" pos:column="47"/></operator><name pos:line="43" pos:column="44">c<pos:position pos:line="43" pos:column="45"/></name><operator pos:line="43" pos:column="45">-&gt;<pos:position pos:line="43" pos:column="50"/></operator><name pos:line="43" pos:column="47">pool<pos:position pos:line="43" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="53"/></expr_stmt>
            }<pos:position pos:line="44" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="45" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="45" pos:column="30"/></name><argument_list pos:line="45" pos:column="30">(<argument><expr><name pos:line="45" pos:column="31">b<pos:position pos:line="45" pos:column="32"/></name></expr></argument>)<pos:position pos:line="45" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="46" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">(<argument><expr><name><name pos:line="46" pos:column="37">io<pos:position pos:line="46" pos:column="39"/></name><operator pos:line="46" pos:column="39">-&gt;<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="41">output<pos:position pos:line="46" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="49">b<pos:position pos:line="46" pos:column="50"/></name></expr></argument>)<pos:position pos:line="46" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="52"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></else></if>
    }<pos:position pos:line="48" pos:column="6"/></block></while>
    
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">status<pos:position pos:line="50" pos:column="15"/></name> <operator pos:line="50" pos:column="16">==<pos:position pos:line="50" pos:column="18"/></operator> <name pos:line="50" pos:column="19">APR_SUCCESS<pos:position pos:line="50" pos:column="30"/></name></expr>)<pos:position pos:line="50" pos:column="31"/></condition><then pos:line="50" pos:column="31"> <block pos:line="50" pos:column="32">{
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><operator pos:line="51" pos:column="13">!<pos:position pos:line="51" pos:column="14"/></operator><call><name pos:line="51" pos:column="14">APR_BRIGADE_EMPTY<pos:position pos:line="51" pos:column="31"/></name><argument_list pos:line="51" pos:column="31">(<argument><expr><name><name pos:line="51" pos:column="32">io<pos:position pos:line="51" pos:column="34"/></name><operator pos:line="51" pos:column="34">-&gt;<pos:position pos:line="51" pos:column="39"/></operator><name pos:line="51" pos:column="36">output<pos:position pos:line="51" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="44"/></condition><then pos:line="51" pos:column="44"> <block pos:line="51" pos:column="45">{
            <decl_stmt><decl><type><name pos:line="52" pos:column="13">apr_off_t<pos:position pos:line="52" pos:column="22"/></name></type> <name pos:line="52" pos:column="23">len<pos:position pos:line="52" pos:column="26"/></name> <init pos:line="52" pos:column="27">= <expr><call><name pos:line="52" pos:column="29">h2_brigade_mem_size<pos:position pos:line="52" pos:column="48"/></name><argument_list pos:line="52" pos:column="48">(<argument><expr><name><name pos:line="52" pos:column="49">io<pos:position pos:line="52" pos:column="51"/></name><operator pos:line="52" pos:column="51">-&gt;<pos:position pos:line="52" pos:column="56"/></operator><name pos:line="52" pos:column="53">output<pos:position pos:line="52" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="52" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="52" pos:column="61"/></decl_stmt>
            <if pos:line="53" pos:column="13">if <condition pos:line="53" pos:column="16">(<expr><name pos:line="53" pos:column="17">len<pos:position pos:line="53" pos:column="20"/></name> <operator pos:line="53" pos:column="21">&gt;=<pos:position pos:line="53" pos:column="26"/></operator> <name><name pos:line="53" pos:column="24">io<pos:position pos:line="53" pos:column="26"/></name><operator pos:line="53" pos:column="26">-&gt;<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="28">pass_threshold<pos:position pos:line="53" pos:column="42"/></name></name></expr>)<pos:position pos:line="53" pos:column="43"/></condition><then pos:line="53" pos:column="43"> <block pos:line="53" pos:column="44">{
                <return pos:line="54" pos:column="17">return <expr><call><name pos:line="54" pos:column="24">pass_output<pos:position pos:line="54" pos:column="35"/></name><argument_list pos:line="54" pos:column="35">(<argument><expr><name pos:line="54" pos:column="36">io<pos:position pos:line="54" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="40">0<pos:position pos:line="54" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="54" pos:column="43">NULL<pos:position pos:line="54" pos:column="47"/></name></expr></argument>)<pos:position pos:line="54" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="49"/></return>
            }<pos:position pos:line="55" pos:column="14"/></block></then></if>
        }<pos:position pos:line="56" pos:column="10"/></block></then></if>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if>
    <return pos:line="58" pos:column="5">return <expr><name pos:line="58" pos:column="12">status<pos:position pos:line="58" pos:column="18"/></name></expr>;<pos:position pos:line="58" pos:column="19"/></return>
}<pos:position pos:line="59" pos:column="2"/></block></function></unit>
