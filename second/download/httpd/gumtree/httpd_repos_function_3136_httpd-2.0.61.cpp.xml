<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3136_httpd-2.0.61.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_socket_sendfile<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">apr_socket_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">sock<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">apr_file_t<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">file<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="2" pos:column="34">apr_hdtr_t<pos:position pos:line="2" pos:column="44"/></name> <modifier pos:line="2" pos:column="45">*<pos:position pos:line="2" pos:column="46"/></modifier></type><name pos:line="2" pos:column="46">hdtr<pos:position pos:line="2" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="52">apr_off_t<pos:position pos:line="2" pos:column="61"/></name> <modifier pos:line="2" pos:column="62">*<pos:position pos:line="2" pos:column="63"/></modifier></type><name pos:line="2" pos:column="63">offset<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
                                 <parameter><decl><type><name pos:line="3" pos:column="34">apr_size_t<pos:position pos:line="3" pos:column="44"/></name> <modifier pos:line="3" pos:column="45">*<pos:position pos:line="3" pos:column="46"/></modifier></type><name pos:line="3" pos:column="46">len<pos:position pos:line="3" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="51">apr_int32_t<pos:position pos:line="3" pos:column="62"/></name></type> <name pos:line="3" pos:column="63">flags<pos:position pos:line="3" pos:column="68"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="69"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">off_t<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">off<pos:position pos:line="5" pos:column="14"/></name> <init pos:line="5" pos:column="15">= <expr><operator pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></operator><name pos:line="5" pos:column="18">offset<pos:position pos:line="5" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">rv<pos:position pos:line="6" pos:column="11"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="13">nbytes<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><literal type="number" pos:line="6" pos:column="22">0<pos:position pos:line="6" pos:column="23"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="25">total_hdrbytes<pos:position pos:line="6" pos:column="39"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="41">i<pos:position pos:line="6" pos:column="42"/></name></decl>;<pos:position pos:line="6" pos:column="43"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_status_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">arv<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><name pos:line="9" pos:column="10">hdtr<pos:position pos:line="9" pos:column="14"/></name></expr>)<pos:position pos:line="9" pos:column="15"/></condition><then pos:line="9" pos:column="15"> <block pos:line="9" pos:column="16">{
        <expr_stmt><expr><name pos:line="10" pos:column="9">hdtr<pos:position pos:line="10" pos:column="13"/></name> <operator pos:line="10" pos:column="14">=<pos:position pos:line="10" pos:column="15"/></operator> <operator pos:line="10" pos:column="16">&amp;<pos:position pos:line="10" pos:column="21"/></operator><name pos:line="10" pos:column="17">no_hdtr<pos:position pos:line="10" pos:column="24"/></name></expr>;<pos:position pos:line="10" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="13" pos:column="5">/* Ignore flags for now. */</comment>
    <expr_stmt><expr><name pos:line="14" pos:column="5">flags<pos:position pos:line="14" pos:column="10"/></name> <operator pos:line="14" pos:column="11">=<pos:position pos:line="14" pos:column="12"/></operator> <literal type="number" pos:line="14" pos:column="13">0<pos:position pos:line="14" pos:column="14"/></literal></expr>;<pos:position pos:line="14" pos:column="15"/></expr_stmt>

    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">hdtr<pos:position pos:line="16" pos:column="13"/></name><operator pos:line="16" pos:column="13">-&gt;<pos:position pos:line="16" pos:column="18"/></operator><name pos:line="16" pos:column="15">numheaders<pos:position pos:line="16" pos:column="25"/></name></name> <operator pos:line="16" pos:column="26">&gt;<pos:position pos:line="16" pos:column="30"/></operator> <literal type="number" pos:line="16" pos:column="28">0<pos:position pos:line="16" pos:column="29"/></literal></expr>)<pos:position pos:line="16" pos:column="30"/></condition><then pos:line="16" pos:column="30"> <block pos:line="16" pos:column="31">{
        <decl_stmt><decl><type><name pos:line="17" pos:column="9">apr_size_t<pos:position pos:line="17" pos:column="19"/></name></type> <name pos:line="17" pos:column="20">hdrbytes<pos:position pos:line="17" pos:column="28"/></name></decl>;<pos:position pos:line="17" pos:column="29"/></decl_stmt>

        <comment type="block" pos:line="19" pos:column="9">/* cork before writing headers */</comment>
        <expr_stmt><expr><name pos:line="20" pos:column="9">rv<pos:position pos:line="20" pos:column="11"/></name> <operator pos:line="20" pos:column="12">=<pos:position pos:line="20" pos:column="13"/></operator> <call><name pos:line="20" pos:column="14">apr_socket_opt_set<pos:position pos:line="20" pos:column="32"/></name><argument_list pos:line="20" pos:column="32">(<argument><expr><name pos:line="20" pos:column="33">sock<pos:position pos:line="20" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="39">APR_TCP_NOPUSH<pos:position pos:line="20" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="55">1<pos:position pos:line="20" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="58"/></expr_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name pos:line="21" pos:column="13">rv<pos:position pos:line="21" pos:column="15"/></name> <operator pos:line="21" pos:column="16">!=<pos:position pos:line="21" pos:column="18"/></operator> <name pos:line="21" pos:column="19">APR_SUCCESS<pos:position pos:line="21" pos:column="30"/></name></expr>)<pos:position pos:line="21" pos:column="31"/></condition><then pos:line="21" pos:column="31"> <block pos:line="21" pos:column="32">{
            <return pos:line="22" pos:column="13">return <expr><name pos:line="22" pos:column="20">rv<pos:position pos:line="22" pos:column="22"/></name></expr>;<pos:position pos:line="22" pos:column="23"/></return>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="25" pos:column="9">/* Now write the headers */</comment>
        <expr_stmt><expr><name pos:line="26" pos:column="9">arv<pos:position pos:line="26" pos:column="12"/></name> <operator pos:line="26" pos:column="13">=<pos:position pos:line="26" pos:column="14"/></operator> <call><name pos:line="26" pos:column="15">apr_socket_sendv<pos:position pos:line="26" pos:column="31"/></name><argument_list pos:line="26" pos:column="31">(<argument><expr><name pos:line="26" pos:column="32">sock<pos:position pos:line="26" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="38">hdtr<pos:position pos:line="26" pos:column="42"/></name><operator pos:line="26" pos:column="42">-&gt;<pos:position pos:line="26" pos:column="47"/></operator><name pos:line="26" pos:column="44">headers<pos:position pos:line="26" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="53">hdtr<pos:position pos:line="26" pos:column="57"/></name><operator pos:line="26" pos:column="57">-&gt;<pos:position pos:line="26" pos:column="62"/></operator><name pos:line="26" pos:column="59">numheaders<pos:position pos:line="26" pos:column="69"/></name></name></expr></argument>,
                               <argument><expr><operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator><name pos:line="27" pos:column="33">hdrbytes<pos:position pos:line="27" pos:column="41"/></name></expr></argument>)<pos:position pos:line="27" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="43"/></expr_stmt>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name pos:line="28" pos:column="13">arv<pos:position pos:line="28" pos:column="16"/></name> <operator pos:line="28" pos:column="17">!=<pos:position pos:line="28" pos:column="19"/></operator> <name pos:line="28" pos:column="20">APR_SUCCESS<pos:position pos:line="28" pos:column="31"/></name></expr>)<pos:position pos:line="28" pos:column="32"/></condition><then pos:line="28" pos:column="32"> <block pos:line="28" pos:column="33">{
            <expr_stmt><expr><operator pos:line="29" pos:column="13">*<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">len<pos:position pos:line="29" pos:column="17"/></name> <operator pos:line="29" pos:column="18">=<pos:position pos:line="29" pos:column="19"/></operator> <literal type="number" pos:line="29" pos:column="20">0<pos:position pos:line="29" pos:column="21"/></literal></expr>;<pos:position pos:line="29" pos:column="22"/></expr_stmt>
            <return pos:line="30" pos:column="13">return <expr><name pos:line="30" pos:column="20">errno<pos:position pos:line="30" pos:column="25"/></name></expr>;<pos:position pos:line="30" pos:column="26"/></return>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="32" pos:column="9">nbytes<pos:position pos:line="32" pos:column="15"/></name> <operator pos:line="32" pos:column="16">+=<pos:position pos:line="32" pos:column="18"/></operator> <name pos:line="32" pos:column="19">hdrbytes<pos:position pos:line="32" pos:column="27"/></name></expr>;<pos:position pos:line="32" pos:column="28"/></expr_stmt>

        <comment type="block" pos:line="34" pos:column="9">/* If this was a partial write and we aren't doing timeouts, 
         * return now with the partial byte count; this is a non-blocking 
         * socket.
         */</comment>
        <expr_stmt><expr><name pos:line="38" pos:column="9">total_hdrbytes<pos:position pos:line="38" pos:column="23"/></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <literal type="number" pos:line="38" pos:column="26">0<pos:position pos:line="38" pos:column="27"/></literal></expr>;<pos:position pos:line="38" pos:column="28"/></expr_stmt>
        <for pos:line="39" pos:column="9">for <control pos:line="39" pos:column="13">(<init><expr><name pos:line="39" pos:column="14">i<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <literal type="number" pos:line="39" pos:column="18">0<pos:position pos:line="39" pos:column="19"/></literal></expr>;<pos:position pos:line="39" pos:column="20"/></init> <condition><expr><name pos:line="39" pos:column="21">i<pos:position pos:line="39" pos:column="22"/></name> <operator pos:line="39" pos:column="23">&lt;<pos:position pos:line="39" pos:column="27"/></operator> <name><name pos:line="39" pos:column="25">hdtr<pos:position pos:line="39" pos:column="29"/></name><operator pos:line="39" pos:column="29">-&gt;<pos:position pos:line="39" pos:column="34"/></operator><name pos:line="39" pos:column="31">numheaders<pos:position pos:line="39" pos:column="41"/></name></name></expr>;<pos:position pos:line="39" pos:column="42"/></condition> <incr><expr><name pos:line="39" pos:column="43">i<pos:position pos:line="39" pos:column="44"/></name><operator pos:line="39" pos:column="44">++<pos:position pos:line="39" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="39" pos:column="47"/></control> <block pos:line="39" pos:column="48">{
            <expr_stmt><expr><name pos:line="40" pos:column="13">total_hdrbytes<pos:position pos:line="40" pos:column="27"/></name> <operator pos:line="40" pos:column="28">+=<pos:position pos:line="40" pos:column="30"/></operator> <name><name pos:line="40" pos:column="31">hdtr<pos:position pos:line="40" pos:column="35"/></name><operator pos:line="40" pos:column="35">-&gt;<pos:position pos:line="40" pos:column="40"/></operator><name pos:line="40" pos:column="37">headers<pos:position pos:line="40" pos:column="44"/></name><index pos:line="40" pos:column="44">[<expr><name pos:line="40" pos:column="45">i<pos:position pos:line="40" pos:column="46"/></name></expr>]<pos:position pos:line="40" pos:column="47"/></index></name><operator pos:line="40" pos:column="47">.<pos:position pos:line="40" pos:column="48"/></operator><name pos:line="40" pos:column="48">iov_len<pos:position pos:line="40" pos:column="55"/></name></expr>;<pos:position pos:line="40" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="41" pos:column="10"/></block></for>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">hdrbytes<pos:position pos:line="42" pos:column="21"/></name> <operator pos:line="42" pos:column="22">&lt;<pos:position pos:line="42" pos:column="26"/></operator> <name pos:line="42" pos:column="24">total_hdrbytes<pos:position pos:line="42" pos:column="38"/></name></expr>)<pos:position pos:line="42" pos:column="39"/></condition><then pos:line="42" pos:column="39"> <block pos:line="42" pos:column="40">{
            <expr_stmt><expr><operator pos:line="43" pos:column="13">*<pos:position pos:line="43" pos:column="14"/></operator><name pos:line="43" pos:column="14">len<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <name pos:line="43" pos:column="20">hdrbytes<pos:position pos:line="43" pos:column="28"/></name></expr>;<pos:position pos:line="43" pos:column="29"/></expr_stmt>
            <return pos:line="44" pos:column="13">return <expr><call><name pos:line="44" pos:column="20">apr_socket_opt_set<pos:position pos:line="44" pos:column="38"/></name><argument_list pos:line="44" pos:column="38">(<argument><expr><name pos:line="44" pos:column="39">sock<pos:position pos:line="44" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="45">APR_TCP_NOPUSH<pos:position pos:line="44" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="44" pos:column="61">0<pos:position pos:line="44" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="64"/></return>
        }<pos:position pos:line="45" pos:column="10"/></block></then></if>
    }<pos:position pos:line="46" pos:column="6"/></block></then></if>

    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><name><name pos:line="48" pos:column="9">sock<pos:position pos:line="48" pos:column="13"/></name><operator pos:line="48" pos:column="13">-&gt;<pos:position pos:line="48" pos:column="18"/></operator><name pos:line="48" pos:column="15">netmask<pos:position pos:line="48" pos:column="22"/></name></name> <operator pos:line="48" pos:column="23">&amp;<pos:position pos:line="48" pos:column="28"/></operator> <name pos:line="48" pos:column="25">APR_INCOMPLETE_WRITE<pos:position pos:line="48" pos:column="45"/></name></expr>)<pos:position pos:line="48" pos:column="46"/></condition><then pos:line="48" pos:column="46"> <block pos:line="48" pos:column="47">{
        <expr_stmt><expr><name><name pos:line="49" pos:column="9">sock<pos:position pos:line="49" pos:column="13"/></name><operator pos:line="49" pos:column="13">-&gt;<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="15">netmask<pos:position pos:line="49" pos:column="22"/></name></name> <operator pos:line="49" pos:column="23">&amp;=<pos:position pos:line="49" pos:column="29"/></operator> <operator pos:line="49" pos:column="26">~<pos:position pos:line="49" pos:column="27"/></operator><name pos:line="49" pos:column="27">APR_INCOMPLETE_WRITE<pos:position pos:line="49" pos:column="47"/></name></expr>;<pos:position pos:line="49" pos:column="48"/></expr_stmt>
        <goto pos:line="50" pos:column="9">goto <name pos:line="50" pos:column="14">do_select<pos:position pos:line="50" pos:column="23"/></name>;<pos:position pos:line="50" pos:column="24"/></goto>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <do pos:line="53" pos:column="5">do <block pos:line="53" pos:column="8">{
        <expr_stmt><expr><name pos:line="54" pos:column="9">rv<pos:position pos:line="54" pos:column="11"/></name> <operator pos:line="54" pos:column="12">=<pos:position pos:line="54" pos:column="13"/></operator> <call><name pos:line="54" pos:column="14">sendfile<pos:position pos:line="54" pos:column="22"/></name><argument_list pos:line="54" pos:column="22">(<argument><expr><name><name pos:line="54" pos:column="23">sock<pos:position pos:line="54" pos:column="27"/></name><operator pos:line="54" pos:column="27">-&gt;<pos:position pos:line="54" pos:column="32"/></operator><name pos:line="54" pos:column="29">socketdes<pos:position pos:line="54" pos:column="38"/></name></name></expr></argument>,    <comment type="block" pos:line="54" pos:column="43">/* socket */</comment>
                      <argument><expr><name><name pos:line="55" pos:column="23">file<pos:position pos:line="55" pos:column="27"/></name><operator pos:line="55" pos:column="27">-&gt;<pos:position pos:line="55" pos:column="32"/></operator><name pos:line="55" pos:column="29">filedes<pos:position pos:line="55" pos:column="36"/></name></name></expr></argument>, <comment type="block" pos:line="55" pos:column="38">/* open file descriptor of the file to be sent */</comment>
                      <argument><expr><operator pos:line="56" pos:column="23">&amp;<pos:position pos:line="56" pos:column="28"/></operator><name pos:line="56" pos:column="24">off<pos:position pos:line="56" pos:column="27"/></name></expr></argument>,    <comment type="block" pos:line="56" pos:column="32">/* where in the file to start */</comment>
                      <argument><expr><operator pos:line="57" pos:column="23">*<pos:position pos:line="57" pos:column="24"/></operator><name pos:line="57" pos:column="24">len<pos:position pos:line="57" pos:column="27"/></name></expr></argument>)<pos:position pos:line="57" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="29"/></expr_stmt>   <comment type="block" pos:line="57" pos:column="32">/* number of bytes to send */</comment>
    }<pos:position pos:line="58" pos:column="6"/></block> while <condition pos:line="58" pos:column="13">(<expr><name pos:line="58" pos:column="14">rv<pos:position pos:line="58" pos:column="16"/></name> <operator pos:line="58" pos:column="17">==<pos:position pos:line="58" pos:column="19"/></operator> <operator pos:line="58" pos:column="20">-<pos:position pos:line="58" pos:column="21"/></operator><literal type="number" pos:line="58" pos:column="21">1<pos:position pos:line="58" pos:column="22"/></literal> <operator pos:line="58" pos:column="23">&amp;&amp;<pos:position pos:line="58" pos:column="33"/></operator> <name pos:line="58" pos:column="26">errno<pos:position pos:line="58" pos:column="31"/></name> <operator pos:line="58" pos:column="32">==<pos:position pos:line="58" pos:column="34"/></operator> <name pos:line="58" pos:column="35">EINTR<pos:position pos:line="58" pos:column="40"/></name></expr>)<pos:position pos:line="58" pos:column="41"/></condition>;<pos:position pos:line="58" pos:column="42"/></do>

    <while pos:line="60" pos:column="5">while <condition pos:line="60" pos:column="11">(<expr><name pos:line="60" pos:column="12">rv<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">==<pos:position pos:line="60" pos:column="17"/></operator> <operator pos:line="60" pos:column="18">-<pos:position pos:line="60" pos:column="19"/></operator><literal type="number" pos:line="60" pos:column="19">1<pos:position pos:line="60" pos:column="20"/></literal> <operator pos:line="60" pos:column="21">&amp;&amp;<pos:position pos:line="60" pos:column="31"/></operator> 
        <operator pos:line="61" pos:column="9">(<pos:position pos:line="61" pos:column="10"/></operator><name pos:line="61" pos:column="10">errno<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">==<pos:position pos:line="61" pos:column="18"/></operator> <name pos:line="61" pos:column="19">EAGAIN<pos:position pos:line="61" pos:column="25"/></name> <operator pos:line="61" pos:column="26">||<pos:position pos:line="61" pos:column="28"/></operator> <name pos:line="61" pos:column="29">errno<pos:position pos:line="61" pos:column="34"/></name> <operator pos:line="61" pos:column="35">==<pos:position pos:line="61" pos:column="37"/></operator> <name pos:line="61" pos:column="38">EWOULDBLOCK<pos:position pos:line="61" pos:column="49"/></name><operator pos:line="61" pos:column="49">)<pos:position pos:line="61" pos:column="50"/></operator> <operator pos:line="61" pos:column="51">&amp;&amp;<pos:position pos:line="61" pos:column="61"/></operator> 
        <call><name pos:line="62" pos:column="9">apr_is_option_set<pos:position pos:line="62" pos:column="26"/></name><argument_list pos:line="62" pos:column="26">(<argument><expr><name><name pos:line="62" pos:column="27">sock<pos:position pos:line="62" pos:column="31"/></name><operator pos:line="62" pos:column="31">-&gt;<pos:position pos:line="62" pos:column="36"/></operator><name pos:line="62" pos:column="33">netmask<pos:position pos:line="62" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="62" pos:column="42">APR_SO_TIMEOUT<pos:position pos:line="62" pos:column="56"/></name></expr></argument>)<pos:position pos:line="62" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="62" pos:column="58"/></condition> <block pos:line="62" pos:column="59">{
<label><name pos:line="63" pos:column="1">do_select<pos:position pos:line="63" pos:column="10"/></name>:<pos:position pos:line="63" pos:column="11"/></label>
        <expr_stmt><expr><name pos:line="64" pos:column="9">arv<pos:position pos:line="64" pos:column="12"/></name> <operator pos:line="64" pos:column="13">=<pos:position pos:line="64" pos:column="14"/></operator> <call><name pos:line="64" pos:column="15">apr_wait_for_io_or_timeout<pos:position pos:line="64" pos:column="41"/></name><argument_list pos:line="64" pos:column="41">(<argument><expr><name pos:line="64" pos:column="42">NULL<pos:position pos:line="64" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="48">sock<pos:position pos:line="64" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="64" pos:column="54">0<pos:position pos:line="64" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="57"/></expr_stmt>
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">arv<pos:position pos:line="65" pos:column="16"/></name> <operator pos:line="65" pos:column="17">!=<pos:position pos:line="65" pos:column="19"/></operator> <name pos:line="65" pos:column="20">APR_SUCCESS<pos:position pos:line="65" pos:column="31"/></name></expr>)<pos:position pos:line="65" pos:column="32"/></condition><then pos:line="65" pos:column="32"> <block pos:line="65" pos:column="33">{
            <expr_stmt><expr><operator pos:line="66" pos:column="13">*<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">len<pos:position pos:line="66" pos:column="17"/></name> <operator pos:line="66" pos:column="18">=<pos:position pos:line="66" pos:column="19"/></operator> <literal type="number" pos:line="66" pos:column="20">0<pos:position pos:line="66" pos:column="21"/></literal></expr>;<pos:position pos:line="66" pos:column="22"/></expr_stmt>
            <return pos:line="67" pos:column="13">return <expr><name pos:line="67" pos:column="20">arv<pos:position pos:line="67" pos:column="23"/></name></expr>;<pos:position pos:line="67" pos:column="24"/></return>
        }<pos:position pos:line="68" pos:column="10"/></block></then>
        <else pos:line="69" pos:column="9">else <block pos:line="69" pos:column="14">{
            <do pos:line="70" pos:column="13">do <block pos:line="70" pos:column="16">{
                <expr_stmt><expr><name pos:line="71" pos:column="17">rv<pos:position pos:line="71" pos:column="19"/></name> <operator pos:line="71" pos:column="20">=<pos:position pos:line="71" pos:column="21"/></operator> <call><name pos:line="71" pos:column="22">sendfile<pos:position pos:line="71" pos:column="30"/></name><argument_list pos:line="71" pos:column="30">(<argument><expr><name><name pos:line="71" pos:column="31">sock<pos:position pos:line="71" pos:column="35"/></name><operator pos:line="71" pos:column="35">-&gt;<pos:position pos:line="71" pos:column="40"/></operator><name pos:line="71" pos:column="37">socketdes<pos:position pos:line="71" pos:column="46"/></name></name></expr></argument>,    <comment type="block" pos:line="71" pos:column="51">/* socket */</comment>
                              <argument><expr><name><name pos:line="72" pos:column="31">file<pos:position pos:line="72" pos:column="35"/></name><operator pos:line="72" pos:column="35">-&gt;<pos:position pos:line="72" pos:column="40"/></operator><name pos:line="72" pos:column="37">filedes<pos:position pos:line="72" pos:column="44"/></name></name></expr></argument>, <comment type="block" pos:line="72" pos:column="46">/* open file descriptor of the file to be sent */</comment>
                              <argument><expr><operator pos:line="73" pos:column="31">&amp;<pos:position pos:line="73" pos:column="36"/></operator><name pos:line="73" pos:column="32">off<pos:position pos:line="73" pos:column="35"/></name></expr></argument>,    <comment type="block" pos:line="73" pos:column="40">/* where in the file to start */</comment>
                              <argument><expr><operator pos:line="74" pos:column="31">*<pos:position pos:line="74" pos:column="32"/></operator><name pos:line="74" pos:column="32">len<pos:position pos:line="74" pos:column="35"/></name></expr></argument>)<pos:position pos:line="74" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="74" pos:column="37"/></expr_stmt>    <comment type="block" pos:line="74" pos:column="41">/* number of bytes to send */</comment>
            }<pos:position pos:line="75" pos:column="14"/></block> while <condition pos:line="75" pos:column="21">(<expr><name pos:line="75" pos:column="22">rv<pos:position pos:line="75" pos:column="24"/></name> <operator pos:line="75" pos:column="25">==<pos:position pos:line="75" pos:column="27"/></operator> <operator pos:line="75" pos:column="28">-<pos:position pos:line="75" pos:column="29"/></operator><literal type="number" pos:line="75" pos:column="29">1<pos:position pos:line="75" pos:column="30"/></literal> <operator pos:line="75" pos:column="31">&amp;&amp;<pos:position pos:line="75" pos:column="41"/></operator> <name pos:line="75" pos:column="34">errno<pos:position pos:line="75" pos:column="39"/></name> <operator pos:line="75" pos:column="40">==<pos:position pos:line="75" pos:column="42"/></operator> <name pos:line="75" pos:column="43">EINTR<pos:position pos:line="75" pos:column="48"/></name></expr>)<pos:position pos:line="75" pos:column="49"/></condition>;<pos:position pos:line="75" pos:column="50"/></do>
        }<pos:position pos:line="76" pos:column="10"/></block></else></if>
    }<pos:position pos:line="77" pos:column="6"/></block></while>

    <if pos:line="79" pos:column="5">if <condition pos:line="79" pos:column="8">(<expr><name pos:line="79" pos:column="9">rv<pos:position pos:line="79" pos:column="11"/></name> <operator pos:line="79" pos:column="12">==<pos:position pos:line="79" pos:column="14"/></operator> <operator pos:line="79" pos:column="15">-<pos:position pos:line="79" pos:column="16"/></operator><literal type="number" pos:line="79" pos:column="16">1<pos:position pos:line="79" pos:column="17"/></literal></expr>)<pos:position pos:line="79" pos:column="18"/></condition><then pos:line="79" pos:column="18"> <block pos:line="79" pos:column="19">{
        <expr_stmt><expr><operator pos:line="80" pos:column="9">*<pos:position pos:line="80" pos:column="10"/></operator><name pos:line="80" pos:column="10">len<pos:position pos:line="80" pos:column="13"/></name> <operator pos:line="80" pos:column="14">=<pos:position pos:line="80" pos:column="15"/></operator> <name pos:line="80" pos:column="16">nbytes<pos:position pos:line="80" pos:column="22"/></name></expr>;<pos:position pos:line="80" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="81" pos:column="9">rv<pos:position pos:line="81" pos:column="11"/></name> <operator pos:line="81" pos:column="12">=<pos:position pos:line="81" pos:column="13"/></operator> <name pos:line="81" pos:column="14">errno<pos:position pos:line="81" pos:column="19"/></name></expr>;<pos:position pos:line="81" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">apr_socket_opt_set<pos:position pos:line="82" pos:column="27"/></name><argument_list pos:line="82" pos:column="27">(<argument><expr><name pos:line="82" pos:column="28">sock<pos:position pos:line="82" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="82" pos:column="34">APR_TCP_NOPUSH<pos:position pos:line="82" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="82" pos:column="50">0<pos:position pos:line="82" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="53"/></expr_stmt>
        <return pos:line="83" pos:column="9">return <expr><name pos:line="83" pos:column="16">rv<pos:position pos:line="83" pos:column="18"/></name></expr>;<pos:position pos:line="83" pos:column="19"/></return>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="86" pos:column="5">nbytes<pos:position pos:line="86" pos:column="11"/></name> <operator pos:line="86" pos:column="12">+=<pos:position pos:line="86" pos:column="14"/></operator> <name pos:line="86" pos:column="15">rv<pos:position pos:line="86" pos:column="17"/></name></expr>;<pos:position pos:line="86" pos:column="18"/></expr_stmt>

    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><name pos:line="88" pos:column="9">rv<pos:position pos:line="88" pos:column="11"/></name> <operator pos:line="88" pos:column="12">&lt;<pos:position pos:line="88" pos:column="16"/></operator> <operator pos:line="88" pos:column="14">*<pos:position pos:line="88" pos:column="15"/></operator><name pos:line="88" pos:column="15">len<pos:position pos:line="88" pos:column="18"/></name></expr>)<pos:position pos:line="88" pos:column="19"/></condition><then pos:line="88" pos:column="19"> <block pos:line="88" pos:column="20">{
        <expr_stmt><expr><operator pos:line="89" pos:column="9">*<pos:position pos:line="89" pos:column="10"/></operator><name pos:line="89" pos:column="10">len<pos:position pos:line="89" pos:column="13"/></name> <operator pos:line="89" pos:column="14">=<pos:position pos:line="89" pos:column="15"/></operator> <name pos:line="89" pos:column="16">nbytes<pos:position pos:line="89" pos:column="22"/></name></expr>;<pos:position pos:line="89" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><name pos:line="90" pos:column="9">arv<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <call><name pos:line="90" pos:column="15">apr_socket_opt_set<pos:position pos:line="90" pos:column="33"/></name><argument_list pos:line="90" pos:column="33">(<argument><expr><name pos:line="90" pos:column="34">sock<pos:position pos:line="90" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="40">APR_TCP_NOPUSH<pos:position pos:line="90" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="90" pos:column="56">0<pos:position pos:line="90" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="59"/></expr_stmt>
        <if pos:line="91" pos:column="9">if <condition pos:line="91" pos:column="12">(<expr><name pos:line="91" pos:column="13">rv<pos:position pos:line="91" pos:column="15"/></name> <operator pos:line="91" pos:column="16">&gt;<pos:position pos:line="91" pos:column="20"/></operator> <literal type="number" pos:line="91" pos:column="18">0<pos:position pos:line="91" pos:column="19"/></literal></expr>)<pos:position pos:line="91" pos:column="20"/></condition><then pos:line="91" pos:column="20"> <block pos:line="91" pos:column="21">{
                
            <comment type="block" pos:line="93" pos:column="13">/* If this was a partial write, return now with the 
             * partial byte count;  this is a non-blocking socket.
             */</comment>

            <if pos:line="97" pos:column="13">if <condition pos:line="97" pos:column="16">(<expr><call><name pos:line="97" pos:column="17">apr_is_option_set<pos:position pos:line="97" pos:column="34"/></name><argument_list pos:line="97" pos:column="34">(<argument><expr><name><name pos:line="97" pos:column="35">sock<pos:position pos:line="97" pos:column="39"/></name><operator pos:line="97" pos:column="39">-&gt;<pos:position pos:line="97" pos:column="44"/></operator><name pos:line="97" pos:column="41">netmask<pos:position pos:line="97" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="50">APR_SO_TIMEOUT<pos:position pos:line="97" pos:column="64"/></name></expr></argument>)<pos:position pos:line="97" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="97" pos:column="66"/></condition><then pos:line="97" pos:column="66"> <block pos:line="97" pos:column="67">{
                <expr_stmt><expr><name><name pos:line="98" pos:column="17">sock<pos:position pos:line="98" pos:column="21"/></name><operator pos:line="98" pos:column="21">-&gt;<pos:position pos:line="98" pos:column="26"/></operator><name pos:line="98" pos:column="23">netmask<pos:position pos:line="98" pos:column="30"/></name></name> <operator pos:line="98" pos:column="31">|=<pos:position pos:line="98" pos:column="33"/></operator> <name pos:line="98" pos:column="34">APR_INCOMPLETE_WRITE<pos:position pos:line="98" pos:column="54"/></name></expr>;<pos:position pos:line="98" pos:column="55"/></expr_stmt>
            }<pos:position pos:line="99" pos:column="14"/></block></then></if>
            <return pos:line="100" pos:column="13">return <expr><name pos:line="100" pos:column="20">arv<pos:position pos:line="100" pos:column="23"/></name></expr>;<pos:position pos:line="100" pos:column="24"/></return>
        }<pos:position pos:line="101" pos:column="10"/></block></then>
        <else pos:line="102" pos:column="9">else <block pos:line="102" pos:column="14">{
            <comment type="block" pos:line="103" pos:column="13">/* If the file got smaller mid-request, eventually the offset
             * becomes equal to the new file size and the kernel returns 0.  
             * Make this an error so the caller knows to log something and
             * exit.
             */</comment>
            <return pos:line="108" pos:column="13">return <expr><name pos:line="108" pos:column="20">APR_EOF<pos:position pos:line="108" pos:column="27"/></name></expr>;<pos:position pos:line="108" pos:column="28"/></return>
        }<pos:position pos:line="109" pos:column="10"/></block></else></if>
    }<pos:position pos:line="110" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="112" pos:column="5">/* Now write the footers */</comment>
    <if pos:line="113" pos:column="5">if <condition pos:line="113" pos:column="8">(<expr><name><name pos:line="113" pos:column="9">hdtr<pos:position pos:line="113" pos:column="13"/></name><operator pos:line="113" pos:column="13">-&gt;<pos:position pos:line="113" pos:column="18"/></operator><name pos:line="113" pos:column="15">numtrailers<pos:position pos:line="113" pos:column="26"/></name></name> <operator pos:line="113" pos:column="27">&gt;<pos:position pos:line="113" pos:column="31"/></operator> <literal type="number" pos:line="113" pos:column="29">0<pos:position pos:line="113" pos:column="30"/></literal></expr>)<pos:position pos:line="113" pos:column="31"/></condition><then pos:line="113" pos:column="31"> <block pos:line="113" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="114" pos:column="9">apr_size_t<pos:position pos:line="114" pos:column="19"/></name></type> <name pos:line="114" pos:column="20">trbytes<pos:position pos:line="114" pos:column="27"/></name></decl>;<pos:position pos:line="114" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><name pos:line="115" pos:column="9">arv<pos:position pos:line="115" pos:column="12"/></name> <operator pos:line="115" pos:column="13">=<pos:position pos:line="115" pos:column="14"/></operator> <call><name pos:line="115" pos:column="15">apr_socket_sendv<pos:position pos:line="115" pos:column="31"/></name><argument_list pos:line="115" pos:column="31">(<argument><expr><name pos:line="115" pos:column="32">sock<pos:position pos:line="115" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="38">hdtr<pos:position pos:line="115" pos:column="42"/></name><operator pos:line="115" pos:column="42">-&gt;<pos:position pos:line="115" pos:column="47"/></operator><name pos:line="115" pos:column="44">trailers<pos:position pos:line="115" pos:column="52"/></name></name></expr></argument>, <argument><expr><name><name pos:line="115" pos:column="54">hdtr<pos:position pos:line="115" pos:column="58"/></name><operator pos:line="115" pos:column="58">-&gt;<pos:position pos:line="115" pos:column="63"/></operator><name pos:line="115" pos:column="60">numtrailers<pos:position pos:line="115" pos:column="71"/></name></name></expr></argument>, 
                               <argument><expr><operator pos:line="116" pos:column="32">&amp;<pos:position pos:line="116" pos:column="37"/></operator><name pos:line="116" pos:column="33">trbytes<pos:position pos:line="116" pos:column="40"/></name></expr></argument>)<pos:position pos:line="116" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="117" pos:column="9">nbytes<pos:position pos:line="117" pos:column="15"/></name> <operator pos:line="117" pos:column="16">+=<pos:position pos:line="117" pos:column="18"/></operator> <name pos:line="117" pos:column="19">trbytes<pos:position pos:line="117" pos:column="26"/></name></expr>;<pos:position pos:line="117" pos:column="27"/></expr_stmt>
        <if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><name pos:line="118" pos:column="13">arv<pos:position pos:line="118" pos:column="16"/></name> <operator pos:line="118" pos:column="17">!=<pos:position pos:line="118" pos:column="19"/></operator> <name pos:line="118" pos:column="20">APR_SUCCESS<pos:position pos:line="118" pos:column="31"/></name></expr>)<pos:position pos:line="118" pos:column="32"/></condition><then pos:line="118" pos:column="32"> <block pos:line="118" pos:column="33">{
            <expr_stmt><expr><operator pos:line="119" pos:column="13">*<pos:position pos:line="119" pos:column="14"/></operator><name pos:line="119" pos:column="14">len<pos:position pos:line="119" pos:column="17"/></name> <operator pos:line="119" pos:column="18">=<pos:position pos:line="119" pos:column="19"/></operator> <name pos:line="119" pos:column="20">nbytes<pos:position pos:line="119" pos:column="26"/></name></expr>;<pos:position pos:line="119" pos:column="27"/></expr_stmt>
            <expr_stmt><expr><name pos:line="120" pos:column="13">rv<pos:position pos:line="120" pos:column="15"/></name> <operator pos:line="120" pos:column="16">=<pos:position pos:line="120" pos:column="17"/></operator> <name pos:line="120" pos:column="18">errno<pos:position pos:line="120" pos:column="23"/></name></expr>;<pos:position pos:line="120" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="121" pos:column="13">apr_socket_opt_set<pos:position pos:line="121" pos:column="31"/></name><argument_list pos:line="121" pos:column="31">(<argument><expr><name pos:line="121" pos:column="32">sock<pos:position pos:line="121" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="121" pos:column="38">APR_TCP_NOPUSH<pos:position pos:line="121" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="121" pos:column="54">0<pos:position pos:line="121" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="57"/></expr_stmt>
            <return pos:line="122" pos:column="13">return <expr><name pos:line="122" pos:column="20">rv<pos:position pos:line="122" pos:column="22"/></name></expr>;<pos:position pos:line="122" pos:column="23"/></return>
        }<pos:position pos:line="123" pos:column="10"/></block></then></if>
    }<pos:position pos:line="124" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="126" pos:column="5">apr_socket_opt_set<pos:position pos:line="126" pos:column="23"/></name><argument_list pos:line="126" pos:column="23">(<argument><expr><name pos:line="126" pos:column="24">sock<pos:position pos:line="126" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="126" pos:column="30">APR_TCP_NOPUSH<pos:position pos:line="126" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="126" pos:column="46">0<pos:position pos:line="126" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="126" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="126" pos:column="49"/></expr_stmt>
    
    <expr_stmt><expr><operator pos:line="128" pos:column="5">(<pos:position pos:line="128" pos:column="6"/></operator><operator pos:line="128" pos:column="6">*<pos:position pos:line="128" pos:column="7"/></operator><name pos:line="128" pos:column="7">len<pos:position pos:line="128" pos:column="10"/></name><operator pos:line="128" pos:column="10">)<pos:position pos:line="128" pos:column="11"/></operator> <operator pos:line="128" pos:column="12">=<pos:position pos:line="128" pos:column="13"/></operator> <name pos:line="128" pos:column="14">nbytes<pos:position pos:line="128" pos:column="20"/></name></expr>;<pos:position pos:line="128" pos:column="21"/></expr_stmt>
    <return pos:line="129" pos:column="5">return <expr><ternary><condition><expr><name pos:line="129" pos:column="12">rv<pos:position pos:line="129" pos:column="14"/></name> <operator pos:line="129" pos:column="15">&lt;<pos:position pos:line="129" pos:column="19"/></operator> <literal type="number" pos:line="129" pos:column="17">0<pos:position pos:line="129" pos:column="18"/></literal></expr> ?<pos:position pos:line="129" pos:column="20"/></condition><then pos:line="129" pos:column="20"> <expr><name pos:line="129" pos:column="21">errno<pos:position pos:line="129" pos:column="26"/></name></expr> <pos:position pos:line="129" pos:column="27"/></then><else pos:line="129" pos:column="27">: <expr><name pos:line="129" pos:column="29">APR_SUCCESS<pos:position pos:line="129" pos:column="40"/></name></expr></else></ternary></expr>;<pos:position pos:line="129" pos:column="41"/></return>
}<pos:position pos:line="130" pos:column="2"/></block></function></unit>
