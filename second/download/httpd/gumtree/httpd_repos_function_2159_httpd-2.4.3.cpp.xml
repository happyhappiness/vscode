<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2159_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">include_expr_lookup<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">ap_expr_lookup_parms<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">parms<pos:position pos:line="1" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="60"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <switch pos:line="3" pos:column="5">switch <condition pos:line="3" pos:column="12">(<expr><name><name pos:line="3" pos:column="13">parms<pos:position pos:line="3" pos:column="18"/></name><operator pos:line="3" pos:column="18">-&gt;<pos:position pos:line="3" pos:column="23"/></operator><name pos:line="3" pos:column="20">type<pos:position pos:line="3" pos:column="24"/></name></name></expr>)<pos:position pos:line="3" pos:column="25"/></condition> <block pos:line="3" pos:column="26">{
    <case pos:line="4" pos:column="5">case <expr><name pos:line="4" pos:column="10">AP_EXPR_FUNC_STRING<pos:position pos:line="4" pos:column="29"/></name></expr>:<pos:position pos:line="4" pos:column="30"/></case>
        <if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><call><name pos:line="5" pos:column="13">strcasecmp<pos:position pos:line="5" pos:column="23"/></name><argument_list pos:line="5" pos:column="23">(<argument><expr><name><name pos:line="5" pos:column="24">parms<pos:position pos:line="5" pos:column="29"/></name><operator pos:line="5" pos:column="29">-&gt;<pos:position pos:line="5" pos:column="34"/></operator><name pos:line="5" pos:column="31">name<pos:position pos:line="5" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="5" pos:column="37">"v"<pos:position pos:line="5" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="5" pos:column="41"/></argument_list></call> <operator pos:line="5" pos:column="42">==<pos:position pos:line="5" pos:column="44"/></operator> <literal type="number" pos:line="5" pos:column="45">0<pos:position pos:line="5" pos:column="46"/></literal> <operator pos:line="5" pos:column="47">||<pos:position pos:line="5" pos:column="49"/></operator>
            <call><name pos:line="6" pos:column="13">strcasecmp<pos:position pos:line="6" pos:column="23"/></name><argument_list pos:line="6" pos:column="23">(<argument><expr><name><name pos:line="6" pos:column="24">parms<pos:position pos:line="6" pos:column="29"/></name><operator pos:line="6" pos:column="29">-&gt;<pos:position pos:line="6" pos:column="34"/></operator><name pos:line="6" pos:column="31">name<pos:position pos:line="6" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="37">"reqenv"<pos:position pos:line="6" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="46"/></argument_list></call> <operator pos:line="6" pos:column="47">==<pos:position pos:line="6" pos:column="49"/></operator> <literal type="number" pos:line="6" pos:column="50">0<pos:position pos:line="6" pos:column="51"/></literal> <operator pos:line="6" pos:column="52">||<pos:position pos:line="6" pos:column="54"/></operator>
            <call><name pos:line="7" pos:column="13">strcasecmp<pos:position pos:line="7" pos:column="23"/></name><argument_list pos:line="7" pos:column="23">(<argument><expr><name><name pos:line="7" pos:column="24">parms<pos:position pos:line="7" pos:column="29"/></name><operator pos:line="7" pos:column="29">-&gt;<pos:position pos:line="7" pos:column="34"/></operator><name pos:line="7" pos:column="31">name<pos:position pos:line="7" pos:column="35"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="7" pos:column="37">"env"<pos:position pos:line="7" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="43"/></argument_list></call> <operator pos:line="7" pos:column="44">==<pos:position pos:line="7" pos:column="46"/></operator> <literal type="number" pos:line="7" pos:column="47">0<pos:position pos:line="7" pos:column="48"/></literal></expr>)<pos:position pos:line="7" pos:column="49"/></condition><then pos:line="7" pos:column="49"> <block pos:line="7" pos:column="50">{
            <expr_stmt><expr><operator pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></operator><name><name pos:line="8" pos:column="14">parms<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">func<pos:position pos:line="8" pos:column="25"/></name></name> <operator pos:line="8" pos:column="26">=<pos:position pos:line="8" pos:column="27"/></operator> <name pos:line="8" pos:column="28">include_expr_var_fn<pos:position pos:line="8" pos:column="47"/></name></expr>;<pos:position pos:line="8" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="9" pos:column="13">*<pos:position pos:line="9" pos:column="14"/></operator><name><name pos:line="9" pos:column="14">parms<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">-&gt;<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="21">data<pos:position pos:line="9" pos:column="25"/></name></name> <operator pos:line="9" pos:column="26">=<pos:position pos:line="9" pos:column="27"/></operator> <name><name pos:line="9" pos:column="28">parms<pos:position pos:line="9" pos:column="33"/></name><operator pos:line="9" pos:column="33">-&gt;<pos:position pos:line="9" pos:column="38"/></operator><name pos:line="9" pos:column="35">name<pos:position pos:line="9" pos:column="39"/></name></name></expr>;<pos:position pos:line="9" pos:column="40"/></expr_stmt>
            <return pos:line="10" pos:column="13">return <expr><name pos:line="10" pos:column="20">OK<pos:position pos:line="10" pos:column="22"/></name></expr>;<pos:position pos:line="10" pos:column="23"/></return>
        }<pos:position pos:line="11" pos:column="10"/></block></then></if>
        <break pos:line="12" pos:column="9">break;<pos:position pos:line="12" pos:column="15"/></break>
    <comment type="block" pos:line="13" pos:column="5">/*
     * We could also make the SSI vars available as %{...} style variables
     * (AP_EXPR_FUNC_VAR), but this would create problems if we ever want
     * to cache parsed expressions for performance reasons.
     */</comment>
    }<pos:position pos:line="18" pos:column="6"/></block></switch>
    <return pos:line="19" pos:column="5">return <expr><call><name pos:line="19" pos:column="12">ap_run_expr_lookup<pos:position pos:line="19" pos:column="30"/></name><argument_list pos:line="19" pos:column="30">(<argument><expr><name pos:line="19" pos:column="31">parms<pos:position pos:line="19" pos:column="36"/></name></expr></argument>)<pos:position pos:line="19" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="38"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></function></unit>
