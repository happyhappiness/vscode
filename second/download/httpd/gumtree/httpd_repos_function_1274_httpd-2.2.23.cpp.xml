<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1274_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">find_desc<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">autoindex_config_rec<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">dcfg<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="52">const<pos:position pos:line="1" pos:column="57"/></specifier> <name pos:line="1" pos:column="58">char<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">filename_full<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="78"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">i<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ai_desc_t<pos:position pos:line="4" pos:column="14"/></name> <modifier pos:line="4" pos:column="15">*<pos:position pos:line="4" pos:column="16"/></modifier></type><name pos:line="4" pos:column="16">list<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><operator pos:line="4" pos:column="23">(<pos:position pos:line="4" pos:column="24"/></operator><name pos:line="4" pos:column="24">ai_desc_t<pos:position pos:line="4" pos:column="33"/></name> <operator pos:line="4" pos:column="34">*<pos:position pos:line="4" pos:column="35"/></operator><operator pos:line="4" pos:column="35">)<pos:position pos:line="4" pos:column="36"/></operator> <name><name pos:line="4" pos:column="37">dcfg<pos:position pos:line="4" pos:column="41"/></name><operator pos:line="4" pos:column="41">-&gt;<pos:position pos:line="4" pos:column="46"/></operator><name pos:line="4" pos:column="43">desc_list<pos:position pos:line="4" pos:column="52"/></name><operator pos:line="4" pos:column="52">-&gt;<pos:position pos:line="4" pos:column="57"/></operator><name pos:line="4" pos:column="54">elts<pos:position pos:line="4" pos:column="58"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="59"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">filename_only<pos:position pos:line="5" pos:column="30"/></name></decl>;<pos:position pos:line="5" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">filename<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/*
     * If the filename includes a path, extract just the name itself
     * for the simple matches.
     */</comment>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><operator pos:line="12" pos:column="9">(<pos:position pos:line="12" pos:column="10"/></operator><name pos:line="12" pos:column="10">filename_only<pos:position pos:line="12" pos:column="23"/></name> <operator pos:line="12" pos:column="24">=<pos:position pos:line="12" pos:column="25"/></operator> <call><name pos:line="12" pos:column="26">ap_strrchr_c<pos:position pos:line="12" pos:column="38"/></name><argument_list pos:line="12" pos:column="38">(<argument><expr><name pos:line="12" pos:column="39">filename_full<pos:position pos:line="12" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="12" pos:column="54">'/'<pos:position pos:line="12" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="12" pos:column="58"/></argument_list></call><operator pos:line="12" pos:column="58">)<pos:position pos:line="12" pos:column="59"/></operator> <operator pos:line="12" pos:column="60">==<pos:position pos:line="12" pos:column="62"/></operator> <name pos:line="12" pos:column="63">NULL<pos:position pos:line="12" pos:column="67"/></name></expr>)<pos:position pos:line="12" pos:column="68"/></condition><then pos:line="12" pos:column="68"> <block pos:line="12" pos:column="69">{
        <expr_stmt><expr><name pos:line="13" pos:column="9">filename_only<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">filename_full<pos:position pos:line="13" pos:column="38"/></name></expr>;<pos:position pos:line="13" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="14" pos:column="6"/></block></then>
    <else pos:line="15" pos:column="5">else <block pos:line="15" pos:column="10">{
        <expr_stmt><expr><name pos:line="16" pos:column="9">filename_only<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">++<pos:position pos:line="16" pos:column="24"/></operator></expr>;<pos:position pos:line="16" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>
    <for pos:line="18" pos:column="5">for <control pos:line="18" pos:column="9">(<init><expr><name pos:line="18" pos:column="10">i<pos:position pos:line="18" pos:column="11"/></name> <operator pos:line="18" pos:column="12">=<pos:position pos:line="18" pos:column="13"/></operator> <literal type="number" pos:line="18" pos:column="14">0<pos:position pos:line="18" pos:column="15"/></literal></expr>;<pos:position pos:line="18" pos:column="16"/></init> <condition><expr><name pos:line="18" pos:column="17">i<pos:position pos:line="18" pos:column="18"/></name> <operator pos:line="18" pos:column="19">&lt;<pos:position pos:line="18" pos:column="23"/></operator> <name><name pos:line="18" pos:column="21">dcfg<pos:position pos:line="18" pos:column="25"/></name><operator pos:line="18" pos:column="25">-&gt;<pos:position pos:line="18" pos:column="30"/></operator><name pos:line="18" pos:column="27">desc_list<pos:position pos:line="18" pos:column="36"/></name><operator pos:line="18" pos:column="36">-&gt;<pos:position pos:line="18" pos:column="41"/></operator><name pos:line="18" pos:column="38">nelts<pos:position pos:line="18" pos:column="43"/></name></name></expr>;<pos:position pos:line="18" pos:column="44"/></condition> <incr><expr><operator pos:line="18" pos:column="45">++<pos:position pos:line="18" pos:column="47"/></operator><name pos:line="18" pos:column="47">i<pos:position pos:line="18" pos:column="48"/></name></expr></incr>)<pos:position pos:line="18" pos:column="49"/></control> <block pos:line="18" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">ai_desc_t<pos:position pos:line="19" pos:column="18"/></name> <modifier pos:line="19" pos:column="19">*<pos:position pos:line="19" pos:column="20"/></modifier></type><name pos:line="19" pos:column="20">tuple<pos:position pos:line="19" pos:column="25"/></name> <init pos:line="19" pos:column="26">= <expr><operator pos:line="19" pos:column="28">&amp;<pos:position pos:line="19" pos:column="33"/></operator><name><name pos:line="19" pos:column="29">list<pos:position pos:line="19" pos:column="33"/></name><index pos:line="19" pos:column="33">[<expr><name pos:line="19" pos:column="34">i<pos:position pos:line="19" pos:column="35"/></name></expr>]<pos:position pos:line="19" pos:column="36"/></index></name></expr></init></decl>;<pos:position pos:line="19" pos:column="37"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="20" pos:column="9">int<pos:position pos:line="20" pos:column="12"/></name></type> <name pos:line="20" pos:column="13">found<pos:position pos:line="20" pos:column="18"/></name></decl>;<pos:position pos:line="20" pos:column="19"/></decl_stmt>

        <comment type="block" pos:line="22" pos:column="9">/*
         * Only use the full-path filename if the pattern contains '/'s.
         */</comment>
        <expr_stmt><expr><name pos:line="25" pos:column="9">filename<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">=<pos:position pos:line="25" pos:column="19"/></operator> <ternary><condition><expr><operator pos:line="25" pos:column="20">(<pos:position pos:line="25" pos:column="21"/></operator><name><name pos:line="25" pos:column="21">tuple<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-&gt;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="28">full_path<pos:position pos:line="25" pos:column="37"/></name></name><operator pos:line="25" pos:column="37">)<pos:position pos:line="25" pos:column="38"/></operator></expr> ?<pos:position pos:line="25" pos:column="40"/></condition><then pos:line="25" pos:column="40"> <expr><name pos:line="25" pos:column="41">filename_full<pos:position pos:line="25" pos:column="54"/></name></expr> <pos:position pos:line="25" pos:column="55"/></then><else pos:line="25" pos:column="55">: <expr><name pos:line="25" pos:column="57">filename_only<pos:position pos:line="25" pos:column="70"/></name></expr></else></ternary></expr>;<pos:position pos:line="25" pos:column="71"/></expr_stmt>
        <comment type="block" pos:line="26" pos:column="9">/*
         * Make the comparison using the cheapest method; only do
         * wildcard checking if we must.
         */</comment>
        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><name><name pos:line="30" pos:column="13">tuple<pos:position pos:line="30" pos:column="18"/></name><operator pos:line="30" pos:column="18">-&gt;<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="20">wildcards<pos:position pos:line="30" pos:column="29"/></name></name></expr>)<pos:position pos:line="30" pos:column="30"/></condition><then pos:line="30" pos:column="30"> <block pos:line="30" pos:column="31">{
            <expr_stmt><expr><name pos:line="31" pos:column="13">found<pos:position pos:line="31" pos:column="18"/></name> <operator pos:line="31" pos:column="19">=<pos:position pos:line="31" pos:column="20"/></operator> <operator pos:line="31" pos:column="21">(<pos:position pos:line="31" pos:column="22"/></operator><call><name pos:line="31" pos:column="22">apr_fnmatch<pos:position pos:line="31" pos:column="33"/></name><argument_list pos:line="31" pos:column="33">(<argument><expr><name><name pos:line="31" pos:column="34">tuple<pos:position pos:line="31" pos:column="39"/></name><operator pos:line="31" pos:column="39">-&gt;<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="41">pattern<pos:position pos:line="31" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="50">filename<pos:position pos:line="31" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="60">MATCH_FLAGS<pos:position pos:line="31" pos:column="71"/></name></expr></argument>)<pos:position pos:line="31" pos:column="72"/></argument_list></call> <operator pos:line="31" pos:column="73">==<pos:position pos:line="31" pos:column="75"/></operator> <literal type="number" pos:line="31" pos:column="76">0<pos:position pos:line="31" pos:column="77"/></literal><operator pos:line="31" pos:column="77">)<pos:position pos:line="31" pos:column="78"/></operator></expr>;<pos:position pos:line="31" pos:column="79"/></expr_stmt>
        }<pos:position pos:line="32" pos:column="10"/></block></then>
        <else pos:line="33" pos:column="9">else <block pos:line="33" pos:column="14">{
            <expr_stmt><expr><name pos:line="34" pos:column="13">found<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">=<pos:position pos:line="34" pos:column="20"/></operator> <operator pos:line="34" pos:column="21">(<pos:position pos:line="34" pos:column="22"/></operator><call><name pos:line="34" pos:column="22">ap_strstr_c<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">filename<pos:position pos:line="34" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="34" pos:column="44">tuple<pos:position pos:line="34" pos:column="49"/></name><operator pos:line="34" pos:column="49">-&gt;<pos:position pos:line="34" pos:column="54"/></operator><name pos:line="34" pos:column="51">pattern<pos:position pos:line="34" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call> <operator pos:line="34" pos:column="60">!=<pos:position pos:line="34" pos:column="62"/></operator> <name pos:line="34" pos:column="63">NULL<pos:position pos:line="34" pos:column="67"/></name><operator pos:line="34" pos:column="67">)<pos:position pos:line="34" pos:column="68"/></operator></expr>;<pos:position pos:line="34" pos:column="69"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></else></if>
        <if pos:line="36" pos:column="9">if <condition pos:line="36" pos:column="12">(<expr><name pos:line="36" pos:column="13">found<pos:position pos:line="36" pos:column="18"/></name></expr>)<pos:position pos:line="36" pos:column="19"/></condition><then pos:line="36" pos:column="19"> <block pos:line="36" pos:column="20">{
            <return pos:line="37" pos:column="13">return <expr><name><name pos:line="37" pos:column="20">tuple<pos:position pos:line="37" pos:column="25"/></name><operator pos:line="37" pos:column="25">-&gt;<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="27">description<pos:position pos:line="37" pos:column="38"/></name></name></expr>;<pos:position pos:line="37" pos:column="39"/></return>
        }<pos:position pos:line="38" pos:column="10"/></block></then></if>
    }<pos:position pos:line="39" pos:column="6"/></block></for>
    <return pos:line="40" pos:column="5">return <expr><name pos:line="40" pos:column="12">NULL<pos:position pos:line="40" pos:column="16"/></name></expr>;<pos:position pos:line="40" pos:column="17"/></return>
}<pos:position pos:line="41" pos:column="2"/></block></function></unit>
