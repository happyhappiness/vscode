<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2865_httpd-2.0.64.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">_thread_rw_cleanup<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">void<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type> <name pos:line="1" pos:column="47">data<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_thread_rwlock_t<pos:position pos:line="3" pos:column="24"/></name> <modifier pos:line="3" pos:column="25">*<pos:position pos:line="3" pos:column="26"/></modifier></type><name pos:line="3" pos:column="26">mutex<pos:position pos:line="3" pos:column="31"/></name> <init pos:line="3" pos:column="32">= <expr><operator pos:line="3" pos:column="34">(<pos:position pos:line="3" pos:column="35"/></operator><name pos:line="3" pos:column="35">apr_thread_rwlock_t<pos:position pos:line="3" pos:column="54"/></name><operator pos:line="3" pos:column="54">*<pos:position pos:line="3" pos:column="55"/></operator><operator pos:line="3" pos:column="55">)<pos:position pos:line="3" pos:column="56"/></operator><name pos:line="3" pos:column="56">data<pos:position pos:line="3" pos:column="60"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="61"/></decl_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name><name pos:line="5" pos:column="9">mutex<pos:position pos:line="5" pos:column="14"/></name><operator pos:line="5" pos:column="14">-&gt;<pos:position pos:line="5" pos:column="19"/></operator><name pos:line="5" pos:column="16">ReadCount<pos:position pos:line="5" pos:column="25"/></name></name> <operator pos:line="5" pos:column="26">!=<pos:position pos:line="5" pos:column="28"/></operator> <literal type="number" pos:line="5" pos:column="29">0<pos:position pos:line="5" pos:column="30"/></literal></expr>)<pos:position pos:line="5" pos:column="31"/></condition><then pos:line="5" pos:column="31"> <block pos:line="5" pos:column="32">{
    	<while pos:line="6" pos:column="9">while <condition pos:line="6" pos:column="15">(<expr><call><name pos:line="6" pos:column="16">atomic_add<pos:position pos:line="6" pos:column="26"/></name><argument_list pos:line="6" pos:column="26">(<argument><expr><operator pos:line="6" pos:column="27">&amp;<pos:position pos:line="6" pos:column="32"/></operator><name><name pos:line="6" pos:column="28">mutex<pos:position pos:line="6" pos:column="33"/></name><operator pos:line="6" pos:column="33">-&gt;<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="35">ReadCount<pos:position pos:line="6" pos:column="44"/></name></name></expr></argument> , <argument><expr><operator pos:line="6" pos:column="47">-<pos:position pos:line="6" pos:column="48"/></operator><literal type="number" pos:line="6" pos:column="48">1<pos:position pos:line="6" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call> <operator pos:line="6" pos:column="51">&gt;<pos:position pos:line="6" pos:column="55"/></operator> <literal type="number" pos:line="6" pos:column="53">1<pos:position pos:line="6" pos:column="54"/></literal></expr>)<pos:position pos:line="6" pos:column="55"/></condition><block pos:line="6" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="7" pos:column="13">release_sem<pos:position pos:line="7" pos:column="24"/></name> <argument_list pos:line="7" pos:column="25">(<argument><expr><name><name pos:line="7" pos:column="26">mutex<pos:position pos:line="7" pos:column="31"/></name><operator pos:line="7" pos:column="31">-&gt;<pos:position pos:line="7" pos:column="36"/></operator><name pos:line="7" pos:column="33">Read<pos:position pos:line="7" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="39"/></expr_stmt>
    	}<pos:position pos:line="8" pos:column="10"/></block></while>
    }<pos:position pos:line="9" pos:column="6"/></block></then></if>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name><name pos:line="10" pos:column="9">mutex<pos:position pos:line="10" pos:column="14"/></name><operator pos:line="10" pos:column="14">-&gt;<pos:position pos:line="10" pos:column="19"/></operator><name pos:line="10" pos:column="16">WriteCount<pos:position pos:line="10" pos:column="26"/></name></name> <operator pos:line="10" pos:column="27">!=<pos:position pos:line="10" pos:column="29"/></operator> <literal type="number" pos:line="10" pos:column="30">0<pos:position pos:line="10" pos:column="31"/></literal></expr>)<pos:position pos:line="10" pos:column="32"/></condition><then pos:line="10" pos:column="32"> <block pos:line="10" pos:column="33">{
    	<while pos:line="11" pos:column="9">while <condition pos:line="11" pos:column="15">(<expr><call><name pos:line="11" pos:column="16">atomic_add<pos:position pos:line="11" pos:column="26"/></name><argument_list pos:line="11" pos:column="26">(<argument><expr><operator pos:line="11" pos:column="27">&amp;<pos:position pos:line="11" pos:column="32"/></operator><name><name pos:line="11" pos:column="28">mutex<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">-&gt;<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="35">WriteCount<pos:position pos:line="11" pos:column="45"/></name></name></expr></argument> , <argument><expr><operator pos:line="11" pos:column="48">-<pos:position pos:line="11" pos:column="49"/></operator><literal type="number" pos:line="11" pos:column="49">1<pos:position pos:line="11" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="51"/></argument_list></call> <operator pos:line="11" pos:column="52">&gt;<pos:position pos:line="11" pos:column="56"/></operator> <literal type="number" pos:line="11" pos:column="54">1<pos:position pos:line="11" pos:column="55"/></literal></expr>)<pos:position pos:line="11" pos:column="56"/></condition><block pos:line="11" pos:column="56">{
            <expr_stmt><expr><call><name pos:line="12" pos:column="13">release_sem<pos:position pos:line="12" pos:column="24"/></name> <argument_list pos:line="12" pos:column="25">(<argument><expr><name><name pos:line="12" pos:column="26">mutex<pos:position pos:line="12" pos:column="31"/></name><operator pos:line="12" pos:column="31">-&gt;<pos:position pos:line="12" pos:column="36"/></operator><name pos:line="12" pos:column="33">Write<pos:position pos:line="12" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="12" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="40"/></expr_stmt>
    	}<pos:position pos:line="13" pos:column="10"/></block></while>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name><name pos:line="15" pos:column="9">mutex<pos:position pos:line="15" pos:column="14"/></name><operator pos:line="15" pos:column="14">-&gt;<pos:position pos:line="15" pos:column="19"/></operator><name pos:line="15" pos:column="16">LockCount<pos:position pos:line="15" pos:column="25"/></name></name> <operator pos:line="15" pos:column="26">!=<pos:position pos:line="15" pos:column="28"/></operator> <literal type="number" pos:line="15" pos:column="29">0<pos:position pos:line="15" pos:column="30"/></literal></expr>)<pos:position pos:line="15" pos:column="31"/></condition><then pos:line="15" pos:column="31"> <block pos:line="15" pos:column="32">{
    	<while pos:line="16" pos:column="9">while <condition pos:line="16" pos:column="15">(<expr><call><name pos:line="16" pos:column="16">atomic_add<pos:position pos:line="16" pos:column="26"/></name><argument_list pos:line="16" pos:column="26">(<argument><expr><operator pos:line="16" pos:column="27">&amp;<pos:position pos:line="16" pos:column="32"/></operator><name><name pos:line="16" pos:column="28">mutex<pos:position pos:line="16" pos:column="33"/></name><operator pos:line="16" pos:column="33">-&gt;<pos:position pos:line="16" pos:column="38"/></operator><name pos:line="16" pos:column="35">LockCount<pos:position pos:line="16" pos:column="44"/></name></name></expr></argument> , <argument><expr><operator pos:line="16" pos:column="47">-<pos:position pos:line="16" pos:column="48"/></operator><literal type="number" pos:line="16" pos:column="48">1<pos:position pos:line="16" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="50"/></argument_list></call> <operator pos:line="16" pos:column="51">&gt;<pos:position pos:line="16" pos:column="55"/></operator> <literal type="number" pos:line="16" pos:column="53">1<pos:position pos:line="16" pos:column="54"/></literal></expr>)<pos:position pos:line="16" pos:column="55"/></condition><block pos:line="16" pos:column="55">{
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">release_sem<pos:position pos:line="17" pos:column="24"/></name> <argument_list pos:line="17" pos:column="25">(<argument><expr><name><name pos:line="17" pos:column="26">mutex<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">Lock<pos:position pos:line="17" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="17" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="39"/></expr_stmt>
    	}<pos:position pos:line="18" pos:column="10"/></block></while>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    
    <expr_stmt><expr><call><name pos:line="21" pos:column="5">delete_sem<pos:position pos:line="21" pos:column="15"/></name><argument_list pos:line="21" pos:column="15">(<argument><expr><name><name pos:line="21" pos:column="16">mutex<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">-&gt;<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="23">Read<pos:position pos:line="21" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="22" pos:column="5">delete_sem<pos:position pos:line="22" pos:column="15"/></name><argument_list pos:line="22" pos:column="15">(<argument><expr><name><name pos:line="22" pos:column="16">mutex<pos:position pos:line="22" pos:column="21"/></name><operator pos:line="22" pos:column="21">-&gt;<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="23">Write<pos:position pos:line="22" pos:column="28"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">delete_sem<pos:position pos:line="23" pos:column="15"/></name><argument_list pos:line="23" pos:column="15">(<argument><expr><name><name pos:line="23" pos:column="16">mutex<pos:position pos:line="23" pos:column="21"/></name><operator pos:line="23" pos:column="21">-&gt;<pos:position pos:line="23" pos:column="26"/></operator><name pos:line="23" pos:column="23">Lock<pos:position pos:line="23" pos:column="27"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt>
    <return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">APR_SUCCESS<pos:position pos:line="24" pos:column="23"/></name></expr>;<pos:position pos:line="24" pos:column="24"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
