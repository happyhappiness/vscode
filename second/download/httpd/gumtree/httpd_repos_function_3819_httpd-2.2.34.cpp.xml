<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3819_httpd-2.2.34.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">apr_proc_detach<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">daemonize<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="44"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="3" pos:column="5">0<pos:position pos:line="3" pos:column="6"/></literal></expr></cpp:if>
    int x;
    pid_t pgrp;

    chdir("/");
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><operator pos:line="8" pos:column="5">!<pos:position pos:line="8" pos:column="6"/></operator><call><name pos:line="8" pos:column="6">defined<pos:position pos:line="8" pos:column="13"/></name><argument_list pos:line="8" pos:column="13">(<argument><expr><name pos:line="8" pos:column="14">MPE<pos:position pos:line="8" pos:column="17"/></name></expr></argument>)<pos:position pos:line="8" pos:column="18"/></argument_list></call> <operator pos:line="8" pos:column="19">&amp;&amp;<pos:position pos:line="8" pos:column="29"/></operator> <operator pos:line="8" pos:column="22">!<pos:position pos:line="8" pos:column="23"/></operator><call><name pos:line="8" pos:column="23">defined<pos:position pos:line="8" pos:column="30"/></name><argument_list pos:line="8" pos:column="30">(<argument><expr><name pos:line="8" pos:column="31">OS2<pos:position pos:line="8" pos:column="34"/></name></expr></argument>)<pos:position pos:line="8" pos:column="35"/></argument_list></call> <operator pos:line="8" pos:column="36">&amp;&amp;<pos:position pos:line="8" pos:column="46"/></operator> <operator pos:line="8" pos:column="39">!<pos:position pos:line="8" pos:column="40"/></operator><call><name pos:line="8" pos:column="40">defined<pos:position pos:line="8" pos:column="47"/></name><argument_list pos:line="8" pos:column="47">(<argument><expr><name pos:line="8" pos:column="48">TPF<pos:position pos:line="8" pos:column="51"/></name></expr></argument>)<pos:position pos:line="8" pos:column="52"/></argument_list></call> <operator pos:line="8" pos:column="53">&amp;&amp;<pos:position pos:line="8" pos:column="63"/></operator> <operator pos:line="8" pos:column="56">!<pos:position pos:line="8" pos:column="57"/></operator><call><name pos:line="8" pos:column="57">defined<pos:position pos:line="8" pos:column="64"/></name><argument_list pos:line="8" pos:column="64">(<argument><expr><name pos:line="8" pos:column="65">BEOS<pos:position pos:line="8" pos:column="69"/></name></expr></argument>)<pos:position pos:line="8" pos:column="70"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="9" pos:column="1">/* Don't detach for MPE because child processes can't survive the death of
   the parent. */</comment>
    if ((x = fork()) &gt; 0)
        exit(0);
    else if (x == -1) {
        perror("fork");
        fprintf(stderr, "unable to fork new process\n");
        exit(1);  <comment type="block" pos:line="16" pos:column="19">/* we can't do anything here, so just exit. */</comment>
    }
<comment type="block" pos:line="18" pos:column="1">/*    RAISE_SIGSTOP(DETACH);*/</comment>
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">APR_HAVE_SETSID<pos:position pos:line="20" pos:column="20"/></name></expr></cpp:if>
    if ((pgrp = setsid()) == -1) {
        return errno;
    }
<cpp:elif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">elif<pos:position pos:line="24" pos:column="6"/></cpp:directive> <expr><call><name pos:line="24" pos:column="7">defined<pos:position pos:line="24" pos:column="14"/></name><argument_list pos:line="24" pos:column="14">(<argument><expr><name pos:line="24" pos:column="15">NEXT<pos:position pos:line="24" pos:column="19"/></name></expr></argument>)<pos:position pos:line="24" pos:column="20"/></argument_list></call> <operator pos:line="24" pos:column="21">||<pos:position pos:line="24" pos:column="23"/></operator> <call><name pos:line="24" pos:column="24">defined<pos:position pos:line="24" pos:column="31"/></name><argument_list pos:line="24" pos:column="31">(<argument><expr><name pos:line="24" pos:column="32">NEWSOS<pos:position pos:line="24" pos:column="38"/></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr></cpp:elif>
    if (setpgrp(0, getpid()) == -1 || (pgrp = getpgrp(0)) == -1) {
        return errno;
    }
<cpp:elif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">elif<pos:position pos:line="28" pos:column="6"/></cpp:directive> <expr><call><name pos:line="28" pos:column="7">defined<pos:position pos:line="28" pos:column="14"/></name><argument_list pos:line="28" pos:column="14">(<argument><expr><name pos:line="28" pos:column="15">OS2<pos:position pos:line="28" pos:column="18"/></name></expr></argument>)<pos:position pos:line="28" pos:column="19"/></argument_list></call> <operator pos:line="28" pos:column="20">||<pos:position pos:line="28" pos:column="22"/></operator> <call><name pos:line="28" pos:column="23">defined<pos:position pos:line="28" pos:column="30"/></name><argument_list pos:line="28" pos:column="30">(<argument><expr><name pos:line="28" pos:column="31">TPF<pos:position pos:line="28" pos:column="34"/></name></expr></argument>)<pos:position pos:line="28" pos:column="35"/></argument_list></call></expr></cpp:elif>
    <comment type="block" pos:line="29" pos:column="5">/* OS/2 don't support process group IDs */</comment>
    pgrp = getpid();
<cpp:elif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">elif<pos:position pos:line="31" pos:column="6"/></cpp:directive> <expr><call><name pos:line="31" pos:column="7">defined<pos:position pos:line="31" pos:column="14"/></name><argument_list pos:line="31" pos:column="14">(<argument><expr><name pos:line="31" pos:column="15">MPE<pos:position pos:line="31" pos:column="18"/></name></expr></argument>)<pos:position pos:line="31" pos:column="19"/></argument_list></call></expr></cpp:elif>
    <comment type="block" pos:line="32" pos:column="5">/* MPE uses negative pid for process group */</comment>
    pgrp = -getpid();
<cpp:else pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">else<pos:position pos:line="34" pos:column="6"/></cpp:directive></cpp:else>
    if ((pgrp = setpgid(0, 0)) == -1) {
        return errno;
    }
<cpp:endif pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">endif<pos:position pos:line="38" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="40" pos:column="5">/* close out the standard file descriptors */</comment>
    if (freopen("/dev/null", "r", stdin) == NULL) {
        return errno;
        <comment type="block" pos:line="43" pos:column="9">/* continue anyhow -- note we can't close out descriptor 0 because we
         * have nothing to replace it with, and if we didn't have a descriptor
         * 0 the next file would be created with that value ... leading to
         * havoc.
         */</comment>
    }
    if (freopen("/dev/null", "w", stdout) == NULL) {
        return errno;
    }
     <comment type="block" pos:line="52" pos:column="6">/* We are going to reopen this again in a little while to the error
      * log file, but better to do it twice and suffer a small performance
      * hit for consistancy than not reopen it here.
      */</comment>
    if (freopen("/dev/null", "w", stderr) == NULL) {
        return errno;
    }
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="60" pos:column="5">return <expr><name pos:line="60" pos:column="12">APR_SUCCESS<pos:position pos:line="60" pos:column="23"/></name></expr>;<pos:position pos:line="60" pos:column="24"/></return>
}<pos:position pos:line="61" pos:column="2"/></block></function></unit>
