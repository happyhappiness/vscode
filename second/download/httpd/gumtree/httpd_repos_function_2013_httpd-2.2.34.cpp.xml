<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2013_httpd-2.2.34.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">initialize_child<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">apr_pool_t<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">p<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">server_rec<pos:position pos:line="1" pos:column="55"/></name> <modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">s<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">sts<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>

    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">!<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">client_shm<pos:position pos:line="5" pos:column="20"/></name></expr>)<pos:position pos:line="5" pos:column="21"/></condition><then pos:line="5" pos:column="21"> <block pos:line="5" pos:column="22">{
        <return pos:line="6" pos:column="9">return;<pos:position pos:line="6" pos:column="16"/></return>
    }<pos:position pos:line="7" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="9" pos:column="5">/* FIXME: get the client_lock_name from a directive so we're portable
     * to non-process-inheriting operating systems, like Win32. */</comment>
    <expr_stmt><expr><name pos:line="11" pos:column="5">sts<pos:position pos:line="11" pos:column="8"/></name> <operator pos:line="11" pos:column="9">=<pos:position pos:line="11" pos:column="10"/></operator> <call><name pos:line="11" pos:column="11">apr_global_mutex_child_init<pos:position pos:line="11" pos:column="38"/></name><argument_list pos:line="11" pos:column="38">(<argument><expr><operator pos:line="11" pos:column="39">&amp;<pos:position pos:line="11" pos:column="44"/></operator><name pos:line="11" pos:column="40">client_lock<pos:position pos:line="11" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="53">client_lock_name<pos:position pos:line="11" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="71">p<pos:position pos:line="11" pos:column="72"/></name></expr></argument>)<pos:position pos:line="11" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="74"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">sts<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">!=<pos:position pos:line="12" pos:column="15"/></operator> <name pos:line="12" pos:column="16">APR_SUCCESS<pos:position pos:line="12" pos:column="27"/></name></expr>)<pos:position pos:line="12" pos:column="28"/></condition><then pos:line="12" pos:column="28"> <block pos:line="12" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">log_error_and_cleanup<pos:position pos:line="13" pos:column="30"/></name><argument_list pos:line="13" pos:column="30">(<argument><expr><literal type="string" pos:line="13" pos:column="31">"failed to create lock (client_lock)"<pos:position pos:line="13" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="70">sts<pos:position pos:line="13" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="75">s<pos:position pos:line="13" pos:column="76"/></name></expr></argument>)<pos:position pos:line="13" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="78"/></expr_stmt>
        <return pos:line="14" pos:column="9">return;<pos:position pos:line="14" pos:column="16"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="16" pos:column="5">/* FIXME: get the opaque_lock_name from a directive so we're portable
     * to non-process-inheriting operating systems, like Win32. */</comment>
    <expr_stmt><expr><name pos:line="18" pos:column="5">sts<pos:position pos:line="18" pos:column="8"/></name> <operator pos:line="18" pos:column="9">=<pos:position pos:line="18" pos:column="10"/></operator> <call><name pos:line="18" pos:column="11">apr_global_mutex_child_init<pos:position pos:line="18" pos:column="38"/></name><argument_list pos:line="18" pos:column="38">(<argument><expr><operator pos:line="18" pos:column="39">&amp;<pos:position pos:line="18" pos:column="44"/></operator><name pos:line="18" pos:column="40">opaque_lock<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="53">opaque_lock_name<pos:position pos:line="18" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="18" pos:column="71">p<pos:position pos:line="18" pos:column="72"/></name></expr></argument>)<pos:position pos:line="18" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="74"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">sts<pos:position pos:line="19" pos:column="12"/></name> <operator pos:line="19" pos:column="13">!=<pos:position pos:line="19" pos:column="15"/></operator> <name pos:line="19" pos:column="16">APR_SUCCESS<pos:position pos:line="19" pos:column="27"/></name></expr>)<pos:position pos:line="19" pos:column="28"/></condition><then pos:line="19" pos:column="28"> <block pos:line="19" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">log_error_and_cleanup<pos:position pos:line="20" pos:column="30"/></name><argument_list pos:line="20" pos:column="30">(<argument><expr><literal type="string" pos:line="20" pos:column="31">"failed to create lock (opaque_lock)"<pos:position pos:line="20" pos:column="68"/></literal></expr></argument>, <argument><expr><name pos:line="20" pos:column="70">sts<pos:position pos:line="20" pos:column="73"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="75">s<pos:position pos:line="20" pos:column="76"/></name></expr></argument>)<pos:position pos:line="20" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="78"/></expr_stmt>
        <return pos:line="21" pos:column="9">return;<pos:position pos:line="21" pos:column="16"/></return>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>
}<pos:position pos:line="23" pos:column="2"/></block></function></unit>
