<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_44_httpd-2.4.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">usage<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><specifier pos:line="1" pos:column="19">const<pos:position pos:line="1" pos:column="24"/></specifier> <name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">argv0<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">reason<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="57"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><name pos:line="3" pos:column="9">reason<pos:position pos:line="3" pos:column="15"/></name></expr>)<pos:position pos:line="3" pos:column="16"/></condition><then pos:line="3" pos:column="16"> <block pos:line="3" pos:column="17">{
        <expr_stmt><expr><call><name pos:line="4" pos:column="9">fprintf<pos:position pos:line="4" pos:column="16"/></name><argument_list pos:line="4" pos:column="16">(<argument><expr><name pos:line="4" pos:column="17">stderr<pos:position pos:line="4" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="25">"%s\n"<pos:position pos:line="4" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="4" pos:column="33">reason<pos:position pos:line="4" pos:column="39"/></name></expr></argument>)<pos:position pos:line="4" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="5" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">fprintf<pos:position pos:line="6" pos:column="12"/></name><argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">stderr<pos:position pos:line="6" pos:column="19"/></name></expr></argument>,
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">APR_FILES_AS_SOCKETS<pos:position pos:line="7" pos:column="25"/></name></expr></cpp:if>
            <argument><expr><literal type="string" pos:line="8" pos:column="13">"Usage: %s [-v] [-l] [-L linkname] [-p prog] [-f] [-t] [-e] [-c] [-n number] &lt;logfile&gt; "<pos:position pos:line="8" pos:column="107"/></literal>
<cpp:else pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">else<pos:position pos:line="9" pos:column="6"/></cpp:directive></cpp:else>
            <literal type="string" pos:line="10" pos:column="13">"Usage: %s [-v] [-l] [-L linkname] [-p prog] [-f] [-t] [-e] [-n number] &lt;logfile&gt; "<pos:position pos:line="10" pos:column="102"/></literal>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
            <literal type="string" pos:line="12" pos:column="13">"{&lt;rotation time in seconds&gt;|&lt;rotation size&gt;(B|K|M|G)} "<pos:position pos:line="12" pos:column="81"/></literal>
            <literal type="string" pos:line="13" pos:column="13">"[offset minutes from UTC]\n\n"<pos:position pos:line="13" pos:column="44"/></literal></expr></argument>,
            <argument><expr><name pos:line="14" pos:column="13">argv0<pos:position pos:line="14" pos:column="18"/></name></expr></argument>)<pos:position pos:line="14" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="20"/></expr_stmt>
<cpp:ifdef pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">ifdef<pos:position pos:line="15" pos:column="7"/></cpp:directive> <name pos:line="15" pos:column="8">OS2<pos:position pos:line="15" pos:column="11"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="16" pos:column="5">fprintf<pos:position pos:line="16" pos:column="12"/></name><argument_list pos:line="16" pos:column="12">(<argument><expr><name pos:line="16" pos:column="13">stderr<pos:position pos:line="16" pos:column="19"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="17" pos:column="13">"Add this:\n\nTransferLog \"|%s.exe /some/where 86400\"\n\n"<pos:position pos:line="17" pos:column="73"/></literal></expr></argument>,
            <argument><expr><name pos:line="18" pos:column="13">argv0<pos:position pos:line="18" pos:column="18"/></name></expr></argument>)<pos:position pos:line="18" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="20"/></expr_stmt>
<cpp:else pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">else<pos:position pos:line="19" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">fprintf<pos:position pos:line="20" pos:column="12"/></name><argument_list pos:line="20" pos:column="12">(<argument><expr><name pos:line="20" pos:column="13">stderr<pos:position pos:line="20" pos:column="19"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="21" pos:column="13">"Add this:\n\nTransferLog \"|%s /some/where 86400\"\n\n"<pos:position pos:line="21" pos:column="69"/></literal></expr></argument>,
            <argument><expr><name pos:line="22" pos:column="13">argv0<pos:position pos:line="22" pos:column="18"/></name></expr></argument>)<pos:position pos:line="22" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">fprintf<pos:position pos:line="23" pos:column="12"/></name><argument_list pos:line="23" pos:column="12">(<argument><expr><name pos:line="23" pos:column="13">stderr<pos:position pos:line="23" pos:column="19"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="24" pos:column="13">"or \n\nTransferLog \"|%s /some/where 5M\"\n\n"<pos:position pos:line="24" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="62">argv0<pos:position pos:line="24" pos:column="67"/></name></expr></argument>)<pos:position pos:line="24" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="69"/></expr_stmt>
<cpp:endif pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">endif<pos:position pos:line="25" pos:column="7"/></cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">fprintf<pos:position pos:line="26" pos:column="12"/></name><argument_list pos:line="26" pos:column="12">(<argument><expr><name pos:line="26" pos:column="13">stderr<pos:position pos:line="26" pos:column="19"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="27" pos:column="13">"to httpd.conf. By default, the generated name will be\n"<pos:position pos:line="27" pos:column="70"/></literal>
            <literal type="string" pos:line="28" pos:column="13">"&lt;logfile&gt;.nnnn where nnnn is the system time at which the log\n"<pos:position pos:line="28" pos:column="84"/></literal>
            <literal type="string" pos:line="29" pos:column="13">"nominally starts (N.B. if using a rotation time, the time will\n"<pos:position pos:line="29" pos:column="79"/></literal>
            <literal type="string" pos:line="30" pos:column="13">"always be a multiple of the rotation time, so you can synchronize\n"<pos:position pos:line="30" pos:column="82"/></literal>
            <literal type="string" pos:line="31" pos:column="13">"cron scripts with it). If &lt;logfile&gt; contains strftime conversion\n"<pos:position pos:line="31" pos:column="87"/></literal>
            <literal type="string" pos:line="32" pos:column="13">"specifications, those will be used instead. At the end of each\n"<pos:position pos:line="32" pos:column="79"/></literal>
            <literal type="string" pos:line="33" pos:column="13">"rotation time or when the file size is reached a new log is\n"<pos:position pos:line="33" pos:column="76"/></literal>
            <literal type="string" pos:line="34" pos:column="13">"started.\n"<pos:position pos:line="34" pos:column="25"/></literal>
            <literal type="string" pos:line="35" pos:column="13">"\n"<pos:position pos:line="35" pos:column="17"/></literal>
            <literal type="string" pos:line="36" pos:column="13">"Options:\n"<pos:position pos:line="36" pos:column="25"/></literal>
            <literal type="string" pos:line="37" pos:column="13">"  -v       Verbose operation. Messages are written to stderr.\n"<pos:position pos:line="37" pos:column="78"/></literal>
            <literal type="string" pos:line="38" pos:column="13">"  -l       Base rotation on local time instead of UTC.\n"<pos:position pos:line="38" pos:column="71"/></literal>
            <literal type="string" pos:line="39" pos:column="13">"  -L path  Create hard link from current log to specified path.\n"<pos:position pos:line="39" pos:column="80"/></literal>
            <literal type="string" pos:line="40" pos:column="13">"  -p prog  Run specified program after opening a new log file. See below.\n"<pos:position pos:line="40" pos:column="90"/></literal>
            <literal type="string" pos:line="41" pos:column="13">"  -f       Force opening of log on program start.\n"<pos:position pos:line="41" pos:column="66"/></literal>
            <literal type="string" pos:line="42" pos:column="13">"  -t       Truncate logfile instead of rotating, tail friendly.\n"<pos:position pos:line="42" pos:column="80"/></literal>
            <literal type="string" pos:line="43" pos:column="13">"  -e       Echo log to stdout for further processing.\n"<pos:position pos:line="43" pos:column="70"/></literal>
<cpp:if pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">if<pos:position pos:line="44" pos:column="4"/></cpp:directive> <expr><name pos:line="44" pos:column="5">APR_FILES_AS_SOCKETS<pos:position pos:line="44" pos:column="25"/></name></expr></cpp:if>
            <literal type="string" pos:line="45" pos:column="13">"  -c       Create log even if it is empty.\n"<pos:position pos:line="45" pos:column="59"/></literal>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif>
            <literal type="string" pos:line="47" pos:column="13">"\n"<pos:position pos:line="47" pos:column="17"/></literal>
            <literal type="string" pos:line="48" pos:column="13">"The program is invoked as \"[prog] &lt;curfile&gt; [&lt;prevfile&gt;]\"\n"<pos:position pos:line="48" pos:column="88"/></literal>
            <literal type="string" pos:line="49" pos:column="13">"where &lt;curfile&gt; is the filename of the newly opened logfile, and\n"<pos:position pos:line="49" pos:column="87"/></literal>
            <literal type="string" pos:line="50" pos:column="13">"&lt;prevfile&gt;, if given, is the filename of the previously used logfile.\n"<pos:position pos:line="50" pos:column="92"/></literal>
            <literal type="string" pos:line="51" pos:column="13">"\n"<pos:position pos:line="51" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="52" pos:column="5">exit<pos:position pos:line="52" pos:column="9"/></name><argument_list pos:line="52" pos:column="9">(<argument><expr><literal type="number" pos:line="52" pos:column="10">1<pos:position pos:line="52" pos:column="11"/></literal></expr></argument>)<pos:position pos:line="52" pos:column="12"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="13"/></expr_stmt>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
