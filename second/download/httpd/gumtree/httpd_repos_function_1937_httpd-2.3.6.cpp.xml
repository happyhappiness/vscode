<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1937_httpd-2.3.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">set_pattern<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">cmd_parms<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">cmd<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">void<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">cfg<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="59">const<pos:position pos:line="1" pos:column="64"/></specifier> <name pos:line="1" pos:column="65">char<pos:position pos:line="1" pos:column="69"/></name> <modifier pos:line="1" pos:column="70">*<pos:position pos:line="1" pos:column="71"/></modifier></type><name pos:line="1" pos:column="71">line<pos:position pos:line="1" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="76"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">from<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">NULL<pos:position pos:line="3" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">char<pos:position pos:line="4" pos:column="9"/></name> <modifier pos:line="4" pos:column="10">*<pos:position pos:line="4" pos:column="11"/></modifier></type><name pos:line="4" pos:column="11">to<pos:position pos:line="4" pos:column="13"/></name> <init pos:line="4" pos:column="14">= <expr><name pos:line="4" pos:column="16">NULL<pos:position pos:line="4" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">char<pos:position pos:line="5" pos:column="9"/></name> <modifier pos:line="5" pos:column="10">*<pos:position pos:line="5" pos:column="11"/></modifier></type><name pos:line="5" pos:column="11">flags<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><name pos:line="5" pos:column="19">NULL<pos:position pos:line="5" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">ourline<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name pos:line="7" pos:column="10">delim<pos:position pos:line="7" pos:column="15"/></name></decl>;<pos:position pos:line="7" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">subst_pattern_t<pos:position pos:line="8" pos:column="20"/></name> <modifier pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></modifier></type><name pos:line="8" pos:column="22">nscript<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">is_pattern<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><literal type="number" pos:line="9" pos:column="22">0<pos:position pos:line="9" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">ignore_case<pos:position pos:line="10" pos:column="20"/></name> <init pos:line="10" pos:column="21">= <expr><literal type="number" pos:line="10" pos:column="23">0<pos:position pos:line="10" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">flatten<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><literal type="number" pos:line="11" pos:column="19">1<pos:position pos:line="11" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="11" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">ap_regex_t<pos:position pos:line="12" pos:column="15"/></name> <modifier pos:line="12" pos:column="16">*<pos:position pos:line="12" pos:column="17"/></modifier></type><name pos:line="12" pos:column="17">r<pos:position pos:line="12" pos:column="18"/></name> <init pos:line="12" pos:column="19">= <expr><name pos:line="12" pos:column="21">NULL<pos:position pos:line="12" pos:column="25"/></name></expr></init></decl>;<pos:position pos:line="12" pos:column="26"/></decl_stmt>

    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">apr_tolower<pos:position pos:line="14" pos:column="20"/></name><argument_list pos:line="14" pos:column="20">(<argument><expr><operator pos:line="14" pos:column="21">*<pos:position pos:line="14" pos:column="22"/></operator><name pos:line="14" pos:column="22">line<pos:position pos:line="14" pos:column="26"/></name></expr></argument>)<pos:position pos:line="14" pos:column="27"/></argument_list></call> <operator pos:line="14" pos:column="28">!=<pos:position pos:line="14" pos:column="30"/></operator> <literal type="char" pos:line="14" pos:column="31">'s'<pos:position pos:line="14" pos:column="34"/></literal></expr>)<pos:position pos:line="14" pos:column="35"/></condition><then pos:line="14" pos:column="35"> <block pos:line="14" pos:column="36">{
        <return pos:line="15" pos:column="9">return <expr><literal type="string" pos:line="15" pos:column="16">"Bad Substitute format, must be an s/// pattern"<pos:position pos:line="15" pos:column="64"/></literal></expr>;<pos:position pos:line="15" pos:column="65"/></return>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="17" pos:column="5">ourline<pos:position pos:line="17" pos:column="12"/></name> <operator pos:line="17" pos:column="13">=<pos:position pos:line="17" pos:column="14"/></operator> <call><name pos:line="17" pos:column="15">apr_pstrdup<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name><name pos:line="17" pos:column="27">cmd<pos:position pos:line="17" pos:column="30"/></name><operator pos:line="17" pos:column="30">-&gt;<pos:position pos:line="17" pos:column="35"/></operator><name pos:line="17" pos:column="32">pool<pos:position pos:line="17" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="38">line<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name pos:line="18" pos:column="5">delim<pos:position pos:line="18" pos:column="10"/></name> <operator pos:line="18" pos:column="11">=<pos:position pos:line="18" pos:column="12"/></operator> <operator pos:line="18" pos:column="13">*<pos:position pos:line="18" pos:column="14"/></operator><operator pos:line="18" pos:column="14">++<pos:position pos:line="18" pos:column="16"/></operator><name pos:line="18" pos:column="16">ourline<pos:position pos:line="18" pos:column="23"/></name></expr>;<pos:position pos:line="18" pos:column="24"/></expr_stmt>
    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">delim<pos:position pos:line="19" pos:column="14"/></name></expr>)<pos:position pos:line="19" pos:column="15"/></condition><then pos:line="19" pos:column="15">
        <block type="pseudo"><expr_stmt><expr><name pos:line="20" pos:column="9">from<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <operator pos:line="20" pos:column="16">++<pos:position pos:line="20" pos:column="18"/></operator><name pos:line="20" pos:column="18">ourline<pos:position pos:line="20" pos:column="25"/></name></expr>;<pos:position pos:line="20" pos:column="26"/></expr_stmt></block></then></if>
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><name pos:line="21" pos:column="9">from<pos:position pos:line="21" pos:column="13"/></name></expr>)<pos:position pos:line="21" pos:column="14"/></condition><then pos:line="21" pos:column="14"> <block pos:line="21" pos:column="15">{
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">*<pos:position pos:line="22" pos:column="14"/></operator><name pos:line="22" pos:column="14">ourline<pos:position pos:line="22" pos:column="21"/></name> <operator pos:line="22" pos:column="22">!=<pos:position pos:line="22" pos:column="24"/></operator> <name pos:line="22" pos:column="25">delim<pos:position pos:line="22" pos:column="30"/></name></expr>)<pos:position pos:line="22" pos:column="31"/></condition><then pos:line="22" pos:column="31"> <block pos:line="22" pos:column="32">{
            <while pos:line="23" pos:column="13">while <condition pos:line="23" pos:column="19">(<expr><operator pos:line="23" pos:column="20">*<pos:position pos:line="23" pos:column="21"/></operator><operator pos:line="23" pos:column="21">++<pos:position pos:line="23" pos:column="23"/></operator><name pos:line="23" pos:column="23">ourline<pos:position pos:line="23" pos:column="30"/></name> <operator pos:line="23" pos:column="31">&amp;&amp;<pos:position pos:line="23" pos:column="41"/></operator> <operator pos:line="23" pos:column="34">*<pos:position pos:line="23" pos:column="35"/></operator><name pos:line="23" pos:column="35">ourline<pos:position pos:line="23" pos:column="42"/></name> <operator pos:line="23" pos:column="43">!=<pos:position pos:line="23" pos:column="45"/></operator> <name pos:line="23" pos:column="46">delim<pos:position pos:line="23" pos:column="51"/></name></expr>)<pos:position pos:line="23" pos:column="52"/></condition><block type="pseudo"><empty_stmt pos:line="23" pos:column="52">;<pos:position pos:line="23" pos:column="53"/></empty_stmt></block></while>
        }<pos:position pos:line="24" pos:column="10"/></block></then></if>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><operator pos:line="25" pos:column="13">*<pos:position pos:line="25" pos:column="14"/></operator><name pos:line="25" pos:column="14">ourline<pos:position pos:line="25" pos:column="21"/></name></expr>)<pos:position pos:line="25" pos:column="22"/></condition><then pos:line="25" pos:column="22"> <block pos:line="25" pos:column="23">{
            <expr_stmt><expr><operator pos:line="26" pos:column="13">*<pos:position pos:line="26" pos:column="14"/></operator><name pos:line="26" pos:column="14">ourline<pos:position pos:line="26" pos:column="21"/></name> <operator pos:line="26" pos:column="22">=<pos:position pos:line="26" pos:column="23"/></operator> <literal type="char" pos:line="26" pos:column="24">'\0'<pos:position pos:line="26" pos:column="28"/></literal></expr>;<pos:position pos:line="26" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="27" pos:column="13">to<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <operator pos:line="27" pos:column="18">++<pos:position pos:line="27" pos:column="20"/></operator><name pos:line="27" pos:column="20">ourline<pos:position pos:line="27" pos:column="27"/></name></expr>;<pos:position pos:line="27" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">to<pos:position pos:line="30" pos:column="11"/></name></expr>)<pos:position pos:line="30" pos:column="12"/></condition><then pos:line="30" pos:column="12"> <block pos:line="30" pos:column="13">{
        <if pos:line="31" pos:column="9">if <condition pos:line="31" pos:column="12">(<expr><operator pos:line="31" pos:column="13">*<pos:position pos:line="31" pos:column="14"/></operator><name pos:line="31" pos:column="14">ourline<pos:position pos:line="31" pos:column="21"/></name> <operator pos:line="31" pos:column="22">!=<pos:position pos:line="31" pos:column="24"/></operator> <name pos:line="31" pos:column="25">delim<pos:position pos:line="31" pos:column="30"/></name></expr>)<pos:position pos:line="31" pos:column="31"/></condition><then pos:line="31" pos:column="31"> <block pos:line="31" pos:column="32">{
            <while pos:line="32" pos:column="13">while <condition pos:line="32" pos:column="19">(<expr><operator pos:line="32" pos:column="20">*<pos:position pos:line="32" pos:column="21"/></operator><operator pos:line="32" pos:column="21">++<pos:position pos:line="32" pos:column="23"/></operator><name pos:line="32" pos:column="23">ourline<pos:position pos:line="32" pos:column="30"/></name> <operator pos:line="32" pos:column="31">&amp;&amp;<pos:position pos:line="32" pos:column="41"/></operator> <operator pos:line="32" pos:column="34">*<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="35">ourline<pos:position pos:line="32" pos:column="42"/></name> <operator pos:line="32" pos:column="43">!=<pos:position pos:line="32" pos:column="45"/></operator> <name pos:line="32" pos:column="46">delim<pos:position pos:line="32" pos:column="51"/></name></expr>)<pos:position pos:line="32" pos:column="52"/></condition><block type="pseudo"><empty_stmt pos:line="32" pos:column="52">;<pos:position pos:line="32" pos:column="53"/></empty_stmt></block></while>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><operator pos:line="34" pos:column="13">*<pos:position pos:line="34" pos:column="14"/></operator><name pos:line="34" pos:column="14">ourline<pos:position pos:line="34" pos:column="21"/></name></expr>)<pos:position pos:line="34" pos:column="22"/></condition><then pos:line="34" pos:column="22"> <block pos:line="34" pos:column="23">{
            <expr_stmt><expr><operator pos:line="35" pos:column="13">*<pos:position pos:line="35" pos:column="14"/></operator><name pos:line="35" pos:column="14">ourline<pos:position pos:line="35" pos:column="21"/></name> <operator pos:line="35" pos:column="22">=<pos:position pos:line="35" pos:column="23"/></operator> <literal type="char" pos:line="35" pos:column="24">'\0'<pos:position pos:line="35" pos:column="28"/></literal></expr>;<pos:position pos:line="35" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><name pos:line="36" pos:column="13">flags<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <operator pos:line="36" pos:column="21">++<pos:position pos:line="36" pos:column="23"/></operator><name pos:line="36" pos:column="23">ourline<pos:position pos:line="36" pos:column="30"/></name></expr>;<pos:position pos:line="36" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><operator pos:line="40" pos:column="9">!<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="10">delim<pos:position pos:line="40" pos:column="15"/></name> <operator pos:line="40" pos:column="16">||<pos:position pos:line="40" pos:column="18"/></operator> <operator pos:line="40" pos:column="19">!<pos:position pos:line="40" pos:column="20"/></operator><name pos:line="40" pos:column="20">from<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">||<pos:position pos:line="40" pos:column="27"/></operator> <operator pos:line="40" pos:column="28">!<pos:position pos:line="40" pos:column="29"/></operator><operator pos:line="40" pos:column="29">*<pos:position pos:line="40" pos:column="30"/></operator><name pos:line="40" pos:column="30">from<pos:position pos:line="40" pos:column="34"/></name> <operator pos:line="40" pos:column="35">||<pos:position pos:line="40" pos:column="37"/></operator> <operator pos:line="40" pos:column="38">!<pos:position pos:line="40" pos:column="39"/></operator><name pos:line="40" pos:column="39">to<pos:position pos:line="40" pos:column="41"/></name></expr>)<pos:position pos:line="40" pos:column="42"/></condition><then pos:line="40" pos:column="42"> <block pos:line="40" pos:column="43">{
        <return pos:line="41" pos:column="9">return <expr><literal type="string" pos:line="41" pos:column="16">"Bad Substitute format, must be a complete s/// pattern"<pos:position pos:line="41" pos:column="72"/></literal></expr>;<pos:position pos:line="41" pos:column="73"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <if pos:line="44" pos:column="5">if <condition pos:line="44" pos:column="8">(<expr><name pos:line="44" pos:column="9">flags<pos:position pos:line="44" pos:column="14"/></name></expr>)<pos:position pos:line="44" pos:column="15"/></condition><then pos:line="44" pos:column="15"> <block pos:line="44" pos:column="16">{
        <while pos:line="45" pos:column="9">while <condition pos:line="45" pos:column="15">(<expr><operator pos:line="45" pos:column="16">*<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">flags<pos:position pos:line="45" pos:column="22"/></name></expr>)<pos:position pos:line="45" pos:column="23"/></condition> <block pos:line="45" pos:column="24">{
            <expr_stmt><expr><name pos:line="46" pos:column="13">delim<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <call><name pos:line="46" pos:column="21">apr_tolower<pos:position pos:line="46" pos:column="32"/></name><argument_list pos:line="46" pos:column="32">(<argument><expr><operator pos:line="46" pos:column="33">*<pos:position pos:line="46" pos:column="34"/></operator><name pos:line="46" pos:column="34">flags<pos:position pos:line="46" pos:column="39"/></name></expr></argument>)<pos:position pos:line="46" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="41"/></expr_stmt>    <comment type="block" pos:line="46" pos:column="45">/* re-use */</comment>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name pos:line="47" pos:column="17">delim<pos:position pos:line="47" pos:column="22"/></name> <operator pos:line="47" pos:column="23">==<pos:position pos:line="47" pos:column="25"/></operator> <literal type="char" pos:line="47" pos:column="26">'i'<pos:position pos:line="47" pos:column="29"/></literal></expr>)<pos:position pos:line="47" pos:column="30"/></condition><then pos:line="47" pos:column="30">
                <block type="pseudo"><expr_stmt><expr><name pos:line="48" pos:column="17">ignore_case<pos:position pos:line="48" pos:column="28"/></name> <operator pos:line="48" pos:column="29">=<pos:position pos:line="48" pos:column="30"/></operator> <literal type="number" pos:line="48" pos:column="31">1<pos:position pos:line="48" pos:column="32"/></literal></expr>;<pos:position pos:line="48" pos:column="33"/></expr_stmt></block></then>
            <elseif pos:line="49" pos:column="13">else <if pos:line="49" pos:column="18">if <condition pos:line="49" pos:column="21">(<expr><name pos:line="49" pos:column="22">delim<pos:position pos:line="49" pos:column="27"/></name> <operator pos:line="49" pos:column="28">==<pos:position pos:line="49" pos:column="30"/></operator> <literal type="char" pos:line="49" pos:column="31">'n'<pos:position pos:line="49" pos:column="34"/></literal></expr>)<pos:position pos:line="49" pos:column="35"/></condition><then pos:line="49" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name pos:line="50" pos:column="17">is_pattern<pos:position pos:line="50" pos:column="27"/></name> <operator pos:line="50" pos:column="28">=<pos:position pos:line="50" pos:column="29"/></operator> <literal type="number" pos:line="50" pos:column="30">1<pos:position pos:line="50" pos:column="31"/></literal></expr>;<pos:position pos:line="50" pos:column="32"/></expr_stmt></block></then></if></elseif>
            <elseif pos:line="51" pos:column="13">else <if pos:line="51" pos:column="18">if <condition pos:line="51" pos:column="21">(<expr><name pos:line="51" pos:column="22">delim<pos:position pos:line="51" pos:column="27"/></name> <operator pos:line="51" pos:column="28">==<pos:position pos:line="51" pos:column="30"/></operator> <literal type="char" pos:line="51" pos:column="31">'f'<pos:position pos:line="51" pos:column="34"/></literal></expr>)<pos:position pos:line="51" pos:column="35"/></condition><then pos:line="51" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="17">flatten<pos:position pos:line="52" pos:column="24"/></name> <operator pos:line="52" pos:column="25">=<pos:position pos:line="52" pos:column="26"/></operator> <literal type="number" pos:line="52" pos:column="27">1<pos:position pos:line="52" pos:column="28"/></literal></expr>;<pos:position pos:line="52" pos:column="29"/></expr_stmt></block></then></if></elseif>
            <elseif pos:line="53" pos:column="13">else <if pos:line="53" pos:column="18">if <condition pos:line="53" pos:column="21">(<expr><name pos:line="53" pos:column="22">delim<pos:position pos:line="53" pos:column="27"/></name> <operator pos:line="53" pos:column="28">==<pos:position pos:line="53" pos:column="30"/></operator> <literal type="char" pos:line="53" pos:column="31">'q'<pos:position pos:line="53" pos:column="34"/></literal></expr>)<pos:position pos:line="53" pos:column="35"/></condition><then pos:line="53" pos:column="35">
                <block type="pseudo"><expr_stmt><expr><name pos:line="54" pos:column="17">flatten<pos:position pos:line="54" pos:column="24"/></name> <operator pos:line="54" pos:column="25">=<pos:position pos:line="54" pos:column="26"/></operator> <literal type="number" pos:line="54" pos:column="27">0<pos:position pos:line="54" pos:column="28"/></literal></expr>;<pos:position pos:line="54" pos:column="29"/></expr_stmt></block></then></if></elseif>
            <else pos:line="55" pos:column="13">else
                <block type="pseudo"><return pos:line="56" pos:column="17">return <expr><literal type="string" pos:line="56" pos:column="24">"Bad Substitute flag, only s///[infq] are supported"<pos:position pos:line="56" pos:column="76"/></literal></expr>;<pos:position pos:line="56" pos:column="77"/></return></block></else></if>
            <expr_stmt><expr><name pos:line="57" pos:column="13">flags<pos:position pos:line="57" pos:column="18"/></name><operator pos:line="57" pos:column="18">++<pos:position pos:line="57" pos:column="20"/></operator></expr>;<pos:position pos:line="57" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></while>
    }<pos:position pos:line="59" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="61" pos:column="5">/* first see if we can compile the regex */</comment>
    <if pos:line="62" pos:column="5">if <condition pos:line="62" pos:column="8">(<expr><operator pos:line="62" pos:column="9">!<pos:position pos:line="62" pos:column="10"/></operator><name pos:line="62" pos:column="10">is_pattern<pos:position pos:line="62" pos:column="20"/></name></expr>)<pos:position pos:line="62" pos:column="21"/></condition><then pos:line="62" pos:column="21"> <block pos:line="62" pos:column="22">{
        <expr_stmt><expr><name pos:line="63" pos:column="9">r<pos:position pos:line="63" pos:column="10"/></name> <operator pos:line="63" pos:column="11">=<pos:position pos:line="63" pos:column="12"/></operator> <call><name pos:line="63" pos:column="13">ap_pregcomp<pos:position pos:line="63" pos:column="24"/></name><argument_list pos:line="63" pos:column="24">(<argument><expr><name><name pos:line="63" pos:column="25">cmd<pos:position pos:line="63" pos:column="28"/></name><operator pos:line="63" pos:column="28">-&gt;<pos:position pos:line="63" pos:column="33"/></operator><name pos:line="63" pos:column="30">pool<pos:position pos:line="63" pos:column="34"/></name></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="36">from<pos:position pos:line="63" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="42">AP_REG_EXTENDED<pos:position pos:line="63" pos:column="57"/></name> <operator pos:line="63" pos:column="58">|<pos:position pos:line="63" pos:column="59"/></operator>
                        <operator pos:line="64" pos:column="25">(<pos:position pos:line="64" pos:column="26"/></operator><ternary><condition><expr><name pos:line="64" pos:column="26">ignore_case<pos:position pos:line="64" pos:column="37"/></name></expr> ?<pos:position pos:line="64" pos:column="39"/></condition><then pos:line="64" pos:column="39"> <expr><name pos:line="64" pos:column="40">AP_REG_ICASE<pos:position pos:line="64" pos:column="52"/></name></expr> <pos:position pos:line="64" pos:column="53"/></then><else pos:line="64" pos:column="53">: <expr><literal type="number" pos:line="64" pos:column="55">0<pos:position pos:line="64" pos:column="56"/></literal></expr></else></ternary><operator pos:line="64" pos:column="56">)<pos:position pos:line="64" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="64" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="59"/></expr_stmt>
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><operator pos:line="65" pos:column="13">!<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">r<pos:position pos:line="65" pos:column="15"/></name></expr>)<pos:position pos:line="65" pos:column="16"/></condition><then pos:line="65" pos:column="16">
            <block type="pseudo"><return pos:line="66" pos:column="13">return <expr><literal type="string" pos:line="66" pos:column="20">"Substitute could not compile regex"<pos:position pos:line="66" pos:column="56"/></literal></expr>;<pos:position pos:line="66" pos:column="57"/></return></block></then></if>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="68" pos:column="5">nscript<pos:position pos:line="68" pos:column="12"/></name> <operator pos:line="68" pos:column="13">=<pos:position pos:line="68" pos:column="14"/></operator> <call><name pos:line="68" pos:column="15">apr_array_push<pos:position pos:line="68" pos:column="29"/></name><argument_list pos:line="68" pos:column="29">(<argument><expr><operator pos:line="68" pos:column="30">(<pos:position pos:line="68" pos:column="31"/></operator><operator pos:line="68" pos:column="31">(<pos:position pos:line="68" pos:column="32"/></operator><name pos:line="68" pos:column="32">subst_dir_conf<pos:position pos:line="68" pos:column="46"/></name> <operator pos:line="68" pos:column="47">*<pos:position pos:line="68" pos:column="48"/></operator><operator pos:line="68" pos:column="48">)<pos:position pos:line="68" pos:column="49"/></operator> <name pos:line="68" pos:column="50">cfg<pos:position pos:line="68" pos:column="53"/></name><operator pos:line="68" pos:column="53">)<pos:position pos:line="68" pos:column="54"/></operator><operator pos:line="68" pos:column="54">-&gt;<pos:position pos:line="68" pos:column="59"/></operator><name pos:line="68" pos:column="56">patterns<pos:position pos:line="68" pos:column="64"/></name></expr></argument>)<pos:position pos:line="68" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="66"/></expr_stmt>
    <comment type="block" pos:line="69" pos:column="5">/* init the new entries */</comment>
    <expr_stmt><expr><name><name pos:line="70" pos:column="5">nscript<pos:position pos:line="70" pos:column="12"/></name><operator pos:line="70" pos:column="12">-&gt;<pos:position pos:line="70" pos:column="17"/></operator><name pos:line="70" pos:column="14">pattern<pos:position pos:line="70" pos:column="21"/></name></name> <operator pos:line="70" pos:column="22">=<pos:position pos:line="70" pos:column="23"/></operator> <name pos:line="70" pos:column="24">NULL<pos:position pos:line="70" pos:column="28"/></name></expr>;<pos:position pos:line="70" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="71" pos:column="5">nscript<pos:position pos:line="71" pos:column="12"/></name><operator pos:line="71" pos:column="12">-&gt;<pos:position pos:line="71" pos:column="17"/></operator><name pos:line="71" pos:column="14">regexp<pos:position pos:line="71" pos:column="20"/></name></name> <operator pos:line="71" pos:column="21">=<pos:position pos:line="71" pos:column="22"/></operator> <name pos:line="71" pos:column="23">NULL<pos:position pos:line="71" pos:column="27"/></name></expr>;<pos:position pos:line="71" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="72" pos:column="5">nscript<pos:position pos:line="72" pos:column="12"/></name><operator pos:line="72" pos:column="12">-&gt;<pos:position pos:line="72" pos:column="17"/></operator><name pos:line="72" pos:column="14">replacement<pos:position pos:line="72" pos:column="25"/></name></name> <operator pos:line="72" pos:column="26">=<pos:position pos:line="72" pos:column="27"/></operator> <name pos:line="72" pos:column="28">NULL<pos:position pos:line="72" pos:column="32"/></name></expr>;<pos:position pos:line="72" pos:column="33"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="73" pos:column="5">nscript<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">-&gt;<pos:position pos:line="73" pos:column="17"/></operator><name pos:line="73" pos:column="14">patlen<pos:position pos:line="73" pos:column="20"/></name></name> <operator pos:line="73" pos:column="21">=<pos:position pos:line="73" pos:column="22"/></operator> <literal type="number" pos:line="73" pos:column="23">0<pos:position pos:line="73" pos:column="24"/></literal></expr>;<pos:position pos:line="73" pos:column="25"/></expr_stmt>

    <if pos:line="75" pos:column="5">if <condition pos:line="75" pos:column="8">(<expr><name pos:line="75" pos:column="9">is_pattern<pos:position pos:line="75" pos:column="19"/></name></expr>)<pos:position pos:line="75" pos:column="20"/></condition><then pos:line="75" pos:column="20"> <block pos:line="75" pos:column="21">{
        <expr_stmt><expr><name><name pos:line="76" pos:column="9">nscript<pos:position pos:line="76" pos:column="16"/></name><operator pos:line="76" pos:column="16">-&gt;<pos:position pos:line="76" pos:column="21"/></operator><name pos:line="76" pos:column="18">patlen<pos:position pos:line="76" pos:column="24"/></name></name> <operator pos:line="76" pos:column="25">=<pos:position pos:line="76" pos:column="26"/></operator> <call><name pos:line="76" pos:column="27">strlen<pos:position pos:line="76" pos:column="33"/></name><argument_list pos:line="76" pos:column="33">(<argument><expr><name pos:line="76" pos:column="34">from<pos:position pos:line="76" pos:column="38"/></name></expr></argument>)<pos:position pos:line="76" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="77" pos:column="9">nscript<pos:position pos:line="77" pos:column="16"/></name><operator pos:line="77" pos:column="16">-&gt;<pos:position pos:line="77" pos:column="21"/></operator><name pos:line="77" pos:column="18">pattern<pos:position pos:line="77" pos:column="25"/></name></name> <operator pos:line="77" pos:column="26">=<pos:position pos:line="77" pos:column="27"/></operator> <call><name pos:line="77" pos:column="28">apr_strmatch_precompile<pos:position pos:line="77" pos:column="51"/></name><argument_list pos:line="77" pos:column="51">(<argument><expr><name><name pos:line="77" pos:column="52">cmd<pos:position pos:line="77" pos:column="55"/></name><operator pos:line="77" pos:column="55">-&gt;<pos:position pos:line="77" pos:column="60"/></operator><name pos:line="77" pos:column="57">pool<pos:position pos:line="77" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="63">from<pos:position pos:line="77" pos:column="67"/></name></expr></argument>, 
                                                   <argument><expr><operator pos:line="78" pos:column="52">!<pos:position pos:line="78" pos:column="53"/></operator><name pos:line="78" pos:column="53">ignore_case<pos:position pos:line="78" pos:column="64"/></name></expr></argument>)<pos:position pos:line="78" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></then>
    <else pos:line="80" pos:column="5">else <block pos:line="80" pos:column="10">{
        <expr_stmt><expr><name><name pos:line="81" pos:column="9">nscript<pos:position pos:line="81" pos:column="16"/></name><operator pos:line="81" pos:column="16">-&gt;<pos:position pos:line="81" pos:column="21"/></operator><name pos:line="81" pos:column="18">regexp<pos:position pos:line="81" pos:column="24"/></name></name> <operator pos:line="81" pos:column="25">=<pos:position pos:line="81" pos:column="26"/></operator> <name pos:line="81" pos:column="27">r<pos:position pos:line="81" pos:column="28"/></name></expr>;<pos:position pos:line="81" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="82" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name><name pos:line="84" pos:column="5">nscript<pos:position pos:line="84" pos:column="12"/></name><operator pos:line="84" pos:column="12">-&gt;<pos:position pos:line="84" pos:column="17"/></operator><name pos:line="84" pos:column="14">replacement<pos:position pos:line="84" pos:column="25"/></name></name> <operator pos:line="84" pos:column="26">=<pos:position pos:line="84" pos:column="27"/></operator> <name pos:line="84" pos:column="28">to<pos:position pos:line="84" pos:column="30"/></name></expr>;<pos:position pos:line="84" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="85" pos:column="5">nscript<pos:position pos:line="85" pos:column="12"/></name><operator pos:line="85" pos:column="12">-&gt;<pos:position pos:line="85" pos:column="17"/></operator><name pos:line="85" pos:column="14">replen<pos:position pos:line="85" pos:column="20"/></name></name> <operator pos:line="85" pos:column="21">=<pos:position pos:line="85" pos:column="22"/></operator> <call><name pos:line="85" pos:column="23">strlen<pos:position pos:line="85" pos:column="29"/></name><argument_list pos:line="85" pos:column="29">(<argument><expr><name pos:line="85" pos:column="30">to<pos:position pos:line="85" pos:column="32"/></name></expr></argument>)<pos:position pos:line="85" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="86" pos:column="5">nscript<pos:position pos:line="86" pos:column="12"/></name><operator pos:line="86" pos:column="12">-&gt;<pos:position pos:line="86" pos:column="17"/></operator><name pos:line="86" pos:column="14">flatten<pos:position pos:line="86" pos:column="21"/></name></name> <operator pos:line="86" pos:column="22">=<pos:position pos:line="86" pos:column="23"/></operator> <name pos:line="86" pos:column="24">flatten<pos:position pos:line="86" pos:column="31"/></name></expr>;<pos:position pos:line="86" pos:column="32"/></expr_stmt>

    <return pos:line="88" pos:column="5">return <expr><name pos:line="88" pos:column="12">NULL<pos:position pos:line="88" pos:column="16"/></name></expr>;<pos:position pos:line="88" pos:column="17"/></return>
}<pos:position pos:line="89" pos:column="2"/></block></function></unit>
