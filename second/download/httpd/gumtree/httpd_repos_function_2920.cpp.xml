<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2920.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ap_core_input_filter<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">ap_filter_t<pos:position pos:line="1" pos:column="37"/></name> <modifier pos:line="1" pos:column="38">*<pos:position pos:line="1" pos:column="39"/></modifier></type><name pos:line="1" pos:column="39">f<pos:position pos:line="1" pos:column="40"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="42">apr_bucket_brigade<pos:position pos:line="1" pos:column="60"/></name> <modifier pos:line="1" pos:column="61">*<pos:position pos:line="1" pos:column="62"/></modifier></type><name pos:line="1" pos:column="62">b<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">ap_input_mode_t<pos:position pos:line="2" pos:column="41"/></name></type> <name pos:line="2" pos:column="42">mode<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">apr_read_type_e<pos:position pos:line="2" pos:column="63"/></name></type> <name pos:line="2" pos:column="64">block<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="3" pos:column="26">apr_off_t<pos:position pos:line="3" pos:column="35"/></name></type> <name pos:line="3" pos:column="36">readbytes<pos:position pos:line="3" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="46"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_bucket<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">e<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">core_net_rec<pos:position pos:line="7" pos:column="17"/></name> <modifier pos:line="7" pos:column="18">*<pos:position pos:line="7" pos:column="19"/></modifier></type><name pos:line="7" pos:column="19">net<pos:position pos:line="7" pos:column="22"/></name> <init pos:line="7" pos:column="23">= <expr><name><name pos:line="7" pos:column="25">f<pos:position pos:line="7" pos:column="26"/></name><operator pos:line="7" pos:column="26">-&gt;<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="28">ctx<pos:position pos:line="7" pos:column="31"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">core_ctx_t<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">ctx<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><name><name pos:line="8" pos:column="23">net<pos:position pos:line="8" pos:column="26"/></name><operator pos:line="8" pos:column="26">-&gt;<pos:position pos:line="8" pos:column="31"/></operator><name pos:line="8" pos:column="28">in_ctx<pos:position pos:line="8" pos:column="34"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="35"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">str<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_size_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">len<pos:position pos:line="10" pos:column="19"/></name></decl>;<pos:position pos:line="10" pos:column="20"/></decl_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">mode<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">==<pos:position pos:line="12" pos:column="16"/></operator> <name pos:line="12" pos:column="17">AP_MODE_INIT<pos:position pos:line="12" pos:column="29"/></name></expr>)<pos:position pos:line="12" pos:column="30"/></condition><then pos:line="12" pos:column="30"> <block pos:line="12" pos:column="31">{
        <comment type="block" pos:line="13" pos:column="9">/*
         * this mode is for filters that might need to 'initialize'
         * a connection before reading request data from a client.
         * NNTP over SSL for example needs to handshake before the
         * server sends the welcome message.
         * such filters would have changed the mode before this point
         * is reached.  however, protocol modules such as NNTP should
         * not need to know anything about SSL.  given the example, if
         * SSL is not in the filter chain, AP_MODE_INIT is a noop.
         */</comment>
        <return pos:line="23" pos:column="9">return <expr><name pos:line="23" pos:column="16">APR_SUCCESS<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></return>
    }<pos:position pos:line="24" pos:column="6"/></block></then></if>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">ctx<pos:position pos:line="26" pos:column="13"/></name></expr>)<pos:position pos:line="26" pos:column="14"/></condition><then pos:line="26" pos:column="14">
    <block pos:line="27" pos:column="5">{
        <expr_stmt><expr><name pos:line="28" pos:column="9">ctx<pos:position pos:line="28" pos:column="12"/></name> <operator pos:line="28" pos:column="13">=<pos:position pos:line="28" pos:column="14"/></operator> <call><name pos:line="28" pos:column="15">apr_pcalloc<pos:position pos:line="28" pos:column="26"/></name><argument_list pos:line="28" pos:column="26">(<argument><expr><name><name pos:line="28" pos:column="27">f<pos:position pos:line="28" pos:column="28"/></name><operator pos:line="28" pos:column="28">-&gt;<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="30">c<pos:position pos:line="28" pos:column="31"/></name><operator pos:line="28" pos:column="31">-&gt;<pos:position pos:line="28" pos:column="36"/></operator><name pos:line="28" pos:column="33">pool<pos:position pos:line="28" pos:column="37"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="28" pos:column="39">sizeof<argument_list pos:line="28" pos:column="45">(<argument><expr><operator pos:line="28" pos:column="46">*<pos:position pos:line="28" pos:column="47"/></operator><name pos:line="28" pos:column="47">ctx<pos:position pos:line="28" pos:column="50"/></name></expr></argument>)<pos:position pos:line="28" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="28" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="29" pos:column="9">ctx<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">-&gt;<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="14">b<pos:position pos:line="29" pos:column="15"/></name></name> <operator pos:line="29" pos:column="16">=<pos:position pos:line="29" pos:column="17"/></operator> <call><name pos:line="29" pos:column="18">apr_brigade_create<pos:position pos:line="29" pos:column="36"/></name><argument_list pos:line="29" pos:column="36">(<argument><expr><name><name pos:line="29" pos:column="37">f<pos:position pos:line="29" pos:column="38"/></name><operator pos:line="29" pos:column="38">-&gt;<pos:position pos:line="29" pos:column="43"/></operator><name pos:line="29" pos:column="40">c<pos:position pos:line="29" pos:column="41"/></name><operator pos:line="29" pos:column="41">-&gt;<pos:position pos:line="29" pos:column="46"/></operator><name pos:line="29" pos:column="43">pool<pos:position pos:line="29" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="49">f<pos:position pos:line="29" pos:column="50"/></name><operator pos:line="29" pos:column="50">-&gt;<pos:position pos:line="29" pos:column="55"/></operator><name pos:line="29" pos:column="52">c<pos:position pos:line="29" pos:column="53"/></name><operator pos:line="29" pos:column="53">-&gt;<pos:position pos:line="29" pos:column="58"/></operator><name pos:line="29" pos:column="55">bucket_alloc<pos:position pos:line="29" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">ctx<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">-&gt;<pos:position pos:line="30" pos:column="17"/></operator><name pos:line="30" pos:column="14">tmpbb<pos:position pos:line="30" pos:column="19"/></name></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <call><name pos:line="30" pos:column="22">apr_brigade_create<pos:position pos:line="30" pos:column="40"/></name><argument_list pos:line="30" pos:column="40">(<argument><expr><name><name pos:line="30" pos:column="41">ctx<pos:position pos:line="30" pos:column="44"/></name><operator pos:line="30" pos:column="44">-&gt;<pos:position pos:line="30" pos:column="49"/></operator><name pos:line="30" pos:column="46">b<pos:position pos:line="30" pos:column="47"/></name><operator pos:line="30" pos:column="47">-&gt;<pos:position pos:line="30" pos:column="52"/></operator><name pos:line="30" pos:column="49">p<pos:position pos:line="30" pos:column="50"/></name></name></expr></argument>, <argument><expr><name><name pos:line="30" pos:column="52">ctx<pos:position pos:line="30" pos:column="55"/></name><operator pos:line="30" pos:column="55">-&gt;<pos:position pos:line="30" pos:column="60"/></operator><name pos:line="30" pos:column="57">b<pos:position pos:line="30" pos:column="58"/></name><operator pos:line="30" pos:column="58">-&gt;<pos:position pos:line="30" pos:column="63"/></operator><name pos:line="30" pos:column="60">bucket_alloc<pos:position pos:line="30" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="30" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="74"/></expr_stmt>
        <comment type="block" pos:line="31" pos:column="9">/* seed the brigade with the client socket. */</comment>
        <expr_stmt><expr><name pos:line="32" pos:column="9">e<pos:position pos:line="32" pos:column="10"/></name> <operator pos:line="32" pos:column="11">=<pos:position pos:line="32" pos:column="12"/></operator> <call><name pos:line="32" pos:column="13">apr_bucket_socket_create<pos:position pos:line="32" pos:column="37"/></name><argument_list pos:line="32" pos:column="37">(<argument><expr><name><name pos:line="32" pos:column="38">net<pos:position pos:line="32" pos:column="41"/></name><operator pos:line="32" pos:column="41">-&gt;<pos:position pos:line="32" pos:column="46"/></operator><name pos:line="32" pos:column="43">client_socket<pos:position pos:line="32" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="32" pos:column="58">f<pos:position pos:line="32" pos:column="59"/></name><operator pos:line="32" pos:column="59">-&gt;<pos:position pos:line="32" pos:column="64"/></operator><name pos:line="32" pos:column="61">c<pos:position pos:line="32" pos:column="62"/></name><operator pos:line="32" pos:column="62">-&gt;<pos:position pos:line="32" pos:column="67"/></operator><name pos:line="32" pos:column="64">bucket_alloc<pos:position pos:line="32" pos:column="76"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="78"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="33" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="33" pos:column="32"/></name><argument_list pos:line="33" pos:column="32">(<argument><expr><name><name pos:line="33" pos:column="33">ctx<pos:position pos:line="33" pos:column="36"/></name><operator pos:line="33" pos:column="36">-&gt;<pos:position pos:line="33" pos:column="41"/></operator><name pos:line="33" pos:column="38">b<pos:position pos:line="33" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="41">e<pos:position pos:line="33" pos:column="42"/></name></expr></argument>)<pos:position pos:line="33" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="34" pos:column="9">net<pos:position pos:line="34" pos:column="12"/></name><operator pos:line="34" pos:column="12">-&gt;<pos:position pos:line="34" pos:column="17"/></operator><name pos:line="34" pos:column="14">in_ctx<pos:position pos:line="34" pos:column="20"/></name></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">ctx<pos:position pos:line="34" pos:column="26"/></name></expr>;<pos:position pos:line="34" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="35" pos:column="6"/></block></then>
    <elseif pos:line="36" pos:column="5">else <if pos:line="36" pos:column="10">if <condition pos:line="36" pos:column="13">(<expr><call><name pos:line="36" pos:column="14">APR_BRIGADE_EMPTY<pos:position pos:line="36" pos:column="31"/></name><argument_list pos:line="36" pos:column="31">(<argument><expr><name><name pos:line="36" pos:column="32">ctx<pos:position pos:line="36" pos:column="35"/></name><operator pos:line="36" pos:column="35">-&gt;<pos:position pos:line="36" pos:column="40"/></operator><name pos:line="36" pos:column="37">b<pos:position pos:line="36" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="36" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="36" pos:column="40"/></condition><then pos:line="36" pos:column="40"> <block pos:line="36" pos:column="41">{
        <return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">APR_EOF<pos:position pos:line="37" pos:column="23"/></name></expr>;<pos:position pos:line="37" pos:column="24"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="40" pos:column="5">/* ### This is bad. */</comment>
    <expr_stmt><expr><call><name pos:line="41" pos:column="5">BRIGADE_NORMALIZE<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name><name pos:line="41" pos:column="23">ctx<pos:position pos:line="41" pos:column="26"/></name><operator pos:line="41" pos:column="26">-&gt;<pos:position pos:line="41" pos:column="31"/></operator><name pos:line="41" pos:column="28">b<pos:position pos:line="41" pos:column="29"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="31"/></expr_stmt>

    <comment type="block" pos:line="43" pos:column="5">/* check for empty brigade again *AFTER* BRIGADE_NORMALIZE()
     * If we have lost our socket bucket (see above), we are EOF.
     *
     * Ideally, this should be returning SUCCESS with EOS bucket, but
     * some higher-up APIs (spec. read_request_line via ap_rgetline)
     * want an error code. */</comment>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><call><name pos:line="49" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="49" pos:column="26"/></name><argument_list pos:line="49" pos:column="26">(<argument><expr><name><name pos:line="49" pos:column="27">ctx<pos:position pos:line="49" pos:column="30"/></name><operator pos:line="49" pos:column="30">-&gt;<pos:position pos:line="49" pos:column="35"/></operator><name pos:line="49" pos:column="32">b<pos:position pos:line="49" pos:column="33"/></name></name></expr></argument>)<pos:position pos:line="49" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="49" pos:column="35"/></condition><then pos:line="49" pos:column="35"> <block pos:line="49" pos:column="36">{
        <return pos:line="50" pos:column="9">return <expr><name pos:line="50" pos:column="16">APR_EOF<pos:position pos:line="50" pos:column="23"/></name></expr>;<pos:position pos:line="50" pos:column="24"/></return>
    }<pos:position pos:line="51" pos:column="6"/></block></then></if>

    <if pos:line="53" pos:column="5">if <condition pos:line="53" pos:column="8">(<expr><name pos:line="53" pos:column="9">mode<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">==<pos:position pos:line="53" pos:column="16"/></operator> <name pos:line="53" pos:column="17">AP_MODE_GETLINE<pos:position pos:line="53" pos:column="32"/></name></expr>)<pos:position pos:line="53" pos:column="33"/></condition><then pos:line="53" pos:column="33"> <block pos:line="53" pos:column="34">{
        <comment type="block" pos:line="54" pos:column="9">/* we are reading a single LF line, e.g. the HTTP headers */</comment>
        <expr_stmt><expr><name pos:line="55" pos:column="9">rv<pos:position pos:line="55" pos:column="11"/></name> <operator pos:line="55" pos:column="12">=<pos:position pos:line="55" pos:column="13"/></operator> <call><name pos:line="55" pos:column="14">apr_brigade_split_line<pos:position pos:line="55" pos:column="36"/></name><argument_list pos:line="55" pos:column="36">(<argument><expr><name pos:line="55" pos:column="37">b<pos:position pos:line="55" pos:column="38"/></name></expr></argument>, <argument><expr><name><name pos:line="55" pos:column="40">ctx<pos:position pos:line="55" pos:column="43"/></name><operator pos:line="55" pos:column="43">-&gt;<pos:position pos:line="55" pos:column="48"/></operator><name pos:line="55" pos:column="45">b<pos:position pos:line="55" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="48">block<pos:position pos:line="55" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="55">HUGE_STRING_LEN<pos:position pos:line="55" pos:column="70"/></name></expr></argument>)<pos:position pos:line="55" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="72"/></expr_stmt>
        <comment type="block" pos:line="56" pos:column="9">/* We should treat EAGAIN here the same as we do for EOF (brigade is
         * empty).  We do this by returning whatever we have read.  This may
         * or may not be bogus, but is consistent (for now) with EOF logic.
         */</comment>
        <if pos:line="60" pos:column="9">if <condition pos:line="60" pos:column="12">(<expr><call><name pos:line="60" pos:column="13">APR_STATUS_IS_EAGAIN<pos:position pos:line="60" pos:column="33"/></name><argument_list pos:line="60" pos:column="33">(<argument><expr><name pos:line="60" pos:column="34">rv<pos:position pos:line="60" pos:column="36"/></name></expr></argument>)<pos:position pos:line="60" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="38"/></condition><then pos:line="60" pos:column="38"> <block pos:line="60" pos:column="39">{
            <expr_stmt><expr><name pos:line="61" pos:column="13">rv<pos:position pos:line="61" pos:column="15"/></name> <operator pos:line="61" pos:column="16">=<pos:position pos:line="61" pos:column="17"/></operator> <name pos:line="61" pos:column="18">APR_SUCCESS<pos:position pos:line="61" pos:column="29"/></name></expr>;<pos:position pos:line="61" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="62" pos:column="10"/></block></then></if>
        <return pos:line="63" pos:column="9">return <expr><name pos:line="63" pos:column="16">rv<pos:position pos:line="63" pos:column="18"/></name></expr>;<pos:position pos:line="63" pos:column="19"/></return>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="66" pos:column="5">/* ### AP_MODE_PEEK is a horrific name for this mode because we also
     * eat any CRLFs that we see.  That's not the obvious intention of
     * this mode.  Determine whether anyone actually uses this or not. */</comment>
    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">mode<pos:position pos:line="69" pos:column="13"/></name> <operator pos:line="69" pos:column="14">==<pos:position pos:line="69" pos:column="16"/></operator> <name pos:line="69" pos:column="17">AP_MODE_EATCRLF<pos:position pos:line="69" pos:column="32"/></name></expr>)<pos:position pos:line="69" pos:column="33"/></condition><then pos:line="69" pos:column="33"> <block pos:line="69" pos:column="34">{
        <decl_stmt><decl><type><name pos:line="70" pos:column="9">apr_bucket<pos:position pos:line="70" pos:column="19"/></name> <modifier pos:line="70" pos:column="20">*<pos:position pos:line="70" pos:column="21"/></modifier></type><name pos:line="70" pos:column="21">e<pos:position pos:line="70" pos:column="22"/></name></decl>;<pos:position pos:line="70" pos:column="23"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="71" pos:column="9">const<pos:position pos:line="71" pos:column="14"/></specifier> <name pos:line="71" pos:column="15">char<pos:position pos:line="71" pos:column="19"/></name> <modifier pos:line="71" pos:column="20">*<pos:position pos:line="71" pos:column="21"/></modifier></type><name pos:line="71" pos:column="21">c<pos:position pos:line="71" pos:column="22"/></name></decl>;<pos:position pos:line="71" pos:column="23"/></decl_stmt>

        <comment type="block" pos:line="73" pos:column="9">/* The purpose of this loop is to ignore any CRLF (or LF) at the end
         * of a request.  Many browsers send extra lines at the end of POST
         * requests.  We use the PEEK method to determine if there is more
         * data on the socket, so that we know if we should delay sending the
         * end of one request until we have served the second request in a
         * pipelined situation.  We don't want to actually delay sending a
         * response if the server finds a CRLF (or LF), becuause that doesn't
         * mean that there is another request, just a blank line.
         */</comment>
        <while pos:line="82" pos:column="9">while <condition pos:line="82" pos:column="15">(<expr><literal type="number" pos:line="82" pos:column="16">1<pos:position pos:line="82" pos:column="17"/></literal></expr>)<pos:position pos:line="82" pos:column="18"/></condition> <block pos:line="82" pos:column="19">{
            <if pos:line="83" pos:column="13">if <condition pos:line="83" pos:column="16">(<expr><call><name pos:line="83" pos:column="17">APR_BRIGADE_EMPTY<pos:position pos:line="83" pos:column="34"/></name><argument_list pos:line="83" pos:column="34">(<argument><expr><name><name pos:line="83" pos:column="35">ctx<pos:position pos:line="83" pos:column="38"/></name><operator pos:line="83" pos:column="38">-&gt;<pos:position pos:line="83" pos:column="43"/></operator><name pos:line="83" pos:column="40">b<pos:position pos:line="83" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="83" pos:column="43"/></condition><then pos:line="83" pos:column="43">
                <block type="pseudo"><return pos:line="84" pos:column="17">return <expr><name pos:line="84" pos:column="24">APR_EOF<pos:position pos:line="84" pos:column="31"/></name></expr>;<pos:position pos:line="84" pos:column="32"/></return></block></then></if>

            <expr_stmt><expr><name pos:line="86" pos:column="13">e<pos:position pos:line="86" pos:column="14"/></name> <operator pos:line="86" pos:column="15">=<pos:position pos:line="86" pos:column="16"/></operator> <call><name pos:line="86" pos:column="17">APR_BRIGADE_FIRST<pos:position pos:line="86" pos:column="34"/></name><argument_list pos:line="86" pos:column="34">(<argument><expr><name><name pos:line="86" pos:column="35">ctx<pos:position pos:line="86" pos:column="38"/></name><operator pos:line="86" pos:column="38">-&gt;<pos:position pos:line="86" pos:column="43"/></operator><name pos:line="86" pos:column="40">b<pos:position pos:line="86" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="86" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="43"/></expr_stmt>

            <expr_stmt><expr><name pos:line="88" pos:column="13">rv<pos:position pos:line="88" pos:column="15"/></name> <operator pos:line="88" pos:column="16">=<pos:position pos:line="88" pos:column="17"/></operator> <call><name pos:line="88" pos:column="18">apr_bucket_read<pos:position pos:line="88" pos:column="33"/></name><argument_list pos:line="88" pos:column="33">(<argument><expr><name pos:line="88" pos:column="34">e<pos:position pos:line="88" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="37">&amp;<pos:position pos:line="88" pos:column="42"/></operator><name pos:line="88" pos:column="38">str<pos:position pos:line="88" pos:column="41"/></name></expr></argument>, <argument><expr><operator pos:line="88" pos:column="43">&amp;<pos:position pos:line="88" pos:column="48"/></operator><name pos:line="88" pos:column="44">len<pos:position pos:line="88" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="49">APR_NONBLOCK_READ<pos:position pos:line="88" pos:column="66"/></name></expr></argument>)<pos:position pos:line="88" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="68"/></expr_stmt>

            <if pos:line="90" pos:column="13">if <condition pos:line="90" pos:column="16">(<expr><name pos:line="90" pos:column="17">rv<pos:position pos:line="90" pos:column="19"/></name> <operator pos:line="90" pos:column="20">!=<pos:position pos:line="90" pos:column="22"/></operator> <name pos:line="90" pos:column="23">APR_SUCCESS<pos:position pos:line="90" pos:column="34"/></name></expr>)<pos:position pos:line="90" pos:column="35"/></condition><then pos:line="90" pos:column="35">
                <block type="pseudo"><return pos:line="91" pos:column="17">return <expr><name pos:line="91" pos:column="24">rv<pos:position pos:line="91" pos:column="26"/></name></expr>;<pos:position pos:line="91" pos:column="27"/></return></block></then></if>

            <expr_stmt><expr><name pos:line="93" pos:column="13">c<pos:position pos:line="93" pos:column="14"/></name> <operator pos:line="93" pos:column="15">=<pos:position pos:line="93" pos:column="16"/></operator> <name pos:line="93" pos:column="17">str<pos:position pos:line="93" pos:column="20"/></name></expr>;<pos:position pos:line="93" pos:column="21"/></expr_stmt>
            <while pos:line="94" pos:column="13">while <condition pos:line="94" pos:column="19">(<expr><name pos:line="94" pos:column="20">c<pos:position pos:line="94" pos:column="21"/></name> <operator pos:line="94" pos:column="22">&lt;<pos:position pos:line="94" pos:column="26"/></operator> <name pos:line="94" pos:column="24">str<pos:position pos:line="94" pos:column="27"/></name> <operator pos:line="94" pos:column="28">+<pos:position pos:line="94" pos:column="29"/></operator> <name pos:line="94" pos:column="30">len<pos:position pos:line="94" pos:column="33"/></name></expr>)<pos:position pos:line="94" pos:column="34"/></condition> <block pos:line="94" pos:column="35">{
                <if pos:line="95" pos:column="17">if <condition pos:line="95" pos:column="20">(<expr><operator pos:line="95" pos:column="21">*<pos:position pos:line="95" pos:column="22"/></operator><name pos:line="95" pos:column="22">c<pos:position pos:line="95" pos:column="23"/></name> <operator pos:line="95" pos:column="24">==<pos:position pos:line="95" pos:column="26"/></operator> <name pos:line="95" pos:column="27">APR_ASCII_LF<pos:position pos:line="95" pos:column="39"/></name></expr>)<pos:position pos:line="95" pos:column="40"/></condition><then pos:line="95" pos:column="40">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="96" pos:column="21">c<pos:position pos:line="96" pos:column="22"/></name><operator pos:line="96" pos:column="22">++<pos:position pos:line="96" pos:column="24"/></operator></expr>;<pos:position pos:line="96" pos:column="25"/></expr_stmt></block></then>
                <elseif pos:line="97" pos:column="17">else <if pos:line="97" pos:column="22">if <condition pos:line="97" pos:column="25">(<expr><operator pos:line="97" pos:column="26">*<pos:position pos:line="97" pos:column="27"/></operator><name pos:line="97" pos:column="27">c<pos:position pos:line="97" pos:column="28"/></name> <operator pos:line="97" pos:column="29">==<pos:position pos:line="97" pos:column="31"/></operator> <name pos:line="97" pos:column="32">APR_ASCII_CR<pos:position pos:line="97" pos:column="44"/></name> <operator pos:line="97" pos:column="45">&amp;&amp;<pos:position pos:line="97" pos:column="55"/></operator> <operator pos:line="97" pos:column="48">*<pos:position pos:line="97" pos:column="49"/></operator><operator pos:line="97" pos:column="49">(<pos:position pos:line="97" pos:column="50"/></operator><name pos:line="97" pos:column="50">c<pos:position pos:line="97" pos:column="51"/></name> <operator pos:line="97" pos:column="52">+<pos:position pos:line="97" pos:column="53"/></operator> <literal type="number" pos:line="97" pos:column="54">1<pos:position pos:line="97" pos:column="55"/></literal><operator pos:line="97" pos:column="55">)<pos:position pos:line="97" pos:column="56"/></operator> <operator pos:line="97" pos:column="57">==<pos:position pos:line="97" pos:column="59"/></operator> <name pos:line="97" pos:column="60">APR_ASCII_LF<pos:position pos:line="97" pos:column="72"/></name></expr>)<pos:position pos:line="97" pos:column="73"/></condition><then pos:line="97" pos:column="73">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="98" pos:column="21">c<pos:position pos:line="98" pos:column="22"/></name> <operator pos:line="98" pos:column="23">+=<pos:position pos:line="98" pos:column="25"/></operator> <literal type="number" pos:line="98" pos:column="26">2<pos:position pos:line="98" pos:column="27"/></literal></expr>;<pos:position pos:line="98" pos:column="28"/></expr_stmt></block></then></if></elseif>
                <else pos:line="99" pos:column="17">else
                    <block type="pseudo"><return pos:line="100" pos:column="21">return <expr><name pos:line="100" pos:column="28">APR_SUCCESS<pos:position pos:line="100" pos:column="39"/></name></expr>;<pos:position pos:line="100" pos:column="40"/></return></block></else></if>
            }<pos:position pos:line="101" pos:column="14"/></block></while>

            <comment type="block" pos:line="103" pos:column="13">/* If we reach here, we were a bucket just full of CRLFs, so
             * just toss the bucket. */</comment>
            <comment type="block" pos:line="105" pos:column="13">/* FIXME: Is this the right thing to do in the core? */</comment>
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">apr_bucket_delete<pos:position pos:line="106" pos:column="30"/></name><argument_list pos:line="106" pos:column="30">(<argument><expr><name pos:line="106" pos:column="31">e<pos:position pos:line="106" pos:column="32"/></name></expr></argument>)<pos:position pos:line="106" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="107" pos:column="10"/></block></while>
        <return pos:line="108" pos:column="9">return <expr><name pos:line="108" pos:column="16">APR_SUCCESS<pos:position pos:line="108" pos:column="27"/></name></expr>;<pos:position pos:line="108" pos:column="28"/></return>
    }<pos:position pos:line="109" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="111" pos:column="5">/* If mode is EXHAUSTIVE, we want to just read everything until the end
     * of the brigade, which in this case means the end of the socket.
     * To do this, we attach the brigade that has currently been setaside to
     * the brigade that was passed down, and send that brigade back.
     *
     * NOTE:  This is VERY dangerous to use, and should only be done with
     * extreme caution.  FWLIW, this would be needed by an MPM like Perchild;
     * such an MPM can easily request the socket and all data that has been
     * read, which means that it can pass it to the correct child process.
     */</comment>
    <if pos:line="121" pos:column="5">if <condition pos:line="121" pos:column="8">(<expr><name pos:line="121" pos:column="9">mode<pos:position pos:line="121" pos:column="13"/></name> <operator pos:line="121" pos:column="14">==<pos:position pos:line="121" pos:column="16"/></operator> <name pos:line="121" pos:column="17">AP_MODE_EXHAUSTIVE<pos:position pos:line="121" pos:column="35"/></name></expr>)<pos:position pos:line="121" pos:column="36"/></condition><then pos:line="121" pos:column="36"> <block pos:line="121" pos:column="37">{
        <decl_stmt><decl><type><name pos:line="122" pos:column="9">apr_bucket<pos:position pos:line="122" pos:column="19"/></name> <modifier pos:line="122" pos:column="20">*<pos:position pos:line="122" pos:column="21"/></modifier></type><name pos:line="122" pos:column="21">e<pos:position pos:line="122" pos:column="22"/></name></decl>;<pos:position pos:line="122" pos:column="23"/></decl_stmt>

        <comment type="block" pos:line="124" pos:column="9">/* Tack on any buckets that were set aside. */</comment>
        <expr_stmt><expr><call><name pos:line="125" pos:column="9">APR_BRIGADE_CONCAT<pos:position pos:line="125" pos:column="27"/></name><argument_list pos:line="125" pos:column="27">(<argument><expr><name pos:line="125" pos:column="28">b<pos:position pos:line="125" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="125" pos:column="31">ctx<pos:position pos:line="125" pos:column="34"/></name><operator pos:line="125" pos:column="34">-&gt;<pos:position pos:line="125" pos:column="39"/></operator><name pos:line="125" pos:column="36">b<pos:position pos:line="125" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="125" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="39"/></expr_stmt>

        <comment type="block" pos:line="127" pos:column="9">/* Since we've just added all potential buckets (which will most
         * likely simply be the socket bucket) we know this is the end,
         * so tack on an EOS too. */</comment>
        <comment type="block" pos:line="130" pos:column="9">/* We have read until the brigade was empty, so we know that we
         * must be EOS. */</comment>
        <expr_stmt><expr><name pos:line="132" pos:column="9">e<pos:position pos:line="132" pos:column="10"/></name> <operator pos:line="132" pos:column="11">=<pos:position pos:line="132" pos:column="12"/></operator> <call><name pos:line="132" pos:column="13">apr_bucket_eos_create<pos:position pos:line="132" pos:column="34"/></name><argument_list pos:line="132" pos:column="34">(<argument><expr><name><name pos:line="132" pos:column="35">f<pos:position pos:line="132" pos:column="36"/></name><operator pos:line="132" pos:column="36">-&gt;<pos:position pos:line="132" pos:column="41"/></operator><name pos:line="132" pos:column="38">c<pos:position pos:line="132" pos:column="39"/></name><operator pos:line="132" pos:column="39">-&gt;<pos:position pos:line="132" pos:column="44"/></operator><name pos:line="132" pos:column="41">bucket_alloc<pos:position pos:line="132" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="132" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="132" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="133" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="133" pos:column="32"/></name><argument_list pos:line="133" pos:column="32">(<argument><expr><name pos:line="133" pos:column="33">b<pos:position pos:line="133" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="133" pos:column="36">e<pos:position pos:line="133" pos:column="37"/></name></expr></argument>)<pos:position pos:line="133" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="39"/></expr_stmt>
        <return pos:line="134" pos:column="9">return <expr><name pos:line="134" pos:column="16">APR_SUCCESS<pos:position pos:line="134" pos:column="27"/></name></expr>;<pos:position pos:line="134" pos:column="28"/></return>
    }<pos:position pos:line="135" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="137" pos:column="5">/* read up to the amount they specified. */</comment>
    <if pos:line="138" pos:column="5">if <condition pos:line="138" pos:column="8">(<expr><name pos:line="138" pos:column="9">mode<pos:position pos:line="138" pos:column="13"/></name> <operator pos:line="138" pos:column="14">==<pos:position pos:line="138" pos:column="16"/></operator> <name pos:line="138" pos:column="17">AP_MODE_READBYTES<pos:position pos:line="138" pos:column="34"/></name> <operator pos:line="138" pos:column="35">||<pos:position pos:line="138" pos:column="37"/></operator> <name pos:line="138" pos:column="38">mode<pos:position pos:line="138" pos:column="42"/></name> <operator pos:line="138" pos:column="43">==<pos:position pos:line="138" pos:column="45"/></operator> <name pos:line="138" pos:column="46">AP_MODE_SPECULATIVE<pos:position pos:line="138" pos:column="65"/></name></expr>)<pos:position pos:line="138" pos:column="66"/></condition><then pos:line="138" pos:column="66"> <block pos:line="138" pos:column="67">{
        <decl_stmt><decl><type><name pos:line="139" pos:column="9">apr_bucket<pos:position pos:line="139" pos:column="19"/></name> <modifier pos:line="139" pos:column="20">*<pos:position pos:line="139" pos:column="21"/></modifier></type><name pos:line="139" pos:column="21">e<pos:position pos:line="139" pos:column="22"/></name></decl>;<pos:position pos:line="139" pos:column="23"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="141" pos:column="9">AP_DEBUG_ASSERT<pos:position pos:line="141" pos:column="24"/></name><argument_list pos:line="141" pos:column="24">(<argument><expr><name pos:line="141" pos:column="25">readbytes<pos:position pos:line="141" pos:column="34"/></name> <operator pos:line="141" pos:column="35">&gt;<pos:position pos:line="141" pos:column="39"/></operator> <literal type="number" pos:line="141" pos:column="37">0<pos:position pos:line="141" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="40"/></expr_stmt>

        <expr_stmt><expr><name pos:line="143" pos:column="9">e<pos:position pos:line="143" pos:column="10"/></name> <operator pos:line="143" pos:column="11">=<pos:position pos:line="143" pos:column="12"/></operator> <call><name pos:line="143" pos:column="13">APR_BRIGADE_FIRST<pos:position pos:line="143" pos:column="30"/></name><argument_list pos:line="143" pos:column="30">(<argument><expr><name><name pos:line="143" pos:column="31">ctx<pos:position pos:line="143" pos:column="34"/></name><operator pos:line="143" pos:column="34">-&gt;<pos:position pos:line="143" pos:column="39"/></operator><name pos:line="143" pos:column="36">b<pos:position pos:line="143" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="143" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="144" pos:column="9">rv<pos:position pos:line="144" pos:column="11"/></name> <operator pos:line="144" pos:column="12">=<pos:position pos:line="144" pos:column="13"/></operator> <call><name pos:line="144" pos:column="14">apr_bucket_read<pos:position pos:line="144" pos:column="29"/></name><argument_list pos:line="144" pos:column="29">(<argument><expr><name pos:line="144" pos:column="30">e<pos:position pos:line="144" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="144" pos:column="33">&amp;<pos:position pos:line="144" pos:column="38"/></operator><name pos:line="144" pos:column="34">str<pos:position pos:line="144" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="144" pos:column="39">&amp;<pos:position pos:line="144" pos:column="44"/></operator><name pos:line="144" pos:column="40">len<pos:position pos:line="144" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="144" pos:column="45">block<pos:position pos:line="144" pos:column="50"/></name></expr></argument>)<pos:position pos:line="144" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="144" pos:column="52"/></expr_stmt>

        <if pos:line="146" pos:column="9">if <condition pos:line="146" pos:column="12">(<expr><call><name pos:line="146" pos:column="13">APR_STATUS_IS_EAGAIN<pos:position pos:line="146" pos:column="33"/></name><argument_list pos:line="146" pos:column="33">(<argument><expr><name pos:line="146" pos:column="34">rv<pos:position pos:line="146" pos:column="36"/></name></expr></argument>)<pos:position pos:line="146" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="146" pos:column="38"/></condition><then pos:line="146" pos:column="38"> <block pos:line="146" pos:column="39">{
            <return pos:line="147" pos:column="13">return <expr><name pos:line="147" pos:column="20">APR_SUCCESS<pos:position pos:line="147" pos:column="31"/></name></expr>;<pos:position pos:line="147" pos:column="32"/></return>
        }<pos:position pos:line="148" pos:column="10"/></block></then>
        <elseif pos:line="149" pos:column="9">else <if pos:line="149" pos:column="14">if <condition pos:line="149" pos:column="17">(<expr><name pos:line="149" pos:column="18">rv<pos:position pos:line="149" pos:column="20"/></name> <operator pos:line="149" pos:column="21">!=<pos:position pos:line="149" pos:column="23"/></operator> <name pos:line="149" pos:column="24">APR_SUCCESS<pos:position pos:line="149" pos:column="35"/></name></expr>)<pos:position pos:line="149" pos:column="36"/></condition><then pos:line="149" pos:column="36"> <block pos:line="149" pos:column="37">{
            <return pos:line="150" pos:column="13">return <expr><name pos:line="150" pos:column="20">rv<pos:position pos:line="150" pos:column="22"/></name></expr>;<pos:position pos:line="150" pos:column="23"/></return>
        }<pos:position pos:line="151" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="152" pos:column="9">else <if pos:line="152" pos:column="14">if <condition pos:line="152" pos:column="17">(<expr><name pos:line="152" pos:column="18">block<pos:position pos:line="152" pos:column="23"/></name> <operator pos:line="152" pos:column="24">==<pos:position pos:line="152" pos:column="26"/></operator> <name pos:line="152" pos:column="27">APR_BLOCK_READ<pos:position pos:line="152" pos:column="41"/></name> <operator pos:line="152" pos:column="42">&amp;&amp;<pos:position pos:line="152" pos:column="52"/></operator> <name pos:line="152" pos:column="45">len<pos:position pos:line="152" pos:column="48"/></name> <operator pos:line="152" pos:column="49">==<pos:position pos:line="152" pos:column="51"/></operator> <literal type="number" pos:line="152" pos:column="52">0<pos:position pos:line="152" pos:column="53"/></literal></expr>)<pos:position pos:line="152" pos:column="54"/></condition><then pos:line="152" pos:column="54"> <block pos:line="152" pos:column="55">{
            <comment type="block" pos:line="153" pos:column="13">/* We wanted to read some bytes in blocking mode.  We read
             * 0 bytes.  Hence, we now assume we are EOS.
             *
             * When we are in normal mode, return an EOS bucket to the
             * caller.
             * When we are in speculative mode, leave ctx-&gt;b empty, so
             * that the next call returns an EOS bucket.
             */</comment>
            <expr_stmt><expr><call><name pos:line="161" pos:column="13">apr_bucket_delete<pos:position pos:line="161" pos:column="30"/></name><argument_list pos:line="161" pos:column="30">(<argument><expr><name pos:line="161" pos:column="31">e<pos:position pos:line="161" pos:column="32"/></name></expr></argument>)<pos:position pos:line="161" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="161" pos:column="34"/></expr_stmt>

            <if pos:line="163" pos:column="13">if <condition pos:line="163" pos:column="16">(<expr><name pos:line="163" pos:column="17">mode<pos:position pos:line="163" pos:column="21"/></name> <operator pos:line="163" pos:column="22">==<pos:position pos:line="163" pos:column="24"/></operator> <name pos:line="163" pos:column="25">AP_MODE_READBYTES<pos:position pos:line="163" pos:column="42"/></name></expr>)<pos:position pos:line="163" pos:column="43"/></condition><then pos:line="163" pos:column="43"> <block pos:line="163" pos:column="44">{
                <expr_stmt><expr><name pos:line="164" pos:column="17">e<pos:position pos:line="164" pos:column="18"/></name> <operator pos:line="164" pos:column="19">=<pos:position pos:line="164" pos:column="20"/></operator> <call><name pos:line="164" pos:column="21">apr_bucket_eos_create<pos:position pos:line="164" pos:column="42"/></name><argument_list pos:line="164" pos:column="42">(<argument><expr><name><name pos:line="164" pos:column="43">f<pos:position pos:line="164" pos:column="44"/></name><operator pos:line="164" pos:column="44">-&gt;<pos:position pos:line="164" pos:column="49"/></operator><name pos:line="164" pos:column="46">c<pos:position pos:line="164" pos:column="47"/></name><operator pos:line="164" pos:column="47">-&gt;<pos:position pos:line="164" pos:column="52"/></operator><name pos:line="164" pos:column="49">bucket_alloc<pos:position pos:line="164" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="164" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="63"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="165" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="165" pos:column="40"/></name><argument_list pos:line="165" pos:column="40">(<argument><expr><name pos:line="165" pos:column="41">b<pos:position pos:line="165" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="165" pos:column="44">e<pos:position pos:line="165" pos:column="45"/></name></expr></argument>)<pos:position pos:line="165" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="165" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="166" pos:column="14"/></block></then></if>
            <return pos:line="167" pos:column="13">return <expr><name pos:line="167" pos:column="20">APR_SUCCESS<pos:position pos:line="167" pos:column="31"/></name></expr>;<pos:position pos:line="167" pos:column="32"/></return>
        }<pos:position pos:line="168" pos:column="10"/></block></then></if></elseif></if>

        <comment type="block" pos:line="170" pos:column="9">/* Have we read as much data as we wanted (be greedy)? */</comment>
        <if pos:line="171" pos:column="9">if <condition pos:line="171" pos:column="12">(<expr><name pos:line="171" pos:column="13">len<pos:position pos:line="171" pos:column="16"/></name> <operator pos:line="171" pos:column="17">&lt;<pos:position pos:line="171" pos:column="21"/></operator> <name pos:line="171" pos:column="19">readbytes<pos:position pos:line="171" pos:column="28"/></name></expr>)<pos:position pos:line="171" pos:column="29"/></condition><then pos:line="171" pos:column="29"> <block pos:line="171" pos:column="30">{
            <decl_stmt><decl><type><name pos:line="172" pos:column="13">apr_size_t<pos:position pos:line="172" pos:column="23"/></name></type> <name pos:line="172" pos:column="24">bucket_len<pos:position pos:line="172" pos:column="34"/></name></decl>;<pos:position pos:line="172" pos:column="35"/></decl_stmt>

            <expr_stmt><expr><name pos:line="174" pos:column="13">rv<pos:position pos:line="174" pos:column="15"/></name> <operator pos:line="174" pos:column="16">=<pos:position pos:line="174" pos:column="17"/></operator> <name pos:line="174" pos:column="18">APR_SUCCESS<pos:position pos:line="174" pos:column="29"/></name></expr>;<pos:position pos:line="174" pos:column="30"/></expr_stmt>
            <comment type="block" pos:line="175" pos:column="13">/* We already registered the data in e in len */</comment>
            <expr_stmt><expr><name pos:line="176" pos:column="13">e<pos:position pos:line="176" pos:column="14"/></name> <operator pos:line="176" pos:column="15">=<pos:position pos:line="176" pos:column="16"/></operator> <call><name pos:line="176" pos:column="17">APR_BUCKET_NEXT<pos:position pos:line="176" pos:column="32"/></name><argument_list pos:line="176" pos:column="32">(<argument><expr><name pos:line="176" pos:column="33">e<pos:position pos:line="176" pos:column="34"/></name></expr></argument>)<pos:position pos:line="176" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="176" pos:column="36"/></expr_stmt>
            <while pos:line="177" pos:column="13">while <condition pos:line="177" pos:column="19">(<expr><operator pos:line="177" pos:column="20">(<pos:position pos:line="177" pos:column="21"/></operator><name pos:line="177" pos:column="21">len<pos:position pos:line="177" pos:column="24"/></name> <operator pos:line="177" pos:column="25">&lt;<pos:position pos:line="177" pos:column="29"/></operator> <name pos:line="177" pos:column="27">readbytes<pos:position pos:line="177" pos:column="36"/></name><operator pos:line="177" pos:column="36">)<pos:position pos:line="177" pos:column="37"/></operator> <operator pos:line="177" pos:column="38">&amp;&amp;<pos:position pos:line="177" pos:column="48"/></operator> <operator pos:line="177" pos:column="41">(<pos:position pos:line="177" pos:column="42"/></operator><name pos:line="177" pos:column="42">rv<pos:position pos:line="177" pos:column="44"/></name> <operator pos:line="177" pos:column="45">==<pos:position pos:line="177" pos:column="47"/></operator> <name pos:line="177" pos:column="48">APR_SUCCESS<pos:position pos:line="177" pos:column="59"/></name><operator pos:line="177" pos:column="59">)<pos:position pos:line="177" pos:column="60"/></operator>
                   <operator pos:line="178" pos:column="20">&amp;&amp;<pos:position pos:line="178" pos:column="30"/></operator> <operator pos:line="178" pos:column="23">(<pos:position pos:line="178" pos:column="24"/></operator><name pos:line="178" pos:column="24">e<pos:position pos:line="178" pos:column="25"/></name> <operator pos:line="178" pos:column="26">!=<pos:position pos:line="178" pos:column="28"/></operator> <call><name pos:line="178" pos:column="29">APR_BRIGADE_SENTINEL<pos:position pos:line="178" pos:column="49"/></name><argument_list pos:line="178" pos:column="49">(<argument><expr><name><name pos:line="178" pos:column="50">ctx<pos:position pos:line="178" pos:column="53"/></name><operator pos:line="178" pos:column="53">-&gt;<pos:position pos:line="178" pos:column="58"/></operator><name pos:line="178" pos:column="55">b<pos:position pos:line="178" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="178" pos:column="57"/></argument_list></call><operator pos:line="178" pos:column="57">)<pos:position pos:line="178" pos:column="58"/></operator></expr>)<pos:position pos:line="178" pos:column="59"/></condition> <block pos:line="178" pos:column="60">{
                <comment type="block" pos:line="179" pos:column="17">/* Check for the availability of buckets with known length */</comment>
                <if pos:line="180" pos:column="17">if <condition pos:line="180" pos:column="20">(<expr><name><name pos:line="180" pos:column="21">e<pos:position pos:line="180" pos:column="22"/></name><operator pos:line="180" pos:column="22">-&gt;<pos:position pos:line="180" pos:column="27"/></operator><name pos:line="180" pos:column="24">length<pos:position pos:line="180" pos:column="30"/></name></name> <operator pos:line="180" pos:column="31">!=<pos:position pos:line="180" pos:column="33"/></operator> <operator pos:line="180" pos:column="34">-<pos:position pos:line="180" pos:column="35"/></operator><literal type="number" pos:line="180" pos:column="35">1<pos:position pos:line="180" pos:column="36"/></literal></expr>)<pos:position pos:line="180" pos:column="37"/></condition><then pos:line="180" pos:column="37"> <block pos:line="180" pos:column="38">{
                    <expr_stmt><expr><name pos:line="181" pos:column="21">len<pos:position pos:line="181" pos:column="24"/></name> <operator pos:line="181" pos:column="25">+=<pos:position pos:line="181" pos:column="27"/></operator> <name><name pos:line="181" pos:column="28">e<pos:position pos:line="181" pos:column="29"/></name><operator pos:line="181" pos:column="29">-&gt;<pos:position pos:line="181" pos:column="34"/></operator><name pos:line="181" pos:column="31">length<pos:position pos:line="181" pos:column="37"/></name></name></expr>;<pos:position pos:line="181" pos:column="38"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="182" pos:column="21">e<pos:position pos:line="182" pos:column="22"/></name> <operator pos:line="182" pos:column="23">=<pos:position pos:line="182" pos:column="24"/></operator> <call><name pos:line="182" pos:column="25">APR_BUCKET_NEXT<pos:position pos:line="182" pos:column="40"/></name><argument_list pos:line="182" pos:column="40">(<argument><expr><name pos:line="182" pos:column="41">e<pos:position pos:line="182" pos:column="42"/></name></expr></argument>)<pos:position pos:line="182" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="44"/></expr_stmt>
                }<pos:position pos:line="183" pos:column="18"/></block></then>
                <else pos:line="184" pos:column="17">else <block pos:line="184" pos:column="22">{
                    <comment type="block" pos:line="185" pos:column="21">/*
                     * Read from bucket, but non blocking. If there isn't any
                     * more data, well than this is fine as well, we will
                     * not wait for more since we already got some and we are
                     * only checking if there isn't more.
                     */</comment>
                    <expr_stmt><expr><name pos:line="191" pos:column="21">rv<pos:position pos:line="191" pos:column="23"/></name> <operator pos:line="191" pos:column="24">=<pos:position pos:line="191" pos:column="25"/></operator> <call><name pos:line="191" pos:column="26">apr_bucket_read<pos:position pos:line="191" pos:column="41"/></name><argument_list pos:line="191" pos:column="41">(<argument><expr><name pos:line="191" pos:column="42">e<pos:position pos:line="191" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="191" pos:column="45">&amp;<pos:position pos:line="191" pos:column="50"/></operator><name pos:line="191" pos:column="46">str<pos:position pos:line="191" pos:column="49"/></name></expr></argument>, <argument><expr><operator pos:line="191" pos:column="51">&amp;<pos:position pos:line="191" pos:column="56"/></operator><name pos:line="191" pos:column="52">bucket_len<pos:position pos:line="191" pos:column="62"/></name></expr></argument>,
                                         <argument><expr><name pos:line="192" pos:column="42">APR_NONBLOCK_READ<pos:position pos:line="192" pos:column="59"/></name></expr></argument>)<pos:position pos:line="192" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="192" pos:column="61"/></expr_stmt>
                    <if pos:line="193" pos:column="21">if <condition pos:line="193" pos:column="24">(<expr><name pos:line="193" pos:column="25">rv<pos:position pos:line="193" pos:column="27"/></name> <operator pos:line="193" pos:column="28">==<pos:position pos:line="193" pos:column="30"/></operator> <name pos:line="193" pos:column="31">APR_SUCCESS<pos:position pos:line="193" pos:column="42"/></name></expr>)<pos:position pos:line="193" pos:column="43"/></condition><then pos:line="193" pos:column="43"> <block pos:line="193" pos:column="44">{
                        <expr_stmt><expr><name pos:line="194" pos:column="25">len<pos:position pos:line="194" pos:column="28"/></name> <operator pos:line="194" pos:column="29">+=<pos:position pos:line="194" pos:column="31"/></operator> <name pos:line="194" pos:column="32">bucket_len<pos:position pos:line="194" pos:column="42"/></name></expr>;<pos:position pos:line="194" pos:column="43"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="195" pos:column="25">e<pos:position pos:line="195" pos:column="26"/></name> <operator pos:line="195" pos:column="27">=<pos:position pos:line="195" pos:column="28"/></operator> <call><name pos:line="195" pos:column="29">APR_BUCKET_NEXT<pos:position pos:line="195" pos:column="44"/></name><argument_list pos:line="195" pos:column="44">(<argument><expr><name pos:line="195" pos:column="45">e<pos:position pos:line="195" pos:column="46"/></name></expr></argument>)<pos:position pos:line="195" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="195" pos:column="48"/></expr_stmt>
                    }<pos:position pos:line="196" pos:column="22"/></block></then></if>
                }<pos:position pos:line="197" pos:column="18"/></block></else></if>
            }<pos:position pos:line="198" pos:column="14"/></block></while>
        }<pos:position pos:line="199" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="201" pos:column="9">/* We can only return at most what we read. */</comment>
        <if pos:line="202" pos:column="9">if <condition pos:line="202" pos:column="12">(<expr><name pos:line="202" pos:column="13">len<pos:position pos:line="202" pos:column="16"/></name> <operator pos:line="202" pos:column="17">&lt;<pos:position pos:line="202" pos:column="21"/></operator> <name pos:line="202" pos:column="19">readbytes<pos:position pos:line="202" pos:column="28"/></name></expr>)<pos:position pos:line="202" pos:column="29"/></condition><then pos:line="202" pos:column="29"> <block pos:line="202" pos:column="30">{
            <expr_stmt><expr><name pos:line="203" pos:column="13">readbytes<pos:position pos:line="203" pos:column="22"/></name> <operator pos:line="203" pos:column="23">=<pos:position pos:line="203" pos:column="24"/></operator> <name pos:line="203" pos:column="25">len<pos:position pos:line="203" pos:column="28"/></name></expr>;<pos:position pos:line="203" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="204" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="206" pos:column="9">rv<pos:position pos:line="206" pos:column="11"/></name> <operator pos:line="206" pos:column="12">=<pos:position pos:line="206" pos:column="13"/></operator> <call><name pos:line="206" pos:column="14">apr_brigade_partition<pos:position pos:line="206" pos:column="35"/></name><argument_list pos:line="206" pos:column="35">(<argument><expr><name><name pos:line="206" pos:column="36">ctx<pos:position pos:line="206" pos:column="39"/></name><operator pos:line="206" pos:column="39">-&gt;<pos:position pos:line="206" pos:column="44"/></operator><name pos:line="206" pos:column="41">b<pos:position pos:line="206" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="206" pos:column="44">readbytes<pos:position pos:line="206" pos:column="53"/></name></expr></argument>, <argument><expr><operator pos:line="206" pos:column="55">&amp;<pos:position pos:line="206" pos:column="60"/></operator><name pos:line="206" pos:column="56">e<pos:position pos:line="206" pos:column="57"/></name></expr></argument>)<pos:position pos:line="206" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="59"/></expr_stmt>
        <if pos:line="207" pos:column="9">if <condition pos:line="207" pos:column="12">(<expr><name pos:line="207" pos:column="13">rv<pos:position pos:line="207" pos:column="15"/></name> <operator pos:line="207" pos:column="16">!=<pos:position pos:line="207" pos:column="18"/></operator> <name pos:line="207" pos:column="19">APR_SUCCESS<pos:position pos:line="207" pos:column="30"/></name></expr>)<pos:position pos:line="207" pos:column="31"/></condition><then pos:line="207" pos:column="31"> <block pos:line="207" pos:column="32">{
            <return pos:line="208" pos:column="13">return <expr><name pos:line="208" pos:column="20">rv<pos:position pos:line="208" pos:column="22"/></name></expr>;<pos:position pos:line="208" pos:column="23"/></return>
        }<pos:position pos:line="209" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="211" pos:column="9">/* Must do move before CONCAT */</comment>
        <expr_stmt><expr><name><name pos:line="212" pos:column="9">ctx<pos:position pos:line="212" pos:column="12"/></name><operator pos:line="212" pos:column="12">-&gt;<pos:position pos:line="212" pos:column="17"/></operator><name pos:line="212" pos:column="14">tmpbb<pos:position pos:line="212" pos:column="19"/></name></name> <operator pos:line="212" pos:column="20">=<pos:position pos:line="212" pos:column="21"/></operator> <call><name pos:line="212" pos:column="22">apr_brigade_split_ex<pos:position pos:line="212" pos:column="42"/></name><argument_list pos:line="212" pos:column="42">(<argument><expr><name><name pos:line="212" pos:column="43">ctx<pos:position pos:line="212" pos:column="46"/></name><operator pos:line="212" pos:column="46">-&gt;<pos:position pos:line="212" pos:column="51"/></operator><name pos:line="212" pos:column="48">b<pos:position pos:line="212" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="212" pos:column="51">e<pos:position pos:line="212" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="212" pos:column="54">ctx<pos:position pos:line="212" pos:column="57"/></name><operator pos:line="212" pos:column="57">-&gt;<pos:position pos:line="212" pos:column="62"/></operator><name pos:line="212" pos:column="59">tmpbb<pos:position pos:line="212" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="212" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="66"/></expr_stmt>

        <if pos:line="214" pos:column="9">if <condition pos:line="214" pos:column="12">(<expr><name pos:line="214" pos:column="13">mode<pos:position pos:line="214" pos:column="17"/></name> <operator pos:line="214" pos:column="18">==<pos:position pos:line="214" pos:column="20"/></operator> <name pos:line="214" pos:column="21">AP_MODE_READBYTES<pos:position pos:line="214" pos:column="38"/></name></expr>)<pos:position pos:line="214" pos:column="39"/></condition><then pos:line="214" pos:column="39"> <block pos:line="214" pos:column="40">{
            <expr_stmt><expr><call><name pos:line="215" pos:column="13">APR_BRIGADE_CONCAT<pos:position pos:line="215" pos:column="31"/></name><argument_list pos:line="215" pos:column="31">(<argument><expr><name pos:line="215" pos:column="32">b<pos:position pos:line="215" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="215" pos:column="35">ctx<pos:position pos:line="215" pos:column="38"/></name><operator pos:line="215" pos:column="38">-&gt;<pos:position pos:line="215" pos:column="43"/></operator><name pos:line="215" pos:column="40">b<pos:position pos:line="215" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="215" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="43"/></expr_stmt>
        }<pos:position pos:line="216" pos:column="10"/></block></then>
        <elseif pos:line="217" pos:column="9">else <if pos:line="217" pos:column="14">if <condition pos:line="217" pos:column="17">(<expr><name pos:line="217" pos:column="18">mode<pos:position pos:line="217" pos:column="22"/></name> <operator pos:line="217" pos:column="23">==<pos:position pos:line="217" pos:column="25"/></operator> <name pos:line="217" pos:column="26">AP_MODE_SPECULATIVE<pos:position pos:line="217" pos:column="45"/></name></expr>)<pos:position pos:line="217" pos:column="46"/></condition><then pos:line="217" pos:column="46"> <block pos:line="217" pos:column="47">{
            <decl_stmt><decl><type><name pos:line="218" pos:column="13">apr_bucket<pos:position pos:line="218" pos:column="23"/></name> <modifier pos:line="218" pos:column="24">*<pos:position pos:line="218" pos:column="25"/></modifier></type><name pos:line="218" pos:column="25">copy_bucket<pos:position pos:line="218" pos:column="36"/></name></decl>;<pos:position pos:line="218" pos:column="37"/></decl_stmt>

            <for pos:line="220" pos:column="13">for <control pos:line="220" pos:column="17">(<init><expr><name pos:line="220" pos:column="18">e<pos:position pos:line="220" pos:column="19"/></name> <operator pos:line="220" pos:column="20">=<pos:position pos:line="220" pos:column="21"/></operator> <call><name pos:line="220" pos:column="22">APR_BRIGADE_FIRST<pos:position pos:line="220" pos:column="39"/></name><argument_list pos:line="220" pos:column="39">(<argument><expr><name><name pos:line="220" pos:column="40">ctx<pos:position pos:line="220" pos:column="43"/></name><operator pos:line="220" pos:column="43">-&gt;<pos:position pos:line="220" pos:column="48"/></operator><name pos:line="220" pos:column="45">b<pos:position pos:line="220" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="220" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="48"/></init>
                 <condition><expr><name pos:line="221" pos:column="18">e<pos:position pos:line="221" pos:column="19"/></name> <operator pos:line="221" pos:column="20">!=<pos:position pos:line="221" pos:column="22"/></operator> <call><name pos:line="221" pos:column="23">APR_BRIGADE_SENTINEL<pos:position pos:line="221" pos:column="43"/></name><argument_list pos:line="221" pos:column="43">(<argument><expr><name><name pos:line="221" pos:column="44">ctx<pos:position pos:line="221" pos:column="47"/></name><operator pos:line="221" pos:column="47">-&gt;<pos:position pos:line="221" pos:column="52"/></operator><name pos:line="221" pos:column="49">b<pos:position pos:line="221" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="221" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="52"/></condition>
                 <incr><expr><name pos:line="222" pos:column="18">e<pos:position pos:line="222" pos:column="19"/></name> <operator pos:line="222" pos:column="20">=<pos:position pos:line="222" pos:column="21"/></operator> <call><name pos:line="222" pos:column="22">APR_BUCKET_NEXT<pos:position pos:line="222" pos:column="37"/></name><argument_list pos:line="222" pos:column="37">(<argument><expr><name pos:line="222" pos:column="38">e<pos:position pos:line="222" pos:column="39"/></name></expr></argument>)<pos:position pos:line="222" pos:column="40"/></argument_list></call></expr></incr>)<pos:position pos:line="222" pos:column="41"/></control>
            <block pos:line="223" pos:column="13">{
                <expr_stmt><expr><name pos:line="224" pos:column="17">rv<pos:position pos:line="224" pos:column="19"/></name> <operator pos:line="224" pos:column="20">=<pos:position pos:line="224" pos:column="21"/></operator> <call><name pos:line="224" pos:column="22">apr_bucket_copy<pos:position pos:line="224" pos:column="37"/></name><argument_list pos:line="224" pos:column="37">(<argument><expr><name pos:line="224" pos:column="38">e<pos:position pos:line="224" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="224" pos:column="41">&amp;<pos:position pos:line="224" pos:column="46"/></operator><name pos:line="224" pos:column="42">copy_bucket<pos:position pos:line="224" pos:column="53"/></name></expr></argument>)<pos:position pos:line="224" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="55"/></expr_stmt>
                <if pos:line="225" pos:column="17">if <condition pos:line="225" pos:column="20">(<expr><name pos:line="225" pos:column="21">rv<pos:position pos:line="225" pos:column="23"/></name> <operator pos:line="225" pos:column="24">!=<pos:position pos:line="225" pos:column="26"/></operator> <name pos:line="225" pos:column="27">APR_SUCCESS<pos:position pos:line="225" pos:column="38"/></name></expr>)<pos:position pos:line="225" pos:column="39"/></condition><then pos:line="225" pos:column="39"> <block pos:line="225" pos:column="40">{
                    <return pos:line="226" pos:column="21">return <expr><name pos:line="226" pos:column="28">rv<pos:position pos:line="226" pos:column="30"/></name></expr>;<pos:position pos:line="226" pos:column="31"/></return>
                }<pos:position pos:line="227" pos:column="18"/></block></then></if>
                <expr_stmt><expr><call><name pos:line="228" pos:column="17">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="228" pos:column="40"/></name><argument_list pos:line="228" pos:column="40">(<argument><expr><name pos:line="228" pos:column="41">b<pos:position pos:line="228" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="228" pos:column="44">copy_bucket<pos:position pos:line="228" pos:column="55"/></name></expr></argument>)<pos:position pos:line="228" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="229" pos:column="14"/></block></for>
        }<pos:position pos:line="230" pos:column="10"/></block></then></if></elseif></if>

        <comment type="block" pos:line="232" pos:column="9">/* Take what was originally there and place it back on ctx-&gt;b */</comment>
        <expr_stmt><expr><call><name pos:line="233" pos:column="9">APR_BRIGADE_CONCAT<pos:position pos:line="233" pos:column="27"/></name><argument_list pos:line="233" pos:column="27">(<argument><expr><name><name pos:line="233" pos:column="28">ctx<pos:position pos:line="233" pos:column="31"/></name><operator pos:line="233" pos:column="31">-&gt;<pos:position pos:line="233" pos:column="36"/></operator><name pos:line="233" pos:column="33">b<pos:position pos:line="233" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="233" pos:column="36">ctx<pos:position pos:line="233" pos:column="39"/></name><operator pos:line="233" pos:column="39">-&gt;<pos:position pos:line="233" pos:column="44"/></operator><name pos:line="233" pos:column="41">tmpbb<pos:position pos:line="233" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="233" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="233" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="234" pos:column="6"/></block></then></if>
    <return pos:line="235" pos:column="5">return <expr><name pos:line="235" pos:column="12">APR_SUCCESS<pos:position pos:line="235" pos:column="23"/></name></expr>;<pos:position pos:line="235" pos:column="24"/></return>
}<pos:position pos:line="236" pos:column="2"/></block></function></unit>
