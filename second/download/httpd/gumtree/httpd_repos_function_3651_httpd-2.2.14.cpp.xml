<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3651_httpd-2.2.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">conv_fp<pos:position pos:line="1" pos:column="21"/></name><parameter_list pos:line="1" pos:column="21">(<parameter><decl><type><specifier pos:line="1" pos:column="22">register<pos:position pos:line="1" pos:column="30"/></specifier> <name pos:line="1" pos:column="31">char<pos:position pos:line="1" pos:column="35"/></name></type> <name pos:line="1" pos:column="36">format<pos:position pos:line="1" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="44">register<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">double<pos:position pos:line="1" pos:column="59"/></name></type> <name pos:line="1" pos:column="60">num<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="2" pos:column="5">boolean_e<pos:position pos:line="2" pos:column="14"/></name></type> <name pos:line="2" pos:column="15">add_dp<pos:position pos:line="2" pos:column="21"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="23">int<pos:position pos:line="2" pos:column="26"/></name></type> <name pos:line="2" pos:column="27">precision<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="38">int<pos:position pos:line="2" pos:column="41"/></name> <modifier pos:line="2" pos:column="42">*<pos:position pos:line="2" pos:column="43"/></modifier></type><name pos:line="2" pos:column="43">is_negative<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>,
    <parameter><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">buf<pos:position pos:line="3" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="16">apr_size_t<pos:position pos:line="3" pos:column="26"/></name> <modifier pos:line="3" pos:column="27">*<pos:position pos:line="3" pos:column="28"/></modifier></type><name pos:line="3" pos:column="28">len<pos:position pos:line="3" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="32"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">register<pos:position pos:line="5" pos:column="13"/></specifier> <name pos:line="5" pos:column="14">char<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">s<pos:position pos:line="5" pos:column="21"/></name> <init pos:line="5" pos:column="22">= <expr><name pos:line="5" pos:column="24">buf<pos:position pos:line="5" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">register<pos:position pos:line="6" pos:column="13"/></specifier> <name pos:line="6" pos:column="14">char<pos:position pos:line="6" pos:column="18"/></name> <modifier pos:line="6" pos:column="19">*<pos:position pos:line="6" pos:column="20"/></modifier></type><name pos:line="6" pos:column="20">p<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">decimal_point<pos:position pos:line="7" pos:column="22"/></name></decl>;<pos:position pos:line="7" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name></type> <name><name pos:line="8" pos:column="10">buf1<pos:position pos:line="8" pos:column="14"/></name><index pos:line="8" pos:column="14">[<expr><name pos:line="8" pos:column="15">NDIG<pos:position pos:line="8" pos:column="19"/></name></expr>]<pos:position pos:line="8" pos:column="20"/></index></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">format<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <literal type="char" pos:line="10" pos:column="19">'f'<pos:position pos:line="10" pos:column="22"/></literal></expr>)<pos:position pos:line="10" pos:column="23"/></condition><then pos:line="10" pos:column="23">
        <block type="pseudo"><expr_stmt><expr><name pos:line="11" pos:column="9">p<pos:position pos:line="11" pos:column="10"/></name> <operator pos:line="11" pos:column="11">=<pos:position pos:line="11" pos:column="12"/></operator> <call><name pos:line="11" pos:column="13">apr_fcvt<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">num<pos:position pos:line="11" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="27">precision<pos:position pos:line="11" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="38">&amp;<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="39">decimal_point<pos:position pos:line="11" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="54">is_negative<pos:position pos:line="11" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="67">buf1<pos:position pos:line="11" pos:column="71"/></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="73"/></expr_stmt></block></then>
    <else pos:line="12" pos:column="5">else <comment type="block" pos:line="12" pos:column="10">/* either e or E format */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="13" pos:column="9">p<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">apr_ecvt<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">num<pos:position pos:line="13" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="27">precision<pos:position pos:line="13" pos:column="36"/></name> <operator pos:line="13" pos:column="37">+<pos:position pos:line="13" pos:column="38"/></operator> <literal type="number" pos:line="13" pos:column="39">1<pos:position pos:line="13" pos:column="40"/></literal></expr></argument>, <argument><expr><operator pos:line="13" pos:column="42">&amp;<pos:position pos:line="13" pos:column="47"/></operator><name pos:line="13" pos:column="43">decimal_point<pos:position pos:line="13" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="58">is_negative<pos:position pos:line="13" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="71">buf1<pos:position pos:line="13" pos:column="75"/></name></expr></argument>)<pos:position pos:line="13" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="77"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="15" pos:column="5">/*
     * Check for Infinity and NaN
     */</comment>
    <if pos:line="18" pos:column="5">if <condition pos:line="18" pos:column="8">(<expr><call><name pos:line="18" pos:column="9">apr_isalpha<pos:position pos:line="18" pos:column="20"/></name><argument_list pos:line="18" pos:column="20">(<argument><expr><operator pos:line="18" pos:column="21">*<pos:position pos:line="18" pos:column="22"/></operator><name pos:line="18" pos:column="22">p<pos:position pos:line="18" pos:column="23"/></name></expr></argument>)<pos:position pos:line="18" pos:column="24"/></argument_list></call></expr>)<pos:position pos:line="18" pos:column="25"/></condition><then pos:line="18" pos:column="25"> <block pos:line="18" pos:column="26">{
        <expr_stmt><expr><operator pos:line="19" pos:column="9">*<pos:position pos:line="19" pos:column="10"/></operator><name pos:line="19" pos:column="10">len<pos:position pos:line="19" pos:column="13"/></name> <operator pos:line="19" pos:column="14">=<pos:position pos:line="19" pos:column="15"/></operator> <call><name pos:line="19" pos:column="16">strlen<pos:position pos:line="19" pos:column="22"/></name><argument_list pos:line="19" pos:column="22">(<argument><expr><name pos:line="19" pos:column="23">p<pos:position pos:line="19" pos:column="24"/></name></expr></argument>)<pos:position pos:line="19" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">memcpy<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><name pos:line="20" pos:column="16">buf<pos:position pos:line="20" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="21">p<pos:position pos:line="20" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="20" pos:column="24">*<pos:position pos:line="20" pos:column="25"/></operator><name pos:line="20" pos:column="25">len<pos:position pos:line="20" pos:column="28"/></name> <operator pos:line="20" pos:column="29">+<pos:position pos:line="20" pos:column="30"/></operator> <literal type="number" pos:line="20" pos:column="31">1<pos:position pos:line="20" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="21" pos:column="9">*<pos:position pos:line="21" pos:column="10"/></operator><name pos:line="21" pos:column="10">is_negative<pos:position pos:line="21" pos:column="21"/></name> <operator pos:line="21" pos:column="22">=<pos:position pos:line="21" pos:column="23"/></operator> <name pos:line="21" pos:column="24">FALSE<pos:position pos:line="21" pos:column="29"/></name></expr>;<pos:position pos:line="21" pos:column="30"/></expr_stmt>
        <return pos:line="22" pos:column="9">return <expr><operator pos:line="22" pos:column="16">(<pos:position pos:line="22" pos:column="17"/></operator><name pos:line="22" pos:column="17">buf<pos:position pos:line="22" pos:column="20"/></name><operator pos:line="22" pos:column="20">)<pos:position pos:line="22" pos:column="21"/></operator></expr>;<pos:position pos:line="22" pos:column="22"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>

    <if pos:line="25" pos:column="5">if <condition pos:line="25" pos:column="8">(<expr><name pos:line="25" pos:column="9">format<pos:position pos:line="25" pos:column="15"/></name> <operator pos:line="25" pos:column="16">==<pos:position pos:line="25" pos:column="18"/></operator> <literal type="char" pos:line="25" pos:column="19">'f'<pos:position pos:line="25" pos:column="22"/></literal></expr>)<pos:position pos:line="25" pos:column="23"/></condition><then pos:line="25" pos:column="23"> <block pos:line="25" pos:column="24">{
        <if pos:line="26" pos:column="9">if <condition pos:line="26" pos:column="12">(<expr><name pos:line="26" pos:column="13">decimal_point<pos:position pos:line="26" pos:column="26"/></name> <operator pos:line="26" pos:column="27">&lt;=<pos:position pos:line="26" pos:column="32"/></operator> <literal type="number" pos:line="26" pos:column="30">0<pos:position pos:line="26" pos:column="31"/></literal></expr>)<pos:position pos:line="26" pos:column="32"/></condition><then pos:line="26" pos:column="32"> <block pos:line="26" pos:column="33">{
            <expr_stmt><expr><operator pos:line="27" pos:column="13">*<pos:position pos:line="27" pos:column="14"/></operator><name pos:line="27" pos:column="14">s<pos:position pos:line="27" pos:column="15"/></name><operator pos:line="27" pos:column="15">++<pos:position pos:line="27" pos:column="17"/></operator> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <literal type="char" pos:line="27" pos:column="20">'0'<pos:position pos:line="27" pos:column="23"/></literal></expr>;<pos:position pos:line="27" pos:column="24"/></expr_stmt>
            <if pos:line="28" pos:column="13">if <condition pos:line="28" pos:column="16">(<expr><name pos:line="28" pos:column="17">precision<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">&gt;<pos:position pos:line="28" pos:column="31"/></operator> <literal type="number" pos:line="28" pos:column="29">0<pos:position pos:line="28" pos:column="30"/></literal></expr>)<pos:position pos:line="28" pos:column="31"/></condition><then pos:line="28" pos:column="31"> <block pos:line="28" pos:column="32">{
                <expr_stmt><expr><operator pos:line="29" pos:column="17">*<pos:position pos:line="29" pos:column="18"/></operator><name pos:line="29" pos:column="18">s<pos:position pos:line="29" pos:column="19"/></name><operator pos:line="29" pos:column="19">++<pos:position pos:line="29" pos:column="21"/></operator> <operator pos:line="29" pos:column="22">=<pos:position pos:line="29" pos:column="23"/></operator> <literal type="char" pos:line="29" pos:column="24">'.'<pos:position pos:line="29" pos:column="27"/></literal></expr>;<pos:position pos:line="29" pos:column="28"/></expr_stmt>
                <while pos:line="30" pos:column="17">while <condition pos:line="30" pos:column="23">(<expr><name pos:line="30" pos:column="24">decimal_point<pos:position pos:line="30" pos:column="37"/></name><operator pos:line="30" pos:column="37">++<pos:position pos:line="30" pos:column="39"/></operator> <operator pos:line="30" pos:column="40">&lt;<pos:position pos:line="30" pos:column="44"/></operator> <literal type="number" pos:line="30" pos:column="42">0<pos:position pos:line="30" pos:column="43"/></literal></expr>)<pos:position pos:line="30" pos:column="44"/></condition>
                    <block type="pseudo"><expr_stmt><expr><operator pos:line="31" pos:column="21">*<pos:position pos:line="31" pos:column="22"/></operator><name pos:line="31" pos:column="22">s<pos:position pos:line="31" pos:column="23"/></name><operator pos:line="31" pos:column="23">++<pos:position pos:line="31" pos:column="25"/></operator> <operator pos:line="31" pos:column="26">=<pos:position pos:line="31" pos:column="27"/></operator> <literal type="char" pos:line="31" pos:column="28">'0'<pos:position pos:line="31" pos:column="31"/></literal></expr>;<pos:position pos:line="31" pos:column="32"/></expr_stmt></block></while>
            }<pos:position pos:line="32" pos:column="14"/></block></then>
            <elseif pos:line="33" pos:column="13">else <if pos:line="33" pos:column="18">if <condition pos:line="33" pos:column="21">(<expr><name pos:line="33" pos:column="22">add_dp<pos:position pos:line="33" pos:column="28"/></name></expr>)<pos:position pos:line="33" pos:column="29"/></condition><then pos:line="33" pos:column="29">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="34" pos:column="17">*<pos:position pos:line="34" pos:column="18"/></operator><name pos:line="34" pos:column="18">s<pos:position pos:line="34" pos:column="19"/></name><operator pos:line="34" pos:column="19">++<pos:position pos:line="34" pos:column="21"/></operator> <operator pos:line="34" pos:column="22">=<pos:position pos:line="34" pos:column="23"/></operator> <literal type="char" pos:line="34" pos:column="24">'.'<pos:position pos:line="34" pos:column="27"/></literal></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt></block></then></if></elseif></if>
        }<pos:position pos:line="35" pos:column="10"/></block></then>
        <else pos:line="36" pos:column="9">else <block pos:line="36" pos:column="14">{
            <while pos:line="37" pos:column="13">while <condition pos:line="37" pos:column="19">(<expr><name pos:line="37" pos:column="20">decimal_point<pos:position pos:line="37" pos:column="33"/></name><operator pos:line="37" pos:column="33">--<pos:position pos:line="37" pos:column="35"/></operator> <operator pos:line="37" pos:column="36">&gt;<pos:position pos:line="37" pos:column="40"/></operator> <literal type="number" pos:line="37" pos:column="38">0<pos:position pos:line="37" pos:column="39"/></literal></expr>)<pos:position pos:line="37" pos:column="40"/></condition>
                <block type="pseudo"><expr_stmt><expr><operator pos:line="38" pos:column="17">*<pos:position pos:line="38" pos:column="18"/></operator><name pos:line="38" pos:column="18">s<pos:position pos:line="38" pos:column="19"/></name><operator pos:line="38" pos:column="19">++<pos:position pos:line="38" pos:column="21"/></operator> <operator pos:line="38" pos:column="22">=<pos:position pos:line="38" pos:column="23"/></operator> <operator pos:line="38" pos:column="24">*<pos:position pos:line="38" pos:column="25"/></operator><name pos:line="38" pos:column="25">p<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">++<pos:position pos:line="38" pos:column="28"/></operator></expr>;<pos:position pos:line="38" pos:column="29"/></expr_stmt></block></while>
            <if pos:line="39" pos:column="13">if <condition pos:line="39" pos:column="16">(<expr><name pos:line="39" pos:column="17">precision<pos:position pos:line="39" pos:column="26"/></name> <operator pos:line="39" pos:column="27">&gt;<pos:position pos:line="39" pos:column="31"/></operator> <literal type="number" pos:line="39" pos:column="29">0<pos:position pos:line="39" pos:column="30"/></literal> <operator pos:line="39" pos:column="31">||<pos:position pos:line="39" pos:column="33"/></operator> <name pos:line="39" pos:column="34">add_dp<pos:position pos:line="39" pos:column="40"/></name></expr>)<pos:position pos:line="39" pos:column="41"/></condition><then pos:line="39" pos:column="41">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="40" pos:column="17">*<pos:position pos:line="40" pos:column="18"/></operator><name pos:line="40" pos:column="18">s<pos:position pos:line="40" pos:column="19"/></name><operator pos:line="40" pos:column="19">++<pos:position pos:line="40" pos:column="21"/></operator> <operator pos:line="40" pos:column="22">=<pos:position pos:line="40" pos:column="23"/></operator> <literal type="char" pos:line="40" pos:column="24">'.'<pos:position pos:line="40" pos:column="27"/></literal></expr>;<pos:position pos:line="40" pos:column="28"/></expr_stmt></block></then></if>
        }<pos:position pos:line="41" pos:column="10"/></block></else></if>
    }<pos:position pos:line="42" pos:column="6"/></block></then>
    <else pos:line="43" pos:column="5">else <block pos:line="43" pos:column="10">{
        <expr_stmt><expr><operator pos:line="44" pos:column="9">*<pos:position pos:line="44" pos:column="10"/></operator><name pos:line="44" pos:column="10">s<pos:position pos:line="44" pos:column="11"/></name><operator pos:line="44" pos:column="11">++<pos:position pos:line="44" pos:column="13"/></operator> <operator pos:line="44" pos:column="14">=<pos:position pos:line="44" pos:column="15"/></operator> <operator pos:line="44" pos:column="16">*<pos:position pos:line="44" pos:column="17"/></operator><name pos:line="44" pos:column="17">p<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">++<pos:position pos:line="44" pos:column="20"/></operator></expr>;<pos:position pos:line="44" pos:column="21"/></expr_stmt>
        <if pos:line="45" pos:column="9">if <condition pos:line="45" pos:column="12">(<expr><name pos:line="45" pos:column="13">precision<pos:position pos:line="45" pos:column="22"/></name> <operator pos:line="45" pos:column="23">&gt;<pos:position pos:line="45" pos:column="27"/></operator> <literal type="number" pos:line="45" pos:column="25">0<pos:position pos:line="45" pos:column="26"/></literal> <operator pos:line="45" pos:column="27">||<pos:position pos:line="45" pos:column="29"/></operator> <name pos:line="45" pos:column="30">add_dp<pos:position pos:line="45" pos:column="36"/></name></expr>)<pos:position pos:line="45" pos:column="37"/></condition><then pos:line="45" pos:column="37">
            <block type="pseudo"><expr_stmt><expr><operator pos:line="46" pos:column="13">*<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">s<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">++<pos:position pos:line="46" pos:column="17"/></operator> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <literal type="char" pos:line="46" pos:column="20">'.'<pos:position pos:line="46" pos:column="23"/></literal></expr>;<pos:position pos:line="46" pos:column="24"/></expr_stmt></block></then></if>
    }<pos:position pos:line="47" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="49" pos:column="5">/*
     * copy the rest of p, the NUL is NOT copied
     */</comment>
    <while pos:line="52" pos:column="5">while <condition pos:line="52" pos:column="11">(<expr><operator pos:line="52" pos:column="12">*<pos:position pos:line="52" pos:column="13"/></operator><name pos:line="52" pos:column="13">p<pos:position pos:line="52" pos:column="14"/></name></expr>)<pos:position pos:line="52" pos:column="15"/></condition>
        <block type="pseudo"><expr_stmt><expr><operator pos:line="53" pos:column="9">*<pos:position pos:line="53" pos:column="10"/></operator><name pos:line="53" pos:column="10">s<pos:position pos:line="53" pos:column="11"/></name><operator pos:line="53" pos:column="11">++<pos:position pos:line="53" pos:column="13"/></operator> <operator pos:line="53" pos:column="14">=<pos:position pos:line="53" pos:column="15"/></operator> <operator pos:line="53" pos:column="16">*<pos:position pos:line="53" pos:column="17"/></operator><name pos:line="53" pos:column="17">p<pos:position pos:line="53" pos:column="18"/></name><operator pos:line="53" pos:column="18">++<pos:position pos:line="53" pos:column="20"/></operator></expr>;<pos:position pos:line="53" pos:column="21"/></expr_stmt></block></while>

    <if pos:line="55" pos:column="5">if <condition pos:line="55" pos:column="8">(<expr><name pos:line="55" pos:column="9">format<pos:position pos:line="55" pos:column="15"/></name> <operator pos:line="55" pos:column="16">!=<pos:position pos:line="55" pos:column="18"/></operator> <literal type="char" pos:line="55" pos:column="19">'f'<pos:position pos:line="55" pos:column="22"/></literal></expr>)<pos:position pos:line="55" pos:column="23"/></condition><then pos:line="55" pos:column="23"> <block pos:line="55" pos:column="24">{
        <decl_stmt><decl><type><name pos:line="56" pos:column="9">char<pos:position pos:line="56" pos:column="13"/></name></type> <name><name pos:line="56" pos:column="14">temp<pos:position pos:line="56" pos:column="18"/></name><index pos:line="56" pos:column="18">[<expr><name pos:line="56" pos:column="19">EXPONENT_LENGTH<pos:position pos:line="56" pos:column="34"/></name></expr>]<pos:position pos:line="56" pos:column="35"/></index></name></decl>;<pos:position pos:line="56" pos:column="36"/></decl_stmt>        <comment type="block" pos:line="56" pos:column="44">/* for exponent conversion */</comment>
        <decl_stmt><decl><type><name pos:line="57" pos:column="9">apr_size_t<pos:position pos:line="57" pos:column="19"/></name></type> <name pos:line="57" pos:column="20">t_len<pos:position pos:line="57" pos:column="25"/></name></decl>;<pos:position pos:line="57" pos:column="26"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="58" pos:column="9">int<pos:position pos:line="58" pos:column="12"/></name></type> <name pos:line="58" pos:column="13">exponent_is_negative<pos:position pos:line="58" pos:column="33"/></name></decl>;<pos:position pos:line="58" pos:column="34"/></decl_stmt>

        <expr_stmt><expr><operator pos:line="60" pos:column="9">*<pos:position pos:line="60" pos:column="10"/></operator><name pos:line="60" pos:column="10">s<pos:position pos:line="60" pos:column="11"/></name><operator pos:line="60" pos:column="11">++<pos:position pos:line="60" pos:column="13"/></operator> <operator pos:line="60" pos:column="14">=<pos:position pos:line="60" pos:column="15"/></operator> <name pos:line="60" pos:column="16">format<pos:position pos:line="60" pos:column="22"/></name></expr>;<pos:position pos:line="60" pos:column="23"/></expr_stmt>                <comment type="block" pos:line="60" pos:column="39">/* either e or E */</comment>
        <expr_stmt><expr><name pos:line="61" pos:column="9">decimal_point<pos:position pos:line="61" pos:column="22"/></name><operator pos:line="61" pos:column="22">--<pos:position pos:line="61" pos:column="24"/></operator></expr>;<pos:position pos:line="61" pos:column="25"/></expr_stmt>
        <if pos:line="62" pos:column="9">if <condition pos:line="62" pos:column="12">(<expr><name pos:line="62" pos:column="13">decimal_point<pos:position pos:line="62" pos:column="26"/></name> <operator pos:line="62" pos:column="27">!=<pos:position pos:line="62" pos:column="29"/></operator> <literal type="number" pos:line="62" pos:column="30">0<pos:position pos:line="62" pos:column="31"/></literal></expr>)<pos:position pos:line="62" pos:column="32"/></condition><then pos:line="62" pos:column="32"> <block pos:line="62" pos:column="33">{
            <expr_stmt><expr><name pos:line="63" pos:column="13">p<pos:position pos:line="63" pos:column="14"/></name> <operator pos:line="63" pos:column="15">=<pos:position pos:line="63" pos:column="16"/></operator> <call><name pos:line="63" pos:column="17">conv_10<pos:position pos:line="63" pos:column="24"/></name><argument_list pos:line="63" pos:column="24">(<argument><expr><operator pos:line="63" pos:column="25">(<pos:position pos:line="63" pos:column="26"/></operator><name pos:line="63" pos:column="26">apr_int32_t<pos:position pos:line="63" pos:column="37"/></name><operator pos:line="63" pos:column="37">)<pos:position pos:line="63" pos:column="38"/></operator> <name pos:line="63" pos:column="39">decimal_point<pos:position pos:line="63" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="54">FALSE<pos:position pos:line="63" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="63" pos:column="61">&amp;<pos:position pos:line="63" pos:column="66"/></operator><name pos:line="63" pos:column="62">exponent_is_negative<pos:position pos:line="63" pos:column="82"/></name></expr></argument>,
                        <argument><expr><operator pos:line="64" pos:column="25">&amp;<pos:position pos:line="64" pos:column="30"/></operator><name><name pos:line="64" pos:column="26">temp<pos:position pos:line="64" pos:column="30"/></name><index pos:line="64" pos:column="30">[<expr><name pos:line="64" pos:column="31">EXPONENT_LENGTH<pos:position pos:line="64" pos:column="46"/></name></expr>]<pos:position pos:line="64" pos:column="47"/></index></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="49">&amp;<pos:position pos:line="64" pos:column="54"/></operator><name pos:line="64" pos:column="50">t_len<pos:position pos:line="64" pos:column="55"/></name></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="65" pos:column="13">*<pos:position pos:line="65" pos:column="14"/></operator><name pos:line="65" pos:column="14">s<pos:position pos:line="65" pos:column="15"/></name><operator pos:line="65" pos:column="15">++<pos:position pos:line="65" pos:column="17"/></operator> <operator pos:line="65" pos:column="18">=<pos:position pos:line="65" pos:column="19"/></operator> <ternary><condition><expr><name pos:line="65" pos:column="20">exponent_is_negative<pos:position pos:line="65" pos:column="40"/></name></expr> ?<pos:position pos:line="65" pos:column="42"/></condition><then pos:line="65" pos:column="42"> <expr><literal type="char" pos:line="65" pos:column="43">'-'<pos:position pos:line="65" pos:column="46"/></literal></expr> <pos:position pos:line="65" pos:column="47"/></then><else pos:line="65" pos:column="47">: <expr><literal type="char" pos:line="65" pos:column="49">'+'<pos:position pos:line="65" pos:column="52"/></literal></expr></else></ternary></expr>;<pos:position pos:line="65" pos:column="53"/></expr_stmt>

            <comment type="block" pos:line="67" pos:column="13">/*
             * Make sure the exponent has at least 2 digits
             */</comment>
            <if pos:line="70" pos:column="13">if <condition pos:line="70" pos:column="16">(<expr><name pos:line="70" pos:column="17">t_len<pos:position pos:line="70" pos:column="22"/></name> <operator pos:line="70" pos:column="23">==<pos:position pos:line="70" pos:column="25"/></operator> <literal type="number" pos:line="70" pos:column="26">1<pos:position pos:line="70" pos:column="27"/></literal></expr>)<pos:position pos:line="70" pos:column="28"/></condition><then pos:line="70" pos:column="28">
                <block type="pseudo"><expr_stmt><expr><operator pos:line="71" pos:column="17">*<pos:position pos:line="71" pos:column="18"/></operator><name pos:line="71" pos:column="18">s<pos:position pos:line="71" pos:column="19"/></name><operator pos:line="71" pos:column="19">++<pos:position pos:line="71" pos:column="21"/></operator> <operator pos:line="71" pos:column="22">=<pos:position pos:line="71" pos:column="23"/></operator> <literal type="char" pos:line="71" pos:column="24">'0'<pos:position pos:line="71" pos:column="27"/></literal></expr>;<pos:position pos:line="71" pos:column="28"/></expr_stmt></block></then></if>
            <while pos:line="72" pos:column="13">while <condition pos:line="72" pos:column="19">(<expr><name pos:line="72" pos:column="20">t_len<pos:position pos:line="72" pos:column="25"/></name><operator pos:line="72" pos:column="25">--<pos:position pos:line="72" pos:column="27"/></operator></expr>)<pos:position pos:line="72" pos:column="28"/></condition>
                <block type="pseudo"><expr_stmt><expr><operator pos:line="73" pos:column="17">*<pos:position pos:line="73" pos:column="18"/></operator><name pos:line="73" pos:column="18">s<pos:position pos:line="73" pos:column="19"/></name><operator pos:line="73" pos:column="19">++<pos:position pos:line="73" pos:column="21"/></operator> <operator pos:line="73" pos:column="22">=<pos:position pos:line="73" pos:column="23"/></operator> <operator pos:line="73" pos:column="24">*<pos:position pos:line="73" pos:column="25"/></operator><name pos:line="73" pos:column="25">p<pos:position pos:line="73" pos:column="26"/></name><operator pos:line="73" pos:column="26">++<pos:position pos:line="73" pos:column="28"/></operator></expr>;<pos:position pos:line="73" pos:column="29"/></expr_stmt></block></while>
        }<pos:position pos:line="74" pos:column="10"/></block></then>
        <else pos:line="75" pos:column="9">else <block pos:line="75" pos:column="14">{
            <expr_stmt><expr><operator pos:line="76" pos:column="13">*<pos:position pos:line="76" pos:column="14"/></operator><name pos:line="76" pos:column="14">s<pos:position pos:line="76" pos:column="15"/></name><operator pos:line="76" pos:column="15">++<pos:position pos:line="76" pos:column="17"/></operator> <operator pos:line="76" pos:column="18">=<pos:position pos:line="76" pos:column="19"/></operator> <literal type="char" pos:line="76" pos:column="20">'+'<pos:position pos:line="76" pos:column="23"/></literal></expr>;<pos:position pos:line="76" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="77" pos:column="13">*<pos:position pos:line="77" pos:column="14"/></operator><name pos:line="77" pos:column="14">s<pos:position pos:line="77" pos:column="15"/></name><operator pos:line="77" pos:column="15">++<pos:position pos:line="77" pos:column="17"/></operator> <operator pos:line="77" pos:column="18">=<pos:position pos:line="77" pos:column="19"/></operator> <literal type="char" pos:line="77" pos:column="20">'0'<pos:position pos:line="77" pos:column="23"/></literal></expr>;<pos:position pos:line="77" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="78" pos:column="13">*<pos:position pos:line="78" pos:column="14"/></operator><name pos:line="78" pos:column="14">s<pos:position pos:line="78" pos:column="15"/></name><operator pos:line="78" pos:column="15">++<pos:position pos:line="78" pos:column="17"/></operator> <operator pos:line="78" pos:column="18">=<pos:position pos:line="78" pos:column="19"/></operator> <literal type="char" pos:line="78" pos:column="20">'0'<pos:position pos:line="78" pos:column="23"/></literal></expr>;<pos:position pos:line="78" pos:column="24"/></expr_stmt>
        }<pos:position pos:line="79" pos:column="10"/></block></else></if>
    }<pos:position pos:line="80" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="82" pos:column="5">*<pos:position pos:line="82" pos:column="6"/></operator><name pos:line="82" pos:column="6">len<pos:position pos:line="82" pos:column="9"/></name> <operator pos:line="82" pos:column="10">=<pos:position pos:line="82" pos:column="11"/></operator> <name pos:line="82" pos:column="12">s<pos:position pos:line="82" pos:column="13"/></name> <operator pos:line="82" pos:column="14">-<pos:position pos:line="82" pos:column="15"/></operator> <name pos:line="82" pos:column="16">buf<pos:position pos:line="82" pos:column="19"/></name></expr>;<pos:position pos:line="82" pos:column="20"/></expr_stmt>
    <return pos:line="83" pos:column="5">return <expr><operator pos:line="83" pos:column="12">(<pos:position pos:line="83" pos:column="13"/></operator><name pos:line="83" pos:column="13">buf<pos:position pos:line="83" pos:column="16"/></name><operator pos:line="83" pos:column="16">)<pos:position pos:line="83" pos:column="17"/></operator></expr>;<pos:position pos:line="83" pos:column="18"/></return>
}<pos:position pos:line="84" pos:column="2"/></block></function></unit>
