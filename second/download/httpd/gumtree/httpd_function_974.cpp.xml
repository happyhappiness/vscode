<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_974.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">show_mpm_settings<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">void<pos:position pos:line="1" pos:column="35"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">mpm_query_info<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">retval<pos:position pos:line="4" pos:column="24"/></name></decl>;<pos:position pos:line="4" pos:column="25"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">printf<pos:position pos:line="6" pos:column="11"/></name><argument_list pos:line="6" pos:column="11">(<argument><expr><literal type="string" pos:line="6" pos:column="12">"Server MPM:     %s\n"<pos:position pos:line="6" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="36">ap_show_mpm<pos:position pos:line="6" pos:column="47"/></name><argument_list pos:line="6" pos:column="47">()<pos:position pos:line="6" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="51"/></expr_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">retval<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">=<pos:position pos:line="8" pos:column="13"/></operator> <call><name pos:line="8" pos:column="14">ap_mpm_query<pos:position pos:line="8" pos:column="26"/></name><argument_list pos:line="8" pos:column="26">(<argument><expr><name pos:line="8" pos:column="27">AP_MPMQ_IS_THREADED<pos:position pos:line="8" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="48">&amp;<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="49">mpm_query_info<pos:position pos:line="8" pos:column="63"/></name></expr></argument>)<pos:position pos:line="8" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="65"/></expr_stmt>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">retval<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">==<pos:position pos:line="10" pos:column="18"/></operator> <name pos:line="10" pos:column="19">APR_SUCCESS<pos:position pos:line="10" pos:column="30"/></name></expr>)<pos:position pos:line="10" pos:column="31"/></condition><then pos:line="10" pos:column="31"> <block pos:line="10" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">printf<pos:position pos:line="11" pos:column="15"/></name><argument_list pos:line="11" pos:column="15">(<argument><expr><literal type="string" pos:line="11" pos:column="16">"  threaded:     "<pos:position pos:line="11" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="36"/></expr_stmt>

        <if pos:line="13" pos:column="9">if <condition pos:line="13" pos:column="12">(<expr><name pos:line="13" pos:column="13">mpm_query_info<pos:position pos:line="13" pos:column="27"/></name> <operator pos:line="13" pos:column="28">==<pos:position pos:line="13" pos:column="30"/></operator> <name pos:line="13" pos:column="31">AP_MPMQ_DYNAMIC<pos:position pos:line="13" pos:column="46"/></name></expr>)<pos:position pos:line="13" pos:column="47"/></condition><then pos:line="13" pos:column="47"> <block pos:line="13" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">printf<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><literal type="string" pos:line="14" pos:column="20">"yes (variable thread count)\n"<pos:position pos:line="14" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="15" pos:column="10"/></block></then>
        <elseif pos:line="16" pos:column="9">else <if pos:line="16" pos:column="14">if <condition pos:line="16" pos:column="17">(<expr><name pos:line="16" pos:column="18">mpm_query_info<pos:position pos:line="16" pos:column="32"/></name> <operator pos:line="16" pos:column="33">==<pos:position pos:line="16" pos:column="35"/></operator> <name pos:line="16" pos:column="36">AP_MPMQ_STATIC<pos:position pos:line="16" pos:column="50"/></name></expr>)<pos:position pos:line="16" pos:column="51"/></condition><then pos:line="16" pos:column="51"> <block pos:line="16" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">printf<pos:position pos:line="17" pos:column="19"/></name><argument_list pos:line="17" pos:column="19">(<argument><expr><literal type="string" pos:line="17" pos:column="20">"yes (fixed thread count)\n"<pos:position pos:line="17" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="17" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="50"/></expr_stmt>
        }<pos:position pos:line="18" pos:column="10"/></block></then></if></elseif>
        <else pos:line="19" pos:column="9">else <block pos:line="19" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">printf<pos:position pos:line="20" pos:column="19"/></name><argument_list pos:line="20" pos:column="19">(<argument><expr><literal type="string" pos:line="20" pos:column="20">"no\n"<pos:position pos:line="20" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="20" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="21" pos:column="10"/></block></else></if>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="24" pos:column="5">retval<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <call><name pos:line="24" pos:column="14">ap_mpm_query<pos:position pos:line="24" pos:column="26"/></name><argument_list pos:line="24" pos:column="26">(<argument><expr><name pos:line="24" pos:column="27">AP_MPMQ_IS_FORKED<pos:position pos:line="24" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="24" pos:column="46">&amp;<pos:position pos:line="24" pos:column="51"/></operator><name pos:line="24" pos:column="47">mpm_query_info<pos:position pos:line="24" pos:column="61"/></name></expr></argument>)<pos:position pos:line="24" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="63"/></expr_stmt>

    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">retval<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">==<pos:position pos:line="26" pos:column="18"/></operator> <name pos:line="26" pos:column="19">APR_SUCCESS<pos:position pos:line="26" pos:column="30"/></name></expr>)<pos:position pos:line="26" pos:column="31"/></condition><then pos:line="26" pos:column="31"> <block pos:line="26" pos:column="32">{
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">printf<pos:position pos:line="27" pos:column="15"/></name><argument_list pos:line="27" pos:column="15">(<argument><expr><literal type="string" pos:line="27" pos:column="16">"    forked:     "<pos:position pos:line="27" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="27" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="36"/></expr_stmt>

        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">mpm_query_info<pos:position pos:line="29" pos:column="27"/></name> <operator pos:line="29" pos:column="28">==<pos:position pos:line="29" pos:column="30"/></operator> <name pos:line="29" pos:column="31">AP_MPMQ_DYNAMIC<pos:position pos:line="29" pos:column="46"/></name></expr>)<pos:position pos:line="29" pos:column="47"/></condition><then pos:line="29" pos:column="47"> <block pos:line="29" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">printf<pos:position pos:line="30" pos:column="19"/></name><argument_list pos:line="30" pos:column="19">(<argument><expr><literal type="string" pos:line="30" pos:column="20">"yes (variable process count)\n"<pos:position pos:line="30" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></then>
        <elseif pos:line="32" pos:column="9">else <if pos:line="32" pos:column="14">if <condition pos:line="32" pos:column="17">(<expr><name pos:line="32" pos:column="18">mpm_query_info<pos:position pos:line="32" pos:column="32"/></name> <operator pos:line="32" pos:column="33">==<pos:position pos:line="32" pos:column="35"/></operator> <name pos:line="32" pos:column="36">AP_MPMQ_STATIC<pos:position pos:line="32" pos:column="50"/></name></expr>)<pos:position pos:line="32" pos:column="51"/></condition><then pos:line="32" pos:column="51"> <block pos:line="32" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">printf<pos:position pos:line="33" pos:column="19"/></name><argument_list pos:line="33" pos:column="19">(<argument><expr><literal type="string" pos:line="33" pos:column="20">"yes (fixed process count)\n"<pos:position pos:line="33" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if></elseif>
        <else pos:line="35" pos:column="9">else <block pos:line="35" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">printf<pos:position pos:line="36" pos:column="19"/></name><argument_list pos:line="36" pos:column="19">(<argument><expr><literal type="string" pos:line="36" pos:column="20">"no\n"<pos:position pos:line="36" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="36" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></else></if>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>
}<pos:position pos:line="39" pos:column="2"/></block></function></unit>
