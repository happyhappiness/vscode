<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1059_httpd-2.2.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">dump_loaded_modules<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">apr_pool_t<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">p<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">server_rec<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">s<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="62"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">ap_module_symbol_t<pos:position pos:line="3" pos:column="23"/></name> <modifier pos:line="3" pos:column="24">*<pos:position pos:line="3" pos:column="25"/></modifier></type><name pos:line="3" pos:column="25">modie<pos:position pos:line="3" pos:column="30"/></name></decl>;<pos:position pos:line="3" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ap_module_symbol_t<pos:position pos:line="4" pos:column="23"/></name> <modifier pos:line="4" pos:column="24">*<pos:position pos:line="4" pos:column="25"/></modifier></type><name pos:line="4" pos:column="25">modi<pos:position pos:line="4" pos:column="29"/></name></decl>;<pos:position pos:line="4" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">so_server_conf<pos:position pos:line="5" pos:column="19"/></name> <modifier pos:line="5" pos:column="20">*<pos:position pos:line="5" pos:column="21"/></modifier></type><name pos:line="5" pos:column="21">sconf<pos:position pos:line="5" pos:column="26"/></name></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">int<pos:position pos:line="6" pos:column="8"/></name></type> <name pos:line="6" pos:column="9">i<pos:position pos:line="6" pos:column="10"/></name></decl>;<pos:position pos:line="6" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_file_t<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">out<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">NULL<pos:position pos:line="7" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="28"/></decl_stmt>

    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><operator pos:line="9" pos:column="9">!<pos:position pos:line="9" pos:column="10"/></operator><call><name pos:line="9" pos:column="10">ap_exists_config_define<pos:position pos:line="9" pos:column="33"/></name><argument_list pos:line="9" pos:column="33">(<argument><expr><literal type="string" pos:line="9" pos:column="34">"DUMP_MODULES"<pos:position pos:line="9" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="9" pos:column="50"/></condition><then pos:line="9" pos:column="50"> <block pos:line="9" pos:column="51">{
        <return pos:line="10" pos:column="9">return;<pos:position pos:line="10" pos:column="16"/></return>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">apr_file_open_stdout<pos:position pos:line="13" pos:column="25"/></name><argument_list pos:line="13" pos:column="25">(<argument><expr><operator pos:line="13" pos:column="26">&amp;<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="27">out<pos:position pos:line="13" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="32">p<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="15" pos:column="5">apr_file_printf<pos:position pos:line="15" pos:column="20"/></name><argument_list pos:line="15" pos:column="20">(<argument><expr><name pos:line="15" pos:column="21">out<pos:position pos:line="15" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="15" pos:column="26">"Loaded Modules:\n"<pos:position pos:line="15" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="47"/></expr_stmt>

    <expr_stmt><expr><name pos:line="17" pos:column="5">sconf<pos:position pos:line="17" pos:column="10"/></name> <operator pos:line="17" pos:column="11">=<pos:position pos:line="17" pos:column="12"/></operator> <operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><name pos:line="17" pos:column="14">so_server_conf<pos:position pos:line="17" pos:column="28"/></name> <operator pos:line="17" pos:column="29">*<pos:position pos:line="17" pos:column="30"/></operator><operator pos:line="17" pos:column="30">)<pos:position pos:line="17" pos:column="31"/></operator><call><name pos:line="17" pos:column="31">ap_get_module_config<pos:position pos:line="17" pos:column="51"/></name><argument_list pos:line="17" pos:column="51">(<argument><expr><name><name pos:line="17" pos:column="52">s<pos:position pos:line="17" pos:column="53"/></name><operator pos:line="17" pos:column="53">-&gt;<pos:position pos:line="17" pos:column="58"/></operator><name pos:line="17" pos:column="55">module_config<pos:position pos:line="17" pos:column="68"/></name></name></expr></argument>,
                                                   <argument><expr><operator pos:line="18" pos:column="52">&amp;<pos:position pos:line="18" pos:column="57"/></operator><name pos:line="18" pos:column="53">so_module<pos:position pos:line="18" pos:column="62"/></name></expr></argument>)<pos:position pos:line="18" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="64"/></expr_stmt>
    <for pos:line="19" pos:column="5">for <control pos:line="19" pos:column="9">(<init><expr><name pos:line="19" pos:column="10">i<pos:position pos:line="19" pos:column="11"/></name> <operator pos:line="19" pos:column="12">=<pos:position pos:line="19" pos:column="13"/></operator> <literal type="number" pos:line="19" pos:column="14">0<pos:position pos:line="19" pos:column="15"/></literal></expr>;<pos:position pos:line="19" pos:column="16"/></init> <condition pos:line="19" pos:column="17">;<pos:position pos:line="19" pos:column="18"/></condition> <incr><expr><name pos:line="19" pos:column="19">i<pos:position pos:line="19" pos:column="20"/></name><operator pos:line="19" pos:column="20">++<pos:position pos:line="19" pos:column="22"/></operator></expr></incr>)<pos:position pos:line="19" pos:column="23"/></control> <block pos:line="19" pos:column="24">{
        <expr_stmt><expr><name pos:line="20" pos:column="9">modi<pos:position pos:line="20" pos:column="13"/></name> <operator pos:line="20" pos:column="14">=<pos:position pos:line="20" pos:column="15"/></operator> <operator pos:line="20" pos:column="16">&amp;<pos:position pos:line="20" pos:column="21"/></operator><name><name pos:line="20" pos:column="17">ap_prelinked_module_symbols<pos:position pos:line="20" pos:column="44"/></name><index pos:line="20" pos:column="44">[<expr><name pos:line="20" pos:column="45">i<pos:position pos:line="20" pos:column="46"/></name></expr>]<pos:position pos:line="20" pos:column="47"/></index></name></expr>;<pos:position pos:line="20" pos:column="48"/></expr_stmt>
        <if pos:line="21" pos:column="9">if <condition pos:line="21" pos:column="12">(<expr><name><name pos:line="21" pos:column="13">modi<pos:position pos:line="21" pos:column="17"/></name><operator pos:line="21" pos:column="17">-&gt;<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="19">name<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">!=<pos:position pos:line="21" pos:column="26"/></operator> <name pos:line="21" pos:column="27">NULL<pos:position pos:line="21" pos:column="31"/></name></expr>)<pos:position pos:line="21" pos:column="32"/></condition><then pos:line="21" pos:column="32"> <block pos:line="21" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="22" pos:column="13">apr_file_printf<pos:position pos:line="22" pos:column="28"/></name><argument_list pos:line="22" pos:column="28">(<argument><expr><name pos:line="22" pos:column="29">out<pos:position pos:line="22" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="22" pos:column="34">" %s (static)\n"<pos:position pos:line="22" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="22" pos:column="52">modi<pos:position pos:line="22" pos:column="56"/></name><operator pos:line="22" pos:column="56">-&gt;<pos:position pos:line="22" pos:column="61"/></operator><name pos:line="22" pos:column="58">name<pos:position pos:line="22" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="22" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="23" pos:column="10"/></block></then>
        <else pos:line="24" pos:column="9">else <block pos:line="24" pos:column="14">{
            <break pos:line="25" pos:column="13">break;<pos:position pos:line="25" pos:column="19"/></break>
        }<pos:position pos:line="26" pos:column="10"/></block></else></if>
    }<pos:position pos:line="27" pos:column="6"/></block></for>

    <expr_stmt><expr><name pos:line="29" pos:column="5">modie<pos:position pos:line="29" pos:column="10"/></name> <operator pos:line="29" pos:column="11">=<pos:position pos:line="29" pos:column="12"/></operator> <operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">ap_module_symbol_t<pos:position pos:line="29" pos:column="32"/></name> <operator pos:line="29" pos:column="33">*<pos:position pos:line="29" pos:column="34"/></operator><operator pos:line="29" pos:column="34">)<pos:position pos:line="29" pos:column="35"/></operator><name><name pos:line="29" pos:column="35">sconf<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">-&gt;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="42">loaded_modules<pos:position pos:line="29" pos:column="56"/></name><operator pos:line="29" pos:column="56">-&gt;<pos:position pos:line="29" pos:column="61"/></operator><name pos:line="29" pos:column="58">elts<pos:position pos:line="29" pos:column="62"/></name></name></expr>;<pos:position pos:line="29" pos:column="63"/></expr_stmt>
    <for pos:line="30" pos:column="5">for <control pos:line="30" pos:column="9">(<init><expr><name pos:line="30" pos:column="10">i<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">=<pos:position pos:line="30" pos:column="13"/></operator> <literal type="number" pos:line="30" pos:column="14">0<pos:position pos:line="30" pos:column="15"/></literal></expr>;<pos:position pos:line="30" pos:column="16"/></init> <condition><expr><name pos:line="30" pos:column="17">i<pos:position pos:line="30" pos:column="18"/></name> <operator pos:line="30" pos:column="19">&lt;<pos:position pos:line="30" pos:column="23"/></operator> <name><name pos:line="30" pos:column="21">sconf<pos:position pos:line="30" pos:column="26"/></name><operator pos:line="30" pos:column="26">-&gt;<pos:position pos:line="30" pos:column="31"/></operator><name pos:line="30" pos:column="28">loaded_modules<pos:position pos:line="30" pos:column="42"/></name><operator pos:line="30" pos:column="42">-&gt;<pos:position pos:line="30" pos:column="47"/></operator><name pos:line="30" pos:column="44">nelts<pos:position pos:line="30" pos:column="49"/></name></name></expr>;<pos:position pos:line="30" pos:column="50"/></condition> <incr><expr><name pos:line="30" pos:column="51">i<pos:position pos:line="30" pos:column="52"/></name><operator pos:line="30" pos:column="52">++<pos:position pos:line="30" pos:column="54"/></operator></expr></incr>)<pos:position pos:line="30" pos:column="55"/></control> <block pos:line="30" pos:column="56">{
        <expr_stmt><expr><name pos:line="31" pos:column="9">modi<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">=<pos:position pos:line="31" pos:column="15"/></operator> <operator pos:line="31" pos:column="16">&amp;<pos:position pos:line="31" pos:column="21"/></operator><name><name pos:line="31" pos:column="17">modie<pos:position pos:line="31" pos:column="22"/></name><index pos:line="31" pos:column="22">[<expr><name pos:line="31" pos:column="23">i<pos:position pos:line="31" pos:column="24"/></name></expr>]<pos:position pos:line="31" pos:column="25"/></index></name></expr>;<pos:position pos:line="31" pos:column="26"/></expr_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><name><name pos:line="32" pos:column="13">modi<pos:position pos:line="32" pos:column="17"/></name><operator pos:line="32" pos:column="17">-&gt;<pos:position pos:line="32" pos:column="22"/></operator><name pos:line="32" pos:column="19">name<pos:position pos:line="32" pos:column="23"/></name></name> <operator pos:line="32" pos:column="24">!=<pos:position pos:line="32" pos:column="26"/></operator> <name pos:line="32" pos:column="27">NULL<pos:position pos:line="32" pos:column="31"/></name></expr>)<pos:position pos:line="32" pos:column="32"/></condition><then pos:line="32" pos:column="32"> <block pos:line="32" pos:column="33">{
            <expr_stmt><expr><call><name pos:line="33" pos:column="13">apr_file_printf<pos:position pos:line="33" pos:column="28"/></name><argument_list pos:line="33" pos:column="28">(<argument><expr><name pos:line="33" pos:column="29">out<pos:position pos:line="33" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="33" pos:column="34">" %s (shared)\n"<pos:position pos:line="33" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="52">modi<pos:position pos:line="33" pos:column="56"/></name><operator pos:line="33" pos:column="56">-&gt;<pos:position pos:line="33" pos:column="61"/></operator><name pos:line="33" pos:column="58">name<pos:position pos:line="33" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="33" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="64"/></expr_stmt>
        }<pos:position pos:line="34" pos:column="10"/></block></then></if>
    }<pos:position pos:line="35" pos:column="6"/></block></for>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
