<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3574_httpd-2.2.11.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">mixer<pos:position pos:line="1" pos:column="18"/></name><parameter_list pos:line="1" pos:column="18">(<parameter><decl><type><name pos:line="1" pos:column="19">apr_random_t<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">g<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>,<parameter><decl><type><name pos:line="1" pos:column="35">pid_t<pos:position pos:line="1" pos:column="40"/></name></type> <name pos:line="1" pos:column="41">pid<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name> <name pos:line="3" pos:column="14">char<pos:position pos:line="3" pos:column="18"/></name> <modifier pos:line="3" pos:column="19">*<pos:position pos:line="3" pos:column="20"/></modifier></type><name pos:line="3" pos:column="20">H<pos:position pos:line="3" pos:column="21"/></name> <init pos:line="3" pos:column="22">= <expr><call><name pos:line="3" pos:column="24">H_current<pos:position pos:line="3" pos:column="33"/></name><argument_list pos:line="3" pos:column="33">(<argument><expr><name pos:line="3" pos:column="34">g<pos:position pos:line="3" pos:column="35"/></name></expr></argument>)<pos:position pos:line="3" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="3" pos:column="37"/></decl_stmt>

    <comment type="block" pos:line="5" pos:column="5">/* mix the PID into the current H */</comment>
    <expr_stmt><expr><call><name pos:line="6" pos:column="5">mix_pid<pos:position pos:line="6" pos:column="12"/></name><argument_list pos:line="6" pos:column="12">(<argument><expr><name pos:line="6" pos:column="13">g<pos:position pos:line="6" pos:column="14"/></name></expr></argument>,<argument><expr><name pos:line="6" pos:column="15">H<pos:position pos:line="6" pos:column="16"/></name></expr></argument>,<argument><expr><name pos:line="6" pos:column="17">pid<pos:position pos:line="6" pos:column="20"/></name></expr></argument>)<pos:position pos:line="6" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="22"/></expr_stmt>
    <comment type="block" pos:line="7" pos:column="5">/* if we are in waiting, then also mix into main H */</comment>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">H<pos:position pos:line="8" pos:column="10"/></name> <operator pos:line="8" pos:column="11">!=<pos:position pos:line="8" pos:column="13"/></operator> <name><name pos:line="8" pos:column="14">g<pos:position pos:line="8" pos:column="15"/></name><operator pos:line="8" pos:column="15">-&gt;<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="17">H<pos:position pos:line="8" pos:column="18"/></name></name></expr>)<pos:position pos:line="8" pos:column="19"/></condition><then pos:line="8" pos:column="19">
        <block type="pseudo"><expr_stmt><expr><call><name pos:line="9" pos:column="9">mix_pid<pos:position pos:line="9" pos:column="16"/></name><argument_list pos:line="9" pos:column="16">(<argument><expr><name pos:line="9" pos:column="17">g<pos:position pos:line="9" pos:column="18"/></name></expr></argument>,<argument><expr><name><name pos:line="9" pos:column="19">g<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">H<pos:position pos:line="9" pos:column="23"/></name></name></expr></argument>,<argument><expr><name pos:line="9" pos:column="24">pid<pos:position pos:line="9" pos:column="27"/></name></expr></argument>)<pos:position pos:line="9" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="29"/></expr_stmt></block></then></if>
    <comment type="block" pos:line="10" pos:column="5">/* change order of pool mixing for good measure - note that going
       backwards is much better than going forwards */</comment>
    <expr_stmt><expr><operator pos:line="12" pos:column="5">--<pos:position pos:line="12" pos:column="7"/></operator><name><name pos:line="12" pos:column="7">g<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">-&gt;<pos:position pos:line="12" pos:column="13"/></operator><name pos:line="12" pos:column="10">generation<pos:position pos:line="12" pos:column="20"/></name></name></expr>;<pos:position pos:line="12" pos:column="21"/></expr_stmt>
    <comment type="block" pos:line="13" pos:column="5">/* blow away any lingering randomness */</comment>
    <expr_stmt><expr><name><name pos:line="14" pos:column="5">g<pos:position pos:line="14" pos:column="6"/></name><operator pos:line="14" pos:column="6">-&gt;<pos:position pos:line="14" pos:column="11"/></operator><name pos:line="14" pos:column="8">random_bytes<pos:position pos:line="14" pos:column="20"/></name></name> <operator pos:line="14" pos:column="21">=<pos:position pos:line="14" pos:column="22"/></operator> <literal type="number" pos:line="14" pos:column="23">0<pos:position pos:line="14" pos:column="24"/></literal></expr>;<pos:position pos:line="14" pos:column="25"/></expr_stmt>
}<pos:position pos:line="15" pos:column="2"/></block></function></unit>
