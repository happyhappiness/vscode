<function xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position"><specifier pos:line="241" pos:column="1">static<pos:position pos:line="241" pos:column="7"/></specifier> <type><name pos:line="241" pos:column="8">int<pos:position pos:line="241" pos:column="11"/></name></type> <name pos:line="241" pos:column="12">read_state_file<pos:position pos:line="241" pos:column="27"/></name><parameter_list pos:line="241" pos:column="27">(<parameter><decl><type><name><name pos:line="241" pos:column="28">struct<pos:position pos:line="241" pos:column="34"/></name> <name pos:line="241" pos:column="35">strbuf<pos:position pos:line="241" pos:column="41"/></name></name> <modifier pos:line="241" pos:column="42">*<pos:position pos:line="241" pos:column="43"/></modifier></type><name pos:line="241" pos:column="43">sb<pos:position pos:line="241" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="241" pos:column="47">const<pos:position pos:line="241" pos:column="52"/></specifier> <name><name pos:line="241" pos:column="53">struct<pos:position pos:line="241" pos:column="59"/></name> <name pos:line="241" pos:column="60">am_state<pos:position pos:line="241" pos:column="68"/></name></name> <modifier pos:line="241" pos:column="69">*<pos:position pos:line="241" pos:column="70"/></modifier></type><name pos:line="241" pos:column="70">state<pos:position pos:line="241" pos:column="75"/></name></decl></parameter>,
			<parameter><decl><type><specifier pos:line="242" pos:column="25">const<pos:position pos:line="242" pos:column="30"/></specifier> <name pos:line="242" pos:column="31">char<pos:position pos:line="242" pos:column="35"/></name> <modifier pos:line="242" pos:column="36">*<pos:position pos:line="242" pos:column="37"/></modifier></type><name pos:line="242" pos:column="37">file<pos:position pos:line="242" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><name pos:line="242" pos:column="43">int<pos:position pos:line="242" pos:column="46"/></name></type> <name pos:line="242" pos:column="47">trim<pos:position pos:line="242" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="242" pos:column="52"/></parameter_list>
<block pos:line="243" pos:column="1">{
	<expr_stmt><expr><call><name pos:line="244" pos:column="9">strbuf_reset<pos:position pos:line="244" pos:column="21"/></name><argument_list pos:line="244" pos:column="21">(<argument><expr><name pos:line="244" pos:column="22">sb<pos:position pos:line="244" pos:column="24"/></name></expr></argument>)<pos:position pos:line="244" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="244" pos:column="26"/></expr_stmt>

	<if pos:line="246" pos:column="9">if <condition pos:line="246" pos:column="12">(<expr><call><name pos:line="246" pos:column="13">strbuf_read_file<pos:position pos:line="246" pos:column="29"/></name><argument_list pos:line="246" pos:column="29">(<argument><expr><name pos:line="246" pos:column="30">sb<pos:position pos:line="246" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="246" pos:column="34">am_path<pos:position pos:line="246" pos:column="41"/></name><argument_list pos:line="246" pos:column="41">(<argument><expr><name pos:line="246" pos:column="42">state<pos:position pos:line="246" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="246" pos:column="49">file<pos:position pos:line="246" pos:column="53"/></name></expr></argument>)<pos:position pos:line="246" pos:column="54"/></argument_list></call></expr></argument>, <argument><expr><literal type="number" pos:line="246" pos:column="56">0<pos:position pos:line="246" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="246" pos:column="58"/></argument_list></call> <operator pos:line="246" pos:column="59">&gt;=<pos:position pos:line="246" pos:column="64"/></operator> <literal type="number" pos:line="246" pos:column="62">0<pos:position pos:line="246" pos:column="63"/></literal></expr>)<pos:position pos:line="246" pos:column="64"/></condition><then pos:line="246" pos:column="64"> <block pos:line="246" pos:column="65">{
		<if pos:line="247" pos:column="17">if <condition pos:line="247" pos:column="20">(<expr><name pos:line="247" pos:column="21">trim<pos:position pos:line="247" pos:column="25"/></name></expr>)<pos:position pos:line="247" pos:column="26"/></condition><then pos:line="247" pos:column="26">
			<block type="pseudo"><expr_stmt><expr><call><name pos:line="248" pos:column="25">strbuf_trim<pos:position pos:line="248" pos:column="36"/></name><argument_list pos:line="248" pos:column="36">(<argument><expr><name pos:line="248" pos:column="37">sb<pos:position pos:line="248" pos:column="39"/></name></expr></argument>)<pos:position pos:line="248" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="248" pos:column="41"/></expr_stmt></block></then></if>

		<return pos:line="250" pos:column="17">return <expr><name><name pos:line="250" pos:column="24">sb<pos:position pos:line="250" pos:column="26"/></name><operator pos:line="250" pos:column="26">-&gt;<pos:position pos:line="250" pos:column="31"/></operator><name pos:line="250" pos:column="28">len<pos:position pos:line="250" pos:column="31"/></name></name></expr>;<pos:position pos:line="250" pos:column="32"/></return>
	}<pos:position pos:line="251" pos:column="10"/></block></then></if>

	<if pos:line="253" pos:column="9">if <condition pos:line="253" pos:column="12">(<expr><name pos:line="253" pos:column="13">errno<pos:position pos:line="253" pos:column="18"/></name> <operator pos:line="253" pos:column="19">==<pos:position pos:line="253" pos:column="21"/></operator> <name pos:line="253" pos:column="22">ENOENT<pos:position pos:line="253" pos:column="28"/></name></expr>)<pos:position pos:line="253" pos:column="29"/></condition><then pos:line="253" pos:column="29">
		<block type="pseudo"><return pos:line="254" pos:column="17">return <expr><operator pos:line="254" pos:column="24">-<pos:position pos:line="254" pos:column="25"/></operator><literal type="number" pos:line="254" pos:column="25">1<pos:position pos:line="254" pos:column="26"/></literal></expr>;<pos:position pos:line="254" pos:column="27"/></return></block></then></if>

	<expr_stmt><expr><call><name pos:line="256" pos:column="9">die_errno<pos:position pos:line="256" pos:column="18"/></name><argument_list pos:line="256" pos:column="18">(<argument><expr><call><name pos:line="256" pos:column="19">_<pos:position pos:line="256" pos:column="20"/></name><argument_list pos:line="256" pos:column="20">(<argument><expr><literal type="string" pos:line="256" pos:column="21">"could not read '%s'"<pos:position pos:line="256" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="256" pos:column="43"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="256" pos:column="45">am_path<pos:position pos:line="256" pos:column="52"/></name><argument_list pos:line="256" pos:column="52">(<argument><expr><name pos:line="256" pos:column="53">state<pos:position pos:line="256" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="256" pos:column="60">file<pos:position pos:line="256" pos:column="64"/></name></expr></argument>)<pos:position pos:line="256" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="256" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="67"/></expr_stmt>
}<pos:position pos:line="257" pos:column="2"/></block></function>

