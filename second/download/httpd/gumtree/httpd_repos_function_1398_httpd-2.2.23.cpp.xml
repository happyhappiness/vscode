<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1398_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">long<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">get_chunk_size<pos:position pos:line="1" pos:column="27"/></name><parameter_list pos:line="1" pos:column="27">(<parameter><decl><type><name pos:line="1" pos:column="28">char<pos:position pos:line="1" pos:column="32"/></name> <modifier pos:line="1" pos:column="33">*<pos:position pos:line="1" pos:column="34"/></modifier></type><name pos:line="1" pos:column="34">b<pos:position pos:line="1" pos:column="35"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="36"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">long<pos:position pos:line="3" pos:column="9"/></name></type> <name pos:line="3" pos:column="10">chunksize<pos:position pos:line="3" pos:column="19"/></name> <init pos:line="3" pos:column="20">= <expr><literal type="number" pos:line="3" pos:column="22">0<pos:position pos:line="3" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">size_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">chunkbits<pos:position pos:line="4" pos:column="21"/></name> <init pos:line="4" pos:column="22">= <expr><sizeof pos:line="4" pos:column="24">sizeof<argument_list pos:line="4" pos:column="30">(<argument><expr><name pos:line="4" pos:column="31">long<pos:position pos:line="4" pos:column="35"/></name></expr></argument>)<pos:position pos:line="4" pos:column="36"/></argument_list></sizeof> <operator pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></operator> <literal type="number" pos:line="4" pos:column="39">8<pos:position pos:line="4" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="41"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="6" pos:column="5">ap_xlate_proto_from_ascii<pos:position pos:line="6" pos:column="30"/></name><argument_list pos:line="6" pos:column="30">(<argument><expr><name pos:line="6" pos:column="31">b<pos:position pos:line="6" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="34">strlen<pos:position pos:line="6" pos:column="40"/></name><argument_list pos:line="6" pos:column="40">(<argument><expr><name pos:line="6" pos:column="41">b<pos:position pos:line="6" pos:column="42"/></name></expr></argument>)<pos:position pos:line="6" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="6" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="45"/></expr_stmt>

    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><operator pos:line="8" pos:column="9">!<pos:position pos:line="8" pos:column="10"/></operator><call><name pos:line="8" pos:column="10">apr_isxdigit<pos:position pos:line="8" pos:column="22"/></name><argument_list pos:line="8" pos:column="22">(<argument><expr><operator pos:line="8" pos:column="23">*<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="24">b<pos:position pos:line="8" pos:column="25"/></name></expr></argument>)<pos:position pos:line="8" pos:column="26"/></argument_list></call></expr>)<pos:position pos:line="8" pos:column="27"/></condition><then pos:line="8" pos:column="27"> <block pos:line="8" pos:column="28">{
        <comment type="block" pos:line="9" pos:column="9">/*
         * Detect invalid character at beginning. This also works for empty
         * chunk size lines.
         */</comment>
        <return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">INVALID_CHAR<pos:position pos:line="13" pos:column="28"/></name></expr>;<pos:position pos:line="13" pos:column="29"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="15" pos:column="5">/* Skip leading zeros */</comment>
    <while pos:line="16" pos:column="5">while <condition pos:line="16" pos:column="11">(<expr><operator pos:line="16" pos:column="12">*<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">b<pos:position pos:line="16" pos:column="14"/></name> <operator pos:line="16" pos:column="15">==<pos:position pos:line="16" pos:column="17"/></operator> <literal type="char" pos:line="16" pos:column="18">'0'<pos:position pos:line="16" pos:column="21"/></literal></expr>)<pos:position pos:line="16" pos:column="22"/></condition> <block pos:line="16" pos:column="23">{
        <expr_stmt><expr><operator pos:line="17" pos:column="9">++<pos:position pos:line="17" pos:column="11"/></operator><name pos:line="17" pos:column="11">b<pos:position pos:line="17" pos:column="12"/></name></expr>;<pos:position pos:line="17" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></while>

    <while pos:line="20" pos:column="5">while <condition pos:line="20" pos:column="11">(<expr><call><name pos:line="20" pos:column="12">apr_isxdigit<pos:position pos:line="20" pos:column="24"/></name><argument_list pos:line="20" pos:column="24">(<argument><expr><operator pos:line="20" pos:column="25">*<pos:position pos:line="20" pos:column="26"/></operator><name pos:line="20" pos:column="26">b<pos:position pos:line="20" pos:column="27"/></name></expr></argument>)<pos:position pos:line="20" pos:column="28"/></argument_list></call> <operator pos:line="20" pos:column="29">&amp;&amp;<pos:position pos:line="20" pos:column="39"/></operator> <operator pos:line="20" pos:column="32">(<pos:position pos:line="20" pos:column="33"/></operator><name pos:line="20" pos:column="33">chunkbits<pos:position pos:line="20" pos:column="42"/></name> <operator pos:line="20" pos:column="43">&gt;<pos:position pos:line="20" pos:column="47"/></operator> <literal type="number" pos:line="20" pos:column="45">0<pos:position pos:line="20" pos:column="46"/></literal><operator pos:line="20" pos:column="46">)<pos:position pos:line="20" pos:column="47"/></operator></expr>)<pos:position pos:line="20" pos:column="48"/></condition> <block pos:line="20" pos:column="49">{
        <decl_stmt><decl><type><name pos:line="21" pos:column="9">int<pos:position pos:line="21" pos:column="12"/></name></type> <name pos:line="21" pos:column="13">xvalue<pos:position pos:line="21" pos:column="19"/></name> <init pos:line="21" pos:column="20">= <expr><literal type="number" pos:line="21" pos:column="22">0<pos:position pos:line="21" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="24"/></decl_stmt>

        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><operator pos:line="23" pos:column="13">*<pos:position pos:line="23" pos:column="14"/></operator><name pos:line="23" pos:column="14">b<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">&gt;=<pos:position pos:line="23" pos:column="21"/></operator> <literal type="char" pos:line="23" pos:column="19">'0'<pos:position pos:line="23" pos:column="22"/></literal> <operator pos:line="23" pos:column="23">&amp;&amp;<pos:position pos:line="23" pos:column="33"/></operator> <operator pos:line="23" pos:column="26">*<pos:position pos:line="23" pos:column="27"/></operator><name pos:line="23" pos:column="27">b<pos:position pos:line="23" pos:column="28"/></name> <operator pos:line="23" pos:column="29">&lt;=<pos:position pos:line="23" pos:column="34"/></operator> <literal type="char" pos:line="23" pos:column="32">'9'<pos:position pos:line="23" pos:column="35"/></literal></expr>)<pos:position pos:line="23" pos:column="36"/></condition><then pos:line="23" pos:column="36"> <block pos:line="23" pos:column="37">{
            <expr_stmt><expr><name pos:line="24" pos:column="13">xvalue<pos:position pos:line="24" pos:column="19"/></name> <operator pos:line="24" pos:column="20">=<pos:position pos:line="24" pos:column="21"/></operator> <operator pos:line="24" pos:column="22">*<pos:position pos:line="24" pos:column="23"/></operator><name pos:line="24" pos:column="23">b<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">-<pos:position pos:line="24" pos:column="26"/></operator> <literal type="char" pos:line="24" pos:column="27">'0'<pos:position pos:line="24" pos:column="30"/></literal></expr>;<pos:position pos:line="24" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="25" pos:column="10"/></block></then>
        <elseif pos:line="26" pos:column="9">else <if pos:line="26" pos:column="14">if <condition pos:line="26" pos:column="17">(<expr><operator pos:line="26" pos:column="18">*<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">b<pos:position pos:line="26" pos:column="20"/></name> <operator pos:line="26" pos:column="21">&gt;=<pos:position pos:line="26" pos:column="26"/></operator> <literal type="char" pos:line="26" pos:column="24">'A'<pos:position pos:line="26" pos:column="27"/></literal> <operator pos:line="26" pos:column="28">&amp;&amp;<pos:position pos:line="26" pos:column="38"/></operator> <operator pos:line="26" pos:column="31">*<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="32">b<pos:position pos:line="26" pos:column="33"/></name> <operator pos:line="26" pos:column="34">&lt;=<pos:position pos:line="26" pos:column="39"/></operator> <literal type="char" pos:line="26" pos:column="37">'F'<pos:position pos:line="26" pos:column="40"/></literal></expr>)<pos:position pos:line="26" pos:column="41"/></condition><then pos:line="26" pos:column="41"> <block pos:line="26" pos:column="42">{
            <expr_stmt><expr><name pos:line="27" pos:column="13">xvalue<pos:position pos:line="27" pos:column="19"/></name> <operator pos:line="27" pos:column="20">=<pos:position pos:line="27" pos:column="21"/></operator> <operator pos:line="27" pos:column="22">*<pos:position pos:line="27" pos:column="23"/></operator><name pos:line="27" pos:column="23">b<pos:position pos:line="27" pos:column="24"/></name> <operator pos:line="27" pos:column="25">-<pos:position pos:line="27" pos:column="26"/></operator> <literal type="char" pos:line="27" pos:column="27">'A'<pos:position pos:line="27" pos:column="30"/></literal> <operator pos:line="27" pos:column="31">+<pos:position pos:line="27" pos:column="32"/></operator> <literal type="number" pos:line="27" pos:column="33">0xa<pos:position pos:line="27" pos:column="36"/></literal></expr>;<pos:position pos:line="27" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="28" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="29" pos:column="9">else <if pos:line="29" pos:column="14">if <condition pos:line="29" pos:column="17">(<expr><operator pos:line="29" pos:column="18">*<pos:position pos:line="29" pos:column="19"/></operator><name pos:line="29" pos:column="19">b<pos:position pos:line="29" pos:column="20"/></name> <operator pos:line="29" pos:column="21">&gt;=<pos:position pos:line="29" pos:column="26"/></operator> <literal type="char" pos:line="29" pos:column="24">'a'<pos:position pos:line="29" pos:column="27"/></literal> <operator pos:line="29" pos:column="28">&amp;&amp;<pos:position pos:line="29" pos:column="38"/></operator> <operator pos:line="29" pos:column="31">*<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="32">b<pos:position pos:line="29" pos:column="33"/></name> <operator pos:line="29" pos:column="34">&lt;=<pos:position pos:line="29" pos:column="39"/></operator> <literal type="char" pos:line="29" pos:column="37">'f'<pos:position pos:line="29" pos:column="40"/></literal></expr>)<pos:position pos:line="29" pos:column="41"/></condition><then pos:line="29" pos:column="41"> <block pos:line="29" pos:column="42">{
            <expr_stmt><expr><name pos:line="30" pos:column="13">xvalue<pos:position pos:line="30" pos:column="19"/></name> <operator pos:line="30" pos:column="20">=<pos:position pos:line="30" pos:column="21"/></operator> <operator pos:line="30" pos:column="22">*<pos:position pos:line="30" pos:column="23"/></operator><name pos:line="30" pos:column="23">b<pos:position pos:line="30" pos:column="24"/></name> <operator pos:line="30" pos:column="25">-<pos:position pos:line="30" pos:column="26"/></operator> <literal type="char" pos:line="30" pos:column="27">'a'<pos:position pos:line="30" pos:column="30"/></literal> <operator pos:line="30" pos:column="31">+<pos:position pos:line="30" pos:column="32"/></operator> <literal type="number" pos:line="30" pos:column="33">0xa<pos:position pos:line="30" pos:column="36"/></literal></expr>;<pos:position pos:line="30" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="31" pos:column="10"/></block></then></if></elseif></if>

        <expr_stmt><expr><name pos:line="33" pos:column="9">chunksize<pos:position pos:line="33" pos:column="18"/></name> <operator pos:line="33" pos:column="19">=<pos:position pos:line="33" pos:column="20"/></operator> <operator pos:line="33" pos:column="21">(<pos:position pos:line="33" pos:column="22"/></operator><name pos:line="33" pos:column="22">chunksize<pos:position pos:line="33" pos:column="31"/></name> <operator pos:line="33" pos:column="32">&lt;&lt;<pos:position pos:line="33" pos:column="40"/></operator> <literal type="number" pos:line="33" pos:column="35">4<pos:position pos:line="33" pos:column="36"/></literal><operator pos:line="33" pos:column="36">)<pos:position pos:line="33" pos:column="37"/></operator> <operator pos:line="33" pos:column="38">|<pos:position pos:line="33" pos:column="39"/></operator> <name pos:line="33" pos:column="40">xvalue<pos:position pos:line="33" pos:column="46"/></name></expr>;<pos:position pos:line="33" pos:column="47"/></expr_stmt>
        <expr_stmt><expr><name pos:line="34" pos:column="9">chunkbits<pos:position pos:line="34" pos:column="18"/></name> <operator pos:line="34" pos:column="19">-=<pos:position pos:line="34" pos:column="21"/></operator> <literal type="number" pos:line="34" pos:column="22">4<pos:position pos:line="34" pos:column="23"/></literal></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="35" pos:column="9">++<pos:position pos:line="35" pos:column="11"/></operator><name pos:line="35" pos:column="11">b<pos:position pos:line="35" pos:column="12"/></name></expr>;<pos:position pos:line="35" pos:column="13"/></expr_stmt>
    }<pos:position pos:line="36" pos:column="6"/></block></while>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><call><name pos:line="37" pos:column="9">apr_isxdigit<pos:position pos:line="37" pos:column="21"/></name><argument_list pos:line="37" pos:column="21">(<argument><expr><operator pos:line="37" pos:column="22">*<pos:position pos:line="37" pos:column="23"/></operator><name pos:line="37" pos:column="23">b<pos:position pos:line="37" pos:column="24"/></name></expr></argument>)<pos:position pos:line="37" pos:column="25"/></argument_list></call> <operator pos:line="37" pos:column="26">&amp;&amp;<pos:position pos:line="37" pos:column="36"/></operator> <operator pos:line="37" pos:column="29">(<pos:position pos:line="37" pos:column="30"/></operator><name pos:line="37" pos:column="30">chunkbits<pos:position pos:line="37" pos:column="39"/></name> <operator pos:line="37" pos:column="40">&lt;=<pos:position pos:line="37" pos:column="45"/></operator> <literal type="number" pos:line="37" pos:column="43">0<pos:position pos:line="37" pos:column="44"/></literal><operator pos:line="37" pos:column="44">)<pos:position pos:line="37" pos:column="45"/></operator></expr>)<pos:position pos:line="37" pos:column="46"/></condition><then pos:line="37" pos:column="46"> <block pos:line="37" pos:column="47">{
        <comment type="block" pos:line="38" pos:column="9">/* overflow */</comment>
        <return pos:line="39" pos:column="9">return <expr><operator pos:line="39" pos:column="16">-<pos:position pos:line="39" pos:column="17"/></operator><literal type="number" pos:line="39" pos:column="17">1<pos:position pos:line="39" pos:column="18"/></literal></expr>;<pos:position pos:line="39" pos:column="19"/></return>
    }<pos:position pos:line="40" pos:column="6"/></block></then></if>

    <return pos:line="42" pos:column="5">return <expr><name pos:line="42" pos:column="12">chunksize<pos:position pos:line="42" pos:column="21"/></name></expr>;<pos:position pos:line="42" pos:column="22"/></return>
}<pos:position pos:line="43" pos:column="2"/></block></function></unit>
