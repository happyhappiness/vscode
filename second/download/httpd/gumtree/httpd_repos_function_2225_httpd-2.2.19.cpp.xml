<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2225_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">set_allow2f<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">cmd_parms<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">cmd<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">void<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">d_<pos:position pos:line="1" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="58">const<pos:position pos:line="1" pos:column="63"/></specifier> <name pos:line="1" pos:column="64">char<pos:position pos:line="1" pos:column="68"/></name> <modifier pos:line="1" pos:column="69">*<pos:position pos:line="1" pos:column="70"/></modifier></type><name pos:line="1" pos:column="70">arg<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="74"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">core_dir_config<pos:position pos:line="3" pos:column="20"/></name> <modifier pos:line="3" pos:column="21">*<pos:position pos:line="3" pos:column="22"/></modifier></type><name pos:line="3" pos:column="22">d<pos:position pos:line="3" pos:column="23"/></name> <init pos:line="3" pos:column="24">= <expr><name pos:line="3" pos:column="26">d_<pos:position pos:line="3" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">err<pos:position pos:line="4" pos:column="20"/></name> <init pos:line="4" pos:column="21">= <expr><call><name pos:line="4" pos:column="23">ap_check_cmd_context<pos:position pos:line="4" pos:column="43"/></name><argument_list pos:line="4" pos:column="43">(<argument><expr><name pos:line="4" pos:column="44">cmd<pos:position pos:line="4" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="4" pos:column="49">NOT_IN_LIMIT<pos:position pos:line="4" pos:column="61"/></name></expr></argument>)<pos:position pos:line="4" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="63"/></decl_stmt>

    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name pos:line="6" pos:column="9">err<pos:position pos:line="6" pos:column="12"/></name> <operator pos:line="6" pos:column="13">!=<pos:position pos:line="6" pos:column="15"/></operator> <name pos:line="6" pos:column="16">NULL<pos:position pos:line="6" pos:column="20"/></name></expr>)<pos:position pos:line="6" pos:column="21"/></condition><then pos:line="6" pos:column="21"> <block pos:line="6" pos:column="22">{
        <return pos:line="7" pos:column="9">return <expr><name pos:line="7" pos:column="16">err<pos:position pos:line="7" pos:column="19"/></name></expr>;<pos:position pos:line="7" pos:column="20"/></return>
    }<pos:position pos:line="8" pos:column="6"/></block></then></if>

    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><literal type="number" pos:line="10" pos:column="9">0<pos:position pos:line="10" pos:column="10"/></literal> <operator pos:line="10" pos:column="11">==<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">strcasecmp<pos:position pos:line="10" pos:column="24"/></name><argument_list pos:line="10" pos:column="24">(<argument><expr><name pos:line="10" pos:column="25">arg<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="10" pos:column="30">"on"<pos:position pos:line="10" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="10" pos:column="36"/></condition><then pos:line="10" pos:column="36"> <block pos:line="10" pos:column="37">{
        <expr_stmt><expr><name><name pos:line="11" pos:column="9">d<pos:position pos:line="11" pos:column="10"/></name><operator pos:line="11" pos:column="10">-&gt;<pos:position pos:line="11" pos:column="15"/></operator><name pos:line="11" pos:column="12">allow_encoded_slashes<pos:position pos:line="11" pos:column="33"/></name></name> <operator pos:line="11" pos:column="34">=<pos:position pos:line="11" pos:column="35"/></operator> <literal type="number" pos:line="11" pos:column="36">1<pos:position pos:line="11" pos:column="37"/></literal></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="12" pos:column="9">d<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">-&gt;<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="12">decode_encoded_slashes<pos:position pos:line="12" pos:column="34"/></name></name> <operator pos:line="12" pos:column="35">=<pos:position pos:line="12" pos:column="36"/></operator> <literal type="number" pos:line="12" pos:column="37">1<pos:position pos:line="12" pos:column="38"/></literal></expr>;<pos:position pos:line="12" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then> <elseif pos:line="13" pos:column="7">else <if pos:line="13" pos:column="12">if <condition pos:line="13" pos:column="15">(<expr><literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal> <operator pos:line="13" pos:column="18">==<pos:position pos:line="13" pos:column="20"/></operator> <call><name pos:line="13" pos:column="21">strcasecmp<pos:position pos:line="13" pos:column="31"/></name><argument_list pos:line="13" pos:column="31">(<argument><expr><name pos:line="13" pos:column="32">arg<pos:position pos:line="13" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="37">"off"<pos:position pos:line="13" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="44"/></condition><then pos:line="13" pos:column="44"> <block pos:line="13" pos:column="45">{
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">d<pos:position pos:line="14" pos:column="10"/></name><operator pos:line="14" pos:column="10">-&gt;<pos:position pos:line="14" pos:column="15"/></operator><name pos:line="14" pos:column="12">allow_encoded_slashes<pos:position pos:line="14" pos:column="33"/></name></name> <operator pos:line="14" pos:column="34">=<pos:position pos:line="14" pos:column="35"/></operator> <literal type="number" pos:line="14" pos:column="36">0<pos:position pos:line="14" pos:column="37"/></literal></expr>;<pos:position pos:line="14" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">d<pos:position pos:line="15" pos:column="10"/></name><operator pos:line="15" pos:column="10">-&gt;<pos:position pos:line="15" pos:column="15"/></operator><name pos:line="15" pos:column="12">decode_encoded_slashes<pos:position pos:line="15" pos:column="34"/></name></name> <operator pos:line="15" pos:column="35">=<pos:position pos:line="15" pos:column="36"/></operator> <literal type="number" pos:line="15" pos:column="37">0<pos:position pos:line="15" pos:column="38"/></literal></expr>;<pos:position pos:line="15" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="16" pos:column="6"/></block></then></if></elseif> <elseif pos:line="16" pos:column="7">else <if pos:line="16" pos:column="12">if <condition pos:line="16" pos:column="15">(<expr><literal type="number" pos:line="16" pos:column="16">0<pos:position pos:line="16" pos:column="17"/></literal> <operator pos:line="16" pos:column="18">==<pos:position pos:line="16" pos:column="20"/></operator> <call><name pos:line="16" pos:column="21">strcasecmp<pos:position pos:line="16" pos:column="31"/></name><argument_list pos:line="16" pos:column="31">(<argument><expr><name pos:line="16" pos:column="32">arg<pos:position pos:line="16" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="37">"nodecode"<pos:position pos:line="16" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="49"/></condition><then pos:line="16" pos:column="49"> <block pos:line="16" pos:column="50">{
        <expr_stmt><expr><name><name pos:line="17" pos:column="9">d<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">allow_encoded_slashes<pos:position pos:line="17" pos:column="33"/></name></name> <operator pos:line="17" pos:column="34">=<pos:position pos:line="17" pos:column="35"/></operator> <literal type="number" pos:line="17" pos:column="36">1<pos:position pos:line="17" pos:column="37"/></literal></expr>;<pos:position pos:line="17" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="18" pos:column="9">d<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">-&gt;<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="12">decode_encoded_slashes<pos:position pos:line="18" pos:column="34"/></name></name> <operator pos:line="18" pos:column="35">=<pos:position pos:line="18" pos:column="36"/></operator> <literal type="number" pos:line="18" pos:column="37">0<pos:position pos:line="18" pos:column="38"/></literal></expr>;<pos:position pos:line="18" pos:column="39"/></expr_stmt>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if></elseif> <else pos:line="19" pos:column="7">else <block pos:line="19" pos:column="12">{
        <return pos:line="20" pos:column="9">return <expr><call><name pos:line="20" pos:column="16">apr_pstrcat<pos:position pos:line="20" pos:column="27"/></name><argument_list pos:line="20" pos:column="27">(<argument><expr><name><name pos:line="20" pos:column="28">cmd<pos:position pos:line="20" pos:column="31"/></name><operator pos:line="20" pos:column="31">-&gt;<pos:position pos:line="20" pos:column="36"/></operator><name pos:line="20" pos:column="33">pool<pos:position pos:line="20" pos:column="37"/></name></name></expr></argument>,
                           <argument><expr><name><name pos:line="21" pos:column="28">cmd<pos:position pos:line="21" pos:column="31"/></name><operator pos:line="21" pos:column="31">-&gt;<pos:position pos:line="21" pos:column="36"/></operator><name pos:line="21" pos:column="33">cmd<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">-&gt;<pos:position pos:line="21" pos:column="41"/></operator><name pos:line="21" pos:column="38">name<pos:position pos:line="21" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="44">" must be On, Off, or NoDecode"<pos:position pos:line="21" pos:column="75"/></literal></expr></argument>,
                           <argument><expr><name pos:line="22" pos:column="28">NULL<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></else></if>
    <return pos:line="24" pos:column="5">return <expr><name pos:line="24" pos:column="12">NULL<pos:position pos:line="24" pos:column="16"/></name></expr>;<pos:position pos:line="24" pos:column="17"/></return>
}<pos:position pos:line="25" pos:column="2"/></block></function></unit>
