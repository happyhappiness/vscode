<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2463_httpd-2.2.16.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">ap_queue_info_wait_for_idler<pos:position pos:line="1" pos:column="42"/></name><parameter_list pos:line="1" pos:column="42">(<parameter><decl><type><name pos:line="1" pos:column="43">fd_queue_info_t<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">queue_info<pos:position pos:line="1" pos:column="70"/></name></decl></parameter>,
                                          <parameter><decl><type><name pos:line="2" pos:column="43">apr_pool_t<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier><modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier></type><name pos:line="2" pos:column="56">recycled_pool<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><operator pos:line="6" pos:column="5">*<pos:position pos:line="6" pos:column="6"/></operator><name pos:line="6" pos:column="6">recycled_pool<pos:position pos:line="6" pos:column="19"/></name> <operator pos:line="6" pos:column="20">=<pos:position pos:line="6" pos:column="21"/></operator> <name pos:line="6" pos:column="22">NULL<pos:position pos:line="6" pos:column="26"/></name></expr>;<pos:position pos:line="6" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* Block if the count of idle workers is zero */</comment>
    <if pos:line="9" pos:column="5">if <condition pos:line="9" pos:column="8">(<expr><name><name pos:line="9" pos:column="9">queue_info<pos:position pos:line="9" pos:column="19"/></name><operator pos:line="9" pos:column="19">-&gt;<pos:position pos:line="9" pos:column="24"/></operator><name pos:line="9" pos:column="21">idlers<pos:position pos:line="9" pos:column="27"/></name></name> <operator pos:line="9" pos:column="28">==<pos:position pos:line="9" pos:column="30"/></operator> <literal type="number" pos:line="9" pos:column="31">0<pos:position pos:line="9" pos:column="32"/></literal></expr>)<pos:position pos:line="9" pos:column="33"/></condition><then pos:line="9" pos:column="33"> <block pos:line="9" pos:column="34">{
        <expr_stmt><expr><name pos:line="10" pos:column="9">rv<pos:position pos:line="10" pos:column="11"/></name> <operator pos:line="10" pos:column="12">=<pos:position pos:line="10" pos:column="13"/></operator> <call><name pos:line="10" pos:column="14">apr_thread_mutex_lock<pos:position pos:line="10" pos:column="35"/></name><argument_list pos:line="10" pos:column="35">(<argument><expr><name><name pos:line="10" pos:column="36">queue_info<pos:position pos:line="10" pos:column="46"/></name><operator pos:line="10" pos:column="46">-&gt;<pos:position pos:line="10" pos:column="51"/></operator><name pos:line="10" pos:column="48">idlers_mutex<pos:position pos:line="10" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="62"/></expr_stmt>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><name pos:line="11" pos:column="13">rv<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">!=<pos:position pos:line="11" pos:column="18"/></operator> <name pos:line="11" pos:column="19">APR_SUCCESS<pos:position pos:line="11" pos:column="30"/></name></expr>)<pos:position pos:line="11" pos:column="31"/></condition><then pos:line="11" pos:column="31"> <block pos:line="11" pos:column="32">{
            <return pos:line="12" pos:column="13">return <expr><name pos:line="12" pos:column="20">rv<pos:position pos:line="12" pos:column="22"/></name></expr>;<pos:position pos:line="12" pos:column="23"/></return>
        }<pos:position pos:line="13" pos:column="10"/></block></then></if>
        <comment type="block" pos:line="14" pos:column="9">/* Re-check the idle worker count to guard against a
         * race condition.  Now that we're in the mutex-protected
         * region, one of two things may have happened:
         *   - If the idle worker count is still zero, the
         *     workers are all still busy, so it's safe to
         *     block on a condition variable, BUT
         *     we need to check for idle worker count again
         *     when we are signaled since it can happen that
         *     we are signaled by a worker thread that went idle
         *     but received a context switch before it could
         *     tell us. If it does signal us later once it is on
         *     CPU again there might be no idle worker left.
         *     See
         *     https://issues.apache.org/bugzilla/show_bug.cgi?id=45605#c4
         *   - If the idle worker count is nonzero, then a
         *     worker has become idle since the first check
         *     of queue_info-&gt;idlers above.  It's possible
         *     that the worker has also signaled the condition
         *     variable--and if so, the listener missed it
         *     because it wasn't yet blocked on the condition
         *     variable.  But if the idle worker count is
         *     now nonzero, it's safe for this function to
         *     return immediately.
         */</comment>
        <while pos:line="38" pos:column="9">while <condition pos:line="38" pos:column="15">(<expr><name><name pos:line="38" pos:column="16">queue_info<pos:position pos:line="38" pos:column="26"/></name><operator pos:line="38" pos:column="26">-&gt;<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="28">idlers<pos:position pos:line="38" pos:column="34"/></name></name> <operator pos:line="38" pos:column="35">==<pos:position pos:line="38" pos:column="37"/></operator> <literal type="number" pos:line="38" pos:column="38">0<pos:position pos:line="38" pos:column="39"/></literal></expr>)<pos:position pos:line="38" pos:column="40"/></condition> <block pos:line="38" pos:column="41">{
            <expr_stmt><expr><name pos:line="39" pos:column="13">rv<pos:position pos:line="39" pos:column="15"/></name> <operator pos:line="39" pos:column="16">=<pos:position pos:line="39" pos:column="17"/></operator> <call><name pos:line="39" pos:column="18">apr_thread_cond_wait<pos:position pos:line="39" pos:column="38"/></name><argument_list pos:line="39" pos:column="38">(<argument><expr><name><name pos:line="39" pos:column="39">queue_info<pos:position pos:line="39" pos:column="49"/></name><operator pos:line="39" pos:column="49">-&gt;<pos:position pos:line="39" pos:column="54"/></operator><name pos:line="39" pos:column="51">wait_for_idler<pos:position pos:line="39" pos:column="65"/></name></name></expr></argument>,
                                  <argument><expr><name><name pos:line="40" pos:column="35">queue_info<pos:position pos:line="40" pos:column="45"/></name><operator pos:line="40" pos:column="45">-&gt;<pos:position pos:line="40" pos:column="50"/></operator><name pos:line="40" pos:column="47">idlers_mutex<pos:position pos:line="40" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="61"/></expr_stmt>
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><name pos:line="41" pos:column="17">rv<pos:position pos:line="41" pos:column="19"/></name> <operator pos:line="41" pos:column="20">!=<pos:position pos:line="41" pos:column="22"/></operator> <name pos:line="41" pos:column="23">APR_SUCCESS<pos:position pos:line="41" pos:column="34"/></name></expr>)<pos:position pos:line="41" pos:column="35"/></condition><then pos:line="41" pos:column="35"> <block pos:line="41" pos:column="36">{
                <decl_stmt><decl><type><name pos:line="42" pos:column="17">apr_status_t<pos:position pos:line="42" pos:column="29"/></name></type> <name pos:line="42" pos:column="30">rv2<pos:position pos:line="42" pos:column="33"/></name></decl>;<pos:position pos:line="42" pos:column="34"/></decl_stmt>
                <expr_stmt><expr><name pos:line="43" pos:column="17">rv2<pos:position pos:line="43" pos:column="20"/></name> <operator pos:line="43" pos:column="21">=<pos:position pos:line="43" pos:column="22"/></operator> <call><name pos:line="43" pos:column="23">apr_thread_mutex_unlock<pos:position pos:line="43" pos:column="46"/></name><argument_list pos:line="43" pos:column="46">(<argument><expr><name><name pos:line="43" pos:column="47">queue_info<pos:position pos:line="43" pos:column="57"/></name><operator pos:line="43" pos:column="57">-&gt;<pos:position pos:line="43" pos:column="62"/></operator><name pos:line="43" pos:column="59">idlers_mutex<pos:position pos:line="43" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="43" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="73"/></expr_stmt>
                <if pos:line="44" pos:column="17">if <condition pos:line="44" pos:column="20">(<expr><name pos:line="44" pos:column="21">rv2<pos:position pos:line="44" pos:column="24"/></name> <operator pos:line="44" pos:column="25">!=<pos:position pos:line="44" pos:column="27"/></operator> <name pos:line="44" pos:column="28">APR_SUCCESS<pos:position pos:line="44" pos:column="39"/></name></expr>)<pos:position pos:line="44" pos:column="40"/></condition><then pos:line="44" pos:column="40"> <block pos:line="44" pos:column="41">{
                    <return pos:line="45" pos:column="21">return <expr><name pos:line="45" pos:column="28">rv2<pos:position pos:line="45" pos:column="31"/></name></expr>;<pos:position pos:line="45" pos:column="32"/></return>
                }<pos:position pos:line="46" pos:column="18"/></block></then></if>
                <return pos:line="47" pos:column="17">return <expr><name pos:line="47" pos:column="24">rv<pos:position pos:line="47" pos:column="26"/></name></expr>;<pos:position pos:line="47" pos:column="27"/></return>
            }<pos:position pos:line="48" pos:column="14"/></block></then></if>
        }<pos:position pos:line="49" pos:column="10"/></block></while>
        <expr_stmt><expr><name pos:line="50" pos:column="9">rv<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <call><name pos:line="50" pos:column="14">apr_thread_mutex_unlock<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name><name pos:line="50" pos:column="38">queue_info<pos:position pos:line="50" pos:column="48"/></name><operator pos:line="50" pos:column="48">-&gt;<pos:position pos:line="50" pos:column="53"/></operator><name pos:line="50" pos:column="50">idlers_mutex<pos:position pos:line="50" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="64"/></expr_stmt>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">rv<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">!=<pos:position pos:line="51" pos:column="18"/></operator> <name pos:line="51" pos:column="19">APR_SUCCESS<pos:position pos:line="51" pos:column="30"/></name></expr>)<pos:position pos:line="51" pos:column="31"/></condition><then pos:line="51" pos:column="31"> <block pos:line="51" pos:column="32">{
            <return pos:line="52" pos:column="13">return <expr><name pos:line="52" pos:column="20">rv<pos:position pos:line="52" pos:column="22"/></name></expr>;<pos:position pos:line="52" pos:column="23"/></return>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="56" pos:column="5">/* Atomically decrement the idle worker count */</comment>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">apr_atomic_dec32<pos:position pos:line="57" pos:column="21"/></name><argument_list pos:line="57" pos:column="21">(<argument><expr><operator pos:line="57" pos:column="22">&amp;<pos:position pos:line="57" pos:column="27"/></operator><operator pos:line="57" pos:column="23">(<pos:position pos:line="57" pos:column="24"/></operator><name><name pos:line="57" pos:column="24">queue_info<pos:position pos:line="57" pos:column="34"/></name><operator pos:line="57" pos:column="34">-&gt;<pos:position pos:line="57" pos:column="39"/></operator><name pos:line="57" pos:column="36">idlers<pos:position pos:line="57" pos:column="42"/></name></name><operator pos:line="57" pos:column="42">)<pos:position pos:line="57" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="57" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="45"/></expr_stmt>

    <comment type="block" pos:line="59" pos:column="5">/* Atomically pop a pool from the recycled list */</comment>

    <comment type="block" pos:line="61" pos:column="5">/* This function is safe only as long as it is single threaded because
     * it reaches into the queue and accesses "next" which can change.
     * We are OK today because it is only called from the listener thread.
     * cas-based pushes do not have the same limitation - any number can
     * happen concurrently with a single cas-based pop.
     */</comment>

    <for pos:line="68" pos:column="5">for <control pos:line="68" pos:column="9">(<init pos:line="68" pos:column="10">;<pos:position pos:line="68" pos:column="11"/></init><condition pos:line="68" pos:column="11">;<pos:position pos:line="68" pos:column="12"/></condition><incr/>)<pos:position pos:line="68" pos:column="13"/></control> <block pos:line="68" pos:column="14">{
        <decl_stmt><decl><type><name><name pos:line="69" pos:column="9">struct<pos:position pos:line="69" pos:column="15"/></name> <name pos:line="69" pos:column="16">recycled_pool<pos:position pos:line="69" pos:column="29"/></name></name> <modifier pos:line="69" pos:column="30">*<pos:position pos:line="69" pos:column="31"/></modifier></type><name pos:line="69" pos:column="31">first_pool<pos:position pos:line="69" pos:column="41"/></name> <init pos:line="69" pos:column="42">= <expr><name><name pos:line="69" pos:column="44">queue_info<pos:position pos:line="69" pos:column="54"/></name><operator pos:line="69" pos:column="54">-&gt;<pos:position pos:line="69" pos:column="59"/></operator><name pos:line="69" pos:column="56">recycled_pools<pos:position pos:line="69" pos:column="70"/></name></name></expr></init></decl>;<pos:position pos:line="69" pos:column="71"/></decl_stmt>
        <if pos:line="70" pos:column="9">if <condition pos:line="70" pos:column="12">(<expr><name pos:line="70" pos:column="13">first_pool<pos:position pos:line="70" pos:column="23"/></name> <operator pos:line="70" pos:column="24">==<pos:position pos:line="70" pos:column="26"/></operator> <name pos:line="70" pos:column="27">NULL<pos:position pos:line="70" pos:column="31"/></name></expr>)<pos:position pos:line="70" pos:column="32"/></condition><then pos:line="70" pos:column="32"> <block pos:line="70" pos:column="33">{
            <break pos:line="71" pos:column="13">break;<pos:position pos:line="71" pos:column="19"/></break>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>
        <if pos:line="73" pos:column="9">if <condition pos:line="73" pos:column="12">(<expr><call><name pos:line="73" pos:column="13">apr_atomic_casptr<pos:position pos:line="73" pos:column="30"/></name><argument_list pos:line="73" pos:column="30">(<argument><expr><operator pos:line="73" pos:column="31">(<pos:position pos:line="73" pos:column="32"/></operator><specifier pos:line="73" pos:column="32">volatile<pos:position pos:line="73" pos:column="40"/></specifier> <name pos:line="73" pos:column="41">void<pos:position pos:line="73" pos:column="45"/></name><operator pos:line="73" pos:column="45">*<pos:position pos:line="73" pos:column="46"/></operator><operator pos:line="73" pos:column="46">*<pos:position pos:line="73" pos:column="47"/></operator><operator pos:line="73" pos:column="47">)<pos:position pos:line="73" pos:column="48"/></operator><operator pos:line="73" pos:column="48">&amp;<pos:position pos:line="73" pos:column="53"/></operator><operator pos:line="73" pos:column="49">(<pos:position pos:line="73" pos:column="50"/></operator><name><name pos:line="73" pos:column="50">queue_info<pos:position pos:line="73" pos:column="60"/></name><operator pos:line="73" pos:column="60">-&gt;<pos:position pos:line="73" pos:column="65"/></operator><name pos:line="73" pos:column="62">recycled_pools<pos:position pos:line="73" pos:column="76"/></name></name><operator pos:line="73" pos:column="76">)<pos:position pos:line="73" pos:column="77"/></operator></expr></argument>, <argument><expr><name><name pos:line="73" pos:column="79">first_pool<pos:position pos:line="73" pos:column="89"/></name><operator pos:line="73" pos:column="89">-&gt;<pos:position pos:line="73" pos:column="94"/></operator><name pos:line="73" pos:column="91">next<pos:position pos:line="73" pos:column="95"/></name></name></expr></argument>,
                              <argument><expr><name pos:line="74" pos:column="31">first_pool<pos:position pos:line="74" pos:column="41"/></name></expr></argument>)<pos:position pos:line="74" pos:column="42"/></argument_list></call> <operator pos:line="74" pos:column="43">==<pos:position pos:line="74" pos:column="45"/></operator> <name pos:line="74" pos:column="46">first_pool<pos:position pos:line="74" pos:column="56"/></name></expr>)<pos:position pos:line="74" pos:column="57"/></condition><then pos:line="74" pos:column="57"> <block pos:line="74" pos:column="58">{
            <expr_stmt><expr><operator pos:line="75" pos:column="13">*<pos:position pos:line="75" pos:column="14"/></operator><name pos:line="75" pos:column="14">recycled_pool<pos:position pos:line="75" pos:column="27"/></name> <operator pos:line="75" pos:column="28">=<pos:position pos:line="75" pos:column="29"/></operator> <name><name pos:line="75" pos:column="30">first_pool<pos:position pos:line="75" pos:column="40"/></name><operator pos:line="75" pos:column="40">-&gt;<pos:position pos:line="75" pos:column="45"/></operator><name pos:line="75" pos:column="42">pool<pos:position pos:line="75" pos:column="46"/></name></name></expr>;<pos:position pos:line="75" pos:column="47"/></expr_stmt>
            <break pos:line="76" pos:column="13">break;<pos:position pos:line="76" pos:column="19"/></break>
        }<pos:position pos:line="77" pos:column="10"/></block></then></if>
    }<pos:position pos:line="78" pos:column="6"/></block></for>

    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><name><name pos:line="80" pos:column="9">queue_info<pos:position pos:line="80" pos:column="19"/></name><operator pos:line="80" pos:column="19">-&gt;<pos:position pos:line="80" pos:column="24"/></operator><name pos:line="80" pos:column="21">terminated<pos:position pos:line="80" pos:column="31"/></name></name></expr>)<pos:position pos:line="80" pos:column="32"/></condition><then pos:line="80" pos:column="32"> <block pos:line="80" pos:column="33">{
        <return pos:line="81" pos:column="9">return <expr><name pos:line="81" pos:column="16">APR_EOF<pos:position pos:line="81" pos:column="23"/></name></expr>;<pos:position pos:line="81" pos:column="24"/></return>
    }<pos:position pos:line="82" pos:column="6"/></block></then>
    <else pos:line="83" pos:column="5">else <block pos:line="83" pos:column="10">{
        <return pos:line="84" pos:column="9">return <expr><name pos:line="84" pos:column="16">APR_SUCCESS<pos:position pos:line="84" pos:column="27"/></name></expr>;<pos:position pos:line="84" pos:column="28"/></return>
    }<pos:position pos:line="85" pos:column="6"/></block></else></if>
}<pos:position pos:line="86" pos:column="2"/></block></function></unit>
