<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3531_httpd-2.2.17.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">proc_mutex_proc_pthread_tryacquire<pos:position pos:line="1" pos:column="55"/></name><parameter_list pos:line="1" pos:column="55">(<parameter><decl><type><name pos:line="1" pos:column="56">apr_proc_mutex_t<pos:position pos:line="1" pos:column="72"/></name> <modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">mutex<pos:position pos:line="1" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="80"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">rv<pos:position pos:line="3" pos:column="20"/></name></decl>;<pos:position pos:line="3" pos:column="21"/></decl_stmt>
 
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><operator pos:line="5" pos:column="9">(<pos:position pos:line="5" pos:column="10"/></operator><name pos:line="5" pos:column="10">rv<pos:position pos:line="5" pos:column="12"/></name> <operator pos:line="5" pos:column="13">=<pos:position pos:line="5" pos:column="14"/></operator> <call><name pos:line="5" pos:column="15">pthread_mutex_trylock<pos:position pos:line="5" pos:column="36"/></name><argument_list pos:line="5" pos:column="36">(<argument><expr><name><name pos:line="5" pos:column="37">mutex<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">-&gt;<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="44">pthread_interproc<pos:position pos:line="5" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="5" pos:column="62"/></argument_list></call><operator pos:line="5" pos:column="62">)<pos:position pos:line="5" pos:column="63"/></operator></expr>)<pos:position pos:line="5" pos:column="64"/></condition><then pos:line="5" pos:column="64"> <block pos:line="5" pos:column="65">{
<cpp:ifdef pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">ifdef<pos:position pos:line="6" pos:column="7"/></cpp:directive> <name pos:line="6" pos:column="8">HAVE_ZOS_PTHREADS<pos:position pos:line="6" pos:column="25"/></name></cpp:ifdef> 
        <expr_stmt><expr><name pos:line="7" pos:column="9">rv<pos:position pos:line="7" pos:column="11"/></name> <operator pos:line="7" pos:column="12">=<pos:position pos:line="7" pos:column="13"/></operator> <name pos:line="7" pos:column="14">errno<pos:position pos:line="7" pos:column="19"/></name></expr>;<pos:position pos:line="7" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">endif<pos:position pos:line="8" pos:column="7"/></cpp:directive></cpp:endif>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><name pos:line="9" pos:column="13">rv<pos:position pos:line="9" pos:column="15"/></name> <operator pos:line="9" pos:column="16">==<pos:position pos:line="9" pos:column="18"/></operator> <name pos:line="9" pos:column="19">EBUSY<pos:position pos:line="9" pos:column="24"/></name></expr>)<pos:position pos:line="9" pos:column="25"/></condition><then pos:line="9" pos:column="25"> <block pos:line="9" pos:column="26">{
            <return pos:line="10" pos:column="13">return <expr><name pos:line="10" pos:column="20">APR_EBUSY<pos:position pos:line="10" pos:column="29"/></name></expr>;<pos:position pos:line="10" pos:column="30"/></return>
        }<pos:position pos:line="11" pos:column="10"/></block></then></if>
<cpp:ifdef pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">ifdef<pos:position pos:line="12" pos:column="7"/></cpp:directive> <name pos:line="12" pos:column="8">HAVE_PTHREAD_MUTEX_ROBUST<pos:position pos:line="12" pos:column="33"/></name></cpp:ifdef>
        <comment type="block" pos:line="13" pos:column="9">/* Okay, our owner died.  Let's try to make it consistent again. */</comment>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">rv<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">==<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">EOWNERDEAD<pos:position pos:line="14" pos:column="29"/></name></expr>)<pos:position pos:line="14" pos:column="30"/></condition><then pos:line="14" pos:column="30"> <block pos:line="14" pos:column="31">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">pthread_mutex_consistent_np<pos:position pos:line="15" pos:column="40"/></name><argument_list pos:line="15" pos:column="40">(<argument><expr><name><name pos:line="15" pos:column="41">mutex<pos:position pos:line="15" pos:column="46"/></name><operator pos:line="15" pos:column="46">-&gt;<pos:position pos:line="15" pos:column="51"/></operator><name pos:line="15" pos:column="48">pthread_interproc<pos:position pos:line="15" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="15" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="67"/></expr_stmt>
            <expr_stmt><expr><name pos:line="16" pos:column="13">rv<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">=<pos:position pos:line="16" pos:column="17"/></operator> <name pos:line="16" pos:column="18">APR_SUCCESS<pos:position pos:line="16" pos:column="29"/></name></expr>;<pos:position pos:line="16" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="17" pos:column="10"/></block></then>
        <else pos:line="18" pos:column="9">else
            <block type="pseudo"><return pos:line="19" pos:column="13">return <expr><name pos:line="19" pos:column="20">rv<pos:position pos:line="19" pos:column="22"/></name></expr>;<pos:position pos:line="19" pos:column="23"/></return></block></else></if>
<cpp:else pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">else<pos:position pos:line="20" pos:column="6"/></cpp:directive></cpp:else>
        <return pos:line="21" pos:column="9">return <expr><name pos:line="21" pos:column="16">rv<pos:position pos:line="21" pos:column="18"/></name></expr>;<pos:position pos:line="21" pos:column="19"/></return>
<cpp:endif pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">endif<pos:position pos:line="22" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">mutex<pos:position pos:line="24" pos:column="10"/></name><operator pos:line="24" pos:column="10">-&gt;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="12">curr_locked<pos:position pos:line="24" pos:column="23"/></name></name> <operator pos:line="24" pos:column="24">=<pos:position pos:line="24" pos:column="25"/></operator> <literal type="number" pos:line="24" pos:column="26">1<pos:position pos:line="24" pos:column="27"/></literal></expr>;<pos:position pos:line="24" pos:column="28"/></expr_stmt>
    <return pos:line="25" pos:column="5">return <expr><name pos:line="25" pos:column="12">rv<pos:position pos:line="25" pos:column="14"/></name></expr>;<pos:position pos:line="25" pos:column="15"/></return>
}<pos:position pos:line="26" pos:column="2"/></block></function></unit>
