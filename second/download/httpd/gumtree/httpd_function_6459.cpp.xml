<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6459.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">input_read<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">h2_task<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">task<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">ap_filter_t<pos:position pos:line="1" pos:column="58"/></name><modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type> <name pos:line="1" pos:column="60">f<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="2" pos:column="32">apr_bucket_brigade<pos:position pos:line="2" pos:column="50"/></name><modifier pos:line="2" pos:column="50">*<pos:position pos:line="2" pos:column="51"/></modifier></type> <name pos:line="2" pos:column="52">bb<pos:position pos:line="2" pos:column="54"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="56">ap_input_mode_t<pos:position pos:line="2" pos:column="71"/></name></type> <name pos:line="2" pos:column="72">mode<pos:position pos:line="2" pos:column="76"/></name></decl></parameter>,
                               <parameter><decl><type><name pos:line="3" pos:column="32">apr_read_type_e<pos:position pos:line="3" pos:column="47"/></name></type> <name pos:line="3" pos:column="48">block<pos:position pos:line="3" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="55">apr_off_t<pos:position pos:line="3" pos:column="64"/></name></type> <name pos:line="3" pos:column="65">readbytes<pos:position pos:line="3" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="75"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">status<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><name pos:line="5" pos:column="27">APR_SUCCESS<pos:position pos:line="5" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="5" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_bucket<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">b<pos:position pos:line="6" pos:column="18"/></name></decl>, <modifier pos:line="6" pos:column="20">*<pos:position pos:line="6" pos:column="21"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="21">next<pos:position pos:line="6" pos:column="25"/></name></decl>, <modifier pos:line="6" pos:column="27">*<pos:position pos:line="6" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="28">first_data<pos:position pos:line="6" pos:column="38"/></name></decl>;<pos:position pos:line="6" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_off_t<pos:position pos:line="7" pos:column="14"/></name></type> <name pos:line="7" pos:column="15">bblen<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">ap_log_cerror<pos:position pos:line="9" pos:column="18"/></name><argument_list pos:line="9" pos:column="18">(<argument><expr><name pos:line="9" pos:column="19">APLOG_MARK<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="31">APLOG_TRACE1<pos:position pos:line="9" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="9" pos:column="45">0<pos:position pos:line="9" pos:column="46"/></literal></expr></argument>, <argument><expr><name><name pos:line="9" pos:column="48">f<pos:position pos:line="9" pos:column="49"/></name><operator pos:line="9" pos:column="49">-&gt;<pos:position pos:line="9" pos:column="54"/></operator><name pos:line="9" pos:column="51">c<pos:position pos:line="9" pos:column="52"/></name></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="10" pos:column="19">"h2_task(%s): read, mode=%d, block=%d, readbytes=%ld"<pos:position pos:line="10" pos:column="72"/></literal></expr></argument>, 
                  <argument><expr><name><name pos:line="11" pos:column="19">task<pos:position pos:line="11" pos:column="23"/></name><operator pos:line="11" pos:column="23">-&gt;<pos:position pos:line="11" pos:column="28"/></operator><name pos:line="11" pos:column="25">id<pos:position pos:line="11" pos:column="27"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="29">mode<pos:position pos:line="11" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="35">block<pos:position pos:line="11" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="11" pos:column="42">(<pos:position pos:line="11" pos:column="43"/></operator><name pos:line="11" pos:column="43">long<pos:position pos:line="11" pos:column="47"/></name><operator pos:line="11" pos:column="47">)<pos:position pos:line="11" pos:column="48"/></operator><name pos:line="11" pos:column="48">readbytes<pos:position pos:line="11" pos:column="57"/></name></expr></argument>)<pos:position pos:line="11" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="59"/></expr_stmt>
    
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">mode<pos:position pos:line="13" pos:column="13"/></name> <operator pos:line="13" pos:column="14">==<pos:position pos:line="13" pos:column="16"/></operator> <name pos:line="13" pos:column="17">AP_MODE_INIT<pos:position pos:line="13" pos:column="29"/></name></expr>)<pos:position pos:line="13" pos:column="30"/></condition><then pos:line="13" pos:column="30"> <block pos:line="13" pos:column="31">{
        <return pos:line="14" pos:column="9">return <expr><call><name pos:line="14" pos:column="16">ap_get_brigade<pos:position pos:line="14" pos:column="30"/></name><argument_list pos:line="14" pos:column="30">(<argument><expr><name><name pos:line="14" pos:column="31">f<pos:position pos:line="14" pos:column="32"/></name><operator pos:line="14" pos:column="32">-&gt;<pos:position pos:line="14" pos:column="37"/></operator><name pos:line="14" pos:column="34">c<pos:position pos:line="14" pos:column="35"/></name><operator pos:line="14" pos:column="35">-&gt;<pos:position pos:line="14" pos:column="40"/></operator><name pos:line="14" pos:column="37">input_filters<pos:position pos:line="14" pos:column="50"/></name></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="52">bb<pos:position pos:line="14" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="56">mode<pos:position pos:line="14" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="62">block<pos:position pos:line="14" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="69">readbytes<pos:position pos:line="14" pos:column="78"/></name></expr></argument>)<pos:position pos:line="14" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="80"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name><name pos:line="17" pos:column="9">f<pos:position pos:line="17" pos:column="10"/></name><operator pos:line="17" pos:column="10">-&gt;<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="12">c<pos:position pos:line="17" pos:column="13"/></name><operator pos:line="17" pos:column="13">-&gt;<pos:position pos:line="17" pos:column="18"/></operator><name pos:line="17" pos:column="15">aborted<pos:position pos:line="17" pos:column="22"/></name></name> <operator pos:line="17" pos:column="23">||<pos:position pos:line="17" pos:column="25"/></operator> <operator pos:line="17" pos:column="26">!<pos:position pos:line="17" pos:column="27"/></operator><name><name pos:line="17" pos:column="27">task<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">request<pos:position pos:line="17" pos:column="40"/></name></name></expr>)<pos:position pos:line="17" pos:column="41"/></condition><then pos:line="17" pos:column="41"> <block pos:line="17" pos:column="42">{
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">APR_ECONNABORTED<pos:position pos:line="18" pos:column="32"/></name></expr>;<pos:position pos:line="18" pos:column="33"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>
    
    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><name><name pos:line="21" pos:column="10">task<pos:position pos:line="21" pos:column="14"/></name><operator pos:line="21" pos:column="14">-&gt;<pos:position pos:line="21" pos:column="19"/></operator><name pos:line="21" pos:column="16">input<pos:position pos:line="21" pos:column="21"/></name><operator pos:line="21" pos:column="21">.<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">bb<pos:position pos:line="21" pos:column="24"/></name></name></expr>)<pos:position pos:line="21" pos:column="25"/></condition><then pos:line="21" pos:column="25"> <block pos:line="21" pos:column="26">{
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><operator pos:line="22" pos:column="13">!<pos:position pos:line="22" pos:column="14"/></operator><name><name pos:line="22" pos:column="14">task<pos:position pos:line="22" pos:column="18"/></name><operator pos:line="22" pos:column="18">-&gt;<pos:position pos:line="22" pos:column="23"/></operator><name pos:line="22" pos:column="20">input<pos:position pos:line="22" pos:column="25"/></name><operator pos:line="22" pos:column="25">.<pos:position pos:line="22" pos:column="26"/></operator><name pos:line="22" pos:column="26">eos_written<pos:position pos:line="22" pos:column="37"/></name></name></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38"> <block pos:line="22" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="23" pos:column="13">input_append_eos<pos:position pos:line="23" pos:column="29"/></name><argument_list pos:line="23" pos:column="29">(<argument><expr><name pos:line="23" pos:column="30">task<pos:position pos:line="23" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="23" pos:column="36">f<pos:position pos:line="23" pos:column="37"/></name><operator pos:line="23" pos:column="37">-&gt;<pos:position pos:line="23" pos:column="42"/></operator><name pos:line="23" pos:column="39">r<pos:position pos:line="23" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="23" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="42"/></expr_stmt>
            <return pos:line="24" pos:column="13">return <expr><name pos:line="24" pos:column="20">APR_SUCCESS<pos:position pos:line="24" pos:column="31"/></name></expr>;<pos:position pos:line="24" pos:column="32"/></return>
        }<pos:position pos:line="25" pos:column="10"/></block></then></if>
        <return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">APR_EOF<pos:position pos:line="26" pos:column="23"/></name></expr>;<pos:position pos:line="26" pos:column="24"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>
    
    <comment type="block" pos:line="29" pos:column="5">/* Cleanup brigades from those nasty 0 length non-meta buckets
     * that apr_brigade_split_line() sometimes produces. */</comment>
    <for pos:line="31" pos:column="5">for <control pos:line="31" pos:column="9">(<init><expr><name pos:line="31" pos:column="10">b<pos:position pos:line="31" pos:column="11"/></name> <operator pos:line="31" pos:column="12">=<pos:position pos:line="31" pos:column="13"/></operator> <call><name pos:line="31" pos:column="14">APR_BRIGADE_FIRST<pos:position pos:line="31" pos:column="31"/></name><argument_list pos:line="31" pos:column="31">(<argument><expr><name><name pos:line="31" pos:column="32">task<pos:position pos:line="31" pos:column="36"/></name><operator pos:line="31" pos:column="36">-&gt;<pos:position pos:line="31" pos:column="41"/></operator><name pos:line="31" pos:column="38">input<pos:position pos:line="31" pos:column="43"/></name><operator pos:line="31" pos:column="43">.<pos:position pos:line="31" pos:column="44"/></operator><name pos:line="31" pos:column="44">bb<pos:position pos:line="31" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="31" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="48"/></init>
         <condition><expr><name pos:line="32" pos:column="10">b<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">!=<pos:position pos:line="32" pos:column="14"/></operator> <call><name pos:line="32" pos:column="15">APR_BRIGADE_SENTINEL<pos:position pos:line="32" pos:column="35"/></name><argument_list pos:line="32" pos:column="35">(<argument><expr><name><name pos:line="32" pos:column="36">task<pos:position pos:line="32" pos:column="40"/></name><operator pos:line="32" pos:column="40">-&gt;<pos:position pos:line="32" pos:column="45"/></operator><name pos:line="32" pos:column="42">input<pos:position pos:line="32" pos:column="47"/></name><operator pos:line="32" pos:column="47">.<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="48">bb<pos:position pos:line="32" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="32" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="52"/></condition> <incr><expr><name pos:line="32" pos:column="53">b<pos:position pos:line="32" pos:column="54"/></name> <operator pos:line="32" pos:column="55">=<pos:position pos:line="32" pos:column="56"/></operator> <name pos:line="32" pos:column="57">next<pos:position pos:line="32" pos:column="61"/></name></expr></incr>)<pos:position pos:line="32" pos:column="62"/></control> <block pos:line="32" pos:column="63">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">next<pos:position pos:line="33" pos:column="13"/></name> <operator pos:line="33" pos:column="14">=<pos:position pos:line="33" pos:column="15"/></operator> <call><name pos:line="33" pos:column="16">APR_BUCKET_NEXT<pos:position pos:line="33" pos:column="31"/></name><argument_list pos:line="33" pos:column="31">(<argument><expr><name pos:line="33" pos:column="32">b<pos:position pos:line="33" pos:column="33"/></name></expr></argument>)<pos:position pos:line="33" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="35"/></expr_stmt>
        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><name><name pos:line="34" pos:column="13">b<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">-&gt;<pos:position pos:line="34" pos:column="19"/></operator><name pos:line="34" pos:column="16">length<pos:position pos:line="34" pos:column="22"/></name></name> <operator pos:line="34" pos:column="23">==<pos:position pos:line="34" pos:column="25"/></operator> <literal type="number" pos:line="34" pos:column="26">0<pos:position pos:line="34" pos:column="27"/></literal> <operator pos:line="34" pos:column="28">&amp;&amp;<pos:position pos:line="34" pos:column="38"/></operator> <operator pos:line="34" pos:column="31">!<pos:position pos:line="34" pos:column="32"/></operator><call><name pos:line="34" pos:column="32">APR_BUCKET_IS_METADATA<pos:position pos:line="34" pos:column="54"/></name><argument_list pos:line="34" pos:column="54">(<argument><expr><name pos:line="34" pos:column="55">b<pos:position pos:line="34" pos:column="56"/></name></expr></argument>)<pos:position pos:line="34" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="34" pos:column="58"/></condition><then pos:line="34" pos:column="58"> <block pos:line="34" pos:column="59">{
            <expr_stmt><expr><call><name pos:line="35" pos:column="13">apr_bucket_delete<pos:position pos:line="35" pos:column="30"/></name><argument_list pos:line="35" pos:column="30">(<argument><expr><name pos:line="35" pos:column="31">b<pos:position pos:line="35" pos:column="32"/></name></expr></argument>)<pos:position pos:line="35" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if> 
    }<pos:position pos:line="37" pos:column="6"/></block></for>
    
    <while pos:line="39" pos:column="5">while <condition pos:line="39" pos:column="11">(<expr><call><name pos:line="39" pos:column="12">APR_BRIGADE_EMPTY<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name><name pos:line="39" pos:column="30">task<pos:position pos:line="39" pos:column="34"/></name><operator pos:line="39" pos:column="34">-&gt;<pos:position pos:line="39" pos:column="39"/></operator><name pos:line="39" pos:column="36">input<pos:position pos:line="39" pos:column="41"/></name><operator pos:line="39" pos:column="41">.<pos:position pos:line="39" pos:column="42"/></operator><name pos:line="39" pos:column="42">bb<pos:position pos:line="39" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="39" pos:column="45"/></argument_list></call> <operator pos:line="39" pos:column="46">&amp;&amp;<pos:position pos:line="39" pos:column="56"/></operator> <operator pos:line="39" pos:column="49">!<pos:position pos:line="39" pos:column="50"/></operator><name><name pos:line="39" pos:column="50">task<pos:position pos:line="39" pos:column="54"/></name><operator pos:line="39" pos:column="54">-&gt;<pos:position pos:line="39" pos:column="59"/></operator><name pos:line="39" pos:column="56">input<pos:position pos:line="39" pos:column="61"/></name><operator pos:line="39" pos:column="61">.<pos:position pos:line="39" pos:column="62"/></operator><name pos:line="39" pos:column="62">eos<pos:position pos:line="39" pos:column="65"/></name></name></expr>)<pos:position pos:line="39" pos:column="66"/></condition> <block pos:line="39" pos:column="67">{
        <comment type="block" pos:line="40" pos:column="9">/* Get more input data for our request. */</comment>
        <expr_stmt><expr><call><name pos:line="41" pos:column="9">ap_log_cerror<pos:position pos:line="41" pos:column="22"/></name><argument_list pos:line="41" pos:column="22">(<argument><expr><name pos:line="41" pos:column="23">APLOG_MARK<pos:position pos:line="41" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="35">APLOG_TRACE1<pos:position pos:line="41" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="49">status<pos:position pos:line="41" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="57">f<pos:position pos:line="41" pos:column="58"/></name><operator pos:line="41" pos:column="58">-&gt;<pos:position pos:line="41" pos:column="63"/></operator><name pos:line="41" pos:column="60">c<pos:position pos:line="41" pos:column="61"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="42" pos:column="23">"h2_task(%s): get more data from mplx, block=%d, "<pos:position pos:line="42" pos:column="73"/></literal>
                      <literal type="string" pos:line="43" pos:column="23">"readbytes=%ld, queued=%ld"<pos:position pos:line="43" pos:column="50"/></literal></expr></argument>,
                      <argument><expr><name><name pos:line="44" pos:column="23">task<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">id<pos:position pos:line="44" pos:column="31"/></name></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="33">block<pos:position pos:line="44" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="40">(<pos:position pos:line="44" pos:column="41"/></operator><name pos:line="44" pos:column="41">long<pos:position pos:line="44" pos:column="45"/></name><operator pos:line="44" pos:column="45">)<pos:position pos:line="44" pos:column="46"/></operator><name pos:line="44" pos:column="46">readbytes<pos:position pos:line="44" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="44" pos:column="57">(<pos:position pos:line="44" pos:column="58"/></operator><name pos:line="44" pos:column="58">long<pos:position pos:line="44" pos:column="62"/></name><operator pos:line="44" pos:column="62">)<pos:position pos:line="44" pos:column="63"/></operator><name pos:line="44" pos:column="63">bblen<pos:position pos:line="44" pos:column="68"/></name></expr></argument>)<pos:position pos:line="44" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="70"/></expr_stmt>
        
        <comment type="block" pos:line="46" pos:column="9">/* Override the block mode we get called with depending on the input's
         * setting. */</comment>
        <if pos:line="48" pos:column="9">if <condition pos:line="48" pos:column="12">(<expr><name><name pos:line="48" pos:column="13">task<pos:position pos:line="48" pos:column="17"/></name><operator pos:line="48" pos:column="17">-&gt;<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="19">input<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">.<pos:position pos:line="48" pos:column="25"/></operator><name pos:line="48" pos:column="25">beam<pos:position pos:line="48" pos:column="29"/></name></name></expr>)<pos:position pos:line="48" pos:column="30"/></condition><then pos:line="48" pos:column="30"> <block pos:line="48" pos:column="31">{
            <expr_stmt><expr><name pos:line="49" pos:column="13">status<pos:position pos:line="49" pos:column="19"/></name> <operator pos:line="49" pos:column="20">=<pos:position pos:line="49" pos:column="21"/></operator> <call><name pos:line="49" pos:column="22">h2_beam_receive<pos:position pos:line="49" pos:column="37"/></name><argument_list pos:line="49" pos:column="37">(<argument><expr><name><name pos:line="49" pos:column="38">task<pos:position pos:line="49" pos:column="42"/></name><operator pos:line="49" pos:column="42">-&gt;<pos:position pos:line="49" pos:column="47"/></operator><name pos:line="49" pos:column="44">input<pos:position pos:line="49" pos:column="49"/></name><operator pos:line="49" pos:column="49">.<pos:position pos:line="49" pos:column="50"/></operator><name pos:line="49" pos:column="50">beam<pos:position pos:line="49" pos:column="54"/></name></name></expr></argument>, <argument><expr><name><name pos:line="49" pos:column="56">task<pos:position pos:line="49" pos:column="60"/></name><operator pos:line="49" pos:column="60">-&gt;<pos:position pos:line="49" pos:column="65"/></operator><name pos:line="49" pos:column="62">input<pos:position pos:line="49" pos:column="67"/></name><operator pos:line="49" pos:column="67">.<pos:position pos:line="49" pos:column="68"/></operator><name pos:line="49" pos:column="68">bb<pos:position pos:line="49" pos:column="70"/></name></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="72">block<pos:position pos:line="49" pos:column="77"/></name></expr></argument>, 
                                     <argument><expr><call><name pos:line="50" pos:column="38">H2MIN<pos:position pos:line="50" pos:column="43"/></name><argument_list pos:line="50" pos:column="43">(<argument><expr><name pos:line="50" pos:column="44">readbytes<pos:position pos:line="50" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="50" pos:column="55">32<pos:position pos:line="50" pos:column="57"/></literal><operator pos:line="50" pos:column="57">*<pos:position pos:line="50" pos:column="58"/></operator><literal type="number" pos:line="50" pos:column="58">1024<pos:position pos:line="50" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="50" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="65"/></expr_stmt>
        }<pos:position pos:line="51" pos:column="10"/></block></then>
        <else pos:line="52" pos:column="9">else <block pos:line="52" pos:column="14">{
            <expr_stmt><expr><name pos:line="53" pos:column="13">status<pos:position pos:line="53" pos:column="19"/></name> <operator pos:line="53" pos:column="20">=<pos:position pos:line="53" pos:column="21"/></operator> <name pos:line="53" pos:column="22">APR_EOF<pos:position pos:line="53" pos:column="29"/></name></expr>;<pos:position pos:line="53" pos:column="30"/></expr_stmt>
        }<pos:position pos:line="54" pos:column="10"/></block></else></if>
        
        <expr_stmt><expr><call><name pos:line="56" pos:column="9">ap_log_cerror<pos:position pos:line="56" pos:column="22"/></name><argument_list pos:line="56" pos:column="22">(<argument><expr><name pos:line="56" pos:column="23">APLOG_MARK<pos:position pos:line="56" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="35">APLOG_TRACE2<pos:position pos:line="56" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="49">status<pos:position pos:line="56" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="57">f<pos:position pos:line="56" pos:column="58"/></name><operator pos:line="56" pos:column="58">-&gt;<pos:position pos:line="56" pos:column="63"/></operator><name pos:line="56" pos:column="60">c<pos:position pos:line="56" pos:column="61"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="57" pos:column="23">"h2_task(%s): read returned"<pos:position pos:line="57" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="57" pos:column="53">task<pos:position pos:line="57" pos:column="57"/></name><operator pos:line="57" pos:column="57">-&gt;<pos:position pos:line="57" pos:column="62"/></operator><name pos:line="57" pos:column="59">id<pos:position pos:line="57" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="57" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="63"/></expr_stmt>
        <if pos:line="58" pos:column="9">if <condition pos:line="58" pos:column="12">(<expr><call><name pos:line="58" pos:column="13">APR_STATUS_IS_EAGAIN<pos:position pos:line="58" pos:column="33"/></name><argument_list pos:line="58" pos:column="33">(<argument><expr><name pos:line="58" pos:column="34">status<pos:position pos:line="58" pos:column="40"/></name></expr></argument>)<pos:position pos:line="58" pos:column="41"/></argument_list></call> 
            <operator pos:line="59" pos:column="13">&amp;&amp;<pos:position pos:line="59" pos:column="23"/></operator> <operator pos:line="59" pos:column="16">(<pos:position pos:line="59" pos:column="17"/></operator><name pos:line="59" pos:column="17">mode<pos:position pos:line="59" pos:column="21"/></name> <operator pos:line="59" pos:column="22">==<pos:position pos:line="59" pos:column="24"/></operator> <name pos:line="59" pos:column="25">AP_MODE_GETLINE<pos:position pos:line="59" pos:column="40"/></name> <operator pos:line="59" pos:column="41">||<pos:position pos:line="59" pos:column="43"/></operator> <name pos:line="59" pos:column="44">block<pos:position pos:line="59" pos:column="49"/></name> <operator pos:line="59" pos:column="50">==<pos:position pos:line="59" pos:column="52"/></operator> <name pos:line="59" pos:column="53">APR_BLOCK_READ<pos:position pos:line="59" pos:column="67"/></name><operator pos:line="59" pos:column="67">)<pos:position pos:line="59" pos:column="68"/></operator></expr>)<pos:position pos:line="59" pos:column="69"/></condition><then pos:line="59" pos:column="69"> <block pos:line="59" pos:column="70">{
            <comment type="block" pos:line="60" pos:column="13">/* chunked input handling does not seem to like it if we
             * return with APR_EAGAIN from a GETLINE read... 
             * upload 100k test on test-ser.example.org hangs */</comment>
            <expr_stmt><expr><name pos:line="63" pos:column="13">status<pos:position pos:line="63" pos:column="19"/></name> <operator pos:line="63" pos:column="20">=<pos:position pos:line="63" pos:column="21"/></operator> <name pos:line="63" pos:column="22">APR_SUCCESS<pos:position pos:line="63" pos:column="33"/></name></expr>;<pos:position pos:line="63" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="64" pos:column="10"/></block></then>
        <elseif pos:line="65" pos:column="9">else <if pos:line="65" pos:column="14">if <condition pos:line="65" pos:column="17">(<expr><call><name pos:line="65" pos:column="18">APR_STATUS_IS_EOF<pos:position pos:line="65" pos:column="35"/></name><argument_list pos:line="65" pos:column="35">(<argument><expr><name pos:line="65" pos:column="36">status<pos:position pos:line="65" pos:column="42"/></name></expr></argument>)<pos:position pos:line="65" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="44"/></condition><then pos:line="65" pos:column="44"> <block pos:line="65" pos:column="45">{
            <expr_stmt><expr><name><name pos:line="66" pos:column="13">task<pos:position pos:line="66" pos:column="17"/></name><operator pos:line="66" pos:column="17">-&gt;<pos:position pos:line="66" pos:column="22"/></operator><name pos:line="66" pos:column="19">input<pos:position pos:line="66" pos:column="24"/></name><operator pos:line="66" pos:column="24">.<pos:position pos:line="66" pos:column="25"/></operator><name pos:line="66" pos:column="25">eos<pos:position pos:line="66" pos:column="28"/></name></name> <operator pos:line="66" pos:column="29">=<pos:position pos:line="66" pos:column="30"/></operator> <literal type="number" pos:line="66" pos:column="31">1<pos:position pos:line="66" pos:column="32"/></literal></expr>;<pos:position pos:line="66" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="67" pos:column="10"/></block></then></if></elseif>
        <elseif pos:line="68" pos:column="9">else <if pos:line="68" pos:column="14">if <condition pos:line="68" pos:column="17">(<expr><name pos:line="68" pos:column="18">status<pos:position pos:line="68" pos:column="24"/></name> <operator pos:line="68" pos:column="25">!=<pos:position pos:line="68" pos:column="27"/></operator> <name pos:line="68" pos:column="28">APR_SUCCESS<pos:position pos:line="68" pos:column="39"/></name></expr>)<pos:position pos:line="68" pos:column="40"/></condition><then pos:line="68" pos:column="40"> <block pos:line="68" pos:column="41">{
            <return pos:line="69" pos:column="13">return <expr><name pos:line="69" pos:column="20">status<pos:position pos:line="69" pos:column="26"/></name></expr>;<pos:position pos:line="69" pos:column="27"/></return>
        }<pos:position pos:line="70" pos:column="10"/></block></then></if></elseif></if>
        
        <comment type="block" pos:line="72" pos:column="9">/* Inspect the buckets received, detect EOS and apply
         * chunked encoding if necessary */</comment>
        <expr_stmt><expr><call><name pos:line="74" pos:column="9">h2_util_bb_log<pos:position pos:line="74" pos:column="23"/></name><argument_list pos:line="74" pos:column="23">(<argument><expr><name><name pos:line="74" pos:column="24">f<pos:position pos:line="74" pos:column="25"/></name><operator pos:line="74" pos:column="25">-&gt;<pos:position pos:line="74" pos:column="30"/></operator><name pos:line="74" pos:column="27">c<pos:position pos:line="74" pos:column="28"/></name></name></expr></argument>, <argument><expr><name><name pos:line="74" pos:column="30">task<pos:position pos:line="74" pos:column="34"/></name><operator pos:line="74" pos:column="34">-&gt;<pos:position pos:line="74" pos:column="39"/></operator><name pos:line="74" pos:column="36">stream_id<pos:position pos:line="74" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="74" pos:column="47">APLOG_TRACE2<pos:position pos:line="74" pos:column="59"/></name></expr></argument>, 
                       <argument><expr><literal type="string" pos:line="75" pos:column="24">"input.beam recv raw"<pos:position pos:line="75" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="75" pos:column="47">task<pos:position pos:line="75" pos:column="51"/></name><operator pos:line="75" pos:column="51">-&gt;<pos:position pos:line="75" pos:column="56"/></operator><name pos:line="75" pos:column="53">input<pos:position pos:line="75" pos:column="58"/></name><operator pos:line="75" pos:column="58">.<pos:position pos:line="75" pos:column="59"/></operator><name pos:line="75" pos:column="59">bb<pos:position pos:line="75" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="75" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><name pos:line="76" pos:column="9">first_data<pos:position pos:line="76" pos:column="19"/></name> <operator pos:line="76" pos:column="20">=<pos:position pos:line="76" pos:column="21"/></operator> <name pos:line="76" pos:column="22">NULL<pos:position pos:line="76" pos:column="26"/></name></expr>;<pos:position pos:line="76" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="77" pos:column="9">bblen<pos:position pos:line="77" pos:column="14"/></name> <operator pos:line="77" pos:column="15">=<pos:position pos:line="77" pos:column="16"/></operator> <literal type="number" pos:line="77" pos:column="17">0<pos:position pos:line="77" pos:column="18"/></literal></expr>;<pos:position pos:line="77" pos:column="19"/></expr_stmt>
        <for pos:line="78" pos:column="9">for <control pos:line="78" pos:column="13">(<init><expr><name pos:line="78" pos:column="14">b<pos:position pos:line="78" pos:column="15"/></name> <operator pos:line="78" pos:column="16">=<pos:position pos:line="78" pos:column="17"/></operator> <call><name pos:line="78" pos:column="18">APR_BRIGADE_FIRST<pos:position pos:line="78" pos:column="35"/></name><argument_list pos:line="78" pos:column="35">(<argument><expr><name><name pos:line="78" pos:column="36">task<pos:position pos:line="78" pos:column="40"/></name><operator pos:line="78" pos:column="40">-&gt;<pos:position pos:line="78" pos:column="45"/></operator><name pos:line="78" pos:column="42">input<pos:position pos:line="78" pos:column="47"/></name><operator pos:line="78" pos:column="47">.<pos:position pos:line="78" pos:column="48"/></operator><name pos:line="78" pos:column="48">bb<pos:position pos:line="78" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="78" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="52"/></init> 
             <condition><expr><name pos:line="79" pos:column="14">b<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">!=<pos:position pos:line="79" pos:column="18"/></operator> <call><name pos:line="79" pos:column="19">APR_BRIGADE_SENTINEL<pos:position pos:line="79" pos:column="39"/></name><argument_list pos:line="79" pos:column="39">(<argument><expr><name><name pos:line="79" pos:column="40">task<pos:position pos:line="79" pos:column="44"/></name><operator pos:line="79" pos:column="44">-&gt;<pos:position pos:line="79" pos:column="49"/></operator><name pos:line="79" pos:column="46">input<pos:position pos:line="79" pos:column="51"/></name><operator pos:line="79" pos:column="51">.<pos:position pos:line="79" pos:column="52"/></operator><name pos:line="79" pos:column="52">bb<pos:position pos:line="79" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="79" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="56"/></condition> <incr><expr><name pos:line="79" pos:column="57">b<pos:position pos:line="79" pos:column="58"/></name> <operator pos:line="79" pos:column="59">=<pos:position pos:line="79" pos:column="60"/></operator> <name pos:line="79" pos:column="61">next<pos:position pos:line="79" pos:column="65"/></name></expr></incr>)<pos:position pos:line="79" pos:column="66"/></control> <block pos:line="79" pos:column="67">{
            <expr_stmt><expr><name pos:line="80" pos:column="13">next<pos:position pos:line="80" pos:column="17"/></name> <operator pos:line="80" pos:column="18">=<pos:position pos:line="80" pos:column="19"/></operator> <call><name pos:line="80" pos:column="20">APR_BUCKET_NEXT<pos:position pos:line="80" pos:column="35"/></name><argument_list pos:line="80" pos:column="35">(<argument><expr><name pos:line="80" pos:column="36">b<pos:position pos:line="80" pos:column="37"/></name></expr></argument>)<pos:position pos:line="80" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="80" pos:column="39"/></expr_stmt>
            <if pos:line="81" pos:column="13">if <condition pos:line="81" pos:column="16">(<expr><call><name pos:line="81" pos:column="17">APR_BUCKET_IS_METADATA<pos:position pos:line="81" pos:column="39"/></name><argument_list pos:line="81" pos:column="39">(<argument><expr><name pos:line="81" pos:column="40">b<pos:position pos:line="81" pos:column="41"/></name></expr></argument>)<pos:position pos:line="81" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="81" pos:column="43"/></condition><then pos:line="81" pos:column="43"> <block pos:line="81" pos:column="44">{
                <if pos:line="82" pos:column="17">if <condition pos:line="82" pos:column="20">(<expr><name pos:line="82" pos:column="21">first_data<pos:position pos:line="82" pos:column="31"/></name> <operator pos:line="82" pos:column="32">&amp;&amp;<pos:position pos:line="82" pos:column="42"/></operator> <name><name pos:line="82" pos:column="35">task<pos:position pos:line="82" pos:column="39"/></name><operator pos:line="82" pos:column="39">-&gt;<pos:position pos:line="82" pos:column="44"/></operator><name pos:line="82" pos:column="41">input<pos:position pos:line="82" pos:column="46"/></name><operator pos:line="82" pos:column="46">.<pos:position pos:line="82" pos:column="47"/></operator><name pos:line="82" pos:column="47">chunked<pos:position pos:line="82" pos:column="54"/></name></name></expr>)<pos:position pos:line="82" pos:column="55"/></condition><then pos:line="82" pos:column="55"> <block pos:line="82" pos:column="56">{
                    <expr_stmt><expr><call><name pos:line="83" pos:column="21">make_chunk<pos:position pos:line="83" pos:column="31"/></name><argument_list pos:line="83" pos:column="31">(<argument><expr><name pos:line="83" pos:column="32">task<pos:position pos:line="83" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="83" pos:column="38">task<pos:position pos:line="83" pos:column="42"/></name><operator pos:line="83" pos:column="42">-&gt;<pos:position pos:line="83" pos:column="47"/></operator><name pos:line="83" pos:column="44">input<pos:position pos:line="83" pos:column="49"/></name><operator pos:line="83" pos:column="49">.<pos:position pos:line="83" pos:column="50"/></operator><name pos:line="83" pos:column="50">bb<pos:position pos:line="83" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="54">first_data<pos:position pos:line="83" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="66">bblen<pos:position pos:line="83" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="83" pos:column="73">b<pos:position pos:line="83" pos:column="74"/></name></expr></argument>)<pos:position pos:line="83" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="76"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="84" pos:column="21">first_data<pos:position pos:line="84" pos:column="31"/></name> <operator pos:line="84" pos:column="32">=<pos:position pos:line="84" pos:column="33"/></operator> <name pos:line="84" pos:column="34">NULL<pos:position pos:line="84" pos:column="38"/></name></expr>;<pos:position pos:line="84" pos:column="39"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="85" pos:column="21">bblen<pos:position pos:line="85" pos:column="26"/></name> <operator pos:line="85" pos:column="27">=<pos:position pos:line="85" pos:column="28"/></operator> <literal type="number" pos:line="85" pos:column="29">0<pos:position pos:line="85" pos:column="30"/></literal></expr>;<pos:position pos:line="85" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="86" pos:column="18"/></block></then></if>
                <if pos:line="87" pos:column="17">if <condition pos:line="87" pos:column="20">(<expr><call><name pos:line="87" pos:column="21">APR_BUCKET_IS_EOS<pos:position pos:line="87" pos:column="38"/></name><argument_list pos:line="87" pos:column="38">(<argument><expr><name pos:line="87" pos:column="39">b<pos:position pos:line="87" pos:column="40"/></name></expr></argument>)<pos:position pos:line="87" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="87" pos:column="42"/></condition><then pos:line="87" pos:column="42"> <block pos:line="87" pos:column="43">{
                    <expr_stmt><expr><name><name pos:line="88" pos:column="21">task<pos:position pos:line="88" pos:column="25"/></name><operator pos:line="88" pos:column="25">-&gt;<pos:position pos:line="88" pos:column="30"/></operator><name pos:line="88" pos:column="27">input<pos:position pos:line="88" pos:column="32"/></name><operator pos:line="88" pos:column="32">.<pos:position pos:line="88" pos:column="33"/></operator><name pos:line="88" pos:column="33">eos<pos:position pos:line="88" pos:column="36"/></name></name> <operator pos:line="88" pos:column="37">=<pos:position pos:line="88" pos:column="38"/></operator> <literal type="number" pos:line="88" pos:column="39">1<pos:position pos:line="88" pos:column="40"/></literal></expr>;<pos:position pos:line="88" pos:column="41"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="89" pos:column="21">input_handle_eos<pos:position pos:line="89" pos:column="37"/></name><argument_list pos:line="89" pos:column="37">(<argument><expr><name pos:line="89" pos:column="38">task<pos:position pos:line="89" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="44">f<pos:position pos:line="89" pos:column="45"/></name><operator pos:line="89" pos:column="45">-&gt;<pos:position pos:line="89" pos:column="50"/></operator><name pos:line="89" pos:column="47">r<pos:position pos:line="89" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="89" pos:column="50">b<pos:position pos:line="89" pos:column="51"/></name></expr></argument>)<pos:position pos:line="89" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="53"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="90" pos:column="21">h2_util_bb_log<pos:position pos:line="90" pos:column="35"/></name><argument_list pos:line="90" pos:column="35">(<argument><expr><name><name pos:line="90" pos:column="36">f<pos:position pos:line="90" pos:column="37"/></name><operator pos:line="90" pos:column="37">-&gt;<pos:position pos:line="90" pos:column="42"/></operator><name pos:line="90" pos:column="39">c<pos:position pos:line="90" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="90" pos:column="42">task<pos:position pos:line="90" pos:column="46"/></name><operator pos:line="90" pos:column="46">-&gt;<pos:position pos:line="90" pos:column="51"/></operator><name pos:line="90" pos:column="48">stream_id<pos:position pos:line="90" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="90" pos:column="59">APLOG_TRACE2<pos:position pos:line="90" pos:column="71"/></name></expr></argument>, 
                                   <argument><expr><literal type="string" pos:line="91" pos:column="36">"input.bb after handle eos"<pos:position pos:line="91" pos:column="63"/></literal></expr></argument>, 
                                   <argument><expr><name><name pos:line="92" pos:column="36">task<pos:position pos:line="92" pos:column="40"/></name><operator pos:line="92" pos:column="40">-&gt;<pos:position pos:line="92" pos:column="45"/></operator><name pos:line="92" pos:column="42">input<pos:position pos:line="92" pos:column="47"/></name><operator pos:line="92" pos:column="47">.<pos:position pos:line="92" pos:column="48"/></operator><name pos:line="92" pos:column="48">bb<pos:position pos:line="92" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="92" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="52"/></expr_stmt>
                }<pos:position pos:line="93" pos:column="18"/></block></then></if>
            }<pos:position pos:line="94" pos:column="14"/></block></then>
            <elseif pos:line="95" pos:column="13">else <if pos:line="95" pos:column="18">if <condition pos:line="95" pos:column="21">(<expr><name><name pos:line="95" pos:column="22">b<pos:position pos:line="95" pos:column="23"/></name><operator pos:line="95" pos:column="23">-&gt;<pos:position pos:line="95" pos:column="28"/></operator><name pos:line="95" pos:column="25">length<pos:position pos:line="95" pos:column="31"/></name></name> <operator pos:line="95" pos:column="32">==<pos:position pos:line="95" pos:column="34"/></operator> <literal type="number" pos:line="95" pos:column="35">0<pos:position pos:line="95" pos:column="36"/></literal></expr>)<pos:position pos:line="95" pos:column="37"/></condition><then pos:line="95" pos:column="37"> <block pos:line="95" pos:column="38">{
                <expr_stmt><expr><call><name pos:line="96" pos:column="17">apr_bucket_delete<pos:position pos:line="96" pos:column="34"/></name><argument_list pos:line="96" pos:column="34">(<argument><expr><name pos:line="96" pos:column="35">b<pos:position pos:line="96" pos:column="36"/></name></expr></argument>)<pos:position pos:line="96" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="97" pos:column="14"/></block></then></if></elseif> 
            <else pos:line="98" pos:column="13">else <block pos:line="98" pos:column="18">{
                <if pos:line="99" pos:column="17">if <condition pos:line="99" pos:column="20">(<expr><operator pos:line="99" pos:column="21">!<pos:position pos:line="99" pos:column="22"/></operator><name pos:line="99" pos:column="22">first_data<pos:position pos:line="99" pos:column="32"/></name></expr>)<pos:position pos:line="99" pos:column="33"/></condition><then pos:line="99" pos:column="33"> <block pos:line="99" pos:column="34">{
                    <expr_stmt><expr><name pos:line="100" pos:column="21">first_data<pos:position pos:line="100" pos:column="31"/></name> <operator pos:line="100" pos:column="32">=<pos:position pos:line="100" pos:column="33"/></operator> <name pos:line="100" pos:column="34">b<pos:position pos:line="100" pos:column="35"/></name></expr>;<pos:position pos:line="100" pos:column="36"/></expr_stmt>
                }<pos:position pos:line="101" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="102" pos:column="17">bblen<pos:position pos:line="102" pos:column="22"/></name> <operator pos:line="102" pos:column="23">+=<pos:position pos:line="102" pos:column="25"/></operator> <name><name pos:line="102" pos:column="26">b<pos:position pos:line="102" pos:column="27"/></name><operator pos:line="102" pos:column="27">-&gt;<pos:position pos:line="102" pos:column="32"/></operator><name pos:line="102" pos:column="29">length<pos:position pos:line="102" pos:column="35"/></name></name></expr>;<pos:position pos:line="102" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="103" pos:column="14"/></block></else></if>    
        }<pos:position pos:line="104" pos:column="10"/></block></for>
        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name pos:line="105" pos:column="13">first_data<pos:position pos:line="105" pos:column="23"/></name> <operator pos:line="105" pos:column="24">&amp;&amp;<pos:position pos:line="105" pos:column="34"/></operator> <name><name pos:line="105" pos:column="27">task<pos:position pos:line="105" pos:column="31"/></name><operator pos:line="105" pos:column="31">-&gt;<pos:position pos:line="105" pos:column="36"/></operator><name pos:line="105" pos:column="33">input<pos:position pos:line="105" pos:column="38"/></name><operator pos:line="105" pos:column="38">.<pos:position pos:line="105" pos:column="39"/></operator><name pos:line="105" pos:column="39">chunked<pos:position pos:line="105" pos:column="46"/></name></name></expr>)<pos:position pos:line="105" pos:column="47"/></condition><then pos:line="105" pos:column="47"> <block pos:line="105" pos:column="48">{
            <expr_stmt><expr><call><name pos:line="106" pos:column="13">make_chunk<pos:position pos:line="106" pos:column="23"/></name><argument_list pos:line="106" pos:column="23">(<argument><expr><name pos:line="106" pos:column="24">task<pos:position pos:line="106" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="106" pos:column="30">task<pos:position pos:line="106" pos:column="34"/></name><operator pos:line="106" pos:column="34">-&gt;<pos:position pos:line="106" pos:column="39"/></operator><name pos:line="106" pos:column="36">input<pos:position pos:line="106" pos:column="41"/></name><operator pos:line="106" pos:column="41">.<pos:position pos:line="106" pos:column="42"/></operator><name pos:line="106" pos:column="42">bb<pos:position pos:line="106" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="46">first_data<pos:position pos:line="106" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="58">bblen<pos:position pos:line="106" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="106" pos:column="65">NULL<pos:position pos:line="106" pos:column="69"/></name></expr></argument>)<pos:position pos:line="106" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="106" pos:column="71"/></expr_stmt>
        }<pos:position pos:line="107" pos:column="10"/></block></then></if>            
        
        <if pos:line="109" pos:column="9">if <condition pos:line="109" pos:column="12">(<expr><name pos:line="109" pos:column="13">h2_task_logio_add_bytes_in<pos:position pos:line="109" pos:column="39"/></name></expr>)<pos:position pos:line="109" pos:column="40"/></condition><then pos:line="109" pos:column="40"> <block pos:line="109" pos:column="41">{
            <expr_stmt><expr><call><name pos:line="110" pos:column="13">h2_task_logio_add_bytes_in<pos:position pos:line="110" pos:column="39"/></name><argument_list pos:line="110" pos:column="39">(<argument><expr><name><name pos:line="110" pos:column="40">f<pos:position pos:line="110" pos:column="41"/></name><operator pos:line="110" pos:column="41">-&gt;<pos:position pos:line="110" pos:column="46"/></operator><name pos:line="110" pos:column="43">c<pos:position pos:line="110" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="46">bblen<pos:position pos:line="110" pos:column="51"/></name></expr></argument>)<pos:position pos:line="110" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="53"/></expr_stmt>
        }<pos:position pos:line="111" pos:column="10"/></block></then></if>
    }<pos:position pos:line="112" pos:column="6"/></block></while>
    
    <if pos:line="114" pos:column="5">if <condition pos:line="114" pos:column="8">(<expr><name><name pos:line="114" pos:column="9">task<pos:position pos:line="114" pos:column="13"/></name><operator pos:line="114" pos:column="13">-&gt;<pos:position pos:line="114" pos:column="18"/></operator><name pos:line="114" pos:column="15">input<pos:position pos:line="114" pos:column="20"/></name><operator pos:line="114" pos:column="20">.<pos:position pos:line="114" pos:column="21"/></operator><name pos:line="114" pos:column="21">eos<pos:position pos:line="114" pos:column="24"/></name></name></expr>)<pos:position pos:line="114" pos:column="25"/></condition><then pos:line="114" pos:column="25"> <block pos:line="114" pos:column="26">{
        <if pos:line="115" pos:column="9">if <condition pos:line="115" pos:column="12">(<expr><operator pos:line="115" pos:column="13">!<pos:position pos:line="115" pos:column="14"/></operator><name><name pos:line="115" pos:column="14">task<pos:position pos:line="115" pos:column="18"/></name><operator pos:line="115" pos:column="18">-&gt;<pos:position pos:line="115" pos:column="23"/></operator><name pos:line="115" pos:column="20">input<pos:position pos:line="115" pos:column="25"/></name><operator pos:line="115" pos:column="25">.<pos:position pos:line="115" pos:column="26"/></operator><name pos:line="115" pos:column="26">eos_written<pos:position pos:line="115" pos:column="37"/></name></name></expr>)<pos:position pos:line="115" pos:column="38"/></condition><then pos:line="115" pos:column="38"> <block pos:line="115" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="116" pos:column="13">input_append_eos<pos:position pos:line="116" pos:column="29"/></name><argument_list pos:line="116" pos:column="29">(<argument><expr><name pos:line="116" pos:column="30">task<pos:position pos:line="116" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="116" pos:column="36">f<pos:position pos:line="116" pos:column="37"/></name><operator pos:line="116" pos:column="37">-&gt;<pos:position pos:line="116" pos:column="42"/></operator><name pos:line="116" pos:column="39">r<pos:position pos:line="116" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="116" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="117" pos:column="10"/></block></then></if>
        <if pos:line="118" pos:column="9">if <condition pos:line="118" pos:column="12">(<expr><call><name pos:line="118" pos:column="13">APR_BRIGADE_EMPTY<pos:position pos:line="118" pos:column="30"/></name><argument_list pos:line="118" pos:column="30">(<argument><expr><name><name pos:line="118" pos:column="31">task<pos:position pos:line="118" pos:column="35"/></name><operator pos:line="118" pos:column="35">-&gt;<pos:position pos:line="118" pos:column="40"/></operator><name pos:line="118" pos:column="37">input<pos:position pos:line="118" pos:column="42"/></name><operator pos:line="118" pos:column="42">.<pos:position pos:line="118" pos:column="43"/></operator><name pos:line="118" pos:column="43">bb<pos:position pos:line="118" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="118" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="118" pos:column="47"/></condition><then pos:line="118" pos:column="47"> <block pos:line="118" pos:column="48">{
            <return pos:line="119" pos:column="13">return <expr><name pos:line="119" pos:column="20">APR_EOF<pos:position pos:line="119" pos:column="27"/></name></expr>;<pos:position pos:line="119" pos:column="28"/></return>
        }<pos:position pos:line="120" pos:column="10"/></block></then></if>
    }<pos:position pos:line="121" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="123" pos:column="5">h2_util_bb_log<pos:position pos:line="123" pos:column="19"/></name><argument_list pos:line="123" pos:column="19">(<argument><expr><name><name pos:line="123" pos:column="20">f<pos:position pos:line="123" pos:column="21"/></name><operator pos:line="123" pos:column="21">-&gt;<pos:position pos:line="123" pos:column="26"/></operator><name pos:line="123" pos:column="23">c<pos:position pos:line="123" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="123" pos:column="26">task<pos:position pos:line="123" pos:column="30"/></name><operator pos:line="123" pos:column="30">-&gt;<pos:position pos:line="123" pos:column="35"/></operator><name pos:line="123" pos:column="32">stream_id<pos:position pos:line="123" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="43">APLOG_TRACE2<pos:position pos:line="123" pos:column="55"/></name></expr></argument>, 
                   <argument><expr><literal type="string" pos:line="124" pos:column="20">"task_input.bb"<pos:position pos:line="124" pos:column="35"/></literal></expr></argument>, <argument><expr><name><name pos:line="124" pos:column="37">task<pos:position pos:line="124" pos:column="41"/></name><operator pos:line="124" pos:column="41">-&gt;<pos:position pos:line="124" pos:column="46"/></operator><name pos:line="124" pos:column="43">input<pos:position pos:line="124" pos:column="48"/></name><operator pos:line="124" pos:column="48">.<pos:position pos:line="124" pos:column="49"/></operator><name pos:line="124" pos:column="49">bb<pos:position pos:line="124" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="124" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="53"/></expr_stmt>
           
    <if pos:line="126" pos:column="5">if <condition pos:line="126" pos:column="8">(<expr><call><name pos:line="126" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="126" pos:column="26"/></name><argument_list pos:line="126" pos:column="26">(<argument><expr><name><name pos:line="126" pos:column="27">task<pos:position pos:line="126" pos:column="31"/></name><operator pos:line="126" pos:column="31">-&gt;<pos:position pos:line="126" pos:column="36"/></operator><name pos:line="126" pos:column="33">input<pos:position pos:line="126" pos:column="38"/></name><operator pos:line="126" pos:column="38">.<pos:position pos:line="126" pos:column="39"/></operator><name pos:line="126" pos:column="39">bb<pos:position pos:line="126" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="126" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="126" pos:column="43"/></condition><then pos:line="126" pos:column="43"> <block pos:line="126" pos:column="44">{
        <expr_stmt><expr><call><name pos:line="127" pos:column="9">ap_log_cerror<pos:position pos:line="127" pos:column="22"/></name><argument_list pos:line="127" pos:column="22">(<argument><expr><name pos:line="127" pos:column="23">APLOG_MARK<pos:position pos:line="127" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="35">APLOG_TRACE1<pos:position pos:line="127" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="49">0<pos:position pos:line="127" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="127" pos:column="52">f<pos:position pos:line="127" pos:column="53"/></name><operator pos:line="127" pos:column="53">-&gt;<pos:position pos:line="127" pos:column="58"/></operator><name pos:line="127" pos:column="55">c<pos:position pos:line="127" pos:column="56"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="128" pos:column="23">"h2_task(%s): no data"<pos:position pos:line="128" pos:column="45"/></literal></expr></argument>, <argument><expr><name><name pos:line="128" pos:column="47">task<pos:position pos:line="128" pos:column="51"/></name><operator pos:line="128" pos:column="51">-&gt;<pos:position pos:line="128" pos:column="56"/></operator><name pos:line="128" pos:column="53">id<pos:position pos:line="128" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="128" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="57"/></expr_stmt>
        <return pos:line="129" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="129" pos:column="16">(<pos:position pos:line="129" pos:column="17"/></operator><name pos:line="129" pos:column="17">block<pos:position pos:line="129" pos:column="22"/></name> <operator pos:line="129" pos:column="23">==<pos:position pos:line="129" pos:column="25"/></operator> <name pos:line="129" pos:column="26">APR_NONBLOCK_READ<pos:position pos:line="129" pos:column="43"/></name><operator pos:line="129" pos:column="43">)<pos:position pos:line="129" pos:column="44"/></operator></expr>?<pos:position pos:line="129" pos:column="45"/></condition><then pos:line="129" pos:column="45"> <expr><name pos:line="129" pos:column="46">APR_EAGAIN<pos:position pos:line="129" pos:column="56"/></name></expr> <pos:position pos:line="129" pos:column="57"/></then><else pos:line="129" pos:column="57">: <expr><name pos:line="129" pos:column="59">APR_EOF<pos:position pos:line="129" pos:column="66"/></name></expr></else></ternary></expr>;<pos:position pos:line="129" pos:column="67"/></return>
    }<pos:position pos:line="130" pos:column="6"/></block></then></if>
    
    <if pos:line="132" pos:column="5">if <condition pos:line="132" pos:column="8">(<expr><name pos:line="132" pos:column="9">mode<pos:position pos:line="132" pos:column="13"/></name> <operator pos:line="132" pos:column="14">==<pos:position pos:line="132" pos:column="16"/></operator> <name pos:line="132" pos:column="17">AP_MODE_EXHAUSTIVE<pos:position pos:line="132" pos:column="35"/></name></expr>)<pos:position pos:line="132" pos:column="36"/></condition><then pos:line="132" pos:column="36"> <block pos:line="132" pos:column="37">{
        <comment type="block" pos:line="133" pos:column="9">/* return all we have */</comment>
        <expr_stmt><expr><call><name pos:line="134" pos:column="9">APR_BRIGADE_CONCAT<pos:position pos:line="134" pos:column="27"/></name><argument_list pos:line="134" pos:column="27">(<argument><expr><name pos:line="134" pos:column="28">bb<pos:position pos:line="134" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="32">task<pos:position pos:line="134" pos:column="36"/></name><operator pos:line="134" pos:column="36">-&gt;<pos:position pos:line="134" pos:column="41"/></operator><name pos:line="134" pos:column="38">input<pos:position pos:line="134" pos:column="43"/></name><operator pos:line="134" pos:column="43">.<pos:position pos:line="134" pos:column="44"/></operator><name pos:line="134" pos:column="44">bb<pos:position pos:line="134" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="134" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="134" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="135" pos:column="6"/></block></then>
    <elseif pos:line="136" pos:column="5">else <if pos:line="136" pos:column="10">if <condition pos:line="136" pos:column="13">(<expr><name pos:line="136" pos:column="14">mode<pos:position pos:line="136" pos:column="18"/></name> <operator pos:line="136" pos:column="19">==<pos:position pos:line="136" pos:column="21"/></operator> <name pos:line="136" pos:column="22">AP_MODE_READBYTES<pos:position pos:line="136" pos:column="39"/></name></expr>)<pos:position pos:line="136" pos:column="40"/></condition><then pos:line="136" pos:column="40"> <block pos:line="136" pos:column="41">{
        <expr_stmt><expr><name pos:line="137" pos:column="9">status<pos:position pos:line="137" pos:column="15"/></name> <operator pos:line="137" pos:column="16">=<pos:position pos:line="137" pos:column="17"/></operator> <call><name pos:line="137" pos:column="18">h2_brigade_concat_length<pos:position pos:line="137" pos:column="42"/></name><argument_list pos:line="137" pos:column="42">(<argument><expr><name pos:line="137" pos:column="43">bb<pos:position pos:line="137" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="47">task<pos:position pos:line="137" pos:column="51"/></name><operator pos:line="137" pos:column="51">-&gt;<pos:position pos:line="137" pos:column="56"/></operator><name pos:line="137" pos:column="53">input<pos:position pos:line="137" pos:column="58"/></name><operator pos:line="137" pos:column="58">.<pos:position pos:line="137" pos:column="59"/></operator><name pos:line="137" pos:column="59">bb<pos:position pos:line="137" pos:column="61"/></name></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="63">readbytes<pos:position pos:line="137" pos:column="72"/></name></expr></argument>)<pos:position pos:line="137" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="74"/></expr_stmt>
    }<pos:position pos:line="138" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="139" pos:column="5">else <if pos:line="139" pos:column="10">if <condition pos:line="139" pos:column="13">(<expr><name pos:line="139" pos:column="14">mode<pos:position pos:line="139" pos:column="18"/></name> <operator pos:line="139" pos:column="19">==<pos:position pos:line="139" pos:column="21"/></operator> <name pos:line="139" pos:column="22">AP_MODE_SPECULATIVE<pos:position pos:line="139" pos:column="41"/></name></expr>)<pos:position pos:line="139" pos:column="42"/></condition><then pos:line="139" pos:column="42"> <block pos:line="139" pos:column="43">{
        <expr_stmt><expr><name pos:line="140" pos:column="9">status<pos:position pos:line="140" pos:column="15"/></name> <operator pos:line="140" pos:column="16">=<pos:position pos:line="140" pos:column="17"/></operator> <call><name pos:line="140" pos:column="18">h2_brigade_copy_length<pos:position pos:line="140" pos:column="40"/></name><argument_list pos:line="140" pos:column="40">(<argument><expr><name pos:line="140" pos:column="41">bb<pos:position pos:line="140" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="140" pos:column="45">task<pos:position pos:line="140" pos:column="49"/></name><operator pos:line="140" pos:column="49">-&gt;<pos:position pos:line="140" pos:column="54"/></operator><name pos:line="140" pos:column="51">input<pos:position pos:line="140" pos:column="56"/></name><operator pos:line="140" pos:column="56">.<pos:position pos:line="140" pos:column="57"/></operator><name pos:line="140" pos:column="57">bb<pos:position pos:line="140" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="140" pos:column="61">readbytes<pos:position pos:line="140" pos:column="70"/></name></expr></argument>)<pos:position pos:line="140" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="141" pos:column="6"/></block></then></if></elseif>
    <elseif pos:line="142" pos:column="5">else <if pos:line="142" pos:column="10">if <condition pos:line="142" pos:column="13">(<expr><name pos:line="142" pos:column="14">mode<pos:position pos:line="142" pos:column="18"/></name> <operator pos:line="142" pos:column="19">==<pos:position pos:line="142" pos:column="21"/></operator> <name pos:line="142" pos:column="22">AP_MODE_GETLINE<pos:position pos:line="142" pos:column="37"/></name></expr>)<pos:position pos:line="142" pos:column="38"/></condition><then pos:line="142" pos:column="38"> <block pos:line="142" pos:column="39">{
        <comment type="block" pos:line="143" pos:column="9">/* we are reading a single LF line, e.g. the HTTP headers. 
         * this has the nasty side effect to split the bucket, even
         * though it ends with CRLF and creates a 0 length bucket */</comment>
        <expr_stmt><expr><name pos:line="146" pos:column="9">status<pos:position pos:line="146" pos:column="15"/></name> <operator pos:line="146" pos:column="16">=<pos:position pos:line="146" pos:column="17"/></operator> <call><name pos:line="146" pos:column="18">apr_brigade_split_line<pos:position pos:line="146" pos:column="40"/></name><argument_list pos:line="146" pos:column="40">(<argument><expr><name pos:line="146" pos:column="41">bb<pos:position pos:line="146" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="146" pos:column="45">task<pos:position pos:line="146" pos:column="49"/></name><operator pos:line="146" pos:column="49">-&gt;<pos:position pos:line="146" pos:column="54"/></operator><name pos:line="146" pos:column="51">input<pos:position pos:line="146" pos:column="56"/></name><operator pos:line="146" pos:column="56">.<pos:position pos:line="146" pos:column="57"/></operator><name pos:line="146" pos:column="57">bb<pos:position pos:line="146" pos:column="59"/></name></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="61">block<pos:position pos:line="146" pos:column="66"/></name></expr></argument>, 
                                        <argument><expr><name pos:line="147" pos:column="41">HUGE_STRING_LEN<pos:position pos:line="147" pos:column="56"/></name></expr></argument>)<pos:position pos:line="147" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="147" pos:column="58"/></expr_stmt>
        <if pos:line="148" pos:column="9">if <condition pos:line="148" pos:column="12">(<expr><call><name pos:line="148" pos:column="13">APLOGctrace1<pos:position pos:line="148" pos:column="25"/></name><argument_list pos:line="148" pos:column="25">(<argument><expr><name><name pos:line="148" pos:column="26">f<pos:position pos:line="148" pos:column="27"/></name><operator pos:line="148" pos:column="27">-&gt;<pos:position pos:line="148" pos:column="32"/></operator><name pos:line="148" pos:column="29">c<pos:position pos:line="148" pos:column="30"/></name></name></expr></argument>)<pos:position pos:line="148" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="148" pos:column="32"/></condition><then pos:line="148" pos:column="32"> <block pos:line="148" pos:column="33">{
            <decl_stmt><decl><type><name pos:line="149" pos:column="13">char<pos:position pos:line="149" pos:column="17"/></name></type> <name><name pos:line="149" pos:column="18">buffer<pos:position pos:line="149" pos:column="24"/></name><index pos:line="149" pos:column="24">[<expr><literal type="number" pos:line="149" pos:column="25">1024<pos:position pos:line="149" pos:column="29"/></literal></expr>]<pos:position pos:line="149" pos:column="30"/></index></name></decl>;<pos:position pos:line="149" pos:column="31"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="150" pos:column="13">apr_size_t<pos:position pos:line="150" pos:column="23"/></name></type> <name pos:line="150" pos:column="24">len<pos:position pos:line="150" pos:column="27"/></name> <init pos:line="150" pos:column="28">= <expr><sizeof pos:line="150" pos:column="30">sizeof<argument_list pos:line="150" pos:column="36">(<argument><expr><name pos:line="150" pos:column="37">buffer<pos:position pos:line="150" pos:column="43"/></name></expr></argument>)<pos:position pos:line="150" pos:column="44"/></argument_list></sizeof><operator pos:line="150" pos:column="44">-<pos:position pos:line="150" pos:column="45"/></operator><literal type="number" pos:line="150" pos:column="45">1<pos:position pos:line="150" pos:column="46"/></literal></expr></init></decl>;<pos:position pos:line="150" pos:column="47"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="151" pos:column="13">apr_brigade_flatten<pos:position pos:line="151" pos:column="32"/></name><argument_list pos:line="151" pos:column="32">(<argument><expr><name pos:line="151" pos:column="33">bb<pos:position pos:line="151" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="151" pos:column="37">buffer<pos:position pos:line="151" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="151" pos:column="45">&amp;<pos:position pos:line="151" pos:column="50"/></operator><name pos:line="151" pos:column="46">len<pos:position pos:line="151" pos:column="49"/></name></expr></argument>)<pos:position pos:line="151" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="51"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="152" pos:column="13">buffer<pos:position pos:line="152" pos:column="19"/></name><index pos:line="152" pos:column="19">[<expr><name pos:line="152" pos:column="20">len<pos:position pos:line="152" pos:column="23"/></name></expr>]<pos:position pos:line="152" pos:column="24"/></index></name> <operator pos:line="152" pos:column="25">=<pos:position pos:line="152" pos:column="26"/></operator> <literal type="number" pos:line="152" pos:column="27">0<pos:position pos:line="152" pos:column="28"/></literal></expr>;<pos:position pos:line="152" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="153" pos:column="13">ap_log_cerror<pos:position pos:line="153" pos:column="26"/></name><argument_list pos:line="153" pos:column="26">(<argument><expr><name pos:line="153" pos:column="27">APLOG_MARK<pos:position pos:line="153" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="39">APLOG_TRACE1<pos:position pos:line="153" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="53">status<pos:position pos:line="153" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="153" pos:column="61">f<pos:position pos:line="153" pos:column="62"/></name><operator pos:line="153" pos:column="62">-&gt;<pos:position pos:line="153" pos:column="67"/></operator><name pos:line="153" pos:column="64">c<pos:position pos:line="153" pos:column="65"/></name></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="154" pos:column="27">"h2_task(%s): getline: %s"<pos:position pos:line="154" pos:column="53"/></literal></expr></argument>,
                          <argument><expr><name><name pos:line="155" pos:column="27">task<pos:position pos:line="155" pos:column="31"/></name><operator pos:line="155" pos:column="31">-&gt;<pos:position pos:line="155" pos:column="36"/></operator><name pos:line="155" pos:column="33">id<pos:position pos:line="155" pos:column="35"/></name></name></expr></argument>, <argument><expr><name pos:line="155" pos:column="37">buffer<pos:position pos:line="155" pos:column="43"/></name></expr></argument>)<pos:position pos:line="155" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="155" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="156" pos:column="10"/></block></then></if>
    }<pos:position pos:line="157" pos:column="6"/></block></then></if></elseif>
    <else pos:line="158" pos:column="5">else <block pos:line="158" pos:column="10">{
        <comment type="block" pos:line="159" pos:column="9">/* Hmm, well. There is mode AP_MODE_EATCRLF, but we chose not
         * to support it. Seems to work. */</comment>
        <expr_stmt><expr><call><name pos:line="161" pos:column="9">ap_log_cerror<pos:position pos:line="161" pos:column="22"/></name><argument_list pos:line="161" pos:column="22">(<argument><expr><name pos:line="161" pos:column="23">APLOG_MARK<pos:position pos:line="161" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="35">APLOG_ERR<pos:position pos:line="161" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="161" pos:column="46">APR_ENOTIMPL<pos:position pos:line="161" pos:column="58"/></name></expr></argument>, <argument><expr><name><name pos:line="161" pos:column="60">f<pos:position pos:line="161" pos:column="61"/></name><operator pos:line="161" pos:column="61">-&gt;<pos:position pos:line="161" pos:column="66"/></operator><name pos:line="161" pos:column="63">c<pos:position pos:line="161" pos:column="64"/></name></name></expr></argument>,
                      <argument><expr><call><name pos:line="162" pos:column="23">APLOGNO<pos:position pos:line="162" pos:column="30"/></name><argument_list pos:line="162" pos:column="30">(<argument><expr><literal type="number" pos:line="162" pos:column="31">02942<pos:position pos:line="162" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="162" pos:column="37"/></argument_list></call> 
                      <literal type="string" pos:line="163" pos:column="23">"h2_task, unsupported READ mode %d"<pos:position pos:line="163" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="163" pos:column="60">mode<pos:position pos:line="163" pos:column="64"/></name></expr></argument>)<pos:position pos:line="163" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="66"/></expr_stmt>
        <expr_stmt><expr><name pos:line="164" pos:column="9">status<pos:position pos:line="164" pos:column="15"/></name> <operator pos:line="164" pos:column="16">=<pos:position pos:line="164" pos:column="17"/></operator> <name pos:line="164" pos:column="18">APR_ENOTIMPL<pos:position pos:line="164" pos:column="30"/></name></expr>;<pos:position pos:line="164" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="165" pos:column="6"/></block></else></if>
    
    <if pos:line="167" pos:column="5">if <condition pos:line="167" pos:column="8">(<expr><call><name pos:line="167" pos:column="9">APLOGctrace1<pos:position pos:line="167" pos:column="21"/></name><argument_list pos:line="167" pos:column="21">(<argument><expr><name><name pos:line="167" pos:column="22">f<pos:position pos:line="167" pos:column="23"/></name><operator pos:line="167" pos:column="23">-&gt;<pos:position pos:line="167" pos:column="28"/></operator><name pos:line="167" pos:column="25">c<pos:position pos:line="167" pos:column="26"/></name></name></expr></argument>)<pos:position pos:line="167" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="167" pos:column="28"/></condition><then pos:line="167" pos:column="28"> <block pos:line="167" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="168" pos:column="9">apr_brigade_length<pos:position pos:line="168" pos:column="27"/></name><argument_list pos:line="168" pos:column="27">(<argument><expr><name pos:line="168" pos:column="28">bb<pos:position pos:line="168" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="168" pos:column="32">0<pos:position pos:line="168" pos:column="33"/></literal></expr></argument>, <argument><expr><operator pos:line="168" pos:column="35">&amp;<pos:position pos:line="168" pos:column="40"/></operator><name pos:line="168" pos:column="36">bblen<pos:position pos:line="168" pos:column="41"/></name></expr></argument>)<pos:position pos:line="168" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="168" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="169" pos:column="9">ap_log_cerror<pos:position pos:line="169" pos:column="22"/></name><argument_list pos:line="169" pos:column="22">(<argument><expr><name pos:line="169" pos:column="23">APLOG_MARK<pos:position pos:line="169" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="35">APLOG_TRACE1<pos:position pos:line="169" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="169" pos:column="49">status<pos:position pos:line="169" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="169" pos:column="57">f<pos:position pos:line="169" pos:column="58"/></name><operator pos:line="169" pos:column="58">-&gt;<pos:position pos:line="169" pos:column="63"/></operator><name pos:line="169" pos:column="60">c<pos:position pos:line="169" pos:column="61"/></name></name></expr></argument>,
                      <argument><expr><literal type="string" pos:line="170" pos:column="23">"h2_task(%s): return %ld data bytes"<pos:position pos:line="170" pos:column="59"/></literal></expr></argument>,
                      <argument><expr><name><name pos:line="171" pos:column="23">task<pos:position pos:line="171" pos:column="27"/></name><operator pos:line="171" pos:column="27">-&gt;<pos:position pos:line="171" pos:column="32"/></operator><name pos:line="171" pos:column="29">id<pos:position pos:line="171" pos:column="31"/></name></name></expr></argument>, <argument><expr><operator pos:line="171" pos:column="33">(<pos:position pos:line="171" pos:column="34"/></operator><name pos:line="171" pos:column="34">long<pos:position pos:line="171" pos:column="38"/></name><operator pos:line="171" pos:column="38">)<pos:position pos:line="171" pos:column="39"/></operator><name pos:line="171" pos:column="39">bblen<pos:position pos:line="171" pos:column="44"/></name></expr></argument>)<pos:position pos:line="171" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="46"/></expr_stmt>
    }<pos:position pos:line="172" pos:column="6"/></block></then></if>
    <return pos:line="173" pos:column="5">return <expr><name pos:line="173" pos:column="12">status<pos:position pos:line="173" pos:column="18"/></name></expr>;<pos:position pos:line="173" pos:column="19"/></return>
}<pos:position pos:line="174" pos:column="2"/></block></function></unit>
