<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3951_httpd-2.2.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">BOOL<pos:position pos:line="1" pos:column="12"/></name></type>
<name pos:line="2" pos:column="1">compile_branch<pos:position pos:line="2" pos:column="15"/></name><parameter_list pos:line="2" pos:column="15">(<parameter><decl><type><name pos:line="2" pos:column="16">int<pos:position pos:line="2" pos:column="19"/></name> <modifier pos:line="2" pos:column="20">*<pos:position pos:line="2" pos:column="21"/></modifier></type><name pos:line="2" pos:column="21">optionsptr<pos:position pos:line="2" pos:column="31"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="33">int<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">brackets<pos:position pos:line="2" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="48">uschar<pos:position pos:line="2" pos:column="54"/></name> <modifier pos:line="2" pos:column="55">*<pos:position pos:line="2" pos:column="56"/></modifier><modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">codeptr<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
  <parameter><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">uschar<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier><modifier pos:line="3" pos:column="17">*<pos:position pos:line="3" pos:column="18"/></modifier></type><name pos:line="3" pos:column="18">ptrptr<pos:position pos:line="3" pos:column="24"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="3" pos:column="26">const<pos:position pos:line="3" pos:column="31"/></specifier> <name pos:line="3" pos:column="32">char<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier><modifier pos:line="3" pos:column="38">*<pos:position pos:line="3" pos:column="39"/></modifier></type><name pos:line="3" pos:column="39">errorptr<pos:position pos:line="3" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="49">int<pos:position pos:line="3" pos:column="52"/></name> <modifier pos:line="3" pos:column="53">*<pos:position pos:line="3" pos:column="54"/></modifier></type><name pos:line="3" pos:column="54">firstbyteptr<pos:position pos:line="3" pos:column="66"/></name></decl></parameter>,
  <parameter><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name> <modifier pos:line="4" pos:column="7">*<pos:position pos:line="4" pos:column="8"/></modifier></type><name pos:line="4" pos:column="8">reqbyteptr<pos:position pos:line="4" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="20">branch_chain<pos:position pos:line="4" pos:column="32"/></name> <modifier pos:line="4" pos:column="33">*<pos:position pos:line="4" pos:column="34"/></modifier></type><name pos:line="4" pos:column="34">bcptr<pos:position pos:line="4" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="4" pos:column="41">compile_data<pos:position pos:line="4" pos:column="53"/></name> <modifier pos:line="4" pos:column="54">*<pos:position pos:line="4" pos:column="55"/></modifier></type><name pos:line="4" pos:column="55">cd<pos:position pos:line="4" pos:column="57"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="58"/></parameter_list>
<block pos:line="5" pos:column="1">{
<decl_stmt><decl><type><name pos:line="6" pos:column="1">int<pos:position pos:line="6" pos:column="4"/></name></type> <name pos:line="6" pos:column="5">repeat_type<pos:position pos:line="6" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="18">op_type<pos:position pos:line="6" pos:column="25"/></name></decl>;<pos:position pos:line="6" pos:column="26"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">int<pos:position pos:line="7" pos:column="4"/></name></type> <name pos:line="7" pos:column="5">repeat_min<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><literal type="number" pos:line="7" pos:column="18">0<pos:position pos:line="7" pos:column="19"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="7" pos:column="21">repeat_max<pos:position pos:line="7" pos:column="31"/></name> <init pos:line="7" pos:column="32">= <expr><literal type="number" pos:line="7" pos:column="34">0<pos:position pos:line="7" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="36"/></decl_stmt>      <comment type="block" pos:line="7" pos:column="42">/* To please picky compilers */</comment>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">int<pos:position pos:line="8" pos:column="4"/></name></type> <name pos:line="8" pos:column="5">bravalue<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><literal type="number" pos:line="8" pos:column="16">0<pos:position pos:line="8" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="18"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="9" pos:column="1">int<pos:position pos:line="9" pos:column="4"/></name></type> <name pos:line="9" pos:column="5">greedy_default<pos:position pos:line="9" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="9" pos:column="21">greedy_non_default<pos:position pos:line="9" pos:column="39"/></name></decl>;<pos:position pos:line="9" pos:column="40"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="10" pos:column="1">int<pos:position pos:line="10" pos:column="4"/></name></type> <name pos:line="10" pos:column="5">firstbyte<pos:position pos:line="10" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="10" pos:column="16">reqbyte<pos:position pos:line="10" pos:column="23"/></name></decl>;<pos:position pos:line="10" pos:column="24"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="11" pos:column="1">int<pos:position pos:line="11" pos:column="4"/></name></type> <name pos:line="11" pos:column="5">zeroreqbyte<pos:position pos:line="11" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="11" pos:column="18">zerofirstbyte<pos:position pos:line="11" pos:column="31"/></name></decl>;<pos:position pos:line="11" pos:column="32"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="12" pos:column="1">int<pos:position pos:line="12" pos:column="4"/></name></type> <name pos:line="12" pos:column="5">req_caseopt<pos:position pos:line="12" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="18">reqvary<pos:position pos:line="12" pos:column="25"/></name></decl>, <decl><type ref="prev"/><name pos:line="12" pos:column="27">tempreqvary<pos:position pos:line="12" pos:column="38"/></name></decl>;<pos:position pos:line="12" pos:column="39"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="13" pos:column="1">int<pos:position pos:line="13" pos:column="4"/></name></type> <name pos:line="13" pos:column="5">condcount<pos:position pos:line="13" pos:column="14"/></name> <init pos:line="13" pos:column="15">= <expr><literal type="number" pos:line="13" pos:column="17">0<pos:position pos:line="13" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="14" pos:column="1">int<pos:position pos:line="14" pos:column="4"/></name></type> <name pos:line="14" pos:column="5">options<pos:position pos:line="14" pos:column="12"/></name> <init pos:line="14" pos:column="13">= <expr><operator pos:line="14" pos:column="15">*<pos:position pos:line="14" pos:column="16"/></operator><name pos:line="14" pos:column="16">optionsptr<pos:position pos:line="14" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="27"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="15" pos:column="1">int<pos:position pos:line="15" pos:column="4"/></name></type> <name pos:line="15" pos:column="5">after_manual_callout<pos:position pos:line="15" pos:column="25"/></name> <init pos:line="15" pos:column="26">= <expr><literal type="number" pos:line="15" pos:column="28">0<pos:position pos:line="15" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="15" pos:column="30"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="16" pos:column="1">register<pos:position pos:line="16" pos:column="9"/></specifier> <name pos:line="16" pos:column="10">int<pos:position pos:line="16" pos:column="13"/></name></type> <name pos:line="16" pos:column="14">c<pos:position pos:line="16" pos:column="15"/></name></decl>;<pos:position pos:line="16" pos:column="16"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="17" pos:column="1">register<pos:position pos:line="17" pos:column="9"/></specifier> <name pos:line="17" pos:column="10">uschar<pos:position pos:line="17" pos:column="16"/></name> <modifier pos:line="17" pos:column="17">*<pos:position pos:line="17" pos:column="18"/></modifier></type><name pos:line="17" pos:column="18">code<pos:position pos:line="17" pos:column="22"/></name> <init pos:line="17" pos:column="23">= <expr><operator pos:line="17" pos:column="25">*<pos:position pos:line="17" pos:column="26"/></operator><name pos:line="17" pos:column="26">codeptr<pos:position pos:line="17" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="17" pos:column="34"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="18" pos:column="1">uschar<pos:position pos:line="18" pos:column="7"/></name> <modifier pos:line="18" pos:column="8">*<pos:position pos:line="18" pos:column="9"/></modifier></type><name pos:line="18" pos:column="9">tempcode<pos:position pos:line="18" pos:column="17"/></name></decl>;<pos:position pos:line="18" pos:column="18"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="19" pos:column="1">BOOL<pos:position pos:line="19" pos:column="5"/></name></type> <name pos:line="19" pos:column="6">inescq<pos:position pos:line="19" pos:column="12"/></name> <init pos:line="19" pos:column="13">= <expr><name pos:line="19" pos:column="15">FALSE<pos:position pos:line="19" pos:column="20"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="21"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="20" pos:column="1">BOOL<pos:position pos:line="20" pos:column="5"/></name></type> <name pos:line="20" pos:column="6">groupsetfirstbyte<pos:position pos:line="20" pos:column="23"/></name> <init pos:line="20" pos:column="24">= <expr><name pos:line="20" pos:column="26">FALSE<pos:position pos:line="20" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="20" pos:column="32"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="21" pos:column="1">const<pos:position pos:line="21" pos:column="6"/></specifier> <name pos:line="21" pos:column="7">uschar<pos:position pos:line="21" pos:column="13"/></name> <modifier pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></modifier></type><name pos:line="21" pos:column="15">ptr<pos:position pos:line="21" pos:column="18"/></name> <init pos:line="21" pos:column="19">= <expr><operator pos:line="21" pos:column="21">*<pos:position pos:line="21" pos:column="22"/></operator><name pos:line="21" pos:column="22">ptrptr<pos:position pos:line="21" pos:column="28"/></name></expr></init></decl>;<pos:position pos:line="21" pos:column="29"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="22" pos:column="1">const<pos:position pos:line="22" pos:column="6"/></specifier> <name pos:line="22" pos:column="7">uschar<pos:position pos:line="22" pos:column="13"/></name> <modifier pos:line="22" pos:column="14">*<pos:position pos:line="22" pos:column="15"/></modifier></type><name pos:line="22" pos:column="15">tempptr<pos:position pos:line="22" pos:column="22"/></name></decl>;<pos:position pos:line="22" pos:column="23"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="23" pos:column="1">uschar<pos:position pos:line="23" pos:column="7"/></name> <modifier pos:line="23" pos:column="8">*<pos:position pos:line="23" pos:column="9"/></modifier></type><name pos:line="23" pos:column="9">previous<pos:position pos:line="23" pos:column="17"/></name> <init pos:line="23" pos:column="18">= <expr><name pos:line="23" pos:column="20">NULL<pos:position pos:line="23" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="23" pos:column="25"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="24" pos:column="1">uschar<pos:position pos:line="24" pos:column="7"/></name> <modifier pos:line="24" pos:column="8">*<pos:position pos:line="24" pos:column="9"/></modifier></type><name pos:line="24" pos:column="9">previous_callout<pos:position pos:line="24" pos:column="25"/></name> <init pos:line="24" pos:column="26">= <expr><name pos:line="24" pos:column="28">NULL<pos:position pos:line="24" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="24" pos:column="33"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="25" pos:column="1">uschar<pos:position pos:line="25" pos:column="7"/></name></type> <name><name pos:line="25" pos:column="8">classbits<pos:position pos:line="25" pos:column="17"/></name><index pos:line="25" pos:column="17">[<expr><literal type="number" pos:line="25" pos:column="18">32<pos:position pos:line="25" pos:column="20"/></literal></expr>]<pos:position pos:line="25" pos:column="21"/></index></name></decl>;<pos:position pos:line="25" pos:column="22"/></decl_stmt>

<cpp:ifdef pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">ifdef<pos:position pos:line="27" pos:column="7"/></cpp:directive> <name pos:line="27" pos:column="8">SUPPORT_UTF8<pos:position pos:line="27" pos:column="20"/></name></cpp:ifdef>
<decl_stmt><decl><type><name pos:line="28" pos:column="1">BOOL<pos:position pos:line="28" pos:column="5"/></name></type> <name pos:line="28" pos:column="6">class_utf8<pos:position pos:line="28" pos:column="16"/></name></decl>;<pos:position pos:line="28" pos:column="17"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="29" pos:column="1">BOOL<pos:position pos:line="29" pos:column="5"/></name></type> <name pos:line="29" pos:column="6">utf8<pos:position pos:line="29" pos:column="10"/></name> <init pos:line="29" pos:column="11">= <expr><operator pos:line="29" pos:column="13">(<pos:position pos:line="29" pos:column="14"/></operator><name pos:line="29" pos:column="14">options<pos:position pos:line="29" pos:column="21"/></name> <operator pos:line="29" pos:column="22">&amp;<pos:position pos:line="29" pos:column="27"/></operator> <name pos:line="29" pos:column="24">PCRE_UTF8<pos:position pos:line="29" pos:column="33"/></name><operator pos:line="29" pos:column="33">)<pos:position pos:line="29" pos:column="34"/></operator> <operator pos:line="29" pos:column="35">!=<pos:position pos:line="29" pos:column="37"/></operator> <literal type="number" pos:line="29" pos:column="38">0<pos:position pos:line="29" pos:column="39"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="40"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="30" pos:column="1">uschar<pos:position pos:line="30" pos:column="7"/></name> <modifier pos:line="30" pos:column="8">*<pos:position pos:line="30" pos:column="9"/></modifier></type><name pos:line="30" pos:column="9">class_utf8data<pos:position pos:line="30" pos:column="23"/></name></decl>;<pos:position pos:line="30" pos:column="24"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="31" pos:column="1">uschar<pos:position pos:line="31" pos:column="7"/></name></type> <name><name pos:line="31" pos:column="8">utf8_char<pos:position pos:line="31" pos:column="17"/></name><index pos:line="31" pos:column="17">[<expr><literal type="number" pos:line="31" pos:column="18">6<pos:position pos:line="31" pos:column="19"/></literal></expr>]<pos:position pos:line="31" pos:column="20"/></index></name></decl>;<pos:position pos:line="31" pos:column="21"/></decl_stmt>
<cpp:else pos:line="32" pos:column="1">#<cpp:directive pos:line="32" pos:column="2">else<pos:position pos:line="32" pos:column="6"/></cpp:directive></cpp:else>
<decl_stmt><decl><type><name pos:line="33" pos:column="1">BOOL<pos:position pos:line="33" pos:column="5"/></name></type> <name pos:line="33" pos:column="6">utf8<pos:position pos:line="33" pos:column="10"/></name> <init pos:line="33" pos:column="11">= <expr><name pos:line="33" pos:column="13">FALSE<pos:position pos:line="33" pos:column="18"/></name></expr></init></decl>;<pos:position pos:line="33" pos:column="19"/></decl_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="36" pos:column="1">/* Set up the default and non-default settings for greediness */</comment>

<expr_stmt><expr><name pos:line="38" pos:column="1">greedy_default<pos:position pos:line="38" pos:column="15"/></name> <operator pos:line="38" pos:column="16">=<pos:position pos:line="38" pos:column="17"/></operator> <operator pos:line="38" pos:column="18">(<pos:position pos:line="38" pos:column="19"/></operator><operator pos:line="38" pos:column="19">(<pos:position pos:line="38" pos:column="20"/></operator><name pos:line="38" pos:column="20">options<pos:position pos:line="38" pos:column="27"/></name> <operator pos:line="38" pos:column="28">&amp;<pos:position pos:line="38" pos:column="33"/></operator> <name pos:line="38" pos:column="30">PCRE_UNGREEDY<pos:position pos:line="38" pos:column="43"/></name><operator pos:line="38" pos:column="43">)<pos:position pos:line="38" pos:column="44"/></operator> <operator pos:line="38" pos:column="45">!=<pos:position pos:line="38" pos:column="47"/></operator> <literal type="number" pos:line="38" pos:column="48">0<pos:position pos:line="38" pos:column="49"/></literal><operator pos:line="38" pos:column="49">)<pos:position pos:line="38" pos:column="50"/></operator></expr>;<pos:position pos:line="38" pos:column="51"/></expr_stmt>
<expr_stmt><expr><name pos:line="39" pos:column="1">greedy_non_default<pos:position pos:line="39" pos:column="19"/></name> <operator pos:line="39" pos:column="20">=<pos:position pos:line="39" pos:column="21"/></operator> <name pos:line="39" pos:column="22">greedy_default<pos:position pos:line="39" pos:column="36"/></name> <operator pos:line="39" pos:column="37">^<pos:position pos:line="39" pos:column="38"/></operator> <literal type="number" pos:line="39" pos:column="39">1<pos:position pos:line="39" pos:column="40"/></literal></expr>;<pos:position pos:line="39" pos:column="41"/></expr_stmt>

<comment type="block" pos:line="41" pos:column="1">/* Initialize no first byte, no required byte. REQ_UNSET means "no char
matching encountered yet". It gets changed to REQ_NONE if we hit something that
matches a non-fixed char first char; reqbyte just remains unset if we never
find one.

When we hit a repeat whose minimum is zero, we may have to adjust these values
to take the zero repeat into account. This is implemented by setting them to
zerofirstbyte and zeroreqbyte when such a repeat is encountered. The individual
item types that can be repeated set these backoff variables appropriately. */</comment>

<expr_stmt><expr><name pos:line="51" pos:column="1">firstbyte<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">=<pos:position pos:line="51" pos:column="12"/></operator> <name pos:line="51" pos:column="13">reqbyte<pos:position pos:line="51" pos:column="20"/></name> <operator pos:line="51" pos:column="21">=<pos:position pos:line="51" pos:column="22"/></operator> <name pos:line="51" pos:column="23">zerofirstbyte<pos:position pos:line="51" pos:column="36"/></name> <operator pos:line="51" pos:column="37">=<pos:position pos:line="51" pos:column="38"/></operator> <name pos:line="51" pos:column="39">zeroreqbyte<pos:position pos:line="51" pos:column="50"/></name> <operator pos:line="51" pos:column="51">=<pos:position pos:line="51" pos:column="52"/></operator> <name pos:line="51" pos:column="53">REQ_UNSET<pos:position pos:line="51" pos:column="62"/></name></expr>;<pos:position pos:line="51" pos:column="63"/></expr_stmt>

<comment type="block" pos:line="53" pos:column="1">/* The variable req_caseopt contains either the REQ_CASELESS value or zero,
according to the current setting of the caseless flag. REQ_CASELESS is a bit
value &gt; 255. It is added into the firstbyte or reqbyte variables to record the
case status of the value. This is used only for ASCII characters. */</comment>

<expr_stmt><expr><name pos:line="58" pos:column="1">req_caseopt<pos:position pos:line="58" pos:column="12"/></name> <operator pos:line="58" pos:column="13">=<pos:position pos:line="58" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="58" pos:column="15">(<pos:position pos:line="58" pos:column="16"/></operator><operator pos:line="58" pos:column="16">(<pos:position pos:line="58" pos:column="17"/></operator><name pos:line="58" pos:column="17">options<pos:position pos:line="58" pos:column="24"/></name> <operator pos:line="58" pos:column="25">&amp;<pos:position pos:line="58" pos:column="30"/></operator> <name pos:line="58" pos:column="27">PCRE_CASELESS<pos:position pos:line="58" pos:column="40"/></name><operator pos:line="58" pos:column="40">)<pos:position pos:line="58" pos:column="41"/></operator> <operator pos:line="58" pos:column="42">!=<pos:position pos:line="58" pos:column="44"/></operator> <literal type="number" pos:line="58" pos:column="45">0<pos:position pos:line="58" pos:column="46"/></literal><operator pos:line="58" pos:column="46">)<pos:position pos:line="58" pos:column="47"/></operator></expr>?<pos:position pos:line="58" pos:column="48"/></condition><then pos:line="58" pos:column="48"> <expr><name pos:line="58" pos:column="49">REQ_CASELESS<pos:position pos:line="58" pos:column="61"/></name></expr> <pos:position pos:line="58" pos:column="62"/></then><else pos:line="58" pos:column="62">: <expr><literal type="number" pos:line="58" pos:column="64">0<pos:position pos:line="58" pos:column="65"/></literal></expr></else></ternary></expr>;<pos:position pos:line="58" pos:column="66"/></expr_stmt>

<comment type="block" pos:line="60" pos:column="1">/* Switch on next character until the end of the branch */</comment>

<for pos:line="62" pos:column="1">for <control pos:line="62" pos:column="5">(<init pos:line="62" pos:column="6">;<pos:position pos:line="62" pos:column="7"/></init><condition pos:line="62" pos:column="7">;<pos:position pos:line="62" pos:column="8"/></condition> <incr><expr><name pos:line="62" pos:column="9">ptr<pos:position pos:line="62" pos:column="12"/></name><operator pos:line="62" pos:column="12">++<pos:position pos:line="62" pos:column="14"/></operator></expr></incr>)<pos:position pos:line="62" pos:column="15"/></control>
  <block pos:line="63" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="64" pos:column="3">BOOL<pos:position pos:line="64" pos:column="7"/></name></type> <name pos:line="64" pos:column="8">negate_class<pos:position pos:line="64" pos:column="20"/></name></decl>;<pos:position pos:line="64" pos:column="21"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="65" pos:column="3">BOOL<pos:position pos:line="65" pos:column="7"/></name></type> <name pos:line="65" pos:column="8">possessive_quantifier<pos:position pos:line="65" pos:column="29"/></name></decl>;<pos:position pos:line="65" pos:column="30"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="66" pos:column="3">BOOL<pos:position pos:line="66" pos:column="7"/></name></type> <name pos:line="66" pos:column="8">is_quantifier<pos:position pos:line="66" pos:column="21"/></name></decl>;<pos:position pos:line="66" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="67" pos:column="3">int<pos:position pos:line="67" pos:column="6"/></name></type> <name pos:line="67" pos:column="7">class_charcount<pos:position pos:line="67" pos:column="22"/></name></decl>;<pos:position pos:line="67" pos:column="23"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="68" pos:column="3">int<pos:position pos:line="68" pos:column="6"/></name></type> <name pos:line="68" pos:column="7">class_lastchar<pos:position pos:line="68" pos:column="21"/></name></decl>;<pos:position pos:line="68" pos:column="22"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="69" pos:column="3">int<pos:position pos:line="69" pos:column="6"/></name></type> <name pos:line="69" pos:column="7">newoptions<pos:position pos:line="69" pos:column="17"/></name></decl>;<pos:position pos:line="69" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="70" pos:column="3">int<pos:position pos:line="70" pos:column="6"/></name></type> <name pos:line="70" pos:column="7">recno<pos:position pos:line="70" pos:column="12"/></name></decl>;<pos:position pos:line="70" pos:column="13"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="71" pos:column="3">int<pos:position pos:line="71" pos:column="6"/></name></type> <name pos:line="71" pos:column="7">skipbytes<pos:position pos:line="71" pos:column="16"/></name></decl>;<pos:position pos:line="71" pos:column="17"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="72" pos:column="3">int<pos:position pos:line="72" pos:column="6"/></name></type> <name pos:line="72" pos:column="7">subreqbyte<pos:position pos:line="72" pos:column="17"/></name></decl>;<pos:position pos:line="72" pos:column="18"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="73" pos:column="3">int<pos:position pos:line="73" pos:column="6"/></name></type> <name pos:line="73" pos:column="7">subfirstbyte<pos:position pos:line="73" pos:column="19"/></name></decl>;<pos:position pos:line="73" pos:column="20"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="74" pos:column="3">int<pos:position pos:line="74" pos:column="6"/></name></type> <name pos:line="74" pos:column="7">mclength<pos:position pos:line="74" pos:column="15"/></name></decl>;<pos:position pos:line="74" pos:column="16"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="75" pos:column="3">uschar<pos:position pos:line="75" pos:column="9"/></name></type> <name><name pos:line="75" pos:column="10">mcbuffer<pos:position pos:line="75" pos:column="18"/></name><index pos:line="75" pos:column="18">[<expr><literal type="number" pos:line="75" pos:column="19">8<pos:position pos:line="75" pos:column="20"/></literal></expr>]<pos:position pos:line="75" pos:column="21"/></index></name></decl>;<pos:position pos:line="75" pos:column="22"/></decl_stmt>

  <comment type="block" pos:line="77" pos:column="3">/* Next byte in the pattern */</comment>

  <expr_stmt><expr><name pos:line="79" pos:column="3">c<pos:position pos:line="79" pos:column="4"/></name> <operator pos:line="79" pos:column="5">=<pos:position pos:line="79" pos:column="6"/></operator> <operator pos:line="79" pos:column="7">*<pos:position pos:line="79" pos:column="8"/></operator><name pos:line="79" pos:column="8">ptr<pos:position pos:line="79" pos:column="11"/></name></expr>;<pos:position pos:line="79" pos:column="12"/></expr_stmt>

  <comment type="block" pos:line="81" pos:column="3">/* If in \Q...\E, check for the end; if not, we have a literal */</comment>

  <if pos:line="83" pos:column="3">if <condition pos:line="83" pos:column="6">(<expr><name pos:line="83" pos:column="7">inescq<pos:position pos:line="83" pos:column="13"/></name> <operator pos:line="83" pos:column="14">&amp;&amp;<pos:position pos:line="83" pos:column="24"/></operator> <name pos:line="83" pos:column="17">c<pos:position pos:line="83" pos:column="18"/></name> <operator pos:line="83" pos:column="19">!=<pos:position pos:line="83" pos:column="21"/></operator> <literal type="number" pos:line="83" pos:column="22">0<pos:position pos:line="83" pos:column="23"/></literal></expr>)<pos:position pos:line="83" pos:column="24"/></condition><then pos:line="83" pos:column="24">
    <block pos:line="84" pos:column="5">{
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name pos:line="85" pos:column="9">c<pos:position pos:line="85" pos:column="10"/></name> <operator pos:line="85" pos:column="11">==<pos:position pos:line="85" pos:column="13"/></operator> <literal type="char" pos:line="85" pos:column="14">'\\'<pos:position pos:line="85" pos:column="18"/></literal> <operator pos:line="85" pos:column="19">&amp;&amp;<pos:position pos:line="85" pos:column="29"/></operator> <name><name pos:line="85" pos:column="22">ptr<pos:position pos:line="85" pos:column="25"/></name><index pos:line="85" pos:column="25">[<expr><literal type="number" pos:line="85" pos:column="26">1<pos:position pos:line="85" pos:column="27"/></literal></expr>]<pos:position pos:line="85" pos:column="28"/></index></name> <operator pos:line="85" pos:column="29">==<pos:position pos:line="85" pos:column="31"/></operator> <literal type="char" pos:line="85" pos:column="32">'E'<pos:position pos:line="85" pos:column="35"/></literal></expr>)<pos:position pos:line="85" pos:column="36"/></condition><then pos:line="85" pos:column="36">
      <block pos:line="86" pos:column="7">{
      <expr_stmt><expr><name pos:line="87" pos:column="7">inescq<pos:position pos:line="87" pos:column="13"/></name> <operator pos:line="87" pos:column="14">=<pos:position pos:line="87" pos:column="15"/></operator> <name pos:line="87" pos:column="16">FALSE<pos:position pos:line="87" pos:column="21"/></name></expr>;<pos:position pos:line="87" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="88" pos:column="7">ptr<pos:position pos:line="88" pos:column="10"/></name><operator pos:line="88" pos:column="10">++<pos:position pos:line="88" pos:column="12"/></operator></expr>;<pos:position pos:line="88" pos:column="13"/></expr_stmt>
      <continue pos:line="89" pos:column="7">continue;<pos:position pos:line="89" pos:column="16"/></continue>
      }<pos:position pos:line="90" pos:column="8"/></block></then>
    <else pos:line="91" pos:column="5">else
      <block pos:line="92" pos:column="7">{
      <if pos:line="93" pos:column="7">if <condition pos:line="93" pos:column="10">(<expr><name pos:line="93" pos:column="11">previous_callout<pos:position pos:line="93" pos:column="27"/></name> <operator pos:line="93" pos:column="28">!=<pos:position pos:line="93" pos:column="30"/></operator> <name pos:line="93" pos:column="31">NULL<pos:position pos:line="93" pos:column="35"/></name></expr>)<pos:position pos:line="93" pos:column="36"/></condition><then pos:line="93" pos:column="36">
        <block pos:line="94" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">complete_callout<pos:position pos:line="95" pos:column="25"/></name><argument_list pos:line="95" pos:column="25">(<argument><expr><name pos:line="95" pos:column="26">previous_callout<pos:position pos:line="95" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="44">ptr<pos:position pos:line="95" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="95" pos:column="49">cd<pos:position pos:line="95" pos:column="51"/></name></expr></argument>)<pos:position pos:line="95" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><name pos:line="96" pos:column="9">previous_callout<pos:position pos:line="96" pos:column="25"/></name> <operator pos:line="96" pos:column="26">=<pos:position pos:line="96" pos:column="27"/></operator> <name pos:line="96" pos:column="28">NULL<pos:position pos:line="96" pos:column="32"/></name></expr>;<pos:position pos:line="96" pos:column="33"/></expr_stmt>
        }<pos:position pos:line="97" pos:column="10"/></block></then></if>
      <if pos:line="98" pos:column="7">if <condition pos:line="98" pos:column="10">(<expr><operator pos:line="98" pos:column="11">(<pos:position pos:line="98" pos:column="12"/></operator><name pos:line="98" pos:column="12">options<pos:position pos:line="98" pos:column="19"/></name> <operator pos:line="98" pos:column="20">&amp;<pos:position pos:line="98" pos:column="25"/></operator> <name pos:line="98" pos:column="22">PCRE_AUTO_CALLOUT<pos:position pos:line="98" pos:column="39"/></name><operator pos:line="98" pos:column="39">)<pos:position pos:line="98" pos:column="40"/></operator> <operator pos:line="98" pos:column="41">!=<pos:position pos:line="98" pos:column="43"/></operator> <literal type="number" pos:line="98" pos:column="44">0<pos:position pos:line="98" pos:column="45"/></literal></expr>)<pos:position pos:line="98" pos:column="46"/></condition><then pos:line="98" pos:column="46">
        <block pos:line="99" pos:column="9">{
        <expr_stmt><expr><name pos:line="100" pos:column="9">previous_callout<pos:position pos:line="100" pos:column="25"/></name> <operator pos:line="100" pos:column="26">=<pos:position pos:line="100" pos:column="27"/></operator> <name pos:line="100" pos:column="28">code<pos:position pos:line="100" pos:column="32"/></name></expr>;<pos:position pos:line="100" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="101" pos:column="9">code<pos:position pos:line="101" pos:column="13"/></name> <operator pos:line="101" pos:column="14">=<pos:position pos:line="101" pos:column="15"/></operator> <call><name pos:line="101" pos:column="16">auto_callout<pos:position pos:line="101" pos:column="28"/></name><argument_list pos:line="101" pos:column="28">(<argument><expr><name pos:line="101" pos:column="29">code<pos:position pos:line="101" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="35">ptr<pos:position pos:line="101" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="101" pos:column="40">cd<pos:position pos:line="101" pos:column="42"/></name></expr></argument>)<pos:position pos:line="101" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="44"/></expr_stmt>
        }<pos:position pos:line="102" pos:column="10"/></block></then></if>
      <goto pos:line="103" pos:column="7">goto <name pos:line="103" pos:column="12">NORMAL_CHAR<pos:position pos:line="103" pos:column="23"/></name>;<pos:position pos:line="103" pos:column="24"/></goto>
      }<pos:position pos:line="104" pos:column="8"/></block></else></if>
    }<pos:position pos:line="105" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="107" pos:column="3">/* Fill in length of a previous callout, except when the next thing is
  a quantifier. */</comment>

  <expr_stmt><expr><name pos:line="110" pos:column="3">is_quantifier<pos:position pos:line="110" pos:column="16"/></name> <operator pos:line="110" pos:column="17">=<pos:position pos:line="110" pos:column="18"/></operator> <name pos:line="110" pos:column="19">c<pos:position pos:line="110" pos:column="20"/></name> <operator pos:line="110" pos:column="21">==<pos:position pos:line="110" pos:column="23"/></operator> <literal type="char" pos:line="110" pos:column="24">'*'<pos:position pos:line="110" pos:column="27"/></literal> <operator pos:line="110" pos:column="28">||<pos:position pos:line="110" pos:column="30"/></operator> <name pos:line="110" pos:column="31">c<pos:position pos:line="110" pos:column="32"/></name> <operator pos:line="110" pos:column="33">==<pos:position pos:line="110" pos:column="35"/></operator> <literal type="char" pos:line="110" pos:column="36">'+'<pos:position pos:line="110" pos:column="39"/></literal> <operator pos:line="110" pos:column="40">||<pos:position pos:line="110" pos:column="42"/></operator> <name pos:line="110" pos:column="43">c<pos:position pos:line="110" pos:column="44"/></name> <operator pos:line="110" pos:column="45">==<pos:position pos:line="110" pos:column="47"/></operator> <literal type="char" pos:line="110" pos:column="48">'?'<pos:position pos:line="110" pos:column="51"/></literal> <operator pos:line="110" pos:column="52">||<pos:position pos:line="110" pos:column="54"/></operator>
    <operator pos:line="111" pos:column="5">(<pos:position pos:line="111" pos:column="6"/></operator><name pos:line="111" pos:column="6">c<pos:position pos:line="111" pos:column="7"/></name> <operator pos:line="111" pos:column="8">==<pos:position pos:line="111" pos:column="10"/></operator> <literal type="char" pos:line="111" pos:column="11">'{'<pos:position pos:line="111" pos:column="14"/></literal> <operator pos:line="111" pos:column="15">&amp;&amp;<pos:position pos:line="111" pos:column="25"/></operator> <call><name pos:line="111" pos:column="18">is_counted_repeat<pos:position pos:line="111" pos:column="35"/></name><argument_list pos:line="111" pos:column="35">(<argument><expr><name pos:line="111" pos:column="36">ptr<pos:position pos:line="111" pos:column="39"/></name><operator pos:line="111" pos:column="39">+<pos:position pos:line="111" pos:column="40"/></operator><literal type="number" pos:line="111" pos:column="40">1<pos:position pos:line="111" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="42"/></argument_list></call><operator pos:line="111" pos:column="42">)<pos:position pos:line="111" pos:column="43"/></operator></expr>;<pos:position pos:line="111" pos:column="44"/></expr_stmt>

  <if pos:line="113" pos:column="3">if <condition pos:line="113" pos:column="6">(<expr><operator pos:line="113" pos:column="7">!<pos:position pos:line="113" pos:column="8"/></operator><name pos:line="113" pos:column="8">is_quantifier<pos:position pos:line="113" pos:column="21"/></name> <operator pos:line="113" pos:column="22">&amp;&amp;<pos:position pos:line="113" pos:column="32"/></operator> <name pos:line="113" pos:column="25">previous_callout<pos:position pos:line="113" pos:column="41"/></name> <operator pos:line="113" pos:column="42">!=<pos:position pos:line="113" pos:column="44"/></operator> <name pos:line="113" pos:column="45">NULL<pos:position pos:line="113" pos:column="49"/></name> <operator pos:line="113" pos:column="50">&amp;&amp;<pos:position pos:line="113" pos:column="60"/></operator>
       <name pos:line="114" pos:column="8">after_manual_callout<pos:position pos:line="114" pos:column="28"/></name><operator pos:line="114" pos:column="28">--<pos:position pos:line="114" pos:column="30"/></operator> <operator pos:line="114" pos:column="31">&lt;=<pos:position pos:line="114" pos:column="36"/></operator> <literal type="number" pos:line="114" pos:column="34">0<pos:position pos:line="114" pos:column="35"/></literal></expr>)<pos:position pos:line="114" pos:column="36"/></condition><then pos:line="114" pos:column="36">
    <block pos:line="115" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="116" pos:column="5">complete_callout<pos:position pos:line="116" pos:column="21"/></name><argument_list pos:line="116" pos:column="21">(<argument><expr><name pos:line="116" pos:column="22">previous_callout<pos:position pos:line="116" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="40">ptr<pos:position pos:line="116" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="116" pos:column="45">cd<pos:position pos:line="116" pos:column="47"/></name></expr></argument>)<pos:position pos:line="116" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="116" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="117" pos:column="5">previous_callout<pos:position pos:line="117" pos:column="21"/></name> <operator pos:line="117" pos:column="22">=<pos:position pos:line="117" pos:column="23"/></operator> <name pos:line="117" pos:column="24">NULL<pos:position pos:line="117" pos:column="28"/></name></expr>;<pos:position pos:line="117" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="118" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="120" pos:column="3">/* In extended mode, skip white space and comments */</comment>

  <if pos:line="122" pos:column="3">if <condition pos:line="122" pos:column="6">(<expr><operator pos:line="122" pos:column="7">(<pos:position pos:line="122" pos:column="8"/></operator><name pos:line="122" pos:column="8">options<pos:position pos:line="122" pos:column="15"/></name> <operator pos:line="122" pos:column="16">&amp;<pos:position pos:line="122" pos:column="21"/></operator> <name pos:line="122" pos:column="18">PCRE_EXTENDED<pos:position pos:line="122" pos:column="31"/></name><operator pos:line="122" pos:column="31">)<pos:position pos:line="122" pos:column="32"/></operator> <operator pos:line="122" pos:column="33">!=<pos:position pos:line="122" pos:column="35"/></operator> <literal type="number" pos:line="122" pos:column="36">0<pos:position pos:line="122" pos:column="37"/></literal></expr>)<pos:position pos:line="122" pos:column="38"/></condition><then pos:line="122" pos:column="38">
    <block pos:line="123" pos:column="5">{
    <if pos:line="124" pos:column="5">if <condition pos:line="124" pos:column="8">(<expr><operator pos:line="124" pos:column="9">(<pos:position pos:line="124" pos:column="10"/></operator><name><name pos:line="124" pos:column="10">cd<pos:position pos:line="124" pos:column="12"/></name><operator pos:line="124" pos:column="12">-&gt;<pos:position pos:line="124" pos:column="17"/></operator><name pos:line="124" pos:column="14">ctypes<pos:position pos:line="124" pos:column="20"/></name><index pos:line="124" pos:column="20">[<expr><name pos:line="124" pos:column="21">c<pos:position pos:line="124" pos:column="22"/></name></expr>]<pos:position pos:line="124" pos:column="23"/></index></name> <operator pos:line="124" pos:column="24">&amp;<pos:position pos:line="124" pos:column="29"/></operator> <name pos:line="124" pos:column="26">ctype_space<pos:position pos:line="124" pos:column="37"/></name><operator pos:line="124" pos:column="37">)<pos:position pos:line="124" pos:column="38"/></operator> <operator pos:line="124" pos:column="39">!=<pos:position pos:line="124" pos:column="41"/></operator> <literal type="number" pos:line="124" pos:column="42">0<pos:position pos:line="124" pos:column="43"/></literal></expr>)<pos:position pos:line="124" pos:column="44"/></condition><then pos:line="124" pos:column="44"> <block type="pseudo"><continue pos:line="124" pos:column="45">continue;<pos:position pos:line="124" pos:column="54"/></continue></block></then></if>
    <if pos:line="125" pos:column="5">if <condition pos:line="125" pos:column="8">(<expr><name pos:line="125" pos:column="9">c<pos:position pos:line="125" pos:column="10"/></name> <operator pos:line="125" pos:column="11">==<pos:position pos:line="125" pos:column="13"/></operator> <literal type="char" pos:line="125" pos:column="14">'#'<pos:position pos:line="125" pos:column="17"/></literal></expr>)<pos:position pos:line="125" pos:column="18"/></condition><then pos:line="125" pos:column="18">
      <block pos:line="126" pos:column="7">{
      <comment type="block" pos:line="127" pos:column="7">/* The space before the ; is to avoid a warning on a silly compiler
      on the Macintosh. */</comment>
      <while pos:line="129" pos:column="7">while <condition pos:line="129" pos:column="13">(<expr><operator pos:line="129" pos:column="14">(<pos:position pos:line="129" pos:column="15"/></operator><name pos:line="129" pos:column="15">c<pos:position pos:line="129" pos:column="16"/></name> <operator pos:line="129" pos:column="17">=<pos:position pos:line="129" pos:column="18"/></operator> <operator pos:line="129" pos:column="19">*<pos:position pos:line="129" pos:column="20"/></operator><operator pos:line="129" pos:column="20">(<pos:position pos:line="129" pos:column="21"/></operator><operator pos:line="129" pos:column="21">++<pos:position pos:line="129" pos:column="23"/></operator><name pos:line="129" pos:column="23">ptr<pos:position pos:line="129" pos:column="26"/></name><operator pos:line="129" pos:column="26">)<pos:position pos:line="129" pos:column="27"/></operator><operator pos:line="129" pos:column="27">)<pos:position pos:line="129" pos:column="28"/></operator> <operator pos:line="129" pos:column="29">!=<pos:position pos:line="129" pos:column="31"/></operator> <literal type="number" pos:line="129" pos:column="32">0<pos:position pos:line="129" pos:column="33"/></literal> <operator pos:line="129" pos:column="34">&amp;&amp;<pos:position pos:line="129" pos:column="44"/></operator> <name pos:line="129" pos:column="37">c<pos:position pos:line="129" pos:column="38"/></name> <operator pos:line="129" pos:column="39">!=<pos:position pos:line="129" pos:column="41"/></operator> <name pos:line="129" pos:column="42">NEWLINE<pos:position pos:line="129" pos:column="49"/></name></expr>)<pos:position pos:line="129" pos:column="50"/></condition> <block type="pseudo"><empty_stmt pos:line="129" pos:column="51">;<pos:position pos:line="129" pos:column="52"/></empty_stmt></block></while>
      <if pos:line="130" pos:column="7">if <condition pos:line="130" pos:column="10">(<expr><name pos:line="130" pos:column="11">c<pos:position pos:line="130" pos:column="12"/></name> <operator pos:line="130" pos:column="13">!=<pos:position pos:line="130" pos:column="15"/></operator> <literal type="number" pos:line="130" pos:column="16">0<pos:position pos:line="130" pos:column="17"/></literal></expr>)<pos:position pos:line="130" pos:column="18"/></condition><then pos:line="130" pos:column="18"> <block type="pseudo"><continue pos:line="130" pos:column="19">continue;<pos:position pos:line="130" pos:column="28"/></continue></block></then></if>   <comment type="block" pos:line="130" pos:column="31">/* Else fall through to handle end of string */</comment>
      }<pos:position pos:line="131" pos:column="8"/></block></then></if>
    }<pos:position pos:line="132" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="134" pos:column="3">/* No auto callout for quantifiers. */</comment>

  <if pos:line="136" pos:column="3">if <condition pos:line="136" pos:column="6">(<expr><operator pos:line="136" pos:column="7">(<pos:position pos:line="136" pos:column="8"/></operator><name pos:line="136" pos:column="8">options<pos:position pos:line="136" pos:column="15"/></name> <operator pos:line="136" pos:column="16">&amp;<pos:position pos:line="136" pos:column="21"/></operator> <name pos:line="136" pos:column="18">PCRE_AUTO_CALLOUT<pos:position pos:line="136" pos:column="35"/></name><operator pos:line="136" pos:column="35">)<pos:position pos:line="136" pos:column="36"/></operator> <operator pos:line="136" pos:column="37">!=<pos:position pos:line="136" pos:column="39"/></operator> <literal type="number" pos:line="136" pos:column="40">0<pos:position pos:line="136" pos:column="41"/></literal> <operator pos:line="136" pos:column="42">&amp;&amp;<pos:position pos:line="136" pos:column="52"/></operator> <operator pos:line="136" pos:column="45">!<pos:position pos:line="136" pos:column="46"/></operator><name pos:line="136" pos:column="46">is_quantifier<pos:position pos:line="136" pos:column="59"/></name></expr>)<pos:position pos:line="136" pos:column="60"/></condition><then pos:line="136" pos:column="60">
    <block pos:line="137" pos:column="5">{
    <expr_stmt><expr><name pos:line="138" pos:column="5">previous_callout<pos:position pos:line="138" pos:column="21"/></name> <operator pos:line="138" pos:column="22">=<pos:position pos:line="138" pos:column="23"/></operator> <name pos:line="138" pos:column="24">code<pos:position pos:line="138" pos:column="28"/></name></expr>;<pos:position pos:line="138" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name pos:line="139" pos:column="5">code<pos:position pos:line="139" pos:column="9"/></name> <operator pos:line="139" pos:column="10">=<pos:position pos:line="139" pos:column="11"/></operator> <call><name pos:line="139" pos:column="12">auto_callout<pos:position pos:line="139" pos:column="24"/></name><argument_list pos:line="139" pos:column="24">(<argument><expr><name pos:line="139" pos:column="25">code<pos:position pos:line="139" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="31">ptr<pos:position pos:line="139" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="139" pos:column="36">cd<pos:position pos:line="139" pos:column="38"/></name></expr></argument>)<pos:position pos:line="139" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="140" pos:column="6"/></block></then></if>

  <switch pos:line="142" pos:column="3">switch<condition pos:line="142" pos:column="9">(<expr><name pos:line="142" pos:column="10">c<pos:position pos:line="142" pos:column="11"/></name></expr>)<pos:position pos:line="142" pos:column="12"/></condition>
    <block pos:line="143" pos:column="5">{
    <comment type="block" pos:line="144" pos:column="5">/* The branch terminates at end of string, |, or ). */</comment>

    <case pos:line="146" pos:column="5">case <expr><literal type="number" pos:line="146" pos:column="10">0<pos:position pos:line="146" pos:column="11"/></literal></expr>:<pos:position pos:line="146" pos:column="12"/></case>
    <case pos:line="147" pos:column="5">case <expr><literal type="char" pos:line="147" pos:column="10">'|'<pos:position pos:line="147" pos:column="13"/></literal></expr>:<pos:position pos:line="147" pos:column="14"/></case>
    <case pos:line="148" pos:column="5">case <expr><literal type="char" pos:line="148" pos:column="10">')'<pos:position pos:line="148" pos:column="13"/></literal></expr>:<pos:position pos:line="148" pos:column="14"/></case>
    <expr_stmt><expr><operator pos:line="149" pos:column="5">*<pos:position pos:line="149" pos:column="6"/></operator><name pos:line="149" pos:column="6">firstbyteptr<pos:position pos:line="149" pos:column="18"/></name> <operator pos:line="149" pos:column="19">=<pos:position pos:line="149" pos:column="20"/></operator> <name pos:line="149" pos:column="21">firstbyte<pos:position pos:line="149" pos:column="30"/></name></expr>;<pos:position pos:line="149" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="150" pos:column="5">*<pos:position pos:line="150" pos:column="6"/></operator><name pos:line="150" pos:column="6">reqbyteptr<pos:position pos:line="150" pos:column="16"/></name> <operator pos:line="150" pos:column="17">=<pos:position pos:line="150" pos:column="18"/></operator> <name pos:line="150" pos:column="19">reqbyte<pos:position pos:line="150" pos:column="26"/></name></expr>;<pos:position pos:line="150" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="151" pos:column="5">*<pos:position pos:line="151" pos:column="6"/></operator><name pos:line="151" pos:column="6">codeptr<pos:position pos:line="151" pos:column="13"/></name> <operator pos:line="151" pos:column="14">=<pos:position pos:line="151" pos:column="15"/></operator> <name pos:line="151" pos:column="16">code<pos:position pos:line="151" pos:column="20"/></name></expr>;<pos:position pos:line="151" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="152" pos:column="5">*<pos:position pos:line="152" pos:column="6"/></operator><name pos:line="152" pos:column="6">ptrptr<pos:position pos:line="152" pos:column="12"/></name> <operator pos:line="152" pos:column="13">=<pos:position pos:line="152" pos:column="14"/></operator> <name pos:line="152" pos:column="15">ptr<pos:position pos:line="152" pos:column="18"/></name></expr>;<pos:position pos:line="152" pos:column="19"/></expr_stmt>
    <return pos:line="153" pos:column="5">return <expr><name pos:line="153" pos:column="12">TRUE<pos:position pos:line="153" pos:column="16"/></name></expr>;<pos:position pos:line="153" pos:column="17"/></return>

    <comment type="block" pos:line="155" pos:column="5">/* Handle single-character metacharacters. In multiline mode, ^ disables
    the setting of any following char as a first character. */</comment>

    <case pos:line="158" pos:column="5">case <expr><literal type="char" pos:line="158" pos:column="10">'^'<pos:position pos:line="158" pos:column="13"/></literal></expr>:<pos:position pos:line="158" pos:column="14"/></case>
    <if pos:line="159" pos:column="5">if <condition pos:line="159" pos:column="8">(<expr><operator pos:line="159" pos:column="9">(<pos:position pos:line="159" pos:column="10"/></operator><name pos:line="159" pos:column="10">options<pos:position pos:line="159" pos:column="17"/></name> <operator pos:line="159" pos:column="18">&amp;<pos:position pos:line="159" pos:column="23"/></operator> <name pos:line="159" pos:column="20">PCRE_MULTILINE<pos:position pos:line="159" pos:column="34"/></name><operator pos:line="159" pos:column="34">)<pos:position pos:line="159" pos:column="35"/></operator> <operator pos:line="159" pos:column="36">!=<pos:position pos:line="159" pos:column="38"/></operator> <literal type="number" pos:line="159" pos:column="39">0<pos:position pos:line="159" pos:column="40"/></literal></expr>)<pos:position pos:line="159" pos:column="41"/></condition><then pos:line="159" pos:column="41">
      <block pos:line="160" pos:column="7">{
      <if pos:line="161" pos:column="7">if <condition pos:line="161" pos:column="10">(<expr><name pos:line="161" pos:column="11">firstbyte<pos:position pos:line="161" pos:column="20"/></name> <operator pos:line="161" pos:column="21">==<pos:position pos:line="161" pos:column="23"/></operator> <name pos:line="161" pos:column="24">REQ_UNSET<pos:position pos:line="161" pos:column="33"/></name></expr>)<pos:position pos:line="161" pos:column="34"/></condition><then pos:line="161" pos:column="34"> <block type="pseudo"><expr_stmt><expr><name pos:line="161" pos:column="35">firstbyte<pos:position pos:line="161" pos:column="44"/></name> <operator pos:line="161" pos:column="45">=<pos:position pos:line="161" pos:column="46"/></operator> <name pos:line="161" pos:column="47">REQ_NONE<pos:position pos:line="161" pos:column="55"/></name></expr>;<pos:position pos:line="161" pos:column="56"/></expr_stmt></block></then></if>
      }<pos:position pos:line="162" pos:column="8"/></block></then></if>
    <expr_stmt><expr><name pos:line="163" pos:column="5">previous<pos:position pos:line="163" pos:column="13"/></name> <operator pos:line="163" pos:column="14">=<pos:position pos:line="163" pos:column="15"/></operator> <name pos:line="163" pos:column="16">NULL<pos:position pos:line="163" pos:column="20"/></name></expr>;<pos:position pos:line="163" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="164" pos:column="5">*<pos:position pos:line="164" pos:column="6"/></operator><name pos:line="164" pos:column="6">code<pos:position pos:line="164" pos:column="10"/></name><operator pos:line="164" pos:column="10">++<pos:position pos:line="164" pos:column="12"/></operator> <operator pos:line="164" pos:column="13">=<pos:position pos:line="164" pos:column="14"/></operator> <name pos:line="164" pos:column="15">OP_CIRC<pos:position pos:line="164" pos:column="22"/></name></expr>;<pos:position pos:line="164" pos:column="23"/></expr_stmt>
    <break pos:line="165" pos:column="5">break;<pos:position pos:line="165" pos:column="11"/></break>

    <case pos:line="167" pos:column="5">case <expr><literal type="char" pos:line="167" pos:column="10">'$'<pos:position pos:line="167" pos:column="13"/></literal></expr>:<pos:position pos:line="167" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="168" pos:column="5">previous<pos:position pos:line="168" pos:column="13"/></name> <operator pos:line="168" pos:column="14">=<pos:position pos:line="168" pos:column="15"/></operator> <name pos:line="168" pos:column="16">NULL<pos:position pos:line="168" pos:column="20"/></name></expr>;<pos:position pos:line="168" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="169" pos:column="5">*<pos:position pos:line="169" pos:column="6"/></operator><name pos:line="169" pos:column="6">code<pos:position pos:line="169" pos:column="10"/></name><operator pos:line="169" pos:column="10">++<pos:position pos:line="169" pos:column="12"/></operator> <operator pos:line="169" pos:column="13">=<pos:position pos:line="169" pos:column="14"/></operator> <name pos:line="169" pos:column="15">OP_DOLL<pos:position pos:line="169" pos:column="22"/></name></expr>;<pos:position pos:line="169" pos:column="23"/></expr_stmt>
    <break pos:line="170" pos:column="5">break;<pos:position pos:line="170" pos:column="11"/></break>

    <comment type="block" pos:line="172" pos:column="5">/* There can never be a first char if '.' is first, whatever happens about
    repeats. The value of reqbyte doesn't change either. */</comment>

    <case pos:line="175" pos:column="5">case <expr><literal type="char" pos:line="175" pos:column="10">'.'<pos:position pos:line="175" pos:column="13"/></literal></expr>:<pos:position pos:line="175" pos:column="14"/></case>
    <if pos:line="176" pos:column="5">if <condition pos:line="176" pos:column="8">(<expr><name pos:line="176" pos:column="9">firstbyte<pos:position pos:line="176" pos:column="18"/></name> <operator pos:line="176" pos:column="19">==<pos:position pos:line="176" pos:column="21"/></operator> <name pos:line="176" pos:column="22">REQ_UNSET<pos:position pos:line="176" pos:column="31"/></name></expr>)<pos:position pos:line="176" pos:column="32"/></condition><then pos:line="176" pos:column="32"> <block type="pseudo"><expr_stmt><expr><name pos:line="176" pos:column="33">firstbyte<pos:position pos:line="176" pos:column="42"/></name> <operator pos:line="176" pos:column="43">=<pos:position pos:line="176" pos:column="44"/></operator> <name pos:line="176" pos:column="45">REQ_NONE<pos:position pos:line="176" pos:column="53"/></name></expr>;<pos:position pos:line="176" pos:column="54"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="177" pos:column="5">zerofirstbyte<pos:position pos:line="177" pos:column="18"/></name> <operator pos:line="177" pos:column="19">=<pos:position pos:line="177" pos:column="20"/></operator> <name pos:line="177" pos:column="21">firstbyte<pos:position pos:line="177" pos:column="30"/></name></expr>;<pos:position pos:line="177" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="178" pos:column="5">zeroreqbyte<pos:position pos:line="178" pos:column="16"/></name> <operator pos:line="178" pos:column="17">=<pos:position pos:line="178" pos:column="18"/></operator> <name pos:line="178" pos:column="19">reqbyte<pos:position pos:line="178" pos:column="26"/></name></expr>;<pos:position pos:line="178" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="179" pos:column="5">previous<pos:position pos:line="179" pos:column="13"/></name> <operator pos:line="179" pos:column="14">=<pos:position pos:line="179" pos:column="15"/></operator> <name pos:line="179" pos:column="16">code<pos:position pos:line="179" pos:column="20"/></name></expr>;<pos:position pos:line="179" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="180" pos:column="5">*<pos:position pos:line="180" pos:column="6"/></operator><name pos:line="180" pos:column="6">code<pos:position pos:line="180" pos:column="10"/></name><operator pos:line="180" pos:column="10">++<pos:position pos:line="180" pos:column="12"/></operator> <operator pos:line="180" pos:column="13">=<pos:position pos:line="180" pos:column="14"/></operator> <name pos:line="180" pos:column="15">OP_ANY<pos:position pos:line="180" pos:column="21"/></name></expr>;<pos:position pos:line="180" pos:column="22"/></expr_stmt>
    <break pos:line="181" pos:column="5">break;<pos:position pos:line="181" pos:column="11"/></break>

    <comment type="block" pos:line="183" pos:column="5">/* Character classes. If the included characters are all &lt; 255 in value, we
    build a 32-byte bitmap of the permitted characters, except in the special
    case where there is only one such character. For negated classes, we build
    the map as usual, then invert it at the end. However, we use a different
    opcode so that data characters &gt; 255 can be handled correctly.

    If the class contains characters outside the 0-255 range, a different
    opcode is compiled. It may optionally have a bit map for characters &lt; 256,
    but those above are are explicitly listed afterwards. A flag byte tells
    whether the bitmap is present, and whether this is a negated class or not.
    */</comment>

    <case pos:line="195" pos:column="5">case <expr><literal type="char" pos:line="195" pos:column="10">'['<pos:position pos:line="195" pos:column="13"/></literal></expr>:<pos:position pos:line="195" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="196" pos:column="5">previous<pos:position pos:line="196" pos:column="13"/></name> <operator pos:line="196" pos:column="14">=<pos:position pos:line="196" pos:column="15"/></operator> <name pos:line="196" pos:column="16">code<pos:position pos:line="196" pos:column="20"/></name></expr>;<pos:position pos:line="196" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="198" pos:column="5">/* PCRE supports POSIX class stuff inside a class. Perl gives an error if
    they are encountered at the top level, so we'll do that too. */</comment>

    <if pos:line="201" pos:column="5">if <condition pos:line="201" pos:column="8">(<expr><operator pos:line="201" pos:column="9">(<pos:position pos:line="201" pos:column="10"/></operator><name><name pos:line="201" pos:column="10">ptr<pos:position pos:line="201" pos:column="13"/></name><index pos:line="201" pos:column="13">[<expr><literal type="number" pos:line="201" pos:column="14">1<pos:position pos:line="201" pos:column="15"/></literal></expr>]<pos:position pos:line="201" pos:column="16"/></index></name> <operator pos:line="201" pos:column="17">==<pos:position pos:line="201" pos:column="19"/></operator> <literal type="char" pos:line="201" pos:column="20">':'<pos:position pos:line="201" pos:column="23"/></literal> <operator pos:line="201" pos:column="24">||<pos:position pos:line="201" pos:column="26"/></operator> <name><name pos:line="201" pos:column="27">ptr<pos:position pos:line="201" pos:column="30"/></name><index pos:line="201" pos:column="30">[<expr><literal type="number" pos:line="201" pos:column="31">1<pos:position pos:line="201" pos:column="32"/></literal></expr>]<pos:position pos:line="201" pos:column="33"/></index></name> <operator pos:line="201" pos:column="34">==<pos:position pos:line="201" pos:column="36"/></operator> <literal type="char" pos:line="201" pos:column="37">'.'<pos:position pos:line="201" pos:column="40"/></literal> <operator pos:line="201" pos:column="41">||<pos:position pos:line="201" pos:column="43"/></operator> <name><name pos:line="201" pos:column="44">ptr<pos:position pos:line="201" pos:column="47"/></name><index pos:line="201" pos:column="47">[<expr><literal type="number" pos:line="201" pos:column="48">1<pos:position pos:line="201" pos:column="49"/></literal></expr>]<pos:position pos:line="201" pos:column="50"/></index></name> <operator pos:line="201" pos:column="51">==<pos:position pos:line="201" pos:column="53"/></operator> <literal type="char" pos:line="201" pos:column="54">'='<pos:position pos:line="201" pos:column="57"/></literal><operator pos:line="201" pos:column="57">)<pos:position pos:line="201" pos:column="58"/></operator> <operator pos:line="201" pos:column="59">&amp;&amp;<pos:position pos:line="201" pos:column="69"/></operator>
        <call><name pos:line="202" pos:column="9">check_posix_syntax<pos:position pos:line="202" pos:column="27"/></name><argument_list pos:line="202" pos:column="27">(<argument><expr><name pos:line="202" pos:column="28">ptr<pos:position pos:line="202" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="202" pos:column="33">&amp;<pos:position pos:line="202" pos:column="38"/></operator><name pos:line="202" pos:column="34">tempptr<pos:position pos:line="202" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="43">cd<pos:position pos:line="202" pos:column="45"/></name></expr></argument>)<pos:position pos:line="202" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="202" pos:column="47"/></condition><then pos:line="202" pos:column="47">
      <block pos:line="203" pos:column="7">{
      <expr_stmt><expr><operator pos:line="204" pos:column="7">*<pos:position pos:line="204" pos:column="8"/></operator><name pos:line="204" pos:column="8">errorptr<pos:position pos:line="204" pos:column="16"/></name> <operator pos:line="204" pos:column="17">=<pos:position pos:line="204" pos:column="18"/></operator> <ternary><condition><expr><operator pos:line="204" pos:column="19">(<pos:position pos:line="204" pos:column="20"/></operator><name><name pos:line="204" pos:column="20">ptr<pos:position pos:line="204" pos:column="23"/></name><index pos:line="204" pos:column="23">[<expr><literal type="number" pos:line="204" pos:column="24">1<pos:position pos:line="204" pos:column="25"/></literal></expr>]<pos:position pos:line="204" pos:column="26"/></index></name> <operator pos:line="204" pos:column="27">==<pos:position pos:line="204" pos:column="29"/></operator> <literal type="char" pos:line="204" pos:column="30">':'<pos:position pos:line="204" pos:column="33"/></literal><operator pos:line="204" pos:column="33">)<pos:position pos:line="204" pos:column="34"/></operator></expr>?<pos:position pos:line="204" pos:column="35"/></condition><then pos:line="204" pos:column="35"> <expr><name pos:line="204" pos:column="36">ERR13<pos:position pos:line="204" pos:column="41"/></name></expr> <pos:position pos:line="204" pos:column="42"/></then><else pos:line="204" pos:column="42">: <expr><name pos:line="204" pos:column="44">ERR31<pos:position pos:line="204" pos:column="49"/></name></expr></else></ternary></expr>;<pos:position pos:line="204" pos:column="50"/></expr_stmt>
      <goto pos:line="205" pos:column="7">goto <name pos:line="205" pos:column="12">FAILED<pos:position pos:line="205" pos:column="18"/></name>;<pos:position pos:line="205" pos:column="19"/></goto>
      }<pos:position pos:line="206" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="208" pos:column="5">/* If the first character is '^', set the negation flag and skip it. */</comment>

    <if pos:line="210" pos:column="5">if <condition pos:line="210" pos:column="8">(<expr><operator pos:line="210" pos:column="9">(<pos:position pos:line="210" pos:column="10"/></operator><name pos:line="210" pos:column="10">c<pos:position pos:line="210" pos:column="11"/></name> <operator pos:line="210" pos:column="12">=<pos:position pos:line="210" pos:column="13"/></operator> <operator pos:line="210" pos:column="14">*<pos:position pos:line="210" pos:column="15"/></operator><operator pos:line="210" pos:column="15">(<pos:position pos:line="210" pos:column="16"/></operator><operator pos:line="210" pos:column="16">++<pos:position pos:line="210" pos:column="18"/></operator><name pos:line="210" pos:column="18">ptr<pos:position pos:line="210" pos:column="21"/></name><operator pos:line="210" pos:column="21">)<pos:position pos:line="210" pos:column="22"/></operator><operator pos:line="210" pos:column="22">)<pos:position pos:line="210" pos:column="23"/></operator> <operator pos:line="210" pos:column="24">==<pos:position pos:line="210" pos:column="26"/></operator> <literal type="char" pos:line="210" pos:column="27">'^'<pos:position pos:line="210" pos:column="30"/></literal></expr>)<pos:position pos:line="210" pos:column="31"/></condition><then pos:line="210" pos:column="31">
      <block pos:line="211" pos:column="7">{
      <expr_stmt><expr><name pos:line="212" pos:column="7">negate_class<pos:position pos:line="212" pos:column="19"/></name> <operator pos:line="212" pos:column="20">=<pos:position pos:line="212" pos:column="21"/></operator> <name pos:line="212" pos:column="22">TRUE<pos:position pos:line="212" pos:column="26"/></name></expr>;<pos:position pos:line="212" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name pos:line="213" pos:column="7">c<pos:position pos:line="213" pos:column="8"/></name> <operator pos:line="213" pos:column="9">=<pos:position pos:line="213" pos:column="10"/></operator> <operator pos:line="213" pos:column="11">*<pos:position pos:line="213" pos:column="12"/></operator><operator pos:line="213" pos:column="12">(<pos:position pos:line="213" pos:column="13"/></operator><operator pos:line="213" pos:column="13">++<pos:position pos:line="213" pos:column="15"/></operator><name pos:line="213" pos:column="15">ptr<pos:position pos:line="213" pos:column="18"/></name><operator pos:line="213" pos:column="18">)<pos:position pos:line="213" pos:column="19"/></operator></expr>;<pos:position pos:line="213" pos:column="20"/></expr_stmt>
      }<pos:position pos:line="214" pos:column="8"/></block></then>
    <else pos:line="215" pos:column="5">else
      <block pos:line="216" pos:column="7">{
      <expr_stmt><expr><name pos:line="217" pos:column="7">negate_class<pos:position pos:line="217" pos:column="19"/></name> <operator pos:line="217" pos:column="20">=<pos:position pos:line="217" pos:column="21"/></operator> <name pos:line="217" pos:column="22">FALSE<pos:position pos:line="217" pos:column="27"/></name></expr>;<pos:position pos:line="217" pos:column="28"/></expr_stmt>
      }<pos:position pos:line="218" pos:column="8"/></block></else></if>

    <comment type="block" pos:line="220" pos:column="5">/* Keep a count of chars with values &lt; 256 so that we can optimize the case
    of just a single character (as long as it's &lt; 256). For higher valued UTF-8
    characters, we don't yet do any optimization. */</comment>

    <expr_stmt><expr><name pos:line="224" pos:column="5">class_charcount<pos:position pos:line="224" pos:column="20"/></name> <operator pos:line="224" pos:column="21">=<pos:position pos:line="224" pos:column="22"/></operator> <literal type="number" pos:line="224" pos:column="23">0<pos:position pos:line="224" pos:column="24"/></literal></expr>;<pos:position pos:line="224" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name pos:line="225" pos:column="5">class_lastchar<pos:position pos:line="225" pos:column="19"/></name> <operator pos:line="225" pos:column="20">=<pos:position pos:line="225" pos:column="21"/></operator> <operator pos:line="225" pos:column="22">-<pos:position pos:line="225" pos:column="23"/></operator><literal type="number" pos:line="225" pos:column="23">1<pos:position pos:line="225" pos:column="24"/></literal></expr>;<pos:position pos:line="225" pos:column="25"/></expr_stmt>

<cpp:ifdef pos:line="227" pos:column="1">#<cpp:directive pos:line="227" pos:column="2">ifdef<pos:position pos:line="227" pos:column="7"/></cpp:directive> <name pos:line="227" pos:column="8">SUPPORT_UTF8<pos:position pos:line="227" pos:column="20"/></name></cpp:ifdef>
    <expr_stmt><expr><name pos:line="228" pos:column="5">class_utf8<pos:position pos:line="228" pos:column="15"/></name> <operator pos:line="228" pos:column="16">=<pos:position pos:line="228" pos:column="17"/></operator> <name pos:line="228" pos:column="18">FALSE<pos:position pos:line="228" pos:column="23"/></name></expr>;<pos:position pos:line="228" pos:column="24"/></expr_stmt>                       <comment type="block" pos:line="228" pos:column="47">/* No chars &gt;= 256 */</comment>
    <expr_stmt><expr><name pos:line="229" pos:column="5">class_utf8data<pos:position pos:line="229" pos:column="19"/></name> <operator pos:line="229" pos:column="20">=<pos:position pos:line="229" pos:column="21"/></operator> <name pos:line="229" pos:column="22">code<pos:position pos:line="229" pos:column="26"/></name> <operator pos:line="229" pos:column="27">+<pos:position pos:line="229" pos:column="28"/></operator> <name pos:line="229" pos:column="29">LINK_SIZE<pos:position pos:line="229" pos:column="38"/></name> <operator pos:line="229" pos:column="39">+<pos:position pos:line="229" pos:column="40"/></operator> <literal type="number" pos:line="229" pos:column="41">34<pos:position pos:line="229" pos:column="43"/></literal></expr>;<pos:position pos:line="229" pos:column="44"/></expr_stmt>   <comment type="block" pos:line="229" pos:column="47">/* For UTF-8 items */</comment>
<cpp:endif pos:line="230" pos:column="1">#<cpp:directive pos:line="230" pos:column="2">endif<pos:position pos:line="230" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="232" pos:column="5">/* Initialize the 32-char bit map to all zeros. We have to build the
    map in a temporary bit of store, in case the class contains only 1
    character (&lt; 256), because in that case the compiled code doesn't use the
    bit map. */</comment>

    <expr_stmt><expr><call><name pos:line="237" pos:column="5">memset<pos:position pos:line="237" pos:column="11"/></name><argument_list pos:line="237" pos:column="11">(<argument><expr><name pos:line="237" pos:column="12">classbits<pos:position pos:line="237" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="237" pos:column="23">0<pos:position pos:line="237" pos:column="24"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="237" pos:column="26">32<pos:position pos:line="237" pos:column="28"/></literal> <operator pos:line="237" pos:column="29">*<pos:position pos:line="237" pos:column="30"/></operator> <sizeof pos:line="237" pos:column="31">sizeof<argument_list pos:line="237" pos:column="37">(<argument><expr><name pos:line="237" pos:column="38">uschar<pos:position pos:line="237" pos:column="44"/></name></expr></argument>)<pos:position pos:line="237" pos:column="45"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="237" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="239" pos:column="5">/* Process characters until ] is reached. By writing this as a "do" it
    means that an initial ] is taken as a data character. The first pass
    through the regex checked the overall syntax, so we don't need to be very
    strict here. At the start of the loop, c contains the first byte of the
    character. */</comment>

    <do pos:line="245" pos:column="5">do
      <block pos:line="246" pos:column="7">{
<cpp:ifdef pos:line="247" pos:column="1">#<cpp:directive pos:line="247" pos:column="2">ifdef<pos:position pos:line="247" pos:column="7"/></cpp:directive> <name pos:line="247" pos:column="8">SUPPORT_UTF8<pos:position pos:line="247" pos:column="20"/></name></cpp:ifdef>
      <if pos:line="248" pos:column="7">if <condition pos:line="248" pos:column="10">(<expr><name pos:line="248" pos:column="11">utf8<pos:position pos:line="248" pos:column="15"/></name> <operator pos:line="248" pos:column="16">&amp;&amp;<pos:position pos:line="248" pos:column="26"/></operator> <name pos:line="248" pos:column="19">c<pos:position pos:line="248" pos:column="20"/></name> <operator pos:line="248" pos:column="21">&gt;<pos:position pos:line="248" pos:column="25"/></operator> <literal type="number" pos:line="248" pos:column="23">127<pos:position pos:line="248" pos:column="26"/></literal></expr>)<pos:position pos:line="248" pos:column="27"/></condition><then pos:line="248" pos:column="27">
        <block pos:line="249" pos:column="9">{                           <comment type="block" pos:line="249" pos:column="37">/* Braces are required because the */</comment>
        <expr_stmt><expr><call><name pos:line="250" pos:column="9">GETCHARLEN<pos:position pos:line="250" pos:column="19"/></name><argument_list pos:line="250" pos:column="19">(<argument><expr><name pos:line="250" pos:column="20">c<pos:position pos:line="250" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="23">ptr<pos:position pos:line="250" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="250" pos:column="28">ptr<pos:position pos:line="250" pos:column="31"/></name></expr></argument>)<pos:position pos:line="250" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="250" pos:column="33"/></expr_stmt>    <comment type="block" pos:line="250" pos:column="37">/* macro generates multiple statements */</comment>
        }<pos:position pos:line="251" pos:column="10"/></block></then></if>
<cpp:endif pos:line="252" pos:column="1">#<cpp:directive pos:line="252" pos:column="2">endif<pos:position pos:line="252" pos:column="7"/></cpp:directive></cpp:endif>

      <comment type="block" pos:line="254" pos:column="7">/* Inside \Q...\E everything is literal except \E */</comment>

      <if pos:line="256" pos:column="7">if <condition pos:line="256" pos:column="10">(<expr><name pos:line="256" pos:column="11">inescq<pos:position pos:line="256" pos:column="17"/></name></expr>)<pos:position pos:line="256" pos:column="18"/></condition><then pos:line="256" pos:column="18">
        <block pos:line="257" pos:column="9">{
        <if pos:line="258" pos:column="9">if <condition pos:line="258" pos:column="12">(<expr><name pos:line="258" pos:column="13">c<pos:position pos:line="258" pos:column="14"/></name> <operator pos:line="258" pos:column="15">==<pos:position pos:line="258" pos:column="17"/></operator> <literal type="char" pos:line="258" pos:column="18">'\\'<pos:position pos:line="258" pos:column="22"/></literal> <operator pos:line="258" pos:column="23">&amp;&amp;<pos:position pos:line="258" pos:column="33"/></operator> <name><name pos:line="258" pos:column="26">ptr<pos:position pos:line="258" pos:column="29"/></name><index pos:line="258" pos:column="29">[<expr><literal type="number" pos:line="258" pos:column="30">1<pos:position pos:line="258" pos:column="31"/></literal></expr>]<pos:position pos:line="258" pos:column="32"/></index></name> <operator pos:line="258" pos:column="33">==<pos:position pos:line="258" pos:column="35"/></operator> <literal type="char" pos:line="258" pos:column="36">'E'<pos:position pos:line="258" pos:column="39"/></literal></expr>)<pos:position pos:line="258" pos:column="40"/></condition><then pos:line="258" pos:column="40">
          <block pos:line="259" pos:column="11">{
          <expr_stmt><expr><name pos:line="260" pos:column="11">inescq<pos:position pos:line="260" pos:column="17"/></name> <operator pos:line="260" pos:column="18">=<pos:position pos:line="260" pos:column="19"/></operator> <name pos:line="260" pos:column="20">FALSE<pos:position pos:line="260" pos:column="25"/></name></expr>;<pos:position pos:line="260" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><name pos:line="261" pos:column="11">ptr<pos:position pos:line="261" pos:column="14"/></name><operator pos:line="261" pos:column="14">++<pos:position pos:line="261" pos:column="16"/></operator></expr>;<pos:position pos:line="261" pos:column="17"/></expr_stmt>
          <continue pos:line="262" pos:column="11">continue;<pos:position pos:line="262" pos:column="20"/></continue>
          }<pos:position pos:line="263" pos:column="12"/></block></then>
        <else pos:line="264" pos:column="9">else <block type="pseudo"><goto pos:line="264" pos:column="14">goto <name pos:line="264" pos:column="19">LONE_SINGLE_CHARACTER<pos:position pos:line="264" pos:column="40"/></name>;<pos:position pos:line="264" pos:column="41"/></goto></block></else></if>
        }<pos:position pos:line="265" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="267" pos:column="7">/* Handle POSIX class names. Perl allows a negation extension of the
      form [:^name:]. A square bracket that doesn't match the syntax is
      treated as a literal. We also recognize the POSIX constructions
      [.ch.] and [=ch=] ("collating elements") and fault them, as Perl
      5.6 and 5.8 do. */</comment>

      <if pos:line="273" pos:column="7">if <condition pos:line="273" pos:column="10">(<expr><name pos:line="273" pos:column="11">c<pos:position pos:line="273" pos:column="12"/></name> <operator pos:line="273" pos:column="13">==<pos:position pos:line="273" pos:column="15"/></operator> <literal type="char" pos:line="273" pos:column="16">'['<pos:position pos:line="273" pos:column="19"/></literal> <operator pos:line="273" pos:column="20">&amp;&amp;<pos:position pos:line="273" pos:column="30"/></operator>
          <operator pos:line="274" pos:column="11">(<pos:position pos:line="274" pos:column="12"/></operator><name><name pos:line="274" pos:column="12">ptr<pos:position pos:line="274" pos:column="15"/></name><index pos:line="274" pos:column="15">[<expr><literal type="number" pos:line="274" pos:column="16">1<pos:position pos:line="274" pos:column="17"/></literal></expr>]<pos:position pos:line="274" pos:column="18"/></index></name> <operator pos:line="274" pos:column="19">==<pos:position pos:line="274" pos:column="21"/></operator> <literal type="char" pos:line="274" pos:column="22">':'<pos:position pos:line="274" pos:column="25"/></literal> <operator pos:line="274" pos:column="26">||<pos:position pos:line="274" pos:column="28"/></operator> <name><name pos:line="274" pos:column="29">ptr<pos:position pos:line="274" pos:column="32"/></name><index pos:line="274" pos:column="32">[<expr><literal type="number" pos:line="274" pos:column="33">1<pos:position pos:line="274" pos:column="34"/></literal></expr>]<pos:position pos:line="274" pos:column="35"/></index></name> <operator pos:line="274" pos:column="36">==<pos:position pos:line="274" pos:column="38"/></operator> <literal type="char" pos:line="274" pos:column="39">'.'<pos:position pos:line="274" pos:column="42"/></literal> <operator pos:line="274" pos:column="43">||<pos:position pos:line="274" pos:column="45"/></operator> <name><name pos:line="274" pos:column="46">ptr<pos:position pos:line="274" pos:column="49"/></name><index pos:line="274" pos:column="49">[<expr><literal type="number" pos:line="274" pos:column="50">1<pos:position pos:line="274" pos:column="51"/></literal></expr>]<pos:position pos:line="274" pos:column="52"/></index></name> <operator pos:line="274" pos:column="53">==<pos:position pos:line="274" pos:column="55"/></operator> <literal type="char" pos:line="274" pos:column="56">'='<pos:position pos:line="274" pos:column="59"/></literal><operator pos:line="274" pos:column="59">)<pos:position pos:line="274" pos:column="60"/></operator> <operator pos:line="274" pos:column="61">&amp;&amp;<pos:position pos:line="274" pos:column="71"/></operator>
          <call><name pos:line="275" pos:column="11">check_posix_syntax<pos:position pos:line="275" pos:column="29"/></name><argument_list pos:line="275" pos:column="29">(<argument><expr><name pos:line="275" pos:column="30">ptr<pos:position pos:line="275" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="275" pos:column="35">&amp;<pos:position pos:line="275" pos:column="40"/></operator><name pos:line="275" pos:column="36">tempptr<pos:position pos:line="275" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="275" pos:column="45">cd<pos:position pos:line="275" pos:column="47"/></name></expr></argument>)<pos:position pos:line="275" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="275" pos:column="49"/></condition><then pos:line="275" pos:column="49">
        <block pos:line="276" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="277" pos:column="9">BOOL<pos:position pos:line="277" pos:column="13"/></name></type> <name pos:line="277" pos:column="14">local_negate<pos:position pos:line="277" pos:column="26"/></name> <init pos:line="277" pos:column="27">= <expr><name pos:line="277" pos:column="29">FALSE<pos:position pos:line="277" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="277" pos:column="35"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="278" pos:column="9">int<pos:position pos:line="278" pos:column="12"/></name></type> <name pos:line="278" pos:column="13">posix_class<pos:position pos:line="278" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="278" pos:column="26">i<pos:position pos:line="278" pos:column="27"/></name></decl>;<pos:position pos:line="278" pos:column="28"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="279" pos:column="9">register<pos:position pos:line="279" pos:column="17"/></specifier> <specifier pos:line="279" pos:column="18">const<pos:position pos:line="279" pos:column="23"/></specifier> <name pos:line="279" pos:column="24">uschar<pos:position pos:line="279" pos:column="30"/></name> <modifier pos:line="279" pos:column="31">*<pos:position pos:line="279" pos:column="32"/></modifier></type><name pos:line="279" pos:column="32">cbits<pos:position pos:line="279" pos:column="37"/></name> <init pos:line="279" pos:column="38">= <expr><name><name pos:line="279" pos:column="40">cd<pos:position pos:line="279" pos:column="42"/></name><operator pos:line="279" pos:column="42">-&gt;<pos:position pos:line="279" pos:column="47"/></operator><name pos:line="279" pos:column="44">cbits<pos:position pos:line="279" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="279" pos:column="50"/></decl_stmt>

        <if pos:line="281" pos:column="9">if <condition pos:line="281" pos:column="12">(<expr><name><name pos:line="281" pos:column="13">ptr<pos:position pos:line="281" pos:column="16"/></name><index pos:line="281" pos:column="16">[<expr><literal type="number" pos:line="281" pos:column="17">1<pos:position pos:line="281" pos:column="18"/></literal></expr>]<pos:position pos:line="281" pos:column="19"/></index></name> <operator pos:line="281" pos:column="20">!=<pos:position pos:line="281" pos:column="22"/></operator> <literal type="char" pos:line="281" pos:column="23">':'<pos:position pos:line="281" pos:column="26"/></literal></expr>)<pos:position pos:line="281" pos:column="27"/></condition><then pos:line="281" pos:column="27">
          <block pos:line="282" pos:column="11">{
          <expr_stmt><expr><operator pos:line="283" pos:column="11">*<pos:position pos:line="283" pos:column="12"/></operator><name pos:line="283" pos:column="12">errorptr<pos:position pos:line="283" pos:column="20"/></name> <operator pos:line="283" pos:column="21">=<pos:position pos:line="283" pos:column="22"/></operator> <name pos:line="283" pos:column="23">ERR31<pos:position pos:line="283" pos:column="28"/></name></expr>;<pos:position pos:line="283" pos:column="29"/></expr_stmt>
          <goto pos:line="284" pos:column="11">goto <name pos:line="284" pos:column="16">FAILED<pos:position pos:line="284" pos:column="22"/></name>;<pos:position pos:line="284" pos:column="23"/></goto>
          }<pos:position pos:line="285" pos:column="12"/></block></then></if>

        <expr_stmt><expr><name pos:line="287" pos:column="9">ptr<pos:position pos:line="287" pos:column="12"/></name> <operator pos:line="287" pos:column="13">+=<pos:position pos:line="287" pos:column="15"/></operator> <literal type="number" pos:line="287" pos:column="16">2<pos:position pos:line="287" pos:column="17"/></literal></expr>;<pos:position pos:line="287" pos:column="18"/></expr_stmt>
        <if pos:line="288" pos:column="9">if <condition pos:line="288" pos:column="12">(<expr><operator pos:line="288" pos:column="13">*<pos:position pos:line="288" pos:column="14"/></operator><name pos:line="288" pos:column="14">ptr<pos:position pos:line="288" pos:column="17"/></name> <operator pos:line="288" pos:column="18">==<pos:position pos:line="288" pos:column="20"/></operator> <literal type="char" pos:line="288" pos:column="21">'^'<pos:position pos:line="288" pos:column="24"/></literal></expr>)<pos:position pos:line="288" pos:column="25"/></condition><then pos:line="288" pos:column="25">
          <block pos:line="289" pos:column="11">{
          <expr_stmt><expr><name pos:line="290" pos:column="11">local_negate<pos:position pos:line="290" pos:column="23"/></name> <operator pos:line="290" pos:column="24">=<pos:position pos:line="290" pos:column="25"/></operator> <name pos:line="290" pos:column="26">TRUE<pos:position pos:line="290" pos:column="30"/></name></expr>;<pos:position pos:line="290" pos:column="31"/></expr_stmt>
          <expr_stmt><expr><name pos:line="291" pos:column="11">ptr<pos:position pos:line="291" pos:column="14"/></name><operator pos:line="291" pos:column="14">++<pos:position pos:line="291" pos:column="16"/></operator></expr>;<pos:position pos:line="291" pos:column="17"/></expr_stmt>
          }<pos:position pos:line="292" pos:column="12"/></block></then></if>

        <expr_stmt><expr><name pos:line="294" pos:column="9">posix_class<pos:position pos:line="294" pos:column="20"/></name> <operator pos:line="294" pos:column="21">=<pos:position pos:line="294" pos:column="22"/></operator> <call><name pos:line="294" pos:column="23">check_posix_name<pos:position pos:line="294" pos:column="39"/></name><argument_list pos:line="294" pos:column="39">(<argument><expr><name pos:line="294" pos:column="40">ptr<pos:position pos:line="294" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="294" pos:column="45">tempptr<pos:position pos:line="294" pos:column="52"/></name> <operator pos:line="294" pos:column="53">-<pos:position pos:line="294" pos:column="54"/></operator> <name pos:line="294" pos:column="55">ptr<pos:position pos:line="294" pos:column="58"/></name></expr></argument>)<pos:position pos:line="294" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="294" pos:column="60"/></expr_stmt>
        <if pos:line="295" pos:column="9">if <condition pos:line="295" pos:column="12">(<expr><name pos:line="295" pos:column="13">posix_class<pos:position pos:line="295" pos:column="24"/></name> <operator pos:line="295" pos:column="25">&lt;<pos:position pos:line="295" pos:column="29"/></operator> <literal type="number" pos:line="295" pos:column="27">0<pos:position pos:line="295" pos:column="28"/></literal></expr>)<pos:position pos:line="295" pos:column="29"/></condition><then pos:line="295" pos:column="29">
          <block pos:line="296" pos:column="11">{
          <expr_stmt><expr><operator pos:line="297" pos:column="11">*<pos:position pos:line="297" pos:column="12"/></operator><name pos:line="297" pos:column="12">errorptr<pos:position pos:line="297" pos:column="20"/></name> <operator pos:line="297" pos:column="21">=<pos:position pos:line="297" pos:column="22"/></operator> <name pos:line="297" pos:column="23">ERR30<pos:position pos:line="297" pos:column="28"/></name></expr>;<pos:position pos:line="297" pos:column="29"/></expr_stmt>
          <goto pos:line="298" pos:column="11">goto <name pos:line="298" pos:column="16">FAILED<pos:position pos:line="298" pos:column="22"/></name>;<pos:position pos:line="298" pos:column="23"/></goto>
          }<pos:position pos:line="299" pos:column="12"/></block></then></if>

        <comment type="block" pos:line="301" pos:column="9">/* If matching is caseless, upper and lower are converted to
        alpha. This relies on the fact that the class table starts with
        alpha, lower, upper as the first 3 entries. */</comment>

        <if pos:line="305" pos:column="9">if <condition pos:line="305" pos:column="12">(<expr><operator pos:line="305" pos:column="13">(<pos:position pos:line="305" pos:column="14"/></operator><name pos:line="305" pos:column="14">options<pos:position pos:line="305" pos:column="21"/></name> <operator pos:line="305" pos:column="22">&amp;<pos:position pos:line="305" pos:column="27"/></operator> <name pos:line="305" pos:column="24">PCRE_CASELESS<pos:position pos:line="305" pos:column="37"/></name><operator pos:line="305" pos:column="37">)<pos:position pos:line="305" pos:column="38"/></operator> <operator pos:line="305" pos:column="39">!=<pos:position pos:line="305" pos:column="41"/></operator> <literal type="number" pos:line="305" pos:column="42">0<pos:position pos:line="305" pos:column="43"/></literal> <operator pos:line="305" pos:column="44">&amp;&amp;<pos:position pos:line="305" pos:column="54"/></operator> <name pos:line="305" pos:column="47">posix_class<pos:position pos:line="305" pos:column="58"/></name> <operator pos:line="305" pos:column="59">&lt;=<pos:position pos:line="305" pos:column="64"/></operator> <literal type="number" pos:line="305" pos:column="62">2<pos:position pos:line="305" pos:column="63"/></literal></expr>)<pos:position pos:line="305" pos:column="64"/></condition><then pos:line="305" pos:column="64">
          <block type="pseudo"><expr_stmt><expr><name pos:line="306" pos:column="11">posix_class<pos:position pos:line="306" pos:column="22"/></name> <operator pos:line="306" pos:column="23">=<pos:position pos:line="306" pos:column="24"/></operator> <literal type="number" pos:line="306" pos:column="25">0<pos:position pos:line="306" pos:column="26"/></literal></expr>;<pos:position pos:line="306" pos:column="27"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="308" pos:column="9">/* Or into the map we are building up to 3 of the static class
        tables, or their negations. The [:blank:] class sets up the same
        chars as the [:space:] class (all white space). We remove the vertical
        white space chars afterwards. */</comment>

        <expr_stmt><expr><name pos:line="313" pos:column="9">posix_class<pos:position pos:line="313" pos:column="20"/></name> <operator pos:line="313" pos:column="21">*=<pos:position pos:line="313" pos:column="23"/></operator> <literal type="number" pos:line="313" pos:column="24">3<pos:position pos:line="313" pos:column="25"/></literal></expr>;<pos:position pos:line="313" pos:column="26"/></expr_stmt>
        <for pos:line="314" pos:column="9">for <control pos:line="314" pos:column="13">(<init><expr><name pos:line="314" pos:column="14">i<pos:position pos:line="314" pos:column="15"/></name> <operator pos:line="314" pos:column="16">=<pos:position pos:line="314" pos:column="17"/></operator> <literal type="number" pos:line="314" pos:column="18">0<pos:position pos:line="314" pos:column="19"/></literal></expr>;<pos:position pos:line="314" pos:column="20"/></init> <condition><expr><name pos:line="314" pos:column="21">i<pos:position pos:line="314" pos:column="22"/></name> <operator pos:line="314" pos:column="23">&lt;<pos:position pos:line="314" pos:column="27"/></operator> <literal type="number" pos:line="314" pos:column="25">3<pos:position pos:line="314" pos:column="26"/></literal></expr>;<pos:position pos:line="314" pos:column="27"/></condition> <incr><expr><name pos:line="314" pos:column="28">i<pos:position pos:line="314" pos:column="29"/></name><operator pos:line="314" pos:column="29">++<pos:position pos:line="314" pos:column="31"/></operator></expr></incr>)<pos:position pos:line="314" pos:column="32"/></control>
          <block pos:line="315" pos:column="11">{
          <decl_stmt><decl><type><name pos:line="316" pos:column="11">BOOL<pos:position pos:line="316" pos:column="15"/></name></type> <name pos:line="316" pos:column="16">blankclass<pos:position pos:line="316" pos:column="26"/></name> <init pos:line="316" pos:column="27">= <expr><call><name pos:line="316" pos:column="29">strncmp<pos:position pos:line="316" pos:column="36"/></name><argument_list pos:line="316" pos:column="36">(<argument><expr><operator pos:line="316" pos:column="37">(<pos:position pos:line="316" pos:column="38"/></operator><name pos:line="316" pos:column="38">char<pos:position pos:line="316" pos:column="42"/></name> <operator pos:line="316" pos:column="43">*<pos:position pos:line="316" pos:column="44"/></operator><operator pos:line="316" pos:column="44">)<pos:position pos:line="316" pos:column="45"/></operator><name pos:line="316" pos:column="45">ptr<pos:position pos:line="316" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="316" pos:column="50">"blank"<pos:position pos:line="316" pos:column="57"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="316" pos:column="59">5<pos:position pos:line="316" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="316" pos:column="61"/></argument_list></call> <operator pos:line="316" pos:column="62">==<pos:position pos:line="316" pos:column="64"/></operator> <literal type="number" pos:line="316" pos:column="65">0<pos:position pos:line="316" pos:column="66"/></literal></expr></init></decl>;<pos:position pos:line="316" pos:column="67"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="317" pos:column="11">int<pos:position pos:line="317" pos:column="14"/></name></type> <name pos:line="317" pos:column="15">taboffset<pos:position pos:line="317" pos:column="24"/></name> <init pos:line="317" pos:column="25">= <expr><name><name pos:line="317" pos:column="27">posix_class_maps<pos:position pos:line="317" pos:column="43"/></name><index pos:line="317" pos:column="43">[<expr><name pos:line="317" pos:column="44">posix_class<pos:position pos:line="317" pos:column="55"/></name> <operator pos:line="317" pos:column="56">+<pos:position pos:line="317" pos:column="57"/></operator> <name pos:line="317" pos:column="58">i<pos:position pos:line="317" pos:column="59"/></name></expr>]<pos:position pos:line="317" pos:column="60"/></index></name></expr></init></decl>;<pos:position pos:line="317" pos:column="61"/></decl_stmt>
          <if pos:line="318" pos:column="11">if <condition pos:line="318" pos:column="14">(<expr><name pos:line="318" pos:column="15">taboffset<pos:position pos:line="318" pos:column="24"/></name> <operator pos:line="318" pos:column="25">&lt;<pos:position pos:line="318" pos:column="29"/></operator> <literal type="number" pos:line="318" pos:column="27">0<pos:position pos:line="318" pos:column="28"/></literal></expr>)<pos:position pos:line="318" pos:column="29"/></condition><then pos:line="318" pos:column="29"> <block type="pseudo"><break pos:line="318" pos:column="30">break;<pos:position pos:line="318" pos:column="36"/></break></block></then></if>
          <if pos:line="319" pos:column="11">if <condition pos:line="319" pos:column="14">(<expr><name pos:line="319" pos:column="15">local_negate<pos:position pos:line="319" pos:column="27"/></name></expr>)<pos:position pos:line="319" pos:column="28"/></condition><then pos:line="319" pos:column="28">
            <block pos:line="320" pos:column="13">{
            <if pos:line="321" pos:column="13">if <condition pos:line="321" pos:column="16">(<expr><name pos:line="321" pos:column="17">i<pos:position pos:line="321" pos:column="18"/></name> <operator pos:line="321" pos:column="19">==<pos:position pos:line="321" pos:column="21"/></operator> <literal type="number" pos:line="321" pos:column="22">0<pos:position pos:line="321" pos:column="23"/></literal></expr>)<pos:position pos:line="321" pos:column="24"/></condition><then pos:line="321" pos:column="24">
              <block type="pseudo"><for pos:line="322" pos:column="15">for <control pos:line="322" pos:column="19">(<init><expr><name pos:line="322" pos:column="20">c<pos:position pos:line="322" pos:column="21"/></name> <operator pos:line="322" pos:column="22">=<pos:position pos:line="322" pos:column="23"/></operator> <literal type="number" pos:line="322" pos:column="24">0<pos:position pos:line="322" pos:column="25"/></literal></expr>;<pos:position pos:line="322" pos:column="26"/></init> <condition><expr><name pos:line="322" pos:column="27">c<pos:position pos:line="322" pos:column="28"/></name> <operator pos:line="322" pos:column="29">&lt;<pos:position pos:line="322" pos:column="33"/></operator> <literal type="number" pos:line="322" pos:column="31">32<pos:position pos:line="322" pos:column="33"/></literal></expr>;<pos:position pos:line="322" pos:column="34"/></condition> <incr><expr><name pos:line="322" pos:column="35">c<pos:position pos:line="322" pos:column="36"/></name><operator pos:line="322" pos:column="36">++<pos:position pos:line="322" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="322" pos:column="39"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="322" pos:column="40">classbits<pos:position pos:line="322" pos:column="49"/></name><index pos:line="322" pos:column="49">[<expr><name pos:line="322" pos:column="50">c<pos:position pos:line="322" pos:column="51"/></name></expr>]<pos:position pos:line="322" pos:column="52"/></index></name> <operator pos:line="322" pos:column="53">|=<pos:position pos:line="322" pos:column="55"/></operator> <operator pos:line="322" pos:column="56">~<pos:position pos:line="322" pos:column="57"/></operator><name><name pos:line="322" pos:column="57">cbits<pos:position pos:line="322" pos:column="62"/></name><index pos:line="322" pos:column="62">[<expr><name pos:line="322" pos:column="63">c<pos:position pos:line="322" pos:column="64"/></name><operator pos:line="322" pos:column="64">+<pos:position pos:line="322" pos:column="65"/></operator><name pos:line="322" pos:column="65">taboffset<pos:position pos:line="322" pos:column="74"/></name></expr>]<pos:position pos:line="322" pos:column="75"/></index></name></expr>;<pos:position pos:line="322" pos:column="76"/></expr_stmt></block></for></block></then>
            <else pos:line="323" pos:column="13">else
              <block type="pseudo"><for pos:line="324" pos:column="15">for <control pos:line="324" pos:column="19">(<init><expr><name pos:line="324" pos:column="20">c<pos:position pos:line="324" pos:column="21"/></name> <operator pos:line="324" pos:column="22">=<pos:position pos:line="324" pos:column="23"/></operator> <literal type="number" pos:line="324" pos:column="24">0<pos:position pos:line="324" pos:column="25"/></literal></expr>;<pos:position pos:line="324" pos:column="26"/></init> <condition><expr><name pos:line="324" pos:column="27">c<pos:position pos:line="324" pos:column="28"/></name> <operator pos:line="324" pos:column="29">&lt;<pos:position pos:line="324" pos:column="33"/></operator> <literal type="number" pos:line="324" pos:column="31">32<pos:position pos:line="324" pos:column="33"/></literal></expr>;<pos:position pos:line="324" pos:column="34"/></condition> <incr><expr><name pos:line="324" pos:column="35">c<pos:position pos:line="324" pos:column="36"/></name><operator pos:line="324" pos:column="36">++<pos:position pos:line="324" pos:column="38"/></operator></expr></incr>)<pos:position pos:line="324" pos:column="39"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="324" pos:column="40">classbits<pos:position pos:line="324" pos:column="49"/></name><index pos:line="324" pos:column="49">[<expr><name pos:line="324" pos:column="50">c<pos:position pos:line="324" pos:column="51"/></name></expr>]<pos:position pos:line="324" pos:column="52"/></index></name> <operator pos:line="324" pos:column="53">&amp;=<pos:position pos:line="324" pos:column="59"/></operator> <operator pos:line="324" pos:column="56">~<pos:position pos:line="324" pos:column="57"/></operator><name><name pos:line="324" pos:column="57">cbits<pos:position pos:line="324" pos:column="62"/></name><index pos:line="324" pos:column="62">[<expr><name pos:line="324" pos:column="63">c<pos:position pos:line="324" pos:column="64"/></name><operator pos:line="324" pos:column="64">+<pos:position pos:line="324" pos:column="65"/></operator><name pos:line="324" pos:column="65">taboffset<pos:position pos:line="324" pos:column="74"/></name></expr>]<pos:position pos:line="324" pos:column="75"/></index></name></expr>;<pos:position pos:line="324" pos:column="76"/></expr_stmt></block></for></block></else></if>
            <if pos:line="325" pos:column="13">if <condition pos:line="325" pos:column="16">(<expr><name pos:line="325" pos:column="17">blankclass<pos:position pos:line="325" pos:column="27"/></name></expr>)<pos:position pos:line="325" pos:column="28"/></condition><then pos:line="325" pos:column="28"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="325" pos:column="29">classbits<pos:position pos:line="325" pos:column="38"/></name><index pos:line="325" pos:column="38">[<expr><literal type="number" pos:line="325" pos:column="39">1<pos:position pos:line="325" pos:column="40"/></literal></expr>]<pos:position pos:line="325" pos:column="41"/></index></name> <operator pos:line="325" pos:column="42">|=<pos:position pos:line="325" pos:column="44"/></operator> <literal type="number" pos:line="325" pos:column="45">0x3c<pos:position pos:line="325" pos:column="49"/></literal></expr>;<pos:position pos:line="325" pos:column="50"/></expr_stmt></block></then></if>
            }<pos:position pos:line="326" pos:column="14"/></block></then>
          <else pos:line="327" pos:column="11">else
            <block pos:line="328" pos:column="13">{
            <for pos:line="329" pos:column="13">for <control pos:line="329" pos:column="17">(<init><expr><name pos:line="329" pos:column="18">c<pos:position pos:line="329" pos:column="19"/></name> <operator pos:line="329" pos:column="20">=<pos:position pos:line="329" pos:column="21"/></operator> <literal type="number" pos:line="329" pos:column="22">0<pos:position pos:line="329" pos:column="23"/></literal></expr>;<pos:position pos:line="329" pos:column="24"/></init> <condition><expr><name pos:line="329" pos:column="25">c<pos:position pos:line="329" pos:column="26"/></name> <operator pos:line="329" pos:column="27">&lt;<pos:position pos:line="329" pos:column="31"/></operator> <literal type="number" pos:line="329" pos:column="29">32<pos:position pos:line="329" pos:column="31"/></literal></expr>;<pos:position pos:line="329" pos:column="32"/></condition> <incr><expr><name pos:line="329" pos:column="33">c<pos:position pos:line="329" pos:column="34"/></name><operator pos:line="329" pos:column="34">++<pos:position pos:line="329" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="329" pos:column="37"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="329" pos:column="38">classbits<pos:position pos:line="329" pos:column="47"/></name><index pos:line="329" pos:column="47">[<expr><name pos:line="329" pos:column="48">c<pos:position pos:line="329" pos:column="49"/></name></expr>]<pos:position pos:line="329" pos:column="50"/></index></name> <operator pos:line="329" pos:column="51">|=<pos:position pos:line="329" pos:column="53"/></operator> <name><name pos:line="329" pos:column="54">cbits<pos:position pos:line="329" pos:column="59"/></name><index pos:line="329" pos:column="59">[<expr><name pos:line="329" pos:column="60">c<pos:position pos:line="329" pos:column="61"/></name><operator pos:line="329" pos:column="61">+<pos:position pos:line="329" pos:column="62"/></operator><name pos:line="329" pos:column="62">taboffset<pos:position pos:line="329" pos:column="71"/></name></expr>]<pos:position pos:line="329" pos:column="72"/></index></name></expr>;<pos:position pos:line="329" pos:column="73"/></expr_stmt></block></for>
            <if pos:line="330" pos:column="13">if <condition pos:line="330" pos:column="16">(<expr><name pos:line="330" pos:column="17">blankclass<pos:position pos:line="330" pos:column="27"/></name></expr>)<pos:position pos:line="330" pos:column="28"/></condition><then pos:line="330" pos:column="28"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="330" pos:column="29">classbits<pos:position pos:line="330" pos:column="38"/></name><index pos:line="330" pos:column="38">[<expr><literal type="number" pos:line="330" pos:column="39">1<pos:position pos:line="330" pos:column="40"/></literal></expr>]<pos:position pos:line="330" pos:column="41"/></index></name> <operator pos:line="330" pos:column="42">&amp;=<pos:position pos:line="330" pos:column="48"/></operator> <operator pos:line="330" pos:column="45">~<pos:position pos:line="330" pos:column="46"/></operator><literal type="number" pos:line="330" pos:column="46">0x3c<pos:position pos:line="330" pos:column="50"/></literal></expr>;<pos:position pos:line="330" pos:column="51"/></expr_stmt></block></then></if>
            }<pos:position pos:line="331" pos:column="14"/></block></else></if>
          }<pos:position pos:line="332" pos:column="12"/></block></for>

        <expr_stmt><expr><name pos:line="334" pos:column="9">ptr<pos:position pos:line="334" pos:column="12"/></name> <operator pos:line="334" pos:column="13">=<pos:position pos:line="334" pos:column="14"/></operator> <name pos:line="334" pos:column="15">tempptr<pos:position pos:line="334" pos:column="22"/></name> <operator pos:line="334" pos:column="23">+<pos:position pos:line="334" pos:column="24"/></operator> <literal type="number" pos:line="334" pos:column="25">1<pos:position pos:line="334" pos:column="26"/></literal></expr>;<pos:position pos:line="334" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="335" pos:column="9">class_charcount<pos:position pos:line="335" pos:column="24"/></name> <operator pos:line="335" pos:column="25">=<pos:position pos:line="335" pos:column="26"/></operator> <literal type="number" pos:line="335" pos:column="27">10<pos:position pos:line="335" pos:column="29"/></literal></expr>;<pos:position pos:line="335" pos:column="30"/></expr_stmt>  <comment type="block" pos:line="335" pos:column="32">/* Set &gt; 1; assumes more than 1 per class */</comment>
        <continue pos:line="336" pos:column="9">continue;<pos:position pos:line="336" pos:column="18"/></continue>    <comment type="block" pos:line="336" pos:column="22">/* End of POSIX syntax handling */</comment>
        }<pos:position pos:line="337" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="339" pos:column="7">/* Backslash may introduce a single character, or it may introduce one
      of the specials, which just set a flag. Escaped items are checked for
      validity in the pre-compiling pass. The sequence \b is a special case.
      Inside a class (and only there) it is treated as backspace. Elsewhere
      it marks a word boundary. Other escapes have preset maps ready to
      or into the one we are building. We assume they have more than one
      character in them, so set class_charcount bigger than one. */</comment>

      <if pos:line="347" pos:column="7">if <condition pos:line="347" pos:column="10">(<expr><name pos:line="347" pos:column="11">c<pos:position pos:line="347" pos:column="12"/></name> <operator pos:line="347" pos:column="13">==<pos:position pos:line="347" pos:column="15"/></operator> <literal type="char" pos:line="347" pos:column="16">'\\'<pos:position pos:line="347" pos:column="20"/></literal></expr>)<pos:position pos:line="347" pos:column="21"/></condition><then pos:line="347" pos:column="21">
        <block pos:line="348" pos:column="9">{
        <expr_stmt><expr><name pos:line="349" pos:column="9">c<pos:position pos:line="349" pos:column="10"/></name> <operator pos:line="349" pos:column="11">=<pos:position pos:line="349" pos:column="12"/></operator> <call><name pos:line="349" pos:column="13">check_escape<pos:position pos:line="349" pos:column="25"/></name><argument_list pos:line="349" pos:column="25">(<argument><expr><operator pos:line="349" pos:column="26">&amp;<pos:position pos:line="349" pos:column="31"/></operator><name pos:line="349" pos:column="27">ptr<pos:position pos:line="349" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="349" pos:column="32">errorptr<pos:position pos:line="349" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="349" pos:column="42">*<pos:position pos:line="349" pos:column="43"/></operator><name pos:line="349" pos:column="43">brackets<pos:position pos:line="349" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="349" pos:column="53">options<pos:position pos:line="349" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="349" pos:column="62">TRUE<pos:position pos:line="349" pos:column="66"/></name></expr></argument>)<pos:position pos:line="349" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="349" pos:column="68"/></expr_stmt>

        <if pos:line="351" pos:column="9">if <condition pos:line="351" pos:column="12">(<expr><operator pos:line="351" pos:column="13">-<pos:position pos:line="351" pos:column="14"/></operator><name pos:line="351" pos:column="14">c<pos:position pos:line="351" pos:column="15"/></name> <operator pos:line="351" pos:column="16">==<pos:position pos:line="351" pos:column="18"/></operator> <name pos:line="351" pos:column="19">ESC_b<pos:position pos:line="351" pos:column="24"/></name></expr>)<pos:position pos:line="351" pos:column="25"/></condition><then pos:line="351" pos:column="25"> <block type="pseudo"><expr_stmt><expr><name pos:line="351" pos:column="26">c<pos:position pos:line="351" pos:column="27"/></name> <operator pos:line="351" pos:column="28">=<pos:position pos:line="351" pos:column="29"/></operator> <literal type="char" pos:line="351" pos:column="30">'\b'<pos:position pos:line="351" pos:column="34"/></literal></expr>;<pos:position pos:line="351" pos:column="35"/></expr_stmt></block></then>       <comment type="block" pos:line="351" pos:column="42">/* \b is backslash in a class */</comment>
        <elseif pos:line="352" pos:column="9">else <if pos:line="352" pos:column="14">if <condition pos:line="352" pos:column="17">(<expr><operator pos:line="352" pos:column="18">-<pos:position pos:line="352" pos:column="19"/></operator><name pos:line="352" pos:column="19">c<pos:position pos:line="352" pos:column="20"/></name> <operator pos:line="352" pos:column="21">==<pos:position pos:line="352" pos:column="23"/></operator> <name pos:line="352" pos:column="24">ESC_X<pos:position pos:line="352" pos:column="29"/></name></expr>)<pos:position pos:line="352" pos:column="30"/></condition><then pos:line="352" pos:column="30"> <block type="pseudo"><expr_stmt><expr><name pos:line="352" pos:column="31">c<pos:position pos:line="352" pos:column="32"/></name> <operator pos:line="352" pos:column="33">=<pos:position pos:line="352" pos:column="34"/></operator> <literal type="char" pos:line="352" pos:column="35">'X'<pos:position pos:line="352" pos:column="38"/></literal></expr>;<pos:position pos:line="352" pos:column="39"/></expr_stmt></block></then></if></elseif>   <comment type="block" pos:line="352" pos:column="42">/* \X is literal X in a class */</comment>
        <elseif pos:line="353" pos:column="9">else <if pos:line="353" pos:column="14">if <condition pos:line="353" pos:column="17">(<expr><operator pos:line="353" pos:column="18">-<pos:position pos:line="353" pos:column="19"/></operator><name pos:line="353" pos:column="19">c<pos:position pos:line="353" pos:column="20"/></name> <operator pos:line="353" pos:column="21">==<pos:position pos:line="353" pos:column="23"/></operator> <name pos:line="353" pos:column="24">ESC_Q<pos:position pos:line="353" pos:column="29"/></name></expr>)<pos:position pos:line="353" pos:column="30"/></condition><then pos:line="353" pos:column="30">            <comment type="block" pos:line="353" pos:column="42">/* Handle start of quoted string */</comment>
          <block pos:line="354" pos:column="11">{
          <if pos:line="355" pos:column="11">if <condition pos:line="355" pos:column="14">(<expr><name><name pos:line="355" pos:column="15">ptr<pos:position pos:line="355" pos:column="18"/></name><index pos:line="355" pos:column="18">[<expr><literal type="number" pos:line="355" pos:column="19">1<pos:position pos:line="355" pos:column="20"/></literal></expr>]<pos:position pos:line="355" pos:column="21"/></index></name> <operator pos:line="355" pos:column="22">==<pos:position pos:line="355" pos:column="24"/></operator> <literal type="char" pos:line="355" pos:column="25">'\\'<pos:position pos:line="355" pos:column="29"/></literal> <operator pos:line="355" pos:column="30">&amp;&amp;<pos:position pos:line="355" pos:column="40"/></operator> <name><name pos:line="355" pos:column="33">ptr<pos:position pos:line="355" pos:column="36"/></name><index pos:line="355" pos:column="36">[<expr><literal type="number" pos:line="355" pos:column="37">2<pos:position pos:line="355" pos:column="38"/></literal></expr>]<pos:position pos:line="355" pos:column="39"/></index></name> <operator pos:line="355" pos:column="40">==<pos:position pos:line="355" pos:column="42"/></operator> <literal type="char" pos:line="355" pos:column="43">'E'<pos:position pos:line="355" pos:column="46"/></literal></expr>)<pos:position pos:line="355" pos:column="47"/></condition><then pos:line="355" pos:column="47">
            <block pos:line="356" pos:column="13">{
            <expr_stmt><expr><name pos:line="357" pos:column="13">ptr<pos:position pos:line="357" pos:column="16"/></name> <operator pos:line="357" pos:column="17">+=<pos:position pos:line="357" pos:column="19"/></operator> <literal type="number" pos:line="357" pos:column="20">2<pos:position pos:line="357" pos:column="21"/></literal></expr>;<pos:position pos:line="357" pos:column="22"/></expr_stmt> <comment type="block" pos:line="357" pos:column="23">/* avoid empty string */</comment>
            }<pos:position pos:line="358" pos:column="14"/></block></then>
          <else pos:line="359" pos:column="11">else <block type="pseudo"><expr_stmt><expr><name pos:line="359" pos:column="16">inescq<pos:position pos:line="359" pos:column="22"/></name> <operator pos:line="359" pos:column="23">=<pos:position pos:line="359" pos:column="24"/></operator> <name pos:line="359" pos:column="25">TRUE<pos:position pos:line="359" pos:column="29"/></name></expr>;<pos:position pos:line="359" pos:column="30"/></expr_stmt></block></else></if>
          <continue pos:line="360" pos:column="11">continue;<pos:position pos:line="360" pos:column="20"/></continue>
          }<pos:position pos:line="361" pos:column="12"/></block></then></if></elseif></if>

        <if pos:line="363" pos:column="9">if <condition pos:line="363" pos:column="12">(<expr><name pos:line="363" pos:column="13">c<pos:position pos:line="363" pos:column="14"/></name> <operator pos:line="363" pos:column="15">&lt;<pos:position pos:line="363" pos:column="19"/></operator> <literal type="number" pos:line="363" pos:column="17">0<pos:position pos:line="363" pos:column="18"/></literal></expr>)<pos:position pos:line="363" pos:column="19"/></condition><then pos:line="363" pos:column="19">
          <block pos:line="364" pos:column="11">{
          <decl_stmt><decl><type><specifier pos:line="365" pos:column="11">register<pos:position pos:line="365" pos:column="19"/></specifier> <specifier pos:line="365" pos:column="20">const<pos:position pos:line="365" pos:column="25"/></specifier> <name pos:line="365" pos:column="26">uschar<pos:position pos:line="365" pos:column="32"/></name> <modifier pos:line="365" pos:column="33">*<pos:position pos:line="365" pos:column="34"/></modifier></type><name pos:line="365" pos:column="34">cbits<pos:position pos:line="365" pos:column="39"/></name> <init pos:line="365" pos:column="40">= <expr><name><name pos:line="365" pos:column="42">cd<pos:position pos:line="365" pos:column="44"/></name><operator pos:line="365" pos:column="44">-&gt;<pos:position pos:line="365" pos:column="49"/></operator><name pos:line="365" pos:column="46">cbits<pos:position pos:line="365" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="365" pos:column="52"/></decl_stmt>
          <expr_stmt><expr><name pos:line="366" pos:column="11">class_charcount<pos:position pos:line="366" pos:column="26"/></name> <operator pos:line="366" pos:column="27">+=<pos:position pos:line="366" pos:column="29"/></operator> <literal type="number" pos:line="366" pos:column="30">2<pos:position pos:line="366" pos:column="31"/></literal></expr>;<pos:position pos:line="366" pos:column="32"/></expr_stmt>     <comment type="block" pos:line="366" pos:column="37">/* Greater than 1 is what matters */</comment>
          <switch pos:line="367" pos:column="11">switch <condition pos:line="367" pos:column="18">(<expr><operator pos:line="367" pos:column="19">-<pos:position pos:line="367" pos:column="20"/></operator><name pos:line="367" pos:column="20">c<pos:position pos:line="367" pos:column="21"/></name></expr>)<pos:position pos:line="367" pos:column="22"/></condition>
            <block pos:line="368" pos:column="13">{
            <case pos:line="369" pos:column="13">case <expr><name pos:line="369" pos:column="18">ESC_d<pos:position pos:line="369" pos:column="23"/></name></expr>:<pos:position pos:line="369" pos:column="24"/></case>
            <for pos:line="370" pos:column="13">for <control pos:line="370" pos:column="17">(<init><expr><name pos:line="370" pos:column="18">c<pos:position pos:line="370" pos:column="19"/></name> <operator pos:line="370" pos:column="20">=<pos:position pos:line="370" pos:column="21"/></operator> <literal type="number" pos:line="370" pos:column="22">0<pos:position pos:line="370" pos:column="23"/></literal></expr>;<pos:position pos:line="370" pos:column="24"/></init> <condition><expr><name pos:line="370" pos:column="25">c<pos:position pos:line="370" pos:column="26"/></name> <operator pos:line="370" pos:column="27">&lt;<pos:position pos:line="370" pos:column="31"/></operator> <literal type="number" pos:line="370" pos:column="29">32<pos:position pos:line="370" pos:column="31"/></literal></expr>;<pos:position pos:line="370" pos:column="32"/></condition> <incr><expr><name pos:line="370" pos:column="33">c<pos:position pos:line="370" pos:column="34"/></name><operator pos:line="370" pos:column="34">++<pos:position pos:line="370" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="370" pos:column="37"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="370" pos:column="38">classbits<pos:position pos:line="370" pos:column="47"/></name><index pos:line="370" pos:column="47">[<expr><name pos:line="370" pos:column="48">c<pos:position pos:line="370" pos:column="49"/></name></expr>]<pos:position pos:line="370" pos:column="50"/></index></name> <operator pos:line="370" pos:column="51">|=<pos:position pos:line="370" pos:column="53"/></operator> <name><name pos:line="370" pos:column="54">cbits<pos:position pos:line="370" pos:column="59"/></name><index pos:line="370" pos:column="59">[<expr><name pos:line="370" pos:column="60">c<pos:position pos:line="370" pos:column="61"/></name><operator pos:line="370" pos:column="61">+<pos:position pos:line="370" pos:column="62"/></operator><name pos:line="370" pos:column="62">cbit_digit<pos:position pos:line="370" pos:column="72"/></name></expr>]<pos:position pos:line="370" pos:column="73"/></index></name></expr>;<pos:position pos:line="370" pos:column="74"/></expr_stmt></block></for>
            <continue pos:line="371" pos:column="13">continue;<pos:position pos:line="371" pos:column="22"/></continue>

            <case pos:line="373" pos:column="13">case <expr><name pos:line="373" pos:column="18">ESC_D<pos:position pos:line="373" pos:column="23"/></name></expr>:<pos:position pos:line="373" pos:column="24"/></case>
            <for pos:line="374" pos:column="13">for <control pos:line="374" pos:column="17">(<init><expr><name pos:line="374" pos:column="18">c<pos:position pos:line="374" pos:column="19"/></name> <operator pos:line="374" pos:column="20">=<pos:position pos:line="374" pos:column="21"/></operator> <literal type="number" pos:line="374" pos:column="22">0<pos:position pos:line="374" pos:column="23"/></literal></expr>;<pos:position pos:line="374" pos:column="24"/></init> <condition><expr><name pos:line="374" pos:column="25">c<pos:position pos:line="374" pos:column="26"/></name> <operator pos:line="374" pos:column="27">&lt;<pos:position pos:line="374" pos:column="31"/></operator> <literal type="number" pos:line="374" pos:column="29">32<pos:position pos:line="374" pos:column="31"/></literal></expr>;<pos:position pos:line="374" pos:column="32"/></condition> <incr><expr><name pos:line="374" pos:column="33">c<pos:position pos:line="374" pos:column="34"/></name><operator pos:line="374" pos:column="34">++<pos:position pos:line="374" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="374" pos:column="37"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="374" pos:column="38">classbits<pos:position pos:line="374" pos:column="47"/></name><index pos:line="374" pos:column="47">[<expr><name pos:line="374" pos:column="48">c<pos:position pos:line="374" pos:column="49"/></name></expr>]<pos:position pos:line="374" pos:column="50"/></index></name> <operator pos:line="374" pos:column="51">|=<pos:position pos:line="374" pos:column="53"/></operator> <operator pos:line="374" pos:column="54">~<pos:position pos:line="374" pos:column="55"/></operator><name><name pos:line="374" pos:column="55">cbits<pos:position pos:line="374" pos:column="60"/></name><index pos:line="374" pos:column="60">[<expr><name pos:line="374" pos:column="61">c<pos:position pos:line="374" pos:column="62"/></name><operator pos:line="374" pos:column="62">+<pos:position pos:line="374" pos:column="63"/></operator><name pos:line="374" pos:column="63">cbit_digit<pos:position pos:line="374" pos:column="73"/></name></expr>]<pos:position pos:line="374" pos:column="74"/></index></name></expr>;<pos:position pos:line="374" pos:column="75"/></expr_stmt></block></for>
            <continue pos:line="375" pos:column="13">continue;<pos:position pos:line="375" pos:column="22"/></continue>

            <case pos:line="377" pos:column="13">case <expr><name pos:line="377" pos:column="18">ESC_w<pos:position pos:line="377" pos:column="23"/></name></expr>:<pos:position pos:line="377" pos:column="24"/></case>
            <for pos:line="378" pos:column="13">for <control pos:line="378" pos:column="17">(<init><expr><name pos:line="378" pos:column="18">c<pos:position pos:line="378" pos:column="19"/></name> <operator pos:line="378" pos:column="20">=<pos:position pos:line="378" pos:column="21"/></operator> <literal type="number" pos:line="378" pos:column="22">0<pos:position pos:line="378" pos:column="23"/></literal></expr>;<pos:position pos:line="378" pos:column="24"/></init> <condition><expr><name pos:line="378" pos:column="25">c<pos:position pos:line="378" pos:column="26"/></name> <operator pos:line="378" pos:column="27">&lt;<pos:position pos:line="378" pos:column="31"/></operator> <literal type="number" pos:line="378" pos:column="29">32<pos:position pos:line="378" pos:column="31"/></literal></expr>;<pos:position pos:line="378" pos:column="32"/></condition> <incr><expr><name pos:line="378" pos:column="33">c<pos:position pos:line="378" pos:column="34"/></name><operator pos:line="378" pos:column="34">++<pos:position pos:line="378" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="378" pos:column="37"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="378" pos:column="38">classbits<pos:position pos:line="378" pos:column="47"/></name><index pos:line="378" pos:column="47">[<expr><name pos:line="378" pos:column="48">c<pos:position pos:line="378" pos:column="49"/></name></expr>]<pos:position pos:line="378" pos:column="50"/></index></name> <operator pos:line="378" pos:column="51">|=<pos:position pos:line="378" pos:column="53"/></operator> <name><name pos:line="378" pos:column="54">cbits<pos:position pos:line="378" pos:column="59"/></name><index pos:line="378" pos:column="59">[<expr><name pos:line="378" pos:column="60">c<pos:position pos:line="378" pos:column="61"/></name><operator pos:line="378" pos:column="61">+<pos:position pos:line="378" pos:column="62"/></operator><name pos:line="378" pos:column="62">cbit_word<pos:position pos:line="378" pos:column="71"/></name></expr>]<pos:position pos:line="378" pos:column="72"/></index></name></expr>;<pos:position pos:line="378" pos:column="73"/></expr_stmt></block></for>
            <continue pos:line="379" pos:column="13">continue;<pos:position pos:line="379" pos:column="22"/></continue>

            <case pos:line="381" pos:column="13">case <expr><name pos:line="381" pos:column="18">ESC_W<pos:position pos:line="381" pos:column="23"/></name></expr>:<pos:position pos:line="381" pos:column="24"/></case>
            <for pos:line="382" pos:column="13">for <control pos:line="382" pos:column="17">(<init><expr><name pos:line="382" pos:column="18">c<pos:position pos:line="382" pos:column="19"/></name> <operator pos:line="382" pos:column="20">=<pos:position pos:line="382" pos:column="21"/></operator> <literal type="number" pos:line="382" pos:column="22">0<pos:position pos:line="382" pos:column="23"/></literal></expr>;<pos:position pos:line="382" pos:column="24"/></init> <condition><expr><name pos:line="382" pos:column="25">c<pos:position pos:line="382" pos:column="26"/></name> <operator pos:line="382" pos:column="27">&lt;<pos:position pos:line="382" pos:column="31"/></operator> <literal type="number" pos:line="382" pos:column="29">32<pos:position pos:line="382" pos:column="31"/></literal></expr>;<pos:position pos:line="382" pos:column="32"/></condition> <incr><expr><name pos:line="382" pos:column="33">c<pos:position pos:line="382" pos:column="34"/></name><operator pos:line="382" pos:column="34">++<pos:position pos:line="382" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="382" pos:column="37"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="382" pos:column="38">classbits<pos:position pos:line="382" pos:column="47"/></name><index pos:line="382" pos:column="47">[<expr><name pos:line="382" pos:column="48">c<pos:position pos:line="382" pos:column="49"/></name></expr>]<pos:position pos:line="382" pos:column="50"/></index></name> <operator pos:line="382" pos:column="51">|=<pos:position pos:line="382" pos:column="53"/></operator> <operator pos:line="382" pos:column="54">~<pos:position pos:line="382" pos:column="55"/></operator><name><name pos:line="382" pos:column="55">cbits<pos:position pos:line="382" pos:column="60"/></name><index pos:line="382" pos:column="60">[<expr><name pos:line="382" pos:column="61">c<pos:position pos:line="382" pos:column="62"/></name><operator pos:line="382" pos:column="62">+<pos:position pos:line="382" pos:column="63"/></operator><name pos:line="382" pos:column="63">cbit_word<pos:position pos:line="382" pos:column="72"/></name></expr>]<pos:position pos:line="382" pos:column="73"/></index></name></expr>;<pos:position pos:line="382" pos:column="74"/></expr_stmt></block></for>
            <continue pos:line="383" pos:column="13">continue;<pos:position pos:line="383" pos:column="22"/></continue>

            <case pos:line="385" pos:column="13">case <expr><name pos:line="385" pos:column="18">ESC_s<pos:position pos:line="385" pos:column="23"/></name></expr>:<pos:position pos:line="385" pos:column="24"/></case>
            <for pos:line="386" pos:column="13">for <control pos:line="386" pos:column="17">(<init><expr><name pos:line="386" pos:column="18">c<pos:position pos:line="386" pos:column="19"/></name> <operator pos:line="386" pos:column="20">=<pos:position pos:line="386" pos:column="21"/></operator> <literal type="number" pos:line="386" pos:column="22">0<pos:position pos:line="386" pos:column="23"/></literal></expr>;<pos:position pos:line="386" pos:column="24"/></init> <condition><expr><name pos:line="386" pos:column="25">c<pos:position pos:line="386" pos:column="26"/></name> <operator pos:line="386" pos:column="27">&lt;<pos:position pos:line="386" pos:column="31"/></operator> <literal type="number" pos:line="386" pos:column="29">32<pos:position pos:line="386" pos:column="31"/></literal></expr>;<pos:position pos:line="386" pos:column="32"/></condition> <incr><expr><name pos:line="386" pos:column="33">c<pos:position pos:line="386" pos:column="34"/></name><operator pos:line="386" pos:column="34">++<pos:position pos:line="386" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="386" pos:column="37"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="386" pos:column="38">classbits<pos:position pos:line="386" pos:column="47"/></name><index pos:line="386" pos:column="47">[<expr><name pos:line="386" pos:column="48">c<pos:position pos:line="386" pos:column="49"/></name></expr>]<pos:position pos:line="386" pos:column="50"/></index></name> <operator pos:line="386" pos:column="51">|=<pos:position pos:line="386" pos:column="53"/></operator> <name><name pos:line="386" pos:column="54">cbits<pos:position pos:line="386" pos:column="59"/></name><index pos:line="386" pos:column="59">[<expr><name pos:line="386" pos:column="60">c<pos:position pos:line="386" pos:column="61"/></name><operator pos:line="386" pos:column="61">+<pos:position pos:line="386" pos:column="62"/></operator><name pos:line="386" pos:column="62">cbit_space<pos:position pos:line="386" pos:column="72"/></name></expr>]<pos:position pos:line="386" pos:column="73"/></index></name></expr>;<pos:position pos:line="386" pos:column="74"/></expr_stmt></block></for>
            <expr_stmt><expr><name><name pos:line="387" pos:column="13">classbits<pos:position pos:line="387" pos:column="22"/></name><index pos:line="387" pos:column="22">[<expr><literal type="number" pos:line="387" pos:column="23">1<pos:position pos:line="387" pos:column="24"/></literal></expr>]<pos:position pos:line="387" pos:column="25"/></index></name> <operator pos:line="387" pos:column="26">&amp;=<pos:position pos:line="387" pos:column="32"/></operator> <operator pos:line="387" pos:column="29">~<pos:position pos:line="387" pos:column="30"/></operator><literal type="number" pos:line="387" pos:column="30">0x08<pos:position pos:line="387" pos:column="34"/></literal></expr>;<pos:position pos:line="387" pos:column="35"/></expr_stmt>   <comment type="block" pos:line="387" pos:column="38">/* Perl 5.004 onwards omits VT from \s */</comment>
            <continue pos:line="388" pos:column="13">continue;<pos:position pos:line="388" pos:column="22"/></continue>

            <case pos:line="390" pos:column="13">case <expr><name pos:line="390" pos:column="18">ESC_S<pos:position pos:line="390" pos:column="23"/></name></expr>:<pos:position pos:line="390" pos:column="24"/></case>
            <for pos:line="391" pos:column="13">for <control pos:line="391" pos:column="17">(<init><expr><name pos:line="391" pos:column="18">c<pos:position pos:line="391" pos:column="19"/></name> <operator pos:line="391" pos:column="20">=<pos:position pos:line="391" pos:column="21"/></operator> <literal type="number" pos:line="391" pos:column="22">0<pos:position pos:line="391" pos:column="23"/></literal></expr>;<pos:position pos:line="391" pos:column="24"/></init> <condition><expr><name pos:line="391" pos:column="25">c<pos:position pos:line="391" pos:column="26"/></name> <operator pos:line="391" pos:column="27">&lt;<pos:position pos:line="391" pos:column="31"/></operator> <literal type="number" pos:line="391" pos:column="29">32<pos:position pos:line="391" pos:column="31"/></literal></expr>;<pos:position pos:line="391" pos:column="32"/></condition> <incr><expr><name pos:line="391" pos:column="33">c<pos:position pos:line="391" pos:column="34"/></name><operator pos:line="391" pos:column="34">++<pos:position pos:line="391" pos:column="36"/></operator></expr></incr>)<pos:position pos:line="391" pos:column="37"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="391" pos:column="38">classbits<pos:position pos:line="391" pos:column="47"/></name><index pos:line="391" pos:column="47">[<expr><name pos:line="391" pos:column="48">c<pos:position pos:line="391" pos:column="49"/></name></expr>]<pos:position pos:line="391" pos:column="50"/></index></name> <operator pos:line="391" pos:column="51">|=<pos:position pos:line="391" pos:column="53"/></operator> <operator pos:line="391" pos:column="54">~<pos:position pos:line="391" pos:column="55"/></operator><name><name pos:line="391" pos:column="55">cbits<pos:position pos:line="391" pos:column="60"/></name><index pos:line="391" pos:column="60">[<expr><name pos:line="391" pos:column="61">c<pos:position pos:line="391" pos:column="62"/></name><operator pos:line="391" pos:column="62">+<pos:position pos:line="391" pos:column="63"/></operator><name pos:line="391" pos:column="63">cbit_space<pos:position pos:line="391" pos:column="73"/></name></expr>]<pos:position pos:line="391" pos:column="74"/></index></name></expr>;<pos:position pos:line="391" pos:column="75"/></expr_stmt></block></for>
            <expr_stmt><expr><name><name pos:line="392" pos:column="13">classbits<pos:position pos:line="392" pos:column="22"/></name><index pos:line="392" pos:column="22">[<expr><literal type="number" pos:line="392" pos:column="23">1<pos:position pos:line="392" pos:column="24"/></literal></expr>]<pos:position pos:line="392" pos:column="25"/></index></name> <operator pos:line="392" pos:column="26">|=<pos:position pos:line="392" pos:column="28"/></operator> <literal type="number" pos:line="392" pos:column="29">0x08<pos:position pos:line="392" pos:column="33"/></literal></expr>;<pos:position pos:line="392" pos:column="34"/></expr_stmt>    <comment type="block" pos:line="392" pos:column="38">/* Perl 5.004 onwards omits VT from \s */</comment>
            <continue pos:line="393" pos:column="13">continue;<pos:position pos:line="393" pos:column="22"/></continue>

<cpp:ifdef pos:line="395" pos:column="1">#<cpp:directive pos:line="395" pos:column="2">ifdef<pos:position pos:line="395" pos:column="7"/></cpp:directive> <name pos:line="395" pos:column="8">SUPPORT_UCP<pos:position pos:line="395" pos:column="19"/></name></cpp:ifdef>
            <case pos:line="396" pos:column="13">case <expr><name pos:line="396" pos:column="18">ESC_p<pos:position pos:line="396" pos:column="23"/></name></expr>:<pos:position pos:line="396" pos:column="24"/></case>
            <case pos:line="397" pos:column="13">case <expr><name pos:line="397" pos:column="18">ESC_P<pos:position pos:line="397" pos:column="23"/></name></expr>:<pos:position pos:line="397" pos:column="24"/></case>
              <block pos:line="398" pos:column="15">{
              <decl_stmt><decl><type><name pos:line="399" pos:column="15">BOOL<pos:position pos:line="399" pos:column="19"/></name></type> <name pos:line="399" pos:column="20">negated<pos:position pos:line="399" pos:column="27"/></name></decl>;<pos:position pos:line="399" pos:column="28"/></decl_stmt>
              <decl_stmt><decl><type><name pos:line="400" pos:column="15">int<pos:position pos:line="400" pos:column="18"/></name></type> <name pos:line="400" pos:column="19">property<pos:position pos:line="400" pos:column="27"/></name> <init pos:line="400" pos:column="28">= <expr><call><name pos:line="400" pos:column="30">get_ucp<pos:position pos:line="400" pos:column="37"/></name><argument_list pos:line="400" pos:column="37">(<argument><expr><operator pos:line="400" pos:column="38">&amp;<pos:position pos:line="400" pos:column="43"/></operator><name pos:line="400" pos:column="39">ptr<pos:position pos:line="400" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="400" pos:column="44">&amp;<pos:position pos:line="400" pos:column="49"/></operator><name pos:line="400" pos:column="45">negated<pos:position pos:line="400" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="400" pos:column="54">errorptr<pos:position pos:line="400" pos:column="62"/></name></expr></argument>)<pos:position pos:line="400" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="400" pos:column="64"/></decl_stmt>
              <if pos:line="401" pos:column="15">if <condition pos:line="401" pos:column="18">(<expr><name pos:line="401" pos:column="19">property<pos:position pos:line="401" pos:column="27"/></name> <operator pos:line="401" pos:column="28">&lt;<pos:position pos:line="401" pos:column="32"/></operator> <literal type="number" pos:line="401" pos:column="30">0<pos:position pos:line="401" pos:column="31"/></literal></expr>)<pos:position pos:line="401" pos:column="32"/></condition><then pos:line="401" pos:column="32"> <block type="pseudo"><goto pos:line="401" pos:column="33">goto <name pos:line="401" pos:column="38">FAILED<pos:position pos:line="401" pos:column="44"/></name>;<pos:position pos:line="401" pos:column="45"/></goto></block></then></if>
              <expr_stmt><expr><name pos:line="402" pos:column="15">class_utf8<pos:position pos:line="402" pos:column="25"/></name> <operator pos:line="402" pos:column="26">=<pos:position pos:line="402" pos:column="27"/></operator> <name pos:line="402" pos:column="28">TRUE<pos:position pos:line="402" pos:column="32"/></name></expr>;<pos:position pos:line="402" pos:column="33"/></expr_stmt>
              <expr_stmt><expr><operator pos:line="403" pos:column="15">*<pos:position pos:line="403" pos:column="16"/></operator><name pos:line="403" pos:column="16">class_utf8data<pos:position pos:line="403" pos:column="30"/></name><operator pos:line="403" pos:column="30">++<pos:position pos:line="403" pos:column="32"/></operator> <operator pos:line="403" pos:column="33">=<pos:position pos:line="403" pos:column="34"/></operator> <ternary><condition><expr><operator pos:line="403" pos:column="35">(<pos:position pos:line="403" pos:column="36"/></operator><operator pos:line="403" pos:column="36">(<pos:position pos:line="403" pos:column="37"/></operator><operator pos:line="403" pos:column="37">-<pos:position pos:line="403" pos:column="38"/></operator><name pos:line="403" pos:column="38">c<pos:position pos:line="403" pos:column="39"/></name> <operator pos:line="403" pos:column="40">==<pos:position pos:line="403" pos:column="42"/></operator> <name pos:line="403" pos:column="43">ESC_p<pos:position pos:line="403" pos:column="48"/></name><operator pos:line="403" pos:column="48">)<pos:position pos:line="403" pos:column="49"/></operator> <operator pos:line="403" pos:column="50">!=<pos:position pos:line="403" pos:column="52"/></operator> <name pos:line="403" pos:column="53">negated<pos:position pos:line="403" pos:column="60"/></name><operator pos:line="403" pos:column="60">)<pos:position pos:line="403" pos:column="61"/></operator></expr>?<pos:position pos:line="403" pos:column="62"/></condition><then pos:line="403" pos:column="62">
                <expr><name pos:line="404" pos:column="17">XCL_PROP<pos:position pos:line="404" pos:column="25"/></name></expr> <pos:position pos:line="404" pos:column="26"/></then><else pos:line="404" pos:column="26">: <expr><name pos:line="404" pos:column="28">XCL_NOTPROP<pos:position pos:line="404" pos:column="39"/></name></expr></else></ternary></expr>;<pos:position pos:line="404" pos:column="40"/></expr_stmt>
              <expr_stmt><expr><operator pos:line="405" pos:column="15">*<pos:position pos:line="405" pos:column="16"/></operator><name pos:line="405" pos:column="16">class_utf8data<pos:position pos:line="405" pos:column="30"/></name><operator pos:line="405" pos:column="30">++<pos:position pos:line="405" pos:column="32"/></operator> <operator pos:line="405" pos:column="33">=<pos:position pos:line="405" pos:column="34"/></operator> <name pos:line="405" pos:column="35">property<pos:position pos:line="405" pos:column="43"/></name></expr>;<pos:position pos:line="405" pos:column="44"/></expr_stmt>
              <expr_stmt><expr><name pos:line="406" pos:column="15">class_charcount<pos:position pos:line="406" pos:column="30"/></name> <operator pos:line="406" pos:column="31">-=<pos:position pos:line="406" pos:column="33"/></operator> <literal type="number" pos:line="406" pos:column="34">2<pos:position pos:line="406" pos:column="35"/></literal></expr>;<pos:position pos:line="406" pos:column="36"/></expr_stmt>   <comment type="block" pos:line="406" pos:column="39">/* Not a &lt; 256 character */</comment>
              }<pos:position pos:line="407" pos:column="16"/></block>
            <continue pos:line="408" pos:column="13">continue;<pos:position pos:line="408" pos:column="22"/></continue>
<cpp:endif pos:line="409" pos:column="1">#<cpp:directive pos:line="409" pos:column="2">endif<pos:position pos:line="409" pos:column="7"/></cpp:directive></cpp:endif>

            <comment type="block" pos:line="411" pos:column="13">/* Unrecognized escapes are faulted if PCRE is running in its
            strict mode. By default, for compatibility with Perl, they are
            treated as literals. */</comment>

            <default pos:line="415" pos:column="13">default:<pos:position pos:line="415" pos:column="21"/></default>
            <if pos:line="416" pos:column="13">if <condition pos:line="416" pos:column="16">(<expr><operator pos:line="416" pos:column="17">(<pos:position pos:line="416" pos:column="18"/></operator><name pos:line="416" pos:column="18">options<pos:position pos:line="416" pos:column="25"/></name> <operator pos:line="416" pos:column="26">&amp;<pos:position pos:line="416" pos:column="31"/></operator> <name pos:line="416" pos:column="28">PCRE_EXTRA<pos:position pos:line="416" pos:column="38"/></name><operator pos:line="416" pos:column="38">)<pos:position pos:line="416" pos:column="39"/></operator> <operator pos:line="416" pos:column="40">!=<pos:position pos:line="416" pos:column="42"/></operator> <literal type="number" pos:line="416" pos:column="43">0<pos:position pos:line="416" pos:column="44"/></literal></expr>)<pos:position pos:line="416" pos:column="45"/></condition><then pos:line="416" pos:column="45">
              <block pos:line="417" pos:column="15">{
              <expr_stmt><expr><operator pos:line="418" pos:column="15">*<pos:position pos:line="418" pos:column="16"/></operator><name pos:line="418" pos:column="16">errorptr<pos:position pos:line="418" pos:column="24"/></name> <operator pos:line="418" pos:column="25">=<pos:position pos:line="418" pos:column="26"/></operator> <name pos:line="418" pos:column="27">ERR7<pos:position pos:line="418" pos:column="31"/></name></expr>;<pos:position pos:line="418" pos:column="32"/></expr_stmt>
              <goto pos:line="419" pos:column="15">goto <name pos:line="419" pos:column="20">FAILED<pos:position pos:line="419" pos:column="26"/></name>;<pos:position pos:line="419" pos:column="27"/></goto>
              }<pos:position pos:line="420" pos:column="16"/></block></then></if>
            <expr_stmt><expr><name pos:line="421" pos:column="13">c<pos:position pos:line="421" pos:column="14"/></name> <operator pos:line="421" pos:column="15">=<pos:position pos:line="421" pos:column="16"/></operator> <operator pos:line="421" pos:column="17">*<pos:position pos:line="421" pos:column="18"/></operator><name pos:line="421" pos:column="18">ptr<pos:position pos:line="421" pos:column="21"/></name></expr>;<pos:position pos:line="421" pos:column="22"/></expr_stmt>              <comment type="block" pos:line="421" pos:column="36">/* The final character */</comment>
            <expr_stmt><expr><name pos:line="422" pos:column="13">class_charcount<pos:position pos:line="422" pos:column="28"/></name> <operator pos:line="422" pos:column="29">-=<pos:position pos:line="422" pos:column="31"/></operator> <literal type="number" pos:line="422" pos:column="32">2<pos:position pos:line="422" pos:column="33"/></literal></expr>;<pos:position pos:line="422" pos:column="34"/></expr_stmt>  <comment type="block" pos:line="422" pos:column="36">/* Undo the default count from above */</comment>
            }<pos:position pos:line="423" pos:column="14"/></block></switch>
          }<pos:position pos:line="424" pos:column="12"/></block></then></if>

        <comment type="block" pos:line="426" pos:column="9">/* Fall through if we have a single character (c &gt;= 0). This may be
        &gt; 256 in UTF-8 mode. */</comment>

        }<pos:position pos:line="429" pos:column="10"/></block></then></if>   <comment type="block" pos:line="429" pos:column="13">/* End of backslash handling */</comment>

      <comment type="block" pos:line="431" pos:column="7">/* A single character may be followed by '-' to form a range. However,
      Perl does not permit ']' to be the end of the range. A '-' character
      here is treated as a literal. */</comment>

      <if pos:line="435" pos:column="7">if <condition pos:line="435" pos:column="10">(<expr><name><name pos:line="435" pos:column="11">ptr<pos:position pos:line="435" pos:column="14"/></name><index pos:line="435" pos:column="14">[<expr><literal type="number" pos:line="435" pos:column="15">1<pos:position pos:line="435" pos:column="16"/></literal></expr>]<pos:position pos:line="435" pos:column="17"/></index></name> <operator pos:line="435" pos:column="18">==<pos:position pos:line="435" pos:column="20"/></operator> <literal type="char" pos:line="435" pos:column="21">'-'<pos:position pos:line="435" pos:column="24"/></literal> <operator pos:line="435" pos:column="25">&amp;&amp;<pos:position pos:line="435" pos:column="35"/></operator> <name><name pos:line="435" pos:column="28">ptr<pos:position pos:line="435" pos:column="31"/></name><index pos:line="435" pos:column="31">[<expr><literal type="number" pos:line="435" pos:column="32">2<pos:position pos:line="435" pos:column="33"/></literal></expr>]<pos:position pos:line="435" pos:column="34"/></index></name> <operator pos:line="435" pos:column="35">!=<pos:position pos:line="435" pos:column="37"/></operator> <literal type="char" pos:line="435" pos:column="38">']'<pos:position pos:line="435" pos:column="41"/></literal></expr>)<pos:position pos:line="435" pos:column="42"/></condition><then pos:line="435" pos:column="42">
        <block pos:line="436" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="437" pos:column="9">int<pos:position pos:line="437" pos:column="12"/></name></type> <name pos:line="437" pos:column="13">d<pos:position pos:line="437" pos:column="14"/></name></decl>;<pos:position pos:line="437" pos:column="15"/></decl_stmt>
        <expr_stmt><expr><name pos:line="438" pos:column="9">ptr<pos:position pos:line="438" pos:column="12"/></name> <operator pos:line="438" pos:column="13">+=<pos:position pos:line="438" pos:column="15"/></operator> <literal type="number" pos:line="438" pos:column="16">2<pos:position pos:line="438" pos:column="17"/></literal></expr>;<pos:position pos:line="438" pos:column="18"/></expr_stmt>

<cpp:ifdef pos:line="440" pos:column="1">#<cpp:directive pos:line="440" pos:column="2">ifdef<pos:position pos:line="440" pos:column="7"/></cpp:directive> <name pos:line="440" pos:column="8">SUPPORT_UTF8<pos:position pos:line="440" pos:column="20"/></name></cpp:ifdef>
        <if pos:line="441" pos:column="9">if <condition pos:line="441" pos:column="12">(<expr><name pos:line="441" pos:column="13">utf8<pos:position pos:line="441" pos:column="17"/></name></expr>)<pos:position pos:line="441" pos:column="18"/></condition><then pos:line="441" pos:column="18">
          <block pos:line="442" pos:column="11">{                           <comment type="block" pos:line="442" pos:column="39">/* Braces are required because the */</comment>
          <expr_stmt><expr><call><name pos:line="443" pos:column="11">GETCHARLEN<pos:position pos:line="443" pos:column="21"/></name><argument_list pos:line="443" pos:column="21">(<argument><expr><name pos:line="443" pos:column="22">d<pos:position pos:line="443" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="443" pos:column="25">ptr<pos:position pos:line="443" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="443" pos:column="30">ptr<pos:position pos:line="443" pos:column="33"/></name></expr></argument>)<pos:position pos:line="443" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="443" pos:column="35"/></expr_stmt>    <comment type="block" pos:line="443" pos:column="39">/* macro generates multiple statements */</comment>
          }<pos:position pos:line="444" pos:column="12"/></block></then>
        <else pos:line="445" pos:column="9">else
<cpp:endif pos:line="446" pos:column="1">#<cpp:directive pos:line="446" pos:column="2">endif<pos:position pos:line="446" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><expr_stmt><expr><name pos:line="447" pos:column="9">d<pos:position pos:line="447" pos:column="10"/></name> <operator pos:line="447" pos:column="11">=<pos:position pos:line="447" pos:column="12"/></operator> <operator pos:line="447" pos:column="13">*<pos:position pos:line="447" pos:column="14"/></operator><name pos:line="447" pos:column="14">ptr<pos:position pos:line="447" pos:column="17"/></name></expr>;<pos:position pos:line="447" pos:column="18"/></expr_stmt></block></else></if>  <comment type="block" pos:line="447" pos:column="20">/* Not UTF-8 mode */</comment>

        <comment type="block" pos:line="449" pos:column="9">/* The second part of a range can be a single-character escape, but
        not any of the other escapes. Perl 5.6 treats a hyphen as a literal
        in such circumstances. */</comment>

        <if pos:line="453" pos:column="9">if <condition pos:line="453" pos:column="12">(<expr><name pos:line="453" pos:column="13">d<pos:position pos:line="453" pos:column="14"/></name> <operator pos:line="453" pos:column="15">==<pos:position pos:line="453" pos:column="17"/></operator> <literal type="char" pos:line="453" pos:column="18">'\\'<pos:position pos:line="453" pos:column="22"/></literal></expr>)<pos:position pos:line="453" pos:column="23"/></condition><then pos:line="453" pos:column="23">
          <block pos:line="454" pos:column="11">{
          <decl_stmt><decl><type><specifier pos:line="455" pos:column="11">const<pos:position pos:line="455" pos:column="16"/></specifier> <name pos:line="455" pos:column="17">uschar<pos:position pos:line="455" pos:column="23"/></name> <modifier pos:line="455" pos:column="24">*<pos:position pos:line="455" pos:column="25"/></modifier></type><name pos:line="455" pos:column="25">oldptr<pos:position pos:line="455" pos:column="31"/></name> <init pos:line="455" pos:column="32">= <expr><name pos:line="455" pos:column="34">ptr<pos:position pos:line="455" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="455" pos:column="38"/></decl_stmt>
          <expr_stmt><expr><name pos:line="456" pos:column="11">d<pos:position pos:line="456" pos:column="12"/></name> <operator pos:line="456" pos:column="13">=<pos:position pos:line="456" pos:column="14"/></operator> <call><name pos:line="456" pos:column="15">check_escape<pos:position pos:line="456" pos:column="27"/></name><argument_list pos:line="456" pos:column="27">(<argument><expr><operator pos:line="456" pos:column="28">&amp;<pos:position pos:line="456" pos:column="33"/></operator><name pos:line="456" pos:column="29">ptr<pos:position pos:line="456" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="456" pos:column="34">errorptr<pos:position pos:line="456" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="456" pos:column="44">*<pos:position pos:line="456" pos:column="45"/></operator><name pos:line="456" pos:column="45">brackets<pos:position pos:line="456" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="456" pos:column="55">options<pos:position pos:line="456" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="456" pos:column="64">TRUE<pos:position pos:line="456" pos:column="68"/></name></expr></argument>)<pos:position pos:line="456" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="456" pos:column="70"/></expr_stmt>

          <comment type="block" pos:line="458" pos:column="11">/* \b is backslash; \X is literal X; any other special means the '-'
          was literal */</comment>

          <if pos:line="461" pos:column="11">if <condition pos:line="461" pos:column="14">(<expr><name pos:line="461" pos:column="15">d<pos:position pos:line="461" pos:column="16"/></name> <operator pos:line="461" pos:column="17">&lt;<pos:position pos:line="461" pos:column="21"/></operator> <literal type="number" pos:line="461" pos:column="19">0<pos:position pos:line="461" pos:column="20"/></literal></expr>)<pos:position pos:line="461" pos:column="21"/></condition><then pos:line="461" pos:column="21">
            <block pos:line="462" pos:column="13">{
            <if pos:line="463" pos:column="13">if <condition pos:line="463" pos:column="16">(<expr><name pos:line="463" pos:column="17">d<pos:position pos:line="463" pos:column="18"/></name> <operator pos:line="463" pos:column="19">==<pos:position pos:line="463" pos:column="21"/></operator> <operator pos:line="463" pos:column="22">-<pos:position pos:line="463" pos:column="23"/></operator><name pos:line="463" pos:column="23">ESC_b<pos:position pos:line="463" pos:column="28"/></name></expr>)<pos:position pos:line="463" pos:column="29"/></condition><then pos:line="463" pos:column="29"> <block type="pseudo"><expr_stmt><expr><name pos:line="463" pos:column="30">d<pos:position pos:line="463" pos:column="31"/></name> <operator pos:line="463" pos:column="32">=<pos:position pos:line="463" pos:column="33"/></operator> <literal type="char" pos:line="463" pos:column="34">'\b'<pos:position pos:line="463" pos:column="38"/></literal></expr>;<pos:position pos:line="463" pos:column="39"/></expr_stmt></block></then>
            <elseif pos:line="464" pos:column="13">else <if pos:line="464" pos:column="18">if <condition pos:line="464" pos:column="21">(<expr><name pos:line="464" pos:column="22">d<pos:position pos:line="464" pos:column="23"/></name> <operator pos:line="464" pos:column="24">==<pos:position pos:line="464" pos:column="26"/></operator> <operator pos:line="464" pos:column="27">-<pos:position pos:line="464" pos:column="28"/></operator><name pos:line="464" pos:column="28">ESC_X<pos:position pos:line="464" pos:column="33"/></name></expr>)<pos:position pos:line="464" pos:column="34"/></condition><then pos:line="464" pos:column="34"> <block type="pseudo"><expr_stmt><expr><name pos:line="464" pos:column="35">d<pos:position pos:line="464" pos:column="36"/></name> <operator pos:line="464" pos:column="37">=<pos:position pos:line="464" pos:column="38"/></operator> <literal type="char" pos:line="464" pos:column="39">'X'<pos:position pos:line="464" pos:column="42"/></literal></expr>;<pos:position pos:line="464" pos:column="43"/></expr_stmt></block></then></if></elseif> <else pos:line="464" pos:column="44">else
              <block pos:line="465" pos:column="15">{
              <expr_stmt><expr><name pos:line="466" pos:column="15">ptr<pos:position pos:line="466" pos:column="18"/></name> <operator pos:line="466" pos:column="19">=<pos:position pos:line="466" pos:column="20"/></operator> <name pos:line="466" pos:column="21">oldptr<pos:position pos:line="466" pos:column="27"/></name> <operator pos:line="466" pos:column="28">-<pos:position pos:line="466" pos:column="29"/></operator> <literal type="number" pos:line="466" pos:column="30">2<pos:position pos:line="466" pos:column="31"/></literal></expr>;<pos:position pos:line="466" pos:column="32"/></expr_stmt>
              <goto pos:line="467" pos:column="15">goto <name pos:line="467" pos:column="20">LONE_SINGLE_CHARACTER<pos:position pos:line="467" pos:column="41"/></name>;<pos:position pos:line="467" pos:column="42"/></goto>  <comment type="block" pos:line="467" pos:column="44">/* A few lines below */</comment>
              }<pos:position pos:line="468" pos:column="16"/></block></else></if>
            }<pos:position pos:line="469" pos:column="14"/></block></then></if>
          }<pos:position pos:line="470" pos:column="12"/></block></then></if>

        <comment type="block" pos:line="472" pos:column="9">/* The check that the two values are in the correct order happens in
        the pre-pass. Optimize one-character ranges */</comment>

        <if pos:line="475" pos:column="9">if <condition pos:line="475" pos:column="12">(<expr><name pos:line="475" pos:column="13">d<pos:position pos:line="475" pos:column="14"/></name> <operator pos:line="475" pos:column="15">==<pos:position pos:line="475" pos:column="17"/></operator> <name pos:line="475" pos:column="18">c<pos:position pos:line="475" pos:column="19"/></name></expr>)<pos:position pos:line="475" pos:column="20"/></condition><then pos:line="475" pos:column="20"> <block type="pseudo"><goto pos:line="475" pos:column="21">goto <name pos:line="475" pos:column="26">LONE_SINGLE_CHARACTER<pos:position pos:line="475" pos:column="47"/></name>;<pos:position pos:line="475" pos:column="48"/></goto></block></then></if>  <comment type="block" pos:line="475" pos:column="50">/* A few lines below */</comment>

        <comment type="block" pos:line="477" pos:column="9">/* In UTF-8 mode, if the upper limit is &gt; 255, or &gt; 127 for caseless
        matching, we have to use an XCLASS with extra data items. Caseless
        matching for characters &gt; 127 is available only if UCP support is
        available. */</comment>

<cpp:ifdef pos:line="482" pos:column="1">#<cpp:directive pos:line="482" pos:column="2">ifdef<pos:position pos:line="482" pos:column="7"/></cpp:directive> <name pos:line="482" pos:column="8">SUPPORT_UTF8<pos:position pos:line="482" pos:column="20"/></name></cpp:ifdef>
        <if pos:line="483" pos:column="9">if <condition pos:line="483" pos:column="12">(<expr><name pos:line="483" pos:column="13">utf8<pos:position pos:line="483" pos:column="17"/></name> <operator pos:line="483" pos:column="18">&amp;&amp;<pos:position pos:line="483" pos:column="28"/></operator> <operator pos:line="483" pos:column="21">(<pos:position pos:line="483" pos:column="22"/></operator><name pos:line="483" pos:column="22">d<pos:position pos:line="483" pos:column="23"/></name> <operator pos:line="483" pos:column="24">&gt;<pos:position pos:line="483" pos:column="28"/></operator> <literal type="number" pos:line="483" pos:column="26">255<pos:position pos:line="483" pos:column="29"/></literal> <operator pos:line="483" pos:column="30">||<pos:position pos:line="483" pos:column="32"/></operator> <operator pos:line="483" pos:column="33">(<pos:position pos:line="483" pos:column="34"/></operator><operator pos:line="483" pos:column="34">(<pos:position pos:line="483" pos:column="35"/></operator><name pos:line="483" pos:column="35">options<pos:position pos:line="483" pos:column="42"/></name> <operator pos:line="483" pos:column="43">&amp;<pos:position pos:line="483" pos:column="48"/></operator> <name pos:line="483" pos:column="45">PCRE_CASELESS<pos:position pos:line="483" pos:column="58"/></name><operator pos:line="483" pos:column="58">)<pos:position pos:line="483" pos:column="59"/></operator> <operator pos:line="483" pos:column="60">!=<pos:position pos:line="483" pos:column="62"/></operator> <literal type="number" pos:line="483" pos:column="63">0<pos:position pos:line="483" pos:column="64"/></literal> <operator pos:line="483" pos:column="65">&amp;&amp;<pos:position pos:line="483" pos:column="75"/></operator> <name pos:line="483" pos:column="68">d<pos:position pos:line="483" pos:column="69"/></name> <operator pos:line="483" pos:column="70">&gt;<pos:position pos:line="483" pos:column="74"/></operator> <literal type="number" pos:line="483" pos:column="72">127<pos:position pos:line="483" pos:column="75"/></literal><operator pos:line="483" pos:column="75">)<pos:position pos:line="483" pos:column="76"/></operator><operator pos:line="483" pos:column="76">)<pos:position pos:line="483" pos:column="77"/></operator></expr>)<pos:position pos:line="483" pos:column="78"/></condition><then pos:line="483" pos:column="78">
          <block pos:line="484" pos:column="11">{
          <expr_stmt><expr><name pos:line="485" pos:column="11">class_utf8<pos:position pos:line="485" pos:column="21"/></name> <operator pos:line="485" pos:column="22">=<pos:position pos:line="485" pos:column="23"/></operator> <name pos:line="485" pos:column="24">TRUE<pos:position pos:line="485" pos:column="28"/></name></expr>;<pos:position pos:line="485" pos:column="29"/></expr_stmt>

          <comment type="block" pos:line="487" pos:column="11">/* With UCP support, we can find the other case equivalents of
          the relevant characters. There may be several ranges. Optimize how
          they fit with the basic range. */</comment>

<cpp:ifdef pos:line="491" pos:column="1">#<cpp:directive pos:line="491" pos:column="2">ifdef<pos:position pos:line="491" pos:column="7"/></cpp:directive> <name pos:line="491" pos:column="8">SUPPORT_UCP<pos:position pos:line="491" pos:column="19"/></name></cpp:ifdef>
          <if pos:line="492" pos:column="11">if <condition pos:line="492" pos:column="14">(<expr><operator pos:line="492" pos:column="15">(<pos:position pos:line="492" pos:column="16"/></operator><name pos:line="492" pos:column="16">options<pos:position pos:line="492" pos:column="23"/></name> <operator pos:line="492" pos:column="24">&amp;<pos:position pos:line="492" pos:column="29"/></operator> <name pos:line="492" pos:column="26">PCRE_CASELESS<pos:position pos:line="492" pos:column="39"/></name><operator pos:line="492" pos:column="39">)<pos:position pos:line="492" pos:column="40"/></operator> <operator pos:line="492" pos:column="41">!=<pos:position pos:line="492" pos:column="43"/></operator> <literal type="number" pos:line="492" pos:column="44">0<pos:position pos:line="492" pos:column="45"/></literal></expr>)<pos:position pos:line="492" pos:column="46"/></condition><then pos:line="492" pos:column="46">
            <block pos:line="493" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="494" pos:column="13">int<pos:position pos:line="494" pos:column="16"/></name></type> <name pos:line="494" pos:column="17">occ<pos:position pos:line="494" pos:column="20"/></name></decl>, <decl><type ref="prev"/><name pos:line="494" pos:column="22">ocd<pos:position pos:line="494" pos:column="25"/></name></decl>;<pos:position pos:line="494" pos:column="26"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="495" pos:column="13">int<pos:position pos:line="495" pos:column="16"/></name></type> <name pos:line="495" pos:column="17">cc<pos:position pos:line="495" pos:column="19"/></name> <init pos:line="495" pos:column="20">= <expr><name pos:line="495" pos:column="22">c<pos:position pos:line="495" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="495" pos:column="24"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="496" pos:column="13">int<pos:position pos:line="496" pos:column="16"/></name></type> <name pos:line="496" pos:column="17">origd<pos:position pos:line="496" pos:column="22"/></name> <init pos:line="496" pos:column="23">= <expr><name pos:line="496" pos:column="25">d<pos:position pos:line="496" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="496" pos:column="27"/></decl_stmt>
            <while pos:line="497" pos:column="13">while <condition pos:line="497" pos:column="19">(<expr><call><name pos:line="497" pos:column="20">get_othercase_range<pos:position pos:line="497" pos:column="39"/></name><argument_list pos:line="497" pos:column="39">(<argument><expr><operator pos:line="497" pos:column="40">&amp;<pos:position pos:line="497" pos:column="45"/></operator><name pos:line="497" pos:column="41">cc<pos:position pos:line="497" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="497" pos:column="45">origd<pos:position pos:line="497" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="497" pos:column="52">&amp;<pos:position pos:line="497" pos:column="57"/></operator><name pos:line="497" pos:column="53">occ<pos:position pos:line="497" pos:column="56"/></name></expr></argument>, <argument><expr><operator pos:line="497" pos:column="58">&amp;<pos:position pos:line="497" pos:column="63"/></operator><name pos:line="497" pos:column="59">ocd<pos:position pos:line="497" pos:column="62"/></name></expr></argument>)<pos:position pos:line="497" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="497" pos:column="64"/></condition>
              <block pos:line="498" pos:column="15">{
              <if pos:line="499" pos:column="15">if <condition pos:line="499" pos:column="18">(<expr><name pos:line="499" pos:column="19">occ<pos:position pos:line="499" pos:column="22"/></name> <operator pos:line="499" pos:column="23">&gt;=<pos:position pos:line="499" pos:column="28"/></operator> <name pos:line="499" pos:column="26">c<pos:position pos:line="499" pos:column="27"/></name> <operator pos:line="499" pos:column="28">&amp;&amp;<pos:position pos:line="499" pos:column="38"/></operator> <name pos:line="499" pos:column="31">ocd<pos:position pos:line="499" pos:column="34"/></name> <operator pos:line="499" pos:column="35">&lt;=<pos:position pos:line="499" pos:column="40"/></operator> <name pos:line="499" pos:column="38">d<pos:position pos:line="499" pos:column="39"/></name></expr>)<pos:position pos:line="499" pos:column="40"/></condition><then pos:line="499" pos:column="40"> <block type="pseudo"><continue pos:line="499" pos:column="41">continue;<pos:position pos:line="499" pos:column="50"/></continue></block></then></if>  <comment type="block" pos:line="499" pos:column="52">/* Skip embedded ranges */</comment>

              <if pos:line="501" pos:column="15">if <condition pos:line="501" pos:column="18">(<expr><name pos:line="501" pos:column="19">occ<pos:position pos:line="501" pos:column="22"/></name> <operator pos:line="501" pos:column="23">&lt;<pos:position pos:line="501" pos:column="27"/></operator> <name pos:line="501" pos:column="25">c<pos:position pos:line="501" pos:column="26"/></name>  <operator pos:line="501" pos:column="28">&amp;&amp;<pos:position pos:line="501" pos:column="38"/></operator> <name pos:line="501" pos:column="31">ocd<pos:position pos:line="501" pos:column="34"/></name> <operator pos:line="501" pos:column="35">&gt;=<pos:position pos:line="501" pos:column="40"/></operator> <name pos:line="501" pos:column="38">c<pos:position pos:line="501" pos:column="39"/></name> <operator pos:line="501" pos:column="40">-<pos:position pos:line="501" pos:column="41"/></operator> <literal type="number" pos:line="501" pos:column="42">1<pos:position pos:line="501" pos:column="43"/></literal></expr>)<pos:position pos:line="501" pos:column="44"/></condition><then pos:line="501" pos:column="44">        <comment type="block" pos:line="501" pos:column="52">/* Extend the basic range */</comment>
                <block pos:line="502" pos:column="17">{                                  <comment type="block" pos:line="502" pos:column="52">/* if there is overlap,   */</comment>
                <expr_stmt><expr><name pos:line="503" pos:column="17">c<pos:position pos:line="503" pos:column="18"/></name> <operator pos:line="503" pos:column="19">=<pos:position pos:line="503" pos:column="20"/></operator> <name pos:line="503" pos:column="21">occ<pos:position pos:line="503" pos:column="24"/></name></expr>;<pos:position pos:line="503" pos:column="25"/></expr_stmt>                           <comment type="block" pos:line="503" pos:column="52">/* noting that if occ &lt; c */</comment>
                <continue pos:line="504" pos:column="17">continue;<pos:position pos:line="504" pos:column="26"/></continue>                          <comment type="block" pos:line="504" pos:column="52">/* we can't have ocd &gt; d  */</comment>
                }<pos:position pos:line="505" pos:column="18"/></block></then></if>                                  <comment type="block" pos:line="505" pos:column="52">/* because a subrange is  */</comment>
              <if pos:line="506" pos:column="15">if <condition pos:line="506" pos:column="18">(<expr><name pos:line="506" pos:column="19">ocd<pos:position pos:line="506" pos:column="22"/></name> <operator pos:line="506" pos:column="23">&gt;<pos:position pos:line="506" pos:column="27"/></operator> <name pos:line="506" pos:column="25">d<pos:position pos:line="506" pos:column="26"/></name> <operator pos:line="506" pos:column="27">&amp;&amp;<pos:position pos:line="506" pos:column="37"/></operator> <name pos:line="506" pos:column="30">occ<pos:position pos:line="506" pos:column="33"/></name> <operator pos:line="506" pos:column="34">&lt;=<pos:position pos:line="506" pos:column="39"/></operator> <name pos:line="506" pos:column="37">d<pos:position pos:line="506" pos:column="38"/></name> <operator pos:line="506" pos:column="39">+<pos:position pos:line="506" pos:column="40"/></operator> <literal type="number" pos:line="506" pos:column="41">1<pos:position pos:line="506" pos:column="42"/></literal></expr>)<pos:position pos:line="506" pos:column="43"/></condition><then pos:line="506" pos:column="43">         <comment type="block" pos:line="506" pos:column="52">/* always shorter than    */</comment>
                <block pos:line="507" pos:column="17">{                                  <comment type="block" pos:line="507" pos:column="52">/* the basic range.       */</comment>
                <expr_stmt><expr><name pos:line="508" pos:column="17">d<pos:position pos:line="508" pos:column="18"/></name> <operator pos:line="508" pos:column="19">=<pos:position pos:line="508" pos:column="20"/></operator> <name pos:line="508" pos:column="21">ocd<pos:position pos:line="508" pos:column="24"/></name></expr>;<pos:position pos:line="508" pos:column="25"/></expr_stmt>
                <continue pos:line="509" pos:column="17">continue;<pos:position pos:line="509" pos:column="26"/></continue>
                }<pos:position pos:line="510" pos:column="18"/></block></then></if>

              <if pos:line="512" pos:column="15">if <condition pos:line="512" pos:column="18">(<expr><name pos:line="512" pos:column="19">occ<pos:position pos:line="512" pos:column="22"/></name> <operator pos:line="512" pos:column="23">==<pos:position pos:line="512" pos:column="25"/></operator> <name pos:line="512" pos:column="26">ocd<pos:position pos:line="512" pos:column="29"/></name></expr>)<pos:position pos:line="512" pos:column="30"/></condition><then pos:line="512" pos:column="30">
                <block pos:line="513" pos:column="17">{
                <expr_stmt><expr><operator pos:line="514" pos:column="17">*<pos:position pos:line="514" pos:column="18"/></operator><name pos:line="514" pos:column="18">class_utf8data<pos:position pos:line="514" pos:column="32"/></name><operator pos:line="514" pos:column="32">++<pos:position pos:line="514" pos:column="34"/></operator> <operator pos:line="514" pos:column="35">=<pos:position pos:line="514" pos:column="36"/></operator> <name pos:line="514" pos:column="37">XCL_SINGLE<pos:position pos:line="514" pos:column="47"/></name></expr>;<pos:position pos:line="514" pos:column="48"/></expr_stmt>
                }<pos:position pos:line="515" pos:column="18"/></block></then>
              <else pos:line="516" pos:column="15">else
                <block pos:line="517" pos:column="17">{
                <expr_stmt><expr><operator pos:line="518" pos:column="17">*<pos:position pos:line="518" pos:column="18"/></operator><name pos:line="518" pos:column="18">class_utf8data<pos:position pos:line="518" pos:column="32"/></name><operator pos:line="518" pos:column="32">++<pos:position pos:line="518" pos:column="34"/></operator> <operator pos:line="518" pos:column="35">=<pos:position pos:line="518" pos:column="36"/></operator> <name pos:line="518" pos:column="37">XCL_RANGE<pos:position pos:line="518" pos:column="46"/></name></expr>;<pos:position pos:line="518" pos:column="47"/></expr_stmt>
                <expr_stmt><expr><name pos:line="519" pos:column="17">class_utf8data<pos:position pos:line="519" pos:column="31"/></name> <operator pos:line="519" pos:column="32">+=<pos:position pos:line="519" pos:column="34"/></operator> <call><name pos:line="519" pos:column="35">ord2utf8<pos:position pos:line="519" pos:column="43"/></name><argument_list pos:line="519" pos:column="43">(<argument><expr><name pos:line="519" pos:column="44">occ<pos:position pos:line="519" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="519" pos:column="49">class_utf8data<pos:position pos:line="519" pos:column="63"/></name></expr></argument>)<pos:position pos:line="519" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="519" pos:column="65"/></expr_stmt>
                }<pos:position pos:line="520" pos:column="18"/></block></else></if>
              <expr_stmt><expr><name pos:line="521" pos:column="15">class_utf8data<pos:position pos:line="521" pos:column="29"/></name> <operator pos:line="521" pos:column="30">+=<pos:position pos:line="521" pos:column="32"/></operator> <call><name pos:line="521" pos:column="33">ord2utf8<pos:position pos:line="521" pos:column="41"/></name><argument_list pos:line="521" pos:column="41">(<argument><expr><name pos:line="521" pos:column="42">ocd<pos:position pos:line="521" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="521" pos:column="47">class_utf8data<pos:position pos:line="521" pos:column="61"/></name></expr></argument>)<pos:position pos:line="521" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="521" pos:column="63"/></expr_stmt>
              }<pos:position pos:line="522" pos:column="16"/></block></while>
            }<pos:position pos:line="523" pos:column="14"/></block></then></if>
<cpp:endif pos:line="524" pos:column="1">#<cpp:directive pos:line="524" pos:column="2">endif<pos:position pos:line="524" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="524" pos:column="9">/* SUPPORT_UCP */</comment>

          <comment type="block" pos:line="526" pos:column="11">/* Now record the original range, possibly modified for UCP caseless
          overlapping ranges. */</comment>

          <expr_stmt><expr><operator pos:line="529" pos:column="11">*<pos:position pos:line="529" pos:column="12"/></operator><name pos:line="529" pos:column="12">class_utf8data<pos:position pos:line="529" pos:column="26"/></name><operator pos:line="529" pos:column="26">++<pos:position pos:line="529" pos:column="28"/></operator> <operator pos:line="529" pos:column="29">=<pos:position pos:line="529" pos:column="30"/></operator> <name pos:line="529" pos:column="31">XCL_RANGE<pos:position pos:line="529" pos:column="40"/></name></expr>;<pos:position pos:line="529" pos:column="41"/></expr_stmt>
          <expr_stmt><expr><name pos:line="530" pos:column="11">class_utf8data<pos:position pos:line="530" pos:column="25"/></name> <operator pos:line="530" pos:column="26">+=<pos:position pos:line="530" pos:column="28"/></operator> <call><name pos:line="530" pos:column="29">ord2utf8<pos:position pos:line="530" pos:column="37"/></name><argument_list pos:line="530" pos:column="37">(<argument><expr><name pos:line="530" pos:column="38">c<pos:position pos:line="530" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="530" pos:column="41">class_utf8data<pos:position pos:line="530" pos:column="55"/></name></expr></argument>)<pos:position pos:line="530" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="530" pos:column="57"/></expr_stmt>
          <expr_stmt><expr><name pos:line="531" pos:column="11">class_utf8data<pos:position pos:line="531" pos:column="25"/></name> <operator pos:line="531" pos:column="26">+=<pos:position pos:line="531" pos:column="28"/></operator> <call><name pos:line="531" pos:column="29">ord2utf8<pos:position pos:line="531" pos:column="37"/></name><argument_list pos:line="531" pos:column="37">(<argument><expr><name pos:line="531" pos:column="38">d<pos:position pos:line="531" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="531" pos:column="41">class_utf8data<pos:position pos:line="531" pos:column="55"/></name></expr></argument>)<pos:position pos:line="531" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="531" pos:column="57"/></expr_stmt>

          <comment type="block" pos:line="533" pos:column="11">/* With UCP support, we are done. Without UCP support, there is no
          caseless matching for UTF-8 characters &gt; 127; we can use the bit map
          for the smaller ones. */</comment>

<cpp:ifdef pos:line="537" pos:column="1">#<cpp:directive pos:line="537" pos:column="2">ifdef<pos:position pos:line="537" pos:column="7"/></cpp:directive> <name pos:line="537" pos:column="8">SUPPORT_UCP<pos:position pos:line="537" pos:column="19"/></name></cpp:ifdef>
          <continue pos:line="538" pos:column="11">continue;<pos:position pos:line="538" pos:column="20"/></continue>    <comment type="block" pos:line="538" pos:column="24">/* With next character in the class */</comment>
<cpp:else pos:line="539" pos:column="1">#<cpp:directive pos:line="539" pos:column="2">else<pos:position pos:line="539" pos:column="6"/></cpp:directive></cpp:else>
          <if pos:line="540" pos:column="11">if <condition pos:line="540" pos:column="14">(<expr><operator pos:line="540" pos:column="15">(<pos:position pos:line="540" pos:column="16"/></operator><name pos:line="540" pos:column="16">options<pos:position pos:line="540" pos:column="23"/></name> <operator pos:line="540" pos:column="24">&amp;<pos:position pos:line="540" pos:column="29"/></operator> <name pos:line="540" pos:column="26">PCRE_CASELESS<pos:position pos:line="540" pos:column="39"/></name><operator pos:line="540" pos:column="39">)<pos:position pos:line="540" pos:column="40"/></operator> <operator pos:line="540" pos:column="41">==<pos:position pos:line="540" pos:column="43"/></operator> <literal type="number" pos:line="540" pos:column="44">0<pos:position pos:line="540" pos:column="45"/></literal> <operator pos:line="540" pos:column="46">||<pos:position pos:line="540" pos:column="48"/></operator> <name pos:line="540" pos:column="49">c<pos:position pos:line="540" pos:column="50"/></name> <operator pos:line="540" pos:column="51">&gt;<pos:position pos:line="540" pos:column="55"/></operator> <literal type="number" pos:line="540" pos:column="53">127<pos:position pos:line="540" pos:column="56"/></literal></expr>)<pos:position pos:line="540" pos:column="57"/></condition><then pos:line="540" pos:column="57"> <block type="pseudo"><continue pos:line="540" pos:column="58">continue;<pos:position pos:line="540" pos:column="67"/></continue></block></then></if>

          <comment type="block" pos:line="542" pos:column="11">/* Adjust upper limit and fall through to set up the map */</comment>

          <expr_stmt><expr><name pos:line="544" pos:column="11">d<pos:position pos:line="544" pos:column="12"/></name> <operator pos:line="544" pos:column="13">=<pos:position pos:line="544" pos:column="14"/></operator> <literal type="number" pos:line="544" pos:column="15">127<pos:position pos:line="544" pos:column="18"/></literal></expr>;<pos:position pos:line="544" pos:column="19"/></expr_stmt>

<cpp:endif pos:line="546" pos:column="1">#<cpp:directive pos:line="546" pos:column="2">endif<pos:position pos:line="546" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="546" pos:column="9">/* SUPPORT_UCP */</comment>
          }<pos:position pos:line="547" pos:column="12"/></block></then></if>
<cpp:endif pos:line="548" pos:column="1">#<cpp:directive pos:line="548" pos:column="2">endif<pos:position pos:line="548" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="548" pos:column="9">/* SUPPORT_UTF8 */</comment>

        <comment type="block" pos:line="550" pos:column="9">/* We use the bit map for all cases when not in UTF-8 mode; else
        ranges that lie entirely within 0-127 when there is UCP support; else
        for partial ranges without UCP support. */</comment>

        <for pos:line="554" pos:column="9">for <control pos:line="554" pos:column="13">(<init pos:line="554" pos:column="14">;<pos:position pos:line="554" pos:column="15"/></init> <condition><expr><name pos:line="554" pos:column="16">c<pos:position pos:line="554" pos:column="17"/></name> <operator pos:line="554" pos:column="18">&lt;=<pos:position pos:line="554" pos:column="23"/></operator> <name pos:line="554" pos:column="21">d<pos:position pos:line="554" pos:column="22"/></name></expr>;<pos:position pos:line="554" pos:column="23"/></condition> <incr><expr><name pos:line="554" pos:column="24">c<pos:position pos:line="554" pos:column="25"/></name><operator pos:line="554" pos:column="25">++<pos:position pos:line="554" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="554" pos:column="28"/></control>
          <block pos:line="555" pos:column="11">{
          <expr_stmt><expr><name><name pos:line="556" pos:column="11">classbits<pos:position pos:line="556" pos:column="20"/></name><index pos:line="556" pos:column="20">[<expr><name pos:line="556" pos:column="21">c<pos:position pos:line="556" pos:column="22"/></name><operator pos:line="556" pos:column="22">/<pos:position pos:line="556" pos:column="23"/></operator><literal type="number" pos:line="556" pos:column="23">8<pos:position pos:line="556" pos:column="24"/></literal></expr>]<pos:position pos:line="556" pos:column="25"/></index></name> <operator pos:line="556" pos:column="26">|=<pos:position pos:line="556" pos:column="28"/></operator> <operator pos:line="556" pos:column="29">(<pos:position pos:line="556" pos:column="30"/></operator><literal type="number" pos:line="556" pos:column="30">1<pos:position pos:line="556" pos:column="31"/></literal> <operator pos:line="556" pos:column="32">&lt;&lt;<pos:position pos:line="556" pos:column="40"/></operator> <operator pos:line="556" pos:column="35">(<pos:position pos:line="556" pos:column="36"/></operator><name pos:line="556" pos:column="36">c<pos:position pos:line="556" pos:column="37"/></name><operator pos:line="556" pos:column="37">&amp;<pos:position pos:line="556" pos:column="42"/></operator><literal type="number" pos:line="556" pos:column="38">7<pos:position pos:line="556" pos:column="39"/></literal><operator pos:line="556" pos:column="39">)<pos:position pos:line="556" pos:column="40"/></operator><operator pos:line="556" pos:column="40">)<pos:position pos:line="556" pos:column="41"/></operator></expr>;<pos:position pos:line="556" pos:column="42"/></expr_stmt>
          <if pos:line="557" pos:column="11">if <condition pos:line="557" pos:column="14">(<expr><operator pos:line="557" pos:column="15">(<pos:position pos:line="557" pos:column="16"/></operator><name pos:line="557" pos:column="16">options<pos:position pos:line="557" pos:column="23"/></name> <operator pos:line="557" pos:column="24">&amp;<pos:position pos:line="557" pos:column="29"/></operator> <name pos:line="557" pos:column="26">PCRE_CASELESS<pos:position pos:line="557" pos:column="39"/></name><operator pos:line="557" pos:column="39">)<pos:position pos:line="557" pos:column="40"/></operator> <operator pos:line="557" pos:column="41">!=<pos:position pos:line="557" pos:column="43"/></operator> <literal type="number" pos:line="557" pos:column="44">0<pos:position pos:line="557" pos:column="45"/></literal></expr>)<pos:position pos:line="557" pos:column="46"/></condition><then pos:line="557" pos:column="46">
            <block pos:line="558" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="559" pos:column="13">int<pos:position pos:line="559" pos:column="16"/></name></type> <name pos:line="559" pos:column="17">uc<pos:position pos:line="559" pos:column="19"/></name> <init pos:line="559" pos:column="20">= <expr><name><name pos:line="559" pos:column="22">cd<pos:position pos:line="559" pos:column="24"/></name><operator pos:line="559" pos:column="24">-&gt;<pos:position pos:line="559" pos:column="29"/></operator><name pos:line="559" pos:column="26">fcc<pos:position pos:line="559" pos:column="29"/></name><index pos:line="559" pos:column="29">[<expr><name pos:line="559" pos:column="30">c<pos:position pos:line="559" pos:column="31"/></name></expr>]<pos:position pos:line="559" pos:column="32"/></index></name></expr></init></decl>;<pos:position pos:line="559" pos:column="33"/></decl_stmt>           <comment type="block" pos:line="559" pos:column="44">/* flip case */</comment>
            <expr_stmt><expr><name><name pos:line="560" pos:column="13">classbits<pos:position pos:line="560" pos:column="22"/></name><index pos:line="560" pos:column="22">[<expr><name pos:line="560" pos:column="23">uc<pos:position pos:line="560" pos:column="25"/></name><operator pos:line="560" pos:column="25">/<pos:position pos:line="560" pos:column="26"/></operator><literal type="number" pos:line="560" pos:column="26">8<pos:position pos:line="560" pos:column="27"/></literal></expr>]<pos:position pos:line="560" pos:column="28"/></index></name> <operator pos:line="560" pos:column="29">|=<pos:position pos:line="560" pos:column="31"/></operator> <operator pos:line="560" pos:column="32">(<pos:position pos:line="560" pos:column="33"/></operator><literal type="number" pos:line="560" pos:column="33">1<pos:position pos:line="560" pos:column="34"/></literal> <operator pos:line="560" pos:column="35">&lt;&lt;<pos:position pos:line="560" pos:column="43"/></operator> <operator pos:line="560" pos:column="38">(<pos:position pos:line="560" pos:column="39"/></operator><name pos:line="560" pos:column="39">uc<pos:position pos:line="560" pos:column="41"/></name><operator pos:line="560" pos:column="41">&amp;<pos:position pos:line="560" pos:column="46"/></operator><literal type="number" pos:line="560" pos:column="42">7<pos:position pos:line="560" pos:column="43"/></literal><operator pos:line="560" pos:column="43">)<pos:position pos:line="560" pos:column="44"/></operator><operator pos:line="560" pos:column="44">)<pos:position pos:line="560" pos:column="45"/></operator></expr>;<pos:position pos:line="560" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="561" pos:column="14"/></block></then></if>
          <expr_stmt><expr><name pos:line="562" pos:column="11">class_charcount<pos:position pos:line="562" pos:column="26"/></name><operator pos:line="562" pos:column="26">++<pos:position pos:line="562" pos:column="28"/></operator></expr>;<pos:position pos:line="562" pos:column="29"/></expr_stmt>                <comment type="block" pos:line="562" pos:column="45">/* in case a one-char range */</comment>
          <expr_stmt><expr><name pos:line="563" pos:column="11">class_lastchar<pos:position pos:line="563" pos:column="25"/></name> <operator pos:line="563" pos:column="26">=<pos:position pos:line="563" pos:column="27"/></operator> <name pos:line="563" pos:column="28">c<pos:position pos:line="563" pos:column="29"/></name></expr>;<pos:position pos:line="563" pos:column="30"/></expr_stmt>
          }<pos:position pos:line="564" pos:column="12"/></block></for>

        <continue pos:line="566" pos:column="9">continue;<pos:position pos:line="566" pos:column="18"/></continue>   <comment type="block" pos:line="566" pos:column="21">/* Go get the next char in the class */</comment>
        }<pos:position pos:line="567" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="569" pos:column="7">/* Handle a lone single character - we can get here for a normal
      non-escape char, or after \ that introduces a single character or for an
      apparent range that isn't. */</comment>

      <label><name pos:line="573" pos:column="7">LONE_SINGLE_CHARACTER<pos:position pos:line="573" pos:column="28"/></name>:<pos:position pos:line="573" pos:column="29"/></label>

      <comment type="block" pos:line="575" pos:column="7">/* Handle a character that cannot go in the bit map */</comment>

<cpp:ifdef pos:line="577" pos:column="1">#<cpp:directive pos:line="577" pos:column="2">ifdef<pos:position pos:line="577" pos:column="7"/></cpp:directive> <name pos:line="577" pos:column="8">SUPPORT_UTF8<pos:position pos:line="577" pos:column="20"/></name></cpp:ifdef>
      <if pos:line="578" pos:column="7">if <condition pos:line="578" pos:column="10">(<expr><name pos:line="578" pos:column="11">utf8<pos:position pos:line="578" pos:column="15"/></name> <operator pos:line="578" pos:column="16">&amp;&amp;<pos:position pos:line="578" pos:column="26"/></operator> <operator pos:line="578" pos:column="19">(<pos:position pos:line="578" pos:column="20"/></operator><name pos:line="578" pos:column="20">c<pos:position pos:line="578" pos:column="21"/></name> <operator pos:line="578" pos:column="22">&gt;<pos:position pos:line="578" pos:column="26"/></operator> <literal type="number" pos:line="578" pos:column="24">255<pos:position pos:line="578" pos:column="27"/></literal> <operator pos:line="578" pos:column="28">||<pos:position pos:line="578" pos:column="30"/></operator> <operator pos:line="578" pos:column="31">(<pos:position pos:line="578" pos:column="32"/></operator><operator pos:line="578" pos:column="32">(<pos:position pos:line="578" pos:column="33"/></operator><name pos:line="578" pos:column="33">options<pos:position pos:line="578" pos:column="40"/></name> <operator pos:line="578" pos:column="41">&amp;<pos:position pos:line="578" pos:column="46"/></operator> <name pos:line="578" pos:column="43">PCRE_CASELESS<pos:position pos:line="578" pos:column="56"/></name><operator pos:line="578" pos:column="56">)<pos:position pos:line="578" pos:column="57"/></operator> <operator pos:line="578" pos:column="58">!=<pos:position pos:line="578" pos:column="60"/></operator> <literal type="number" pos:line="578" pos:column="61">0<pos:position pos:line="578" pos:column="62"/></literal> <operator pos:line="578" pos:column="63">&amp;&amp;<pos:position pos:line="578" pos:column="73"/></operator> <name pos:line="578" pos:column="66">c<pos:position pos:line="578" pos:column="67"/></name> <operator pos:line="578" pos:column="68">&gt;<pos:position pos:line="578" pos:column="72"/></operator> <literal type="number" pos:line="578" pos:column="70">127<pos:position pos:line="578" pos:column="73"/></literal><operator pos:line="578" pos:column="73">)<pos:position pos:line="578" pos:column="74"/></operator><operator pos:line="578" pos:column="74">)<pos:position pos:line="578" pos:column="75"/></operator></expr>)<pos:position pos:line="578" pos:column="76"/></condition><then pos:line="578" pos:column="76">
        <block pos:line="579" pos:column="9">{
        <expr_stmt><expr><name pos:line="580" pos:column="9">class_utf8<pos:position pos:line="580" pos:column="19"/></name> <operator pos:line="580" pos:column="20">=<pos:position pos:line="580" pos:column="21"/></operator> <name pos:line="580" pos:column="22">TRUE<pos:position pos:line="580" pos:column="26"/></name></expr>;<pos:position pos:line="580" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="581" pos:column="9">*<pos:position pos:line="581" pos:column="10"/></operator><name pos:line="581" pos:column="10">class_utf8data<pos:position pos:line="581" pos:column="24"/></name><operator pos:line="581" pos:column="24">++<pos:position pos:line="581" pos:column="26"/></operator> <operator pos:line="581" pos:column="27">=<pos:position pos:line="581" pos:column="28"/></operator> <name pos:line="581" pos:column="29">XCL_SINGLE<pos:position pos:line="581" pos:column="39"/></name></expr>;<pos:position pos:line="581" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="582" pos:column="9">class_utf8data<pos:position pos:line="582" pos:column="23"/></name> <operator pos:line="582" pos:column="24">+=<pos:position pos:line="582" pos:column="26"/></operator> <call><name pos:line="582" pos:column="27">ord2utf8<pos:position pos:line="582" pos:column="35"/></name><argument_list pos:line="582" pos:column="35">(<argument><expr><name pos:line="582" pos:column="36">c<pos:position pos:line="582" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="582" pos:column="39">class_utf8data<pos:position pos:line="582" pos:column="53"/></name></expr></argument>)<pos:position pos:line="582" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="582" pos:column="55"/></expr_stmt>

<cpp:ifdef pos:line="584" pos:column="1">#<cpp:directive pos:line="584" pos:column="2">ifdef<pos:position pos:line="584" pos:column="7"/></cpp:directive> <name pos:line="584" pos:column="8">SUPPORT_UCP<pos:position pos:line="584" pos:column="19"/></name></cpp:ifdef>
        <if pos:line="585" pos:column="9">if <condition pos:line="585" pos:column="12">(<expr><operator pos:line="585" pos:column="13">(<pos:position pos:line="585" pos:column="14"/></operator><name pos:line="585" pos:column="14">options<pos:position pos:line="585" pos:column="21"/></name> <operator pos:line="585" pos:column="22">&amp;<pos:position pos:line="585" pos:column="27"/></operator> <name pos:line="585" pos:column="24">PCRE_CASELESS<pos:position pos:line="585" pos:column="37"/></name><operator pos:line="585" pos:column="37">)<pos:position pos:line="585" pos:column="38"/></operator> <operator pos:line="585" pos:column="39">!=<pos:position pos:line="585" pos:column="41"/></operator> <literal type="number" pos:line="585" pos:column="42">0<pos:position pos:line="585" pos:column="43"/></literal></expr>)<pos:position pos:line="585" pos:column="44"/></condition><then pos:line="585" pos:column="44">
          <block pos:line="586" pos:column="11">{
          <decl_stmt><decl><type><name pos:line="587" pos:column="11">int<pos:position pos:line="587" pos:column="14"/></name></type> <name pos:line="587" pos:column="15">chartype<pos:position pos:line="587" pos:column="23"/></name></decl>;<pos:position pos:line="587" pos:column="24"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="588" pos:column="11">int<pos:position pos:line="588" pos:column="14"/></name></type> <name pos:line="588" pos:column="15">othercase<pos:position pos:line="588" pos:column="24"/></name></decl>;<pos:position pos:line="588" pos:column="25"/></decl_stmt>
          <if pos:line="589" pos:column="11">if <condition pos:line="589" pos:column="14">(<expr><call><name pos:line="589" pos:column="15">ucp_findchar<pos:position pos:line="589" pos:column="27"/></name><argument_list pos:line="589" pos:column="27">(<argument><expr><name pos:line="589" pos:column="28">c<pos:position pos:line="589" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="589" pos:column="31">&amp;<pos:position pos:line="589" pos:column="36"/></operator><name pos:line="589" pos:column="32">chartype<pos:position pos:line="589" pos:column="40"/></name></expr></argument>, <argument><expr><operator pos:line="589" pos:column="42">&amp;<pos:position pos:line="589" pos:column="47"/></operator><name pos:line="589" pos:column="43">othercase<pos:position pos:line="589" pos:column="52"/></name></expr></argument>)<pos:position pos:line="589" pos:column="53"/></argument_list></call> <operator pos:line="589" pos:column="54">&gt;=<pos:position pos:line="589" pos:column="59"/></operator> <literal type="number" pos:line="589" pos:column="57">0<pos:position pos:line="589" pos:column="58"/></literal> <operator pos:line="589" pos:column="59">&amp;&amp;<pos:position pos:line="589" pos:column="69"/></operator> <name pos:line="589" pos:column="62">othercase<pos:position pos:line="589" pos:column="71"/></name> <operator pos:line="589" pos:column="72">&gt;<pos:position pos:line="589" pos:column="76"/></operator> <literal type="number" pos:line="589" pos:column="74">0<pos:position pos:line="589" pos:column="75"/></literal></expr>)<pos:position pos:line="589" pos:column="76"/></condition><then pos:line="589" pos:column="76">
            <block pos:line="590" pos:column="13">{
            <expr_stmt><expr><operator pos:line="591" pos:column="13">*<pos:position pos:line="591" pos:column="14"/></operator><name pos:line="591" pos:column="14">class_utf8data<pos:position pos:line="591" pos:column="28"/></name><operator pos:line="591" pos:column="28">++<pos:position pos:line="591" pos:column="30"/></operator> <operator pos:line="591" pos:column="31">=<pos:position pos:line="591" pos:column="32"/></operator> <name pos:line="591" pos:column="33">XCL_SINGLE<pos:position pos:line="591" pos:column="43"/></name></expr>;<pos:position pos:line="591" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name pos:line="592" pos:column="13">class_utf8data<pos:position pos:line="592" pos:column="27"/></name> <operator pos:line="592" pos:column="28">+=<pos:position pos:line="592" pos:column="30"/></operator> <call><name pos:line="592" pos:column="31">ord2utf8<pos:position pos:line="592" pos:column="39"/></name><argument_list pos:line="592" pos:column="39">(<argument><expr><name pos:line="592" pos:column="40">othercase<pos:position pos:line="592" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="592" pos:column="51">class_utf8data<pos:position pos:line="592" pos:column="65"/></name></expr></argument>)<pos:position pos:line="592" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="592" pos:column="67"/></expr_stmt>
            }<pos:position pos:line="593" pos:column="14"/></block></then></if>
          }<pos:position pos:line="594" pos:column="12"/></block></then></if>
<cpp:endif pos:line="595" pos:column="1">#<cpp:directive pos:line="595" pos:column="2">endif<pos:position pos:line="595" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="595" pos:column="9">/* SUPPORT_UCP */</comment>

        }<pos:position pos:line="597" pos:column="10"/></block></then>
      <else pos:line="598" pos:column="7">else
<cpp:endif pos:line="599" pos:column="1">#<cpp:directive pos:line="599" pos:column="2">endif<pos:position pos:line="599" pos:column="7"/></cpp:directive></cpp:endif>  <comment type="block" pos:line="599" pos:column="9">/* SUPPORT_UTF8 */</comment>

      <comment type="block" pos:line="601" pos:column="7">/* Handle a single-byte character */</comment>
        <block pos:line="602" pos:column="9">{
        <expr_stmt><expr><name><name pos:line="603" pos:column="9">classbits<pos:position pos:line="603" pos:column="18"/></name><index pos:line="603" pos:column="18">[<expr><name pos:line="603" pos:column="19">c<pos:position pos:line="603" pos:column="20"/></name><operator pos:line="603" pos:column="20">/<pos:position pos:line="603" pos:column="21"/></operator><literal type="number" pos:line="603" pos:column="21">8<pos:position pos:line="603" pos:column="22"/></literal></expr>]<pos:position pos:line="603" pos:column="23"/></index></name> <operator pos:line="603" pos:column="24">|=<pos:position pos:line="603" pos:column="26"/></operator> <operator pos:line="603" pos:column="27">(<pos:position pos:line="603" pos:column="28"/></operator><literal type="number" pos:line="603" pos:column="28">1<pos:position pos:line="603" pos:column="29"/></literal> <operator pos:line="603" pos:column="30">&lt;&lt;<pos:position pos:line="603" pos:column="38"/></operator> <operator pos:line="603" pos:column="33">(<pos:position pos:line="603" pos:column="34"/></operator><name pos:line="603" pos:column="34">c<pos:position pos:line="603" pos:column="35"/></name><operator pos:line="603" pos:column="35">&amp;<pos:position pos:line="603" pos:column="40"/></operator><literal type="number" pos:line="603" pos:column="36">7<pos:position pos:line="603" pos:column="37"/></literal><operator pos:line="603" pos:column="37">)<pos:position pos:line="603" pos:column="38"/></operator><operator pos:line="603" pos:column="38">)<pos:position pos:line="603" pos:column="39"/></operator></expr>;<pos:position pos:line="603" pos:column="40"/></expr_stmt>
        <if pos:line="604" pos:column="9">if <condition pos:line="604" pos:column="12">(<expr><operator pos:line="604" pos:column="13">(<pos:position pos:line="604" pos:column="14"/></operator><name pos:line="604" pos:column="14">options<pos:position pos:line="604" pos:column="21"/></name> <operator pos:line="604" pos:column="22">&amp;<pos:position pos:line="604" pos:column="27"/></operator> <name pos:line="604" pos:column="24">PCRE_CASELESS<pos:position pos:line="604" pos:column="37"/></name><operator pos:line="604" pos:column="37">)<pos:position pos:line="604" pos:column="38"/></operator> <operator pos:line="604" pos:column="39">!=<pos:position pos:line="604" pos:column="41"/></operator> <literal type="number" pos:line="604" pos:column="42">0<pos:position pos:line="604" pos:column="43"/></literal></expr>)<pos:position pos:line="604" pos:column="44"/></condition><then pos:line="604" pos:column="44">
          <block pos:line="605" pos:column="11">{
          <expr_stmt><expr><name pos:line="606" pos:column="11">c<pos:position pos:line="606" pos:column="12"/></name> <operator pos:line="606" pos:column="13">=<pos:position pos:line="606" pos:column="14"/></operator> <name><name pos:line="606" pos:column="15">cd<pos:position pos:line="606" pos:column="17"/></name><operator pos:line="606" pos:column="17">-&gt;<pos:position pos:line="606" pos:column="22"/></operator><name pos:line="606" pos:column="19">fcc<pos:position pos:line="606" pos:column="22"/></name><index pos:line="606" pos:column="22">[<expr><name pos:line="606" pos:column="23">c<pos:position pos:line="606" pos:column="24"/></name></expr>]<pos:position pos:line="606" pos:column="25"/></index></name></expr>;<pos:position pos:line="606" pos:column="26"/></expr_stmt>   <comment type="block" pos:line="606" pos:column="29">/* flip case */</comment>
          <expr_stmt><expr><name><name pos:line="607" pos:column="11">classbits<pos:position pos:line="607" pos:column="20"/></name><index pos:line="607" pos:column="20">[<expr><name pos:line="607" pos:column="21">c<pos:position pos:line="607" pos:column="22"/></name><operator pos:line="607" pos:column="22">/<pos:position pos:line="607" pos:column="23"/></operator><literal type="number" pos:line="607" pos:column="23">8<pos:position pos:line="607" pos:column="24"/></literal></expr>]<pos:position pos:line="607" pos:column="25"/></index></name> <operator pos:line="607" pos:column="26">|=<pos:position pos:line="607" pos:column="28"/></operator> <operator pos:line="607" pos:column="29">(<pos:position pos:line="607" pos:column="30"/></operator><literal type="number" pos:line="607" pos:column="30">1<pos:position pos:line="607" pos:column="31"/></literal> <operator pos:line="607" pos:column="32">&lt;&lt;<pos:position pos:line="607" pos:column="40"/></operator> <operator pos:line="607" pos:column="35">(<pos:position pos:line="607" pos:column="36"/></operator><name pos:line="607" pos:column="36">c<pos:position pos:line="607" pos:column="37"/></name><operator pos:line="607" pos:column="37">&amp;<pos:position pos:line="607" pos:column="42"/></operator><literal type="number" pos:line="607" pos:column="38">7<pos:position pos:line="607" pos:column="39"/></literal><operator pos:line="607" pos:column="39">)<pos:position pos:line="607" pos:column="40"/></operator><operator pos:line="607" pos:column="40">)<pos:position pos:line="607" pos:column="41"/></operator></expr>;<pos:position pos:line="607" pos:column="42"/></expr_stmt>
          }<pos:position pos:line="608" pos:column="12"/></block></then></if>
        <expr_stmt><expr><name pos:line="609" pos:column="9">class_charcount<pos:position pos:line="609" pos:column="24"/></name><operator pos:line="609" pos:column="24">++<pos:position pos:line="609" pos:column="26"/></operator></expr>;<pos:position pos:line="609" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="610" pos:column="9">class_lastchar<pos:position pos:line="610" pos:column="23"/></name> <operator pos:line="610" pos:column="24">=<pos:position pos:line="610" pos:column="25"/></operator> <name pos:line="610" pos:column="26">c<pos:position pos:line="610" pos:column="27"/></name></expr>;<pos:position pos:line="610" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="611" pos:column="10"/></block></else></if>
      }<pos:position pos:line="612" pos:column="8"/></block>

    <comment type="block" pos:line="614" pos:column="5">/* Loop until ']' reached; the check for end of string happens inside the
    loop. This "while" is the end of the "do" above. */</comment>

    while <condition pos:line="617" pos:column="11">(<expr><operator pos:line="617" pos:column="12">(<pos:position pos:line="617" pos:column="13"/></operator><name pos:line="617" pos:column="13">c<pos:position pos:line="617" pos:column="14"/></name> <operator pos:line="617" pos:column="15">=<pos:position pos:line="617" pos:column="16"/></operator> <operator pos:line="617" pos:column="17">*<pos:position pos:line="617" pos:column="18"/></operator><operator pos:line="617" pos:column="18">(<pos:position pos:line="617" pos:column="19"/></operator><operator pos:line="617" pos:column="19">++<pos:position pos:line="617" pos:column="21"/></operator><name pos:line="617" pos:column="21">ptr<pos:position pos:line="617" pos:column="24"/></name><operator pos:line="617" pos:column="24">)<pos:position pos:line="617" pos:column="25"/></operator><operator pos:line="617" pos:column="25">)<pos:position pos:line="617" pos:column="26"/></operator> <operator pos:line="617" pos:column="27">!=<pos:position pos:line="617" pos:column="29"/></operator> <literal type="char" pos:line="617" pos:column="30">']'<pos:position pos:line="617" pos:column="33"/></literal> <operator pos:line="617" pos:column="34">||<pos:position pos:line="617" pos:column="36"/></operator> <name pos:line="617" pos:column="37">inescq<pos:position pos:line="617" pos:column="43"/></name></expr>)<pos:position pos:line="617" pos:column="44"/></condition>;<pos:position pos:line="617" pos:column="45"/></do>

    <comment type="block" pos:line="619" pos:column="5">/* If class_charcount is 1, we saw precisely one character whose value is
    less than 256. In non-UTF-8 mode we can always optimize. In UTF-8 mode, we
    can optimize the negative case only if there were no characters &gt;= 128
    because OP_NOT and the related opcodes like OP_NOTSTAR operate on
    single-bytes only. This is an historical hangover. Maybe one day we can
    tidy these opcodes to handle multi-byte characters.

    The optimization throws away the bit map. We turn the item into a
    1-character OP_CHAR[NC] if it's positive, or OP_NOT if it's negative. Note
    that OP_NOT does not support multibyte characters. In the positive case, it
    can cause firstbyte to be set. Otherwise, there can be no first char if
    this item is first, whatever repeat count may follow. In the case of
    reqbyte, save the previous value for reinstating. */</comment>

<cpp:ifdef pos:line="633" pos:column="1">#<cpp:directive pos:line="633" pos:column="2">ifdef<pos:position pos:line="633" pos:column="7"/></cpp:directive> <name pos:line="633" pos:column="8">SUPPORT_UTF8<pos:position pos:line="633" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="634" pos:column="5">if <condition pos:line="634" pos:column="8">(<expr><name pos:line="634" pos:column="9">class_charcount<pos:position pos:line="634" pos:column="24"/></name> <operator pos:line="634" pos:column="25">==<pos:position pos:line="634" pos:column="27"/></operator> <literal type="number" pos:line="634" pos:column="28">1<pos:position pos:line="634" pos:column="29"/></literal> <operator pos:line="634" pos:column="30">&amp;&amp;<pos:position pos:line="634" pos:column="40"/></operator>
          <operator pos:line="635" pos:column="11">(<pos:position pos:line="635" pos:column="12"/></operator><operator pos:line="635" pos:column="12">!<pos:position pos:line="635" pos:column="13"/></operator><name pos:line="635" pos:column="13">utf8<pos:position pos:line="635" pos:column="17"/></name> <operator pos:line="635" pos:column="18">||<pos:position pos:line="635" pos:column="20"/></operator>
          <operator pos:line="636" pos:column="11">(<pos:position pos:line="636" pos:column="12"/></operator><operator pos:line="636" pos:column="12">!<pos:position pos:line="636" pos:column="13"/></operator><name pos:line="636" pos:column="13">class_utf8<pos:position pos:line="636" pos:column="23"/></name> <operator pos:line="636" pos:column="24">&amp;&amp;<pos:position pos:line="636" pos:column="34"/></operator> <operator pos:line="636" pos:column="27">(<pos:position pos:line="636" pos:column="28"/></operator><operator pos:line="636" pos:column="28">!<pos:position pos:line="636" pos:column="29"/></operator><name pos:line="636" pos:column="29">negate_class<pos:position pos:line="636" pos:column="41"/></name> <operator pos:line="636" pos:column="42">||<pos:position pos:line="636" pos:column="44"/></operator> <name pos:line="636" pos:column="45">class_lastchar<pos:position pos:line="636" pos:column="59"/></name> <operator pos:line="636" pos:column="60">&lt;<pos:position pos:line="636" pos:column="64"/></operator> <literal type="number" pos:line="636" pos:column="62">128<pos:position pos:line="636" pos:column="65"/></literal><operator pos:line="636" pos:column="65">)<pos:position pos:line="636" pos:column="66"/></operator><operator pos:line="636" pos:column="66">)<pos:position pos:line="636" pos:column="67"/></operator><operator pos:line="636" pos:column="67">)<pos:position pos:line="636" pos:column="68"/></operator></expr>)<pos:position pos:line="636" pos:column="69"/></condition><then pos:line="636" pos:column="69">

<cpp:else pos:line="638" pos:column="1">#<cpp:directive pos:line="638" pos:column="2">else<pos:position pos:line="638" pos:column="6"/></cpp:directive></cpp:else>
    <block type="pseudo"><if pos:line="639" pos:column="5">if <condition pos:line="639" pos:column="8">(<expr><name pos:line="639" pos:column="9">class_charcount<pos:position pos:line="639" pos:column="24"/></name> <operator pos:line="639" pos:column="25">==<pos:position pos:line="639" pos:column="27"/></operator> <literal type="number" pos:line="639" pos:column="28">1<pos:position pos:line="639" pos:column="29"/></literal></expr>)<pos:position pos:line="639" pos:column="30"/></condition><then pos:line="639" pos:column="30">
<cpp:endif pos:line="640" pos:column="1">#<cpp:directive pos:line="640" pos:column="2">endif<pos:position pos:line="640" pos:column="7"/></cpp:directive></cpp:endif>
      <block pos:line="641" pos:column="7">{
      <expr_stmt><expr><name pos:line="642" pos:column="7">zeroreqbyte<pos:position pos:line="642" pos:column="18"/></name> <operator pos:line="642" pos:column="19">=<pos:position pos:line="642" pos:column="20"/></operator> <name pos:line="642" pos:column="21">reqbyte<pos:position pos:line="642" pos:column="28"/></name></expr>;<pos:position pos:line="642" pos:column="29"/></expr_stmt>

      <comment type="block" pos:line="644" pos:column="7">/* The OP_NOT opcode works on one-byte characters only. */</comment>

      <if pos:line="646" pos:column="7">if <condition pos:line="646" pos:column="10">(<expr><name pos:line="646" pos:column="11">negate_class<pos:position pos:line="646" pos:column="23"/></name></expr>)<pos:position pos:line="646" pos:column="24"/></condition><then pos:line="646" pos:column="24">
        <block pos:line="647" pos:column="9">{
        <if pos:line="648" pos:column="9">if <condition pos:line="648" pos:column="12">(<expr><name pos:line="648" pos:column="13">firstbyte<pos:position pos:line="648" pos:column="22"/></name> <operator pos:line="648" pos:column="23">==<pos:position pos:line="648" pos:column="25"/></operator> <name pos:line="648" pos:column="26">REQ_UNSET<pos:position pos:line="648" pos:column="35"/></name></expr>)<pos:position pos:line="648" pos:column="36"/></condition><then pos:line="648" pos:column="36"> <block type="pseudo"><expr_stmt><expr><name pos:line="648" pos:column="37">firstbyte<pos:position pos:line="648" pos:column="46"/></name> <operator pos:line="648" pos:column="47">=<pos:position pos:line="648" pos:column="48"/></operator> <name pos:line="648" pos:column="49">REQ_NONE<pos:position pos:line="648" pos:column="57"/></name></expr>;<pos:position pos:line="648" pos:column="58"/></expr_stmt></block></then></if>
        <expr_stmt><expr><name pos:line="649" pos:column="9">zerofirstbyte<pos:position pos:line="649" pos:column="22"/></name> <operator pos:line="649" pos:column="23">=<pos:position pos:line="649" pos:column="24"/></operator> <name pos:line="649" pos:column="25">firstbyte<pos:position pos:line="649" pos:column="34"/></name></expr>;<pos:position pos:line="649" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="650" pos:column="9">*<pos:position pos:line="650" pos:column="10"/></operator><name pos:line="650" pos:column="10">code<pos:position pos:line="650" pos:column="14"/></name><operator pos:line="650" pos:column="14">++<pos:position pos:line="650" pos:column="16"/></operator> <operator pos:line="650" pos:column="17">=<pos:position pos:line="650" pos:column="18"/></operator> <name pos:line="650" pos:column="19">OP_NOT<pos:position pos:line="650" pos:column="25"/></name></expr>;<pos:position pos:line="650" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="651" pos:column="9">*<pos:position pos:line="651" pos:column="10"/></operator><name pos:line="651" pos:column="10">code<pos:position pos:line="651" pos:column="14"/></name><operator pos:line="651" pos:column="14">++<pos:position pos:line="651" pos:column="16"/></operator> <operator pos:line="651" pos:column="17">=<pos:position pos:line="651" pos:column="18"/></operator> <name pos:line="651" pos:column="19">class_lastchar<pos:position pos:line="651" pos:column="33"/></name></expr>;<pos:position pos:line="651" pos:column="34"/></expr_stmt>
        <break pos:line="652" pos:column="9">break;<pos:position pos:line="652" pos:column="15"/></break>
        }<pos:position pos:line="653" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="655" pos:column="7">/* For a single, positive character, get the value into mcbuffer, and
      then we can handle this with the normal one-character code. */</comment>

<cpp:ifdef pos:line="658" pos:column="1">#<cpp:directive pos:line="658" pos:column="2">ifdef<pos:position pos:line="658" pos:column="7"/></cpp:directive> <name pos:line="658" pos:column="8">SUPPORT_UTF8<pos:position pos:line="658" pos:column="20"/></name></cpp:ifdef>
      <if pos:line="659" pos:column="7">if <condition pos:line="659" pos:column="10">(<expr><name pos:line="659" pos:column="11">utf8<pos:position pos:line="659" pos:column="15"/></name> <operator pos:line="659" pos:column="16">&amp;&amp;<pos:position pos:line="659" pos:column="26"/></operator> <name pos:line="659" pos:column="19">class_lastchar<pos:position pos:line="659" pos:column="33"/></name> <operator pos:line="659" pos:column="34">&gt;<pos:position pos:line="659" pos:column="38"/></operator> <literal type="number" pos:line="659" pos:column="36">127<pos:position pos:line="659" pos:column="39"/></literal></expr>)<pos:position pos:line="659" pos:column="40"/></condition><then pos:line="659" pos:column="40">
        <block type="pseudo"><expr_stmt><expr><name pos:line="660" pos:column="9">mclength<pos:position pos:line="660" pos:column="17"/></name> <operator pos:line="660" pos:column="18">=<pos:position pos:line="660" pos:column="19"/></operator> <call><name pos:line="660" pos:column="20">ord2utf8<pos:position pos:line="660" pos:column="28"/></name><argument_list pos:line="660" pos:column="28">(<argument><expr><name pos:line="660" pos:column="29">class_lastchar<pos:position pos:line="660" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="660" pos:column="45">mcbuffer<pos:position pos:line="660" pos:column="53"/></name></expr></argument>)<pos:position pos:line="660" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="660" pos:column="55"/></expr_stmt></block></then>
      <else pos:line="661" pos:column="7">else
<cpp:endif pos:line="662" pos:column="1">#<cpp:directive pos:line="662" pos:column="2">endif<pos:position pos:line="662" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="663" pos:column="9">{
        <expr_stmt><expr><name><name pos:line="664" pos:column="9">mcbuffer<pos:position pos:line="664" pos:column="17"/></name><index pos:line="664" pos:column="17">[<expr><literal type="number" pos:line="664" pos:column="18">0<pos:position pos:line="664" pos:column="19"/></literal></expr>]<pos:position pos:line="664" pos:column="20"/></index></name> <operator pos:line="664" pos:column="21">=<pos:position pos:line="664" pos:column="22"/></operator> <name pos:line="664" pos:column="23">class_lastchar<pos:position pos:line="664" pos:column="37"/></name></expr>;<pos:position pos:line="664" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="665" pos:column="9">mclength<pos:position pos:line="665" pos:column="17"/></name> <operator pos:line="665" pos:column="18">=<pos:position pos:line="665" pos:column="19"/></operator> <literal type="number" pos:line="665" pos:column="20">1<pos:position pos:line="665" pos:column="21"/></literal></expr>;<pos:position pos:line="665" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="666" pos:column="10"/></block></else></if>
      <goto pos:line="667" pos:column="7">goto <name pos:line="667" pos:column="12">ONE_CHAR<pos:position pos:line="667" pos:column="20"/></name>;<pos:position pos:line="667" pos:column="21"/></goto>
      }<pos:position pos:line="668" pos:column="8"/></block></then></if></block></then></if>       <comment type="block" pos:line="668" pos:column="15">/* End of 1-char optimization */</comment>

    <comment type="block" pos:line="670" pos:column="5">/* The general case - not the one-char optimization. If this is the first
    thing in the branch, there can be no first char setting, whatever the
    repeat count. Any reqbyte setting must remain unchanged after any kind of
    repeat. */</comment>

    <if pos:line="675" pos:column="5">if <condition pos:line="675" pos:column="8">(<expr><name pos:line="675" pos:column="9">firstbyte<pos:position pos:line="675" pos:column="18"/></name> <operator pos:line="675" pos:column="19">==<pos:position pos:line="675" pos:column="21"/></operator> <name pos:line="675" pos:column="22">REQ_UNSET<pos:position pos:line="675" pos:column="31"/></name></expr>)<pos:position pos:line="675" pos:column="32"/></condition><then pos:line="675" pos:column="32"> <block type="pseudo"><expr_stmt><expr><name pos:line="675" pos:column="33">firstbyte<pos:position pos:line="675" pos:column="42"/></name> <operator pos:line="675" pos:column="43">=<pos:position pos:line="675" pos:column="44"/></operator> <name pos:line="675" pos:column="45">REQ_NONE<pos:position pos:line="675" pos:column="53"/></name></expr>;<pos:position pos:line="675" pos:column="54"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name pos:line="676" pos:column="5">zerofirstbyte<pos:position pos:line="676" pos:column="18"/></name> <operator pos:line="676" pos:column="19">=<pos:position pos:line="676" pos:column="20"/></operator> <name pos:line="676" pos:column="21">firstbyte<pos:position pos:line="676" pos:column="30"/></name></expr>;<pos:position pos:line="676" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="677" pos:column="5">zeroreqbyte<pos:position pos:line="677" pos:column="16"/></name> <operator pos:line="677" pos:column="17">=<pos:position pos:line="677" pos:column="18"/></operator> <name pos:line="677" pos:column="19">reqbyte<pos:position pos:line="677" pos:column="26"/></name></expr>;<pos:position pos:line="677" pos:column="27"/></expr_stmt>

    <comment type="block" pos:line="679" pos:column="5">/* If there are characters with values &gt; 255, we have to compile an
    extended class, with its own opcode. If there are no characters &lt; 256,
    we can omit the bitmap. */</comment>

<cpp:ifdef pos:line="683" pos:column="1">#<cpp:directive pos:line="683" pos:column="2">ifdef<pos:position pos:line="683" pos:column="7"/></cpp:directive> <name pos:line="683" pos:column="8">SUPPORT_UTF8<pos:position pos:line="683" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="684" pos:column="5">if <condition pos:line="684" pos:column="8">(<expr><name pos:line="684" pos:column="9">class_utf8<pos:position pos:line="684" pos:column="19"/></name></expr>)<pos:position pos:line="684" pos:column="20"/></condition><then pos:line="684" pos:column="20">
      <block pos:line="685" pos:column="7">{
      <expr_stmt><expr><operator pos:line="686" pos:column="7">*<pos:position pos:line="686" pos:column="8"/></operator><name pos:line="686" pos:column="8">class_utf8data<pos:position pos:line="686" pos:column="22"/></name><operator pos:line="686" pos:column="22">++<pos:position pos:line="686" pos:column="24"/></operator> <operator pos:line="686" pos:column="25">=<pos:position pos:line="686" pos:column="26"/></operator> <name pos:line="686" pos:column="27">XCL_END<pos:position pos:line="686" pos:column="34"/></name></expr>;<pos:position pos:line="686" pos:column="35"/></expr_stmt>    <comment type="block" pos:line="686" pos:column="39">/* Marks the end of extra data */</comment>
      <expr_stmt><expr><operator pos:line="687" pos:column="7">*<pos:position pos:line="687" pos:column="8"/></operator><name pos:line="687" pos:column="8">code<pos:position pos:line="687" pos:column="12"/></name><operator pos:line="687" pos:column="12">++<pos:position pos:line="687" pos:column="14"/></operator> <operator pos:line="687" pos:column="15">=<pos:position pos:line="687" pos:column="16"/></operator> <name pos:line="687" pos:column="17">OP_XCLASS<pos:position pos:line="687" pos:column="26"/></name></expr>;<pos:position pos:line="687" pos:column="27"/></expr_stmt>
      <expr_stmt><expr><name pos:line="688" pos:column="7">code<pos:position pos:line="688" pos:column="11"/></name> <operator pos:line="688" pos:column="12">+=<pos:position pos:line="688" pos:column="14"/></operator> <name pos:line="688" pos:column="15">LINK_SIZE<pos:position pos:line="688" pos:column="24"/></name></expr>;<pos:position pos:line="688" pos:column="25"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="689" pos:column="7">*<pos:position pos:line="689" pos:column="8"/></operator><name pos:line="689" pos:column="8">code<pos:position pos:line="689" pos:column="12"/></name> <operator pos:line="689" pos:column="13">=<pos:position pos:line="689" pos:column="14"/></operator> <ternary><condition><expr><name pos:line="689" pos:column="15">negate_class<pos:position pos:line="689" pos:column="27"/></name></expr>?<pos:position pos:line="689" pos:column="28"/></condition><then pos:line="689" pos:column="28"> <expr><name pos:line="689" pos:column="29">XCL_NOT<pos:position pos:line="689" pos:column="36"/></name></expr> <pos:position pos:line="689" pos:column="37"/></then><else pos:line="689" pos:column="37">: <expr><literal type="number" pos:line="689" pos:column="39">0<pos:position pos:line="689" pos:column="40"/></literal></expr></else></ternary></expr>;<pos:position pos:line="689" pos:column="41"/></expr_stmt>

      <comment type="block" pos:line="691" pos:column="7">/* If the map is required, install it, and move on to the end of
      the extra data */</comment>

      <if pos:line="694" pos:column="7">if <condition pos:line="694" pos:column="10">(<expr><name pos:line="694" pos:column="11">class_charcount<pos:position pos:line="694" pos:column="26"/></name> <operator pos:line="694" pos:column="27">&gt;<pos:position pos:line="694" pos:column="31"/></operator> <literal type="number" pos:line="694" pos:column="29">0<pos:position pos:line="694" pos:column="30"/></literal></expr>)<pos:position pos:line="694" pos:column="31"/></condition><then pos:line="694" pos:column="31">
        <block pos:line="695" pos:column="9">{
        <expr_stmt><expr><operator pos:line="696" pos:column="9">*<pos:position pos:line="696" pos:column="10"/></operator><name pos:line="696" pos:column="10">code<pos:position pos:line="696" pos:column="14"/></name><operator pos:line="696" pos:column="14">++<pos:position pos:line="696" pos:column="16"/></operator> <operator pos:line="696" pos:column="17">|=<pos:position pos:line="696" pos:column="19"/></operator> <name pos:line="696" pos:column="20">XCL_MAP<pos:position pos:line="696" pos:column="27"/></name></expr>;<pos:position pos:line="696" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="697" pos:column="9">memcpy<pos:position pos:line="697" pos:column="15"/></name><argument_list pos:line="697" pos:column="15">(<argument><expr><name pos:line="697" pos:column="16">code<pos:position pos:line="697" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="697" pos:column="22">classbits<pos:position pos:line="697" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="697" pos:column="33">32<pos:position pos:line="697" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="697" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="697" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><name pos:line="698" pos:column="9">code<pos:position pos:line="698" pos:column="13"/></name> <operator pos:line="698" pos:column="14">=<pos:position pos:line="698" pos:column="15"/></operator> <name pos:line="698" pos:column="16">class_utf8data<pos:position pos:line="698" pos:column="30"/></name></expr>;<pos:position pos:line="698" pos:column="31"/></expr_stmt>
        }<pos:position pos:line="699" pos:column="10"/></block></then>

      <comment type="block" pos:line="701" pos:column="7">/* If the map is not required, slide down the extra data. */</comment>

      <else pos:line="703" pos:column="7">else
        <block pos:line="704" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="705" pos:column="9">int<pos:position pos:line="705" pos:column="12"/></name></type> <name pos:line="705" pos:column="13">len<pos:position pos:line="705" pos:column="16"/></name> <init pos:line="705" pos:column="17">= <expr><name pos:line="705" pos:column="19">class_utf8data<pos:position pos:line="705" pos:column="33"/></name> <operator pos:line="705" pos:column="34">-<pos:position pos:line="705" pos:column="35"/></operator> <operator pos:line="705" pos:column="36">(<pos:position pos:line="705" pos:column="37"/></operator><name pos:line="705" pos:column="37">code<pos:position pos:line="705" pos:column="41"/></name> <operator pos:line="705" pos:column="42">+<pos:position pos:line="705" pos:column="43"/></operator> <literal type="number" pos:line="705" pos:column="44">33<pos:position pos:line="705" pos:column="46"/></literal><operator pos:line="705" pos:column="46">)<pos:position pos:line="705" pos:column="47"/></operator></expr></init></decl>;<pos:position pos:line="705" pos:column="48"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="706" pos:column="9">memmove<pos:position pos:line="706" pos:column="16"/></name><argument_list pos:line="706" pos:column="16">(<argument><expr><name pos:line="706" pos:column="17">code<pos:position pos:line="706" pos:column="21"/></name> <operator pos:line="706" pos:column="22">+<pos:position pos:line="706" pos:column="23"/></operator> <literal type="number" pos:line="706" pos:column="24">1<pos:position pos:line="706" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="706" pos:column="27">code<pos:position pos:line="706" pos:column="31"/></name> <operator pos:line="706" pos:column="32">+<pos:position pos:line="706" pos:column="33"/></operator> <literal type="number" pos:line="706" pos:column="34">33<pos:position pos:line="706" pos:column="36"/></literal></expr></argument>, <argument><expr><name pos:line="706" pos:column="38">len<pos:position pos:line="706" pos:column="41"/></name></expr></argument>)<pos:position pos:line="706" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="706" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="707" pos:column="9">code<pos:position pos:line="707" pos:column="13"/></name> <operator pos:line="707" pos:column="14">+=<pos:position pos:line="707" pos:column="16"/></operator> <name pos:line="707" pos:column="17">len<pos:position pos:line="707" pos:column="20"/></name> <operator pos:line="707" pos:column="21">+<pos:position pos:line="707" pos:column="22"/></operator> <literal type="number" pos:line="707" pos:column="23">1<pos:position pos:line="707" pos:column="24"/></literal></expr>;<pos:position pos:line="707" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="708" pos:column="10"/></block></else></if>

      <comment type="block" pos:line="710" pos:column="7">/* Now fill in the complete length of the item */</comment>

      <expr_stmt><expr><call><name pos:line="712" pos:column="7">PUT<pos:position pos:line="712" pos:column="10"/></name><argument_list pos:line="712" pos:column="10">(<argument><expr><name pos:line="712" pos:column="11">previous<pos:position pos:line="712" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="712" pos:column="21">1<pos:position pos:line="712" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="712" pos:column="24">code<pos:position pos:line="712" pos:column="28"/></name> <operator pos:line="712" pos:column="29">-<pos:position pos:line="712" pos:column="30"/></operator> <name pos:line="712" pos:column="31">previous<pos:position pos:line="712" pos:column="39"/></name></expr></argument>)<pos:position pos:line="712" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="712" pos:column="41"/></expr_stmt>
      <break pos:line="713" pos:column="7">break;<pos:position pos:line="713" pos:column="13"/></break>   <comment type="block" pos:line="713" pos:column="16">/* End of class handling */</comment>
      }<pos:position pos:line="714" pos:column="8"/></block></then></if>
<cpp:endif pos:line="715" pos:column="1">#<cpp:directive pos:line="715" pos:column="2">endif<pos:position pos:line="715" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="717" pos:column="5">/* If there are no characters &gt; 255, negate the 32-byte map if necessary,
    and copy it into the code vector. If this is the first thing in the branch,
    there can be no first char setting, whatever the repeat count. Any reqbyte
    setting must remain unchanged after any kind of repeat. */</comment>

    <if pos:line="722" pos:column="5">if <condition pos:line="722" pos:column="8">(<expr><name pos:line="722" pos:column="9">negate_class<pos:position pos:line="722" pos:column="21"/></name></expr>)<pos:position pos:line="722" pos:column="22"/></condition><then pos:line="722" pos:column="22">
      <block pos:line="723" pos:column="7">{
      <expr_stmt><expr><operator pos:line="724" pos:column="7">*<pos:position pos:line="724" pos:column="8"/></operator><name pos:line="724" pos:column="8">code<pos:position pos:line="724" pos:column="12"/></name><operator pos:line="724" pos:column="12">++<pos:position pos:line="724" pos:column="14"/></operator> <operator pos:line="724" pos:column="15">=<pos:position pos:line="724" pos:column="16"/></operator> <name pos:line="724" pos:column="17">OP_NCLASS<pos:position pos:line="724" pos:column="26"/></name></expr>;<pos:position pos:line="724" pos:column="27"/></expr_stmt>
      <for pos:line="725" pos:column="7">for <control pos:line="725" pos:column="11">(<init><expr><name pos:line="725" pos:column="12">c<pos:position pos:line="725" pos:column="13"/></name> <operator pos:line="725" pos:column="14">=<pos:position pos:line="725" pos:column="15"/></operator> <literal type="number" pos:line="725" pos:column="16">0<pos:position pos:line="725" pos:column="17"/></literal></expr>;<pos:position pos:line="725" pos:column="18"/></init> <condition><expr><name pos:line="725" pos:column="19">c<pos:position pos:line="725" pos:column="20"/></name> <operator pos:line="725" pos:column="21">&lt;<pos:position pos:line="725" pos:column="25"/></operator> <literal type="number" pos:line="725" pos:column="23">32<pos:position pos:line="725" pos:column="25"/></literal></expr>;<pos:position pos:line="725" pos:column="26"/></condition> <incr><expr><name pos:line="725" pos:column="27">c<pos:position pos:line="725" pos:column="28"/></name><operator pos:line="725" pos:column="28">++<pos:position pos:line="725" pos:column="30"/></operator></expr></incr>)<pos:position pos:line="725" pos:column="31"/></control> <block type="pseudo"><expr_stmt><expr><name><name pos:line="725" pos:column="32">code<pos:position pos:line="725" pos:column="36"/></name><index pos:line="725" pos:column="36">[<expr><name pos:line="725" pos:column="37">c<pos:position pos:line="725" pos:column="38"/></name></expr>]<pos:position pos:line="725" pos:column="39"/></index></name> <operator pos:line="725" pos:column="40">=<pos:position pos:line="725" pos:column="41"/></operator> <operator pos:line="725" pos:column="42">~<pos:position pos:line="725" pos:column="43"/></operator><name><name pos:line="725" pos:column="43">classbits<pos:position pos:line="725" pos:column="52"/></name><index pos:line="725" pos:column="52">[<expr><name pos:line="725" pos:column="53">c<pos:position pos:line="725" pos:column="54"/></name></expr>]<pos:position pos:line="725" pos:column="55"/></index></name></expr>;<pos:position pos:line="725" pos:column="56"/></expr_stmt></block></for>
      }<pos:position pos:line="726" pos:column="8"/></block></then>
    <else pos:line="727" pos:column="5">else
      <block pos:line="728" pos:column="7">{
      <expr_stmt><expr><operator pos:line="729" pos:column="7">*<pos:position pos:line="729" pos:column="8"/></operator><name pos:line="729" pos:column="8">code<pos:position pos:line="729" pos:column="12"/></name><operator pos:line="729" pos:column="12">++<pos:position pos:line="729" pos:column="14"/></operator> <operator pos:line="729" pos:column="15">=<pos:position pos:line="729" pos:column="16"/></operator> <name pos:line="729" pos:column="17">OP_CLASS<pos:position pos:line="729" pos:column="25"/></name></expr>;<pos:position pos:line="729" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="730" pos:column="7">memcpy<pos:position pos:line="730" pos:column="13"/></name><argument_list pos:line="730" pos:column="13">(<argument><expr><name pos:line="730" pos:column="14">code<pos:position pos:line="730" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="730" pos:column="20">classbits<pos:position pos:line="730" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="730" pos:column="31">32<pos:position pos:line="730" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="730" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="730" pos:column="35"/></expr_stmt>
      }<pos:position pos:line="731" pos:column="8"/></block></else></if>
    <expr_stmt><expr><name pos:line="732" pos:column="5">code<pos:position pos:line="732" pos:column="9"/></name> <operator pos:line="732" pos:column="10">+=<pos:position pos:line="732" pos:column="12"/></operator> <literal type="number" pos:line="732" pos:column="13">32<pos:position pos:line="732" pos:column="15"/></literal></expr>;<pos:position pos:line="732" pos:column="16"/></expr_stmt>
    <break pos:line="733" pos:column="5">break;<pos:position pos:line="733" pos:column="11"/></break>

    <comment type="block" pos:line="735" pos:column="5">/* Various kinds of repeat; '{' is not necessarily a quantifier, but this
    has been tested above. */</comment>

    <case pos:line="738" pos:column="5">case <expr><literal type="char" pos:line="738" pos:column="10">'{'<pos:position pos:line="738" pos:column="13"/></literal></expr>:<pos:position pos:line="738" pos:column="14"/></case>
    <if pos:line="739" pos:column="5">if <condition pos:line="739" pos:column="8">(<expr><operator pos:line="739" pos:column="9">!<pos:position pos:line="739" pos:column="10"/></operator><name pos:line="739" pos:column="10">is_quantifier<pos:position pos:line="739" pos:column="23"/></name></expr>)<pos:position pos:line="739" pos:column="24"/></condition><then pos:line="739" pos:column="24"> <block type="pseudo"><goto pos:line="739" pos:column="25">goto <name pos:line="739" pos:column="30">NORMAL_CHAR<pos:position pos:line="739" pos:column="41"/></name>;<pos:position pos:line="739" pos:column="42"/></goto></block></then></if>
    <expr_stmt><expr><name pos:line="740" pos:column="5">ptr<pos:position pos:line="740" pos:column="8"/></name> <operator pos:line="740" pos:column="9">=<pos:position pos:line="740" pos:column="10"/></operator> <call><name pos:line="740" pos:column="11">read_repeat_counts<pos:position pos:line="740" pos:column="29"/></name><argument_list pos:line="740" pos:column="29">(<argument><expr><name pos:line="740" pos:column="30">ptr<pos:position pos:line="740" pos:column="33"/></name><operator pos:line="740" pos:column="33">+<pos:position pos:line="740" pos:column="34"/></operator><literal type="number" pos:line="740" pos:column="34">1<pos:position pos:line="740" pos:column="35"/></literal></expr></argument>, <argument><expr><operator pos:line="740" pos:column="37">&amp;<pos:position pos:line="740" pos:column="42"/></operator><name pos:line="740" pos:column="38">repeat_min<pos:position pos:line="740" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="740" pos:column="50">&amp;<pos:position pos:line="740" pos:column="55"/></operator><name pos:line="740" pos:column="51">repeat_max<pos:position pos:line="740" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="740" pos:column="63">errorptr<pos:position pos:line="740" pos:column="71"/></name></expr></argument>)<pos:position pos:line="740" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="740" pos:column="73"/></expr_stmt>
    <if pos:line="741" pos:column="5">if <condition pos:line="741" pos:column="8">(<expr><operator pos:line="741" pos:column="9">*<pos:position pos:line="741" pos:column="10"/></operator><name pos:line="741" pos:column="10">errorptr<pos:position pos:line="741" pos:column="18"/></name> <operator pos:line="741" pos:column="19">!=<pos:position pos:line="741" pos:column="21"/></operator> <name pos:line="741" pos:column="22">NULL<pos:position pos:line="741" pos:column="26"/></name></expr>)<pos:position pos:line="741" pos:column="27"/></condition><then pos:line="741" pos:column="27"> <block type="pseudo"><goto pos:line="741" pos:column="28">goto <name pos:line="741" pos:column="33">FAILED<pos:position pos:line="741" pos:column="39"/></name>;<pos:position pos:line="741" pos:column="40"/></goto></block></then></if>
    <goto pos:line="742" pos:column="5">goto <name pos:line="742" pos:column="10">REPEAT<pos:position pos:line="742" pos:column="16"/></name>;<pos:position pos:line="742" pos:column="17"/></goto>

    <case pos:line="744" pos:column="5">case <expr><literal type="char" pos:line="744" pos:column="10">'*'<pos:position pos:line="744" pos:column="13"/></literal></expr>:<pos:position pos:line="744" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="745" pos:column="5">repeat_min<pos:position pos:line="745" pos:column="15"/></name> <operator pos:line="745" pos:column="16">=<pos:position pos:line="745" pos:column="17"/></operator> <literal type="number" pos:line="745" pos:column="18">0<pos:position pos:line="745" pos:column="19"/></literal></expr>;<pos:position pos:line="745" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="746" pos:column="5">repeat_max<pos:position pos:line="746" pos:column="15"/></name> <operator pos:line="746" pos:column="16">=<pos:position pos:line="746" pos:column="17"/></operator> <operator pos:line="746" pos:column="18">-<pos:position pos:line="746" pos:column="19"/></operator><literal type="number" pos:line="746" pos:column="19">1<pos:position pos:line="746" pos:column="20"/></literal></expr>;<pos:position pos:line="746" pos:column="21"/></expr_stmt>
    <goto pos:line="747" pos:column="5">goto <name pos:line="747" pos:column="10">REPEAT<pos:position pos:line="747" pos:column="16"/></name>;<pos:position pos:line="747" pos:column="17"/></goto>

    <case pos:line="749" pos:column="5">case <expr><literal type="char" pos:line="749" pos:column="10">'+'<pos:position pos:line="749" pos:column="13"/></literal></expr>:<pos:position pos:line="749" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="750" pos:column="5">repeat_min<pos:position pos:line="750" pos:column="15"/></name> <operator pos:line="750" pos:column="16">=<pos:position pos:line="750" pos:column="17"/></operator> <literal type="number" pos:line="750" pos:column="18">1<pos:position pos:line="750" pos:column="19"/></literal></expr>;<pos:position pos:line="750" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="751" pos:column="5">repeat_max<pos:position pos:line="751" pos:column="15"/></name> <operator pos:line="751" pos:column="16">=<pos:position pos:line="751" pos:column="17"/></operator> <operator pos:line="751" pos:column="18">-<pos:position pos:line="751" pos:column="19"/></operator><literal type="number" pos:line="751" pos:column="19">1<pos:position pos:line="751" pos:column="20"/></literal></expr>;<pos:position pos:line="751" pos:column="21"/></expr_stmt>
    <goto pos:line="752" pos:column="5">goto <name pos:line="752" pos:column="10">REPEAT<pos:position pos:line="752" pos:column="16"/></name>;<pos:position pos:line="752" pos:column="17"/></goto>

    <case pos:line="754" pos:column="5">case <expr><literal type="char" pos:line="754" pos:column="10">'?'<pos:position pos:line="754" pos:column="13"/></literal></expr>:<pos:position pos:line="754" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="755" pos:column="5">repeat_min<pos:position pos:line="755" pos:column="15"/></name> <operator pos:line="755" pos:column="16">=<pos:position pos:line="755" pos:column="17"/></operator> <literal type="number" pos:line="755" pos:column="18">0<pos:position pos:line="755" pos:column="19"/></literal></expr>;<pos:position pos:line="755" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="756" pos:column="5">repeat_max<pos:position pos:line="756" pos:column="15"/></name> <operator pos:line="756" pos:column="16">=<pos:position pos:line="756" pos:column="17"/></operator> <literal type="number" pos:line="756" pos:column="18">1<pos:position pos:line="756" pos:column="19"/></literal></expr>;<pos:position pos:line="756" pos:column="20"/></expr_stmt>

    <label><name pos:line="758" pos:column="5">REPEAT<pos:position pos:line="758" pos:column="11"/></name>:<pos:position pos:line="758" pos:column="12"/></label>
    <if pos:line="759" pos:column="5">if <condition pos:line="759" pos:column="8">(<expr><name pos:line="759" pos:column="9">previous<pos:position pos:line="759" pos:column="17"/></name> <operator pos:line="759" pos:column="18">==<pos:position pos:line="759" pos:column="20"/></operator> <name pos:line="759" pos:column="21">NULL<pos:position pos:line="759" pos:column="25"/></name></expr>)<pos:position pos:line="759" pos:column="26"/></condition><then pos:line="759" pos:column="26">
      <block pos:line="760" pos:column="7">{
      <expr_stmt><expr><operator pos:line="761" pos:column="7">*<pos:position pos:line="761" pos:column="8"/></operator><name pos:line="761" pos:column="8">errorptr<pos:position pos:line="761" pos:column="16"/></name> <operator pos:line="761" pos:column="17">=<pos:position pos:line="761" pos:column="18"/></operator> <name pos:line="761" pos:column="19">ERR9<pos:position pos:line="761" pos:column="23"/></name></expr>;<pos:position pos:line="761" pos:column="24"/></expr_stmt>
      <goto pos:line="762" pos:column="7">goto <name pos:line="762" pos:column="12">FAILED<pos:position pos:line="762" pos:column="18"/></name>;<pos:position pos:line="762" pos:column="19"/></goto>
      }<pos:position pos:line="763" pos:column="8"/></block></then></if>

    <if pos:line="765" pos:column="5">if <condition pos:line="765" pos:column="8">(<expr><name pos:line="765" pos:column="9">repeat_min<pos:position pos:line="765" pos:column="19"/></name> <operator pos:line="765" pos:column="20">==<pos:position pos:line="765" pos:column="22"/></operator> <literal type="number" pos:line="765" pos:column="23">0<pos:position pos:line="765" pos:column="24"/></literal></expr>)<pos:position pos:line="765" pos:column="25"/></condition><then pos:line="765" pos:column="25">
      <block pos:line="766" pos:column="7">{
      <expr_stmt><expr><name pos:line="767" pos:column="7">firstbyte<pos:position pos:line="767" pos:column="16"/></name> <operator pos:line="767" pos:column="17">=<pos:position pos:line="767" pos:column="18"/></operator> <name pos:line="767" pos:column="19">zerofirstbyte<pos:position pos:line="767" pos:column="32"/></name></expr>;<pos:position pos:line="767" pos:column="33"/></expr_stmt>    <comment type="block" pos:line="767" pos:column="37">/* Adjust for zero repeat */</comment>
      <expr_stmt><expr><name pos:line="768" pos:column="7">reqbyte<pos:position pos:line="768" pos:column="14"/></name> <operator pos:line="768" pos:column="15">=<pos:position pos:line="768" pos:column="16"/></operator> <name pos:line="768" pos:column="17">zeroreqbyte<pos:position pos:line="768" pos:column="28"/></name></expr>;<pos:position pos:line="768" pos:column="29"/></expr_stmt>        <comment type="block" pos:line="768" pos:column="37">/* Ditto */</comment>
      }<pos:position pos:line="769" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="771" pos:column="5">/* Remember whether this is a variable length repeat */</comment>

    <expr_stmt><expr><name pos:line="773" pos:column="5">reqvary<pos:position pos:line="773" pos:column="12"/></name> <operator pos:line="773" pos:column="13">=<pos:position pos:line="773" pos:column="14"/></operator> <ternary><condition><expr><operator pos:line="773" pos:column="15">(<pos:position pos:line="773" pos:column="16"/></operator><name pos:line="773" pos:column="16">repeat_min<pos:position pos:line="773" pos:column="26"/></name> <operator pos:line="773" pos:column="27">==<pos:position pos:line="773" pos:column="29"/></operator> <name pos:line="773" pos:column="30">repeat_max<pos:position pos:line="773" pos:column="40"/></name><operator pos:line="773" pos:column="40">)<pos:position pos:line="773" pos:column="41"/></operator></expr>?<pos:position pos:line="773" pos:column="42"/></condition><then pos:line="773" pos:column="42"> <expr><literal type="number" pos:line="773" pos:column="43">0<pos:position pos:line="773" pos:column="44"/></literal></expr> <pos:position pos:line="773" pos:column="45"/></then><else pos:line="773" pos:column="45">: <expr><name pos:line="773" pos:column="47">REQ_VARY<pos:position pos:line="773" pos:column="55"/></name></expr></else></ternary></expr>;<pos:position pos:line="773" pos:column="56"/></expr_stmt>

    <expr_stmt><expr><name pos:line="775" pos:column="5">op_type<pos:position pos:line="775" pos:column="12"/></name> <operator pos:line="775" pos:column="13">=<pos:position pos:line="775" pos:column="14"/></operator> <literal type="number" pos:line="775" pos:column="15">0<pos:position pos:line="775" pos:column="16"/></literal></expr>;<pos:position pos:line="775" pos:column="17"/></expr_stmt>                    <comment type="block" pos:line="775" pos:column="37">/* Default single-char op codes */</comment>
    <expr_stmt><expr><name pos:line="776" pos:column="5">possessive_quantifier<pos:position pos:line="776" pos:column="26"/></name> <operator pos:line="776" pos:column="27">=<pos:position pos:line="776" pos:column="28"/></operator> <name pos:line="776" pos:column="29">FALSE<pos:position pos:line="776" pos:column="34"/></name></expr>;<pos:position pos:line="776" pos:column="35"/></expr_stmt>  <comment type="block" pos:line="776" pos:column="37">/* Default not possessive quantifier */</comment>

    <comment type="block" pos:line="778" pos:column="5">/* Save start of previous item, in case we have to move it up to make space
    for an inserted OP_ONCE for the additional '+' extension. */</comment>

    <expr_stmt><expr><name pos:line="781" pos:column="5">tempcode<pos:position pos:line="781" pos:column="13"/></name> <operator pos:line="781" pos:column="14">=<pos:position pos:line="781" pos:column="15"/></operator> <name pos:line="781" pos:column="16">previous<pos:position pos:line="781" pos:column="24"/></name></expr>;<pos:position pos:line="781" pos:column="25"/></expr_stmt>

    <comment type="block" pos:line="783" pos:column="5">/* If the next character is '+', we have a possessive quantifier. This
    implies greediness, whatever the setting of the PCRE_UNGREEDY option.
    If the next character is '?' this is a minimizing repeat, by default,
    but if PCRE_UNGREEDY is set, it works the other way round. We change the
    repeat type to the non-default. */</comment>

    <if pos:line="789" pos:column="5">if <condition pos:line="789" pos:column="8">(<expr><name><name pos:line="789" pos:column="9">ptr<pos:position pos:line="789" pos:column="12"/></name><index pos:line="789" pos:column="12">[<expr><literal type="number" pos:line="789" pos:column="13">1<pos:position pos:line="789" pos:column="14"/></literal></expr>]<pos:position pos:line="789" pos:column="15"/></index></name> <operator pos:line="789" pos:column="16">==<pos:position pos:line="789" pos:column="18"/></operator> <literal type="char" pos:line="789" pos:column="19">'+'<pos:position pos:line="789" pos:column="22"/></literal></expr>)<pos:position pos:line="789" pos:column="23"/></condition><then pos:line="789" pos:column="23">
      <block pos:line="790" pos:column="7">{
      <expr_stmt><expr><name pos:line="791" pos:column="7">repeat_type<pos:position pos:line="791" pos:column="18"/></name> <operator pos:line="791" pos:column="19">=<pos:position pos:line="791" pos:column="20"/></operator> <literal type="number" pos:line="791" pos:column="21">0<pos:position pos:line="791" pos:column="22"/></literal></expr>;<pos:position pos:line="791" pos:column="23"/></expr_stmt>                  <comment type="block" pos:line="791" pos:column="41">/* Force greedy */</comment>
      <expr_stmt><expr><name pos:line="792" pos:column="7">possessive_quantifier<pos:position pos:line="792" pos:column="28"/></name> <operator pos:line="792" pos:column="29">=<pos:position pos:line="792" pos:column="30"/></operator> <name pos:line="792" pos:column="31">TRUE<pos:position pos:line="792" pos:column="35"/></name></expr>;<pos:position pos:line="792" pos:column="36"/></expr_stmt>
      <expr_stmt><expr><name pos:line="793" pos:column="7">ptr<pos:position pos:line="793" pos:column="10"/></name><operator pos:line="793" pos:column="10">++<pos:position pos:line="793" pos:column="12"/></operator></expr>;<pos:position pos:line="793" pos:column="13"/></expr_stmt>
      }<pos:position pos:line="794" pos:column="8"/></block></then>
    <elseif pos:line="795" pos:column="5">else <if pos:line="795" pos:column="10">if <condition pos:line="795" pos:column="13">(<expr><name><name pos:line="795" pos:column="14">ptr<pos:position pos:line="795" pos:column="17"/></name><index pos:line="795" pos:column="17">[<expr><literal type="number" pos:line="795" pos:column="18">1<pos:position pos:line="795" pos:column="19"/></literal></expr>]<pos:position pos:line="795" pos:column="20"/></index></name> <operator pos:line="795" pos:column="21">==<pos:position pos:line="795" pos:column="23"/></operator> <literal type="char" pos:line="795" pos:column="24">'?'<pos:position pos:line="795" pos:column="27"/></literal></expr>)<pos:position pos:line="795" pos:column="28"/></condition><then pos:line="795" pos:column="28">
      <block pos:line="796" pos:column="7">{
      <expr_stmt><expr><name pos:line="797" pos:column="7">repeat_type<pos:position pos:line="797" pos:column="18"/></name> <operator pos:line="797" pos:column="19">=<pos:position pos:line="797" pos:column="20"/></operator> <name pos:line="797" pos:column="21">greedy_non_default<pos:position pos:line="797" pos:column="39"/></name></expr>;<pos:position pos:line="797" pos:column="40"/></expr_stmt>
      <expr_stmt><expr><name pos:line="798" pos:column="7">ptr<pos:position pos:line="798" pos:column="10"/></name><operator pos:line="798" pos:column="10">++<pos:position pos:line="798" pos:column="12"/></operator></expr>;<pos:position pos:line="798" pos:column="13"/></expr_stmt>
      }<pos:position pos:line="799" pos:column="8"/></block></then></if></elseif>
    <else pos:line="800" pos:column="5">else <block type="pseudo"><expr_stmt><expr><name pos:line="800" pos:column="10">repeat_type<pos:position pos:line="800" pos:column="21"/></name> <operator pos:line="800" pos:column="22">=<pos:position pos:line="800" pos:column="23"/></operator> <name pos:line="800" pos:column="24">greedy_default<pos:position pos:line="800" pos:column="38"/></name></expr>;<pos:position pos:line="800" pos:column="39"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="802" pos:column="5">/* If previous was a recursion, we need to wrap it inside brackets so that
    it can be replicated if necessary. */</comment>

    <if pos:line="805" pos:column="5">if <condition pos:line="805" pos:column="8">(<expr><operator pos:line="805" pos:column="9">*<pos:position pos:line="805" pos:column="10"/></operator><name pos:line="805" pos:column="10">previous<pos:position pos:line="805" pos:column="18"/></name> <operator pos:line="805" pos:column="19">==<pos:position pos:line="805" pos:column="21"/></operator> <name pos:line="805" pos:column="22">OP_RECURSE<pos:position pos:line="805" pos:column="32"/></name></expr>)<pos:position pos:line="805" pos:column="33"/></condition><then pos:line="805" pos:column="33">
      <block pos:line="806" pos:column="7">{
      <expr_stmt><expr><call><name pos:line="807" pos:column="7">memmove<pos:position pos:line="807" pos:column="14"/></name><argument_list pos:line="807" pos:column="14">(<argument><expr><name pos:line="807" pos:column="15">previous<pos:position pos:line="807" pos:column="23"/></name> <operator pos:line="807" pos:column="24">+<pos:position pos:line="807" pos:column="25"/></operator> <literal type="number" pos:line="807" pos:column="26">1<pos:position pos:line="807" pos:column="27"/></literal> <operator pos:line="807" pos:column="28">+<pos:position pos:line="807" pos:column="29"/></operator> <name pos:line="807" pos:column="30">LINK_SIZE<pos:position pos:line="807" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="807" pos:column="41">previous<pos:position pos:line="807" pos:column="49"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="807" pos:column="51">1<pos:position pos:line="807" pos:column="52"/></literal> <operator pos:line="807" pos:column="53">+<pos:position pos:line="807" pos:column="54"/></operator> <name pos:line="807" pos:column="55">LINK_SIZE<pos:position pos:line="807" pos:column="64"/></name></expr></argument>)<pos:position pos:line="807" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="807" pos:column="66"/></expr_stmt>
      <expr_stmt><expr><name pos:line="808" pos:column="7">code<pos:position pos:line="808" pos:column="11"/></name> <operator pos:line="808" pos:column="12">+=<pos:position pos:line="808" pos:column="14"/></operator> <literal type="number" pos:line="808" pos:column="15">1<pos:position pos:line="808" pos:column="16"/></literal> <operator pos:line="808" pos:column="17">+<pos:position pos:line="808" pos:column="18"/></operator> <name pos:line="808" pos:column="19">LINK_SIZE<pos:position pos:line="808" pos:column="28"/></name></expr>;<pos:position pos:line="808" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="809" pos:column="7">*<pos:position pos:line="809" pos:column="8"/></operator><name pos:line="809" pos:column="8">previous<pos:position pos:line="809" pos:column="16"/></name> <operator pos:line="809" pos:column="17">=<pos:position pos:line="809" pos:column="18"/></operator> <name pos:line="809" pos:column="19">OP_BRA<pos:position pos:line="809" pos:column="25"/></name></expr>;<pos:position pos:line="809" pos:column="26"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="810" pos:column="7">PUT<pos:position pos:line="810" pos:column="10"/></name><argument_list pos:line="810" pos:column="10">(<argument><expr><name pos:line="810" pos:column="11">previous<pos:position pos:line="810" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="810" pos:column="21">1<pos:position pos:line="810" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="810" pos:column="24">code<pos:position pos:line="810" pos:column="28"/></name> <operator pos:line="810" pos:column="29">-<pos:position pos:line="810" pos:column="30"/></operator> <name pos:line="810" pos:column="31">previous<pos:position pos:line="810" pos:column="39"/></name></expr></argument>)<pos:position pos:line="810" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="810" pos:column="41"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="811" pos:column="7">*<pos:position pos:line="811" pos:column="8"/></operator><name pos:line="811" pos:column="8">code<pos:position pos:line="811" pos:column="12"/></name> <operator pos:line="811" pos:column="13">=<pos:position pos:line="811" pos:column="14"/></operator> <name pos:line="811" pos:column="15">OP_KET<pos:position pos:line="811" pos:column="21"/></name></expr>;<pos:position pos:line="811" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="812" pos:column="7">PUT<pos:position pos:line="812" pos:column="10"/></name><argument_list pos:line="812" pos:column="10">(<argument><expr><name pos:line="812" pos:column="11">code<pos:position pos:line="812" pos:column="15"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="812" pos:column="17">1<pos:position pos:line="812" pos:column="18"/></literal></expr></argument>, <argument><expr><name pos:line="812" pos:column="20">code<pos:position pos:line="812" pos:column="24"/></name> <operator pos:line="812" pos:column="25">-<pos:position pos:line="812" pos:column="26"/></operator> <name pos:line="812" pos:column="27">previous<pos:position pos:line="812" pos:column="35"/></name></expr></argument>)<pos:position pos:line="812" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="812" pos:column="37"/></expr_stmt>
      <expr_stmt><expr><name pos:line="813" pos:column="7">code<pos:position pos:line="813" pos:column="11"/></name> <operator pos:line="813" pos:column="12">+=<pos:position pos:line="813" pos:column="14"/></operator> <literal type="number" pos:line="813" pos:column="15">1<pos:position pos:line="813" pos:column="16"/></literal> <operator pos:line="813" pos:column="17">+<pos:position pos:line="813" pos:column="18"/></operator> <name pos:line="813" pos:column="19">LINK_SIZE<pos:position pos:line="813" pos:column="28"/></name></expr>;<pos:position pos:line="813" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="814" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="816" pos:column="5">/* If previous was a character match, abolish the item and generate a
    repeat item instead. If a char item has a minumum of more than one, ensure
    that it is set in reqbyte - it might not be if a sequence such as x{3} is
    the first thing in a branch because the x will have gone into firstbyte
    instead.  */</comment>

    <if pos:line="822" pos:column="5">if <condition pos:line="822" pos:column="8">(<expr><operator pos:line="822" pos:column="9">*<pos:position pos:line="822" pos:column="10"/></operator><name pos:line="822" pos:column="10">previous<pos:position pos:line="822" pos:column="18"/></name> <operator pos:line="822" pos:column="19">==<pos:position pos:line="822" pos:column="21"/></operator> <name pos:line="822" pos:column="22">OP_CHAR<pos:position pos:line="822" pos:column="29"/></name> <operator pos:line="822" pos:column="30">||<pos:position pos:line="822" pos:column="32"/></operator> <operator pos:line="822" pos:column="33">*<pos:position pos:line="822" pos:column="34"/></operator><name pos:line="822" pos:column="34">previous<pos:position pos:line="822" pos:column="42"/></name> <operator pos:line="822" pos:column="43">==<pos:position pos:line="822" pos:column="45"/></operator> <name pos:line="822" pos:column="46">OP_CHARNC<pos:position pos:line="822" pos:column="55"/></name></expr>)<pos:position pos:line="822" pos:column="56"/></condition><then pos:line="822" pos:column="56">
      <block pos:line="823" pos:column="7">{
      <comment type="block" pos:line="824" pos:column="7">/* Deal with UTF-8 characters that take up more than one byte. It's
      easier to write this out separately than try to macrify it. Use c to
      hold the length of the character in bytes, plus 0x80 to flag that it's a
      length rather than a small character. */</comment>

<cpp:ifdef pos:line="829" pos:column="1">#<cpp:directive pos:line="829" pos:column="2">ifdef<pos:position pos:line="829" pos:column="7"/></cpp:directive> <name pos:line="829" pos:column="8">SUPPORT_UTF8<pos:position pos:line="829" pos:column="20"/></name></cpp:ifdef>
      <if pos:line="830" pos:column="7">if <condition pos:line="830" pos:column="10">(<expr><name pos:line="830" pos:column="11">utf8<pos:position pos:line="830" pos:column="15"/></name> <operator pos:line="830" pos:column="16">&amp;&amp;<pos:position pos:line="830" pos:column="26"/></operator> <operator pos:line="830" pos:column="19">(<pos:position pos:line="830" pos:column="20"/></operator><name><name pos:line="830" pos:column="20">code<pos:position pos:line="830" pos:column="24"/></name><index pos:line="830" pos:column="24">[<expr><operator pos:line="830" pos:column="25">-<pos:position pos:line="830" pos:column="26"/></operator><literal type="number" pos:line="830" pos:column="26">1<pos:position pos:line="830" pos:column="27"/></literal></expr>]<pos:position pos:line="830" pos:column="28"/></index></name> <operator pos:line="830" pos:column="29">&amp;<pos:position pos:line="830" pos:column="34"/></operator> <literal type="number" pos:line="830" pos:column="31">0x80<pos:position pos:line="830" pos:column="35"/></literal><operator pos:line="830" pos:column="35">)<pos:position pos:line="830" pos:column="36"/></operator> <operator pos:line="830" pos:column="37">!=<pos:position pos:line="830" pos:column="39"/></operator> <literal type="number" pos:line="830" pos:column="40">0<pos:position pos:line="830" pos:column="41"/></literal></expr>)<pos:position pos:line="830" pos:column="42"/></condition><then pos:line="830" pos:column="42">
        <block pos:line="831" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="832" pos:column="9">uschar<pos:position pos:line="832" pos:column="15"/></name> <modifier pos:line="832" pos:column="16">*<pos:position pos:line="832" pos:column="17"/></modifier></type><name pos:line="832" pos:column="17">lastchar<pos:position pos:line="832" pos:column="25"/></name> <init pos:line="832" pos:column="26">= <expr><name pos:line="832" pos:column="28">code<pos:position pos:line="832" pos:column="32"/></name> <operator pos:line="832" pos:column="33">-<pos:position pos:line="832" pos:column="34"/></operator> <literal type="number" pos:line="832" pos:column="35">1<pos:position pos:line="832" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="832" pos:column="37"/></decl_stmt>
        <while pos:line="833" pos:column="9">while<condition pos:line="833" pos:column="14">(<expr><operator pos:line="833" pos:column="15">(<pos:position pos:line="833" pos:column="16"/></operator><operator pos:line="833" pos:column="16">*<pos:position pos:line="833" pos:column="17"/></operator><name pos:line="833" pos:column="17">lastchar<pos:position pos:line="833" pos:column="25"/></name> <operator pos:line="833" pos:column="26">&amp;<pos:position pos:line="833" pos:column="31"/></operator> <literal type="number" pos:line="833" pos:column="28">0xc0<pos:position pos:line="833" pos:column="32"/></literal><operator pos:line="833" pos:column="32">)<pos:position pos:line="833" pos:column="33"/></operator> <operator pos:line="833" pos:column="34">==<pos:position pos:line="833" pos:column="36"/></operator> <literal type="number" pos:line="833" pos:column="37">0x80<pos:position pos:line="833" pos:column="41"/></literal></expr>)<pos:position pos:line="833" pos:column="42"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="833" pos:column="43">lastchar<pos:position pos:line="833" pos:column="51"/></name><operator pos:line="833" pos:column="51">--<pos:position pos:line="833" pos:column="53"/></operator></expr>;<pos:position pos:line="833" pos:column="54"/></expr_stmt></block></while>
        <expr_stmt><expr><name pos:line="834" pos:column="9">c<pos:position pos:line="834" pos:column="10"/></name> <operator pos:line="834" pos:column="11">=<pos:position pos:line="834" pos:column="12"/></operator> <name pos:line="834" pos:column="13">code<pos:position pos:line="834" pos:column="17"/></name> <operator pos:line="834" pos:column="18">-<pos:position pos:line="834" pos:column="19"/></operator> <name pos:line="834" pos:column="20">lastchar<pos:position pos:line="834" pos:column="28"/></name></expr>;<pos:position pos:line="834" pos:column="29"/></expr_stmt>            <comment type="block" pos:line="834" pos:column="41">/* Length of UTF-8 character */</comment>
        <expr_stmt><expr><call><name pos:line="835" pos:column="9">memcpy<pos:position pos:line="835" pos:column="15"/></name><argument_list pos:line="835" pos:column="15">(<argument><expr><name pos:line="835" pos:column="16">utf8_char<pos:position pos:line="835" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="835" pos:column="27">lastchar<pos:position pos:line="835" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="835" pos:column="37">c<pos:position pos:line="835" pos:column="38"/></name></expr></argument>)<pos:position pos:line="835" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="835" pos:column="40"/></expr_stmt> <comment type="block" pos:line="835" pos:column="41">/* Save the char */</comment>
        <expr_stmt><expr><name pos:line="836" pos:column="9">c<pos:position pos:line="836" pos:column="10"/></name> <operator pos:line="836" pos:column="11">|=<pos:position pos:line="836" pos:column="13"/></operator> <literal type="number" pos:line="836" pos:column="14">0x80<pos:position pos:line="836" pos:column="18"/></literal></expr>;<pos:position pos:line="836" pos:column="19"/></expr_stmt>                      <comment type="block" pos:line="836" pos:column="41">/* Flag c as a length */</comment>
        }<pos:position pos:line="837" pos:column="10"/></block></then>
      <else pos:line="838" pos:column="7">else
<cpp:endif pos:line="839" pos:column="1">#<cpp:directive pos:line="839" pos:column="2">endif<pos:position pos:line="839" pos:column="7"/></cpp:directive></cpp:endif>

      <comment type="block" pos:line="841" pos:column="7">/* Handle the case of a single byte - either with no UTF8 support, or
      with UTF-8 disabled, or for a UTF-8 character &lt; 128. */</comment>

        <block pos:line="844" pos:column="9">{
        <expr_stmt><expr><name pos:line="845" pos:column="9">c<pos:position pos:line="845" pos:column="10"/></name> <operator pos:line="845" pos:column="11">=<pos:position pos:line="845" pos:column="12"/></operator> <name><name pos:line="845" pos:column="13">code<pos:position pos:line="845" pos:column="17"/></name><index pos:line="845" pos:column="17">[<expr><operator pos:line="845" pos:column="18">-<pos:position pos:line="845" pos:column="19"/></operator><literal type="number" pos:line="845" pos:column="19">1<pos:position pos:line="845" pos:column="20"/></literal></expr>]<pos:position pos:line="845" pos:column="21"/></index></name></expr>;<pos:position pos:line="845" pos:column="22"/></expr_stmt>
        <if pos:line="846" pos:column="9">if <condition pos:line="846" pos:column="12">(<expr><name pos:line="846" pos:column="13">repeat_min<pos:position pos:line="846" pos:column="23"/></name> <operator pos:line="846" pos:column="24">&gt;<pos:position pos:line="846" pos:column="28"/></operator> <literal type="number" pos:line="846" pos:column="26">1<pos:position pos:line="846" pos:column="27"/></literal></expr>)<pos:position pos:line="846" pos:column="28"/></condition><then pos:line="846" pos:column="28"> <block type="pseudo"><expr_stmt><expr><name pos:line="846" pos:column="29">reqbyte<pos:position pos:line="846" pos:column="36"/></name> <operator pos:line="846" pos:column="37">=<pos:position pos:line="846" pos:column="38"/></operator> <name pos:line="846" pos:column="39">c<pos:position pos:line="846" pos:column="40"/></name> <operator pos:line="846" pos:column="41">|<pos:position pos:line="846" pos:column="42"/></operator> <name pos:line="846" pos:column="43">req_caseopt<pos:position pos:line="846" pos:column="54"/></name> <operator pos:line="846" pos:column="55">|<pos:position pos:line="846" pos:column="56"/></operator> <name><name pos:line="846" pos:column="57">cd<pos:position pos:line="846" pos:column="59"/></name><operator pos:line="846" pos:column="59">-&gt;<pos:position pos:line="846" pos:column="64"/></operator><name pos:line="846" pos:column="61">req_varyopt<pos:position pos:line="846" pos:column="72"/></name></name></expr>;<pos:position pos:line="846" pos:column="73"/></expr_stmt></block></then></if>
        }<pos:position pos:line="847" pos:column="10"/></block></else></if>

      <goto pos:line="849" pos:column="7">goto <name pos:line="849" pos:column="12">OUTPUT_SINGLE_REPEAT<pos:position pos:line="849" pos:column="32"/></name>;<pos:position pos:line="849" pos:column="33"/></goto>   <comment type="block" pos:line="849" pos:column="36">/* Code shared with single character types */</comment>
      }<pos:position pos:line="850" pos:column="8"/></block></then>

    <comment type="block" pos:line="852" pos:column="5">/* If previous was a single negated character ([^a] or similar), we use
    one of the special opcodes, replacing it. The code is shared with single-
    character repeats by setting opt_type to add a suitable offset into
    repeat_type. OP_NOT is currently used only for single-byte chars. */</comment>

    <elseif pos:line="857" pos:column="5">else <if pos:line="857" pos:column="10">if <condition pos:line="857" pos:column="13">(<expr><operator pos:line="857" pos:column="14">*<pos:position pos:line="857" pos:column="15"/></operator><name pos:line="857" pos:column="15">previous<pos:position pos:line="857" pos:column="23"/></name> <operator pos:line="857" pos:column="24">==<pos:position pos:line="857" pos:column="26"/></operator> <name pos:line="857" pos:column="27">OP_NOT<pos:position pos:line="857" pos:column="33"/></name></expr>)<pos:position pos:line="857" pos:column="34"/></condition><then pos:line="857" pos:column="34">
      <block pos:line="858" pos:column="7">{
      <expr_stmt><expr><name pos:line="859" pos:column="7">op_type<pos:position pos:line="859" pos:column="14"/></name> <operator pos:line="859" pos:column="15">=<pos:position pos:line="859" pos:column="16"/></operator> <name pos:line="859" pos:column="17">OP_NOTSTAR<pos:position pos:line="859" pos:column="27"/></name> <operator pos:line="859" pos:column="28">-<pos:position pos:line="859" pos:column="29"/></operator> <name pos:line="859" pos:column="30">OP_STAR<pos:position pos:line="859" pos:column="37"/></name></expr>;<pos:position pos:line="859" pos:column="38"/></expr_stmt>  <comment type="block" pos:line="859" pos:column="40">/* Use "not" opcodes */</comment>
      <expr_stmt><expr><name pos:line="860" pos:column="7">c<pos:position pos:line="860" pos:column="8"/></name> <operator pos:line="860" pos:column="9">=<pos:position pos:line="860" pos:column="10"/></operator> <name><name pos:line="860" pos:column="11">previous<pos:position pos:line="860" pos:column="19"/></name><index pos:line="860" pos:column="19">[<expr><literal type="number" pos:line="860" pos:column="20">1<pos:position pos:line="860" pos:column="21"/></literal></expr>]<pos:position pos:line="860" pos:column="22"/></index></name></expr>;<pos:position pos:line="860" pos:column="23"/></expr_stmt>
      <goto pos:line="861" pos:column="7">goto <name pos:line="861" pos:column="12">OUTPUT_SINGLE_REPEAT<pos:position pos:line="861" pos:column="32"/></name>;<pos:position pos:line="861" pos:column="33"/></goto>
      }<pos:position pos:line="862" pos:column="8"/></block></then></if></elseif>

    <comment type="block" pos:line="864" pos:column="5">/* If previous was a character type match (\d or similar), abolish it and
    create a suitable repeat item. The code is shared with single-character
    repeats by setting op_type to add a suitable offset into repeat_type. Note
    the the Unicode property types will be present only when SUPPORT_UCP is
    defined, but we don't wrap the little bits of code here because it just
    makes it horribly messy. */</comment>

    <elseif pos:line="871" pos:column="5">else <if pos:line="871" pos:column="10">if <condition pos:line="871" pos:column="13">(<expr><operator pos:line="871" pos:column="14">*<pos:position pos:line="871" pos:column="15"/></operator><name pos:line="871" pos:column="15">previous<pos:position pos:line="871" pos:column="23"/></name> <operator pos:line="871" pos:column="24">&lt;<pos:position pos:line="871" pos:column="28"/></operator> <name pos:line="871" pos:column="26">OP_EODN<pos:position pos:line="871" pos:column="33"/></name></expr>)<pos:position pos:line="871" pos:column="34"/></condition><then pos:line="871" pos:column="34">
      <block pos:line="872" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="873" pos:column="7">uschar<pos:position pos:line="873" pos:column="13"/></name> <modifier pos:line="873" pos:column="14">*<pos:position pos:line="873" pos:column="15"/></modifier></type><name pos:line="873" pos:column="15">oldcode<pos:position pos:line="873" pos:column="22"/></name></decl>;<pos:position pos:line="873" pos:column="23"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="874" pos:column="7">int<pos:position pos:line="874" pos:column="10"/></name></type> <name pos:line="874" pos:column="11">prop_type<pos:position pos:line="874" pos:column="20"/></name></decl>;<pos:position pos:line="874" pos:column="21"/></decl_stmt>
      <expr_stmt><expr><name pos:line="875" pos:column="7">op_type<pos:position pos:line="875" pos:column="14"/></name> <operator pos:line="875" pos:column="15">=<pos:position pos:line="875" pos:column="16"/></operator> <name pos:line="875" pos:column="17">OP_TYPESTAR<pos:position pos:line="875" pos:column="28"/></name> <operator pos:line="875" pos:column="29">-<pos:position pos:line="875" pos:column="30"/></operator> <name pos:line="875" pos:column="31">OP_STAR<pos:position pos:line="875" pos:column="38"/></name></expr>;<pos:position pos:line="875" pos:column="39"/></expr_stmt>  <comment type="block" pos:line="875" pos:column="41">/* Use type opcodes */</comment>
      <expr_stmt><expr><name pos:line="876" pos:column="7">c<pos:position pos:line="876" pos:column="8"/></name> <operator pos:line="876" pos:column="9">=<pos:position pos:line="876" pos:column="10"/></operator> <operator pos:line="876" pos:column="11">*<pos:position pos:line="876" pos:column="12"/></operator><name pos:line="876" pos:column="12">previous<pos:position pos:line="876" pos:column="20"/></name></expr>;<pos:position pos:line="876" pos:column="21"/></expr_stmt>

      <label><name pos:line="878" pos:column="7">OUTPUT_SINGLE_REPEAT<pos:position pos:line="878" pos:column="27"/></name>:<pos:position pos:line="878" pos:column="28"/></label>
      <expr_stmt><expr><name pos:line="879" pos:column="7">prop_type<pos:position pos:line="879" pos:column="16"/></name> <operator pos:line="879" pos:column="17">=<pos:position pos:line="879" pos:column="18"/></operator> <ternary><condition><expr><operator pos:line="879" pos:column="19">(<pos:position pos:line="879" pos:column="20"/></operator><operator pos:line="879" pos:column="20">*<pos:position pos:line="879" pos:column="21"/></operator><name pos:line="879" pos:column="21">previous<pos:position pos:line="879" pos:column="29"/></name> <operator pos:line="879" pos:column="30">==<pos:position pos:line="879" pos:column="32"/></operator> <name pos:line="879" pos:column="33">OP_PROP<pos:position pos:line="879" pos:column="40"/></name> <operator pos:line="879" pos:column="41">||<pos:position pos:line="879" pos:column="43"/></operator> <operator pos:line="879" pos:column="44">*<pos:position pos:line="879" pos:column="45"/></operator><name pos:line="879" pos:column="45">previous<pos:position pos:line="879" pos:column="53"/></name> <operator pos:line="879" pos:column="54">==<pos:position pos:line="879" pos:column="56"/></operator> <name pos:line="879" pos:column="57">OP_NOTPROP<pos:position pos:line="879" pos:column="67"/></name><operator pos:line="879" pos:column="67">)<pos:position pos:line="879" pos:column="68"/></operator></expr>?<pos:position pos:line="879" pos:column="69"/></condition><then pos:line="879" pos:column="69">
        <expr><name><name pos:line="880" pos:column="9">previous<pos:position pos:line="880" pos:column="17"/></name><index pos:line="880" pos:column="17">[<expr><literal type="number" pos:line="880" pos:column="18">1<pos:position pos:line="880" pos:column="19"/></literal></expr>]<pos:position pos:line="880" pos:column="20"/></index></name></expr> <pos:position pos:line="880" pos:column="21"/></then><else pos:line="880" pos:column="21">: <expr><operator pos:line="880" pos:column="23">-<pos:position pos:line="880" pos:column="24"/></operator><literal type="number" pos:line="880" pos:column="24">1<pos:position pos:line="880" pos:column="25"/></literal></expr></else></ternary></expr>;<pos:position pos:line="880" pos:column="26"/></expr_stmt>

      <expr_stmt><expr><name pos:line="882" pos:column="7">oldcode<pos:position pos:line="882" pos:column="14"/></name> <operator pos:line="882" pos:column="15">=<pos:position pos:line="882" pos:column="16"/></operator> <name pos:line="882" pos:column="17">code<pos:position pos:line="882" pos:column="21"/></name></expr>;<pos:position pos:line="882" pos:column="22"/></expr_stmt>
      <expr_stmt><expr><name pos:line="883" pos:column="7">code<pos:position pos:line="883" pos:column="11"/></name> <operator pos:line="883" pos:column="12">=<pos:position pos:line="883" pos:column="13"/></operator> <name pos:line="883" pos:column="14">previous<pos:position pos:line="883" pos:column="22"/></name></expr>;<pos:position pos:line="883" pos:column="23"/></expr_stmt>                  <comment type="block" pos:line="883" pos:column="41">/* Usually overwrite previous item */</comment>

      <comment type="block" pos:line="885" pos:column="7">/* If the maximum is zero then the minimum must also be zero; Perl allows
      this case, so we do too - by simply omitting the item altogether. */</comment>

      <if pos:line="888" pos:column="7">if <condition pos:line="888" pos:column="10">(<expr><name pos:line="888" pos:column="11">repeat_max<pos:position pos:line="888" pos:column="21"/></name> <operator pos:line="888" pos:column="22">==<pos:position pos:line="888" pos:column="24"/></operator> <literal type="number" pos:line="888" pos:column="25">0<pos:position pos:line="888" pos:column="26"/></literal></expr>)<pos:position pos:line="888" pos:column="27"/></condition><then pos:line="888" pos:column="27"> <block type="pseudo"><goto pos:line="888" pos:column="28">goto <name pos:line="888" pos:column="33">END_REPEAT<pos:position pos:line="888" pos:column="43"/></name>;<pos:position pos:line="888" pos:column="44"/></goto></block></then></if>

      <comment type="block" pos:line="890" pos:column="7">/* All real repeats make it impossible to handle partial matching (maybe
      one day we will be able to remove this restriction). */</comment>

      <if pos:line="893" pos:column="7">if <condition pos:line="893" pos:column="10">(<expr><name pos:line="893" pos:column="11">repeat_max<pos:position pos:line="893" pos:column="21"/></name> <operator pos:line="893" pos:column="22">!=<pos:position pos:line="893" pos:column="24"/></operator> <literal type="number" pos:line="893" pos:column="25">1<pos:position pos:line="893" pos:column="26"/></literal></expr>)<pos:position pos:line="893" pos:column="27"/></condition><then pos:line="893" pos:column="27"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="893" pos:column="28">cd<pos:position pos:line="893" pos:column="30"/></name><operator pos:line="893" pos:column="30">-&gt;<pos:position pos:line="893" pos:column="35"/></operator><name pos:line="893" pos:column="32">nopartial<pos:position pos:line="893" pos:column="41"/></name></name> <operator pos:line="893" pos:column="42">=<pos:position pos:line="893" pos:column="43"/></operator> <name pos:line="893" pos:column="44">TRUE<pos:position pos:line="893" pos:column="48"/></name></expr>;<pos:position pos:line="893" pos:column="49"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="895" pos:column="7">/* Combine the op_type with the repeat_type */</comment>

      <expr_stmt><expr><name pos:line="897" pos:column="7">repeat_type<pos:position pos:line="897" pos:column="18"/></name> <operator pos:line="897" pos:column="19">+=<pos:position pos:line="897" pos:column="21"/></operator> <name pos:line="897" pos:column="22">op_type<pos:position pos:line="897" pos:column="29"/></name></expr>;<pos:position pos:line="897" pos:column="30"/></expr_stmt>

      <comment type="block" pos:line="899" pos:column="7">/* A minimum of zero is handled either as the special case * or ?, or as
      an UPTO, with the maximum given. */</comment>

      <if pos:line="902" pos:column="7">if <condition pos:line="902" pos:column="10">(<expr><name pos:line="902" pos:column="11">repeat_min<pos:position pos:line="902" pos:column="21"/></name> <operator pos:line="902" pos:column="22">==<pos:position pos:line="902" pos:column="24"/></operator> <literal type="number" pos:line="902" pos:column="25">0<pos:position pos:line="902" pos:column="26"/></literal></expr>)<pos:position pos:line="902" pos:column="27"/></condition><then pos:line="902" pos:column="27">
        <block pos:line="903" pos:column="9">{
        <if pos:line="904" pos:column="9">if <condition pos:line="904" pos:column="12">(<expr><name pos:line="904" pos:column="13">repeat_max<pos:position pos:line="904" pos:column="23"/></name> <operator pos:line="904" pos:column="24">==<pos:position pos:line="904" pos:column="26"/></operator> <operator pos:line="904" pos:column="27">-<pos:position pos:line="904" pos:column="28"/></operator><literal type="number" pos:line="904" pos:column="28">1<pos:position pos:line="904" pos:column="29"/></literal></expr>)<pos:position pos:line="904" pos:column="30"/></condition><then pos:line="904" pos:column="30"> <block type="pseudo"><expr_stmt><expr><operator pos:line="904" pos:column="31">*<pos:position pos:line="904" pos:column="32"/></operator><name pos:line="904" pos:column="32">code<pos:position pos:line="904" pos:column="36"/></name><operator pos:line="904" pos:column="36">++<pos:position pos:line="904" pos:column="38"/></operator> <operator pos:line="904" pos:column="39">=<pos:position pos:line="904" pos:column="40"/></operator> <name pos:line="904" pos:column="41">OP_STAR<pos:position pos:line="904" pos:column="48"/></name> <operator pos:line="904" pos:column="49">+<pos:position pos:line="904" pos:column="50"/></operator> <name pos:line="904" pos:column="51">repeat_type<pos:position pos:line="904" pos:column="62"/></name></expr>;<pos:position pos:line="904" pos:column="63"/></expr_stmt></block></then>
          <elseif pos:line="905" pos:column="11">else <if pos:line="905" pos:column="16">if <condition pos:line="905" pos:column="19">(<expr><name pos:line="905" pos:column="20">repeat_max<pos:position pos:line="905" pos:column="30"/></name> <operator pos:line="905" pos:column="31">==<pos:position pos:line="905" pos:column="33"/></operator> <literal type="number" pos:line="905" pos:column="34">1<pos:position pos:line="905" pos:column="35"/></literal></expr>)<pos:position pos:line="905" pos:column="36"/></condition><then pos:line="905" pos:column="36"> <block type="pseudo"><expr_stmt><expr><operator pos:line="905" pos:column="37">*<pos:position pos:line="905" pos:column="38"/></operator><name pos:line="905" pos:column="38">code<pos:position pos:line="905" pos:column="42"/></name><operator pos:line="905" pos:column="42">++<pos:position pos:line="905" pos:column="44"/></operator> <operator pos:line="905" pos:column="45">=<pos:position pos:line="905" pos:column="46"/></operator> <name pos:line="905" pos:column="47">OP_QUERY<pos:position pos:line="905" pos:column="55"/></name> <operator pos:line="905" pos:column="56">+<pos:position pos:line="905" pos:column="57"/></operator> <name pos:line="905" pos:column="58">repeat_type<pos:position pos:line="905" pos:column="69"/></name></expr>;<pos:position pos:line="905" pos:column="70"/></expr_stmt></block></then></if></elseif>
        <else pos:line="906" pos:column="9">else
          <block pos:line="907" pos:column="11">{
          <expr_stmt><expr><operator pos:line="908" pos:column="11">*<pos:position pos:line="908" pos:column="12"/></operator><name pos:line="908" pos:column="12">code<pos:position pos:line="908" pos:column="16"/></name><operator pos:line="908" pos:column="16">++<pos:position pos:line="908" pos:column="18"/></operator> <operator pos:line="908" pos:column="19">=<pos:position pos:line="908" pos:column="20"/></operator> <name pos:line="908" pos:column="21">OP_UPTO<pos:position pos:line="908" pos:column="28"/></name> <operator pos:line="908" pos:column="29">+<pos:position pos:line="908" pos:column="30"/></operator> <name pos:line="908" pos:column="31">repeat_type<pos:position pos:line="908" pos:column="42"/></name></expr>;<pos:position pos:line="908" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="909" pos:column="11">PUT2INC<pos:position pos:line="909" pos:column="18"/></name><argument_list pos:line="909" pos:column="18">(<argument><expr><name pos:line="909" pos:column="19">code<pos:position pos:line="909" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="909" pos:column="25">0<pos:position pos:line="909" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="909" pos:column="28">repeat_max<pos:position pos:line="909" pos:column="38"/></name></expr></argument>)<pos:position pos:line="909" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="909" pos:column="40"/></expr_stmt>
          }<pos:position pos:line="910" pos:column="12"/></block></else></if>
        }<pos:position pos:line="911" pos:column="10"/></block></then>

      <comment type="block" pos:line="913" pos:column="7">/* A repeat minimum of 1 is optimized into some special cases. If the
      maximum is unlimited, we use OP_PLUS. Otherwise, the original item it
      left in place and, if the maximum is greater than 1, we use OP_UPTO with
      one less than the maximum. */</comment>

      <elseif pos:line="918" pos:column="7">else <if pos:line="918" pos:column="12">if <condition pos:line="918" pos:column="15">(<expr><name pos:line="918" pos:column="16">repeat_min<pos:position pos:line="918" pos:column="26"/></name> <operator pos:line="918" pos:column="27">==<pos:position pos:line="918" pos:column="29"/></operator> <literal type="number" pos:line="918" pos:column="30">1<pos:position pos:line="918" pos:column="31"/></literal></expr>)<pos:position pos:line="918" pos:column="32"/></condition><then pos:line="918" pos:column="32">
        <block pos:line="919" pos:column="9">{
        <if pos:line="920" pos:column="9">if <condition pos:line="920" pos:column="12">(<expr><name pos:line="920" pos:column="13">repeat_max<pos:position pos:line="920" pos:column="23"/></name> <operator pos:line="920" pos:column="24">==<pos:position pos:line="920" pos:column="26"/></operator> <operator pos:line="920" pos:column="27">-<pos:position pos:line="920" pos:column="28"/></operator><literal type="number" pos:line="920" pos:column="28">1<pos:position pos:line="920" pos:column="29"/></literal></expr>)<pos:position pos:line="920" pos:column="30"/></condition><then pos:line="920" pos:column="30">
          <block type="pseudo"><expr_stmt><expr><operator pos:line="921" pos:column="11">*<pos:position pos:line="921" pos:column="12"/></operator><name pos:line="921" pos:column="12">code<pos:position pos:line="921" pos:column="16"/></name><operator pos:line="921" pos:column="16">++<pos:position pos:line="921" pos:column="18"/></operator> <operator pos:line="921" pos:column="19">=<pos:position pos:line="921" pos:column="20"/></operator> <name pos:line="921" pos:column="21">OP_PLUS<pos:position pos:line="921" pos:column="28"/></name> <operator pos:line="921" pos:column="29">+<pos:position pos:line="921" pos:column="30"/></operator> <name pos:line="921" pos:column="31">repeat_type<pos:position pos:line="921" pos:column="42"/></name></expr>;<pos:position pos:line="921" pos:column="43"/></expr_stmt></block></then>
        <else pos:line="922" pos:column="9">else
          <block pos:line="923" pos:column="11">{
          <expr_stmt><expr><name pos:line="924" pos:column="11">code<pos:position pos:line="924" pos:column="15"/></name> <operator pos:line="924" pos:column="16">=<pos:position pos:line="924" pos:column="17"/></operator> <name pos:line="924" pos:column="18">oldcode<pos:position pos:line="924" pos:column="25"/></name></expr>;<pos:position pos:line="924" pos:column="26"/></expr_stmt>                 <comment type="block" pos:line="924" pos:column="43">/* leave previous item in place */</comment>
          <if pos:line="925" pos:column="11">if <condition pos:line="925" pos:column="14">(<expr><name pos:line="925" pos:column="15">repeat_max<pos:position pos:line="925" pos:column="25"/></name> <operator pos:line="925" pos:column="26">==<pos:position pos:line="925" pos:column="28"/></operator> <literal type="number" pos:line="925" pos:column="29">1<pos:position pos:line="925" pos:column="30"/></literal></expr>)<pos:position pos:line="925" pos:column="31"/></condition><then pos:line="925" pos:column="31"> <block type="pseudo"><goto pos:line="925" pos:column="32">goto <name pos:line="925" pos:column="37">END_REPEAT<pos:position pos:line="925" pos:column="47"/></name>;<pos:position pos:line="925" pos:column="48"/></goto></block></then></if>
          <expr_stmt><expr><operator pos:line="926" pos:column="11">*<pos:position pos:line="926" pos:column="12"/></operator><name pos:line="926" pos:column="12">code<pos:position pos:line="926" pos:column="16"/></name><operator pos:line="926" pos:column="16">++<pos:position pos:line="926" pos:column="18"/></operator> <operator pos:line="926" pos:column="19">=<pos:position pos:line="926" pos:column="20"/></operator> <name pos:line="926" pos:column="21">OP_UPTO<pos:position pos:line="926" pos:column="28"/></name> <operator pos:line="926" pos:column="29">+<pos:position pos:line="926" pos:column="30"/></operator> <name pos:line="926" pos:column="31">repeat_type<pos:position pos:line="926" pos:column="42"/></name></expr>;<pos:position pos:line="926" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="927" pos:column="11">PUT2INC<pos:position pos:line="927" pos:column="18"/></name><argument_list pos:line="927" pos:column="18">(<argument><expr><name pos:line="927" pos:column="19">code<pos:position pos:line="927" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="927" pos:column="25">0<pos:position pos:line="927" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="927" pos:column="28">repeat_max<pos:position pos:line="927" pos:column="38"/></name> <operator pos:line="927" pos:column="39">-<pos:position pos:line="927" pos:column="40"/></operator> <literal type="number" pos:line="927" pos:column="41">1<pos:position pos:line="927" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="927" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="927" pos:column="44"/></expr_stmt>
          }<pos:position pos:line="928" pos:column="12"/></block></else></if>
        }<pos:position pos:line="929" pos:column="10"/></block></then></if></elseif>

      <comment type="block" pos:line="931" pos:column="7">/* The case {n,n} is just an EXACT, while the general case {n,m} is
      handled as an EXACT followed by an UPTO. */</comment>

      <else pos:line="934" pos:column="7">else
        <block pos:line="935" pos:column="9">{
        <expr_stmt><expr><operator pos:line="936" pos:column="9">*<pos:position pos:line="936" pos:column="10"/></operator><name pos:line="936" pos:column="10">code<pos:position pos:line="936" pos:column="14"/></name><operator pos:line="936" pos:column="14">++<pos:position pos:line="936" pos:column="16"/></operator> <operator pos:line="936" pos:column="17">=<pos:position pos:line="936" pos:column="18"/></operator> <name pos:line="936" pos:column="19">OP_EXACT<pos:position pos:line="936" pos:column="27"/></name> <operator pos:line="936" pos:column="28">+<pos:position pos:line="936" pos:column="29"/></operator> <name pos:line="936" pos:column="30">op_type<pos:position pos:line="936" pos:column="37"/></name></expr>;<pos:position pos:line="936" pos:column="38"/></expr_stmt>  <comment type="block" pos:line="936" pos:column="40">/* NB EXACT doesn't have repeat_type */</comment>
        <expr_stmt><expr><call><name pos:line="937" pos:column="9">PUT2INC<pos:position pos:line="937" pos:column="16"/></name><argument_list pos:line="937" pos:column="16">(<argument><expr><name pos:line="937" pos:column="17">code<pos:position pos:line="937" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="937" pos:column="23">0<pos:position pos:line="937" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="937" pos:column="26">repeat_min<pos:position pos:line="937" pos:column="36"/></name></expr></argument>)<pos:position pos:line="937" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="937" pos:column="38"/></expr_stmt>

        <comment type="block" pos:line="939" pos:column="9">/* If the maximum is unlimited, insert an OP_STAR. Before doing so,
        we have to insert the character for the previous code. For a repeated
        Unicode property match, there is an extra byte that defines the
        required property. In UTF-8 mode, long characters have their length in
        c, with the 0x80 bit as a flag. */</comment>

        <if pos:line="945" pos:column="9">if <condition pos:line="945" pos:column="12">(<expr><name pos:line="945" pos:column="13">repeat_max<pos:position pos:line="945" pos:column="23"/></name> <operator pos:line="945" pos:column="24">&lt;<pos:position pos:line="945" pos:column="28"/></operator> <literal type="number" pos:line="945" pos:column="26">0<pos:position pos:line="945" pos:column="27"/></literal></expr>)<pos:position pos:line="945" pos:column="28"/></condition><then pos:line="945" pos:column="28">
          <block pos:line="946" pos:column="11">{
<cpp:ifdef pos:line="947" pos:column="1">#<cpp:directive pos:line="947" pos:column="2">ifdef<pos:position pos:line="947" pos:column="7"/></cpp:directive> <name pos:line="947" pos:column="8">SUPPORT_UTF8<pos:position pos:line="947" pos:column="20"/></name></cpp:ifdef>
          <if pos:line="948" pos:column="11">if <condition pos:line="948" pos:column="14">(<expr><name pos:line="948" pos:column="15">utf8<pos:position pos:line="948" pos:column="19"/></name> <operator pos:line="948" pos:column="20">&amp;&amp;<pos:position pos:line="948" pos:column="30"/></operator> <name pos:line="948" pos:column="23">c<pos:position pos:line="948" pos:column="24"/></name> <operator pos:line="948" pos:column="25">&gt;=<pos:position pos:line="948" pos:column="30"/></operator> <literal type="number" pos:line="948" pos:column="28">128<pos:position pos:line="948" pos:column="31"/></literal></expr>)<pos:position pos:line="948" pos:column="32"/></condition><then pos:line="948" pos:column="32">
            <block pos:line="949" pos:column="13">{
            <expr_stmt><expr><call><name pos:line="950" pos:column="13">memcpy<pos:position pos:line="950" pos:column="19"/></name><argument_list pos:line="950" pos:column="19">(<argument><expr><name pos:line="950" pos:column="20">code<pos:position pos:line="950" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="950" pos:column="26">utf8_char<pos:position pos:line="950" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="950" pos:column="37">c<pos:position pos:line="950" pos:column="38"/></name> <operator pos:line="950" pos:column="39">&amp;<pos:position pos:line="950" pos:column="44"/></operator> <literal type="number" pos:line="950" pos:column="41">7<pos:position pos:line="950" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="950" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="950" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name pos:line="951" pos:column="13">code<pos:position pos:line="951" pos:column="17"/></name> <operator pos:line="951" pos:column="18">+=<pos:position pos:line="951" pos:column="20"/></operator> <name pos:line="951" pos:column="21">c<pos:position pos:line="951" pos:column="22"/></name> <operator pos:line="951" pos:column="23">&amp;<pos:position pos:line="951" pos:column="28"/></operator> <literal type="number" pos:line="951" pos:column="25">7<pos:position pos:line="951" pos:column="26"/></literal></expr>;<pos:position pos:line="951" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="952" pos:column="14"/></block></then>
          <else pos:line="953" pos:column="11">else
<cpp:endif pos:line="954" pos:column="1">#<cpp:directive pos:line="954" pos:column="2">endif<pos:position pos:line="954" pos:column="7"/></cpp:directive></cpp:endif>
            <block pos:line="955" pos:column="13">{
            <expr_stmt><expr><operator pos:line="956" pos:column="13">*<pos:position pos:line="956" pos:column="14"/></operator><name pos:line="956" pos:column="14">code<pos:position pos:line="956" pos:column="18"/></name><operator pos:line="956" pos:column="18">++<pos:position pos:line="956" pos:column="20"/></operator> <operator pos:line="956" pos:column="21">=<pos:position pos:line="956" pos:column="22"/></operator> <name pos:line="956" pos:column="23">c<pos:position pos:line="956" pos:column="24"/></name></expr>;<pos:position pos:line="956" pos:column="25"/></expr_stmt>
            <if pos:line="957" pos:column="13">if <condition pos:line="957" pos:column="16">(<expr><name pos:line="957" pos:column="17">prop_type<pos:position pos:line="957" pos:column="26"/></name> <operator pos:line="957" pos:column="27">&gt;=<pos:position pos:line="957" pos:column="32"/></operator> <literal type="number" pos:line="957" pos:column="30">0<pos:position pos:line="957" pos:column="31"/></literal></expr>)<pos:position pos:line="957" pos:column="32"/></condition><then pos:line="957" pos:column="32"> <block type="pseudo"><expr_stmt><expr><operator pos:line="957" pos:column="33">*<pos:position pos:line="957" pos:column="34"/></operator><name pos:line="957" pos:column="34">code<pos:position pos:line="957" pos:column="38"/></name><operator pos:line="957" pos:column="38">++<pos:position pos:line="957" pos:column="40"/></operator> <operator pos:line="957" pos:column="41">=<pos:position pos:line="957" pos:column="42"/></operator> <name pos:line="957" pos:column="43">prop_type<pos:position pos:line="957" pos:column="52"/></name></expr>;<pos:position pos:line="957" pos:column="53"/></expr_stmt></block></then></if>
            }<pos:position pos:line="958" pos:column="14"/></block></else></if>
          <expr_stmt><expr><operator pos:line="959" pos:column="11">*<pos:position pos:line="959" pos:column="12"/></operator><name pos:line="959" pos:column="12">code<pos:position pos:line="959" pos:column="16"/></name><operator pos:line="959" pos:column="16">++<pos:position pos:line="959" pos:column="18"/></operator> <operator pos:line="959" pos:column="19">=<pos:position pos:line="959" pos:column="20"/></operator> <name pos:line="959" pos:column="21">OP_STAR<pos:position pos:line="959" pos:column="28"/></name> <operator pos:line="959" pos:column="29">+<pos:position pos:line="959" pos:column="30"/></operator> <name pos:line="959" pos:column="31">repeat_type<pos:position pos:line="959" pos:column="42"/></name></expr>;<pos:position pos:line="959" pos:column="43"/></expr_stmt>
          }<pos:position pos:line="960" pos:column="12"/></block></then>

        <comment type="block" pos:line="962" pos:column="9">/* Else insert an UPTO if the max is greater than the min, again
        preceded by the character, for the previously inserted code. */</comment>

        <elseif pos:line="965" pos:column="9">else <if pos:line="965" pos:column="14">if <condition pos:line="965" pos:column="17">(<expr><name pos:line="965" pos:column="18">repeat_max<pos:position pos:line="965" pos:column="28"/></name> <operator pos:line="965" pos:column="29">!=<pos:position pos:line="965" pos:column="31"/></operator> <name pos:line="965" pos:column="32">repeat_min<pos:position pos:line="965" pos:column="42"/></name></expr>)<pos:position pos:line="965" pos:column="43"/></condition><then pos:line="965" pos:column="43">
          <block pos:line="966" pos:column="11">{
<cpp:ifdef pos:line="967" pos:column="1">#<cpp:directive pos:line="967" pos:column="2">ifdef<pos:position pos:line="967" pos:column="7"/></cpp:directive> <name pos:line="967" pos:column="8">SUPPORT_UTF8<pos:position pos:line="967" pos:column="20"/></name></cpp:ifdef>
          <if pos:line="968" pos:column="11">if <condition pos:line="968" pos:column="14">(<expr><name pos:line="968" pos:column="15">utf8<pos:position pos:line="968" pos:column="19"/></name> <operator pos:line="968" pos:column="20">&amp;&amp;<pos:position pos:line="968" pos:column="30"/></operator> <name pos:line="968" pos:column="23">c<pos:position pos:line="968" pos:column="24"/></name> <operator pos:line="968" pos:column="25">&gt;=<pos:position pos:line="968" pos:column="30"/></operator> <literal type="number" pos:line="968" pos:column="28">128<pos:position pos:line="968" pos:column="31"/></literal></expr>)<pos:position pos:line="968" pos:column="32"/></condition><then pos:line="968" pos:column="32">
            <block pos:line="969" pos:column="13">{
            <expr_stmt><expr><call><name pos:line="970" pos:column="13">memcpy<pos:position pos:line="970" pos:column="19"/></name><argument_list pos:line="970" pos:column="19">(<argument><expr><name pos:line="970" pos:column="20">code<pos:position pos:line="970" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="970" pos:column="26">utf8_char<pos:position pos:line="970" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="970" pos:column="37">c<pos:position pos:line="970" pos:column="38"/></name> <operator pos:line="970" pos:column="39">&amp;<pos:position pos:line="970" pos:column="44"/></operator> <literal type="number" pos:line="970" pos:column="41">7<pos:position pos:line="970" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="970" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="970" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name pos:line="971" pos:column="13">code<pos:position pos:line="971" pos:column="17"/></name> <operator pos:line="971" pos:column="18">+=<pos:position pos:line="971" pos:column="20"/></operator> <name pos:line="971" pos:column="21">c<pos:position pos:line="971" pos:column="22"/></name> <operator pos:line="971" pos:column="23">&amp;<pos:position pos:line="971" pos:column="28"/></operator> <literal type="number" pos:line="971" pos:column="25">7<pos:position pos:line="971" pos:column="26"/></literal></expr>;<pos:position pos:line="971" pos:column="27"/></expr_stmt>
            }<pos:position pos:line="972" pos:column="14"/></block></then>
          <else pos:line="973" pos:column="11">else
<cpp:endif pos:line="974" pos:column="1">#<cpp:directive pos:line="974" pos:column="2">endif<pos:position pos:line="974" pos:column="7"/></cpp:directive></cpp:endif>
          <block type="pseudo"><expr_stmt><expr><operator pos:line="975" pos:column="11">*<pos:position pos:line="975" pos:column="12"/></operator><name pos:line="975" pos:column="12">code<pos:position pos:line="975" pos:column="16"/></name><operator pos:line="975" pos:column="16">++<pos:position pos:line="975" pos:column="18"/></operator> <operator pos:line="975" pos:column="19">=<pos:position pos:line="975" pos:column="20"/></operator> <name pos:line="975" pos:column="21">c<pos:position pos:line="975" pos:column="22"/></name></expr>;<pos:position pos:line="975" pos:column="23"/></expr_stmt></block></else></if>
          <if pos:line="976" pos:column="11">if <condition pos:line="976" pos:column="14">(<expr><name pos:line="976" pos:column="15">prop_type<pos:position pos:line="976" pos:column="24"/></name> <operator pos:line="976" pos:column="25">&gt;=<pos:position pos:line="976" pos:column="30"/></operator> <literal type="number" pos:line="976" pos:column="28">0<pos:position pos:line="976" pos:column="29"/></literal></expr>)<pos:position pos:line="976" pos:column="30"/></condition><then pos:line="976" pos:column="30"> <block type="pseudo"><expr_stmt><expr><operator pos:line="976" pos:column="31">*<pos:position pos:line="976" pos:column="32"/></operator><name pos:line="976" pos:column="32">code<pos:position pos:line="976" pos:column="36"/></name><operator pos:line="976" pos:column="36">++<pos:position pos:line="976" pos:column="38"/></operator> <operator pos:line="976" pos:column="39">=<pos:position pos:line="976" pos:column="40"/></operator> <name pos:line="976" pos:column="41">prop_type<pos:position pos:line="976" pos:column="50"/></name></expr>;<pos:position pos:line="976" pos:column="51"/></expr_stmt></block></then></if>
          <expr_stmt><expr><name pos:line="977" pos:column="11">repeat_max<pos:position pos:line="977" pos:column="21"/></name> <operator pos:line="977" pos:column="22">-=<pos:position pos:line="977" pos:column="24"/></operator> <name pos:line="977" pos:column="25">repeat_min<pos:position pos:line="977" pos:column="35"/></name></expr>;<pos:position pos:line="977" pos:column="36"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="978" pos:column="11">*<pos:position pos:line="978" pos:column="12"/></operator><name pos:line="978" pos:column="12">code<pos:position pos:line="978" pos:column="16"/></name><operator pos:line="978" pos:column="16">++<pos:position pos:line="978" pos:column="18"/></operator> <operator pos:line="978" pos:column="19">=<pos:position pos:line="978" pos:column="20"/></operator> <name pos:line="978" pos:column="21">OP_UPTO<pos:position pos:line="978" pos:column="28"/></name> <operator pos:line="978" pos:column="29">+<pos:position pos:line="978" pos:column="30"/></operator> <name pos:line="978" pos:column="31">repeat_type<pos:position pos:line="978" pos:column="42"/></name></expr>;<pos:position pos:line="978" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="979" pos:column="11">PUT2INC<pos:position pos:line="979" pos:column="18"/></name><argument_list pos:line="979" pos:column="18">(<argument><expr><name pos:line="979" pos:column="19">code<pos:position pos:line="979" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="979" pos:column="25">0<pos:position pos:line="979" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="979" pos:column="28">repeat_max<pos:position pos:line="979" pos:column="38"/></name></expr></argument>)<pos:position pos:line="979" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="979" pos:column="40"/></expr_stmt>
          }<pos:position pos:line="980" pos:column="12"/></block></then></if></elseif></if>
        }<pos:position pos:line="981" pos:column="10"/></block></else></if>

      <comment type="block" pos:line="983" pos:column="7">/* The character or character type itself comes last in all cases. */</comment>

<cpp:ifdef pos:line="985" pos:column="1">#<cpp:directive pos:line="985" pos:column="2">ifdef<pos:position pos:line="985" pos:column="7"/></cpp:directive> <name pos:line="985" pos:column="8">SUPPORT_UTF8<pos:position pos:line="985" pos:column="20"/></name></cpp:ifdef>
      <if pos:line="986" pos:column="7">if <condition pos:line="986" pos:column="10">(<expr><name pos:line="986" pos:column="11">utf8<pos:position pos:line="986" pos:column="15"/></name> <operator pos:line="986" pos:column="16">&amp;&amp;<pos:position pos:line="986" pos:column="26"/></operator> <name pos:line="986" pos:column="19">c<pos:position pos:line="986" pos:column="20"/></name> <operator pos:line="986" pos:column="21">&gt;=<pos:position pos:line="986" pos:column="26"/></operator> <literal type="number" pos:line="986" pos:column="24">128<pos:position pos:line="986" pos:column="27"/></literal></expr>)<pos:position pos:line="986" pos:column="28"/></condition><then pos:line="986" pos:column="28">
        <block pos:line="987" pos:column="9">{
        <expr_stmt><expr><call><name pos:line="988" pos:column="9">memcpy<pos:position pos:line="988" pos:column="15"/></name><argument_list pos:line="988" pos:column="15">(<argument><expr><name pos:line="988" pos:column="16">code<pos:position pos:line="988" pos:column="20"/></name></expr></argument>, <argument><expr><name pos:line="988" pos:column="22">utf8_char<pos:position pos:line="988" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="988" pos:column="33">c<pos:position pos:line="988" pos:column="34"/></name> <operator pos:line="988" pos:column="35">&amp;<pos:position pos:line="988" pos:column="40"/></operator> <literal type="number" pos:line="988" pos:column="37">7<pos:position pos:line="988" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="988" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="988" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="989" pos:column="9">code<pos:position pos:line="989" pos:column="13"/></name> <operator pos:line="989" pos:column="14">+=<pos:position pos:line="989" pos:column="16"/></operator> <name pos:line="989" pos:column="17">c<pos:position pos:line="989" pos:column="18"/></name> <operator pos:line="989" pos:column="19">&amp;<pos:position pos:line="989" pos:column="24"/></operator> <literal type="number" pos:line="989" pos:column="21">7<pos:position pos:line="989" pos:column="22"/></literal></expr>;<pos:position pos:line="989" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="990" pos:column="10"/></block></then>
      <else pos:line="991" pos:column="7">else
<cpp:endif pos:line="992" pos:column="1">#<cpp:directive pos:line="992" pos:column="2">endif<pos:position pos:line="992" pos:column="7"/></cpp:directive></cpp:endif>
      <block type="pseudo"><expr_stmt><expr><operator pos:line="993" pos:column="7">*<pos:position pos:line="993" pos:column="8"/></operator><name pos:line="993" pos:column="8">code<pos:position pos:line="993" pos:column="12"/></name><operator pos:line="993" pos:column="12">++<pos:position pos:line="993" pos:column="14"/></operator> <operator pos:line="993" pos:column="15">=<pos:position pos:line="993" pos:column="16"/></operator> <name pos:line="993" pos:column="17">c<pos:position pos:line="993" pos:column="18"/></name></expr>;<pos:position pos:line="993" pos:column="19"/></expr_stmt></block></else></if>

      <comment type="block" pos:line="995" pos:column="7">/* For a repeated Unicode property match, there is an extra byte that
      defines the required property. */</comment>

<cpp:ifdef pos:line="998" pos:column="1">#<cpp:directive pos:line="998" pos:column="2">ifdef<pos:position pos:line="998" pos:column="7"/></cpp:directive> <name pos:line="998" pos:column="8">SUPPORT_UCP<pos:position pos:line="998" pos:column="19"/></name></cpp:ifdef>
      <if pos:line="999" pos:column="7">if <condition pos:line="999" pos:column="10">(<expr><name pos:line="999" pos:column="11">prop_type<pos:position pos:line="999" pos:column="20"/></name> <operator pos:line="999" pos:column="21">&gt;=<pos:position pos:line="999" pos:column="26"/></operator> <literal type="number" pos:line="999" pos:column="24">0<pos:position pos:line="999" pos:column="25"/></literal></expr>)<pos:position pos:line="999" pos:column="26"/></condition><then pos:line="999" pos:column="26"> <block type="pseudo"><expr_stmt><expr><operator pos:line="999" pos:column="27">*<pos:position pos:line="999" pos:column="28"/></operator><name pos:line="999" pos:column="28">code<pos:position pos:line="999" pos:column="32"/></name><operator pos:line="999" pos:column="32">++<pos:position pos:line="999" pos:column="34"/></operator> <operator pos:line="999" pos:column="35">=<pos:position pos:line="999" pos:column="36"/></operator> <name pos:line="999" pos:column="37">prop_type<pos:position pos:line="999" pos:column="46"/></name></expr>;<pos:position pos:line="999" pos:column="47"/></expr_stmt></block></then></if>
<cpp:endif pos:line="1000" pos:column="1">#<cpp:directive pos:line="1000" pos:column="2">endif<pos:position pos:line="1000" pos:column="7"/></cpp:directive></cpp:endif>
      }<pos:position pos:line="1001" pos:column="8"/></block></then></if></elseif>

    <comment type="block" pos:line="1003" pos:column="5">/* If previous was a character class or a back reference, we put the repeat
    stuff after it, but just skip the item if the repeat was {0,0}. */</comment>

    <elseif pos:line="1006" pos:column="5">else <if pos:line="1006" pos:column="10">if <condition pos:line="1006" pos:column="13">(<expr><operator pos:line="1006" pos:column="14">*<pos:position pos:line="1006" pos:column="15"/></operator><name pos:line="1006" pos:column="15">previous<pos:position pos:line="1006" pos:column="23"/></name> <operator pos:line="1006" pos:column="24">==<pos:position pos:line="1006" pos:column="26"/></operator> <name pos:line="1006" pos:column="27">OP_CLASS<pos:position pos:line="1006" pos:column="35"/></name> <operator pos:line="1006" pos:column="36">||<pos:position pos:line="1006" pos:column="38"/></operator>
             <operator pos:line="1007" pos:column="14">*<pos:position pos:line="1007" pos:column="15"/></operator><name pos:line="1007" pos:column="15">previous<pos:position pos:line="1007" pos:column="23"/></name> <operator pos:line="1007" pos:column="24">==<pos:position pos:line="1007" pos:column="26"/></operator> <name pos:line="1007" pos:column="27">OP_NCLASS<pos:position pos:line="1007" pos:column="36"/></name> <operator pos:line="1007" pos:column="37">||<pos:position pos:line="1007" pos:column="39"/></operator>
<cpp:ifdef pos:line="1008" pos:column="1">#<cpp:directive pos:line="1008" pos:column="2">ifdef<pos:position pos:line="1008" pos:column="7"/></cpp:directive> <name pos:line="1008" pos:column="8">SUPPORT_UTF8<pos:position pos:line="1008" pos:column="20"/></name></cpp:ifdef>
             <operator pos:line="1009" pos:column="14">*<pos:position pos:line="1009" pos:column="15"/></operator><name pos:line="1009" pos:column="15">previous<pos:position pos:line="1009" pos:column="23"/></name> <operator pos:line="1009" pos:column="24">==<pos:position pos:line="1009" pos:column="26"/></operator> <name pos:line="1009" pos:column="27">OP_XCLASS<pos:position pos:line="1009" pos:column="36"/></name> <operator pos:line="1009" pos:column="37">||<pos:position pos:line="1009" pos:column="39"/></operator>
<cpp:endif pos:line="1010" pos:column="1">#<cpp:directive pos:line="1010" pos:column="2">endif<pos:position pos:line="1010" pos:column="7"/></cpp:directive></cpp:endif>
             <operator pos:line="1011" pos:column="14">*<pos:position pos:line="1011" pos:column="15"/></operator><name pos:line="1011" pos:column="15">previous<pos:position pos:line="1011" pos:column="23"/></name> <operator pos:line="1011" pos:column="24">==<pos:position pos:line="1011" pos:column="26"/></operator> <name pos:line="1011" pos:column="27">OP_REF<pos:position pos:line="1011" pos:column="33"/></name></expr>)<pos:position pos:line="1011" pos:column="34"/></condition><then pos:line="1011" pos:column="34">
      <block pos:line="1012" pos:column="7">{
      <if pos:line="1013" pos:column="7">if <condition pos:line="1013" pos:column="10">(<expr><name pos:line="1013" pos:column="11">repeat_max<pos:position pos:line="1013" pos:column="21"/></name> <operator pos:line="1013" pos:column="22">==<pos:position pos:line="1013" pos:column="24"/></operator> <literal type="number" pos:line="1013" pos:column="25">0<pos:position pos:line="1013" pos:column="26"/></literal></expr>)<pos:position pos:line="1013" pos:column="27"/></condition><then pos:line="1013" pos:column="27">
        <block pos:line="1014" pos:column="9">{
        <expr_stmt><expr><name pos:line="1015" pos:column="9">code<pos:position pos:line="1015" pos:column="13"/></name> <operator pos:line="1015" pos:column="14">=<pos:position pos:line="1015" pos:column="15"/></operator> <name pos:line="1015" pos:column="16">previous<pos:position pos:line="1015" pos:column="24"/></name></expr>;<pos:position pos:line="1015" pos:column="25"/></expr_stmt>
        <goto pos:line="1016" pos:column="9">goto <name pos:line="1016" pos:column="14">END_REPEAT<pos:position pos:line="1016" pos:column="24"/></name>;<pos:position pos:line="1016" pos:column="25"/></goto>
        }<pos:position pos:line="1017" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="1019" pos:column="7">/* All real repeats make it impossible to handle partial matching (maybe
      one day we will be able to remove this restriction). */</comment>

      <if pos:line="1022" pos:column="7">if <condition pos:line="1022" pos:column="10">(<expr><name pos:line="1022" pos:column="11">repeat_max<pos:position pos:line="1022" pos:column="21"/></name> <operator pos:line="1022" pos:column="22">!=<pos:position pos:line="1022" pos:column="24"/></operator> <literal type="number" pos:line="1022" pos:column="25">1<pos:position pos:line="1022" pos:column="26"/></literal></expr>)<pos:position pos:line="1022" pos:column="27"/></condition><then pos:line="1022" pos:column="27"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="1022" pos:column="28">cd<pos:position pos:line="1022" pos:column="30"/></name><operator pos:line="1022" pos:column="30">-&gt;<pos:position pos:line="1022" pos:column="35"/></operator><name pos:line="1022" pos:column="32">nopartial<pos:position pos:line="1022" pos:column="41"/></name></name> <operator pos:line="1022" pos:column="42">=<pos:position pos:line="1022" pos:column="43"/></operator> <name pos:line="1022" pos:column="44">TRUE<pos:position pos:line="1022" pos:column="48"/></name></expr>;<pos:position pos:line="1022" pos:column="49"/></expr_stmt></block></then></if>

      <if pos:line="1024" pos:column="7">if <condition pos:line="1024" pos:column="10">(<expr><name pos:line="1024" pos:column="11">repeat_min<pos:position pos:line="1024" pos:column="21"/></name> <operator pos:line="1024" pos:column="22">==<pos:position pos:line="1024" pos:column="24"/></operator> <literal type="number" pos:line="1024" pos:column="25">0<pos:position pos:line="1024" pos:column="26"/></literal> <operator pos:line="1024" pos:column="27">&amp;&amp;<pos:position pos:line="1024" pos:column="37"/></operator> <name pos:line="1024" pos:column="30">repeat_max<pos:position pos:line="1024" pos:column="40"/></name> <operator pos:line="1024" pos:column="41">==<pos:position pos:line="1024" pos:column="43"/></operator> <operator pos:line="1024" pos:column="44">-<pos:position pos:line="1024" pos:column="45"/></operator><literal type="number" pos:line="1024" pos:column="45">1<pos:position pos:line="1024" pos:column="46"/></literal></expr>)<pos:position pos:line="1024" pos:column="47"/></condition><then pos:line="1024" pos:column="47">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="1025" pos:column="9">*<pos:position pos:line="1025" pos:column="10"/></operator><name pos:line="1025" pos:column="10">code<pos:position pos:line="1025" pos:column="14"/></name><operator pos:line="1025" pos:column="14">++<pos:position pos:line="1025" pos:column="16"/></operator> <operator pos:line="1025" pos:column="17">=<pos:position pos:line="1025" pos:column="18"/></operator> <name pos:line="1025" pos:column="19">OP_CRSTAR<pos:position pos:line="1025" pos:column="28"/></name> <operator pos:line="1025" pos:column="29">+<pos:position pos:line="1025" pos:column="30"/></operator> <name pos:line="1025" pos:column="31">repeat_type<pos:position pos:line="1025" pos:column="42"/></name></expr>;<pos:position pos:line="1025" pos:column="43"/></expr_stmt></block></then>
      <elseif pos:line="1026" pos:column="7">else <if pos:line="1026" pos:column="12">if <condition pos:line="1026" pos:column="15">(<expr><name pos:line="1026" pos:column="16">repeat_min<pos:position pos:line="1026" pos:column="26"/></name> <operator pos:line="1026" pos:column="27">==<pos:position pos:line="1026" pos:column="29"/></operator> <literal type="number" pos:line="1026" pos:column="30">1<pos:position pos:line="1026" pos:column="31"/></literal> <operator pos:line="1026" pos:column="32">&amp;&amp;<pos:position pos:line="1026" pos:column="42"/></operator> <name pos:line="1026" pos:column="35">repeat_max<pos:position pos:line="1026" pos:column="45"/></name> <operator pos:line="1026" pos:column="46">==<pos:position pos:line="1026" pos:column="48"/></operator> <operator pos:line="1026" pos:column="49">-<pos:position pos:line="1026" pos:column="50"/></operator><literal type="number" pos:line="1026" pos:column="50">1<pos:position pos:line="1026" pos:column="51"/></literal></expr>)<pos:position pos:line="1026" pos:column="52"/></condition><then pos:line="1026" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="1027" pos:column="9">*<pos:position pos:line="1027" pos:column="10"/></operator><name pos:line="1027" pos:column="10">code<pos:position pos:line="1027" pos:column="14"/></name><operator pos:line="1027" pos:column="14">++<pos:position pos:line="1027" pos:column="16"/></operator> <operator pos:line="1027" pos:column="17">=<pos:position pos:line="1027" pos:column="18"/></operator> <name pos:line="1027" pos:column="19">OP_CRPLUS<pos:position pos:line="1027" pos:column="28"/></name> <operator pos:line="1027" pos:column="29">+<pos:position pos:line="1027" pos:column="30"/></operator> <name pos:line="1027" pos:column="31">repeat_type<pos:position pos:line="1027" pos:column="42"/></name></expr>;<pos:position pos:line="1027" pos:column="43"/></expr_stmt></block></then></if></elseif>
      <elseif pos:line="1028" pos:column="7">else <if pos:line="1028" pos:column="12">if <condition pos:line="1028" pos:column="15">(<expr><name pos:line="1028" pos:column="16">repeat_min<pos:position pos:line="1028" pos:column="26"/></name> <operator pos:line="1028" pos:column="27">==<pos:position pos:line="1028" pos:column="29"/></operator> <literal type="number" pos:line="1028" pos:column="30">0<pos:position pos:line="1028" pos:column="31"/></literal> <operator pos:line="1028" pos:column="32">&amp;&amp;<pos:position pos:line="1028" pos:column="42"/></operator> <name pos:line="1028" pos:column="35">repeat_max<pos:position pos:line="1028" pos:column="45"/></name> <operator pos:line="1028" pos:column="46">==<pos:position pos:line="1028" pos:column="48"/></operator> <literal type="number" pos:line="1028" pos:column="49">1<pos:position pos:line="1028" pos:column="50"/></literal></expr>)<pos:position pos:line="1028" pos:column="51"/></condition><then pos:line="1028" pos:column="51">
        <block type="pseudo"><expr_stmt><expr><operator pos:line="1029" pos:column="9">*<pos:position pos:line="1029" pos:column="10"/></operator><name pos:line="1029" pos:column="10">code<pos:position pos:line="1029" pos:column="14"/></name><operator pos:line="1029" pos:column="14">++<pos:position pos:line="1029" pos:column="16"/></operator> <operator pos:line="1029" pos:column="17">=<pos:position pos:line="1029" pos:column="18"/></operator> <name pos:line="1029" pos:column="19">OP_CRQUERY<pos:position pos:line="1029" pos:column="29"/></name> <operator pos:line="1029" pos:column="30">+<pos:position pos:line="1029" pos:column="31"/></operator> <name pos:line="1029" pos:column="32">repeat_type<pos:position pos:line="1029" pos:column="43"/></name></expr>;<pos:position pos:line="1029" pos:column="44"/></expr_stmt></block></then></if></elseif>
      <else pos:line="1030" pos:column="7">else
        <block pos:line="1031" pos:column="9">{
        <expr_stmt><expr><operator pos:line="1032" pos:column="9">*<pos:position pos:line="1032" pos:column="10"/></operator><name pos:line="1032" pos:column="10">code<pos:position pos:line="1032" pos:column="14"/></name><operator pos:line="1032" pos:column="14">++<pos:position pos:line="1032" pos:column="16"/></operator> <operator pos:line="1032" pos:column="17">=<pos:position pos:line="1032" pos:column="18"/></operator> <name pos:line="1032" pos:column="19">OP_CRRANGE<pos:position pos:line="1032" pos:column="29"/></name> <operator pos:line="1032" pos:column="30">+<pos:position pos:line="1032" pos:column="31"/></operator> <name pos:line="1032" pos:column="32">repeat_type<pos:position pos:line="1032" pos:column="43"/></name></expr>;<pos:position pos:line="1032" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1033" pos:column="9">PUT2INC<pos:position pos:line="1033" pos:column="16"/></name><argument_list pos:line="1033" pos:column="16">(<argument><expr><name pos:line="1033" pos:column="17">code<pos:position pos:line="1033" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1033" pos:column="23">0<pos:position pos:line="1033" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="1033" pos:column="26">repeat_min<pos:position pos:line="1033" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1033" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1033" pos:column="38"/></expr_stmt>
        <if pos:line="1034" pos:column="9">if <condition pos:line="1034" pos:column="12">(<expr><name pos:line="1034" pos:column="13">repeat_max<pos:position pos:line="1034" pos:column="23"/></name> <operator pos:line="1034" pos:column="24">==<pos:position pos:line="1034" pos:column="26"/></operator> <operator pos:line="1034" pos:column="27">-<pos:position pos:line="1034" pos:column="28"/></operator><literal type="number" pos:line="1034" pos:column="28">1<pos:position pos:line="1034" pos:column="29"/></literal></expr>)<pos:position pos:line="1034" pos:column="30"/></condition><then pos:line="1034" pos:column="30"> <block type="pseudo"><expr_stmt><expr><name pos:line="1034" pos:column="31">repeat_max<pos:position pos:line="1034" pos:column="41"/></name> <operator pos:line="1034" pos:column="42">=<pos:position pos:line="1034" pos:column="43"/></operator> <literal type="number" pos:line="1034" pos:column="44">0<pos:position pos:line="1034" pos:column="45"/></literal></expr>;<pos:position pos:line="1034" pos:column="46"/></expr_stmt></block></then></if>  <comment type="block" pos:line="1034" pos:column="48">/* 2-byte encoding for max */</comment>
        <expr_stmt><expr><call><name pos:line="1035" pos:column="9">PUT2INC<pos:position pos:line="1035" pos:column="16"/></name><argument_list pos:line="1035" pos:column="16">(<argument><expr><name pos:line="1035" pos:column="17">code<pos:position pos:line="1035" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1035" pos:column="23">0<pos:position pos:line="1035" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="1035" pos:column="26">repeat_max<pos:position pos:line="1035" pos:column="36"/></name></expr></argument>)<pos:position pos:line="1035" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1035" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="1036" pos:column="10"/></block></else></if>
      }<pos:position pos:line="1037" pos:column="8"/></block></then></if></elseif>

    <comment type="block" pos:line="1039" pos:column="5">/* If previous was a bracket group, we may have to replicate it in certain
    cases. */</comment>

    <elseif pos:line="1042" pos:column="5">else <if pos:line="1042" pos:column="10">if <condition pos:line="1042" pos:column="13">(<expr><operator pos:line="1042" pos:column="14">*<pos:position pos:line="1042" pos:column="15"/></operator><name pos:line="1042" pos:column="15">previous<pos:position pos:line="1042" pos:column="23"/></name> <operator pos:line="1042" pos:column="24">&gt;=<pos:position pos:line="1042" pos:column="29"/></operator> <name pos:line="1042" pos:column="27">OP_BRA<pos:position pos:line="1042" pos:column="33"/></name> <operator pos:line="1042" pos:column="34">||<pos:position pos:line="1042" pos:column="36"/></operator> <operator pos:line="1042" pos:column="37">*<pos:position pos:line="1042" pos:column="38"/></operator><name pos:line="1042" pos:column="38">previous<pos:position pos:line="1042" pos:column="46"/></name> <operator pos:line="1042" pos:column="47">==<pos:position pos:line="1042" pos:column="49"/></operator> <name pos:line="1042" pos:column="50">OP_ONCE<pos:position pos:line="1042" pos:column="57"/></name> <operator pos:line="1042" pos:column="58">||<pos:position pos:line="1042" pos:column="60"/></operator>
             <operator pos:line="1043" pos:column="14">*<pos:position pos:line="1043" pos:column="15"/></operator><name pos:line="1043" pos:column="15">previous<pos:position pos:line="1043" pos:column="23"/></name> <operator pos:line="1043" pos:column="24">==<pos:position pos:line="1043" pos:column="26"/></operator> <name pos:line="1043" pos:column="27">OP_COND<pos:position pos:line="1043" pos:column="34"/></name></expr>)<pos:position pos:line="1043" pos:column="35"/></condition><then pos:line="1043" pos:column="35">
      <block pos:line="1044" pos:column="7">{
      <decl_stmt><decl><type><specifier pos:line="1045" pos:column="7">register<pos:position pos:line="1045" pos:column="15"/></specifier> <name pos:line="1045" pos:column="16">int<pos:position pos:line="1045" pos:column="19"/></name></type> <name pos:line="1045" pos:column="20">i<pos:position pos:line="1045" pos:column="21"/></name></decl>;<pos:position pos:line="1045" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="1046" pos:column="7">int<pos:position pos:line="1046" pos:column="10"/></name></type> <name pos:line="1046" pos:column="11">ketoffset<pos:position pos:line="1046" pos:column="20"/></name> <init pos:line="1046" pos:column="21">= <expr><literal type="number" pos:line="1046" pos:column="23">0<pos:position pos:line="1046" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="1046" pos:column="25"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="1047" pos:column="7">int<pos:position pos:line="1047" pos:column="10"/></name></type> <name pos:line="1047" pos:column="11">len<pos:position pos:line="1047" pos:column="14"/></name> <init pos:line="1047" pos:column="15">= <expr><name pos:line="1047" pos:column="17">code<pos:position pos:line="1047" pos:column="21"/></name> <operator pos:line="1047" pos:column="22">-<pos:position pos:line="1047" pos:column="23"/></operator> <name pos:line="1047" pos:column="24">previous<pos:position pos:line="1047" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="1047" pos:column="33"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="1048" pos:column="7">uschar<pos:position pos:line="1048" pos:column="13"/></name> <modifier pos:line="1048" pos:column="14">*<pos:position pos:line="1048" pos:column="15"/></modifier></type><name pos:line="1048" pos:column="15">bralink<pos:position pos:line="1048" pos:column="22"/></name> <init pos:line="1048" pos:column="23">= <expr><name pos:line="1048" pos:column="25">NULL<pos:position pos:line="1048" pos:column="29"/></name></expr></init></decl>;<pos:position pos:line="1048" pos:column="30"/></decl_stmt>

      <comment type="block" pos:line="1050" pos:column="7">/* If the maximum repeat count is unlimited, find the end of the bracket
      by scanning through from the start, and compute the offset back to it
      from the current code pointer. There may be an OP_OPT setting following
      the final KET, so we can't find the end just by going back from the code
      pointer. */</comment>

      <if pos:line="1056" pos:column="7">if <condition pos:line="1056" pos:column="10">(<expr><name pos:line="1056" pos:column="11">repeat_max<pos:position pos:line="1056" pos:column="21"/></name> <operator pos:line="1056" pos:column="22">==<pos:position pos:line="1056" pos:column="24"/></operator> <operator pos:line="1056" pos:column="25">-<pos:position pos:line="1056" pos:column="26"/></operator><literal type="number" pos:line="1056" pos:column="26">1<pos:position pos:line="1056" pos:column="27"/></literal></expr>)<pos:position pos:line="1056" pos:column="28"/></condition><then pos:line="1056" pos:column="28">
        <block pos:line="1057" pos:column="9">{
        <decl_stmt><decl><type><specifier pos:line="1058" pos:column="9">register<pos:position pos:line="1058" pos:column="17"/></specifier> <name pos:line="1058" pos:column="18">uschar<pos:position pos:line="1058" pos:column="24"/></name> <modifier pos:line="1058" pos:column="25">*<pos:position pos:line="1058" pos:column="26"/></modifier></type><name pos:line="1058" pos:column="26">ket<pos:position pos:line="1058" pos:column="29"/></name> <init pos:line="1058" pos:column="30">= <expr><name pos:line="1058" pos:column="32">previous<pos:position pos:line="1058" pos:column="40"/></name></expr></init></decl>;<pos:position pos:line="1058" pos:column="41"/></decl_stmt>
        <do pos:line="1059" pos:column="9">do <block type="pseudo"><expr_stmt><expr><name pos:line="1059" pos:column="12">ket<pos:position pos:line="1059" pos:column="15"/></name> <operator pos:line="1059" pos:column="16">+=<pos:position pos:line="1059" pos:column="18"/></operator> <call><name pos:line="1059" pos:column="19">GET<pos:position pos:line="1059" pos:column="22"/></name><argument_list pos:line="1059" pos:column="22">(<argument><expr><name pos:line="1059" pos:column="23">ket<pos:position pos:line="1059" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1059" pos:column="28">1<pos:position pos:line="1059" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="1059" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1059" pos:column="31"/></expr_stmt></block> while <condition pos:line="1059" pos:column="38">(<expr><operator pos:line="1059" pos:column="39">*<pos:position pos:line="1059" pos:column="40"/></operator><name pos:line="1059" pos:column="40">ket<pos:position pos:line="1059" pos:column="43"/></name> <operator pos:line="1059" pos:column="44">!=<pos:position pos:line="1059" pos:column="46"/></operator> <name pos:line="1059" pos:column="47">OP_KET<pos:position pos:line="1059" pos:column="53"/></name></expr>)<pos:position pos:line="1059" pos:column="54"/></condition>;<pos:position pos:line="1059" pos:column="55"/></do>
        <expr_stmt><expr><name pos:line="1060" pos:column="9">ketoffset<pos:position pos:line="1060" pos:column="18"/></name> <operator pos:line="1060" pos:column="19">=<pos:position pos:line="1060" pos:column="20"/></operator> <name pos:line="1060" pos:column="21">code<pos:position pos:line="1060" pos:column="25"/></name> <operator pos:line="1060" pos:column="26">-<pos:position pos:line="1060" pos:column="27"/></operator> <name pos:line="1060" pos:column="28">ket<pos:position pos:line="1060" pos:column="31"/></name></expr>;<pos:position pos:line="1060" pos:column="32"/></expr_stmt>
        }<pos:position pos:line="1061" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="1063" pos:column="7">/* The case of a zero minimum is special because of the need to stick
      OP_BRAZERO in front of it, and because the group appears once in the
      data, whereas in other cases it appears the minimum number of times. For
      this reason, it is simplest to treat this case separately, as otherwise
      the code gets far too messy. There are several special subcases when the
      minimum is zero. */</comment>

      <if pos:line="1070" pos:column="7">if <condition pos:line="1070" pos:column="10">(<expr><name pos:line="1070" pos:column="11">repeat_min<pos:position pos:line="1070" pos:column="21"/></name> <operator pos:line="1070" pos:column="22">==<pos:position pos:line="1070" pos:column="24"/></operator> <literal type="number" pos:line="1070" pos:column="25">0<pos:position pos:line="1070" pos:column="26"/></literal></expr>)<pos:position pos:line="1070" pos:column="27"/></condition><then pos:line="1070" pos:column="27">
        <block pos:line="1071" pos:column="9">{
        <comment type="block" pos:line="1072" pos:column="9">/* If the maximum is also zero, we just omit the group from the output
        altogether. */</comment>

        <if pos:line="1075" pos:column="9">if <condition pos:line="1075" pos:column="12">(<expr><name pos:line="1075" pos:column="13">repeat_max<pos:position pos:line="1075" pos:column="23"/></name> <operator pos:line="1075" pos:column="24">==<pos:position pos:line="1075" pos:column="26"/></operator> <literal type="number" pos:line="1075" pos:column="27">0<pos:position pos:line="1075" pos:column="28"/></literal></expr>)<pos:position pos:line="1075" pos:column="29"/></condition><then pos:line="1075" pos:column="29">
          <block pos:line="1076" pos:column="11">{
          <expr_stmt><expr><name pos:line="1077" pos:column="11">code<pos:position pos:line="1077" pos:column="15"/></name> <operator pos:line="1077" pos:column="16">=<pos:position pos:line="1077" pos:column="17"/></operator> <name pos:line="1077" pos:column="18">previous<pos:position pos:line="1077" pos:column="26"/></name></expr>;<pos:position pos:line="1077" pos:column="27"/></expr_stmt>
          <goto pos:line="1078" pos:column="11">goto <name pos:line="1078" pos:column="16">END_REPEAT<pos:position pos:line="1078" pos:column="26"/></name>;<pos:position pos:line="1078" pos:column="27"/></goto>
          }<pos:position pos:line="1079" pos:column="12"/></block></then></if>

        <comment type="block" pos:line="1081" pos:column="9">/* If the maximum is 1 or unlimited, we just have to stick in the
        BRAZERO and do no more at this point. However, we do need to adjust
        any OP_RECURSE calls inside the group that refer to the group itself or
        any internal group, because the offset is from the start of the whole
        regex. Temporarily terminate the pattern while doing this. */</comment>

        <if pos:line="1087" pos:column="9">if <condition pos:line="1087" pos:column="12">(<expr><name pos:line="1087" pos:column="13">repeat_max<pos:position pos:line="1087" pos:column="23"/></name> <operator pos:line="1087" pos:column="24">&lt;=<pos:position pos:line="1087" pos:column="29"/></operator> <literal type="number" pos:line="1087" pos:column="27">1<pos:position pos:line="1087" pos:column="28"/></literal></expr>)<pos:position pos:line="1087" pos:column="29"/></condition><then pos:line="1087" pos:column="29">
          <block pos:line="1088" pos:column="11">{
          <expr_stmt><expr><operator pos:line="1089" pos:column="11">*<pos:position pos:line="1089" pos:column="12"/></operator><name pos:line="1089" pos:column="12">code<pos:position pos:line="1089" pos:column="16"/></name> <operator pos:line="1089" pos:column="17">=<pos:position pos:line="1089" pos:column="18"/></operator> <name pos:line="1089" pos:column="19">OP_END<pos:position pos:line="1089" pos:column="25"/></name></expr>;<pos:position pos:line="1089" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1090" pos:column="11">adjust_recurse<pos:position pos:line="1090" pos:column="25"/></name><argument_list pos:line="1090" pos:column="25">(<argument><expr><name pos:line="1090" pos:column="26">previous<pos:position pos:line="1090" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1090" pos:column="36">1<pos:position pos:line="1090" pos:column="37"/></literal></expr></argument>, <argument><expr><name pos:line="1090" pos:column="39">utf8<pos:position pos:line="1090" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1090" pos:column="45">cd<pos:position pos:line="1090" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1090" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1090" pos:column="49"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1091" pos:column="11">memmove<pos:position pos:line="1091" pos:column="18"/></name><argument_list pos:line="1091" pos:column="18">(<argument><expr><name pos:line="1091" pos:column="19">previous<pos:position pos:line="1091" pos:column="27"/></name><operator pos:line="1091" pos:column="27">+<pos:position pos:line="1091" pos:column="28"/></operator><literal type="number" pos:line="1091" pos:column="28">1<pos:position pos:line="1091" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="1091" pos:column="31">previous<pos:position pos:line="1091" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="1091" pos:column="41">len<pos:position pos:line="1091" pos:column="44"/></name></expr></argument>)<pos:position pos:line="1091" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="1091" pos:column="46"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1092" pos:column="11">code<pos:position pos:line="1092" pos:column="15"/></name><operator pos:line="1092" pos:column="15">++<pos:position pos:line="1092" pos:column="17"/></operator></expr>;<pos:position pos:line="1092" pos:column="18"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="1093" pos:column="11">*<pos:position pos:line="1093" pos:column="12"/></operator><name pos:line="1093" pos:column="12">previous<pos:position pos:line="1093" pos:column="20"/></name><operator pos:line="1093" pos:column="20">++<pos:position pos:line="1093" pos:column="22"/></operator> <operator pos:line="1093" pos:column="23">=<pos:position pos:line="1093" pos:column="24"/></operator> <name pos:line="1093" pos:column="25">OP_BRAZERO<pos:position pos:line="1093" pos:column="35"/></name> <operator pos:line="1093" pos:column="36">+<pos:position pos:line="1093" pos:column="37"/></operator> <name pos:line="1093" pos:column="38">repeat_type<pos:position pos:line="1093" pos:column="49"/></name></expr>;<pos:position pos:line="1093" pos:column="50"/></expr_stmt>
          }<pos:position pos:line="1094" pos:column="12"/></block></then>

        <comment type="block" pos:line="1096" pos:column="9">/* If the maximum is greater than 1 and limited, we have to replicate
        in a nested fashion, sticking OP_BRAZERO before each set of brackets.
        The first one has to be handled carefully because it's the original
        copy, which has to be moved up. The remainder can be handled by code
        that is common with the non-zero minimum case below. We have to
        adjust the value or repeat_max, since one less copy is required. Once
        again, we may have to adjust any OP_RECURSE calls inside the group. */</comment>

        <else pos:line="1104" pos:column="9">else
          <block pos:line="1105" pos:column="11">{
          <decl_stmt><decl><type><name pos:line="1106" pos:column="11">int<pos:position pos:line="1106" pos:column="14"/></name></type> <name pos:line="1106" pos:column="15">offset<pos:position pos:line="1106" pos:column="21"/></name></decl>;<pos:position pos:line="1106" pos:column="22"/></decl_stmt>
          <expr_stmt><expr><operator pos:line="1107" pos:column="11">*<pos:position pos:line="1107" pos:column="12"/></operator><name pos:line="1107" pos:column="12">code<pos:position pos:line="1107" pos:column="16"/></name> <operator pos:line="1107" pos:column="17">=<pos:position pos:line="1107" pos:column="18"/></operator> <name pos:line="1107" pos:column="19">OP_END<pos:position pos:line="1107" pos:column="25"/></name></expr>;<pos:position pos:line="1107" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1108" pos:column="11">adjust_recurse<pos:position pos:line="1108" pos:column="25"/></name><argument_list pos:line="1108" pos:column="25">(<argument><expr><name pos:line="1108" pos:column="26">previous<pos:position pos:line="1108" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1108" pos:column="36">2<pos:position pos:line="1108" pos:column="37"/></literal> <operator pos:line="1108" pos:column="38">+<pos:position pos:line="1108" pos:column="39"/></operator> <name pos:line="1108" pos:column="40">LINK_SIZE<pos:position pos:line="1108" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="1108" pos:column="51">utf8<pos:position pos:line="1108" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="1108" pos:column="57">cd<pos:position pos:line="1108" pos:column="59"/></name></expr></argument>)<pos:position pos:line="1108" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="1108" pos:column="61"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1109" pos:column="11">memmove<pos:position pos:line="1109" pos:column="18"/></name><argument_list pos:line="1109" pos:column="18">(<argument><expr><name pos:line="1109" pos:column="19">previous<pos:position pos:line="1109" pos:column="27"/></name> <operator pos:line="1109" pos:column="28">+<pos:position pos:line="1109" pos:column="29"/></operator> <literal type="number" pos:line="1109" pos:column="30">2<pos:position pos:line="1109" pos:column="31"/></literal> <operator pos:line="1109" pos:column="32">+<pos:position pos:line="1109" pos:column="33"/></operator> <name pos:line="1109" pos:column="34">LINK_SIZE<pos:position pos:line="1109" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1109" pos:column="45">previous<pos:position pos:line="1109" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="1109" pos:column="55">len<pos:position pos:line="1109" pos:column="58"/></name></expr></argument>)<pos:position pos:line="1109" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="1109" pos:column="60"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1110" pos:column="11">code<pos:position pos:line="1110" pos:column="15"/></name> <operator pos:line="1110" pos:column="16">+=<pos:position pos:line="1110" pos:column="18"/></operator> <literal type="number" pos:line="1110" pos:column="19">2<pos:position pos:line="1110" pos:column="20"/></literal> <operator pos:line="1110" pos:column="21">+<pos:position pos:line="1110" pos:column="22"/></operator> <name pos:line="1110" pos:column="23">LINK_SIZE<pos:position pos:line="1110" pos:column="32"/></name></expr>;<pos:position pos:line="1110" pos:column="33"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="1111" pos:column="11">*<pos:position pos:line="1111" pos:column="12"/></operator><name pos:line="1111" pos:column="12">previous<pos:position pos:line="1111" pos:column="20"/></name><operator pos:line="1111" pos:column="20">++<pos:position pos:line="1111" pos:column="22"/></operator> <operator pos:line="1111" pos:column="23">=<pos:position pos:line="1111" pos:column="24"/></operator> <name pos:line="1111" pos:column="25">OP_BRAZERO<pos:position pos:line="1111" pos:column="35"/></name> <operator pos:line="1111" pos:column="36">+<pos:position pos:line="1111" pos:column="37"/></operator> <name pos:line="1111" pos:column="38">repeat_type<pos:position pos:line="1111" pos:column="49"/></name></expr>;<pos:position pos:line="1111" pos:column="50"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="1112" pos:column="11">*<pos:position pos:line="1112" pos:column="12"/></operator><name pos:line="1112" pos:column="12">previous<pos:position pos:line="1112" pos:column="20"/></name><operator pos:line="1112" pos:column="20">++<pos:position pos:line="1112" pos:column="22"/></operator> <operator pos:line="1112" pos:column="23">=<pos:position pos:line="1112" pos:column="24"/></operator> <name pos:line="1112" pos:column="25">OP_BRA<pos:position pos:line="1112" pos:column="31"/></name></expr>;<pos:position pos:line="1112" pos:column="32"/></expr_stmt>

          <comment type="block" pos:line="1114" pos:column="11">/* We chain together the bracket offset fields that have to be
          filled in later when the ends of the brackets are reached. */</comment>

          <expr_stmt><expr><name pos:line="1117" pos:column="11">offset<pos:position pos:line="1117" pos:column="17"/></name> <operator pos:line="1117" pos:column="18">=<pos:position pos:line="1117" pos:column="19"/></operator> <ternary><condition><expr><operator pos:line="1117" pos:column="20">(<pos:position pos:line="1117" pos:column="21"/></operator><name pos:line="1117" pos:column="21">bralink<pos:position pos:line="1117" pos:column="28"/></name> <operator pos:line="1117" pos:column="29">==<pos:position pos:line="1117" pos:column="31"/></operator> <name pos:line="1117" pos:column="32">NULL<pos:position pos:line="1117" pos:column="36"/></name><operator pos:line="1117" pos:column="36">)<pos:position pos:line="1117" pos:column="37"/></operator></expr>?<pos:position pos:line="1117" pos:column="38"/></condition><then pos:line="1117" pos:column="38"> <expr><literal type="number" pos:line="1117" pos:column="39">0<pos:position pos:line="1117" pos:column="40"/></literal></expr> <pos:position pos:line="1117" pos:column="41"/></then><else pos:line="1117" pos:column="41">: <expr><name pos:line="1117" pos:column="43">previous<pos:position pos:line="1117" pos:column="51"/></name> <operator pos:line="1117" pos:column="52">-<pos:position pos:line="1117" pos:column="53"/></operator> <name pos:line="1117" pos:column="54">bralink<pos:position pos:line="1117" pos:column="61"/></name></expr></else></ternary></expr>;<pos:position pos:line="1117" pos:column="62"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1118" pos:column="11">bralink<pos:position pos:line="1118" pos:column="18"/></name> <operator pos:line="1118" pos:column="19">=<pos:position pos:line="1118" pos:column="20"/></operator> <name pos:line="1118" pos:column="21">previous<pos:position pos:line="1118" pos:column="29"/></name></expr>;<pos:position pos:line="1118" pos:column="30"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1119" pos:column="11">PUTINC<pos:position pos:line="1119" pos:column="17"/></name><argument_list pos:line="1119" pos:column="17">(<argument><expr><name pos:line="1119" pos:column="18">previous<pos:position pos:line="1119" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1119" pos:column="28">0<pos:position pos:line="1119" pos:column="29"/></literal></expr></argument>, <argument><expr><name pos:line="1119" pos:column="31">offset<pos:position pos:line="1119" pos:column="37"/></name></expr></argument>)<pos:position pos:line="1119" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1119" pos:column="39"/></expr_stmt>
          }<pos:position pos:line="1120" pos:column="12"/></block></else></if>

        <expr_stmt><expr><name pos:line="1122" pos:column="9">repeat_max<pos:position pos:line="1122" pos:column="19"/></name><operator pos:line="1122" pos:column="19">--<pos:position pos:line="1122" pos:column="21"/></operator></expr>;<pos:position pos:line="1122" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="1123" pos:column="10"/></block></then>

      <comment type="block" pos:line="1125" pos:column="7">/* If the minimum is greater than zero, replicate the group as many
      times as necessary, and adjust the maximum to the number of subsequent
      copies that we need. If we set a first char from the group, and didn't
      set a required char, copy the latter from the former. */</comment>

      <else pos:line="1130" pos:column="7">else
        <block pos:line="1131" pos:column="9">{
        <if pos:line="1132" pos:column="9">if <condition pos:line="1132" pos:column="12">(<expr><name pos:line="1132" pos:column="13">repeat_min<pos:position pos:line="1132" pos:column="23"/></name> <operator pos:line="1132" pos:column="24">&gt;<pos:position pos:line="1132" pos:column="28"/></operator> <literal type="number" pos:line="1132" pos:column="26">1<pos:position pos:line="1132" pos:column="27"/></literal></expr>)<pos:position pos:line="1132" pos:column="28"/></condition><then pos:line="1132" pos:column="28">
          <block pos:line="1133" pos:column="11">{
          <if pos:line="1134" pos:column="11">if <condition pos:line="1134" pos:column="14">(<expr><name pos:line="1134" pos:column="15">groupsetfirstbyte<pos:position pos:line="1134" pos:column="32"/></name> <operator pos:line="1134" pos:column="33">&amp;&amp;<pos:position pos:line="1134" pos:column="43"/></operator> <name pos:line="1134" pos:column="36">reqbyte<pos:position pos:line="1134" pos:column="43"/></name> <operator pos:line="1134" pos:column="44">&lt;<pos:position pos:line="1134" pos:column="48"/></operator> <literal type="number" pos:line="1134" pos:column="46">0<pos:position pos:line="1134" pos:column="47"/></literal></expr>)<pos:position pos:line="1134" pos:column="48"/></condition><then pos:line="1134" pos:column="48"> <block type="pseudo"><expr_stmt><expr><name pos:line="1134" pos:column="49">reqbyte<pos:position pos:line="1134" pos:column="56"/></name> <operator pos:line="1134" pos:column="57">=<pos:position pos:line="1134" pos:column="58"/></operator> <name pos:line="1134" pos:column="59">firstbyte<pos:position pos:line="1134" pos:column="68"/></name></expr>;<pos:position pos:line="1134" pos:column="69"/></expr_stmt></block></then></if>
          <for pos:line="1135" pos:column="11">for <control pos:line="1135" pos:column="15">(<init><expr><name pos:line="1135" pos:column="16">i<pos:position pos:line="1135" pos:column="17"/></name> <operator pos:line="1135" pos:column="18">=<pos:position pos:line="1135" pos:column="19"/></operator> <literal type="number" pos:line="1135" pos:column="20">1<pos:position pos:line="1135" pos:column="21"/></literal></expr>;<pos:position pos:line="1135" pos:column="22"/></init> <condition><expr><name pos:line="1135" pos:column="23">i<pos:position pos:line="1135" pos:column="24"/></name> <operator pos:line="1135" pos:column="25">&lt;<pos:position pos:line="1135" pos:column="29"/></operator> <name pos:line="1135" pos:column="27">repeat_min<pos:position pos:line="1135" pos:column="37"/></name></expr>;<pos:position pos:line="1135" pos:column="38"/></condition> <incr><expr><name pos:line="1135" pos:column="39">i<pos:position pos:line="1135" pos:column="40"/></name><operator pos:line="1135" pos:column="40">++<pos:position pos:line="1135" pos:column="42"/></operator></expr></incr>)<pos:position pos:line="1135" pos:column="43"/></control>
            <block pos:line="1136" pos:column="13">{
            <expr_stmt><expr><call><name pos:line="1137" pos:column="13">memcpy<pos:position pos:line="1137" pos:column="19"/></name><argument_list pos:line="1137" pos:column="19">(<argument><expr><name pos:line="1137" pos:column="20">code<pos:position pos:line="1137" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="1137" pos:column="26">previous<pos:position pos:line="1137" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="1137" pos:column="36">len<pos:position pos:line="1137" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1137" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1137" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><name pos:line="1138" pos:column="13">code<pos:position pos:line="1138" pos:column="17"/></name> <operator pos:line="1138" pos:column="18">+=<pos:position pos:line="1138" pos:column="20"/></operator> <name pos:line="1138" pos:column="21">len<pos:position pos:line="1138" pos:column="24"/></name></expr>;<pos:position pos:line="1138" pos:column="25"/></expr_stmt>
            }<pos:position pos:line="1139" pos:column="14"/></block></for>
          }<pos:position pos:line="1140" pos:column="12"/></block></then></if>
        <if pos:line="1141" pos:column="9">if <condition pos:line="1141" pos:column="12">(<expr><name pos:line="1141" pos:column="13">repeat_max<pos:position pos:line="1141" pos:column="23"/></name> <operator pos:line="1141" pos:column="24">&gt;<pos:position pos:line="1141" pos:column="28"/></operator> <literal type="number" pos:line="1141" pos:column="26">0<pos:position pos:line="1141" pos:column="27"/></literal></expr>)<pos:position pos:line="1141" pos:column="28"/></condition><then pos:line="1141" pos:column="28"> <block type="pseudo"><expr_stmt><expr><name pos:line="1141" pos:column="29">repeat_max<pos:position pos:line="1141" pos:column="39"/></name> <operator pos:line="1141" pos:column="40">-=<pos:position pos:line="1141" pos:column="42"/></operator> <name pos:line="1141" pos:column="43">repeat_min<pos:position pos:line="1141" pos:column="53"/></name></expr>;<pos:position pos:line="1141" pos:column="54"/></expr_stmt></block></then></if>
        }<pos:position pos:line="1142" pos:column="10"/></block></else></if>

      <comment type="block" pos:line="1144" pos:column="7">/* This code is common to both the zero and non-zero minimum cases. If
      the maximum is limited, it replicates the group in a nested fashion,
      remembering the bracket starts on a stack. In the case of a zero minimum,
      the first one was set up above. In all cases the repeat_max now specifies
      the number of additional copies needed. */</comment>

      <if pos:line="1150" pos:column="7">if <condition pos:line="1150" pos:column="10">(<expr><name pos:line="1150" pos:column="11">repeat_max<pos:position pos:line="1150" pos:column="21"/></name> <operator pos:line="1150" pos:column="22">&gt;=<pos:position pos:line="1150" pos:column="27"/></operator> <literal type="number" pos:line="1150" pos:column="25">0<pos:position pos:line="1150" pos:column="26"/></literal></expr>)<pos:position pos:line="1150" pos:column="27"/></condition><then pos:line="1150" pos:column="27">
        <block pos:line="1151" pos:column="9">{
        <for pos:line="1152" pos:column="9">for <control pos:line="1152" pos:column="13">(<init><expr><name pos:line="1152" pos:column="14">i<pos:position pos:line="1152" pos:column="15"/></name> <operator pos:line="1152" pos:column="16">=<pos:position pos:line="1152" pos:column="17"/></operator> <name pos:line="1152" pos:column="18">repeat_max<pos:position pos:line="1152" pos:column="28"/></name> <operator pos:line="1152" pos:column="29">-<pos:position pos:line="1152" pos:column="30"/></operator> <literal type="number" pos:line="1152" pos:column="31">1<pos:position pos:line="1152" pos:column="32"/></literal></expr>;<pos:position pos:line="1152" pos:column="33"/></init> <condition><expr><name pos:line="1152" pos:column="34">i<pos:position pos:line="1152" pos:column="35"/></name> <operator pos:line="1152" pos:column="36">&gt;=<pos:position pos:line="1152" pos:column="41"/></operator> <literal type="number" pos:line="1152" pos:column="39">0<pos:position pos:line="1152" pos:column="40"/></literal></expr>;<pos:position pos:line="1152" pos:column="41"/></condition> <incr><expr><name pos:line="1152" pos:column="42">i<pos:position pos:line="1152" pos:column="43"/></name><operator pos:line="1152" pos:column="43">--<pos:position pos:line="1152" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="1152" pos:column="46"/></control>
          <block pos:line="1153" pos:column="11">{
          <expr_stmt><expr><operator pos:line="1154" pos:column="11">*<pos:position pos:line="1154" pos:column="12"/></operator><name pos:line="1154" pos:column="12">code<pos:position pos:line="1154" pos:column="16"/></name><operator pos:line="1154" pos:column="16">++<pos:position pos:line="1154" pos:column="18"/></operator> <operator pos:line="1154" pos:column="19">=<pos:position pos:line="1154" pos:column="20"/></operator> <name pos:line="1154" pos:column="21">OP_BRAZERO<pos:position pos:line="1154" pos:column="31"/></name> <operator pos:line="1154" pos:column="32">+<pos:position pos:line="1154" pos:column="33"/></operator> <name pos:line="1154" pos:column="34">repeat_type<pos:position pos:line="1154" pos:column="45"/></name></expr>;<pos:position pos:line="1154" pos:column="46"/></expr_stmt>

          <comment type="block" pos:line="1156" pos:column="11">/* All but the final copy start a new nesting, maintaining the
          chain of brackets outstanding. */</comment>

          <if pos:line="1159" pos:column="11">if <condition pos:line="1159" pos:column="14">(<expr><name pos:line="1159" pos:column="15">i<pos:position pos:line="1159" pos:column="16"/></name> <operator pos:line="1159" pos:column="17">!=<pos:position pos:line="1159" pos:column="19"/></operator> <literal type="number" pos:line="1159" pos:column="20">0<pos:position pos:line="1159" pos:column="21"/></literal></expr>)<pos:position pos:line="1159" pos:column="22"/></condition><then pos:line="1159" pos:column="22">
            <block pos:line="1160" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="1161" pos:column="13">int<pos:position pos:line="1161" pos:column="16"/></name></type> <name pos:line="1161" pos:column="17">offset<pos:position pos:line="1161" pos:column="23"/></name></decl>;<pos:position pos:line="1161" pos:column="24"/></decl_stmt>
            <expr_stmt><expr><operator pos:line="1162" pos:column="13">*<pos:position pos:line="1162" pos:column="14"/></operator><name pos:line="1162" pos:column="14">code<pos:position pos:line="1162" pos:column="18"/></name><operator pos:line="1162" pos:column="18">++<pos:position pos:line="1162" pos:column="20"/></operator> <operator pos:line="1162" pos:column="21">=<pos:position pos:line="1162" pos:column="22"/></operator> <name pos:line="1162" pos:column="23">OP_BRA<pos:position pos:line="1162" pos:column="29"/></name></expr>;<pos:position pos:line="1162" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name pos:line="1163" pos:column="13">offset<pos:position pos:line="1163" pos:column="19"/></name> <operator pos:line="1163" pos:column="20">=<pos:position pos:line="1163" pos:column="21"/></operator> <ternary><condition><expr><operator pos:line="1163" pos:column="22">(<pos:position pos:line="1163" pos:column="23"/></operator><name pos:line="1163" pos:column="23">bralink<pos:position pos:line="1163" pos:column="30"/></name> <operator pos:line="1163" pos:column="31">==<pos:position pos:line="1163" pos:column="33"/></operator> <name pos:line="1163" pos:column="34">NULL<pos:position pos:line="1163" pos:column="38"/></name><operator pos:line="1163" pos:column="38">)<pos:position pos:line="1163" pos:column="39"/></operator></expr>?<pos:position pos:line="1163" pos:column="40"/></condition><then pos:line="1163" pos:column="40"> <expr><literal type="number" pos:line="1163" pos:column="41">0<pos:position pos:line="1163" pos:column="42"/></literal></expr> <pos:position pos:line="1163" pos:column="43"/></then><else pos:line="1163" pos:column="43">: <expr><name pos:line="1163" pos:column="45">code<pos:position pos:line="1163" pos:column="49"/></name> <operator pos:line="1163" pos:column="50">-<pos:position pos:line="1163" pos:column="51"/></operator> <name pos:line="1163" pos:column="52">bralink<pos:position pos:line="1163" pos:column="59"/></name></expr></else></ternary></expr>;<pos:position pos:line="1163" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><name pos:line="1164" pos:column="13">bralink<pos:position pos:line="1164" pos:column="20"/></name> <operator pos:line="1164" pos:column="21">=<pos:position pos:line="1164" pos:column="22"/></operator> <name pos:line="1164" pos:column="23">code<pos:position pos:line="1164" pos:column="27"/></name></expr>;<pos:position pos:line="1164" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="1165" pos:column="13">PUTINC<pos:position pos:line="1165" pos:column="19"/></name><argument_list pos:line="1165" pos:column="19">(<argument><expr><name pos:line="1165" pos:column="20">code<pos:position pos:line="1165" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1165" pos:column="26">0<pos:position pos:line="1165" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="1165" pos:column="29">offset<pos:position pos:line="1165" pos:column="35"/></name></expr></argument>)<pos:position pos:line="1165" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1165" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="1166" pos:column="14"/></block></then></if>

          <expr_stmt><expr><call><name pos:line="1168" pos:column="11">memcpy<pos:position pos:line="1168" pos:column="17"/></name><argument_list pos:line="1168" pos:column="17">(<argument><expr><name pos:line="1168" pos:column="18">code<pos:position pos:line="1168" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="1168" pos:column="24">previous<pos:position pos:line="1168" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="1168" pos:column="34">len<pos:position pos:line="1168" pos:column="37"/></name></expr></argument>)<pos:position pos:line="1168" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1168" pos:column="39"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1169" pos:column="11">code<pos:position pos:line="1169" pos:column="15"/></name> <operator pos:line="1169" pos:column="16">+=<pos:position pos:line="1169" pos:column="18"/></operator> <name pos:line="1169" pos:column="19">len<pos:position pos:line="1169" pos:column="22"/></name></expr>;<pos:position pos:line="1169" pos:column="23"/></expr_stmt>
          }<pos:position pos:line="1170" pos:column="12"/></block></for>

        <comment type="block" pos:line="1172" pos:column="9">/* Now chain through the pending brackets, and fill in their length
        fields (which are holding the chain links pro tem). */</comment>

        <while pos:line="1175" pos:column="9">while <condition pos:line="1175" pos:column="15">(<expr><name pos:line="1175" pos:column="16">bralink<pos:position pos:line="1175" pos:column="23"/></name> <operator pos:line="1175" pos:column="24">!=<pos:position pos:line="1175" pos:column="26"/></operator> <name pos:line="1175" pos:column="27">NULL<pos:position pos:line="1175" pos:column="31"/></name></expr>)<pos:position pos:line="1175" pos:column="32"/></condition>
          <block pos:line="1176" pos:column="11">{
          <decl_stmt><decl><type><name pos:line="1177" pos:column="11">int<pos:position pos:line="1177" pos:column="14"/></name></type> <name pos:line="1177" pos:column="15">oldlinkoffset<pos:position pos:line="1177" pos:column="28"/></name></decl>;<pos:position pos:line="1177" pos:column="29"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="1178" pos:column="11">int<pos:position pos:line="1178" pos:column="14"/></name></type> <name pos:line="1178" pos:column="15">offset<pos:position pos:line="1178" pos:column="21"/></name> <init pos:line="1178" pos:column="22">= <expr><name pos:line="1178" pos:column="24">code<pos:position pos:line="1178" pos:column="28"/></name> <operator pos:line="1178" pos:column="29">-<pos:position pos:line="1178" pos:column="30"/></operator> <name pos:line="1178" pos:column="31">bralink<pos:position pos:line="1178" pos:column="38"/></name> <operator pos:line="1178" pos:column="39">+<pos:position pos:line="1178" pos:column="40"/></operator> <literal type="number" pos:line="1178" pos:column="41">1<pos:position pos:line="1178" pos:column="42"/></literal></expr></init></decl>;<pos:position pos:line="1178" pos:column="43"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="1179" pos:column="11">uschar<pos:position pos:line="1179" pos:column="17"/></name> <modifier pos:line="1179" pos:column="18">*<pos:position pos:line="1179" pos:column="19"/></modifier></type><name pos:line="1179" pos:column="19">bra<pos:position pos:line="1179" pos:column="22"/></name> <init pos:line="1179" pos:column="23">= <expr><name pos:line="1179" pos:column="25">code<pos:position pos:line="1179" pos:column="29"/></name> <operator pos:line="1179" pos:column="30">-<pos:position pos:line="1179" pos:column="31"/></operator> <name pos:line="1179" pos:column="32">offset<pos:position pos:line="1179" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="1179" pos:column="39"/></decl_stmt>
          <expr_stmt><expr><name pos:line="1180" pos:column="11">oldlinkoffset<pos:position pos:line="1180" pos:column="24"/></name> <operator pos:line="1180" pos:column="25">=<pos:position pos:line="1180" pos:column="26"/></operator> <call><name pos:line="1180" pos:column="27">GET<pos:position pos:line="1180" pos:column="30"/></name><argument_list pos:line="1180" pos:column="30">(<argument><expr><name pos:line="1180" pos:column="31">bra<pos:position pos:line="1180" pos:column="34"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1180" pos:column="36">1<pos:position pos:line="1180" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="1180" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="1180" pos:column="39"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1181" pos:column="11">bralink<pos:position pos:line="1181" pos:column="18"/></name> <operator pos:line="1181" pos:column="19">=<pos:position pos:line="1181" pos:column="20"/></operator> <ternary><condition><expr><operator pos:line="1181" pos:column="21">(<pos:position pos:line="1181" pos:column="22"/></operator><name pos:line="1181" pos:column="22">oldlinkoffset<pos:position pos:line="1181" pos:column="35"/></name> <operator pos:line="1181" pos:column="36">==<pos:position pos:line="1181" pos:column="38"/></operator> <literal type="number" pos:line="1181" pos:column="39">0<pos:position pos:line="1181" pos:column="40"/></literal><operator pos:line="1181" pos:column="40">)<pos:position pos:line="1181" pos:column="41"/></operator></expr>?<pos:position pos:line="1181" pos:column="42"/></condition><then pos:line="1181" pos:column="42"> <expr><name pos:line="1181" pos:column="43">NULL<pos:position pos:line="1181" pos:column="47"/></name></expr> <pos:position pos:line="1181" pos:column="48"/></then><else pos:line="1181" pos:column="48">: <expr><name pos:line="1181" pos:column="50">bralink<pos:position pos:line="1181" pos:column="57"/></name> <operator pos:line="1181" pos:column="58">-<pos:position pos:line="1181" pos:column="59"/></operator> <name pos:line="1181" pos:column="60">oldlinkoffset<pos:position pos:line="1181" pos:column="73"/></name></expr></else></ternary></expr>;<pos:position pos:line="1181" pos:column="74"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="1182" pos:column="11">*<pos:position pos:line="1182" pos:column="12"/></operator><name pos:line="1182" pos:column="12">code<pos:position pos:line="1182" pos:column="16"/></name><operator pos:line="1182" pos:column="16">++<pos:position pos:line="1182" pos:column="18"/></operator> <operator pos:line="1182" pos:column="19">=<pos:position pos:line="1182" pos:column="20"/></operator> <name pos:line="1182" pos:column="21">OP_KET<pos:position pos:line="1182" pos:column="27"/></name></expr>;<pos:position pos:line="1182" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1183" pos:column="11">PUTINC<pos:position pos:line="1183" pos:column="17"/></name><argument_list pos:line="1183" pos:column="17">(<argument><expr><name pos:line="1183" pos:column="18">code<pos:position pos:line="1183" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1183" pos:column="24">0<pos:position pos:line="1183" pos:column="25"/></literal></expr></argument>, <argument><expr><name pos:line="1183" pos:column="27">offset<pos:position pos:line="1183" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1183" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1183" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1184" pos:column="11">PUT<pos:position pos:line="1184" pos:column="14"/></name><argument_list pos:line="1184" pos:column="14">(<argument><expr><name pos:line="1184" pos:column="15">bra<pos:position pos:line="1184" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1184" pos:column="20">1<pos:position pos:line="1184" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="1184" pos:column="23">offset<pos:position pos:line="1184" pos:column="29"/></name></expr></argument>)<pos:position pos:line="1184" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1184" pos:column="31"/></expr_stmt>
          }<pos:position pos:line="1185" pos:column="12"/></block></while>
        }<pos:position pos:line="1186" pos:column="10"/></block></then>

      <comment type="block" pos:line="1188" pos:column="7">/* If the maximum is unlimited, set a repeater in the final copy. We
      can't just offset backwards from the current code point, because we
      don't know if there's been an options resetting after the ket. The
      correct offset was computed above. */</comment>

      <else pos:line="1193" pos:column="7">else <block type="pseudo"><expr_stmt><expr><name><name pos:line="1193" pos:column="12">code<pos:position pos:line="1193" pos:column="16"/></name><index pos:line="1193" pos:column="16">[<expr><operator pos:line="1193" pos:column="17">-<pos:position pos:line="1193" pos:column="18"/></operator><name pos:line="1193" pos:column="18">ketoffset<pos:position pos:line="1193" pos:column="27"/></name></expr>]<pos:position pos:line="1193" pos:column="28"/></index></name> <operator pos:line="1193" pos:column="29">=<pos:position pos:line="1193" pos:column="30"/></operator> <name pos:line="1193" pos:column="31">OP_KETRMAX<pos:position pos:line="1193" pos:column="41"/></name> <operator pos:line="1193" pos:column="42">+<pos:position pos:line="1193" pos:column="43"/></operator> <name pos:line="1193" pos:column="44">repeat_type<pos:position pos:line="1193" pos:column="55"/></name></expr>;<pos:position pos:line="1193" pos:column="56"/></expr_stmt></block></else></if>
      }<pos:position pos:line="1194" pos:column="8"/></block></then></if></elseif>

    <comment type="block" pos:line="1196" pos:column="5">/* Else there's some kind of shambles */</comment>

    <else pos:line="1198" pos:column="5">else
      <block pos:line="1199" pos:column="7">{
      <expr_stmt><expr><operator pos:line="1200" pos:column="7">*<pos:position pos:line="1200" pos:column="8"/></operator><name pos:line="1200" pos:column="8">errorptr<pos:position pos:line="1200" pos:column="16"/></name> <operator pos:line="1200" pos:column="17">=<pos:position pos:line="1200" pos:column="18"/></operator> <name pos:line="1200" pos:column="19">ERR11<pos:position pos:line="1200" pos:column="24"/></name></expr>;<pos:position pos:line="1200" pos:column="25"/></expr_stmt>
      <goto pos:line="1201" pos:column="7">goto <name pos:line="1201" pos:column="12">FAILED<pos:position pos:line="1201" pos:column="18"/></name>;<pos:position pos:line="1201" pos:column="19"/></goto>
      }<pos:position pos:line="1202" pos:column="8"/></block></else></if>

    <comment type="block" pos:line="1204" pos:column="5">/* If the character following a repeat is '+', we wrap the entire repeated
    item inside OP_ONCE brackets. This is just syntactic sugar, taken from
    Sun's Java package. The repeated item starts at tempcode, not at previous,
    which might be the first part of a string whose (former) last char we
    repeated. However, we don't support '+' after a greediness '?'. */</comment>

    <if pos:line="1210" pos:column="5">if <condition pos:line="1210" pos:column="8">(<expr><name pos:line="1210" pos:column="9">possessive_quantifier<pos:position pos:line="1210" pos:column="30"/></name></expr>)<pos:position pos:line="1210" pos:column="31"/></condition><then pos:line="1210" pos:column="31">
      <block pos:line="1211" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="1212" pos:column="7">int<pos:position pos:line="1212" pos:column="10"/></name></type> <name pos:line="1212" pos:column="11">len<pos:position pos:line="1212" pos:column="14"/></name> <init pos:line="1212" pos:column="15">= <expr><name pos:line="1212" pos:column="17">code<pos:position pos:line="1212" pos:column="21"/></name> <operator pos:line="1212" pos:column="22">-<pos:position pos:line="1212" pos:column="23"/></operator> <name pos:line="1212" pos:column="24">tempcode<pos:position pos:line="1212" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="1212" pos:column="33"/></decl_stmt>
      <expr_stmt><expr><call><name pos:line="1213" pos:column="7">memmove<pos:position pos:line="1213" pos:column="14"/></name><argument_list pos:line="1213" pos:column="14">(<argument><expr><name pos:line="1213" pos:column="15">tempcode<pos:position pos:line="1213" pos:column="23"/></name> <operator pos:line="1213" pos:column="24">+<pos:position pos:line="1213" pos:column="25"/></operator> <literal type="number" pos:line="1213" pos:column="26">1<pos:position pos:line="1213" pos:column="27"/></literal><operator pos:line="1213" pos:column="27">+<pos:position pos:line="1213" pos:column="28"/></operator><name pos:line="1213" pos:column="28">LINK_SIZE<pos:position pos:line="1213" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="1213" pos:column="39">tempcode<pos:position pos:line="1213" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1213" pos:column="49">len<pos:position pos:line="1213" pos:column="52"/></name></expr></argument>)<pos:position pos:line="1213" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1213" pos:column="54"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1214" pos:column="7">code<pos:position pos:line="1214" pos:column="11"/></name> <operator pos:line="1214" pos:column="12">+=<pos:position pos:line="1214" pos:column="14"/></operator> <literal type="number" pos:line="1214" pos:column="15">1<pos:position pos:line="1214" pos:column="16"/></literal> <operator pos:line="1214" pos:column="17">+<pos:position pos:line="1214" pos:column="18"/></operator> <name pos:line="1214" pos:column="19">LINK_SIZE<pos:position pos:line="1214" pos:column="28"/></name></expr>;<pos:position pos:line="1214" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1215" pos:column="7">len<pos:position pos:line="1215" pos:column="10"/></name> <operator pos:line="1215" pos:column="11">+=<pos:position pos:line="1215" pos:column="13"/></operator> <literal type="number" pos:line="1215" pos:column="14">1<pos:position pos:line="1215" pos:column="15"/></literal> <operator pos:line="1215" pos:column="16">+<pos:position pos:line="1215" pos:column="17"/></operator> <name pos:line="1215" pos:column="18">LINK_SIZE<pos:position pos:line="1215" pos:column="27"/></name></expr>;<pos:position pos:line="1215" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><name><name pos:line="1216" pos:column="7">tempcode<pos:position pos:line="1216" pos:column="15"/></name><index pos:line="1216" pos:column="15">[<expr><literal type="number" pos:line="1216" pos:column="16">0<pos:position pos:line="1216" pos:column="17"/></literal></expr>]<pos:position pos:line="1216" pos:column="18"/></index></name> <operator pos:line="1216" pos:column="19">=<pos:position pos:line="1216" pos:column="20"/></operator> <name pos:line="1216" pos:column="21">OP_ONCE<pos:position pos:line="1216" pos:column="28"/></name></expr>;<pos:position pos:line="1216" pos:column="29"/></expr_stmt>
      <expr_stmt><expr><operator pos:line="1217" pos:column="7">*<pos:position pos:line="1217" pos:column="8"/></operator><name pos:line="1217" pos:column="8">code<pos:position pos:line="1217" pos:column="12"/></name><operator pos:line="1217" pos:column="12">++<pos:position pos:line="1217" pos:column="14"/></operator> <operator pos:line="1217" pos:column="15">=<pos:position pos:line="1217" pos:column="16"/></operator> <name pos:line="1217" pos:column="17">OP_KET<pos:position pos:line="1217" pos:column="23"/></name></expr>;<pos:position pos:line="1217" pos:column="24"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1218" pos:column="7">PUTINC<pos:position pos:line="1218" pos:column="13"/></name><argument_list pos:line="1218" pos:column="13">(<argument><expr><name pos:line="1218" pos:column="14">code<pos:position pos:line="1218" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1218" pos:column="20">0<pos:position pos:line="1218" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="1218" pos:column="23">len<pos:position pos:line="1218" pos:column="26"/></name></expr></argument>)<pos:position pos:line="1218" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1218" pos:column="28"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="1219" pos:column="7">PUT<pos:position pos:line="1219" pos:column="10"/></name><argument_list pos:line="1219" pos:column="10">(<argument><expr><name pos:line="1219" pos:column="11">tempcode<pos:position pos:line="1219" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1219" pos:column="21">1<pos:position pos:line="1219" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="1219" pos:column="24">len<pos:position pos:line="1219" pos:column="27"/></name></expr></argument>)<pos:position pos:line="1219" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="1219" pos:column="29"/></expr_stmt>
      }<pos:position pos:line="1220" pos:column="8"/></block></then></if>

    <comment type="block" pos:line="1222" pos:column="5">/* In all case we no longer have a previous item. We also set the
    "follows varying string" flag for subsequently encountered reqbytes if
    it isn't already set and we have just passed a varying length item. */</comment>

    <label><name pos:line="1226" pos:column="5">END_REPEAT<pos:position pos:line="1226" pos:column="15"/></name>:<pos:position pos:line="1226" pos:column="16"/></label>
    <expr_stmt><expr><name pos:line="1227" pos:column="5">previous<pos:position pos:line="1227" pos:column="13"/></name> <operator pos:line="1227" pos:column="14">=<pos:position pos:line="1227" pos:column="15"/></operator> <name pos:line="1227" pos:column="16">NULL<pos:position pos:line="1227" pos:column="20"/></name></expr>;<pos:position pos:line="1227" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="1228" pos:column="5">cd<pos:position pos:line="1228" pos:column="7"/></name><operator pos:line="1228" pos:column="7">-&gt;<pos:position pos:line="1228" pos:column="12"/></operator><name pos:line="1228" pos:column="9">req_varyopt<pos:position pos:line="1228" pos:column="20"/></name></name> <operator pos:line="1228" pos:column="21">|=<pos:position pos:line="1228" pos:column="23"/></operator> <name pos:line="1228" pos:column="24">reqvary<pos:position pos:line="1228" pos:column="31"/></name></expr>;<pos:position pos:line="1228" pos:column="32"/></expr_stmt>
    <break pos:line="1229" pos:column="5">break;<pos:position pos:line="1229" pos:column="11"/></break>


    <comment type="block" pos:line="1232" pos:column="5">/* Start of nested bracket sub-expression, or comment or lookahead or
    lookbehind or option setting or condition. First deal with special things
    that can come after a bracket; all are introduced by ?, and the appearance
    of any of them means that this is not a referencing group. They were
    checked for validity in the first pass over the string, so we don't have to
    check for syntax errors here.  */</comment>

    <case pos:line="1239" pos:column="5">case <expr><literal type="char" pos:line="1239" pos:column="10">'('<pos:position pos:line="1239" pos:column="13"/></literal></expr>:<pos:position pos:line="1239" pos:column="14"/></case>
    <expr_stmt><expr><name pos:line="1240" pos:column="5">newoptions<pos:position pos:line="1240" pos:column="15"/></name> <operator pos:line="1240" pos:column="16">=<pos:position pos:line="1240" pos:column="17"/></operator> <name pos:line="1240" pos:column="18">options<pos:position pos:line="1240" pos:column="25"/></name></expr>;<pos:position pos:line="1240" pos:column="26"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1241" pos:column="5">skipbytes<pos:position pos:line="1241" pos:column="14"/></name> <operator pos:line="1241" pos:column="15">=<pos:position pos:line="1241" pos:column="16"/></operator> <literal type="number" pos:line="1241" pos:column="17">0<pos:position pos:line="1241" pos:column="18"/></literal></expr>;<pos:position pos:line="1241" pos:column="19"/></expr_stmt>

    <if pos:line="1243" pos:column="5">if <condition pos:line="1243" pos:column="8">(<expr><operator pos:line="1243" pos:column="9">*<pos:position pos:line="1243" pos:column="10"/></operator><operator pos:line="1243" pos:column="10">(<pos:position pos:line="1243" pos:column="11"/></operator><operator pos:line="1243" pos:column="11">++<pos:position pos:line="1243" pos:column="13"/></operator><name pos:line="1243" pos:column="13">ptr<pos:position pos:line="1243" pos:column="16"/></name><operator pos:line="1243" pos:column="16">)<pos:position pos:line="1243" pos:column="17"/></operator> <operator pos:line="1243" pos:column="18">==<pos:position pos:line="1243" pos:column="20"/></operator> <literal type="char" pos:line="1243" pos:column="21">'?'<pos:position pos:line="1243" pos:column="24"/></literal></expr>)<pos:position pos:line="1243" pos:column="25"/></condition><then pos:line="1243" pos:column="25">
      <block pos:line="1244" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="1245" pos:column="7">int<pos:position pos:line="1245" pos:column="10"/></name></type> <name pos:line="1245" pos:column="11">set<pos:position pos:line="1245" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="1245" pos:column="16">unset<pos:position pos:line="1245" pos:column="21"/></name></decl>;<pos:position pos:line="1245" pos:column="22"/></decl_stmt>
      <decl_stmt><decl><type><name pos:line="1246" pos:column="7">int<pos:position pos:line="1246" pos:column="10"/></name> <modifier pos:line="1246" pos:column="11">*<pos:position pos:line="1246" pos:column="12"/></modifier></type><name pos:line="1246" pos:column="12">optset<pos:position pos:line="1246" pos:column="18"/></name></decl>;<pos:position pos:line="1246" pos:column="19"/></decl_stmt>

      <switch pos:line="1248" pos:column="7">switch <condition pos:line="1248" pos:column="14">(<expr><operator pos:line="1248" pos:column="15">*<pos:position pos:line="1248" pos:column="16"/></operator><operator pos:line="1248" pos:column="16">(<pos:position pos:line="1248" pos:column="17"/></operator><operator pos:line="1248" pos:column="17">++<pos:position pos:line="1248" pos:column="19"/></operator><name pos:line="1248" pos:column="19">ptr<pos:position pos:line="1248" pos:column="22"/></name><operator pos:line="1248" pos:column="22">)<pos:position pos:line="1248" pos:column="23"/></operator></expr>)<pos:position pos:line="1248" pos:column="24"/></condition>
        <block pos:line="1249" pos:column="9">{
        <case pos:line="1250" pos:column="9">case <expr><literal type="char" pos:line="1250" pos:column="14">'#'<pos:position pos:line="1250" pos:column="17"/></literal></expr>:<pos:position pos:line="1250" pos:column="18"/></case>                 <comment type="block" pos:line="1250" pos:column="35">/* Comment; skip to ket */</comment>
        <expr_stmt><expr><name pos:line="1251" pos:column="9">ptr<pos:position pos:line="1251" pos:column="12"/></name><operator pos:line="1251" pos:column="12">++<pos:position pos:line="1251" pos:column="14"/></operator></expr>;<pos:position pos:line="1251" pos:column="15"/></expr_stmt>
        <while pos:line="1252" pos:column="9">while <condition pos:line="1252" pos:column="15">(<expr><operator pos:line="1252" pos:column="16">*<pos:position pos:line="1252" pos:column="17"/></operator><name pos:line="1252" pos:column="17">ptr<pos:position pos:line="1252" pos:column="20"/></name> <operator pos:line="1252" pos:column="21">!=<pos:position pos:line="1252" pos:column="23"/></operator> <literal type="char" pos:line="1252" pos:column="24">')'<pos:position pos:line="1252" pos:column="27"/></literal></expr>)<pos:position pos:line="1252" pos:column="28"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="1252" pos:column="29">ptr<pos:position pos:line="1252" pos:column="32"/></name><operator pos:line="1252" pos:column="32">++<pos:position pos:line="1252" pos:column="34"/></operator></expr>;<pos:position pos:line="1252" pos:column="35"/></expr_stmt></block></while>
        <continue pos:line="1253" pos:column="9">continue;<pos:position pos:line="1253" pos:column="18"/></continue>

        <case pos:line="1255" pos:column="9">case <expr><literal type="char" pos:line="1255" pos:column="14">':'<pos:position pos:line="1255" pos:column="17"/></literal></expr>:<pos:position pos:line="1255" pos:column="18"/></case>                 <comment type="block" pos:line="1255" pos:column="35">/* Non-extracting bracket */</comment>
        <expr_stmt><expr><name pos:line="1256" pos:column="9">bravalue<pos:position pos:line="1256" pos:column="17"/></name> <operator pos:line="1256" pos:column="18">=<pos:position pos:line="1256" pos:column="19"/></operator> <name pos:line="1256" pos:column="20">OP_BRA<pos:position pos:line="1256" pos:column="26"/></name></expr>;<pos:position pos:line="1256" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1257" pos:column="9">ptr<pos:position pos:line="1257" pos:column="12"/></name><operator pos:line="1257" pos:column="12">++<pos:position pos:line="1257" pos:column="14"/></operator></expr>;<pos:position pos:line="1257" pos:column="15"/></expr_stmt>
        <break pos:line="1258" pos:column="9">break;<pos:position pos:line="1258" pos:column="15"/></break>

        <case pos:line="1260" pos:column="9">case <expr><literal type="char" pos:line="1260" pos:column="14">'('<pos:position pos:line="1260" pos:column="17"/></literal></expr>:<pos:position pos:line="1260" pos:column="18"/></case>
        <expr_stmt><expr><name pos:line="1261" pos:column="9">bravalue<pos:position pos:line="1261" pos:column="17"/></name> <operator pos:line="1261" pos:column="18">=<pos:position pos:line="1261" pos:column="19"/></operator> <name pos:line="1261" pos:column="20">OP_COND<pos:position pos:line="1261" pos:column="27"/></name></expr>;<pos:position pos:line="1261" pos:column="28"/></expr_stmt>       <comment type="block" pos:line="1261" pos:column="35">/* Conditional group */</comment>

        <comment type="block" pos:line="1263" pos:column="9">/* Condition to test for recursion */</comment>

        <if pos:line="1265" pos:column="9">if <condition pos:line="1265" pos:column="12">(<expr><name><name pos:line="1265" pos:column="13">ptr<pos:position pos:line="1265" pos:column="16"/></name><index pos:line="1265" pos:column="16">[<expr><literal type="number" pos:line="1265" pos:column="17">1<pos:position pos:line="1265" pos:column="18"/></literal></expr>]<pos:position pos:line="1265" pos:column="19"/></index></name> <operator pos:line="1265" pos:column="20">==<pos:position pos:line="1265" pos:column="22"/></operator> <literal type="char" pos:line="1265" pos:column="23">'R'<pos:position pos:line="1265" pos:column="26"/></literal></expr>)<pos:position pos:line="1265" pos:column="27"/></condition><then pos:line="1265" pos:column="27">
          <block pos:line="1266" pos:column="11">{
          <expr_stmt><expr><name><name pos:line="1267" pos:column="11">code<pos:position pos:line="1267" pos:column="15"/></name><index pos:line="1267" pos:column="15">[<expr><literal type="number" pos:line="1267" pos:column="16">1<pos:position pos:line="1267" pos:column="17"/></literal><operator pos:line="1267" pos:column="17">+<pos:position pos:line="1267" pos:column="18"/></operator><name pos:line="1267" pos:column="18">LINK_SIZE<pos:position pos:line="1267" pos:column="27"/></name></expr>]<pos:position pos:line="1267" pos:column="28"/></index></name> <operator pos:line="1267" pos:column="29">=<pos:position pos:line="1267" pos:column="30"/></operator> <name pos:line="1267" pos:column="31">OP_CREF<pos:position pos:line="1267" pos:column="38"/></name></expr>;<pos:position pos:line="1267" pos:column="39"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1268" pos:column="11">PUT2<pos:position pos:line="1268" pos:column="15"/></name><argument_list pos:line="1268" pos:column="15">(<argument><expr><name pos:line="1268" pos:column="16">code<pos:position pos:line="1268" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1268" pos:column="22">2<pos:position pos:line="1268" pos:column="23"/></literal><operator pos:line="1268" pos:column="23">+<pos:position pos:line="1268" pos:column="24"/></operator><name pos:line="1268" pos:column="24">LINK_SIZE<pos:position pos:line="1268" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1268" pos:column="35">CREF_RECURSE<pos:position pos:line="1268" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1268" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1268" pos:column="49"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1269" pos:column="11">skipbytes<pos:position pos:line="1269" pos:column="20"/></name> <operator pos:line="1269" pos:column="21">=<pos:position pos:line="1269" pos:column="22"/></operator> <literal type="number" pos:line="1269" pos:column="23">3<pos:position pos:line="1269" pos:column="24"/></literal></expr>;<pos:position pos:line="1269" pos:column="25"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1270" pos:column="11">ptr<pos:position pos:line="1270" pos:column="14"/></name> <operator pos:line="1270" pos:column="15">+=<pos:position pos:line="1270" pos:column="17"/></operator> <literal type="number" pos:line="1270" pos:column="18">3<pos:position pos:line="1270" pos:column="19"/></literal></expr>;<pos:position pos:line="1270" pos:column="20"/></expr_stmt>
          }<pos:position pos:line="1271" pos:column="12"/></block></then>

        <comment type="block" pos:line="1273" pos:column="9">/* Condition to test for a numbered subpattern match. We know that
        if a digit follows ( then there will just be digits until ) because
        the syntax was checked in the first pass. */</comment>

        <elseif pos:line="1277" pos:column="9">else <if pos:line="1277" pos:column="14">if <condition pos:line="1277" pos:column="17">(<expr><operator pos:line="1277" pos:column="18">(<pos:position pos:line="1277" pos:column="19"/></operator><name><name pos:line="1277" pos:column="19">digitab<pos:position pos:line="1277" pos:column="26"/></name><index pos:line="1277" pos:column="26">[<expr><name><name pos:line="1277" pos:column="27">ptr<pos:position pos:line="1277" pos:column="30"/></name><index pos:line="1277" pos:column="30">[<expr><literal type="number" pos:line="1277" pos:column="31">1<pos:position pos:line="1277" pos:column="32"/></literal></expr>]<pos:position pos:line="1277" pos:column="33"/></index></name></expr>]<pos:position pos:line="1277" pos:column="34"/></index></name> <operator pos:line="1277" pos:column="35">&amp;&amp;<pos:position pos:line="1277" pos:column="45"/></operator> <name pos:line="1277" pos:column="38">ctype_digit<pos:position pos:line="1277" pos:column="49"/></name><operator pos:line="1277" pos:column="49">)<pos:position pos:line="1277" pos:column="50"/></operator> <operator pos:line="1277" pos:column="51">!=<pos:position pos:line="1277" pos:column="53"/></operator> <literal type="number" pos:line="1277" pos:column="54">0<pos:position pos:line="1277" pos:column="55"/></literal></expr>)<pos:position pos:line="1277" pos:column="56"/></condition><then pos:line="1277" pos:column="56">
          <block pos:line="1278" pos:column="11">{
          <decl_stmt><decl><type><name pos:line="1279" pos:column="11">int<pos:position pos:line="1279" pos:column="14"/></name></type> <name pos:line="1279" pos:column="15">condref<pos:position pos:line="1279" pos:column="22"/></name></decl>;<pos:position pos:line="1279" pos:column="23"/></decl_stmt>                 <comment type="block" pos:line="1279" pos:column="40">/* Don't amalgamate; some compilers */</comment>
          <expr_stmt><expr><name pos:line="1280" pos:column="11">condref<pos:position pos:line="1280" pos:column="18"/></name> <operator pos:line="1280" pos:column="19">=<pos:position pos:line="1280" pos:column="20"/></operator> <operator pos:line="1280" pos:column="21">*<pos:position pos:line="1280" pos:column="22"/></operator><operator pos:line="1280" pos:column="22">(<pos:position pos:line="1280" pos:column="23"/></operator><operator pos:line="1280" pos:column="23">++<pos:position pos:line="1280" pos:column="25"/></operator><name pos:line="1280" pos:column="25">ptr<pos:position pos:line="1280" pos:column="28"/></name><operator pos:line="1280" pos:column="28">)<pos:position pos:line="1280" pos:column="29"/></operator> <operator pos:line="1280" pos:column="30">-<pos:position pos:line="1280" pos:column="31"/></operator> <literal type="char" pos:line="1280" pos:column="32">'0'<pos:position pos:line="1280" pos:column="35"/></literal></expr>;<pos:position pos:line="1280" pos:column="36"/></expr_stmt>    <comment type="block" pos:line="1280" pos:column="40">/* grumble at autoincrement in declaration */</comment>
          <while pos:line="1281" pos:column="11">while <condition pos:line="1281" pos:column="17">(<expr><operator pos:line="1281" pos:column="18">*<pos:position pos:line="1281" pos:column="19"/></operator><operator pos:line="1281" pos:column="19">(<pos:position pos:line="1281" pos:column="20"/></operator><operator pos:line="1281" pos:column="20">++<pos:position pos:line="1281" pos:column="22"/></operator><name pos:line="1281" pos:column="22">ptr<pos:position pos:line="1281" pos:column="25"/></name><operator pos:line="1281" pos:column="25">)<pos:position pos:line="1281" pos:column="26"/></operator> <operator pos:line="1281" pos:column="27">!=<pos:position pos:line="1281" pos:column="29"/></operator> <literal type="char" pos:line="1281" pos:column="30">')'<pos:position pos:line="1281" pos:column="33"/></literal></expr>)<pos:position pos:line="1281" pos:column="34"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="1281" pos:column="35">condref<pos:position pos:line="1281" pos:column="42"/></name> <operator pos:line="1281" pos:column="43">=<pos:position pos:line="1281" pos:column="44"/></operator> <name pos:line="1281" pos:column="45">condref<pos:position pos:line="1281" pos:column="52"/></name><operator pos:line="1281" pos:column="52">*<pos:position pos:line="1281" pos:column="53"/></operator><literal type="number" pos:line="1281" pos:column="53">10<pos:position pos:line="1281" pos:column="55"/></literal> <operator pos:line="1281" pos:column="56">+<pos:position pos:line="1281" pos:column="57"/></operator> <operator pos:line="1281" pos:column="58">*<pos:position pos:line="1281" pos:column="59"/></operator><name pos:line="1281" pos:column="59">ptr<pos:position pos:line="1281" pos:column="62"/></name> <operator pos:line="1281" pos:column="63">-<pos:position pos:line="1281" pos:column="64"/></operator> <literal type="char" pos:line="1281" pos:column="65">'0'<pos:position pos:line="1281" pos:column="68"/></literal></expr>;<pos:position pos:line="1281" pos:column="69"/></expr_stmt></block></while>
          <if pos:line="1282" pos:column="11">if <condition pos:line="1282" pos:column="14">(<expr><name pos:line="1282" pos:column="15">condref<pos:position pos:line="1282" pos:column="22"/></name> <operator pos:line="1282" pos:column="23">==<pos:position pos:line="1282" pos:column="25"/></operator> <literal type="number" pos:line="1282" pos:column="26">0<pos:position pos:line="1282" pos:column="27"/></literal></expr>)<pos:position pos:line="1282" pos:column="28"/></condition><then pos:line="1282" pos:column="28">
            <block pos:line="1283" pos:column="13">{
            <expr_stmt><expr><operator pos:line="1284" pos:column="13">*<pos:position pos:line="1284" pos:column="14"/></operator><name pos:line="1284" pos:column="14">errorptr<pos:position pos:line="1284" pos:column="22"/></name> <operator pos:line="1284" pos:column="23">=<pos:position pos:line="1284" pos:column="24"/></operator> <name pos:line="1284" pos:column="25">ERR35<pos:position pos:line="1284" pos:column="30"/></name></expr>;<pos:position pos:line="1284" pos:column="31"/></expr_stmt>
            <goto pos:line="1285" pos:column="13">goto <name pos:line="1285" pos:column="18">FAILED<pos:position pos:line="1285" pos:column="24"/></name>;<pos:position pos:line="1285" pos:column="25"/></goto>
            }<pos:position pos:line="1286" pos:column="14"/></block></then></if>
          <expr_stmt><expr><name pos:line="1287" pos:column="11">ptr<pos:position pos:line="1287" pos:column="14"/></name><operator pos:line="1287" pos:column="14">++<pos:position pos:line="1287" pos:column="16"/></operator></expr>;<pos:position pos:line="1287" pos:column="17"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="1288" pos:column="11">code<pos:position pos:line="1288" pos:column="15"/></name><index pos:line="1288" pos:column="15">[<expr><literal type="number" pos:line="1288" pos:column="16">1<pos:position pos:line="1288" pos:column="17"/></literal><operator pos:line="1288" pos:column="17">+<pos:position pos:line="1288" pos:column="18"/></operator><name pos:line="1288" pos:column="18">LINK_SIZE<pos:position pos:line="1288" pos:column="27"/></name></expr>]<pos:position pos:line="1288" pos:column="28"/></index></name> <operator pos:line="1288" pos:column="29">=<pos:position pos:line="1288" pos:column="30"/></operator> <name pos:line="1288" pos:column="31">OP_CREF<pos:position pos:line="1288" pos:column="38"/></name></expr>;<pos:position pos:line="1288" pos:column="39"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1289" pos:column="11">PUT2<pos:position pos:line="1289" pos:column="15"/></name><argument_list pos:line="1289" pos:column="15">(<argument><expr><name pos:line="1289" pos:column="16">code<pos:position pos:line="1289" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1289" pos:column="22">2<pos:position pos:line="1289" pos:column="23"/></literal><operator pos:line="1289" pos:column="23">+<pos:position pos:line="1289" pos:column="24"/></operator><name pos:line="1289" pos:column="24">LINK_SIZE<pos:position pos:line="1289" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="1289" pos:column="35">condref<pos:position pos:line="1289" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1289" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1289" pos:column="44"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1290" pos:column="11">skipbytes<pos:position pos:line="1290" pos:column="20"/></name> <operator pos:line="1290" pos:column="21">=<pos:position pos:line="1290" pos:column="22"/></operator> <literal type="number" pos:line="1290" pos:column="23">3<pos:position pos:line="1290" pos:column="24"/></literal></expr>;<pos:position pos:line="1290" pos:column="25"/></expr_stmt>
          }<pos:position pos:line="1291" pos:column="12"/></block></then></if></elseif></if>
        <comment type="block" pos:line="1292" pos:column="9">/* For conditions that are assertions, we just fall through, having
        set bravalue above. */</comment>
        <break pos:line="1294" pos:column="9">break;<pos:position pos:line="1294" pos:column="15"/></break>

        <case pos:line="1296" pos:column="9">case <expr><literal type="char" pos:line="1296" pos:column="14">'='<pos:position pos:line="1296" pos:column="17"/></literal></expr>:<pos:position pos:line="1296" pos:column="18"/></case>                 <comment type="block" pos:line="1296" pos:column="35">/* Positive lookahead */</comment>
        <expr_stmt><expr><name pos:line="1297" pos:column="9">bravalue<pos:position pos:line="1297" pos:column="17"/></name> <operator pos:line="1297" pos:column="18">=<pos:position pos:line="1297" pos:column="19"/></operator> <name pos:line="1297" pos:column="20">OP_ASSERT<pos:position pos:line="1297" pos:column="29"/></name></expr>;<pos:position pos:line="1297" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1298" pos:column="9">ptr<pos:position pos:line="1298" pos:column="12"/></name><operator pos:line="1298" pos:column="12">++<pos:position pos:line="1298" pos:column="14"/></operator></expr>;<pos:position pos:line="1298" pos:column="15"/></expr_stmt>
        <break pos:line="1299" pos:column="9">break;<pos:position pos:line="1299" pos:column="15"/></break>

        <case pos:line="1301" pos:column="9">case <expr><literal type="char" pos:line="1301" pos:column="14">'!'<pos:position pos:line="1301" pos:column="17"/></literal></expr>:<pos:position pos:line="1301" pos:column="18"/></case>                 <comment type="block" pos:line="1301" pos:column="35">/* Negative lookahead */</comment>
        <expr_stmt><expr><name pos:line="1302" pos:column="9">bravalue<pos:position pos:line="1302" pos:column="17"/></name> <operator pos:line="1302" pos:column="18">=<pos:position pos:line="1302" pos:column="19"/></operator> <name pos:line="1302" pos:column="20">OP_ASSERT_NOT<pos:position pos:line="1302" pos:column="33"/></name></expr>;<pos:position pos:line="1302" pos:column="34"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1303" pos:column="9">ptr<pos:position pos:line="1303" pos:column="12"/></name><operator pos:line="1303" pos:column="12">++<pos:position pos:line="1303" pos:column="14"/></operator></expr>;<pos:position pos:line="1303" pos:column="15"/></expr_stmt>
        <break pos:line="1304" pos:column="9">break;<pos:position pos:line="1304" pos:column="15"/></break>

        <case pos:line="1306" pos:column="9">case <expr><literal type="char" pos:line="1306" pos:column="14">'&lt;'<pos:position pos:line="1306" pos:column="20"/></literal></expr>:<pos:position pos:line="1306" pos:column="18"/></case>                 <comment type="block" pos:line="1306" pos:column="35">/* Lookbehinds */</comment>
        <switch pos:line="1307" pos:column="9">switch <condition pos:line="1307" pos:column="16">(<expr><operator pos:line="1307" pos:column="17">*<pos:position pos:line="1307" pos:column="18"/></operator><operator pos:line="1307" pos:column="18">(<pos:position pos:line="1307" pos:column="19"/></operator><operator pos:line="1307" pos:column="19">++<pos:position pos:line="1307" pos:column="21"/></operator><name pos:line="1307" pos:column="21">ptr<pos:position pos:line="1307" pos:column="24"/></name><operator pos:line="1307" pos:column="24">)<pos:position pos:line="1307" pos:column="25"/></operator></expr>)<pos:position pos:line="1307" pos:column="26"/></condition>
          <block pos:line="1308" pos:column="11">{
          <case pos:line="1309" pos:column="11">case <expr><literal type="char" pos:line="1309" pos:column="16">'='<pos:position pos:line="1309" pos:column="19"/></literal></expr>:<pos:position pos:line="1309" pos:column="20"/></case>               <comment type="block" pos:line="1309" pos:column="35">/* Positive lookbehind */</comment>
          <expr_stmt><expr><name pos:line="1310" pos:column="11">bravalue<pos:position pos:line="1310" pos:column="19"/></name> <operator pos:line="1310" pos:column="20">=<pos:position pos:line="1310" pos:column="21"/></operator> <name pos:line="1310" pos:column="22">OP_ASSERTBACK<pos:position pos:line="1310" pos:column="35"/></name></expr>;<pos:position pos:line="1310" pos:column="36"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1311" pos:column="11">ptr<pos:position pos:line="1311" pos:column="14"/></name><operator pos:line="1311" pos:column="14">++<pos:position pos:line="1311" pos:column="16"/></operator></expr>;<pos:position pos:line="1311" pos:column="17"/></expr_stmt>
          <break pos:line="1312" pos:column="11">break;<pos:position pos:line="1312" pos:column="17"/></break>

          <case pos:line="1314" pos:column="11">case <expr><literal type="char" pos:line="1314" pos:column="16">'!'<pos:position pos:line="1314" pos:column="19"/></literal></expr>:<pos:position pos:line="1314" pos:column="20"/></case>               <comment type="block" pos:line="1314" pos:column="35">/* Negative lookbehind */</comment>
          <expr_stmt><expr><name pos:line="1315" pos:column="11">bravalue<pos:position pos:line="1315" pos:column="19"/></name> <operator pos:line="1315" pos:column="20">=<pos:position pos:line="1315" pos:column="21"/></operator> <name pos:line="1315" pos:column="22">OP_ASSERTBACK_NOT<pos:position pos:line="1315" pos:column="39"/></name></expr>;<pos:position pos:line="1315" pos:column="40"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1316" pos:column="11">ptr<pos:position pos:line="1316" pos:column="14"/></name><operator pos:line="1316" pos:column="14">++<pos:position pos:line="1316" pos:column="16"/></operator></expr>;<pos:position pos:line="1316" pos:column="17"/></expr_stmt>
          <break pos:line="1317" pos:column="11">break;<pos:position pos:line="1317" pos:column="17"/></break>
          }<pos:position pos:line="1318" pos:column="12"/></block></switch>
        <break pos:line="1319" pos:column="9">break;<pos:position pos:line="1319" pos:column="15"/></break>

        <case pos:line="1321" pos:column="9">case <expr><literal type="char" pos:line="1321" pos:column="14">'&gt;'<pos:position pos:line="1321" pos:column="20"/></literal></expr>:<pos:position pos:line="1321" pos:column="18"/></case>                 <comment type="block" pos:line="1321" pos:column="35">/* One-time brackets */</comment>
        <expr_stmt><expr><name pos:line="1322" pos:column="9">bravalue<pos:position pos:line="1322" pos:column="17"/></name> <operator pos:line="1322" pos:column="18">=<pos:position pos:line="1322" pos:column="19"/></operator> <name pos:line="1322" pos:column="20">OP_ONCE<pos:position pos:line="1322" pos:column="27"/></name></expr>;<pos:position pos:line="1322" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1323" pos:column="9">ptr<pos:position pos:line="1323" pos:column="12"/></name><operator pos:line="1323" pos:column="12">++<pos:position pos:line="1323" pos:column="14"/></operator></expr>;<pos:position pos:line="1323" pos:column="15"/></expr_stmt>
        <break pos:line="1324" pos:column="9">break;<pos:position pos:line="1324" pos:column="15"/></break>

        <case pos:line="1326" pos:column="9">case <expr><literal type="char" pos:line="1326" pos:column="14">'C'<pos:position pos:line="1326" pos:column="17"/></literal></expr>:<pos:position pos:line="1326" pos:column="18"/></case>                 <comment type="block" pos:line="1326" pos:column="35">/* Callout - may be followed by digits; */</comment>
        <expr_stmt><expr><name pos:line="1327" pos:column="9">previous_callout<pos:position pos:line="1327" pos:column="25"/></name> <operator pos:line="1327" pos:column="26">=<pos:position pos:line="1327" pos:column="27"/></operator> <name pos:line="1327" pos:column="28">code<pos:position pos:line="1327" pos:column="32"/></name></expr>;<pos:position pos:line="1327" pos:column="33"/></expr_stmt>  <comment type="block" pos:line="1327" pos:column="35">/* Save for later completion */</comment>
        <expr_stmt><expr><name pos:line="1328" pos:column="9">after_manual_callout<pos:position pos:line="1328" pos:column="29"/></name> <operator pos:line="1328" pos:column="30">=<pos:position pos:line="1328" pos:column="31"/></operator> <literal type="number" pos:line="1328" pos:column="32">1<pos:position pos:line="1328" pos:column="33"/></literal></expr>;<pos:position pos:line="1328" pos:column="34"/></expr_stmt> <comment type="block" pos:line="1328" pos:column="35">/* Skip one item before completing */</comment>
        <expr_stmt><expr><operator pos:line="1329" pos:column="9">*<pos:position pos:line="1329" pos:column="10"/></operator><name pos:line="1329" pos:column="10">code<pos:position pos:line="1329" pos:column="14"/></name><operator pos:line="1329" pos:column="14">++<pos:position pos:line="1329" pos:column="16"/></operator> <operator pos:line="1329" pos:column="17">=<pos:position pos:line="1329" pos:column="18"/></operator> <name pos:line="1329" pos:column="19">OP_CALLOUT<pos:position pos:line="1329" pos:column="29"/></name></expr>;<pos:position pos:line="1329" pos:column="30"/></expr_stmt>     <comment type="block" pos:line="1329" pos:column="35">/* Already checked that the terminating */</comment>
          <block pos:line="1330" pos:column="11">{                       <comment type="block" pos:line="1330" pos:column="35">/* closing parenthesis is present. */</comment>
          <decl_stmt><decl><type><name pos:line="1331" pos:column="11">int<pos:position pos:line="1331" pos:column="14"/></name></type> <name pos:line="1331" pos:column="15">n<pos:position pos:line="1331" pos:column="16"/></name> <init pos:line="1331" pos:column="17">= <expr><literal type="number" pos:line="1331" pos:column="19">0<pos:position pos:line="1331" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="1331" pos:column="21"/></decl_stmt>
          <while pos:line="1332" pos:column="11">while <condition pos:line="1332" pos:column="17">(<expr><operator pos:line="1332" pos:column="18">(<pos:position pos:line="1332" pos:column="19"/></operator><name><name pos:line="1332" pos:column="19">digitab<pos:position pos:line="1332" pos:column="26"/></name><index pos:line="1332" pos:column="26">[<expr><operator pos:line="1332" pos:column="27">*<pos:position pos:line="1332" pos:column="28"/></operator><operator pos:line="1332" pos:column="28">(<pos:position pos:line="1332" pos:column="29"/></operator><operator pos:line="1332" pos:column="29">++<pos:position pos:line="1332" pos:column="31"/></operator><name pos:line="1332" pos:column="31">ptr<pos:position pos:line="1332" pos:column="34"/></name><operator pos:line="1332" pos:column="34">)<pos:position pos:line="1332" pos:column="35"/></operator></expr>]<pos:position pos:line="1332" pos:column="36"/></index></name> <operator pos:line="1332" pos:column="37">&amp;<pos:position pos:line="1332" pos:column="42"/></operator> <name pos:line="1332" pos:column="39">ctype_digit<pos:position pos:line="1332" pos:column="50"/></name><operator pos:line="1332" pos:column="50">)<pos:position pos:line="1332" pos:column="51"/></operator> <operator pos:line="1332" pos:column="52">!=<pos:position pos:line="1332" pos:column="54"/></operator> <literal type="number" pos:line="1332" pos:column="55">0<pos:position pos:line="1332" pos:column="56"/></literal></expr>)<pos:position pos:line="1332" pos:column="57"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="1333" pos:column="13">n<pos:position pos:line="1333" pos:column="14"/></name> <operator pos:line="1333" pos:column="15">=<pos:position pos:line="1333" pos:column="16"/></operator> <name pos:line="1333" pos:column="17">n<pos:position pos:line="1333" pos:column="18"/></name> <operator pos:line="1333" pos:column="19">*<pos:position pos:line="1333" pos:column="20"/></operator> <literal type="number" pos:line="1333" pos:column="21">10<pos:position pos:line="1333" pos:column="23"/></literal> <operator pos:line="1333" pos:column="24">+<pos:position pos:line="1333" pos:column="25"/></operator> <operator pos:line="1333" pos:column="26">*<pos:position pos:line="1333" pos:column="27"/></operator><name pos:line="1333" pos:column="27">ptr<pos:position pos:line="1333" pos:column="30"/></name> <operator pos:line="1333" pos:column="31">-<pos:position pos:line="1333" pos:column="32"/></operator> <literal type="char" pos:line="1333" pos:column="33">'0'<pos:position pos:line="1333" pos:column="36"/></literal></expr>;<pos:position pos:line="1333" pos:column="37"/></expr_stmt></block></while>
          <if pos:line="1334" pos:column="11">if <condition pos:line="1334" pos:column="14">(<expr><name pos:line="1334" pos:column="15">n<pos:position pos:line="1334" pos:column="16"/></name> <operator pos:line="1334" pos:column="17">&gt;<pos:position pos:line="1334" pos:column="21"/></operator> <literal type="number" pos:line="1334" pos:column="19">255<pos:position pos:line="1334" pos:column="22"/></literal></expr>)<pos:position pos:line="1334" pos:column="23"/></condition><then pos:line="1334" pos:column="23">
            <block pos:line="1335" pos:column="13">{
            <expr_stmt><expr><operator pos:line="1336" pos:column="13">*<pos:position pos:line="1336" pos:column="14"/></operator><name pos:line="1336" pos:column="14">errorptr<pos:position pos:line="1336" pos:column="22"/></name> <operator pos:line="1336" pos:column="23">=<pos:position pos:line="1336" pos:column="24"/></operator> <name pos:line="1336" pos:column="25">ERR38<pos:position pos:line="1336" pos:column="30"/></name></expr>;<pos:position pos:line="1336" pos:column="31"/></expr_stmt>
            <goto pos:line="1337" pos:column="13">goto <name pos:line="1337" pos:column="18">FAILED<pos:position pos:line="1337" pos:column="24"/></name>;<pos:position pos:line="1337" pos:column="25"/></goto>
            }<pos:position pos:line="1338" pos:column="14"/></block></then></if>
          <expr_stmt><expr><operator pos:line="1339" pos:column="11">*<pos:position pos:line="1339" pos:column="12"/></operator><name pos:line="1339" pos:column="12">code<pos:position pos:line="1339" pos:column="16"/></name><operator pos:line="1339" pos:column="16">++<pos:position pos:line="1339" pos:column="18"/></operator> <operator pos:line="1339" pos:column="19">=<pos:position pos:line="1339" pos:column="20"/></operator> <name pos:line="1339" pos:column="21">n<pos:position pos:line="1339" pos:column="22"/></name></expr>;<pos:position pos:line="1339" pos:column="23"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1340" pos:column="11">PUT<pos:position pos:line="1340" pos:column="14"/></name><argument_list pos:line="1340" pos:column="14">(<argument><expr><name pos:line="1340" pos:column="15">code<pos:position pos:line="1340" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1340" pos:column="21">0<pos:position pos:line="1340" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="1340" pos:column="24">ptr<pos:position pos:line="1340" pos:column="27"/></name> <operator pos:line="1340" pos:column="28">-<pos:position pos:line="1340" pos:column="29"/></operator> <name><name pos:line="1340" pos:column="30">cd<pos:position pos:line="1340" pos:column="32"/></name><operator pos:line="1340" pos:column="32">-&gt;<pos:position pos:line="1340" pos:column="37"/></operator><name pos:line="1340" pos:column="34">start_pattern<pos:position pos:line="1340" pos:column="47"/></name></name> <operator pos:line="1340" pos:column="48">+<pos:position pos:line="1340" pos:column="49"/></operator> <literal type="number" pos:line="1340" pos:column="50">1<pos:position pos:line="1340" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="1340" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="1340" pos:column="53"/></expr_stmt>  <comment type="block" pos:line="1340" pos:column="55">/* Pattern offset */</comment>
          <expr_stmt><expr><call><name pos:line="1341" pos:column="11">PUT<pos:position pos:line="1341" pos:column="14"/></name><argument_list pos:line="1341" pos:column="14">(<argument><expr><name pos:line="1341" pos:column="15">code<pos:position pos:line="1341" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="1341" pos:column="21">LINK_SIZE<pos:position pos:line="1341" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1341" pos:column="32">0<pos:position pos:line="1341" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="1341" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1341" pos:column="35"/></expr_stmt>                    <comment type="block" pos:line="1341" pos:column="55">/* Default length */</comment>
          <expr_stmt><expr><name pos:line="1342" pos:column="11">code<pos:position pos:line="1342" pos:column="15"/></name> <operator pos:line="1342" pos:column="16">+=<pos:position pos:line="1342" pos:column="18"/></operator> <literal type="number" pos:line="1342" pos:column="19">2<pos:position pos:line="1342" pos:column="20"/></literal> <operator pos:line="1342" pos:column="21">*<pos:position pos:line="1342" pos:column="22"/></operator> <name pos:line="1342" pos:column="23">LINK_SIZE<pos:position pos:line="1342" pos:column="32"/></name></expr>;<pos:position pos:line="1342" pos:column="33"/></expr_stmt>
          }<pos:position pos:line="1343" pos:column="12"/></block>
        <expr_stmt><expr><name pos:line="1344" pos:column="9">previous<pos:position pos:line="1344" pos:column="17"/></name> <operator pos:line="1344" pos:column="18">=<pos:position pos:line="1344" pos:column="19"/></operator> <name pos:line="1344" pos:column="20">NULL<pos:position pos:line="1344" pos:column="24"/></name></expr>;<pos:position pos:line="1344" pos:column="25"/></expr_stmt>
        <continue pos:line="1345" pos:column="9">continue;<pos:position pos:line="1345" pos:column="18"/></continue>

        <case pos:line="1347" pos:column="9">case <expr><literal type="char" pos:line="1347" pos:column="14">'P'<pos:position pos:line="1347" pos:column="17"/></literal></expr>:<pos:position pos:line="1347" pos:column="18"/></case>                 <comment type="block" pos:line="1347" pos:column="35">/* Named subpattern handling */</comment>
        <if pos:line="1348" pos:column="9">if <condition pos:line="1348" pos:column="12">(<expr><operator pos:line="1348" pos:column="13">*<pos:position pos:line="1348" pos:column="14"/></operator><operator pos:line="1348" pos:column="14">(<pos:position pos:line="1348" pos:column="15"/></operator><operator pos:line="1348" pos:column="15">++<pos:position pos:line="1348" pos:column="17"/></operator><name pos:line="1348" pos:column="17">ptr<pos:position pos:line="1348" pos:column="20"/></name><operator pos:line="1348" pos:column="20">)<pos:position pos:line="1348" pos:column="21"/></operator> <operator pos:line="1348" pos:column="22">==<pos:position pos:line="1348" pos:column="24"/></operator> <literal type="char" pos:line="1348" pos:column="25">'&lt;'<pos:position pos:line="1348" pos:column="31"/></literal></expr>)<pos:position pos:line="1348" pos:column="29"/></condition><then pos:line="1348" pos:column="29">      <comment type="block" pos:line="1348" pos:column="35">/* Definition */</comment>
          <block pos:line="1349" pos:column="11">{
          <decl_stmt><decl><type><name pos:line="1350" pos:column="11">int<pos:position pos:line="1350" pos:column="14"/></name></type> <name pos:line="1350" pos:column="15">i<pos:position pos:line="1350" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="1350" pos:column="18">namelen<pos:position pos:line="1350" pos:column="25"/></name></decl>;<pos:position pos:line="1350" pos:column="26"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="1351" pos:column="11">uschar<pos:position pos:line="1351" pos:column="17"/></name> <modifier pos:line="1351" pos:column="18">*<pos:position pos:line="1351" pos:column="19"/></modifier></type><name pos:line="1351" pos:column="19">slot<pos:position pos:line="1351" pos:column="23"/></name> <init pos:line="1351" pos:column="24">= <expr><name><name pos:line="1351" pos:column="26">cd<pos:position pos:line="1351" pos:column="28"/></name><operator pos:line="1351" pos:column="28">-&gt;<pos:position pos:line="1351" pos:column="33"/></operator><name pos:line="1351" pos:column="30">name_table<pos:position pos:line="1351" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="1351" pos:column="41"/></decl_stmt>
          <decl_stmt><decl><type><specifier pos:line="1352" pos:column="11">const<pos:position pos:line="1352" pos:column="16"/></specifier> <name pos:line="1352" pos:column="17">uschar<pos:position pos:line="1352" pos:column="23"/></name> <modifier pos:line="1352" pos:column="24">*<pos:position pos:line="1352" pos:column="25"/></modifier></type><name pos:line="1352" pos:column="25">name<pos:position pos:line="1352" pos:column="29"/></name></decl>;<pos:position pos:line="1352" pos:column="30"/></decl_stmt>     <comment type="block" pos:line="1352" pos:column="35">/* Don't amalgamate; some compilers */</comment>
          <expr_stmt><expr><name pos:line="1353" pos:column="11">name<pos:position pos:line="1353" pos:column="15"/></name> <operator pos:line="1353" pos:column="16">=<pos:position pos:line="1353" pos:column="17"/></operator> <operator pos:line="1353" pos:column="18">++<pos:position pos:line="1353" pos:column="20"/></operator><name pos:line="1353" pos:column="20">ptr<pos:position pos:line="1353" pos:column="23"/></name></expr>;<pos:position pos:line="1353" pos:column="24"/></expr_stmt>           <comment type="block" pos:line="1353" pos:column="35">/* grumble at autoincrement in declaration */</comment>

          <while pos:line="1355" pos:column="11">while <condition pos:line="1355" pos:column="17">(<expr><operator pos:line="1355" pos:column="18">*<pos:position pos:line="1355" pos:column="19"/></operator><name pos:line="1355" pos:column="19">ptr<pos:position pos:line="1355" pos:column="22"/></name><operator pos:line="1355" pos:column="22">++<pos:position pos:line="1355" pos:column="24"/></operator> <operator pos:line="1355" pos:column="25">!=<pos:position pos:line="1355" pos:column="27"/></operator> <literal type="char" pos:line="1355" pos:column="28">'&gt;'<pos:position pos:line="1355" pos:column="34"/></literal></expr>)<pos:position pos:line="1355" pos:column="32"/></condition><block type="pseudo"><empty_stmt pos:line="1355" pos:column="32">;<pos:position pos:line="1355" pos:column="33"/></empty_stmt></block></while>
          <expr_stmt><expr><name pos:line="1356" pos:column="11">namelen<pos:position pos:line="1356" pos:column="18"/></name> <operator pos:line="1356" pos:column="19">=<pos:position pos:line="1356" pos:column="20"/></operator> <name pos:line="1356" pos:column="21">ptr<pos:position pos:line="1356" pos:column="24"/></name> <operator pos:line="1356" pos:column="25">-<pos:position pos:line="1356" pos:column="26"/></operator> <name pos:line="1356" pos:column="27">name<pos:position pos:line="1356" pos:column="31"/></name> <operator pos:line="1356" pos:column="32">-<pos:position pos:line="1356" pos:column="33"/></operator> <literal type="number" pos:line="1356" pos:column="34">1<pos:position pos:line="1356" pos:column="35"/></literal></expr>;<pos:position pos:line="1356" pos:column="36"/></expr_stmt>

          <for pos:line="1358" pos:column="11">for <control pos:line="1358" pos:column="15">(<init><expr><name pos:line="1358" pos:column="16">i<pos:position pos:line="1358" pos:column="17"/></name> <operator pos:line="1358" pos:column="18">=<pos:position pos:line="1358" pos:column="19"/></operator> <literal type="number" pos:line="1358" pos:column="20">0<pos:position pos:line="1358" pos:column="21"/></literal></expr>;<pos:position pos:line="1358" pos:column="22"/></init> <condition><expr><name pos:line="1358" pos:column="23">i<pos:position pos:line="1358" pos:column="24"/></name> <operator pos:line="1358" pos:column="25">&lt;<pos:position pos:line="1358" pos:column="29"/></operator> <name><name pos:line="1358" pos:column="27">cd<pos:position pos:line="1358" pos:column="29"/></name><operator pos:line="1358" pos:column="29">-&gt;<pos:position pos:line="1358" pos:column="34"/></operator><name pos:line="1358" pos:column="31">names_found<pos:position pos:line="1358" pos:column="42"/></name></name></expr>;<pos:position pos:line="1358" pos:column="43"/></condition> <incr><expr><name pos:line="1358" pos:column="44">i<pos:position pos:line="1358" pos:column="45"/></name><operator pos:line="1358" pos:column="45">++<pos:position pos:line="1358" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="1358" pos:column="48"/></control>
            <block pos:line="1359" pos:column="13">{
            <decl_stmt><decl><type><name pos:line="1360" pos:column="13">int<pos:position pos:line="1360" pos:column="16"/></name></type> <name pos:line="1360" pos:column="17">crc<pos:position pos:line="1360" pos:column="20"/></name> <init pos:line="1360" pos:column="21">= <expr><call><name pos:line="1360" pos:column="23">memcmp<pos:position pos:line="1360" pos:column="29"/></name><argument_list pos:line="1360" pos:column="29">(<argument><expr><name pos:line="1360" pos:column="30">name<pos:position pos:line="1360" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="1360" pos:column="36">slot<pos:position pos:line="1360" pos:column="40"/></name><operator pos:line="1360" pos:column="40">+<pos:position pos:line="1360" pos:column="41"/></operator><literal type="number" pos:line="1360" pos:column="41">2<pos:position pos:line="1360" pos:column="42"/></literal></expr></argument>, <argument><expr><name pos:line="1360" pos:column="44">namelen<pos:position pos:line="1360" pos:column="51"/></name></expr></argument>)<pos:position pos:line="1360" pos:column="52"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1360" pos:column="53"/></decl_stmt>
            <if pos:line="1361" pos:column="13">if <condition pos:line="1361" pos:column="16">(<expr><name pos:line="1361" pos:column="17">crc<pos:position pos:line="1361" pos:column="20"/></name> <operator pos:line="1361" pos:column="21">==<pos:position pos:line="1361" pos:column="23"/></operator> <literal type="number" pos:line="1361" pos:column="24">0<pos:position pos:line="1361" pos:column="25"/></literal></expr>)<pos:position pos:line="1361" pos:column="26"/></condition><then pos:line="1361" pos:column="26">
              <block pos:line="1362" pos:column="15">{
              <if pos:line="1363" pos:column="15">if <condition pos:line="1363" pos:column="18">(<expr><name><name pos:line="1363" pos:column="19">slot<pos:position pos:line="1363" pos:column="23"/></name><index pos:line="1363" pos:column="23">[<expr><literal type="number" pos:line="1363" pos:column="24">2<pos:position pos:line="1363" pos:column="25"/></literal><operator pos:line="1363" pos:column="25">+<pos:position pos:line="1363" pos:column="26"/></operator><name pos:line="1363" pos:column="26">namelen<pos:position pos:line="1363" pos:column="33"/></name></expr>]<pos:position pos:line="1363" pos:column="34"/></index></name> <operator pos:line="1363" pos:column="35">==<pos:position pos:line="1363" pos:column="37"/></operator> <literal type="number" pos:line="1363" pos:column="38">0<pos:position pos:line="1363" pos:column="39"/></literal></expr>)<pos:position pos:line="1363" pos:column="40"/></condition><then pos:line="1363" pos:column="40">
                <block pos:line="1364" pos:column="17">{
                <expr_stmt><expr><operator pos:line="1365" pos:column="17">*<pos:position pos:line="1365" pos:column="18"/></operator><name pos:line="1365" pos:column="18">errorptr<pos:position pos:line="1365" pos:column="26"/></name> <operator pos:line="1365" pos:column="27">=<pos:position pos:line="1365" pos:column="28"/></operator> <name pos:line="1365" pos:column="29">ERR43<pos:position pos:line="1365" pos:column="34"/></name></expr>;<pos:position pos:line="1365" pos:column="35"/></expr_stmt>
                <goto pos:line="1366" pos:column="17">goto <name pos:line="1366" pos:column="22">FAILED<pos:position pos:line="1366" pos:column="28"/></name>;<pos:position pos:line="1366" pos:column="29"/></goto>
                }<pos:position pos:line="1367" pos:column="18"/></block></then></if>
              <expr_stmt><expr><name pos:line="1368" pos:column="15">crc<pos:position pos:line="1368" pos:column="18"/></name> <operator pos:line="1368" pos:column="19">=<pos:position pos:line="1368" pos:column="20"/></operator> <operator pos:line="1368" pos:column="21">-<pos:position pos:line="1368" pos:column="22"/></operator><literal type="number" pos:line="1368" pos:column="22">1<pos:position pos:line="1368" pos:column="23"/></literal></expr>;<pos:position pos:line="1368" pos:column="24"/></expr_stmt>             <comment type="block" pos:line="1368" pos:column="37">/* Current name is substring */</comment>
              }<pos:position pos:line="1369" pos:column="16"/></block></then></if>
            <if pos:line="1370" pos:column="13">if <condition pos:line="1370" pos:column="16">(<expr><name pos:line="1370" pos:column="17">crc<pos:position pos:line="1370" pos:column="20"/></name> <operator pos:line="1370" pos:column="21">&lt;<pos:position pos:line="1370" pos:column="25"/></operator> <literal type="number" pos:line="1370" pos:column="23">0<pos:position pos:line="1370" pos:column="24"/></literal></expr>)<pos:position pos:line="1370" pos:column="25"/></condition><then pos:line="1370" pos:column="25">
              <block pos:line="1371" pos:column="15">{
              <expr_stmt><expr><call><name pos:line="1372" pos:column="15">memmove<pos:position pos:line="1372" pos:column="22"/></name><argument_list pos:line="1372" pos:column="22">(<argument><expr><name pos:line="1372" pos:column="23">slot<pos:position pos:line="1372" pos:column="27"/></name> <operator pos:line="1372" pos:column="28">+<pos:position pos:line="1372" pos:column="29"/></operator> <name><name pos:line="1372" pos:column="30">cd<pos:position pos:line="1372" pos:column="32"/></name><operator pos:line="1372" pos:column="32">-&gt;<pos:position pos:line="1372" pos:column="37"/></operator><name pos:line="1372" pos:column="34">name_entry_size<pos:position pos:line="1372" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="1372" pos:column="51">slot<pos:position pos:line="1372" pos:column="55"/></name></expr></argument>,
                <argument><expr><operator pos:line="1373" pos:column="17">(<pos:position pos:line="1373" pos:column="18"/></operator><name><name pos:line="1373" pos:column="18">cd<pos:position pos:line="1373" pos:column="20"/></name><operator pos:line="1373" pos:column="20">-&gt;<pos:position pos:line="1373" pos:column="25"/></operator><name pos:line="1373" pos:column="22">names_found<pos:position pos:line="1373" pos:column="33"/></name></name> <operator pos:line="1373" pos:column="34">-<pos:position pos:line="1373" pos:column="35"/></operator> <name pos:line="1373" pos:column="36">i<pos:position pos:line="1373" pos:column="37"/></name><operator pos:line="1373" pos:column="37">)<pos:position pos:line="1373" pos:column="38"/></operator> <operator pos:line="1373" pos:column="39">*<pos:position pos:line="1373" pos:column="40"/></operator> <name><name pos:line="1373" pos:column="41">cd<pos:position pos:line="1373" pos:column="43"/></name><operator pos:line="1373" pos:column="43">-&gt;<pos:position pos:line="1373" pos:column="48"/></operator><name pos:line="1373" pos:column="45">name_entry_size<pos:position pos:line="1373" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="1373" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="1373" pos:column="62"/></expr_stmt>
              <break pos:line="1374" pos:column="15">break;<pos:position pos:line="1374" pos:column="21"/></break>
              }<pos:position pos:line="1375" pos:column="16"/></block></then></if>
            <expr_stmt><expr><name pos:line="1376" pos:column="13">slot<pos:position pos:line="1376" pos:column="17"/></name> <operator pos:line="1376" pos:column="18">+=<pos:position pos:line="1376" pos:column="20"/></operator> <name><name pos:line="1376" pos:column="21">cd<pos:position pos:line="1376" pos:column="23"/></name><operator pos:line="1376" pos:column="23">-&gt;<pos:position pos:line="1376" pos:column="28"/></operator><name pos:line="1376" pos:column="25">name_entry_size<pos:position pos:line="1376" pos:column="40"/></name></name></expr>;<pos:position pos:line="1376" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="1377" pos:column="14"/></block></for>

          <expr_stmt><expr><call><name pos:line="1379" pos:column="11">PUT2<pos:position pos:line="1379" pos:column="15"/></name><argument_list pos:line="1379" pos:column="15">(<argument><expr><name pos:line="1379" pos:column="16">slot<pos:position pos:line="1379" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1379" pos:column="22">0<pos:position pos:line="1379" pos:column="23"/></literal></expr></argument>, <argument><expr><operator pos:line="1379" pos:column="25">*<pos:position pos:line="1379" pos:column="26"/></operator><name pos:line="1379" pos:column="26">brackets<pos:position pos:line="1379" pos:column="34"/></name> <operator pos:line="1379" pos:column="35">+<pos:position pos:line="1379" pos:column="36"/></operator> <literal type="number" pos:line="1379" pos:column="37">1<pos:position pos:line="1379" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="1379" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="1379" pos:column="40"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1380" pos:column="11">memcpy<pos:position pos:line="1380" pos:column="17"/></name><argument_list pos:line="1380" pos:column="17">(<argument><expr><name pos:line="1380" pos:column="18">slot<pos:position pos:line="1380" pos:column="22"/></name> <operator pos:line="1380" pos:column="23">+<pos:position pos:line="1380" pos:column="24"/></operator> <literal type="number" pos:line="1380" pos:column="25">2<pos:position pos:line="1380" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="1380" pos:column="28">name<pos:position pos:line="1380" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="1380" pos:column="34">namelen<pos:position pos:line="1380" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1380" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1380" pos:column="43"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="1381" pos:column="11">slot<pos:position pos:line="1381" pos:column="15"/></name><index pos:line="1381" pos:column="15">[<expr><literal type="number" pos:line="1381" pos:column="16">2<pos:position pos:line="1381" pos:column="17"/></literal><operator pos:line="1381" pos:column="17">+<pos:position pos:line="1381" pos:column="18"/></operator><name pos:line="1381" pos:column="18">namelen<pos:position pos:line="1381" pos:column="25"/></name></expr>]<pos:position pos:line="1381" pos:column="26"/></index></name> <operator pos:line="1381" pos:column="27">=<pos:position pos:line="1381" pos:column="28"/></operator> <literal type="number" pos:line="1381" pos:column="29">0<pos:position pos:line="1381" pos:column="30"/></literal></expr>;<pos:position pos:line="1381" pos:column="31"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="1382" pos:column="11">cd<pos:position pos:line="1382" pos:column="13"/></name><operator pos:line="1382" pos:column="13">-&gt;<pos:position pos:line="1382" pos:column="18"/></operator><name pos:line="1382" pos:column="15">names_found<pos:position pos:line="1382" pos:column="26"/></name></name><operator pos:line="1382" pos:column="26">++<pos:position pos:line="1382" pos:column="28"/></operator></expr>;<pos:position pos:line="1382" pos:column="29"/></expr_stmt>
          <goto pos:line="1383" pos:column="11">goto <name pos:line="1383" pos:column="16">NUMBERED_GROUP<pos:position pos:line="1383" pos:column="30"/></name>;<pos:position pos:line="1383" pos:column="31"/></goto>
          }<pos:position pos:line="1384" pos:column="12"/></block></then></if>

        <if pos:line="1386" pos:column="9">if <condition pos:line="1386" pos:column="12">(<expr><operator pos:line="1386" pos:column="13">*<pos:position pos:line="1386" pos:column="14"/></operator><name pos:line="1386" pos:column="14">ptr<pos:position pos:line="1386" pos:column="17"/></name> <operator pos:line="1386" pos:column="18">==<pos:position pos:line="1386" pos:column="20"/></operator> <literal type="char" pos:line="1386" pos:column="21">'='<pos:position pos:line="1386" pos:column="24"/></literal> <operator pos:line="1386" pos:column="25">||<pos:position pos:line="1386" pos:column="27"/></operator> <operator pos:line="1386" pos:column="28">*<pos:position pos:line="1386" pos:column="29"/></operator><name pos:line="1386" pos:column="29">ptr<pos:position pos:line="1386" pos:column="32"/></name> <operator pos:line="1386" pos:column="33">==<pos:position pos:line="1386" pos:column="35"/></operator> <literal type="char" pos:line="1386" pos:column="36">'&gt;'<pos:position pos:line="1386" pos:column="42"/></literal></expr>)<pos:position pos:line="1386" pos:column="40"/></condition><then pos:line="1386" pos:column="40">  <comment type="block" pos:line="1386" pos:column="42">/* Reference or recursion */</comment>
          <block pos:line="1387" pos:column="11">{
          <decl_stmt><decl><type><name pos:line="1388" pos:column="11">int<pos:position pos:line="1388" pos:column="14"/></name></type> <name pos:line="1388" pos:column="15">i<pos:position pos:line="1388" pos:column="16"/></name></decl>, <decl><type ref="prev"/><name pos:line="1388" pos:column="18">namelen<pos:position pos:line="1388" pos:column="25"/></name></decl>;<pos:position pos:line="1388" pos:column="26"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="1389" pos:column="11">int<pos:position pos:line="1389" pos:column="14"/></name></type> <name pos:line="1389" pos:column="15">type<pos:position pos:line="1389" pos:column="19"/></name> <init pos:line="1389" pos:column="20">= <expr><operator pos:line="1389" pos:column="22">*<pos:position pos:line="1389" pos:column="23"/></operator><name pos:line="1389" pos:column="23">ptr<pos:position pos:line="1389" pos:column="26"/></name><operator pos:line="1389" pos:column="26">++<pos:position pos:line="1389" pos:column="28"/></operator></expr></init></decl>;<pos:position pos:line="1389" pos:column="29"/></decl_stmt>
          <decl_stmt><decl><type><specifier pos:line="1390" pos:column="11">const<pos:position pos:line="1390" pos:column="16"/></specifier> <name pos:line="1390" pos:column="17">uschar<pos:position pos:line="1390" pos:column="23"/></name> <modifier pos:line="1390" pos:column="24">*<pos:position pos:line="1390" pos:column="25"/></modifier></type><name pos:line="1390" pos:column="25">name<pos:position pos:line="1390" pos:column="29"/></name> <init pos:line="1390" pos:column="30">= <expr><name pos:line="1390" pos:column="32">ptr<pos:position pos:line="1390" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="1390" pos:column="36"/></decl_stmt>
          <decl_stmt><decl><type><name pos:line="1391" pos:column="11">uschar<pos:position pos:line="1391" pos:column="17"/></name> <modifier pos:line="1391" pos:column="18">*<pos:position pos:line="1391" pos:column="19"/></modifier></type><name pos:line="1391" pos:column="19">slot<pos:position pos:line="1391" pos:column="23"/></name> <init pos:line="1391" pos:column="24">= <expr><name><name pos:line="1391" pos:column="26">cd<pos:position pos:line="1391" pos:column="28"/></name><operator pos:line="1391" pos:column="28">-&gt;<pos:position pos:line="1391" pos:column="33"/></operator><name pos:line="1391" pos:column="30">name_table<pos:position pos:line="1391" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="1391" pos:column="41"/></decl_stmt>

          <while pos:line="1393" pos:column="11">while <condition pos:line="1393" pos:column="17">(<expr><operator pos:line="1393" pos:column="18">*<pos:position pos:line="1393" pos:column="19"/></operator><name pos:line="1393" pos:column="19">ptr<pos:position pos:line="1393" pos:column="22"/></name> <operator pos:line="1393" pos:column="23">!=<pos:position pos:line="1393" pos:column="25"/></operator> <literal type="char" pos:line="1393" pos:column="26">')'<pos:position pos:line="1393" pos:column="29"/></literal></expr>)<pos:position pos:line="1393" pos:column="30"/></condition> <block type="pseudo"><expr_stmt><expr><name pos:line="1393" pos:column="31">ptr<pos:position pos:line="1393" pos:column="34"/></name><operator pos:line="1393" pos:column="34">++<pos:position pos:line="1393" pos:column="36"/></operator></expr>;<pos:position pos:line="1393" pos:column="37"/></expr_stmt></block></while>
          <expr_stmt><expr><name pos:line="1394" pos:column="11">namelen<pos:position pos:line="1394" pos:column="18"/></name> <operator pos:line="1394" pos:column="19">=<pos:position pos:line="1394" pos:column="20"/></operator> <name pos:line="1394" pos:column="21">ptr<pos:position pos:line="1394" pos:column="24"/></name> <operator pos:line="1394" pos:column="25">-<pos:position pos:line="1394" pos:column="26"/></operator> <name pos:line="1394" pos:column="27">name<pos:position pos:line="1394" pos:column="31"/></name></expr>;<pos:position pos:line="1394" pos:column="32"/></expr_stmt>

          <for pos:line="1396" pos:column="11">for <control pos:line="1396" pos:column="15">(<init><expr><name pos:line="1396" pos:column="16">i<pos:position pos:line="1396" pos:column="17"/></name> <operator pos:line="1396" pos:column="18">=<pos:position pos:line="1396" pos:column="19"/></operator> <literal type="number" pos:line="1396" pos:column="20">0<pos:position pos:line="1396" pos:column="21"/></literal></expr>;<pos:position pos:line="1396" pos:column="22"/></init> <condition><expr><name pos:line="1396" pos:column="23">i<pos:position pos:line="1396" pos:column="24"/></name> <operator pos:line="1396" pos:column="25">&lt;<pos:position pos:line="1396" pos:column="29"/></operator> <name><name pos:line="1396" pos:column="27">cd<pos:position pos:line="1396" pos:column="29"/></name><operator pos:line="1396" pos:column="29">-&gt;<pos:position pos:line="1396" pos:column="34"/></operator><name pos:line="1396" pos:column="31">names_found<pos:position pos:line="1396" pos:column="42"/></name></name></expr>;<pos:position pos:line="1396" pos:column="43"/></condition> <incr><expr><name pos:line="1396" pos:column="44">i<pos:position pos:line="1396" pos:column="45"/></name><operator pos:line="1396" pos:column="45">++<pos:position pos:line="1396" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="1396" pos:column="48"/></control>
            <block pos:line="1397" pos:column="13">{
            <if pos:line="1398" pos:column="13">if <condition pos:line="1398" pos:column="16">(<expr><call><name pos:line="1398" pos:column="17">strncmp<pos:position pos:line="1398" pos:column="24"/></name><argument_list pos:line="1398" pos:column="24">(<argument><expr><operator pos:line="1398" pos:column="25">(<pos:position pos:line="1398" pos:column="26"/></operator><name pos:line="1398" pos:column="26">char<pos:position pos:line="1398" pos:column="30"/></name> <operator pos:line="1398" pos:column="31">*<pos:position pos:line="1398" pos:column="32"/></operator><operator pos:line="1398" pos:column="32">)<pos:position pos:line="1398" pos:column="33"/></operator><name pos:line="1398" pos:column="33">name<pos:position pos:line="1398" pos:column="37"/></name></expr></argument>, <argument><expr><operator pos:line="1398" pos:column="39">(<pos:position pos:line="1398" pos:column="40"/></operator><name pos:line="1398" pos:column="40">char<pos:position pos:line="1398" pos:column="44"/></name> <operator pos:line="1398" pos:column="45">*<pos:position pos:line="1398" pos:column="46"/></operator><operator pos:line="1398" pos:column="46">)<pos:position pos:line="1398" pos:column="47"/></operator><name pos:line="1398" pos:column="47">slot<pos:position pos:line="1398" pos:column="51"/></name><operator pos:line="1398" pos:column="51">+<pos:position pos:line="1398" pos:column="52"/></operator><literal type="number" pos:line="1398" pos:column="52">2<pos:position pos:line="1398" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="1398" pos:column="55">namelen<pos:position pos:line="1398" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1398" pos:column="63"/></argument_list></call> <operator pos:line="1398" pos:column="64">==<pos:position pos:line="1398" pos:column="66"/></operator> <literal type="number" pos:line="1398" pos:column="67">0<pos:position pos:line="1398" pos:column="68"/></literal></expr>)<pos:position pos:line="1398" pos:column="69"/></condition><then pos:line="1398" pos:column="69"> <block type="pseudo"><break pos:line="1398" pos:column="70">break;<pos:position pos:line="1398" pos:column="76"/></break></block></then></if>
            <expr_stmt><expr><name pos:line="1399" pos:column="13">slot<pos:position pos:line="1399" pos:column="17"/></name> <operator pos:line="1399" pos:column="18">+=<pos:position pos:line="1399" pos:column="20"/></operator> <name><name pos:line="1399" pos:column="21">cd<pos:position pos:line="1399" pos:column="23"/></name><operator pos:line="1399" pos:column="23">-&gt;<pos:position pos:line="1399" pos:column="28"/></operator><name pos:line="1399" pos:column="25">name_entry_size<pos:position pos:line="1399" pos:column="40"/></name></name></expr>;<pos:position pos:line="1399" pos:column="41"/></expr_stmt>
            }<pos:position pos:line="1400" pos:column="14"/></block></for>
          <if pos:line="1401" pos:column="11">if <condition pos:line="1401" pos:column="14">(<expr><name pos:line="1401" pos:column="15">i<pos:position pos:line="1401" pos:column="16"/></name> <operator pos:line="1401" pos:column="17">&gt;=<pos:position pos:line="1401" pos:column="22"/></operator> <name><name pos:line="1401" pos:column="20">cd<pos:position pos:line="1401" pos:column="22"/></name><operator pos:line="1401" pos:column="22">-&gt;<pos:position pos:line="1401" pos:column="27"/></operator><name pos:line="1401" pos:column="24">names_found<pos:position pos:line="1401" pos:column="35"/></name></name></expr>)<pos:position pos:line="1401" pos:column="36"/></condition><then pos:line="1401" pos:column="36">
            <block pos:line="1402" pos:column="13">{
            <expr_stmt><expr><operator pos:line="1403" pos:column="13">*<pos:position pos:line="1403" pos:column="14"/></operator><name pos:line="1403" pos:column="14">errorptr<pos:position pos:line="1403" pos:column="22"/></name> <operator pos:line="1403" pos:column="23">=<pos:position pos:line="1403" pos:column="24"/></operator> <name pos:line="1403" pos:column="25">ERR15<pos:position pos:line="1403" pos:column="30"/></name></expr>;<pos:position pos:line="1403" pos:column="31"/></expr_stmt>
            <goto pos:line="1404" pos:column="13">goto <name pos:line="1404" pos:column="18">FAILED<pos:position pos:line="1404" pos:column="24"/></name>;<pos:position pos:line="1404" pos:column="25"/></goto>
            }<pos:position pos:line="1405" pos:column="14"/></block></then></if>

          <expr_stmt><expr><name pos:line="1407" pos:column="11">recno<pos:position pos:line="1407" pos:column="16"/></name> <operator pos:line="1407" pos:column="17">=<pos:position pos:line="1407" pos:column="18"/></operator> <call><name pos:line="1407" pos:column="19">GET2<pos:position pos:line="1407" pos:column="23"/></name><argument_list pos:line="1407" pos:column="23">(<argument><expr><name pos:line="1407" pos:column="24">slot<pos:position pos:line="1407" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1407" pos:column="30">0<pos:position pos:line="1407" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="1407" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="1407" pos:column="33"/></expr_stmt>

          <if pos:line="1409" pos:column="11">if <condition pos:line="1409" pos:column="14">(<expr><name pos:line="1409" pos:column="15">type<pos:position pos:line="1409" pos:column="19"/></name> <operator pos:line="1409" pos:column="20">==<pos:position pos:line="1409" pos:column="22"/></operator> <literal type="char" pos:line="1409" pos:column="23">'&gt;'<pos:position pos:line="1409" pos:column="29"/></literal></expr>)<pos:position pos:line="1409" pos:column="27"/></condition><then pos:line="1409" pos:column="27"> <block type="pseudo"><goto pos:line="1409" pos:column="28">goto <name pos:line="1409" pos:column="33">HANDLE_RECURSION<pos:position pos:line="1409" pos:column="49"/></name>;<pos:position pos:line="1409" pos:column="50"/></goto></block></then></if>  <comment type="block" pos:line="1409" pos:column="52">/* A few lines below */</comment>

          <comment type="block" pos:line="1411" pos:column="11">/* Back reference */</comment>

          <expr_stmt><expr><name pos:line="1413" pos:column="11">previous<pos:position pos:line="1413" pos:column="19"/></name> <operator pos:line="1413" pos:column="20">=<pos:position pos:line="1413" pos:column="21"/></operator> <name pos:line="1413" pos:column="22">code<pos:position pos:line="1413" pos:column="26"/></name></expr>;<pos:position pos:line="1413" pos:column="27"/></expr_stmt>
          <expr_stmt><expr><operator pos:line="1414" pos:column="11">*<pos:position pos:line="1414" pos:column="12"/></operator><name pos:line="1414" pos:column="12">code<pos:position pos:line="1414" pos:column="16"/></name><operator pos:line="1414" pos:column="16">++<pos:position pos:line="1414" pos:column="18"/></operator> <operator pos:line="1414" pos:column="19">=<pos:position pos:line="1414" pos:column="20"/></operator> <name pos:line="1414" pos:column="21">OP_REF<pos:position pos:line="1414" pos:column="27"/></name></expr>;<pos:position pos:line="1414" pos:column="28"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1415" pos:column="11">PUT2INC<pos:position pos:line="1415" pos:column="18"/></name><argument_list pos:line="1415" pos:column="18">(<argument><expr><name pos:line="1415" pos:column="19">code<pos:position pos:line="1415" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1415" pos:column="25">0<pos:position pos:line="1415" pos:column="26"/></literal></expr></argument>, <argument><expr><name pos:line="1415" pos:column="28">recno<pos:position pos:line="1415" pos:column="33"/></name></expr></argument>)<pos:position pos:line="1415" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="1415" pos:column="35"/></expr_stmt>
          <expr_stmt><expr><name><name pos:line="1416" pos:column="11">cd<pos:position pos:line="1416" pos:column="13"/></name><operator pos:line="1416" pos:column="13">-&gt;<pos:position pos:line="1416" pos:column="18"/></operator><name pos:line="1416" pos:column="15">backref_map<pos:position pos:line="1416" pos:column="26"/></name></name> <operator pos:line="1416" pos:column="27">|=<pos:position pos:line="1416" pos:column="29"/></operator> <ternary><condition><expr><operator pos:line="1416" pos:column="30">(<pos:position pos:line="1416" pos:column="31"/></operator><name pos:line="1416" pos:column="31">recno<pos:position pos:line="1416" pos:column="36"/></name> <operator pos:line="1416" pos:column="37">&lt;<pos:position pos:line="1416" pos:column="41"/></operator> <literal type="number" pos:line="1416" pos:column="39">32<pos:position pos:line="1416" pos:column="41"/></literal><operator pos:line="1416" pos:column="41">)<pos:position pos:line="1416" pos:column="42"/></operator></expr>?<pos:position pos:line="1416" pos:column="43"/></condition><then pos:line="1416" pos:column="43"> <expr><operator pos:line="1416" pos:column="44">(<pos:position pos:line="1416" pos:column="45"/></operator><literal type="number" pos:line="1416" pos:column="45">1<pos:position pos:line="1416" pos:column="46"/></literal> <operator pos:line="1416" pos:column="47">&lt;&lt;<pos:position pos:line="1416" pos:column="55"/></operator> <name pos:line="1416" pos:column="50">recno<pos:position pos:line="1416" pos:column="55"/></name><operator pos:line="1416" pos:column="55">)<pos:position pos:line="1416" pos:column="56"/></operator></expr> <pos:position pos:line="1416" pos:column="57"/></then><else pos:line="1416" pos:column="57">: <expr><literal type="number" pos:line="1416" pos:column="59">1<pos:position pos:line="1416" pos:column="60"/></literal></expr></else></ternary></expr>;<pos:position pos:line="1416" pos:column="61"/></expr_stmt>
          <if pos:line="1417" pos:column="11">if <condition pos:line="1417" pos:column="14">(<expr><name pos:line="1417" pos:column="15">recno<pos:position pos:line="1417" pos:column="20"/></name> <operator pos:line="1417" pos:column="21">&gt;<pos:position pos:line="1417" pos:column="25"/></operator> <name><name pos:line="1417" pos:column="23">cd<pos:position pos:line="1417" pos:column="25"/></name><operator pos:line="1417" pos:column="25">-&gt;<pos:position pos:line="1417" pos:column="30"/></operator><name pos:line="1417" pos:column="27">top_backref<pos:position pos:line="1417" pos:column="38"/></name></name></expr>)<pos:position pos:line="1417" pos:column="39"/></condition><then pos:line="1417" pos:column="39"> <block type="pseudo"><expr_stmt><expr><name><name pos:line="1417" pos:column="40">cd<pos:position pos:line="1417" pos:column="42"/></name><operator pos:line="1417" pos:column="42">-&gt;<pos:position pos:line="1417" pos:column="47"/></operator><name pos:line="1417" pos:column="44">top_backref<pos:position pos:line="1417" pos:column="55"/></name></name> <operator pos:line="1417" pos:column="56">=<pos:position pos:line="1417" pos:column="57"/></operator> <name pos:line="1417" pos:column="58">recno<pos:position pos:line="1417" pos:column="63"/></name></expr>;<pos:position pos:line="1417" pos:column="64"/></expr_stmt></block></then></if>
          <continue pos:line="1418" pos:column="11">continue;<pos:position pos:line="1418" pos:column="20"/></continue>
          }<pos:position pos:line="1419" pos:column="12"/></block></then></if>

        <comment type="block" pos:line="1421" pos:column="9">/* Should never happen */</comment>
        <break pos:line="1422" pos:column="9">break;<pos:position pos:line="1422" pos:column="15"/></break>

        <case pos:line="1424" pos:column="9">case <expr><literal type="char" pos:line="1424" pos:column="14">'R'<pos:position pos:line="1424" pos:column="17"/></literal></expr>:<pos:position pos:line="1424" pos:column="18"/></case>                 <comment type="block" pos:line="1424" pos:column="35">/* Pattern recursion */</comment>
        <expr_stmt><expr><name pos:line="1425" pos:column="9">ptr<pos:position pos:line="1425" pos:column="12"/></name><operator pos:line="1425" pos:column="12">++<pos:position pos:line="1425" pos:column="14"/></operator></expr>;<pos:position pos:line="1425" pos:column="15"/></expr_stmt>                    <comment type="block" pos:line="1425" pos:column="35">/* Same as (?0)      */</comment>
        <comment type="block" pos:line="1426" pos:column="9">/* Fall through */</comment>

        <comment type="block" pos:line="1428" pos:column="9">/* Recursion or "subroutine" call */</comment>

        <case pos:line="1430" pos:column="9">case <expr><literal type="char" pos:line="1430" pos:column="14">'0'<pos:position pos:line="1430" pos:column="17"/></literal></expr>:<pos:position pos:line="1430" pos:column="18"/></case> <case pos:line="1430" pos:column="19">case <expr><literal type="char" pos:line="1430" pos:column="24">'1'<pos:position pos:line="1430" pos:column="27"/></literal></expr>:<pos:position pos:line="1430" pos:column="28"/></case> <case pos:line="1430" pos:column="29">case <expr><literal type="char" pos:line="1430" pos:column="34">'2'<pos:position pos:line="1430" pos:column="37"/></literal></expr>:<pos:position pos:line="1430" pos:column="38"/></case> <case pos:line="1430" pos:column="39">case <expr><literal type="char" pos:line="1430" pos:column="44">'3'<pos:position pos:line="1430" pos:column="47"/></literal></expr>:<pos:position pos:line="1430" pos:column="48"/></case> <case pos:line="1430" pos:column="49">case <expr><literal type="char" pos:line="1430" pos:column="54">'4'<pos:position pos:line="1430" pos:column="57"/></literal></expr>:<pos:position pos:line="1430" pos:column="58"/></case>
        <case pos:line="1431" pos:column="9">case <expr><literal type="char" pos:line="1431" pos:column="14">'5'<pos:position pos:line="1431" pos:column="17"/></literal></expr>:<pos:position pos:line="1431" pos:column="18"/></case> <case pos:line="1431" pos:column="19">case <expr><literal type="char" pos:line="1431" pos:column="24">'6'<pos:position pos:line="1431" pos:column="27"/></literal></expr>:<pos:position pos:line="1431" pos:column="28"/></case> <case pos:line="1431" pos:column="29">case <expr><literal type="char" pos:line="1431" pos:column="34">'7'<pos:position pos:line="1431" pos:column="37"/></literal></expr>:<pos:position pos:line="1431" pos:column="38"/></case> <case pos:line="1431" pos:column="39">case <expr><literal type="char" pos:line="1431" pos:column="44">'8'<pos:position pos:line="1431" pos:column="47"/></literal></expr>:<pos:position pos:line="1431" pos:column="48"/></case> <case pos:line="1431" pos:column="49">case <expr><literal type="char" pos:line="1431" pos:column="54">'9'<pos:position pos:line="1431" pos:column="57"/></literal></expr>:<pos:position pos:line="1431" pos:column="58"/></case>
          <block pos:line="1432" pos:column="11">{
          <decl_stmt><decl><type><specifier pos:line="1433" pos:column="11">const<pos:position pos:line="1433" pos:column="16"/></specifier> <name pos:line="1433" pos:column="17">uschar<pos:position pos:line="1433" pos:column="23"/></name> <modifier pos:line="1433" pos:column="24">*<pos:position pos:line="1433" pos:column="25"/></modifier></type><name pos:line="1433" pos:column="25">called<pos:position pos:line="1433" pos:column="31"/></name></decl>;<pos:position pos:line="1433" pos:column="32"/></decl_stmt>
          <expr_stmt><expr><name pos:line="1434" pos:column="11">recno<pos:position pos:line="1434" pos:column="16"/></name> <operator pos:line="1434" pos:column="17">=<pos:position pos:line="1434" pos:column="18"/></operator> <literal type="number" pos:line="1434" pos:column="19">0<pos:position pos:line="1434" pos:column="20"/></literal></expr>;<pos:position pos:line="1434" pos:column="21"/></expr_stmt>
          <while pos:line="1435" pos:column="11">while<condition pos:line="1435" pos:column="16">(<expr><operator pos:line="1435" pos:column="17">(<pos:position pos:line="1435" pos:column="18"/></operator><name><name pos:line="1435" pos:column="18">digitab<pos:position pos:line="1435" pos:column="25"/></name><index pos:line="1435" pos:column="25">[<expr><operator pos:line="1435" pos:column="26">*<pos:position pos:line="1435" pos:column="27"/></operator><name pos:line="1435" pos:column="27">ptr<pos:position pos:line="1435" pos:column="30"/></name></expr>]<pos:position pos:line="1435" pos:column="31"/></index></name> <operator pos:line="1435" pos:column="32">&amp;<pos:position pos:line="1435" pos:column="37"/></operator> <name pos:line="1435" pos:column="34">ctype_digit<pos:position pos:line="1435" pos:column="45"/></name><operator pos:line="1435" pos:column="45">)<pos:position pos:line="1435" pos:column="46"/></operator> <operator pos:line="1435" pos:column="47">!=<pos:position pos:line="1435" pos:column="49"/></operator> <literal type="number" pos:line="1435" pos:column="50">0<pos:position pos:line="1435" pos:column="51"/></literal></expr>)<pos:position pos:line="1435" pos:column="52"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="1436" pos:column="13">recno<pos:position pos:line="1436" pos:column="18"/></name> <operator pos:line="1436" pos:column="19">=<pos:position pos:line="1436" pos:column="20"/></operator> <name pos:line="1436" pos:column="21">recno<pos:position pos:line="1436" pos:column="26"/></name> <operator pos:line="1436" pos:column="27">*<pos:position pos:line="1436" pos:column="28"/></operator> <literal type="number" pos:line="1436" pos:column="29">10<pos:position pos:line="1436" pos:column="31"/></literal> <operator pos:line="1436" pos:column="32">+<pos:position pos:line="1436" pos:column="33"/></operator> <operator pos:line="1436" pos:column="34">*<pos:position pos:line="1436" pos:column="35"/></operator><name pos:line="1436" pos:column="35">ptr<pos:position pos:line="1436" pos:column="38"/></name><operator pos:line="1436" pos:column="38">++<pos:position pos:line="1436" pos:column="40"/></operator> <operator pos:line="1436" pos:column="41">-<pos:position pos:line="1436" pos:column="42"/></operator> <literal type="char" pos:line="1436" pos:column="43">'0'<pos:position pos:line="1436" pos:column="46"/></literal></expr>;<pos:position pos:line="1436" pos:column="47"/></expr_stmt></block></while>

          <comment type="block" pos:line="1438" pos:column="11">/* Come here from code above that handles a named recursion */</comment>

          <label><name pos:line="1440" pos:column="11">HANDLE_RECURSION<pos:position pos:line="1440" pos:column="27"/></name>:<pos:position pos:line="1440" pos:column="28"/></label>

          <expr_stmt><expr><name pos:line="1442" pos:column="11">previous<pos:position pos:line="1442" pos:column="19"/></name> <operator pos:line="1442" pos:column="20">=<pos:position pos:line="1442" pos:column="21"/></operator> <name pos:line="1442" pos:column="22">code<pos:position pos:line="1442" pos:column="26"/></name></expr>;<pos:position pos:line="1442" pos:column="27"/></expr_stmt>

          <comment type="block" pos:line="1444" pos:column="11">/* Find the bracket that is being referenced. Temporarily end the
          regex in case it doesn't exist. */</comment>

          <expr_stmt><expr><operator pos:line="1447" pos:column="11">*<pos:position pos:line="1447" pos:column="12"/></operator><name pos:line="1447" pos:column="12">code<pos:position pos:line="1447" pos:column="16"/></name> <operator pos:line="1447" pos:column="17">=<pos:position pos:line="1447" pos:column="18"/></operator> <name pos:line="1447" pos:column="19">OP_END<pos:position pos:line="1447" pos:column="25"/></name></expr>;<pos:position pos:line="1447" pos:column="26"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1448" pos:column="11">called<pos:position pos:line="1448" pos:column="17"/></name> <operator pos:line="1448" pos:column="18">=<pos:position pos:line="1448" pos:column="19"/></operator> <ternary><condition><expr><operator pos:line="1448" pos:column="20">(<pos:position pos:line="1448" pos:column="21"/></operator><name pos:line="1448" pos:column="21">recno<pos:position pos:line="1448" pos:column="26"/></name> <operator pos:line="1448" pos:column="27">==<pos:position pos:line="1448" pos:column="29"/></operator> <literal type="number" pos:line="1448" pos:column="30">0<pos:position pos:line="1448" pos:column="31"/></literal><operator pos:line="1448" pos:column="31">)<pos:position pos:line="1448" pos:column="32"/></operator></expr>?<pos:position pos:line="1448" pos:column="33"/></condition><then pos:line="1448" pos:column="33">
            <expr><name><name pos:line="1449" pos:column="13">cd<pos:position pos:line="1449" pos:column="15"/></name><operator pos:line="1449" pos:column="15">-&gt;<pos:position pos:line="1449" pos:column="20"/></operator><name pos:line="1449" pos:column="17">start_code<pos:position pos:line="1449" pos:column="27"/></name></name></expr> <pos:position pos:line="1449" pos:column="28"/></then><else pos:line="1449" pos:column="28">: <expr><call><name pos:line="1449" pos:column="30">find_bracket<pos:position pos:line="1449" pos:column="42"/></name><argument_list pos:line="1449" pos:column="42">(<argument><expr><name><name pos:line="1449" pos:column="43">cd<pos:position pos:line="1449" pos:column="45"/></name><operator pos:line="1449" pos:column="45">-&gt;<pos:position pos:line="1449" pos:column="50"/></operator><name pos:line="1449" pos:column="47">start_code<pos:position pos:line="1449" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="59">utf8<pos:position pos:line="1449" pos:column="63"/></name></expr></argument>, <argument><expr><name pos:line="1449" pos:column="65">recno<pos:position pos:line="1449" pos:column="70"/></name></expr></argument>)<pos:position pos:line="1449" pos:column="71"/></argument_list></call></expr></else></ternary></expr>;<pos:position pos:line="1449" pos:column="72"/></expr_stmt>

          <if pos:line="1451" pos:column="11">if <condition pos:line="1451" pos:column="14">(<expr><name pos:line="1451" pos:column="15">called<pos:position pos:line="1451" pos:column="21"/></name> <operator pos:line="1451" pos:column="22">==<pos:position pos:line="1451" pos:column="24"/></operator> <name pos:line="1451" pos:column="25">NULL<pos:position pos:line="1451" pos:column="29"/></name></expr>)<pos:position pos:line="1451" pos:column="30"/></condition><then pos:line="1451" pos:column="30">
            <block pos:line="1452" pos:column="13">{
            <expr_stmt><expr><operator pos:line="1453" pos:column="13">*<pos:position pos:line="1453" pos:column="14"/></operator><name pos:line="1453" pos:column="14">errorptr<pos:position pos:line="1453" pos:column="22"/></name> <operator pos:line="1453" pos:column="23">=<pos:position pos:line="1453" pos:column="24"/></operator> <name pos:line="1453" pos:column="25">ERR15<pos:position pos:line="1453" pos:column="30"/></name></expr>;<pos:position pos:line="1453" pos:column="31"/></expr_stmt>
            <goto pos:line="1454" pos:column="13">goto <name pos:line="1454" pos:column="18">FAILED<pos:position pos:line="1454" pos:column="24"/></name>;<pos:position pos:line="1454" pos:column="25"/></goto>
            }<pos:position pos:line="1455" pos:column="14"/></block></then></if>

          <comment type="block" pos:line="1457" pos:column="11">/* If the subpattern is still open, this is a recursive call. We
          check to see if this is a left recursion that could loop for ever,
          and diagnose that case. */</comment>

          <if pos:line="1461" pos:column="11">if <condition pos:line="1461" pos:column="14">(<expr><call><name pos:line="1461" pos:column="15">GET<pos:position pos:line="1461" pos:column="18"/></name><argument_list pos:line="1461" pos:column="18">(<argument><expr><name pos:line="1461" pos:column="19">called<pos:position pos:line="1461" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1461" pos:column="27">1<pos:position pos:line="1461" pos:column="28"/></literal></expr></argument>)<pos:position pos:line="1461" pos:column="29"/></argument_list></call> <operator pos:line="1461" pos:column="30">==<pos:position pos:line="1461" pos:column="32"/></operator> <literal type="number" pos:line="1461" pos:column="33">0<pos:position pos:line="1461" pos:column="34"/></literal> <operator pos:line="1461" pos:column="35">&amp;&amp;<pos:position pos:line="1461" pos:column="45"/></operator> <call><name pos:line="1461" pos:column="38">could_be_empty<pos:position pos:line="1461" pos:column="52"/></name><argument_list pos:line="1461" pos:column="52">(<argument><expr><name pos:line="1461" pos:column="53">called<pos:position pos:line="1461" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="1461" pos:column="61">code<pos:position pos:line="1461" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="1461" pos:column="67">bcptr<pos:position pos:line="1461" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="1461" pos:column="74">utf8<pos:position pos:line="1461" pos:column="78"/></name></expr></argument>)<pos:position pos:line="1461" pos:column="79"/></argument_list></call></expr>)<pos:position pos:line="1461" pos:column="80"/></condition><then pos:line="1461" pos:column="80">
            <block pos:line="1462" pos:column="13">{
            <expr_stmt><expr><operator pos:line="1463" pos:column="13">*<pos:position pos:line="1463" pos:column="14"/></operator><name pos:line="1463" pos:column="14">errorptr<pos:position pos:line="1463" pos:column="22"/></name> <operator pos:line="1463" pos:column="23">=<pos:position pos:line="1463" pos:column="24"/></operator> <name pos:line="1463" pos:column="25">ERR40<pos:position pos:line="1463" pos:column="30"/></name></expr>;<pos:position pos:line="1463" pos:column="31"/></expr_stmt>
            <goto pos:line="1464" pos:column="13">goto <name pos:line="1464" pos:column="18">FAILED<pos:position pos:line="1464" pos:column="24"/></name>;<pos:position pos:line="1464" pos:column="25"/></goto>
            }<pos:position pos:line="1465" pos:column="14"/></block></then></if>

          <comment type="block" pos:line="1467" pos:column="11">/* Insert the recursion/subroutine item */</comment>

          <expr_stmt><expr><operator pos:line="1469" pos:column="11">*<pos:position pos:line="1469" pos:column="12"/></operator><name pos:line="1469" pos:column="12">code<pos:position pos:line="1469" pos:column="16"/></name> <operator pos:line="1469" pos:column="17">=<pos:position pos:line="1469" pos:column="18"/></operator> <name pos:line="1469" pos:column="19">OP_RECURSE<pos:position pos:line="1469" pos:column="29"/></name></expr>;<pos:position pos:line="1469" pos:column="30"/></expr_stmt>
          <expr_stmt><expr><call><name pos:line="1470" pos:column="11">PUT<pos:position pos:line="1470" pos:column="14"/></name><argument_list pos:line="1470" pos:column="14">(<argument><expr><name pos:line="1470" pos:column="15">code<pos:position pos:line="1470" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1470" pos:column="21">1<pos:position pos:line="1470" pos:column="22"/></literal></expr></argument>, <argument><expr><name pos:line="1470" pos:column="24">called<pos:position pos:line="1470" pos:column="30"/></name> <operator pos:line="1470" pos:column="31">-<pos:position pos:line="1470" pos:column="32"/></operator> <name><name pos:line="1470" pos:column="33">cd<pos:position pos:line="1470" pos:column="35"/></name><operator pos:line="1470" pos:column="35">-&gt;<pos:position pos:line="1470" pos:column="40"/></operator><name pos:line="1470" pos:column="37">start_code<pos:position pos:line="1470" pos:column="47"/></name></name></expr></argument>)<pos:position pos:line="1470" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1470" pos:column="49"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1471" pos:column="11">code<pos:position pos:line="1471" pos:column="15"/></name> <operator pos:line="1471" pos:column="16">+=<pos:position pos:line="1471" pos:column="18"/></operator> <literal type="number" pos:line="1471" pos:column="19">1<pos:position pos:line="1471" pos:column="20"/></literal> <operator pos:line="1471" pos:column="21">+<pos:position pos:line="1471" pos:column="22"/></operator> <name pos:line="1471" pos:column="23">LINK_SIZE<pos:position pos:line="1471" pos:column="32"/></name></expr>;<pos:position pos:line="1471" pos:column="33"/></expr_stmt>
          }<pos:position pos:line="1472" pos:column="12"/></block>
        <continue pos:line="1473" pos:column="9">continue;<pos:position pos:line="1473" pos:column="18"/></continue>

        <comment type="block" pos:line="1475" pos:column="9">/* Character after (? not specially recognized */</comment>

        <default pos:line="1477" pos:column="9">default:<pos:position pos:line="1477" pos:column="17"/></default>                  <comment type="block" pos:line="1477" pos:column="35">/* Option setting */</comment>
        <expr_stmt><expr><name pos:line="1478" pos:column="9">set<pos:position pos:line="1478" pos:column="12"/></name> <operator pos:line="1478" pos:column="13">=<pos:position pos:line="1478" pos:column="14"/></operator> <name pos:line="1478" pos:column="15">unset<pos:position pos:line="1478" pos:column="20"/></name> <operator pos:line="1478" pos:column="21">=<pos:position pos:line="1478" pos:column="22"/></operator> <literal type="number" pos:line="1478" pos:column="23">0<pos:position pos:line="1478" pos:column="24"/></literal></expr>;<pos:position pos:line="1478" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1479" pos:column="9">optset<pos:position pos:line="1479" pos:column="15"/></name> <operator pos:line="1479" pos:column="16">=<pos:position pos:line="1479" pos:column="17"/></operator> <operator pos:line="1479" pos:column="18">&amp;<pos:position pos:line="1479" pos:column="23"/></operator><name pos:line="1479" pos:column="19">set<pos:position pos:line="1479" pos:column="22"/></name></expr>;<pos:position pos:line="1479" pos:column="23"/></expr_stmt>

        <while pos:line="1481" pos:column="9">while <condition pos:line="1481" pos:column="15">(<expr><operator pos:line="1481" pos:column="16">*<pos:position pos:line="1481" pos:column="17"/></operator><name pos:line="1481" pos:column="17">ptr<pos:position pos:line="1481" pos:column="20"/></name> <operator pos:line="1481" pos:column="21">!=<pos:position pos:line="1481" pos:column="23"/></operator> <literal type="char" pos:line="1481" pos:column="24">')'<pos:position pos:line="1481" pos:column="27"/></literal> <operator pos:line="1481" pos:column="28">&amp;&amp;<pos:position pos:line="1481" pos:column="38"/></operator> <operator pos:line="1481" pos:column="31">*<pos:position pos:line="1481" pos:column="32"/></operator><name pos:line="1481" pos:column="32">ptr<pos:position pos:line="1481" pos:column="35"/></name> <operator pos:line="1481" pos:column="36">!=<pos:position pos:line="1481" pos:column="38"/></operator> <literal type="char" pos:line="1481" pos:column="39">':'<pos:position pos:line="1481" pos:column="42"/></literal></expr>)<pos:position pos:line="1481" pos:column="43"/></condition>
          <block pos:line="1482" pos:column="11">{
          <switch pos:line="1483" pos:column="11">switch <condition pos:line="1483" pos:column="18">(<expr><operator pos:line="1483" pos:column="19">*<pos:position pos:line="1483" pos:column="20"/></operator><name pos:line="1483" pos:column="20">ptr<pos:position pos:line="1483" pos:column="23"/></name><operator pos:line="1483" pos:column="23">++<pos:position pos:line="1483" pos:column="25"/></operator></expr>)<pos:position pos:line="1483" pos:column="26"/></condition>
            <block pos:line="1484" pos:column="13">{
            <case pos:line="1485" pos:column="13">case <expr><literal type="char" pos:line="1485" pos:column="18">'-'<pos:position pos:line="1485" pos:column="21"/></literal></expr>:<pos:position pos:line="1485" pos:column="22"/></case> <expr_stmt><expr><name pos:line="1485" pos:column="23">optset<pos:position pos:line="1485" pos:column="29"/></name> <operator pos:line="1485" pos:column="30">=<pos:position pos:line="1485" pos:column="31"/></operator> <operator pos:line="1485" pos:column="32">&amp;<pos:position pos:line="1485" pos:column="37"/></operator><name pos:line="1485" pos:column="33">unset<pos:position pos:line="1485" pos:column="38"/></name></expr>;<pos:position pos:line="1485" pos:column="39"/></expr_stmt> <break pos:line="1485" pos:column="40">break;<pos:position pos:line="1485" pos:column="46"/></break>

            <case pos:line="1487" pos:column="13">case <expr><literal type="char" pos:line="1487" pos:column="18">'i'<pos:position pos:line="1487" pos:column="21"/></literal></expr>:<pos:position pos:line="1487" pos:column="22"/></case> <expr_stmt><expr><operator pos:line="1487" pos:column="23">*<pos:position pos:line="1487" pos:column="24"/></operator><name pos:line="1487" pos:column="24">optset<pos:position pos:line="1487" pos:column="30"/></name> <operator pos:line="1487" pos:column="31">|=<pos:position pos:line="1487" pos:column="33"/></operator> <name pos:line="1487" pos:column="34">PCRE_CASELESS<pos:position pos:line="1487" pos:column="47"/></name></expr>;<pos:position pos:line="1487" pos:column="48"/></expr_stmt> <break pos:line="1487" pos:column="49">break;<pos:position pos:line="1487" pos:column="55"/></break>
            <case pos:line="1488" pos:column="13">case <expr><literal type="char" pos:line="1488" pos:column="18">'m'<pos:position pos:line="1488" pos:column="21"/></literal></expr>:<pos:position pos:line="1488" pos:column="22"/></case> <expr_stmt><expr><operator pos:line="1488" pos:column="23">*<pos:position pos:line="1488" pos:column="24"/></operator><name pos:line="1488" pos:column="24">optset<pos:position pos:line="1488" pos:column="30"/></name> <operator pos:line="1488" pos:column="31">|=<pos:position pos:line="1488" pos:column="33"/></operator> <name pos:line="1488" pos:column="34">PCRE_MULTILINE<pos:position pos:line="1488" pos:column="48"/></name></expr>;<pos:position pos:line="1488" pos:column="49"/></expr_stmt> <break pos:line="1488" pos:column="50">break;<pos:position pos:line="1488" pos:column="56"/></break>
            <case pos:line="1489" pos:column="13">case <expr><literal type="char" pos:line="1489" pos:column="18">'s'<pos:position pos:line="1489" pos:column="21"/></literal></expr>:<pos:position pos:line="1489" pos:column="22"/></case> <expr_stmt><expr><operator pos:line="1489" pos:column="23">*<pos:position pos:line="1489" pos:column="24"/></operator><name pos:line="1489" pos:column="24">optset<pos:position pos:line="1489" pos:column="30"/></name> <operator pos:line="1489" pos:column="31">|=<pos:position pos:line="1489" pos:column="33"/></operator> <name pos:line="1489" pos:column="34">PCRE_DOTALL<pos:position pos:line="1489" pos:column="45"/></name></expr>;<pos:position pos:line="1489" pos:column="46"/></expr_stmt> <break pos:line="1489" pos:column="47">break;<pos:position pos:line="1489" pos:column="53"/></break>
            <case pos:line="1490" pos:column="13">case <expr><literal type="char" pos:line="1490" pos:column="18">'x'<pos:position pos:line="1490" pos:column="21"/></literal></expr>:<pos:position pos:line="1490" pos:column="22"/></case> <expr_stmt><expr><operator pos:line="1490" pos:column="23">*<pos:position pos:line="1490" pos:column="24"/></operator><name pos:line="1490" pos:column="24">optset<pos:position pos:line="1490" pos:column="30"/></name> <operator pos:line="1490" pos:column="31">|=<pos:position pos:line="1490" pos:column="33"/></operator> <name pos:line="1490" pos:column="34">PCRE_EXTENDED<pos:position pos:line="1490" pos:column="47"/></name></expr>;<pos:position pos:line="1490" pos:column="48"/></expr_stmt> <break pos:line="1490" pos:column="49">break;<pos:position pos:line="1490" pos:column="55"/></break>
            <case pos:line="1491" pos:column="13">case <expr><literal type="char" pos:line="1491" pos:column="18">'U'<pos:position pos:line="1491" pos:column="21"/></literal></expr>:<pos:position pos:line="1491" pos:column="22"/></case> <expr_stmt><expr><operator pos:line="1491" pos:column="23">*<pos:position pos:line="1491" pos:column="24"/></operator><name pos:line="1491" pos:column="24">optset<pos:position pos:line="1491" pos:column="30"/></name> <operator pos:line="1491" pos:column="31">|=<pos:position pos:line="1491" pos:column="33"/></operator> <name pos:line="1491" pos:column="34">PCRE_UNGREEDY<pos:position pos:line="1491" pos:column="47"/></name></expr>;<pos:position pos:line="1491" pos:column="48"/></expr_stmt> <break pos:line="1491" pos:column="49">break;<pos:position pos:line="1491" pos:column="55"/></break>
            <case pos:line="1492" pos:column="13">case <expr><literal type="char" pos:line="1492" pos:column="18">'X'<pos:position pos:line="1492" pos:column="21"/></literal></expr>:<pos:position pos:line="1492" pos:column="22"/></case> <expr_stmt><expr><operator pos:line="1492" pos:column="23">*<pos:position pos:line="1492" pos:column="24"/></operator><name pos:line="1492" pos:column="24">optset<pos:position pos:line="1492" pos:column="30"/></name> <operator pos:line="1492" pos:column="31">|=<pos:position pos:line="1492" pos:column="33"/></operator> <name pos:line="1492" pos:column="34">PCRE_EXTRA<pos:position pos:line="1492" pos:column="44"/></name></expr>;<pos:position pos:line="1492" pos:column="45"/></expr_stmt> <break pos:line="1492" pos:column="46">break;<pos:position pos:line="1492" pos:column="52"/></break>
            }<pos:position pos:line="1493" pos:column="14"/></block></switch>
          }<pos:position pos:line="1494" pos:column="12"/></block></while>

        <comment type="block" pos:line="1496" pos:column="9">/* Set up the changed option bits, but don't change anything yet. */</comment>

        <expr_stmt><expr><name pos:line="1498" pos:column="9">newoptions<pos:position pos:line="1498" pos:column="19"/></name> <operator pos:line="1498" pos:column="20">=<pos:position pos:line="1498" pos:column="21"/></operator> <operator pos:line="1498" pos:column="22">(<pos:position pos:line="1498" pos:column="23"/></operator><name pos:line="1498" pos:column="23">options<pos:position pos:line="1498" pos:column="30"/></name> <operator pos:line="1498" pos:column="31">|<pos:position pos:line="1498" pos:column="32"/></operator> <name pos:line="1498" pos:column="33">set<pos:position pos:line="1498" pos:column="36"/></name><operator pos:line="1498" pos:column="36">)<pos:position pos:line="1498" pos:column="37"/></operator> <operator pos:line="1498" pos:column="38">&amp;<pos:position pos:line="1498" pos:column="43"/></operator> <operator pos:line="1498" pos:column="40">(<pos:position pos:line="1498" pos:column="41"/></operator><operator pos:line="1498" pos:column="41">~<pos:position pos:line="1498" pos:column="42"/></operator><name pos:line="1498" pos:column="42">unset<pos:position pos:line="1498" pos:column="47"/></name><operator pos:line="1498" pos:column="47">)<pos:position pos:line="1498" pos:column="48"/></operator></expr>;<pos:position pos:line="1498" pos:column="49"/></expr_stmt>

        <comment type="block" pos:line="1500" pos:column="9">/* If the options ended with ')' this is not the start of a nested
        group with option changes, so the options change at this level. Compile
        code to change the ims options if this setting actually changes any of
        them. We also pass the new setting back so that it can be put at the
        start of any following branches, and when this group ends (if we are in
        a group), a resetting item can be compiled.

        Note that if this item is right at the start of the pattern, the
        options will have been abstracted and made global, so there will be no
        change to compile. */</comment>

        <if pos:line="1511" pos:column="9">if <condition pos:line="1511" pos:column="12">(<expr><operator pos:line="1511" pos:column="13">*<pos:position pos:line="1511" pos:column="14"/></operator><name pos:line="1511" pos:column="14">ptr<pos:position pos:line="1511" pos:column="17"/></name> <operator pos:line="1511" pos:column="18">==<pos:position pos:line="1511" pos:column="20"/></operator> <literal type="char" pos:line="1511" pos:column="21">')'<pos:position pos:line="1511" pos:column="24"/></literal></expr>)<pos:position pos:line="1511" pos:column="25"/></condition><then pos:line="1511" pos:column="25">
          <block pos:line="1512" pos:column="11">{
          <if pos:line="1513" pos:column="11">if <condition pos:line="1513" pos:column="14">(<expr><operator pos:line="1513" pos:column="15">(<pos:position pos:line="1513" pos:column="16"/></operator><name pos:line="1513" pos:column="16">options<pos:position pos:line="1513" pos:column="23"/></name> <operator pos:line="1513" pos:column="24">&amp;<pos:position pos:line="1513" pos:column="29"/></operator> <name pos:line="1513" pos:column="26">PCRE_IMS<pos:position pos:line="1513" pos:column="34"/></name><operator pos:line="1513" pos:column="34">)<pos:position pos:line="1513" pos:column="35"/></operator> <operator pos:line="1513" pos:column="36">!=<pos:position pos:line="1513" pos:column="38"/></operator> <operator pos:line="1513" pos:column="39">(<pos:position pos:line="1513" pos:column="40"/></operator><name pos:line="1513" pos:column="40">newoptions<pos:position pos:line="1513" pos:column="50"/></name> <operator pos:line="1513" pos:column="51">&amp;<pos:position pos:line="1513" pos:column="56"/></operator> <name pos:line="1513" pos:column="53">PCRE_IMS<pos:position pos:line="1513" pos:column="61"/></name><operator pos:line="1513" pos:column="61">)<pos:position pos:line="1513" pos:column="62"/></operator></expr>)<pos:position pos:line="1513" pos:column="63"/></condition><then pos:line="1513" pos:column="63">
            <block pos:line="1514" pos:column="13">{
            <expr_stmt><expr><operator pos:line="1515" pos:column="13">*<pos:position pos:line="1515" pos:column="14"/></operator><name pos:line="1515" pos:column="14">code<pos:position pos:line="1515" pos:column="18"/></name><operator pos:line="1515" pos:column="18">++<pos:position pos:line="1515" pos:column="20"/></operator> <operator pos:line="1515" pos:column="21">=<pos:position pos:line="1515" pos:column="22"/></operator> <name pos:line="1515" pos:column="23">OP_OPT<pos:position pos:line="1515" pos:column="29"/></name></expr>;<pos:position pos:line="1515" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="1516" pos:column="13">*<pos:position pos:line="1516" pos:column="14"/></operator><name pos:line="1516" pos:column="14">code<pos:position pos:line="1516" pos:column="18"/></name><operator pos:line="1516" pos:column="18">++<pos:position pos:line="1516" pos:column="20"/></operator> <operator pos:line="1516" pos:column="21">=<pos:position pos:line="1516" pos:column="22"/></operator> <name pos:line="1516" pos:column="23">newoptions<pos:position pos:line="1516" pos:column="33"/></name> <operator pos:line="1516" pos:column="34">&amp;<pos:position pos:line="1516" pos:column="39"/></operator> <name pos:line="1516" pos:column="36">PCRE_IMS<pos:position pos:line="1516" pos:column="44"/></name></expr>;<pos:position pos:line="1516" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="1517" pos:column="14"/></block></then></if>

          <comment type="block" pos:line="1519" pos:column="11">/* Change options at this level, and pass them back for use
          in subsequent branches. Reset the greedy defaults and the case
          value for firstbyte and reqbyte. */</comment>

          <expr_stmt><expr><operator pos:line="1523" pos:column="11">*<pos:position pos:line="1523" pos:column="12"/></operator><name pos:line="1523" pos:column="12">optionsptr<pos:position pos:line="1523" pos:column="22"/></name> <operator pos:line="1523" pos:column="23">=<pos:position pos:line="1523" pos:column="24"/></operator> <name pos:line="1523" pos:column="25">options<pos:position pos:line="1523" pos:column="32"/></name> <operator pos:line="1523" pos:column="33">=<pos:position pos:line="1523" pos:column="34"/></operator> <name pos:line="1523" pos:column="35">newoptions<pos:position pos:line="1523" pos:column="45"/></name></expr>;<pos:position pos:line="1523" pos:column="46"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1524" pos:column="11">greedy_default<pos:position pos:line="1524" pos:column="25"/></name> <operator pos:line="1524" pos:column="26">=<pos:position pos:line="1524" pos:column="27"/></operator> <operator pos:line="1524" pos:column="28">(<pos:position pos:line="1524" pos:column="29"/></operator><operator pos:line="1524" pos:column="29">(<pos:position pos:line="1524" pos:column="30"/></operator><name pos:line="1524" pos:column="30">newoptions<pos:position pos:line="1524" pos:column="40"/></name> <operator pos:line="1524" pos:column="41">&amp;<pos:position pos:line="1524" pos:column="46"/></operator> <name pos:line="1524" pos:column="43">PCRE_UNGREEDY<pos:position pos:line="1524" pos:column="56"/></name><operator pos:line="1524" pos:column="56">)<pos:position pos:line="1524" pos:column="57"/></operator> <operator pos:line="1524" pos:column="58">!=<pos:position pos:line="1524" pos:column="60"/></operator> <literal type="number" pos:line="1524" pos:column="61">0<pos:position pos:line="1524" pos:column="62"/></literal><operator pos:line="1524" pos:column="62">)<pos:position pos:line="1524" pos:column="63"/></operator></expr>;<pos:position pos:line="1524" pos:column="64"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1525" pos:column="11">greedy_non_default<pos:position pos:line="1525" pos:column="29"/></name> <operator pos:line="1525" pos:column="30">=<pos:position pos:line="1525" pos:column="31"/></operator> <name pos:line="1525" pos:column="32">greedy_default<pos:position pos:line="1525" pos:column="46"/></name> <operator pos:line="1525" pos:column="47">^<pos:position pos:line="1525" pos:column="48"/></operator> <literal type="number" pos:line="1525" pos:column="49">1<pos:position pos:line="1525" pos:column="50"/></literal></expr>;<pos:position pos:line="1525" pos:column="51"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1526" pos:column="11">req_caseopt<pos:position pos:line="1526" pos:column="22"/></name> <operator pos:line="1526" pos:column="23">=<pos:position pos:line="1526" pos:column="24"/></operator> <ternary><condition><expr><operator pos:line="1526" pos:column="25">(<pos:position pos:line="1526" pos:column="26"/></operator><operator pos:line="1526" pos:column="26">(<pos:position pos:line="1526" pos:column="27"/></operator><name pos:line="1526" pos:column="27">options<pos:position pos:line="1526" pos:column="34"/></name> <operator pos:line="1526" pos:column="35">&amp;<pos:position pos:line="1526" pos:column="40"/></operator> <name pos:line="1526" pos:column="37">PCRE_CASELESS<pos:position pos:line="1526" pos:column="50"/></name><operator pos:line="1526" pos:column="50">)<pos:position pos:line="1526" pos:column="51"/></operator> <operator pos:line="1526" pos:column="52">!=<pos:position pos:line="1526" pos:column="54"/></operator> <literal type="number" pos:line="1526" pos:column="55">0<pos:position pos:line="1526" pos:column="56"/></literal><operator pos:line="1526" pos:column="56">)<pos:position pos:line="1526" pos:column="57"/></operator></expr>?<pos:position pos:line="1526" pos:column="58"/></condition><then pos:line="1526" pos:column="58"> <expr><name pos:line="1526" pos:column="59">REQ_CASELESS<pos:position pos:line="1526" pos:column="71"/></name></expr> <pos:position pos:line="1526" pos:column="72"/></then><else pos:line="1526" pos:column="72">: <expr><literal type="number" pos:line="1526" pos:column="74">0<pos:position pos:line="1526" pos:column="75"/></literal></expr></else></ternary></expr>;<pos:position pos:line="1526" pos:column="76"/></expr_stmt>

          <expr_stmt><expr><name pos:line="1528" pos:column="11">previous<pos:position pos:line="1528" pos:column="19"/></name> <operator pos:line="1528" pos:column="20">=<pos:position pos:line="1528" pos:column="21"/></operator> <name pos:line="1528" pos:column="22">NULL<pos:position pos:line="1528" pos:column="26"/></name></expr>;<pos:position pos:line="1528" pos:column="27"/></expr_stmt>       <comment type="block" pos:line="1528" pos:column="34">/* This item can't be repeated */</comment>
          <continue pos:line="1529" pos:column="11">continue;<pos:position pos:line="1529" pos:column="20"/></continue>              <comment type="block" pos:line="1529" pos:column="34">/* It is complete */</comment>
          }<pos:position pos:line="1530" pos:column="12"/></block></then></if>

        <comment type="block" pos:line="1532" pos:column="9">/* If the options ended with ':' we are heading into a nested group
        with possible change of options. Such groups are non-capturing and are
        not assertions of any kind. All we need to do is skip over the ':';
        the newoptions value is handled below. */</comment>

        <expr_stmt><expr><name pos:line="1537" pos:column="9">bravalue<pos:position pos:line="1537" pos:column="17"/></name> <operator pos:line="1537" pos:column="18">=<pos:position pos:line="1537" pos:column="19"/></operator> <name pos:line="1537" pos:column="20">OP_BRA<pos:position pos:line="1537" pos:column="26"/></name></expr>;<pos:position pos:line="1537" pos:column="27"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1538" pos:column="9">ptr<pos:position pos:line="1538" pos:column="12"/></name><operator pos:line="1538" pos:column="12">++<pos:position pos:line="1538" pos:column="14"/></operator></expr>;<pos:position pos:line="1538" pos:column="15"/></expr_stmt>
        }<pos:position pos:line="1539" pos:column="10"/></block></switch>
      }<pos:position pos:line="1540" pos:column="8"/></block></then>

    <comment type="block" pos:line="1542" pos:column="5">/* If PCRE_NO_AUTO_CAPTURE is set, all unadorned brackets become
    non-capturing and behave like (?:...) brackets */</comment>

    <elseif pos:line="1545" pos:column="5">else <if pos:line="1545" pos:column="10">if <condition pos:line="1545" pos:column="13">(<expr><operator pos:line="1545" pos:column="14">(<pos:position pos:line="1545" pos:column="15"/></operator><name pos:line="1545" pos:column="15">options<pos:position pos:line="1545" pos:column="22"/></name> <operator pos:line="1545" pos:column="23">&amp;<pos:position pos:line="1545" pos:column="28"/></operator> <name pos:line="1545" pos:column="25">PCRE_NO_AUTO_CAPTURE<pos:position pos:line="1545" pos:column="45"/></name><operator pos:line="1545" pos:column="45">)<pos:position pos:line="1545" pos:column="46"/></operator> <operator pos:line="1545" pos:column="47">!=<pos:position pos:line="1545" pos:column="49"/></operator> <literal type="number" pos:line="1545" pos:column="50">0<pos:position pos:line="1545" pos:column="51"/></literal></expr>)<pos:position pos:line="1545" pos:column="52"/></condition><then pos:line="1545" pos:column="52">
      <block pos:line="1546" pos:column="7">{
      <expr_stmt><expr><name pos:line="1547" pos:column="7">bravalue<pos:position pos:line="1547" pos:column="15"/></name> <operator pos:line="1547" pos:column="16">=<pos:position pos:line="1547" pos:column="17"/></operator> <name pos:line="1547" pos:column="18">OP_BRA<pos:position pos:line="1547" pos:column="24"/></name></expr>;<pos:position pos:line="1547" pos:column="25"/></expr_stmt>
      }<pos:position pos:line="1548" pos:column="8"/></block></then></if></elseif>

    <comment type="block" pos:line="1550" pos:column="5">/* Else we have a referencing group; adjust the opcode. If the bracket
    number is greater than EXTRACT_BASIC_MAX, we set the opcode one higher, and
    arrange for the true number to follow later, in an OP_BRANUMBER item. */</comment>

    <else pos:line="1554" pos:column="5">else
      <block pos:line="1555" pos:column="7">{
      <label><name pos:line="1556" pos:column="7">NUMBERED_GROUP<pos:position pos:line="1556" pos:column="21"/></name>:<pos:position pos:line="1556" pos:column="22"/></label>
      <if pos:line="1557" pos:column="7">if <condition pos:line="1557" pos:column="10">(<expr><operator pos:line="1557" pos:column="11">++<pos:position pos:line="1557" pos:column="13"/></operator><operator pos:line="1557" pos:column="13">(<pos:position pos:line="1557" pos:column="14"/></operator><operator pos:line="1557" pos:column="14">*<pos:position pos:line="1557" pos:column="15"/></operator><name pos:line="1557" pos:column="15">brackets<pos:position pos:line="1557" pos:column="23"/></name><operator pos:line="1557" pos:column="23">)<pos:position pos:line="1557" pos:column="24"/></operator> <operator pos:line="1557" pos:column="25">&gt;<pos:position pos:line="1557" pos:column="29"/></operator> <name pos:line="1557" pos:column="27">EXTRACT_BASIC_MAX<pos:position pos:line="1557" pos:column="44"/></name></expr>)<pos:position pos:line="1557" pos:column="45"/></condition><then pos:line="1557" pos:column="45">
        <block pos:line="1558" pos:column="9">{
        <expr_stmt><expr><name pos:line="1559" pos:column="9">bravalue<pos:position pos:line="1559" pos:column="17"/></name> <operator pos:line="1559" pos:column="18">=<pos:position pos:line="1559" pos:column="19"/></operator> <name pos:line="1559" pos:column="20">OP_BRA<pos:position pos:line="1559" pos:column="26"/></name> <operator pos:line="1559" pos:column="27">+<pos:position pos:line="1559" pos:column="28"/></operator> <name pos:line="1559" pos:column="29">EXTRACT_BASIC_MAX<pos:position pos:line="1559" pos:column="46"/></name> <operator pos:line="1559" pos:column="47">+<pos:position pos:line="1559" pos:column="48"/></operator> <literal type="number" pos:line="1559" pos:column="49">1<pos:position pos:line="1559" pos:column="50"/></literal></expr>;<pos:position pos:line="1559" pos:column="51"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="1560" pos:column="9">code<pos:position pos:line="1560" pos:column="13"/></name><index pos:line="1560" pos:column="13">[<expr><literal type="number" pos:line="1560" pos:column="14">1<pos:position pos:line="1560" pos:column="15"/></literal><operator pos:line="1560" pos:column="15">+<pos:position pos:line="1560" pos:column="16"/></operator><name pos:line="1560" pos:column="16">LINK_SIZE<pos:position pos:line="1560" pos:column="25"/></name></expr>]<pos:position pos:line="1560" pos:column="26"/></index></name> <operator pos:line="1560" pos:column="27">=<pos:position pos:line="1560" pos:column="28"/></operator> <name pos:line="1560" pos:column="29">OP_BRANUMBER<pos:position pos:line="1560" pos:column="41"/></name></expr>;<pos:position pos:line="1560" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1561" pos:column="9">PUT2<pos:position pos:line="1561" pos:column="13"/></name><argument_list pos:line="1561" pos:column="13">(<argument><expr><name pos:line="1561" pos:column="14">code<pos:position pos:line="1561" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1561" pos:column="20">2<pos:position pos:line="1561" pos:column="21"/></literal><operator pos:line="1561" pos:column="21">+<pos:position pos:line="1561" pos:column="22"/></operator><name pos:line="1561" pos:column="22">LINK_SIZE<pos:position pos:line="1561" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="1561" pos:column="33">*<pos:position pos:line="1561" pos:column="34"/></operator><name pos:line="1561" pos:column="34">brackets<pos:position pos:line="1561" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1561" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="1561" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name pos:line="1562" pos:column="9">skipbytes<pos:position pos:line="1562" pos:column="18"/></name> <operator pos:line="1562" pos:column="19">=<pos:position pos:line="1562" pos:column="20"/></operator> <literal type="number" pos:line="1562" pos:column="21">3<pos:position pos:line="1562" pos:column="22"/></literal></expr>;<pos:position pos:line="1562" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="1563" pos:column="10"/></block></then>
      <else pos:line="1564" pos:column="7">else <block type="pseudo"><expr_stmt><expr><name pos:line="1564" pos:column="12">bravalue<pos:position pos:line="1564" pos:column="20"/></name> <operator pos:line="1564" pos:column="21">=<pos:position pos:line="1564" pos:column="22"/></operator> <name pos:line="1564" pos:column="23">OP_BRA<pos:position pos:line="1564" pos:column="29"/></name> <operator pos:line="1564" pos:column="30">+<pos:position pos:line="1564" pos:column="31"/></operator> <operator pos:line="1564" pos:column="32">*<pos:position pos:line="1564" pos:column="33"/></operator><name pos:line="1564" pos:column="33">brackets<pos:position pos:line="1564" pos:column="41"/></name></expr>;<pos:position pos:line="1564" pos:column="42"/></expr_stmt></block></else></if>
      }<pos:position pos:line="1565" pos:column="8"/></block></else></if>

    <comment type="block" pos:line="1567" pos:column="5">/* Process nested bracketed re. Assertions may not be repeated, but other
    kinds can be. We copy code into a non-register variable in order to be able
    to pass its address because some compilers complain otherwise. Pass in a
    new setting for the ims options if they have changed. */</comment>

    <expr_stmt><expr><name pos:line="1572" pos:column="5">previous<pos:position pos:line="1572" pos:column="13"/></name> <operator pos:line="1572" pos:column="14">=<pos:position pos:line="1572" pos:column="15"/></operator> <ternary><condition><expr><operator pos:line="1572" pos:column="16">(<pos:position pos:line="1572" pos:column="17"/></operator><name pos:line="1572" pos:column="17">bravalue<pos:position pos:line="1572" pos:column="25"/></name> <operator pos:line="1572" pos:column="26">&gt;=<pos:position pos:line="1572" pos:column="31"/></operator> <name pos:line="1572" pos:column="29">OP_ONCE<pos:position pos:line="1572" pos:column="36"/></name><operator pos:line="1572" pos:column="36">)<pos:position pos:line="1572" pos:column="37"/></operator></expr>?<pos:position pos:line="1572" pos:column="38"/></condition><then pos:line="1572" pos:column="38"> <expr><name pos:line="1572" pos:column="39">code<pos:position pos:line="1572" pos:column="43"/></name></expr> <pos:position pos:line="1572" pos:column="44"/></then><else pos:line="1572" pos:column="44">: <expr><name pos:line="1572" pos:column="46">NULL<pos:position pos:line="1572" pos:column="50"/></name></expr></else></ternary></expr>;<pos:position pos:line="1572" pos:column="51"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="1573" pos:column="5">*<pos:position pos:line="1573" pos:column="6"/></operator><name pos:line="1573" pos:column="6">code<pos:position pos:line="1573" pos:column="10"/></name> <operator pos:line="1573" pos:column="11">=<pos:position pos:line="1573" pos:column="12"/></operator> <name pos:line="1573" pos:column="13">bravalue<pos:position pos:line="1573" pos:column="21"/></name></expr>;<pos:position pos:line="1573" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1574" pos:column="5">tempcode<pos:position pos:line="1574" pos:column="13"/></name> <operator pos:line="1574" pos:column="14">=<pos:position pos:line="1574" pos:column="15"/></operator> <name pos:line="1574" pos:column="16">code<pos:position pos:line="1574" pos:column="20"/></name></expr>;<pos:position pos:line="1574" pos:column="21"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1575" pos:column="5">tempreqvary<pos:position pos:line="1575" pos:column="16"/></name> <operator pos:line="1575" pos:column="17">=<pos:position pos:line="1575" pos:column="18"/></operator> <name><name pos:line="1575" pos:column="19">cd<pos:position pos:line="1575" pos:column="21"/></name><operator pos:line="1575" pos:column="21">-&gt;<pos:position pos:line="1575" pos:column="26"/></operator><name pos:line="1575" pos:column="23">req_varyopt<pos:position pos:line="1575" pos:column="34"/></name></name></expr>;<pos:position pos:line="1575" pos:column="35"/></expr_stmt>     <comment type="block" pos:line="1575" pos:column="40">/* Save value before bracket */</comment>

    <if pos:line="1577" pos:column="5">if <condition pos:line="1577" pos:column="8">(<expr><operator pos:line="1577" pos:column="9">!<pos:position pos:line="1577" pos:column="10"/></operator><call><name pos:line="1577" pos:column="10">compile_regex<pos:position pos:line="1577" pos:column="23"/></name><argument_list pos:line="1577" pos:column="23">(
         <argument><expr><name pos:line="1578" pos:column="10">newoptions<pos:position pos:line="1578" pos:column="20"/></name></expr></argument>,                   <comment type="block" pos:line="1578" pos:column="40">/* The complete new option state */</comment>
         <argument><expr><name pos:line="1579" pos:column="10">options<pos:position pos:line="1579" pos:column="17"/></name> <operator pos:line="1579" pos:column="18">&amp;<pos:position pos:line="1579" pos:column="23"/></operator> <name pos:line="1579" pos:column="20">PCRE_IMS<pos:position pos:line="1579" pos:column="28"/></name></expr></argument>,           <comment type="block" pos:line="1579" pos:column="40">/* The previous ims option state */</comment>
         <argument><expr><name pos:line="1580" pos:column="10">brackets<pos:position pos:line="1580" pos:column="18"/></name></expr></argument>,                     <comment type="block" pos:line="1580" pos:column="40">/* Extracting bracket count */</comment>
         <argument><expr><operator pos:line="1581" pos:column="10">&amp;<pos:position pos:line="1581" pos:column="15"/></operator><name pos:line="1581" pos:column="11">tempcode<pos:position pos:line="1581" pos:column="19"/></name></expr></argument>,                    <comment type="block" pos:line="1581" pos:column="40">/* Where to put code (updated) */</comment>
         <argument><expr><operator pos:line="1582" pos:column="10">&amp;<pos:position pos:line="1582" pos:column="15"/></operator><name pos:line="1582" pos:column="11">ptr<pos:position pos:line="1582" pos:column="14"/></name></expr></argument>,                         <comment type="block" pos:line="1582" pos:column="40">/* Input pointer (updated) */</comment>
         <argument><expr><name pos:line="1583" pos:column="10">errorptr<pos:position pos:line="1583" pos:column="18"/></name></expr></argument>,                     <comment type="block" pos:line="1583" pos:column="40">/* Where to put an error message */</comment>
         <argument><expr><operator pos:line="1584" pos:column="10">(<pos:position pos:line="1584" pos:column="11"/></operator><name pos:line="1584" pos:column="11">bravalue<pos:position pos:line="1584" pos:column="19"/></name> <operator pos:line="1584" pos:column="20">==<pos:position pos:line="1584" pos:column="22"/></operator> <name pos:line="1584" pos:column="23">OP_ASSERTBACK<pos:position pos:line="1584" pos:column="36"/></name> <operator pos:line="1584" pos:column="37">||<pos:position pos:line="1584" pos:column="39"/></operator>
          <name pos:line="1585" pos:column="11">bravalue<pos:position pos:line="1585" pos:column="19"/></name> <operator pos:line="1585" pos:column="20">==<pos:position pos:line="1585" pos:column="22"/></operator> <name pos:line="1585" pos:column="23">OP_ASSERTBACK_NOT<pos:position pos:line="1585" pos:column="40"/></name><operator pos:line="1585" pos:column="40">)<pos:position pos:line="1585" pos:column="41"/></operator></expr></argument>, <comment type="block" pos:line="1585" pos:column="43">/* TRUE if back assert */</comment>
         <argument><expr><name pos:line="1586" pos:column="10">skipbytes<pos:position pos:line="1586" pos:column="19"/></name></expr></argument>,                    <comment type="block" pos:line="1586" pos:column="40">/* Skip over OP_COND/OP_BRANUMBER */</comment>
         <argument><expr><operator pos:line="1587" pos:column="10">&amp;<pos:position pos:line="1587" pos:column="15"/></operator><name pos:line="1587" pos:column="11">subfirstbyte<pos:position pos:line="1587" pos:column="23"/></name></expr></argument>,                <comment type="block" pos:line="1587" pos:column="40">/* For possible first char */</comment>
         <argument><expr><operator pos:line="1588" pos:column="10">&amp;<pos:position pos:line="1588" pos:column="15"/></operator><name pos:line="1588" pos:column="11">subreqbyte<pos:position pos:line="1588" pos:column="21"/></name></expr></argument>,                  <comment type="block" pos:line="1588" pos:column="40">/* For possible last char */</comment>
         <argument><expr><name pos:line="1589" pos:column="10">bcptr<pos:position pos:line="1589" pos:column="15"/></name></expr></argument>,                        <comment type="block" pos:line="1589" pos:column="40">/* Current branch chain */</comment>
         <argument><expr><name pos:line="1590" pos:column="10">cd<pos:position pos:line="1590" pos:column="12"/></name></expr></argument>)<pos:position pos:line="1590" pos:column="13"/></argument_list></call></expr>)<pos:position pos:line="1590" pos:column="14"/></condition><then pos:line="1590" pos:column="14">                          <comment type="block" pos:line="1590" pos:column="40">/* Tables block */</comment>
      <block type="pseudo"><goto pos:line="1591" pos:column="7">goto <name pos:line="1591" pos:column="12">FAILED<pos:position pos:line="1591" pos:column="18"/></name>;<pos:position pos:line="1591" pos:column="19"/></goto></block></then>

    <comment type="block" pos:line="1593" pos:column="5">/* At the end of compiling, code is still pointing to the start of the
    group, while tempcode has been updated to point past the end of the group
    and any option resetting that may follow it. The pattern pointer (ptr)
    is on the bracket. */</comment>

    <comment type="block" pos:line="1598" pos:column="5">/* If this is a conditional bracket, check that there are no more than
    two branches in the group. */</comment>

    <elseif pos:line="1601" pos:column="5">else <if pos:line="1601" pos:column="10">if <condition pos:line="1601" pos:column="13">(<expr><name pos:line="1601" pos:column="14">bravalue<pos:position pos:line="1601" pos:column="22"/></name> <operator pos:line="1601" pos:column="23">==<pos:position pos:line="1601" pos:column="25"/></operator> <name pos:line="1601" pos:column="26">OP_COND<pos:position pos:line="1601" pos:column="33"/></name></expr>)<pos:position pos:line="1601" pos:column="34"/></condition><then pos:line="1601" pos:column="34">
      <block pos:line="1602" pos:column="7">{
      <decl_stmt><decl><type><name pos:line="1603" pos:column="7">uschar<pos:position pos:line="1603" pos:column="13"/></name> <modifier pos:line="1603" pos:column="14">*<pos:position pos:line="1603" pos:column="15"/></modifier></type><name pos:line="1603" pos:column="15">tc<pos:position pos:line="1603" pos:column="17"/></name> <init pos:line="1603" pos:column="18">= <expr><name pos:line="1603" pos:column="20">code<pos:position pos:line="1603" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="1603" pos:column="25"/></decl_stmt>
      <expr_stmt><expr><name pos:line="1604" pos:column="7">condcount<pos:position pos:line="1604" pos:column="16"/></name> <operator pos:line="1604" pos:column="17">=<pos:position pos:line="1604" pos:column="18"/></operator> <literal type="number" pos:line="1604" pos:column="19">0<pos:position pos:line="1604" pos:column="20"/></literal></expr>;<pos:position pos:line="1604" pos:column="21"/></expr_stmt>

      <do pos:line="1606" pos:column="7">do <block pos:line="1606" pos:column="10">{
         <expr_stmt><expr><name pos:line="1607" pos:column="10">condcount<pos:position pos:line="1607" pos:column="19"/></name><operator pos:line="1607" pos:column="19">++<pos:position pos:line="1607" pos:column="21"/></operator></expr>;<pos:position pos:line="1607" pos:column="22"/></expr_stmt>
         <expr_stmt><expr><name pos:line="1608" pos:column="10">tc<pos:position pos:line="1608" pos:column="12"/></name> <operator pos:line="1608" pos:column="13">+=<pos:position pos:line="1608" pos:column="15"/></operator> <call><name pos:line="1608" pos:column="16">GET<pos:position pos:line="1608" pos:column="19"/></name><argument_list pos:line="1608" pos:column="19">(<argument><expr><name pos:line="1608" pos:column="20">tc<pos:position pos:line="1608" pos:column="22"/></name></expr></argument>,<argument><expr><literal type="number" pos:line="1608" pos:column="23">1<pos:position pos:line="1608" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="1608" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1608" pos:column="26"/></expr_stmt>
         }<pos:position pos:line="1609" pos:column="11"/></block>
      while <condition pos:line="1610" pos:column="13">(<expr><operator pos:line="1610" pos:column="14">*<pos:position pos:line="1610" pos:column="15"/></operator><name pos:line="1610" pos:column="15">tc<pos:position pos:line="1610" pos:column="17"/></name> <operator pos:line="1610" pos:column="18">!=<pos:position pos:line="1610" pos:column="20"/></operator> <name pos:line="1610" pos:column="21">OP_KET<pos:position pos:line="1610" pos:column="27"/></name></expr>)<pos:position pos:line="1610" pos:column="28"/></condition>;<pos:position pos:line="1610" pos:column="29"/></do>

      <if pos:line="1612" pos:column="7">if <condition pos:line="1612" pos:column="10">(<expr><name pos:line="1612" pos:column="11">condcount<pos:position pos:line="1612" pos:column="20"/></name> <operator pos:line="1612" pos:column="21">&gt;<pos:position pos:line="1612" pos:column="25"/></operator> <literal type="number" pos:line="1612" pos:column="23">2<pos:position pos:line="1612" pos:column="24"/></literal></expr>)<pos:position pos:line="1612" pos:column="25"/></condition><then pos:line="1612" pos:column="25">
        <block pos:line="1613" pos:column="9">{
        <expr_stmt><expr><operator pos:line="1614" pos:column="9">*<pos:position pos:line="1614" pos:column="10"/></operator><name pos:line="1614" pos:column="10">errorptr<pos:position pos:line="1614" pos:column="18"/></name> <operator pos:line="1614" pos:column="19">=<pos:position pos:line="1614" pos:column="20"/></operator> <name pos:line="1614" pos:column="21">ERR27<pos:position pos:line="1614" pos:column="26"/></name></expr>;<pos:position pos:line="1614" pos:column="27"/></expr_stmt>
        <goto pos:line="1615" pos:column="9">goto <name pos:line="1615" pos:column="14">FAILED<pos:position pos:line="1615" pos:column="20"/></name>;<pos:position pos:line="1615" pos:column="21"/></goto>
        }<pos:position pos:line="1616" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="1618" pos:column="7">/* If there is just one branch, we must not make use of its firstbyte or
      reqbyte, because this is equivalent to an empty second branch. */</comment>

      <if pos:line="1621" pos:column="7">if <condition pos:line="1621" pos:column="10">(<expr><name pos:line="1621" pos:column="11">condcount<pos:position pos:line="1621" pos:column="20"/></name> <operator pos:line="1621" pos:column="21">==<pos:position pos:line="1621" pos:column="23"/></operator> <literal type="number" pos:line="1621" pos:column="24">1<pos:position pos:line="1621" pos:column="25"/></literal></expr>)<pos:position pos:line="1621" pos:column="26"/></condition><then pos:line="1621" pos:column="26"> <block type="pseudo"><expr_stmt><expr><name pos:line="1621" pos:column="27">subfirstbyte<pos:position pos:line="1621" pos:column="39"/></name> <operator pos:line="1621" pos:column="40">=<pos:position pos:line="1621" pos:column="41"/></operator> <name pos:line="1621" pos:column="42">subreqbyte<pos:position pos:line="1621" pos:column="52"/></name> <operator pos:line="1621" pos:column="53">=<pos:position pos:line="1621" pos:column="54"/></operator> <name pos:line="1621" pos:column="55">REQ_NONE<pos:position pos:line="1621" pos:column="63"/></name></expr>;<pos:position pos:line="1621" pos:column="64"/></expr_stmt></block></then></if>
      }<pos:position pos:line="1622" pos:column="8"/></block></then></if></elseif></if>

    <comment type="block" pos:line="1624" pos:column="5">/* Handle updating of the required and first characters. Update for normal
    brackets of all kinds, and conditions with two branches (see code above).
    If the bracket is followed by a quantifier with zero repeat, we have to
    back off. Hence the definition of zeroreqbyte and zerofirstbyte outside the
    main loop so that they can be accessed for the back off. */</comment>

    <expr_stmt><expr><name pos:line="1630" pos:column="5">zeroreqbyte<pos:position pos:line="1630" pos:column="16"/></name> <operator pos:line="1630" pos:column="17">=<pos:position pos:line="1630" pos:column="18"/></operator> <name pos:line="1630" pos:column="19">reqbyte<pos:position pos:line="1630" pos:column="26"/></name></expr>;<pos:position pos:line="1630" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1631" pos:column="5">zerofirstbyte<pos:position pos:line="1631" pos:column="18"/></name> <operator pos:line="1631" pos:column="19">=<pos:position pos:line="1631" pos:column="20"/></operator> <name pos:line="1631" pos:column="21">firstbyte<pos:position pos:line="1631" pos:column="30"/></name></expr>;<pos:position pos:line="1631" pos:column="31"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1632" pos:column="5">groupsetfirstbyte<pos:position pos:line="1632" pos:column="22"/></name> <operator pos:line="1632" pos:column="23">=<pos:position pos:line="1632" pos:column="24"/></operator> <name pos:line="1632" pos:column="25">FALSE<pos:position pos:line="1632" pos:column="30"/></name></expr>;<pos:position pos:line="1632" pos:column="31"/></expr_stmt>

    <if pos:line="1634" pos:column="5">if <condition pos:line="1634" pos:column="8">(<expr><name pos:line="1634" pos:column="9">bravalue<pos:position pos:line="1634" pos:column="17"/></name> <operator pos:line="1634" pos:column="18">&gt;=<pos:position pos:line="1634" pos:column="23"/></operator> <name pos:line="1634" pos:column="21">OP_BRA<pos:position pos:line="1634" pos:column="27"/></name> <operator pos:line="1634" pos:column="28">||<pos:position pos:line="1634" pos:column="30"/></operator> <name pos:line="1634" pos:column="31">bravalue<pos:position pos:line="1634" pos:column="39"/></name> <operator pos:line="1634" pos:column="40">==<pos:position pos:line="1634" pos:column="42"/></operator> <name pos:line="1634" pos:column="43">OP_ONCE<pos:position pos:line="1634" pos:column="50"/></name> <operator pos:line="1634" pos:column="51">||<pos:position pos:line="1634" pos:column="53"/></operator> <name pos:line="1634" pos:column="54">bravalue<pos:position pos:line="1634" pos:column="62"/></name> <operator pos:line="1634" pos:column="63">==<pos:position pos:line="1634" pos:column="65"/></operator> <name pos:line="1634" pos:column="66">OP_COND<pos:position pos:line="1634" pos:column="73"/></name></expr>)<pos:position pos:line="1634" pos:column="74"/></condition><then pos:line="1634" pos:column="74">
      <block pos:line="1635" pos:column="7">{
      <comment type="block" pos:line="1636" pos:column="7">/* If we have not yet set a firstbyte in this branch, take it from the
      subpattern, remembering that it was set here so that a repeat of more
      than one can replicate it as reqbyte if necessary. If the subpattern has
      no firstbyte, set "none" for the whole branch. In both cases, a zero
      repeat forces firstbyte to "none". */</comment>

      <if pos:line="1642" pos:column="7">if <condition pos:line="1642" pos:column="10">(<expr><name pos:line="1642" pos:column="11">firstbyte<pos:position pos:line="1642" pos:column="20"/></name> <operator pos:line="1642" pos:column="21">==<pos:position pos:line="1642" pos:column="23"/></operator> <name pos:line="1642" pos:column="24">REQ_UNSET<pos:position pos:line="1642" pos:column="33"/></name></expr>)<pos:position pos:line="1642" pos:column="34"/></condition><then pos:line="1642" pos:column="34">
        <block pos:line="1643" pos:column="9">{
        <if pos:line="1644" pos:column="9">if <condition pos:line="1644" pos:column="12">(<expr><name pos:line="1644" pos:column="13">subfirstbyte<pos:position pos:line="1644" pos:column="25"/></name> <operator pos:line="1644" pos:column="26">&gt;=<pos:position pos:line="1644" pos:column="31"/></operator> <literal type="number" pos:line="1644" pos:column="29">0<pos:position pos:line="1644" pos:column="30"/></literal></expr>)<pos:position pos:line="1644" pos:column="31"/></condition><then pos:line="1644" pos:column="31">
          <block pos:line="1645" pos:column="11">{
          <expr_stmt><expr><name pos:line="1646" pos:column="11">firstbyte<pos:position pos:line="1646" pos:column="20"/></name> <operator pos:line="1646" pos:column="21">=<pos:position pos:line="1646" pos:column="22"/></operator> <name pos:line="1646" pos:column="23">subfirstbyte<pos:position pos:line="1646" pos:column="35"/></name></expr>;<pos:position pos:line="1646" pos:column="36"/></expr_stmt>
          <expr_stmt><expr><name pos:line="1647" pos:column="11">groupsetfirstbyte<pos:position pos:line="1647" pos:column="28"/></name> <operator pos:line="1647" pos:column="29">=<pos:position pos:line="1647" pos:column="30"/></operator> <name pos:line="1647" pos:column="31">TRUE<pos:position pos:line="1647" pos:column="35"/></name></expr>;<pos:position pos:line="1647" pos:column="36"/></expr_stmt>
          }<pos:position pos:line="1648" pos:column="12"/></block></then>
        <else pos:line="1649" pos:column="9">else <block type="pseudo"><expr_stmt><expr><name pos:line="1649" pos:column="14">firstbyte<pos:position pos:line="1649" pos:column="23"/></name> <operator pos:line="1649" pos:column="24">=<pos:position pos:line="1649" pos:column="25"/></operator> <name pos:line="1649" pos:column="26">REQ_NONE<pos:position pos:line="1649" pos:column="34"/></name></expr>;<pos:position pos:line="1649" pos:column="35"/></expr_stmt></block></else></if>
        <expr_stmt><expr><name pos:line="1650" pos:column="9">zerofirstbyte<pos:position pos:line="1650" pos:column="22"/></name> <operator pos:line="1650" pos:column="23">=<pos:position pos:line="1650" pos:column="24"/></operator> <name pos:line="1650" pos:column="25">REQ_NONE<pos:position pos:line="1650" pos:column="33"/></name></expr>;<pos:position pos:line="1650" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="1651" pos:column="10"/></block></then>

      <comment type="block" pos:line="1653" pos:column="7">/* If firstbyte was previously set, convert the subpattern's firstbyte
      into reqbyte if there wasn't one, using the vary flag that was in
      existence beforehand. */</comment>

      <elseif pos:line="1657" pos:column="7">else <if pos:line="1657" pos:column="12">if <condition pos:line="1657" pos:column="15">(<expr><name pos:line="1657" pos:column="16">subfirstbyte<pos:position pos:line="1657" pos:column="28"/></name> <operator pos:line="1657" pos:column="29">&gt;=<pos:position pos:line="1657" pos:column="34"/></operator> <literal type="number" pos:line="1657" pos:column="32">0<pos:position pos:line="1657" pos:column="33"/></literal> <operator pos:line="1657" pos:column="34">&amp;&amp;<pos:position pos:line="1657" pos:column="44"/></operator> <name pos:line="1657" pos:column="37">subreqbyte<pos:position pos:line="1657" pos:column="47"/></name> <operator pos:line="1657" pos:column="48">&lt;<pos:position pos:line="1657" pos:column="52"/></operator> <literal type="number" pos:line="1657" pos:column="50">0<pos:position pos:line="1657" pos:column="51"/></literal></expr>)<pos:position pos:line="1657" pos:column="52"/></condition><then pos:line="1657" pos:column="52">
        <block type="pseudo"><expr_stmt><expr><name pos:line="1658" pos:column="9">subreqbyte<pos:position pos:line="1658" pos:column="19"/></name> <operator pos:line="1658" pos:column="20">=<pos:position pos:line="1658" pos:column="21"/></operator> <name pos:line="1658" pos:column="22">subfirstbyte<pos:position pos:line="1658" pos:column="34"/></name> <operator pos:line="1658" pos:column="35">|<pos:position pos:line="1658" pos:column="36"/></operator> <name pos:line="1658" pos:column="37">tempreqvary<pos:position pos:line="1658" pos:column="48"/></name></expr>;<pos:position pos:line="1658" pos:column="49"/></expr_stmt></block></then></if></elseif></if>

      <comment type="block" pos:line="1660" pos:column="7">/* If the subpattern set a required byte (or set a first byte that isn't
      really the first byte - see above), set it. */</comment>

      <if pos:line="1663" pos:column="7">if <condition pos:line="1663" pos:column="10">(<expr><name pos:line="1663" pos:column="11">subreqbyte<pos:position pos:line="1663" pos:column="21"/></name> <operator pos:line="1663" pos:column="22">&gt;=<pos:position pos:line="1663" pos:column="27"/></operator> <literal type="number" pos:line="1663" pos:column="25">0<pos:position pos:line="1663" pos:column="26"/></literal></expr>)<pos:position pos:line="1663" pos:column="27"/></condition><then pos:line="1663" pos:column="27"> <block type="pseudo"><expr_stmt><expr><name pos:line="1663" pos:column="28">reqbyte<pos:position pos:line="1663" pos:column="35"/></name> <operator pos:line="1663" pos:column="36">=<pos:position pos:line="1663" pos:column="37"/></operator> <name pos:line="1663" pos:column="38">subreqbyte<pos:position pos:line="1663" pos:column="48"/></name></expr>;<pos:position pos:line="1663" pos:column="49"/></expr_stmt></block></then></if>
      }<pos:position pos:line="1664" pos:column="8"/></block></then>

    <comment type="block" pos:line="1666" pos:column="5">/* For a forward assertion, we take the reqbyte, if set. This can be
    helpful if the pattern that follows the assertion doesn't set a different
    char. For example, it's useful for /(?=abcde).+/. We can't set firstbyte
    for an assertion, however because it leads to incorrect effect for patterns
    such as /(?=a)a.+/ when the "real" "a" would then become a reqbyte instead
    of a firstbyte. This is overcome by a scan at the end if there's no
    firstbyte, looking for an asserted first char. */</comment>

    <elseif pos:line="1674" pos:column="5">else <if pos:line="1674" pos:column="10">if <condition pos:line="1674" pos:column="13">(<expr><name pos:line="1674" pos:column="14">bravalue<pos:position pos:line="1674" pos:column="22"/></name> <operator pos:line="1674" pos:column="23">==<pos:position pos:line="1674" pos:column="25"/></operator> <name pos:line="1674" pos:column="26">OP_ASSERT<pos:position pos:line="1674" pos:column="35"/></name> <operator pos:line="1674" pos:column="36">&amp;&amp;<pos:position pos:line="1674" pos:column="46"/></operator> <name pos:line="1674" pos:column="39">subreqbyte<pos:position pos:line="1674" pos:column="49"/></name> <operator pos:line="1674" pos:column="50">&gt;=<pos:position pos:line="1674" pos:column="55"/></operator> <literal type="number" pos:line="1674" pos:column="53">0<pos:position pos:line="1674" pos:column="54"/></literal></expr>)<pos:position pos:line="1674" pos:column="55"/></condition><then pos:line="1674" pos:column="55"> <block type="pseudo"><expr_stmt><expr><name pos:line="1674" pos:column="56">reqbyte<pos:position pos:line="1674" pos:column="63"/></name> <operator pos:line="1674" pos:column="64">=<pos:position pos:line="1674" pos:column="65"/></operator> <name pos:line="1674" pos:column="66">subreqbyte<pos:position pos:line="1674" pos:column="76"/></name></expr>;<pos:position pos:line="1674" pos:column="77"/></expr_stmt></block></then></if></elseif></if>

    <comment type="block" pos:line="1676" pos:column="5">/* Now update the main code pointer to the end of the group. */</comment>

    <expr_stmt><expr><name pos:line="1678" pos:column="5">code<pos:position pos:line="1678" pos:column="9"/></name> <operator pos:line="1678" pos:column="10">=<pos:position pos:line="1678" pos:column="11"/></operator> <name pos:line="1678" pos:column="12">tempcode<pos:position pos:line="1678" pos:column="20"/></name></expr>;<pos:position pos:line="1678" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="1680" pos:column="5">/* Error if hit end of pattern */</comment>

    <if pos:line="1682" pos:column="5">if <condition pos:line="1682" pos:column="8">(<expr><operator pos:line="1682" pos:column="9">*<pos:position pos:line="1682" pos:column="10"/></operator><name pos:line="1682" pos:column="10">ptr<pos:position pos:line="1682" pos:column="13"/></name> <operator pos:line="1682" pos:column="14">!=<pos:position pos:line="1682" pos:column="16"/></operator> <literal type="char" pos:line="1682" pos:column="17">')'<pos:position pos:line="1682" pos:column="20"/></literal></expr>)<pos:position pos:line="1682" pos:column="21"/></condition><then pos:line="1682" pos:column="21">
      <block pos:line="1683" pos:column="7">{
      <expr_stmt><expr><operator pos:line="1684" pos:column="7">*<pos:position pos:line="1684" pos:column="8"/></operator><name pos:line="1684" pos:column="8">errorptr<pos:position pos:line="1684" pos:column="16"/></name> <operator pos:line="1684" pos:column="17">=<pos:position pos:line="1684" pos:column="18"/></operator> <name pos:line="1684" pos:column="19">ERR14<pos:position pos:line="1684" pos:column="24"/></name></expr>;<pos:position pos:line="1684" pos:column="25"/></expr_stmt>
      <goto pos:line="1685" pos:column="7">goto <name pos:line="1685" pos:column="12">FAILED<pos:position pos:line="1685" pos:column="18"/></name>;<pos:position pos:line="1685" pos:column="19"/></goto>
      }<pos:position pos:line="1686" pos:column="8"/></block></then></if>
    <break pos:line="1687" pos:column="5">break;<pos:position pos:line="1687" pos:column="11"/></break>

    <comment type="block" pos:line="1689" pos:column="5">/* Check \ for being a real metacharacter; if not, fall through and handle
    it as a data character at the start of a string. Escape items are checked
    for validity in the pre-compiling pass. */</comment>

    <case pos:line="1693" pos:column="5">case <expr><literal type="char" pos:line="1693" pos:column="10">'\\'<pos:position pos:line="1693" pos:column="14"/></literal></expr>:<pos:position pos:line="1693" pos:column="15"/></case>
    <expr_stmt><expr><name pos:line="1694" pos:column="5">tempptr<pos:position pos:line="1694" pos:column="12"/></name> <operator pos:line="1694" pos:column="13">=<pos:position pos:line="1694" pos:column="14"/></operator> <name pos:line="1694" pos:column="15">ptr<pos:position pos:line="1694" pos:column="18"/></name></expr>;<pos:position pos:line="1694" pos:column="19"/></expr_stmt>
    <expr_stmt><expr><name pos:line="1695" pos:column="5">c<pos:position pos:line="1695" pos:column="6"/></name> <operator pos:line="1695" pos:column="7">=<pos:position pos:line="1695" pos:column="8"/></operator> <call><name pos:line="1695" pos:column="9">check_escape<pos:position pos:line="1695" pos:column="21"/></name><argument_list pos:line="1695" pos:column="21">(<argument><expr><operator pos:line="1695" pos:column="22">&amp;<pos:position pos:line="1695" pos:column="27"/></operator><name pos:line="1695" pos:column="23">ptr<pos:position pos:line="1695" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="1695" pos:column="28">errorptr<pos:position pos:line="1695" pos:column="36"/></name></expr></argument>, <argument><expr><operator pos:line="1695" pos:column="38">*<pos:position pos:line="1695" pos:column="39"/></operator><name pos:line="1695" pos:column="39">brackets<pos:position pos:line="1695" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="1695" pos:column="49">options<pos:position pos:line="1695" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="1695" pos:column="58">FALSE<pos:position pos:line="1695" pos:column="63"/></name></expr></argument>)<pos:position pos:line="1695" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="1695" pos:column="65"/></expr_stmt>

    <comment type="block" pos:line="1697" pos:column="5">/* Handle metacharacters introduced by \. For ones like \d, the ESC_ values
    are arranged to be the negation of the corresponding OP_values. For the
    back references, the values are ESC_REF plus the reference number. Only
    back references and those types that consume a character may be repeated.
    We can test for values between ESC_b and ESC_Z for the latter; this may
    have to change if any new ones are ever created. */</comment>

    <if pos:line="1704" pos:column="5">if <condition pos:line="1704" pos:column="8">(<expr><name pos:line="1704" pos:column="9">c<pos:position pos:line="1704" pos:column="10"/></name> <operator pos:line="1704" pos:column="11">&lt;<pos:position pos:line="1704" pos:column="15"/></operator> <literal type="number" pos:line="1704" pos:column="13">0<pos:position pos:line="1704" pos:column="14"/></literal></expr>)<pos:position pos:line="1704" pos:column="15"/></condition><then pos:line="1704" pos:column="15">
      <block pos:line="1705" pos:column="7">{
      <if pos:line="1706" pos:column="7">if <condition pos:line="1706" pos:column="10">(<expr><operator pos:line="1706" pos:column="11">-<pos:position pos:line="1706" pos:column="12"/></operator><name pos:line="1706" pos:column="12">c<pos:position pos:line="1706" pos:column="13"/></name> <operator pos:line="1706" pos:column="14">==<pos:position pos:line="1706" pos:column="16"/></operator> <name pos:line="1706" pos:column="17">ESC_Q<pos:position pos:line="1706" pos:column="22"/></name></expr>)<pos:position pos:line="1706" pos:column="23"/></condition><then pos:line="1706" pos:column="23">            <comment type="block" pos:line="1706" pos:column="35">/* Handle start of quoted string */</comment>
        <block pos:line="1707" pos:column="9">{
        <if pos:line="1708" pos:column="9">if <condition pos:line="1708" pos:column="12">(<expr><name><name pos:line="1708" pos:column="13">ptr<pos:position pos:line="1708" pos:column="16"/></name><index pos:line="1708" pos:column="16">[<expr><literal type="number" pos:line="1708" pos:column="17">1<pos:position pos:line="1708" pos:column="18"/></literal></expr>]<pos:position pos:line="1708" pos:column="19"/></index></name> <operator pos:line="1708" pos:column="20">==<pos:position pos:line="1708" pos:column="22"/></operator> <literal type="char" pos:line="1708" pos:column="23">'\\'<pos:position pos:line="1708" pos:column="27"/></literal> <operator pos:line="1708" pos:column="28">&amp;&amp;<pos:position pos:line="1708" pos:column="38"/></operator> <name><name pos:line="1708" pos:column="31">ptr<pos:position pos:line="1708" pos:column="34"/></name><index pos:line="1708" pos:column="34">[<expr><literal type="number" pos:line="1708" pos:column="35">2<pos:position pos:line="1708" pos:column="36"/></literal></expr>]<pos:position pos:line="1708" pos:column="37"/></index></name> <operator pos:line="1708" pos:column="38">==<pos:position pos:line="1708" pos:column="40"/></operator> <literal type="char" pos:line="1708" pos:column="41">'E'<pos:position pos:line="1708" pos:column="44"/></literal></expr>)<pos:position pos:line="1708" pos:column="45"/></condition><then pos:line="1708" pos:column="45"> <block type="pseudo"><expr_stmt><expr><name pos:line="1708" pos:column="46">ptr<pos:position pos:line="1708" pos:column="49"/></name> <operator pos:line="1708" pos:column="50">+=<pos:position pos:line="1708" pos:column="52"/></operator> <literal type="number" pos:line="1708" pos:column="53">2<pos:position pos:line="1708" pos:column="54"/></literal></expr>;<pos:position pos:line="1708" pos:column="55"/></expr_stmt></block></then> <comment type="block" pos:line="1708" pos:column="56">/* avoid empty string */</comment>
          <else pos:line="1709" pos:column="11">else <block type="pseudo"><expr_stmt><expr><name pos:line="1709" pos:column="16">inescq<pos:position pos:line="1709" pos:column="22"/></name> <operator pos:line="1709" pos:column="23">=<pos:position pos:line="1709" pos:column="24"/></operator> <name pos:line="1709" pos:column="25">TRUE<pos:position pos:line="1709" pos:column="29"/></name></expr>;<pos:position pos:line="1709" pos:column="30"/></expr_stmt></block></else></if>
        <continue pos:line="1710" pos:column="9">continue;<pos:position pos:line="1710" pos:column="18"/></continue>
        }<pos:position pos:line="1711" pos:column="10"/></block></then></if>

      <comment type="block" pos:line="1713" pos:column="7">/* For metasequences that actually match a character, we disable the
      setting of a first character if it hasn't already been set. */</comment>

      <if pos:line="1716" pos:column="7">if <condition pos:line="1716" pos:column="10">(<expr><name pos:line="1716" pos:column="11">firstbyte<pos:position pos:line="1716" pos:column="20"/></name> <operator pos:line="1716" pos:column="21">==<pos:position pos:line="1716" pos:column="23"/></operator> <name pos:line="1716" pos:column="24">REQ_UNSET<pos:position pos:line="1716" pos:column="33"/></name> <operator pos:line="1716" pos:column="34">&amp;&amp;<pos:position pos:line="1716" pos:column="44"/></operator> <operator pos:line="1716" pos:column="37">-<pos:position pos:line="1716" pos:column="38"/></operator><name pos:line="1716" pos:column="38">c<pos:position pos:line="1716" pos:column="39"/></name> <operator pos:line="1716" pos:column="40">&gt;<pos:position pos:line="1716" pos:column="44"/></operator> <name pos:line="1716" pos:column="42">ESC_b<pos:position pos:line="1716" pos:column="47"/></name> <operator pos:line="1716" pos:column="48">&amp;&amp;<pos:position pos:line="1716" pos:column="58"/></operator> <operator pos:line="1716" pos:column="51">-<pos:position pos:line="1716" pos:column="52"/></operator><name pos:line="1716" pos:column="52">c<pos:position pos:line="1716" pos:column="53"/></name> <operator pos:line="1716" pos:column="54">&lt;<pos:position pos:line="1716" pos:column="58"/></operator> <name pos:line="1716" pos:column="56">ESC_Z<pos:position pos:line="1716" pos:column="61"/></name></expr>)<pos:position pos:line="1716" pos:column="62"/></condition><then pos:line="1716" pos:column="62">
        <block type="pseudo"><expr_stmt><expr><name pos:line="1717" pos:column="9">firstbyte<pos:position pos:line="1717" pos:column="18"/></name> <operator pos:line="1717" pos:column="19">=<pos:position pos:line="1717" pos:column="20"/></operator> <name pos:line="1717" pos:column="21">REQ_NONE<pos:position pos:line="1717" pos:column="29"/></name></expr>;<pos:position pos:line="1717" pos:column="30"/></expr_stmt></block></then></if>

      <comment type="block" pos:line="1719" pos:column="7">/* Set values to reset to if this is followed by a zero repeat. */</comment>

      <expr_stmt><expr><name pos:line="1721" pos:column="7">zerofirstbyte<pos:position pos:line="1721" pos:column="20"/></name> <operator pos:line="1721" pos:column="21">=<pos:position pos:line="1721" pos:column="22"/></operator> <name pos:line="1721" pos:column="23">firstbyte<pos:position pos:line="1721" pos:column="32"/></name></expr>;<pos:position pos:line="1721" pos:column="33"/></expr_stmt>
      <expr_stmt><expr><name pos:line="1722" pos:column="7">zeroreqbyte<pos:position pos:line="1722" pos:column="18"/></name> <operator pos:line="1722" pos:column="19">=<pos:position pos:line="1722" pos:column="20"/></operator> <name pos:line="1722" pos:column="21">reqbyte<pos:position pos:line="1722" pos:column="28"/></name></expr>;<pos:position pos:line="1722" pos:column="29"/></expr_stmt>

      <comment type="block" pos:line="1724" pos:column="7">/* Back references are handled specially */</comment>

      <if pos:line="1726" pos:column="7">if <condition pos:line="1726" pos:column="10">(<expr><operator pos:line="1726" pos:column="11">-<pos:position pos:line="1726" pos:column="12"/></operator><name pos:line="1726" pos:column="12">c<pos:position pos:line="1726" pos:column="13"/></name> <operator pos:line="1726" pos:column="14">&gt;=<pos:position pos:line="1726" pos:column="19"/></operator> <name pos:line="1726" pos:column="17">ESC_REF<pos:position pos:line="1726" pos:column="24"/></name></expr>)<pos:position pos:line="1726" pos:column="25"/></condition><then pos:line="1726" pos:column="25">
        <block pos:line="1727" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="1728" pos:column="9">int<pos:position pos:line="1728" pos:column="12"/></name></type> <name pos:line="1728" pos:column="13">number<pos:position pos:line="1728" pos:column="19"/></name> <init pos:line="1728" pos:column="20">= <expr><operator pos:line="1728" pos:column="22">-<pos:position pos:line="1728" pos:column="23"/></operator><name pos:line="1728" pos:column="23">c<pos:position pos:line="1728" pos:column="24"/></name> <operator pos:line="1728" pos:column="25">-<pos:position pos:line="1728" pos:column="26"/></operator> <name pos:line="1728" pos:column="27">ESC_REF<pos:position pos:line="1728" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="1728" pos:column="35"/></decl_stmt>
        <expr_stmt><expr><name pos:line="1729" pos:column="9">previous<pos:position pos:line="1729" pos:column="17"/></name> <operator pos:line="1729" pos:column="18">=<pos:position pos:line="1729" pos:column="19"/></operator> <name pos:line="1729" pos:column="20">code<pos:position pos:line="1729" pos:column="24"/></name></expr>;<pos:position pos:line="1729" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="1730" pos:column="9">*<pos:position pos:line="1730" pos:column="10"/></operator><name pos:line="1730" pos:column="10">code<pos:position pos:line="1730" pos:column="14"/></name><operator pos:line="1730" pos:column="14">++<pos:position pos:line="1730" pos:column="16"/></operator> <operator pos:line="1730" pos:column="17">=<pos:position pos:line="1730" pos:column="18"/></operator> <name pos:line="1730" pos:column="19">OP_REF<pos:position pos:line="1730" pos:column="25"/></name></expr>;<pos:position pos:line="1730" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="1731" pos:column="9">PUT2INC<pos:position pos:line="1731" pos:column="16"/></name><argument_list pos:line="1731" pos:column="16">(<argument><expr><name pos:line="1731" pos:column="17">code<pos:position pos:line="1731" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="1731" pos:column="23">0<pos:position pos:line="1731" pos:column="24"/></literal></expr></argument>, <argument><expr><name pos:line="1731" pos:column="26">number<pos:position pos:line="1731" pos:column="32"/></name></expr></argument>)<pos:position pos:line="1731" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="1731" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="1732" pos:column="10"/></block></then>

      <comment type="block" pos:line="1734" pos:column="7">/* So are Unicode property matches, if supported. We know that get_ucp
      won't fail because it was tested in the pre-pass. */</comment>

<cpp:ifdef pos:line="1737" pos:column="1">#<cpp:directive pos:line="1737" pos:column="2">ifdef<pos:position pos:line="1737" pos:column="7"/></cpp:directive> <name pos:line="1737" pos:column="8">SUPPORT_UCP<pos:position pos:line="1737" pos:column="19"/></name></cpp:ifdef>
      <elseif pos:line="1738" pos:column="7">else <if pos:line="1738" pos:column="12">if <condition pos:line="1738" pos:column="15">(<expr><operator pos:line="1738" pos:column="16">-<pos:position pos:line="1738" pos:column="17"/></operator><name pos:line="1738" pos:column="17">c<pos:position pos:line="1738" pos:column="18"/></name> <operator pos:line="1738" pos:column="19">==<pos:position pos:line="1738" pos:column="21"/></operator> <name pos:line="1738" pos:column="22">ESC_P<pos:position pos:line="1738" pos:column="27"/></name> <operator pos:line="1738" pos:column="28">||<pos:position pos:line="1738" pos:column="30"/></operator> <operator pos:line="1738" pos:column="31">-<pos:position pos:line="1738" pos:column="32"/></operator><name pos:line="1738" pos:column="32">c<pos:position pos:line="1738" pos:column="33"/></name> <operator pos:line="1738" pos:column="34">==<pos:position pos:line="1738" pos:column="36"/></operator> <name pos:line="1738" pos:column="37">ESC_p<pos:position pos:line="1738" pos:column="42"/></name></expr>)<pos:position pos:line="1738" pos:column="43"/></condition><then pos:line="1738" pos:column="43">
        <block pos:line="1739" pos:column="9">{
        <decl_stmt><decl><type><name pos:line="1740" pos:column="9">BOOL<pos:position pos:line="1740" pos:column="13"/></name></type> <name pos:line="1740" pos:column="14">negated<pos:position pos:line="1740" pos:column="21"/></name></decl>;<pos:position pos:line="1740" pos:column="22"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="1741" pos:column="9">int<pos:position pos:line="1741" pos:column="12"/></name></type> <name pos:line="1741" pos:column="13">value<pos:position pos:line="1741" pos:column="18"/></name> <init pos:line="1741" pos:column="19">= <expr><call><name pos:line="1741" pos:column="21">get_ucp<pos:position pos:line="1741" pos:column="28"/></name><argument_list pos:line="1741" pos:column="28">(<argument><expr><operator pos:line="1741" pos:column="29">&amp;<pos:position pos:line="1741" pos:column="34"/></operator><name pos:line="1741" pos:column="30">ptr<pos:position pos:line="1741" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="1741" pos:column="35">&amp;<pos:position pos:line="1741" pos:column="40"/></operator><name pos:line="1741" pos:column="36">negated<pos:position pos:line="1741" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="1741" pos:column="45">errorptr<pos:position pos:line="1741" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1741" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1741" pos:column="55"/></decl_stmt>
        <expr_stmt><expr><name pos:line="1742" pos:column="9">previous<pos:position pos:line="1742" pos:column="17"/></name> <operator pos:line="1742" pos:column="18">=<pos:position pos:line="1742" pos:column="19"/></operator> <name pos:line="1742" pos:column="20">code<pos:position pos:line="1742" pos:column="24"/></name></expr>;<pos:position pos:line="1742" pos:column="25"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="1743" pos:column="9">*<pos:position pos:line="1743" pos:column="10"/></operator><name pos:line="1743" pos:column="10">code<pos:position pos:line="1743" pos:column="14"/></name><operator pos:line="1743" pos:column="14">++<pos:position pos:line="1743" pos:column="16"/></operator> <operator pos:line="1743" pos:column="17">=<pos:position pos:line="1743" pos:column="18"/></operator> <ternary><condition><expr><operator pos:line="1743" pos:column="19">(<pos:position pos:line="1743" pos:column="20"/></operator><operator pos:line="1743" pos:column="20">(<pos:position pos:line="1743" pos:column="21"/></operator><operator pos:line="1743" pos:column="21">-<pos:position pos:line="1743" pos:column="22"/></operator><name pos:line="1743" pos:column="22">c<pos:position pos:line="1743" pos:column="23"/></name> <operator pos:line="1743" pos:column="24">==<pos:position pos:line="1743" pos:column="26"/></operator> <name pos:line="1743" pos:column="27">ESC_p<pos:position pos:line="1743" pos:column="32"/></name><operator pos:line="1743" pos:column="32">)<pos:position pos:line="1743" pos:column="33"/></operator> <operator pos:line="1743" pos:column="34">!=<pos:position pos:line="1743" pos:column="36"/></operator> <name pos:line="1743" pos:column="37">negated<pos:position pos:line="1743" pos:column="44"/></name><operator pos:line="1743" pos:column="44">)<pos:position pos:line="1743" pos:column="45"/></operator></expr>?<pos:position pos:line="1743" pos:column="46"/></condition><then pos:line="1743" pos:column="46"> <expr><name pos:line="1743" pos:column="47">OP_PROP<pos:position pos:line="1743" pos:column="54"/></name></expr> <pos:position pos:line="1743" pos:column="55"/></then><else pos:line="1743" pos:column="55">: <expr><name pos:line="1743" pos:column="57">OP_NOTPROP<pos:position pos:line="1743" pos:column="67"/></name></expr></else></ternary></expr>;<pos:position pos:line="1743" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="1744" pos:column="9">*<pos:position pos:line="1744" pos:column="10"/></operator><name pos:line="1744" pos:column="10">code<pos:position pos:line="1744" pos:column="14"/></name><operator pos:line="1744" pos:column="14">++<pos:position pos:line="1744" pos:column="16"/></operator> <operator pos:line="1744" pos:column="17">=<pos:position pos:line="1744" pos:column="18"/></operator> <name pos:line="1744" pos:column="19">value<pos:position pos:line="1744" pos:column="24"/></name></expr>;<pos:position pos:line="1744" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="1745" pos:column="10"/></block></then></if></elseif></if></block></then></if></block></switch></block></for></block></function>
<cpp:endif pos:line="1746" pos:column="1">#<cpp:directive pos:line="1746" pos:column="2">endif<pos:position pos:line="1746" pos:column="7"/></cpp:directive></cpp:endif>

      <comment type="block" pos:line="1748" pos:column="7">/* For the rest, we can obtain the OP value by negating the escape
      value */</comment>
</unit>
