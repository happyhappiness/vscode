<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3439_httpd-2.2.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">sendRecvBuffer<pos:position pos:line="1" pos:column="35"/></name><parameter_list pos:line="1" pos:column="35">(<parameter><decl><type><name pos:line="1" pos:column="36">apr_time_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">t<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="51">const<pos:position pos:line="1" pos:column="56"/></specifier> <name pos:line="1" pos:column="57">char<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">buf<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>, 
                                   <parameter><decl><type><name pos:line="2" pos:column="36">apr_size_t<pos:position pos:line="2" pos:column="46"/></name></type> <name pos:line="2" pos:column="47">size<pos:position pos:line="2" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="53">apr_pool_t<pos:position pos:line="2" pos:column="63"/></name> <modifier pos:line="2" pos:column="64">*<pos:position pos:line="2" pos:column="65"/></modifier></type><name pos:line="2" pos:column="65">pool<pos:position pos:line="2" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="70"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_socket_t<pos:position pos:line="4" pos:column="17"/></name> <modifier pos:line="4" pos:column="18">*<pos:position pos:line="4" pos:column="19"/></modifier></type><name pos:line="4" pos:column="19">sock<pos:position pos:line="4" pos:column="23"/></name></decl>;<pos:position pos:line="4" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_status_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">rv<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">len<pos:position pos:line="6" pos:column="19"/></name> <init pos:line="6" pos:column="20">= <expr><name pos:line="6" pos:column="22">size<pos:position pos:line="6" pos:column="26"/></name></expr></init></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="28">thistime<pos:position pos:line="6" pos:column="36"/></name> <init pos:line="6" pos:column="37">= <expr><name pos:line="6" pos:column="39">size<pos:position pos:line="6" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name> <modifier pos:line="7" pos:column="10">*<pos:position pos:line="7" pos:column="11"/></modifier></type><name pos:line="7" pos:column="11">recvBuf<pos:position pos:line="7" pos:column="18"/></name></decl>;<pos:position pos:line="7" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_time_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">testStart<pos:position pos:line="8" pos:column="25"/></name> <init pos:line="8" pos:column="26">= <expr><call><name pos:line="8" pos:column="28">apr_time_now<pos:position pos:line="8" pos:column="40"/></name><argument_list pos:line="8" pos:column="40">()<pos:position pos:line="8" pos:column="42"/></argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="44">testEnd<pos:position pos:line="8" pos:column="51"/></name></decl>;<pos:position pos:line="8" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">i<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator> <name pos:line="11" pos:column="11">sockAddr<pos:position pos:line="11" pos:column="19"/></name></expr>)<pos:position pos:line="11" pos:column="20"/></condition><then pos:line="11" pos:column="20"> <block pos:line="11" pos:column="21">{
        <expr_stmt><expr><name pos:line="12" pos:column="9">rv<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">apr_sockaddr_info_get<pos:position pos:line="12" pos:column="35"/></name><argument_list pos:line="12" pos:column="35">(<argument><expr><operator pos:line="12" pos:column="36">&amp;<pos:position pos:line="12" pos:column="41"/></operator><name pos:line="12" pos:column="37">sockAddr<pos:position pos:line="12" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="12" pos:column="47">"127.0.0.1"<pos:position pos:line="12" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="12" pos:column="60">APR_UNSPEC<pos:position pos:line="12" pos:column="70"/></name></expr></argument>,
                                   <argument><expr><name pos:line="13" pos:column="36">testPort<pos:position pos:line="13" pos:column="44"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="13" pos:column="46">0<pos:position pos:line="13" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="13" pos:column="49">pool<pos:position pos:line="13" pos:column="53"/></name></expr></argument>)<pos:position pos:line="13" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="55"/></expr_stmt>
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><name pos:line="14" pos:column="13">rv<pos:position pos:line="14" pos:column="15"/></name> <operator pos:line="14" pos:column="16">!=<pos:position pos:line="14" pos:column="18"/></operator> <name pos:line="14" pos:column="19">APR_SUCCESS<pos:position pos:line="14" pos:column="30"/></name></expr>)<pos:position pos:line="14" pos:column="31"/></condition><then pos:line="14" pos:column="31"> <block pos:line="14" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">reportError<pos:position pos:line="15" pos:column="24"/></name><argument_list pos:line="15" pos:column="24">(<argument><expr><literal type="string" pos:line="15" pos:column="25">"Unable to get socket info"<pos:position pos:line="15" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="15" pos:column="54">rv<pos:position pos:line="15" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="58">pool<pos:position pos:line="15" pos:column="62"/></name></expr></argument>)<pos:position pos:line="15" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="64"/></expr_stmt>
            <return pos:line="16" pos:column="13">return <expr><name pos:line="16" pos:column="20">rv<pos:position pos:line="16" pos:column="22"/></name></expr>;<pos:position pos:line="16" pos:column="23"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="19" pos:column="9">/* make sure we can connect to daemon before we try tests */</comment>

        <expr_stmt><expr><name pos:line="21" pos:column="9">rv<pos:position pos:line="21" pos:column="11"/></name> <operator pos:line="21" pos:column="12">=<pos:position pos:line="21" pos:column="13"/></operator> <call><name pos:line="21" pos:column="14">apr_socket_create<pos:position pos:line="21" pos:column="31"/></name><argument_list pos:line="21" pos:column="31">(<argument><expr><operator pos:line="21" pos:column="32">&amp;<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="33">sock<pos:position pos:line="21" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="39">APR_INET<pos:position pos:line="21" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="49">SOCK_STREAM<pos:position pos:line="21" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="62">APR_PROTO_TCP<pos:position pos:line="21" pos:column="75"/></name></expr></argument>,
                           <argument><expr><name pos:line="22" pos:column="28">pool<pos:position pos:line="22" pos:column="32"/></name></expr></argument>)<pos:position pos:line="22" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="34"/></expr_stmt>
        <if pos:line="23" pos:column="9">if <condition pos:line="23" pos:column="12">(<expr><name pos:line="23" pos:column="13">rv<pos:position pos:line="23" pos:column="15"/></name> <operator pos:line="23" pos:column="16">!=<pos:position pos:line="23" pos:column="18"/></operator> <name pos:line="23" pos:column="19">APR_SUCCESS<pos:position pos:line="23" pos:column="30"/></name></expr>)<pos:position pos:line="23" pos:column="31"/></condition><then pos:line="23" pos:column="31"> <block pos:line="23" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="24" pos:column="13">reportError<pos:position pos:line="24" pos:column="24"/></name><argument_list pos:line="24" pos:column="24">(<argument><expr><literal type="string" pos:line="24" pos:column="25">"Unable to create IPv4 stream socket"<pos:position pos:line="24" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="24" pos:column="64">rv<pos:position pos:line="24" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="68">pool<pos:position pos:line="24" pos:column="72"/></name></expr></argument>)<pos:position pos:line="24" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="74"/></expr_stmt>
            <return pos:line="25" pos:column="13">return <expr><name pos:line="25" pos:column="20">rv<pos:position pos:line="25" pos:column="22"/></name></expr>;<pos:position pos:line="25" pos:column="23"/></return>
        }<pos:position pos:line="26" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="28" pos:column="9">rv<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <call><name pos:line="28" pos:column="14">apr_socket_connect<pos:position pos:line="28" pos:column="32"/></name><argument_list pos:line="28" pos:column="32">(<argument><expr><name pos:line="28" pos:column="33">sock<pos:position pos:line="28" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="39">sockAddr<pos:position pos:line="28" pos:column="47"/></name></expr></argument>)<pos:position pos:line="28" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="49"/></expr_stmt>
        <if pos:line="29" pos:column="9">if <condition pos:line="29" pos:column="12">(<expr><name pos:line="29" pos:column="13">rv<pos:position pos:line="29" pos:column="15"/></name> <operator pos:line="29" pos:column="16">!=<pos:position pos:line="29" pos:column="18"/></operator> <name pos:line="29" pos:column="19">APR_SUCCESS<pos:position pos:line="29" pos:column="30"/></name></expr>)<pos:position pos:line="29" pos:column="31"/></condition><then pos:line="29" pos:column="31"> <block pos:line="29" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="30" pos:column="13">reportError<pos:position pos:line="30" pos:column="24"/></name><argument_list pos:line="30" pos:column="24">(<argument><expr><literal type="string" pos:line="30" pos:column="25">"Unable to connect to echod!"<pos:position pos:line="30" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="30" pos:column="56">rv<pos:position pos:line="30" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="60">pool<pos:position pos:line="30" pos:column="64"/></name></expr></argument>)<pos:position pos:line="30" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="66"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">apr_socket_close<pos:position pos:line="31" pos:column="29"/></name><argument_list pos:line="31" pos:column="29">(<argument><expr><name pos:line="31" pos:column="30">sock<pos:position pos:line="31" pos:column="34"/></name></expr></argument>)<pos:position pos:line="31" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="36"/></expr_stmt>
            <return pos:line="32" pos:column="13">return <expr><name pos:line="32" pos:column="20">rv<pos:position pos:line="32" pos:column="22"/></name></expr>;<pos:position pos:line="32" pos:column="23"/></return>
        }<pos:position pos:line="33" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="34" pos:column="9">apr_socket_close<pos:position pos:line="34" pos:column="25"/></name><argument_list pos:line="34" pos:column="25">(<argument><expr><name pos:line="34" pos:column="26">sock<pos:position pos:line="34" pos:column="30"/></name></expr></argument>)<pos:position pos:line="34" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="32"/></expr_stmt>

    }<pos:position pos:line="36" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="38" pos:column="5">recvBuf<pos:position pos:line="38" pos:column="12"/></name> <operator pos:line="38" pos:column="13">=<pos:position pos:line="38" pos:column="14"/></operator> <call><name pos:line="38" pos:column="15">apr_palloc<pos:position pos:line="38" pos:column="25"/></name><argument_list pos:line="38" pos:column="25">(<argument><expr><name pos:line="38" pos:column="26">pool<pos:position pos:line="38" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="32">size<pos:position pos:line="38" pos:column="36"/></name></expr></argument>)<pos:position pos:line="38" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="38"/></expr_stmt>
    <if pos:line="39" pos:column="5">if <condition pos:line="39" pos:column="8">(<expr><operator pos:line="39" pos:column="9">!<pos:position pos:line="39" pos:column="10"/></operator> <name pos:line="39" pos:column="11">recvBuf<pos:position pos:line="39" pos:column="18"/></name></expr>)<pos:position pos:line="39" pos:column="19"/></condition><then pos:line="39" pos:column="19"> <block pos:line="39" pos:column="20">{
        <expr_stmt><expr><call><name pos:line="40" pos:column="9">reportError<pos:position pos:line="40" pos:column="20"/></name><argument_list pos:line="40" pos:column="20">(<argument><expr><literal type="string" pos:line="40" pos:column="21">"Unable to allocate buffer"<pos:position pos:line="40" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="40" pos:column="50">ENOMEM<pos:position pos:line="40" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="40" pos:column="58">pool<pos:position pos:line="40" pos:column="62"/></name></expr></argument>)<pos:position pos:line="40" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="64"/></expr_stmt>
        <return pos:line="41" pos:column="9">return <expr><name pos:line="41" pos:column="16">ENOMEM<pos:position pos:line="41" pos:column="22"/></name></expr>;<pos:position pos:line="41" pos:column="23"/></return>
    }<pos:position pos:line="42" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="44" pos:column="5">*<pos:position pos:line="44" pos:column="6"/></operator><name pos:line="44" pos:column="6">t<pos:position pos:line="44" pos:column="7"/></name> <operator pos:line="44" pos:column="8">=<pos:position pos:line="44" pos:column="9"/></operator> <literal type="number" pos:line="44" pos:column="10">0<pos:position pos:line="44" pos:column="11"/></literal></expr>;<pos:position pos:line="44" pos:column="12"/></expr_stmt>

    <comment type="block" pos:line="46" pos:column="5">/* START! */</comment>
    <expr_stmt><expr><name pos:line="47" pos:column="5">testStart<pos:position pos:line="47" pos:column="14"/></name> <operator pos:line="47" pos:column="15">=<pos:position pos:line="47" pos:column="16"/></operator> <call><name pos:line="47" pos:column="17">apr_time_now<pos:position pos:line="47" pos:column="29"/></name><argument_list pos:line="47" pos:column="29">()<pos:position pos:line="47" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><name pos:line="48" pos:column="5">rv<pos:position pos:line="48" pos:column="7"/></name> <operator pos:line="48" pos:column="8">=<pos:position pos:line="48" pos:column="9"/></operator> <call><name pos:line="48" pos:column="10">apr_socket_create<pos:position pos:line="48" pos:column="27"/></name><argument_list pos:line="48" pos:column="27">(<argument><expr><operator pos:line="48" pos:column="28">&amp;<pos:position pos:line="48" pos:column="33"/></operator><name pos:line="48" pos:column="29">sock<pos:position pos:line="48" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="35">APR_INET<pos:position pos:line="48" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="45">SOCK_STREAM<pos:position pos:line="48" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="58">APR_PROTO_TCP<pos:position pos:line="48" pos:column="71"/></name></expr></argument>,
                           <argument><expr><name pos:line="49" pos:column="28">pool<pos:position pos:line="49" pos:column="32"/></name></expr></argument>)<pos:position pos:line="49" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="34"/></expr_stmt>
    <if pos:line="50" pos:column="5">if <condition pos:line="50" pos:column="8">(<expr><name pos:line="50" pos:column="9">rv<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">!=<pos:position pos:line="50" pos:column="14"/></operator> <name pos:line="50" pos:column="15">APR_SUCCESS<pos:position pos:line="50" pos:column="26"/></name></expr>)<pos:position pos:line="50" pos:column="27"/></condition><then pos:line="50" pos:column="27"> <block pos:line="50" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="51" pos:column="9">reportError<pos:position pos:line="51" pos:column="20"/></name><argument_list pos:line="51" pos:column="20">(<argument><expr><literal type="string" pos:line="51" pos:column="21">"Unable to create IPv4 stream socket"<pos:position pos:line="51" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="60">rv<pos:position pos:line="51" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="64">pool<pos:position pos:line="51" pos:column="68"/></name></expr></argument>)<pos:position pos:line="51" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="70"/></expr_stmt>
        <return pos:line="52" pos:column="9">return <expr><name pos:line="52" pos:column="16">rv<pos:position pos:line="52" pos:column="18"/></name></expr>;<pos:position pos:line="52" pos:column="19"/></return>
    }<pos:position pos:line="53" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="55" pos:column="5">rv<pos:position pos:line="55" pos:column="7"/></name> <operator pos:line="55" pos:column="8">=<pos:position pos:line="55" pos:column="9"/></operator> <call><name pos:line="55" pos:column="10">apr_socket_connect<pos:position pos:line="55" pos:column="28"/></name><argument_list pos:line="55" pos:column="28">(<argument><expr><name pos:line="55" pos:column="29">sock<pos:position pos:line="55" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">sockAddr<pos:position pos:line="55" pos:column="43"/></name></expr></argument>)<pos:position pos:line="55" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="45"/></expr_stmt>
    <if pos:line="56" pos:column="5">if <condition pos:line="56" pos:column="8">(<expr><name pos:line="56" pos:column="9">rv<pos:position pos:line="56" pos:column="11"/></name> <operator pos:line="56" pos:column="12">!=<pos:position pos:line="56" pos:column="14"/></operator> <name pos:line="56" pos:column="15">APR_SUCCESS<pos:position pos:line="56" pos:column="26"/></name></expr>)<pos:position pos:line="56" pos:column="27"/></condition><then pos:line="56" pos:column="27"> <block pos:line="56" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="57" pos:column="9">reportError<pos:position pos:line="57" pos:column="20"/></name><argument_list pos:line="57" pos:column="20">(<argument><expr><literal type="string" pos:line="57" pos:column="21">"Unable to connect to echod!"<pos:position pos:line="57" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="52">rv<pos:position pos:line="57" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="56">pool<pos:position pos:line="57" pos:column="60"/></name></expr></argument>)<pos:position pos:line="57" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="58" pos:column="9">apr_socket_close<pos:position pos:line="58" pos:column="25"/></name><argument_list pos:line="58" pos:column="25">(<argument><expr><name pos:line="58" pos:column="26">sock<pos:position pos:line="58" pos:column="30"/></name></expr></argument>)<pos:position pos:line="58" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="32"/></expr_stmt>
        <return pos:line="59" pos:column="9">return <expr><name pos:line="59" pos:column="16">rv<pos:position pos:line="59" pos:column="18"/></name></expr>;<pos:position pos:line="59" pos:column="19"/></return>
    }<pos:position pos:line="60" pos:column="6"/></block></then></if>

    <for pos:line="62" pos:column="5">for <control pos:line="62" pos:column="9">(<init><expr><name pos:line="62" pos:column="10">i<pos:position pos:line="62" pos:column="11"/></name> <operator pos:line="62" pos:column="12">=<pos:position pos:line="62" pos:column="13"/></operator> <literal type="number" pos:line="62" pos:column="14">0<pos:position pos:line="62" pos:column="15"/></literal></expr>;<pos:position pos:line="62" pos:column="16"/></init> <condition><expr><name pos:line="62" pos:column="17">i<pos:position pos:line="62" pos:column="18"/></name> <operator pos:line="62" pos:column="19">&lt;<pos:position pos:line="62" pos:column="23"/></operator> <literal type="number" pos:line="62" pos:column="21">3<pos:position pos:line="62" pos:column="22"/></literal></expr>;<pos:position pos:line="62" pos:column="23"/></condition> <incr><expr><name pos:line="62" pos:column="24">i<pos:position pos:line="62" pos:column="25"/></name><operator pos:line="62" pos:column="25">++<pos:position pos:line="62" pos:column="27"/></operator></expr></incr>)<pos:position pos:line="62" pos:column="28"/></control> <block pos:line="62" pos:column="29">{

        <expr_stmt><expr><name pos:line="64" pos:column="9">len<pos:position pos:line="64" pos:column="12"/></name> <operator pos:line="64" pos:column="13">=<pos:position pos:line="64" pos:column="14"/></operator> <name pos:line="64" pos:column="15">size<pos:position pos:line="64" pos:column="19"/></name></expr>;<pos:position pos:line="64" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><name pos:line="65" pos:column="9">thistime<pos:position pos:line="65" pos:column="17"/></name> <operator pos:line="65" pos:column="18">=<pos:position pos:line="65" pos:column="19"/></operator> <name pos:line="65" pos:column="20">size<pos:position pos:line="65" pos:column="24"/></name></expr>;<pos:position pos:line="65" pos:column="25"/></expr_stmt>

        <expr_stmt><expr><name pos:line="67" pos:column="9">rv<pos:position pos:line="67" pos:column="11"/></name> <operator pos:line="67" pos:column="12">=<pos:position pos:line="67" pos:column="13"/></operator> <call><name pos:line="67" pos:column="14">apr_socket_send<pos:position pos:line="67" pos:column="29"/></name><argument_list pos:line="67" pos:column="29">(<argument><expr><name pos:line="67" pos:column="30">sock<pos:position pos:line="67" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="67" pos:column="36">buf<pos:position pos:line="67" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="67" pos:column="41">&amp;<pos:position pos:line="67" pos:column="46"/></operator><name pos:line="67" pos:column="42">len<pos:position pos:line="67" pos:column="45"/></name></expr></argument>)<pos:position pos:line="67" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="67" pos:column="47"/></expr_stmt>
        <if pos:line="68" pos:column="9">if <condition pos:line="68" pos:column="12">(<expr><name pos:line="68" pos:column="13">rv<pos:position pos:line="68" pos:column="15"/></name> <operator pos:line="68" pos:column="16">!=<pos:position pos:line="68" pos:column="18"/></operator> <name pos:line="68" pos:column="19">APR_SUCCESS<pos:position pos:line="68" pos:column="30"/></name> <operator pos:line="68" pos:column="31">||<pos:position pos:line="68" pos:column="33"/></operator> <name pos:line="68" pos:column="34">len<pos:position pos:line="68" pos:column="37"/></name> <operator pos:line="68" pos:column="38">!=<pos:position pos:line="68" pos:column="40"/></operator> <name pos:line="68" pos:column="41">size<pos:position pos:line="68" pos:column="45"/></name></expr>)<pos:position pos:line="68" pos:column="46"/></condition><then pos:line="68" pos:column="46"> <block pos:line="68" pos:column="47">{
            <expr_stmt><expr><call><name pos:line="69" pos:column="13">reportError<pos:position pos:line="69" pos:column="24"/></name><argument_list pos:line="69" pos:column="24">(<argument><expr><call><name pos:line="69" pos:column="25">apr_psprintf<pos:position pos:line="69" pos:column="37"/></name><argument_list pos:line="69" pos:column="37">(<argument><expr><name pos:line="69" pos:column="38">pool<pos:position pos:line="69" pos:column="42"/></name></expr></argument>, 
                         <argument><expr><literal type="string" pos:line="70" pos:column="26">"Unable to send data correctly (iteration %d of 3)"<pos:position pos:line="70" pos:column="77"/></literal></expr></argument>,
                         <argument><expr><name pos:line="71" pos:column="26">i<pos:position pos:line="71" pos:column="27"/></name></expr></argument>)<pos:position pos:line="71" pos:column="28"/></argument_list></call></expr></argument> , <argument><expr><name pos:line="71" pos:column="31">rv<pos:position pos:line="71" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="35">pool<pos:position pos:line="71" pos:column="39"/></name></expr></argument>)<pos:position pos:line="71" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="41"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="72" pos:column="13">closeConnection<pos:position pos:line="72" pos:column="28"/></name><argument_list pos:line="72" pos:column="28">(<argument><expr><name pos:line="72" pos:column="29">sock<pos:position pos:line="72" pos:column="33"/></name></expr></argument>)<pos:position pos:line="72" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="35"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="73" pos:column="13">apr_socket_close<pos:position pos:line="73" pos:column="29"/></name><argument_list pos:line="73" pos:column="29">(<argument><expr><name pos:line="73" pos:column="30">sock<pos:position pos:line="73" pos:column="34"/></name></expr></argument>)<pos:position pos:line="73" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="36"/></expr_stmt>
            <return pos:line="74" pos:column="13">return <expr><name pos:line="74" pos:column="20">rv<pos:position pos:line="74" pos:column="22"/></name></expr>;<pos:position pos:line="74" pos:column="23"/></return>
        }<pos:position pos:line="75" pos:column="10"/></block></then></if>
    
        <do pos:line="77" pos:column="9">do <block pos:line="77" pos:column="12">{
            <expr_stmt><expr><name pos:line="78" pos:column="13">len<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">=<pos:position pos:line="78" pos:column="18"/></operator> <name pos:line="78" pos:column="19">thistime<pos:position pos:line="78" pos:column="27"/></name></expr>;<pos:position pos:line="78" pos:column="28"/></expr_stmt>
            <expr_stmt><expr><name pos:line="79" pos:column="13">rv<pos:position pos:line="79" pos:column="15"/></name> <operator pos:line="79" pos:column="16">=<pos:position pos:line="79" pos:column="17"/></operator> <call><name pos:line="79" pos:column="18">apr_socket_recv<pos:position pos:line="79" pos:column="33"/></name><argument_list pos:line="79" pos:column="33">(<argument><expr><name pos:line="79" pos:column="34">sock<pos:position pos:line="79" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="40">&amp;<pos:position pos:line="79" pos:column="45"/></operator><name><name pos:line="79" pos:column="41">recvBuf<pos:position pos:line="79" pos:column="48"/></name><index pos:line="79" pos:column="48">[<expr><name pos:line="79" pos:column="49">size<pos:position pos:line="79" pos:column="53"/></name> <operator pos:line="79" pos:column="54">-<pos:position pos:line="79" pos:column="55"/></operator> <name pos:line="79" pos:column="56">thistime<pos:position pos:line="79" pos:column="64"/></name></expr>]<pos:position pos:line="79" pos:column="65"/></index></name></expr></argument>, <argument><expr><operator pos:line="79" pos:column="67">&amp;<pos:position pos:line="79" pos:column="72"/></operator><name pos:line="79" pos:column="68">len<pos:position pos:line="79" pos:column="71"/></name></expr></argument>)<pos:position pos:line="79" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="73"/></expr_stmt>
            <if pos:line="80" pos:column="13">if <condition pos:line="80" pos:column="16">(<expr><name pos:line="80" pos:column="17">rv<pos:position pos:line="80" pos:column="19"/></name> <operator pos:line="80" pos:column="20">!=<pos:position pos:line="80" pos:column="22"/></operator> <name pos:line="80" pos:column="23">APR_SUCCESS<pos:position pos:line="80" pos:column="34"/></name></expr>)<pos:position pos:line="80" pos:column="35"/></condition><then pos:line="80" pos:column="35"> <block pos:line="80" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="81" pos:column="17">reportError<pos:position pos:line="81" pos:column="28"/></name><argument_list pos:line="81" pos:column="28">(<argument><expr><literal type="string" pos:line="81" pos:column="29">"Error receiving from socket"<pos:position pos:line="81" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="81" pos:column="60">rv<pos:position pos:line="81" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="64">pool<pos:position pos:line="81" pos:column="68"/></name></expr></argument>)<pos:position pos:line="81" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="70"/></expr_stmt>
                <break pos:line="82" pos:column="17">break;<pos:position pos:line="82" pos:column="23"/></break>
            }<pos:position pos:line="83" pos:column="14"/></block></then></if>
            <expr_stmt><expr><name pos:line="84" pos:column="13">thistime<pos:position pos:line="84" pos:column="21"/></name> <operator pos:line="84" pos:column="22">-=<pos:position pos:line="84" pos:column="24"/></operator> <name pos:line="84" pos:column="25">len<pos:position pos:line="84" pos:column="28"/></name></expr>;<pos:position pos:line="84" pos:column="29"/></expr_stmt>
        }<pos:position pos:line="85" pos:column="10"/></block> while <condition pos:line="85" pos:column="17">(<expr><name pos:line="85" pos:column="18">thistime<pos:position pos:line="85" pos:column="26"/></name></expr>)<pos:position pos:line="85" pos:column="27"/></condition>;<pos:position pos:line="85" pos:column="28"/></do>
    }<pos:position pos:line="86" pos:column="6"/></block></for>

    <expr_stmt><expr><call><name pos:line="88" pos:column="5">closeConnection<pos:position pos:line="88" pos:column="20"/></name><argument_list pos:line="88" pos:column="20">(<argument><expr><name pos:line="88" pos:column="21">sock<pos:position pos:line="88" pos:column="25"/></name></expr></argument>)<pos:position pos:line="88" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="89" pos:column="5">apr_socket_close<pos:position pos:line="89" pos:column="21"/></name><argument_list pos:line="89" pos:column="21">(<argument><expr><name pos:line="89" pos:column="22">sock<pos:position pos:line="89" pos:column="26"/></name></expr></argument>)<pos:position pos:line="89" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="90" pos:column="5">testEnd<pos:position pos:line="90" pos:column="12"/></name> <operator pos:line="90" pos:column="13">=<pos:position pos:line="90" pos:column="14"/></operator> <call><name pos:line="90" pos:column="15">apr_time_now<pos:position pos:line="90" pos:column="27"/></name><argument_list pos:line="90" pos:column="27">()<pos:position pos:line="90" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="30"/></expr_stmt>
    <comment type="block" pos:line="91" pos:column="5">/* STOP! */</comment>

    <if pos:line="93" pos:column="5">if <condition pos:line="93" pos:column="8">(<expr><name pos:line="93" pos:column="9">thistime<pos:position pos:line="93" pos:column="17"/></name></expr>)<pos:position pos:line="93" pos:column="18"/></condition><then pos:line="93" pos:column="18"> <block pos:line="93" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="94" pos:column="9">reportError<pos:position pos:line="94" pos:column="20"/></name><argument_list pos:line="94" pos:column="20">(<argument><expr><literal type="string" pos:line="94" pos:column="21">"Received less than we sent :-("<pos:position pos:line="94" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="55">rv<pos:position pos:line="94" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="59">pool<pos:position pos:line="94" pos:column="63"/></name></expr></argument>)<pos:position pos:line="94" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="94" pos:column="65"/></expr_stmt>
        <return pos:line="95" pos:column="9">return <expr><name pos:line="95" pos:column="16">rv<pos:position pos:line="95" pos:column="18"/></name></expr>;<pos:position pos:line="95" pos:column="19"/></return>
    }<pos:position pos:line="96" pos:column="6"/></block></then></if>        
    <if pos:line="97" pos:column="5">if <condition pos:line="97" pos:column="8">(<expr><call><name pos:line="97" pos:column="9">strncmp<pos:position pos:line="97" pos:column="16"/></name><argument_list pos:line="97" pos:column="16">(<argument><expr><name pos:line="97" pos:column="17">recvBuf<pos:position pos:line="97" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="26">buf<pos:position pos:line="97" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="97" pos:column="31">size<pos:position pos:line="97" pos:column="35"/></name></expr></argument>)<pos:position pos:line="97" pos:column="36"/></argument_list></call> <operator pos:line="97" pos:column="37">!=<pos:position pos:line="97" pos:column="39"/></operator> <literal type="number" pos:line="97" pos:column="40">0<pos:position pos:line="97" pos:column="41"/></literal></expr>)<pos:position pos:line="97" pos:column="42"/></condition><then pos:line="97" pos:column="42"> <block pos:line="97" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="98" pos:column="9">reportError<pos:position pos:line="98" pos:column="20"/></name><argument_list pos:line="98" pos:column="20">(<argument><expr><literal type="string" pos:line="98" pos:column="21">"Received corrupt data :-("<pos:position pos:line="98" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="98" pos:column="50">0<pos:position pos:line="98" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="98" pos:column="53">pool<pos:position pos:line="98" pos:column="57"/></name></expr></argument>)<pos:position pos:line="98" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="99" pos:column="9">printf<pos:position pos:line="99" pos:column="15"/></name><argument_list pos:line="99" pos:column="15">(<argument><expr><literal type="string" pos:line="99" pos:column="16">"We sent:\n%s\nWe received:\n%s\n"<pos:position pos:line="99" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="99" pos:column="52">buf<pos:position pos:line="99" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="57">recvBuf<pos:position pos:line="99" pos:column="64"/></name></expr></argument>)<pos:position pos:line="99" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="66"/></expr_stmt>
        <return pos:line="100" pos:column="9">return <expr><name pos:line="100" pos:column="16">EINVAL<pos:position pos:line="100" pos:column="22"/></name></expr>;<pos:position pos:line="100" pos:column="23"/></return>
    }<pos:position pos:line="101" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="102" pos:column="5">*<pos:position pos:line="102" pos:column="6"/></operator><name pos:line="102" pos:column="6">t<pos:position pos:line="102" pos:column="7"/></name> <operator pos:line="102" pos:column="8">=<pos:position pos:line="102" pos:column="9"/></operator> <name pos:line="102" pos:column="10">testEnd<pos:position pos:line="102" pos:column="17"/></name> <operator pos:line="102" pos:column="18">-<pos:position pos:line="102" pos:column="19"/></operator> <name pos:line="102" pos:column="20">testStart<pos:position pos:line="102" pos:column="29"/></name></expr>;<pos:position pos:line="102" pos:column="30"/></expr_stmt>
    <return pos:line="103" pos:column="5">return <expr><name pos:line="103" pos:column="12">APR_SUCCESS<pos:position pos:line="103" pos:column="23"/></name></expr>;<pos:position pos:line="103" pos:column="24"/></return>
}<pos:position pos:line="104" pos:column="2"/></block></function></unit>
