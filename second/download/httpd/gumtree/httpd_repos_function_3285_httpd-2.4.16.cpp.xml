<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3285_httpd-2.4.16.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">dummy_connection<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">ap_pod_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">pod<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="52"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="3" pos:column="5">const<pos:position pos:line="3" pos:column="10"/></specifier> <name pos:line="3" pos:column="11">char<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">data<pos:position pos:line="3" pos:column="21"/></name></decl>;<pos:position pos:line="3" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_socket_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">sock<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_pool_t<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">p<pos:position pos:line="6" pos:column="18"/></name></decl>;<pos:position pos:line="6" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">len<pos:position pos:line="7" pos:column="19"/></name></decl>;<pos:position pos:line="7" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">ap_listen_rec<pos:position pos:line="8" pos:column="18"/></name> <modifier pos:line="8" pos:column="19">*<pos:position pos:line="8" pos:column="20"/></modifier></type><name pos:line="8" pos:column="20">lp<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>

    <comment type="block" pos:line="10" pos:column="5">/* create a temporary pool for the socket.  pconf stays around too long */</comment>
    <expr_stmt><expr><name pos:line="11" pos:column="5">rv<pos:position pos:line="11" pos:column="7"/></name> <operator pos:line="11" pos:column="8">=<pos:position pos:line="11" pos:column="9"/></operator> <call><name pos:line="11" pos:column="10">apr_pool_create<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><operator pos:line="11" pos:column="26">&amp;<pos:position pos:line="11" pos:column="31"/></operator><name pos:line="11" pos:column="27">p<pos:position pos:line="11" pos:column="28"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="30">pod<pos:position pos:line="11" pos:column="33"/></name><operator pos:line="11" pos:column="33">-&gt;<pos:position pos:line="11" pos:column="38"/></operator><name pos:line="11" pos:column="35">p<pos:position pos:line="11" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">rv<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">!=<pos:position pos:line="12" pos:column="14"/></operator> <name pos:line="12" pos:column="15">APR_SUCCESS<pos:position pos:line="12" pos:column="26"/></name></expr>)<pos:position pos:line="12" pos:column="27"/></condition><then pos:line="12" pos:column="27"> <block pos:line="12" pos:column="28">{
        <return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">rv<pos:position pos:line="13" pos:column="18"/></name></expr>;<pos:position pos:line="13" pos:column="19"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="16" pos:column="5">/* If possible, find a listener which is configured for
     * plain-HTTP, not SSL; using an SSL port would either be
     * expensive to do correctly (performing a complete SSL handshake)
     * or cause log spam by doing incorrectly (simply sending EOF). */</comment>
    <expr_stmt><expr><name pos:line="20" pos:column="5">lp<pos:position pos:line="20" pos:column="7"/></name> <operator pos:line="20" pos:column="8">=<pos:position pos:line="20" pos:column="9"/></operator> <name pos:line="20" pos:column="10">ap_listeners<pos:position pos:line="20" pos:column="22"/></name></expr>;<pos:position pos:line="20" pos:column="23"/></expr_stmt>
    <while pos:line="21" pos:column="5">while <condition pos:line="21" pos:column="11">(<expr><name pos:line="21" pos:column="12">lp<pos:position pos:line="21" pos:column="14"/></name> <operator pos:line="21" pos:column="15">&amp;&amp;<pos:position pos:line="21" pos:column="25"/></operator> <name><name pos:line="21" pos:column="18">lp<pos:position pos:line="21" pos:column="20"/></name><operator pos:line="21" pos:column="20">-&gt;<pos:position pos:line="21" pos:column="25"/></operator><name pos:line="21" pos:column="22">protocol<pos:position pos:line="21" pos:column="30"/></name></name> <operator pos:line="21" pos:column="31">&amp;&amp;<pos:position pos:line="21" pos:column="41"/></operator> <call><name pos:line="21" pos:column="34">strcasecmp<pos:position pos:line="21" pos:column="44"/></name><argument_list pos:line="21" pos:column="44">(<argument><expr><name><name pos:line="21" pos:column="45">lp<pos:position pos:line="21" pos:column="47"/></name><operator pos:line="21" pos:column="47">-&gt;<pos:position pos:line="21" pos:column="52"/></operator><name pos:line="21" pos:column="49">protocol<pos:position pos:line="21" pos:column="57"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="21" pos:column="59">"http"<pos:position pos:line="21" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="66"/></argument_list></call> <operator pos:line="21" pos:column="67">!=<pos:position pos:line="21" pos:column="69"/></operator> <literal type="number" pos:line="21" pos:column="70">0<pos:position pos:line="21" pos:column="71"/></literal></expr>)<pos:position pos:line="21" pos:column="72"/></condition> <block pos:line="21" pos:column="73">{
        <expr_stmt><expr><name pos:line="22" pos:column="9">lp<pos:position pos:line="22" pos:column="11"/></name> <operator pos:line="22" pos:column="12">=<pos:position pos:line="22" pos:column="13"/></operator> <name><name pos:line="22" pos:column="14">lp<pos:position pos:line="22" pos:column="16"/></name><operator pos:line="22" pos:column="16">-&gt;<pos:position pos:line="22" pos:column="21"/></operator><name pos:line="22" pos:column="18">next<pos:position pos:line="22" pos:column="22"/></name></name></expr>;<pos:position pos:line="22" pos:column="23"/></expr_stmt>
    }<pos:position pos:line="23" pos:column="6"/></block></while>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">!<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">lp<pos:position pos:line="24" pos:column="12"/></name></expr>)<pos:position pos:line="24" pos:column="13"/></condition><then pos:line="24" pos:column="13"> <block pos:line="24" pos:column="14">{
        <expr_stmt><expr><name pos:line="25" pos:column="9">lp<pos:position pos:line="25" pos:column="11"/></name> <operator pos:line="25" pos:column="12">=<pos:position pos:line="25" pos:column="13"/></operator> <name pos:line="25" pos:column="14">ap_listeners<pos:position pos:line="25" pos:column="26"/></name></expr>;<pos:position pos:line="25" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="28" pos:column="5">rv<pos:position pos:line="28" pos:column="7"/></name> <operator pos:line="28" pos:column="8">=<pos:position pos:line="28" pos:column="9"/></operator> <call><name pos:line="28" pos:column="10">apr_socket_create<pos:position pos:line="28" pos:column="27"/></name><argument_list pos:line="28" pos:column="27">(<argument><expr><operator pos:line="28" pos:column="28">&amp;<pos:position pos:line="28" pos:column="33"/></operator><name pos:line="28" pos:column="29">sock<pos:position pos:line="28" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="35">lp<pos:position pos:line="28" pos:column="37"/></name><operator pos:line="28" pos:column="37">-&gt;<pos:position pos:line="28" pos:column="42"/></operator><name pos:line="28" pos:column="39">bind_addr<pos:position pos:line="28" pos:column="48"/></name><operator pos:line="28" pos:column="48">-&gt;<pos:position pos:line="28" pos:column="53"/></operator><name pos:line="28" pos:column="50">family<pos:position pos:line="28" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="58">SOCK_STREAM<pos:position pos:line="28" pos:column="69"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="28" pos:column="71">0<pos:position pos:line="28" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="28" pos:column="74">p<pos:position pos:line="28" pos:column="75"/></name></expr></argument>)<pos:position pos:line="28" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="77"/></expr_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">rv<pos:position pos:line="29" pos:column="11"/></name> <operator pos:line="29" pos:column="12">!=<pos:position pos:line="29" pos:column="14"/></operator> <name pos:line="29" pos:column="15">APR_SUCCESS<pos:position pos:line="29" pos:column="26"/></name></expr>)<pos:position pos:line="29" pos:column="27"/></condition><then pos:line="29" pos:column="27"> <block pos:line="29" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="30" pos:column="9">ap_log_error<pos:position pos:line="30" pos:column="21"/></name><argument_list pos:line="30" pos:column="21">(<argument><expr><name pos:line="30" pos:column="22">APLOG_MARK<pos:position pos:line="30" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="34">APLOG_WARNING<pos:position pos:line="30" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="49">rv<pos:position pos:line="30" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="53">ap_server_conf<pos:position pos:line="30" pos:column="67"/></name></expr></argument>, <argument><expr><call><name pos:line="30" pos:column="69">APLOGNO<pos:position pos:line="30" pos:column="76"/></name><argument_list pos:line="30" pos:column="76">(<argument><expr><literal type="number" pos:line="30" pos:column="77">00054<pos:position pos:line="30" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="83"/></argument_list></call>
                     <literal type="string" pos:line="31" pos:column="22">"get socket to connect to listener"<pos:position pos:line="31" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="31" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">apr_pool_destroy<pos:position pos:line="32" pos:column="25"/></name><argument_list pos:line="32" pos:column="25">(<argument><expr><name pos:line="32" pos:column="26">p<pos:position pos:line="32" pos:column="27"/></name></expr></argument>)<pos:position pos:line="32" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="29"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><name pos:line="33" pos:column="16">rv<pos:position pos:line="33" pos:column="18"/></name></expr>;<pos:position pos:line="33" pos:column="19"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="36" pos:column="5">/* on some platforms (e.g., FreeBSD), the kernel won't accept many
     * queued connections before it starts blocking local connects...
     * we need to keep from blocking too long and instead return an error,
     * because the MPM won't want to hold up a graceful restart for a
     * long time
     */</comment>
    <expr_stmt><expr><name pos:line="42" pos:column="5">rv<pos:position pos:line="42" pos:column="7"/></name> <operator pos:line="42" pos:column="8">=<pos:position pos:line="42" pos:column="9"/></operator> <call><name pos:line="42" pos:column="10">apr_socket_timeout_set<pos:position pos:line="42" pos:column="32"/></name><argument_list pos:line="42" pos:column="32">(<argument><expr><name pos:line="42" pos:column="33">sock<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><call><name pos:line="42" pos:column="39">apr_time_from_sec<pos:position pos:line="42" pos:column="56"/></name><argument_list pos:line="42" pos:column="56">(<argument><expr><literal type="number" pos:line="42" pos:column="57">3<pos:position pos:line="42" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="42" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="61"/></expr_stmt>
    <if pos:line="43" pos:column="5">if <condition pos:line="43" pos:column="8">(<expr><name pos:line="43" pos:column="9">rv<pos:position pos:line="43" pos:column="11"/></name> <operator pos:line="43" pos:column="12">!=<pos:position pos:line="43" pos:column="14"/></operator> <name pos:line="43" pos:column="15">APR_SUCCESS<pos:position pos:line="43" pos:column="26"/></name></expr>)<pos:position pos:line="43" pos:column="27"/></condition><then pos:line="43" pos:column="27"> <block pos:line="43" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="44" pos:column="9">ap_log_error<pos:position pos:line="44" pos:column="21"/></name><argument_list pos:line="44" pos:column="21">(<argument><expr><name pos:line="44" pos:column="22">APLOG_MARK<pos:position pos:line="44" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="34">APLOG_WARNING<pos:position pos:line="44" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="49">rv<pos:position pos:line="44" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="53">ap_server_conf<pos:position pos:line="44" pos:column="67"/></name></expr></argument>, <argument><expr><call><name pos:line="44" pos:column="69">APLOGNO<pos:position pos:line="44" pos:column="76"/></name><argument_list pos:line="44" pos:column="76">(<argument><expr><literal type="number" pos:line="44" pos:column="77">00055<pos:position pos:line="44" pos:column="82"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="83"/></argument_list></call>
                     <literal type="string" pos:line="45" pos:column="22">"set timeout on socket to connect to listener"<pos:position pos:line="45" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="45" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="70"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">apr_socket_close<pos:position pos:line="46" pos:column="25"/></name><argument_list pos:line="46" pos:column="25">(<argument><expr><name pos:line="46" pos:column="26">sock<pos:position pos:line="46" pos:column="30"/></name></expr></argument>)<pos:position pos:line="46" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="47" pos:column="9">apr_pool_destroy<pos:position pos:line="47" pos:column="25"/></name><argument_list pos:line="47" pos:column="25">(<argument><expr><name pos:line="47" pos:column="26">p<pos:position pos:line="47" pos:column="27"/></name></expr></argument>)<pos:position pos:line="47" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="29"/></expr_stmt>
        <return pos:line="48" pos:column="9">return <expr><name pos:line="48" pos:column="16">rv<pos:position pos:line="48" pos:column="18"/></name></expr>;<pos:position pos:line="48" pos:column="19"/></return>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="51" pos:column="5">rv<pos:position pos:line="51" pos:column="7"/></name> <operator pos:line="51" pos:column="8">=<pos:position pos:line="51" pos:column="9"/></operator> <call><name pos:line="51" pos:column="10">apr_socket_connect<pos:position pos:line="51" pos:column="28"/></name><argument_list pos:line="51" pos:column="28">(<argument><expr><name pos:line="51" pos:column="29">sock<pos:position pos:line="51" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="51" pos:column="35">lp<pos:position pos:line="51" pos:column="37"/></name><operator pos:line="51" pos:column="37">-&gt;<pos:position pos:line="51" pos:column="42"/></operator><name pos:line="51" pos:column="39">bind_addr<pos:position pos:line="51" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="51" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="50"/></expr_stmt>
    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">rv<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">!=<pos:position pos:line="52" pos:column="14"/></operator> <name pos:line="52" pos:column="15">APR_SUCCESS<pos:position pos:line="52" pos:column="26"/></name></expr>)<pos:position pos:line="52" pos:column="27"/></condition><then pos:line="52" pos:column="27"> <block pos:line="52" pos:column="28">{
        <decl_stmt><decl><type><name pos:line="53" pos:column="9">int<pos:position pos:line="53" pos:column="12"/></name></type> <name pos:line="53" pos:column="13">log_level<pos:position pos:line="53" pos:column="22"/></name> <init pos:line="53" pos:column="23">= <expr><name pos:line="53" pos:column="25">APLOG_WARNING<pos:position pos:line="53" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="53" pos:column="39"/></decl_stmt>

        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><call><name pos:line="55" pos:column="13">APR_STATUS_IS_TIMEUP<pos:position pos:line="55" pos:column="33"/></name><argument_list pos:line="55" pos:column="33">(<argument><expr><name pos:line="55" pos:column="34">rv<pos:position pos:line="55" pos:column="36"/></name></expr></argument>)<pos:position pos:line="55" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="55" pos:column="38"/></condition><then pos:line="55" pos:column="38"> <block pos:line="55" pos:column="39">{
            <comment type="block" pos:line="56" pos:column="13">/* probably some server processes bailed out already and there
             * is nobody around to call accept and clear out the kernel
             * connection queue; usually this is not worth logging
             */</comment>
            <expr_stmt><expr><name pos:line="60" pos:column="13">log_level<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">=<pos:position pos:line="60" pos:column="24"/></operator> <name pos:line="60" pos:column="25">APLOG_DEBUG<pos:position pos:line="60" pos:column="36"/></name></expr>;<pos:position pos:line="60" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>

        <expr_stmt><expr><call><name pos:line="63" pos:column="9">ap_log_error<pos:position pos:line="63" pos:column="21"/></name><argument_list pos:line="63" pos:column="21">(<argument><expr><name pos:line="63" pos:column="22">APLOG_MARK<pos:position pos:line="63" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="34">log_level<pos:position pos:line="63" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="45">rv<pos:position pos:line="63" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="63" pos:column="49">ap_server_conf<pos:position pos:line="63" pos:column="63"/></name></expr></argument>, <argument><expr><call><name pos:line="63" pos:column="65">APLOGNO<pos:position pos:line="63" pos:column="72"/></name><argument_list pos:line="63" pos:column="72">(<argument><expr><literal type="number" pos:line="63" pos:column="73">00056<pos:position pos:line="63" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="63" pos:column="79"/></argument_list></call>
                     <literal type="string" pos:line="64" pos:column="22">"connect to listener on %pI"<pos:position pos:line="64" pos:column="50"/></literal></expr></argument>, <argument><expr><name><name pos:line="64" pos:column="52">lp<pos:position pos:line="64" pos:column="54"/></name><operator pos:line="64" pos:column="54">-&gt;<pos:position pos:line="64" pos:column="59"/></operator><name pos:line="64" pos:column="56">bind_addr<pos:position pos:line="64" pos:column="65"/></name></name></expr></argument>)<pos:position pos:line="64" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="65" pos:column="9">apr_pool_destroy<pos:position pos:line="65" pos:column="25"/></name><argument_list pos:line="65" pos:column="25">(<argument><expr><name pos:line="65" pos:column="26">p<pos:position pos:line="65" pos:column="27"/></name></expr></argument>)<pos:position pos:line="65" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="29"/></expr_stmt>
        <return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">rv<pos:position pos:line="66" pos:column="18"/></name></expr>;<pos:position pos:line="66" pos:column="19"/></return>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>

    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name><name pos:line="69" pos:column="9">lp<pos:position pos:line="69" pos:column="11"/></name><operator pos:line="69" pos:column="11">-&gt;<pos:position pos:line="69" pos:column="16"/></operator><name pos:line="69" pos:column="13">protocol<pos:position pos:line="69" pos:column="21"/></name></name> <operator pos:line="69" pos:column="22">&amp;&amp;<pos:position pos:line="69" pos:column="32"/></operator> <call><name pos:line="69" pos:column="25">strcasecmp<pos:position pos:line="69" pos:column="35"/></name><argument_list pos:line="69" pos:column="35">(<argument><expr><name><name pos:line="69" pos:column="36">lp<pos:position pos:line="69" pos:column="38"/></name><operator pos:line="69" pos:column="38">-&gt;<pos:position pos:line="69" pos:column="43"/></operator><name pos:line="69" pos:column="40">protocol<pos:position pos:line="69" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="69" pos:column="50">"https"<pos:position pos:line="69" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="69" pos:column="58"/></argument_list></call> <operator pos:line="69" pos:column="59">==<pos:position pos:line="69" pos:column="61"/></operator> <literal type="number" pos:line="69" pos:column="62">0<pos:position pos:line="69" pos:column="63"/></literal></expr>)<pos:position pos:line="69" pos:column="64"/></condition><then pos:line="69" pos:column="64"> <block pos:line="69" pos:column="65">{
        <comment type="block" pos:line="70" pos:column="9">/* Send a TLS 1.0 close_notify alert.  This is perhaps the
         * "least wrong" way to open and cleanly terminate an SSL
         * connection.  It should "work" without noisy error logs if
         * the server actually expects SSLv3/TLSv1.  With
         * SSLv23_server_method() OpenSSL's SSL_accept() fails
         * ungracefully on receipt of this message, since it requires
         * an 11-byte ClientHello message and this is too short. */</comment>
        <decl_stmt><decl><specifier pos:line="77" pos:column="9">static<pos:position pos:line="77" pos:column="15"/></specifier> <type><specifier pos:line="77" pos:column="16">const<pos:position pos:line="77" pos:column="21"/></specifier> <name pos:line="77" pos:column="22">unsigned<pos:position pos:line="77" pos:column="30"/></name> <name pos:line="77" pos:column="31">char<pos:position pos:line="77" pos:column="35"/></name></type> <name><name pos:line="77" pos:column="36">tls10_close_notify<pos:position pos:line="77" pos:column="54"/></name><index pos:line="77" pos:column="54">[<expr><literal type="number" pos:line="77" pos:column="55">7<pos:position pos:line="77" pos:column="56"/></literal></expr>]<pos:position pos:line="77" pos:column="57"/></index></name> <init pos:line="77" pos:column="58">= <expr><block pos:line="77" pos:column="60">{
            <expr><literal type="char" pos:line="78" pos:column="13">'\x15'<pos:position pos:line="78" pos:column="19"/></literal></expr>,         <comment type="block" pos:line="78" pos:column="29">/* TLSPlainText.type = Alert (21) */</comment>
            <expr><literal type="char" pos:line="79" pos:column="13">'\x03'<pos:position pos:line="79" pos:column="19"/></literal></expr>, <expr><literal type="char" pos:line="79" pos:column="21">'\x01'<pos:position pos:line="79" pos:column="27"/></literal></expr>, <comment type="block" pos:line="79" pos:column="29">/* TLSPlainText.version = {3, 1} */</comment>
            <expr><literal type="char" pos:line="80" pos:column="13">'\x00'<pos:position pos:line="80" pos:column="19"/></literal></expr>, <expr><literal type="char" pos:line="80" pos:column="21">'\x02'<pos:position pos:line="80" pos:column="27"/></literal></expr>, <comment type="block" pos:line="80" pos:column="29">/* TLSPlainText.length = 2 */</comment>
            <expr><literal type="char" pos:line="81" pos:column="13">'\x01'<pos:position pos:line="81" pos:column="19"/></literal></expr>,         <comment type="block" pos:line="81" pos:column="29">/* Alert.level = warning (1) */</comment>
            <expr><literal type="char" pos:line="82" pos:column="13">'\x00'<pos:position pos:line="82" pos:column="19"/></literal></expr>          <comment type="block" pos:line="82" pos:column="29">/* Alert.description = close_notify (0) */</comment>
        }<pos:position pos:line="83" pos:column="10"/></block></expr></init></decl>;<pos:position pos:line="83" pos:column="11"/></decl_stmt>
        <expr_stmt><expr><name pos:line="84" pos:column="9">data<pos:position pos:line="84" pos:column="13"/></name> <operator pos:line="84" pos:column="14">=<pos:position pos:line="84" pos:column="15"/></operator> <operator pos:line="84" pos:column="16">(<pos:position pos:line="84" pos:column="17"/></operator><specifier pos:line="84" pos:column="17">const<pos:position pos:line="84" pos:column="22"/></specifier> <name pos:line="84" pos:column="23">char<pos:position pos:line="84" pos:column="27"/></name> <operator pos:line="84" pos:column="28">*<pos:position pos:line="84" pos:column="29"/></operator><operator pos:line="84" pos:column="29">)<pos:position pos:line="84" pos:column="30"/></operator><name pos:line="84" pos:column="30">tls10_close_notify<pos:position pos:line="84" pos:column="48"/></name></expr>;<pos:position pos:line="84" pos:column="49"/></expr_stmt>
        <expr_stmt><expr><name pos:line="85" pos:column="9">len<pos:position pos:line="85" pos:column="12"/></name> <operator pos:line="85" pos:column="13">=<pos:position pos:line="85" pos:column="14"/></operator> <sizeof pos:line="85" pos:column="15">sizeof<argument_list pos:line="85" pos:column="21">(<argument><expr><name pos:line="85" pos:column="22">tls10_close_notify<pos:position pos:line="85" pos:column="40"/></name></expr></argument>)<pos:position pos:line="85" pos:column="41"/></argument_list></sizeof></expr>;<pos:position pos:line="85" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="86" pos:column="6"/></block></then>
    <else pos:line="87" pos:column="5">else <comment type="block" pos:line="87" pos:column="10">/* ... XXX other request types here? */</comment> <block pos:line="87" pos:column="50">{
        <comment type="block" pos:line="88" pos:column="9">/* Create an HTTP request string.  We include a User-Agent so
         * that adminstrators can track down the cause of the
         * odd-looking requests in their logs.  A complete request is
         * used since kernel-level filtering may require that much
         * data before returning from accept(). */</comment>
        <expr_stmt><expr><name pos:line="93" pos:column="9">data<pos:position pos:line="93" pos:column="13"/></name> <operator pos:line="93" pos:column="14">=<pos:position pos:line="93" pos:column="15"/></operator> <call><name pos:line="93" pos:column="16">apr_pstrcat<pos:position pos:line="93" pos:column="27"/></name><argument_list pos:line="93" pos:column="27">(<argument><expr><name pos:line="93" pos:column="28">p<pos:position pos:line="93" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="31">"OPTIONS * HTTP/1.0\r\nUser-Agent: "<pos:position pos:line="93" pos:column="67"/></literal></expr></argument>,
                           <argument><expr><call><name pos:line="94" pos:column="28">ap_get_server_description<pos:position pos:line="94" pos:column="53"/></name><argument_list pos:line="94" pos:column="53">()<pos:position pos:line="94" pos:column="55"/></argument_list></call></expr></argument>,
                           <argument><expr><literal type="string" pos:line="95" pos:column="28">" (internal dummy connection)\r\n\r\n"<pos:position pos:line="95" pos:column="66"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="68">NULL<pos:position pos:line="95" pos:column="72"/></name></expr></argument>)<pos:position pos:line="95" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><name pos:line="96" pos:column="9">len<pos:position pos:line="96" pos:column="12"/></name> <operator pos:line="96" pos:column="13">=<pos:position pos:line="96" pos:column="14"/></operator> <call><name pos:line="96" pos:column="15">strlen<pos:position pos:line="96" pos:column="21"/></name><argument_list pos:line="96" pos:column="21">(<argument><expr><name pos:line="96" pos:column="22">data<pos:position pos:line="96" pos:column="26"/></name></expr></argument>)<pos:position pos:line="96" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="96" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="97" pos:column="6"/></block></else></if>

    <expr_stmt><expr><call><name pos:line="99" pos:column="5">apr_socket_send<pos:position pos:line="99" pos:column="20"/></name><argument_list pos:line="99" pos:column="20">(<argument><expr><name pos:line="99" pos:column="21">sock<pos:position pos:line="99" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="99" pos:column="27">data<pos:position pos:line="99" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="33">&amp;<pos:position pos:line="99" pos:column="38"/></operator><name pos:line="99" pos:column="34">len<pos:position pos:line="99" pos:column="37"/></name></expr></argument>)<pos:position pos:line="99" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="39"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="100" pos:column="5">apr_socket_close<pos:position pos:line="100" pos:column="21"/></name><argument_list pos:line="100" pos:column="21">(<argument><expr><name pos:line="100" pos:column="22">sock<pos:position pos:line="100" pos:column="26"/></name></expr></argument>)<pos:position pos:line="100" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="101" pos:column="5">apr_pool_destroy<pos:position pos:line="101" pos:column="21"/></name><argument_list pos:line="101" pos:column="21">(<argument><expr><name pos:line="101" pos:column="22">p<pos:position pos:line="101" pos:column="23"/></name></expr></argument>)<pos:position pos:line="101" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="25"/></expr_stmt>

    <return pos:line="103" pos:column="5">return <expr><name pos:line="103" pos:column="12">rv<pos:position pos:line="103" pos:column="14"/></name></expr>;<pos:position pos:line="103" pos:column="15"/></return>
}<pos:position pos:line="104" pos:column="2"/></block></function></unit>
