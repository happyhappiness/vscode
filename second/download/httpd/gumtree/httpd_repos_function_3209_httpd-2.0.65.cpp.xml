<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3209_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">APR_INLINE<pos:position pos:line="1" pos:column="18"/></name>
<name pos:line="2" pos:column="1">apr_memnode_t<pos:position pos:line="2" pos:column="14"/></name> <modifier pos:line="2" pos:column="15">*<pos:position pos:line="2" pos:column="16"/></modifier></type><name pos:line="2" pos:column="16">allocator_alloc<pos:position pos:line="2" pos:column="31"/></name><parameter_list pos:line="2" pos:column="31">(<parameter><decl><type><name pos:line="2" pos:column="32">apr_allocator_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">allocator<pos:position pos:line="2" pos:column="58"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="60">apr_size_t<pos:position pos:line="2" pos:column="70"/></name></type> <name pos:line="2" pos:column="71">in_size<pos:position pos:line="2" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="79"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_memnode_t<pos:position pos:line="4" pos:column="18"/></name> <modifier pos:line="4" pos:column="19">*<pos:position pos:line="4" pos:column="20"/></modifier></type><name pos:line="4" pos:column="20">node<pos:position pos:line="4" pos:column="24"/></name></decl>, <modifier pos:line="4" pos:column="26">*<pos:position pos:line="4" pos:column="27"/></modifier><modifier pos:line="4" pos:column="27">*<pos:position pos:line="4" pos:column="28"/></modifier><decl><type ref="prev"/><name pos:line="4" pos:column="28">ref<pos:position pos:line="4" pos:column="31"/></name></decl>;<pos:position pos:line="4" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_uint32_t<pos:position pos:line="5" pos:column="17"/></name></type> <name pos:line="5" pos:column="18">i<pos:position pos:line="5" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="21">index<pos:position pos:line="5" pos:column="26"/></name></decl>, <decl><type ref="prev"/><name pos:line="5" pos:column="28">max_index<pos:position pos:line="5" pos:column="37"/></name></decl>;<pos:position pos:line="5" pos:column="38"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_size_t<pos:position pos:line="6" pos:column="15"/></name></type> <name pos:line="6" pos:column="16">size<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="8" pos:column="5">/* Round up the block size to the next boundary, but always
     * allocate at least a certain size (MIN_ALLOC).
     */</comment>
    <expr_stmt><expr><name pos:line="11" pos:column="5">size<pos:position pos:line="11" pos:column="9"/></name> <operator pos:line="11" pos:column="10">=<pos:position pos:line="11" pos:column="11"/></operator> <call><name pos:line="11" pos:column="12">APR_ALIGN<pos:position pos:line="11" pos:column="21"/></name><argument_list pos:line="11" pos:column="21">(<argument><expr><name pos:line="11" pos:column="22">in_size<pos:position pos:line="11" pos:column="29"/></name> <operator pos:line="11" pos:column="30">+<pos:position pos:line="11" pos:column="31"/></operator> <name pos:line="11" pos:column="32">APR_MEMNODE_T_SIZE<pos:position pos:line="11" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="52">BOUNDARY_SIZE<pos:position pos:line="11" pos:column="65"/></name></expr></argument>)<pos:position pos:line="11" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="67"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">size<pos:position pos:line="12" pos:column="13"/></name> <operator pos:line="12" pos:column="14">&lt;<pos:position pos:line="12" pos:column="18"/></operator> <name pos:line="12" pos:column="16">in_size<pos:position pos:line="12" pos:column="23"/></name></expr>)<pos:position pos:line="12" pos:column="24"/></condition><then pos:line="12" pos:column="24"> <block pos:line="12" pos:column="25">{
        <return pos:line="13" pos:column="9">return <expr><name pos:line="13" pos:column="16">NULL<pos:position pos:line="13" pos:column="20"/></name></expr>;<pos:position pos:line="13" pos:column="21"/></return>
    }<pos:position pos:line="14" pos:column="6"/></block></then></if>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">size<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">&lt;<pos:position pos:line="15" pos:column="18"/></operator> <name pos:line="15" pos:column="16">MIN_ALLOC<pos:position pos:line="15" pos:column="25"/></name></expr>)<pos:position pos:line="15" pos:column="26"/></condition><then pos:line="15" pos:column="26">
        <block type="pseudo"><expr_stmt><expr><name pos:line="16" pos:column="9">size<pos:position pos:line="16" pos:column="13"/></name> <operator pos:line="16" pos:column="14">=<pos:position pos:line="16" pos:column="15"/></operator> <name pos:line="16" pos:column="16">MIN_ALLOC<pos:position pos:line="16" pos:column="25"/></name></expr>;<pos:position pos:line="16" pos:column="26"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="18" pos:column="5">/* Find the index for this node size by
     * dividing its size by the boundary size
     */</comment>
    <expr_stmt><expr><name pos:line="21" pos:column="5">index<pos:position pos:line="21" pos:column="10"/></name> <operator pos:line="21" pos:column="11">=<pos:position pos:line="21" pos:column="12"/></operator> <operator pos:line="21" pos:column="13">(<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">size<pos:position pos:line="21" pos:column="18"/></name> <operator pos:line="21" pos:column="19">&gt;&gt;<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="22">BOUNDARY_INDEX<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">)<pos:position pos:line="21" pos:column="37"/></operator> <operator pos:line="21" pos:column="38">-<pos:position pos:line="21" pos:column="39"/></operator> <literal type="number" pos:line="21" pos:column="40">1<pos:position pos:line="21" pos:column="41"/></literal></expr>;<pos:position pos:line="21" pos:column="42"/></expr_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* First see if there are any nodes in the area we know
     * our node will fit into.
     */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><name pos:line="26" pos:column="9">index<pos:position pos:line="26" pos:column="14"/></name> <operator pos:line="26" pos:column="15">&lt;=<pos:position pos:line="26" pos:column="20"/></operator> <name><name pos:line="26" pos:column="18">allocator<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">max_index<pos:position pos:line="26" pos:column="38"/></name></name></expr>)<pos:position pos:line="26" pos:column="39"/></condition><then pos:line="26" pos:column="39"> <block pos:line="26" pos:column="40">{
<cpp:if pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">if<pos:position pos:line="27" pos:column="4"/></cpp:directive> <expr><name pos:line="27" pos:column="5">APR_HAS_THREADS<pos:position pos:line="27" pos:column="20"/></name></expr></cpp:if>
        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><name><name pos:line="28" pos:column="13">allocator<pos:position pos:line="28" pos:column="22"/></name><operator pos:line="28" pos:column="22">-&gt;<pos:position pos:line="28" pos:column="27"/></operator><name pos:line="28" pos:column="24">mutex<pos:position pos:line="28" pos:column="29"/></name></name></expr>)<pos:position pos:line="28" pos:column="30"/></condition><then pos:line="28" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="29" pos:column="13">apr_thread_mutex_lock<pos:position pos:line="29" pos:column="34"/></name><argument_list pos:line="29" pos:column="34">(<argument><expr><name><name pos:line="29" pos:column="35">allocator<pos:position pos:line="29" pos:column="44"/></name><operator pos:line="29" pos:column="44">-&gt;<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="46">mutex<pos:position pos:line="29" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="53"/></expr_stmt></block></then></if>
<cpp:endif pos:line="30" pos:column="1">#<cpp:directive pos:line="30" pos:column="2">endif<pos:position pos:line="30" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="30" pos:column="8">/* APR_HAS_THREADS */</comment>

        <comment type="block" pos:line="32" pos:column="9">/* Walk the free list to see if there are
         * any nodes on it of the requested size
         *
         * NOTE: an optimization would be to check
         * allocator-&gt;free[index] first and if no
         * node is present, directly use
         * allocator-&gt;free[max_index].  This seems
         * like overkill though and could cause
         * memory waste.
         */</comment>
        <expr_stmt><expr><name pos:line="42" pos:column="9">max_index<pos:position pos:line="42" pos:column="18"/></name> <operator pos:line="42" pos:column="19">=<pos:position pos:line="42" pos:column="20"/></operator> <name><name pos:line="42" pos:column="21">allocator<pos:position pos:line="42" pos:column="30"/></name><operator pos:line="42" pos:column="30">-&gt;<pos:position pos:line="42" pos:column="35"/></operator><name pos:line="42" pos:column="32">max_index<pos:position pos:line="42" pos:column="41"/></name></name></expr>;<pos:position pos:line="42" pos:column="42"/></expr_stmt>
        <expr_stmt><expr><name pos:line="43" pos:column="9">ref<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <operator pos:line="43" pos:column="15">&amp;<pos:position pos:line="43" pos:column="20"/></operator><name><name pos:line="43" pos:column="16">allocator<pos:position pos:line="43" pos:column="25"/></name><operator pos:line="43" pos:column="25">-&gt;<pos:position pos:line="43" pos:column="30"/></operator><name pos:line="43" pos:column="27">free<pos:position pos:line="43" pos:column="31"/></name><index pos:line="43" pos:column="31">[<expr><name pos:line="43" pos:column="32">index<pos:position pos:line="43" pos:column="37"/></name></expr>]<pos:position pos:line="43" pos:column="38"/></index></name></expr>;<pos:position pos:line="43" pos:column="39"/></expr_stmt>
        <expr_stmt><expr><name pos:line="44" pos:column="9">i<pos:position pos:line="44" pos:column="10"/></name> <operator pos:line="44" pos:column="11">=<pos:position pos:line="44" pos:column="12"/></operator> <name pos:line="44" pos:column="13">index<pos:position pos:line="44" pos:column="18"/></name></expr>;<pos:position pos:line="44" pos:column="19"/></expr_stmt>
        <while pos:line="45" pos:column="9">while <condition pos:line="45" pos:column="15">(<expr><operator pos:line="45" pos:column="16">*<pos:position pos:line="45" pos:column="17"/></operator><name pos:line="45" pos:column="17">ref<pos:position pos:line="45" pos:column="20"/></name> <operator pos:line="45" pos:column="21">==<pos:position pos:line="45" pos:column="23"/></operator> <name pos:line="45" pos:column="24">NULL<pos:position pos:line="45" pos:column="28"/></name> <operator pos:line="45" pos:column="29">&amp;&amp;<pos:position pos:line="45" pos:column="39"/></operator> <name pos:line="45" pos:column="32">i<pos:position pos:line="45" pos:column="33"/></name> <operator pos:line="45" pos:column="34">&lt;<pos:position pos:line="45" pos:column="38"/></operator> <name pos:line="45" pos:column="36">max_index<pos:position pos:line="45" pos:column="45"/></name></expr>)<pos:position pos:line="45" pos:column="46"/></condition> <block pos:line="45" pos:column="47">{
           <expr_stmt><expr><name pos:line="46" pos:column="12">ref<pos:position pos:line="46" pos:column="15"/></name><operator pos:line="46" pos:column="15">++<pos:position pos:line="46" pos:column="17"/></operator></expr>;<pos:position pos:line="46" pos:column="18"/></expr_stmt>
           <expr_stmt><expr><name pos:line="47" pos:column="12">i<pos:position pos:line="47" pos:column="13"/></name><operator pos:line="47" pos:column="13">++<pos:position pos:line="47" pos:column="15"/></operator></expr>;<pos:position pos:line="47" pos:column="16"/></expr_stmt>
        }<pos:position pos:line="48" pos:column="10"/></block></while>

        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><operator pos:line="50" pos:column="13">(<pos:position pos:line="50" pos:column="14"/></operator><name pos:line="50" pos:column="14">node<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">=<pos:position pos:line="50" pos:column="20"/></operator> <operator pos:line="50" pos:column="21">*<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">ref<pos:position pos:line="50" pos:column="25"/></name><operator pos:line="50" pos:column="25">)<pos:position pos:line="50" pos:column="26"/></operator> <operator pos:line="50" pos:column="27">!=<pos:position pos:line="50" pos:column="29"/></operator> <name pos:line="50" pos:column="30">NULL<pos:position pos:line="50" pos:column="34"/></name></expr>)<pos:position pos:line="50" pos:column="35"/></condition><then pos:line="50" pos:column="35"> <block pos:line="50" pos:column="36">{
            <comment type="block" pos:line="51" pos:column="13">/* If we have found a node and it doesn't have any
             * nodes waiting in line behind it _and_ we are on
             * the highest available index, find the new highest
             * available index
             */</comment>
            <if pos:line="56" pos:column="13">if <condition pos:line="56" pos:column="16">(<expr><operator pos:line="56" pos:column="17">(<pos:position pos:line="56" pos:column="18"/></operator><operator pos:line="56" pos:column="18">*<pos:position pos:line="56" pos:column="19"/></operator><name pos:line="56" pos:column="19">ref<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">=<pos:position pos:line="56" pos:column="24"/></operator> <name><name pos:line="56" pos:column="25">node<pos:position pos:line="56" pos:column="29"/></name><operator pos:line="56" pos:column="29">-&gt;<pos:position pos:line="56" pos:column="34"/></operator><name pos:line="56" pos:column="31">next<pos:position pos:line="56" pos:column="35"/></name></name><operator pos:line="56" pos:column="35">)<pos:position pos:line="56" pos:column="36"/></operator> <operator pos:line="56" pos:column="37">==<pos:position pos:line="56" pos:column="39"/></operator> <name pos:line="56" pos:column="40">NULL<pos:position pos:line="56" pos:column="44"/></name> <operator pos:line="56" pos:column="45">&amp;&amp;<pos:position pos:line="56" pos:column="55"/></operator> <name pos:line="56" pos:column="48">i<pos:position pos:line="56" pos:column="49"/></name> <operator pos:line="56" pos:column="50">&gt;=<pos:position pos:line="56" pos:column="55"/></operator> <name pos:line="56" pos:column="53">max_index<pos:position pos:line="56" pos:column="62"/></name></expr>)<pos:position pos:line="56" pos:column="63"/></condition><then pos:line="56" pos:column="63"> <block pos:line="56" pos:column="64">{
                <do pos:line="57" pos:column="17">do <block pos:line="57" pos:column="20">{
                    <expr_stmt><expr><name pos:line="58" pos:column="21">ref<pos:position pos:line="58" pos:column="24"/></name><operator pos:line="58" pos:column="24">--<pos:position pos:line="58" pos:column="26"/></operator></expr>;<pos:position pos:line="58" pos:column="27"/></expr_stmt>
                    <expr_stmt><expr><name pos:line="59" pos:column="21">max_index<pos:position pos:line="59" pos:column="30"/></name><operator pos:line="59" pos:column="30">--<pos:position pos:line="59" pos:column="32"/></operator></expr>;<pos:position pos:line="59" pos:column="33"/></expr_stmt>
                }<pos:position pos:line="60" pos:column="18"/></block>
                while <condition pos:line="61" pos:column="23">(<expr><operator pos:line="61" pos:column="24">*<pos:position pos:line="61" pos:column="25"/></operator><name pos:line="61" pos:column="25">ref<pos:position pos:line="61" pos:column="28"/></name> <operator pos:line="61" pos:column="29">==<pos:position pos:line="61" pos:column="31"/></operator> <name pos:line="61" pos:column="32">NULL<pos:position pos:line="61" pos:column="36"/></name> <operator pos:line="61" pos:column="37">&amp;&amp;<pos:position pos:line="61" pos:column="47"/></operator> <name pos:line="61" pos:column="40">max_index<pos:position pos:line="61" pos:column="49"/></name> <operator pos:line="61" pos:column="50">&gt;<pos:position pos:line="61" pos:column="54"/></operator> <literal type="number" pos:line="61" pos:column="52">0<pos:position pos:line="61" pos:column="53"/></literal></expr>)<pos:position pos:line="61" pos:column="54"/></condition>;<pos:position pos:line="61" pos:column="55"/></do>

                <expr_stmt><expr><name><name pos:line="63" pos:column="17">allocator<pos:position pos:line="63" pos:column="26"/></name><operator pos:line="63" pos:column="26">-&gt;<pos:position pos:line="63" pos:column="31"/></operator><name pos:line="63" pos:column="28">max_index<pos:position pos:line="63" pos:column="37"/></name></name> <operator pos:line="63" pos:column="38">=<pos:position pos:line="63" pos:column="39"/></operator> <name pos:line="63" pos:column="40">max_index<pos:position pos:line="63" pos:column="49"/></name></expr>;<pos:position pos:line="63" pos:column="50"/></expr_stmt>
            }<pos:position pos:line="64" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name><name pos:line="66" pos:column="13">allocator<pos:position pos:line="66" pos:column="22"/></name><operator pos:line="66" pos:column="22">-&gt;<pos:position pos:line="66" pos:column="27"/></operator><name pos:line="66" pos:column="24">current_free_index<pos:position pos:line="66" pos:column="42"/></name></name> <operator pos:line="66" pos:column="43">+=<pos:position pos:line="66" pos:column="45"/></operator> <name><name pos:line="66" pos:column="46">node<pos:position pos:line="66" pos:column="50"/></name><operator pos:line="66" pos:column="50">-&gt;<pos:position pos:line="66" pos:column="55"/></operator><name pos:line="66" pos:column="52">index<pos:position pos:line="66" pos:column="57"/></name></name></expr>;<pos:position pos:line="66" pos:column="58"/></expr_stmt>
            <if pos:line="67" pos:column="13">if <condition pos:line="67" pos:column="16">(<expr><name><name pos:line="67" pos:column="17">allocator<pos:position pos:line="67" pos:column="26"/></name><operator pos:line="67" pos:column="26">-&gt;<pos:position pos:line="67" pos:column="31"/></operator><name pos:line="67" pos:column="28">current_free_index<pos:position pos:line="67" pos:column="46"/></name></name> <operator pos:line="67" pos:column="47">&gt;<pos:position pos:line="67" pos:column="51"/></operator> <name><name pos:line="67" pos:column="49">allocator<pos:position pos:line="67" pos:column="58"/></name><operator pos:line="67" pos:column="58">-&gt;<pos:position pos:line="67" pos:column="63"/></operator><name pos:line="67" pos:column="60">max_free_index<pos:position pos:line="67" pos:column="74"/></name></name></expr>)<pos:position pos:line="67" pos:column="75"/></condition><then pos:line="67" pos:column="75">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="68" pos:column="17">allocator<pos:position pos:line="68" pos:column="26"/></name><operator pos:line="68" pos:column="26">-&gt;<pos:position pos:line="68" pos:column="31"/></operator><name pos:line="68" pos:column="28">current_free_index<pos:position pos:line="68" pos:column="46"/></name></name> <operator pos:line="68" pos:column="47">=<pos:position pos:line="68" pos:column="48"/></operator> <name><name pos:line="68" pos:column="49">allocator<pos:position pos:line="68" pos:column="58"/></name><operator pos:line="68" pos:column="58">-&gt;<pos:position pos:line="68" pos:column="63"/></operator><name pos:line="68" pos:column="60">max_free_index<pos:position pos:line="68" pos:column="74"/></name></name></expr>;<pos:position pos:line="68" pos:column="75"/></expr_stmt></block></then></if>

<cpp:if pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">if<pos:position pos:line="70" pos:column="4"/></cpp:directive> <expr><name pos:line="70" pos:column="5">APR_HAS_THREADS<pos:position pos:line="70" pos:column="20"/></name></expr></cpp:if>
            <if pos:line="71" pos:column="13">if <condition pos:line="71" pos:column="16">(<expr><name><name pos:line="71" pos:column="17">allocator<pos:position pos:line="71" pos:column="26"/></name><operator pos:line="71" pos:column="26">-&gt;<pos:position pos:line="71" pos:column="31"/></operator><name pos:line="71" pos:column="28">mutex<pos:position pos:line="71" pos:column="33"/></name></name></expr>)<pos:position pos:line="71" pos:column="34"/></condition><then pos:line="71" pos:column="34">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="72" pos:column="17">apr_thread_mutex_unlock<pos:position pos:line="72" pos:column="40"/></name><argument_list pos:line="72" pos:column="40">(<argument><expr><name><name pos:line="72" pos:column="41">allocator<pos:position pos:line="72" pos:column="50"/></name><operator pos:line="72" pos:column="50">-&gt;<pos:position pos:line="72" pos:column="55"/></operator><name pos:line="72" pos:column="52">mutex<pos:position pos:line="72" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="72" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="59"/></expr_stmt></block></then></if>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="73" pos:column="8">/* APR_HAS_THREADS */</comment>

            <expr_stmt><expr><name><name pos:line="75" pos:column="13">node<pos:position pos:line="75" pos:column="17"/></name><operator pos:line="75" pos:column="17">-&gt;<pos:position pos:line="75" pos:column="22"/></operator><name pos:line="75" pos:column="19">next<pos:position pos:line="75" pos:column="23"/></name></name> <operator pos:line="75" pos:column="24">=<pos:position pos:line="75" pos:column="25"/></operator> <name pos:line="75" pos:column="26">NULL<pos:position pos:line="75" pos:column="30"/></name></expr>;<pos:position pos:line="75" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="76" pos:column="13">node<pos:position pos:line="76" pos:column="17"/></name><operator pos:line="76" pos:column="17">-&gt;<pos:position pos:line="76" pos:column="22"/></operator><name pos:line="76" pos:column="19">first_avail<pos:position pos:line="76" pos:column="30"/></name></name> <operator pos:line="76" pos:column="31">=<pos:position pos:line="76" pos:column="32"/></operator> <operator pos:line="76" pos:column="33">(<pos:position pos:line="76" pos:column="34"/></operator><name pos:line="76" pos:column="34">char<pos:position pos:line="76" pos:column="38"/></name> <operator pos:line="76" pos:column="39">*<pos:position pos:line="76" pos:column="40"/></operator><operator pos:line="76" pos:column="40">)<pos:position pos:line="76" pos:column="41"/></operator><name pos:line="76" pos:column="41">node<pos:position pos:line="76" pos:column="45"/></name> <operator pos:line="76" pos:column="46">+<pos:position pos:line="76" pos:column="47"/></operator> <name pos:line="76" pos:column="48">APR_MEMNODE_T_SIZE<pos:position pos:line="76" pos:column="66"/></name></expr>;<pos:position pos:line="76" pos:column="67"/></expr_stmt>

            <return pos:line="78" pos:column="13">return <expr><name pos:line="78" pos:column="20">node<pos:position pos:line="78" pos:column="24"/></name></expr>;<pos:position pos:line="78" pos:column="25"/></return>
        }<pos:position pos:line="79" pos:column="10"/></block></then></if>

<cpp:if pos:line="81" pos:column="1">#<cpp:directive pos:line="81" pos:column="2">if<pos:position pos:line="81" pos:column="4"/></cpp:directive> <expr><name pos:line="81" pos:column="5">APR_HAS_THREADS<pos:position pos:line="81" pos:column="20"/></name></expr></cpp:if>
        <if pos:line="82" pos:column="9">if <condition pos:line="82" pos:column="12">(<expr><name><name pos:line="82" pos:column="13">allocator<pos:position pos:line="82" pos:column="22"/></name><operator pos:line="82" pos:column="22">-&gt;<pos:position pos:line="82" pos:column="27"/></operator><name pos:line="82" pos:column="24">mutex<pos:position pos:line="82" pos:column="29"/></name></name></expr>)<pos:position pos:line="82" pos:column="30"/></condition><then pos:line="82" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="83" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="83" pos:column="36"/></name><argument_list pos:line="83" pos:column="36">(<argument><expr><name><name pos:line="83" pos:column="37">allocator<pos:position pos:line="83" pos:column="46"/></name><operator pos:line="83" pos:column="46">-&gt;<pos:position pos:line="83" pos:column="51"/></operator><name pos:line="83" pos:column="48">mutex<pos:position pos:line="83" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="83" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="55"/></expr_stmt></block></then></if>
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="84" pos:column="8">/* APR_HAS_THREADS */</comment>
    }<pos:position pos:line="85" pos:column="6"/></block></then>

    <comment type="block" pos:line="87" pos:column="5">/* If we found nothing, seek the sink (at index 0), if
     * it is not empty.
     */</comment>
    <elseif pos:line="90" pos:column="5">else <if pos:line="90" pos:column="10">if <condition pos:line="90" pos:column="13">(<expr><name><name pos:line="90" pos:column="14">allocator<pos:position pos:line="90" pos:column="23"/></name><operator pos:line="90" pos:column="23">-&gt;<pos:position pos:line="90" pos:column="28"/></operator><name pos:line="90" pos:column="25">free<pos:position pos:line="90" pos:column="29"/></name><index pos:line="90" pos:column="29">[<expr><literal type="number" pos:line="90" pos:column="30">0<pos:position pos:line="90" pos:column="31"/></literal></expr>]<pos:position pos:line="90" pos:column="32"/></index></name></expr>)<pos:position pos:line="90" pos:column="33"/></condition><then pos:line="90" pos:column="33"> <block pos:line="90" pos:column="34">{
<cpp:if pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">if<pos:position pos:line="91" pos:column="4"/></cpp:directive> <expr><name pos:line="91" pos:column="5">APR_HAS_THREADS<pos:position pos:line="91" pos:column="20"/></name></expr></cpp:if>
        <if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name><name pos:line="92" pos:column="13">allocator<pos:position pos:line="92" pos:column="22"/></name><operator pos:line="92" pos:column="22">-&gt;<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="24">mutex<pos:position pos:line="92" pos:column="29"/></name></name></expr>)<pos:position pos:line="92" pos:column="30"/></condition><then pos:line="92" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="93" pos:column="13">apr_thread_mutex_lock<pos:position pos:line="93" pos:column="34"/></name><argument_list pos:line="93" pos:column="34">(<argument><expr><name><name pos:line="93" pos:column="35">allocator<pos:position pos:line="93" pos:column="44"/></name><operator pos:line="93" pos:column="44">-&gt;<pos:position pos:line="93" pos:column="49"/></operator><name pos:line="93" pos:column="46">mutex<pos:position pos:line="93" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="53"/></expr_stmt></block></then></if>
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="94" pos:column="8">/* APR_HAS_THREADS */</comment>

        <comment type="block" pos:line="96" pos:column="9">/* Walk the free list to see if there are
         * any nodes on it of the requested size
         */</comment>
        <expr_stmt><expr><name pos:line="99" pos:column="9">ref<pos:position pos:line="99" pos:column="12"/></name> <operator pos:line="99" pos:column="13">=<pos:position pos:line="99" pos:column="14"/></operator> <operator pos:line="99" pos:column="15">&amp;<pos:position pos:line="99" pos:column="20"/></operator><name><name pos:line="99" pos:column="16">allocator<pos:position pos:line="99" pos:column="25"/></name><operator pos:line="99" pos:column="25">-&gt;<pos:position pos:line="99" pos:column="30"/></operator><name pos:line="99" pos:column="27">free<pos:position pos:line="99" pos:column="31"/></name><index pos:line="99" pos:column="31">[<expr><literal type="number" pos:line="99" pos:column="32">0<pos:position pos:line="99" pos:column="33"/></literal></expr>]<pos:position pos:line="99" pos:column="34"/></index></name></expr>;<pos:position pos:line="99" pos:column="35"/></expr_stmt>
        <while pos:line="100" pos:column="9">while <condition pos:line="100" pos:column="15">(<expr><operator pos:line="100" pos:column="16">(<pos:position pos:line="100" pos:column="17"/></operator><name pos:line="100" pos:column="17">node<pos:position pos:line="100" pos:column="21"/></name> <operator pos:line="100" pos:column="22">=<pos:position pos:line="100" pos:column="23"/></operator> <operator pos:line="100" pos:column="24">*<pos:position pos:line="100" pos:column="25"/></operator><name pos:line="100" pos:column="25">ref<pos:position pos:line="100" pos:column="28"/></name><operator pos:line="100" pos:column="28">)<pos:position pos:line="100" pos:column="29"/></operator> <operator pos:line="100" pos:column="30">!=<pos:position pos:line="100" pos:column="32"/></operator> <name pos:line="100" pos:column="33">NULL<pos:position pos:line="100" pos:column="37"/></name> <operator pos:line="100" pos:column="38">&amp;&amp;<pos:position pos:line="100" pos:column="48"/></operator> <name pos:line="100" pos:column="41">index<pos:position pos:line="100" pos:column="46"/></name> <operator pos:line="100" pos:column="47">&gt;<pos:position pos:line="100" pos:column="51"/></operator> <name><name pos:line="100" pos:column="49">node<pos:position pos:line="100" pos:column="53"/></name><operator pos:line="100" pos:column="53">-&gt;<pos:position pos:line="100" pos:column="58"/></operator><name pos:line="100" pos:column="55">index<pos:position pos:line="100" pos:column="60"/></name></name></expr>)<pos:position pos:line="100" pos:column="61"/></condition>
            <block type="pseudo"><expr_stmt><expr><name pos:line="101" pos:column="13">ref<pos:position pos:line="101" pos:column="16"/></name> <operator pos:line="101" pos:column="17">=<pos:position pos:line="101" pos:column="18"/></operator> <operator pos:line="101" pos:column="19">&amp;<pos:position pos:line="101" pos:column="24"/></operator><name><name pos:line="101" pos:column="20">node<pos:position pos:line="101" pos:column="24"/></name><operator pos:line="101" pos:column="24">-&gt;<pos:position pos:line="101" pos:column="29"/></operator><name pos:line="101" pos:column="26">next<pos:position pos:line="101" pos:column="30"/></name></name></expr>;<pos:position pos:line="101" pos:column="31"/></expr_stmt></block></while>

        <if pos:line="103" pos:column="9">if <condition pos:line="103" pos:column="12">(<expr><name pos:line="103" pos:column="13">node<pos:position pos:line="103" pos:column="17"/></name></expr>)<pos:position pos:line="103" pos:column="18"/></condition><then pos:line="103" pos:column="18"> <block pos:line="103" pos:column="19">{
            <expr_stmt><expr><operator pos:line="104" pos:column="13">*<pos:position pos:line="104" pos:column="14"/></operator><name pos:line="104" pos:column="14">ref<pos:position pos:line="104" pos:column="17"/></name> <operator pos:line="104" pos:column="18">=<pos:position pos:line="104" pos:column="19"/></operator> <name><name pos:line="104" pos:column="20">node<pos:position pos:line="104" pos:column="24"/></name><operator pos:line="104" pos:column="24">-&gt;<pos:position pos:line="104" pos:column="29"/></operator><name pos:line="104" pos:column="26">next<pos:position pos:line="104" pos:column="30"/></name></name></expr>;<pos:position pos:line="104" pos:column="31"/></expr_stmt>

            <expr_stmt><expr><name><name pos:line="106" pos:column="13">allocator<pos:position pos:line="106" pos:column="22"/></name><operator pos:line="106" pos:column="22">-&gt;<pos:position pos:line="106" pos:column="27"/></operator><name pos:line="106" pos:column="24">current_free_index<pos:position pos:line="106" pos:column="42"/></name></name> <operator pos:line="106" pos:column="43">+=<pos:position pos:line="106" pos:column="45"/></operator> <name><name pos:line="106" pos:column="46">node<pos:position pos:line="106" pos:column="50"/></name><operator pos:line="106" pos:column="50">-&gt;<pos:position pos:line="106" pos:column="55"/></operator><name pos:line="106" pos:column="52">index<pos:position pos:line="106" pos:column="57"/></name></name></expr>;<pos:position pos:line="106" pos:column="58"/></expr_stmt>
            <if pos:line="107" pos:column="13">if <condition pos:line="107" pos:column="16">(<expr><name><name pos:line="107" pos:column="17">allocator<pos:position pos:line="107" pos:column="26"/></name><operator pos:line="107" pos:column="26">-&gt;<pos:position pos:line="107" pos:column="31"/></operator><name pos:line="107" pos:column="28">current_free_index<pos:position pos:line="107" pos:column="46"/></name></name> <operator pos:line="107" pos:column="47">&gt;<pos:position pos:line="107" pos:column="51"/></operator> <name><name pos:line="107" pos:column="49">allocator<pos:position pos:line="107" pos:column="58"/></name><operator pos:line="107" pos:column="58">-&gt;<pos:position pos:line="107" pos:column="63"/></operator><name pos:line="107" pos:column="60">max_free_index<pos:position pos:line="107" pos:column="74"/></name></name></expr>)<pos:position pos:line="107" pos:column="75"/></condition><then pos:line="107" pos:column="75">
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="108" pos:column="17">allocator<pos:position pos:line="108" pos:column="26"/></name><operator pos:line="108" pos:column="26">-&gt;<pos:position pos:line="108" pos:column="31"/></operator><name pos:line="108" pos:column="28">current_free_index<pos:position pos:line="108" pos:column="46"/></name></name> <operator pos:line="108" pos:column="47">=<pos:position pos:line="108" pos:column="48"/></operator> <name><name pos:line="108" pos:column="49">allocator<pos:position pos:line="108" pos:column="58"/></name><operator pos:line="108" pos:column="58">-&gt;<pos:position pos:line="108" pos:column="63"/></operator><name pos:line="108" pos:column="60">max_free_index<pos:position pos:line="108" pos:column="74"/></name></name></expr>;<pos:position pos:line="108" pos:column="75"/></expr_stmt></block></then></if>

<cpp:if pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">if<pos:position pos:line="110" pos:column="4"/></cpp:directive> <expr><name pos:line="110" pos:column="5">APR_HAS_THREADS<pos:position pos:line="110" pos:column="20"/></name></expr></cpp:if>
            <if pos:line="111" pos:column="13">if <condition pos:line="111" pos:column="16">(<expr><name><name pos:line="111" pos:column="17">allocator<pos:position pos:line="111" pos:column="26"/></name><operator pos:line="111" pos:column="26">-&gt;<pos:position pos:line="111" pos:column="31"/></operator><name pos:line="111" pos:column="28">mutex<pos:position pos:line="111" pos:column="33"/></name></name></expr>)<pos:position pos:line="111" pos:column="34"/></condition><then pos:line="111" pos:column="34">
                <block type="pseudo"><expr_stmt><expr><call><name pos:line="112" pos:column="17">apr_thread_mutex_unlock<pos:position pos:line="112" pos:column="40"/></name><argument_list pos:line="112" pos:column="40">(<argument><expr><name><name pos:line="112" pos:column="41">allocator<pos:position pos:line="112" pos:column="50"/></name><operator pos:line="112" pos:column="50">-&gt;<pos:position pos:line="112" pos:column="55"/></operator><name pos:line="112" pos:column="52">mutex<pos:position pos:line="112" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="112" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="59"/></expr_stmt></block></then></if>
<cpp:endif pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">endif<pos:position pos:line="113" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="113" pos:column="8">/* APR_HAS_THREADS */</comment>

            <expr_stmt><expr><name><name pos:line="115" pos:column="13">node<pos:position pos:line="115" pos:column="17"/></name><operator pos:line="115" pos:column="17">-&gt;<pos:position pos:line="115" pos:column="22"/></operator><name pos:line="115" pos:column="19">next<pos:position pos:line="115" pos:column="23"/></name></name> <operator pos:line="115" pos:column="24">=<pos:position pos:line="115" pos:column="25"/></operator> <name pos:line="115" pos:column="26">NULL<pos:position pos:line="115" pos:column="30"/></name></expr>;<pos:position pos:line="115" pos:column="31"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="116" pos:column="13">node<pos:position pos:line="116" pos:column="17"/></name><operator pos:line="116" pos:column="17">-&gt;<pos:position pos:line="116" pos:column="22"/></operator><name pos:line="116" pos:column="19">first_avail<pos:position pos:line="116" pos:column="30"/></name></name> <operator pos:line="116" pos:column="31">=<pos:position pos:line="116" pos:column="32"/></operator> <operator pos:line="116" pos:column="33">(<pos:position pos:line="116" pos:column="34"/></operator><name pos:line="116" pos:column="34">char<pos:position pos:line="116" pos:column="38"/></name> <operator pos:line="116" pos:column="39">*<pos:position pos:line="116" pos:column="40"/></operator><operator pos:line="116" pos:column="40">)<pos:position pos:line="116" pos:column="41"/></operator><name pos:line="116" pos:column="41">node<pos:position pos:line="116" pos:column="45"/></name> <operator pos:line="116" pos:column="46">+<pos:position pos:line="116" pos:column="47"/></operator> <name pos:line="116" pos:column="48">APR_MEMNODE_T_SIZE<pos:position pos:line="116" pos:column="66"/></name></expr>;<pos:position pos:line="116" pos:column="67"/></expr_stmt>

            <return pos:line="118" pos:column="13">return <expr><name pos:line="118" pos:column="20">node<pos:position pos:line="118" pos:column="24"/></name></expr>;<pos:position pos:line="118" pos:column="25"/></return>
        }<pos:position pos:line="119" pos:column="10"/></block></then></if>

<cpp:if pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">if<pos:position pos:line="121" pos:column="4"/></cpp:directive> <expr><name pos:line="121" pos:column="5">APR_HAS_THREADS<pos:position pos:line="121" pos:column="20"/></name></expr></cpp:if>
        <if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><name><name pos:line="122" pos:column="13">allocator<pos:position pos:line="122" pos:column="22"/></name><operator pos:line="122" pos:column="22">-&gt;<pos:position pos:line="122" pos:column="27"/></operator><name pos:line="122" pos:column="24">mutex<pos:position pos:line="122" pos:column="29"/></name></name></expr>)<pos:position pos:line="122" pos:column="30"/></condition><then pos:line="122" pos:column="30">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="123" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="123" pos:column="36"/></name><argument_list pos:line="123" pos:column="36">(<argument><expr><name><name pos:line="123" pos:column="37">allocator<pos:position pos:line="123" pos:column="46"/></name><operator pos:line="123" pos:column="46">-&gt;<pos:position pos:line="123" pos:column="51"/></operator><name pos:line="123" pos:column="48">mutex<pos:position pos:line="123" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="123" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="123" pos:column="55"/></expr_stmt></block></then></if>
<cpp:endif pos:line="124" pos:column="1">#<cpp:directive pos:line="124" pos:column="2">endif<pos:position pos:line="124" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="124" pos:column="8">/* APR_HAS_THREADS */</comment>
    }<pos:position pos:line="125" pos:column="6"/></block></then></if></elseif></if>

    <comment type="block" pos:line="127" pos:column="5">/* If we haven't got a suitable node, malloc a new one
     * and initialize it.
     */</comment>
    <if pos:line="130" pos:column="5">if <condition pos:line="130" pos:column="8">(<expr><operator pos:line="130" pos:column="9">(<pos:position pos:line="130" pos:column="10"/></operator><name pos:line="130" pos:column="10">node<pos:position pos:line="130" pos:column="14"/></name> <operator pos:line="130" pos:column="15">=<pos:position pos:line="130" pos:column="16"/></operator> <call><name pos:line="130" pos:column="17">malloc<pos:position pos:line="130" pos:column="23"/></name><argument_list pos:line="130" pos:column="23">(<argument><expr><name pos:line="130" pos:column="24">size<pos:position pos:line="130" pos:column="28"/></name></expr></argument>)<pos:position pos:line="130" pos:column="29"/></argument_list></call><operator pos:line="130" pos:column="29">)<pos:position pos:line="130" pos:column="30"/></operator> <operator pos:line="130" pos:column="31">==<pos:position pos:line="130" pos:column="33"/></operator> <name pos:line="130" pos:column="34">NULL<pos:position pos:line="130" pos:column="38"/></name></expr>)<pos:position pos:line="130" pos:column="39"/></condition><then pos:line="130" pos:column="39">
        <block type="pseudo"><return pos:line="131" pos:column="9">return <expr><name pos:line="131" pos:column="16">NULL<pos:position pos:line="131" pos:column="20"/></name></expr>;<pos:position pos:line="131" pos:column="21"/></return></block></then></if>

    <expr_stmt><expr><name><name pos:line="133" pos:column="5">node<pos:position pos:line="133" pos:column="9"/></name><operator pos:line="133" pos:column="9">-&gt;<pos:position pos:line="133" pos:column="14"/></operator><name pos:line="133" pos:column="11">next<pos:position pos:line="133" pos:column="15"/></name></name> <operator pos:line="133" pos:column="16">=<pos:position pos:line="133" pos:column="17"/></operator> <name pos:line="133" pos:column="18">NULL<pos:position pos:line="133" pos:column="22"/></name></expr>;<pos:position pos:line="133" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="134" pos:column="5">node<pos:position pos:line="134" pos:column="9"/></name><operator pos:line="134" pos:column="9">-&gt;<pos:position pos:line="134" pos:column="14"/></operator><name pos:line="134" pos:column="11">index<pos:position pos:line="134" pos:column="16"/></name></name> <operator pos:line="134" pos:column="17">=<pos:position pos:line="134" pos:column="18"/></operator> <name pos:line="134" pos:column="19">index<pos:position pos:line="134" pos:column="24"/></name></expr>;<pos:position pos:line="134" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="135" pos:column="5">node<pos:position pos:line="135" pos:column="9"/></name><operator pos:line="135" pos:column="9">-&gt;<pos:position pos:line="135" pos:column="14"/></operator><name pos:line="135" pos:column="11">first_avail<pos:position pos:line="135" pos:column="22"/></name></name> <operator pos:line="135" pos:column="23">=<pos:position pos:line="135" pos:column="24"/></operator> <operator pos:line="135" pos:column="25">(<pos:position pos:line="135" pos:column="26"/></operator><name pos:line="135" pos:column="26">char<pos:position pos:line="135" pos:column="30"/></name> <operator pos:line="135" pos:column="31">*<pos:position pos:line="135" pos:column="32"/></operator><operator pos:line="135" pos:column="32">)<pos:position pos:line="135" pos:column="33"/></operator><name pos:line="135" pos:column="33">node<pos:position pos:line="135" pos:column="37"/></name> <operator pos:line="135" pos:column="38">+<pos:position pos:line="135" pos:column="39"/></operator> <name pos:line="135" pos:column="40">APR_MEMNODE_T_SIZE<pos:position pos:line="135" pos:column="58"/></name></expr>;<pos:position pos:line="135" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="136" pos:column="5">node<pos:position pos:line="136" pos:column="9"/></name><operator pos:line="136" pos:column="9">-&gt;<pos:position pos:line="136" pos:column="14"/></operator><name pos:line="136" pos:column="11">endp<pos:position pos:line="136" pos:column="15"/></name></name> <operator pos:line="136" pos:column="16">=<pos:position pos:line="136" pos:column="17"/></operator> <operator pos:line="136" pos:column="18">(<pos:position pos:line="136" pos:column="19"/></operator><name pos:line="136" pos:column="19">char<pos:position pos:line="136" pos:column="23"/></name> <operator pos:line="136" pos:column="24">*<pos:position pos:line="136" pos:column="25"/></operator><operator pos:line="136" pos:column="25">)<pos:position pos:line="136" pos:column="26"/></operator><name pos:line="136" pos:column="26">node<pos:position pos:line="136" pos:column="30"/></name> <operator pos:line="136" pos:column="31">+<pos:position pos:line="136" pos:column="32"/></operator> <name pos:line="136" pos:column="33">size<pos:position pos:line="136" pos:column="37"/></name></expr>;<pos:position pos:line="136" pos:column="38"/></expr_stmt>

    <return pos:line="138" pos:column="5">return <expr><name pos:line="138" pos:column="12">node<pos:position pos:line="138" pos:column="16"/></name></expr>;<pos:position pos:line="138" pos:column="17"/></return>
}<pos:position pos:line="139" pos:column="2"/></block></function></unit>
