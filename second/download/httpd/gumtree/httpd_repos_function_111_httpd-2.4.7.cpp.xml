<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_111_httpd-2.4.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">generate_salt<pos:position pos:line="1" pos:column="25"/></name><parameter_list pos:line="1" pos:column="25">(<parameter><decl><type><name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier></type><name pos:line="1" pos:column="32">s<pos:position pos:line="1" pos:column="33"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="35">size_t<pos:position pos:line="1" pos:column="41"/></name></type> <name pos:line="1" pos:column="42">size<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="48">const<pos:position pos:line="1" pos:column="53"/></specifier> <name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier><modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">errstr<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                         <parameter><decl><type><name pos:line="2" pos:column="26">apr_pool_t<pos:position pos:line="2" pos:column="36"/></name> <modifier pos:line="2" pos:column="37">*<pos:position pos:line="2" pos:column="38"/></modifier></type><name pos:line="2" pos:column="38">pool<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">unsigned<pos:position pos:line="4" pos:column="13"/></name> <name pos:line="4" pos:column="14">char<pos:position pos:line="4" pos:column="18"/></name></type> <name><name pos:line="4" pos:column="19">rnd<pos:position pos:line="4" pos:column="22"/></name><index pos:line="4" pos:column="22">[<expr><literal type="number" pos:line="4" pos:column="23">32<pos:position pos:line="4" pos:column="25"/></literal></expr>]<pos:position pos:line="4" pos:column="26"/></index></name></decl>;<pos:position pos:line="4" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><specifier pos:line="5" pos:column="5">static<pos:position pos:line="5" pos:column="11"/></specifier> <type><specifier pos:line="5" pos:column="12">const<pos:position pos:line="5" pos:column="17"/></specifier> <name pos:line="5" pos:column="18">char<pos:position pos:line="5" pos:column="22"/></name></type> <name><name pos:line="5" pos:column="23">itoa64<pos:position pos:line="5" pos:column="29"/></name><index pos:line="5" pos:column="29">[]<pos:position pos:line="5" pos:column="31"/></index></name> <init pos:line="5" pos:column="32">=
        <expr><literal type="string" pos:line="6" pos:column="9">"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"<pos:position pos:line="6" pos:column="75"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="76"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">n<pos:position pos:line="7" pos:column="17"/></name></decl>;<pos:position pos:line="7" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">unsigned<pos:position pos:line="8" pos:column="13"/></name> <name pos:line="8" pos:column="14">int<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">val<pos:position pos:line="8" pos:column="21"/></name> <init pos:line="8" pos:column="22">= <expr><literal type="number" pos:line="8" pos:column="24">0<pos:position pos:line="8" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="27">bits<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><literal type="number" pos:line="8" pos:column="34">0<pos:position pos:line="8" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_status_t<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">rv<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="11" pos:column="5">n<pos:position pos:line="11" pos:column="6"/></name> <operator pos:line="11" pos:column="7">=<pos:position pos:line="11" pos:column="8"/></operator> <operator pos:line="11" pos:column="9">(<pos:position pos:line="11" pos:column="10"/></operator><name pos:line="11" pos:column="10">size<pos:position pos:line="11" pos:column="14"/></name> <operator pos:line="11" pos:column="15">*<pos:position pos:line="11" pos:column="16"/></operator> <literal type="number" pos:line="11" pos:column="17">6<pos:position pos:line="11" pos:column="18"/></literal> <operator pos:line="11" pos:column="19">+<pos:position pos:line="11" pos:column="20"/></operator> <literal type="number" pos:line="11" pos:column="21">7<pos:position pos:line="11" pos:column="22"/></literal><operator pos:line="11" pos:column="22">)<pos:position pos:line="11" pos:column="23"/></operator><operator pos:line="11" pos:column="23">/<pos:position pos:line="11" pos:column="24"/></operator><literal type="number" pos:line="11" pos:column="24">8<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name pos:line="12" pos:column="9">n<pos:position pos:line="12" pos:column="10"/></name> <operator pos:line="12" pos:column="11">&gt;<pos:position pos:line="12" pos:column="15"/></operator> <sizeof pos:line="12" pos:column="13">sizeof<argument_list pos:line="12" pos:column="19">(<argument><expr><name pos:line="12" pos:column="20">rnd<pos:position pos:line="12" pos:column="23"/></name></expr></argument>)<pos:position pos:line="12" pos:column="24"/></argument_list></sizeof></expr>)<pos:position pos:line="12" pos:column="25"/></condition><then pos:line="12" pos:column="25"> <block pos:line="12" pos:column="26">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">apr_file_printf<pos:position pos:line="13" pos:column="24"/></name><argument_list pos:line="13" pos:column="24">(<argument><expr><name pos:line="13" pos:column="25">errfile<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="34">"generate_salt(): BUG: Buffer too small"<pos:position pos:line="13" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="76"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="14" pos:column="9">abort<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">()<pos:position pos:line="14" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="16" pos:column="5">rv<pos:position pos:line="16" pos:column="7"/></name> <operator pos:line="16" pos:column="8">=<pos:position pos:line="16" pos:column="9"/></operator> <call><name pos:line="16" pos:column="10">apr_generate_random_bytes<pos:position pos:line="16" pos:column="35"/></name><argument_list pos:line="16" pos:column="35">(<argument><expr><name pos:line="16" pos:column="36">rnd<pos:position pos:line="16" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="16" pos:column="41">n<pos:position pos:line="16" pos:column="42"/></name></expr></argument>)<pos:position pos:line="16" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="44"/></expr_stmt>
    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><name pos:line="17" pos:column="9">rv<pos:position pos:line="17" pos:column="11"/></name></expr>)<pos:position pos:line="17" pos:column="12"/></condition><then pos:line="17" pos:column="12"> <block pos:line="17" pos:column="13">{
        <expr_stmt><expr><operator pos:line="18" pos:column="9">*<pos:position pos:line="18" pos:column="10"/></operator><name pos:line="18" pos:column="10">errstr<pos:position pos:line="18" pos:column="16"/></name> <operator pos:line="18" pos:column="17">=<pos:position pos:line="18" pos:column="18"/></operator> <call><name pos:line="18" pos:column="19">apr_psprintf<pos:position pos:line="18" pos:column="31"/></name><argument_list pos:line="18" pos:column="31">(<argument><expr><name pos:line="18" pos:column="32">pool<pos:position pos:line="18" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="18" pos:column="38">"Unable to generate random bytes: %pm"<pos:position pos:line="18" pos:column="76"/></literal></expr></argument>,
                               <argument><expr><operator pos:line="19" pos:column="32">&amp;<pos:position pos:line="19" pos:column="37"/></operator><name pos:line="19" pos:column="33">rv<pos:position pos:line="19" pos:column="35"/></name></expr></argument>)<pos:position pos:line="19" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="37"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">ERR_RANDOM<pos:position pos:line="20" pos:column="26"/></name></expr>;<pos:position pos:line="20" pos:column="27"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="22" pos:column="5">n<pos:position pos:line="22" pos:column="6"/></name> <operator pos:line="22" pos:column="7">=<pos:position pos:line="22" pos:column="8"/></operator> <literal type="number" pos:line="22" pos:column="9">0<pos:position pos:line="22" pos:column="10"/></literal></expr>;<pos:position pos:line="22" pos:column="11"/></expr_stmt>
    <while pos:line="23" pos:column="5">while <condition pos:line="23" pos:column="11">(<expr><name pos:line="23" pos:column="12">size<pos:position pos:line="23" pos:column="16"/></name> <operator pos:line="23" pos:column="17">&gt;<pos:position pos:line="23" pos:column="21"/></operator> <literal type="number" pos:line="23" pos:column="19">0<pos:position pos:line="23" pos:column="20"/></literal></expr>)<pos:position pos:line="23" pos:column="21"/></condition> <block pos:line="23" pos:column="22">{
        <if pos:line="24" pos:column="9">if <condition pos:line="24" pos:column="12">(<expr><name pos:line="24" pos:column="13">bits<pos:position pos:line="24" pos:column="17"/></name> <operator pos:line="24" pos:column="18">&lt;<pos:position pos:line="24" pos:column="22"/></operator> <literal type="number" pos:line="24" pos:column="20">6<pos:position pos:line="24" pos:column="21"/></literal></expr>)<pos:position pos:line="24" pos:column="22"/></condition><then pos:line="24" pos:column="22"> <block pos:line="24" pos:column="23">{
            <expr_stmt><expr><name pos:line="25" pos:column="13">val<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">|=<pos:position pos:line="25" pos:column="19"/></operator> <operator pos:line="25" pos:column="20">(<pos:position pos:line="25" pos:column="21"/></operator><name><name pos:line="25" pos:column="21">rnd<pos:position pos:line="25" pos:column="24"/></name><index pos:line="25" pos:column="24">[<expr><name pos:line="25" pos:column="25">n<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">++<pos:position pos:line="25" pos:column="28"/></operator></expr>]<pos:position pos:line="25" pos:column="29"/></index></name> <operator pos:line="25" pos:column="30">&lt;&lt;<pos:position pos:line="25" pos:column="38"/></operator> <name pos:line="25" pos:column="33">bits<pos:position pos:line="25" pos:column="37"/></name><operator pos:line="25" pos:column="37">)<pos:position pos:line="25" pos:column="38"/></operator></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="26" pos:column="13">bits<pos:position pos:line="26" pos:column="17"/></name> <operator pos:line="26" pos:column="18">+=<pos:position pos:line="26" pos:column="20"/></operator> <literal type="number" pos:line="26" pos:column="21">8<pos:position pos:line="26" pos:column="22"/></literal></expr>;<pos:position pos:line="26" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="28" pos:column="9">*<pos:position pos:line="28" pos:column="10"/></operator><name pos:line="28" pos:column="10">s<pos:position pos:line="28" pos:column="11"/></name><operator pos:line="28" pos:column="11">++<pos:position pos:line="28" pos:column="13"/></operator> <operator pos:line="28" pos:column="14">=<pos:position pos:line="28" pos:column="15"/></operator> <name><name pos:line="28" pos:column="16">itoa64<pos:position pos:line="28" pos:column="22"/></name><index pos:line="28" pos:column="22">[<expr><name pos:line="28" pos:column="23">val<pos:position pos:line="28" pos:column="26"/></name> <operator pos:line="28" pos:column="27">&amp;<pos:position pos:line="28" pos:column="32"/></operator> <literal type="number" pos:line="28" pos:column="29">0x3f<pos:position pos:line="28" pos:column="33"/></literal></expr>]<pos:position pos:line="28" pos:column="34"/></index></name></expr>;<pos:position pos:line="28" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><name pos:line="29" pos:column="9">size<pos:position pos:line="29" pos:column="13"/></name><operator pos:line="29" pos:column="13">--<pos:position pos:line="29" pos:column="15"/></operator></expr>;<pos:position pos:line="29" pos:column="16"/></expr_stmt>
        <expr_stmt><expr><name pos:line="30" pos:column="9">val<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">&gt;&gt;=<pos:position pos:line="30" pos:column="22"/></operator> <literal type="number" pos:line="30" pos:column="17">6<pos:position pos:line="30" pos:column="18"/></literal></expr>;<pos:position pos:line="30" pos:column="19"/></expr_stmt>
        <expr_stmt><expr><name pos:line="31" pos:column="9">bits<pos:position pos:line="31" pos:column="13"/></name> <operator pos:line="31" pos:column="14">-=<pos:position pos:line="31" pos:column="16"/></operator> <literal type="number" pos:line="31" pos:column="17">6<pos:position pos:line="31" pos:column="18"/></literal></expr>;<pos:position pos:line="31" pos:column="19"/></expr_stmt>
   }<pos:position pos:line="32" pos:column="5"/></block></while>
   <expr_stmt><expr><operator pos:line="33" pos:column="4">*<pos:position pos:line="33" pos:column="5"/></operator><name pos:line="33" pos:column="5">s<pos:position pos:line="33" pos:column="6"/></name> <operator pos:line="33" pos:column="7">=<pos:position pos:line="33" pos:column="8"/></operator> <literal type="char" pos:line="33" pos:column="9">'\0'<pos:position pos:line="33" pos:column="13"/></literal></expr>;<pos:position pos:line="33" pos:column="14"/></expr_stmt>
   <return pos:line="34" pos:column="4">return <expr><literal type="number" pos:line="34" pos:column="11">0<pos:position pos:line="34" pos:column="12"/></literal></expr>;<pos:position pos:line="34" pos:column="13"/></return>
}<pos:position pos:line="35" pos:column="2"/></block></function></unit>
