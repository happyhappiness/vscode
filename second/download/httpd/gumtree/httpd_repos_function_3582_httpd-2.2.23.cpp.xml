<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3582_httpd-2.2.23.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">proc_mutex_fcntl_tryacquire<pos:position pos:line="1" pos:column="48"/></name><parameter_list pos:line="1" pos:column="48">(<parameter><decl><type><name pos:line="1" pos:column="49">apr_proc_mutex_t<pos:position pos:line="1" pos:column="65"/></name> <modifier pos:line="1" pos:column="66">*<pos:position pos:line="1" pos:column="67"/></modifier></type><name pos:line="1" pos:column="67">mutex<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="73"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">rc<pos:position pos:line="3" pos:column="11"/></name></decl>;<pos:position pos:line="3" pos:column="12"/></decl_stmt>

    <do pos:line="5" pos:column="5">do <block pos:line="5" pos:column="8">{
        <expr_stmt><expr><name pos:line="6" pos:column="9">rc<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <call><name pos:line="6" pos:column="14">fcntl<pos:position pos:line="6" pos:column="19"/></name><argument_list pos:line="6" pos:column="19">(<argument><expr><name><name pos:line="6" pos:column="20">mutex<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">interproc<pos:position pos:line="6" pos:column="36"/></name><operator pos:line="6" pos:column="36">-&gt;<pos:position pos:line="6" pos:column="41"/></operator><name pos:line="6" pos:column="38">filedes<pos:position pos:line="6" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="47">F_SETLK<pos:position pos:line="6" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="6" pos:column="56">&amp;<pos:position pos:line="6" pos:column="61"/></operator><name pos:line="6" pos:column="57">proc_mutex_lock_it<pos:position pos:line="6" pos:column="75"/></name></expr></argument>)<pos:position pos:line="6" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="77"/></expr_stmt>
    }<pos:position pos:line="7" pos:column="6"/></block> while <condition pos:line="7" pos:column="13">(<expr><name pos:line="7" pos:column="14">rc<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">&lt;<pos:position pos:line="7" pos:column="21"/></operator> <literal type="number" pos:line="7" pos:column="19">0<pos:position pos:line="7" pos:column="20"/></literal> <operator pos:line="7" pos:column="21">&amp;&amp;<pos:position pos:line="7" pos:column="31"/></operator> <name pos:line="7" pos:column="24">errno<pos:position pos:line="7" pos:column="29"/></name> <operator pos:line="7" pos:column="30">==<pos:position pos:line="7" pos:column="32"/></operator> <name pos:line="7" pos:column="33">EINTR<pos:position pos:line="7" pos:column="38"/></name></expr>)<pos:position pos:line="7" pos:column="39"/></condition>;<pos:position pos:line="7" pos:column="40"/></do>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">rc<pos:position pos:line="8" pos:column="11"/></name> <operator pos:line="8" pos:column="12">&lt;<pos:position pos:line="8" pos:column="16"/></operator> <literal type="number" pos:line="8" pos:column="14">0<pos:position pos:line="8" pos:column="15"/></literal></expr>)<pos:position pos:line="8" pos:column="16"/></condition><then pos:line="8" pos:column="16"> <block pos:line="8" pos:column="17">{
<cpp:if pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">if<pos:position pos:line="9" pos:column="4"/></cpp:directive> <expr><name pos:line="9" pos:column="5">FCNTL_TRYACQUIRE_EACCES<pos:position pos:line="9" pos:column="28"/></name></expr></cpp:if>
        <if pos:line="10" pos:column="9">if <condition pos:line="10" pos:column="12">(<expr><name pos:line="10" pos:column="13">errno<pos:position pos:line="10" pos:column="18"/></name> <operator pos:line="10" pos:column="19">==<pos:position pos:line="10" pos:column="21"/></operator> <name pos:line="10" pos:column="22">EACCES<pos:position pos:line="10" pos:column="28"/></name></expr>)<pos:position pos:line="10" pos:column="29"/></condition><then pos:line="10" pos:column="29"> <block pos:line="10" pos:column="30">{
<cpp:else pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">else<pos:position pos:line="11" pos:column="6"/></cpp:directive></cpp:else>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><name pos:line="12" pos:column="13">errno<pos:position pos:line="12" pos:column="18"/></name> <operator pos:line="12" pos:column="19">==<pos:position pos:line="12" pos:column="21"/></operator> <name pos:line="12" pos:column="22">EAGAIN<pos:position pos:line="12" pos:column="28"/></name></expr>)<pos:position pos:line="12" pos:column="29"/></condition><then pos:line="12" pos:column="29"> <block pos:line="12" pos:column="30">{
<cpp:endif pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">endif<pos:position pos:line="13" pos:column="7"/></cpp:directive></cpp:endif>
            <return pos:line="14" pos:column="13">return <expr><name pos:line="14" pos:column="20">APR_EBUSY<pos:position pos:line="14" pos:column="29"/></name></expr>;<pos:position pos:line="14" pos:column="30"/></return>
        }<pos:position pos:line="15" pos:column="10"/></block></then></if>
        <return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">errno<pos:position pos:line="16" pos:column="21"/></name></expr>;<pos:position pos:line="16" pos:column="22"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="18" pos:column="5">mutex<pos:position pos:line="18" pos:column="10"/></name><operator pos:line="18" pos:column="10">-&gt;<pos:position pos:line="18" pos:column="15"/></operator><name pos:line="18" pos:column="12">curr_locked<pos:position pos:line="18" pos:column="23"/></name></name> <operator pos:line="18" pos:column="24">=<pos:position pos:line="18" pos:column="25"/></operator> <literal type="number" pos:line="18" pos:column="26">1<pos:position pos:line="18" pos:column="27"/></literal></expr>;<pos:position pos:line="18" pos:column="28"/></expr_stmt>
    <return pos:line="19" pos:column="5">return <expr><name pos:line="19" pos:column="12">APR_SUCCESS<pos:position pos:line="19" pos:column="23"/></name></expr>;<pos:position pos:line="19" pos:column="24"/></return>
}<pos:position pos:line="20" pos:column="2"/></block></then></if>

<function><specifier pos:line="22" pos:column="1">static<pos:position pos:line="22" pos:column="7"/></specifier> <type><name pos:line="22" pos:column="8">apr_status_t<pos:position pos:line="22" pos:column="20"/></name></type> <name pos:line="22" pos:column="21">proc_mutex_fcntl_release<pos:position pos:line="22" pos:column="45"/></name><parameter_list pos:line="22" pos:column="45">(<parameter><decl><type><name pos:line="22" pos:column="46">apr_proc_mutex_t<pos:position pos:line="22" pos:column="62"/></name> <modifier pos:line="22" pos:column="63">*<pos:position pos:line="22" pos:column="64"/></modifier></type><name pos:line="22" pos:column="64">mutex<pos:position pos:line="22" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="22" pos:column="70"/></parameter_list>
<block pos:line="23" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="24" pos:column="5">int<pos:position pos:line="24" pos:column="8"/></name></type> <name pos:line="24" pos:column="9">rc<pos:position pos:line="24" pos:column="11"/></name></decl>;<pos:position pos:line="24" pos:column="12"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="26" pos:column="5">mutex<pos:position pos:line="26" pos:column="10"/></name><operator pos:line="26" pos:column="10">-&gt;<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="12">curr_locked<pos:position pos:line="26" pos:column="23"/></name></name><operator pos:line="26" pos:column="23">=<pos:position pos:line="26" pos:column="24"/></operator><literal type="number" pos:line="26" pos:column="24">0<pos:position pos:line="26" pos:column="25"/></literal></expr>;<pos:position pos:line="26" pos:column="26"/></expr_stmt>
    <do pos:line="27" pos:column="5">do <block pos:line="27" pos:column="8">{
        <expr_stmt><expr><name pos:line="28" pos:column="9">rc<pos:position pos:line="28" pos:column="11"/></name> <operator pos:line="28" pos:column="12">=<pos:position pos:line="28" pos:column="13"/></operator> <call><name pos:line="28" pos:column="14">fcntl<pos:position pos:line="28" pos:column="19"/></name><argument_list pos:line="28" pos:column="19">(<argument><expr><name><name pos:line="28" pos:column="20">mutex<pos:position pos:line="28" pos:column="25"/></name><operator pos:line="28" pos:column="25">-&gt;<pos:position pos:line="28" pos:column="30"/></operator><name pos:line="28" pos:column="27">interproc<pos:position pos:line="28" pos:column="36"/></name><operator pos:line="28" pos:column="36">-&gt;<pos:position pos:line="28" pos:column="41"/></operator><name pos:line="28" pos:column="38">filedes<pos:position pos:line="28" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="47">F_SETLKW<pos:position pos:line="28" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="28" pos:column="57">&amp;<pos:position pos:line="28" pos:column="62"/></operator><name pos:line="28" pos:column="58">proc_mutex_unlock_it<pos:position pos:line="28" pos:column="78"/></name></expr></argument>)<pos:position pos:line="28" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="80"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block> while <condition pos:line="29" pos:column="13">(<expr><name pos:line="29" pos:column="14">rc<pos:position pos:line="29" pos:column="16"/></name> <operator pos:line="29" pos:column="17">&lt;<pos:position pos:line="29" pos:column="21"/></operator> <literal type="number" pos:line="29" pos:column="19">0<pos:position pos:line="29" pos:column="20"/></literal> <operator pos:line="29" pos:column="21">&amp;&amp;<pos:position pos:line="29" pos:column="31"/></operator> <name pos:line="29" pos:column="24">errno<pos:position pos:line="29" pos:column="29"/></name> <operator pos:line="29" pos:column="30">==<pos:position pos:line="29" pos:column="32"/></operator> <name pos:line="29" pos:column="33">EINTR<pos:position pos:line="29" pos:column="38"/></name></expr>)<pos:position pos:line="29" pos:column="39"/></condition>;<pos:position pos:line="29" pos:column="40"/></do>
    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">rc<pos:position pos:line="30" pos:column="11"/></name> <operator pos:line="30" pos:column="12">&lt;<pos:position pos:line="30" pos:column="16"/></operator> <literal type="number" pos:line="30" pos:column="14">0<pos:position pos:line="30" pos:column="15"/></literal></expr>)<pos:position pos:line="30" pos:column="16"/></condition><then pos:line="30" pos:column="16"> <block pos:line="30" pos:column="17">{
        <return pos:line="31" pos:column="9">return <expr><name pos:line="31" pos:column="16">errno<pos:position pos:line="31" pos:column="21"/></name></expr>;<pos:position pos:line="31" pos:column="22"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>
    <return pos:line="33" pos:column="5">return <expr><name pos:line="33" pos:column="12">APR_SUCCESS<pos:position pos:line="33" pos:column="23"/></name></expr>;<pos:position pos:line="33" pos:column="24"/></return>
}<pos:position pos:line="34" pos:column="2"/></block></function>

<decl_stmt><decl><specifier pos:line="36" pos:column="1">static<pos:position pos:line="36" pos:column="7"/></specifier> <type><specifier pos:line="36" pos:column="8">const<pos:position pos:line="36" pos:column="13"/></specifier> <name pos:line="36" pos:column="14">apr_proc_mutex_unix_lock_methods_t<pos:position pos:line="36" pos:column="48"/></name></type> <name pos:line="36" pos:column="49">mutex_fcntl_methods<pos:position pos:line="36" pos:column="68"/></name> <init pos:line="36" pos:column="69">=
<expr><block pos:line="37" pos:column="1">{
<cpp:if pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">if<pos:position pos:line="38" pos:column="4"/></cpp:directive> <expr><name pos:line="38" pos:column="5">APR_PROCESS_LOCK_IS_GLOBAL<pos:position pos:line="38" pos:column="31"/></name> <operator pos:line="38" pos:column="32">||<pos:position pos:line="38" pos:column="34"/></operator> <operator pos:line="38" pos:column="35">!<pos:position pos:line="38" pos:column="36"/></operator><name pos:line="38" pos:column="36">APR_HAS_THREADS<pos:position pos:line="38" pos:column="51"/></name> <operator pos:line="38" pos:column="52">||<pos:position pos:line="38" pos:column="54"/></operator> <call><name pos:line="38" pos:column="55">defined<pos:position pos:line="38" pos:column="62"/></name><argument_list pos:line="38" pos:column="62">(<argument><expr><name pos:line="38" pos:column="63">FCNTL_IS_GLOBAL<pos:position pos:line="38" pos:column="78"/></name></expr></argument>)<pos:position pos:line="38" pos:column="79"/></argument_list></call></expr></cpp:if>
    <expr><name pos:line="39" pos:column="5">APR_PROCESS_LOCK_MECH_IS_GLOBAL<pos:position pos:line="39" pos:column="36"/></name></expr>,
<cpp:else pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">else<pos:position pos:line="40" pos:column="6"/></cpp:directive></cpp:else>
    <expr><literal type="number" pos:line="41" pos:column="5">0<pos:position pos:line="41" pos:column="6"/></literal></expr>,
<cpp:endif pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">endif<pos:position pos:line="42" pos:column="7"/></cpp:directive></cpp:endif>
    <expr><name pos:line="43" pos:column="5">proc_mutex_fcntl_create<pos:position pos:line="43" pos:column="28"/></name></expr>,
    <expr><name pos:line="44" pos:column="5">proc_mutex_fcntl_acquire<pos:position pos:line="44" pos:column="29"/></name></expr>,
    <expr><name pos:line="45" pos:column="5">proc_mutex_fcntl_tryacquire<pos:position pos:line="45" pos:column="32"/></name></expr>,
    <expr><name pos:line="46" pos:column="5">proc_mutex_fcntl_release<pos:position pos:line="46" pos:column="29"/></name></expr>,
    <expr><name pos:line="47" pos:column="5">proc_mutex_fcntl_cleanup<pos:position pos:line="47" pos:column="29"/></name></expr>,
    <expr><name pos:line="48" pos:column="5">proc_mutex_no_child_init<pos:position pos:line="48" pos:column="29"/></name></expr>,
    <expr><literal type="string" pos:line="49" pos:column="5">"fcntl"<pos:position pos:line="49" pos:column="12"/></literal></expr>
}<pos:position pos:line="50" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="50" pos:column="3"/></decl_stmt>

<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="52" pos:column="8">/* fcntl implementation */</comment>

<cpp:if pos:line="54" pos:column="1">#<cpp:directive pos:line="54" pos:column="2">if<pos:position pos:line="54" pos:column="4"/></cpp:directive> <expr><name pos:line="54" pos:column="5">APR_HAS_FLOCK_SERIALIZE<pos:position pos:line="54" pos:column="28"/></name></expr></cpp:if>

<decl_stmt><decl><specifier pos:line="56" pos:column="1">static<pos:position pos:line="56" pos:column="7"/></specifier> <type><name pos:line="56" pos:column="8">apr_status_t<pos:position pos:line="56" pos:column="20"/></name></type> <name pos:line="56" pos:column="21">proc_mutex_flock_release<pos:position pos:line="56" pos:column="45"/></name><argument_list pos:line="56" pos:column="45">(<argument><expr><name pos:line="56" pos:column="46">apr_proc_mutex_t<pos:position pos:line="56" pos:column="62"/></name> <operator pos:line="56" pos:column="63">*<pos:position pos:line="56" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="56" pos:column="65"/></argument_list></decl>;<pos:position pos:line="56" pos:column="66"/></decl_stmt>

<function><specifier pos:line="58" pos:column="1">static<pos:position pos:line="58" pos:column="7"/></specifier> <type><name pos:line="58" pos:column="8">apr_status_t<pos:position pos:line="58" pos:column="20"/></name></type> <name pos:line="58" pos:column="21">proc_mutex_flock_cleanup<pos:position pos:line="58" pos:column="45"/></name><parameter_list pos:line="58" pos:column="45">(<parameter><decl><type><name pos:line="58" pos:column="46">void<pos:position pos:line="58" pos:column="50"/></name> <modifier pos:line="58" pos:column="51">*<pos:position pos:line="58" pos:column="52"/></modifier></type><name pos:line="58" pos:column="52">mutex_<pos:position pos:line="58" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="58" pos:column="59"/></parameter_list>
<block pos:line="59" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="60" pos:column="5">apr_status_t<pos:position pos:line="60" pos:column="17"/></name></type> <name pos:line="60" pos:column="18">status<pos:position pos:line="60" pos:column="24"/></name></decl>;<pos:position pos:line="60" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="61" pos:column="5">apr_proc_mutex_t<pos:position pos:line="61" pos:column="21"/></name> <modifier pos:line="61" pos:column="22">*<pos:position pos:line="61" pos:column="23"/></modifier></type><name pos:line="61" pos:column="23">mutex<pos:position pos:line="61" pos:column="28"/></name><init pos:line="61" pos:column="28">=<expr><name pos:line="61" pos:column="29">mutex_<pos:position pos:line="61" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="61" pos:column="36"/></decl_stmt>

    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name><name pos:line="63" pos:column="9">mutex<pos:position pos:line="63" pos:column="14"/></name><operator pos:line="63" pos:column="14">-&gt;<pos:position pos:line="63" pos:column="19"/></operator><name pos:line="63" pos:column="16">curr_locked<pos:position pos:line="63" pos:column="27"/></name></name> <operator pos:line="63" pos:column="28">==<pos:position pos:line="63" pos:column="30"/></operator> <literal type="number" pos:line="63" pos:column="31">1<pos:position pos:line="63" pos:column="32"/></literal></expr>)<pos:position pos:line="63" pos:column="33"/></condition><then pos:line="63" pos:column="33"> <block pos:line="63" pos:column="34">{
        <expr_stmt><expr><name pos:line="64" pos:column="9">status<pos:position pos:line="64" pos:column="15"/></name> <operator pos:line="64" pos:column="16">=<pos:position pos:line="64" pos:column="17"/></operator> <call><name pos:line="64" pos:column="18">proc_mutex_flock_release<pos:position pos:line="64" pos:column="42"/></name><argument_list pos:line="64" pos:column="42">(<argument><expr><name pos:line="64" pos:column="43">mutex<pos:position pos:line="64" pos:column="48"/></name></expr></argument>)<pos:position pos:line="64" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="50"/></expr_stmt>
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">status<pos:position pos:line="65" pos:column="19"/></name> <operator pos:line="65" pos:column="20">!=<pos:position pos:line="65" pos:column="22"/></operator> <name pos:line="65" pos:column="23">APR_SUCCESS<pos:position pos:line="65" pos:column="34"/></name></expr>)<pos:position pos:line="65" pos:column="35"/></condition><then pos:line="65" pos:column="35">
            <block type="pseudo"><return pos:line="66" pos:column="13">return <expr><name pos:line="66" pos:column="20">status<pos:position pos:line="66" pos:column="26"/></name></expr>;<pos:position pos:line="66" pos:column="27"/></return></block></then></if>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if>
    <if pos:line="68" pos:column="5">if <condition pos:line="68" pos:column="8">(<expr><name><name pos:line="68" pos:column="9">mutex<pos:position pos:line="68" pos:column="14"/></name><operator pos:line="68" pos:column="14">-&gt;<pos:position pos:line="68" pos:column="19"/></operator><name pos:line="68" pos:column="16">interproc<pos:position pos:line="68" pos:column="25"/></name></name></expr>)<pos:position pos:line="68" pos:column="26"/></condition><then pos:line="68" pos:column="26"> <block pos:line="68" pos:column="27">{ <comment type="block" pos:line="68" pos:column="29">/* if it was opened properly */</comment>
        <expr_stmt><expr><call><name pos:line="69" pos:column="9">apr_file_close<pos:position pos:line="69" pos:column="23"/></name><argument_list pos:line="69" pos:column="23">(<argument><expr><name><name pos:line="69" pos:column="24">mutex<pos:position pos:line="69" pos:column="29"/></name><operator pos:line="69" pos:column="29">-&gt;<pos:position pos:line="69" pos:column="34"/></operator><name pos:line="69" pos:column="31">interproc<pos:position pos:line="69" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="69" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="69" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="70" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">unlink<pos:position pos:line="71" pos:column="11"/></name><argument_list pos:line="71" pos:column="11">(<argument><expr><name><name pos:line="71" pos:column="12">mutex<pos:position pos:line="71" pos:column="17"/></name><operator pos:line="71" pos:column="17">-&gt;<pos:position pos:line="71" pos:column="22"/></operator><name pos:line="71" pos:column="19">fname<pos:position pos:line="71" pos:column="24"/></name></name></expr></argument>)<pos:position pos:line="71" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="26"/></expr_stmt>
    <return pos:line="72" pos:column="5">return <expr><name pos:line="72" pos:column="12">APR_SUCCESS<pos:position pos:line="72" pos:column="23"/></name></expr>;<pos:position pos:line="72" pos:column="24"/></return>
}<pos:position pos:line="73" pos:column="2"/></block></function>    

<function><specifier pos:line="75" pos:column="1">static<pos:position pos:line="75" pos:column="7"/></specifier> <type><name pos:line="75" pos:column="8">apr_status_t<pos:position pos:line="75" pos:column="20"/></name></type> <name pos:line="75" pos:column="21">proc_mutex_flock_create<pos:position pos:line="75" pos:column="44"/></name><parameter_list pos:line="75" pos:column="44">(<parameter><decl><type><name pos:line="75" pos:column="45">apr_proc_mutex_t<pos:position pos:line="75" pos:column="61"/></name> <modifier pos:line="75" pos:column="62">*<pos:position pos:line="75" pos:column="63"/></modifier></type><name pos:line="75" pos:column="63">new_mutex<pos:position pos:line="75" pos:column="72"/></name></decl></parameter>,
                                            <parameter><decl><type><specifier pos:line="76" pos:column="45">const<pos:position pos:line="76" pos:column="50"/></specifier> <name pos:line="76" pos:column="51">char<pos:position pos:line="76" pos:column="55"/></name> <modifier pos:line="76" pos:column="56">*<pos:position pos:line="76" pos:column="57"/></modifier></type><name pos:line="76" pos:column="57">fname<pos:position pos:line="76" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="76" pos:column="63"/></parameter_list>
<block pos:line="77" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="78" pos:column="5">int<pos:position pos:line="78" pos:column="8"/></name></type> <name pos:line="78" pos:column="9">rv<pos:position pos:line="78" pos:column="11"/></name></decl>;<pos:position pos:line="78" pos:column="12"/></decl_stmt>
 
    <if pos:line="80" pos:column="5">if <condition pos:line="80" pos:column="8">(<expr><name pos:line="80" pos:column="9">fname<pos:position pos:line="80" pos:column="14"/></name></expr>)<pos:position pos:line="80" pos:column="15"/></condition><then pos:line="80" pos:column="15"> <block pos:line="80" pos:column="16">{
        <expr_stmt><expr><name><name pos:line="81" pos:column="9">new_mutex<pos:position pos:line="81" pos:column="18"/></name><operator pos:line="81" pos:column="18">-&gt;<pos:position pos:line="81" pos:column="23"/></operator><name pos:line="81" pos:column="20">fname<pos:position pos:line="81" pos:column="25"/></name></name> <operator pos:line="81" pos:column="26">=<pos:position pos:line="81" pos:column="27"/></operator> <call><name pos:line="81" pos:column="28">apr_pstrdup<pos:position pos:line="81" pos:column="39"/></name><argument_list pos:line="81" pos:column="39">(<argument><expr><name><name pos:line="81" pos:column="40">new_mutex<pos:position pos:line="81" pos:column="49"/></name><operator pos:line="81" pos:column="49">-&gt;<pos:position pos:line="81" pos:column="54"/></operator><name pos:line="81" pos:column="51">pool<pos:position pos:line="81" pos:column="55"/></name></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="57">fname<pos:position pos:line="81" pos:column="62"/></name></expr></argument>)<pos:position pos:line="81" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="64"/></expr_stmt>
        <expr_stmt><expr><name pos:line="82" pos:column="9">rv<pos:position pos:line="82" pos:column="11"/></name> <operator pos:line="82" pos:column="12">=<pos:position pos:line="82" pos:column="13"/></operator> <call><name pos:line="82" pos:column="14">apr_file_open<pos:position pos:line="82" pos:column="27"/></name><argument_list pos:line="82" pos:column="27">(<argument><expr><operator pos:line="82" pos:column="28">&amp;<pos:position pos:line="82" pos:column="33"/></operator><name><name pos:line="82" pos:column="29">new_mutex<pos:position pos:line="82" pos:column="38"/></name><operator pos:line="82" pos:column="38">-&gt;<pos:position pos:line="82" pos:column="43"/></operator><name pos:line="82" pos:column="40">interproc<pos:position pos:line="82" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="82" pos:column="51">new_mutex<pos:position pos:line="82" pos:column="60"/></name><operator pos:line="82" pos:column="60">-&gt;<pos:position pos:line="82" pos:column="65"/></operator><name pos:line="82" pos:column="62">fname<pos:position pos:line="82" pos:column="67"/></name></name></expr></argument>,
                           <argument><expr><name pos:line="83" pos:column="28">APR_FOPEN_CREATE<pos:position pos:line="83" pos:column="44"/></name> <operator pos:line="83" pos:column="45">|<pos:position pos:line="83" pos:column="46"/></operator> <name pos:line="83" pos:column="47">APR_FOPEN_WRITE<pos:position pos:line="83" pos:column="62"/></name> <operator pos:line="83" pos:column="63">|<pos:position pos:line="83" pos:column="64"/></operator> <name pos:line="83" pos:column="65">APR_FOPEN_EXCL<pos:position pos:line="83" pos:column="79"/></name></expr></argument>,
                           <argument><expr><name pos:line="84" pos:column="28">APR_UREAD<pos:position pos:line="84" pos:column="37"/></name> <operator pos:line="84" pos:column="38">|<pos:position pos:line="84" pos:column="39"/></operator> <name pos:line="84" pos:column="40">APR_UWRITE<pos:position pos:line="84" pos:column="50"/></name></expr></argument>,
                           <argument><expr><name><name pos:line="85" pos:column="28">new_mutex<pos:position pos:line="85" pos:column="37"/></name><operator pos:line="85" pos:column="37">-&gt;<pos:position pos:line="85" pos:column="42"/></operator><name pos:line="85" pos:column="39">pool<pos:position pos:line="85" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="85" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="85" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="86" pos:column="6"/></block></then>
    <else pos:line="87" pos:column="5">else <block pos:line="87" pos:column="10">{
        <expr_stmt><expr><name><name pos:line="88" pos:column="9">new_mutex<pos:position pos:line="88" pos:column="18"/></name><operator pos:line="88" pos:column="18">-&gt;<pos:position pos:line="88" pos:column="23"/></operator><name pos:line="88" pos:column="20">fname<pos:position pos:line="88" pos:column="25"/></name></name> <operator pos:line="88" pos:column="26">=<pos:position pos:line="88" pos:column="27"/></operator> <call><name pos:line="88" pos:column="28">apr_pstrdup<pos:position pos:line="88" pos:column="39"/></name><argument_list pos:line="88" pos:column="39">(<argument><expr><name><name pos:line="88" pos:column="40">new_mutex<pos:position pos:line="88" pos:column="49"/></name><operator pos:line="88" pos:column="49">-&gt;<pos:position pos:line="88" pos:column="54"/></operator><name pos:line="88" pos:column="51">pool<pos:position pos:line="88" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="57">"/tmp/aprXXXXXX"<pos:position pos:line="88" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="75"/></expr_stmt>
        <expr_stmt><expr><name pos:line="89" pos:column="9">rv<pos:position pos:line="89" pos:column="11"/></name> <operator pos:line="89" pos:column="12">=<pos:position pos:line="89" pos:column="13"/></operator> <call><name pos:line="89" pos:column="14">apr_file_mktemp<pos:position pos:line="89" pos:column="29"/></name><argument_list pos:line="89" pos:column="29">(<argument><expr><operator pos:line="89" pos:column="30">&amp;<pos:position pos:line="89" pos:column="35"/></operator><name><name pos:line="89" pos:column="31">new_mutex<pos:position pos:line="89" pos:column="40"/></name><operator pos:line="89" pos:column="40">-&gt;<pos:position pos:line="89" pos:column="45"/></operator><name pos:line="89" pos:column="42">interproc<pos:position pos:line="89" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="89" pos:column="53">new_mutex<pos:position pos:line="89" pos:column="62"/></name><operator pos:line="89" pos:column="62">-&gt;<pos:position pos:line="89" pos:column="67"/></operator><name pos:line="89" pos:column="64">fname<pos:position pos:line="89" pos:column="69"/></name></name></expr></argument>,
                             <argument><expr><name pos:line="90" pos:column="30">APR_FOPEN_CREATE<pos:position pos:line="90" pos:column="46"/></name> <operator pos:line="90" pos:column="47">|<pos:position pos:line="90" pos:column="48"/></operator> <name pos:line="90" pos:column="49">APR_FOPEN_WRITE<pos:position pos:line="90" pos:column="64"/></name> <operator pos:line="90" pos:column="65">|<pos:position pos:line="90" pos:column="66"/></operator> <name pos:line="90" pos:column="67">APR_FOPEN_EXCL<pos:position pos:line="90" pos:column="81"/></name></expr></argument>,
                             <argument><expr><name><name pos:line="91" pos:column="30">new_mutex<pos:position pos:line="91" pos:column="39"/></name><operator pos:line="91" pos:column="39">-&gt;<pos:position pos:line="91" pos:column="44"/></operator><name pos:line="91" pos:column="41">pool<pos:position pos:line="91" pos:column="45"/></name></name></expr></argument>)<pos:position pos:line="91" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></else></if>
 
    <if pos:line="94" pos:column="5">if <condition pos:line="94" pos:column="8">(<expr><name pos:line="94" pos:column="9">rv<pos:position pos:line="94" pos:column="11"/></name> <operator pos:line="94" pos:column="12">!=<pos:position pos:line="94" pos:column="14"/></operator> <name pos:line="94" pos:column="15">APR_SUCCESS<pos:position pos:line="94" pos:column="26"/></name></expr>)<pos:position pos:line="94" pos:column="27"/></condition><then pos:line="94" pos:column="27"> <block pos:line="94" pos:column="28">{
        <expr_stmt><expr><call><name pos:line="95" pos:column="9">proc_mutex_flock_cleanup<pos:position pos:line="95" pos:column="33"/></name><argument_list pos:line="95" pos:column="33">(<argument><expr><name pos:line="95" pos:column="34">new_mutex<pos:position pos:line="95" pos:column="43"/></name></expr></argument>)<pos:position pos:line="95" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="45"/></expr_stmt>
        <return pos:line="96" pos:column="9">return <expr><name pos:line="96" pos:column="16">errno<pos:position pos:line="96" pos:column="21"/></name></expr>;<pos:position pos:line="96" pos:column="22"/></return>
    }<pos:position pos:line="97" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="98" pos:column="5">new_mutex<pos:position pos:line="98" pos:column="14"/></name><operator pos:line="98" pos:column="14">-&gt;<pos:position pos:line="98" pos:column="19"/></operator><name pos:line="98" pos:column="16">curr_locked<pos:position pos:line="98" pos:column="27"/></name></name> <operator pos:line="98" pos:column="28">=<pos:position pos:line="98" pos:column="29"/></operator> <literal type="number" pos:line="98" pos:column="30">0<pos:position pos:line="98" pos:column="31"/></literal></expr>;<pos:position pos:line="98" pos:column="32"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="99" pos:column="30"/></name><argument_list pos:line="99" pos:column="30">(<argument><expr><name><name pos:line="99" pos:column="31">new_mutex<pos:position pos:line="99" pos:column="40"/></name><operator pos:line="99" pos:column="40">-&gt;<pos:position pos:line="99" pos:column="45"/></operator><name pos:line="99" pos:column="42">pool<pos:position pos:line="99" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="99" pos:column="48">(<pos:position pos:line="99" pos:column="49"/></operator><name pos:line="99" pos:column="49">void<pos:position pos:line="99" pos:column="53"/></name> <operator pos:line="99" pos:column="54">*<pos:position pos:line="99" pos:column="55"/></operator><operator pos:line="99" pos:column="55">)<pos:position pos:line="99" pos:column="56"/></operator><name pos:line="99" pos:column="56">new_mutex<pos:position pos:line="99" pos:column="65"/></name></expr></argument>,
                              <argument><expr><name pos:line="100" pos:column="31">apr_proc_mutex_cleanup<pos:position pos:line="100" pos:column="53"/></name></expr></argument>,
                              <argument><expr><name pos:line="101" pos:column="31">apr_pool_cleanup_null<pos:position pos:line="101" pos:column="52"/></name></expr></argument>)<pos:position pos:line="101" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="101" pos:column="54"/></expr_stmt>
    <return pos:line="102" pos:column="5">return <expr><name pos:line="102" pos:column="12">APR_SUCCESS<pos:position pos:line="102" pos:column="23"/></name></expr>;<pos:position pos:line="102" pos:column="24"/></return>
}<pos:position pos:line="103" pos:column="2"/></block></function>

<function><specifier pos:line="105" pos:column="1">static<pos:position pos:line="105" pos:column="7"/></specifier> <type><name pos:line="105" pos:column="8">apr_status_t<pos:position pos:line="105" pos:column="20"/></name></type> <name pos:line="105" pos:column="21">proc_mutex_flock_acquire<pos:position pos:line="105" pos:column="45"/></name><parameter_list pos:line="105" pos:column="45">(<parameter><decl><type><name pos:line="105" pos:column="46">apr_proc_mutex_t<pos:position pos:line="105" pos:column="62"/></name> <modifier pos:line="105" pos:column="63">*<pos:position pos:line="105" pos:column="64"/></modifier></type><name pos:line="105" pos:column="64">mutex<pos:position pos:line="105" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="105" pos:column="70"/></parameter_list>
<block pos:line="106" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="107" pos:column="5">int<pos:position pos:line="107" pos:column="8"/></name></type> <name pos:line="107" pos:column="9">rc<pos:position pos:line="107" pos:column="11"/></name></decl>;<pos:position pos:line="107" pos:column="12"/></decl_stmt>

    <do pos:line="109" pos:column="5">do <block pos:line="109" pos:column="8">{
        <expr_stmt><expr><name pos:line="110" pos:column="9">rc<pos:position pos:line="110" pos:column="11"/></name> <operator pos:line="110" pos:column="12">=<pos:position pos:line="110" pos:column="13"/></operator> <call><name pos:line="110" pos:column="14">flock<pos:position pos:line="110" pos:column="19"/></name><argument_list pos:line="110" pos:column="19">(<argument><expr><name><name pos:line="110" pos:column="20">mutex<pos:position pos:line="110" pos:column="25"/></name><operator pos:line="110" pos:column="25">-&gt;<pos:position pos:line="110" pos:column="30"/></operator><name pos:line="110" pos:column="27">interproc<pos:position pos:line="110" pos:column="36"/></name><operator pos:line="110" pos:column="36">-&gt;<pos:position pos:line="110" pos:column="41"/></operator><name pos:line="110" pos:column="38">filedes<pos:position pos:line="110" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="47">LOCK_EX<pos:position pos:line="110" pos:column="54"/></name></expr></argument>)<pos:position pos:line="110" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="111" pos:column="6"/></block> while <condition pos:line="111" pos:column="13">(<expr><name pos:line="111" pos:column="14">rc<pos:position pos:line="111" pos:column="16"/></name> <operator pos:line="111" pos:column="17">&lt;<pos:position pos:line="111" pos:column="21"/></operator> <literal type="number" pos:line="111" pos:column="19">0<pos:position pos:line="111" pos:column="20"/></literal> <operator pos:line="111" pos:column="21">&amp;&amp;<pos:position pos:line="111" pos:column="31"/></operator> <name pos:line="111" pos:column="24">errno<pos:position pos:line="111" pos:column="29"/></name> <operator pos:line="111" pos:column="30">==<pos:position pos:line="111" pos:column="32"/></operator> <name pos:line="111" pos:column="33">EINTR<pos:position pos:line="111" pos:column="38"/></name></expr>)<pos:position pos:line="111" pos:column="39"/></condition>;<pos:position pos:line="111" pos:column="40"/></do>
    <if pos:line="112" pos:column="5">if <condition pos:line="112" pos:column="8">(<expr><name pos:line="112" pos:column="9">rc<pos:position pos:line="112" pos:column="11"/></name> <operator pos:line="112" pos:column="12">&lt;<pos:position pos:line="112" pos:column="16"/></operator> <literal type="number" pos:line="112" pos:column="14">0<pos:position pos:line="112" pos:column="15"/></literal></expr>)<pos:position pos:line="112" pos:column="16"/></condition><then pos:line="112" pos:column="16"> <block pos:line="112" pos:column="17">{
        <return pos:line="113" pos:column="9">return <expr><name pos:line="113" pos:column="16">errno<pos:position pos:line="113" pos:column="21"/></name></expr>;<pos:position pos:line="113" pos:column="22"/></return>
    }<pos:position pos:line="114" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="115" pos:column="5">mutex<pos:position pos:line="115" pos:column="10"/></name><operator pos:line="115" pos:column="10">-&gt;<pos:position pos:line="115" pos:column="15"/></operator><name pos:line="115" pos:column="12">curr_locked<pos:position pos:line="115" pos:column="23"/></name></name> <operator pos:line="115" pos:column="24">=<pos:position pos:line="115" pos:column="25"/></operator> <literal type="number" pos:line="115" pos:column="26">1<pos:position pos:line="115" pos:column="27"/></literal></expr>;<pos:position pos:line="115" pos:column="28"/></expr_stmt>
    <return pos:line="116" pos:column="5">return <expr><name pos:line="116" pos:column="12">APR_SUCCESS<pos:position pos:line="116" pos:column="23"/></name></expr>;<pos:position pos:line="116" pos:column="24"/></return>
}<pos:position pos:line="117" pos:column="2"/></block></function>

<function><specifier pos:line="119" pos:column="1">static<pos:position pos:line="119" pos:column="7"/></specifier> <type><name pos:line="119" pos:column="8">apr_status_t<pos:position pos:line="119" pos:column="20"/></name></type> <name pos:line="119" pos:column="21">proc_mutex_flock_tryacquire<pos:position pos:line="119" pos:column="48"/></name><parameter_list pos:line="119" pos:column="48">(<parameter><decl><type><name pos:line="119" pos:column="49">apr_proc_mutex_t<pos:position pos:line="119" pos:column="65"/></name> <modifier pos:line="119" pos:column="66">*<pos:position pos:line="119" pos:column="67"/></modifier></type><name pos:line="119" pos:column="67">mutex<pos:position pos:line="119" pos:column="72"/></name></decl></parameter>)<pos:position pos:line="119" pos:column="73"/></parameter_list>
<block pos:line="120" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="121" pos:column="5">int<pos:position pos:line="121" pos:column="8"/></name></type> <name pos:line="121" pos:column="9">rc<pos:position pos:line="121" pos:column="11"/></name></decl>;<pos:position pos:line="121" pos:column="12"/></decl_stmt>

    <do pos:line="123" pos:column="5">do <block pos:line="123" pos:column="8">{
        <expr_stmt><expr><name pos:line="124" pos:column="9">rc<pos:position pos:line="124" pos:column="11"/></name> <operator pos:line="124" pos:column="12">=<pos:position pos:line="124" pos:column="13"/></operator> <call><name pos:line="124" pos:column="14">flock<pos:position pos:line="124" pos:column="19"/></name><argument_list pos:line="124" pos:column="19">(<argument><expr><name><name pos:line="124" pos:column="20">mutex<pos:position pos:line="124" pos:column="25"/></name><operator pos:line="124" pos:column="25">-&gt;<pos:position pos:line="124" pos:column="30"/></operator><name pos:line="124" pos:column="27">interproc<pos:position pos:line="124" pos:column="36"/></name><operator pos:line="124" pos:column="36">-&gt;<pos:position pos:line="124" pos:column="41"/></operator><name pos:line="124" pos:column="38">filedes<pos:position pos:line="124" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="124" pos:column="47">LOCK_EX<pos:position pos:line="124" pos:column="54"/></name> <operator pos:line="124" pos:column="55">|<pos:position pos:line="124" pos:column="56"/></operator> <name pos:line="124" pos:column="57">LOCK_NB<pos:position pos:line="124" pos:column="64"/></name></expr></argument>)<pos:position pos:line="124" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="125" pos:column="6"/></block> while <condition pos:line="125" pos:column="13">(<expr><name pos:line="125" pos:column="14">rc<pos:position pos:line="125" pos:column="16"/></name> <operator pos:line="125" pos:column="17">&lt;<pos:position pos:line="125" pos:column="21"/></operator> <literal type="number" pos:line="125" pos:column="19">0<pos:position pos:line="125" pos:column="20"/></literal> <operator pos:line="125" pos:column="21">&amp;&amp;<pos:position pos:line="125" pos:column="31"/></operator> <name pos:line="125" pos:column="24">errno<pos:position pos:line="125" pos:column="29"/></name> <operator pos:line="125" pos:column="30">==<pos:position pos:line="125" pos:column="32"/></operator> <name pos:line="125" pos:column="33">EINTR<pos:position pos:line="125" pos:column="38"/></name></expr>)<pos:position pos:line="125" pos:column="39"/></condition>;<pos:position pos:line="125" pos:column="40"/></do>
    <if pos:line="126" pos:column="5">if <condition pos:line="126" pos:column="8">(<expr><name pos:line="126" pos:column="9">rc<pos:position pos:line="126" pos:column="11"/></name> <operator pos:line="126" pos:column="12">&lt;<pos:position pos:line="126" pos:column="16"/></operator> <literal type="number" pos:line="126" pos:column="14">0<pos:position pos:line="126" pos:column="15"/></literal></expr>)<pos:position pos:line="126" pos:column="16"/></condition><then pos:line="126" pos:column="16"> <block pos:line="126" pos:column="17">{
        <if pos:line="127" pos:column="9">if <condition pos:line="127" pos:column="12">(<expr><name pos:line="127" pos:column="13">errno<pos:position pos:line="127" pos:column="18"/></name> <operator pos:line="127" pos:column="19">==<pos:position pos:line="127" pos:column="21"/></operator> <name pos:line="127" pos:column="22">EWOULDBLOCK<pos:position pos:line="127" pos:column="33"/></name> <operator pos:line="127" pos:column="34">||<pos:position pos:line="127" pos:column="36"/></operator> <name pos:line="127" pos:column="37">errno<pos:position pos:line="127" pos:column="42"/></name> <operator pos:line="127" pos:column="43">==<pos:position pos:line="127" pos:column="45"/></operator> <name pos:line="127" pos:column="46">EAGAIN<pos:position pos:line="127" pos:column="52"/></name></expr>)<pos:position pos:line="127" pos:column="53"/></condition><then pos:line="127" pos:column="53"> <block pos:line="127" pos:column="54">{
            <return pos:line="128" pos:column="13">return <expr><name pos:line="128" pos:column="20">APR_EBUSY<pos:position pos:line="128" pos:column="29"/></name></expr>;<pos:position pos:line="128" pos:column="30"/></return>
        }<pos:position pos:line="129" pos:column="10"/></block></then></if>
        <return pos:line="130" pos:column="9">return <expr><name pos:line="130" pos:column="16">errno<pos:position pos:line="130" pos:column="21"/></name></expr>;<pos:position pos:line="130" pos:column="22"/></return>
    }<pos:position pos:line="131" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="132" pos:column="5">mutex<pos:position pos:line="132" pos:column="10"/></name><operator pos:line="132" pos:column="10">-&gt;<pos:position pos:line="132" pos:column="15"/></operator><name pos:line="132" pos:column="12">curr_locked<pos:position pos:line="132" pos:column="23"/></name></name> <operator pos:line="132" pos:column="24">=<pos:position pos:line="132" pos:column="25"/></operator> <literal type="number" pos:line="132" pos:column="26">1<pos:position pos:line="132" pos:column="27"/></literal></expr>;<pos:position pos:line="132" pos:column="28"/></expr_stmt>
    <return pos:line="133" pos:column="5">return <expr><name pos:line="133" pos:column="12">APR_SUCCESS<pos:position pos:line="133" pos:column="23"/></name></expr>;<pos:position pos:line="133" pos:column="24"/></return>
}<pos:position pos:line="134" pos:column="2"/></block></function>

<function><specifier pos:line="136" pos:column="1">static<pos:position pos:line="136" pos:column="7"/></specifier> <type><name pos:line="136" pos:column="8">apr_status_t<pos:position pos:line="136" pos:column="20"/></name></type> <name pos:line="136" pos:column="21">proc_mutex_flock_release<pos:position pos:line="136" pos:column="45"/></name><parameter_list pos:line="136" pos:column="45">(<parameter><decl><type><name pos:line="136" pos:column="46">apr_proc_mutex_t<pos:position pos:line="136" pos:column="62"/></name> <modifier pos:line="136" pos:column="63">*<pos:position pos:line="136" pos:column="64"/></modifier></type><name pos:line="136" pos:column="64">mutex<pos:position pos:line="136" pos:column="69"/></name></decl></parameter>)<pos:position pos:line="136" pos:column="70"/></parameter_list>
<block pos:line="137" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="138" pos:column="5">int<pos:position pos:line="138" pos:column="8"/></name></type> <name pos:line="138" pos:column="9">rc<pos:position pos:line="138" pos:column="11"/></name></decl>;<pos:position pos:line="138" pos:column="12"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="140" pos:column="5">mutex<pos:position pos:line="140" pos:column="10"/></name><operator pos:line="140" pos:column="10">-&gt;<pos:position pos:line="140" pos:column="15"/></operator><name pos:line="140" pos:column="12">curr_locked<pos:position pos:line="140" pos:column="23"/></name></name> <operator pos:line="140" pos:column="24">=<pos:position pos:line="140" pos:column="25"/></operator> <literal type="number" pos:line="140" pos:column="26">0<pos:position pos:line="140" pos:column="27"/></literal></expr>;<pos:position pos:line="140" pos:column="28"/></expr_stmt>
    <do pos:line="141" pos:column="5">do <block pos:line="141" pos:column="8">{
        <expr_stmt><expr><name pos:line="142" pos:column="9">rc<pos:position pos:line="142" pos:column="11"/></name> <operator pos:line="142" pos:column="12">=<pos:position pos:line="142" pos:column="13"/></operator> <call><name pos:line="142" pos:column="14">flock<pos:position pos:line="142" pos:column="19"/></name><argument_list pos:line="142" pos:column="19">(<argument><expr><name><name pos:line="142" pos:column="20">mutex<pos:position pos:line="142" pos:column="25"/></name><operator pos:line="142" pos:column="25">-&gt;<pos:position pos:line="142" pos:column="30"/></operator><name pos:line="142" pos:column="27">interproc<pos:position pos:line="142" pos:column="36"/></name><operator pos:line="142" pos:column="36">-&gt;<pos:position pos:line="142" pos:column="41"/></operator><name pos:line="142" pos:column="38">filedes<pos:position pos:line="142" pos:column="45"/></name></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="47">LOCK_UN<pos:position pos:line="142" pos:column="54"/></name></expr></argument>)<pos:position pos:line="142" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="56"/></expr_stmt>
    }<pos:position pos:line="143" pos:column="6"/></block> while <condition pos:line="143" pos:column="13">(<expr><name pos:line="143" pos:column="14">rc<pos:position pos:line="143" pos:column="16"/></name> <operator pos:line="143" pos:column="17">&lt;<pos:position pos:line="143" pos:column="21"/></operator> <literal type="number" pos:line="143" pos:column="19">0<pos:position pos:line="143" pos:column="20"/></literal> <operator pos:line="143" pos:column="21">&amp;&amp;<pos:position pos:line="143" pos:column="31"/></operator> <name pos:line="143" pos:column="24">errno<pos:position pos:line="143" pos:column="29"/></name> <operator pos:line="143" pos:column="30">==<pos:position pos:line="143" pos:column="32"/></operator> <name pos:line="143" pos:column="33">EINTR<pos:position pos:line="143" pos:column="38"/></name></expr>)<pos:position pos:line="143" pos:column="39"/></condition>;<pos:position pos:line="143" pos:column="40"/></do>
    <if pos:line="144" pos:column="5">if <condition pos:line="144" pos:column="8">(<expr><name pos:line="144" pos:column="9">rc<pos:position pos:line="144" pos:column="11"/></name> <operator pos:line="144" pos:column="12">&lt;<pos:position pos:line="144" pos:column="16"/></operator> <literal type="number" pos:line="144" pos:column="14">0<pos:position pos:line="144" pos:column="15"/></literal></expr>)<pos:position pos:line="144" pos:column="16"/></condition><then pos:line="144" pos:column="16"> <block pos:line="144" pos:column="17">{
        <return pos:line="145" pos:column="9">return <expr><name pos:line="145" pos:column="16">errno<pos:position pos:line="145" pos:column="21"/></name></expr>;<pos:position pos:line="145" pos:column="22"/></return>
    }<pos:position pos:line="146" pos:column="6"/></block></then></if>
    <return pos:line="147" pos:column="5">return <expr><name pos:line="147" pos:column="12">APR_SUCCESS<pos:position pos:line="147" pos:column="23"/></name></expr>;<pos:position pos:line="147" pos:column="24"/></return>
}<pos:position pos:line="148" pos:column="2"/></block></function>

<function><specifier pos:line="150" pos:column="1">static<pos:position pos:line="150" pos:column="7"/></specifier> <type><name pos:line="150" pos:column="8">apr_status_t<pos:position pos:line="150" pos:column="20"/></name></type> <name pos:line="150" pos:column="21">proc_mutex_flock_child_init<pos:position pos:line="150" pos:column="48"/></name><parameter_list pos:line="150" pos:column="48">(<parameter><decl><type><name pos:line="150" pos:column="49">apr_proc_mutex_t<pos:position pos:line="150" pos:column="65"/></name> <modifier pos:line="150" pos:column="66">*<pos:position pos:line="150" pos:column="67"/></modifier><modifier pos:line="150" pos:column="67">*<pos:position pos:line="150" pos:column="68"/></modifier></type><name pos:line="150" pos:column="68">mutex<pos:position pos:line="150" pos:column="73"/></name></decl></parameter>,
                                                <parameter><decl><type><name pos:line="151" pos:column="49">apr_pool_t<pos:position pos:line="151" pos:column="59"/></name> <modifier pos:line="151" pos:column="60">*<pos:position pos:line="151" pos:column="61"/></modifier></type><name pos:line="151" pos:column="61">pool<pos:position pos:line="151" pos:column="65"/></name></decl></parameter>, 
                                                <parameter><decl><type><specifier pos:line="152" pos:column="49">const<pos:position pos:line="152" pos:column="54"/></specifier> <name pos:line="152" pos:column="55">char<pos:position pos:line="152" pos:column="59"/></name> <modifier pos:line="152" pos:column="60">*<pos:position pos:line="152" pos:column="61"/></modifier></type><name pos:line="152" pos:column="61">fname<pos:position pos:line="152" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="152" pos:column="67"/></parameter_list>
<block pos:line="153" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="154" pos:column="5">apr_proc_mutex_t<pos:position pos:line="154" pos:column="21"/></name> <modifier pos:line="154" pos:column="22">*<pos:position pos:line="154" pos:column="23"/></modifier></type><name pos:line="154" pos:column="23">new_mutex<pos:position pos:line="154" pos:column="32"/></name></decl>;<pos:position pos:line="154" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="155" pos:column="5">int<pos:position pos:line="155" pos:column="8"/></name></type> <name pos:line="155" pos:column="9">rv<pos:position pos:line="155" pos:column="11"/></name></decl>;<pos:position pos:line="155" pos:column="12"/></decl_stmt>

    <expr_stmt><expr><name pos:line="157" pos:column="5">new_mutex<pos:position pos:line="157" pos:column="14"/></name> <operator pos:line="157" pos:column="15">=<pos:position pos:line="157" pos:column="16"/></operator> <operator pos:line="157" pos:column="17">(<pos:position pos:line="157" pos:column="18"/></operator><name pos:line="157" pos:column="18">apr_proc_mutex_t<pos:position pos:line="157" pos:column="34"/></name> <operator pos:line="157" pos:column="35">*<pos:position pos:line="157" pos:column="36"/></operator><operator pos:line="157" pos:column="36">)<pos:position pos:line="157" pos:column="37"/></operator><call><name pos:line="157" pos:column="37">apr_palloc<pos:position pos:line="157" pos:column="47"/></name><argument_list pos:line="157" pos:column="47">(<argument><expr><name pos:line="157" pos:column="48">pool<pos:position pos:line="157" pos:column="52"/></name></expr></argument>, <argument><expr><sizeof pos:line="157" pos:column="54">sizeof<argument_list pos:line="157" pos:column="60">(<argument><expr><name pos:line="157" pos:column="61">apr_proc_mutex_t<pos:position pos:line="157" pos:column="77"/></name></expr></argument>)<pos:position pos:line="157" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="157" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="80"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="159" pos:column="5">memcpy<pos:position pos:line="159" pos:column="11"/></name><argument_list pos:line="159" pos:column="11">(<argument><expr><name pos:line="159" pos:column="12">new_mutex<pos:position pos:line="159" pos:column="21"/></name></expr></argument>, <argument><expr><operator pos:line="159" pos:column="23">*<pos:position pos:line="159" pos:column="24"/></operator><name pos:line="159" pos:column="24">mutex<pos:position pos:line="159" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="159" pos:column="31">sizeof <name><pos:position pos:line="159" pos:column="38"/></name></sizeof>*<name pos:line="159" pos:column="39">new_mutex<pos:position pos:line="159" pos:column="48"/></name></expr></argument>)<pos:position pos:line="159" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="159" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="160" pos:column="5">new_mutex<pos:position pos:line="160" pos:column="14"/></name><operator pos:line="160" pos:column="14">-&gt;<pos:position pos:line="160" pos:column="19"/></operator><name pos:line="160" pos:column="16">pool<pos:position pos:line="160" pos:column="20"/></name></name> <operator pos:line="160" pos:column="21">=<pos:position pos:line="160" pos:column="22"/></operator> <name pos:line="160" pos:column="23">pool<pos:position pos:line="160" pos:column="27"/></name></expr>;<pos:position pos:line="160" pos:column="28"/></expr_stmt>
    <if pos:line="161" pos:column="5">if <condition pos:line="161" pos:column="8">(<expr><operator pos:line="161" pos:column="9">!<pos:position pos:line="161" pos:column="10"/></operator><name pos:line="161" pos:column="10">fname<pos:position pos:line="161" pos:column="15"/></name></expr>)<pos:position pos:line="161" pos:column="16"/></condition><then pos:line="161" pos:column="16"> <block pos:line="161" pos:column="17">{
        <expr_stmt><expr><name pos:line="162" pos:column="9">fname<pos:position pos:line="162" pos:column="14"/></name> <operator pos:line="162" pos:column="15">=<pos:position pos:line="162" pos:column="16"/></operator> <name><operator pos:line="162" pos:column="17">(<pos:position pos:line="162" pos:column="18"/></operator><operator pos:line="162" pos:column="18">*<pos:position pos:line="162" pos:column="19"/></operator><name pos:line="162" pos:column="19">mutex<pos:position pos:line="162" pos:column="24"/></name><operator pos:line="162" pos:column="24">)<pos:position pos:line="162" pos:column="25"/></operator><operator pos:line="162" pos:column="25">-&gt;<pos:position pos:line="162" pos:column="30"/></operator><name pos:line="162" pos:column="27">fname<pos:position pos:line="162" pos:column="32"/></name></name></expr>;<pos:position pos:line="162" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="163" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="164" pos:column="5">new_mutex<pos:position pos:line="164" pos:column="14"/></name><operator pos:line="164" pos:column="14">-&gt;<pos:position pos:line="164" pos:column="19"/></operator><name pos:line="164" pos:column="16">fname<pos:position pos:line="164" pos:column="21"/></name></name> <operator pos:line="164" pos:column="22">=<pos:position pos:line="164" pos:column="23"/></operator> <call><name pos:line="164" pos:column="24">apr_pstrdup<pos:position pos:line="164" pos:column="35"/></name><argument_list pos:line="164" pos:column="35">(<argument><expr><name pos:line="164" pos:column="36">pool<pos:position pos:line="164" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="164" pos:column="42">fname<pos:position pos:line="164" pos:column="47"/></name></expr></argument>)<pos:position pos:line="164" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="164" pos:column="49"/></expr_stmt>
    <expr_stmt><expr><name pos:line="165" pos:column="5">rv<pos:position pos:line="165" pos:column="7"/></name> <operator pos:line="165" pos:column="8">=<pos:position pos:line="165" pos:column="9"/></operator> <call><name pos:line="165" pos:column="10">apr_file_open<pos:position pos:line="165" pos:column="23"/></name><argument_list pos:line="165" pos:column="23">(<argument><expr><operator pos:line="165" pos:column="24">&amp;<pos:position pos:line="165" pos:column="29"/></operator><name><name pos:line="165" pos:column="25">new_mutex<pos:position pos:line="165" pos:column="34"/></name><operator pos:line="165" pos:column="34">-&gt;<pos:position pos:line="165" pos:column="39"/></operator><name pos:line="165" pos:column="36">interproc<pos:position pos:line="165" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="165" pos:column="47">new_mutex<pos:position pos:line="165" pos:column="56"/></name><operator pos:line="165" pos:column="56">-&gt;<pos:position pos:line="165" pos:column="61"/></operator><name pos:line="165" pos:column="58">fname<pos:position pos:line="165" pos:column="63"/></name></name></expr></argument>,
                       <argument><expr><name pos:line="166" pos:column="24">APR_FOPEN_WRITE<pos:position pos:line="166" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="166" pos:column="41">0<pos:position pos:line="166" pos:column="42"/></literal></expr></argument>, <argument><expr><name><name pos:line="166" pos:column="44">new_mutex<pos:position pos:line="166" pos:column="53"/></name><operator pos:line="166" pos:column="53">-&gt;<pos:position pos:line="166" pos:column="58"/></operator><name pos:line="166" pos:column="55">pool<pos:position pos:line="166" pos:column="59"/></name></name></expr></argument>)<pos:position pos:line="166" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="61"/></expr_stmt>
    <if pos:line="167" pos:column="5">if <condition pos:line="167" pos:column="8">(<expr><name pos:line="167" pos:column="9">rv<pos:position pos:line="167" pos:column="11"/></name> <operator pos:line="167" pos:column="12">!=<pos:position pos:line="167" pos:column="14"/></operator> <name pos:line="167" pos:column="15">APR_SUCCESS<pos:position pos:line="167" pos:column="26"/></name></expr>)<pos:position pos:line="167" pos:column="27"/></condition><then pos:line="167" pos:column="27"> <block pos:line="167" pos:column="28">{
        <return pos:line="168" pos:column="9">return <expr><name pos:line="168" pos:column="16">rv<pos:position pos:line="168" pos:column="18"/></name></expr>;<pos:position pos:line="168" pos:column="19"/></return>
    }<pos:position pos:line="169" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="170" pos:column="5">*<pos:position pos:line="170" pos:column="6"/></operator><name pos:line="170" pos:column="6">mutex<pos:position pos:line="170" pos:column="11"/></name> <operator pos:line="170" pos:column="12">=<pos:position pos:line="170" pos:column="13"/></operator> <name pos:line="170" pos:column="14">new_mutex<pos:position pos:line="170" pos:column="23"/></name></expr>;<pos:position pos:line="170" pos:column="24"/></expr_stmt>
    <return pos:line="171" pos:column="5">return <expr><name pos:line="171" pos:column="12">APR_SUCCESS<pos:position pos:line="171" pos:column="23"/></name></expr>;<pos:position pos:line="171" pos:column="24"/></return>
}<pos:position pos:line="172" pos:column="2"/></block></function>

<decl_stmt><decl><specifier pos:line="174" pos:column="1">static<pos:position pos:line="174" pos:column="7"/></specifier> <type><specifier pos:line="174" pos:column="8">const<pos:position pos:line="174" pos:column="13"/></specifier> <name pos:line="174" pos:column="14">apr_proc_mutex_unix_lock_methods_t<pos:position pos:line="174" pos:column="48"/></name></type> <name pos:line="174" pos:column="49">mutex_flock_methods<pos:position pos:line="174" pos:column="68"/></name> <init pos:line="174" pos:column="69">=
<expr><block pos:line="175" pos:column="1">{
<cpp:if pos:line="176" pos:column="1">#<cpp:directive pos:line="176" pos:column="2">if<pos:position pos:line="176" pos:column="4"/></cpp:directive> <expr><name pos:line="176" pos:column="5">APR_PROCESS_LOCK_IS_GLOBAL<pos:position pos:line="176" pos:column="31"/></name> <operator pos:line="176" pos:column="32">||<pos:position pos:line="176" pos:column="34"/></operator> <operator pos:line="176" pos:column="35">!<pos:position pos:line="176" pos:column="36"/></operator><name pos:line="176" pos:column="36">APR_HAS_THREADS<pos:position pos:line="176" pos:column="51"/></name> <operator pos:line="176" pos:column="52">||<pos:position pos:line="176" pos:column="54"/></operator> <call><name pos:line="176" pos:column="55">defined<pos:position pos:line="176" pos:column="62"/></name><argument_list pos:line="176" pos:column="62">(<argument><expr><name pos:line="176" pos:column="63">FLOCK_IS_GLOBAL<pos:position pos:line="176" pos:column="78"/></name></expr></argument>)<pos:position pos:line="176" pos:column="79"/></argument_list></call></expr></cpp:if>
    <expr><name pos:line="177" pos:column="5">APR_PROCESS_LOCK_MECH_IS_GLOBAL<pos:position pos:line="177" pos:column="36"/></name></expr>,
<cpp:else pos:line="178" pos:column="1">#<cpp:directive pos:line="178" pos:column="2">else<pos:position pos:line="178" pos:column="6"/></cpp:directive></cpp:else>
    <expr><literal type="number" pos:line="179" pos:column="5">0<pos:position pos:line="179" pos:column="6"/></literal></expr>,
<cpp:endif pos:line="180" pos:column="1">#<cpp:directive pos:line="180" pos:column="2">endif<pos:position pos:line="180" pos:column="7"/></cpp:directive></cpp:endif>
    <expr><name pos:line="181" pos:column="5">proc_mutex_flock_create<pos:position pos:line="181" pos:column="28"/></name></expr>,
    <expr><name pos:line="182" pos:column="5">proc_mutex_flock_acquire<pos:position pos:line="182" pos:column="29"/></name></expr>,
    <expr><name pos:line="183" pos:column="5">proc_mutex_flock_tryacquire<pos:position pos:line="183" pos:column="32"/></name></expr>,
    <expr><name pos:line="184" pos:column="5">proc_mutex_flock_release<pos:position pos:line="184" pos:column="29"/></name></expr>,
    <expr><name pos:line="185" pos:column="5">proc_mutex_flock_cleanup<pos:position pos:line="185" pos:column="29"/></name></expr>,
    <expr><name pos:line="186" pos:column="5">proc_mutex_flock_child_init<pos:position pos:line="186" pos:column="32"/></name></expr>,
    <expr><literal type="string" pos:line="187" pos:column="5">"flock"<pos:position pos:line="187" pos:column="12"/></literal></expr>
}<pos:position pos:line="188" pos:column="2"/></block></expr></init></decl>;<pos:position pos:line="188" pos:column="3"/></decl_stmt>

<cpp:endif pos:line="190" pos:column="1">#<cpp:directive pos:line="190" pos:column="2">endif<pos:position pos:line="190" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="190" pos:column="8">/* flock implementation */</comment>

<function><type><name pos:line="192" pos:column="1">void<pos:position pos:line="192" pos:column="5"/></name></type> <name pos:line="192" pos:column="6">apr_proc_mutex_unix_setup_lock<pos:position pos:line="192" pos:column="36"/></name><parameter_list pos:line="192" pos:column="36">(<parameter><decl><type><name pos:line="192" pos:column="37">void<pos:position pos:line="192" pos:column="41"/></name></type></decl></parameter>)<pos:position pos:line="192" pos:column="42"/></parameter_list>
<block pos:line="193" pos:column="1">{
    <comment type="block" pos:line="194" pos:column="5">/* setup only needed for sysvsem and fnctl */</comment>
<cpp:if pos:line="195" pos:column="1">#<cpp:directive pos:line="195" pos:column="2">if<pos:position pos:line="195" pos:column="4"/></cpp:directive> <expr><name pos:line="195" pos:column="5">APR_HAS_SYSVSEM_SERIALIZE<pos:position pos:line="195" pos:column="30"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="196" pos:column="5">proc_mutex_sysv_setup<pos:position pos:line="196" pos:column="26"/></name><argument_list pos:line="196" pos:column="26">()<pos:position pos:line="196" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="29"/></expr_stmt>
<cpp:endif pos:line="197" pos:column="1">#<cpp:directive pos:line="197" pos:column="2">endif<pos:position pos:line="197" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="198" pos:column="1">#<cpp:directive pos:line="198" pos:column="2">if<pos:position pos:line="198" pos:column="4"/></cpp:directive> <expr><name pos:line="198" pos:column="5">APR_HAS_FCNTL_SERIALIZE<pos:position pos:line="198" pos:column="28"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="199" pos:column="5">proc_mutex_fcntl_setup<pos:position pos:line="199" pos:column="27"/></name><argument_list pos:line="199" pos:column="27">()<pos:position pos:line="199" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="30"/></expr_stmt>
<cpp:endif pos:line="200" pos:column="1">#<cpp:directive pos:line="200" pos:column="2">endif<pos:position pos:line="200" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="201" pos:column="2"/></block></function>

<function><specifier pos:line="203" pos:column="1">static<pos:position pos:line="203" pos:column="7"/></specifier> <type><name pos:line="203" pos:column="8">apr_status_t<pos:position pos:line="203" pos:column="20"/></name></type> <name pos:line="203" pos:column="21">proc_mutex_choose_method<pos:position pos:line="203" pos:column="45"/></name><parameter_list pos:line="203" pos:column="45">(<parameter><decl><type><name pos:line="203" pos:column="46">apr_proc_mutex_t<pos:position pos:line="203" pos:column="62"/></name> <modifier pos:line="203" pos:column="63">*<pos:position pos:line="203" pos:column="64"/></modifier></type><name pos:line="203" pos:column="64">new_mutex<pos:position pos:line="203" pos:column="73"/></name></decl></parameter>, <parameter><decl><type><name pos:line="203" pos:column="75">apr_lockmech_e<pos:position pos:line="203" pos:column="89"/></name></type> <name pos:line="203" pos:column="90">mech<pos:position pos:line="203" pos:column="94"/></name></decl></parameter>)<pos:position pos:line="203" pos:column="95"/></parameter_list>
<block pos:line="204" pos:column="1">{
    <switch pos:line="205" pos:column="5">switch <condition pos:line="205" pos:column="12">(<expr><name pos:line="205" pos:column="13">mech<pos:position pos:line="205" pos:column="17"/></name></expr>)<pos:position pos:line="205" pos:column="18"/></condition> <block pos:line="205" pos:column="19">{
    <case pos:line="206" pos:column="5">case <expr><name pos:line="206" pos:column="10">APR_LOCK_FCNTL<pos:position pos:line="206" pos:column="24"/></name></expr>:<pos:position pos:line="206" pos:column="25"/></case>
<cpp:if pos:line="207" pos:column="1">#<cpp:directive pos:line="207" pos:column="2">if<pos:position pos:line="207" pos:column="4"/></cpp:directive> <expr><name pos:line="207" pos:column="5">APR_HAS_FCNTL_SERIALIZE<pos:position pos:line="207" pos:column="28"/></name></expr></cpp:if>
        <expr_stmt><expr><name><name pos:line="208" pos:column="9">new_mutex<pos:position pos:line="208" pos:column="18"/></name><operator pos:line="208" pos:column="18">-&gt;<pos:position pos:line="208" pos:column="23"/></operator><name pos:line="208" pos:column="20">inter_meth<pos:position pos:line="208" pos:column="30"/></name></name> <operator pos:line="208" pos:column="31">=<pos:position pos:line="208" pos:column="32"/></operator> <operator pos:line="208" pos:column="33">&amp;<pos:position pos:line="208" pos:column="38"/></operator><name pos:line="208" pos:column="34">mutex_fcntl_methods<pos:position pos:line="208" pos:column="53"/></name></expr>;<pos:position pos:line="208" pos:column="54"/></expr_stmt>
<cpp:else pos:line="209" pos:column="1">#<cpp:directive pos:line="209" pos:column="2">else<pos:position pos:line="209" pos:column="6"/></cpp:directive></cpp:else>
        <return pos:line="210" pos:column="9">return <expr><name pos:line="210" pos:column="16">APR_ENOTIMPL<pos:position pos:line="210" pos:column="28"/></name></expr>;<pos:position pos:line="210" pos:column="29"/></return>
<cpp:endif pos:line="211" pos:column="1">#<cpp:directive pos:line="211" pos:column="2">endif<pos:position pos:line="211" pos:column="7"/></cpp:directive></cpp:endif>
        <break pos:line="212" pos:column="9">break;<pos:position pos:line="212" pos:column="15"/></break>
    <case pos:line="213" pos:column="5">case <expr><name pos:line="213" pos:column="10">APR_LOCK_FLOCK<pos:position pos:line="213" pos:column="24"/></name></expr>:<pos:position pos:line="213" pos:column="25"/></case>
<cpp:if pos:line="214" pos:column="1">#<cpp:directive pos:line="214" pos:column="2">if<pos:position pos:line="214" pos:column="4"/></cpp:directive> <expr><name pos:line="214" pos:column="5">APR_HAS_FLOCK_SERIALIZE<pos:position pos:line="214" pos:column="28"/></name></expr></cpp:if>
        <expr_stmt><expr><name><name pos:line="215" pos:column="9">new_mutex<pos:position pos:line="215" pos:column="18"/></name><operator pos:line="215" pos:column="18">-&gt;<pos:position pos:line="215" pos:column="23"/></operator><name pos:line="215" pos:column="20">inter_meth<pos:position pos:line="215" pos:column="30"/></name></name> <operator pos:line="215" pos:column="31">=<pos:position pos:line="215" pos:column="32"/></operator> <operator pos:line="215" pos:column="33">&amp;<pos:position pos:line="215" pos:column="38"/></operator><name pos:line="215" pos:column="34">mutex_flock_methods<pos:position pos:line="215" pos:column="53"/></name></expr>;<pos:position pos:line="215" pos:column="54"/></expr_stmt>
<cpp:else pos:line="216" pos:column="1">#<cpp:directive pos:line="216" pos:column="2">else<pos:position pos:line="216" pos:column="6"/></cpp:directive></cpp:else>
        <return pos:line="217" pos:column="9">return <expr><name pos:line="217" pos:column="16">APR_ENOTIMPL<pos:position pos:line="217" pos:column="28"/></name></expr>;<pos:position pos:line="217" pos:column="29"/></return>
<cpp:endif pos:line="218" pos:column="1">#<cpp:directive pos:line="218" pos:column="2">endif<pos:position pos:line="218" pos:column="7"/></cpp:directive></cpp:endif>
        <break pos:line="219" pos:column="9">break;<pos:position pos:line="219" pos:column="15"/></break>
    <case pos:line="220" pos:column="5">case <expr><name pos:line="220" pos:column="10">APR_LOCK_SYSVSEM<pos:position pos:line="220" pos:column="26"/></name></expr>:<pos:position pos:line="220" pos:column="27"/></case>
<cpp:if pos:line="221" pos:column="1">#<cpp:directive pos:line="221" pos:column="2">if<pos:position pos:line="221" pos:column="4"/></cpp:directive> <expr><name pos:line="221" pos:column="5">APR_HAS_SYSVSEM_SERIALIZE<pos:position pos:line="221" pos:column="30"/></name></expr></cpp:if>
        <expr_stmt><expr><name><name pos:line="222" pos:column="9">new_mutex<pos:position pos:line="222" pos:column="18"/></name><operator pos:line="222" pos:column="18">-&gt;<pos:position pos:line="222" pos:column="23"/></operator><name pos:line="222" pos:column="20">inter_meth<pos:position pos:line="222" pos:column="30"/></name></name> <operator pos:line="222" pos:column="31">=<pos:position pos:line="222" pos:column="32"/></operator> <operator pos:line="222" pos:column="33">&amp;<pos:position pos:line="222" pos:column="38"/></operator><name pos:line="222" pos:column="34">mutex_sysv_methods<pos:position pos:line="222" pos:column="52"/></name></expr>;<pos:position pos:line="222" pos:column="53"/></expr_stmt>
<cpp:else pos:line="223" pos:column="1">#<cpp:directive pos:line="223" pos:column="2">else<pos:position pos:line="223" pos:column="6"/></cpp:directive></cpp:else>
        <return pos:line="224" pos:column="9">return <expr><name pos:line="224" pos:column="16">APR_ENOTIMPL<pos:position pos:line="224" pos:column="28"/></name></expr>;<pos:position pos:line="224" pos:column="29"/></return>
<cpp:endif pos:line="225" pos:column="1">#<cpp:directive pos:line="225" pos:column="2">endif<pos:position pos:line="225" pos:column="7"/></cpp:directive></cpp:endif>
        <break pos:line="226" pos:column="9">break;<pos:position pos:line="226" pos:column="15"/></break>
    <case pos:line="227" pos:column="5">case <expr><name pos:line="227" pos:column="10">APR_LOCK_POSIXSEM<pos:position pos:line="227" pos:column="27"/></name></expr>:<pos:position pos:line="227" pos:column="28"/></case>
<cpp:if pos:line="228" pos:column="1">#<cpp:directive pos:line="228" pos:column="2">if<pos:position pos:line="228" pos:column="4"/></cpp:directive> <expr><name pos:line="228" pos:column="5">APR_HAS_POSIXSEM_SERIALIZE<pos:position pos:line="228" pos:column="31"/></name></expr></cpp:if>
        <expr_stmt><expr><name><name pos:line="229" pos:column="9">new_mutex<pos:position pos:line="229" pos:column="18"/></name><operator pos:line="229" pos:column="18">-&gt;<pos:position pos:line="229" pos:column="23"/></operator><name pos:line="229" pos:column="20">inter_meth<pos:position pos:line="229" pos:column="30"/></name></name> <operator pos:line="229" pos:column="31">=<pos:position pos:line="229" pos:column="32"/></operator> <operator pos:line="229" pos:column="33">&amp;<pos:position pos:line="229" pos:column="38"/></operator><name pos:line="229" pos:column="34">mutex_posixsem_methods<pos:position pos:line="229" pos:column="56"/></name></expr>;<pos:position pos:line="229" pos:column="57"/></expr_stmt>
<cpp:else pos:line="230" pos:column="1">#<cpp:directive pos:line="230" pos:column="2">else<pos:position pos:line="230" pos:column="6"/></cpp:directive></cpp:else>
        <return pos:line="231" pos:column="9">return <expr><name pos:line="231" pos:column="16">APR_ENOTIMPL<pos:position pos:line="231" pos:column="28"/></name></expr>;<pos:position pos:line="231" pos:column="29"/></return>
<cpp:endif pos:line="232" pos:column="1">#<cpp:directive pos:line="232" pos:column="2">endif<pos:position pos:line="232" pos:column="7"/></cpp:directive></cpp:endif>
        <break pos:line="233" pos:column="9">break;<pos:position pos:line="233" pos:column="15"/></break>
    <case pos:line="234" pos:column="5">case <expr><name pos:line="234" pos:column="10">APR_LOCK_PROC_PTHREAD<pos:position pos:line="234" pos:column="31"/></name></expr>:<pos:position pos:line="234" pos:column="32"/></case>
<cpp:if pos:line="235" pos:column="1">#<cpp:directive pos:line="235" pos:column="2">if<pos:position pos:line="235" pos:column="4"/></cpp:directive> <expr><name pos:line="235" pos:column="5">APR_HAS_PROC_PTHREAD_SERIALIZE<pos:position pos:line="235" pos:column="35"/></name></expr></cpp:if>
        <expr_stmt><expr><name><name pos:line="236" pos:column="9">new_mutex<pos:position pos:line="236" pos:column="18"/></name><operator pos:line="236" pos:column="18">-&gt;<pos:position pos:line="236" pos:column="23"/></operator><name pos:line="236" pos:column="20">inter_meth<pos:position pos:line="236" pos:column="30"/></name></name> <operator pos:line="236" pos:column="31">=<pos:position pos:line="236" pos:column="32"/></operator> <operator pos:line="236" pos:column="33">&amp;<pos:position pos:line="236" pos:column="38"/></operator><name pos:line="236" pos:column="34">mutex_proc_pthread_methods<pos:position pos:line="236" pos:column="60"/></name></expr>;<pos:position pos:line="236" pos:column="61"/></expr_stmt>
<cpp:else pos:line="237" pos:column="1">#<cpp:directive pos:line="237" pos:column="2">else<pos:position pos:line="237" pos:column="6"/></cpp:directive></cpp:else>
        <return pos:line="238" pos:column="9">return <expr><name pos:line="238" pos:column="16">APR_ENOTIMPL<pos:position pos:line="238" pos:column="28"/></name></expr>;<pos:position pos:line="238" pos:column="29"/></return>
<cpp:endif pos:line="239" pos:column="1">#<cpp:directive pos:line="239" pos:column="2">endif<pos:position pos:line="239" pos:column="7"/></cpp:directive></cpp:endif>
        <break pos:line="240" pos:column="9">break;<pos:position pos:line="240" pos:column="15"/></break>
    <case pos:line="241" pos:column="5">case <expr><name pos:line="241" pos:column="10">APR_LOCK_DEFAULT<pos:position pos:line="241" pos:column="26"/></name></expr>:<pos:position pos:line="241" pos:column="27"/></case>
<cpp:if pos:line="242" pos:column="1">#<cpp:directive pos:line="242" pos:column="2">if<pos:position pos:line="242" pos:column="4"/></cpp:directive> <expr><name pos:line="242" pos:column="5">APR_USE_FLOCK_SERIALIZE<pos:position pos:line="242" pos:column="28"/></name></expr></cpp:if>
        <expr_stmt><expr><name><name pos:line="243" pos:column="9">new_mutex<pos:position pos:line="243" pos:column="18"/></name><operator pos:line="243" pos:column="18">-&gt;<pos:position pos:line="243" pos:column="23"/></operator><name pos:line="243" pos:column="20">inter_meth<pos:position pos:line="243" pos:column="30"/></name></name> <operator pos:line="243" pos:column="31">=<pos:position pos:line="243" pos:column="32"/></operator> <operator pos:line="243" pos:column="33">&amp;<pos:position pos:line="243" pos:column="38"/></operator><name pos:line="243" pos:column="34">mutex_flock_methods<pos:position pos:line="243" pos:column="53"/></name></expr>;<pos:position pos:line="243" pos:column="54"/></expr_stmt>
<cpp:elif pos:line="244" pos:column="1">#<cpp:directive pos:line="244" pos:column="2">elif<pos:position pos:line="244" pos:column="6"/></cpp:directive> <expr><name pos:line="244" pos:column="7">APR_USE_SYSVSEM_SERIALIZE<pos:position pos:line="244" pos:column="32"/></name></expr></cpp:elif>
        <expr_stmt><expr><name><name pos:line="245" pos:column="9">new_mutex<pos:position pos:line="245" pos:column="18"/></name><operator pos:line="245" pos:column="18">-&gt;<pos:position pos:line="245" pos:column="23"/></operator><name pos:line="245" pos:column="20">inter_meth<pos:position pos:line="245" pos:column="30"/></name></name> <operator pos:line="245" pos:column="31">=<pos:position pos:line="245" pos:column="32"/></operator> <operator pos:line="245" pos:column="33">&amp;<pos:position pos:line="245" pos:column="38"/></operator><name pos:line="245" pos:column="34">mutex_sysv_methods<pos:position pos:line="245" pos:column="52"/></name></expr>;<pos:position pos:line="245" pos:column="53"/></expr_stmt>
<cpp:elif pos:line="246" pos:column="1">#<cpp:directive pos:line="246" pos:column="2">elif<pos:position pos:line="246" pos:column="6"/></cpp:directive> <expr><name pos:line="246" pos:column="7">APR_USE_FCNTL_SERIALIZE<pos:position pos:line="246" pos:column="30"/></name></expr></cpp:elif>
        <expr_stmt><expr><name><name pos:line="247" pos:column="9">new_mutex<pos:position pos:line="247" pos:column="18"/></name><operator pos:line="247" pos:column="18">-&gt;<pos:position pos:line="247" pos:column="23"/></operator><name pos:line="247" pos:column="20">inter_meth<pos:position pos:line="247" pos:column="30"/></name></name> <operator pos:line="247" pos:column="31">=<pos:position pos:line="247" pos:column="32"/></operator> <operator pos:line="247" pos:column="33">&amp;<pos:position pos:line="247" pos:column="38"/></operator><name pos:line="247" pos:column="34">mutex_fcntl_methods<pos:position pos:line="247" pos:column="53"/></name></expr>;<pos:position pos:line="247" pos:column="54"/></expr_stmt>
<cpp:elif pos:line="248" pos:column="1">#<cpp:directive pos:line="248" pos:column="2">elif<pos:position pos:line="248" pos:column="6"/></cpp:directive> <expr><name pos:line="248" pos:column="7">APR_USE_PROC_PTHREAD_SERIALIZE<pos:position pos:line="248" pos:column="37"/></name></expr></cpp:elif>
        <expr_stmt><expr><name><name pos:line="249" pos:column="9">new_mutex<pos:position pos:line="249" pos:column="18"/></name><operator pos:line="249" pos:column="18">-&gt;<pos:position pos:line="249" pos:column="23"/></operator><name pos:line="249" pos:column="20">inter_meth<pos:position pos:line="249" pos:column="30"/></name></name> <operator pos:line="249" pos:column="31">=<pos:position pos:line="249" pos:column="32"/></operator> <operator pos:line="249" pos:column="33">&amp;<pos:position pos:line="249" pos:column="38"/></operator><name pos:line="249" pos:column="34">mutex_proc_pthread_methods<pos:position pos:line="249" pos:column="60"/></name></expr>;<pos:position pos:line="249" pos:column="61"/></expr_stmt>
<cpp:elif pos:line="250" pos:column="1">#<cpp:directive pos:line="250" pos:column="2">elif<pos:position pos:line="250" pos:column="6"/></cpp:directive> <expr><name pos:line="250" pos:column="7">APR_USE_POSIXSEM_SERIALIZE<pos:position pos:line="250" pos:column="33"/></name></expr></cpp:elif>
        <expr_stmt><expr><name><name pos:line="251" pos:column="9">new_mutex<pos:position pos:line="251" pos:column="18"/></name><operator pos:line="251" pos:column="18">-&gt;<pos:position pos:line="251" pos:column="23"/></operator><name pos:line="251" pos:column="20">inter_meth<pos:position pos:line="251" pos:column="30"/></name></name> <operator pos:line="251" pos:column="31">=<pos:position pos:line="251" pos:column="32"/></operator> <operator pos:line="251" pos:column="33">&amp;<pos:position pos:line="251" pos:column="38"/></operator><name pos:line="251" pos:column="34">mutex_posixsem_methods<pos:position pos:line="251" pos:column="56"/></name></expr>;<pos:position pos:line="251" pos:column="57"/></expr_stmt>
<cpp:else pos:line="252" pos:column="1">#<cpp:directive pos:line="252" pos:column="2">else<pos:position pos:line="252" pos:column="6"/></cpp:directive></cpp:else>
        <return pos:line="253" pos:column="9">return <expr><name pos:line="253" pos:column="16">APR_ENOTIMPL<pos:position pos:line="253" pos:column="28"/></name></expr>;<pos:position pos:line="253" pos:column="29"/></return>
<cpp:endif pos:line="254" pos:column="1">#<cpp:directive pos:line="254" pos:column="2">endif<pos:position pos:line="254" pos:column="7"/></cpp:directive></cpp:endif>
        <break pos:line="255" pos:column="9">break;<pos:position pos:line="255" pos:column="15"/></break>
    <default pos:line="256" pos:column="5">default:<pos:position pos:line="256" pos:column="13"/></default>
        <return pos:line="257" pos:column="9">return <expr><name pos:line="257" pos:column="16">APR_ENOTIMPL<pos:position pos:line="257" pos:column="28"/></name></expr>;<pos:position pos:line="257" pos:column="29"/></return>
    }<pos:position pos:line="258" pos:column="6"/></block></switch>
    <return pos:line="259" pos:column="5">return <expr><name pos:line="259" pos:column="12">APR_SUCCESS<pos:position pos:line="259" pos:column="23"/></name></expr>;<pos:position pos:line="259" pos:column="24"/></return>
}<pos:position pos:line="260" pos:column="2"/></block></function>

<macro><name pos:line="262" pos:column="1">APR_DECLARE<pos:position pos:line="262" pos:column="12"/></name><argument_list pos:line="262" pos:column="12">(<argument pos:line="262" pos:column="13">const char *<pos:position pos:line="262" pos:column="25"/></argument>)<pos:position pos:line="262" pos:column="26"/></argument_list></macro> <macro><name pos:line="262" pos:column="27">apr_proc_mutex_defname<pos:position pos:line="262" pos:column="49"/></name><argument_list pos:line="262" pos:column="49">(<argument pos:line="262" pos:column="50">void<pos:position pos:line="262" pos:column="54"/></argument>)<pos:position pos:line="262" pos:column="55"/></argument_list></macro>
<block pos:line="263" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="264" pos:column="5">apr_status_t<pos:position pos:line="264" pos:column="17"/></name></type> <name pos:line="264" pos:column="18">rv<pos:position pos:line="264" pos:column="20"/></name></decl>;<pos:position pos:line="264" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="265" pos:column="5">apr_proc_mutex_t<pos:position pos:line="265" pos:column="21"/></name></type> <name pos:line="265" pos:column="22">mutex<pos:position pos:line="265" pos:column="27"/></name></decl>;<pos:position pos:line="265" pos:column="28"/></decl_stmt>

    <if pos:line="267" pos:column="5">if <condition pos:line="267" pos:column="8">(<expr><operator pos:line="267" pos:column="9">(<pos:position pos:line="267" pos:column="10"/></operator><name pos:line="267" pos:column="10">rv<pos:position pos:line="267" pos:column="12"/></name> <operator pos:line="267" pos:column="13">=<pos:position pos:line="267" pos:column="14"/></operator> <call><name pos:line="267" pos:column="15">proc_mutex_choose_method<pos:position pos:line="267" pos:column="39"/></name><argument_list pos:line="267" pos:column="39">(<argument><expr><operator pos:line="267" pos:column="40">&amp;<pos:position pos:line="267" pos:column="45"/></operator><name pos:line="267" pos:column="41">mutex<pos:position pos:line="267" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="267" pos:column="48">APR_LOCK_DEFAULT<pos:position pos:line="267" pos:column="64"/></name></expr></argument>)<pos:position pos:line="267" pos:column="65"/></argument_list></call><operator pos:line="267" pos:column="65">)<pos:position pos:line="267" pos:column="66"/></operator> <operator pos:line="267" pos:column="67">!=<pos:position pos:line="267" pos:column="69"/></operator> <name pos:line="267" pos:column="70">APR_SUCCESS<pos:position pos:line="267" pos:column="81"/></name></expr>)<pos:position pos:line="267" pos:column="82"/></condition><then pos:line="267" pos:column="82"> <block pos:line="267" pos:column="83">{
        <return pos:line="268" pos:column="9">return <expr><literal type="string" pos:line="268" pos:column="16">"unknown"<pos:position pos:line="268" pos:column="25"/></literal></expr>;<pos:position pos:line="268" pos:column="26"/></return>
    }<pos:position pos:line="269" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="270" pos:column="5">mutex<pos:position pos:line="270" pos:column="10"/></name><operator pos:line="270" pos:column="10">.<pos:position pos:line="270" pos:column="11"/></operator><name pos:line="270" pos:column="11">meth<pos:position pos:line="270" pos:column="15"/></name></name> <operator pos:line="270" pos:column="16">=<pos:position pos:line="270" pos:column="17"/></operator> <name><name pos:line="270" pos:column="18">mutex<pos:position pos:line="270" pos:column="23"/></name><operator pos:line="270" pos:column="23">.<pos:position pos:line="270" pos:column="24"/></operator><name pos:line="270" pos:column="24">inter_meth<pos:position pos:line="270" pos:column="34"/></name></name></expr>;<pos:position pos:line="270" pos:column="35"/></expr_stmt>

    <return pos:line="272" pos:column="5">return <expr><call><name pos:line="272" pos:column="12">apr_proc_mutex_name<pos:position pos:line="272" pos:column="31"/></name><argument_list pos:line="272" pos:column="31">(<argument><expr><operator pos:line="272" pos:column="32">&amp;<pos:position pos:line="272" pos:column="37"/></operator><name pos:line="272" pos:column="33">mutex<pos:position pos:line="272" pos:column="38"/></name></expr></argument>)<pos:position pos:line="272" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="272" pos:column="40"/></return>
}<pos:position pos:line="273" pos:column="2"/></block>
   
<function><specifier pos:line="275" pos:column="1">static<pos:position pos:line="275" pos:column="7"/></specifier> <type><name pos:line="275" pos:column="8">apr_status_t<pos:position pos:line="275" pos:column="20"/></name></type> <name pos:line="275" pos:column="21">proc_mutex_create<pos:position pos:line="275" pos:column="38"/></name><parameter_list pos:line="275" pos:column="38">(<parameter><decl><type><name pos:line="275" pos:column="39">apr_proc_mutex_t<pos:position pos:line="275" pos:column="55"/></name> <modifier pos:line="275" pos:column="56">*<pos:position pos:line="275" pos:column="57"/></modifier></type><name pos:line="275" pos:column="57">new_mutex<pos:position pos:line="275" pos:column="66"/></name></decl></parameter>, <parameter><decl><type><name pos:line="275" pos:column="68">apr_lockmech_e<pos:position pos:line="275" pos:column="82"/></name></type> <name pos:line="275" pos:column="83">mech<pos:position pos:line="275" pos:column="87"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="275" pos:column="89">const<pos:position pos:line="275" pos:column="94"/></specifier> <name pos:line="275" pos:column="95">char<pos:position pos:line="275" pos:column="99"/></name> <modifier pos:line="275" pos:column="100">*<pos:position pos:line="275" pos:column="101"/></modifier></type><name pos:line="275" pos:column="101">fname<pos:position pos:line="275" pos:column="106"/></name></decl></parameter>)<pos:position pos:line="275" pos:column="107"/></parameter_list>
<block pos:line="276" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="277" pos:column="5">apr_status_t<pos:position pos:line="277" pos:column="17"/></name></type> <name pos:line="277" pos:column="18">rv<pos:position pos:line="277" pos:column="20"/></name></decl>;<pos:position pos:line="277" pos:column="21"/></decl_stmt>

    <if pos:line="279" pos:column="5">if <condition pos:line="279" pos:column="8">(<expr><operator pos:line="279" pos:column="9">(<pos:position pos:line="279" pos:column="10"/></operator><name pos:line="279" pos:column="10">rv<pos:position pos:line="279" pos:column="12"/></name> <operator pos:line="279" pos:column="13">=<pos:position pos:line="279" pos:column="14"/></operator> <call><name pos:line="279" pos:column="15">proc_mutex_choose_method<pos:position pos:line="279" pos:column="39"/></name><argument_list pos:line="279" pos:column="39">(<argument><expr><name pos:line="279" pos:column="40">new_mutex<pos:position pos:line="279" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="279" pos:column="51">mech<pos:position pos:line="279" pos:column="55"/></name></expr></argument>)<pos:position pos:line="279" pos:column="56"/></argument_list></call><operator pos:line="279" pos:column="56">)<pos:position pos:line="279" pos:column="57"/></operator> <operator pos:line="279" pos:column="58">!=<pos:position pos:line="279" pos:column="60"/></operator> <name pos:line="279" pos:column="61">APR_SUCCESS<pos:position pos:line="279" pos:column="72"/></name></expr>)<pos:position pos:line="279" pos:column="73"/></condition><then pos:line="279" pos:column="73"> <block pos:line="279" pos:column="74">{
        <return pos:line="280" pos:column="9">return <expr><name pos:line="280" pos:column="16">rv<pos:position pos:line="280" pos:column="18"/></name></expr>;<pos:position pos:line="280" pos:column="19"/></return>
    }<pos:position pos:line="281" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="283" pos:column="5">new_mutex<pos:position pos:line="283" pos:column="14"/></name><operator pos:line="283" pos:column="14">-&gt;<pos:position pos:line="283" pos:column="19"/></operator><name pos:line="283" pos:column="16">meth<pos:position pos:line="283" pos:column="20"/></name></name> <operator pos:line="283" pos:column="21">=<pos:position pos:line="283" pos:column="22"/></operator> <name><name pos:line="283" pos:column="23">new_mutex<pos:position pos:line="283" pos:column="32"/></name><operator pos:line="283" pos:column="32">-&gt;<pos:position pos:line="283" pos:column="37"/></operator><name pos:line="283" pos:column="34">inter_meth<pos:position pos:line="283" pos:column="44"/></name></name></expr>;<pos:position pos:line="283" pos:column="45"/></expr_stmt>

    <if pos:line="285" pos:column="5">if <condition pos:line="285" pos:column="8">(<expr><operator pos:line="285" pos:column="9">(<pos:position pos:line="285" pos:column="10"/></operator><name pos:line="285" pos:column="10">rv<pos:position pos:line="285" pos:column="12"/></name> <operator pos:line="285" pos:column="13">=<pos:position pos:line="285" pos:column="14"/></operator> <call><name><name pos:line="285" pos:column="15">new_mutex<pos:position pos:line="285" pos:column="24"/></name><operator pos:line="285" pos:column="24">-&gt;<pos:position pos:line="285" pos:column="29"/></operator><name pos:line="285" pos:column="26">meth<pos:position pos:line="285" pos:column="30"/></name><operator pos:line="285" pos:column="30">-&gt;<pos:position pos:line="285" pos:column="35"/></operator><name pos:line="285" pos:column="32">create<pos:position pos:line="285" pos:column="38"/></name></name><argument_list pos:line="285" pos:column="38">(<argument><expr><name pos:line="285" pos:column="39">new_mutex<pos:position pos:line="285" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="285" pos:column="50">fname<pos:position pos:line="285" pos:column="55"/></name></expr></argument>)<pos:position pos:line="285" pos:column="56"/></argument_list></call><operator pos:line="285" pos:column="56">)<pos:position pos:line="285" pos:column="57"/></operator> <operator pos:line="285" pos:column="58">!=<pos:position pos:line="285" pos:column="60"/></operator> <name pos:line="285" pos:column="61">APR_SUCCESS<pos:position pos:line="285" pos:column="72"/></name></expr>)<pos:position pos:line="285" pos:column="73"/></condition><then pos:line="285" pos:column="73"> <block pos:line="285" pos:column="74">{
        <return pos:line="286" pos:column="9">return <expr><name pos:line="286" pos:column="16">rv<pos:position pos:line="286" pos:column="18"/></name></expr>;<pos:position pos:line="286" pos:column="19"/></return>
    }<pos:position pos:line="287" pos:column="6"/></block></then></if>

    <return pos:line="289" pos:column="5">return <expr><name pos:line="289" pos:column="12">APR_SUCCESS<pos:position pos:line="289" pos:column="23"/></name></expr>;<pos:position pos:line="289" pos:column="24"/></return>
}<pos:position pos:line="290" pos:column="2"/></block></function>

<macro><name pos:line="292" pos:column="1">APR_DECLARE<pos:position pos:line="292" pos:column="12"/></name><argument_list pos:line="292" pos:column="12">(<argument pos:line="292" pos:column="13">apr_status_t<pos:position pos:line="292" pos:column="25"/></argument>)<pos:position pos:line="292" pos:column="26"/></argument_list></macro> <macro><name pos:line="292" pos:column="27">apr_proc_mutex_create<pos:position pos:line="292" pos:column="48"/></name><argument_list pos:line="292" pos:column="48">(<argument pos:line="292" pos:column="49">apr_proc_mutex_t **mutex<pos:position pos:line="292" pos:column="73"/></argument>,
                                                <argument pos:line="293" pos:column="49">const char *fname<pos:position pos:line="293" pos:column="66"/></argument>,
                                                <argument pos:line="294" pos:column="49">apr_lockmech_e mech<pos:position pos:line="294" pos:column="68"/></argument>,
                                                <argument pos:line="295" pos:column="49">apr_pool_t *pool<pos:position pos:line="295" pos:column="65"/></argument>)<pos:position pos:line="295" pos:column="66"/></argument_list></macro>
<block pos:line="296" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="297" pos:column="5">apr_proc_mutex_t<pos:position pos:line="297" pos:column="21"/></name> <modifier pos:line="297" pos:column="22">*<pos:position pos:line="297" pos:column="23"/></modifier></type><name pos:line="297" pos:column="23">new_mutex<pos:position pos:line="297" pos:column="32"/></name></decl>;<pos:position pos:line="297" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="298" pos:column="5">apr_status_t<pos:position pos:line="298" pos:column="17"/></name></type> <name pos:line="298" pos:column="18">rv<pos:position pos:line="298" pos:column="20"/></name></decl>;<pos:position pos:line="298" pos:column="21"/></decl_stmt>

    <expr_stmt><expr><name pos:line="300" pos:column="5">new_mutex<pos:position pos:line="300" pos:column="14"/></name> <operator pos:line="300" pos:column="15">=<pos:position pos:line="300" pos:column="16"/></operator> <call><name pos:line="300" pos:column="17">apr_pcalloc<pos:position pos:line="300" pos:column="28"/></name><argument_list pos:line="300" pos:column="28">(<argument><expr><name pos:line="300" pos:column="29">pool<pos:position pos:line="300" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="300" pos:column="35">sizeof<argument_list pos:line="300" pos:column="41">(<argument><expr><name pos:line="300" pos:column="42">apr_proc_mutex_t<pos:position pos:line="300" pos:column="58"/></name></expr></argument>)<pos:position pos:line="300" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="300" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="300" pos:column="61"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="301" pos:column="5">new_mutex<pos:position pos:line="301" pos:column="14"/></name><operator pos:line="301" pos:column="14">-&gt;<pos:position pos:line="301" pos:column="19"/></operator><name pos:line="301" pos:column="16">pool<pos:position pos:line="301" pos:column="20"/></name></name> <operator pos:line="301" pos:column="21">=<pos:position pos:line="301" pos:column="22"/></operator> <name pos:line="301" pos:column="23">pool<pos:position pos:line="301" pos:column="27"/></name></expr>;<pos:position pos:line="301" pos:column="28"/></expr_stmt>

    <if pos:line="303" pos:column="5">if <condition pos:line="303" pos:column="8">(<expr><operator pos:line="303" pos:column="9">(<pos:position pos:line="303" pos:column="10"/></operator><name pos:line="303" pos:column="10">rv<pos:position pos:line="303" pos:column="12"/></name> <operator pos:line="303" pos:column="13">=<pos:position pos:line="303" pos:column="14"/></operator> <call><name pos:line="303" pos:column="15">proc_mutex_create<pos:position pos:line="303" pos:column="32"/></name><argument_list pos:line="303" pos:column="32">(<argument><expr><name pos:line="303" pos:column="33">new_mutex<pos:position pos:line="303" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="303" pos:column="44">mech<pos:position pos:line="303" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="303" pos:column="50">fname<pos:position pos:line="303" pos:column="55"/></name></expr></argument>)<pos:position pos:line="303" pos:column="56"/></argument_list></call><operator pos:line="303" pos:column="56">)<pos:position pos:line="303" pos:column="57"/></operator> <operator pos:line="303" pos:column="58">!=<pos:position pos:line="303" pos:column="60"/></operator> <name pos:line="303" pos:column="61">APR_SUCCESS<pos:position pos:line="303" pos:column="72"/></name></expr>)<pos:position pos:line="303" pos:column="73"/></condition><then pos:line="303" pos:column="73">
        <block type="pseudo"><return pos:line="304" pos:column="9">return <expr><name pos:line="304" pos:column="16">rv<pos:position pos:line="304" pos:column="18"/></name></expr>;<pos:position pos:line="304" pos:column="19"/></return></block></then></if>

    <expr_stmt><expr><operator pos:line="306" pos:column="5">*<pos:position pos:line="306" pos:column="6"/></operator><name pos:line="306" pos:column="6">mutex<pos:position pos:line="306" pos:column="11"/></name> <operator pos:line="306" pos:column="12">=<pos:position pos:line="306" pos:column="13"/></operator> <name pos:line="306" pos:column="14">new_mutex<pos:position pos:line="306" pos:column="23"/></name></expr>;<pos:position pos:line="306" pos:column="24"/></expr_stmt>
    <return pos:line="307" pos:column="5">return <expr><name pos:line="307" pos:column="12">APR_SUCCESS<pos:position pos:line="307" pos:column="23"/></name></expr>;<pos:position pos:line="307" pos:column="24"/></return>
}<pos:position pos:line="308" pos:column="2"/></block>

<macro><name pos:line="310" pos:column="1">APR_DECLARE<pos:position pos:line="310" pos:column="12"/></name><argument_list pos:line="310" pos:column="12">(<argument pos:line="310" pos:column="13">apr_status_t<pos:position pos:line="310" pos:column="25"/></argument>)<pos:position pos:line="310" pos:column="26"/></argument_list></macro> <macro><name pos:line="310" pos:column="27">apr_proc_mutex_child_init<pos:position pos:line="310" pos:column="52"/></name><argument_list pos:line="310" pos:column="52">(<argument pos:line="310" pos:column="53">apr_proc_mutex_t **mutex<pos:position pos:line="310" pos:column="77"/></argument>,
                                                    <argument pos:line="311" pos:column="53">const char *fname<pos:position pos:line="311" pos:column="70"/></argument>,
                                                    <argument pos:line="312" pos:column="53">apr_pool_t *pool<pos:position pos:line="312" pos:column="69"/></argument>)<pos:position pos:line="312" pos:column="70"/></argument_list></macro>
<block pos:line="313" pos:column="1">{
    <return pos:line="314" pos:column="5">return <expr><call><name><operator pos:line="314" pos:column="12">(<pos:position pos:line="314" pos:column="13"/></operator><operator pos:line="314" pos:column="13">*<pos:position pos:line="314" pos:column="14"/></operator><name pos:line="314" pos:column="14">mutex<pos:position pos:line="314" pos:column="19"/></name><operator pos:line="314" pos:column="19">)<pos:position pos:line="314" pos:column="20"/></operator><operator pos:line="314" pos:column="20">-&gt;<pos:position pos:line="314" pos:column="25"/></operator><name><name pos:line="314" pos:column="22">meth<pos:position pos:line="314" pos:column="26"/></name><operator pos:line="314" pos:column="26">-&gt;<pos:position pos:line="314" pos:column="31"/></operator><name pos:line="314" pos:column="28">child_init<pos:position pos:line="314" pos:column="38"/></name></name></name><argument_list pos:line="314" pos:column="38">(<argument><expr><name pos:line="314" pos:column="39">mutex<pos:position pos:line="314" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="314" pos:column="46">pool<pos:position pos:line="314" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="314" pos:column="52">fname<pos:position pos:line="314" pos:column="57"/></name></expr></argument>)<pos:position pos:line="314" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="314" pos:column="59"/></return>
}<pos:position pos:line="315" pos:column="2"/></block>

<macro><name pos:line="317" pos:column="1">APR_DECLARE<pos:position pos:line="317" pos:column="12"/></name><argument_list pos:line="317" pos:column="12">(<argument pos:line="317" pos:column="13">apr_status_t<pos:position pos:line="317" pos:column="25"/></argument>)<pos:position pos:line="317" pos:column="26"/></argument_list></macro> <macro><name pos:line="317" pos:column="27">apr_proc_mutex_lock<pos:position pos:line="317" pos:column="46"/></name><argument_list pos:line="317" pos:column="46">(<argument pos:line="317" pos:column="47">apr_proc_mutex_t *mutex<pos:position pos:line="317" pos:column="70"/></argument>)<pos:position pos:line="317" pos:column="71"/></argument_list></macro>
<block pos:line="318" pos:column="1">{
    <return pos:line="319" pos:column="5">return <expr><call><name><name pos:line="319" pos:column="12">mutex<pos:position pos:line="319" pos:column="17"/></name><operator pos:line="319" pos:column="17">-&gt;<pos:position pos:line="319" pos:column="22"/></operator><name pos:line="319" pos:column="19">meth<pos:position pos:line="319" pos:column="23"/></name><operator pos:line="319" pos:column="23">-&gt;<pos:position pos:line="319" pos:column="28"/></operator><name pos:line="319" pos:column="25">acquire<pos:position pos:line="319" pos:column="32"/></name></name><argument_list pos:line="319" pos:column="32">(<argument><expr><name pos:line="319" pos:column="33">mutex<pos:position pos:line="319" pos:column="38"/></name></expr></argument>)<pos:position pos:line="319" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="319" pos:column="40"/></return>
}<pos:position pos:line="320" pos:column="2"/></block>

<macro><name pos:line="322" pos:column="1">APR_DECLARE<pos:position pos:line="322" pos:column="12"/></name><argument_list pos:line="322" pos:column="12">(<argument pos:line="322" pos:column="13">apr_status_t<pos:position pos:line="322" pos:column="25"/></argument>)<pos:position pos:line="322" pos:column="26"/></argument_list></macro> <macro><name pos:line="322" pos:column="27">apr_proc_mutex_trylock<pos:position pos:line="322" pos:column="49"/></name><argument_list pos:line="322" pos:column="49">(<argument pos:line="322" pos:column="50">apr_proc_mutex_t *mutex<pos:position pos:line="322" pos:column="73"/></argument>)<pos:position pos:line="322" pos:column="74"/></argument_list></macro>
<block pos:line="323" pos:column="1">{
    <return pos:line="324" pos:column="5">return <expr><call><name><name pos:line="324" pos:column="12">mutex<pos:position pos:line="324" pos:column="17"/></name><operator pos:line="324" pos:column="17">-&gt;<pos:position pos:line="324" pos:column="22"/></operator><name pos:line="324" pos:column="19">meth<pos:position pos:line="324" pos:column="23"/></name><operator pos:line="324" pos:column="23">-&gt;<pos:position pos:line="324" pos:column="28"/></operator><name pos:line="324" pos:column="25">tryacquire<pos:position pos:line="324" pos:column="35"/></name></name><argument_list pos:line="324" pos:column="35">(<argument><expr><name pos:line="324" pos:column="36">mutex<pos:position pos:line="324" pos:column="41"/></name></expr></argument>)<pos:position pos:line="324" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="43"/></return>
}<pos:position pos:line="325" pos:column="2"/></block>

<macro><name pos:line="327" pos:column="1">APR_DECLARE<pos:position pos:line="327" pos:column="12"/></name><argument_list pos:line="327" pos:column="12">(<argument pos:line="327" pos:column="13">apr_status_t<pos:position pos:line="327" pos:column="25"/></argument>)<pos:position pos:line="327" pos:column="26"/></argument_list></macro> <macro><name pos:line="327" pos:column="27">apr_proc_mutex_unlock<pos:position pos:line="327" pos:column="48"/></name><argument_list pos:line="327" pos:column="48">(<argument pos:line="327" pos:column="49">apr_proc_mutex_t *mutex<pos:position pos:line="327" pos:column="72"/></argument>)<pos:position pos:line="327" pos:column="73"/></argument_list></macro>
<block pos:line="328" pos:column="1">{
    <return pos:line="329" pos:column="5">return <expr><call><name><name pos:line="329" pos:column="12">mutex<pos:position pos:line="329" pos:column="17"/></name><operator pos:line="329" pos:column="17">-&gt;<pos:position pos:line="329" pos:column="22"/></operator><name pos:line="329" pos:column="19">meth<pos:position pos:line="329" pos:column="23"/></name><operator pos:line="329" pos:column="23">-&gt;<pos:position pos:line="329" pos:column="28"/></operator><name pos:line="329" pos:column="25">release<pos:position pos:line="329" pos:column="32"/></name></name><argument_list pos:line="329" pos:column="32">(<argument><expr><name pos:line="329" pos:column="33">mutex<pos:position pos:line="329" pos:column="38"/></name></expr></argument>)<pos:position pos:line="329" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="329" pos:column="40"/></return>
}<pos:position pos:line="330" pos:column="2"/></block>

<macro><name pos:line="332" pos:column="1">APR_DECLARE<pos:position pos:line="332" pos:column="12"/></name><argument_list pos:line="332" pos:column="12">(<argument pos:line="332" pos:column="13">apr_status_t<pos:position pos:line="332" pos:column="25"/></argument>)<pos:position pos:line="332" pos:column="26"/></argument_list></macro> <macro><name pos:line="332" pos:column="27">apr_proc_mutex_cleanup<pos:position pos:line="332" pos:column="49"/></name><argument_list pos:line="332" pos:column="49">(<argument pos:line="332" pos:column="50">void *mutex<pos:position pos:line="332" pos:column="61"/></argument>)<pos:position pos:line="332" pos:column="62"/></argument_list></macro>
<block pos:line="333" pos:column="1">{
    <return pos:line="334" pos:column="5">return <expr><operator pos:line="334" pos:column="12">(<pos:position pos:line="334" pos:column="13"/></operator><operator pos:line="334" pos:column="13">(<pos:position pos:line="334" pos:column="14"/></operator><name pos:line="334" pos:column="14">apr_proc_mutex_t<pos:position pos:line="334" pos:column="30"/></name> <operator pos:line="334" pos:column="31">*<pos:position pos:line="334" pos:column="32"/></operator><operator pos:line="334" pos:column="32">)<pos:position pos:line="334" pos:column="33"/></operator><name pos:line="334" pos:column="33">mutex<pos:position pos:line="334" pos:column="38"/></name><operator pos:line="334" pos:column="38">)<pos:position pos:line="334" pos:column="39"/></operator><operator pos:line="334" pos:column="39">-&gt;<pos:position pos:line="334" pos:column="44"/></operator><call><name><name pos:line="334" pos:column="41">meth<pos:position pos:line="334" pos:column="45"/></name><operator pos:line="334" pos:column="45">-&gt;<pos:position pos:line="334" pos:column="50"/></operator><name pos:line="334" pos:column="47">cleanup<pos:position pos:line="334" pos:column="54"/></name></name><argument_list pos:line="334" pos:column="54">(<argument><expr><name pos:line="334" pos:column="55">mutex<pos:position pos:line="334" pos:column="60"/></name></expr></argument>)<pos:position pos:line="334" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="334" pos:column="62"/></return>
}<pos:position pos:line="335" pos:column="2"/></block>

<macro><name pos:line="337" pos:column="1">APR_DECLARE<pos:position pos:line="337" pos:column="12"/></name><argument_list pos:line="337" pos:column="12">(<argument pos:line="337" pos:column="13">const char *<pos:position pos:line="337" pos:column="25"/></argument>)<pos:position pos:line="337" pos:column="26"/></argument_list></macro> <macro><name pos:line="337" pos:column="27">apr_proc_mutex_name<pos:position pos:line="337" pos:column="46"/></name><argument_list pos:line="337" pos:column="46">(<argument pos:line="337" pos:column="47">apr_proc_mutex_t *mutex<pos:position pos:line="337" pos:column="70"/></argument>)<pos:position pos:line="337" pos:column="71"/></argument_list></macro>
<block pos:line="338" pos:column="1">{
    <return pos:line="339" pos:column="5">return <expr><name><name pos:line="339" pos:column="12">mutex<pos:position pos:line="339" pos:column="17"/></name><operator pos:line="339" pos:column="17">-&gt;<pos:position pos:line="339" pos:column="22"/></operator><name pos:line="339" pos:column="19">meth<pos:position pos:line="339" pos:column="23"/></name><operator pos:line="339" pos:column="23">-&gt;<pos:position pos:line="339" pos:column="28"/></operator><name pos:line="339" pos:column="25">name<pos:position pos:line="339" pos:column="29"/></name></name></expr>;<pos:position pos:line="339" pos:column="30"/></return>
}<pos:position pos:line="340" pos:column="2"/></block>

<macro><name pos:line="342" pos:column="1">APR_DECLARE<pos:position pos:line="342" pos:column="12"/></name><argument_list pos:line="342" pos:column="12">(<argument pos:line="342" pos:column="13">const char *<pos:position pos:line="342" pos:column="25"/></argument>)<pos:position pos:line="342" pos:column="26"/></argument_list></macro> <macro><name pos:line="342" pos:column="27">apr_proc_mutex_lockfile<pos:position pos:line="342" pos:column="50"/></name><argument_list pos:line="342" pos:column="50">(<argument pos:line="342" pos:column="51">apr_proc_mutex_t *mutex<pos:position pos:line="342" pos:column="74"/></argument>)<pos:position pos:line="342" pos:column="75"/></argument_list></macro>
<block pos:line="343" pos:column="1">{
    <comment type="block" pos:line="344" pos:column="5">/* POSIX sems use the fname field but don't use a file,
     * so be careful. */</comment>
<cpp:if pos:line="346" pos:column="1">#<cpp:directive pos:line="346" pos:column="2">if<pos:position pos:line="346" pos:column="4"/></cpp:directive> <expr><name pos:line="346" pos:column="5">APR_HAS_FLOCK_SERIALIZE<pos:position pos:line="346" pos:column="28"/></name></expr></cpp:if>
    <if pos:line="347" pos:column="5">if <condition pos:line="347" pos:column="8">(<expr><name><name pos:line="347" pos:column="9">mutex<pos:position pos:line="347" pos:column="14"/></name><operator pos:line="347" pos:column="14">-&gt;<pos:position pos:line="347" pos:column="19"/></operator><name pos:line="347" pos:column="16">meth<pos:position pos:line="347" pos:column="20"/></name></name> <operator pos:line="347" pos:column="21">==<pos:position pos:line="347" pos:column="23"/></operator> <operator pos:line="347" pos:column="24">&amp;<pos:position pos:line="347" pos:column="29"/></operator><name pos:line="347" pos:column="25">mutex_flock_methods<pos:position pos:line="347" pos:column="44"/></name></expr>)<pos:position pos:line="347" pos:column="45"/></condition><then pos:line="347" pos:column="45"> <block pos:line="347" pos:column="46">{
        <return pos:line="348" pos:column="9">return <expr><name><name pos:line="348" pos:column="16">mutex<pos:position pos:line="348" pos:column="21"/></name><operator pos:line="348" pos:column="21">-&gt;<pos:position pos:line="348" pos:column="26"/></operator><name pos:line="348" pos:column="23">fname<pos:position pos:line="348" pos:column="28"/></name></name></expr>;<pos:position pos:line="348" pos:column="29"/></return>
    }<pos:position pos:line="349" pos:column="6"/></block></then></if>
<cpp:endif pos:line="350" pos:column="1">#<cpp:directive pos:line="350" pos:column="2">endif<pos:position pos:line="350" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="351" pos:column="1">#<cpp:directive pos:line="351" pos:column="2">if<pos:position pos:line="351" pos:column="4"/></cpp:directive> <expr><name pos:line="351" pos:column="5">APR_HAS_FCNTL_SERIALIZE<pos:position pos:line="351" pos:column="28"/></name></expr></cpp:if>
    <if pos:line="352" pos:column="5">if <condition pos:line="352" pos:column="8">(<expr><name><name pos:line="352" pos:column="9">mutex<pos:position pos:line="352" pos:column="14"/></name><operator pos:line="352" pos:column="14">-&gt;<pos:position pos:line="352" pos:column="19"/></operator><name pos:line="352" pos:column="16">meth<pos:position pos:line="352" pos:column="20"/></name></name> <operator pos:line="352" pos:column="21">==<pos:position pos:line="352" pos:column="23"/></operator> <operator pos:line="352" pos:column="24">&amp;<pos:position pos:line="352" pos:column="29"/></operator><name pos:line="352" pos:column="25">mutex_fcntl_methods<pos:position pos:line="352" pos:column="44"/></name></expr>)<pos:position pos:line="352" pos:column="45"/></condition><then pos:line="352" pos:column="45"> <block pos:line="352" pos:column="46">{
        <return pos:line="353" pos:column="9">return <expr><name><name pos:line="353" pos:column="16">mutex<pos:position pos:line="353" pos:column="21"/></name><operator pos:line="353" pos:column="21">-&gt;<pos:position pos:line="353" pos:column="26"/></operator><name pos:line="353" pos:column="23">fname<pos:position pos:line="353" pos:column="28"/></name></name></expr>;<pos:position pos:line="353" pos:column="29"/></return>
    }<pos:position pos:line="354" pos:column="6"/></block></then></if>
<cpp:endif pos:line="355" pos:column="1">#<cpp:directive pos:line="355" pos:column="2">endif<pos:position pos:line="355" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="356" pos:column="5">return <expr><name pos:line="356" pos:column="12">NULL<pos:position pos:line="356" pos:column="16"/></name></expr>;<pos:position pos:line="356" pos:column="17"/></return>
}<pos:position pos:line="357" pos:column="2"/></block>

<macro><name pos:line="359" pos:column="1">APR_POOL_IMPLEMENT_ACCESSOR<pos:position pos:line="359" pos:column="28"/></name><argument_list pos:line="359" pos:column="28">(<argument pos:line="359" pos:column="29">proc_mutex<pos:position pos:line="359" pos:column="39"/></argument>)<pos:position pos:line="359" pos:column="40"/></argument_list></macro>

<comment type="block" pos:line="361" pos:column="1">/* Implement OS-specific accessors defined in apr_portable.h */</comment>

<macro><name pos:line="363" pos:column="1">APR_DECLARE<pos:position pos:line="363" pos:column="12"/></name><argument_list pos:line="363" pos:column="12">(<argument pos:line="363" pos:column="13">apr_status_t<pos:position pos:line="363" pos:column="25"/></argument>)<pos:position pos:line="363" pos:column="26"/></argument_list></macro> <macro><name pos:line="363" pos:column="27">apr_os_proc_mutex_get<pos:position pos:line="363" pos:column="48"/></name><argument_list pos:line="363" pos:column="48">(<argument pos:line="363" pos:column="49">apr_os_proc_mutex_t *ospmutex<pos:position pos:line="363" pos:column="78"/></argument>,
                                                <argument pos:line="364" pos:column="49">apr_proc_mutex_t *pmutex<pos:position pos:line="364" pos:column="73"/></argument>)<pos:position pos:line="364" pos:column="74"/></argument_list></macro>
<block pos:line="365" pos:column="1">{
<cpp:if pos:line="366" pos:column="1">#<cpp:directive pos:line="366" pos:column="2">if<pos:position pos:line="366" pos:column="4"/></cpp:directive> <expr><name pos:line="366" pos:column="5">APR_HAS_SYSVSEM_SERIALIZE<pos:position pos:line="366" pos:column="30"/></name> <operator pos:line="366" pos:column="31">||<pos:position pos:line="366" pos:column="33"/></operator> <name pos:line="366" pos:column="34">APR_HAS_FCNTL_SERIALIZE<pos:position pos:line="366" pos:column="57"/></name> <operator pos:line="366" pos:column="58">||<pos:position pos:line="366" pos:column="60"/></operator> <name pos:line="366" pos:column="61">APR_HAS_FLOCK_SERIALIZE<pos:position pos:line="366" pos:column="84"/></name> <operator pos:line="366" pos:column="85">||<pos:position pos:line="366" pos:column="87"/></operator> <name pos:line="366" pos:column="88">APR_HAS_POSIXSEM_SERIALIZE<pos:position pos:line="366" pos:column="114"/></name></expr></cpp:if>
    <expr_stmt><expr><name><name pos:line="367" pos:column="5">ospmutex<pos:position pos:line="367" pos:column="13"/></name><operator pos:line="367" pos:column="13">-&gt;<pos:position pos:line="367" pos:column="18"/></operator><name pos:line="367" pos:column="15">crossproc<pos:position pos:line="367" pos:column="24"/></name></name> <operator pos:line="367" pos:column="25">=<pos:position pos:line="367" pos:column="26"/></operator> <name><name pos:line="367" pos:column="27">pmutex<pos:position pos:line="367" pos:column="33"/></name><operator pos:line="367" pos:column="33">-&gt;<pos:position pos:line="367" pos:column="38"/></operator><name pos:line="367" pos:column="35">interproc<pos:position pos:line="367" pos:column="44"/></name><operator pos:line="367" pos:column="44">-&gt;<pos:position pos:line="367" pos:column="49"/></operator><name pos:line="367" pos:column="46">filedes<pos:position pos:line="367" pos:column="53"/></name></name></expr>;<pos:position pos:line="367" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="368" pos:column="1">#<cpp:directive pos:line="368" pos:column="2">endif<pos:position pos:line="368" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="369" pos:column="1">#<cpp:directive pos:line="369" pos:column="2">if<pos:position pos:line="369" pos:column="4"/></cpp:directive> <expr><name pos:line="369" pos:column="5">APR_HAS_PROC_PTHREAD_SERIALIZE<pos:position pos:line="369" pos:column="35"/></name></expr></cpp:if>
    <expr_stmt><expr><name><name pos:line="370" pos:column="5">ospmutex<pos:position pos:line="370" pos:column="13"/></name><operator pos:line="370" pos:column="13">-&gt;<pos:position pos:line="370" pos:column="18"/></operator><name pos:line="370" pos:column="15">pthread_interproc<pos:position pos:line="370" pos:column="32"/></name></name> <operator pos:line="370" pos:column="33">=<pos:position pos:line="370" pos:column="34"/></operator> <name><name pos:line="370" pos:column="35">pmutex<pos:position pos:line="370" pos:column="41"/></name><operator pos:line="370" pos:column="41">-&gt;<pos:position pos:line="370" pos:column="46"/></operator><name pos:line="370" pos:column="43">pthread_interproc<pos:position pos:line="370" pos:column="60"/></name></name></expr>;<pos:position pos:line="370" pos:column="61"/></expr_stmt>
<cpp:endif pos:line="371" pos:column="1">#<cpp:directive pos:line="371" pos:column="2">endif<pos:position pos:line="371" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="372" pos:column="5">return <expr><name pos:line="372" pos:column="12">APR_SUCCESS<pos:position pos:line="372" pos:column="23"/></name></expr>;<pos:position pos:line="372" pos:column="24"/></return>
}<pos:position pos:line="373" pos:column="2"/></block>

<macro><name pos:line="375" pos:column="1">APR_DECLARE<pos:position pos:line="375" pos:column="12"/></name><argument_list pos:line="375" pos:column="12">(<argument pos:line="375" pos:column="13">apr_status_t<pos:position pos:line="375" pos:column="25"/></argument>)<pos:position pos:line="375" pos:column="26"/></argument_list></macro> <macro><name pos:line="375" pos:column="27">apr_os_proc_mutex_put<pos:position pos:line="375" pos:column="48"/></name><argument_list pos:line="375" pos:column="48">(<argument pos:line="375" pos:column="49">apr_proc_mutex_t **pmutex<pos:position pos:line="375" pos:column="74"/></argument>,
                                                <argument pos:line="376" pos:column="49">apr_os_proc_mutex_t *ospmutex<pos:position pos:line="376" pos:column="78"/></argument>,
                                                <argument pos:line="377" pos:column="49">apr_pool_t *pool<pos:position pos:line="377" pos:column="65"/></argument>)<pos:position pos:line="377" pos:column="66"/></argument_list></macro>
<block pos:line="378" pos:column="1">{
    <if pos:line="379" pos:column="5">if <condition pos:line="379" pos:column="8">(<expr><name pos:line="379" pos:column="9">pool<pos:position pos:line="379" pos:column="13"/></name> <operator pos:line="379" pos:column="14">==<pos:position pos:line="379" pos:column="16"/></operator> <name pos:line="379" pos:column="17">NULL<pos:position pos:line="379" pos:column="21"/></name></expr>)<pos:position pos:line="379" pos:column="22"/></condition><then pos:line="379" pos:column="22"> <block pos:line="379" pos:column="23">{
        <return pos:line="380" pos:column="9">return <expr><name pos:line="380" pos:column="16">APR_ENOPOOL<pos:position pos:line="380" pos:column="27"/></name></expr>;<pos:position pos:line="380" pos:column="28"/></return>
    }<pos:position pos:line="381" pos:column="6"/></block></then></if>
    <if pos:line="382" pos:column="5">if <condition pos:line="382" pos:column="8">(<expr><operator pos:line="382" pos:column="9">(<pos:position pos:line="382" pos:column="10"/></operator><operator pos:line="382" pos:column="10">*<pos:position pos:line="382" pos:column="11"/></operator><name pos:line="382" pos:column="11">pmutex<pos:position pos:line="382" pos:column="17"/></name><operator pos:line="382" pos:column="17">)<pos:position pos:line="382" pos:column="18"/></operator> <operator pos:line="382" pos:column="19">==<pos:position pos:line="382" pos:column="21"/></operator> <name pos:line="382" pos:column="22">NULL<pos:position pos:line="382" pos:column="26"/></name></expr>)<pos:position pos:line="382" pos:column="27"/></condition><then pos:line="382" pos:column="27"> <block pos:line="382" pos:column="28">{
        <expr_stmt><expr><operator pos:line="383" pos:column="9">(<pos:position pos:line="383" pos:column="10"/></operator><operator pos:line="383" pos:column="10">*<pos:position pos:line="383" pos:column="11"/></operator><name pos:line="383" pos:column="11">pmutex<pos:position pos:line="383" pos:column="17"/></name><operator pos:line="383" pos:column="17">)<pos:position pos:line="383" pos:column="18"/></operator> <operator pos:line="383" pos:column="19">=<pos:position pos:line="383" pos:column="20"/></operator> <operator pos:line="383" pos:column="21">(<pos:position pos:line="383" pos:column="22"/></operator><name pos:line="383" pos:column="22">apr_proc_mutex_t<pos:position pos:line="383" pos:column="38"/></name> <operator pos:line="383" pos:column="39">*<pos:position pos:line="383" pos:column="40"/></operator><operator pos:line="383" pos:column="40">)<pos:position pos:line="383" pos:column="41"/></operator><call><name pos:line="383" pos:column="41">apr_pcalloc<pos:position pos:line="383" pos:column="52"/></name><argument_list pos:line="383" pos:column="52">(<argument><expr><name pos:line="383" pos:column="53">pool<pos:position pos:line="383" pos:column="57"/></name></expr></argument>,
                                                    <argument><expr><sizeof pos:line="384" pos:column="53">sizeof<argument_list pos:line="384" pos:column="59">(<argument><expr><name pos:line="384" pos:column="60">apr_proc_mutex_t<pos:position pos:line="384" pos:column="76"/></name></expr></argument>)<pos:position pos:line="384" pos:column="77"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="384" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="384" pos:column="79"/></expr_stmt>
        <expr_stmt><expr><name><operator pos:line="385" pos:column="9">(<pos:position pos:line="385" pos:column="10"/></operator><operator pos:line="385" pos:column="10">*<pos:position pos:line="385" pos:column="11"/></operator><name pos:line="385" pos:column="11">pmutex<pos:position pos:line="385" pos:column="17"/></name><operator pos:line="385" pos:column="17">)<pos:position pos:line="385" pos:column="18"/></operator><operator pos:line="385" pos:column="18">-&gt;<pos:position pos:line="385" pos:column="23"/></operator><name pos:line="385" pos:column="20">pool<pos:position pos:line="385" pos:column="24"/></name></name> <operator pos:line="385" pos:column="25">=<pos:position pos:line="385" pos:column="26"/></operator> <name pos:line="385" pos:column="27">pool<pos:position pos:line="385" pos:column="31"/></name></expr>;<pos:position pos:line="385" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="386" pos:column="6"/></block></then></if>
<cpp:if pos:line="387" pos:column="1">#<cpp:directive pos:line="387" pos:column="2">if<pos:position pos:line="387" pos:column="4"/></cpp:directive> <expr><name pos:line="387" pos:column="5">APR_HAS_SYSVSEM_SERIALIZE<pos:position pos:line="387" pos:column="30"/></name> <operator pos:line="387" pos:column="31">||<pos:position pos:line="387" pos:column="33"/></operator> <name pos:line="387" pos:column="34">APR_HAS_FCNTL_SERIALIZE<pos:position pos:line="387" pos:column="57"/></name> <operator pos:line="387" pos:column="58">||<pos:position pos:line="387" pos:column="60"/></operator> <name pos:line="387" pos:column="61">APR_HAS_FLOCK_SERIALIZE<pos:position pos:line="387" pos:column="84"/></name> <operator pos:line="387" pos:column="85">||<pos:position pos:line="387" pos:column="87"/></operator> <name pos:line="387" pos:column="88">APR_HAS_POSIXSEM_SERIALIZE<pos:position pos:line="387" pos:column="114"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="388" pos:column="5">apr_os_file_put<pos:position pos:line="388" pos:column="20"/></name><argument_list pos:line="388" pos:column="20">(<argument><expr><operator pos:line="388" pos:column="21">&amp;<pos:position pos:line="388" pos:column="26"/></operator><name><operator pos:line="388" pos:column="22">(<pos:position pos:line="388" pos:column="23"/></operator><operator pos:line="388" pos:column="23">*<pos:position pos:line="388" pos:column="24"/></operator><name pos:line="388" pos:column="24">pmutex<pos:position pos:line="388" pos:column="30"/></name><operator pos:line="388" pos:column="30">)<pos:position pos:line="388" pos:column="31"/></operator><operator pos:line="388" pos:column="31">-&gt;<pos:position pos:line="388" pos:column="36"/></operator><name pos:line="388" pos:column="33">interproc<pos:position pos:line="388" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="388" pos:column="44">&amp;<pos:position pos:line="388" pos:column="49"/></operator><name><name pos:line="388" pos:column="45">ospmutex<pos:position pos:line="388" pos:column="53"/></name><operator pos:line="388" pos:column="53">-&gt;<pos:position pos:line="388" pos:column="58"/></operator><name pos:line="388" pos:column="55">crossproc<pos:position pos:line="388" pos:column="64"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="388" pos:column="66">0<pos:position pos:line="388" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="388" pos:column="69">pool<pos:position pos:line="388" pos:column="73"/></name></expr></argument>)<pos:position pos:line="388" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="388" pos:column="75"/></expr_stmt>
<cpp:endif pos:line="389" pos:column="1">#<cpp:directive pos:line="389" pos:column="2">endif<pos:position pos:line="389" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="390" pos:column="1">#<cpp:directive pos:line="390" pos:column="2">if<pos:position pos:line="390" pos:column="4"/></cpp:directive> <expr><name pos:line="390" pos:column="5">APR_HAS_PROC_PTHREAD_SERIALIZE<pos:position pos:line="390" pos:column="35"/></name></expr></cpp:if>
    <expr_stmt><expr><name><operator pos:line="391" pos:column="5">(<pos:position pos:line="391" pos:column="6"/></operator><operator pos:line="391" pos:column="6">*<pos:position pos:line="391" pos:column="7"/></operator><name pos:line="391" pos:column="7">pmutex<pos:position pos:line="391" pos:column="13"/></name><operator pos:line="391" pos:column="13">)<pos:position pos:line="391" pos:column="14"/></operator><operator pos:line="391" pos:column="14">-&gt;<pos:position pos:line="391" pos:column="19"/></operator><name pos:line="391" pos:column="16">pthread_interproc<pos:position pos:line="391" pos:column="33"/></name></name> <operator pos:line="391" pos:column="34">=<pos:position pos:line="391" pos:column="35"/></operator> <name><name pos:line="391" pos:column="36">ospmutex<pos:position pos:line="391" pos:column="44"/></name><operator pos:line="391" pos:column="44">-&gt;<pos:position pos:line="391" pos:column="49"/></operator><name pos:line="391" pos:column="46">pthread_interproc<pos:position pos:line="391" pos:column="63"/></name></name></expr>;<pos:position pos:line="391" pos:column="64"/></expr_stmt>
<cpp:endif pos:line="392" pos:column="1">#<cpp:directive pos:line="392" pos:column="2">endif<pos:position pos:line="392" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="393" pos:column="5">return <expr><name pos:line="393" pos:column="12">APR_SUCCESS<pos:position pos:line="393" pos:column="23"/></name></expr>;<pos:position pos:line="393" pos:column="24"/></return>
}<pos:position pos:line="394" pos:column="2"/></block></block></function></unit>
