<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_761_httpd-2.2.27.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">ssl_cmd_SSLMutex<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">cmd_parms<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">cmd<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>,
                             <parameter><decl><type><name pos:line="2" pos:column="30">void<pos:position pos:line="2" pos:column="34"/></name> <modifier pos:line="2" pos:column="35">*<pos:position pos:line="2" pos:column="36"/></modifier></type><name pos:line="2" pos:column="36">dcfg<pos:position pos:line="2" pos:column="40"/></name></decl></parameter>,
                             <parameter><decl><type><specifier pos:line="3" pos:column="30">const<pos:position pos:line="3" pos:column="35"/></specifier> <name pos:line="3" pos:column="36">char<pos:position pos:line="3" pos:column="40"/></name> <modifier pos:line="3" pos:column="41">*<pos:position pos:line="3" pos:column="42"/></modifier></type><name pos:line="3" pos:column="42">arg_<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="47"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">err<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">SSLModConfigRec<pos:position pos:line="6" pos:column="20"/></name> <modifier pos:line="6" pos:column="21">*<pos:position pos:line="6" pos:column="22"/></modifier></type><name pos:line="6" pos:column="22">mc<pos:position pos:line="6" pos:column="24"/></name> <init pos:line="6" pos:column="25">= <expr><call><name pos:line="6" pos:column="27">myModConfig<pos:position pos:line="6" pos:column="38"/></name><argument_list pos:line="6" pos:column="38">(<argument><expr><name><name pos:line="6" pos:column="39">cmd<pos:position pos:line="6" pos:column="42"/></name><operator pos:line="6" pos:column="42">-&gt;<pos:position pos:line="6" pos:column="47"/></operator><name pos:line="6" pos:column="44">server<pos:position pos:line="6" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="52"/></decl_stmt>
    <comment type="block" pos:line="7" pos:column="5">/* Split arg_ into meth and file */</comment>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">char<pos:position pos:line="8" pos:column="9"/></name> <modifier pos:line="8" pos:column="10">*<pos:position pos:line="8" pos:column="11"/></modifier></type><name pos:line="8" pos:column="11">meth<pos:position pos:line="8" pos:column="15"/></name> <init pos:line="8" pos:column="16">= <expr><call><name pos:line="8" pos:column="18">apr_pstrdup<pos:position pos:line="8" pos:column="29"/></name><argument_list pos:line="8" pos:column="29">(<argument><expr><name><name pos:line="8" pos:column="30">cmd<pos:position pos:line="8" pos:column="33"/></name><operator pos:line="8" pos:column="33">-&gt;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="35">temp_pool<pos:position pos:line="8" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="46">arg_<pos:position pos:line="8" pos:column="50"/></name></expr></argument>)<pos:position pos:line="8" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">file<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><call><name pos:line="9" pos:column="18">strchr<pos:position pos:line="9" pos:column="24"/></name><argument_list pos:line="9" pos:column="24">(<argument><expr><name pos:line="9" pos:column="25">meth<pos:position pos:line="9" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="9" pos:column="31">':'<pos:position pos:line="9" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="9" pos:column="36"/></decl_stmt>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">file<pos:position pos:line="10" pos:column="13"/></name></expr>)<pos:position pos:line="10" pos:column="14"/></condition><then pos:line="10" pos:column="14"> <block pos:line="10" pos:column="15">{
        <expr_stmt><expr><operator pos:line="11" pos:column="9">*<pos:position pos:line="11" pos:column="10"/></operator><operator pos:line="11" pos:column="10">(<pos:position pos:line="11" pos:column="11"/></operator><name pos:line="11" pos:column="11">file<pos:position pos:line="11" pos:column="15"/></name><operator pos:line="11" pos:column="15">++<pos:position pos:line="11" pos:column="17"/></operator><operator pos:line="11" pos:column="17">)<pos:position pos:line="11" pos:column="18"/></operator> <operator pos:line="11" pos:column="19">=<pos:position pos:line="11" pos:column="20"/></operator> <literal type="char" pos:line="11" pos:column="21">'\0'<pos:position pos:line="11" pos:column="25"/></literal></expr>;<pos:position pos:line="11" pos:column="26"/></expr_stmt>
        <if pos:line="12" pos:column="9">if <condition pos:line="12" pos:column="12">(<expr><operator pos:line="12" pos:column="13">!<pos:position pos:line="12" pos:column="14"/></operator><operator pos:line="12" pos:column="14">*<pos:position pos:line="12" pos:column="15"/></operator><name pos:line="12" pos:column="15">file<pos:position pos:line="12" pos:column="19"/></name></expr>)<pos:position pos:line="12" pos:column="20"/></condition><then pos:line="12" pos:column="20"> <block pos:line="12" pos:column="21">{
            <expr_stmt><expr><name pos:line="13" pos:column="13">file<pos:position pos:line="13" pos:column="17"/></name> <operator pos:line="13" pos:column="18">=<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="20">NULL<pos:position pos:line="13" pos:column="24"/></name></expr>;<pos:position pos:line="13" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="14" pos:column="10"/></block></then></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <if pos:line="17" pos:column="5">if <condition pos:line="17" pos:column="8">(<expr><operator pos:line="17" pos:column="9">(<pos:position pos:line="17" pos:column="10"/></operator><name pos:line="17" pos:column="10">err<pos:position pos:line="17" pos:column="13"/></name> <operator pos:line="17" pos:column="14">=<pos:position pos:line="17" pos:column="15"/></operator> <call><name pos:line="17" pos:column="16">ap_check_cmd_context<pos:position pos:line="17" pos:column="36"/></name><argument_list pos:line="17" pos:column="36">(<argument><expr><name pos:line="17" pos:column="37">cmd<pos:position pos:line="17" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">GLOBAL_ONLY<pos:position pos:line="17" pos:column="53"/></name></expr></argument>)<pos:position pos:line="17" pos:column="54"/></argument_list></call><operator pos:line="17" pos:column="54">)<pos:position pos:line="17" pos:column="55"/></operator></expr>)<pos:position pos:line="17" pos:column="56"/></condition><then pos:line="17" pos:column="56"> <block pos:line="17" pos:column="57">{
        <return pos:line="18" pos:column="9">return <expr><name pos:line="18" pos:column="16">err<pos:position pos:line="18" pos:column="19"/></name></expr>;<pos:position pos:line="18" pos:column="20"/></return>
    }<pos:position pos:line="19" pos:column="6"/></block></then></if>

    <if pos:line="21" pos:column="5">if <condition pos:line="21" pos:column="8">(<expr><call><name pos:line="21" pos:column="9">ssl_config_global_isfixed<pos:position pos:line="21" pos:column="34"/></name><argument_list pos:line="21" pos:column="34">(<argument><expr><name pos:line="21" pos:column="35">mc<pos:position pos:line="21" pos:column="37"/></name></expr></argument>)<pos:position pos:line="21" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="39"/></condition><then pos:line="21" pos:column="39"> <block pos:line="21" pos:column="40">{
        <return pos:line="22" pos:column="9">return <expr><name pos:line="22" pos:column="16">NULL<pos:position pos:line="22" pos:column="20"/></name></expr>;<pos:position pos:line="22" pos:column="21"/></return>
    }<pos:position pos:line="23" pos:column="6"/></block></then></if>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><operator pos:line="24" pos:column="9">!<pos:position pos:line="24" pos:column="10"/></operator><call><name pos:line="24" pos:column="10">strcasecmp<pos:position pos:line="24" pos:column="20"/></name><argument_list pos:line="24" pos:column="20">(<argument><expr><name pos:line="24" pos:column="21">meth<pos:position pos:line="24" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="27">"none"<pos:position pos:line="24" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="34"/></argument_list></call> <operator pos:line="24" pos:column="35">||<pos:position pos:line="24" pos:column="37"/></operator> <operator pos:line="24" pos:column="38">!<pos:position pos:line="24" pos:column="39"/></operator><call><name pos:line="24" pos:column="39">strcasecmp<pos:position pos:line="24" pos:column="49"/></name><argument_list pos:line="24" pos:column="49">(<argument><expr><name pos:line="24" pos:column="50">meth<pos:position pos:line="24" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="24" pos:column="56">"no"<pos:position pos:line="24" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="24" pos:column="62"/></condition><then pos:line="24" pos:column="62"> <block pos:line="24" pos:column="63">{
        <expr_stmt><expr><name><name pos:line="25" pos:column="9">mc<pos:position pos:line="25" pos:column="11"/></name><operator pos:line="25" pos:column="11">-&gt;<pos:position pos:line="25" pos:column="16"/></operator><name pos:line="25" pos:column="13">nMutexMode<pos:position pos:line="25" pos:column="23"/></name></name>  <operator pos:line="25" pos:column="25">=<pos:position pos:line="25" pos:column="26"/></operator> <name pos:line="25" pos:column="27">SSL_MUTEXMODE_NONE<pos:position pos:line="25" pos:column="45"/></name></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>
        <return pos:line="26" pos:column="9">return <expr><name pos:line="26" pos:column="16">NULL<pos:position pos:line="26" pos:column="20"/></name></expr>;<pos:position pos:line="26" pos:column="21"/></return>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="29" pos:column="5">/* APR determines temporary filename unless overridden below,
     * we presume file indicates an szMutexFile is a file path
     * unless the method sets szMutexFile=file and NULLs file
     */</comment>
    <expr_stmt><expr><name><name pos:line="33" pos:column="5">mc<pos:position pos:line="33" pos:column="7"/></name><operator pos:line="33" pos:column="7">-&gt;<pos:position pos:line="33" pos:column="12"/></operator><name pos:line="33" pos:column="9">nMutexMode<pos:position pos:line="33" pos:column="19"/></name></name>  <operator pos:line="33" pos:column="21">=<pos:position pos:line="33" pos:column="22"/></operator> <name pos:line="33" pos:column="23">SSL_MUTEXMODE_USED<pos:position pos:line="33" pos:column="41"/></name></expr>;<pos:position pos:line="33" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">mc<pos:position pos:line="34" pos:column="7"/></name><operator pos:line="34" pos:column="7">-&gt;<pos:position pos:line="34" pos:column="12"/></operator><name pos:line="34" pos:column="9">szMutexFile<pos:position pos:line="34" pos:column="20"/></name></name> <operator pos:line="34" pos:column="21">=<pos:position pos:line="34" pos:column="22"/></operator> <name pos:line="34" pos:column="23">NULL<pos:position pos:line="34" pos:column="27"/></name></expr>;<pos:position pos:line="34" pos:column="28"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* NOTE: previously, 'yes' implied 'sem' */</comment>
    <if pos:line="37" pos:column="5">if <condition pos:line="37" pos:column="8">(<expr><operator pos:line="37" pos:column="9">!<pos:position pos:line="37" pos:column="10"/></operator><call><name pos:line="37" pos:column="10">strcasecmp<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">meth<pos:position pos:line="37" pos:column="25"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="27">"default"<pos:position pos:line="37" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="37"/></argument_list></call> <operator pos:line="37" pos:column="38">||<pos:position pos:line="37" pos:column="40"/></operator> <operator pos:line="37" pos:column="41">!<pos:position pos:line="37" pos:column="42"/></operator><call><name pos:line="37" pos:column="42">strcasecmp<pos:position pos:line="37" pos:column="52"/></name><argument_list pos:line="37" pos:column="52">(<argument><expr><name pos:line="37" pos:column="53">meth<pos:position pos:line="37" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="59">"yes"<pos:position pos:line="37" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="37" pos:column="66"/></condition><then pos:line="37" pos:column="66"> <block pos:line="37" pos:column="67">{
        <expr_stmt><expr><name><name pos:line="38" pos:column="9">mc<pos:position pos:line="38" pos:column="11"/></name><operator pos:line="38" pos:column="11">-&gt;<pos:position pos:line="38" pos:column="16"/></operator><name pos:line="38" pos:column="13">nMutexMech<pos:position pos:line="38" pos:column="23"/></name></name> <operator pos:line="38" pos:column="24">=<pos:position pos:line="38" pos:column="25"/></operator> <name pos:line="38" pos:column="26">APR_LOCK_DEFAULT<pos:position pos:line="38" pos:column="42"/></name></expr>;<pos:position pos:line="38" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then>
<cpp:if pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">if<pos:position pos:line="40" pos:column="4"/></cpp:directive> <expr><name pos:line="40" pos:column="5">APR_HAS_FCNTL_SERIALIZE<pos:position pos:line="40" pos:column="28"/></name></expr></cpp:if>
    <elseif pos:line="41" pos:column="5">else <if pos:line="41" pos:column="10">if <condition pos:line="41" pos:column="13">(<expr><operator pos:line="41" pos:column="14">(<pos:position pos:line="41" pos:column="15"/></operator><operator pos:line="41" pos:column="15">!<pos:position pos:line="41" pos:column="16"/></operator><call><name pos:line="41" pos:column="16">strcasecmp<pos:position pos:line="41" pos:column="26"/></name><argument_list pos:line="41" pos:column="26">(<argument><expr><name pos:line="41" pos:column="27">meth<pos:position pos:line="41" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="33">"fcntl"<pos:position pos:line="41" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="41"/></argument_list></call> <operator pos:line="41" pos:column="42">||<pos:position pos:line="41" pos:column="44"/></operator> <operator pos:line="41" pos:column="45">!<pos:position pos:line="41" pos:column="46"/></operator><call><name pos:line="41" pos:column="46">strcasecmp<pos:position pos:line="41" pos:column="56"/></name><argument_list pos:line="41" pos:column="56">(<argument><expr><name pos:line="41" pos:column="57">meth<pos:position pos:line="41" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="63">"file"<pos:position pos:line="41" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="70"/></argument_list></call><operator pos:line="41" pos:column="70">)<pos:position pos:line="41" pos:column="71"/></operator> <operator pos:line="41" pos:column="72">&amp;&amp;<pos:position pos:line="41" pos:column="82"/></operator> <name pos:line="41" pos:column="75">file<pos:position pos:line="41" pos:column="79"/></name></expr>)<pos:position pos:line="41" pos:column="80"/></condition><then pos:line="41" pos:column="80"> <block pos:line="41" pos:column="81">{
        <expr_stmt><expr><name><name pos:line="42" pos:column="9">mc<pos:position pos:line="42" pos:column="11"/></name><operator pos:line="42" pos:column="11">-&gt;<pos:position pos:line="42" pos:column="16"/></operator><name pos:line="42" pos:column="13">nMutexMech<pos:position pos:line="42" pos:column="23"/></name></name> <operator pos:line="42" pos:column="24">=<pos:position pos:line="42" pos:column="25"/></operator> <name pos:line="42" pos:column="26">APR_LOCK_FCNTL<pos:position pos:line="42" pos:column="40"/></name></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="44" pos:column="1">#<cpp:directive pos:line="44" pos:column="2">endif<pos:position pos:line="44" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">if<pos:position pos:line="45" pos:column="4"/></cpp:directive> <expr><name pos:line="45" pos:column="5">APR_HAS_FLOCK_SERIALIZE<pos:position pos:line="45" pos:column="28"/></name></expr></cpp:if>
    <elseif pos:line="46" pos:column="5">else <if pos:line="46" pos:column="10">if <condition pos:line="46" pos:column="13">(<expr><operator pos:line="46" pos:column="14">(<pos:position pos:line="46" pos:column="15"/></operator><operator pos:line="46" pos:column="15">!<pos:position pos:line="46" pos:column="16"/></operator><call><name pos:line="46" pos:column="16">strcasecmp<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">(<argument><expr><name pos:line="46" pos:column="27">meth<pos:position pos:line="46" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="33">"flock"<pos:position pos:line="46" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="41"/></argument_list></call> <operator pos:line="46" pos:column="42">||<pos:position pos:line="46" pos:column="44"/></operator> <operator pos:line="46" pos:column="45">!<pos:position pos:line="46" pos:column="46"/></operator><call><name pos:line="46" pos:column="46">strcasecmp<pos:position pos:line="46" pos:column="56"/></name><argument_list pos:line="46" pos:column="56">(<argument><expr><name pos:line="46" pos:column="57">meth<pos:position pos:line="46" pos:column="61"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="63">"file"<pos:position pos:line="46" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="70"/></argument_list></call><operator pos:line="46" pos:column="70">)<pos:position pos:line="46" pos:column="71"/></operator> <operator pos:line="46" pos:column="72">&amp;&amp;<pos:position pos:line="46" pos:column="82"/></operator> <name pos:line="46" pos:column="75">file<pos:position pos:line="46" pos:column="79"/></name></expr>)<pos:position pos:line="46" pos:column="80"/></condition><then pos:line="46" pos:column="80"> <block pos:line="46" pos:column="81">{
        <expr_stmt><expr><name><name pos:line="47" pos:column="9">mc<pos:position pos:line="47" pos:column="11"/></name><operator pos:line="47" pos:column="11">-&gt;<pos:position pos:line="47" pos:column="16"/></operator><name pos:line="47" pos:column="13">nMutexMech<pos:position pos:line="47" pos:column="23"/></name></name> <operator pos:line="47" pos:column="24">=<pos:position pos:line="47" pos:column="25"/></operator> <name pos:line="47" pos:column="26">APR_LOCK_FLOCK<pos:position pos:line="47" pos:column="40"/></name></expr>;<pos:position pos:line="47" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="48" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">endif<pos:position pos:line="49" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="50" pos:column="1">#<cpp:directive pos:line="50" pos:column="2">if<pos:position pos:line="50" pos:column="4"/></cpp:directive> <expr><name pos:line="50" pos:column="5">APR_HAS_POSIXSEM_SERIALIZE<pos:position pos:line="50" pos:column="31"/></name></expr></cpp:if>
    <elseif pos:line="51" pos:column="5">else <if pos:line="51" pos:column="10">if <condition pos:line="51" pos:column="13">(<expr><operator pos:line="51" pos:column="14">!<pos:position pos:line="51" pos:column="15"/></operator><call><name pos:line="51" pos:column="15">strcasecmp<pos:position pos:line="51" pos:column="25"/></name><argument_list pos:line="51" pos:column="25">(<argument><expr><name pos:line="51" pos:column="26">meth<pos:position pos:line="51" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="32">"posixsem"<pos:position pos:line="51" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="43"/></argument_list></call> <operator pos:line="51" pos:column="44">||<pos:position pos:line="51" pos:column="46"/></operator> <operator pos:line="51" pos:column="47">!<pos:position pos:line="51" pos:column="48"/></operator><call><name pos:line="51" pos:column="48">strcasecmp<pos:position pos:line="51" pos:column="58"/></name><argument_list pos:line="51" pos:column="58">(<argument><expr><name pos:line="51" pos:column="59">meth<pos:position pos:line="51" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="65">"sem"<pos:position pos:line="51" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="51" pos:column="71"/></argument_list></call></expr>)<pos:position pos:line="51" pos:column="72"/></condition><then pos:line="51" pos:column="72"> <block pos:line="51" pos:column="73">{
        <expr_stmt><expr><name><name pos:line="52" pos:column="9">mc<pos:position pos:line="52" pos:column="11"/></name><operator pos:line="52" pos:column="11">-&gt;<pos:position pos:line="52" pos:column="16"/></operator><name pos:line="52" pos:column="13">nMutexMech<pos:position pos:line="52" pos:column="23"/></name></name> <operator pos:line="52" pos:column="24">=<pos:position pos:line="52" pos:column="25"/></operator> <name pos:line="52" pos:column="26">APR_LOCK_POSIXSEM<pos:position pos:line="52" pos:column="43"/></name></expr>;<pos:position pos:line="52" pos:column="44"/></expr_stmt>
        <comment type="block" pos:line="53" pos:column="9">/* Posix/SysV semaphores aren't file based, use the literal name
         * if provided and fall back on APR's default if not.  Today, APR
         * will ignore it, but once supported it has an absurdly short limit.
         */</comment>
        <if pos:line="57" pos:column="9">if <condition pos:line="57" pos:column="12">(<expr><name pos:line="57" pos:column="13">file<pos:position pos:line="57" pos:column="17"/></name></expr>)<pos:position pos:line="57" pos:column="18"/></condition><then pos:line="57" pos:column="18"> <block pos:line="57" pos:column="19">{
            <expr_stmt><expr><name><name pos:line="58" pos:column="13">mc<pos:position pos:line="58" pos:column="15"/></name><operator pos:line="58" pos:column="15">-&gt;<pos:position pos:line="58" pos:column="20"/></operator><name pos:line="58" pos:column="17">szMutexFile<pos:position pos:line="58" pos:column="28"/></name></name> <operator pos:line="58" pos:column="29">=<pos:position pos:line="58" pos:column="30"/></operator> <call><name pos:line="58" pos:column="31">apr_pstrdup<pos:position pos:line="58" pos:column="42"/></name><argument_list pos:line="58" pos:column="42">(<argument><expr><name><name pos:line="58" pos:column="43">cmd<pos:position pos:line="58" pos:column="46"/></name><operator pos:line="58" pos:column="46">-&gt;<pos:position pos:line="58" pos:column="51"/></operator><name pos:line="58" pos:column="48">server<pos:position pos:line="58" pos:column="54"/></name><operator pos:line="58" pos:column="54">-&gt;<pos:position pos:line="58" pos:column="59"/></operator><name pos:line="58" pos:column="56">process<pos:position pos:line="58" pos:column="63"/></name><operator pos:line="58" pos:column="63">-&gt;<pos:position pos:line="58" pos:column="68"/></operator><name pos:line="58" pos:column="65">pool<pos:position pos:line="58" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="58" pos:column="71">file<pos:position pos:line="58" pos:column="75"/></name></expr></argument>)<pos:position pos:line="58" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="77"/></expr_stmt>

            <expr_stmt><expr><name pos:line="60" pos:column="13">file<pos:position pos:line="60" pos:column="17"/></name> <operator pos:line="60" pos:column="18">=<pos:position pos:line="60" pos:column="19"/></operator> <name pos:line="60" pos:column="20">NULL<pos:position pos:line="60" pos:column="24"/></name></expr>;<pos:position pos:line="60" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">endif<pos:position pos:line="63" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">if<pos:position pos:line="64" pos:column="4"/></cpp:directive> <expr><name pos:line="64" pos:column="5">APR_HAS_SYSVSEM_SERIALIZE<pos:position pos:line="64" pos:column="30"/></name> <operator pos:line="64" pos:column="31">&amp;&amp;<pos:position pos:line="64" pos:column="41"/></operator> <operator pos:line="64" pos:column="34">!<pos:position pos:line="64" pos:column="35"/></operator><call><name pos:line="64" pos:column="35">defined<pos:position pos:line="64" pos:column="42"/></name><argument_list pos:line="64" pos:column="42">(<argument><expr><name pos:line="64" pos:column="43">PERCHILD_MPM<pos:position pos:line="64" pos:column="55"/></name></expr></argument>)<pos:position pos:line="64" pos:column="56"/></argument_list></call></expr></cpp:if>
    <elseif pos:line="65" pos:column="5">else <if pos:line="65" pos:column="10">if <condition pos:line="65" pos:column="13">(<expr><operator pos:line="65" pos:column="14">!<pos:position pos:line="65" pos:column="15"/></operator><call><name pos:line="65" pos:column="15">strcasecmp<pos:position pos:line="65" pos:column="25"/></name><argument_list pos:line="65" pos:column="25">(<argument><expr><name pos:line="65" pos:column="26">meth<pos:position pos:line="65" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="32">"sysvsem"<pos:position pos:line="65" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="42"/></argument_list></call> <operator pos:line="65" pos:column="43">||<pos:position pos:line="65" pos:column="45"/></operator> <operator pos:line="65" pos:column="46">!<pos:position pos:line="65" pos:column="47"/></operator><call><name pos:line="65" pos:column="47">strcasecmp<pos:position pos:line="65" pos:column="57"/></name><argument_list pos:line="65" pos:column="57">(<argument><expr><name pos:line="65" pos:column="58">meth<pos:position pos:line="65" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="65" pos:column="64">"sem"<pos:position pos:line="65" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="65" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="65" pos:column="71"/></condition><then pos:line="65" pos:column="71"> <block pos:line="65" pos:column="72">{
        <expr_stmt><expr><name><name pos:line="66" pos:column="9">mc<pos:position pos:line="66" pos:column="11"/></name><operator pos:line="66" pos:column="11">-&gt;<pos:position pos:line="66" pos:column="16"/></operator><name pos:line="66" pos:column="13">nMutexMech<pos:position pos:line="66" pos:column="23"/></name></name> <operator pos:line="66" pos:column="24">=<pos:position pos:line="66" pos:column="25"/></operator> <name pos:line="66" pos:column="26">APR_LOCK_SYSVSEM<pos:position pos:line="66" pos:column="42"/></name></expr>;<pos:position pos:line="66" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:if pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">if<pos:position pos:line="69" pos:column="4"/></cpp:directive> <expr><name pos:line="69" pos:column="5">APR_HAS_PROC_PTHREAD_SERIALIZE<pos:position pos:line="69" pos:column="35"/></name></expr></cpp:if>
    <elseif pos:line="70" pos:column="5">else <if pos:line="70" pos:column="10">if <condition pos:line="70" pos:column="13">(<expr><operator pos:line="70" pos:column="14">!<pos:position pos:line="70" pos:column="15"/></operator><call><name pos:line="70" pos:column="15">strcasecmp<pos:position pos:line="70" pos:column="25"/></name><argument_list pos:line="70" pos:column="25">(<argument><expr><name pos:line="70" pos:column="26">meth<pos:position pos:line="70" pos:column="30"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="70" pos:column="32">"pthread"<pos:position pos:line="70" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="70" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="43"/></condition><then pos:line="70" pos:column="43"> <block pos:line="70" pos:column="44">{
        <expr_stmt><expr><name><name pos:line="71" pos:column="9">mc<pos:position pos:line="71" pos:column="11"/></name><operator pos:line="71" pos:column="11">-&gt;<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="13">nMutexMech<pos:position pos:line="71" pos:column="23"/></name></name> <operator pos:line="71" pos:column="24">=<pos:position pos:line="71" pos:column="25"/></operator> <name pos:line="71" pos:column="26">APR_LOCK_PROC_PTHREAD<pos:position pos:line="71" pos:column="47"/></name></expr>;<pos:position pos:line="71" pos:column="48"/></expr_stmt>
    }<pos:position pos:line="72" pos:column="6"/></block></then></if></elseif>
<cpp:endif pos:line="73" pos:column="1">#<cpp:directive pos:line="73" pos:column="2">endif<pos:position pos:line="73" pos:column="7"/></cpp:directive></cpp:endif>
    <else pos:line="74" pos:column="5">else <block pos:line="74" pos:column="10">{
        <return pos:line="75" pos:column="9">return <expr><call><name pos:line="75" pos:column="16">apr_pstrcat<pos:position pos:line="75" pos:column="27"/></name><argument_list pos:line="75" pos:column="27">(<argument><expr><name><name pos:line="75" pos:column="28">cmd<pos:position pos:line="75" pos:column="31"/></name><operator pos:line="75" pos:column="31">-&gt;<pos:position pos:line="75" pos:column="36"/></operator><name pos:line="75" pos:column="33">pool<pos:position pos:line="75" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="75" pos:column="39">"Invalid SSLMutex argument "<pos:position pos:line="75" pos:column="67"/></literal></expr></argument>, <argument><expr><name pos:line="75" pos:column="69">arg_<pos:position pos:line="75" pos:column="73"/></name></expr></argument>,
                           <argument><expr><literal type="string" pos:line="76" pos:column="28">" ("<pos:position pos:line="76" pos:column="32"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="34">ssl_valid_ssl_mutex_string<pos:position pos:line="76" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="62">")"<pos:position pos:line="76" pos:column="65"/></literal></expr></argument>, <argument><expr><name pos:line="76" pos:column="67">NULL<pos:position pos:line="76" pos:column="71"/></name></expr></argument>)<pos:position pos:line="76" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="73"/></return>
    }<pos:position pos:line="77" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="79" pos:column="5">/* Unless the method above assumed responsibility for setting up
     * mc-&gt;szMutexFile and NULLing out file, presume it is a file we
     * are looking to use
     */</comment>
    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name pos:line="83" pos:column="9">file<pos:position pos:line="83" pos:column="13"/></name></expr>)<pos:position pos:line="83" pos:column="14"/></condition><then pos:line="83" pos:column="14"> <block pos:line="83" pos:column="15">{
        <expr_stmt><expr><name><name pos:line="84" pos:column="9">mc<pos:position pos:line="84" pos:column="11"/></name><operator pos:line="84" pos:column="11">-&gt;<pos:position pos:line="84" pos:column="16"/></operator><name pos:line="84" pos:column="13">szMutexFile<pos:position pos:line="84" pos:column="24"/></name></name> <operator pos:line="84" pos:column="25">=<pos:position pos:line="84" pos:column="26"/></operator> <call><name pos:line="84" pos:column="27">ap_server_root_relative<pos:position pos:line="84" pos:column="50"/></name><argument_list pos:line="84" pos:column="50">(<argument><expr><name><name pos:line="84" pos:column="51">cmd<pos:position pos:line="84" pos:column="54"/></name><operator pos:line="84" pos:column="54">-&gt;<pos:position pos:line="84" pos:column="59"/></operator><name pos:line="84" pos:column="56">server<pos:position pos:line="84" pos:column="62"/></name><operator pos:line="84" pos:column="62">-&gt;<pos:position pos:line="84" pos:column="67"/></operator><name pos:line="84" pos:column="64">process<pos:position pos:line="84" pos:column="71"/></name><operator pos:line="84" pos:column="71">-&gt;<pos:position pos:line="84" pos:column="76"/></operator><name pos:line="84" pos:column="73">pool<pos:position pos:line="84" pos:column="77"/></name></name></expr></argument>, <argument><expr><name pos:line="84" pos:column="79">file<pos:position pos:line="84" pos:column="83"/></name></expr></argument>)<pos:position pos:line="84" pos:column="84"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="85"/></expr_stmt>
        <if pos:line="85" pos:column="9">if <condition pos:line="85" pos:column="12">(<expr><operator pos:line="85" pos:column="13">!<pos:position pos:line="85" pos:column="14"/></operator><name><name pos:line="85" pos:column="14">mc<pos:position pos:line="85" pos:column="16"/></name><operator pos:line="85" pos:column="16">-&gt;<pos:position pos:line="85" pos:column="21"/></operator><name pos:line="85" pos:column="18">szMutexFile<pos:position pos:line="85" pos:column="29"/></name></name></expr>)<pos:position pos:line="85" pos:column="30"/></condition><then pos:line="85" pos:column="30"> <block pos:line="85" pos:column="31">{
            <return pos:line="86" pos:column="13">return <expr><call><name pos:line="86" pos:column="20">apr_pstrcat<pos:position pos:line="86" pos:column="31"/></name><argument_list pos:line="86" pos:column="31">(<argument><expr><name><name pos:line="86" pos:column="32">cmd<pos:position pos:line="86" pos:column="35"/></name><operator pos:line="86" pos:column="35">-&gt;<pos:position pos:line="86" pos:column="40"/></operator><name pos:line="86" pos:column="37">pool<pos:position pos:line="86" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="43">"Invalid SSLMutex "<pos:position pos:line="86" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="64">meth<pos:position pos:line="86" pos:column="68"/></name></expr></argument>,
                               <argument><expr><literal type="string" pos:line="87" pos:column="32">": filepath "<pos:position pos:line="87" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="87" pos:column="47">file<pos:position pos:line="87" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="87" pos:column="53">NULL<pos:position pos:line="87" pos:column="57"/></name></expr></argument>)<pos:position pos:line="87" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="59"/></return>
        }<pos:position pos:line="88" pos:column="10"/></block></then></if>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>

    <return pos:line="91" pos:column="5">return <expr><name pos:line="91" pos:column="12">NULL<pos:position pos:line="91" pos:column="16"/></name></expr>;<pos:position pos:line="91" pos:column="17"/></return>
}<pos:position pos:line="92" pos:column="2"/></block></function></unit>
