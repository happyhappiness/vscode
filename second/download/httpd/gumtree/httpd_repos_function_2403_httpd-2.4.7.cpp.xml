<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2403_httpd-2.4.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">deflate_out_filter<pos:position pos:line="1" pos:column="39"/></name><parameter_list pos:line="1" pos:column="39">(<parameter><decl><type><name pos:line="1" pos:column="40">ap_filter_t<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">f<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                                       <parameter><decl><type><name pos:line="2" pos:column="40">apr_bucket_brigade<pos:position pos:line="2" pos:column="58"/></name> <modifier pos:line="2" pos:column="59">*<pos:position pos:line="2" pos:column="60"/></modifier></type><name pos:line="2" pos:column="60">bb<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_bucket<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">e<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">request_rec<pos:position pos:line="5" pos:column="16"/></name> <modifier pos:line="5" pos:column="17">*<pos:position pos:line="5" pos:column="18"/></modifier></type><name pos:line="5" pos:column="18">r<pos:position pos:line="5" pos:column="19"/></name> <init pos:line="5" pos:column="20">= <expr><name><name pos:line="5" pos:column="22">f<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">-&gt;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="25">r<pos:position pos:line="5" pos:column="26"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">deflate_ctx<pos:position pos:line="6" pos:column="16"/></name> <modifier pos:line="6" pos:column="17">*<pos:position pos:line="6" pos:column="18"/></modifier></type><name pos:line="6" pos:column="18">ctx<pos:position pos:line="6" pos:column="21"/></name> <init pos:line="6" pos:column="22">= <expr><name><name pos:line="6" pos:column="24">f<pos:position pos:line="6" pos:column="25"/></name><operator pos:line="6" pos:column="25">-&gt;<pos:position pos:line="6" pos:column="30"/></operator><name pos:line="6" pos:column="27">ctx<pos:position pos:line="6" pos:column="30"/></name></name></expr></init></decl>;<pos:position pos:line="6" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">int<pos:position pos:line="7" pos:column="8"/></name></type> <name pos:line="7" pos:column="9">zRC<pos:position pos:line="7" pos:column="12"/></name></decl>;<pos:position pos:line="7" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">len<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><literal type="number" pos:line="8" pos:column="22">0<pos:position pos:line="8" pos:column="23"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="8" pos:column="25">blen<pos:position pos:line="8" pos:column="29"/></name></decl>;<pos:position pos:line="8" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">data<pos:position pos:line="9" pos:column="21"/></name></decl>;<pos:position pos:line="9" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">deflate_filter_config<pos:position pos:line="10" pos:column="26"/></name> <modifier pos:line="10" pos:column="27">*<pos:position pos:line="10" pos:column="28"/></modifier></type><name pos:line="10" pos:column="28">c<pos:position pos:line="10" pos:column="29"/></name></decl>;<pos:position pos:line="10" pos:column="30"/></decl_stmt>

    <comment type="block" pos:line="12" pos:column="5">/* Do nothing if asked to filter nothing. */</comment>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><call><name pos:line="13" pos:column="9">APR_BRIGADE_EMPTY<pos:position pos:line="13" pos:column="26"/></name><argument_list pos:line="13" pos:column="26">(<argument><expr><name pos:line="13" pos:column="27">bb<pos:position pos:line="13" pos:column="29"/></name></expr></argument>)<pos:position pos:line="13" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="13" pos:column="31"/></condition><then pos:line="13" pos:column="31"> <block pos:line="13" pos:column="32">{
        <return pos:line="14" pos:column="9">return <expr><name pos:line="14" pos:column="16">APR_SUCCESS<pos:position pos:line="14" pos:column="27"/></name></expr>;<pos:position pos:line="14" pos:column="28"/></return>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="17" pos:column="5">c<pos:position pos:line="17" pos:column="6"/></name> <operator pos:line="17" pos:column="7">=<pos:position pos:line="17" pos:column="8"/></operator> <call><name pos:line="17" pos:column="9">ap_get_module_config<pos:position pos:line="17" pos:column="29"/></name><argument_list pos:line="17" pos:column="29">(<argument><expr><name><name pos:line="17" pos:column="30">r<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">server<pos:position pos:line="17" pos:column="39"/></name><operator pos:line="17" pos:column="39">-&gt;<pos:position pos:line="17" pos:column="44"/></operator><name pos:line="17" pos:column="41">module_config<pos:position pos:line="17" pos:column="54"/></name></name></expr></argument>,
                             <argument><expr><operator pos:line="18" pos:column="30">&amp;<pos:position pos:line="18" pos:column="35"/></operator><name pos:line="18" pos:column="31">deflate_module<pos:position pos:line="18" pos:column="45"/></name></expr></argument>)<pos:position pos:line="18" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="47"/></expr_stmt>

    <comment type="block" pos:line="20" pos:column="5">/* If we don't have a context, we need to ensure that it is okay to send
     * the deflated content.  If we have a context, that means we've done
     * this before and we liked it.
     * This could be not so nice if we always fail.  But, if we succeed,
     * we're in better shape.
     */</comment>
    <if pos:line="26" pos:column="5">if <condition pos:line="26" pos:column="8">(<expr><operator pos:line="26" pos:column="9">!<pos:position pos:line="26" pos:column="10"/></operator><name pos:line="26" pos:column="10">ctx<pos:position pos:line="26" pos:column="13"/></name></expr>)<pos:position pos:line="26" pos:column="14"/></condition><then pos:line="26" pos:column="14"> <block pos:line="26" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="27" pos:column="9">char<pos:position pos:line="27" pos:column="13"/></name> <modifier pos:line="27" pos:column="14">*<pos:position pos:line="27" pos:column="15"/></modifier></type><name pos:line="27" pos:column="15">token<pos:position pos:line="27" pos:column="20"/></name></decl>;<pos:position pos:line="27" pos:column="21"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="28" pos:column="9">const<pos:position pos:line="28" pos:column="14"/></specifier> <name pos:line="28" pos:column="15">char<pos:position pos:line="28" pos:column="19"/></name> <modifier pos:line="28" pos:column="20">*<pos:position pos:line="28" pos:column="21"/></modifier></type><name pos:line="28" pos:column="21">encoding<pos:position pos:line="28" pos:column="29"/></name></decl>;<pos:position pos:line="28" pos:column="30"/></decl_stmt>

        <if pos:line="30" pos:column="9">if <condition pos:line="30" pos:column="12">(<expr><call><name pos:line="30" pos:column="13">have_ssl_compression<pos:position pos:line="30" pos:column="33"/></name><argument_list pos:line="30" pos:column="33">(<argument><expr><name pos:line="30" pos:column="34">r<pos:position pos:line="30" pos:column="35"/></name></expr></argument>)<pos:position pos:line="30" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="30" pos:column="37"/></condition><then pos:line="30" pos:column="37"> <block pos:line="30" pos:column="38">{
            <expr_stmt><expr><call><name pos:line="31" pos:column="13">ap_log_rerror<pos:position pos:line="31" pos:column="26"/></name><argument_list pos:line="31" pos:column="26">(<argument><expr><name pos:line="31" pos:column="27">APLOG_MARK<pos:position pos:line="31" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="39">APLOG_TRACE1<pos:position pos:line="31" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="31" pos:column="53">0<pos:position pos:line="31" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="31" pos:column="56">r<pos:position pos:line="31" pos:column="57"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="32" pos:column="27">"Compression enabled at SSL level; not compressing "<pos:position pos:line="32" pos:column="79"/></literal>
                          <literal type="string" pos:line="33" pos:column="27">"at HTTP level."<pos:position pos:line="33" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="33" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">ap_remove_output_filter<pos:position pos:line="34" pos:column="36"/></name><argument_list pos:line="34" pos:column="36">(<argument><expr><name pos:line="34" pos:column="37">f<pos:position pos:line="34" pos:column="38"/></name></expr></argument>)<pos:position pos:line="34" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="40"/></expr_stmt>
            <return pos:line="35" pos:column="13">return <expr><call><name pos:line="35" pos:column="20">ap_pass_brigade<pos:position pos:line="35" pos:column="35"/></name><argument_list pos:line="35" pos:column="35">(<argument><expr><name><name pos:line="35" pos:column="36">f<pos:position pos:line="35" pos:column="37"/></name><operator pos:line="35" pos:column="37">-&gt;<pos:position pos:line="35" pos:column="42"/></operator><name pos:line="35" pos:column="39">next<pos:position pos:line="35" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="45">bb<pos:position pos:line="35" pos:column="47"/></name></expr></argument>)<pos:position pos:line="35" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="49"/></return>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="38" pos:column="9">/* We have checked above that bb is not empty */</comment>
        <expr_stmt><expr><name pos:line="39" pos:column="9">e<pos:position pos:line="39" pos:column="10"/></name> <operator pos:line="39" pos:column="11">=<pos:position pos:line="39" pos:column="12"/></operator> <call><name pos:line="39" pos:column="13">APR_BRIGADE_LAST<pos:position pos:line="39" pos:column="29"/></name><argument_list pos:line="39" pos:column="29">(<argument><expr><name pos:line="39" pos:column="30">bb<pos:position pos:line="39" pos:column="32"/></name></expr></argument>)<pos:position pos:line="39" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="39" pos:column="34"/></expr_stmt>
        <if pos:line="40" pos:column="9">if <condition pos:line="40" pos:column="12">(<expr><call><name pos:line="40" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="40" pos:column="30"/></name><argument_list pos:line="40" pos:column="30">(<argument><expr><name pos:line="40" pos:column="31">e<pos:position pos:line="40" pos:column="32"/></name></expr></argument>)<pos:position pos:line="40" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="40" pos:column="34"/></condition><then pos:line="40" pos:column="34"> <block pos:line="40" pos:column="35">{
            <comment type="block" pos:line="41" pos:column="13">/*
             * If we already know the size of the response, we can skip
             * compression on responses smaller than the compression overhead.
             * However, if we compress, we must initialize deflate_out before
             * calling ap_pass_brigade() for the first time.  Otherwise the
             * headers will be sent to the client without
             * "Content-Encoding: gzip".
             */</comment>
            <expr_stmt><expr><name pos:line="49" pos:column="13">e<pos:position pos:line="49" pos:column="14"/></name> <operator pos:line="49" pos:column="15">=<pos:position pos:line="49" pos:column="16"/></operator> <call><name pos:line="49" pos:column="17">APR_BRIGADE_FIRST<pos:position pos:line="49" pos:column="34"/></name><argument_list pos:line="49" pos:column="34">(<argument><expr><name pos:line="49" pos:column="35">bb<pos:position pos:line="49" pos:column="37"/></name></expr></argument>)<pos:position pos:line="49" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
            <while pos:line="50" pos:column="13">while <condition pos:line="50" pos:column="19">(<expr><literal type="number" pos:line="50" pos:column="20">1<pos:position pos:line="50" pos:column="21"/></literal></expr>)<pos:position pos:line="50" pos:column="22"/></condition> <block pos:line="50" pos:column="23">{
                <decl_stmt><decl><type><name pos:line="51" pos:column="17">apr_status_t<pos:position pos:line="51" pos:column="29"/></name></type> <name pos:line="51" pos:column="30">rc<pos:position pos:line="51" pos:column="32"/></name></decl>;<pos:position pos:line="51" pos:column="33"/></decl_stmt>
                <if pos:line="52" pos:column="17">if <condition pos:line="52" pos:column="20">(<expr><call><name pos:line="52" pos:column="21">APR_BUCKET_IS_EOS<pos:position pos:line="52" pos:column="38"/></name><argument_list pos:line="52" pos:column="38">(<argument><expr><name pos:line="52" pos:column="39">e<pos:position pos:line="52" pos:column="40"/></name></expr></argument>)<pos:position pos:line="52" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="52" pos:column="42"/></condition><then pos:line="52" pos:column="42"> <block pos:line="52" pos:column="43">{
                    <expr_stmt><expr><call><name pos:line="53" pos:column="21">ap_log_rerror<pos:position pos:line="53" pos:column="34"/></name><argument_list pos:line="53" pos:column="34">(<argument><expr><name pos:line="53" pos:column="35">APLOG_MARK<pos:position pos:line="53" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="47">APLOG_TRACE1<pos:position pos:line="53" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="53" pos:column="61">0<pos:position pos:line="53" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="53" pos:column="64">r<pos:position pos:line="53" pos:column="65"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="54" pos:column="35">"Not compressing very small response of %"<pos:position pos:line="54" pos:column="77"/></literal>
                                  <name pos:line="55" pos:column="35">APR_SIZE_T_FMT<pos:position pos:line="55" pos:column="49"/></name> <literal type="string" pos:line="55" pos:column="50">" bytes"<pos:position pos:line="55" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="55" pos:column="60">len<pos:position pos:line="55" pos:column="63"/></name></expr></argument>)<pos:position pos:line="55" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="65"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="56" pos:column="21">ap_remove_output_filter<pos:position pos:line="56" pos:column="44"/></name><argument_list pos:line="56" pos:column="44">(<argument><expr><name pos:line="56" pos:column="45">f<pos:position pos:line="56" pos:column="46"/></name></expr></argument>)<pos:position pos:line="56" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="48"/></expr_stmt>
                    <return pos:line="57" pos:column="21">return <expr><call><name pos:line="57" pos:column="28">ap_pass_brigade<pos:position pos:line="57" pos:column="43"/></name><argument_list pos:line="57" pos:column="43">(<argument><expr><name><name pos:line="57" pos:column="44">f<pos:position pos:line="57" pos:column="45"/></name><operator pos:line="57" pos:column="45">-&gt;<pos:position pos:line="57" pos:column="50"/></operator><name pos:line="57" pos:column="47">next<pos:position pos:line="57" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="57" pos:column="53">bb<pos:position pos:line="57" pos:column="55"/></name></expr></argument>)<pos:position pos:line="57" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="57"/></return>
                }<pos:position pos:line="58" pos:column="18"/></block></then></if>
                <if pos:line="59" pos:column="17">if <condition pos:line="59" pos:column="20">(<expr><call><name pos:line="59" pos:column="21">APR_BUCKET_IS_METADATA<pos:position pos:line="59" pos:column="43"/></name><argument_list pos:line="59" pos:column="43">(<argument><expr><name pos:line="59" pos:column="44">e<pos:position pos:line="59" pos:column="45"/></name></expr></argument>)<pos:position pos:line="59" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="59" pos:column="47"/></condition><then pos:line="59" pos:column="47"> <block pos:line="59" pos:column="48">{
                    <expr_stmt><expr><name pos:line="60" pos:column="21">e<pos:position pos:line="60" pos:column="22"/></name> <operator pos:line="60" pos:column="23">=<pos:position pos:line="60" pos:column="24"/></operator> <call><name pos:line="60" pos:column="25">APR_BUCKET_NEXT<pos:position pos:line="60" pos:column="40"/></name><argument_list pos:line="60" pos:column="40">(<argument><expr><name pos:line="60" pos:column="41">e<pos:position pos:line="60" pos:column="42"/></name></expr></argument>)<pos:position pos:line="60" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="44"/></expr_stmt>
                    <continue pos:line="61" pos:column="21">continue;<pos:position pos:line="61" pos:column="30"/></continue>
                }<pos:position pos:line="62" pos:column="18"/></block></then></if>

                <expr_stmt><expr><name pos:line="64" pos:column="17">rc<pos:position pos:line="64" pos:column="19"/></name> <operator pos:line="64" pos:column="20">=<pos:position pos:line="64" pos:column="21"/></operator> <call><name pos:line="64" pos:column="22">apr_bucket_read<pos:position pos:line="64" pos:column="37"/></name><argument_list pos:line="64" pos:column="37">(<argument><expr><name pos:line="64" pos:column="38">e<pos:position pos:line="64" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="41">&amp;<pos:position pos:line="64" pos:column="46"/></operator><name pos:line="64" pos:column="42">data<pos:position pos:line="64" pos:column="46"/></name></expr></argument>, <argument><expr><operator pos:line="64" pos:column="48">&amp;<pos:position pos:line="64" pos:column="53"/></operator><name pos:line="64" pos:column="49">blen<pos:position pos:line="64" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="64" pos:column="55">APR_BLOCK_READ<pos:position pos:line="64" pos:column="69"/></name></expr></argument>)<pos:position pos:line="64" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="71"/></expr_stmt>
                <if pos:line="65" pos:column="17">if <condition pos:line="65" pos:column="20">(<expr><name pos:line="65" pos:column="21">rc<pos:position pos:line="65" pos:column="23"/></name> <operator pos:line="65" pos:column="24">!=<pos:position pos:line="65" pos:column="26"/></operator> <name pos:line="65" pos:column="27">APR_SUCCESS<pos:position pos:line="65" pos:column="38"/></name></expr>)<pos:position pos:line="65" pos:column="39"/></condition><then pos:line="65" pos:column="39">
                    <block type="pseudo"><return pos:line="66" pos:column="21">return <expr><name pos:line="66" pos:column="28">rc<pos:position pos:line="66" pos:column="30"/></name></expr>;<pos:position pos:line="66" pos:column="31"/></return></block></then></if>
                <expr_stmt><expr><name pos:line="67" pos:column="17">len<pos:position pos:line="67" pos:column="20"/></name> <operator pos:line="67" pos:column="21">+=<pos:position pos:line="67" pos:column="23"/></operator> <name pos:line="67" pos:column="24">blen<pos:position pos:line="67" pos:column="28"/></name></expr>;<pos:position pos:line="67" pos:column="29"/></expr_stmt>
                <comment type="block" pos:line="68" pos:column="17">/* 50 is for Content-Encoding and Vary headers and ETag suffix */</comment>
                <if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name pos:line="69" pos:column="21">len<pos:position pos:line="69" pos:column="24"/></name> <operator pos:line="69" pos:column="25">&gt;<pos:position pos:line="69" pos:column="29"/></operator> <sizeof pos:line="69" pos:column="27">sizeof<argument_list pos:line="69" pos:column="33">(<argument><expr><name pos:line="69" pos:column="34">gzip_header<pos:position pos:line="69" pos:column="45"/></name></expr></argument>)<pos:position pos:line="69" pos:column="46"/></argument_list></sizeof> <operator pos:line="69" pos:column="47">+<pos:position pos:line="69" pos:column="48"/></operator> <name pos:line="69" pos:column="49">VALIDATION_SIZE<pos:position pos:line="69" pos:column="64"/></name> <operator pos:line="69" pos:column="65">+<pos:position pos:line="69" pos:column="66"/></operator> <literal type="number" pos:line="69" pos:column="67">50<pos:position pos:line="69" pos:column="69"/></literal></expr>)<pos:position pos:line="69" pos:column="70"/></condition><then pos:line="69" pos:column="70">
                    <block type="pseudo"><break pos:line="70" pos:column="21">break;<pos:position pos:line="70" pos:column="27"/></break></block></then></if>

                <expr_stmt><expr><name pos:line="72" pos:column="17">e<pos:position pos:line="72" pos:column="18"/></name> <operator pos:line="72" pos:column="19">=<pos:position pos:line="72" pos:column="20"/></operator> <call><name pos:line="72" pos:column="21">APR_BUCKET_NEXT<pos:position pos:line="72" pos:column="36"/></name><argument_list pos:line="72" pos:column="36">(<argument><expr><name pos:line="72" pos:column="37">e<pos:position pos:line="72" pos:column="38"/></name></expr></argument>)<pos:position pos:line="72" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="72" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="73" pos:column="14"/></block></while>
        }<pos:position pos:line="74" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="76" pos:column="9">ctx<pos:position pos:line="76" pos:column="12"/></name> <operator pos:line="76" pos:column="13">=<pos:position pos:line="76" pos:column="14"/></operator> <name><name pos:line="76" pos:column="15">f<pos:position pos:line="76" pos:column="16"/></name><operator pos:line="76" pos:column="16">-&gt;<pos:position pos:line="76" pos:column="21"/></operator><name pos:line="76" pos:column="18">ctx<pos:position pos:line="76" pos:column="21"/></name></name> <operator pos:line="76" pos:column="22">=<pos:position pos:line="76" pos:column="23"/></operator> <call><name pos:line="76" pos:column="24">apr_pcalloc<pos:position pos:line="76" pos:column="35"/></name><argument_list pos:line="76" pos:column="35">(<argument><expr><name><name pos:line="76" pos:column="36">r<pos:position pos:line="76" pos:column="37"/></name><operator pos:line="76" pos:column="37">-&gt;<pos:position pos:line="76" pos:column="42"/></operator><name pos:line="76" pos:column="39">pool<pos:position pos:line="76" pos:column="43"/></name></name></expr></argument>, <argument><expr><sizeof pos:line="76" pos:column="45">sizeof<argument_list pos:line="76" pos:column="51">(<argument><expr><operator pos:line="76" pos:column="52">*<pos:position pos:line="76" pos:column="53"/></operator><name pos:line="76" pos:column="53">ctx<pos:position pos:line="76" pos:column="56"/></name></expr></argument>)<pos:position pos:line="76" pos:column="57"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="76" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="59"/></expr_stmt>

        <comment type="block" pos:line="78" pos:column="9">/*
         * Only work on main request, not subrequests,
         * that are not a 204 response with no content
         * and are not tagged with the no-gzip env variable
         * and not a partial response to a Range request.
         */</comment>
        <if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><operator pos:line="84" pos:column="13">(<pos:position pos:line="84" pos:column="14"/></operator><name><name pos:line="84" pos:column="14">r<pos:position pos:line="84" pos:column="15"/></name><operator pos:line="84" pos:column="15">-&gt;<pos:position pos:line="84" pos:column="20"/></operator><name pos:line="84" pos:column="17">main<pos:position pos:line="84" pos:column="21"/></name></name> <operator pos:line="84" pos:column="22">!=<pos:position pos:line="84" pos:column="24"/></operator> <name pos:line="84" pos:column="25">NULL<pos:position pos:line="84" pos:column="29"/></name><operator pos:line="84" pos:column="29">)<pos:position pos:line="84" pos:column="30"/></operator> <operator pos:line="84" pos:column="31">||<pos:position pos:line="84" pos:column="33"/></operator> <operator pos:line="84" pos:column="34">(<pos:position pos:line="84" pos:column="35"/></operator><name><name pos:line="84" pos:column="35">r<pos:position pos:line="84" pos:column="36"/></name><operator pos:line="84" pos:column="36">-&gt;<pos:position pos:line="84" pos:column="41"/></operator><name pos:line="84" pos:column="38">status<pos:position pos:line="84" pos:column="44"/></name></name> <operator pos:line="84" pos:column="45">==<pos:position pos:line="84" pos:column="47"/></operator> <name pos:line="84" pos:column="48">HTTP_NO_CONTENT<pos:position pos:line="84" pos:column="63"/></name><operator pos:line="84" pos:column="63">)<pos:position pos:line="84" pos:column="64"/></operator> <operator pos:line="84" pos:column="65">||<pos:position pos:line="84" pos:column="67"/></operator>
            <call><name pos:line="85" pos:column="13">apr_table_get<pos:position pos:line="85" pos:column="26"/></name><argument_list pos:line="85" pos:column="26">(<argument><expr><name><name pos:line="85" pos:column="27">r<pos:position pos:line="85" pos:column="28"/></name><operator pos:line="85" pos:column="28">-&gt;<pos:position pos:line="85" pos:column="33"/></operator><name pos:line="85" pos:column="30">subprocess_env<pos:position pos:line="85" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="85" pos:column="46">"no-gzip"<pos:position pos:line="85" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="85" pos:column="56"/></argument_list></call> <operator pos:line="85" pos:column="57">||<pos:position pos:line="85" pos:column="59"/></operator>
            <call><name pos:line="86" pos:column="13">apr_table_get<pos:position pos:line="86" pos:column="26"/></name><argument_list pos:line="86" pos:column="26">(<argument><expr><name><name pos:line="86" pos:column="27">r<pos:position pos:line="86" pos:column="28"/></name><operator pos:line="86" pos:column="28">-&gt;<pos:position pos:line="86" pos:column="33"/></operator><name pos:line="86" pos:column="30">headers_out<pos:position pos:line="86" pos:column="41"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="43">"Content-Range"<pos:position pos:line="86" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="59"/></argument_list></call></expr>
           )<pos:position pos:line="87" pos:column="13"/></condition><then pos:line="87" pos:column="13"> <block pos:line="87" pos:column="14">{
            <if pos:line="88" pos:column="13">if <condition pos:line="88" pos:column="16">(<expr><call><name pos:line="88" pos:column="17">APLOG_R_IS_LEVEL<pos:position pos:line="88" pos:column="33"/></name><argument_list pos:line="88" pos:column="33">(<argument><expr><name pos:line="88" pos:column="34">r<pos:position pos:line="88" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="88" pos:column="37">APLOG_TRACE1<pos:position pos:line="88" pos:column="49"/></name></expr></argument>)<pos:position pos:line="88" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="88" pos:column="51"/></condition><then pos:line="88" pos:column="51"> <block pos:line="88" pos:column="52">{
                <decl_stmt><decl><type><specifier pos:line="89" pos:column="17">const<pos:position pos:line="89" pos:column="22"/></specifier> <name pos:line="89" pos:column="23">char<pos:position pos:line="89" pos:column="27"/></name> <modifier pos:line="89" pos:column="28">*<pos:position pos:line="89" pos:column="29"/></modifier></type><name pos:line="89" pos:column="29">reason<pos:position pos:line="89" pos:column="35"/></name> <init pos:line="89" pos:column="36">=
                    <expr><ternary><condition><expr><operator pos:line="90" pos:column="21">(<pos:position pos:line="90" pos:column="22"/></operator><name><name pos:line="90" pos:column="22">r<pos:position pos:line="90" pos:column="23"/></name><operator pos:line="90" pos:column="23">-&gt;<pos:position pos:line="90" pos:column="28"/></operator><name pos:line="90" pos:column="25">main<pos:position pos:line="90" pos:column="29"/></name></name> <operator pos:line="90" pos:column="30">!=<pos:position pos:line="90" pos:column="32"/></operator> <name pos:line="90" pos:column="33">NULL<pos:position pos:line="90" pos:column="37"/></name><operator pos:line="90" pos:column="37">)<pos:position pos:line="90" pos:column="38"/></operator></expr>                           ?<pos:position pos:line="90" pos:column="66"/></condition><then pos:line="90" pos:column="66"> <expr><literal type="string" pos:line="90" pos:column="67">"subrequest"<pos:position pos:line="90" pos:column="79"/></literal></expr> <pos:position pos:line="90" pos:column="80"/></then><else pos:line="90" pos:column="80">:
                    <expr><ternary><condition><expr><operator pos:line="91" pos:column="21">(<pos:position pos:line="91" pos:column="22"/></operator><name><name pos:line="91" pos:column="22">r<pos:position pos:line="91" pos:column="23"/></name><operator pos:line="91" pos:column="23">-&gt;<pos:position pos:line="91" pos:column="28"/></operator><name pos:line="91" pos:column="25">status<pos:position pos:line="91" pos:column="31"/></name></name> <operator pos:line="91" pos:column="32">==<pos:position pos:line="91" pos:column="34"/></operator> <name pos:line="91" pos:column="35">HTTP_NO_CONTENT<pos:position pos:line="91" pos:column="50"/></name><operator pos:line="91" pos:column="50">)<pos:position pos:line="91" pos:column="51"/></operator></expr>              ?<pos:position pos:line="91" pos:column="66"/></condition><then pos:line="91" pos:column="66"> <expr><literal type="string" pos:line="91" pos:column="67">"no content"<pos:position pos:line="91" pos:column="79"/></literal></expr> <pos:position pos:line="91" pos:column="80"/></then><else pos:line="91" pos:column="80">:
                    <expr><ternary><condition><expr><call><name pos:line="92" pos:column="21">apr_table_get<pos:position pos:line="92" pos:column="34"/></name><argument_list pos:line="92" pos:column="34">(<argument><expr><name><name pos:line="92" pos:column="35">r<pos:position pos:line="92" pos:column="36"/></name><operator pos:line="92" pos:column="36">-&gt;<pos:position pos:line="92" pos:column="41"/></operator><name pos:line="92" pos:column="38">subprocess_env<pos:position pos:line="92" pos:column="52"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="92" pos:column="54">"no-gzip"<pos:position pos:line="92" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="64"/></argument_list></call></expr> ?<pos:position pos:line="92" pos:column="66"/></condition><then pos:line="92" pos:column="66"> <expr><literal type="string" pos:line="92" pos:column="67">"no-gzip"<pos:position pos:line="92" pos:column="76"/></literal></expr> <pos:position pos:line="92" pos:column="77"/></then><else pos:line="92" pos:column="77">:
                    <expr><literal type="string" pos:line="93" pos:column="21">"content-range"<pos:position pos:line="93" pos:column="36"/></literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></init></decl>;<pos:position pos:line="93" pos:column="37"/></decl_stmt>
                <expr_stmt><expr><call><name pos:line="94" pos:column="17">ap_log_rerror<pos:position pos:line="94" pos:column="30"/></name><argument_list pos:line="94" pos:column="30">(<argument><expr><name pos:line="94" pos:column="31">APLOG_MARK<pos:position pos:line="94" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="94" pos:column="43">APLOG_TRACE1<pos:position pos:line="94" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="94" pos:column="57">0<pos:position pos:line="94" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="94" pos:column="60">r<pos:position pos:line="94" pos:column="61"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="95" pos:column="31">"Not compressing (%s)"<pos:position pos:line="95" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="95" pos:column="55">reason<pos:position pos:line="95" pos:column="61"/></name></expr></argument>)<pos:position pos:line="95" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="63"/></expr_stmt>
            }<pos:position pos:line="96" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="97" pos:column="13">ap_remove_output_filter<pos:position pos:line="97" pos:column="36"/></name><argument_list pos:line="97" pos:column="36">(<argument><expr><name pos:line="97" pos:column="37">f<pos:position pos:line="97" pos:column="38"/></name></expr></argument>)<pos:position pos:line="97" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="97" pos:column="40"/></expr_stmt>
            <return pos:line="98" pos:column="13">return <expr><call><name pos:line="98" pos:column="20">ap_pass_brigade<pos:position pos:line="98" pos:column="35"/></name><argument_list pos:line="98" pos:column="35">(<argument><expr><name><name pos:line="98" pos:column="36">f<pos:position pos:line="98" pos:column="37"/></name><operator pos:line="98" pos:column="37">-&gt;<pos:position pos:line="98" pos:column="42"/></operator><name pos:line="98" pos:column="39">next<pos:position pos:line="98" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="98" pos:column="45">bb<pos:position pos:line="98" pos:column="47"/></name></expr></argument>)<pos:position pos:line="98" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="98" pos:column="49"/></return>
        }<pos:position pos:line="99" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="101" pos:column="9">/* Some browsers might have problems with content types
         * other than text/html, so set gzip-only-text/html
         * (with browsermatch) for them
         */</comment>
        <if pos:line="105" pos:column="9">if <condition pos:line="105" pos:column="12">(<expr><name><name pos:line="105" pos:column="13">r<pos:position pos:line="105" pos:column="14"/></name><operator pos:line="105" pos:column="14">-&gt;<pos:position pos:line="105" pos:column="19"/></operator><name pos:line="105" pos:column="16">content_type<pos:position pos:line="105" pos:column="28"/></name></name> <operator pos:line="105" pos:column="29">==<pos:position pos:line="105" pos:column="31"/></operator> <name pos:line="105" pos:column="32">NULL<pos:position pos:line="105" pos:column="36"/></name>
             <operator pos:line="106" pos:column="14">||<pos:position pos:line="106" pos:column="16"/></operator> <call><name pos:line="106" pos:column="17">strncmp<pos:position pos:line="106" pos:column="24"/></name><argument_list pos:line="106" pos:column="24">(<argument><expr><name><name pos:line="106" pos:column="25">r<pos:position pos:line="106" pos:column="26"/></name><operator pos:line="106" pos:column="26">-&gt;<pos:position pos:line="106" pos:column="31"/></operator><name pos:line="106" pos:column="28">content_type<pos:position pos:line="106" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="106" pos:column="42">"text/html"<pos:position pos:line="106" pos:column="53"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="106" pos:column="55">9<pos:position pos:line="106" pos:column="56"/></literal></expr></argument>)<pos:position pos:line="106" pos:column="57"/></argument_list></call></expr>)<pos:position pos:line="106" pos:column="58"/></condition><then pos:line="106" pos:column="58"> <block pos:line="106" pos:column="59">{
            <decl_stmt><decl><type><specifier pos:line="107" pos:column="13">const<pos:position pos:line="107" pos:column="18"/></specifier> <name pos:line="107" pos:column="19">char<pos:position pos:line="107" pos:column="23"/></name> <modifier pos:line="107" pos:column="24">*<pos:position pos:line="107" pos:column="25"/></modifier></type><name pos:line="107" pos:column="25">env_value<pos:position pos:line="107" pos:column="34"/></name> <init pos:line="107" pos:column="35">= <expr><call><name pos:line="107" pos:column="37">apr_table_get<pos:position pos:line="107" pos:column="50"/></name><argument_list pos:line="107" pos:column="50">(<argument><expr><name><name pos:line="107" pos:column="51">r<pos:position pos:line="107" pos:column="52"/></name><operator pos:line="107" pos:column="52">-&gt;<pos:position pos:line="107" pos:column="57"/></operator><name pos:line="107" pos:column="54">subprocess_env<pos:position pos:line="107" pos:column="68"/></name></name></expr></argument>,
                                                  <argument><expr><literal type="string" pos:line="108" pos:column="51">"gzip-only-text/html"<pos:position pos:line="108" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="108" pos:column="73"/></argument_list></call></expr></init></decl>;<pos:position pos:line="108" pos:column="74"/></decl_stmt>
            <if pos:line="109" pos:column="13">if <condition pos:line="109" pos:column="16">( <expr><name pos:line="109" pos:column="18">env_value<pos:position pos:line="109" pos:column="27"/></name> <operator pos:line="109" pos:column="28">&amp;&amp;<pos:position pos:line="109" pos:column="38"/></operator> <operator pos:line="109" pos:column="31">(<pos:position pos:line="109" pos:column="32"/></operator><call><name pos:line="109" pos:column="32">strcmp<pos:position pos:line="109" pos:column="38"/></name><argument_list pos:line="109" pos:column="38">(<argument><expr><name pos:line="109" pos:column="39">env_value<pos:position pos:line="109" pos:column="48"/></name></expr></argument>,<argument><expr><literal type="string" pos:line="109" pos:column="49">"1"<pos:position pos:line="109" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="109" pos:column="53"/></argument_list></call> <operator pos:line="109" pos:column="54">==<pos:position pos:line="109" pos:column="56"/></operator> <literal type="number" pos:line="109" pos:column="57">0<pos:position pos:line="109" pos:column="58"/></literal><operator pos:line="109" pos:column="58">)<pos:position pos:line="109" pos:column="59"/></operator></expr> )<pos:position pos:line="109" pos:column="61"/></condition><then pos:line="109" pos:column="61"> <block pos:line="109" pos:column="62">{
                <expr_stmt><expr><call><name pos:line="110" pos:column="17">ap_log_rerror<pos:position pos:line="110" pos:column="30"/></name><argument_list pos:line="110" pos:column="30">(<argument><expr><name pos:line="110" pos:column="31">APLOG_MARK<pos:position pos:line="110" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="43">APLOG_TRACE1<pos:position pos:line="110" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="110" pos:column="57">0<pos:position pos:line="110" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="110" pos:column="60">r<pos:position pos:line="110" pos:column="61"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="111" pos:column="31">"Not compressing, (gzip-only-text/html)"<pos:position pos:line="111" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="73"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="112" pos:column="17">ap_remove_output_filter<pos:position pos:line="112" pos:column="40"/></name><argument_list pos:line="112" pos:column="40">(<argument><expr><name pos:line="112" pos:column="41">f<pos:position pos:line="112" pos:column="42"/></name></expr></argument>)<pos:position pos:line="112" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="44"/></expr_stmt>
                <return pos:line="113" pos:column="17">return <expr><call><name pos:line="113" pos:column="24">ap_pass_brigade<pos:position pos:line="113" pos:column="39"/></name><argument_list pos:line="113" pos:column="39">(<argument><expr><name><name pos:line="113" pos:column="40">f<pos:position pos:line="113" pos:column="41"/></name><operator pos:line="113" pos:column="41">-&gt;<pos:position pos:line="113" pos:column="46"/></operator><name pos:line="113" pos:column="43">next<pos:position pos:line="113" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="113" pos:column="49">bb<pos:position pos:line="113" pos:column="51"/></name></expr></argument>)<pos:position pos:line="113" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="53"/></return>
            }<pos:position pos:line="114" pos:column="14"/></block></then></if>
        }<pos:position pos:line="115" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="117" pos:column="9">/* Let's see what our current Content-Encoding is.
         * If it's already encoded, don't compress again.
         * (We could, but let's not.)
         */</comment>
        <expr_stmt><expr><name pos:line="121" pos:column="9">encoding<pos:position pos:line="121" pos:column="17"/></name> <operator pos:line="121" pos:column="18">=<pos:position pos:line="121" pos:column="19"/></operator> <call><name pos:line="121" pos:column="20">apr_table_get<pos:position pos:line="121" pos:column="33"/></name><argument_list pos:line="121" pos:column="33">(<argument><expr><name><name pos:line="121" pos:column="34">r<pos:position pos:line="121" pos:column="35"/></name><operator pos:line="121" pos:column="35">-&gt;<pos:position pos:line="121" pos:column="40"/></operator><name pos:line="121" pos:column="37">headers_out<pos:position pos:line="121" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="121" pos:column="50">"Content-Encoding"<pos:position pos:line="121" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="121" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="121" pos:column="70"/></expr_stmt>
        <if pos:line="122" pos:column="9">if <condition pos:line="122" pos:column="12">(<expr><name pos:line="122" pos:column="13">encoding<pos:position pos:line="122" pos:column="21"/></name></expr>)<pos:position pos:line="122" pos:column="22"/></condition><then pos:line="122" pos:column="22"> <block pos:line="122" pos:column="23">{
            <decl_stmt><decl><type><specifier pos:line="123" pos:column="13">const<pos:position pos:line="123" pos:column="18"/></specifier> <name pos:line="123" pos:column="19">char<pos:position pos:line="123" pos:column="23"/></name> <modifier pos:line="123" pos:column="24">*<pos:position pos:line="123" pos:column="25"/></modifier></type><name pos:line="123" pos:column="25">err_enc<pos:position pos:line="123" pos:column="32"/></name></decl>;<pos:position pos:line="123" pos:column="33"/></decl_stmt>

            <expr_stmt><expr><name pos:line="125" pos:column="13">err_enc<pos:position pos:line="125" pos:column="20"/></name> <operator pos:line="125" pos:column="21">=<pos:position pos:line="125" pos:column="22"/></operator> <call><name pos:line="125" pos:column="23">apr_table_get<pos:position pos:line="125" pos:column="36"/></name><argument_list pos:line="125" pos:column="36">(<argument><expr><name><name pos:line="125" pos:column="37">r<pos:position pos:line="125" pos:column="38"/></name><operator pos:line="125" pos:column="38">-&gt;<pos:position pos:line="125" pos:column="43"/></operator><name pos:line="125" pos:column="40">err_headers_out<pos:position pos:line="125" pos:column="55"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="125" pos:column="57">"Content-Encoding"<pos:position pos:line="125" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="125" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="77"/></expr_stmt>
            <if pos:line="126" pos:column="13">if <condition pos:line="126" pos:column="16">(<expr><name pos:line="126" pos:column="17">err_enc<pos:position pos:line="126" pos:column="24"/></name></expr>)<pos:position pos:line="126" pos:column="25"/></condition><then pos:line="126" pos:column="25"> <block pos:line="126" pos:column="26">{
                <expr_stmt><expr><name pos:line="127" pos:column="17">encoding<pos:position pos:line="127" pos:column="25"/></name> <operator pos:line="127" pos:column="26">=<pos:position pos:line="127" pos:column="27"/></operator> <call><name pos:line="127" pos:column="28">apr_pstrcat<pos:position pos:line="127" pos:column="39"/></name><argument_list pos:line="127" pos:column="39">(<argument><expr><name><name pos:line="127" pos:column="40">r<pos:position pos:line="127" pos:column="41"/></name><operator pos:line="127" pos:column="41">-&gt;<pos:position pos:line="127" pos:column="46"/></operator><name pos:line="127" pos:column="43">pool<pos:position pos:line="127" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="49">encoding<pos:position pos:line="127" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="127" pos:column="59">","<pos:position pos:line="127" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="127" pos:column="64">err_enc<pos:position pos:line="127" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="73">NULL<pos:position pos:line="127" pos:column="77"/></name></expr></argument>)<pos:position pos:line="127" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="79"/></expr_stmt>
            }<pos:position pos:line="128" pos:column="14"/></block></then></if>
        }<pos:position pos:line="129" pos:column="10"/></block></then>
        <else pos:line="130" pos:column="9">else <block pos:line="130" pos:column="14">{
            <expr_stmt><expr><name pos:line="131" pos:column="13">encoding<pos:position pos:line="131" pos:column="21"/></name> <operator pos:line="131" pos:column="22">=<pos:position pos:line="131" pos:column="23"/></operator> <call><name pos:line="131" pos:column="24">apr_table_get<pos:position pos:line="131" pos:column="37"/></name><argument_list pos:line="131" pos:column="37">(<argument><expr><name><name pos:line="131" pos:column="38">r<pos:position pos:line="131" pos:column="39"/></name><operator pos:line="131" pos:column="39">-&gt;<pos:position pos:line="131" pos:column="44"/></operator><name pos:line="131" pos:column="41">err_headers_out<pos:position pos:line="131" pos:column="56"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="131" pos:column="58">"Content-Encoding"<pos:position pos:line="131" pos:column="76"/></literal></expr></argument>)<pos:position pos:line="131" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="78"/></expr_stmt>
        }<pos:position pos:line="132" pos:column="10"/></block></else></if>

        <if pos:line="134" pos:column="9">if <condition pos:line="134" pos:column="12">(<expr><name><name pos:line="134" pos:column="13">r<pos:position pos:line="134" pos:column="14"/></name><operator pos:line="134" pos:column="14">-&gt;<pos:position pos:line="134" pos:column="19"/></operator><name pos:line="134" pos:column="16">content_encoding<pos:position pos:line="134" pos:column="32"/></name></name></expr>)<pos:position pos:line="134" pos:column="33"/></condition><then pos:line="134" pos:column="33"> <block pos:line="134" pos:column="34">{
            <expr_stmt><expr><name pos:line="135" pos:column="13">encoding<pos:position pos:line="135" pos:column="21"/></name> <operator pos:line="135" pos:column="22">=<pos:position pos:line="135" pos:column="23"/></operator> <ternary><condition><expr><name pos:line="135" pos:column="24">encoding<pos:position pos:line="135" pos:column="32"/></name></expr> ?<pos:position pos:line="135" pos:column="34"/></condition><then pos:line="135" pos:column="34"> <expr><call><name pos:line="135" pos:column="35">apr_pstrcat<pos:position pos:line="135" pos:column="46"/></name><argument_list pos:line="135" pos:column="46">(<argument><expr><name><name pos:line="135" pos:column="47">r<pos:position pos:line="135" pos:column="48"/></name><operator pos:line="135" pos:column="48">-&gt;<pos:position pos:line="135" pos:column="53"/></operator><name pos:line="135" pos:column="50">pool<pos:position pos:line="135" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="135" pos:column="56">encoding<pos:position pos:line="135" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="135" pos:column="66">","<pos:position pos:line="135" pos:column="69"/></literal></expr></argument>,
                                              <argument><expr><name><name pos:line="136" pos:column="47">r<pos:position pos:line="136" pos:column="48"/></name><operator pos:line="136" pos:column="48">-&gt;<pos:position pos:line="136" pos:column="53"/></operator><name pos:line="136" pos:column="50">content_encoding<pos:position pos:line="136" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="68">NULL<pos:position pos:line="136" pos:column="72"/></name></expr></argument>)<pos:position pos:line="136" pos:column="73"/></argument_list></call></expr>
                                <pos:position pos:line="137" pos:column="33"/></then><else pos:line="137" pos:column="33">: <expr><name><name pos:line="137" pos:column="35">r<pos:position pos:line="137" pos:column="36"/></name><operator pos:line="137" pos:column="36">-&gt;<pos:position pos:line="137" pos:column="41"/></operator><name pos:line="137" pos:column="38">content_encoding<pos:position pos:line="137" pos:column="54"/></name></name></expr></else></ternary></expr>;<pos:position pos:line="137" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="138" pos:column="10"/></block></then></if>

        <if pos:line="140" pos:column="9">if <condition pos:line="140" pos:column="12">(<expr><name pos:line="140" pos:column="13">encoding<pos:position pos:line="140" pos:column="21"/></name></expr>)<pos:position pos:line="140" pos:column="22"/></condition><then pos:line="140" pos:column="22"> <block pos:line="140" pos:column="23">{
            <decl_stmt><decl><type><specifier pos:line="141" pos:column="13">const<pos:position pos:line="141" pos:column="18"/></specifier> <name pos:line="141" pos:column="19">char<pos:position pos:line="141" pos:column="23"/></name> <modifier pos:line="141" pos:column="24">*<pos:position pos:line="141" pos:column="25"/></modifier></type><name pos:line="141" pos:column="25">tmp<pos:position pos:line="141" pos:column="28"/></name> <init pos:line="141" pos:column="29">= <expr><name pos:line="141" pos:column="31">encoding<pos:position pos:line="141" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="141" pos:column="40"/></decl_stmt>

            <expr_stmt><expr><name pos:line="143" pos:column="13">token<pos:position pos:line="143" pos:column="18"/></name> <operator pos:line="143" pos:column="19">=<pos:position pos:line="143" pos:column="20"/></operator> <call><name pos:line="143" pos:column="21">ap_get_token<pos:position pos:line="143" pos:column="33"/></name><argument_list pos:line="143" pos:column="33">(<argument><expr><name><name pos:line="143" pos:column="34">r<pos:position pos:line="143" pos:column="35"/></name><operator pos:line="143" pos:column="35">-&gt;<pos:position pos:line="143" pos:column="40"/></operator><name pos:line="143" pos:column="37">pool<pos:position pos:line="143" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="143" pos:column="43">&amp;<pos:position pos:line="143" pos:column="48"/></operator><name pos:line="143" pos:column="44">tmp<pos:position pos:line="143" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="143" pos:column="49">0<pos:position pos:line="143" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="52"/></expr_stmt>
            <while pos:line="144" pos:column="13">while <condition pos:line="144" pos:column="19">(<expr><name pos:line="144" pos:column="20">token<pos:position pos:line="144" pos:column="25"/></name> <operator pos:line="144" pos:column="26">&amp;&amp;<pos:position pos:line="144" pos:column="36"/></operator> <operator pos:line="144" pos:column="29">*<pos:position pos:line="144" pos:column="30"/></operator><name pos:line="144" pos:column="30">token<pos:position pos:line="144" pos:column="35"/></name></expr>)<pos:position pos:line="144" pos:column="36"/></condition> <block pos:line="144" pos:column="37">{
                <comment type="block" pos:line="145" pos:column="17">/* stolen from mod_negotiation: */</comment>
                <if pos:line="146" pos:column="17">if <condition pos:line="146" pos:column="20">(<expr><call><name pos:line="146" pos:column="21">strcmp<pos:position pos:line="146" pos:column="27"/></name><argument_list pos:line="146" pos:column="27">(<argument><expr><name pos:line="146" pos:column="28">token<pos:position pos:line="146" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="35">"identity"<pos:position pos:line="146" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="46"/></argument_list></call> <operator pos:line="146" pos:column="47">&amp;&amp;<pos:position pos:line="146" pos:column="57"/></operator> <call><name pos:line="146" pos:column="50">strcmp<pos:position pos:line="146" pos:column="56"/></name><argument_list pos:line="146" pos:column="56">(<argument><expr><name pos:line="146" pos:column="57">token<pos:position pos:line="146" pos:column="62"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="146" pos:column="64">"7bit"<pos:position pos:line="146" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="146" pos:column="71"/></argument_list></call> <operator pos:line="146" pos:column="72">&amp;&amp;<pos:position pos:line="146" pos:column="82"/></operator>
                    <call><name pos:line="147" pos:column="21">strcmp<pos:position pos:line="147" pos:column="27"/></name><argument_list pos:line="147" pos:column="27">(<argument><expr><name pos:line="147" pos:column="28">token<pos:position pos:line="147" pos:column="33"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="35">"8bit"<pos:position pos:line="147" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="42"/></argument_list></call> <operator pos:line="147" pos:column="43">&amp;&amp;<pos:position pos:line="147" pos:column="53"/></operator> <call><name pos:line="147" pos:column="46">strcmp<pos:position pos:line="147" pos:column="52"/></name><argument_list pos:line="147" pos:column="52">(<argument><expr><name pos:line="147" pos:column="53">token<pos:position pos:line="147" pos:column="58"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="60">"binary"<pos:position pos:line="147" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="147" pos:column="70"/></condition><then pos:line="147" pos:column="70"> <block pos:line="147" pos:column="71">{
                    <expr_stmt><expr><call><name pos:line="148" pos:column="21">ap_log_rerror<pos:position pos:line="148" pos:column="34"/></name><argument_list pos:line="148" pos:column="34">(<argument><expr><name pos:line="148" pos:column="35">APLOG_MARK<pos:position pos:line="148" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="148" pos:column="47">APLOG_TRACE1<pos:position pos:line="148" pos:column="59"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="148" pos:column="61">0<pos:position pos:line="148" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="148" pos:column="64">r<pos:position pos:line="148" pos:column="65"/></name></expr></argument>,
                                  <argument><expr><literal type="string" pos:line="149" pos:column="35">"Not compressing (content-encoding already "<pos:position pos:line="149" pos:column="79"/></literal>
                                  <literal type="string" pos:line="150" pos:column="35">" set: %s)"<pos:position pos:line="150" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="150" pos:column="48">token<pos:position pos:line="150" pos:column="53"/></name></expr></argument>)<pos:position pos:line="150" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="55"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="151" pos:column="21">ap_remove_output_filter<pos:position pos:line="151" pos:column="44"/></name><argument_list pos:line="151" pos:column="44">(<argument><expr><name pos:line="151" pos:column="45">f<pos:position pos:line="151" pos:column="46"/></name></expr></argument>)<pos:position pos:line="151" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="151" pos:column="48"/></expr_stmt>
                    <return pos:line="152" pos:column="21">return <expr><call><name pos:line="152" pos:column="28">ap_pass_brigade<pos:position pos:line="152" pos:column="43"/></name><argument_list pos:line="152" pos:column="43">(<argument><expr><name><name pos:line="152" pos:column="44">f<pos:position pos:line="152" pos:column="45"/></name><operator pos:line="152" pos:column="45">-&gt;<pos:position pos:line="152" pos:column="50"/></operator><name pos:line="152" pos:column="47">next<pos:position pos:line="152" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="152" pos:column="53">bb<pos:position pos:line="152" pos:column="55"/></name></expr></argument>)<pos:position pos:line="152" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="57"/></return>
                }<pos:position pos:line="153" pos:column="18"/></block></then></if>

                <comment type="block" pos:line="155" pos:column="17">/* Otherwise, skip token */</comment>
                <if pos:line="156" pos:column="17">if <condition pos:line="156" pos:column="20">(<expr><operator pos:line="156" pos:column="21">*<pos:position pos:line="156" pos:column="22"/></operator><name pos:line="156" pos:column="22">tmp<pos:position pos:line="156" pos:column="25"/></name></expr>)<pos:position pos:line="156" pos:column="26"/></condition><then pos:line="156" pos:column="26"> <block pos:line="156" pos:column="27">{
                    <expr_stmt><expr><operator pos:line="157" pos:column="21">++<pos:position pos:line="157" pos:column="23"/></operator><name pos:line="157" pos:column="23">tmp<pos:position pos:line="157" pos:column="26"/></name></expr>;<pos:position pos:line="157" pos:column="27"/></expr_stmt>
                }<pos:position pos:line="158" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="159" pos:column="17">token<pos:position pos:line="159" pos:column="22"/></name> <operator pos:line="159" pos:column="23">=<pos:position pos:line="159" pos:column="24"/></operator> <ternary><condition><expr><operator pos:line="159" pos:column="25">(<pos:position pos:line="159" pos:column="26"/></operator><operator pos:line="159" pos:column="26">*<pos:position pos:line="159" pos:column="27"/></operator><name pos:line="159" pos:column="27">tmp<pos:position pos:line="159" pos:column="30"/></name><operator pos:line="159" pos:column="30">)<pos:position pos:line="159" pos:column="31"/></operator></expr> ?<pos:position pos:line="159" pos:column="33"/></condition><then pos:line="159" pos:column="33"> <expr><call><name pos:line="159" pos:column="34">ap_get_token<pos:position pos:line="159" pos:column="46"/></name><argument_list pos:line="159" pos:column="46">(<argument><expr><name><name pos:line="159" pos:column="47">r<pos:position pos:line="159" pos:column="48"/></name><operator pos:line="159" pos:column="48">-&gt;<pos:position pos:line="159" pos:column="53"/></operator><name pos:line="159" pos:column="50">pool<pos:position pos:line="159" pos:column="54"/></name></name></expr></argument>, <argument><expr><operator pos:line="159" pos:column="56">&amp;<pos:position pos:line="159" pos:column="61"/></operator><name pos:line="159" pos:column="57">tmp<pos:position pos:line="159" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="159" pos:column="62">0<pos:position pos:line="159" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="159" pos:column="64"/></argument_list></call></expr> <pos:position pos:line="159" pos:column="65"/></then><else pos:line="159" pos:column="65">: <expr><name pos:line="159" pos:column="67">NULL<pos:position pos:line="159" pos:column="71"/></name></expr></else></ternary></expr>;<pos:position pos:line="159" pos:column="72"/></expr_stmt>
            }<pos:position pos:line="160" pos:column="14"/></block></while>
        }<pos:position pos:line="161" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="163" pos:column="9">/* Even if we don't accept this request based on it not having
         * the Accept-Encoding, we need to note that we were looking
         * for this header and downstream proxies should be aware of that.
         */</comment>
        <expr_stmt><expr><call><name pos:line="167" pos:column="9">apr_table_mergen<pos:position pos:line="167" pos:column="25"/></name><argument_list pos:line="167" pos:column="25">(<argument><expr><name><name pos:line="167" pos:column="26">r<pos:position pos:line="167" pos:column="27"/></name><operator pos:line="167" pos:column="27">-&gt;<pos:position pos:line="167" pos:column="32"/></operator><name pos:line="167" pos:column="29">headers_out<pos:position pos:line="167" pos:column="40"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="167" pos:column="42">"Vary"<pos:position pos:line="167" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="167" pos:column="50">"Accept-Encoding"<pos:position pos:line="167" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="167" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="69"/></expr_stmt>

        <comment type="block" pos:line="169" pos:column="9">/* force-gzip will just force it out regardless if the browser
         * can actually do anything with it.
         */</comment>
        <if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><operator pos:line="172" pos:column="13">!<pos:position pos:line="172" pos:column="14"/></operator><call><name pos:line="172" pos:column="14">apr_table_get<pos:position pos:line="172" pos:column="27"/></name><argument_list pos:line="172" pos:column="27">(<argument><expr><name><name pos:line="172" pos:column="28">r<pos:position pos:line="172" pos:column="29"/></name><operator pos:line="172" pos:column="29">-&gt;<pos:position pos:line="172" pos:column="34"/></operator><name pos:line="172" pos:column="31">subprocess_env<pos:position pos:line="172" pos:column="45"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="172" pos:column="47">"force-gzip"<pos:position pos:line="172" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="172" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="172" pos:column="61"/></condition><then pos:line="172" pos:column="61"> <block pos:line="172" pos:column="62">{
            <decl_stmt><decl><type><specifier pos:line="173" pos:column="13">const<pos:position pos:line="173" pos:column="18"/></specifier> <name pos:line="173" pos:column="19">char<pos:position pos:line="173" pos:column="23"/></name> <modifier pos:line="173" pos:column="24">*<pos:position pos:line="173" pos:column="25"/></modifier></type><name pos:line="173" pos:column="25">accepts<pos:position pos:line="173" pos:column="32"/></name></decl>;<pos:position pos:line="173" pos:column="33"/></decl_stmt>
            <comment type="block" pos:line="174" pos:column="13">/* if they don't have the line, then they can't play */</comment>
            <expr_stmt><expr><name pos:line="175" pos:column="13">accepts<pos:position pos:line="175" pos:column="20"/></name> <operator pos:line="175" pos:column="21">=<pos:position pos:line="175" pos:column="22"/></operator> <call><name pos:line="175" pos:column="23">apr_table_get<pos:position pos:line="175" pos:column="36"/></name><argument_list pos:line="175" pos:column="36">(<argument><expr><name><name pos:line="175" pos:column="37">r<pos:position pos:line="175" pos:column="38"/></name><operator pos:line="175" pos:column="38">-&gt;<pos:position pos:line="175" pos:column="43"/></operator><name pos:line="175" pos:column="40">headers_in<pos:position pos:line="175" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="52">"Accept-Encoding"<pos:position pos:line="175" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="175" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="71"/></expr_stmt>
            <if pos:line="176" pos:column="13">if <condition pos:line="176" pos:column="16">(<expr><name pos:line="176" pos:column="17">accepts<pos:position pos:line="176" pos:column="24"/></name> <operator pos:line="176" pos:column="25">==<pos:position pos:line="176" pos:column="27"/></operator> <name pos:line="176" pos:column="28">NULL<pos:position pos:line="176" pos:column="32"/></name></expr>)<pos:position pos:line="176" pos:column="33"/></condition><then pos:line="176" pos:column="33"> <block pos:line="176" pos:column="34">{
                <expr_stmt><expr><call><name pos:line="177" pos:column="17">ap_remove_output_filter<pos:position pos:line="177" pos:column="40"/></name><argument_list pos:line="177" pos:column="40">(<argument><expr><name pos:line="177" pos:column="41">f<pos:position pos:line="177" pos:column="42"/></name></expr></argument>)<pos:position pos:line="177" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="44"/></expr_stmt>
                <return pos:line="178" pos:column="17">return <expr><call><name pos:line="178" pos:column="24">ap_pass_brigade<pos:position pos:line="178" pos:column="39"/></name><argument_list pos:line="178" pos:column="39">(<argument><expr><name><name pos:line="178" pos:column="40">f<pos:position pos:line="178" pos:column="41"/></name><operator pos:line="178" pos:column="41">-&gt;<pos:position pos:line="178" pos:column="46"/></operator><name pos:line="178" pos:column="43">next<pos:position pos:line="178" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="178" pos:column="49">bb<pos:position pos:line="178" pos:column="51"/></name></expr></argument>)<pos:position pos:line="178" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="53"/></return>
            }<pos:position pos:line="179" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="181" pos:column="13">token<pos:position pos:line="181" pos:column="18"/></name> <operator pos:line="181" pos:column="19">=<pos:position pos:line="181" pos:column="20"/></operator> <call><name pos:line="181" pos:column="21">ap_get_token<pos:position pos:line="181" pos:column="33"/></name><argument_list pos:line="181" pos:column="33">(<argument><expr><name><name pos:line="181" pos:column="34">r<pos:position pos:line="181" pos:column="35"/></name><operator pos:line="181" pos:column="35">-&gt;<pos:position pos:line="181" pos:column="40"/></operator><name pos:line="181" pos:column="37">pool<pos:position pos:line="181" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="181" pos:column="43">&amp;<pos:position pos:line="181" pos:column="48"/></operator><name pos:line="181" pos:column="44">accepts<pos:position pos:line="181" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="181" pos:column="53">0<pos:position pos:line="181" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="181" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="181" pos:column="56"/></expr_stmt>
            <while pos:line="182" pos:column="13">while <condition pos:line="182" pos:column="19">(<expr><name pos:line="182" pos:column="20">token<pos:position pos:line="182" pos:column="25"/></name> <operator pos:line="182" pos:column="26">&amp;&amp;<pos:position pos:line="182" pos:column="36"/></operator> <name><name pos:line="182" pos:column="29">token<pos:position pos:line="182" pos:column="34"/></name><index pos:line="182" pos:column="34">[<expr><literal type="number" pos:line="182" pos:column="35">0<pos:position pos:line="182" pos:column="36"/></literal></expr>]<pos:position pos:line="182" pos:column="37"/></index></name> <operator pos:line="182" pos:column="38">&amp;&amp;<pos:position pos:line="182" pos:column="48"/></operator> <call><name pos:line="182" pos:column="41">strcasecmp<pos:position pos:line="182" pos:column="51"/></name><argument_list pos:line="182" pos:column="51">(<argument><expr><name pos:line="182" pos:column="52">token<pos:position pos:line="182" pos:column="57"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="182" pos:column="59">"gzip"<pos:position pos:line="182" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="182" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="182" pos:column="67"/></condition> <block pos:line="182" pos:column="68">{
                <comment type="block" pos:line="183" pos:column="17">/* skip parameters, XXX: ;q=foo evaluation? */</comment>
                <while pos:line="184" pos:column="17">while <condition pos:line="184" pos:column="23">(<expr><operator pos:line="184" pos:column="24">*<pos:position pos:line="184" pos:column="25"/></operator><name pos:line="184" pos:column="25">accepts<pos:position pos:line="184" pos:column="32"/></name> <operator pos:line="184" pos:column="33">==<pos:position pos:line="184" pos:column="35"/></operator> <literal type="char" pos:line="184" pos:column="36">';'<pos:position pos:line="184" pos:column="39"/></literal></expr>)<pos:position pos:line="184" pos:column="40"/></condition> <block pos:line="184" pos:column="41">{
                    <expr_stmt><expr><operator pos:line="185" pos:column="21">++<pos:position pos:line="185" pos:column="23"/></operator><name pos:line="185" pos:column="23">accepts<pos:position pos:line="185" pos:column="30"/></name></expr>;<pos:position pos:line="185" pos:column="31"/></expr_stmt>
                    <expr_stmt><expr><call><name pos:line="186" pos:column="21">ap_get_token<pos:position pos:line="186" pos:column="33"/></name><argument_list pos:line="186" pos:column="33">(<argument><expr><name><name pos:line="186" pos:column="34">r<pos:position pos:line="186" pos:column="35"/></name><operator pos:line="186" pos:column="35">-&gt;<pos:position pos:line="186" pos:column="40"/></operator><name pos:line="186" pos:column="37">pool<pos:position pos:line="186" pos:column="41"/></name></name></expr></argument>, <argument><expr><operator pos:line="186" pos:column="43">&amp;<pos:position pos:line="186" pos:column="48"/></operator><name pos:line="186" pos:column="44">accepts<pos:position pos:line="186" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="186" pos:column="53">1<pos:position pos:line="186" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="186" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="186" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="187" pos:column="18"/></block></while>

                <comment type="block" pos:line="189" pos:column="17">/* retrieve next token */</comment>
                <if pos:line="190" pos:column="17">if <condition pos:line="190" pos:column="20">(<expr><operator pos:line="190" pos:column="21">*<pos:position pos:line="190" pos:column="22"/></operator><name pos:line="190" pos:column="22">accepts<pos:position pos:line="190" pos:column="29"/></name> <operator pos:line="190" pos:column="30">==<pos:position pos:line="190" pos:column="32"/></operator> <literal type="char" pos:line="190" pos:column="33">','<pos:position pos:line="190" pos:column="36"/></literal></expr>)<pos:position pos:line="190" pos:column="37"/></condition><then pos:line="190" pos:column="37"> <block pos:line="190" pos:column="38">{
                    <expr_stmt><expr><operator pos:line="191" pos:column="21">++<pos:position pos:line="191" pos:column="23"/></operator><name pos:line="191" pos:column="23">accepts<pos:position pos:line="191" pos:column="30"/></name></expr>;<pos:position pos:line="191" pos:column="31"/></expr_stmt>
                }<pos:position pos:line="192" pos:column="18"/></block></then></if>
                <expr_stmt><expr><name pos:line="193" pos:column="17">token<pos:position pos:line="193" pos:column="22"/></name> <operator pos:line="193" pos:column="23">=<pos:position pos:line="193" pos:column="24"/></operator> <ternary><condition><expr><operator pos:line="193" pos:column="25">(<pos:position pos:line="193" pos:column="26"/></operator><operator pos:line="193" pos:column="26">*<pos:position pos:line="193" pos:column="27"/></operator><name pos:line="193" pos:column="27">accepts<pos:position pos:line="193" pos:column="34"/></name><operator pos:line="193" pos:column="34">)<pos:position pos:line="193" pos:column="35"/></operator></expr> ?<pos:position pos:line="193" pos:column="37"/></condition><then pos:line="193" pos:column="37"> <expr><call><name pos:line="193" pos:column="38">ap_get_token<pos:position pos:line="193" pos:column="50"/></name><argument_list pos:line="193" pos:column="50">(<argument><expr><name><name pos:line="193" pos:column="51">r<pos:position pos:line="193" pos:column="52"/></name><operator pos:line="193" pos:column="52">-&gt;<pos:position pos:line="193" pos:column="57"/></operator><name pos:line="193" pos:column="54">pool<pos:position pos:line="193" pos:column="58"/></name></name></expr></argument>, <argument><expr><operator pos:line="193" pos:column="60">&amp;<pos:position pos:line="193" pos:column="65"/></operator><name pos:line="193" pos:column="61">accepts<pos:position pos:line="193" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="193" pos:column="70">0<pos:position pos:line="193" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="72"/></argument_list></call></expr> <pos:position pos:line="193" pos:column="73"/></then><else pos:line="193" pos:column="73">: <expr><name pos:line="193" pos:column="75">NULL<pos:position pos:line="193" pos:column="79"/></name></expr></else></ternary></expr>;<pos:position pos:line="193" pos:column="80"/></expr_stmt>
            }<pos:position pos:line="194" pos:column="14"/></block></while>

            <comment type="block" pos:line="196" pos:column="13">/* No acceptable token found. */</comment>
            <if pos:line="197" pos:column="13">if <condition pos:line="197" pos:column="16">(<expr><name pos:line="197" pos:column="17">token<pos:position pos:line="197" pos:column="22"/></name> <operator pos:line="197" pos:column="23">==<pos:position pos:line="197" pos:column="25"/></operator> <name pos:line="197" pos:column="26">NULL<pos:position pos:line="197" pos:column="30"/></name> <operator pos:line="197" pos:column="31">||<pos:position pos:line="197" pos:column="33"/></operator> <name><name pos:line="197" pos:column="34">token<pos:position pos:line="197" pos:column="39"/></name><index pos:line="197" pos:column="39">[<expr><literal type="number" pos:line="197" pos:column="40">0<pos:position pos:line="197" pos:column="41"/></literal></expr>]<pos:position pos:line="197" pos:column="42"/></index></name> <operator pos:line="197" pos:column="43">==<pos:position pos:line="197" pos:column="45"/></operator> <literal type="char" pos:line="197" pos:column="46">'\0'<pos:position pos:line="197" pos:column="50"/></literal></expr>)<pos:position pos:line="197" pos:column="51"/></condition><then pos:line="197" pos:column="51"> <block pos:line="197" pos:column="52">{
                <expr_stmt><expr><call><name pos:line="198" pos:column="17">ap_log_rerror<pos:position pos:line="198" pos:column="30"/></name><argument_list pos:line="198" pos:column="30">(<argument><expr><name pos:line="198" pos:column="31">APLOG_MARK<pos:position pos:line="198" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="198" pos:column="43">APLOG_TRACE1<pos:position pos:line="198" pos:column="55"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="198" pos:column="57">0<pos:position pos:line="198" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="198" pos:column="60">r<pos:position pos:line="198" pos:column="61"/></name></expr></argument>,
                              <argument><expr><literal type="string" pos:line="199" pos:column="31">"Not compressing (no Accept-Encoding: gzip)"<pos:position pos:line="199" pos:column="75"/></literal></expr></argument>)<pos:position pos:line="199" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="199" pos:column="77"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="200" pos:column="17">ap_remove_output_filter<pos:position pos:line="200" pos:column="40"/></name><argument_list pos:line="200" pos:column="40">(<argument><expr><name pos:line="200" pos:column="41">f<pos:position pos:line="200" pos:column="42"/></name></expr></argument>)<pos:position pos:line="200" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="44"/></expr_stmt>
                <return pos:line="201" pos:column="17">return <expr><call><name pos:line="201" pos:column="24">ap_pass_brigade<pos:position pos:line="201" pos:column="39"/></name><argument_list pos:line="201" pos:column="39">(<argument><expr><name><name pos:line="201" pos:column="40">f<pos:position pos:line="201" pos:column="41"/></name><operator pos:line="201" pos:column="41">-&gt;<pos:position pos:line="201" pos:column="46"/></operator><name pos:line="201" pos:column="43">next<pos:position pos:line="201" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="49">bb<pos:position pos:line="201" pos:column="51"/></name></expr></argument>)<pos:position pos:line="201" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="53"/></return>
            }<pos:position pos:line="202" pos:column="14"/></block></then></if>
        }<pos:position pos:line="203" pos:column="10"/></block></then>
        <else pos:line="204" pos:column="9">else <block pos:line="204" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="205" pos:column="13">ap_log_rerror<pos:position pos:line="205" pos:column="26"/></name><argument_list pos:line="205" pos:column="26">(<argument><expr><name pos:line="205" pos:column="27">APLOG_MARK<pos:position pos:line="205" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="205" pos:column="39">APLOG_TRACE1<pos:position pos:line="205" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="205" pos:column="53">0<pos:position pos:line="205" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="205" pos:column="56">r<pos:position pos:line="205" pos:column="57"/></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="206" pos:column="27">"Forcing compression (force-gzip set)"<pos:position pos:line="206" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="206" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="206" pos:column="67"/></expr_stmt>
        }<pos:position pos:line="207" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="209" pos:column="9">/* At this point we have decided to filter the content. Let's try to
         * to initialize zlib (except for 304 responses, where we will only
         * send out the headers).
         */</comment>

        <if pos:line="214" pos:column="9">if <condition pos:line="214" pos:column="12">(<expr><name><name pos:line="214" pos:column="13">r<pos:position pos:line="214" pos:column="14"/></name><operator pos:line="214" pos:column="14">-&gt;<pos:position pos:line="214" pos:column="19"/></operator><name pos:line="214" pos:column="16">status<pos:position pos:line="214" pos:column="22"/></name></name> <operator pos:line="214" pos:column="23">!=<pos:position pos:line="214" pos:column="25"/></operator> <name pos:line="214" pos:column="26">HTTP_NOT_MODIFIED<pos:position pos:line="214" pos:column="43"/></name></expr>)<pos:position pos:line="214" pos:column="44"/></condition><then pos:line="214" pos:column="44"> <block pos:line="214" pos:column="45">{
            <expr_stmt><expr><name><name pos:line="215" pos:column="13">ctx<pos:position pos:line="215" pos:column="16"/></name><operator pos:line="215" pos:column="16">-&gt;<pos:position pos:line="215" pos:column="21"/></operator><name pos:line="215" pos:column="18">bb<pos:position pos:line="215" pos:column="20"/></name></name> <operator pos:line="215" pos:column="21">=<pos:position pos:line="215" pos:column="22"/></operator> <call><name pos:line="215" pos:column="23">apr_brigade_create<pos:position pos:line="215" pos:column="41"/></name><argument_list pos:line="215" pos:column="41">(<argument><expr><name><name pos:line="215" pos:column="42">r<pos:position pos:line="215" pos:column="43"/></name><operator pos:line="215" pos:column="43">-&gt;<pos:position pos:line="215" pos:column="48"/></operator><name pos:line="215" pos:column="45">pool<pos:position pos:line="215" pos:column="49"/></name></name></expr></argument>, <argument><expr><name><name pos:line="215" pos:column="51">f<pos:position pos:line="215" pos:column="52"/></name><operator pos:line="215" pos:column="52">-&gt;<pos:position pos:line="215" pos:column="57"/></operator><name pos:line="215" pos:column="54">c<pos:position pos:line="215" pos:column="55"/></name><operator pos:line="215" pos:column="55">-&gt;<pos:position pos:line="215" pos:column="60"/></operator><name pos:line="215" pos:column="57">bucket_alloc<pos:position pos:line="215" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="215" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="215" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="216" pos:column="13">ctx<pos:position pos:line="216" pos:column="16"/></name><operator pos:line="216" pos:column="16">-&gt;<pos:position pos:line="216" pos:column="21"/></operator><name pos:line="216" pos:column="18">buffer<pos:position pos:line="216" pos:column="24"/></name></name> <operator pos:line="216" pos:column="25">=<pos:position pos:line="216" pos:column="26"/></operator> <call><name pos:line="216" pos:column="27">apr_palloc<pos:position pos:line="216" pos:column="37"/></name><argument_list pos:line="216" pos:column="37">(<argument><expr><name><name pos:line="216" pos:column="38">r<pos:position pos:line="216" pos:column="39"/></name><operator pos:line="216" pos:column="39">-&gt;<pos:position pos:line="216" pos:column="44"/></operator><name pos:line="216" pos:column="41">pool<pos:position pos:line="216" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="216" pos:column="47">c<pos:position pos:line="216" pos:column="48"/></name><operator pos:line="216" pos:column="48">-&gt;<pos:position pos:line="216" pos:column="53"/></operator><name pos:line="216" pos:column="50">bufferSize<pos:position pos:line="216" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="216" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="216" pos:column="62"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="217" pos:column="13">ctx<pos:position pos:line="217" pos:column="16"/></name><operator pos:line="217" pos:column="16">-&gt;<pos:position pos:line="217" pos:column="21"/></operator><name pos:line="217" pos:column="18">libz_end_func<pos:position pos:line="217" pos:column="31"/></name></name> <operator pos:line="217" pos:column="32">=<pos:position pos:line="217" pos:column="33"/></operator> <name pos:line="217" pos:column="34">deflateEnd<pos:position pos:line="217" pos:column="44"/></name></expr>;<pos:position pos:line="217" pos:column="45"/></expr_stmt>

            <expr_stmt><expr><name pos:line="219" pos:column="13">zRC<pos:position pos:line="219" pos:column="16"/></name> <operator pos:line="219" pos:column="17">=<pos:position pos:line="219" pos:column="18"/></operator> <call><name pos:line="219" pos:column="19">deflateInit2<pos:position pos:line="219" pos:column="31"/></name><argument_list pos:line="219" pos:column="31">(<argument><expr><operator pos:line="219" pos:column="32">&amp;<pos:position pos:line="219" pos:column="37"/></operator><name><name pos:line="219" pos:column="33">ctx<pos:position pos:line="219" pos:column="36"/></name><operator pos:line="219" pos:column="36">-&gt;<pos:position pos:line="219" pos:column="41"/></operator><name pos:line="219" pos:column="38">stream<pos:position pos:line="219" pos:column="44"/></name></name></expr></argument>, <argument><expr><name><name pos:line="219" pos:column="46">c<pos:position pos:line="219" pos:column="47"/></name><operator pos:line="219" pos:column="47">-&gt;<pos:position pos:line="219" pos:column="52"/></operator><name pos:line="219" pos:column="49">compressionlevel<pos:position pos:line="219" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="219" pos:column="67">Z_DEFLATED<pos:position pos:line="219" pos:column="77"/></name></expr></argument>,
                               <argument><expr><name><name pos:line="220" pos:column="32">c<pos:position pos:line="220" pos:column="33"/></name><operator pos:line="220" pos:column="33">-&gt;<pos:position pos:line="220" pos:column="38"/></operator><name pos:line="220" pos:column="35">windowSize<pos:position pos:line="220" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="220" pos:column="47">c<pos:position pos:line="220" pos:column="48"/></name><operator pos:line="220" pos:column="48">-&gt;<pos:position pos:line="220" pos:column="53"/></operator><name pos:line="220" pos:column="50">memlevel<pos:position pos:line="220" pos:column="58"/></name></name></expr></argument>,
                               <argument><expr><name pos:line="221" pos:column="32">Z_DEFAULT_STRATEGY<pos:position pos:line="221" pos:column="50"/></name></expr></argument>)<pos:position pos:line="221" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="52"/></expr_stmt>

            <if pos:line="223" pos:column="13">if <condition pos:line="223" pos:column="16">(<expr><name pos:line="223" pos:column="17">zRC<pos:position pos:line="223" pos:column="20"/></name> <operator pos:line="223" pos:column="21">!=<pos:position pos:line="223" pos:column="23"/></operator> <name pos:line="223" pos:column="24">Z_OK<pos:position pos:line="223" pos:column="28"/></name></expr>)<pos:position pos:line="223" pos:column="29"/></condition><then pos:line="223" pos:column="29"> <block pos:line="223" pos:column="30">{
                <expr_stmt><expr><call><name pos:line="224" pos:column="17">deflateEnd<pos:position pos:line="224" pos:column="27"/></name><argument_list pos:line="224" pos:column="27">(<argument><expr><operator pos:line="224" pos:column="28">&amp;<pos:position pos:line="224" pos:column="33"/></operator><name><name pos:line="224" pos:column="29">ctx<pos:position pos:line="224" pos:column="32"/></name><operator pos:line="224" pos:column="32">-&gt;<pos:position pos:line="224" pos:column="37"/></operator><name pos:line="224" pos:column="34">stream<pos:position pos:line="224" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="224" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="224" pos:column="42"/></expr_stmt>
                <expr_stmt><expr><call><name pos:line="225" pos:column="17">ap_log_rerror<pos:position pos:line="225" pos:column="30"/></name><argument_list pos:line="225" pos:column="30">(<argument><expr><name pos:line="225" pos:column="31">APLOG_MARK<pos:position pos:line="225" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="225" pos:column="43">APLOG_ERR<pos:position pos:line="225" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="225" pos:column="54">0<pos:position pos:line="225" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="225" pos:column="57">r<pos:position pos:line="225" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="225" pos:column="60">APLOGNO<pos:position pos:line="225" pos:column="67"/></name><argument_list pos:line="225" pos:column="67">(<argument><expr><literal type="number" pos:line="225" pos:column="68">01383<pos:position pos:line="225" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="225" pos:column="74"/></argument_list></call>
                              <literal type="string" pos:line="226" pos:column="31">"unable to init Zlib: "<pos:position pos:line="226" pos:column="54"/></literal>
                              <literal type="string" pos:line="227" pos:column="31">"deflateInit2 returned %d: URL %s"<pos:position pos:line="227" pos:column="65"/></literal></expr></argument>,
                              <argument><expr><name pos:line="228" pos:column="31">zRC<pos:position pos:line="228" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="228" pos:column="36">r<pos:position pos:line="228" pos:column="37"/></name><operator pos:line="228" pos:column="37">-&gt;<pos:position pos:line="228" pos:column="42"/></operator><name pos:line="228" pos:column="39">uri<pos:position pos:line="228" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="228" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="228" pos:column="44"/></expr_stmt>
                <comment type="block" pos:line="229" pos:column="17">/*
                 * Remove ourselves as it does not make sense to return:
                 * We are not able to init libz and pass data down the chain
                 * uncompressed.
                 */</comment>
                <expr_stmt><expr><call><name pos:line="234" pos:column="17">ap_remove_output_filter<pos:position pos:line="234" pos:column="40"/></name><argument_list pos:line="234" pos:column="40">(<argument><expr><name pos:line="234" pos:column="41">f<pos:position pos:line="234" pos:column="42"/></name></expr></argument>)<pos:position pos:line="234" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="234" pos:column="44"/></expr_stmt>
                <return pos:line="235" pos:column="17">return <expr><call><name pos:line="235" pos:column="24">ap_pass_brigade<pos:position pos:line="235" pos:column="39"/></name><argument_list pos:line="235" pos:column="39">(<argument><expr><name><name pos:line="235" pos:column="40">f<pos:position pos:line="235" pos:column="41"/></name><operator pos:line="235" pos:column="41">-&gt;<pos:position pos:line="235" pos:column="46"/></operator><name pos:line="235" pos:column="43">next<pos:position pos:line="235" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="235" pos:column="49">bb<pos:position pos:line="235" pos:column="51"/></name></expr></argument>)<pos:position pos:line="235" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="235" pos:column="53"/></return>
            }<pos:position pos:line="236" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="237" pos:column="13">/*
             * Register a cleanup function to ensure that we cleanup the internal
             * libz resources.
             */</comment>
            <expr_stmt><expr><call><name pos:line="241" pos:column="13">apr_pool_cleanup_register<pos:position pos:line="241" pos:column="38"/></name><argument_list pos:line="241" pos:column="38">(<argument><expr><name><name pos:line="241" pos:column="39">r<pos:position pos:line="241" pos:column="40"/></name><operator pos:line="241" pos:column="40">-&gt;<pos:position pos:line="241" pos:column="45"/></operator><name pos:line="241" pos:column="42">pool<pos:position pos:line="241" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="241" pos:column="48">ctx<pos:position pos:line="241" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="241" pos:column="53">deflate_ctx_cleanup<pos:position pos:line="241" pos:column="72"/></name></expr></argument>,
                                      <argument><expr><name pos:line="242" pos:column="39">apr_pool_cleanup_null<pos:position pos:line="242" pos:column="60"/></name></expr></argument>)<pos:position pos:line="242" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="242" pos:column="62"/></expr_stmt>

            <comment type="block" pos:line="244" pos:column="13">/* Set the filter init flag so subsequent invocations know we are
             * active.
             */</comment>
            <expr_stmt><expr><name><name pos:line="247" pos:column="13">ctx<pos:position pos:line="247" pos:column="16"/></name><operator pos:line="247" pos:column="16">-&gt;<pos:position pos:line="247" pos:column="21"/></operator><name pos:line="247" pos:column="18">filter_init<pos:position pos:line="247" pos:column="29"/></name></name> <operator pos:line="247" pos:column="30">=<pos:position pos:line="247" pos:column="31"/></operator> <literal type="number" pos:line="247" pos:column="32">1<pos:position pos:line="247" pos:column="33"/></literal></expr>;<pos:position pos:line="247" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="248" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="250" pos:column="9">/*
         * Zlib initialization worked, so we can now change the important
         * content metadata before sending the response out.
         */</comment>

        <comment type="block" pos:line="255" pos:column="9">/* If the entire Content-Encoding is "identity", we can replace it. */</comment>
        <if pos:line="256" pos:column="9">if <condition pos:line="256" pos:column="12">(<expr><operator pos:line="256" pos:column="13">!<pos:position pos:line="256" pos:column="14"/></operator><name pos:line="256" pos:column="14">encoding<pos:position pos:line="256" pos:column="22"/></name> <operator pos:line="256" pos:column="23">||<pos:position pos:line="256" pos:column="25"/></operator> <operator pos:line="256" pos:column="26">!<pos:position pos:line="256" pos:column="27"/></operator><call><name pos:line="256" pos:column="27">strcasecmp<pos:position pos:line="256" pos:column="37"/></name><argument_list pos:line="256" pos:column="37">(<argument><expr><name pos:line="256" pos:column="38">encoding<pos:position pos:line="256" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="256" pos:column="48">"identity"<pos:position pos:line="256" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="256" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="256" pos:column="60"/></condition><then pos:line="256" pos:column="60"> <block pos:line="256" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="257" pos:column="13">apr_table_setn<pos:position pos:line="257" pos:column="27"/></name><argument_list pos:line="257" pos:column="27">(<argument><expr><name><name pos:line="257" pos:column="28">r<pos:position pos:line="257" pos:column="29"/></name><operator pos:line="257" pos:column="29">-&gt;<pos:position pos:line="257" pos:column="34"/></operator><name pos:line="257" pos:column="31">headers_out<pos:position pos:line="257" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="257" pos:column="44">"Content-Encoding"<pos:position pos:line="257" pos:column="62"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="257" pos:column="64">"gzip"<pos:position pos:line="257" pos:column="70"/></literal></expr></argument>)<pos:position pos:line="257" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="257" pos:column="72"/></expr_stmt>
        }<pos:position pos:line="258" pos:column="10"/></block></then>
        <else pos:line="259" pos:column="9">else <block pos:line="259" pos:column="14">{
            <expr_stmt><expr><call><name pos:line="260" pos:column="13">apr_table_mergen<pos:position pos:line="260" pos:column="29"/></name><argument_list pos:line="260" pos:column="29">(<argument><expr><name><name pos:line="260" pos:column="30">r<pos:position pos:line="260" pos:column="31"/></name><operator pos:line="260" pos:column="31">-&gt;<pos:position pos:line="260" pos:column="36"/></operator><name pos:line="260" pos:column="33">headers_out<pos:position pos:line="260" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="260" pos:column="46">"Content-Encoding"<pos:position pos:line="260" pos:column="64"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="260" pos:column="66">"gzip"<pos:position pos:line="260" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="260" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="260" pos:column="74"/></expr_stmt>
        }<pos:position pos:line="261" pos:column="10"/></block></else></if>
        <comment type="block" pos:line="262" pos:column="9">/* Fix r-&gt;content_encoding if it was set before */</comment>
        <if pos:line="263" pos:column="9">if <condition pos:line="263" pos:column="12">(<expr><name><name pos:line="263" pos:column="13">r<pos:position pos:line="263" pos:column="14"/></name><operator pos:line="263" pos:column="14">-&gt;<pos:position pos:line="263" pos:column="19"/></operator><name pos:line="263" pos:column="16">content_encoding<pos:position pos:line="263" pos:column="32"/></name></name></expr>)<pos:position pos:line="263" pos:column="33"/></condition><then pos:line="263" pos:column="33"> <block pos:line="263" pos:column="34">{
            <expr_stmt><expr><name><name pos:line="264" pos:column="13">r<pos:position pos:line="264" pos:column="14"/></name><operator pos:line="264" pos:column="14">-&gt;<pos:position pos:line="264" pos:column="19"/></operator><name pos:line="264" pos:column="16">content_encoding<pos:position pos:line="264" pos:column="32"/></name></name> <operator pos:line="264" pos:column="33">=<pos:position pos:line="264" pos:column="34"/></operator> <call><name pos:line="264" pos:column="35">apr_table_get<pos:position pos:line="264" pos:column="48"/></name><argument_list pos:line="264" pos:column="48">(<argument><expr><name><name pos:line="264" pos:column="49">r<pos:position pos:line="264" pos:column="50"/></name><operator pos:line="264" pos:column="50">-&gt;<pos:position pos:line="264" pos:column="55"/></operator><name pos:line="264" pos:column="52">headers_out<pos:position pos:line="264" pos:column="63"/></name></name></expr></argument>,
                                                <argument><expr><literal type="string" pos:line="265" pos:column="49">"Content-Encoding"<pos:position pos:line="265" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="265" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="265" pos:column="69"/></expr_stmt>
        }<pos:position pos:line="266" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="267" pos:column="9">apr_table_unset<pos:position pos:line="267" pos:column="24"/></name><argument_list pos:line="267" pos:column="24">(<argument><expr><name><name pos:line="267" pos:column="25">r<pos:position pos:line="267" pos:column="26"/></name><operator pos:line="267" pos:column="26">-&gt;<pos:position pos:line="267" pos:column="31"/></operator><name pos:line="267" pos:column="28">headers_out<pos:position pos:line="267" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="267" pos:column="41">"Content-Length"<pos:position pos:line="267" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="267" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="268" pos:column="9">apr_table_unset<pos:position pos:line="268" pos:column="24"/></name><argument_list pos:line="268" pos:column="24">(<argument><expr><name><name pos:line="268" pos:column="25">r<pos:position pos:line="268" pos:column="26"/></name><operator pos:line="268" pos:column="26">-&gt;<pos:position pos:line="268" pos:column="31"/></operator><name pos:line="268" pos:column="28">headers_out<pos:position pos:line="268" pos:column="39"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="268" pos:column="41">"Content-MD5"<pos:position pos:line="268" pos:column="54"/></literal></expr></argument>)<pos:position pos:line="268" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="269" pos:column="9">deflate_check_etag<pos:position pos:line="269" pos:column="27"/></name><argument_list pos:line="269" pos:column="27">(<argument><expr><name pos:line="269" pos:column="28">r<pos:position pos:line="269" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="269" pos:column="31">"gzip"<pos:position pos:line="269" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="269" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="269" pos:column="39"/></expr_stmt>

        <comment type="block" pos:line="271" pos:column="9">/* For a 304 response, only change the headers */</comment>
        <if pos:line="272" pos:column="9">if <condition pos:line="272" pos:column="12">(<expr><name><name pos:line="272" pos:column="13">r<pos:position pos:line="272" pos:column="14"/></name><operator pos:line="272" pos:column="14">-&gt;<pos:position pos:line="272" pos:column="19"/></operator><name pos:line="272" pos:column="16">status<pos:position pos:line="272" pos:column="22"/></name></name> <operator pos:line="272" pos:column="23">==<pos:position pos:line="272" pos:column="25"/></operator> <name pos:line="272" pos:column="26">HTTP_NOT_MODIFIED<pos:position pos:line="272" pos:column="43"/></name></expr>)<pos:position pos:line="272" pos:column="44"/></condition><then pos:line="272" pos:column="44"> <block pos:line="272" pos:column="45">{
            <expr_stmt><expr><call><name pos:line="273" pos:column="13">ap_remove_output_filter<pos:position pos:line="273" pos:column="36"/></name><argument_list pos:line="273" pos:column="36">(<argument><expr><name pos:line="273" pos:column="37">f<pos:position pos:line="273" pos:column="38"/></name></expr></argument>)<pos:position pos:line="273" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="273" pos:column="40"/></expr_stmt>
            <return pos:line="274" pos:column="13">return <expr><call><name pos:line="274" pos:column="20">ap_pass_brigade<pos:position pos:line="274" pos:column="35"/></name><argument_list pos:line="274" pos:column="35">(<argument><expr><name><name pos:line="274" pos:column="36">f<pos:position pos:line="274" pos:column="37"/></name><operator pos:line="274" pos:column="37">-&gt;<pos:position pos:line="274" pos:column="42"/></operator><name pos:line="274" pos:column="39">next<pos:position pos:line="274" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="274" pos:column="45">bb<pos:position pos:line="274" pos:column="47"/></name></expr></argument>)<pos:position pos:line="274" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="274" pos:column="49"/></return>
        }<pos:position pos:line="275" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="277" pos:column="9">/* add immortal gzip header */</comment>
        <expr_stmt><expr><name pos:line="278" pos:column="9">e<pos:position pos:line="278" pos:column="10"/></name> <operator pos:line="278" pos:column="11">=<pos:position pos:line="278" pos:column="12"/></operator> <call><name pos:line="278" pos:column="13">apr_bucket_immortal_create<pos:position pos:line="278" pos:column="39"/></name><argument_list pos:line="278" pos:column="39">(<argument><expr><name pos:line="278" pos:column="40">gzip_header<pos:position pos:line="278" pos:column="51"/></name></expr></argument>, <argument><expr><sizeof pos:line="278" pos:column="53">sizeof <name pos:line="278" pos:column="60">gzip_header<pos:position pos:line="278" pos:column="71"/></name></sizeof></expr></argument>,
                                       <argument><expr><name><name pos:line="279" pos:column="40">f<pos:position pos:line="279" pos:column="41"/></name><operator pos:line="279" pos:column="41">-&gt;<pos:position pos:line="279" pos:column="46"/></operator><name pos:line="279" pos:column="43">c<pos:position pos:line="279" pos:column="44"/></name><operator pos:line="279" pos:column="44">-&gt;<pos:position pos:line="279" pos:column="49"/></operator><name pos:line="279" pos:column="46">bucket_alloc<pos:position pos:line="279" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="279" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="279" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="280" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="280" pos:column="32"/></name><argument_list pos:line="280" pos:column="32">(<argument><expr><name><name pos:line="280" pos:column="33">ctx<pos:position pos:line="280" pos:column="36"/></name><operator pos:line="280" pos:column="36">-&gt;<pos:position pos:line="280" pos:column="41"/></operator><name pos:line="280" pos:column="38">bb<pos:position pos:line="280" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="280" pos:column="42">e<pos:position pos:line="280" pos:column="43"/></name></expr></argument>)<pos:position pos:line="280" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="280" pos:column="45"/></expr_stmt>

        <comment type="block" pos:line="282" pos:column="9">/* initialize deflate output buffer */</comment>
        <expr_stmt><expr><name><name pos:line="283" pos:column="9">ctx<pos:position pos:line="283" pos:column="12"/></name><operator pos:line="283" pos:column="12">-&gt;<pos:position pos:line="283" pos:column="17"/></operator><name pos:line="283" pos:column="14">stream<pos:position pos:line="283" pos:column="20"/></name><operator pos:line="283" pos:column="20">.<pos:position pos:line="283" pos:column="21"/></operator><name pos:line="283" pos:column="21">next_out<pos:position pos:line="283" pos:column="29"/></name></name> <operator pos:line="283" pos:column="30">=<pos:position pos:line="283" pos:column="31"/></operator> <name><name pos:line="283" pos:column="32">ctx<pos:position pos:line="283" pos:column="35"/></name><operator pos:line="283" pos:column="35">-&gt;<pos:position pos:line="283" pos:column="40"/></operator><name pos:line="283" pos:column="37">buffer<pos:position pos:line="283" pos:column="43"/></name></name></expr>;<pos:position pos:line="283" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="284" pos:column="9">ctx<pos:position pos:line="284" pos:column="12"/></name><operator pos:line="284" pos:column="12">-&gt;<pos:position pos:line="284" pos:column="17"/></operator><name pos:line="284" pos:column="14">stream<pos:position pos:line="284" pos:column="20"/></name><operator pos:line="284" pos:column="20">.<pos:position pos:line="284" pos:column="21"/></operator><name pos:line="284" pos:column="21">avail_out<pos:position pos:line="284" pos:column="30"/></name></name> <operator pos:line="284" pos:column="31">=<pos:position pos:line="284" pos:column="32"/></operator> <name><name pos:line="284" pos:column="33">c<pos:position pos:line="284" pos:column="34"/></name><operator pos:line="284" pos:column="34">-&gt;<pos:position pos:line="284" pos:column="39"/></operator><name pos:line="284" pos:column="36">bufferSize<pos:position pos:line="284" pos:column="46"/></name></name></expr>;<pos:position pos:line="284" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="285" pos:column="6"/></block></then> <elseif pos:line="285" pos:column="7">else <if pos:line="285" pos:column="12">if <condition pos:line="285" pos:column="15">(<expr><operator pos:line="285" pos:column="16">!<pos:position pos:line="285" pos:column="17"/></operator><name><name pos:line="285" pos:column="17">ctx<pos:position pos:line="285" pos:column="20"/></name><operator pos:line="285" pos:column="20">-&gt;<pos:position pos:line="285" pos:column="25"/></operator><name pos:line="285" pos:column="22">filter_init<pos:position pos:line="285" pos:column="33"/></name></name></expr>)<pos:position pos:line="285" pos:column="34"/></condition><then pos:line="285" pos:column="34"> <block pos:line="285" pos:column="35">{
        <comment type="block" pos:line="286" pos:column="9">/* Hmm.  We've run through the filter init before as we have a ctx,
         * but we never initialized.  We probably have a dangling ref.  Bail.
         */</comment>
        <return pos:line="289" pos:column="9">return <expr><call><name pos:line="289" pos:column="16">ap_pass_brigade<pos:position pos:line="289" pos:column="31"/></name><argument_list pos:line="289" pos:column="31">(<argument><expr><name><name pos:line="289" pos:column="32">f<pos:position pos:line="289" pos:column="33"/></name><operator pos:line="289" pos:column="33">-&gt;<pos:position pos:line="289" pos:column="38"/></operator><name pos:line="289" pos:column="35">next<pos:position pos:line="289" pos:column="39"/></name></name></expr></argument>, <argument><expr><name pos:line="289" pos:column="41">bb<pos:position pos:line="289" pos:column="43"/></name></expr></argument>)<pos:position pos:line="289" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="289" pos:column="45"/></return>
    }<pos:position pos:line="290" pos:column="6"/></block></then></if></elseif></if>

    <while pos:line="292" pos:column="5">while <condition pos:line="292" pos:column="11">(<expr><operator pos:line="292" pos:column="12">!<pos:position pos:line="292" pos:column="13"/></operator><call><name pos:line="292" pos:column="13">APR_BRIGADE_EMPTY<pos:position pos:line="292" pos:column="30"/></name><argument_list pos:line="292" pos:column="30">(<argument><expr><name pos:line="292" pos:column="31">bb<pos:position pos:line="292" pos:column="33"/></name></expr></argument>)<pos:position pos:line="292" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="292" pos:column="35"/></condition>
    <block pos:line="293" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="294" pos:column="9">apr_bucket<pos:position pos:line="294" pos:column="19"/></name> <modifier pos:line="294" pos:column="20">*<pos:position pos:line="294" pos:column="21"/></modifier></type><name pos:line="294" pos:column="21">b<pos:position pos:line="294" pos:column="22"/></name></decl>;<pos:position pos:line="294" pos:column="23"/></decl_stmt>

        <comment type="block" pos:line="296" pos:column="9">/*
         * Optimization: If we are a HEAD request and bytes_sent is not zero
         * it means that we have passed the content-length filter once and
         * have more data to sent. This means that the content-length filter
         * could not determine our content-length for the response to the
         * HEAD request anyway (the associated GET request would deliver the
         * body in chunked encoding) and we can stop compressing.
         */</comment>
        <if pos:line="304" pos:column="9">if <condition pos:line="304" pos:column="12">(<expr><name><name pos:line="304" pos:column="13">r<pos:position pos:line="304" pos:column="14"/></name><operator pos:line="304" pos:column="14">-&gt;<pos:position pos:line="304" pos:column="19"/></operator><name pos:line="304" pos:column="16">header_only<pos:position pos:line="304" pos:column="27"/></name></name> <operator pos:line="304" pos:column="28">&amp;&amp;<pos:position pos:line="304" pos:column="38"/></operator> <name><name pos:line="304" pos:column="31">r<pos:position pos:line="304" pos:column="32"/></name><operator pos:line="304" pos:column="32">-&gt;<pos:position pos:line="304" pos:column="37"/></operator><name pos:line="304" pos:column="34">bytes_sent<pos:position pos:line="304" pos:column="44"/></name></name></expr>)<pos:position pos:line="304" pos:column="45"/></condition><then pos:line="304" pos:column="45"> <block pos:line="304" pos:column="46">{
            <expr_stmt><expr><call><name pos:line="305" pos:column="13">ap_remove_output_filter<pos:position pos:line="305" pos:column="36"/></name><argument_list pos:line="305" pos:column="36">(<argument><expr><name pos:line="305" pos:column="37">f<pos:position pos:line="305" pos:column="38"/></name></expr></argument>)<pos:position pos:line="305" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="305" pos:column="40"/></expr_stmt>
            <return pos:line="306" pos:column="13">return <expr><call><name pos:line="306" pos:column="20">ap_pass_brigade<pos:position pos:line="306" pos:column="35"/></name><argument_list pos:line="306" pos:column="35">(<argument><expr><name><name pos:line="306" pos:column="36">f<pos:position pos:line="306" pos:column="37"/></name><operator pos:line="306" pos:column="37">-&gt;<pos:position pos:line="306" pos:column="42"/></operator><name pos:line="306" pos:column="39">next<pos:position pos:line="306" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="306" pos:column="45">bb<pos:position pos:line="306" pos:column="47"/></name></expr></argument>)<pos:position pos:line="306" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="306" pos:column="49"/></return>
        }<pos:position pos:line="307" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="309" pos:column="9">e<pos:position pos:line="309" pos:column="10"/></name> <operator pos:line="309" pos:column="11">=<pos:position pos:line="309" pos:column="12"/></operator> <call><name pos:line="309" pos:column="13">APR_BRIGADE_FIRST<pos:position pos:line="309" pos:column="30"/></name><argument_list pos:line="309" pos:column="30">(<argument><expr><name pos:line="309" pos:column="31">bb<pos:position pos:line="309" pos:column="33"/></name></expr></argument>)<pos:position pos:line="309" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="309" pos:column="35"/></expr_stmt>

        <if pos:line="311" pos:column="9">if <condition pos:line="311" pos:column="12">(<expr><call><name pos:line="311" pos:column="13">APR_BUCKET_IS_EOS<pos:position pos:line="311" pos:column="30"/></name><argument_list pos:line="311" pos:column="30">(<argument><expr><name pos:line="311" pos:column="31">e<pos:position pos:line="311" pos:column="32"/></name></expr></argument>)<pos:position pos:line="311" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="311" pos:column="34"/></condition><then pos:line="311" pos:column="34"> <block pos:line="311" pos:column="35">{
            <decl_stmt><decl><type><name pos:line="312" pos:column="13">char<pos:position pos:line="312" pos:column="17"/></name> <modifier pos:line="312" pos:column="18">*<pos:position pos:line="312" pos:column="19"/></modifier></type><name pos:line="312" pos:column="19">buf<pos:position pos:line="312" pos:column="22"/></name></decl>;<pos:position pos:line="312" pos:column="23"/></decl_stmt>

            <expr_stmt><expr><name><name pos:line="314" pos:column="13">ctx<pos:position pos:line="314" pos:column="16"/></name><operator pos:line="314" pos:column="16">-&gt;<pos:position pos:line="314" pos:column="21"/></operator><name pos:line="314" pos:column="18">stream<pos:position pos:line="314" pos:column="24"/></name><operator pos:line="314" pos:column="24">.<pos:position pos:line="314" pos:column="25"/></operator><name pos:line="314" pos:column="25">avail_in<pos:position pos:line="314" pos:column="33"/></name></name> <operator pos:line="314" pos:column="34">=<pos:position pos:line="314" pos:column="35"/></operator> <literal type="number" pos:line="314" pos:column="36">0<pos:position pos:line="314" pos:column="37"/></literal></expr>;<pos:position pos:line="314" pos:column="38"/></expr_stmt> <comment type="block" pos:line="314" pos:column="39">/* should be zero already anyway */</comment>
            <comment type="block" pos:line="315" pos:column="13">/* flush the remaining data from the zlib buffers */</comment>
            <expr_stmt><expr><call><name pos:line="316" pos:column="13">flush_libz_buffer<pos:position pos:line="316" pos:column="30"/></name><argument_list pos:line="316" pos:column="30">(<argument><expr><name pos:line="316" pos:column="31">ctx<pos:position pos:line="316" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="316" pos:column="36">c<pos:position pos:line="316" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="316" pos:column="39">f<pos:position pos:line="316" pos:column="40"/></name><operator pos:line="316" pos:column="40">-&gt;<pos:position pos:line="316" pos:column="45"/></operator><name pos:line="316" pos:column="42">c<pos:position pos:line="316" pos:column="43"/></name><operator pos:line="316" pos:column="43">-&gt;<pos:position pos:line="316" pos:column="48"/></operator><name pos:line="316" pos:column="45">bucket_alloc<pos:position pos:line="316" pos:column="57"/></name></name></expr></argument>, <argument><expr><name pos:line="316" pos:column="59">deflate<pos:position pos:line="316" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="316" pos:column="68">Z_FINISH<pos:position pos:line="316" pos:column="76"/></name></expr></argument>,
                              <argument><expr><name pos:line="317" pos:column="31">NO_UPDATE_CRC<pos:position pos:line="317" pos:column="44"/></name></expr></argument>)<pos:position pos:line="317" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="317" pos:column="46"/></expr_stmt>

            <expr_stmt><expr><name pos:line="319" pos:column="13">buf<pos:position pos:line="319" pos:column="16"/></name> <operator pos:line="319" pos:column="17">=<pos:position pos:line="319" pos:column="18"/></operator> <call><name pos:line="319" pos:column="19">apr_palloc<pos:position pos:line="319" pos:column="29"/></name><argument_list pos:line="319" pos:column="29">(<argument><expr><name><name pos:line="319" pos:column="30">r<pos:position pos:line="319" pos:column="31"/></name><operator pos:line="319" pos:column="31">-&gt;<pos:position pos:line="319" pos:column="36"/></operator><name pos:line="319" pos:column="33">pool<pos:position pos:line="319" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="319" pos:column="39">VALIDATION_SIZE<pos:position pos:line="319" pos:column="54"/></name></expr></argument>)<pos:position pos:line="319" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="319" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="320" pos:column="13">putLong<pos:position pos:line="320" pos:column="20"/></name><argument_list pos:line="320" pos:column="20">(<argument><expr><operator pos:line="320" pos:column="21">(<pos:position pos:line="320" pos:column="22"/></operator><name pos:line="320" pos:column="22">unsigned<pos:position pos:line="320" pos:column="30"/></name> <name pos:line="320" pos:column="31">char<pos:position pos:line="320" pos:column="35"/></name> <operator pos:line="320" pos:column="36">*<pos:position pos:line="320" pos:column="37"/></operator><operator pos:line="320" pos:column="37">)<pos:position pos:line="320" pos:column="38"/></operator><operator pos:line="320" pos:column="38">&amp;<pos:position pos:line="320" pos:column="43"/></operator><name><name pos:line="320" pos:column="39">buf<pos:position pos:line="320" pos:column="42"/></name><index pos:line="320" pos:column="42">[<expr><literal type="number" pos:line="320" pos:column="43">0<pos:position pos:line="320" pos:column="44"/></literal></expr>]<pos:position pos:line="320" pos:column="45"/></index></name></expr></argument>, <argument><expr><name><name pos:line="320" pos:column="47">ctx<pos:position pos:line="320" pos:column="50"/></name><operator pos:line="320" pos:column="50">-&gt;<pos:position pos:line="320" pos:column="55"/></operator><name pos:line="320" pos:column="52">crc<pos:position pos:line="320" pos:column="55"/></name></name></expr></argument>)<pos:position pos:line="320" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="320" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="321" pos:column="13">putLong<pos:position pos:line="321" pos:column="20"/></name><argument_list pos:line="321" pos:column="20">(<argument><expr><operator pos:line="321" pos:column="21">(<pos:position pos:line="321" pos:column="22"/></operator><name pos:line="321" pos:column="22">unsigned<pos:position pos:line="321" pos:column="30"/></name> <name pos:line="321" pos:column="31">char<pos:position pos:line="321" pos:column="35"/></name> <operator pos:line="321" pos:column="36">*<pos:position pos:line="321" pos:column="37"/></operator><operator pos:line="321" pos:column="37">)<pos:position pos:line="321" pos:column="38"/></operator><operator pos:line="321" pos:column="38">&amp;<pos:position pos:line="321" pos:column="43"/></operator><name><name pos:line="321" pos:column="39">buf<pos:position pos:line="321" pos:column="42"/></name><index pos:line="321" pos:column="42">[<expr><literal type="number" pos:line="321" pos:column="43">4<pos:position pos:line="321" pos:column="44"/></literal></expr>]<pos:position pos:line="321" pos:column="45"/></index></name></expr></argument>, <argument><expr><name><name pos:line="321" pos:column="47">ctx<pos:position pos:line="321" pos:column="50"/></name><operator pos:line="321" pos:column="50">-&gt;<pos:position pos:line="321" pos:column="55"/></operator><name pos:line="321" pos:column="52">stream<pos:position pos:line="321" pos:column="58"/></name><operator pos:line="321" pos:column="58">.<pos:position pos:line="321" pos:column="59"/></operator><name pos:line="321" pos:column="59">total_in<pos:position pos:line="321" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="321" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="69"/></expr_stmt>

            <expr_stmt><expr><name pos:line="323" pos:column="13">b<pos:position pos:line="323" pos:column="14"/></name> <operator pos:line="323" pos:column="15">=<pos:position pos:line="323" pos:column="16"/></operator> <call><name pos:line="323" pos:column="17">apr_bucket_pool_create<pos:position pos:line="323" pos:column="39"/></name><argument_list pos:line="323" pos:column="39">(<argument><expr><name pos:line="323" pos:column="40">buf<pos:position pos:line="323" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="323" pos:column="45">VALIDATION_SIZE<pos:position pos:line="323" pos:column="60"/></name></expr></argument>, <argument><expr><name><name pos:line="323" pos:column="62">r<pos:position pos:line="323" pos:column="63"/></name><operator pos:line="323" pos:column="63">-&gt;<pos:position pos:line="323" pos:column="68"/></operator><name pos:line="323" pos:column="65">pool<pos:position pos:line="323" pos:column="69"/></name></name></expr></argument>,
                                       <argument><expr><name><name pos:line="324" pos:column="40">f<pos:position pos:line="324" pos:column="41"/></name><operator pos:line="324" pos:column="41">-&gt;<pos:position pos:line="324" pos:column="46"/></operator><name pos:line="324" pos:column="43">c<pos:position pos:line="324" pos:column="44"/></name><operator pos:line="324" pos:column="44">-&gt;<pos:position pos:line="324" pos:column="49"/></operator><name pos:line="324" pos:column="46">bucket_alloc<pos:position pos:line="324" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="324" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="325" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="325" pos:column="36"/></name><argument_list pos:line="325" pos:column="36">(<argument><expr><name><name pos:line="325" pos:column="37">ctx<pos:position pos:line="325" pos:column="40"/></name><operator pos:line="325" pos:column="40">-&gt;<pos:position pos:line="325" pos:column="45"/></operator><name pos:line="325" pos:column="42">bb<pos:position pos:line="325" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="325" pos:column="46">b<pos:position pos:line="325" pos:column="47"/></name></expr></argument>)<pos:position pos:line="325" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="325" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="326" pos:column="13">ap_log_rerror<pos:position pos:line="326" pos:column="26"/></name><argument_list pos:line="326" pos:column="26">(<argument><expr><name pos:line="326" pos:column="27">APLOG_MARK<pos:position pos:line="326" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="326" pos:column="39">APLOG_DEBUG<pos:position pos:line="326" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="326" pos:column="52">0<pos:position pos:line="326" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="326" pos:column="55">r<pos:position pos:line="326" pos:column="56"/></name></expr></argument>, <argument><expr><call><name pos:line="326" pos:column="58">APLOGNO<pos:position pos:line="326" pos:column="65"/></name><argument_list pos:line="326" pos:column="65">(<argument><expr><literal type="number" pos:line="326" pos:column="66">01384<pos:position pos:line="326" pos:column="71"/></literal></expr></argument>)<pos:position pos:line="326" pos:column="72"/></argument_list></call>
                          <literal type="string" pos:line="327" pos:column="27">"Zlib: Compressed %ld to %ld : URL %s"<pos:position pos:line="327" pos:column="65"/></literal></expr></argument>,
                          <argument><expr><name><name pos:line="328" pos:column="27">ctx<pos:position pos:line="328" pos:column="30"/></name><operator pos:line="328" pos:column="30">-&gt;<pos:position pos:line="328" pos:column="35"/></operator><name pos:line="328" pos:column="32">stream<pos:position pos:line="328" pos:column="38"/></name><operator pos:line="328" pos:column="38">.<pos:position pos:line="328" pos:column="39"/></operator><name pos:line="328" pos:column="39">total_in<pos:position pos:line="328" pos:column="47"/></name></name></expr></argument>, <argument><expr><name><name pos:line="328" pos:column="49">ctx<pos:position pos:line="328" pos:column="52"/></name><operator pos:line="328" pos:column="52">-&gt;<pos:position pos:line="328" pos:column="57"/></operator><name pos:line="328" pos:column="54">stream<pos:position pos:line="328" pos:column="60"/></name><operator pos:line="328" pos:column="60">.<pos:position pos:line="328" pos:column="61"/></operator><name pos:line="328" pos:column="61">total_out<pos:position pos:line="328" pos:column="70"/></name></name></expr></argument>, <argument><expr><name><name pos:line="328" pos:column="72">r<pos:position pos:line="328" pos:column="73"/></name><operator pos:line="328" pos:column="73">-&gt;<pos:position pos:line="328" pos:column="78"/></operator><name pos:line="328" pos:column="75">uri<pos:position pos:line="328" pos:column="78"/></name></name></expr></argument>)<pos:position pos:line="328" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="328" pos:column="80"/></expr_stmt>

            <comment type="block" pos:line="330" pos:column="13">/* leave notes for logging */</comment>
            <if pos:line="331" pos:column="13">if <condition pos:line="331" pos:column="16">(<expr><name><name pos:line="331" pos:column="17">c<pos:position pos:line="331" pos:column="18"/></name><operator pos:line="331" pos:column="18">-&gt;<pos:position pos:line="331" pos:column="23"/></operator><name pos:line="331" pos:column="20">note_input_name<pos:position pos:line="331" pos:column="35"/></name></name></expr>)<pos:position pos:line="331" pos:column="36"/></condition><then pos:line="331" pos:column="36"> <block pos:line="331" pos:column="37">{
                <expr_stmt><expr><call><name pos:line="332" pos:column="17">apr_table_setn<pos:position pos:line="332" pos:column="31"/></name><argument_list pos:line="332" pos:column="31">(<argument><expr><name><name pos:line="332" pos:column="32">r<pos:position pos:line="332" pos:column="33"/></name><operator pos:line="332" pos:column="33">-&gt;<pos:position pos:line="332" pos:column="38"/></operator><name pos:line="332" pos:column="35">notes<pos:position pos:line="332" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="332" pos:column="42">c<pos:position pos:line="332" pos:column="43"/></name><operator pos:line="332" pos:column="43">-&gt;<pos:position pos:line="332" pos:column="48"/></operator><name pos:line="332" pos:column="45">note_input_name<pos:position pos:line="332" pos:column="60"/></name></name></expr></argument>,
                               <argument><expr><ternary><condition><expr><operator pos:line="333" pos:column="32">(<pos:position pos:line="333" pos:column="33"/></operator><name><name pos:line="333" pos:column="33">ctx<pos:position pos:line="333" pos:column="36"/></name><operator pos:line="333" pos:column="36">-&gt;<pos:position pos:line="333" pos:column="41"/></operator><name pos:line="333" pos:column="38">stream<pos:position pos:line="333" pos:column="44"/></name><operator pos:line="333" pos:column="44">.<pos:position pos:line="333" pos:column="45"/></operator><name pos:line="333" pos:column="45">total_in<pos:position pos:line="333" pos:column="53"/></name></name> <operator pos:line="333" pos:column="54">&gt;<pos:position pos:line="333" pos:column="58"/></operator> <literal type="number" pos:line="333" pos:column="56">0<pos:position pos:line="333" pos:column="57"/></literal><operator pos:line="333" pos:column="57">)<pos:position pos:line="333" pos:column="58"/></operator></expr>
                                ?<pos:position pos:line="334" pos:column="34"/></condition><then pos:line="334" pos:column="34"> <expr><call><name pos:line="334" pos:column="35">apr_off_t_toa<pos:position pos:line="334" pos:column="48"/></name><argument_list pos:line="334" pos:column="48">(<argument><expr><name><name pos:line="334" pos:column="49">r<pos:position pos:line="334" pos:column="50"/></name><operator pos:line="334" pos:column="50">-&gt;<pos:position pos:line="334" pos:column="55"/></operator><name pos:line="334" pos:column="52">pool<pos:position pos:line="334" pos:column="56"/></name></name></expr></argument>,
                                                <argument><expr><name><name pos:line="335" pos:column="49">ctx<pos:position pos:line="335" pos:column="52"/></name><operator pos:line="335" pos:column="52">-&gt;<pos:position pos:line="335" pos:column="57"/></operator><name pos:line="335" pos:column="54">stream<pos:position pos:line="335" pos:column="60"/></name><operator pos:line="335" pos:column="60">.<pos:position pos:line="335" pos:column="61"/></operator><name pos:line="335" pos:column="61">total_in<pos:position pos:line="335" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="335" pos:column="70"/></argument_list></call></expr>
                                <pos:position pos:line="336" pos:column="33"/></then><else pos:line="336" pos:column="33">: <expr><literal type="string" pos:line="336" pos:column="35">"-"<pos:position pos:line="336" pos:column="38"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="336" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="336" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="337" pos:column="14"/></block></then></if>

            <if pos:line="339" pos:column="13">if <condition pos:line="339" pos:column="16">(<expr><name><name pos:line="339" pos:column="17">c<pos:position pos:line="339" pos:column="18"/></name><operator pos:line="339" pos:column="18">-&gt;<pos:position pos:line="339" pos:column="23"/></operator><name pos:line="339" pos:column="20">note_output_name<pos:position pos:line="339" pos:column="36"/></name></name></expr>)<pos:position pos:line="339" pos:column="37"/></condition><then pos:line="339" pos:column="37"> <block pos:line="339" pos:column="38">{
                <expr_stmt><expr><call><name pos:line="340" pos:column="17">apr_table_setn<pos:position pos:line="340" pos:column="31"/></name><argument_list pos:line="340" pos:column="31">(<argument><expr><name><name pos:line="340" pos:column="32">r<pos:position pos:line="340" pos:column="33"/></name><operator pos:line="340" pos:column="33">-&gt;<pos:position pos:line="340" pos:column="38"/></operator><name pos:line="340" pos:column="35">notes<pos:position pos:line="340" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="340" pos:column="42">c<pos:position pos:line="340" pos:column="43"/></name><operator pos:line="340" pos:column="43">-&gt;<pos:position pos:line="340" pos:column="48"/></operator><name pos:line="340" pos:column="45">note_output_name<pos:position pos:line="340" pos:column="61"/></name></name></expr></argument>,
                               <argument><expr><ternary><condition><expr><operator pos:line="341" pos:column="32">(<pos:position pos:line="341" pos:column="33"/></operator><name><name pos:line="341" pos:column="33">ctx<pos:position pos:line="341" pos:column="36"/></name><operator pos:line="341" pos:column="36">-&gt;<pos:position pos:line="341" pos:column="41"/></operator><name pos:line="341" pos:column="38">stream<pos:position pos:line="341" pos:column="44"/></name><operator pos:line="341" pos:column="44">.<pos:position pos:line="341" pos:column="45"/></operator><name pos:line="341" pos:column="45">total_in<pos:position pos:line="341" pos:column="53"/></name></name> <operator pos:line="341" pos:column="54">&gt;<pos:position pos:line="341" pos:column="58"/></operator> <literal type="number" pos:line="341" pos:column="56">0<pos:position pos:line="341" pos:column="57"/></literal><operator pos:line="341" pos:column="57">)<pos:position pos:line="341" pos:column="58"/></operator></expr>
                                ?<pos:position pos:line="342" pos:column="34"/></condition><then pos:line="342" pos:column="34"> <expr><call><name pos:line="342" pos:column="35">apr_off_t_toa<pos:position pos:line="342" pos:column="48"/></name><argument_list pos:line="342" pos:column="48">(<argument><expr><name><name pos:line="342" pos:column="49">r<pos:position pos:line="342" pos:column="50"/></name><operator pos:line="342" pos:column="50">-&gt;<pos:position pos:line="342" pos:column="55"/></operator><name pos:line="342" pos:column="52">pool<pos:position pos:line="342" pos:column="56"/></name></name></expr></argument>,
                                                <argument><expr><name><name pos:line="343" pos:column="49">ctx<pos:position pos:line="343" pos:column="52"/></name><operator pos:line="343" pos:column="52">-&gt;<pos:position pos:line="343" pos:column="57"/></operator><name pos:line="343" pos:column="54">stream<pos:position pos:line="343" pos:column="60"/></name><operator pos:line="343" pos:column="60">.<pos:position pos:line="343" pos:column="61"/></operator><name pos:line="343" pos:column="61">total_out<pos:position pos:line="343" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="343" pos:column="71"/></argument_list></call></expr>
                                <pos:position pos:line="344" pos:column="33"/></then><else pos:line="344" pos:column="33">: <expr><literal type="string" pos:line="344" pos:column="35">"-"<pos:position pos:line="344" pos:column="38"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="344" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="345" pos:column="14"/></block></then></if>

            <if pos:line="347" pos:column="13">if <condition pos:line="347" pos:column="16">(<expr><name><name pos:line="347" pos:column="17">c<pos:position pos:line="347" pos:column="18"/></name><operator pos:line="347" pos:column="18">-&gt;<pos:position pos:line="347" pos:column="23"/></operator><name pos:line="347" pos:column="20">note_ratio_name<pos:position pos:line="347" pos:column="35"/></name></name></expr>)<pos:position pos:line="347" pos:column="36"/></condition><then pos:line="347" pos:column="36"> <block pos:line="347" pos:column="37">{
                <expr_stmt><expr><call><name pos:line="348" pos:column="17">apr_table_setn<pos:position pos:line="348" pos:column="31"/></name><argument_list pos:line="348" pos:column="31">(<argument><expr><name><name pos:line="348" pos:column="32">r<pos:position pos:line="348" pos:column="33"/></name><operator pos:line="348" pos:column="33">-&gt;<pos:position pos:line="348" pos:column="38"/></operator><name pos:line="348" pos:column="35">notes<pos:position pos:line="348" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="348" pos:column="42">c<pos:position pos:line="348" pos:column="43"/></name><operator pos:line="348" pos:column="43">-&gt;<pos:position pos:line="348" pos:column="48"/></operator><name pos:line="348" pos:column="45">note_ratio_name<pos:position pos:line="348" pos:column="60"/></name></name></expr></argument>,
                               <argument><expr><ternary><condition><expr><operator pos:line="349" pos:column="32">(<pos:position pos:line="349" pos:column="33"/></operator><name><name pos:line="349" pos:column="33">ctx<pos:position pos:line="349" pos:column="36"/></name><operator pos:line="349" pos:column="36">-&gt;<pos:position pos:line="349" pos:column="41"/></operator><name pos:line="349" pos:column="38">stream<pos:position pos:line="349" pos:column="44"/></name><operator pos:line="349" pos:column="44">.<pos:position pos:line="349" pos:column="45"/></operator><name pos:line="349" pos:column="45">total_in<pos:position pos:line="349" pos:column="53"/></name></name> <operator pos:line="349" pos:column="54">&gt;<pos:position pos:line="349" pos:column="58"/></operator> <literal type="number" pos:line="349" pos:column="56">0<pos:position pos:line="349" pos:column="57"/></literal><operator pos:line="349" pos:column="57">)<pos:position pos:line="349" pos:column="58"/></operator></expr>
                                ?<pos:position pos:line="350" pos:column="34"/></condition><then pos:line="350" pos:column="34"> <expr><call><name pos:line="350" pos:column="35">apr_itoa<pos:position pos:line="350" pos:column="43"/></name><argument_list pos:line="350" pos:column="43">(<argument><expr><name><name pos:line="350" pos:column="44">r<pos:position pos:line="350" pos:column="45"/></name><operator pos:line="350" pos:column="45">-&gt;<pos:position pos:line="350" pos:column="50"/></operator><name pos:line="350" pos:column="47">pool<pos:position pos:line="350" pos:column="51"/></name></name></expr></argument>,
                                           <argument><expr><call pos:line="351" pos:column="44">(<name pos:line="351" pos:column="45">int<pos:position pos:line="351" pos:column="48"/></name>)<argument_list pos:line="351" pos:column="49">(<argument><expr><name><name pos:line="351" pos:column="50">ctx<pos:position pos:line="351" pos:column="53"/></name><operator pos:line="351" pos:column="53">-&gt;<pos:position pos:line="351" pos:column="58"/></operator><name pos:line="351" pos:column="55">stream<pos:position pos:line="351" pos:column="61"/></name><operator pos:line="351" pos:column="61">.<pos:position pos:line="351" pos:column="62"/></operator><name pos:line="351" pos:column="62">total_out<pos:position pos:line="351" pos:column="71"/></name></name>
                                                 <operator pos:line="352" pos:column="50">*<pos:position pos:line="352" pos:column="51"/></operator> <literal type="number" pos:line="352" pos:column="52">100<pos:position pos:line="352" pos:column="55"/></literal>
                                                 <operator pos:line="353" pos:column="50">/<pos:position pos:line="353" pos:column="51"/></operator> <name><name pos:line="353" pos:column="52">ctx<pos:position pos:line="353" pos:column="55"/></name><operator pos:line="353" pos:column="55">-&gt;<pos:position pos:line="353" pos:column="60"/></operator><name pos:line="353" pos:column="57">stream<pos:position pos:line="353" pos:column="63"/></name><operator pos:line="353" pos:column="63">.<pos:position pos:line="353" pos:column="64"/></operator><name pos:line="353" pos:column="64">total_in<pos:position pos:line="353" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="353" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="353" pos:column="74"/></argument_list></call></expr>
                                <pos:position pos:line="354" pos:column="33"/></then><else pos:line="354" pos:column="33">: <expr><literal type="string" pos:line="354" pos:column="35">"-"<pos:position pos:line="354" pos:column="38"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="354" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="354" pos:column="40"/></expr_stmt>
            }<pos:position pos:line="355" pos:column="14"/></block></then></if>

            <expr_stmt><expr><call><name pos:line="357" pos:column="13">deflateEnd<pos:position pos:line="357" pos:column="23"/></name><argument_list pos:line="357" pos:column="23">(<argument><expr><operator pos:line="357" pos:column="24">&amp;<pos:position pos:line="357" pos:column="29"/></operator><name><name pos:line="357" pos:column="25">ctx<pos:position pos:line="357" pos:column="28"/></name><operator pos:line="357" pos:column="28">-&gt;<pos:position pos:line="357" pos:column="33"/></operator><name pos:line="357" pos:column="30">stream<pos:position pos:line="357" pos:column="36"/></name></name></expr></argument>)<pos:position pos:line="357" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="357" pos:column="38"/></expr_stmt>
            <comment type="block" pos:line="358" pos:column="13">/* No need for cleanup any longer */</comment>
            <expr_stmt><expr><call><name pos:line="359" pos:column="13">apr_pool_cleanup_kill<pos:position pos:line="359" pos:column="34"/></name><argument_list pos:line="359" pos:column="34">(<argument><expr><name><name pos:line="359" pos:column="35">r<pos:position pos:line="359" pos:column="36"/></name><operator pos:line="359" pos:column="36">-&gt;<pos:position pos:line="359" pos:column="41"/></operator><name pos:line="359" pos:column="38">pool<pos:position pos:line="359" pos:column="42"/></name></name></expr></argument>, <argument><expr><name pos:line="359" pos:column="44">ctx<pos:position pos:line="359" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="359" pos:column="49">deflate_ctx_cleanup<pos:position pos:line="359" pos:column="68"/></name></expr></argument>)<pos:position pos:line="359" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="359" pos:column="70"/></expr_stmt>

            <comment type="block" pos:line="361" pos:column="13">/* Remove EOS from the old list, and insert into the new. */</comment>
            <expr_stmt><expr><call><name pos:line="362" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="362" pos:column="30"/></name><argument_list pos:line="362" pos:column="30">(<argument><expr><name pos:line="362" pos:column="31">e<pos:position pos:line="362" pos:column="32"/></name></expr></argument>)<pos:position pos:line="362" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="362" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="363" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="363" pos:column="36"/></name><argument_list pos:line="363" pos:column="36">(<argument><expr><name><name pos:line="363" pos:column="37">ctx<pos:position pos:line="363" pos:column="40"/></name><operator pos:line="363" pos:column="40">-&gt;<pos:position pos:line="363" pos:column="45"/></operator><name pos:line="363" pos:column="42">bb<pos:position pos:line="363" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="363" pos:column="46">e<pos:position pos:line="363" pos:column="47"/></name></expr></argument>)<pos:position pos:line="363" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="363" pos:column="49"/></expr_stmt>

            <comment type="block" pos:line="365" pos:column="13">/* Okay, we've seen the EOS.
             * Time to pass it along down the chain.
             */</comment>
            <return pos:line="368" pos:column="13">return <expr><call><name pos:line="368" pos:column="20">ap_pass_brigade<pos:position pos:line="368" pos:column="35"/></name><argument_list pos:line="368" pos:column="35">(<argument><expr><name><name pos:line="368" pos:column="36">f<pos:position pos:line="368" pos:column="37"/></name><operator pos:line="368" pos:column="37">-&gt;<pos:position pos:line="368" pos:column="42"/></operator><name pos:line="368" pos:column="39">next<pos:position pos:line="368" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="368" pos:column="45">ctx<pos:position pos:line="368" pos:column="48"/></name><operator pos:line="368" pos:column="48">-&gt;<pos:position pos:line="368" pos:column="53"/></operator><name pos:line="368" pos:column="50">bb<pos:position pos:line="368" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="368" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="368" pos:column="54"/></return>
        }<pos:position pos:line="369" pos:column="10"/></block></then></if>

        <if pos:line="371" pos:column="9">if <condition pos:line="371" pos:column="12">(<expr><call><name pos:line="371" pos:column="13">APR_BUCKET_IS_FLUSH<pos:position pos:line="371" pos:column="32"/></name><argument_list pos:line="371" pos:column="32">(<argument><expr><name pos:line="371" pos:column="33">e<pos:position pos:line="371" pos:column="34"/></name></expr></argument>)<pos:position pos:line="371" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="371" pos:column="36"/></condition><then pos:line="371" pos:column="36"> <block pos:line="371" pos:column="37">{
            <decl_stmt><decl><type><name pos:line="372" pos:column="13">apr_status_t<pos:position pos:line="372" pos:column="25"/></name></type> <name pos:line="372" pos:column="26">rv<pos:position pos:line="372" pos:column="28"/></name></decl>;<pos:position pos:line="372" pos:column="29"/></decl_stmt>

            <comment type="block" pos:line="374" pos:column="13">/* flush the remaining data from the zlib buffers */</comment>
            <expr_stmt><expr><name pos:line="375" pos:column="13">zRC<pos:position pos:line="375" pos:column="16"/></name> <operator pos:line="375" pos:column="17">=<pos:position pos:line="375" pos:column="18"/></operator> <call><name pos:line="375" pos:column="19">flush_libz_buffer<pos:position pos:line="375" pos:column="36"/></name><argument_list pos:line="375" pos:column="36">(<argument><expr><name pos:line="375" pos:column="37">ctx<pos:position pos:line="375" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="375" pos:column="42">c<pos:position pos:line="375" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="375" pos:column="45">f<pos:position pos:line="375" pos:column="46"/></name><operator pos:line="375" pos:column="46">-&gt;<pos:position pos:line="375" pos:column="51"/></operator><name pos:line="375" pos:column="48">c<pos:position pos:line="375" pos:column="49"/></name><operator pos:line="375" pos:column="49">-&gt;<pos:position pos:line="375" pos:column="54"/></operator><name pos:line="375" pos:column="51">bucket_alloc<pos:position pos:line="375" pos:column="63"/></name></name></expr></argument>, <argument><expr><name pos:line="375" pos:column="65">deflate<pos:position pos:line="375" pos:column="72"/></name></expr></argument>,
                                    <argument><expr><name pos:line="376" pos:column="37">Z_SYNC_FLUSH<pos:position pos:line="376" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="376" pos:column="51">NO_UPDATE_CRC<pos:position pos:line="376" pos:column="64"/></name></expr></argument>)<pos:position pos:line="376" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="376" pos:column="66"/></expr_stmt>
            <if pos:line="377" pos:column="13">if <condition pos:line="377" pos:column="16">(<expr><name pos:line="377" pos:column="17">zRC<pos:position pos:line="377" pos:column="20"/></name> <operator pos:line="377" pos:column="21">!=<pos:position pos:line="377" pos:column="23"/></operator> <name pos:line="377" pos:column="24">Z_OK<pos:position pos:line="377" pos:column="28"/></name></expr>)<pos:position pos:line="377" pos:column="29"/></condition><then pos:line="377" pos:column="29"> <block pos:line="377" pos:column="30">{
                <expr_stmt><expr><call><name pos:line="378" pos:column="17">ap_log_rerror<pos:position pos:line="378" pos:column="30"/></name><argument_list pos:line="378" pos:column="30">(<argument><expr><name pos:line="378" pos:column="31">APLOG_MARK<pos:position pos:line="378" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="378" pos:column="43">APLOG_ERR<pos:position pos:line="378" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="378" pos:column="54">0<pos:position pos:line="378" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="378" pos:column="57">r<pos:position pos:line="378" pos:column="58"/></name></expr></argument>, <argument><expr><call><name pos:line="378" pos:column="60">APLOGNO<pos:position pos:line="378" pos:column="67"/></name><argument_list pos:line="378" pos:column="67">(<argument><expr><literal type="number" pos:line="378" pos:column="68">01385<pos:position pos:line="378" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="378" pos:column="74"/></argument_list></call>
                              <literal type="string" pos:line="379" pos:column="31">"Zlib error %d flushing zlib output buffer (%s)"<pos:position pos:line="379" pos:column="79"/></literal></expr></argument>,
                              <argument><expr><name pos:line="380" pos:column="31">zRC<pos:position pos:line="380" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="380" pos:column="36">ctx<pos:position pos:line="380" pos:column="39"/></name><operator pos:line="380" pos:column="39">-&gt;<pos:position pos:line="380" pos:column="44"/></operator><name pos:line="380" pos:column="41">stream<pos:position pos:line="380" pos:column="47"/></name><operator pos:line="380" pos:column="47">.<pos:position pos:line="380" pos:column="48"/></operator><name pos:line="380" pos:column="48">msg<pos:position pos:line="380" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="380" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="380" pos:column="53"/></expr_stmt>
                <return pos:line="381" pos:column="17">return <expr><name pos:line="381" pos:column="24">APR_EGENERAL<pos:position pos:line="381" pos:column="36"/></name></expr>;<pos:position pos:line="381" pos:column="37"/></return>
            }<pos:position pos:line="382" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="384" pos:column="13">/* Remove flush bucket from old brigade anf insert into the new. */</comment>
            <expr_stmt><expr><call><name pos:line="385" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="385" pos:column="30"/></name><argument_list pos:line="385" pos:column="30">(<argument><expr><name pos:line="385" pos:column="31">e<pos:position pos:line="385" pos:column="32"/></name></expr></argument>)<pos:position pos:line="385" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="385" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="386" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="386" pos:column="36"/></name><argument_list pos:line="386" pos:column="36">(<argument><expr><name><name pos:line="386" pos:column="37">ctx<pos:position pos:line="386" pos:column="40"/></name><operator pos:line="386" pos:column="40">-&gt;<pos:position pos:line="386" pos:column="45"/></operator><name pos:line="386" pos:column="42">bb<pos:position pos:line="386" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="386" pos:column="46">e<pos:position pos:line="386" pos:column="47"/></name></expr></argument>)<pos:position pos:line="386" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="386" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name pos:line="387" pos:column="13">rv<pos:position pos:line="387" pos:column="15"/></name> <operator pos:line="387" pos:column="16">=<pos:position pos:line="387" pos:column="17"/></operator> <call><name pos:line="387" pos:column="18">ap_pass_brigade<pos:position pos:line="387" pos:column="33"/></name><argument_list pos:line="387" pos:column="33">(<argument><expr><name><name pos:line="387" pos:column="34">f<pos:position pos:line="387" pos:column="35"/></name><operator pos:line="387" pos:column="35">-&gt;<pos:position pos:line="387" pos:column="40"/></operator><name pos:line="387" pos:column="37">next<pos:position pos:line="387" pos:column="41"/></name></name></expr></argument>, <argument><expr><name><name pos:line="387" pos:column="43">ctx<pos:position pos:line="387" pos:column="46"/></name><operator pos:line="387" pos:column="46">-&gt;<pos:position pos:line="387" pos:column="51"/></operator><name pos:line="387" pos:column="48">bb<pos:position pos:line="387" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="387" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="387" pos:column="52"/></expr_stmt>
            <if pos:line="388" pos:column="13">if <condition pos:line="388" pos:column="16">(<expr><name pos:line="388" pos:column="17">rv<pos:position pos:line="388" pos:column="19"/></name> <operator pos:line="388" pos:column="20">!=<pos:position pos:line="388" pos:column="22"/></operator> <name pos:line="388" pos:column="23">APR_SUCCESS<pos:position pos:line="388" pos:column="34"/></name></expr>)<pos:position pos:line="388" pos:column="35"/></condition><then pos:line="388" pos:column="35"> <block pos:line="388" pos:column="36">{
                <return pos:line="389" pos:column="17">return <expr><name pos:line="389" pos:column="24">rv<pos:position pos:line="389" pos:column="26"/></name></expr>;<pos:position pos:line="389" pos:column="27"/></return>
            }<pos:position pos:line="390" pos:column="14"/></block></then></if>
            <continue pos:line="391" pos:column="13">continue;<pos:position pos:line="391" pos:column="22"/></continue>
        }<pos:position pos:line="392" pos:column="10"/></block></then></if>

        <if pos:line="394" pos:column="9">if <condition pos:line="394" pos:column="12">(<expr><call><name pos:line="394" pos:column="13">APR_BUCKET_IS_METADATA<pos:position pos:line="394" pos:column="35"/></name><argument_list pos:line="394" pos:column="35">(<argument><expr><name pos:line="394" pos:column="36">e<pos:position pos:line="394" pos:column="37"/></name></expr></argument>)<pos:position pos:line="394" pos:column="38"/></argument_list></call></expr>)<pos:position pos:line="394" pos:column="39"/></condition><then pos:line="394" pos:column="39"> <block pos:line="394" pos:column="40">{
            <comment type="block" pos:line="395" pos:column="13">/*
             * Remove meta data bucket from old brigade and insert into the
             * new.
             */</comment>
            <expr_stmt><expr><call><name pos:line="399" pos:column="13">APR_BUCKET_REMOVE<pos:position pos:line="399" pos:column="30"/></name><argument_list pos:line="399" pos:column="30">(<argument><expr><name pos:line="399" pos:column="31">e<pos:position pos:line="399" pos:column="32"/></name></expr></argument>)<pos:position pos:line="399" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="399" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="400" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="400" pos:column="36"/></name><argument_list pos:line="400" pos:column="36">(<argument><expr><name><name pos:line="400" pos:column="37">ctx<pos:position pos:line="400" pos:column="40"/></name><operator pos:line="400" pos:column="40">-&gt;<pos:position pos:line="400" pos:column="45"/></operator><name pos:line="400" pos:column="42">bb<pos:position pos:line="400" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="400" pos:column="46">e<pos:position pos:line="400" pos:column="47"/></name></expr></argument>)<pos:position pos:line="400" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="400" pos:column="49"/></expr_stmt>
            <continue pos:line="401" pos:column="13">continue;<pos:position pos:line="401" pos:column="22"/></continue>
        }<pos:position pos:line="402" pos:column="10"/></block></then></if>

        <comment type="block" pos:line="404" pos:column="9">/* read */</comment>
        <expr_stmt><expr><call><name pos:line="405" pos:column="9">apr_bucket_read<pos:position pos:line="405" pos:column="24"/></name><argument_list pos:line="405" pos:column="24">(<argument><expr><name pos:line="405" pos:column="25">e<pos:position pos:line="405" pos:column="26"/></name></expr></argument>, <argument><expr><operator pos:line="405" pos:column="28">&amp;<pos:position pos:line="405" pos:column="33"/></operator><name pos:line="405" pos:column="29">data<pos:position pos:line="405" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="405" pos:column="35">&amp;<pos:position pos:line="405" pos:column="40"/></operator><name pos:line="405" pos:column="36">len<pos:position pos:line="405" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="405" pos:column="41">APR_BLOCK_READ<pos:position pos:line="405" pos:column="55"/></name></expr></argument>)<pos:position pos:line="405" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="405" pos:column="57"/></expr_stmt>

        <comment type="block" pos:line="407" pos:column="9">/* This crc32 function is from zlib. */</comment>
        <expr_stmt><expr><name><name pos:line="408" pos:column="9">ctx<pos:position pos:line="408" pos:column="12"/></name><operator pos:line="408" pos:column="12">-&gt;<pos:position pos:line="408" pos:column="17"/></operator><name pos:line="408" pos:column="14">crc<pos:position pos:line="408" pos:column="17"/></name></name> <operator pos:line="408" pos:column="18">=<pos:position pos:line="408" pos:column="19"/></operator> <call><name pos:line="408" pos:column="20">crc32<pos:position pos:line="408" pos:column="25"/></name><argument_list pos:line="408" pos:column="25">(<argument><expr><name><name pos:line="408" pos:column="26">ctx<pos:position pos:line="408" pos:column="29"/></name><operator pos:line="408" pos:column="29">-&gt;<pos:position pos:line="408" pos:column="34"/></operator><name pos:line="408" pos:column="31">crc<pos:position pos:line="408" pos:column="34"/></name></name></expr></argument>, <argument><expr><operator pos:line="408" pos:column="36">(<pos:position pos:line="408" pos:column="37"/></operator><specifier pos:line="408" pos:column="37">const<pos:position pos:line="408" pos:column="42"/></specifier> <name pos:line="408" pos:column="43">Bytef<pos:position pos:line="408" pos:column="48"/></name> <operator pos:line="408" pos:column="49">*<pos:position pos:line="408" pos:column="50"/></operator><operator pos:line="408" pos:column="50">)<pos:position pos:line="408" pos:column="51"/></operator><name pos:line="408" pos:column="51">data<pos:position pos:line="408" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="408" pos:column="57">len<pos:position pos:line="408" pos:column="60"/></name></expr></argument>)<pos:position pos:line="408" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="408" pos:column="62"/></expr_stmt>

        <comment type="block" pos:line="410" pos:column="9">/* write */</comment>
        <expr_stmt><expr><name><name pos:line="411" pos:column="9">ctx<pos:position pos:line="411" pos:column="12"/></name><operator pos:line="411" pos:column="12">-&gt;<pos:position pos:line="411" pos:column="17"/></operator><name pos:line="411" pos:column="14">stream<pos:position pos:line="411" pos:column="20"/></name><operator pos:line="411" pos:column="20">.<pos:position pos:line="411" pos:column="21"/></operator><name pos:line="411" pos:column="21">next_in<pos:position pos:line="411" pos:column="28"/></name></name> <operator pos:line="411" pos:column="29">=<pos:position pos:line="411" pos:column="30"/></operator> <operator pos:line="411" pos:column="31">(<pos:position pos:line="411" pos:column="32"/></operator><name pos:line="411" pos:column="32">unsigned<pos:position pos:line="411" pos:column="40"/></name> <name pos:line="411" pos:column="41">char<pos:position pos:line="411" pos:column="45"/></name> <operator pos:line="411" pos:column="46">*<pos:position pos:line="411" pos:column="47"/></operator><operator pos:line="411" pos:column="47">)<pos:position pos:line="411" pos:column="48"/></operator><name pos:line="411" pos:column="48">data<pos:position pos:line="411" pos:column="52"/></name></expr>;<pos:position pos:line="411" pos:column="53"/></expr_stmt></block></while></block></function> <comment type="block" pos:line="411" pos:column="54">/* We j</comment></unit>
