<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1068_httpd-2.0.43.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">set_neg_headers<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">request_rec<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">r<pos:position pos:line="1" pos:column="43"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="45">negotiation_state<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">neg<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>,
                            <parameter><decl><type><name pos:line="2" pos:column="29">int<pos:position pos:line="2" pos:column="32"/></name></type> <name pos:line="2" pos:column="33">alg_result<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="44"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_table_t<pos:position pos:line="4" pos:column="16"/></name> <modifier pos:line="4" pos:column="17">*<pos:position pos:line="4" pos:column="18"/></modifier></type><name pos:line="4" pos:column="18">hdrs<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">var_rec<pos:position pos:line="5" pos:column="12"/></name> <modifier pos:line="5" pos:column="13">*<pos:position pos:line="5" pos:column="14"/></modifier></type><name pos:line="5" pos:column="14">avail_recs<pos:position pos:line="5" pos:column="24"/></name> <init pos:line="5" pos:column="25">= <expr><operator pos:line="5" pos:column="27">(<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="28">var_rec<pos:position pos:line="5" pos:column="35"/></name> <operator pos:line="5" pos:column="36">*<pos:position pos:line="5" pos:column="37"/></operator><operator pos:line="5" pos:column="37">)<pos:position pos:line="5" pos:column="38"/></operator> <name><name pos:line="5" pos:column="39">neg<pos:position pos:line="5" pos:column="42"/></name><operator pos:line="5" pos:column="42">-&gt;<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="44">avail_vars<pos:position pos:line="5" pos:column="54"/></name><operator pos:line="5" pos:column="54">-&gt;<pos:position pos:line="5" pos:column="59"/></operator><name pos:line="5" pos:column="56">elts<pos:position pos:line="5" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="61"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="6" pos:column="5">const<pos:position pos:line="6" pos:column="10"/></specifier> <name pos:line="6" pos:column="11">char<pos:position pos:line="6" pos:column="15"/></name> <modifier pos:line="6" pos:column="16">*<pos:position pos:line="6" pos:column="17"/></modifier></type><name pos:line="6" pos:column="17">sample_type<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><name pos:line="6" pos:column="31">NULL<pos:position pos:line="6" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="6" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="7" pos:column="5">const<pos:position pos:line="7" pos:column="10"/></specifier> <name pos:line="7" pos:column="11">char<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">sample_language<pos:position pos:line="7" pos:column="32"/></name> <init pos:line="7" pos:column="33">= <expr><name pos:line="7" pos:column="35">NULL<pos:position pos:line="7" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="8" pos:column="5">const<pos:position pos:line="8" pos:column="10"/></specifier> <name pos:line="8" pos:column="11">char<pos:position pos:line="8" pos:column="15"/></name> <modifier pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></modifier></type><name pos:line="8" pos:column="17">sample_encoding<pos:position pos:line="8" pos:column="32"/></name> <init pos:line="8" pos:column="33">= <expr><name pos:line="8" pos:column="35">NULL<pos:position pos:line="8" pos:column="39"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="40"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">sample_charset<pos:position pos:line="9" pos:column="31"/></name> <init pos:line="9" pos:column="32">= <expr><name pos:line="9" pos:column="34">NULL<pos:position pos:line="9" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">char<pos:position pos:line="10" pos:column="9"/></name> <modifier pos:line="10" pos:column="10">*<pos:position pos:line="10" pos:column="11"/></modifier></type><name pos:line="10" pos:column="11">lang<pos:position pos:line="10" pos:column="15"/></name></decl>;<pos:position pos:line="10" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">char<pos:position pos:line="11" pos:column="9"/></name> <modifier pos:line="11" pos:column="10">*<pos:position pos:line="11" pos:column="11"/></modifier></type><name pos:line="11" pos:column="11">qstr<pos:position pos:line="11" pos:column="15"/></name></decl>;<pos:position pos:line="11" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="12" pos:column="5">char<pos:position pos:line="12" pos:column="9"/></name> <modifier pos:line="12" pos:column="10">*<pos:position pos:line="12" pos:column="11"/></modifier></type><name pos:line="12" pos:column="11">lenstr<pos:position pos:line="12" pos:column="17"/></name></decl>;<pos:position pos:line="12" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">apr_off_t<pos:position pos:line="13" pos:column="14"/></name></type> <name pos:line="13" pos:column="15">len<pos:position pos:line="13" pos:column="18"/></name></decl>;<pos:position pos:line="13" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="14" pos:column="5">apr_array_header_t<pos:position pos:line="14" pos:column="23"/></name> <modifier pos:line="14" pos:column="24">*<pos:position pos:line="14" pos:column="25"/></modifier></type><name pos:line="14" pos:column="25">arr<pos:position pos:line="14" pos:column="28"/></name></decl>;<pos:position pos:line="14" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="15" pos:column="5">int<pos:position pos:line="15" pos:column="8"/></name></type> <name pos:line="15" pos:column="9">max_vlist_array<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">= <expr><operator pos:line="15" pos:column="27">(<pos:position pos:line="15" pos:column="28"/></operator><name><name pos:line="15" pos:column="28">neg<pos:position pos:line="15" pos:column="31"/></name><operator pos:line="15" pos:column="31">-&gt;<pos:position pos:line="15" pos:column="36"/></operator><name pos:line="15" pos:column="33">avail_vars<pos:position pos:line="15" pos:column="43"/></name><operator pos:line="15" pos:column="43">-&gt;<pos:position pos:line="15" pos:column="48"/></operator><name pos:line="15" pos:column="45">nelts<pos:position pos:line="15" pos:column="50"/></name></name> <operator pos:line="15" pos:column="51">*<pos:position pos:line="15" pos:column="52"/></operator> <literal type="number" pos:line="15" pos:column="53">21<pos:position pos:line="15" pos:column="55"/></literal><operator pos:line="15" pos:column="55">)<pos:position pos:line="15" pos:column="56"/></operator></expr></init></decl>;<pos:position pos:line="15" pos:column="57"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="16" pos:column="5">int<pos:position pos:line="16" pos:column="8"/></name></type> <name pos:line="16" pos:column="9">first_variant<pos:position pos:line="16" pos:column="22"/></name> <init pos:line="16" pos:column="23">= <expr><literal type="number" pos:line="16" pos:column="25">1<pos:position pos:line="16" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="16" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="17" pos:column="5">int<pos:position pos:line="17" pos:column="8"/></name></type> <name pos:line="17" pos:column="9">vary_by_type<pos:position pos:line="17" pos:column="21"/></name> <init pos:line="17" pos:column="22">= <expr><literal type="number" pos:line="17" pos:column="24">0<pos:position pos:line="17" pos:column="25"/></literal></expr></init></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="18" pos:column="5">int<pos:position pos:line="18" pos:column="8"/></name></type> <name pos:line="18" pos:column="9">vary_by_language<pos:position pos:line="18" pos:column="25"/></name> <init pos:line="18" pos:column="26">= <expr><literal type="number" pos:line="18" pos:column="28">0<pos:position pos:line="18" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="18" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="19" pos:column="5">int<pos:position pos:line="19" pos:column="8"/></name></type> <name pos:line="19" pos:column="9">vary_by_charset<pos:position pos:line="19" pos:column="24"/></name> <init pos:line="19" pos:column="25">= <expr><literal type="number" pos:line="19" pos:column="27">0<pos:position pos:line="19" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="19" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="20" pos:column="5">int<pos:position pos:line="20" pos:column="8"/></name></type> <name pos:line="20" pos:column="9">vary_by_encoding<pos:position pos:line="20" pos:column="25"/></name> <init pos:line="20" pos:column="26">= <expr><literal type="number" pos:line="20" pos:column="28">0<pos:position pos:line="20" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="20" pos:column="30"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="21" pos:column="5">int<pos:position pos:line="21" pos:column="8"/></name></type> <name pos:line="21" pos:column="9">j<pos:position pos:line="21" pos:column="10"/></name></decl>;<pos:position pos:line="21" pos:column="11"/></decl_stmt>

    <comment type="block" pos:line="23" pos:column="5">/* In order to avoid O(n^2) memory copies in building Alternates,
     * we preallocate a apr_table_t with the maximum substrings possible,
     * fill it with the variant list, and then concatenate the entire array.
     * Note that if you change the number of substrings pushed, you also
     * need to change the calculation of max_vlist_array above.
     */</comment>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name><name pos:line="29" pos:column="9">neg<pos:position pos:line="29" pos:column="12"/></name><operator pos:line="29" pos:column="12">-&gt;<pos:position pos:line="29" pos:column="17"/></operator><name pos:line="29" pos:column="14">send_alternates<pos:position pos:line="29" pos:column="29"/></name></name> <operator pos:line="29" pos:column="30">&amp;&amp;<pos:position pos:line="29" pos:column="40"/></operator> <name><name pos:line="29" pos:column="33">neg<pos:position pos:line="29" pos:column="36"/></name><operator pos:line="29" pos:column="36">-&gt;<pos:position pos:line="29" pos:column="41"/></operator><name pos:line="29" pos:column="38">avail_vars<pos:position pos:line="29" pos:column="48"/></name><operator pos:line="29" pos:column="48">-&gt;<pos:position pos:line="29" pos:column="53"/></operator><name pos:line="29" pos:column="50">nelts<pos:position pos:line="29" pos:column="55"/></name></name></expr>)<pos:position pos:line="29" pos:column="56"/></condition><then pos:line="29" pos:column="56">
        <block type="pseudo"><expr_stmt><expr><name pos:line="30" pos:column="9">arr<pos:position pos:line="30" pos:column="12"/></name> <operator pos:line="30" pos:column="13">=<pos:position pos:line="30" pos:column="14"/></operator> <call><name pos:line="30" pos:column="15">apr_array_make<pos:position pos:line="30" pos:column="29"/></name><argument_list pos:line="30" pos:column="29">(<argument><expr><name><name pos:line="30" pos:column="30">r<pos:position pos:line="30" pos:column="31"/></name><operator pos:line="30" pos:column="31">-&gt;<pos:position pos:line="30" pos:column="36"/></operator><name pos:line="30" pos:column="33">pool<pos:position pos:line="30" pos:column="37"/></name></name></expr></argument>, <argument><expr><name pos:line="30" pos:column="39">max_vlist_array<pos:position pos:line="30" pos:column="54"/></name></expr></argument>, <argument><expr><sizeof pos:line="30" pos:column="56">sizeof<argument_list pos:line="30" pos:column="62">(<argument><expr><name pos:line="30" pos:column="63">char<pos:position pos:line="30" pos:column="67"/></name> <operator pos:line="30" pos:column="68">*<pos:position pos:line="30" pos:column="69"/></operator></expr></argument>)<pos:position pos:line="30" pos:column="70"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="30" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="72"/></expr_stmt></block></then>
    <else pos:line="31" pos:column="5">else
        <block type="pseudo"><expr_stmt><expr><name pos:line="32" pos:column="9">arr<pos:position pos:line="32" pos:column="12"/></name> <operator pos:line="32" pos:column="13">=<pos:position pos:line="32" pos:column="14"/></operator> <name pos:line="32" pos:column="15">NULL<pos:position pos:line="32" pos:column="19"/></name></expr>;<pos:position pos:line="32" pos:column="20"/></expr_stmt></block></else></if>

    <comment type="block" pos:line="34" pos:column="5">/* Put headers into err_headers_out, since send_http_header()
     * outputs both headers_out and err_headers_out.
     */</comment>
    <expr_stmt><expr><name pos:line="37" pos:column="5">hdrs<pos:position pos:line="37" pos:column="9"/></name> <operator pos:line="37" pos:column="10">=<pos:position pos:line="37" pos:column="11"/></operator> <name><name pos:line="37" pos:column="12">r<pos:position pos:line="37" pos:column="13"/></name><operator pos:line="37" pos:column="13">-&gt;<pos:position pos:line="37" pos:column="18"/></operator><name pos:line="37" pos:column="15">err_headers_out<pos:position pos:line="37" pos:column="30"/></name></name></expr>;<pos:position pos:line="37" pos:column="31"/></expr_stmt>

    <for pos:line="39" pos:column="5">for <control pos:line="39" pos:column="9">(<init><expr><name pos:line="39" pos:column="10">j<pos:position pos:line="39" pos:column="11"/></name> <operator pos:line="39" pos:column="12">=<pos:position pos:line="39" pos:column="13"/></operator> <literal type="number" pos:line="39" pos:column="14">0<pos:position pos:line="39" pos:column="15"/></literal></expr>;<pos:position pos:line="39" pos:column="16"/></init> <condition><expr><name pos:line="39" pos:column="17">j<pos:position pos:line="39" pos:column="18"/></name> <operator pos:line="39" pos:column="19">&lt;<pos:position pos:line="39" pos:column="23"/></operator> <name><name pos:line="39" pos:column="21">neg<pos:position pos:line="39" pos:column="24"/></name><operator pos:line="39" pos:column="24">-&gt;<pos:position pos:line="39" pos:column="29"/></operator><name pos:line="39" pos:column="26">avail_vars<pos:position pos:line="39" pos:column="36"/></name><operator pos:line="39" pos:column="36">-&gt;<pos:position pos:line="39" pos:column="41"/></operator><name pos:line="39" pos:column="38">nelts<pos:position pos:line="39" pos:column="43"/></name></name></expr>;<pos:position pos:line="39" pos:column="44"/></condition> <incr><expr><operator pos:line="39" pos:column="45">++<pos:position pos:line="39" pos:column="47"/></operator><name pos:line="39" pos:column="47">j<pos:position pos:line="39" pos:column="48"/></name></expr></incr>)<pos:position pos:line="39" pos:column="49"/></control> <block pos:line="39" pos:column="50">{
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">var_rec<pos:position pos:line="40" pos:column="16"/></name> <modifier pos:line="40" pos:column="17">*<pos:position pos:line="40" pos:column="18"/></modifier></type><name pos:line="40" pos:column="18">variant<pos:position pos:line="40" pos:column="25"/></name> <init pos:line="40" pos:column="26">= <expr><operator pos:line="40" pos:column="28">&amp;<pos:position pos:line="40" pos:column="33"/></operator><name><name pos:line="40" pos:column="29">avail_recs<pos:position pos:line="40" pos:column="39"/></name><index pos:line="40" pos:column="39">[<expr><name pos:line="40" pos:column="40">j<pos:position pos:line="40" pos:column="41"/></name></expr>]<pos:position pos:line="40" pos:column="42"/></index></name></expr></init></decl>;<pos:position pos:line="40" pos:column="43"/></decl_stmt>

        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name><name pos:line="42" pos:column="13">variant<pos:position pos:line="42" pos:column="20"/></name><operator pos:line="42" pos:column="20">-&gt;<pos:position pos:line="42" pos:column="25"/></operator><name pos:line="42" pos:column="22">content_languages<pos:position pos:line="42" pos:column="39"/></name></name> <operator pos:line="42" pos:column="40">&amp;&amp;<pos:position pos:line="42" pos:column="50"/></operator> <name><name pos:line="42" pos:column="43">variant<pos:position pos:line="42" pos:column="50"/></name><operator pos:line="42" pos:column="50">-&gt;<pos:position pos:line="42" pos:column="55"/></operator><name pos:line="42" pos:column="52">content_languages<pos:position pos:line="42" pos:column="69"/></name><operator pos:line="42" pos:column="69">-&gt;<pos:position pos:line="42" pos:column="74"/></operator><name pos:line="42" pos:column="71">nelts<pos:position pos:line="42" pos:column="76"/></name></name></expr>)<pos:position pos:line="42" pos:column="77"/></condition><then pos:line="42" pos:column="77"> <block pos:line="42" pos:column="78">{
            <expr_stmt><expr><name pos:line="43" pos:column="13">lang<pos:position pos:line="43" pos:column="17"/></name> <operator pos:line="43" pos:column="18">=<pos:position pos:line="43" pos:column="19"/></operator> <call><name pos:line="43" pos:column="20">apr_array_pstrcat<pos:position pos:line="43" pos:column="37"/></name><argument_list pos:line="43" pos:column="37">(<argument><expr><name><name pos:line="43" pos:column="38">r<pos:position pos:line="43" pos:column="39"/></name><operator pos:line="43" pos:column="39">-&gt;<pos:position pos:line="43" pos:column="44"/></operator><name pos:line="43" pos:column="41">pool<pos:position pos:line="43" pos:column="45"/></name></name></expr></argument>, <argument><expr><name><name pos:line="43" pos:column="47">variant<pos:position pos:line="43" pos:column="54"/></name><operator pos:line="43" pos:column="54">-&gt;<pos:position pos:line="43" pos:column="59"/></operator><name pos:line="43" pos:column="56">content_languages<pos:position pos:line="43" pos:column="73"/></name></name></expr></argument>, <argument><expr><literal type="char" pos:line="43" pos:column="75">','<pos:position pos:line="43" pos:column="78"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="80"/></expr_stmt>
        }<pos:position pos:line="44" pos:column="10"/></block></then>
        <else pos:line="45" pos:column="9">else <block pos:line="45" pos:column="14">{
            <expr_stmt><expr><name pos:line="46" pos:column="13">lang<pos:position pos:line="46" pos:column="17"/></name> <operator pos:line="46" pos:column="18">=<pos:position pos:line="46" pos:column="19"/></operator> <name pos:line="46" pos:column="20">NULL<pos:position pos:line="46" pos:column="24"/></name></expr>;<pos:position pos:line="46" pos:column="25"/></expr_stmt>
        }<pos:position pos:line="47" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="49" pos:column="9">/* Calculate Vary by looking for any difference between variants */</comment>

        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">first_variant<pos:position pos:line="51" pos:column="26"/></name></expr>)<pos:position pos:line="51" pos:column="27"/></condition><then pos:line="51" pos:column="27"> <block pos:line="51" pos:column="28">{
            <expr_stmt><expr><name pos:line="52" pos:column="13">sample_type<pos:position pos:line="52" pos:column="24"/></name>     <operator pos:line="52" pos:column="29">=<pos:position pos:line="52" pos:column="30"/></operator> <name><name pos:line="52" pos:column="31">variant<pos:position pos:line="52" pos:column="38"/></name><operator pos:line="52" pos:column="38">-&gt;<pos:position pos:line="52" pos:column="43"/></operator><name pos:line="52" pos:column="40">mime_type<pos:position pos:line="52" pos:column="49"/></name></name></expr>;<pos:position pos:line="52" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name pos:line="53" pos:column="13">sample_charset<pos:position pos:line="53" pos:column="27"/></name>  <operator pos:line="53" pos:column="29">=<pos:position pos:line="53" pos:column="30"/></operator> <name><name pos:line="53" pos:column="31">variant<pos:position pos:line="53" pos:column="38"/></name><operator pos:line="53" pos:column="38">-&gt;<pos:position pos:line="53" pos:column="43"/></operator><name pos:line="53" pos:column="40">content_charset<pos:position pos:line="53" pos:column="55"/></name></name></expr>;<pos:position pos:line="53" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><name pos:line="54" pos:column="13">sample_language<pos:position pos:line="54" pos:column="28"/></name> <operator pos:line="54" pos:column="29">=<pos:position pos:line="54" pos:column="30"/></operator> <name pos:line="54" pos:column="31">lang<pos:position pos:line="54" pos:column="35"/></name></expr>;<pos:position pos:line="54" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><name pos:line="55" pos:column="13">sample_encoding<pos:position pos:line="55" pos:column="28"/></name> <operator pos:line="55" pos:column="29">=<pos:position pos:line="55" pos:column="30"/></operator> <name><name pos:line="55" pos:column="31">variant<pos:position pos:line="55" pos:column="38"/></name><operator pos:line="55" pos:column="38">-&gt;<pos:position pos:line="55" pos:column="43"/></operator><name pos:line="55" pos:column="40">content_encoding<pos:position pos:line="55" pos:column="56"/></name></name></expr>;<pos:position pos:line="55" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="56" pos:column="10"/></block></then>
        <else pos:line="57" pos:column="9">else <block pos:line="57" pos:column="14">{
            <if pos:line="58" pos:column="13">if <condition pos:line="58" pos:column="16">(<expr><operator pos:line="58" pos:column="17">!<pos:position pos:line="58" pos:column="18"/></operator><name pos:line="58" pos:column="18">vary_by_type<pos:position pos:line="58" pos:column="30"/></name> <operator pos:line="58" pos:column="31">&amp;&amp;<pos:position pos:line="58" pos:column="41"/></operator>
                <call><name pos:line="59" pos:column="17">strcmp<pos:position pos:line="59" pos:column="23"/></name><argument_list pos:line="59" pos:column="23">(<argument><expr><ternary><condition><expr><name pos:line="59" pos:column="24">sample_type<pos:position pos:line="59" pos:column="35"/></name></expr> ?<pos:position pos:line="59" pos:column="37"/></condition><then pos:line="59" pos:column="37"> <expr><name pos:line="59" pos:column="38">sample_type<pos:position pos:line="59" pos:column="49"/></name></expr> <pos:position pos:line="59" pos:column="50"/></then><else pos:line="59" pos:column="50">: <expr><literal type="string" pos:line="59" pos:column="52">""<pos:position pos:line="59" pos:column="54"/></literal></expr></else></ternary></expr></argument>, 
                       <argument><expr><ternary><condition><expr><name><name pos:line="60" pos:column="24">variant<pos:position pos:line="60" pos:column="31"/></name><operator pos:line="60" pos:column="31">-&gt;<pos:position pos:line="60" pos:column="36"/></operator><name pos:line="60" pos:column="33">mime_type<pos:position pos:line="60" pos:column="42"/></name></name></expr> ?<pos:position pos:line="60" pos:column="44"/></condition><then pos:line="60" pos:column="44"> <expr><name><name pos:line="60" pos:column="45">variant<pos:position pos:line="60" pos:column="52"/></name><operator pos:line="60" pos:column="52">-&gt;<pos:position pos:line="60" pos:column="57"/></operator><name pos:line="60" pos:column="54">mime_type<pos:position pos:line="60" pos:column="63"/></name></name></expr> <pos:position pos:line="60" pos:column="64"/></then><else pos:line="60" pos:column="64">: <expr><literal type="string" pos:line="60" pos:column="66">""<pos:position pos:line="60" pos:column="68"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="60" pos:column="69"/></argument_list></call></expr>)<pos:position pos:line="60" pos:column="70"/></condition><then pos:line="60" pos:column="70"> <block pos:line="60" pos:column="71">{
                <expr_stmt><expr><name pos:line="61" pos:column="17">vary_by_type<pos:position pos:line="61" pos:column="29"/></name> <operator pos:line="61" pos:column="30">=<pos:position pos:line="61" pos:column="31"/></operator> <literal type="number" pos:line="61" pos:column="32">1<pos:position pos:line="61" pos:column="33"/></literal></expr>;<pos:position pos:line="61" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="62" pos:column="14"/></block></then></if>
            <if pos:line="63" pos:column="13">if <condition pos:line="63" pos:column="16">(<expr><operator pos:line="63" pos:column="17">!<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="18">vary_by_charset<pos:position pos:line="63" pos:column="33"/></name> <operator pos:line="63" pos:column="34">&amp;&amp;<pos:position pos:line="63" pos:column="44"/></operator>
                <call><name pos:line="64" pos:column="17">strcmp<pos:position pos:line="64" pos:column="23"/></name><argument_list pos:line="64" pos:column="23">(<argument><expr><ternary><condition><expr><name pos:line="64" pos:column="24">sample_charset<pos:position pos:line="64" pos:column="38"/></name></expr> ?<pos:position pos:line="64" pos:column="40"/></condition><then pos:line="64" pos:column="40"> <expr><name pos:line="64" pos:column="41">sample_charset<pos:position pos:line="64" pos:column="55"/></name></expr> <pos:position pos:line="64" pos:column="56"/></then><else pos:line="64" pos:column="56">: <expr><literal type="string" pos:line="64" pos:column="58">""<pos:position pos:line="64" pos:column="60"/></literal></expr></else></ternary></expr></argument>,
                       <argument><expr><ternary><condition><expr><name><name pos:line="65" pos:column="24">variant<pos:position pos:line="65" pos:column="31"/></name><operator pos:line="65" pos:column="31">-&gt;<pos:position pos:line="65" pos:column="36"/></operator><name pos:line="65" pos:column="33">content_charset<pos:position pos:line="65" pos:column="48"/></name></name></expr> ?<pos:position pos:line="65" pos:column="50"/></condition><then pos:line="65" pos:column="50">
                       <expr><name><name pos:line="66" pos:column="24">variant<pos:position pos:line="66" pos:column="31"/></name><operator pos:line="66" pos:column="31">-&gt;<pos:position pos:line="66" pos:column="36"/></operator><name pos:line="66" pos:column="33">content_charset<pos:position pos:line="66" pos:column="48"/></name></name></expr> <pos:position pos:line="66" pos:column="49"/></then><else pos:line="66" pos:column="49">: <expr><literal type="string" pos:line="66" pos:column="51">""<pos:position pos:line="66" pos:column="53"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="66" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="66" pos:column="55"/></condition><then pos:line="66" pos:column="55"> <block pos:line="66" pos:column="56">{
                <expr_stmt><expr><name pos:line="67" pos:column="17">vary_by_charset<pos:position pos:line="67" pos:column="32"/></name> <operator pos:line="67" pos:column="33">=<pos:position pos:line="67" pos:column="34"/></operator> <literal type="number" pos:line="67" pos:column="35">1<pos:position pos:line="67" pos:column="36"/></literal></expr>;<pos:position pos:line="67" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="68" pos:column="14"/></block></then></if>
            <if pos:line="69" pos:column="13">if <condition pos:line="69" pos:column="16">(<expr><operator pos:line="69" pos:column="17">!<pos:position pos:line="69" pos:column="18"/></operator><name pos:line="69" pos:column="18">vary_by_language<pos:position pos:line="69" pos:column="34"/></name> <operator pos:line="69" pos:column="35">&amp;&amp;<pos:position pos:line="69" pos:column="45"/></operator>
                <call><name pos:line="70" pos:column="17">strcmp<pos:position pos:line="70" pos:column="23"/></name><argument_list pos:line="70" pos:column="23">(<argument><expr><ternary><condition><expr><name pos:line="70" pos:column="24">sample_language<pos:position pos:line="70" pos:column="39"/></name></expr> ?<pos:position pos:line="70" pos:column="41"/></condition><then pos:line="70" pos:column="41"> <expr><name pos:line="70" pos:column="42">sample_language<pos:position pos:line="70" pos:column="57"/></name></expr> <pos:position pos:line="70" pos:column="58"/></then><else pos:line="70" pos:column="58">: <expr><literal type="string" pos:line="70" pos:column="60">""<pos:position pos:line="70" pos:column="62"/></literal></expr></else></ternary></expr></argument>, 
                       <argument><expr><ternary><condition><expr><name pos:line="71" pos:column="24">lang<pos:position pos:line="71" pos:column="28"/></name></expr> ?<pos:position pos:line="71" pos:column="30"/></condition><then pos:line="71" pos:column="30"> <expr><name pos:line="71" pos:column="31">lang<pos:position pos:line="71" pos:column="35"/></name></expr> <pos:position pos:line="71" pos:column="36"/></then><else pos:line="71" pos:column="36">: <expr><literal type="string" pos:line="71" pos:column="38">""<pos:position pos:line="71" pos:column="40"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="71" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="71" pos:column="42"/></condition><then pos:line="71" pos:column="42"> <block pos:line="71" pos:column="43">{
                <expr_stmt><expr><name pos:line="72" pos:column="17">vary_by_language<pos:position pos:line="72" pos:column="33"/></name> <operator pos:line="72" pos:column="34">=<pos:position pos:line="72" pos:column="35"/></operator> <literal type="number" pos:line="72" pos:column="36">1<pos:position pos:line="72" pos:column="37"/></literal></expr>;<pos:position pos:line="72" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="73" pos:column="14"/></block></then></if>
            <if pos:line="74" pos:column="13">if <condition pos:line="74" pos:column="16">(<expr><operator pos:line="74" pos:column="17">!<pos:position pos:line="74" pos:column="18"/></operator><name pos:line="74" pos:column="18">vary_by_encoding<pos:position pos:line="74" pos:column="34"/></name> <operator pos:line="74" pos:column="35">&amp;&amp;<pos:position pos:line="74" pos:column="45"/></operator>
                <call><name pos:line="75" pos:column="17">strcmp<pos:position pos:line="75" pos:column="23"/></name><argument_list pos:line="75" pos:column="23">(<argument><expr><ternary><condition><expr><name pos:line="75" pos:column="24">sample_encoding<pos:position pos:line="75" pos:column="39"/></name></expr> ?<pos:position pos:line="75" pos:column="41"/></condition><then pos:line="75" pos:column="41"> <expr><name pos:line="75" pos:column="42">sample_encoding<pos:position pos:line="75" pos:column="57"/></name></expr> <pos:position pos:line="75" pos:column="58"/></then><else pos:line="75" pos:column="58">: <expr><literal type="string" pos:line="75" pos:column="60">""<pos:position pos:line="75" pos:column="62"/></literal></expr></else></ternary></expr></argument>,
                       <argument><expr><ternary><condition><expr><name><name pos:line="76" pos:column="24">variant<pos:position pos:line="76" pos:column="31"/></name><operator pos:line="76" pos:column="31">-&gt;<pos:position pos:line="76" pos:column="36"/></operator><name pos:line="76" pos:column="33">content_encoding<pos:position pos:line="76" pos:column="49"/></name></name></expr> ?<pos:position pos:line="76" pos:column="51"/></condition><then pos:line="76" pos:column="51"> 
                       <expr><name><name pos:line="77" pos:column="24">variant<pos:position pos:line="77" pos:column="31"/></name><operator pos:line="77" pos:column="31">-&gt;<pos:position pos:line="77" pos:column="36"/></operator><name pos:line="77" pos:column="33">content_encoding<pos:position pos:line="77" pos:column="49"/></name></name></expr> <pos:position pos:line="77" pos:column="50"/></then><else pos:line="77" pos:column="50">: <expr><literal type="string" pos:line="77" pos:column="52">""<pos:position pos:line="77" pos:column="54"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="77" pos:column="55"/></argument_list></call></expr>)<pos:position pos:line="77" pos:column="56"/></condition><then pos:line="77" pos:column="56"> <block pos:line="77" pos:column="57">{
                <expr_stmt><expr><name pos:line="78" pos:column="17">vary_by_encoding<pos:position pos:line="78" pos:column="33"/></name> <operator pos:line="78" pos:column="34">=<pos:position pos:line="78" pos:column="35"/></operator> <literal type="number" pos:line="78" pos:column="36">1<pos:position pos:line="78" pos:column="37"/></literal></expr>;<pos:position pos:line="78" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="79" pos:column="14"/></block></then></if>
        }<pos:position pos:line="80" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="81" pos:column="9">first_variant<pos:position pos:line="81" pos:column="22"/></name> <operator pos:line="81" pos:column="23">=<pos:position pos:line="81" pos:column="24"/></operator> <literal type="number" pos:line="81" pos:column="25">0<pos:position pos:line="81" pos:column="26"/></literal></expr>;<pos:position pos:line="81" pos:column="27"/></expr_stmt>

        <if pos:line="83" pos:column="9">if <condition pos:line="83" pos:column="12">(<expr><operator pos:line="83" pos:column="13">!<pos:position pos:line="83" pos:column="14"/></operator><name><name pos:line="83" pos:column="14">neg<pos:position pos:line="83" pos:column="17"/></name><operator pos:line="83" pos:column="17">-&gt;<pos:position pos:line="83" pos:column="22"/></operator><name pos:line="83" pos:column="19">send_alternates<pos:position pos:line="83" pos:column="34"/></name></name></expr>)<pos:position pos:line="83" pos:column="35"/></condition><then pos:line="83" pos:column="35">
            <block type="pseudo"><continue pos:line="84" pos:column="13">continue;<pos:position pos:line="84" pos:column="22"/></continue></block></then></if>

        <comment type="block" pos:line="86" pos:column="9">/* Generate the string components for this Alternates entry */</comment>

        <expr_stmt><expr><operator pos:line="88" pos:column="9">*<pos:position pos:line="88" pos:column="10"/></operator><operator pos:line="88" pos:column="10">(<pos:position pos:line="88" pos:column="11"/></operator><operator pos:line="88" pos:column="11">(<pos:position pos:line="88" pos:column="12"/></operator><specifier pos:line="88" pos:column="12">const<pos:position pos:line="88" pos:column="17"/></specifier> <name pos:line="88" pos:column="18">char<pos:position pos:line="88" pos:column="22"/></name> <operator pos:line="88" pos:column="23">*<pos:position pos:line="88" pos:column="24"/></operator><operator pos:line="88" pos:column="24">*<pos:position pos:line="88" pos:column="25"/></operator><operator pos:line="88" pos:column="25">)<pos:position pos:line="88" pos:column="26"/></operator> <call><name pos:line="88" pos:column="27">apr_array_push<pos:position pos:line="88" pos:column="41"/></name><argument_list pos:line="88" pos:column="41">(<argument><expr><name pos:line="88" pos:column="42">arr<pos:position pos:line="88" pos:column="45"/></name></expr></argument>)<pos:position pos:line="88" pos:column="46"/></argument_list></call><operator pos:line="88" pos:column="46">)<pos:position pos:line="88" pos:column="47"/></operator> <operator pos:line="88" pos:column="48">=<pos:position pos:line="88" pos:column="49"/></operator> <literal type="string" pos:line="88" pos:column="50">"{\""<pos:position pos:line="88" pos:column="55"/></literal></expr>;<pos:position pos:line="88" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="89" pos:column="9">*<pos:position pos:line="89" pos:column="10"/></operator><operator pos:line="89" pos:column="10">(<pos:position pos:line="89" pos:column="11"/></operator><operator pos:line="89" pos:column="11">(<pos:position pos:line="89" pos:column="12"/></operator><specifier pos:line="89" pos:column="12">const<pos:position pos:line="89" pos:column="17"/></specifier> <name pos:line="89" pos:column="18">char<pos:position pos:line="89" pos:column="22"/></name> <operator pos:line="89" pos:column="23">*<pos:position pos:line="89" pos:column="24"/></operator><operator pos:line="89" pos:column="24">*<pos:position pos:line="89" pos:column="25"/></operator><operator pos:line="89" pos:column="25">)<pos:position pos:line="89" pos:column="26"/></operator> <call><name pos:line="89" pos:column="27">apr_array_push<pos:position pos:line="89" pos:column="41"/></name><argument_list pos:line="89" pos:column="41">(<argument><expr><name pos:line="89" pos:column="42">arr<pos:position pos:line="89" pos:column="45"/></name></expr></argument>)<pos:position pos:line="89" pos:column="46"/></argument_list></call><operator pos:line="89" pos:column="46">)<pos:position pos:line="89" pos:column="47"/></operator> <operator pos:line="89" pos:column="48">=<pos:position pos:line="89" pos:column="49"/></operator> <name><name pos:line="89" pos:column="50">variant<pos:position pos:line="89" pos:column="57"/></name><operator pos:line="89" pos:column="57">-&gt;<pos:position pos:line="89" pos:column="62"/></operator><name pos:line="89" pos:column="59">file_name<pos:position pos:line="89" pos:column="68"/></name></name></expr>;<pos:position pos:line="89" pos:column="69"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="90" pos:column="9">*<pos:position pos:line="90" pos:column="10"/></operator><operator pos:line="90" pos:column="10">(<pos:position pos:line="90" pos:column="11"/></operator><operator pos:line="90" pos:column="11">(<pos:position pos:line="90" pos:column="12"/></operator><specifier pos:line="90" pos:column="12">const<pos:position pos:line="90" pos:column="17"/></specifier> <name pos:line="90" pos:column="18">char<pos:position pos:line="90" pos:column="22"/></name> <operator pos:line="90" pos:column="23">*<pos:position pos:line="90" pos:column="24"/></operator><operator pos:line="90" pos:column="24">*<pos:position pos:line="90" pos:column="25"/></operator><operator pos:line="90" pos:column="25">)<pos:position pos:line="90" pos:column="26"/></operator> <call><name pos:line="90" pos:column="27">apr_array_push<pos:position pos:line="90" pos:column="41"/></name><argument_list pos:line="90" pos:column="41">(<argument><expr><name pos:line="90" pos:column="42">arr<pos:position pos:line="90" pos:column="45"/></name></expr></argument>)<pos:position pos:line="90" pos:column="46"/></argument_list></call><operator pos:line="90" pos:column="46">)<pos:position pos:line="90" pos:column="47"/></operator> <operator pos:line="90" pos:column="48">=<pos:position pos:line="90" pos:column="49"/></operator> <literal type="string" pos:line="90" pos:column="50">"\" "<pos:position pos:line="90" pos:column="55"/></literal></expr>;<pos:position pos:line="90" pos:column="56"/></expr_stmt>

        <expr_stmt><expr><name pos:line="92" pos:column="9">qstr<pos:position pos:line="92" pos:column="13"/></name> <operator pos:line="92" pos:column="14">=<pos:position pos:line="92" pos:column="15"/></operator> <operator pos:line="92" pos:column="16">(<pos:position pos:line="92" pos:column="17"/></operator><name pos:line="92" pos:column="17">char<pos:position pos:line="92" pos:column="21"/></name> <operator pos:line="92" pos:column="22">*<pos:position pos:line="92" pos:column="23"/></operator><operator pos:line="92" pos:column="23">)<pos:position pos:line="92" pos:column="24"/></operator> <call><name pos:line="92" pos:column="25">apr_palloc<pos:position pos:line="92" pos:column="35"/></name><argument_list pos:line="92" pos:column="35">(<argument><expr><name><name pos:line="92" pos:column="36">r<pos:position pos:line="92" pos:column="37"/></name><operator pos:line="92" pos:column="37">-&gt;<pos:position pos:line="92" pos:column="42"/></operator><name pos:line="92" pos:column="39">pool<pos:position pos:line="92" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="92" pos:column="45">6<pos:position pos:line="92" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="92" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="92" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">apr_snprintf<pos:position pos:line="93" pos:column="21"/></name><argument_list pos:line="93" pos:column="21">(<argument><expr><name pos:line="93" pos:column="22">qstr<pos:position pos:line="93" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="93" pos:column="28">6<pos:position pos:line="93" pos:column="29"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="31">"%1.3f"<pos:position pos:line="93" pos:column="38"/></literal></expr></argument>, <argument><expr><name><name pos:line="93" pos:column="40">variant<pos:position pos:line="93" pos:column="47"/></name><operator pos:line="93" pos:column="47">-&gt;<pos:position pos:line="93" pos:column="52"/></operator><name pos:line="93" pos:column="49">source_quality<pos:position pos:line="93" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="93" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="65"/></expr_stmt>

        <comment type="block" pos:line="95" pos:column="9">/* Strip trailing zeros (saves those valuable network bytes) */</comment>
        <if pos:line="96" pos:column="9">if <condition pos:line="96" pos:column="12">(<expr><name><name pos:line="96" pos:column="13">qstr<pos:position pos:line="96" pos:column="17"/></name><index pos:line="96" pos:column="17">[<expr><literal type="number" pos:line="96" pos:column="18">4<pos:position pos:line="96" pos:column="19"/></literal></expr>]<pos:position pos:line="96" pos:column="20"/></index></name> <operator pos:line="96" pos:column="21">==<pos:position pos:line="96" pos:column="23"/></operator> <literal type="char" pos:line="96" pos:column="24">'0'<pos:position pos:line="96" pos:column="27"/></literal></expr>)<pos:position pos:line="96" pos:column="28"/></condition><then pos:line="96" pos:column="28"> <block pos:line="96" pos:column="29">{
            <expr_stmt><expr><name><name pos:line="97" pos:column="13">qstr<pos:position pos:line="97" pos:column="17"/></name><index pos:line="97" pos:column="17">[<expr><literal type="number" pos:line="97" pos:column="18">4<pos:position pos:line="97" pos:column="19"/></literal></expr>]<pos:position pos:line="97" pos:column="20"/></index></name> <operator pos:line="97" pos:column="21">=<pos:position pos:line="97" pos:column="22"/></operator> <literal type="char" pos:line="97" pos:column="23">'\0'<pos:position pos:line="97" pos:column="27"/></literal></expr>;<pos:position pos:line="97" pos:column="28"/></expr_stmt>
            <if pos:line="98" pos:column="13">if <condition pos:line="98" pos:column="16">(<expr><name><name pos:line="98" pos:column="17">qstr<pos:position pos:line="98" pos:column="21"/></name><index pos:line="98" pos:column="21">[<expr><literal type="number" pos:line="98" pos:column="22">3<pos:position pos:line="98" pos:column="23"/></literal></expr>]<pos:position pos:line="98" pos:column="24"/></index></name> <operator pos:line="98" pos:column="25">==<pos:position pos:line="98" pos:column="27"/></operator> <literal type="char" pos:line="98" pos:column="28">'0'<pos:position pos:line="98" pos:column="31"/></literal></expr>)<pos:position pos:line="98" pos:column="32"/></condition><then pos:line="98" pos:column="32"> <block pos:line="98" pos:column="33">{
                <expr_stmt><expr><name><name pos:line="99" pos:column="17">qstr<pos:position pos:line="99" pos:column="21"/></name><index pos:line="99" pos:column="21">[<expr><literal type="number" pos:line="99" pos:column="22">3<pos:position pos:line="99" pos:column="23"/></literal></expr>]<pos:position pos:line="99" pos:column="24"/></index></name> <operator pos:line="99" pos:column="25">=<pos:position pos:line="99" pos:column="26"/></operator> <literal type="char" pos:line="99" pos:column="27">'\0'<pos:position pos:line="99" pos:column="31"/></literal></expr>;<pos:position pos:line="99" pos:column="32"/></expr_stmt>
                <if pos:line="100" pos:column="17">if <condition pos:line="100" pos:column="20">(<expr><name><name pos:line="100" pos:column="21">qstr<pos:position pos:line="100" pos:column="25"/></name><index pos:line="100" pos:column="25">[<expr><literal type="number" pos:line="100" pos:column="26">2<pos:position pos:line="100" pos:column="27"/></literal></expr>]<pos:position pos:line="100" pos:column="28"/></index></name> <operator pos:line="100" pos:column="29">==<pos:position pos:line="100" pos:column="31"/></operator> <literal type="char" pos:line="100" pos:column="32">'0'<pos:position pos:line="100" pos:column="35"/></literal></expr>)<pos:position pos:line="100" pos:column="36"/></condition><then pos:line="100" pos:column="36"> <block pos:line="100" pos:column="37">{
                    <expr_stmt><expr><name><name pos:line="101" pos:column="21">qstr<pos:position pos:line="101" pos:column="25"/></name><index pos:line="101" pos:column="25">[<expr><literal type="number" pos:line="101" pos:column="26">1<pos:position pos:line="101" pos:column="27"/></literal></expr>]<pos:position pos:line="101" pos:column="28"/></index></name> <operator pos:line="101" pos:column="29">=<pos:position pos:line="101" pos:column="30"/></operator> <literal type="char" pos:line="101" pos:column="31">'\0'<pos:position pos:line="101" pos:column="35"/></literal></expr>;<pos:position pos:line="101" pos:column="36"/></expr_stmt>
                }<pos:position pos:line="102" pos:column="18"/></block></then></if>
            }<pos:position pos:line="103" pos:column="14"/></block></then></if>
        }<pos:position pos:line="104" pos:column="10"/></block></then></if>
        <expr_stmt><expr><operator pos:line="105" pos:column="9">*<pos:position pos:line="105" pos:column="10"/></operator><operator pos:line="105" pos:column="10">(<pos:position pos:line="105" pos:column="11"/></operator><operator pos:line="105" pos:column="11">(<pos:position pos:line="105" pos:column="12"/></operator><specifier pos:line="105" pos:column="12">const<pos:position pos:line="105" pos:column="17"/></specifier> <name pos:line="105" pos:column="18">char<pos:position pos:line="105" pos:column="22"/></name> <operator pos:line="105" pos:column="23">*<pos:position pos:line="105" pos:column="24"/></operator><operator pos:line="105" pos:column="24">*<pos:position pos:line="105" pos:column="25"/></operator><operator pos:line="105" pos:column="25">)<pos:position pos:line="105" pos:column="26"/></operator> <call><name pos:line="105" pos:column="27">apr_array_push<pos:position pos:line="105" pos:column="41"/></name><argument_list pos:line="105" pos:column="41">(<argument><expr><name pos:line="105" pos:column="42">arr<pos:position pos:line="105" pos:column="45"/></name></expr></argument>)<pos:position pos:line="105" pos:column="46"/></argument_list></call><operator pos:line="105" pos:column="46">)<pos:position pos:line="105" pos:column="47"/></operator> <operator pos:line="105" pos:column="48">=<pos:position pos:line="105" pos:column="49"/></operator> <name pos:line="105" pos:column="50">qstr<pos:position pos:line="105" pos:column="54"/></name></expr>;<pos:position pos:line="105" pos:column="55"/></expr_stmt>

        <if pos:line="107" pos:column="9">if <condition pos:line="107" pos:column="12">(<expr><name><name pos:line="107" pos:column="13">variant<pos:position pos:line="107" pos:column="20"/></name><operator pos:line="107" pos:column="20">-&gt;<pos:position pos:line="107" pos:column="25"/></operator><name pos:line="107" pos:column="22">mime_type<pos:position pos:line="107" pos:column="31"/></name></name> <operator pos:line="107" pos:column="32">&amp;&amp;<pos:position pos:line="107" pos:column="42"/></operator> <operator pos:line="107" pos:column="35">*<pos:position pos:line="107" pos:column="36"/></operator><name><name pos:line="107" pos:column="36">variant<pos:position pos:line="107" pos:column="43"/></name><operator pos:line="107" pos:column="43">-&gt;<pos:position pos:line="107" pos:column="48"/></operator><name pos:line="107" pos:column="45">mime_type<pos:position pos:line="107" pos:column="54"/></name></name></expr>)<pos:position pos:line="107" pos:column="55"/></condition><then pos:line="107" pos:column="55"> <block pos:line="107" pos:column="56">{
            <expr_stmt><expr><operator pos:line="108" pos:column="13">*<pos:position pos:line="108" pos:column="14"/></operator><operator pos:line="108" pos:column="14">(<pos:position pos:line="108" pos:column="15"/></operator><operator pos:line="108" pos:column="15">(<pos:position pos:line="108" pos:column="16"/></operator><specifier pos:line="108" pos:column="16">const<pos:position pos:line="108" pos:column="21"/></specifier> <name pos:line="108" pos:column="22">char<pos:position pos:line="108" pos:column="26"/></name> <operator pos:line="108" pos:column="27">*<pos:position pos:line="108" pos:column="28"/></operator><operator pos:line="108" pos:column="28">*<pos:position pos:line="108" pos:column="29"/></operator><operator pos:line="108" pos:column="29">)<pos:position pos:line="108" pos:column="30"/></operator> <call><name pos:line="108" pos:column="31">apr_array_push<pos:position pos:line="108" pos:column="45"/></name><argument_list pos:line="108" pos:column="45">(<argument><expr><name pos:line="108" pos:column="46">arr<pos:position pos:line="108" pos:column="49"/></name></expr></argument>)<pos:position pos:line="108" pos:column="50"/></argument_list></call><operator pos:line="108" pos:column="50">)<pos:position pos:line="108" pos:column="51"/></operator> <operator pos:line="108" pos:column="52">=<pos:position pos:line="108" pos:column="53"/></operator> <literal type="string" pos:line="108" pos:column="54">" {type "<pos:position pos:line="108" pos:column="63"/></literal></expr>;<pos:position pos:line="108" pos:column="64"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="109" pos:column="13">*<pos:position pos:line="109" pos:column="14"/></operator><operator pos:line="109" pos:column="14">(<pos:position pos:line="109" pos:column="15"/></operator><operator pos:line="109" pos:column="15">(<pos:position pos:line="109" pos:column="16"/></operator><specifier pos:line="109" pos:column="16">const<pos:position pos:line="109" pos:column="21"/></specifier> <name pos:line="109" pos:column="22">char<pos:position pos:line="109" pos:column="26"/></name> <operator pos:line="109" pos:column="27">*<pos:position pos:line="109" pos:column="28"/></operator><operator pos:line="109" pos:column="28">*<pos:position pos:line="109" pos:column="29"/></operator><operator pos:line="109" pos:column="29">)<pos:position pos:line="109" pos:column="30"/></operator> <call><name pos:line="109" pos:column="31">apr_array_push<pos:position pos:line="109" pos:column="45"/></name><argument_list pos:line="109" pos:column="45">(<argument><expr><name pos:line="109" pos:column="46">arr<pos:position pos:line="109" pos:column="49"/></name></expr></argument>)<pos:position pos:line="109" pos:column="50"/></argument_list></call><operator pos:line="109" pos:column="50">)<pos:position pos:line="109" pos:column="51"/></operator> <operator pos:line="109" pos:column="52">=<pos:position pos:line="109" pos:column="53"/></operator> <name><name pos:line="109" pos:column="54">variant<pos:position pos:line="109" pos:column="61"/></name><operator pos:line="109" pos:column="61">-&gt;<pos:position pos:line="109" pos:column="66"/></operator><name pos:line="109" pos:column="63">mime_type<pos:position pos:line="109" pos:column="72"/></name></name></expr>;<pos:position pos:line="109" pos:column="73"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="110" pos:column="13">*<pos:position pos:line="110" pos:column="14"/></operator><operator pos:line="110" pos:column="14">(<pos:position pos:line="110" pos:column="15"/></operator><operator pos:line="110" pos:column="15">(<pos:position pos:line="110" pos:column="16"/></operator><specifier pos:line="110" pos:column="16">const<pos:position pos:line="110" pos:column="21"/></specifier> <name pos:line="110" pos:column="22">char<pos:position pos:line="110" pos:column="26"/></name> <operator pos:line="110" pos:column="27">*<pos:position pos:line="110" pos:column="28"/></operator><operator pos:line="110" pos:column="28">*<pos:position pos:line="110" pos:column="29"/></operator><operator pos:line="110" pos:column="29">)<pos:position pos:line="110" pos:column="30"/></operator> <call><name pos:line="110" pos:column="31">apr_array_push<pos:position pos:line="110" pos:column="45"/></name><argument_list pos:line="110" pos:column="45">(<argument><expr><name pos:line="110" pos:column="46">arr<pos:position pos:line="110" pos:column="49"/></name></expr></argument>)<pos:position pos:line="110" pos:column="50"/></argument_list></call><operator pos:line="110" pos:column="50">)<pos:position pos:line="110" pos:column="51"/></operator> <operator pos:line="110" pos:column="52">=<pos:position pos:line="110" pos:column="53"/></operator> <literal type="string" pos:line="110" pos:column="54">"}"<pos:position pos:line="110" pos:column="57"/></literal></expr>;<pos:position pos:line="110" pos:column="58"/></expr_stmt>
        }<pos:position pos:line="111" pos:column="10"/></block></then></if>
        <if pos:line="112" pos:column="9">if <condition pos:line="112" pos:column="12">(<expr><name><name pos:line="112" pos:column="13">variant<pos:position pos:line="112" pos:column="20"/></name><operator pos:line="112" pos:column="20">-&gt;<pos:position pos:line="112" pos:column="25"/></operator><name pos:line="112" pos:column="22">content_charset<pos:position pos:line="112" pos:column="37"/></name></name> <operator pos:line="112" pos:column="38">&amp;&amp;<pos:position pos:line="112" pos:column="48"/></operator> <operator pos:line="112" pos:column="41">*<pos:position pos:line="112" pos:column="42"/></operator><name><name pos:line="112" pos:column="42">variant<pos:position pos:line="112" pos:column="49"/></name><operator pos:line="112" pos:column="49">-&gt;<pos:position pos:line="112" pos:column="54"/></operator><name pos:line="112" pos:column="51">content_charset<pos:position pos:line="112" pos:column="66"/></name></name></expr>)<pos:position pos:line="112" pos:column="67"/></condition><then pos:line="112" pos:column="67"> <block pos:line="112" pos:column="68">{
            <expr_stmt><expr><operator pos:line="113" pos:column="13">*<pos:position pos:line="113" pos:column="14"/></operator><operator pos:line="113" pos:column="14">(<pos:position pos:line="113" pos:column="15"/></operator><operator pos:line="113" pos:column="15">(<pos:position pos:line="113" pos:column="16"/></operator><specifier pos:line="113" pos:column="16">const<pos:position pos:line="113" pos:column="21"/></specifier></expr></expr_stmt></block></then></if></block></for></block></function></unit>
