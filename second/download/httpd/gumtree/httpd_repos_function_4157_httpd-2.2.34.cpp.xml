<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4157_httpd-2.2.34.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type>
<name pos:line="2" pos:column="1">main<pos:position pos:line="2" pos:column="5"/></name><parameter_list pos:line="2" pos:column="5">(<parameter><decl><type><name pos:line="2" pos:column="6">int<pos:position pos:line="2" pos:column="9"/></name></type> <name pos:line="2" pos:column="10">argc<pos:position pos:line="2" pos:column="14"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="16">char<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier><modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">argv<pos:position pos:line="2" pos:column="27"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="28"/></parameter_list>
<block pos:line="3" pos:column="1">{
<decl_stmt><decl><type><name pos:line="4" pos:column="1">int<pos:position pos:line="4" pos:column="4"/></name></type> <name pos:line="4" pos:column="5">i<pos:position pos:line="4" pos:column="6"/></name></decl>;<pos:position pos:line="4" pos:column="7"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="5" pos:column="1">int<pos:position pos:line="5" pos:column="4"/></name></type> <name pos:line="5" pos:column="5">rc<pos:position pos:line="5" pos:column="7"/></name> <init pos:line="5" pos:column="8">= <expr><literal type="number" pos:line="5" pos:column="10">1<pos:position pos:line="5" pos:column="11"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="12"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="6" pos:column="1">int<pos:position pos:line="6" pos:column="4"/></name></type> <name pos:line="6" pos:column="5">options<pos:position pos:line="6" pos:column="12"/></name> <init pos:line="6" pos:column="13">= <expr><literal type="number" pos:line="6" pos:column="15">0<pos:position pos:line="6" pos:column="16"/></literal></expr></init></decl>;<pos:position pos:line="6" pos:column="17"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">int<pos:position pos:line="7" pos:column="4"/></name></type> <name pos:line="7" pos:column="5">errptr<pos:position pos:line="7" pos:column="11"/></name></decl>;<pos:position pos:line="7" pos:column="12"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="8" pos:column="1">const<pos:position pos:line="8" pos:column="6"/></specifier> <name pos:line="8" pos:column="7">char<pos:position pos:line="8" pos:column="11"/></name> <modifier pos:line="8" pos:column="12">*<pos:position pos:line="8" pos:column="13"/></modifier></type><name pos:line="8" pos:column="13">error<pos:position pos:line="8" pos:column="18"/></name></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="9" pos:column="1">BOOL<pos:position pos:line="9" pos:column="5"/></name></type> <name pos:line="9" pos:column="6">filenames<pos:position pos:line="9" pos:column="15"/></name> <init pos:line="9" pos:column="16">= <expr><name pos:line="9" pos:column="18">TRUE<pos:position pos:line="9" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>

<comment type="block" pos:line="11" pos:column="1">/* Process the options */</comment>

<for pos:line="13" pos:column="1">for <control pos:line="13" pos:column="5">(<init><expr><name pos:line="13" pos:column="6">i<pos:position pos:line="13" pos:column="7"/></name> <operator pos:line="13" pos:column="8">=<pos:position pos:line="13" pos:column="9"/></operator> <literal type="number" pos:line="13" pos:column="10">1<pos:position pos:line="13" pos:column="11"/></literal></expr>;<pos:position pos:line="13" pos:column="12"/></init> <condition><expr><name pos:line="13" pos:column="13">i<pos:position pos:line="13" pos:column="14"/></name> <operator pos:line="13" pos:column="15">&lt;<pos:position pos:line="13" pos:column="19"/></operator> <name pos:line="13" pos:column="17">argc<pos:position pos:line="13" pos:column="21"/></name></expr>;<pos:position pos:line="13" pos:column="22"/></condition> <incr><expr><name pos:line="13" pos:column="23">i<pos:position pos:line="13" pos:column="24"/></name><operator pos:line="13" pos:column="24">++<pos:position pos:line="13" pos:column="26"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="27"/></control>
  <block pos:line="14" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="15" pos:column="3">char<pos:position pos:line="15" pos:column="7"/></name> <modifier pos:line="15" pos:column="8">*<pos:position pos:line="15" pos:column="9"/></modifier></type><name pos:line="15" pos:column="9">s<pos:position pos:line="15" pos:column="10"/></name></decl>;<pos:position pos:line="15" pos:column="11"/></decl_stmt>
  <if pos:line="16" pos:column="3">if <condition pos:line="16" pos:column="6">(<expr><name><name pos:line="16" pos:column="7">argv<pos:position pos:line="16" pos:column="11"/></name><index pos:line="16" pos:column="11">[<expr><name pos:line="16" pos:column="12">i<pos:position pos:line="16" pos:column="13"/></name></expr>]<pos:position pos:line="16" pos:column="14"/></index><index pos:line="16" pos:column="14">[<expr><literal type="number" pos:line="16" pos:column="15">0<pos:position pos:line="16" pos:column="16"/></literal></expr>]<pos:position pos:line="16" pos:column="17"/></index></name> <operator pos:line="16" pos:column="18">!=<pos:position pos:line="16" pos:column="20"/></operator> <literal type="char" pos:line="16" pos:column="21">'-'<pos:position pos:line="16" pos:column="24"/></literal></expr>)<pos:position pos:line="16" pos:column="25"/></condition><then pos:line="16" pos:column="25"> <block type="pseudo"><break pos:line="16" pos:column="26">break;<pos:position pos:line="16" pos:column="32"/></break></block></then></if>
  <expr_stmt><expr><name pos:line="17" pos:column="3">s<pos:position pos:line="17" pos:column="4"/></name> <operator pos:line="17" pos:column="5">=<pos:position pos:line="17" pos:column="6"/></operator> <name><name pos:line="17" pos:column="7">argv<pos:position pos:line="17" pos:column="11"/></name><index pos:line="17" pos:column="11">[<expr><name pos:line="17" pos:column="12">i<pos:position pos:line="17" pos:column="13"/></name></expr>]<pos:position pos:line="17" pos:column="14"/></index></name> <operator pos:line="17" pos:column="15">+<pos:position pos:line="17" pos:column="16"/></operator> <literal type="number" pos:line="17" pos:column="17">1<pos:position pos:line="17" pos:column="18"/></literal></expr>;<pos:position pos:line="17" pos:column="19"/></expr_stmt>
  <while pos:line="18" pos:column="3">while <condition pos:line="18" pos:column="9">(<expr><operator pos:line="18" pos:column="10">*<pos:position pos:line="18" pos:column="11"/></operator><name pos:line="18" pos:column="11">s<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">!=<pos:position pos:line="18" pos:column="15"/></operator> <literal type="number" pos:line="18" pos:column="16">0<pos:position pos:line="18" pos:column="17"/></literal></expr>)<pos:position pos:line="18" pos:column="18"/></condition>
    <block pos:line="19" pos:column="5">{
    <switch pos:line="20" pos:column="5">switch <condition pos:line="20" pos:column="12">(<expr><operator pos:line="20" pos:column="13">*<pos:position pos:line="20" pos:column="14"/></operator><name pos:line="20" pos:column="14">s<pos:position pos:line="20" pos:column="15"/></name><operator pos:line="20" pos:column="15">++<pos:position pos:line="20" pos:column="17"/></operator></expr>)<pos:position pos:line="20" pos:column="18"/></condition>
      <block pos:line="21" pos:column="7">{
      <case pos:line="22" pos:column="7">case <expr><literal type="char" pos:line="22" pos:column="12">'c'<pos:position pos:line="22" pos:column="15"/></literal></expr>:<pos:position pos:line="22" pos:column="16"/></case> <expr_stmt><expr><name pos:line="22" pos:column="17">count_only<pos:position pos:line="22" pos:column="27"/></name> <operator pos:line="22" pos:column="28">=<pos:position pos:line="22" pos:column="29"/></operator> <name pos:line="22" pos:column="30">TRUE<pos:position pos:line="22" pos:column="34"/></name></expr>;<pos:position pos:line="22" pos:column="35"/></expr_stmt> <break pos:line="22" pos:column="36">break;<pos:position pos:line="22" pos:column="42"/></break>
      <case pos:line="23" pos:column="7">case <expr><literal type="char" pos:line="23" pos:column="12">'h'<pos:position pos:line="23" pos:column="15"/></literal></expr>:<pos:position pos:line="23" pos:column="16"/></case> <expr_stmt><expr><name pos:line="23" pos:column="17">filenames<pos:position pos:line="23" pos:column="26"/></name> <operator pos:line="23" pos:column="27">=<pos:position pos:line="23" pos:column="28"/></operator> <name pos:line="23" pos:column="29">FALSE<pos:position pos:line="23" pos:column="34"/></name></expr>;<pos:position pos:line="23" pos:column="35"/></expr_stmt> <break pos:line="23" pos:column="36">break;<pos:position pos:line="23" pos:column="42"/></break>
      <case pos:line="24" pos:column="7">case <expr><literal type="char" pos:line="24" pos:column="12">'i'<pos:position pos:line="24" pos:column="15"/></literal></expr>:<pos:position pos:line="24" pos:column="16"/></case> <expr_stmt><expr><name pos:line="24" pos:column="17">options<pos:position pos:line="24" pos:column="24"/></name> <operator pos:line="24" pos:column="25">|=<pos:position pos:line="24" pos:column="27"/></operator> <name pos:line="24" pos:column="28">PCRE_CASELESS<pos:position pos:line="24" pos:column="41"/></name></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt> <break pos:line="24" pos:column="43">break;<pos:position pos:line="24" pos:column="49"/></break>
      <case pos:line="25" pos:column="7">case <expr><literal type="char" pos:line="25" pos:column="12">'l'<pos:position pos:line="25" pos:column="15"/></literal></expr>:<pos:position pos:line="25" pos:column="16"/></case> <expr_stmt><expr><name pos:line="25" pos:column="17">filenames_only<pos:position pos:line="25" pos:column="31"/></name> <operator pos:line="25" pos:column="32">=<pos:position pos:line="25" pos:column="33"/></operator> <name pos:line="25" pos:column="34">TRUE<pos:position pos:line="25" pos:column="38"/></name></expr>;<pos:position pos:line="25" pos:column="39"/></expr_stmt>
      <case pos:line="26" pos:column="7">case <expr><literal type="char" pos:line="26" pos:column="12">'n'<pos:position pos:line="26" pos:column="15"/></literal></expr>:<pos:position pos:line="26" pos:column="16"/></case> <expr_stmt><expr><name pos:line="26" pos:column="17">number<pos:position pos:line="26" pos:column="23"/></name> <operator pos:line="26" pos:column="24">=<pos:position pos:line="26" pos:column="25"/></operator> <name pos:line="26" pos:column="26">TRUE<pos:position pos:line="26" pos:column="30"/></name></expr>;<pos:position pos:line="26" pos:column="31"/></expr_stmt> <break pos:line="26" pos:column="32">break;<pos:position pos:line="26" pos:column="38"/></break>
      <case pos:line="27" pos:column="7">case <expr><literal type="char" pos:line="27" pos:column="12">'s'<pos:position pos:line="27" pos:column="15"/></literal></expr>:<pos:position pos:line="27" pos:column="16"/></case> <expr_stmt><expr><name pos:line="27" pos:column="17">silent<pos:position pos:line="27" pos:column="23"/></name> <operator pos:line="27" pos:column="24">=<pos:position pos:line="27" pos:column="25"/></operator> <name pos:line="27" pos:column="26">TRUE<pos:position pos:line="27" pos:column="30"/></name></expr>;<pos:position pos:line="27" pos:column="31"/></expr_stmt> <break pos:line="27" pos:column="32">break;<pos:position pos:line="27" pos:column="38"/></break>
      <case pos:line="28" pos:column="7">case <expr><literal type="char" pos:line="28" pos:column="12">'v'<pos:position pos:line="28" pos:column="15"/></literal></expr>:<pos:position pos:line="28" pos:column="16"/></case> <expr_stmt><expr><name pos:line="28" pos:column="17">invert<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">=<pos:position pos:line="28" pos:column="25"/></operator> <name pos:line="28" pos:column="26">TRUE<pos:position pos:line="28" pos:column="30"/></name></expr>;<pos:position pos:line="28" pos:column="31"/></expr_stmt> <break pos:line="28" pos:column="32">break;<pos:position pos:line="28" pos:column="38"/></break>
      <case pos:line="29" pos:column="7">case <expr><literal type="char" pos:line="29" pos:column="12">'x'<pos:position pos:line="29" pos:column="15"/></literal></expr>:<pos:position pos:line="29" pos:column="16"/></case> <expr_stmt><expr><name pos:line="29" pos:column="17">whole_lines<pos:position pos:line="29" pos:column="28"/></name> <operator pos:line="29" pos:column="29">=<pos:position pos:line="29" pos:column="30"/></operator> <name pos:line="29" pos:column="31">TRUE<pos:position pos:line="29" pos:column="35"/></name></expr>;<pos:position pos:line="29" pos:column="36"/></expr_stmt> <expr_stmt><expr><name pos:line="29" pos:column="37">options<pos:position pos:line="29" pos:column="44"/></name> <operator pos:line="29" pos:column="45">|=<pos:position pos:line="29" pos:column="47"/></operator> <name pos:line="29" pos:column="48">PCRE_ANCHORED<pos:position pos:line="29" pos:column="61"/></name></expr>;<pos:position pos:line="29" pos:column="62"/></expr_stmt> <break pos:line="29" pos:column="63">break;<pos:position pos:line="29" pos:column="69"/></break>

      <case pos:line="31" pos:column="7">case <expr><literal type="char" pos:line="31" pos:column="12">'V'<pos:position pos:line="31" pos:column="15"/></literal></expr>:<pos:position pos:line="31" pos:column="16"/></case>
      <expr_stmt><expr><call><name pos:line="32" pos:column="7">fprintf<pos:position pos:line="32" pos:column="14"/></name><argument_list pos:line="32" pos:column="14">(<argument><expr><name pos:line="32" pos:column="15">stderr<pos:position pos:line="32" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="23">"PCRE version %s\n"<pos:position pos:line="32" pos:column="42"/></literal></expr></argument>, <argument><expr><call><name pos:line="32" pos:column="44">pcre_version<pos:position pos:line="32" pos:column="56"/></name><argument_list pos:line="32" pos:column="56">()<pos:position pos:line="32" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="32" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="60"/></expr_stmt>
      <break pos:line="33" pos:column="7">break;<pos:position pos:line="33" pos:column="13"/></break>

      <default pos:line="35" pos:column="7">default:<pos:position pos:line="35" pos:column="15"/></default>
      <expr_stmt><expr><call><name pos:line="36" pos:column="7">fprintf<pos:position pos:line="36" pos:column="14"/></name><argument_list pos:line="36" pos:column="14">(<argument><expr><name pos:line="36" pos:column="15">stderr<pos:position pos:line="36" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="36" pos:column="23">"pgrep: unknown option %c\n"<pos:position pos:line="36" pos:column="51"/></literal></expr></argument>, <argument><expr><name><name pos:line="36" pos:column="53">s<pos:position pos:line="36" pos:column="54"/></name><index pos:line="36" pos:column="54">[<expr><operator pos:line="36" pos:column="55">-<pos:position pos:line="36" pos:column="56"/></operator><literal type="number" pos:line="36" pos:column="56">1<pos:position pos:line="36" pos:column="57"/></literal></expr>]<pos:position pos:line="36" pos:column="58"/></index></name></expr></argument>)<pos:position pos:line="36" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="60"/></expr_stmt>
      <return pos:line="37" pos:column="7">return <expr><call><name pos:line="37" pos:column="14">usage<pos:position pos:line="37" pos:column="19"/></name><argument_list pos:line="37" pos:column="19">(<argument><expr><literal type="number" pos:line="37" pos:column="20">2<pos:position pos:line="37" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="23"/></return>
      }<pos:position pos:line="38" pos:column="8"/></block></switch>
    }<pos:position pos:line="39" pos:column="6"/></block></while>
  }<pos:position pos:line="40" pos:column="4"/></block></for>

<comment type="block" pos:line="42" pos:column="1">/* There must be at least a regexp argument */</comment>

<if pos:line="44" pos:column="1">if <condition pos:line="44" pos:column="4">(<expr><name pos:line="44" pos:column="5">i<pos:position pos:line="44" pos:column="6"/></name> <operator pos:line="44" pos:column="7">&gt;=<pos:position pos:line="44" pos:column="12"/></operator> <name pos:line="44" pos:column="10">argc<pos:position pos:line="44" pos:column="14"/></name></expr>)<pos:position pos:line="44" pos:column="15"/></condition><then pos:line="44" pos:column="15"> <block type="pseudo"><return pos:line="44" pos:column="16">return <expr><call><name pos:line="44" pos:column="23">usage<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><literal type="number" pos:line="44" pos:column="29">0<pos:position pos:line="44" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="44" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="32"/></return></block></then></if>

<comment type="block" pos:line="46" pos:column="1">/* Compile the regular expression. */</comment>

<expr_stmt><expr><name pos:line="48" pos:column="1">pattern<pos:position pos:line="48" pos:column="8"/></name> <operator pos:line="48" pos:column="9">=<pos:position pos:line="48" pos:column="10"/></operator> <call><name pos:line="48" pos:column="11">pcre_compile<pos:position pos:line="48" pos:column="23"/></name><argument_list pos:line="48" pos:column="23">(<argument><expr><name><name pos:line="48" pos:column="24">argv<pos:position pos:line="48" pos:column="28"/></name><index pos:line="48" pos:column="28">[<expr><name pos:line="48" pos:column="29">i<pos:position pos:line="48" pos:column="30"/></name><operator pos:line="48" pos:column="30">++<pos:position pos:line="48" pos:column="32"/></operator></expr>]<pos:position pos:line="48" pos:column="33"/></index></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="35">options<pos:position pos:line="48" pos:column="42"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="44">&amp;<pos:position pos:line="48" pos:column="49"/></operator><name pos:line="48" pos:column="45">error<pos:position pos:line="48" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="48" pos:column="52">&amp;<pos:position pos:line="48" pos:column="57"/></operator><name pos:line="48" pos:column="53">errptr<pos:position pos:line="48" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="61">NULL<pos:position pos:line="48" pos:column="65"/></name></expr></argument>)<pos:position pos:line="48" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="67"/></expr_stmt>
<if pos:line="49" pos:column="1">if <condition pos:line="49" pos:column="4">(<expr><name pos:line="49" pos:column="5">pattern<pos:position pos:line="49" pos:column="12"/></name> <operator pos:line="49" pos:column="13">==<pos:position pos:line="49" pos:column="15"/></operator> <name pos:line="49" pos:column="16">NULL<pos:position pos:line="49" pos:column="20"/></name></expr>)<pos:position pos:line="49" pos:column="21"/></condition><then pos:line="49" pos:column="21">
  <block pos:line="50" pos:column="3">{
  <expr_stmt><expr><call><name pos:line="51" pos:column="3">fprintf<pos:position pos:line="51" pos:column="10"/></name><argument_list pos:line="51" pos:column="10">(<argument><expr><name pos:line="51" pos:column="11">stderr<pos:position pos:line="51" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="51" pos:column="19">"pgrep: error in regex at offset %d: %s\n"<pos:position pos:line="51" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="63">errptr<pos:position pos:line="51" pos:column="69"/></name></expr></argument>, <argument><expr><name pos:line="51" pos:column="71">error<pos:position pos:line="51" pos:column="76"/></name></expr></argument>)<pos:position pos:line="51" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="51" pos:column="78"/></expr_stmt>
  <return pos:line="52" pos:column="3">return <expr><literal type="number" pos:line="52" pos:column="10">2<pos:position pos:line="52" pos:column="11"/></literal></expr>;<pos:position pos:line="52" pos:column="12"/></return>
  }<pos:position pos:line="53" pos:column="4"/></block></then></if>

<comment type="block" pos:line="55" pos:column="1">/* Study the regular expression, as we will be running it may times */</comment>

<expr_stmt><expr><name pos:line="57" pos:column="1">hints<pos:position pos:line="57" pos:column="6"/></name> <operator pos:line="57" pos:column="7">=<pos:position pos:line="57" pos:column="8"/></operator> <call><name pos:line="57" pos:column="9">pcre_study<pos:position pos:line="57" pos:column="19"/></name><argument_list pos:line="57" pos:column="19">(<argument><expr><name pos:line="57" pos:column="20">pattern<pos:position pos:line="57" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="29">0<pos:position pos:line="57" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="57" pos:column="32">&amp;<pos:position pos:line="57" pos:column="37"/></operator><name pos:line="57" pos:column="33">error<pos:position pos:line="57" pos:column="38"/></name></expr></argument>)<pos:position pos:line="57" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="40"/></expr_stmt>
<if pos:line="58" pos:column="1">if <condition pos:line="58" pos:column="4">(<expr><name pos:line="58" pos:column="5">error<pos:position pos:line="58" pos:column="10"/></name> <operator pos:line="58" pos:column="11">!=<pos:position pos:line="58" pos:column="13"/></operator> <name pos:line="58" pos:column="14">NULL<pos:position pos:line="58" pos:column="18"/></name></expr>)<pos:position pos:line="58" pos:column="19"/></condition><then pos:line="58" pos:column="19">
  <block pos:line="59" pos:column="3">{
  <expr_stmt><expr><call><name pos:line="60" pos:column="3">fprintf<pos:position pos:line="60" pos:column="10"/></name><argument_list pos:line="60" pos:column="10">(<argument><expr><name pos:line="60" pos:column="11">stderr<pos:position pos:line="60" pos:column="17"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="60" pos:column="19">"pgrep: error while studing regex: %s\n"<pos:position pos:line="60" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="60" pos:column="61">error<pos:position pos:line="60" pos:column="66"/></name></expr></argument>)<pos:position pos:line="60" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="68"/></expr_stmt>
  <return pos:line="61" pos:column="3">return <expr><literal type="number" pos:line="61" pos:column="10">2<pos:position pos:line="61" pos:column="11"/></literal></expr>;<pos:position pos:line="61" pos:column="12"/></return>
  }<pos:position pos:line="62" pos:column="4"/></block></then></if>

<comment type="block" pos:line="64" pos:column="1">/* If there are no further arguments, do the business on stdin and exit */</comment>

<if pos:line="66" pos:column="1">if <condition pos:line="66" pos:column="4">(<expr><name pos:line="66" pos:column="5">i<pos:position pos:line="66" pos:column="6"/></name> <operator pos:line="66" pos:column="7">&gt;=<pos:position pos:line="66" pos:column="12"/></operator> <name pos:line="66" pos:column="10">argc<pos:position pos:line="66" pos:column="14"/></name></expr>)<pos:position pos:line="66" pos:column="15"/></condition><then pos:line="66" pos:column="15"> <block type="pseudo"><return pos:line="66" pos:column="16">return <expr><call><name pos:line="66" pos:column="23">pgrep<pos:position pos:line="66" pos:column="28"/></name><argument_list pos:line="66" pos:column="28">(<argument><expr><name pos:line="66" pos:column="29">stdin<pos:position pos:line="66" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="36">NULL<pos:position pos:line="66" pos:column="40"/></name></expr></argument>)<pos:position pos:line="66" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="42"/></return></block></then></if>

<comment type="block" pos:line="68" pos:column="1">/* Otherwise, work through the remaining arguments as files. If there is only
one, don't give its name on the output. */</comment>

<if pos:line="71" pos:column="1">if <condition pos:line="71" pos:column="4">(<expr><name pos:line="71" pos:column="5">i<pos:position pos:line="71" pos:column="6"/></name> <operator pos:line="71" pos:column="7">==<pos:position pos:line="71" pos:column="9"/></operator> <name pos:line="71" pos:column="10">argc<pos:position pos:line="71" pos:column="14"/></name> <operator pos:line="71" pos:column="15">-<pos:position pos:line="71" pos:column="16"/></operator> <literal type="number" pos:line="71" pos:column="17">1<pos:position pos:line="71" pos:column="18"/></literal></expr>)<pos:position pos:line="71" pos:column="19"/></condition><then pos:line="71" pos:column="19"> <block type="pseudo"><expr_stmt><expr><name pos:line="71" pos:column="20">filenames<pos:position pos:line="71" pos:column="29"/></name> <operator pos:line="71" pos:column="30">=<pos:position pos:line="71" pos:column="31"/></operator> <name pos:line="71" pos:column="32">FALSE<pos:position pos:line="71" pos:column="37"/></name></expr>;<pos:position pos:line="71" pos:column="38"/></expr_stmt></block></then></if>
<if pos:line="72" pos:column="1">if <condition pos:line="72" pos:column="4">(<expr><name pos:line="72" pos:column="5">filenames_only<pos:position pos:line="72" pos:column="19"/></name></expr>)<pos:position pos:line="72" pos:column="20"/></condition><then pos:line="72" pos:column="20"> <block type="pseudo"><expr_stmt><expr><name pos:line="72" pos:column="21">filenames<pos:position pos:line="72" pos:column="30"/></name> <operator pos:line="72" pos:column="31">=<pos:position pos:line="72" pos:column="32"/></operator> <name pos:line="72" pos:column="33">TRUE<pos:position pos:line="72" pos:column="37"/></name></expr>;<pos:position pos:line="72" pos:column="38"/></expr_stmt></block></then></if>

<for pos:line="74" pos:column="1">for <control pos:line="74" pos:column="5">(<init pos:line="74" pos:column="6">;<pos:position pos:line="74" pos:column="7"/></init> <condition><expr><name pos:line="74" pos:column="8">i<pos:position pos:line="74" pos:column="9"/></name> <operator pos:line="74" pos:column="10">&lt;<pos:position pos:line="74" pos:column="14"/></operator> <name pos:line="74" pos:column="12">argc<pos:position pos:line="74" pos:column="16"/></name></expr>;<pos:position pos:line="74" pos:column="17"/></condition> <incr><expr><name pos:line="74" pos:column="18">i<pos:position pos:line="74" pos:column="19"/></name><operator pos:line="74" pos:column="19">++<pos:position pos:line="74" pos:column="21"/></operator></expr></incr>)<pos:position pos:line="74" pos:column="22"/></control>
  <block pos:line="75" pos:column="3">{
  <decl_stmt><decl><type><name pos:line="76" pos:column="3">FILE<pos:position pos:line="76" pos:column="7"/></name> <modifier pos:line="76" pos:column="8">*<pos:position pos:line="76" pos:column="9"/></modifier></type><name pos:line="76" pos:column="9">in<pos:position pos:line="76" pos:column="11"/></name> <init pos:line="76" pos:column="12">= <expr><call><name pos:line="76" pos:column="14">fopen<pos:position pos:line="76" pos:column="19"/></name><argument_list pos:line="76" pos:column="19">(<argument><expr><name><name pos:line="76" pos:column="20">argv<pos:position pos:line="76" pos:column="24"/></name><index pos:line="76" pos:column="24">[<expr><name pos:line="76" pos:column="25">i<pos:position pos:line="76" pos:column="26"/></name></expr>]<pos:position pos:line="76" pos:column="27"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="76" pos:column="29">"r"<pos:position pos:line="76" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="76" pos:column="33"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="34"/></decl_stmt>
  <if pos:line="77" pos:column="3">if <condition pos:line="77" pos:column="6">(<expr><name pos:line="77" pos:column="7">in<pos:position pos:line="77" pos:column="9"/></name> <operator pos:line="77" pos:column="10">==<pos:position pos:line="77" pos:column="12"/></operator> <name pos:line="77" pos:column="13">NULL<pos:position pos:line="77" pos:column="17"/></name></expr>)<pos:position pos:line="77" pos:column="18"/></condition><then pos:line="77" pos:column="18">
    <block pos:line="78" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">fprintf<pos:position pos:line="79" pos:column="12"/></name><argument_list pos:line="79" pos:column="12">(<argument><expr><name pos:line="79" pos:column="13">stderr<pos:position pos:line="79" pos:column="19"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="79" pos:column="21">"%s: failed to open: %s\n"<pos:position pos:line="79" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="79" pos:column="49">argv<pos:position pos:line="79" pos:column="53"/></name><index pos:line="79" pos:column="53">[<expr><name pos:line="79" pos:column="54">i<pos:position pos:line="79" pos:column="55"/></name></expr>]<pos:position pos:line="79" pos:column="56"/></index></name></expr></argument>, <argument><expr><call><name pos:line="79" pos:column="58">strerror<pos:position pos:line="79" pos:column="66"/></name><argument_list pos:line="79" pos:column="66">(<argument><expr><name pos:line="79" pos:column="67">errno<pos:position pos:line="79" pos:column="72"/></name></expr></argument>)<pos:position pos:line="79" pos:column="73"/></argument_list></call></expr></argument>)<pos:position pos:line="79" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="75"/></expr_stmt>
    <expr_stmt><expr><name pos:line="80" pos:column="5">rc<pos:position pos:line="80" pos:column="7"/></name> <operator pos:line="80" pos:column="8">=<pos:position pos:line="80" pos:column="9"/></operator> <literal type="number" pos:line="80" pos:column="10">2<pos:position pos:line="80" pos:column="11"/></literal></expr>;<pos:position pos:line="80" pos:column="12"/></expr_stmt>
    }<pos:position pos:line="81" pos:column="6"/></block></then>
  <else pos:line="82" pos:column="3">else
    <block pos:line="83" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="84" pos:column="5">int<pos:position pos:line="84" pos:column="8"/></name></type> <name pos:line="84" pos:column="9">frc<pos:position pos:line="84" pos:column="12"/></name> <init pos:line="84" pos:column="13">= <expr><call><name pos:line="84" pos:column="15">pgrep<pos:position pos:line="84" pos:column="20"/></name><argument_list pos:line="84" pos:column="20">(<argument><expr><name pos:line="84" pos:column="21">in<pos:position pos:line="84" pos:column="23"/></name></expr></argument>, <argument><expr><ternary><condition><expr><name pos:line="84" pos:column="25">filenames<pos:position pos:line="84" pos:column="34"/></name></expr>?<pos:position pos:line="84" pos:column="35"/></condition><then pos:line="84" pos:column="35"> <expr><name><name pos:line="84" pos:column="36">argv<pos:position pos:line="84" pos:column="40"/></name><index pos:line="84" pos:column="40">[<expr><name pos:line="84" pos:column="41">i<pos:position pos:line="84" pos:column="42"/></name></expr>]<pos:position pos:line="84" pos:column="43"/></index></name></expr> <pos:position pos:line="84" pos:column="44"/></then><else pos:line="84" pos:column="44">: <expr><name pos:line="84" pos:column="46">NULL<pos:position pos:line="84" pos:column="50"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="84" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="84" pos:column="52"/></decl_stmt>
    <if pos:line="85" pos:column="5">if <condition pos:line="85" pos:column="8">(<expr><name pos:line="85" pos:column="9">frc<pos:position pos:line="85" pos:column="12"/></name> <operator pos:line="85" pos:column="13">==<pos:position pos:line="85" pos:column="15"/></operator> <literal type="number" pos:line="85" pos:column="16">0<pos:position pos:line="85" pos:column="17"/></literal> <operator pos:line="85" pos:column="18">&amp;&amp;<pos:position pos:line="85" pos:column="28"/></operator> <name pos:line="85" pos:column="21">rc<pos:position pos:line="85" pos:column="23"/></name> <operator pos:line="85" pos:column="24">==<pos:position pos:line="85" pos:column="26"/></operator> <literal type="number" pos:line="85" pos:column="27">1<pos:position pos:line="85" pos:column="28"/></literal></expr>)<pos:position pos:line="85" pos:column="29"/></condition><then pos:line="85" pos:column="29"> <block type="pseudo"><expr_stmt><expr><name pos:line="85" pos:column="30">rc<pos:position pos:line="85" pos:column="32"/></name> <operator pos:line="85" pos:column="33">=<pos:position pos:line="85" pos:column="34"/></operator> <literal type="number" pos:line="85" pos:column="35">0<pos:position pos:line="85" pos:column="36"/></literal></expr>;<pos:position pos:line="85" pos:column="37"/></expr_stmt></block></then></if>
    <expr_stmt><expr><call><name pos:line="86" pos:column="5">fclose<pos:position pos:line="86" pos:column="11"/></name><argument_list pos:line="86" pos:column="11">(<argument><expr><name pos:line="86" pos:column="12">in<pos:position pos:line="86" pos:column="14"/></name></expr></argument>)<pos:position pos:line="86" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="16"/></expr_stmt>
    }<pos:position pos:line="87" pos:column="6"/></block></else></if>
  }<pos:position pos:line="88" pos:column="4"/></block></for>

<return pos:line="90" pos:column="1">return <expr><name pos:line="90" pos:column="8">rc<pos:position pos:line="90" pos:column="10"/></name></expr>;<pos:position pos:line="90" pos:column="11"/></return>
}<pos:position pos:line="91" pos:column="2"/></block></function></unit>
