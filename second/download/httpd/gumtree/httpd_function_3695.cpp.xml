<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_3695.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">pass_data_to_filter<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">ap_filter_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">f<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="57">const<pos:position pos:line="1" pos:column="62"/></specifier> <name pos:line="1" pos:column="63">char<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">data<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="2" pos:column="41">apr_size_t<pos:position pos:line="2" pos:column="51"/></name></type> <name pos:line="2" pos:column="52">len<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">apr_bucket_brigade<pos:position pos:line="2" pos:column="75"/></name> <modifier pos:line="2" pos:column="76">*<pos:position pos:line="2" pos:column="77"/></modifier></type><name pos:line="2" pos:column="77">bb<pos:position pos:line="2" pos:column="79"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="80"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">ef_ctx_t<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">ctx<pos:position pos:line="4" pos:column="18"/></name> <init pos:line="4" pos:column="19">= <expr><name><name pos:line="4" pos:column="21">f<pos:position pos:line="4" pos:column="22"/></name><operator pos:line="4" pos:column="22">-&gt;<pos:position pos:line="4" pos:column="27"/></operator><name pos:line="4" pos:column="24">ctx<pos:position pos:line="4" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ef_dir_t<pos:position pos:line="5" pos:column="13"/></name> <modifier pos:line="5" pos:column="14">*<pos:position pos:line="5" pos:column="15"/></modifier></type><name pos:line="5" pos:column="15">dc<pos:position pos:line="5" pos:column="17"/></name> <init pos:line="5" pos:column="18">= <expr><name><name pos:line="5" pos:column="20">ctx<pos:position pos:line="5" pos:column="23"/></name><operator pos:line="5" pos:column="23">-&gt;<pos:position pos:line="5" pos:column="28"/></operator><name pos:line="5" pos:column="25">dc<pos:position pos:line="5" pos:column="27"/></name></name></expr></init></decl>;<pos:position pos:line="5" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_status_t<pos:position pos:line="6" pos:column="17"/></name></type> <name pos:line="6" pos:column="18">rv<pos:position pos:line="6" pos:column="20"/></name></decl>;<pos:position pos:line="6" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_size_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">bytes_written<pos:position pos:line="7" pos:column="29"/></name> <init pos:line="7" pos:column="30">= <expr><literal type="number" pos:line="7" pos:column="32">0<pos:position pos:line="7" pos:column="33"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_size_t<pos:position pos:line="8" pos:column="15"/></name></type> <name pos:line="8" pos:column="16">tmplen<pos:position pos:line="8" pos:column="22"/></name></decl>;<pos:position pos:line="8" pos:column="23"/></decl_stmt>

    <do pos:line="10" pos:column="5">do <block pos:line="10" pos:column="8">{
        <expr_stmt><expr><name pos:line="11" pos:column="9">tmplen<pos:position pos:line="11" pos:column="15"/></name> <operator pos:line="11" pos:column="16">=<pos:position pos:line="11" pos:column="17"/></operator> <name pos:line="11" pos:column="18">len<pos:position pos:line="11" pos:column="21"/></name> <operator pos:line="11" pos:column="22">-<pos:position pos:line="11" pos:column="23"/></operator> <name pos:line="11" pos:column="24">bytes_written<pos:position pos:line="11" pos:column="37"/></name></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">rv<pos:position pos:line="12" pos:column="11"/></name> <operator pos:line="12" pos:column="12">=<pos:position pos:line="12" pos:column="13"/></operator> <call><name pos:line="12" pos:column="14">apr_file_write<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name><name pos:line="12" pos:column="29">ctx<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">proc<pos:position pos:line="12" pos:column="38"/></name><operator pos:line="12" pos:column="38">-&gt;<pos:position pos:line="12" pos:column="43"/></operator><name pos:line="12" pos:column="40">in<pos:position pos:line="12" pos:column="42"/></name></name></expr></argument>,
                       <argument><expr><operator pos:line="13" pos:column="24">(<pos:position pos:line="13" pos:column="25"/></operator><specifier pos:line="13" pos:column="25">const<pos:position pos:line="13" pos:column="30"/></specifier> <name pos:line="13" pos:column="31">char<pos:position pos:line="13" pos:column="35"/></name> <operator pos:line="13" pos:column="36">*<pos:position pos:line="13" pos:column="37"/></operator><operator pos:line="13" pos:column="37">)<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="38">data<pos:position pos:line="13" pos:column="42"/></name> <operator pos:line="13" pos:column="43">+<pos:position pos:line="13" pos:column="44"/></operator> <name pos:line="13" pos:column="45">bytes_written<pos:position pos:line="13" pos:column="58"/></name></expr></argument>,
                       <argument><expr><operator pos:line="14" pos:column="24">&amp;<pos:position pos:line="14" pos:column="29"/></operator><name pos:line="14" pos:column="25">tmplen<pos:position pos:line="14" pos:column="31"/></name></expr></argument>)<pos:position pos:line="14" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="15" pos:column="9">bytes_written<pos:position pos:line="15" pos:column="22"/></name> <operator pos:line="15" pos:column="23">+=<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">tmplen<pos:position pos:line="15" pos:column="32"/></name></expr>;<pos:position pos:line="15" pos:column="33"/></expr_stmt>
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name pos:line="16" pos:column="13">rv<pos:position pos:line="16" pos:column="15"/></name> <operator pos:line="16" pos:column="16">!=<pos:position pos:line="16" pos:column="18"/></operator> <name pos:line="16" pos:column="19">APR_SUCCESS<pos:position pos:line="16" pos:column="30"/></name> <operator pos:line="16" pos:column="31">&amp;&amp;<pos:position pos:line="16" pos:column="41"/></operator> <operator pos:line="16" pos:column="34">!<pos:position pos:line="16" pos:column="35"/></operator><call><name pos:line="16" pos:column="35">APR_STATUS_IS_EAGAIN<pos:position pos:line="16" pos:column="55"/></name><argument_list pos:line="16" pos:column="55">(<argument><expr><name pos:line="16" pos:column="56">rv<pos:position pos:line="16" pos:column="58"/></name></expr></argument>)<pos:position pos:line="16" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="16" pos:column="60"/></condition><then pos:line="16" pos:column="60"> <block pos:line="16" pos:column="61">{
            <expr_stmt><expr><call><name pos:line="17" pos:column="13">ap_log_rerror<pos:position pos:line="17" pos:column="26"/></name><argument_list pos:line="17" pos:column="26">(<argument><expr><name pos:line="17" pos:column="27">APLOG_MARK<pos:position pos:line="17" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="39">APLOG_ERR<pos:position pos:line="17" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="50">rv<pos:position pos:line="17" pos:column="52"/></name></expr></argument>, <argument><expr><name><name pos:line="17" pos:column="54">f<pos:position pos:line="17" pos:column="55"/></name><operator pos:line="17" pos:column="55">-&gt;<pos:position pos:line="17" pos:column="60"/></operator><name pos:line="17" pos:column="57">r<pos:position pos:line="17" pos:column="58"/></name></name></expr></argument>,
                          <argument><expr><literal type="string" pos:line="18" pos:column="27">"apr_file_write(child input), len %"<pos:position pos:line="18" pos:column="63"/></literal> <name pos:line="18" pos:column="64">APR_SIZE_T_FMT<pos:position pos:line="18" pos:column="78"/></name></expr></argument>,
                          <argument><expr><name pos:line="19" pos:column="27">tmplen<pos:position pos:line="19" pos:column="33"/></name></expr></argument>)<pos:position pos:line="19" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="35"/></expr_stmt>
            <return pos:line="20" pos:column="13">return <expr><name pos:line="20" pos:column="20">rv<pos:position pos:line="20" pos:column="22"/></name></expr>;<pos:position pos:line="20" pos:column="23"/></return>
        }<pos:position pos:line="21" pos:column="10"/></block></then></if>
        <if pos:line="22" pos:column="9">if <condition pos:line="22" pos:column="12">(<expr><call><name pos:line="22" pos:column="13">APR_STATUS_IS_EAGAIN<pos:position pos:line="22" pos:column="33"/></name><argument_list pos:line="22" pos:column="33">(<argument><expr><name pos:line="22" pos:column="34">rv<pos:position pos:line="22" pos:column="36"/></name></expr></argument>)<pos:position pos:line="22" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="22" pos:column="38"/></condition><then pos:line="22" pos:column="38"> <block pos:line="22" pos:column="39">{
            <comment type="block" pos:line="23" pos:column="13">/* XXX handle blocking conditions here...  if we block, we need
             * to read data from the child process and pass it down to the
             * next filter!
             */</comment>
            <expr_stmt><expr><name pos:line="27" pos:column="13">rv<pos:position pos:line="27" pos:column="15"/></name> <operator pos:line="27" pos:column="16">=<pos:position pos:line="27" pos:column="17"/></operator> <call><name pos:line="27" pos:column="18">drain_available_output<pos:position pos:line="27" pos:column="40"/></name><argument_list pos:line="27" pos:column="40">(<argument><expr><name pos:line="27" pos:column="41">f<pos:position pos:line="27" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="44">bb<pos:position pos:line="27" pos:column="46"/></name></expr></argument>)<pos:position pos:line="27" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="48"/></expr_stmt>
            <if pos:line="28" pos:column="13">if <condition pos:line="28" pos:column="16">(<expr><call><name pos:line="28" pos:column="17">APR_STATUS_IS_EAGAIN<pos:position pos:line="28" pos:column="37"/></name><argument_list pos:line="28" pos:column="37">(<argument><expr><name pos:line="28" pos:column="38">rv<pos:position pos:line="28" pos:column="40"/></name></expr></argument>)<pos:position pos:line="28" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="28" pos:column="42"/></condition><then pos:line="28" pos:column="42"> <block pos:line="28" pos:column="43">{
<cpp:if pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">if<pos:position pos:line="29" pos:column="4"/></cpp:directive> <expr><name pos:line="29" pos:column="5">APR_FILES_AS_SOCKETS<pos:position pos:line="29" pos:column="25"/></name></expr></cpp:if>
                <decl_stmt><decl><type><name pos:line="30" pos:column="17">int<pos:position pos:line="30" pos:column="20"/></name></type> <name pos:line="30" pos:column="21">num_events<pos:position pos:line="30" pos:column="31"/></name></decl>;<pos:position pos:line="30" pos:column="32"/></decl_stmt>
                <decl_stmt><decl><type><specifier pos:line="31" pos:column="17">const<pos:position pos:line="31" pos:column="22"/></specifier> <name pos:line="31" pos:column="23">apr_pollfd_t<pos:position pos:line="31" pos:column="35"/></name> <modifier pos:line="31" pos:column="36">*<pos:position pos:line="31" pos:column="37"/></modifier></type><name pos:line="31" pos:column="37">pdesc<pos:position pos:line="31" pos:column="42"/></name></decl>;<pos:position pos:line="31" pos:column="43"/></decl_stmt>

                <expr_stmt><expr><name pos:line="33" pos:column="17">rv<pos:position pos:line="33" pos:column="19"/></name> <operator pos:line="33" pos:column="20">=<pos:position pos:line="33" pos:column="21"/></operator> <call><name pos:line="33" pos:column="22">apr_pollset_poll<pos:position pos:line="33" pos:column="38"/></name><argument_list pos:line="33" pos:column="38">(<argument><expr><name><name pos:line="33" pos:column="39">ctx<pos:position pos:line="33" pos:column="42"/></name><operator pos:line="33" pos:column="42">-&gt;<pos:position pos:line="33" pos:column="47"/></operator><name pos:line="33" pos:column="44">pollset<pos:position pos:line="33" pos:column="51"/></name></name></expr></argument>, <argument><expr><name><name pos:line="33" pos:column="53">f<pos:position pos:line="33" pos:column="54"/></name><operator pos:line="33" pos:column="54">-&gt;<pos:position pos:line="33" pos:column="59"/></operator><name pos:line="33" pos:column="56">r<pos:position pos:line="33" pos:column="57"/></name><operator pos:line="33" pos:column="57">-&gt;<pos:position pos:line="33" pos:column="62"/></operator><name pos:line="33" pos:column="59">server<pos:position pos:line="33" pos:column="65"/></name><operator pos:line="33" pos:column="65">-&gt;<pos:position pos:line="33" pos:column="70"/></operator><name pos:line="33" pos:column="67">timeout<pos:position pos:line="33" pos:column="74"/></name></name></expr></argument>,
                                      <argument><expr><operator pos:line="34" pos:column="39">&amp;<pos:position pos:line="34" pos:column="44"/></operator><name pos:line="34" pos:column="40">num_events<pos:position pos:line="34" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="34" pos:column="52">&amp;<pos:position pos:line="34" pos:column="57"/></operator><name pos:line="34" pos:column="53">pdesc<pos:position pos:line="34" pos:column="58"/></name></expr></argument>)<pos:position pos:line="34" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="60"/></expr_stmt>
                <if pos:line="35" pos:column="17">if <condition pos:line="35" pos:column="20">(<expr><name pos:line="35" pos:column="21">rv<pos:position pos:line="35" pos:column="23"/></name> <operator pos:line="35" pos:column="24">||<pos:position pos:line="35" pos:column="26"/></operator> <name><name pos:line="35" pos:column="27">dc<pos:position pos:line="35" pos:column="29"/></name><operator pos:line="35" pos:column="29">-&gt;<pos:position pos:line="35" pos:column="34"/></operator><name pos:line="35" pos:column="31">debug<pos:position pos:line="35" pos:column="36"/></name></name> <operator pos:line="35" pos:column="37">&gt;=<pos:position pos:line="35" pos:column="42"/></operator> <name pos:line="35" pos:column="40">DBGLVL_GORY<pos:position pos:line="35" pos:column="51"/></name></expr>)<pos:position pos:line="35" pos:column="52"/></condition><then pos:line="35" pos:column="52"> <block pos:line="35" pos:column="53">{
                    <expr_stmt><expr><call><name pos:line="36" pos:column="21">ap_log_rerror<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><name pos:line="36" pos:column="35">APLOG_MARK<pos:position pos:line="36" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="47">APLOG_DEBUG<pos:position pos:line="36" pos:column="58"/></name></expr></argument>,
                                  <argument><expr><name pos:line="37" pos:column="35">rv<pos:position pos:line="37" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="37" pos:column="39">f<pos:position pos:line="37" pos:column="40"/></name><operator pos:line="37" pos:column="40">-&gt;<pos:position pos:line="37" pos:column="45"/></operator><name pos:line="37" pos:column="42">r<pos:position pos:line="37" pos:column="43"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="37" pos:column="45">"apr_pollset_poll()"<pos:position pos:line="37" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="67"/></expr_stmt>
                }<pos:position pos:line="38" pos:column="18"/></block></then></if>
                <if pos:line="39" pos:column="17">if <condition pos:line="39" pos:column="20">(<expr><name pos:line="39" pos:column="21">rv<pos:position pos:line="39" pos:column="23"/></name> <operator pos:line="39" pos:column="24">!=<pos:position pos:line="39" pos:column="26"/></operator> <name pos:line="39" pos:column="27">APR_SUCCESS<pos:position pos:line="39" pos:column="38"/></name> <operator pos:line="39" pos:column="39">&amp;&amp;<pos:position pos:line="39" pos:column="49"/></operator> <operator pos:line="39" pos:column="42">!<pos:position pos:line="39" pos:column="43"/></operator><call><name pos:line="39" pos:column="43">APR_STATUS_IS_EINTR<pos:position pos:line="39" pos:column="62"/></name><argument_list pos:line="39" pos:column="62">(<argument><expr><name pos:line="39" pos:column="63">rv<pos:position pos:line="39" pos:column="65"/></name></expr></argument>)<pos:position pos:line="39" pos:column="66"/></argument_list></call></expr>)<pos:position pos:line="39" pos:column="67"/></condition><then pos:line="39" pos:column="67"> <block pos:line="39" pos:column="68">{
                    <comment type="block" pos:line="40" pos:column="21">/* some error such as APR_TIMEUP */</comment>
                    <return pos:line="41" pos:column="21">return <expr><name pos:line="41" pos:column="28">rv<pos:position pos:line="41" pos:column="30"/></name></expr>;<pos:position pos:line="41" pos:column="31"/></return>
                }<pos:position pos:line="42" pos:column="18"/></block></then></if>
<cpp:else pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">else<pos:position pos:line="43" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="43" pos:column="7">/* APR_FILES_AS_SOCKETS */</comment>
                <comment type="block" pos:line="44" pos:column="17">/* Yuck... I'd really like to wait until I can read
                 * or write, but instead I have to sleep and try again
                 */</comment>
                <expr_stmt><expr><call><name pos:line="47" pos:column="17">apr_sleep<pos:position pos:line="47" pos:column="26"/></name><argument_list pos:line="47" pos:column="26">(<argument><expr><literal type="number" pos:line="47" pos:column="27">100000<pos:position pos:line="47" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="47" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="35"/></expr_stmt> <comment type="block" pos:line="47" pos:column="36">/* 100 milliseconds */</comment>
                <if pos:line="48" pos:column="17">if <condition pos:line="48" pos:column="20">(<expr><name><name pos:line="48" pos:column="21">dc<pos:position pos:line="48" pos:column="23"/></name><operator pos:line="48" pos:column="23">-&gt;<pos:position pos:line="48" pos:column="28"/></operator><name pos:line="48" pos:column="25">debug<pos:position pos:line="48" pos:column="30"/></name></name> <operator pos:line="48" pos:column="31">&gt;=<pos:position pos:line="48" pos:column="36"/></operator> <name pos:line="48" pos:column="34">DBGLVL_GORY<pos:position pos:line="48" pos:column="45"/></name></expr>)<pos:position pos:line="48" pos:column="46"/></condition><then pos:line="48" pos:column="46"> <block pos:line="48" pos:column="47">{
                    <expr_stmt><expr><call><name pos:line="49" pos:column="21">ap_log_rerror<pos:position pos:line="49" pos:column="34"/></name><argument_list pos:line="49" pos:column="34">(<argument><expr><name pos:line="49" pos:column="35">APLOG_MARK<pos:position pos:line="49" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="47">APLOG_DEBUG<pos:position pos:line="49" pos:column="58"/></name></expr></argument>,
                                  <argument><expr><literal type="number" pos:line="50" pos:column="35">0<pos:position pos:line="50" pos:column="36"/></literal></expr></argument>, <argument><expr><name><name pos:line="50" pos:column="38">f<pos:position pos:line="50" pos:column="39"/></name><operator pos:line="50" pos:column="39">-&gt;<pos:position pos:line="50" pos:column="44"/></operator><name pos:line="50" pos:column="41">r<pos:position pos:line="50" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="50" pos:column="44">"apr_sleep()"<pos:position pos:line="50" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="59"/></expr_stmt>
                }<pos:position pos:line="51" pos:column="18"/></block></then></if>
<cpp:endif pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">endif<pos:position pos:line="52" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="52" pos:column="8">/* APR_FILES_AS_SOCKETS */</comment>
            }<pos:position pos:line="53" pos:column="14"/></block></then>
            <elseif pos:line="54" pos:column="13">else <if pos:line="54" pos:column="18">if <condition pos:line="54" pos:column="21">(<expr><name pos:line="54" pos:column="22">rv<pos:position pos:line="54" pos:column="24"/></name> <operator pos:line="54" pos:column="25">!=<pos:position pos:line="54" pos:column="27"/></operator> <name pos:line="54" pos:column="28">APR_SUCCESS<pos:position pos:line="54" pos:column="39"/></name></expr>)<pos:position pos:line="54" pos:column="40"/></condition><then pos:line="54" pos:column="40"> <block pos:line="54" pos:column="41">{
                <return pos:line="55" pos:column="17">return <expr><name pos:line="55" pos:column="24">rv<pos:position pos:line="55" pos:column="26"/></name></expr>;<pos:position pos:line="55" pos:column="27"/></return>
            }<pos:position pos:line="56" pos:column="14"/></block></then></if></elseif></if>
        }<pos:position pos:line="57" pos:column="10"/></block></then></if>
    }<pos:position pos:line="58" pos:column="6"/></block> while <condition pos:line="58" pos:column="13">(<expr><name pos:line="58" pos:column="14">bytes_written<pos:position pos:line="58" pos:column="27"/></name> <operator pos:line="58" pos:column="28">&lt;<pos:position pos:line="58" pos:column="32"/></operator> <name pos:line="58" pos:column="30">len<pos:position pos:line="58" pos:column="33"/></name></expr>)<pos:position pos:line="58" pos:column="34"/></condition>;<pos:position pos:line="58" pos:column="35"/></do>
    <return pos:line="59" pos:column="5">return <expr><name pos:line="59" pos:column="12">rv<pos:position pos:line="59" pos:column="14"/></name></expr>;<pos:position pos:line="59" pos:column="15"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function></unit>
