<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_675_httpd-2.2.8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">bio_filter_out_write<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">BIO<pos:position pos:line="1" pos:column="36"/></name> <modifier pos:line="1" pos:column="37">*<pos:position pos:line="1" pos:column="38"/></modifier></type><name pos:line="1" pos:column="38">bio<pos:position pos:line="1" pos:column="41"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="43">const<pos:position pos:line="1" pos:column="48"/></specifier> <name pos:line="1" pos:column="49">char<pos:position pos:line="1" pos:column="53"/></name> <modifier pos:line="1" pos:column="54">*<pos:position pos:line="1" pos:column="55"/></modifier></type><name pos:line="1" pos:column="55">in<pos:position pos:line="1" pos:column="57"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="59">int<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">inl<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="67"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">bio_filter_out_ctx_t<pos:position pos:line="3" pos:column="25"/></name> <modifier pos:line="3" pos:column="26">*<pos:position pos:line="3" pos:column="27"/></modifier></type><name pos:line="3" pos:column="27">outctx<pos:position pos:line="3" pos:column="33"/></name> <init pos:line="3" pos:column="34">= <expr><operator pos:line="3" pos:column="36">(<pos:position pos:line="3" pos:column="37"/></operator><name pos:line="3" pos:column="37">bio_filter_out_ctx_t<pos:position pos:line="3" pos:column="57"/></name> <operator pos:line="3" pos:column="58">*<pos:position pos:line="3" pos:column="59"/></operator><operator pos:line="3" pos:column="59">)<pos:position pos:line="3" pos:column="60"/></operator><operator pos:line="3" pos:column="60">(<pos:position pos:line="3" pos:column="61"/></operator><name><name pos:line="3" pos:column="61">bio<pos:position pos:line="3" pos:column="64"/></name><operator pos:line="3" pos:column="64">-&gt;<pos:position pos:line="3" pos:column="69"/></operator><name pos:line="3" pos:column="66">ptr<pos:position pos:line="3" pos:column="69"/></name></name><operator pos:line="3" pos:column="69">)<pos:position pos:line="3" pos:column="70"/></operator></expr></init></decl>;<pos:position pos:line="3" pos:column="71"/></decl_stmt>

    <comment type="block" pos:line="5" pos:column="5">/* when handshaking we'll have a small number of bytes.
     * max size SSL will pass us here is about 16k.
     * (16413 bytes to be exact)
     */</comment>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">BIO_clear_retry_flags<pos:position pos:line="9" pos:column="26"/></name><argument_list pos:line="9" pos:column="26">(<argument><expr><name pos:line="9" pos:column="27">bio<pos:position pos:line="9" pos:column="30"/></name></expr></argument>)<pos:position pos:line="9" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="32"/></expr_stmt>

    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><operator pos:line="11" pos:column="9">!<pos:position pos:line="11" pos:column="10"/></operator><name><name pos:line="11" pos:column="10">outctx<pos:position pos:line="11" pos:column="16"/></name><operator pos:line="11" pos:column="16">-&gt;<pos:position pos:line="11" pos:column="21"/></operator><name pos:line="11" pos:column="18">length<pos:position pos:line="11" pos:column="24"/></name></name> <operator pos:line="11" pos:column="25">&amp;&amp;<pos:position pos:line="11" pos:column="35"/></operator> <operator pos:line="11" pos:column="28">(<pos:position pos:line="11" pos:column="29"/></operator><name pos:line="11" pos:column="29">inl<pos:position pos:line="11" pos:column="32"/></name> <operator pos:line="11" pos:column="33">+<pos:position pos:line="11" pos:column="34"/></operator> <name><name pos:line="11" pos:column="35">outctx<pos:position pos:line="11" pos:column="41"/></name><operator pos:line="11" pos:column="41">-&gt;<pos:position pos:line="11" pos:column="46"/></operator><name pos:line="11" pos:column="43">blen<pos:position pos:line="11" pos:column="47"/></name></name> <operator pos:line="11" pos:column="48">&lt;<pos:position pos:line="11" pos:column="52"/></operator> <sizeof pos:line="11" pos:column="50">sizeof<argument_list pos:line="11" pos:column="56">(<argument><expr><name><name pos:line="11" pos:column="57">outctx<pos:position pos:line="11" pos:column="63"/></name><operator pos:line="11" pos:column="63">-&gt;<pos:position pos:line="11" pos:column="68"/></operator><name pos:line="11" pos:column="65">buffer<pos:position pos:line="11" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="11" pos:column="72"/></argument_list></sizeof><operator pos:line="11" pos:column="72">)<pos:position pos:line="11" pos:column="73"/></operator> <operator pos:line="11" pos:column="74">&amp;&amp;<pos:position pos:line="11" pos:column="84"/></operator>
        <operator pos:line="12" pos:column="9">!<pos:position pos:line="12" pos:column="10"/></operator><name><name pos:line="12" pos:column="10">outctx<pos:position pos:line="12" pos:column="16"/></name><operator pos:line="12" pos:column="16">-&gt;<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="18">filter_ctx<pos:position pos:line="12" pos:column="28"/></name><operator pos:line="12" pos:column="28">-&gt;<pos:position pos:line="12" pos:column="33"/></operator><name pos:line="12" pos:column="30">nobuffer<pos:position pos:line="12" pos:column="38"/></name></name></expr>)<pos:position pos:line="12" pos:column="39"/></condition><then pos:line="12" pos:column="39"> <block pos:line="12" pos:column="40">{
        <comment type="block" pos:line="13" pos:column="9">/* the first two SSL_writes (of 1024 and 261 bytes)
         * need to be in the same packet (vec[0].iov_base)
         */</comment>
        <comment type="block" pos:line="16" pos:column="9">/* XXX: could use apr_brigade_write() to make code look cleaner
         * but this way we avoid the malloc(APR_BUCKET_BUFF_SIZE)
         * and free() of it later
         */</comment>
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">memcpy<pos:position pos:line="20" pos:column="15"/></name><argument_list pos:line="20" pos:column="15">(<argument><expr><operator pos:line="20" pos:column="16">&amp;<pos:position pos:line="20" pos:column="21"/></operator><name><name pos:line="20" pos:column="17">outctx<pos:position pos:line="20" pos:column="23"/></name><operator pos:line="20" pos:column="23">-&gt;<pos:position pos:line="20" pos:column="28"/></operator><name pos:line="20" pos:column="25">buffer<pos:position pos:line="20" pos:column="31"/></name><index pos:line="20" pos:column="31">[<expr><name><name pos:line="20" pos:column="32">outctx<pos:position pos:line="20" pos:column="38"/></name><operator pos:line="20" pos:column="38">-&gt;<pos:position pos:line="20" pos:column="43"/></operator><name pos:line="20" pos:column="40">blen<pos:position pos:line="20" pos:column="44"/></name></name></expr>]<pos:position pos:line="20" pos:column="45"/></index></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="47">in<pos:position pos:line="20" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="51">inl<pos:position pos:line="20" pos:column="54"/></name></expr></argument>)<pos:position pos:line="20" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="21" pos:column="9">outctx<pos:position pos:line="21" pos:column="15"/></name><operator pos:line="21" pos:column="15">-&gt;<pos:position pos:line="21" pos:column="20"/></operator><name pos:line="21" pos:column="17">blen<pos:position pos:line="21" pos:column="21"/></name></name> <operator pos:line="21" pos:column="22">+=<pos:position pos:line="21" pos:column="24"/></operator> <name pos:line="21" pos:column="25">inl<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then>
    <else pos:line="23" pos:column="5">else <block pos:line="23" pos:column="10">{
        <comment type="block" pos:line="24" pos:column="9">/* pass along the encrypted data
         * need to flush since we're using SSL's malloc-ed buffer
         * which will be overwritten once we leave here
         */</comment>
        <decl_stmt><decl><type><name pos:line="28" pos:column="9">apr_bucket<pos:position pos:line="28" pos:column="19"/></name> <modifier pos:line="28" pos:column="20">*<pos:position pos:line="28" pos:column="21"/></modifier></type><name pos:line="28" pos:column="21">bucket<pos:position pos:line="28" pos:column="27"/></name> <init pos:line="28" pos:column="28">= <expr><call><name pos:line="28" pos:column="30">apr_bucket_transient_create<pos:position pos:line="28" pos:column="57"/></name><argument_list pos:line="28" pos:column="57">(<argument><expr><name pos:line="28" pos:column="58">in<pos:position pos:line="28" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="62">inl<pos:position pos:line="28" pos:column="65"/></name></expr></argument>,
                                             <argument><expr><name><name pos:line="29" pos:column="46">outctx<pos:position pos:line="29" pos:column="52"/></name><operator pos:line="29" pos:column="52">-&gt;<pos:position pos:line="29" pos:column="57"/></operator><name pos:line="29" pos:column="54">bb<pos:position pos:line="29" pos:column="56"/></name><operator pos:line="29" pos:column="56">-&gt;<pos:position pos:line="29" pos:column="61"/></operator><name pos:line="29" pos:column="58">bucket_alloc<pos:position pos:line="29" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="29" pos:column="72"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="31" pos:column="9">outctx<pos:position pos:line="31" pos:column="15"/></name><operator pos:line="31" pos:column="15">-&gt;<pos:position pos:line="31" pos:column="20"/></operator><name pos:line="31" pos:column="17">length<pos:position pos:line="31" pos:column="23"/></name></name> <operator pos:line="31" pos:column="24">+=<pos:position pos:line="31" pos:column="26"/></operator> <name pos:line="31" pos:column="27">inl<pos:position pos:line="31" pos:column="30"/></name></expr>;<pos:position pos:line="31" pos:column="31"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="32" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name><name pos:line="32" pos:column="33">outctx<pos:position pos:line="32" pos:column="39"/></name><operator pos:line="32" pos:column="39">-&gt;<pos:position pos:line="32" pos:column="44"/></operator><name pos:line="32" pos:column="41">bb<pos:position pos:line="32" pos:column="43"/></name></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="45">bucket<pos:position pos:line="32" pos:column="51"/></name></expr></argument>)<pos:position pos:line="32" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="53"/></expr_stmt>

        <if pos:line="34" pos:column="9">if <condition pos:line="34" pos:column="12">(<expr><call><name pos:line="34" pos:column="13">bio_filter_out_flush<pos:position pos:line="34" pos:column="33"/></name><argument_list pos:line="34" pos:column="33">(<argument><expr><name pos:line="34" pos:column="34">bio<pos:position pos:line="34" pos:column="37"/></name></expr></argument>)<pos:position pos:line="34" pos:column="38"/></argument_list></call> <operator pos:line="34" pos:column="39">&lt;<pos:position pos:line="34" pos:column="43"/></operator> <literal type="number" pos:line="34" pos:column="41">0<pos:position pos:line="34" pos:column="42"/></literal></expr>)<pos:position pos:line="34" pos:column="43"/></condition><then pos:line="34" pos:column="43"> <block pos:line="34" pos:column="44">{
            <return pos:line="35" pos:column="13">return <expr><operator pos:line="35" pos:column="20">-<pos:position pos:line="35" pos:column="21"/></operator><literal type="number" pos:line="35" pos:column="21">1<pos:position pos:line="35" pos:column="22"/></literal></expr>;<pos:position pos:line="35" pos:column="23"/></return>
        }<pos:position pos:line="36" pos:column="10"/></block></then></if>
    }<pos:position pos:line="37" pos:column="6"/></block></else></if>

    <return pos:line="39" pos:column="5">return <expr><name pos:line="39" pos:column="12">inl<pos:position pos:line="39" pos:column="15"/></name></expr>;<pos:position pos:line="39" pos:column="16"/></return>
}<pos:position pos:line="40" pos:column="2"/></block></function></unit>
