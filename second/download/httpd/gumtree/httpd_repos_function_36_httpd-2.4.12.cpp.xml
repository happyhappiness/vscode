<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_36_httpd-2.4.12.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">err_output<pos:position pos:line="1" pos:column="23"/></name><parameter_list pos:line="1" pos:column="23">(<parameter><decl><type><name pos:line="1" pos:column="24">int<pos:position pos:line="1" pos:column="27"/></name></type> <name pos:line="1" pos:column="28">is_error<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="38">const<pos:position pos:line="1" pos:column="43"/></specifier> <name pos:line="1" pos:column="44">char<pos:position pos:line="1" pos:column="48"/></name> <modifier pos:line="1" pos:column="49">*<pos:position pos:line="1" pos:column="50"/></modifier></type><name pos:line="1" pos:column="50">fmt<pos:position pos:line="1" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="55">va_list<pos:position pos:line="1" pos:column="62"/></name></type> <name pos:line="1" pos:column="63">ap<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="66"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:ifdef pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">ifdef<pos:position pos:line="3" pos:column="7"/></cpp:directive> <name pos:line="3" pos:column="8">AP_LOG_EXEC<pos:position pos:line="3" pos:column="19"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">time_t<pos:position pos:line="4" pos:column="11"/></name></type> <name pos:line="4" pos:column="12">timevar<pos:position pos:line="4" pos:column="19"/></name></decl>;<pos:position pos:line="4" pos:column="20"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="5" pos:column="5">struct<pos:position pos:line="5" pos:column="11"/></name> <name pos:line="5" pos:column="12">tm<pos:position pos:line="5" pos:column="14"/></name></name> <modifier pos:line="5" pos:column="15">*<pos:position pos:line="5" pos:column="16"/></modifier></type><name pos:line="5" pos:column="16">lt<pos:position pos:line="5" pos:column="18"/></name></decl>;<pos:position pos:line="5" pos:column="19"/></decl_stmt>

    <if pos:line="7" pos:column="5">if <condition pos:line="7" pos:column="8">(<expr><operator pos:line="7" pos:column="9">!<pos:position pos:line="7" pos:column="10"/></operator><name pos:line="7" pos:column="10">log<pos:position pos:line="7" pos:column="13"/></name></expr>)<pos:position pos:line="7" pos:column="14"/></condition><then pos:line="7" pos:column="14"> <block pos:line="7" pos:column="15">{
<cpp:if pos:line="8" pos:column="1">#<cpp:directive pos:line="8" pos:column="2">if<pos:position pos:line="8" pos:column="4"/></cpp:directive> <expr><call><name pos:line="8" pos:column="5">defined<pos:position pos:line="8" pos:column="12"/></name><argument_list pos:line="8" pos:column="12">(<argument><expr><name pos:line="8" pos:column="13">_LARGEFILE64_SOURCE<pos:position pos:line="8" pos:column="32"/></name></expr></argument>)<pos:position pos:line="8" pos:column="33"/></argument_list></call> <operator pos:line="8" pos:column="34">&amp;&amp;<pos:position pos:line="8" pos:column="44"/></operator> <name pos:line="8" pos:column="37">HAVE_FOPEN64<pos:position pos:line="8" pos:column="49"/></name></expr></cpp:if>
        <if pos:line="9" pos:column="9">if <condition pos:line="9" pos:column="12">(<expr><operator pos:line="9" pos:column="13">(<pos:position pos:line="9" pos:column="14"/></operator><name pos:line="9" pos:column="14">log<pos:position pos:line="9" pos:column="17"/></name> <operator pos:line="9" pos:column="18">=<pos:position pos:line="9" pos:column="19"/></operator> <call><name pos:line="9" pos:column="20">fopen64<pos:position pos:line="9" pos:column="27"/></name><argument_list pos:line="9" pos:column="27">(<argument><expr><name pos:line="9" pos:column="28">AP_LOG_EXEC<pos:position pos:line="9" pos:column="39"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="9" pos:column="41">"a"<pos:position pos:line="9" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="45"/></argument_list></call><operator pos:line="9" pos:column="45">)<pos:position pos:line="9" pos:column="46"/></operator> <operator pos:line="9" pos:column="47">==<pos:position pos:line="9" pos:column="49"/></operator> <name pos:line="9" pos:column="50">NULL<pos:position pos:line="9" pos:column="54"/></name></expr>)<pos:position pos:line="9" pos:column="55"/></condition><then pos:line="9" pos:column="55"> <block pos:line="9" pos:column="56">{
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
        <if pos:line="11" pos:column="9">if <condition pos:line="11" pos:column="12">(<expr><operator pos:line="11" pos:column="13">(<pos:position pos:line="11" pos:column="14"/></operator><name pos:line="11" pos:column="14">log<pos:position pos:line="11" pos:column="17"/></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <call><name pos:line="11" pos:column="20">fopen<pos:position pos:line="11" pos:column="25"/></name><argument_list pos:line="11" pos:column="25">(<argument><expr><name pos:line="11" pos:column="26">AP_LOG_EXEC<pos:position pos:line="11" pos:column="37"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="11" pos:column="39">"a"<pos:position pos:line="11" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="43"/></argument_list></call><operator pos:line="11" pos:column="43">)<pos:position pos:line="11" pos:column="44"/></operator> <operator pos:line="11" pos:column="45">==<pos:position pos:line="11" pos:column="47"/></operator> <name pos:line="11" pos:column="48">NULL<pos:position pos:line="11" pos:column="52"/></name></expr>)<pos:position pos:line="11" pos:column="53"/></condition><then pos:line="11" pos:column="53"> <block pos:line="11" pos:column="54">{
<cpp:endif pos:line="12" pos:column="1">#<cpp:directive pos:line="12" pos:column="2">endif<pos:position pos:line="12" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name pos:line="13" pos:column="13">fprintf<pos:position pos:line="13" pos:column="20"/></name><argument_list pos:line="13" pos:column="20">(<argument><expr><name pos:line="13" pos:column="21">stderr<pos:position pos:line="13" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="13" pos:column="29">"suexec failure: could not open log file\n"<pos:position pos:line="13" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="13" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="74"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="14" pos:column="13">perror<pos:position pos:line="14" pos:column="19"/></name><argument_list pos:line="14" pos:column="19">(<argument><expr><literal type="string" pos:line="14" pos:column="20">"fopen"<pos:position pos:line="14" pos:column="27"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="29"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="15" pos:column="13">exit<pos:position pos:line="15" pos:column="17"/></name><argument_list pos:line="15" pos:column="17">(<argument><expr><literal type="number" pos:line="15" pos:column="18">1<pos:position pos:line="15" pos:column="19"/></literal></expr></argument>)<pos:position pos:line="15" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>

    <if pos:line="19" pos:column="5">if <condition pos:line="19" pos:column="8">(<expr><name pos:line="19" pos:column="9">is_error<pos:position pos:line="19" pos:column="17"/></name></expr>)<pos:position pos:line="19" pos:column="18"/></condition><then pos:line="19" pos:column="18"> <block pos:line="19" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="20" pos:column="9">fprintf<pos:position pos:line="20" pos:column="16"/></name><argument_list pos:line="20" pos:column="16">(<argument><expr><name pos:line="20" pos:column="17">stderr<pos:position pos:line="20" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="20" pos:column="25">"suexec policy violation: see suexec log for more "<pos:position pos:line="20" pos:column="76"/></literal>
                        <literal type="string" pos:line="21" pos:column="25">"details\n"<pos:position pos:line="21" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="22" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">time<pos:position pos:line="24" pos:column="9"/></name><argument_list pos:line="24" pos:column="9">(<argument><expr><operator pos:line="24" pos:column="10">&amp;<pos:position pos:line="24" pos:column="15"/></operator><name pos:line="24" pos:column="11">timevar<pos:position pos:line="24" pos:column="18"/></name></expr></argument>)<pos:position pos:line="24" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="25" pos:column="5">lt<pos:position pos:line="25" pos:column="7"/></name> <operator pos:line="25" pos:column="8">=<pos:position pos:line="25" pos:column="9"/></operator> <call><name pos:line="25" pos:column="10">localtime<pos:position pos:line="25" pos:column="19"/></name><argument_list pos:line="25" pos:column="19">(<argument><expr><operator pos:line="25" pos:column="20">&amp;<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="21">timevar<pos:position pos:line="25" pos:column="28"/></name></expr></argument>)<pos:position pos:line="25" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="30"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="27" pos:column="5">fprintf<pos:position pos:line="27" pos:column="12"/></name><argument_list pos:line="27" pos:column="12">(<argument><expr><name pos:line="27" pos:column="13">log<pos:position pos:line="27" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="27" pos:column="18">"[%d-%.2d-%.2d %.2d:%.2d:%.2d]: "<pos:position pos:line="27" pos:column="51"/></literal></expr></argument>,
            <argument><expr><name><name pos:line="28" pos:column="13">lt<pos:position pos:line="28" pos:column="15"/></name><operator pos:line="28" pos:column="15">-&gt;<pos:position pos:line="28" pos:column="20"/></operator><name pos:line="28" pos:column="17">tm_year<pos:position pos:line="28" pos:column="24"/></name></name> <operator pos:line="28" pos:column="25">+<pos:position pos:line="28" pos:column="26"/></operator> <literal type="number" pos:line="28" pos:column="27">1900<pos:position pos:line="28" pos:column="31"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="33">lt<pos:position pos:line="28" pos:column="35"/></name><operator pos:line="28" pos:column="35">-&gt;<pos:position pos:line="28" pos:column="40"/></operator><name pos:line="28" pos:column="37">tm_mon<pos:position pos:line="28" pos:column="43"/></name></name> <operator pos:line="28" pos:column="44">+<pos:position pos:line="28" pos:column="45"/></operator> <literal type="number" pos:line="28" pos:column="46">1<pos:position pos:line="28" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="28" pos:column="49">lt<pos:position pos:line="28" pos:column="51"/></name><operator pos:line="28" pos:column="51">-&gt;<pos:position pos:line="28" pos:column="56"/></operator><name pos:line="28" pos:column="53">tm_mday<pos:position pos:line="28" pos:column="60"/></name></name></expr></argument>,
            <argument><expr><name><name pos:line="29" pos:column="13">lt<pos:position pos:line="29" pos:column="15"/></name><operator pos:line="29" pos:column="15">-&gt;<pos:position pos:line="29" pos:column="20"/></operator><name pos:line="29" pos:column="17">tm_hour<pos:position pos:line="29" pos:column="24"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="26">lt<pos:position pos:line="29" pos:column="28"/></name><operator pos:line="29" pos:column="28">-&gt;<pos:position pos:line="29" pos:column="33"/></operator><name pos:line="29" pos:column="30">tm_min<pos:position pos:line="29" pos:column="36"/></name></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="38">lt<pos:position pos:line="29" pos:column="40"/></name><operator pos:line="29" pos:column="40">-&gt;<pos:position pos:line="29" pos:column="45"/></operator><name pos:line="29" pos:column="42">tm_sec<pos:position pos:line="29" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="29" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="50"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="31" pos:column="5">vfprintf<pos:position pos:line="31" pos:column="13"/></name><argument_list pos:line="31" pos:column="13">(<argument><expr><name pos:line="31" pos:column="14">log<pos:position pos:line="31" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="19">fmt<pos:position pos:line="31" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="24">ap<pos:position pos:line="31" pos:column="26"/></name></expr></argument>)<pos:position pos:line="31" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="28"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="33" pos:column="5">fflush<pos:position pos:line="33" pos:column="11"/></name><argument_list pos:line="33" pos:column="11">(<argument><expr><name pos:line="33" pos:column="12">log<pos:position pos:line="33" pos:column="15"/></name></expr></argument>)<pos:position pos:line="33" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="17"/></expr_stmt>
<cpp:endif pos:line="34" pos:column="1">#<cpp:directive pos:line="34" pos:column="2">endif<pos:position pos:line="34" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="34" pos:column="8">/* AP_LOG_EXEC */</comment>
    <return pos:line="35" pos:column="5">return;<pos:position pos:line="35" pos:column="12"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></then></if>

<function><specifier pos:line="38" pos:column="1">static<pos:position pos:line="38" pos:column="7"/></specifier> <type><name pos:line="38" pos:column="8">void<pos:position pos:line="38" pos:column="12"/></name></type> <name pos:line="38" pos:column="13">log_err<pos:position pos:line="38" pos:column="20"/></name><parameter_list pos:line="38" pos:column="20">(<parameter><decl><type><specifier pos:line="38" pos:column="21">const<pos:position pos:line="38" pos:column="26"/></specifier> <name pos:line="38" pos:column="27">char<pos:position pos:line="38" pos:column="31"/></name> <modifier pos:line="38" pos:column="32">*<pos:position pos:line="38" pos:column="33"/></modifier></type><name pos:line="38" pos:column="33">fmt<pos:position pos:line="38" pos:column="36"/></name></decl></parameter>,<parameter><decl><type><modifier pos:line="38" pos:column="37">...<pos:position pos:line="38" pos:column="40"/></modifier></type></decl></parameter>)<pos:position pos:line="38" pos:column="41"/></parameter_list>
<block pos:line="39" pos:column="1">{
<cpp:ifdef pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">ifdef<pos:position pos:line="40" pos:column="7"/></cpp:directive> <name pos:line="40" pos:column="8">AP_LOG_EXEC<pos:position pos:line="40" pos:column="19"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="41" pos:column="5">va_list<pos:position pos:line="41" pos:column="12"/></name></type> <name pos:line="41" pos:column="13">ap<pos:position pos:line="41" pos:column="15"/></name></decl>;<pos:position pos:line="41" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="43" pos:column="5">va_start<pos:position pos:line="43" pos:column="13"/></name><argument_list pos:line="43" pos:column="13">(<argument><expr><name pos:line="43" pos:column="14">ap<pos:position pos:line="43" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="18">fmt<pos:position pos:line="43" pos:column="21"/></name></expr></argument>)<pos:position pos:line="43" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="44" pos:column="5">err_output<pos:position pos:line="44" pos:column="15"/></name><argument_list pos:line="44" pos:column="15">(<argument><expr><literal type="number" pos:line="44" pos:column="16">1<pos:position pos:line="44" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="44" pos:column="19">fmt<pos:position pos:line="44" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="44" pos:column="24">ap<pos:position pos:line="44" pos:column="26"/></name></expr></argument>)<pos:position pos:line="44" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="28"/></expr_stmt> <comment type="block" pos:line="44" pos:column="29">/* 1 == is_error */</comment>
    <expr_stmt><expr><call><name pos:line="45" pos:column="5">va_end<pos:position pos:line="45" pos:column="11"/></name><argument_list pos:line="45" pos:column="11">(<argument><expr><name pos:line="45" pos:column="12">ap<pos:position pos:line="45" pos:column="14"/></name></expr></argument>)<pos:position pos:line="45" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="46" pos:column="1">#<cpp:directive pos:line="46" pos:column="2">endif<pos:position pos:line="46" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="46" pos:column="8">/* AP_LOG_EXEC */</comment>
    <return pos:line="47" pos:column="5">return;<pos:position pos:line="47" pos:column="12"/></return>
}<pos:position pos:line="48" pos:column="2"/></block></function>

<function><specifier pos:line="50" pos:column="1">static<pos:position pos:line="50" pos:column="7"/></specifier> <type><name pos:line="50" pos:column="8">void<pos:position pos:line="50" pos:column="12"/></name></type> <name pos:line="50" pos:column="13">log_no_err<pos:position pos:line="50" pos:column="23"/></name><parameter_list pos:line="50" pos:column="23">(<parameter><decl><type><specifier pos:line="50" pos:column="24">const<pos:position pos:line="50" pos:column="29"/></specifier> <name pos:line="50" pos:column="30">char<pos:position pos:line="50" pos:column="34"/></name> <modifier pos:line="50" pos:column="35">*<pos:position pos:line="50" pos:column="36"/></modifier></type><name pos:line="50" pos:column="36">fmt<pos:position pos:line="50" pos:column="39"/></name></decl></parameter>,<parameter><decl><type><modifier pos:line="50" pos:column="40">...<pos:position pos:line="50" pos:column="43"/></modifier></type></decl></parameter>)<pos:position pos:line="50" pos:column="44"/></parameter_list>
<block pos:line="51" pos:column="1">{
<cpp:ifdef pos:line="52" pos:column="1">#<cpp:directive pos:line="52" pos:column="2">ifdef<pos:position pos:line="52" pos:column="7"/></cpp:directive> <name pos:line="52" pos:column="8">AP_LOG_EXEC<pos:position pos:line="52" pos:column="19"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name pos:line="53" pos:column="5">va_list<pos:position pos:line="53" pos:column="12"/></name></type> <name pos:line="53" pos:column="13">ap<pos:position pos:line="53" pos:column="15"/></name></decl>;<pos:position pos:line="53" pos:column="16"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="55" pos:column="5">va_start<pos:position pos:line="55" pos:column="13"/></name><argument_list pos:line="55" pos:column="13">(<argument><expr><name pos:line="55" pos:column="14">ap<pos:position pos:line="55" pos:column="16"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="18">fmt<pos:position pos:line="55" pos:column="21"/></name></expr></argument>)<pos:position pos:line="55" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="56" pos:column="5">err_output<pos:position pos:line="56" pos:column="15"/></name><argument_list pos:line="56" pos:column="15">(<argument><expr><literal type="number" pos:line="56" pos:column="16">0<pos:position pos:line="56" pos:column="17"/></literal></expr></argument>, <argument><expr><name pos:line="56" pos:column="19">fmt<pos:position pos:line="56" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="24">ap<pos:position pos:line="56" pos:column="26"/></name></expr></argument>)<pos:position pos:line="56" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="28"/></expr_stmt> <comment type="block" pos:line="56" pos:column="29">/* 0 == !is_error */</comment>
    <expr_stmt><expr><call><name pos:line="57" pos:column="5">va_end<pos:position pos:line="57" pos:column="11"/></name><argument_list pos:line="57" pos:column="11">(<argument><expr><name pos:line="57" pos:column="12">ap<pos:position pos:line="57" pos:column="14"/></name></expr></argument>)<pos:position pos:line="57" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="58" pos:column="1">#<cpp:directive pos:line="58" pos:column="2">endif<pos:position pos:line="58" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="58" pos:column="8">/* AP_LOG_EXEC */</comment>
    <return pos:line="59" pos:column="5">return;<pos:position pos:line="59" pos:column="12"/></return>
}<pos:position pos:line="60" pos:column="2"/></block></function>

<function><specifier pos:line="62" pos:column="1">static<pos:position pos:line="62" pos:column="7"/></specifier> <type><name pos:line="62" pos:column="8">void<pos:position pos:line="62" pos:column="12"/></name></type> <name pos:line="62" pos:column="13">clean_env<pos:position pos:line="62" pos:column="22"/></name><parameter_list pos:line="62" pos:column="22">(<parameter><decl><type><name pos:line="62" pos:column="23">void<pos:position pos:line="62" pos:column="27"/></name></type></decl></parameter>)<pos:position pos:line="62" pos:column="28"/></parameter_list>
<block pos:line="63" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="64" pos:column="5">char<pos:position pos:line="64" pos:column="9"/></name></type> <name><name pos:line="64" pos:column="10">pathbuf<pos:position pos:line="64" pos:column="17"/></name><index pos:line="64" pos:column="17">[<expr><literal type="number" pos:line="64" pos:column="18">512<pos:position pos:line="64" pos:column="21"/></literal></expr>]<pos:position pos:line="64" pos:column="22"/></index></name></decl>;<pos:position pos:line="64" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="65" pos:column="5">char<pos:position pos:line="65" pos:column="9"/></name> <modifier pos:line="65" pos:column="10">*<pos:position pos:line="65" pos:column="11"/></modifier><modifier pos:line="65" pos:column="11">*<pos:position pos:line="65" pos:column="12"/></modifier></type><name pos:line="65" pos:column="12">cleanenv<pos:position pos:line="65" pos:column="20"/></name></decl>;<pos:position pos:line="65" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="66" pos:column="5">char<pos:position pos:line="66" pos:column="9"/></name> <modifier pos:line="66" pos:column="10">*<pos:position pos:line="66" pos:column="11"/></modifier><modifier pos:line="66" pos:column="11">*<pos:position pos:line="66" pos:column="12"/></modifier></type><name pos:line="66" pos:column="12">ep<pos:position pos:line="66" pos:column="14"/></name></decl>;<pos:position pos:line="66" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="67" pos:column="5">int<pos:position pos:line="67" pos:column="8"/></name></type> <name pos:line="67" pos:column="9">cidx<pos:position pos:line="67" pos:column="13"/></name> <init pos:line="67" pos:column="14">= <expr><literal type="number" pos:line="67" pos:column="16">0<pos:position pos:line="67" pos:column="17"/></literal></expr></init></decl>;<pos:position pos:line="67" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="68" pos:column="5">int<pos:position pos:line="68" pos:column="8"/></name></type> <name pos:line="68" pos:column="9">idx<pos:position pos:line="68" pos:column="12"/></name></decl>;<pos:position pos:line="68" pos:column="13"/></decl_stmt>

    <comment type="block" pos:line="70" pos:column="5">/* While cleaning the environment, the environment should be clean.
     * (e.g. malloc() may get the name of a file for writing debugging info.
     * Bad news if MALLOC_DEBUG_FILE is set to /etc/passwd.  Sprintf() may be
     * susceptible to bad locale settings....)
     * (from PR 2790)
     */</comment>
    <decl_stmt><decl><type><name pos:line="76" pos:column="5">char<pos:position pos:line="76" pos:column="9"/></name> <modifier pos:line="76" pos:column="10">*<pos:position pos:line="76" pos:column="11"/></modifier><modifier pos:line="76" pos:column="11">*<pos:position pos:line="76" pos:column="12"/></modifier></type><name pos:line="76" pos:column="12">envp<pos:position pos:line="76" pos:column="16"/></name> <init pos:line="76" pos:column="17">= <expr><name pos:line="76" pos:column="19">environ<pos:position pos:line="76" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="76" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="77" pos:column="5">char<pos:position pos:line="77" pos:column="9"/></name> <modifier pos:line="77" pos:column="10">*<pos:position pos:line="77" pos:column="11"/></modifier></type><name pos:line="77" pos:column="11">empty_ptr<pos:position pos:line="77" pos:column="20"/></name> <init pos:line="77" pos:column="21">= <expr><name pos:line="77" pos:column="23">NULL<pos:position pos:line="77" pos:column="27"/></name></expr></init></decl>;<pos:position pos:line="77" pos:column="28"/></decl_stmt>

    <expr_stmt><expr><name pos:line="79" pos:column="5">environ<pos:position pos:line="79" pos:column="12"/></name> <operator pos:line="79" pos:column="13">=<pos:position pos:line="79" pos:column="14"/></operator> <operator pos:line="79" pos:column="15">&amp;<pos:position pos:line="79" pos:column="20"/></operator><name pos:line="79" pos:column="16">empty_ptr<pos:position pos:line="79" pos:column="25"/></name></expr>;<pos:position pos:line="79" pos:column="26"/></expr_stmt> <comment type="block" pos:line="79" pos:column="27">/* VERY safe environment */</comment>

    <if pos:line="81" pos:column="5">if <condition pos:line="81" pos:column="8">(<expr><operator pos:line="81" pos:column="9">(<pos:position pos:line="81" pos:column="10"/></operator><name pos:line="81" pos:column="10">cleanenv<pos:position pos:line="81" pos:column="18"/></name> <operator pos:line="81" pos:column="19">=<pos:position pos:line="81" pos:column="20"/></operator> <operator pos:line="81" pos:column="21">(<pos:position pos:line="81" pos:column="22"/></operator><name pos:line="81" pos:column="22">char<pos:position pos:line="81" pos:column="26"/></name> <operator pos:line="81" pos:column="27">*<pos:position pos:line="81" pos:column="28"/></operator><operator pos:line="81" pos:column="28">*<pos:position pos:line="81" pos:column="29"/></operator><operator pos:line="81" pos:column="29">)<pos:position pos:line="81" pos:column="30"/></operator> <call><name pos:line="81" pos:column="31">calloc<pos:position pos:line="81" pos:column="37"/></name><argument_list pos:line="81" pos:column="37">(<argument><expr><name pos:line="81" pos:column="38">AP_ENVBUF<pos:position pos:line="81" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="81" pos:column="49">sizeof<argument_list pos:line="81" pos:column="55">(<argument><expr><name pos:line="81" pos:column="56">char<pos:position pos:line="81" pos:column="60"/></name> <operator pos:line="81" pos:column="61">*<pos:position pos:line="81" pos:column="62"/></operator></expr></argument>)<pos:position pos:line="81" pos:column="63"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="81" pos:column="64"/></argument_list></call><operator pos:line="81" pos:column="64">)<pos:position pos:line="81" pos:column="65"/></operator> <operator pos:line="81" pos:column="66">==<pos:position pos:line="81" pos:column="68"/></operator> <name pos:line="81" pos:column="69">NULL<pos:position pos:line="81" pos:column="73"/></name></expr>)<pos:position pos:line="81" pos:column="74"/></condition><then pos:line="81" pos:column="74"> <block pos:line="81" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="82" pos:column="9">log_err<pos:position pos:line="82" pos:column="16"/></name><argument_list pos:line="82" pos:column="16">(<argument><expr><literal type="string" pos:line="82" pos:column="17">"failed to malloc memory for environment\n"<pos:position pos:line="82" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="82" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="82" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">exit<pos:position pos:line="83" pos:column="13"/></name><argument_list pos:line="83" pos:column="13">(<argument><expr><literal type="number" pos:line="83" pos:column="14">123<pos:position pos:line="83" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">sprintf<pos:position pos:line="86" pos:column="12"/></name><argument_list pos:line="86" pos:column="12">(<argument><expr><name pos:line="86" pos:column="13">pathbuf<pos:position pos:line="86" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="86" pos:column="22">"PATH=%s"<pos:position pos:line="86" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="86" pos:column="33">AP_SAFE_PATH<pos:position pos:line="86" pos:column="45"/></name></expr></argument>)<pos:position pos:line="86" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="47"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="87" pos:column="5">cleanenv<pos:position pos:line="87" pos:column="13"/></name><index pos:line="87" pos:column="13">[<expr><name pos:line="87" pos:column="14">cidx<pos:position pos:line="87" pos:column="18"/></name></expr>]<pos:position pos:line="87" pos:column="19"/></index></name> <operator pos:line="87" pos:column="20">=<pos:position pos:line="87" pos:column="21"/></operator> <call><name pos:line="87" pos:column="22">strdup<pos:position pos:line="87" pos:column="28"/></name><argument_list pos:line="87" pos:column="28">(<argument><expr><name pos:line="87" pos:column="29">pathbuf<pos:position pos:line="87" pos:column="36"/></name></expr></argument>)<pos:position pos:line="87" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="38"/></expr_stmt>
    <if pos:line="88" pos:column="5">if <condition pos:line="88" pos:column="8">(<expr><name><name pos:line="88" pos:column="9">cleanenv<pos:position pos:line="88" pos:column="17"/></name><index pos:line="88" pos:column="17">[<expr><name pos:line="88" pos:column="18">cidx<pos:position pos:line="88" pos:column="22"/></name></expr>]<pos:position pos:line="88" pos:column="23"/></index></name> <operator pos:line="88" pos:column="24">==<pos:position pos:line="88" pos:column="26"/></operator> <name pos:line="88" pos:column="27">NULL<pos:position pos:line="88" pos:column="31"/></name></expr>)<pos:position pos:line="88" pos:column="32"/></condition><then pos:line="88" pos:column="32"> <block pos:line="88" pos:column="33">{
        <expr_stmt><expr><call><name pos:line="89" pos:column="9">log_err<pos:position pos:line="89" pos:column="16"/></name><argument_list pos:line="89" pos:column="16">(<argument><expr><literal type="string" pos:line="89" pos:column="17">"failed to malloc memory for environment\n"<pos:position pos:line="89" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="89" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="89" pos:column="62"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="90" pos:column="9">exit<pos:position pos:line="90" pos:column="13"/></name><argument_list pos:line="90" pos:column="13">(<argument><expr><literal type="number" pos:line="90" pos:column="14">124<pos:position pos:line="90" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="90" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="90" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="91" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="92" pos:column="5">cidx<pos:position pos:line="92" pos:column="9"/></name><operator pos:line="92" pos:column="9">++<pos:position pos:line="92" pos:column="11"/></operator></expr>;<pos:position pos:line="92" pos:column="12"/></expr_stmt>

    <for pos:line="94" pos:column="5">for <control pos:line="94" pos:column="9">(<init><expr><name pos:line="94" pos:column="10">ep<pos:position pos:line="94" pos:column="12"/></name> <operator pos:line="94" pos:column="13">=<pos:position pos:line="94" pos:column="14"/></operator> <name pos:line="94" pos:column="15">envp<pos:position pos:line="94" pos:column="19"/></name></expr>;<pos:position pos:line="94" pos:column="20"/></init> <condition><expr><operator pos:line="94" pos:column="21">*<pos:position pos:line="94" pos:column="22"/></operator><name pos:line="94" pos:column="22">ep<pos:position pos:line="94" pos:column="24"/></name> <operator pos:line="94" pos:column="25">&amp;&amp;<pos:position pos:line="94" pos:column="35"/></operator> <name pos:line="94" pos:column="28">cidx<pos:position pos:line="94" pos:column="32"/></name> <operator pos:line="94" pos:column="33">&lt;<pos:position pos:line="94" pos:column="37"/></operator> <name pos:line="94" pos:column="35">AP_ENVBUF<pos:position pos:line="94" pos:column="44"/></name><operator pos:line="94" pos:column="44">-<pos:position pos:line="94" pos:column="45"/></operator><literal type="number" pos:line="94" pos:column="45">1<pos:position pos:line="94" pos:column="46"/></literal></expr>;<pos:position pos:line="94" pos:column="47"/></condition> <incr><expr><name pos:line="94" pos:column="48">ep<pos:position pos:line="94" pos:column="50"/></name><operator pos:line="94" pos:column="50">++<pos:position pos:line="94" pos:column="52"/></operator></expr></incr>)<pos:position pos:line="94" pos:column="53"/></control> <block pos:line="94" pos:column="54">{
        <for pos:line="95" pos:column="9">for <control pos:line="95" pos:column="13">(<init><expr><name pos:line="95" pos:column="14">idx<pos:position pos:line="95" pos:column="17"/></name> <operator pos:line="95" pos:column="18">=<pos:position pos:line="95" pos:column="19"/></operator> <literal type="number" pos:line="95" pos:column="20">0<pos:position pos:line="95" pos:column="21"/></literal></expr>;<pos:position pos:line="95" pos:column="22"/></init> <condition><expr><name><name pos:line="95" pos:column="23">safe_env_lst<pos:position pos:line="95" pos:column="35"/></name><index pos:line="95" pos:column="35">[<expr><name pos:line="95" pos:column="36">idx<pos:position pos:line="95" pos:column="39"/></name></expr>]<pos:position pos:line="95" pos:column="40"/></index></name></expr>;<pos:position pos:line="95" pos:column="41"/></condition> <incr><expr><name pos:line="95" pos:column="42">idx<pos:position pos:line="95" pos:column="45"/></name><operator pos:line="95" pos:column="45">++<pos:position pos:line="95" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="95" pos:column="48"/></control> <block pos:line="95" pos:column="49">{
            <if pos:line="96" pos:column="13">if <condition pos:line="96" pos:column="16">(<expr><operator pos:line="96" pos:column="17">!<pos:position pos:line="96" pos:column="18"/></operator><call><name pos:line="96" pos:column="18">strncmp<pos:position pos:line="96" pos:column="25"/></name><argument_list pos:line="96" pos:column="25">(<argument><expr><operator pos:line="96" pos:column="26">*<pos:position pos:line="96" pos:column="27"/></operator><name pos:line="96" pos:column="27">ep<pos:position pos:line="96" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="96" pos:column="31">safe_env_lst<pos:position pos:line="96" pos:column="43"/></name><index pos:line="96" pos:column="43">[<expr><name pos:line="96" pos:column="44">idx<pos:position pos:line="96" pos:column="47"/></name></expr>]<pos:position pos:line="96" pos:column="48"/></index></name></expr></argument>,
                         <argument><expr><call><name pos:line="97" pos:column="26">strlen<pos:position pos:line="97" pos:column="32"/></name><argument_list pos:line="97" pos:column="32">(<argument><expr><name><name pos:line="97" pos:column="33">safe_env_lst<pos:position pos:line="97" pos:column="45"/></name><index pos:line="97" pos:column="45">[<expr><name pos:line="97" pos:column="46">idx<pos:position pos:line="97" pos:column="49"/></name></expr>]<pos:position pos:line="97" pos:column="50"/></index></name></expr></argument>)<pos:position pos:line="97" pos:column="51"/></argument_list></call></expr></argument>)<pos:position pos:line="97" pos:column="52"/></argument_list></call></expr>)<pos:position pos:line="97" pos:column="53"/></condition><then pos:line="97" pos:column="53"> <block pos:line="97" pos:column="54">{
                <expr_stmt><expr><name><name pos:line="98" pos:column="17">cleanenv<pos:position pos:line="98" pos:column="25"/></name><index pos:line="98" pos:column="25">[<expr><name pos:line="98" pos:column="26">cidx<pos:position pos:line="98" pos:column="30"/></name></expr>]<pos:position pos:line="98" pos:column="31"/></index></name> <operator pos:line="98" pos:column="32">=<pos:position pos:line="98" pos:column="33"/></operator> <operator pos:line="98" pos:column="34">*<pos:position pos:line="98" pos:column="35"/></operator><name pos:line="98" pos:column="35">ep<pos:position pos:line="98" pos:column="37"/></name></expr>;<pos:position pos:line="98" pos:column="38"/></expr_stmt>
                <expr_stmt><expr><name pos:line="99" pos:column="17">cidx<pos:position pos:line="99" pos:column="21"/></name><operator pos:line="99" pos:column="21">++<pos:position pos:line="99" pos:column="23"/></operator></expr>;<pos:position pos:line="99" pos:column="24"/></expr_stmt>
                <break pos:line="100" pos:column="17">break;<pos:position pos:line="100" pos:column="23"/></break>
            }<pos:position pos:line="101" pos:column="14"/></block></then></if>
        }<pos:position pos:line="102" pos:column="10"/></block></for>
    }<pos:position pos:line="103" pos:column="6"/></block></for>

    <expr_stmt><expr><name><name pos:line="105" pos:column="5">cleanenv<pos:position pos:line="105" pos:column="13"/></name><index pos:line="105" pos:column="13">[<expr><name pos:line="105" pos:column="14">cidx<pos:position pos:line="105" pos:column="18"/></name></expr>]<pos:position pos:line="105" pos:column="19"/></index></name> <operator pos:line="105" pos:column="20">=<pos:position pos:line="105" pos:column="21"/></operator> <name pos:line="105" pos:column="22">NULL<pos:position pos:line="105" pos:column="26"/></name></expr>;<pos:position pos:line="105" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><name pos:line="107" pos:column="5">environ<pos:position pos:line="107" pos:column="12"/></name> <operator pos:line="107" pos:column="13">=<pos:position pos:line="107" pos:column="14"/></operator> <name pos:line="107" pos:column="15">cleanenv<pos:position pos:line="107" pos:column="23"/></name></expr>;<pos:position pos:line="107" pos:column="24"/></expr_stmt>
}<pos:position pos:line="108" pos:column="2"/></block></function>

<function><type><name pos:line="110" pos:column="1">int<pos:position pos:line="110" pos:column="4"/></name></type> <name pos:line="110" pos:column="5">main<pos:position pos:line="110" pos:column="9"/></name><parameter_list pos:line="110" pos:column="9">(<parameter><decl><type><name pos:line="110" pos:column="10">int<pos:position pos:line="110" pos:column="13"/></name></type> <name pos:line="110" pos:column="14">argc<pos:position pos:line="110" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><name pos:line="110" pos:column="20">char<pos:position pos:line="110" pos:column="24"/></name> <modifier pos:line="110" pos:column="25">*<pos:position pos:line="110" pos:column="26"/></modifier></type><name><name pos:line="110" pos:column="26">argv<pos:position pos:line="110" pos:column="30"/></name><index pos:line="110" pos:column="30">[]<pos:position pos:line="110" pos:column="32"/></index></name></decl></parameter>)<pos:position pos:line="110" pos:column="33"/></parameter_list>
<block pos:line="111" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="112" pos:column="5">int<pos:position pos:line="112" pos:column="8"/></name></type> <name pos:line="112" pos:column="9">userdir<pos:position pos:line="112" pos:column="16"/></name> <init pos:line="112" pos:column="17">= <expr><literal type="number" pos:line="112" pos:column="19">0<pos:position pos:line="112" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="112" pos:column="21"/></decl_stmt>        <comment type="block" pos:line="112" pos:column="29">/* ~userdir flag             */</comment>
    <decl_stmt><decl><type><name pos:line="113" pos:column="5">uid_t<pos:position pos:line="113" pos:column="10"/></name></type> <name pos:line="113" pos:column="11">uid<pos:position pos:line="113" pos:column="14"/></name></decl>;<pos:position pos:line="113" pos:column="15"/></decl_stmt>              <comment type="block" pos:line="113" pos:column="29">/* user information          */</comment>
    <decl_stmt><decl><type><name pos:line="114" pos:column="5">gid_t<pos:position pos:line="114" pos:column="10"/></name></type> <name pos:line="114" pos:column="11">gid<pos:position pos:line="114" pos:column="14"/></name></decl>;<pos:position pos:line="114" pos:column="15"/></decl_stmt>              <comment type="block" pos:line="114" pos:column="29">/* target group placeholder  */</comment>
    <decl_stmt><decl><type><name pos:line="115" pos:column="5">char<pos:position pos:line="115" pos:column="9"/></name> <modifier pos:line="115" pos:column="10">*<pos:position pos:line="115" pos:column="11"/></modifier></type><name pos:line="115" pos:column="11">target_uname<pos:position pos:line="115" pos:column="23"/></name></decl>;<pos:position pos:line="115" pos:column="24"/></decl_stmt>     <comment type="block" pos:line="115" pos:column="29">/* target user name          */</comment>
    <decl_stmt><decl><type><name pos:line="116" pos:column="5">char<pos:position pos:line="116" pos:column="9"/></name> <modifier pos:line="116" pos:column="10">*<pos:position pos:line="116" pos:column="11"/></modifier></type><name pos:line="116" pos:column="11">target_gname<pos:position pos:line="116" pos:column="23"/></name></decl>;<pos:position pos:line="116" pos:column="24"/></decl_stmt>     <comment type="block" pos:line="116" pos:column="29">/* target group name         */</comment>
    <decl_stmt><decl><type><name pos:line="117" pos:column="5">char<pos:position pos:line="117" pos:column="9"/></name> <modifier pos:line="117" pos:column="10">*<pos:position pos:line="117" pos:column="11"/></modifier></type><name pos:line="117" pos:column="11">target_homedir<pos:position pos:line="117" pos:column="25"/></name></decl>;<pos:position pos:line="117" pos:column="26"/></decl_stmt>   <comment type="block" pos:line="117" pos:column="29">/* target home directory     */</comment>
    <decl_stmt><decl><type><name pos:line="118" pos:column="5">char<pos:position pos:line="118" pos:column="9"/></name> <modifier pos:line="118" pos:column="10">*<pos:position pos:line="118" pos:column="11"/></modifier></type><name pos:line="118" pos:column="11">actual_uname<pos:position pos:line="118" pos:column="23"/></name></decl>;<pos:position pos:line="118" pos:column="24"/></decl_stmt>     <comment type="block" pos:line="118" pos:column="29">/* actual user name          */</comment>
    <decl_stmt><decl><type><name pos:line="119" pos:column="5">char<pos:position pos:line="119" pos:column="9"/></name> <modifier pos:line="119" pos:column="10">*<pos:position pos:line="119" pos:column="11"/></modifier></type><name pos:line="119" pos:column="11">actual_gname<pos:position pos:line="119" pos:column="23"/></name></decl>;<pos:position pos:line="119" pos:column="24"/></decl_stmt>     <comment type="block" pos:line="119" pos:column="29">/* actual group name         */</comment>
    <decl_stmt><decl><type><name pos:line="120" pos:column="5">char<pos:position pos:line="120" pos:column="9"/></name> <modifier pos:line="120" pos:column="10">*<pos:position pos:line="120" pos:column="11"/></modifier></type><name pos:line="120" pos:column="11">cmd<pos:position pos:line="120" pos:column="14"/></name></decl>;<pos:position pos:line="120" pos:column="15"/></decl_stmt>              <comment type="block" pos:line="120" pos:column="29">/* command to be executed    */</comment>
    <decl_stmt><decl><type><name pos:line="121" pos:column="5">char<pos:position pos:line="121" pos:column="9"/></name></type> <name><name pos:line="121" pos:column="10">cwd<pos:position pos:line="121" pos:column="13"/></name><index pos:line="121" pos:column="13">[<expr><name pos:line="121" pos:column="14">AP_MAXPATH<pos:position pos:line="121" pos:column="24"/></name></expr>]<pos:position pos:line="121" pos:column="25"/></index></name></decl>;<pos:position pos:line="121" pos:column="26"/></decl_stmt>   <comment type="block" pos:line="121" pos:column="29">/* current working directory */</comment>
    <decl_stmt><decl><type><name pos:line="122" pos:column="5">char<pos:position pos:line="122" pos:column="9"/></name></type> <name><name pos:line="122" pos:column="10">dwd<pos:position pos:line="122" pos:column="13"/></name><index pos:line="122" pos:column="13">[<expr><name pos:line="122" pos:column="14">AP_MAXPATH<pos:position pos:line="122" pos:column="24"/></name></expr>]<pos:position pos:line="122" pos:column="25"/></index></name></decl>;<pos:position pos:line="122" pos:column="26"/></decl_stmt>   <comment type="block" pos:line="122" pos:column="29">/* docroot working directory */</comment>
    <decl_stmt><decl><type><name><name pos:line="123" pos:column="5">struct<pos:position pos:line="123" pos:column="11"/></name> <name pos:line="123" pos:column="12">passwd<pos:position pos:line="123" pos:column="18"/></name></name> <modifier pos:line="123" pos:column="19">*<pos:position pos:line="123" pos:column="20"/></modifier></type><name pos:line="123" pos:column="20">pw<pos:position pos:line="123" pos:column="22"/></name></decl>;<pos:position pos:line="123" pos:column="23"/></decl_stmt>      <comment type="block" pos:line="123" pos:column="29">/* password entry holder     */</comment>
    <decl_stmt><decl><type><name><name pos:line="124" pos:column="5">struct<pos:position pos:line="124" pos:column="11"/></name> <name pos:line="124" pos:column="12">group<pos:position pos:line="124" pos:column="17"/></name></name> <modifier pos:line="124" pos:column="18">*<pos:position pos:line="124" pos:column="19"/></modifier></type><name pos:line="124" pos:column="19">gr<pos:position pos:line="124" pos:column="21"/></name></decl>;<pos:position pos:line="124" pos:column="22"/></decl_stmt>       <comment type="block" pos:line="124" pos:column="29">/* group entry holder        */</comment>
    <decl_stmt><decl><type><name><name pos:line="125" pos:column="5">struct<pos:position pos:line="125" pos:column="11"/></name> <name pos:line="125" pos:column="12">stat<pos:position pos:line="125" pos:column="16"/></name></name></type> <name pos:line="125" pos:column="17">dir_info<pos:position pos:line="125" pos:column="25"/></name></decl>;<pos:position pos:line="125" pos:column="26"/></decl_stmt>   <comment type="block" pos:line="125" pos:column="29">/* directory info holder     */</comment>
    <decl_stmt><decl><type><name><name pos:line="126" pos:column="5">struct<pos:position pos:line="126" pos:column="11"/></name> <name pos:line="126" pos:column="12">stat<pos:position pos:line="126" pos:column="16"/></name></name></type> <name pos:line="126" pos:column="17">prg_info<pos:position pos:line="126" pos:column="25"/></name></decl>;<pos:position pos:line="126" pos:column="26"/></decl_stmt>   <comment type="block" pos:line="126" pos:column="29">/* program info holder       */</comment>

    <comment type="block" pos:line="128" pos:column="5">/*
     * Start with a "clean" environment
     */</comment>
    <expr_stmt><expr><call><name pos:line="131" pos:column="5">clean_env<pos:position pos:line="131" pos:column="14"/></name><argument_list pos:line="131" pos:column="14">()<pos:position pos:line="131" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="17"/></expr_stmt>

    <comment type="block" pos:line="133" pos:column="5">/*
     * Check existence/validity of the UID of the user
     * running this program.  Error out if invalid.
     */</comment>
    <expr_stmt><expr><name pos:line="137" pos:column="5">uid<pos:position pos:line="137" pos:column="8"/></name> <operator pos:line="137" pos:column="9">=<pos:position pos:line="137" pos:column="10"/></operator> <call><name pos:line="137" pos:column="11">getuid<pos:position pos:line="137" pos:column="17"/></name><argument_list pos:line="137" pos:column="17">()<pos:position pos:line="137" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="20"/></expr_stmt>
    <if pos:line="138" pos:column="5">if <condition pos:line="138" pos:column="8">(<expr><operator pos:line="138" pos:column="9">(<pos:position pos:line="138" pos:column="10"/></operator><name pos:line="138" pos:column="10">pw<pos:position pos:line="138" pos:column="12"/></name> <operator pos:line="138" pos:column="13">=<pos:position pos:line="138" pos:column="14"/></operator> <call><name pos:line="138" pos:column="15">getpwuid<pos:position pos:line="138" pos:column="23"/></name><argument_list pos:line="138" pos:column="23">(<argument><expr><name pos:line="138" pos:column="24">uid<pos:position pos:line="138" pos:column="27"/></name></expr></argument>)<pos:position pos:line="138" pos:column="28"/></argument_list></call><operator pos:line="138" pos:column="28">)<pos:position pos:line="138" pos:column="29"/></operator> <operator pos:line="138" pos:column="30">==<pos:position pos:line="138" pos:column="32"/></operator> <name pos:line="138" pos:column="33">NULL<pos:position pos:line="138" pos:column="37"/></name></expr>)<pos:position pos:line="138" pos:column="38"/></condition><then pos:line="138" pos:column="38"> <block pos:line="138" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="139" pos:column="9">log_err<pos:position pos:line="139" pos:column="16"/></name><argument_list pos:line="139" pos:column="16">(<argument><expr><literal type="string" pos:line="139" pos:column="17">"crit: invalid uid: (%lu)\n"<pos:position pos:line="139" pos:column="45"/></literal></expr></argument>, <argument><expr><operator pos:line="139" pos:column="47">(<pos:position pos:line="139" pos:column="48"/></operator><name pos:line="139" pos:column="48">unsigned<pos:position pos:line="139" pos:column="56"/></name> <name pos:line="139" pos:column="57">long<pos:position pos:line="139" pos:column="61"/></name><operator pos:line="139" pos:column="61">)<pos:position pos:line="139" pos:column="62"/></operator><name pos:line="139" pos:column="62">uid<pos:position pos:line="139" pos:column="65"/></name></expr></argument>)<pos:position pos:line="139" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="67"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="140" pos:column="9">exit<pos:position pos:line="140" pos:column="13"/></name><argument_list pos:line="140" pos:column="13">(<argument><expr><literal type="number" pos:line="140" pos:column="14">102<pos:position pos:line="140" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="140" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="140" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="141" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="142" pos:column="5">/*
     * See if this is a 'how were you compiled' request, and
     * comply if so.
     */</comment>
    <if pos:line="146" pos:column="5">if <condition pos:line="146" pos:column="8">(<expr><operator pos:line="146" pos:column="9">(<pos:position pos:line="146" pos:column="10"/></operator><name pos:line="146" pos:column="10">argc<pos:position pos:line="146" pos:column="14"/></name> <operator pos:line="146" pos:column="15">&gt;<pos:position pos:line="146" pos:column="19"/></operator> <literal type="number" pos:line="146" pos:column="17">1<pos:position pos:line="146" pos:column="18"/></literal><operator pos:line="146" pos:column="18">)<pos:position pos:line="146" pos:column="19"/></operator>
        <operator pos:line="147" pos:column="9">&amp;&amp;<pos:position pos:line="147" pos:column="19"/></operator> <operator pos:line="147" pos:column="12">(<pos:position pos:line="147" pos:column="13"/></operator><operator pos:line="147" pos:column="13">!<pos:position pos:line="147" pos:column="14"/></operator> <call><name pos:line="147" pos:column="15">strcmp<pos:position pos:line="147" pos:column="21"/></name><argument_list pos:line="147" pos:column="21">(<argument><expr><name><name pos:line="147" pos:column="22">argv<pos:position pos:line="147" pos:column="26"/></name><index pos:line="147" pos:column="26">[<expr><literal type="number" pos:line="147" pos:column="27">1<pos:position pos:line="147" pos:column="28"/></literal></expr>]<pos:position pos:line="147" pos:column="29"/></index></name></expr></argument>, <argument><expr><literal type="string" pos:line="147" pos:column="31">"-V"<pos:position pos:line="147" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="147" pos:column="36"/></argument_list></call><operator pos:line="147" pos:column="36">)<pos:position pos:line="147" pos:column="37"/></operator>
        <operator pos:line="148" pos:column="9">&amp;&amp;<pos:position pos:line="148" pos:column="19"/></operator> <operator pos:line="148" pos:column="12">(<pos:position pos:line="148" pos:column="13"/></operator><operator pos:line="148" pos:column="13">(<pos:position pos:line="148" pos:column="14"/></operator><name pos:line="148" pos:column="14">uid<pos:position pos:line="148" pos:column="17"/></name> <operator pos:line="148" pos:column="18">==<pos:position pos:line="148" pos:column="20"/></operator> <literal type="number" pos:line="148" pos:column="21">0<pos:position pos:line="148" pos:column="22"/></literal><operator pos:line="148" pos:column="22">)<pos:position pos:line="148" pos:column="23"/></operator>
<cpp:ifdef pos:line="149" pos:column="1">#<cpp:directive pos:line="149" pos:column="2">ifdef<pos:position pos:line="149" pos:column="7"/></cpp:directive> <name pos:line="149" pos:column="8">_OSD_POSIX<pos:position pos:line="149" pos:column="18"/></name></cpp:ifdef>
        <comment type="block" pos:line="150" pos:column="9">/* User name comparisons are case insensitive on BS2000/OSD */</comment>
            <operator pos:line="151" pos:column="13">||<pos:position pos:line="151" pos:column="15"/></operator> <operator pos:line="151" pos:column="16">(<pos:position pos:line="151" pos:column="17"/></operator><operator pos:line="151" pos:column="17">!<pos:position pos:line="151" pos:column="18"/></operator> <call><name pos:line="151" pos:column="19">strcasecmp<pos:position pos:line="151" pos:column="29"/></name><argument_list pos:line="151" pos:column="29">(<argument><expr><name pos:line="151" pos:column="30">AP_HTTPD_USER<pos:position pos:line="151" pos:column="43"/></name></expr></argument>, <argument><expr><name><name pos:line="151" pos:column="45">pw<pos:position pos:line="151" pos:column="47"/></name><operator pos:line="151" pos:column="47">-&gt;<pos:position pos:line="151" pos:column="52"/></operator><name pos:line="151" pos:column="49">pw_name<pos:position pos:line="151" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="151" pos:column="57"/></argument_list></call><operator pos:line="151" pos:column="57">)<pos:position pos:line="151" pos:column="58"/></operator><operator pos:line="151" pos:column="58">)<pos:position pos:line="151" pos:column="59"/></operator>
<cpp:else pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">else<pos:position pos:line="152" pos:column="6"/></cpp:directive></cpp:else>  <comment type="block" pos:line="152" pos:column="8">/* _OSD_POSIX */</comment>
            <operator pos:line="153" pos:column="13">||<pos:position pos:line="153" pos:column="15"/></operator> <operator pos:line="153" pos:column="16">(<pos:position pos:line="153" pos:column="17"/></operator><operator pos:line="153" pos:column="17">!<pos:position pos:line="153" pos:column="18"/></operator> <call><name pos:line="153" pos:column="19">strcmp<pos:position pos:line="153" pos:column="25"/></name><argument_list pos:line="153" pos:column="25">(<argument><expr><name pos:line="153" pos:column="26">AP_HTTPD_USER<pos:position pos:line="153" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="153" pos:column="41">pw<pos:position pos:line="153" pos:column="43"/></name><operator pos:line="153" pos:column="43">-&gt;<pos:position pos:line="153" pos:column="48"/></operator><name pos:line="153" pos:column="45">pw_name<pos:position pos:line="153" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="153" pos:column="53"/></argument_list></call><operator pos:line="153" pos:column="53">)<pos:position pos:line="153" pos:column="54"/></operator></expr>)<pos:position pos:line="153" pos:column="55"/></condition><then pos:line="153" pos:column="55">
<cpp:endif pos:line="154" pos:column="1">#<cpp:directive pos:line="154" pos:column="2">endif<pos:position pos:line="154" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="154" pos:column="8">/* _OSD_POSIX */</comment>
        <block type="pseudo"><pos:position pos:line="155" pos:column="9"/></block></then></if>)<pos:position pos:line="155" pos:column="10"/></block> <block pos:line="155" pos:column="11">{
<cpp:ifdef pos:line="156" pos:column="1">#<cpp:directive pos:line="156" pos:column="2">ifdef<pos:position pos:line="156" pos:column="7"/></cpp:directive> <name pos:line="156" pos:column="8">AP_DOC_ROOT<pos:position pos:line="156" pos:column="19"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="157" pos:column="9">fprintf<pos:position pos:line="157" pos:column="16"/></name><argument_list pos:line="157" pos:column="16">(<argument><expr><name pos:line="157" pos:column="17">stderr<pos:position pos:line="157" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="157" pos:column="25">" -D AP_DOC_ROOT=\"%s\"\n"<pos:position pos:line="157" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="157" pos:column="53">AP_DOC_ROOT<pos:position pos:line="157" pos:column="64"/></name></expr></argument>)<pos:position pos:line="157" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="157" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="158" pos:column="1">#<cpp:directive pos:line="158" pos:column="2">endif<pos:position pos:line="158" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="159" pos:column="1">#<cpp:directive pos:line="159" pos:column="2">ifdef<pos:position pos:line="159" pos:column="7"/></cpp:directive> <name pos:line="159" pos:column="8">AP_GID_MIN<pos:position pos:line="159" pos:column="18"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="160" pos:column="9">fprintf<pos:position pos:line="160" pos:column="16"/></name><argument_list pos:line="160" pos:column="16">(<argument><expr><name pos:line="160" pos:column="17">stderr<pos:position pos:line="160" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="160" pos:column="25">" -D AP_GID_MIN=%d\n"<pos:position pos:line="160" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="160" pos:column="48">AP_GID_MIN<pos:position pos:line="160" pos:column="58"/></name></expr></argument>)<pos:position pos:line="160" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="160" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="161" pos:column="1">#<cpp:directive pos:line="161" pos:column="2">endif<pos:position pos:line="161" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="162" pos:column="1">#<cpp:directive pos:line="162" pos:column="2">ifdef<pos:position pos:line="162" pos:column="7"/></cpp:directive> <name pos:line="162" pos:column="8">AP_HTTPD_USER<pos:position pos:line="162" pos:column="21"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="163" pos:column="9">fprintf<pos:position pos:line="163" pos:column="16"/></name><argument_list pos:line="163" pos:column="16">(<argument><expr><name pos:line="163" pos:column="17">stderr<pos:position pos:line="163" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="163" pos:column="25">" -D AP_HTTPD_USER=\"%s\"\n"<pos:position pos:line="163" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="163" pos:column="55">AP_HTTPD_USER<pos:position pos:line="163" pos:column="68"/></name></expr></argument>)<pos:position pos:line="163" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="163" pos:column="70"/></expr_stmt>
<cpp:endif pos:line="164" pos:column="1">#<cpp:directive pos:line="164" pos:column="2">endif<pos:position pos:line="164" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="165" pos:column="1">#<cpp:directive pos:line="165" pos:column="2">ifdef<pos:position pos:line="165" pos:column="7"/></cpp:directive> <name pos:line="165" pos:column="8">AP_LOG_EXEC<pos:position pos:line="165" pos:column="19"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="166" pos:column="9">fprintf<pos:position pos:line="166" pos:column="16"/></name><argument_list pos:line="166" pos:column="16">(<argument><expr><name pos:line="166" pos:column="17">stderr<pos:position pos:line="166" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="166" pos:column="25">" -D AP_LOG_EXEC=\"%s\"\n"<pos:position pos:line="166" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="166" pos:column="53">AP_LOG_EXEC<pos:position pos:line="166" pos:column="64"/></name></expr></argument>)<pos:position pos:line="166" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="166" pos:column="66"/></expr_stmt>
<cpp:endif pos:line="167" pos:column="1">#<cpp:directive pos:line="167" pos:column="2">endif<pos:position pos:line="167" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="168" pos:column="1">#<cpp:directive pos:line="168" pos:column="2">ifdef<pos:position pos:line="168" pos:column="7"/></cpp:directive> <name pos:line="168" pos:column="8">AP_SAFE_PATH<pos:position pos:line="168" pos:column="20"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="169" pos:column="9">fprintf<pos:position pos:line="169" pos:column="16"/></name><argument_list pos:line="169" pos:column="16">(<argument><expr><name pos:line="169" pos:column="17">stderr<pos:position pos:line="169" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="169" pos:column="25">" -D AP_SAFE_PATH=\"%s\"\n"<pos:position pos:line="169" pos:column="52"/></literal></expr></argument>, <argument><expr><name pos:line="169" pos:column="54">AP_SAFE_PATH<pos:position pos:line="169" pos:column="66"/></name></expr></argument>)<pos:position pos:line="169" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="169" pos:column="68"/></expr_stmt>
<cpp:endif pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">endif<pos:position pos:line="170" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="171" pos:column="1">#<cpp:directive pos:line="171" pos:column="2">ifdef<pos:position pos:line="171" pos:column="7"/></cpp:directive> <name pos:line="171" pos:column="8">AP_SUEXEC_UMASK<pos:position pos:line="171" pos:column="23"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="172" pos:column="9">fprintf<pos:position pos:line="172" pos:column="16"/></name><argument_list pos:line="172" pos:column="16">(<argument><expr><name pos:line="172" pos:column="17">stderr<pos:position pos:line="172" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="172" pos:column="25">" -D AP_SUEXEC_UMASK=%03o\n"<pos:position pos:line="172" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="172" pos:column="55">AP_SUEXEC_UMASK<pos:position pos:line="172" pos:column="70"/></name></expr></argument>)<pos:position pos:line="172" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="172" pos:column="72"/></expr_stmt>
<cpp:endif pos:line="173" pos:column="1">#<cpp:directive pos:line="173" pos:column="2">endif<pos:position pos:line="173" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="174" pos:column="1">#<cpp:directive pos:line="174" pos:column="2">ifdef<pos:position pos:line="174" pos:column="7"/></cpp:directive> <name pos:line="174" pos:column="8">AP_UID_MIN<pos:position pos:line="174" pos:column="18"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="175" pos:column="9">fprintf<pos:position pos:line="175" pos:column="16"/></name><argument_list pos:line="175" pos:column="16">(<argument><expr><name pos:line="175" pos:column="17">stderr<pos:position pos:line="175" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="175" pos:column="25">" -D AP_UID_MIN=%d\n"<pos:position pos:line="175" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="175" pos:column="48">AP_UID_MIN<pos:position pos:line="175" pos:column="58"/></name></expr></argument>)<pos:position pos:line="175" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="60"/></expr_stmt>
<cpp:endif pos:line="176" pos:column="1">#<cpp:directive pos:line="176" pos:column="2">endif<pos:position pos:line="176" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:ifdef pos:line="177" pos:column="1">#<cpp:directive pos:line="177" pos:column="2">ifdef<pos:position pos:line="177" pos:column="7"/></cpp:directive> <name pos:line="177" pos:column="8">AP_USERDIR_SUFFIX<pos:position pos:line="177" pos:column="25"/></name></cpp:ifdef>
        <expr_stmt><expr><call><name pos:line="178" pos:column="9">fprintf<pos:position pos:line="178" pos:column="16"/></name><argument_list pos:line="178" pos:column="16">(<argument><expr><name pos:line="178" pos:column="17">stderr<pos:position pos:line="178" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="178" pos:column="25">" -D AP_USERDIR_SUFFIX=\"%s\"\n"<pos:position pos:line="178" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="178" pos:column="59">AP_USERDIR_SUFFIX<pos:position pos:line="178" pos:column="76"/></name></expr></argument>)<pos:position pos:line="178" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="178" pos:column="78"/></expr_stmt>
<cpp:endif pos:line="179" pos:column="1">#<cpp:directive pos:line="179" pos:column="2">endif<pos:position pos:line="179" pos:column="7"/></cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name pos:line="180" pos:column="9">exit<pos:position pos:line="180" pos:column="13"/></name><argument_list pos:line="180" pos:column="13">(<argument><expr><literal type="number" pos:line="180" pos:column="14">0<pos:position pos:line="180" pos:column="15"/></literal></expr></argument>)<pos:position pos:line="180" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="180" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="181" pos:column="6"/></block></function>
    <comment type="block" pos:line="182" pos:column="5">/*
     * If there are a proper number of arguments, set
     * all of them to variables.  Otherwise, error out.
     */</comment>
    <if pos:line="186" pos:column="5">if <condition pos:line="186" pos:column="8">(<expr><name pos:line="186" pos:column="9">argc<pos:position pos:line="186" pos:column="13"/></name> <operator pos:line="186" pos:column="14">&lt;<pos:position pos:line="186" pos:column="18"/></operator> <literal type="number" pos:line="186" pos:column="16">4<pos:position pos:line="186" pos:column="17"/></literal></expr>)<pos:position pos:line="186" pos:column="18"/></condition><then pos:line="186" pos:column="18"> <block pos:line="186" pos:column="19">{
        <expr_stmt><expr><call><name pos:line="187" pos:column="9">log_err<pos:position pos:line="187" pos:column="16"/></name><argument_list pos:line="187" pos:column="16">(<argument><expr><literal type="string" pos:line="187" pos:column="17">"too few arguments\n"<pos:position pos:line="187" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="187" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="188" pos:column="9">exit<pos:position pos:line="188" pos:column="13"/></name><argument_list pos:line="188" pos:column="13">(<argument><expr><literal type="number" pos:line="188" pos:column="14">101<pos:position pos:line="188" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="188" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="188" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="189" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="190" pos:column="5">target_uname<pos:position pos:line="190" pos:column="17"/></name> <operator pos:line="190" pos:column="18">=<pos:position pos:line="190" pos:column="19"/></operator> <name><name pos:line="190" pos:column="20">argv<pos:position pos:line="190" pos:column="24"/></name><index pos:line="190" pos:column="24">[<expr><literal type="number" pos:line="190" pos:column="25">1<pos:position pos:line="190" pos:column="26"/></literal></expr>]<pos:position pos:line="190" pos:column="27"/></index></name></expr>;<pos:position pos:line="190" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="191" pos:column="5">target_gname<pos:position pos:line="191" pos:column="17"/></name> <operator pos:line="191" pos:column="18">=<pos:position pos:line="191" pos:column="19"/></operator> <name><name pos:line="191" pos:column="20">argv<pos:position pos:line="191" pos:column="24"/></name><index pos:line="191" pos:column="24">[<expr><literal type="number" pos:line="191" pos:column="25">2<pos:position pos:line="191" pos:column="26"/></literal></expr>]<pos:position pos:line="191" pos:column="27"/></index></name></expr>;<pos:position pos:line="191" pos:column="28"/></expr_stmt>
    <expr_stmt><expr><name pos:line="192" pos:column="5">cmd<pos:position pos:line="192" pos:column="8"/></name> <operator pos:line="192" pos:column="9">=<pos:position pos:line="192" pos:column="10"/></operator> <name><name pos:line="192" pos:column="11">argv<pos:position pos:line="192" pos:column="15"/></name><index pos:line="192" pos:column="15">[<expr><literal type="number" pos:line="192" pos:column="16">3<pos:position pos:line="192" pos:column="17"/></literal></expr>]<pos:position pos:line="192" pos:column="18"/></index></name></expr>;<pos:position pos:line="192" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="194" pos:column="5">/*
     * Check to see if the user running this program
     * is the user allowed to do so as defined in
     * suexec.h.  If not the allowed user, error out.
     */</comment>
<cpp:ifdef pos:line="199" pos:column="1">#<cpp:directive pos:line="199" pos:column="2">ifdef<pos:position pos:line="199" pos:column="7"/></cpp:directive> <name pos:line="199" pos:column="8">_OSD_POSIX<pos:position pos:line="199" pos:column="18"/></name></cpp:ifdef>
    <comment type="block" pos:line="200" pos:column="5">/* User name comparisons are case insensitive on BS2000/OSD */</comment>
    <if pos:line="201" pos:column="5">if <condition pos:line="201" pos:column="8">(<expr><call><name pos:line="201" pos:column="9">strcasecmp<pos:position pos:line="201" pos:column="19"/></name><argument_list pos:line="201" pos:column="19">(<argument><expr><name pos:line="201" pos:column="20">AP_HTTPD_USER<pos:position pos:line="201" pos:column="33"/></name></expr></argument>, <argument><expr><name><name pos:line="201" pos:column="35">pw<pos:position pos:line="201" pos:column="37"/></name><operator pos:line="201" pos:column="37">-&gt;<pos:position pos:line="201" pos:column="42"/></operator><name pos:line="201" pos:column="39">pw_name<pos:position pos:line="201" pos:column="46"/></name></name></expr></argument>)<pos:position pos:line="201" pos:column="47"/></argument_list></call></expr>)<pos:position pos:line="201" pos:column="48"/></condition><then pos:line="201" pos:column="48"> <block pos:line="201" pos:column="49">{
        <expr_stmt><expr><call><name pos:line="202" pos:column="9">log_err<pos:position pos:line="202" pos:column="16"/></name><argument_list pos:line="202" pos:column="16">(<argument><expr><literal type="string" pos:line="202" pos:column="17">"user mismatch (%s instead of %s)\n"<pos:position pos:line="202" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="202" pos:column="55">pw<pos:position pos:line="202" pos:column="57"/></name><operator pos:line="202" pos:column="57">-&gt;<pos:position pos:line="202" pos:column="62"/></operator><name pos:line="202" pos:column="59">pw_name<pos:position pos:line="202" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="202" pos:column="68">AP_HTTPD_USER<pos:position pos:line="202" pos:column="81"/></name></expr></argument>)<pos:position pos:line="202" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="203" pos:column="9">exit<pos:position pos:line="203" pos:column="13"/></name><argument_list pos:line="203" pos:column="13">(<argument><expr><literal type="number" pos:line="203" pos:column="14">103<pos:position pos:line="203" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="203" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="203" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="204" pos:column="6"/></block></then></if>
<cpp:else pos:line="205" pos:column="1">#<cpp:directive pos:line="205" pos:column="2">else<pos:position pos:line="205" pos:column="6"/></cpp:directive></cpp:else>  <comment type="block" pos:line="205" pos:column="8">/*_OSD_POSIX*/</comment>
    <if pos:line="206" pos:column="5">if <condition pos:line="206" pos:column="8">(<expr><call><name pos:line="206" pos:column="9">strcmp<pos:position pos:line="206" pos:column="15"/></name><argument_list pos:line="206" pos:column="15">(<argument><expr><name pos:line="206" pos:column="16">AP_HTTPD_USER<pos:position pos:line="206" pos:column="29"/></name></expr></argument>, <argument><expr><name><name pos:line="206" pos:column="31">pw<pos:position pos:line="206" pos:column="33"/></name><operator pos:line="206" pos:column="33">-&gt;<pos:position pos:line="206" pos:column="38"/></operator><name pos:line="206" pos:column="35">pw_name<pos:position pos:line="206" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="206" pos:column="43"/></argument_list></call></expr>)<pos:position pos:line="206" pos:column="44"/></condition><then pos:line="206" pos:column="44"> <block pos:line="206" pos:column="45">{
        <expr_stmt><expr><call><name pos:line="207" pos:column="9">log_err<pos:position pos:line="207" pos:column="16"/></name><argument_list pos:line="207" pos:column="16">(<argument><expr><literal type="string" pos:line="207" pos:column="17">"user mismatch (%s instead of %s)\n"<pos:position pos:line="207" pos:column="53"/></literal></expr></argument>, <argument><expr><name><name pos:line="207" pos:column="55">pw<pos:position pos:line="207" pos:column="57"/></name><operator pos:line="207" pos:column="57">-&gt;<pos:position pos:line="207" pos:column="62"/></operator><name pos:line="207" pos:column="59">pw_name<pos:position pos:line="207" pos:column="66"/></name></name></expr></argument>, <argument><expr><name pos:line="207" pos:column="68">AP_HTTPD_USER<pos:position pos:line="207" pos:column="81"/></name></expr></argument>)<pos:position pos:line="207" pos:column="82"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="83"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="208" pos:column="9">exit<pos:position pos:line="208" pos:column="13"/></name><argument_list pos:line="208" pos:column="13">(<argument><expr><literal type="number" pos:line="208" pos:column="14">103<pos:position pos:line="208" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="208" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="209" pos:column="6"/></block></then></if>
<cpp:endif pos:line="210" pos:column="1">#<cpp:directive pos:line="210" pos:column="2">endif<pos:position pos:line="210" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="210" pos:column="8">/*_OSD_POSIX*/</comment>

    <comment type="block" pos:line="212" pos:column="5">/*
     * Check for a leading '/' (absolute path) in the command to be executed,
     * or attempts to back up out of the current directory,
     * to protect against attacks.  If any are
     * found, error out.  Naughty naughty crackers.
     */</comment>
    <if pos:line="218" pos:column="5">if <condition pos:line="218" pos:column="8">(<expr><operator pos:line="218" pos:column="9">(<pos:position pos:line="218" pos:column="10"/></operator><name><name pos:line="218" pos:column="10">cmd<pos:position pos:line="218" pos:column="13"/></name><index pos:line="218" pos:column="13">[<expr><literal type="number" pos:line="218" pos:column="14">0<pos:position pos:line="218" pos:column="15"/></literal></expr>]<pos:position pos:line="218" pos:column="16"/></index></name> <operator pos:line="218" pos:column="17">==<pos:position pos:line="218" pos:column="19"/></operator> <literal type="char" pos:line="218" pos:column="20">'/'<pos:position pos:line="218" pos:column="23"/></literal><operator pos:line="218" pos:column="23">)<pos:position pos:line="218" pos:column="24"/></operator> <operator pos:line="218" pos:column="25">||<pos:position pos:line="218" pos:column="27"/></operator> <operator pos:line="218" pos:column="28">(<pos:position pos:line="218" pos:column="29"/></operator><operator pos:line="218" pos:column="29">!<pos:position pos:line="218" pos:column="30"/></operator><call><name pos:line="218" pos:column="30">strncmp<pos:position pos:line="218" pos:column="37"/></name><argument_list pos:line="218" pos:column="37">(<argument><expr><name pos:line="218" pos:column="38">cmd<pos:position pos:line="218" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="218" pos:column="43">"../"<pos:position pos:line="218" pos:column="48"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="218" pos:column="50">3<pos:position pos:line="218" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="218" pos:column="52"/></argument_list></call><operator pos:line="218" pos:column="52">)<pos:position pos:line="218" pos:column="53"/></operator>
        <operator pos:line="219" pos:column="9">||<pos:position pos:line="219" pos:column="11"/></operator> <operator pos:line="219" pos:column="12">(<pos:position pos:line="219" pos:column="13"/></operator><call><name pos:line="219" pos:column="13">strstr<pos:position pos:line="219" pos:column="19"/></name><argument_list pos:line="219" pos:column="19">(<argument><expr><name pos:line="219" pos:column="20">cmd<pos:position pos:line="219" pos:column="23"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="219" pos:column="25">"/../"<pos:position pos:line="219" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="219" pos:column="32"/></argument_list></call> <operator pos:line="219" pos:column="33">!=<pos:position pos:line="219" pos:column="35"/></operator> <name pos:line="219" pos:column="36">NULL<pos:position pos:line="219" pos:column="40"/></name><operator pos:line="219" pos:column="40">)<pos:position pos:line="219" pos:column="41"/></operator></expr>)<pos:position pos:line="219" pos:column="42"/></condition><then pos:line="219" pos:column="42"> <block pos:line="219" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="220" pos:column="9">log_err<pos:position pos:line="220" pos:column="16"/></name><argument_list pos:line="220" pos:column="16">(<argument><expr><literal type="string" pos:line="220" pos:column="17">"invalid command (%s)\n"<pos:position pos:line="220" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="220" pos:column="43">cmd<pos:position pos:line="220" pos:column="46"/></name></expr></argument>)<pos:position pos:line="220" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="220" pos:column="48"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="221" pos:column="9">exit<pos:position pos:line="221" pos:column="13"/></name><argument_list pos:line="221" pos:column="13">(<argument><expr><literal type="number" pos:line="221" pos:column="14">104<pos:position pos:line="221" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="221" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="221" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="222" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="224" pos:column="5">/*
     * Check to see if this is a ~userdir request.  If
     * so, set the flag, and remove the '~' from the
     * target username.
     */</comment>
    <if pos:line="229" pos:column="5">if <condition pos:line="229" pos:column="8">(<expr><operator pos:line="229" pos:column="9">!<pos:position pos:line="229" pos:column="10"/></operator><call><name pos:line="229" pos:column="10">strncmp<pos:position pos:line="229" pos:column="17"/></name><argument_list pos:line="229" pos:column="17">(<argument><expr><literal type="string" pos:line="229" pos:column="18">"~"<pos:position pos:line="229" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="229" pos:column="23">target_uname<pos:position pos:line="229" pos:column="35"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="229" pos:column="37">1<pos:position pos:line="229" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="229" pos:column="39"/></argument_list></call></expr>)<pos:position pos:line="229" pos:column="40"/></condition><then pos:line="229" pos:column="40"> <block pos:line="229" pos:column="41">{
        <expr_stmt><expr><name pos:line="230" pos:column="9">target_uname<pos:position pos:line="230" pos:column="21"/></name><operator pos:line="230" pos:column="21">++<pos:position pos:line="230" pos:column="23"/></operator></expr>;<pos:position pos:line="230" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="231" pos:column="9">userdir<pos:position pos:line="231" pos:column="16"/></name> <operator pos:line="231" pos:column="17">=<pos:position pos:line="231" pos:column="18"/></operator> <literal type="number" pos:line="231" pos:column="19">1<pos:position pos:line="231" pos:column="20"/></literal></expr>;<pos:position pos:line="231" pos:column="21"/></expr_stmt>
    }<pos:position pos:line="232" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="234" pos:column="5">/*
     * Error out if the target username is invalid.
     */</comment>
    <if pos:line="237" pos:column="5">if <condition pos:line="237" pos:column="8">(<expr><call><name pos:line="237" pos:column="9">strspn<pos:position pos:line="237" pos:column="15"/></name><argument_list pos:line="237" pos:column="15">(<argument><expr><name pos:line="237" pos:column="16">target_uname<pos:position pos:line="237" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="237" pos:column="30">"1234567890"<pos:position pos:line="237" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="237" pos:column="43"/></argument_list></call> <operator pos:line="237" pos:column="44">!=<pos:position pos:line="237" pos:column="46"/></operator> <call><name pos:line="237" pos:column="47">strlen<pos:position pos:line="237" pos:column="53"/></name><argument_list pos:line="237" pos:column="53">(<argument><expr><name pos:line="237" pos:column="54">target_uname<pos:position pos:line="237" pos:column="66"/></name></expr></argument>)<pos:position pos:line="237" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="237" pos:column="68"/></condition><then pos:line="237" pos:column="68"> <block pos:line="237" pos:column="69">{
        <if pos:line="238" pos:column="9">if <condition pos:line="238" pos:column="12">(<expr><operator pos:line="238" pos:column="13">(<pos:position pos:line="238" pos:column="14"/></operator><name pos:line="238" pos:column="14">pw<pos:position pos:line="238" pos:column="16"/></name> <operator pos:line="238" pos:column="17">=<pos:position pos:line="238" pos:column="18"/></operator> <call><name pos:line="238" pos:column="19">getpwnam<pos:position pos:line="238" pos:column="27"/></name><argument_list pos:line="238" pos:column="27">(<argument><expr><name pos:line="238" pos:column="28">target_uname<pos:position pos:line="238" pos:column="40"/></name></expr></argument>)<pos:position pos:line="238" pos:column="41"/></argument_list></call><operator pos:line="238" pos:column="41">)<pos:position pos:line="238" pos:column="42"/></operator> <operator pos:line="238" pos:column="43">==<pos:position pos:line="238" pos:column="45"/></operator> <name pos:line="238" pos:column="46">NULL<pos:position pos:line="238" pos:column="50"/></name></expr>)<pos:position pos:line="238" pos:column="51"/></condition><then pos:line="238" pos:column="51"> <block pos:line="238" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="239" pos:column="13">log_err<pos:position pos:line="239" pos:column="20"/></name><argument_list pos:line="239" pos:column="20">(<argument><expr><literal type="string" pos:line="239" pos:column="21">"invalid target user name: (%s)\n"<pos:position pos:line="239" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="239" pos:column="57">target_uname<pos:position pos:line="239" pos:column="69"/></name></expr></argument>)<pos:position pos:line="239" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="239" pos:column="71"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="240" pos:column="13">exit<pos:position pos:line="240" pos:column="17"/></name><argument_list pos:line="240" pos:column="17">(<argument><expr><literal type="number" pos:line="240" pos:column="18">105<pos:position pos:line="240" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="240" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="240" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="241" pos:column="10"/></block></then></if>
    }<pos:position pos:line="242" pos:column="6"/></block></then>
    <else pos:line="243" pos:column="5">else <block pos:line="243" pos:column="10">{
        <if pos:line="244" pos:column="9">if <condition pos:line="244" pos:column="12">(<expr><operator pos:line="244" pos:column="13">(<pos:position pos:line="244" pos:column="14"/></operator><name pos:line="244" pos:column="14">pw<pos:position pos:line="244" pos:column="16"/></name> <operator pos:line="244" pos:column="17">=<pos:position pos:line="244" pos:column="18"/></operator> <call><name pos:line="244" pos:column="19">getpwuid<pos:position pos:line="244" pos:column="27"/></name><argument_list pos:line="244" pos:column="27">(<argument><expr><call><name pos:line="244" pos:column="28">atoi<pos:position pos:line="244" pos:column="32"/></name><argument_list pos:line="244" pos:column="32">(<argument><expr><name pos:line="244" pos:column="33">target_uname<pos:position pos:line="244" pos:column="45"/></name></expr></argument>)<pos:position pos:line="244" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="244" pos:column="47"/></argument_list></call><operator pos:line="244" pos:column="47">)<pos:position pos:line="244" pos:column="48"/></operator> <operator pos:line="244" pos:column="49">==<pos:position pos:line="244" pos:column="51"/></operator> <name pos:line="244" pos:column="52">NULL<pos:position pos:line="244" pos:column="56"/></name></expr>)<pos:position pos:line="244" pos:column="57"/></condition><then pos:line="244" pos:column="57"> <block pos:line="244" pos:column="58">{
            <expr_stmt><expr><call><name pos:line="245" pos:column="13">log_err<pos:position pos:line="245" pos:column="20"/></name><argument_list pos:line="245" pos:column="20">(<argument><expr><literal type="string" pos:line="245" pos:column="21">"invalid target user id: (%s)\n"<pos:position pos:line="245" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="245" pos:column="55">target_uname<pos:position pos:line="245" pos:column="67"/></name></expr></argument>)<pos:position pos:line="245" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="245" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="246" pos:column="13">exit<pos:position pos:line="246" pos:column="17"/></name><argument_list pos:line="246" pos:column="17">(<argument><expr><literal type="number" pos:line="246" pos:column="18">121<pos:position pos:line="246" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="246" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="246" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="247" pos:column="10"/></block></then></if>
    }<pos:position pos:line="248" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="250" pos:column="5">/*
     * Error out if the target group name is invalid.
     */</comment>
    <if pos:line="253" pos:column="5">if <condition pos:line="253" pos:column="8">(<expr><call><name pos:line="253" pos:column="9">strspn<pos:position pos:line="253" pos:column="15"/></name><argument_list pos:line="253" pos:column="15">(<argument><expr><name pos:line="253" pos:column="16">target_gname<pos:position pos:line="253" pos:column="28"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="253" pos:column="30">"1234567890"<pos:position pos:line="253" pos:column="42"/></literal></expr></argument>)<pos:position pos:line="253" pos:column="43"/></argument_list></call> <operator pos:line="253" pos:column="44">!=<pos:position pos:line="253" pos:column="46"/></operator> <call><name pos:line="253" pos:column="47">strlen<pos:position pos:line="253" pos:column="53"/></name><argument_list pos:line="253" pos:column="53">(<argument><expr><name pos:line="253" pos:column="54">target_gname<pos:position pos:line="253" pos:column="66"/></name></expr></argument>)<pos:position pos:line="253" pos:column="67"/></argument_list></call></expr>)<pos:position pos:line="253" pos:column="68"/></condition><then pos:line="253" pos:column="68"> <block pos:line="253" pos:column="69">{
        <if pos:line="254" pos:column="9">if <condition pos:line="254" pos:column="12">(<expr><operator pos:line="254" pos:column="13">(<pos:position pos:line="254" pos:column="14"/></operator><name pos:line="254" pos:column="14">gr<pos:position pos:line="254" pos:column="16"/></name> <operator pos:line="254" pos:column="17">=<pos:position pos:line="254" pos:column="18"/></operator> <call><name pos:line="254" pos:column="19">getgrnam<pos:position pos:line="254" pos:column="27"/></name><argument_list pos:line="254" pos:column="27">(<argument><expr><name pos:line="254" pos:column="28">target_gname<pos:position pos:line="254" pos:column="40"/></name></expr></argument>)<pos:position pos:line="254" pos:column="41"/></argument_list></call><operator pos:line="254" pos:column="41">)<pos:position pos:line="254" pos:column="42"/></operator> <operator pos:line="254" pos:column="43">==<pos:position pos:line="254" pos:column="45"/></operator> <name pos:line="254" pos:column="46">NULL<pos:position pos:line="254" pos:column="50"/></name></expr>)<pos:position pos:line="254" pos:column="51"/></condition><then pos:line="254" pos:column="51"> <block pos:line="254" pos:column="52">{
            <expr_stmt><expr><call><name pos:line="255" pos:column="13">log_err<pos:position pos:line="255" pos:column="20"/></name><argument_list pos:line="255" pos:column="20">(<argument><expr><literal type="string" pos:line="255" pos:column="21">"invalid target group name: (%s)\n"<pos:position pos:line="255" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="255" pos:column="58">target_gname<pos:position pos:line="255" pos:column="70"/></name></expr></argument>)<pos:position pos:line="255" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="255" pos:column="72"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="256" pos:column="13">exit<pos:position pos:line="256" pos:column="17"/></name><argument_list pos:line="256" pos:column="17">(<argument><expr><literal type="number" pos:line="256" pos:column="18">106<pos:position pos:line="256" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="256" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="256" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="257" pos:column="10"/></block></then></if>
    }<pos:position pos:line="258" pos:column="6"/></block></then>
    <else pos:line="259" pos:column="5">else <block pos:line="259" pos:column="10">{
        <if pos:line="260" pos:column="9">if <condition pos:line="260" pos:column="12">(<expr><operator pos:line="260" pos:column="13">(<pos:position pos:line="260" pos:column="14"/></operator><name pos:line="260" pos:column="14">gr<pos:position pos:line="260" pos:column="16"/></name> <operator pos:line="260" pos:column="17">=<pos:position pos:line="260" pos:column="18"/></operator> <call><name pos:line="260" pos:column="19">getgrgid<pos:position pos:line="260" pos:column="27"/></name><argument_list pos:line="260" pos:column="27">(<argument><expr><call><name pos:line="260" pos:column="28">atoi<pos:position pos:line="260" pos:column="32"/></name><argument_list pos:line="260" pos:column="32">(<argument><expr><name pos:line="260" pos:column="33">target_gname<pos:position pos:line="260" pos:column="45"/></name></expr></argument>)<pos:position pos:line="260" pos:column="46"/></argument_list></call></expr></argument>)<pos:position pos:line="260" pos:column="47"/></argument_list></call><operator pos:line="260" pos:column="47">)<pos:position pos:line="260" pos:column="48"/></operator> <operator pos:line="260" pos:column="49">==<pos:position pos:line="260" pos:column="51"/></operator> <name pos:line="260" pos:column="52">NULL<pos:position pos:line="260" pos:column="56"/></name></expr>)<pos:position pos:line="260" pos:column="57"/></condition><then pos:line="260" pos:column="57"> <block pos:line="260" pos:column="58">{
            <expr_stmt><expr><call><name pos:line="261" pos:column="13">log_err<pos:position pos:line="261" pos:column="20"/></name><argument_list pos:line="261" pos:column="20">(<argument><expr><literal type="string" pos:line="261" pos:column="21">"invalid target group id: (%s)\n"<pos:position pos:line="261" pos:column="54"/></literal></expr></argument>, <argument><expr><name pos:line="261" pos:column="56">target_gname<pos:position pos:line="261" pos:column="68"/></name></expr></argument>)<pos:position pos:line="261" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="261" pos:column="70"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="262" pos:column="13">exit<pos:position pos:line="262" pos:column="17"/></name><argument_list pos:line="262" pos:column="17">(<argument><expr><literal type="number" pos:line="262" pos:column="18">106<pos:position pos:line="262" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="262" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="262" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="263" pos:column="10"/></block></then></if>
    }<pos:position pos:line="264" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="265" pos:column="5">gid<pos:position pos:line="265" pos:column="8"/></name> <operator pos:line="265" pos:column="9">=<pos:position pos:line="265" pos:column="10"/></operator> <name><name pos:line="265" pos:column="11">gr<pos:position pos:line="265" pos:column="13"/></name><operator pos:line="265" pos:column="13">-&gt;<pos:position pos:line="265" pos:column="18"/></operator><name pos:line="265" pos:column="15">gr_gid<pos:position pos:line="265" pos:column="21"/></name></name></expr>;<pos:position pos:line="265" pos:column="22"/></expr_stmt>
    <if pos:line="266" pos:column="5">if <condition pos:line="266" pos:column="8">(<expr><operator pos:line="266" pos:column="9">(<pos:position pos:line="266" pos:column="10"/></operator><name pos:line="266" pos:column="10">actual_gname<pos:position pos:line="266" pos:column="22"/></name> <operator pos:line="266" pos:column="23">=<pos:position pos:line="266" pos:column="24"/></operator> <call><name pos:line="266" pos:column="25">strdup<pos:position pos:line="266" pos:column="31"/></name><argument_list pos:line="266" pos:column="31">(<argument><expr><name><name pos:line="266" pos:column="32">gr<pos:position pos:line="266" pos:column="34"/></name><operator pos:line="266" pos:column="34">-&gt;<pos:position pos:line="266" pos:column="39"/></operator><name pos:line="266" pos:column="36">gr_name<pos:position pos:line="266" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="266" pos:column="44"/></argument_list></call><operator pos:line="266" pos:column="44">)<pos:position pos:line="266" pos:column="45"/></operator> <operator pos:line="266" pos:column="46">==<pos:position pos:line="266" pos:column="48"/></operator> <name pos:line="266" pos:column="49">NULL<pos:position pos:line="266" pos:column="53"/></name></expr>)<pos:position pos:line="266" pos:column="54"/></condition><then pos:line="266" pos:column="54"> <block pos:line="266" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="267" pos:column="9">log_err<pos:position pos:line="267" pos:column="16"/></name><argument_list pos:line="267" pos:column="16">(<argument><expr><literal type="string" pos:line="267" pos:column="17">"failed to alloc memory\n"<pos:position pos:line="267" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="267" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="267" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="268" pos:column="9">exit<pos:position pos:line="268" pos:column="13"/></name><argument_list pos:line="268" pos:column="13">(<argument><expr><literal type="number" pos:line="268" pos:column="14">125<pos:position pos:line="268" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="268" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="268" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="269" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="271" pos:column="1">#<cpp:directive pos:line="271" pos:column="2">ifdef<pos:position pos:line="271" pos:column="7"/></cpp:directive> <name pos:line="271" pos:column="8">_OSD_POSIX<pos:position pos:line="271" pos:column="18"/></name></cpp:ifdef>
    <comment type="block" pos:line="272" pos:column="5">/*
     * Initialize BS2000 user environment
     */</comment>
    <block pos:line="275" pos:column="5">{
        <decl_stmt><decl><type><name pos:line="276" pos:column="9">pid_t<pos:position pos:line="276" pos:column="14"/></name></type> <name pos:line="276" pos:column="15">pid<pos:position pos:line="276" pos:column="18"/></name></decl>;<pos:position pos:line="276" pos:column="19"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="277" pos:column="9">int<pos:position pos:line="277" pos:column="12"/></name></type> <name pos:line="277" pos:column="13">status<pos:position pos:line="277" pos:column="19"/></name></decl>;<pos:position pos:line="277" pos:column="20"/></decl_stmt>

        <switch pos:line="279" pos:column="9">switch <condition pos:line="279" pos:column="16">(<expr><name pos:line="279" pos:column="17">pid<pos:position pos:line="279" pos:column="20"/></name> <operator pos:line="279" pos:column="21">=<pos:position pos:line="279" pos:column="22"/></operator> <call><name pos:line="279" pos:column="23">ufork<pos:position pos:line="279" pos:column="28"/></name><argument_list pos:line="279" pos:column="28">(<argument><expr><name pos:line="279" pos:column="29">target_uname<pos:position pos:line="279" pos:column="41"/></name></expr></argument>)<pos:position pos:line="279" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="279" pos:column="43"/></condition> <block pos:line="279" pos:column="44">{
        <case pos:line="280" pos:column="9">case <expr><operator pos:line="280" pos:column="14">-<pos:position pos:line="280" pos:column="15"/></operator><literal type="number" pos:line="280" pos:column="15">1<pos:position pos:line="280" pos:column="16"/></literal></expr>:<pos:position pos:line="280" pos:column="17"/></case>    <comment type="block" pos:line="280" pos:column="21">/* Error */</comment>
            <expr_stmt><expr><call><name pos:line="281" pos:column="13">log_err<pos:position pos:line="281" pos:column="20"/></name><argument_list pos:line="281" pos:column="20">(<argument><expr><literal type="string" pos:line="281" pos:column="21">"failed to setup bs2000 environment for user %s: %s\n"<pos:position pos:line="281" pos:column="75"/></literal></expr></argument>,
                    <argument><expr><name pos:line="282" pos:column="21">target_uname<pos:position pos:line="282" pos:column="33"/></name></expr></argument>, <argument><expr><call><name pos:line="282" pos:column="35">strerror<pos:position pos:line="282" pos:column="43"/></name><argument_list pos:line="282" pos:column="43">(<argument><expr><name pos:line="282" pos:column="44">errno<pos:position pos:line="282" pos:column="49"/></name></expr></argument>)<pos:position pos:line="282" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="282" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="282" pos:column="52"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="283" pos:column="13">exit<pos:position pos:line="283" pos:column="17"/></name><argument_list pos:line="283" pos:column="17">(<argument><expr><literal type="number" pos:line="283" pos:column="18">150<pos:position pos:line="283" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="283" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="283" pos:column="23"/></expr_stmt>
        <case pos:line="284" pos:column="9">case <expr><literal type="number" pos:line="284" pos:column="14">0<pos:position pos:line="284" pos:column="15"/></literal></expr>:<pos:position pos:line="284" pos:column="16"/></case>     <comment type="block" pos:line="284" pos:column="21">/* Child */</comment>
            <break pos:line="285" pos:column="13">break;<pos:position pos:line="285" pos:column="19"/></break>
        <default pos:line="286" pos:column="9">default:<pos:position pos:line="286" pos:column="17"/></default>    <comment type="block" pos:line="286" pos:column="21">/* Father */</comment>
            <while pos:line="287" pos:column="13">while <condition pos:line="287" pos:column="19">(<expr><name pos:line="287" pos:column="20">pid<pos:position pos:line="287" pos:column="23"/></name> <operator pos:line="287" pos:column="24">!=<pos:position pos:line="287" pos:column="26"/></operator> <call><name pos:line="287" pos:column="27">waitpid<pos:position pos:line="287" pos:column="34"/></name><argument_list pos:line="287" pos:column="34">(<argument><expr><name pos:line="287" pos:column="35">pid<pos:position pos:line="287" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="287" pos:column="40">&amp;<pos:position pos:line="287" pos:column="45"/></operator><name pos:line="287" pos:column="41">status<pos:position pos:line="287" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="287" pos:column="49">0<pos:position pos:line="287" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="287" pos:column="51"/></argument_list></call></expr>)<pos:position pos:line="287" pos:column="52"/></condition>
                <block type="pseudo"><empty_stmt pos:line="288" pos:column="17">;<pos:position pos:line="288" pos:column="18"/></empty_stmt></block></while>
            <comment type="block" pos:line="289" pos:column="13">/* @@@ FIXME: should we deal with STOP signals as well? */</comment>
            <if pos:line="290" pos:column="13">if <condition pos:line="290" pos:column="16">(<expr><call><name pos:line="290" pos:column="17">WIFSIGNALED<pos:position pos:line="290" pos:column="28"/></name><argument_list pos:line="290" pos:column="28">(<argument><expr><name pos:line="290" pos:column="29">status<pos:position pos:line="290" pos:column="35"/></name></expr></argument>)<pos:position pos:line="290" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="290" pos:column="37"/></condition><then pos:line="290" pos:column="37"> <block pos:line="290" pos:column="38">{
                <expr_stmt><expr><call><name pos:line="291" pos:column="17">kill<pos:position pos:line="291" pos:column="21"/></name> <argument_list pos:line="291" pos:column="22">(<argument><expr><call><name pos:line="291" pos:column="23">getpid<pos:position pos:line="291" pos:column="29"/></name><argument_list pos:line="291" pos:column="29">()<pos:position pos:line="291" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="291" pos:column="33">WTERMSIG<pos:position pos:line="291" pos:column="41"/></name><argument_list pos:line="291" pos:column="41">(<argument><expr><name pos:line="291" pos:column="42">status<pos:position pos:line="291" pos:column="48"/></name></expr></argument>)<pos:position pos:line="291" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="291" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="291" pos:column="51"/></expr_stmt>
            }<pos:position pos:line="292" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name pos:line="293" pos:column="13">exit<pos:position pos:line="293" pos:column="17"/></name><argument_list pos:line="293" pos:column="17">(<argument><expr><call><name pos:line="293" pos:column="18">WEXITSTATUS<pos:position pos:line="293" pos:column="29"/></name><argument_list pos:line="293" pos:column="29">(<argument><expr><name pos:line="293" pos:column="30">status<pos:position pos:line="293" pos:column="36"/></name></expr></argument>)<pos:position pos:line="293" pos:column="37"/></argument_list></call></expr></argument>)<pos:position pos:line="293" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="293" pos:column="39"/></expr_stmt>
        }<pos:position pos:line="294" pos:column="10"/></block></switch>
    }<pos:position pos:line="295" pos:column="6"/></block>
<cpp:endif pos:line="296" pos:column="1">#<cpp:directive pos:line="296" pos:column="2">endif<pos:position pos:line="296" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="296" pos:column="8">/*_OSD_POSIX*/</comment>

    <comment type="block" pos:line="298" pos:column="5">/*
     * Save these for later since initgroups will hose the struct
     */</comment>
    <expr_stmt><expr><name pos:line="301" pos:column="5">uid<pos:position pos:line="301" pos:column="8"/></name> <operator pos:line="301" pos:column="9">=<pos:position pos:line="301" pos:column="10"/></operator> <name><name pos:line="301" pos:column="11">pw<pos:position pos:line="301" pos:column="13"/></name><operator pos:line="301" pos:column="13">-&gt;<pos:position pos:line="301" pos:column="18"/></operator><name pos:line="301" pos:column="15">pw_uid<pos:position pos:line="301" pos:column="21"/></name></name></expr>;<pos:position pos:line="301" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><name pos:line="302" pos:column="5">actual_uname<pos:position pos:line="302" pos:column="17"/></name> <operator pos:line="302" pos:column="18">=<pos:position pos:line="302" pos:column="19"/></operator> <call><name pos:line="302" pos:column="20">strdup<pos:position pos:line="302" pos:column="26"/></name><argument_list pos:line="302" pos:column="26">(<argument><expr><name><name pos:line="302" pos:column="27">pw<pos:position pos:line="302" pos:column="29"/></name><operator pos:line="302" pos:column="29">-&gt;<pos:position pos:line="302" pos:column="34"/></operator><name pos:line="302" pos:column="31">pw_name<pos:position pos:line="302" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="302" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="302" pos:column="40"/></expr_stmt>
    <expr_stmt><expr><name pos:line="303" pos:column="5">target_homedir<pos:position pos:line="303" pos:column="19"/></name> <operator pos:line="303" pos:column="20">=<pos:position pos:line="303" pos:column="21"/></operator> <call><name pos:line="303" pos:column="22">strdup<pos:position pos:line="303" pos:column="28"/></name><argument_list pos:line="303" pos:column="28">(<argument><expr><name><name pos:line="303" pos:column="29">pw<pos:position pos:line="303" pos:column="31"/></name><operator pos:line="303" pos:column="31">-&gt;<pos:position pos:line="303" pos:column="36"/></operator><name pos:line="303" pos:column="33">pw_dir<pos:position pos:line="303" pos:column="39"/></name></name></expr></argument>)<pos:position pos:line="303" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="303" pos:column="41"/></expr_stmt>
    <if pos:line="304" pos:column="5">if <condition pos:line="304" pos:column="8">(<expr><name pos:line="304" pos:column="9">actual_uname<pos:position pos:line="304" pos:column="21"/></name> <operator pos:line="304" pos:column="22">==<pos:position pos:line="304" pos:column="24"/></operator> <name pos:line="304" pos:column="25">NULL<pos:position pos:line="304" pos:column="29"/></name> <operator pos:line="304" pos:column="30">||<pos:position pos:line="304" pos:column="32"/></operator> <name pos:line="304" pos:column="33">target_homedir<pos:position pos:line="304" pos:column="47"/></name> <operator pos:line="304" pos:column="48">==<pos:position pos:line="304" pos:column="50"/></operator> <name pos:line="304" pos:column="51">NULL<pos:position pos:line="304" pos:column="55"/></name></expr>)<pos:position pos:line="304" pos:column="56"/></condition><then pos:line="304" pos:column="56"> <block pos:line="304" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="305" pos:column="9">log_err<pos:position pos:line="305" pos:column="16"/></name><argument_list pos:line="305" pos:column="16">(<argument><expr><literal type="string" pos:line="305" pos:column="17">"failed to alloc memory\n"<pos:position pos:line="305" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="305" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="305" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="306" pos:column="9">exit<pos:position pos:line="306" pos:column="13"/></name><argument_list pos:line="306" pos:column="13">(<argument><expr><literal type="number" pos:line="306" pos:column="14">126<pos:position pos:line="306" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="306" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="306" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="307" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="309" pos:column="5">/*
     * Log the transaction here to be sure we have an open log
     * before we setuid().
     */</comment>
    <expr_stmt><expr><call><name pos:line="313" pos:column="5">log_no_err<pos:position pos:line="313" pos:column="15"/></name><argument_list pos:line="313" pos:column="15">(<argument><expr><literal type="string" pos:line="313" pos:column="16">"uid: (%s/%s) gid: (%s/%s) cmd: %s\n"<pos:position pos:line="313" pos:column="53"/></literal></expr></argument>,
               <argument><expr><name pos:line="314" pos:column="16">target_uname<pos:position pos:line="314" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="314" pos:column="30">actual_uname<pos:position pos:line="314" pos:column="42"/></name></expr></argument>,
               <argument><expr><name pos:line="315" pos:column="16">target_gname<pos:position pos:line="315" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="315" pos:column="30">actual_gname<pos:position pos:line="315" pos:column="42"/></name></expr></argument>,
               <argument><expr><name pos:line="316" pos:column="16">cmd<pos:position pos:line="316" pos:column="19"/></name></expr></argument>)<pos:position pos:line="316" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="316" pos:column="21"/></expr_stmt>

    <comment type="block" pos:line="318" pos:column="5">/*
     * Error out if attempt is made to execute as root or as
     * a UID less than AP_UID_MIN.  Tsk tsk.
     */</comment>
    <if pos:line="322" pos:column="5">if <condition pos:line="322" pos:column="8">(<expr><operator pos:line="322" pos:column="9">(<pos:position pos:line="322" pos:column="10"/></operator><name pos:line="322" pos:column="10">uid<pos:position pos:line="322" pos:column="13"/></name> <operator pos:line="322" pos:column="14">==<pos:position pos:line="322" pos:column="16"/></operator> <literal type="number" pos:line="322" pos:column="17">0<pos:position pos:line="322" pos:column="18"/></literal><operator pos:line="322" pos:column="18">)<pos:position pos:line="322" pos:column="19"/></operator> <operator pos:line="322" pos:column="20">||<pos:position pos:line="322" pos:column="22"/></operator> <operator pos:line="322" pos:column="23">(<pos:position pos:line="322" pos:column="24"/></operator><name pos:line="322" pos:column="24">uid<pos:position pos:line="322" pos:column="27"/></name> <operator pos:line="322" pos:column="28">&lt;<pos:position pos:line="322" pos:column="32"/></operator> <name pos:line="322" pos:column="30">AP_UID_MIN<pos:position pos:line="322" pos:column="40"/></name><operator pos:line="322" pos:column="40">)<pos:position pos:line="322" pos:column="41"/></operator></expr>)<pos:position pos:line="322" pos:column="42"/></condition><then pos:line="322" pos:column="42"> <block pos:line="322" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="323" pos:column="9">log_err<pos:position pos:line="323" pos:column="16"/></name><argument_list pos:line="323" pos:column="16">(<argument><expr><literal type="string" pos:line="323" pos:column="17">"cannot run as forbidden uid (%lu/%s)\n"<pos:position pos:line="323" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="323" pos:column="59">(<pos:position pos:line="323" pos:column="60"/></operator><name pos:line="323" pos:column="60">unsigned<pos:position pos:line="323" pos:column="68"/></name> <name pos:line="323" pos:column="69">long<pos:position pos:line="323" pos:column="73"/></name><operator pos:line="323" pos:column="73">)<pos:position pos:line="323" pos:column="74"/></operator><name pos:line="323" pos:column="74">uid<pos:position pos:line="323" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="323" pos:column="79">cmd<pos:position pos:line="323" pos:column="82"/></name></expr></argument>)<pos:position pos:line="323" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="323" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="324" pos:column="9">exit<pos:position pos:line="324" pos:column="13"/></name><argument_list pos:line="324" pos:column="13">(<argument><expr><literal type="number" pos:line="324" pos:column="14">107<pos:position pos:line="324" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="324" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="324" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="325" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="327" pos:column="5">/*
     * Error out if attempt is made to execute as root group
     * or as a GID less than AP_GID_MIN.  Tsk tsk.
     */</comment>
    <if pos:line="331" pos:column="5">if <condition pos:line="331" pos:column="8">(<expr><operator pos:line="331" pos:column="9">(<pos:position pos:line="331" pos:column="10"/></operator><name pos:line="331" pos:column="10">gid<pos:position pos:line="331" pos:column="13"/></name> <operator pos:line="331" pos:column="14">==<pos:position pos:line="331" pos:column="16"/></operator> <literal type="number" pos:line="331" pos:column="17">0<pos:position pos:line="331" pos:column="18"/></literal><operator pos:line="331" pos:column="18">)<pos:position pos:line="331" pos:column="19"/></operator> <operator pos:line="331" pos:column="20">||<pos:position pos:line="331" pos:column="22"/></operator> <operator pos:line="331" pos:column="23">(<pos:position pos:line="331" pos:column="24"/></operator><name pos:line="331" pos:column="24">gid<pos:position pos:line="331" pos:column="27"/></name> <operator pos:line="331" pos:column="28">&lt;<pos:position pos:line="331" pos:column="32"/></operator> <name pos:line="331" pos:column="30">AP_GID_MIN<pos:position pos:line="331" pos:column="40"/></name><operator pos:line="331" pos:column="40">)<pos:position pos:line="331" pos:column="41"/></operator></expr>)<pos:position pos:line="331" pos:column="42"/></condition><then pos:line="331" pos:column="42"> <block pos:line="331" pos:column="43">{
        <expr_stmt><expr><call><name pos:line="332" pos:column="9">log_err<pos:position pos:line="332" pos:column="16"/></name><argument_list pos:line="332" pos:column="16">(<argument><expr><literal type="string" pos:line="332" pos:column="17">"cannot run as forbidden gid (%lu/%s)\n"<pos:position pos:line="332" pos:column="57"/></literal></expr></argument>, <argument><expr><operator pos:line="332" pos:column="59">(<pos:position pos:line="332" pos:column="60"/></operator><name pos:line="332" pos:column="60">unsigned<pos:position pos:line="332" pos:column="68"/></name> <name pos:line="332" pos:column="69">long<pos:position pos:line="332" pos:column="73"/></name><operator pos:line="332" pos:column="73">)<pos:position pos:line="332" pos:column="74"/></operator><name pos:line="332" pos:column="74">gid<pos:position pos:line="332" pos:column="77"/></name></expr></argument>, <argument><expr><name pos:line="332" pos:column="79">cmd<pos:position pos:line="332" pos:column="82"/></name></expr></argument>)<pos:position pos:line="332" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="332" pos:column="84"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="333" pos:column="9">exit<pos:position pos:line="333" pos:column="13"/></name><argument_list pos:line="333" pos:column="13">(<argument><expr><literal type="number" pos:line="333" pos:column="14">108<pos:position pos:line="333" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="333" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="333" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="334" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="336" pos:column="5">/*
     * Change UID/GID here so that the following tests work over NFS.
     *
     * Initialize the group access list for the target user,
     * and setgid() to the target group. If unsuccessful, error out.
     */</comment>
    <if pos:line="342" pos:column="5">if <condition pos:line="342" pos:column="8">(<expr><operator pos:line="342" pos:column="9">(<pos:position pos:line="342" pos:column="10"/></operator><operator pos:line="342" pos:column="10">(<pos:position pos:line="342" pos:column="11"/></operator><call><name pos:line="342" pos:column="11">setgid<pos:position pos:line="342" pos:column="17"/></name><argument_list pos:line="342" pos:column="17">(<argument><expr><name pos:line="342" pos:column="18">gid<pos:position pos:line="342" pos:column="21"/></name></expr></argument>)<pos:position pos:line="342" pos:column="22"/></argument_list></call><operator pos:line="342" pos:column="22">)<pos:position pos:line="342" pos:column="23"/></operator> <operator pos:line="342" pos:column="24">!=<pos:position pos:line="342" pos:column="26"/></operator> <literal type="number" pos:line="342" pos:column="27">0<pos:position pos:line="342" pos:column="28"/></literal><operator pos:line="342" pos:column="28">)<pos:position pos:line="342" pos:column="29"/></operator> <operator pos:line="342" pos:column="30">||<pos:position pos:line="342" pos:column="32"/></operator> <operator pos:line="342" pos:column="33">(<pos:position pos:line="342" pos:column="34"/></operator><call><name pos:line="342" pos:column="34">initgroups<pos:position pos:line="342" pos:column="44"/></name><argument_list pos:line="342" pos:column="44">(<argument><expr><name pos:line="342" pos:column="45">actual_uname<pos:position pos:line="342" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="342" pos:column="59">gid<pos:position pos:line="342" pos:column="62"/></name></expr></argument>)<pos:position pos:line="342" pos:column="63"/></argument_list></call> <operator pos:line="342" pos:column="64">!=<pos:position pos:line="342" pos:column="66"/></operator> <literal type="number" pos:line="342" pos:column="67">0<pos:position pos:line="342" pos:column="68"/></literal><operator pos:line="342" pos:column="68">)<pos:position pos:line="342" pos:column="69"/></operator></expr>)<pos:position pos:line="342" pos:column="70"/></condition><then pos:line="342" pos:column="70"> <block pos:line="342" pos:column="71">{
        <expr_stmt><expr><call><name pos:line="343" pos:column="9">log_err<pos:position pos:line="343" pos:column="16"/></name><argument_list pos:line="343" pos:column="16">(<argument><expr><literal type="string" pos:line="343" pos:column="17">"failed to setgid (%lu: %s)\n"<pos:position pos:line="343" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="343" pos:column="49">(<pos:position pos:line="343" pos:column="50"/></operator><name pos:line="343" pos:column="50">unsigned<pos:position pos:line="343" pos:column="58"/></name> <name pos:line="343" pos:column="59">long<pos:position pos:line="343" pos:column="63"/></name><operator pos:line="343" pos:column="63">)<pos:position pos:line="343" pos:column="64"/></operator><name pos:line="343" pos:column="64">gid<pos:position pos:line="343" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="343" pos:column="69">cmd<pos:position pos:line="343" pos:column="72"/></name></expr></argument>)<pos:position pos:line="343" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="343" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="344" pos:column="9">exit<pos:position pos:line="344" pos:column="13"/></name><argument_list pos:line="344" pos:column="13">(<argument><expr><literal type="number" pos:line="344" pos:column="14">109<pos:position pos:line="344" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="344" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="344" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="345" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="347" pos:column="5">/*
     * setuid() to the target user.  Error out on fail.
     */</comment>
    <if pos:line="350" pos:column="5">if <condition pos:line="350" pos:column="8">(<expr><operator pos:line="350" pos:column="9">(<pos:position pos:line="350" pos:column="10"/></operator><call><name pos:line="350" pos:column="10">setuid<pos:position pos:line="350" pos:column="16"/></name><argument_list pos:line="350" pos:column="16">(<argument><expr><name pos:line="350" pos:column="17">uid<pos:position pos:line="350" pos:column="20"/></name></expr></argument>)<pos:position pos:line="350" pos:column="21"/></argument_list></call><operator pos:line="350" pos:column="21">)<pos:position pos:line="350" pos:column="22"/></operator> <operator pos:line="350" pos:column="23">!=<pos:position pos:line="350" pos:column="25"/></operator> <literal type="number" pos:line="350" pos:column="26">0<pos:position pos:line="350" pos:column="27"/></literal></expr>)<pos:position pos:line="350" pos:column="28"/></condition><then pos:line="350" pos:column="28"> <block pos:line="350" pos:column="29">{
        <expr_stmt><expr><call><name pos:line="351" pos:column="9">log_err<pos:position pos:line="351" pos:column="16"/></name><argument_list pos:line="351" pos:column="16">(<argument><expr><literal type="string" pos:line="351" pos:column="17">"failed to setuid (%lu: %s)\n"<pos:position pos:line="351" pos:column="47"/></literal></expr></argument>, <argument><expr><operator pos:line="351" pos:column="49">(<pos:position pos:line="351" pos:column="50"/></operator><name pos:line="351" pos:column="50">unsigned<pos:position pos:line="351" pos:column="58"/></name> <name pos:line="351" pos:column="59">long<pos:position pos:line="351" pos:column="63"/></name><operator pos:line="351" pos:column="63">)<pos:position pos:line="351" pos:column="64"/></operator><name pos:line="351" pos:column="64">uid<pos:position pos:line="351" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="351" pos:column="69">cmd<pos:position pos:line="351" pos:column="72"/></name></expr></argument>)<pos:position pos:line="351" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="351" pos:column="74"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="352" pos:column="9">exit<pos:position pos:line="352" pos:column="13"/></name><argument_list pos:line="352" pos:column="13">(<argument><expr><literal type="number" pos:line="352" pos:column="14">110<pos:position pos:line="352" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="352" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="352" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="353" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="355" pos:column="5">/*
     * Get the current working directory, as well as the proper
     * document root (dependant upon whether or not it is a
     * ~userdir request).  Error out if we cannot get either one,
     * or if the current working directory is not in the docroot.
     * Use chdir()s and getcwd()s to avoid problems with symlinked
     * directories.  Yuck.
     */</comment>
    <if pos:line="363" pos:column="5">if <condition pos:line="363" pos:column="8">(<expr><call><name pos:line="363" pos:column="9">getcwd<pos:position pos:line="363" pos:column="15"/></name><argument_list pos:line="363" pos:column="15">(<argument><expr><name pos:line="363" pos:column="16">cwd<pos:position pos:line="363" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="363" pos:column="21">AP_MAXPATH<pos:position pos:line="363" pos:column="31"/></name></expr></argument>)<pos:position pos:line="363" pos:column="32"/></argument_list></call> <operator pos:line="363" pos:column="33">==<pos:position pos:line="363" pos:column="35"/></operator> <name pos:line="363" pos:column="36">NULL<pos:position pos:line="363" pos:column="40"/></name></expr>)<pos:position pos:line="363" pos:column="41"/></condition><then pos:line="363" pos:column="41"> <block pos:line="363" pos:column="42">{
        <expr_stmt><expr><call><name pos:line="364" pos:column="9">log_err<pos:position pos:line="364" pos:column="16"/></name><argument_list pos:line="364" pos:column="16">(<argument><expr><literal type="string" pos:line="364" pos:column="17">"cannot get current working directory\n"<pos:position pos:line="364" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="364" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="364" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="365" pos:column="9">exit<pos:position pos:line="365" pos:column="13"/></name><argument_list pos:line="365" pos:column="13">(<argument><expr><literal type="number" pos:line="365" pos:column="14">111<pos:position pos:line="365" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="365" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="365" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="366" pos:column="6"/></block></then></if>

    <if pos:line="368" pos:column="5">if <condition pos:line="368" pos:column="8">(<expr><name pos:line="368" pos:column="9">userdir<pos:position pos:line="368" pos:column="16"/></name></expr>)<pos:position pos:line="368" pos:column="17"/></condition><then pos:line="368" pos:column="17"> <block pos:line="368" pos:column="18">{
        <if pos:line="369" pos:column="9">if <condition pos:line="369" pos:column="12">(<expr><operator pos:line="369" pos:column="13">(<pos:position pos:line="369" pos:column="14"/></operator><operator pos:line="369" pos:column="14">(<pos:position pos:line="369" pos:column="15"/></operator><call><name pos:line="369" pos:column="15">chdir<pos:position pos:line="369" pos:column="20"/></name><argument_list pos:line="369" pos:column="20">(<argument><expr><name pos:line="369" pos:column="21">target_homedir<pos:position pos:line="369" pos:column="35"/></name></expr></argument>)<pos:position pos:line="369" pos:column="36"/></argument_list></call><operator pos:line="369" pos:column="36">)<pos:position pos:line="369" pos:column="37"/></operator> <operator pos:line="369" pos:column="38">!=<pos:position pos:line="369" pos:column="40"/></operator> <literal type="number" pos:line="369" pos:column="41">0<pos:position pos:line="369" pos:column="42"/></literal><operator pos:line="369" pos:column="42">)<pos:position pos:line="369" pos:column="43"/></operator> <operator pos:line="369" pos:column="44">||<pos:position pos:line="369" pos:column="46"/></operator>
            <operator pos:line="370" pos:column="13">(<pos:position pos:line="370" pos:column="14"/></operator><operator pos:line="370" pos:column="14">(<pos:position pos:line="370" pos:column="15"/></operator><call><name pos:line="370" pos:column="15">chdir<pos:position pos:line="370" pos:column="20"/></name><argument_list pos:line="370" pos:column="20">(<argument><expr><name pos:line="370" pos:column="21">AP_USERDIR_SUFFIX<pos:position pos:line="370" pos:column="38"/></name></expr></argument>)<pos:position pos:line="370" pos:column="39"/></argument_list></call><operator pos:line="370" pos:column="39">)<pos:position pos:line="370" pos:column="40"/></operator> <operator pos:line="370" pos:column="41">!=<pos:position pos:line="370" pos:column="43"/></operator> <literal type="number" pos:line="370" pos:column="44">0<pos:position pos:line="370" pos:column="45"/></literal><operator pos:line="370" pos:column="45">)<pos:position pos:line="370" pos:column="46"/></operator> <operator pos:line="370" pos:column="47">||<pos:position pos:line="370" pos:column="49"/></operator>
            <operator pos:line="371" pos:column="13">(<pos:position pos:line="371" pos:column="14"/></operator><operator pos:line="371" pos:column="14">(<pos:position pos:line="371" pos:column="15"/></operator><call><name pos:line="371" pos:column="15">getcwd<pos:position pos:line="371" pos:column="21"/></name><argument_list pos:line="371" pos:column="21">(<argument><expr><name pos:line="371" pos:column="22">dwd<pos:position pos:line="371" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="371" pos:column="27">AP_MAXPATH<pos:position pos:line="371" pos:column="37"/></name></expr></argument>)<pos:position pos:line="371" pos:column="38"/></argument_list></call><operator pos:line="371" pos:column="38">)<pos:position pos:line="371" pos:column="39"/></operator> <operator pos:line="371" pos:column="40">==<pos:position pos:line="371" pos:column="42"/></operator> <name pos:line="371" pos:column="43">NULL<pos:position pos:line="371" pos:column="47"/></name><operator pos:line="371" pos:column="47">)<pos:position pos:line="371" pos:column="48"/></operator> <operator pos:line="371" pos:column="49">||<pos:position pos:line="371" pos:column="51"/></operator>
            <operator pos:line="372" pos:column="13">(<pos:position pos:line="372" pos:column="14"/></operator><operator pos:line="372" pos:column="14">(<pos:position pos:line="372" pos:column="15"/></operator><call><name pos:line="372" pos:column="15">chdir<pos:position pos:line="372" pos:column="20"/></name><argument_list pos:line="372" pos:column="20">(<argument><expr><name pos:line="372" pos:column="21">cwd<pos:position pos:line="372" pos:column="24"/></name></expr></argument>)<pos:position pos:line="372" pos:column="25"/></argument_list></call><operator pos:line="372" pos:column="25">)<pos:position pos:line="372" pos:column="26"/></operator> <operator pos:line="372" pos:column="27">!=<pos:position pos:line="372" pos:column="29"/></operator> <literal type="number" pos:line="372" pos:column="30">0<pos:position pos:line="372" pos:column="31"/></literal><operator pos:line="372" pos:column="31">)<pos:position pos:line="372" pos:column="32"/></operator></expr>)<pos:position pos:line="372" pos:column="33"/></condition><then pos:line="372" pos:column="33"> <block pos:line="372" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="373" pos:column="13">log_err<pos:position pos:line="373" pos:column="20"/></name><argument_list pos:line="373" pos:column="20">(<argument><expr><literal type="string" pos:line="373" pos:column="21">"cannot get docroot information (%s)\n"<pos:position pos:line="373" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="373" pos:column="62">target_homedir<pos:position pos:line="373" pos:column="76"/></name></expr></argument>)<pos:position pos:line="373" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="78"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="374" pos:column="13">exit<pos:position pos:line="374" pos:column="17"/></name><argument_list pos:line="374" pos:column="17">(<argument><expr><literal type="number" pos:line="374" pos:column="18">112<pos:position pos:line="374" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="374" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="374" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="375" pos:column="10"/></block></then></if>
    }<pos:position pos:line="376" pos:column="6"/></block></then>
    <else pos:line="377" pos:column="5">else <block pos:line="377" pos:column="10">{
        <if pos:line="378" pos:column="9">if <condition pos:line="378" pos:column="12">(<expr><operator pos:line="378" pos:column="13">(<pos:position pos:line="378" pos:column="14"/></operator><operator pos:line="378" pos:column="14">(<pos:position pos:line="378" pos:column="15"/></operator><call><name pos:line="378" pos:column="15">chdir<pos:position pos:line="378" pos:column="20"/></name><argument_list pos:line="378" pos:column="20">(<argument><expr><name pos:line="378" pos:column="21">AP_DOC_ROOT<pos:position pos:line="378" pos:column="32"/></name></expr></argument>)<pos:position pos:line="378" pos:column="33"/></argument_list></call><operator pos:line="378" pos:column="33">)<pos:position pos:line="378" pos:column="34"/></operator> <operator pos:line="378" pos:column="35">!=<pos:position pos:line="378" pos:column="37"/></operator> <literal type="number" pos:line="378" pos:column="38">0<pos:position pos:line="378" pos:column="39"/></literal><operator pos:line="378" pos:column="39">)<pos:position pos:line="378" pos:column="40"/></operator> <operator pos:line="378" pos:column="41">||<pos:position pos:line="378" pos:column="43"/></operator>
            <operator pos:line="379" pos:column="13">(<pos:position pos:line="379" pos:column="14"/></operator><operator pos:line="379" pos:column="14">(<pos:position pos:line="379" pos:column="15"/></operator><call><name pos:line="379" pos:column="15">getcwd<pos:position pos:line="379" pos:column="21"/></name><argument_list pos:line="379" pos:column="21">(<argument><expr><name pos:line="379" pos:column="22">dwd<pos:position pos:line="379" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="379" pos:column="27">AP_MAXPATH<pos:position pos:line="379" pos:column="37"/></name></expr></argument>)<pos:position pos:line="379" pos:column="38"/></argument_list></call><operator pos:line="379" pos:column="38">)<pos:position pos:line="379" pos:column="39"/></operator> <operator pos:line="379" pos:column="40">==<pos:position pos:line="379" pos:column="42"/></operator> <name pos:line="379" pos:column="43">NULL<pos:position pos:line="379" pos:column="47"/></name><operator pos:line="379" pos:column="47">)<pos:position pos:line="379" pos:column="48"/></operator> <operator pos:line="379" pos:column="49">||<pos:position pos:line="379" pos:column="51"/></operator>
            <operator pos:line="380" pos:column="13">(<pos:position pos:line="380" pos:column="14"/></operator><operator pos:line="380" pos:column="14">(<pos:position pos:line="380" pos:column="15"/></operator><call><name pos:line="380" pos:column="15">chdir<pos:position pos:line="380" pos:column="20"/></name><argument_list pos:line="380" pos:column="20">(<argument><expr><name pos:line="380" pos:column="21">cwd<pos:position pos:line="380" pos:column="24"/></name></expr></argument>)<pos:position pos:line="380" pos:column="25"/></argument_list></call><operator pos:line="380" pos:column="25">)<pos:position pos:line="380" pos:column="26"/></operator> <operator pos:line="380" pos:column="27">!=<pos:position pos:line="380" pos:column="29"/></operator> <literal type="number" pos:line="380" pos:column="30">0<pos:position pos:line="380" pos:column="31"/></literal><operator pos:line="380" pos:column="31">)<pos:position pos:line="380" pos:column="32"/></operator></expr>)<pos:position pos:line="380" pos:column="33"/></condition><then pos:line="380" pos:column="33"> <block pos:line="380" pos:column="34">{
            <expr_stmt><expr><call><name pos:line="381" pos:column="13">log_err<pos:position pos:line="381" pos:column="20"/></name><argument_list pos:line="381" pos:column="20">(<argument><expr><literal type="string" pos:line="381" pos:column="21">"cannot get docroot information (%s)\n"<pos:position pos:line="381" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="381" pos:column="62">AP_DOC_ROOT<pos:position pos:line="381" pos:column="73"/></name></expr></argument>)<pos:position pos:line="381" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="381" pos:column="75"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="382" pos:column="13">exit<pos:position pos:line="382" pos:column="17"/></name><argument_list pos:line="382" pos:column="17">(<argument><expr><literal type="number" pos:line="382" pos:column="18">113<pos:position pos:line="382" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="382" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="382" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="383" pos:column="10"/></block></then></if>
    }<pos:position pos:line="384" pos:column="6"/></block></else></if>

    <if pos:line="386" pos:column="5">if <condition pos:line="386" pos:column="8">(<expr><operator pos:line="386" pos:column="9">(<pos:position pos:line="386" pos:column="10"/></operator><call><name pos:line="386" pos:column="10">strncmp<pos:position pos:line="386" pos:column="17"/></name><argument_list pos:line="386" pos:column="17">(<argument><expr><name pos:line="386" pos:column="18">cwd<pos:position pos:line="386" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="386" pos:column="23">dwd<pos:position pos:line="386" pos:column="26"/></name></expr></argument>, <argument><expr><call><name pos:line="386" pos:column="28">strlen<pos:position pos:line="386" pos:column="34"/></name><argument_list pos:line="386" pos:column="34">(<argument><expr><name pos:line="386" pos:column="35">dwd<pos:position pos:line="386" pos:column="38"/></name></expr></argument>)<pos:position pos:line="386" pos:column="39"/></argument_list></call></expr></argument>)<pos:position pos:line="386" pos:column="40"/></argument_list></call><operator pos:line="386" pos:column="40">)<pos:position pos:line="386" pos:column="41"/></operator> <operator pos:line="386" pos:column="42">!=<pos:position pos:line="386" pos:column="44"/></operator> <literal type="number" pos:line="386" pos:column="45">0<pos:position pos:line="386" pos:column="46"/></literal></expr>)<pos:position pos:line="386" pos:column="47"/></condition><then pos:line="386" pos:column="47"> <block pos:line="386" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="387" pos:column="9">log_err<pos:position pos:line="387" pos:column="16"/></name><argument_list pos:line="387" pos:column="16">(<argument><expr><literal type="string" pos:line="387" pos:column="17">"command not in docroot (%s/%s)\n"<pos:position pos:line="387" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="387" pos:column="53">cwd<pos:position pos:line="387" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="387" pos:column="58">cmd<pos:position pos:line="387" pos:column="61"/></name></expr></argument>)<pos:position pos:line="387" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="387" pos:column="63"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="388" pos:column="9">exit<pos:position pos:line="388" pos:column="13"/></name><argument_list pos:line="388" pos:column="13">(<argument><expr><literal type="number" pos:line="388" pos:column="14">114<pos:position pos:line="388" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="388" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="388" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="389" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="391" pos:column="5">/*
     * Stat the cwd and verify it is a directory, or error out.
     */</comment>
    <if pos:line="394" pos:column="5">if <condition pos:line="394" pos:column="8">(<expr><operator pos:line="394" pos:column="9">(<pos:position pos:line="394" pos:column="10"/></operator><operator pos:line="394" pos:column="10">(<pos:position pos:line="394" pos:column="11"/></operator><call><name pos:line="394" pos:column="11">lstat<pos:position pos:line="394" pos:column="16"/></name><argument_list pos:line="394" pos:column="16">(<argument><expr><name pos:line="394" pos:column="17">cwd<pos:position pos:line="394" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="394" pos:column="22">&amp;<pos:position pos:line="394" pos:column="27"/></operator><name pos:line="394" pos:column="23">dir_info<pos:position pos:line="394" pos:column="31"/></name></expr></argument>)<pos:position pos:line="394" pos:column="32"/></argument_list></call><operator pos:line="394" pos:column="32">)<pos:position pos:line="394" pos:column="33"/></operator> <operator pos:line="394" pos:column="34">!=<pos:position pos:line="394" pos:column="36"/></operator> <literal type="number" pos:line="394" pos:column="37">0<pos:position pos:line="394" pos:column="38"/></literal><operator pos:line="394" pos:column="38">)<pos:position pos:line="394" pos:column="39"/></operator> <operator pos:line="394" pos:column="40">||<pos:position pos:line="394" pos:column="42"/></operator> <operator pos:line="394" pos:column="43">!<pos:position pos:line="394" pos:column="44"/></operator><operator pos:line="394" pos:column="44">(<pos:position pos:line="394" pos:column="45"/></operator><call><name pos:line="394" pos:column="45">S_ISDIR<pos:position pos:line="394" pos:column="52"/></name><argument_list pos:line="394" pos:column="52">(<argument><expr><name><name pos:line="394" pos:column="53">dir_info<pos:position pos:line="394" pos:column="61"/></name><operator pos:line="394" pos:column="61">.<pos:position pos:line="394" pos:column="62"/></operator><name pos:line="394" pos:column="62">st_mode<pos:position pos:line="394" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="394" pos:column="70"/></argument_list></call><operator pos:line="394" pos:column="70">)<pos:position pos:line="394" pos:column="71"/></operator></expr>)<pos:position pos:line="394" pos:column="72"/></condition><then pos:line="394" pos:column="72"> <block pos:line="394" pos:column="73">{
        <expr_stmt><expr><call><name pos:line="395" pos:column="9">log_err<pos:position pos:line="395" pos:column="16"/></name><argument_list pos:line="395" pos:column="16">(<argument><expr><literal type="string" pos:line="395" pos:column="17">"cannot stat directory: (%s)\n"<pos:position pos:line="395" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="395" pos:column="50">cwd<pos:position pos:line="395" pos:column="53"/></name></expr></argument>)<pos:position pos:line="395" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="395" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="396" pos:column="9">exit<pos:position pos:line="396" pos:column="13"/></name><argument_list pos:line="396" pos:column="13">(<argument><expr><literal type="number" pos:line="396" pos:column="14">115<pos:position pos:line="396" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="396" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="396" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="397" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="399" pos:column="5">/*
     * Error out if cwd is writable by others.
     */</comment>
    <if pos:line="402" pos:column="5">if <condition pos:line="402" pos:column="8">(<expr><operator pos:line="402" pos:column="9">(<pos:position pos:line="402" pos:column="10"/></operator><name><name pos:line="402" pos:column="10">dir_info<pos:position pos:line="402" pos:column="18"/></name><operator pos:line="402" pos:column="18">.<pos:position pos:line="402" pos:column="19"/></operator><name pos:line="402" pos:column="19">st_mode<pos:position pos:line="402" pos:column="26"/></name></name> <operator pos:line="402" pos:column="27">&amp;<pos:position pos:line="402" pos:column="32"/></operator> <name pos:line="402" pos:column="29">S_IWOTH<pos:position pos:line="402" pos:column="36"/></name><operator pos:line="402" pos:column="36">)<pos:position pos:line="402" pos:column="37"/></operator> <operator pos:line="402" pos:column="38">||<pos:position pos:line="402" pos:column="40"/></operator> <operator pos:line="402" pos:column="41">(<pos:position pos:line="402" pos:column="42"/></operator><name><name pos:line="402" pos:column="42">dir_info<pos:position pos:line="402" pos:column="50"/></name><operator pos:line="402" pos:column="50">.<pos:position pos:line="402" pos:column="51"/></operator><name pos:line="402" pos:column="51">st_mode<pos:position pos:line="402" pos:column="58"/></name></name> <operator pos:line="402" pos:column="59">&amp;<pos:position pos:line="402" pos:column="64"/></operator> <name pos:line="402" pos:column="61">S_IWGRP<pos:position pos:line="402" pos:column="68"/></name><operator pos:line="402" pos:column="68">)<pos:position pos:line="402" pos:column="69"/></operator></expr>)<pos:position pos:line="402" pos:column="70"/></condition><then pos:line="402" pos:column="70"> <block pos:line="402" pos:column="71">{
        <expr_stmt><expr><call><name pos:line="403" pos:column="9">log_err<pos:position pos:line="403" pos:column="16"/></name><argument_list pos:line="403" pos:column="16">(<argument><expr><literal type="string" pos:line="403" pos:column="17">"directory is writable by others: (%s)\n"<pos:position pos:line="403" pos:column="58"/></literal></expr></argument>, <argument><expr><name pos:line="403" pos:column="60">cwd<pos:position pos:line="403" pos:column="63"/></name></expr></argument>)<pos:position pos:line="403" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="403" pos:column="65"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="404" pos:column="9">exit<pos:position pos:line="404" pos:column="13"/></name><argument_list pos:line="404" pos:column="13">(<argument><expr><literal type="number" pos:line="404" pos:column="14">116<pos:position pos:line="404" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="404" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="404" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="405" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="407" pos:column="5">/*
     * Error out if we cannot stat the program.
     */</comment>
    <if pos:line="410" pos:column="5">if <condition pos:line="410" pos:column="8">(<expr><operator pos:line="410" pos:column="9">(<pos:position pos:line="410" pos:column="10"/></operator><operator pos:line="410" pos:column="10">(<pos:position pos:line="410" pos:column="11"/></operator><call><name pos:line="410" pos:column="11">lstat<pos:position pos:line="410" pos:column="16"/></name><argument_list pos:line="410" pos:column="16">(<argument><expr><name pos:line="410" pos:column="17">cmd<pos:position pos:line="410" pos:column="20"/></name></expr></argument>, <argument><expr><operator pos:line="410" pos:column="22">&amp;<pos:position pos:line="410" pos:column="27"/></operator><name pos:line="410" pos:column="23">prg_info<pos:position pos:line="410" pos:column="31"/></name></expr></argument>)<pos:position pos:line="410" pos:column="32"/></argument_list></call><operator pos:line="410" pos:column="32">)<pos:position pos:line="410" pos:column="33"/></operator> <operator pos:line="410" pos:column="34">!=<pos:position pos:line="410" pos:column="36"/></operator> <literal type="number" pos:line="410" pos:column="37">0<pos:position pos:line="410" pos:column="38"/></literal><operator pos:line="410" pos:column="38">)<pos:position pos:line="410" pos:column="39"/></operator> <operator pos:line="410" pos:column="40">||<pos:position pos:line="410" pos:column="42"/></operator> <operator pos:line="410" pos:column="43">(<pos:position pos:line="410" pos:column="44"/></operator><call><name pos:line="410" pos:column="44">S_ISLNK<pos:position pos:line="410" pos:column="51"/></name><argument_list pos:line="410" pos:column="51">(<argument><expr><name><name pos:line="410" pos:column="52">prg_info<pos:position pos:line="410" pos:column="60"/></name><operator pos:line="410" pos:column="60">.<pos:position pos:line="410" pos:column="61"/></operator><name pos:line="410" pos:column="61">st_mode<pos:position pos:line="410" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="410" pos:column="69"/></argument_list></call><operator pos:line="410" pos:column="69">)<pos:position pos:line="410" pos:column="70"/></operator></expr>)<pos:position pos:line="410" pos:column="71"/></condition><then pos:line="410" pos:column="71"> <block pos:line="410" pos:column="72">{
        <expr_stmt><expr><call><name pos:line="411" pos:column="9">log_err<pos:position pos:line="411" pos:column="16"/></name><argument_list pos:line="411" pos:column="16">(<argument><expr><literal type="string" pos:line="411" pos:column="17">"cannot stat program: (%s)\n"<pos:position pos:line="411" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="411" pos:column="48">cmd<pos:position pos:line="411" pos:column="51"/></name></expr></argument>)<pos:position pos:line="411" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="411" pos:column="53"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="412" pos:column="9">exit<pos:position pos:line="412" pos:column="13"/></name><argument_list pos:line="412" pos:column="13">(<argument><expr><literal type="number" pos:line="412" pos:column="14">117<pos:position pos:line="412" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="412" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="412" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="413" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="415" pos:column="5">/*
     * Error out if the program is writable by others.
     */</comment>
    <if pos:line="418" pos:column="5">if <condition pos:line="418" pos:column="8">(<expr><operator pos:line="418" pos:column="9">(<pos:position pos:line="418" pos:column="10"/></operator><name><name pos:line="418" pos:column="10">prg_info<pos:position pos:line="418" pos:column="18"/></name><operator pos:line="418" pos:column="18">.<pos:position pos:line="418" pos:column="19"/></operator><name pos:line="418" pos:column="19">st_mode<pos:position pos:line="418" pos:column="26"/></name></name> <operator pos:line="418" pos:column="27">&amp;<pos:position pos:line="418" pos:column="32"/></operator> <name pos:line="418" pos:column="29">S_IWOTH<pos:position pos:line="418" pos:column="36"/></name><operator pos:line="418" pos:column="36">)<pos:position pos:line="418" pos:column="37"/></operator> <operator pos:line="418" pos:column="38">||<pos:position pos:line="418" pos:column="40"/></operator> <operator pos:line="418" pos:column="41">(<pos:position pos:line="418" pos:column="42"/></operator><name><name pos:line="418" pos:column="42">prg_info<pos:position pos:line="418" pos:column="50"/></name><operator pos:line="418" pos:column="50">.<pos:position pos:line="418" pos:column="51"/></operator><name pos:line="418" pos:column="51">st_mode<pos:position pos:line="418" pos:column="58"/></name></name> <operator pos:line="418" pos:column="59">&amp;<pos:position pos:line="418" pos:column="64"/></operator> <name pos:line="418" pos:column="61">S_IWGRP<pos:position pos:line="418" pos:column="68"/></name><operator pos:line="418" pos:column="68">)<pos:position pos:line="418" pos:column="69"/></operator></expr>)<pos:position pos:line="418" pos:column="70"/></condition><then pos:line="418" pos:column="70"> <block pos:line="418" pos:column="71">{
        <expr_stmt><expr><call><name pos:line="419" pos:column="9">log_err<pos:position pos:line="419" pos:column="16"/></name><argument_list pos:line="419" pos:column="16">(<argument><expr><literal type="string" pos:line="419" pos:column="17">"file is writable by others: (%s/%s)\n"<pos:position pos:line="419" pos:column="56"/></literal></expr></argument>, <argument><expr><name pos:line="419" pos:column="58">cwd<pos:position pos:line="419" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="419" pos:column="63">cmd<pos:position pos:line="419" pos:column="66"/></name></expr></argument>)<pos:position pos:line="419" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="419" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="420" pos:column="9">exit<pos:position pos:line="420" pos:column="13"/></name><argument_list pos:line="420" pos:column="13">(<argument><expr><literal type="number" pos:line="420" pos:column="14">118<pos:position pos:line="420" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="420" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="420" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="421" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="423" pos:column="5">/*
     * Error out if the file is setuid or setgid.
     */</comment>
    <if pos:line="426" pos:column="5">if <condition pos:line="426" pos:column="8">(<expr><operator pos:line="426" pos:column="9">(<pos:position pos:line="426" pos:column="10"/></operator><name><name pos:line="426" pos:column="10">prg_info<pos:position pos:line="426" pos:column="18"/></name><operator pos:line="426" pos:column="18">.<pos:position pos:line="426" pos:column="19"/></operator><name pos:line="426" pos:column="19">st_mode<pos:position pos:line="426" pos:column="26"/></name></name> <operator pos:line="426" pos:column="27">&amp;<pos:position pos:line="426" pos:column="32"/></operator> <name pos:line="426" pos:column="29">S_ISUID<pos:position pos:line="426" pos:column="36"/></name><operator pos:line="426" pos:column="36">)<pos:position pos:line="426" pos:column="37"/></operator> <operator pos:line="426" pos:column="38">||<pos:position pos:line="426" pos:column="40"/></operator> <operator pos:line="426" pos:column="41">(<pos:position pos:line="426" pos:column="42"/></operator><name><name pos:line="426" pos:column="42">prg_info<pos:position pos:line="426" pos:column="50"/></name><operator pos:line="426" pos:column="50">.<pos:position pos:line="426" pos:column="51"/></operator><name pos:line="426" pos:column="51">st_mode<pos:position pos:line="426" pos:column="58"/></name></name> <operator pos:line="426" pos:column="59">&amp;<pos:position pos:line="426" pos:column="64"/></operator> <name pos:line="426" pos:column="61">S_ISGID<pos:position pos:line="426" pos:column="68"/></name><operator pos:line="426" pos:column="68">)<pos:position pos:line="426" pos:column="69"/></operator></expr>)<pos:position pos:line="426" pos:column="70"/></condition><then pos:line="426" pos:column="70"> <block pos:line="426" pos:column="71">{
        <expr_stmt><expr><call><name pos:line="427" pos:column="9">log_err<pos:position pos:line="427" pos:column="16"/></name><argument_list pos:line="427" pos:column="16">(<argument><expr><literal type="string" pos:line="427" pos:column="17">"file is either setuid or setgid: (%s/%s)\n"<pos:position pos:line="427" pos:column="61"/></literal></expr></argument>, <argument><expr><name pos:line="427" pos:column="63">cwd<pos:position pos:line="427" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="427" pos:column="68">cmd<pos:position pos:line="427" pos:column="71"/></name></expr></argument>)<pos:position pos:line="427" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="427" pos:column="73"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="428" pos:column="9">exit<pos:position pos:line="428" pos:column="13"/></name><argument_list pos:line="428" pos:column="13">(<argument><expr><literal type="number" pos:line="428" pos:column="14">119<pos:position pos:line="428" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="428" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="428" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="429" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="431" pos:column="5">/*
     * Error out if the target name/group is different from
     * the name/group of the cwd or the program.
     */</comment>
    <if pos:line="435" pos:column="5">if <condition pos:line="435" pos:column="8">(<expr><operator pos:line="435" pos:column="9">(<pos:position pos:line="435" pos:column="10"/></operator><name pos:line="435" pos:column="10">uid<pos:position pos:line="435" pos:column="13"/></name> <operator pos:line="435" pos:column="14">!=<pos:position pos:line="435" pos:column="16"/></operator> <name><name pos:line="435" pos:column="17">dir_info<pos:position pos:line="435" pos:column="25"/></name><operator pos:line="435" pos:column="25">.<pos:position pos:line="435" pos:column="26"/></operator><name pos:line="435" pos:column="26">st_uid<pos:position pos:line="435" pos:column="32"/></name></name><operator pos:line="435" pos:column="32">)<pos:position pos:line="435" pos:column="33"/></operator> <operator pos:line="435" pos:column="34">||<pos:position pos:line="435" pos:column="36"/></operator>
        <operator pos:line="436" pos:column="9">(<pos:position pos:line="436" pos:column="10"/></operator><name pos:line="436" pos:column="10">gid<pos:position pos:line="436" pos:column="13"/></name> <operator pos:line="436" pos:column="14">!=<pos:position pos:line="436" pos:column="16"/></operator> <name><name pos:line="436" pos:column="17">dir_info<pos:position pos:line="436" pos:column="25"/></name><operator pos:line="436" pos:column="25">.<pos:position pos:line="436" pos:column="26"/></operator><name pos:line="436" pos:column="26">st_gid<pos:position pos:line="436" pos:column="32"/></name></name><operator pos:line="436" pos:column="32">)<pos:position pos:line="436" pos:column="33"/></operator> <operator pos:line="436" pos:column="34">||<pos:position pos:line="436" pos:column="36"/></operator>
        <operator pos:line="437" pos:column="9">(<pos:position pos:line="437" pos:column="10"/></operator><name pos:line="437" pos:column="10">uid<pos:position pos:line="437" pos:column="13"/></name> <operator pos:line="437" pos:column="14">!=<pos:position pos:line="437" pos:column="16"/></operator> <name><name pos:line="437" pos:column="17">prg_info<pos:position pos:line="437" pos:column="25"/></name><operator pos:line="437" pos:column="25">.<pos:position pos:line="437" pos:column="26"/></operator><name pos:line="437" pos:column="26">st_uid<pos:position pos:line="437" pos:column="32"/></name></name><operator pos:line="437" pos:column="32">)<pos:position pos:line="437" pos:column="33"/></operator> <operator pos:line="437" pos:column="34">||<pos:position pos:line="437" pos:column="36"/></operator>
        <operator pos:line="438" pos:column="9">(<pos:position pos:line="438" pos:column="10"/></operator><name pos:line="438" pos:column="10">gid<pos:position pos:line="438" pos:column="13"/></name> <operator pos:line="438" pos:column="14">!=<pos:position pos:line="438" pos:column="16"/></operator> <name><name pos:line="438" pos:column="17">prg_info<pos:position pos:line="438" pos:column="25"/></name><operator pos:line="438" pos:column="25">.<pos:position pos:line="438" pos:column="26"/></operator><name pos:line="438" pos:column="26">st_gid<pos:position pos:line="438" pos:column="32"/></name></name><operator pos:line="438" pos:column="32">)<pos:position pos:line="438" pos:column="33"/></operator></expr>)<pos:position pos:line="438" pos:column="34"/></condition><then pos:line="438" pos:column="34"> <block pos:line="438" pos:column="35">{
        <expr_stmt><expr><call><name pos:line="439" pos:column="9">log_err<pos:position pos:line="439" pos:column="16"/></name><argument_list pos:line="439" pos:column="16">(<argument><expr><literal type="string" pos:line="439" pos:column="17">"target uid/gid (%lu/%lu) mismatch "<pos:position pos:line="439" pos:column="53"/></literal>
                <literal type="string" pos:line="440" pos:column="17">"with directory (%lu/%lu) or program (%lu/%lu)\n"<pos:position pos:line="440" pos:column="66"/></literal></expr></argument>,
                <argument><expr><operator pos:line="441" pos:column="17">(<pos:position pos:line="441" pos:column="18"/></operator><name pos:line="441" pos:column="18">unsigned<pos:position pos:line="441" pos:column="26"/></name> <name pos:line="441" pos:column="27">long<pos:position pos:line="441" pos:column="31"/></name><operator pos:line="441" pos:column="31">)<pos:position pos:line="441" pos:column="32"/></operator><name pos:line="441" pos:column="32">uid<pos:position pos:line="441" pos:column="35"/></name></expr></argument>, <argument><expr><operator pos:line="441" pos:column="37">(<pos:position pos:line="441" pos:column="38"/></operator><name pos:line="441" pos:column="38">unsigned<pos:position pos:line="441" pos:column="46"/></name> <name pos:line="441" pos:column="47">long<pos:position pos:line="441" pos:column="51"/></name><operator pos:line="441" pos:column="51">)<pos:position pos:line="441" pos:column="52"/></operator><name pos:line="441" pos:column="52">gid<pos:position pos:line="441" pos:column="55"/></name></expr></argument>,
                <argument><expr><operator pos:line="442" pos:column="17">(<pos:position pos:line="442" pos:column="18"/></operator><name pos:line="442" pos:column="18">unsigned<pos:position pos:line="442" pos:column="26"/></name> <name pos:line="442" pos:column="27">long<pos:position pos:line="442" pos:column="31"/></name><operator pos:line="442" pos:column="31">)<pos:position pos:line="442" pos:column="32"/></operator><name><name pos:line="442" pos:column="32">dir_info<pos:position pos:line="442" pos:column="40"/></name><operator pos:line="442" pos:column="40">.<pos:position pos:line="442" pos:column="41"/></operator><name pos:line="442" pos:column="41">st_uid<pos:position pos:line="442" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="442" pos:column="49">(<pos:position pos:line="442" pos:column="50"/></operator><name pos:line="442" pos:column="50">unsigned<pos:position pos:line="442" pos:column="58"/></name> <name pos:line="442" pos:column="59">long<pos:position pos:line="442" pos:column="63"/></name><operator pos:line="442" pos:column="63">)<pos:position pos:line="442" pos:column="64"/></operator><name><name pos:line="442" pos:column="64">dir_info<pos:position pos:line="442" pos:column="72"/></name><operator pos:line="442" pos:column="72">.<pos:position pos:line="442" pos:column="73"/></operator><name pos:line="442" pos:column="73">st_gid<pos:position pos:line="442" pos:column="79"/></name></name></expr></argument>,
                <argument><expr><operator pos:line="443" pos:column="17">(<pos:position pos:line="443" pos:column="18"/></operator><name pos:line="443" pos:column="18">unsigned<pos:position pos:line="443" pos:column="26"/></name> <name pos:line="443" pos:column="27">long<pos:position pos:line="443" pos:column="31"/></name><operator pos:line="443" pos:column="31">)<pos:position pos:line="443" pos:column="32"/></operator><name><name pos:line="443" pos:column="32">prg_info<pos:position pos:line="443" pos:column="40"/></name><operator pos:line="443" pos:column="40">.<pos:position pos:line="443" pos:column="41"/></operator><name pos:line="443" pos:column="41">st_uid<pos:position pos:line="443" pos:column="47"/></name></name></expr></argument>, <argument><expr><operator pos:line="443" pos:column="49">(<pos:position pos:line="443" pos:column="50"/></operator><name pos:line="443" pos:column="50">unsigned<pos:position pos:line="443" pos:column="58"/></name> <name pos:line="443" pos:column="59">long<pos:position pos:line="443" pos:column="63"/></name><operator pos:line="443" pos:column="63">)<pos:position pos:line="443" pos:column="64"/></operator><name><name pos:line="443" pos:column="64">prg_info<pos:position pos:line="443" pos:column="72"/></name><operator pos:line="443" pos:column="72">.<pos:position pos:line="443" pos:column="73"/></operator><name pos:line="443" pos:column="73">st_gid<pos:position pos:line="443" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="443" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="443" pos:column="81"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="444" pos:column="9">exit<pos:position pos:line="444" pos:column="13"/></name><argument_list pos:line="444" pos:column="13">(<argument><expr><literal type="number" pos:line="444" pos:column="14">120<pos:position pos:line="444" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="444" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="444" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="445" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="446" pos:column="5">/*
     * Error out if the program is not executable for the user.
     * Otherwise, she won't find any error in the logs except for
     * "[error] Premature end of script headers: ..."
     */</comment>
    <if pos:line="451" pos:column="5">if <condition pos:line="451" pos:column="8">(<expr><operator pos:line="451" pos:column="9">!<pos:position pos:line="451" pos:column="10"/></operator><operator pos:line="451" pos:column="10">(<pos:position pos:line="451" pos:column="11"/></operator><name><name pos:line="451" pos:column="11">prg_info<pos:position pos:line="451" pos:column="19"/></name><operator pos:line="451" pos:column="19">.<pos:position pos:line="451" pos:column="20"/></operator><name pos:line="451" pos:column="20">st_mode<pos:position pos:line="451" pos:column="27"/></name></name> <operator pos:line="451" pos:column="28">&amp;<pos:position pos:line="451" pos:column="33"/></operator> <name pos:line="451" pos:column="30">S_IXUSR<pos:position pos:line="451" pos:column="37"/></name><operator pos:line="451" pos:column="37">)<pos:position pos:line="451" pos:column="38"/></operator></expr>)<pos:position pos:line="451" pos:column="39"/></condition><then pos:line="451" pos:column="39"> <block pos:line="451" pos:column="40">{
        <expr_stmt><expr><call><name pos:line="452" pos:column="9">log_err<pos:position pos:line="452" pos:column="16"/></name><argument_list pos:line="452" pos:column="16">(<argument><expr><literal type="string" pos:line="452" pos:column="17">"file has no execute permission: (%s/%s)\n"<pos:position pos:line="452" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="452" pos:column="62">cwd<pos:position pos:line="452" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="452" pos:column="67">cmd<pos:position pos:line="452" pos:column="70"/></name></expr></argument>)<pos:position pos:line="452" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="452" pos:column="72"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="453" pos:column="9">exit<pos:position pos:line="453" pos:column="13"/></name><argument_list pos:line="453" pos:column="13">(<argument><expr><literal type="number" pos:line="453" pos:column="14">121<pos:position pos:line="453" pos:column="17"/></literal></expr></argument>)<pos:position pos:line="453" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="453" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="454" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="456" pos:column="1">#<cpp:directive pos:line="456" pos:column="2">ifdef<pos:position pos:line="456" pos:column="7"/></cpp:directive> <name pos:line="456" pos:column="8">AP_SUEXEC_UMASK<pos:position pos:line="456" pos:column="23"/></name></cpp:ifdef>
    <comment type="block" pos:line="457" pos:column="5">/*
     * umask() uses inverse logic; bits are CLEAR for allowed access.
     */</comment>
    <if pos:line="460" pos:column="5">if <condition pos:line="460" pos:column="8">(<expr><operator pos:line="460" pos:column="9">(<pos:position pos:line="460" pos:column="10"/></operator><operator pos:line="460" pos:column="10">~<pos:position pos:line="460" pos:column="11"/></operator><name pos:line="460" pos:column="11">AP_SUEXEC_UMASK<pos:position pos:line="460" pos:column="26"/></name><operator pos:line="460" pos:column="26">)<pos:position pos:line="460" pos:column="27"/></operator> <operator pos:line="460" pos:column="28">&amp;<pos:position pos:line="460" pos:column="33"/></operator> <literal type="number" pos:line="460" pos:column="30">0022<pos:position pos:line="460" pos:column="34"/></literal></expr>)<pos:position pos:line="460" pos:column="35"/></condition><then pos:line="460" pos:column="35"> <block pos:line="460" pos:column="36">{
        <expr_stmt><expr><call><name pos:line="461" pos:column="9">log_err<pos:position pos:line="461" pos:column="16"/></name><argument_list pos:line="461" pos:column="16">(<argument><expr><literal type="string" pos:line="461" pos:column="17">"notice: AP_SUEXEC_UMASK of %03o allows "<pos:position pos:line="461" pos:column="58"/></literal>
                <literal type="string" pos:line="462" pos:column="17">"write permission to group and/or other\n"<pos:position pos:line="462" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="462" pos:column="61">AP_SUEXEC_UMASK<pos:position pos:line="462" pos:column="76"/></name></expr></argument>)<pos:position pos:line="462" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="462" pos:column="78"/></expr_stmt>
    }<pos:position pos:line="463" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="464" pos:column="5">umask<pos:position pos:line="464" pos:column="10"/></name><argument_list pos:line="464" pos:column="10">(<argument><expr><name pos:line="464" pos:column="11">AP_SUEXEC_UMASK<pos:position pos:line="464" pos:column="26"/></name></expr></argument>)<pos:position pos:line="464" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="464" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="465" pos:column="1">#<cpp:directive pos:line="465" pos:column="2">endif<pos:position pos:line="465" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="465" pos:column="8">/* AP_SUEXEC_UMASK */</comment>

    <comment type="block" pos:line="467" pos:column="5">/* Be sure to close the log file so the CGI can't mess with it. */</comment>
    <if pos:line="468" pos:column="5">if <condition pos:line="468" pos:column="8">(<expr><name pos:line="468" pos:column="9">log<pos:position pos:line="468" pos:column="12"/></name> <operator pos:line="468" pos:column="13">!=<pos:position pos:line="468" pos:column="15"/></operator> <name pos:line="468" pos:column="16">NULL<pos:position pos:line="468" pos:column="20"/></name></expr>)<pos:position pos:line="468" pos:column="21"/></condition><then pos:line="468" pos:column="21"> <block pos:line="468" pos:column="22">{
<cpp:if pos:line="469" pos:column="1">#<cpp:directive pos:line="469" pos:column="2">if<pos:position pos:line="469" pos:column="4"/></cpp:directive> <expr><name pos:line="469" pos:column="5">APR_HAVE_FCNTL_H<pos:position pos:line="469" pos:column="21"/></name></expr></cpp:if>
        <comment type="block" pos:line="470" pos:column="9">/*
         * ask fcntl(2) to set the FD_CLOEXEC flag on the log file,
         * so it'll be automagically closed if the exec() call succeeds.
         */</comment>
        <expr_stmt><expr><call><name pos:line="474" pos:column="9">fflush<pos:position pos:line="474" pos:column="15"/></name><argument_list pos:line="474" pos:column="15">(<argument><expr><name pos:line="474" pos:column="16">log<pos:position pos:line="474" pos:column="19"/></name></expr></argument>)<pos:position pos:line="474" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="474" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="475" pos:column="9">setbuf<pos:position pos:line="475" pos:column="15"/></name><argument_list pos:line="475" pos:column="15">(<argument><expr><name pos:line="475" pos:column="16">log<pos:position pos:line="475" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="475" pos:column="21">NULL<pos:position pos:line="475" pos:column="25"/></name></expr></argument>)<pos:position pos:line="475" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="475" pos:column="27"/></expr_stmt>
        <if pos:line="476" pos:column="9">if <condition pos:line="476" pos:column="12">(<expr><operator pos:line="476" pos:column="13">(<pos:position pos:line="476" pos:column="14"/></operator><call><name pos:line="476" pos:column="14">fcntl<pos:position pos:line="476" pos:column="19"/></name><argument_list pos:line="476" pos:column="19">(<argument><expr><call><name pos:line="476" pos:column="20">fileno<pos:position pos:line="476" pos:column="26"/></name><argument_list pos:line="476" pos:column="26">(<argument><expr><name pos:line="476" pos:column="27">log<pos:position pos:line="476" pos:column="30"/></name></expr></argument>)<pos:position pos:line="476" pos:column="31"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="476" pos:column="33">F_SETFD<pos:position pos:line="476" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="476" pos:column="42">FD_CLOEXEC<pos:position pos:line="476" pos:column="52"/></name></expr></argument>)<pos:position pos:line="476" pos:column="53"/></argument_list></call> <operator pos:line="476" pos:column="54">==<pos:position pos:line="476" pos:column="56"/></operator> <operator pos:line="476" pos:column="57">-<pos:position pos:line="476" pos:column="58"/></operator><literal type="number" pos:line="476" pos:column="58">1<pos:position pos:line="476" pos:column="59"/></literal><operator pos:line="476" pos:column="59">)<pos:position pos:line="476" pos:column="60"/></operator></expr>)<pos:position pos:line="476" pos:column="61"/></condition><then pos:line="476" pos:column="61"> <block pos:line="476" pos:column="62">{
            <expr_stmt><expr><call><name pos:line="477" pos:column="13">log_err<pos:position pos:line="477" pos:column="20"/></name><argument_list pos:line="477" pos:column="20">(<argument><expr><literal type="string" pos:line="477" pos:column="21">"error: can't set close-on-exec flag"<pos:position pos:line="477" pos:column="58"/></literal></expr></argument>)<pos:position pos:line="477" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="477" pos:column="60"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="478" pos:column="13">exit<pos:position pos:line="478" pos:column="17"/></name><argument_list pos:line="478" pos:column="17">(<argument><expr><literal type="number" pos:line="478" pos:column="18">122<pos:position pos:line="478" pos:column="21"/></literal></expr></argument>)<pos:position pos:line="478" pos:column="22"/></argument_list></call></expr>;<pos:position pos:line="478" pos:column="23"/></expr_stmt>
        }<pos:position pos:line="479" pos:column="10"/></block></then></if>
<cpp:else pos:line="480" pos:column="1">#<cpp:directive pos:line="480" pos:column="2">else<pos:position pos:line="480" pos:column="6"/></cpp:directive></cpp:else>
        <comment type="block" pos:line="481" pos:column="9">/*
         * In this case, exec() errors won't be logged because we have already
         * dropped privileges and won't be able to reopen the log file.
         */</comment>
        <expr_stmt><expr><call><name pos:line="485" pos:column="9">fclose<pos:position pos:line="485" pos:column="15"/></name><argument_list pos:line="485" pos:column="15">(<argument><expr><name pos:line="485" pos:column="16">log<pos:position pos:line="485" pos:column="19"/></name></expr></argument>)<pos:position pos:line="485" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="485" pos:column="21"/></expr_stmt>
        <expr_stmt><expr><name pos:line="486" pos:column="9">log<pos:position pos:line="486" pos:column="12"/></name> <operator pos:line="486" pos:column="13">=<pos:position pos:line="486" pos:column="14"/></operator> <name pos:line="486" pos:column="15">NULL<pos:position pos:line="486" pos:column="19"/></name></expr>;<pos:position pos:line="486" pos:column="20"/></expr_stmt>
<cpp:endif pos:line="487" pos:column="1">#<cpp:directive pos:line="487" pos:column="2">endif<pos:position pos:line="487" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="488" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="490" pos:column="5">/*
     * Execute the command, replacing our image with its own.
     */</comment>
<cpp:ifdef pos:line="493" pos:column="1">#<cpp:directive pos:line="493" pos:column="2">ifdef<pos:position pos:line="493" pos:column="7"/></cpp:directive> <name pos:line="493" pos:column="8">NEED_HASHBANG_EMUL<pos:position pos:line="493" pos:column="26"/></name></cpp:ifdef>
    <comment type="block" pos:line="494" pos:column="5">/* We need the #! emulation when we want to execute scripts */</comment>
    <block pos:line="495" pos:column="5">{
        <decl_stmt><decl><specifier pos:line="496" pos:column="9">extern<pos:position pos:line="496" pos:column="15"/></specifier> <type><name pos:line="496" pos:column="16">char<pos:position pos:line="496" pos:column="20"/></name> <modifier pos:line="496" pos:column="21">*<pos:position pos:line="496" pos:column="22"/></modifier><modifier pos:line="496" pos:column="22">*<pos:position pos:line="496" pos:column="23"/></modifier></type><name pos:line="496" pos:column="23">environ<pos:position pos:line="496" pos:column="30"/></name></decl>;<pos:position pos:line="496" pos:column="31"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="498" pos:column="9">ap_execve<pos:position pos:line="498" pos:column="18"/></name><argument_list pos:line="498" pos:column="18">(<argument><expr><name pos:line="498" pos:column="19">cmd<pos:position pos:line="498" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="498" pos:column="24">&amp;<pos:position pos:line="498" pos:column="29"/></operator><name><name pos:line="498" pos:column="25">argv<pos:position pos:line="498" pos:column="29"/></name><index pos:line="498" pos:column="29">[<expr><literal type="number" pos:line="498" pos:column="30">3<pos:position pos:line="498" pos:column="31"/></literal></expr>]<pos:position pos:line="498" pos:column="32"/></index></name></expr></argument>, <argument><expr><name pos:line="498" pos:column="34">environ<pos:position pos:line="498" pos:column="41"/></name></expr></argument>)<pos:position pos:line="498" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="498" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="499" pos:column="6"/></block>
<cpp:else pos:line="500" pos:column="1">#<cpp:directive pos:line="500" pos:column="2">else<pos:position pos:line="500" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="500" pos:column="7">/*NEED_HASHBANG_EMUL*/</comment>
    <expr_stmt><expr><call><name pos:line="501" pos:column="5">execv<pos:position pos:line="501" pos:column="10"/></name><argument_list pos:line="501" pos:column="10">(<argument><expr><name pos:line="501" pos:column="11">cmd<pos:position pos:line="501" pos:column="14"/></name></expr></argument>, <argument><expr><operator pos:line="501" pos:column="16">&amp;<pos:position pos:line="501" pos:column="21"/></operator><name><name pos:line="501" pos:column="17">argv<pos:position pos:line="501" pos:column="21"/></name><index pos:line="501" pos:column="21">[<expr><literal type="number" pos:line="501" pos:column="22">3<pos:position pos:line="501" pos:column="23"/></literal></expr>]<pos:position pos:line="501" pos:column="24"/></index></name></expr></argument>)<pos:position pos:line="501" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="501" pos:column="26"/></expr_stmt>
<cpp:endif pos:line="502" pos:column="1">#<cpp:directive pos:line="502" pos:column="2">endif<pos:position pos:line="502" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="502" pos:column="8">/*NEED_HASHBANG_EMUL*/</comment>

    <comment type="block" pos:line="504" pos:column="5">/*
     * (I can't help myself...sorry.)
     *
     * Uh oh.  Still here.  Where's the kaboom?  There was supposed to be an
     * EARTH-shattering kaboom!
     *
     * Oh well, log the failure and error out.
     */</comment>
    <expr_stmt><expr><call><name pos:line="512" pos:column="5">log_err<pos:position pos:line="512" pos:column="12"/></name><argument_list pos:line="512" pos:column="12">(<argument><expr><literal type="string" pos:line="512" pos:column="13">"(%d)%s: exec failed (%s)\n"<pos:position pos:line="512" pos:column="41"/></literal></expr></argument>, <argument><expr><name pos:line="512" pos:column="43">errno<pos:position pos:line="512" pos:column="48"/></name></expr></argument>, <argument><expr><call><name pos:line="512" pos:column="50">strerror<pos:position pos:line="512" pos:column="58"/></name><argument_list pos:line="512" pos:column="58">(<argument><expr><name pos:line="512" pos:column="59">errno<pos:position pos:line="512" pos:column="64"/></name></expr></argument>)<pos:position pos:line="512" pos:column="65"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="512" pos:column="67">cmd<pos:position pos:line="512" pos:column="70"/></name></expr></argument>)<pos:position pos:line="512" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="512" pos:column="72"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="513" pos:column="5">exit<pos:position pos:line="513" pos:column="9"/></name><argument_list pos:line="513" pos:column="9">(<argument><expr><literal type="number" pos:line="513" pos:column="10">255<pos:position pos:line="513" pos:column="13"/></literal></expr></argument>)<pos:position pos:line="513" pos:column="14"/></argument_list></call></expr>;<pos:position pos:line="513" pos:column="15"/></expr_stmt>
}<pos:position pos:line="514" pos:column="2"/></block></function></unit>
