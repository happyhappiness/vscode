<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_440_httpd-2.2.4.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">log_escape<pos:position pos:line="1" pos:column="24"/></name><parameter_list pos:line="1" pos:column="24">(<parameter><decl><type><name pos:line="1" pos:column="25">char<pos:position pos:line="1" pos:column="29"/></name> <modifier pos:line="1" pos:column="30">*<pos:position pos:line="1" pos:column="31"/></modifier></type><name pos:line="1" pos:column="31">q<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="34">const<pos:position pos:line="1" pos:column="39"/></specifier> <name pos:line="1" pos:column="40">char<pos:position pos:line="1" pos:column="44"/></name> <modifier pos:line="1" pos:column="45">*<pos:position pos:line="1" pos:column="46"/></modifier></type><name pos:line="1" pos:column="46">e<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="49">const<pos:position pos:line="1" pos:column="54"/></specifier> <name pos:line="1" pos:column="55">char<pos:position pos:line="1" pos:column="59"/></name> <modifier pos:line="1" pos:column="60">*<pos:position pos:line="1" pos:column="61"/></modifier></type><name pos:line="1" pos:column="61">p<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <for pos:line="3" pos:column="5">for <control pos:line="3" pos:column="9">( <init pos:line="3" pos:column="11">;<pos:position pos:line="3" pos:column="12"/></init> <condition><expr><operator pos:line="3" pos:column="13">*<pos:position pos:line="3" pos:column="14"/></operator><name pos:line="3" pos:column="14">p<pos:position pos:line="3" pos:column="15"/></name></expr> ;<pos:position pos:line="3" pos:column="17"/></condition> <incr><expr><operator pos:line="3" pos:column="18">++<pos:position pos:line="3" pos:column="20"/></operator><name pos:line="3" pos:column="20">p<pos:position pos:line="3" pos:column="21"/></name></expr></incr>)<pos:position pos:line="3" pos:column="22"/></control> <block pos:line="3" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="4" pos:column="9">ap_assert<pos:position pos:line="4" pos:column="18"/></name><argument_list pos:line="4" pos:column="18">(<argument><expr><name pos:line="4" pos:column="19">q<pos:position pos:line="4" pos:column="20"/></name> <operator pos:line="4" pos:column="21">&lt;<pos:position pos:line="4" pos:column="25"/></operator> <name pos:line="4" pos:column="23">e<pos:position pos:line="4" pos:column="24"/></name></expr></argument>)<pos:position pos:line="4" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="26"/></expr_stmt>
        <if pos:line="5" pos:column="9">if <condition pos:line="5" pos:column="12">(<expr><name><name pos:line="5" pos:column="13">test_char_table<pos:position pos:line="5" pos:column="28"/></name><index pos:line="5" pos:column="28">[<expr><operator pos:line="5" pos:column="29">*<pos:position pos:line="5" pos:column="30"/></operator><operator pos:line="5" pos:column="30">(<pos:position pos:line="5" pos:column="31"/></operator><name pos:line="5" pos:column="31">unsigned<pos:position pos:line="5" pos:column="39"/></name> <name pos:line="5" pos:column="40">char<pos:position pos:line="5" pos:column="44"/></name> <operator pos:line="5" pos:column="45">*<pos:position pos:line="5" pos:column="46"/></operator><operator pos:line="5" pos:column="46">)<pos:position pos:line="5" pos:column="47"/></operator><name pos:line="5" pos:column="47">p<pos:position pos:line="5" pos:column="48"/></name></expr>]<pos:position pos:line="5" pos:column="49"/></index></name><operator pos:line="5" pos:column="49">&amp;<pos:position pos:line="5" pos:column="54"/></operator><name pos:line="5" pos:column="50">T_ESCAPE_FORENSIC<pos:position pos:line="5" pos:column="67"/></name></expr>)<pos:position pos:line="5" pos:column="68"/></condition><then pos:line="5" pos:column="68"> <block pos:line="5" pos:column="69">{
            <expr_stmt><expr><call><name pos:line="6" pos:column="13">ap_assert<pos:position pos:line="6" pos:column="22"/></name><argument_list pos:line="6" pos:column="22">(<argument><expr><name pos:line="6" pos:column="23">q<pos:position pos:line="6" pos:column="24"/></name><operator pos:line="6" pos:column="24">+<pos:position pos:line="6" pos:column="25"/></operator><literal type="number" pos:line="6" pos:column="25">2<pos:position pos:line="6" pos:column="26"/></literal> <operator pos:line="6" pos:column="27">&lt;<pos:position pos:line="6" pos:column="31"/></operator> <name pos:line="6" pos:column="29">e<pos:position pos:line="6" pos:column="30"/></name></expr></argument>)<pos:position pos:line="6" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="32"/></expr_stmt>
            <expr_stmt><expr><operator pos:line="7" pos:column="13">*<pos:position pos:line="7" pos:column="14"/></operator><name pos:line="7" pos:column="14">q<pos:position pos:line="7" pos:column="15"/></name><operator pos:line="7" pos:column="15">++<pos:position pos:line="7" pos:column="17"/></operator> <operator pos:line="7" pos:column="18">=<pos:position pos:line="7" pos:column="19"/></operator> <literal type="char" pos:line="7" pos:column="20">'%'<pos:position pos:line="7" pos:column="23"/></literal></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="8" pos:column="13">sprintf<pos:position pos:line="8" pos:column="20"/></name><argument_list pos:line="8" pos:column="20">(<argument><expr><name pos:line="8" pos:column="21">q<pos:position pos:line="8" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="8" pos:column="24">"%02x"<pos:position pos:line="8" pos:column="30"/></literal></expr></argument>, <argument><expr><operator pos:line="8" pos:column="32">*<pos:position pos:line="8" pos:column="33"/></operator><operator pos:line="8" pos:column="33">(<pos:position pos:line="8" pos:column="34"/></operator><name pos:line="8" pos:column="34">unsigned<pos:position pos:line="8" pos:column="42"/></name> <name pos:line="8" pos:column="43">char<pos:position pos:line="8" pos:column="47"/></name> <operator pos:line="8" pos:column="48">*<pos:position pos:line="8" pos:column="49"/></operator><operator pos:line="8" pos:column="49">)<pos:position pos:line="8" pos:column="50"/></operator><name pos:line="8" pos:column="50">p<pos:position pos:line="8" pos:column="51"/></name></expr></argument>)<pos:position pos:line="8" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="53"/></expr_stmt>
            <expr_stmt><expr><name pos:line="9" pos:column="13">q<pos:position pos:line="9" pos:column="14"/></name> <operator pos:line="9" pos:column="15">+=<pos:position pos:line="9" pos:column="17"/></operator> <literal type="number" pos:line="9" pos:column="18">2<pos:position pos:line="9" pos:column="19"/></literal></expr>;<pos:position pos:line="9" pos:column="20"/></expr_stmt>
        }<pos:position pos:line="10" pos:column="10"/></block></then>
        <else pos:line="11" pos:column="9">else
            <block type="pseudo"><expr_stmt><expr><operator pos:line="12" pos:column="13">*<pos:position pos:line="12" pos:column="14"/></operator><name pos:line="12" pos:column="14">q<pos:position pos:line="12" pos:column="15"/></name><operator pos:line="12" pos:column="15">++<pos:position pos:line="12" pos:column="17"/></operator> <operator pos:line="12" pos:column="18">=<pos:position pos:line="12" pos:column="19"/></operator> <operator pos:line="12" pos:column="20">*<pos:position pos:line="12" pos:column="21"/></operator><name pos:line="12" pos:column="21">p<pos:position pos:line="12" pos:column="22"/></name></expr>;<pos:position pos:line="12" pos:column="23"/></expr_stmt></block></else></if>
    }<pos:position pos:line="13" pos:column="6"/></block></for>
    <expr_stmt><expr><call><name pos:line="14" pos:column="5">ap_assert<pos:position pos:line="14" pos:column="14"/></name><argument_list pos:line="14" pos:column="14">(<argument><expr><name pos:line="14" pos:column="15">q<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">&lt;<pos:position pos:line="14" pos:column="21"/></operator> <name pos:line="14" pos:column="19">e<pos:position pos:line="14" pos:column="20"/></name></expr></argument>)<pos:position pos:line="14" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="22"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="15" pos:column="5">*<pos:position pos:line="15" pos:column="6"/></operator><name pos:line="15" pos:column="6">q<pos:position pos:line="15" pos:column="7"/></name> <operator pos:line="15" pos:column="8">=<pos:position pos:line="15" pos:column="9"/></operator> <literal type="char" pos:line="15" pos:column="10">'\0'<pos:position pos:line="15" pos:column="14"/></literal></expr>;<pos:position pos:line="15" pos:column="15"/></expr_stmt>

    <return pos:line="17" pos:column="5">return <expr><name pos:line="17" pos:column="12">q<pos:position pos:line="17" pos:column="13"/></name></expr>;<pos:position pos:line="17" pos:column="14"/></return>
}<pos:position pos:line="18" pos:column="2"/></block></function></unit>
