<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_6354.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">h2_conn_io_write<pos:position pos:line="1" pos:column="30"/></name><parameter_list pos:line="1" pos:column="30">(<parameter><decl><type><name pos:line="1" pos:column="31">h2_conn_io<pos:position pos:line="1" pos:column="41"/></name> <modifier pos:line="1" pos:column="42">*<pos:position pos:line="1" pos:column="43"/></modifier></type><name pos:line="1" pos:column="43">io<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="47">const<pos:position pos:line="1" pos:column="52"/></specifier> <name pos:line="1" pos:column="53">char<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">data<pos:position pos:line="1" pos:column="63"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="65">size_t<pos:position pos:line="1" pos:column="71"/></name></type> <name pos:line="1" pos:column="72">length<pos:position pos:line="1" pos:column="78"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="79"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_status_t<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">status<pos:position pos:line="3" pos:column="24"/></name> <init pos:line="3" pos:column="25">= <expr><name pos:line="3" pos:column="27">APR_SUCCESS<pos:position pos:line="3" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="39"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_size_t<pos:position pos:line="4" pos:column="15"/></name></type> <name pos:line="4" pos:column="16">remain<pos:position pos:line="4" pos:column="22"/></name></decl>;<pos:position pos:line="4" pos:column="23"/></decl_stmt>
    
    <if pos:line="6" pos:column="5">if <condition pos:line="6" pos:column="8">(<expr><name><name pos:line="6" pos:column="9">io<pos:position pos:line="6" pos:column="11"/></name><operator pos:line="6" pos:column="11">-&gt;<pos:position pos:line="6" pos:column="16"/></operator><name pos:line="6" pos:column="13">buffer_output<pos:position pos:line="6" pos:column="26"/></name></name></expr>)<pos:position pos:line="6" pos:column="27"/></condition><then pos:line="6" pos:column="27"> <block pos:line="6" pos:column="28">{
        <while pos:line="7" pos:column="9">while <condition pos:line="7" pos:column="15">(<expr><name pos:line="7" pos:column="16">length<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&gt;<pos:position pos:line="7" pos:column="27"/></operator> <literal type="number" pos:line="7" pos:column="25">0<pos:position pos:line="7" pos:column="26"/></literal></expr>)<pos:position pos:line="7" pos:column="27"/></condition> <block pos:line="7" pos:column="28">{
            <expr_stmt><expr><name pos:line="8" pos:column="13">remain<pos:position pos:line="8" pos:column="19"/></name> <operator pos:line="8" pos:column="20">=<pos:position pos:line="8" pos:column="21"/></operator> <call><name pos:line="8" pos:column="22">assure_scratch_space<pos:position pos:line="8" pos:column="42"/></name><argument_list pos:line="8" pos:column="42">(<argument><expr><name pos:line="8" pos:column="43">io<pos:position pos:line="8" pos:column="45"/></name></expr></argument>)<pos:position pos:line="8" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="47"/></expr_stmt>
            <if pos:line="9" pos:column="13">if <condition pos:line="9" pos:column="16">(<expr><name pos:line="9" pos:column="17">remain<pos:position pos:line="9" pos:column="23"/></name> <operator pos:line="9" pos:column="24">&gt;=<pos:position pos:line="9" pos:column="29"/></operator> <name pos:line="9" pos:column="27">length<pos:position pos:line="9" pos:column="33"/></name></expr>)<pos:position pos:line="9" pos:column="34"/></condition><then pos:line="9" pos:column="34"> <block pos:line="9" pos:column="35">{
<cpp:if pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">if<pos:position pos:line="10" pos:column="4"/></cpp:directive> <expr><name pos:line="10" pos:column="5">LOG_SCRATCH<pos:position pos:line="10" pos:column="16"/></name></expr></cpp:if>
                <expr_stmt><expr><call><name pos:line="11" pos:column="17">ap_log_cerror<pos:position pos:line="11" pos:column="30"/></name><argument_list pos:line="11" pos:column="30">(<argument><expr><name pos:line="11" pos:column="31">APLOG_MARK<pos:position pos:line="11" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="43">APLOG_DEBUG<pos:position pos:line="11" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="56">0<pos:position pos:line="11" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="59">io<pos:position pos:line="11" pos:column="61"/></name><operator pos:line="11" pos:column="61">-&gt;<pos:position pos:line="11" pos:column="66"/></operator><name pos:line="11" pos:column="63">c<pos:position pos:line="11" pos:column="64"/></name></name></expr></argument>, <argument><expr><call><name pos:line="11" pos:column="66">APLOGNO<pos:position pos:line="11" pos:column="73"/></name><argument_list pos:line="11" pos:column="73">(<argument><expr><literal type="number" pos:line="11" pos:column="74">03389<pos:position pos:line="11" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="80"/></argument_list></call>
                              <literal type="string" pos:line="12" pos:column="31">"h2_conn_io(%ld): write_to_scratch(%ld)"<pos:position pos:line="12" pos:column="71"/></literal></expr></argument>, 
                              <argument><expr><name><name pos:line="13" pos:column="31">io<pos:position pos:line="13" pos:column="33"/></name><operator pos:line="13" pos:column="33">-&gt;<pos:position pos:line="13" pos:column="38"/></operator><name pos:line="13" pos:column="35">c<pos:position pos:line="13" pos:column="36"/></name><operator pos:line="13" pos:column="36">-&gt;<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="38">id<pos:position pos:line="13" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="42">(<pos:position pos:line="13" pos:column="43"/></operator><name pos:line="13" pos:column="43">long<pos:position pos:line="13" pos:column="47"/></name><operator pos:line="13" pos:column="47">)<pos:position pos:line="13" pos:column="48"/></operator><name pos:line="13" pos:column="48">length<pos:position pos:line="13" pos:column="54"/></name></expr></argument>)<pos:position pos:line="13" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="56"/></expr_stmt> 
<cpp:endif pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">endif<pos:position pos:line="14" pos:column="7"/></cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name pos:line="15" pos:column="17">memcpy<pos:position pos:line="15" pos:column="23"/></name><argument_list pos:line="15" pos:column="23">(<argument><expr><name><name pos:line="15" pos:column="24">io<pos:position pos:line="15" pos:column="26"/></name><operator pos:line="15" pos:column="26">-&gt;<pos:position pos:line="15" pos:column="31"/></operator><name pos:line="15" pos:column="28">scratch<pos:position pos:line="15" pos:column="35"/></name></name> <operator pos:line="15" pos:column="36">+<pos:position pos:line="15" pos:column="37"/></operator> <name><name pos:line="15" pos:column="38">io<pos:position pos:line="15" pos:column="40"/></name><operator pos:line="15" pos:column="40">-&gt;<pos:position pos:line="15" pos:column="45"/></operator><name pos:line="15" pos:column="42">slen<pos:position pos:line="15" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="48">data<pos:position pos:line="15" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="15" pos:column="54">length<pos:position pos:line="15" pos:column="60"/></name></expr></argument>)<pos:position pos:line="15" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="15" pos:column="62"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="16" pos:column="17">io<pos:position pos:line="16" pos:column="19"/></name><operator pos:line="16" pos:column="19">-&gt;<pos:position pos:line="16" pos:column="24"/></operator><name pos:line="16" pos:column="21">slen<pos:position pos:line="16" pos:column="25"/></name></name> <operator pos:line="16" pos:column="26">+=<pos:position pos:line="16" pos:column="28"/></operator> <name pos:line="16" pos:column="29">length<pos:position pos:line="16" pos:column="35"/></name></expr>;<pos:position pos:line="16" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><name pos:line="17" pos:column="17">length<pos:position pos:line="17" pos:column="23"/></name> <operator pos:line="17" pos:column="24">=<pos:position pos:line="17" pos:column="25"/></operator> <literal type="number" pos:line="17" pos:column="26">0<pos:position pos:line="17" pos:column="27"/></literal></expr>;<pos:position pos:line="17" pos:column="28"/></expr_stmt>
            }<pos:position pos:line="18" pos:column="14"/></block></then>
            <else pos:line="19" pos:column="13">else <block pos:line="19" pos:column="18">{
<cpp:if pos:line="20" pos:column="1">#<cpp:directive pos:line="20" pos:column="2">if<pos:position pos:line="20" pos:column="4"/></cpp:directive> <expr><name pos:line="20" pos:column="5">LOG_SCRATCH<pos:position pos:line="20" pos:column="16"/></name></expr></cpp:if>
                <expr_stmt><expr><call><name pos:line="21" pos:column="17">ap_log_cerror<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><name pos:line="21" pos:column="31">APLOG_MARK<pos:position pos:line="21" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="43">APLOG_DEBUG<pos:position pos:line="21" pos:column="54"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="21" pos:column="56">0<pos:position pos:line="21" pos:column="57"/></literal></expr></argument>, <argument><expr><name><name pos:line="21" pos:column="59">io<pos:position pos:line="21" pos:column="61"/></name><operator pos:line="21" pos:column="61">-&gt;<pos:position pos:line="21" pos:column="66"/></operator><name pos:line="21" pos:column="63">c<pos:position pos:line="21" pos:column="64"/></name></name></expr></argument>, <argument><expr><call><name pos:line="21" pos:column="66">APLOGNO<pos:position pos:line="21" pos:column="73"/></name><argument_list pos:line="21" pos:column="73">(<argument><expr><literal type="number" pos:line="21" pos:column="74">03390<pos:position pos:line="21" pos:column="79"/></literal></expr></argument>)<pos:position pos:line="21" pos:column="80"/></argument_list></call>
                              <literal type="string" pos:line="22" pos:column="31">"h2_conn_io(%ld): write_to_scratch(%ld)"<pos:position pos:line="22" pos:column="71"/></literal></expr></argument>, 
                              <argument><expr><name><name pos:line="23" pos:column="31">io<pos:position pos:line="23" pos:column="33"/></name><operator pos:line="23" pos:column="33">-&gt;<pos:position pos:line="23" pos:column="38"/></operator><name pos:line="23" pos:column="35">c<pos:position pos:line="23" pos:column="36"/></name><operator pos:line="23" pos:column="36">-&gt;<pos:position pos:line="23" pos:column="41"/></operator><name pos:line="23" pos:column="38">id<pos:position pos:line="23" pos:column="40"/></name></name></expr></argument>, <argument><expr><operator pos:line="23" pos:column="42">(<pos:position pos:line="23" pos:column="43"/></operator><name pos:line="23" pos:column="43">long<pos:position pos:line="23" pos:column="47"/></name><operator pos:line="23" pos:column="47">)<pos:position pos:line="23" pos:column="48"/></operator><name pos:line="23" pos:column="48">remain<pos:position pos:line="23" pos:column="54"/></name></expr></argument>)<pos:position pos:line="23" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="56"/></expr_stmt> 
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name pos:line="25" pos:column="17">memcpy<pos:position pos:line="25" pos:column="23"/></name><argument_list pos:line="25" pos:column="23">(<argument><expr><name><name pos:line="25" pos:column="24">io<pos:position pos:line="25" pos:column="26"/></name><operator pos:line="25" pos:column="26">-&gt;<pos:position pos:line="25" pos:column="31"/></operator><name pos:line="25" pos:column="28">scratch<pos:position pos:line="25" pos:column="35"/></name></name> <operator pos:line="25" pos:column="36">+<pos:position pos:line="25" pos:column="37"/></operator> <name><name pos:line="25" pos:column="38">io<pos:position pos:line="25" pos:column="40"/></name><operator pos:line="25" pos:column="40">-&gt;<pos:position pos:line="25" pos:column="45"/></operator><name pos:line="25" pos:column="42">slen<pos:position pos:line="25" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="48">data<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="54">remain<pos:position pos:line="25" pos:column="60"/></name></expr></argument>)<pos:position pos:line="25" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="62"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="26" pos:column="17">io<pos:position pos:line="26" pos:column="19"/></name><operator pos:line="26" pos:column="19">-&gt;<pos:position pos:line="26" pos:column="24"/></operator><name pos:line="26" pos:column="21">slen<pos:position pos:line="26" pos:column="25"/></name></name> <operator pos:line="26" pos:column="26">+=<pos:position pos:line="26" pos:column="28"/></operator> <name pos:line="26" pos:column="29">remain<pos:position pos:line="26" pos:column="35"/></name></expr>;<pos:position pos:line="26" pos:column="36"/></expr_stmt>
                <expr_stmt><expr><name pos:line="27" pos:column="17">data<pos:position pos:line="27" pos:column="21"/></name> <operator pos:line="27" pos:column="22">+=<pos:position pos:line="27" pos:column="24"/></operator> <name pos:line="27" pos:column="25">remain<pos:position pos:line="27" pos:column="31"/></name></expr>;<pos:position pos:line="27" pos:column="32"/></expr_stmt>
                <expr_stmt><expr><name pos:line="28" pos:column="17">length<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">-=<pos:position pos:line="28" pos:column="26"/></operator> <name pos:line="28" pos:column="27">remain<pos:position pos:line="28" pos:column="33"/></name></expr>;<pos:position pos:line="28" pos:column="34"/></expr_stmt>
            }<pos:position pos:line="29" pos:column="14"/></block></else></if>
        }<pos:position pos:line="30" pos:column="10"/></block></while>
    }<pos:position pos:line="31" pos:column="6"/></block></then>
    <else pos:line="32" pos:column="5">else <block pos:line="32" pos:column="10">{
        <expr_stmt><expr><name pos:line="33" pos:column="9">status<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <call><name pos:line="33" pos:column="18">apr_brigade_write<pos:position pos:line="33" pos:column="35"/></name><argument_list pos:line="33" pos:column="35">(<argument><expr><name><name pos:line="33" pos:column="36">io<pos:position pos:line="33" pos:column="38"/></name><operator pos:line="33" pos:column="38">-&gt;<pos:position pos:line="33" pos:column="43"/></operator><name pos:line="33" pos:column="40">output<pos:position pos:line="33" pos:column="46"/></name></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="48">NULL<pos:position pos:line="33" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="54">NULL<pos:position pos:line="33" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="60">data<pos:position pos:line="33" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="66">length<pos:position pos:line="33" pos:column="72"/></name></expr></argument>)<pos:position pos:line="33" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="33" pos:column="74"/></expr_stmt>
    }<pos:position pos:line="34" pos:column="6"/></block></else></if>
    <return pos:line="35" pos:column="5">return <expr><name pos:line="35" pos:column="12">status<pos:position pos:line="35" pos:column="18"/></name></expr>;<pos:position pos:line="35" pos:column="19"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
