<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1922_httpd-2.0.43.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ap_process_child_status<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">apr_proc_t<pos:position pos:line="1" pos:column="39"/></name> <modifier pos:line="1" pos:column="40">*<pos:position pos:line="1" pos:column="41"/></modifier></type><name pos:line="1" pos:column="41">pid<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="46">apr_exit_why_e<pos:position pos:line="1" pos:column="60"/></name></type> <name pos:line="1" pos:column="61">why<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="66">int<pos:position pos:line="1" pos:column="69"/></name></type> <name pos:line="1" pos:column="70">status<pos:position pos:line="1" pos:column="76"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="77"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">signum<pos:position pos:line="3" pos:column="15"/></name> <init pos:line="3" pos:column="16">= <expr><name pos:line="3" pos:column="18">status<pos:position pos:line="3" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">sigdesc<pos:position pos:line="4" pos:column="24"/></name> <init pos:line="4" pos:column="25">= <expr><call><name pos:line="4" pos:column="27">apr_signal_description_get<pos:position pos:line="4" pos:column="53"/></name><argument_list pos:line="4" pos:column="53">(<argument><expr><name pos:line="4" pos:column="54">signum<pos:position pos:line="4" pos:column="60"/></name></expr></argument>)<pos:position pos:line="4" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="4" pos:column="62"/></decl_stmt>

    <comment type="block" pos:line="6" pos:column="5">/* Child died... if it died due to a fatal error,
     * we should simply bail out.  The caller needs to
     * check for bad rc from us and exit, running any
     * appropriate cleanups.
     *
     * If the child died due to a resource shortage, 
     * the parent should limit the rate of forking
     */</comment>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><call><name pos:line="14" pos:column="9">APR_PROC_CHECK_EXIT<pos:position pos:line="14" pos:column="28"/></name><argument_list pos:line="14" pos:column="28">(<argument><expr><name pos:line="14" pos:column="29">why<pos:position pos:line="14" pos:column="32"/></name></expr></argument>)<pos:position pos:line="14" pos:column="33"/></argument_list></call></expr>)<pos:position pos:line="14" pos:column="34"/></condition><then pos:line="14" pos:column="34"> <block pos:line="14" pos:column="35">{
        <if pos:line="15" pos:column="9">if <condition pos:line="15" pos:column="12">(<expr><name pos:line="15" pos:column="13">status<pos:position pos:line="15" pos:column="19"/></name> <operator pos:line="15" pos:column="20">==<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="23">APEXIT_CHILDSICK<pos:position pos:line="15" pos:column="39"/></name></expr>)<pos:position pos:line="15" pos:column="40"/></condition><then pos:line="15" pos:column="40"> <block pos:line="15" pos:column="41">{
            <return pos:line="16" pos:column="13">return <expr><name pos:line="16" pos:column="20">status<pos:position pos:line="16" pos:column="26"/></name></expr>;<pos:position pos:line="16" pos:column="27"/></return>
        }<pos:position pos:line="17" pos:column="10"/></block></then></if>

        <if pos:line="19" pos:column="9">if <condition pos:line="19" pos:column="12">(<expr><name pos:line="19" pos:column="13">status<pos:position pos:line="19" pos:column="19"/></name> <operator pos:line="19" pos:column="20">==<pos:position pos:line="19" pos:column="22"/></operator> <name pos:line="19" pos:column="23">APEXIT_CHILDFATAL<pos:position pos:line="19" pos:column="40"/></name></expr>)<pos:position pos:line="19" pos:column="41"/></condition><then pos:line="19" pos:column="41"> <block pos:line="19" pos:column="42">{
            <expr_stmt><expr><call><name pos:line="20" pos:column="13">ap_log_error<pos:position pos:line="20" pos:column="25"/></name><argument_list pos:line="20" pos:column="25">(<argument><expr><name pos:line="20" pos:column="26">APLOG_MARK<pos:position pos:line="20" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="38">APLOG_ALERT<pos:position pos:line="20" pos:column="49"/></name></expr></argument>,
                         <argument><expr><literal type="number" pos:line="21" pos:column="26">0<pos:position pos:line="21" pos:column="27"/></literal></expr></argument>, <argument><expr><name pos:line="21" pos:column="29">ap_server_conf<pos:position pos:line="21" pos:column="43"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="22" pos:column="26">"Child %"<pos:position pos:line="22" pos:column="35"/></literal> <name pos:line="22" pos:column="36">APR_PID_T_FMT<pos:position pos:line="22" pos:column="49"/></name>
                         <literal type="string" pos:line="23" pos:column="26">" returned a Fatal error..."<pos:position pos:line="23" pos:column="54"/></literal> <name pos:line="23" pos:column="55">APR_EOL_STR<pos:position pos:line="23" pos:column="66"/></name>
                         <literal type="string" pos:line="24" pos:column="26">"Apache is exiting!"<pos:position pos:line="24" pos:column="46"/></literal></expr></argument>,
                         <argument><expr><name><name pos:line="25" pos:column="26">pid<pos:position pos:line="25" pos:column="29"/></name><operator pos:line="25" pos:column="29">-&gt;<pos:position pos:line="25" pos:column="34"/></operator><name pos:line="25" pos:column="31">pid<pos:position pos:line="25" pos:column="34"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="36"/></expr_stmt>
            <return pos:line="26" pos:column="13">return <expr><name pos:line="26" pos:column="20">APEXIT_CHILDFATAL<pos:position pos:line="26" pos:column="37"/></name></expr>;<pos:position pos:line="26" pos:column="38"/></return>
        }<pos:position pos:line="27" pos:column="10"/></block></then></if>

        <return pos:line="29" pos:column="9">return <expr><literal type="number" pos:line="29" pos:column="16">0<pos:position pos:line="29" pos:column="17"/></literal></expr>;<pos:position pos:line="29" pos:column="18"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then></if>

    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><call><name pos:line="32" pos:column="9">APR_PROC_CHECK_SIGNALED<pos:position pos:line="32" pos:column="32"/></name><argument_list pos:line="32" pos:column="32">(<argument><expr><name pos:line="32" pos:column="33">why<pos:position pos:line="32" pos:column="36"/></name></expr></argument>)<pos:position pos:line="32" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="32" pos:column="38"/></condition><then pos:line="32" pos:column="38"> <block pos:line="32" pos:column="39">{
        <switch pos:line="33" pos:column="9">switch <condition pos:line="33" pos:column="16">(<expr><name pos:line="33" pos:column="17">signum<pos:position pos:line="33" pos:column="23"/></name></expr>)<pos:position pos:line="33" pos:column="24"/></condition> <block pos:line="33" pos:column="25">{
        <case pos:line="34" pos:column="9">case <expr><name pos:line="34" pos:column="14">SIGTERM<pos:position pos:line="34" pos:column="21"/></name></expr>:<pos:position pos:line="34" pos:column="22"/></case>
        <case pos:line="35" pos:column="9">case <expr><name pos:line="35" pos:column="14">SIGHUP<pos:position pos:line="35" pos:column="20"/></name></expr>:<pos:position pos:line="35" pos:column="21"/></case>
        <case pos:line="36" pos:column="9">case <expr><name pos:line="36" pos:column="14">AP_SIG_GRACEFUL<pos:position pos:line="36" pos:column="29"/></name></expr>:<pos:position pos:line="36" pos:column="30"/></case>
        <case pos:line="37" pos:column="9">case <expr><name pos:line="37" pos:column="14">SIGKILL<pos:position pos:line="37" pos:column="21"/></name></expr>:<pos:position pos:line="37" pos:column="22"/></case>
            <break pos:line="38" pos:column="13">break;<pos:position pos:line="38" pos:column="19"/></break>

        <default pos:line="40" pos:column="9">default:<pos:position pos:line="40" pos:column="17"/></default>
            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><call><name pos:line="41" pos:column="17">APR_PROC_CHECK_CORE_DUMP<pos:position pos:line="41" pos:column="41"/></name><argument_list pos:line="41" pos:column="41">(<argument><expr><name pos:line="41" pos:column="42">why<pos:position pos:line="41" pos:column="45"/></name></expr></argument>)<pos:position pos:line="41" pos:column="46"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="47"/></condition><then pos:line="41" pos:column="47"> <block pos:line="41" pos:column="48">{
                <expr_stmt><expr><call><name pos:line="42" pos:column="17">ap_log_error<pos:position pos:line="42" pos:column="29"/></name><argument_list pos:line="42" pos:column="29">(<argument><expr><name pos:line="42" pos:column="30">APLOG_MARK<pos:position pos:line="42" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="42">APLOG_NOTICE<pos:position pos:line="42" pos:column="54"/></name></expr></argument>,
                             <argument><expr><literal type="number" pos:line="43" pos:column="30">0<pos:position pos:line="43" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="43" pos:column="33">ap_server_conf<pos:position pos:line="43" pos:column="47"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="44" pos:column="30">"child pid %ld exit signal %s (%d), "<pos:position pos:line="44" pos:column="67"/></literal>
                             <literal type="string" pos:line="45" pos:column="30">"possible coredump in %s"<pos:position pos:line="45" pos:column="55"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="46" pos:column="30">(<pos:position pos:line="46" pos:column="31"/></operator><name pos:line="46" pos:column="31">long<pos:position pos:line="46" pos:column="35"/></name><operator pos:line="46" pos:column="35">)<pos:position pos:line="46" pos:column="36"/></operator><name><name pos:line="46" pos:column="36">pid<pos:position pos:line="46" pos:column="39"/></name><operator pos:line="46" pos:column="39">-&gt;<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="41">pid<pos:position pos:line="46" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="46">sigdesc<pos:position pos:line="46" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="55">signum<pos:position pos:line="46" pos:column="61"/></name></expr></argument>,
                             <argument><expr><name pos:line="47" pos:column="30">ap_coredump_dir<pos:position pos:line="47" pos:column="45"/></name></expr></argument>)<pos:position pos:line="47" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="48" pos:column="14"/></block></then>
            <else pos:line="49" pos:column="13">else <block pos:line="49" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="50" pos:column="17">ap_log_error<pos:position pos:line="50" pos:column="29"/></name><argument_list pos:line="50" pos:column="29">(<argument><expr><name pos:line="50" pos:column="30">APLOG_MARK<pos:position pos:line="50" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="50" pos:column="42">APLOG_NOTICE<pos:position pos:line="50" pos:column="54"/></name></expr></argument>,
                             <argument><expr><literal type="number" pos:line="51" pos:column="30">0<pos:position pos:line="51" pos:column="31"/></literal></expr></argument>, <argument><expr><name pos:line="51" pos:column="33">ap_server_conf<pos:position pos:line="51" pos:column="47"/></name></expr></argument>,
                             <argument><expr><literal type="string" pos:line="52" pos:column="30">"child pid %ld exit signal %s (%d)"<pos:position pos:line="52" pos:column="65"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="53" pos:column="30">(<pos:position pos:line="53" pos:column="31"/></operator><name pos:line="53" pos:column="31">long<pos:position pos:line="53" pos:column="35"/></name><operator pos:line="53" pos:column="35">)<pos:position pos:line="53" pos:column="36"/></operator><name><name pos:line="53" pos:column="36">pid<pos:position pos:line="53" pos:column="39"/></name><operator pos:line="53" pos:column="39">-&gt;<pos:position pos:line="53" pos:column="44"/></operator><name pos:line="53" pos:column="41">pid<pos:position pos:line="53" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="46">sigdesc<pos:position pos:line="53" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="53" pos:column="55">signum<pos:position pos:line="53" pos:column="61"/></name></expr></argument>)<pos:position pos:line="53" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="53" pos:column="63"/></expr_stmt>
            }<pos:position pos:line="54" pos:column="14"/></block></else></if>
        }<pos:position pos:line="55" pos:column="10"/></block></switch>
    }<pos:position pos:line="56" pos:column="6"/></block></then></if>
    <return pos:line="57" pos:column="5">return <expr><literal type="number" pos:line="57" pos:column="12">0<pos:position pos:line="57" pos:column="13"/></literal></expr>;<pos:position pos:line="57" pos:column="14"/></return>
}<pos:position pos:line="58" pos:column="2"/></block></function></unit>
