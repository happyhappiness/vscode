<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1147_httpd-2.0.55.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">send_req<pos:position pos:line="1" pos:column="29"/></name><parameter_list pos:line="1" pos:column="29">(<parameter><decl><type><name pos:line="1" pos:column="30">int<pos:position pos:line="1" pos:column="33"/></name></type> <name pos:line="1" pos:column="34">fd<pos:position pos:line="1" pos:column="36"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="38">request_rec<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier></type><name pos:line="1" pos:column="51">r<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">char<pos:position pos:line="1" pos:column="58"/></name> <modifier pos:line="1" pos:column="59">*<pos:position pos:line="1" pos:column="60"/></modifier></type><name pos:line="1" pos:column="60">argv0<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">char<pos:position pos:line="1" pos:column="71"/></name> <modifier pos:line="1" pos:column="72">*<pos:position pos:line="1" pos:column="73"/></modifier><modifier pos:line="1" pos:column="73">*<pos:position pos:line="1" pos:column="74"/></modifier></type><name pos:line="1" pos:column="74">env<pos:position pos:line="1" pos:column="77"/></name></decl></parameter>, 
                             <parameter><decl><type><name pos:line="2" pos:column="30">int<pos:position pos:line="2" pos:column="33"/></name></type> <name pos:line="2" pos:column="34">req_type<pos:position pos:line="2" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="43"/></parameter_list> 
<block pos:line="3" pos:column="1">{ 
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">i<pos:position pos:line="4" pos:column="10"/></name></decl>;<pos:position pos:line="4" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="5" pos:column="5">const<pos:position pos:line="5" pos:column="10"/></specifier> <name pos:line="5" pos:column="11">char<pos:position pos:line="5" pos:column="15"/></name> <modifier pos:line="5" pos:column="16">*<pos:position pos:line="5" pos:column="17"/></modifier></type><name pos:line="5" pos:column="17">user<pos:position pos:line="5" pos:column="21"/></name></decl>;<pos:position pos:line="5" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">module<pos:position pos:line="6" pos:column="11"/></name> <modifier pos:line="6" pos:column="12">*<pos:position pos:line="6" pos:column="13"/></modifier></type><name pos:line="6" pos:column="13">suexec_mod<pos:position pos:line="6" pos:column="23"/></name> <init pos:line="6" pos:column="24">= <expr><call><name pos:line="6" pos:column="26">ap_find_linked_module<pos:position pos:line="6" pos:column="47"/></name><argument_list pos:line="6" pos:column="47">(<argument><expr><literal type="string" pos:line="6" pos:column="48">"mod_suexec.c"<pos:position pos:line="6" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="64"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">cgid_req_t<pos:position pos:line="7" pos:column="15"/></name></type> <name pos:line="7" pos:column="16">req<pos:position pos:line="7" pos:column="19"/></name> <init pos:line="7" pos:column="20">= <expr><block pos:line="7" pos:column="22">{<expr><literal type="number" pos:line="7" pos:column="23">0<pos:position pos:line="7" pos:column="24"/></literal></expr>}<pos:position pos:line="7" pos:column="25"/></block></expr></init></decl>;<pos:position pos:line="7" pos:column="26"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">suexec_config_t<pos:position pos:line="8" pos:column="20"/></name> <modifier pos:line="8" pos:column="21">*<pos:position pos:line="8" pos:column="22"/></modifier></type><name pos:line="8" pos:column="22">suexec_cfg<pos:position pos:line="8" pos:column="32"/></name></decl>;<pos:position pos:line="8" pos:column="33"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_status_t<pos:position pos:line="9" pos:column="17"/></name></type> <name pos:line="9" pos:column="18">stat<pos:position pos:line="9" pos:column="22"/></name></decl>;<pos:position pos:line="9" pos:column="23"/></decl_stmt>

    <expr_stmt><expr><name><name pos:line="11" pos:column="5">req<pos:position pos:line="11" pos:column="8"/></name><operator pos:line="11" pos:column="8">.<pos:position pos:line="11" pos:column="9"/></operator><name pos:line="11" pos:column="9">req_type<pos:position pos:line="11" pos:column="17"/></name></name> <operator pos:line="11" pos:column="18">=<pos:position pos:line="11" pos:column="19"/></operator> <name pos:line="11" pos:column="20">req_type<pos:position pos:line="11" pos:column="28"/></name></expr>;<pos:position pos:line="11" pos:column="29"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">req<pos:position pos:line="12" pos:column="8"/></name><operator pos:line="12" pos:column="8">.<pos:position pos:line="12" pos:column="9"/></operator><name pos:line="12" pos:column="9">conn_id<pos:position pos:line="12" pos:column="16"/></name></name> <operator pos:line="12" pos:column="17">=<pos:position pos:line="12" pos:column="18"/></operator> <name><name pos:line="12" pos:column="19">r<pos:position pos:line="12" pos:column="20"/></name><operator pos:line="12" pos:column="20">-&gt;<pos:position pos:line="12" pos:column="25"/></operator><name pos:line="12" pos:column="22">connection<pos:position pos:line="12" pos:column="32"/></name><operator pos:line="12" pos:column="32">-&gt;<pos:position pos:line="12" pos:column="37"/></operator><name pos:line="12" pos:column="34">id<pos:position pos:line="12" pos:column="36"/></name></name></expr>;<pos:position pos:line="12" pos:column="37"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">req<pos:position pos:line="13" pos:column="8"/></name><operator pos:line="13" pos:column="8">.<pos:position pos:line="13" pos:column="9"/></operator><name pos:line="13" pos:column="9">core_module_index<pos:position pos:line="13" pos:column="26"/></name></name> <operator pos:line="13" pos:column="27">=<pos:position pos:line="13" pos:column="28"/></operator> <name><name pos:line="13" pos:column="29">core_module<pos:position pos:line="13" pos:column="40"/></name><operator pos:line="13" pos:column="40">.<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">module_index<pos:position pos:line="13" pos:column="53"/></name></name></expr>;<pos:position pos:line="13" pos:column="54"/></expr_stmt>
    <if pos:line="14" pos:column="5">if <condition pos:line="14" pos:column="8">(<expr><name pos:line="14" pos:column="9">suexec_mod<pos:position pos:line="14" pos:column="19"/></name></expr>)<pos:position pos:line="14" pos:column="20"/></condition><then pos:line="14" pos:column="20"> <block pos:line="14" pos:column="21">{
        <expr_stmt><expr><name><name pos:line="15" pos:column="9">req<pos:position pos:line="15" pos:column="12"/></name><operator pos:line="15" pos:column="12">.<pos:position pos:line="15" pos:column="13"/></operator><name pos:line="15" pos:column="13">have_suexec<pos:position pos:line="15" pos:column="24"/></name></name> <operator pos:line="15" pos:column="25">=<pos:position pos:line="15" pos:column="26"/></operator> <literal type="number" pos:line="15" pos:column="27">1<pos:position pos:line="15" pos:column="28"/></literal></expr>;<pos:position pos:line="15" pos:column="29"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="16" pos:column="9">req<pos:position pos:line="16" pos:column="12"/></name><operator pos:line="16" pos:column="12">.<pos:position pos:line="16" pos:column="13"/></operator><name pos:line="16" pos:column="13">suexec_module_index<pos:position pos:line="16" pos:column="32"/></name></name> <operator pos:line="16" pos:column="33">=<pos:position pos:line="16" pos:column="34"/></operator> <name><name pos:line="16" pos:column="35">suexec_mod<pos:position pos:line="16" pos:column="45"/></name><operator pos:line="16" pos:column="45">-&gt;<pos:position pos:line="16" pos:column="50"/></operator><name pos:line="16" pos:column="47">module_index<pos:position pos:line="16" pos:column="59"/></name></name></expr>;<pos:position pos:line="16" pos:column="60"/></expr_stmt>
        <expr_stmt><expr><name pos:line="17" pos:column="9">suexec_cfg<pos:position pos:line="17" pos:column="19"/></name> <operator pos:line="17" pos:column="20">=<pos:position pos:line="17" pos:column="21"/></operator> <call><name pos:line="17" pos:column="22">ap_get_module_config<pos:position pos:line="17" pos:column="42"/></name><argument_list pos:line="17" pos:column="42">(<argument><expr><name><name pos:line="17" pos:column="43">r<pos:position pos:line="17" pos:column="44"/></name><operator pos:line="17" pos:column="44">-&gt;<pos:position pos:line="17" pos:column="49"/></operator><name pos:line="17" pos:column="46">per_dir_config<pos:position pos:line="17" pos:column="60"/></name></name></expr></argument>,
                                          <argument><expr><name pos:line="18" pos:column="43">suexec_mod<pos:position pos:line="18" pos:column="53"/></name></expr></argument>)<pos:position pos:line="18" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="55"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">req<pos:position pos:line="19" pos:column="12"/></name><operator pos:line="19" pos:column="12">.<pos:position pos:line="19" pos:column="13"/></operator><name pos:line="19" pos:column="13">suexec_cfg<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <operator pos:line="19" pos:column="26">*<pos:position pos:line="19" pos:column="27"/></operator><name pos:line="19" pos:column="27">suexec_cfg<pos:position pos:line="19" pos:column="37"/></name></expr>;<pos:position pos:line="19" pos:column="38"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
    <for pos:line="21" pos:column="5">for <control pos:line="21" pos:column="9">(<init><expr><name><name pos:line="21" pos:column="10">req<pos:position pos:line="21" pos:column="13"/></name><operator pos:line="21" pos:column="13">.<pos:position pos:line="21" pos:column="14"/></operator><name pos:line="21" pos:column="14">env_count<pos:position pos:line="21" pos:column="23"/></name></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <literal type="number" pos:line="21" pos:column="26">0<pos:position pos:line="21" pos:column="27"/></literal></expr>;<pos:position pos:line="21" pos:column="28"/></init> <condition><expr><name><name pos:line="21" pos:column="29">env<pos:position pos:line="21" pos:column="32"/></name><index pos:line="21" pos:column="32">[<expr><name><name pos:line="21" pos:column="33">req<pos:position pos:line="21" pos:column="36"/></name><operator pos:line="21" pos:column="36">.<pos:position pos:line="21" pos:column="37"/></operator><name pos:line="21" pos:column="37">env_count<pos:position pos:line="21" pos:column="46"/></name></name></expr>]<pos:position pos:line="21" pos:column="47"/></index></name></expr>;<pos:position pos:line="21" pos:column="48"/></condition> <incr><expr><name><name pos:line="21" pos:column="49">req<pos:position pos:line="21" pos:column="52"/></name><operator pos:line="21" pos:column="52">.<pos:position pos:line="21" pos:column="53"/></operator><name pos:line="21" pos:column="53">env_count<pos:position pos:line="21" pos:column="62"/></name></name><operator pos:line="21" pos:column="62">++<pos:position pos:line="21" pos:column="64"/></operator></expr></incr>)<pos:position pos:line="21" pos:column="65"/></control> <block pos:line="21" pos:column="66">{
        <continue pos:line="22" pos:column="9">continue;<pos:position pos:line="22" pos:column="18"/></continue> 
    }<pos:position pos:line="23" pos:column="6"/></block></for>
    <expr_stmt><expr><name><name pos:line="24" pos:column="5">req<pos:position pos:line="24" pos:column="8"/></name><operator pos:line="24" pos:column="8">.<pos:position pos:line="24" pos:column="9"/></operator><name pos:line="24" pos:column="9">filename_len<pos:position pos:line="24" pos:column="21"/></name></name> <operator pos:line="24" pos:column="22">=<pos:position pos:line="24" pos:column="23"/></operator> <call><name pos:line="24" pos:column="24">strlen<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name><name pos:line="24" pos:column="31">r<pos:position pos:line="24" pos:column="32"/></name><operator pos:line="24" pos:column="32">-&gt;<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="34">filename<pos:position pos:line="24" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="25" pos:column="5">req<pos:position pos:line="25" pos:column="8"/></name><operator pos:line="25" pos:column="8">.<pos:position pos:line="25" pos:column="9"/></operator><name pos:line="25" pos:column="9">argv0_len<pos:position pos:line="25" pos:column="18"/></name></name> <operator pos:line="25" pos:column="19">=<pos:position pos:line="25" pos:column="20"/></operator> <call><name pos:line="25" pos:column="21">strlen<pos:position pos:line="25" pos:column="27"/></name><argument_list pos:line="25" pos:column="27">(<argument><expr><name pos:line="25" pos:column="28">argv0<pos:position pos:line="25" pos:column="33"/></name></expr></argument>)<pos:position pos:line="25" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="35"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="26" pos:column="5">req<pos:position pos:line="26" pos:column="8"/></name><operator pos:line="26" pos:column="8">.<pos:position pos:line="26" pos:column="9"/></operator><name pos:line="26" pos:column="9">uri_len<pos:position pos:line="26" pos:column="16"/></name></name> <operator pos:line="26" pos:column="17">=<pos:position pos:line="26" pos:column="18"/></operator> <call><name pos:line="26" pos:column="19">strlen<pos:position pos:line="26" pos:column="25"/></name><argument_list pos:line="26" pos:column="25">(<argument><expr><name><name pos:line="26" pos:column="26">r<pos:position pos:line="26" pos:column="27"/></name><operator pos:line="26" pos:column="27">-&gt;<pos:position pos:line="26" pos:column="32"/></operator><name pos:line="26" pos:column="29">uri<pos:position pos:line="26" pos:column="32"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="34"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="27" pos:column="5">req<pos:position pos:line="27" pos:column="8"/></name><operator pos:line="27" pos:column="8">.<pos:position pos:line="27" pos:column="9"/></operator><name pos:line="27" pos:column="9">args_len<pos:position pos:line="27" pos:column="17"/></name></name> <operator pos:line="27" pos:column="18">=<pos:position pos:line="27" pos:column="19"/></operator> <ternary><condition><expr><name><name pos:line="27" pos:column="20">r<pos:position pos:line="27" pos:column="21"/></name><operator pos:line="27" pos:column="21">-&gt;<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="23">args<pos:position pos:line="27" pos:column="27"/></name></name></expr> ?<pos:position pos:line="27" pos:column="29"/></condition><then pos:line="27" pos:column="29"> <expr><call><name pos:line="27" pos:column="30">strlen<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name><name pos:line="27" pos:column="37">r<pos:position pos:line="27" pos:column="38"/></name><operator pos:line="27" pos:column="38">-&gt;<pos:position pos:line="27" pos:column="43"/></operator><name pos:line="27" pos:column="40">args<pos:position pos:line="27" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="45"/></argument_list></call></expr> <pos:position pos:line="27" pos:column="46"/></then><else pos:line="27" pos:column="46">: <expr><literal type="number" pos:line="27" pos:column="48">0<pos:position pos:line="27" pos:column="49"/></literal></expr></else></ternary></expr>;<pos:position pos:line="27" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><name pos:line="28" pos:column="5">user<pos:position pos:line="28" pos:column="9"/></name> <operator pos:line="28" pos:column="10">=<pos:position pos:line="28" pos:column="11"/></operator> <operator pos:line="28" pos:column="12">(<pos:position pos:line="28" pos:column="13"/></operator><specifier pos:line="28" pos:column="13">const<pos:position pos:line="28" pos:column="18"/></specifier> <name pos:line="28" pos:column="19">char<pos:position pos:line="28" pos:column="23"/></name> <operator pos:line="28" pos:column="24">*<pos:position pos:line="28" pos:column="25"/></operator><operator pos:line="28" pos:column="25">)<pos:position pos:line="28" pos:column="26"/></operator><call><name pos:line="28" pos:column="26">apr_table_get<pos:position pos:line="28" pos:column="39"/></name><argument_list pos:line="28" pos:column="39">(<argument><expr><name><name pos:line="28" pos:column="40">r<pos:position pos:line="28" pos:column="41"/></name><operator pos:line="28" pos:column="41">-&gt;<pos:position pos:line="28" pos:column="46"/></operator><name pos:line="28" pos:column="43">notes<pos:position pos:line="28" pos:column="48"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="28" pos:column="50">"mod_userdir_user"<pos:position pos:line="28" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="70"/></expr_stmt>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><name pos:line="29" pos:column="9">user<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">!=<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="17">NULL<pos:position pos:line="29" pos:column="21"/></name></expr>)<pos:position pos:line="29" pos:column="22"/></condition><then pos:line="29" pos:column="22"> <block pos:line="29" pos:column="23">{
        <expr_stmt><expr><name><name pos:line="30" pos:column="9">req<pos:position pos:line="30" pos:column="12"/></name><operator pos:line="30" pos:column="12">.<pos:position pos:line="30" pos:column="13"/></operator><name pos:line="30" pos:column="13">mod_userdir_user_len<pos:position pos:line="30" pos:column="33"/></name></name> <operator pos:line="30" pos:column="34">=<pos:position pos:line="30" pos:column="35"/></operator> <call><name pos:line="30" pos:column="36">strlen<pos:position pos:line="30" pos:column="42"/></name><argument_list pos:line="30" pos:column="42">(<argument><expr><name pos:line="30" pos:column="43">user<pos:position pos:line="30" pos:column="47"/></name></expr></argument>)<pos:position pos:line="30" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name><name pos:line="32" pos:column="5">req<pos:position pos:line="32" pos:column="8"/></name><operator pos:line="32" pos:column="8">.<pos:position pos:line="32" pos:column="9"/></operator><name pos:line="32" pos:column="9">loglevel<pos:position pos:line="32" pos:column="17"/></name></name> <operator pos:line="32" pos:column="18">=<pos:position pos:line="32" pos:column="19"/></operator> <name><name pos:line="32" pos:column="20">r<pos:position pos:line="32" pos:column="21"/></name><operator pos:line="32" pos:column="21">-&gt;<pos:position pos:line="32" pos:column="26"/></operator><name pos:line="32" pos:column="23">server<pos:position pos:line="32" pos:column="29"/></name><operator pos:line="32" pos:column="29">-&gt;<pos:position pos:line="32" pos:column="34"/></operator><name pos:line="32" pos:column="31">loglevel<pos:position pos:line="32" pos:column="39"/></name></name></expr>;<pos:position pos:line="32" pos:column="40"/></expr_stmt>

    <comment type="block" pos:line="34" pos:column="5">/* Write the request header */</comment>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><operator pos:line="35" pos:column="9">(<pos:position pos:line="35" pos:column="10"/></operator><name pos:line="35" pos:column="10">stat<pos:position pos:line="35" pos:column="14"/></name> <operator pos:line="35" pos:column="15">=<pos:position pos:line="35" pos:column="16"/></operator> <call><name pos:line="35" pos:column="17">sock_write<pos:position pos:line="35" pos:column="27"/></name><argument_list pos:line="35" pos:column="27">(<argument><expr><name pos:line="35" pos:column="28">fd<pos:position pos:line="35" pos:column="30"/></name></expr></argument>, <argument><expr><operator pos:line="35" pos:column="32">&amp;<pos:position pos:line="35" pos:column="37"/></operator><name pos:line="35" pos:column="33">req<pos:position pos:line="35" pos:column="36"/></name></expr></argument>, <argument><expr><sizeof pos:line="35" pos:column="38">sizeof<argument_list pos:line="35" pos:column="44">(<argument><expr><name pos:line="35" pos:column="45">req<pos:position pos:line="35" pos:column="48"/></name></expr></argument>)<pos:position pos:line="35" pos:column="49"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="50"/></argument_list></call><operator pos:line="35" pos:column="50">)<pos:position pos:line="35" pos:column="51"/></operator> <operator pos:line="35" pos:column="52">!=<pos:position pos:line="35" pos:column="54"/></operator> <name pos:line="35" pos:column="55">APR_SUCCESS<pos:position pos:line="35" pos:column="66"/></name></expr>)<pos:position pos:line="35" pos:column="67"/></condition><then pos:line="35" pos:column="67"> <block pos:line="35" pos:column="68">{
        <return pos:line="36" pos:column="9">return <expr><name pos:line="36" pos:column="16">stat<pos:position pos:line="36" pos:column="20"/></name></expr>;<pos:position pos:line="36" pos:column="21"/></return>
    }<pos:position pos:line="37" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="39" pos:column="5">/* Write filename, argv0, uri, and args */</comment>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><operator pos:line="40" pos:column="9">(<pos:position pos:line="40" pos:column="10"/></operator><name pos:line="40" pos:column="10">stat<pos:position pos:line="40" pos:column="14"/></name> <operator pos:line="40" pos:column="15">=<pos:position pos:line="40" pos:column="16"/></operator> <call><name pos:line="40" pos:column="17">sock_write<pos:position pos:line="40" pos:column="27"/></name><argument_list pos:line="40" pos:column="27">(<argument><expr><name pos:line="40" pos:column="28">fd<pos:position pos:line="40" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="32">r<pos:position pos:line="40" pos:column="33"/></name><operator pos:line="40" pos:column="33">-&gt;<pos:position pos:line="40" pos:column="38"/></operator><name pos:line="40" pos:column="35">filename<pos:position pos:line="40" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="40" pos:column="45">req<pos:position pos:line="40" pos:column="48"/></name><operator pos:line="40" pos:column="48">.<pos:position pos:line="40" pos:column="49"/></operator><name pos:line="40" pos:column="49">filename_len<pos:position pos:line="40" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="62"/></argument_list></call><operator pos:line="40" pos:column="62">)<pos:position pos:line="40" pos:column="63"/></operator> <operator pos:line="40" pos:column="64">!=<pos:position pos:line="40" pos:column="66"/></operator> <name pos:line="40" pos:column="67">APR_SUCCESS<pos:position pos:line="40" pos:column="78"/></name> <operator pos:line="40" pos:column="79">||<pos:position pos:line="40" pos:column="81"/></operator>
        <operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">stat<pos:position pos:line="41" pos:column="14"/></name> <operator pos:line="41" pos:column="15">=<pos:position pos:line="41" pos:column="16"/></operator> <call><name pos:line="41" pos:column="17">sock_write<pos:position pos:line="41" pos:column="27"/></name><argument_list pos:line="41" pos:column="27">(<argument><expr><name pos:line="41" pos:column="28">fd<pos:position pos:line="41" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="41" pos:column="32">argv0<pos:position pos:line="41" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="41" pos:column="39">req<pos:position pos:line="41" pos:column="42"/></name><operator pos:line="41" pos:column="42">.<pos:position pos:line="41" pos:column="43"/></operator><name pos:line="41" pos:column="43">argv0_len<pos:position pos:line="41" pos:column="52"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="53"/></argument_list></call><operator pos:line="41" pos:column="53">)<pos:position pos:line="41" pos:column="54"/></operator> <operator pos:line="41" pos:column="55">!=<pos:position pos:line="41" pos:column="57"/></operator> <name pos:line="41" pos:column="58">APR_SUCCESS<pos:position pos:line="41" pos:column="69"/></name> <operator pos:line="41" pos:column="70">||<pos:position pos:line="41" pos:column="72"/></operator>
        <operator pos:line="42" pos:column="9">(<pos:position pos:line="42" pos:column="10"/></operator><name pos:line="42" pos:column="10">stat<pos:position pos:line="42" pos:column="14"/></name> <operator pos:line="42" pos:column="15">=<pos:position pos:line="42" pos:column="16"/></operator> <call><name pos:line="42" pos:column="17">sock_write<pos:position pos:line="42" pos:column="27"/></name><argument_list pos:line="42" pos:column="27">(<argument><expr><name pos:line="42" pos:column="28">fd<pos:position pos:line="42" pos:column="30"/></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="32">r<pos:position pos:line="42" pos:column="33"/></name><operator pos:line="42" pos:column="33">-&gt;<pos:position pos:line="42" pos:column="38"/></operator><name pos:line="42" pos:column="35">uri<pos:position pos:line="42" pos:column="38"/></name></name></expr></argument>, <argument><expr><name><name pos:line="42" pos:column="40">req<pos:position pos:line="42" pos:column="43"/></name><operator pos:line="42" pos:column="43">.<pos:position pos:line="42" pos:column="44"/></operator><name pos:line="42" pos:column="44">uri_len<pos:position pos:line="42" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="42" pos:column="52"/></argument_list></call><operator pos:line="42" pos:column="52">)<pos:position pos:line="42" pos:column="53"/></operator> <operator pos:line="42" pos:column="54">!=<pos:position pos:line="42" pos:column="56"/></operator> <name pos:line="42" pos:column="57">APR_SUCCESS<pos:position pos:line="42" pos:column="68"/></name></expr>)<pos:position pos:line="42" pos:column="69"/></condition><then pos:line="42" pos:column="69"> <block pos:line="42" pos:column="70">{
        <return pos:line="43" pos:column="9">return <expr><name pos:line="43" pos:column="16">stat<pos:position pos:line="43" pos:column="20"/></name></expr>;<pos:position pos:line="43" pos:column="21"/></return>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if>
    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name><name pos:line="45" pos:column="9">req<pos:position pos:line="45" pos:column="12"/></name><operator pos:line="45" pos:column="12">.<pos:position pos:line="45" pos:column="13"/></operator><name pos:line="45" pos:column="13">args_len<pos:position pos:line="45" pos:column="21"/></name></name></expr>)<pos:position pos:line="45" pos:column="22"/></condition><then pos:line="45" pos:column="22"> <block pos:line="45" pos:column="23">{
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><operator pos:line="46" pos:column="13">(<pos:position pos:line="46" pos:column="14"/></operator><name pos:line="46" pos:column="14">stat<pos:position pos:line="46" pos:column="18"/></name> <operator pos:line="46" pos:column="19">=<pos:position pos:line="46" pos:column="20"/></operator> <call><name pos:line="46" pos:column="21">sock_write<pos:position pos:line="46" pos:column="31"/></name><argument_list pos:line="46" pos:column="31">(<argument><expr><name pos:line="46" pos:column="32">fd<pos:position pos:line="46" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="36">r<pos:position pos:line="46" pos:column="37"/></name><operator pos:line="46" pos:column="37">-&gt;<pos:position pos:line="46" pos:column="42"/></operator><name pos:line="46" pos:column="39">args<pos:position pos:line="46" pos:column="43"/></name></name></expr></argument>, <argument><expr><name><name pos:line="46" pos:column="45">req<pos:position pos:line="46" pos:column="48"/></name><operator pos:line="46" pos:column="48">.<pos:position pos:line="46" pos:column="49"/></operator><name pos:line="46" pos:column="49">args_len<pos:position pos:line="46" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="46" pos:column="58"/></argument_list></call><operator pos:line="46" pos:column="58">)<pos:position pos:line="46" pos:column="59"/></operator> <operator pos:line="46" pos:column="60">!=<pos:position pos:line="46" pos:column="62"/></operator> <name pos:line="46" pos:column="63">APR_SUCCESS<pos:position pos:line="46" pos:column="74"/></name></expr>)<pos:position pos:line="46" pos:column="75"/></condition><then pos:line="46" pos:column="75"> <block pos:line="46" pos:column="76">{
            <return pos:line="47" pos:column="13">return <expr><name pos:line="47" pos:column="20">stat<pos:position pos:line="47" pos:column="24"/></name></expr>;<pos:position pos:line="47" pos:column="25"/></return>
        }<pos:position pos:line="48" pos:column="10"/></block></then></if>
    }<pos:position pos:line="49" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="51" pos:column="5">/* write the environment variables */</comment>
    <for pos:line="52" pos:column="5">for <control pos:line="52" pos:column="9">(<init><expr><name pos:line="52" pos:column="10">i<pos:position pos:line="52" pos:column="11"/></name> <operator pos:line="52" pos:column="12">=<pos:position pos:line="52" pos:column="13"/></operator> <literal type="number" pos:line="52" pos:column="14">0<pos:position pos:line="52" pos:column="15"/></literal></expr>;<pos:position pos:line="52" pos:column="16"/></init> <condition><expr><name pos:line="52" pos:column="17">i<pos:position pos:line="52" pos:column="18"/></name> <operator pos:line="52" pos:column="19">&lt;<pos:position pos:line="52" pos:column="23"/></operator> <name><name pos:line="52" pos:column="21">req<pos:position pos:line="52" pos:column="24"/></name><operator pos:line="52" pos:column="24">.<pos:position pos:line="52" pos:column="25"/></operator><name pos:line="52" pos:column="25">env_count<pos:position pos:line="52" pos:column="34"/></name></name></expr>;<pos:position pos:line="52" pos:column="35"/></condition> <incr><expr><name pos:line="52" pos:column="36">i<pos:position pos:line="52" pos:column="37"/></name><operator pos:line="52" pos:column="37">++<pos:position pos:line="52" pos:column="39"/></operator></expr></incr>)<pos:position pos:line="52" pos:column="40"/></control> <block pos:line="52" pos:column="41">{
        <decl_stmt><decl><type><name pos:line="53" pos:column="9">apr_size_t<pos:position pos:line="53" pos:column="19"/></name></type> <name pos:line="53" pos:column="20">curlen<pos:position pos:line="53" pos:column="26"/></name> <init pos:line="53" pos:column="27">= <expr><call><name pos:line="53" pos:column="29">strlen<pos:position pos:line="53" pos:column="35"/></name><argument_list pos:line="53" pos:column="35">(<argument><expr><name><name pos:line="53" pos:column="36">env<pos:position pos:line="53" pos:column="39"/></name><index pos:line="53" pos:column="39">[<expr><name pos:line="53" pos:column="40">i<pos:position pos:line="53" pos:column="41"/></name></expr>]<pos:position pos:line="53" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="53" pos:column="43"/></argument_list></call></expr></init></decl>;<pos:position pos:line="53" pos:column="44"/></decl_stmt>

        <if pos:line="55" pos:column="9">if <condition pos:line="55" pos:column="12">(<expr><operator pos:line="55" pos:column="13">(<pos:position pos:line="55" pos:column="14"/></operator><name pos:line="55" pos:column="14">stat<pos:position pos:line="55" pos:column="18"/></name> <operator pos:line="55" pos:column="19">=<pos:position pos:line="55" pos:column="20"/></operator> <call><name pos:line="55" pos:column="21">sock_write<pos:position pos:line="55" pos:column="31"/></name><argument_list pos:line="55" pos:column="31">(<argument><expr><name pos:line="55" pos:column="32">fd<pos:position pos:line="55" pos:column="34"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="36">&amp;<pos:position pos:line="55" pos:column="41"/></operator><name pos:line="55" pos:column="37">curlen<pos:position pos:line="55" pos:column="43"/></name></expr></argument>, <argument><expr><sizeof pos:line="55" pos:column="45">sizeof<argument_list pos:line="55" pos:column="51">(<argument><expr><name pos:line="55" pos:column="52">curlen<pos:position pos:line="55" pos:column="58"/></name></expr></argument>)<pos:position pos:line="55" pos:column="59"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="55" pos:column="60"/></argument_list></call><operator pos:line="55" pos:column="60">)<pos:position pos:line="55" pos:column="61"/></operator> <operator pos:line="55" pos:column="62">!=<pos:position pos:line="55" pos:column="64"/></operator> <name pos:line="55" pos:column="65">APR_SUCCESS<pos:position pos:line="55" pos:column="76"/></name></expr>)<pos:position pos:line="55" pos:column="77"/></condition><then pos:line="55" pos:column="77"> <block pos:line="55" pos:column="78">{
            <return pos:line="56" pos:column="13">return <expr><name pos:line="56" pos:column="20">stat<pos:position pos:line="56" pos:column="24"/></name></expr>;<pos:position pos:line="56" pos:column="25"/></return>
        }<pos:position pos:line="57" pos:column="10"/></block></then></if>
            
        <if pos:line="59" pos:column="9">if <condition pos:line="59" pos:column="12">(<expr><operator pos:line="59" pos:column="13">(<pos:position pos:line="59" pos:column="14"/></operator><name pos:line="59" pos:column="14">stat<pos:position pos:line="59" pos:column="18"/></name> <operator pos:line="59" pos:column="19">=<pos:position pos:line="59" pos:column="20"/></operator> <call><name pos:line="59" pos:column="21">sock_write<pos:position pos:line="59" pos:column="31"/></name><argument_list pos:line="59" pos:column="31">(<argument><expr><name pos:line="59" pos:column="32">fd<pos:position pos:line="59" pos:column="34"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="36">env<pos:position pos:line="59" pos:column="39"/></name><index pos:line="59" pos:column="39">[<expr><name pos:line="59" pos:column="40">i<pos:position pos:line="59" pos:column="41"/></name></expr>]<pos:position pos:line="59" pos:column="42"/></index></name></expr></argument>, <argument><expr><name pos:line="59" pos:column="44">curlen<pos:position pos:line="59" pos:column="50"/></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call><operator pos:line="59" pos:column="51">)<pos:position pos:line="59" pos:column="52"/></operator> <operator pos:line="59" pos:column="53">!=<pos:position pos:line="59" pos:column="55"/></operator> <name pos:line="59" pos:column="56">APR_SUCCESS<pos:position pos:line="59" pos:column="67"/></name></expr>)<pos:position pos:line="59" pos:column="68"/></condition><then pos:line="59" pos:column="68"> <block pos:line="59" pos:column="69">{
            <return pos:line="60" pos:column="13">return <expr><name pos:line="60" pos:column="20">stat<pos:position pos:line="60" pos:column="24"/></name></expr>;<pos:position pos:line="60" pos:column="25"/></return>
        }<pos:position pos:line="61" pos:column="10"/></block></then></if>
    }<pos:position pos:line="62" pos:column="6"/></block></for>

    <comment type="block" pos:line="64" pos:column="5">/* send a minimal notes table */</comment>
    <if pos:line="65" pos:column="5">if <condition pos:line="65" pos:column="8">(<expr><name pos:line="65" pos:column="9">user<pos:position pos:line="65" pos:column="13"/></name></expr>)<pos:position pos:line="65" pos:column="14"/></condition><then pos:line="65" pos:column="14"> <block pos:line="65" pos:column="15">{
        <if pos:line="66" pos:column="9">if <condition pos:line="66" pos:column="12">(<expr><operator pos:line="66" pos:column="13">(<pos:position pos:line="66" pos:column="14"/></operator><name pos:line="66" pos:column="14">stat<pos:position pos:line="66" pos:column="18"/></name> <operator pos:line="66" pos:column="19">=<pos:position pos:line="66" pos:column="20"/></operator> <call><name pos:line="66" pos:column="21">sock_write<pos:position pos:line="66" pos:column="31"/></name><argument_list pos:line="66" pos:column="31">(<argument><expr><name pos:line="66" pos:column="32">fd<pos:position pos:line="66" pos:column="34"/></name></expr></argument>, <argument><expr><name pos:line="66" pos:column="36">user<pos:position pos:line="66" pos:column="40"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="42">req<pos:position pos:line="66" pos:column="45"/></name><operator pos:line="66" pos:column="45">.<pos:position pos:line="66" pos:column="46"/></operator><name pos:line="66" pos:column="46">mod_userdir_user_len<pos:position pos:line="66" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="66" pos:column="67"/></argument_list></call><operator pos:line="66" pos:column="67">)<pos:position pos:line="66" pos:column="68"/></operator> <operator pos:line="66" pos:column="69">!=<pos:position pos:line="66" pos:column="71"/></operator> <name pos:line="66" pos:column="72">APR_SUCCESS<pos:position pos:line="66" pos:column="83"/></name></expr>)<pos:position pos:line="66" pos:column="84"/></condition><then pos:line="66" pos:column="84"> <block pos:line="66" pos:column="85">{
            <return pos:line="67" pos:column="13">return <expr><name pos:line="67" pos:column="20">stat<pos:position pos:line="67" pos:column="24"/></name></expr>;<pos:position pos:line="67" pos:column="25"/></return>
        }<pos:position pos:line="68" pos:column="10"/></block></then></if>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>

<cpp:if pos:line="71" pos:column="1">#<cpp:directive pos:line="71" pos:column="2">if<pos:position pos:line="71" pos:column="4"/></cpp:directive> <expr><literal type="number" pos:line="71" pos:column="5">0<pos:position pos:line="71" pos:column="6"/></literal></expr></cpp:if>
<cpp:ifdef pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">ifdef<pos:position pos:line="72" pos:column="7"/></cpp:directive> <name pos:line="72" pos:column="8">RLIMIT_CPU<pos:position pos:line="72" pos:column="18"/></name></cpp:ifdef> 
    if (conf-&gt;limit_cpu) { 
        len = 1; 
        stat = sock_write(fd, &amp;len, sizeof(int)); 
        stat = sock_write(fd, conf-&gt;limit_cpu, sizeof(struct rlimit)); 
    } 
    else { 
        len = 0; 
        stat = sock_write(fd, &amp;len, sizeof(int)); 
    } 
<cpp:endif pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">endif<pos:position pos:line="82" pos:column="7"/></cpp:directive></cpp:endif> 

<cpp:if pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">if<pos:position pos:line="84" pos:column="4"/></cpp:directive> <expr><call><name pos:line="84" pos:column="5">defined<pos:position pos:line="84" pos:column="12"/></name><argument_list pos:line="84" pos:column="12">(<argument><expr><name pos:line="84" pos:column="13">RLIMIT_DATA<pos:position pos:line="84" pos:column="24"/></name></expr></argument>)<pos:position pos:line="84" pos:column="25"/></argument_list></call> <operator pos:line="84" pos:column="26">||<pos:position pos:line="84" pos:column="28"/></operator> <call><name pos:line="84" pos:column="29">defined<pos:position pos:line="84" pos:column="36"/></name><argument_list pos:line="84" pos:column="36">(<argument><expr><name pos:line="84" pos:column="37">RLIMIT_VMEM<pos:position pos:line="84" pos:column="48"/></name></expr></argument>)<pos:position pos:line="84" pos:column="49"/></argument_list></call> <operator pos:line="84" pos:column="50">||<pos:position pos:line="84" pos:column="52"/></operator> <call><name pos:line="84" pos:column="53">defined<pos:position pos:line="84" pos:column="60"/></name><argument_list pos:line="84" pos:column="60">(<argument><expr><name pos:line="84" pos:column="61">RLIMIT_AS<pos:position pos:line="84" pos:column="70"/></name></expr></argument>)<pos:position pos:line="84" pos:column="71"/></argument_list></call></expr></cpp:if> 
    if (conf-&gt;limit_mem) { 
        len = 1; 
        stat = sock_write(fd, &amp;len, sizeof(int)); 
        stat = sock_write(fd, conf-&gt;limit_mem, sizeof(struct rlimit)); 
    } 
    else { 
        len = 0; 
        stat = sock_write(fd, &amp;len, sizeof(int)); 
    } 
<cpp:endif pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">endif<pos:position pos:line="94" pos:column="7"/></cpp:directive></cpp:endif> 
  
<cpp:ifdef pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">ifdef<pos:position pos:line="96" pos:column="7"/></cpp:directive> <name pos:line="96" pos:column="8">RLIMIT_NPROC<pos:position pos:line="96" pos:column="20"/></name></cpp:ifdef> 
    if (conf-&gt;limit_nproc) { 
        len = 1; 
        stat = sock_write(fd, &amp;len, sizeof(int)); 
        stat = sock_write(fd, conf-&gt;limit_nproc, sizeof(struct rlimit)); 
    } 
    else { 
        len = 0; 
        stat = sock_write(fd, &amp;len, sizeof(int)); 
    } 
<cpp:endif pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">endif<pos:position pos:line="106" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="107" pos:column="1">#<cpp:directive pos:line="107" pos:column="2">endif<pos:position pos:line="107" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="108" pos:column="5">return <expr><name pos:line="108" pos:column="12">APR_SUCCESS<pos:position pos:line="108" pos:column="23"/></name></expr>;<pos:position pos:line="108" pos:column="24"/></return>
}<pos:position pos:line="109" pos:column="2"/></block></function></unit>
