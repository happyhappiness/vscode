<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_2622.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">ap_mpm_run<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><name pos:line="1" pos:column="16">apr_pool_t<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">_pconf<pos:position pos:line="1" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="36">apr_pool_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">plog<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="54">server_rec<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">s<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">remaining_threads_to_start<pos:position pos:line="3" pos:column="35"/></name></decl>, <decl><type ref="prev"/><name pos:line="3" pos:column="37">i<pos:position pos:line="3" pos:column="38"/></name></decl>,<decl><type ref="prev"/><name pos:line="3" pos:column="39">j<pos:position pos:line="3" pos:column="40"/></name></decl>;<pos:position pos:line="3" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">ap_listen_rec<pos:position pos:line="5" pos:column="18"/></name> <modifier pos:line="5" pos:column="19">*<pos:position pos:line="5" pos:column="20"/></modifier></type><name pos:line="5" pos:column="20">lr<pos:position pos:line="5" pos:column="22"/></name></decl>;<pos:position pos:line="5" pos:column="23"/></decl_stmt>
    <expr_stmt><expr><name pos:line="6" pos:column="5">pconf<pos:position pos:line="6" pos:column="10"/></name> <operator pos:line="6" pos:column="11">=<pos:position pos:line="6" pos:column="12"/></operator> <name pos:line="6" pos:column="13">_pconf<pos:position pos:line="6" pos:column="19"/></name></expr>;<pos:position pos:line="6" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="7" pos:column="5">ap_server_conf<pos:position pos:line="7" pos:column="19"/></name> <operator pos:line="7" pos:column="20">=<pos:position pos:line="7" pos:column="21"/></operator> <name pos:line="7" pos:column="22">s<pos:position pos:line="7" pos:column="23"/></name></expr>;<pos:position pos:line="7" pos:column="24"/></expr_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* Increase the available pool of fd's.  This code from
     * Joe Kloss &lt;joek@be.com&gt;
     */</comment>
    <if pos:line="12" pos:column="5">if<condition pos:line="12" pos:column="7">( <expr><name pos:line="12" pos:column="9">FD_SETSIZE<pos:position pos:line="12" pos:column="19"/></name> <operator pos:line="12" pos:column="20">&gt;<pos:position pos:line="12" pos:column="24"/></operator> <literal type="number" pos:line="12" pos:column="22">128<pos:position pos:line="12" pos:column="25"/></literal> <operator pos:line="12" pos:column="26">&amp;&amp;<pos:position pos:line="12" pos:column="36"/></operator> <operator pos:line="12" pos:column="29">(<pos:position pos:line="12" pos:column="30"/></operator><name pos:line="12" pos:column="30">i<pos:position pos:line="12" pos:column="31"/></name> <operator pos:line="12" pos:column="32">=<pos:position pos:line="12" pos:column="33"/></operator> <call><name pos:line="12" pos:column="34">_kset_fd_limit_<pos:position pos:line="12" pos:column="49"/></name><argument_list pos:line="12" pos:column="49">( <argument><expr><literal type="number" pos:line="12" pos:column="51">128<pos:position pos:line="12" pos:column="54"/></literal></expr></argument> )<pos:position pos:line="12" pos:column="56"/></argument_list></call><operator pos:line="12" pos:column="56">)<pos:position pos:line="12" pos:column="57"/></operator> <operator pos:line="12" pos:column="58">&lt;<pos:position pos:line="12" pos:column="62"/></operator> <literal type="number" pos:line="12" pos:column="60">0<pos:position pos:line="12" pos:column="61"/></literal></expr> )<pos:position pos:line="12" pos:column="63"/></condition><then><block pos:line="12" pos:column="63">{
        <expr_stmt><expr><call><name pos:line="13" pos:column="9">ap_log_error<pos:position pos:line="13" pos:column="21"/></name><argument_list pos:line="13" pos:column="21">(<argument><expr><name pos:line="13" pos:column="22">APLOG_MARK<pos:position pos:line="13" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="34">APLOG_ERR<pos:position pos:line="13" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="45">i<pos:position pos:line="13" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="13" pos:column="48">s<pos:position pos:line="13" pos:column="49"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="14" pos:column="13">"could not set FD_SETSIZE (_kset_fd_limit_ failed)"<pos:position pos:line="14" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="14" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="66"/></expr_stmt>
    }<pos:position pos:line="15" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="17" pos:column="5">/* BeOS R5 doesn't support pipes on select() calls, so we use a
     * UDP socket as these are supported in both R5 and BONE.  If we only cared
     * about BONE we'd use a pipe, but there it is.
     * As we have UDP support in APR, now use the APR functions and check all the
     * return values...
     */</comment>
    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><call><name pos:line="23" pos:column="9">apr_sockaddr_info_get<pos:position pos:line="23" pos:column="30"/></name><argument_list pos:line="23" pos:column="30">(<argument><expr><operator pos:line="23" pos:column="31">&amp;<pos:position pos:line="23" pos:column="36"/></operator><name pos:line="23" pos:column="32">udp_sa<pos:position pos:line="23" pos:column="38"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="23" pos:column="40">"127.0.0.1"<pos:position pos:line="23" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="53">APR_UNSPEC<pos:position pos:line="23" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="65">7772<pos:position pos:line="23" pos:column="69"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="71">0<pos:position pos:line="23" pos:column="72"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="74">_pconf<pos:position pos:line="23" pos:column="80"/></name></expr></argument>)<pos:position pos:line="23" pos:column="81"/></argument_list></call>
        <operator pos:line="24" pos:column="9">!=<pos:position pos:line="24" pos:column="11"/></operator> <name pos:line="24" pos:column="12">APR_SUCCESS<pos:position pos:line="24" pos:column="23"/></name></expr>)<pos:position pos:line="24" pos:column="24"/></condition><then><block pos:line="24" pos:column="24">{
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">ap_log_error<pos:position pos:line="25" pos:column="21"/></name><argument_list pos:line="25" pos:column="21">(<argument><expr><name pos:line="25" pos:column="22">APLOG_MARK<pos:position pos:line="25" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="34">APLOG_ALERT<pos:position pos:line="25" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="47">errno<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="54">s<pos:position pos:line="25" pos:column="55"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="26" pos:column="13">"couldn't create control socket information, shutting down"<pos:position pos:line="26" pos:column="72"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="74"/></expr_stmt>
        <return pos:line="27" pos:column="9">return <expr><literal type="number" pos:line="27" pos:column="16">1<pos:position pos:line="27" pos:column="17"/></literal></expr>;<pos:position pos:line="27" pos:column="18"/></return>
    }<pos:position pos:line="28" pos:column="6"/></block></then></if>
    <if pos:line="29" pos:column="5">if <condition pos:line="29" pos:column="8">(<expr><call><name pos:line="29" pos:column="9">apr_socket_create<pos:position pos:line="29" pos:column="26"/></name><argument_list pos:line="29" pos:column="26">(<argument><expr><operator pos:line="29" pos:column="27">&amp;<pos:position pos:line="29" pos:column="32"/></operator><name pos:line="29" pos:column="28">udp_sock<pos:position pos:line="29" pos:column="36"/></name></expr></argument>, <argument><expr><name><name pos:line="29" pos:column="38">udp_sa<pos:position pos:line="29" pos:column="44"/></name><operator pos:line="29" pos:column="44">-&gt;<pos:position pos:line="29" pos:column="49"/></operator><name pos:line="29" pos:column="46">family<pos:position pos:line="29" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="54">SOCK_DGRAM<pos:position pos:line="29" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="29" pos:column="66">0<pos:position pos:line="29" pos:column="67"/></literal></expr></argument>,
                      <argument><expr><name pos:line="30" pos:column="23">_pconf<pos:position pos:line="30" pos:column="29"/></name></expr></argument>)<pos:position pos:line="30" pos:column="30"/></argument_list></call> <operator pos:line="30" pos:column="31">!=<pos:position pos:line="30" pos:column="33"/></operator> <name pos:line="30" pos:column="34">APR_SUCCESS<pos:position pos:line="30" pos:column="45"/></name></expr>)<pos:position pos:line="30" pos:column="46"/></condition><then><block pos:line="30" pos:column="46">{
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">ap_log_error<pos:position pos:line="31" pos:column="21"/></name><argument_list pos:line="31" pos:column="21">(<argument><expr><name pos:line="31" pos:column="22">APLOG_MARK<pos:position pos:line="31" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="34">APLOG_ALERT<pos:position pos:line="31" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="47">errno<pos:position pos:line="31" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="54">s<pos:position pos:line="31" pos:column="55"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="32" pos:column="13">"couldn't create control socket, shutting down"<pos:position pos:line="32" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="32" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="62"/></expr_stmt>
        <return pos:line="33" pos:column="9">return <expr><literal type="number" pos:line="33" pos:column="16">1<pos:position pos:line="33" pos:column="17"/></literal></expr>;<pos:position pos:line="33" pos:column="18"/></return>
    }<pos:position pos:line="34" pos:column="6"/></block></then></if>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><call><name pos:line="35" pos:column="9">apr_socket_bind<pos:position pos:line="35" pos:column="24"/></name><argument_list pos:line="35" pos:column="24">(<argument><expr><name pos:line="35" pos:column="25">udp_sock<pos:position pos:line="35" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="35">udp_sa<pos:position pos:line="35" pos:column="41"/></name></expr></argument>)<pos:position pos:line="35" pos:column="42"/></argument_list></call> <operator pos:line="35" pos:column="43">!=<pos:position pos:line="35" pos:column="45"/></operator> <name pos:line="35" pos:column="46">APR_SUCCESS<pos:position pos:line="35" pos:column="57"/></name></expr>)<pos:position pos:line="35" pos:column="58"/></condition><then><block pos:line="35" pos:column="58">{
        <expr_stmt><expr><call><name pos:line="36" pos:column="9">ap_log_error<pos:position pos:line="36" pos:column="21"/></name><argument_list pos:line="36" pos:column="21">(<argument><expr><name pos:line="36" pos:column="22">APLOG_MARK<pos:position pos:line="36" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="34">APLOG_ALERT<pos:position pos:line="36" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="47">errno<pos:position pos:line="36" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="36" pos:column="54">s<pos:position pos:line="36" pos:column="55"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="37" pos:column="13">"couldn't bind UDP socket!"<pos:position pos:line="37" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="37" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="42"/></expr_stmt>
        <return pos:line="38" pos:column="9">return <expr><literal type="number" pos:line="38" pos:column="16">1<pos:position pos:line="38" pos:column="17"/></literal></expr>;<pos:position pos:line="38" pos:column="18"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if>

    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">num_listening_sockets<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">=<pos:position pos:line="41" pos:column="33"/></operator> <call><name pos:line="41" pos:column="34">ap_setup_listeners<pos:position pos:line="41" pos:column="52"/></name><argument_list pos:line="41" pos:column="52">(<argument><expr><name pos:line="41" pos:column="53">ap_server_conf<pos:position pos:line="41" pos:column="67"/></name></expr></argument>)<pos:position pos:line="41" pos:column="68"/></argument_list></call><operator pos:line="41" pos:column="68">)<pos:position pos:line="41" pos:column="69"/></operator> <operator pos:line="41" pos:column="70">&lt;<pos:position pos:line="41" pos:column="74"/></operator> <literal type="number" pos:line="41" pos:column="72">1<pos:position pos:line="41" pos:column="73"/></literal></expr>)<pos:position pos:line="41" pos:column="74"/></condition><then pos:line="41" pos:column="74"> <block pos:line="41" pos:column="75">{
        <expr_stmt><expr><call><name pos:line="42" pos:column="9">ap_log_error<pos:position pos:line="42" pos:column="21"/></name><argument_list pos:line="42" pos:column="21">(<argument><expr><name pos:line="42" pos:column="22">APLOG_MARK<pos:position pos:line="42" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="34">APLOG_ALERT<pos:position pos:line="42" pos:column="45"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="42" pos:column="47">0<pos:position pos:line="42" pos:column="48"/></literal></expr></argument>, <argument><expr><name pos:line="42" pos:column="50">s<pos:position pos:line="42" pos:column="51"/></name></expr></argument>,
            <argument><expr><literal type="string" pos:line="43" pos:column="13">"no listening sockets available, shutting down"<pos:position pos:line="43" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="43" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="62"/></expr_stmt>
        <return pos:line="44" pos:column="9">return <expr><literal type="number" pos:line="44" pos:column="16">1<pos:position pos:line="44" pos:column="17"/></literal></expr>;<pos:position pos:line="44" pos:column="18"/></return>
    }<pos:position pos:line="45" pos:column="6"/></block></then></if>

    <expr_stmt><expr><call><name pos:line="47" pos:column="5">ap_log_pid<pos:position pos:line="47" pos:column="15"/></name><argument_list pos:line="47" pos:column="15">(<argument><expr><name pos:line="47" pos:column="16">pconf<pos:position pos:line="47" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="47" pos:column="23">ap_pid_fname<pos:position pos:line="47" pos:column="35"/></name></expr></argument>)<pos:position pos:line="47" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="37"/></expr_stmt>

    <comment type="block" pos:line="49" pos:column="5">/*
     * Create our locks...
     */</comment>

    <comment type="block" pos:line="53" pos:column="5">/* accept_mutex
     * used to lock around select so we only have one thread
     * in select at a time
     */</comment>
    <expr_stmt><expr><name pos:line="57" pos:column="5">rv<pos:position pos:line="57" pos:column="7"/></name> <operator pos:line="57" pos:column="8">=<pos:position pos:line="57" pos:column="9"/></operator> <call><name pos:line="57" pos:column="10">apr_thread_mutex_create<pos:position pos:line="57" pos:column="33"/></name><argument_list pos:line="57" pos:column="33">(<argument><expr><operator pos:line="57" pos:column="34">&amp;<pos:position pos:line="57" pos:column="39"/></operator><name pos:line="57" pos:column="35">accept_mutex<pos:position pos:line="57" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="57" pos:column="49">0<pos:position pos:line="57" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="57" pos:column="52">pconf<pos:position pos:line="57" pos:column="57"/></name></expr></argument>)<pos:position pos:line="57" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="59"/></expr_stmt>
    <if pos:line="58" pos:column="5">if <condition pos:line="58" pos:column="8">(<expr><name pos:line="58" pos:column="9">rv<pos:position pos:line="58" pos:column="11"/></name> <operator pos:line="58" pos:column="12">!=<pos:position pos:line="58" pos:column="14"/></operator> <name pos:line="58" pos:column="15">APR_SUCCESS<pos:position pos:line="58" pos:column="26"/></name></expr>)<pos:position pos:line="58" pos:column="27"/></condition><then pos:line="58" pos:column="27"> <block pos:line="58" pos:column="28">{
        <comment type="block" pos:line="59" pos:column="9">/* tsch tsch, can't have more than one thread in the accept loop
           at a time so we need to fall on our sword... */</comment>
        <expr_stmt><expr><call><name pos:line="61" pos:column="9">ap_log_error<pos:position pos:line="61" pos:column="21"/></name><argument_list pos:line="61" pos:column="21">(<argument><expr><name pos:line="61" pos:column="22">APLOG_MARK<pos:position pos:line="61" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="34">APLOG_EMERG<pos:position pos:line="61" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="47">rv<pos:position pos:line="61" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="61" pos:column="51">s<pos:position pos:line="61" pos:column="52"/></name></expr></argument>,
                     <argument><expr><literal type="string" pos:line="62" pos:column="22">"Couldn't create accept lock"<pos:position pos:line="62" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="53"/></expr_stmt>
        <return pos:line="63" pos:column="9">return <expr><literal type="number" pos:line="63" pos:column="16">1<pos:position pos:line="63" pos:column="17"/></literal></expr>;<pos:position pos:line="63" pos:column="18"/></return>
    }<pos:position pos:line="64" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="66" pos:column="5">/*
     * Startup/shutdown...
     */</comment>

    <if pos:line="70" pos:column="5">if <condition pos:line="70" pos:column="8">(<expr><operator pos:line="70" pos:column="9">!<pos:position pos:line="70" pos:column="10"/></operator><name pos:line="70" pos:column="10">is_graceful<pos:position pos:line="70" pos:column="21"/></name></expr>)<pos:position pos:line="70" pos:column="22"/></condition><then pos:line="70" pos:column="22"> <block pos:line="70" pos:column="23">{
        <comment type="block" pos:line="71" pos:column="9">/* setup the scoreboard shared memory */</comment>
        <if pos:line="72" pos:column="9">if <condition pos:line="72" pos:column="12">(<expr><call><name pos:line="72" pos:column="13">ap_run_pre_mpm<pos:position pos:line="72" pos:column="27"/></name><argument_list pos:line="72" pos:column="27">(<argument><expr><name><name pos:line="72" pos:column="28">s<pos:position pos:line="72" pos:column="29"/></name><operator pos:line="72" pos:column="29">-&gt;<pos:position pos:line="72" pos:column="34"/></operator><name pos:line="72" pos:column="31">process<pos:position pos:line="72" pos:column="38"/></name><operator pos:line="72" pos:column="38">-&gt;<pos:position pos:line="72" pos:column="43"/></operator><name pos:line="72" pos:column="40">pool<pos:position pos:line="72" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="72" pos:column="46">SB_SHARED<pos:position pos:line="72" pos:column="55"/></name></expr></argument>)<pos:position pos:line="72" pos:column="56"/></argument_list></call> <operator pos:line="72" pos:column="57">!=<pos:position pos:line="72" pos:column="59"/></operator> <name pos:line="72" pos:column="60">OK<pos:position pos:line="72" pos:column="62"/></name></expr>)<pos:position pos:line="72" pos:column="63"/></condition><then pos:line="72" pos:column="63"> <block pos:line="72" pos:column="64">{
            <return pos:line="73" pos:column="13">return <expr><literal type="number" pos:line="73" pos:column="20">1<pos:position pos:line="73" pos:column="21"/></literal></expr>;<pos:position pos:line="73" pos:column="22"/></return>
        }<pos:position pos:line="74" pos:column="10"/></block></then></if>

        <for pos:line="76" pos:column="9">for <control pos:line="76" pos:column="13">(<init><expr><name pos:line="76" pos:column="14">i<pos:position pos:line="76" pos:column="15"/></name> <operator pos:line="76" pos:column="16">=<pos:position pos:line="76" pos:column="17"/></operator> <literal type="number" pos:line="76" pos:column="18">0<pos:position pos:line="76" pos:column="19"/></literal></expr>;<pos:position pos:line="76" pos:column="20"/></init> <condition><expr><name pos:line="76" pos:column="21">i<pos:position pos:line="76" pos:column="22"/></name> <operator pos:line="76" pos:column="23">&lt;<pos:position pos:line="76" pos:column="27"/></operator> <name pos:line="76" pos:column="25">HARD_SERVER_LIMIT<pos:position pos:line="76" pos:column="42"/></name></expr>;<pos:position pos:line="76" pos:column="43"/></condition> <incr><expr><name pos:line="76" pos:column="44">i<pos:position pos:line="76" pos:column="45"/></name><operator pos:line="76" pos:column="45">++<pos:position pos:line="76" pos:column="47"/></operator></expr></incr>)<pos:position pos:line="76" pos:column="48"/></control> <block pos:line="76" pos:column="49">{
            <expr_stmt><expr><name><name pos:line="77" pos:column="13">ap_scoreboard_image<pos:position pos:line="77" pos:column="32"/></name><operator pos:line="77" pos:column="32">-&gt;<pos:position pos:line="77" pos:column="37"/></operator><name pos:line="77" pos:column="34">parent<pos:position pos:line="77" pos:column="40"/></name><index pos:line="77" pos:column="40">[<expr><name pos:line="77" pos:column="41">i<pos:position pos:line="77" pos:column="42"/></name></expr>]<pos:position pos:line="77" pos:column="43"/></index></name><operator pos:line="77" pos:column="43">.<pos:position pos:line="77" pos:column="44"/></operator><name pos:line="77" pos:column="44">pid<pos:position pos:line="77" pos:column="47"/></name> <operator pos:line="77" pos:column="48">=<pos:position pos:line="77" pos:column="49"/></operator> <literal type="number" pos:line="77" pos:column="50">0<pos:position pos:line="77" pos:column="51"/></literal></expr>;<pos:position pos:line="77" pos:column="52"/></expr_stmt>
            <for pos:line="78" pos:column="13">for <control pos:line="78" pos:column="17">(<init><expr><name pos:line="78" pos:column="18">j<pos:position pos:line="78" pos:column="19"/></name> <operator pos:line="78" pos:column="20">=<pos:position pos:line="78" pos:column="21"/></operator> <literal type="number" pos:line="78" pos:column="22">0<pos:position pos:line="78" pos:column="23"/></literal></expr>;<pos:position pos:line="78" pos:column="24"/></init><condition><expr><name pos:line="78" pos:column="24">j<pos:position pos:line="78" pos:column="25"/></name> <operator pos:line="78" pos:column="26">&lt;<pos:position pos:line="78" pos:column="30"/></operator> <name pos:line="78" pos:column="28">HARD_THREAD_LIMIT<pos:position pos:line="78" pos:column="45"/></name></expr>;<pos:position pos:line="78" pos:column="46"/></condition> <incr><expr><name pos:line="78" pos:column="47">j<pos:position pos:line="78" pos:column="48"/></name><operator pos:line="78" pos:column="48">++<pos:position pos:line="78" pos:column="50"/></operator></expr></incr>)<pos:position pos:line="78" pos:column="51"/></control>
                <block type="pseudo"><expr_stmt><expr><name><name pos:line="79" pos:column="17">ap_scoreboard_image<pos:position pos:line="79" pos:column="36"/></name><operator pos:line="79" pos:column="36">-&gt;<pos:position pos:line="79" pos:column="41"/></operator><name pos:line="79" pos:column="38">servers<pos:position pos:line="79" pos:column="45"/></name><index pos:line="79" pos:column="45">[<expr><name pos:line="79" pos:column="46">i<pos:position pos:line="79" pos:column="47"/></name></expr>]<pos:position pos:line="79" pos:column="48"/></index><index pos:line="79" pos:column="48">[<expr><name pos:line="79" pos:column="49">j<pos:position pos:line="79" pos:column="50"/></name></expr>]<pos:position pos:line="79" pos:column="51"/></index></name><operator pos:line="79" pos:column="51">.<pos:position pos:line="79" pos:column="52"/></operator><name pos:line="79" pos:column="52">tid<pos:position pos:line="79" pos:column="55"/></name> <operator pos:line="79" pos:column="56">=<pos:position pos:line="79" pos:column="57"/></operator> <literal type="number" pos:line="79" pos:column="58">0<pos:position pos:line="79" pos:column="59"/></literal></expr>;<pos:position pos:line="79" pos:column="60"/></expr_stmt></block></for>
        }<pos:position pos:line="80" pos:column="10"/></block></for>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if>

    <if pos:line="83" pos:column="5">if <condition pos:line="83" pos:column="8">(<expr><name pos:line="83" pos:column="9">HARD_SERVER_LIMIT<pos:position pos:line="83" pos:column="26"/></name> <operator pos:line="83" pos:column="27">==<pos:position pos:line="83" pos:column="29"/></operator> <literal type="number" pos:line="83" pos:column="30">1<pos:position pos:line="83" pos:column="31"/></literal></expr>)<pos:position pos:line="83" pos:column="32"/></condition><then pos:line="83" pos:column="32">
        <block type="pseudo"><expr_stmt><expr><name><name pos:line="84" pos:column="9">ap_scoreboard_image<pos:position pos:line="84" pos:column="28"/></name><operator pos:line="84" pos:column="28">-&gt;<pos:position pos:line="84" pos:column="33"/></operator><name pos:line="84" pos:column="30">parent<pos:position pos:line="84" pos:column="36"/></name><index pos:line="84" pos:column="36">[<expr><literal type="number" pos:line="84" pos:column="37">0<pos:position pos:line="84" pos:column="38"/></literal></expr>]<pos:position pos:line="84" pos:column="39"/></index></name><operator pos:line="84" pos:column="39">.<pos:position pos:line="84" pos:column="40"/></operator><name pos:line="84" pos:column="40">pid<pos:position pos:line="84" pos:column="43"/></name> <operator pos:line="84" pos:column="44">=<pos:position pos:line="84" pos:column="45"/></operator> <call><name pos:line="84" pos:column="46">getpid<pos:position pos:line="84" pos:column="52"/></name><argument_list pos:line="84" pos:column="52">()<pos:position pos:line="84" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="84" pos:column="55"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="86" pos:column="5">set_signals<pos:position pos:line="86" pos:column="16"/></name><argument_list pos:line="86" pos:column="16">()<pos:position pos:line="86" pos:column="18"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="19"/></expr_stmt>

    <comment type="block" pos:line="88" pos:column="5">/* Sanity checks to avoid thrashing... */</comment>
    <if pos:line="89" pos:column="5">if <condition pos:line="89" pos:column="8">(<expr><name pos:line="89" pos:column="9">max_spare_threads<pos:position pos:line="89" pos:column="26"/></name> <operator pos:line="89" pos:column="27">&lt;<pos:position pos:line="89" pos:column="31"/></operator> <name pos:line="89" pos:column="29">min_spare_threads<pos:position pos:line="89" pos:column="46"/></name></expr> )<pos:position pos:line="89" pos:column="48"/></condition><then pos:line="89" pos:column="48">
        <block type="pseudo"><expr_stmt><expr><name pos:line="90" pos:column="9">max_spare_threads<pos:position pos:line="90" pos:column="26"/></name> <operator pos:line="90" pos:column="27">=<pos:position pos:line="90" pos:column="28"/></operator> <name pos:line="90" pos:column="29">min_spare_threads<pos:position pos:line="90" pos:column="46"/></name></expr>;<pos:position pos:line="90" pos:column="47"/></expr_stmt></block></then></if>

    <comment type="block" pos:line="92" pos:column="5">/* If we're doing a graceful_restart then we're going to see a lot
     * of threads exiting immediately when we get into the main loop
     * below (because we just sent them AP_SIG_GRACEFUL).  This happens
     * pretty rapidly... and for each one that exits we'll start a new one
     * until we reach at least threads_min_free.  But we may be permitted to
     * start more than that, so we'll just keep track of how many we're
     * supposed to start up without the 1 second penalty between each fork.
     */</comment>
    <expr_stmt><expr><name pos:line="100" pos:column="5">remaining_threads_to_start<pos:position pos:line="100" pos:column="31"/></name> <operator pos:line="100" pos:column="32">=<pos:position pos:line="100" pos:column="33"/></operator> <name pos:line="100" pos:column="34">ap_threads_to_start<pos:position pos:line="100" pos:column="53"/></name></expr>;<pos:position pos:line="100" pos:column="54"/></expr_stmt>
    <comment type="block" pos:line="101" pos:column="5">/* sanity check on the number to start... */</comment>
    <if pos:line="102" pos:column="5">if <condition pos:line="102" pos:column="8">(<expr><name pos:line="102" pos:column="9">remaining_threads_to_start<pos:position pos:line="102" pos:column="35"/></name> <operator pos:line="102" pos:column="36">&gt;<pos:position pos:line="102" pos:column="40"/></operator> <name pos:line="102" pos:column="38">ap_thread_limit<pos:position pos:line="102" pos:column="53"/></name></expr>)<pos:position pos:line="102" pos:column="54"/></condition><then pos:line="102" pos:column="54"> <block pos:line="102" pos:column="55">{
            <expr_stmt><expr><name pos:line="103" pos:column="13">remaining_threads_to_start<pos:position pos:line="103" pos:column="39"/></name> <operator pos:line="103" pos:column="40">=<pos:position pos:line="103" pos:column="41"/></operator> <name pos:line="103" pos:column="42">ap_thread_limit<pos:position pos:line="103" pos:column="57"/></name></expr>;<pos:position pos:line="103" pos:column="58"/></expr_stmt>
    }<pos:position pos:line="104" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="106" pos:column="5">/* If we're doing the single process thing or we're in a graceful_restart
     * then we don't start threads here.
     * if we're in one_process mode we don't want to start threads
     * do we??
     */</comment>
    <if pos:line="111" pos:column="5">if <condition pos:line="111" pos:column="8">(<expr><operator pos:line="111" pos:column="9">!<pos:position pos:line="111" pos:column="10"/></operator><name pos:line="111" pos:column="10">is_graceful<pos:position pos:line="111" pos:column="21"/></name> <operator pos:line="111" pos:column="22">&amp;&amp;<pos:position pos:line="111" pos:column="32"/></operator> <operator pos:line="111" pos:column="25">!<pos:position pos:line="111" pos:column="26"/></operator><name pos:line="111" pos:column="26">one_process<pos:position pos:line="111" pos:column="37"/></name></expr>)<pos:position pos:line="111" pos:column="38"/></condition><then pos:line="111" pos:column="38"> <block pos:line="111" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="112" pos:column="13">startup_threads<pos:position pos:line="112" pos:column="28"/></name><argument_list pos:line="112" pos:column="28">(<argument><expr><name pos:line="112" pos:column="29">remaining_threads_to_start<pos:position pos:line="112" pos:column="55"/></name></expr></argument>)<pos:position pos:line="112" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="112" pos:column="57"/></expr_stmt>
            <expr_stmt><expr><name pos:line="113" pos:column="13">remaining_threads_to_start<pos:position pos:line="113" pos:column="39"/></name> <operator pos:line="113" pos:column="40">=<pos:position pos:line="113" pos:column="41"/></operator> <literal type="number" pos:line="113" pos:column="42">0<pos:position pos:line="113" pos:column="43"/></literal></expr>;<pos:position pos:line="113" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="114" pos:column="6"/></block></then> <else pos:line="114" pos:column="7">else <block pos:line="114" pos:column="12">{
            <comment type="block" pos:line="115" pos:column="13">/* give the system some time to recover before kicking into
             * exponential mode */</comment>
        <expr_stmt><expr><name pos:line="117" pos:column="9">hold_off_on_exponential_spawning<pos:position pos:line="117" pos:column="41"/></name> <operator pos:line="117" pos:column="42">=<pos:position pos:line="117" pos:column="43"/></operator> <literal type="number" pos:line="117" pos:column="44">10<pos:position pos:line="117" pos:column="46"/></literal></expr>;<pos:position pos:line="117" pos:column="47"/></expr_stmt>
    }<pos:position pos:line="118" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="120" pos:column="5">/*
     * record that we've entered the world !
     */</comment>
    <expr_stmt><expr><call><name pos:line="123" pos:column="5">ap_log_error<pos:position pos:line="123" pos:column="17"/></name><argument_list pos:line="123" pos:column="17">(<argument><expr><name pos:line="123" pos:column="18">APLOG_MARK<pos:position pos:line="123" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="123" pos:column="30">APLOG_NOTICE<pos:position pos:line="123" pos:column="42"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="123" pos:column="44">0<pos:position pos:line="123" pos:column="45"/></literal></expr></argument>, <argument><expr><name pos:line="123" pos:column="47">ap_server_conf<pos:position pos:line="123" pos:column="61"/></name></expr></argument>,
                <argument><expr><literal type="string" pos:line="124" pos:column="17">"%s configured -- resuming normal operations"<pos:position pos:line="124" pos:column="62"/></literal></expr></argument>,
                <argument><expr><call><name pos:line="125" pos:column="17">ap_get_server_version<pos:position pos:line="125" pos:column="38"/></name><argument_list pos:line="125" pos:column="38">()<pos:position pos:line="125" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="125" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="42"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="127" pos:column="5">ap_log_error<pos:position pos:line="127" pos:column="17"/></name><argument_list pos:line="127" pos:column="17">(<argument><expr><name pos:line="127" pos:column="18">APLOG_MARK<pos:position pos:line="127" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="127" pos:column="30">APLOG_INFO<pos:position pos:line="127" pos:column="40"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="127" pos:column="42">0<pos:position pos:line="127" pos:column="43"/></literal></expr></argument>, <argument><expr><name pos:line="127" pos:column="45">ap_server_conf<pos:position pos:line="127" pos:column="59"/></name></expr></argument>,
                <argument><expr><literal type="string" pos:line="128" pos:column="17">"Server built: %s"<pos:position pos:line="128" pos:column="35"/></literal></expr></argument>, <argument><expr><call><name pos:line="128" pos:column="37">ap_get_server_built<pos:position pos:line="128" pos:column="56"/></name><argument_list pos:line="128" pos:column="56">()<pos:position pos:line="128" pos:column="58"/></argument_list></call></expr></argument>)<pos:position pos:line="128" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="60"/></expr_stmt>

    <expr_stmt><expr><name pos:line="130" pos:column="5">restart_pending<pos:position pos:line="130" pos:column="20"/></name> <operator pos:line="130" pos:column="21">=<pos:position pos:line="130" pos:column="22"/></operator> <name pos:line="130" pos:column="23">shutdown_pending<pos:position pos:line="130" pos:column="39"/></name> <operator pos:line="130" pos:column="40">=<pos:position pos:line="130" pos:column="41"/></operator> <literal type="number" pos:line="130" pos:column="42">0<pos:position pos:line="130" pos:column="43"/></literal></expr>;<pos:position pos:line="130" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><name pos:line="132" pos:column="5">mpm_state<pos:position pos:line="132" pos:column="14"/></name> <operator pos:line="132" pos:column="15">=<pos:position pos:line="132" pos:column="16"/></operator> <name pos:line="132" pos:column="17">AP_MPMQ_RUNNING<pos:position pos:line="132" pos:column="32"/></name></expr>;<pos:position pos:line="132" pos:column="33"/></expr_stmt>

    <comment type="block" pos:line="134" pos:column="5">/* We sit in the server_main_loop() until we somehow manage to exit. When
     * we do, we need to kill the workers we have, so we start by using the
     * tell_workers_to_exit() function, but as it sometimes takes a short while
     * to accomplish this we have a pause builtin to allow them the chance to
     * gracefully exit.
     */</comment>
    <if pos:line="140" pos:column="5">if <condition pos:line="140" pos:column="8">(<expr><operator pos:line="140" pos:column="9">!<pos:position pos:line="140" pos:column="10"/></operator><name pos:line="140" pos:column="10">one_process<pos:position pos:line="140" pos:column="21"/></name></expr>)<pos:position pos:line="140" pos:column="22"/></condition><then pos:line="140" pos:column="22"> <block pos:line="140" pos:column="23">{
        <expr_stmt><expr><call><name pos:line="141" pos:column="9">server_main_loop<pos:position pos:line="141" pos:column="25"/></name><argument_list pos:line="141" pos:column="25">(<argument><expr><name pos:line="141" pos:column="26">remaining_threads_to_start<pos:position pos:line="141" pos:column="52"/></name></expr></argument>)<pos:position pos:line="141" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="54"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="142" pos:column="9">tell_workers_to_exit<pos:position pos:line="142" pos:column="29"/></name><argument_list pos:line="142" pos:column="29">()<pos:position pos:line="142" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="142" pos:column="32"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="143" pos:column="9">snooze<pos:position pos:line="143" pos:column="15"/></name><argument_list pos:line="143" pos:column="15">(<argument><expr><literal type="number" pos:line="143" pos:column="16">1000000<pos:position pos:line="143" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="143" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="143" pos:column="25"/></expr_stmt>
    }<pos:position pos:line="144" pos:column="6"/></block></then> <else pos:line="144" pos:column="7">else <block pos:line="144" pos:column="12">{
        <expr_stmt><expr><call><name pos:line="145" pos:column="9">worker_thread<pos:position pos:line="145" pos:column="22"/></name><argument_list pos:line="145" pos:column="22">(<argument><expr><operator pos:line="145" pos:column="23">(<pos:position pos:line="145" pos:column="24"/></operator><name pos:line="145" pos:column="24">void<pos:position pos:line="145" pos:column="28"/></name><operator pos:line="145" pos:column="28">*<pos:position pos:line="145" pos:column="29"/></operator><operator pos:line="145" pos:column="29">)<pos:position pos:line="145" pos:column="30"/></operator><literal type="number" pos:line="145" pos:column="30">0<pos:position pos:line="145" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="33"/></expr_stmt>
    }<pos:position pos:line="146" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="147" pos:column="5">mpm_state<pos:position pos:line="147" pos:column="14"/></name> <operator pos:line="147" pos:column="15">=<pos:position pos:line="147" pos:column="16"/></operator> <name pos:line="147" pos:column="17">AP_MPMQ_STOPPING<pos:position pos:line="147" pos:column="33"/></name></expr>;<pos:position pos:line="147" pos:column="34"/></expr_stmt>

    <comment type="block" pos:line="149" pos:column="5">/* close the UDP socket we've been using... */</comment>
    <expr_stmt><expr><call><name pos:line="150" pos:column="5">apr_socket_close<pos:position pos:line="150" pos:column="21"/></name><argument_list pos:line="150" pos:column="21">(<argument><expr><name pos:line="150" pos:column="22">udp_sock<pos:position pos:line="150" pos:column="30"/></name></expr></argument>)<pos:position pos:line="150" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="32"/></expr_stmt>

    <if pos:line="152" pos:column="5">if <condition pos:line="152" pos:column="8">(<expr><operator pos:line="152" pos:column="9">(<pos:position pos:line="152" pos:column="10"/></operator><name pos:line="152" pos:column="10">one_process<pos:position pos:line="152" pos:column="21"/></name> <operator pos:line="152" pos:column="22">||<pos:position pos:line="152" pos:column="24"/></operator> <name pos:line="152" pos:column="25">shutdown_pending<pos:position pos:line="152" pos:column="41"/></name><operator pos:line="152" pos:column="41">)<pos:position pos:line="152" pos:column="42"/></operator> <operator pos:line="152" pos:column="43">&amp;&amp;<pos:position pos:line="152" pos:column="53"/></operator> <operator pos:line="152" pos:column="46">!<pos:position pos:line="152" pos:column="47"/></operator><name pos:line="152" pos:column="47">child_fatal<pos:position pos:line="152" pos:column="58"/></name></expr>)<pos:position pos:line="152" pos:column="59"/></condition><then pos:line="152" pos:column="59"> <block pos:line="152" pos:column="60">{
        <decl_stmt><decl><type><specifier pos:line="153" pos:column="9">const<pos:position pos:line="153" pos:column="14"/></specifier> <name pos:line="153" pos:column="15">char<pos:position pos:line="153" pos:column="19"/></name> <modifier pos:line="153" pos:column="20">*<pos:position pos:line="153" pos:column="21"/></modifier></type><name pos:line="153" pos:column="21">pidfile<pos:position pos:line="153" pos:column="28"/></name> <init pos:line="153" pos:column="29">= <expr><name pos:line="153" pos:column="31">NULL<pos:position pos:line="153" pos:column="35"/></name></expr></init></decl>;<pos:position pos:line="153" pos:column="36"/></decl_stmt>
        <expr_stmt><expr><name pos:line="154" pos:column="9">pidfile<pos:position pos:line="154" pos:column="16"/></name> <operator pos:line="154" pos:column="17">=<pos:position pos:line="154" pos:column="18"/></operator> <call><name pos:line="154" pos:column="19">ap_server_root_relative<pos:position pos:line="154" pos:column="42"/></name> <argument_list pos:line="154" pos:column="43">(<argument><expr><name pos:line="154" pos:column="44">pconf<pos:position pos:line="154" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="154" pos:column="51">ap_pid_fname<pos:position pos:line="154" pos:column="63"/></name></expr></argument>)<pos:position pos:line="154" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="154" pos:column="65"/></expr_stmt>
        <if pos:line="155" pos:column="9">if <condition pos:line="155" pos:column="12">( <expr><name pos:line="155" pos:column="14">pidfile<pos:position pos:line="155" pos:column="21"/></name> <operator pos:line="155" pos:column="22">!=<pos:position pos:line="155" pos:column="24"/></operator> <name pos:line="155" pos:column="25">NULL<pos:position pos:line="155" pos:column="29"/></name> <operator pos:line="155" pos:column="30">&amp;&amp;<pos:position pos:line="155" pos:column="40"/></operator> <call><name pos:line="155" pos:column="33">unlink<pos:position pos:line="155" pos:column="39"/></name><argument_list pos:line="155" pos:column="39">(<argument><expr><name pos:line="155" pos:column="40">pidfile<pos:position pos:line="155" pos:column="47"/></name></expr></argument>)<pos:position pos:line="155" pos:column="48"/></argument_list></call> <operator pos:line="155" pos:column="49">==<pos:position pos:line="155" pos:column="51"/></operator> <literal type="number" pos:line="155" pos:column="52">0<pos:position pos:line="155" pos:column="53"/></literal></expr>)<pos:position pos:line="155" pos:column="54"/></condition><then pos:line="155" pos:column="54">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="156" pos:column="13">ap_log_error<pos:position pos:line="156" pos:column="25"/></name><argument_list pos:line="156" pos:column="25">(<argument><expr><name pos:line="156" pos:column="26">APLOG_MARK<pos:position pos:line="156" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="156" pos:column="38">APLOG_INFO<pos:position pos:line="156" pos:column="48"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="156" pos:column="50">0<pos:position pos:line="156" pos:column="51"/></literal></expr></argument>, <argument><expr><name pos:line="156" pos:column="53">ap_server_conf<pos:position pos:line="156" pos:column="67"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="157" pos:column="26">"removed PID file %s (pid=%ld)"<pos:position pos:line="157" pos:column="57"/></literal></expr></argument>, <argument><expr><name pos:line="157" pos:column="59">pidfile<pos:position pos:line="157" pos:column="66"/></name></expr></argument>,
                         <argument><expr><operator pos:line="158" pos:column="26">(<pos:position pos:line="158" pos:column="27"/></operator><name pos:line="158" pos:column="27">long<pos:position pos:line="158" pos:column="31"/></name><operator pos:line="158" pos:column="31">)<pos:position pos:line="158" pos:column="32"/></operator><call><name pos:line="158" pos:column="32">getpid<pos:position pos:line="158" pos:column="38"/></name><argument_list pos:line="158" pos:column="38">()<pos:position pos:line="158" pos:column="40"/></argument_list></call></expr></argument>)<pos:position pos:line="158" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="158" pos:column="42"/></expr_stmt></block></then></if>
    }<pos:position pos:line="159" pos:column="6"/></block></then></if>

    <if pos:line="161" pos:column="5">if <condition pos:line="161" pos:column="8">(<expr><name pos:line="161" pos:column="9">one_process<pos:position pos:line="161" pos:column="20"/></name></expr>)<pos:position pos:line="161" pos:column="21"/></condition><then pos:line="161" pos:column="21"> <block pos:line="161" pos:column="22">{
        <return pos:line="162" pos:column="9">return <expr><literal type="number" pos:line="162" pos:column="16">1<pos:position pos:line="162" pos:column="17"/></literal></expr>;<pos:position pos:line="162" pos:column="18"/></return>
    }<pos:position pos:line="163" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="165" pos:column="5">/*
     * If we get here we're shutting down...
     */</comment>
    <if pos:line="168" pos:column="5">if <condition pos:line="168" pos:column="8">(<expr><name pos:line="168" pos:column="9">shutdown_pending<pos:position pos:line="168" pos:column="25"/></name></expr>)<pos:position pos:line="168" pos:column="26"/></condition><then pos:line="168" pos:column="26"> <block pos:line="168" pos:column="27">{
        <comment type="block" pos:line="169" pos:column="9">/* Time to gracefully shut down:
         * Kill child processes, tell them to call child_exit, etc...
         */</comment>
        <if pos:line="172" pos:column="9">if <condition pos:line="172" pos:column="12">(<expr><call><name pos:line="172" pos:column="13">beosd_killpg<pos:position pos:line="172" pos:column="25"/></name><argument_list pos:line="172" pos:column="25">(<argument><expr><call><name pos:line="172" pos:column="26">getpgrp<pos:position pos:line="172" pos:column="33"/></name><argument_list pos:line="172" pos:column="33">()<pos:position pos:line="172" pos:column="35"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="172" pos:column="37">SIGTERM<pos:position pos:line="172" pos:column="44"/></name></expr></argument>)<pos:position pos:line="172" pos:column="45"/></argument_list></call> <operator pos:line="172" pos:column="46">&lt;<pos:position pos:line="172" pos:column="50"/></operator> <literal type="number" pos:line="172" pos:column="48">0<pos:position pos:line="172" pos:column="49"/></literal></expr>)<pos:position pos:line="172" pos:column="50"/></condition><then pos:line="172" pos:column="50">
            <block type="pseudo"><expr_stmt><expr><call><name pos:line="173" pos:column="13">ap_log_error<pos:position pos:line="173" pos:column="25"/></name><argument_list pos:line="173" pos:column="25">(<argument><expr><name pos:line="173" pos:column="26">APLOG_MARK<pos:position pos:line="173" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="38">APLOG_WARNING<pos:position pos:line="173" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="53">errno<pos:position pos:line="173" pos:column="58"/></name></expr></argument>, <argument><expr><name pos:line="173" pos:column="60">ap_server_conf<pos:position pos:line="173" pos:column="74"/></name></expr></argument>,
             <argument><expr><literal type="string" pos:line="174" pos:column="14">"killpg SIGTERM"<pos:position pos:line="174" pos:column="30"/></literal></expr></argument>)<pos:position pos:line="174" pos:column="31"/></argument_list></call></expr>;<pos:position pos:line="174" pos:column="32"/></expr_stmt></block></then></if>

        <comment type="block" pos:line="176" pos:column="9">/* use ap_reclaim_child_processes starting with SIGTERM */</comment>
        <expr_stmt><expr><call><name pos:line="177" pos:column="9">ap_reclaim_child_processes<pos:position pos:line="177" pos:column="35"/></name><argument_list pos:line="177" pos:column="35">(<argument><expr><literal type="number" pos:line="177" pos:column="36">1<pos:position pos:line="177" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="177" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="177" pos:column="39"/></expr_stmt>

        <if pos:line="179" pos:column="9">if <condition pos:line="179" pos:column="12">(<expr><operator pos:line="179" pos:column="13">!<pos:position pos:line="179" pos:column="14"/></operator><name pos:line="179" pos:column="14">child_fatal<pos:position pos:line="179" pos:column="25"/></name></expr>)<pos:position pos:line="179" pos:column="26"/></condition><then pos:line="179" pos:column="26"> <block pos:line="179" pos:column="27">{         <comment type="block" pos:line="179" pos:column="37">/* already recorded */</comment>
            <comment type="block" pos:line="180" pos:column="13">/* record the shutdown in the log */</comment>
            <expr_stmt><expr><call><name pos:line="181" pos:column="13">ap_log_error<pos:position pos:line="181" pos:column="25"/></name><argument_list pos:line="181" pos:column="25">(<argument><expr><name pos:line="181" pos:column="26">APLOG_MARK<pos:position pos:line="181" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="181" pos:column="38">APLOG_NOTICE<pos:position pos:line="181" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="181" pos:column="52">0<pos:position pos:line="181" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="181" pos:column="55">ap_server_conf<pos:position pos:line="181" pos:column="69"/></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="182" pos:column="26">"caught SIGTERM, shutting down"<pos:position pos:line="182" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="182" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="182" pos:column="59"/></expr_stmt>
        }<pos:position pos:line="183" pos:column="10"/></block></then></if>

        <return pos:line="185" pos:column="9">return <expr><literal type="number" pos:line="185" pos:column="16">1<pos:position pos:line="185" pos:column="17"/></literal></expr>;<pos:position pos:line="185" pos:column="18"/></return>
    }<pos:position pos:line="186" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="188" pos:column="5">/* we've been told to restart */</comment>
    <expr_stmt><expr><call><name pos:line="189" pos:column="5">signal<pos:position pos:line="189" pos:column="11"/></name><argument_list pos:line="189" pos:column="11">(<argument><expr><name pos:line="189" pos:column="12">SIGHUP<pos:position pos:line="189" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="189" pos:column="20">SIG_IGN<pos:position pos:line="189" pos:column="27"/></name></expr></argument>)<pos:position pos:line="189" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="189" pos:column="29"/></expr_stmt>

    <if pos:line="191" pos:column="5">if <condition pos:line="191" pos:column="8">(<expr><name pos:line="191" pos:column="9">is_graceful<pos:position pos:line="191" pos:column="20"/></name></expr>)<pos:position pos:line="191" pos:column="21"/></condition><then pos:line="191" pos:column="21"> <block pos:line="191" pos:column="22">{
        <expr_stmt><expr><call><name pos:line="192" pos:column="9">ap_log_error<pos:position pos:line="192" pos:column="21"/></name><argument_list pos:line="192" pos:column="21">(<argument><expr><name pos:line="192" pos:column="22">APLOG_MARK<pos:position pos:line="192" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="192" pos:column="34">APLOG_NOTICE<pos:position pos:line="192" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="192" pos:column="48">0<pos:position pos:line="192" pos:column="49"/></literal></expr></argument>, <argument><expr><name pos:line="192" pos:column="51">ap_server_conf<pos:position pos:line="192" pos:column="65"/></name></expr></argument>,
                    <argument><expr><name pos:line="193" pos:column="21">AP_SIG_GRACEFUL_STRING<pos:position pos:line="193" pos:column="43"/></name> <literal type="string" pos:line="193" pos:column="44">" received.  Doing graceful restart"<pos:position pos:line="193" pos:column="80"/></literal></expr></argument>)<pos:position pos:line="193" pos:column="81"/></argument_list></call></expr>;<pos:position pos:line="193" pos:column="82"/></expr_stmt>
    }<pos:position pos:line="194" pos:column="6"/></block></then> <else pos:line="194" pos:column="7">else <block pos:line="194" pos:column="12">{
        <comment type="block" pos:line="195" pos:column="9">/* Kill 'em all.  Since the child acts the same on the parents SIGTERM
         * and a SIGHUP, we may as well use the same signal, because some user
         * pthreads are stealing signals from us left and right.
         */</comment>

        <expr_stmt><expr><call><name pos:line="200" pos:column="9">ap_reclaim_child_processes<pos:position pos:line="200" pos:column="35"/></name><argument_list pos:line="200" pos:column="35">(<argument><expr><literal type="number" pos:line="200" pos:column="36">1<pos:position pos:line="200" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="200" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="200" pos:column="39"/></expr_stmt>   <comment type="block" pos:line="200" pos:column="42">/* Start with SIGTERM */</comment>
            <expr_stmt><expr><call><name pos:line="201" pos:column="13">ap_log_error<pos:position pos:line="201" pos:column="25"/></name><argument_list pos:line="201" pos:column="25">(<argument><expr><name pos:line="201" pos:column="26">APLOG_MARK<pos:position pos:line="201" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="201" pos:column="38">APLOG_NOTICE<pos:position pos:line="201" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="201" pos:column="52">0<pos:position pos:line="201" pos:column="53"/></literal></expr></argument>, <argument><expr><name pos:line="201" pos:column="55">ap_server_conf<pos:position pos:line="201" pos:column="69"/></name></expr></argument>,
                    <argument><expr><literal type="string" pos:line="202" pos:column="21">"SIGHUP received.  Attempting to restart"<pos:position pos:line="202" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="202" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="202" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="203" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="205" pos:column="5">/* just before we go, tidy up the lock we created to prevent a
     * potential leak of semaphores...
     */</comment>
    <expr_stmt><expr><call><name pos:line="208" pos:column="5">apr_thread_mutex_destroy<pos:position pos:line="208" pos:column="29"/></name><argument_list pos:line="208" pos:column="29">(<argument><expr><name pos:line="208" pos:column="30">accept_mutex<pos:position pos:line="208" pos:column="42"/></name></expr></argument>)<pos:position pos:line="208" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="208" pos:column="44"/></expr_stmt>

    <return pos:line="210" pos:column="5">return <expr><literal type="number" pos:line="210" pos:column="12">0<pos:position pos:line="210" pos:column="13"/></literal></expr>;<pos:position pos:line="210" pos:column="14"/></return>
}<pos:position pos:line="211" pos:column="2"/></block></function></unit>
