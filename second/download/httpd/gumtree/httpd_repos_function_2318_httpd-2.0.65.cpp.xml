<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2318_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">worker_stack_term<pos:position pos:line="1" pos:column="38"/></name><parameter_list pos:line="1" pos:column="38">(<parameter><decl><type><name pos:line="1" pos:column="39">worker_stack<pos:position pos:line="1" pos:column="51"/></name> <modifier pos:line="1" pos:column="52">*<pos:position pos:line="1" pos:column="53"/></modifier></type><name pos:line="1" pos:column="53">stack<pos:position pos:line="1" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="59"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">i<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>

    <while pos:line="6" pos:column="5">while <condition pos:line="6" pos:column="11">(<expr><literal type="number" pos:line="6" pos:column="12">1<pos:position pos:line="6" pos:column="13"/></literal></expr>)<pos:position pos:line="6" pos:column="14"/></condition> <block pos:line="6" pos:column="15">{
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">apr_uint32_t<pos:position pos:line="7" pos:column="21"/></name></type> <name pos:line="7" pos:column="22">state<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><name><name pos:line="7" pos:column="30">stack<pos:position pos:line="7" pos:column="35"/></name><operator pos:line="7" pos:column="35">-&gt;<pos:position pos:line="7" pos:column="40"/></operator><name pos:line="7" pos:column="37">state<pos:position pos:line="7" pos:column="42"/></name></name></expr></init></decl>;<pos:position pos:line="7" pos:column="43"/></decl_stmt>
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><call><name pos:line="8" pos:column="13">apr_atomic_cas<pos:position pos:line="8" pos:column="27"/></name><argument_list pos:line="8" pos:column="27">(<argument><expr><operator pos:line="8" pos:column="28">&amp;<pos:position pos:line="8" pos:column="33"/></operator><operator pos:line="8" pos:column="29">(<pos:position pos:line="8" pos:column="30"/></operator><name><name pos:line="8" pos:column="30">stack<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">state<pos:position pos:line="8" pos:column="42"/></name></name><operator pos:line="8" pos:column="42">)<pos:position pos:line="8" pos:column="43"/></operator></expr></argument>, <argument><expr><name pos:line="8" pos:column="45">state<pos:position pos:line="8" pos:column="50"/></name> <operator pos:line="8" pos:column="51">|<pos:position pos:line="8" pos:column="52"/></operator> <name pos:line="8" pos:column="53">STACK_TERMINATED<pos:position pos:line="8" pos:column="69"/></name></expr></argument>,
                           <argument><expr><name pos:line="9" pos:column="28">state<pos:position pos:line="9" pos:column="33"/></name></expr></argument>)<pos:position pos:line="9" pos:column="34"/></argument_list></call> <operator pos:line="9" pos:column="35">==<pos:position pos:line="9" pos:column="37"/></operator> <name pos:line="9" pos:column="38">state<pos:position pos:line="9" pos:column="43"/></name></expr>)<pos:position pos:line="9" pos:column="44"/></condition><then pos:line="9" pos:column="44"> <block pos:line="9" pos:column="45">{
            <break pos:line="10" pos:column="13">break;<pos:position pos:line="10" pos:column="19"/></break>
        }<pos:position pos:line="11" pos:column="10"/></block></then></if>
    }<pos:position pos:line="12" pos:column="6"/></block></while>
    <for pos:line="13" pos:column="5">for <control pos:line="13" pos:column="9">(<init><expr><name pos:line="13" pos:column="10">i<pos:position pos:line="13" pos:column="11"/></name> <operator pos:line="13" pos:column="12">=<pos:position pos:line="13" pos:column="13"/></operator> <literal type="number" pos:line="13" pos:column="14">0<pos:position pos:line="13" pos:column="15"/></literal></expr>;<pos:position pos:line="13" pos:column="16"/></init> <condition><expr><name pos:line="13" pos:column="17">i<pos:position pos:line="13" pos:column="18"/></name> <operator pos:line="13" pos:column="19">&lt;<pos:position pos:line="13" pos:column="23"/></operator> <name pos:line="13" pos:column="21">ap_threads_per_child<pos:position pos:line="13" pos:column="41"/></name></expr>;<pos:position pos:line="13" pos:column="42"/></condition> <incr><expr><name pos:line="13" pos:column="43">i<pos:position pos:line="13" pos:column="44"/></name><operator pos:line="13" pos:column="44">++<pos:position pos:line="13" pos:column="46"/></operator></expr></incr>)<pos:position pos:line="13" pos:column="47"/></control> <block pos:line="13" pos:column="48">{
        <if pos:line="14" pos:column="9">if <condition pos:line="14" pos:column="12">(<expr><operator pos:line="14" pos:column="13">(<pos:position pos:line="14" pos:column="14"/></operator><name pos:line="14" pos:column="14">rv<pos:position pos:line="14" pos:column="16"/></name> <operator pos:line="14" pos:column="17">=<pos:position pos:line="14" pos:column="18"/></operator> <call><name pos:line="14" pos:column="19">worker_stack_awaken_next<pos:position pos:line="14" pos:column="43"/></name><argument_list pos:line="14" pos:column="43">(<argument><expr><name pos:line="14" pos:column="44">stack<pos:position pos:line="14" pos:column="49"/></name></expr></argument>)<pos:position pos:line="14" pos:column="50"/></argument_list></call><operator pos:line="14" pos:column="50">)<pos:position pos:line="14" pos:column="51"/></operator> <operator pos:line="14" pos:column="52">!=<pos:position pos:line="14" pos:column="54"/></operator> <name pos:line="14" pos:column="55">APR_SUCCESS<pos:position pos:line="14" pos:column="66"/></name></expr>)<pos:position pos:line="14" pos:column="67"/></condition><then pos:line="14" pos:column="67"> <block pos:line="14" pos:column="68">{
            <return pos:line="15" pos:column="13">return <expr><name pos:line="15" pos:column="20">rv<pos:position pos:line="15" pos:column="22"/></name></expr>;<pos:position pos:line="15" pos:column="23"/></return>
        }<pos:position pos:line="16" pos:column="10"/></block></then></if>
    }<pos:position pos:line="17" pos:column="6"/></block></for>
    <return pos:line="18" pos:column="5">return <expr><name pos:line="18" pos:column="12">APR_SUCCESS<pos:position pos:line="18" pos:column="23"/></name></expr>;<pos:position pos:line="18" pos:column="24"/></return>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
