<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1232_httpd-2.0.65.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">check_pipeline_flush<pos:position pos:line="1" pos:column="33"/></name><parameter_list pos:line="1" pos:column="33">(<parameter><decl><type><name pos:line="1" pos:column="34">request_rec<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">r<pos:position pos:line="1" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="49"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">conn_rec<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">c<pos:position pos:line="3" pos:column="16"/></name> <init pos:line="3" pos:column="17">= <expr><name><name pos:line="3" pos:column="19">r<pos:position pos:line="3" pos:column="20"/></name><operator pos:line="3" pos:column="20">-&gt;<pos:position pos:line="3" pos:column="25"/></operator><name pos:line="3" pos:column="22">connection<pos:position pos:line="3" pos:column="32"/></name></name></expr></init></decl>;<pos:position pos:line="3" pos:column="33"/></decl_stmt>
    <comment type="block" pos:line="4" pos:column="5">/* ### if would be nice if we could PEEK without a brigade. that would
       ### allow us to defer creation of the brigade to when we actually
       ### need to send a FLUSH. */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_bucket_brigade<pos:position pos:line="7" pos:column="23"/></name> <modifier pos:line="7" pos:column="24">*<pos:position pos:line="7" pos:column="25"/></modifier></type><name pos:line="7" pos:column="25">bb<pos:position pos:line="7" pos:column="27"/></name> <init pos:line="7" pos:column="28">= <expr><call><name pos:line="7" pos:column="30">apr_brigade_create<pos:position pos:line="7" pos:column="48"/></name><argument_list pos:line="7" pos:column="48">(<argument><expr><name><name pos:line="7" pos:column="49">r<pos:position pos:line="7" pos:column="50"/></name><operator pos:line="7" pos:column="50">-&gt;<pos:position pos:line="7" pos:column="55"/></operator><name pos:line="7" pos:column="52">pool<pos:position pos:line="7" pos:column="56"/></name></name></expr></argument>, <argument><expr><name><name pos:line="7" pos:column="58">c<pos:position pos:line="7" pos:column="59"/></name><operator pos:line="7" pos:column="59">-&gt;<pos:position pos:line="7" pos:column="64"/></operator><name pos:line="7" pos:column="61">bucket_alloc<pos:position pos:line="7" pos:column="73"/></name></name></expr></argument>)<pos:position pos:line="7" pos:column="74"/></argument_list></call></expr></init></decl>;<pos:position pos:line="7" pos:column="75"/></decl_stmt>

    <comment type="block" pos:line="9" pos:column="5">/* Flush the filter contents if:
     *
     *   1) the connection will be closed
     *   2) there isn't a request ready to be read
     */</comment>
    <comment type="block" pos:line="14" pos:column="5">/* ### shouldn't this read from the connection input filters? */</comment>
    <comment type="block" pos:line="15" pos:column="5">/* ### is zero correct? that means "read one line" */</comment>
    <if pos:line="16" pos:column="5">if <condition pos:line="16" pos:column="8">(<expr><name><name pos:line="16" pos:column="9">r<pos:position pos:line="16" pos:column="10"/></name><operator pos:line="16" pos:column="10">-&gt;<pos:position pos:line="16" pos:column="15"/></operator><name pos:line="16" pos:column="12">connection<pos:position pos:line="16" pos:column="22"/></name><operator pos:line="16" pos:column="22">-&gt;<pos:position pos:line="16" pos:column="27"/></operator><name pos:line="16" pos:column="24">keepalive<pos:position pos:line="16" pos:column="33"/></name></name> <operator pos:line="16" pos:column="34">==<pos:position pos:line="16" pos:column="36"/></operator> <name pos:line="16" pos:column="37">AP_CONN_CLOSE<pos:position pos:line="16" pos:column="50"/></name> <operator pos:line="16" pos:column="51">||<pos:position pos:line="16" pos:column="53"/></operator> 
        <call><name pos:line="17" pos:column="9">ap_get_brigade<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><name><name pos:line="17" pos:column="24">r<pos:position pos:line="17" pos:column="25"/></name><operator pos:line="17" pos:column="25">-&gt;<pos:position pos:line="17" pos:column="30"/></operator><name pos:line="17" pos:column="27">input_filters<pos:position pos:line="17" pos:column="40"/></name></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="42">bb<pos:position pos:line="17" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="46">AP_MODE_EATCRLF<pos:position pos:line="17" pos:column="61"/></name></expr></argument>, 
                       <argument><expr><name pos:line="18" pos:column="24">APR_NONBLOCK_READ<pos:position pos:line="18" pos:column="41"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="18" pos:column="43">0<pos:position pos:line="18" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="18" pos:column="45"/></argument_list></call> <operator pos:line="18" pos:column="46">!=<pos:position pos:line="18" pos:column="48"/></operator> <name pos:line="18" pos:column="49">APR_SUCCESS<pos:position pos:line="18" pos:column="60"/></name></expr>)<pos:position pos:line="18" pos:column="61"/></condition><then pos:line="18" pos:column="61"> <block pos:line="18" pos:column="62">{
        <decl_stmt><decl><type><name pos:line="19" pos:column="9">apr_bucket<pos:position pos:line="19" pos:column="19"/></name> <modifier pos:line="19" pos:column="20">*<pos:position pos:line="19" pos:column="21"/></modifier></type><name pos:line="19" pos:column="21">e<pos:position pos:line="19" pos:column="22"/></name> <init pos:line="19" pos:column="23">= <expr><call><name pos:line="19" pos:column="25">apr_bucket_flush_create<pos:position pos:line="19" pos:column="48"/></name><argument_list pos:line="19" pos:column="48">(<argument><expr><name><name pos:line="19" pos:column="49">c<pos:position pos:line="19" pos:column="50"/></name><operator pos:line="19" pos:column="50">-&gt;<pos:position pos:line="19" pos:column="55"/></operator><name pos:line="19" pos:column="52">bucket_alloc<pos:position pos:line="19" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="66"/></decl_stmt>

        <comment type="block" pos:line="21" pos:column="9">/* We just send directly to the connection based filters.  At
         * this point, we know that we have seen all of the data
         * (request finalization sent an EOS bucket, which empties all
         * of the request filters). We just want to flush the buckets
         * if something hasn't been sent to the network yet.
         */</comment>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">APR_BRIGADE_INSERT_HEAD<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><name pos:line="27" pos:column="33">bb<pos:position pos:line="27" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="37">e<pos:position pos:line="27" pos:column="38"/></name></expr></argument>)<pos:position pos:line="27" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="28" pos:column="9">ap_pass_brigade<pos:position pos:line="28" pos:column="24"/></name><argument_list pos:line="28" pos:column="24">(<argument><expr><name><name pos:line="28" pos:column="25">r<pos:position pos:line="28" pos:column="26"/></name><operator pos:line="28" pos:column="26">-&gt;<pos:position pos:line="28" pos:column="31"/></operator><name pos:line="28" pos:column="28">connection<pos:position pos:line="28" pos:column="38"/></name><operator pos:line="28" pos:column="38">-&gt;<pos:position pos:line="28" pos:column="43"/></operator><name pos:line="28" pos:column="40">output_filters<pos:position pos:line="28" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="56">bb<pos:position pos:line="28" pos:column="58"/></name></expr></argument>)<pos:position pos:line="28" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="29" pos:column="6"/></block></then></if>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
