<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_4035_httpd-2.2.16.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">EXPORT<pos:position pos:line="1" pos:column="7"/></name> <name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type>
<name pos:line="2" pos:column="1">pcre_exec<pos:position pos:line="2" pos:column="10"/></name><parameter_list pos:line="2" pos:column="10">(<parameter><decl><type><specifier pos:line="2" pos:column="11">const<pos:position pos:line="2" pos:column="16"/></specifier> <name pos:line="2" pos:column="17">pcre<pos:position pos:line="2" pos:column="21"/></name> <modifier pos:line="2" pos:column="22">*<pos:position pos:line="2" pos:column="23"/></modifier></type><name pos:line="2" pos:column="23">argument_re<pos:position pos:line="2" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="36">const<pos:position pos:line="2" pos:column="41"/></specifier> <name pos:line="2" pos:column="42">pcre_extra<pos:position pos:line="2" pos:column="52"/></name> <modifier pos:line="2" pos:column="53">*<pos:position pos:line="2" pos:column="54"/></modifier></type><name pos:line="2" pos:column="54">extra_data<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>,
  <parameter><decl><type><specifier pos:line="3" pos:column="3">const<pos:position pos:line="3" pos:column="8"/></specifier> <name pos:line="3" pos:column="9">char<pos:position pos:line="3" pos:column="13"/></name> <modifier pos:line="3" pos:column="14">*<pos:position pos:line="3" pos:column="15"/></modifier></type><name pos:line="3" pos:column="15">subject<pos:position pos:line="3" pos:column="22"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="24">int<pos:position pos:line="3" pos:column="27"/></name></type> <name pos:line="3" pos:column="28">length<pos:position pos:line="3" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="36">int<pos:position pos:line="3" pos:column="39"/></name></type> <name pos:line="3" pos:column="40">start_offset<pos:position pos:line="3" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="54">int<pos:position pos:line="3" pos:column="57"/></name></type> <name pos:line="3" pos:column="58">options<pos:position pos:line="3" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="67">int<pos:position pos:line="3" pos:column="70"/></name> <modifier pos:line="3" pos:column="71">*<pos:position pos:line="3" pos:column="72"/></modifier></type><name pos:line="3" pos:column="72">offsets<pos:position pos:line="3" pos:column="79"/></name></decl></parameter>,
  <parameter><decl><type><name pos:line="4" pos:column="3">int<pos:position pos:line="4" pos:column="6"/></name></type> <name pos:line="4" pos:column="7">offsetcount<pos:position pos:line="4" pos:column="18"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="19"/></parameter_list>
<block pos:line="5" pos:column="1">{
<decl_stmt><decl><type><name pos:line="6" pos:column="1">int<pos:position pos:line="6" pos:column="4"/></name></type> <name pos:line="6" pos:column="5">rc<pos:position pos:line="6" pos:column="7"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="9">resetcount<pos:position pos:line="6" pos:column="19"/></name></decl>, <decl><type ref="prev"/><name pos:line="6" pos:column="21">ocount<pos:position pos:line="6" pos:column="27"/></name></decl>;<pos:position pos:line="6" pos:column="28"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="7" pos:column="1">int<pos:position pos:line="7" pos:column="4"/></name></type> <name pos:line="7" pos:column="5">first_byte<pos:position pos:line="7" pos:column="15"/></name> <init pos:line="7" pos:column="16">= <expr><operator pos:line="7" pos:column="18">-<pos:position pos:line="7" pos:column="19"/></operator><literal type="number" pos:line="7" pos:column="19">1<pos:position pos:line="7" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="7" pos:column="21"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="8" pos:column="1">int<pos:position pos:line="8" pos:column="4"/></name></type> <name pos:line="8" pos:column="5">req_byte<pos:position pos:line="8" pos:column="13"/></name> <init pos:line="8" pos:column="14">= <expr><operator pos:line="8" pos:column="16">-<pos:position pos:line="8" pos:column="17"/></operator><literal type="number" pos:line="8" pos:column="17">1<pos:position pos:line="8" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="19"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="9" pos:column="1">int<pos:position pos:line="9" pos:column="4"/></name></type> <name pos:line="9" pos:column="5">req_byte2<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><operator pos:line="9" pos:column="17">-<pos:position pos:line="9" pos:column="18"/></operator><literal type="number" pos:line="9" pos:column="18">1<pos:position pos:line="9" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="20"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="10" pos:column="1">unsigned<pos:position pos:line="10" pos:column="9"/></name> <name pos:line="10" pos:column="10">long<pos:position pos:line="10" pos:column="14"/></name> <name pos:line="10" pos:column="15">int<pos:position pos:line="10" pos:column="18"/></name></type> <name pos:line="10" pos:column="19">ims<pos:position pos:line="10" pos:column="22"/></name> <init pos:line="10" pos:column="23">= <expr><literal type="number" pos:line="10" pos:column="25">0<pos:position pos:line="10" pos:column="26"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="27"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="11" pos:column="1">BOOL<pos:position pos:line="11" pos:column="5"/></name></type> <name pos:line="11" pos:column="6">using_temporary_offsets<pos:position pos:line="11" pos:column="29"/></name> <init pos:line="11" pos:column="30">= <expr><name pos:line="11" pos:column="32">FALSE<pos:position pos:line="11" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="11" pos:column="38"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="12" pos:column="1">BOOL<pos:position pos:line="12" pos:column="5"/></name></type> <name pos:line="12" pos:column="6">anchored<pos:position pos:line="12" pos:column="14"/></name></decl>;<pos:position pos:line="12" pos:column="15"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="13" pos:column="1">BOOL<pos:position pos:line="13" pos:column="5"/></name></type> <name pos:line="13" pos:column="6">startline<pos:position pos:line="13" pos:column="15"/></name></decl>;<pos:position pos:line="13" pos:column="16"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="14" pos:column="1">BOOL<pos:position pos:line="14" pos:column="5"/></name></type> <name pos:line="14" pos:column="6">first_byte_caseless<pos:position pos:line="14" pos:column="25"/></name> <init pos:line="14" pos:column="26">= <expr><name pos:line="14" pos:column="28">FALSE<pos:position pos:line="14" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="34"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="15" pos:column="1">BOOL<pos:position pos:line="15" pos:column="5"/></name></type> <name pos:line="15" pos:column="6">req_byte_caseless<pos:position pos:line="15" pos:column="23"/></name> <init pos:line="15" pos:column="24">= <expr><name pos:line="15" pos:column="26">FALSE<pos:position pos:line="15" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="32"/></decl_stmt>
<decl_stmt><decl><type><name pos:line="16" pos:column="1">match_data<pos:position pos:line="16" pos:column="11"/></name></type> <name pos:line="16" pos:column="12">match_block<pos:position pos:line="16" pos:column="23"/></name></decl>;<pos:position pos:line="16" pos:column="24"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="17" pos:column="1">const<pos:position pos:line="17" pos:column="6"/></specifier> <name pos:line="17" pos:column="7">uschar<pos:position pos:line="17" pos:column="13"/></name> <modifier pos:line="17" pos:column="14">*<pos:position pos:line="17" pos:column="15"/></modifier></type><name pos:line="17" pos:column="15">tables<pos:position pos:line="17" pos:column="21"/></name></decl>;<pos:position pos:line="17" pos:column="22"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="18" pos:column="1">const<pos:position pos:line="18" pos:column="6"/></specifier> <name pos:line="18" pos:column="7">uschar<pos:position pos:line="18" pos:column="13"/></name> <modifier pos:line="18" pos:column="14">*<pos:position pos:line="18" pos:column="15"/></modifier></type><name pos:line="18" pos:column="15">start_bits<pos:position pos:line="18" pos:column="25"/></name> <init pos:line="18" pos:column="26">= <expr><name pos:line="18" pos:column="28">NULL<pos:position pos:line="18" pos:column="32"/></name></expr></init></decl>;<pos:position pos:line="18" pos:column="33"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="19" pos:column="1">const<pos:position pos:line="19" pos:column="6"/></specifier> <name pos:line="19" pos:column="7">uschar<pos:position pos:line="19" pos:column="13"/></name> <modifier pos:line="19" pos:column="14">*<pos:position pos:line="19" pos:column="15"/></modifier></type><name pos:line="19" pos:column="15">start_match<pos:position pos:line="19" pos:column="26"/></name> <init pos:line="19" pos:column="27">= <expr><operator pos:line="19" pos:column="29">(<pos:position pos:line="19" pos:column="30"/></operator><specifier pos:line="19" pos:column="30">const<pos:position pos:line="19" pos:column="35"/></specifier> <name pos:line="19" pos:column="36">uschar<pos:position pos:line="19" pos:column="42"/></name> <operator pos:line="19" pos:column="43">*<pos:position pos:line="19" pos:column="44"/></operator><operator pos:line="19" pos:column="44">)<pos:position pos:line="19" pos:column="45"/></operator><name pos:line="19" pos:column="45">subject<pos:position pos:line="19" pos:column="52"/></name> <operator pos:line="19" pos:column="53">+<pos:position pos:line="19" pos:column="54"/></operator> <name pos:line="19" pos:column="55">start_offset<pos:position pos:line="19" pos:column="67"/></name></expr></init></decl>;<pos:position pos:line="19" pos:column="68"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="20" pos:column="1">const<pos:position pos:line="20" pos:column="6"/></specifier> <name pos:line="20" pos:column="7">uschar<pos:position pos:line="20" pos:column="13"/></name> <modifier pos:line="20" pos:column="14">*<pos:position pos:line="20" pos:column="15"/></modifier></type><name pos:line="20" pos:column="15">end_subject<pos:position pos:line="20" pos:column="26"/></name></decl>;<pos:position pos:line="20" pos:column="27"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="21" pos:column="1">const<pos:position pos:line="21" pos:column="6"/></specifier> <name pos:line="21" pos:column="7">uschar<pos:position pos:line="21" pos:column="13"/></name> <modifier pos:line="21" pos:column="14">*<pos:position pos:line="21" pos:column="15"/></modifier></type><name pos:line="21" pos:column="15">req_byte_ptr<pos:position pos:line="21" pos:column="27"/></name> <init pos:line="21" pos:column="28">= <expr><name pos:line="21" pos:column="30">start_match<pos:position pos:line="21" pos:column="41"/></name> <operator pos:line="21" pos:column="42">-<pos:position pos:line="21" pos:column="43"/></operator> <literal type="number" pos:line="21" pos:column="44">1<pos:position pos:line="21" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="21" pos:column="46"/></decl_stmt>

<decl_stmt><decl><type><name pos:line="23" pos:column="1">pcre_study_data<pos:position pos:line="23" pos:column="16"/></name></type> <name pos:line="23" pos:column="17">internal_study<pos:position pos:line="23" pos:column="31"/></name></decl>;<pos:position pos:line="23" pos:column="32"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="24" pos:column="1">const<pos:position pos:line="24" pos:column="6"/></specifier> <name pos:line="24" pos:column="7">pcre_study_data<pos:position pos:line="24" pos:column="22"/></name> <modifier pos:line="24" pos:column="23">*<pos:position pos:line="24" pos:column="24"/></modifier></type><name pos:line="24" pos:column="24">study<pos:position pos:line="24" pos:column="29"/></name></decl>;<pos:position pos:line="24" pos:column="30"/></decl_stmt>

<decl_stmt><decl><type><name pos:line="26" pos:column="1">real_pcre<pos:position pos:line="26" pos:column="10"/></name></type> <name pos:line="26" pos:column="11">internal_re<pos:position pos:line="26" pos:column="22"/></name></decl>;<pos:position pos:line="26" pos:column="23"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="27" pos:column="1">const<pos:position pos:line="27" pos:column="6"/></specifier> <name pos:line="27" pos:column="7">real_pcre<pos:position pos:line="27" pos:column="16"/></name> <modifier pos:line="27" pos:column="17">*<pos:position pos:line="27" pos:column="18"/></modifier></type><name pos:line="27" pos:column="18">external_re<pos:position pos:line="27" pos:column="29"/></name> <init pos:line="27" pos:column="30">= <expr><operator pos:line="27" pos:column="32">(<pos:position pos:line="27" pos:column="33"/></operator><specifier pos:line="27" pos:column="33">const<pos:position pos:line="27" pos:column="38"/></specifier> <name pos:line="27" pos:column="39">real_pcre<pos:position pos:line="27" pos:column="48"/></name> <operator pos:line="27" pos:column="49">*<pos:position pos:line="27" pos:column="50"/></operator><operator pos:line="27" pos:column="50">)<pos:position pos:line="27" pos:column="51"/></operator><name pos:line="27" pos:column="51">argument_re<pos:position pos:line="27" pos:column="62"/></name></expr></init></decl>;<pos:position pos:line="27" pos:column="63"/></decl_stmt>
<decl_stmt><decl><type><specifier pos:line="28" pos:column="1">const<pos:position pos:line="28" pos:column="6"/></specifier> <name pos:line="28" pos:column="7">real_pcre<pos:position pos:line="28" pos:column="16"/></name> <modifier pos:line="28" pos:column="17">*<pos:position pos:line="28" pos:column="18"/></modifier></type><name pos:line="28" pos:column="18">re<pos:position pos:line="28" pos:column="20"/></name> <init pos:line="28" pos:column="21">= <expr><name pos:line="28" pos:column="23">external_re<pos:position pos:line="28" pos:column="34"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="35"/></decl_stmt>

<comment type="block" pos:line="30" pos:column="1">/* Plausibility checks */</comment>

<if pos:line="32" pos:column="1">if <condition pos:line="32" pos:column="4">(<expr><operator pos:line="32" pos:column="5">(<pos:position pos:line="32" pos:column="6"/></operator><name pos:line="32" pos:column="6">options<pos:position pos:line="32" pos:column="13"/></name> <operator pos:line="32" pos:column="14">&amp;<pos:position pos:line="32" pos:column="19"/></operator> <operator pos:line="32" pos:column="16">~<pos:position pos:line="32" pos:column="17"/></operator><name pos:line="32" pos:column="17">PUBLIC_EXEC_OPTIONS<pos:position pos:line="32" pos:column="36"/></name><operator pos:line="32" pos:column="36">)<pos:position pos:line="32" pos:column="37"/></operator> <operator pos:line="32" pos:column="38">!=<pos:position pos:line="32" pos:column="40"/></operator> <literal type="number" pos:line="32" pos:column="41">0<pos:position pos:line="32" pos:column="42"/></literal></expr>)<pos:position pos:line="32" pos:column="43"/></condition><then pos:line="32" pos:column="43"> <block type="pseudo"><return pos:line="32" pos:column="44">return <expr><name pos:line="32" pos:column="51">PCRE_ERROR_BADOPTION<pos:position pos:line="32" pos:column="71"/></name></expr>;<pos:position pos:line="32" pos:column="72"/></return></block></then></if>
<if pos:line="33" pos:column="1">if <condition pos:line="33" pos:column="4">(<expr><name pos:line="33" pos:column="5">re<pos:position pos:line="33" pos:column="7"/></name> <operator pos:line="33" pos:column="8">==<pos:position pos:line="33" pos:column="10"/></operator> <name pos:line="33" pos:column="11">NULL<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">||<pos:position pos:line="33" pos:column="18"/></operator> <name pos:line="33" pos:column="19">subject<pos:position pos:line="33" pos:column="26"/></name> <operator pos:line="33" pos:column="27">==<pos:position pos:line="33" pos:column="29"/></operator> <name pos:line="33" pos:column="30">NULL<pos:position pos:line="33" pos:column="34"/></name> <operator pos:line="33" pos:column="35">||<pos:position pos:line="33" pos:column="37"/></operator>
   <operator pos:line="34" pos:column="4">(<pos:position pos:line="34" pos:column="5"/></operator><name pos:line="34" pos:column="5">offsets<pos:position pos:line="34" pos:column="12"/></name> <operator pos:line="34" pos:column="13">==<pos:position pos:line="34" pos:column="15"/></operator> <name pos:line="34" pos:column="16">NULL<pos:position pos:line="34" pos:column="20"/></name> <operator pos:line="34" pos:column="21">&amp;&amp;<pos:position pos:line="34" pos:column="31"/></operator> <name pos:line="34" pos:column="24">offsetcount<pos:position pos:line="34" pos:column="35"/></name> <operator pos:line="34" pos:column="36">&gt;<pos:position pos:line="34" pos:column="40"/></operator> <literal type="number" pos:line="34" pos:column="38">0<pos:position pos:line="34" pos:column="39"/></literal><operator pos:line="34" pos:column="39">)<pos:position pos:line="34" pos:column="40"/></operator></expr>)<pos:position pos:line="34" pos:column="41"/></condition><then pos:line="34" pos:column="41"> <block type="pseudo"><return pos:line="34" pos:column="42">return <expr><name pos:line="34" pos:column="49">PCRE_ERROR_NULL<pos:position pos:line="34" pos:column="64"/></name></expr>;<pos:position pos:line="34" pos:column="65"/></return></block></then></if>
<if pos:line="35" pos:column="1">if <condition pos:line="35" pos:column="4">(<expr><name pos:line="35" pos:column="5">offsetcount<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">&lt;<pos:position pos:line="35" pos:column="21"/></operator> <literal type="number" pos:line="35" pos:column="19">0<pos:position pos:line="35" pos:column="20"/></literal></expr>)<pos:position pos:line="35" pos:column="21"/></condition><then pos:line="35" pos:column="21"> <block type="pseudo"><return pos:line="35" pos:column="22">return <expr><name pos:line="35" pos:column="29">PCRE_ERROR_BADCOUNT<pos:position pos:line="35" pos:column="48"/></name></expr>;<pos:position pos:line="35" pos:column="49"/></return></block></then></if>

<comment type="block" pos:line="37" pos:column="1">/* Fish out the optional data from the extra_data structure, first setting
the default values. */</comment>

<expr_stmt><expr><name pos:line="40" pos:column="1">study<pos:position pos:line="40" pos:column="6"/></name> <operator pos:line="40" pos:column="7">=<pos:position pos:line="40" pos:column="8"/></operator> <name pos:line="40" pos:column="9">NULL<pos:position pos:line="40" pos:column="13"/></name></expr>;<pos:position pos:line="40" pos:column="14"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="41" pos:column="1">match_block<pos:position pos:line="41" pos:column="12"/></name><operator pos:line="41" pos:column="12">.<pos:position pos:line="41" pos:column="13"/></operator><name pos:line="41" pos:column="13">match_limit<pos:position pos:line="41" pos:column="24"/></name></name> <operator pos:line="41" pos:column="25">=<pos:position pos:line="41" pos:column="26"/></operator> <name pos:line="41" pos:column="27">MATCH_LIMIT<pos:position pos:line="41" pos:column="38"/></name></expr>;<pos:position pos:line="41" pos:column="39"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="42" pos:column="1">match_block<pos:position pos:line="42" pos:column="12"/></name><operator pos:line="42" pos:column="12">.<pos:position pos:line="42" pos:column="13"/></operator><name pos:line="42" pos:column="13">callout_data<pos:position pos:line="42" pos:column="25"/></name></name> <operator pos:line="42" pos:column="26">=<pos:position pos:line="42" pos:column="27"/></operator> <name pos:line="42" pos:column="28">NULL<pos:position pos:line="42" pos:column="32"/></name></expr>;<pos:position pos:line="42" pos:column="33"/></expr_stmt>

<comment type="block" pos:line="44" pos:column="1">/* The table pointer is always in native byte order. */</comment>

<expr_stmt><expr><name pos:line="46" pos:column="1">tables<pos:position pos:line="46" pos:column="7"/></name> <operator pos:line="46" pos:column="8">=<pos:position pos:line="46" pos:column="9"/></operator> <name><name pos:line="46" pos:column="10">external_re<pos:position pos:line="46" pos:column="21"/></name><operator pos:line="46" pos:column="21">-&gt;<pos:position pos:line="46" pos:column="26"/></operator><name pos:line="46" pos:column="23">tables<pos:position pos:line="46" pos:column="29"/></name></name></expr>;<pos:position pos:line="46" pos:column="30"/></expr_stmt>

<if pos:line="48" pos:column="1">if <condition pos:line="48" pos:column="4">(<expr><name pos:line="48" pos:column="5">extra_data<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">!=<pos:position pos:line="48" pos:column="18"/></operator> <name pos:line="48" pos:column="19">NULL<pos:position pos:line="48" pos:column="23"/></name></expr>)<pos:position pos:line="48" pos:column="24"/></condition><then pos:line="48" pos:column="24">
  <block pos:line="49" pos:column="3">{
  <decl_stmt><decl><type><specifier pos:line="50" pos:column="3">register<pos:position pos:line="50" pos:column="11"/></specifier> <name pos:line="50" pos:column="12">unsigned<pos:position pos:line="50" pos:column="20"/></name> <name pos:line="50" pos:column="21">int<pos:position pos:line="50" pos:column="24"/></name></type> <name pos:line="50" pos:column="25">flags<pos:position pos:line="50" pos:column="30"/></name> <init pos:line="50" pos:column="31">= <expr><name><name pos:line="50" pos:column="33">extra_data<pos:position pos:line="50" pos:column="43"/></name><operator pos:line="50" pos:column="43">-&gt;<pos:position pos:line="50" pos:column="48"/></operator><name pos:line="50" pos:column="45">flags<pos:position pos:line="50" pos:column="50"/></name></name></expr></init></decl>;<pos:position pos:line="50" pos:column="51"/></decl_stmt>
  <if pos:line="51" pos:column="3">if <condition pos:line="51" pos:column="6">(<expr><operator pos:line="51" pos:column="7">(<pos:position pos:line="51" pos:column="8"/></operator><name pos:line="51" pos:column="8">flags<pos:position pos:line="51" pos:column="13"/></name> <operator pos:line="51" pos:column="14">&amp;<pos:position pos:line="51" pos:column="19"/></operator> <name pos:line="51" pos:column="16">PCRE_EXTRA_STUDY_DATA<pos:position pos:line="51" pos:column="37"/></name><operator pos:line="51" pos:column="37">)<pos:position pos:line="51" pos:column="38"/></operator> <operator pos:line="51" pos:column="39">!=<pos:position pos:line="51" pos:column="41"/></operator> <literal type="number" pos:line="51" pos:column="42">0<pos:position pos:line="51" pos:column="43"/></literal></expr>)<pos:position pos:line="51" pos:column="44"/></condition><then pos:line="51" pos:column="44">
    <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="5">study<pos:position pos:line="52" pos:column="10"/></name> <operator pos:line="52" pos:column="11">=<pos:position pos:line="52" pos:column="12"/></operator> <operator pos:line="52" pos:column="13">(<pos:position pos:line="52" pos:column="14"/></operator><specifier pos:line="52" pos:column="14">const<pos:position pos:line="52" pos:column="19"/></specifier> <name pos:line="52" pos:column="20">pcre_study_data<pos:position pos:line="52" pos:column="35"/></name> <operator pos:line="52" pos:column="36">*<pos:position pos:line="52" pos:column="37"/></operator><operator pos:line="52" pos:column="37">)<pos:position pos:line="52" pos:column="38"/></operator><name><name pos:line="52" pos:column="38">extra_data<pos:position pos:line="52" pos:column="48"/></name><operator pos:line="52" pos:column="48">-&gt;<pos:position pos:line="52" pos:column="53"/></operator><name pos:line="52" pos:column="50">study_data<pos:position pos:line="52" pos:column="60"/></name></name></expr>;<pos:position pos:line="52" pos:column="61"/></expr_stmt></block></then></if>
  <if pos:line="53" pos:column="3">if <condition pos:line="53" pos:column="6">(<expr><operator pos:line="53" pos:column="7">(<pos:position pos:line="53" pos:column="8"/></operator><name pos:line="53" pos:column="8">flags<pos:position pos:line="53" pos:column="13"/></name> <operator pos:line="53" pos:column="14">&amp;<pos:position pos:line="53" pos:column="19"/></operator> <name pos:line="53" pos:column="16">PCRE_EXTRA_MATCH_LIMIT<pos:position pos:line="53" pos:column="38"/></name><operator pos:line="53" pos:column="38">)<pos:position pos:line="53" pos:column="39"/></operator> <operator pos:line="53" pos:column="40">!=<pos:position pos:line="53" pos:column="42"/></operator> <literal type="number" pos:line="53" pos:column="43">0<pos:position pos:line="53" pos:column="44"/></literal></expr>)<pos:position pos:line="53" pos:column="45"/></condition><then pos:line="53" pos:column="45">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="54" pos:column="5">match_block<pos:position pos:line="54" pos:column="16"/></name><operator pos:line="54" pos:column="16">.<pos:position pos:line="54" pos:column="17"/></operator><name pos:line="54" pos:column="17">match_limit<pos:position pos:line="54" pos:column="28"/></name></name> <operator pos:line="54" pos:column="29">=<pos:position pos:line="54" pos:column="30"/></operator> <name><name pos:line="54" pos:column="31">extra_data<pos:position pos:line="54" pos:column="41"/></name><operator pos:line="54" pos:column="41">-&gt;<pos:position pos:line="54" pos:column="46"/></operator><name pos:line="54" pos:column="43">match_limit<pos:position pos:line="54" pos:column="54"/></name></name></expr>;<pos:position pos:line="54" pos:column="55"/></expr_stmt></block></then></if>
  <if pos:line="55" pos:column="3">if <condition pos:line="55" pos:column="6">(<expr><operator pos:line="55" pos:column="7">(<pos:position pos:line="55" pos:column="8"/></operator><name pos:line="55" pos:column="8">flags<pos:position pos:line="55" pos:column="13"/></name> <operator pos:line="55" pos:column="14">&amp;<pos:position pos:line="55" pos:column="19"/></operator> <name pos:line="55" pos:column="16">PCRE_EXTRA_CALLOUT_DATA<pos:position pos:line="55" pos:column="39"/></name><operator pos:line="55" pos:column="39">)<pos:position pos:line="55" pos:column="40"/></operator> <operator pos:line="55" pos:column="41">!=<pos:position pos:line="55" pos:column="43"/></operator> <literal type="number" pos:line="55" pos:column="44">0<pos:position pos:line="55" pos:column="45"/></literal></expr>)<pos:position pos:line="55" pos:column="46"/></condition><then pos:line="55" pos:column="46">
    <block type="pseudo"><expr_stmt><expr><name><name pos:line="56" pos:column="5">match_block<pos:position pos:line="56" pos:column="16"/></name><operator pos:line="56" pos:column="16">.<pos:position pos:line="56" pos:column="17"/></operator><name pos:line="56" pos:column="17">callout_data<pos:position pos:line="56" pos:column="29"/></name></name> <operator pos:line="56" pos:column="30">=<pos:position pos:line="56" pos:column="31"/></operator> <name><name pos:line="56" pos:column="32">extra_data<pos:position pos:line="56" pos:column="42"/></name><operator pos:line="56" pos:column="42">-&gt;<pos:position pos:line="56" pos:column="47"/></operator><name pos:line="56" pos:column="44">callout_data<pos:position pos:line="56" pos:column="56"/></name></name></expr>;<pos:position pos:line="56" pos:column="57"/></expr_stmt></block></then></if>
  <if pos:line="57" pos:column="3">if <condition pos:line="57" pos:column="6">(<expr><operator pos:line="57" pos:column="7">(<pos:position pos:line="57" pos:column="8"/></operator><name pos:line="57" pos:column="8">flags<pos:position pos:line="57" pos:column="13"/></name> <operator pos:line="57" pos:column="14">&amp;<pos:position pos:line="57" pos:column="19"/></operator> <name pos:line="57" pos:column="16">PCRE_EXTRA_TABLES<pos:position pos:line="57" pos:column="33"/></name><operator pos:line="57" pos:column="33">)<pos:position pos:line="57" pos:column="34"/></operator> <operator pos:line="57" pos:column="35">!=<pos:position pos:line="57" pos:column="37"/></operator> <literal type="number" pos:line="57" pos:column="38">0<pos:position pos:line="57" pos:column="39"/></literal></expr>)<pos:position pos:line="57" pos:column="40"/></condition><then pos:line="57" pos:column="40"> <block type="pseudo"><expr_stmt><expr><name pos:line="57" pos:column="41">tables<pos:position pos:line="57" pos:column="47"/></name> <operator pos:line="57" pos:column="48">=<pos:position pos:line="57" pos:column="49"/></operator> <name><name pos:line="57" pos:column="50">extra_data<pos:position pos:line="57" pos:column="60"/></name><operator pos:line="57" pos:column="60">-&gt;<pos:position pos:line="57" pos:column="65"/></operator><name pos:line="57" pos:column="62">tables<pos:position pos:line="57" pos:column="68"/></name></name></expr>;<pos:position pos:line="57" pos:column="69"/></expr_stmt></block></then></if>
  }<pos:position pos:line="58" pos:column="4"/></block></then></if>

<comment type="block" pos:line="60" pos:column="1">/* If the exec call supplied NULL for tables, use the inbuilt ones. This
is a feature that makes it possible to save compiled regex and re-use them
in other programs later. */</comment>

<if pos:line="64" pos:column="1">if <condition pos:line="64" pos:column="4">(<expr><name pos:line="64" pos:column="5">tables<pos:position pos:line="64" pos:column="11"/></name> <operator pos:line="64" pos:column="12">==<pos:position pos:line="64" pos:column="14"/></operator> <name pos:line="64" pos:column="15">NULL<pos:position pos:line="64" pos:column="19"/></name></expr>)<pos:position pos:line="64" pos:column="20"/></condition><then pos:line="64" pos:column="20"> <block type="pseudo"><expr_stmt><expr><name pos:line="64" pos:column="21">tables<pos:position pos:line="64" pos:column="27"/></name> <operator pos:line="64" pos:column="28">=<pos:position pos:line="64" pos:column="29"/></operator> <name pos:line="64" pos:column="30">pcre_default_tables<pos:position pos:line="64" pos:column="49"/></name></expr>;<pos:position pos:line="64" pos:column="50"/></expr_stmt></block></then></if>

<comment type="block" pos:line="66" pos:column="1">/* Check that the first field in the block is the magic number. If it is not,
test for a regex that was compiled on a host of opposite endianness. If this is
the case, flipped values are put in internal_re and internal_study if there was
study data too. */</comment>

<if pos:line="71" pos:column="1">if <condition pos:line="71" pos:column="4">(<expr><name><name pos:line="71" pos:column="5">re<pos:position pos:line="71" pos:column="7"/></name><operator pos:line="71" pos:column="7">-&gt;<pos:position pos:line="71" pos:column="12"/></operator><name pos:line="71" pos:column="9">magic_number<pos:position pos:line="71" pos:column="21"/></name></name> <operator pos:line="71" pos:column="22">!=<pos:position pos:line="71" pos:column="24"/></operator> <name pos:line="71" pos:column="25">MAGIC_NUMBER<pos:position pos:line="71" pos:column="37"/></name></expr>)<pos:position pos:line="71" pos:column="38"/></condition><then pos:line="71" pos:column="38">
  <block pos:line="72" pos:column="3">{
  <expr_stmt><expr><name pos:line="73" pos:column="3">re<pos:position pos:line="73" pos:column="5"/></name> <operator pos:line="73" pos:column="6">=<pos:position pos:line="73" pos:column="7"/></operator> <call><name pos:line="73" pos:column="8">try_flipped<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><name pos:line="73" pos:column="20">re<pos:position pos:line="73" pos:column="22"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="24">&amp;<pos:position pos:line="73" pos:column="29"/></operator><name pos:line="73" pos:column="25">internal_re<pos:position pos:line="73" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="73" pos:column="38">study<pos:position pos:line="73" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="73" pos:column="45">&amp;<pos:position pos:line="73" pos:column="50"/></operator><name pos:line="73" pos:column="46">internal_study<pos:position pos:line="73" pos:column="60"/></name></expr></argument>)<pos:position pos:line="73" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="62"/></expr_stmt>
  <if pos:line="74" pos:column="3">if <condition pos:line="74" pos:column="6">(<expr><name pos:line="74" pos:column="7">re<pos:position pos:line="74" pos:column="9"/></name> <operator pos:line="74" pos:column="10">==<pos:position pos:line="74" pos:column="12"/></operator> <name pos:line="74" pos:column="13">NULL<pos:position pos:line="74" pos:column="17"/></name></expr>)<pos:position pos:line="74" pos:column="18"/></condition><then pos:line="74" pos:column="18"> <block type="pseudo"><return pos:line="74" pos:column="19">return <expr><name pos:line="74" pos:column="26">PCRE_ERROR_BADMAGIC<pos:position pos:line="74" pos:column="45"/></name></expr>;<pos:position pos:line="74" pos:column="46"/></return></block></then></if>
  <if pos:line="75" pos:column="3">if <condition pos:line="75" pos:column="6">(<expr><name pos:line="75" pos:column="7">study<pos:position pos:line="75" pos:column="12"/></name> <operator pos:line="75" pos:column="13">!=<pos:position pos:line="75" pos:column="15"/></operator> <name pos:line="75" pos:column="16">NULL<pos:position pos:line="75" pos:column="20"/></name></expr>)<pos:position pos:line="75" pos:column="21"/></condition><then pos:line="75" pos:column="21"> <block type="pseudo"><expr_stmt><expr><name pos:line="75" pos:column="22">study<pos:position pos:line="75" pos:column="27"/></name> <operator pos:line="75" pos:column="28">=<pos:position pos:line="75" pos:column="29"/></operator> <operator pos:line="75" pos:column="30">&amp;<pos:position pos:line="75" pos:column="35"/></operator><name pos:line="75" pos:column="31">internal_study<pos:position pos:line="75" pos:column="45"/></name></expr>;<pos:position pos:line="75" pos:column="46"/></expr_stmt></block></then></if>
  }<pos:position pos:line="76" pos:column="4"/></block></then></if>

<comment type="block" pos:line="78" pos:column="1">/* Set up other data */</comment>

<expr_stmt><expr><name pos:line="80" pos:column="1">anchored<pos:position pos:line="80" pos:column="9"/></name> <operator pos:line="80" pos:column="10">=<pos:position pos:line="80" pos:column="11"/></operator> <operator pos:line="80" pos:column="12">(<pos:position pos:line="80" pos:column="13"/></operator><operator pos:line="80" pos:column="13">(<pos:position pos:line="80" pos:column="14"/></operator><name><name pos:line="80" pos:column="14">re<pos:position pos:line="80" pos:column="16"/></name><operator pos:line="80" pos:column="16">-&gt;<pos:position pos:line="80" pos:column="21"/></operator><name pos:line="80" pos:column="18">options<pos:position pos:line="80" pos:column="25"/></name></name> <operator pos:line="80" pos:column="26">|<pos:position pos:line="80" pos:column="27"/></operator> <name pos:line="80" pos:column="28">options<pos:position pos:line="80" pos:column="35"/></name><operator pos:line="80" pos:column="35">)<pos:position pos:line="80" pos:column="36"/></operator> <operator pos:line="80" pos:column="37">&amp;<pos:position pos:line="80" pos:column="42"/></operator> <name pos:line="80" pos:column="39">PCRE_ANCHORED<pos:position pos:line="80" pos:column="52"/></name><operator pos:line="80" pos:column="52">)<pos:position pos:line="80" pos:column="53"/></operator> <operator pos:line="80" pos:column="54">!=<pos:position pos:line="80" pos:column="56"/></operator> <literal type="number" pos:line="80" pos:column="57">0<pos:position pos:line="80" pos:column="58"/></literal></expr>;<pos:position pos:line="80" pos:column="59"/></expr_stmt>
<expr_stmt><expr><name pos:line="81" pos:column="1">startline<pos:position pos:line="81" pos:column="10"/></name> <operator pos:line="81" pos:column="11">=<pos:position pos:line="81" pos:column="12"/></operator> <operator pos:line="81" pos:column="13">(<pos:position pos:line="81" pos:column="14"/></operator><name><name pos:line="81" pos:column="14">re<pos:position pos:line="81" pos:column="16"/></name><operator pos:line="81" pos:column="16">-&gt;<pos:position pos:line="81" pos:column="21"/></operator><name pos:line="81" pos:column="18">options<pos:position pos:line="81" pos:column="25"/></name></name> <operator pos:line="81" pos:column="26">&amp;<pos:position pos:line="81" pos:column="31"/></operator> <name pos:line="81" pos:column="28">PCRE_STARTLINE<pos:position pos:line="81" pos:column="42"/></name><operator pos:line="81" pos:column="42">)<pos:position pos:line="81" pos:column="43"/></operator> <operator pos:line="81" pos:column="44">!=<pos:position pos:line="81" pos:column="46"/></operator> <literal type="number" pos:line="81" pos:column="47">0<pos:position pos:line="81" pos:column="48"/></literal></expr>;<pos:position pos:line="81" pos:column="49"/></expr_stmt>

<comment type="block" pos:line="83" pos:column="1">/* The code starts after the real_pcre block and the capture name table. */</comment>

<expr_stmt><expr><name><name pos:line="85" pos:column="1">match_block<pos:position pos:line="85" pos:column="12"/></name><operator pos:line="85" pos:column="12">.<pos:position pos:line="85" pos:column="13"/></operator><name pos:line="85" pos:column="13">start_code<pos:position pos:line="85" pos:column="23"/></name></name> <operator pos:line="85" pos:column="24">=<pos:position pos:line="85" pos:column="25"/></operator> <operator pos:line="85" pos:column="26">(<pos:position pos:line="85" pos:column="27"/></operator><specifier pos:line="85" pos:column="27">const<pos:position pos:line="85" pos:column="32"/></specifier> <name pos:line="85" pos:column="33">uschar<pos:position pos:line="85" pos:column="39"/></name> <operator pos:line="85" pos:column="40">*<pos:position pos:line="85" pos:column="41"/></operator><operator pos:line="85" pos:column="41">)<pos:position pos:line="85" pos:column="42"/></operator><name pos:line="85" pos:column="42">external_re<pos:position pos:line="85" pos:column="53"/></name> <operator pos:line="85" pos:column="54">+<pos:position pos:line="85" pos:column="55"/></operator> <name><name pos:line="85" pos:column="56">re<pos:position pos:line="85" pos:column="58"/></name><operator pos:line="85" pos:column="58">-&gt;<pos:position pos:line="85" pos:column="63"/></operator><name pos:line="85" pos:column="60">name_table_offset<pos:position pos:line="85" pos:column="77"/></name></name> <operator pos:line="85" pos:column="78">+<pos:position pos:line="85" pos:column="79"/></operator>
  <name><name pos:line="86" pos:column="3">re<pos:position pos:line="86" pos:column="5"/></name><operator pos:line="86" pos:column="5">-&gt;<pos:position pos:line="86" pos:column="10"/></operator><name pos:line="86" pos:column="7">name_count<pos:position pos:line="86" pos:column="17"/></name></name> <operator pos:line="86" pos:column="18">*<pos:position pos:line="86" pos:column="19"/></operator> <name><name pos:line="86" pos:column="20">re<pos:position pos:line="86" pos:column="22"/></name><operator pos:line="86" pos:column="22">-&gt;<pos:position pos:line="86" pos:column="27"/></operator><name pos:line="86" pos:column="24">name_entry_size<pos:position pos:line="86" pos:column="39"/></name></name></expr>;<pos:position pos:line="86" pos:column="40"/></expr_stmt>

<expr_stmt><expr><name><name pos:line="88" pos:column="1">match_block<pos:position pos:line="88" pos:column="12"/></name><operator pos:line="88" pos:column="12">.<pos:position pos:line="88" pos:column="13"/></operator><name pos:line="88" pos:column="13">start_subject<pos:position pos:line="88" pos:column="26"/></name></name> <operator pos:line="88" pos:column="27">=<pos:position pos:line="88" pos:column="28"/></operator> <operator pos:line="88" pos:column="29">(<pos:position pos:line="88" pos:column="30"/></operator><specifier pos:line="88" pos:column="30">const<pos:position pos:line="88" pos:column="35"/></specifier> <name pos:line="88" pos:column="36">uschar<pos:position pos:line="88" pos:column="42"/></name> <operator pos:line="88" pos:column="43">*<pos:position pos:line="88" pos:column="44"/></operator><operator pos:line="88" pos:column="44">)<pos:position pos:line="88" pos:column="45"/></operator><name pos:line="88" pos:column="45">subject<pos:position pos:line="88" pos:column="52"/></name></expr>;<pos:position pos:line="88" pos:column="53"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="89" pos:column="1">match_block<pos:position pos:line="89" pos:column="12"/></name><operator pos:line="89" pos:column="12">.<pos:position pos:line="89" pos:column="13"/></operator><name pos:line="89" pos:column="13">start_offset<pos:position pos:line="89" pos:column="25"/></name></name> <operator pos:line="89" pos:column="26">=<pos:position pos:line="89" pos:column="27"/></operator> <name pos:line="89" pos:column="28">start_offset<pos:position pos:line="89" pos:column="40"/></name></expr>;<pos:position pos:line="89" pos:column="41"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="90" pos:column="1">match_block<pos:position pos:line="90" pos:column="12"/></name><operator pos:line="90" pos:column="12">.<pos:position pos:line="90" pos:column="13"/></operator><name pos:line="90" pos:column="13">end_subject<pos:position pos:line="90" pos:column="24"/></name></name> <operator pos:line="90" pos:column="25">=<pos:position pos:line="90" pos:column="26"/></operator> <name><name pos:line="90" pos:column="27">match_block<pos:position pos:line="90" pos:column="38"/></name><operator pos:line="90" pos:column="38">.<pos:position pos:line="90" pos:column="39"/></operator><name pos:line="90" pos:column="39">start_subject<pos:position pos:line="90" pos:column="52"/></name></name> <operator pos:line="90" pos:column="53">+<pos:position pos:line="90" pos:column="54"/></operator> <name pos:line="90" pos:column="55">length<pos:position pos:line="90" pos:column="61"/></name></expr>;<pos:position pos:line="90" pos:column="62"/></expr_stmt>
<expr_stmt><expr><name pos:line="91" pos:column="1">end_subject<pos:position pos:line="91" pos:column="12"/></name> <operator pos:line="91" pos:column="13">=<pos:position pos:line="91" pos:column="14"/></operator> <name><name pos:line="91" pos:column="15">match_block<pos:position pos:line="91" pos:column="26"/></name><operator pos:line="91" pos:column="26">.<pos:position pos:line="91" pos:column="27"/></operator><name pos:line="91" pos:column="27">end_subject<pos:position pos:line="91" pos:column="38"/></name></name></expr>;<pos:position pos:line="91" pos:column="39"/></expr_stmt>

<expr_stmt><expr><name><name pos:line="93" pos:column="1">match_block<pos:position pos:line="93" pos:column="12"/></name><operator pos:line="93" pos:column="12">.<pos:position pos:line="93" pos:column="13"/></operator><name pos:line="93" pos:column="13">endonly<pos:position pos:line="93" pos:column="20"/></name></name> <operator pos:line="93" pos:column="21">=<pos:position pos:line="93" pos:column="22"/></operator> <operator pos:line="93" pos:column="23">(<pos:position pos:line="93" pos:column="24"/></operator><name><name pos:line="93" pos:column="24">re<pos:position pos:line="93" pos:column="26"/></name><operator pos:line="93" pos:column="26">-&gt;<pos:position pos:line="93" pos:column="31"/></operator><name pos:line="93" pos:column="28">options<pos:position pos:line="93" pos:column="35"/></name></name> <operator pos:line="93" pos:column="36">&amp;<pos:position pos:line="93" pos:column="41"/></operator> <name pos:line="93" pos:column="38">PCRE_DOLLAR_ENDONLY<pos:position pos:line="93" pos:column="57"/></name><operator pos:line="93" pos:column="57">)<pos:position pos:line="93" pos:column="58"/></operator> <operator pos:line="93" pos:column="59">!=<pos:position pos:line="93" pos:column="61"/></operator> <literal type="number" pos:line="93" pos:column="62">0<pos:position pos:line="93" pos:column="63"/></literal></expr>;<pos:position pos:line="93" pos:column="64"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="94" pos:column="1">match_block<pos:position pos:line="94" pos:column="12"/></name><operator pos:line="94" pos:column="12">.<pos:position pos:line="94" pos:column="13"/></operator><name pos:line="94" pos:column="13">utf8<pos:position pos:line="94" pos:column="17"/></name></name> <operator pos:line="94" pos:column="18">=<pos:position pos:line="94" pos:column="19"/></operator> <operator pos:line="94" pos:column="20">(<pos:position pos:line="94" pos:column="21"/></operator><name><name pos:line="94" pos:column="21">re<pos:position pos:line="94" pos:column="23"/></name><operator pos:line="94" pos:column="23">-&gt;<pos:position pos:line="94" pos:column="28"/></operator><name pos:line="94" pos:column="25">options<pos:position pos:line="94" pos:column="32"/></name></name> <operator pos:line="94" pos:column="33">&amp;<pos:position pos:line="94" pos:column="38"/></operator> <name pos:line="94" pos:column="35">PCRE_UTF8<pos:position pos:line="94" pos:column="44"/></name><operator pos:line="94" pos:column="44">)<pos:position pos:line="94" pos:column="45"/></operator> <operator pos:line="94" pos:column="46">!=<pos:position pos:line="94" pos:column="48"/></operator> <literal type="number" pos:line="94" pos:column="49">0<pos:position pos:line="94" pos:column="50"/></literal></expr>;<pos:position pos:line="94" pos:column="51"/></expr_stmt>

<expr_stmt><expr><name><name pos:line="96" pos:column="1">match_block<pos:position pos:line="96" pos:column="12"/></name><operator pos:line="96" pos:column="12">.<pos:position pos:line="96" pos:column="13"/></operator><name pos:line="96" pos:column="13">notbol<pos:position pos:line="96" pos:column="19"/></name></name> <operator pos:line="96" pos:column="20">=<pos:position pos:line="96" pos:column="21"/></operator> <operator pos:line="96" pos:column="22">(<pos:position pos:line="96" pos:column="23"/></operator><name pos:line="96" pos:column="23">options<pos:position pos:line="96" pos:column="30"/></name> <operator pos:line="96" pos:column="31">&amp;<pos:position pos:line="96" pos:column="36"/></operator> <name pos:line="96" pos:column="33">PCRE_NOTBOL<pos:position pos:line="96" pos:column="44"/></name><operator pos:line="96" pos:column="44">)<pos:position pos:line="96" pos:column="45"/></operator> <operator pos:line="96" pos:column="46">!=<pos:position pos:line="96" pos:column="48"/></operator> <literal type="number" pos:line="96" pos:column="49">0<pos:position pos:line="96" pos:column="50"/></literal></expr>;<pos:position pos:line="96" pos:column="51"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="97" pos:column="1">match_block<pos:position pos:line="97" pos:column="12"/></name><operator pos:line="97" pos:column="12">.<pos:position pos:line="97" pos:column="13"/></operator><name pos:line="97" pos:column="13">noteol<pos:position pos:line="97" pos:column="19"/></name></name> <operator pos:line="97" pos:column="20">=<pos:position pos:line="97" pos:column="21"/></operator> <operator pos:line="97" pos:column="22">(<pos:position pos:line="97" pos:column="23"/></operator><name pos:line="97" pos:column="23">options<pos:position pos:line="97" pos:column="30"/></name> <operator pos:line="97" pos:column="31">&amp;<pos:position pos:line="97" pos:column="36"/></operator> <name pos:line="97" pos:column="33">PCRE_NOTEOL<pos:position pos:line="97" pos:column="44"/></name><operator pos:line="97" pos:column="44">)<pos:position pos:line="97" pos:column="45"/></operator> <operator pos:line="97" pos:column="46">!=<pos:position pos:line="97" pos:column="48"/></operator> <literal type="number" pos:line="97" pos:column="49">0<pos:position pos:line="97" pos:column="50"/></literal></expr>;<pos:position pos:line="97" pos:column="51"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="98" pos:column="1">match_block<pos:position pos:line="98" pos:column="12"/></name><operator pos:line="98" pos:column="12">.<pos:position pos:line="98" pos:column="13"/></operator><name pos:line="98" pos:column="13">notempty<pos:position pos:line="98" pos:column="21"/></name></name> <operator pos:line="98" pos:column="22">=<pos:position pos:line="98" pos:column="23"/></operator> <operator pos:line="98" pos:column="24">(<pos:position pos:line="98" pos:column="25"/></operator><name pos:line="98" pos:column="25">options<pos:position pos:line="98" pos:column="32"/></name> <operator pos:line="98" pos:column="33">&amp;<pos:position pos:line="98" pos:column="38"/></operator> <name pos:line="98" pos:column="35">PCRE_NOTEMPTY<pos:position pos:line="98" pos:column="48"/></name><operator pos:line="98" pos:column="48">)<pos:position pos:line="98" pos:column="49"/></operator> <operator pos:line="98" pos:column="50">!=<pos:position pos:line="98" pos:column="52"/></operator> <literal type="number" pos:line="98" pos:column="53">0<pos:position pos:line="98" pos:column="54"/></literal></expr>;<pos:position pos:line="98" pos:column="55"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="99" pos:column="1">match_block<pos:position pos:line="99" pos:column="12"/></name><operator pos:line="99" pos:column="12">.<pos:position pos:line="99" pos:column="13"/></operator><name pos:line="99" pos:column="13">partial<pos:position pos:line="99" pos:column="20"/></name></name> <operator pos:line="99" pos:column="21">=<pos:position pos:line="99" pos:column="22"/></operator> <operator pos:line="99" pos:column="23">(<pos:position pos:line="99" pos:column="24"/></operator><name pos:line="99" pos:column="24">options<pos:position pos:line="99" pos:column="31"/></name> <operator pos:line="99" pos:column="32">&amp;<pos:position pos:line="99" pos:column="37"/></operator> <name pos:line="99" pos:column="34">PCRE_PARTIAL<pos:position pos:line="99" pos:column="46"/></name><operator pos:line="99" pos:column="46">)<pos:position pos:line="99" pos:column="47"/></operator> <operator pos:line="99" pos:column="48">!=<pos:position pos:line="99" pos:column="50"/></operator> <literal type="number" pos:line="99" pos:column="51">0<pos:position pos:line="99" pos:column="52"/></literal></expr>;<pos:position pos:line="99" pos:column="53"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="100" pos:column="1">match_block<pos:position pos:line="100" pos:column="12"/></name><operator pos:line="100" pos:column="12">.<pos:position pos:line="100" pos:column="13"/></operator><name pos:line="100" pos:column="13">hitend<pos:position pos:line="100" pos:column="19"/></name></name> <operator pos:line="100" pos:column="20">=<pos:position pos:line="100" pos:column="21"/></operator> <name pos:line="100" pos:column="22">FALSE<pos:position pos:line="100" pos:column="27"/></name></expr>;<pos:position pos:line="100" pos:column="28"/></expr_stmt>

<expr_stmt><expr><name><name pos:line="102" pos:column="1">match_block<pos:position pos:line="102" pos:column="12"/></name><operator pos:line="102" pos:column="12">.<pos:position pos:line="102" pos:column="13"/></operator><name pos:line="102" pos:column="13">recursive<pos:position pos:line="102" pos:column="22"/></name></name> <operator pos:line="102" pos:column="23">=<pos:position pos:line="102" pos:column="24"/></operator> <name pos:line="102" pos:column="25">NULL<pos:position pos:line="102" pos:column="29"/></name></expr>;<pos:position pos:line="102" pos:column="30"/></expr_stmt>                   <comment type="block" pos:line="102" pos:column="49">/* No recursion at top level */</comment>

<expr_stmt><expr><name><name pos:line="104" pos:column="1">match_block<pos:position pos:line="104" pos:column="12"/></name><operator pos:line="104" pos:column="12">.<pos:position pos:line="104" pos:column="13"/></operator><name pos:line="104" pos:column="13">lcc<pos:position pos:line="104" pos:column="16"/></name></name> <operator pos:line="104" pos:column="17">=<pos:position pos:line="104" pos:column="18"/></operator> <name pos:line="104" pos:column="19">tables<pos:position pos:line="104" pos:column="25"/></name> <operator pos:line="104" pos:column="26">+<pos:position pos:line="104" pos:column="27"/></operator> <name pos:line="104" pos:column="28">lcc_offset<pos:position pos:line="104" pos:column="38"/></name></expr>;<pos:position pos:line="104" pos:column="39"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="105" pos:column="1">match_block<pos:position pos:line="105" pos:column="12"/></name><operator pos:line="105" pos:column="12">.<pos:position pos:line="105" pos:column="13"/></operator><name pos:line="105" pos:column="13">ctypes<pos:position pos:line="105" pos:column="19"/></name></name> <operator pos:line="105" pos:column="20">=<pos:position pos:line="105" pos:column="21"/></operator> <name pos:line="105" pos:column="22">tables<pos:position pos:line="105" pos:column="28"/></name> <operator pos:line="105" pos:column="29">+<pos:position pos:line="105" pos:column="30"/></operator> <name pos:line="105" pos:column="31">ctypes_offset<pos:position pos:line="105" pos:column="44"/></name></expr>;<pos:position pos:line="105" pos:column="45"/></expr_stmt>

<comment type="block" pos:line="107" pos:column="1">/* Partial matching is supported only for a restricted set of regexes at the
moment. */</comment>

<if pos:line="110" pos:column="1">if <condition pos:line="110" pos:column="4">(<expr><name><name pos:line="110" pos:column="5">match_block<pos:position pos:line="110" pos:column="16"/></name><operator pos:line="110" pos:column="16">.<pos:position pos:line="110" pos:column="17"/></operator><name pos:line="110" pos:column="17">partial<pos:position pos:line="110" pos:column="24"/></name></name> <operator pos:line="110" pos:column="25">&amp;&amp;<pos:position pos:line="110" pos:column="35"/></operator> <operator pos:line="110" pos:column="28">(<pos:position pos:line="110" pos:column="29"/></operator><name><name pos:line="110" pos:column="29">re<pos:position pos:line="110" pos:column="31"/></name><operator pos:line="110" pos:column="31">-&gt;<pos:position pos:line="110" pos:column="36"/></operator><name pos:line="110" pos:column="33">options<pos:position pos:line="110" pos:column="40"/></name></name> <operator pos:line="110" pos:column="41">&amp;<pos:position pos:line="110" pos:column="46"/></operator> <name pos:line="110" pos:column="43">PCRE_NOPARTIAL<pos:position pos:line="110" pos:column="57"/></name><operator pos:line="110" pos:column="57">)<pos:position pos:line="110" pos:column="58"/></operator> <operator pos:line="110" pos:column="59">!=<pos:position pos:line="110" pos:column="61"/></operator> <literal type="number" pos:line="110" pos:column="62">0<pos:position pos:line="110" pos:column="63"/></literal></expr>)<pos:position pos:line="110" pos:column="64"/></condition><then pos:line="110" pos:column="64">
  <block type="pseudo"><return pos:line="111" pos:column="3">return <expr><name pos:line="111" pos:column="10">PCRE_ERROR_BADPARTIAL<pos:position pos:line="111" pos:column="31"/></name></expr>;<pos:position pos:line="111" pos:column="32"/></return></block></then></if>

<comment type="block" pos:line="113" pos:column="1">/* Check a UTF-8 string if required. Unfortunately there's no way of passing
back the character offset. */</comment>

<cpp:ifdef pos:line="116" pos:column="1">#<cpp:directive pos:line="116" pos:column="2">ifdef<pos:position pos:line="116" pos:column="7"/></cpp:directive> <name pos:line="116" pos:column="8">SUPPORT_UTF8<pos:position pos:line="116" pos:column="20"/></name></cpp:ifdef>
<if pos:line="117" pos:column="1">if <condition pos:line="117" pos:column="4">(<expr><name><name pos:line="117" pos:column="5">match_block<pos:position pos:line="117" pos:column="16"/></name><operator pos:line="117" pos:column="16">.<pos:position pos:line="117" pos:column="17"/></operator><name pos:line="117" pos:column="17">utf8<pos:position pos:line="117" pos:column="21"/></name></name> <operator pos:line="117" pos:column="22">&amp;&amp;<pos:position pos:line="117" pos:column="32"/></operator> <operator pos:line="117" pos:column="25">(<pos:position pos:line="117" pos:column="26"/></operator><name pos:line="117" pos:column="26">options<pos:position pos:line="117" pos:column="33"/></name> <operator pos:line="117" pos:column="34">&amp;<pos:position pos:line="117" pos:column="39"/></operator> <name pos:line="117" pos:column="36">PCRE_NO_UTF8_CHECK<pos:position pos:line="117" pos:column="54"/></name><operator pos:line="117" pos:column="54">)<pos:position pos:line="117" pos:column="55"/></operator> <operator pos:line="117" pos:column="56">==<pos:position pos:line="117" pos:column="58"/></operator> <literal type="number" pos:line="117" pos:column="59">0<pos:position pos:line="117" pos:column="60"/></literal></expr>)<pos:position pos:line="117" pos:column="61"/></condition><then pos:line="117" pos:column="61">
  <block pos:line="118" pos:column="3">{
  <if pos:line="119" pos:column="3">if <condition pos:line="119" pos:column="6">(<expr><call><name pos:line="119" pos:column="7">valid_utf8<pos:position pos:line="119" pos:column="17"/></name><argument_list pos:line="119" pos:column="17">(<argument><expr><operator pos:line="119" pos:column="18">(<pos:position pos:line="119" pos:column="19"/></operator><name pos:line="119" pos:column="19">uschar<pos:position pos:line="119" pos:column="25"/></name> <operator pos:line="119" pos:column="26">*<pos:position pos:line="119" pos:column="27"/></operator><operator pos:line="119" pos:column="27">)<pos:position pos:line="119" pos:column="28"/></operator><name pos:line="119" pos:column="28">subject<pos:position pos:line="119" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="119" pos:column="37">length<pos:position pos:line="119" pos:column="43"/></name></expr></argument>)<pos:position pos:line="119" pos:column="44"/></argument_list></call> <operator pos:line="119" pos:column="45">&gt;=<pos:position pos:line="119" pos:column="50"/></operator> <literal type="number" pos:line="119" pos:column="48">0<pos:position pos:line="119" pos:column="49"/></literal></expr>)<pos:position pos:line="119" pos:column="50"/></condition><then pos:line="119" pos:column="50">
    <block type="pseudo"><return pos:line="120" pos:column="5">return <expr><name pos:line="120" pos:column="12">PCRE_ERROR_BADUTF8<pos:position pos:line="120" pos:column="30"/></name></expr>;<pos:position pos:line="120" pos:column="31"/></return></block></then></if>
  <if pos:line="121" pos:column="3">if <condition pos:line="121" pos:column="6">(<expr><name pos:line="121" pos:column="7">start_offset<pos:position pos:line="121" pos:column="19"/></name> <operator pos:line="121" pos:column="20">&gt;<pos:position pos:line="121" pos:column="24"/></operator> <literal type="number" pos:line="121" pos:column="22">0<pos:position pos:line="121" pos:column="23"/></literal> <operator pos:line="121" pos:column="24">&amp;&amp;<pos:position pos:line="121" pos:column="34"/></operator> <name pos:line="121" pos:column="27">start_offset<pos:position pos:line="121" pos:column="39"/></name> <operator pos:line="121" pos:column="40">&lt;<pos:position pos:line="121" pos:column="44"/></operator> <name pos:line="121" pos:column="42">length<pos:position pos:line="121" pos:column="48"/></name></expr>)<pos:position pos:line="121" pos:column="49"/></condition><then pos:line="121" pos:column="49">
    <block pos:line="122" pos:column="5">{
    <decl_stmt><decl><type><name pos:line="123" pos:column="5">int<pos:position pos:line="123" pos:column="8"/></name></type> <name pos:line="123" pos:column="9">tb<pos:position pos:line="123" pos:column="11"/></name> <init pos:line="123" pos:column="12">= <expr><operator pos:line="123" pos:column="14">(<pos:position pos:line="123" pos:column="15"/></operator><operator pos:line="123" pos:column="15">(<pos:position pos:line="123" pos:column="16"/></operator><name pos:line="123" pos:column="16">uschar<pos:position pos:line="123" pos:column="22"/></name> <operator pos:line="123" pos:column="23">*<pos:position pos:line="123" pos:column="24"/></operator><operator pos:line="123" pos:column="24">)<pos:position pos:line="123" pos:column="25"/></operator><name pos:line="123" pos:column="25">subject<pos:position pos:line="123" pos:column="32"/></name><operator pos:line="123" pos:column="32">)<pos:position pos:line="123" pos:column="33"/></operator><index pos:line="123" pos:column="33">[<expr><name pos:line="123" pos:column="34">start_offset<pos:position pos:line="123" pos:column="46"/></name></expr>]<pos:position pos:line="123" pos:column="47"/></index></expr></init></decl>;<pos:position pos:line="123" pos:column="48"/></decl_stmt>
    <if pos:line="124" pos:column="5">if <condition pos:line="124" pos:column="8">(<expr><name pos:line="124" pos:column="9">tb<pos:position pos:line="124" pos:column="11"/></name> <operator pos:line="124" pos:column="12">&gt;<pos:position pos:line="124" pos:column="16"/></operator> <literal type="number" pos:line="124" pos:column="14">127<pos:position pos:line="124" pos:column="17"/></literal></expr>)<pos:position pos:line="124" pos:column="18"/></condition><then pos:line="124" pos:column="18">
      <block pos:line="125" pos:column="7">{
      <expr_stmt><expr><name pos:line="126" pos:column="7">tb<pos:position pos:line="126" pos:column="9"/></name> <operator pos:line="126" pos:column="10">&amp;=<pos:position pos:line="126" pos:column="16"/></operator> <literal type="number" pos:line="126" pos:column="13">0xc0<pos:position pos:line="126" pos:column="17"/></literal></expr>;<pos:position pos:line="126" pos:column="18"/></expr_stmt>
      <if pos:line="127" pos:column="7">if <condition pos:line="127" pos:column="10">(<expr><name pos:line="127" pos:column="11">tb<pos:position pos:line="127" pos:column="13"/></name> <operator pos:line="127" pos:column="14">!=<pos:position pos:line="127" pos:column="16"/></operator> <literal type="number" pos:line="127" pos:column="17">0<pos:position pos:line="127" pos:column="18"/></literal> <operator pos:line="127" pos:column="19">&amp;&amp;<pos:position pos:line="127" pos:column="29"/></operator> <name pos:line="127" pos:column="22">tb<pos:position pos:line="127" pos:column="24"/></name> <operator pos:line="127" pos:column="25">!=<pos:position pos:line="127" pos:column="27"/></operator> <literal type="number" pos:line="127" pos:column="28">0xc0<pos:position pos:line="127" pos:column="32"/></literal></expr>)<pos:position pos:line="127" pos:column="33"/></condition><then pos:line="127" pos:column="33"> <block type="pseudo"><return pos:line="127" pos:column="34">return <expr><name pos:line="127" pos:column="41">PCRE_ERROR_BADUTF8_OFFSET<pos:position pos:line="127" pos:column="66"/></name></expr>;<pos:position pos:line="127" pos:column="67"/></return></block></then></if>
      }<pos:position pos:line="128" pos:column="8"/></block></then></if>
    }<pos:position pos:line="129" pos:column="6"/></block></then></if>
  }<pos:position pos:line="130" pos:column="4"/></block></then></if>
<cpp:endif pos:line="131" pos:column="1">#<cpp:directive pos:line="131" pos:column="2">endif<pos:position pos:line="131" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="133" pos:column="1">/* The ims options can vary during the matching as a result of the presence
of (?ims) items in the pattern. They are kept in a local variable so that
restoring at the exit of a group is easy. */</comment>

<expr_stmt><expr><name pos:line="137" pos:column="1">ims<pos:position pos:line="137" pos:column="4"/></name> <operator pos:line="137" pos:column="5">=<pos:position pos:line="137" pos:column="6"/></operator> <name><name pos:line="137" pos:column="7">re<pos:position pos:line="137" pos:column="9"/></name><operator pos:line="137" pos:column="9">-&gt;<pos:position pos:line="137" pos:column="14"/></operator><name pos:line="137" pos:column="11">options<pos:position pos:line="137" pos:column="18"/></name></name> <operator pos:line="137" pos:column="19">&amp;<pos:position pos:line="137" pos:column="24"/></operator> <operator pos:line="137" pos:column="21">(<pos:position pos:line="137" pos:column="22"/></operator><name pos:line="137" pos:column="22">PCRE_CASELESS<pos:position pos:line="137" pos:column="35"/></name><operator pos:line="137" pos:column="35">|<pos:position pos:line="137" pos:column="36"/></operator><name pos:line="137" pos:column="36">PCRE_MULTILINE<pos:position pos:line="137" pos:column="50"/></name><operator pos:line="137" pos:column="50">|<pos:position pos:line="137" pos:column="51"/></operator><name pos:line="137" pos:column="51">PCRE_DOTALL<pos:position pos:line="137" pos:column="62"/></name><operator pos:line="137" pos:column="62">)<pos:position pos:line="137" pos:column="63"/></operator></expr>;<pos:position pos:line="137" pos:column="64"/></expr_stmt>

<comment type="block" pos:line="139" pos:column="1">/* If the expression has got more back references than the offsets supplied can
hold, we get a temporary chunk of working store to use during the matching.
Otherwise, we can use the vector supplied, rounding down its size to a multiple
of 3. */</comment>

<expr_stmt><expr><name pos:line="144" pos:column="1">ocount<pos:position pos:line="144" pos:column="7"/></name> <operator pos:line="144" pos:column="8">=<pos:position pos:line="144" pos:column="9"/></operator> <name pos:line="144" pos:column="10">offsetcount<pos:position pos:line="144" pos:column="21"/></name> <operator pos:line="144" pos:column="22">-<pos:position pos:line="144" pos:column="23"/></operator> <operator pos:line="144" pos:column="24">(<pos:position pos:line="144" pos:column="25"/></operator><name pos:line="144" pos:column="25">offsetcount<pos:position pos:line="144" pos:column="36"/></name> <operator pos:line="144" pos:column="37">%<pos:position pos:line="144" pos:column="38"/></operator> <literal type="number" pos:line="144" pos:column="39">3<pos:position pos:line="144" pos:column="40"/></literal><operator pos:line="144" pos:column="40">)<pos:position pos:line="144" pos:column="41"/></operator></expr>;<pos:position pos:line="144" pos:column="42"/></expr_stmt>

<if pos:line="146" pos:column="1">if <condition pos:line="146" pos:column="4">(<expr><name><name pos:line="146" pos:column="5">re<pos:position pos:line="146" pos:column="7"/></name><operator pos:line="146" pos:column="7">-&gt;<pos:position pos:line="146" pos:column="12"/></operator><name pos:line="146" pos:column="9">top_backref<pos:position pos:line="146" pos:column="20"/></name></name> <operator pos:line="146" pos:column="21">&gt;<pos:position pos:line="146" pos:column="25"/></operator> <literal type="number" pos:line="146" pos:column="23">0<pos:position pos:line="146" pos:column="24"/></literal> <operator pos:line="146" pos:column="25">&amp;&amp;<pos:position pos:line="146" pos:column="35"/></operator> <name><name pos:line="146" pos:column="28">re<pos:position pos:line="146" pos:column="30"/></name><operator pos:line="146" pos:column="30">-&gt;<pos:position pos:line="146" pos:column="35"/></operator><name pos:line="146" pos:column="32">top_backref<pos:position pos:line="146" pos:column="43"/></name></name> <operator pos:line="146" pos:column="44">&gt;=<pos:position pos:line="146" pos:column="49"/></operator> <name pos:line="146" pos:column="47">ocount<pos:position pos:line="146" pos:column="53"/></name><operator pos:line="146" pos:column="53">/<pos:position pos:line="146" pos:column="54"/></operator><literal type="number" pos:line="146" pos:column="54">3<pos:position pos:line="146" pos:column="55"/></literal></expr>)<pos:position pos:line="146" pos:column="56"/></condition><then pos:line="146" pos:column="56">
  <block pos:line="147" pos:column="3">{
  <expr_stmt><expr><name pos:line="148" pos:column="3">ocount<pos:position pos:line="148" pos:column="9"/></name> <operator pos:line="148" pos:column="10">=<pos:position pos:line="148" pos:column="11"/></operator> <name><name pos:line="148" pos:column="12">re<pos:position pos:line="148" pos:column="14"/></name><operator pos:line="148" pos:column="14">-&gt;<pos:position pos:line="148" pos:column="19"/></operator><name pos:line="148" pos:column="16">top_backref<pos:position pos:line="148" pos:column="27"/></name></name> <operator pos:line="148" pos:column="28">*<pos:position pos:line="148" pos:column="29"/></operator> <literal type="number" pos:line="148" pos:column="30">3<pos:position pos:line="148" pos:column="31"/></literal> <operator pos:line="148" pos:column="32">+<pos:position pos:line="148" pos:column="33"/></operator> <literal type="number" pos:line="148" pos:column="34">3<pos:position pos:line="148" pos:column="35"/></literal></expr>;<pos:position pos:line="148" pos:column="36"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="149" pos:column="3">match_block<pos:position pos:line="149" pos:column="14"/></name><operator pos:line="149" pos:column="14">.<pos:position pos:line="149" pos:column="15"/></operator><name pos:line="149" pos:column="15">offset_vector<pos:position pos:line="149" pos:column="28"/></name></name> <operator pos:line="149" pos:column="29">=<pos:position pos:line="149" pos:column="30"/></operator> <operator pos:line="149" pos:column="31">(<pos:position pos:line="149" pos:column="32"/></operator><name pos:line="149" pos:column="32">int<pos:position pos:line="149" pos:column="35"/></name> <operator pos:line="149" pos:column="36">*<pos:position pos:line="149" pos:column="37"/></operator><operator pos:line="149" pos:column="37">)<pos:position pos:line="149" pos:column="38"/></operator><call pos:line="149" pos:column="38">(<name pos:line="149" pos:column="39">pcre_malloc<pos:position pos:line="149" pos:column="50"/></name>)<argument_list pos:line="149" pos:column="51">(<argument><expr><name pos:line="149" pos:column="52">ocount<pos:position pos:line="149" pos:column="58"/></name> <operator pos:line="149" pos:column="59">*<pos:position pos:line="149" pos:column="60"/></operator> <sizeof pos:line="149" pos:column="61">sizeof<argument_list pos:line="149" pos:column="67">(<argument><expr><name pos:line="149" pos:column="68">int<pos:position pos:line="149" pos:column="71"/></name></expr></argument>)<pos:position pos:line="149" pos:column="72"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="149" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="74"/></expr_stmt>
  <if pos:line="150" pos:column="3">if <condition pos:line="150" pos:column="6">(<expr><name><name pos:line="150" pos:column="7">match_block<pos:position pos:line="150" pos:column="18"/></name><operator pos:line="150" pos:column="18">.<pos:position pos:line="150" pos:column="19"/></operator><name pos:line="150" pos:column="19">offset_vector<pos:position pos:line="150" pos:column="32"/></name></name> <operator pos:line="150" pos:column="33">==<pos:position pos:line="150" pos:column="35"/></operator> <name pos:line="150" pos:column="36">NULL<pos:position pos:line="150" pos:column="40"/></name></expr>)<pos:position pos:line="150" pos:column="41"/></condition><then pos:line="150" pos:column="41"> <block type="pseudo"><return pos:line="150" pos:column="42">return <expr><name pos:line="150" pos:column="49">PCRE_ERROR_NOMEMORY<pos:position pos:line="150" pos:column="68"/></name></expr>;<pos:position pos:line="150" pos:column="69"/></return></block></then></if>
  <expr_stmt><expr><name pos:line="151" pos:column="3">using_temporary_offsets<pos:position pos:line="151" pos:column="26"/></name> <operator pos:line="151" pos:column="27">=<pos:position pos:line="151" pos:column="28"/></operator> <name pos:line="151" pos:column="29">TRUE<pos:position pos:line="151" pos:column="33"/></name></expr>;<pos:position pos:line="151" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="152" pos:column="3">DPRINTF<pos:position pos:line="152" pos:column="10"/></name><argument_list pos:line="152" pos:column="10">(<argument><expr><operator pos:line="152" pos:column="11">(<pos:position pos:line="152" pos:column="12"/></operator><literal type="string" pos:line="152" pos:column="12">"Got memory to hold back references\n"<pos:position pos:line="152" pos:column="50"/></literal><operator pos:line="152" pos:column="50">)<pos:position pos:line="152" pos:column="51"/></operator></expr></argument>)<pos:position pos:line="152" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="152" pos:column="53"/></expr_stmt>
  }<pos:position pos:line="153" pos:column="4"/></block></then>
<else pos:line="154" pos:column="1">else <block type="pseudo"><expr_stmt><expr><name><name pos:line="154" pos:column="6">match_block<pos:position pos:line="154" pos:column="17"/></name><operator pos:line="154" pos:column="17">.<pos:position pos:line="154" pos:column="18"/></operator><name pos:line="154" pos:column="18">offset_vector<pos:position pos:line="154" pos:column="31"/></name></name> <operator pos:line="154" pos:column="32">=<pos:position pos:line="154" pos:column="33"/></operator> <name pos:line="154" pos:column="34">offsets<pos:position pos:line="154" pos:column="41"/></name></expr>;<pos:position pos:line="154" pos:column="42"/></expr_stmt></block></else></if>

<expr_stmt><expr><name><name pos:line="156" pos:column="1">match_block<pos:position pos:line="156" pos:column="12"/></name><operator pos:line="156" pos:column="12">.<pos:position pos:line="156" pos:column="13"/></operator><name pos:line="156" pos:column="13">offset_end<pos:position pos:line="156" pos:column="23"/></name></name> <operator pos:line="156" pos:column="24">=<pos:position pos:line="156" pos:column="25"/></operator> <name pos:line="156" pos:column="26">ocount<pos:position pos:line="156" pos:column="32"/></name></expr>;<pos:position pos:line="156" pos:column="33"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="157" pos:column="1">match_block<pos:position pos:line="157" pos:column="12"/></name><operator pos:line="157" pos:column="12">.<pos:position pos:line="157" pos:column="13"/></operator><name pos:line="157" pos:column="13">offset_max<pos:position pos:line="157" pos:column="23"/></name></name> <operator pos:line="157" pos:column="24">=<pos:position pos:line="157" pos:column="25"/></operator> <operator pos:line="157" pos:column="26">(<pos:position pos:line="157" pos:column="27"/></operator><literal type="number" pos:line="157" pos:column="27">2<pos:position pos:line="157" pos:column="28"/></literal><operator pos:line="157" pos:column="28">*<pos:position pos:line="157" pos:column="29"/></operator><name pos:line="157" pos:column="29">ocount<pos:position pos:line="157" pos:column="35"/></name><operator pos:line="157" pos:column="35">)<pos:position pos:line="157" pos:column="36"/></operator><operator pos:line="157" pos:column="36">/<pos:position pos:line="157" pos:column="37"/></operator><literal type="number" pos:line="157" pos:column="37">3<pos:position pos:line="157" pos:column="38"/></literal></expr>;<pos:position pos:line="157" pos:column="39"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="158" pos:column="1">match_block<pos:position pos:line="158" pos:column="12"/></name><operator pos:line="158" pos:column="12">.<pos:position pos:line="158" pos:column="13"/></operator><name pos:line="158" pos:column="13">offset_overflow<pos:position pos:line="158" pos:column="28"/></name></name> <operator pos:line="158" pos:column="29">=<pos:position pos:line="158" pos:column="30"/></operator> <name pos:line="158" pos:column="31">FALSE<pos:position pos:line="158" pos:column="36"/></name></expr>;<pos:position pos:line="158" pos:column="37"/></expr_stmt>
<expr_stmt><expr><name><name pos:line="159" pos:column="1">match_block<pos:position pos:line="159" pos:column="12"/></name><operator pos:line="159" pos:column="12">.<pos:position pos:line="159" pos:column="13"/></operator><name pos:line="159" pos:column="13">capture_last<pos:position pos:line="159" pos:column="25"/></name></name> <operator pos:line="159" pos:column="26">=<pos:position pos:line="159" pos:column="27"/></operator> <operator pos:line="159" pos:column="28">-<pos:position pos:line="159" pos:column="29"/></operator><literal type="number" pos:line="159" pos:column="29">1<pos:position pos:line="159" pos:column="30"/></literal></expr>;<pos:position pos:line="159" pos:column="31"/></expr_stmt>

<comment type="block" pos:line="161" pos:column="1">/* Compute the minimum number of offsets that we need to reset each time. Doing
this makes a huge difference to execution time when there aren't many brackets
in the pattern. */</comment>

<expr_stmt><expr><name pos:line="165" pos:column="1">resetcount<pos:position pos:line="165" pos:column="11"/></name> <operator pos:line="165" pos:column="12">=<pos:position pos:line="165" pos:column="13"/></operator> <literal type="number" pos:line="165" pos:column="14">2<pos:position pos:line="165" pos:column="15"/></literal> <operator pos:line="165" pos:column="16">+<pos:position pos:line="165" pos:column="17"/></operator> <name><name pos:line="165" pos:column="18">re<pos:position pos:line="165" pos:column="20"/></name><operator pos:line="165" pos:column="20">-&gt;<pos:position pos:line="165" pos:column="25"/></operator><name pos:line="165" pos:column="22">top_bracket<pos:position pos:line="165" pos:column="33"/></name></name> <operator pos:line="165" pos:column="34">*<pos:position pos:line="165" pos:column="35"/></operator> <literal type="number" pos:line="165" pos:column="36">2<pos:position pos:line="165" pos:column="37"/></literal></expr>;<pos:position pos:line="165" pos:column="38"/></expr_stmt>
<if pos:line="166" pos:column="1">if <condition pos:line="166" pos:column="4">(<expr><name pos:line="166" pos:column="5">resetcount<pos:position pos:line="166" pos:column="15"/></name> <operator pos:line="166" pos:column="16">&gt;<pos:position pos:line="166" pos:column="20"/></operator> <name pos:line="166" pos:column="18">offsetcount<pos:position pos:line="166" pos:column="29"/></name></expr>)<pos:position pos:line="166" pos:column="30"/></condition><then pos:line="166" pos:column="30"> <block type="pseudo"><expr_stmt><expr><name pos:line="166" pos:column="31">resetcount<pos:position pos:line="166" pos:column="41"/></name> <operator pos:line="166" pos:column="42">=<pos:position pos:line="166" pos:column="43"/></operator> <name pos:line="166" pos:column="44">ocount<pos:position pos:line="166" pos:column="50"/></name></expr>;<pos:position pos:line="166" pos:column="51"/></expr_stmt></block></then></if>

<comment type="block" pos:line="168" pos:column="1">/* Reset the working variable associated with each extraction. These should
never be used unless previously set, but they get saved and restored, and so we
initialize them to avoid reading uninitialized locations. */</comment>

<if pos:line="172" pos:column="1">if <condition pos:line="172" pos:column="4">(<expr><name><name pos:line="172" pos:column="5">match_block<pos:position pos:line="172" pos:column="16"/></name><operator pos:line="172" pos:column="16">.<pos:position pos:line="172" pos:column="17"/></operator><name pos:line="172" pos:column="17">offset_vector<pos:position pos:line="172" pos:column="30"/></name></name> <operator pos:line="172" pos:column="31">!=<pos:position pos:line="172" pos:column="33"/></operator> <name pos:line="172" pos:column="34">NULL<pos:position pos:line="172" pos:column="38"/></name></expr>)<pos:position pos:line="172" pos:column="39"/></condition><then pos:line="172" pos:column="39">
  <block pos:line="173" pos:column="3">{
  <decl_stmt><decl><type><specifier pos:line="174" pos:column="3">register<pos:position pos:line="174" pos:column="11"/></specifier> <name pos:line="174" pos:column="12">int<pos:position pos:line="174" pos:column="15"/></name> <modifier pos:line="174" pos:column="16">*<pos:position pos:line="174" pos:column="17"/></modifier></type><name pos:line="174" pos:column="17">iptr<pos:position pos:line="174" pos:column="21"/></name> <init pos:line="174" pos:column="22">= <expr><name><name pos:line="174" pos:column="24">match_block<pos:position pos:line="174" pos:column="35"/></name><operator pos:line="174" pos:column="35">.<pos:position pos:line="174" pos:column="36"/></operator><name pos:line="174" pos:column="36">offset_vector<pos:position pos:line="174" pos:column="49"/></name></name> <operator pos:line="174" pos:column="50">+<pos:position pos:line="174" pos:column="51"/></operator> <name pos:line="174" pos:column="52">ocount<pos:position pos:line="174" pos:column="58"/></name></expr></init></decl>;<pos:position pos:line="174" pos:column="59"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="175" pos:column="3">register<pos:position pos:line="175" pos:column="11"/></specifier> <name pos:line="175" pos:column="12">int<pos:position pos:line="175" pos:column="15"/></name> <modifier pos:line="175" pos:column="16">*<pos:position pos:line="175" pos:column="17"/></modifier></type><name pos:line="175" pos:column="17">iend<pos:position pos:line="175" pos:column="21"/></name> <init pos:line="175" pos:column="22">= <expr><name pos:line="175" pos:column="24">iptr<pos:position pos:line="175" pos:column="28"/></name> <operator pos:line="175" pos:column="29">-<pos:position pos:line="175" pos:column="30"/></operator> <name pos:line="175" pos:column="31">resetcount<pos:position pos:line="175" pos:column="41"/></name><operator pos:line="175" pos:column="41">/<pos:position pos:line="175" pos:column="42"/></operator><literal type="number" pos:line="175" pos:column="42">2<pos:position pos:line="175" pos:column="43"/></literal> <operator pos:line="175" pos:column="44">+<pos:position pos:line="175" pos:column="45"/></operator> <literal type="number" pos:line="175" pos:column="46">1<pos:position pos:line="175" pos:column="47"/></literal></expr></init></decl>;<pos:position pos:line="175" pos:column="48"/></decl_stmt>
  <while pos:line="176" pos:column="3">while <condition pos:line="176" pos:column="9">(<expr><operator pos:line="176" pos:column="10">--<pos:position pos:line="176" pos:column="12"/></operator><name pos:line="176" pos:column="12">iptr<pos:position pos:line="176" pos:column="16"/></name> <operator pos:line="176" pos:column="17">&gt;=<pos:position pos:line="176" pos:column="22"/></operator> <name pos:line="176" pos:column="20">iend<pos:position pos:line="176" pos:column="24"/></name></expr>)<pos:position pos:line="176" pos:column="25"/></condition> <block type="pseudo"><expr_stmt><expr><operator pos:line="176" pos:column="26">*<pos:position pos:line="176" pos:column="27"/></operator><name pos:line="176" pos:column="27">iptr<pos:position pos:line="176" pos:column="31"/></name> <operator pos:line="176" pos:column="32">=<pos:position pos:line="176" pos:column="33"/></operator> <operator pos:line="176" pos:column="34">-<pos:position pos:line="176" pos:column="35"/></operator><literal type="number" pos:line="176" pos:column="35">1<pos:position pos:line="176" pos:column="36"/></literal></expr>;<pos:position pos:line="176" pos:column="37"/></expr_stmt></block></while>
  }<pos:position pos:line="177" pos:column="4"/></block></then></if>

<comment type="block" pos:line="179" pos:column="1">/* Set up the first character to match, if available. The first_byte value is
never set for an anchored regular expression, but the anchoring may be forced
at run time, so we have to test for anchoring. The first char may be unset for
an unanchored pattern, of course. If there's no first char and the pattern was
studied, there may be a bitmap of possible first characters. */</comment>

<if pos:line="185" pos:column="1">if <condition pos:line="185" pos:column="4">(<expr><operator pos:line="185" pos:column="5">!<pos:position pos:line="185" pos:column="6"/></operator><name pos:line="185" pos:column="6">anchored<pos:position pos:line="185" pos:column="14"/></name></expr>)<pos:position pos:line="185" pos:column="15"/></condition><then pos:line="185" pos:column="15">
  <block pos:line="186" pos:column="3">{
  <if pos:line="187" pos:column="3">if <condition pos:line="187" pos:column="6">(<expr><operator pos:line="187" pos:column="7">(<pos:position pos:line="187" pos:column="8"/></operator><name><name pos:line="187" pos:column="8">re<pos:position pos:line="187" pos:column="10"/></name><operator pos:line="187" pos:column="10">-&gt;<pos:position pos:line="187" pos:column="15"/></operator><name pos:line="187" pos:column="12">options<pos:position pos:line="187" pos:column="19"/></name></name> <operator pos:line="187" pos:column="20">&amp;<pos:position pos:line="187" pos:column="25"/></operator> <name pos:line="187" pos:column="22">PCRE_FIRSTSET<pos:position pos:line="187" pos:column="35"/></name><operator pos:line="187" pos:column="35">)<pos:position pos:line="187" pos:column="36"/></operator> <operator pos:line="187" pos:column="37">!=<pos:position pos:line="187" pos:column="39"/></operator> <literal type="number" pos:line="187" pos:column="40">0<pos:position pos:line="187" pos:column="41"/></literal></expr>)<pos:position pos:line="187" pos:column="42"/></condition><then pos:line="187" pos:column="42">
    <block pos:line="188" pos:column="5">{
    <expr_stmt><expr><name pos:line="189" pos:column="5">first_byte<pos:position pos:line="189" pos:column="15"/></name> <operator pos:line="189" pos:column="16">=<pos:position pos:line="189" pos:column="17"/></operator> <name><name pos:line="189" pos:column="18">re<pos:position pos:line="189" pos:column="20"/></name><operator pos:line="189" pos:column="20">-&gt;<pos:position pos:line="189" pos:column="25"/></operator><name pos:line="189" pos:column="22">first_byte<pos:position pos:line="189" pos:column="32"/></name></name> <operator pos:line="189" pos:column="33">&amp;<pos:position pos:line="189" pos:column="38"/></operator> <literal type="number" pos:line="189" pos:column="35">255<pos:position pos:line="189" pos:column="38"/></literal></expr>;<pos:position pos:line="189" pos:column="39"/></expr_stmt>
    <if pos:line="190" pos:column="5">if <condition pos:line="190" pos:column="8">(<expr><operator pos:line="190" pos:column="9">(<pos:position pos:line="190" pos:column="10"/></operator><name pos:line="190" pos:column="10">first_byte_caseless<pos:position pos:line="190" pos:column="29"/></name> <operator pos:line="190" pos:column="30">=<pos:position pos:line="190" pos:column="31"/></operator> <operator pos:line="190" pos:column="32">(<pos:position pos:line="190" pos:column="33"/></operator><operator pos:line="190" pos:column="33">(<pos:position pos:line="190" pos:column="34"/></operator><name><name pos:line="190" pos:column="34">re<pos:position pos:line="190" pos:column="36"/></name><operator pos:line="190" pos:column="36">-&gt;<pos:position pos:line="190" pos:column="41"/></operator><name pos:line="190" pos:column="38">first_byte<pos:position pos:line="190" pos:column="48"/></name></name> <operator pos:line="190" pos:column="49">&amp;<pos:position pos:line="190" pos:column="54"/></operator> <name pos:line="190" pos:column="51">REQ_CASELESS<pos:position pos:line="190" pos:column="63"/></name><operator pos:line="190" pos:column="63">)<pos:position pos:line="190" pos:column="64"/></operator> <operator pos:line="190" pos:column="65">!=<pos:position pos:line="190" pos:column="67"/></operator> <literal type="number" pos:line="190" pos:column="68">0<pos:position pos:line="190" pos:column="69"/></literal><operator pos:line="190" pos:column="69">)<pos:position pos:line="190" pos:column="70"/></operator><operator pos:line="190" pos:column="70">)<pos:position pos:line="190" pos:column="71"/></operator> <operator pos:line="190" pos:column="72">==<pos:position pos:line="190" pos:column="74"/></operator> <name pos:line="190" pos:column="75">TRUE<pos:position pos:line="190" pos:column="79"/></name></expr>)<pos:position pos:line="190" pos:column="80"/></condition><then pos:line="190" pos:column="80">
      <block type="pseudo"><expr_stmt><expr><name pos:line="191" pos:column="7">first_byte<pos:position pos:line="191" pos:column="17"/></name> <operator pos:line="191" pos:column="18">=<pos:position pos:line="191" pos:column="19"/></operator> <name><name pos:line="191" pos:column="20">match_block<pos:position pos:line="191" pos:column="31"/></name><operator pos:line="191" pos:column="31">.<pos:position pos:line="191" pos:column="32"/></operator><name pos:line="191" pos:column="32">lcc<pos:position pos:line="191" pos:column="35"/></name><index pos:line="191" pos:column="35">[<expr><name pos:line="191" pos:column="36">first_byte<pos:position pos:line="191" pos:column="46"/></name></expr>]<pos:position pos:line="191" pos:column="47"/></index></name></expr>;<pos:position pos:line="191" pos:column="48"/></expr_stmt></block></then></if>
    }<pos:position pos:line="192" pos:column="6"/></block></then>
  <elseif pos:line="193" pos:column="3">else
    <if pos:line="194" pos:column="5">if <condition pos:line="194" pos:column="8">(<expr><operator pos:line="194" pos:column="9">!<pos:position pos:line="194" pos:column="10"/></operator><name pos:line="194" pos:column="10">startline<pos:position pos:line="194" pos:column="19"/></name> <operator pos:line="194" pos:column="20">&amp;&amp;<pos:position pos:line="194" pos:column="30"/></operator> <name pos:line="194" pos:column="23">study<pos:position pos:line="194" pos:column="28"/></name> <operator pos:line="194" pos:column="29">!=<pos:position pos:line="194" pos:column="31"/></operator> <name pos:line="194" pos:column="32">NULL<pos:position pos:line="194" pos:column="36"/></name> <operator pos:line="194" pos:column="37">&amp;&amp;<pos:position pos:line="194" pos:column="47"/></operator>
      <operator pos:line="195" pos:column="7">(<pos:position pos:line="195" pos:column="8"/></operator><name><name pos:line="195" pos:column="8">study<pos:position pos:line="195" pos:column="13"/></name><operator pos:line="195" pos:column="13">-&gt;<pos:position pos:line="195" pos:column="18"/></operator><name pos:line="195" pos:column="15">options<pos:position pos:line="195" pos:column="22"/></name></name> <operator pos:line="195" pos:column="23">&amp;<pos:position pos:line="195" pos:column="28"/></operator> <name pos:line="195" pos:column="25">PCRE_STUDY_MAPPED<pos:position pos:line="195" pos:column="42"/></name><operator pos:line="195" pos:column="42">)<pos:position pos:line="195" pos:column="43"/></operator> <operator pos:line="195" pos:column="44">!=<pos:position pos:line="195" pos:column="46"/></operator> <literal type="number" pos:line="195" pos:column="47">0<pos:position pos:line="195" pos:column="48"/></literal></expr>)<pos:position pos:line="195" pos:column="49"/></condition><then pos:line="195" pos:column="49">
        <block type="pseudo"><expr_stmt><expr><name pos:line="196" pos:column="9">start_bits<pos:position pos:line="196" pos:column="19"/></name> <operator pos:line="196" pos:column="20">=<pos:position pos:line="196" pos:column="21"/></operator> <name><name pos:line="196" pos:column="22">study<pos:position pos:line="196" pos:column="27"/></name><operator pos:line="196" pos:column="27">-&gt;<pos:position pos:line="196" pos:column="32"/></operator><name pos:line="196" pos:column="29">start_bits<pos:position pos:line="196" pos:column="39"/></name></name></expr>;<pos:position pos:line="196" pos:column="40"/></expr_stmt></block></then></if></elseif></if>
  }<pos:position pos:line="197" pos:column="4"/></block></then></if>

<comment type="block" pos:line="199" pos:column="1">/* For anchored or unanchored matches, there may be a "last known required
character" set. */</comment>

<if pos:line="202" pos:column="1">if <condition pos:line="202" pos:column="4">(<expr><operator pos:line="202" pos:column="5">(<pos:position pos:line="202" pos:column="6"/></operator><name><name pos:line="202" pos:column="6">re<pos:position pos:line="202" pos:column="8"/></name><operator pos:line="202" pos:column="8">-&gt;<pos:position pos:line="202" pos:column="13"/></operator><name pos:line="202" pos:column="10">options<pos:position pos:line="202" pos:column="17"/></name></name> <operator pos:line="202" pos:column="18">&amp;<pos:position pos:line="202" pos:column="23"/></operator> <name pos:line="202" pos:column="20">PCRE_REQCHSET<pos:position pos:line="202" pos:column="33"/></name><operator pos:line="202" pos:column="33">)<pos:position pos:line="202" pos:column="34"/></operator> <operator pos:line="202" pos:column="35">!=<pos:position pos:line="202" pos:column="37"/></operator> <literal type="number" pos:line="202" pos:column="38">0<pos:position pos:line="202" pos:column="39"/></literal></expr>)<pos:position pos:line="202" pos:column="40"/></condition><then pos:line="202" pos:column="40">
  <block pos:line="203" pos:column="3">{
  <expr_stmt><expr><name pos:line="204" pos:column="3">req_byte<pos:position pos:line="204" pos:column="11"/></name> <operator pos:line="204" pos:column="12">=<pos:position pos:line="204" pos:column="13"/></operator> <name><name pos:line="204" pos:column="14">re<pos:position pos:line="204" pos:column="16"/></name><operator pos:line="204" pos:column="16">-&gt;<pos:position pos:line="204" pos:column="21"/></operator><name pos:line="204" pos:column="18">req_byte<pos:position pos:line="204" pos:column="26"/></name></name> <operator pos:line="204" pos:column="27">&amp;<pos:position pos:line="204" pos:column="32"/></operator> <literal type="number" pos:line="204" pos:column="29">255<pos:position pos:line="204" pos:column="32"/></literal></expr>;<pos:position pos:line="204" pos:column="33"/></expr_stmt>
  <expr_stmt><expr><name pos:line="205" pos:column="3">req_byte_caseless<pos:position pos:line="205" pos:column="20"/></name> <operator pos:line="205" pos:column="21">=<pos:position pos:line="205" pos:column="22"/></operator> <operator pos:line="205" pos:column="23">(<pos:position pos:line="205" pos:column="24"/></operator><name><name pos:line="205" pos:column="24">re<pos:position pos:line="205" pos:column="26"/></name><operator pos:line="205" pos:column="26">-&gt;<pos:position pos:line="205" pos:column="31"/></operator><name pos:line="205" pos:column="28">req_byte<pos:position pos:line="205" pos:column="36"/></name></name> <operator pos:line="205" pos:column="37">&amp;<pos:position pos:line="205" pos:column="42"/></operator> <name pos:line="205" pos:column="39">REQ_CASELESS<pos:position pos:line="205" pos:column="51"/></name><operator pos:line="205" pos:column="51">)<pos:position pos:line="205" pos:column="52"/></operator> <operator pos:line="205" pos:column="53">!=<pos:position pos:line="205" pos:column="55"/></operator> <literal type="number" pos:line="205" pos:column="56">0<pos:position pos:line="205" pos:column="57"/></literal></expr>;<pos:position pos:line="205" pos:column="58"/></expr_stmt>
  <expr_stmt><expr><name pos:line="206" pos:column="3">req_byte2<pos:position pos:line="206" pos:column="12"/></name> <operator pos:line="206" pos:column="13">=<pos:position pos:line="206" pos:column="14"/></operator> <operator pos:line="206" pos:column="15">(<pos:position pos:line="206" pos:column="16"/></operator><name pos:line="206" pos:column="16">tables<pos:position pos:line="206" pos:column="22"/></name> <operator pos:line="206" pos:column="23">+<pos:position pos:line="206" pos:column="24"/></operator> <name pos:line="206" pos:column="25">fcc_offset<pos:position pos:line="206" pos:column="35"/></name><operator pos:line="206" pos:column="35">)<pos:position pos:line="206" pos:column="36"/></operator><index pos:line="206" pos:column="36">[<expr><name pos:line="206" pos:column="37">req_byte<pos:position pos:line="206" pos:column="45"/></name></expr>]<pos:position pos:line="206" pos:column="46"/></index></expr>;<pos:position pos:line="206" pos:column="47"/></expr_stmt>  <comment type="block" pos:line="206" pos:column="49">/* case flipped */</comment>
  }<pos:position pos:line="207" pos:column="4"/></block></then></if>

<comment type="block" pos:line="209" pos:column="1">/* Loop for handling unanchored repeated matching attempts; for anchored regexs
the loop runs just once. */</comment>

<do pos:line="212" pos:column="1">do
  <block pos:line="213" pos:column="3">{
  <comment type="block" pos:line="214" pos:column="3">/* Reset the maximum number of extractions we might see. */</comment>

  <if pos:line="216" pos:column="3">if <condition pos:line="216" pos:column="6">(<expr><name><name pos:line="216" pos:column="7">match_block<pos:position pos:line="216" pos:column="18"/></name><operator pos:line="216" pos:column="18">.<pos:position pos:line="216" pos:column="19"/></operator><name pos:line="216" pos:column="19">offset_vector<pos:position pos:line="216" pos:column="32"/></name></name> <operator pos:line="216" pos:column="33">!=<pos:position pos:line="216" pos:column="35"/></operator> <name pos:line="216" pos:column="36">NULL<pos:position pos:line="216" pos:column="40"/></name></expr>)<pos:position pos:line="216" pos:column="41"/></condition><then pos:line="216" pos:column="41">
    <block pos:line="217" pos:column="5">{
    <decl_stmt><decl><type><specifier pos:line="218" pos:column="5">register<pos:position pos:line="218" pos:column="13"/></specifier> <name pos:line="218" pos:column="14">int<pos:position pos:line="218" pos:column="17"/></name> <modifier pos:line="218" pos:column="18">*<pos:position pos:line="218" pos:column="19"/></modifier></type><name pos:line="218" pos:column="19">iptr<pos:position pos:line="218" pos:column="23"/></name> <init pos:line="218" pos:column="24">= <expr><name><name pos:line="218" pos:column="26">match_block<pos:position pos:line="218" pos:column="37"/></name><operator pos:line="218" pos:column="37">.<pos:position pos:line="218" pos:column="38"/></operator><name pos:line="218" pos:column="38">offset_vector<pos:position pos:line="218" pos:column="51"/></name></name></expr></init></decl>;<pos:position pos:line="218" pos:column="52"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="219" pos:column="5">register<pos:position pos:line="219" pos:column="13"/></specifier> <name pos:line="219" pos:column="14">int<pos:position pos:line="219" pos:column="17"/></name> <modifier pos:line="219" pos:column="18">*<pos:position pos:line="219" pos:column="19"/></modifier></type><name pos:line="219" pos:column="19">iend<pos:position pos:line="219" pos:column="23"/></name> <init pos:line="219" pos:column="24">= <expr><name pos:line="219" pos:column="26">iptr<pos:position pos:line="219" pos:column="30"/></name> <operator pos:line="219" pos:column="31">+<pos:position pos:line="219" pos:column="32"/></operator> <name pos:line="219" pos:column="33">resetcount<pos:position pos:line="219" pos:column="43"/></name></expr></init></decl>;<pos:position pos:line="219" pos:column="44"/></decl_stmt>
    <while pos:line="220" pos:column="5">while <condition pos:line="220" pos:column="11">(<expr><name pos:line="220" pos:column="12">iptr<pos:position pos:line="220" pos:column="16"/></name> <operator pos:line="220" pos:column="17">&lt;<pos:position pos:line="220" pos:column="21"/></operator> <name pos:line="220" pos:column="19">iend<pos:position pos:line="220" pos:column="23"/></name></expr>)<pos:position pos:line="220" pos:column="24"/></condition> <block type="pseudo"><expr_stmt><expr><operator pos:line="220" pos:column="25">*<pos:position pos:line="220" pos:column="26"/></operator><name pos:line="220" pos:column="26">iptr<pos:position pos:line="220" pos:column="30"/></name><operator pos:line="220" pos:column="30">++<pos:position pos:line="220" pos:column="32"/></operator> <operator pos:line="220" pos:column="33">=<pos:position pos:line="220" pos:column="34"/></operator> <operator pos:line="220" pos:column="35">-<pos:position pos:line="220" pos:column="36"/></operator><literal type="number" pos:line="220" pos:column="36">1<pos:position pos:line="220" pos:column="37"/></literal></expr>;<pos:position pos:line="220" pos:column="38"/></expr_stmt></block></while>
    }<pos:position pos:line="221" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="223" pos:column="3">/* Advance to a unique first char if possible */</comment>

  <if pos:line="225" pos:column="3">if <condition pos:line="225" pos:column="6">(<expr><name pos:line="225" pos:column="7">first_byte<pos:position pos:line="225" pos:column="17"/></name> <operator pos:line="225" pos:column="18">&gt;=<pos:position pos:line="225" pos:column="23"/></operator> <literal type="number" pos:line="225" pos:column="21">0<pos:position pos:line="225" pos:column="22"/></literal></expr>)<pos:position pos:line="225" pos:column="23"/></condition><then pos:line="225" pos:column="23">
    <block pos:line="226" pos:column="5">{
    <if pos:line="227" pos:column="5">if <condition pos:line="227" pos:column="8">(<expr><name pos:line="227" pos:column="9">first_byte_caseless<pos:position pos:line="227" pos:column="28"/></name></expr>)<pos:position pos:line="227" pos:column="29"/></condition><then pos:line="227" pos:column="29">
      <block type="pseudo"><while pos:line="228" pos:column="7">while <condition pos:line="228" pos:column="13">(<expr><name pos:line="228" pos:column="14">start_match<pos:position pos:line="228" pos:column="25"/></name> <operator pos:line="228" pos:column="26">&lt;<pos:position pos:line="228" pos:column="30"/></operator> <name pos:line="228" pos:column="28">end_subject<pos:position pos:line="228" pos:column="39"/></name> <operator pos:line="228" pos:column="40">&amp;&amp;<pos:position pos:line="228" pos:column="50"/></operator>
             <name><name pos:line="229" pos:column="14">match_block<pos:position pos:line="229" pos:column="25"/></name><operator pos:line="229" pos:column="25">.<pos:position pos:line="229" pos:column="26"/></operator><name pos:line="229" pos:column="26">lcc<pos:position pos:line="229" pos:column="29"/></name><index pos:line="229" pos:column="29">[<expr><operator pos:line="229" pos:column="30">*<pos:position pos:line="229" pos:column="31"/></operator><name pos:line="229" pos:column="31">start_match<pos:position pos:line="229" pos:column="42"/></name></expr>]<pos:position pos:line="229" pos:column="43"/></index></name> <operator pos:line="229" pos:column="44">!=<pos:position pos:line="229" pos:column="46"/></operator> <name pos:line="229" pos:column="47">first_byte<pos:position pos:line="229" pos:column="57"/></name></expr>)<pos:position pos:line="229" pos:column="58"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="230" pos:column="9">start_match<pos:position pos:line="230" pos:column="20"/></name><operator pos:line="230" pos:column="20">++<pos:position pos:line="230" pos:column="22"/></operator></expr>;<pos:position pos:line="230" pos:column="23"/></expr_stmt></block></while></block></then>
    <else pos:line="231" pos:column="5">else
      <block type="pseudo"><while pos:line="232" pos:column="7">while <condition pos:line="232" pos:column="13">(<expr><name pos:line="232" pos:column="14">start_match<pos:position pos:line="232" pos:column="25"/></name> <operator pos:line="232" pos:column="26">&lt;<pos:position pos:line="232" pos:column="30"/></operator> <name pos:line="232" pos:column="28">end_subject<pos:position pos:line="232" pos:column="39"/></name> <operator pos:line="232" pos:column="40">&amp;&amp;<pos:position pos:line="232" pos:column="50"/></operator> <operator pos:line="232" pos:column="43">*<pos:position pos:line="232" pos:column="44"/></operator><name pos:line="232" pos:column="44">start_match<pos:position pos:line="232" pos:column="55"/></name> <operator pos:line="232" pos:column="56">!=<pos:position pos:line="232" pos:column="58"/></operator> <name pos:line="232" pos:column="59">first_byte<pos:position pos:line="232" pos:column="69"/></name></expr>)<pos:position pos:line="232" pos:column="70"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="233" pos:column="9">start_match<pos:position pos:line="233" pos:column="20"/></name><operator pos:line="233" pos:column="20">++<pos:position pos:line="233" pos:column="22"/></operator></expr>;<pos:position pos:line="233" pos:column="23"/></expr_stmt></block></while></block></else></if>
    }<pos:position pos:line="234" pos:column="6"/></block></then>

  <comment type="block" pos:line="236" pos:column="3">/* Or to just after \n for a multiline match if possible */</comment>

  <elseif pos:line="238" pos:column="3">else <if pos:line="238" pos:column="8">if <condition pos:line="238" pos:column="11">(<expr><name pos:line="238" pos:column="12">startline<pos:position pos:line="238" pos:column="21"/></name></expr>)<pos:position pos:line="238" pos:column="22"/></condition><then pos:line="238" pos:column="22">
    <block pos:line="239" pos:column="5">{
    <if pos:line="240" pos:column="5">if <condition pos:line="240" pos:column="8">(<expr><name pos:line="240" pos:column="9">start_match<pos:position pos:line="240" pos:column="20"/></name> <operator pos:line="240" pos:column="21">&gt;<pos:position pos:line="240" pos:column="25"/></operator> <name><name pos:line="240" pos:column="23">match_block<pos:position pos:line="240" pos:column="34"/></name><operator pos:line="240" pos:column="34">.<pos:position pos:line="240" pos:column="35"/></operator><name pos:line="240" pos:column="35">start_subject<pos:position pos:line="240" pos:column="48"/></name></name> <operator pos:line="240" pos:column="49">+<pos:position pos:line="240" pos:column="50"/></operator> <name pos:line="240" pos:column="51">start_offset<pos:position pos:line="240" pos:column="63"/></name></expr>)<pos:position pos:line="240" pos:column="64"/></condition><then pos:line="240" pos:column="64">
      <block pos:line="241" pos:column="7">{
      <while pos:line="242" pos:column="7">while <condition pos:line="242" pos:column="13">(<expr><name pos:line="242" pos:column="14">start_match<pos:position pos:line="242" pos:column="25"/></name> <operator pos:line="242" pos:column="26">&lt;<pos:position pos:line="242" pos:column="30"/></operator> <name pos:line="242" pos:column="28">end_subject<pos:position pos:line="242" pos:column="39"/></name> <operator pos:line="242" pos:column="40">&amp;&amp;<pos:position pos:line="242" pos:column="50"/></operator> <name><name pos:line="242" pos:column="43">start_match<pos:position pos:line="242" pos:column="54"/></name><index pos:line="242" pos:column="54">[<expr><operator pos:line="242" pos:column="55">-<pos:position pos:line="242" pos:column="56"/></operator><literal type="number" pos:line="242" pos:column="56">1<pos:position pos:line="242" pos:column="57"/></literal></expr>]<pos:position pos:line="242" pos:column="58"/></index></name> <operator pos:line="242" pos:column="59">!=<pos:position pos:line="242" pos:column="61"/></operator> <name pos:line="242" pos:column="62">NEWLINE<pos:position pos:line="242" pos:column="69"/></name></expr>)<pos:position pos:line="242" pos:column="70"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="243" pos:column="9">start_match<pos:position pos:line="243" pos:column="20"/></name><operator pos:line="243" pos:column="20">++<pos:position pos:line="243" pos:column="22"/></operator></expr>;<pos:position pos:line="243" pos:column="23"/></expr_stmt></block></while>
      }<pos:position pos:line="244" pos:column="8"/></block></then></if>
    }<pos:position pos:line="245" pos:column="6"/></block></then></if></elseif>

  <comment type="block" pos:line="247" pos:column="3">/* Or to a non-unique first char after study */</comment>

  <elseif pos:line="249" pos:column="3">else <if pos:line="249" pos:column="8">if <condition pos:line="249" pos:column="11">(<expr><name pos:line="249" pos:column="12">start_bits<pos:position pos:line="249" pos:column="22"/></name> <operator pos:line="249" pos:column="23">!=<pos:position pos:line="249" pos:column="25"/></operator> <name pos:line="249" pos:column="26">NULL<pos:position pos:line="249" pos:column="30"/></name></expr>)<pos:position pos:line="249" pos:column="31"/></condition><then pos:line="249" pos:column="31">
    <block pos:line="250" pos:column="5">{
    <while pos:line="251" pos:column="5">while <condition pos:line="251" pos:column="11">(<expr><name pos:line="251" pos:column="12">start_match<pos:position pos:line="251" pos:column="23"/></name> <operator pos:line="251" pos:column="24">&lt;<pos:position pos:line="251" pos:column="28"/></operator> <name pos:line="251" pos:column="26">end_subject<pos:position pos:line="251" pos:column="37"/></name></expr>)<pos:position pos:line="251" pos:column="38"/></condition>
      <block pos:line="252" pos:column="7">{
      <decl_stmt><decl><type><specifier pos:line="253" pos:column="7">register<pos:position pos:line="253" pos:column="15"/></specifier> <name pos:line="253" pos:column="16">unsigned<pos:position pos:line="253" pos:column="24"/></name> <name pos:line="253" pos:column="25">int<pos:position pos:line="253" pos:column="28"/></name></type> <name pos:line="253" pos:column="29">c<pos:position pos:line="253" pos:column="30"/></name> <init pos:line="253" pos:column="31">= <expr><operator pos:line="253" pos:column="33">*<pos:position pos:line="253" pos:column="34"/></operator><name pos:line="253" pos:column="34">start_match<pos:position pos:line="253" pos:column="45"/></name></expr></init></decl>;<pos:position pos:line="253" pos:column="46"/></decl_stmt>
      <if pos:line="254" pos:column="7">if <condition pos:line="254" pos:column="10">(<expr><operator pos:line="254" pos:column="11">(<pos:position pos:line="254" pos:column="12"/></operator><name><name pos:line="254" pos:column="12">start_bits<pos:position pos:line="254" pos:column="22"/></name><index pos:line="254" pos:column="22">[<expr><name pos:line="254" pos:column="23">c<pos:position pos:line="254" pos:column="24"/></name><operator pos:line="254" pos:column="24">/<pos:position pos:line="254" pos:column="25"/></operator><literal type="number" pos:line="254" pos:column="25">8<pos:position pos:line="254" pos:column="26"/></literal></expr>]<pos:position pos:line="254" pos:column="27"/></index></name> <operator pos:line="254" pos:column="28">&amp;<pos:position pos:line="254" pos:column="33"/></operator> <operator pos:line="254" pos:column="30">(<pos:position pos:line="254" pos:column="31"/></operator><literal type="number" pos:line="254" pos:column="31">1<pos:position pos:line="254" pos:column="32"/></literal> <operator pos:line="254" pos:column="33">&lt;&lt;<pos:position pos:line="254" pos:column="41"/></operator> <operator pos:line="254" pos:column="36">(<pos:position pos:line="254" pos:column="37"/></operator><name pos:line="254" pos:column="37">c<pos:position pos:line="254" pos:column="38"/></name><operator pos:line="254" pos:column="38">&amp;<pos:position pos:line="254" pos:column="43"/></operator><literal type="number" pos:line="254" pos:column="39">7<pos:position pos:line="254" pos:column="40"/></literal><operator pos:line="254" pos:column="40">)<pos:position pos:line="254" pos:column="41"/></operator><operator pos:line="254" pos:column="41">)<pos:position pos:line="254" pos:column="42"/></operator><operator pos:line="254" pos:column="42">)<pos:position pos:line="254" pos:column="43"/></operator> <operator pos:line="254" pos:column="44">==<pos:position pos:line="254" pos:column="46"/></operator> <literal type="number" pos:line="254" pos:column="47">0<pos:position pos:line="254" pos:column="48"/></literal></expr>)<pos:position pos:line="254" pos:column="49"/></condition><then pos:line="254" pos:column="49"> <block type="pseudo"><expr_stmt><expr><name pos:line="254" pos:column="50">start_match<pos:position pos:line="254" pos:column="61"/></name><operator pos:line="254" pos:column="61">++<pos:position pos:line="254" pos:column="63"/></operator></expr>;<pos:position pos:line="254" pos:column="64"/></expr_stmt></block></then> <else pos:line="254" pos:column="65">else <block type="pseudo"><break pos:line="254" pos:column="70">break;<pos:position pos:line="254" pos:column="76"/></break></block></else></if>
      }<pos:position pos:line="255" pos:column="8"/></block></while>
    }<pos:position pos:line="256" pos:column="6"/></block></then></if></elseif></if>

<cpp:ifdef pos:line="258" pos:column="1">#<cpp:directive pos:line="258" pos:column="2">ifdef<pos:position pos:line="258" pos:column="7"/></cpp:directive> <name pos:line="258" pos:column="8">DEBUG<pos:position pos:line="258" pos:column="13"/></name></cpp:ifdef>  <comment type="block" pos:line="258" pos:column="15">/* Sigh. Some compilers never learn. */</comment>
  <expr_stmt><expr><call><name pos:line="259" pos:column="3">printf<pos:position pos:line="259" pos:column="9"/></name><argument_list pos:line="259" pos:column="9">(<argument><expr><literal type="string" pos:line="259" pos:column="10">"&gt;&gt;&gt;&gt; Match against: "<pos:position pos:line="259" pos:column="44"/></literal></expr></argument>)<pos:position pos:line="259" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="259" pos:column="34"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="260" pos:column="3">pchars<pos:position pos:line="260" pos:column="9"/></name><argument_list pos:line="260" pos:column="9">(<argument><expr><name pos:line="260" pos:column="10">start_match<pos:position pos:line="260" pos:column="21"/></name></expr></argument>, <argument><expr><name pos:line="260" pos:column="23">end_subject<pos:position pos:line="260" pos:column="34"/></name> <operator pos:line="260" pos:column="35">-<pos:position pos:line="260" pos:column="36"/></operator> <name pos:line="260" pos:column="37">start_match<pos:position pos:line="260" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="260" pos:column="50">TRUE<pos:position pos:line="260" pos:column="54"/></name></expr></argument>, <argument><expr><operator pos:line="260" pos:column="56">&amp;<pos:position pos:line="260" pos:column="61"/></operator><name pos:line="260" pos:column="57">match_block<pos:position pos:line="260" pos:column="68"/></name></expr></argument>)<pos:position pos:line="260" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="260" pos:column="70"/></expr_stmt>
  <expr_stmt><expr><call><name pos:line="261" pos:column="3">printf<pos:position pos:line="261" pos:column="9"/></name><argument_list pos:line="261" pos:column="9">(<argument><expr><literal type="string" pos:line="261" pos:column="10">"\n"<pos:position pos:line="261" pos:column="14"/></literal></expr></argument>)<pos:position pos:line="261" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="261" pos:column="16"/></expr_stmt>
<cpp:endif pos:line="262" pos:column="1">#<cpp:directive pos:line="262" pos:column="2">endif<pos:position pos:line="262" pos:column="7"/></cpp:directive></cpp:endif>

  <comment type="block" pos:line="264" pos:column="3">/* If req_byte is set, we know that that character must appear in the subject
  for the match to succeed. If the first character is set, req_byte must be
  later in the subject; otherwise the test starts at the match point. This
  optimization can save a huge amount of backtracking in patterns with nested
  unlimited repeats that aren't going to match. Writing separate code for
  cased/caseless versions makes it go faster, as does using an autoincrement
  and backing off on a match.

  HOWEVER: when the subject string is very, very long, searching to its end can
  take a long time, and give bad performance on quite ordinary patterns. This
  showed up when somebody was matching /^C/ on a 32-megabyte string... so we
  don't do this when the string is sufficiently long.

  ALSO: this processing is disabled when partial matching is requested.
  */</comment>

  <if pos:line="280" pos:column="3">if <condition pos:line="280" pos:column="6">(<expr><name pos:line="280" pos:column="7">req_byte<pos:position pos:line="280" pos:column="15"/></name> <operator pos:line="280" pos:column="16">&gt;=<pos:position pos:line="280" pos:column="21"/></operator> <literal type="number" pos:line="280" pos:column="19">0<pos:position pos:line="280" pos:column="20"/></literal> <operator pos:line="280" pos:column="21">&amp;&amp;<pos:position pos:line="280" pos:column="31"/></operator>
      <name pos:line="281" pos:column="7">end_subject<pos:position pos:line="281" pos:column="18"/></name> <operator pos:line="281" pos:column="19">-<pos:position pos:line="281" pos:column="20"/></operator> <name pos:line="281" pos:column="21">start_match<pos:position pos:line="281" pos:column="32"/></name> <operator pos:line="281" pos:column="33">&lt;<pos:position pos:line="281" pos:column="37"/></operator> <name pos:line="281" pos:column="35">REQ_BYTE_MAX<pos:position pos:line="281" pos:column="47"/></name> <operator pos:line="281" pos:column="48">&amp;&amp;<pos:position pos:line="281" pos:column="58"/></operator>
      <operator pos:line="282" pos:column="7">!<pos:position pos:line="282" pos:column="8"/></operator><name><name pos:line="282" pos:column="8">match_block<pos:position pos:line="282" pos:column="19"/></name><operator pos:line="282" pos:column="19">.<pos:position pos:line="282" pos:column="20"/></operator><name pos:line="282" pos:column="20">partial<pos:position pos:line="282" pos:column="27"/></name></name></expr>)<pos:position pos:line="282" pos:column="28"/></condition><then pos:line="282" pos:column="28">
    <block pos:line="283" pos:column="5">{
    <decl_stmt><decl><type><specifier pos:line="284" pos:column="5">register<pos:position pos:line="284" pos:column="13"/></specifier> <specifier pos:line="284" pos:column="14">const<pos:position pos:line="284" pos:column="19"/></specifier> <name pos:line="284" pos:column="20">uschar<pos:position pos:line="284" pos:column="26"/></name> <modifier pos:line="284" pos:column="27">*<pos:position pos:line="284" pos:column="28"/></modifier></type><name pos:line="284" pos:column="28">p<pos:position pos:line="284" pos:column="29"/></name> <init pos:line="284" pos:column="30">= <expr><name pos:line="284" pos:column="32">start_match<pos:position pos:line="284" pos:column="43"/></name> <operator pos:line="284" pos:column="44">+<pos:position pos:line="284" pos:column="45"/></operator> <operator pos:line="284" pos:column="46">(<pos:position pos:line="284" pos:column="47"/></operator><ternary><condition><expr><operator pos:line="284" pos:column="47">(<pos:position pos:line="284" pos:column="48"/></operator><name pos:line="284" pos:column="48">first_byte<pos:position pos:line="284" pos:column="58"/></name> <operator pos:line="284" pos:column="59">&gt;=<pos:position pos:line="284" pos:column="64"/></operator> <literal type="number" pos:line="284" pos:column="62">0<pos:position pos:line="284" pos:column="63"/></literal><operator pos:line="284" pos:column="63">)<pos:position pos:line="284" pos:column="64"/></operator></expr>?<pos:position pos:line="284" pos:column="65"/></condition><then pos:line="284" pos:column="65"> <expr><literal type="number" pos:line="284" pos:column="66">1<pos:position pos:line="284" pos:column="67"/></literal></expr> <pos:position pos:line="284" pos:column="68"/></then><else pos:line="284" pos:column="68">: <expr><literal type="number" pos:line="284" pos:column="70">0<pos:position pos:line="284" pos:column="71"/></literal></expr></else></ternary><operator pos:line="284" pos:column="71">)<pos:position pos:line="284" pos:column="72"/></operator></expr></init></decl>;<pos:position pos:line="284" pos:column="73"/></decl_stmt>

    <comment type="block" pos:line="286" pos:column="5">/* We don't need to repeat the search if we haven't yet reached the
    place we found it at last time. */</comment>

    <if pos:line="289" pos:column="5">if <condition pos:line="289" pos:column="8">(<expr><name pos:line="289" pos:column="9">p<pos:position pos:line="289" pos:column="10"/></name> <operator pos:line="289" pos:column="11">&gt;<pos:position pos:line="289" pos:column="15"/></operator> <name pos:line="289" pos:column="13">req_byte_ptr<pos:position pos:line="289" pos:column="25"/></name></expr>)<pos:position pos:line="289" pos:column="26"/></condition><then pos:line="289" pos:column="26">
      <block pos:line="290" pos:column="7">{
      <if pos:line="291" pos:column="7">if <condition pos:line="291" pos:column="10">(<expr><name pos:line="291" pos:column="11">req_byte_caseless<pos:position pos:line="291" pos:column="28"/></name></expr>)<pos:position pos:line="291" pos:column="29"/></condition><then pos:line="291" pos:column="29">
        <block pos:line="292" pos:column="9">{
        <while pos:line="293" pos:column="9">while <condition pos:line="293" pos:column="15">(<expr><name pos:line="293" pos:column="16">p<pos:position pos:line="293" pos:column="17"/></name> <operator pos:line="293" pos:column="18">&lt;<pos:position pos:line="293" pos:column="22"/></operator> <name pos:line="293" pos:column="20">end_subject<pos:position pos:line="293" pos:column="31"/></name></expr>)<pos:position pos:line="293" pos:column="32"/></condition>
          <block pos:line="294" pos:column="11">{
          <decl_stmt><decl><type><specifier pos:line="295" pos:column="11">register<pos:position pos:line="295" pos:column="19"/></specifier> <name pos:line="295" pos:column="20">int<pos:position pos:line="295" pos:column="23"/></name></type> <name pos:line="295" pos:column="24">pp<pos:position pos:line="295" pos:column="26"/></name> <init pos:line="295" pos:column="27">= <expr><operator pos:line="295" pos:column="29">*<pos:position pos:line="295" pos:column="30"/></operator><name pos:line="295" pos:column="30">p<pos:position pos:line="295" pos:column="31"/></name><operator pos:line="295" pos:column="31">++<pos:position pos:line="295" pos:column="33"/></operator></expr></init></decl>;<pos:position pos:line="295" pos:column="34"/></decl_stmt>
          <if pos:line="296" pos:column="11">if <condition pos:line="296" pos:column="14">(<expr><name pos:line="296" pos:column="15">pp<pos:position pos:line="296" pos:column="17"/></name> <operator pos:line="296" pos:column="18">==<pos:position pos:line="296" pos:column="20"/></operator> <name pos:line="296" pos:column="21">req_byte<pos:position pos:line="296" pos:column="29"/></name> <operator pos:line="296" pos:column="30">||<pos:position pos:line="296" pos:column="32"/></operator> <name pos:line="296" pos:column="33">pp<pos:position pos:line="296" pos:column="35"/></name> <operator pos:line="296" pos:column="36">==<pos:position pos:line="296" pos:column="38"/></operator> <name pos:line="296" pos:column="39">req_byte2<pos:position pos:line="296" pos:column="48"/></name></expr>)<pos:position pos:line="296" pos:column="49"/></condition><then pos:line="296" pos:column="49"> <block pos:line="296" pos:column="50">{ <expr_stmt><expr><name pos:line="296" pos:column="52">p<pos:position pos:line="296" pos:column="53"/></name><operator pos:line="296" pos:column="53">--<pos:position pos:line="296" pos:column="55"/></operator></expr>;<pos:position pos:line="296" pos:column="56"/></expr_stmt> <break pos:line="296" pos:column="57">break;<pos:position pos:line="296" pos:column="63"/></break> }<pos:position pos:line="296" pos:column="65"/></block></then></if>
          }<pos:position pos:line="297" pos:column="12"/></block></while>
        }<pos:position pos:line="298" pos:column="10"/></block></then>
      <else pos:line="299" pos:column="7">else
        <block pos:line="300" pos:column="9">{
        <while pos:line="301" pos:column="9">while <condition pos:line="301" pos:column="15">(<expr><name pos:line="301" pos:column="16">p<pos:position pos:line="301" pos:column="17"/></name> <operator pos:line="301" pos:column="18">&lt;<pos:position pos:line="301" pos:column="22"/></operator> <name pos:line="301" pos:column="20">end_subject<pos:position pos:line="301" pos:column="31"/></name></expr>)<pos:position pos:line="301" pos:column="32"/></condition>
          <block pos:line="302" pos:column="11">{
          <if pos:line="303" pos:column="11">if <condition pos:line="303" pos:column="14">(<expr><operator pos:line="303" pos:column="15">*<pos:position pos:line="303" pos:column="16"/></operator><name pos:line="303" pos:column="16">p<pos:position pos:line="303" pos:column="17"/></name><operator pos:line="303" pos:column="17">++<pos:position pos:line="303" pos:column="19"/></operator> <operator pos:line="303" pos:column="20">==<pos:position pos:line="303" pos:column="22"/></operator> <name pos:line="303" pos:column="23">req_byte<pos:position pos:line="303" pos:column="31"/></name></expr>)<pos:position pos:line="303" pos:column="32"/></condition><then pos:line="303" pos:column="32"> <block pos:line="303" pos:column="33">{ <expr_stmt><expr><name pos:line="303" pos:column="35">p<pos:position pos:line="303" pos:column="36"/></name><operator pos:line="303" pos:column="36">--<pos:position pos:line="303" pos:column="38"/></operator></expr>;<pos:position pos:line="303" pos:column="39"/></expr_stmt> <break pos:line="303" pos:column="40">break;<pos:position pos:line="303" pos:column="46"/></break> }<pos:position pos:line="303" pos:column="48"/></block></then></if>
          }<pos:position pos:line="304" pos:column="12"/></block></while>
        }<pos:position pos:line="305" pos:column="10"/></block></else></if>

      <comment type="block" pos:line="307" pos:column="7">/* If we can't find the required character, break the matching loop */</comment>

      <if pos:line="309" pos:column="7">if <condition pos:line="309" pos:column="10">(<expr><name pos:line="309" pos:column="11">p<pos:position pos:line="309" pos:column="12"/></name> <operator pos:line="309" pos:column="13">&gt;=<pos:position pos:line="309" pos:column="18"/></operator> <name pos:line="309" pos:column="16">end_subject<pos:position pos:line="309" pos:column="27"/></name></expr>)<pos:position pos:line="309" pos:column="28"/></condition><then pos:line="309" pos:column="28"> <block type="pseudo"><break pos:line="309" pos:column="29">break;<pos:position pos:line="309" pos:column="35"/></break></block></then></if>

      <comment type="block" pos:line="311" pos:column="7">/* If we have found the required character, save the point where we
      found it, so that we don't search again next time round the loop if
      the start hasn't passed this character yet. */</comment>

      <expr_stmt><expr><name pos:line="315" pos:column="7">req_byte_ptr<pos:position pos:line="315" pos:column="19"/></name> <operator pos:line="315" pos:column="20">=<pos:position pos:line="315" pos:column="21"/></operator> <name pos:line="315" pos:column="22">p<pos:position pos:line="315" pos:column="23"/></name></expr>;<pos:position pos:line="315" pos:column="24"/></expr_stmt>
      }<pos:position pos:line="316" pos:column="8"/></block></then></if>
    }<pos:position pos:line="317" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="319" pos:column="3">/* When a match occurs, substrings will be set for all internal extractions;
  we just need to set up the whole thing as substring 0 before returning. If
  there were too many extractions, set the return code to zero. In the case
  where we had to get some local store to hold offsets for backreferences, copy
  those back references that we can. In this case there need not be overflow
  if certain parts of the pattern were not used. */</comment>

  <expr_stmt><expr><name><name pos:line="326" pos:column="3">match_block<pos:position pos:line="326" pos:column="14"/></name><operator pos:line="326" pos:column="14">.<pos:position pos:line="326" pos:column="15"/></operator><name pos:line="326" pos:column="15">start_match<pos:position pos:line="326" pos:column="26"/></name></name> <operator pos:line="326" pos:column="27">=<pos:position pos:line="326" pos:column="28"/></operator> <name pos:line="326" pos:column="29">start_match<pos:position pos:line="326" pos:column="40"/></name></expr>;<pos:position pos:line="326" pos:column="41"/></expr_stmt>
  <expr_stmt><expr><name><name pos:line="327" pos:column="3">match_block<pos:position pos:line="327" pos:column="14"/></name><operator pos:line="327" pos:column="14">.<pos:position pos:line="327" pos:column="15"/></operator><name pos:line="327" pos:column="15">match_call_count<pos:position pos:line="327" pos:column="31"/></name></name> <operator pos:line="327" pos:column="32">=<pos:position pos:line="327" pos:column="33"/></operator> <literal type="number" pos:line="327" pos:column="34">0<pos:position pos:line="327" pos:column="35"/></literal></expr>;<pos:position pos:line="327" pos:column="36"/></expr_stmt>

  <expr_stmt><expr><name pos:line="329" pos:column="3">rc<pos:position pos:line="329" pos:column="5"/></name> <operator pos:line="329" pos:column="6">=<pos:position pos:line="329" pos:column="7"/></operator> <call><name pos:line="329" pos:column="8">match<pos:position pos:line="329" pos:column="13"/></name><argument_list pos:line="329" pos:column="13">(<argument><expr><name pos:line="329" pos:column="14">start_match<pos:position pos:line="329" pos:column="25"/></name></expr></argument>, <argument><expr><name><name pos:line="329" pos:column="27">match_block<pos:position pos:line="329" pos:column="38"/></name><operator pos:line="329" pos:column="38">.<pos:position pos:line="329" pos:column="39"/></operator><name pos:line="329" pos:column="39">start_code<pos:position pos:line="329" pos:column="49"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="329" pos:column="51">2<pos:position pos:line="329" pos:column="52"/></literal></expr></argument>, <argument><expr><operator pos:line="329" pos:column="54">&amp;<pos:position pos:line="329" pos:column="59"/></operator><name pos:line="329" pos:column="55">match_block<pos:position pos:line="329" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="329" pos:column="68">ims<pos:position pos:line="329" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="329" pos:column="73">NULL<pos:position pos:line="329" pos:column="77"/></name></expr></argument>,
    <argument><expr><name pos:line="330" pos:column="5">match_isgroup<pos:position pos:line="330" pos:column="18"/></name></expr></argument>)<pos:position pos:line="330" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="330" pos:column="20"/></expr_stmt>

  <if pos:line="332" pos:column="3">if <condition pos:line="332" pos:column="6">(<expr><name pos:line="332" pos:column="7">rc<pos:position pos:line="332" pos:column="9"/></name> <operator pos:line="332" pos:column="10">==<pos:position pos:line="332" pos:column="12"/></operator> <name pos:line="332" pos:column="13">MATCH_NOMATCH<pos:position pos:line="332" pos:column="26"/></name></expr>)<pos:position pos:line="332" pos:column="27"/></condition><then pos:line="332" pos:column="27">
    <block pos:line="333" pos:column="5">{
    <expr_stmt><expr><name pos:line="334" pos:column="5">start_match<pos:position pos:line="334" pos:column="16"/></name><operator pos:line="334" pos:column="16">++<pos:position pos:line="334" pos:column="18"/></operator></expr>;<pos:position pos:line="334" pos:column="19"/></expr_stmt>
<cpp:ifdef pos:line="335" pos:column="1">#<cpp:directive pos:line="335" pos:column="2">ifdef<pos:position pos:line="335" pos:column="7"/></cpp:directive> <name pos:line="335" pos:column="8">SUPPORT_UTF8<pos:position pos:line="335" pos:column="20"/></name></cpp:ifdef>
    <if pos:line="336" pos:column="5">if <condition pos:line="336" pos:column="8">(<expr><name><name pos:line="336" pos:column="9">match_block<pos:position pos:line="336" pos:column="20"/></name><operator pos:line="336" pos:column="20">.<pos:position pos:line="336" pos:column="21"/></operator><name pos:line="336" pos:column="21">utf8<pos:position pos:line="336" pos:column="25"/></name></name></expr>)<pos:position pos:line="336" pos:column="26"/></condition><then pos:line="336" pos:column="26">
      <block type="pseudo"><while pos:line="337" pos:column="7">while<condition pos:line="337" pos:column="12">(<expr><name pos:line="337" pos:column="13">start_match<pos:position pos:line="337" pos:column="24"/></name> <operator pos:line="337" pos:column="25">&lt;<pos:position pos:line="337" pos:column="29"/></operator> <name pos:line="337" pos:column="27">end_subject<pos:position pos:line="337" pos:column="38"/></name> <operator pos:line="337" pos:column="39">&amp;&amp;<pos:position pos:line="337" pos:column="49"/></operator> <operator pos:line="337" pos:column="42">(<pos:position pos:line="337" pos:column="43"/></operator><operator pos:line="337" pos:column="43">*<pos:position pos:line="337" pos:column="44"/></operator><name pos:line="337" pos:column="44">start_match<pos:position pos:line="337" pos:column="55"/></name> <operator pos:line="337" pos:column="56">&amp;<pos:position pos:line="337" pos:column="61"/></operator> <literal type="number" pos:line="337" pos:column="58">0xc0<pos:position pos:line="337" pos:column="62"/></literal><operator pos:line="337" pos:column="62">)<pos:position pos:line="337" pos:column="63"/></operator> <operator pos:line="337" pos:column="64">==<pos:position pos:line="337" pos:column="66"/></operator> <literal type="number" pos:line="337" pos:column="67">0x80<pos:position pos:line="337" pos:column="71"/></literal></expr>)<pos:position pos:line="337" pos:column="72"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="338" pos:column="9">start_match<pos:position pos:line="338" pos:column="20"/></name><operator pos:line="338" pos:column="20">++<pos:position pos:line="338" pos:column="22"/></operator></expr>;<pos:position pos:line="338" pos:column="23"/></expr_stmt></block></while></block></then></if>
<cpp:endif pos:line="339" pos:column="1">#<cpp:directive pos:line="339" pos:column="2">endif<pos:position pos:line="339" pos:column="7"/></cpp:directive></cpp:endif>
    <continue pos:line="340" pos:column="5">continue;<pos:position pos:line="340" pos:column="14"/></continue>
    }<pos:position pos:line="341" pos:column="6"/></block></then></if>

  <if pos:line="343" pos:column="3">if <condition pos:line="343" pos:column="6">(<expr><name pos:line="343" pos:column="7">rc<pos:position pos:line="343" pos:column="9"/></name> <operator pos:line="343" pos:column="10">!=<pos:position pos:line="343" pos:column="12"/></operator> <name pos:line="343" pos:column="13">MATCH_MATCH<pos:position pos:line="343" pos:column="24"/></name></expr>)<pos:position pos:line="343" pos:column="25"/></condition><then pos:line="343" pos:column="25">
    <block pos:line="344" pos:column="5">{
    <expr_stmt><expr><call><name pos:line="345" pos:column="5">DPRINTF<pos:position pos:line="345" pos:column="12"/></name><argument_list pos:line="345" pos:column="12">(<argument><expr><operator pos:line="345" pos:column="13">(<pos:position pos:line="345" pos:column="14"/></operator><literal type="string" pos:line="345" pos:column="14">"&gt;&gt;&gt;&gt; error: returning %d\n"<pos:position pos:line="345" pos:column="54"/></literal><operator pos:line="345" pos:column="42">,<pos:position pos:line="345" pos:column="43"/></operator> <name pos:line="345" pos:column="44">rc<pos:position pos:line="345" pos:column="46"/></name><operator pos:line="345" pos:column="46">)<pos:position pos:line="345" pos:column="47"/></operator></expr></argument>)<pos:position pos:line="345" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="345" pos:column="49"/></expr_stmt>
    <return pos:line="346" pos:column="5">return <expr><name pos:line="346" pos:column="12">rc<pos:position pos:line="346" pos:column="14"/></name></expr>;<pos:position pos:line="346" pos:column="15"/></return>
    }<pos:position pos:line="347" pos:column="6"/></block></then></if>

  <comment type="block" pos:line="349" pos:column="3">/* We have a match! Copy the offset information from temporary store if
  necessary */</comment>

  <if pos:line="352" pos:column="3">if <condition pos:line="352" pos:column="6">(<expr><name pos:line="352" pos:column="7">using_temporary_offsets<pos:position pos:line="352" pos:column="30"/></name></expr>)<pos:position pos:line="352" pos:column="31"/></condition><then pos:line="352" pos:column="31">
    <block pos:line="353" pos:column="5">{
    <if pos:line="354" pos:column="5">if <condition pos:line="354" pos:column="8">(<expr><name pos:line="354" pos:column="9">offsetcount<pos:position pos:line="354" pos:column="20"/></name> <operator pos:line="354" pos:column="21">&gt;=<pos:position pos:line="354" pos:column="26"/></operator> <literal type="number" pos:line="354" pos:column="24">4<pos:position pos:line="354" pos:column="25"/></literal></expr>)<pos:position pos:line="354" pos:column="26"/></condition><then pos:line="354" pos:column="26">
      <block pos:line="355" pos:column="7">{
      <expr_stmt><expr><call><name pos:line="356" pos:column="7">memcpy<pos:position pos:line="356" pos:column="13"/></name><argument_list pos:line="356" pos:column="13">(<argument><expr><name pos:line="356" pos:column="14">offsets<pos:position pos:line="356" pos:column="21"/></name> <operator pos:line="356" pos:column="22">+<pos:position pos:line="356" pos:column="23"/></operator> <literal type="number" pos:line="356" pos:column="24">2<pos:position pos:line="356" pos:column="25"/></literal></expr></argument>, <argument><expr><name><name pos:line="356" pos:column="27">match_block<pos:position pos:line="356" pos:column="38"/></name><operator pos:line="356" pos:column="38">.<pos:position pos:line="356" pos:column="39"/></operator><name pos:line="356" pos:column="39">offset_vector<pos:position pos:line="356" pos:column="52"/></name></name> <operator pos:line="356" pos:column="53">+<pos:position pos:line="356" pos:column="54"/></operator> <literal type="number" pos:line="356" pos:column="55">2<pos:position pos:line="356" pos:column="56"/></literal></expr></argument>,
        <argument><expr><operator pos:line="357" pos:column="9">(<pos:position pos:line="357" pos:column="10"/></operator><name pos:line="357" pos:column="10">offsetcount<pos:position pos:line="357" pos:column="21"/></name> <operator pos:line="357" pos:column="22">-<pos:position pos:line="357" pos:column="23"/></operator> <literal type="number" pos:line="357" pos:column="24">2<pos:position pos:line="357" pos:column="25"/></literal><operator pos:line="357" pos:column="25">)<pos:position pos:line="357" pos:column="26"/></operator> <operator pos:line="357" pos:column="27">*<pos:position pos:line="357" pos:column="28"/></operator> <sizeof pos:line="357" pos:column="29">sizeof<argument_list pos:line="357" pos:column="35">(<argument><expr><name pos:line="357" pos:column="36">int<pos:position pos:line="357" pos:column="39"/></name></expr></argument>)<pos:position pos:line="357" pos:column="40"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="357" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="357" pos:column="42"/></expr_stmt>
      <expr_stmt><expr><call><name pos:line="358" pos:column="7">DPRINTF<pos:position pos:line="358" pos:column="14"/></name><argument_list pos:line="358" pos:column="14">(<argument><expr><operator pos:line="358" pos:column="15">(<pos:position pos:line="358" pos:column="16"/></operator><literal type="string" pos:line="358" pos:column="16">"Copied offsets from temporary memory\n"<pos:position pos:line="358" pos:column="56"/></literal><operator pos:line="358" pos:column="56">)<pos:position pos:line="358" pos:column="57"/></operator></expr></argument>)<pos:position pos:line="358" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="358" pos:column="59"/></expr_stmt>
      }<pos:position pos:line="359" pos:column="8"/></block></then></if>
    <if pos:line="360" pos:column="5">if <condition pos:line="360" pos:column="8">(<expr><name><name pos:line="360" pos:column="9">match_block<pos:position pos:line="360" pos:column="20"/></name><operator pos:line="360" pos:column="20">.<pos:position pos:line="360" pos:column="21"/></operator><name pos:line="360" pos:column="21">end_offset_top<pos:position pos:line="360" pos:column="35"/></name></name> <operator pos:line="360" pos:column="36">&gt;<pos:position pos:line="360" pos:column="40"/></operator> <name pos:line="360" pos:column="38">offsetcount<pos:position pos:line="360" pos:column="49"/></name></expr>)<pos:position pos:line="360" pos:column="50"/></condition><then pos:line="360" pos:column="50">
      <block type="pseudo"><expr_stmt><expr><name><name pos:line="361" pos:column="7">match_block<pos:position pos:line="361" pos:column="18"/></name><operator pos:line="361" pos:column="18">.<pos:position pos:line="361" pos:column="19"/></operator><name pos:line="361" pos:column="19">offset_overflow<pos:position pos:line="361" pos:column="34"/></name></name> <operator pos:line="361" pos:column="35">=<pos:position pos:line="361" pos:column="36"/></operator> <name pos:line="361" pos:column="37">TRUE<pos:position pos:line="361" pos:column="41"/></name></expr>;<pos:position pos:line="361" pos:column="42"/></expr_stmt></block></then></if>

    <expr_stmt><expr><call><name pos:line="363" pos:column="5">DPRINTF<pos:position pos:line="363" pos:column="12"/></name><argument_list pos:line="363" pos:column="12">(<argument><expr><operator pos:line="363" pos:column="13">(<pos:position pos:line="363" pos:column="14"/></operator><literal type="string" pos:line="363" pos:column="14">"Freeing temporary memory\n"<pos:position pos:line="363" pos:column="42"/></literal><operator pos:line="363" pos:column="42">)<pos:position pos:line="363" pos:column="43"/></operator></expr></argument>)<pos:position pos:line="363" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="363" pos:column="45"/></expr_stmt>
    <expr_stmt><expr><call pos:line="364" pos:column="5">(<name pos:line="364" pos:column="6">pcre_free<pos:position pos:line="364" pos:column="15"/></name>)<argument_list pos:line="364" pos:column="16">(<argument><expr><name><name pos:line="364" pos:column="17">match_block<pos:position pos:line="364" pos:column="28"/></name><operator pos:line="364" pos:column="28">.<pos:position pos:line="364" pos:column="29"/></operator><name pos:line="364" pos:column="29">offset_vector<pos:position pos:line="364" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="364" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="364" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="365" pos:column="6"/></block></then></if>

  <expr_stmt><expr><name pos:line="367" pos:column="3">rc<pos:position pos:line="367" pos:column="5"/></name> <operator pos:line="367" pos:column="6">=<pos:position pos:line="367" pos:column="7"/></operator> <ternary><condition><expr><name><name pos:line="367" pos:column="8">match_block<pos:position pos:line="367" pos:column="19"/></name><operator pos:line="367" pos:column="19">.<pos:position pos:line="367" pos:column="20"/></operator><name pos:line="367" pos:column="20">offset_overflow<pos:position pos:line="367" pos:column="35"/></name></name></expr>?<pos:position pos:line="367" pos:column="36"/></condition><then pos:line="367" pos:column="36"> <expr><literal type="number" pos:line="367" pos:column="37">0<pos:position pos:line="367" pos:column="38"/></literal></expr> <pos:position pos:line="367" pos:column="39"/></then><else pos:line="367" pos:column="39">: <expr><name><name pos:line="367" pos:column="41">match_block<pos:position pos:line="367" pos:column="52"/></name><operator pos:line="367" pos:column="52">.<pos:position pos:line="367" pos:column="53"/></operator><name pos:line="367" pos:column="53">end_offset_top<pos:position pos:line="367" pos:column="67"/></name></name><operator pos:line="367" pos:column="67">/<pos:position pos:line="367" pos:column="68"/></operator><literal type="number" pos:line="367" pos:column="68">2<pos:position pos:line="367" pos:column="69"/></literal></expr></else></ternary></expr>;<pos:position pos:line="367" pos:column="70"/></expr_stmt>

  <if pos:line="369" pos:column="3">if <condition pos:line="369" pos:column="6">(<expr><name pos:line="369" pos:column="7">offsetcount<pos:position pos:line="369" pos:column="18"/></name> <operator pos:line="369" pos:column="19">&lt;<pos:position pos:line="369" pos:column="23"/></operator> <literal type="number" pos:line="369" pos:column="21">2<pos:position pos:line="369" pos:column="22"/></literal></expr>)<pos:position pos:line="369" pos:column="23"/></condition><then pos:line="369" pos:column="23"> <block type="pseudo"><expr_stmt><expr><name pos:line="369" pos:column="24">rc<pos:position pos:line="369" pos:column="26"/></name> <operator pos:line="369" pos:column="27">=<pos:position pos:line="369" pos:column="28"/></operator> <literal type="number" pos:line="369" pos:column="29">0<pos:position pos:line="369" pos:column="30"/></literal></expr>;<pos:position pos:line="369" pos:column="31"/></expr_stmt></block></then> <else pos:line="369" pos:column="32">else
    <block pos:line="370" pos:column="5">{
    <expr_stmt><expr><name><name pos:line="371" pos:column="5">offsets<pos:position pos:line="371" pos:column="12"/></name><index pos:line="371" pos:column="12">[<expr><literal type="number" pos:line="371" pos:column="13">0<pos:position pos:line="371" pos:column="14"/></literal></expr>]<pos:position pos:line="371" pos:column="15"/></index></name> <operator pos:line="371" pos:column="16">=<pos:position pos:line="371" pos:column="17"/></operator> <name pos:line="371" pos:column="18">start_match<pos:position pos:line="371" pos:column="29"/></name> <operator pos:line="371" pos:column="30">-<pos:position pos:line="371" pos:column="31"/></operator> <name><name pos:line="371" pos:column="32">match_block<pos:position pos:line="371" pos:column="43"/></name><operator pos:line="371" pos:column="43">.<pos:position pos:line="371" pos:column="44"/></operator><name pos:line="371" pos:column="44">start_subject<pos:position pos:line="371" pos:column="57"/></name></name></expr>;<pos:position pos:line="371" pos:column="58"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="372" pos:column="5">offsets<pos:position pos:line="372" pos:column="12"/></name><index pos:line="372" pos:column="12">[<expr><literal type="number" pos:line="372" pos:column="13">1<pos:position pos:line="372" pos:column="14"/></literal></expr>]<pos:position pos:line="372" pos:column="15"/></index></name> <operator pos:line="372" pos:column="16">=<pos:position pos:line="372" pos:column="17"/></operator> <name><name pos:line="372" pos:column="18">match_block<pos:position pos:line="372" pos:column="29"/></name><operator pos:line="372" pos:column="29">.<pos:position pos:line="372" pos:column="30"/></operator><name pos:line="372" pos:column="30">end_match_ptr<pos:position pos:line="372" pos:column="43"/></name></name> <operator pos:line="372" pos:column="44">-<pos:position pos:line="372" pos:column="45"/></operator> <name><name pos:line="372" pos:column="46">match_block<pos:position pos:line="372" pos:column="57"/></name><operator pos:line="372" pos:column="57">.<pos:position pos:line="372" pos:column="58"/></operator><name pos:line="372" pos:column="58">start_subject<pos:position pos:line="372" pos:column="71"/></name></name></expr>;<pos:position pos:line="372" pos:column="72"/></expr_stmt>
    }<pos:position pos:line="373" pos:column="6"/></block></else></if>

  <expr_stmt><expr><call><name pos:line="375" pos:column="3">DPRINTF<pos:position pos:line="375" pos:column="10"/></name><argument_list pos:line="375" pos:column="10">(<argument><expr><operator pos:line="375" pos:column="11">(<pos:position pos:line="375" pos:column="12"/></operator><literal type="string" pos:line="375" pos:column="12">"&gt;&gt;&gt;&gt; returning %d\n"<pos:position pos:line="375" pos:column="45"/></literal><operator pos:line="375" pos:column="33">,<pos:position pos:line="375" pos:column="34"/></operator> <name pos:line="375" pos:column="35">rc<pos:position pos:line="375" pos:column="37"/></name><operator pos:line="375" pos:column="37">)<pos:position pos:line="375" pos:column="38"/></operator></expr></argument>)<pos:position pos:line="375" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="375" pos:column="40"/></expr_stmt>
  <return pos:line="376" pos:column="3">return <expr><name pos:line="376" pos:column="10">rc<pos:position pos:line="376" pos:column="12"/></name></expr>;<pos:position pos:line="376" pos:column="13"/></return>
  }<pos:position pos:line="377" pos:column="4"/></block>

<comment type="block" pos:line="379" pos:column="1">/* This "while" is the end of the "do" above */</comment>

while <condition pos:line="381" pos:column="7">(<expr><operator pos:line="381" pos:column="8">!<pos:position pos:line="381" pos:column="9"/></operator><name pos:line="381" pos:column="9">anchored<pos:position pos:line="381" pos:column="17"/></name> <operator pos:line="381" pos:column="18">&amp;&amp;<pos:position pos:line="381" pos:column="28"/></operator> <name pos:line="381" pos:column="21">start_match<pos:position pos:line="381" pos:column="32"/></name> <operator pos:line="381" pos:column="33">&lt;=<pos:position pos:line="381" pos:column="38"/></operator> <name pos:line="381" pos:column="36">end_subject<pos:position pos:line="381" pos:column="47"/></name></expr>)<pos:position pos:line="381" pos:column="48"/></condition>;<pos:position pos:line="381" pos:column="49"/></do>

<if pos:line="383" pos:column="1">if <condition pos:line="383" pos:column="4">(<expr><name pos:line="383" pos:column="5">using_temporary_offsets<pos:position pos:line="383" pos:column="28"/></name></expr>)<pos:position pos:line="383" pos:column="29"/></condition><then pos:line="383" pos:column="29">
  <block pos:line="384" pos:column="3">{
  <macro><name pos:line="385" pos:column="3">DPRINTF<pos:position pos:line="385" pos:column="10"/></name><argument_list pos:line="385" pos:column="10">(<argument pos:line="385" pos:column="11">(<literal type="string" pos:line="385" pos:column="12">"<pos:position pos:line="385" pos:column="13"/></literal></argument></argument_list></macro></block></then></if></block></function>Freein</unit>
