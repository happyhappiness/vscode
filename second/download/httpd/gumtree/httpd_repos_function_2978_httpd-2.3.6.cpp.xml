<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2978_httpd-2.3.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">void<pos:position pos:line="1" pos:column="5"/></name></type> <name pos:line="1" pos:column="6">simple_check_children_size<pos:position pos:line="1" pos:column="32"/></name><parameter_list pos:line="1" pos:column="32">(<parameter><decl><type><name pos:line="1" pos:column="33">simple_core_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type> <name pos:line="1" pos:column="49">sc<pos:position pos:line="1" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="53">void<pos:position pos:line="1" pos:column="57"/></name> <modifier pos:line="1" pos:column="58">*<pos:position pos:line="1" pos:column="59"/></modifier></type><name pos:line="1" pos:column="59">baton<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="65"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">unsigned<pos:position pos:line="3" pos:column="13"/></name> <name pos:line="3" pos:column="14">int<pos:position pos:line="3" pos:column="17"/></name></type> <name pos:line="3" pos:column="18">count<pos:position pos:line="3" pos:column="23"/></name></decl>;<pos:position pos:line="3" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">wanted<pos:position pos:line="4" pos:column="15"/></name></decl>;<pos:position pos:line="4" pos:column="16"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">i<pos:position pos:line="5" pos:column="10"/></name></decl>;<pos:position pos:line="5" pos:column="11"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="7" pos:column="5">simple_register_timer<pos:position pos:line="7" pos:column="26"/></name><argument_list pos:line="7" pos:column="26">(<argument><expr><name pos:line="7" pos:column="27">sc<pos:position pos:line="7" pos:column="29"/></name></expr></argument>,
                          <argument><expr><name pos:line="8" pos:column="27">simple_check_children_size<pos:position pos:line="8" pos:column="53"/></name></expr></argument>,
                          <argument><expr><name pos:line="9" pos:column="27">NULL<pos:position pos:line="9" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="33">SPAWN_CHILDREN_INTERVAL<pos:position pos:line="9" pos:column="56"/></name></expr></argument>,
                          <argument><expr><name><name pos:line="10" pos:column="27">sc<pos:position pos:line="10" pos:column="29"/></name><operator pos:line="10" pos:column="29">-&gt;<pos:position pos:line="10" pos:column="34"/></operator><name pos:line="10" pos:column="31">pool<pos:position pos:line="10" pos:column="35"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="37"/></expr_stmt>

    <if pos:line="12" pos:column="5">if <condition pos:line="12" pos:column="8">(<expr><name><name pos:line="12" pos:column="9">sc<pos:position pos:line="12" pos:column="11"/></name><operator pos:line="12" pos:column="11">-&gt;<pos:position pos:line="12" pos:column="16"/></operator><name pos:line="12" pos:column="13">run_single_process<pos:position pos:line="12" pos:column="31"/></name></name> <operator pos:line="12" pos:column="32">&amp;&amp;<pos:position pos:line="12" pos:column="42"/></operator> <name><name pos:line="12" pos:column="35">sc<pos:position pos:line="12" pos:column="37"/></name><operator pos:line="12" pos:column="37">-&gt;<pos:position pos:line="12" pos:column="42"/></operator><name pos:line="12" pos:column="39">restart_num<pos:position pos:line="12" pos:column="50"/></name></name> <operator pos:line="12" pos:column="51">==<pos:position pos:line="12" pos:column="53"/></operator> <literal type="number" pos:line="12" pos:column="54">2<pos:position pos:line="12" pos:column="55"/></literal></expr>)<pos:position pos:line="12" pos:column="56"/></condition><then pos:line="12" pos:column="56"> <block pos:line="12" pos:column="57">{
        <decl_stmt><decl><specifier pos:line="13" pos:column="9">static<pos:position pos:line="13" pos:column="15"/></specifier> <type><name pos:line="13" pos:column="16">int<pos:position pos:line="13" pos:column="19"/></name></type> <name pos:line="13" pos:column="20">run<pos:position pos:line="13" pos:column="23"/></name> <init pos:line="13" pos:column="24">= <expr><literal type="number" pos:line="13" pos:column="26">0<pos:position pos:line="13" pos:column="27"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="28"/></decl_stmt>
        <comment type="block" pos:line="14" pos:column="9">/* This is kinda of hack, but rather than spawning a child process, 
         * we register the normal IO handlers in the main event loop....
         */</comment>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><name pos:line="17" pos:column="13">run<pos:position pos:line="17" pos:column="16"/></name> <operator pos:line="17" pos:column="17">==<pos:position pos:line="17" pos:column="19"/></operator> <literal type="number" pos:line="17" pos:column="20">0<pos:position pos:line="17" pos:column="21"/></literal></expr>)<pos:position pos:line="17" pos:column="22"/></condition><then pos:line="17" pos:column="22"> <block pos:line="17" pos:column="23">{
            <expr_stmt><expr><call><name pos:line="18" pos:column="13">simple_single_process_hack<pos:position pos:line="18" pos:column="39"/></name><argument_list pos:line="18" pos:column="39">(<argument><expr><name pos:line="18" pos:column="40">sc<pos:position pos:line="18" pos:column="42"/></name></expr></argument>)<pos:position pos:line="18" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="44"/></expr_stmt>
            <expr_stmt><expr><name pos:line="19" pos:column="13">run<pos:position pos:line="19" pos:column="16"/></name><operator pos:line="19" pos:column="16">++<pos:position pos:line="19" pos:column="18"/></operator></expr>;<pos:position pos:line="19" pos:column="19"/></expr_stmt>
        }<pos:position pos:line="20" pos:column="10"/></block></then></if>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <block pos:line="23" pos:column="5">{
        <expr_stmt><expr><call><name pos:line="24" pos:column="9">apr_thread_mutex_lock<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name><name pos:line="24" pos:column="31">sc<pos:position pos:line="24" pos:column="33"/></name><operator pos:line="24" pos:column="33">-&gt;<pos:position pos:line="24" pos:column="38"/></operator><name pos:line="24" pos:column="35">mtx<pos:position pos:line="24" pos:column="38"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name pos:line="25" pos:column="9">count<pos:position pos:line="25" pos:column="14"/></name> <operator pos:line="25" pos:column="15">=<pos:position pos:line="25" pos:column="16"/></operator> <call><name pos:line="25" pos:column="17">apr_hash_count<pos:position pos:line="25" pos:column="31"/></name><argument_list pos:line="25" pos:column="31">(<argument><expr><name><name pos:line="25" pos:column="32">sc<pos:position pos:line="25" pos:column="34"/></name><operator pos:line="25" pos:column="34">-&gt;<pos:position pos:line="25" pos:column="39"/></operator><name pos:line="25" pos:column="36">children<pos:position pos:line="25" pos:column="44"/></name></name></expr></argument>)<pos:position pos:line="25" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="46"/></expr_stmt>
        <expr_stmt><expr><name pos:line="26" pos:column="9">wanted<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <name><name pos:line="26" pos:column="18">sc<pos:position pos:line="26" pos:column="20"/></name><operator pos:line="26" pos:column="20">-&gt;<pos:position pos:line="26" pos:column="25"/></operator><name pos:line="26" pos:column="22">procmgr<pos:position pos:line="26" pos:column="29"/></name><operator pos:line="26" pos:column="29">.<pos:position pos:line="26" pos:column="30"/></operator><name pos:line="26" pos:column="30">proc_count<pos:position pos:line="26" pos:column="40"/></name></name></expr>;<pos:position pos:line="26" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="27" pos:column="9">apr_thread_mutex_unlock<pos:position pos:line="27" pos:column="32"/></name><argument_list pos:line="27" pos:column="32">(<argument><expr><name><name pos:line="27" pos:column="33">sc<pos:position pos:line="27" pos:column="35"/></name><operator pos:line="27" pos:column="35">-&gt;<pos:position pos:line="27" pos:column="40"/></operator><name pos:line="27" pos:column="37">mtx<pos:position pos:line="27" pos:column="40"/></name></name></expr></argument>)<pos:position pos:line="27" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="42"/></expr_stmt>
    }<pos:position pos:line="28" pos:column="6"/></block>

    <if pos:line="30" pos:column="5">if <condition pos:line="30" pos:column="8">(<expr><name pos:line="30" pos:column="9">count<pos:position pos:line="30" pos:column="14"/></name> <operator pos:line="30" pos:column="15">&gt;<pos:position pos:line="30" pos:column="19"/></operator> <name pos:line="30" pos:column="17">wanted<pos:position pos:line="30" pos:column="23"/></name></expr>)<pos:position pos:line="30" pos:column="24"/></condition><then pos:line="30" pos:column="24"> <block pos:line="30" pos:column="25">{
        <comment type="block" pos:line="31" pos:column="9">/* kill some kids */</comment>
        <decl_stmt><decl><type><name pos:line="32" pos:column="9">int<pos:position pos:line="32" pos:column="12"/></name></type> <name pos:line="32" pos:column="13">to_kill<pos:position pos:line="32" pos:column="20"/></name> <init pos:line="32" pos:column="21">= <expr><name pos:line="32" pos:column="23">count<pos:position pos:line="32" pos:column="28"/></name> <operator pos:line="32" pos:column="29">-<pos:position pos:line="32" pos:column="30"/></operator> <name pos:line="32" pos:column="31">wanted<pos:position pos:line="32" pos:column="37"/></name></expr></init></decl>;<pos:position pos:line="32" pos:column="38"/></decl_stmt>
        <for pos:line="33" pos:column="9">for <control pos:line="33" pos:column="13">(<init><expr><name pos:line="33" pos:column="14">i<pos:position pos:line="33" pos:column="15"/></name> <operator pos:line="33" pos:column="16">=<pos:position pos:line="33" pos:column="17"/></operator> <literal type="number" pos:line="33" pos:column="18">0<pos:position pos:line="33" pos:column="19"/></literal></expr>;<pos:position pos:line="33" pos:column="20"/></init> <condition><expr><name pos:line="33" pos:column="21">i<pos:position pos:line="33" pos:column="22"/></name> <operator pos:line="33" pos:column="23">&lt;<pos:position pos:line="33" pos:column="27"/></operator> <name pos:line="33" pos:column="25">to_kill<pos:position pos:line="33" pos:column="32"/></name></expr>;<pos:position pos:line="33" pos:column="33"/></condition> <incr><expr><name pos:line="33" pos:column="34">i<pos:position pos:line="33" pos:column="35"/></name><operator pos:line="33" pos:column="35">++<pos:position pos:line="33" pos:column="37"/></operator></expr></incr>)<pos:position pos:line="33" pos:column="38"/></control> <block pos:line="33" pos:column="39">{
            <expr_stmt><expr><call><name pos:line="34" pos:column="13">simple_kill_random_child<pos:position pos:line="34" pos:column="37"/></name><argument_list pos:line="34" pos:column="37">(<argument><expr><name pos:line="34" pos:column="38">sc<pos:position pos:line="34" pos:column="40"/></name></expr></argument>)<pos:position pos:line="34" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="42"/></expr_stmt>
        }<pos:position pos:line="35" pos:column="10"/></block></for>
    }<pos:position pos:line="36" pos:column="6"/></block></then>
    <elseif pos:line="37" pos:column="5">else <if pos:line="37" pos:column="10">if <condition pos:line="37" pos:column="13">(<expr><name pos:line="37" pos:column="14">count<pos:position pos:line="37" pos:column="19"/></name> <operator pos:line="37" pos:column="20">&lt;<pos:position pos:line="37" pos:column="24"/></operator> <name pos:line="37" pos:column="22">wanted<pos:position pos:line="37" pos:column="28"/></name></expr>)<pos:position pos:line="37" pos:column="29"/></condition><then pos:line="37" pos:column="29"> <block pos:line="37" pos:column="30">{
        <decl_stmt><decl><type><name pos:line="38" pos:column="9">int<pos:position pos:line="38" pos:column="12"/></name></type> <name pos:line="38" pos:column="13">rv<pos:position pos:line="38" pos:column="15"/></name> <init pos:line="38" pos:column="16">= <expr><literal type="number" pos:line="38" pos:column="18">0<pos:position pos:line="38" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="38" pos:column="20"/></decl_stmt>
        <comment type="block" pos:line="39" pos:column="9">/* spawn some kids */</comment>
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">int<pos:position pos:line="40" pos:column="12"/></name></type> <name pos:line="40" pos:column="13">to_spawn<pos:position pos:line="40" pos:column="21"/></name> <init pos:line="40" pos:column="22">= <expr><name pos:line="40" pos:column="24">wanted<pos:position pos:line="40" pos:column="30"/></name> <operator pos:line="40" pos:column="31">-<pos:position pos:line="40" pos:column="32"/></operator> <name pos:line="40" pos:column="33">count<pos:position pos:line="40" pos:column="38"/></name></expr></init></decl>;<pos:position pos:line="40" pos:column="39"/></decl_stmt>
        <for pos:line="41" pos:column="9">for <control pos:line="41" pos:column="13">(<init><expr><name pos:line="41" pos:column="14">i<pos:position pos:line="41" pos:column="15"/></name> <operator pos:line="41" pos:column="16">=<pos:position pos:line="41" pos:column="17"/></operator> <literal type="number" pos:line="41" pos:column="18">0<pos:position pos:line="41" pos:column="19"/></literal></expr>;<pos:position pos:line="41" pos:column="20"/></init> <condition><expr><name pos:line="41" pos:column="21">rv<pos:position pos:line="41" pos:column="23"/></name> <operator pos:line="41" pos:column="24">==<pos:position pos:line="41" pos:column="26"/></operator> <literal type="number" pos:line="41" pos:column="27">0<pos:position pos:line="41" pos:column="28"/></literal> <operator pos:line="41" pos:column="29">&amp;&amp;<pos:position pos:line="41" pos:column="39"/></operator> <name pos:line="41" pos:column="32">i<pos:position pos:line="41" pos:column="33"/></name> <operator pos:line="41" pos:column="34">&lt;<pos:position pos:line="41" pos:column="38"/></operator> <name pos:line="41" pos:column="36">to_spawn<pos:position pos:line="41" pos:column="44"/></name></expr>;<pos:position pos:line="41" pos:column="45"/></condition> <incr><expr><name pos:line="41" pos:column="46">i<pos:position pos:line="41" pos:column="47"/></name><operator pos:line="41" pos:column="47">++<pos:position pos:line="41" pos:column="49"/></operator></expr></incr>)<pos:position pos:line="41" pos:column="50"/></control> <block pos:line="41" pos:column="51">{
            <expr_stmt><expr><name pos:line="42" pos:column="13">rv<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">=<pos:position pos:line="42" pos:column="17"/></operator> <call><name pos:line="42" pos:column="18">simple_spawn_child<pos:position pos:line="42" pos:column="36"/></name><argument_list pos:line="42" pos:column="36">(<argument><expr><name pos:line="42" pos:column="37">sc<pos:position pos:line="42" pos:column="39"/></name></expr></argument>)<pos:position pos:line="42" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="43" pos:column="10"/></block></for>
    }<pos:position pos:line="44" pos:column="6"/></block></then></if></elseif>
    <else pos:line="45" pos:column="5">else <block pos:line="45" pos:column="10">{
        <comment type="block" pos:line="46" pos:column="9">/* juuuuust right. */</comment>
    }<pos:position pos:line="47" pos:column="6"/></block></else></if>
}<pos:position pos:line="48" pos:column="2"/></block></function></unit>
