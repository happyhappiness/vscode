<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3171_httpd-2.2.22.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">XML_Error<pos:position pos:line="1" pos:column="22"/></name></name> <name pos:line="1" pos:column="23">PTRCALL<pos:position pos:line="1" pos:column="30"/></name></type>
<name pos:line="2" pos:column="1">entityValueInitProcessor<pos:position pos:line="2" pos:column="25"/></name><parameter_list pos:line="2" pos:column="25">(<parameter><decl><type><name pos:line="2" pos:column="26">XML_Parser<pos:position pos:line="2" pos:column="36"/></name></type> <name pos:line="2" pos:column="37">parser<pos:position pos:line="2" pos:column="43"/></name></decl></parameter>,
                         <parameter><decl><type><specifier pos:line="3" pos:column="26">const<pos:position pos:line="3" pos:column="31"/></specifier> <name pos:line="3" pos:column="32">char<pos:position pos:line="3" pos:column="36"/></name> <modifier pos:line="3" pos:column="37">*<pos:position pos:line="3" pos:column="38"/></modifier></type><name pos:line="3" pos:column="38">s<pos:position pos:line="3" pos:column="39"/></name></decl></parameter>,
                         <parameter><decl><type><specifier pos:line="4" pos:column="26">const<pos:position pos:line="4" pos:column="31"/></specifier> <name pos:line="4" pos:column="32">char<pos:position pos:line="4" pos:column="36"/></name> <modifier pos:line="4" pos:column="37">*<pos:position pos:line="4" pos:column="38"/></modifier></type><name pos:line="4" pos:column="38">end<pos:position pos:line="4" pos:column="41"/></name></decl></parameter>,
                         <parameter><decl><type><specifier pos:line="5" pos:column="26">const<pos:position pos:line="5" pos:column="31"/></specifier> <name pos:line="5" pos:column="32">char<pos:position pos:line="5" pos:column="36"/></name> <modifier pos:line="5" pos:column="37">*<pos:position pos:line="5" pos:column="38"/></modifier><modifier pos:line="5" pos:column="38">*<pos:position pos:line="5" pos:column="39"/></modifier></type><name pos:line="5" pos:column="39">nextPtr<pos:position pos:line="5" pos:column="46"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="47"/></parameter_list>
<block pos:line="6" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="7" pos:column="3">const<pos:position pos:line="7" pos:column="8"/></specifier> <name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">start<pos:position pos:line="7" pos:column="20"/></name> <init pos:line="7" pos:column="21">= <expr><name pos:line="7" pos:column="23">s<pos:position pos:line="7" pos:column="24"/></name></expr></init></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
  <decl_stmt><decl><type><specifier pos:line="8" pos:column="3">const<pos:position pos:line="8" pos:column="8"/></specifier> <name pos:line="8" pos:column="9">char<pos:position pos:line="8" pos:column="13"/></name> <modifier pos:line="8" pos:column="14">*<pos:position pos:line="8" pos:column="15"/></modifier></type><name pos:line="8" pos:column="15">next<pos:position pos:line="8" pos:column="19"/></name> <init pos:line="8" pos:column="20">= <expr><name pos:line="8" pos:column="22">s<pos:position pos:line="8" pos:column="23"/></name></expr></init></decl>;<pos:position pos:line="8" pos:column="24"/></decl_stmt>
  <decl_stmt><decl><type><name pos:line="9" pos:column="3">int<pos:position pos:line="9" pos:column="6"/></name></type> <name pos:line="9" pos:column="7">tok<pos:position pos:line="9" pos:column="10"/></name></decl>;<pos:position pos:line="9" pos:column="11"/></decl_stmt>

  <for pos:line="11" pos:column="3">for <control pos:line="11" pos:column="7">(<init pos:line="11" pos:column="8">;<pos:position pos:line="11" pos:column="9"/></init><condition pos:line="11" pos:column="9">;<pos:position pos:line="11" pos:column="10"/></condition><incr/>)<pos:position pos:line="11" pos:column="11"/></control> <block pos:line="11" pos:column="12">{
    <expr_stmt><expr><name pos:line="12" pos:column="5">tok<pos:position pos:line="12" pos:column="8"/></name> <operator pos:line="12" pos:column="9">=<pos:position pos:line="12" pos:column="10"/></operator> <call><name pos:line="12" pos:column="11">XmlPrologTok<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">encoding<pos:position pos:line="12" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="34">start<pos:position pos:line="12" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="12" pos:column="41">end<pos:position pos:line="12" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="12" pos:column="46">&amp;<pos:position pos:line="12" pos:column="51"/></operator><name pos:line="12" pos:column="47">next<pos:position pos:line="12" pos:column="51"/></name></expr></argument>)<pos:position pos:line="12" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="53"/></expr_stmt>
    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name pos:line="13" pos:column="9">tok<pos:position pos:line="13" pos:column="12"/></name> <operator pos:line="13" pos:column="13">&lt;=<pos:position pos:line="13" pos:column="18"/></operator> <literal type="number" pos:line="13" pos:column="16">0<pos:position pos:line="13" pos:column="17"/></literal></expr>)<pos:position pos:line="13" pos:column="18"/></condition><then pos:line="13" pos:column="18"> <block pos:line="13" pos:column="19">{
      <if pos:line="14" pos:column="7">if <condition pos:line="14" pos:column="10">(<expr><name pos:line="14" pos:column="11">nextPtr<pos:position pos:line="14" pos:column="18"/></name> <operator pos:line="14" pos:column="19">!=<pos:position pos:line="14" pos:column="21"/></operator> <literal type="number" pos:line="14" pos:column="22">0<pos:position pos:line="14" pos:column="23"/></literal> <operator pos:line="14" pos:column="24">&amp;&amp;<pos:position pos:line="14" pos:column="34"/></operator> <name pos:line="14" pos:column="27">tok<pos:position pos:line="14" pos:column="30"/></name> <operator pos:line="14" pos:column="31">!=<pos:position pos:line="14" pos:column="33"/></operator> <name pos:line="14" pos:column="34">XML_TOK_INVALID<pos:position pos:line="14" pos:column="49"/></name></expr>)<pos:position pos:line="14" pos:column="50"/></condition><then pos:line="14" pos:column="50"> <block pos:line="14" pos:column="51">{
              <expr_stmt><expr><operator pos:line="15" pos:column="15">*<pos:position pos:line="15" pos:column="16"/></operator><name pos:line="15" pos:column="16">nextPtr<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">=<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">s<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
              <return pos:line="16" pos:column="15">return <expr><name pos:line="16" pos:column="22">XML_ERROR_NONE<pos:position pos:line="16" pos:column="36"/></name></expr>;<pos:position pos:line="16" pos:column="37"/></return>
      }<pos:position pos:line="17" pos:column="8"/></block></then></if>
      <switch pos:line="18" pos:column="7">switch <condition pos:line="18" pos:column="14">(<expr><name pos:line="18" pos:column="15">tok<pos:position pos:line="18" pos:column="18"/></name></expr>)<pos:position pos:line="18" pos:column="19"/></condition> <block pos:line="18" pos:column="20">{
      <case pos:line="19" pos:column="7">case <expr><name pos:line="19" pos:column="12">XML_TOK_INVALID<pos:position pos:line="19" pos:column="27"/></name></expr>:<pos:position pos:line="19" pos:column="28"/></case>
              <return pos:line="20" pos:column="15">return <expr><name pos:line="20" pos:column="22">XML_ERROR_INVALID_TOKEN<pos:position pos:line="20" pos:column="45"/></name></expr>;<pos:position pos:line="20" pos:column="46"/></return>
      <case pos:line="21" pos:column="7">case <expr><name pos:line="21" pos:column="12">XML_TOK_PARTIAL<pos:position pos:line="21" pos:column="27"/></name></expr>:<pos:position pos:line="21" pos:column="28"/></case>
              <return pos:line="22" pos:column="15">return <expr><name pos:line="22" pos:column="22">XML_ERROR_UNCLOSED_TOKEN<pos:position pos:line="22" pos:column="46"/></name></expr>;<pos:position pos:line="22" pos:column="47"/></return>
      <case pos:line="23" pos:column="7">case <expr><name pos:line="23" pos:column="12">XML_TOK_PARTIAL_CHAR<pos:position pos:line="23" pos:column="32"/></name></expr>:<pos:position pos:line="23" pos:column="33"/></case>
              <return pos:line="24" pos:column="15">return <expr><name pos:line="24" pos:column="22">XML_ERROR_PARTIAL_CHAR<pos:position pos:line="24" pos:column="44"/></name></expr>;<pos:position pos:line="24" pos:column="45"/></return>
      <case pos:line="25" pos:column="7">case <expr><name pos:line="25" pos:column="12">XML_TOK_NONE<pos:position pos:line="25" pos:column="24"/></name></expr>:<pos:position pos:line="25" pos:column="25"/></case>   <comment type="block" pos:line="25" pos:column="28">/* start == end */</comment>
      <default pos:line="26" pos:column="7">default:<pos:position pos:line="26" pos:column="15"/></default>
        <break pos:line="27" pos:column="9">break;<pos:position pos:line="27" pos:column="15"/></break>
      }<pos:position pos:line="28" pos:column="8"/></block></switch>
      <return pos:line="29" pos:column="7">return <expr><call><name pos:line="29" pos:column="14">storeEntityValue<pos:position pos:line="29" pos:column="30"/></name><argument_list pos:line="29" pos:column="30">(<argument><expr><name pos:line="29" pos:column="31">parser<pos:position pos:line="29" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="39">encoding<pos:position pos:line="29" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="49">s<pos:position pos:line="29" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="29" pos:column="52">end<pos:position pos:line="29" pos:column="55"/></name></expr></argument>)<pos:position pos:line="29" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="29" pos:column="57"/></return>
    }<pos:position pos:line="30" pos:column="6"/></block></then>
    <elseif pos:line="31" pos:column="5">else <if pos:line="31" pos:column="10">if <condition pos:line="31" pos:column="13">(<expr><name pos:line="31" pos:column="14">tok<pos:position pos:line="31" pos:column="17"/></name> <operator pos:line="31" pos:column="18">==<pos:position pos:line="31" pos:column="20"/></operator> <name pos:line="31" pos:column="21">XML_TOK_XML_DECL<pos:position pos:line="31" pos:column="37"/></name></expr>)<pos:position pos:line="31" pos:column="38"/></condition><then pos:line="31" pos:column="38"> <block pos:line="31" pos:column="39">{
      <decl_stmt><decl><type><name><name pos:line="32" pos:column="7">enum<pos:position pos:line="32" pos:column="11"/></name> <name pos:line="32" pos:column="12">XML_Error<pos:position pos:line="32" pos:column="21"/></name></name></type> <name pos:line="32" pos:column="22">result<pos:position pos:line="32" pos:column="28"/></name> <init pos:line="32" pos:column="29">= <expr><call><name pos:line="32" pos:column="31">processXmlDecl<pos:position pos:line="32" pos:column="45"/></name><argument_list pos:line="32" pos:column="45">(<argument><expr><name pos:line="32" pos:column="46">parser<pos:position pos:line="32" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="32" pos:column="54">0<pos:position pos:line="32" pos:column="55"/></literal></expr></argument>, <argument><expr><name pos:line="32" pos:column="57">start<pos:position pos:line="32" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="32" pos:column="64">next<pos:position pos:line="32" pos:column="68"/></name></expr></argument>)<pos:position pos:line="32" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="32" pos:column="70"/></decl_stmt>
            <if pos:line="33" pos:column="13">if <condition pos:line="33" pos:column="16">(<expr><name pos:line="33" pos:column="17">result<pos:position pos:line="33" pos:column="23"/></name> <operator pos:line="33" pos:column="24">!=<pos:position pos:line="33" pos:column="26"/></operator> <name pos:line="33" pos:column="27">XML_ERROR_NONE<pos:position pos:line="33" pos:column="41"/></name></expr>)<pos:position pos:line="33" pos:column="42"/></condition><then pos:line="33" pos:column="42">
              <block type="pseudo"><return pos:line="34" pos:column="15">return <expr><name pos:line="34" pos:column="22">result<pos:position pos:line="34" pos:column="28"/></name></expr>;<pos:position pos:line="34" pos:column="29"/></return></block></then></if>
      <if pos:line="35" pos:column="7">if <condition pos:line="35" pos:column="10">(<expr><name pos:line="35" pos:column="11">nextPtr<pos:position pos:line="35" pos:column="18"/></name></expr>)<pos:position pos:line="35" pos:column="19"/></condition><then pos:line="35" pos:column="19"> <block type="pseudo"><expr_stmt><expr><operator pos:line="35" pos:column="20">*<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="21">nextPtr<pos:position pos:line="35" pos:column="28"/></name> <operator pos:line="35" pos:column="29">=<pos:position pos:line="35" pos:column="30"/></operator> <name pos:line="35" pos:column="31">next<pos:position pos:line="35" pos:column="35"/></name></expr>;<pos:position pos:line="35" pos:column="36"/></expr_stmt></block></then></if>
      <comment type="block" pos:line="36" pos:column="7">/* stop scanning for text declaration - we found one */</comment>
      <expr_stmt><expr><name pos:line="37" pos:column="7">processor<pos:position pos:line="37" pos:column="16"/></name> <operator pos:line="37" pos:column="17">=<pos:position pos:line="37" pos:column="18"/></operator> <name pos:line="37" pos:column="19">entityValueProcessor<pos:position pos:line="37" pos:column="39"/></name></expr>;<pos:position pos:line="37" pos:column="40"/></expr_stmt>
      <return pos:line="38" pos:column="7">return <expr><call><name pos:line="38" pos:column="14">entityValueProcessor<pos:position pos:line="38" pos:column="34"/></name><argument_list pos:line="38" pos:column="34">(<argument><expr><name pos:line="38" pos:column="35">parser<pos:position pos:line="38" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="43">next<pos:position pos:line="38" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="49">end<pos:position pos:line="38" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="54">nextPtr<pos:position pos:line="38" pos:column="61"/></name></expr></argument>)<pos:position pos:line="38" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="63"/></return>
    }<pos:position pos:line="39" pos:column="6"/></block></then></if></elseif>
    <comment type="block" pos:line="40" pos:column="5">/* If we are at the end of the buffer, this would cause XmlPrologTok to
       return XML_TOK_NONE on the next call, which would then cause the
       function to exit with *nextPtr set to s - that is what we want for other
       tokens, but not for the BOM - we would rather like to skip it;
       then, when this routine is entered the next time, XmlPrologTok will
       return XML_TOK_INVALID, since the BOM is still in the buffer
    */</comment>
    <elseif pos:line="47" pos:column="5">else <if pos:line="47" pos:column="10">if <condition pos:line="47" pos:column="13">(<expr><name pos:line="47" pos:column="14">tok<pos:position pos:line="47" pos:column="17"/></name> <operator pos:line="47" pos:column="18">==<pos:position pos:line="47" pos:column="20"/></operator> <name pos:line="47" pos:column="21">XML_TOK_BOM<pos:position pos:line="47" pos:column="32"/></name> <operator pos:line="47" pos:column="33">&amp;&amp;<pos:position pos:line="47" pos:column="43"/></operator> <name pos:line="47" pos:column="36">next<pos:position pos:line="47" pos:column="40"/></name> <operator pos:line="47" pos:column="41">==<pos:position pos:line="47" pos:column="43"/></operator> <name pos:line="47" pos:column="44">end<pos:position pos:line="47" pos:column="47"/></name> <operator pos:line="47" pos:column="48">&amp;&amp;<pos:position pos:line="47" pos:column="58"/></operator> <name pos:line="47" pos:column="51">nextPtr<pos:position pos:line="47" pos:column="58"/></name></expr>)<pos:position pos:line="47" pos:column="59"/></condition><then pos:line="47" pos:column="59"> <block pos:line="47" pos:column="60">{
      <expr_stmt><expr><operator pos:line="48" pos:column="7">*<pos:position pos:line="48" pos:column="8"/></operator><name pos:line="48" pos:column="8">nextPtr<pos:position pos:line="48" pos:column="15"/></name> <operator pos:line="48" pos:column="16">=<pos:position pos:line="48" pos:column="17"/></operator> <name pos:line="48" pos:column="18">next<pos:position pos:line="48" pos:column="22"/></name></expr>;<pos:position pos:line="48" pos:column="23"/></expr_stmt>
      <return pos:line="49" pos:column="7">return <expr><name pos:line="49" pos:column="14">XML_ERROR_NONE<pos:position pos:line="49" pos:column="28"/></name></expr>;<pos:position pos:line="49" pos:column="29"/></return>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if></elseif></if>
    <expr_stmt><expr><name pos:line="51" pos:column="5">start<pos:position pos:line="51" pos:column="10"/></name> <operator pos:line="51" pos:column="11">=<pos:position pos:line="51" pos:column="12"/></operator> <name pos:line="51" pos:column="13">next<pos:position pos:line="51" pos:column="17"/></name></expr>;<pos:position pos:line="51" pos:column="18"/></expr_stmt>
  }<pos:position pos:line="52" pos:column="4"/></block></for>
}<pos:position pos:line="53" pos:column="2"/></block></function></unit>
