<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3851_httpd-2.2.15.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">call_resolver<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">apr_sockaddr_t<pos:position pos:line="1" pos:column="49"/></name> <modifier pos:line="1" pos:column="50">*<pos:position pos:line="1" pos:column="51"/></modifier><modifier pos:line="1" pos:column="51">*<pos:position pos:line="1" pos:column="52"/></modifier></type><name pos:line="1" pos:column="52">sa<pos:position pos:line="1" pos:column="54"/></name></decl></parameter>,
                                  <parameter><decl><type><specifier pos:line="2" pos:column="35">const<pos:position pos:line="2" pos:column="40"/></specifier> <name pos:line="2" pos:column="41">char<pos:position pos:line="2" pos:column="45"/></name> <modifier pos:line="2" pos:column="46">*<pos:position pos:line="2" pos:column="47"/></modifier></type><name pos:line="2" pos:column="47">hostname<pos:position pos:line="2" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="57">apr_int32_t<pos:position pos:line="2" pos:column="68"/></name></type> <name pos:line="2" pos:column="69">family<pos:position pos:line="2" pos:column="75"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="3" pos:column="35">apr_port_t<pos:position pos:line="3" pos:column="45"/></name></type> <name pos:line="3" pos:column="46">port<pos:position pos:line="3" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="52">apr_int32_t<pos:position pos:line="3" pos:column="63"/></name></type> <name pos:line="3" pos:column="64">flags<pos:position pos:line="3" pos:column="69"/></name></decl></parameter>, 
                                  <parameter><decl><type><name pos:line="4" pos:column="35">apr_pool_t<pos:position pos:line="4" pos:column="45"/></name> <modifier pos:line="4" pos:column="46">*<pos:position pos:line="4" pos:column="47"/></modifier></type><name pos:line="4" pos:column="47">p<pos:position pos:line="4" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="4" pos:column="49"/></parameter_list>
<block pos:line="5" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">struct<pos:position pos:line="6" pos:column="11"/></name> <name pos:line="6" pos:column="12">addrinfo<pos:position pos:line="6" pos:column="20"/></name></name></type> <name pos:line="6" pos:column="21">hints<pos:position pos:line="6" pos:column="26"/></name></decl>, <modifier pos:line="6" pos:column="28">*<pos:position pos:line="6" pos:column="29"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="29">ai<pos:position pos:line="6" pos:column="31"/></name></decl>, <modifier pos:line="6" pos:column="33">*<pos:position pos:line="6" pos:column="34"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="34">ai_list<pos:position pos:line="6" pos:column="41"/></name></decl>;<pos:position pos:line="6" pos:column="42"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_sockaddr_t<pos:position pos:line="7" pos:column="19"/></name> <modifier pos:line="7" pos:column="20">*<pos:position pos:line="7" pos:column="21"/></modifier></type><name pos:line="7" pos:column="21">prev_sa<pos:position pos:line="7" pos:column="28"/></name></decl>;<pos:position pos:line="7" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">error<pos:position pos:line="8" pos:column="14"/></name></decl>;<pos:position pos:line="8" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">char<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">servname<pos:position pos:line="9" pos:column="19"/></name> <init pos:line="9" pos:column="20">= <expr><name pos:line="9" pos:column="22">NULL<pos:position pos:line="9" pos:column="26"/></name></expr></init></decl>;<pos:position pos:line="9" pos:column="27"/></decl_stmt> 

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">memset<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><operator pos:line="11" pos:column="12">&amp;<pos:position pos:line="11" pos:column="17"/></operator><name pos:line="11" pos:column="13">hints<pos:position pos:line="11" pos:column="18"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="11" pos:column="20">0<pos:position pos:line="11" pos:column="21"/></literal></expr></argument>, <argument><expr><sizeof pos:line="11" pos:column="23">sizeof<argument_list pos:line="11" pos:column="29">(<argument><expr><name pos:line="11" pos:column="30">hints<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="11" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="12" pos:column="5">hints<pos:position pos:line="12" pos:column="10"/></name><operator pos:line="12" pos:column="10">.<pos:position pos:line="12" pos:column="11"/></operator><name pos:line="12" pos:column="11">ai_family<pos:position pos:line="12" pos:column="20"/></name></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <name pos:line="12" pos:column="23">family<pos:position pos:line="12" pos:column="29"/></name></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="13" pos:column="5">hints<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">.<pos:position pos:line="13" pos:column="11"/></operator><name pos:line="13" pos:column="11">ai_socktype<pos:position pos:line="13" pos:column="22"/></name></name> <operator pos:line="13" pos:column="23">=<pos:position pos:line="13" pos:column="24"/></operator> <name pos:line="13" pos:column="25">SOCK_STREAM<pos:position pos:line="13" pos:column="36"/></name></expr>;<pos:position pos:line="13" pos:column="37"/></expr_stmt>
<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">HAVE_GAI_ADDRCONFIG<pos:position pos:line="14" pos:column="27"/></name></cpp:ifdef>
    <if pos:line="15" pos:column="5">if <condition pos:line="15" pos:column="8">(<expr><name pos:line="15" pos:column="9">family<pos:position pos:line="15" pos:column="15"/></name> <operator pos:line="15" pos:column="16">==<pos:position pos:line="15" pos:column="18"/></operator> <name pos:line="15" pos:column="19">APR_UNSPEC<pos:position pos:line="15" pos:column="29"/></name></expr>)<pos:position pos:line="15" pos:column="30"/></condition><then pos:line="15" pos:column="30"> <block pos:line="15" pos:column="31">{
        <comment type="block" pos:line="16" pos:column="9">/* By default, only look up addresses using address types for
         * which a local interface is configured, i.e. no IPv6 if no
         * IPv6 interfaces configured. */</comment>
        <expr_stmt><expr><name><name pos:line="19" pos:column="9">hints<pos:position pos:line="19" pos:column="14"/></name><operator pos:line="19" pos:column="14">.<pos:position pos:line="19" pos:column="15"/></operator><name pos:line="19" pos:column="15">ai_flags<pos:position pos:line="19" pos:column="23"/></name></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name pos:line="19" pos:column="26">AI_ADDRCONFIG<pos:position pos:line="19" pos:column="39"/></name></expr>;<pos:position pos:line="19" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="20" pos:column="6"/></block></then></if>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="22" pos:column="5">if<condition pos:line="22" pos:column="7">(<expr><name pos:line="22" pos:column="8">hostname<pos:position pos:line="22" pos:column="16"/></name> <operator pos:line="22" pos:column="17">==<pos:position pos:line="22" pos:column="19"/></operator> <name pos:line="22" pos:column="20">NULL<pos:position pos:line="22" pos:column="24"/></name></expr>)<pos:position pos:line="22" pos:column="25"/></condition><then pos:line="22" pos:column="25"> <block pos:line="22" pos:column="26">{
<cpp:ifdef pos:line="23" pos:column="1">#<cpp:directive pos:line="23" pos:column="2">ifdef<pos:position pos:line="23" pos:column="7"/></cpp:directive> <name pos:line="23" pos:column="8">AI_PASSIVE<pos:position pos:line="23" pos:column="18"/></name></cpp:ifdef> 
        <comment type="block" pos:line="24" pos:column="9">/* If hostname is NULL, assume we are trying to bind to all
         * interfaces. */</comment>
        <expr_stmt><expr><name><name pos:line="26" pos:column="9">hints<pos:position pos:line="26" pos:column="14"/></name><operator pos:line="26" pos:column="14">.<pos:position pos:line="26" pos:column="15"/></operator><name pos:line="26" pos:column="15">ai_flags<pos:position pos:line="26" pos:column="23"/></name></name> <operator pos:line="26" pos:column="24">|=<pos:position pos:line="26" pos:column="26"/></operator> <name pos:line="26" pos:column="27">AI_PASSIVE<pos:position pos:line="26" pos:column="37"/></name></expr>;<pos:position pos:line="26" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>
        <comment type="block" pos:line="28" pos:column="9">/* getaddrinfo according to RFC 2553 must have either hostname
         * or servname non-NULL.
         */</comment>
<cpp:ifdef pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">ifdef<pos:position pos:line="31" pos:column="7"/></cpp:directive> <name pos:line="31" pos:column="8">OSF1<pos:position pos:line="31" pos:column="12"/></name></cpp:ifdef>
        <comment type="block" pos:line="32" pos:column="9">/* The Tru64 5.0 getaddrinfo() can only resolve services given
         * by the name listed in /etc/services; a numeric or unknown
         * servname gets an EAI_SERVICE error.  So just resolve the
         * appropriate anyaddr and fill in the port later. */</comment>
        <expr_stmt><expr><name pos:line="36" pos:column="9">hostname<pos:position pos:line="36" pos:column="17"/></name> <operator pos:line="36" pos:column="18">=<pos:position pos:line="36" pos:column="19"/></operator> <ternary><condition><expr><name pos:line="36" pos:column="20">family<pos:position pos:line="36" pos:column="26"/></name> <operator pos:line="36" pos:column="27">==<pos:position pos:line="36" pos:column="29"/></operator> <name pos:line="36" pos:column="30">AF_INET6<pos:position pos:line="36" pos:column="38"/></name></expr> ?<pos:position pos:line="36" pos:column="40"/></condition><then pos:line="36" pos:column="40"> <expr><literal type="string" pos:line="36" pos:column="41">"::"<pos:position pos:line="36" pos:column="45"/></literal></expr> <pos:position pos:line="36" pos:column="46"/></then><else pos:line="36" pos:column="46">: <expr><literal type="string" pos:line="36" pos:column="48">"0.0.0.0"<pos:position pos:line="36" pos:column="57"/></literal></expr></else></ternary></expr>;<pos:position pos:line="36" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><name pos:line="37" pos:column="9">servname<pos:position pos:line="37" pos:column="17"/></name> <operator pos:line="37" pos:column="18">=<pos:position pos:line="37" pos:column="19"/></operator> <name pos:line="37" pos:column="20">NULL<pos:position pos:line="37" pos:column="24"/></name></expr>;<pos:position pos:line="37" pos:column="25"/></expr_stmt>
<cpp:ifdef pos:line="38" pos:column="1">#<cpp:directive pos:line="38" pos:column="2">ifdef<pos:position pos:line="38" pos:column="7"/></cpp:directive> <name pos:line="38" pos:column="8">AI_NUMERICHOST<pos:position pos:line="38" pos:column="22"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="39" pos:column="9">hints<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">.<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="15">ai_flags<pos:position pos:line="39" pos:column="23"/></name></name> <operator pos:line="39" pos:column="24">|=<pos:position pos:line="39" pos:column="26"/></operator> <name pos:line="39" pos:column="27">AI_NUMERICHOST<pos:position pos:line="39" pos:column="41"/></name></expr>;<pos:position pos:line="39" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="40" pos:column="1">#<cpp:directive pos:line="40" pos:column="2">endif<pos:position pos:line="40" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:else pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">else<pos:position pos:line="41" pos:column="6"/></cpp:directive></cpp:else>
<cpp:ifdef pos:line="42" pos:column="1">#<cpp:directive pos:line="42" pos:column="2">ifdef<pos:position pos:line="42" pos:column="7"/></cpp:directive> <name pos:line="42" pos:column="8">_AIX<pos:position pos:line="42" pos:column="12"/></name></cpp:ifdef>
        <comment type="block" pos:line="43" pos:column="9">/* But current AIX getaddrinfo() doesn't like servname = "0";
         * the "1" won't hurt since we use the port parameter to fill
         * in the returned socket addresses later
         */</comment>
        <if pos:line="47" pos:column="9">if <condition pos:line="47" pos:column="12">(<expr><operator pos:line="47" pos:column="13">!<pos:position pos:line="47" pos:column="14"/></operator><name pos:line="47" pos:column="14">port<pos:position pos:line="47" pos:column="18"/></name></expr>)<pos:position pos:line="47" pos:column="19"/></condition><then pos:line="47" pos:column="19"> <block pos:line="47" pos:column="20">{
            <expr_stmt><expr><name pos:line="48" pos:column="13">servname<pos:position pos:line="48" pos:column="21"/></name> <operator pos:line="48" pos:column="22">=<pos:position pos:line="48" pos:column="23"/></operator> <literal type="string" pos:line="48" pos:column="24">"1"<pos:position pos:line="48" pos:column="27"/></literal></expr>;<pos:position pos:line="48" pos:column="28"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></then>
        <else pos:line="50" pos:column="9">else
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="51" pos:column="8">/* _AIX */</comment>
        <block type="pseudo"><expr_stmt><expr><name pos:line="52" pos:column="9">servname<pos:position pos:line="52" pos:column="17"/></name> <operator pos:line="52" pos:column="18">=<pos:position pos:line="52" pos:column="19"/></operator> <call><name pos:line="52" pos:column="20">apr_itoa<pos:position pos:line="52" pos:column="28"/></name><argument_list pos:line="52" pos:column="28">(<argument><expr><name pos:line="52" pos:column="29">p<pos:position pos:line="52" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="32">port<pos:position pos:line="52" pos:column="36"/></name></expr></argument>)<pos:position pos:line="52" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="38"/></expr_stmt></block></else></if>
<cpp:endif pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">endif<pos:position pos:line="53" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="53" pos:column="8">/* OSF1 */</comment>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="55" pos:column="5">error<pos:position pos:line="55" pos:column="10"/></name> <operator pos:line="55" pos:column="11">=<pos:position pos:line="55" pos:column="12"/></operator> <call><name pos:line="55" pos:column="13">getaddrinfo<pos:position pos:line="55" pos:column="24"/></name><argument_list pos:line="55" pos:column="24">(<argument><expr><name pos:line="55" pos:column="25">hostname<pos:position pos:line="55" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="35">servname<pos:position pos:line="55" pos:column="43"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="45">&amp;<pos:position pos:line="55" pos:column="50"/></operator><name pos:line="55" pos:column="46">hints<pos:position pos:line="55" pos:column="51"/></name></expr></argument>, <argument><expr><operator pos:line="55" pos:column="53">&amp;<pos:position pos:line="55" pos:column="58"/></operator><name pos:line="55" pos:column="54">ai_list<pos:position pos:line="55" pos:column="61"/></name></expr></argument>)<pos:position pos:line="55" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="63"/></expr_stmt>
<cpp:ifdef pos:line="56" pos:column="1">#<cpp:directive pos:line="56" pos:column="2">ifdef<pos:position pos:line="56" pos:column="7"/></cpp:directive> <name pos:line="56" pos:column="8">HAVE_GAI_ADDRCONFIG<pos:position pos:line="56" pos:column="27"/></name></cpp:ifdef>
    <if pos:line="57" pos:column="5">if <condition pos:line="57" pos:column="8">(<expr><name pos:line="57" pos:column="9">error<pos:position pos:line="57" pos:column="14"/></name> <operator pos:line="57" pos:column="15">==<pos:position pos:line="57" pos:column="17"/></operator> <name pos:line="57" pos:column="18">EAI_BADFLAGS<pos:position pos:line="57" pos:column="30"/></name> <operator pos:line="57" pos:column="31">&amp;&amp;<pos:position pos:line="57" pos:column="41"/></operator> <name pos:line="57" pos:column="34">family<pos:position pos:line="57" pos:column="40"/></name> <operator pos:line="57" pos:column="41">==<pos:position pos:line="57" pos:column="43"/></operator> <name pos:line="57" pos:column="44">APR_UNSPEC<pos:position pos:line="57" pos:column="54"/></name></expr>)<pos:position pos:line="57" pos:column="55"/></condition><then pos:line="57" pos:column="55"> <block pos:line="57" pos:column="56">{
        <comment type="block" pos:line="58" pos:column="9">/* Retry with no flags if AI_ADDRCONFIG was rejected. */</comment>
        <expr_stmt><expr><name><name pos:line="59" pos:column="9">hints<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">.<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="15">ai_flags<pos:position pos:line="59" pos:column="23"/></name></name> <operator pos:line="59" pos:column="24">=<pos:position pos:line="59" pos:column="25"/></operator> <literal type="number" pos:line="59" pos:column="26">0<pos:position pos:line="59" pos:column="27"/></literal></expr>;<pos:position pos:line="59" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name pos:line="60" pos:column="9">error<pos:position pos:line="60" pos:column="14"/></name> <operator pos:line="60" pos:column="15">=<pos:position pos:line="60" pos:column="16"/></operator> <call><name pos:line="60" pos:column="17">getaddrinfo<pos:position pos:line="60" pos:column="28"/></name><argument_list pos:line="60" pos:column="28">(<argument><expr><name pos:line="60" pos:column="29">hostname<pos:position pos:line="60" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="39">servname<pos:position pos:line="60" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="49">&amp;<pos:position pos:line="60" pos:column="54"/></operator><name pos:line="60" pos:column="50">hints<pos:position pos:line="60" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="60" pos:column="57">&amp;<pos:position pos:line="60" pos:column="62"/></operator><name pos:line="60" pos:column="58">ai_list<pos:position pos:line="60" pos:column="65"/></name></expr></argument>)<pos:position pos:line="60" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="60" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>
<cpp:endif pos:line="62" pos:column="1">#<cpp:directive pos:line="62" pos:column="2">endif<pos:position pos:line="62" pos:column="7"/></cpp:directive></cpp:endif>
    <if pos:line="63" pos:column="5">if <condition pos:line="63" pos:column="8">(<expr><name pos:line="63" pos:column="9">error<pos:position pos:line="63" pos:column="14"/></name></expr>)<pos:position pos:line="63" pos:column="15"/></condition><then pos:line="63" pos:column="15"> <block pos:line="63" pos:column="16">{
<cpp:ifndef pos:line="64" pos:column="1">#<cpp:directive pos:line="64" pos:column="2">ifndef<pos:position pos:line="64" pos:column="8"/></cpp:directive> <name pos:line="64" pos:column="9">WIN32<pos:position pos:line="64" pos:column="14"/></name></cpp:ifndef>
        <if pos:line="65" pos:column="9">if <condition pos:line="65" pos:column="12">(<expr><name pos:line="65" pos:column="13">error<pos:position pos:line="65" pos:column="18"/></name> <operator pos:line="65" pos:column="19">==<pos:position pos:line="65" pos:column="21"/></operator> <name pos:line="65" pos:column="22">EAI_SYSTEM<pos:position pos:line="65" pos:column="32"/></name></expr>)<pos:position pos:line="65" pos:column="33"/></condition><then pos:line="65" pos:column="33"> <block pos:line="65" pos:column="34">{
            <return pos:line="66" pos:column="13">return <expr><name pos:line="66" pos:column="20">errno<pos:position pos:line="66" pos:column="25"/></name></expr>;<pos:position pos:line="66" pos:column="26"/></return>
        }<pos:position pos:line="67" pos:column="10"/></block></then>
        <else pos:line="68" pos:column="9">else 
<cpp:endif pos:line="69" pos:column="1">#<cpp:directive pos:line="69" pos:column="2">endif<pos:position pos:line="69" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="70" pos:column="9">{
            <comment type="block" pos:line="71" pos:column="13">/* issues with representing this with APR's error scheme:
             * glibc uses negative values for these numbers, perhaps so 
             * they don't conflict with h_errno values...  Tru64 uses 
             * positive values which conflict with h_errno values
             */</comment>
<cpp:if pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">if<pos:position pos:line="76" pos:column="4"/></cpp:directive> <expr><call><name pos:line="76" pos:column="5">defined<pos:position pos:line="76" pos:column="12"/></name><argument_list pos:line="76" pos:column="12">(<argument><expr><name pos:line="76" pos:column="13">NEGATIVE_EAI<pos:position pos:line="76" pos:column="25"/></name></expr></argument>)<pos:position pos:line="76" pos:column="26"/></argument_list></call></expr></cpp:if>
            <expr_stmt><expr><name pos:line="77" pos:column="13">error<pos:position pos:line="77" pos:column="18"/></name> <operator pos:line="77" pos:column="19">=<pos:position pos:line="77" pos:column="20"/></operator> <operator pos:line="77" pos:column="21">-<pos:position pos:line="77" pos:column="22"/></operator><name pos:line="77" pos:column="22">error<pos:position pos:line="77" pos:column="27"/></name></expr>;<pos:position pos:line="77" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">endif<pos:position pos:line="78" pos:column="7"/></cpp:directive></cpp:endif>
            <return pos:line="79" pos:column="13">return <expr><name pos:line="79" pos:column="20">error<pos:position pos:line="79" pos:column="25"/></name> <operator pos:line="79" pos:column="26">+<pos:position pos:line="79" pos:column="27"/></operator> <name pos:line="79" pos:column="28">APR_OS_START_EAIERR<pos:position pos:line="79" pos:column="47"/></name></expr>;<pos:position pos:line="79" pos:column="48"/></return>
        }<pos:position pos:line="80" pos:column="10"/></block></else></if>
    }<pos:position pos:line="81" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="83" pos:column="5">prev_sa<pos:position pos:line="83" pos:column="12"/></name> <operator pos:line="83" pos:column="13">=<pos:position pos:line="83" pos:column="14"/></operator> <name pos:line="83" pos:column="15">NULL<pos:position pos:line="83" pos:column="19"/></name></expr>;<pos:position pos:line="83" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="84" pos:column="5">ai<pos:position pos:line="84" pos:column="7"/></name> <operator pos:line="84" pos:column="8">=<pos:position pos:line="84" pos:column="9"/></operator> <name pos:line="84" pos:column="10">ai_list<pos:position pos:line="84" pos:column="17"/></name></expr>;<pos:position pos:line="84" pos:column="18"/></expr_stmt>
    <while pos:line="85" pos:column="5">while <condition pos:line="85" pos:column="11">(<expr><name pos:line="85" pos:column="12">ai<pos:position pos:line="85" pos:column="14"/></name></expr>)<pos:position pos:line="85" pos:column="15"/></condition> <block pos:line="85" pos:column="16">{ <comment type="block" pos:line="85" pos:column="18">/* while more addresses to report */</comment>
        <decl_stmt><decl><type><name pos:line="86" pos:column="9">apr_sockaddr_t<pos:position pos:line="86" pos:column="23"/></name> <modifier pos:line="86" pos:column="24">*<pos:position pos:line="86" pos:column="25"/></modifier></type><name pos:line="86" pos:column="25">new_sa<pos:position pos:line="86" pos:column="31"/></name></decl>;<pos:position pos:line="86" pos:column="32"/></decl_stmt>

        <comment type="block" pos:line="88" pos:column="9">/* Ignore anything bogus: getaddrinfo in some old versions of
         * glibc will return AF_UNIX entries for APR_UNSPEC+AI_PASSIVE
         * lookups. */</comment>
<cpp:if pos:line="91" pos:column="1">#<cpp:directive pos:line="91" pos:column="2">if<pos:position pos:line="91" pos:column="4"/></cpp:directive> <expr><name pos:line="91" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="91" pos:column="18"/></name></expr></cpp:if>
        <if pos:line="92" pos:column="9">if <condition pos:line="92" pos:column="12">(<expr><name><name pos:line="92" pos:column="13">ai<pos:position pos:line="92" pos:column="15"/></name><operator pos:line="92" pos:column="15">-&gt;<pos:position pos:line="92" pos:column="20"/></operator><name pos:line="92" pos:column="17">ai_family<pos:position pos:line="92" pos:column="26"/></name></name> <operator pos:line="92" pos:column="27">!=<pos:position pos:line="92" pos:column="29"/></operator> <name pos:line="92" pos:column="30">AF_INET<pos:position pos:line="92" pos:column="37"/></name> <operator pos:line="92" pos:column="38">&amp;&amp;<pos:position pos:line="92" pos:column="48"/></operator> <name><name pos:line="92" pos:column="41">ai<pos:position pos:line="92" pos:column="43"/></name><operator pos:line="92" pos:column="43">-&gt;<pos:position pos:line="92" pos:column="48"/></operator><name pos:line="92" pos:column="45">ai_family<pos:position pos:line="92" pos:column="54"/></name></name> <operator pos:line="92" pos:column="55">!=<pos:position pos:line="92" pos:column="57"/></operator> <name pos:line="92" pos:column="58">AF_INET6<pos:position pos:line="92" pos:column="66"/></name></expr>)<pos:position pos:line="92" pos:column="67"/></condition><then pos:line="92" pos:column="67"> <block pos:line="92" pos:column="68">{
<cpp:else pos:line="93" pos:column="1">#<cpp:directive pos:line="93" pos:column="2">else<pos:position pos:line="93" pos:column="6"/></cpp:directive></cpp:else>
        <if pos:line="94" pos:column="9">if <condition pos:line="94" pos:column="12">(<expr><name><name pos:line="94" pos:column="13">ai<pos:position pos:line="94" pos:column="15"/></name><operator pos:line="94" pos:column="15">-&gt;<pos:position pos:line="94" pos:column="20"/></operator><name pos:line="94" pos:column="17">ai_family<pos:position pos:line="94" pos:column="26"/></name></name> <operator pos:line="94" pos:column="27">!=<pos:position pos:line="94" pos:column="29"/></operator> <name pos:line="94" pos:column="30">AF_INET<pos:position pos:line="94" pos:column="37"/></name></expr>)<pos:position pos:line="94" pos:column="38"/></condition><then pos:line="94" pos:column="38"> <block pos:line="94" pos:column="39">{
<cpp:endif pos:line="95" pos:column="1">#<cpp:directive pos:line="95" pos:column="2">endif<pos:position pos:line="95" pos:column="7"/></cpp:directive></cpp:endif>
            <expr_stmt><expr><name pos:line="96" pos:column="13">ai<pos:position pos:line="96" pos:column="15"/></name> <operator pos:line="96" pos:column="16">=<pos:position pos:line="96" pos:column="17"/></operator> <name><name pos:line="96" pos:column="18">ai<pos:position pos:line="96" pos:column="20"/></name><operator pos:line="96" pos:column="20">-&gt;<pos:position pos:line="96" pos:column="25"/></operator><name pos:line="96" pos:column="22">ai_next<pos:position pos:line="96" pos:column="29"/></name></name></expr>;<pos:position pos:line="96" pos:column="30"/></expr_stmt>
            <continue pos:line="97" pos:column="13">continue;<pos:position pos:line="97" pos:column="22"/></continue>
        }<pos:position pos:line="98" pos:column="10"/></block></then></if>

        <expr_stmt><expr><name pos:line="100" pos:column="9">new_sa<pos:position pos:line="100" pos:column="15"/></name> <operator pos:line="100" pos:column="16">=<pos:position pos:line="100" pos:column="17"/></operator> <call><name pos:line="100" pos:column="18">apr_pcalloc<pos:position pos:line="100" pos:column="29"/></name><argument_list pos:line="100" pos:column="29">(<argument><expr><name pos:line="100" pos:column="30">p<pos:position pos:line="100" pos:column="31"/></name></expr></argument>, <argument><expr><sizeof pos:line="100" pos:column="33">sizeof<argument_list pos:line="100" pos:column="39">(<argument><expr><name pos:line="100" pos:column="40">apr_sockaddr_t<pos:position pos:line="100" pos:column="54"/></name></expr></argument>)<pos:position pos:line="100" pos:column="55"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="100" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="100" pos:column="57"/></expr_stmt>

        <expr_stmt><expr><name><name pos:line="102" pos:column="9">new_sa<pos:position pos:line="102" pos:column="15"/></name><operator pos:line="102" pos:column="15">-&gt;<pos:position pos:line="102" pos:column="20"/></operator><name pos:line="102" pos:column="17">pool<pos:position pos:line="102" pos:column="21"/></name></name> <operator pos:line="102" pos:column="22">=<pos:position pos:line="102" pos:column="23"/></operator> <name pos:line="102" pos:column="24">p<pos:position pos:line="102" pos:column="25"/></name></expr>;<pos:position pos:line="102" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="103" pos:column="9">memcpy<pos:position pos:line="103" pos:column="15"/></name><argument_list pos:line="103" pos:column="15">(<argument><expr><operator pos:line="103" pos:column="16">&amp;<pos:position pos:line="103" pos:column="21"/></operator><name><name pos:line="103" pos:column="17">new_sa<pos:position pos:line="103" pos:column="23"/></name><operator pos:line="103" pos:column="23">-&gt;<pos:position pos:line="103" pos:column="28"/></operator><name pos:line="103" pos:column="25">sa<pos:position pos:line="103" pos:column="27"/></name></name></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="29">ai<pos:position pos:line="103" pos:column="31"/></name><operator pos:line="103" pos:column="31">-&gt;<pos:position pos:line="103" pos:column="36"/></operator><name pos:line="103" pos:column="33">ai_addr<pos:position pos:line="103" pos:column="40"/></name></name></expr></argument>, <argument><expr><name><name pos:line="103" pos:column="42">ai<pos:position pos:line="103" pos:column="44"/></name><operator pos:line="103" pos:column="44">-&gt;<pos:position pos:line="103" pos:column="49"/></operator><name pos:line="103" pos:column="46">ai_addrlen<pos:position pos:line="103" pos:column="56"/></name></name></expr></argument>)<pos:position pos:line="103" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="58"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="104" pos:column="9">apr_sockaddr_vars_set<pos:position pos:line="104" pos:column="30"/></name><argument_list pos:line="104" pos:column="30">(<argument><expr><name pos:line="104" pos:column="31">new_sa<pos:position pos:line="104" pos:column="37"/></name></expr></argument>, <argument><expr><name><name pos:line="104" pos:column="39">ai<pos:position pos:line="104" pos:column="41"/></name><operator pos:line="104" pos:column="41">-&gt;<pos:position pos:line="104" pos:column="46"/></operator><name pos:line="104" pos:column="43">ai_family<pos:position pos:line="104" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="104" pos:column="54">port<pos:position pos:line="104" pos:column="58"/></name></expr></argument>)<pos:position pos:line="104" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="104" pos:column="60"/></expr_stmt>

        <if pos:line="106" pos:column="9">if <condition pos:line="106" pos:column="12">(<expr><operator pos:line="106" pos:column="13">!<pos:position pos:line="106" pos:column="14"/></operator><name pos:line="106" pos:column="14">prev_sa<pos:position pos:line="106" pos:column="21"/></name></expr>)<pos:position pos:line="106" pos:column="22"/></condition><then pos:line="106" pos:column="22"> <block pos:line="106" pos:column="23">{ <comment type="block" pos:line="106" pos:column="25">/* first element in new list */</comment>
            <if pos:line="107" pos:column="13">if <condition pos:line="107" pos:column="16">(<expr><name pos:line="107" pos:column="17">hostname<pos:position pos:line="107" pos:column="25"/></name></expr>)<pos:position pos:line="107" pos:column="26"/></condition><then pos:line="107" pos:column="26"> <block pos:line="107" pos:column="27">{
                <expr_stmt><expr><name><name pos:line="108" pos:column="17">new_sa<pos:position pos:line="108" pos:column="23"/></name><operator pos:line="108" pos:column="23">-&gt;<pos:position pos:line="108" pos:column="28"/></operator><name pos:line="108" pos:column="25">hostname<pos:position pos:line="108" pos:column="33"/></name></name> <operator pos:line="108" pos:column="34">=<pos:position pos:line="108" pos:column="35"/></operator> <call><name pos:line="108" pos:column="36">apr_pstrdup<pos:position pos:line="108" pos:column="47"/></name><argument_list pos:line="108" pos:column="47">(<argument><expr><name pos:line="108" pos:column="48">p<pos:position pos:line="108" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="108" pos:column="51">hostname<pos:position pos:line="108" pos:column="59"/></name></expr></argument>)<pos:position pos:line="108" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="108" pos:column="61"/></expr_stmt>
            }<pos:position pos:line="109" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="110" pos:column="13">*<pos:position pos:line="110" pos:column="14"/></operator><name pos:line="110" pos:column="14">sa<pos:position pos:line="110" pos:column="16"/></name> <operator pos:line="110" pos:column="17">=<pos:position pos:line="110" pos:column="18"/></operator> <name pos:line="110" pos:column="19">new_sa<pos:position pos:line="110" pos:column="25"/></name></expr>;<pos:position pos:line="110" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="111" pos:column="10"/></block></then>
        <else pos:line="112" pos:column="9">else <block pos:line="112" pos:column="14">{
            <expr_stmt><expr><name><name pos:line="113" pos:column="13">new_sa<pos:position pos:line="113" pos:column="19"/></name><operator pos:line="113" pos:column="19">-&gt;<pos:position pos:line="113" pos:column="24"/></operator><name pos:line="113" pos:column="21">hostname<pos:position pos:line="113" pos:column="29"/></name></name> <operator pos:line="113" pos:column="30">=<pos:position pos:line="113" pos:column="31"/></operator> <name><name pos:line="113" pos:column="32">prev_sa<pos:position pos:line="113" pos:column="39"/></name><operator pos:line="113" pos:column="39">-&gt;<pos:position pos:line="113" pos:column="44"/></operator><name pos:line="113" pos:column="41">hostname<pos:position pos:line="113" pos:column="49"/></name></name></expr>;<pos:position pos:line="113" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="114" pos:column="13">prev_sa<pos:position pos:line="114" pos:column="20"/></name><operator pos:line="114" pos:column="20">-&gt;<pos:position pos:line="114" pos:column="25"/></operator><name pos:line="114" pos:column="22">next<pos:position pos:line="114" pos:column="26"/></name></name> <operator pos:line="114" pos:column="27">=<pos:position pos:line="114" pos:column="28"/></operator> <name pos:line="114" pos:column="29">new_sa<pos:position pos:line="114" pos:column="35"/></name></expr>;<pos:position pos:line="114" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="115" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name pos:line="117" pos:column="9">prev_sa<pos:position pos:line="117" pos:column="16"/></name> <operator pos:line="117" pos:column="17">=<pos:position pos:line="117" pos:column="18"/></operator> <name pos:line="117" pos:column="19">new_sa<pos:position pos:line="117" pos:column="25"/></name></expr>;<pos:position pos:line="117" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name pos:line="118" pos:column="9">ai<pos:position pos:line="118" pos:column="11"/></name> <operator pos:line="118" pos:column="12">=<pos:position pos:line="118" pos:column="13"/></operator> <name><name pos:line="118" pos:column="14">ai<pos:position pos:line="118" pos:column="16"/></name><operator pos:line="118" pos:column="16">-&gt;<pos:position pos:line="118" pos:column="21"/></operator><name pos:line="118" pos:column="18">ai_next<pos:position pos:line="118" pos:column="25"/></name></name></expr>;<pos:position pos:line="118" pos:column="26"/></expr_stmt>
    }<pos:position pos:line="119" pos:column="6"/></block></then></if>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">freeaddrinfo<pos:position pos:line="120" pos:column="17"/></name><argument_list pos:line="120" pos:column="17">(<argument><expr><name pos:line="120" pos:column="18">ai_list<pos:position pos:line="120" pos:column="25"/></name></expr></argument>)<pos:position pos:line="120" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="27"/></expr_stmt>
    <return pos:line="121" pos:column="5">return <expr><name pos:line="121" pos:column="12">APR_SUCCESS<pos:position pos:line="121" pos:column="23"/></name></expr>;<pos:position pos:line="121" pos:column="24"/></return>
}<pos:position pos:line="122" pos:column="2"/></block></while>

<function><specifier pos:line="124" pos:column="1">static<pos:position pos:line="124" pos:column="7"/></specifier> <type><name pos:line="124" pos:column="8">apr_status_t<pos:position pos:line="124" pos:column="20"/></name></type> <name pos:line="124" pos:column="21">find_addresses<pos:position pos:line="124" pos:column="35"/></name><parameter_list pos:line="124" pos:column="35">(<parameter><decl><type><name pos:line="124" pos:column="36">apr_sockaddr_t<pos:position pos:line="124" pos:column="50"/></name> <modifier pos:line="124" pos:column="51">*<pos:position pos:line="124" pos:column="52"/></modifier><modifier pos:line="124" pos:column="52">*<pos:position pos:line="124" pos:column="53"/></modifier></type><name pos:line="124" pos:column="53">sa<pos:position pos:line="124" pos:column="55"/></name></decl></parameter>, 
                                   <parameter><decl><type><specifier pos:line="125" pos:column="36">const<pos:position pos:line="125" pos:column="41"/></specifier> <name pos:line="125" pos:column="42">char<pos:position pos:line="125" pos:column="46"/></name> <modifier pos:line="125" pos:column="47">*<pos:position pos:line="125" pos:column="48"/></modifier></type><name pos:line="125" pos:column="48">hostname<pos:position pos:line="125" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="125" pos:column="58">apr_int32_t<pos:position pos:line="125" pos:column="69"/></name></type> <name pos:line="125" pos:column="70">family<pos:position pos:line="125" pos:column="76"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="126" pos:column="36">apr_port_t<pos:position pos:line="126" pos:column="46"/></name></type> <name pos:line="126" pos:column="47">port<pos:position pos:line="126" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="126" pos:column="53">apr_int32_t<pos:position pos:line="126" pos:column="64"/></name></type> <name pos:line="126" pos:column="65">flags<pos:position pos:line="126" pos:column="70"/></name></decl></parameter>, 
                                   <parameter><decl><type><name pos:line="127" pos:column="36">apr_pool_t<pos:position pos:line="127" pos:column="46"/></name> <modifier pos:line="127" pos:column="47">*<pos:position pos:line="127" pos:column="48"/></modifier></type><name pos:line="127" pos:column="48">p<pos:position pos:line="127" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="127" pos:column="50"/></parameter_list>
<block pos:line="128" pos:column="1">{
    <if pos:line="129" pos:column="5">if <condition pos:line="129" pos:column="8">(<expr><name pos:line="129" pos:column="9">flags<pos:position pos:line="129" pos:column="14"/></name> <operator pos:line="129" pos:column="15">&amp;<pos:position pos:line="129" pos:column="20"/></operator> <name pos:line="129" pos:column="17">APR_IPV4_ADDR_OK<pos:position pos:line="129" pos:column="33"/></name></expr>)<pos:position pos:line="129" pos:column="34"/></condition><then pos:line="129" pos:column="34"> <block pos:line="129" pos:column="35">{
        <decl_stmt><decl><type><name pos:line="130" pos:column="9">apr_status_t<pos:position pos:line="130" pos:column="21"/></name></type> <name pos:line="130" pos:column="22">error<pos:position pos:line="130" pos:column="27"/></name> <init pos:line="130" pos:column="28">= <expr><call><name pos:line="130" pos:column="30">call_resolver<pos:position pos:line="130" pos:column="43"/></name><argument_list pos:line="130" pos:column="43">(<argument><expr><name pos:line="130" pos:column="44">sa<pos:position pos:line="130" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="48">hostname<pos:position pos:line="130" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="58">AF_INET<pos:position pos:line="130" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="67">port<pos:position pos:line="130" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="73">flags<pos:position pos:line="130" pos:column="78"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="80">p<pos:position pos:line="130" pos:column="81"/></name></expr></argument>)<pos:position pos:line="130" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="130" pos:column="83"/></decl_stmt>

<cpp:if pos:line="132" pos:column="1">#<cpp:directive pos:line="132" pos:column="2">if<pos:position pos:line="132" pos:column="4"/></cpp:directive> <expr><name pos:line="132" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="132" pos:column="18"/></name></expr></cpp:if>
        <if pos:line="133" pos:column="9">if <condition pos:line="133" pos:column="12">(<expr><name pos:line="133" pos:column="13">error<pos:position pos:line="133" pos:column="18"/></name></expr>)<pos:position pos:line="133" pos:column="19"/></condition><then pos:line="133" pos:column="19"> <block pos:line="133" pos:column="20">{
            <expr_stmt><expr><name pos:line="134" pos:column="13">family<pos:position pos:line="134" pos:column="19"/></name> <operator pos:line="134" pos:column="20">=<pos:position pos:line="134" pos:column="21"/></operator> <name pos:line="134" pos:column="22">AF_INET6<pos:position pos:line="134" pos:column="30"/></name></expr>;<pos:position pos:line="134" pos:column="31"/></expr_stmt> <comment type="block" pos:line="134" pos:column="32">/* try again */</comment>
        }<pos:position pos:line="135" pos:column="10"/></block></then>
        <else pos:line="136" pos:column="9">else
<cpp:endif pos:line="137" pos:column="1">#<cpp:directive pos:line="137" pos:column="2">endif<pos:position pos:line="137" pos:column="7"/></cpp:directive></cpp:endif>
        <block type="pseudo"><return pos:line="138" pos:column="9">return <expr><name pos:line="138" pos:column="16">error<pos:position pos:line="138" pos:column="21"/></name></expr>;<pos:position pos:line="138" pos:column="22"/></return></block></else></if>
    }<pos:position pos:line="139" pos:column="6"/></block></then>
<cpp:if pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">if<pos:position pos:line="140" pos:column="4"/></cpp:directive> <expr><name pos:line="140" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="140" pos:column="18"/></name></expr></cpp:if>
    <elseif pos:line="141" pos:column="5">else <if pos:line="141" pos:column="10">if <condition pos:line="141" pos:column="13">(<expr><name pos:line="141" pos:column="14">flags<pos:position pos:line="141" pos:column="19"/></name> <operator pos:line="141" pos:column="20">&amp;<pos:position pos:line="141" pos:column="25"/></operator> <name pos:line="141" pos:column="22">APR_IPV6_ADDR_OK<pos:position pos:line="141" pos:column="38"/></name></expr>)<pos:position pos:line="141" pos:column="39"/></condition><then pos:line="141" pos:column="39"> <block pos:line="141" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="142" pos:column="9">apr_status_t<pos:position pos:line="142" pos:column="21"/></name></type> <name pos:line="142" pos:column="22">error<pos:position pos:line="142" pos:column="27"/></name> <init pos:line="142" pos:column="28">= <expr><call><name pos:line="142" pos:column="30">call_resolver<pos:position pos:line="142" pos:column="43"/></name><argument_list pos:line="142" pos:column="43">(<argument><expr><name pos:line="142" pos:column="44">sa<pos:position pos:line="142" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="48">hostname<pos:position pos:line="142" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="58">AF_INET6<pos:position pos:line="142" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="68">port<pos:position pos:line="142" pos:column="72"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="74">flags<pos:position pos:line="142" pos:column="79"/></name></expr></argument>, <argument><expr><name pos:line="142" pos:column="81">p<pos:position pos:line="142" pos:column="82"/></name></expr></argument>)<pos:position pos:line="142" pos:column="83"/></argument_list></call></expr></init></decl>;<pos:position pos:line="142" pos:column="84"/></decl_stmt>

        <if pos:line="144" pos:column="9">if <condition pos:line="144" pos:column="12">(<expr><name pos:line="144" pos:column="13">error<pos:position pos:line="144" pos:column="18"/></name></expr>)<pos:position pos:line="144" pos:column="19"/></condition><then pos:line="144" pos:column="19"> <block pos:line="144" pos:column="20">{
            <expr_stmt><expr><name pos:line="145" pos:column="13">family<pos:position pos:line="145" pos:column="19"/></name> <operator pos:line="145" pos:column="20">=<pos:position pos:line="145" pos:column="21"/></operator> <name pos:line="145" pos:column="22">AF_INET<pos:position pos:line="145" pos:column="29"/></name></expr>;<pos:position pos:line="145" pos:column="30"/></expr_stmt> <comment type="block" pos:line="145" pos:column="31">/* try again */</comment>
        }<pos:position pos:line="146" pos:column="10"/></block></then>
        <else pos:line="147" pos:column="9">else <block pos:line="147" pos:column="14">{
            <return pos:line="148" pos:column="13">return <expr><name pos:line="148" pos:column="20">APR_SUCCESS<pos:position pos:line="148" pos:column="31"/></name></expr>;<pos:position pos:line="148" pos:column="32"/></return>
        }<pos:position pos:line="149" pos:column="10"/></block></else></if>
    }<pos:position pos:line="150" pos:column="6"/></block></then></if></elseif></if>
<cpp:endif pos:line="151" pos:column="1">#<cpp:directive pos:line="151" pos:column="2">endif<pos:position pos:line="151" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="153" pos:column="5">return <expr><call><name pos:line="153" pos:column="12">call_resolver<pos:position pos:line="153" pos:column="25"/></name><argument_list pos:line="153" pos:column="25">(<argument><expr><name pos:line="153" pos:column="26">sa<pos:position pos:line="153" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="30">hostname<pos:position pos:line="153" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="40">family<pos:position pos:line="153" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="48">port<pos:position pos:line="153" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="54">flags<pos:position pos:line="153" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="153" pos:column="61">p<pos:position pos:line="153" pos:column="62"/></name></expr></argument>)<pos:position pos:line="153" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="64"/></return>
}<pos:position pos:line="154" pos:column="2"/></block></function>

<cpp:else pos:line="156" pos:column="1">#<cpp:directive pos:line="156" pos:column="2">else<pos:position pos:line="156" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="156" pos:column="7">/* end of HAVE_GETADDRINFO code */</comment>

<function><specifier pos:line="158" pos:column="1">static<pos:position pos:line="158" pos:column="7"/></specifier> <type><name pos:line="158" pos:column="8">apr_status_t<pos:position pos:line="158" pos:column="20"/></name></type> <name pos:line="158" pos:column="21">find_addresses<pos:position pos:line="158" pos:column="35"/></name><parameter_list pos:line="158" pos:column="35">(<parameter><decl><type><name pos:line="158" pos:column="36">apr_sockaddr_t<pos:position pos:line="158" pos:column="50"/></name> <modifier pos:line="158" pos:column="51">*<pos:position pos:line="158" pos:column="52"/></modifier><modifier pos:line="158" pos:column="52">*<pos:position pos:line="158" pos:column="53"/></modifier></type><name pos:line="158" pos:column="53">sa<pos:position pos:line="158" pos:column="55"/></name></decl></parameter>, 
                                   <parameter><decl><type><specifier pos:line="159" pos:column="36">const<pos:position pos:line="159" pos:column="41"/></specifier> <name pos:line="159" pos:column="42">char<pos:position pos:line="159" pos:column="46"/></name> <modifier pos:line="159" pos:column="47">*<pos:position pos:line="159" pos:column="48"/></modifier></type><name pos:line="159" pos:column="48">hostname<pos:position pos:line="159" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="159" pos:column="58">apr_int32_t<pos:position pos:line="159" pos:column="69"/></name></type> <name pos:line="159" pos:column="70">family<pos:position pos:line="159" pos:column="76"/></name></decl></parameter>,
                                   <parameter><decl><type><name pos:line="160" pos:column="36">apr_port_t<pos:position pos:line="160" pos:column="46"/></name></type> <name pos:line="160" pos:column="47">port<pos:position pos:line="160" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><name pos:line="160" pos:column="53">apr_int32_t<pos:position pos:line="160" pos:column="64"/></name></type> <name pos:line="160" pos:column="65">flags<pos:position pos:line="160" pos:column="70"/></name></decl></parameter>, 
                                   <parameter><decl><type><name pos:line="161" pos:column="36">apr_pool_t<pos:position pos:line="161" pos:column="46"/></name> <modifier pos:line="161" pos:column="47">*<pos:position pos:line="161" pos:column="48"/></modifier></type><name pos:line="161" pos:column="48">p<pos:position pos:line="161" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="161" pos:column="50"/></parameter_list>
<block pos:line="162" pos:column="1">{
    <decl_stmt><decl><type><name><name pos:line="163" pos:column="5">struct<pos:position pos:line="163" pos:column="11"/></name> <name pos:line="163" pos:column="12">hostent<pos:position pos:line="163" pos:column="19"/></name></name> <modifier pos:line="163" pos:column="20">*<pos:position pos:line="163" pos:column="21"/></modifier></type><name pos:line="163" pos:column="21">hp<pos:position pos:line="163" pos:column="23"/></name></decl>;<pos:position pos:line="163" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="164" pos:column="5">apr_sockaddr_t<pos:position pos:line="164" pos:column="19"/></name> <modifier pos:line="164" pos:column="20">*<pos:position pos:line="164" pos:column="21"/></modifier></type><name pos:line="164" pos:column="21">prev_sa<pos:position pos:line="164" pos:column="28"/></name></decl>;<pos:position pos:line="164" pos:column="29"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="165" pos:column="5">int<pos:position pos:line="165" pos:column="8"/></name></type> <name pos:line="165" pos:column="9">curaddr<pos:position pos:line="165" pos:column="16"/></name></decl>;<pos:position pos:line="165" pos:column="17"/></decl_stmt>
<cpp:if pos:line="166" pos:column="1">#<cpp:directive pos:line="166" pos:column="2">if<pos:position pos:line="166" pos:column="4"/></cpp:directive> <expr><name pos:line="166" pos:column="5">APR_HAS_THREADS<pos:position pos:line="166" pos:column="20"/></name> <operator pos:line="166" pos:column="21">&amp;&amp;<pos:position pos:line="166" pos:column="31"/></operator> <operator pos:line="166" pos:column="24">!<pos:position pos:line="166" pos:column="25"/></operator><call><name pos:line="166" pos:column="25">defined<pos:position pos:line="166" pos:column="32"/></name><argument_list pos:line="166" pos:column="32">(<argument><expr><name pos:line="166" pos:column="33">GETHOSTBYNAME_IS_THREAD_SAFE<pos:position pos:line="166" pos:column="61"/></name></expr></argument>)<pos:position pos:line="166" pos:column="62"/></argument_list></call> <operator pos:line="166" pos:column="63">&amp;&amp;<pos:position pos:line="166" pos:column="73"/></operator> \
    <call><name pos:line="167" pos:column="5">defined<pos:position pos:line="167" pos:column="12"/></name><argument_list pos:line="167" pos:column="12">(<argument><expr><name pos:line="167" pos:column="13">HAVE_GETHOSTBYNAME_R<pos:position pos:line="167" pos:column="33"/></name></expr></argument>)<pos:position pos:line="167" pos:column="34"/></argument_list></call> <operator pos:line="167" pos:column="35">&amp;&amp;<pos:position pos:line="167" pos:column="45"/></operator> <operator pos:line="167" pos:column="38">!<pos:position pos:line="167" pos:column="39"/></operator><call><name pos:line="167" pos:column="39">defined<pos:position pos:line="167" pos:column="46"/></name><argument_list pos:line="167" pos:column="46">(<argument><expr><name pos:line="167" pos:column="47">BEOS<pos:position pos:line="167" pos:column="51"/></name></expr></argument>)<pos:position pos:line="167" pos:column="52"/></argument_list></call></expr></cpp:if>
<cpp:ifdef pos:line="168" pos:column="1">#<cpp:directive pos:line="168" pos:column="2">ifdef<pos:position pos:line="168" pos:column="7"/></cpp:directive> <name pos:line="168" pos:column="8">GETHOSTBYNAME_R_HOSTENT_DATA<pos:position pos:line="168" pos:column="36"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name><name pos:line="169" pos:column="5">struct<pos:position pos:line="169" pos:column="11"/></name> <name pos:line="169" pos:column="12">hostent_data<pos:position pos:line="169" pos:column="24"/></name></name></type> <name pos:line="169" pos:column="25">hd<pos:position pos:line="169" pos:column="27"/></name></decl>;<pos:position pos:line="169" pos:column="28"/></decl_stmt>
<cpp:else pos:line="170" pos:column="1">#<cpp:directive pos:line="170" pos:column="2">else<pos:position pos:line="170" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="171" pos:column="5">/* If you see ERANGE, that means GETHOSBYNAME_BUFLEN needs to be
     * bumped. */</comment>
    <decl_stmt><decl><type><name pos:line="173" pos:column="5">char<pos:position pos:line="173" pos:column="9"/></name></type> <name><name pos:line="173" pos:column="10">tmp<pos:position pos:line="173" pos:column="13"/></name><index pos:line="173" pos:column="13">[<expr><name pos:line="173" pos:column="14">GETHOSTBYNAME_BUFLEN<pos:position pos:line="173" pos:column="34"/></name></expr>]<pos:position pos:line="173" pos:column="35"/></index></name></decl>;<pos:position pos:line="173" pos:column="36"/></decl_stmt>
<cpp:endif pos:line="174" pos:column="1">#<cpp:directive pos:line="174" pos:column="2">endif<pos:position pos:line="174" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="175" pos:column="5">int<pos:position pos:line="175" pos:column="8"/></name></type> <name pos:line="175" pos:column="9">hosterror<pos:position pos:line="175" pos:column="18"/></name></decl>;<pos:position pos:line="175" pos:column="19"/></decl_stmt>
<cpp:endif pos:line="176" pos:column="1">#<cpp:directive pos:line="176" pos:column="2">endif<pos:position pos:line="176" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name><name pos:line="177" pos:column="5">struct<pos:position pos:line="177" pos:column="11"/></name> <name pos:line="177" pos:column="12">hostent<pos:position pos:line="177" pos:column="19"/></name></name></type> <name pos:line="177" pos:column="20">hs<pos:position pos:line="177" pos:column="22"/></name></decl>;<pos:position pos:line="177" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="178" pos:column="5">struct<pos:position pos:line="178" pos:column="11"/></name> <name pos:line="178" pos:column="12">in_addr<pos:position pos:line="178" pos:column="19"/></name></name></type> <name pos:line="178" pos:column="20">ipaddr<pos:position pos:line="178" pos:column="26"/></name></decl>;<pos:position pos:line="178" pos:column="27"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="179" pos:column="5">char<pos:position pos:line="179" pos:column="9"/></name> <modifier pos:line="179" pos:column="10">*<pos:position pos:line="179" pos:column="11"/></modifier></type><name><name pos:line="179" pos:column="11">addr_list<pos:position pos:line="179" pos:column="20"/></name><index pos:line="179" pos:column="20">[<expr><literal type="number" pos:line="179" pos:column="21">2<pos:position pos:line="179" pos:column="22"/></literal></expr>]<pos:position pos:line="179" pos:column="23"/></index></name></decl>;<pos:position pos:line="179" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="180" pos:column="5">const<pos:position pos:line="180" pos:column="10"/></specifier> <name pos:line="180" pos:column="11">char<pos:position pos:line="180" pos:column="15"/></name> <modifier pos:line="180" pos:column="16">*<pos:position pos:line="180" pos:column="17"/></modifier></type><name pos:line="180" pos:column="17">orig_hostname<pos:position pos:line="180" pos:column="30"/></name> <init pos:line="180" pos:column="31">= <expr><name pos:line="180" pos:column="33">hostname<pos:position pos:line="180" pos:column="41"/></name></expr></init></decl>;<pos:position pos:line="180" pos:column="42"/></decl_stmt>

    <if pos:line="182" pos:column="5">if <condition pos:line="182" pos:column="8">(<expr><name pos:line="182" pos:column="9">hostname<pos:position pos:line="182" pos:column="17"/></name> <operator pos:line="182" pos:column="18">==<pos:position pos:line="182" pos:column="20"/></operator> <name pos:line="182" pos:column="21">NULL<pos:position pos:line="182" pos:column="25"/></name></expr>)<pos:position pos:line="182" pos:column="26"/></condition><then pos:line="182" pos:column="26"> <block pos:line="182" pos:column="27">{
        <comment type="block" pos:line="183" pos:column="9">/* if we are given a NULL hostname, assume '0.0.0.0' */</comment>
        <expr_stmt><expr><name pos:line="184" pos:column="9">hostname<pos:position pos:line="184" pos:column="17"/></name> <operator pos:line="184" pos:column="18">=<pos:position pos:line="184" pos:column="19"/></operator> <literal type="string" pos:line="184" pos:column="20">"0.0.0.0"<pos:position pos:line="184" pos:column="29"/></literal></expr>;<pos:position pos:line="184" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="185" pos:column="6"/></block></then></if>

    <if pos:line="187" pos:column="5">if <condition pos:line="187" pos:column="8">(<expr><operator pos:line="187" pos:column="9">*<pos:position pos:line="187" pos:column="10"/></operator><name pos:line="187" pos:column="10">hostname<pos:position pos:line="187" pos:column="18"/></name> <operator pos:line="187" pos:column="19">&gt;=<pos:position pos:line="187" pos:column="24"/></operator> <literal type="char" pos:line="187" pos:column="22">'0'<pos:position pos:line="187" pos:column="25"/></literal> <operator pos:line="187" pos:column="26">&amp;&amp;<pos:position pos:line="187" pos:column="36"/></operator> <operator pos:line="187" pos:column="29">*<pos:position pos:line="187" pos:column="30"/></operator><name pos:line="187" pos:column="30">hostname<pos:position pos:line="187" pos:column="38"/></name> <operator pos:line="187" pos:column="39">&lt;=<pos:position pos:line="187" pos:column="44"/></operator> <literal type="char" pos:line="187" pos:column="42">'9'<pos:position pos:line="187" pos:column="45"/></literal> <operator pos:line="187" pos:column="46">&amp;&amp;<pos:position pos:line="187" pos:column="56"/></operator>
        <call><name pos:line="188" pos:column="9">strspn<pos:position pos:line="188" pos:column="15"/></name><argument_list pos:line="188" pos:column="15">(<argument><expr><name pos:line="188" pos:column="16">hostname<pos:position pos:line="188" pos:column="24"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="188" pos:column="26">"0123456789."<pos:position pos:line="188" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="188" pos:column="40"/></argument_list></call> <operator pos:line="188" pos:column="41">==<pos:position pos:line="188" pos:column="43"/></operator> <call><name pos:line="188" pos:column="44">strlen<pos:position pos:line="188" pos:column="50"/></name><argument_list pos:line="188" pos:column="50">(<argument><expr><name pos:line="188" pos:column="51">hostname<pos:position pos:line="188" pos:column="59"/></name></expr></argument>)<pos:position pos:line="188" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="188" pos:column="61"/></condition><then pos:line="188" pos:column="61"> <block pos:line="188" pos:column="62">{

        <expr_stmt><expr><name><name pos:line="190" pos:column="9">ipaddr<pos:position pos:line="190" pos:column="15"/></name><operator pos:line="190" pos:column="15">.<pos:position pos:line="190" pos:column="16"/></operator><name pos:line="190" pos:column="16">s_addr<pos:position pos:line="190" pos:column="22"/></name></name> <operator pos:line="190" pos:column="23">=<pos:position pos:line="190" pos:column="24"/></operator> <call><name pos:line="190" pos:column="25">inet_addr<pos:position pos:line="190" pos:column="34"/></name><argument_list pos:line="190" pos:column="34">(<argument><expr><name pos:line="190" pos:column="35">hostname<pos:position pos:line="190" pos:column="43"/></name></expr></argument>)<pos:position pos:line="190" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="190" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="191" pos:column="9">addr_list<pos:position pos:line="191" pos:column="18"/></name><index pos:line="191" pos:column="18">[<expr><literal type="number" pos:line="191" pos:column="19">0<pos:position pos:line="191" pos:column="20"/></literal></expr>]<pos:position pos:line="191" pos:column="21"/></index></name> <operator pos:line="191" pos:column="22">=<pos:position pos:line="191" pos:column="23"/></operator> <operator pos:line="191" pos:column="24">(<pos:position pos:line="191" pos:column="25"/></operator><name pos:line="191" pos:column="25">char<pos:position pos:line="191" pos:column="29"/></name> <operator pos:line="191" pos:column="30">*<pos:position pos:line="191" pos:column="31"/></operator><operator pos:line="191" pos:column="31">)<pos:position pos:line="191" pos:column="32"/></operator><operator pos:line="191" pos:column="32">&amp;<pos:position pos:line="191" pos:column="37"/></operator><name pos:line="191" pos:column="33">ipaddr<pos:position pos:line="191" pos:column="39"/></name></expr>;<pos:position pos:line="191" pos:column="40"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="192" pos:column="9">addr_list<pos:position pos:line="192" pos:column="18"/></name><index pos:line="192" pos:column="18">[<expr><literal type="number" pos:line="192" pos:column="19">1<pos:position pos:line="192" pos:column="20"/></literal></expr>]<pos:position pos:line="192" pos:column="21"/></index></name> <operator pos:line="192" pos:column="22">=<pos:position pos:line="192" pos:column="23"/></operator> <name pos:line="192" pos:column="24">NULL<pos:position pos:line="192" pos:column="28"/></name></expr>;<pos:position pos:line="192" pos:column="29"/></expr_stmt> <comment type="block" pos:line="192" pos:column="30">/* just one IP in list */</comment>
        <expr_stmt><expr><name><name pos:line="193" pos:column="9">hs<pos:position pos:line="193" pos:column="11"/></name><operator pos:line="193" pos:column="11">.<pos:position pos:line="193" pos:column="12"/></operator><name pos:line="193" pos:column="12">h_addr_list<pos:position pos:line="193" pos:column="23"/></name></name> <operator pos:line="193" pos:column="24">=<pos:position pos:line="193" pos:column="25"/></operator> <operator pos:line="193" pos:column="26">(<pos:position pos:line="193" pos:column="27"/></operator><name pos:line="193" pos:column="27">char<pos:position pos:line="193" pos:column="31"/></name> <operator pos:line="193" pos:column="32">*<pos:position pos:line="193" pos:column="33"/></operator><operator pos:line="193" pos:column="33">*<pos:position pos:line="193" pos:column="34"/></operator><operator pos:line="193" pos:column="34">)<pos:position pos:line="193" pos:column="35"/></operator><name pos:line="193" pos:column="35">addr_list<pos:position pos:line="193" pos:column="44"/></name></expr>;<pos:position pos:line="193" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="194" pos:column="9">hp<pos:position pos:line="194" pos:column="11"/></name> <operator pos:line="194" pos:column="12">=<pos:position pos:line="194" pos:column="13"/></operator> <operator pos:line="194" pos:column="14">&amp;<pos:position pos:line="194" pos:column="19"/></operator><name pos:line="194" pos:column="15">hs<pos:position pos:line="194" pos:column="17"/></name></expr>;<pos:position pos:line="194" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="195" pos:column="6"/></block></then>
    <else pos:line="196" pos:column="5">else <block pos:line="196" pos:column="10">{
<cpp:if pos:line="197" pos:column="1">#<cpp:directive pos:line="197" pos:column="2">if<pos:position pos:line="197" pos:column="4"/></cpp:directive> <expr><name pos:line="197" pos:column="5">APR_HAS_THREADS<pos:position pos:line="197" pos:column="20"/></name> <operator pos:line="197" pos:column="21">&amp;&amp;<pos:position pos:line="197" pos:column="31"/></operator> <operator pos:line="197" pos:column="24">!<pos:position pos:line="197" pos:column="25"/></operator><call><name pos:line="197" pos:column="25">defined<pos:position pos:line="197" pos:column="32"/></name><argument_list pos:line="197" pos:column="32">(<argument><expr><name pos:line="197" pos:column="33">GETHOSTBYNAME_IS_THREAD_SAFE<pos:position pos:line="197" pos:column="61"/></name></expr></argument>)<pos:position pos:line="197" pos:column="62"/></argument_list></call> <operator pos:line="197" pos:column="63">&amp;&amp;<pos:position pos:line="197" pos:column="73"/></operator> \
    <call><name pos:line="198" pos:column="5">defined<pos:position pos:line="198" pos:column="12"/></name><argument_list pos:line="198" pos:column="12">(<argument><expr><name pos:line="198" pos:column="13">HAVE_GETHOSTBYNAME_R<pos:position pos:line="198" pos:column="33"/></name></expr></argument>)<pos:position pos:line="198" pos:column="34"/></argument_list></call> <operator pos:line="198" pos:column="35">&amp;&amp;<pos:position pos:line="198" pos:column="45"/></operator> <operator pos:line="198" pos:column="38">!<pos:position pos:line="198" pos:column="39"/></operator><call><name pos:line="198" pos:column="39">defined<pos:position pos:line="198" pos:column="46"/></name><argument_list pos:line="198" pos:column="46">(<argument><expr><name pos:line="198" pos:column="47">BEOS<pos:position pos:line="198" pos:column="51"/></name></expr></argument>)<pos:position pos:line="198" pos:column="52"/></argument_list></call></expr></cpp:if>
<cpp:if pos:line="199" pos:column="1">#<cpp:directive pos:line="199" pos:column="2">if<pos:position pos:line="199" pos:column="4"/></cpp:directive> <expr><call><name pos:line="199" pos:column="5">defined<pos:position pos:line="199" pos:column="12"/></name><argument_list pos:line="199" pos:column="12">(<argument><expr><name pos:line="199" pos:column="13">GETHOSTBYNAME_R_HOSTENT_DATA<pos:position pos:line="199" pos:column="41"/></name></expr></argument>)<pos:position pos:line="199" pos:column="42"/></argument_list></call></expr></cpp:if>
        <comment type="block" pos:line="200" pos:column="9">/* AIX, HP/UX, D/UX et alia */</comment>
        <expr_stmt><expr><call><name pos:line="201" pos:column="9">gethostbyname_r<pos:position pos:line="201" pos:column="24"/></name><argument_list pos:line="201" pos:column="24">(<argument><expr><name pos:line="201" pos:column="25">hostname<pos:position pos:line="201" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="201" pos:column="35">&amp;<pos:position pos:line="201" pos:column="40"/></operator><name pos:line="201" pos:column="36">hs<pos:position pos:line="201" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="201" pos:column="40">&amp;<pos:position pos:line="201" pos:column="45"/></operator><name pos:line="201" pos:column="41">hd<pos:position pos:line="201" pos:column="43"/></name></expr></argument>)<pos:position pos:line="201" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name pos:line="202" pos:column="9">hp<pos:position pos:line="202" pos:column="11"/></name> <operator pos:line="202" pos:column="12">=<pos:position pos:line="202" pos:column="13"/></operator> <operator pos:line="202" pos:column="14">&amp;<pos:position pos:line="202" pos:column="19"/></operator><name pos:line="202" pos:column="15">hs<pos:position pos:line="202" pos:column="17"/></name></expr>;<pos:position pos:line="202" pos:column="18"/></expr_stmt>
<cpp:else pos:line="203" pos:column="1">#<cpp:directive pos:line="203" pos:column="2">else<pos:position pos:line="203" pos:column="6"/></cpp:directive></cpp:else>
<cpp:if pos:line="204" pos:column="1">#<cpp:directive pos:line="204" pos:column="2">if<pos:position pos:line="204" pos:column="4"/></cpp:directive> <expr><call><name pos:line="204" pos:column="5">defined<pos:position pos:line="204" pos:column="12"/></name><argument_list pos:line="204" pos:column="12">(<argument><expr><name pos:line="204" pos:column="13">GETHOSTBYNAME_R_GLIBC2<pos:position pos:line="204" pos:column="35"/></name></expr></argument>)<pos:position pos:line="204" pos:column="36"/></argument_list></call></expr></cpp:if>
        <comment type="block" pos:line="205" pos:column="9">/* Linux glibc2+ */</comment>
        <expr_stmt><expr><call><name pos:line="206" pos:column="9">gethostbyname_r<pos:position pos:line="206" pos:column="24"/></name><argument_list pos:line="206" pos:column="24">(<argument><expr><name pos:line="206" pos:column="25">hostname<pos:position pos:line="206" pos:column="33"/></name></expr></argument>, <argument><expr><operator pos:line="206" pos:column="35">&amp;<pos:position pos:line="206" pos:column="40"/></operator><name pos:line="206" pos:column="36">hs<pos:position pos:line="206" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="206" pos:column="40">tmp<pos:position pos:line="206" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="206" pos:column="45">GETHOSTBYNAME_BUFLEN<pos:position pos:line="206" pos:column="65"/></name> <operator pos:line="206" pos:column="66">-<pos:position pos:line="206" pos:column="67"/></operator> <literal type="number" pos:line="206" pos:column="68">1<pos:position pos:line="206" pos:column="69"/></literal></expr></argument>, 
                        <argument><expr><operator pos:line="207" pos:column="25">&amp;<pos:position pos:line="207" pos:column="30"/></operator><name pos:line="207" pos:column="26">hp<pos:position pos:line="207" pos:column="28"/></name></expr></argument>, <argument><expr><operator pos:line="207" pos:column="30">&amp;<pos:position pos:line="207" pos:column="35"/></operator><name pos:line="207" pos:column="31">hosterror<pos:position pos:line="207" pos:column="40"/></name></expr></argument>)<pos:position pos:line="207" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="207" pos:column="42"/></expr_stmt>
<cpp:else pos:line="208" pos:column="1">#<cpp:directive pos:line="208" pos:column="2">else<pos:position pos:line="208" pos:column="6"/></cpp:directive></cpp:else>
        <comment type="block" pos:line="209" pos:column="9">/* Solaris, Irix et alia */</comment>
        <expr_stmt><expr><name pos:line="210" pos:column="9">hp<pos:position pos:line="210" pos:column="11"/></name> <operator pos:line="210" pos:column="12">=<pos:position pos:line="210" pos:column="13"/></operator> <call><name pos:line="210" pos:column="14">gethostbyname_r<pos:position pos:line="210" pos:column="29"/></name><argument_list pos:line="210" pos:column="29">(<argument><expr><name pos:line="210" pos:column="30">hostname<pos:position pos:line="210" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="210" pos:column="40">&amp;<pos:position pos:line="210" pos:column="45"/></operator><name pos:line="210" pos:column="41">hs<pos:position pos:line="210" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="210" pos:column="45">tmp<pos:position pos:line="210" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="210" pos:column="50">GETHOSTBYNAME_BUFLEN<pos:position pos:line="210" pos:column="70"/></name> <operator pos:line="210" pos:column="71">-<pos:position pos:line="210" pos:column="72"/></operator> <literal type="number" pos:line="210" pos:column="73">1<pos:position pos:line="210" pos:column="74"/></literal></expr></argument>,
                             <argument><expr><operator pos:line="211" pos:column="30">&amp;<pos:position pos:line="211" pos:column="35"/></operator><name pos:line="211" pos:column="31">hosterror<pos:position pos:line="211" pos:column="40"/></name></expr></argument>)<pos:position pos:line="211" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="211" pos:column="42"/></expr_stmt>
<cpp:endif pos:line="212" pos:column="1">#<cpp:directive pos:line="212" pos:column="2">endif<pos:position pos:line="212" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="212" pos:column="8">/* !defined(GETHOSTBYNAME_R_GLIBC2) */</comment>
        <if pos:line="213" pos:column="9">if <condition pos:line="213" pos:column="12">(<expr><operator pos:line="213" pos:column="13">!<pos:position pos:line="213" pos:column="14"/></operator><name pos:line="213" pos:column="14">hp<pos:position pos:line="213" pos:column="16"/></name></expr>)<pos:position pos:line="213" pos:column="17"/></condition><then pos:line="213" pos:column="17"> <block pos:line="213" pos:column="18">{
            <return pos:line="214" pos:column="13">return <expr><operator pos:line="214" pos:column="20">(<pos:position pos:line="214" pos:column="21"/></operator><name pos:line="214" pos:column="21">hosterror<pos:position pos:line="214" pos:column="30"/></name> <operator pos:line="214" pos:column="31">+<pos:position pos:line="214" pos:column="32"/></operator> <name pos:line="214" pos:column="33">APR_OS_START_SYSERR<pos:position pos:line="214" pos:column="52"/></name><operator pos:line="214" pos:column="52">)<pos:position pos:line="214" pos:column="53"/></operator></expr>;<pos:position pos:line="214" pos:column="54"/></return>
        }<pos:position pos:line="215" pos:column="10"/></block></then></if>
<cpp:endif pos:line="216" pos:column="1">#<cpp:directive pos:line="216" pos:column="2">endif<pos:position pos:line="216" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="216" pos:column="8">/* !defined(GETHOSTBYNAME_R_HOSTENT_DATA) */</comment>
<cpp:else pos:line="217" pos:column="1">#<cpp:directive pos:line="217" pos:column="2">else<pos:position pos:line="217" pos:column="6"/></cpp:directive></cpp:else>
        <expr_stmt><expr><name pos:line="218" pos:column="9">hp<pos:position pos:line="218" pos:column="11"/></name> <operator pos:line="218" pos:column="12">=<pos:position pos:line="218" pos:column="13"/></operator> <call><name pos:line="218" pos:column="14">gethostbyname<pos:position pos:line="218" pos:column="27"/></name><argument_list pos:line="218" pos:column="27">(<argument><expr><name pos:line="218" pos:column="28">hostname<pos:position pos:line="218" pos:column="36"/></name></expr></argument>)<pos:position pos:line="218" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="218" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="219" pos:column="1">#<cpp:directive pos:line="219" pos:column="2">endif<pos:position pos:line="219" pos:column="7"/></cpp:directive></cpp:endif>

        <if pos:line="221" pos:column="9">if <condition pos:line="221" pos:column="12">(<expr><operator pos:line="221" pos:column="13">!<pos:position pos:line="221" pos:column="14"/></operator><name pos:line="221" pos:column="14">hp<pos:position pos:line="221" pos:column="16"/></name></expr>)<pos:position pos:line="221" pos:column="17"/></condition><then pos:line="221" pos:column="17"> <block pos:line="221" pos:column="18">{
<cpp:ifdef pos:line="222" pos:column="1">#<cpp:directive pos:line="222" pos:column="2">ifdef<pos:position pos:line="222" pos:column="7"/></cpp:directive> <name pos:line="222" pos:column="8">WIN32<pos:position pos:line="222" pos:column="13"/></name></cpp:ifdef>
            <return pos:line="223" pos:column="13">return <expr><call><name pos:line="223" pos:column="20">apr_get_netos_error<pos:position pos:line="223" pos:column="39"/></name><argument_list pos:line="223" pos:column="39">()<pos:position pos:line="223" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="223" pos:column="42"/></return>
<cpp:else pos:line="224" pos:column="1">#<cpp:directive pos:line="224" pos:column="2">else<pos:position pos:line="224" pos:column="6"/></cpp:directive></cpp:else>
            <return pos:line="225" pos:column="13">return <expr><operator pos:line="225" pos:column="20">(<pos:position pos:line="225" pos:column="21"/></operator><name pos:line="225" pos:column="21">h_errno<pos:position pos:line="225" pos:column="28"/></name> <operator pos:line="225" pos:column="29">+<pos:position pos:line="225" pos:column="30"/></operator> <name pos:line="225" pos:column="31">APR_OS_START_SYSERR<pos:position pos:line="225" pos:column="50"/></name><operator pos:line="225" pos:column="50">)<pos:position pos:line="225" pos:column="51"/></operator></expr>;<pos:position pos:line="225" pos:column="52"/></return>
<cpp:endif pos:line="226" pos:column="1">#<cpp:directive pos:line="226" pos:column="2">endif<pos:position pos:line="226" pos:column="7"/></cpp:directive></cpp:endif>
        }<pos:position pos:line="227" pos:column="10"/></block></then></if>
    }<pos:position pos:line="228" pos:column="6"/></block></else></if>

    <expr_stmt><expr><name pos:line="230" pos:column="5">prev_sa<pos:position pos:line="230" pos:column="12"/></name> <operator pos:line="230" pos:column="13">=<pos:position pos:line="230" pos:column="14"/></operator> <name pos:line="230" pos:column="15">NULL<pos:position pos:line="230" pos:column="19"/></name></expr>;<pos:position pos:line="230" pos:column="20"/></expr_stmt>
    <expr_stmt><expr><name pos:line="231" pos:column="5">curaddr<pos:position pos:line="231" pos:column="12"/></name> <operator pos:line="231" pos:column="13">=<pos:position pos:line="231" pos:column="14"/></operator> <literal type="number" pos:line="231" pos:column="15">0<pos:position pos:line="231" pos:column="16"/></literal></expr>;<pos:position pos:line="231" pos:column="17"/></expr_stmt>
    <while pos:line="232" pos:column="5">while <condition pos:line="232" pos:column="11">(<expr><name><name pos:line="232" pos:column="12">hp<pos:position pos:line="232" pos:column="14"/></name><operator pos:line="232" pos:column="14">-&gt;<pos:position pos:line="232" pos:column="19"/></operator><name pos:line="232" pos:column="16">h_addr_list<pos:position pos:line="232" pos:column="27"/></name><index pos:line="232" pos:column="27">[<expr><name pos:line="232" pos:column="28">curaddr<pos:position pos:line="232" pos:column="35"/></name></expr>]<pos:position pos:line="232" pos:column="36"/></index></name></expr>)<pos:position pos:line="232" pos:column="37"/></condition> <block pos:line="232" pos:column="38">{
        <decl_stmt><decl><type><name pos:line="233" pos:column="9">apr_sockaddr_t<pos:position pos:line="233" pos:column="23"/></name> <modifier pos:line="233" pos:column="24">*<pos:position pos:line="233" pos:column="25"/></modifier></type><name pos:line="233" pos:column="25">new_sa<pos:position pos:line="233" pos:column="31"/></name> <init pos:line="233" pos:column="32">= <expr><call><name pos:line="233" pos:column="34">apr_pcalloc<pos:position pos:line="233" pos:column="45"/></name><argument_list pos:line="233" pos:column="45">(<argument><expr><name pos:line="233" pos:column="46">p<pos:position pos:line="233" pos:column="47"/></name></expr></argument>, <argument><expr><sizeof pos:line="233" pos:column="49">sizeof<argument_list pos:line="233" pos:column="55">(<argument><expr><name pos:line="233" pos:column="56">apr_sockaddr_t<pos:position pos:line="233" pos:column="70"/></name></expr></argument>)<pos:position pos:line="233" pos:column="71"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="233" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="233" pos:column="73"/></decl_stmt>

        <expr_stmt><expr><name><name pos:line="235" pos:column="9">new_sa<pos:position pos:line="235" pos:column="15"/></name><operator pos:line="235" pos:column="15">-&gt;<pos:position pos:line="235" pos:column="20"/></operator><name pos:line="235" pos:column="17">pool<pos:position pos:line="235" pos:column="21"/></name></name> <operator pos:line="235" pos:column="22">=<pos:position pos:line="235" pos:column="23"/></operator> <name pos:line="235" pos:column="24">p<pos:position pos:line="235" pos:column="25"/></name></expr>;<pos:position pos:line="235" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="236" pos:column="9">new_sa<pos:position pos:line="236" pos:column="15"/></name><operator pos:line="236" pos:column="15">-&gt;<pos:position pos:line="236" pos:column="20"/></operator><name pos:line="236" pos:column="17">sa<pos:position pos:line="236" pos:column="19"/></name><operator pos:line="236" pos:column="19">.<pos:position pos:line="236" pos:column="20"/></operator><name pos:line="236" pos:column="20">sin<pos:position pos:line="236" pos:column="23"/></name><operator pos:line="236" pos:column="23">.<pos:position pos:line="236" pos:column="24"/></operator><name pos:line="236" pos:column="24">sin_addr<pos:position pos:line="236" pos:column="32"/></name></name> <operator pos:line="236" pos:column="33">=<pos:position pos:line="236" pos:column="34"/></operator> <operator pos:line="236" pos:column="35">*<pos:position pos:line="236" pos:column="36"/></operator><operator pos:line="236" pos:column="36">(<pos:position pos:line="236" pos:column="37"/></operator>struct <name pos:line="236" pos:column="44">in_addr<pos:position pos:line="236" pos:column="51"/></name> <operator pos:line="236" pos:column="52">*<pos:position pos:line="236" pos:column="53"/></operator><operator pos:line="236" pos:column="53">)<pos:position pos:line="236" pos:column="54"/></operator><name><name pos:line="236" pos:column="54">hp<pos:position pos:line="236" pos:column="56"/></name><operator pos:line="236" pos:column="56">-&gt;<pos:position pos:line="236" pos:column="61"/></operator><name pos:line="236" pos:column="58">h_addr_list<pos:position pos:line="236" pos:column="69"/></name><index pos:line="236" pos:column="69">[<expr><name pos:line="236" pos:column="70">curaddr<pos:position pos:line="236" pos:column="77"/></name></expr>]<pos:position pos:line="236" pos:column="78"/></index></name></expr>;<pos:position pos:line="236" pos:column="79"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="237" pos:column="9">apr_sockaddr_vars_set<pos:position pos:line="237" pos:column="30"/></name><argument_list pos:line="237" pos:column="30">(<argument><expr><name pos:line="237" pos:column="31">new_sa<pos:position pos:line="237" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="237" pos:column="39">AF_INET<pos:position pos:line="237" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="237" pos:column="48">port<pos:position pos:line="237" pos:column="52"/></name></expr></argument>)<pos:position pos:line="237" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="237" pos:column="54"/></expr_stmt>

        <if pos:line="239" pos:column="9">if <condition pos:line="239" pos:column="12">(<expr><operator pos:line="239" pos:column="13">!<pos:position pos:line="239" pos:column="14"/></operator><name pos:line="239" pos:column="14">prev_sa<pos:position pos:line="239" pos:column="21"/></name></expr>)<pos:position pos:line="239" pos:column="22"/></condition><then pos:line="239" pos:column="22"> <block pos:line="239" pos:column="23">{ <comment type="block" pos:line="239" pos:column="25">/* first element in new list */</comment>
            <if pos:line="240" pos:column="13">if <condition pos:line="240" pos:column="16">(<expr><name pos:line="240" pos:column="17">orig_hostname<pos:position pos:line="240" pos:column="30"/></name></expr>)<pos:position pos:line="240" pos:column="31"/></condition><then pos:line="240" pos:column="31"> <block pos:line="240" pos:column="32">{
                <expr_stmt><expr><name><name pos:line="241" pos:column="17">new_sa<pos:position pos:line="241" pos:column="23"/></name><operator pos:line="241" pos:column="23">-&gt;<pos:position pos:line="241" pos:column="28"/></operator><name pos:line="241" pos:column="25">hostname<pos:position pos:line="241" pos:column="33"/></name></name> <operator pos:line="241" pos:column="34">=<pos:position pos:line="241" pos:column="35"/></operator> <call><name pos:line="241" pos:column="36">apr_pstrdup<pos:position pos:line="241" pos:column="47"/></name><argument_list pos:line="241" pos:column="47">(<argument><expr><name pos:line="241" pos:column="48">p<pos:position pos:line="241" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="241" pos:column="51">orig_hostname<pos:position pos:line="241" pos:column="64"/></name></expr></argument>)<pos:position pos:line="241" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="241" pos:column="66"/></expr_stmt>
            }<pos:position pos:line="242" pos:column="14"/></block></then></if>
            <expr_stmt><expr><operator pos:line="243" pos:column="13">*<pos:position pos:line="243" pos:column="14"/></operator><name pos:line="243" pos:column="14">sa<pos:position pos:line="243" pos:column="16"/></name> <operator pos:line="243" pos:column="17">=<pos:position pos:line="243" pos:column="18"/></operator> <name pos:line="243" pos:column="19">new_sa<pos:position pos:line="243" pos:column="25"/></name></expr>;<pos:position pos:line="243" pos:column="26"/></expr_stmt>
        }<pos:position pos:line="244" pos:column="10"/></block></then>
        <else pos:line="245" pos:column="9">else <block pos:line="245" pos:column="14">{
            <expr_stmt><expr><name><name pos:line="246" pos:column="13">new_sa<pos:position pos:line="246" pos:column="19"/></name><operator pos:line="246" pos:column="19">-&gt;<pos:position pos:line="246" pos:column="24"/></operator><name pos:line="246" pos:column="21">hostname<pos:position pos:line="246" pos:column="29"/></name></name> <operator pos:line="246" pos:column="30">=<pos:position pos:line="246" pos:column="31"/></operator> <name><name pos:line="246" pos:column="32">prev_sa<pos:position pos:line="246" pos:column="39"/></name><operator pos:line="246" pos:column="39">-&gt;<pos:position pos:line="246" pos:column="44"/></operator><name pos:line="246" pos:column="41">hostname<pos:position pos:line="246" pos:column="49"/></name></name></expr>;<pos:position pos:line="246" pos:column="50"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="247" pos:column="13">prev_sa<pos:position pos:line="247" pos:column="20"/></name><operator pos:line="247" pos:column="20">-&gt;<pos:position pos:line="247" pos:column="25"/></operator><name pos:line="247" pos:column="22">next<pos:position pos:line="247" pos:column="26"/></name></name> <operator pos:line="247" pos:column="27">=<pos:position pos:line="247" pos:column="28"/></operator> <name pos:line="247" pos:column="29">new_sa<pos:position pos:line="247" pos:column="35"/></name></expr>;<pos:position pos:line="247" pos:column="36"/></expr_stmt>
        }<pos:position pos:line="248" pos:column="10"/></block></else></if>

        <expr_stmt><expr><name pos:line="250" pos:column="9">prev_sa<pos:position pos:line="250" pos:column="16"/></name> <operator pos:line="250" pos:column="17">=<pos:position pos:line="250" pos:column="18"/></operator> <name pos:line="250" pos:column="19">new_sa<pos:position pos:line="250" pos:column="25"/></name></expr>;<pos:position pos:line="250" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="251" pos:column="9">++<pos:position pos:line="251" pos:column="11"/></operator><name pos:line="251" pos:column="11">curaddr<pos:position pos:line="251" pos:column="18"/></name></expr>;<pos:position pos:line="251" pos:column="19"/></expr_stmt>
    }<pos:position pos:line="252" pos:column="6"/></block></while>

    <return pos:line="254" pos:column="5">return <expr><name pos:line="254" pos:column="12">APR_SUCCESS<pos:position pos:line="254" pos:column="23"/></name></expr>;<pos:position pos:line="254" pos:column="24"/></return>
}<pos:position pos:line="255" pos:column="2"/></block></function>

<cpp:endif pos:line="257" pos:column="1">#<cpp:directive pos:line="257" pos:column="2">endif<pos:position pos:line="257" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="257" pos:column="8">/* end of !HAVE_GETADDRINFO code */</comment>

<macro><name pos:line="259" pos:column="1">APR_DECLARE<pos:position pos:line="259" pos:column="12"/></name><argument_list pos:line="259" pos:column="12">(<argument pos:line="259" pos:column="13">apr_status_t<pos:position pos:line="259" pos:column="25"/></argument>)<pos:position pos:line="259" pos:column="26"/></argument_list></macro> <macro><name pos:line="259" pos:column="27">apr_sockaddr_info_get<pos:position pos:line="259" pos:column="48"/></name><argument_list pos:line="259" pos:column="48">(<argument pos:line="259" pos:column="49">apr_sockaddr_t **sa<pos:position pos:line="259" pos:column="68"/></argument>,
                                                <argument pos:line="260" pos:column="49">const char *hostname<pos:position pos:line="260" pos:column="69"/></argument>, 
                                                <argument pos:line="261" pos:column="49">apr_int32_t family<pos:position pos:line="261" pos:column="67"/></argument>, <argument pos:line="261" pos:column="69">apr_port_t port<pos:position pos:line="261" pos:column="84"/></argument>,
                                                <argument pos:line="262" pos:column="49">apr_int32_t flags<pos:position pos:line="262" pos:column="66"/></argument>, <argument pos:line="262" pos:column="68">apr_pool_t *p<pos:position pos:line="262" pos:column="81"/></argument>)<pos:position pos:line="262" pos:column="82"/></argument_list></macro>
<block pos:line="263" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="264" pos:column="5">apr_int32_t<pos:position pos:line="264" pos:column="16"/></name></type> <name pos:line="264" pos:column="17">masked<pos:position pos:line="264" pos:column="23"/></name></decl>;<pos:position pos:line="264" pos:column="24"/></decl_stmt>
    <expr_stmt><expr><operator pos:line="265" pos:column="5">*<pos:position pos:line="265" pos:column="6"/></operator><name pos:line="265" pos:column="6">sa<pos:position pos:line="265" pos:column="8"/></name> <operator pos:line="265" pos:column="9">=<pos:position pos:line="265" pos:column="10"/></operator> <name pos:line="265" pos:column="11">NULL<pos:position pos:line="265" pos:column="15"/></name></expr>;<pos:position pos:line="265" pos:column="16"/></expr_stmt>

    <if pos:line="267" pos:column="5">if <condition pos:line="267" pos:column="8">(<expr><operator pos:line="267" pos:column="9">(<pos:position pos:line="267" pos:column="10"/></operator><name pos:line="267" pos:column="10">masked<pos:position pos:line="267" pos:column="16"/></name> <operator pos:line="267" pos:column="17">=<pos:position pos:line="267" pos:column="18"/></operator> <name pos:line="267" pos:column="19">flags<pos:position pos:line="267" pos:column="24"/></name> <operator pos:line="267" pos:column="25">&amp;<pos:position pos:line="267" pos:column="30"/></operator> <operator pos:line="267" pos:column="27">(<pos:position pos:line="267" pos:column="28"/></operator><name pos:line="267" pos:column="28">APR_IPV4_ADDR_OK<pos:position pos:line="267" pos:column="44"/></name> <operator pos:line="267" pos:column="45">|<pos:position pos:line="267" pos:column="46"/></operator> <name pos:line="267" pos:column="47">APR_IPV6_ADDR_OK<pos:position pos:line="267" pos:column="63"/></name><operator pos:line="267" pos:column="63">)<pos:position pos:line="267" pos:column="64"/></operator><operator pos:line="267" pos:column="64">)<pos:position pos:line="267" pos:column="65"/></operator></expr>)<pos:position pos:line="267" pos:column="66"/></condition><then pos:line="267" pos:column="66"> <block pos:line="267" pos:column="67">{
        <if pos:line="268" pos:column="9">if <condition pos:line="268" pos:column="12">(<expr><operator pos:line="268" pos:column="13">!<pos:position pos:line="268" pos:column="14"/></operator><name pos:line="268" pos:column="14">hostname<pos:position pos:line="268" pos:column="22"/></name> <operator pos:line="268" pos:column="23">||<pos:position pos:line="268" pos:column="25"/></operator>
            <name pos:line="269" pos:column="13">family<pos:position pos:line="269" pos:column="19"/></name> <operator pos:line="269" pos:column="20">!=<pos:position pos:line="269" pos:column="22"/></operator> <name pos:line="269" pos:column="23">APR_UNSPEC<pos:position pos:line="269" pos:column="33"/></name> <operator pos:line="269" pos:column="34">||<pos:position pos:line="269" pos:column="36"/></operator>
            <name pos:line="270" pos:column="13">masked<pos:position pos:line="270" pos:column="19"/></name> <operator pos:line="270" pos:column="20">==<pos:position pos:line="270" pos:column="22"/></operator> <operator pos:line="270" pos:column="23">(<pos:position pos:line="270" pos:column="24"/></operator><name pos:line="270" pos:column="24">APR_IPV4_ADDR_OK<pos:position pos:line="270" pos:column="40"/></name> <operator pos:line="270" pos:column="41">|<pos:position pos:line="270" pos:column="42"/></operator> <name pos:line="270" pos:column="43">APR_IPV6_ADDR_OK<pos:position pos:line="270" pos:column="59"/></name><operator pos:line="270" pos:column="59">)<pos:position pos:line="270" pos:column="60"/></operator></expr>)<pos:position pos:line="270" pos:column="61"/></condition><then pos:line="270" pos:column="61"> <block pos:line="270" pos:column="62">{
            <return pos:line="271" pos:column="13">return <expr><name pos:line="271" pos:column="20">APR_EINVAL<pos:position pos:line="271" pos:column="30"/></name></expr>;<pos:position pos:line="271" pos:column="31"/></return>
        }<pos:position pos:line="272" pos:column="10"/></block></then></if>
<cpp:if pos:line="273" pos:column="1">#<cpp:directive pos:line="273" pos:column="2">if<pos:position pos:line="273" pos:column="4"/></cpp:directive> <expr><operator pos:line="273" pos:column="5">!<pos:position pos:line="273" pos:column="6"/></operator><name pos:line="273" pos:column="6">APR_HAVE_IPV6<pos:position pos:line="273" pos:column="19"/></name></expr></cpp:if>
        <if pos:line="274" pos:column="9">if <condition pos:line="274" pos:column="12">(<expr><name pos:line="274" pos:column="13">flags<pos:position pos:line="274" pos:column="18"/></name> <operator pos:line="274" pos:column="19">&amp;<pos:position pos:line="274" pos:column="24"/></operator> <name pos:line="274" pos:column="21">APR_IPV6_ADDR_OK<pos:position pos:line="274" pos:column="37"/></name></expr>)<pos:position pos:line="274" pos:column="38"/></condition><then pos:line="274" pos:column="38"> <block pos:line="274" pos:column="39">{
            <return pos:line="275" pos:column="13">return <expr><name pos:line="275" pos:column="20">APR_ENOTIMPL<pos:position pos:line="275" pos:column="32"/></name></expr>;<pos:position pos:line="275" pos:column="33"/></return>
        }<pos:position pos:line="276" pos:column="10"/></block></then></if>
<cpp:endif pos:line="277" pos:column="1">#<cpp:directive pos:line="277" pos:column="2">endif<pos:position pos:line="277" pos:column="7"/></cpp:directive></cpp:endif>
    }<pos:position pos:line="278" pos:column="6"/></block></then></if>
<cpp:if pos:line="279" pos:column="1">#<cpp:directive pos:line="279" pos:column="2">if<pos:position pos:line="279" pos:column="4"/></cpp:directive> <expr><operator pos:line="279" pos:column="5">!<pos:position pos:line="279" pos:column="6"/></operator><name pos:line="279" pos:column="6">APR_HAVE_IPV6<pos:position pos:line="279" pos:column="19"/></name></expr></cpp:if>
    <comment type="block" pos:line="280" pos:column="5">/* What may happen is that APR is not IPv6-enabled, but we're still
     * going to call getaddrinfo(), so we have to tell the OS we only
     * want IPv4 addresses back since we won't know what to do with
     * IPv6 addresses.
     */</comment>
    <if pos:line="285" pos:column="5">if <condition pos:line="285" pos:column="8">(<expr><name pos:line="285" pos:column="9">family<pos:position pos:line="285" pos:column="15"/></name> <operator pos:line="285" pos:column="16">==<pos:position pos:line="285" pos:column="18"/></operator> <name pos:line="285" pos:column="19">APR_UNSPEC<pos:position pos:line="285" pos:column="29"/></name></expr>)<pos:position pos:line="285" pos:column="30"/></condition><then pos:line="285" pos:column="30"> <block pos:line="285" pos:column="31">{
        <expr_stmt><expr><name pos:line="286" pos:column="9">family<pos:position pos:line="286" pos:column="15"/></name> <operator pos:line="286" pos:column="16">=<pos:position pos:line="286" pos:column="17"/></operator> <name pos:line="286" pos:column="18">APR_INET<pos:position pos:line="286" pos:column="26"/></name></expr>;<pos:position pos:line="286" pos:column="27"/></expr_stmt>
    }<pos:position pos:line="287" pos:column="6"/></block></then></if>
<cpp:endif pos:line="288" pos:column="1">#<cpp:directive pos:line="288" pos:column="2">endif<pos:position pos:line="288" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="290" pos:column="5">return <expr><call><name pos:line="290" pos:column="12">find_addresses<pos:position pos:line="290" pos:column="26"/></name><argument_list pos:line="290" pos:column="26">(<argument><expr><name pos:line="290" pos:column="27">sa<pos:position pos:line="290" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="31">hostname<pos:position pos:line="290" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="41">family<pos:position pos:line="290" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="49">port<pos:position pos:line="290" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="55">flags<pos:position pos:line="290" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="290" pos:column="62">p<pos:position pos:line="290" pos:column="63"/></name></expr></argument>)<pos:position pos:line="290" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="290" pos:column="65"/></return>
}<pos:position pos:line="291" pos:column="2"/></block>

<macro><name pos:line="293" pos:column="1">APR_DECLARE<pos:position pos:line="293" pos:column="12"/></name><argument_list pos:line="293" pos:column="12">(<argument pos:line="293" pos:column="13">apr_status_t<pos:position pos:line="293" pos:column="25"/></argument>)<pos:position pos:line="293" pos:column="26"/></argument_list></macro> <macro><name pos:line="293" pos:column="27">apr_getnameinfo<pos:position pos:line="293" pos:column="42"/></name><argument_list pos:line="293" pos:column="42">(<argument pos:line="293" pos:column="43">char **hostname<pos:position pos:line="293" pos:column="58"/></argument>,
                                          <argument pos:line="294" pos:column="43">apr_sockaddr_t *sockaddr<pos:position pos:line="294" pos:column="67"/></argument>,
                                          <argument pos:line="295" pos:column="43">apr_int32_t flags<pos:position pos:line="295" pos:column="60"/></argument>)<pos:position pos:line="295" pos:column="61"/></argument_list></macro>
<block pos:line="296" pos:column="1">{
<cpp:if pos:line="297" pos:column="1">#<cpp:directive pos:line="297" pos:column="2">if<pos:position pos:line="297" pos:column="4"/></cpp:directive> <expr><call><name pos:line="297" pos:column="5">defined<pos:position pos:line="297" pos:column="12"/></name><argument_list pos:line="297" pos:column="12">(<argument><expr><name pos:line="297" pos:column="13">HAVE_GETNAMEINFO<pos:position pos:line="297" pos:column="29"/></name></expr></argument>)<pos:position pos:line="297" pos:column="30"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="298" pos:column="5">int<pos:position pos:line="298" pos:column="8"/></name></type> <name pos:line="298" pos:column="9">rc<pos:position pos:line="298" pos:column="11"/></name></decl>;<pos:position pos:line="298" pos:column="12"/></decl_stmt>
<cpp:if pos:line="299" pos:column="1">#<cpp:directive pos:line="299" pos:column="2">if<pos:position pos:line="299" pos:column="4"/></cpp:directive> <expr><call><name pos:line="299" pos:column="5">defined<pos:position pos:line="299" pos:column="12"/></name><argument_list pos:line="299" pos:column="12">(<argument><expr><name pos:line="299" pos:column="13">NI_MAXHOST<pos:position pos:line="299" pos:column="23"/></name></expr></argument>)<pos:position pos:line="299" pos:column="24"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name pos:line="300" pos:column="5">char<pos:position pos:line="300" pos:column="9"/></name></type> <name><name pos:line="300" pos:column="10">tmphostname<pos:position pos:line="300" pos:column="21"/></name><index pos:line="300" pos:column="21">[<expr><name pos:line="300" pos:column="22">NI_MAXHOST<pos:position pos:line="300" pos:column="32"/></name></expr>]<pos:position pos:line="300" pos:column="33"/></index></name></decl>;<pos:position pos:line="300" pos:column="34"/></decl_stmt>
<cpp:else pos:line="301" pos:column="1">#<cpp:directive pos:line="301" pos:column="2">else<pos:position pos:line="301" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="302" pos:column="5">char<pos:position pos:line="302" pos:column="9"/></name></type> <name><name pos:line="302" pos:column="10">tmphostname<pos:position pos:line="302" pos:column="21"/></name><index pos:line="302" pos:column="21">[<expr><literal type="number" pos:line="302" pos:column="22">256<pos:position pos:line="302" pos:column="25"/></literal></expr>]<pos:position pos:line="302" pos:column="26"/></index></name></decl>;<pos:position pos:line="302" pos:column="27"/></decl_stmt>
<cpp:endif pos:line="303" pos:column="1">#<cpp:directive pos:line="303" pos:column="2">endif<pos:position pos:line="303" pos:column="7"/></cpp:directive></cpp:endif>

    <comment type="block" pos:line="305" pos:column="5">/* don't know if it is portable for getnameinfo() to set h_errno;
     * clear it then see if it was set */</comment>
    <expr_stmt><expr><call><name pos:line="307" pos:column="5">SET_H_ERRNO<pos:position pos:line="307" pos:column="16"/></name><argument_list pos:line="307" pos:column="16">(<argument><expr><literal type="number" pos:line="307" pos:column="17">0<pos:position pos:line="307" pos:column="18"/></literal></expr></argument>)<pos:position pos:line="307" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="307" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="309" pos:column="5">/* default flags are NI_NAMREQD; otherwise, getnameinfo() will return
     * a numeric address string if it fails to resolve the host name;
     * that is *not* what we want here
     *
     * For IPv4-mapped IPv6 addresses, drop down to IPv4 before calling
     * getnameinfo() to avoid getnameinfo bugs (MacOS X, glibc).
     */</comment>
<cpp:if pos:line="316" pos:column="1">#<cpp:directive pos:line="316" pos:column="2">if<pos:position pos:line="316" pos:column="4"/></cpp:directive> <expr><name pos:line="316" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="316" pos:column="18"/></name></expr></cpp:if>
    <if pos:line="317" pos:column="5">if <condition pos:line="317" pos:column="8">(<expr><name><name pos:line="317" pos:column="9">sockaddr<pos:position pos:line="317" pos:column="17"/></name><operator pos:line="317" pos:column="17">-&gt;<pos:position pos:line="317" pos:column="22"/></operator><name pos:line="317" pos:column="19">family<pos:position pos:line="317" pos:column="25"/></name></name> <operator pos:line="317" pos:column="26">==<pos:position pos:line="317" pos:column="28"/></operator> <name pos:line="317" pos:column="29">AF_INET6<pos:position pos:line="317" pos:column="37"/></name> <operator pos:line="317" pos:column="38">&amp;&amp;<pos:position pos:line="317" pos:column="48"/></operator>
        <call><name pos:line="318" pos:column="9">IN6_IS_ADDR_V4MAPPED<pos:position pos:line="318" pos:column="29"/></name><argument_list pos:line="318" pos:column="29">(<argument><expr><operator pos:line="318" pos:column="30">&amp;<pos:position pos:line="318" pos:column="35"/></operator><name><name pos:line="318" pos:column="31">sockaddr<pos:position pos:line="318" pos:column="39"/></name><operator pos:line="318" pos:column="39">-&gt;<pos:position pos:line="318" pos:column="44"/></operator><name pos:line="318" pos:column="41">sa<pos:position pos:line="318" pos:column="43"/></name><operator pos:line="318" pos:column="43">.<pos:position pos:line="318" pos:column="44"/></operator><name pos:line="318" pos:column="44">sin6<pos:position pos:line="318" pos:column="48"/></name><operator pos:line="318" pos:column="48">.<pos:position pos:line="318" pos:column="49"/></operator><name pos:line="318" pos:column="49">sin6_addr<pos:position pos:line="318" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="318" pos:column="59"/></argument_list></call></expr>)<pos:position pos:line="318" pos:column="60"/></condition><then pos:line="318" pos:column="60"> <block pos:line="318" pos:column="61">{
        <decl_stmt><decl><type><name><name pos:line="319" pos:column="9">struct<pos:position pos:line="319" pos:column="15"/></name> <name pos:line="319" pos:column="16">sockaddr_in<pos:position pos:line="319" pos:column="27"/></name></name></type> <name pos:line="319" pos:column="28">tmpsa<pos:position pos:line="319" pos:column="33"/></name></decl>;<pos:position pos:line="319" pos:column="34"/></decl_stmt>
        <expr_stmt><expr><name><name pos:line="320" pos:column="9">tmpsa<pos:position pos:line="320" pos:column="14"/></name><operator pos:line="320" pos:column="14">.<pos:position pos:line="320" pos:column="15"/></operator><name pos:line="320" pos:column="15">sin_family<pos:position pos:line="320" pos:column="25"/></name></name> <operator pos:line="320" pos:column="26">=<pos:position pos:line="320" pos:column="27"/></operator> <name pos:line="320" pos:column="28">AF_INET<pos:position pos:line="320" pos:column="35"/></name></expr>;<pos:position pos:line="320" pos:column="36"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="321" pos:column="9">tmpsa<pos:position pos:line="321" pos:column="14"/></name><operator pos:line="321" pos:column="14">.<pos:position pos:line="321" pos:column="15"/></operator><name pos:line="321" pos:column="15">sin_port<pos:position pos:line="321" pos:column="23"/></name></name> <operator pos:line="321" pos:column="24">=<pos:position pos:line="321" pos:column="25"/></operator> <literal type="number" pos:line="321" pos:column="26">0<pos:position pos:line="321" pos:column="27"/></literal></expr>;<pos:position pos:line="321" pos:column="28"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="322" pos:column="9">tmpsa<pos:position pos:line="322" pos:column="14"/></name><operator pos:line="322" pos:column="14">.<pos:position pos:line="322" pos:column="15"/></operator><name pos:line="322" pos:column="15">sin_addr<pos:position pos:line="322" pos:column="23"/></name><operator pos:line="322" pos:column="23">.<pos:position pos:line="322" pos:column="24"/></operator><name pos:line="322" pos:column="24">s_addr<pos:position pos:line="322" pos:column="30"/></name></name> <operator pos:line="322" pos:column="31">=<pos:position pos:line="322" pos:column="32"/></operator> <operator pos:line="322" pos:column="33">(<pos:position pos:line="322" pos:column="34"/></operator><operator pos:line="322" pos:column="34">(<pos:position pos:line="322" pos:column="35"/></operator><name pos:line="322" pos:column="35">apr_uint32_t<pos:position pos:line="322" pos:column="47"/></name> <operator pos:line="322" pos:column="48">*<pos:position pos:line="322" pos:column="49"/></operator><operator pos:line="322" pos:column="49">)<pos:position pos:line="322" pos:column="50"/></operator><name><name pos:line="322" pos:column="50">sockaddr<pos:position pos:line="322" pos:column="58"/></name><operator pos:line="322" pos:column="58">-&gt;<pos:position pos:line="322" pos:column="63"/></operator><name pos:line="322" pos:column="60">ipaddr_ptr<pos:position pos:line="322" pos:column="70"/></name></name><operator pos:line="322" pos:column="70">)<pos:position pos:line="322" pos:column="71"/></operator><index pos:line="322" pos:column="71">[<expr><literal type="number" pos:line="322" pos:column="72">3<pos:position pos:line="322" pos:column="73"/></literal></expr>]<pos:position pos:line="322" pos:column="74"/></index></expr>;<pos:position pos:line="322" pos:column="75"/></expr_stmt>
<cpp:ifdef pos:line="323" pos:column="1">#<cpp:directive pos:line="323" pos:column="2">ifdef<pos:position pos:line="323" pos:column="7"/></cpp:directive> <name pos:line="323" pos:column="8">SIN6_LEN<pos:position pos:line="323" pos:column="16"/></name></cpp:ifdef>
        <expr_stmt><expr><name><name pos:line="324" pos:column="9">tmpsa<pos:position pos:line="324" pos:column="14"/></name><operator pos:line="324" pos:column="14">.<pos:position pos:line="324" pos:column="15"/></operator><name pos:line="324" pos:column="15">sin_len<pos:position pos:line="324" pos:column="22"/></name></name> <operator pos:line="324" pos:column="23">=<pos:position pos:line="324" pos:column="24"/></operator> <sizeof pos:line="324" pos:column="25">sizeof<argument_list pos:line="324" pos:column="31">(<argument><expr><name pos:line="324" pos:column="32">tmpsa<pos:position pos:line="324" pos:column="37"/></name></expr></argument>)<pos:position pos:line="324" pos:column="38"/></argument_list></sizeof></expr>;<pos:position pos:line="324" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="325" pos:column="1">#<cpp:directive pos:line="325" pos:column="2">endif<pos:position pos:line="325" pos:column="7"/></cpp:directive></cpp:endif>

        <expr_stmt><expr><name pos:line="327" pos:column="9">rc<pos:position pos:line="327" pos:column="11"/></name> <operator pos:line="327" pos:column="12">=<pos:position pos:line="327" pos:column="13"/></operator> <call><name pos:line="327" pos:column="14">getnameinfo<pos:position pos:line="327" pos:column="25"/></name><argument_list pos:line="327" pos:column="25">(<argument><expr><operator pos:line="327" pos:column="26">(<pos:position pos:line="327" pos:column="27"/></operator><specifier pos:line="327" pos:column="27">const<pos:position pos:line="327" pos:column="32"/></specifier> struct <name pos:line="327" pos:column="40">sockaddr<pos:position pos:line="327" pos:column="48"/></name> <operator pos:line="327" pos:column="49">*<pos:position pos:line="327" pos:column="50"/></operator><operator pos:line="327" pos:column="50">)<pos:position pos:line="327" pos:column="51"/></operator><operator pos:line="327" pos:column="51">&amp;<pos:position pos:line="327" pos:column="56"/></operator><name pos:line="327" pos:column="52">tmpsa<pos:position pos:line="327" pos:column="57"/></name></expr></argument>, <argument><expr><sizeof pos:line="327" pos:column="59">sizeof<argument_list pos:line="327" pos:column="65">(<argument><expr><name pos:line="327" pos:column="66">tmpsa<pos:position pos:line="327" pos:column="71"/></name></expr></argument>)<pos:position pos:line="327" pos:column="72"/></argument_list></sizeof></expr></argument>,
                         <argument><expr><name pos:line="328" pos:column="26">tmphostname<pos:position pos:line="328" pos:column="37"/></name></expr></argument>, <argument><expr><sizeof pos:line="328" pos:column="39">sizeof<argument_list pos:line="328" pos:column="45">(<argument><expr><name pos:line="328" pos:column="46">tmphostname<pos:position pos:line="328" pos:column="57"/></name></expr></argument>)<pos:position pos:line="328" pos:column="58"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="328" pos:column="60">NULL<pos:position pos:line="328" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="328" pos:column="66">0<pos:position pos:line="328" pos:column="67"/></literal></expr></argument>,
                         <argument><expr><ternary><condition><expr><name pos:line="329" pos:column="26">flags<pos:position pos:line="329" pos:column="31"/></name> <operator pos:line="329" pos:column="32">!=<pos:position pos:line="329" pos:column="34"/></operator> <literal type="number" pos:line="329" pos:column="35">0<pos:position pos:line="329" pos:column="36"/></literal></expr> ?<pos:position pos:line="329" pos:column="38"/></condition><then pos:line="329" pos:column="38"> <expr><name pos:line="329" pos:column="39">flags<pos:position pos:line="329" pos:column="44"/></name></expr> <pos:position pos:line="329" pos:column="45"/></then><else pos:line="329" pos:column="45">: <expr><name pos:line="329" pos:column="47">NI_NAMEREQD<pos:position pos:line="329" pos:column="58"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="329" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="329" pos:column="60"/></expr_stmt>
    }<pos:position pos:line="330" pos:column="6"/></block></then>
    <else pos:line="331" pos:column="5">else
<cpp:endif pos:line="332" pos:column="1">#<cpp:directive pos:line="332" pos:column="2">endif<pos:position pos:line="332" pos:column="7"/></cpp:directive></cpp:endif>
    <block type="pseudo"><expr_stmt><expr><name pos:line="333" pos:column="5">rc<pos:position pos:line="333" pos:column="7"/></name> <operator pos:line="333" pos:column="8">=<pos:position pos:line="333" pos:column="9"/></operator> <call><name pos:line="333" pos:column="10">getnameinfo<pos:position pos:line="333" pos:column="21"/></name><argument_list pos:line="333" pos:column="21">(<argument><expr><operator pos:line="333" pos:column="22">(<pos:position pos:line="333" pos:column="23"/></operator><specifier pos:line="333" pos:column="23">const<pos:position pos:line="333" pos:column="28"/></specifier> struct <name pos:line="333" pos:column="36">sockaddr<pos:position pos:line="333" pos:column="44"/></name> <operator pos:line="333" pos:column="45">*<pos:position pos:line="333" pos:column="46"/></operator><operator pos:line="333" pos:column="46">)<pos:position pos:line="333" pos:column="47"/></operator><operator pos:line="333" pos:column="47">&amp;<pos:position pos:line="333" pos:column="52"/></operator><name><name pos:line="333" pos:column="48">sockaddr<pos:position pos:line="333" pos:column="56"/></name><operator pos:line="333" pos:column="56">-&gt;<pos:position pos:line="333" pos:column="61"/></operator><name pos:line="333" pos:column="58">sa<pos:position pos:line="333" pos:column="60"/></name></name></expr></argument>, <argument><expr><name><name pos:line="333" pos:column="62">sockaddr<pos:position pos:line="333" pos:column="70"/></name><operator pos:line="333" pos:column="70">-&gt;<pos:position pos:line="333" pos:column="75"/></operator><name pos:line="333" pos:column="72">salen<pos:position pos:line="333" pos:column="77"/></name></name></expr></argument>,
                     <argument><expr><name pos:line="334" pos:column="22">tmphostname<pos:position pos:line="334" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="334" pos:column="35">sizeof<argument_list pos:line="334" pos:column="41">(<argument><expr><name pos:line="334" pos:column="42">tmphostname<pos:position pos:line="334" pos:column="53"/></name></expr></argument>)<pos:position pos:line="334" pos:column="54"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="334" pos:column="56">NULL<pos:position pos:line="334" pos:column="60"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="334" pos:column="62">0<pos:position pos:line="334" pos:column="63"/></literal></expr></argument>,
                     <argument><expr><ternary><condition><expr><name pos:line="335" pos:column="22">flags<pos:position pos:line="335" pos:column="27"/></name> <operator pos:line="335" pos:column="28">!=<pos:position pos:line="335" pos:column="30"/></operator> <literal type="number" pos:line="335" pos:column="31">0<pos:position pos:line="335" pos:column="32"/></literal></expr> ?<pos:position pos:line="335" pos:column="34"/></condition><then pos:line="335" pos:column="34"> <expr><name pos:line="335" pos:column="35">flags<pos:position pos:line="335" pos:column="40"/></name></expr> <pos:position pos:line="335" pos:column="41"/></then><else pos:line="335" pos:column="41">: <expr><name pos:line="335" pos:column="43">NI_NAMEREQD<pos:position pos:line="335" pos:column="54"/></name></expr></else></ternary></expr></argument>)<pos:position pos:line="335" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="335" pos:column="56"/></expr_stmt></block></else></if>
    <if pos:line="336" pos:column="5">if <condition pos:line="336" pos:column="8">(<expr><name pos:line="336" pos:column="9">rc<pos:position pos:line="336" pos:column="11"/></name> <operator pos:line="336" pos:column="12">!=<pos:position pos:line="336" pos:column="14"/></operator> <literal type="number" pos:line="336" pos:column="15">0<pos:position pos:line="336" pos:column="16"/></literal></expr>)<pos:position pos:line="336" pos:column="17"/></condition><then pos:line="336" pos:column="17"> <block pos:line="336" pos:column="18">{
        <expr_stmt><expr><operator pos:line="337" pos:column="9">*<pos:position pos:line="337" pos:column="10"/></operator><name pos:line="337" pos:column="10">hostname<pos:position pos:line="337" pos:column="18"/></name> <operator pos:line="337" pos:column="19">=<pos:position pos:line="337" pos:column="20"/></operator> <name pos:line="337" pos:column="21">NULL<pos:position pos:line="337" pos:column="25"/></name></expr>;<pos:position pos:line="337" pos:column="26"/></expr_stmt>

<cpp:ifndef pos:line="339" pos:column="1">#<cpp:directive pos:line="339" pos:column="2">ifndef<pos:position pos:line="339" pos:column="8"/></cpp:directive> <name pos:line="339" pos:column="9">WIN32<pos:position pos:line="339" pos:column="14"/></name></cpp:ifndef>
        <comment type="block" pos:line="340" pos:column="9">/* something went wrong. Look at the EAI_ error code */</comment>
        <if pos:line="341" pos:column="9">if <condition pos:line="341" pos:column="12">(<expr><name pos:line="341" pos:column="13">rc<pos:position pos:line="341" pos:column="15"/></name> <operator pos:line="341" pos:column="16">==<pos:position pos:line="341" pos:column="18"/></operator> <name pos:line="341" pos:column="19">EAI_SYSTEM<pos:position pos:line="341" pos:column="29"/></name></expr>)<pos:position pos:line="341" pos:column="30"/></condition><then pos:line="341" pos:column="30"> <block pos:line="341" pos:column="31">{
            <comment type="block" pos:line="342" pos:column="13">/* EAI_SYSTEM      System error returned in errno. */</comment>
            <comment type="block" pos:line="343" pos:column="13">/* IMHO, Implementations that set h_errno a simply broken. */</comment>
            <if pos:line="344" pos:column="13">if <condition pos:line="344" pos:column="16">(<expr><name pos:line="344" pos:column="17">h_errno<pos:position pos:line="344" pos:column="24"/></name></expr>)<pos:position pos:line="344" pos:column="25"/></condition><then pos:line="344" pos:column="25"> <block pos:line="344" pos:column="26">{ <comment type="block" pos:line="344" pos:column="28">/* for broken implementations which set h_errno */</comment>
                <return pos:line="345" pos:column="17">return <expr><name pos:line="345" pos:column="24">h_errno<pos:position pos:line="345" pos:column="31"/></name> <operator pos:line="345" pos:column="32">+<pos:position pos:line="345" pos:column="33"/></operator> <name pos:line="345" pos:column="34">APR_OS_START_SYSERR<pos:position pos:line="345" pos:column="53"/></name></expr>;<pos:position pos:line="345" pos:column="54"/></return>
            }<pos:position pos:line="346" pos:column="14"/></block></then>
            <else pos:line="347" pos:column="13">else <block pos:line="347" pos:column="18">{ <comment type="block" pos:line="347" pos:column="20">/* "normal" case */</comment>
                <return pos:line="348" pos:column="17">return <expr><name pos:line="348" pos:column="24">errno<pos:position pos:line="348" pos:column="29"/></name> <operator pos:line="348" pos:column="30">+<pos:position pos:line="348" pos:column="31"/></operator> <name pos:line="348" pos:column="32">APR_OS_START_SYSERR<pos:position pos:line="348" pos:column="51"/></name></expr>;<pos:position pos:line="348" pos:column="52"/></return>
            }<pos:position pos:line="349" pos:column="14"/></block></else></if>
        }<pos:position pos:line="350" pos:column="10"/></block></then>
        <else pos:line="351" pos:column="9">else 
<cpp:endif pos:line="352" pos:column="1">#<cpp:directive pos:line="352" pos:column="2">endif<pos:position pos:line="352" pos:column="7"/></cpp:directive></cpp:endif>
        <block pos:line="353" pos:column="9">{
<cpp:if pos:line="354" pos:column="1">#<cpp:directive pos:line="354" pos:column="2">if<pos:position pos:line="354" pos:column="4"/></cpp:directive> <expr><call><name pos:line="354" pos:column="5">defined<pos:position pos:line="354" pos:column="12"/></name><argument_list pos:line="354" pos:column="12">(<argument><expr><name pos:line="354" pos:column="13">NEGATIVE_EAI<pos:position pos:line="354" pos:column="25"/></name></expr></argument>)<pos:position pos:line="354" pos:column="26"/></argument_list></call></expr></cpp:if>
            <if pos:line="355" pos:column="13">if <condition pos:line="355" pos:column="16">(<expr><name pos:line="355" pos:column="17">rc<pos:position pos:line="355" pos:column="19"/></name> <operator pos:line="355" pos:column="20">&lt;<pos:position pos:line="355" pos:column="24"/></operator> <literal type="number" pos:line="355" pos:column="22">0<pos:position pos:line="355" pos:column="23"/></literal></expr>)<pos:position pos:line="355" pos:column="24"/></condition><then pos:line="355" pos:column="24"> <block type="pseudo"><expr_stmt><expr><name pos:line="355" pos:column="25">rc<pos:position pos:line="355" pos:column="27"/></name> <operator pos:line="355" pos:column="28">=<pos:position pos:line="355" pos:column="29"/></operator> <operator pos:line="355" pos:column="30">-<pos:position pos:line="355" pos:column="31"/></operator><name pos:line="355" pos:column="31">rc<pos:position pos:line="355" pos:column="33"/></name></expr>;<pos:position pos:line="355" pos:column="34"/></expr_stmt></block></then></if>
<cpp:endif pos:line="356" pos:column="1">#<cpp:directive pos:line="356" pos:column="2">endif<pos:position pos:line="356" pos:column="7"/></cpp:directive></cpp:endif>
            <return pos:line="357" pos:column="13">return <expr><name pos:line="357" pos:column="20">rc<pos:position pos:line="357" pos:column="22"/></name> <operator pos:line="357" pos:column="23">+<pos:position pos:line="357" pos:column="24"/></operator> <name pos:line="357" pos:column="25">APR_OS_START_EAIERR<pos:position pos:line="357" pos:column="44"/></name></expr>;<pos:position pos:line="357" pos:column="45"/></return> <comment type="block" pos:line="357" pos:column="46">/* return the EAI_ error */</comment>
        }<pos:position pos:line="358" pos:column="10"/></block></else></if>
    }<pos:position pos:line="359" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="360" pos:column="5">*<pos:position pos:line="360" pos:column="6"/></operator><name pos:line="360" pos:column="6">hostname<pos:position pos:line="360" pos:column="14"/></name> <operator pos:line="360" pos:column="15">=<pos:position pos:line="360" pos:column="16"/></operator> <name><name pos:line="360" pos:column="17">sockaddr<pos:position pos:line="360" pos:column="25"/></name><operator pos:line="360" pos:column="25">-&gt;<pos:position pos:line="360" pos:column="30"/></operator><name pos:line="360" pos:column="27">hostname<pos:position pos:line="360" pos:column="35"/></name></name> <operator pos:line="360" pos:column="36">=<pos:position pos:line="360" pos:column="37"/></operator> <call><name pos:line="360" pos:column="38">apr_pstrdup<pos:position pos:line="360" pos:column="49"/></name><argument_list pos:line="360" pos:column="49">(<argument><expr><name><name pos:line="360" pos:column="50">sockaddr<pos:position pos:line="360" pos:column="58"/></name><operator pos:line="360" pos:column="58">-&gt;<pos:position pos:line="360" pos:column="63"/></operator><name pos:line="360" pos:column="60">pool<pos:position pos:line="360" pos:column="64"/></name></name></expr></argument>, 
                                                 <argument><expr><name pos:line="361" pos:column="50">tmphostname<pos:position pos:line="361" pos:column="61"/></name></expr></argument>)<pos:position pos:line="361" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="361" pos:column="63"/></expr_stmt>
    <return pos:line="362" pos:column="5">return <expr><name pos:line="362" pos:column="12">APR_SUCCESS<pos:position pos:line="362" pos:column="23"/></name></expr>;<pos:position pos:line="362" pos:column="24"/></return>
<cpp:else pos:line="363" pos:column="1">#<cpp:directive pos:line="363" pos:column="2">else<pos:position pos:line="363" pos:column="6"/></cpp:directive></cpp:else>
<cpp:if pos:line="364" pos:column="1">#<cpp:directive pos:line="364" pos:column="2">if<pos:position pos:line="364" pos:column="4"/></cpp:directive> <expr><name pos:line="364" pos:column="5">APR_HAS_THREADS<pos:position pos:line="364" pos:column="20"/></name> <operator pos:line="364" pos:column="21">&amp;&amp;<pos:position pos:line="364" pos:column="31"/></operator> <operator pos:line="364" pos:column="24">!<pos:position pos:line="364" pos:column="25"/></operator><call><name pos:line="364" pos:column="25">defined<pos:position pos:line="364" pos:column="32"/></name><argument_list pos:line="364" pos:column="32">(<argument><expr><name pos:line="364" pos:column="33">GETHOSTBYADDR_IS_THREAD_SAFE<pos:position pos:line="364" pos:column="61"/></name></expr></argument>)<pos:position pos:line="364" pos:column="62"/></argument_list></call> <operator pos:line="364" pos:column="63">&amp;&amp;<pos:position pos:line="364" pos:column="73"/></operator> \
    <call><name pos:line="365" pos:column="5">defined<pos:position pos:line="365" pos:column="12"/></name><argument_list pos:line="365" pos:column="12">(<argument><expr><name pos:line="365" pos:column="13">HAVE_GETHOSTBYADDR_R<pos:position pos:line="365" pos:column="33"/></name></expr></argument>)<pos:position pos:line="365" pos:column="34"/></argument_list></call> <operator pos:line="365" pos:column="35">&amp;&amp;<pos:position pos:line="365" pos:column="45"/></operator> <operator pos:line="365" pos:column="38">!<pos:position pos:line="365" pos:column="39"/></operator><call><name pos:line="365" pos:column="39">defined<pos:position pos:line="365" pos:column="46"/></name><argument_list pos:line="365" pos:column="46">(<argument><expr><name pos:line="365" pos:column="47">BEOS<pos:position pos:line="365" pos:column="51"/></name></expr></argument>)<pos:position pos:line="365" pos:column="52"/></argument_list></call></expr></cpp:if>
<cpp:ifdef pos:line="366" pos:column="1">#<cpp:directive pos:line="366" pos:column="2">ifdef<pos:position pos:line="366" pos:column="7"/></cpp:directive> <name pos:line="366" pos:column="8">GETHOSTBYNAME_R_HOSTENT_DATA<pos:position pos:line="366" pos:column="36"/></name></cpp:ifdef>
    <decl_stmt><decl><type><name><name pos:line="367" pos:column="5">struct<pos:position pos:line="367" pos:column="11"/></name> <name pos:line="367" pos:column="12">hostent_data<pos:position pos:line="367" pos:column="24"/></name></name></type> <name pos:line="367" pos:column="25">hd<pos:position pos:line="367" pos:column="27"/></name></decl>;<pos:position pos:line="367" pos:column="28"/></decl_stmt>
<cpp:else pos:line="368" pos:column="1">#<cpp:directive pos:line="368" pos:column="2">else<pos:position pos:line="368" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name pos:line="369" pos:column="5">char<pos:position pos:line="369" pos:column="9"/></name></type> <name><name pos:line="369" pos:column="10">tmp<pos:position pos:line="369" pos:column="13"/></name><index pos:line="369" pos:column="13">[<expr><name pos:line="369" pos:column="14">GETHOSTBYNAME_BUFLEN<pos:position pos:line="369" pos:column="34"/></name></expr>]<pos:position pos:line="369" pos:column="35"/></index></name></decl>;<pos:position pos:line="369" pos:column="36"/></decl_stmt>
<cpp:endif pos:line="370" pos:column="1">#<cpp:directive pos:line="370" pos:column="2">endif<pos:position pos:line="370" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="371" pos:column="5">int<pos:position pos:line="371" pos:column="8"/></name></type> <name pos:line="371" pos:column="9">hosterror<pos:position pos:line="371" pos:column="18"/></name></decl>;<pos:position pos:line="371" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="372" pos:column="5">struct<pos:position pos:line="372" pos:column="11"/></name> <name pos:line="372" pos:column="12">hostent<pos:position pos:line="372" pos:column="19"/></name></name></type> <name pos:line="372" pos:column="20">hs<pos:position pos:line="372" pos:column="22"/></name></decl>, <modifier pos:line="372" pos:column="24">*<pos:position pos:line="372" pos:column="25"/></modifier><decl><type ref="prev"/><name pos:line="372" pos:column="25">hptr<pos:position pos:line="372" pos:column="29"/></name></decl>;<pos:position pos:line="372" pos:column="30"/></decl_stmt>

<cpp:if pos:line="374" pos:column="1">#<cpp:directive pos:line="374" pos:column="2">if<pos:position pos:line="374" pos:column="4"/></cpp:directive> <expr><call><name pos:line="374" pos:column="5">defined<pos:position pos:line="374" pos:column="12"/></name><argument_list pos:line="374" pos:column="12">(<argument><expr><name pos:line="374" pos:column="13">GETHOSTBYNAME_R_HOSTENT_DATA<pos:position pos:line="374" pos:column="41"/></name></expr></argument>)<pos:position pos:line="374" pos:column="42"/></argument_list></call></expr></cpp:if>
    <comment type="block" pos:line="375" pos:column="5">/* AIX, HP/UX, D/UX et alia */</comment>
    <expr_stmt><expr><call><name pos:line="376" pos:column="5">gethostbyaddr_r<pos:position pos:line="376" pos:column="20"/></name><argument_list pos:line="376" pos:column="20">(<argument><expr><operator pos:line="376" pos:column="21">(<pos:position pos:line="376" pos:column="22"/></operator><name pos:line="376" pos:column="22">char<pos:position pos:line="376" pos:column="26"/></name> <operator pos:line="376" pos:column="27">*<pos:position pos:line="376" pos:column="28"/></operator><operator pos:line="376" pos:column="28">)<pos:position pos:line="376" pos:column="29"/></operator><operator pos:line="376" pos:column="29">&amp;<pos:position pos:line="376" pos:column="34"/></operator><name><name pos:line="376" pos:column="30">sockaddr<pos:position pos:line="376" pos:column="38"/></name><operator pos:line="376" pos:column="38">-&gt;<pos:position pos:line="376" pos:column="43"/></operator><name pos:line="376" pos:column="40">sa<pos:position pos:line="376" pos:column="42"/></name><operator pos:line="376" pos:column="42">.<pos:position pos:line="376" pos:column="43"/></operator><name pos:line="376" pos:column="43">sin<pos:position pos:line="376" pos:column="46"/></name><operator pos:line="376" pos:column="46">.<pos:position pos:line="376" pos:column="47"/></operator><name pos:line="376" pos:column="47">sin_addr<pos:position pos:line="376" pos:column="55"/></name></name></expr></argument>, 
                  <argument><expr><sizeof pos:line="377" pos:column="19">sizeof<argument_list pos:line="377" pos:column="25">(<argument><expr pos:line="377" pos:column="26">struct <name pos:line="377" pos:column="33">in_addr<pos:position pos:line="377" pos:column="40"/></name></expr></argument>)<pos:position pos:line="377" pos:column="41"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="377" pos:column="43">AF_INET<pos:position pos:line="377" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="377" pos:column="52">&amp;<pos:position pos:line="377" pos:column="57"/></operator><name pos:line="377" pos:column="53">hs<pos:position pos:line="377" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="377" pos:column="57">&amp;<pos:position pos:line="377" pos:column="62"/></operator><name pos:line="377" pos:column="58">hd<pos:position pos:line="377" pos:column="60"/></name></expr></argument>)<pos:position pos:line="377" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="377" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><name pos:line="378" pos:column="5">hptr<pos:position pos:line="378" pos:column="9"/></name> <operator pos:line="378" pos:column="10">=<pos:position pos:line="378" pos:column="11"/></operator> <operator pos:line="378" pos:column="12">&amp;<pos:position pos:line="378" pos:column="17"/></operator><name pos:line="378" pos:column="13">hs<pos:position pos:line="378" pos:column="15"/></name></expr>;<pos:position pos:line="378" pos:column="16"/></expr_stmt>
<cpp:else pos:line="379" pos:column="1">#<cpp:directive pos:line="379" pos:column="2">else<pos:position pos:line="379" pos:column="6"/></cpp:directive></cpp:else>
<cpp:if pos:line="380" pos:column="1">#<cpp:directive pos:line="380" pos:column="2">if<pos:position pos:line="380" pos:column="4"/></cpp:directive> <expr><call><name pos:line="380" pos:column="5">defined<pos:position pos:line="380" pos:column="12"/></name><argument_list pos:line="380" pos:column="12">(<argument><expr><name pos:line="380" pos:column="13">GETHOSTBYNAME_R_GLIBC2<pos:position pos:line="380" pos:column="35"/></name></expr></argument>)<pos:position pos:line="380" pos:column="36"/></argument_list></call></expr></cpp:if>
    <comment type="block" pos:line="381" pos:column="5">/* Linux glibc2+ */</comment>
    <expr_stmt><expr><call><name pos:line="382" pos:column="5">gethostbyaddr_r<pos:position pos:line="382" pos:column="20"/></name><argument_list pos:line="382" pos:column="20">(<argument><expr><operator pos:line="382" pos:column="21">(<pos:position pos:line="382" pos:column="22"/></operator><name pos:line="382" pos:column="22">char<pos:position pos:line="382" pos:column="26"/></name> <operator pos:line="382" pos:column="27">*<pos:position pos:line="382" pos:column="28"/></operator><operator pos:line="382" pos:column="28">)<pos:position pos:line="382" pos:column="29"/></operator><operator pos:line="382" pos:column="29">&amp;<pos:position pos:line="382" pos:column="34"/></operator><name><name pos:line="382" pos:column="30">sockaddr<pos:position pos:line="382" pos:column="38"/></name><operator pos:line="382" pos:column="38">-&gt;<pos:position pos:line="382" pos:column="43"/></operator><name pos:line="382" pos:column="40">sa<pos:position pos:line="382" pos:column="42"/></name><operator pos:line="382" pos:column="42">.<pos:position pos:line="382" pos:column="43"/></operator><name pos:line="382" pos:column="43">sin<pos:position pos:line="382" pos:column="46"/></name><operator pos:line="382" pos:column="46">.<pos:position pos:line="382" pos:column="47"/></operator><name pos:line="382" pos:column="47">sin_addr<pos:position pos:line="382" pos:column="55"/></name></name></expr></argument>, 
                    <argument><expr><sizeof pos:line="383" pos:column="21">sizeof<argument_list pos:line="383" pos:column="27">(<argument><expr pos:line="383" pos:column="28">struct <name pos:line="383" pos:column="35">in_addr<pos:position pos:line="383" pos:column="42"/></name></expr></argument>)<pos:position pos:line="383" pos:column="43"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="383" pos:column="45">AF_INET<pos:position pos:line="383" pos:column="52"/></name></expr></argument>,
                    <argument><expr><operator pos:line="384" pos:column="21">&amp;<pos:position pos:line="384" pos:column="26"/></operator><name pos:line="384" pos:column="22">hs<pos:position pos:line="384" pos:column="24"/></name></expr></argument>, <argument><expr><name pos:line="384" pos:column="26">tmp<pos:position pos:line="384" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="384" pos:column="31">GETHOSTBYNAME_BUFLEN<pos:position pos:line="384" pos:column="51"/></name> <operator pos:line="384" pos:column="52">-<pos:position pos:line="384" pos:column="53"/></operator> <literal type="number" pos:line="384" pos:column="54">1<pos:position pos:line="384" pos:column="55"/></literal></expr></argument>, <argument><expr><operator pos:line="384" pos:column="57">&amp;<pos:position pos:line="384" pos:column="62"/></operator><name pos:line="384" pos:column="58">hptr<pos:position pos:line="384" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="384" pos:column="64">&amp;<pos:position pos:line="384" pos:column="69"/></operator><name pos:line="384" pos:column="65">hosterror<pos:position pos:line="384" pos:column="74"/></name></expr></argument>)<pos:position pos:line="384" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="384" pos:column="76"/></expr_stmt>
<cpp:else pos:line="385" pos:column="1">#<cpp:directive pos:line="385" pos:column="2">else<pos:position pos:line="385" pos:column="6"/></cpp:directive></cpp:else>
    <comment type="block" pos:line="386" pos:column="5">/* Solaris, Irix et alia */</comment>
    <expr_stmt><expr><name pos:line="387" pos:column="5">hptr<pos:position pos:line="387" pos:column="9"/></name> <operator pos:line="387" pos:column="10">=<pos:position pos:line="387" pos:column="11"/></operator> <call><name pos:line="387" pos:column="12">gethostbyaddr_r<pos:position pos:line="387" pos:column="27"/></name><argument_list pos:line="387" pos:column="27">(<argument><expr><operator pos:line="387" pos:column="28">(<pos:position pos:line="387" pos:column="29"/></operator><name pos:line="387" pos:column="29">char<pos:position pos:line="387" pos:column="33"/></name> <operator pos:line="387" pos:column="34">*<pos:position pos:line="387" pos:column="35"/></operator><operator pos:line="387" pos:column="35">)<pos:position pos:line="387" pos:column="36"/></operator><operator pos:line="387" pos:column="36">&amp;<pos:position pos:line="387" pos:column="41"/></operator><name><name pos:line="387" pos:column="37">sockaddr<pos:position pos:line="387" pos:column="45"/></name><operator pos:line="387" pos:column="45">-&gt;<pos:position pos:line="387" pos:column="50"/></operator><name pos:line="387" pos:column="47">sa<pos:position pos:line="387" pos:column="49"/></name><operator pos:line="387" pos:column="49">.<pos:position pos:line="387" pos:column="50"/></operator><name pos:line="387" pos:column="50">sin<pos:position pos:line="387" pos:column="53"/></name><operator pos:line="387" pos:column="53">.<pos:position pos:line="387" pos:column="54"/></operator><name pos:line="387" pos:column="54">sin_addr<pos:position pos:line="387" pos:column="62"/></name></name></expr></argument>, 
                           <argument><expr><sizeof pos:line="388" pos:column="28">sizeof<argument_list pos:line="388" pos:column="34">(<argument><expr pos:line="388" pos:column="35">struct <name pos:line="388" pos:column="42">in_addr<pos:position pos:line="388" pos:column="49"/></name></expr></argument>)<pos:position pos:line="388" pos:column="50"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="388" pos:column="52">AF_INET<pos:position pos:line="388" pos:column="59"/></name></expr></argument>,
                           <argument><expr><operator pos:line="389" pos:column="28">&amp;<pos:position pos:line="389" pos:column="33"/></operator><name pos:line="389" pos:column="29">hs<pos:position pos:line="389" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="389" pos:column="33">tmp<pos:position pos:line="389" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="389" pos:column="38">GETHOSTBYNAME_BUFLEN<pos:position pos:line="389" pos:column="58"/></name></expr></argument>, <argument><expr><operator pos:line="389" pos:column="60">&amp;<pos:position pos:line="389" pos:column="65"/></operator><name pos:line="389" pos:column="61">hosterror<pos:position pos:line="389" pos:column="70"/></name></expr></argument>)<pos:position pos:line="389" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="389" pos:column="72"/></expr_stmt>
<cpp:endif pos:line="390" pos:column="1">#<cpp:directive pos:line="390" pos:column="2">endif<pos:position pos:line="390" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="390" pos:column="8">/* !defined(GETHOSTBYNAME_R_GLIBC2) */</comment>
    <if pos:line="391" pos:column="5">if <condition pos:line="391" pos:column="8">(<expr><operator pos:line="391" pos:column="9">!<pos:position pos:line="391" pos:column="10"/></operator><name pos:line="391" pos:column="10">hptr<pos:position pos:line="391" pos:column="14"/></name></expr>)<pos:position pos:line="391" pos:column="15"/></condition><then pos:line="391" pos:column="15"> <block pos:line="391" pos:column="16">{
        <expr_stmt><expr><operator pos:line="392" pos:column="9">*<pos:position pos:line="392" pos:column="10"/></operator><name pos:line="392" pos:column="10">hostname<pos:position pos:line="392" pos:column="18"/></name> <operator pos:line="392" pos:column="19">=<pos:position pos:line="392" pos:column="20"/></operator> <name pos:line="392" pos:column="21">NULL<pos:position pos:line="392" pos:column="25"/></name></expr>;<pos:position pos:line="392" pos:column="26"/></expr_stmt>
        <return pos:line="393" pos:column="9">return <expr><name pos:line="393" pos:column="16">hosterror<pos:position pos:line="393" pos:column="25"/></name> <operator pos:line="393" pos:column="26">+<pos:position pos:line="393" pos:column="27"/></operator> <name pos:line="393" pos:column="28">APR_OS_START_SYSERR<pos:position pos:line="393" pos:column="47"/></name></expr>;<pos:position pos:line="393" pos:column="48"/></return>
    }<pos:position pos:line="394" pos:column="6"/></block></then></if>
<cpp:endif pos:line="395" pos:column="1">#<cpp:directive pos:line="395" pos:column="2">endif<pos:position pos:line="395" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="395" pos:column="8">/* !defined(GETHOSTBYNAME_R_HOSTENT_DATA) */</comment>
<cpp:else pos:line="396" pos:column="1">#<cpp:directive pos:line="396" pos:column="2">else<pos:position pos:line="396" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name pos:line="397" pos:column="5">struct<pos:position pos:line="397" pos:column="11"/></name> <name pos:line="397" pos:column="12">hostent<pos:position pos:line="397" pos:column="19"/></name></name> <modifier pos:line="397" pos:column="20">*<pos:position pos:line="397" pos:column="21"/></modifier></type><name pos:line="397" pos:column="21">hptr<pos:position pos:line="397" pos:column="25"/></name></decl>;<pos:position pos:line="397" pos:column="26"/></decl_stmt>
    <expr_stmt><expr><name pos:line="398" pos:column="5">hptr<pos:position pos:line="398" pos:column="9"/></name> <operator pos:line="398" pos:column="10">=<pos:position pos:line="398" pos:column="11"/></operator> <call><name pos:line="398" pos:column="12">gethostbyaddr<pos:position pos:line="398" pos:column="25"/></name><argument_list pos:line="398" pos:column="25">(<argument><expr><operator pos:line="398" pos:column="26">(<pos:position pos:line="398" pos:column="27"/></operator><name pos:line="398" pos:column="27">char<pos:position pos:line="398" pos:column="31"/></name> <operator pos:line="398" pos:column="32">*<pos:position pos:line="398" pos:column="33"/></operator><operator pos:line="398" pos:column="33">)<pos:position pos:line="398" pos:column="34"/></operator><operator pos:line="398" pos:column="34">&amp;<pos:position pos:line="398" pos:column="39"/></operator><name><name pos:line="398" pos:column="35">sockaddr<pos:position pos:line="398" pos:column="43"/></name><operator pos:line="398" pos:column="43">-&gt;<pos:position pos:line="398" pos:column="48"/></operator><name pos:line="398" pos:column="45">sa<pos:position pos:line="398" pos:column="47"/></name><operator pos:line="398" pos:column="47">.<pos:position pos:line="398" pos:column="48"/></operator><name pos:line="398" pos:column="48">sin<pos:position pos:line="398" pos:column="51"/></name><operator pos:line="398" pos:column="51">.<pos:position pos:line="398" pos:column="52"/></operator><name pos:line="398" pos:column="52">sin_addr<pos:position pos:line="398" pos:column="60"/></name></name></expr></argument>, 
                         <argument><expr><sizeof pos:line="399" pos:column="26">sizeof<argument_list pos:line="399" pos:column="32">(<argument><expr pos:line="399" pos:column="33">struct <name pos:line="399" pos:column="40">in_addr<pos:position pos:line="399" pos:column="47"/></name></expr></argument>)<pos:position pos:line="399" pos:column="48"/></argument_list></sizeof></expr></argument>, <argument><expr><name pos:line="399" pos:column="50">AF_INET<pos:position pos:line="399" pos:column="57"/></name></expr></argument>)<pos:position pos:line="399" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="399" pos:column="59"/></expr_stmt>
<cpp:endif pos:line="400" pos:column="1">#<cpp:directive pos:line="400" pos:column="2">endif<pos:position pos:line="400" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="402" pos:column="5">if <condition pos:line="402" pos:column="8">(<expr><name pos:line="402" pos:column="9">hptr<pos:position pos:line="402" pos:column="13"/></name></expr>)<pos:position pos:line="402" pos:column="14"/></condition><then pos:line="402" pos:column="14"> <block pos:line="402" pos:column="15">{
        <expr_stmt><expr><operator pos:line="403" pos:column="9">*<pos:position pos:line="403" pos:column="10"/></operator><name pos:line="403" pos:column="10">hostname<pos:position pos:line="403" pos:column="18"/></name> <operator pos:line="403" pos:column="19">=<pos:position pos:line="403" pos:column="20"/></operator> <name><name pos:line="403" pos:column="21">sockaddr<pos:position pos:line="403" pos:column="29"/></name><operator pos:line="403" pos:column="29">-&gt;<pos:position pos:line="403" pos:column="34"/></operator><name pos:line="403" pos:column="31">hostname<pos:position pos:line="403" pos:column="39"/></name></name> <operator pos:line="403" pos:column="40">=<pos:position pos:line="403" pos:column="41"/></operator> <call><name pos:line="403" pos:column="42">apr_pstrdup<pos:position pos:line="403" pos:column="53"/></name><argument_list pos:line="403" pos:column="53">(<argument><expr><name><name pos:line="403" pos:column="54">sockaddr<pos:position pos:line="403" pos:column="62"/></name><operator pos:line="403" pos:column="62">-&gt;<pos:position pos:line="403" pos:column="67"/></operator><name pos:line="403" pos:column="64">pool<pos:position pos:line="403" pos:column="68"/></name></name></expr></argument>, <argument><expr><name><name pos:line="403" pos:column="70">hptr<pos:position pos:line="403" pos:column="74"/></name><operator pos:line="403" pos:column="74">-&gt;<pos:position pos:line="403" pos:column="79"/></operator><name pos:line="403" pos:column="76">h_name<pos:position pos:line="403" pos:column="82"/></name></name></expr></argument>)<pos:position pos:line="403" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="403" pos:column="84"/></expr_stmt>
        <return pos:line="404" pos:column="9">return <expr><name pos:line="404" pos:column="16">APR_SUCCESS<pos:position pos:line="404" pos:column="27"/></name></expr>;<pos:position pos:line="404" pos:column="28"/></return>
    }<pos:position pos:line="405" pos:column="6"/></block></then></if>
    <expr_stmt><expr><operator pos:line="406" pos:column="5">*<pos:position pos:line="406" pos:column="6"/></operator><name pos:line="406" pos:column="6">hostname<pos:position pos:line="406" pos:column="14"/></name> <operator pos:line="406" pos:column="15">=<pos:position pos:line="406" pos:column="16"/></operator> <name pos:line="406" pos:column="17">NULL<pos:position pos:line="406" pos:column="21"/></name></expr>;<pos:position pos:line="406" pos:column="22"/></expr_stmt>
<cpp:if pos:line="407" pos:column="1">#<cpp:directive pos:line="407" pos:column="2">if<pos:position pos:line="407" pos:column="4"/></cpp:directive> <expr><call><name pos:line="407" pos:column="5">defined<pos:position pos:line="407" pos:column="12"/></name><argument_list pos:line="407" pos:column="12">(<argument><expr><name pos:line="407" pos:column="13">WIN32<pos:position pos:line="407" pos:column="18"/></name></expr></argument>)<pos:position pos:line="407" pos:column="19"/></argument_list></call></expr></cpp:if>
    <return pos:line="408" pos:column="5">return <expr><call><name pos:line="408" pos:column="12">apr_get_netos_error<pos:position pos:line="408" pos:column="31"/></name><argument_list pos:line="408" pos:column="31">()<pos:position pos:line="408" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="408" pos:column="34"/></return>
<cpp:elif pos:line="409" pos:column="1">#<cpp:directive pos:line="409" pos:column="2">elif<pos:position pos:line="409" pos:column="6"/></cpp:directive> <expr><call><name pos:line="409" pos:column="7">defined<pos:position pos:line="409" pos:column="14"/></name><argument_list pos:line="409" pos:column="14">(<argument><expr><name pos:line="409" pos:column="15">OS2<pos:position pos:line="409" pos:column="18"/></name></expr></argument>)<pos:position pos:line="409" pos:column="19"/></argument_list></call></expr></cpp:elif>
    <return pos:line="410" pos:column="5">return <expr><name pos:line="410" pos:column="12">h_errno<pos:position pos:line="410" pos:column="19"/></name></expr>;<pos:position pos:line="410" pos:column="20"/></return>
<cpp:else pos:line="411" pos:column="1">#<cpp:directive pos:line="411" pos:column="2">else<pos:position pos:line="411" pos:column="6"/></cpp:directive></cpp:else>
    <return pos:line="412" pos:column="5">return <expr><name pos:line="412" pos:column="12">h_errno<pos:position pos:line="412" pos:column="19"/></name> <operator pos:line="412" pos:column="20">+<pos:position pos:line="412" pos:column="21"/></operator> <name pos:line="412" pos:column="22">APR_OS_START_SYSERR<pos:position pos:line="412" pos:column="41"/></name></expr>;<pos:position pos:line="412" pos:column="42"/></return>
<cpp:endif pos:line="413" pos:column="1">#<cpp:directive pos:line="413" pos:column="2">endif<pos:position pos:line="413" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="414" pos:column="1">#<cpp:directive pos:line="414" pos:column="2">endif<pos:position pos:line="414" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="415" pos:column="2"/></block>

<macro><name pos:line="417" pos:column="1">APR_DECLARE<pos:position pos:line="417" pos:column="12"/></name><argument_list pos:line="417" pos:column="12">(<argument pos:line="417" pos:column="13">apr_status_t<pos:position pos:line="417" pos:column="25"/></argument>)<pos:position pos:line="417" pos:column="26"/></argument_list></macro> <macro><name pos:line="417" pos:column="27">apr_getservbyname<pos:position pos:line="417" pos:column="44"/></name><argument_list pos:line="417" pos:column="44">(<argument pos:line="417" pos:column="45">apr_sockaddr_t *sockaddr<pos:position pos:line="417" pos:column="69"/></argument>,
                                            <argument pos:line="418" pos:column="45">const char *servname<pos:position pos:line="418" pos:column="65"/></argument>)<pos:position pos:line="418" pos:column="66"/></argument_list></macro>
<block pos:line="419" pos:column="1">{
<cpp:if pos:line="420" pos:column="1">#<cpp:directive pos:line="420" pos:column="2">if<pos:position pos:line="420" pos:column="4"/></cpp:directive> <expr><name pos:line="420" pos:column="5">APR_HAS_THREADS<pos:position pos:line="420" pos:column="20"/></name> <operator pos:line="420" pos:column="21">&amp;&amp;<pos:position pos:line="420" pos:column="31"/></operator> <operator pos:line="420" pos:column="24">!<pos:position pos:line="420" pos:column="25"/></operator><call><name pos:line="420" pos:column="25">defined<pos:position pos:line="420" pos:column="32"/></name><argument_list pos:line="420" pos:column="32">(<argument><expr><name pos:line="420" pos:column="33">GETSERVBYNAME_IS_THREAD_SAFE<pos:position pos:line="420" pos:column="61"/></name></expr></argument>)<pos:position pos:line="420" pos:column="62"/></argument_list></call> <operator pos:line="420" pos:column="63">&amp;&amp;<pos:position pos:line="420" pos:column="73"/></operator> \
    <call><name pos:line="421" pos:column="5">defined<pos:position pos:line="421" pos:column="12"/></name><argument_list pos:line="421" pos:column="12">(<argument><expr><name pos:line="421" pos:column="13">HAVE_GETSERVBYNAME_R<pos:position pos:line="421" pos:column="33"/></name></expr></argument>)<pos:position pos:line="421" pos:column="34"/></argument_list></call> <operator pos:line="421" pos:column="35">&amp;&amp;<pos:position pos:line="421" pos:column="45"/></operator> \
    <operator pos:line="422" pos:column="5">(<pos:position pos:line="422" pos:column="6"/></operator><call><name pos:line="422" pos:column="6">defined<pos:position pos:line="422" pos:column="13"/></name><argument_list pos:line="422" pos:column="13">(<argument><expr><name pos:line="422" pos:column="14">GETSERVBYNAME_R_GLIBC2<pos:position pos:line="422" pos:column="36"/></name></expr></argument>)<pos:position pos:line="422" pos:column="37"/></argument_list></call> <operator pos:line="422" pos:column="38">||<pos:position pos:line="422" pos:column="40"/></operator> <call><name pos:line="422" pos:column="41">defined<pos:position pos:line="422" pos:column="48"/></name><argument_list pos:line="422" pos:column="48">(<argument><expr><name pos:line="422" pos:column="49">GETSERVBYNAME_R_SOLARIS<pos:position pos:line="422" pos:column="72"/></name></expr></argument>)<pos:position pos:line="422" pos:column="73"/></argument_list></call> <operator pos:line="422" pos:column="74">||<pos:position pos:line="422" pos:column="76"/></operator> \
     <call><name pos:line="423" pos:column="6">defined<pos:position pos:line="423" pos:column="13"/></name><argument_list pos:line="423" pos:column="13">(<argument><expr><name pos:line="423" pos:column="14">GETSERVBYNAME_R_OSF1<pos:position pos:line="423" pos:column="34"/></name></expr></argument>)<pos:position pos:line="423" pos:column="35"/></argument_list></call><operator pos:line="423" pos:column="35">)<pos:position pos:line="423" pos:column="36"/></operator></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="424" pos:column="5">struct<pos:position pos:line="424" pos:column="11"/></name> <name pos:line="424" pos:column="12">servent<pos:position pos:line="424" pos:column="19"/></name></name></type> <name pos:line="424" pos:column="20">se<pos:position pos:line="424" pos:column="22"/></name></decl>;<pos:position pos:line="424" pos:column="23"/></decl_stmt>
<cpp:if pos:line="425" pos:column="1">#<cpp:directive pos:line="425" pos:column="2">if<pos:position pos:line="425" pos:column="4"/></cpp:directive> <expr><call><name pos:line="425" pos:column="5">defined<pos:position pos:line="425" pos:column="12"/></name><argument_list pos:line="425" pos:column="12">(<argument><expr><name pos:line="425" pos:column="13">GETSERVBYNAME_R_OSF1<pos:position pos:line="425" pos:column="33"/></name></expr></argument>)<pos:position pos:line="425" pos:column="34"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="426" pos:column="5">struct<pos:position pos:line="426" pos:column="11"/></name> <name pos:line="426" pos:column="12">servent_data<pos:position pos:line="426" pos:column="24"/></name></name></type> <name pos:line="426" pos:column="25">sed<pos:position pos:line="426" pos:column="28"/></name></decl>;<pos:position pos:line="426" pos:column="29"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="428" pos:column="5">memset<pos:position pos:line="428" pos:column="11"/></name><argument_list pos:line="428" pos:column="11">(<argument><expr><operator pos:line="428" pos:column="12">&amp;<pos:position pos:line="428" pos:column="17"/></operator><name pos:line="428" pos:column="13">sed<pos:position pos:line="428" pos:column="16"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="428" pos:column="18">0<pos:position pos:line="428" pos:column="19"/></literal></expr></argument>, <argument><expr><sizeof pos:line="428" pos:column="21">sizeof<argument_list pos:line="428" pos:column="27">(<argument><expr><name pos:line="428" pos:column="28">sed<pos:position pos:line="428" pos:column="31"/></name></expr></argument>)<pos:position pos:line="428" pos:column="32"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="428" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="428" pos:column="34"/></expr_stmt> <comment type="block" pos:line="428" pos:column="35">/* must zero fill before use */</comment>
<cpp:else pos:line="429" pos:column="1">#<cpp:directive pos:line="429" pos:column="2">else<pos:position pos:line="429" pos:column="6"/></cpp:directive></cpp:else>
<cpp:if pos:line="430" pos:column="1">#<cpp:directive pos:line="430" pos:column="2">if<pos:position pos:line="430" pos:column="4"/></cpp:directive> <expr><call><name pos:line="430" pos:column="5">defined<pos:position pos:line="430" pos:column="12"/></name><argument_list pos:line="430" pos:column="12">(<argument><expr><name pos:line="430" pos:column="13">GETSERVBYNAME_R_GLIBC2<pos:position pos:line="430" pos:column="35"/></name></expr></argument>)<pos:position pos:line="430" pos:column="36"/></argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name><name pos:line="431" pos:column="5">struct<pos:position pos:line="431" pos:column="11"/></name> <name pos:line="431" pos:column="12">servent<pos:position pos:line="431" pos:column="19"/></name></name> <modifier pos:line="431" pos:column="20">*<pos:position pos:line="431" pos:column="21"/></modifier></type><name pos:line="431" pos:column="21">res<pos:position pos:line="431" pos:column="24"/></name></decl>;<pos:position pos:line="431" pos:column="25"/></decl_stmt>
<cpp:endif pos:line="432" pos:column="1">#<cpp:directive pos:line="432" pos:column="2">endif<pos:position pos:line="432" pos:column="7"/></cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name pos:line="433" pos:column="5">char<pos:position pos:line="433" pos:column="9"/></name></type> <name><name pos:line="433" pos:column="10">buf<pos:position pos:line="433" pos:column="13"/></name><index pos:line="433" pos:column="13">[<expr><literal type="number" pos:line="433" pos:column="14">1024<pos:position pos:line="433" pos:column="18"/></literal></expr>]<pos:position pos:line="433" pos:column="19"/></index></name></decl>;<pos:position pos:line="433" pos:column="20"/></decl_stmt>
<cpp:endif pos:line="434" pos:column="1">#<cpp:directive pos:line="434" pos:column="2">endif<pos:position pos:line="434" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:else pos:line="435" pos:column="1">#<cpp:directive pos:line="435" pos:column="2">else<pos:position pos:line="435" pos:column="6"/></cpp:directive></cpp:else>
    <decl_stmt><decl><type><name><name pos:line="436" pos:column="5">struct<pos:position pos:line="436" pos:column="11"/></name> <name pos:line="436" pos:column="12">servent<pos:position pos:line="436" pos:column="19"/></name></name> <modifier pos:line="436" pos:column="20">*<pos:position pos:line="436" pos:column="21"/></modifier></type><name pos:line="436" pos:column="21">se<pos:position pos:line="436" pos:column="23"/></name></decl>;<pos:position pos:line="436" pos:column="24"/></decl_stmt>
<cpp:endif pos:line="437" pos:column="1">#<cpp:directive pos:line="437" pos:column="2">endif<pos:position pos:line="437" pos:column="7"/></cpp:directive></cpp:endif>

    <if pos:line="439" pos:column="5">if <condition pos:line="439" pos:column="8">(<expr><name pos:line="439" pos:column="9">servname<pos:position pos:line="439" pos:column="17"/></name> <operator pos:line="439" pos:column="18">==<pos:position pos:line="439" pos:column="20"/></operator> <name pos:line="439" pos:column="21">NULL<pos:position pos:line="439" pos:column="25"/></name></expr>)<pos:position pos:line="439" pos:column="26"/></condition><then pos:line="439" pos:column="26">
        <block type="pseudo"><return pos:line="440" pos:column="9">return <expr><name pos:line="440" pos:column="16">APR_EINVAL<pos:position pos:line="440" pos:column="26"/></name></expr>;<pos:position pos:line="440" pos:column="27"/></return></block></then></if>

<cpp:if pos:line="442" pos:column="1">#<cpp:directive pos:line="442" pos:column="2">if<pos:position pos:line="442" pos:column="4"/></cpp:directive> <expr><name pos:line="442" pos:column="5">APR_HAS_THREADS<pos:position pos:line="442" pos:column="20"/></name> <operator pos:line="442" pos:column="21">&amp;&amp;<pos:position pos:line="442" pos:column="31"/></operator> <operator pos:line="442" pos:column="24">!<pos:position pos:line="442" pos:column="25"/></operator><call><name pos:line="442" pos:column="25">defined<pos:position pos:line="442" pos:column="32"/></name><argument_list pos:line="442" pos:column="32">(<argument><expr><name pos:line="442" pos:column="33">GETSERVBYNAME_IS_THREAD_SAFE<pos:position pos:line="442" pos:column="61"/></name></expr></argument>)<pos:position pos:line="442" pos:column="62"/></argument_list></call> <operator pos:line="442" pos:column="63">&amp;&amp;<pos:position pos:line="442" pos:column="73"/></operator> \
    <call><name pos:line="443" pos:column="5">defined<pos:position pos:line="443" pos:column="12"/></name><argument_list pos:line="443" pos:column="12">(<argument><expr><name pos:line="443" pos:column="13">HAVE_GETSERVBYNAME_R<pos:position pos:line="443" pos:column="33"/></name></expr></argument>)<pos:position pos:line="443" pos:column="34"/></argument_list></call> <operator pos:line="443" pos:column="35">&amp;&amp;<pos:position pos:line="443" pos:column="45"/></operator> \
    <operator pos:line="444" pos:column="5">(<pos:position pos:line="444" pos:column="6"/></operator><call><name pos:line="444" pos:column="6">defined<pos:position pos:line="444" pos:column="13"/></name><argument_list pos:line="444" pos:column="13">(<argument><expr><name pos:line="444" pos:column="14">GETSERVBYNAME_R_GLIBC2<pos:position pos:line="444" pos:column="36"/></name></expr></argument>)<pos:position pos:line="444" pos:column="37"/></argument_list></call> <operator pos:line="444" pos:column="38">||<pos:position pos:line="444" pos:column="40"/></operator> <call><name pos:line="444" pos:column="41">defined<pos:position pos:line="444" pos:column="48"/></name><argument_list pos:line="444" pos:column="48">(<argument><expr><name pos:line="444" pos:column="49">GETSERVBYNAME_R_SOLARIS<pos:position pos:line="444" pos:column="72"/></name></expr></argument>)<pos:position pos:line="444" pos:column="73"/></argument_list></call> <operator pos:line="444" pos:column="74">||<pos:position pos:line="444" pos:column="76"/></operator> \
     <call><name pos:line="445" pos:column="6">defined<pos:position pos:line="445" pos:column="13"/></name><argument_list pos:line="445" pos:column="13">(<argument><expr><name pos:line="445" pos:column="14">GETSERVBYNAME_R_OSF1<pos:position pos:line="445" pos:column="34"/></name></expr></argument>)<pos:position pos:line="445" pos:column="35"/></argument_list></call><operator pos:line="445" pos:column="35">)<pos:position pos:line="445" pos:column="36"/></operator></expr></cpp:if>
<cpp:if pos:line="446" pos:column="1">#<cpp:directive pos:line="446" pos:column="2">if<pos:position pos:line="446" pos:column="4"/></cpp:directive> <expr><call><name pos:line="446" pos:column="5">defined<pos:position pos:line="446" pos:column="12"/></name><argument_list pos:line="446" pos:column="12">(<argument><expr><name pos:line="446" pos:column="13">GETSERVBYNAME_R_GLIBC2<pos:position pos:line="446" pos:column="35"/></name></expr></argument>)<pos:position pos:line="446" pos:column="36"/></argument_list></call></expr></cpp:if>
    <if pos:line="447" pos:column="5">if <condition pos:line="447" pos:column="8">(<expr><call><name pos:line="447" pos:column="9">getservbyname_r<pos:position pos:line="447" pos:column="24"/></name><argument_list pos:line="447" pos:column="24">(<argument><expr><name pos:line="447" pos:column="25">servname<pos:position pos:line="447" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="447" pos:column="35">NULL<pos:position pos:line="447" pos:column="39"/></name></expr></argument>,
                        <argument><expr><operator pos:line="448" pos:column="25">&amp;<pos:position pos:line="448" pos:column="30"/></operator><name pos:line="448" pos:column="26">se<pos:position pos:line="448" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="448" pos:column="30">buf<pos:position pos:line="448" pos:column="33"/></name></expr></argument>, <argument><expr><sizeof pos:line="448" pos:column="35">sizeof<argument_list pos:line="448" pos:column="41">(<argument><expr><name pos:line="448" pos:column="42">buf<pos:position pos:line="448" pos:column="45"/></name></expr></argument>)<pos:position pos:line="448" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><operator pos:line="448" pos:column="48">&amp;<pos:position pos:line="448" pos:column="53"/></operator><name pos:line="448" pos:column="49">res<pos:position pos:line="448" pos:column="52"/></name></expr></argument>)<pos:position pos:line="448" pos:column="53"/></argument_list></call> <operator pos:line="448" pos:column="54">==<pos:position pos:line="448" pos:column="56"/></operator> <literal type="number" pos:line="448" pos:column="57">0<pos:position pos:line="448" pos:column="58"/></literal> <operator pos:line="448" pos:column="59">&amp;&amp;<pos:position pos:line="448" pos:column="69"/></operator> <name pos:line="448" pos:column="62">res<pos:position pos:line="448" pos:column="65"/></name> <operator pos:line="448" pos:column="66">!=<pos:position pos:line="448" pos:column="68"/></operator> <name pos:line="448" pos:column="69">NULL<pos:position pos:line="448" pos:column="73"/></name></expr>)<pos:position pos:line="448" pos:column="74"/></condition><then pos:line="448" pos:column="74"> <block pos:line="448" pos:column="75">{
        <expr_stmt><expr><name><name pos:line="449" pos:column="9">sockaddr<pos:position pos:line="449" pos:column="17"/></name><operator pos:line="449" pos:column="17">-&gt;<pos:position pos:line="449" pos:column="22"/></operator><name pos:line="449" pos:column="19">port<pos:position pos:line="449" pos:column="23"/></name></name> <operator pos:line="449" pos:column="24">=<pos:position pos:line="449" pos:column="25"/></operator> <call><name pos:line="449" pos:column="26">ntohs<pos:position pos:line="449" pos:column="31"/></name><argument_list pos:line="449" pos:column="31">(<argument><expr><name><name pos:line="449" pos:column="32">res<pos:position pos:line="449" pos:column="35"/></name><operator pos:line="449" pos:column="35">-&gt;<pos:position pos:line="449" pos:column="40"/></operator><name pos:line="449" pos:column="37">s_port<pos:position pos:line="449" pos:column="43"/></name></name></expr></argument>)<pos:position pos:line="449" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="449" pos:column="45"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="450" pos:column="9">sockaddr<pos:position pos:line="450" pos:column="17"/></name><operator pos:line="450" pos:column="17">-&gt;<pos:position pos:line="450" pos:column="22"/></operator><name pos:line="450" pos:column="19">servname<pos:position pos:line="450" pos:column="27"/></name></name> <operator pos:line="450" pos:column="28">=<pos:position pos:line="450" pos:column="29"/></operator> <call><name pos:line="450" pos:column="30">apr_pstrdup<pos:position pos:line="450" pos:column="41"/></name><argument_list pos:line="450" pos:column="41">(<argument><expr><name><name pos:line="450" pos:column="42">sockaddr<pos:position pos:line="450" pos:column="50"/></name><operator pos:line="450" pos:column="50">-&gt;<pos:position pos:line="450" pos:column="55"/></operator><name pos:line="450" pos:column="52">pool<pos:position pos:line="450" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="450" pos:column="58">servname<pos:position pos:line="450" pos:column="66"/></name></expr></argument>)<pos:position pos:line="450" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="450" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="451" pos:column="9">sockaddr<pos:position pos:line="451" pos:column="17"/></name><operator pos:line="451" pos:column="17">-&gt;<pos:position pos:line="451" pos:column="22"/></operator><name pos:line="451" pos:column="19">sa<pos:position pos:line="451" pos:column="21"/></name><operator pos:line="451" pos:column="21">.<pos:position pos:line="451" pos:column="22"/></operator><name pos:line="451" pos:column="22">sin<pos:position pos:line="451" pos:column="25"/></name><operator pos:line="451" pos:column="25">.<pos:position pos:line="451" pos:column="26"/></operator><name pos:line="451" pos:column="26">sin_port<pos:position pos:line="451" pos:column="34"/></name></name> <operator pos:line="451" pos:column="35">=<pos:position pos:line="451" pos:column="36"/></operator> <name><name pos:line="451" pos:column="37">res<pos:position pos:line="451" pos:column="40"/></name><operator pos:line="451" pos:column="40">-&gt;<pos:position pos:line="451" pos:column="45"/></operator><name pos:line="451" pos:column="42">s_port<pos:position pos:line="451" pos:column="48"/></name></name></expr>;<pos:position pos:line="451" pos:column="49"/></expr_stmt>
        <return pos:line="452" pos:column="9">return <expr><name pos:line="452" pos:column="16">APR_SUCCESS<pos:position pos:line="452" pos:column="27"/></name></expr>;<pos:position pos:line="452" pos:column="28"/></return>
    }<pos:position pos:line="453" pos:column="6"/></block></then></if>
<cpp:elif pos:line="454" pos:column="1">#<cpp:directive pos:line="454" pos:column="2">elif<pos:position pos:line="454" pos:column="6"/></cpp:directive> <expr><call><name pos:line="454" pos:column="7">defined<pos:position pos:line="454" pos:column="14"/></name><argument_list pos:line="454" pos:column="14">(<argument><expr><name pos:line="454" pos:column="15">GETSERVBYNAME_R_SOLARIS<pos:position pos:line="454" pos:column="38"/></name></expr></argument>)<pos:position pos:line="454" pos:column="39"/></argument_list></call></expr></cpp:elif>
    <if pos:line="455" pos:column="5">if <condition pos:line="455" pos:column="8">(<expr><call><name pos:line="455" pos:column="9">getservbyname_r<pos:position pos:line="455" pos:column="24"/></name><argument_list pos:line="455" pos:column="24">(<argument><expr><name pos:line="455" pos:column="25">servname<pos:position pos:line="455" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="455" pos:column="35">NULL<pos:position pos:line="455" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="455" pos:column="41">&amp;<pos:position pos:line="455" pos:column="46"/></operator><name pos:line="455" pos:column="42">se<pos:position pos:line="455" pos:column="44"/></name></expr></argument>, <argument><expr><name pos:line="455" pos:column="46">buf<pos:position pos:line="455" pos:column="49"/></name></expr></argument>, <argument><expr><sizeof pos:line="455" pos:column="51">sizeof<argument_list pos:line="455" pos:column="57">(<argument><expr><name pos:line="455" pos:column="58">buf<pos:position pos:line="455" pos:column="61"/></name></expr></argument>)<pos:position pos:line="455" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="455" pos:column="63"/></argument_list></call> <operator pos:line="455" pos:column="64">!=<pos:position pos:line="455" pos:column="66"/></operator> <name pos:line="455" pos:column="67">NULL<pos:position pos:line="455" pos:column="71"/></name></expr>)<pos:position pos:line="455" pos:column="72"/></condition><then pos:line="455" pos:column="72"> <block pos:line="455" pos:column="73">{
        <expr_stmt><expr><name><name pos:line="456" pos:column="9">sockaddr<pos:position pos:line="456" pos:column="17"/></name><operator pos:line="456" pos:column="17">-&gt;<pos:position pos:line="456" pos:column="22"/></operator><name pos:line="456" pos:column="19">port<pos:position pos:line="456" pos:column="23"/></name></name> <operator pos:line="456" pos:column="24">=<pos:position pos:line="456" pos:column="25"/></operator> <call><name pos:line="456" pos:column="26">ntohs<pos:position pos:line="456" pos:column="31"/></name><argument_list pos:line="456" pos:column="31">(<argument><expr><name><name pos:line="456" pos:column="32">se<pos:position pos:line="456" pos:column="34"/></name><operator pos:line="456" pos:column="34">.<pos:position pos:line="456" pos:column="35"/></operator><name pos:line="456" pos:column="35">s_port<pos:position pos:line="456" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="456" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="456" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="457" pos:column="9">sockaddr<pos:position pos:line="457" pos:column="17"/></name><operator pos:line="457" pos:column="17">-&gt;<pos:position pos:line="457" pos:column="22"/></operator><name pos:line="457" pos:column="19">servname<pos:position pos:line="457" pos:column="27"/></name></name> <operator pos:line="457" pos:column="28">=<pos:position pos:line="457" pos:column="29"/></operator> <call><name pos:line="457" pos:column="30">apr_pstrdup<pos:position pos:line="457" pos:column="41"/></name><argument_list pos:line="457" pos:column="41">(<argument><expr><name><name pos:line="457" pos:column="42">sockaddr<pos:position pos:line="457" pos:column="50"/></name><operator pos:line="457" pos:column="50">-&gt;<pos:position pos:line="457" pos:column="55"/></operator><name pos:line="457" pos:column="52">pool<pos:position pos:line="457" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="457" pos:column="58">servname<pos:position pos:line="457" pos:column="66"/></name></expr></argument>)<pos:position pos:line="457" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="457" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="458" pos:column="9">sockaddr<pos:position pos:line="458" pos:column="17"/></name><operator pos:line="458" pos:column="17">-&gt;<pos:position pos:line="458" pos:column="22"/></operator><name pos:line="458" pos:column="19">sa<pos:position pos:line="458" pos:column="21"/></name><operator pos:line="458" pos:column="21">.<pos:position pos:line="458" pos:column="22"/></operator><name pos:line="458" pos:column="22">sin<pos:position pos:line="458" pos:column="25"/></name><operator pos:line="458" pos:column="25">.<pos:position pos:line="458" pos:column="26"/></operator><name pos:line="458" pos:column="26">sin_port<pos:position pos:line="458" pos:column="34"/></name></name> <operator pos:line="458" pos:column="35">=<pos:position pos:line="458" pos:column="36"/></operator> <name><name pos:line="458" pos:column="37">se<pos:position pos:line="458" pos:column="39"/></name><operator pos:line="458" pos:column="39">.<pos:position pos:line="458" pos:column="40"/></operator><name pos:line="458" pos:column="40">s_port<pos:position pos:line="458" pos:column="46"/></name></name></expr>;<pos:position pos:line="458" pos:column="47"/></expr_stmt>
        <return pos:line="459" pos:column="9">return <expr><name pos:line="459" pos:column="16">APR_SUCCESS<pos:position pos:line="459" pos:column="27"/></name></expr>;<pos:position pos:line="459" pos:column="28"/></return>
    }<pos:position pos:line="460" pos:column="6"/></block></then></if>
<cpp:elif pos:line="461" pos:column="1">#<cpp:directive pos:line="461" pos:column="2">elif<pos:position pos:line="461" pos:column="6"/></cpp:directive> <expr><call><name pos:line="461" pos:column="7">defined<pos:position pos:line="461" pos:column="14"/></name><argument_list pos:line="461" pos:column="14">(<argument><expr><name pos:line="461" pos:column="15">GETSERVBYNAME_R_OSF1<pos:position pos:line="461" pos:column="35"/></name></expr></argument>)<pos:position pos:line="461" pos:column="36"/></argument_list></call></expr></cpp:elif>
    <if pos:line="462" pos:column="5">if <condition pos:line="462" pos:column="8">(<expr><call><name pos:line="462" pos:column="9">getservbyname_r<pos:position pos:line="462" pos:column="24"/></name><argument_list pos:line="462" pos:column="24">(<argument><expr><name pos:line="462" pos:column="25">servname<pos:position pos:line="462" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="462" pos:column="35">NULL<pos:position pos:line="462" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="462" pos:column="41">&amp;<pos:position pos:line="462" pos:column="46"/></operator><name pos:line="462" pos:column="42">se<pos:position pos:line="462" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="462" pos:column="46">&amp;<pos:position pos:line="462" pos:column="51"/></operator><name pos:line="462" pos:column="47">sed<pos:position pos:line="462" pos:column="50"/></name></expr></argument>)<pos:position pos:line="462" pos:column="51"/></argument_list></call> <operator pos:line="462" pos:column="52">==<pos:position pos:line="462" pos:column="54"/></operator> <literal type="number" pos:line="462" pos:column="55">0<pos:position pos:line="462" pos:column="56"/></literal></expr>)<pos:position pos:line="462" pos:column="57"/></condition><then pos:line="462" pos:column="57"> <block pos:line="462" pos:column="58">{
        <expr_stmt><expr><name><name pos:line="463" pos:column="9">sockaddr<pos:position pos:line="463" pos:column="17"/></name><operator pos:line="463" pos:column="17">-&gt;<pos:position pos:line="463" pos:column="22"/></operator><name pos:line="463" pos:column="19">port<pos:position pos:line="463" pos:column="23"/></name></name> <operator pos:line="463" pos:column="24">=<pos:position pos:line="463" pos:column="25"/></operator> <call><name pos:line="463" pos:column="26">ntohs<pos:position pos:line="463" pos:column="31"/></name><argument_list pos:line="463" pos:column="31">(<argument><expr><name><name pos:line="463" pos:column="32">se<pos:position pos:line="463" pos:column="34"/></name><operator pos:line="463" pos:column="34">.<pos:position pos:line="463" pos:column="35"/></operator><name pos:line="463" pos:column="35">s_port<pos:position pos:line="463" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="463" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="463" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="464" pos:column="9">sockaddr<pos:position pos:line="464" pos:column="17"/></name><operator pos:line="464" pos:column="17">-&gt;<pos:position pos:line="464" pos:column="22"/></operator><name pos:line="464" pos:column="19">servname<pos:position pos:line="464" pos:column="27"/></name></name> <operator pos:line="464" pos:column="28">=<pos:position pos:line="464" pos:column="29"/></operator> <call><name pos:line="464" pos:column="30">apr_pstrdup<pos:position pos:line="464" pos:column="41"/></name><argument_list pos:line="464" pos:column="41">(<argument><expr><name><name pos:line="464" pos:column="42">sockaddr<pos:position pos:line="464" pos:column="50"/></name><operator pos:line="464" pos:column="50">-&gt;<pos:position pos:line="464" pos:column="55"/></operator><name pos:line="464" pos:column="52">pool<pos:position pos:line="464" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="464" pos:column="58">servname<pos:position pos:line="464" pos:column="66"/></name></expr></argument>)<pos:position pos:line="464" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="464" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="465" pos:column="9">sockaddr<pos:position pos:line="465" pos:column="17"/></name><operator pos:line="465" pos:column="17">-&gt;<pos:position pos:line="465" pos:column="22"/></operator><name pos:line="465" pos:column="19">sa<pos:position pos:line="465" pos:column="21"/></name><operator pos:line="465" pos:column="21">.<pos:position pos:line="465" pos:column="22"/></operator><name pos:line="465" pos:column="22">sin<pos:position pos:line="465" pos:column="25"/></name><operator pos:line="465" pos:column="25">.<pos:position pos:line="465" pos:column="26"/></operator><name pos:line="465" pos:column="26">sin_port<pos:position pos:line="465" pos:column="34"/></name></name> <operator pos:line="465" pos:column="35">=<pos:position pos:line="465" pos:column="36"/></operator> <name><name pos:line="465" pos:column="37">se<pos:position pos:line="465" pos:column="39"/></name><operator pos:line="465" pos:column="39">.<pos:position pos:line="465" pos:column="40"/></operator><name pos:line="465" pos:column="40">s_port<pos:position pos:line="465" pos:column="46"/></name></name></expr>;<pos:position pos:line="465" pos:column="47"/></expr_stmt>
        <return pos:line="466" pos:column="9">return <expr><name pos:line="466" pos:column="16">APR_SUCCESS<pos:position pos:line="466" pos:column="27"/></name></expr>;<pos:position pos:line="466" pos:column="28"/></return>
    }<pos:position pos:line="467" pos:column="6"/></block></then></if>
<cpp:endif pos:line="468" pos:column="1">#<cpp:directive pos:line="468" pos:column="2">endif<pos:position pos:line="468" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:else pos:line="469" pos:column="1">#<cpp:directive pos:line="469" pos:column="2">else<pos:position pos:line="469" pos:column="6"/></cpp:directive></cpp:else>
    <if pos:line="470" pos:column="5">if <condition pos:line="470" pos:column="8">(<expr><operator pos:line="470" pos:column="9">(<pos:position pos:line="470" pos:column="10"/></operator><name pos:line="470" pos:column="10">se<pos:position pos:line="470" pos:column="12"/></name> <operator pos:line="470" pos:column="13">=<pos:position pos:line="470" pos:column="14"/></operator> <call><name pos:line="470" pos:column="15">getservbyname<pos:position pos:line="470" pos:column="28"/></name><argument_list pos:line="470" pos:column="28">(<argument><expr><name pos:line="470" pos:column="29">servname<pos:position pos:line="470" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="470" pos:column="39">NULL<pos:position pos:line="470" pos:column="43"/></name></expr></argument>)<pos:position pos:line="470" pos:column="44"/></argument_list></call><operator pos:line="470" pos:column="44">)<pos:position pos:line="470" pos:column="45"/></operator> <operator pos:line="470" pos:column="46">!=<pos:position pos:line="470" pos:column="48"/></operator> <name pos:line="470" pos:column="49">NULL<pos:position pos:line="470" pos:column="53"/></name></expr>)<pos:position pos:line="470" pos:column="54"/></condition><then><block pos:line="470" pos:column="54">{
        <expr_stmt><expr><name><name pos:line="471" pos:column="9">sockaddr<pos:position pos:line="471" pos:column="17"/></name><operator pos:line="471" pos:column="17">-&gt;<pos:position pos:line="471" pos:column="22"/></operator><name pos:line="471" pos:column="19">port<pos:position pos:line="471" pos:column="23"/></name></name> <operator pos:line="471" pos:column="24">=<pos:position pos:line="471" pos:column="25"/></operator> <call><name pos:line="471" pos:column="26">ntohs<pos:position pos:line="471" pos:column="31"/></name><argument_list pos:line="471" pos:column="31">(<argument><expr><name><name pos:line="471" pos:column="32">se<pos:position pos:line="471" pos:column="34"/></name><operator pos:line="471" pos:column="34">-&gt;<pos:position pos:line="471" pos:column="39"/></operator><name pos:line="471" pos:column="36">s_port<pos:position pos:line="471" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="471" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="471" pos:column="44"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="472" pos:column="9">sockaddr<pos:position pos:line="472" pos:column="17"/></name><operator pos:line="472" pos:column="17">-&gt;<pos:position pos:line="472" pos:column="22"/></operator><name pos:line="472" pos:column="19">servname<pos:position pos:line="472" pos:column="27"/></name></name> <operator pos:line="472" pos:column="28">=<pos:position pos:line="472" pos:column="29"/></operator> <call><name pos:line="472" pos:column="30">apr_pstrdup<pos:position pos:line="472" pos:column="41"/></name><argument_list pos:line="472" pos:column="41">(<argument><expr><name><name pos:line="472" pos:column="42">sockaddr<pos:position pos:line="472" pos:column="50"/></name><operator pos:line="472" pos:column="50">-&gt;<pos:position pos:line="472" pos:column="55"/></operator><name pos:line="472" pos:column="52">pool<pos:position pos:line="472" pos:column="56"/></name></name></expr></argument>, <argument><expr><name pos:line="472" pos:column="58">servname<pos:position pos:line="472" pos:column="66"/></name></expr></argument>)<pos:position pos:line="472" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="472" pos:column="68"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="473" pos:column="9">sockaddr<pos:position pos:line="473" pos:column="17"/></name><operator pos:line="473" pos:column="17">-&gt;<pos:position pos:line="473" pos:column="22"/></operator><name pos:line="473" pos:column="19">sa<pos:position pos:line="473" pos:column="21"/></name><operator pos:line="473" pos:column="21">.<pos:position pos:line="473" pos:column="22"/></operator><name pos:line="473" pos:column="22">sin<pos:position pos:line="473" pos:column="25"/></name><operator pos:line="473" pos:column="25">.<pos:position pos:line="473" pos:column="26"/></operator><name pos:line="473" pos:column="26">sin_port<pos:position pos:line="473" pos:column="34"/></name></name> <operator pos:line="473" pos:column="35">=<pos:position pos:line="473" pos:column="36"/></operator> <name><name pos:line="473" pos:column="37">se<pos:position pos:line="473" pos:column="39"/></name><operator pos:line="473" pos:column="39">-&gt;<pos:position pos:line="473" pos:column="44"/></operator><name pos:line="473" pos:column="41">s_port<pos:position pos:line="473" pos:column="47"/></name></name></expr>;<pos:position pos:line="473" pos:column="48"/></expr_stmt>
        <return pos:line="474" pos:column="9">return <expr><name pos:line="474" pos:column="16">APR_SUCCESS<pos:position pos:line="474" pos:column="27"/></name></expr>;<pos:position pos:line="474" pos:column="28"/></return>
    }<pos:position pos:line="475" pos:column="6"/></block></then></if>
<cpp:endif pos:line="476" pos:column="1">#<cpp:directive pos:line="476" pos:column="2">endif<pos:position pos:line="476" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="477" pos:column="5">return <expr><name pos:line="477" pos:column="12">APR_ENOENT<pos:position pos:line="477" pos:column="22"/></name></expr>;<pos:position pos:line="477" pos:column="23"/></return>
}<pos:position pos:line="478" pos:column="2"/></block>

<cpp:define pos:line="480" pos:column="1">#<cpp:directive pos:line="480" pos:column="2">define<pos:position pos:line="480" pos:column="8"/></cpp:directive> <cpp:macro><name pos:line="480" pos:column="9">V4MAPPED_EQUAL<pos:position pos:line="480" pos:column="23"/></name><parameter_list pos:line="480" pos:column="23">(<parameter><type><name pos:line="480" pos:column="24">a<pos:position pos:line="480" pos:column="25"/></name></type></parameter>,<parameter><type><name pos:line="480" pos:column="26">b<pos:position pos:line="480" pos:column="27"/></name></type></parameter>)<pos:position pos:line="480" pos:column="28"/></parameter_list></cpp:macro>                                   \
<cpp:value pos:line="481" pos:column="1">((a)-&gt;sa.sin.sin_family == AF_INET &amp;&amp;                         \
 (b)-&gt;sa.sin.sin_family == AF_INET6 &amp;&amp;                        \
 IN6_IS_ADDR_V4MAPPED((struct in6_addr *)(b)-&gt;ipaddr_ptr) &amp;&amp;  \
 !memcmp((a)-&gt;ipaddr_ptr,                                     \
         &amp;((struct in6_addr *)(b)-&gt;ipaddr_ptr)-&gt;s6_addr[12],  \
         (a)-&gt;ipaddr_len))<pos:position pos:line="486" pos:column="27"/></cpp:value></cpp:define>

<macro><name pos:line="488" pos:column="1">APR_DECLARE<pos:position pos:line="488" pos:column="12"/></name><argument_list pos:line="488" pos:column="12">(<argument pos:line="488" pos:column="13">int<pos:position pos:line="488" pos:column="16"/></argument>)<pos:position pos:line="488" pos:column="17"/></argument_list></macro> <macro><name pos:line="488" pos:column="18">apr_sockaddr_equal<pos:position pos:line="488" pos:column="36"/></name><argument_list pos:line="488" pos:column="36">(<argument pos:line="488" pos:column="37">const apr_sockaddr_t *addr1<pos:position pos:line="488" pos:column="64"/></argument>,
                                    <argument pos:line="489" pos:column="37">const apr_sockaddr_t *addr2<pos:position pos:line="489" pos:column="64"/></argument>)<pos:position pos:line="489" pos:column="65"/></argument_list></macro>
<block pos:line="490" pos:column="1">{
    <if pos:line="491" pos:column="5">if <condition pos:line="491" pos:column="8">(<expr><name><name pos:line="491" pos:column="9">addr1<pos:position pos:line="491" pos:column="14"/></name><operator pos:line="491" pos:column="14">-&gt;<pos:position pos:line="491" pos:column="19"/></operator><name pos:line="491" pos:column="16">ipaddr_len<pos:position pos:line="491" pos:column="26"/></name></name> <operator pos:line="491" pos:column="27">==<pos:position pos:line="491" pos:column="29"/></operator> <name><name pos:line="491" pos:column="30">addr2<pos:position pos:line="491" pos:column="35"/></name><operator pos:line="491" pos:column="35">-&gt;<pos:position pos:line="491" pos:column="40"/></operator><name pos:line="491" pos:column="37">ipaddr_len<pos:position pos:line="491" pos:column="47"/></name></name> <operator pos:line="491" pos:column="48">&amp;&amp;<pos:position pos:line="491" pos:column="58"/></operator>
        <operator pos:line="492" pos:column="9">!<pos:position pos:line="492" pos:column="10"/></operator><call><name pos:line="492" pos:column="10">memcmp<pos:position pos:line="492" pos:column="16"/></name><argument_list pos:line="492" pos:column="16">(<argument><expr><name><name pos:line="492" pos:column="17">addr1<pos:position pos:line="492" pos:column="22"/></name><operator pos:line="492" pos:column="22">-&gt;<pos:position pos:line="492" pos:column="27"/></operator><name pos:line="492" pos:column="24">ipaddr_ptr<pos:position pos:line="492" pos:column="34"/></name></name></expr></argument>, <argument><expr><name><name pos:line="492" pos:column="36">addr2<pos:position pos:line="492" pos:column="41"/></name><operator pos:line="492" pos:column="41">-&gt;<pos:position pos:line="492" pos:column="46"/></operator><name pos:line="492" pos:column="43">ipaddr_ptr<pos:position pos:line="492" pos:column="53"/></name></name></expr></argument>, <argument><expr><name><name pos:line="492" pos:column="55">addr1<pos:position pos:line="492" pos:column="60"/></name><operator pos:line="492" pos:column="60">-&gt;<pos:position pos:line="492" pos:column="65"/></operator><name pos:line="492" pos:column="62">ipaddr_len<pos:position pos:line="492" pos:column="72"/></name></name></expr></argument>)<pos:position pos:line="492" pos:column="73"/></argument_list></call></expr>)<pos:position pos:line="492" pos:column="74"/></condition><then pos:line="492" pos:column="74"> <block pos:line="492" pos:column="75">{
        <return pos:line="493" pos:column="9">return <expr><literal type="number" pos:line="493" pos:column="16">1<pos:position pos:line="493" pos:column="17"/></literal></expr>;<pos:position pos:line="493" pos:column="18"/></return>
    }<pos:position pos:line="494" pos:column="6"/></block></then></if>
<cpp:if pos:line="495" pos:column="1">#<cpp:directive pos:line="495" pos:column="2">if<pos:position pos:line="495" pos:column="4"/></cpp:directive> <expr><name pos:line="495" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="495" pos:column="18"/></name></expr></cpp:if>
    <if pos:line="496" pos:column="5">if <condition pos:line="496" pos:column="8">(<expr><call><name pos:line="496" pos:column="9">V4MAPPED_EQUAL<pos:position pos:line="496" pos:column="23"/></name><argument_list pos:line="496" pos:column="23">(<argument><expr><name pos:line="496" pos:column="24">addr1<pos:position pos:line="496" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="496" pos:column="31">addr2<pos:position pos:line="496" pos:column="36"/></name></expr></argument>)<pos:position pos:line="496" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="496" pos:column="38"/></condition><then pos:line="496" pos:column="38"> <block pos:line="496" pos:column="39">{
        <return pos:line="497" pos:column="9">return <expr><literal type="number" pos:line="497" pos:column="16">1<pos:position pos:line="497" pos:column="17"/></literal></expr>;<pos:position pos:line="497" pos:column="18"/></return>
    }<pos:position pos:line="498" pos:column="6"/></block></then></if>
    <if pos:line="499" pos:column="5">if <condition pos:line="499" pos:column="8">(<expr><call><name pos:line="499" pos:column="9">V4MAPPED_EQUAL<pos:position pos:line="499" pos:column="23"/></name><argument_list pos:line="499" pos:column="23">(<argument><expr><name pos:line="499" pos:column="24">addr2<pos:position pos:line="499" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="499" pos:column="31">addr1<pos:position pos:line="499" pos:column="36"/></name></expr></argument>)<pos:position pos:line="499" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="499" pos:column="38"/></condition><then pos:line="499" pos:column="38"> <block pos:line="499" pos:column="39">{
        <return pos:line="500" pos:column="9">return <expr><literal type="number" pos:line="500" pos:column="16">1<pos:position pos:line="500" pos:column="17"/></literal></expr>;<pos:position pos:line="500" pos:column="18"/></return>
    }<pos:position pos:line="501" pos:column="6"/></block></then></if>
<cpp:endif pos:line="502" pos:column="1">#<cpp:directive pos:line="502" pos:column="2">endif<pos:position pos:line="502" pos:column="7"/></cpp:directive></cpp:endif>
    <return pos:line="503" pos:column="5">return <expr><literal type="number" pos:line="503" pos:column="12">0<pos:position pos:line="503" pos:column="13"/></literal></expr>;<pos:position pos:line="503" pos:column="14"/></return> <comment type="block" pos:line="503" pos:column="15">/* not equal */</comment>
}<pos:position pos:line="504" pos:column="2"/></block>

<function><specifier pos:line="506" pos:column="1">static<pos:position pos:line="506" pos:column="7"/></specifier> <type><name pos:line="506" pos:column="8">apr_status_t<pos:position pos:line="506" pos:column="20"/></name></type> <name pos:line="506" pos:column="21">parse_network<pos:position pos:line="506" pos:column="34"/></name><parameter_list pos:line="506" pos:column="34">(<parameter><decl><type><name pos:line="506" pos:column="35">apr_ipsubnet_t<pos:position pos:line="506" pos:column="49"/></name> <modifier pos:line="506" pos:column="50">*<pos:position pos:line="506" pos:column="51"/></modifier></type><name pos:line="506" pos:column="51">ipsub<pos:position pos:line="506" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="506" pos:column="58">const<pos:position pos:line="506" pos:column="63"/></specifier> <name pos:line="506" pos:column="64">char<pos:position pos:line="506" pos:column="68"/></name> <modifier pos:line="506" pos:column="69">*<pos:position pos:line="506" pos:column="70"/></modifier></type><name pos:line="506" pos:column="70">network<pos:position pos:line="506" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="506" pos:column="78"/></parameter_list>
<block pos:line="507" pos:column="1">{
    <comment type="block" pos:line="508" pos:column="5">/* legacy syntax for ip addrs: a.b.c. ==&gt; a.b.c.0/24 for example */</comment>
    <decl_stmt><decl><type><name pos:line="509" pos:column="5">int<pos:position pos:line="509" pos:column="8"/></name></type> <name pos:line="509" pos:column="9">shift<pos:position pos:line="509" pos:column="14"/></name></decl>;<pos:position pos:line="509" pos:column="15"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="510" pos:column="5">char<pos:position pos:line="510" pos:column="9"/></name> <modifier pos:line="510" pos:column="10">*<pos:position pos:line="510" pos:column="11"/></modifier></type><name pos:line="510" pos:column="11">s<pos:position pos:line="510" pos:column="12"/></name></decl>, <modifier pos:line="510" pos:column="14">*<pos:position pos:line="510" pos:column="15"/></modifier><decl><type ref="prev"/><name pos:line="510" pos:column="15">t<pos:position pos:line="510" pos:column="16"/></name></decl>;<pos:position pos:line="510" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="511" pos:column="5">int<pos:position pos:line="511" pos:column="8"/></name></type> <name pos:line="511" pos:column="9">octet<pos:position pos:line="511" pos:column="14"/></name></decl>;<pos:position pos:line="511" pos:column="15"/></decl_stmt>
    <expr_stmt><expr><name pos:line="512" pos:column="5">char<pos:position pos:line="512" pos:column="9"/></name> <name><name pos:line="512" pos:column="10">buf<pos:position pos:line="512" pos:column="13"/></name><index pos:line="512" pos:column="13">[<expr><sizeof pos:line="512" pos:column="14">sizeof <name><pos:position pos:line="512" pos:column="21"/></name></sizeof></expr></index></name>"255.255.255.255"]<pos:position pos:line="512" pos:column="39"/></expr>;<pos:position pos:line="512" pos:column="40"/></expr_stmt>

    <if pos:line="514" pos:column="5">if <condition pos:line="514" pos:column="8">(<expr><call><name pos:line="514" pos:column="9">strlen<pos:position pos:line="514" pos:column="15"/></name><argument_list pos:line="514" pos:column="15">(<argument><expr><name pos:line="514" pos:column="16">network<pos:position pos:line="514" pos:column="23"/></name></expr></argument>)<pos:position pos:line="514" pos:column="24"/></argument_list></call> <operator pos:line="514" pos:column="25">&lt;<pos:position pos:line="514" pos:column="29"/></operator> <sizeof pos:line="514" pos:column="27">sizeof <name pos:line="514" pos:column="34">buf<pos:position pos:line="514" pos:column="37"/></name></sizeof></expr>)<pos:position pos:line="514" pos:column="38"/></condition><then pos:line="514" pos:column="38"> <block pos:line="514" pos:column="39">{
        <expr_stmt><expr><call><name pos:line="515" pos:column="9">strcpy<pos:position pos:line="515" pos:column="15"/></name><argument_list pos:line="515" pos:column="15">(<argument><expr><name pos:line="515" pos:column="16">buf<pos:position pos:line="515" pos:column="19"/></name></expr></argument>, <argument><expr><name pos:line="515" pos:column="21">network<pos:position pos:line="515" pos:column="28"/></name></expr></argument>)<pos:position pos:line="515" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="515" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="516" pos:column="6"/></block></then>
    <else pos:line="517" pos:column="5">else <block pos:line="517" pos:column="10">{
        <return pos:line="518" pos:column="9">return <expr><name pos:line="518" pos:column="16">APR_EBADIP<pos:position pos:line="518" pos:column="26"/></name></expr>;<pos:position pos:line="518" pos:column="27"/></return>
    }<pos:position pos:line="519" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="521" pos:column="5">/* parse components */</comment>
    <expr_stmt><expr><name pos:line="522" pos:column="5">s<pos:position pos:line="522" pos:column="6"/></name> <operator pos:line="522" pos:column="7">=<pos:position pos:line="522" pos:column="8"/></operator> <name pos:line="522" pos:column="9">buf<pos:position pos:line="522" pos:column="12"/></name></expr>;<pos:position pos:line="522" pos:column="13"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="523" pos:column="5">ipsub<pos:position pos:line="523" pos:column="10"/></name><operator pos:line="523" pos:column="10">-&gt;<pos:position pos:line="523" pos:column="15"/></operator><name pos:line="523" pos:column="12">sub<pos:position pos:line="523" pos:column="15"/></name><index pos:line="523" pos:column="15">[<expr><literal type="number" pos:line="523" pos:column="16">0<pos:position pos:line="523" pos:column="17"/></literal></expr>]<pos:position pos:line="523" pos:column="18"/></index></name> <operator pos:line="523" pos:column="19">=<pos:position pos:line="523" pos:column="20"/></operator> <literal type="number" pos:line="523" pos:column="21">0<pos:position pos:line="523" pos:column="22"/></literal></expr>;<pos:position pos:line="523" pos:column="23"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="524" pos:column="5">ipsub<pos:position pos:line="524" pos:column="10"/></name><operator pos:line="524" pos:column="10">-&gt;<pos:position pos:line="524" pos:column="15"/></operator><name pos:line="524" pos:column="12">mask<pos:position pos:line="524" pos:column="16"/></name><index pos:line="524" pos:column="16">[<expr><literal type="number" pos:line="524" pos:column="17">0<pos:position pos:line="524" pos:column="18"/></literal></expr>]<pos:position pos:line="524" pos:column="19"/></index></name> <operator pos:line="524" pos:column="20">=<pos:position pos:line="524" pos:column="21"/></operator> <literal type="number" pos:line="524" pos:column="22">0<pos:position pos:line="524" pos:column="23"/></literal></expr>;<pos:position pos:line="524" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name pos:line="525" pos:column="5">shift<pos:position pos:line="525" pos:column="10"/></name> <operator pos:line="525" pos:column="11">=<pos:position pos:line="525" pos:column="12"/></operator> <literal type="number" pos:line="525" pos:column="13">24<pos:position pos:line="525" pos:column="15"/></literal></expr>;<pos:position pos:line="525" pos:column="16"/></expr_stmt>
    <while pos:line="526" pos:column="5">while <condition pos:line="526" pos:column="11">(<expr><operator pos:line="526" pos:column="12">*<pos:position pos:line="526" pos:column="13"/></operator><name pos:line="526" pos:column="13">s<pos:position pos:line="526" pos:column="14"/></name></expr>)<pos:position pos:line="526" pos:column="15"/></condition> <block pos:line="526" pos:column="16">{
        <expr_stmt><expr><name pos:line="527" pos:column="9">t<pos:position pos:line="527" pos:column="10"/></name> <operator pos:line="527" pos:column="11">=<pos:position pos:line="527" pos:column="12"/></operator> <name pos:line="527" pos:column="13">s<pos:position pos:line="527" pos:column="14"/></name></expr>;<pos:position pos:line="527" pos:column="15"/></expr_stmt>
        <if pos:line="528" pos:column="9">if <condition pos:line="528" pos:column="12">(<expr><operator pos:line="528" pos:column="13">!<pos:position pos:line="528" pos:column="14"/></operator><call><name pos:line="528" pos:column="14">apr_isdigit<pos:position pos:line="528" pos:column="25"/></name><argument_list pos:line="528" pos:column="25">(<argument><expr><operator pos:line="528" pos:column="26">*<pos:position pos:line="528" pos:column="27"/></operator><name pos:line="528" pos:column="27">t<pos:position pos:line="528" pos:column="28"/></name></expr></argument>)<pos:position pos:line="528" pos:column="29"/></argument_list></call></expr>)<pos:position pos:line="528" pos:column="30"/></condition><then pos:line="528" pos:column="30"> <block pos:line="528" pos:column="31">{
            <return pos:line="529" pos:column="13">return <expr><name pos:line="529" pos:column="20">APR_EBADIP<pos:position pos:line="529" pos:column="30"/></name></expr>;<pos:position pos:line="529" pos:column="31"/></return>
        }<pos:position pos:line="530" pos:column="10"/></block></then></if>
        <while pos:line="531" pos:column="9">while <condition pos:line="531" pos:column="15">(<expr><call><name pos:line="531" pos:column="16">apr_isdigit<pos:position pos:line="531" pos:column="27"/></name><argument_list pos:line="531" pos:column="27">(<argument><expr><operator pos:line="531" pos:column="28">*<pos:position pos:line="531" pos:column="29"/></operator><name pos:line="531" pos:column="29">t<pos:position pos:line="531" pos:column="30"/></name></expr></argument>)<pos:position pos:line="531" pos:column="31"/></argument_list></call></expr>)<pos:position pos:line="531" pos:column="32"/></condition> <block pos:line="531" pos:column="33">{
            <expr_stmt><expr><operator pos:line="532" pos:column="13">++<pos:position pos:line="532" pos:column="15"/></operator><name pos:line="532" pos:column="15">t<pos:position pos:line="532" pos:column="16"/></name></expr>;<pos:position pos:line="532" pos:column="17"/></expr_stmt>
        }<pos:position pos:line="533" pos:column="10"/></block></while>
        <if pos:line="534" pos:column="9">if <condition pos:line="534" pos:column="12">(<expr><operator pos:line="534" pos:column="13">*<pos:position pos:line="534" pos:column="14"/></operator><name pos:line="534" pos:column="14">t<pos:position pos:line="534" pos:column="15"/></name> <operator pos:line="534" pos:column="16">==<pos:position pos:line="534" pos:column="18"/></operator> <literal type="char" pos:line="534" pos:column="19">'.'<pos:position pos:line="534" pos:column="22"/></literal></expr>)<pos:position pos:line="534" pos:column="23"/></condition><then pos:line="534" pos:column="23"> <block pos:line="534" pos:column="24">{
            <expr_stmt><expr><operator pos:line="535" pos:column="13">*<pos:position pos:line="535" pos:column="14"/></operator><name pos:line="535" pos:column="14">t<pos:position pos:line="535" pos:column="15"/></name><operator pos:line="535" pos:column="15">++<pos:position pos:line="535" pos:column="17"/></operator> <operator pos:line="535" pos:column="18">=<pos:position pos:line="535" pos:column="19"/></operator> <literal type="number" pos:line="535" pos:column="20">0<pos:position pos:line="535" pos:column="21"/></literal></expr>;<pos:position pos:line="535" pos:column="22"/></expr_stmt>
        }<pos:position pos:line="536" pos:column="10"/></block></then>
        <elseif pos:line="537" pos:column="9">else <if pos:line="537" pos:column="14">if <condition pos:line="537" pos:column="17">(<expr><operator pos:line="537" pos:column="18">*<pos:position pos:line="537" pos:column="19"/></operator><name pos:line="537" pos:column="19">t<pos:position pos:line="537" pos:column="20"/></name></expr>)<pos:position pos:line="537" pos:column="21"/></condition><then pos:line="537" pos:column="21"> <block pos:line="537" pos:column="22">{
            <return pos:line="538" pos:column="13">return <expr><name pos:line="538" pos:column="20">APR_EBADIP<pos:position pos:line="538" pos:column="30"/></name></expr>;<pos:position pos:line="538" pos:column="31"/></return>
        }<pos:position pos:line="539" pos:column="10"/></block></then></if></elseif></if>
        <if pos:line="540" pos:column="9">if <condition pos:line="540" pos:column="12">(<expr><name pos:line="540" pos:column="13">shift<pos:position pos:line="540" pos:column="18"/></name> <operator pos:line="540" pos:column="19">&lt;<pos:position pos:line="540" pos:column="23"/></operator> <literal type="number" pos:line="540" pos:column="21">0<pos:position pos:line="540" pos:column="22"/></literal></expr>)<pos:position pos:line="540" pos:column="23"/></condition><then pos:line="540" pos:column="23"> <block pos:line="540" pos:column="24">{
            <return pos:line="541" pos:column="13">return <expr><name pos:line="541" pos:column="20">APR_EBADIP<pos:position pos:line="541" pos:column="30"/></name></expr>;<pos:position pos:line="541" pos:column="31"/></return>
        }<pos:position pos:line="542" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="543" pos:column="9">octet<pos:position pos:line="543" pos:column="14"/></name> <operator pos:line="543" pos:column="15">=<pos:position pos:line="543" pos:column="16"/></operator> <call><name pos:line="543" pos:column="17">atoi<pos:position pos:line="543" pos:column="21"/></name><argument_list pos:line="543" pos:column="21">(<argument><expr><name pos:line="543" pos:column="22">s<pos:position pos:line="543" pos:column="23"/></name></expr></argument>)<pos:position pos:line="543" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="543" pos:column="25"/></expr_stmt>
        <if pos:line="544" pos:column="9">if <condition pos:line="544" pos:column="12">(<expr><name><name pos:line="544" pos:column="13">octet<pos:position pos:line="544" pos:column="18"/></name> <argument_list type="generic" pos:line="544" pos:column="19">&lt; <argument><expr><literal type="number" pos:line="544" pos:column="21">0<pos:position pos:line="544" pos:column="22"/></literal> <operator pos:line="544" pos:column="23">||<pos:position pos:line="544" pos:column="25"/></operator> <name pos:line="544" pos:column="26">octet<pos:position pos:line="544" pos:column="31"/></name></expr></argument> &gt;<pos:position pos:line="544" pos:column="36"/></argument_list></name> <literal type="number" pos:line="544" pos:column="34">255<pos:position pos:line="544" pos:column="37"/></literal></expr>)<pos:position pos:line="544" pos:column="38"/></condition><then pos:line="544" pos:column="38"> <block pos:line="544" pos:column="39">{
            <return pos:line="545" pos:column="13">return <expr><name pos:line="545" pos:column="20">APR_EBADIP<pos:position pos:line="545" pos:column="30"/></name></expr>;<pos:position pos:line="545" pos:column="31"/></return>
        }<pos:position pos:line="546" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="547" pos:column="9">ipsub<pos:position pos:line="547" pos:column="14"/></name><operator pos:line="547" pos:column="14">-&gt;<pos:position pos:line="547" pos:column="19"/></operator><name pos:line="547" pos:column="16">sub<pos:position pos:line="547" pos:column="19"/></name><index pos:line="547" pos:column="19">[<expr><literal type="number" pos:line="547" pos:column="20">0<pos:position pos:line="547" pos:column="21"/></literal></expr>]<pos:position pos:line="547" pos:column="22"/></index></name> <operator pos:line="547" pos:column="23">|=<pos:position pos:line="547" pos:column="25"/></operator> <name pos:line="547" pos:column="26">octet<pos:position pos:line="547" pos:column="31"/></name> <operator pos:line="547" pos:column="32">&lt;&lt;<pos:position pos:line="547" pos:column="40"/></operator> <name pos:line="547" pos:column="35">shift<pos:position pos:line="547" pos:column="40"/></name></expr>;<pos:position pos:line="547" pos:column="41"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="548" pos:column="9">ipsub<pos:position pos:line="548" pos:column="14"/></name><operator pos:line="548" pos:column="14">-&gt;<pos:position pos:line="548" pos:column="19"/></operator><name pos:line="548" pos:column="16">mask<pos:position pos:line="548" pos:column="20"/></name><index pos:line="548" pos:column="20">[<expr><literal type="number" pos:line="548" pos:column="21">0<pos:position pos:line="548" pos:column="22"/></literal></expr>]<pos:position pos:line="548" pos:column="23"/></index></name> <operator pos:line="548" pos:column="24">|=<pos:position pos:line="548" pos:column="26"/></operator> <literal type="number" pos:line="548" pos:column="27">0xFFUL<pos:position pos:line="548" pos:column="33"/></literal> <operator pos:line="548" pos:column="34">&lt;&lt;<pos:position pos:line="548" pos:column="42"/></operator> <name pos:line="548" pos:column="37">shift<pos:position pos:line="548" pos:column="42"/></name></expr>;<pos:position pos:line="548" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><name pos:line="549" pos:column="9">s<pos:position pos:line="549" pos:column="10"/></name> <operator pos:line="549" pos:column="11">=<pos:position pos:line="549" pos:column="12"/></operator> <name pos:line="549" pos:column="13">t<pos:position pos:line="549" pos:column="14"/></name></expr>;<pos:position pos:line="549" pos:column="15"/></expr_stmt>
        <expr_stmt><expr><name pos:line="550" pos:column="9">shift<pos:position pos:line="550" pos:column="14"/></name> <operator pos:line="550" pos:column="15">-=<pos:position pos:line="550" pos:column="17"/></operator> <literal type="number" pos:line="550" pos:column="18">8<pos:position pos:line="550" pos:column="19"/></literal></expr>;<pos:position pos:line="550" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="551" pos:column="6"/></block></while>
    <expr_stmt><expr><name><name pos:line="552" pos:column="5">ipsub<pos:position pos:line="552" pos:column="10"/></name><operator pos:line="552" pos:column="10">-&gt;<pos:position pos:line="552" pos:column="15"/></operator><name pos:line="552" pos:column="12">sub<pos:position pos:line="552" pos:column="15"/></name><index pos:line="552" pos:column="15">[<expr><literal type="number" pos:line="552" pos:column="16">0<pos:position pos:line="552" pos:column="17"/></literal></expr>]<pos:position pos:line="552" pos:column="18"/></index></name> <operator pos:line="552" pos:column="19">=<pos:position pos:line="552" pos:column="20"/></operator> <call><name pos:line="552" pos:column="21">ntohl<pos:position pos:line="552" pos:column="26"/></name><argument_list pos:line="552" pos:column="26">(<argument><expr><name><name pos:line="552" pos:column="27">ipsub<pos:position pos:line="552" pos:column="32"/></name><operator pos:line="552" pos:column="32">-&gt;<pos:position pos:line="552" pos:column="37"/></operator><name pos:line="552" pos:column="34">sub<pos:position pos:line="552" pos:column="37"/></name><index pos:line="552" pos:column="37">[<expr><literal type="number" pos:line="552" pos:column="38">0<pos:position pos:line="552" pos:column="39"/></literal></expr>]<pos:position pos:line="552" pos:column="40"/></index></name></expr></argument>)<pos:position pos:line="552" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="552" pos:column="42"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="553" pos:column="5">ipsub<pos:position pos:line="553" pos:column="10"/></name><operator pos:line="553" pos:column="10">-&gt;<pos:position pos:line="553" pos:column="15"/></operator><name pos:line="553" pos:column="12">mask<pos:position pos:line="553" pos:column="16"/></name><index pos:line="553" pos:column="16">[<expr><literal type="number" pos:line="553" pos:column="17">0<pos:position pos:line="553" pos:column="18"/></literal></expr>]<pos:position pos:line="553" pos:column="19"/></index></name> <operator pos:line="553" pos:column="20">=<pos:position pos:line="553" pos:column="21"/></operator> <call><name pos:line="553" pos:column="22">ntohl<pos:position pos:line="553" pos:column="27"/></name><argument_list pos:line="553" pos:column="27">(<argument><expr><name><name pos:line="553" pos:column="28">ipsub<pos:position pos:line="553" pos:column="33"/></name><operator pos:line="553" pos:column="33">-&gt;<pos:position pos:line="553" pos:column="38"/></operator><name pos:line="553" pos:column="35">mask<pos:position pos:line="553" pos:column="39"/></name><index pos:line="553" pos:column="39">[<expr><literal type="number" pos:line="553" pos:column="40">0<pos:position pos:line="553" pos:column="41"/></literal></expr>]<pos:position pos:line="553" pos:column="42"/></index></name></expr></argument>)<pos:position pos:line="553" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="553" pos:column="44"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="554" pos:column="5">ipsub<pos:position pos:line="554" pos:column="10"/></name><operator pos:line="554" pos:column="10">-&gt;<pos:position pos:line="554" pos:column="15"/></operator><name pos:line="554" pos:column="12">family<pos:position pos:line="554" pos:column="18"/></name></name> <operator pos:line="554" pos:column="19">=<pos:position pos:line="554" pos:column="20"/></operator> <name pos:line="554" pos:column="21">AF_INET<pos:position pos:line="554" pos:column="28"/></name></expr>;<pos:position pos:line="554" pos:column="29"/></expr_stmt>
    <return pos:line="555" pos:column="5">return <expr><name pos:line="555" pos:column="12">APR_SUCCESS<pos:position pos:line="555" pos:column="23"/></name></expr>;<pos:position pos:line="555" pos:column="24"/></return>
}<pos:position pos:line="556" pos:column="2"/></block></function>

<comment type="block" pos:line="558" pos:column="1">/* return values:
 * APR_EINVAL     not an IP address; caller should see if it is something else
 * APR_BADIP      IP address portion is is not valid
 * APR_BADMASK    mask portion is not valid
 */</comment>

<function><specifier pos:line="564" pos:column="1">static<pos:position pos:line="564" pos:column="7"/></specifier> <type><name pos:line="564" pos:column="8">apr_status_t<pos:position pos:line="564" pos:column="20"/></name></type> <name pos:line="564" pos:column="21">parse_ip<pos:position pos:line="564" pos:column="29"/></name><parameter_list pos:line="564" pos:column="29">(<parameter><decl><type><name pos:line="564" pos:column="30">apr_ipsubnet_t<pos:position pos:line="564" pos:column="44"/></name> <modifier pos:line="564" pos:column="45">*<pos:position pos:line="564" pos:column="46"/></modifier></type><name pos:line="564" pos:column="46">ipsub<pos:position pos:line="564" pos:column="51"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="564" pos:column="53">const<pos:position pos:line="564" pos:column="58"/></specifier> <name pos:line="564" pos:column="59">char<pos:position pos:line="564" pos:column="63"/></name> <modifier pos:line="564" pos:column="64">*<pos:position pos:line="564" pos:column="65"/></modifier></type><name pos:line="564" pos:column="65">ipstr<pos:position pos:line="564" pos:column="70"/></name></decl></parameter>, <parameter><decl><type><name pos:line="564" pos:column="72">int<pos:position pos:line="564" pos:column="75"/></name></type> <name pos:line="564" pos:column="76">network_allowed<pos:position pos:line="564" pos:column="91"/></name></decl></parameter>)<pos:position pos:line="564" pos:column="92"/></parameter_list>
<block pos:line="565" pos:column="1">{
    <comment type="block" pos:line="566" pos:column="5">/* supported flavors of IP:
     *
     * . IPv6 numeric address string (e.g., "fe80::1")
     * 
     *   IMPORTANT: Don't store IPv4-mapped IPv6 address as an IPv6 address.
     *
     * . IPv4 numeric address string (e.g., "127.0.0.1")
     *
     * . IPv4 network string (e.g., "9.67")
     *
     *   IMPORTANT: This network form is only allowed if network_allowed is on.
     */</comment>
    <decl_stmt><decl><type><name pos:line="578" pos:column="5">int<pos:position pos:line="578" pos:column="8"/></name></type> <name pos:line="578" pos:column="9">rc<pos:position pos:line="578" pos:column="11"/></name></decl>;<pos:position pos:line="578" pos:column="12"/></decl_stmt>

<cpp:if pos:line="580" pos:column="1">#<cpp:directive pos:line="580" pos:column="2">if<pos:position pos:line="580" pos:column="4"/></cpp:directive> <expr><name pos:line="580" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="580" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><name pos:line="581" pos:column="5">rc<pos:position pos:line="581" pos:column="7"/></name> <operator pos:line="581" pos:column="8">=<pos:position pos:line="581" pos:column="9"/></operator> <call><name pos:line="581" pos:column="10">apr_inet_pton<pos:position pos:line="581" pos:column="23"/></name><argument_list pos:line="581" pos:column="23">(<argument><expr><name pos:line="581" pos:column="24">AF_INET6<pos:position pos:line="581" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="581" pos:column="34">ipstr<pos:position pos:line="581" pos:column="39"/></name></expr></argument>, <argument><expr><name><name pos:line="581" pos:column="41">ipsub<pos:position pos:line="581" pos:column="46"/></name><operator pos:line="581" pos:column="46">-&gt;<pos:position pos:line="581" pos:column="51"/></operator><name pos:line="581" pos:column="48">sub<pos:position pos:line="581" pos:column="51"/></name></name></expr></argument>)<pos:position pos:line="581" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="581" pos:column="53"/></expr_stmt>
    <if pos:line="582" pos:column="5">if <condition pos:line="582" pos:column="8">(<expr><name pos:line="582" pos:column="9">rc<pos:position pos:line="582" pos:column="11"/></name> <operator pos:line="582" pos:column="12">==<pos:position pos:line="582" pos:column="14"/></operator> <literal type="number" pos:line="582" pos:column="15">1<pos:position pos:line="582" pos:column="16"/></literal></expr>)<pos:position pos:line="582" pos:column="17"/></condition><then pos:line="582" pos:column="17"> <block pos:line="582" pos:column="18">{
        <if pos:line="583" pos:column="9">if <condition pos:line="583" pos:column="12">(<expr><call><name pos:line="583" pos:column="13">IN6_IS_ADDR_V4MAPPED<pos:position pos:line="583" pos:column="33"/></name><argument_list pos:line="583" pos:column="33">(<argument><expr><operator pos:line="583" pos:column="34">(<pos:position pos:line="583" pos:column="35"/></operator>struct <name pos:line="583" pos:column="42">in6_addr<pos:position pos:line="583" pos:column="50"/></name> <operator pos:line="583" pos:column="51">*<pos:position pos:line="583" pos:column="52"/></operator><operator pos:line="583" pos:column="52">)<pos:position pos:line="583" pos:column="53"/></operator><name><name pos:line="583" pos:column="53">ipsub<pos:position pos:line="583" pos:column="58"/></name><operator pos:line="583" pos:column="58">-&gt;<pos:position pos:line="583" pos:column="63"/></operator><name pos:line="583" pos:column="60">sub<pos:position pos:line="583" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="583" pos:column="64"/></argument_list></call></expr>)<pos:position pos:line="583" pos:column="65"/></condition><then pos:line="583" pos:column="65"> <block pos:line="583" pos:column="66">{
            <comment type="block" pos:line="584" pos:column="13">/* apr_ipsubnet_test() assumes that we don't create IPv4-mapped IPv6
             * addresses; this of course forces the user to specify IPv4 addresses
             * in a.b.c.d style instead of ::ffff:a.b.c.d style.
             */</comment>
            <return pos:line="588" pos:column="13">return <expr><name pos:line="588" pos:column="20">APR_EBADIP<pos:position pos:line="588" pos:column="30"/></name></expr>;<pos:position pos:line="588" pos:column="31"/></return>
        }<pos:position pos:line="589" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="590" pos:column="9">ipsub<pos:position pos:line="590" pos:column="14"/></name><operator pos:line="590" pos:column="14">-&gt;<pos:position pos:line="590" pos:column="19"/></operator><name pos:line="590" pos:column="16">family<pos:position pos:line="590" pos:column="22"/></name></name> <operator pos:line="590" pos:column="23">=<pos:position pos:line="590" pos:column="24"/></operator> <name pos:line="590" pos:column="25">AF_INET6<pos:position pos:line="590" pos:column="33"/></name></expr>;<pos:position pos:line="590" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="591" pos:column="6"/></block></then>
    <else pos:line="592" pos:column="5">else
<cpp:endif pos:line="593" pos:column="1">#<cpp:directive pos:line="593" pos:column="2">endif<pos:position pos:line="593" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="594" pos:column="5">{
        <expr_stmt><expr><name pos:line="595" pos:column="9">rc<pos:position pos:line="595" pos:column="11"/></name> <operator pos:line="595" pos:column="12">=<pos:position pos:line="595" pos:column="13"/></operator> <call><name pos:line="595" pos:column="14">apr_inet_pton<pos:position pos:line="595" pos:column="27"/></name><argument_list pos:line="595" pos:column="27">(<argument><expr><name pos:line="595" pos:column="28">AF_INET<pos:position pos:line="595" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="595" pos:column="37">ipstr<pos:position pos:line="595" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="595" pos:column="44">ipsub<pos:position pos:line="595" pos:column="49"/></name><operator pos:line="595" pos:column="49">-&gt;<pos:position pos:line="595" pos:column="54"/></operator><name pos:line="595" pos:column="51">sub<pos:position pos:line="595" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="595" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="595" pos:column="56"/></expr_stmt>
        <if pos:line="596" pos:column="9">if <condition pos:line="596" pos:column="12">(<expr><name pos:line="596" pos:column="13">rc<pos:position pos:line="596" pos:column="15"/></name> <operator pos:line="596" pos:column="16">==<pos:position pos:line="596" pos:column="18"/></operator> <literal type="number" pos:line="596" pos:column="19">1<pos:position pos:line="596" pos:column="20"/></literal></expr>)<pos:position pos:line="596" pos:column="21"/></condition><then pos:line="596" pos:column="21"> <block pos:line="596" pos:column="22">{
            <expr_stmt><expr><name><name pos:line="597" pos:column="13">ipsub<pos:position pos:line="597" pos:column="18"/></name><operator pos:line="597" pos:column="18">-&gt;<pos:position pos:line="597" pos:column="23"/></operator><name pos:line="597" pos:column="20">family<pos:position pos:line="597" pos:column="26"/></name></name> <operator pos:line="597" pos:column="27">=<pos:position pos:line="597" pos:column="28"/></operator> <name pos:line="597" pos:column="29">AF_INET<pos:position pos:line="597" pos:column="36"/></name></expr>;<pos:position pos:line="597" pos:column="37"/></expr_stmt>
        }<pos:position pos:line="598" pos:column="10"/></block></then></if>
    }<pos:position pos:line="599" pos:column="6"/></block></else></if>
    <if pos:line="600" pos:column="5">if <condition pos:line="600" pos:column="8">(<expr><name pos:line="600" pos:column="9">rc<pos:position pos:line="600" pos:column="11"/></name> <operator pos:line="600" pos:column="12">!=<pos:position pos:line="600" pos:column="14"/></operator> <literal type="number" pos:line="600" pos:column="15">1<pos:position pos:line="600" pos:column="16"/></literal></expr>)<pos:position pos:line="600" pos:column="17"/></condition><then pos:line="600" pos:column="17"> <block pos:line="600" pos:column="18">{
        <if pos:line="601" pos:column="9">if <condition pos:line="601" pos:column="12">(<expr><name pos:line="601" pos:column="13">network_allowed<pos:position pos:line="601" pos:column="28"/></name></expr>)<pos:position pos:line="601" pos:column="29"/></condition><then pos:line="601" pos:column="29"> <block pos:line="601" pos:column="30">{
            <return pos:line="602" pos:column="13">return <expr><call><name pos:line="602" pos:column="20">parse_network<pos:position pos:line="602" pos:column="33"/></name><argument_list pos:line="602" pos:column="33">(<argument><expr><name pos:line="602" pos:column="34">ipsub<pos:position pos:line="602" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="602" pos:column="41">ipstr<pos:position pos:line="602" pos:column="46"/></name></expr></argument>)<pos:position pos:line="602" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="602" pos:column="48"/></return>
        }<pos:position pos:line="603" pos:column="10"/></block></then>
        <else pos:line="604" pos:column="9">else <block pos:line="604" pos:column="14">{
            <return pos:line="605" pos:column="13">return <expr><name pos:line="605" pos:column="20">APR_EBADIP<pos:position pos:line="605" pos:column="30"/></name></expr>;<pos:position pos:line="605" pos:column="31"/></return>
        }<pos:position pos:line="606" pos:column="10"/></block></else></if>
    }<pos:position pos:line="607" pos:column="6"/></block></then></if>
    <return pos:line="608" pos:column="5">return <expr><name pos:line="608" pos:column="12">APR_SUCCESS<pos:position pos:line="608" pos:column="23"/></name></expr>;<pos:position pos:line="608" pos:column="24"/></return>
}<pos:position pos:line="609" pos:column="2"/></block></function>

<function><specifier pos:line="611" pos:column="1">static<pos:position pos:line="611" pos:column="7"/></specifier> <type><name pos:line="611" pos:column="8">int<pos:position pos:line="611" pos:column="11"/></name></type> <name pos:line="611" pos:column="12">looks_like_ip<pos:position pos:line="611" pos:column="25"/></name><parameter_list pos:line="611" pos:column="25">(<parameter><decl><type><specifier pos:line="611" pos:column="26">const<pos:position pos:line="611" pos:column="31"/></specifier> <name pos:line="611" pos:column="32">char<pos:position pos:line="611" pos:column="36"/></name> <modifier pos:line="611" pos:column="37">*<pos:position pos:line="611" pos:column="38"/></modifier></type><name pos:line="611" pos:column="38">ipstr<pos:position pos:line="611" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="611" pos:column="44"/></parameter_list>
<block pos:line="612" pos:column="1">{
    <if pos:line="613" pos:column="5">if <condition pos:line="613" pos:column="8">(<expr><call><name pos:line="613" pos:column="9">strchr<pos:position pos:line="613" pos:column="15"/></name><argument_list pos:line="613" pos:column="15">(<argument><expr><name pos:line="613" pos:column="16">ipstr<pos:position pos:line="613" pos:column="21"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="613" pos:column="23">':'<pos:position pos:line="613" pos:column="26"/></literal></expr></argument>)<pos:position pos:line="613" pos:column="27"/></argument_list></call></expr>)<pos:position pos:line="613" pos:column="28"/></condition><then pos:line="613" pos:column="28"> <block pos:line="613" pos:column="29">{
        <comment type="block" pos:line="614" pos:column="9">/* definitely not a hostname; assume it is intended to be an IPv6 address */</comment>
        <return pos:line="615" pos:column="9">return <expr><literal type="number" pos:line="615" pos:column="16">1<pos:position pos:line="615" pos:column="17"/></literal></expr>;<pos:position pos:line="615" pos:column="18"/></return>
    }<pos:position pos:line="616" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="618" pos:column="5">/* simple IPv4 address string check */</comment>
    <while pos:line="619" pos:column="5">while <condition pos:line="619" pos:column="11">(<expr><operator pos:line="619" pos:column="12">(<pos:position pos:line="619" pos:column="13"/></operator><operator pos:line="619" pos:column="13">*<pos:position pos:line="619" pos:column="14"/></operator><name pos:line="619" pos:column="14">ipstr<pos:position pos:line="619" pos:column="19"/></name> <operator pos:line="619" pos:column="20">==<pos:position pos:line="619" pos:column="22"/></operator> <literal type="char" pos:line="619" pos:column="23">'.'<pos:position pos:line="619" pos:column="26"/></literal><operator pos:line="619" pos:column="26">)<pos:position pos:line="619" pos:column="27"/></operator> <operator pos:line="619" pos:column="28">||<pos:position pos:line="619" pos:column="30"/></operator> <call><name pos:line="619" pos:column="31">apr_isdigit<pos:position pos:line="619" pos:column="42"/></name><argument_list pos:line="619" pos:column="42">(<argument><expr><operator pos:line="619" pos:column="43">*<pos:position pos:line="619" pos:column="44"/></operator><name pos:line="619" pos:column="44">ipstr<pos:position pos:line="619" pos:column="49"/></name></expr></argument>)<pos:position pos:line="619" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="619" pos:column="51"/></condition>
        <block type="pseudo"><expr_stmt><expr><name pos:line="620" pos:column="9">ipstr<pos:position pos:line="620" pos:column="14"/></name><operator pos:line="620" pos:column="14">++<pos:position pos:line="620" pos:column="16"/></operator></expr>;<pos:position pos:line="620" pos:column="17"/></expr_stmt></block></while>
    <return pos:line="621" pos:column="5">return <expr><operator pos:line="621" pos:column="12">(<pos:position pos:line="621" pos:column="13"/></operator><operator pos:line="621" pos:column="13">*<pos:position pos:line="621" pos:column="14"/></operator><name pos:line="621" pos:column="14">ipstr<pos:position pos:line="621" pos:column="19"/></name> <operator pos:line="621" pos:column="20">==<pos:position pos:line="621" pos:column="22"/></operator> <literal type="char" pos:line="621" pos:column="23">'\0'<pos:position pos:line="621" pos:column="27"/></literal><operator pos:line="621" pos:column="27">)<pos:position pos:line="621" pos:column="28"/></operator></expr>;<pos:position pos:line="621" pos:column="29"/></return>
}<pos:position pos:line="622" pos:column="2"/></block></function>

<function><specifier pos:line="624" pos:column="1">static<pos:position pos:line="624" pos:column="7"/></specifier> <type><name pos:line="624" pos:column="8">void<pos:position pos:line="624" pos:column="12"/></name></type> <name pos:line="624" pos:column="13">fix_subnet<pos:position pos:line="624" pos:column="23"/></name><parameter_list pos:line="624" pos:column="23">(<parameter><decl><type><name pos:line="624" pos:column="24">apr_ipsubnet_t<pos:position pos:line="624" pos:column="38"/></name> <modifier pos:line="624" pos:column="39">*<pos:position pos:line="624" pos:column="40"/></modifier></type><name pos:line="624" pos:column="40">ipsub<pos:position pos:line="624" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="624" pos:column="46"/></parameter_list>
<block pos:line="625" pos:column="1">{
    <comment type="block" pos:line="626" pos:column="5">/* in case caller specified more bits in network address than are
     * valid according to the mask, turn off the extra bits
     */</comment>
    <decl_stmt><decl><type><name pos:line="629" pos:column="5">int<pos:position pos:line="629" pos:column="8"/></name></type> <name pos:line="629" pos:column="9">i<pos:position pos:line="629" pos:column="10"/></name></decl>;<pos:position pos:line="629" pos:column="11"/></decl_stmt>

    <for pos:line="631" pos:column="5">for <control pos:line="631" pos:column="9">(<init><expr><name pos:line="631" pos:column="10">i<pos:position pos:line="631" pos:column="11"/></name> <operator pos:line="631" pos:column="12">=<pos:position pos:line="631" pos:column="13"/></operator> <literal type="number" pos:line="631" pos:column="14">0<pos:position pos:line="631" pos:column="15"/></literal></expr>;<pos:position pos:line="631" pos:column="16"/></init> <condition><expr><name pos:line="631" pos:column="17">i<pos:position pos:line="631" pos:column="18"/></name> <operator pos:line="631" pos:column="19">&lt;<pos:position pos:line="631" pos:column="23"/></operator> <sizeof pos:line="631" pos:column="21">sizeof <name><name pos:line="631" pos:column="28">ipsub<pos:position pos:line="631" pos:column="33"/></name><operator pos:line="631" pos:column="33">-&gt;<pos:position pos:line="631" pos:column="38"/></operator><name pos:line="631" pos:column="35">mask<pos:position pos:line="631" pos:column="39"/></name></name></sizeof> <operator pos:line="631" pos:column="40">/<pos:position pos:line="631" pos:column="41"/></operator> <sizeof pos:line="631" pos:column="42">sizeof<argument_list pos:line="631" pos:column="48">(<argument><expr><name pos:line="631" pos:column="49">apr_int32_t<pos:position pos:line="631" pos:column="60"/></name></expr></argument>)<pos:position pos:line="631" pos:column="61"/></argument_list></sizeof></expr>;<pos:position pos:line="631" pos:column="62"/></condition> <incr><expr><name pos:line="631" pos:column="63">i<pos:position pos:line="631" pos:column="64"/></name><operator pos:line="631" pos:column="64">++<pos:position pos:line="631" pos:column="66"/></operator></expr></incr>)<pos:position pos:line="631" pos:column="67"/></control> <block pos:line="631" pos:column="68">{
        <expr_stmt><expr><name><name pos:line="632" pos:column="9">ipsub<pos:position pos:line="632" pos:column="14"/></name><operator pos:line="632" pos:column="14">-&gt;<pos:position pos:line="632" pos:column="19"/></operator><name pos:line="632" pos:column="16">sub<pos:position pos:line="632" pos:column="19"/></name><index pos:line="632" pos:column="19">[<expr><name pos:line="632" pos:column="20">i<pos:position pos:line="632" pos:column="21"/></name></expr>]<pos:position pos:line="632" pos:column="22"/></index></name> <operator pos:line="632" pos:column="23">&amp;=<pos:position pos:line="632" pos:column="29"/></operator> <name><name pos:line="632" pos:column="26">ipsub<pos:position pos:line="632" pos:column="31"/></name><operator pos:line="632" pos:column="31">-&gt;<pos:position pos:line="632" pos:column="36"/></operator><name pos:line="632" pos:column="33">mask<pos:position pos:line="632" pos:column="37"/></name><index pos:line="632" pos:column="37">[<expr><name pos:line="632" pos:column="38">i<pos:position pos:line="632" pos:column="39"/></name></expr>]<pos:position pos:line="632" pos:column="40"/></index></name></expr>;<pos:position pos:line="632" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="633" pos:column="6"/></block></for>
}<pos:position pos:line="634" pos:column="2"/></block></function>

<comment type="block" pos:line="636" pos:column="1">/* be sure not to store any IPv4 address as a v4-mapped IPv6 address */</comment>
<macro><name pos:line="637" pos:column="1">APR_DECLARE<pos:position pos:line="637" pos:column="12"/></name><argument_list pos:line="637" pos:column="12">(<argument pos:line="637" pos:column="13">apr_status_t<pos:position pos:line="637" pos:column="25"/></argument>)<pos:position pos:line="637" pos:column="26"/></argument_list></macro> <macro><name pos:line="637" pos:column="27">apr_ipsubnet_create<pos:position pos:line="637" pos:column="46"/></name><argument_list pos:line="637" pos:column="46">(<argument pos:line="637" pos:column="47">apr_ipsubnet_t **ipsub<pos:position pos:line="637" pos:column="69"/></argument>, <argument pos:line="637" pos:column="71">const char *ipstr<pos:position pos:line="637" pos:column="88"/></argument>, 
                                              <argument pos:line="638" pos:column="47">const char *mask_or_numbits<pos:position pos:line="638" pos:column="74"/></argument>, <argument pos:line="638" pos:column="76">apr_pool_t *p<pos:position pos:line="638" pos:column="89"/></argument>)<pos:position pos:line="638" pos:column="90"/></argument_list></macro>
<block pos:line="639" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="640" pos:column="5">apr_status_t<pos:position pos:line="640" pos:column="17"/></name></type> <name pos:line="640" pos:column="18">rv<pos:position pos:line="640" pos:column="20"/></name></decl>;<pos:position pos:line="640" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="641" pos:column="5">char<pos:position pos:line="641" pos:column="9"/></name> <modifier pos:line="641" pos:column="10">*<pos:position pos:line="641" pos:column="11"/></modifier></type><name pos:line="641" pos:column="11">endptr<pos:position pos:line="641" pos:column="17"/></name></decl>;<pos:position pos:line="641" pos:column="18"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="642" pos:column="5">long<pos:position pos:line="642" pos:column="9"/></name></type> <name pos:line="642" pos:column="10">bits<pos:position pos:line="642" pos:column="14"/></name></decl>, <decl><type ref="prev"/><name pos:line="642" pos:column="16">maxbits<pos:position pos:line="642" pos:column="23"/></name> <init pos:line="642" pos:column="24">= <expr><literal type="number" pos:line="642" pos:column="26">32<pos:position pos:line="642" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="642" pos:column="29"/></decl_stmt>

    <comment type="block" pos:line="644" pos:column="5">/* filter out stuff which doesn't look remotely like an IP address; this helps 
     * callers like mod_access which have a syntax allowing hostname or IP address;
     * APR_EINVAL tells the caller that it was probably not intended to be an IP
     * address
     */</comment>
    <if pos:line="649" pos:column="5">if <condition pos:line="649" pos:column="8">(<expr><operator pos:line="649" pos:column="9">!<pos:position pos:line="649" pos:column="10"/></operator><call><name pos:line="649" pos:column="10">looks_like_ip<pos:position pos:line="649" pos:column="23"/></name><argument_list pos:line="649" pos:column="23">(<argument><expr><name pos:line="649" pos:column="24">ipstr<pos:position pos:line="649" pos:column="29"/></name></expr></argument>)<pos:position pos:line="649" pos:column="30"/></argument_list></call></expr>)<pos:position pos:line="649" pos:column="31"/></condition><then pos:line="649" pos:column="31"> <block pos:line="649" pos:column="32">{
        <return pos:line="650" pos:column="9">return <expr><name pos:line="650" pos:column="16">APR_EINVAL<pos:position pos:line="650" pos:column="26"/></name></expr>;<pos:position pos:line="650" pos:column="27"/></return>
    }<pos:position pos:line="651" pos:column="6"/></block></then></if>

    <expr_stmt><expr><operator pos:line="653" pos:column="5">*<pos:position pos:line="653" pos:column="6"/></operator><name pos:line="653" pos:column="6">ipsub<pos:position pos:line="653" pos:column="11"/></name> <operator pos:line="653" pos:column="12">=<pos:position pos:line="653" pos:column="13"/></operator> <call><name pos:line="653" pos:column="14">apr_pcalloc<pos:position pos:line="653" pos:column="25"/></name><argument_list pos:line="653" pos:column="25">(<argument><expr><name pos:line="653" pos:column="26">p<pos:position pos:line="653" pos:column="27"/></name></expr></argument>, <argument><expr><sizeof pos:line="653" pos:column="29">sizeof<argument_list pos:line="653" pos:column="35">(<argument><expr><name pos:line="653" pos:column="36">apr_ipsubnet_t<pos:position pos:line="653" pos:column="50"/></name></expr></argument>)<pos:position pos:line="653" pos:column="51"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="653" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="653" pos:column="53"/></expr_stmt>

    <comment type="block" pos:line="655" pos:column="5">/* assume ipstr is an individual IP address, not a subnet */</comment>
    <expr_stmt><expr><call><name pos:line="656" pos:column="5">memset<pos:position pos:line="656" pos:column="11"/></name><argument_list pos:line="656" pos:column="11">(<argument><expr><name><operator pos:line="656" pos:column="12">(<pos:position pos:line="656" pos:column="13"/></operator><operator pos:line="656" pos:column="13">*<pos:position pos:line="656" pos:column="14"/></operator><name pos:line="656" pos:column="14">ipsub<pos:position pos:line="656" pos:column="19"/></name><operator pos:line="656" pos:column="19">)<pos:position pos:line="656" pos:column="20"/></operator><operator pos:line="656" pos:column="20">-&gt;<pos:position pos:line="656" pos:column="25"/></operator><name pos:line="656" pos:column="22">mask<pos:position pos:line="656" pos:column="26"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="656" pos:column="28">0xFF<pos:position pos:line="656" pos:column="32"/></literal></expr></argument>, <argument><expr><sizeof pos:line="656" pos:column="34">sizeof <argument_list pos:line="656" pos:column="41">(<argument><expr><operator pos:line="656" pos:column="42">*<pos:position pos:line="656" pos:column="43"/></operator><name pos:line="656" pos:column="43">ipsub<pos:position pos:line="656" pos:column="48"/></name></expr></argument>)<pos:position pos:line="656" pos:column="49"/></argument_list></sizeof><operator pos:line="656" pos:column="49">-&gt;<pos:position pos:line="656" pos:column="54"/></operator><name pos:line="656" pos:column="51">mask<pos:position pos:line="656" pos:column="55"/></name></expr></argument>)<pos:position pos:line="656" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="656" pos:column="57"/></expr_stmt>

    <expr_stmt><expr><name pos:line="658" pos:column="5">rv<pos:position pos:line="658" pos:column="7"/></name> <operator pos:line="658" pos:column="8">=<pos:position pos:line="658" pos:column="9"/></operator> <call><name pos:line="658" pos:column="10">parse_ip<pos:position pos:line="658" pos:column="18"/></name><argument_list pos:line="658" pos:column="18">(<argument><expr><operator pos:line="658" pos:column="19">*<pos:position pos:line="658" pos:column="20"/></operator><name pos:line="658" pos:column="20">ipsub<pos:position pos:line="658" pos:column="25"/></name></expr></argument>, <argument><expr><name pos:line="658" pos:column="27">ipstr<pos:position pos:line="658" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="658" pos:column="34">mask_or_numbits<pos:position pos:line="658" pos:column="49"/></name> <operator pos:line="658" pos:column="50">==<pos:position pos:line="658" pos:column="52"/></operator> <name pos:line="658" pos:column="53">NULL<pos:position pos:line="658" pos:column="57"/></name></expr></argument>)<pos:position pos:line="658" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="658" pos:column="59"/></expr_stmt>
    <if pos:line="659" pos:column="5">if <condition pos:line="659" pos:column="8">(<expr><name pos:line="659" pos:column="9">rv<pos:position pos:line="659" pos:column="11"/></name> <operator pos:line="659" pos:column="12">!=<pos:position pos:line="659" pos:column="14"/></operator> <name pos:line="659" pos:column="15">APR_SUCCESS<pos:position pos:line="659" pos:column="26"/></name></expr>)<pos:position pos:line="659" pos:column="27"/></condition><then pos:line="659" pos:column="27"> <block pos:line="659" pos:column="28">{
        <return pos:line="660" pos:column="9">return <expr><name pos:line="660" pos:column="16">rv<pos:position pos:line="660" pos:column="18"/></name></expr>;<pos:position pos:line="660" pos:column="19"/></return>
    }<pos:position pos:line="661" pos:column="6"/></block></then></if>

    <if pos:line="663" pos:column="5">if <condition pos:line="663" pos:column="8">(<expr><name pos:line="663" pos:column="9">mask_or_numbits<pos:position pos:line="663" pos:column="24"/></name></expr>)<pos:position pos:line="663" pos:column="25"/></condition><then pos:line="663" pos:column="25"> <block pos:line="663" pos:column="26">{
<cpp:if pos:line="664" pos:column="1">#<cpp:directive pos:line="664" pos:column="2">if<pos:position pos:line="664" pos:column="4"/></cpp:directive> <expr><name pos:line="664" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="664" pos:column="18"/></name></expr></cpp:if>
        <if pos:line="665" pos:column="9">if <condition pos:line="665" pos:column="12">(<expr><name><operator pos:line="665" pos:column="13">(<pos:position pos:line="665" pos:column="14"/></operator><operator pos:line="665" pos:column="14">*<pos:position pos:line="665" pos:column="15"/></operator><name pos:line="665" pos:column="15">ipsub<pos:position pos:line="665" pos:column="20"/></name><operator pos:line="665" pos:column="20">)<pos:position pos:line="665" pos:column="21"/></operator><operator pos:line="665" pos:column="21">-&gt;<pos:position pos:line="665" pos:column="26"/></operator><name pos:line="665" pos:column="23">family<pos:position pos:line="665" pos:column="29"/></name></name> <operator pos:line="665" pos:column="30">==<pos:position pos:line="665" pos:column="32"/></operator> <name pos:line="665" pos:column="33">AF_INET6<pos:position pos:line="665" pos:column="41"/></name></expr>)<pos:position pos:line="665" pos:column="42"/></condition><then pos:line="665" pos:column="42"> <block pos:line="665" pos:column="43">{
            <expr_stmt><expr><name pos:line="666" pos:column="13">maxbits<pos:position pos:line="666" pos:column="20"/></name> <operator pos:line="666" pos:column="21">=<pos:position pos:line="666" pos:column="22"/></operator> <literal type="number" pos:line="666" pos:column="23">128<pos:position pos:line="666" pos:column="26"/></literal></expr></expr_stmt></block></then></if></block></then></if></block></block></function></unit>
