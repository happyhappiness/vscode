<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1929_httpd-2.0.44.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">initgroups<pos:position pos:line="1" pos:column="15"/></name><parameter_list pos:line="1" pos:column="15">(<parameter><decl><type><specifier pos:line="1" pos:column="16">const<pos:position pos:line="1" pos:column="21"/></specifier> <name pos:line="1" pos:column="22">char<pos:position pos:line="1" pos:column="26"/></name> <modifier pos:line="1" pos:column="27">*<pos:position pos:line="1" pos:column="28"/></modifier></type><name pos:line="1" pos:column="28">name<pos:position pos:line="1" pos:column="32"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="34">gid_t<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">basegid<pos:position pos:line="1" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="48"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><call><name pos:line="3" pos:column="5">defined<pos:position pos:line="3" pos:column="12"/></name><argument_list pos:line="3" pos:column="12">(<argument><expr><name pos:line="3" pos:column="13">QNX<pos:position pos:line="3" pos:column="16"/></name></expr></argument>)<pos:position pos:line="3" pos:column="17"/></argument_list></call> <operator pos:line="3" pos:column="18">||<pos:position pos:line="3" pos:column="20"/></operator> <call><name pos:line="3" pos:column="21">defined<pos:position pos:line="3" pos:column="28"/></name><argument_list pos:line="3" pos:column="28">(<argument><expr><name pos:line="3" pos:column="29">MPE<pos:position pos:line="3" pos:column="32"/></name></expr></argument>)<pos:position pos:line="3" pos:column="33"/></argument_list></call> <operator pos:line="3" pos:column="34">||<pos:position pos:line="3" pos:column="36"/></operator> <call><name pos:line="3" pos:column="37">defined<pos:position pos:line="3" pos:column="44"/></name><argument_list pos:line="3" pos:column="44">(<argument><expr><name pos:line="3" pos:column="45">BEOS<pos:position pos:line="3" pos:column="49"/></name></expr></argument>)<pos:position pos:line="3" pos:column="50"/></argument_list></call> <operator pos:line="3" pos:column="51">||<pos:position pos:line="3" pos:column="53"/></operator> <call><name pos:line="3" pos:column="54">defined<pos:position pos:line="3" pos:column="61"/></name><argument_list pos:line="3" pos:column="61">(<argument><expr><name pos:line="3" pos:column="62">_OSD_POSIX<pos:position pos:line="3" pos:column="72"/></name></expr></argument>)<pos:position pos:line="3" pos:column="73"/></argument_list></call> <operator pos:line="3" pos:column="74">||<pos:position pos:line="3" pos:column="76"/></operator> <call><name pos:line="3" pos:column="77">defined<pos:position pos:line="3" pos:column="84"/></name><argument_list pos:line="3" pos:column="84">(<argument><expr><name pos:line="3" pos:column="85">TPF<pos:position pos:line="3" pos:column="88"/></name></expr></argument>)<pos:position pos:line="3" pos:column="89"/></argument_list></call> <operator pos:line="3" pos:column="90">||<pos:position pos:line="3" pos:column="92"/></operator> <call><name pos:line="3" pos:column="93">defined<pos:position pos:line="3" pos:column="100"/></name><argument_list pos:line="3" pos:column="100">(<argument><expr><name pos:line="3" pos:column="101">__TANDEM<pos:position pos:line="3" pos:column="109"/></name></expr></argument>)<pos:position pos:line="3" pos:column="110"/></argument_list></call> <operator pos:line="3" pos:column="111">||<pos:position pos:line="3" pos:column="113"/></operator> <call><name pos:line="3" pos:column="114">defined<pos:position pos:line="3" pos:column="121"/></name><argument_list pos:line="3" pos:column="121">(<argument><expr><name pos:line="3" pos:column="122">OS2<pos:position pos:line="3" pos:column="125"/></name></expr></argument>)<pos:position pos:line="3" pos:column="126"/></argument_list></call> <operator pos:line="3" pos:column="127">||<pos:position pos:line="3" pos:column="129"/></operator> <call><name pos:line="3" pos:column="130">defined<pos:position pos:line="3" pos:column="137"/></name><argument_list pos:line="3" pos:column="137">(<argument><expr><name pos:line="3" pos:column="138">WIN32<pos:position pos:line="3" pos:column="143"/></name></expr></argument>)<pos:position pos:line="3" pos:column="144"/></argument_list></call> <operator pos:line="3" pos:column="145">||<pos:position pos:line="3" pos:column="147"/></operator> <call><name pos:line="3" pos:column="148">defined<pos:position pos:line="3" pos:column="155"/></name><argument_list pos:line="3" pos:column="155">(<argument><expr><name pos:line="3" pos:column="156">NETWARE<pos:position pos:line="3" pos:column="163"/></name></expr></argument>)<pos:position pos:line="3" pos:column="164"/></argument_list></call></expr></cpp:if>
<comment type="block" pos:line="4" pos:column="1">/* QNX, MPE and BeOS do not appear to support supplementary groups. */</comment>
    <return pos:line="5" pos:column="5">return <expr><literal type="number" pos:line="5" pos:column="12">0<pos:position pos:line="5" pos:column="13"/></literal></expr>;<pos:position pos:line="5" pos:column="14"/></return>
<cpp:else pos:line="6" pos:column="1">#<cpp:directive pos:line="6" pos:column="2">else<pos:position pos:line="6" pos:column="6"/></cpp:directive></cpp:else> <comment type="block" pos:line="6" pos:column="7">/* ndef QNX */</comment>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">gid_t<pos:position pos:line="7" pos:column="10"/></name></type> <name><name pos:line="7" pos:column="11">groups<pos:position pos:line="7" pos:column="17"/></name><index pos:line="7" pos:column="17">[<expr><name pos:line="7" pos:column="18">NGROUPS_MAX<pos:position pos:line="7" pos:column="29"/></name></expr>]<pos:position pos:line="7" pos:column="30"/></index></name></decl>;<pos:position pos:line="7" pos:column="31"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="8" pos:column="5">struct<pos:position pos:line="8" pos:column="11"/></name> <name pos:line="8" pos:column="12">group<pos:position pos:line="8" pos:column="17"/></name></name> <modifier pos:line="8" pos:column="18">*<pos:position pos:line="8" pos:column="19"/></modifier></type><name pos:line="8" pos:column="19">g<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">int<pos:position pos:line="9" pos:column="8"/></name></type> <name pos:line="9" pos:column="9">index<pos:position pos:line="9" pos:column="14"/></name> <init pos:line="9" pos:column="15">= <expr><literal type="number" pos:line="9" pos:column="17">0<pos:position pos:line="9" pos:column="18"/></literal></expr></init></decl>;<pos:position pos:line="9" pos:column="19"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="11" pos:column="5">setgrent<pos:position pos:line="11" pos:column="13"/></name><argument_list pos:line="11" pos:column="13">()<pos:position pos:line="11" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="16"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="13" pos:column="5">groups<pos:position pos:line="13" pos:column="11"/></name><index pos:line="13" pos:column="11">[<expr><name pos:line="13" pos:column="12">index<pos:position pos:line="13" pos:column="17"/></name><operator pos:line="13" pos:column="17">++<pos:position pos:line="13" pos:column="19"/></operator></expr>]<pos:position pos:line="13" pos:column="20"/></index></name> <operator pos:line="13" pos:column="21">=<pos:position pos:line="13" pos:column="22"/></operator> <name pos:line="13" pos:column="23">basegid<pos:position pos:line="13" pos:column="30"/></name></expr>;<pos:position pos:line="13" pos:column="31"/></expr_stmt>

    <while pos:line="15" pos:column="5">while <condition pos:line="15" pos:column="11">(<expr><name pos:line="15" pos:column="12">index<pos:position pos:line="15" pos:column="17"/></name> <operator pos:line="15" pos:column="18">&lt;<pos:position pos:line="15" pos:column="22"/></operator> <name pos:line="15" pos:column="20">NGROUPS_MAX<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">&amp;&amp;<pos:position pos:line="15" pos:column="42"/></operator> <operator pos:line="15" pos:column="35">(<pos:position pos:line="15" pos:column="36"/></operator><operator pos:line="15" pos:column="36">(<pos:position pos:line="15" pos:column="37"/></operator><name pos:line="15" pos:column="37">g<pos:position pos:line="15" pos:column="38"/></name> <operator pos:line="15" pos:column="39">=<pos:position pos:line="15" pos:column="40"/></operator> <call><name pos:line="15" pos:column="41">getgrent<pos:position pos:line="15" pos:column="49"/></name><argument_list pos:line="15" pos:column="49">()<pos:position pos:line="15" pos:column="51"/></argument_list></call><operator pos:line="15" pos:column="51">)<pos:position pos:line="15" pos:column="52"/></operator> <operator pos:line="15" pos:column="53">!=<pos:position pos:line="15" pos:column="55"/></operator> <name pos:line="15" pos:column="56">NULL<pos:position pos:line="15" pos:column="60"/></name><operator pos:line="15" pos:column="60">)<pos:position pos:line="15" pos:column="61"/></operator></expr>)<pos:position pos:line="15" pos:column="62"/></condition> <block pos:line="15" pos:column="63">{
        <if pos:line="16" pos:column="9">if <condition pos:line="16" pos:column="12">(<expr><name><name pos:line="16" pos:column="13">g<pos:position pos:line="16" pos:column="14"/></name><operator pos:line="16" pos:column="14">-&gt;<pos:position pos:line="16" pos:column="19"/></operator><name pos:line="16" pos:column="16">gr_gid<pos:position pos:line="16" pos:column="22"/></name></name> <operator pos:line="16" pos:column="23">!=<pos:position pos:line="16" pos:column="25"/></operator> <name pos:line="16" pos:column="26">basegid<pos:position pos:line="16" pos:column="33"/></name></expr>)<pos:position pos:line="16" pos:column="34"/></condition><then pos:line="16" pos:column="34"> <block pos:line="16" pos:column="35">{
            <decl_stmt><decl><type><name pos:line="17" pos:column="13">char<pos:position pos:line="17" pos:column="17"/></name> <modifier pos:line="17" pos:column="18">*<pos:position pos:line="17" pos:column="19"/></modifier><modifier pos:line="17" pos:column="19">*<pos:position pos:line="17" pos:column="20"/></modifier></type><name pos:line="17" pos:column="20">names<pos:position pos:line="17" pos:column="25"/></name></decl>;<pos:position pos:line="17" pos:column="26"/></decl_stmt>

            <for pos:line="19" pos:column="13">for <control pos:line="19" pos:column="17">(<init><expr><name pos:line="19" pos:column="18">names<pos:position pos:line="19" pos:column="23"/></name> <operator pos:line="19" pos:column="24">=<pos:position pos:line="19" pos:column="25"/></operator> <name><name pos:line="19" pos:column="26">g<pos:position pos:line="19" pos:column="27"/></name><operator pos:line="19" pos:column="27">-&gt;<pos:position pos:line="19" pos:column="32"/></operator><name pos:line="19" pos:column="29">gr_mem<pos:position pos:line="19" pos:column="35"/></name></name></expr>;<pos:position pos:line="19" pos:column="36"/></init> <condition><expr><operator pos:line="19" pos:column="37">*<pos:position pos:line="19" pos:column="38"/></operator><name pos:line="19" pos:column="38">names<pos:position pos:line="19" pos:column="43"/></name> <operator pos:line="19" pos:column="44">!=<pos:position pos:line="19" pos:column="46"/></operator> <name pos:line="19" pos:column="47">NULL<pos:position pos:line="19" pos:column="51"/></name></expr>;<pos:position pos:line="19" pos:column="52"/></condition> <incr><expr><operator pos:line="19" pos:column="53">++<pos:position pos:line="19" pos:column="55"/></operator><name pos:line="19" pos:column="55">names<pos:position pos:line="19" pos:column="60"/></name></expr></incr>)<pos:position pos:line="19" pos:column="61"/></control> <block pos:line="19" pos:column="62">{
                <if pos:line="20" pos:column="17">if <condition pos:line="20" pos:column="20">(<expr><operator pos:line="20" pos:column="21">!<pos:position pos:line="20" pos:column="22"/></operator><call><name pos:line="20" pos:column="22">strcmp<pos:position pos:line="20" pos:column="28"/></name><argument_list pos:line="20" pos:column="28">(<argument><expr><operator pos:line="20" pos:column="29">*<pos:position pos:line="20" pos:column="30"/></operator><name pos:line="20" pos:column="30">names<pos:position pos:line="20" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="20" pos:column="37">name<pos:position pos:line="20" pos:column="41"/></name></expr></argument>)<pos:position pos:line="20" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="20" pos:column="43"/></condition><then pos:line="20" pos:column="43">
                    <block type="pseudo"><expr_stmt><expr><name><name pos:line="21" pos:column="21">groups<pos:position pos:line="21" pos:column="27"/></name><index pos:line="21" pos:column="27">[<expr><name pos:line="21" pos:column="28">index<pos:position pos:line="21" pos:column="33"/></name><operator pos:line="21" pos:column="33">++<pos:position pos:line="21" pos:column="35"/></operator></expr>]<pos:position pos:line="21" pos:column="36"/></index></name> <operator pos:line="21" pos:column="37">=<pos:position pos:line="21" pos:column="38"/></operator> <name><name pos:line="21" pos:column="39">g<pos:position pos:line="21" pos:column="40"/></name><operator pos:line="21" pos:column="40">-&gt;<pos:position pos:line="21" pos:column="45"/></operator><name pos:line="21" pos:column="42">gr_gid<pos:position pos:line="21" pos:column="48"/></name></name></expr>;<pos:position pos:line="21" pos:column="49"/></expr_stmt></block></then></if>
            }<pos:position pos:line="22" pos:column="14"/></block></for>
        }<pos:position pos:line="23" pos:column="10"/></block></then></if>
    }<pos:position pos:line="24" pos:column="6"/></block></while>

    <expr_stmt><expr><call><name pos:line="26" pos:column="5">endgrent<pos:position pos:line="26" pos:column="13"/></name><argument_list pos:line="26" pos:column="13">()<pos:position pos:line="26" pos:column="15"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="16"/></expr_stmt>

    <return pos:line="28" pos:column="5">return <expr><call><name pos:line="28" pos:column="12">setgroups<pos:position pos:line="28" pos:column="21"/></name><argument_list pos:line="28" pos:column="21">(<argument><expr><name pos:line="28" pos:column="22">index<pos:position pos:line="28" pos:column="27"/></name></expr></argument>, <argument><expr><name pos:line="28" pos:column="29">groups<pos:position pos:line="28" pos:column="35"/></name></expr></argument>)<pos:position pos:line="28" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="28" pos:column="37"/></return>
<cpp:endif pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">endif<pos:position pos:line="29" pos:column="7"/></cpp:directive></cpp:endif> <comment type="block" pos:line="29" pos:column="8">/* def QNX */</comment>
}<pos:position pos:line="30" pos:column="2"/></block></function></unit>
