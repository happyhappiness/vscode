<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3414_httpd-2.4.3.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">apr_status_t<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">ap_queue_info_set_idle<pos:position pos:line="1" pos:column="36"/></name><parameter_list pos:line="1" pos:column="36">(<parameter><decl><type><name pos:line="1" pos:column="37">fd_queue_info_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">queue_info<pos:position pos:line="1" pos:column="64"/></name></decl></parameter>,
                                    <parameter><decl><type><name pos:line="2" pos:column="37">apr_pool_t<pos:position pos:line="2" pos:column="47"/></name> <modifier pos:line="2" pos:column="48">*<pos:position pos:line="2" pos:column="49"/></modifier></type><name pos:line="2" pos:column="49">pool_to_recycle<pos:position pos:line="2" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="65"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_status_t<pos:position pos:line="4" pos:column="17"/></name></type> <name pos:line="4" pos:column="18">rv<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">prev_idlers<pos:position pos:line="5" pos:column="20"/></name></decl>;<pos:position pos:line="5" pos:column="21"/></decl_stmt>

    <comment type="block" pos:line="7" pos:column="5">/* If we have been given a pool to recycle, atomically link
     * it into the queue_info's list of recycled pools
     */</comment>
    <if pos:line="10" pos:column="5">if <condition pos:line="10" pos:column="8">(<expr><name pos:line="10" pos:column="9">pool_to_recycle<pos:position pos:line="10" pos:column="24"/></name></expr>)<pos:position pos:line="10" pos:column="25"/></condition><then pos:line="10" pos:column="25"> <block pos:line="10" pos:column="26">{
        <decl_stmt><decl><type><name><name pos:line="11" pos:column="9">struct<pos:position pos:line="11" pos:column="15"/></name> <name pos:line="11" pos:column="16">recycled_pool<pos:position pos:line="11" pos:column="29"/></name></name> <modifier pos:line="11" pos:column="30">*<pos:position pos:line="11" pos:column="31"/></modifier></type><name pos:line="11" pos:column="31">new_recycle<pos:position pos:line="11" pos:column="42"/></name></decl>;<pos:position pos:line="11" pos:column="43"/></decl_stmt>
        <expr_stmt><expr><name pos:line="12" pos:column="9">new_recycle<pos:position pos:line="12" pos:column="20"/></name> <operator pos:line="12" pos:column="21">=<pos:position pos:line="12" pos:column="22"/></operator> <operator pos:line="12" pos:column="23">(<pos:position pos:line="12" pos:column="24"/></operator>struct <name pos:line="12" pos:column="31">recycled_pool<pos:position pos:line="12" pos:column="44"/></name> <operator pos:line="12" pos:column="45">*<pos:position pos:line="12" pos:column="46"/></operator><operator pos:line="12" pos:column="46">)<pos:position pos:line="12" pos:column="47"/></operator><call><name pos:line="12" pos:column="47">apr_palloc<pos:position pos:line="12" pos:column="57"/></name><argument_list pos:line="12" pos:column="57">(<argument><expr><name pos:line="12" pos:column="58">pool_to_recycle<pos:position pos:line="12" pos:column="73"/></name></expr></argument>,
                                                         <argument><expr><sizeof pos:line="13" pos:column="58">sizeof<argument_list pos:line="13" pos:column="64">(<argument><expr><operator pos:line="13" pos:column="65">*<pos:position pos:line="13" pos:column="66"/></operator><name pos:line="13" pos:column="66">new_recycle<pos:position pos:line="13" pos:column="77"/></name></expr></argument>)<pos:position pos:line="13" pos:column="78"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="13" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="80"/></expr_stmt>
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">new_recycle<pos:position pos:line="14" pos:column="20"/></name><operator pos:line="14" pos:column="20">-&gt;<pos:position pos:line="14" pos:column="25"/></operator><name pos:line="14" pos:column="22">pool<pos:position pos:line="14" pos:column="26"/></name></name> <operator pos:line="14" pos:column="27">=<pos:position pos:line="14" pos:column="28"/></operator> <name pos:line="14" pos:column="29">pool_to_recycle<pos:position pos:line="14" pos:column="44"/></name></expr>;<pos:position pos:line="14" pos:column="45"/></expr_stmt>
        <for pos:line="15" pos:column="9">for <control pos:line="15" pos:column="13">(<init pos:line="15" pos:column="14">;<pos:position pos:line="15" pos:column="15"/></init><condition pos:line="15" pos:column="15">;<pos:position pos:line="15" pos:column="16"/></condition><incr/>)<pos:position pos:line="15" pos:column="17"/></control> <block pos:line="15" pos:column="18">{
            <comment type="block" pos:line="16" pos:column="13">/* Save queue_info-&gt;recycled_pool in local variable next because
             * new_recycle-&gt;next can be changed after apr_atomic_casptr
             * function call. For gory details see PR 44402.
             */</comment>
            <decl_stmt><decl><type><name><name pos:line="20" pos:column="13">struct<pos:position pos:line="20" pos:column="19"/></name> <name pos:line="20" pos:column="20">recycled_pool<pos:position pos:line="20" pos:column="33"/></name></name> <modifier pos:line="20" pos:column="34">*<pos:position pos:line="20" pos:column="35"/></modifier></type><name pos:line="20" pos:column="35">next<pos:position pos:line="20" pos:column="39"/></name> <init pos:line="20" pos:column="40">= <expr><name><name pos:line="20" pos:column="42">queue_info<pos:position pos:line="20" pos:column="52"/></name><operator pos:line="20" pos:column="52">-&gt;<pos:position pos:line="20" pos:column="57"/></operator><name pos:line="20" pos:column="54">recycled_pools<pos:position pos:line="20" pos:column="68"/></name></name></expr></init></decl>;<pos:position pos:line="20" pos:column="69"/></decl_stmt>
            <expr_stmt><expr><name><name pos:line="21" pos:column="13">new_recycle<pos:position pos:line="21" pos:column="24"/></name><operator pos:line="21" pos:column="24">-&gt;<pos:position pos:line="21" pos:column="29"/></operator><name pos:line="21" pos:column="26">next<pos:position pos:line="21" pos:column="30"/></name></name> <operator pos:line="21" pos:column="31">=<pos:position pos:line="21" pos:column="32"/></operator> <name pos:line="21" pos:column="33">next<pos:position pos:line="21" pos:column="37"/></name></expr>;<pos:position pos:line="21" pos:column="38"/></expr_stmt>
            <if pos:line="22" pos:column="13">if <condition pos:line="22" pos:column="16">(<expr><call><name pos:line="22" pos:column="17">apr_atomic_casptr<pos:position pos:line="22" pos:column="34"/></name><argument_list pos:line="22" pos:column="34">(<argument><expr><operator pos:line="22" pos:column="35">(<pos:position pos:line="22" pos:column="36"/></operator><name pos:line="22" pos:column="36">void<pos:position pos:line="22" pos:column="40"/></name><operator pos:line="22" pos:column="40">*<pos:position pos:line="22" pos:column="41"/></operator><operator pos:line="22" pos:column="41">)<pos:position pos:line="22" pos:column="42"/></operator><operator pos:line="22" pos:column="42">&amp;<pos:position pos:line="22" pos:column="47"/></operator><operator pos:line="22" pos:column="43">(<pos:position pos:line="22" pos:column="44"/></operator><name><name pos:line="22" pos:column="44">queue_info<pos:position pos:line="22" pos:column="54"/></name><operator pos:line="22" pos:column="54">-&gt;<pos:position pos:line="22" pos:column="59"/></operator><name pos:line="22" pos:column="56">recycled_pools<pos:position pos:line="22" pos:column="70"/></name></name><operator pos:line="22" pos:column="70">)<pos:position pos:line="22" pos:column="71"/></operator></expr></argument>,
                                  <argument><expr><name pos:line="23" pos:column="35">new_recycle<pos:position pos:line="23" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="48">next<pos:position pos:line="23" pos:column="52"/></name></expr></argument>)<pos:position pos:line="23" pos:column="53"/></argument_list></call> <operator pos:line="23" pos:column="54">==<pos:position pos:line="23" pos:column="56"/></operator> <name pos:line="23" pos:column="57">next<pos:position pos:line="23" pos:column="61"/></name></expr>)<pos:position pos:line="23" pos:column="62"/></condition><then pos:line="23" pos:column="62"> <block pos:line="23" pos:column="63">{
                <break pos:line="24" pos:column="17">break;<pos:position pos:line="24" pos:column="23"/></break>
            }<pos:position pos:line="25" pos:column="14"/></block></then></if>
        }<pos:position pos:line="26" pos:column="10"/></block></for>
    }<pos:position pos:line="27" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="29" pos:column="5">/* Atomically increment the count of idle workers */</comment>
    <for pos:line="30" pos:column="5">for <control pos:line="30" pos:column="9">(<init pos:line="30" pos:column="10">;<pos:position pos:line="30" pos:column="11"/></init><condition pos:line="30" pos:column="11">;<pos:position pos:line="30" pos:column="12"/></condition><incr/>)<pos:position pos:line="30" pos:column="13"/></control> <block pos:line="30" pos:column="14">{
        <expr_stmt><expr><name pos:line="31" pos:column="9">prev_idlers<pos:position pos:line="31" pos:column="20"/></name> <operator pos:line="31" pos:column="21">=<pos:position pos:line="31" pos:column="22"/></operator> <name><name pos:line="31" pos:column="23">queue_info<pos:position pos:line="31" pos:column="33"/></name><operator pos:line="31" pos:column="33">-&gt;<pos:position pos:line="31" pos:column="38"/></operator><name pos:line="31" pos:column="35">idlers<pos:position pos:line="31" pos:column="41"/></name></name></expr>;<pos:position pos:line="31" pos:column="42"/></expr_stmt>
        <if pos:line="32" pos:column="9">if <condition pos:line="32" pos:column="12">(<expr><call><name pos:line="32" pos:column="13">apr_atomic_cas32<pos:position pos:line="32" pos:column="29"/></name><argument_list pos:line="32" pos:column="29">(<argument><expr><operator pos:line="32" pos:column="30">&amp;<pos:position pos:line="32" pos:column="35"/></operator><operator pos:line="32" pos:column="31">(<pos:position pos:line="32" pos:column="32"/></operator><name><name pos:line="32" pos:column="32">queue_info<pos:position pos:line="32" pos:column="42"/></name><operator pos:line="32" pos:column="42">-&gt;<pos:position pos:line="32" pos:column="47"/></operator><name pos:line="32" pos:column="44">idlers<pos:position pos:line="32" pos:column="50"/></name></name><operator pos:line="32" pos:column="50">)<pos:position pos:line="32" pos:column="51"/></operator></expr></argument>, <argument><expr><name pos:line="32" pos:column="53">prev_idlers<pos:position pos:line="32" pos:column="64"/></name> <operator pos:line="32" pos:column="65">+<pos:position pos:line="32" pos:column="66"/></operator> <literal type="number" pos:line="32" pos:column="67">1<pos:position pos:line="32" pos:column="68"/></literal></expr></argument>,
                             <argument><expr><name pos:line="33" pos:column="30">prev_idlers<pos:position pos:line="33" pos:column="41"/></name></expr></argument>)<pos:position pos:line="33" pos:column="42"/></argument_list></call> <operator pos:line="33" pos:column="43">==<pos:position pos:line="33" pos:column="45"/></operator> <name pos:line="33" pos:column="46">prev_idlers<pos:position pos:line="33" pos:column="57"/></name></expr>)<pos:position pos:line="33" pos:column="58"/></condition><then pos:line="33" pos:column="58"> <block pos:line="33" pos:column="59">{
            <break pos:line="34" pos:column="13">break;<pos:position pos:line="34" pos:column="19"/></break>
        }<pos:position pos:line="35" pos:column="10"/></block></then></if>
    }<pos:position pos:line="36" pos:column="6"/></block></for>

    <comment type="block" pos:line="38" pos:column="5">/* If this thread just made the idle worker count nonzero,
     * wake up the listener. */</comment>
    <if pos:line="40" pos:column="5">if <condition pos:line="40" pos:column="8">(<expr><name pos:line="40" pos:column="9">prev_idlers<pos:position pos:line="40" pos:column="20"/></name> <operator pos:line="40" pos:column="21">==<pos:position pos:line="40" pos:column="23"/></operator> <literal type="number" pos:line="40" pos:column="24">0<pos:position pos:line="40" pos:column="25"/></literal></expr>)<pos:position pos:line="40" pos:column="26"/></condition><then pos:line="40" pos:column="26"> <block pos:line="40" pos:column="27">{
        <expr_stmt><expr><name pos:line="41" pos:column="9">rv<pos:position pos:line="41" pos:column="11"/></name> <operator pos:line="41" pos:column="12">=<pos:position pos:line="41" pos:column="13"/></operator> <call><name pos:line="41" pos:column="14">apr_thread_mutex_lock<pos:position pos:line="41" pos:column="35"/></name><argument_list pos:line="41" pos:column="35">(<argument><expr><name><name pos:line="41" pos:column="36">queue_info<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">-&gt;<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="48">idlers_mutex<pos:position pos:line="41" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="62"/></expr_stmt>
        <if pos:line="42" pos:column="9">if <condition pos:line="42" pos:column="12">(<expr><name pos:line="42" pos:column="13">rv<pos:position pos:line="42" pos:column="15"/></name> <operator pos:line="42" pos:column="16">!=<pos:position pos:line="42" pos:column="18"/></operator> <name pos:line="42" pos:column="19">APR_SUCCESS<pos:position pos:line="42" pos:column="30"/></name></expr>)<pos:position pos:line="42" pos:column="31"/></condition><then pos:line="42" pos:column="31"> <block pos:line="42" pos:column="32">{
            <return pos:line="43" pos:column="13">return <expr><name pos:line="43" pos:column="20">rv<pos:position pos:line="43" pos:column="22"/></name></expr>;<pos:position pos:line="43" pos:column="23"/></return>
        }<pos:position pos:line="44" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="45" pos:column="9">rv<pos:position pos:line="45" pos:column="11"/></name> <operator pos:line="45" pos:column="12">=<pos:position pos:line="45" pos:column="13"/></operator> <call><name pos:line="45" pos:column="14">apr_thread_cond_signal<pos:position pos:line="45" pos:column="36"/></name><argument_list pos:line="45" pos:column="36">(<argument><expr><name><name pos:line="45" pos:column="37">queue_info<pos:position pos:line="45" pos:column="47"/></name><operator pos:line="45" pos:column="47">-&gt;<pos:position pos:line="45" pos:column="52"/></operator><name pos:line="45" pos:column="49">wait_for_idler<pos:position pos:line="45" pos:column="63"/></name></name></expr></argument>)<pos:position pos:line="45" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="65"/></expr_stmt>
        <if pos:line="46" pos:column="9">if <condition pos:line="46" pos:column="12">(<expr><name pos:line="46" pos:column="13">rv<pos:position pos:line="46" pos:column="15"/></name> <operator pos:line="46" pos:column="16">!=<pos:position pos:line="46" pos:column="18"/></operator> <name pos:line="46" pos:column="19">APR_SUCCESS<pos:position pos:line="46" pos:column="30"/></name></expr>)<pos:position pos:line="46" pos:column="31"/></condition><then pos:line="46" pos:column="31"> <block pos:line="46" pos:column="32">{
            <expr_stmt><expr><call><name pos:line="47" pos:column="13">apr_thread_mutex_unlock<pos:position pos:line="47" pos:column="36"/></name><argument_list pos:line="47" pos:column="36">(<argument><expr><name><name pos:line="47" pos:column="37">queue_info<pos:position pos:line="47" pos:column="47"/></name><operator pos:line="47" pos:column="47">-&gt;<pos:position pos:line="47" pos:column="52"/></operator><name pos:line="47" pos:column="49">idlers_mutex<pos:position pos:line="47" pos:column="61"/></name></name></expr></argument>)<pos:position pos:line="47" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="47" pos:column="63"/></expr_stmt>
            <return pos:line="48" pos:column="13">return <expr><name pos:line="48" pos:column="20">rv<pos:position pos:line="48" pos:column="22"/></name></expr>;<pos:position pos:line="48" pos:column="23"/></return>
        }<pos:position pos:line="49" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="50" pos:column="9">rv<pos:position pos:line="50" pos:column="11"/></name> <operator pos:line="50" pos:column="12">=<pos:position pos:line="50" pos:column="13"/></operator> <call><name pos:line="50" pos:column="14">apr_thread_mutex_unlock<pos:position pos:line="50" pos:column="37"/></name><argument_list pos:line="50" pos:column="37">(<argument><expr><name><name pos:line="50" pos:column="38">queue_info<pos:position pos:line="50" pos:column="48"/></name><operator pos:line="50" pos:column="48">-&gt;<pos:position pos:line="50" pos:column="53"/></operator><name pos:line="50" pos:column="50">idlers_mutex<pos:position pos:line="50" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="50" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="64"/></expr_stmt>
        <if pos:line="51" pos:column="9">if <condition pos:line="51" pos:column="12">(<expr><name pos:line="51" pos:column="13">rv<pos:position pos:line="51" pos:column="15"/></name> <operator pos:line="51" pos:column="16">!=<pos:position pos:line="51" pos:column="18"/></operator> <name pos:line="51" pos:column="19">APR_SUCCESS<pos:position pos:line="51" pos:column="30"/></name></expr>)<pos:position pos:line="51" pos:column="31"/></condition><then pos:line="51" pos:column="31"> <block pos:line="51" pos:column="32">{
            <return pos:line="52" pos:column="13">return <expr><name pos:line="52" pos:column="20">rv<pos:position pos:line="52" pos:column="22"/></name></expr>;<pos:position pos:line="52" pos:column="23"/></return>
        }<pos:position pos:line="53" pos:column="10"/></block></then></if>
    }<pos:position pos:line="54" pos:column="6"/></block></then></if>

    <return pos:line="56" pos:column="5">return <expr><name pos:line="56" pos:column="12">APR_SUCCESS<pos:position pos:line="56" pos:column="23"/></name></expr>;<pos:position pos:line="56" pos:column="24"/></return>
}<pos:position pos:line="57" pos:column="2"/></block></function></unit>
