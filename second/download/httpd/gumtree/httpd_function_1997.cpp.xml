<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_1997.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">ap_proxy_read_headers<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">request_rec<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">r<pos:position pos:line="1" pos:column="49"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="51">request_rec<pos:position pos:line="1" pos:column="62"/></name> <modifier pos:line="1" pos:column="63">*<pos:position pos:line="1" pos:column="64"/></modifier></type><name pos:line="1" pos:column="64">rr<pos:position pos:line="1" pos:column="66"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="2" pos:column="35">char<pos:position pos:line="2" pos:column="39"/></name> <modifier pos:line="2" pos:column="40">*<pos:position pos:line="2" pos:column="41"/></modifier></type><name pos:line="2" pos:column="41">buffer<pos:position pos:line="2" pos:column="47"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="49">int<pos:position pos:line="2" pos:column="52"/></name></type> <name pos:line="2" pos:column="53">size<pos:position pos:line="2" pos:column="57"/></name></decl></parameter>,
                                  <parameter><decl><type><name pos:line="3" pos:column="35">conn_rec<pos:position pos:line="3" pos:column="43"/></name> <modifier pos:line="3" pos:column="44">*<pos:position pos:line="3" pos:column="45"/></modifier></type><name pos:line="3" pos:column="45">c<pos:position pos:line="3" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="3" pos:column="48">int<pos:position pos:line="3" pos:column="51"/></name> <modifier pos:line="3" pos:column="52">*<pos:position pos:line="3" pos:column="53"/></modifier></type><name pos:line="3" pos:column="53">pread_len<pos:position pos:line="3" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="3" pos:column="63"/></parameter_list>
<block pos:line="4" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">int<pos:position pos:line="5" pos:column="8"/></name></type> <name pos:line="5" pos:column="9">len<pos:position pos:line="5" pos:column="12"/></name></decl>;<pos:position pos:line="5" pos:column="13"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">value<pos:position pos:line="6" pos:column="16"/></name></decl>, <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier><decl><type ref="prev"/><name pos:line="6" pos:column="19">end<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">char<pos:position pos:line="7" pos:column="9"/></name></type> <name><name pos:line="7" pos:column="10">field<pos:position pos:line="7" pos:column="15"/></name><index pos:line="7" pos:column="15">[<expr><name pos:line="7" pos:column="16">MAX_STRING_LEN<pos:position pos:line="7" pos:column="30"/></name></expr>]<pos:position pos:line="7" pos:column="31"/></index></name></decl>;<pos:position pos:line="7" pos:column="32"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">int<pos:position pos:line="8" pos:column="8"/></name></type> <name pos:line="8" pos:column="9">saw_headers<pos:position pos:line="8" pos:column="20"/></name> <init pos:line="8" pos:column="21">= <expr><literal type="number" pos:line="8" pos:column="23">0<pos:position pos:line="8" pos:column="24"/></literal></expr></init></decl>;<pos:position pos:line="8" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">void<pos:position pos:line="9" pos:column="9"/></name> <modifier pos:line="9" pos:column="10">*<pos:position pos:line="9" pos:column="11"/></modifier></type><name pos:line="9" pos:column="11">sconf<pos:position pos:line="9" pos:column="16"/></name> <init pos:line="9" pos:column="17">= <expr><name><name pos:line="9" pos:column="19">r<pos:position pos:line="9" pos:column="20"/></name><operator pos:line="9" pos:column="20">-&gt;<pos:position pos:line="9" pos:column="25"/></operator><name pos:line="9" pos:column="22">server<pos:position pos:line="9" pos:column="28"/></name><operator pos:line="9" pos:column="28">-&gt;<pos:position pos:line="9" pos:column="33"/></operator><name pos:line="9" pos:column="30">module_config<pos:position pos:line="9" pos:column="43"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">proxy_server_conf<pos:position pos:line="10" pos:column="22"/></name> <modifier pos:line="10" pos:column="23">*<pos:position pos:line="10" pos:column="24"/></modifier></type><name pos:line="10" pos:column="24">psc<pos:position pos:line="10" pos:column="27"/></name></decl>;<pos:position pos:line="10" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">proxy_dir_conf<pos:position pos:line="11" pos:column="19"/></name> <modifier pos:line="11" pos:column="20">*<pos:position pos:line="11" pos:column="21"/></modifier></type><name pos:line="11" pos:column="21">dconf<pos:position pos:line="11" pos:column="26"/></name></decl>;<pos:position pos:line="11" pos:column="27"/></decl_stmt>

    <expr_stmt><expr><name pos:line="13" pos:column="5">dconf<pos:position pos:line="13" pos:column="10"/></name> <operator pos:line="13" pos:column="11">=<pos:position pos:line="13" pos:column="12"/></operator> <call><name pos:line="13" pos:column="13">ap_get_module_config<pos:position pos:line="13" pos:column="33"/></name><argument_list pos:line="13" pos:column="33">(<argument><expr><name><name pos:line="13" pos:column="34">r<pos:position pos:line="13" pos:column="35"/></name><operator pos:line="13" pos:column="35">-&gt;<pos:position pos:line="13" pos:column="40"/></operator><name pos:line="13" pos:column="37">per_dir_config<pos:position pos:line="13" pos:column="51"/></name></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="53">&amp;<pos:position pos:line="13" pos:column="58"/></operator><name pos:line="13" pos:column="54">proxy_module<pos:position pos:line="13" pos:column="66"/></name></expr></argument>)<pos:position pos:line="13" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="68"/></expr_stmt>
    <expr_stmt><expr><name pos:line="14" pos:column="5">psc<pos:position pos:line="14" pos:column="8"/></name> <operator pos:line="14" pos:column="9">=<pos:position pos:line="14" pos:column="10"/></operator> <operator pos:line="14" pos:column="11">(<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">proxy_server_conf<pos:position pos:line="14" pos:column="29"/></name> <operator pos:line="14" pos:column="30">*<pos:position pos:line="14" pos:column="31"/></operator><operator pos:line="14" pos:column="31">)<pos:position pos:line="14" pos:column="32"/></operator> <call><name pos:line="14" pos:column="33">ap_get_module_config<pos:position pos:line="14" pos:column="53"/></name><argument_list pos:line="14" pos:column="53">(<argument><expr><name pos:line="14" pos:column="54">sconf<pos:position pos:line="14" pos:column="59"/></name></expr></argument>, <argument><expr><operator pos:line="14" pos:column="61">&amp;<pos:position pos:line="14" pos:column="66"/></operator><name pos:line="14" pos:column="62">proxy_module<pos:position pos:line="14" pos:column="74"/></name></expr></argument>)<pos:position pos:line="14" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="76"/></expr_stmt>

    <expr_stmt><expr><name><name pos:line="16" pos:column="5">r<pos:position pos:line="16" pos:column="6"/></name><operator pos:line="16" pos:column="6">-&gt;<pos:position pos:line="16" pos:column="11"/></operator><name pos:line="16" pos:column="8">headers_out<pos:position pos:line="16" pos:column="19"/></name></name> <operator pos:line="16" pos:column="20">=<pos:position pos:line="16" pos:column="21"/></operator> <call><name pos:line="16" pos:column="22">apr_table_make<pos:position pos:line="16" pos:column="36"/></name><argument_list pos:line="16" pos:column="36">(<argument><expr><name><name pos:line="16" pos:column="37">r<pos:position pos:line="16" pos:column="38"/></name><operator pos:line="16" pos:column="38">-&gt;<pos:position pos:line="16" pos:column="43"/></operator><name pos:line="16" pos:column="40">pool<pos:position pos:line="16" pos:column="44"/></name></name></expr></argument>, <argument><expr><literal type="number" pos:line="16" pos:column="46">20<pos:position pos:line="16" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="16" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="50"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="17" pos:column="5">*<pos:position pos:line="17" pos:column="6"/></operator><name pos:line="17" pos:column="6">pread_len<pos:position pos:line="17" pos:column="15"/></name> <operator pos:line="17" pos:column="16">=<pos:position pos:line="17" pos:column="17"/></operator> <literal type="number" pos:line="17" pos:column="18">0<pos:position pos:line="17" pos:column="19"/></literal></expr>;<pos:position pos:line="17" pos:column="20"/></expr_stmt>

    <comment type="block" pos:line="19" pos:column="5">/*
     * Read header lines until we get the empty separator line, a read error,
     * the connection closes (EOF), or we timeout.
     */</comment>
    <expr_stmt><expr><call><name pos:line="23" pos:column="5">ap_log_rerror<pos:position pos:line="23" pos:column="18"/></name><argument_list pos:line="23" pos:column="18">(<argument><expr><name pos:line="23" pos:column="19">APLOG_MARK<pos:position pos:line="23" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="31">APLOG_TRACE4<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="23" pos:column="45">0<pos:position pos:line="23" pos:column="46"/></literal></expr></argument>, <argument><expr><name pos:line="23" pos:column="48">r<pos:position pos:line="23" pos:column="49"/></name></expr></argument>,
                  <argument><expr><literal type="string" pos:line="24" pos:column="19">"Headers received from backend:"<pos:position pos:line="24" pos:column="51"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="53"/></expr_stmt>
    <while pos:line="25" pos:column="5">while <condition pos:line="25" pos:column="11">(<expr><operator pos:line="25" pos:column="12">(<pos:position pos:line="25" pos:column="13"/></operator><name pos:line="25" pos:column="13">len<pos:position pos:line="25" pos:column="16"/></name> <operator pos:line="25" pos:column="17">=<pos:position pos:line="25" pos:column="18"/></operator> <call><name pos:line="25" pos:column="19">ap_getline<pos:position pos:line="25" pos:column="29"/></name><argument_list pos:line="25" pos:column="29">(<argument><expr><name pos:line="25" pos:column="30">buffer<pos:position pos:line="25" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="38">size<pos:position pos:line="25" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="44">rr<pos:position pos:line="25" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="25" pos:column="48">1<pos:position pos:line="25" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="25" pos:column="50"/></argument_list></call><operator pos:line="25" pos:column="50">)<pos:position pos:line="25" pos:column="51"/></operator> <operator pos:line="25" pos:column="52">&gt;<pos:position pos:line="25" pos:column="56"/></operator> <literal type="number" pos:line="25" pos:column="54">0<pos:position pos:line="25" pos:column="55"/></literal></expr>)<pos:position pos:line="25" pos:column="56"/></condition> <block pos:line="25" pos:column="57">{
        <expr_stmt><expr><call><name pos:line="26" pos:column="9">ap_log_rerror<pos:position pos:line="26" pos:column="22"/></name><argument_list pos:line="26" pos:column="22">(<argument><expr><name pos:line="26" pos:column="23">APLOG_MARK<pos:position pos:line="26" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="26" pos:column="35">APLOG_TRACE4<pos:position pos:line="26" pos:column="47"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="49">0<pos:position pos:line="26" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="52">r<pos:position pos:line="26" pos:column="53"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="26" pos:column="55">"%s"<pos:position pos:line="26" pos:column="59"/></literal></expr></argument>, <argument><expr><name pos:line="26" pos:column="61">buffer<pos:position pos:line="26" pos:column="67"/></name></expr></argument>)<pos:position pos:line="26" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="69"/></expr_stmt>

        <if pos:line="28" pos:column="9">if <condition pos:line="28" pos:column="12">(<expr><operator pos:line="28" pos:column="13">!<pos:position pos:line="28" pos:column="14"/></operator><operator pos:line="28" pos:column="14">(<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">value<pos:position pos:line="28" pos:column="20"/></name> <operator pos:line="28" pos:column="21">=<pos:position pos:line="28" pos:column="22"/></operator> <call><name pos:line="28" pos:column="23">strchr<pos:position pos:line="28" pos:column="29"/></name><argument_list pos:line="28" pos:column="29">(<argument><expr><name pos:line="28" pos:column="30">buffer<pos:position pos:line="28" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="char" pos:line="28" pos:column="38">':'<pos:position pos:line="28" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="28" pos:column="42"/></argument_list></call><operator pos:line="28" pos:column="42">)<pos:position pos:line="28" pos:column="43"/></operator></expr>)<pos:position pos:line="28" pos:column="44"/></condition><then pos:line="28" pos:column="44"> <block pos:line="28" pos:column="45">{     <comment type="block" pos:line="28" pos:column="51">/* Find the colon separator */</comment>

            <comment type="block" pos:line="30" pos:column="13">/* We may encounter invalid headers, usually from buggy
             * MS IIS servers, so we need to determine just how to handle
             * them. We can either ignore them, assume that they mark the
             * start-of-body (eg: a missing CRLF) or (the default) mark
             * the headers as totally bogus and return a 500. The sole
             * exception is an extra "HTTP/1.0 200, OK" line sprinkled
             * in between the usual MIME headers, which is a favorite
             * IIS bug.
             */</comment>
             <comment type="block" pos:line="39" pos:column="14">/* XXX: The mask check is buggy if we ever see an HTTP/1.10 */</comment>

            <if pos:line="41" pos:column="13">if <condition pos:line="41" pos:column="16">(<expr><operator pos:line="41" pos:column="17">!<pos:position pos:line="41" pos:column="18"/></operator><call><name pos:line="41" pos:column="18">apr_date_checkmask<pos:position pos:line="41" pos:column="36"/></name><argument_list pos:line="41" pos:column="36">(<argument><expr><name pos:line="41" pos:column="37">buffer<pos:position pos:line="41" pos:column="43"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="41" pos:column="45">"HTTP/#.# ###*"<pos:position pos:line="41" pos:column="60"/></literal></expr></argument>)<pos:position pos:line="41" pos:column="61"/></argument_list></call></expr>)<pos:position pos:line="41" pos:column="62"/></condition><then pos:line="41" pos:column="62"> <block pos:line="41" pos:column="63">{
                <if pos:line="42" pos:column="17">if <condition pos:line="42" pos:column="20">(<expr><name><name pos:line="42" pos:column="21">psc<pos:position pos:line="42" pos:column="24"/></name><operator pos:line="42" pos:column="24">-&gt;<pos:position pos:line="42" pos:column="29"/></operator><name pos:line="42" pos:column="26">badopt<pos:position pos:line="42" pos:column="32"/></name></name> <operator pos:line="42" pos:column="33">==<pos:position pos:line="42" pos:column="35"/></operator> <name pos:line="42" pos:column="36">bad_error<pos:position pos:line="42" pos:column="45"/></name></expr>)<pos:position pos:line="42" pos:column="46"/></condition><then pos:line="42" pos:column="46"> <block pos:line="42" pos:column="47">{
                    <comment type="block" pos:line="43" pos:column="21">/* Nope, it wasn't even an extra HTTP header. Give up. */</comment>
                    <expr_stmt><expr><name><name pos:line="44" pos:column="21">r<pos:position pos:line="44" pos:column="22"/></name><operator pos:line="44" pos:column="22">-&gt;<pos:position pos:line="44" pos:column="27"/></operator><name pos:line="44" pos:column="24">headers_out<pos:position pos:line="44" pos:column="35"/></name></name> <operator pos:line="44" pos:column="36">=<pos:position pos:line="44" pos:column="37"/></operator> <name pos:line="44" pos:column="38">NULL<pos:position pos:line="44" pos:column="42"/></name></expr>;<pos:position pos:line="44" pos:column="43"/></expr_stmt>
                    <return pos:line="45" pos:column="21">return ;<pos:position pos:line="45" pos:column="29"/></return>
                }<pos:position pos:line="46" pos:column="18"/></block></then>
                <elseif pos:line="47" pos:column="17">else <if pos:line="47" pos:column="22">if <condition pos:line="47" pos:column="25">(<expr><name><name pos:line="47" pos:column="26">psc<pos:position pos:line="47" pos:column="29"/></name><operator pos:line="47" pos:column="29">-&gt;<pos:position pos:line="47" pos:column="34"/></operator><name pos:line="47" pos:column="31">badopt<pos:position pos:line="47" pos:column="37"/></name></name> <operator pos:line="47" pos:column="38">==<pos:position pos:line="47" pos:column="40"/></operator> <name pos:line="47" pos:column="41">bad_body<pos:position pos:line="47" pos:column="49"/></name></expr>)<pos:position pos:line="47" pos:column="50"/></condition><then pos:line="47" pos:column="50"> <block pos:line="47" pos:column="51">{
                    <comment type="block" pos:line="48" pos:column="21">/* if we've already started loading headers_out, then
                     * return what we've accumulated so far, in the hopes
                     * that they are useful; also note that we likely pre-read
                     * the first line of the response.
                     */</comment>
                    <if pos:line="53" pos:column="21">if <condition pos:line="53" pos:column="24">(<expr><name pos:line="53" pos:column="25">saw_headers<pos:position pos:line="53" pos:column="36"/></name></expr>)<pos:position pos:line="53" pos:column="37"/></condition><then pos:line="53" pos:column="37"> <block pos:line="53" pos:column="38">{
                        <expr_stmt><expr><call><name pos:line="54" pos:column="25">ap_log_error<pos:position pos:line="54" pos:column="37"/></name><argument_list pos:line="54" pos:column="37">(<argument><expr><name pos:line="54" pos:column="38">APLOG_MARK<pos:position pos:line="54" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="50">APLOG_WARNING<pos:position pos:line="54" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="54" pos:column="65">0<pos:position pos:line="54" pos:column="66"/></literal></expr></argument>, <argument><expr><name><name pos:line="54" pos:column="68">r<pos:position pos:line="54" pos:column="69"/></name><operator pos:line="54" pos:column="69">-&gt;<pos:position pos:line="54" pos:column="74"/></operator><name pos:line="54" pos:column="71">server<pos:position pos:line="54" pos:column="77"/></name></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="55" pos:column="26">"proxy: Starting body due to bogus non-header in headers "<pos:position pos:line="55" pos:column="84"/></literal>
                         <literal type="string" pos:line="56" pos:column="26">"returned by %s (%s)"<pos:position pos:line="56" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="49">r<pos:position pos:line="56" pos:column="50"/></name><operator pos:line="56" pos:column="50">-&gt;<pos:position pos:line="56" pos:column="55"/></operator><name pos:line="56" pos:column="52">uri<pos:position pos:line="56" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="56" pos:column="57">r<pos:position pos:line="56" pos:column="58"/></name><operator pos:line="56" pos:column="58">-&gt;<pos:position pos:line="56" pos:column="63"/></operator><name pos:line="56" pos:column="60">method<pos:position pos:line="56" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="56" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="68"/></expr_stmt>
                        <expr_stmt><expr><operator pos:line="57" pos:column="25">*<pos:position pos:line="57" pos:column="26"/></operator><name pos:line="57" pos:column="26">pread_len<pos:position pos:line="57" pos:column="35"/></name> <operator pos:line="57" pos:column="36">=<pos:position pos:line="57" pos:column="37"/></operator> <name pos:line="57" pos:column="38">len<pos:position pos:line="57" pos:column="41"/></name></expr>;<pos:position pos:line="57" pos:column="42"/></expr_stmt>
                        <return pos:line="58" pos:column="25">return ;<pos:position pos:line="58" pos:column="33"/></return>
                    }<pos:position pos:line="59" pos:column="22"/></block></then> <else pos:line="59" pos:column="23">else <block pos:line="59" pos:column="28">{
                         <expr_stmt><expr><call><name pos:line="60" pos:column="26">ap_log_error<pos:position pos:line="60" pos:column="38"/></name><argument_list pos:line="60" pos:column="38">(<argument><expr><name pos:line="60" pos:column="39">APLOG_MARK<pos:position pos:line="60" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="60" pos:column="51">APLOG_WARNING<pos:position pos:line="60" pos:column="64"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="60" pos:column="66">0<pos:position pos:line="60" pos:column="67"/></literal></expr></argument>, <argument><expr><name><name pos:line="60" pos:column="69">r<pos:position pos:line="60" pos:column="70"/></name><operator pos:line="60" pos:column="70">-&gt;<pos:position pos:line="60" pos:column="75"/></operator><name pos:line="60" pos:column="72">server<pos:position pos:line="60" pos:column="78"/></name></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="61" pos:column="26">"proxy: No HTTP headers "<pos:position pos:line="61" pos:column="51"/></literal>
                         <literal type="string" pos:line="62" pos:column="26">"returned by %s (%s)"<pos:position pos:line="62" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="49">r<pos:position pos:line="62" pos:column="50"/></name><operator pos:line="62" pos:column="50">-&gt;<pos:position pos:line="62" pos:column="55"/></operator><name pos:line="62" pos:column="52">uri<pos:position pos:line="62" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="57">r<pos:position pos:line="62" pos:column="58"/></name><operator pos:line="62" pos:column="58">-&gt;<pos:position pos:line="62" pos:column="63"/></operator><name pos:line="62" pos:column="60">method<pos:position pos:line="62" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="62" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="68"/></expr_stmt>
                        <return pos:line="63" pos:column="25">return ;<pos:position pos:line="63" pos:column="33"/></return>
                    }<pos:position pos:line="64" pos:column="22"/></block></else></if>
                }<pos:position pos:line="65" pos:column="18"/></block></then></if></elseif></if>
            }<pos:position pos:line="66" pos:column="14"/></block></then></if>
            <comment type="block" pos:line="67" pos:column="13">/* this is the psc-&gt;badopt == bad_ignore case */</comment>
            <expr_stmt><expr><call><name pos:line="68" pos:column="13">ap_log_error<pos:position pos:line="68" pos:column="25"/></name><argument_list pos:line="68" pos:column="25">(<argument><expr><name pos:line="68" pos:column="26">APLOG_MARK<pos:position pos:line="68" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="68" pos:column="38">APLOG_WARNING<pos:position pos:line="68" pos:column="51"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="68" pos:column="53">0<pos:position pos:line="68" pos:column="54"/></literal></expr></argument>, <argument><expr><name><name pos:line="68" pos:column="56">r<pos:position pos:line="68" pos:column="57"/></name><operator pos:line="68" pos:column="57">-&gt;<pos:position pos:line="68" pos:column="62"/></operator><name pos:line="68" pos:column="59">server<pos:position pos:line="68" pos:column="65"/></name></name></expr></argument>,
                         <argument><expr><literal type="string" pos:line="69" pos:column="26">"proxy: Ignoring bogus HTTP header "<pos:position pos:line="69" pos:column="62"/></literal>
                         <literal type="string" pos:line="70" pos:column="26">"returned by %s (%s)"<pos:position pos:line="70" pos:column="47"/></literal></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="49">r<pos:position pos:line="70" pos:column="50"/></name><operator pos:line="70" pos:column="50">-&gt;<pos:position pos:line="70" pos:column="55"/></operator><name pos:line="70" pos:column="52">uri<pos:position pos:line="70" pos:column="55"/></name></name></expr></argument>, <argument><expr><name><name pos:line="70" pos:column="57">r<pos:position pos:line="70" pos:column="58"/></name><operator pos:line="70" pos:column="58">-&gt;<pos:position pos:line="70" pos:column="63"/></operator><name pos:line="70" pos:column="60">method<pos:position pos:line="70" pos:column="66"/></name></name></expr></argument>)<pos:position pos:line="70" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="68"/></expr_stmt>
            <continue pos:line="71" pos:column="13">continue;<pos:position pos:line="71" pos:column="22"/></continue>
        }<pos:position pos:line="72" pos:column="10"/></block></then></if>

        <expr_stmt><expr><operator pos:line="74" pos:column="9">*<pos:position pos:line="74" pos:column="10"/></operator><name pos:line="74" pos:column="10">value<pos:position pos:line="74" pos:column="15"/></name> <operator pos:line="74" pos:column="16">=<pos:position pos:line="74" pos:column="17"/></operator> <literal type="char" pos:line="74" pos:column="18">'\0'<pos:position pos:line="74" pos:column="22"/></literal></expr>;<pos:position pos:line="74" pos:column="23"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="75" pos:column="9">++<pos:position pos:line="75" pos:column="11"/></operator><name pos:line="75" pos:column="11">value<pos:position pos:line="75" pos:column="16"/></name></expr>;<pos:position pos:line="75" pos:column="17"/></expr_stmt>
        <comment type="block" pos:line="76" pos:column="9">/* XXX: RFC2068 defines only SP and HT as whitespace, this test is
         * wrong... and so are many others probably.
         */</comment>
        <while pos:line="79" pos:column="9">while <condition pos:line="79" pos:column="15">(<expr><call><name pos:line="79" pos:column="16">apr_isspace<pos:position pos:line="79" pos:column="27"/></name><argument_list pos:line="79" pos:column="27">(<argument><expr><operator pos:line="79" pos:column="28">*<pos:position pos:line="79" pos:column="29"/></operator><name pos:line="79" pos:column="29">value<pos:position pos:line="79" pos:column="34"/></name></expr></argument>)<pos:position pos:line="79" pos:column="35"/></argument_list></call></expr>)<pos:position pos:line="79" pos:column="36"/></condition>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="80" pos:column="13">++<pos:position pos:line="80" pos:column="15"/></operator><name pos:line="80" pos:column="15">value<pos:position pos:line="80" pos:column="20"/></name></expr>;<pos:position pos:line="80" pos:column="21"/></expr_stmt></block></while>            <comment type="block" pos:line="80" pos:column="33">/* Skip to start of value   */</comment>

        <comment type="block" pos:line="82" pos:column="9">/* should strip trailing whitespace as well */</comment>
        <for pos:line="83" pos:column="9">for <control pos:line="83" pos:column="13">(<init><expr><name pos:line="83" pos:column="14">end<pos:position pos:line="83" pos:column="17"/></name> <operator pos:line="83" pos:column="18">=<pos:position pos:line="83" pos:column="19"/></operator> <operator pos:line="83" pos:column="20">&amp;<pos:position pos:line="83" pos:column="25"/></operator><name><name pos:line="83" pos:column="21">value<pos:position pos:line="83" pos:column="26"/></name><index pos:line="83" pos:column="26">[<expr><call><name pos:line="83" pos:column="27">strlen<pos:position pos:line="83" pos:column="33"/></name><argument_list pos:line="83" pos:column="33">(<argument><expr><name pos:line="83" pos:column="34">value<pos:position pos:line="83" pos:column="39"/></name></expr></argument>)<pos:position pos:line="83" pos:column="40"/></argument_list></call><operator pos:line="83" pos:column="40">-<pos:position pos:line="83" pos:column="41"/></operator><literal type="number" pos:line="83" pos:column="41">1<pos:position pos:line="83" pos:column="42"/></literal></expr>]<pos:position pos:line="83" pos:column="43"/></index></name></expr>;<pos:position pos:line="83" pos:column="44"/></init> <condition><expr><name pos:line="83" pos:column="45">end<pos:position pos:line="83" pos:column="48"/></name> <operator pos:line="83" pos:column="49">&gt;<pos:position pos:line="83" pos:column="53"/></operator> <name pos:line="83" pos:column="51">value<pos:position pos:line="83" pos:column="56"/></name> <operator pos:line="83" pos:column="57">&amp;&amp;<pos:position pos:line="83" pos:column="67"/></operator> <call><name pos:line="83" pos:column="60">apr_isspace<pos:position pos:line="83" pos:column="71"/></name><argument_list pos:line="83" pos:column="71">(<argument><expr><operator pos:line="83" pos:column="72">*<pos:position pos:line="83" pos:column="73"/></operator><name pos:line="83" pos:column="73">end<pos:position pos:line="83" pos:column="76"/></name></expr></argument>)<pos:position pos:line="83" pos:column="77"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="78"/></condition> <incr><expr><operator pos:line="83" pos:column="79">--<pos:position pos:line="83" pos:column="81"/></operator>
<name pos:line="84" pos:column="1">end<pos:position pos:line="84" pos:column="4"/></name></expr></incr>)<pos:position pos:line="84" pos:column="5"/></control>
            <block type="pseudo"><expr_stmt><expr><operator pos:line="85" pos:column="13">*<pos:position pos:line="85" pos:column="14"/></operator><name pos:line="85" pos:column="14">end<pos:position pos:line="85" pos:column="17"/></name> <operator pos:line="85" pos:column="18">=<pos:position pos:line="85" pos:column="19"/></operator> <literal type="char" pos:line="85" pos:column="20">'\0'<pos:position pos:line="85" pos:column="24"/></literal></expr>;<pos:position pos:line="85" pos:column="25"/></expr_stmt></block></for>

        <comment type="block" pos:line="87" pos:column="9">/* make sure we add so as not to destroy duplicated headers
         * Modify headers requiring canonicalisation and/or affected
         * by ProxyPassReverse and family with process_proxy_header
         */</comment>
        <expr_stmt><expr><call><name pos:line="91" pos:column="9">process_proxy_header<pos:position pos:line="91" pos:column="29"/></name><argument_list pos:line="91" pos:column="29">(<argument><expr><name pos:line="91" pos:column="30">r<pos:position pos:line="91" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="33">dconf<pos:position pos:line="91" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="40">buffer<pos:position pos:line="91" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="91" pos:column="48">value<pos:position pos:line="91" pos:column="53"/></name></expr></argument>)<pos:position pos:line="91" pos:column="54"/></argument_list></call></expr> ;<pos:position pos:line="91" pos:column="56"/></expr_stmt>
        <expr_stmt><expr><name pos:line="92" pos:column="9">saw_headers<pos:position pos:line="92" pos:column="20"/></name> <operator pos:line="92" pos:column="21">=<pos:position pos:line="92" pos:column="22"/></operator> <literal type="number" pos:line="92" pos:column="23">1<pos:position pos:line="92" pos:column="24"/></literal></expr>;<pos:position pos:line="92" pos:column="25"/></expr_stmt>

        <comment type="block" pos:line="94" pos:column="9">/* the header was too long; at the least we should skip extra data */</comment>
        <if pos:line="95" pos:column="9">if <condition pos:line="95" pos:column="12">(<expr><name pos:line="95" pos:column="13">len<pos:position pos:line="95" pos:column="16"/></name> <operator pos:line="95" pos:column="17">&gt;=<pos:position pos:line="95" pos:column="22"/></operator> <name pos:line="95" pos:column="20">size<pos:position pos:line="95" pos:column="24"/></name> <operator pos:line="95" pos:column="25">-<pos:position pos:line="95" pos:column="26"/></operator> <literal type="number" pos:line="95" pos:column="27">1<pos:position pos:line="95" pos:column="28"/></literal></expr>)<pos:position pos:line="95" pos:column="29"/></condition><then pos:line="95" pos:column="29"> <block pos:line="95" pos:column="30">{
            <while pos:line="96" pos:column="13">while <condition pos:line="96" pos:column="19">(<expr><operator pos:line="96" pos:column="20">(<pos:position pos:line="96" pos:column="21"/></operator><name pos:line="96" pos:column="21">len<pos:position pos:line="96" pos:column="24"/></name> <operator pos:line="96" pos:column="25">=<pos:position pos:line="96" pos:column="26"/></operator> <call><name pos:line="96" pos:column="27">ap_getline<pos:position pos:line="96" pos:column="37"/></name><argument_list pos:line="96" pos:column="37">(<argument><expr><name pos:line="96" pos:column="38">field<pos:position pos:line="96" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="45">MAX_STRING_LEN<pos:position pos:line="96" pos:column="59"/></name></expr></argument>, <argument><expr><name pos:line="96" pos:column="61">rr<pos:position pos:line="96" pos:column="63"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="96" pos:column="65">1<pos:position pos:line="96" pos:column="66"/></literal></expr></argument>)<pos:position pos:line="96" pos:column="67"/></argument_list></call><operator pos:line="96" pos:column="67">)<pos:position pos:line="96" pos:column="68"/></operator>
                    <operator pos:line="97" pos:column="21">&gt;=<pos:position pos:line="97" pos:column="26"/></operator> <name pos:line="97" pos:column="24">MAX_STRING_LEN<pos:position pos:line="97" pos:column="38"/></name> <operator pos:line="97" pos:column="39">-<pos:position pos:line="97" pos:column="40"/></operator> <literal type="number" pos:line="97" pos:column="41">1<pos:position pos:line="97" pos:column="42"/></literal></expr>)<pos:position pos:line="97" pos:column="43"/></condition> <block pos:line="97" pos:column="44">{
                <comment type="block" pos:line="98" pos:column="17">/* soak up the extra data */</comment>
            }<pos:position pos:line="99" pos:column="14"/></block></while>
            <if pos:line="100" pos:column="13">if <condition pos:line="100" pos:column="16">(<expr><name pos:line="100" pos:column="17">len<pos:position pos:line="100" pos:column="20"/></name> <operator pos:line="100" pos:column="21">==<pos:position pos:line="100" pos:column="23"/></operator> <literal type="number" pos:line="100" pos:column="24">0<pos:position pos:line="100" pos:column="25"/></literal></expr>)<pos:position pos:line="100" pos:column="26"/></condition><then pos:line="100" pos:column="26"> <comment type="block" pos:line="100" pos:column="27">/* time to exit the larger loop as well */</comment>
                <block type="pseudo"><break pos:line="101" pos:column="17">break;<pos:position pos:line="101" pos:column="23"/></break></block></then></if>
        }<pos:position pos:line="102" pos:column="10"/></block></then></if>
    }<pos:position pos:line="103" pos:column="6"/></block></while>
}<pos:position pos:line="104" pos:column="2"/></block></function></unit>
