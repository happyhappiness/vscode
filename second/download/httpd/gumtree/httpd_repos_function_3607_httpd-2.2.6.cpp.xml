<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3607_httpd-2.2.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">uschar<pos:position pos:line="1" pos:column="14"/></name> <modifier pos:line="1" pos:column="15">*<pos:position pos:line="1" pos:column="16"/></modifier></type>
<name pos:line="2" pos:column="1">auto_callout<pos:position pos:line="2" pos:column="13"/></name><parameter_list pos:line="2" pos:column="13">(<parameter><decl><type><name pos:line="2" pos:column="14">uschar<pos:position pos:line="2" pos:column="20"/></name> <modifier pos:line="2" pos:column="21">*<pos:position pos:line="2" pos:column="22"/></modifier></type><name pos:line="2" pos:column="22">code<pos:position pos:line="2" pos:column="26"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="2" pos:column="28">const<pos:position pos:line="2" pos:column="33"/></specifier> <name pos:line="2" pos:column="34">uschar<pos:position pos:line="2" pos:column="40"/></name> <modifier pos:line="2" pos:column="41">*<pos:position pos:line="2" pos:column="42"/></modifier></type><name pos:line="2" pos:column="42">ptr<pos:position pos:line="2" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="2" pos:column="47">compile_data<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">cd<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="64"/></parameter_list>
<block pos:line="3" pos:column="1">{
<expr_stmt><expr><operator pos:line="4" pos:column="1">*<pos:position pos:line="4" pos:column="2"/></operator><name pos:line="4" pos:column="2">code<pos:position pos:line="4" pos:column="6"/></name><operator pos:line="4" pos:column="6">++<pos:position pos:line="4" pos:column="8"/></operator> <operator pos:line="4" pos:column="9">=<pos:position pos:line="4" pos:column="10"/></operator> <name pos:line="4" pos:column="11">OP_CALLOUT<pos:position pos:line="4" pos:column="21"/></name></expr>;<pos:position pos:line="4" pos:column="22"/></expr_stmt>
<expr_stmt><expr><operator pos:line="5" pos:column="1">*<pos:position pos:line="5" pos:column="2"/></operator><name pos:line="5" pos:column="2">code<pos:position pos:line="5" pos:column="6"/></name><operator pos:line="5" pos:column="6">++<pos:position pos:line="5" pos:column="8"/></operator> <operator pos:line="5" pos:column="9">=<pos:position pos:line="5" pos:column="10"/></operator> <literal type="number" pos:line="5" pos:column="11">255<pos:position pos:line="5" pos:column="14"/></literal></expr>;<pos:position pos:line="5" pos:column="15"/></expr_stmt>
<expr_stmt><expr><call><name pos:line="6" pos:column="1">PUT<pos:position pos:line="6" pos:column="4"/></name><argument_list pos:line="6" pos:column="4">(<argument><expr><name pos:line="6" pos:column="5">code<pos:position pos:line="6" pos:column="9"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="6" pos:column="11">0<pos:position pos:line="6" pos:column="12"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="14">ptr<pos:position pos:line="6" pos:column="17"/></name> <operator pos:line="6" pos:column="18">-<pos:position pos:line="6" pos:column="19"/></operator> <name><name pos:line="6" pos:column="20">cd<pos:position pos:line="6" pos:column="22"/></name><operator pos:line="6" pos:column="22">-&gt;<pos:position pos:line="6" pos:column="27"/></operator><name pos:line="6" pos:column="24">start_pattern<pos:position pos:line="6" pos:column="37"/></name></name></expr></argument>)<pos:position pos:line="6" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="39"/></expr_stmt>  <comment type="block" pos:line="6" pos:column="41">/* Pattern offset */</comment>
<expr_stmt><expr><call><name pos:line="7" pos:column="1">PUT<pos:position pos:line="7" pos:column="4"/></name><argument_list pos:line="7" pos:column="4">(<argument><expr><name pos:line="7" pos:column="5">code<pos:position pos:line="7" pos:column="9"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="11">LINK_SIZE<pos:position pos:line="7" pos:column="20"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="22">0<pos:position pos:line="7" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="25"/></expr_stmt>                <comment type="block" pos:line="7" pos:column="41">/* Default length */</comment>
<return pos:line="8" pos:column="1">return <expr><name pos:line="8" pos:column="8">code<pos:position pos:line="8" pos:column="12"/></name> <operator pos:line="8" pos:column="13">+<pos:position pos:line="8" pos:column="14"/></operator> <literal type="number" pos:line="8" pos:column="15">2<pos:position pos:line="8" pos:column="16"/></literal><operator pos:line="8" pos:column="16">*<pos:position pos:line="8" pos:column="17"/></operator><name pos:line="8" pos:column="17">LINK_SIZE<pos:position pos:line="8" pos:column="26"/></name></expr>;<pos:position pos:line="8" pos:column="27"/></return>
}<pos:position pos:line="9" pos:column="2"/></block></function></unit>
