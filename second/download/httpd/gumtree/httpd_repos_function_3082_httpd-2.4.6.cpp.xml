<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3082_httpd-2.4.6.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">ap_expr_eval_word<pos:position pos:line="1" pos:column="37"/></name><parameter_list pos:line="1" pos:column="37">(<parameter><decl><type><name pos:line="1" pos:column="38">ap_expr_eval_ctx_t<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">ctx<pos:position pos:line="1" pos:column="61"/></name></decl></parameter>,
                                     <parameter><decl><type><specifier pos:line="2" pos:column="38">const<pos:position pos:line="2" pos:column="43"/></specifier> <name pos:line="2" pos:column="44">ap_expr_t<pos:position pos:line="2" pos:column="53"/></name> <modifier pos:line="2" pos:column="54">*<pos:position pos:line="2" pos:column="55"/></modifier></type><name pos:line="2" pos:column="55">node<pos:position pos:line="2" pos:column="59"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="60"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <decl_stmt><decl><type><specifier pos:line="4" pos:column="5">const<pos:position pos:line="4" pos:column="10"/></specifier> <name pos:line="4" pos:column="11">char<pos:position pos:line="4" pos:column="15"/></name> <modifier pos:line="4" pos:column="16">*<pos:position pos:line="4" pos:column="17"/></modifier></type><name pos:line="4" pos:column="17">result<pos:position pos:line="4" pos:column="23"/></name> <init pos:line="4" pos:column="24">= <expr><literal type="string" pos:line="4" pos:column="26">""<pos:position pos:line="4" pos:column="28"/></literal></expr></init></decl>;<pos:position pos:line="4" pos:column="29"/></decl_stmt>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><call><name pos:line="5" pos:column="9">inc_rec<pos:position pos:line="5" pos:column="16"/></name><argument_list pos:line="5" pos:column="16">(<argument><expr><name pos:line="5" pos:column="17">ctx<pos:position pos:line="5" pos:column="20"/></name></expr></argument>)<pos:position pos:line="5" pos:column="21"/></argument_list></call></expr>)<pos:position pos:line="5" pos:column="22"/></condition><then pos:line="5" pos:column="22">
        <block type="pseudo"><return pos:line="6" pos:column="9">return <expr><name pos:line="6" pos:column="16">result<pos:position pos:line="6" pos:column="22"/></name></expr>;<pos:position pos:line="6" pos:column="23"/></return></block></then></if>
    <switch pos:line="7" pos:column="5">switch <condition pos:line="7" pos:column="12">(<expr><name><name pos:line="7" pos:column="13">node<pos:position pos:line="7" pos:column="17"/></name><operator pos:line="7" pos:column="17">-&gt;<pos:position pos:line="7" pos:column="22"/></operator><name pos:line="7" pos:column="19">node_op<pos:position pos:line="7" pos:column="26"/></name></name></expr>)<pos:position pos:line="7" pos:column="27"/></condition> <block pos:line="7" pos:column="28">{
    <case pos:line="8" pos:column="5">case <expr><name pos:line="8" pos:column="10">op_Digit<pos:position pos:line="8" pos:column="18"/></name></expr>:<pos:position pos:line="8" pos:column="19"/></case>
    <case pos:line="9" pos:column="5">case <expr><name pos:line="9" pos:column="10">op_String<pos:position pos:line="9" pos:column="19"/></name></expr>:<pos:position pos:line="9" pos:column="20"/></case>
        <expr_stmt><expr><name pos:line="10" pos:column="9">result<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <name><name pos:line="10" pos:column="18">node<pos:position pos:line="10" pos:column="22"/></name><operator pos:line="10" pos:column="22">-&gt;<pos:position pos:line="10" pos:column="27"/></operator><name pos:line="10" pos:column="24">node_arg1<pos:position pos:line="10" pos:column="33"/></name></name></expr>;<pos:position pos:line="10" pos:column="34"/></expr_stmt>
        <break pos:line="11" pos:column="9">break;<pos:position pos:line="11" pos:column="15"/></break>
    <case pos:line="12" pos:column="5">case <expr><name pos:line="12" pos:column="10">op_Var<pos:position pos:line="12" pos:column="16"/></name></expr>:<pos:position pos:line="12" pos:column="17"/></case>
        <expr_stmt><expr><name pos:line="13" pos:column="9">result<pos:position pos:line="13" pos:column="15"/></name> <operator pos:line="13" pos:column="16">=<pos:position pos:line="13" pos:column="17"/></operator> <call><name pos:line="13" pos:column="18">ap_expr_eval_var<pos:position pos:line="13" pos:column="34"/></name><argument_list pos:line="13" pos:column="34">(<argument><expr><name pos:line="13" pos:column="35">ctx<pos:position pos:line="13" pos:column="38"/></name></expr></argument>, <argument><expr><operator pos:line="13" pos:column="40">(<pos:position pos:line="13" pos:column="41"/></operator><name pos:line="13" pos:column="41">ap_expr_var_func_t<pos:position pos:line="13" pos:column="59"/></name> <operator pos:line="13" pos:column="60">*<pos:position pos:line="13" pos:column="61"/></operator><operator pos:line="13" pos:column="61">)<pos:position pos:line="13" pos:column="62"/></operator><name><name pos:line="13" pos:column="62">node<pos:position pos:line="13" pos:column="66"/></name><operator pos:line="13" pos:column="66">-&gt;<pos:position pos:line="13" pos:column="71"/></operator><name pos:line="13" pos:column="68">node_arg1<pos:position pos:line="13" pos:column="77"/></name></name></expr></argument>,
                                  <argument><expr><name><name pos:line="14" pos:column="35">node<pos:position pos:line="14" pos:column="39"/></name><operator pos:line="14" pos:column="39">-&gt;<pos:position pos:line="14" pos:column="44"/></operator><name pos:line="14" pos:column="41">node_arg2<pos:position pos:line="14" pos:column="50"/></name></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="52"/></expr_stmt>
        <break pos:line="15" pos:column="9">break;<pos:position pos:line="15" pos:column="15"/></break>
    <case pos:line="16" pos:column="5">case <expr><name pos:line="16" pos:column="10">op_Concat<pos:position pos:line="16" pos:column="19"/></name></expr>:<pos:position pos:line="16" pos:column="20"/></case>
        <if pos:line="17" pos:column="9">if <condition pos:line="17" pos:column="12">(<expr><operator pos:line="17" pos:column="13">(<pos:position pos:line="17" pos:column="14"/></operator><operator pos:line="17" pos:column="14">(<pos:position pos:line="17" pos:column="15"/></operator><name pos:line="17" pos:column="15">ap_expr_t<pos:position pos:line="17" pos:column="24"/></name> <operator pos:line="17" pos:column="25">*<pos:position pos:line="17" pos:column="26"/></operator><operator pos:line="17" pos:column="26">)<pos:position pos:line="17" pos:column="27"/></operator><name><name pos:line="17" pos:column="27">node<pos:position pos:line="17" pos:column="31"/></name><operator pos:line="17" pos:column="31">-&gt;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="33">node_arg2<pos:position pos:line="17" pos:column="42"/></name></name><operator pos:line="17" pos:column="42">)<pos:position pos:line="17" pos:column="43"/></operator><operator pos:line="17" pos:column="43">-&gt;<pos:position pos:line="17" pos:column="48"/></operator><name pos:line="17" pos:column="45">node_op<pos:position pos:line="17" pos:column="52"/></name> <operator pos:line="17" pos:column="53">!=<pos:position pos:line="17" pos:column="55"/></operator> <name pos:line="17" pos:column="56">op_Concat<pos:position pos:line="17" pos:column="65"/></name></expr>)<pos:position pos:line="17" pos:column="66"/></condition><then pos:line="17" pos:column="66"> <block pos:line="17" pos:column="67">{
            <decl_stmt><decl><type><specifier pos:line="18" pos:column="13">const<pos:position pos:line="18" pos:column="18"/></specifier> <name pos:line="18" pos:column="19">char<pos:position pos:line="18" pos:column="23"/></name> <modifier pos:line="18" pos:column="24">*<pos:position pos:line="18" pos:column="25"/></modifier></type><name pos:line="18" pos:column="25">s1<pos:position pos:line="18" pos:column="27"/></name> <init pos:line="18" pos:column="28">= <expr><call><name pos:line="18" pos:column="30">ap_expr_eval_word<pos:position pos:line="18" pos:column="47"/></name><argument_list pos:line="18" pos:column="47">(<argument><expr><name pos:line="18" pos:column="48">ctx<pos:position pos:line="18" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="18" pos:column="53">node<pos:position pos:line="18" pos:column="57"/></name><operator pos:line="18" pos:column="57">-&gt;<pos:position pos:line="18" pos:column="62"/></operator><name pos:line="18" pos:column="59">node_arg1<pos:position pos:line="18" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="70"/></decl_stmt>
            <decl_stmt><decl><type><specifier pos:line="19" pos:column="13">const<pos:position pos:line="19" pos:column="18"/></specifier> <name pos:line="19" pos:column="19">char<pos:position pos:line="19" pos:column="23"/></name> <modifier pos:line="19" pos:column="24">*<pos:position pos:line="19" pos:column="25"/></modifier></type><name pos:line="19" pos:column="25">s2<pos:position pos:line="19" pos:column="27"/></name> <init pos:line="19" pos:column="28">= <expr><call><name pos:line="19" pos:column="30">ap_expr_eval_word<pos:position pos:line="19" pos:column="47"/></name><argument_list pos:line="19" pos:column="47">(<argument><expr><name pos:line="19" pos:column="48">ctx<pos:position pos:line="19" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="19" pos:column="53">node<pos:position pos:line="19" pos:column="57"/></name><operator pos:line="19" pos:column="57">-&gt;<pos:position pos:line="19" pos:column="62"/></operator><name pos:line="19" pos:column="59">node_arg2<pos:position pos:line="19" pos:column="68"/></name></name></expr></argument>)<pos:position pos:line="19" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="19" pos:column="70"/></decl_stmt>
            <if pos:line="20" pos:column="13">if <condition pos:line="20" pos:column="16">(<expr><operator pos:line="20" pos:column="17">!<pos:position pos:line="20" pos:column="18"/></operator><operator pos:line="20" pos:column="18">*<pos:position pos:line="20" pos:column="19"/></operator><name pos:line="20" pos:column="19">s1<pos:position pos:line="20" pos:column="21"/></name></expr>)<pos:position pos:line="20" pos:column="22"/></condition><then pos:line="20" pos:column="22">
                <block type="pseudo"><expr_stmt><expr><name pos:line="21" pos:column="17">result<pos:position pos:line="21" pos:column="23"/></name> <operator pos:line="21" pos:column="24">=<pos:position pos:line="21" pos:column="25"/></operator> <name pos:line="21" pos:column="26">s2<pos:position pos:line="21" pos:column="28"/></name></expr>;<pos:position pos:line="21" pos:column="29"/></expr_stmt></block></then>
            <elseif pos:line="22" pos:column="13">else <if pos:line="22" pos:column="18">if <condition pos:line="22" pos:column="21">(<expr><operator pos:line="22" pos:column="22">!<pos:position pos:line="22" pos:column="23"/></operator><operator pos:line="22" pos:column="23">*<pos:position pos:line="22" pos:column="24"/></operator><name pos:line="22" pos:column="24">s2<pos:position pos:line="22" pos:column="26"/></name></expr>)<pos:position pos:line="22" pos:column="27"/></condition><then pos:line="22" pos:column="27">
                <block type="pseudo"><expr_stmt><expr><name pos:line="23" pos:column="17">result<pos:position pos:line="23" pos:column="23"/></name> <operator pos:line="23" pos:column="24">=<pos:position pos:line="23" pos:column="25"/></operator> <name pos:line="23" pos:column="26">s1<pos:position pos:line="23" pos:column="28"/></name></expr>;<pos:position pos:line="23" pos:column="29"/></expr_stmt></block></then></if></elseif>
            <else pos:line="24" pos:column="13">else
                <block type="pseudo"><expr_stmt><expr><name pos:line="25" pos:column="17">result<pos:position pos:line="25" pos:column="23"/></name> <operator pos:line="25" pos:column="24">=<pos:position pos:line="25" pos:column="25"/></operator> <call><name pos:line="25" pos:column="26">apr_pstrcat<pos:position pos:line="25" pos:column="37"/></name><argument_list pos:line="25" pos:column="37">(<argument><expr><name><name pos:line="25" pos:column="38">ctx<pos:position pos:line="25" pos:column="41"/></name><operator pos:line="25" pos:column="41">-&gt;<pos:position pos:line="25" pos:column="46"/></operator><name pos:line="25" pos:column="43">p<pos:position pos:line="25" pos:column="44"/></name></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="46">s1<pos:position pos:line="25" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="50">s2<pos:position pos:line="25" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="54">NULL<pos:position pos:line="25" pos:column="58"/></name></expr></argument>)<pos:position pos:line="25" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="60"/></expr_stmt></block></else></if>
        }<pos:position pos:line="26" pos:column="10"/></block></then>
        <else pos:line="27" pos:column="9">else <block pos:line="27" pos:column="14">{
            <decl_stmt><decl><type><specifier pos:line="28" pos:column="13">const<pos:position pos:line="28" pos:column="18"/></specifier> <name pos:line="28" pos:column="19">ap_expr_t<pos:position pos:line="28" pos:column="28"/></name> <modifier pos:line="28" pos:column="29">*<pos:position pos:line="28" pos:column="30"/></modifier></type><name pos:line="28" pos:column="30">nodep<pos:position pos:line="28" pos:column="35"/></name> <init pos:line="28" pos:column="36">= <expr><name pos:line="28" pos:column="38">node<pos:position pos:line="28" pos:column="42"/></name></expr></init></decl>;<pos:position pos:line="28" pos:column="43"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="29" pos:column="13">int<pos:position pos:line="29" pos:column="16"/></name></type> <name pos:line="29" pos:column="17">i<pos:position pos:line="29" pos:column="18"/></name> <init pos:line="29" pos:column="19">= <expr><literal type="number" pos:line="29" pos:column="21">1<pos:position pos:line="29" pos:column="22"/></literal></expr></init></decl>;<pos:position pos:line="29" pos:column="23"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="30" pos:column="13">struct<pos:position pos:line="30" pos:column="19"/></name> <name pos:line="30" pos:column="20">iovec<pos:position pos:line="30" pos:column="25"/></name></name> <modifier pos:line="30" pos:column="26">*<pos:position pos:line="30" pos:column="27"/></modifier></type><name pos:line="30" pos:column="27">vec<pos:position pos:line="30" pos:column="30"/></name></decl>;<pos:position pos:line="30" pos:column="31"/></decl_stmt>
            <do pos:line="31" pos:column="13">do <block pos:line="31" pos:column="16">{
                <expr_stmt><expr><name pos:line="32" pos:column="17">nodep<pos:position pos:line="32" pos:column="22"/></name> <operator pos:line="32" pos:column="23">=<pos:position pos:line="32" pos:column="24"/></operator> <name><name pos:line="32" pos:column="25">nodep<pos:position pos:line="32" pos:column="30"/></name><operator pos:line="32" pos:column="30">-&gt;<pos:position pos:line="32" pos:column="35"/></operator><name pos:line="32" pos:column="32">node_arg2<pos:position pos:line="32" pos:column="41"/></name></name></expr>;<pos:position pos:line="32" pos:column="42"/></expr_stmt>
                <expr_stmt><expr><name pos:line="33" pos:column="17">i<pos:position pos:line="33" pos:column="18"/></name><operator pos:line="33" pos:column="18">++<pos:position pos:line="33" pos:column="20"/></operator></expr>;<pos:position pos:line="33" pos:column="21"/></expr_stmt>
            }<pos:position pos:line="34" pos:column="14"/></block> while <condition pos:line="34" pos:column="21">(<expr><name><name pos:line="34" pos:column="22">nodep<pos:position pos:line="34" pos:column="27"/></name><operator pos:line="34" pos:column="27">-&gt;<pos:position pos:line="34" pos:column="32"/></operator><name pos:line="34" pos:column="29">node_op<pos:position pos:line="34" pos:column="36"/></name></name> <operator pos:line="34" pos:column="37">==<pos:position pos:line="34" pos:column="39"/></operator> <name pos:line="34" pos:column="40">op_Concat<pos:position pos:line="34" pos:column="49"/></name></expr>)<pos:position pos:line="34" pos:column="50"/></condition>;<pos:position pos:line="34" pos:column="51"/></do>
            <expr_stmt><expr><name pos:line="35" pos:column="13">vec<pos:position pos:line="35" pos:column="16"/></name> <operator pos:line="35" pos:column="17">=<pos:position pos:line="35" pos:column="18"/></operator> <call><name pos:line="35" pos:column="19">apr_palloc<pos:position pos:line="35" pos:column="29"/></name><argument_list pos:line="35" pos:column="29">(<argument><expr><name><name pos:line="35" pos:column="30">ctx<pos:position pos:line="35" pos:column="33"/></name><operator pos:line="35" pos:column="33">-&gt;<pos:position pos:line="35" pos:column="38"/></operator><name pos:line="35" pos:column="35">p<pos:position pos:line="35" pos:column="36"/></name></name></expr></argument>, <argument><expr><name pos:line="35" pos:column="38">i<pos:position pos:line="35" pos:column="39"/></name> <operator pos:line="35" pos:column="40">*<pos:position pos:line="35" pos:column="41"/></operator> <sizeof pos:line="35" pos:column="42">sizeof<argument_list pos:line="35" pos:column="48">(<argument><expr pos:line="35" pos:column="49">struct <name pos:line="35" pos:column="56">iovec<pos:position pos:line="35" pos:column="61"/></name></expr></argument>)<pos:position pos:line="35" pos:column="62"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="35" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="35" pos:column="64"/></expr_stmt>
            <expr_stmt><expr><name pos:line="36" pos:column="13">nodep<pos:position pos:line="36" pos:column="18"/></name> <operator pos:line="36" pos:column="19">=<pos:position pos:line="36" pos:column="20"/></operator> <name pos:line="36" pos:column="21">node<pos:position pos:line="36" pos:column="25"/></name></expr>;<pos:position pos:line="36" pos:column="26"/></expr_stmt>
            <expr_stmt><expr><name pos:line="37" pos:column="13">i<pos:position pos:line="37" pos:column="14"/></name> <operator pos:line="37" pos:column="15">=<pos:position pos:line="37" pos:column="16"/></operator> <literal type="number" pos:line="37" pos:column="17">0<pos:position pos:line="37" pos:column="18"/></literal></expr>;<pos:position pos:line="37" pos:column="19"/></expr_stmt>
            <do pos:line="38" pos:column="13">do <block pos:line="38" pos:column="16">{
                <expr_stmt><expr><name><name pos:line="39" pos:column="17">vec<pos:position pos:line="39" pos:column="20"/></name><index pos:line="39" pos:column="20">[<expr><name pos:line="39" pos:column="21">i<pos:position pos:line="39" pos:column="22"/></name></expr>]<pos:position pos:line="39" pos:column="23"/></index></name><operator pos:line="39" pos:column="23">.<pos:position pos:line="39" pos:column="24"/></operator><name pos:line="39" pos:column="24">iov_base<pos:position pos:line="39" pos:column="32"/></name> <operator pos:line="39" pos:column="33">=<pos:position pos:line="39" pos:column="34"/></operator> <operator pos:line="39" pos:column="35">(<pos:position pos:line="39" pos:column="36"/></operator><name pos:line="39" pos:column="36">void<pos:position pos:line="39" pos:column="40"/></name> <operator pos:line="39" pos:column="41">*<pos:position pos:line="39" pos:column="42"/></operator><operator pos:line="39" pos:column="42">)<pos:position pos:line="39" pos:column="43"/></operator><call><name pos:line="39" pos:column="43">ap_expr_eval_word<pos:position pos:line="39" pos:column="60"/></name><argument_list pos:line="39" pos:column="60">(<argument><expr><name pos:line="39" pos:column="61">ctx<pos:position pos:line="39" pos:column="64"/></name></expr></argument>,
                                                            <argument><expr><name><name pos:line="40" pos:column="61">nodep<pos:position pos:line="40" pos:column="66"/></name><operator pos:line="40" pos:column="66">-&gt;<pos:position pos:line="40" pos:column="71"/></operator><name pos:line="40" pos:column="68">node_arg1<pos:position pos:line="40" pos:column="77"/></name></name></expr></argument>)<pos:position pos:line="40" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="40" pos:column="79"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="41" pos:column="17">vec<pos:position pos:line="41" pos:column="20"/></name><index pos:line="41" pos:column="20">[<expr><name pos:line="41" pos:column="21">i<pos:position pos:line="41" pos:column="22"/></name></expr>]<pos:position pos:line="41" pos:column="23"/></index></name><operator pos:line="41" pos:column="23">.<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="24">iov_len<pos:position pos:line="41" pos:column="31"/></name> <operator pos:line="41" pos:column="32">=<pos:position pos:line="41" pos:column="33"/></operator> <call><name pos:line="41" pos:column="34">strlen<pos:position pos:line="41" pos:column="40"/></name><argument_list pos:line="41" pos:column="40">(<argument><expr><name><name pos:line="41" pos:column="41">vec<pos:position pos:line="41" pos:column="44"/></name><index pos:line="41" pos:column="44">[<expr><name pos:line="41" pos:column="45">i<pos:position pos:line="41" pos:column="46"/></name></expr>]<pos:position pos:line="41" pos:column="47"/></index></name><operator pos:line="41" pos:column="47">.<pos:position pos:line="41" pos:column="48"/></operator><name pos:line="41" pos:column="48">iov_base<pos:position pos:line="41" pos:column="56"/></name></expr></argument>)<pos:position pos:line="41" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="41" pos:column="58"/></expr_stmt>
                <expr_stmt><expr><name pos:line="42" pos:column="17">i<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">++<pos:position pos:line="42" pos:column="20"/></operator></expr>;<pos:position pos:line="42" pos:column="21"/></expr_stmt>
                <expr_stmt><expr><name pos:line="43" pos:column="17">nodep<pos:position pos:line="43" pos:column="22"/></name> <operator pos:line="43" pos:column="23">=<pos:position pos:line="43" pos:column="24"/></operator> <name><name pos:line="43" pos:column="25">nodep<pos:position pos:line="43" pos:column="30"/></name><operator pos:line="43" pos:column="30">-&gt;<pos:position pos:line="43" pos:column="35"/></operator><name pos:line="43" pos:column="32">node_arg2<pos:position pos:line="43" pos:column="41"/></name></name></expr>;<pos:position pos:line="43" pos:column="42"/></expr_stmt>
            }<pos:position pos:line="44" pos:column="14"/></block> while <condition pos:line="44" pos:column="21">(<expr><name><name pos:line="44" pos:column="22">nodep<pos:position pos:line="44" pos:column="27"/></name><operator pos:line="44" pos:column="27">-&gt;<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="29">node_op<pos:position pos:line="44" pos:column="36"/></name></name> <operator pos:line="44" pos:column="37">==<pos:position pos:line="44" pos:column="39"/></operator> <name pos:line="44" pos:column="40">op_Concat<pos:position pos:line="44" pos:column="49"/></name></expr>)<pos:position pos:line="44" pos:column="50"/></condition>;<pos:position pos:line="44" pos:column="51"/></do>
            <expr_stmt><expr><name><name pos:line="45" pos:column="13">vec<pos:position pos:line="45" pos:column="16"/></name><index pos:line="45" pos:column="16">[<expr><name pos:line="45" pos:column="17">i<pos:position pos:line="45" pos:column="18"/></name></expr>]<pos:position pos:line="45" pos:column="19"/></index></name><operator pos:line="45" pos:column="19">.<pos:position pos:line="45" pos:column="20"/></operator><name pos:line="45" pos:column="20">iov_base<pos:position pos:line="45" pos:column="28"/></name> <operator pos:line="45" pos:column="29">=<pos:position pos:line="45" pos:column="30"/></operator> <operator pos:line="45" pos:column="31">(<pos:position pos:line="45" pos:column="32"/></operator><name pos:line="45" pos:column="32">void<pos:position pos:line="45" pos:column="36"/></name> <operator pos:line="45" pos:column="37">*<pos:position pos:line="45" pos:column="38"/></operator><operator pos:line="45" pos:column="38">)<pos:position pos:line="45" pos:column="39"/></operator><call><name pos:line="45" pos:column="39">ap_expr_eval_word<pos:position pos:line="45" pos:column="56"/></name><argument_list pos:line="45" pos:column="56">(<argument><expr><name pos:line="45" pos:column="57">ctx<pos:position pos:line="45" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="45" pos:column="62">nodep<pos:position pos:line="45" pos:column="67"/></name></expr></argument>)<pos:position pos:line="45" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="69"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="46" pos:column="13">vec<pos:position pos:line="46" pos:column="16"/></name><index pos:line="46" pos:column="16">[<expr><name pos:line="46" pos:column="17">i<pos:position pos:line="46" pos:column="18"/></name></expr>]<pos:position pos:line="46" pos:column="19"/></index></name><operator pos:line="46" pos:column="19">.<pos:position pos:line="46" pos:column="20"/></operator><name pos:line="46" pos:column="20">iov_len<pos:position pos:line="46" pos:column="27"/></name> <operator pos:line="46" pos:column="28">=<pos:position pos:line="46" pos:column="29"/></operator> <call><name pos:line="46" pos:column="30">strlen<pos:position pos:line="46" pos:column="36"/></name><argument_list pos:line="46" pos:column="36">(<argument><expr><name><name pos:line="46" pos:column="37">vec<pos:position pos:line="46" pos:column="40"/></name><index pos:line="46" pos:column="40">[<expr><name pos:line="46" pos:column="41">i<pos:position pos:line="46" pos:column="42"/></name></expr>]<pos:position pos:line="46" pos:column="43"/></index></name><operator pos:line="46" pos:column="43">.<pos:position pos:line="46" pos:column="44"/></operator><name pos:line="46" pos:column="44">iov_base<pos:position pos:line="46" pos:column="52"/></name></expr></argument>)<pos:position pos:line="46" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="54"/></expr_stmt>
            <expr_stmt><expr><name pos:line="47" pos:column="13">i<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">++<pos:position pos:line="47" pos:column="16"/></operator></expr>;<pos:position pos:line="47" pos:column="17"/></expr_stmt>
            <expr_stmt><expr><name pos:line="48" pos:column="13">result<pos:position pos:line="48" pos:column="19"/></name> <operator pos:line="48" pos:column="20">=<pos:position pos:line="48" pos:column="21"/></operator> <call><name pos:line="48" pos:column="22">apr_pstrcatv<pos:position pos:line="48" pos:column="34"/></name><argument_list pos:line="48" pos:column="34">(<argument><expr><name><name pos:line="48" pos:column="35">ctx<pos:position pos:line="48" pos:column="38"/></name><operator pos:line="48" pos:column="38">-&gt;<pos:position pos:line="48" pos:column="43"/></operator><name pos:line="48" pos:column="40">p<pos:position pos:line="48" pos:column="41"/></name></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="43">vec<pos:position pos:line="48" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="48">i<pos:position pos:line="48" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="51">NULL<pos:position pos:line="48" pos:column="55"/></name></expr></argument>)<pos:position pos:line="48" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="57"/></expr_stmt>
        }<pos:position pos:line="49" pos:column="10"/></block></else></if>
        <break pos:line="50" pos:column="9">break;<pos:position pos:line="50" pos:column="15"/></break>
    <case pos:line="51" pos:column="5">case <expr><name pos:line="51" pos:column="10">op_StringFuncCall<pos:position pos:line="51" pos:column="27"/></name></expr>:<pos:position pos:line="51" pos:column="28"/></case> <block pos:line="51" pos:column="29">{
        <decl_stmt><decl><type><specifier pos:line="52" pos:column="9">const<pos:position pos:line="52" pos:column="14"/></specifier> <name pos:line="52" pos:column="15">ap_expr_t<pos:position pos:line="52" pos:column="24"/></name> <modifier pos:line="52" pos:column="25">*<pos:position pos:line="52" pos:column="26"/></modifier></type><name pos:line="52" pos:column="26">info<pos:position pos:line="52" pos:column="30"/></name> <init pos:line="52" pos:column="31">= <expr><name><name pos:line="52" pos:column="33">node<pos:position pos:line="52" pos:column="37"/></name><operator pos:line="52" pos:column="37">-&gt;<pos:position pos:line="52" pos:column="42"/></operator><name pos:line="52" pos:column="39">node_arg1<pos:position pos:line="52" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="52" pos:column="49"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="53" pos:column="9">const<pos:position pos:line="53" pos:column="14"/></specifier> <name pos:line="53" pos:column="15">ap_expr_t<pos:position pos:line="53" pos:column="24"/></name> <modifier pos:line="53" pos:column="25">*<pos:position pos:line="53" pos:column="26"/></modifier></type><name pos:line="53" pos:column="26">args<pos:position pos:line="53" pos:column="30"/></name> <init pos:line="53" pos:column="31">= <expr><name><name pos:line="53" pos:column="33">node<pos:position pos:line="53" pos:column="37"/></name><operator pos:line="53" pos:column="37">-&gt;<pos:position pos:line="53" pos:column="42"/></operator><name pos:line="53" pos:column="39">node_arg2<pos:position pos:line="53" pos:column="48"/></name></name></expr></init></decl>;<pos:position pos:line="53" pos:column="49"/></decl_stmt>
        <expr_stmt><expr><name pos:line="54" pos:column="9">result<pos:position pos:line="54" pos:column="15"/></name> <operator pos:line="54" pos:column="16">=<pos:position pos:line="54" pos:column="17"/></operator> <call><name pos:line="54" pos:column="18">ap_expr_eval_string_func<pos:position pos:line="54" pos:column="42"/></name><argument_list pos:line="54" pos:column="42">(<argument><expr><name pos:line="54" pos:column="43">ctx<pos:position pos:line="54" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="48">info<pos:position pos:line="54" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="54">args<pos:position pos:line="54" pos:column="58"/></name></expr></argument>)<pos:position pos:line="54" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="60"/></expr_stmt>
        <break pos:line="55" pos:column="9">break;<pos:position pos:line="55" pos:column="15"/></break>
    }<pos:position pos:line="56" pos:column="6"/></block>
    <case pos:line="57" pos:column="5">case <expr><name pos:line="57" pos:column="10">op_RegexBackref<pos:position pos:line="57" pos:column="25"/></name></expr>:<pos:position pos:line="57" pos:column="26"/></case> <block pos:line="57" pos:column="27">{
        <decl_stmt><decl><type><specifier pos:line="58" pos:column="9">const<pos:position pos:line="58" pos:column="14"/></specifier> <name pos:line="58" pos:column="15">unsigned<pos:position pos:line="58" pos:column="23"/></name> <name pos:line="58" pos:column="24">int<pos:position pos:line="58" pos:column="27"/></name> <modifier pos:line="58" pos:column="28">*<pos:position pos:line="58" pos:column="29"/></modifier></type><name pos:line="58" pos:column="29">np<pos:position pos:line="58" pos:column="31"/></name> <init pos:line="58" pos:column="32">= <expr><name><name pos:line="58" pos:column="34">node<pos:position pos:line="58" pos:column="38"/></name><operator pos:line="58" pos:column="38">-&gt;<pos:position pos:line="58" pos:column="43"/></operator><name pos:line="58" pos:column="40">node_arg1<pos:position pos:line="58" pos:column="49"/></name></name></expr></init></decl>;<pos:position pos:line="58" pos:column="50"/></decl_stmt>
        <expr_stmt><expr><name pos:line="59" pos:column="9">result<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <call><name pos:line="59" pos:column="18">ap_expr_eval_re_backref<pos:position pos:line="59" pos:column="41"/></name><argument_list pos:line="59" pos:column="41">(<argument><expr><name pos:line="59" pos:column="42">ctx<pos:position pos:line="59" pos:column="45"/></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="47">*<pos:position pos:line="59" pos:column="48"/></operator><name pos:line="59" pos:column="48">np<pos:position pos:line="59" pos:column="50"/></name></expr></argument>)<pos:position pos:line="59" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="52"/></expr_stmt>
        <break pos:line="60" pos:column="9">break;<pos:position pos:line="60" pos:column="15"/></break>
    }<pos:position pos:line="61" pos:column="6"/></block>
    <default pos:line="62" pos:column="5">default:<pos:position pos:line="62" pos:column="13"/></default>
        <expr_stmt><expr><operator pos:line="63" pos:column="9">*<pos:position pos:line="63" pos:column="10"/></operator><name><name pos:line="63" pos:column="10">ctx<pos:position pos:line="63" pos:column="13"/></name><operator pos:line="63" pos:column="13">-&gt;<pos:position pos:line="63" pos:column="18"/></operator><name pos:line="63" pos:column="15">err<pos:position pos:line="63" pos:column="18"/></name></name> <operator pos:line="63" pos:column="19">=<pos:position pos:line="63" pos:column="20"/></operator> <literal type="string" pos:line="63" pos:column="21">"Internal evaluation error: Unknown word expression node"<pos:position pos:line="63" pos:column="78"/></literal></expr>;<pos:position pos:line="63" pos:column="79"/></expr_stmt>
        <break pos:line="64" pos:column="9">break;<pos:position pos:line="64" pos:column="15"/></break>
    }<pos:position pos:line="65" pos:column="6"/></block></switch>
    <if pos:line="66" pos:column="5">if <condition pos:line="66" pos:column="8">(<expr><operator pos:line="66" pos:column="9">!<pos:position pos:line="66" pos:column="10"/></operator><name pos:line="66" pos:column="10">result<pos:position pos:line="66" pos:column="16"/></name></expr>)<pos:position pos:line="66" pos:column="17"/></condition><then pos:line="66" pos:column="17">
        <block type="pseudo"><expr_stmt><expr><name pos:line="67" pos:column="9">result<pos:position pos:line="67" pos:column="15"/></name> <operator pos:line="67" pos:column="16">=<pos:position pos:line="67" pos:column="17"/></operator> <literal type="string" pos:line="67" pos:column="18">""<pos:position pos:line="67" pos:column="20"/></literal></expr>;<pos:position pos:line="67" pos:column="21"/></expr_stmt></block></then></if>
    <expr_stmt><expr><name><name pos:line="68" pos:column="5">ctx<pos:position pos:line="68" pos:column="8"/></name><operator pos:line="68" pos:column="8">-&gt;<pos:position pos:line="68" pos:column="13"/></operator><name pos:line="68" pos:column="10">reclvl<pos:position pos:line="68" pos:column="16"/></name></name><operator pos:line="68" pos:column="16">--<pos:position pos:line="68" pos:column="18"/></operator></expr>;<pos:position pos:line="68" pos:column="19"/></expr_stmt>
    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">result<pos:position pos:line="69" pos:column="18"/></name></expr>;<pos:position pos:line="69" pos:column="19"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
