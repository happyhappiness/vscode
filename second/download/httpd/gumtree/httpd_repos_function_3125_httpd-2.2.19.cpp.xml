<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3125_httpd-2.2.19.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name><name pos:line="1" pos:column="8">enum<pos:position pos:line="1" pos:column="12"/></name> <name pos:line="1" pos:column="13">XML_Error<pos:position pos:line="1" pos:column="22"/></name></name></type>
<name pos:line="2" pos:column="1">initializeEncoding<pos:position pos:line="2" pos:column="19"/></name><parameter_list pos:line="2" pos:column="19">(<parameter><decl><type><name pos:line="2" pos:column="20">XML_Parser<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">parser<pos:position pos:line="2" pos:column="37"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="38"/></parameter_list>
<block pos:line="3" pos:column="1">{
  <decl_stmt><decl><type><specifier pos:line="4" pos:column="3">const<pos:position pos:line="4" pos:column="8"/></specifier> <name pos:line="4" pos:column="9">char<pos:position pos:line="4" pos:column="13"/></name> <modifier pos:line="4" pos:column="14">*<pos:position pos:line="4" pos:column="15"/></modifier></type><name pos:line="4" pos:column="15">s<pos:position pos:line="4" pos:column="16"/></name></decl>;<pos:position pos:line="4" pos:column="17"/></decl_stmt>
<cpp:ifdef pos:line="5" pos:column="1">#<cpp:directive pos:line="5" pos:column="2">ifdef<pos:position pos:line="5" pos:column="7"/></cpp:directive> <name pos:line="5" pos:column="8">XML_UNICODE<pos:position pos:line="5" pos:column="19"/></name></cpp:ifdef>
  <decl_stmt><decl><type><name pos:line="6" pos:column="3">char<pos:position pos:line="6" pos:column="7"/></name></type> <name><name pos:line="6" pos:column="8">encodingBuf<pos:position pos:line="6" pos:column="19"/></name><index pos:line="6" pos:column="19">[<expr><literal type="number" pos:line="6" pos:column="20">128<pos:position pos:line="6" pos:column="23"/></literal></expr>]<pos:position pos:line="6" pos:column="24"/></index></name></decl>;<pos:position pos:line="6" pos:column="25"/></decl_stmt>
  <if pos:line="7" pos:column="3">if <condition pos:line="7" pos:column="6">(<expr><operator pos:line="7" pos:column="7">!<pos:position pos:line="7" pos:column="8"/></operator><name pos:line="7" pos:column="8">protocolEncodingName<pos:position pos:line="7" pos:column="28"/></name></expr>)<pos:position pos:line="7" pos:column="29"/></condition><then pos:line="7" pos:column="29">
    <block type="pseudo"><expr_stmt><expr><name pos:line="8" pos:column="5">s<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <name pos:line="8" pos:column="9">NULL<pos:position pos:line="8" pos:column="13"/></name></expr>;<pos:position pos:line="8" pos:column="14"/></expr_stmt></block></then>
  <else pos:line="9" pos:column="3">else <block pos:line="9" pos:column="8">{
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">int<pos:position pos:line="10" pos:column="8"/></name></type> <name pos:line="10" pos:column="9">i<pos:position pos:line="10" pos:column="10"/></name></decl>;<pos:position pos:line="10" pos:column="11"/></decl_stmt>
    <for pos:line="11" pos:column="5">for <control pos:line="11" pos:column="9">(<init><expr><name pos:line="11" pos:column="10">i<pos:position pos:line="11" pos:column="11"/></name> <operator pos:line="11" pos:column="12">=<pos:position pos:line="11" pos:column="13"/></operator> <literal type="number" pos:line="11" pos:column="14">0<pos:position pos:line="11" pos:column="15"/></literal></expr>;<pos:position pos:line="11" pos:column="16"/></init> <condition><expr><name><name pos:line="11" pos:column="17">protocolEncodingName<pos:position pos:line="11" pos:column="37"/></name><index pos:line="11" pos:column="37">[<expr><name pos:line="11" pos:column="38">i<pos:position pos:line="11" pos:column="39"/></name></expr>]<pos:position pos:line="11" pos:column="40"/></index></name></expr>;<pos:position pos:line="11" pos:column="41"/></condition> <incr><expr><name pos:line="11" pos:column="42">i<pos:position pos:line="11" pos:column="43"/></name><operator pos:line="11" pos:column="43">++<pos:position pos:line="11" pos:column="45"/></operator></expr></incr>)<pos:position pos:line="11" pos:column="46"/></control> <block pos:line="11" pos:column="47">{
      <if pos:line="12" pos:column="7">if <condition pos:line="12" pos:column="10">(<expr><name pos:line="12" pos:column="11">i<pos:position pos:line="12" pos:column="12"/></name> <operator pos:line="12" pos:column="13">==<pos:position pos:line="12" pos:column="15"/></operator> <sizeof pos:line="12" pos:column="16">sizeof<argument_list pos:line="12" pos:column="22">(<argument><expr><name pos:line="12" pos:column="23">encodingBuf<pos:position pos:line="12" pos:column="34"/></name></expr></argument>)<pos:position pos:line="12" pos:column="35"/></argument_list></sizeof> <operator pos:line="12" pos:column="36">-<pos:position pos:line="12" pos:column="37"/></operator> <literal type="number" pos:line="12" pos:column="38">1<pos:position pos:line="12" pos:column="39"/></literal>
          <operator pos:line="13" pos:column="11">||<pos:position pos:line="13" pos:column="13"/></operator> <operator pos:line="13" pos:column="14">(<pos:position pos:line="13" pos:column="15"/></operator><name><name pos:line="13" pos:column="15">protocolEncodingName<pos:position pos:line="13" pos:column="35"/></name><index pos:line="13" pos:column="35">[<expr><name pos:line="13" pos:column="36">i<pos:position pos:line="13" pos:column="37"/></name></expr>]<pos:position pos:line="13" pos:column="38"/></index></name> <operator pos:line="13" pos:column="39">&amp;<pos:position pos:line="13" pos:column="44"/></operator> <operator pos:line="13" pos:column="41">~<pos:position pos:line="13" pos:column="42"/></operator><literal type="number" pos:line="13" pos:column="42">0x7f<pos:position pos:line="13" pos:column="46"/></literal><operator pos:line="13" pos:column="46">)<pos:position pos:line="13" pos:column="47"/></operator> <operator pos:line="13" pos:column="48">!=<pos:position pos:line="13" pos:column="50"/></operator> <literal type="number" pos:line="13" pos:column="51">0<pos:position pos:line="13" pos:column="52"/></literal></expr>)<pos:position pos:line="13" pos:column="53"/></condition><then pos:line="13" pos:column="53"> <block pos:line="13" pos:column="54">{
        <expr_stmt><expr><name><name pos:line="14" pos:column="9">encodingBuf<pos:position pos:line="14" pos:column="20"/></name><index pos:line="14" pos:column="20">[<expr><literal type="number" pos:line="14" pos:column="21">0<pos:position pos:line="14" pos:column="22"/></literal></expr>]<pos:position pos:line="14" pos:column="23"/></index></name> <operator pos:line="14" pos:column="24">=<pos:position pos:line="14" pos:column="25"/></operator> <literal type="char" pos:line="14" pos:column="26">'\0'<pos:position pos:line="14" pos:column="30"/></literal></expr>;<pos:position pos:line="14" pos:column="31"/></expr_stmt>
        <break pos:line="15" pos:column="9">break;<pos:position pos:line="15" pos:column="15"/></break>
      }<pos:position pos:line="16" pos:column="8"/></block></then></if>
      <expr_stmt><expr><name><name pos:line="17" pos:column="7">encodingBuf<pos:position pos:line="17" pos:column="18"/></name><index pos:line="17" pos:column="18">[<expr><name pos:line="17" pos:column="19">i<pos:position pos:line="17" pos:column="20"/></name></expr>]<pos:position pos:line="17" pos:column="21"/></index></name> <operator pos:line="17" pos:column="22">=<pos:position pos:line="17" pos:column="23"/></operator> <operator pos:line="17" pos:column="24">(<pos:position pos:line="17" pos:column="25"/></operator><name pos:line="17" pos:column="25">char<pos:position pos:line="17" pos:column="29"/></name><operator pos:line="17" pos:column="29">)<pos:position pos:line="17" pos:column="30"/></operator><name><name pos:line="17" pos:column="30">protocolEncodingName<pos:position pos:line="17" pos:column="50"/></name><index pos:line="17" pos:column="50">[<expr><name pos:line="17" pos:column="51">i<pos:position pos:line="17" pos:column="52"/></name></expr>]<pos:position pos:line="17" pos:column="53"/></index></name></expr>;<pos:position pos:line="17" pos:column="54"/></expr_stmt>
    }<pos:position pos:line="18" pos:column="6"/></block></for>
    <expr_stmt><expr><name><name pos:line="19" pos:column="5">encodingBuf<pos:position pos:line="19" pos:column="16"/></name><index pos:line="19" pos:column="16">[<expr><name pos:line="19" pos:column="17">i<pos:position pos:line="19" pos:column="18"/></name></expr>]<pos:position pos:line="19" pos:column="19"/></index></name> <operator pos:line="19" pos:column="20">=<pos:position pos:line="19" pos:column="21"/></operator> <literal type="char" pos:line="19" pos:column="22">'\0'<pos:position pos:line="19" pos:column="26"/></literal></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>
    <expr_stmt><expr><name pos:line="20" pos:column="5">s<pos:position pos:line="20" pos:column="6"/></name> <operator pos:line="20" pos:column="7">=<pos:position pos:line="20" pos:column="8"/></operator> <name pos:line="20" pos:column="9">encodingBuf<pos:position pos:line="20" pos:column="20"/></name></expr>;<pos:position pos:line="20" pos:column="21"/></expr_stmt>
  }<pos:position pos:line="21" pos:column="4"/></block></else></if>
<cpp:else pos:line="22" pos:column="1">#<cpp:directive pos:line="22" pos:column="2">else<pos:position pos:line="22" pos:column="6"/></cpp:directive></cpp:else>
  <expr_stmt><expr><name pos:line="23" pos:column="3">s<pos:position pos:line="23" pos:column="4"/></name> <operator pos:line="23" pos:column="5">=<pos:position pos:line="23" pos:column="6"/></operator> <name pos:line="23" pos:column="7">protocolEncodingName<pos:position pos:line="23" pos:column="27"/></name></expr>;<pos:position pos:line="23" pos:column="28"/></expr_stmt>
<cpp:endif pos:line="24" pos:column="1">#<cpp:directive pos:line="24" pos:column="2">endif<pos:position pos:line="24" pos:column="7"/></cpp:directive></cpp:endif>
  <if pos:line="25" pos:column="3">if <condition pos:line="25" pos:column="6">(<expr><operator pos:line="25" pos:column="7">(<pos:position pos:line="25" pos:column="8"/></operator><ternary><condition><expr><name pos:line="25" pos:column="8">ns<pos:position pos:line="25" pos:column="10"/></name></expr> ?<pos:position pos:line="25" pos:column="12"/></condition><then pos:line="25" pos:column="12"> <expr><name pos:line="25" pos:column="13">XmlInitEncodingNS<pos:position pos:line="25" pos:column="30"/></name></expr> <pos:position pos:line="25" pos:column="31"/></then><else pos:line="25" pos:column="31">: <expr><name pos:line="25" pos:column="33">XmlInitEncoding<pos:position pos:line="25" pos:column="48"/></name></expr></else></ternary><operator pos:line="25" pos:column="48">)<pos:position pos:line="25" pos:column="49"/></operator><operator pos:line="25" pos:column="49">(<pos:position pos:line="25" pos:column="50"/></operator><operator pos:line="25" pos:column="50">&amp;<pos:position pos:line="25" pos:column="55"/></operator><name pos:line="25" pos:column="51">initEncoding<pos:position pos:line="25" pos:column="63"/></name><operator pos:line="25" pos:column="63">,<pos:position pos:line="25" pos:column="64"/></operator> <operator pos:line="25" pos:column="65">&amp;<pos:position pos:line="25" pos:column="70"/></operator><name pos:line="25" pos:column="66">encoding<pos:position pos:line="25" pos:column="74"/></name><operator pos:line="25" pos:column="74">,<pos:position pos:line="25" pos:column="75"/></operator> <name pos:line="25" pos:column="76">s<pos:position pos:line="25" pos:column="77"/></name><operator pos:line="25" pos:column="77">)<pos:position pos:line="25" pos:column="78"/></operator></expr>)<pos:position pos:line="25" pos:column="79"/></condition><then pos:line="25" pos:column="79">
    <block type="pseudo"><return pos:line="26" pos:column="5">return <expr><name pos:line="26" pos:column="12">XML_ERROR_NONE<pos:position pos:line="26" pos:column="26"/></name></expr>;<pos:position pos:line="26" pos:column="27"/></return></block></then></if>
  <return pos:line="27" pos:column="3">return <expr><call><name pos:line="27" pos:column="10">handleUnknownEncoding<pos:position pos:line="27" pos:column="31"/></name><argument_list pos:line="27" pos:column="31">(<argument><expr><name pos:line="27" pos:column="32">parser<pos:position pos:line="27" pos:column="38"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="40">protocolEncodingName<pos:position pos:line="27" pos:column="60"/></name></expr></argument>)<pos:position pos:line="27" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="62"/></return>
}<pos:position pos:line="28" pos:column="2"/></block></function></unit>
