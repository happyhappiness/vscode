<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_108_httpd-2.3.6.cpp" pos:tabs="8"><function><type><name pos:line="1" pos:column="1">int<pos:position pos:line="1" pos:column="4"/></name></type> <name pos:line="1" pos:column="5">main<pos:position pos:line="1" pos:column="9"/></name><parameter_list pos:line="1" pos:column="9">(<parameter><decl><type><name pos:line="1" pos:column="10">int<pos:position pos:line="1" pos:column="13"/></name></type> <name pos:line="1" pos:column="14">argc<pos:position pos:line="1" pos:column="18"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="20">const<pos:position pos:line="1" pos:column="25"/></specifier> <name pos:line="1" pos:column="26">char<pos:position pos:line="1" pos:column="30"/></name> <modifier pos:line="1" pos:column="31">*<pos:position pos:line="1" pos:column="32"/></modifier> <specifier pos:line="1" pos:column="33">const<pos:position pos:line="1" pos:column="38"/></specifier></type> <name><name pos:line="1" pos:column="39">argv<pos:position pos:line="1" pos:column="43"/></name><index pos:line="1" pos:column="43">[]<pos:position pos:line="1" pos:column="45"/></index></name></decl></parameter>)<pos:position pos:line="1" pos:column="46"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">apr_file_t<pos:position pos:line="3" pos:column="15"/></name> <modifier pos:line="3" pos:column="16">*<pos:position pos:line="3" pos:column="17"/></modifier></type><name pos:line="3" pos:column="17">infd<pos:position pos:line="3" pos:column="21"/></name></decl>, <modifier pos:line="3" pos:column="23">*<pos:position pos:line="3" pos:column="24"/></modifier><decl><type ref="prev"/><name pos:line="3" pos:column="24">skwrapper<pos:position pos:line="3" pos:column="33"/></name></decl>;<pos:position pos:line="3" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">apr_sockaddr_t<pos:position pos:line="4" pos:column="19"/></name> <modifier pos:line="4" pos:column="20">*<pos:position pos:line="4" pos:column="21"/></modifier></type><name pos:line="4" pos:column="21">skaddr<pos:position pos:line="4" pos:column="27"/></name></decl>;<pos:position pos:line="4" pos:column="28"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_getopt_t<pos:position pos:line="5" pos:column="17"/></name> <modifier pos:line="5" pos:column="18">*<pos:position pos:line="5" pos:column="19"/></modifier></type><name pos:line="5" pos:column="19">gopt<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">apr_socket_t<pos:position pos:line="6" pos:column="17"/></name> <modifier pos:line="6" pos:column="18">*<pos:position pos:line="6" pos:column="19"/></modifier></type><name pos:line="6" pos:column="19">skt<pos:position pos:line="6" pos:column="22"/></name></decl>;<pos:position pos:line="6" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_pool_t<pos:position pos:line="7" pos:column="15"/></name> <modifier pos:line="7" pos:column="16">*<pos:position pos:line="7" pos:column="17"/></modifier></type><name pos:line="7" pos:column="17">pool<pos:position pos:line="7" pos:column="21"/></name></decl>;<pos:position pos:line="7" pos:column="22"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">apr_status_t<pos:position pos:line="8" pos:column="17"/></name></type> <name pos:line="8" pos:column="18">rv<pos:position pos:line="8" pos:column="20"/></name></decl>;<pos:position pos:line="8" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="9" pos:column="5">apr_proc_t<pos:position pos:line="9" pos:column="15"/></name></type> <name pos:line="9" pos:column="16">proc<pos:position pos:line="9" pos:column="20"/></name></decl>;<pos:position pos:line="9" pos:column="21"/></decl_stmt>


    <comment type="block" pos:line="12" pos:column="5">/* Command line arguments */</comment>
    <decl_stmt><decl><type><name pos:line="13" pos:column="5">int<pos:position pos:line="13" pos:column="8"/></name></type> <name pos:line="13" pos:column="9">num_to_start<pos:position pos:line="13" pos:column="21"/></name> <init pos:line="13" pos:column="22">= <expr><literal type="number" pos:line="13" pos:column="24">1<pos:position pos:line="13" pos:column="25"/></literal></expr></init></decl>, <decl><type ref="prev"/><name pos:line="13" pos:column="27">port<pos:position pos:line="13" pos:column="31"/></name> <init pos:line="13" pos:column="32">= <expr><literal type="number" pos:line="13" pos:column="34">0<pos:position pos:line="13" pos:column="35"/></literal></expr></init></decl>;<pos:position pos:line="13" pos:column="36"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="14" pos:column="5">const<pos:position pos:line="14" pos:column="10"/></specifier> <name pos:line="14" pos:column="11">char<pos:position pos:line="14" pos:column="15"/></name> <modifier pos:line="14" pos:column="16">*<pos:position pos:line="14" pos:column="17"/></modifier></type><name pos:line="14" pos:column="17">interface<pos:position pos:line="14" pos:column="26"/></name> <init pos:line="14" pos:column="27">= <expr><name pos:line="14" pos:column="29">NULL<pos:position pos:line="14" pos:column="33"/></name></expr></init></decl>;<pos:position pos:line="14" pos:column="34"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="15" pos:column="5">const<pos:position pos:line="15" pos:column="10"/></specifier> <name pos:line="15" pos:column="11">char<pos:position pos:line="15" pos:column="15"/></name> <modifier pos:line="15" pos:column="16">*<pos:position pos:line="15" pos:column="17"/></modifier></type><name pos:line="15" pos:column="17">command<pos:position pos:line="15" pos:column="24"/></name> <init pos:line="15" pos:column="25">= <expr><name pos:line="15" pos:column="27">NULL<pos:position pos:line="15" pos:column="31"/></name></expr></init></decl>;<pos:position pos:line="15" pos:column="32"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="17" pos:column="5">apr_app_initialize<pos:position pos:line="17" pos:column="23"/></name><argument_list pos:line="17" pos:column="23">(<argument><expr><operator pos:line="17" pos:column="24">&amp;<pos:position pos:line="17" pos:column="29"/></operator><name pos:line="17" pos:column="25">argc<pos:position pos:line="17" pos:column="29"/></name></expr></argument>, <argument><expr><operator pos:line="17" pos:column="31">&amp;<pos:position pos:line="17" pos:column="36"/></operator><name pos:line="17" pos:column="32">argv<pos:position pos:line="17" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="17" pos:column="38">NULL<pos:position pos:line="17" pos:column="42"/></name></expr></argument>)<pos:position pos:line="17" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="44"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="19" pos:column="5">atexit<pos:position pos:line="19" pos:column="11"/></name><argument_list pos:line="19" pos:column="11">(<argument><expr><name pos:line="19" pos:column="12">apr_terminate<pos:position pos:line="19" pos:column="25"/></name></expr></argument>)<pos:position pos:line="19" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="27"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="21" pos:column="5">apr_pool_create<pos:position pos:line="21" pos:column="20"/></name><argument_list pos:line="21" pos:column="20">(<argument><expr><operator pos:line="21" pos:column="21">&amp;<pos:position pos:line="21" pos:column="26"/></operator><name pos:line="21" pos:column="22">pool<pos:position pos:line="21" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="21" pos:column="28">NULL<pos:position pos:line="21" pos:column="32"/></name></expr></argument>)<pos:position pos:line="21" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="21" pos:column="34"/></expr_stmt>

    <expr_stmt><expr><name pos:line="23" pos:column="5">rv<pos:position pos:line="23" pos:column="7"/></name> <operator pos:line="23" pos:column="8">=<pos:position pos:line="23" pos:column="9"/></operator> <call><name pos:line="23" pos:column="10">apr_getopt_init<pos:position pos:line="23" pos:column="25"/></name><argument_list pos:line="23" pos:column="25">(<argument><expr><operator pos:line="23" pos:column="26">&amp;<pos:position pos:line="23" pos:column="31"/></operator><name pos:line="23" pos:column="27">gopt<pos:position pos:line="23" pos:column="31"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="33">pool<pos:position pos:line="23" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="39">argc<pos:position pos:line="23" pos:column="43"/></name></expr></argument>, <argument><expr><name pos:line="23" pos:column="45">argv<pos:position pos:line="23" pos:column="49"/></name></expr></argument>)<pos:position pos:line="23" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="23" pos:column="51"/></expr_stmt>
    <if pos:line="24" pos:column="5">if <condition pos:line="24" pos:column="8">(<expr><name pos:line="24" pos:column="9">rv<pos:position pos:line="24" pos:column="11"/></name></expr>)<pos:position pos:line="24" pos:column="12"/></condition><then pos:line="24" pos:column="12"> <block pos:line="24" pos:column="13">{
        <return pos:line="25" pos:column="9">return <expr><name pos:line="25" pos:column="16">EXIT_FAILURE<pos:position pos:line="25" pos:column="28"/></name></expr>;<pos:position pos:line="25" pos:column="29"/></return>
    }<pos:position pos:line="26" pos:column="6"/></block></then></if>

    <for pos:line="28" pos:column="5">for <control pos:line="28" pos:column="9">(<init pos:line="28" pos:column="10">;<pos:position pos:line="28" pos:column="11"/></init><condition pos:line="28" pos:column="11">;<pos:position pos:line="28" pos:column="12"/></condition><incr/>)<pos:position pos:line="28" pos:column="13"/></control> <block pos:line="28" pos:column="14">{
        <decl_stmt><decl><type><specifier pos:line="29" pos:column="9">const<pos:position pos:line="29" pos:column="14"/></specifier> <name pos:line="29" pos:column="15">char<pos:position pos:line="29" pos:column="19"/></name> <modifier pos:line="29" pos:column="20">*<pos:position pos:line="29" pos:column="21"/></modifier></type><name pos:line="29" pos:column="21">arg<pos:position pos:line="29" pos:column="24"/></name></decl>;<pos:position pos:line="29" pos:column="25"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="30" pos:column="9">char<pos:position pos:line="30" pos:column="13"/></name></type> <name pos:line="30" pos:column="14">opt<pos:position pos:line="30" pos:column="17"/></name></decl>;<pos:position pos:line="30" pos:column="18"/></decl_stmt>

        <expr_stmt><expr><name pos:line="32" pos:column="9">rv<pos:position pos:line="32" pos:column="11"/></name> <operator pos:line="32" pos:column="12">=<pos:position pos:line="32" pos:column="13"/></operator> <call><name pos:line="32" pos:column="14">apr_getopt<pos:position pos:line="32" pos:column="24"/></name><argument_list pos:line="32" pos:column="24">(<argument><expr><name pos:line="32" pos:column="25">gopt<pos:position pos:line="32" pos:column="29"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="32" pos:column="31">"c:p:i:N:"<pos:position pos:line="32" pos:column="41"/></literal></expr></argument>, <argument><expr><operator pos:line="32" pos:column="43">&amp;<pos:position pos:line="32" pos:column="48"/></operator><name pos:line="32" pos:column="44">opt<pos:position pos:line="32" pos:column="47"/></name></expr></argument>, <argument><expr><operator pos:line="32" pos:column="49">&amp;<pos:position pos:line="32" pos:column="54"/></operator><name pos:line="32" pos:column="50">arg<pos:position pos:line="32" pos:column="53"/></name></expr></argument>)<pos:position pos:line="32" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="32" pos:column="55"/></expr_stmt>
        <if pos:line="33" pos:column="9">if <condition pos:line="33" pos:column="12">(<expr><call><name pos:line="33" pos:column="13">APR_STATUS_IS_EOF<pos:position pos:line="33" pos:column="30"/></name><argument_list pos:line="33" pos:column="30">(<argument><expr><name pos:line="33" pos:column="31">rv<pos:position pos:line="33" pos:column="33"/></name></expr></argument>)<pos:position pos:line="33" pos:column="34"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="35"/></condition><then pos:line="33" pos:column="35"> <block pos:line="33" pos:column="36">{
            <break pos:line="34" pos:column="13">break;<pos:position pos:line="34" pos:column="19"/></break>
        }<pos:position pos:line="35" pos:column="10"/></block></then> <elseif pos:line="35" pos:column="11">else <if pos:line="35" pos:column="16">if <condition pos:line="35" pos:column="19">(<expr><name pos:line="35" pos:column="20">rv<pos:position pos:line="35" pos:column="22"/></name></expr>)<pos:position pos:line="35" pos:column="23"/></condition><then pos:line="35" pos:column="23"> <block pos:line="35" pos:column="24">{
            <expr_stmt><expr><call><name pos:line="36" pos:column="13">usage<pos:position pos:line="36" pos:column="18"/></name><argument_list pos:line="36" pos:column="18">()<pos:position pos:line="36" pos:column="20"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="21"/></expr_stmt>
        }<pos:position pos:line="37" pos:column="10"/></block></then></if></elseif> <else pos:line="37" pos:column="11">else <block pos:line="37" pos:column="16">{
            <switch pos:line="38" pos:column="13">switch <condition pos:line="38" pos:column="20">(<expr><name pos:line="38" pos:column="21">opt<pos:position pos:line="38" pos:column="24"/></name></expr>)<pos:position pos:line="38" pos:column="25"/></condition> <block pos:line="38" pos:column="26">{
            <case pos:line="39" pos:column="13">case <expr><literal type="char" pos:line="39" pos:column="18">'c'<pos:position pos:line="39" pos:column="21"/></literal></expr>:<pos:position pos:line="39" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="40" pos:column="17">command<pos:position pos:line="40" pos:column="24"/></name> <operator pos:line="40" pos:column="25">=<pos:position pos:line="40" pos:column="26"/></operator> <name pos:line="40" pos:column="27">arg<pos:position pos:line="40" pos:column="30"/></name></expr>;<pos:position pos:line="40" pos:column="31"/></expr_stmt>
                <break pos:line="41" pos:column="17">break;<pos:position pos:line="41" pos:column="23"/></break>

            <case pos:line="43" pos:column="13">case <expr><literal type="char" pos:line="43" pos:column="18">'p'<pos:position pos:line="43" pos:column="21"/></literal></expr>:<pos:position pos:line="43" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="44" pos:column="17">port<pos:position pos:line="44" pos:column="21"/></name> <operator pos:line="44" pos:column="22">=<pos:position pos:line="44" pos:column="23"/></operator> <call><name pos:line="44" pos:column="24">atoi<pos:position pos:line="44" pos:column="28"/></name><argument_list pos:line="44" pos:column="28">(<argument><expr><name pos:line="44" pos:column="29">arg<pos:position pos:line="44" pos:column="32"/></name></expr></argument>)<pos:position pos:line="44" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="34"/></expr_stmt>
                <if pos:line="45" pos:column="17">if <condition pos:line="45" pos:column="20">(<expr><operator pos:line="45" pos:column="21">!<pos:position pos:line="45" pos:column="22"/></operator> <name pos:line="45" pos:column="23">port<pos:position pos:line="45" pos:column="27"/></name></expr>)<pos:position pos:line="45" pos:column="28"/></condition><then pos:line="45" pos:column="28"> <block pos:line="45" pos:column="29">{
                    <expr_stmt><expr><call><name pos:line="46" pos:column="21">usage<pos:position pos:line="46" pos:column="26"/></name><argument_list pos:line="46" pos:column="26">()<pos:position pos:line="46" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="47" pos:column="18"/></block></then></if>
                <break pos:line="48" pos:column="17">break;<pos:position pos:line="48" pos:column="23"/></break>

            <case pos:line="50" pos:column="13">case <expr><literal type="char" pos:line="50" pos:column="18">'i'<pos:position pos:line="50" pos:column="21"/></literal></expr>:<pos:position pos:line="50" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="51" pos:column="17">interface<pos:position pos:line="51" pos:column="26"/></name> <operator pos:line="51" pos:column="27">=<pos:position pos:line="51" pos:column="28"/></operator> <name pos:line="51" pos:column="29">arg<pos:position pos:line="51" pos:column="32"/></name></expr>;<pos:position pos:line="51" pos:column="33"/></expr_stmt>
                <break pos:line="52" pos:column="17">break;<pos:position pos:line="52" pos:column="23"/></break>

            <case pos:line="54" pos:column="13">case <expr><literal type="char" pos:line="54" pos:column="18">'N'<pos:position pos:line="54" pos:column="21"/></literal></expr>:<pos:position pos:line="54" pos:column="22"/></case>
                <expr_stmt><expr><name pos:line="55" pos:column="17">num_to_start<pos:position pos:line="55" pos:column="29"/></name> <operator pos:line="55" pos:column="30">=<pos:position pos:line="55" pos:column="31"/></operator> <call><name pos:line="55" pos:column="32">atoi<pos:position pos:line="55" pos:column="36"/></name><argument_list pos:line="55" pos:column="36">(<argument><expr><name pos:line="55" pos:column="37">arg<pos:position pos:line="55" pos:column="40"/></name></expr></argument>)<pos:position pos:line="55" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="42"/></expr_stmt>
                <if pos:line="56" pos:column="17">if <condition pos:line="56" pos:column="20">(<expr><operator pos:line="56" pos:column="21">!<pos:position pos:line="56" pos:column="22"/></operator> <name pos:line="56" pos:column="23">num_to_start<pos:position pos:line="56" pos:column="35"/></name></expr>)<pos:position pos:line="56" pos:column="36"/></condition><then pos:line="56" pos:column="36"> <block pos:line="56" pos:column="37">{
                    <expr_stmt><expr><call><name pos:line="57" pos:column="21">usage<pos:position pos:line="57" pos:column="26"/></name><argument_list pos:line="57" pos:column="26">()<pos:position pos:line="57" pos:column="28"/></argument_list></call></expr>;<pos:position pos:line="57" pos:column="29"/></expr_stmt>
                }<pos:position pos:line="58" pos:column="18"/></block></then></if>
                <break pos:line="59" pos:column="17">break;<pos:position pos:line="59" pos:column="23"/></break>

            <default pos:line="61" pos:column="13">default:<pos:position pos:line="61" pos:column="21"/></default>
                <break pos:line="62" pos:column="17">break;<pos:position pos:line="62" pos:column="23"/></break>
            }<pos:position pos:line="63" pos:column="14"/></block></switch>
        }<pos:position pos:line="64" pos:column="10"/></block></else></if>
    }<pos:position pos:line="65" pos:column="6"/></block></for>

    <if pos:line="67" pos:column="5">if <condition pos:line="67" pos:column="8">(<expr><operator pos:line="67" pos:column="9">!<pos:position pos:line="67" pos:column="10"/></operator> <name pos:line="67" pos:column="11">command<pos:position pos:line="67" pos:column="18"/></name> <operator pos:line="67" pos:column="19">||<pos:position pos:line="67" pos:column="21"/></operator> <operator pos:line="67" pos:column="22">!<pos:position pos:line="67" pos:column="23"/></operator> <name pos:line="67" pos:column="24">port<pos:position pos:line="67" pos:column="28"/></name></expr>)<pos:position pos:line="67" pos:column="29"/></condition><then pos:line="67" pos:column="29"> <block pos:line="67" pos:column="30">{
        <expr_stmt><expr><call><name pos:line="68" pos:column="9">usage<pos:position pos:line="68" pos:column="14"/></name><argument_list pos:line="68" pos:column="14">()<pos:position pos:line="68" pos:column="16"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="17"/></expr_stmt>
    }<pos:position pos:line="69" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="71" pos:column="5">rv<pos:position pos:line="71" pos:column="7"/></name> <operator pos:line="71" pos:column="8">=<pos:position pos:line="71" pos:column="9"/></operator> <call><name pos:line="71" pos:column="10">apr_sockaddr_info_get<pos:position pos:line="71" pos:column="31"/></name><argument_list pos:line="71" pos:column="31">(<argument><expr><operator pos:line="71" pos:column="32">&amp;<pos:position pos:line="71" pos:column="37"/></operator><name pos:line="71" pos:column="33">skaddr<pos:position pos:line="71" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="41">interface<pos:position pos:line="71" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="52">APR_UNSPEC<pos:position pos:line="71" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="71" pos:column="64">port<pos:position pos:line="71" pos:column="68"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="71" pos:column="70">0<pos:position pos:line="71" pos:column="71"/></literal></expr></argument>, <argument><expr><name pos:line="71" pos:column="73">pool<pos:position pos:line="71" pos:column="77"/></name></expr></argument>)<pos:position pos:line="71" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="79"/></expr_stmt>
    <if pos:line="72" pos:column="5">if <condition pos:line="72" pos:column="8">(<expr><name pos:line="72" pos:column="9">rv<pos:position pos:line="72" pos:column="11"/></name></expr>)<pos:position pos:line="72" pos:column="12"/></condition><then pos:line="72" pos:column="12"> <block pos:line="72" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="73" pos:column="9">exit_error<pos:position pos:line="73" pos:column="19"/></name><argument_list pos:line="73" pos:column="19">(<argument><expr><name pos:line="73" pos:column="20">rv<pos:position pos:line="73" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="73" pos:column="24">"apr_sockaddr_info_get"<pos:position pos:line="73" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="73" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="73" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="74" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="76" pos:column="5">rv<pos:position pos:line="76" pos:column="7"/></name> <operator pos:line="76" pos:column="8">=<pos:position pos:line="76" pos:column="9"/></operator> <call><name pos:line="76" pos:column="10">apr_socket_create<pos:position pos:line="76" pos:column="27"/></name><argument_list pos:line="76" pos:column="27">(<argument><expr><operator pos:line="76" pos:column="28">&amp;<pos:position pos:line="76" pos:column="33"/></operator><name pos:line="76" pos:column="29">skt<pos:position pos:line="76" pos:column="32"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="34">skaddr<pos:position pos:line="76" pos:column="40"/></name><operator pos:line="76" pos:column="40">-&gt;<pos:position pos:line="76" pos:column="45"/></operator><name pos:line="76" pos:column="42">family<pos:position pos:line="76" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="50">SOCK_STREAM<pos:position pos:line="76" pos:column="61"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="63">APR_PROTO_TCP<pos:position pos:line="76" pos:column="76"/></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="78">pool<pos:position pos:line="76" pos:column="82"/></name></expr></argument>)<pos:position pos:line="76" pos:column="83"/></argument_list></call></expr>;<pos:position pos:line="76" pos:column="84"/></expr_stmt>
    <if pos:line="77" pos:column="5">if <condition pos:line="77" pos:column="8">(<expr><name pos:line="77" pos:column="9">rv<pos:position pos:line="77" pos:column="11"/></name></expr>)<pos:position pos:line="77" pos:column="12"/></condition><then pos:line="77" pos:column="12"> <block pos:line="77" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="78" pos:column="9">exit_error<pos:position pos:line="78" pos:column="19"/></name><argument_list pos:line="78" pos:column="19">(<argument><expr><name pos:line="78" pos:column="20">rv<pos:position pos:line="78" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="78" pos:column="24">"apr_socket_create"<pos:position pos:line="78" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="78" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="78" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="79" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="81" pos:column="5">rv<pos:position pos:line="81" pos:column="7"/></name> <operator pos:line="81" pos:column="8">=<pos:position pos:line="81" pos:column="9"/></operator> <call><name pos:line="81" pos:column="10">apr_socket_bind<pos:position pos:line="81" pos:column="25"/></name><argument_list pos:line="81" pos:column="25">(<argument><expr><name pos:line="81" pos:column="26">skt<pos:position pos:line="81" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="81" pos:column="31">skaddr<pos:position pos:line="81" pos:column="37"/></name></expr></argument>)<pos:position pos:line="81" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="81" pos:column="39"/></expr_stmt>
    <if pos:line="82" pos:column="5">if <condition pos:line="82" pos:column="8">(<expr><name pos:line="82" pos:column="9">rv<pos:position pos:line="82" pos:column="11"/></name></expr>)<pos:position pos:line="82" pos:column="12"/></condition><then pos:line="82" pos:column="12"> <block pos:line="82" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="83" pos:column="9">exit_error<pos:position pos:line="83" pos:column="19"/></name><argument_list pos:line="83" pos:column="19">(<argument><expr><name pos:line="83" pos:column="20">rv<pos:position pos:line="83" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="83" pos:column="24">"apr_socket_bind"<pos:position pos:line="83" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="84" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="86" pos:column="5">rv<pos:position pos:line="86" pos:column="7"/></name> <operator pos:line="86" pos:column="8">=<pos:position pos:line="86" pos:column="9"/></operator> <call><name pos:line="86" pos:column="10">apr_socket_listen<pos:position pos:line="86" pos:column="27"/></name><argument_list pos:line="86" pos:column="27">(<argument><expr><name pos:line="86" pos:column="28">skt<pos:position pos:line="86" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="86" pos:column="33">1024<pos:position pos:line="86" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="86" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="39"/></expr_stmt>
    <if pos:line="87" pos:column="5">if <condition pos:line="87" pos:column="8">(<expr><name pos:line="87" pos:column="9">rv<pos:position pos:line="87" pos:column="11"/></name></expr>)<pos:position pos:line="87" pos:column="12"/></condition><then pos:line="87" pos:column="12"> <block pos:line="87" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="88" pos:column="9">exit_error<pos:position pos:line="88" pos:column="19"/></name><argument_list pos:line="88" pos:column="19">(<argument><expr><name pos:line="88" pos:column="20">rv<pos:position pos:line="88" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="88" pos:column="24">"apr_socket_listen"<pos:position pos:line="88" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="88" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="88" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="89" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name pos:line="91" pos:column="5">rv<pos:position pos:line="91" pos:column="7"/></name> <operator pos:line="91" pos:column="8">=<pos:position pos:line="91" pos:column="9"/></operator> <call><name pos:line="91" pos:column="10">apr_proc_detach<pos:position pos:line="91" pos:column="25"/></name><argument_list pos:line="91" pos:column="25">(<argument><expr><name pos:line="91" pos:column="26">APR_PROC_DETACH_DAEMONIZE<pos:position pos:line="91" pos:column="51"/></name></expr></argument>)<pos:position pos:line="91" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="53"/></expr_stmt>
    <if pos:line="92" pos:column="5">if <condition pos:line="92" pos:column="8">(<expr><name pos:line="92" pos:column="9">rv<pos:position pos:line="92" pos:column="11"/></name></expr>)<pos:position pos:line="92" pos:column="12"/></condition><then pos:line="92" pos:column="12"> <block pos:line="92" pos:column="13">{
        <expr_stmt><expr><call><name pos:line="93" pos:column="9">exit_error<pos:position pos:line="93" pos:column="19"/></name><argument_list pos:line="93" pos:column="19">(<argument><expr><name pos:line="93" pos:column="20">rv<pos:position pos:line="93" pos:column="22"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="93" pos:column="24">"apr_proc_detach"<pos:position pos:line="93" pos:column="41"/></literal></expr></argument>)<pos:position pos:line="93" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="93" pos:column="43"/></expr_stmt>
    }<pos:position pos:line="94" pos:column="6"/></block></then></if>

<cpp:if pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">if<pos:position pos:line="96" pos:column="4"/></cpp:directive> <expr><call><name pos:line="96" pos:column="5">defined<pos:position pos:line="96" pos:column="12"/></name><argument_list pos:line="96" pos:column="12">(<argument><expr><name pos:line="96" pos:column="13">WIN32<pos:position pos:line="96" pos:column="18"/></name></expr></argument>)<pos:position pos:line="96" pos:column="19"/></argument_list></call> <operator pos:line="96" pos:column="20">||<pos:position pos:line="96" pos:column="22"/></operator> <call><name pos:line="96" pos:column="23">defined<pos:position pos:line="96" pos:column="30"/></name><argument_list pos:line="96" pos:column="30">(<argument><expr><name pos:line="96" pos:column="31">OS2<pos:position pos:line="96" pos:column="34"/></name></expr></argument>)<pos:position pos:line="96" pos:column="35"/></argument_list></call> <operator pos:line="96" pos:column="36">||<pos:position pos:line="96" pos:column="38"/></operator> <call><name pos:line="96" pos:column="39">defined<pos:position pos:line="96" pos:column="46"/></name><argument_list pos:line="96" pos:column="46">(<argument><expr><name pos:line="96" pos:column="47">NETWARE<pos:position pos:line="96" pos:column="54"/></name></expr></argument>)<pos:position pos:line="96" pos:column="55"/></argument_list></call></expr></cpp:if>

<cpp:error pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">error<pos:position pos:line="98" pos:column="7"/></cpp:directive> <cpp:literal pos:line="98" pos:column="8">"Please implement me."<pos:position pos:line="98" pos:column="30"/></cpp:literal></cpp:error>

<cpp:else pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">else<pos:position pos:line="100" pos:column="6"/></cpp:directive></cpp:else>

    <while pos:line="102" pos:column="5">while <condition pos:line="102" pos:column="11">(<expr><operator pos:line="102" pos:column="12">--<pos:position pos:line="102" pos:column="14"/></operator><name pos:line="102" pos:column="14">num_to_start<pos:position pos:line="102" pos:column="26"/></name> <operator pos:line="102" pos:column="27">&gt;=<pos:position pos:line="102" pos:column="32"/></operator> <literal type="number" pos:line="102" pos:column="30">0<pos:position pos:line="102" pos:column="31"/></literal></expr>)<pos:position pos:line="102" pos:column="32"/></condition> <block pos:line="102" pos:column="33">{
        <expr_stmt><expr><name pos:line="103" pos:column="9">rv<pos:position pos:line="103" pos:column="11"/></name> <operator pos:line="103" pos:column="12">=<pos:position pos:line="103" pos:column="13"/></operator> <call><name pos:line="103" pos:column="14">apr_proc_fork<pos:position pos:line="103" pos:column="27"/></name><argument_list pos:line="103" pos:column="27">(<argument><expr><operator pos:line="103" pos:column="28">&amp;<pos:position pos:line="103" pos:column="33"/></operator><name pos:line="103" pos:column="29">proc<pos:position pos:line="103" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="35">pool<pos:position pos:line="103" pos:column="39"/></name></expr></argument>)<pos:position pos:line="103" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="41"/></expr_stmt>
        <if pos:line="104" pos:column="9">if <condition pos:line="104" pos:column="12">(<expr><name pos:line="104" pos:column="13">rv<pos:position pos:line="104" pos:column="15"/></name> <operator pos:line="104" pos:column="16">==<pos:position pos:line="104" pos:column="18"/></operator> <name pos:line="104" pos:column="19">APR_INCHILD<pos:position pos:line="104" pos:column="30"/></name></expr>)<pos:position pos:line="104" pos:column="31"/></condition><then pos:line="104" pos:column="31"> <block pos:line="104" pos:column="32">{
            <decl_stmt><decl><type><name pos:line="105" pos:column="13">apr_os_file_t<pos:position pos:line="105" pos:column="26"/></name></type> <name pos:line="105" pos:column="27">oft<pos:position pos:line="105" pos:column="30"/></name> <init pos:line="105" pos:column="31">= <expr><literal type="number" pos:line="105" pos:column="33">0<pos:position pos:line="105" pos:column="34"/></literal></expr></init></decl>;<pos:position pos:line="105" pos:column="35"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="106" pos:column="13">apr_os_sock_t<pos:position pos:line="106" pos:column="26"/></name></type> <name pos:line="106" pos:column="27">oskt<pos:position pos:line="106" pos:column="31"/></name></decl>;<pos:position pos:line="106" pos:column="32"/></decl_stmt>

            <comment type="block" pos:line="108" pos:column="13">/* Ok, so we need a file that has file descriptor 0 (which
             * FastCGI wants), but points to our socket.  This isn't really
             * possible in APR, so we cheat a bit.  I have no idea how to
             * do this on a non-unix platform, so for now this is platform
             * specific.  Ick.
             *
             * Note that this has to happen post-detach, otherwise fd 0
             * gets closed during apr_proc_detach and it's all for nothing.
             *
             * Unfortunately, doing this post detach means we have no way
             * to let anyone know if there's a problem at this point :( */</comment>

            <expr_stmt><expr><name pos:line="120" pos:column="13">rv<pos:position pos:line="120" pos:column="15"/></name> <operator pos:line="120" pos:column="16">=<pos:position pos:line="120" pos:column="17"/></operator> <call><name pos:line="120" pos:column="18">apr_os_file_put<pos:position pos:line="120" pos:column="33"/></name><argument_list pos:line="120" pos:column="33">(<argument><expr><operator pos:line="120" pos:column="34">&amp;<pos:position pos:line="120" pos:column="39"/></operator><name pos:line="120" pos:column="35">infd<pos:position pos:line="120" pos:column="39"/></name></expr></argument>, <argument><expr><operator pos:line="120" pos:column="41">&amp;<pos:position pos:line="120" pos:column="46"/></operator><name pos:line="120" pos:column="42">oft<pos:position pos:line="120" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="47">APR_READ<pos:position pos:line="120" pos:column="55"/></name> <operator pos:line="120" pos:column="56">|<pos:position pos:line="120" pos:column="57"/></operator> <name pos:line="120" pos:column="58">APR_WRITE<pos:position pos:line="120" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="120" pos:column="69">pool<pos:position pos:line="120" pos:column="73"/></name></expr></argument>)<pos:position pos:line="120" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="75"/></expr_stmt>
            <if pos:line="121" pos:column="13">if <condition pos:line="121" pos:column="16">(<expr><name pos:line="121" pos:column="17">rv<pos:position pos:line="121" pos:column="19"/></name></expr>)<pos:position pos:line="121" pos:column="20"/></condition><then pos:line="121" pos:column="20"> <block pos:line="121" pos:column="21">{
                <expr_stmt><expr><call><name pos:line="122" pos:column="17">exit<pos:position pos:line="122" pos:column="21"/></name><argument_list pos:line="122" pos:column="21">(<argument><expr><name pos:line="122" pos:column="22">EXIT_FAILURE<pos:position pos:line="122" pos:column="34"/></name></expr></argument>)<pos:position pos:line="122" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="122" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="123" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="125" pos:column="13">rv<pos:position pos:line="125" pos:column="15"/></name> <operator pos:line="125" pos:column="16">=<pos:position pos:line="125" pos:column="17"/></operator> <call><name pos:line="125" pos:column="18">apr_os_sock_get<pos:position pos:line="125" pos:column="33"/></name><argument_list pos:line="125" pos:column="33">(<argument><expr><operator pos:line="125" pos:column="34">&amp;<pos:position pos:line="125" pos:column="39"/></operator><name pos:line="125" pos:column="35">oskt<pos:position pos:line="125" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="125" pos:column="41">skt<pos:position pos:line="125" pos:column="44"/></name></expr></argument>)<pos:position pos:line="125" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="46"/></expr_stmt>
            <if pos:line="126" pos:column="13">if <condition pos:line="126" pos:column="16">(<expr><name pos:line="126" pos:column="17">rv<pos:position pos:line="126" pos:column="19"/></name></expr>)<pos:position pos:line="126" pos:column="20"/></condition><then pos:line="126" pos:column="20"> <block pos:line="126" pos:column="21">{
                <expr_stmt><expr><call><name pos:line="127" pos:column="17">exit<pos:position pos:line="127" pos:column="21"/></name><argument_list pos:line="127" pos:column="21">(<argument><expr><name pos:line="127" pos:column="22">EXIT_FAILURE<pos:position pos:line="127" pos:column="34"/></name></expr></argument>)<pos:position pos:line="127" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="127" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="128" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="130" pos:column="13">rv<pos:position pos:line="130" pos:column="15"/></name> <operator pos:line="130" pos:column="16">=<pos:position pos:line="130" pos:column="17"/></operator> <call><name pos:line="130" pos:column="18">apr_os_file_put<pos:position pos:line="130" pos:column="33"/></name><argument_list pos:line="130" pos:column="33">(<argument><expr><operator pos:line="130" pos:column="34">&amp;<pos:position pos:line="130" pos:column="39"/></operator><name pos:line="130" pos:column="35">skwrapper<pos:position pos:line="130" pos:column="44"/></name></expr></argument>, <argument><expr><operator pos:line="130" pos:column="46">&amp;<pos:position pos:line="130" pos:column="51"/></operator><name pos:line="130" pos:column="47">oskt<pos:position pos:line="130" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="130" pos:column="53">APR_READ<pos:position pos:line="130" pos:column="61"/></name> <operator pos:line="130" pos:column="62">|<pos:position pos:line="130" pos:column="63"/></operator> <name pos:line="130" pos:column="64">APR_WRITE<pos:position pos:line="130" pos:column="73"/></name></expr></argument>,
                                 <argument><expr><name pos:line="131" pos:column="34">pool<pos:position pos:line="131" pos:column="38"/></name></expr></argument>)<pos:position pos:line="131" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="40"/></expr_stmt>
            <if pos:line="132" pos:column="13">if <condition pos:line="132" pos:column="16">(<expr><name pos:line="132" pos:column="17">rv<pos:position pos:line="132" pos:column="19"/></name></expr>)<pos:position pos:line="132" pos:column="20"/></condition><then pos:line="132" pos:column="20"> <block pos:line="132" pos:column="21">{
                <expr_stmt><expr><call><name pos:line="133" pos:column="17">exit<pos:position pos:line="133" pos:column="21"/></name><argument_list pos:line="133" pos:column="21">(<argument><expr><name pos:line="133" pos:column="22">EXIT_FAILURE<pos:position pos:line="133" pos:column="34"/></name></expr></argument>)<pos:position pos:line="133" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="134" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="136" pos:column="13">rv<pos:position pos:line="136" pos:column="15"/></name> <operator pos:line="136" pos:column="16">=<pos:position pos:line="136" pos:column="17"/></operator> <call><name pos:line="136" pos:column="18">apr_file_dup2<pos:position pos:line="136" pos:column="31"/></name><argument_list pos:line="136" pos:column="31">(<argument><expr><name pos:line="136" pos:column="32">infd<pos:position pos:line="136" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="38">skwrapper<pos:position pos:line="136" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="136" pos:column="49">pool<pos:position pos:line="136" pos:column="53"/></name></expr></argument>)<pos:position pos:line="136" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="136" pos:column="55"/></expr_stmt>
            <if pos:line="137" pos:column="13">if <condition pos:line="137" pos:column="16">(<expr><name pos:line="137" pos:column="17">rv<pos:position pos:line="137" pos:column="19"/></name></expr>)<pos:position pos:line="137" pos:column="20"/></condition><then pos:line="137" pos:column="20"> <block pos:line="137" pos:column="21">{
                <expr_stmt><expr><call><name pos:line="138" pos:column="17">exit<pos:position pos:line="138" pos:column="21"/></name><argument_list pos:line="138" pos:column="21">(<argument><expr><name pos:line="138" pos:column="22">EXIT_FAILURE<pos:position pos:line="138" pos:column="34"/></name></expr></argument>)<pos:position pos:line="138" pos:column="35"/></argument_list></call></expr>;<pos:position pos:line="138" pos:column="36"/></expr_stmt>
            }<pos:position pos:line="139" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="141" pos:column="13">/* XXX Can't use apr_proc_create because there's no way to get
             *     infd into the procattr without going through another dup2,
             *     which means by the time it gets to the fastcgi process it
             *     is no longer fd 0, so it doesn't work.  Sigh. */</comment>

            <expr_stmt><expr><call><name pos:line="146" pos:column="13">execl<pos:position pos:line="146" pos:column="18"/></name><argument_list pos:line="146" pos:column="18">(<argument><expr><name pos:line="146" pos:column="19">command<pos:position pos:line="146" pos:column="26"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="28">command<pos:position pos:line="146" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="146" pos:column="37">NULL<pos:position pos:line="146" pos:column="41"/></name></expr></argument>)<pos:position pos:line="146" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="146" pos:column="43"/></expr_stmt>

        }<pos:position pos:line="148" pos:column="10"/></block></then> <elseif pos:line="148" pos:column="11">else <if pos:line="148" pos:column="16">if <condition pos:line="148" pos:column="19">(<expr><name pos:line="148" pos:column="20">rv<pos:position pos:line="148" pos:column="22"/></name> <operator pos:line="148" pos:column="23">==<pos:position pos:line="148" pos:column="25"/></operator> <name pos:line="148" pos:column="26">APR_INPARENT<pos:position pos:line="148" pos:column="38"/></name></expr>)<pos:position pos:line="148" pos:column="39"/></condition><then pos:line="148" pos:column="39"> <block pos:line="148" pos:column="40">{
            <if pos:line="149" pos:column="13">if <condition pos:line="149" pos:column="16">(<expr><name pos:line="149" pos:column="17">num_to_start<pos:position pos:line="149" pos:column="29"/></name> <operator pos:line="149" pos:column="30">==<pos:position pos:line="149" pos:column="32"/></operator> <literal type="number" pos:line="149" pos:column="33">0<pos:position pos:line="149" pos:column="34"/></literal></expr>)<pos:position pos:line="149" pos:column="35"/></condition><then pos:line="149" pos:column="35"> <block pos:line="149" pos:column="36">{
                <expr_stmt><expr><call><name pos:line="150" pos:column="17">apr_socket_close<pos:position pos:line="150" pos:column="33"/></name><argument_list pos:line="150" pos:column="33">(<argument><expr><name pos:line="150" pos:column="34">skt<pos:position pos:line="150" pos:column="37"/></name></expr></argument>)<pos:position pos:line="150" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="150" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="151" pos:column="14"/></block></then></if>
        }<pos:position pos:line="152" pos:column="10"/></block></then></if></elseif> <else pos:line="152" pos:column="11">else <block pos:line="152" pos:column="16">{
            <expr_stmt><expr><call><name pos:line="153" pos:column="13">exit_error<pos:position pos:line="153" pos:column="23"/></name><argument_list pos:line="153" pos:column="23">(<argument><expr><name pos:line="153" pos:column="24">rv<pos:position pos:line="153" pos:column="26"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="153" pos:column="28">"apr_proc_fork"<pos:position pos:line="153" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="45"/></expr_stmt>
        }<pos:position pos:line="154" pos:column="10"/></block></else></if>
    }<pos:position pos:line="155" pos:column="6"/></block></while>

<cpp:endif pos:line="157" pos:column="1">#<cpp:directive pos:line="157" pos:column="2">endif<pos:position pos:line="157" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="159" pos:column="5">return <expr><name pos:line="159" pos:column="12">EXIT_SUCCESS<pos:position pos:line="159" pos:column="24"/></name></expr>;<pos:position pos:line="159" pos:column="25"/></return>
}<pos:position pos:line="160" pos:column="2"/></block></function></unit>
