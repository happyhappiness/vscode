<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1061_httpd-2.0.55.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">int<pos:position pos:line="1" pos:column="11"/></name></type> <name pos:line="1" pos:column="12">best_match<pos:position pos:line="1" pos:column="22"/></name><parameter_list pos:line="1" pos:column="22">(<parameter><decl><type><name pos:line="1" pos:column="23">negotiation_state<pos:position pos:line="1" pos:column="40"/></name> <modifier pos:line="1" pos:column="41">*<pos:position pos:line="1" pos:column="42"/></modifier></type><name pos:line="1" pos:column="42">neg<pos:position pos:line="1" pos:column="45"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="47">var_rec<pos:position pos:line="1" pos:column="54"/></name> <modifier pos:line="1" pos:column="55">*<pos:position pos:line="1" pos:column="56"/></modifier><modifier pos:line="1" pos:column="56">*<pos:position pos:line="1" pos:column="57"/></modifier></type><name pos:line="1" pos:column="57">pbest<pos:position pos:line="1" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="63"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">int<pos:position pos:line="3" pos:column="8"/></name></type> <name pos:line="3" pos:column="9">j<pos:position pos:line="3" pos:column="10"/></name></decl>;<pos:position pos:line="3" pos:column="11"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">var_rec<pos:position pos:line="4" pos:column="12"/></name> <modifier pos:line="4" pos:column="13">*<pos:position pos:line="4" pos:column="14"/></modifier></type><name pos:line="4" pos:column="14">best<pos:position pos:line="4" pos:column="18"/></name></decl>;<pos:position pos:line="4" pos:column="19"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">float<pos:position pos:line="5" pos:column="10"/></name></type> <name pos:line="5" pos:column="11">bestq<pos:position pos:line="5" pos:column="16"/></name> <init pos:line="5" pos:column="17">= <expr><literal type="number" pos:line="5" pos:column="19">0.0f<pos:position pos:line="5" pos:column="23"/></literal></expr></init></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name><name pos:line="6" pos:column="5">enum<pos:position pos:line="6" pos:column="9"/></name> <name pos:line="6" pos:column="10">algorithm_results<pos:position pos:line="6" pos:column="27"/></name></name></type> <name pos:line="6" pos:column="28">algorithm_result<pos:position pos:line="6" pos:column="44"/></name></decl>;<pos:position pos:line="6" pos:column="45"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="8" pos:column="5">var_rec<pos:position pos:line="8" pos:column="12"/></name> <modifier pos:line="8" pos:column="13">*<pos:position pos:line="8" pos:column="14"/></modifier></type><name pos:line="8" pos:column="14">avail_recs<pos:position pos:line="8" pos:column="24"/></name> <init pos:line="8" pos:column="25">= <expr><operator pos:line="8" pos:column="27">(<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">var_rec<pos:position pos:line="8" pos:column="35"/></name> <operator pos:line="8" pos:column="36">*<pos:position pos:line="8" pos:column="37"/></operator><operator pos:line="8" pos:column="37">)<pos:position pos:line="8" pos:column="38"/></operator> <name><name pos:line="8" pos:column="39">neg<pos:position pos:line="8" pos:column="42"/></name><operator pos:line="8" pos:column="42">-&gt;<pos:position pos:line="8" pos:column="47"/></operator><name pos:line="8" pos:column="44">avail_vars<pos:position pos:line="8" pos:column="54"/></name><operator pos:line="8" pos:column="54">-&gt;<pos:position pos:line="8" pos:column="59"/></operator><name pos:line="8" pos:column="56">elts<pos:position pos:line="8" pos:column="60"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="61"/></decl_stmt>

    <decl_stmt><decl><type><specifier pos:line="10" pos:column="5">const<pos:position pos:line="10" pos:column="10"/></specifier> <name pos:line="10" pos:column="11">char<pos:position pos:line="10" pos:column="15"/></name> <modifier pos:line="10" pos:column="16">*<pos:position pos:line="10" pos:column="17"/></modifier></type><name pos:line="10" pos:column="17">preferred_language<pos:position pos:line="10" pos:column="35"/></name> <init pos:line="10" pos:column="36">= <expr><call><name pos:line="10" pos:column="38">apr_table_get<pos:position pos:line="10" pos:column="51"/></name><argument_list pos:line="10" pos:column="51">(<argument><expr><name><name pos:line="10" pos:column="52">neg<pos:position pos:line="10" pos:column="55"/></name><operator pos:line="10" pos:column="55">-&gt;<pos:position pos:line="10" pos:column="60"/></operator><name pos:line="10" pos:column="57">r<pos:position pos:line="10" pos:column="58"/></name><operator pos:line="10" pos:column="58">-&gt;<pos:position pos:line="10" pos:column="63"/></operator><name pos:line="10" pos:column="60">subprocess_env<pos:position pos:line="10" pos:column="74"/></name></name></expr></argument>,
                                                   <argument><expr><literal type="string" pos:line="11" pos:column="52">"prefer-language"<pos:position pos:line="11" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="11" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="11" pos:column="71"/></decl_stmt>

    <expr_stmt><expr><call><name pos:line="13" pos:column="5">set_default_lang_quality<pos:position pos:line="13" pos:column="29"/></name><argument_list pos:line="13" pos:column="29">(<argument><expr><name pos:line="13" pos:column="30">neg<pos:position pos:line="13" pos:column="33"/></name></expr></argument>)<pos:position pos:line="13" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="13" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="15" pos:column="5">/*
     * Find the 'best' variant 
     * We run the loop possibly twice: if "prefer-language"
     * environment variable is set but we did not find an appropriate
     * best variant. In that case forget the preferred language and
     * negotiate over all variants.
     */</comment>

    <do pos:line="23" pos:column="5">do <block pos:line="23" pos:column="8">{
        <expr_stmt><expr><name pos:line="24" pos:column="9">best<pos:position pos:line="24" pos:column="13"/></name> <operator pos:line="24" pos:column="14">=<pos:position pos:line="24" pos:column="15"/></operator> <name pos:line="24" pos:column="16">NULL<pos:position pos:line="24" pos:column="20"/></name></expr>;<pos:position pos:line="24" pos:column="21"/></expr_stmt>

        <for pos:line="26" pos:column="9">for <control pos:line="26" pos:column="13">(<init><expr><name pos:line="26" pos:column="14">j<pos:position pos:line="26" pos:column="15"/></name> <operator pos:line="26" pos:column="16">=<pos:position pos:line="26" pos:column="17"/></operator> <literal type="number" pos:line="26" pos:column="18">0<pos:position pos:line="26" pos:column="19"/></literal></expr>;<pos:position pos:line="26" pos:column="20"/></init> <condition><expr><name pos:line="26" pos:column="21">j<pos:position pos:line="26" pos:column="22"/></name> <operator pos:line="26" pos:column="23">&lt;<pos:position pos:line="26" pos:column="27"/></operator> <name><name pos:line="26" pos:column="25">neg<pos:position pos:line="26" pos:column="28"/></name><operator pos:line="26" pos:column="28">-&gt;<pos:position pos:line="26" pos:column="33"/></operator><name pos:line="26" pos:column="30">avail_vars<pos:position pos:line="26" pos:column="40"/></name><operator pos:line="26" pos:column="40">-&gt;<pos:position pos:line="26" pos:column="45"/></operator><name pos:line="26" pos:column="42">nelts<pos:position pos:line="26" pos:column="47"/></name></name></expr>;<pos:position pos:line="26" pos:column="48"/></condition> <incr><expr><operator pos:line="26" pos:column="49">++<pos:position pos:line="26" pos:column="51"/></operator><name pos:line="26" pos:column="51">j<pos:position pos:line="26" pos:column="52"/></name></expr></incr>)<pos:position pos:line="26" pos:column="53"/></control> <block pos:line="26" pos:column="54">{
            <decl_stmt><decl><type><name pos:line="27" pos:column="13">var_rec<pos:position pos:line="27" pos:column="20"/></name> <modifier pos:line="27" pos:column="21">*<pos:position pos:line="27" pos:column="22"/></modifier></type><name pos:line="27" pos:column="22">variant<pos:position pos:line="27" pos:column="29"/></name> <init pos:line="27" pos:column="30">= <expr><operator pos:line="27" pos:column="32">&amp;<pos:position pos:line="27" pos:column="37"/></operator><name><name pos:line="27" pos:column="33">avail_recs<pos:position pos:line="27" pos:column="43"/></name><index pos:line="27" pos:column="43">[<expr><name pos:line="27" pos:column="44">j<pos:position pos:line="27" pos:column="45"/></name></expr>]<pos:position pos:line="27" pos:column="46"/></index></name></expr></init></decl>;<pos:position pos:line="27" pos:column="47"/></decl_stmt>

            <comment type="block" pos:line="29" pos:column="13">/* if a language is preferred, but the current variant
             * is not in that language, then drop it for now
             */</comment>
            <if pos:line="32" pos:column="13">if <condition pos:line="32" pos:column="16">(   <expr><name pos:line="32" pos:column="20">preferred_language<pos:position pos:line="32" pos:column="38"/></name>
                <operator pos:line="33" pos:column="17">&amp;&amp;<pos:position pos:line="33" pos:column="27"/></operator> <operator pos:line="33" pos:column="20">!<pos:position pos:line="33" pos:column="21"/></operator><call><name pos:line="33" pos:column="21">variant_has_language<pos:position pos:line="33" pos:column="41"/></name><argument_list pos:line="33" pos:column="41">(<argument><expr><name pos:line="33" pos:column="42">variant<pos:position pos:line="33" pos:column="49"/></name></expr></argument>, <argument><expr><name pos:line="33" pos:column="51">preferred_language<pos:position pos:line="33" pos:column="69"/></name></expr></argument>)<pos:position pos:line="33" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="33" pos:column="71"/></condition><then pos:line="33" pos:column="71"> <block pos:line="33" pos:column="72">{
                <continue pos:line="34" pos:column="17">continue;<pos:position pos:line="34" pos:column="26"/></continue>
            }<pos:position pos:line="35" pos:column="14"/></block></then></if>

            <comment type="block" pos:line="37" pos:column="13">/* Find all the relevant 'quality' values from the
             * Accept... headers, and store in the variant.  This also
             * prepares for sending an Alternates header etc so we need to
             * do it even if we do not actually plan to find a best
             * variant.  
             */</comment>
            <expr_stmt><expr><call><name pos:line="43" pos:column="13">set_accept_quality<pos:position pos:line="43" pos:column="31"/></name><argument_list pos:line="43" pos:column="31">(<argument><expr><name pos:line="43" pos:column="32">neg<pos:position pos:line="43" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="43" pos:column="37">variant<pos:position pos:line="43" pos:column="44"/></name></expr></argument>)<pos:position pos:line="43" pos:column="45"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="46"/></expr_stmt>
            <comment type="block" pos:line="44" pos:column="13">/* accept the preferred language, even when it's not listed within
             * the Accept-Language header
             */</comment>
            <if pos:line="47" pos:column="13">if <condition pos:line="47" pos:column="16">(<expr><name pos:line="47" pos:column="17">preferred_language<pos:position pos:line="47" pos:column="35"/></name></expr>)<pos:position pos:line="47" pos:column="36"/></condition><then pos:line="47" pos:column="36"> <block pos:line="47" pos:column="37">{
                <expr_stmt><expr><name><name pos:line="48" pos:column="17">variant<pos:position pos:line="48" pos:column="24"/></name><operator pos:line="48" pos:column="24">-&gt;<pos:position pos:line="48" pos:column="29"/></operator><name pos:line="48" pos:column="26">lang_quality<pos:position pos:line="48" pos:column="38"/></name></name> <operator pos:line="48" pos:column="39">=<pos:position pos:line="48" pos:column="40"/></operator> <literal type="number" pos:line="48" pos:column="41">1.0f<pos:position pos:line="48" pos:column="45"/></literal></expr>;<pos:position pos:line="48" pos:column="46"/></expr_stmt>
                <expr_stmt><expr><name><name pos:line="49" pos:column="17">variant<pos:position pos:line="49" pos:column="24"/></name><operator pos:line="49" pos:column="24">-&gt;<pos:position pos:line="49" pos:column="29"/></operator><name pos:line="49" pos:column="26">definite<pos:position pos:line="49" pos:column="34"/></name></name> <operator pos:line="49" pos:column="35">=<pos:position pos:line="49" pos:column="36"/></operator> <literal type="number" pos:line="49" pos:column="37">1<pos:position pos:line="49" pos:column="38"/></literal></expr>;<pos:position pos:line="49" pos:column="39"/></expr_stmt>
            }<pos:position pos:line="50" pos:column="14"/></block></then>
            <else pos:line="51" pos:column="13">else <block pos:line="51" pos:column="18">{
                <expr_stmt><expr><call><name pos:line="52" pos:column="17">set_language_quality<pos:position pos:line="52" pos:column="37"/></name><argument_list pos:line="52" pos:column="37">(<argument><expr><name pos:line="52" pos:column="38">neg<pos:position pos:line="52" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="52" pos:column="43">variant<pos:position pos:line="52" pos:column="50"/></name></expr></argument>)<pos:position pos:line="52" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="52" pos:column="52"/></expr_stmt>
            }<pos:position pos:line="53" pos:column="14"/></block></else></if>
            <expr_stmt><expr><call><name pos:line="54" pos:column="13">set_encoding_quality<pos:position pos:line="54" pos:column="33"/></name><argument_list pos:line="54" pos:column="33">(<argument><expr><name pos:line="54" pos:column="34">neg<pos:position pos:line="54" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="54" pos:column="39">variant<pos:position pos:line="54" pos:column="46"/></name></expr></argument>)<pos:position pos:line="54" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="55" pos:column="13">set_charset_quality<pos:position pos:line="55" pos:column="32"/></name><argument_list pos:line="55" pos:column="32">(<argument><expr><name pos:line="55" pos:column="33">neg<pos:position pos:line="55" pos:column="36"/></name></expr></argument>, <argument><expr><name pos:line="55" pos:column="38">variant<pos:position pos:line="55" pos:column="45"/></name></expr></argument>)<pos:position pos:line="55" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="55" pos:column="47"/></expr_stmt>

            <comment type="block" pos:line="57" pos:column="13">/* Only do variant selection if we may actually choose a
             * variant for the client 
             */</comment>
            <if pos:line="60" pos:column="13">if <condition pos:line="60" pos:column="16">(<expr><name><name pos:line="60" pos:column="17">neg<pos:position pos:line="60" pos:column="20"/></name><operator pos:line="60" pos:column="20">-&gt;<pos:position pos:line="60" pos:column="25"/></operator><name pos:line="60" pos:column="22">may_choose<pos:position pos:line="60" pos:column="32"/></name></name></expr>)<pos:position pos:line="60" pos:column="33"/></condition><then pos:line="60" pos:column="33"> <block pos:line="60" pos:column="34">{

                <comment type="block" pos:line="62" pos:column="17">/* Now find out if this variant is better than the current
                 * best, either using the RVSA/1.0 algorithm, or Apache's
                 * internal server-driven algorithm. Presumably other
                 * server-driven algorithms are possible, and could be
                 * implemented here.
                 */</comment>
     
                <if pos:line="69" pos:column="17">if <condition pos:line="69" pos:column="20">(<expr><name><name pos:line="69" pos:column="21">neg<pos:position pos:line="69" pos:column="24"/></name><operator pos:line="69" pos:column="24">-&gt;<pos:position pos:line="69" pos:column="29"/></operator><name pos:line="69" pos:column="26">use_rvsa<pos:position pos:line="69" pos:column="34"/></name></name></expr>)<pos:position pos:line="69" pos:column="35"/></condition><then pos:line="69" pos:column="35"> <block pos:line="69" pos:column="36">{
                    <if pos:line="70" pos:column="21">if <condition pos:line="70" pos:column="24">(<expr><call><name pos:line="70" pos:column="25">is_variant_better_rvsa<pos:position pos:line="70" pos:column="47"/></name><argument_list pos:line="70" pos:column="47">(<argument><expr><name pos:line="70" pos:column="48">neg<pos:position pos:line="70" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="53">variant<pos:position pos:line="70" pos:column="60"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="62">best<pos:position pos:line="70" pos:column="66"/></name></expr></argument>, <argument><expr><operator pos:line="70" pos:column="68">&amp;<pos:position pos:line="70" pos:column="73"/></operator><name pos:line="70" pos:column="69">bestq<pos:position pos:line="70" pos:column="74"/></name></expr></argument>)<pos:position pos:line="70" pos:column="75"/></argument_list></call></expr>)<pos:position pos:line="70" pos:column="76"/></condition><then pos:line="70" pos:column="76"> <block pos:line="70" pos:column="77">{
                        <expr_stmt><expr><name pos:line="71" pos:column="25">best<pos:position pos:line="71" pos:column="29"/></name> <operator pos:line="71" pos:column="30">=<pos:position pos:line="71" pos:column="31"/></operator> <name pos:line="71" pos:column="32">variant<pos:position pos:line="71" pos:column="39"/></name></expr>;<pos:position pos:line="71" pos:column="40"/></expr_stmt>
                    }<pos:position pos:line="72" pos:column="22"/></block></then></if>
                }<pos:position pos:line="73" pos:column="18"/></block></then>
                <else pos:line="74" pos:column="17">else <block pos:line="74" pos:column="22">{
                    <if pos:line="75" pos:column="21">if <condition pos:line="75" pos:column="24">(<expr><call><name pos:line="75" pos:column="25">is_variant_better<pos:position pos:line="75" pos:column="42"/></name><argument_list pos:line="75" pos:column="42">(<argument><expr><name pos:line="75" pos:column="43">neg<pos:position pos:line="75" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="48">variant<pos:position pos:line="75" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="57">best<pos:position pos:line="75" pos:column="61"/></name></expr></argument>, <argument><expr><operator pos:line="75" pos:column="63">&amp;<pos:position pos:line="75" pos:column="68"/></operator><name pos:line="75" pos:column="64">bestq<pos:position pos:line="75" pos:column="69"/></name></expr></argument>)<pos:position pos:line="75" pos:column="70"/></argument_list></call></expr>)<pos:position pos:line="75" pos:column="71"/></condition><then pos:line="75" pos:column="71"> <block pos:line="75" pos:column="72">{
                        <expr_stmt><expr><name pos:line="76" pos:column="25">best<pos:position pos:line="76" pos:column="29"/></name> <operator pos:line="76" pos:column="30">=<pos:position pos:line="76" pos:column="31"/></operator> <name pos:line="76" pos:column="32">variant<pos:position pos:line="76" pos:column="39"/></name></expr>;<pos:position pos:line="76" pos:column="40"/></expr_stmt>
                    }<pos:position pos:line="77" pos:column="22"/></block></then></if>
                }<pos:position pos:line="78" pos:column="18"/></block></else></if>
            }<pos:position pos:line="79" pos:column="14"/></block></then></if>
        }<pos:position pos:line="80" pos:column="10"/></block></for>

        <comment type="block" pos:line="82" pos:column="9">/* We now either have a best variant, or no best variant */</comment>

        <if pos:line="84" pos:column="9">if <condition pos:line="84" pos:column="12">(<expr><name><name pos:line="84" pos:column="13">neg<pos:position pos:line="84" pos:column="16"/></name><operator pos:line="84" pos:column="16">-&gt;<pos:position pos:line="84" pos:column="21"/></operator><name pos:line="84" pos:column="18">use_rvsa<pos:position pos:line="84" pos:column="26"/></name></name></expr>)<pos:position pos:line="84" pos:column="27"/></condition><then pos:line="84" pos:column="27">    <block pos:line="84" pos:column="31">{
            <comment type="block" pos:line="85" pos:column="13">/* calculate result for RVSA/1.0 algorithm:
             * only a choice response if the best variant has q&gt;0
             * and is definite
             */</comment>
            <expr_stmt><expr><name pos:line="89" pos:column="13">algorithm_result<pos:position pos:line="89" pos:column="29"/></name> <operator pos:line="89" pos:column="30">=<pos:position pos:line="89" pos:column="31"/></operator> <ternary><condition><expr><operator pos:line="89" pos:column="32">(<pos:position pos:line="89" pos:column="33"/></operator><name pos:line="89" pos:column="33">best<pos:position pos:line="89" pos:column="37"/></name> <operator pos:line="89" pos:column="38">&amp;&amp;<pos:position pos:line="89" pos:column="48"/></operator> <name><name pos:line="89" pos:column="41">best<pos:position pos:line="89" pos:column="45"/></name><operator pos:line="89" pos:column="45">-&gt;<pos:position pos:line="89" pos:column="50"/></operator><name pos:line="89" pos:column="47">definite<pos:position pos:line="89" pos:column="55"/></name></name><operator pos:line="89" pos:column="55">)<pos:position pos:line="89" pos:column="56"/></operator> <operator pos:line="89" pos:column="57">&amp;&amp;<pos:position pos:line="89" pos:column="67"/></operator> <operator pos:line="89" pos:column="60">(<pos:position pos:line="89" pos:column="61"/></operator><name pos:line="89" pos:column="61">bestq<pos:position pos:line="89" pos:column="66"/></name> <operator pos:line="89" pos:column="67">&gt;<pos:position pos:line="89" pos:column="71"/></operator> <literal type="number" pos:line="89" pos:column="69">0<pos:position pos:line="89" pos:column="70"/></literal><operator pos:line="89" pos:column="70">)<pos:position pos:line="89" pos:column="71"/></operator></expr> ?<pos:position pos:line="89" pos:column="73"/></condition><then pos:line="89" pos:column="73">
                                <expr><name pos:line="90" pos:column="33">alg_choice<pos:position pos:line="90" pos:column="43"/></name></expr> <pos:position pos:line="90" pos:column="44"/></then><else pos:line="90" pos:column="44">: <expr><name pos:line="90" pos:column="46">alg_list<pos:position pos:line="90" pos:column="54"/></name></expr></else></ternary></expr>;<pos:position pos:line="90" pos:column="55"/></expr_stmt>
        }<pos:position pos:line="91" pos:column="10"/></block></then>
        <else pos:line="92" pos:column="9">else <block pos:line="92" pos:column="14">{
            <comment type="block" pos:line="93" pos:column="13">/* calculate result for Apache negotiation algorithm */</comment>
            <expr_stmt><expr><name pos:line="94" pos:column="13">algorithm_result<pos:position pos:line="94" pos:column="29"/></name> <operator pos:line="94" pos:column="30">=<pos:position pos:line="94" pos:column="31"/></operator> <ternary><condition><expr><name pos:line="94" pos:column="32">bestq<pos:position pos:line="94" pos:column="37"/></name> <operator pos:line="94" pos:column="38">&gt;<pos:position pos:line="94" pos:column="42"/></operator> <literal type="number" pos:line="94" pos:column="40">0<pos:position pos:line="94" pos:column="41"/></literal></expr> ?<pos:position pos:line="94" pos:column="43"/></condition><then pos:line="94" pos:column="43"> <expr><name pos:line="94" pos:column="44">alg_choice<pos:position pos:line="94" pos:column="54"/></name></expr> <pos:position pos:line="94" pos:column="55"/></then><else pos:line="94" pos:column="55">: <expr><name pos:line="94" pos:column="57">alg_list<pos:position pos:line="94" pos:column="65"/></name></expr></else></ternary></expr>;<pos:position pos:line="94" pos:column="66"/></expr_stmt>        
        }<pos:position pos:line="95" pos:column="10"/></block></else></if>

        <comment type="block" pos:line="97" pos:column="9">/* run the loop again, if the "prefer-language" got no clear result */</comment>
        <if pos:line="98" pos:column="9">if <condition pos:line="98" pos:column="12">(<expr><name pos:line="98" pos:column="13">preferred_language<pos:position pos:line="98" pos:column="31"/></name> <operator pos:line="98" pos:column="32">&amp;&amp;<pos:position pos:line="98" pos:column="42"/></operator> <operator pos:line="98" pos:column="35">(<pos:position pos:line="98" pos:column="36"/></operator><operator pos:line="98" pos:column="36">!<pos:position pos:line="98" pos:column="37"/></operator><name pos:line="98" pos:column="37">best<pos:position pos:line="98" pos:column="41"/></name> <operator pos:line="98" pos:column="42">||<pos:position pos:line="98" pos:column="44"/></operator> <name pos:line="98" pos:column="45">algorithm_result<pos:position pos:line="98" pos:column="61"/></name> <operator pos:line="98" pos:column="62">!=<pos:position pos:line="98" pos:column="64"/></operator> <name pos:line="98" pos:column="65">alg_choice<pos:position pos:line="98" pos:column="75"/></name><operator pos:line="98" pos:column="75">)<pos:position pos:line="98" pos:column="76"/></operator></expr>)<pos:position pos:line="98" pos:column="77"/></condition><then pos:line="98" pos:column="77"> <block pos:line="98" pos:column="78">{
            <expr_stmt><expr><name pos:line="99" pos:column="13">preferred_language<pos:position pos:line="99" pos:column="31"/></name> <operator pos:line="99" pos:column="32">=<pos:position pos:line="99" pos:column="33"/></operator> <name pos:line="99" pos:column="34">NULL<pos:position pos:line="99" pos:column="38"/></name></expr>;<pos:position pos:line="99" pos:column="39"/></expr_stmt>
            <continue pos:line="100" pos:column="13">continue;<pos:position pos:line="100" pos:column="22"/></continue>
        }<pos:position pos:line="101" pos:column="10"/></block></then></if>

        <break pos:line="103" pos:column="9">break;<pos:position pos:line="103" pos:column="15"/></break>
    }<pos:position pos:line="104" pos:column="6"/></block> while <condition pos:line="104" pos:column="13">(<expr><literal type="number" pos:line="104" pos:column="14">1<pos:position pos:line="104" pos:column="15"/></literal></expr>)<pos:position pos:line="104" pos:column="16"/></condition>;<pos:position pos:line="104" pos:column="17"/></do>

    <comment type="block" pos:line="106" pos:column="5">/* Returning a choice response with a non-neighboring variant is a
     * protocol security error in TCN (see rfc2295).  We do *not*
     * verify here that the variant and URI are neighbors, even though
     * we may return alg_choice.  We depend on the environment (the
     * caller) to only declare the resource transparently negotiable if
     * all variants are neighbors.
     */</comment>
    <expr_stmt><expr><operator pos:line="113" pos:column="5">*<pos:position pos:line="113" pos:column="6"/></operator><name pos:line="113" pos:column="6">pbest<pos:position pos:line="113" pos:column="11"/></name> <operator pos:line="113" pos:column="12">=<pos:position pos:line="113" pos:column="13"/></operator> <macro><name pos:line="113" pos:column="14">be<pos:position pos:line="113" pos:column="16"/></name></macro></expr></expr_stmt></block></function></unit>
