<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3579_httpd-2.2.27.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">proc_mutex_posix_create<pos:position pos:line="1" pos:column="44"/></name><parameter_list pos:line="1" pos:column="44">(<parameter><decl><type><name pos:line="1" pos:column="45">apr_proc_mutex_t<pos:position pos:line="1" pos:column="61"/></name> <modifier pos:line="1" pos:column="62">*<pos:position pos:line="1" pos:column="63"/></modifier></type><name pos:line="1" pos:column="63">new_mutex<pos:position pos:line="1" pos:column="72"/></name></decl></parameter>,
                                            <parameter><decl><type><specifier pos:line="2" pos:column="45">const<pos:position pos:line="2" pos:column="50"/></specifier> <name pos:line="2" pos:column="51">char<pos:position pos:line="2" pos:column="55"/></name> <modifier pos:line="2" pos:column="56">*<pos:position pos:line="2" pos:column="57"/></modifier></type><name pos:line="2" pos:column="57">fname<pos:position pos:line="2" pos:column="62"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="63"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <cpp:define pos:line="4" pos:column="5">#<cpp:directive pos:line="4" pos:column="6">define<pos:position pos:line="4" pos:column="12"/></cpp:directive> <cpp:macro><name pos:line="4" pos:column="13">APR_POSIXSEM_NAME_MIN<pos:position pos:line="4" pos:column="34"/></name></cpp:macro> <cpp:value pos:line="4" pos:column="35">13<pos:position pos:line="4" pos:column="37"/></cpp:value></cpp:define>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">sem_t<pos:position pos:line="5" pos:column="10"/></name> <modifier pos:line="5" pos:column="11">*<pos:position pos:line="5" pos:column="12"/></modifier></type><name pos:line="5" pos:column="12">psem<pos:position pos:line="5" pos:column="16"/></name></decl>;<pos:position pos:line="5" pos:column="17"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name></type> <name><name pos:line="6" pos:column="10">semname<pos:position pos:line="6" pos:column="17"/></name><index pos:line="6" pos:column="17">[<expr><literal type="number" pos:line="6" pos:column="18">32<pos:position pos:line="6" pos:column="20"/></literal></expr>]<pos:position pos:line="6" pos:column="21"/></index></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>
    
    <expr_stmt><expr><name><name pos:line="8" pos:column="5">new_mutex<pos:position pos:line="8" pos:column="14"/></name><operator pos:line="8" pos:column="14">-&gt;<pos:position pos:line="8" pos:column="19"/></operator><name pos:line="8" pos:column="16">interproc<pos:position pos:line="8" pos:column="25"/></name></name> <operator pos:line="8" pos:column="26">=<pos:position pos:line="8" pos:column="27"/></operator> <call><name pos:line="8" pos:column="28">apr_palloc<pos:position pos:line="8" pos:column="38"/></name><argument_list pos:line="8" pos:column="38">(<argument><expr><name><name pos:line="8" pos:column="39">new_mutex<pos:position pos:line="8" pos:column="48"/></name><operator pos:line="8" pos:column="48">-&gt;<pos:position pos:line="8" pos:column="53"/></operator><name pos:line="8" pos:column="50">pool<pos:position pos:line="8" pos:column="54"/></name></name></expr></argument>,
                                      <argument><expr><sizeof pos:line="9" pos:column="39">sizeof<argument_list pos:line="9" pos:column="45">(<argument><expr><operator pos:line="9" pos:column="46">*<pos:position pos:line="9" pos:column="47"/></operator><name><name pos:line="9" pos:column="47">new_mutex<pos:position pos:line="9" pos:column="56"/></name><operator pos:line="9" pos:column="56">-&gt;<pos:position pos:line="9" pos:column="61"/></operator><name pos:line="9" pos:column="58">interproc<pos:position pos:line="9" pos:column="67"/></name></name></expr></argument>)<pos:position pos:line="9" pos:column="68"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="9" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="70"/></expr_stmt>
    <comment type="block" pos:line="10" pos:column="5">/*
     * This bogusness is to follow what appears to be the
     * lowest common denominator in Posix semaphore naming:
     *   - start with '/'
     *   - be at most 14 chars
     *   - be unique and not match anything on the filesystem
     *
     * Because of this, we use fname to generate a (unique) hash
     * and use that as the name of the semaphore. If no filename was
     * given, we create one based on the time. We tuck the name
     * away, since it might be useful for debugging. We use 2 hashing
     * functions to try to avoid collisions.
     *
     * To  make this as robust as possible, we initially try something
     * larger (and hopefully more unique) and gracefully fail down to the
     * LCD above.
     *
     * NOTE: Darwin (Mac OS X) seems to be the most restrictive
     * implementation. Versions previous to Darwin 6.2 had the 14
     * char limit, but later rev's allow up to 31 characters.
     *
     */</comment>
    <if pos:line="32" pos:column="5">if <condition pos:line="32" pos:column="8">(<expr><name pos:line="32" pos:column="9">fname<pos:position pos:line="32" pos:column="14"/></name></expr>)<pos:position pos:line="32" pos:column="15"/></condition><then pos:line="32" pos:column="15"> <block pos:line="32" pos:column="16">{
        <decl_stmt><decl><type><name pos:line="33" pos:column="9">apr_ssize_t<pos:position pos:line="33" pos:column="20"/></name></type> <name pos:line="33" pos:column="21">flen<pos:position pos:line="33" pos:column="25"/></name> <init pos:line="33" pos:column="26">= <expr><call><name pos:line="33" pos:column="28">strlen<pos:position pos:line="33" pos:column="34"/></name><argument_list pos:line="33" pos:column="34">(<argument><expr><name pos:line="33" pos:column="35">fname<pos:position pos:line="33" pos:column="40"/></name></expr></argument>)<pos:position pos:line="33" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="33" pos:column="42"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="34" pos:column="9">char<pos:position pos:line="34" pos:column="13"/></name> <modifier pos:line="34" pos:column="14">*<pos:position pos:line="34" pos:column="15"/></modifier></type><name pos:line="34" pos:column="15">p<pos:position pos:line="34" pos:column="16"/></name> <init pos:line="34" pos:column="17">= <expr><call><name pos:line="34" pos:column="19">apr_pstrndup<pos:position pos:line="34" pos:column="31"/></name><argument_list pos:line="34" pos:column="31">(<argument><expr><name><name pos:line="34" pos:column="32">new_mutex<pos:position pos:line="34" pos:column="41"/></name><operator pos:line="34" pos:column="41">-&gt;<pos:position pos:line="34" pos:column="46"/></operator><name pos:line="34" pos:column="43">pool<pos:position pos:line="34" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="34" pos:column="49">fname<pos:position pos:line="34" pos:column="54"/></name></expr></argument>, <argument><expr><call><name pos:line="34" pos:column="56">strlen<pos:position pos:line="34" pos:column="62"/></name><argument_list pos:line="34" pos:column="62">(<argument><expr><name pos:line="34" pos:column="63">fname<pos:position pos:line="34" pos:column="68"/></name></expr></argument>)<pos:position pos:line="34" pos:column="69"/></argument_list></call></expr></argument>)<pos:position pos:line="34" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="34" pos:column="71"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="35" pos:column="9">unsigned<pos:position pos:line="35" pos:column="17"/></name> <name pos:line="35" pos:column="18">int<pos:position pos:line="35" pos:column="21"/></name></type> <name pos:line="35" pos:column="22">h1<pos:position pos:line="35" pos:column="24"/></name></decl>, <decl><type ref="prev"/><name pos:line="35" pos:column="26">h2<pos:position pos:line="35" pos:column="28"/></name></decl>;<pos:position pos:line="35" pos:column="29"/></decl_stmt>
        <expr_stmt><expr><name pos:line="36" pos:column="9">h1<pos:position pos:line="36" pos:column="11"/></name> <operator pos:line="36" pos:column="12">=<pos:position pos:line="36" pos:column="13"/></operator> <call><name pos:line="36" pos:column="14">apr_hashfunc_default<pos:position pos:line="36" pos:column="34"/></name><argument_list pos:line="36" pos:column="34">(<argument><expr><operator pos:line="36" pos:column="35">(<pos:position pos:line="36" pos:column="36"/></operator><specifier pos:line="36" pos:column="36">const<pos:position pos:line="36" pos:column="41"/></specifier> <name pos:line="36" pos:column="42">char<pos:position pos:line="36" pos:column="46"/></name> <operator pos:line="36" pos:column="47">*<pos:position pos:line="36" pos:column="48"/></operator><operator pos:line="36" pos:column="48">)<pos:position pos:line="36" pos:column="49"/></operator><name pos:line="36" pos:column="49">p<pos:position pos:line="36" pos:column="50"/></name></expr></argument>, <argument><expr><operator pos:line="36" pos:column="52">&amp;<pos:position pos:line="36" pos:column="57"/></operator><name pos:line="36" pos:column="53">flen<pos:position pos:line="36" pos:column="57"/></name></expr></argument>)<pos:position pos:line="36" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="36" pos:column="59"/></expr_stmt>
        <expr_stmt><expr><name pos:line="37" pos:column="9">h2<pos:position pos:line="37" pos:column="11"/></name> <operator pos:line="37" pos:column="12">=<pos:position pos:line="37" pos:column="13"/></operator> <call><name pos:line="37" pos:column="14">rshash<pos:position pos:line="37" pos:column="20"/></name><argument_list pos:line="37" pos:column="20">(<argument><expr><name pos:line="37" pos:column="21">p<pos:position pos:line="37" pos:column="22"/></name></expr></argument>)<pos:position pos:line="37" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="37" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="38" pos:column="9">apr_snprintf<pos:position pos:line="38" pos:column="21"/></name><argument_list pos:line="38" pos:column="21">(<argument><expr><name pos:line="38" pos:column="22">semname<pos:position pos:line="38" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="38" pos:column="31">sizeof<argument_list pos:line="38" pos:column="37">(<argument><expr><name pos:line="38" pos:column="38">semname<pos:position pos:line="38" pos:column="45"/></name></expr></argument>)<pos:position pos:line="38" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="38" pos:column="48">"/ApR.%xH%x"<pos:position pos:line="38" pos:column="60"/></literal></expr></argument>, <argument><expr><name pos:line="38" pos:column="62">h1<pos:position pos:line="38" pos:column="64"/></name></expr></argument>, <argument><expr><name pos:line="38" pos:column="66">h2<pos:position pos:line="38" pos:column="68"/></name></expr></argument>)<pos:position pos:line="38" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="70"/></expr_stmt>
    }<pos:position pos:line="39" pos:column="6"/></block></then> <else pos:line="39" pos:column="7">else <block pos:line="39" pos:column="12">{
        <decl_stmt><decl><type><name pos:line="40" pos:column="9">apr_time_t<pos:position pos:line="40" pos:column="19"/></name></type> <name pos:line="40" pos:column="20">now<pos:position pos:line="40" pos:column="23"/></name></decl>;<pos:position pos:line="40" pos:column="24"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="41" pos:column="9">unsigned<pos:position pos:line="41" pos:column="17"/></name> <name pos:line="41" pos:column="18">long<pos:position pos:line="41" pos:column="22"/></name></type> <name pos:line="41" pos:column="23">sec<pos:position pos:line="41" pos:column="26"/></name></decl>;<pos:position pos:line="41" pos:column="27"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="42" pos:column="9">unsigned<pos:position pos:line="42" pos:column="17"/></name> <name pos:line="42" pos:column="18">long<pos:position pos:line="42" pos:column="22"/></name></type> <name pos:line="42" pos:column="23">usec<pos:position pos:line="42" pos:column="27"/></name></decl>;<pos:position pos:line="42" pos:column="28"/></decl_stmt>
        <expr_stmt><expr><name pos:line="43" pos:column="9">now<pos:position pos:line="43" pos:column="12"/></name> <operator pos:line="43" pos:column="13">=<pos:position pos:line="43" pos:column="14"/></operator> <call><name pos:line="43" pos:column="15">apr_time_now<pos:position pos:line="43" pos:column="27"/></name><argument_list pos:line="43" pos:column="27">()<pos:position pos:line="43" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="43" pos:column="30"/></expr_stmt>
        <expr_stmt><expr><name pos:line="44" pos:column="9">sec<pos:position pos:line="44" pos:column="12"/></name> <operator pos:line="44" pos:column="13">=<pos:position pos:line="44" pos:column="14"/></operator> <call><name pos:line="44" pos:column="15">apr_time_sec<pos:position pos:line="44" pos:column="27"/></name><argument_list pos:line="44" pos:column="27">(<argument><expr><name pos:line="44" pos:column="28">now<pos:position pos:line="44" pos:column="31"/></name></expr></argument>)<pos:position pos:line="44" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="44" pos:column="33"/></expr_stmt>
        <expr_stmt><expr><name pos:line="45" pos:column="9">usec<pos:position pos:line="45" pos:column="13"/></name> <operator pos:line="45" pos:column="14">=<pos:position pos:line="45" pos:column="15"/></operator> <call><name pos:line="45" pos:column="16">apr_time_usec<pos:position pos:line="45" pos:column="29"/></name><argument_list pos:line="45" pos:column="29">(<argument><expr><name pos:line="45" pos:column="30">now<pos:position pos:line="45" pos:column="33"/></name></expr></argument>)<pos:position pos:line="45" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="45" pos:column="35"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="46" pos:column="9">apr_snprintf<pos:position pos:line="46" pos:column="21"/></name><argument_list pos:line="46" pos:column="21">(<argument><expr><name pos:line="46" pos:column="22">semname<pos:position pos:line="46" pos:column="29"/></name></expr></argument>, <argument><expr><sizeof pos:line="46" pos:column="31">sizeof<argument_list pos:line="46" pos:column="37">(<argument><expr><name pos:line="46" pos:column="38">semname<pos:position pos:line="46" pos:column="45"/></name></expr></argument>)<pos:position pos:line="46" pos:column="46"/></argument_list></sizeof></expr></argument>, <argument><expr><literal type="string" pos:line="46" pos:column="48">"/ApR.%lxZ%lx"<pos:position pos:line="46" pos:column="62"/></literal></expr></argument>, <argument><expr><name pos:line="46" pos:column="64">sec<pos:position pos:line="46" pos:column="67"/></name></expr></argument>, <argument><expr><name pos:line="46" pos:column="69">usec<pos:position pos:line="46" pos:column="73"/></name></expr></argument>)<pos:position pos:line="46" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="75"/></expr_stmt>
    }<pos:position pos:line="47" pos:column="6"/></block></else></if>
    <expr_stmt><expr><name pos:line="48" pos:column="5">psem<pos:position pos:line="48" pos:column="9"/></name> <operator pos:line="48" pos:column="10">=<pos:position pos:line="48" pos:column="11"/></operator> <call><name pos:line="48" pos:column="12">sem_open<pos:position pos:line="48" pos:column="20"/></name><argument_list pos:line="48" pos:column="20">(<argument><expr><name pos:line="48" pos:column="21">semname<pos:position pos:line="48" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="48" pos:column="30">O_CREAT<pos:position pos:line="48" pos:column="37"/></name> <operator pos:line="48" pos:column="38">|<pos:position pos:line="48" pos:column="39"/></operator> <name pos:line="48" pos:column="40">O_EXCL<pos:position pos:line="48" pos:column="46"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="48">0644<pos:position pos:line="48" pos:column="52"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="48" pos:column="54">1<pos:position pos:line="48" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="48" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="48" pos:column="57"/></expr_stmt>
    <if pos:line="49" pos:column="5">if <condition pos:line="49" pos:column="8">(<expr><name pos:line="49" pos:column="9">psem<pos:position pos:line="49" pos:column="13"/></name> <operator pos:line="49" pos:column="14">==<pos:position pos:line="49" pos:column="16"/></operator> <operator pos:line="49" pos:column="17">(<pos:position pos:line="49" pos:column="18"/></operator><name pos:line="49" pos:column="18">sem_t<pos:position pos:line="49" pos:column="23"/></name> <operator pos:line="49" pos:column="24">*<pos:position pos:line="49" pos:column="25"/></operator><operator pos:line="49" pos:column="25">)<pos:position pos:line="49" pos:column="26"/></operator><name pos:line="49" pos:column="26">SEM_FAILED<pos:position pos:line="49" pos:column="36"/></name></expr>)<pos:position pos:line="49" pos:column="37"/></condition><then pos:line="49" pos:column="37"> <block pos:line="49" pos:column="38">{
        <if pos:line="50" pos:column="9">if <condition pos:line="50" pos:column="12">(<expr><name pos:line="50" pos:column="13">errno<pos:position pos:line="50" pos:column="18"/></name> <operator pos:line="50" pos:column="19">==<pos:position pos:line="50" pos:column="21"/></operator> <name pos:line="50" pos:column="22">ENAMETOOLONG<pos:position pos:line="50" pos:column="34"/></name></expr>)<pos:position pos:line="50" pos:column="35"/></condition><then pos:line="50" pos:column="35"> <block pos:line="50" pos:column="36">{
            <comment type="block" pos:line="51" pos:column="13">/* Oh well, good try */</comment>
            <expr_stmt><expr><name><name pos:line="52" pos:column="13">semname<pos:position pos:line="52" pos:column="20"/></name><index pos:line="52" pos:column="20">[<expr><name pos:line="52" pos:column="21">APR_POSIXSEM_NAME_MIN<pos:position pos:line="52" pos:column="42"/></name></expr>]<pos:position pos:line="52" pos:column="43"/></index></name> <operator pos:line="52" pos:column="44">=<pos:position pos:line="52" pos:column="45"/></operator> <literal type="char" pos:line="52" pos:column="46">'\0'<pos:position pos:line="52" pos:column="50"/></literal></expr>;<pos:position pos:line="52" pos:column="51"/></expr_stmt>
        }<pos:position pos:line="53" pos:column="10"/></block></then> <else pos:line="53" pos:column="11">else <block pos:line="53" pos:column="16">{
            <return pos:line="54" pos:column="13">return <expr><name pos:line="54" pos:column="20">errno<pos:position pos:line="54" pos:column="25"/></name></expr>;<pos:position pos:line="54" pos:column="26"/></return>
        }<pos:position pos:line="55" pos:column="10"/></block></else></if>
        <expr_stmt><expr><name pos:line="56" pos:column="9">psem<pos:position pos:line="56" pos:column="13"/></name> <operator pos:line="56" pos:column="14">=<pos:position pos:line="56" pos:column="15"/></operator> <call><name pos:line="56" pos:column="16">sem_open<pos:position pos:line="56" pos:column="24"/></name><argument_list pos:line="56" pos:column="24">(<argument><expr><name pos:line="56" pos:column="25">semname<pos:position pos:line="56" pos:column="32"/></name></expr></argument>, <argument><expr><name pos:line="56" pos:column="34">O_CREAT<pos:position pos:line="56" pos:column="41"/></name> <operator pos:line="56" pos:column="42">|<pos:position pos:line="56" pos:column="43"/></operator> <name pos:line="56" pos:column="44">O_EXCL<pos:position pos:line="56" pos:column="50"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="52">0644<pos:position pos:line="56" pos:column="56"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="56" pos:column="58">1<pos:position pos:line="56" pos:column="59"/></literal></expr></argument>)<pos:position pos:line="56" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="56" pos:column="61"/></expr_stmt>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name pos:line="59" pos:column="9">psem<pos:position pos:line="59" pos:column="13"/></name> <operator pos:line="59" pos:column="14">==<pos:position pos:line="59" pos:column="16"/></operator> <operator pos:line="59" pos:column="17">(<pos:position pos:line="59" pos:column="18"/></operator><name pos:line="59" pos:column="18">sem_t<pos:position pos:line="59" pos:column="23"/></name> <operator pos:line="59" pos:column="24">*<pos:position pos:line="59" pos:column="25"/></operator><operator pos:line="59" pos:column="25">)<pos:position pos:line="59" pos:column="26"/></operator><name pos:line="59" pos:column="26">SEM_FAILED<pos:position pos:line="59" pos:column="36"/></name></expr>)<pos:position pos:line="59" pos:column="37"/></condition><then pos:line="59" pos:column="37"> <block pos:line="59" pos:column="38">{
        <return pos:line="60" pos:column="9">return <expr><name pos:line="60" pos:column="16">errno<pos:position pos:line="60" pos:column="21"/></name></expr>;<pos:position pos:line="60" pos:column="22"/></return>
    }<pos:position pos:line="61" pos:column="6"/></block></then></if>
    <comment type="block" pos:line="62" pos:column="5">/* Ahhh. The joys of Posix sems. Predelete it... */</comment>
    <expr_stmt><expr><call><name pos:line="63" pos:column="5">sem_unlink<pos:position pos:line="63" pos:column="15"/></name><argument_list pos:line="63" pos:column="15">(<argument><expr><name pos:line="63" pos:column="16">semname<pos:position pos:line="63" pos:column="23"/></name></expr></argument>)<pos:position pos:line="63" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="63" pos:column="25"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="64" pos:column="5">new_mutex<pos:position pos:line="64" pos:column="14"/></name><operator pos:line="64" pos:column="14">-&gt;<pos:position pos:line="64" pos:column="19"/></operator><name pos:line="64" pos:column="16">psem_interproc<pos:position pos:line="64" pos:column="30"/></name></name> <operator pos:line="64" pos:column="31">=<pos:position pos:line="64" pos:column="32"/></operator> <name pos:line="64" pos:column="33">psem<pos:position pos:line="64" pos:column="37"/></name></expr>;<pos:position pos:line="64" pos:column="38"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="65" pos:column="5">new_mutex<pos:position pos:line="65" pos:column="14"/></name><operator pos:line="65" pos:column="14">-&gt;<pos:position pos:line="65" pos:column="19"/></operator><name pos:line="65" pos:column="16">fname<pos:position pos:line="65" pos:column="21"/></name></name> <operator pos:line="65" pos:column="22">=<pos:position pos:line="65" pos:column="23"/></operator> <call><name pos:line="65" pos:column="24">apr_pstrdup<pos:position pos:line="65" pos:column="35"/></name><argument_list pos:line="65" pos:column="35">(<argument><expr><name><name pos:line="65" pos:column="36">new_mutex<pos:position pos:line="65" pos:column="45"/></name><operator pos:line="65" pos:column="45">-&gt;<pos:position pos:line="65" pos:column="50"/></operator><name pos:line="65" pos:column="47">pool<pos:position pos:line="65" pos:column="51"/></name></name></expr></argument>, <argument><expr><name pos:line="65" pos:column="53">semname<pos:position pos:line="65" pos:column="60"/></name></expr></argument>)<pos:position pos:line="65" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="65" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">apr_pool_cleanup_register<pos:position pos:line="66" pos:column="30"/></name><argument_list pos:line="66" pos:column="30">(<argument><expr><name><name pos:line="66" pos:column="31">new_mutex<pos:position pos:line="66" pos:column="40"/></name><operator pos:line="66" pos:column="40">-&gt;<pos:position pos:line="66" pos:column="45"/></operator><name pos:line="66" pos:column="42">pool<pos:position pos:line="66" pos:column="46"/></name></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="48">(<pos:position pos:line="66" pos:column="49"/></operator><name pos:line="66" pos:column="49">void<pos:position pos:line="66" pos:column="53"/></name> <operator pos:line="66" pos:column="54">*<pos:position pos:line="66" pos:column="55"/></operator><operator pos:line="66" pos:column="55">)<pos:position pos:line="66" pos:column="56"/></operator><name pos:line="66" pos:column="56">new_mutex<pos:position pos:line="66" pos:column="65"/></name></expr></argument>,
                              <argument><expr><name pos:line="67" pos:column="31">apr_proc_mutex_cleanup<pos:position pos:line="67" pos:column="53"/></name></expr></argument>, 
                              <argument><expr><name pos:line="68" pos:column="31">apr_pool_cleanup_null<pos:position pos:line="68" pos:column="52"/></name></expr></argument>)<pos:position pos:line="68" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="68" pos:column="54"/></expr_stmt>
    <return pos:line="69" pos:column="5">return <expr><name pos:line="69" pos:column="12">APR_SUCCESS<pos:position pos:line="69" pos:column="23"/></name></expr>;<pos:position pos:line="69" pos:column="24"/></return>
}<pos:position pos:line="70" pos:column="2"/></block></function></unit>
