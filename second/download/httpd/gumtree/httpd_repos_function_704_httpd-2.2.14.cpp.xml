<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_704_httpd-2.2.14.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">ssl_io_filter_input<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">ap_filter_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">f<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="2" pos:column="41">apr_bucket_brigade<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">bb<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="3" pos:column="41">ap_input_mode_t<pos:position pos:line="3" pos:column="56"/></name></type> <name pos:line="3" pos:column="57">mode<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="4" pos:column="41">apr_read_type_e<pos:position pos:line="4" pos:column="56"/></name></type> <name pos:line="4" pos:column="57">block<pos:position pos:line="4" pos:column="62"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="5" pos:column="41">apr_off_t<pos:position pos:line="5" pos:column="50"/></name></type> <name pos:line="5" pos:column="51">readbytes<pos:position pos:line="5" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="61"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_status_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">status<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">bio_filter_in_ctx_t<pos:position pos:line="8" pos:column="24"/></name> <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">inctx<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><name><name pos:line="8" pos:column="34">f<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">ctx<pos:position pos:line="8" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>

    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_size_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">len<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><sizeof pos:line="10" pos:column="22">sizeof<argument_list pos:line="10" pos:column="28">(<argument><expr><name><name pos:line="10" pos:column="29">inctx<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">buffer<pos:position pos:line="10" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">is_init<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><operator pos:line="11" pos:column="19">(<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">mode<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">==<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="28">AP_MODE_INIT<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">)<pos:position pos:line="11" pos:column="41"/></operator></expr></init></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">f<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">c<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">aborted<pos:position pos:line="13" pos:column="22"/></name></name></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23"> <block pos:line="13" pos:column="24">{
        <comment type="block" pos:line="14" pos:column="9">/* XXX: Ok, if we aborted, we ARE at the EOS.  We also have
         * aborted.  This 'double protection' is probably redundant,
         * but also effective against just about anything.
         */</comment>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">apr_bucket<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">bucket<pos:position pos:line="18" pos:column="27"/></name> <init pos:line="18" pos:column="28">= <expr><call><name pos:line="18" pos:column="30">apr_bucket_eos_create<pos:position pos:line="18" pos:column="51"/></name><argument_list pos:line="18" pos:column="51">(<argument><expr><name><name pos:line="18" pos:column="52">f<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">-&gt;<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="55">c<pos:position pos:line="18" pos:column="56"/></name><operator pos:line="18" pos:column="56">-&gt;<pos:position pos:line="18" pos:column="61"/></operator><name pos:line="18" pos:column="58">bucket_alloc<pos:position pos:line="18" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="72"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">bb<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="37">bucket<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">APR_ECONNABORTED<pos:position pos:line="20" pos:column="32"/></name></expr>;<pos:position pos:line="20" pos:column="33"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name><name pos:line="23" pos:column="10">inctx<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">-&gt;<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="17">ssl<pos:position pos:line="23" pos:column="20"/></name></name></expr>)<pos:position pos:line="23" pos:column="21"/></condition><then pos:line="23" pos:column="21"> <block pos:line="23" pos:column="22">{
        <return pos:line="24" pos:column="9">return <expr><call><name pos:line="24" pos:column="16">ap_get_brigade<pos:position pos:line="24" pos:column="30"/></name><argument_list pos:line="24" pos:column="30">(<argument><expr><name><name pos:line="24" pos:column="31">f<pos:position pos:line="24" pos:column="32"/></name><operator pos:line="24" pos:column="32">-&gt;<pos:position pos:line="24" pos:column="37"/></operator><name pos:line="24" pos:column="34">next<pos:position pos:line="24" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="40">bb<pos:position pos:line="24" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="44">mode<pos:position pos:line="24" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="50">block<pos:position pos:line="24" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="24" pos:column="57">readbytes<pos:position pos:line="24" pos:column="66"/></name></expr></argument>)<pos:position pos:line="24" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="68"/></return>
    }<pos:position pos:line="25" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="27" pos:column="5">/* XXX: we don't currently support anything other than these modes. */</comment>
    <if pos:line="28" pos:column="5">if <condition pos:line="28" pos:column="8">(<expr><name pos:line="28" pos:column="9">mode<pos:position pos:line="28" pos:column="13"/></name> <operator pos:line="28" pos:column="14">!=<pos:position pos:line="28" pos:column="16"/></operator> <name pos:line="28" pos:column="17">AP_MODE_READBYTES<pos:position pos:line="28" pos:column="34"/></name> <operator pos:line="28" pos:column="35">&amp;&amp;<pos:position pos:line="28" pos:column="45"/></operator> <name pos:line="28" pos:column="38">mode<pos:position pos:line="28" pos:column="42"/></name> <operator pos:line="28" pos:column="43">!=<pos:position pos:line="28" pos:column="45"/></operator> <name pos:line="28" pos:column="46">AP_MODE_GETLINE<pos:position pos:line="28" pos:column="61"/></name> <operator pos:line="28" pos:column="62">&amp;&amp;<pos:position pos:line="28" pos:column="72"/></operator>
        <name pos:line="29" pos:column="9">mode<pos:position pos:line="29" pos:column="13"/></name> <operator pos:line="29" pos:column="14">!=<pos:position pos:line="29" pos:column="16"/></operator> <name pos:line="29" pos:column="17">AP_MODE_SPECULATIVE<pos:position pos:line="29" pos:column="36"/></name> <operator pos:line="29" pos:column="37">&amp;&amp;<pos:position pos:line="29" pos:column="47"/></operator> <name pos:line="29" pos:column="40">mode<pos:position pos:line="29" pos:column="44"/></name> <operator pos:line="29" pos:column="45">!=<pos:position pos:line="29" pos:column="47"/></operator> <name pos:line="29" pos:column="48">AP_MODE_INIT<pos:position pos:line="29" pos:column="60"/></name></expr>)<pos:position pos:line="29" pos:column="61"/></condition><then pos:line="29" pos:column="61"> <block pos:line="29" pos:column="62">{
        <return pos:line="30" pos:column="9">return <expr><name pos:line="30" pos:column="16">APR_ENOTIMPL<pos:position pos:line="30" pos:column="28"/></name></expr>;<pos:position pos:line="30" pos:column="29"/></return>
    }<pos:position pos:line="31" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="33" pos:column="5">inctx<pos:position pos:line="33" pos:column="10"/></name><operator pos:line="33" pos:column="10">-&gt;<pos:position pos:line="33" pos:column="15"/></operator><name pos:line="33" pos:column="12">mode<pos:position pos:line="33" pos:column="16"/></name></name> <operator pos:line="33" pos:column="17">=<pos:position pos:line="33" pos:column="18"/></operator> <name pos:line="33" pos:column="19">mode<pos:position pos:line="33" pos:column="23"/></name></expr>;<pos:position pos:line="33" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="34" pos:column="5">inctx<pos:position pos:line="34" pos:column="10"/></name><operator pos:line="34" pos:column="10">-&gt;<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="12">block<pos:position pos:line="34" pos:column="17"/></name></name> <operator pos:line="34" pos:column="18">=<pos:position pos:line="34" pos:column="19"/></operator> <name pos:line="34" pos:column="20">block<pos:position pos:line="34" pos:column="25"/></name></expr>;<pos:position pos:line="34" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="36" pos:column="5">/* XXX: we could actually move ssl_io_filter_connect to an
     * ap_hook_process_connection but would still need to call it for
     * AP_MODE_INIT for protocols that may upgrade the connection
     * rather than have SSLEngine On configured.
     */</comment>
    <if pos:line="41" pos:column="5">if <condition pos:line="41" pos:column="8">(<expr><operator pos:line="41" pos:column="9">(<pos:position pos:line="41" pos:column="10"/></operator><name pos:line="41" pos:column="10">status<pos:position pos:line="41" pos:column="16"/></name> <operator pos:line="41" pos:column="17">=<pos:position pos:line="41" pos:column="18"/></operator> <call><name pos:line="41" pos:column="19">ssl_io_filter_connect<pos:position pos:line="41" pos:column="40"/></name><argument_list pos:line="41" pos:column="40">(<argument><expr><name><name pos:line="41" pos:column="41">inctx<pos:position pos:line="41" pos:column="46"/></name><operator pos:line="41" pos:column="46">-&gt;<pos:position pos:line="41" pos:column="51"/></operator><name pos:line="41" pos:column="48">filter_ctx<pos:position pos:line="41" pos:column="58"/></name></name></expr></argument>)<pos:position pos:line="41" pos:column="59"/></argument_list></call><operator pos:line="41" pos:column="59">)<pos:position pos:line="41" pos:column="60"/></operator> <operator pos:line="41" pos:column="61">!=<pos:position pos:line="41" pos:column="63"/></operator> <name pos:line="41" pos:column="64">APR_SUCCESS<pos:position pos:line="41" pos:column="75"/></name></expr>)<pos:position pos:line="41" pos:column="76"/></condition><then pos:line="41" pos:column="76"> <block pos:line="41" pos:column="77">{
        <return pos:line="42" pos:column="9">return <expr><call><name pos:line="42" pos:column="16">ssl_io_filter_error<pos:position pos:line="42" pos:column="35"/></name><argument_list pos:line="42" pos:column="35">(<argument><expr><name pos:line="42" pos:column="36">f<pos:position pos:line="42" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="39">bb<pos:position pos:line="42" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="42" pos:column="43">status<pos:position pos:line="42" pos:column="49"/></name></expr></argument>)<pos:position pos:line="42" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="51"/></return>
    }<pos:position pos:line="43" pos:column="6"/></block></then></if>

    <if pos:line="45" pos:column="5">if <condition pos:line="45" pos:column="8">(<expr><name pos:line="45" pos:column="9">is_init<pos:position pos:line="45" pos:column="16"/></name></expr>)<pos:position pos:line="45" pos:column="17"/></condition><then pos:line="45" pos:column="17"> <block pos:line="45" pos:column="18">{
        <comment type="block" pos:line="46" pos:column="9">/* protocol module needs to handshake before sending
         * data to client (e.g. NNTP or FTP)
         */</comment>
        <return pos:line="49" pos:column="9">return <expr><name pos:line="49" pos:column="16">APR_SUCCESS<pos:position pos:line="49" pos:column="27"/></name></expr>;<pos:position pos:line="49" pos:column="28"/></return>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name><name pos:line="52" pos:column="9">inctx<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">-&gt;<pos:position pos:line="52" pos:column="19"/></operator><name pos:line="52" pos:column="16">mode<pos:position pos:line="52" pos:column="20"/></name></name> <operator pos:line="52" pos:column="21">==<pos:position pos:line="52" pos:column="23"/></operator> <name pos:line="52" pos:column="24">AP_MODE_READBYTES<pos:position pos:line="52" pos:column="41"/></name> <operator pos:line="52" pos:column="42">||<pos:position pos:line="52" pos:column="44"/></operator>
        <name><name pos:line="53" pos:column="9">inctx<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">-&gt;<pos:position pos:line="53" pos:column="19"/></operator><name pos:line="53" pos:column="16">mode<pos:position pos:line="53" pos:column="20"/></name></name> <operator pos:line="53" pos:column="21">==<pos:position pos:line="53" pos:column="23"/></operator> <name pos:line="53" pos:column="24">AP_MODE_SPECULATIVE<pos:position pos:line="53" pos:column="43"/></name></expr>)<pos:position pos:line="53" pos:column="44"/></condition><then pos:line="53" pos:column="44"> <block pos:line="53" pos:column="45">{
        <comment type="block" pos:line="54" pos:column="9">/* Protected from truncation, readbytes &lt; MAX_SIZE_T
         * FIXME: No, it's *not* protected.  -- jre */</comment>
        <if pos:line="56" pos:column="9">if <condition pos:line="56" pos:column="12">(<expr><name pos:line="56" pos:column="13">readbytes<pos:position pos:line="56" pos:column="22"/></name> <operator pos:line="56" pos:column="23">&lt;<pos:position pos:line="56" pos:column="27"/></operator> <name pos:line="56" pos:column="25">len<pos:position pos:line="56" pos:column="28"/></name></expr>)<pos:position pos:line="56" pos:column="29"/></condition><then pos:line="56" pos:column="29"> <block pos:line="56" pos:column="30">{
            <expr_stmt><expr><name pos:line="57" pos:column="13">len<pos:position pos:line="57" pos:column="16"/></name> <operator pos:line="57" pos:column="17">=<pos:position pos:line="57" pos:column="18"/></operator> <operator pos:line="57" pos:column="19">(<pos:position pos:line="57" pos:column="20"/></operator><name pos:line="57" pos:column="20">apr_size_t<pos:position pos:line="57" pos:column="30"/></name><operator pos:line="57" pos:column="30">)<pos:position pos:line="57" pos:column="31"/></operator><name pos:line="57" pos:column="31">readbytes<pos:position pos:line="57" pos:column="40"/></name></expr>;<pos:position pos:line="57" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="58" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="59" pos:column="9">status<pos:position pos:line="59" pos:column="15"/></name> <operator pos:line="59" pos:column="16">=<pos:position pos:line="59" pos:column="17"/></operator> <call><name pos:line="59" pos:column="18">ssl_io_input_read<pos:position pos:line="59" pos:column="35"/></name><argument_list pos:line="59" pos:column="35">(<argument><expr><name pos:line="59" pos:column="36">inctx<pos:position pos:line="59" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="59" pos:column="43">inctx<pos:position pos:line="59" pos:column="48"/></name><operator pos:line="59" pos:column="48">-&gt;<pos:position pos:line="59" pos:column="53"/></operator><name pos:line="59" pos:column="50">buffer<pos:position pos:line="59" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="59" pos:column="58">&amp;<pos:position pos:line="59" pos:column="63"/></operator><name pos:line="59" pos:column="59">len<pos:position pos:line="59" pos:column="62"/></name></expr></argument>)<pos:position pos:line="59" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="59" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="60" pos:column="6"/></block></then>
    <elseif pos:line="61" pos:column="5">else <if pos:line="61" pos:column="10">if <condition pos:line="61" pos:column="13">(<expr><name><name pos:line="61" pos:column="14">inctx<pos:position pos:line="61" pos:column="19"/></name><operator pos:line="61" pos:column="19">-&gt;<pos:position pos:line="61" pos:column="24"/></operator><name pos:line="61" pos:column="21">mode<pos:position pos:line="61" pos:column="25"/></name></name> <operator pos:line="61" pos:column="26">==<pos:position pos:line="61" pos:column="28"/></operator> <name pos:line="61" pos:column="29">AP_MODE_GETLINE<pos:position pos:line="61" pos:column="44"/></name></expr>)<pos:position pos:line="61" pos:column="45"/></condition><then pos:line="61" pos:column="45"> <block pos:line="61" pos:column="46">{
        <expr_stmt><expr><name pos:line="62" pos:column="9">status<pos:position pos:line="62" pos:column="15"/></name> <operator pos:line="62" pos:column="16">=<pos:position pos:line="62" pos:column="17"/></operator> <call><name pos:line="62" pos:column="18">ssl_io_input_getline<pos:position pos:line="62" pos:column="38"/></name><argument_list pos:line="62" pos:column="38">(<argument><expr><name pos:line="62" pos:column="39">inctx<pos:position pos:line="62" pos:column="44"/></name></expr></argument>, <argument><expr><name><name pos:line="62" pos:column="46">inctx<pos:position pos:line="62" pos:column="51"/></name><operator pos:line="62" pos:column="51">-&gt;<pos:position pos:line="62" pos:column="56"/></operator><name pos:line="62" pos:column="53">buffer<pos:position pos:line="62" pos:column="59"/></name></name></expr></argument>, <argument><expr><operator pos:line="62" pos:column="61">&amp;<pos:position pos:line="62" pos:column="66"/></operator><name pos:line="62" pos:column="62">len<pos:position pos:line="62" pos:column="65"/></name></expr></argument>)<pos:position pos:line="62" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="67"/></expr_stmt>
    }<pos:position pos:line="63" pos:column="6"/></block></then></if></elseif>
    <else pos:line="64" pos:column="5">else <block pos:line="64" pos:column="10">{
        <comment type="block" pos:line="65" pos:column="9">/* We have no idea what you are talking about, so return an error. */</comment>
        <return pos:line="66" pos:column="9">return <expr><name pos:line="66" pos:column="16">APR_ENOTIMPL<pos:position pos:line="66" pos:column="28"/></name></expr>;<pos:position pos:line="66" pos:column="29"/></return>
    }<pos:position pos:line="67" pos:column="6"/></block></else></if>

    <if pos:line="69" pos:column="5">if <condition pos:line="69" pos:column="8">(<expr><name pos:line="69" pos:column="9">status<pos:position pos:line="69" pos:column="15"/></name> <operator pos:line="69" pos:column="16">!=<pos:position pos:line="69" pos:column="18"/></operator> <name pos:line="69" pos:column="19">APR_SUCCESS<pos:position pos:line="69" pos:column="30"/></name></expr>)<pos:position pos:line="69" pos:column="31"/></condition><then pos:line="69" pos:column="31"> <block pos:line="69" pos:column="32">{
        <return pos:line="70" pos:column="9">return <expr><call><name pos:line="70" pos:column="16">ssl_io_filter_error<pos:position pos:line="70" pos:column="35"/></name><argument_list pos:line="70" pos:column="35">(<argument><expr><name pos:line="70" pos:column="36">f<pos:position pos:line="70" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="39">bb<pos:position pos:line="70" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="70" pos:column="43">status<pos:position pos:line="70" pos:column="49"/></name></expr></argument>)<pos:position pos:line="70" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="70" pos:column="51"/></return>
    }<pos:position pos:line="71" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="73" pos:column="5">/* Create a transient bucket out of the decrypted data. */</comment>
    <if pos:line="74" pos:column="5">if <condition pos:line="74" pos:column="8">(<expr><name pos:line="74" pos:column="9">len<pos:position pos:line="74" pos:column="12"/></name> <operator pos:line="74" pos:column="13">&gt;<pos:position pos:line="74" pos:column="17"/></operator> <literal type="number" pos:line="74" pos:column="15">0<pos:position pos:line="74" pos:column="16"/></literal></expr>)<pos:position pos:line="74" pos:column="17"/></condition><then pos:line="74" pos:column="17"> <block pos:line="74" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="75" pos:column="9">apr_bucket<pos:position pos:line="75" pos:column="19"/></name> <modifier pos:line="75" pos:column="20">*<pos:position pos:line="75" pos:column="21"/></modifier></type><name pos:line="75" pos:column="21">bucket<pos:position pos:line="75" pos:column="27"/></name> <init pos:line="75" pos:column="28">=
            <expr><call><name pos:line="76" pos:column="13">apr_bucket_transient_create<pos:position pos:line="76" pos:column="40"/></name><argument_list pos:line="76" pos:column="40">(<argument><expr><name><name pos:line="76" pos:column="41">inctx<pos:position pos:line="76" pos:column="46"/></name><operator pos:line="76" pos:column="46">-&gt;<pos:position pos:line="76" pos:column="51"/></operator><name pos:line="76" pos:column="48">buffer<pos:position pos:line="76" pos:column="54"/></name></name></expr></argument>, <argument><expr><name pos:line="76" pos:column="56">len<pos:position pos:line="76" pos:column="59"/></name></expr></argument>, <argument><expr><name><name pos:line="76" pos:column="61">f<pos:position pos:line="76" pos:column="62"/></name><operator pos:line="76" pos:column="62">-&gt;<pos:position pos:line="76" pos:column="67"/></operator><name pos:line="76" pos:column="64">c<pos:position pos:line="76" pos:column="65"/></name><operator pos:line="76" pos:column="65">-&gt;<pos:position pos:line="76" pos:column="70"/></operator><name pos:line="76" pos:column="67">bucket_alloc<pos:position pos:line="76" pos:column="79"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="76" pos:column="81"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="77" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="77" pos:column="32"/></name><argument_list pos:line="77" pos:column="32">(<argument><expr><name pos:line="77" pos:column="33">bb<pos:position pos:line="77" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="77" pos:column="37">bucket<pos:position pos:line="77" pos:column="43"/></name></expr></argument>)<pos:position pos:line="77" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="77" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="78" pos:column="6"/></block></then></if>

    <return pos:line="80" pos:column="5">return <expr><name pos:line="80" pos:column="12">APR_SUCCESS<pos:position pos:line="80" pos:column="23"/></name></expr>;<pos:position pos:line="80" pos:column="24"/></return>
}<pos:position pos:line="81" pos:column="2"/></block></function></unit>
