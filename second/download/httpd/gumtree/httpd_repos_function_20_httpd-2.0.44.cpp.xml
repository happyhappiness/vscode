<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_20_httpd-2.0.44.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">get_shared_mem<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">apr_size_t<pos:position pos:line="1" pos:column="39"/></name></type> <name pos:line="1" pos:column="40">size<pos:position pos:line="1" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="45"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">void<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">result<pos:position pos:line="3" pos:column="17"/></name></decl>;<pos:position pos:line="3" pos:column="18"/></decl_stmt>

    <comment type="block" pos:line="5" pos:column="5">/* allocate shared memory for the shared_counter */</comment>
    <expr_stmt><expr><name pos:line="6" pos:column="5">result<pos:position pos:line="6" pos:column="11"/></name> <operator pos:line="6" pos:column="12">=<pos:position pos:line="6" pos:column="13"/></operator> <operator pos:line="6" pos:column="14">(<pos:position pos:line="6" pos:column="15"/></operator><name pos:line="6" pos:column="15">unsigned<pos:position pos:line="6" pos:column="23"/></name> <name pos:line="6" pos:column="24">long<pos:position pos:line="6" pos:column="28"/></name> <operator pos:line="6" pos:column="29">*<pos:position pos:line="6" pos:column="30"/></operator><operator pos:line="6" pos:column="30">)<pos:position pos:line="6" pos:column="31"/></operator><call><name pos:line="6" pos:column="31">mmap<pos:position pos:line="6" pos:column="35"/></name> <argument_list pos:line="6" pos:column="36">(<argument><expr><operator pos:line="6" pos:column="37">(<pos:position pos:line="6" pos:column="38"/></operator><name pos:line="6" pos:column="38">caddr_t<pos:position pos:line="6" pos:column="45"/></name><operator pos:line="6" pos:column="45">)<pos:position pos:line="6" pos:column="46"/></operator><literal type="number" pos:line="6" pos:column="46">0<pos:position pos:line="6" pos:column="47"/></literal></expr></argument>, <argument><expr><name pos:line="6" pos:column="49">size<pos:position pos:line="6" pos:column="53"/></name></expr></argument>,
		    <argument><expr><name pos:line="7" pos:column="21">PROT_READ<pos:position pos:line="7" pos:column="30"/></name><operator pos:line="7" pos:column="30">|<pos:position pos:line="7" pos:column="31"/></operator><name pos:line="7" pos:column="31">PROT_WRITE<pos:position pos:line="7" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="43">MAP_ANON<pos:position pos:line="7" pos:column="51"/></name><operator pos:line="7" pos:column="51">|<pos:position pos:line="7" pos:column="52"/></operator><name pos:line="7" pos:column="52">MAP_SHARED<pos:position pos:line="7" pos:column="62"/></name></expr></argument>, <argument><expr><operator pos:line="7" pos:column="64">-<pos:position pos:line="7" pos:column="65"/></operator><literal type="number" pos:line="7" pos:column="65">1<pos:position pos:line="7" pos:column="66"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="7" pos:column="68">0<pos:position pos:line="7" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="7" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="7" pos:column="71"/></expr_stmt>
    <if pos:line="8" pos:column="5">if <condition pos:line="8" pos:column="8">(<expr><name pos:line="8" pos:column="9">result<pos:position pos:line="8" pos:column="15"/></name> <operator pos:line="8" pos:column="16">==<pos:position pos:line="8" pos:column="18"/></operator> <operator pos:line="8" pos:column="19">(<pos:position pos:line="8" pos:column="20"/></operator><name pos:line="8" pos:column="20">void<pos:position pos:line="8" pos:column="24"/></name> <operator pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></operator><operator pos:line="8" pos:column="26">)<pos:position pos:line="8" pos:column="27"/></operator><operator pos:line="8" pos:column="27">(<pos:position pos:line="8" pos:column="28"/></operator><name pos:line="8" pos:column="28">caddr_t<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">)<pos:position pos:line="8" pos:column="36"/></operator><operator pos:line="8" pos:column="36">-<pos:position pos:line="8" pos:column="37"/></operator><literal type="number" pos:line="8" pos:column="37">1<pos:position pos:line="8" pos:column="38"/></literal></expr>)<pos:position pos:line="8" pos:column="39"/></condition><then pos:line="8" pos:column="39"> <block pos:line="8" pos:column="40">{
	<expr_stmt><expr><call><name pos:line="9" pos:column="9">perror<pos:position pos:line="9" pos:column="15"/></name> <argument_list pos:line="9" pos:column="16">(<argument><expr><literal type="string" pos:line="9" pos:column="17">"mmap"<pos:position pos:line="9" pos:column="23"/></literal></expr></argument>)<pos:position pos:line="9" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="25"/></expr_stmt>
	<expr_stmt><expr><call><name pos:line="10" pos:column="9">exit<pos:position pos:line="10" pos:column="13"/></name> <argument_list pos:line="10" pos:column="14">(<argument><expr><literal type="number" pos:line="10" pos:column="15">1<pos:position pos:line="10" pos:column="16"/></literal></expr></argument>)<pos:position pos:line="10" pos:column="17"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="18"/></expr_stmt>
    }<pos:position pos:line="11" pos:column="6"/></block></then></if>
    <return pos:line="12" pos:column="5">return <expr><name pos:line="12" pos:column="12">result<pos:position pos:line="12" pos:column="18"/></name></expr>;<pos:position pos:line="12" pos:column="19"/></return>
}<pos:position pos:line="13" pos:column="2"/></block></function></unit>
