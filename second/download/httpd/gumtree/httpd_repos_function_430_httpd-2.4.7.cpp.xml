<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_430_httpd-2.4.7.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><specifier pos:line="1" pos:column="8">const<pos:position pos:line="1" pos:column="13"/></specifier> <name pos:line="1" pos:column="14">char<pos:position pos:line="1" pos:column="18"/></name> <modifier pos:line="1" pos:column="19">*<pos:position pos:line="1" pos:column="20"/></modifier></type><name pos:line="1" pos:column="20">log_pid_tid<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">request_rec<pos:position pos:line="1" pos:column="43"/></name> <modifier pos:line="1" pos:column="44">*<pos:position pos:line="1" pos:column="45"/></modifier></type><name pos:line="1" pos:column="45">r<pos:position pos:line="1" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="48">char<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">a<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="56"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <if pos:line="3" pos:column="5">if <condition pos:line="3" pos:column="8">(<expr><operator pos:line="3" pos:column="9">*<pos:position pos:line="3" pos:column="10"/></operator><name pos:line="3" pos:column="10">a<pos:position pos:line="3" pos:column="11"/></name> <operator pos:line="3" pos:column="12">==<pos:position pos:line="3" pos:column="14"/></operator> <literal type="char" pos:line="3" pos:column="15">'\0'<pos:position pos:line="3" pos:column="19"/></literal> <operator pos:line="3" pos:column="20">||<pos:position pos:line="3" pos:column="22"/></operator> <operator pos:line="3" pos:column="23">!<pos:position pos:line="3" pos:column="24"/></operator><call><name pos:line="3" pos:column="24">strcasecmp<pos:position pos:line="3" pos:column="34"/></name><argument_list pos:line="3" pos:column="34">(<argument><expr><name pos:line="3" pos:column="35">a<pos:position pos:line="3" pos:column="36"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="3" pos:column="38">"pid"<pos:position pos:line="3" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="3" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="3" pos:column="45"/></condition><then pos:line="3" pos:column="45"> <block pos:line="3" pos:column="46">{
        <return pos:line="4" pos:column="9">return <expr><call><name pos:line="4" pos:column="16">ap_append_pid<pos:position pos:line="4" pos:column="29"/></name><argument_list pos:line="4" pos:column="29">(<argument><expr><name><name pos:line="4" pos:column="30">r<pos:position pos:line="4" pos:column="31"/></name><operator pos:line="4" pos:column="31">-&gt;<pos:position pos:line="4" pos:column="36"/></operator><name pos:line="4" pos:column="33">pool<pos:position pos:line="4" pos:column="37"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="39">""<pos:position pos:line="4" pos:column="41"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="4" pos:column="43">""<pos:position pos:line="4" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="4" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="47"/></return>
    }<pos:position pos:line="5" pos:column="6"/></block></then>
    <elseif pos:line="6" pos:column="5">else <if pos:line="6" pos:column="10">if <condition pos:line="6" pos:column="13">(<expr><operator pos:line="6" pos:column="14">!<pos:position pos:line="6" pos:column="15"/></operator><call><name pos:line="6" pos:column="15">strcasecmp<pos:position pos:line="6" pos:column="25"/></name><argument_list pos:line="6" pos:column="25">(<argument><expr><name pos:line="6" pos:column="26">a<pos:position pos:line="6" pos:column="27"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="29">"tid"<pos:position pos:line="6" pos:column="34"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="35"/></argument_list></call> <operator pos:line="6" pos:column="36">||<pos:position pos:line="6" pos:column="38"/></operator> <operator pos:line="6" pos:column="39">!<pos:position pos:line="6" pos:column="40"/></operator><call><name pos:line="6" pos:column="40">strcasecmp<pos:position pos:line="6" pos:column="50"/></name><argument_list pos:line="6" pos:column="50">(<argument><expr><name pos:line="6" pos:column="51">a<pos:position pos:line="6" pos:column="52"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="6" pos:column="54">"hextid"<pos:position pos:line="6" pos:column="62"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="6" pos:column="64"/></condition><then pos:line="6" pos:column="64"> <block pos:line="6" pos:column="65">{
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">APR_HAS_THREADS<pos:position pos:line="7" pos:column="20"/></name></expr></cpp:if>
        <decl_stmt><decl><type><name pos:line="8" pos:column="9">apr_os_thread_t<pos:position pos:line="8" pos:column="24"/></name></type> <name pos:line="8" pos:column="25">tid<pos:position pos:line="8" pos:column="28"/></name> <init pos:line="8" pos:column="29">= <expr><call><name pos:line="8" pos:column="31">apr_os_thread_current<pos:position pos:line="8" pos:column="52"/></name><argument_list pos:line="8" pos:column="52">()<pos:position pos:line="8" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="8" pos:column="55"/></decl_stmt>
<cpp:else pos:line="9" pos:column="1">#<cpp:directive pos:line="9" pos:column="2">else<pos:position pos:line="9" pos:column="6"/></cpp:directive></cpp:else>
        <decl_stmt><decl><type><name pos:line="10" pos:column="9">int<pos:position pos:line="10" pos:column="12"/></name></type> <name pos:line="10" pos:column="13">tid<pos:position pos:line="10" pos:column="16"/></name> <init pos:line="10" pos:column="17">= <expr><literal type="number" pos:line="10" pos:column="19">0<pos:position pos:line="10" pos:column="20"/></literal></expr></init></decl>;<pos:position pos:line="10" pos:column="21"/></decl_stmt> <comment type="block" pos:line="10" pos:column="22">/* APR will format "0" anyway but an arg is needed */</comment>
<cpp:endif pos:line="11" pos:column="1">#<cpp:directive pos:line="11" pos:column="2">endif<pos:position pos:line="11" pos:column="7"/></cpp:directive></cpp:endif>
        <return pos:line="12" pos:column="9">return <expr><call><name pos:line="12" pos:column="16">apr_psprintf<pos:position pos:line="12" pos:column="28"/></name><argument_list pos:line="12" pos:column="28">(<argument><expr><name><name pos:line="12" pos:column="29">r<pos:position pos:line="12" pos:column="30"/></name><operator pos:line="12" pos:column="30">-&gt;<pos:position pos:line="12" pos:column="35"/></operator><name pos:line="12" pos:column="32">pool<pos:position pos:line="12" pos:column="36"/></name></name></expr></argument>,
<cpp:if pos:line="13" pos:column="1">#<cpp:directive pos:line="13" pos:column="2">if<pos:position pos:line="13" pos:column="4"/></cpp:directive> <expr><ternary><condition><expr><name pos:line="13" pos:column="5">APR_MAJOR_VERSION<pos:position pos:line="13" pos:column="22"/></name> <operator pos:line="13" pos:column="23">&gt;<pos:position pos:line="13" pos:column="27"/></operator> <literal type="number" pos:line="13" pos:column="25">1<pos:position pos:line="13" pos:column="26"/></literal> <operator pos:line="13" pos:column="27">||<pos:position pos:line="13" pos:column="29"/></operator> <operator pos:line="13" pos:column="30">(<pos:position pos:line="13" pos:column="31"/></operator><name pos:line="13" pos:column="31">APR_MAJOR_VERSION<pos:position pos:line="13" pos:column="48"/></name> <operator pos:line="13" pos:column="49">==<pos:position pos:line="13" pos:column="51"/></operator> <literal type="number" pos:line="13" pos:column="52">1<pos:position pos:line="13" pos:column="53"/></literal> <operator pos:line="13" pos:column="54">&amp;&amp;<pos:position pos:line="13" pos:column="64"/></operator> <name pos:line="13" pos:column="57">APR_MINOR_VERSION<pos:position pos:line="13" pos:column="74"/></name> <operator pos:line="13" pos:column="75">&gt;=<pos:position pos:line="13" pos:column="80"/></operator> <literal type="number" pos:line="13" pos:column="78">2<pos:position pos:line="13" pos:column="79"/></literal><operator pos:line="13" pos:column="79">)<pos:position pos:line="13" pos:column="80"/></operator></expr></condition></ternary></expr></cpp:if>
                            <comment type="block" pos:line="14" pos:column="29">/* APR can format a thread id in hex */</comment>
                            <argument><expr><ternary><condition><expr><operator pos:line="15" pos:column="29">*<pos:position pos:line="15" pos:column="30"/></operator><name pos:line="15" pos:column="30">a<pos:position pos:line="15" pos:column="31"/></name> <operator pos:line="15" pos:column="32">==<pos:position pos:line="15" pos:column="34"/></operator> <literal type="char" pos:line="15" pos:column="35">'h'<pos:position pos:line="15" pos:column="38"/></literal></expr> ?<pos:position pos:line="15" pos:column="40"/></condition><then pos:line="15" pos:column="40"> <expr><literal type="string" pos:line="15" pos:column="41">"%pt"<pos:position pos:line="15" pos:column="46"/></literal></expr> <pos:position pos:line="15" pos:column="47"/></then><else pos:line="15" pos:column="47">: <expr><literal type="string" pos:line="15" pos:column="49">"%pT"<pos:position pos:line="15" pos:column="54"/></literal></expr></else></ternary></expr></argument>,
<cpp:else pos:line="16" pos:column="1">#<cpp:directive pos:line="16" pos:column="2">else<pos:position pos:line="16" pos:column="6"/></cpp:directive></cpp:else>
                            <comment type="block" pos:line="17" pos:column="29">/* APR is missing the feature, so always use decimal */</comment>
                            <argument><expr><literal type="string" pos:line="18" pos:column="29">"%pT"<pos:position pos:line="18" pos:column="34"/></literal></expr></argument>,
<cpp:endif pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">endif<pos:position pos:line="19" pos:column="7"/></cpp:directive></cpp:endif>
                            <argument><expr><operator pos:line="20" pos:column="29">&amp;<pos:position pos:line="20" pos:column="34"/></operator><name pos:line="20" pos:column="30">tid<pos:position pos:line="20" pos:column="33"/></name></expr></argument>)<pos:position pos:line="20" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="35"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if></elseif></if>
    <comment type="block" pos:line="22" pos:column="5">/* bogus format */</comment>
    <return pos:line="23" pos:column="5">return <expr><name pos:line="23" pos:column="12">a<pos:position pos:line="23" pos:column="13"/></name></expr>;<pos:position pos:line="23" pos:column="14"/></return>
}<pos:position pos:line="24" pos:column="2"/></block></function></unit>
