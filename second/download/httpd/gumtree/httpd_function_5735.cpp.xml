<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_function_5735.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">apr_status_t<pos:position pos:line="1" pos:column="20"/></name></type> <name pos:line="1" pos:column="21">ssl_io_filter_input<pos:position pos:line="1" pos:column="40"/></name><parameter_list pos:line="1" pos:column="40">(<parameter><decl><type><name pos:line="1" pos:column="41">ap_filter_t<pos:position pos:line="1" pos:column="52"/></name> <modifier pos:line="1" pos:column="53">*<pos:position pos:line="1" pos:column="54"/></modifier></type><name pos:line="1" pos:column="54">f<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="2" pos:column="41">apr_bucket_brigade<pos:position pos:line="2" pos:column="59"/></name> <modifier pos:line="2" pos:column="60">*<pos:position pos:line="2" pos:column="61"/></modifier></type><name pos:line="2" pos:column="61">bb<pos:position pos:line="2" pos:column="63"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="3" pos:column="41">ap_input_mode_t<pos:position pos:line="3" pos:column="56"/></name></type> <name pos:line="3" pos:column="57">mode<pos:position pos:line="3" pos:column="61"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="4" pos:column="41">apr_read_type_e<pos:position pos:line="4" pos:column="56"/></name></type> <name pos:line="4" pos:column="57">block<pos:position pos:line="4" pos:column="62"/></name></decl></parameter>,
                                        <parameter><decl><type><name pos:line="5" pos:column="41">apr_off_t<pos:position pos:line="5" pos:column="50"/></name></type> <name pos:line="5" pos:column="51">readbytes<pos:position pos:line="5" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="5" pos:column="61"/></parameter_list>
<block pos:line="6" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="7" pos:column="5">apr_status_t<pos:position pos:line="7" pos:column="17"/></name></type> <name pos:line="7" pos:column="18">status<pos:position pos:line="7" pos:column="24"/></name></decl>;<pos:position pos:line="7" pos:column="25"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="8" pos:column="5">bio_filter_in_ctx_t<pos:position pos:line="8" pos:column="24"/></name> <modifier pos:line="8" pos:column="25">*<pos:position pos:line="8" pos:column="26"/></modifier></type><name pos:line="8" pos:column="26">inctx<pos:position pos:line="8" pos:column="31"/></name> <init pos:line="8" pos:column="32">= <expr><name><name pos:line="8" pos:column="34">f<pos:position pos:line="8" pos:column="35"/></name><operator pos:line="8" pos:column="35">-&gt;<pos:position pos:line="8" pos:column="40"/></operator><name pos:line="8" pos:column="37">ctx<pos:position pos:line="8" pos:column="40"/></name></name></expr></init></decl>;<pos:position pos:line="8" pos:column="41"/></decl_stmt>
    <decl_stmt><decl><type><specifier pos:line="9" pos:column="5">const<pos:position pos:line="9" pos:column="10"/></specifier> <name pos:line="9" pos:column="11">char<pos:position pos:line="9" pos:column="15"/></name> <modifier pos:line="9" pos:column="16">*<pos:position pos:line="9" pos:column="17"/></modifier></type><name pos:line="9" pos:column="17">start<pos:position pos:line="9" pos:column="22"/></name> <init pos:line="9" pos:column="23">= <expr><name><name pos:line="9" pos:column="25">inctx<pos:position pos:line="9" pos:column="30"/></name><operator pos:line="9" pos:column="30">-&gt;<pos:position pos:line="9" pos:column="35"/></operator><name pos:line="9" pos:column="32">buffer<pos:position pos:line="9" pos:column="38"/></name></name></expr></init></decl>;<pos:position pos:line="9" pos:column="39"/></decl_stmt> <comment type="block" pos:line="9" pos:column="40">/* start of block to return */</comment>
    <decl_stmt><decl><type><name pos:line="10" pos:column="5">apr_size_t<pos:position pos:line="10" pos:column="15"/></name></type> <name pos:line="10" pos:column="16">len<pos:position pos:line="10" pos:column="19"/></name> <init pos:line="10" pos:column="20">= <expr><sizeof pos:line="10" pos:column="22">sizeof<argument_list pos:line="10" pos:column="28">(<argument><expr><name><name pos:line="10" pos:column="29">inctx<pos:position pos:line="10" pos:column="34"/></name><operator pos:line="10" pos:column="34">-&gt;<pos:position pos:line="10" pos:column="39"/></operator><name pos:line="10" pos:column="36">buffer<pos:position pos:line="10" pos:column="42"/></name></name></expr></argument>)<pos:position pos:line="10" pos:column="43"/></argument_list></sizeof></expr></init></decl>;<pos:position pos:line="10" pos:column="44"/></decl_stmt> <comment type="block" pos:line="10" pos:column="45">/* length of block to return */</comment>
    <decl_stmt><decl><type><name pos:line="11" pos:column="5">int<pos:position pos:line="11" pos:column="8"/></name></type> <name pos:line="11" pos:column="9">is_init<pos:position pos:line="11" pos:column="16"/></name> <init pos:line="11" pos:column="17">= <expr><operator pos:line="11" pos:column="19">(<pos:position pos:line="11" pos:column="20"/></operator><name pos:line="11" pos:column="20">mode<pos:position pos:line="11" pos:column="24"/></name> <operator pos:line="11" pos:column="25">==<pos:position pos:line="11" pos:column="27"/></operator> <name pos:line="11" pos:column="28">AP_MODE_INIT<pos:position pos:line="11" pos:column="40"/></name><operator pos:line="11" pos:column="40">)<pos:position pos:line="11" pos:column="41"/></operator></expr></init></decl>;<pos:position pos:line="11" pos:column="42"/></decl_stmt>

    <if pos:line="13" pos:column="5">if <condition pos:line="13" pos:column="8">(<expr><name><name pos:line="13" pos:column="9">f<pos:position pos:line="13" pos:column="10"/></name><operator pos:line="13" pos:column="10">-&gt;<pos:position pos:line="13" pos:column="15"/></operator><name pos:line="13" pos:column="12">c<pos:position pos:line="13" pos:column="13"/></name><operator pos:line="13" pos:column="13">-&gt;<pos:position pos:line="13" pos:column="18"/></operator><name pos:line="13" pos:column="15">aborted<pos:position pos:line="13" pos:column="22"/></name></name></expr>)<pos:position pos:line="13" pos:column="23"/></condition><then pos:line="13" pos:column="23"> <block pos:line="13" pos:column="24">{
        <comment type="block" pos:line="14" pos:column="9">/* XXX: Ok, if we aborted, we ARE at the EOS.  We also have
         * aborted.  This 'double protection' is probably redundant,
         * but also effective against just about anything.
         */</comment>
        <decl_stmt><decl><type><name pos:line="18" pos:column="9">apr_bucket<pos:position pos:line="18" pos:column="19"/></name> <modifier pos:line="18" pos:column="20">*<pos:position pos:line="18" pos:column="21"/></modifier></type><name pos:line="18" pos:column="21">bucket<pos:position pos:line="18" pos:column="27"/></name> <init pos:line="18" pos:column="28">= <expr><call><name pos:line="18" pos:column="30">apr_bucket_eos_create<pos:position pos:line="18" pos:column="51"/></name><argument_list pos:line="18" pos:column="51">(<argument><expr><name><name pos:line="18" pos:column="52">f<pos:position pos:line="18" pos:column="53"/></name><operator pos:line="18" pos:column="53">-&gt;<pos:position pos:line="18" pos:column="58"/></operator><name pos:line="18" pos:column="55">c<pos:position pos:line="18" pos:column="56"/></name><operator pos:line="18" pos:column="56">-&gt;<pos:position pos:line="18" pos:column="61"/></operator><name pos:line="18" pos:column="58">bucket_alloc<pos:position pos:line="18" pos:column="70"/></name></name></expr></argument>)<pos:position pos:line="18" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="18" pos:column="72"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="19" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="19" pos:column="32"/></name><argument_list pos:line="19" pos:column="32">(<argument><expr><name pos:line="19" pos:column="33">bb<pos:position pos:line="19" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="19" pos:column="37">bucket<pos:position pos:line="19" pos:column="43"/></name></expr></argument>)<pos:position pos:line="19" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="19" pos:column="45"/></expr_stmt>
        <return pos:line="20" pos:column="9">return <expr><name pos:line="20" pos:column="16">APR_ECONNABORTED<pos:position pos:line="20" pos:column="32"/></name></expr>;<pos:position pos:line="20" pos:column="33"/></return>
    }<pos:position pos:line="21" pos:column="6"/></block></then></if>

    <if pos:line="23" pos:column="5">if <condition pos:line="23" pos:column="8">(<expr><operator pos:line="23" pos:column="9">!<pos:position pos:line="23" pos:column="10"/></operator><name><name pos:line="23" pos:column="10">inctx<pos:position pos:line="23" pos:column="15"/></name><operator pos:line="23" pos:column="15">-&gt;<pos:position pos:line="23" pos:column="20"/></operator><name pos:line="23" pos:column="17">ssl<pos:position pos:line="23" pos:column="20"/></name></name></expr>)<pos:position pos:line="23" pos:column="21"/></condition><then pos:line="23" pos:column="21"> <block pos:line="23" pos:column="22">{
        <decl_stmt><decl><type><name pos:line="24" pos:column="9">SSLConnRec<pos:position pos:line="24" pos:column="19"/></name> <modifier pos:line="24" pos:column="20">*<pos:position pos:line="24" pos:column="21"/></modifier></type><name pos:line="24" pos:column="21">sslconn<pos:position pos:line="24" pos:column="28"/></name> <init pos:line="24" pos:column="29">= <expr><call><name pos:line="24" pos:column="31">myConnConfig<pos:position pos:line="24" pos:column="43"/></name><argument_list pos:line="24" pos:column="43">(<argument><expr><name><name pos:line="24" pos:column="44">f<pos:position pos:line="24" pos:column="45"/></name><operator pos:line="24" pos:column="45">-&gt;<pos:position pos:line="24" pos:column="50"/></operator><name pos:line="24" pos:column="47">c<pos:position pos:line="24" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="24" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="24" pos:column="50"/></decl_stmt>
        <if pos:line="25" pos:column="9">if <condition pos:line="25" pos:column="12">(<expr><name><name pos:line="25" pos:column="13">sslconn<pos:position pos:line="25" pos:column="20"/></name><operator pos:line="25" pos:column="20">-&gt;<pos:position pos:line="25" pos:column="25"/></operator><name pos:line="25" pos:column="22">non_ssl_request<pos:position pos:line="25" pos:column="37"/></name></name> <operator pos:line="25" pos:column="38">==<pos:position pos:line="25" pos:column="40"/></operator> <name pos:line="25" pos:column="41">NON_SSL_SEND_HDR_SEP<pos:position pos:line="25" pos:column="61"/></name></expr>)<pos:position pos:line="25" pos:column="62"/></condition><then pos:line="25" pos:column="62"> <block pos:line="25" pos:column="63">{
            <decl_stmt><decl><type><name pos:line="26" pos:column="13">apr_bucket<pos:position pos:line="26" pos:column="23"/></name> <modifier pos:line="26" pos:column="24">*<pos:position pos:line="26" pos:column="25"/></modifier></type><name pos:line="26" pos:column="25">bucket<pos:position pos:line="26" pos:column="31"/></name> <init pos:line="26" pos:column="32">= <expr><call><name pos:line="26" pos:column="34">apr_bucket_immortal_create<pos:position pos:line="26" pos:column="60"/></name><argument_list pos:line="26" pos:column="60">(<argument><expr><name pos:line="26" pos:column="61">CRLF<pos:position pos:line="26" pos:column="65"/></name></expr></argument>, <argument><expr><literal type="number" pos:line="26" pos:column="67">2<pos:position pos:line="26" pos:column="68"/></literal></expr></argument>, <argument><expr><name><name pos:line="26" pos:column="70">f<pos:position pos:line="26" pos:column="71"/></name><operator pos:line="26" pos:column="71">-&gt;<pos:position pos:line="26" pos:column="76"/></operator><name pos:line="26" pos:column="73">c<pos:position pos:line="26" pos:column="74"/></name><operator pos:line="26" pos:column="74">-&gt;<pos:position pos:line="26" pos:column="79"/></operator><name pos:line="26" pos:column="76">bucket_alloc<pos:position pos:line="26" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="26" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="26" pos:column="90"/></decl_stmt>
            <expr_stmt><expr><call><name pos:line="27" pos:column="13">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="27" pos:column="36"/></name><argument_list pos:line="27" pos:column="36">(<argument><expr><name pos:line="27" pos:column="37">bb<pos:position pos:line="27" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="27" pos:column="41">bucket<pos:position pos:line="27" pos:column="47"/></name></expr></argument>)<pos:position pos:line="27" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="27" pos:column="49"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="28" pos:column="13">sslconn<pos:position pos:line="28" pos:column="20"/></name><operator pos:line="28" pos:column="20">-&gt;<pos:position pos:line="28" pos:column="25"/></operator><name pos:line="28" pos:column="22">non_ssl_request<pos:position pos:line="28" pos:column="37"/></name></name> <operator pos:line="28" pos:column="38">=<pos:position pos:line="28" pos:column="39"/></operator> <name pos:line="28" pos:column="40">NON_SSL_SET_ERROR_MSG<pos:position pos:line="28" pos:column="61"/></name></expr>;<pos:position pos:line="28" pos:column="62"/></expr_stmt>
            <return pos:line="29" pos:column="13">return <expr><name pos:line="29" pos:column="20">APR_SUCCESS<pos:position pos:line="29" pos:column="31"/></name></expr>;<pos:position pos:line="29" pos:column="32"/></return>
        }<pos:position pos:line="30" pos:column="10"/></block></then></if>
        <return pos:line="31" pos:column="9">return <expr><call><name pos:line="31" pos:column="16">ap_get_brigade<pos:position pos:line="31" pos:column="30"/></name><argument_list pos:line="31" pos:column="30">(<argument><expr><name><name pos:line="31" pos:column="31">f<pos:position pos:line="31" pos:column="32"/></name><operator pos:line="31" pos:column="32">-&gt;<pos:position pos:line="31" pos:column="37"/></operator><name pos:line="31" pos:column="34">next<pos:position pos:line="31" pos:column="38"/></name></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="40">bb<pos:position pos:line="31" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="44">mode<pos:position pos:line="31" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="50">block<pos:position pos:line="31" pos:column="55"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="57">readbytes<pos:position pos:line="31" pos:column="66"/></name></expr></argument>)<pos:position pos:line="31" pos:column="67"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="68"/></return>
    }<pos:position pos:line="32" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="34" pos:column="5">/* XXX: we don't currently support anything other than these modes. */</comment>
    <if pos:line="35" pos:column="5">if <condition pos:line="35" pos:column="8">(<expr><name pos:line="35" pos:column="9">mode<pos:position pos:line="35" pos:column="13"/></name> <operator pos:line="35" pos:column="14">!=<pos:position pos:line="35" pos:column="16"/></operator> <name pos:line="35" pos:column="17">AP_MODE_READBYTES<pos:position pos:line="35" pos:column="34"/></name> <operator pos:line="35" pos:column="35">&amp;&amp;<pos:position pos:line="35" pos:column="45"/></operator> <name pos:line="35" pos:column="38">mode<pos:position pos:line="35" pos:column="42"/></name> <operator pos:line="35" pos:column="43">!=<pos:position pos:line="35" pos:column="45"/></operator> <name pos:line="35" pos:column="46">AP_MODE_GETLINE<pos:position pos:line="35" pos:column="61"/></name> <operator pos:line="35" pos:column="62">&amp;&amp;<pos:position pos:line="35" pos:column="72"/></operator>
        <name pos:line="36" pos:column="9">mode<pos:position pos:line="36" pos:column="13"/></name> <operator pos:line="36" pos:column="14">!=<pos:position pos:line="36" pos:column="16"/></operator> <name pos:line="36" pos:column="17">AP_MODE_SPECULATIVE<pos:position pos:line="36" pos:column="36"/></name> <operator pos:line="36" pos:column="37">&amp;&amp;<pos:position pos:line="36" pos:column="47"/></operator> <name pos:line="36" pos:column="40">mode<pos:position pos:line="36" pos:column="44"/></name> <operator pos:line="36" pos:column="45">!=<pos:position pos:line="36" pos:column="47"/></operator> <name pos:line="36" pos:column="48">AP_MODE_INIT<pos:position pos:line="36" pos:column="60"/></name></expr>)<pos:position pos:line="36" pos:column="61"/></condition><then pos:line="36" pos:column="61"> <block pos:line="36" pos:column="62">{
        <return pos:line="37" pos:column="9">return <expr><name pos:line="37" pos:column="16">APR_ENOTIMPL<pos:position pos:line="37" pos:column="28"/></name></expr>;<pos:position pos:line="37" pos:column="29"/></return>
    }<pos:position pos:line="38" pos:column="6"/></block></then></if>

    <expr_stmt><expr><name><name pos:line="40" pos:column="5">inctx<pos:position pos:line="40" pos:column="10"/></name><operator pos:line="40" pos:column="10">-&gt;<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="12">mode<pos:position pos:line="40" pos:column="16"/></name></name> <operator pos:line="40" pos:column="17">=<pos:position pos:line="40" pos:column="18"/></operator> <name pos:line="40" pos:column="19">mode<pos:position pos:line="40" pos:column="23"/></name></expr>;<pos:position pos:line="40" pos:column="24"/></expr_stmt>
    <expr_stmt><expr><name><name pos:line="41" pos:column="5">inctx<pos:position pos:line="41" pos:column="10"/></name><operator pos:line="41" pos:column="10">-&gt;<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="12">block<pos:position pos:line="41" pos:column="17"/></name></name> <operator pos:line="41" pos:column="18">=<pos:position pos:line="41" pos:column="19"/></operator> <name pos:line="41" pos:column="20">block<pos:position pos:line="41" pos:column="25"/></name></expr>;<pos:position pos:line="41" pos:column="26"/></expr_stmt>

    <comment type="block" pos:line="43" pos:column="5">/* XXX: we could actually move ssl_io_filter_handshake to an
     * ap_hook_process_connection but would still need to call it for
     * AP_MODE_INIT for protocols that may upgrade the connection
     * rather than have SSLEngine On configured.
     */</comment>
    <if pos:line="48" pos:column="5">if <condition pos:line="48" pos:column="8">(<expr><operator pos:line="48" pos:column="9">(<pos:position pos:line="48" pos:column="10"/></operator><name pos:line="48" pos:column="10">status<pos:position pos:line="48" pos:column="16"/></name> <operator pos:line="48" pos:column="17">=<pos:position pos:line="48" pos:column="18"/></operator> <call><name pos:line="48" pos:column="19">ssl_io_filter_handshake<pos:position pos:line="48" pos:column="42"/></name><argument_list pos:line="48" pos:column="42">(<argument><expr><name><name pos:line="48" pos:column="43">inctx<pos:position pos:line="48" pos:column="48"/></name><operator pos:line="48" pos:column="48">-&gt;<pos:position pos:line="48" pos:column="53"/></operator><name pos:line="48" pos:column="50">filter_ctx<pos:position pos:line="48" pos:column="60"/></name></name></expr></argument>)<pos:position pos:line="48" pos:column="61"/></argument_list></call><operator pos:line="48" pos:column="61">)<pos:position pos:line="48" pos:column="62"/></operator> <operator pos:line="48" pos:column="63">!=<pos:position pos:line="48" pos:column="65"/></operator> <name pos:line="48" pos:column="66">APR_SUCCESS<pos:position pos:line="48" pos:column="77"/></name></expr>)<pos:position pos:line="48" pos:column="78"/></condition><then pos:line="48" pos:column="78"> <block pos:line="48" pos:column="79">{
        <return pos:line="49" pos:column="9">return <expr><call><name pos:line="49" pos:column="16">ssl_io_filter_error<pos:position pos:line="49" pos:column="35"/></name><argument_list pos:line="49" pos:column="35">(<argument><expr><name pos:line="49" pos:column="36">f<pos:position pos:line="49" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="39">bb<pos:position pos:line="49" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="49" pos:column="43">status<pos:position pos:line="49" pos:column="49"/></name></expr></argument>)<pos:position pos:line="49" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="49" pos:column="51"/></return>
    }<pos:position pos:line="50" pos:column="6"/></block></then></if>

    <if pos:line="52" pos:column="5">if <condition pos:line="52" pos:column="8">(<expr><name pos:line="52" pos:column="9">is_init<pos:position pos:line="52" pos:column="16"/></name></expr>)<pos:position pos:line="52" pos:column="17"/></condition><then pos:line="52" pos:column="17"> <block pos:line="52" pos:column="18">{
        <comment type="block" pos:line="53" pos:column="9">/* protocol module needs to handshake before sending
         * data to client (e.g. NNTP or FTP)
         */</comment>
        <return pos:line="56" pos:column="9">return <expr><name pos:line="56" pos:column="16">APR_SUCCESS<pos:position pos:line="56" pos:column="27"/></name></expr>;<pos:position pos:line="56" pos:column="28"/></return>
    }<pos:position pos:line="57" pos:column="6"/></block></then></if>

    <if pos:line="59" pos:column="5">if <condition pos:line="59" pos:column="8">(<expr><name><name pos:line="59" pos:column="9">inctx<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">-&gt;<pos:position pos:line="59" pos:column="19"/></operator><name pos:line="59" pos:column="16">mode<pos:position pos:line="59" pos:column="20"/></name></name> <operator pos:line="59" pos:column="21">==<pos:position pos:line="59" pos:column="23"/></operator> <name pos:line="59" pos:column="24">AP_MODE_READBYTES<pos:position pos:line="59" pos:column="41"/></name> <operator pos:line="59" pos:column="42">||<pos:position pos:line="59" pos:column="44"/></operator>
        <name><name pos:line="60" pos:column="9">inctx<pos:position pos:line="60" pos:column="14"/></name><operator pos:line="60" pos:column="14">-&gt;<pos:position pos:line="60" pos:column="19"/></operator><name pos:line="60" pos:column="16">mode<pos:position pos:line="60" pos:column="20"/></name></name> <operator pos:line="60" pos:column="21">==<pos:position pos:line="60" pos:column="23"/></operator> <name pos:line="60" pos:column="24">AP_MODE_SPECULATIVE<pos:position pos:line="60" pos:column="43"/></name></expr>)<pos:position pos:line="60" pos:column="44"/></condition><then pos:line="60" pos:column="44"> <block pos:line="60" pos:column="45">{
        <comment type="block" pos:line="61" pos:column="9">/* Protected from truncation, readbytes &lt; MAX_SIZE_T
         * FIXME: No, it's *not* protected.  -- jre */</comment>
        <if pos:line="63" pos:column="9">if <condition pos:line="63" pos:column="12">(<expr><name pos:line="63" pos:column="13">readbytes<pos:position pos:line="63" pos:column="22"/></name> <operator pos:line="63" pos:column="23">&lt;<pos:position pos:line="63" pos:column="27"/></operator> <name pos:line="63" pos:column="25">len<pos:position pos:line="63" pos:column="28"/></name></expr>)<pos:position pos:line="63" pos:column="29"/></condition><then pos:line="63" pos:column="29"> <block pos:line="63" pos:column="30">{
            <expr_stmt><expr><name pos:line="64" pos:column="13">len<pos:position pos:line="64" pos:column="16"/></name> <operator pos:line="64" pos:column="17">=<pos:position pos:line="64" pos:column="18"/></operator> <operator pos:line="64" pos:column="19">(<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="20">apr_size_t<pos:position pos:line="64" pos:column="30"/></name><operator pos:line="64" pos:column="30">)<pos:position pos:line="64" pos:column="31"/></operator><name pos:line="64" pos:column="31">readbytes<pos:position pos:line="64" pos:column="40"/></name></expr>;<pos:position pos:line="64" pos:column="41"/></expr_stmt>
        }<pos:position pos:line="65" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name pos:line="66" pos:column="9">status<pos:position pos:line="66" pos:column="15"/></name> <operator pos:line="66" pos:column="16">=<pos:position pos:line="66" pos:column="17"/></operator> <call><name pos:line="66" pos:column="18">ssl_io_input_read<pos:position pos:line="66" pos:column="35"/></name><argument_list pos:line="66" pos:column="35">(<argument><expr><name pos:line="66" pos:column="36">inctx<pos:position pos:line="66" pos:column="41"/></name></expr></argument>, <argument><expr><name><name pos:line="66" pos:column="43">inctx<pos:position pos:line="66" pos:column="48"/></name><operator pos:line="66" pos:column="48">-&gt;<pos:position pos:line="66" pos:column="53"/></operator><name pos:line="66" pos:column="50">buffer<pos:position pos:line="66" pos:column="56"/></name></name></expr></argument>, <argument><expr><operator pos:line="66" pos:column="58">&amp;<pos:position pos:line="66" pos:column="63"/></operator><name pos:line="66" pos:column="59">len<pos:position pos:line="66" pos:column="62"/></name></expr></argument>)<pos:position pos:line="66" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="64"/></expr_stmt>
    }<pos:position pos:line="67" pos:column="6"/></block></then>
    <elseif pos:line="68" pos:column="5">else <if pos:line="68" pos:column="10">if <condition pos:line="68" pos:column="13">(<expr><name><name pos:line="68" pos:column="14">inctx<pos:position pos:line="68" pos:column="19"/></name><operator pos:line="68" pos:column="19">-&gt;<pos:position pos:line="68" pos:column="24"/></operator><name pos:line="68" pos:column="21">mode<pos:position pos:line="68" pos:column="25"/></name></name> <operator pos:line="68" pos:column="26">==<pos:position pos:line="68" pos:column="28"/></operator> <name pos:line="68" pos:column="29">AP_MODE_GETLINE<pos:position pos:line="68" pos:column="44"/></name></expr>)<pos:position pos:line="68" pos:column="45"/></condition><then pos:line="68" pos:column="45"> <block pos:line="68" pos:column="46">{
        <decl_stmt><decl><type><specifier pos:line="69" pos:column="9">const<pos:position pos:line="69" pos:column="14"/></specifier> <name pos:line="69" pos:column="15">char<pos:position pos:line="69" pos:column="19"/></name> <modifier pos:line="69" pos:column="20">*<pos:position pos:line="69" pos:column="21"/></modifier></type><name pos:line="69" pos:column="21">pos<pos:position pos:line="69" pos:column="24"/></name></decl>;<pos:position pos:line="69" pos:column="25"/></decl_stmt>

        <comment type="block" pos:line="71" pos:column="9">/* Satisfy the read directly out of the buffer if possible;
         * invoking ssl_io_input_getline will mean the entire buffer
         * is copied once (unnecessarily) for each GETLINE call. */</comment>
        <if pos:line="74" pos:column="9">if <condition pos:line="74" pos:column="12">(<expr><name><name pos:line="74" pos:column="13">inctx<pos:position pos:line="74" pos:column="18"/></name><operator pos:line="74" pos:column="18">-&gt;<pos:position pos:line="74" pos:column="23"/></operator><name pos:line="74" pos:column="20">cbuf<pos:position pos:line="74" pos:column="24"/></name><operator pos:line="74" pos:column="24">.<pos:position pos:line="74" pos:column="25"/></operator><name pos:line="74" pos:column="25">length<pos:position pos:line="74" pos:column="31"/></name></name>
            <operator pos:line="75" pos:column="13">&amp;&amp;<pos:position pos:line="75" pos:column="23"/></operator> <operator pos:line="75" pos:column="16">(<pos:position pos:line="75" pos:column="17"/></operator><name pos:line="75" pos:column="17">pos<pos:position pos:line="75" pos:column="20"/></name> <operator pos:line="75" pos:column="21">=<pos:position pos:line="75" pos:column="22"/></operator> <call><name pos:line="75" pos:column="23">memchr<pos:position pos:line="75" pos:column="29"/></name><argument_list pos:line="75" pos:column="29">(<argument><expr><name><name pos:line="75" pos:column="30">inctx<pos:position pos:line="75" pos:column="35"/></name><operator pos:line="75" pos:column="35">-&gt;<pos:position pos:line="75" pos:column="40"/></operator><name pos:line="75" pos:column="37">cbuf<pos:position pos:line="75" pos:column="41"/></name><operator pos:line="75" pos:column="41">.<pos:position pos:line="75" pos:column="42"/></operator><name pos:line="75" pos:column="42">value<pos:position pos:line="75" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="75" pos:column="49">APR_ASCII_LF<pos:position pos:line="75" pos:column="61"/></name></expr></argument>,
                             <argument><expr><name><name pos:line="76" pos:column="30">inctx<pos:position pos:line="76" pos:column="35"/></name><operator pos:line="76" pos:column="35">-&gt;<pos:position pos:line="76" pos:column="40"/></operator><name pos:line="76" pos:column="37">cbuf<pos:position pos:line="76" pos:column="41"/></name><operator pos:line="76" pos:column="41">.<pos:position pos:line="76" pos:column="42"/></operator><name pos:line="76" pos:column="42">length<pos:position pos:line="76" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="76" pos:column="49"/></argument_list></call><operator pos:line="76" pos:column="49">)<pos:position pos:line="76" pos:column="50"/></operator> <operator pos:line="76" pos:column="51">!=<pos:position pos:line="76" pos:column="53"/></operator> <name pos:line="76" pos:column="54">NULL<pos:position pos:line="76" pos:column="58"/></name></expr>)<pos:position pos:line="76" pos:column="59"/></condition><then pos:line="76" pos:column="59"> <block pos:line="76" pos:column="60">{
            <expr_stmt><expr><name pos:line="77" pos:column="13">start<pos:position pos:line="77" pos:column="18"/></name> <operator pos:line="77" pos:column="19">=<pos:position pos:line="77" pos:column="20"/></operator> <name><name pos:line="77" pos:column="21">inctx<pos:position pos:line="77" pos:column="26"/></name><operator pos:line="77" pos:column="26">-&gt;<pos:position pos:line="77" pos:column="31"/></operator><name pos:line="77" pos:column="28">cbuf<pos:position pos:line="77" pos:column="32"/></name><operator pos:line="77" pos:column="32">.<pos:position pos:line="77" pos:column="33"/></operator><name pos:line="77" pos:column="33">value<pos:position pos:line="77" pos:column="38"/></name></name></expr>;<pos:position pos:line="77" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="78" pos:column="13">len<pos:position pos:line="78" pos:column="16"/></name> <operator pos:line="78" pos:column="17">=<pos:position pos:line="78" pos:column="18"/></operator> <literal type="number" pos:line="78" pos:column="19">1<pos:position pos:line="78" pos:column="20"/></literal> <operator pos:line="78" pos:column="21">+<pos:position pos:line="78" pos:column="22"/></operator> <name pos:line="78" pos:column="23">pos<pos:position pos:line="78" pos:column="26"/></name> <operator pos:line="78" pos:column="27">-<pos:position pos:line="78" pos:column="28"/></operator> <name pos:line="78" pos:column="29">start<pos:position pos:line="78" pos:column="34"/></name></expr>;<pos:position pos:line="78" pos:column="35"/></expr_stmt> <comment type="block" pos:line="78" pos:column="36">/* +1 to include LF */</comment>
            <comment type="block" pos:line="79" pos:column="13">/* Buffer contents now consumed. */</comment>
            <expr_stmt><expr><name><name pos:line="80" pos:column="13">inctx<pos:position pos:line="80" pos:column="18"/></name><operator pos:line="80" pos:column="18">-&gt;<pos:position pos:line="80" pos:column="23"/></operator><name pos:line="80" pos:column="20">cbuf<pos:position pos:line="80" pos:column="24"/></name><operator pos:line="80" pos:column="24">.<pos:position pos:line="80" pos:column="25"/></operator><name pos:line="80" pos:column="25">value<pos:position pos:line="80" pos:column="30"/></name></name> <operator pos:line="80" pos:column="31">+=<pos:position pos:line="80" pos:column="33"/></operator> <name pos:line="80" pos:column="34">len<pos:position pos:line="80" pos:column="37"/></name></expr>;<pos:position pos:line="80" pos:column="38"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="81" pos:column="13">inctx<pos:position pos:line="81" pos:column="18"/></name><operator pos:line="81" pos:column="18">-&gt;<pos:position pos:line="81" pos:column="23"/></operator><name pos:line="81" pos:column="20">cbuf<pos:position pos:line="81" pos:column="24"/></name><operator pos:line="81" pos:column="24">.<pos:position pos:line="81" pos:column="25"/></operator><name pos:line="81" pos:column="25">length<pos:position pos:line="81" pos:column="31"/></name></name> <operator pos:line="81" pos:column="32">-=<pos:position pos:line="81" pos:column="34"/></operator> <name pos:line="81" pos:column="35">len<pos:position pos:line="81" pos:column="38"/></name></expr>;<pos:position pos:line="81" pos:column="39"/></expr_stmt>
            <expr_stmt><expr><name pos:line="82" pos:column="13">status<pos:position pos:line="82" pos:column="19"/></name> <operator pos:line="82" pos:column="20">=<pos:position pos:line="82" pos:column="21"/></operator> <name pos:line="82" pos:column="22">APR_SUCCESS<pos:position pos:line="82" pos:column="33"/></name></expr>;<pos:position pos:line="82" pos:column="34"/></expr_stmt>
        }<pos:position pos:line="83" pos:column="10"/></block></then>
        <else pos:line="84" pos:column="9">else <block pos:line="84" pos:column="14">{
            <comment type="block" pos:line="85" pos:column="13">/* Otherwise fall back to the hard way. */</comment>
            <expr_stmt><expr><name pos:line="86" pos:column="13">status<pos:position pos:line="86" pos:column="19"/></name> <operator pos:line="86" pos:column="20">=<pos:position pos:line="86" pos:column="21"/></operator> <call><name pos:line="86" pos:column="22">ssl_io_input_getline<pos:position pos:line="86" pos:column="42"/></name><argument_list pos:line="86" pos:column="42">(<argument><expr><name pos:line="86" pos:column="43">inctx<pos:position pos:line="86" pos:column="48"/></name></expr></argument>, <argument><expr><name><name pos:line="86" pos:column="50">inctx<pos:position pos:line="86" pos:column="55"/></name><operator pos:line="86" pos:column="55">-&gt;<pos:position pos:line="86" pos:column="60"/></operator><name pos:line="86" pos:column="57">buffer<pos:position pos:line="86" pos:column="63"/></name></name></expr></argument>, <argument><expr><operator pos:line="86" pos:column="65">&amp;<pos:position pos:line="86" pos:column="70"/></operator><name pos:line="86" pos:column="66">len<pos:position pos:line="86" pos:column="69"/></name></expr></argument>)<pos:position pos:line="86" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="86" pos:column="71"/></expr_stmt>
        }<pos:position pos:line="87" pos:column="10"/></block></else></if>
    }<pos:position pos:line="88" pos:column="6"/></block></then></if></elseif>
    <else pos:line="89" pos:column="5">else <block pos:line="89" pos:column="10">{
        <comment type="block" pos:line="90" pos:column="9">/* We have no idea what you are talking about, so return an error. */</comment>
        <expr_stmt><expr><name pos:line="91" pos:column="9">status<pos:position pos:line="91" pos:column="15"/></name> <operator pos:line="91" pos:column="16">=<pos:position pos:line="91" pos:column="17"/></operator> <name pos:line="91" pos:column="18">APR_ENOTIMPL<pos:position pos:line="91" pos:column="30"/></name></expr>;<pos:position pos:line="91" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="92" pos:column="6"/></block></else></if>

    <comment type="block" pos:line="94" pos:column="5">/* It is possible for mod_ssl's BIO to be used outside of the
     * direct control of mod_ssl's input or output filter -- notably,
     * when mod_ssl initiates a renegotiation.  Switching the BIO mode
     * back to "blocking" here ensures such operations don't fail with
     * SSL_ERROR_WANT_READ. */</comment>
    <expr_stmt><expr><name><name pos:line="99" pos:column="5">inctx<pos:position pos:line="99" pos:column="10"/></name><operator pos:line="99" pos:column="10">-&gt;<pos:position pos:line="99" pos:column="15"/></operator><name pos:line="99" pos:column="12">block<pos:position pos:line="99" pos:column="17"/></name></name> <operator pos:line="99" pos:column="18">=<pos:position pos:line="99" pos:column="19"/></operator> <name pos:line="99" pos:column="20">APR_BLOCK_READ<pos:position pos:line="99" pos:column="34"/></name></expr>;<pos:position pos:line="99" pos:column="35"/></expr_stmt>

    <comment type="block" pos:line="101" pos:column="5">/* Handle custom errors. */</comment>
    <if pos:line="102" pos:column="5">if <condition pos:line="102" pos:column="8">(<expr><name pos:line="102" pos:column="9">status<pos:position pos:line="102" pos:column="15"/></name> <operator pos:line="102" pos:column="16">!=<pos:position pos:line="102" pos:column="18"/></operator> <name pos:line="102" pos:column="19">APR_SUCCESS<pos:position pos:line="102" pos:column="30"/></name></expr>)<pos:position pos:line="102" pos:column="31"/></condition><then pos:line="102" pos:column="31"> <block pos:line="102" pos:column="32">{
        <return pos:line="103" pos:column="9">return <expr><call><name pos:line="103" pos:column="16">ssl_io_filter_error<pos:position pos:line="103" pos:column="35"/></name><argument_list pos:line="103" pos:column="35">(<argument><expr><name pos:line="103" pos:column="36">f<pos:position pos:line="103" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="39">bb<pos:position pos:line="103" pos:column="41"/></name></expr></argument>, <argument><expr><name pos:line="103" pos:column="43">status<pos:position pos:line="103" pos:column="49"/></name></expr></argument>)<pos:position pos:line="103" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="51"/></return>
    }<pos:position pos:line="104" pos:column="6"/></block></then></if>

    <comment type="block" pos:line="106" pos:column="5">/* Create a transient bucket out of the decrypted data. */</comment>
    <if pos:line="107" pos:column="5">if <condition pos:line="107" pos:column="8">(<expr><name pos:line="107" pos:column="9">len<pos:position pos:line="107" pos:column="12"/></name> <operator pos:line="107" pos:column="13">&gt;<pos:position pos:line="107" pos:column="17"/></operator> <literal type="number" pos:line="107" pos:column="15">0<pos:position pos:line="107" pos:column="16"/></literal></expr>)<pos:position pos:line="107" pos:column="17"/></condition><then pos:line="107" pos:column="17"> <block pos:line="107" pos:column="18">{
        <decl_stmt><decl><type><name pos:line="108" pos:column="9">apr_bucket<pos:position pos:line="108" pos:column="19"/></name> <modifier pos:line="108" pos:column="20">*<pos:position pos:line="108" pos:column="21"/></modifier></type><name pos:line="108" pos:column="21">bucket<pos:position pos:line="108" pos:column="27"/></name> <init pos:line="108" pos:column="28">=
            <expr><call><name pos:line="109" pos:column="13">apr_bucket_transient_create<pos:position pos:line="109" pos:column="40"/></name><argument_list pos:line="109" pos:column="40">(<argument><expr><name pos:line="109" pos:column="41">start<pos:position pos:line="109" pos:column="46"/></name></expr></argument>, <argument><expr><name pos:line="109" pos:column="48">len<pos:position pos:line="109" pos:column="51"/></name></expr></argument>, <argument><expr><name><name pos:line="109" pos:column="53">f<pos:position pos:line="109" pos:column="54"/></name><operator pos:line="109" pos:column="54">-&gt;<pos:position pos:line="109" pos:column="59"/></operator><name pos:line="109" pos:column="56">c<pos:position pos:line="109" pos:column="57"/></name><operator pos:line="109" pos:column="57">-&gt;<pos:position pos:line="109" pos:column="62"/></operator><name pos:line="109" pos:column="59">bucket_alloc<pos:position pos:line="109" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="109" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="109" pos:column="73"/></decl_stmt>
        <expr_stmt><expr><call><name pos:line="110" pos:column="9">APR_BRIGADE_INSERT_TAIL<pos:position pos:line="110" pos:column="32"/></name><argument_list pos:line="110" pos:column="32">(<argument><expr><name pos:line="110" pos:column="33">bb<pos:position pos:line="110" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="110" pos:column="37">bucket<pos:position pos:line="110" pos:column="43"/></name></expr></argument>)<pos:position pos:line="110" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="110" pos:column="45"/></expr_stmt>
    }<pos:position pos:line="111" pos:column="6"/></block></then></if>

<cpp:ifdef pos:line="113" pos:column="1">#<cpp:directive pos:line="113" pos:column="2">ifdef<pos:position pos:line="113" pos:column="7"/></cpp:directive> <name pos:line="113" pos:column="8">HAVE_TLS_ALPN<pos:position pos:line="113" pos:column="21"/></name></cpp:ifdef>
    <comment type="block" pos:line="114" pos:column="5">/* By this point, Application-Layer Protocol Negotiation (ALPN) should be 
     * completed (if our version of OpenSSL supports it). If we haven't already, 
     * find out which protocol was decided upon and inform other modules 
     * by calling alpn_proto_negotiated_hook. 
     */</comment>
    <if pos:line="119" pos:column="5">if <condition pos:line="119" pos:column="8">(<expr><operator pos:line="119" pos:column="9">!<pos:position pos:line="119" pos:column="10"/></operator><name><name pos:line="119" pos:column="10">inctx<pos:position pos:line="119" pos:column="15"/></name><operator pos:line="119" pos:column="15">-&gt;<pos:position pos:line="119" pos:column="20"/></operator><name pos:line="119" pos:column="17">alpn_finished<pos:position pos:line="119" pos:column="30"/></name></name></expr>)<pos:position pos:line="119" pos:column="31"/></condition><then pos:line="119" pos:column="31"> <block pos:line="119" pos:column="32">{
        <decl_stmt><decl><type><name pos:line="120" pos:column="9">SSLConnRec<pos:position pos:line="120" pos:column="19"/></name> <modifier pos:line="120" pos:column="20">*<pos:position pos:line="120" pos:column="21"/></modifier></type><name pos:line="120" pos:column="21">sslconn<pos:position pos:line="120" pos:column="28"/></name> <init pos:line="120" pos:column="29">= <expr><call><name pos:line="120" pos:column="31">myConnConfig<pos:position pos:line="120" pos:column="43"/></name><argument_list pos:line="120" pos:column="43">(<argument><expr><name><name pos:line="120" pos:column="44">f<pos:position pos:line="120" pos:column="45"/></name><operator pos:line="120" pos:column="45">-&gt;<pos:position pos:line="120" pos:column="50"/></operator><name pos:line="120" pos:column="47">c<pos:position pos:line="120" pos:column="48"/></name></name></expr></argument>)<pos:position pos:line="120" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="120" pos:column="50"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="121" pos:column="9">const<pos:position pos:line="121" pos:column="14"/></specifier> <name pos:line="121" pos:column="15">unsigned<pos:position pos:line="121" pos:column="23"/></name> <name pos:line="121" pos:column="24">char<pos:position pos:line="121" pos:column="28"/></name> <modifier pos:line="121" pos:column="29">*<pos:position pos:line="121" pos:column="30"/></modifier></type><name pos:line="121" pos:column="30">next_proto<pos:position pos:line="121" pos:column="40"/></name> <init pos:line="121" pos:column="41">= <expr><name pos:line="121" pos:column="43">NULL<pos:position pos:line="121" pos:column="47"/></name></expr></init></decl>;<pos:position pos:line="121" pos:column="48"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="122" pos:column="9">unsigned<pos:position pos:line="122" pos:column="17"/></name></type> <name pos:line="122" pos:column="18">next_proto_len<pos:position pos:line="122" pos:column="32"/></name> <init pos:line="122" pos:column="33">= <expr><literal type="number" pos:line="122" pos:column="35">0<pos:position pos:line="122" pos:column="36"/></literal></expr></init></decl>;<pos:position pos:line="122" pos:column="37"/></decl_stmt>
        <decl_stmt><decl><type><specifier pos:line="123" pos:column="9">const<pos:position pos:line="123" pos:column="14"/></specifier> <name pos:line="123" pos:column="15">char<pos:position pos:line="123" pos:column="19"/></name> <modifier pos:line="123" pos:column="20">*<pos:position pos:line="123" pos:column="21"/></modifier></type><name pos:line="123" pos:column="21">protocol<pos:position pos:line="123" pos:column="29"/></name></decl>;<pos:position pos:line="123" pos:column="30"/></decl_stmt>

        <expr_stmt><expr><call><name pos:line="125" pos:column="9">SSL_get0_alpn_selected<pos:position pos:line="125" pos:column="31"/></name><argument_list pos:line="125" pos:column="31">(<argument><expr><name><name pos:line="125" pos:column="32">inctx<pos:position pos:line="125" pos:column="37"/></name><operator pos:line="125" pos:column="37">-&gt;<pos:position pos:line="125" pos:column="42"/></operator><name pos:line="125" pos:column="39">ssl<pos:position pos:line="125" pos:column="42"/></name></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="44">&amp;<pos:position pos:line="125" pos:column="49"/></operator><name pos:line="125" pos:column="45">next_proto<pos:position pos:line="125" pos:column="55"/></name></expr></argument>, <argument><expr><operator pos:line="125" pos:column="57">&amp;<pos:position pos:line="125" pos:column="62"/></operator><name pos:line="125" pos:column="58">next_proto_len<pos:position pos:line="125" pos:column="72"/></name></expr></argument>)<pos:position pos:line="125" pos:column="73"/></argument_list></call></expr>;<pos:position pos:line="125" pos:column="74"/></expr_stmt>
        <if pos:line="126" pos:column="9">if <condition pos:line="126" pos:column="12">(<expr><name pos:line="126" pos:column="13">next_proto<pos:position pos:line="126" pos:column="23"/></name> <operator pos:line="126" pos:column="24">&amp;&amp;<pos:position pos:line="126" pos:column="34"/></operator> <name pos:line="126" pos:column="27">next_proto_len<pos:position pos:line="126" pos:column="41"/></name></expr>)<pos:position pos:line="126" pos:column="42"/></condition><then pos:line="126" pos:column="42"> <block pos:line="126" pos:column="43">{
            <expr_stmt><expr><name pos:line="127" pos:column="13">protocol<pos:position pos:line="127" pos:column="21"/></name> <operator pos:line="127" pos:column="22">=<pos:position pos:line="127" pos:column="23"/></operator> <call><name pos:line="127" pos:column="24">apr_pstrmemdup<pos:position pos:line="127" pos:column="38"/></name><argument_list pos:line="127" pos:column="38">(<argument><expr><name><name pos:line="127" pos:column="39">f<pos:position pos:line="127" pos:column="40"/></name><operator pos:line="127" pos:column="40">-&gt;<pos:position pos:line="127" pos:column="45"/></operator><name pos:line="127" pos:column="42">c<pos:position pos:line="127" pos:column="43"/></name><operator pos:line="127" pos:column="43">-&gt;<pos:position pos:line="127" pos:column="48"/></operator><name pos:line="127" pos:column="45">pool<pos:position pos:line="127" pos:column="49"/></name></name></expr></argument>, <argument><expr><operator pos:line="127" pos:column="51">(<pos:position pos:line="127" pos:column="52"/></operator><specifier pos:line="127" pos:column="52">const<pos:position pos:line="127" pos:column="57"/></specifier> <name pos:line="127" pos:column="58">char<pos:position pos:line="127" pos:column="62"/></name> <operator pos:line="127" pos:column="63">*<pos:position pos:line="127" pos:column="64"/></operator><operator pos:line="127" pos:column="64">)<pos:position pos:line="127" pos:column="65"/></operator><name pos:line="127" pos:column="65">next_proto<pos:position pos:line="127" pos:column="75"/></name></expr></argument>,
                                       <argument><expr><name pos:line="128" pos:column="40">next_proto_len<pos:position pos:line="128" pos:column="54"/></name></expr></argument>)<pos:position pos:line="128" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="128" pos:column="56"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="129" pos:column="13">ap_log_cerror<pos:position pos:line="129" pos:column="26"/></name><argument_list pos:line="129" pos:column="26">(<argument><expr><name pos:line="129" pos:column="27">APLOG_MARK<pos:position pos:line="129" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="39">APLOG_DEBUG<pos:position pos:line="129" pos:column="50"/></name></expr></argument>, <argument><expr><name pos:line="129" pos:column="52">APR_SUCCESS<pos:position pos:line="129" pos:column="63"/></name></expr></argument>, <argument><expr><name><name pos:line="129" pos:column="65">f<pos:position pos:line="129" pos:column="66"/></name><operator pos:line="129" pos:column="66">-&gt;<pos:position pos:line="129" pos:column="71"/></operator><name pos:line="129" pos:column="68">c<pos:position pos:line="129" pos:column="69"/></name></name></expr></argument>,
                          <argument><expr><call><name pos:line="130" pos:column="27">APLOGNO<pos:position pos:line="130" pos:column="34"/></name><argument_list pos:line="130" pos:column="34">(<argument><expr><literal type="number" pos:line="130" pos:column="35">02836<pos:position pos:line="130" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="130" pos:column="41"/></argument_list></call> <literal type="string" pos:line="130" pos:column="42">"ALPN selected protocol: '%s'"<pos:position pos:line="130" pos:column="72"/></literal></expr></argument>,
                          <argument><expr><name pos:line="131" pos:column="27">protocol<pos:position pos:line="131" pos:column="35"/></name></expr></argument>)<pos:position pos:line="131" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="131" pos:column="37"/></expr_stmt>
            
            <if pos:line="133" pos:column="13">if <condition pos:line="133" pos:column="16">(<expr><call><name pos:line="133" pos:column="17">strcmp<pos:position pos:line="133" pos:column="23"/></name><argument_list pos:line="133" pos:column="23">(<argument><expr><name pos:line="133" pos:column="24">protocol<pos:position pos:line="133" pos:column="32"/></name></expr></argument>, <argument><expr><call><name pos:line="133" pos:column="34">ap_get_protocol<pos:position pos:line="133" pos:column="49"/></name><argument_list pos:line="133" pos:column="49">(<argument><expr><name><name pos:line="133" pos:column="50">f<pos:position pos:line="133" pos:column="51"/></name><operator pos:line="133" pos:column="51">-&gt;<pos:position pos:line="133" pos:column="56"/></operator><name pos:line="133" pos:column="53">c<pos:position pos:line="133" pos:column="54"/></name></name></expr></argument>)<pos:position pos:line="133" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="133" pos:column="56"/></argument_list></call></expr>)<pos:position pos:line="133" pos:column="57"/></condition><then pos:line="133" pos:column="57"> <block pos:line="133" pos:column="58">{
                <expr_stmt><expr><name pos:line="134" pos:column="17">status<pos:position pos:line="134" pos:column="23"/></name> <operator pos:line="134" pos:column="24">=<pos:position pos:line="134" pos:column="25"/></operator> <call><name pos:line="134" pos:column="26">ap_switch_protocol<pos:position pos:line="134" pos:column="44"/></name><argument_list pos:line="134" pos:column="44">(<argument><expr><name><name pos:line="134" pos:column="45">f<pos:position pos:line="134" pos:column="46"/></name><operator pos:line="134" pos:column="46">-&gt;<pos:position pos:line="134" pos:column="51"/></operator><name pos:line="134" pos:column="48">c<pos:position pos:line="134" pos:column="49"/></name></name></expr></argument>, <argument><expr><name pos:line="134" pos:column="51">NULL<pos:position pos:line="134" pos:column="55"/></name></expr></argument>, <argument><expr><name><name pos:line="134" pos:column="57">sslconn<pos:position pos:line="134" pos:column="64"/></name><operator pos:line="134" pos:column="64">-&gt;<pos:position pos:line="134" pos:column="69"/></operator><name pos:line="134" pos:column="66">server<pos:position pos:line="134" pos:column="72"/></name></name></expr></argument>,
                                            <argument><expr><name pos:line="135" pos:column="45">protocol<pos:position pos:line="135" pos:column="53"/></name></expr></argument>)<pos:position pos:line="135" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="135" pos:column="55"/></expr_stmt>
                <if pos:line="136" pos:column="17">if <condition pos:line="136" pos:column="20">(<expr><name pos:line="136" pos:column="21">status<pos:position pos:line="136" pos:column="27"/></name> <operator pos:line="136" pos:column="28">!=<pos:position pos:line="136" pos:column="30"/></operator> <name pos:line="136" pos:column="31">APR_SUCCESS<pos:position pos:line="136" pos:column="42"/></name></expr>)<pos:position pos:line="136" pos:column="43"/></condition><then pos:line="136" pos:column="43"> <block pos:line="136" pos:column="44">{
                    <expr_stmt><expr><call><name pos:line="137" pos:column="21">ap_log_cerror<pos:position pos:line="137" pos:column="34"/></name><argument_list pos:line="137" pos:column="34">(<argument><expr><name pos:line="137" pos:column="35">APLOG_MARK<pos:position pos:line="137" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="47">APLOG_ERR<pos:position pos:line="137" pos:column="56"/></name></expr></argument>, <argument><expr><name pos:line="137" pos:column="58">status<pos:position pos:line="137" pos:column="64"/></name></expr></argument>, <argument><expr><name><name pos:line="137" pos:column="66">f<pos:position pos:line="137" pos:column="67"/></name><operator pos:line="137" pos:column="67">-&gt;<pos:position pos:line="137" pos:column="72"/></operator><name pos:line="137" pos:column="69">c<pos:position pos:line="137" pos:column="70"/></name></name></expr></argument>,
                                  <argument><expr><call><name pos:line="138" pos:column="35">APLOGNO<pos:position pos:line="138" pos:column="42"/></name><argument_list pos:line="138" pos:column="42">(<argument><expr><literal type="number" pos:line="138" pos:column="43">02908<pos:position pos:line="138" pos:column="48"/></literal></expr></argument>)<pos:position pos:line="138" pos:column="49"/></argument_list></call> <literal type="string" pos:line="138" pos:column="50">"protocol switch to '%s' failed"<pos:position pos:line="138" pos:column="82"/></literal></expr></argument>,
                                  <argument><expr><name pos:line="139" pos:column="35">protocol<pos:position pos:line="139" pos:column="43"/></name></expr></argument>)<pos:position pos:line="139" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="139" pos:column="45"/></expr_stmt>
                    <return pos:line="140" pos:column="21">return <expr><name pos:line="140" pos:column="28">status<pos:position pos:line="140" pos:column="34"/></name></expr>;<pos:position pos:line="140" pos:column="35"/></return>
                }<pos:position pos:line="141" pos:column="18"/></block></then></if>
            }<pos:position pos:line="142" pos:column="14"/></block></then></if>
        }<pos:position pos:line="143" pos:column="10"/></block></then></if>
        <expr_stmt><expr><name><name pos:line="144" pos:column="9">inctx<pos:position pos:line="144" pos:column="14"/></name><operator pos:line="144" pos:column="14">-&gt;<pos:position pos:line="144" pos:column="19"/></operator><name pos:line="144" pos:column="16">alpn_finished<pos:position pos:line="144" pos:column="29"/></name></name> <operator pos:line="144" pos:column="30">=<pos:position pos:line="144" pos:column="31"/></operator> <literal type="number" pos:line="144" pos:column="32">1<pos:position pos:line="144" pos:column="33"/></literal></expr>;<pos:position pos:line="144" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="145" pos:column="6"/></block></then></if>
<cpp:endif pos:line="146" pos:column="1">#<cpp:directive pos:line="146" pos:column="2">endif<pos:position pos:line="146" pos:column="7"/></cpp:directive></cpp:endif>

    <return pos:line="148" pos:column="5">return <expr><name pos:line="148" pos:column="12">APR_SUCCESS<pos:position pos:line="148" pos:column="23"/></name></expr>;<pos:position pos:line="148" pos:column="24"/></return>
}<pos:position pos:line="149" pos:column="2"/></block></function></unit>
