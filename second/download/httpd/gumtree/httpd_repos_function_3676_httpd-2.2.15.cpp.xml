<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_3676_httpd-2.2.15.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">char<pos:position pos:line="1" pos:column="12"/></name> <modifier pos:line="1" pos:column="13">*<pos:position pos:line="1" pos:column="14"/></modifier></type><name pos:line="1" pos:column="14">conv_apr_sockaddr<pos:position pos:line="1" pos:column="31"/></name><parameter_list pos:line="1" pos:column="31">(<parameter><decl><type><name pos:line="1" pos:column="32">apr_sockaddr_t<pos:position pos:line="1" pos:column="46"/></name> <modifier pos:line="1" pos:column="47">*<pos:position pos:line="1" pos:column="48"/></modifier></type><name pos:line="1" pos:column="48">sa<pos:position pos:line="1" pos:column="50"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="52">char<pos:position pos:line="1" pos:column="56"/></name> <modifier pos:line="1" pos:column="57">*<pos:position pos:line="1" pos:column="58"/></modifier></type><name pos:line="1" pos:column="58">buf_end<pos:position pos:line="1" pos:column="65"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="67">apr_size_t<pos:position pos:line="1" pos:column="77"/></name> <modifier pos:line="1" pos:column="78">*<pos:position pos:line="1" pos:column="79"/></modifier></type><name pos:line="1" pos:column="79">len<pos:position pos:line="1" pos:column="82"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="83"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <decl_stmt><decl><type><name pos:line="3" pos:column="5">char<pos:position pos:line="3" pos:column="9"/></name> <modifier pos:line="3" pos:column="10">*<pos:position pos:line="3" pos:column="11"/></modifier></type><name pos:line="3" pos:column="11">p<pos:position pos:line="3" pos:column="12"/></name> <init pos:line="3" pos:column="13">= <expr><name pos:line="3" pos:column="15">buf_end<pos:position pos:line="3" pos:column="22"/></name></expr></init></decl>;<pos:position pos:line="3" pos:column="23"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="4" pos:column="5">int<pos:position pos:line="4" pos:column="8"/></name></type> <name pos:line="4" pos:column="9">is_negative<pos:position pos:line="4" pos:column="20"/></name></decl>;<pos:position pos:line="4" pos:column="21"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="5" pos:column="5">apr_size_t<pos:position pos:line="5" pos:column="15"/></name></type> <name pos:line="5" pos:column="16">sub_len<pos:position pos:line="5" pos:column="23"/></name></decl>;<pos:position pos:line="5" pos:column="24"/></decl_stmt>
    <decl_stmt><decl><type><name pos:line="6" pos:column="5">char<pos:position pos:line="6" pos:column="9"/></name> <modifier pos:line="6" pos:column="10">*<pos:position pos:line="6" pos:column="11"/></modifier></type><name pos:line="6" pos:column="11">ipaddr_str<pos:position pos:line="6" pos:column="21"/></name></decl>;<pos:position pos:line="6" pos:column="22"/></decl_stmt>

    <expr_stmt><expr><name pos:line="8" pos:column="5">p<pos:position pos:line="8" pos:column="6"/></name> <operator pos:line="8" pos:column="7">=<pos:position pos:line="8" pos:column="8"/></operator> <call><name pos:line="8" pos:column="9">conv_10<pos:position pos:line="8" pos:column="16"/></name><argument_list pos:line="8" pos:column="16">(<argument><expr><name><name pos:line="8" pos:column="17">sa<pos:position pos:line="8" pos:column="19"/></name><operator pos:line="8" pos:column="19">-&gt;<pos:position pos:line="8" pos:column="24"/></operator><name pos:line="8" pos:column="21">port<pos:position pos:line="8" pos:column="25"/></name></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="27">TRUE<pos:position pos:line="8" pos:column="31"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="33">&amp;<pos:position pos:line="8" pos:column="38"/></operator><name pos:line="8" pos:column="34">is_negative<pos:position pos:line="8" pos:column="45"/></name></expr></argument>, <argument><expr><name pos:line="8" pos:column="47">p<pos:position pos:line="8" pos:column="48"/></name></expr></argument>, <argument><expr><operator pos:line="8" pos:column="50">&amp;<pos:position pos:line="8" pos:column="55"/></operator><name pos:line="8" pos:column="51">sub_len<pos:position pos:line="8" pos:column="58"/></name></expr></argument>)<pos:position pos:line="8" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="60"/></expr_stmt>
    <expr_stmt><expr><operator pos:line="9" pos:column="5">*<pos:position pos:line="9" pos:column="6"/></operator><operator pos:line="9" pos:column="6">--<pos:position pos:line="9" pos:column="8"/></operator><name pos:line="9" pos:column="8">p<pos:position pos:line="9" pos:column="9"/></name> <operator pos:line="9" pos:column="10">=<pos:position pos:line="9" pos:column="11"/></operator> <literal type="char" pos:line="9" pos:column="12">':'<pos:position pos:line="9" pos:column="15"/></literal></expr>;<pos:position pos:line="9" pos:column="16"/></expr_stmt>
    <expr_stmt><expr><name pos:line="10" pos:column="5">ipaddr_str<pos:position pos:line="10" pos:column="15"/></name> <operator pos:line="10" pos:column="16">=<pos:position pos:line="10" pos:column="17"/></operator> <name pos:line="10" pos:column="18">buf_end<pos:position pos:line="10" pos:column="25"/></name> <operator pos:line="10" pos:column="26">-<pos:position pos:line="10" pos:column="27"/></operator> <name pos:line="10" pos:column="28">NUM_BUF_SIZE<pos:position pos:line="10" pos:column="40"/></name></expr>;<pos:position pos:line="10" pos:column="41"/></expr_stmt>
    <if pos:line="11" pos:column="5">if <condition pos:line="11" pos:column="8">(<expr><call><name pos:line="11" pos:column="9">apr_sockaddr_ip_getbuf<pos:position pos:line="11" pos:column="31"/></name><argument_list pos:line="11" pos:column="31">(<argument><expr><name pos:line="11" pos:column="32">ipaddr_str<pos:position pos:line="11" pos:column="42"/></name></expr></argument>, <argument><expr><name><name pos:line="11" pos:column="44">sa<pos:position pos:line="11" pos:column="46"/></name><operator pos:line="11" pos:column="46">-&gt;<pos:position pos:line="11" pos:column="51"/></operator><name pos:line="11" pos:column="48">addr_str_len<pos:position pos:line="11" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="62">sa<pos:position pos:line="11" pos:column="64"/></name></expr></argument>)<pos:position pos:line="11" pos:column="65"/></argument_list></call></expr>)<pos:position pos:line="11" pos:column="66"/></condition><then pos:line="11" pos:column="66"> <block pos:line="11" pos:column="67">{
        <comment type="block" pos:line="12" pos:column="9">/* Should only fail if the buffer is too small, which it
         * should not be; but fail safe anyway: */</comment>
        <expr_stmt><expr><operator pos:line="14" pos:column="9">*<pos:position pos:line="14" pos:column="10"/></operator><operator pos:line="14" pos:column="10">--<pos:position pos:line="14" pos:column="12"/></operator><name pos:line="14" pos:column="12">p<pos:position pos:line="14" pos:column="13"/></name> <operator pos:line="14" pos:column="14">=<pos:position pos:line="14" pos:column="15"/></operator> <literal type="char" pos:line="14" pos:column="16">'?'<pos:position pos:line="14" pos:column="19"/></literal></expr>;<pos:position pos:line="14" pos:column="20"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="15" pos:column="9">*<pos:position pos:line="15" pos:column="10"/></operator><name pos:line="15" pos:column="10">len<pos:position pos:line="15" pos:column="13"/></name> <operator pos:line="15" pos:column="14">=<pos:position pos:line="15" pos:column="15"/></operator> <name pos:line="15" pos:column="16">buf_end<pos:position pos:line="15" pos:column="23"/></name> <operator pos:line="15" pos:column="24">-<pos:position pos:line="15" pos:column="25"/></operator> <name pos:line="15" pos:column="26">p<pos:position pos:line="15" pos:column="27"/></name></expr>;<pos:position pos:line="15" pos:column="28"/></expr_stmt>
        <return pos:line="16" pos:column="9">return <expr><name pos:line="16" pos:column="16">p<pos:position pos:line="16" pos:column="17"/></name></expr>;<pos:position pos:line="16" pos:column="18"/></return>
    }<pos:position pos:line="17" pos:column="6"/></block></then></if>
    <expr_stmt><expr><name pos:line="18" pos:column="5">sub_len<pos:position pos:line="18" pos:column="12"/></name> <operator pos:line="18" pos:column="13">=<pos:position pos:line="18" pos:column="14"/></operator> <call><name pos:line="18" pos:column="15">strlen<pos:position pos:line="18" pos:column="21"/></name><argument_list pos:line="18" pos:column="21">(<argument><expr><name pos:line="18" pos:column="22">ipaddr_str<pos:position pos:line="18" pos:column="32"/></name></expr></argument>)<pos:position pos:line="18" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="18" pos:column="34"/></expr_stmt>
<cpp:if pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">if<pos:position pos:line="19" pos:column="4"/></cpp:directive> <expr><name pos:line="19" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="19" pos:column="18"/></name></expr></cpp:if>
    <if pos:line="20" pos:column="5">if <condition pos:line="20" pos:column="8">(<expr><name><name pos:line="20" pos:column="9">sa<pos:position pos:line="20" pos:column="11"/></name><operator pos:line="20" pos:column="11">-&gt;<pos:position pos:line="20" pos:column="16"/></operator><name pos:line="20" pos:column="13">family<pos:position pos:line="20" pos:column="19"/></name></name> <operator pos:line="20" pos:column="20">==<pos:position pos:line="20" pos:column="22"/></operator> <name pos:line="20" pos:column="23">APR_INET6<pos:position pos:line="20" pos:column="32"/></name> <operator pos:line="20" pos:column="33">&amp;&amp;<pos:position pos:line="20" pos:column="43"/></operator>
        <operator pos:line="21" pos:column="9">!<pos:position pos:line="21" pos:column="10"/></operator><call><name pos:line="21" pos:column="10">IN6_IS_ADDR_V4MAPPED<pos:position pos:line="21" pos:column="30"/></name><argument_list pos:line="21" pos:column="30">(<argument><expr><operator pos:line="21" pos:column="31">&amp;<pos:position pos:line="21" pos:column="36"/></operator><name><name pos:line="21" pos:column="32">sa<pos:position pos:line="21" pos:column="34"/></name><operator pos:line="21" pos:column="34">-&gt;<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="36">sa<pos:position pos:line="21" pos:column="38"/></name><operator pos:line="21" pos:column="38">.<pos:position pos:line="21" pos:column="39"/></operator><name pos:line="21" pos:column="39">sin6<pos:position pos:line="21" pos:column="43"/></name><operator pos:line="21" pos:column="43">.<pos:position pos:line="21" pos:column="44"/></operator><name pos:line="21" pos:column="44">sin6_addr<pos:position pos:line="21" pos:column="53"/></name></name></expr></argument>)<pos:position pos:line="21" pos:column="54"/></argument_list></call></expr>)<pos:position pos:line="21" pos:column="55"/></condition><then pos:line="21" pos:column="55"> <block pos:line="21" pos:column="56">{
        <expr_stmt><expr><operator pos:line="22" pos:column="9">*<pos:position pos:line="22" pos:column="10"/></operator><operator pos:line="22" pos:column="10">(<pos:position pos:line="22" pos:column="11"/></operator><name pos:line="22" pos:column="11">p<pos:position pos:line="22" pos:column="12"/></name> <operator pos:line="22" pos:column="13">-<pos:position pos:line="22" pos:column="14"/></operator> <literal type="number" pos:line="22" pos:column="15">1<pos:position pos:line="22" pos:column="16"/></literal><operator pos:line="22" pos:column="16">)<pos:position pos:line="22" pos:column="17"/></operator> <operator pos:line="22" pos:column="18">=<pos:position pos:line="22" pos:column="19"/></operator> <literal type="char" pos:line="22" pos:column="20">']'<pos:position pos:line="22" pos:column="23"/></literal></expr>;<pos:position pos:line="22" pos:column="24"/></expr_stmt>
        <expr_stmt><expr><name pos:line="23" pos:column="9">p<pos:position pos:line="23" pos:column="10"/></name> <operator pos:line="23" pos:column="11">-=<pos:position pos:line="23" pos:column="13"/></operator> <name pos:line="23" pos:column="14">sub_len<pos:position pos:line="23" pos:column="21"/></name> <operator pos:line="23" pos:column="22">+<pos:position pos:line="23" pos:column="23"/></operator> <literal type="number" pos:line="23" pos:column="24">2<pos:position pos:line="23" pos:column="25"/></literal></expr>;<pos:position pos:line="23" pos:column="26"/></expr_stmt>
        <expr_stmt><expr><operator pos:line="24" pos:column="9">*<pos:position pos:line="24" pos:column="10"/></operator><name pos:line="24" pos:column="10">p<pos:position pos:line="24" pos:column="11"/></name> <operator pos:line="24" pos:column="12">=<pos:position pos:line="24" pos:column="13"/></operator> <literal type="char" pos:line="24" pos:column="14">'['<pos:position pos:line="24" pos:column="17"/></literal></expr>;<pos:position pos:line="24" pos:column="18"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="25" pos:column="9">memcpy<pos:position pos:line="25" pos:column="15"/></name><argument_list pos:line="25" pos:column="15">(<argument><expr><name pos:line="25" pos:column="16">p<pos:position pos:line="25" pos:column="17"/></name> <operator pos:line="25" pos:column="18">+<pos:position pos:line="25" pos:column="19"/></operator> <literal type="number" pos:line="25" pos:column="20">1<pos:position pos:line="25" pos:column="21"/></literal></expr></argument>, <argument><expr><name pos:line="25" pos:column="23">ipaddr_str<pos:position pos:line="25" pos:column="33"/></name></expr></argument>, <argument><expr><name pos:line="25" pos:column="35">sub_len<pos:position pos:line="25" pos:column="42"/></name></expr></argument>)<pos:position pos:line="25" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="25" pos:column="44"/></expr_stmt>
    }<pos:position pos:line="26" pos:column="6"/></block></then>
    <else pos:line="27" pos:column="5">else
<cpp:endif pos:line="28" pos:column="1">#<cpp:directive pos:line="28" pos:column="2">endif<pos:position pos:line="28" pos:column="7"/></cpp:directive></cpp:endif>
    <block pos:line="29" pos:column="5">{
        <expr_stmt><expr><name pos:line="30" pos:column="9">p<pos:position pos:line="30" pos:column="10"/></name> <operator pos:line="30" pos:column="11">-=<pos:position pos:line="30" pos:column="13"/></operator> <name pos:line="30" pos:column="14">sub_len<pos:position pos:line="30" pos:column="21"/></name></expr>;<pos:position pos:line="30" pos:column="22"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="31" pos:column="9">memcpy<pos:position pos:line="31" pos:column="15"/></name><argument_list pos:line="31" pos:column="15">(<argument><expr><name pos:line="31" pos:column="16">p<pos:position pos:line="31" pos:column="17"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="19">ipaddr_str<pos:position pos:line="31" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="31" pos:column="31">sub_len<pos:position pos:line="31" pos:column="38"/></name></expr></argument>)<pos:position pos:line="31" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="31" pos:column="40"/></expr_stmt>
    }<pos:position pos:line="32" pos:column="6"/></block></else></if>

    <expr_stmt><expr><operator pos:line="34" pos:column="5">*<pos:position pos:line="34" pos:column="6"/></operator><name pos:line="34" pos:column="6">len<pos:position pos:line="34" pos:column="9"/></name> <operator pos:line="34" pos:column="10">=<pos:position pos:line="34" pos:column="11"/></operator> <name pos:line="34" pos:column="12">buf_end<pos:position pos:line="34" pos:column="19"/></name> <operator pos:line="34" pos:column="20">-<pos:position pos:line="34" pos:column="21"/></operator> <name pos:line="34" pos:column="22">p<pos:position pos:line="34" pos:column="23"/></name></expr>;<pos:position pos:line="34" pos:column="24"/></expr_stmt>
    <return pos:line="35" pos:column="5">return <expr><operator pos:line="35" pos:column="12">(<pos:position pos:line="35" pos:column="13"/></operator><name pos:line="35" pos:column="13">p<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">)<pos:position pos:line="35" pos:column="15"/></operator></expr>;<pos:position pos:line="35" pos:column="16"/></return>
}<pos:position pos:line="36" pos:column="2"/></block></function></unit>
