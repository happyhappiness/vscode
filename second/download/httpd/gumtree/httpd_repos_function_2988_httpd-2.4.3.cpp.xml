<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2988_httpd-2.4.3.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">write_logline<pos:position pos:line="1" pos:column="26"/></name><parameter_list pos:line="1" pos:column="26">(<parameter><decl><type><name pos:line="1" pos:column="27">char<pos:position pos:line="1" pos:column="31"/></name> <modifier pos:line="1" pos:column="32">*<pos:position pos:line="1" pos:column="33"/></modifier></type><name pos:line="1" pos:column="33">errstr<pos:position pos:line="1" pos:column="39"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="41">apr_size_t<pos:position pos:line="1" pos:column="51"/></name></type> <name pos:line="1" pos:column="52">len<pos:position pos:line="1" pos:column="55"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1" pos:column="57">apr_file_t<pos:position pos:line="1" pos:column="67"/></name> <modifier pos:line="1" pos:column="68">*<pos:position pos:line="1" pos:column="69"/></modifier></type><name pos:line="1" pos:column="69">logf<pos:position pos:line="1" pos:column="73"/></name></decl></parameter>,
                          <parameter><decl><type><name pos:line="2" pos:column="27">int<pos:position pos:line="2" pos:column="30"/></name></type> <name pos:line="2" pos:column="31">level<pos:position pos:line="2" pos:column="36"/></name></decl></parameter>)<pos:position pos:line="2" pos:column="37"/></parameter_list>
<block pos:line="3" pos:column="1">{
    <comment type="block" pos:line="4" pos:column="5">/* NULL if we are logging to syslog */</comment>
    <if pos:line="5" pos:column="5">if <condition pos:line="5" pos:column="8">(<expr><name pos:line="5" pos:column="9">logf<pos:position pos:line="5" pos:column="13"/></name></expr>)<pos:position pos:line="5" pos:column="14"/></condition><then pos:line="5" pos:column="14"> <block pos:line="5" pos:column="15">{
        <comment type="block" pos:line="6" pos:column="9">/* Truncate for the terminator (as apr_snprintf does) */</comment>
        <if pos:line="7" pos:column="9">if <condition pos:line="7" pos:column="12">(<expr><name pos:line="7" pos:column="13">len<pos:position pos:line="7" pos:column="16"/></name> <operator pos:line="7" pos:column="17">&gt;<pos:position pos:line="7" pos:column="21"/></operator> <name pos:line="7" pos:column="19">MAX_STRING_LEN<pos:position pos:line="7" pos:column="33"/></name> <operator pos:line="7" pos:column="34">-<pos:position pos:line="7" pos:column="35"/></operator> <sizeof pos:line="7" pos:column="36">sizeof<argument_list pos:line="7" pos:column="42">(<argument><expr><name pos:line="7" pos:column="43">APR_EOL_STR<pos:position pos:line="7" pos:column="54"/></name></expr></argument>)<pos:position pos:line="7" pos:column="55"/></argument_list></sizeof></expr>)<pos:position pos:line="7" pos:column="56"/></condition><then pos:line="7" pos:column="56"> <block pos:line="7" pos:column="57">{
            <expr_stmt><expr><name pos:line="8" pos:column="13">len<pos:position pos:line="8" pos:column="16"/></name> <operator pos:line="8" pos:column="17">=<pos:position pos:line="8" pos:column="18"/></operator> <name pos:line="8" pos:column="19">MAX_STRING_LEN<pos:position pos:line="8" pos:column="33"/></name> <operator pos:line="8" pos:column="34">-<pos:position pos:line="8" pos:column="35"/></operator> <sizeof pos:line="8" pos:column="36">sizeof<argument_list pos:line="8" pos:column="42">(<argument><expr><name pos:line="8" pos:column="43">APR_EOL_STR<pos:position pos:line="8" pos:column="54"/></name></expr></argument>)<pos:position pos:line="8" pos:column="55"/></argument_list></sizeof></expr>;<pos:position pos:line="8" pos:column="56"/></expr_stmt>
        }<pos:position pos:line="9" pos:column="10"/></block></then></if>
        <expr_stmt><expr><call><name pos:line="10" pos:column="9">strcpy<pos:position pos:line="10" pos:column="15"/></name><argument_list pos:line="10" pos:column="15">(<argument><expr><name pos:line="10" pos:column="16">errstr<pos:position pos:line="10" pos:column="22"/></name> <operator pos:line="10" pos:column="23">+<pos:position pos:line="10" pos:column="24"/></operator> <name pos:line="10" pos:column="25">len<pos:position pos:line="10" pos:column="28"/></name></expr></argument>, <argument><expr><name pos:line="10" pos:column="30">APR_EOL_STR<pos:position pos:line="10" pos:column="41"/></name></expr></argument>)<pos:position pos:line="10" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="10" pos:column="43"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="11" pos:column="9">apr_file_puts<pos:position pos:line="11" pos:column="22"/></name><argument_list pos:line="11" pos:column="22">(<argument><expr><name pos:line="11" pos:column="23">errstr<pos:position pos:line="11" pos:column="29"/></name></expr></argument>, <argument><expr><name pos:line="11" pos:column="31">logf<pos:position pos:line="11" pos:column="35"/></name></expr></argument>)<pos:position pos:line="11" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="11" pos:column="37"/></expr_stmt>
        <expr_stmt><expr><call><name pos:line="12" pos:column="9">apr_file_flush<pos:position pos:line="12" pos:column="23"/></name><argument_list pos:line="12" pos:column="23">(<argument><expr><name pos:line="12" pos:column="24">logf<pos:position pos:line="12" pos:column="28"/></name></expr></argument>)<pos:position pos:line="12" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="30"/></expr_stmt>
    }<pos:position pos:line="13" pos:column="6"/></block></then>
<cpp:ifdef pos:line="14" pos:column="1">#<cpp:directive pos:line="14" pos:column="2">ifdef<pos:position pos:line="14" pos:column="7"/></cpp:directive> <name pos:line="14" pos:column="8">HAVE_SYSLOG<pos:position pos:line="14" pos:column="19"/></name></cpp:ifdef>
    <else pos:line="15" pos:column="5">else <block pos:line="15" pos:column="10">{
        <expr_stmt><expr><call><name pos:line="16" pos:column="9">syslog<pos:position pos:line="16" pos:column="15"/></name><argument_list pos:line="16" pos:column="15">(<argument><expr><ternary><condition><expr><name pos:line="16" pos:column="16">level<pos:position pos:line="16" pos:column="21"/></name> <operator pos:line="16" pos:column="22">&lt;<pos:position pos:line="16" pos:column="26"/></operator> <name pos:line="16" pos:column="24">LOG_PRIMASK<pos:position pos:line="16" pos:column="35"/></name></expr> ?<pos:position pos:line="16" pos:column="37"/></condition><then pos:line="16" pos:column="37"> <expr><name pos:line="16" pos:column="38">level<pos:position pos:line="16" pos:column="43"/></name></expr> <pos:position pos:line="16" pos:column="44"/></then><else pos:line="16" pos:column="44">: <expr><name pos:line="16" pos:column="46">APLOG_DEBUG<pos:position pos:line="16" pos:column="57"/></name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string" pos:line="16" pos:column="59">"%s"<pos:position pos:line="16" pos:column="63"/></literal></expr></argument>, <argument><expr><name pos:line="16" pos:column="65">errstr<pos:position pos:line="16" pos:column="71"/></name></expr></argument>)<pos:position pos:line="16" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="16" pos:column="73"/></expr_stmt>
    }<pos:position pos:line="17" pos:column="6"/></block></else></if>
<cpp:endif pos:line="18" pos:column="1">#<cpp:directive pos:line="18" pos:column="2">endif<pos:position pos:line="18" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="19" pos:column="2"/></block></function></unit>
