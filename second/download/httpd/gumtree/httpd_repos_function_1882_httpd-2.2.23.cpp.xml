<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_1882_httpd-2.2.23.cpp" pos:tabs="8"><function><type><specifier pos:line="1" pos:column="1">const<pos:position pos:line="1" pos:column="6"/></specifier> <name pos:line="1" pos:column="7">char<pos:position pos:line="1" pos:column="11"/></name> <modifier pos:line="1" pos:column="12">*<pos:position pos:line="1" pos:column="13"/></modifier></type><name pos:line="1" pos:column="13">util_ald_strdup<pos:position pos:line="1" pos:column="28"/></name><parameter_list pos:line="1" pos:column="28">(<parameter><decl><type><name pos:line="1" pos:column="29">util_ald_cache_t<pos:position pos:line="1" pos:column="45"/></name> <modifier pos:line="1" pos:column="46">*<pos:position pos:line="1" pos:column="47"/></modifier></type><name pos:line="1" pos:column="47">cache<pos:position pos:line="1" pos:column="52"/></name></decl></parameter>, <parameter><decl><type><specifier pos:line="1" pos:column="54">const<pos:position pos:line="1" pos:column="59"/></specifier> <name pos:line="1" pos:column="60">char<pos:position pos:line="1" pos:column="64"/></name> <modifier pos:line="1" pos:column="65">*<pos:position pos:line="1" pos:column="66"/></modifier></type><name pos:line="1" pos:column="66">s<pos:position pos:line="1" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1" pos:column="68"/></parameter_list>
<block pos:line="2" pos:column="1">{
<cpp:if pos:line="3" pos:column="1">#<cpp:directive pos:line="3" pos:column="2">if<pos:position pos:line="3" pos:column="4"/></cpp:directive> <expr><name pos:line="3" pos:column="5">APR_HAS_SHARED_MEMORY<pos:position pos:line="3" pos:column="26"/></name></expr></cpp:if>
    <if pos:line="4" pos:column="5">if <condition pos:line="4" pos:column="8">(<expr><name><name pos:line="4" pos:column="9">cache<pos:position pos:line="4" pos:column="14"/></name><operator pos:line="4" pos:column="14">-&gt;<pos:position pos:line="4" pos:column="19"/></operator><name pos:line="4" pos:column="16">rmm_addr<pos:position pos:line="4" pos:column="24"/></name></name></expr>)<pos:position pos:line="4" pos:column="25"/></condition><then pos:line="4" pos:column="25"> <block pos:line="4" pos:column="26">{
        <comment type="block" pos:line="5" pos:column="9">/* allocate from shared memory */</comment>
        <decl_stmt><decl><type><name pos:line="6" pos:column="9">apr_rmm_off_t<pos:position pos:line="6" pos:column="22"/></name></type> <name pos:line="6" pos:column="23">block<pos:position pos:line="6" pos:column="28"/></name> <init pos:line="6" pos:column="29">= <expr><call><name pos:line="6" pos:column="31">apr_rmm_calloc<pos:position pos:line="6" pos:column="45"/></name><argument_list pos:line="6" pos:column="45">(<argument><expr><name><name pos:line="6" pos:column="46">cache<pos:position pos:line="6" pos:column="51"/></name><operator pos:line="6" pos:column="51">-&gt;<pos:position pos:line="6" pos:column="56"/></operator><name pos:line="6" pos:column="53">rmm_addr<pos:position pos:line="6" pos:column="61"/></name></name></expr></argument>, <argument><expr><call><name pos:line="6" pos:column="63">strlen<pos:position pos:line="6" pos:column="69"/></name><argument_list pos:line="6" pos:column="69">(<argument><expr><name pos:line="6" pos:column="70">s<pos:position pos:line="6" pos:column="71"/></name></expr></argument>)<pos:position pos:line="6" pos:column="72"/></argument_list></call><operator pos:line="6" pos:column="72">+<pos:position pos:line="6" pos:column="73"/></operator><literal type="number" pos:line="6" pos:column="73">1<pos:position pos:line="6" pos:column="74"/></literal></expr></argument>)<pos:position pos:line="6" pos:column="75"/></argument_list></call></expr></init></decl>;<pos:position pos:line="6" pos:column="76"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="7" pos:column="9">char<pos:position pos:line="7" pos:column="13"/></name> <modifier pos:line="7" pos:column="14">*<pos:position pos:line="7" pos:column="15"/></modifier></type><name pos:line="7" pos:column="15">buf<pos:position pos:line="7" pos:column="18"/></name> <init pos:line="7" pos:column="19">= <expr><ternary><condition><expr><name pos:line="7" pos:column="21">block<pos:position pos:line="7" pos:column="26"/></name></expr> ?<pos:position pos:line="7" pos:column="28"/></condition><then pos:line="7" pos:column="28"> <expr><operator pos:line="7" pos:column="29">(<pos:position pos:line="7" pos:column="30"/></operator><name pos:line="7" pos:column="30">char<pos:position pos:line="7" pos:column="34"/></name> <operator pos:line="7" pos:column="35">*<pos:position pos:line="7" pos:column="36"/></operator><operator pos:line="7" pos:column="36">)<pos:position pos:line="7" pos:column="37"/></operator><call><name pos:line="7" pos:column="37">apr_rmm_addr_get<pos:position pos:line="7" pos:column="53"/></name><argument_list pos:line="7" pos:column="53">(<argument><expr><name><name pos:line="7" pos:column="54">cache<pos:position pos:line="7" pos:column="59"/></name><operator pos:line="7" pos:column="59">-&gt;<pos:position pos:line="7" pos:column="64"/></operator><name pos:line="7" pos:column="61">rmm_addr<pos:position pos:line="7" pos:column="69"/></name></name></expr></argument>, <argument><expr><name pos:line="7" pos:column="71">block<pos:position pos:line="7" pos:column="76"/></name></expr></argument>)<pos:position pos:line="7" pos:column="77"/></argument_list></call></expr> <pos:position pos:line="7" pos:column="78"/></then><else pos:line="7" pos:column="78">: <expr><name pos:line="7" pos:column="80">NULL<pos:position pos:line="7" pos:column="84"/></name></expr></else></ternary></expr></init></decl>;<pos:position pos:line="7" pos:column="85"/></decl_stmt>
        <if pos:line="8" pos:column="9">if <condition pos:line="8" pos:column="12">(<expr><name pos:line="8" pos:column="13">buf<pos:position pos:line="8" pos:column="16"/></name></expr>)<pos:position pos:line="8" pos:column="17"/></condition><then pos:line="8" pos:column="17"> <block pos:line="8" pos:column="18">{
            <expr_stmt><expr><call><name pos:line="9" pos:column="13">strcpy<pos:position pos:line="9" pos:column="19"/></name><argument_list pos:line="9" pos:column="19">(<argument><expr><name pos:line="9" pos:column="20">buf<pos:position pos:line="9" pos:column="23"/></name></expr></argument>, <argument><expr><name pos:line="9" pos:column="25">s<pos:position pos:line="9" pos:column="26"/></name></expr></argument>)<pos:position pos:line="9" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="28"/></expr_stmt>
            <return pos:line="10" pos:column="13">return <expr><name pos:line="10" pos:column="20">buf<pos:position pos:line="10" pos:column="23"/></name></expr>;<pos:position pos:line="10" pos:column="24"/></return>
        }<pos:position pos:line="11" pos:column="10"/></block></then>
        <else pos:line="12" pos:column="9">else <block pos:line="12" pos:column="14">{
            <return pos:line="13" pos:column="13">return <expr><name pos:line="13" pos:column="20">NULL<pos:position pos:line="13" pos:column="24"/></name></expr>;<pos:position pos:line="13" pos:column="25"/></return>
        }<pos:position pos:line="14" pos:column="10"/></block></else></if>
    }<pos:position pos:line="15" pos:column="6"/></block></then> <else pos:line="15" pos:column="7">else <block pos:line="15" pos:column="12">{
        <comment type="block" pos:line="16" pos:column="9">/* Cache shm is not used */</comment>
        <return pos:line="17" pos:column="9">return <expr><call><name pos:line="17" pos:column="16">strdup<pos:position pos:line="17" pos:column="22"/></name><argument_list pos:line="17" pos:column="22">(<argument><expr><name pos:line="17" pos:column="23">s<pos:position pos:line="17" pos:column="24"/></name></expr></argument>)<pos:position pos:line="17" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="17" pos:column="26"/></return>
    }<pos:position pos:line="18" pos:column="6"/></block></else></if>
<cpp:else pos:line="19" pos:column="1">#<cpp:directive pos:line="19" pos:column="2">else<pos:position pos:line="19" pos:column="6"/></cpp:directive></cpp:else>
    <return pos:line="20" pos:column="5">return <expr><call><name pos:line="20" pos:column="12">strdup<pos:position pos:line="20" pos:column="18"/></name><argument_list pos:line="20" pos:column="18">(<argument><expr><name pos:line="20" pos:column="19">s<pos:position pos:line="20" pos:column="20"/></name></expr></argument>)<pos:position pos:line="20" pos:column="21"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="22"/></return>
<cpp:endif pos:line="21" pos:column="1">#<cpp:directive pos:line="21" pos:column="2">endif<pos:position pos:line="21" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="22" pos:column="2"/></block></function></unit>
