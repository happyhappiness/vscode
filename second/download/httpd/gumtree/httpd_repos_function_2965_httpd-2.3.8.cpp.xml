<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="C++" filename="usr/info/code/cpp/LogMonitor/LogMonitor/second/download/httpd/gumtree/httpd_repos_function_2965_httpd-2.3.8.cpp" pos:tabs="8"><function><specifier pos:line="1" pos:column="1">static<pos:position pos:line="1" pos:column="7"/></specifier> <type><name pos:line="1" pos:column="8">void<pos:position pos:line="1" pos:column="12"/></name></type> <name pos:line="1" pos:column="13">show_compile_settings<pos:position pos:line="1" pos:column="34"/></name><parameter_list pos:line="1" pos:column="34">(<parameter><decl><type><name pos:line="1" pos:column="35">void<pos:position pos:line="1" pos:column="39"/></name></type></decl></parameter>)<pos:position pos:line="1" pos:column="40"/></parameter_list>
<block pos:line="2" pos:column="1">{
    <expr_stmt><expr><call><name pos:line="3" pos:column="5">printf<pos:position pos:line="3" pos:column="11"/></name><argument_list pos:line="3" pos:column="11">(<argument><expr><literal type="string" pos:line="3" pos:column="12">"Server version: %s\n"<pos:position pos:line="3" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="3" pos:column="36">ap_get_server_description<pos:position pos:line="3" pos:column="61"/></name><argument_list pos:line="3" pos:column="61">()<pos:position pos:line="3" pos:column="63"/></argument_list></call></expr></argument>)<pos:position pos:line="3" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="3" pos:column="65"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="4" pos:column="5">printf<pos:position pos:line="4" pos:column="11"/></name><argument_list pos:line="4" pos:column="11">(<argument><expr><literal type="string" pos:line="4" pos:column="12">"Server built:   %s\n"<pos:position pos:line="4" pos:column="34"/></literal></expr></argument>, <argument><expr><call><name pos:line="4" pos:column="36">ap_get_server_built<pos:position pos:line="4" pos:column="55"/></name><argument_list pos:line="4" pos:column="55">()<pos:position pos:line="4" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="4" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="4" pos:column="59"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="5" pos:column="5">printf<pos:position pos:line="5" pos:column="11"/></name><argument_list pos:line="5" pos:column="11">(<argument><expr><literal type="string" pos:line="5" pos:column="12">"Server's Module Magic Number: %u:%u\n"<pos:position pos:line="5" pos:column="51"/></literal></expr></argument>,
           <argument><expr><name pos:line="6" pos:column="12">MODULE_MAGIC_NUMBER_MAJOR<pos:position pos:line="6" pos:column="37"/></name></expr></argument>, <argument><expr><name pos:line="6" pos:column="39">MODULE_MAGIC_NUMBER_MINOR<pos:position pos:line="6" pos:column="64"/></name></expr></argument>)<pos:position pos:line="6" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="6" pos:column="66"/></expr_stmt>
<cpp:if pos:line="7" pos:column="1">#<cpp:directive pos:line="7" pos:column="2">if<pos:position pos:line="7" pos:column="4"/></cpp:directive> <expr><name pos:line="7" pos:column="5">APR_MAJOR_VERSION<pos:position pos:line="7" pos:column="22"/></name> <operator pos:line="7" pos:column="23">&gt;=<pos:position pos:line="7" pos:column="28"/></operator> <literal type="number" pos:line="7" pos:column="26">2<pos:position pos:line="7" pos:column="27"/></literal></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="8" pos:column="5">printf<pos:position pos:line="8" pos:column="11"/></name><argument_list pos:line="8" pos:column="11">(<argument><expr><literal type="string" pos:line="8" pos:column="12">"Server loaded:  APR %s\n"<pos:position pos:line="8" pos:column="38"/></literal></expr></argument>, <argument><expr><call><name pos:line="8" pos:column="40">apr_version_string<pos:position pos:line="8" pos:column="58"/></name><argument_list pos:line="8" pos:column="58">()<pos:position pos:line="8" pos:column="60"/></argument_list></call></expr></argument>)<pos:position pos:line="8" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="8" pos:column="62"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="9" pos:column="5">printf<pos:position pos:line="9" pos:column="11"/></name><argument_list pos:line="9" pos:column="11">(<argument><expr><literal type="string" pos:line="9" pos:column="12">"Compiled using: APR %s\n"<pos:position pos:line="9" pos:column="38"/></literal></expr></argument>, <argument><expr><name pos:line="9" pos:column="40">APR_VERSION_STRING<pos:position pos:line="9" pos:column="58"/></name></expr></argument>)<pos:position pos:line="9" pos:column="59"/></argument_list></call></expr>;<pos:position pos:line="9" pos:column="60"/></expr_stmt>
<cpp:else pos:line="10" pos:column="1">#<cpp:directive pos:line="10" pos:column="2">else<pos:position pos:line="10" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="11" pos:column="5">printf<pos:position pos:line="11" pos:column="11"/></name><argument_list pos:line="11" pos:column="11">(<argument><expr><literal type="string" pos:line="11" pos:column="12">"Server loaded:  APR %s, APR-UTIL %s\n"<pos:position pos:line="11" pos:column="51"/></literal></expr></argument>,
           <argument><expr><call><name pos:line="12" pos:column="12">apr_version_string<pos:position pos:line="12" pos:column="30"/></name><argument_list pos:line="12" pos:column="30">()<pos:position pos:line="12" pos:column="32"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="12" pos:column="34">apu_version_string<pos:position pos:line="12" pos:column="52"/></name><argument_list pos:line="12" pos:column="52">()<pos:position pos:line="12" pos:column="54"/></argument_list></call></expr></argument>)<pos:position pos:line="12" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="12" pos:column="56"/></expr_stmt>
    <expr_stmt><expr><call><name pos:line="13" pos:column="5">printf<pos:position pos:line="13" pos:column="11"/></name><argument_list pos:line="13" pos:column="11">(<argument><expr><literal type="string" pos:line="13" pos:column="12">"Compiled using: APR %s, APR-UTIL %s\n"<pos:position pos:line="13" pos:column="51"/></literal></expr></argument>,
           <argument><expr><name pos:line="14" pos:column="12">APR_VERSION_STRING<pos:position pos:line="14" pos:column="30"/></name></expr></argument>, <argument><expr><name pos:line="14" pos:column="32">APU_VERSION_STRING<pos:position pos:line="14" pos:column="50"/></name></expr></argument>)<pos:position pos:line="14" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="14" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="15" pos:column="1">#<cpp:directive pos:line="15" pos:column="2">endif<pos:position pos:line="15" pos:column="7"/></cpp:directive></cpp:endif>
    <comment type="block" pos:line="16" pos:column="5">/* sizeof(foo) is long on some platforms so we might as well
     * make it long everywhere to keep the printf format
     * consistent
     */</comment>
    <expr_stmt><expr><call><name pos:line="20" pos:column="5">printf<pos:position pos:line="20" pos:column="11"/></name><argument_list pos:line="20" pos:column="11">(<argument><expr><literal type="string" pos:line="20" pos:column="12">"Architecture:   %ld-bit\n"<pos:position pos:line="20" pos:column="39"/></literal></expr></argument>, <argument><expr><literal type="number" pos:line="20" pos:column="41">8<pos:position pos:line="20" pos:column="42"/></literal> <operator pos:line="20" pos:column="43">*<pos:position pos:line="20" pos:column="44"/></operator> <operator pos:line="20" pos:column="45">(<pos:position pos:line="20" pos:column="46"/></operator><name pos:line="20" pos:column="46">long<pos:position pos:line="20" pos:column="50"/></name><operator pos:line="20" pos:column="50">)<pos:position pos:line="20" pos:column="51"/></operator><sizeof pos:line="20" pos:column="51">sizeof<argument_list pos:line="20" pos:column="57">(<argument><expr><name pos:line="20" pos:column="58">void<pos:position pos:line="20" pos:column="62"/></name> <operator pos:line="20" pos:column="63">*<pos:position pos:line="20" pos:column="64"/></operator></expr></argument>)<pos:position pos:line="20" pos:column="65"/></argument_list></sizeof></expr></argument>)<pos:position pos:line="20" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="20" pos:column="67"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="22" pos:column="5">show_mpm_settings<pos:position pos:line="22" pos:column="22"/></name><argument_list pos:line="22" pos:column="22">()<pos:position pos:line="22" pos:column="24"/></argument_list></call></expr>;<pos:position pos:line="22" pos:column="25"/></expr_stmt>

    <expr_stmt><expr><call><name pos:line="24" pos:column="5">printf<pos:position pos:line="24" pos:column="11"/></name><argument_list pos:line="24" pos:column="11">(<argument><expr><literal type="string" pos:line="24" pos:column="12">"Server compiled with....\n"<pos:position pos:line="24" pos:column="40"/></literal></expr></argument>)<pos:position pos:line="24" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="24" pos:column="42"/></expr_stmt>
<cpp:ifdef pos:line="25" pos:column="1">#<cpp:directive pos:line="25" pos:column="2">ifdef<pos:position pos:line="25" pos:column="7"/></cpp:directive> <name pos:line="25" pos:column="8">BIG_SECURITY_HOLE<pos:position pos:line="25" pos:column="25"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="26" pos:column="5">printf<pos:position pos:line="26" pos:column="11"/></name><argument_list pos:line="26" pos:column="11">(<argument><expr><literal type="string" pos:line="26" pos:column="12">" -D BIG_SECURITY_HOLE\n"<pos:position pos:line="26" pos:column="37"/></literal></expr></argument>)<pos:position pos:line="26" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="26" pos:column="39"/></expr_stmt>
<cpp:endif pos:line="27" pos:column="1">#<cpp:directive pos:line="27" pos:column="2">endif<pos:position pos:line="27" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="29" pos:column="1">#<cpp:directive pos:line="29" pos:column="2">ifdef<pos:position pos:line="29" pos:column="7"/></cpp:directive> <name pos:line="29" pos:column="8">SECURITY_HOLE_PASS_AUTHORIZATION<pos:position pos:line="29" pos:column="40"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="30" pos:column="5">printf<pos:position pos:line="30" pos:column="11"/></name><argument_list pos:line="30" pos:column="11">(<argument><expr><literal type="string" pos:line="30" pos:column="12">" -D SECURITY_HOLE_PASS_AUTHORIZATION\n"<pos:position pos:line="30" pos:column="52"/></literal></expr></argument>)<pos:position pos:line="30" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="30" pos:column="54"/></expr_stmt>
<cpp:endif pos:line="31" pos:column="1">#<cpp:directive pos:line="31" pos:column="2">endif<pos:position pos:line="31" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="33" pos:column="1">#<cpp:directive pos:line="33" pos:column="2">ifdef<pos:position pos:line="33" pos:column="7"/></cpp:directive> <name pos:line="33" pos:column="8">OS<pos:position pos:line="33" pos:column="10"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="34" pos:column="5">printf<pos:position pos:line="34" pos:column="11"/></name><argument_list pos:line="34" pos:column="11">(<argument><expr><literal type="string" pos:line="34" pos:column="12">" -D OS=\""<pos:position pos:line="34" pos:column="23"/></literal> <name pos:line="34" pos:column="24">OS<pos:position pos:line="34" pos:column="26"/></name> <literal type="string" pos:line="34" pos:column="27">"\"\n"<pos:position pos:line="34" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="34" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="34" pos:column="35"/></expr_stmt>
<cpp:endif pos:line="35" pos:column="1">#<cpp:directive pos:line="35" pos:column="2">endif<pos:position pos:line="35" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="37" pos:column="1">#<cpp:directive pos:line="37" pos:column="2">ifdef<pos:position pos:line="37" pos:column="7"/></cpp:directive> <name pos:line="37" pos:column="8">HAVE_SHMGET<pos:position pos:line="37" pos:column="19"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="38" pos:column="5">printf<pos:position pos:line="38" pos:column="11"/></name><argument_list pos:line="38" pos:column="11">(<argument><expr><literal type="string" pos:line="38" pos:column="12">" -D HAVE_SHMGET\n"<pos:position pos:line="38" pos:column="31"/></literal></expr></argument>)<pos:position pos:line="38" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="38" pos:column="33"/></expr_stmt>
<cpp:endif pos:line="39" pos:column="1">#<cpp:directive pos:line="39" pos:column="2">endif<pos:position pos:line="39" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="41" pos:column="1">#<cpp:directive pos:line="41" pos:column="2">if<pos:position pos:line="41" pos:column="4"/></cpp:directive> <expr><name pos:line="41" pos:column="5">APR_FILE_BASED_SHM<pos:position pos:line="41" pos:column="23"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="42" pos:column="5">printf<pos:position pos:line="42" pos:column="11"/></name><argument_list pos:line="42" pos:column="11">(<argument><expr><literal type="string" pos:line="42" pos:column="12">" -D APR_FILE_BASED_SHM\n"<pos:position pos:line="42" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="42" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="42" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="43" pos:column="1">#<cpp:directive pos:line="43" pos:column="2">endif<pos:position pos:line="43" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="45" pos:column="1">#<cpp:directive pos:line="45" pos:column="2">if<pos:position pos:line="45" pos:column="4"/></cpp:directive> <expr><name pos:line="45" pos:column="5">APR_HAS_SENDFILE<pos:position pos:line="45" pos:column="21"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="46" pos:column="5">printf<pos:position pos:line="46" pos:column="11"/></name><argument_list pos:line="46" pos:column="11">(<argument><expr><literal type="string" pos:line="46" pos:column="12">" -D APR_HAS_SENDFILE\n"<pos:position pos:line="46" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="46" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="46" pos:column="38"/></expr_stmt>
<cpp:endif pos:line="47" pos:column="1">#<cpp:directive pos:line="47" pos:column="2">endif<pos:position pos:line="47" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="49" pos:column="1">#<cpp:directive pos:line="49" pos:column="2">if<pos:position pos:line="49" pos:column="4"/></cpp:directive> <expr><name pos:line="49" pos:column="5">APR_HAS_MMAP<pos:position pos:line="49" pos:column="17"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="50" pos:column="5">printf<pos:position pos:line="50" pos:column="11"/></name><argument_list pos:line="50" pos:column="11">(<argument><expr><literal type="string" pos:line="50" pos:column="12">" -D APR_HAS_MMAP\n"<pos:position pos:line="50" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="50" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="50" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="51" pos:column="1">#<cpp:directive pos:line="51" pos:column="2">endif<pos:position pos:line="51" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="53" pos:column="1">#<cpp:directive pos:line="53" pos:column="2">ifdef<pos:position pos:line="53" pos:column="7"/></cpp:directive> <name pos:line="53" pos:column="8">NO_WRITEV<pos:position pos:line="53" pos:column="17"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="54" pos:column="5">printf<pos:position pos:line="54" pos:column="11"/></name><argument_list pos:line="54" pos:column="11">(<argument><expr><literal type="string" pos:line="54" pos:column="12">" -D NO_WRITEV\n"<pos:position pos:line="54" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="54" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="54" pos:column="31"/></expr_stmt>
<cpp:endif pos:line="55" pos:column="1">#<cpp:directive pos:line="55" pos:column="2">endif<pos:position pos:line="55" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="57" pos:column="1">#<cpp:directive pos:line="57" pos:column="2">ifdef<pos:position pos:line="57" pos:column="7"/></cpp:directive> <name pos:line="57" pos:column="8">NO_LINGCLOSE<pos:position pos:line="57" pos:column="20"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="58" pos:column="5">printf<pos:position pos:line="58" pos:column="11"/></name><argument_list pos:line="58" pos:column="11">(<argument><expr><literal type="string" pos:line="58" pos:column="12">" -D NO_LINGCLOSE\n"<pos:position pos:line="58" pos:column="32"/></literal></expr></argument>)<pos:position pos:line="58" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="58" pos:column="34"/></expr_stmt>
<cpp:endif pos:line="59" pos:column="1">#<cpp:directive pos:line="59" pos:column="2">endif<pos:position pos:line="59" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="61" pos:column="1">#<cpp:directive pos:line="61" pos:column="2">if<pos:position pos:line="61" pos:column="4"/></cpp:directive> <expr><name pos:line="61" pos:column="5">APR_HAVE_IPV6<pos:position pos:line="61" pos:column="18"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="62" pos:column="5">printf<pos:position pos:line="62" pos:column="11"/></name><argument_list pos:line="62" pos:column="11">(<argument><expr><literal type="string" pos:line="62" pos:column="12">" -D APR_HAVE_IPV6 (IPv4-mapped addresses "<pos:position pos:line="62" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="62" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="62" pos:column="57"/></expr_stmt>
<cpp:ifdef pos:line="63" pos:column="1">#<cpp:directive pos:line="63" pos:column="2">ifdef<pos:position pos:line="63" pos:column="7"/></cpp:directive> <name pos:line="63" pos:column="8">AP_ENABLE_V4_MAPPED<pos:position pos:line="63" pos:column="27"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="64" pos:column="5">printf<pos:position pos:line="64" pos:column="11"/></name><argument_list pos:line="64" pos:column="11">(<argument><expr><literal type="string" pos:line="64" pos:column="12">"enabled)\n"<pos:position pos:line="64" pos:column="24"/></literal></expr></argument>)<pos:position pos:line="64" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="64" pos:column="26"/></expr_stmt>
<cpp:else pos:line="65" pos:column="1">#<cpp:directive pos:line="65" pos:column="2">else<pos:position pos:line="65" pos:column="6"/></cpp:directive></cpp:else>
    <expr_stmt><expr><call><name pos:line="66" pos:column="5">printf<pos:position pos:line="66" pos:column="11"/></name><argument_list pos:line="66" pos:column="11">(<argument><expr><literal type="string" pos:line="66" pos:column="12">"disabled)\n"<pos:position pos:line="66" pos:column="25"/></literal></expr></argument>)<pos:position pos:line="66" pos:column="26"/></argument_list></call></expr>;<pos:position pos:line="66" pos:column="27"/></expr_stmt>
<cpp:endif pos:line="67" pos:column="1">#<cpp:directive pos:line="67" pos:column="2">endif<pos:position pos:line="67" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="68" pos:column="1">#<cpp:directive pos:line="68" pos:column="2">endif<pos:position pos:line="68" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="70" pos:column="1">#<cpp:directive pos:line="70" pos:column="2">if<pos:position pos:line="70" pos:column="4"/></cpp:directive> <expr><name pos:line="70" pos:column="5">APR_USE_FLOCK_SERIALIZE<pos:position pos:line="70" pos:column="28"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="71" pos:column="5">printf<pos:position pos:line="71" pos:column="11"/></name><argument_list pos:line="71" pos:column="11">(<argument><expr><literal type="string" pos:line="71" pos:column="12">" -D APR_USE_FLOCK_SERIALIZE\n"<pos:position pos:line="71" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="71" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="71" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="72" pos:column="1">#<cpp:directive pos:line="72" pos:column="2">endif<pos:position pos:line="72" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="74" pos:column="1">#<cpp:directive pos:line="74" pos:column="2">if<pos:position pos:line="74" pos:column="4"/></cpp:directive> <expr><name pos:line="74" pos:column="5">APR_USE_SYSVSEM_SERIALIZE<pos:position pos:line="74" pos:column="30"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="75" pos:column="5">printf<pos:position pos:line="75" pos:column="11"/></name><argument_list pos:line="75" pos:column="11">(<argument><expr><literal type="string" pos:line="75" pos:column="12">" -D APR_USE_SYSVSEM_SERIALIZE\n"<pos:position pos:line="75" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="75" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="75" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="76" pos:column="1">#<cpp:directive pos:line="76" pos:column="2">endif<pos:position pos:line="76" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="78" pos:column="1">#<cpp:directive pos:line="78" pos:column="2">if<pos:position pos:line="78" pos:column="4"/></cpp:directive> <expr><name pos:line="78" pos:column="5">APR_USE_POSIXSEM_SERIALIZE<pos:position pos:line="78" pos:column="31"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="79" pos:column="5">printf<pos:position pos:line="79" pos:column="11"/></name><argument_list pos:line="79" pos:column="11">(<argument><expr><literal type="string" pos:line="79" pos:column="12">" -D APR_USE_POSIXSEM_SERIALIZE\n"<pos:position pos:line="79" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="79" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="79" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="80" pos:column="1">#<cpp:directive pos:line="80" pos:column="2">endif<pos:position pos:line="80" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="82" pos:column="1">#<cpp:directive pos:line="82" pos:column="2">if<pos:position pos:line="82" pos:column="4"/></cpp:directive> <expr><name pos:line="82" pos:column="5">APR_USE_FCNTL_SERIALIZE<pos:position pos:line="82" pos:column="28"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="83" pos:column="5">printf<pos:position pos:line="83" pos:column="11"/></name><argument_list pos:line="83" pos:column="11">(<argument><expr><literal type="string" pos:line="83" pos:column="12">" -D APR_USE_FCNTL_SERIALIZE\n"<pos:position pos:line="83" pos:column="43"/></literal></expr></argument>)<pos:position pos:line="83" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="83" pos:column="45"/></expr_stmt>
<cpp:endif pos:line="84" pos:column="1">#<cpp:directive pos:line="84" pos:column="2">endif<pos:position pos:line="84" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="86" pos:column="1">#<cpp:directive pos:line="86" pos:column="2">if<pos:position pos:line="86" pos:column="4"/></cpp:directive> <expr><name pos:line="86" pos:column="5">APR_USE_PROC_PTHREAD_SERIALIZE<pos:position pos:line="86" pos:column="35"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="87" pos:column="5">printf<pos:position pos:line="87" pos:column="11"/></name><argument_list pos:line="87" pos:column="11">(<argument><expr><literal type="string" pos:line="87" pos:column="12">" -D APR_USE_PROC_PTHREAD_SERIALIZE\n"<pos:position pos:line="87" pos:column="50"/></literal></expr></argument>)<pos:position pos:line="87" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="87" pos:column="52"/></expr_stmt>
<cpp:endif pos:line="88" pos:column="1">#<cpp:directive pos:line="88" pos:column="2">endif<pos:position pos:line="88" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="90" pos:column="1">#<cpp:directive pos:line="90" pos:column="2">if<pos:position pos:line="90" pos:column="4"/></cpp:directive> <expr><name pos:line="90" pos:column="5">APR_USE_PTHREAD_SERIALIZE<pos:position pos:line="90" pos:column="30"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="91" pos:column="5">printf<pos:position pos:line="91" pos:column="11"/></name><argument_list pos:line="91" pos:column="11">(<argument><expr><literal type="string" pos:line="91" pos:column="12">" -D APR_USE_PTHREAD_SERIALIZE\n"<pos:position pos:line="91" pos:column="45"/></literal></expr></argument>)<pos:position pos:line="91" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="91" pos:column="47"/></expr_stmt>
<cpp:endif pos:line="92" pos:column="1">#<cpp:directive pos:line="92" pos:column="2">endif<pos:position pos:line="92" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="94" pos:column="1">#<cpp:directive pos:line="94" pos:column="2">if<pos:position pos:line="94" pos:column="4"/></cpp:directive> <expr><name pos:line="94" pos:column="5">APR_PROCESS_LOCK_IS_GLOBAL<pos:position pos:line="94" pos:column="31"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="95" pos:column="5">printf<pos:position pos:line="95" pos:column="11"/></name><argument_list pos:line="95" pos:column="11">(<argument><expr><literal type="string" pos:line="95" pos:column="12">" -D APR_PROCESS_LOCK_IS_GLOBAL\n"<pos:position pos:line="95" pos:column="46"/></literal></expr></argument>)<pos:position pos:line="95" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="95" pos:column="48"/></expr_stmt>
<cpp:endif pos:line="96" pos:column="1">#<cpp:directive pos:line="96" pos:column="2">endif<pos:position pos:line="96" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="98" pos:column="1">#<cpp:directive pos:line="98" pos:column="2">ifdef<pos:position pos:line="98" pos:column="7"/></cpp:directive> <name pos:line="98" pos:column="8">SINGLE_LISTEN_UNSERIALIZED_ACCEPT<pos:position pos:line="98" pos:column="41"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="99" pos:column="5">printf<pos:position pos:line="99" pos:column="11"/></name><argument_list pos:line="99" pos:column="11">(<argument><expr><literal type="string" pos:line="99" pos:column="12">" -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n"<pos:position pos:line="99" pos:column="53"/></literal></expr></argument>)<pos:position pos:line="99" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="99" pos:column="55"/></expr_stmt>
<cpp:endif pos:line="100" pos:column="1">#<cpp:directive pos:line="100" pos:column="2">endif<pos:position pos:line="100" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:if pos:line="102" pos:column="1">#<cpp:directive pos:line="102" pos:column="2">if<pos:position pos:line="102" pos:column="4"/></cpp:directive> <expr><name pos:line="102" pos:column="5">APR_HAS_OTHER_CHILD<pos:position pos:line="102" pos:column="24"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="103" pos:column="5">printf<pos:position pos:line="103" pos:column="11"/></name><argument_list pos:line="103" pos:column="11">(<argument><expr><literal type="string" pos:line="103" pos:column="12">" -D APR_HAS_OTHER_CHILD\n"<pos:position pos:line="103" pos:column="39"/></literal></expr></argument>)<pos:position pos:line="103" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="103" pos:column="41"/></expr_stmt>
<cpp:endif pos:line="104" pos:column="1">#<cpp:directive pos:line="104" pos:column="2">endif<pos:position pos:line="104" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="106" pos:column="1">#<cpp:directive pos:line="106" pos:column="2">ifdef<pos:position pos:line="106" pos:column="7"/></cpp:directive> <name pos:line="106" pos:column="8">AP_HAVE_RELIABLE_PIPED_LOGS<pos:position pos:line="106" pos:column="35"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="107" pos:column="5">printf<pos:position pos:line="107" pos:column="11"/></name><argument_list pos:line="107" pos:column="11">(<argument><expr><literal type="string" pos:line="107" pos:column="12">" -D AP_HAVE_RELIABLE_PIPED_LOGS\n"<pos:position pos:line="107" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="107" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="107" pos:column="49"/></expr_stmt>
<cpp:endif pos:line="108" pos:column="1">#<cpp:directive pos:line="108" pos:column="2">endif<pos:position pos:line="108" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="110" pos:column="1">#<cpp:directive pos:line="110" pos:column="2">ifdef<pos:position pos:line="110" pos:column="7"/></cpp:directive> <name pos:line="110" pos:column="8">BUFFERED_LOGS<pos:position pos:line="110" pos:column="21"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="111" pos:column="5">printf<pos:position pos:line="111" pos:column="11"/></name><argument_list pos:line="111" pos:column="11">(<argument><expr><literal type="string" pos:line="111" pos:column="12">" -D BUFFERED_LOGS\n"<pos:position pos:line="111" pos:column="33"/></literal></expr></argument>)<pos:position pos:line="111" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="111" pos:column="35"/></expr_stmt>
<cpp:ifdef pos:line="112" pos:column="1">#<cpp:directive pos:line="112" pos:column="2">ifdef<pos:position pos:line="112" pos:column="7"/></cpp:directive> <name pos:line="112" pos:column="8">PIPE_BUF<pos:position pos:line="112" pos:column="16"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="113" pos:column="5">printf<pos:position pos:line="113" pos:column="11"/></name><argument_list pos:line="113" pos:column="11">(<argument><expr><literal type="string" pos:line="113" pos:column="12">" -D PIPE_BUF=%ld\n"<pos:position pos:line="113" pos:column="32"/></literal></expr></argument>,<argument><expr><operator pos:line="113" pos:column="33">(<pos:position pos:line="113" pos:column="34"/></operator><name pos:line="113" pos:column="34">long<pos:position pos:line="113" pos:column="38"/></name><operator pos:line="113" pos:column="38">)<pos:position pos:line="113" pos:column="39"/></operator><name pos:line="113" pos:column="39">PIPE_BUF<pos:position pos:line="113" pos:column="47"/></name></expr></argument>)<pos:position pos:line="113" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="113" pos:column="49"/></expr_stmt>
<cpp:endif pos:line="114" pos:column="1">#<cpp:directive pos:line="114" pos:column="2">endif<pos:position pos:line="114" pos:column="7"/></cpp:directive></cpp:endif>
<cpp:endif pos:line="115" pos:column="1">#<cpp:directive pos:line="115" pos:column="2">endif<pos:position pos:line="115" pos:column="7"/></cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name pos:line="117" pos:column="5">printf<pos:position pos:line="117" pos:column="11"/></name><argument_list pos:line="117" pos:column="11">(<argument><expr><literal type="string" pos:line="117" pos:column="12">" -D DYNAMIC_MODULE_LIMIT=%ld\n"<pos:position pos:line="117" pos:column="44"/></literal></expr></argument>,<argument><expr><operator pos:line="117" pos:column="45">(<pos:position pos:line="117" pos:column="46"/></operator><name pos:line="117" pos:column="46">long<pos:position pos:line="117" pos:column="50"/></name><operator pos:line="117" pos:column="50">)<pos:position pos:line="117" pos:column="51"/></operator><name pos:line="117" pos:column="51">DYNAMIC_MODULE_LIMIT<pos:position pos:line="117" pos:column="71"/></name></expr></argument>)<pos:position pos:line="117" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="117" pos:column="73"/></expr_stmt>

<cpp:if pos:line="119" pos:column="1">#<cpp:directive pos:line="119" pos:column="2">if<pos:position pos:line="119" pos:column="4"/></cpp:directive> <expr><name pos:line="119" pos:column="5">APR_CHARSET_EBCDIC<pos:position pos:line="119" pos:column="23"/></name></expr></cpp:if>
    <expr_stmt><expr><call><name pos:line="120" pos:column="5">printf<pos:position pos:line="120" pos:column="11"/></name><argument_list pos:line="120" pos:column="11">(<argument><expr><literal type="string" pos:line="120" pos:column="12">" -D APR_CHARSET_EBCDIC\n"<pos:position pos:line="120" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="120" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="120" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="121" pos:column="1">#<cpp:directive pos:line="121" pos:column="2">endif<pos:position pos:line="121" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="123" pos:column="1">#<cpp:directive pos:line="123" pos:column="2">ifdef<pos:position pos:line="123" pos:column="7"/></cpp:directive> <name pos:line="123" pos:column="8">NEED_HASHBANG_EMUL<pos:position pos:line="123" pos:column="26"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="124" pos:column="5">printf<pos:position pos:line="124" pos:column="11"/></name><argument_list pos:line="124" pos:column="11">(<argument><expr><literal type="string" pos:line="124" pos:column="12">" -D NEED_HASHBANG_EMUL\n"<pos:position pos:line="124" pos:column="38"/></literal></expr></argument>)<pos:position pos:line="124" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="124" pos:column="40"/></expr_stmt>
<cpp:endif pos:line="125" pos:column="1">#<cpp:directive pos:line="125" pos:column="2">endif<pos:position pos:line="125" pos:column="7"/></cpp:directive></cpp:endif>

<comment type="block" pos:line="127" pos:column="1">/* This list displays the compiled in default paths: */</comment>
<cpp:ifdef pos:line="128" pos:column="1">#<cpp:directive pos:line="128" pos:column="2">ifdef<pos:position pos:line="128" pos:column="7"/></cpp:directive> <name pos:line="128" pos:column="8">HTTPD_ROOT<pos:position pos:line="128" pos:column="18"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="129" pos:column="5">printf<pos:position pos:line="129" pos:column="11"/></name><argument_list pos:line="129" pos:column="11">(<argument><expr><literal type="string" pos:line="129" pos:column="12">" -D HTTPD_ROOT=\""<pos:position pos:line="129" pos:column="31"/></literal> <name pos:line="129" pos:column="32">HTTPD_ROOT<pos:position pos:line="129" pos:column="42"/></name> <literal type="string" pos:line="129" pos:column="43">"\"\n"<pos:position pos:line="129" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="129" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="129" pos:column="51"/></expr_stmt>
<cpp:endif pos:line="130" pos:column="1">#<cpp:directive pos:line="130" pos:column="2">endif<pos:position pos:line="130" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="132" pos:column="1">#<cpp:directive pos:line="132" pos:column="2">ifdef<pos:position pos:line="132" pos:column="7"/></cpp:directive> <name pos:line="132" pos:column="8">SUEXEC_BIN<pos:position pos:line="132" pos:column="18"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="133" pos:column="5">printf<pos:position pos:line="133" pos:column="11"/></name><argument_list pos:line="133" pos:column="11">(<argument><expr><literal type="string" pos:line="133" pos:column="12">" -D SUEXEC_BIN=\""<pos:position pos:line="133" pos:column="31"/></literal> <name pos:line="133" pos:column="32">SUEXEC_BIN<pos:position pos:line="133" pos:column="42"/></name> <literal type="string" pos:line="133" pos:column="43">"\"\n"<pos:position pos:line="133" pos:column="49"/></literal></expr></argument>)<pos:position pos:line="133" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="133" pos:column="51"/></expr_stmt>
<cpp:endif pos:line="134" pos:column="1">#<cpp:directive pos:line="134" pos:column="2">endif<pos:position pos:line="134" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="136" pos:column="1">#<cpp:directive pos:line="136" pos:column="2">ifdef<pos:position pos:line="136" pos:column="7"/></cpp:directive> <name pos:line="136" pos:column="8">DEFAULT_PIDLOG<pos:position pos:line="136" pos:column="22"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="137" pos:column="5">printf<pos:position pos:line="137" pos:column="11"/></name><argument_list pos:line="137" pos:column="11">(<argument><expr><literal type="string" pos:line="137" pos:column="12">" -D DEFAULT_PIDLOG=\""<pos:position pos:line="137" pos:column="35"/></literal> <name pos:line="137" pos:column="36">DEFAULT_PIDLOG<pos:position pos:line="137" pos:column="50"/></name> <literal type="string" pos:line="137" pos:column="51">"\"\n"<pos:position pos:line="137" pos:column="57"/></literal></expr></argument>)<pos:position pos:line="137" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="137" pos:column="59"/></expr_stmt>
<cpp:endif pos:line="138" pos:column="1">#<cpp:directive pos:line="138" pos:column="2">endif<pos:position pos:line="138" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="140" pos:column="1">#<cpp:directive pos:line="140" pos:column="2">ifdef<pos:position pos:line="140" pos:column="7"/></cpp:directive> <name pos:line="140" pos:column="8">DEFAULT_SCOREBOARD<pos:position pos:line="140" pos:column="26"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="141" pos:column="5">printf<pos:position pos:line="141" pos:column="11"/></name><argument_list pos:line="141" pos:column="11">(<argument><expr><literal type="string" pos:line="141" pos:column="12">" -D DEFAULT_SCOREBOARD=\""<pos:position pos:line="141" pos:column="39"/></literal> <name pos:line="141" pos:column="40">DEFAULT_SCOREBOARD<pos:position pos:line="141" pos:column="58"/></name> <literal type="string" pos:line="141" pos:column="59">"\"\n"<pos:position pos:line="141" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="141" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="141" pos:column="67"/></expr_stmt>
<cpp:endif pos:line="142" pos:column="1">#<cpp:directive pos:line="142" pos:column="2">endif<pos:position pos:line="142" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="144" pos:column="1">#<cpp:directive pos:line="144" pos:column="2">ifdef<pos:position pos:line="144" pos:column="7"/></cpp:directive> <name pos:line="144" pos:column="8">DEFAULT_ERRORLOG<pos:position pos:line="144" pos:column="24"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="145" pos:column="5">printf<pos:position pos:line="145" pos:column="11"/></name><argument_list pos:line="145" pos:column="11">(<argument><expr><literal type="string" pos:line="145" pos:column="12">" -D DEFAULT_ERRORLOG=\""<pos:position pos:line="145" pos:column="37"/></literal> <name pos:line="145" pos:column="38">DEFAULT_ERRORLOG<pos:position pos:line="145" pos:column="54"/></name> <literal type="string" pos:line="145" pos:column="55">"\"\n"<pos:position pos:line="145" pos:column="61"/></literal></expr></argument>)<pos:position pos:line="145" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="145" pos:column="63"/></expr_stmt>
<cpp:endif pos:line="146" pos:column="1">#<cpp:directive pos:line="146" pos:column="2">endif<pos:position pos:line="146" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="148" pos:column="1">#<cpp:directive pos:line="148" pos:column="2">ifdef<pos:position pos:line="148" pos:column="7"/></cpp:directive> <name pos:line="148" pos:column="8">AP_TYPES_CONFIG_FILE<pos:position pos:line="148" pos:column="28"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="149" pos:column="5">printf<pos:position pos:line="149" pos:column="11"/></name><argument_list pos:line="149" pos:column="11">(<argument><expr><literal type="string" pos:line="149" pos:column="12">" -D AP_TYPES_CONFIG_FILE=\""<pos:position pos:line="149" pos:column="41"/></literal> <name pos:line="149" pos:column="42">AP_TYPES_CONFIG_FILE<pos:position pos:line="149" pos:column="62"/></name> <literal type="string" pos:line="149" pos:column="63">"\"\n"<pos:position pos:line="149" pos:column="69"/></literal></expr></argument>)<pos:position pos:line="149" pos:column="70"/></argument_list></call></expr>;<pos:position pos:line="149" pos:column="71"/></expr_stmt>
<cpp:endif pos:line="150" pos:column="1">#<cpp:directive pos:line="150" pos:column="2">endif<pos:position pos:line="150" pos:column="7"/></cpp:directive></cpp:endif>

<cpp:ifdef pos:line="152" pos:column="1">#<cpp:directive pos:line="152" pos:column="2">ifdef<pos:position pos:line="152" pos:column="7"/></cpp:directive> <name pos:line="152" pos:column="8">SERVER_CONFIG_FILE<pos:position pos:line="152" pos:column="26"/></name></cpp:ifdef>
    <expr_stmt><expr><call><name pos:line="153" pos:column="5">printf<pos:position pos:line="153" pos:column="11"/></name><argument_list pos:line="153" pos:column="11">(<argument><expr><literal type="string" pos:line="153" pos:column="12">" -D SERVER_CONFIG_FILE=\""<pos:position pos:line="153" pos:column="39"/></literal> <name pos:line="153" pos:column="40">SERVER_CONFIG_FILE<pos:position pos:line="153" pos:column="58"/></name> <literal type="string" pos:line="153" pos:column="59">"\"\n"<pos:position pos:line="153" pos:column="65"/></literal></expr></argument>)<pos:position pos:line="153" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="153" pos:column="67"/></expr_stmt>
<cpp:endif pos:line="154" pos:column="1">#<cpp:directive pos:line="154" pos:column="2">endif<pos:position pos:line="154" pos:column="7"/></cpp:directive></cpp:endif>
}<pos:position pos:line="155" pos:column="2"/></block></function></unit>
